
solucionTarea4Especial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  08007a68  08007a68  00017a68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800803c  0800803c  00020218  2**0
                  CONTENTS
  4 .ARM          00000000  0800803c  0800803c  00020218  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800803c  0800803c  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800803c  0800803c  0001803c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008040  08008040  00018040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08008044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005f70  20000218  0800825c  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006188  0800825c  00026188  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000345b  00000000  00000000  00020242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b6d  00000000  00000000  0002369d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000268  00000000  00000000  00024210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001f0  00000000  00000000  00024478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fc2b  00000000  00000000  00024668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003c7c  00000000  00000000  00034293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055f20  00000000  00000000  00037f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008de2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f00  00000000  00000000  0008de80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0008fd80  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0008fe4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007a50 	.word	0x08007a50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	08007a50 	.word	0x08007a50

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_fmul>:
 8000290:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000294:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000298:	bf1e      	ittt	ne
 800029a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800029e:	ea92 0f0c 	teqne	r2, ip
 80002a2:	ea93 0f0c 	teqne	r3, ip
 80002a6:	d06f      	beq.n	8000388 <__aeabi_fmul+0xf8>
 80002a8:	441a      	add	r2, r3
 80002aa:	ea80 0c01 	eor.w	ip, r0, r1
 80002ae:	0240      	lsls	r0, r0, #9
 80002b0:	bf18      	it	ne
 80002b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80002b6:	d01e      	beq.n	80002f6 <__aeabi_fmul+0x66>
 80002b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80002bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80002c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80002c4:	fba0 3101 	umull	r3, r1, r0, r1
 80002c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80002cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80002d0:	bf3e      	ittt	cc
 80002d2:	0049      	lslcc	r1, r1, #1
 80002d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80002d8:	005b      	lslcc	r3, r3, #1
 80002da:	ea40 0001 	orr.w	r0, r0, r1
 80002de:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80002e2:	2afd      	cmp	r2, #253	; 0xfd
 80002e4:	d81d      	bhi.n	8000322 <__aeabi_fmul+0x92>
 80002e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80002ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ee:	bf08      	it	eq
 80002f0:	f020 0001 	biceq.w	r0, r0, #1
 80002f4:	4770      	bx	lr
 80002f6:	f090 0f00 	teq	r0, #0
 80002fa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002fe:	bf08      	it	eq
 8000300:	0249      	lsleq	r1, r1, #9
 8000302:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000306:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800030a:	3a7f      	subs	r2, #127	; 0x7f
 800030c:	bfc2      	ittt	gt
 800030e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000312:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000316:	4770      	bxgt	lr
 8000318:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800031c:	f04f 0300 	mov.w	r3, #0
 8000320:	3a01      	subs	r2, #1
 8000322:	dc5d      	bgt.n	80003e0 <__aeabi_fmul+0x150>
 8000324:	f112 0f19 	cmn.w	r2, #25
 8000328:	bfdc      	itt	le
 800032a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800032e:	4770      	bxle	lr
 8000330:	f1c2 0200 	rsb	r2, r2, #0
 8000334:	0041      	lsls	r1, r0, #1
 8000336:	fa21 f102 	lsr.w	r1, r1, r2
 800033a:	f1c2 0220 	rsb	r2, r2, #32
 800033e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000342:	ea5f 0031 	movs.w	r0, r1, rrx
 8000346:	f140 0000 	adc.w	r0, r0, #0
 800034a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800034e:	bf08      	it	eq
 8000350:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000354:	4770      	bx	lr
 8000356:	f092 0f00 	teq	r2, #0
 800035a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800035e:	bf02      	ittt	eq
 8000360:	0040      	lsleq	r0, r0, #1
 8000362:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000366:	3a01      	subeq	r2, #1
 8000368:	d0f9      	beq.n	800035e <__aeabi_fmul+0xce>
 800036a:	ea40 000c 	orr.w	r0, r0, ip
 800036e:	f093 0f00 	teq	r3, #0
 8000372:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000376:	bf02      	ittt	eq
 8000378:	0049      	lsleq	r1, r1, #1
 800037a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800037e:	3b01      	subeq	r3, #1
 8000380:	d0f9      	beq.n	8000376 <__aeabi_fmul+0xe6>
 8000382:	ea41 010c 	orr.w	r1, r1, ip
 8000386:	e78f      	b.n	80002a8 <__aeabi_fmul+0x18>
 8000388:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800038c:	ea92 0f0c 	teq	r2, ip
 8000390:	bf18      	it	ne
 8000392:	ea93 0f0c 	teqne	r3, ip
 8000396:	d00a      	beq.n	80003ae <__aeabi_fmul+0x11e>
 8000398:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800039c:	bf18      	it	ne
 800039e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80003a2:	d1d8      	bne.n	8000356 <__aeabi_fmul+0xc6>
 80003a4:	ea80 0001 	eor.w	r0, r0, r1
 80003a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80003ac:	4770      	bx	lr
 80003ae:	f090 0f00 	teq	r0, #0
 80003b2:	bf17      	itett	ne
 80003b4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80003b8:	4608      	moveq	r0, r1
 80003ba:	f091 0f00 	teqne	r1, #0
 80003be:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80003c2:	d014      	beq.n	80003ee <__aeabi_fmul+0x15e>
 80003c4:	ea92 0f0c 	teq	r2, ip
 80003c8:	d101      	bne.n	80003ce <__aeabi_fmul+0x13e>
 80003ca:	0242      	lsls	r2, r0, #9
 80003cc:	d10f      	bne.n	80003ee <__aeabi_fmul+0x15e>
 80003ce:	ea93 0f0c 	teq	r3, ip
 80003d2:	d103      	bne.n	80003dc <__aeabi_fmul+0x14c>
 80003d4:	024b      	lsls	r3, r1, #9
 80003d6:	bf18      	it	ne
 80003d8:	4608      	movne	r0, r1
 80003da:	d108      	bne.n	80003ee <__aeabi_fmul+0x15e>
 80003dc:	ea80 0001 	eor.w	r0, r0, r1
 80003e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003ec:	4770      	bx	lr
 80003ee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003f2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80003f6:	4770      	bx	lr

080003f8 <__aeabi_drsub>:
 80003f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003fc:	e002      	b.n	8000404 <__adddf3>
 80003fe:	bf00      	nop

08000400 <__aeabi_dsub>:
 8000400:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000404 <__adddf3>:
 8000404:	b530      	push	{r4, r5, lr}
 8000406:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800040a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	bf1f      	itttt	ne
 800041a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800041e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000422:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000426:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042a:	f000 80e2 	beq.w	80005f2 <__adddf3+0x1ee>
 800042e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000432:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000436:	bfb8      	it	lt
 8000438:	426d      	neglt	r5, r5
 800043a:	dd0c      	ble.n	8000456 <__adddf3+0x52>
 800043c:	442c      	add	r4, r5
 800043e:	ea80 0202 	eor.w	r2, r0, r2
 8000442:	ea81 0303 	eor.w	r3, r1, r3
 8000446:	ea82 0000 	eor.w	r0, r2, r0
 800044a:	ea83 0101 	eor.w	r1, r3, r1
 800044e:	ea80 0202 	eor.w	r2, r0, r2
 8000452:	ea81 0303 	eor.w	r3, r1, r3
 8000456:	2d36      	cmp	r5, #54	; 0x36
 8000458:	bf88      	it	hi
 800045a:	bd30      	pophi	{r4, r5, pc}
 800045c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000460:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000464:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000468:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800046c:	d002      	beq.n	8000474 <__adddf3+0x70>
 800046e:	4240      	negs	r0, r0
 8000470:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000474:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000478:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800047c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000480:	d002      	beq.n	8000488 <__adddf3+0x84>
 8000482:	4252      	negs	r2, r2
 8000484:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000488:	ea94 0f05 	teq	r4, r5
 800048c:	f000 80a7 	beq.w	80005de <__adddf3+0x1da>
 8000490:	f1a4 0401 	sub.w	r4, r4, #1
 8000494:	f1d5 0e20 	rsbs	lr, r5, #32
 8000498:	db0d      	blt.n	80004b6 <__adddf3+0xb2>
 800049a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800049e:	fa22 f205 	lsr.w	r2, r2, r5
 80004a2:	1880      	adds	r0, r0, r2
 80004a4:	f141 0100 	adc.w	r1, r1, #0
 80004a8:	fa03 f20e 	lsl.w	r2, r3, lr
 80004ac:	1880      	adds	r0, r0, r2
 80004ae:	fa43 f305 	asr.w	r3, r3, r5
 80004b2:	4159      	adcs	r1, r3
 80004b4:	e00e      	b.n	80004d4 <__adddf3+0xd0>
 80004b6:	f1a5 0520 	sub.w	r5, r5, #32
 80004ba:	f10e 0e20 	add.w	lr, lr, #32
 80004be:	2a01      	cmp	r2, #1
 80004c0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004c4:	bf28      	it	cs
 80004c6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ca:	fa43 f305 	asr.w	r3, r3, r5
 80004ce:	18c0      	adds	r0, r0, r3
 80004d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	d507      	bpl.n	80004ea <__adddf3+0xe6>
 80004da:	f04f 0e00 	mov.w	lr, #0
 80004de:	f1dc 0c00 	rsbs	ip, ip, #0
 80004e2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004e6:	eb6e 0101 	sbc.w	r1, lr, r1
 80004ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004ee:	d31b      	bcc.n	8000528 <__adddf3+0x124>
 80004f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004f4:	d30c      	bcc.n	8000510 <__adddf3+0x10c>
 80004f6:	0849      	lsrs	r1, r1, #1
 80004f8:	ea5f 0030 	movs.w	r0, r0, rrx
 80004fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000500:	f104 0401 	add.w	r4, r4, #1
 8000504:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000508:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800050c:	f080 809a 	bcs.w	8000644 <__adddf3+0x240>
 8000510:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000514:	bf08      	it	eq
 8000516:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800051a:	f150 0000 	adcs.w	r0, r0, #0
 800051e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000522:	ea41 0105 	orr.w	r1, r1, r5
 8000526:	bd30      	pop	{r4, r5, pc}
 8000528:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800052c:	4140      	adcs	r0, r0
 800052e:	eb41 0101 	adc.w	r1, r1, r1
 8000532:	3c01      	subs	r4, #1
 8000534:	bf28      	it	cs
 8000536:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800053a:	d2e9      	bcs.n	8000510 <__adddf3+0x10c>
 800053c:	f091 0f00 	teq	r1, #0
 8000540:	bf04      	itt	eq
 8000542:	4601      	moveq	r1, r0
 8000544:	2000      	moveq	r0, #0
 8000546:	fab1 f381 	clz	r3, r1
 800054a:	bf08      	it	eq
 800054c:	3320      	addeq	r3, #32
 800054e:	f1a3 030b 	sub.w	r3, r3, #11
 8000552:	f1b3 0220 	subs.w	r2, r3, #32
 8000556:	da0c      	bge.n	8000572 <__adddf3+0x16e>
 8000558:	320c      	adds	r2, #12
 800055a:	dd08      	ble.n	800056e <__adddf3+0x16a>
 800055c:	f102 0c14 	add.w	ip, r2, #20
 8000560:	f1c2 020c 	rsb	r2, r2, #12
 8000564:	fa01 f00c 	lsl.w	r0, r1, ip
 8000568:	fa21 f102 	lsr.w	r1, r1, r2
 800056c:	e00c      	b.n	8000588 <__adddf3+0x184>
 800056e:	f102 0214 	add.w	r2, r2, #20
 8000572:	bfd8      	it	le
 8000574:	f1c2 0c20 	rsble	ip, r2, #32
 8000578:	fa01 f102 	lsl.w	r1, r1, r2
 800057c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000580:	bfdc      	itt	le
 8000582:	ea41 010c 	orrle.w	r1, r1, ip
 8000586:	4090      	lslle	r0, r2
 8000588:	1ae4      	subs	r4, r4, r3
 800058a:	bfa2      	ittt	ge
 800058c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000590:	4329      	orrge	r1, r5
 8000592:	bd30      	popge	{r4, r5, pc}
 8000594:	ea6f 0404 	mvn.w	r4, r4
 8000598:	3c1f      	subs	r4, #31
 800059a:	da1c      	bge.n	80005d6 <__adddf3+0x1d2>
 800059c:	340c      	adds	r4, #12
 800059e:	dc0e      	bgt.n	80005be <__adddf3+0x1ba>
 80005a0:	f104 0414 	add.w	r4, r4, #20
 80005a4:	f1c4 0220 	rsb	r2, r4, #32
 80005a8:	fa20 f004 	lsr.w	r0, r0, r4
 80005ac:	fa01 f302 	lsl.w	r3, r1, r2
 80005b0:	ea40 0003 	orr.w	r0, r0, r3
 80005b4:	fa21 f304 	lsr.w	r3, r1, r4
 80005b8:	ea45 0103 	orr.w	r1, r5, r3
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	f1c4 040c 	rsb	r4, r4, #12
 80005c2:	f1c4 0220 	rsb	r2, r4, #32
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 f304 	lsl.w	r3, r1, r4
 80005ce:	ea40 0003 	orr.w	r0, r0, r3
 80005d2:	4629      	mov	r1, r5
 80005d4:	bd30      	pop	{r4, r5, pc}
 80005d6:	fa21 f004 	lsr.w	r0, r1, r4
 80005da:	4629      	mov	r1, r5
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	f094 0f00 	teq	r4, #0
 80005e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005e6:	bf06      	itte	eq
 80005e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005ec:	3401      	addeq	r4, #1
 80005ee:	3d01      	subne	r5, #1
 80005f0:	e74e      	b.n	8000490 <__adddf3+0x8c>
 80005f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005f6:	bf18      	it	ne
 80005f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005fc:	d029      	beq.n	8000652 <__adddf3+0x24e>
 80005fe:	ea94 0f05 	teq	r4, r5
 8000602:	bf08      	it	eq
 8000604:	ea90 0f02 	teqeq	r0, r2
 8000608:	d005      	beq.n	8000616 <__adddf3+0x212>
 800060a:	ea54 0c00 	orrs.w	ip, r4, r0
 800060e:	bf04      	itt	eq
 8000610:	4619      	moveq	r1, r3
 8000612:	4610      	moveq	r0, r2
 8000614:	bd30      	pop	{r4, r5, pc}
 8000616:	ea91 0f03 	teq	r1, r3
 800061a:	bf1e      	ittt	ne
 800061c:	2100      	movne	r1, #0
 800061e:	2000      	movne	r0, #0
 8000620:	bd30      	popne	{r4, r5, pc}
 8000622:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000626:	d105      	bne.n	8000634 <__adddf3+0x230>
 8000628:	0040      	lsls	r0, r0, #1
 800062a:	4149      	adcs	r1, r1
 800062c:	bf28      	it	cs
 800062e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000638:	bf3c      	itt	cc
 800063a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800063e:	bd30      	popcc	{r4, r5, pc}
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000644:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000648:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800064c:	f04f 0000 	mov.w	r0, #0
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000656:	bf1a      	itte	ne
 8000658:	4619      	movne	r1, r3
 800065a:	4610      	movne	r0, r2
 800065c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000660:	bf1c      	itt	ne
 8000662:	460b      	movne	r3, r1
 8000664:	4602      	movne	r2, r0
 8000666:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800066a:	bf06      	itte	eq
 800066c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000670:	ea91 0f03 	teqeq	r1, r3
 8000674:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	bf00      	nop

0800067c <__aeabi_ui2d>:
 800067c:	f090 0f00 	teq	r0, #0
 8000680:	bf04      	itt	eq
 8000682:	2100      	moveq	r1, #0
 8000684:	4770      	bxeq	lr
 8000686:	b530      	push	{r4, r5, lr}
 8000688:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800068c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000690:	f04f 0500 	mov.w	r5, #0
 8000694:	f04f 0100 	mov.w	r1, #0
 8000698:	e750      	b.n	800053c <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_i2d>:
 800069c:	f090 0f00 	teq	r0, #0
 80006a0:	bf04      	itt	eq
 80006a2:	2100      	moveq	r1, #0
 80006a4:	4770      	bxeq	lr
 80006a6:	b530      	push	{r4, r5, lr}
 80006a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006b4:	bf48      	it	mi
 80006b6:	4240      	negmi	r0, r0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e73e      	b.n	800053c <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_f2d>:
 80006c0:	0042      	lsls	r2, r0, #1
 80006c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006ce:	bf1f      	itttt	ne
 80006d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006dc:	4770      	bxne	lr
 80006de:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006e2:	bf08      	it	eq
 80006e4:	4770      	bxeq	lr
 80006e6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006ea:	bf04      	itt	eq
 80006ec:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006f0:	4770      	bxeq	lr
 80006f2:	b530      	push	{r4, r5, lr}
 80006f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000700:	e71c      	b.n	800053c <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_ul2d>:
 8000704:	ea50 0201 	orrs.w	r2, r0, r1
 8000708:	bf08      	it	eq
 800070a:	4770      	bxeq	lr
 800070c:	b530      	push	{r4, r5, lr}
 800070e:	f04f 0500 	mov.w	r5, #0
 8000712:	e00a      	b.n	800072a <__aeabi_l2d+0x16>

08000714 <__aeabi_l2d>:
 8000714:	ea50 0201 	orrs.w	r2, r0, r1
 8000718:	bf08      	it	eq
 800071a:	4770      	bxeq	lr
 800071c:	b530      	push	{r4, r5, lr}
 800071e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000722:	d502      	bpl.n	800072a <__aeabi_l2d+0x16>
 8000724:	4240      	negs	r0, r0
 8000726:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800072a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800072e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000732:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000736:	f43f aed8 	beq.w	80004ea <__adddf3+0xe6>
 800073a:	f04f 0203 	mov.w	r2, #3
 800073e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000742:	bf18      	it	ne
 8000744:	3203      	addne	r2, #3
 8000746:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800074a:	bf18      	it	ne
 800074c:	3203      	addne	r2, #3
 800074e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000752:	f1c2 0320 	rsb	r3, r2, #32
 8000756:	fa00 fc03 	lsl.w	ip, r0, r3
 800075a:	fa20 f002 	lsr.w	r0, r0, r2
 800075e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000762:	ea40 000e 	orr.w	r0, r0, lr
 8000766:	fa21 f102 	lsr.w	r1, r1, r2
 800076a:	4414      	add	r4, r2
 800076c:	e6bd      	b.n	80004ea <__adddf3+0xe6>
 800076e:	bf00      	nop

08000770 <__aeabi_dmul>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8de 	bleq	800094c <__aeabi_dmul+0x1dc>
 8000790:	442c      	add	r4, r5
 8000792:	ea81 0603 	eor.w	r6, r1, r3
 8000796:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800079a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800079e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80007a2:	bf18      	it	ne
 80007a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80007a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80007b0:	d038      	beq.n	8000824 <__aeabi_dmul+0xb4>
 80007b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80007b6:	f04f 0500 	mov.w	r5, #0
 80007ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80007be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80007c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80007c6:	f04f 0600 	mov.w	r6, #0
 80007ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80007ce:	f09c 0f00 	teq	ip, #0
 80007d2:	bf18      	it	ne
 80007d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80007d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80007dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80007e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80007e4:	d204      	bcs.n	80007f0 <__aeabi_dmul+0x80>
 80007e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80007ea:	416d      	adcs	r5, r5
 80007ec:	eb46 0606 	adc.w	r6, r6, r6
 80007f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80007f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000800:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000804:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000808:	bf88      	it	hi
 800080a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800080e:	d81e      	bhi.n	800084e <__aeabi_dmul+0xde>
 8000810:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000814:	bf08      	it	eq
 8000816:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800081a:	f150 0000 	adcs.w	r0, r0, #0
 800081e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000822:	bd70      	pop	{r4, r5, r6, pc}
 8000824:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000828:	ea46 0101 	orr.w	r1, r6, r1
 800082c:	ea40 0002 	orr.w	r0, r0, r2
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000838:	bfc2      	ittt	gt
 800083a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800083e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000842:	bd70      	popgt	{r4, r5, r6, pc}
 8000844:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000848:	f04f 0e00 	mov.w	lr, #0
 800084c:	3c01      	subs	r4, #1
 800084e:	f300 80ab 	bgt.w	80009a8 <__aeabi_dmul+0x238>
 8000852:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000856:	bfde      	ittt	le
 8000858:	2000      	movle	r0, #0
 800085a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800085e:	bd70      	pople	{r4, r5, r6, pc}
 8000860:	f1c4 0400 	rsb	r4, r4, #0
 8000864:	3c20      	subs	r4, #32
 8000866:	da35      	bge.n	80008d4 <__aeabi_dmul+0x164>
 8000868:	340c      	adds	r4, #12
 800086a:	dc1b      	bgt.n	80008a4 <__aeabi_dmul+0x134>
 800086c:	f104 0414 	add.w	r4, r4, #20
 8000870:	f1c4 0520 	rsb	r5, r4, #32
 8000874:	fa00 f305 	lsl.w	r3, r0, r5
 8000878:	fa20 f004 	lsr.w	r0, r0, r4
 800087c:	fa01 f205 	lsl.w	r2, r1, r5
 8000880:	ea40 0002 	orr.w	r0, r0, r2
 8000884:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000888:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800088c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000890:	fa21 f604 	lsr.w	r6, r1, r4
 8000894:	eb42 0106 	adc.w	r1, r2, r6
 8000898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800089c:	bf08      	it	eq
 800089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f1c4 040c 	rsb	r4, r4, #12
 80008a8:	f1c4 0520 	rsb	r5, r4, #32
 80008ac:	fa00 f304 	lsl.w	r3, r0, r4
 80008b0:	fa20 f005 	lsr.w	r0, r0, r5
 80008b4:	fa01 f204 	lsl.w	r2, r1, r4
 80008b8:	ea40 0002 	orr.w	r0, r0, r2
 80008bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80008c4:	f141 0100 	adc.w	r1, r1, #0
 80008c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008cc:	bf08      	it	eq
 80008ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008d2:	bd70      	pop	{r4, r5, r6, pc}
 80008d4:	f1c4 0520 	rsb	r5, r4, #32
 80008d8:	fa00 f205 	lsl.w	r2, r0, r5
 80008dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80008e0:	fa20 f304 	lsr.w	r3, r0, r4
 80008e4:	fa01 f205 	lsl.w	r2, r1, r5
 80008e8:	ea43 0302 	orr.w	r3, r3, r2
 80008ec:	fa21 f004 	lsr.w	r0, r1, r4
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f4:	fa21 f204 	lsr.w	r2, r1, r4
 80008f8:	ea20 0002 	bic.w	r0, r0, r2
 80008fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000900:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000904:	bf08      	it	eq
 8000906:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f094 0f00 	teq	r4, #0
 8000910:	d10f      	bne.n	8000932 <__aeabi_dmul+0x1c2>
 8000912:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000916:	0040      	lsls	r0, r0, #1
 8000918:	eb41 0101 	adc.w	r1, r1, r1
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	bf08      	it	eq
 8000922:	3c01      	subeq	r4, #1
 8000924:	d0f7      	beq.n	8000916 <__aeabi_dmul+0x1a6>
 8000926:	ea41 0106 	orr.w	r1, r1, r6
 800092a:	f095 0f00 	teq	r5, #0
 800092e:	bf18      	it	ne
 8000930:	4770      	bxne	lr
 8000932:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000936:	0052      	lsls	r2, r2, #1
 8000938:	eb43 0303 	adc.w	r3, r3, r3
 800093c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000940:	bf08      	it	eq
 8000942:	3d01      	subeq	r5, #1
 8000944:	d0f7      	beq.n	8000936 <__aeabi_dmul+0x1c6>
 8000946:	ea43 0306 	orr.w	r3, r3, r6
 800094a:	4770      	bx	lr
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000954:	bf18      	it	ne
 8000956:	ea95 0f0c 	teqne	r5, ip
 800095a:	d00c      	beq.n	8000976 <__aeabi_dmul+0x206>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	d1d1      	bne.n	800090c <__aeabi_dmul+0x19c>
 8000968:	ea81 0103 	eor.w	r1, r1, r3
 800096c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000970:	f04f 0000 	mov.w	r0, #0
 8000974:	bd70      	pop	{r4, r5, r6, pc}
 8000976:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097a:	bf06      	itte	eq
 800097c:	4610      	moveq	r0, r2
 800097e:	4619      	moveq	r1, r3
 8000980:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000984:	d019      	beq.n	80009ba <__aeabi_dmul+0x24a>
 8000986:	ea94 0f0c 	teq	r4, ip
 800098a:	d102      	bne.n	8000992 <__aeabi_dmul+0x222>
 800098c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000990:	d113      	bne.n	80009ba <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	d105      	bne.n	80009a4 <__aeabi_dmul+0x234>
 8000998:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800099c:	bf1c      	itt	ne
 800099e:	4610      	movne	r0, r2
 80009a0:	4619      	movne	r1, r3
 80009a2:	d10a      	bne.n	80009ba <__aeabi_dmul+0x24a>
 80009a4:	ea81 0103 	eor.w	r1, r1, r3
 80009a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80009b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	bd70      	pop	{r4, r5, r6, pc}
 80009ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80009be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80009c2:	bd70      	pop	{r4, r5, r6, pc}

080009c4 <__aeabi_ddiv>:
 80009c4:	b570      	push	{r4, r5, r6, lr}
 80009c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80009ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80009d2:	bf1d      	ittte	ne
 80009d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80009d8:	ea94 0f0c 	teqne	r4, ip
 80009dc:	ea95 0f0c 	teqne	r5, ip
 80009e0:	f000 f8a7 	bleq	8000b32 <__aeabi_ddiv+0x16e>
 80009e4:	eba4 0405 	sub.w	r4, r4, r5
 80009e8:	ea81 0e03 	eor.w	lr, r1, r3
 80009ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80009f4:	f000 8088 	beq.w	8000b08 <__aeabi_ddiv+0x144>
 80009f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000a00:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000a04:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000a08:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000a0c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000a10:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000a14:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000a18:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000a1c:	429d      	cmp	r5, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4296      	cmpeq	r6, r2
 8000a22:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000a26:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000a2a:	d202      	bcs.n	8000a32 <__aeabi_ddiv+0x6e>
 8000a2c:	085b      	lsrs	r3, r3, #1
 8000a2e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a32:	1ab6      	subs	r6, r6, r2
 8000a34:	eb65 0503 	sbc.w	r5, r5, r3
 8000a38:	085b      	lsrs	r3, r3, #1
 8000a3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a3e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000a42:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000a46:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a4e:	bf22      	ittt	cs
 8000a50:	1ab6      	subcs	r6, r6, r2
 8000a52:	4675      	movcs	r5, lr
 8000a54:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a58:	085b      	lsrs	r3, r3, #1
 8000a5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a5e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a62:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a66:	bf22      	ittt	cs
 8000a68:	1ab6      	subcs	r6, r6, r2
 8000a6a:	4675      	movcs	r5, lr
 8000a6c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a70:	085b      	lsrs	r3, r3, #1
 8000a72:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a76:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a7e:	bf22      	ittt	cs
 8000a80:	1ab6      	subcs	r6, r6, r2
 8000a82:	4675      	movcs	r5, lr
 8000a84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a88:	085b      	lsrs	r3, r3, #1
 8000a8a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a8e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a92:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a96:	bf22      	ittt	cs
 8000a98:	1ab6      	subcs	r6, r6, r2
 8000a9a:	4675      	movcs	r5, lr
 8000a9c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000aa0:	ea55 0e06 	orrs.w	lr, r5, r6
 8000aa4:	d018      	beq.n	8000ad8 <__aeabi_ddiv+0x114>
 8000aa6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000aaa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000aae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000ab2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000ab6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000aba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000abe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000ac2:	d1c0      	bne.n	8000a46 <__aeabi_ddiv+0x82>
 8000ac4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000ac8:	d10b      	bne.n	8000ae2 <__aeabi_ddiv+0x11e>
 8000aca:	ea41 0100 	orr.w	r1, r1, r0
 8000ace:	f04f 0000 	mov.w	r0, #0
 8000ad2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000ad6:	e7b6      	b.n	8000a46 <__aeabi_ddiv+0x82>
 8000ad8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000adc:	bf04      	itt	eq
 8000ade:	4301      	orreq	r1, r0
 8000ae0:	2000      	moveq	r0, #0
 8000ae2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000ae6:	bf88      	it	hi
 8000ae8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000aec:	f63f aeaf 	bhi.w	800084e <__aeabi_dmul+0xde>
 8000af0:	ebb5 0c03 	subs.w	ip, r5, r3
 8000af4:	bf04      	itt	eq
 8000af6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000afa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000afe:	f150 0000 	adcs.w	r0, r0, #0
 8000b02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000b06:	bd70      	pop	{r4, r5, r6, pc}
 8000b08:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000b0c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000b10:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000b14:	bfc2      	ittt	gt
 8000b16:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000b1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000b1e:	bd70      	popgt	{r4, r5, r6, pc}
 8000b20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b24:	f04f 0e00 	mov.w	lr, #0
 8000b28:	3c01      	subs	r4, #1
 8000b2a:	e690      	b.n	800084e <__aeabi_dmul+0xde>
 8000b2c:	ea45 0e06 	orr.w	lr, r5, r6
 8000b30:	e68d      	b.n	800084e <__aeabi_dmul+0xde>
 8000b32:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000b36:	ea94 0f0c 	teq	r4, ip
 8000b3a:	bf08      	it	eq
 8000b3c:	ea95 0f0c 	teqeq	r5, ip
 8000b40:	f43f af3b 	beq.w	80009ba <__aeabi_dmul+0x24a>
 8000b44:	ea94 0f0c 	teq	r4, ip
 8000b48:	d10a      	bne.n	8000b60 <__aeabi_ddiv+0x19c>
 8000b4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000b4e:	f47f af34 	bne.w	80009ba <__aeabi_dmul+0x24a>
 8000b52:	ea95 0f0c 	teq	r5, ip
 8000b56:	f47f af25 	bne.w	80009a4 <__aeabi_dmul+0x234>
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	e72c      	b.n	80009ba <__aeabi_dmul+0x24a>
 8000b60:	ea95 0f0c 	teq	r5, ip
 8000b64:	d106      	bne.n	8000b74 <__aeabi_ddiv+0x1b0>
 8000b66:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b6a:	f43f aefd 	beq.w	8000968 <__aeabi_dmul+0x1f8>
 8000b6e:	4610      	mov	r0, r2
 8000b70:	4619      	mov	r1, r3
 8000b72:	e722      	b.n	80009ba <__aeabi_dmul+0x24a>
 8000b74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b78:	bf18      	it	ne
 8000b7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b7e:	f47f aec5 	bne.w	800090c <__aeabi_dmul+0x19c>
 8000b82:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b86:	f47f af0d 	bne.w	80009a4 <__aeabi_dmul+0x234>
 8000b8a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b8e:	f47f aeeb 	bne.w	8000968 <__aeabi_dmul+0x1f8>
 8000b92:	e712      	b.n	80009ba <__aeabi_dmul+0x24a>

08000b94 <__gedf2>:
 8000b94:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b98:	e006      	b.n	8000ba8 <__cmpdf2+0x4>
 8000b9a:	bf00      	nop

08000b9c <__ledf2>:
 8000b9c:	f04f 0c01 	mov.w	ip, #1
 8000ba0:	e002      	b.n	8000ba8 <__cmpdf2+0x4>
 8000ba2:	bf00      	nop

08000ba4 <__cmpdf2>:
 8000ba4:	f04f 0c01 	mov.w	ip, #1
 8000ba8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000bac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb8:	bf18      	it	ne
 8000bba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000bbe:	d01b      	beq.n	8000bf8 <__cmpdf2+0x54>
 8000bc0:	b001      	add	sp, #4
 8000bc2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000bc6:	bf0c      	ite	eq
 8000bc8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000bcc:	ea91 0f03 	teqne	r1, r3
 8000bd0:	bf02      	ittt	eq
 8000bd2:	ea90 0f02 	teqeq	r0, r2
 8000bd6:	2000      	moveq	r0, #0
 8000bd8:	4770      	bxeq	lr
 8000bda:	f110 0f00 	cmn.w	r0, #0
 8000bde:	ea91 0f03 	teq	r1, r3
 8000be2:	bf58      	it	pl
 8000be4:	4299      	cmppl	r1, r3
 8000be6:	bf08      	it	eq
 8000be8:	4290      	cmpeq	r0, r2
 8000bea:	bf2c      	ite	cs
 8000bec:	17d8      	asrcs	r0, r3, #31
 8000bee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000bf2:	f040 0001 	orr.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bfc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c00:	d102      	bne.n	8000c08 <__cmpdf2+0x64>
 8000c02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c06:	d107      	bne.n	8000c18 <__cmpdf2+0x74>
 8000c08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c10:	d1d6      	bne.n	8000bc0 <__cmpdf2+0x1c>
 8000c12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c16:	d0d3      	beq.n	8000bc0 <__cmpdf2+0x1c>
 8000c18:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_cdrcmple>:
 8000c20:	4684      	mov	ip, r0
 8000c22:	4610      	mov	r0, r2
 8000c24:	4662      	mov	r2, ip
 8000c26:	468c      	mov	ip, r1
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4663      	mov	r3, ip
 8000c2c:	e000      	b.n	8000c30 <__aeabi_cdcmpeq>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_cdcmpeq>:
 8000c30:	b501      	push	{r0, lr}
 8000c32:	f7ff ffb7 	bl	8000ba4 <__cmpdf2>
 8000c36:	2800      	cmp	r0, #0
 8000c38:	bf48      	it	mi
 8000c3a:	f110 0f00 	cmnmi.w	r0, #0
 8000c3e:	bd01      	pop	{r0, pc}

08000c40 <__aeabi_dcmpeq>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff fff4 	bl	8000c30 <__aeabi_cdcmpeq>
 8000c48:	bf0c      	ite	eq
 8000c4a:	2001      	moveq	r0, #1
 8000c4c:	2000      	movne	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_dcmplt>:
 8000c54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c58:	f7ff ffea 	bl	8000c30 <__aeabi_cdcmpeq>
 8000c5c:	bf34      	ite	cc
 8000c5e:	2001      	movcc	r0, #1
 8000c60:	2000      	movcs	r0, #0
 8000c62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c66:	bf00      	nop

08000c68 <__aeabi_dcmple>:
 8000c68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c6c:	f7ff ffe0 	bl	8000c30 <__aeabi_cdcmpeq>
 8000c70:	bf94      	ite	ls
 8000c72:	2001      	movls	r0, #1
 8000c74:	2000      	movhi	r0, #0
 8000c76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c7a:	bf00      	nop

08000c7c <__aeabi_dcmpge>:
 8000c7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c80:	f7ff ffce 	bl	8000c20 <__aeabi_cdrcmple>
 8000c84:	bf94      	ite	ls
 8000c86:	2001      	movls	r0, #1
 8000c88:	2000      	movhi	r0, #0
 8000c8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c8e:	bf00      	nop

08000c90 <__aeabi_dcmpgt>:
 8000c90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c94:	f7ff ffc4 	bl	8000c20 <__aeabi_cdrcmple>
 8000c98:	bf34      	ite	cc
 8000c9a:	2001      	movcc	r0, #1
 8000c9c:	2000      	movcs	r0, #0
 8000c9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_dcmpun>:
 8000ca4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ca8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cac:	d102      	bne.n	8000cb4 <__aeabi_dcmpun+0x10>
 8000cae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000cb2:	d10a      	bne.n	8000cca <__aeabi_dcmpun+0x26>
 8000cb4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cbc:	d102      	bne.n	8000cc4 <__aeabi_dcmpun+0x20>
 8000cbe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000cc2:	d102      	bne.n	8000cca <__aeabi_dcmpun+0x26>
 8000cc4:	f04f 0000 	mov.w	r0, #0
 8000cc8:	4770      	bx	lr
 8000cca:	f04f 0001 	mov.w	r0, #1
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_d2iz>:
 8000cd0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cd8:	d215      	bcs.n	8000d06 <__aeabi_d2iz+0x36>
 8000cda:	d511      	bpl.n	8000d00 <__aeabi_d2iz+0x30>
 8000cdc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ce0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ce4:	d912      	bls.n	8000d0c <__aeabi_d2iz+0x3c>
 8000ce6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cf2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cf6:	fa23 f002 	lsr.w	r0, r3, r2
 8000cfa:	bf18      	it	ne
 8000cfc:	4240      	negne	r0, r0
 8000cfe:	4770      	bx	lr
 8000d00:	f04f 0000 	mov.w	r0, #0
 8000d04:	4770      	bx	lr
 8000d06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d0a:	d105      	bne.n	8000d18 <__aeabi_d2iz+0x48>
 8000d0c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000d10:	bf08      	it	eq
 8000d12:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d16:	4770      	bx	lr
 8000d18:	f04f 0000 	mov.w	r0, #0
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <__aeabi_d2uiz>:
 8000d20:	004a      	lsls	r2, r1, #1
 8000d22:	d211      	bcs.n	8000d48 <__aeabi_d2uiz+0x28>
 8000d24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000d28:	d211      	bcs.n	8000d4e <__aeabi_d2uiz+0x2e>
 8000d2a:	d50d      	bpl.n	8000d48 <__aeabi_d2uiz+0x28>
 8000d2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000d30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000d34:	d40e      	bmi.n	8000d54 <__aeabi_d2uiz+0x34>
 8000d36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000d42:	fa23 f002 	lsr.w	r0, r3, r2
 8000d46:	4770      	bx	lr
 8000d48:	f04f 0000 	mov.w	r0, #0
 8000d4c:	4770      	bx	lr
 8000d4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d52:	d102      	bne.n	8000d5a <__aeabi_d2uiz+0x3a>
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d58:	4770      	bx	lr
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_d2f>:
 8000d60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000d68:	bf24      	itt	cs
 8000d6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000d6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000d72:	d90d      	bls.n	8000d90 <__aeabi_d2f+0x30>
 8000d74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d88:	bf08      	it	eq
 8000d8a:	f020 0001 	biceq.w	r0, r0, #1
 8000d8e:	4770      	bx	lr
 8000d90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d94:	d121      	bne.n	8000dda <__aeabi_d2f+0x7a>
 8000d96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d9a:	bfbc      	itt	lt
 8000d9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000da0:	4770      	bxlt	lr
 8000da2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000da6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000daa:	f1c2 0218 	rsb	r2, r2, #24
 8000dae:	f1c2 0c20 	rsb	ip, r2, #32
 8000db2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000db6:	fa20 f002 	lsr.w	r0, r0, r2
 8000dba:	bf18      	it	ne
 8000dbc:	f040 0001 	orrne.w	r0, r0, #1
 8000dc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000dc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000dc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000dcc:	ea40 000c 	orr.w	r0, r0, ip
 8000dd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000dd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000dd8:	e7cc      	b.n	8000d74 <__aeabi_d2f+0x14>
 8000dda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000dde:	d107      	bne.n	8000df0 <__aeabi_d2f+0x90>
 8000de0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000de4:	bf1e      	ittt	ne
 8000de6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000dea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000dee:	4770      	bxne	lr
 8000df0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000df4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000df8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <__aeabi_frsub>:
 8000e00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000e04:	e002      	b.n	8000e0c <__addsf3>
 8000e06:	bf00      	nop

08000e08 <__aeabi_fsub>:
 8000e08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000e0c <__addsf3>:
 8000e0c:	0042      	lsls	r2, r0, #1
 8000e0e:	bf1f      	itttt	ne
 8000e10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000e14:	ea92 0f03 	teqne	r2, r3
 8000e18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000e1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e20:	d06a      	beq.n	8000ef8 <__addsf3+0xec>
 8000e22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000e26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000e2a:	bfc1      	itttt	gt
 8000e2c:	18d2      	addgt	r2, r2, r3
 8000e2e:	4041      	eorgt	r1, r0
 8000e30:	4048      	eorgt	r0, r1
 8000e32:	4041      	eorgt	r1, r0
 8000e34:	bfb8      	it	lt
 8000e36:	425b      	neglt	r3, r3
 8000e38:	2b19      	cmp	r3, #25
 8000e3a:	bf88      	it	hi
 8000e3c:	4770      	bxhi	lr
 8000e3e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000e4a:	bf18      	it	ne
 8000e4c:	4240      	negne	r0, r0
 8000e4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e52:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000e56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000e5a:	bf18      	it	ne
 8000e5c:	4249      	negne	r1, r1
 8000e5e:	ea92 0f03 	teq	r2, r3
 8000e62:	d03f      	beq.n	8000ee4 <__addsf3+0xd8>
 8000e64:	f1a2 0201 	sub.w	r2, r2, #1
 8000e68:	fa41 fc03 	asr.w	ip, r1, r3
 8000e6c:	eb10 000c 	adds.w	r0, r0, ip
 8000e70:	f1c3 0320 	rsb	r3, r3, #32
 8000e74:	fa01 f103 	lsl.w	r1, r1, r3
 8000e78:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__addsf3+0x78>
 8000e7e:	4249      	negs	r1, r1
 8000e80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000e84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000e88:	d313      	bcc.n	8000eb2 <__addsf3+0xa6>
 8000e8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e8e:	d306      	bcc.n	8000e9e <__addsf3+0x92>
 8000e90:	0840      	lsrs	r0, r0, #1
 8000e92:	ea4f 0131 	mov.w	r1, r1, rrx
 8000e96:	f102 0201 	add.w	r2, r2, #1
 8000e9a:	2afe      	cmp	r2, #254	; 0xfe
 8000e9c:	d251      	bcs.n	8000f42 <__addsf3+0x136>
 8000e9e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ea2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ea6:	bf08      	it	eq
 8000ea8:	f020 0001 	biceq.w	r0, r0, #1
 8000eac:	ea40 0003 	orr.w	r0, r0, r3
 8000eb0:	4770      	bx	lr
 8000eb2:	0049      	lsls	r1, r1, #1
 8000eb4:	eb40 0000 	adc.w	r0, r0, r0
 8000eb8:	3a01      	subs	r2, #1
 8000eba:	bf28      	it	cs
 8000ebc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ec0:	d2ed      	bcs.n	8000e9e <__addsf3+0x92>
 8000ec2:	fab0 fc80 	clz	ip, r0
 8000ec6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000eca:	ebb2 020c 	subs.w	r2, r2, ip
 8000ece:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ed2:	bfaa      	itet	ge
 8000ed4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ed8:	4252      	neglt	r2, r2
 8000eda:	4318      	orrge	r0, r3
 8000edc:	bfbc      	itt	lt
 8000ede:	40d0      	lsrlt	r0, r2
 8000ee0:	4318      	orrlt	r0, r3
 8000ee2:	4770      	bx	lr
 8000ee4:	f092 0f00 	teq	r2, #0
 8000ee8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000eec:	bf06      	itte	eq
 8000eee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ef2:	3201      	addeq	r2, #1
 8000ef4:	3b01      	subne	r3, #1
 8000ef6:	e7b5      	b.n	8000e64 <__addsf3+0x58>
 8000ef8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000efc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f00:	bf18      	it	ne
 8000f02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f06:	d021      	beq.n	8000f4c <__addsf3+0x140>
 8000f08:	ea92 0f03 	teq	r2, r3
 8000f0c:	d004      	beq.n	8000f18 <__addsf3+0x10c>
 8000f0e:	f092 0f00 	teq	r2, #0
 8000f12:	bf08      	it	eq
 8000f14:	4608      	moveq	r0, r1
 8000f16:	4770      	bx	lr
 8000f18:	ea90 0f01 	teq	r0, r1
 8000f1c:	bf1c      	itt	ne
 8000f1e:	2000      	movne	r0, #0
 8000f20:	4770      	bxne	lr
 8000f22:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000f26:	d104      	bne.n	8000f32 <__addsf3+0x126>
 8000f28:	0040      	lsls	r0, r0, #1
 8000f2a:	bf28      	it	cs
 8000f2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000f30:	4770      	bx	lr
 8000f32:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000f36:	bf3c      	itt	cc
 8000f38:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000f3c:	4770      	bxcc	lr
 8000f3e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000f42:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000f46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4a:	4770      	bx	lr
 8000f4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000f50:	bf16      	itet	ne
 8000f52:	4608      	movne	r0, r1
 8000f54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000f58:	4601      	movne	r1, r0
 8000f5a:	0242      	lsls	r2, r0, #9
 8000f5c:	bf06      	itte	eq
 8000f5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000f62:	ea90 0f01 	teqeq	r0, r1
 8000f66:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000f6a:	4770      	bx	lr

08000f6c <__aeabi_ui2f>:
 8000f6c:	f04f 0300 	mov.w	r3, #0
 8000f70:	e004      	b.n	8000f7c <__aeabi_i2f+0x8>
 8000f72:	bf00      	nop

08000f74 <__aeabi_i2f>:
 8000f74:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000f78:	bf48      	it	mi
 8000f7a:	4240      	negmi	r0, r0
 8000f7c:	ea5f 0c00 	movs.w	ip, r0
 8000f80:	bf08      	it	eq
 8000f82:	4770      	bxeq	lr
 8000f84:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000f88:	4601      	mov	r1, r0
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	e01c      	b.n	8000fca <__aeabi_l2f+0x2a>

08000f90 <__aeabi_ul2f>:
 8000f90:	ea50 0201 	orrs.w	r2, r0, r1
 8000f94:	bf08      	it	eq
 8000f96:	4770      	bxeq	lr
 8000f98:	f04f 0300 	mov.w	r3, #0
 8000f9c:	e00a      	b.n	8000fb4 <__aeabi_l2f+0x14>
 8000f9e:	bf00      	nop

08000fa0 <__aeabi_l2f>:
 8000fa0:	ea50 0201 	orrs.w	r2, r0, r1
 8000fa4:	bf08      	it	eq
 8000fa6:	4770      	bxeq	lr
 8000fa8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000fac:	d502      	bpl.n	8000fb4 <__aeabi_l2f+0x14>
 8000fae:	4240      	negs	r0, r0
 8000fb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fb4:	ea5f 0c01 	movs.w	ip, r1
 8000fb8:	bf02      	ittt	eq
 8000fba:	4684      	moveq	ip, r0
 8000fbc:	4601      	moveq	r1, r0
 8000fbe:	2000      	moveq	r0, #0
 8000fc0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000fc4:	bf08      	it	eq
 8000fc6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000fca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000fce:	fabc f28c 	clz	r2, ip
 8000fd2:	3a08      	subs	r2, #8
 8000fd4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000fd8:	db10      	blt.n	8000ffc <__aeabi_l2f+0x5c>
 8000fda:	fa01 fc02 	lsl.w	ip, r1, r2
 8000fde:	4463      	add	r3, ip
 8000fe0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000fe4:	f1c2 0220 	rsb	r2, r2, #32
 8000fe8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000fec:	fa20 f202 	lsr.w	r2, r0, r2
 8000ff0:	eb43 0002 	adc.w	r0, r3, r2
 8000ff4:	bf08      	it	eq
 8000ff6:	f020 0001 	biceq.w	r0, r0, #1
 8000ffa:	4770      	bx	lr
 8000ffc:	f102 0220 	add.w	r2, r2, #32
 8001000:	fa01 fc02 	lsl.w	ip, r1, r2
 8001004:	f1c2 0220 	rsb	r2, r2, #32
 8001008:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800100c:	fa21 f202 	lsr.w	r2, r1, r2
 8001010:	eb43 0002 	adc.w	r0, r3, r2
 8001014:	bf08      	it	eq
 8001016:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800101a:	4770      	bx	lr

0800101c <__aeabi_f2uiz>:
 800101c:	0042      	lsls	r2, r0, #1
 800101e:	d20e      	bcs.n	800103e <__aeabi_f2uiz+0x22>
 8001020:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001024:	d30b      	bcc.n	800103e <__aeabi_f2uiz+0x22>
 8001026:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800102a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800102e:	d409      	bmi.n	8001044 <__aeabi_f2uiz+0x28>
 8001030:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001038:	fa23 f002 	lsr.w	r0, r3, r2
 800103c:	4770      	bx	lr
 800103e:	f04f 0000 	mov.w	r0, #0
 8001042:	4770      	bx	lr
 8001044:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001048:	d101      	bne.n	800104e <__aeabi_f2uiz+0x32>
 800104a:	0242      	lsls	r2, r0, #9
 800104c:	d102      	bne.n	8001054 <__aeabi_f2uiz+0x38>
 800104e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001052:	4770      	bx	lr
 8001054:	f04f 0000 	mov.w	r0, #0
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <__aeabi_d2lz>:
 800105c:	b538      	push	{r3, r4, r5, lr}
 800105e:	4605      	mov	r5, r0
 8001060:	460c      	mov	r4, r1
 8001062:	4628      	mov	r0, r5
 8001064:	4621      	mov	r1, r4
 8001066:	2200      	movs	r2, #0
 8001068:	2300      	movs	r3, #0
 800106a:	f7ff fdf3 	bl	8000c54 <__aeabi_dcmplt>
 800106e:	b928      	cbnz	r0, 800107c <__aeabi_d2lz+0x20>
 8001070:	4628      	mov	r0, r5
 8001072:	4621      	mov	r1, r4
 8001074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001078:	f000 b80a 	b.w	8001090 <__aeabi_d2ulz>
 800107c:	4628      	mov	r0, r5
 800107e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001082:	f000 f805 	bl	8001090 <__aeabi_d2ulz>
 8001086:	4240      	negs	r0, r0
 8001088:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800108c:	bd38      	pop	{r3, r4, r5, pc}
 800108e:	bf00      	nop

08001090 <__aeabi_d2ulz>:
 8001090:	b5d0      	push	{r4, r6, r7, lr}
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <__aeabi_d2ulz+0x34>)
 8001094:	2200      	movs	r2, #0
 8001096:	4606      	mov	r6, r0
 8001098:	460f      	mov	r7, r1
 800109a:	f7ff fb69 	bl	8000770 <__aeabi_dmul>
 800109e:	f7ff fe3f 	bl	8000d20 <__aeabi_d2uiz>
 80010a2:	4604      	mov	r4, r0
 80010a4:	f7ff faea 	bl	800067c <__aeabi_ui2d>
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <__aeabi_d2ulz+0x38>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	f7ff fb60 	bl	8000770 <__aeabi_dmul>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4630      	mov	r0, r6
 80010b6:	4639      	mov	r1, r7
 80010b8:	f7ff f9a2 	bl	8000400 <__aeabi_dsub>
 80010bc:	f7ff fe30 	bl	8000d20 <__aeabi_d2uiz>
 80010c0:	4621      	mov	r1, r4
 80010c2:	bdd0      	pop	{r4, r6, r7, pc}
 80010c4:	3df00000 	.word	0x3df00000
 80010c8:	41f00000 	.word	0x41f00000
 80010cc:	00000000 	.word	0x00000000

080010d0 <main>:

// La función de inicialización del sistema
void init_Hardware(void);


int main(void){
 80010d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010d4:	b094      	sub	sp, #80	; 0x50
 80010d6:	af06      	add	r7, sp, #24
	// Se llama la función de inicialización.
	init_Hardware();
 80010d8:	f000 fcca 	bl	8001a70 <init_Hardware>
		 */

		/* Este condicional siempre se ejecuta para tener el muestreo que controla
		 * las señales de salida de PWM con dutty variable.
		 */
		if(flagMuestreo == 1){
 80010dc:	4bae      	ldr	r3, [pc, #696]	; (8001398 <main+0x2c8>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	f040 809e 	bne.w	8001222 <main+0x152>
			uint8_t AccelX_low =  i2c_readSingleRegister(&Acelerometer, ACCEL_X1_L);
 80010e6:	2132      	movs	r1, #50	; 0x32
 80010e8:	48ac      	ldr	r0, [pc, #688]	; (800139c <main+0x2cc>)
 80010ea:	f001 fa9b 	bl	8002624 <i2c_readSingleRegister>
 80010ee:	4603      	mov	r3, r0
 80010f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint8_t AccelX_high = i2c_readSingleRegister(&Acelerometer, ACCEL_X1_H);
 80010f4:	2133      	movs	r1, #51	; 0x33
 80010f6:	48a9      	ldr	r0, [pc, #676]	; (800139c <main+0x2cc>)
 80010f8:	f001 fa94 	bl	8002624 <i2c_readSingleRegister>
 80010fc:	4603      	mov	r3, r0
 80010fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			int16_t AccelX = AccelX_high << 8 | AccelX_low;
 8001102:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	b21a      	sxth	r2, r3
 800110a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800110e:	b21b      	sxth	r3, r3
 8001110:	4313      	orrs	r3, r2
 8001112:	85bb      	strh	r3, [r7, #44]	; 0x2c
			X_axis = AccelX * 0.0039 * 9.8;
 8001114:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fabf 	bl	800069c <__aeabi_i2d>
 800111e:	a39a      	add	r3, pc, #616	; (adr r3, 8001388 <main+0x2b8>)
 8001120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001124:	f7ff fb24 	bl	8000770 <__aeabi_dmul>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	a397      	add	r3, pc, #604	; (adr r3, 8001390 <main+0x2c0>)
 8001132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001136:	f7ff fb1b 	bl	8000770 <__aeabi_dmul>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4610      	mov	r0, r2
 8001140:	4619      	mov	r1, r3
 8001142:	f7ff fe0d 	bl	8000d60 <__aeabi_d2f>
 8001146:	4603      	mov	r3, r0
 8001148:	4a95      	ldr	r2, [pc, #596]	; (80013a0 <main+0x2d0>)
 800114a:	6013      	str	r3, [r2, #0]

			uint8_t AccelY_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Y1_L);
 800114c:	2134      	movs	r1, #52	; 0x34
 800114e:	4893      	ldr	r0, [pc, #588]	; (800139c <main+0x2cc>)
 8001150:	f001 fa68 	bl	8002624 <i2c_readSingleRegister>
 8001154:	4603      	mov	r3, r0
 8001156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			uint8_t AccelY_high = i2c_readSingleRegister(&Acelerometer,ACCEL_Y1_H);
 800115a:	2135      	movs	r1, #53	; 0x35
 800115c:	488f      	ldr	r0, [pc, #572]	; (800139c <main+0x2cc>)
 800115e:	f001 fa61 	bl	8002624 <i2c_readSingleRegister>
 8001162:	4603      	mov	r3, r0
 8001164:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			int16_t AccelY = AccelY_high << 8 | AccelY_low;
 8001168:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b21a      	sxth	r2, r3
 8001170:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001174:	b21b      	sxth	r3, r3
 8001176:	4313      	orrs	r3, r2
 8001178:	853b      	strh	r3, [r7, #40]	; 0x28
			Y_axis = AccelY * 0.0039 * 9.8;
 800117a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fa8c 	bl	800069c <__aeabi_i2d>
 8001184:	a380      	add	r3, pc, #512	; (adr r3, 8001388 <main+0x2b8>)
 8001186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118a:	f7ff faf1 	bl	8000770 <__aeabi_dmul>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4610      	mov	r0, r2
 8001194:	4619      	mov	r1, r3
 8001196:	a37e      	add	r3, pc, #504	; (adr r3, 8001390 <main+0x2c0>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fae8 	bl	8000770 <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4610      	mov	r0, r2
 80011a6:	4619      	mov	r1, r3
 80011a8:	f7ff fdda 	bl	8000d60 <__aeabi_d2f>
 80011ac:	4603      	mov	r3, r0
 80011ae:	4a7d      	ldr	r2, [pc, #500]	; (80013a4 <main+0x2d4>)
 80011b0:	6013      	str	r3, [r2, #0]

			uint8_t AccelZ_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_L);
 80011b2:	2136      	movs	r1, #54	; 0x36
 80011b4:	4879      	ldr	r0, [pc, #484]	; (800139c <main+0x2cc>)
 80011b6:	f001 fa35 	bl	8002624 <i2c_readSingleRegister>
 80011ba:	4603      	mov	r3, r0
 80011bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			uint8_t AccelZ_high = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_H);
 80011c0:	2137      	movs	r1, #55	; 0x37
 80011c2:	4876      	ldr	r0, [pc, #472]	; (800139c <main+0x2cc>)
 80011c4:	f001 fa2e 	bl	8002624 <i2c_readSingleRegister>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			int16_t AccelZ = AccelZ_high << 8 | AccelZ_low;
 80011ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011da:	b21b      	sxth	r3, r3
 80011dc:	4313      	orrs	r3, r2
 80011de:	84bb      	strh	r3, [r7, #36]	; 0x24
			Z_axis = AccelZ * 0.0039 * 9.8;
 80011e0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fa59 	bl	800069c <__aeabi_i2d>
 80011ea:	a367      	add	r3, pc, #412	; (adr r3, 8001388 <main+0x2b8>)
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	f7ff fabe 	bl	8000770 <__aeabi_dmul>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	a364      	add	r3, pc, #400	; (adr r3, 8001390 <main+0x2c0>)
 80011fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001202:	f7ff fab5 	bl	8000770 <__aeabi_dmul>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	f7ff fda7 	bl	8000d60 <__aeabi_d2f>
 8001212:	4603      	mov	r3, r0
 8001214:	4a64      	ldr	r2, [pc, #400]	; (80013a8 <main+0x2d8>)
 8001216:	6013      	str	r3, [r2, #0]

			signalsPWM();
 8001218:	f000 fbc4 	bl	80019a4 <signalsPWM>
			flagMuestreo = 0;
 800121c:	4b5e      	ldr	r3, [pc, #376]	; (8001398 <main+0x2c8>)
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]

		}

		if(rxData != '\0'){
 8001222:	4b62      	ldr	r3, [pc, #392]	; (80013ac <main+0x2dc>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	f43f af58 	beq.w	80010dc <main+0xc>
			//writeChar(&USART6Comm, rxData);
			// Lectura sobre el WHO_AM_I del acelerómetro.
			if(flagMuestreo == 1){
 800122c:	4b5a      	ldr	r3, [pc, #360]	; (8001398 <main+0x2c8>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b01      	cmp	r3, #1
 8001232:	f040 8171 	bne.w	8001518 <main+0x448>
				if(rxData == 'w'){
 8001236:	4b5d      	ldr	r3, [pc, #372]	; (80013ac <main+0x2dc>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b77      	cmp	r3, #119	; 0x77
 800123c:	d11e      	bne.n	800127c <main+0x1ac>
					sprintf(bufferData, "WHO_AM_I? (r)\n");
 800123e:	495c      	ldr	r1, [pc, #368]	; (80013b0 <main+0x2e0>)
 8001240:	485c      	ldr	r0, [pc, #368]	; (80013b4 <main+0x2e4>)
 8001242:	f002 fe05 	bl	8003e50 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 8001246:	495b      	ldr	r1, [pc, #364]	; (80013b4 <main+0x2e4>)
 8001248:	485b      	ldr	r0, [pc, #364]	; (80013b8 <main+0x2e8>)
 800124a:	f001 ff0e 	bl	800306a <writeMsg>
					// Configuración del I2C e impresión del mensaje,
					i2cBuffer = i2c_readSingleRegister(&Acelerometer, WHO_AM_I);
 800124e:	2100      	movs	r1, #0
 8001250:	4852      	ldr	r0, [pc, #328]	; (800139c <main+0x2cc>)
 8001252:	f001 f9e7 	bl	8002624 <i2c_readSingleRegister>
 8001256:	4603      	mov	r3, r0
 8001258:	461a      	mov	r2, r3
 800125a:	4b58      	ldr	r3, [pc, #352]	; (80013bc <main+0x2ec>)
 800125c:	701a      	strb	r2, [r3, #0]
					sprintf(bufferData, "dataRead = 0x%x \n", (unsigned int) i2cBuffer);
 800125e:	4b57      	ldr	r3, [pc, #348]	; (80013bc <main+0x2ec>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	4956      	ldr	r1, [pc, #344]	; (80013c0 <main+0x2f0>)
 8001266:	4853      	ldr	r0, [pc, #332]	; (80013b4 <main+0x2e4>)
 8001268:	f002 fdf2 	bl	8003e50 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 800126c:	4951      	ldr	r1, [pc, #324]	; (80013b4 <main+0x2e4>)
 800126e:	4852      	ldr	r0, [pc, #328]	; (80013b8 <main+0x2e8>)
 8001270:	f001 fefb 	bl	800306a <writeMsg>
					rxData = '\0';
 8001274:	4b4d      	ldr	r3, [pc, #308]	; (80013ac <main+0x2dc>)
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
 800127a:	e14a      	b.n	8001512 <main+0x442>
				}
				// Estado del acelerómetro
				else if (rxData == 'p'){
 800127c:	4b4b      	ldr	r3, [pc, #300]	; (80013ac <main+0x2dc>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b70      	cmp	r3, #112	; 0x70
 8001282:	d11e      	bne.n	80012c2 <main+0x1f2>
					sprintf(bufferData, "PWR_MGMT_1 state (r)\n");
 8001284:	494f      	ldr	r1, [pc, #316]	; (80013c4 <main+0x2f4>)
 8001286:	484b      	ldr	r0, [pc, #300]	; (80013b4 <main+0x2e4>)
 8001288:	f002 fde2 	bl	8003e50 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 800128c:	4949      	ldr	r1, [pc, #292]	; (80013b4 <main+0x2e4>)
 800128e:	484a      	ldr	r0, [pc, #296]	; (80013b8 <main+0x2e8>)
 8001290:	f001 feeb 	bl	800306a <writeMsg>
					i2cBuffer = i2c_readSingleRegister(&Acelerometer, POWER_CTL);
 8001294:	212d      	movs	r1, #45	; 0x2d
 8001296:	4841      	ldr	r0, [pc, #260]	; (800139c <main+0x2cc>)
 8001298:	f001 f9c4 	bl	8002624 <i2c_readSingleRegister>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	4b46      	ldr	r3, [pc, #280]	; (80013bc <main+0x2ec>)
 80012a2:	701a      	strb	r2, [r3, #0]
					sprintf(bufferData, "dataRead = 0x%x \n", (unsigned int) i2cBuffer);
 80012a4:	4b45      	ldr	r3, [pc, #276]	; (80013bc <main+0x2ec>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4945      	ldr	r1, [pc, #276]	; (80013c0 <main+0x2f0>)
 80012ac:	4841      	ldr	r0, [pc, #260]	; (80013b4 <main+0x2e4>)
 80012ae:	f002 fdcf 	bl	8003e50 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 80012b2:	4940      	ldr	r1, [pc, #256]	; (80013b4 <main+0x2e4>)
 80012b4:	4840      	ldr	r0, [pc, #256]	; (80013b8 <main+0x2e8>)
 80012b6:	f001 fed8 	bl	800306a <writeMsg>
					rxData = '\0';
 80012ba:	4b3c      	ldr	r3, [pc, #240]	; (80013ac <main+0x2dc>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	e127      	b.n	8001512 <main+0x442>
				}
				// Reset para el acelerómetro.
				else if (rxData == 'r'){
 80012c2:	4b3a      	ldr	r3, [pc, #232]	; (80013ac <main+0x2dc>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b72      	cmp	r3, #114	; 0x72
 80012c8:	d110      	bne.n	80012ec <main+0x21c>
					sprintf(bufferData, "PWR_MGMT_1 reset (w)\n");
 80012ca:	493f      	ldr	r1, [pc, #252]	; (80013c8 <main+0x2f8>)
 80012cc:	4839      	ldr	r0, [pc, #228]	; (80013b4 <main+0x2e4>)
 80012ce:	f002 fdbf 	bl	8003e50 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 80012d2:	4938      	ldr	r1, [pc, #224]	; (80013b4 <main+0x2e4>)
 80012d4:	4838      	ldr	r0, [pc, #224]	; (80013b8 <main+0x2e8>)
 80012d6:	f001 fec8 	bl	800306a <writeMsg>
					// Configuración del reset dentro del I2C.
					i2c_writeSingleRegister(&Acelerometer, POWER_CTL , 0x2D);
 80012da:	222d      	movs	r2, #45	; 0x2d
 80012dc:	212d      	movs	r1, #45	; 0x2d
 80012de:	482f      	ldr	r0, [pc, #188]	; (800139c <main+0x2cc>)
 80012e0:	f001 f9d1 	bl	8002686 <i2c_writeSingleRegister>
					rxData = '\0';
 80012e4:	4b31      	ldr	r3, [pc, #196]	; (80013ac <main+0x2dc>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
 80012ea:	e112      	b.n	8001512 <main+0x442>
				}
				// Para el eje X y su lectura presionando la tecla "x".
				else if (rxData == 'x'){
 80012ec:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <main+0x2dc>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b78      	cmp	r3, #120	; 0x78
 80012f2:	d16f      	bne.n	80013d4 <main+0x304>
					sprintf(bufferData, "Axis X data (r) \n");
 80012f4:	4935      	ldr	r1, [pc, #212]	; (80013cc <main+0x2fc>)
 80012f6:	482f      	ldr	r0, [pc, #188]	; (80013b4 <main+0x2e4>)
 80012f8:	f002 fdaa 	bl	8003e50 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 80012fc:	492d      	ldr	r1, [pc, #180]	; (80013b4 <main+0x2e4>)
 80012fe:	482e      	ldr	r0, [pc, #184]	; (80013b8 <main+0x2e8>)
 8001300:	f001 feb3 	bl	800306a <writeMsg>
					uint8_t AccelX_low =  i2c_readSingleRegister(&Acelerometer, ACCEL_X1_L);
 8001304:	2132      	movs	r1, #50	; 0x32
 8001306:	4825      	ldr	r0, [pc, #148]	; (800139c <main+0x2cc>)
 8001308:	f001 f98c 	bl	8002624 <i2c_readSingleRegister>
 800130c:	4603      	mov	r3, r0
 800130e:	76fb      	strb	r3, [r7, #27]
					uint8_t AccelX_high = i2c_readSingleRegister(&Acelerometer, ACCEL_X1_H);
 8001310:	2133      	movs	r1, #51	; 0x33
 8001312:	4822      	ldr	r0, [pc, #136]	; (800139c <main+0x2cc>)
 8001314:	f001 f986 	bl	8002624 <i2c_readSingleRegister>
 8001318:	4603      	mov	r3, r0
 800131a:	76bb      	strb	r3, [r7, #26]
					int16_t AccelX = AccelX_high << 8 | AccelX_low;
 800131c:	7ebb      	ldrb	r3, [r7, #26]
 800131e:	021b      	lsls	r3, r3, #8
 8001320:	b21a      	sxth	r2, r3
 8001322:	7efb      	ldrb	r3, [r7, #27]
 8001324:	b21b      	sxth	r3, r3
 8001326:	4313      	orrs	r3, r2
 8001328:	833b      	strh	r3, [r7, #24]
					X_axis = AccelX * 0.0039 * 9.8;
 800132a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f9b4 	bl	800069c <__aeabi_i2d>
 8001334:	a314      	add	r3, pc, #80	; (adr r3, 8001388 <main+0x2b8>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	f7ff fa19 	bl	8000770 <__aeabi_dmul>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	a312      	add	r3, pc, #72	; (adr r3, 8001390 <main+0x2c0>)
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	f7ff fa10 	bl	8000770 <__aeabi_dmul>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	f7ff fd02 	bl	8000d60 <__aeabi_d2f>
 800135c:	4603      	mov	r3, r0
 800135e:	4a10      	ldr	r2, [pc, #64]	; (80013a0 <main+0x2d0>)
 8001360:	6013      	str	r3, [r2, #0]
					sprintf(bufferData, "AccelX = %.2f \n", X_axis);
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <main+0x2d0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f9aa 	bl	80006c0 <__aeabi_f2d>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4917      	ldr	r1, [pc, #92]	; (80013d0 <main+0x300>)
 8001372:	4810      	ldr	r0, [pc, #64]	; (80013b4 <main+0x2e4>)
 8001374:	f002 fd6c 	bl	8003e50 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 8001378:	490e      	ldr	r1, [pc, #56]	; (80013b4 <main+0x2e4>)
 800137a:	480f      	ldr	r0, [pc, #60]	; (80013b8 <main+0x2e8>)
 800137c:	f001 fe75 	bl	800306a <writeMsg>
					rxData = '\0';
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <main+0x2dc>)
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
 8001386:	e0c4      	b.n	8001512 <main+0x442>
 8001388:	8e8a71de 	.word	0x8e8a71de
 800138c:	3f6ff2e4 	.word	0x3f6ff2e4
 8001390:	9999999a 	.word	0x9999999a
 8001394:	40239999 	.word	0x40239999
 8001398:	20006100 	.word	0x20006100
 800139c:	20000308 	.word	0x20000308
 80013a0:	20006158 	.word	0x20006158
 80013a4:	2000615c 	.word	0x2000615c
 80013a8:	20006160 	.word	0x20006160
 80013ac:	20000311 	.word	0x20000311
 80013b0:	08007a68 	.word	0x08007a68
 80013b4:	20000000 	.word	0x20000000
 80013b8:	2000025c 	.word	0x2000025c
 80013bc:	20000310 	.word	0x20000310
 80013c0:	08007a78 	.word	0x08007a78
 80013c4:	08007a8c 	.word	0x08007a8c
 80013c8:	08007aa4 	.word	0x08007aa4
 80013cc:	08007abc 	.word	0x08007abc
 80013d0:	08007ad0 	.word	0x08007ad0
				}
				// Para el eje Y y su lectura presionando la tecla "y".
				else if(rxData == 'y'){
 80013d4:	4bb6      	ldr	r3, [pc, #728]	; (80016b0 <main+0x5e0>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b79      	cmp	r3, #121	; 0x79
 80013da:	d149      	bne.n	8001470 <main+0x3a0>
					sprintf(bufferData, "Axis Y data (r)\n");
 80013dc:	49b5      	ldr	r1, [pc, #724]	; (80016b4 <main+0x5e4>)
 80013de:	48b6      	ldr	r0, [pc, #728]	; (80016b8 <main+0x5e8>)
 80013e0:	f002 fd36 	bl	8003e50 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 80013e4:	49b4      	ldr	r1, [pc, #720]	; (80016b8 <main+0x5e8>)
 80013e6:	48b5      	ldr	r0, [pc, #724]	; (80016bc <main+0x5ec>)
 80013e8:	f001 fe3f 	bl	800306a <writeMsg>
					uint8_t AccelY_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Y1_L);
 80013ec:	2134      	movs	r1, #52	; 0x34
 80013ee:	48b4      	ldr	r0, [pc, #720]	; (80016c0 <main+0x5f0>)
 80013f0:	f001 f918 	bl	8002624 <i2c_readSingleRegister>
 80013f4:	4603      	mov	r3, r0
 80013f6:	77fb      	strb	r3, [r7, #31]
					uint8_t AccelY_high = i2c_readSingleRegister(&Acelerometer,ACCEL_Y1_H);
 80013f8:	2135      	movs	r1, #53	; 0x35
 80013fa:	48b1      	ldr	r0, [pc, #708]	; (80016c0 <main+0x5f0>)
 80013fc:	f001 f912 	bl	8002624 <i2c_readSingleRegister>
 8001400:	4603      	mov	r3, r0
 8001402:	77bb      	strb	r3, [r7, #30]
					int16_t AccelY = AccelY_high << 8 | AccelY_low;
 8001404:	7fbb      	ldrb	r3, [r7, #30]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	b21a      	sxth	r2, r3
 800140a:	7ffb      	ldrb	r3, [r7, #31]
 800140c:	b21b      	sxth	r3, r3
 800140e:	4313      	orrs	r3, r2
 8001410:	83bb      	strh	r3, [r7, #28]
					Y_axis = AccelY * 0.0039 * 9.8;
 8001412:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f940 	bl	800069c <__aeabi_i2d>
 800141c:	a3a0      	add	r3, pc, #640	; (adr r3, 80016a0 <main+0x5d0>)
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	f7ff f9a5 	bl	8000770 <__aeabi_dmul>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	a39e      	add	r3, pc, #632	; (adr r3, 80016a8 <main+0x5d8>)
 8001430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001434:	f7ff f99c 	bl	8000770 <__aeabi_dmul>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fc8e 	bl	8000d60 <__aeabi_d2f>
 8001444:	4603      	mov	r3, r0
 8001446:	4a9f      	ldr	r2, [pc, #636]	; (80016c4 <main+0x5f4>)
 8001448:	6013      	str	r3, [r2, #0]
					sprintf(bufferData, "AccelY = %.2f \n", Y_axis);
 800144a:	4b9e      	ldr	r3, [pc, #632]	; (80016c4 <main+0x5f4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f936 	bl	80006c0 <__aeabi_f2d>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	499b      	ldr	r1, [pc, #620]	; (80016c8 <main+0x5f8>)
 800145a:	4897      	ldr	r0, [pc, #604]	; (80016b8 <main+0x5e8>)
 800145c:	f002 fcf8 	bl	8003e50 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 8001460:	4995      	ldr	r1, [pc, #596]	; (80016b8 <main+0x5e8>)
 8001462:	4896      	ldr	r0, [pc, #600]	; (80016bc <main+0x5ec>)
 8001464:	f001 fe01 	bl	800306a <writeMsg>
					rxData = '\0';
 8001468:	4b91      	ldr	r3, [pc, #580]	; (80016b0 <main+0x5e0>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	e050      	b.n	8001512 <main+0x442>
				}
				// Para el eje Z y su lectura presionando la tecla "z".
				else if(rxData == 'z'){
 8001470:	4b8f      	ldr	r3, [pc, #572]	; (80016b0 <main+0x5e0>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b7a      	cmp	r3, #122	; 0x7a
 8001476:	d14c      	bne.n	8001512 <main+0x442>
					sprintf(bufferData, "Axis Z data (r)\n");
 8001478:	4994      	ldr	r1, [pc, #592]	; (80016cc <main+0x5fc>)
 800147a:	488f      	ldr	r0, [pc, #572]	; (80016b8 <main+0x5e8>)
 800147c:	f002 fce8 	bl	8003e50 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 8001480:	498d      	ldr	r1, [pc, #564]	; (80016b8 <main+0x5e8>)
 8001482:	488e      	ldr	r0, [pc, #568]	; (80016bc <main+0x5ec>)
 8001484:	f001 fdf1 	bl	800306a <writeMsg>
					uint8_t AccelZ_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_L);
 8001488:	2136      	movs	r1, #54	; 0x36
 800148a:	488d      	ldr	r0, [pc, #564]	; (80016c0 <main+0x5f0>)
 800148c:	f001 f8ca 	bl	8002624 <i2c_readSingleRegister>
 8001490:	4603      	mov	r3, r0
 8001492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					uint8_t AccelZ_high = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_H);
 8001496:	2137      	movs	r1, #55	; 0x37
 8001498:	4889      	ldr	r0, [pc, #548]	; (80016c0 <main+0x5f0>)
 800149a:	f001 f8c3 	bl	8002624 <i2c_readSingleRegister>
 800149e:	4603      	mov	r3, r0
 80014a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					int16_t AccelZ = AccelZ_high << 8 | AccelZ_low;
 80014a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	4313      	orrs	r3, r2
 80014b4:	843b      	strh	r3, [r7, #32]
					Z_axis = AccelZ * 0.0039 * 9.8;
 80014b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f8ee 	bl	800069c <__aeabi_i2d>
 80014c0:	a377      	add	r3, pc, #476	; (adr r3, 80016a0 <main+0x5d0>)
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	f7ff f953 	bl	8000770 <__aeabi_dmul>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	a375      	add	r3, pc, #468	; (adr r3, 80016a8 <main+0x5d8>)
 80014d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d8:	f7ff f94a 	bl	8000770 <__aeabi_dmul>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4610      	mov	r0, r2
 80014e2:	4619      	mov	r1, r3
 80014e4:	f7ff fc3c 	bl	8000d60 <__aeabi_d2f>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4a79      	ldr	r2, [pc, #484]	; (80016d0 <main+0x600>)
 80014ec:	6013      	str	r3, [r2, #0]
					sprintf(bufferData, "AccelZ = %.2f \n", Z_axis);
 80014ee:	4b78      	ldr	r3, [pc, #480]	; (80016d0 <main+0x600>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f8e4 	bl	80006c0 <__aeabi_f2d>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4975      	ldr	r1, [pc, #468]	; (80016d4 <main+0x604>)
 80014fe:	486e      	ldr	r0, [pc, #440]	; (80016b8 <main+0x5e8>)
 8001500:	f002 fca6 	bl	8003e50 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 8001504:	496c      	ldr	r1, [pc, #432]	; (80016b8 <main+0x5e8>)
 8001506:	486d      	ldr	r0, [pc, #436]	; (80016bc <main+0x5ec>)
 8001508:	f001 fdaf 	bl	800306a <writeMsg>
					rxData = '\0';
 800150c:	4b68      	ldr	r3, [pc, #416]	; (80016b0 <main+0x5e0>)
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
				}
				flagMuestreo = 0;
 8001512:	4b71      	ldr	r3, [pc, #452]	; (80016d8 <main+0x608>)
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
			 * El condicional se define en función del segundo valor que
			 * puede tomar la bandera que se define en el Basic Callback.
			 * El sistema entra aquí al presionar la letra "c".
			 * Aquí se tiene un primer muestreo infinito a 1 kHz.
			 */
			if(flagMuestreo == 2){
 8001518:	4b6f      	ldr	r3, [pc, #444]	; (80016d8 <main+0x608>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b02      	cmp	r3, #2
 800151e:	f040 80b6 	bne.w	800168e <main+0x5be>
				// Para el eje X
				uint8_t AccelX_low =  i2c_readSingleRegister(&Acelerometer, ACCEL_X1_L);
 8001522:	2132      	movs	r1, #50	; 0x32
 8001524:	4866      	ldr	r0, [pc, #408]	; (80016c0 <main+0x5f0>)
 8001526:	f001 f87d 	bl	8002624 <i2c_readSingleRegister>
 800152a:	4603      	mov	r3, r0
 800152c:	75fb      	strb	r3, [r7, #23]
				uint8_t AccelX_high = i2c_readSingleRegister(&Acelerometer, ACCEL_X1_H);
 800152e:	2133      	movs	r1, #51	; 0x33
 8001530:	4863      	ldr	r0, [pc, #396]	; (80016c0 <main+0x5f0>)
 8001532:	f001 f877 	bl	8002624 <i2c_readSingleRegister>
 8001536:	4603      	mov	r3, r0
 8001538:	75bb      	strb	r3, [r7, #22]
				int16_t AccelX = AccelX_high << 8 | AccelX_low;
 800153a:	7dbb      	ldrb	r3, [r7, #22]
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	b21a      	sxth	r2, r3
 8001540:	7dfb      	ldrb	r3, [r7, #23]
 8001542:	b21b      	sxth	r3, r3
 8001544:	4313      	orrs	r3, r2
 8001546:	82bb      	strh	r3, [r7, #20]
				X_axis = AccelX * 0.0039 * 9.8;
 8001548:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f8a5 	bl	800069c <__aeabi_i2d>
 8001552:	a353      	add	r3, pc, #332	; (adr r3, 80016a0 <main+0x5d0>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f7ff f90a 	bl	8000770 <__aeabi_dmul>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	a350      	add	r3, pc, #320	; (adr r3, 80016a8 <main+0x5d8>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	f7ff f901 	bl	8000770 <__aeabi_dmul>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff fbf3 	bl	8000d60 <__aeabi_d2f>
 800157a:	4603      	mov	r3, r0
 800157c:	4a57      	ldr	r2, [pc, #348]	; (80016dc <main+0x60c>)
 800157e:	6013      	str	r3, [r2, #0]
				X_1[counter] = X_axis; // Arreglo definido para X.
 8001580:	4b57      	ldr	r3, [pc, #348]	; (80016e0 <main+0x610>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	4b55      	ldr	r3, [pc, #340]	; (80016dc <main+0x60c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a56      	ldr	r2, [pc, #344]	; (80016e4 <main+0x614>)
 800158c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				// Para el eje Y
				uint8_t AccelY_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Y1_L);
 8001590:	2134      	movs	r1, #52	; 0x34
 8001592:	484b      	ldr	r0, [pc, #300]	; (80016c0 <main+0x5f0>)
 8001594:	f001 f846 	bl	8002624 <i2c_readSingleRegister>
 8001598:	4603      	mov	r3, r0
 800159a:	74fb      	strb	r3, [r7, #19]
				uint8_t AccelY_high = i2c_readSingleRegister(&Acelerometer,ACCEL_Y1_H);
 800159c:	2135      	movs	r1, #53	; 0x35
 800159e:	4848      	ldr	r0, [pc, #288]	; (80016c0 <main+0x5f0>)
 80015a0:	f001 f840 	bl	8002624 <i2c_readSingleRegister>
 80015a4:	4603      	mov	r3, r0
 80015a6:	74bb      	strb	r3, [r7, #18]
				int16_t AccelY = AccelY_high << 8 | AccelY_low;
 80015a8:	7cbb      	ldrb	r3, [r7, #18]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	7cfb      	ldrb	r3, [r7, #19]
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	4313      	orrs	r3, r2
 80015b4:	823b      	strh	r3, [r7, #16]
				Y_axis = AccelY * 0.0039 * 9.8;
 80015b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff f86e 	bl	800069c <__aeabi_i2d>
 80015c0:	a337      	add	r3, pc, #220	; (adr r3, 80016a0 <main+0x5d0>)
 80015c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c6:	f7ff f8d3 	bl	8000770 <__aeabi_dmul>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	a335      	add	r3, pc, #212	; (adr r3, 80016a8 <main+0x5d8>)
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	f7ff f8ca 	bl	8000770 <__aeabi_dmul>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	f7ff fbbc 	bl	8000d60 <__aeabi_d2f>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4a36      	ldr	r2, [pc, #216]	; (80016c4 <main+0x5f4>)
 80015ec:	6013      	str	r3, [r2, #0]
				Y_1[counter] = Y_axis; // Arreglo definido para Y.
 80015ee:	4b3c      	ldr	r3, [pc, #240]	; (80016e0 <main+0x610>)
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	4619      	mov	r1, r3
 80015f4:	4b33      	ldr	r3, [pc, #204]	; (80016c4 <main+0x5f4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a3b      	ldr	r2, [pc, #236]	; (80016e8 <main+0x618>)
 80015fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				// Para el eje Z
				uint8_t AccelZ_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_L);
 80015fe:	2136      	movs	r1, #54	; 0x36
 8001600:	482f      	ldr	r0, [pc, #188]	; (80016c0 <main+0x5f0>)
 8001602:	f001 f80f 	bl	8002624 <i2c_readSingleRegister>
 8001606:	4603      	mov	r3, r0
 8001608:	73fb      	strb	r3, [r7, #15]
				uint8_t AccelZ_high = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_H);
 800160a:	2137      	movs	r1, #55	; 0x37
 800160c:	482c      	ldr	r0, [pc, #176]	; (80016c0 <main+0x5f0>)
 800160e:	f001 f809 	bl	8002624 <i2c_readSingleRegister>
 8001612:	4603      	mov	r3, r0
 8001614:	73bb      	strb	r3, [r7, #14]
				int16_t AccelZ = AccelZ_high << 8 | AccelZ_low;
 8001616:	7bbb      	ldrb	r3, [r7, #14]
 8001618:	021b      	lsls	r3, r3, #8
 800161a:	b21a      	sxth	r2, r3
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	b21b      	sxth	r3, r3
 8001620:	4313      	orrs	r3, r2
 8001622:	81bb      	strh	r3, [r7, #12]
				Z_axis = AccelZ * 0.0039 * 9.8;
 8001624:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff f837 	bl	800069c <__aeabi_i2d>
 800162e:	a31c      	add	r3, pc, #112	; (adr r3, 80016a0 <main+0x5d0>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7ff f89c 	bl	8000770 <__aeabi_dmul>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	a319      	add	r3, pc, #100	; (adr r3, 80016a8 <main+0x5d8>)
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7ff f893 	bl	8000770 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	f7ff fb85 	bl	8000d60 <__aeabi_d2f>
 8001656:	4603      	mov	r3, r0
 8001658:	4a1d      	ldr	r2, [pc, #116]	; (80016d0 <main+0x600>)
 800165a:	6013      	str	r3, [r2, #0]
				Z_1[counter] = Z_axis; // Arreglo definido para Y.
 800165c:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <main+0x610>)
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <main+0x600>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a21      	ldr	r2, [pc, #132]	; (80016ec <main+0x61c>)
 8001668:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				// El contador que barre los arreglos.
				counter++;
 800166c:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <main+0x610>)
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	b29a      	uxth	r2, r3
 8001674:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <main+0x610>)
 8001676:	801a      	strh	r2, [r3, #0]
				// Las 2000 tomas para los 2000 segundos.
				if(counter == 2000){
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <main+0x610>)
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001680:	d105      	bne.n	800168e <main+0x5be>
					flag = 1; // Bandera para entrar al ciclo if y enviar valores de aceleración
 8001682:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <main+0x620>)
 8001684:	2201      	movs	r2, #1
 8001686:	701a      	strb	r2, [r3, #0]
					counter = 0;
 8001688:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <main+0x610>)
 800168a:	2200      	movs	r2, #0
 800168c:	801a      	strh	r2, [r3, #0]

			/* IMPRESIÓN DE LOS ARREGLOS :
			 * Aquí se define la forma en que se busca dar un formato definido para
			 * la presentación de los arreglos bajo el muestreo de 1 kHz.
			 */
				if(flag == 1){
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <main+0x620>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d161      	bne.n	800175a <main+0x68a>
					for( int i = 0 ; i < 2000; i++){
 8001696:	2300      	movs	r3, #0
 8001698:	637b      	str	r3, [r7, #52]	; 0x34
 800169a:	e05a      	b.n	8001752 <main+0x682>
 800169c:	f3af 8000 	nop.w
 80016a0:	8e8a71de 	.word	0x8e8a71de
 80016a4:	3f6ff2e4 	.word	0x3f6ff2e4
 80016a8:	9999999a 	.word	0x9999999a
 80016ac:	40239999 	.word	0x40239999
 80016b0:	20000311 	.word	0x20000311
 80016b4:	08007ae0 	.word	0x08007ae0
 80016b8:	20000000 	.word	0x20000000
 80016bc:	2000025c 	.word	0x2000025c
 80016c0:	20000308 	.word	0x20000308
 80016c4:	2000615c 	.word	0x2000615c
 80016c8:	08007af4 	.word	0x08007af4
 80016cc:	08007b04 	.word	0x08007b04
 80016d0:	20006160 	.word	0x20006160
 80016d4:	08007b18 	.word	0x08007b18
 80016d8:	20006100 	.word	0x20006100
 80016dc:	20006158 	.word	0x20006158
 80016e0:	200060d4 	.word	0x200060d4
 80016e4:	20000314 	.word	0x20000314
 80016e8:	20002254 	.word	0x20002254
 80016ec:	20004194 	.word	0x20004194
 80016f0:	200002ed 	.word	0x200002ed
						sprintf(bufferData, " AccelX = %.2f ; AccelY = %.2f ; AccelZ = %.2f \n",X_1[i],Y_1[i],Z_1[i]);
 80016f4:	4a9c      	ldr	r2, [pc, #624]	; (8001968 <main+0x898>)
 80016f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe ffdf 	bl	80006c0 <__aeabi_f2d>
 8001702:	4680      	mov	r8, r0
 8001704:	4689      	mov	r9, r1
 8001706:	4a99      	ldr	r2, [pc, #612]	; (800196c <main+0x89c>)
 8001708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800170a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ffd6 	bl	80006c0 <__aeabi_f2d>
 8001714:	4604      	mov	r4, r0
 8001716:	460d      	mov	r5, r1
 8001718:	4a95      	ldr	r2, [pc, #596]	; (8001970 <main+0x8a0>)
 800171a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe ffcd 	bl	80006c0 <__aeabi_f2d>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800172e:	e9cd 4500 	strd	r4, r5, [sp]
 8001732:	4642      	mov	r2, r8
 8001734:	464b      	mov	r3, r9
 8001736:	498f      	ldr	r1, [pc, #572]	; (8001974 <main+0x8a4>)
 8001738:	488f      	ldr	r0, [pc, #572]	; (8001978 <main+0x8a8>)
 800173a:	f002 fb89 	bl	8003e50 <siprintf>
						writeMsg(&USART6Comm, bufferData);
 800173e:	498e      	ldr	r1, [pc, #568]	; (8001978 <main+0x8a8>)
 8001740:	488e      	ldr	r0, [pc, #568]	; (800197c <main+0x8ac>)
 8001742:	f001 fc92 	bl	800306a <writeMsg>
						flagMuestreo = 0;
 8001746:	4b8e      	ldr	r3, [pc, #568]	; (8001980 <main+0x8b0>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
					for( int i = 0 ; i < 2000; i++){
 800174c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800174e:	3301      	adds	r3, #1
 8001750:	637b      	str	r3, [r7, #52]	; 0x34
 8001752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001754:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001758:	dbcc      	blt.n	80016f4 <main+0x624>
				 * del formato de retorno de los datos un segundo contador que
				 * mostrará que sí se están retornando los 2000 datos (definiendo
				 * un dato como el grupo de valores de las 3 coordenadas) y no
				 * menos.
				 */
				if(flagMuestreo == 3){
 800175a:	4b89      	ldr	r3, [pc, #548]	; (8001980 <main+0x8b0>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b03      	cmp	r3, #3
 8001760:	f040 80b6 	bne.w	80018d0 <main+0x800>

					uint8_t AccelX_low =  i2c_readSingleRegister(&Acelerometer, ACCEL_X1_L);
 8001764:	2132      	movs	r1, #50	; 0x32
 8001766:	4887      	ldr	r0, [pc, #540]	; (8001984 <main+0x8b4>)
 8001768:	f000 ff5c 	bl	8002624 <i2c_readSingleRegister>
 800176c:	4603      	mov	r3, r0
 800176e:	72fb      	strb	r3, [r7, #11]
					uint8_t AccelX_high = i2c_readSingleRegister(&Acelerometer, ACCEL_X1_H);
 8001770:	2133      	movs	r1, #51	; 0x33
 8001772:	4884      	ldr	r0, [pc, #528]	; (8001984 <main+0x8b4>)
 8001774:	f000 ff56 	bl	8002624 <i2c_readSingleRegister>
 8001778:	4603      	mov	r3, r0
 800177a:	72bb      	strb	r3, [r7, #10]
					int16_t AccelX = AccelX_high << 8 | AccelX_low;
 800177c:	7abb      	ldrb	r3, [r7, #10]
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	b21a      	sxth	r2, r3
 8001782:	7afb      	ldrb	r3, [r7, #11]
 8001784:	b21b      	sxth	r3, r3
 8001786:	4313      	orrs	r3, r2
 8001788:	813b      	strh	r3, [r7, #8]
					X_axis = AccelX * 0.0039 * 9.8;
 800178a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe ff84 	bl	800069c <__aeabi_i2d>
 8001794:	a370      	add	r3, pc, #448	; (adr r3, 8001958 <main+0x888>)
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	f7fe ffe9 	bl	8000770 <__aeabi_dmul>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	a36e      	add	r3, pc, #440	; (adr r3, 8001960 <main+0x890>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f7fe ffe0 	bl	8000770 <__aeabi_dmul>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f7ff fad2 	bl	8000d60 <__aeabi_d2f>
 80017bc:	4603      	mov	r3, r0
 80017be:	4a72      	ldr	r2, [pc, #456]	; (8001988 <main+0x8b8>)
 80017c0:	6013      	str	r3, [r2, #0]
					X_1[counter]=X_axis;
 80017c2:	4b72      	ldr	r3, [pc, #456]	; (800198c <main+0x8bc>)
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	4619      	mov	r1, r3
 80017c8:	4b6f      	ldr	r3, [pc, #444]	; (8001988 <main+0x8b8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a66      	ldr	r2, [pc, #408]	; (8001968 <main+0x898>)
 80017ce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

					uint8_t AccelY_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Y1_L);
 80017d2:	2134      	movs	r1, #52	; 0x34
 80017d4:	486b      	ldr	r0, [pc, #428]	; (8001984 <main+0x8b4>)
 80017d6:	f000 ff25 	bl	8002624 <i2c_readSingleRegister>
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
					uint8_t AccelY_high = i2c_readSingleRegister(&Acelerometer,ACCEL_Y1_H);
 80017de:	2135      	movs	r1, #53	; 0x35
 80017e0:	4868      	ldr	r0, [pc, #416]	; (8001984 <main+0x8b4>)
 80017e2:	f000 ff1f 	bl	8002624 <i2c_readSingleRegister>
 80017e6:	4603      	mov	r3, r0
 80017e8:	71bb      	strb	r3, [r7, #6]
					int16_t AccelY = AccelY_high << 8 | AccelY_low;
 80017ea:	79bb      	ldrb	r3, [r7, #6]
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	b21a      	sxth	r2, r3
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	b21b      	sxth	r3, r3
 80017f4:	4313      	orrs	r3, r2
 80017f6:	80bb      	strh	r3, [r7, #4]
					Y_axis = AccelY * 0.0039 * 9.8;
 80017f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe ff4d 	bl	800069c <__aeabi_i2d>
 8001802:	a355      	add	r3, pc, #340	; (adr r3, 8001958 <main+0x888>)
 8001804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001808:	f7fe ffb2 	bl	8000770 <__aeabi_dmul>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	a352      	add	r3, pc, #328	; (adr r3, 8001960 <main+0x890>)
 8001816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181a:	f7fe ffa9 	bl	8000770 <__aeabi_dmul>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	f7ff fa9b 	bl	8000d60 <__aeabi_d2f>
 800182a:	4603      	mov	r3, r0
 800182c:	4a58      	ldr	r2, [pc, #352]	; (8001990 <main+0x8c0>)
 800182e:	6013      	str	r3, [r2, #0]
					Y_1[counter]=Y_axis;
 8001830:	4b56      	ldr	r3, [pc, #344]	; (800198c <main+0x8bc>)
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	4619      	mov	r1, r3
 8001836:	4b56      	ldr	r3, [pc, #344]	; (8001990 <main+0x8c0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a4c      	ldr	r2, [pc, #304]	; (800196c <main+0x89c>)
 800183c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

					uint8_t AccelZ_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_L);
 8001840:	2136      	movs	r1, #54	; 0x36
 8001842:	4850      	ldr	r0, [pc, #320]	; (8001984 <main+0x8b4>)
 8001844:	f000 feee 	bl	8002624 <i2c_readSingleRegister>
 8001848:	4603      	mov	r3, r0
 800184a:	70fb      	strb	r3, [r7, #3]
					uint8_t AccelZ_high = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_H);
 800184c:	2137      	movs	r1, #55	; 0x37
 800184e:	484d      	ldr	r0, [pc, #308]	; (8001984 <main+0x8b4>)
 8001850:	f000 fee8 	bl	8002624 <i2c_readSingleRegister>
 8001854:	4603      	mov	r3, r0
 8001856:	70bb      	strb	r3, [r7, #2]
					int16_t AccelZ = AccelZ_high << 8 | AccelZ_low;
 8001858:	78bb      	ldrb	r3, [r7, #2]
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	b21a      	sxth	r2, r3
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	b21b      	sxth	r3, r3
 8001862:	4313      	orrs	r3, r2
 8001864:	803b      	strh	r3, [r7, #0]
					Z_axis = AccelZ * 0.0039 * 9.8;
 8001866:	f9b7 3000 	ldrsh.w	r3, [r7]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe ff16 	bl	800069c <__aeabi_i2d>
 8001870:	a339      	add	r3, pc, #228	; (adr r3, 8001958 <main+0x888>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	f7fe ff7b 	bl	8000770 <__aeabi_dmul>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	a337      	add	r3, pc, #220	; (adr r3, 8001960 <main+0x890>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7fe ff72 	bl	8000770 <__aeabi_dmul>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	f7ff fa64 	bl	8000d60 <__aeabi_d2f>
 8001898:	4603      	mov	r3, r0
 800189a:	4a3e      	ldr	r2, [pc, #248]	; (8001994 <main+0x8c4>)
 800189c:	6013      	str	r3, [r2, #0]
					Z_1[counter]=Z_axis;
 800189e:	4b3b      	ldr	r3, [pc, #236]	; (800198c <main+0x8bc>)
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	4619      	mov	r1, r3
 80018a4:	4b3b      	ldr	r3, [pc, #236]	; (8001994 <main+0x8c4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a31      	ldr	r2, [pc, #196]	; (8001970 <main+0x8a0>)
 80018aa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
					counter++;
 80018ae:	4b37      	ldr	r3, [pc, #220]	; (800198c <main+0x8bc>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	3301      	adds	r3, #1
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	4b35      	ldr	r3, [pc, #212]	; (800198c <main+0x8bc>)
 80018b8:	801a      	strh	r2, [r3, #0]
					if(counter == 2000){
 80018ba:	4b34      	ldr	r3, [pc, #208]	; (800198c <main+0x8bc>)
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80018c2:	d105      	bne.n	80018d0 <main+0x800>
						flag2 = 1;
 80018c4:	4b34      	ldr	r3, [pc, #208]	; (8001998 <main+0x8c8>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	701a      	strb	r2, [r3, #0]
						rxData = '\0';
 80018ca:	4b34      	ldr	r3, [pc, #208]	; (800199c <main+0x8cc>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
				/* Dentro de este if y gracias a la configuración de la velocidad
				 * a la cual se pone a trabajar el timer, se imprimen los datos
				 * recopilados dentro del arreglo para su fácil lectura y análisis.
				 */

				if(flag2 == 1){
 80018d0:	4b31      	ldr	r3, [pc, #196]	; (8001998 <main+0x8c8>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	f47f ac01 	bne.w	80010dc <main+0xc>
					for( int i = 0 ; i < 2000; i++){
 80018da:	2300      	movs	r3, #0
 80018dc:	633b      	str	r3, [r7, #48]	; 0x30
 80018de:	e032      	b.n	8001946 <main+0x876>
						sprintf(bufferData, "[m/s²] #%d AccelX = %.2f ; AccelY = %.2f ; AccelZ = %.2f \n",i,X_1[i],Y_1[i],Z_1[i]);
 80018e0:	4a21      	ldr	r2, [pc, #132]	; (8001968 <main+0x898>)
 80018e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fee9 	bl	80006c0 <__aeabi_f2d>
 80018ee:	4604      	mov	r4, r0
 80018f0:	460d      	mov	r5, r1
 80018f2:	4a1e      	ldr	r2, [pc, #120]	; (800196c <main+0x89c>)
 80018f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fee0 	bl	80006c0 <__aeabi_f2d>
 8001900:	4680      	mov	r8, r0
 8001902:	4689      	mov	r9, r1
 8001904:	4a1a      	ldr	r2, [pc, #104]	; (8001970 <main+0x8a0>)
 8001906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fed7 	bl	80006c0 <__aeabi_f2d>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800191a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800191e:	e9cd 4500 	strd	r4, r5, [sp]
 8001922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001924:	491e      	ldr	r1, [pc, #120]	; (80019a0 <main+0x8d0>)
 8001926:	4814      	ldr	r0, [pc, #80]	; (8001978 <main+0x8a8>)
 8001928:	f002 fa92 	bl	8003e50 <siprintf>
						writeMsg(&USART6Comm, bufferData);
 800192c:	4912      	ldr	r1, [pc, #72]	; (8001978 <main+0x8a8>)
 800192e:	4813      	ldr	r0, [pc, #76]	; (800197c <main+0x8ac>)
 8001930:	f001 fb9b 	bl	800306a <writeMsg>
						flagMuestreo =0;
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <main+0x8b0>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
						flag2 = 0;
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <main+0x8c8>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
					for( int i = 0 ; i < 2000; i++){
 8001940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001942:	3301      	adds	r3, #1
 8001944:	633b      	str	r3, [r7, #48]	; 0x30
 8001946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001948:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800194c:	dbc8      	blt.n	80018e0 <main+0x810>
		if(flagMuestreo == 1){
 800194e:	f7ff bbc5 	b.w	80010dc <main+0xc>
 8001952:	bf00      	nop
 8001954:	f3af 8000 	nop.w
 8001958:	8e8a71de 	.word	0x8e8a71de
 800195c:	3f6ff2e4 	.word	0x3f6ff2e4
 8001960:	9999999a 	.word	0x9999999a
 8001964:	40239999 	.word	0x40239999
 8001968:	20000314 	.word	0x20000314
 800196c:	20002254 	.word	0x20002254
 8001970:	20004194 	.word	0x20004194
 8001974:	08007b28 	.word	0x08007b28
 8001978:	20000000 	.word	0x20000000
 800197c:	2000025c 	.word	0x2000025c
 8001980:	20006100 	.word	0x20006100
 8001984:	20000308 	.word	0x20000308
 8001988:	20006158 	.word	0x20006158
 800198c:	200060d4 	.word	0x200060d4
 8001990:	2000615c 	.word	0x2000615c
 8001994:	20006160 	.word	0x20006160
 8001998:	200002ee 	.word	0x200002ee
 800199c:	20000311 	.word	0x20000311
 80019a0:	08007b5c 	.word	0x08007b5c

080019a4 <signalsPWM>:
 * en que se vió desde la experiencia que oscilan los valores. La línea recta
 * mantiene los valores de tiempo del dutty cicle dentro de los rangos en que
 * solicita mantenerlos según el texto de la tarea.
 */

void signalsPWM(void){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	// Para cada eje debemos conservar la misma recta porque las condiciones so
	newDutty_1 = 1000 * X_axis + 10000;
 80019a8:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <signalsPWM+0xa0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4926      	ldr	r1, [pc, #152]	; (8001a48 <signalsPWM+0xa4>)
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fc6e 	bl	8000290 <__aeabi_fmul>
 80019b4:	4603      	mov	r3, r0
 80019b6:	4925      	ldr	r1, [pc, #148]	; (8001a4c <signalsPWM+0xa8>)
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fa27 	bl	8000e0c <__addsf3>
 80019be:	4603      	mov	r3, r0
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fb2b 	bl	800101c <__aeabi_f2uiz>
 80019c6:	4603      	mov	r3, r0
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	4b21      	ldr	r3, [pc, #132]	; (8001a50 <signalsPWM+0xac>)
 80019cc:	801a      	strh	r2, [r3, #0]
	newDutty_2 = 1000 * Y_axis + 10000;
 80019ce:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <signalsPWM+0xb0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	491d      	ldr	r1, [pc, #116]	; (8001a48 <signalsPWM+0xa4>)
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fc5b 	bl	8000290 <__aeabi_fmul>
 80019da:	4603      	mov	r3, r0
 80019dc:	491b      	ldr	r1, [pc, #108]	; (8001a4c <signalsPWM+0xa8>)
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fa14 	bl	8000e0c <__addsf3>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fb18 	bl	800101c <__aeabi_f2uiz>
 80019ec:	4603      	mov	r3, r0
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <signalsPWM+0xb4>)
 80019f2:	801a      	strh	r2, [r3, #0]
	newDutty_3 = 1000 * Z_axis + 10000;
 80019f4:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <signalsPWM+0xb8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4913      	ldr	r1, [pc, #76]	; (8001a48 <signalsPWM+0xa4>)
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fc48 	bl	8000290 <__aeabi_fmul>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4912      	ldr	r1, [pc, #72]	; (8001a4c <signalsPWM+0xa8>)
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fa01 	bl	8000e0c <__addsf3>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fb05 	bl	800101c <__aeabi_f2uiz>
 8001a12:	4603      	mov	r3, r0
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <signalsPWM+0xbc>)
 8001a18:	801a      	strh	r2, [r3, #0]
	// Se actualiza la configuración del PWM bajo la nueva condición.
	updateDuttyCycle(&handlerTIM3PWM_1, newDutty_1);
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <signalsPWM+0xac>)
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4810      	ldr	r0, [pc, #64]	; (8001a64 <signalsPWM+0xc0>)
 8001a22:	f001 f8d9 	bl	8002bd8 <updateDuttyCycle>
	updateDuttyCycle(&handlerTIM3PWM_2, newDutty_2);
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <signalsPWM+0xb4>)
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	480e      	ldr	r0, [pc, #56]	; (8001a68 <signalsPWM+0xc4>)
 8001a2e:	f001 f8d3 	bl	8002bd8 <updateDuttyCycle>
	updateDuttyCycle(&handlerTIM3PWM_3, newDutty_3);
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <signalsPWM+0xbc>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	480c      	ldr	r0, [pc, #48]	; (8001a6c <signalsPWM+0xc8>)
 8001a3a:	f001 f8cd 	bl	8002bd8 <updateDuttyCycle>
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20006158 	.word	0x20006158
 8001a48:	447a0000 	.word	0x447a0000
 8001a4c:	461c4000 	.word	0x461c4000
 8001a50:	20006164 	.word	0x20006164
 8001a54:	2000615c 	.word	0x2000615c
 8001a58:	20006166 	.word	0x20006166
 8001a5c:	20006160 	.word	0x20006160
 8001a60:	20006168 	.word	0x20006168
 8001a64:	20006128 	.word	0x20006128
 8001a68:	20006138 	.word	0x20006138
 8001a6c:	20006148 	.word	0x20006148

08001a70 <init_Hardware>:

//Función de configuración de los elementos del sistema.
void init_Hardware(void){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0

	// Se configura el PLL con los parámetros dados.
	handlerPLL.PLL_Config.PLL_voltage		= VOLTAGE_84MHZ;
 8001a74:	4baa      	ldr	r3, [pc, #680]	; (8001d20 <init_Hardware+0x2b0>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	701a      	strb	r2, [r3, #0]
	handlerPLL.PLL_Config.PLL_frecuency		= FRECUENCY_80MHZ;
 8001a7a:	4ba9      	ldr	r3, [pc, #676]	; (8001d20 <init_Hardware+0x2b0>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	705a      	strb	r2, [r3, #1]
	PLL_Config(&handlerPLL);
 8001a80:	48a7      	ldr	r0, [pc, #668]	; (8001d20 <init_Hardware+0x2b0>)
 8001a82:	f000 fe23 	bl	80026cc <PLL_Config>
	getConfigPLL();
 8001a86:	f000 ff2b 	bl	80028e0 <getConfigPLL>

	/* LED DE ESTADO A 250 ms aproximadamente. */
	handlerBlinkyPin.pGPIOx 									= GPIOA;
 8001a8a:	4ba6      	ldr	r3, [pc, #664]	; (8001d24 <init_Hardware+0x2b4>)
 8001a8c:	4aa6      	ldr	r2, [pc, #664]	; (8001d28 <init_Hardware+0x2b8>)
 8001a8e:	601a      	str	r2, [r3, #0]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinNumber 				= PIN_5;
 8001a90:	4ba4      	ldr	r3, [pc, #656]	; (8001d24 <init_Hardware+0x2b4>)
 8001a92:	2205      	movs	r2, #5
 8001a94:	711a      	strb	r2, [r3, #4]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 8001a96:	4ba3      	ldr	r3, [pc, #652]	; (8001d24 <init_Hardware+0x2b4>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	715a      	strb	r2, [r3, #5]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8001a9c:	4ba1      	ldr	r3, [pc, #644]	; (8001d24 <init_Hardware+0x2b4>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	721a      	strb	r2, [r3, #8]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinSpeed  				= GPIO_OSPEED_FAST;
 8001aa2:	4ba0      	ldr	r3, [pc, #640]	; (8001d24 <init_Hardware+0x2b4>)
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	719a      	strb	r2, [r3, #6]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinPuPdControl			= GPIO_PUPDR_NOTHING;
 8001aa8:	4b9e      	ldr	r3, [pc, #632]	; (8001d24 <init_Hardware+0x2b4>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	71da      	strb	r2, [r3, #7]

	// Se carga la configuración del Blinky,
	GPIO_Config(&handlerBlinkyPin);
 8001aae:	489d      	ldr	r0, [pc, #628]	; (8001d24 <init_Hardware+0x2b4>)
 8001ab0:	f000 fae2 	bl	8002078 <GPIO_Config>
	GPIO_WritePin(&handlerBlinkyPin, SET);
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	489b      	ldr	r0, [pc, #620]	; (8001d24 <init_Hardware+0x2b4>)
 8001ab8:	f000 fc06 	bl	80022c8 <GPIO_WritePin>

	// Se configura el timer del blinky.
	handlerBlinkyTimer.ptrTIMx								= TIM2;
 8001abc:	4b9b      	ldr	r3, [pc, #620]	; (8001d2c <init_Hardware+0x2bc>)
 8001abe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ac2:	601a      	str	r2, [r3, #0]
	handlerBlinkyTimer.TIMx_Config.TIMx_mode				= BTIMER_MODE_UP;
 8001ac4:	4b99      	ldr	r3, [pc, #612]	; (8001d2c <init_Hardware+0x2bc>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	711a      	strb	r2, [r3, #4]
	handlerBlinkyTimer.TIMx_Config.TIMx_speed				= BTIMER_SPEED_80MHz;
 8001aca:	4b98      	ldr	r3, [pc, #608]	; (8001d2c <init_Hardware+0x2bc>)
 8001acc:	f641 72a4 	movw	r2, #8100	; 0x1fa4
 8001ad0:	609a      	str	r2, [r3, #8]
	handlerBlinkyTimer.TIMx_Config.TIMx_period				= 2500;
 8001ad2:	4b96      	ldr	r3, [pc, #600]	; (8001d2c <init_Hardware+0x2bc>)
 8001ad4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001ad8:	60da      	str	r2, [r3, #12]
	handlerBlinkyTimer.TIMx_Config.TIMx_interruptEnable 	= BTIMER_INTERRUPT_ENABLE;
 8001ada:	4b94      	ldr	r3, [pc, #592]	; (8001d2c <init_Hardware+0x2bc>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	741a      	strb	r2, [r3, #16]

	// Se carga lo hecho sobre el timer del blinky.
	BasicTimer_Config(&handlerBlinkyTimer);
 8001ae0:	4892      	ldr	r0, [pc, #584]	; (8001d2c <init_Hardware+0x2bc>)
 8001ae2:	f000 f9d5 	bl	8001e90 <BasicTimer_Config>

	/* Configuración del USART */
	// Transmisión
	handlerUSARTPINTX.pGPIOx  							= GPIOA;
 8001ae6:	4b92      	ldr	r3, [pc, #584]	; (8001d30 <init_Hardware+0x2c0>)
 8001ae8:	4a8f      	ldr	r2, [pc, #572]	; (8001d28 <init_Hardware+0x2b8>)
 8001aea:	601a      	str	r2, [r3, #0]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinNumber 	= PIN_11;
 8001aec:	4b90      	ldr	r3, [pc, #576]	; (8001d30 <init_Hardware+0x2c0>)
 8001aee:	220b      	movs	r2, #11
 8001af0:	711a      	strb	r2, [r3, #4]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFN;
 8001af2:	4b8f      	ldr	r3, [pc, #572]	; (8001d30 <init_Hardware+0x2c0>)
 8001af4:	2202      	movs	r2, #2
 8001af6:	715a      	strb	r2, [r3, #5]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinAltFunMode = AF8;
 8001af8:	4b8d      	ldr	r3, [pc, #564]	; (8001d30 <init_Hardware+0x2c0>)
 8001afa:	2208      	movs	r2, #8
 8001afc:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerUSARTPINTX);
 8001afe:	488c      	ldr	r0, [pc, #560]	; (8001d30 <init_Hardware+0x2c0>)
 8001b00:	f000 faba 	bl	8002078 <GPIO_Config>

	// Recepción
	handlerUSARTPINRX.pGPIOx 						 	= GPIOA;
 8001b04:	4b8b      	ldr	r3, [pc, #556]	; (8001d34 <init_Hardware+0x2c4>)
 8001b06:	4a88      	ldr	r2, [pc, #544]	; (8001d28 <init_Hardware+0x2b8>)
 8001b08:	601a      	str	r2, [r3, #0]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinNumber		= PIN_12;
 8001b0a:	4b8a      	ldr	r3, [pc, #552]	; (8001d34 <init_Hardware+0x2c4>)
 8001b0c:	220c      	movs	r2, #12
 8001b0e:	711a      	strb	r2, [r3, #4]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFN;
 8001b10:	4b88      	ldr	r3, [pc, #544]	; (8001d34 <init_Hardware+0x2c4>)
 8001b12:	2202      	movs	r2, #2
 8001b14:	715a      	strb	r2, [r3, #5]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinAltFunMode = AF8;
 8001b16:	4b87      	ldr	r3, [pc, #540]	; (8001d34 <init_Hardware+0x2c4>)
 8001b18:	2208      	movs	r2, #8
 8001b1a:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerUSARTPINRX);
 8001b1c:	4885      	ldr	r0, [pc, #532]	; (8001d34 <init_Hardware+0x2c4>)
 8001b1e:	f000 faab 	bl	8002078 <GPIO_Config>

	// Para el USART 6
	USART6Comm.ptrUSARTx 					= USART6;
 8001b22:	4b85      	ldr	r3, [pc, #532]	; (8001d38 <init_Hardware+0x2c8>)
 8001b24:	4a85      	ldr	r2, [pc, #532]	; (8001d3c <init_Hardware+0x2cc>)
 8001b26:	601a      	str	r2, [r3, #0]
	USART6Comm.USART_Config.USART_baudrate 	= USART_BAUDRATE_115200;
 8001b28:	4b83      	ldr	r3, [pc, #524]	; (8001d38 <init_Hardware+0x2c8>)
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	715a      	strb	r2, [r3, #5]
	USART6Comm.USART_Config.USART_datasize 	= USART_DATASIZE_8BIT;
 8001b2e:	4b82      	ldr	r3, [pc, #520]	; (8001d38 <init_Hardware+0x2c8>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	719a      	strb	r2, [r3, #6]
	USART6Comm.USART_Config.USART_parity 	= USART_PARITY_NONE;
 8001b34:	4b80      	ldr	r3, [pc, #512]	; (8001d38 <init_Hardware+0x2c8>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	71da      	strb	r2, [r3, #7]
	USART6Comm.USART_Config.USART_mode 		= USART_MODE_RXTX;
 8001b3a:	4b7f      	ldr	r3, [pc, #508]	; (8001d38 <init_Hardware+0x2c8>)
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	711a      	strb	r2, [r3, #4]
	USART6Comm.USART_Config.USART_stopbits 	= USART_STOPBIT_1;
 8001b40:	4b7d      	ldr	r3, [pc, #500]	; (8001d38 <init_Hardware+0x2c8>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	721a      	strb	r2, [r3, #8]
	USART6Comm.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;
 8001b46:	4b7c      	ldr	r3, [pc, #496]	; (8001d38 <init_Hardware+0x2c8>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	725a      	strb	r2, [r3, #9]

	// Se carga lo hecho sobre el USART
	USART_Config(&USART6Comm);
 8001b4c:	487a      	ldr	r0, [pc, #488]	; (8001d38 <init_Hardware+0x2c8>)
 8001b4e:	f001 f86f 	bl	8002c30 <USART_Config>

	//Configuración I2C
	// Para el acelerómetro ADXL-345
	SCL.pGPIOx                                    = GPIOB;
 8001b52:	4b7b      	ldr	r3, [pc, #492]	; (8001d40 <init_Hardware+0x2d0>)
 8001b54:	4a7b      	ldr	r2, [pc, #492]	; (8001d44 <init_Hardware+0x2d4>)
 8001b56:	601a      	str	r2, [r3, #0]
	SCL.GPIO_PinConfig.GPIO_PinNumber             = PIN_8;
 8001b58:	4b79      	ldr	r3, [pc, #484]	; (8001d40 <init_Hardware+0x2d0>)
 8001b5a:	2208      	movs	r2, #8
 8001b5c:	711a      	strb	r2, [r3, #4]
	SCL.GPIO_PinConfig.GPIO_PinMode               = GPIO_MODE_ALTFN;
 8001b5e:	4b78      	ldr	r3, [pc, #480]	; (8001d40 <init_Hardware+0x2d0>)
 8001b60:	2202      	movs	r2, #2
 8001b62:	715a      	strb	r2, [r3, #5]
	SCL.GPIO_PinConfig.GPIO_PinOPType             = GPIO_OTYPE_OPENDRAIN;
 8001b64:	4b76      	ldr	r3, [pc, #472]	; (8001d40 <init_Hardware+0x2d0>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	721a      	strb	r2, [r3, #8]
	SCL.GPIO_PinConfig.GPIO_PinPuPdControl        = GPIO_PUPDR_NOTHING;
 8001b6a:	4b75      	ldr	r3, [pc, #468]	; (8001d40 <init_Hardware+0x2d0>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	71da      	strb	r2, [r3, #7]
	SCL.GPIO_PinConfig.GPIO_PinSpeed              = GPIO_OSPEED_FAST;
 8001b70:	4b73      	ldr	r3, [pc, #460]	; (8001d40 <init_Hardware+0x2d0>)
 8001b72:	2202      	movs	r2, #2
 8001b74:	719a      	strb	r2, [r3, #6]
	SCL.GPIO_PinConfig.GPIO_PinAltFunMode         = AF4;
 8001b76:	4b72      	ldr	r3, [pc, #456]	; (8001d40 <init_Hardware+0x2d0>)
 8001b78:	2204      	movs	r2, #4
 8001b7a:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&SCL);
 8001b7c:	4870      	ldr	r0, [pc, #448]	; (8001d40 <init_Hardware+0x2d0>)
 8001b7e:	f000 fa7b 	bl	8002078 <GPIO_Config>
	// SDA pin del ADXL-345
	SDA.pGPIOx                                    = GPIOB;
 8001b82:	4b71      	ldr	r3, [pc, #452]	; (8001d48 <init_Hardware+0x2d8>)
 8001b84:	4a6f      	ldr	r2, [pc, #444]	; (8001d44 <init_Hardware+0x2d4>)
 8001b86:	601a      	str	r2, [r3, #0]
	SDA.GPIO_PinConfig.GPIO_PinNumber             = PIN_9;
 8001b88:	4b6f      	ldr	r3, [pc, #444]	; (8001d48 <init_Hardware+0x2d8>)
 8001b8a:	2209      	movs	r2, #9
 8001b8c:	711a      	strb	r2, [r3, #4]
	SDA.GPIO_PinConfig.GPIO_PinMode               = GPIO_MODE_ALTFN;
 8001b8e:	4b6e      	ldr	r3, [pc, #440]	; (8001d48 <init_Hardware+0x2d8>)
 8001b90:	2202      	movs	r2, #2
 8001b92:	715a      	strb	r2, [r3, #5]
	SDA.GPIO_PinConfig.GPIO_PinOPType             = GPIO_OTYPE_OPENDRAIN;
 8001b94:	4b6c      	ldr	r3, [pc, #432]	; (8001d48 <init_Hardware+0x2d8>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	721a      	strb	r2, [r3, #8]
	SDA.GPIO_PinConfig.GPIO_PinPuPdControl        = GPIO_PUPDR_NOTHING;
 8001b9a:	4b6b      	ldr	r3, [pc, #428]	; (8001d48 <init_Hardware+0x2d8>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	71da      	strb	r2, [r3, #7]
	SDA.GPIO_PinConfig.GPIO_PinSpeed              = GPIO_OSPEED_FAST;
 8001ba0:	4b69      	ldr	r3, [pc, #420]	; (8001d48 <init_Hardware+0x2d8>)
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	719a      	strb	r2, [r3, #6]
	SDA.GPIO_PinConfig.GPIO_PinAltFunMode         = AF4;
 8001ba6:	4b68      	ldr	r3, [pc, #416]	; (8001d48 <init_Hardware+0x2d8>)
 8001ba8:	2204      	movs	r2, #4
 8001baa:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&SDA);
 8001bac:	4866      	ldr	r0, [pc, #408]	; (8001d48 <init_Hardware+0x2d8>)
 8001bae:	f000 fa63 	bl	8002078 <GPIO_Config>
	// Se carga en el I2C.
	Acelerometer.ptrI2Cx                            = I2C1;
 8001bb2:	4b66      	ldr	r3, [pc, #408]	; (8001d4c <init_Hardware+0x2dc>)
 8001bb4:	4a66      	ldr	r2, [pc, #408]	; (8001d50 <init_Hardware+0x2e0>)
 8001bb6:	601a      	str	r2, [r3, #0]
	Acelerometer.modeI2C                            = I2C_MODE_FM;
 8001bb8:	4b64      	ldr	r3, [pc, #400]	; (8001d4c <init_Hardware+0x2dc>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	715a      	strb	r2, [r3, #5]
	Acelerometer.slaveAddress                       = ACCEL_ADDRESS;
 8001bbe:	4b63      	ldr	r3, [pc, #396]	; (8001d4c <init_Hardware+0x2dc>)
 8001bc0:	221d      	movs	r2, #29
 8001bc2:	711a      	strb	r2, [r3, #4]
	i2c_config(&Acelerometer);
 8001bc4:	4861      	ldr	r0, [pc, #388]	; (8001d4c <init_Hardware+0x2dc>)
 8001bc6:	f000 fbbf 	bl	8002348 <i2c_config>

	// Definición del timer para el muestreo de 1 KHz
	handlerTimer5.ptrTIMx							= TIM5;
 8001bca:	4b62      	ldr	r3, [pc, #392]	; (8001d54 <init_Hardware+0x2e4>)
 8001bcc:	4a62      	ldr	r2, [pc, #392]	; (8001d58 <init_Hardware+0x2e8>)
 8001bce:	601a      	str	r2, [r3, #0]
	handlerTimer5.TIMx_Config.TIMx_mode				= BTIMER_MODE_UP;
 8001bd0:	4b60      	ldr	r3, [pc, #384]	; (8001d54 <init_Hardware+0x2e4>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	711a      	strb	r2, [r3, #4]
	handlerTimer5.TIMx_Config.TIMx_speed			= BTIMER_SPEED_80MHz;
 8001bd6:	4b5f      	ldr	r3, [pc, #380]	; (8001d54 <init_Hardware+0x2e4>)
 8001bd8:	f641 72a4 	movw	r2, #8100	; 0x1fa4
 8001bdc:	609a      	str	r2, [r3, #8]
	handlerTimer5.TIMx_Config.TIMx_period			= 10;
 8001bde:	4b5d      	ldr	r3, [pc, #372]	; (8001d54 <init_Hardware+0x2e4>)
 8001be0:	220a      	movs	r2, #10
 8001be2:	60da      	str	r2, [r3, #12]
	handlerTimer5.TIMx_Config.TIMx_interruptEnable 	= BTIMER_INTERRUPT_ENABLE;
 8001be4:	4b5b      	ldr	r3, [pc, #364]	; (8001d54 <init_Hardware+0x2e4>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	741a      	strb	r2, [r3, #16]

	// Se carga lo hecho sobre el timer del muestreo.
	BasicTimer_Config(&handlerTimer5);
 8001bea:	485a      	ldr	r0, [pc, #360]	; (8001d54 <init_Hardware+0x2e4>)
 8001bec:	f000 f950 	bl	8001e90 <BasicTimer_Config>

	// Configuración para el PWM
	// Como son 3 señales, se tiene PWM_1, PWM_2 Y PWM_3.
	// Se multiplexa el timer 3, dado que cada uno tiene 4 canales de PWM.
	HandlerPWM_1.pGPIOx          					= GPIOC;
 8001bf0:	4b5a      	ldr	r3, [pc, #360]	; (8001d5c <init_Hardware+0x2ec>)
 8001bf2:	4a5b      	ldr	r2, [pc, #364]	; (8001d60 <init_Hardware+0x2f0>)
 8001bf4:	601a      	str	r2, [r3, #0]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinNumber  	= PIN_7;
 8001bf6:	4b59      	ldr	r3, [pc, #356]	; (8001d5c <init_Hardware+0x2ec>)
 8001bf8:	2207      	movs	r2, #7
 8001bfa:	711a      	strb	r2, [r3, #4]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8001bfc:	4b57      	ldr	r3, [pc, #348]	; (8001d5c <init_Hardware+0x2ec>)
 8001bfe:	2202      	movs	r2, #2
 8001c00:	715a      	strb	r2, [r3, #5]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8001c02:	4b56      	ldr	r3, [pc, #344]	; (8001d5c <init_Hardware+0x2ec>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	721a      	strb	r2, [r3, #8]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001c08:	4b54      	ldr	r3, [pc, #336]	; (8001d5c <init_Hardware+0x2ec>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	71da      	strb	r2, [r3, #7]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8001c0e:	4b53      	ldr	r3, [pc, #332]	; (8001d5c <init_Hardware+0x2ec>)
 8001c10:	2202      	movs	r2, #2
 8001c12:	719a      	strb	r2, [r3, #6]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001c14:	4b51      	ldr	r3, [pc, #324]	; (8001d5c <init_Hardware+0x2ec>)
 8001c16:	2202      	movs	r2, #2
 8001c18:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerPWM_1);
 8001c1a:	4850      	ldr	r0, [pc, #320]	; (8001d5c <init_Hardware+0x2ec>)
 8001c1c:	f000 fa2c 	bl	8002078 <GPIO_Config>

	handlerTIM3PWM_1.ptrTIMx           	  =   TIM3;
 8001c20:	4b50      	ldr	r3, [pc, #320]	; (8001d64 <init_Hardware+0x2f4>)
 8001c22:	4a51      	ldr	r2, [pc, #324]	; (8001d68 <init_Hardware+0x2f8>)
 8001c24:	601a      	str	r2, [r3, #0]
	handlerTIM3PWM_1.config.channel       =   PWM_CHANNEL_2;
 8001c26:	4b4f      	ldr	r3, [pc, #316]	; (8001d64 <init_Hardware+0x2f4>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	711a      	strb	r2, [r3, #4]
	handlerTIM3PWM_1.config.duttyCicle    =   1500;
 8001c2c:	4b4d      	ldr	r3, [pc, #308]	; (8001d64 <init_Hardware+0x2f4>)
 8001c2e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001c32:	81da      	strh	r2, [r3, #14]
	handlerTIM3PWM_1.config.periodo       =   20000;
 8001c34:	4b4b      	ldr	r3, [pc, #300]	; (8001d64 <init_Hardware+0x2f4>)
 8001c36:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001c3a:	819a      	strh	r2, [r3, #12]
	handlerTIM3PWM_1.config.prescaler     =   80;
 8001c3c:	4b49      	ldr	r3, [pc, #292]	; (8001d64 <init_Hardware+0x2f4>)
 8001c3e:	2250      	movs	r2, #80	; 0x50
 8001c40:	609a      	str	r2, [r3, #8]

	pwm_Config(&handlerTIM3PWM_1);
 8001c42:	4848      	ldr	r0, [pc, #288]	; (8001d64 <init_Hardware+0x2f4>)
 8001c44:	f000 fe6e 	bl	8002924 <pwm_Config>

	enableOutput(&handlerTIM3PWM_1);
 8001c48:	4846      	ldr	r0, [pc, #280]	; (8001d64 <init_Hardware+0x2f4>)
 8001c4a:	f000 ff41 	bl	8002ad0 <enableOutput>
	startPwmSignal(&handlerTIM3PWM_1);
 8001c4e:	4845      	ldr	r0, [pc, #276]	; (8001d64 <init_Hardware+0x2f4>)
 8001c50:	f000 ff2c 	bl	8002aac <startPwmSignal>

	HandlerPWM_2.pGPIOx          					= GPIOC;
 8001c54:	4b45      	ldr	r3, [pc, #276]	; (8001d6c <init_Hardware+0x2fc>)
 8001c56:	4a42      	ldr	r2, [pc, #264]	; (8001d60 <init_Hardware+0x2f0>)
 8001c58:	601a      	str	r2, [r3, #0]
	HandlerPWM_2.GPIO_PinConfig.GPIO_PinNumber  	= PIN_8;
 8001c5a:	4b44      	ldr	r3, [pc, #272]	; (8001d6c <init_Hardware+0x2fc>)
 8001c5c:	2208      	movs	r2, #8
 8001c5e:	711a      	strb	r2, [r3, #4]
	HandlerPWM_2.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8001c60:	4b42      	ldr	r3, [pc, #264]	; (8001d6c <init_Hardware+0x2fc>)
 8001c62:	2202      	movs	r2, #2
 8001c64:	715a      	strb	r2, [r3, #5]
	HandlerPWM_2.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8001c66:	4b41      	ldr	r3, [pc, #260]	; (8001d6c <init_Hardware+0x2fc>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	721a      	strb	r2, [r3, #8]
	HandlerPWM_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001c6c:	4b3f      	ldr	r3, [pc, #252]	; (8001d6c <init_Hardware+0x2fc>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	71da      	strb	r2, [r3, #7]
	HandlerPWM_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8001c72:	4b3e      	ldr	r3, [pc, #248]	; (8001d6c <init_Hardware+0x2fc>)
 8001c74:	2202      	movs	r2, #2
 8001c76:	719a      	strb	r2, [r3, #6]
	HandlerPWM_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001c78:	4b3c      	ldr	r3, [pc, #240]	; (8001d6c <init_Hardware+0x2fc>)
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerPWM_2);
 8001c7e:	483b      	ldr	r0, [pc, #236]	; (8001d6c <init_Hardware+0x2fc>)
 8001c80:	f000 f9fa 	bl	8002078 <GPIO_Config>

	handlerTIM3PWM_2.ptrTIMx           	  =   TIM3;
 8001c84:	4b3a      	ldr	r3, [pc, #232]	; (8001d70 <init_Hardware+0x300>)
 8001c86:	4a38      	ldr	r2, [pc, #224]	; (8001d68 <init_Hardware+0x2f8>)
 8001c88:	601a      	str	r2, [r3, #0]
	handlerTIM3PWM_2.config.channel       =   PWM_CHANNEL_3;
 8001c8a:	4b39      	ldr	r3, [pc, #228]	; (8001d70 <init_Hardware+0x300>)
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	711a      	strb	r2, [r3, #4]
	handlerTIM3PWM_2.config.duttyCicle    =   1500;
 8001c90:	4b37      	ldr	r3, [pc, #220]	; (8001d70 <init_Hardware+0x300>)
 8001c92:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001c96:	81da      	strh	r2, [r3, #14]
	handlerTIM3PWM_2.config.periodo       =   20000;
 8001c98:	4b35      	ldr	r3, [pc, #212]	; (8001d70 <init_Hardware+0x300>)
 8001c9a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001c9e:	819a      	strh	r2, [r3, #12]
	handlerTIM3PWM_2.config.prescaler     =   80;
 8001ca0:	4b33      	ldr	r3, [pc, #204]	; (8001d70 <init_Hardware+0x300>)
 8001ca2:	2250      	movs	r2, #80	; 0x50
 8001ca4:	609a      	str	r2, [r3, #8]

	pwm_Config(&handlerTIM3PWM_2);
 8001ca6:	4832      	ldr	r0, [pc, #200]	; (8001d70 <init_Hardware+0x300>)
 8001ca8:	f000 fe3c 	bl	8002924 <pwm_Config>

	enableOutput(&handlerTIM3PWM_2);
 8001cac:	4830      	ldr	r0, [pc, #192]	; (8001d70 <init_Hardware+0x300>)
 8001cae:	f000 ff0f 	bl	8002ad0 <enableOutput>
	startPwmSignal(&handlerTIM3PWM_2);
 8001cb2:	482f      	ldr	r0, [pc, #188]	; (8001d70 <init_Hardware+0x300>)
 8001cb4:	f000 fefa 	bl	8002aac <startPwmSignal>

	HandlerPWM_3.pGPIOx          					= GPIOC;
 8001cb8:	4b2e      	ldr	r3, [pc, #184]	; (8001d74 <init_Hardware+0x304>)
 8001cba:	4a29      	ldr	r2, [pc, #164]	; (8001d60 <init_Hardware+0x2f0>)
 8001cbc:	601a      	str	r2, [r3, #0]
	HandlerPWM_3.GPIO_PinConfig.GPIO_PinNumber  	= PIN_9;
 8001cbe:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <init_Hardware+0x304>)
 8001cc0:	2209      	movs	r2, #9
 8001cc2:	711a      	strb	r2, [r3, #4]
	HandlerPWM_3.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8001cc4:	4b2b      	ldr	r3, [pc, #172]	; (8001d74 <init_Hardware+0x304>)
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	715a      	strb	r2, [r3, #5]
	HandlerPWM_3.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8001cca:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <init_Hardware+0x304>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	721a      	strb	r2, [r3, #8]
	HandlerPWM_3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001cd0:	4b28      	ldr	r3, [pc, #160]	; (8001d74 <init_Hardware+0x304>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	71da      	strb	r2, [r3, #7]
	HandlerPWM_3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8001cd6:	4b27      	ldr	r3, [pc, #156]	; (8001d74 <init_Hardware+0x304>)
 8001cd8:	2202      	movs	r2, #2
 8001cda:	719a      	strb	r2, [r3, #6]
	HandlerPWM_3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001cdc:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <init_Hardware+0x304>)
 8001cde:	2202      	movs	r2, #2
 8001ce0:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerPWM_3);
 8001ce2:	4824      	ldr	r0, [pc, #144]	; (8001d74 <init_Hardware+0x304>)
 8001ce4:	f000 f9c8 	bl	8002078 <GPIO_Config>

	handlerTIM3PWM_3.ptrTIMx           	  =   TIM3;
 8001ce8:	4b23      	ldr	r3, [pc, #140]	; (8001d78 <init_Hardware+0x308>)
 8001cea:	4a1f      	ldr	r2, [pc, #124]	; (8001d68 <init_Hardware+0x2f8>)
 8001cec:	601a      	str	r2, [r3, #0]
	handlerTIM3PWM_3.config.channel       =   PWM_CHANNEL_4;
 8001cee:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <init_Hardware+0x308>)
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	711a      	strb	r2, [r3, #4]
	handlerTIM3PWM_3.config.duttyCicle    =   1500;
 8001cf4:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <init_Hardware+0x308>)
 8001cf6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001cfa:	81da      	strh	r2, [r3, #14]
	handlerTIM3PWM_3.config.periodo       =   20000;
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <init_Hardware+0x308>)
 8001cfe:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001d02:	819a      	strh	r2, [r3, #12]
	handlerTIM3PWM_3.config.prescaler     =   80;
 8001d04:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <init_Hardware+0x308>)
 8001d06:	2250      	movs	r2, #80	; 0x50
 8001d08:	609a      	str	r2, [r3, #8]

	pwm_Config(&handlerTIM3PWM_3);
 8001d0a:	481b      	ldr	r0, [pc, #108]	; (8001d78 <init_Hardware+0x308>)
 8001d0c:	f000 fe0a 	bl	8002924 <pwm_Config>

	enableOutput(&handlerTIM3PWM_3);
 8001d10:	4819      	ldr	r0, [pc, #100]	; (8001d78 <init_Hardware+0x308>)
 8001d12:	f000 fedd 	bl	8002ad0 <enableOutput>
	startPwmSignal(&handlerTIM3PWM_3);
 8001d16:	4818      	ldr	r0, [pc, #96]	; (8001d78 <init_Hardware+0x308>)
 8001d18:	f000 fec8 	bl	8002aac <startPwmSignal>
}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000234 	.word	0x20000234
 8001d24:	20000238 	.word	0x20000238
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	200060d8 	.word	0x200060d8
 8001d30:	20000244 	.word	0x20000244
 8001d34:	20000250 	.word	0x20000250
 8001d38:	2000025c 	.word	0x2000025c
 8001d3c:	40011400 	.word	0x40011400
 8001d40:	200002fc 	.word	0x200002fc
 8001d44:	40020400 	.word	0x40020400
 8001d48:	200002f0 	.word	0x200002f0
 8001d4c:	20000308 	.word	0x20000308
 8001d50:	40005400 	.word	0x40005400
 8001d54:	200060ec 	.word	0x200060ec
 8001d58:	40000c00 	.word	0x40000c00
 8001d5c:	20006104 	.word	0x20006104
 8001d60:	40020800 	.word	0x40020800
 8001d64:	20006128 	.word	0x20006128
 8001d68:	40000400 	.word	0x40000400
 8001d6c:	20006110 	.word	0x20006110
 8001d70:	20006138 	.word	0x20006138
 8001d74:	2000611c 	.word	0x2000611c
 8001d78:	20006148 	.word	0x20006148

08001d7c <BasicTimer2_Callback>:


// Callback para el blinky pin.
void BasicTimer2_Callback(void){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handlerBlinkyPin);
 8001d80:	4805      	ldr	r0, [pc, #20]	; (8001d98 <BasicTimer2_Callback+0x1c>)
 8001d82:	f000 facb 	bl	800231c <GPIOxTooglePin>
	sendMSG++;
 8001d86:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <BasicTimer2_Callback+0x20>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <BasicTimer2_Callback+0x20>)
 8001d90:	701a      	strb	r2, [r3, #0]
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000238 	.word	0x20000238
 8001d9c:	200002ec 	.word	0x200002ec

08001da0 <BasicTimer5_Callback>:

// Callback para la bandera del muestreo de 1 KHz
void BasicTimer5_Callback(void){
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
	if(rxData == 'c'){
 8001da4:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <BasicTimer5_Callback+0x44>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b63      	cmp	r3, #99	; 0x63
 8001daa:	d103      	bne.n	8001db4 <BasicTimer5_Callback+0x14>
		flagMuestreo = 2;
 8001dac:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <BasicTimer5_Callback+0x48>)
 8001dae:	2202      	movs	r2, #2
 8001db0:	701a      	strb	r2, [r3, #0]
	}else if(rxData == 'v'){
		flagMuestreo = 4;
	}else{
		flagMuestreo = 1;
	}
}
 8001db2:	e012      	b.n	8001dda <BasicTimer5_Callback+0x3a>
	}else if(rxData == 'k'){
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <BasicTimer5_Callback+0x44>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b6b      	cmp	r3, #107	; 0x6b
 8001dba:	d103      	bne.n	8001dc4 <BasicTimer5_Callback+0x24>
		flagMuestreo = 3;
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <BasicTimer5_Callback+0x48>)
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	701a      	strb	r2, [r3, #0]
}
 8001dc2:	e00a      	b.n	8001dda <BasicTimer5_Callback+0x3a>
	}else if(rxData == 'v'){
 8001dc4:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <BasicTimer5_Callback+0x44>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b76      	cmp	r3, #118	; 0x76
 8001dca:	d103      	bne.n	8001dd4 <BasicTimer5_Callback+0x34>
		flagMuestreo = 4;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <BasicTimer5_Callback+0x48>)
 8001dce:	2204      	movs	r2, #4
 8001dd0:	701a      	strb	r2, [r3, #0]
}
 8001dd2:	e002      	b.n	8001dda <BasicTimer5_Callback+0x3a>
		flagMuestreo = 1;
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <BasicTimer5_Callback+0x48>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	701a      	strb	r2, [r3, #0]
}
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	20000311 	.word	0x20000311
 8001de8:	20006100 	.word	0x20006100

08001dec <usart6Rx_Callback>:
// Callback para el usart 6.
void usart6Rx_Callback(void){
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
	rxData = getRxData();
 8001df0:	f001 f954 	bl	800309c <getRxData>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b01      	ldr	r3, [pc, #4]	; (8001e00 <usart6Rx_Callback+0x14>)
 8001dfa:	701a      	strb	r2, [r3, #0]
}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000311 	.word	0x20000311

08001e04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e04:	480d      	ldr	r0, [pc, #52]	; (8001e3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e06:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e08:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e0c:	480c      	ldr	r0, [pc, #48]	; (8001e40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e0e:	490d      	ldr	r1, [pc, #52]	; (8001e44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e10:	4a0d      	ldr	r2, [pc, #52]	; (8001e48 <LoopForever+0xe>)
  movs r3, #0
 8001e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e14:	e002      	b.n	8001e1c <LoopCopyDataInit>

08001e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e1a:	3304      	adds	r3, #4

08001e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e20:	d3f9      	bcc.n	8001e16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e22:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e24:	4c0a      	ldr	r4, [pc, #40]	; (8001e50 <LoopForever+0x16>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e28:	e001      	b.n	8001e2e <LoopFillZerobss>

08001e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e2c:	3204      	adds	r2, #4

08001e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e30:	d3fb      	bcc.n	8001e2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e32:	f001 f975 	bl	8003120 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e36:	f7ff f94b 	bl	80010d0 <main>

08001e3a <LoopForever>:

LoopForever:
    b LoopForever
 8001e3a:	e7fe      	b.n	8001e3a <LoopForever>
  ldr   r0, =_estack
 8001e3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e44:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8001e48:	08008044 	.word	0x08008044
  ldr r2, =_sbss
 8001e4c:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8001e50:	20006188 	.word	0x20006188

08001e54 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e54:	e7fe      	b.n	8001e54 <ADC_IRQHandler>
	...

08001e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	db0b      	blt.n	8001e82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	f003 021f 	and.w	r2, r3, #31
 8001e70:	4906      	ldr	r1, [pc, #24]	; (8001e8c <__NVIC_EnableIRQ+0x34>)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	2001      	movs	r0, #1
 8001e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	e000e100 	.word	0xe000e100

08001e90 <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrBTimerHandler->ptrTIMx;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a4e      	ldr	r2, [pc, #312]	; (8001fd8 <BasicTimer_Config+0x148>)
 8001e9e:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea0:	b672      	cpsid	i
}
 8001ea2:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();
	/* 1. Activar la señal de reloj del periférico requerido */
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eac:	d106      	bne.n	8001ebc <BasicTimer_Config+0x2c>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001eae:	4b4b      	ldr	r3, [pc, #300]	; (8001fdc <BasicTimer_Config+0x14c>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a4a      	ldr	r2, [pc, #296]	; (8001fdc <BasicTimer_Config+0x14c>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eba:	e024      	b.n	8001f06 <BasicTimer_Config+0x76>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a47      	ldr	r2, [pc, #284]	; (8001fe0 <BasicTimer_Config+0x150>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d106      	bne.n	8001ed4 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001ec6:	4b45      	ldr	r3, [pc, #276]	; (8001fdc <BasicTimer_Config+0x14c>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	4a44      	ldr	r2, [pc, #272]	; (8001fdc <BasicTimer_Config+0x14c>)
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed2:	e018      	b.n	8001f06 <BasicTimer_Config+0x76>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a42      	ldr	r2, [pc, #264]	; (8001fe4 <BasicTimer_Config+0x154>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d106      	bne.n	8001eec <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001ede:	4b3f      	ldr	r3, [pc, #252]	; (8001fdc <BasicTimer_Config+0x14c>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a3e      	ldr	r2, [pc, #248]	; (8001fdc <BasicTimer_Config+0x14c>)
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eea:	e00c      	b.n	8001f06 <BasicTimer_Config+0x76>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a3d      	ldr	r2, [pc, #244]	; (8001fe8 <BasicTimer_Config+0x158>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d106      	bne.n	8001f04 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001ef6:	4b39      	ldr	r3, [pc, #228]	; (8001fdc <BasicTimer_Config+0x14c>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	4a38      	ldr	r2, [pc, #224]	; (8001fdc <BasicTimer_Config+0x14c>)
 8001efc:	f043 0308 	orr.w	r3, r3, #8
 8001f00:	6413      	str	r3, [r2, #64]	; 0x40
 8001f02:	e000      	b.n	8001f06 <BasicTimer_Config+0x76>
	}

	else{
		__NOP();
 8001f04:	bf00      	nop
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */
	// -1 porque el contador empieza en 0
	ptrBTimerHandler->ptrTIMx-> PSC = ptrBTimerHandler ->TIMx_Config.TIMx_speed - 1;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	3a01      	subs	r2, #1
 8001f10:	629a      	str	r2, [r3, #40]	; 0x28

	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	791b      	ldrb	r3, [r3, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d112      	bne.n	8001f40 <BasicTimer_Config+0xb0>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Necesitamos poner la direccion en 0 para que cuente hacia arria TIM_CR1_DIR = 1, entonces
		// lo negamos y hacemos una AND con el valor actual.
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0210 	bic.w	r2, r2, #16
 8001f28:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	3a01      	subs	r2, #1
 8001f34:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24
 8001f3e:	e00d      	b.n	8001f5c <BasicTimer_Config+0xcc>

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		// Cuando CR1 = 1 es descendente
		ptrBTimerHandler->ptrTIMx->CR1 = TIM_CR1_DIR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2210      	movs	r2, #16
 8001f46:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		ptrBTimerHandler-> ptrTIMx->ARR = 0;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	3a01      	subs	r2, #1
 8001f5a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0201 	orr.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	// El registro encargado de la interrupcion es el UIE

	// Modificar con el ciclo If
	ptrBTimerHandler->ptrTIMx->DIER |= ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable; //TIM_DIER_UIE
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	7c1b      	ldrb	r3, [r3, #16]
 8001f76:	4619      	mov	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f88:	d103      	bne.n	8001f92 <BasicTimer_Config+0x102>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8001f8a:	201c      	movs	r0, #28
 8001f8c:	f7ff ff64 	bl	8001e58 <__NVIC_EnableIRQ>
 8001f90:	e01b      	b.n	8001fca <BasicTimer_Config+0x13a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a12      	ldr	r2, [pc, #72]	; (8001fe0 <BasicTimer_Config+0x150>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d103      	bne.n	8001fa4 <BasicTimer_Config+0x114>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8001f9c:	201d      	movs	r0, #29
 8001f9e:	f7ff ff5b 	bl	8001e58 <__NVIC_EnableIRQ>
 8001fa2:	e012      	b.n	8001fca <BasicTimer_Config+0x13a>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0e      	ldr	r2, [pc, #56]	; (8001fe4 <BasicTimer_Config+0x154>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d103      	bne.n	8001fb6 <BasicTimer_Config+0x126>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8001fae:	201e      	movs	r0, #30
 8001fb0:	f7ff ff52 	bl	8001e58 <__NVIC_EnableIRQ>
 8001fb4:	e009      	b.n	8001fca <BasicTimer_Config+0x13a>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a0b      	ldr	r2, [pc, #44]	; (8001fe8 <BasicTimer_Config+0x158>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d103      	bne.n	8001fc8 <BasicTimer_Config+0x138>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8001fc0:	2032      	movs	r0, #50	; 0x32
 8001fc2:	f7ff ff49 	bl	8001e58 <__NVIC_EnableIRQ>
 8001fc6:	e000      	b.n	8001fca <BasicTimer_Config+0x13a>
	}

	else{
		__NOP();
 8001fc8:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8001fca:	b662      	cpsie	i
}
 8001fcc:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	2000616c 	.word	0x2000616c
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40000400 	.word	0x40000400
 8001fe4:	40000800 	.word	0x40000800
 8001fe8:	40000c00 	.word	0x40000c00

08001fec <BasicTimer3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer3_Callback(void){
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001ff0:	bf00      	nop
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr

08001ffa <BasicTimer4_Callback>:
__attribute__((weak)) void BasicTimer4_Callback(void){
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001ffe:	bf00      	nop
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM2->SR &= ~TIM_SR_UIF;
 800200c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002016:	f023 0301 	bic.w	r3, r3, #1
 800201a:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer2_Callback();
 800201c:	f7ff feae 	bl	8001d7c <BasicTimer2_Callback>
}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}

08002024 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM3->SR &= ~TIM_SR_UIF;
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <TIM3_IRQHandler+0x18>)
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	4a03      	ldr	r2, [pc, #12]	; (800203c <TIM3_IRQHandler+0x18>)
 800202e:	f023 0301 	bic.w	r3, r3, #1
 8002032:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer3_Callback();
 8002034:	f7ff ffda 	bl	8001fec <BasicTimer3_Callback>
}
 8002038:	bf00      	nop
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40000400 	.word	0x40000400

08002040 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM4->SR &= ~TIM_SR_UIF;
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <TIM4_IRQHandler+0x18>)
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	4a03      	ldr	r2, [pc, #12]	; (8002058 <TIM4_IRQHandler+0x18>)
 800204a:	f023 0301 	bic.w	r3, r3, #1
 800204e:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer4_Callback();
 8002050:	f7ff ffd3 	bl	8001ffa <BasicTimer4_Callback>
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40000800 	.word	0x40000800

0800205c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM5->SR &= ~TIM_SR_UIF;
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <TIM5_IRQHandler+0x18>)
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	4a03      	ldr	r2, [pc, #12]	; (8002074 <TIM5_IRQHandler+0x18>)
 8002066:	f023 0301 	bic.w	r3, r3, #1
 800206a:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer5_Callback();
 800206c:	f7ff fe98 	bl	8001da0 <BasicTimer5_Callback>
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40000c00 	.word	0x40000c00

08002078 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemento "activar el periferico o activar la señal de reloj del periferico)
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]

	// 1)Activar el periferico
	//verificamos para GPIOA
	if(pGPIOHandler->pGPIOx == GPIOA){
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a87      	ldr	r2, [pc, #540]	; (80022ac <GPIO_Config+0x234>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d106      	bne.n	80020a0 <GPIO_Config+0x28>
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 8002092:	4b87      	ldr	r3, [pc, #540]	; (80022b0 <GPIO_Config+0x238>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a86      	ldr	r2, [pc, #536]	; (80022b0 <GPIO_Config+0x238>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	e03a      	b.n	8002116 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx == GPIOB){
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a83      	ldr	r2, [pc, #524]	; (80022b4 <GPIO_Config+0x23c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d106      	bne.n	80020b8 <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 80020aa:	4b81      	ldr	r3, [pc, #516]	; (80022b0 <GPIO_Config+0x238>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a80      	ldr	r2, [pc, #512]	; (80022b0 <GPIO_Config+0x238>)
 80020b0:	f043 0302 	orr.w	r3, r3, #2
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	e02e      	b.n	8002116 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if(pGPIOHandler->pGPIOx == GPIOC){
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a7e      	ldr	r2, [pc, #504]	; (80022b8 <GPIO_Config+0x240>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d106      	bne.n	80020d0 <GPIO_Config+0x58>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 80020c2:	4b7b      	ldr	r3, [pc, #492]	; (80022b0 <GPIO_Config+0x238>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a7a      	ldr	r2, [pc, #488]	; (80022b0 <GPIO_Config+0x238>)
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	e022      	b.n	8002116 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if(pGPIOHandler->pGPIOx == GPIOD){
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a79      	ldr	r2, [pc, #484]	; (80022bc <GPIO_Config+0x244>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d106      	bne.n	80020e8 <GPIO_Config+0x70>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 80020da:	4b75      	ldr	r3, [pc, #468]	; (80022b0 <GPIO_Config+0x238>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a74      	ldr	r2, [pc, #464]	; (80022b0 <GPIO_Config+0x238>)
 80020e0:	f043 0308 	orr.w	r3, r3, #8
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	e016      	b.n	8002116 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if(pGPIOHandler->pGPIOx == GPIOE){
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a74      	ldr	r2, [pc, #464]	; (80022c0 <GPIO_Config+0x248>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d106      	bne.n	8002100 <GPIO_Config+0x88>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 80020f2:	4b6f      	ldr	r3, [pc, #444]	; (80022b0 <GPIO_Config+0x238>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a6e      	ldr	r2, [pc, #440]	; (80022b0 <GPIO_Config+0x238>)
 80020f8:	f043 0310 	orr.w	r3, r3, #16
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	e00a      	b.n	8002116 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOH
	else if(pGPIOHandler->pGPIOx == GPIOH){
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a6f      	ldr	r2, [pc, #444]	; (80022c4 <GPIO_Config+0x24c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d105      	bne.n	8002116 <GPIO_Config+0x9e>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 800210a:	4b69      	ldr	r3, [pc, #420]	; (80022b0 <GPIO_Config+0x238>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a68      	ldr	r2, [pc, #416]	; (80022b0 <GPIO_Config+0x238>)
 8002110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
	// Despues de activado, podemos comenzar a configurar.

	// 2) COnfigurando el registro GPIOx_MODER
	// Acá estamos leyendo config, moviendo "PinNumber" veces hacia la izquierda
	// ese valor (shift left) y todo eso lo cargamos en la variable auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	795b      	ldrb	r3, [r3, #5]
 800211a:	461a      	mov	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	791b      	ldrb	r3, [r3, #4]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	60fb      	str	r3, [r7, #12]
	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro
	 * (debemos escribir 0b00) para lo cual aplicamos una mascara y una operación de
	 * bitwise AND
	 */
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	791b      	ldrb	r3, [r3, #4]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	2103      	movs	r1, #3
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	4619      	mov	r1, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	400a      	ands	r2, r1
 8002144:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6819      	ldr	r1, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	430a      	orrs	r2, r1
 8002154:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	7a1b      	ldrb	r3, [r3, #8]
 800215a:	461a      	mov	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	791b      	ldrb	r3, [r3, #4]
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	791b      	ldrb	r3, [r3, #4]
 8002170:	4619      	mov	r1, r3
 8002172:	2301      	movs	r3, #1
 8002174:	408b      	lsls	r3, r1
 8002176:	43db      	mvns	r3, r3
 8002178:	4619      	mov	r1, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	400a      	ands	r2, r1
 8002180:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6859      	ldr	r1, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	430a      	orrs	r2, r1
 8002190:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	799b      	ldrb	r3, [r3, #6]
 8002196:	461a      	mov	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	791b      	ldrb	r3, [r3, #4]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0B11 << 2 *pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	791b      	ldrb	r3, [r3, #4]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	2103      	movs	r1, #3
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	4619      	mov	r1, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	400a      	ands	r2, r1
 80021c0:	609a      	str	r2, [r3, #8]

	//cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6899      	ldr	r1, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull up pull down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	79db      	ldrb	r3, [r3, #7]
 80021d6:	461a      	mov	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	791b      	ldrb	r3, [r3, #4]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	791b      	ldrb	r3, [r3, #4]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	2103      	movs	r1, #3
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	4619      	mov	r1, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	400a      	ands	r2, r1
 8002200:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68d9      	ldr	r1, [r3, #12]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	430a      	orrs	r2, r1
 8002210:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas.. se vera luego
	if (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	795b      	ldrb	r3, [r3, #5]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d143      	bne.n	80022a2 <GPIO_Config+0x22a>

		//Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	791b      	ldrb	r3, [r3, #4]
 800221e:	2b07      	cmp	r3, #7
 8002220:	d81f      	bhi.n	8002262 <GPIO_Config+0x1ea>
			//Estamos en el registro AGRL, que controla los piner del pIN_0 AL PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	791b      	ldrb	r3, [r3, #4]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del tegistro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6a1a      	ldr	r2, [r3, #32]
 8002230:	210f      	movs	r1, #15
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	fa01 f303 	lsl.w	r3, r1, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	4619      	mov	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	400a      	ands	r2, r1
 8002242:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor confiurado en la posicon seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6a1a      	ldr	r2, [r3, #32]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	7a5b      	ldrb	r3, [r3, #9]
 800224e:	4619      	mov	r1, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	fa01 f303 	lsl.w	r3, r1, r3
 8002256:	4619      	mov	r1, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} //Fin del GPIO_Config
 8002260:	e01f      	b.n	80022a2 <GPIO_Config+0x22a>
			auxPosition = 4* (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber -8);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	791b      	ldrb	r3, [r3, #4]
 8002266:	3b08      	subs	r3, #8
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002272:	210f      	movs	r1, #15
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	fa01 f303 	lsl.w	r3, r1, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	4619      	mov	r1, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	400a      	ands	r2, r1
 8002284:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	7a5b      	ldrb	r3, [r3, #9]
 8002290:	4619      	mov	r1, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	fa01 f303 	lsl.w	r3, r1, r3
 8002298:	4619      	mov	r1, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24
} //Fin del GPIO_Config
 80022a2:	bf00      	nop
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr
 80022ac:	40020000 	.word	0x40020000
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40021c00 	.word	0x40021c00

080022c8 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 *
 */
void GPIO_WritePin(GPIO_Handler_t *pPinHandler, uint8_t newState){
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->0DR &= ~(SET << pPinHandler ->GPIO_PinConfig.GPIO_PinNumber);
	if(newState == SET){
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d10d      	bne.n	80022f6 <GPIO_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699a      	ldr	r2, [r3, #24]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	791b      	ldrb	r3, [r3, #4]
 80022e4:	4619      	mov	r1, r3
 80022e6:	2301      	movs	r3, #1
 80022e8:	408b      	lsls	r3, r1
 80022ea:	4619      	mov	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	619a      	str	r2, [r3, #24]
	else{
		//Trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
	}

}
 80022f4:	e00d      	b.n	8002312 <GPIO_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699a      	ldr	r2, [r3, #24]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	791b      	ldrb	r3, [r3, #4]
 8002300:	3310      	adds	r3, #16
 8002302:	2101      	movs	r1, #1
 8002304:	fa01 f303 	lsl.w	r3, r1, r3
 8002308:	4619      	mov	r1, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	619a      	str	r2, [r3, #24]
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <GPIOxTooglePin>:
	pinValue &= mask;

	return pinValue;
}

void GPIOxTooglePin(GPIO_Handler_t *pPinHandler){
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR ^= (SET <<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695a      	ldr	r2, [r3, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	791b      	ldrb	r3, [r3, #4]
 800232e:	4619      	mov	r1, r3
 8002330:	2301      	movs	r3, #1
 8002332:	408b      	lsls	r3, r1
 8002334:	4619      	mov	r1, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	404a      	eors	r2, r1
 800233c:	615a      	str	r2, [r3, #20]
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <i2c_config>:
 *
 * Además, estos pines deben ser configurados como salidas open-drain y con las
 * resistencias en modo pull-up..
 */

void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	/* 1. Activamos la señal de reloj para el modulo I2C seleccionado */
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a45      	ldr	r2, [pc, #276]	; (800246c <i2c_config+0x124>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d106      	bne.n	8002368 <i2c_config+0x20>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800235a:	4b45      	ldr	r3, [pc, #276]	; (8002470 <i2c_config+0x128>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4a44      	ldr	r2, [pc, #272]	; (8002470 <i2c_config+0x128>)
 8002360:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002364:	6413      	str	r3, [r2, #64]	; 0x40
 8002366:	e016      	b.n	8002396 <i2c_config+0x4e>
	}
	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a41      	ldr	r2, [pc, #260]	; (8002474 <i2c_config+0x12c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d106      	bne.n	8002380 <i2c_config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8002372:	4b3f      	ldr	r3, [pc, #252]	; (8002470 <i2c_config+0x128>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	4a3e      	ldr	r2, [pc, #248]	; (8002470 <i2c_config+0x128>)
 8002378:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800237c:	6413      	str	r3, [r2, #64]	; 0x40
 800237e:	e00a      	b.n	8002396 <i2c_config+0x4e>
	}
	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a3c      	ldr	r2, [pc, #240]	; (8002478 <i2c_config+0x130>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d105      	bne.n	8002396 <i2c_config+0x4e>
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 800238a:	4b39      	ldr	r3, [pc, #228]	; (8002470 <i2c_config+0x128>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	4a38      	ldr	r2, [pc, #224]	; (8002470 <i2c_config+0x128>)
 8002390:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002394:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023a4:	601a      	str	r2, [r3, #0]
	__NOP();
 80023a6:	bf00      	nop
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_SWRST;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023b6:	601a      	str	r2, [r3, #0]

	/* 3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C
	 */
	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos); // Borramos la configuración previa
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80023c6:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_80_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);// Seleccionamos 80 MHz
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 80023d6:	605a      	str	r2, [r3, #4]
	/* 4. Configuramos el modo I2C en el que el sistema funciona
	 * En esta configuración se incluye también la configuración del reloj
	 * y el tiempo maximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los registros en 0
	 */
	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2200      	movs	r2, #0
 80023de:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2200      	movs	r2, #0
 80023e6:	621a      	str	r2, [r3, #32]

	if (ptrHandlerI2C->modeI2C == I2C_MODE_SM){
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	795b      	ldrb	r3, [r3, #5]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d118      	bne.n	8002422 <i2c_config+0xda>
		// Estamos en modo "standar" (SM mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~I2C_CCR_FS;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	69da      	ldr	r2, [r3, #28]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023fe:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que se encarga de generar la señal del reloj
		ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_SM_SPEED_100KHz << I2C_CCR_CCR_Pos);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	69da      	ldr	r2, [r3, #28]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 800240e:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que controla el tiempo T-Rise maximo
		ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6a1a      	ldr	r2, [r3, #32]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0229 	orr.w	r2, r2, #41	; 0x29
 800241e:	621a      	str	r2, [r3, #32]
 8002420:	e017      	b.n	8002452 <i2c_config+0x10a>
	}
	else{
		// Estamos en modo "fast" (FM mode)
		// Seleccionamos el modo fast
		ptrHandlerI2C->ptrI2Cx->CCR &= I2C_CCR_FS;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	69da      	ldr	r2, [r3, #28]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002430:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que se encarga de generar la señal del reloj
		ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz << I2C_CCR_CCR_Pos);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	69da      	ldr	r2, [r3, #28]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0221 	orr.w	r2, r2, #33	; 0x21
 8002440:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que controla el tiempo T-Rise maximo
		ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6a1a      	ldr	r2, [r3, #32]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 020c 	orr.w	r2, r2, #12
 8002450:	621a      	str	r2, [r3, #32]
	}

	/* 5. Activamos el modulo I2C
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 0201 	orr.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr
 800246c:	40005400 	.word	0x40005400
 8002470:	40023800 	.word	0x40023800
 8002474:	40005800 	.word	0x40005800
 8002478:	40005c00 	.word	0x40005c00

0800247c <i2c_stopTransaction>:

/* 8. Generamos la condición de stop
 */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	/* 7. Generamos la condición de stop
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002492:	601a      	str	r2, [r3, #0]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr

0800249e <i2c_startTransaction>:
/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_CR2
 * 2. Generamos la señal de "start"
 * 2a. Esperamos a que la bandera del evento "start" se levante.
 * Mientras esperamos, el valor de SB es 0, entonces la negación (!) es 1
 */
void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_CR2
	 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80024a6:	e000      	b.n	80024aa <i2c_startTransaction+0xc>
		__NOP();
 80024a8:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f7      	bne.n	80024a8 <i2c_startTransaction+0xa>
	}

	/* 2. Generamos la señal de "start"
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024c6:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante.
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80024c8:	e000      	b.n	80024cc <i2c_startTransaction+0x2e>
		__NOP();
 80024ca:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f7      	beq.n	80024ca <i2c_startTransaction+0x2c>
	}
}
 80024da:	bf00      	nop
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr

080024e6 <i2c_reStartTransaction>:

/*
 */
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
	/* 2. Generamos la señal de "start"
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024fc:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante.
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80024fe:	e000      	b.n	8002502 <i2c_reStartTransaction+0x1c>
		__NOP();
 8002500:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f7      	beq.n	8002500 <i2c_reStartTransaction+0x1a>
	}
}
 8002510:	bf00      	nop
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <i2c_sendNoAck>:

/* 7a. Activamos la indicación para no-ACK (indicación para el Slave de terminar)
 */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
	/* Debemos escribir cero en la posición ACK del registro de control 1
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_ACK;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002532:	601a      	str	r2, [r3, #0]
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr

0800253e <i2c_sendSlaveAddressRW>:
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 800253e:	b480      	push	{r7}
 8002540:	b085      	sub	sp, #20
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	460b      	mov	r3, r1
 8002548:	70fb      	strb	r3, [r7, #3]
 800254a:	4613      	mov	r3, r2
 800254c:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar
	 */
	uint8_t auxByte = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la dirección del Slave y el bit que indica que deseamos escribir un (0)
	 * (en el siguiente paso se envía la dirección de memoria que se desea escribir)
	 */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 8002552:	78fb      	ldrb	r3, [r7, #3]
 8002554:	005a      	lsls	r2, r3, #1
 8002556:	78bb      	ldrb	r3, [r7, #2]
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bandera del evento "addr" se levante
	 * (esto nos indica que la dirección fue enviada satisfactoriamente)
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8002560:	e000      	b.n	8002564 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 8002562:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f7      	beq.n	8002562 <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepción de ACK de la "addr",
	 * para lo cual debemos leer en secuencia primero el I2C_SR1 y luego el I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	73fb      	strb	r3, [r7, #15]
}
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	70fb      	strb	r3, [r7, #3]
	/* 4. Enviamos la dirección de memoria que deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	611a      	str	r2, [r3, #16]

	/* 4.1 Esperamos hasta que el byte sea transmitido
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 80025a0:	e000      	b.n	80025a4 <i2c_sendMemoryAddress+0x18>
		__NOP();
 80025a2:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f7      	beq.n	80025a2 <i2c_sendMemoryAddress+0x16>
	}
}
 80025b2:	bf00      	nop
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	460b      	mov	r3, r1
 80025c8:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 80025d2:	e000      	b.n	80025d6 <i2c_sendDataByte+0x18>
		__NOP();
 80025d4:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f7      	beq.n	80025d4 <i2c_sendDataByte+0x16>
	}
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <i2c_readDataByte>:

/**/
uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	/* 9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 80025f8:	e000      	b.n	80025fc <i2c_readDataByte+0xc>
		__NOP();
 80025fa:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f7      	beq.n	80025fa <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->dataI2C;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	799b      	ldrb	r3, [r3, #6]
}
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <i2c_readSingleRegister>:

/**/
uint8_t i2c_readSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead){
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	460b      	mov	r3, r1
 800262e:	70fb      	strb	r3, [r7, #3]
	/* 0. Creamos una variable auxiliar para recibir el dato que leemos */
	uint8_t auxRead = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	73fb      	strb	r3, [r7, #15]

	/* 1. Generamos la condición de start */
	i2c_startTransaction(ptrHandlerI2C);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff ff32 	bl	800249e <i2c_startTransaction>

	/* 2. Enviamos la dirección del esclavo y la indicación de ESCRIBIR */
	i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	791b      	ldrb	r3, [r3, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	4619      	mov	r1, r3
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ff7b 	bl	800253e <i2c_sendSlaveAddressRW>

	/* 3. Enviamos la dirección de memoria que deseamos leer */
	i2c_sendMemoryAddress(ptrHandlerI2C, regToRead);
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	4619      	mov	r1, r3
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff ff9d 	bl	800258c <i2c_sendMemoryAddress>

	/* 4. Creamos una condición de reStart */
	i2c_reStartTransaction(ptrHandlerI2C);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff ff47 	bl	80024e6 <i2c_reStartTransaction>

	/* 5. Enviamos la dirección del esclavo y la indicación de LEER */
	i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_READ_DATA);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	791b      	ldrb	r3, [r3, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	4619      	mov	r1, r3
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff ff6c 	bl	800253e <i2c_sendSlaveAddressRW>

	/* 6. Generamos la condición de NoACK, para que el master no funciona y el slave solo envie 1 byte */
	i2c_sendNoAck(ptrHandlerI2C);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff ff58 	bl	800251c <i2c_sendNoAck>

	/* 7. Generamos la señal de Stop, para que el slave se detenga después de 1 byte*/
	i2c_stopTransaction(ptrHandlerI2C);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff ff05 	bl	800247c <i2c_stopTransaction>

	/* 8. Leemos el dato que envia el esclavo */
	auxRead = i2c_readDataByte(ptrHandlerI2C);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff ffbc 	bl	80025f0 <i2c_readDataByte>
 8002678:	4603      	mov	r3, r0
 800267a:	73fb      	strb	r3, [r7, #15]

	return auxRead;
 800267c:	7bfb      	ldrb	r3, [r7, #15]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <i2c_writeSingleRegister>:

/**/
void i2c_writeSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead, uint8_t newValue){
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	460b      	mov	r3, r1
 8002690:	70fb      	strb	r3, [r7, #3]
 8002692:	4613      	mov	r3, r2
 8002694:	70bb      	strb	r3, [r7, #2]

	/* 1. Generamos la condición de Start*/
	i2c_startTransaction(ptrHandlerI2C);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff ff01 	bl	800249e <i2c_startTransaction>

	/* 2. Enviamos la diracción del esclavo y la indicación de ESCRIBIR */
	i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	791b      	ldrb	r3, [r3, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	4619      	mov	r1, r3
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff ff4a 	bl	800253e <i2c_sendSlaveAddressRW>

	/* 3. Enviamos la dirección de memoria que deseamos escribir*/
	i2c_sendMemoryAddress(ptrHandlerI2C, regToRead);
 80026aa:	78fb      	ldrb	r3, [r7, #3]
 80026ac:	4619      	mov	r1, r3
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff ff6c 	bl	800258c <i2c_sendMemoryAddress>

	/* 4. Enviamos el valor que deseamos escribir */
	i2c_sendDataByte(ptrHandlerI2C, newValue);
 80026b4:	78bb      	ldrb	r3, [r7, #2]
 80026b6:	4619      	mov	r1, r3
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff ff80 	bl	80025be <i2c_sendDataByte>

	/* 5. Generamos la condición de Stop, para que el slave se detenga después de un byte */
	i2c_stopTransaction(ptrHandlerI2C);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff fedc 	bl	800247c <i2c_stopTransaction>
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <PLL_Config>:
#include "PLLDriver.h"

uint32_t HSI_VALUE = 16000000;


void PLL_Config(PLL_Handler_t *ptrPLLHandler){
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]

	// Se selecciona HSI como reloj interno del PLL en vez de un oscilador.
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC);
 80026d4:	4b7e      	ldr	r3, [pc, #504]	; (80028d0 <PLL_Config+0x204>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	4a7d      	ldr	r2, [pc, #500]	; (80028d0 <PLL_Config+0x204>)
 80026da:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80026de:	6053      	str	r3, [r2, #4]

	// Se observa el valor del HSI RDY.
	while( !(RCC->CR & RCC_CR_HSIRDY) );
 80026e0:	bf00      	nop
 80026e2:	4b7b      	ldr	r3, [pc, #492]	; (80028d0 <PLL_Config+0x204>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f9      	beq.n	80026e2 <PLL_Config+0x16>

	// Se inicializa el power enable clock del APB1.
	RCC->APB1ENR |= RCC_APB1RSTR_PWRRST;
 80026ee:	4b78      	ldr	r3, [pc, #480]	; (80028d0 <PLL_Config+0x204>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	4a77      	ldr	r2, [pc, #476]	; (80028d0 <PLL_Config+0x204>)
 80026f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f8:	6413      	str	r3, [r2, #64]	; 0x40


	// Estas líneas adecúan el acceso a la memoria del microcontrolador
	// para comenzar a ejecutar las instrucciones. Ver ACR.
	FLASH->ACR |= 1<<8;
 80026fa:	4b76      	ldr	r3, [pc, #472]	; (80028d4 <PLL_Config+0x208>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a75      	ldr	r2, [pc, #468]	; (80028d4 <PLL_Config+0x208>)
 8002700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002704:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= 1<<9;
 8002706:	4b73      	ldr	r3, [pc, #460]	; (80028d4 <PLL_Config+0x208>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a72      	ldr	r2, [pc, #456]	; (80028d4 <PLL_Config+0x208>)
 800270c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002710:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= 1<<10;
 8002712:	4b70      	ldr	r3, [pc, #448]	; (80028d4 <PLL_Config+0x208>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a6f      	ldr	r2, [pc, #444]	; (80028d4 <PLL_Config+0x208>)
 8002718:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800271c:	6013      	str	r3, [r2, #0]
	 *  los voltajes de las distintas frecuencias que pueden llegar a configurarse.
	 *  Además, deben establecerse diferentes tiempos de espera para cada rango.
	 */

	// Voltajes para las frecuencias dentro de un rango máximo de 64 MHz.
	if(ptrPLLHandler->PLL_Config.PLL_voltage == VOLTAGE_64MHZ){
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10c      	bne.n	8002740 <PLL_Config+0x74>
		// Se toma 0 en el bit 15 y 1 en el bit 14 del PWR para la potencia.
		PWR->CR |= 01<<14;
 8002726:	4b6c      	ldr	r3, [pc, #432]	; (80028d8 <PLL_Config+0x20c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a6b      	ldr	r2, [pc, #428]	; (80028d8 <PLL_Config+0x20c>)
 800272c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002730:	6013      	str	r3, [r2, #0]

		// Se configura el tiempo de espera.
		FLASH->ACR |= 1<<0;
 8002732:	4b68      	ldr	r3, [pc, #416]	; (80028d4 <PLL_Config+0x208>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a67      	ldr	r2, [pc, #412]	; (80028d4 <PLL_Config+0x208>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	e02d      	b.n	800279c <PLL_Config+0xd0>
	}
	else if(ptrPLLHandler->PLL_Config.PLL_voltage == VOLTAGE_84MHZ){
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d10c      	bne.n	8002762 <PLL_Config+0x96>
		// Se toma 1 en el bit 15 y 0 en el bit 14 del PWR para la potencia.
		PWR->CR |= 10<<14;
 8002748:	4b63      	ldr	r3, [pc, #396]	; (80028d8 <PLL_Config+0x20c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a62      	ldr	r2, [pc, #392]	; (80028d8 <PLL_Config+0x20c>)
 800274e:	f443 3320 	orr.w	r3, r3, #163840	; 0x28000
 8002752:	6013      	str	r3, [r2, #0]

		// Se configura el tiempo de espera.
		FLASH->ACR |= 3<<0;
 8002754:	4b5f      	ldr	r3, [pc, #380]	; (80028d4 <PLL_Config+0x208>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a5e      	ldr	r2, [pc, #376]	; (80028d4 <PLL_Config+0x208>)
 800275a:	f043 0303 	orr.w	r3, r3, #3
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	e01c      	b.n	800279c <PLL_Config+0xd0>
	}
	else if(ptrPLLHandler->PLL_Config.PLL_voltage == VOLTAGE_100MHZ){
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d10c      	bne.n	8002784 <PLL_Config+0xb8>
		// Se toma 1 en el bit 15 y 1 en el bit 14 del PWR para la potencia.
		PWR->CR |= 11<<14;
 800276a:	4b5b      	ldr	r3, [pc, #364]	; (80028d8 <PLL_Config+0x20c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a5a      	ldr	r2, [pc, #360]	; (80028d8 <PLL_Config+0x20c>)
 8002770:	f443 3330 	orr.w	r3, r3, #180224	; 0x2c000
 8002774:	6013      	str	r3, [r2, #0]

		// Se configura el tiempo de espera.
		FLASH->ACR |= 5<<0;
 8002776:	4b57      	ldr	r3, [pc, #348]	; (80028d4 <PLL_Config+0x208>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a56      	ldr	r2, [pc, #344]	; (80028d4 <PLL_Config+0x208>)
 800277c:	f043 0305 	orr.w	r3, r3, #5
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	e00b      	b.n	800279c <PLL_Config+0xd0>
	}
	else{
		// Implementamos la máxima frecuencia para el caso por defecto.
		PWR->CR |= 11<<14;
 8002784:	4b54      	ldr	r3, [pc, #336]	; (80028d8 <PLL_Config+0x20c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a53      	ldr	r2, [pc, #332]	; (80028d8 <PLL_Config+0x20c>)
 800278a:	f443 3330 	orr.w	r3, r3, #180224	; 0x2c000
 800278e:	6013      	str	r3, [r2, #0]

		// Tiempo de espera.
		FLASH->ACR |= 5<<0;
 8002790:	4b50      	ldr	r3, [pc, #320]	; (80028d4 <PLL_Config+0x208>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a4f      	ldr	r2, [pc, #316]	; (80028d4 <PLL_Config+0x208>)
 8002796:	f043 0305 	orr.w	r3, r3, #5
 800279a:	6013      	str	r3, [r2, #0]
	}

	/*
	 * El preescaler null debe ser 1 para conseguir la máxima salida de frecuencia.
	 */
	RCC->CFGR |= 0001<<4;
 800279c:	4b4c      	ldr	r3, [pc, #304]	; (80028d0 <PLL_Config+0x204>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	4a4b      	ldr	r2, [pc, #300]	; (80028d0 <PLL_Config+0x204>)
 80027a2:	f043 0310 	orr.w	r3, r3, #16
 80027a6:	6093      	str	r3, [r2, #8]
	 * a 80 MHz que se encuentra evidentemente en un intervalo superior a este valor,
	 * se decide no incluir el primer preescaler que divide en 1 la frecuencia que se
	 * quiere implementar, sino comenzar con la división en 2,4,8,16...
	 */
	// Se divide en 2 el bus 1.
	RCC->CFGR |= (RCC_CFGR_PPRE1_DIV2);
 80027a8:	4b49      	ldr	r3, [pc, #292]	; (80028d0 <PLL_Config+0x204>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	4a48      	ldr	r2, [pc, #288]	; (80028d0 <PLL_Config+0x204>)
 80027ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027b2:	6093      	str	r3, [r2, #8]
	 * a 80 MHz, esta frecuencia se encuentra cómodamente ubicada antes de la
	 * frecuencia máxima del bus de datos, por tanto, el preescaler 0 que mantiene
	 * la frecuencia original, puede implementarse, dividiendo en 1.
	 */
	// Se divide en 1 el bus 2.
	RCC->CFGR |= (RCC_CFGR_PPRE2_DIV1);
 80027b4:	4b46      	ldr	r3, [pc, #280]	; (80028d0 <PLL_Config+0x204>)
 80027b6:	4a46      	ldr	r2, [pc, #280]	; (80028d0 <PLL_Config+0x204>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	6093      	str	r3, [r2, #8]

// Se debe configurar el sistema de manera que cuando la entrada del HSI
// sean 80 MHz, se mantenga.
	// La fuente de reloj del micro se configura sobre el HSI,
	RCC->PLLCFGR |= (0 << 22);
 80027bc:	4b44      	ldr	r3, [pc, #272]	; (80028d0 <PLL_Config+0x204>)
 80027be:	4a44      	ldr	r2, [pc, #272]	; (80028d0 <PLL_Config+0x204>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	6053      	str	r3, [r2, #4]

	// Se divide la entrada de frecuencia en 8, para obtener 2 MHz.
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM_4);
 80027c4:	4b42      	ldr	r3, [pc, #264]	; (80028d0 <PLL_Config+0x204>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	4a41      	ldr	r2, [pc, #260]	; (80028d0 <PLL_Config+0x204>)
 80027ca:	f023 0310 	bic.w	r3, r3, #16
 80027ce:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLM_3);
 80027d0:	4b3f      	ldr	r3, [pc, #252]	; (80028d0 <PLL_Config+0x204>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	4a3e      	ldr	r2, [pc, #248]	; (80028d0 <PLL_Config+0x204>)
 80027d6:	f043 0308 	orr.w	r3, r3, #8
 80027da:	6053      	str	r3, [r2, #4]

	// Se aplica una máscara un poco rudimentaria para garantizar la limpieza del
	// del registro.
	RCC->PLLCFGR &= 0b1111111111111000000000111111;
 80027dc:	4b3c      	ldr	r3, [pc, #240]	; (80028d0 <PLL_Config+0x204>)
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	493b      	ldr	r1, [pc, #236]	; (80028d0 <PLL_Config+0x204>)
 80027e2:	4b3e      	ldr	r3, [pc, #248]	; (80028dc <PLL_Config+0x210>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]
	// Se ecriben los diferentes valores de las frecuencias que se quieren multiplicar.
	/* NOTE que aquí es donde se escriben cada una de las frecuencias dentro del
	 * registro de 9 bits que se tiene dentro del registro PLLCFGR del RCC qur se deciden
	 * aleatoriamente a gusto del usuario dentro del intervalo de voltaje escogido.
	 */
	if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_80MHZ){
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	785b      	ldrb	r3, [r3, #1]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d10c      	bne.n	800280a <PLL_Config+0x13e>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_4);
 80027f0:	4b37      	ldr	r3, [pc, #220]	; (80028d0 <PLL_Config+0x204>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	4a36      	ldr	r2, [pc, #216]	; (80028d0 <PLL_Config+0x204>)
 80027f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027fa:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 80027fc:	4b34      	ldr	r3, [pc, #208]	; (80028d0 <PLL_Config+0x204>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4a33      	ldr	r2, [pc, #204]	; (80028d0 <PLL_Config+0x204>)
 8002802:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002806:	6053      	str	r3, [r2, #4]
 8002808:	e03d      	b.n	8002886 <PLL_Config+0x1ba>
	}else if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_100MHZ){
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	785b      	ldrb	r3, [r3, #1]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d112      	bne.n	8002838 <PLL_Config+0x16c>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_2);
 8002812:	4b2f      	ldr	r3, [pc, #188]	; (80028d0 <PLL_Config+0x204>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4a2e      	ldr	r2, [pc, #184]	; (80028d0 <PLL_Config+0x204>)
 8002818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281c:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_5);
 800281e:	4b2c      	ldr	r3, [pc, #176]	; (80028d0 <PLL_Config+0x204>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4a2b      	ldr	r2, [pc, #172]	; (80028d0 <PLL_Config+0x204>)
 8002824:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002828:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 800282a:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <PLL_Config+0x204>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4a28      	ldr	r2, [pc, #160]	; (80028d0 <PLL_Config+0x204>)
 8002830:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002834:	6053      	str	r3, [r2, #4]
 8002836:	e026      	b.n	8002886 <PLL_Config+0x1ba>
	}else if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_70MHZ){
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	785b      	ldrb	r3, [r3, #1]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d112      	bne.n	8002866 <PLL_Config+0x19a>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_1);
 8002840:	4b23      	ldr	r3, [pc, #140]	; (80028d0 <PLL_Config+0x204>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	4a22      	ldr	r2, [pc, #136]	; (80028d0 <PLL_Config+0x204>)
 8002846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800284a:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_2);
 800284c:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <PLL_Config+0x204>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	4a1f      	ldr	r2, [pc, #124]	; (80028d0 <PLL_Config+0x204>)
 8002852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002856:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 8002858:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <PLL_Config+0x204>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4a1c      	ldr	r2, [pc, #112]	; (80028d0 <PLL_Config+0x204>)
 800285e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002862:	6053      	str	r3, [r2, #4]
 8002864:	e00f      	b.n	8002886 <PLL_Config+0x1ba>
	}else if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_65MHZ){
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	785b      	ldrb	r3, [r3, #1]
 800286a:	2b03      	cmp	r3, #3
 800286c:	d10b      	bne.n	8002886 <PLL_Config+0x1ba>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_0);
 800286e:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <PLL_Config+0x204>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4a17      	ldr	r2, [pc, #92]	; (80028d0 <PLL_Config+0x204>)
 8002874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002878:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <PLL_Config+0x204>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	4a14      	ldr	r2, [pc, #80]	; (80028d0 <PLL_Config+0x204>)
 8002880:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002884:	6053      	str	r3, [r2, #4]
	}
	// Se escoge como factor de reloj principal PLLP el número dos para obtener
	// la salida deseada en cada caso.
	RCC->PLLCFGR |= (00 << 16);
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <PLL_Config+0x204>)
 8002888:	4a11      	ldr	r2, [pc, #68]	; (80028d0 <PLL_Config+0x204>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	6053      	str	r3, [r2, #4]

	/*ACTIVACIÓN DEL PLL CON LOS PARÁMETROS ELEGIDOS ANTERIORMENTE. */
	// Se activa el PLL.
	RCC->CR |= (1<<24);
 800288e:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <PLL_Config+0x204>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a0f      	ldr	r2, [pc, #60]	; (80028d0 <PLL_Config+0x204>)
 8002894:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002898:	6013      	str	r3, [r2, #0]
	// Se da un retardo que indica la activación del PLL.
	while (!(RCC->CR & (1<<25)));
 800289a:	bf00      	nop
 800289c:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <PLL_Config+0x204>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f9      	beq.n	800289c <PLL_Config+0x1d0>
	// Se introduce un 2 dentro del clock source del PLL.
	RCC->CFGR |= (2<<0);
 80028a8:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <PLL_Config+0x204>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4a08      	ldr	r2, [pc, #32]	; (80028d0 <PLL_Config+0x204>)
 80028ae:	f043 0302 	orr.w	r3, r3, #2
 80028b2:	6093      	str	r3, [r2, #8]

	// Aquí se espera a que el PLL esté listo como reloj principal de la configuracion.
	while (!(RCC->CFGR & (2<<2)));
 80028b4:	bf00      	nop
 80028b6:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <PLL_Config+0x204>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f9      	beq.n	80028b6 <PLL_Config+0x1ea>

}// FIN DE LA FUNCIÓN DE CONFIGURACIÓN PARA DISTINTAS FRECUENCIAS.
 80028c2:	bf00      	nop
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40023c00 	.word	0x40023c00
 80028d8:	40007000 	.word	0x40007000
 80028dc:	0fff803f 	.word	0x0fff803f

080028e0 <getConfigPLL>:

// Función para saber el estado del PLL y así poder caracterizar lo demás.
uint32_t getConfigPLL(void){
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
	// Se buscan los valores que están definiendo los valores actuales del reloj PLL
	uint32_t PLLN = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 80028e6:	4b0d      	ldr	r3, [pc, #52]	; (800291c <getConfigPLL+0x3c>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	099b      	lsrs	r3, r3, #6
 80028ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028f0:	60fb      	str	r3, [r7, #12]
	uint32_t PLLM = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos;
 80028f2:	4b0a      	ldr	r3, [pc, #40]	; (800291c <getConfigPLL+0x3c>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028fa:	60bb      	str	r3, [r7, #8]
	// Se hace la operación para saber el valor actual del reloj. (Asume PLLP =2)
	uint32_t clockMicro = (HSI_VALUE / PLLM) * PLLN / 2;
 80028fc:	4b08      	ldr	r3, [pc, #32]	; (8002920 <getConfigPLL+0x40>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	fbb2 f3f3 	udiv	r3, r2, r3
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	fb02 f303 	mul.w	r3, r2, r3
 800290c:	085b      	lsrs	r3, r3, #1
 800290e:	607b      	str	r3, [r7, #4]
	return clockMicro;
 8002910:	687b      	ldr	r3, [r7, #4]

}
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr
 800291c:	40023800 	.word	0x40023800
 8002920:	20000040 	.word	0x20000040

08002924 <pwm_Config>:
 */

#include "PwmDriver.h"

/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if(ptrPwmHandler->ptrTIMx == TIM2){
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002934:	d106      	bne.n	8002944 <pwm_Config+0x20>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002936:	4b59      	ldr	r3, [pc, #356]	; (8002a9c <pwm_Config+0x178>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	4a58      	ldr	r2, [pc, #352]	; (8002a9c <pwm_Config+0x178>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6413      	str	r3, [r2, #64]	; 0x40
 8002942:	e024      	b.n	800298e <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a55      	ldr	r2, [pc, #340]	; (8002aa0 <pwm_Config+0x17c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d106      	bne.n	800295c <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800294e:	4b53      	ldr	r3, [pc, #332]	; (8002a9c <pwm_Config+0x178>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	4a52      	ldr	r2, [pc, #328]	; (8002a9c <pwm_Config+0x178>)
 8002954:	f043 0302 	orr.w	r3, r3, #2
 8002958:	6413      	str	r3, [r2, #64]	; 0x40
 800295a:	e018      	b.n	800298e <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a50      	ldr	r2, [pc, #320]	; (8002aa4 <pwm_Config+0x180>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d106      	bne.n	8002974 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002966:	4b4d      	ldr	r3, [pc, #308]	; (8002a9c <pwm_Config+0x178>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	4a4c      	ldr	r2, [pc, #304]	; (8002a9c <pwm_Config+0x178>)
 800296c:	f043 0304 	orr.w	r3, r3, #4
 8002970:	6413      	str	r3, [r2, #64]	; 0x40
 8002972:	e00c      	b.n	800298e <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a4b      	ldr	r2, [pc, #300]	; (8002aa8 <pwm_Config+0x184>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d106      	bne.n	800298c <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800297e:	4b47      	ldr	r3, [pc, #284]	; (8002a9c <pwm_Config+0x178>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	4a46      	ldr	r2, [pc, #280]	; (8002a9c <pwm_Config+0x178>)
 8002984:	f043 0308 	orr.w	r3, r3, #8
 8002988:	6413      	str	r3, [r2, #64]	; 0x40
 800298a:	e000      	b.n	800298e <pwm_Config+0x6a>
	}
	else{
		__NOP();
 800298c:	bf00      	nop
	}

	/* 1. Cargamos la frecuencia deseada */
	setFrequency(ptrPwmHandler);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f8dc 	bl	8002b4c <setFrequency>

	/* 2. Cargamos el valor del dutty-Cycle*/
	setDuttyCycle(ptrPwmHandler);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f8ed 	bl	8002b74 <setDuttyCycle>

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0210 	bic.w	r2, r2, #16
 80029a8:	601a      	str	r2, [r3, #0]
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	791b      	ldrb	r3, [r3, #4]
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d86e      	bhi.n	8002a90 <pwm_Config+0x16c>
 80029b2:	a201      	add	r2, pc, #4	; (adr r2, 80029b8 <pwm_Config+0x94>)
 80029b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b8:	080029c9 	.word	0x080029c9
 80029bc:	080029fb 	.word	0x080029fb
 80029c0:	08002a2d 	.word	0x08002a2d
 80029c4:	08002a5f 	.word	0x08002a5f
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~(TIM_CCMR1_CC1S);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699a      	ldr	r2, [r3, #24]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0203 	bic.w	r2, r2, #3
 80029d6:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC1M_Pos);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699a      	ldr	r2, [r3, #24]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80029e6:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699a      	ldr	r2, [r3, #24]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0208 	orr.w	r2, r2, #8
 80029f6:	619a      	str	r2, [r3, #24]

		break;
 80029f8:	e04b      	b.n	8002a92 <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~(TIM_CCMR1_CC2S);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699a      	ldr	r2, [r3, #24]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a08:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC2M_Pos);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699a      	ldr	r2, [r3, #24]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8002a18:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	699a      	ldr	r2, [r3, #24]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a28:	619a      	str	r2, [r3, #24]
		break;
 8002a2a:	e032      	b.n	8002a92 <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_3:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~(TIM_CCMR2_CC3S);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	69da      	ldr	r2, [r3, #28]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0203 	bic.w	r2, r2, #3
 8002a3a:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC3M_Pos);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	69da      	ldr	r2, [r3, #28]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002a4a:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	69da      	ldr	r2, [r3, #28]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0208 	orr.w	r2, r2, #8
 8002a5a:	61da      	str	r2, [r3, #28]
		break;
 8002a5c:	e019      	b.n	8002a92 <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_4:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~(TIM_CCMR2_CC4S);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	69da      	ldr	r2, [r3, #28]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a6c:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC4M_Pos);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	69da      	ldr	r2, [r3, #28]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8002a7c:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	69da      	ldr	r2, [r3, #28]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a8c:	61da      	str	r2, [r3, #28]
		break;
 8002a8e:	e000      	b.n	8002a92 <pwm_Config+0x16e>
	}

	default:{
		break;
 8002a90:	bf00      	nop

	/* 6. Activamos la salida seleccionada */
	enableOutput(ptrPwmHandler);

	}// fin del switch-case
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40000800 	.word	0x40000800
 8002aa8:	40000c00 	.word	0x40000c00

08002aac <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr
	...

08002ad0 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
void enableOutput(PWM_Handler_t *ptrPwmHandler) {
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
	switch (ptrPwmHandler->config.channel) {
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	791b      	ldrb	r3, [r3, #4]
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d82f      	bhi.n	8002b40 <enableOutput+0x70>
 8002ae0:	a201      	add	r2, pc, #4	; (adr r2, 8002ae8 <enableOutput+0x18>)
 8002ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae6:	bf00      	nop
 8002ae8:	08002af9 	.word	0x08002af9
 8002aec:	08002b0b 	.word	0x08002b0b
 8002af0:	08002b1d 	.word	0x08002b1d
 8002af4:	08002b2f 	.word	0x08002b2f
	case PWM_CHANNEL_1: {
		// Activamos la salida del canal 1
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6a1a      	ldr	r2, [r3, #32]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0201 	orr.w	r2, r2, #1
 8002b06:	621a      	str	r2, [r3, #32]
		break;
 8002b08:	e01b      	b.n	8002b42 <enableOutput+0x72>
	}

	case PWM_CHANNEL_2: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6a1a      	ldr	r2, [r3, #32]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0210 	orr.w	r2, r2, #16
 8002b18:	621a      	str	r2, [r3, #32]
		break;
 8002b1a:	e012      	b.n	8002b42 <enableOutput+0x72>
	}

	case PWM_CHANNEL_3: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6a1a      	ldr	r2, [r3, #32]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b2a:	621a      	str	r2, [r3, #32]

		break;
 8002b2c:	e009      	b.n	8002b42 <enableOutput+0x72>
	}

	case PWM_CHANNEL_4: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6a1a      	ldr	r2, [r3, #32]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b3c:	621a      	str	r2, [r3, #32]

		break;
 8002b3e:	e000      	b.n	8002b42 <enableOutput+0x72>
	}

	default: {
		break;
 8002b40:	bf00      	nop
	}
	}
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <setFrequency>:
/*
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler -1;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	3a01      	subs	r2, #1
 8002b5e:	629a      	str	r2, [r3, #40]	; 0x28

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.
	ptrPwmHandler->ptrTIMx->ARR = ptrPwmHandler->config.periodo;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	899a      	ldrh	r2, [r3, #12]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
    setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	791b      	ldrb	r3, [r3, #4]
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d823      	bhi.n	8002bcc <setDuttyCycle+0x58>
 8002b84:	a201      	add	r2, pc, #4	; (adr r2, 8002b8c <setDuttyCycle+0x18>)
 8002b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8a:	bf00      	nop
 8002b8c:	08002b9d 	.word	0x08002b9d
 8002b90:	08002ba9 	.word	0x08002ba9
 8002b94:	08002bb5 	.word	0x08002bb5
 8002b98:	08002bc1 	.word	0x08002bc1
	case PWM_CHANNEL_1:{
		ptrPwmHandler->ptrTIMx->CCR1 = ptrPwmHandler->config.duttyCicle;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	89da      	ldrh	r2, [r3, #14]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 8002ba6:	e012      	b.n	8002bce <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_2:{
		ptrPwmHandler->ptrTIMx->CCR2 = ptrPwmHandler->config.duttyCicle;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	89da      	ldrh	r2, [r3, #14]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8002bb2:	e00c      	b.n	8002bce <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_3:{
		ptrPwmHandler->ptrTIMx->CCR3 = ptrPwmHandler->config.duttyCicle;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	89da      	ldrh	r2, [r3, #14]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8002bbe:	e006      	b.n	8002bce <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_4:{
		ptrPwmHandler->ptrTIMx->CCR4 = ptrPwmHandler->config.duttyCicle;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	89da      	ldrh	r2, [r3, #14]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8002bca:	e000      	b.n	8002bce <setDuttyCycle+0x5a>
	}

	default:{
		break;
 8002bcc:	bf00      	nop
	}

	}// fin del switch-case

}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <updateDuttyCycle>:


/* Función para actualizar el Dutty, funciona de la mano con setDuttyCycle */
void updateDuttyCycle(PWM_Handler_t *ptrPwmHandler, uint16_t newDutty){
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	807b      	strh	r3, [r7, #2]
	// Actualizamos el registro que manipula el dutty
	ptrPwmHandler->config.duttyCicle = newDutty;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	887a      	ldrh	r2, [r7, #2]
 8002be8:	81da      	strh	r2, [r3, #14]

	// Llamamos a la fucnión que cambia el dutty y cargamos el nuevo valor
	setDuttyCycle(ptrPwmHandler);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff ffc2 	bl	8002b74 <setDuttyCycle>
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <__NVIC_EnableIRQ>:
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	db0b      	blt.n	8002c22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	f003 021f 	and.w	r2, r3, #31
 8002c10:	4906      	ldr	r1, [pc, #24]	; (8002c2c <__NVIC_EnableIRQ+0x34>)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	2001      	movs	r0, #1
 8002c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr
 8002c2c:	e000e100 	.word	0xe000e100

08002c30 <USART_Config>:
 */

// Esta variable es necesaria para las interrupciones del USART 2 y 6.
uint8_t auxRxData = 0;

void USART_Config(USART_Handler_t *ptrUsartHandler){
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c38:	b672      	cpsid	i
}
 8002c3a:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a8c      	ldr	r2, [pc, #560]	; (8002e74 <USART_Config+0x244>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d106      	bne.n	8002c54 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8002c46:	4b8c      	ldr	r3, [pc, #560]	; (8002e78 <USART_Config+0x248>)
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	4a8b      	ldr	r2, [pc, #556]	; (8002e78 <USART_Config+0x248>)
 8002c4c:	f043 0310 	orr.w	r3, r3, #16
 8002c50:	6453      	str	r3, [r2, #68]	; 0x44
 8002c52:	e016      	b.n	8002c82 <USART_Config+0x52>
	}else if(ptrUsartHandler->ptrUSARTx == USART6){
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a88      	ldr	r2, [pc, #544]	; (8002e7c <USART_Config+0x24c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d106      	bne.n	8002c6c <USART_Config+0x3c>
		/*Configuramos el USART 6 que está en el mismo bus del USART 1 */
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8002c5e:	4b86      	ldr	r3, [pc, #536]	; (8002e78 <USART_Config+0x248>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	4a85      	ldr	r2, [pc, #532]	; (8002e78 <USART_Config+0x248>)
 8002c64:	f043 0320 	orr.w	r3, r3, #32
 8002c68:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6a:	e00a      	b.n	8002c82 <USART_Config+0x52>
		// Luego el USART 2 que está en el bus 1.
	}else if(ptrUsartHandler->ptrUSARTx == USART2){
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a83      	ldr	r2, [pc, #524]	; (8002e80 <USART_Config+0x250>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d105      	bne.n	8002c82 <USART_Config+0x52>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8002c76:	4b80      	ldr	r3, [pc, #512]	; (8002e78 <USART_Config+0x248>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	4a7f      	ldr	r2, [pc, #508]	; (8002e78 <USART_Config+0x248>)
 8002c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c80:	6413      	str	r3, [r2, #64]	; 0x40
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2200      	movs	r2, #0
 8002c88:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	79db      	ldrb	r3, [r3, #7]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d025      	beq.n	8002ce6 <USART_Config+0xb6>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	79db      	ldrb	r3, [r3, #7]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d110      	bne.n	8002cc4 <USART_Config+0x94>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cb0:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	e018      	b.n	8002cf6 <USART_Config+0xc6>

		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd2:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ce2:	60da      	str	r2, [r3, #12]
 8002ce4:	e007      	b.n	8002cf6 <USART_Config+0xc6>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf4:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize ==USART_DATASIZE_8BIT){
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	799b      	ldrb	r3, [r3, #6]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d115      	bne.n	8002d2a <USART_Config+0xfa>

	    	// Inicialmente debe corroborarse si se quiere o no la paridad.
	    	if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_NONE){
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	79db      	ldrb	r3, [r3, #7]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d108      	bne.n	8002d18 <USART_Config+0xe8>
	    		// Si se quieren datos de 8 bits.
	    		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d14:	60da      	str	r2, [r3, #12]
 8002d16:	e010      	b.n	8002d3a <USART_Config+0x10a>
	    	}
	    	else{
	    		// Si la partidad esta activada, se agrega un BIT adicional.
	    		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d26:	60da      	str	r2, [r3, #12]
 8002d28:	e007      	b.n	8002d3a <USART_Config+0x10a>
	    	}
	    }
	    else{
	    	// Se configuran 9 bits para el tamaño.
	    	ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d38:	60da      	str	r2, [r3, #12]
	    }

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	7a1b      	ldrb	r3, [r3, #8]
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d84e      	bhi.n	8002de0 <USART_Config+0x1b0>
 8002d42:	a201      	add	r2, pc, #4	; (adr r2, 8002d48 <USART_Config+0x118>)
 8002d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d48:	08002d59 	.word	0x08002d59
 8002d4c:	08002d7b 	.word	0x08002d7b
 8002d50:	08002d9d 	.word	0x08002d9d
 8002d54:	08002dbf 	.word	0x08002dbf
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691a      	ldr	r2, [r3, #16]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d66:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d76:	611a      	str	r2, [r3, #16]
		break;
 8002d78:	e043      	b.n	8002e02 <USART_Config+0x1d2>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d88:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d98:	611a      	str	r2, [r3, #16]
		break;
 8002d9a:	e032      	b.n	8002e02 <USART_Config+0x1d2>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002daa:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dba:	611a      	str	r2, [r3, #16]
		break;
 8002dbc:	e021      	b.n	8002e02 <USART_Config+0x1d2>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002dcc:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ddc:	611a      	str	r2, [r3, #16]
		break;
 8002dde:	e010      	b.n	8002e02 <USART_Config+0x1d2>
	}
	default: {
		// En el caso por defecto seleccionamos 1 bit de parada
		// Escriba acá su código
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dee:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691a      	ldr	r2, [r3, #16]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dfe:	611a      	str	r2, [r3, #16]
		break;
 8002e00:	bf00      	nop
	 * decida utilizar el usuario. La función getConfig() retorna esta
	 * frecuencia en que se encuentra actualmente el reloj del sistema PLL,
	 * por tanto, se considera un condicional que incluye los cálculos para
	 * la frecuencia de 80 MHz y por defecto recurre a la frecuencia natural.
	 */
	if(actualFrecuency == 80000000){
 8002e02:	f7ff fd6d 	bl	80028e0 <getConfigPLL>
 8002e06:	4603      	mov	r3, r0
 8002e08:	4a1e      	ldr	r2, [pc, #120]	; (8002e84 <USART_Config+0x254>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d11d      	bne.n	8002e4a <USART_Config+0x21a>
		// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
		if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	795b      	ldrb	r3, [r3, #5]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d105      	bne.n	8002e22 <USART_Config+0x1f2>
			// El valor a cargar es 520.833 -> Mantiza = 520,fraction = 0.833
			// Mantiza = 520 = 0x208, fraction = 16 * 0.833 = 13
			// Valor a cargar 0x208D
			// Configurando el Baudrate generator para una velocidad de 9600bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x20F5;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f242 02f5 	movw	r2, #8437	; 0x20f5
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	e03a      	b.n	8002e98 <USART_Config+0x268>
		}

		else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	795b      	ldrb	r3, [r3, #5]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d105      	bne.n	8002e36 <USART_Config+0x206>
			// El valor a cargar es 260.4166 -> Mantiza = 260,fraction = 0.4166
			// Mantiza = 260 = 0x104, fraction = 16 * 0.4166 = 7
			// Escriba acá su código y los comentarios que faltan
			// Valor a cargar 0x1047
			ptrUsartHandler->ptrUSARTx->BRR = 0x107B;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f241 027b 	movw	r2, #4219	; 0x107b
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	e030      	b.n	8002e98 <USART_Config+0x268>
		}

		else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	795b      	ldrb	r3, [r3, #5]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d12c      	bne.n	8002e98 <USART_Config+0x268>
			// Escriba acá su código y los comentarios que faltan
			// El valor a cargar es 43.402 -> Mantiza = 43,fraction = 0.402
			// Mantiza = 43 = 0x2B, fraction = 16 * 0.402 = 6.
			ptrUsartHandler->ptrUSARTx->BRR = 0x2BF;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f240 22bf 	movw	r2, #703	; 0x2bf
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	e026      	b.n	8002e98 <USART_Config+0x268>
		}
	// Caso por defecto de 16 MHz.
	}else{
		// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
		if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	795b      	ldrb	r3, [r3, #5]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d105      	bne.n	8002e5e <USART_Config+0x22e>
			// El valor a cargar es 104.1875 -> Mantiza = 104,fraction = 0.1875
			// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
			// Valor a cargar 0x0683
			// Configurando el Baudrate generator para una velocidad de 9600bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f240 6283 	movw	r2, #1667	; 0x683
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	e01c      	b.n	8002e98 <USART_Config+0x268>
		}

		else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	795b      	ldrb	r3, [r3, #5]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d110      	bne.n	8002e88 <USART_Config+0x258>
			// El valor a cargar es 52.0625 -> Mantiza = 52,fraction = 0.0625
			// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
			// Escriba acá su código y los comentarios que faltan
			// Valor a cargar 0x0341
			ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f240 3241 	movw	r2, #833	; 0x341
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	e012      	b.n	8002e98 <USART_Config+0x268>
 8002e72:	bf00      	nop
 8002e74:	40011000 	.word	0x40011000
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40011400 	.word	0x40011400
 8002e80:	40004400 	.word	0x40004400
 8002e84:	04c4b400 	.word	0x04c4b400
		}

		else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	795b      	ldrb	r3, [r3, #5]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d103      	bne.n	8002e98 <USART_Config+0x268>
			// Escriba acá su código y los comentarios que faltan
			// El valor a cargar es 8.6875 -> Mantiza = 8,fraction = 0.6875
			// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11 = B.
			ptrUsartHandler->ptrUSARTx->BRR = 0x008B;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	228b      	movs	r2, #139	; 0x8b
 8002e96:	609a      	str	r2, [r3, #8]
		}
	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	791b      	ldrb	r3, [r3, #4]
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d847      	bhi.n	8002f30 <USART_Config+0x300>
 8002ea0:	a201      	add	r2, pc, #4	; (adr r2, 8002ea8 <USART_Config+0x278>)
 8002ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea6:	bf00      	nop
 8002ea8:	08002eb9 	.word	0x08002eb9
 8002eac:	08002ecb 	.word	0x08002ecb
 8002eb0:	08002edd 	.word	0x08002edd
 8002eb4:	08002eff 	.word	0x08002eff
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_TE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0208 	orr.w	r2, r2, #8
 8002ec6:	60da      	str	r2, [r3, #12]
		break;
 8002ec8:	e04b      	b.n	8002f62 <USART_Config+0x332>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_RE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 0204 	orr.w	r2, r2, #4
 8002ed8:	60da      	str	r2, [r3, #12]
		break;
 8002eda:	e042      	b.n	8002f62 <USART_Config+0x332>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmision como recepcion
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_TE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0208 	orr.w	r2, r2, #8
 8002eea:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_RE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0204 	orr.w	r2, r2, #4
 8002efa:	60da      	str	r2, [r3, #12]
		break;
 8002efc:	e031      	b.n	8002f62 <USART_Config+0x332>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		// Escriba acá su código
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0204 	bic.w	r2, r2, #4
 8002f0c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0208 	bic.w	r2, r2, #8
 8002f1c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f2c:	60da      	str	r2, [r3, #12]
		break;
 8002f2e:	e018      	b.n	8002f62 <USART_Config+0x332>
	}

	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0204 	bic.w	r2, r2, #4
 8002f3e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0208 	bic.w	r2, r2, #8
 8002f4e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f5e:	60da      	str	r2, [r3, #12]
		break;
 8002f60:	bf00      	nop
	}
	}

	// 2.7 Activamos el módulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	791b      	ldrb	r3, [r3, #4]
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d007      	beq.n	8002f7a <USART_Config+0x34a>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f78:	60da      	str	r2, [r3, #12]
	}
	// Se verifica la activación de la interrupcion Rx
	if (ptrUsartHandler->ptrUSARTx == USART1){
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a28      	ldr	r2, [pc, #160]	; (8003020 <USART_Config+0x3f0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d03a      	beq.n	8002ffa <USART_Config+0x3ca>
	}

	/* 1.2 Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2) {
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a26      	ldr	r2, [pc, #152]	; (8003024 <USART_Config+0x3f4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d118      	bne.n	8002fc0 <USART_Config+0x390>
		if (ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE) {
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	7a5b      	ldrb	r3, [r3, #9]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d10b      	bne.n	8002fae <USART_Config+0x37e>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 0220 	orr.w	r2, r2, #32
 8002fa4:	60da      	str	r2, [r3, #12]
			NVIC_EnableIRQ(USART2_IRQn);
 8002fa6:	2026      	movs	r0, #38	; 0x26
 8002fa8:	f7ff fe26 	bl	8002bf8 <__NVIC_EnableIRQ>
 8002fac:	e025      	b.n	8002ffa <USART_Config+0x3ca>
		} else {
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0220 	bic.w	r2, r2, #32
 8002fbc:	60da      	str	r2, [r3, #12]
 8002fbe:	e01c      	b.n	8002ffa <USART_Config+0x3ca>
		}
	}

	/* 1.3 Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6) {
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a18      	ldr	r2, [pc, #96]	; (8003028 <USART_Config+0x3f8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d117      	bne.n	8002ffa <USART_Config+0x3ca>
		if (ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE) {
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	7a5b      	ldrb	r3, [r3, #9]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d10b      	bne.n	8002fea <USART_Config+0x3ba>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0220 	orr.w	r2, r2, #32
 8002fe0:	60da      	str	r2, [r3, #12]
			NVIC_EnableIRQ(USART6_IRQn);
 8002fe2:	2047      	movs	r0, #71	; 0x47
 8002fe4:	f7ff fe08 	bl	8002bf8 <__NVIC_EnableIRQ>
 8002fe8:	e007      	b.n	8002ffa <USART_Config+0x3ca>
		} else {
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0220 	bic.w	r2, r2, #32
 8002ff8:	60da      	str	r2, [r3, #12]
		}
	}

	// 2.8 Activamos el módulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	791b      	ldrb	r3, [r3, #4]
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	d007      	beq.n	8003012 <USART_Config+0x3e2>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003010:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8003012:	b662      	cpsie	i
}
 8003014:	bf00      	nop
	}

	// Activamos las interrupciones globales
	__enable_irq();
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40011000 	.word	0x40011000
 8003024:	40004400 	.word	0x40004400
 8003028:	40011400 	.word	0x40011400

0800302c <usart2Rx_Callback>:

/* Similar a como se hizo con las EXTI, se crean los callbacks para los USART */

__attribute__((weak)) void usart2Rx_Callback(void){
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the usart2Rx_Callback could be implemented in the main file
	   */
	__NOP();
 8003030:	bf00      	nop
}
 8003032:	bf00      	nop
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr

0800303a <writeChar>:
	   */
	__NOP();
}

/* funcion para escribir un solo char */
int writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8003044:	e000      	b.n	8003048 <writeChar+0xe>
		__NOP();
 8003046:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f7      	beq.n	8003046 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	605a      	str	r2, [r3, #4]

	return dataToSend;
 800305e:	683b      	ldr	r3, [r7, #0]
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr

0800306a <writeMsg>:

// función para escribir un mensaje
void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 800306a:	b580      	push	{r7, lr}
 800306c:	b082      	sub	sp, #8
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
	while(*msgToSend != '\0'){
 8003074:	e008      	b.n	8003088 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	4619      	mov	r1, r3
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff ffdc 	bl	800303a <writeChar>
		msgToSend++;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	3301      	adds	r3, #1
 8003086:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1f2      	bne.n	8003076 <writeMsg+0xc>
	}
}
 8003090:	bf00      	nop
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <getRxData>:

// función auxiliar
uint8_t getRxData(void){
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
	return auxRxData;
 80030a0:	4b02      	ldr	r3, [pc, #8]	; (80030ac <getRxData+0x10>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr
 80030ac:	20006170 	.word	0x20006170

080030b0 <USART2_IRQHandler>:

/* INTERRUPCIONES DEL USART */
// Se debe crear una variable auxiliar para la lectura que se declara al inicio.

/* Para el USART 2 */
void USART2_IRQHandler(void){
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
	// Se evalúa si la interrupción que se dio es por RX
	if(USART2->SR & USART_SR_RXNE){
 80030b4:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <USART2_IRQHandler+0x30>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00c      	beq.n	80030da <USART2_IRQHandler+0x2a>
		USART2->SR &= ~USART_SR_RXNE;
 80030c0:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <USART2_IRQHandler+0x30>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a06      	ldr	r2, [pc, #24]	; (80030e0 <USART2_IRQHandler+0x30>)
 80030c6:	f023 0320 	bic.w	r3, r3, #32
 80030ca:	6013      	str	r3, [r2, #0]
		auxRxData = (uint8_t) USART2->DR;
 80030cc:	4b04      	ldr	r3, [pc, #16]	; (80030e0 <USART2_IRQHandler+0x30>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <USART2_IRQHandler+0x34>)
 80030d4:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 80030d6:	f7ff ffa9 	bl	800302c <usart2Rx_Callback>
	}
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40004400 	.word	0x40004400
 80030e4:	20006170 	.word	0x20006170

080030e8 <USART6_IRQHandler>:

/* Para el USART 6 */
void USART6_IRQHandler(void){
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
	// Evaluamos que la interrupción que se dio es por RX
	if(USART6->SR & USART_SR_RXNE){
 80030ec:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <USART6_IRQHandler+0x30>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0320 	and.w	r3, r3, #32
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00c      	beq.n	8003112 <USART6_IRQHandler+0x2a>
		USART6->SR &= ~USART_SR_RXNE;
 80030f8:	4b07      	ldr	r3, [pc, #28]	; (8003118 <USART6_IRQHandler+0x30>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a06      	ldr	r2, [pc, #24]	; (8003118 <USART6_IRQHandler+0x30>)
 80030fe:	f023 0320 	bic.w	r3, r3, #32
 8003102:	6013      	str	r3, [r2, #0]
		auxRxData = (uint8_t) USART6->DR;
 8003104:	4b04      	ldr	r3, [pc, #16]	; (8003118 <USART6_IRQHandler+0x30>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	b2da      	uxtb	r2, r3
 800310a:	4b04      	ldr	r3, [pc, #16]	; (800311c <USART6_IRQHandler+0x34>)
 800310c:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 800310e:	f7fe fe6d 	bl	8001dec <usart6Rx_Callback>
	}
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40011400 	.word	0x40011400
 800311c:	20006170 	.word	0x20006170

08003120 <__libc_init_array>:
 8003120:	b570      	push	{r4, r5, r6, lr}
 8003122:	4d0d      	ldr	r5, [pc, #52]	; (8003158 <__libc_init_array+0x38>)
 8003124:	4c0d      	ldr	r4, [pc, #52]	; (800315c <__libc_init_array+0x3c>)
 8003126:	1b64      	subs	r4, r4, r5
 8003128:	10a4      	asrs	r4, r4, #2
 800312a:	2600      	movs	r6, #0
 800312c:	42a6      	cmp	r6, r4
 800312e:	d109      	bne.n	8003144 <__libc_init_array+0x24>
 8003130:	4d0b      	ldr	r5, [pc, #44]	; (8003160 <__libc_init_array+0x40>)
 8003132:	4c0c      	ldr	r4, [pc, #48]	; (8003164 <__libc_init_array+0x44>)
 8003134:	f004 fc8c 	bl	8007a50 <_init>
 8003138:	1b64      	subs	r4, r4, r5
 800313a:	10a4      	asrs	r4, r4, #2
 800313c:	2600      	movs	r6, #0
 800313e:	42a6      	cmp	r6, r4
 8003140:	d105      	bne.n	800314e <__libc_init_array+0x2e>
 8003142:	bd70      	pop	{r4, r5, r6, pc}
 8003144:	f855 3b04 	ldr.w	r3, [r5], #4
 8003148:	4798      	blx	r3
 800314a:	3601      	adds	r6, #1
 800314c:	e7ee      	b.n	800312c <__libc_init_array+0xc>
 800314e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003152:	4798      	blx	r3
 8003154:	3601      	adds	r6, #1
 8003156:	e7f2      	b.n	800313e <__libc_init_array+0x1e>
 8003158:	0800803c 	.word	0x0800803c
 800315c:	0800803c 	.word	0x0800803c
 8003160:	0800803c 	.word	0x0800803c
 8003164:	08008040 	.word	0x08008040

08003168 <memset>:
 8003168:	4402      	add	r2, r0
 800316a:	4603      	mov	r3, r0
 800316c:	4293      	cmp	r3, r2
 800316e:	d100      	bne.n	8003172 <memset+0xa>
 8003170:	4770      	bx	lr
 8003172:	f803 1b01 	strb.w	r1, [r3], #1
 8003176:	e7f9      	b.n	800316c <memset+0x4>

08003178 <__cvt>:
 8003178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800317c:	b088      	sub	sp, #32
 800317e:	2b00      	cmp	r3, #0
 8003180:	461f      	mov	r7, r3
 8003182:	4614      	mov	r4, r2
 8003184:	bfb8      	it	lt
 8003186:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800318a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800318c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800318e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003192:	bfb6      	itet	lt
 8003194:	461f      	movlt	r7, r3
 8003196:	2300      	movge	r3, #0
 8003198:	232d      	movlt	r3, #45	; 0x2d
 800319a:	7013      	strb	r3, [r2, #0]
 800319c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800319e:	f023 0820 	bic.w	r8, r3, #32
 80031a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80031a6:	d005      	beq.n	80031b4 <__cvt+0x3c>
 80031a8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80031ac:	d100      	bne.n	80031b0 <__cvt+0x38>
 80031ae:	3501      	adds	r5, #1
 80031b0:	2302      	movs	r3, #2
 80031b2:	e000      	b.n	80031b6 <__cvt+0x3e>
 80031b4:	2303      	movs	r3, #3
 80031b6:	aa07      	add	r2, sp, #28
 80031b8:	9204      	str	r2, [sp, #16]
 80031ba:	aa06      	add	r2, sp, #24
 80031bc:	e9cd a202 	strd	sl, r2, [sp, #8]
 80031c0:	e9cd 3500 	strd	r3, r5, [sp]
 80031c4:	4622      	mov	r2, r4
 80031c6:	463b      	mov	r3, r7
 80031c8:	f001 fd7a 	bl	8004cc0 <_dtoa_r>
 80031cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80031d0:	4606      	mov	r6, r0
 80031d2:	d102      	bne.n	80031da <__cvt+0x62>
 80031d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80031d6:	07db      	lsls	r3, r3, #31
 80031d8:	d522      	bpl.n	8003220 <__cvt+0xa8>
 80031da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80031de:	eb06 0905 	add.w	r9, r6, r5
 80031e2:	d110      	bne.n	8003206 <__cvt+0x8e>
 80031e4:	7833      	ldrb	r3, [r6, #0]
 80031e6:	2b30      	cmp	r3, #48	; 0x30
 80031e8:	d10a      	bne.n	8003200 <__cvt+0x88>
 80031ea:	2200      	movs	r2, #0
 80031ec:	2300      	movs	r3, #0
 80031ee:	4620      	mov	r0, r4
 80031f0:	4639      	mov	r1, r7
 80031f2:	f7fd fd25 	bl	8000c40 <__aeabi_dcmpeq>
 80031f6:	b918      	cbnz	r0, 8003200 <__cvt+0x88>
 80031f8:	f1c5 0501 	rsb	r5, r5, #1
 80031fc:	f8ca 5000 	str.w	r5, [sl]
 8003200:	f8da 3000 	ldr.w	r3, [sl]
 8003204:	4499      	add	r9, r3
 8003206:	2200      	movs	r2, #0
 8003208:	2300      	movs	r3, #0
 800320a:	4620      	mov	r0, r4
 800320c:	4639      	mov	r1, r7
 800320e:	f7fd fd17 	bl	8000c40 <__aeabi_dcmpeq>
 8003212:	b108      	cbz	r0, 8003218 <__cvt+0xa0>
 8003214:	f8cd 901c 	str.w	r9, [sp, #28]
 8003218:	2230      	movs	r2, #48	; 0x30
 800321a:	9b07      	ldr	r3, [sp, #28]
 800321c:	454b      	cmp	r3, r9
 800321e:	d307      	bcc.n	8003230 <__cvt+0xb8>
 8003220:	9b07      	ldr	r3, [sp, #28]
 8003222:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003224:	1b9b      	subs	r3, r3, r6
 8003226:	4630      	mov	r0, r6
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	b008      	add	sp, #32
 800322c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003230:	1c59      	adds	r1, r3, #1
 8003232:	9107      	str	r1, [sp, #28]
 8003234:	701a      	strb	r2, [r3, #0]
 8003236:	e7f0      	b.n	800321a <__cvt+0xa2>

08003238 <__exponent>:
 8003238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800323a:	4603      	mov	r3, r0
 800323c:	2900      	cmp	r1, #0
 800323e:	bfb8      	it	lt
 8003240:	4249      	neglt	r1, r1
 8003242:	f803 2b02 	strb.w	r2, [r3], #2
 8003246:	bfb4      	ite	lt
 8003248:	222d      	movlt	r2, #45	; 0x2d
 800324a:	222b      	movge	r2, #43	; 0x2b
 800324c:	2909      	cmp	r1, #9
 800324e:	7042      	strb	r2, [r0, #1]
 8003250:	dd2a      	ble.n	80032a8 <__exponent+0x70>
 8003252:	f10d 0407 	add.w	r4, sp, #7
 8003256:	46a4      	mov	ip, r4
 8003258:	270a      	movs	r7, #10
 800325a:	46a6      	mov	lr, r4
 800325c:	460a      	mov	r2, r1
 800325e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003262:	fb07 1516 	mls	r5, r7, r6, r1
 8003266:	3530      	adds	r5, #48	; 0x30
 8003268:	2a63      	cmp	r2, #99	; 0x63
 800326a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800326e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003272:	4631      	mov	r1, r6
 8003274:	dcf1      	bgt.n	800325a <__exponent+0x22>
 8003276:	3130      	adds	r1, #48	; 0x30
 8003278:	f1ae 0502 	sub.w	r5, lr, #2
 800327c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003280:	1c44      	adds	r4, r0, #1
 8003282:	4629      	mov	r1, r5
 8003284:	4561      	cmp	r1, ip
 8003286:	d30a      	bcc.n	800329e <__exponent+0x66>
 8003288:	f10d 0209 	add.w	r2, sp, #9
 800328c:	eba2 020e 	sub.w	r2, r2, lr
 8003290:	4565      	cmp	r5, ip
 8003292:	bf88      	it	hi
 8003294:	2200      	movhi	r2, #0
 8003296:	4413      	add	r3, r2
 8003298:	1a18      	subs	r0, r3, r0
 800329a:	b003      	add	sp, #12
 800329c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800329e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80032a6:	e7ed      	b.n	8003284 <__exponent+0x4c>
 80032a8:	2330      	movs	r3, #48	; 0x30
 80032aa:	3130      	adds	r1, #48	; 0x30
 80032ac:	7083      	strb	r3, [r0, #2]
 80032ae:	70c1      	strb	r1, [r0, #3]
 80032b0:	1d03      	adds	r3, r0, #4
 80032b2:	e7f1      	b.n	8003298 <__exponent+0x60>

080032b4 <_printf_float>:
 80032b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032b8:	b091      	sub	sp, #68	; 0x44
 80032ba:	460c      	mov	r4, r1
 80032bc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80032c0:	4616      	mov	r6, r2
 80032c2:	461f      	mov	r7, r3
 80032c4:	4605      	mov	r5, r0
 80032c6:	f002 fe55 	bl	8005f74 <_localeconv_r>
 80032ca:	6803      	ldr	r3, [r0, #0]
 80032cc:	9309      	str	r3, [sp, #36]	; 0x24
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fc ff86 	bl	80001e0 <strlen>
 80032d4:	2300      	movs	r3, #0
 80032d6:	930e      	str	r3, [sp, #56]	; 0x38
 80032d8:	f8d8 3000 	ldr.w	r3, [r8]
 80032dc:	900a      	str	r0, [sp, #40]	; 0x28
 80032de:	3307      	adds	r3, #7
 80032e0:	f023 0307 	bic.w	r3, r3, #7
 80032e4:	f103 0208 	add.w	r2, r3, #8
 80032e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80032ec:	f8d4 b000 	ldr.w	fp, [r4]
 80032f0:	f8c8 2000 	str.w	r2, [r8]
 80032f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80032fc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003300:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003304:	930b      	str	r3, [sp, #44]	; 0x2c
 8003306:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003308:	4b9c      	ldr	r3, [pc, #624]	; (800357c <_printf_float+0x2c8>)
 800330a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800330e:	4640      	mov	r0, r8
 8003310:	f7fd fcc8 	bl	8000ca4 <__aeabi_dcmpun>
 8003314:	bb70      	cbnz	r0, 8003374 <_printf_float+0xc0>
 8003316:	4b99      	ldr	r3, [pc, #612]	; (800357c <_printf_float+0x2c8>)
 8003318:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800331a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800331e:	4640      	mov	r0, r8
 8003320:	f7fd fca2 	bl	8000c68 <__aeabi_dcmple>
 8003324:	bb30      	cbnz	r0, 8003374 <_printf_float+0xc0>
 8003326:	2200      	movs	r2, #0
 8003328:	2300      	movs	r3, #0
 800332a:	4640      	mov	r0, r8
 800332c:	4651      	mov	r1, sl
 800332e:	f7fd fc91 	bl	8000c54 <__aeabi_dcmplt>
 8003332:	b110      	cbz	r0, 800333a <_printf_float+0x86>
 8003334:	232d      	movs	r3, #45	; 0x2d
 8003336:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800333a:	4b91      	ldr	r3, [pc, #580]	; (8003580 <_printf_float+0x2cc>)
 800333c:	4891      	ldr	r0, [pc, #580]	; (8003584 <_printf_float+0x2d0>)
 800333e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003342:	bf94      	ite	ls
 8003344:	4698      	movls	r8, r3
 8003346:	4680      	movhi	r8, r0
 8003348:	2303      	movs	r3, #3
 800334a:	6123      	str	r3, [r4, #16]
 800334c:	f02b 0304 	bic.w	r3, fp, #4
 8003350:	6023      	str	r3, [r4, #0]
 8003352:	f04f 0a00 	mov.w	sl, #0
 8003356:	9700      	str	r7, [sp, #0]
 8003358:	4633      	mov	r3, r6
 800335a:	aa0f      	add	r2, sp, #60	; 0x3c
 800335c:	4621      	mov	r1, r4
 800335e:	4628      	mov	r0, r5
 8003360:	f000 f9d2 	bl	8003708 <_printf_common>
 8003364:	3001      	adds	r0, #1
 8003366:	f040 808f 	bne.w	8003488 <_printf_float+0x1d4>
 800336a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800336e:	b011      	add	sp, #68	; 0x44
 8003370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003374:	4642      	mov	r2, r8
 8003376:	4653      	mov	r3, sl
 8003378:	4640      	mov	r0, r8
 800337a:	4651      	mov	r1, sl
 800337c:	f7fd fc92 	bl	8000ca4 <__aeabi_dcmpun>
 8003380:	b140      	cbz	r0, 8003394 <_printf_float+0xe0>
 8003382:	f1ba 0f00 	cmp.w	sl, #0
 8003386:	bfbc      	itt	lt
 8003388:	232d      	movlt	r3, #45	; 0x2d
 800338a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800338e:	487e      	ldr	r0, [pc, #504]	; (8003588 <_printf_float+0x2d4>)
 8003390:	4b7e      	ldr	r3, [pc, #504]	; (800358c <_printf_float+0x2d8>)
 8003392:	e7d4      	b.n	800333e <_printf_float+0x8a>
 8003394:	6863      	ldr	r3, [r4, #4]
 8003396:	1c5a      	adds	r2, r3, #1
 8003398:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800339c:	d142      	bne.n	8003424 <_printf_float+0x170>
 800339e:	2306      	movs	r3, #6
 80033a0:	6063      	str	r3, [r4, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	9206      	str	r2, [sp, #24]
 80033a6:	aa0e      	add	r2, sp, #56	; 0x38
 80033a8:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80033ac:	aa0d      	add	r2, sp, #52	; 0x34
 80033ae:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80033b2:	9203      	str	r2, [sp, #12]
 80033b4:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80033b8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80033bc:	6023      	str	r3, [r4, #0]
 80033be:	6863      	ldr	r3, [r4, #4]
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	4642      	mov	r2, r8
 80033c4:	4653      	mov	r3, sl
 80033c6:	4628      	mov	r0, r5
 80033c8:	910b      	str	r1, [sp, #44]	; 0x2c
 80033ca:	f7ff fed5 	bl	8003178 <__cvt>
 80033ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80033d0:	2947      	cmp	r1, #71	; 0x47
 80033d2:	4680      	mov	r8, r0
 80033d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80033d6:	d108      	bne.n	80033ea <_printf_float+0x136>
 80033d8:	1cc8      	adds	r0, r1, #3
 80033da:	db02      	blt.n	80033e2 <_printf_float+0x12e>
 80033dc:	6863      	ldr	r3, [r4, #4]
 80033de:	4299      	cmp	r1, r3
 80033e0:	dd40      	ble.n	8003464 <_printf_float+0x1b0>
 80033e2:	f1a9 0902 	sub.w	r9, r9, #2
 80033e6:	fa5f f989 	uxtb.w	r9, r9
 80033ea:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80033ee:	d81f      	bhi.n	8003430 <_printf_float+0x17c>
 80033f0:	3901      	subs	r1, #1
 80033f2:	464a      	mov	r2, r9
 80033f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80033f8:	910d      	str	r1, [sp, #52]	; 0x34
 80033fa:	f7ff ff1d 	bl	8003238 <__exponent>
 80033fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003400:	1813      	adds	r3, r2, r0
 8003402:	2a01      	cmp	r2, #1
 8003404:	4682      	mov	sl, r0
 8003406:	6123      	str	r3, [r4, #16]
 8003408:	dc02      	bgt.n	8003410 <_printf_float+0x15c>
 800340a:	6822      	ldr	r2, [r4, #0]
 800340c:	07d2      	lsls	r2, r2, #31
 800340e:	d501      	bpl.n	8003414 <_printf_float+0x160>
 8003410:	3301      	adds	r3, #1
 8003412:	6123      	str	r3, [r4, #16]
 8003414:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003418:	2b00      	cmp	r3, #0
 800341a:	d09c      	beq.n	8003356 <_printf_float+0xa2>
 800341c:	232d      	movs	r3, #45	; 0x2d
 800341e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003422:	e798      	b.n	8003356 <_printf_float+0xa2>
 8003424:	2947      	cmp	r1, #71	; 0x47
 8003426:	d1bc      	bne.n	80033a2 <_printf_float+0xee>
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1ba      	bne.n	80033a2 <_printf_float+0xee>
 800342c:	2301      	movs	r3, #1
 800342e:	e7b7      	b.n	80033a0 <_printf_float+0xec>
 8003430:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003434:	d118      	bne.n	8003468 <_printf_float+0x1b4>
 8003436:	2900      	cmp	r1, #0
 8003438:	6863      	ldr	r3, [r4, #4]
 800343a:	dd0b      	ble.n	8003454 <_printf_float+0x1a0>
 800343c:	6121      	str	r1, [r4, #16]
 800343e:	b913      	cbnz	r3, 8003446 <_printf_float+0x192>
 8003440:	6822      	ldr	r2, [r4, #0]
 8003442:	07d0      	lsls	r0, r2, #31
 8003444:	d502      	bpl.n	800344c <_printf_float+0x198>
 8003446:	3301      	adds	r3, #1
 8003448:	440b      	add	r3, r1
 800344a:	6123      	str	r3, [r4, #16]
 800344c:	65a1      	str	r1, [r4, #88]	; 0x58
 800344e:	f04f 0a00 	mov.w	sl, #0
 8003452:	e7df      	b.n	8003414 <_printf_float+0x160>
 8003454:	b913      	cbnz	r3, 800345c <_printf_float+0x1a8>
 8003456:	6822      	ldr	r2, [r4, #0]
 8003458:	07d2      	lsls	r2, r2, #31
 800345a:	d501      	bpl.n	8003460 <_printf_float+0x1ac>
 800345c:	3302      	adds	r3, #2
 800345e:	e7f4      	b.n	800344a <_printf_float+0x196>
 8003460:	2301      	movs	r3, #1
 8003462:	e7f2      	b.n	800344a <_printf_float+0x196>
 8003464:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003468:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800346a:	4299      	cmp	r1, r3
 800346c:	db05      	blt.n	800347a <_printf_float+0x1c6>
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	6121      	str	r1, [r4, #16]
 8003472:	07d8      	lsls	r0, r3, #31
 8003474:	d5ea      	bpl.n	800344c <_printf_float+0x198>
 8003476:	1c4b      	adds	r3, r1, #1
 8003478:	e7e7      	b.n	800344a <_printf_float+0x196>
 800347a:	2900      	cmp	r1, #0
 800347c:	bfd4      	ite	le
 800347e:	f1c1 0202 	rsble	r2, r1, #2
 8003482:	2201      	movgt	r2, #1
 8003484:	4413      	add	r3, r2
 8003486:	e7e0      	b.n	800344a <_printf_float+0x196>
 8003488:	6823      	ldr	r3, [r4, #0]
 800348a:	055a      	lsls	r2, r3, #21
 800348c:	d407      	bmi.n	800349e <_printf_float+0x1ea>
 800348e:	6923      	ldr	r3, [r4, #16]
 8003490:	4642      	mov	r2, r8
 8003492:	4631      	mov	r1, r6
 8003494:	4628      	mov	r0, r5
 8003496:	47b8      	blx	r7
 8003498:	3001      	adds	r0, #1
 800349a:	d12b      	bne.n	80034f4 <_printf_float+0x240>
 800349c:	e765      	b.n	800336a <_printf_float+0xb6>
 800349e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80034a2:	f240 80dc 	bls.w	800365e <_printf_float+0x3aa>
 80034a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80034aa:	2200      	movs	r2, #0
 80034ac:	2300      	movs	r3, #0
 80034ae:	f7fd fbc7 	bl	8000c40 <__aeabi_dcmpeq>
 80034b2:	2800      	cmp	r0, #0
 80034b4:	d033      	beq.n	800351e <_printf_float+0x26a>
 80034b6:	4a36      	ldr	r2, [pc, #216]	; (8003590 <_printf_float+0x2dc>)
 80034b8:	2301      	movs	r3, #1
 80034ba:	4631      	mov	r1, r6
 80034bc:	4628      	mov	r0, r5
 80034be:	47b8      	blx	r7
 80034c0:	3001      	adds	r0, #1
 80034c2:	f43f af52 	beq.w	800336a <_printf_float+0xb6>
 80034c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80034ca:	429a      	cmp	r2, r3
 80034cc:	db02      	blt.n	80034d4 <_printf_float+0x220>
 80034ce:	6823      	ldr	r3, [r4, #0]
 80034d0:	07d8      	lsls	r0, r3, #31
 80034d2:	d50f      	bpl.n	80034f4 <_printf_float+0x240>
 80034d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034d8:	4631      	mov	r1, r6
 80034da:	4628      	mov	r0, r5
 80034dc:	47b8      	blx	r7
 80034de:	3001      	adds	r0, #1
 80034e0:	f43f af43 	beq.w	800336a <_printf_float+0xb6>
 80034e4:	f04f 0800 	mov.w	r8, #0
 80034e8:	f104 091a 	add.w	r9, r4, #26
 80034ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034ee:	3b01      	subs	r3, #1
 80034f0:	4543      	cmp	r3, r8
 80034f2:	dc09      	bgt.n	8003508 <_printf_float+0x254>
 80034f4:	6823      	ldr	r3, [r4, #0]
 80034f6:	079b      	lsls	r3, r3, #30
 80034f8:	f100 8101 	bmi.w	80036fe <_printf_float+0x44a>
 80034fc:	68e0      	ldr	r0, [r4, #12]
 80034fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003500:	4298      	cmp	r0, r3
 8003502:	bfb8      	it	lt
 8003504:	4618      	movlt	r0, r3
 8003506:	e732      	b.n	800336e <_printf_float+0xba>
 8003508:	2301      	movs	r3, #1
 800350a:	464a      	mov	r2, r9
 800350c:	4631      	mov	r1, r6
 800350e:	4628      	mov	r0, r5
 8003510:	47b8      	blx	r7
 8003512:	3001      	adds	r0, #1
 8003514:	f43f af29 	beq.w	800336a <_printf_float+0xb6>
 8003518:	f108 0801 	add.w	r8, r8, #1
 800351c:	e7e6      	b.n	80034ec <_printf_float+0x238>
 800351e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003520:	2b00      	cmp	r3, #0
 8003522:	dc37      	bgt.n	8003594 <_printf_float+0x2e0>
 8003524:	4a1a      	ldr	r2, [pc, #104]	; (8003590 <_printf_float+0x2dc>)
 8003526:	2301      	movs	r3, #1
 8003528:	4631      	mov	r1, r6
 800352a:	4628      	mov	r0, r5
 800352c:	47b8      	blx	r7
 800352e:	3001      	adds	r0, #1
 8003530:	f43f af1b 	beq.w	800336a <_printf_float+0xb6>
 8003534:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003538:	4313      	orrs	r3, r2
 800353a:	d102      	bne.n	8003542 <_printf_float+0x28e>
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	07d9      	lsls	r1, r3, #31
 8003540:	d5d8      	bpl.n	80034f4 <_printf_float+0x240>
 8003542:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003546:	4631      	mov	r1, r6
 8003548:	4628      	mov	r0, r5
 800354a:	47b8      	blx	r7
 800354c:	3001      	adds	r0, #1
 800354e:	f43f af0c 	beq.w	800336a <_printf_float+0xb6>
 8003552:	f04f 0900 	mov.w	r9, #0
 8003556:	f104 0a1a 	add.w	sl, r4, #26
 800355a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800355c:	425b      	negs	r3, r3
 800355e:	454b      	cmp	r3, r9
 8003560:	dc01      	bgt.n	8003566 <_printf_float+0x2b2>
 8003562:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003564:	e794      	b.n	8003490 <_printf_float+0x1dc>
 8003566:	2301      	movs	r3, #1
 8003568:	4652      	mov	r2, sl
 800356a:	4631      	mov	r1, r6
 800356c:	4628      	mov	r0, r5
 800356e:	47b8      	blx	r7
 8003570:	3001      	adds	r0, #1
 8003572:	f43f aefa 	beq.w	800336a <_printf_float+0xb6>
 8003576:	f109 0901 	add.w	r9, r9, #1
 800357a:	e7ee      	b.n	800355a <_printf_float+0x2a6>
 800357c:	7fefffff 	.word	0x7fefffff
 8003580:	08007b9c 	.word	0x08007b9c
 8003584:	08007ba0 	.word	0x08007ba0
 8003588:	08007ba8 	.word	0x08007ba8
 800358c:	08007ba4 	.word	0x08007ba4
 8003590:	08007bac 	.word	0x08007bac
 8003594:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003596:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003598:	429a      	cmp	r2, r3
 800359a:	bfa8      	it	ge
 800359c:	461a      	movge	r2, r3
 800359e:	2a00      	cmp	r2, #0
 80035a0:	4691      	mov	r9, r2
 80035a2:	dc37      	bgt.n	8003614 <_printf_float+0x360>
 80035a4:	f04f 0b00 	mov.w	fp, #0
 80035a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80035ac:	f104 021a 	add.w	r2, r4, #26
 80035b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80035b4:	ebaa 0309 	sub.w	r3, sl, r9
 80035b8:	455b      	cmp	r3, fp
 80035ba:	dc33      	bgt.n	8003624 <_printf_float+0x370>
 80035bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035c0:	429a      	cmp	r2, r3
 80035c2:	db3b      	blt.n	800363c <_printf_float+0x388>
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	07da      	lsls	r2, r3, #31
 80035c8:	d438      	bmi.n	800363c <_printf_float+0x388>
 80035ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80035ce:	eba3 020a 	sub.w	r2, r3, sl
 80035d2:	eba3 0901 	sub.w	r9, r3, r1
 80035d6:	4591      	cmp	r9, r2
 80035d8:	bfa8      	it	ge
 80035da:	4691      	movge	r9, r2
 80035dc:	f1b9 0f00 	cmp.w	r9, #0
 80035e0:	dc34      	bgt.n	800364c <_printf_float+0x398>
 80035e2:	f04f 0800 	mov.w	r8, #0
 80035e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80035ea:	f104 0a1a 	add.w	sl, r4, #26
 80035ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035f2:	1a9b      	subs	r3, r3, r2
 80035f4:	eba3 0309 	sub.w	r3, r3, r9
 80035f8:	4543      	cmp	r3, r8
 80035fa:	f77f af7b 	ble.w	80034f4 <_printf_float+0x240>
 80035fe:	2301      	movs	r3, #1
 8003600:	4652      	mov	r2, sl
 8003602:	4631      	mov	r1, r6
 8003604:	4628      	mov	r0, r5
 8003606:	47b8      	blx	r7
 8003608:	3001      	adds	r0, #1
 800360a:	f43f aeae 	beq.w	800336a <_printf_float+0xb6>
 800360e:	f108 0801 	add.w	r8, r8, #1
 8003612:	e7ec      	b.n	80035ee <_printf_float+0x33a>
 8003614:	4613      	mov	r3, r2
 8003616:	4631      	mov	r1, r6
 8003618:	4642      	mov	r2, r8
 800361a:	4628      	mov	r0, r5
 800361c:	47b8      	blx	r7
 800361e:	3001      	adds	r0, #1
 8003620:	d1c0      	bne.n	80035a4 <_printf_float+0x2f0>
 8003622:	e6a2      	b.n	800336a <_printf_float+0xb6>
 8003624:	2301      	movs	r3, #1
 8003626:	4631      	mov	r1, r6
 8003628:	4628      	mov	r0, r5
 800362a:	920b      	str	r2, [sp, #44]	; 0x2c
 800362c:	47b8      	blx	r7
 800362e:	3001      	adds	r0, #1
 8003630:	f43f ae9b 	beq.w	800336a <_printf_float+0xb6>
 8003634:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003636:	f10b 0b01 	add.w	fp, fp, #1
 800363a:	e7b9      	b.n	80035b0 <_printf_float+0x2fc>
 800363c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003640:	4631      	mov	r1, r6
 8003642:	4628      	mov	r0, r5
 8003644:	47b8      	blx	r7
 8003646:	3001      	adds	r0, #1
 8003648:	d1bf      	bne.n	80035ca <_printf_float+0x316>
 800364a:	e68e      	b.n	800336a <_printf_float+0xb6>
 800364c:	464b      	mov	r3, r9
 800364e:	eb08 020a 	add.w	r2, r8, sl
 8003652:	4631      	mov	r1, r6
 8003654:	4628      	mov	r0, r5
 8003656:	47b8      	blx	r7
 8003658:	3001      	adds	r0, #1
 800365a:	d1c2      	bne.n	80035e2 <_printf_float+0x32e>
 800365c:	e685      	b.n	800336a <_printf_float+0xb6>
 800365e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003660:	2a01      	cmp	r2, #1
 8003662:	dc01      	bgt.n	8003668 <_printf_float+0x3b4>
 8003664:	07db      	lsls	r3, r3, #31
 8003666:	d537      	bpl.n	80036d8 <_printf_float+0x424>
 8003668:	2301      	movs	r3, #1
 800366a:	4642      	mov	r2, r8
 800366c:	4631      	mov	r1, r6
 800366e:	4628      	mov	r0, r5
 8003670:	47b8      	blx	r7
 8003672:	3001      	adds	r0, #1
 8003674:	f43f ae79 	beq.w	800336a <_printf_float+0xb6>
 8003678:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800367c:	4631      	mov	r1, r6
 800367e:	4628      	mov	r0, r5
 8003680:	47b8      	blx	r7
 8003682:	3001      	adds	r0, #1
 8003684:	f43f ae71 	beq.w	800336a <_printf_float+0xb6>
 8003688:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800368c:	2200      	movs	r2, #0
 800368e:	2300      	movs	r3, #0
 8003690:	f7fd fad6 	bl	8000c40 <__aeabi_dcmpeq>
 8003694:	b9d8      	cbnz	r0, 80036ce <_printf_float+0x41a>
 8003696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003698:	f108 0201 	add.w	r2, r8, #1
 800369c:	3b01      	subs	r3, #1
 800369e:	4631      	mov	r1, r6
 80036a0:	4628      	mov	r0, r5
 80036a2:	47b8      	blx	r7
 80036a4:	3001      	adds	r0, #1
 80036a6:	d10e      	bne.n	80036c6 <_printf_float+0x412>
 80036a8:	e65f      	b.n	800336a <_printf_float+0xb6>
 80036aa:	2301      	movs	r3, #1
 80036ac:	464a      	mov	r2, r9
 80036ae:	4631      	mov	r1, r6
 80036b0:	4628      	mov	r0, r5
 80036b2:	47b8      	blx	r7
 80036b4:	3001      	adds	r0, #1
 80036b6:	f43f ae58 	beq.w	800336a <_printf_float+0xb6>
 80036ba:	f108 0801 	add.w	r8, r8, #1
 80036be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036c0:	3b01      	subs	r3, #1
 80036c2:	4543      	cmp	r3, r8
 80036c4:	dcf1      	bgt.n	80036aa <_printf_float+0x3f6>
 80036c6:	4653      	mov	r3, sl
 80036c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80036cc:	e6e1      	b.n	8003492 <_printf_float+0x1de>
 80036ce:	f04f 0800 	mov.w	r8, #0
 80036d2:	f104 091a 	add.w	r9, r4, #26
 80036d6:	e7f2      	b.n	80036be <_printf_float+0x40a>
 80036d8:	2301      	movs	r3, #1
 80036da:	4642      	mov	r2, r8
 80036dc:	e7df      	b.n	800369e <_printf_float+0x3ea>
 80036de:	2301      	movs	r3, #1
 80036e0:	464a      	mov	r2, r9
 80036e2:	4631      	mov	r1, r6
 80036e4:	4628      	mov	r0, r5
 80036e6:	47b8      	blx	r7
 80036e8:	3001      	adds	r0, #1
 80036ea:	f43f ae3e 	beq.w	800336a <_printf_float+0xb6>
 80036ee:	f108 0801 	add.w	r8, r8, #1
 80036f2:	68e3      	ldr	r3, [r4, #12]
 80036f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80036f6:	1a5b      	subs	r3, r3, r1
 80036f8:	4543      	cmp	r3, r8
 80036fa:	dcf0      	bgt.n	80036de <_printf_float+0x42a>
 80036fc:	e6fe      	b.n	80034fc <_printf_float+0x248>
 80036fe:	f04f 0800 	mov.w	r8, #0
 8003702:	f104 0919 	add.w	r9, r4, #25
 8003706:	e7f4      	b.n	80036f2 <_printf_float+0x43e>

08003708 <_printf_common>:
 8003708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800370c:	4616      	mov	r6, r2
 800370e:	4699      	mov	r9, r3
 8003710:	688a      	ldr	r2, [r1, #8]
 8003712:	690b      	ldr	r3, [r1, #16]
 8003714:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003718:	4293      	cmp	r3, r2
 800371a:	bfb8      	it	lt
 800371c:	4613      	movlt	r3, r2
 800371e:	6033      	str	r3, [r6, #0]
 8003720:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003724:	4607      	mov	r7, r0
 8003726:	460c      	mov	r4, r1
 8003728:	b10a      	cbz	r2, 800372e <_printf_common+0x26>
 800372a:	3301      	adds	r3, #1
 800372c:	6033      	str	r3, [r6, #0]
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	0699      	lsls	r1, r3, #26
 8003732:	bf42      	ittt	mi
 8003734:	6833      	ldrmi	r3, [r6, #0]
 8003736:	3302      	addmi	r3, #2
 8003738:	6033      	strmi	r3, [r6, #0]
 800373a:	6825      	ldr	r5, [r4, #0]
 800373c:	f015 0506 	ands.w	r5, r5, #6
 8003740:	d106      	bne.n	8003750 <_printf_common+0x48>
 8003742:	f104 0a19 	add.w	sl, r4, #25
 8003746:	68e3      	ldr	r3, [r4, #12]
 8003748:	6832      	ldr	r2, [r6, #0]
 800374a:	1a9b      	subs	r3, r3, r2
 800374c:	42ab      	cmp	r3, r5
 800374e:	dc26      	bgt.n	800379e <_printf_common+0x96>
 8003750:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003754:	1e13      	subs	r3, r2, #0
 8003756:	6822      	ldr	r2, [r4, #0]
 8003758:	bf18      	it	ne
 800375a:	2301      	movne	r3, #1
 800375c:	0692      	lsls	r2, r2, #26
 800375e:	d42b      	bmi.n	80037b8 <_printf_common+0xb0>
 8003760:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003764:	4649      	mov	r1, r9
 8003766:	4638      	mov	r0, r7
 8003768:	47c0      	blx	r8
 800376a:	3001      	adds	r0, #1
 800376c:	d01e      	beq.n	80037ac <_printf_common+0xa4>
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	68e5      	ldr	r5, [r4, #12]
 8003772:	6832      	ldr	r2, [r6, #0]
 8003774:	f003 0306 	and.w	r3, r3, #6
 8003778:	2b04      	cmp	r3, #4
 800377a:	bf08      	it	eq
 800377c:	1aad      	subeq	r5, r5, r2
 800377e:	68a3      	ldr	r3, [r4, #8]
 8003780:	6922      	ldr	r2, [r4, #16]
 8003782:	bf0c      	ite	eq
 8003784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003788:	2500      	movne	r5, #0
 800378a:	4293      	cmp	r3, r2
 800378c:	bfc4      	itt	gt
 800378e:	1a9b      	subgt	r3, r3, r2
 8003790:	18ed      	addgt	r5, r5, r3
 8003792:	2600      	movs	r6, #0
 8003794:	341a      	adds	r4, #26
 8003796:	42b5      	cmp	r5, r6
 8003798:	d11a      	bne.n	80037d0 <_printf_common+0xc8>
 800379a:	2000      	movs	r0, #0
 800379c:	e008      	b.n	80037b0 <_printf_common+0xa8>
 800379e:	2301      	movs	r3, #1
 80037a0:	4652      	mov	r2, sl
 80037a2:	4649      	mov	r1, r9
 80037a4:	4638      	mov	r0, r7
 80037a6:	47c0      	blx	r8
 80037a8:	3001      	adds	r0, #1
 80037aa:	d103      	bne.n	80037b4 <_printf_common+0xac>
 80037ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037b4:	3501      	adds	r5, #1
 80037b6:	e7c6      	b.n	8003746 <_printf_common+0x3e>
 80037b8:	18e1      	adds	r1, r4, r3
 80037ba:	1c5a      	adds	r2, r3, #1
 80037bc:	2030      	movs	r0, #48	; 0x30
 80037be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037c2:	4422      	add	r2, r4
 80037c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037cc:	3302      	adds	r3, #2
 80037ce:	e7c7      	b.n	8003760 <_printf_common+0x58>
 80037d0:	2301      	movs	r3, #1
 80037d2:	4622      	mov	r2, r4
 80037d4:	4649      	mov	r1, r9
 80037d6:	4638      	mov	r0, r7
 80037d8:	47c0      	blx	r8
 80037da:	3001      	adds	r0, #1
 80037dc:	d0e6      	beq.n	80037ac <_printf_common+0xa4>
 80037de:	3601      	adds	r6, #1
 80037e0:	e7d9      	b.n	8003796 <_printf_common+0x8e>
	...

080037e4 <_printf_i>:
 80037e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037e8:	7e0f      	ldrb	r7, [r1, #24]
 80037ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80037ec:	2f78      	cmp	r7, #120	; 0x78
 80037ee:	4691      	mov	r9, r2
 80037f0:	4680      	mov	r8, r0
 80037f2:	460c      	mov	r4, r1
 80037f4:	469a      	mov	sl, r3
 80037f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80037fa:	d807      	bhi.n	800380c <_printf_i+0x28>
 80037fc:	2f62      	cmp	r7, #98	; 0x62
 80037fe:	d80a      	bhi.n	8003816 <_printf_i+0x32>
 8003800:	2f00      	cmp	r7, #0
 8003802:	f000 80d8 	beq.w	80039b6 <_printf_i+0x1d2>
 8003806:	2f58      	cmp	r7, #88	; 0x58
 8003808:	f000 80a3 	beq.w	8003952 <_printf_i+0x16e>
 800380c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003810:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003814:	e03a      	b.n	800388c <_printf_i+0xa8>
 8003816:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800381a:	2b15      	cmp	r3, #21
 800381c:	d8f6      	bhi.n	800380c <_printf_i+0x28>
 800381e:	a101      	add	r1, pc, #4	; (adr r1, 8003824 <_printf_i+0x40>)
 8003820:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003824:	0800387d 	.word	0x0800387d
 8003828:	08003891 	.word	0x08003891
 800382c:	0800380d 	.word	0x0800380d
 8003830:	0800380d 	.word	0x0800380d
 8003834:	0800380d 	.word	0x0800380d
 8003838:	0800380d 	.word	0x0800380d
 800383c:	08003891 	.word	0x08003891
 8003840:	0800380d 	.word	0x0800380d
 8003844:	0800380d 	.word	0x0800380d
 8003848:	0800380d 	.word	0x0800380d
 800384c:	0800380d 	.word	0x0800380d
 8003850:	0800399d 	.word	0x0800399d
 8003854:	080038c1 	.word	0x080038c1
 8003858:	0800397f 	.word	0x0800397f
 800385c:	0800380d 	.word	0x0800380d
 8003860:	0800380d 	.word	0x0800380d
 8003864:	080039bf 	.word	0x080039bf
 8003868:	0800380d 	.word	0x0800380d
 800386c:	080038c1 	.word	0x080038c1
 8003870:	0800380d 	.word	0x0800380d
 8003874:	0800380d 	.word	0x0800380d
 8003878:	08003987 	.word	0x08003987
 800387c:	682b      	ldr	r3, [r5, #0]
 800387e:	1d1a      	adds	r2, r3, #4
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	602a      	str	r2, [r5, #0]
 8003884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003888:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800388c:	2301      	movs	r3, #1
 800388e:	e0a3      	b.n	80039d8 <_printf_i+0x1f4>
 8003890:	6820      	ldr	r0, [r4, #0]
 8003892:	6829      	ldr	r1, [r5, #0]
 8003894:	0606      	lsls	r6, r0, #24
 8003896:	f101 0304 	add.w	r3, r1, #4
 800389a:	d50a      	bpl.n	80038b2 <_printf_i+0xce>
 800389c:	680e      	ldr	r6, [r1, #0]
 800389e:	602b      	str	r3, [r5, #0]
 80038a0:	2e00      	cmp	r6, #0
 80038a2:	da03      	bge.n	80038ac <_printf_i+0xc8>
 80038a4:	232d      	movs	r3, #45	; 0x2d
 80038a6:	4276      	negs	r6, r6
 80038a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038ac:	485e      	ldr	r0, [pc, #376]	; (8003a28 <_printf_i+0x244>)
 80038ae:	230a      	movs	r3, #10
 80038b0:	e019      	b.n	80038e6 <_printf_i+0x102>
 80038b2:	680e      	ldr	r6, [r1, #0]
 80038b4:	602b      	str	r3, [r5, #0]
 80038b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038ba:	bf18      	it	ne
 80038bc:	b236      	sxthne	r6, r6
 80038be:	e7ef      	b.n	80038a0 <_printf_i+0xbc>
 80038c0:	682b      	ldr	r3, [r5, #0]
 80038c2:	6820      	ldr	r0, [r4, #0]
 80038c4:	1d19      	adds	r1, r3, #4
 80038c6:	6029      	str	r1, [r5, #0]
 80038c8:	0601      	lsls	r1, r0, #24
 80038ca:	d501      	bpl.n	80038d0 <_printf_i+0xec>
 80038cc:	681e      	ldr	r6, [r3, #0]
 80038ce:	e002      	b.n	80038d6 <_printf_i+0xf2>
 80038d0:	0646      	lsls	r6, r0, #25
 80038d2:	d5fb      	bpl.n	80038cc <_printf_i+0xe8>
 80038d4:	881e      	ldrh	r6, [r3, #0]
 80038d6:	4854      	ldr	r0, [pc, #336]	; (8003a28 <_printf_i+0x244>)
 80038d8:	2f6f      	cmp	r7, #111	; 0x6f
 80038da:	bf0c      	ite	eq
 80038dc:	2308      	moveq	r3, #8
 80038de:	230a      	movne	r3, #10
 80038e0:	2100      	movs	r1, #0
 80038e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038e6:	6865      	ldr	r5, [r4, #4]
 80038e8:	60a5      	str	r5, [r4, #8]
 80038ea:	2d00      	cmp	r5, #0
 80038ec:	bfa2      	ittt	ge
 80038ee:	6821      	ldrge	r1, [r4, #0]
 80038f0:	f021 0104 	bicge.w	r1, r1, #4
 80038f4:	6021      	strge	r1, [r4, #0]
 80038f6:	b90e      	cbnz	r6, 80038fc <_printf_i+0x118>
 80038f8:	2d00      	cmp	r5, #0
 80038fa:	d04d      	beq.n	8003998 <_printf_i+0x1b4>
 80038fc:	4615      	mov	r5, r2
 80038fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8003902:	fb03 6711 	mls	r7, r3, r1, r6
 8003906:	5dc7      	ldrb	r7, [r0, r7]
 8003908:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800390c:	4637      	mov	r7, r6
 800390e:	42bb      	cmp	r3, r7
 8003910:	460e      	mov	r6, r1
 8003912:	d9f4      	bls.n	80038fe <_printf_i+0x11a>
 8003914:	2b08      	cmp	r3, #8
 8003916:	d10b      	bne.n	8003930 <_printf_i+0x14c>
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	07de      	lsls	r6, r3, #31
 800391c:	d508      	bpl.n	8003930 <_printf_i+0x14c>
 800391e:	6923      	ldr	r3, [r4, #16]
 8003920:	6861      	ldr	r1, [r4, #4]
 8003922:	4299      	cmp	r1, r3
 8003924:	bfde      	ittt	le
 8003926:	2330      	movle	r3, #48	; 0x30
 8003928:	f805 3c01 	strble.w	r3, [r5, #-1]
 800392c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003930:	1b52      	subs	r2, r2, r5
 8003932:	6122      	str	r2, [r4, #16]
 8003934:	f8cd a000 	str.w	sl, [sp]
 8003938:	464b      	mov	r3, r9
 800393a:	aa03      	add	r2, sp, #12
 800393c:	4621      	mov	r1, r4
 800393e:	4640      	mov	r0, r8
 8003940:	f7ff fee2 	bl	8003708 <_printf_common>
 8003944:	3001      	adds	r0, #1
 8003946:	d14c      	bne.n	80039e2 <_printf_i+0x1fe>
 8003948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800394c:	b004      	add	sp, #16
 800394e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003952:	4835      	ldr	r0, [pc, #212]	; (8003a28 <_printf_i+0x244>)
 8003954:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003958:	6829      	ldr	r1, [r5, #0]
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003960:	6029      	str	r1, [r5, #0]
 8003962:	061d      	lsls	r5, r3, #24
 8003964:	d514      	bpl.n	8003990 <_printf_i+0x1ac>
 8003966:	07df      	lsls	r7, r3, #31
 8003968:	bf44      	itt	mi
 800396a:	f043 0320 	orrmi.w	r3, r3, #32
 800396e:	6023      	strmi	r3, [r4, #0]
 8003970:	b91e      	cbnz	r6, 800397a <_printf_i+0x196>
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	f023 0320 	bic.w	r3, r3, #32
 8003978:	6023      	str	r3, [r4, #0]
 800397a:	2310      	movs	r3, #16
 800397c:	e7b0      	b.n	80038e0 <_printf_i+0xfc>
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	f043 0320 	orr.w	r3, r3, #32
 8003984:	6023      	str	r3, [r4, #0]
 8003986:	2378      	movs	r3, #120	; 0x78
 8003988:	4828      	ldr	r0, [pc, #160]	; (8003a2c <_printf_i+0x248>)
 800398a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800398e:	e7e3      	b.n	8003958 <_printf_i+0x174>
 8003990:	0659      	lsls	r1, r3, #25
 8003992:	bf48      	it	mi
 8003994:	b2b6      	uxthmi	r6, r6
 8003996:	e7e6      	b.n	8003966 <_printf_i+0x182>
 8003998:	4615      	mov	r5, r2
 800399a:	e7bb      	b.n	8003914 <_printf_i+0x130>
 800399c:	682b      	ldr	r3, [r5, #0]
 800399e:	6826      	ldr	r6, [r4, #0]
 80039a0:	6961      	ldr	r1, [r4, #20]
 80039a2:	1d18      	adds	r0, r3, #4
 80039a4:	6028      	str	r0, [r5, #0]
 80039a6:	0635      	lsls	r5, r6, #24
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	d501      	bpl.n	80039b0 <_printf_i+0x1cc>
 80039ac:	6019      	str	r1, [r3, #0]
 80039ae:	e002      	b.n	80039b6 <_printf_i+0x1d2>
 80039b0:	0670      	lsls	r0, r6, #25
 80039b2:	d5fb      	bpl.n	80039ac <_printf_i+0x1c8>
 80039b4:	8019      	strh	r1, [r3, #0]
 80039b6:	2300      	movs	r3, #0
 80039b8:	6123      	str	r3, [r4, #16]
 80039ba:	4615      	mov	r5, r2
 80039bc:	e7ba      	b.n	8003934 <_printf_i+0x150>
 80039be:	682b      	ldr	r3, [r5, #0]
 80039c0:	1d1a      	adds	r2, r3, #4
 80039c2:	602a      	str	r2, [r5, #0]
 80039c4:	681d      	ldr	r5, [r3, #0]
 80039c6:	6862      	ldr	r2, [r4, #4]
 80039c8:	2100      	movs	r1, #0
 80039ca:	4628      	mov	r0, r5
 80039cc:	f7fc fc10 	bl	80001f0 <memchr>
 80039d0:	b108      	cbz	r0, 80039d6 <_printf_i+0x1f2>
 80039d2:	1b40      	subs	r0, r0, r5
 80039d4:	6060      	str	r0, [r4, #4]
 80039d6:	6863      	ldr	r3, [r4, #4]
 80039d8:	6123      	str	r3, [r4, #16]
 80039da:	2300      	movs	r3, #0
 80039dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039e0:	e7a8      	b.n	8003934 <_printf_i+0x150>
 80039e2:	6923      	ldr	r3, [r4, #16]
 80039e4:	462a      	mov	r2, r5
 80039e6:	4649      	mov	r1, r9
 80039e8:	4640      	mov	r0, r8
 80039ea:	47d0      	blx	sl
 80039ec:	3001      	adds	r0, #1
 80039ee:	d0ab      	beq.n	8003948 <_printf_i+0x164>
 80039f0:	6823      	ldr	r3, [r4, #0]
 80039f2:	079b      	lsls	r3, r3, #30
 80039f4:	d413      	bmi.n	8003a1e <_printf_i+0x23a>
 80039f6:	68e0      	ldr	r0, [r4, #12]
 80039f8:	9b03      	ldr	r3, [sp, #12]
 80039fa:	4298      	cmp	r0, r3
 80039fc:	bfb8      	it	lt
 80039fe:	4618      	movlt	r0, r3
 8003a00:	e7a4      	b.n	800394c <_printf_i+0x168>
 8003a02:	2301      	movs	r3, #1
 8003a04:	4632      	mov	r2, r6
 8003a06:	4649      	mov	r1, r9
 8003a08:	4640      	mov	r0, r8
 8003a0a:	47d0      	blx	sl
 8003a0c:	3001      	adds	r0, #1
 8003a0e:	d09b      	beq.n	8003948 <_printf_i+0x164>
 8003a10:	3501      	adds	r5, #1
 8003a12:	68e3      	ldr	r3, [r4, #12]
 8003a14:	9903      	ldr	r1, [sp, #12]
 8003a16:	1a5b      	subs	r3, r3, r1
 8003a18:	42ab      	cmp	r3, r5
 8003a1a:	dcf2      	bgt.n	8003a02 <_printf_i+0x21e>
 8003a1c:	e7eb      	b.n	80039f6 <_printf_i+0x212>
 8003a1e:	2500      	movs	r5, #0
 8003a20:	f104 0619 	add.w	r6, r4, #25
 8003a24:	e7f5      	b.n	8003a12 <_printf_i+0x22e>
 8003a26:	bf00      	nop
 8003a28:	08007bae 	.word	0x08007bae
 8003a2c:	08007bbf 	.word	0x08007bbf

08003a30 <_scanf_float>:
 8003a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a34:	b087      	sub	sp, #28
 8003a36:	4617      	mov	r7, r2
 8003a38:	9303      	str	r3, [sp, #12]
 8003a3a:	688b      	ldr	r3, [r1, #8]
 8003a3c:	1e5a      	subs	r2, r3, #1
 8003a3e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003a42:	bf83      	ittte	hi
 8003a44:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003a48:	195b      	addhi	r3, r3, r5
 8003a4a:	9302      	strhi	r3, [sp, #8]
 8003a4c:	2300      	movls	r3, #0
 8003a4e:	bf86      	itte	hi
 8003a50:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003a54:	608b      	strhi	r3, [r1, #8]
 8003a56:	9302      	strls	r3, [sp, #8]
 8003a58:	680b      	ldr	r3, [r1, #0]
 8003a5a:	468b      	mov	fp, r1
 8003a5c:	2500      	movs	r5, #0
 8003a5e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003a62:	f84b 3b1c 	str.w	r3, [fp], #28
 8003a66:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003a6a:	4680      	mov	r8, r0
 8003a6c:	460c      	mov	r4, r1
 8003a6e:	465e      	mov	r6, fp
 8003a70:	46aa      	mov	sl, r5
 8003a72:	46a9      	mov	r9, r5
 8003a74:	9501      	str	r5, [sp, #4]
 8003a76:	68a2      	ldr	r2, [r4, #8]
 8003a78:	b152      	cbz	r2, 8003a90 <_scanf_float+0x60>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2b4e      	cmp	r3, #78	; 0x4e
 8003a80:	d864      	bhi.n	8003b4c <_scanf_float+0x11c>
 8003a82:	2b40      	cmp	r3, #64	; 0x40
 8003a84:	d83c      	bhi.n	8003b00 <_scanf_float+0xd0>
 8003a86:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003a8a:	b2c8      	uxtb	r0, r1
 8003a8c:	280e      	cmp	r0, #14
 8003a8e:	d93a      	bls.n	8003b06 <_scanf_float+0xd6>
 8003a90:	f1b9 0f00 	cmp.w	r9, #0
 8003a94:	d003      	beq.n	8003a9e <_scanf_float+0x6e>
 8003a96:	6823      	ldr	r3, [r4, #0]
 8003a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a9c:	6023      	str	r3, [r4, #0]
 8003a9e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003aa2:	f1ba 0f01 	cmp.w	sl, #1
 8003aa6:	f200 8113 	bhi.w	8003cd0 <_scanf_float+0x2a0>
 8003aaa:	455e      	cmp	r6, fp
 8003aac:	f200 8105 	bhi.w	8003cba <_scanf_float+0x28a>
 8003ab0:	2501      	movs	r5, #1
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	b007      	add	sp, #28
 8003ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003abe:	2a0d      	cmp	r2, #13
 8003ac0:	d8e6      	bhi.n	8003a90 <_scanf_float+0x60>
 8003ac2:	a101      	add	r1, pc, #4	; (adr r1, 8003ac8 <_scanf_float+0x98>)
 8003ac4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003ac8:	08003c07 	.word	0x08003c07
 8003acc:	08003a91 	.word	0x08003a91
 8003ad0:	08003a91 	.word	0x08003a91
 8003ad4:	08003a91 	.word	0x08003a91
 8003ad8:	08003c67 	.word	0x08003c67
 8003adc:	08003c3f 	.word	0x08003c3f
 8003ae0:	08003a91 	.word	0x08003a91
 8003ae4:	08003a91 	.word	0x08003a91
 8003ae8:	08003c15 	.word	0x08003c15
 8003aec:	08003a91 	.word	0x08003a91
 8003af0:	08003a91 	.word	0x08003a91
 8003af4:	08003a91 	.word	0x08003a91
 8003af8:	08003a91 	.word	0x08003a91
 8003afc:	08003bcd 	.word	0x08003bcd
 8003b00:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003b04:	e7db      	b.n	8003abe <_scanf_float+0x8e>
 8003b06:	290e      	cmp	r1, #14
 8003b08:	d8c2      	bhi.n	8003a90 <_scanf_float+0x60>
 8003b0a:	a001      	add	r0, pc, #4	; (adr r0, 8003b10 <_scanf_float+0xe0>)
 8003b0c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003b10:	08003bbf 	.word	0x08003bbf
 8003b14:	08003a91 	.word	0x08003a91
 8003b18:	08003bbf 	.word	0x08003bbf
 8003b1c:	08003c53 	.word	0x08003c53
 8003b20:	08003a91 	.word	0x08003a91
 8003b24:	08003b6d 	.word	0x08003b6d
 8003b28:	08003ba9 	.word	0x08003ba9
 8003b2c:	08003ba9 	.word	0x08003ba9
 8003b30:	08003ba9 	.word	0x08003ba9
 8003b34:	08003ba9 	.word	0x08003ba9
 8003b38:	08003ba9 	.word	0x08003ba9
 8003b3c:	08003ba9 	.word	0x08003ba9
 8003b40:	08003ba9 	.word	0x08003ba9
 8003b44:	08003ba9 	.word	0x08003ba9
 8003b48:	08003ba9 	.word	0x08003ba9
 8003b4c:	2b6e      	cmp	r3, #110	; 0x6e
 8003b4e:	d809      	bhi.n	8003b64 <_scanf_float+0x134>
 8003b50:	2b60      	cmp	r3, #96	; 0x60
 8003b52:	d8b2      	bhi.n	8003aba <_scanf_float+0x8a>
 8003b54:	2b54      	cmp	r3, #84	; 0x54
 8003b56:	d077      	beq.n	8003c48 <_scanf_float+0x218>
 8003b58:	2b59      	cmp	r3, #89	; 0x59
 8003b5a:	d199      	bne.n	8003a90 <_scanf_float+0x60>
 8003b5c:	2d07      	cmp	r5, #7
 8003b5e:	d197      	bne.n	8003a90 <_scanf_float+0x60>
 8003b60:	2508      	movs	r5, #8
 8003b62:	e029      	b.n	8003bb8 <_scanf_float+0x188>
 8003b64:	2b74      	cmp	r3, #116	; 0x74
 8003b66:	d06f      	beq.n	8003c48 <_scanf_float+0x218>
 8003b68:	2b79      	cmp	r3, #121	; 0x79
 8003b6a:	e7f6      	b.n	8003b5a <_scanf_float+0x12a>
 8003b6c:	6821      	ldr	r1, [r4, #0]
 8003b6e:	05c8      	lsls	r0, r1, #23
 8003b70:	d51a      	bpl.n	8003ba8 <_scanf_float+0x178>
 8003b72:	9b02      	ldr	r3, [sp, #8]
 8003b74:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003b78:	6021      	str	r1, [r4, #0]
 8003b7a:	f109 0901 	add.w	r9, r9, #1
 8003b7e:	b11b      	cbz	r3, 8003b88 <_scanf_float+0x158>
 8003b80:	3b01      	subs	r3, #1
 8003b82:	3201      	adds	r2, #1
 8003b84:	9302      	str	r3, [sp, #8]
 8003b86:	60a2      	str	r2, [r4, #8]
 8003b88:	68a3      	ldr	r3, [r4, #8]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	60a3      	str	r3, [r4, #8]
 8003b8e:	6923      	ldr	r3, [r4, #16]
 8003b90:	3301      	adds	r3, #1
 8003b92:	6123      	str	r3, [r4, #16]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	607b      	str	r3, [r7, #4]
 8003b9c:	f340 8084 	ble.w	8003ca8 <_scanf_float+0x278>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	603b      	str	r3, [r7, #0]
 8003ba6:	e766      	b.n	8003a76 <_scanf_float+0x46>
 8003ba8:	eb1a 0f05 	cmn.w	sl, r5
 8003bac:	f47f af70 	bne.w	8003a90 <_scanf_float+0x60>
 8003bb0:	6822      	ldr	r2, [r4, #0]
 8003bb2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003bb6:	6022      	str	r2, [r4, #0]
 8003bb8:	f806 3b01 	strb.w	r3, [r6], #1
 8003bbc:	e7e4      	b.n	8003b88 <_scanf_float+0x158>
 8003bbe:	6822      	ldr	r2, [r4, #0]
 8003bc0:	0610      	lsls	r0, r2, #24
 8003bc2:	f57f af65 	bpl.w	8003a90 <_scanf_float+0x60>
 8003bc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bca:	e7f4      	b.n	8003bb6 <_scanf_float+0x186>
 8003bcc:	f1ba 0f00 	cmp.w	sl, #0
 8003bd0:	d10e      	bne.n	8003bf0 <_scanf_float+0x1c0>
 8003bd2:	f1b9 0f00 	cmp.w	r9, #0
 8003bd6:	d10e      	bne.n	8003bf6 <_scanf_float+0x1c6>
 8003bd8:	6822      	ldr	r2, [r4, #0]
 8003bda:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003bde:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003be2:	d108      	bne.n	8003bf6 <_scanf_float+0x1c6>
 8003be4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003be8:	6022      	str	r2, [r4, #0]
 8003bea:	f04f 0a01 	mov.w	sl, #1
 8003bee:	e7e3      	b.n	8003bb8 <_scanf_float+0x188>
 8003bf0:	f1ba 0f02 	cmp.w	sl, #2
 8003bf4:	d055      	beq.n	8003ca2 <_scanf_float+0x272>
 8003bf6:	2d01      	cmp	r5, #1
 8003bf8:	d002      	beq.n	8003c00 <_scanf_float+0x1d0>
 8003bfa:	2d04      	cmp	r5, #4
 8003bfc:	f47f af48 	bne.w	8003a90 <_scanf_float+0x60>
 8003c00:	3501      	adds	r5, #1
 8003c02:	b2ed      	uxtb	r5, r5
 8003c04:	e7d8      	b.n	8003bb8 <_scanf_float+0x188>
 8003c06:	f1ba 0f01 	cmp.w	sl, #1
 8003c0a:	f47f af41 	bne.w	8003a90 <_scanf_float+0x60>
 8003c0e:	f04f 0a02 	mov.w	sl, #2
 8003c12:	e7d1      	b.n	8003bb8 <_scanf_float+0x188>
 8003c14:	b97d      	cbnz	r5, 8003c36 <_scanf_float+0x206>
 8003c16:	f1b9 0f00 	cmp.w	r9, #0
 8003c1a:	f47f af3c 	bne.w	8003a96 <_scanf_float+0x66>
 8003c1e:	6822      	ldr	r2, [r4, #0]
 8003c20:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003c24:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003c28:	f47f af39 	bne.w	8003a9e <_scanf_float+0x6e>
 8003c2c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003c30:	6022      	str	r2, [r4, #0]
 8003c32:	2501      	movs	r5, #1
 8003c34:	e7c0      	b.n	8003bb8 <_scanf_float+0x188>
 8003c36:	2d03      	cmp	r5, #3
 8003c38:	d0e2      	beq.n	8003c00 <_scanf_float+0x1d0>
 8003c3a:	2d05      	cmp	r5, #5
 8003c3c:	e7de      	b.n	8003bfc <_scanf_float+0x1cc>
 8003c3e:	2d02      	cmp	r5, #2
 8003c40:	f47f af26 	bne.w	8003a90 <_scanf_float+0x60>
 8003c44:	2503      	movs	r5, #3
 8003c46:	e7b7      	b.n	8003bb8 <_scanf_float+0x188>
 8003c48:	2d06      	cmp	r5, #6
 8003c4a:	f47f af21 	bne.w	8003a90 <_scanf_float+0x60>
 8003c4e:	2507      	movs	r5, #7
 8003c50:	e7b2      	b.n	8003bb8 <_scanf_float+0x188>
 8003c52:	6822      	ldr	r2, [r4, #0]
 8003c54:	0591      	lsls	r1, r2, #22
 8003c56:	f57f af1b 	bpl.w	8003a90 <_scanf_float+0x60>
 8003c5a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003c5e:	6022      	str	r2, [r4, #0]
 8003c60:	f8cd 9004 	str.w	r9, [sp, #4]
 8003c64:	e7a8      	b.n	8003bb8 <_scanf_float+0x188>
 8003c66:	6822      	ldr	r2, [r4, #0]
 8003c68:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003c6c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003c70:	d006      	beq.n	8003c80 <_scanf_float+0x250>
 8003c72:	0550      	lsls	r0, r2, #21
 8003c74:	f57f af0c 	bpl.w	8003a90 <_scanf_float+0x60>
 8003c78:	f1b9 0f00 	cmp.w	r9, #0
 8003c7c:	f43f af0f 	beq.w	8003a9e <_scanf_float+0x6e>
 8003c80:	0591      	lsls	r1, r2, #22
 8003c82:	bf58      	it	pl
 8003c84:	9901      	ldrpl	r1, [sp, #4]
 8003c86:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003c8a:	bf58      	it	pl
 8003c8c:	eba9 0101 	subpl.w	r1, r9, r1
 8003c90:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003c94:	bf58      	it	pl
 8003c96:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003c9a:	6022      	str	r2, [r4, #0]
 8003c9c:	f04f 0900 	mov.w	r9, #0
 8003ca0:	e78a      	b.n	8003bb8 <_scanf_float+0x188>
 8003ca2:	f04f 0a03 	mov.w	sl, #3
 8003ca6:	e787      	b.n	8003bb8 <_scanf_float+0x188>
 8003ca8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003cac:	4639      	mov	r1, r7
 8003cae:	4640      	mov	r0, r8
 8003cb0:	4798      	blx	r3
 8003cb2:	2800      	cmp	r0, #0
 8003cb4:	f43f aedf 	beq.w	8003a76 <_scanf_float+0x46>
 8003cb8:	e6ea      	b.n	8003a90 <_scanf_float+0x60>
 8003cba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003cbe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003cc2:	463a      	mov	r2, r7
 8003cc4:	4640      	mov	r0, r8
 8003cc6:	4798      	blx	r3
 8003cc8:	6923      	ldr	r3, [r4, #16]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	6123      	str	r3, [r4, #16]
 8003cce:	e6ec      	b.n	8003aaa <_scanf_float+0x7a>
 8003cd0:	1e6b      	subs	r3, r5, #1
 8003cd2:	2b06      	cmp	r3, #6
 8003cd4:	d825      	bhi.n	8003d22 <_scanf_float+0x2f2>
 8003cd6:	2d02      	cmp	r5, #2
 8003cd8:	d836      	bhi.n	8003d48 <_scanf_float+0x318>
 8003cda:	455e      	cmp	r6, fp
 8003cdc:	f67f aee8 	bls.w	8003ab0 <_scanf_float+0x80>
 8003ce0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003ce4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003ce8:	463a      	mov	r2, r7
 8003cea:	4640      	mov	r0, r8
 8003cec:	4798      	blx	r3
 8003cee:	6923      	ldr	r3, [r4, #16]
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	6123      	str	r3, [r4, #16]
 8003cf4:	e7f1      	b.n	8003cda <_scanf_float+0x2aa>
 8003cf6:	9802      	ldr	r0, [sp, #8]
 8003cf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003cfc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003d00:	9002      	str	r0, [sp, #8]
 8003d02:	463a      	mov	r2, r7
 8003d04:	4640      	mov	r0, r8
 8003d06:	4798      	blx	r3
 8003d08:	6923      	ldr	r3, [r4, #16]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	6123      	str	r3, [r4, #16]
 8003d0e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003d12:	fa5f fa8a 	uxtb.w	sl, sl
 8003d16:	f1ba 0f02 	cmp.w	sl, #2
 8003d1a:	d1ec      	bne.n	8003cf6 <_scanf_float+0x2c6>
 8003d1c:	3d03      	subs	r5, #3
 8003d1e:	b2ed      	uxtb	r5, r5
 8003d20:	1b76      	subs	r6, r6, r5
 8003d22:	6823      	ldr	r3, [r4, #0]
 8003d24:	05da      	lsls	r2, r3, #23
 8003d26:	d52f      	bpl.n	8003d88 <_scanf_float+0x358>
 8003d28:	055b      	lsls	r3, r3, #21
 8003d2a:	d510      	bpl.n	8003d4e <_scanf_float+0x31e>
 8003d2c:	455e      	cmp	r6, fp
 8003d2e:	f67f aebf 	bls.w	8003ab0 <_scanf_float+0x80>
 8003d32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003d3a:	463a      	mov	r2, r7
 8003d3c:	4640      	mov	r0, r8
 8003d3e:	4798      	blx	r3
 8003d40:	6923      	ldr	r3, [r4, #16]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	6123      	str	r3, [r4, #16]
 8003d46:	e7f1      	b.n	8003d2c <_scanf_float+0x2fc>
 8003d48:	46aa      	mov	sl, r5
 8003d4a:	9602      	str	r6, [sp, #8]
 8003d4c:	e7df      	b.n	8003d0e <_scanf_float+0x2de>
 8003d4e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003d52:	6923      	ldr	r3, [r4, #16]
 8003d54:	2965      	cmp	r1, #101	; 0x65
 8003d56:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003d5a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8003d5e:	6123      	str	r3, [r4, #16]
 8003d60:	d00c      	beq.n	8003d7c <_scanf_float+0x34c>
 8003d62:	2945      	cmp	r1, #69	; 0x45
 8003d64:	d00a      	beq.n	8003d7c <_scanf_float+0x34c>
 8003d66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d6a:	463a      	mov	r2, r7
 8003d6c:	4640      	mov	r0, r8
 8003d6e:	4798      	blx	r3
 8003d70:	6923      	ldr	r3, [r4, #16]
 8003d72:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	1eb5      	subs	r5, r6, #2
 8003d7a:	6123      	str	r3, [r4, #16]
 8003d7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d80:	463a      	mov	r2, r7
 8003d82:	4640      	mov	r0, r8
 8003d84:	4798      	blx	r3
 8003d86:	462e      	mov	r6, r5
 8003d88:	6825      	ldr	r5, [r4, #0]
 8003d8a:	f015 0510 	ands.w	r5, r5, #16
 8003d8e:	d155      	bne.n	8003e3c <_scanf_float+0x40c>
 8003d90:	7035      	strb	r5, [r6, #0]
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9c:	d11b      	bne.n	8003dd6 <_scanf_float+0x3a6>
 8003d9e:	9b01      	ldr	r3, [sp, #4]
 8003da0:	454b      	cmp	r3, r9
 8003da2:	eba3 0209 	sub.w	r2, r3, r9
 8003da6:	d123      	bne.n	8003df0 <_scanf_float+0x3c0>
 8003da8:	2200      	movs	r2, #0
 8003daa:	4659      	mov	r1, fp
 8003dac:	4640      	mov	r0, r8
 8003dae:	f000 fe7b 	bl	8004aa8 <_strtod_r>
 8003db2:	6822      	ldr	r2, [r4, #0]
 8003db4:	9b03      	ldr	r3, [sp, #12]
 8003db6:	f012 0f02 	tst.w	r2, #2
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4606      	mov	r6, r0
 8003dbe:	460f      	mov	r7, r1
 8003dc0:	d021      	beq.n	8003e06 <_scanf_float+0x3d6>
 8003dc2:	1d1a      	adds	r2, r3, #4
 8003dc4:	9903      	ldr	r1, [sp, #12]
 8003dc6:	600a      	str	r2, [r1, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	e9c3 6700 	strd	r6, r7, [r3]
 8003dce:	68e3      	ldr	r3, [r4, #12]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	60e3      	str	r3, [r4, #12]
 8003dd4:	e66d      	b.n	8003ab2 <_scanf_float+0x82>
 8003dd6:	9b04      	ldr	r3, [sp, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0e5      	beq.n	8003da8 <_scanf_float+0x378>
 8003ddc:	9905      	ldr	r1, [sp, #20]
 8003dde:	230a      	movs	r3, #10
 8003de0:	462a      	mov	r2, r5
 8003de2:	3101      	adds	r1, #1
 8003de4:	4640      	mov	r0, r8
 8003de6:	f000 fee1 	bl	8004bac <_strtol_r>
 8003dea:	9b04      	ldr	r3, [sp, #16]
 8003dec:	9e05      	ldr	r6, [sp, #20]
 8003dee:	1ac2      	subs	r2, r0, r3
 8003df0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003df4:	429e      	cmp	r6, r3
 8003df6:	bf28      	it	cs
 8003df8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003dfc:	4910      	ldr	r1, [pc, #64]	; (8003e40 <_scanf_float+0x410>)
 8003dfe:	4630      	mov	r0, r6
 8003e00:	f000 f826 	bl	8003e50 <siprintf>
 8003e04:	e7d0      	b.n	8003da8 <_scanf_float+0x378>
 8003e06:	f012 0f04 	tst.w	r2, #4
 8003e0a:	f103 0204 	add.w	r2, r3, #4
 8003e0e:	d1d9      	bne.n	8003dc4 <_scanf_float+0x394>
 8003e10:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003e14:	f8cc 2000 	str.w	r2, [ip]
 8003e18:	f8d3 8000 	ldr.w	r8, [r3]
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	f7fc ff40 	bl	8000ca4 <__aeabi_dcmpun>
 8003e24:	b128      	cbz	r0, 8003e32 <_scanf_float+0x402>
 8003e26:	4807      	ldr	r0, [pc, #28]	; (8003e44 <_scanf_float+0x414>)
 8003e28:	f000 f80e 	bl	8003e48 <nanf>
 8003e2c:	f8c8 0000 	str.w	r0, [r8]
 8003e30:	e7cd      	b.n	8003dce <_scanf_float+0x39e>
 8003e32:	4630      	mov	r0, r6
 8003e34:	4639      	mov	r1, r7
 8003e36:	f7fc ff93 	bl	8000d60 <__aeabi_d2f>
 8003e3a:	e7f7      	b.n	8003e2c <_scanf_float+0x3fc>
 8003e3c:	2500      	movs	r5, #0
 8003e3e:	e638      	b.n	8003ab2 <_scanf_float+0x82>
 8003e40:	08007bd0 	.word	0x08007bd0
 8003e44:	08007fd8 	.word	0x08007fd8

08003e48 <nanf>:
 8003e48:	4800      	ldr	r0, [pc, #0]	; (8003e4c <nanf+0x4>)
 8003e4a:	4770      	bx	lr
 8003e4c:	7fc00000 	.word	0x7fc00000

08003e50 <siprintf>:
 8003e50:	b40e      	push	{r1, r2, r3}
 8003e52:	b500      	push	{lr}
 8003e54:	b09c      	sub	sp, #112	; 0x70
 8003e56:	ab1d      	add	r3, sp, #116	; 0x74
 8003e58:	9002      	str	r0, [sp, #8]
 8003e5a:	9006      	str	r0, [sp, #24]
 8003e5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e60:	4809      	ldr	r0, [pc, #36]	; (8003e88 <siprintf+0x38>)
 8003e62:	9107      	str	r1, [sp, #28]
 8003e64:	9104      	str	r1, [sp, #16]
 8003e66:	4909      	ldr	r1, [pc, #36]	; (8003e8c <siprintf+0x3c>)
 8003e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e6c:	9105      	str	r1, [sp, #20]
 8003e6e:	6800      	ldr	r0, [r0, #0]
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	a902      	add	r1, sp, #8
 8003e74:	f002 feac 	bl	8006bd0 <_svfiprintf_r>
 8003e78:	9b02      	ldr	r3, [sp, #8]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	701a      	strb	r2, [r3, #0]
 8003e7e:	b01c      	add	sp, #112	; 0x70
 8003e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e84:	b003      	add	sp, #12
 8003e86:	4770      	bx	lr
 8003e88:	20000044 	.word	0x20000044
 8003e8c:	ffff0208 	.word	0xffff0208

08003e90 <sulp>:
 8003e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e94:	460f      	mov	r7, r1
 8003e96:	4690      	mov	r8, r2
 8003e98:	f002 fc04 	bl	80066a4 <__ulp>
 8003e9c:	4604      	mov	r4, r0
 8003e9e:	460d      	mov	r5, r1
 8003ea0:	f1b8 0f00 	cmp.w	r8, #0
 8003ea4:	d011      	beq.n	8003eca <sulp+0x3a>
 8003ea6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003eaa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	dd0b      	ble.n	8003eca <sulp+0x3a>
 8003eb2:	051b      	lsls	r3, r3, #20
 8003eb4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003eb8:	2400      	movs	r4, #0
 8003eba:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003ebe:	4622      	mov	r2, r4
 8003ec0:	462b      	mov	r3, r5
 8003ec2:	f7fc fc55 	bl	8000770 <__aeabi_dmul>
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	460d      	mov	r5, r1
 8003eca:	4620      	mov	r0, r4
 8003ecc:	4629      	mov	r1, r5
 8003ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ed2:	0000      	movs	r0, r0
 8003ed4:	0000      	movs	r0, r0
	...

08003ed8 <_strtod_l>:
 8003ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003edc:	b09f      	sub	sp, #124	; 0x7c
 8003ede:	469b      	mov	fp, r3
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	931a      	str	r3, [sp, #104]	; 0x68
 8003ee4:	4b9e      	ldr	r3, [pc, #632]	; (8004160 <_strtod_l+0x288>)
 8003ee6:	9215      	str	r2, [sp, #84]	; 0x54
 8003ee8:	681f      	ldr	r7, [r3, #0]
 8003eea:	4682      	mov	sl, r0
 8003eec:	4638      	mov	r0, r7
 8003eee:	460e      	mov	r6, r1
 8003ef0:	f7fc f976 	bl	80001e0 <strlen>
 8003ef4:	f04f 0800 	mov.w	r8, #0
 8003ef8:	4604      	mov	r4, r0
 8003efa:	f04f 0900 	mov.w	r9, #0
 8003efe:	9619      	str	r6, [sp, #100]	; 0x64
 8003f00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003f02:	781a      	ldrb	r2, [r3, #0]
 8003f04:	2a2b      	cmp	r2, #43	; 0x2b
 8003f06:	d04c      	beq.n	8003fa2 <_strtod_l+0xca>
 8003f08:	d83a      	bhi.n	8003f80 <_strtod_l+0xa8>
 8003f0a:	2a0d      	cmp	r2, #13
 8003f0c:	d833      	bhi.n	8003f76 <_strtod_l+0x9e>
 8003f0e:	2a08      	cmp	r2, #8
 8003f10:	d833      	bhi.n	8003f7a <_strtod_l+0xa2>
 8003f12:	2a00      	cmp	r2, #0
 8003f14:	d03d      	beq.n	8003f92 <_strtod_l+0xba>
 8003f16:	2300      	movs	r3, #0
 8003f18:	930a      	str	r3, [sp, #40]	; 0x28
 8003f1a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8003f1c:	782b      	ldrb	r3, [r5, #0]
 8003f1e:	2b30      	cmp	r3, #48	; 0x30
 8003f20:	f040 80aa 	bne.w	8004078 <_strtod_l+0x1a0>
 8003f24:	786b      	ldrb	r3, [r5, #1]
 8003f26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003f2a:	2b58      	cmp	r3, #88	; 0x58
 8003f2c:	d166      	bne.n	8003ffc <_strtod_l+0x124>
 8003f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f30:	9301      	str	r3, [sp, #4]
 8003f32:	ab1a      	add	r3, sp, #104	; 0x68
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	4a8b      	ldr	r2, [pc, #556]	; (8004164 <_strtod_l+0x28c>)
 8003f38:	f8cd b008 	str.w	fp, [sp, #8]
 8003f3c:	ab1b      	add	r3, sp, #108	; 0x6c
 8003f3e:	a919      	add	r1, sp, #100	; 0x64
 8003f40:	4650      	mov	r0, sl
 8003f42:	f001 fd19 	bl	8005978 <__gethex>
 8003f46:	f010 0607 	ands.w	r6, r0, #7
 8003f4a:	4604      	mov	r4, r0
 8003f4c:	d005      	beq.n	8003f5a <_strtod_l+0x82>
 8003f4e:	2e06      	cmp	r6, #6
 8003f50:	d129      	bne.n	8003fa6 <_strtod_l+0xce>
 8003f52:	3501      	adds	r5, #1
 8003f54:	2300      	movs	r3, #0
 8003f56:	9519      	str	r5, [sp, #100]	; 0x64
 8003f58:	930a      	str	r3, [sp, #40]	; 0x28
 8003f5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f040 858a 	bne.w	8004a76 <_strtod_l+0xb9e>
 8003f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f64:	b1d3      	cbz	r3, 8003f9c <_strtod_l+0xc4>
 8003f66:	4642      	mov	r2, r8
 8003f68:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	4619      	mov	r1, r3
 8003f70:	b01f      	add	sp, #124	; 0x7c
 8003f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f76:	2a20      	cmp	r2, #32
 8003f78:	d1cd      	bne.n	8003f16 <_strtod_l+0x3e>
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	9319      	str	r3, [sp, #100]	; 0x64
 8003f7e:	e7bf      	b.n	8003f00 <_strtod_l+0x28>
 8003f80:	2a2d      	cmp	r2, #45	; 0x2d
 8003f82:	d1c8      	bne.n	8003f16 <_strtod_l+0x3e>
 8003f84:	2201      	movs	r2, #1
 8003f86:	920a      	str	r2, [sp, #40]	; 0x28
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	9219      	str	r2, [sp, #100]	; 0x64
 8003f8c:	785b      	ldrb	r3, [r3, #1]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1c3      	bne.n	8003f1a <_strtod_l+0x42>
 8003f92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003f94:	9619      	str	r6, [sp, #100]	; 0x64
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f040 856b 	bne.w	8004a72 <_strtod_l+0xb9a>
 8003f9c:	4642      	mov	r2, r8
 8003f9e:	464b      	mov	r3, r9
 8003fa0:	e7e4      	b.n	8003f6c <_strtod_l+0x94>
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	e7ef      	b.n	8003f86 <_strtod_l+0xae>
 8003fa6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003fa8:	b13a      	cbz	r2, 8003fba <_strtod_l+0xe2>
 8003faa:	2135      	movs	r1, #53	; 0x35
 8003fac:	a81c      	add	r0, sp, #112	; 0x70
 8003fae:	f002 fc7d 	bl	80068ac <__copybits>
 8003fb2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003fb4:	4650      	mov	r0, sl
 8003fb6:	f002 f849 	bl	800604c <_Bfree>
 8003fba:	3e01      	subs	r6, #1
 8003fbc:	2e04      	cmp	r6, #4
 8003fbe:	d806      	bhi.n	8003fce <_strtod_l+0xf6>
 8003fc0:	e8df f006 	tbb	[pc, r6]
 8003fc4:	1714030a 	.word	0x1714030a
 8003fc8:	0a          	.byte	0x0a
 8003fc9:	00          	.byte	0x00
 8003fca:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8003fce:	0721      	lsls	r1, r4, #28
 8003fd0:	d5c3      	bpl.n	8003f5a <_strtod_l+0x82>
 8003fd2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8003fd6:	e7c0      	b.n	8003f5a <_strtod_l+0x82>
 8003fd8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8003fdc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003fde:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003fe2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003fe6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8003fea:	e7f0      	b.n	8003fce <_strtod_l+0xf6>
 8003fec:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004168 <_strtod_l+0x290>
 8003ff0:	e7ed      	b.n	8003fce <_strtod_l+0xf6>
 8003ff2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8003ff6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8003ffa:	e7e8      	b.n	8003fce <_strtod_l+0xf6>
 8003ffc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	9219      	str	r2, [sp, #100]	; 0x64
 8004002:	785b      	ldrb	r3, [r3, #1]
 8004004:	2b30      	cmp	r3, #48	; 0x30
 8004006:	d0f9      	beq.n	8003ffc <_strtod_l+0x124>
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0a6      	beq.n	8003f5a <_strtod_l+0x82>
 800400c:	2301      	movs	r3, #1
 800400e:	9307      	str	r3, [sp, #28]
 8004010:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004012:	9308      	str	r3, [sp, #32]
 8004014:	2300      	movs	r3, #0
 8004016:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800401a:	469b      	mov	fp, r3
 800401c:	220a      	movs	r2, #10
 800401e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004020:	7805      	ldrb	r5, [r0, #0]
 8004022:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004026:	b2d9      	uxtb	r1, r3
 8004028:	2909      	cmp	r1, #9
 800402a:	d927      	bls.n	800407c <_strtod_l+0x1a4>
 800402c:	4622      	mov	r2, r4
 800402e:	4639      	mov	r1, r7
 8004030:	f002 fee4 	bl	8006dfc <strncmp>
 8004034:	2800      	cmp	r0, #0
 8004036:	d033      	beq.n	80040a0 <_strtod_l+0x1c8>
 8004038:	2000      	movs	r0, #0
 800403a:	462a      	mov	r2, r5
 800403c:	465c      	mov	r4, fp
 800403e:	9004      	str	r0, [sp, #16]
 8004040:	4603      	mov	r3, r0
 8004042:	2a65      	cmp	r2, #101	; 0x65
 8004044:	d001      	beq.n	800404a <_strtod_l+0x172>
 8004046:	2a45      	cmp	r2, #69	; 0x45
 8004048:	d114      	bne.n	8004074 <_strtod_l+0x19c>
 800404a:	b91c      	cbnz	r4, 8004054 <_strtod_l+0x17c>
 800404c:	9a07      	ldr	r2, [sp, #28]
 800404e:	4302      	orrs	r2, r0
 8004050:	d09f      	beq.n	8003f92 <_strtod_l+0xba>
 8004052:	2400      	movs	r4, #0
 8004054:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004056:	1c72      	adds	r2, r6, #1
 8004058:	9219      	str	r2, [sp, #100]	; 0x64
 800405a:	7872      	ldrb	r2, [r6, #1]
 800405c:	2a2b      	cmp	r2, #43	; 0x2b
 800405e:	d079      	beq.n	8004154 <_strtod_l+0x27c>
 8004060:	2a2d      	cmp	r2, #45	; 0x2d
 8004062:	f000 8083 	beq.w	800416c <_strtod_l+0x294>
 8004066:	2700      	movs	r7, #0
 8004068:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800406c:	2909      	cmp	r1, #9
 800406e:	f240 8083 	bls.w	8004178 <_strtod_l+0x2a0>
 8004072:	9619      	str	r6, [sp, #100]	; 0x64
 8004074:	2500      	movs	r5, #0
 8004076:	e09f      	b.n	80041b8 <_strtod_l+0x2e0>
 8004078:	2300      	movs	r3, #0
 800407a:	e7c8      	b.n	800400e <_strtod_l+0x136>
 800407c:	f1bb 0f08 	cmp.w	fp, #8
 8004080:	bfd5      	itete	le
 8004082:	9906      	ldrle	r1, [sp, #24]
 8004084:	9905      	ldrgt	r1, [sp, #20]
 8004086:	fb02 3301 	mlale	r3, r2, r1, r3
 800408a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800408e:	f100 0001 	add.w	r0, r0, #1
 8004092:	bfd4      	ite	le
 8004094:	9306      	strle	r3, [sp, #24]
 8004096:	9305      	strgt	r3, [sp, #20]
 8004098:	f10b 0b01 	add.w	fp, fp, #1
 800409c:	9019      	str	r0, [sp, #100]	; 0x64
 800409e:	e7be      	b.n	800401e <_strtod_l+0x146>
 80040a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80040a2:	191a      	adds	r2, r3, r4
 80040a4:	9219      	str	r2, [sp, #100]	; 0x64
 80040a6:	5d1a      	ldrb	r2, [r3, r4]
 80040a8:	f1bb 0f00 	cmp.w	fp, #0
 80040ac:	d036      	beq.n	800411c <_strtod_l+0x244>
 80040ae:	9004      	str	r0, [sp, #16]
 80040b0:	465c      	mov	r4, fp
 80040b2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80040b6:	2b09      	cmp	r3, #9
 80040b8:	d912      	bls.n	80040e0 <_strtod_l+0x208>
 80040ba:	2301      	movs	r3, #1
 80040bc:	e7c1      	b.n	8004042 <_strtod_l+0x16a>
 80040be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	9219      	str	r2, [sp, #100]	; 0x64
 80040c4:	785a      	ldrb	r2, [r3, #1]
 80040c6:	3001      	adds	r0, #1
 80040c8:	2a30      	cmp	r2, #48	; 0x30
 80040ca:	d0f8      	beq.n	80040be <_strtod_l+0x1e6>
 80040cc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80040d0:	2b08      	cmp	r3, #8
 80040d2:	f200 84d5 	bhi.w	8004a80 <_strtod_l+0xba8>
 80040d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80040d8:	9004      	str	r0, [sp, #16]
 80040da:	2000      	movs	r0, #0
 80040dc:	9308      	str	r3, [sp, #32]
 80040de:	4604      	mov	r4, r0
 80040e0:	3a30      	subs	r2, #48	; 0x30
 80040e2:	f100 0301 	add.w	r3, r0, #1
 80040e6:	d013      	beq.n	8004110 <_strtod_l+0x238>
 80040e8:	9904      	ldr	r1, [sp, #16]
 80040ea:	4419      	add	r1, r3
 80040ec:	9104      	str	r1, [sp, #16]
 80040ee:	4623      	mov	r3, r4
 80040f0:	1905      	adds	r5, r0, r4
 80040f2:	210a      	movs	r1, #10
 80040f4:	42ab      	cmp	r3, r5
 80040f6:	d113      	bne.n	8004120 <_strtod_l+0x248>
 80040f8:	1823      	adds	r3, r4, r0
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	f104 0401 	add.w	r4, r4, #1
 8004100:	4404      	add	r4, r0
 8004102:	dc1b      	bgt.n	800413c <_strtod_l+0x264>
 8004104:	9906      	ldr	r1, [sp, #24]
 8004106:	230a      	movs	r3, #10
 8004108:	fb03 2301 	mla	r3, r3, r1, r2
 800410c:	9306      	str	r3, [sp, #24]
 800410e:	2300      	movs	r3, #0
 8004110:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004112:	1c51      	adds	r1, r2, #1
 8004114:	9119      	str	r1, [sp, #100]	; 0x64
 8004116:	7852      	ldrb	r2, [r2, #1]
 8004118:	4618      	mov	r0, r3
 800411a:	e7ca      	b.n	80040b2 <_strtod_l+0x1da>
 800411c:	4658      	mov	r0, fp
 800411e:	e7d3      	b.n	80040c8 <_strtod_l+0x1f0>
 8004120:	2b08      	cmp	r3, #8
 8004122:	dc04      	bgt.n	800412e <_strtod_l+0x256>
 8004124:	9f06      	ldr	r7, [sp, #24]
 8004126:	434f      	muls	r7, r1
 8004128:	9706      	str	r7, [sp, #24]
 800412a:	3301      	adds	r3, #1
 800412c:	e7e2      	b.n	80040f4 <_strtod_l+0x21c>
 800412e:	1c5f      	adds	r7, r3, #1
 8004130:	2f10      	cmp	r7, #16
 8004132:	bfde      	ittt	le
 8004134:	9f05      	ldrle	r7, [sp, #20]
 8004136:	434f      	mulle	r7, r1
 8004138:	9705      	strle	r7, [sp, #20]
 800413a:	e7f6      	b.n	800412a <_strtod_l+0x252>
 800413c:	2c10      	cmp	r4, #16
 800413e:	bfdf      	itttt	le
 8004140:	9905      	ldrle	r1, [sp, #20]
 8004142:	230a      	movle	r3, #10
 8004144:	fb03 2301 	mlale	r3, r3, r1, r2
 8004148:	9305      	strle	r3, [sp, #20]
 800414a:	e7e0      	b.n	800410e <_strtod_l+0x236>
 800414c:	2300      	movs	r3, #0
 800414e:	9304      	str	r3, [sp, #16]
 8004150:	2301      	movs	r3, #1
 8004152:	e77b      	b.n	800404c <_strtod_l+0x174>
 8004154:	2700      	movs	r7, #0
 8004156:	1cb2      	adds	r2, r6, #2
 8004158:	9219      	str	r2, [sp, #100]	; 0x64
 800415a:	78b2      	ldrb	r2, [r6, #2]
 800415c:	e784      	b.n	8004068 <_strtod_l+0x190>
 800415e:	bf00      	nop
 8004160:	08007e20 	.word	0x08007e20
 8004164:	08007bd8 	.word	0x08007bd8
 8004168:	7ff00000 	.word	0x7ff00000
 800416c:	2701      	movs	r7, #1
 800416e:	e7f2      	b.n	8004156 <_strtod_l+0x27e>
 8004170:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004172:	1c51      	adds	r1, r2, #1
 8004174:	9119      	str	r1, [sp, #100]	; 0x64
 8004176:	7852      	ldrb	r2, [r2, #1]
 8004178:	2a30      	cmp	r2, #48	; 0x30
 800417a:	d0f9      	beq.n	8004170 <_strtod_l+0x298>
 800417c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004180:	2908      	cmp	r1, #8
 8004182:	f63f af77 	bhi.w	8004074 <_strtod_l+0x19c>
 8004186:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800418a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800418c:	9209      	str	r2, [sp, #36]	; 0x24
 800418e:	f04f 0e0a 	mov.w	lr, #10
 8004192:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004194:	1c51      	adds	r1, r2, #1
 8004196:	9119      	str	r1, [sp, #100]	; 0x64
 8004198:	7852      	ldrb	r2, [r2, #1]
 800419a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800419e:	2d09      	cmp	r5, #9
 80041a0:	d935      	bls.n	800420e <_strtod_l+0x336>
 80041a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80041a4:	1b49      	subs	r1, r1, r5
 80041a6:	2908      	cmp	r1, #8
 80041a8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80041ac:	dc02      	bgt.n	80041b4 <_strtod_l+0x2dc>
 80041ae:	4565      	cmp	r5, ip
 80041b0:	bfa8      	it	ge
 80041b2:	4665      	movge	r5, ip
 80041b4:	b107      	cbz	r7, 80041b8 <_strtod_l+0x2e0>
 80041b6:	426d      	negs	r5, r5
 80041b8:	2c00      	cmp	r4, #0
 80041ba:	d14c      	bne.n	8004256 <_strtod_l+0x37e>
 80041bc:	9907      	ldr	r1, [sp, #28]
 80041be:	4301      	orrs	r1, r0
 80041c0:	f47f aecb 	bne.w	8003f5a <_strtod_l+0x82>
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f47f aee4 	bne.w	8003f92 <_strtod_l+0xba>
 80041ca:	2a69      	cmp	r2, #105	; 0x69
 80041cc:	d026      	beq.n	800421c <_strtod_l+0x344>
 80041ce:	dc23      	bgt.n	8004218 <_strtod_l+0x340>
 80041d0:	2a49      	cmp	r2, #73	; 0x49
 80041d2:	d023      	beq.n	800421c <_strtod_l+0x344>
 80041d4:	2a4e      	cmp	r2, #78	; 0x4e
 80041d6:	f47f aedc 	bne.w	8003f92 <_strtod_l+0xba>
 80041da:	499d      	ldr	r1, [pc, #628]	; (8004450 <_strtod_l+0x578>)
 80041dc:	a819      	add	r0, sp, #100	; 0x64
 80041de:	f001 fe19 	bl	8005e14 <__match>
 80041e2:	2800      	cmp	r0, #0
 80041e4:	f43f aed5 	beq.w	8003f92 <_strtod_l+0xba>
 80041e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b28      	cmp	r3, #40	; 0x28
 80041ee:	d12c      	bne.n	800424a <_strtod_l+0x372>
 80041f0:	4998      	ldr	r1, [pc, #608]	; (8004454 <_strtod_l+0x57c>)
 80041f2:	aa1c      	add	r2, sp, #112	; 0x70
 80041f4:	a819      	add	r0, sp, #100	; 0x64
 80041f6:	f001 fe21 	bl	8005e3c <__hexnan>
 80041fa:	2805      	cmp	r0, #5
 80041fc:	d125      	bne.n	800424a <_strtod_l+0x372>
 80041fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004200:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004204:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004208:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800420c:	e6a5      	b.n	8003f5a <_strtod_l+0x82>
 800420e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8004212:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004216:	e7bc      	b.n	8004192 <_strtod_l+0x2ba>
 8004218:	2a6e      	cmp	r2, #110	; 0x6e
 800421a:	e7dc      	b.n	80041d6 <_strtod_l+0x2fe>
 800421c:	498e      	ldr	r1, [pc, #568]	; (8004458 <_strtod_l+0x580>)
 800421e:	a819      	add	r0, sp, #100	; 0x64
 8004220:	f001 fdf8 	bl	8005e14 <__match>
 8004224:	2800      	cmp	r0, #0
 8004226:	f43f aeb4 	beq.w	8003f92 <_strtod_l+0xba>
 800422a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800422c:	498b      	ldr	r1, [pc, #556]	; (800445c <_strtod_l+0x584>)
 800422e:	3b01      	subs	r3, #1
 8004230:	a819      	add	r0, sp, #100	; 0x64
 8004232:	9319      	str	r3, [sp, #100]	; 0x64
 8004234:	f001 fdee 	bl	8005e14 <__match>
 8004238:	b910      	cbnz	r0, 8004240 <_strtod_l+0x368>
 800423a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800423c:	3301      	adds	r3, #1
 800423e:	9319      	str	r3, [sp, #100]	; 0x64
 8004240:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8004460 <_strtod_l+0x588>
 8004244:	f04f 0800 	mov.w	r8, #0
 8004248:	e687      	b.n	8003f5a <_strtod_l+0x82>
 800424a:	4886      	ldr	r0, [pc, #536]	; (8004464 <_strtod_l+0x58c>)
 800424c:	f002 fdc0 	bl	8006dd0 <nan>
 8004250:	4680      	mov	r8, r0
 8004252:	4689      	mov	r9, r1
 8004254:	e681      	b.n	8003f5a <_strtod_l+0x82>
 8004256:	9b04      	ldr	r3, [sp, #16]
 8004258:	9806      	ldr	r0, [sp, #24]
 800425a:	1aeb      	subs	r3, r5, r3
 800425c:	f1bb 0f00 	cmp.w	fp, #0
 8004260:	bf08      	it	eq
 8004262:	46a3      	moveq	fp, r4
 8004264:	2c10      	cmp	r4, #16
 8004266:	9307      	str	r3, [sp, #28]
 8004268:	4626      	mov	r6, r4
 800426a:	bfa8      	it	ge
 800426c:	2610      	movge	r6, #16
 800426e:	f7fc fa05 	bl	800067c <__aeabi_ui2d>
 8004272:	2c09      	cmp	r4, #9
 8004274:	4680      	mov	r8, r0
 8004276:	4689      	mov	r9, r1
 8004278:	dd13      	ble.n	80042a2 <_strtod_l+0x3ca>
 800427a:	4b7b      	ldr	r3, [pc, #492]	; (8004468 <_strtod_l+0x590>)
 800427c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004280:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004284:	f7fc fa74 	bl	8000770 <__aeabi_dmul>
 8004288:	4680      	mov	r8, r0
 800428a:	9805      	ldr	r0, [sp, #20]
 800428c:	4689      	mov	r9, r1
 800428e:	f7fc f9f5 	bl	800067c <__aeabi_ui2d>
 8004292:	4602      	mov	r2, r0
 8004294:	460b      	mov	r3, r1
 8004296:	4640      	mov	r0, r8
 8004298:	4649      	mov	r1, r9
 800429a:	f7fc f8b3 	bl	8000404 <__adddf3>
 800429e:	4680      	mov	r8, r0
 80042a0:	4689      	mov	r9, r1
 80042a2:	2c0f      	cmp	r4, #15
 80042a4:	dc36      	bgt.n	8004314 <_strtod_l+0x43c>
 80042a6:	9b07      	ldr	r3, [sp, #28]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f43f ae56 	beq.w	8003f5a <_strtod_l+0x82>
 80042ae:	dd22      	ble.n	80042f6 <_strtod_l+0x41e>
 80042b0:	2b16      	cmp	r3, #22
 80042b2:	dc09      	bgt.n	80042c8 <_strtod_l+0x3f0>
 80042b4:	496c      	ldr	r1, [pc, #432]	; (8004468 <_strtod_l+0x590>)
 80042b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80042ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042be:	4642      	mov	r2, r8
 80042c0:	464b      	mov	r3, r9
 80042c2:	f7fc fa55 	bl	8000770 <__aeabi_dmul>
 80042c6:	e7c3      	b.n	8004250 <_strtod_l+0x378>
 80042c8:	9a07      	ldr	r2, [sp, #28]
 80042ca:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80042ce:	4293      	cmp	r3, r2
 80042d0:	db20      	blt.n	8004314 <_strtod_l+0x43c>
 80042d2:	4d65      	ldr	r5, [pc, #404]	; (8004468 <_strtod_l+0x590>)
 80042d4:	f1c4 040f 	rsb	r4, r4, #15
 80042d8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80042dc:	4642      	mov	r2, r8
 80042de:	464b      	mov	r3, r9
 80042e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042e4:	f7fc fa44 	bl	8000770 <__aeabi_dmul>
 80042e8:	9b07      	ldr	r3, [sp, #28]
 80042ea:	1b1c      	subs	r4, r3, r4
 80042ec:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80042f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80042f4:	e7e5      	b.n	80042c2 <_strtod_l+0x3ea>
 80042f6:	9b07      	ldr	r3, [sp, #28]
 80042f8:	3316      	adds	r3, #22
 80042fa:	db0b      	blt.n	8004314 <_strtod_l+0x43c>
 80042fc:	9b04      	ldr	r3, [sp, #16]
 80042fe:	1b5d      	subs	r5, r3, r5
 8004300:	4b59      	ldr	r3, [pc, #356]	; (8004468 <_strtod_l+0x590>)
 8004302:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004306:	e9d5 2300 	ldrd	r2, r3, [r5]
 800430a:	4640      	mov	r0, r8
 800430c:	4649      	mov	r1, r9
 800430e:	f7fc fb59 	bl	80009c4 <__aeabi_ddiv>
 8004312:	e79d      	b.n	8004250 <_strtod_l+0x378>
 8004314:	9b07      	ldr	r3, [sp, #28]
 8004316:	1ba6      	subs	r6, r4, r6
 8004318:	441e      	add	r6, r3
 800431a:	2e00      	cmp	r6, #0
 800431c:	dd74      	ble.n	8004408 <_strtod_l+0x530>
 800431e:	f016 030f 	ands.w	r3, r6, #15
 8004322:	d00a      	beq.n	800433a <_strtod_l+0x462>
 8004324:	4950      	ldr	r1, [pc, #320]	; (8004468 <_strtod_l+0x590>)
 8004326:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800432a:	4642      	mov	r2, r8
 800432c:	464b      	mov	r3, r9
 800432e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004332:	f7fc fa1d 	bl	8000770 <__aeabi_dmul>
 8004336:	4680      	mov	r8, r0
 8004338:	4689      	mov	r9, r1
 800433a:	f036 060f 	bics.w	r6, r6, #15
 800433e:	d052      	beq.n	80043e6 <_strtod_l+0x50e>
 8004340:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8004344:	dd27      	ble.n	8004396 <_strtod_l+0x4be>
 8004346:	f04f 0b00 	mov.w	fp, #0
 800434a:	f8cd b010 	str.w	fp, [sp, #16]
 800434e:	f8cd b020 	str.w	fp, [sp, #32]
 8004352:	f8cd b018 	str.w	fp, [sp, #24]
 8004356:	2322      	movs	r3, #34	; 0x22
 8004358:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8004460 <_strtod_l+0x588>
 800435c:	f8ca 3000 	str.w	r3, [sl]
 8004360:	f04f 0800 	mov.w	r8, #0
 8004364:	9b08      	ldr	r3, [sp, #32]
 8004366:	2b00      	cmp	r3, #0
 8004368:	f43f adf7 	beq.w	8003f5a <_strtod_l+0x82>
 800436c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800436e:	4650      	mov	r0, sl
 8004370:	f001 fe6c 	bl	800604c <_Bfree>
 8004374:	9906      	ldr	r1, [sp, #24]
 8004376:	4650      	mov	r0, sl
 8004378:	f001 fe68 	bl	800604c <_Bfree>
 800437c:	9904      	ldr	r1, [sp, #16]
 800437e:	4650      	mov	r0, sl
 8004380:	f001 fe64 	bl	800604c <_Bfree>
 8004384:	9908      	ldr	r1, [sp, #32]
 8004386:	4650      	mov	r0, sl
 8004388:	f001 fe60 	bl	800604c <_Bfree>
 800438c:	4659      	mov	r1, fp
 800438e:	4650      	mov	r0, sl
 8004390:	f001 fe5c 	bl	800604c <_Bfree>
 8004394:	e5e1      	b.n	8003f5a <_strtod_l+0x82>
 8004396:	4b35      	ldr	r3, [pc, #212]	; (800446c <_strtod_l+0x594>)
 8004398:	9305      	str	r3, [sp, #20]
 800439a:	2300      	movs	r3, #0
 800439c:	1136      	asrs	r6, r6, #4
 800439e:	4640      	mov	r0, r8
 80043a0:	4649      	mov	r1, r9
 80043a2:	461f      	mov	r7, r3
 80043a4:	2e01      	cmp	r6, #1
 80043a6:	dc21      	bgt.n	80043ec <_strtod_l+0x514>
 80043a8:	b10b      	cbz	r3, 80043ae <_strtod_l+0x4d6>
 80043aa:	4680      	mov	r8, r0
 80043ac:	4689      	mov	r9, r1
 80043ae:	4b2f      	ldr	r3, [pc, #188]	; (800446c <_strtod_l+0x594>)
 80043b0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80043b4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80043b8:	4642      	mov	r2, r8
 80043ba:	464b      	mov	r3, r9
 80043bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043c0:	f7fc f9d6 	bl	8000770 <__aeabi_dmul>
 80043c4:	4b26      	ldr	r3, [pc, #152]	; (8004460 <_strtod_l+0x588>)
 80043c6:	460a      	mov	r2, r1
 80043c8:	400b      	ands	r3, r1
 80043ca:	4929      	ldr	r1, [pc, #164]	; (8004470 <_strtod_l+0x598>)
 80043cc:	428b      	cmp	r3, r1
 80043ce:	4680      	mov	r8, r0
 80043d0:	d8b9      	bhi.n	8004346 <_strtod_l+0x46e>
 80043d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80043d6:	428b      	cmp	r3, r1
 80043d8:	bf86      	itte	hi
 80043da:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 8004474 <_strtod_l+0x59c>
 80043de:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80043e2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80043e6:	2300      	movs	r3, #0
 80043e8:	9305      	str	r3, [sp, #20]
 80043ea:	e07f      	b.n	80044ec <_strtod_l+0x614>
 80043ec:	07f2      	lsls	r2, r6, #31
 80043ee:	d505      	bpl.n	80043fc <_strtod_l+0x524>
 80043f0:	9b05      	ldr	r3, [sp, #20]
 80043f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f6:	f7fc f9bb 	bl	8000770 <__aeabi_dmul>
 80043fa:	2301      	movs	r3, #1
 80043fc:	9a05      	ldr	r2, [sp, #20]
 80043fe:	3208      	adds	r2, #8
 8004400:	3701      	adds	r7, #1
 8004402:	1076      	asrs	r6, r6, #1
 8004404:	9205      	str	r2, [sp, #20]
 8004406:	e7cd      	b.n	80043a4 <_strtod_l+0x4cc>
 8004408:	d0ed      	beq.n	80043e6 <_strtod_l+0x50e>
 800440a:	4276      	negs	r6, r6
 800440c:	f016 020f 	ands.w	r2, r6, #15
 8004410:	d00a      	beq.n	8004428 <_strtod_l+0x550>
 8004412:	4b15      	ldr	r3, [pc, #84]	; (8004468 <_strtod_l+0x590>)
 8004414:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004418:	4640      	mov	r0, r8
 800441a:	4649      	mov	r1, r9
 800441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004420:	f7fc fad0 	bl	80009c4 <__aeabi_ddiv>
 8004424:	4680      	mov	r8, r0
 8004426:	4689      	mov	r9, r1
 8004428:	1136      	asrs	r6, r6, #4
 800442a:	d0dc      	beq.n	80043e6 <_strtod_l+0x50e>
 800442c:	2e1f      	cmp	r6, #31
 800442e:	dd23      	ble.n	8004478 <_strtod_l+0x5a0>
 8004430:	f04f 0b00 	mov.w	fp, #0
 8004434:	f8cd b010 	str.w	fp, [sp, #16]
 8004438:	f8cd b020 	str.w	fp, [sp, #32]
 800443c:	f8cd b018 	str.w	fp, [sp, #24]
 8004440:	2322      	movs	r3, #34	; 0x22
 8004442:	f04f 0800 	mov.w	r8, #0
 8004446:	f04f 0900 	mov.w	r9, #0
 800444a:	f8ca 3000 	str.w	r3, [sl]
 800444e:	e789      	b.n	8004364 <_strtod_l+0x48c>
 8004450:	08007ba9 	.word	0x08007ba9
 8004454:	08007bec 	.word	0x08007bec
 8004458:	08007ba1 	.word	0x08007ba1
 800445c:	08007d2c 	.word	0x08007d2c
 8004460:	7ff00000 	.word	0x7ff00000
 8004464:	08007fd8 	.word	0x08007fd8
 8004468:	08007eb8 	.word	0x08007eb8
 800446c:	08007e90 	.word	0x08007e90
 8004470:	7ca00000 	.word	0x7ca00000
 8004474:	7fefffff 	.word	0x7fefffff
 8004478:	f016 0310 	ands.w	r3, r6, #16
 800447c:	bf18      	it	ne
 800447e:	236a      	movne	r3, #106	; 0x6a
 8004480:	4fb1      	ldr	r7, [pc, #708]	; (8004748 <_strtod_l+0x870>)
 8004482:	9305      	str	r3, [sp, #20]
 8004484:	4640      	mov	r0, r8
 8004486:	4649      	mov	r1, r9
 8004488:	2300      	movs	r3, #0
 800448a:	07f2      	lsls	r2, r6, #31
 800448c:	d504      	bpl.n	8004498 <_strtod_l+0x5c0>
 800448e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004492:	f7fc f96d 	bl	8000770 <__aeabi_dmul>
 8004496:	2301      	movs	r3, #1
 8004498:	1076      	asrs	r6, r6, #1
 800449a:	f107 0708 	add.w	r7, r7, #8
 800449e:	d1f4      	bne.n	800448a <_strtod_l+0x5b2>
 80044a0:	b10b      	cbz	r3, 80044a6 <_strtod_l+0x5ce>
 80044a2:	4680      	mov	r8, r0
 80044a4:	4689      	mov	r9, r1
 80044a6:	9b05      	ldr	r3, [sp, #20]
 80044a8:	b1c3      	cbz	r3, 80044dc <_strtod_l+0x604>
 80044aa:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80044ae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	4649      	mov	r1, r9
 80044b6:	dd11      	ble.n	80044dc <_strtod_l+0x604>
 80044b8:	2b1f      	cmp	r3, #31
 80044ba:	f340 8124 	ble.w	8004706 <_strtod_l+0x82e>
 80044be:	2b34      	cmp	r3, #52	; 0x34
 80044c0:	bfde      	ittt	le
 80044c2:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80044c6:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80044ca:	fa03 f202 	lslle.w	r2, r3, r2
 80044ce:	f04f 0800 	mov.w	r8, #0
 80044d2:	bfcc      	ite	gt
 80044d4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80044d8:	ea02 0901 	andle.w	r9, r2, r1
 80044dc:	2200      	movs	r2, #0
 80044de:	2300      	movs	r3, #0
 80044e0:	4640      	mov	r0, r8
 80044e2:	4649      	mov	r1, r9
 80044e4:	f7fc fbac 	bl	8000c40 <__aeabi_dcmpeq>
 80044e8:	2800      	cmp	r0, #0
 80044ea:	d1a1      	bne.n	8004430 <_strtod_l+0x558>
 80044ec:	9b06      	ldr	r3, [sp, #24]
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	9908      	ldr	r1, [sp, #32]
 80044f2:	4623      	mov	r3, r4
 80044f4:	465a      	mov	r2, fp
 80044f6:	4650      	mov	r0, sl
 80044f8:	f001 fe10 	bl	800611c <__s2b>
 80044fc:	9008      	str	r0, [sp, #32]
 80044fe:	2800      	cmp	r0, #0
 8004500:	f43f af21 	beq.w	8004346 <_strtod_l+0x46e>
 8004504:	9b04      	ldr	r3, [sp, #16]
 8004506:	1b5d      	subs	r5, r3, r5
 8004508:	9b07      	ldr	r3, [sp, #28]
 800450a:	2b00      	cmp	r3, #0
 800450c:	bfb4      	ite	lt
 800450e:	462b      	movlt	r3, r5
 8004510:	2300      	movge	r3, #0
 8004512:	930e      	str	r3, [sp, #56]	; 0x38
 8004514:	9b07      	ldr	r3, [sp, #28]
 8004516:	f04f 0b00 	mov.w	fp, #0
 800451a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800451e:	9314      	str	r3, [sp, #80]	; 0x50
 8004520:	f8cd b010 	str.w	fp, [sp, #16]
 8004524:	9b08      	ldr	r3, [sp, #32]
 8004526:	4650      	mov	r0, sl
 8004528:	6859      	ldr	r1, [r3, #4]
 800452a:	f001 fd4f 	bl	8005fcc <_Balloc>
 800452e:	9006      	str	r0, [sp, #24]
 8004530:	2800      	cmp	r0, #0
 8004532:	f43f af10 	beq.w	8004356 <_strtod_l+0x47e>
 8004536:	9b08      	ldr	r3, [sp, #32]
 8004538:	691a      	ldr	r2, [r3, #16]
 800453a:	3202      	adds	r2, #2
 800453c:	f103 010c 	add.w	r1, r3, #12
 8004540:	0092      	lsls	r2, r2, #2
 8004542:	300c      	adds	r0, #12
 8004544:	f001 fd34 	bl	8005fb0 <memcpy>
 8004548:	ab1c      	add	r3, sp, #112	; 0x70
 800454a:	9301      	str	r3, [sp, #4]
 800454c:	ab1b      	add	r3, sp, #108	; 0x6c
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	4642      	mov	r2, r8
 8004552:	464b      	mov	r3, r9
 8004554:	4650      	mov	r0, sl
 8004556:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800455a:	f002 f91d 	bl	8006798 <__d2b>
 800455e:	901a      	str	r0, [sp, #104]	; 0x68
 8004560:	2800      	cmp	r0, #0
 8004562:	f43f aef8 	beq.w	8004356 <_strtod_l+0x47e>
 8004566:	2101      	movs	r1, #1
 8004568:	4650      	mov	r0, sl
 800456a:	f001 fe6f 	bl	800624c <__i2b>
 800456e:	9004      	str	r0, [sp, #16]
 8004570:	4603      	mov	r3, r0
 8004572:	2800      	cmp	r0, #0
 8004574:	f43f aeef 	beq.w	8004356 <_strtod_l+0x47e>
 8004578:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800457a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800457c:	2d00      	cmp	r5, #0
 800457e:	bfab      	itete	ge
 8004580:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004582:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8004584:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8004586:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004588:	bfac      	ite	ge
 800458a:	18ee      	addge	r6, r5, r3
 800458c:	1b5c      	sublt	r4, r3, r5
 800458e:	9b05      	ldr	r3, [sp, #20]
 8004590:	1aed      	subs	r5, r5, r3
 8004592:	4415      	add	r5, r2
 8004594:	4b6d      	ldr	r3, [pc, #436]	; (800474c <_strtod_l+0x874>)
 8004596:	3d01      	subs	r5, #1
 8004598:	429d      	cmp	r5, r3
 800459a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800459e:	f280 80c4 	bge.w	800472a <_strtod_l+0x852>
 80045a2:	1b5b      	subs	r3, r3, r5
 80045a4:	2b1f      	cmp	r3, #31
 80045a6:	eba2 0203 	sub.w	r2, r2, r3
 80045aa:	f04f 0701 	mov.w	r7, #1
 80045ae:	f300 80b1 	bgt.w	8004714 <_strtod_l+0x83c>
 80045b2:	fa07 f303 	lsl.w	r3, r7, r3
 80045b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80045b8:	2500      	movs	r5, #0
 80045ba:	18b7      	adds	r7, r6, r2
 80045bc:	9b05      	ldr	r3, [sp, #20]
 80045be:	42be      	cmp	r6, r7
 80045c0:	4414      	add	r4, r2
 80045c2:	441c      	add	r4, r3
 80045c4:	4633      	mov	r3, r6
 80045c6:	bfa8      	it	ge
 80045c8:	463b      	movge	r3, r7
 80045ca:	42a3      	cmp	r3, r4
 80045cc:	bfa8      	it	ge
 80045ce:	4623      	movge	r3, r4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	bfc2      	ittt	gt
 80045d4:	1aff      	subgt	r7, r7, r3
 80045d6:	1ae4      	subgt	r4, r4, r3
 80045d8:	1af6      	subgt	r6, r6, r3
 80045da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045dc:	2b00      	cmp	r3, #0
 80045de:	dd17      	ble.n	8004610 <_strtod_l+0x738>
 80045e0:	9904      	ldr	r1, [sp, #16]
 80045e2:	461a      	mov	r2, r3
 80045e4:	4650      	mov	r0, sl
 80045e6:	f001 feef 	bl	80063c8 <__pow5mult>
 80045ea:	9004      	str	r0, [sp, #16]
 80045ec:	2800      	cmp	r0, #0
 80045ee:	f43f aeb2 	beq.w	8004356 <_strtod_l+0x47e>
 80045f2:	4601      	mov	r1, r0
 80045f4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80045f6:	4650      	mov	r0, sl
 80045f8:	f001 fe3e 	bl	8006278 <__multiply>
 80045fc:	9009      	str	r0, [sp, #36]	; 0x24
 80045fe:	2800      	cmp	r0, #0
 8004600:	f43f aea9 	beq.w	8004356 <_strtod_l+0x47e>
 8004604:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004606:	4650      	mov	r0, sl
 8004608:	f001 fd20 	bl	800604c <_Bfree>
 800460c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800460e:	931a      	str	r3, [sp, #104]	; 0x68
 8004610:	2f00      	cmp	r7, #0
 8004612:	f300 808e 	bgt.w	8004732 <_strtod_l+0x85a>
 8004616:	9b07      	ldr	r3, [sp, #28]
 8004618:	2b00      	cmp	r3, #0
 800461a:	dd08      	ble.n	800462e <_strtod_l+0x756>
 800461c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800461e:	9906      	ldr	r1, [sp, #24]
 8004620:	4650      	mov	r0, sl
 8004622:	f001 fed1 	bl	80063c8 <__pow5mult>
 8004626:	9006      	str	r0, [sp, #24]
 8004628:	2800      	cmp	r0, #0
 800462a:	f43f ae94 	beq.w	8004356 <_strtod_l+0x47e>
 800462e:	2c00      	cmp	r4, #0
 8004630:	dd08      	ble.n	8004644 <_strtod_l+0x76c>
 8004632:	9906      	ldr	r1, [sp, #24]
 8004634:	4622      	mov	r2, r4
 8004636:	4650      	mov	r0, sl
 8004638:	f001 ff20 	bl	800647c <__lshift>
 800463c:	9006      	str	r0, [sp, #24]
 800463e:	2800      	cmp	r0, #0
 8004640:	f43f ae89 	beq.w	8004356 <_strtod_l+0x47e>
 8004644:	2e00      	cmp	r6, #0
 8004646:	dd08      	ble.n	800465a <_strtod_l+0x782>
 8004648:	9904      	ldr	r1, [sp, #16]
 800464a:	4632      	mov	r2, r6
 800464c:	4650      	mov	r0, sl
 800464e:	f001 ff15 	bl	800647c <__lshift>
 8004652:	9004      	str	r0, [sp, #16]
 8004654:	2800      	cmp	r0, #0
 8004656:	f43f ae7e 	beq.w	8004356 <_strtod_l+0x47e>
 800465a:	9a06      	ldr	r2, [sp, #24]
 800465c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800465e:	4650      	mov	r0, sl
 8004660:	f001 ff98 	bl	8006594 <__mdiff>
 8004664:	4683      	mov	fp, r0
 8004666:	2800      	cmp	r0, #0
 8004668:	f43f ae75 	beq.w	8004356 <_strtod_l+0x47e>
 800466c:	2400      	movs	r4, #0
 800466e:	68c3      	ldr	r3, [r0, #12]
 8004670:	9904      	ldr	r1, [sp, #16]
 8004672:	60c4      	str	r4, [r0, #12]
 8004674:	930b      	str	r3, [sp, #44]	; 0x2c
 8004676:	f001 ff71 	bl	800655c <__mcmp>
 800467a:	42a0      	cmp	r0, r4
 800467c:	da6c      	bge.n	8004758 <_strtod_l+0x880>
 800467e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004680:	ea53 0308 	orrs.w	r3, r3, r8
 8004684:	f040 8092 	bne.w	80047ac <_strtod_l+0x8d4>
 8004688:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800468c:	2b00      	cmp	r3, #0
 800468e:	f040 808d 	bne.w	80047ac <_strtod_l+0x8d4>
 8004692:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004696:	0d1b      	lsrs	r3, r3, #20
 8004698:	051b      	lsls	r3, r3, #20
 800469a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800469e:	f240 8085 	bls.w	80047ac <_strtod_l+0x8d4>
 80046a2:	f8db 3014 	ldr.w	r3, [fp, #20]
 80046a6:	b91b      	cbnz	r3, 80046b0 <_strtod_l+0x7d8>
 80046a8:	f8db 3010 	ldr.w	r3, [fp, #16]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	dd7d      	ble.n	80047ac <_strtod_l+0x8d4>
 80046b0:	4659      	mov	r1, fp
 80046b2:	2201      	movs	r2, #1
 80046b4:	4650      	mov	r0, sl
 80046b6:	f001 fee1 	bl	800647c <__lshift>
 80046ba:	9904      	ldr	r1, [sp, #16]
 80046bc:	4683      	mov	fp, r0
 80046be:	f001 ff4d 	bl	800655c <__mcmp>
 80046c2:	2800      	cmp	r0, #0
 80046c4:	dd72      	ble.n	80047ac <_strtod_l+0x8d4>
 80046c6:	9905      	ldr	r1, [sp, #20]
 80046c8:	4a21      	ldr	r2, [pc, #132]	; (8004750 <_strtod_l+0x878>)
 80046ca:	464b      	mov	r3, r9
 80046cc:	2900      	cmp	r1, #0
 80046ce:	f000 808d 	beq.w	80047ec <_strtod_l+0x914>
 80046d2:	ea02 0109 	and.w	r1, r2, r9
 80046d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80046da:	f300 8087 	bgt.w	80047ec <_strtod_l+0x914>
 80046de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80046e2:	f77f aead 	ble.w	8004440 <_strtod_l+0x568>
 80046e6:	4b1b      	ldr	r3, [pc, #108]	; (8004754 <_strtod_l+0x87c>)
 80046e8:	4640      	mov	r0, r8
 80046ea:	4649      	mov	r1, r9
 80046ec:	2200      	movs	r2, #0
 80046ee:	f7fc f83f 	bl	8000770 <__aeabi_dmul>
 80046f2:	460b      	mov	r3, r1
 80046f4:	4303      	orrs	r3, r0
 80046f6:	bf08      	it	eq
 80046f8:	2322      	moveq	r3, #34	; 0x22
 80046fa:	4680      	mov	r8, r0
 80046fc:	4689      	mov	r9, r1
 80046fe:	bf08      	it	eq
 8004700:	f8ca 3000 	streq.w	r3, [sl]
 8004704:	e632      	b.n	800436c <_strtod_l+0x494>
 8004706:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	ea03 0808 	and.w	r8, r3, r8
 8004712:	e6e3      	b.n	80044dc <_strtod_l+0x604>
 8004714:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004718:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800471c:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004720:	35e2      	adds	r5, #226	; 0xe2
 8004722:	fa07 f505 	lsl.w	r5, r7, r5
 8004726:	970f      	str	r7, [sp, #60]	; 0x3c
 8004728:	e747      	b.n	80045ba <_strtod_l+0x6e2>
 800472a:	2301      	movs	r3, #1
 800472c:	2500      	movs	r5, #0
 800472e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004730:	e743      	b.n	80045ba <_strtod_l+0x6e2>
 8004732:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004734:	463a      	mov	r2, r7
 8004736:	4650      	mov	r0, sl
 8004738:	f001 fea0 	bl	800647c <__lshift>
 800473c:	901a      	str	r0, [sp, #104]	; 0x68
 800473e:	2800      	cmp	r0, #0
 8004740:	f47f af69 	bne.w	8004616 <_strtod_l+0x73e>
 8004744:	e607      	b.n	8004356 <_strtod_l+0x47e>
 8004746:	bf00      	nop
 8004748:	08007c00 	.word	0x08007c00
 800474c:	fffffc02 	.word	0xfffffc02
 8004750:	7ff00000 	.word	0x7ff00000
 8004754:	39500000 	.word	0x39500000
 8004758:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800475c:	d165      	bne.n	800482a <_strtod_l+0x952>
 800475e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004760:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004764:	b35a      	cbz	r2, 80047be <_strtod_l+0x8e6>
 8004766:	4a9a      	ldr	r2, [pc, #616]	; (80049d0 <_strtod_l+0xaf8>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d12b      	bne.n	80047c4 <_strtod_l+0x8ec>
 800476c:	9b05      	ldr	r3, [sp, #20]
 800476e:	4641      	mov	r1, r8
 8004770:	b303      	cbz	r3, 80047b4 <_strtod_l+0x8dc>
 8004772:	4b98      	ldr	r3, [pc, #608]	; (80049d4 <_strtod_l+0xafc>)
 8004774:	464a      	mov	r2, r9
 8004776:	4013      	ands	r3, r2
 8004778:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800477c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004780:	d81b      	bhi.n	80047ba <_strtod_l+0x8e2>
 8004782:	0d1b      	lsrs	r3, r3, #20
 8004784:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	4299      	cmp	r1, r3
 800478e:	d119      	bne.n	80047c4 <_strtod_l+0x8ec>
 8004790:	4b91      	ldr	r3, [pc, #580]	; (80049d8 <_strtod_l+0xb00>)
 8004792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004794:	429a      	cmp	r2, r3
 8004796:	d102      	bne.n	800479e <_strtod_l+0x8c6>
 8004798:	3101      	adds	r1, #1
 800479a:	f43f addc 	beq.w	8004356 <_strtod_l+0x47e>
 800479e:	4b8d      	ldr	r3, [pc, #564]	; (80049d4 <_strtod_l+0xafc>)
 80047a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047a2:	401a      	ands	r2, r3
 80047a4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80047a8:	f04f 0800 	mov.w	r8, #0
 80047ac:	9b05      	ldr	r3, [sp, #20]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d199      	bne.n	80046e6 <_strtod_l+0x80e>
 80047b2:	e5db      	b.n	800436c <_strtod_l+0x494>
 80047b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047b8:	e7e8      	b.n	800478c <_strtod_l+0x8b4>
 80047ba:	4613      	mov	r3, r2
 80047bc:	e7e6      	b.n	800478c <_strtod_l+0x8b4>
 80047be:	ea53 0308 	orrs.w	r3, r3, r8
 80047c2:	d080      	beq.n	80046c6 <_strtod_l+0x7ee>
 80047c4:	b1e5      	cbz	r5, 8004800 <_strtod_l+0x928>
 80047c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047c8:	421d      	tst	r5, r3
 80047ca:	d0ef      	beq.n	80047ac <_strtod_l+0x8d4>
 80047cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047ce:	9a05      	ldr	r2, [sp, #20]
 80047d0:	4640      	mov	r0, r8
 80047d2:	4649      	mov	r1, r9
 80047d4:	b1c3      	cbz	r3, 8004808 <_strtod_l+0x930>
 80047d6:	f7ff fb5b 	bl	8003e90 <sulp>
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80047e2:	f7fb fe0f 	bl	8000404 <__adddf3>
 80047e6:	4680      	mov	r8, r0
 80047e8:	4689      	mov	r9, r1
 80047ea:	e7df      	b.n	80047ac <_strtod_l+0x8d4>
 80047ec:	4013      	ands	r3, r2
 80047ee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80047f2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80047f6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80047fa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80047fe:	e7d5      	b.n	80047ac <_strtod_l+0x8d4>
 8004800:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004802:	ea13 0f08 	tst.w	r3, r8
 8004806:	e7e0      	b.n	80047ca <_strtod_l+0x8f2>
 8004808:	f7ff fb42 	bl	8003e90 <sulp>
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004814:	f7fb fdf4 	bl	8000400 <__aeabi_dsub>
 8004818:	2200      	movs	r2, #0
 800481a:	2300      	movs	r3, #0
 800481c:	4680      	mov	r8, r0
 800481e:	4689      	mov	r9, r1
 8004820:	f7fc fa0e 	bl	8000c40 <__aeabi_dcmpeq>
 8004824:	2800      	cmp	r0, #0
 8004826:	d0c1      	beq.n	80047ac <_strtod_l+0x8d4>
 8004828:	e60a      	b.n	8004440 <_strtod_l+0x568>
 800482a:	9904      	ldr	r1, [sp, #16]
 800482c:	4658      	mov	r0, fp
 800482e:	f002 f80f 	bl	8006850 <__ratio>
 8004832:	2200      	movs	r2, #0
 8004834:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004838:	4606      	mov	r6, r0
 800483a:	460f      	mov	r7, r1
 800483c:	f7fc fa14 	bl	8000c68 <__aeabi_dcmple>
 8004840:	2800      	cmp	r0, #0
 8004842:	d070      	beq.n	8004926 <_strtod_l+0xa4e>
 8004844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004846:	2b00      	cmp	r3, #0
 8004848:	d042      	beq.n	80048d0 <_strtod_l+0x9f8>
 800484a:	4f64      	ldr	r7, [pc, #400]	; (80049dc <_strtod_l+0xb04>)
 800484c:	2600      	movs	r6, #0
 800484e:	4d63      	ldr	r5, [pc, #396]	; (80049dc <_strtod_l+0xb04>)
 8004850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004852:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004856:	0d1b      	lsrs	r3, r3, #20
 8004858:	051b      	lsls	r3, r3, #20
 800485a:	930f      	str	r3, [sp, #60]	; 0x3c
 800485c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800485e:	4b60      	ldr	r3, [pc, #384]	; (80049e0 <_strtod_l+0xb08>)
 8004860:	429a      	cmp	r2, r3
 8004862:	f040 80c5 	bne.w	80049f0 <_strtod_l+0xb18>
 8004866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004868:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800486c:	4640      	mov	r0, r8
 800486e:	4649      	mov	r1, r9
 8004870:	f001 ff18 	bl	80066a4 <__ulp>
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	4630      	mov	r0, r6
 800487a:	4639      	mov	r1, r7
 800487c:	f7fb ff78 	bl	8000770 <__aeabi_dmul>
 8004880:	4642      	mov	r2, r8
 8004882:	464b      	mov	r3, r9
 8004884:	f7fb fdbe 	bl	8000404 <__adddf3>
 8004888:	460b      	mov	r3, r1
 800488a:	4952      	ldr	r1, [pc, #328]	; (80049d4 <_strtod_l+0xafc>)
 800488c:	4a55      	ldr	r2, [pc, #340]	; (80049e4 <_strtod_l+0xb0c>)
 800488e:	4019      	ands	r1, r3
 8004890:	4291      	cmp	r1, r2
 8004892:	4680      	mov	r8, r0
 8004894:	d95d      	bls.n	8004952 <_strtod_l+0xa7a>
 8004896:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004898:	4b4f      	ldr	r3, [pc, #316]	; (80049d8 <_strtod_l+0xb00>)
 800489a:	429a      	cmp	r2, r3
 800489c:	d103      	bne.n	80048a6 <_strtod_l+0x9ce>
 800489e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048a0:	3301      	adds	r3, #1
 80048a2:	f43f ad58 	beq.w	8004356 <_strtod_l+0x47e>
 80048a6:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80049d8 <_strtod_l+0xb00>
 80048aa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80048ae:	991a      	ldr	r1, [sp, #104]	; 0x68
 80048b0:	4650      	mov	r0, sl
 80048b2:	f001 fbcb 	bl	800604c <_Bfree>
 80048b6:	9906      	ldr	r1, [sp, #24]
 80048b8:	4650      	mov	r0, sl
 80048ba:	f001 fbc7 	bl	800604c <_Bfree>
 80048be:	9904      	ldr	r1, [sp, #16]
 80048c0:	4650      	mov	r0, sl
 80048c2:	f001 fbc3 	bl	800604c <_Bfree>
 80048c6:	4659      	mov	r1, fp
 80048c8:	4650      	mov	r0, sl
 80048ca:	f001 fbbf 	bl	800604c <_Bfree>
 80048ce:	e629      	b.n	8004524 <_strtod_l+0x64c>
 80048d0:	f1b8 0f00 	cmp.w	r8, #0
 80048d4:	d119      	bne.n	800490a <_strtod_l+0xa32>
 80048d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048dc:	b9e3      	cbnz	r3, 8004918 <_strtod_l+0xa40>
 80048de:	4b3f      	ldr	r3, [pc, #252]	; (80049dc <_strtod_l+0xb04>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	4630      	mov	r0, r6
 80048e4:	4639      	mov	r1, r7
 80048e6:	f7fc f9b5 	bl	8000c54 <__aeabi_dcmplt>
 80048ea:	b9c8      	cbnz	r0, 8004920 <_strtod_l+0xa48>
 80048ec:	4b3e      	ldr	r3, [pc, #248]	; (80049e8 <_strtod_l+0xb10>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	4630      	mov	r0, r6
 80048f2:	4639      	mov	r1, r7
 80048f4:	f7fb ff3c 	bl	8000770 <__aeabi_dmul>
 80048f8:	4604      	mov	r4, r0
 80048fa:	460d      	mov	r5, r1
 80048fc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004900:	9416      	str	r4, [sp, #88]	; 0x58
 8004902:	9317      	str	r3, [sp, #92]	; 0x5c
 8004904:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8004908:	e7a2      	b.n	8004850 <_strtod_l+0x978>
 800490a:	f1b8 0f01 	cmp.w	r8, #1
 800490e:	d103      	bne.n	8004918 <_strtod_l+0xa40>
 8004910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004912:	2b00      	cmp	r3, #0
 8004914:	f43f ad94 	beq.w	8004440 <_strtod_l+0x568>
 8004918:	4f34      	ldr	r7, [pc, #208]	; (80049ec <_strtod_l+0xb14>)
 800491a:	2600      	movs	r6, #0
 800491c:	2400      	movs	r4, #0
 800491e:	e796      	b.n	800484e <_strtod_l+0x976>
 8004920:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004922:	4d31      	ldr	r5, [pc, #196]	; (80049e8 <_strtod_l+0xb10>)
 8004924:	e7ea      	b.n	80048fc <_strtod_l+0xa24>
 8004926:	4b30      	ldr	r3, [pc, #192]	; (80049e8 <_strtod_l+0xb10>)
 8004928:	2200      	movs	r2, #0
 800492a:	4630      	mov	r0, r6
 800492c:	4639      	mov	r1, r7
 800492e:	f7fb ff1f 	bl	8000770 <__aeabi_dmul>
 8004932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004934:	4604      	mov	r4, r0
 8004936:	460d      	mov	r5, r1
 8004938:	b933      	cbnz	r3, 8004948 <_strtod_l+0xa70>
 800493a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800493e:	9010      	str	r0, [sp, #64]	; 0x40
 8004940:	9311      	str	r3, [sp, #68]	; 0x44
 8004942:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004946:	e783      	b.n	8004850 <_strtod_l+0x978>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004950:	e7f7      	b.n	8004942 <_strtod_l+0xa6a>
 8004952:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004956:	9b05      	ldr	r3, [sp, #20]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1a8      	bne.n	80048ae <_strtod_l+0x9d6>
 800495c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004960:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004962:	0d1b      	lsrs	r3, r3, #20
 8004964:	051b      	lsls	r3, r3, #20
 8004966:	429a      	cmp	r2, r3
 8004968:	d1a1      	bne.n	80048ae <_strtod_l+0x9d6>
 800496a:	4620      	mov	r0, r4
 800496c:	4629      	mov	r1, r5
 800496e:	f7fc fb75 	bl	800105c <__aeabi_d2lz>
 8004972:	f7fb fecf 	bl	8000714 <__aeabi_l2d>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	4620      	mov	r0, r4
 800497c:	4629      	mov	r1, r5
 800497e:	f7fb fd3f 	bl	8000400 <__aeabi_dsub>
 8004982:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004984:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004988:	ea43 0308 	orr.w	r3, r3, r8
 800498c:	4313      	orrs	r3, r2
 800498e:	4604      	mov	r4, r0
 8004990:	460d      	mov	r5, r1
 8004992:	d068      	beq.n	8004a66 <_strtod_l+0xb8e>
 8004994:	a30a      	add	r3, pc, #40	; (adr r3, 80049c0 <_strtod_l+0xae8>)
 8004996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499a:	f7fc f95b 	bl	8000c54 <__aeabi_dcmplt>
 800499e:	2800      	cmp	r0, #0
 80049a0:	f47f ace4 	bne.w	800436c <_strtod_l+0x494>
 80049a4:	a308      	add	r3, pc, #32	; (adr r3, 80049c8 <_strtod_l+0xaf0>)
 80049a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049aa:	4620      	mov	r0, r4
 80049ac:	4629      	mov	r1, r5
 80049ae:	f7fc f96f 	bl	8000c90 <__aeabi_dcmpgt>
 80049b2:	2800      	cmp	r0, #0
 80049b4:	f43f af7b 	beq.w	80048ae <_strtod_l+0x9d6>
 80049b8:	e4d8      	b.n	800436c <_strtod_l+0x494>
 80049ba:	bf00      	nop
 80049bc:	f3af 8000 	nop.w
 80049c0:	94a03595 	.word	0x94a03595
 80049c4:	3fdfffff 	.word	0x3fdfffff
 80049c8:	35afe535 	.word	0x35afe535
 80049cc:	3fe00000 	.word	0x3fe00000
 80049d0:	000fffff 	.word	0x000fffff
 80049d4:	7ff00000 	.word	0x7ff00000
 80049d8:	7fefffff 	.word	0x7fefffff
 80049dc:	3ff00000 	.word	0x3ff00000
 80049e0:	7fe00000 	.word	0x7fe00000
 80049e4:	7c9fffff 	.word	0x7c9fffff
 80049e8:	3fe00000 	.word	0x3fe00000
 80049ec:	bff00000 	.word	0xbff00000
 80049f0:	9b05      	ldr	r3, [sp, #20]
 80049f2:	b313      	cbz	r3, 8004a3a <_strtod_l+0xb62>
 80049f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80049f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80049fa:	d81e      	bhi.n	8004a3a <_strtod_l+0xb62>
 80049fc:	a326      	add	r3, pc, #152	; (adr r3, 8004a98 <_strtod_l+0xbc0>)
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	4620      	mov	r0, r4
 8004a04:	4629      	mov	r1, r5
 8004a06:	f7fc f92f 	bl	8000c68 <__aeabi_dcmple>
 8004a0a:	b190      	cbz	r0, 8004a32 <_strtod_l+0xb5a>
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	4620      	mov	r0, r4
 8004a10:	f7fc f986 	bl	8000d20 <__aeabi_d2uiz>
 8004a14:	2801      	cmp	r0, #1
 8004a16:	bf38      	it	cc
 8004a18:	2001      	movcc	r0, #1
 8004a1a:	f7fb fe2f 	bl	800067c <__aeabi_ui2d>
 8004a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a20:	4604      	mov	r4, r0
 8004a22:	460d      	mov	r5, r1
 8004a24:	b9d3      	cbnz	r3, 8004a5c <_strtod_l+0xb84>
 8004a26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a2a:	9012      	str	r0, [sp, #72]	; 0x48
 8004a2c:	9313      	str	r3, [sp, #76]	; 0x4c
 8004a2e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004a32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a34:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004a38:	1a9f      	subs	r7, r3, r2
 8004a3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a3e:	f001 fe31 	bl	80066a4 <__ulp>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	4630      	mov	r0, r6
 8004a48:	4639      	mov	r1, r7
 8004a4a:	f7fb fe91 	bl	8000770 <__aeabi_dmul>
 8004a4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004a52:	f7fb fcd7 	bl	8000404 <__adddf3>
 8004a56:	4680      	mov	r8, r0
 8004a58:	4689      	mov	r9, r1
 8004a5a:	e77c      	b.n	8004956 <_strtod_l+0xa7e>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004a64:	e7e3      	b.n	8004a2e <_strtod_l+0xb56>
 8004a66:	a30e      	add	r3, pc, #56	; (adr r3, 8004aa0 <_strtod_l+0xbc8>)
 8004a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6c:	f7fc f8f2 	bl	8000c54 <__aeabi_dcmplt>
 8004a70:	e79f      	b.n	80049b2 <_strtod_l+0xada>
 8004a72:	2300      	movs	r3, #0
 8004a74:	930a      	str	r3, [sp, #40]	; 0x28
 8004a76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004a78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	f7ff ba71 	b.w	8003f62 <_strtod_l+0x8a>
 8004a80:	2a65      	cmp	r2, #101	; 0x65
 8004a82:	f43f ab63 	beq.w	800414c <_strtod_l+0x274>
 8004a86:	2a45      	cmp	r2, #69	; 0x45
 8004a88:	f43f ab60 	beq.w	800414c <_strtod_l+0x274>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	f7ff bb95 	b.w	80041bc <_strtod_l+0x2e4>
 8004a92:	bf00      	nop
 8004a94:	f3af 8000 	nop.w
 8004a98:	ffc00000 	.word	0xffc00000
 8004a9c:	41dfffff 	.word	0x41dfffff
 8004aa0:	94a03595 	.word	0x94a03595
 8004aa4:	3fcfffff 	.word	0x3fcfffff

08004aa8 <_strtod_r>:
 8004aa8:	4b01      	ldr	r3, [pc, #4]	; (8004ab0 <_strtod_r+0x8>)
 8004aaa:	f7ff ba15 	b.w	8003ed8 <_strtod_l>
 8004aae:	bf00      	nop
 8004ab0:	200000ac 	.word	0x200000ac

08004ab4 <_strtol_l.constprop.0>:
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aba:	4680      	mov	r8, r0
 8004abc:	d001      	beq.n	8004ac2 <_strtol_l.constprop.0+0xe>
 8004abe:	2b24      	cmp	r3, #36	; 0x24
 8004ac0:	d906      	bls.n	8004ad0 <_strtol_l.constprop.0+0x1c>
 8004ac2:	f000 feeb 	bl	800589c <__errno>
 8004ac6:	2316      	movs	r3, #22
 8004ac8:	6003      	str	r3, [r0, #0]
 8004aca:	2000      	movs	r0, #0
 8004acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad0:	4f35      	ldr	r7, [pc, #212]	; (8004ba8 <_strtol_l.constprop.0+0xf4>)
 8004ad2:	460d      	mov	r5, r1
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ada:	5de6      	ldrb	r6, [r4, r7]
 8004adc:	f016 0608 	ands.w	r6, r6, #8
 8004ae0:	d1f8      	bne.n	8004ad4 <_strtol_l.constprop.0+0x20>
 8004ae2:	2c2d      	cmp	r4, #45	; 0x2d
 8004ae4:	d12f      	bne.n	8004b46 <_strtol_l.constprop.0+0x92>
 8004ae6:	782c      	ldrb	r4, [r5, #0]
 8004ae8:	2601      	movs	r6, #1
 8004aea:	1c85      	adds	r5, r0, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d057      	beq.n	8004ba0 <_strtol_l.constprop.0+0xec>
 8004af0:	2b10      	cmp	r3, #16
 8004af2:	d109      	bne.n	8004b08 <_strtol_l.constprop.0+0x54>
 8004af4:	2c30      	cmp	r4, #48	; 0x30
 8004af6:	d107      	bne.n	8004b08 <_strtol_l.constprop.0+0x54>
 8004af8:	7828      	ldrb	r0, [r5, #0]
 8004afa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004afe:	2858      	cmp	r0, #88	; 0x58
 8004b00:	d149      	bne.n	8004b96 <_strtol_l.constprop.0+0xe2>
 8004b02:	786c      	ldrb	r4, [r5, #1]
 8004b04:	2310      	movs	r3, #16
 8004b06:	3502      	adds	r5, #2
 8004b08:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8004b0c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8004b10:	2700      	movs	r7, #0
 8004b12:	fbbe f9f3 	udiv	r9, lr, r3
 8004b16:	4638      	mov	r0, r7
 8004b18:	fb03 ea19 	mls	sl, r3, r9, lr
 8004b1c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004b20:	f1bc 0f09 	cmp.w	ip, #9
 8004b24:	d814      	bhi.n	8004b50 <_strtol_l.constprop.0+0x9c>
 8004b26:	4664      	mov	r4, ip
 8004b28:	42a3      	cmp	r3, r4
 8004b2a:	dd22      	ble.n	8004b72 <_strtol_l.constprop.0+0xbe>
 8004b2c:	2f00      	cmp	r7, #0
 8004b2e:	db1d      	blt.n	8004b6c <_strtol_l.constprop.0+0xb8>
 8004b30:	4581      	cmp	r9, r0
 8004b32:	d31b      	bcc.n	8004b6c <_strtol_l.constprop.0+0xb8>
 8004b34:	d101      	bne.n	8004b3a <_strtol_l.constprop.0+0x86>
 8004b36:	45a2      	cmp	sl, r4
 8004b38:	db18      	blt.n	8004b6c <_strtol_l.constprop.0+0xb8>
 8004b3a:	fb00 4003 	mla	r0, r0, r3, r4
 8004b3e:	2701      	movs	r7, #1
 8004b40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b44:	e7ea      	b.n	8004b1c <_strtol_l.constprop.0+0x68>
 8004b46:	2c2b      	cmp	r4, #43	; 0x2b
 8004b48:	bf04      	itt	eq
 8004b4a:	782c      	ldrbeq	r4, [r5, #0]
 8004b4c:	1c85      	addeq	r5, r0, #2
 8004b4e:	e7cd      	b.n	8004aec <_strtol_l.constprop.0+0x38>
 8004b50:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004b54:	f1bc 0f19 	cmp.w	ip, #25
 8004b58:	d801      	bhi.n	8004b5e <_strtol_l.constprop.0+0xaa>
 8004b5a:	3c37      	subs	r4, #55	; 0x37
 8004b5c:	e7e4      	b.n	8004b28 <_strtol_l.constprop.0+0x74>
 8004b5e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004b62:	f1bc 0f19 	cmp.w	ip, #25
 8004b66:	d804      	bhi.n	8004b72 <_strtol_l.constprop.0+0xbe>
 8004b68:	3c57      	subs	r4, #87	; 0x57
 8004b6a:	e7dd      	b.n	8004b28 <_strtol_l.constprop.0+0x74>
 8004b6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004b70:	e7e6      	b.n	8004b40 <_strtol_l.constprop.0+0x8c>
 8004b72:	2f00      	cmp	r7, #0
 8004b74:	da07      	bge.n	8004b86 <_strtol_l.constprop.0+0xd2>
 8004b76:	2322      	movs	r3, #34	; 0x22
 8004b78:	f8c8 3000 	str.w	r3, [r8]
 8004b7c:	4670      	mov	r0, lr
 8004b7e:	2a00      	cmp	r2, #0
 8004b80:	d0a4      	beq.n	8004acc <_strtol_l.constprop.0+0x18>
 8004b82:	1e69      	subs	r1, r5, #1
 8004b84:	e005      	b.n	8004b92 <_strtol_l.constprop.0+0xde>
 8004b86:	b106      	cbz	r6, 8004b8a <_strtol_l.constprop.0+0xd6>
 8004b88:	4240      	negs	r0, r0
 8004b8a:	2a00      	cmp	r2, #0
 8004b8c:	d09e      	beq.n	8004acc <_strtol_l.constprop.0+0x18>
 8004b8e:	2f00      	cmp	r7, #0
 8004b90:	d1f7      	bne.n	8004b82 <_strtol_l.constprop.0+0xce>
 8004b92:	6011      	str	r1, [r2, #0]
 8004b94:	e79a      	b.n	8004acc <_strtol_l.constprop.0+0x18>
 8004b96:	2430      	movs	r4, #48	; 0x30
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1b5      	bne.n	8004b08 <_strtol_l.constprop.0+0x54>
 8004b9c:	2308      	movs	r3, #8
 8004b9e:	e7b3      	b.n	8004b08 <_strtol_l.constprop.0+0x54>
 8004ba0:	2c30      	cmp	r4, #48	; 0x30
 8004ba2:	d0a9      	beq.n	8004af8 <_strtol_l.constprop.0+0x44>
 8004ba4:	230a      	movs	r3, #10
 8004ba6:	e7af      	b.n	8004b08 <_strtol_l.constprop.0+0x54>
 8004ba8:	08007c29 	.word	0x08007c29

08004bac <_strtol_r>:
 8004bac:	f7ff bf82 	b.w	8004ab4 <_strtol_l.constprop.0>

08004bb0 <quorem>:
 8004bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb4:	6903      	ldr	r3, [r0, #16]
 8004bb6:	690c      	ldr	r4, [r1, #16]
 8004bb8:	42a3      	cmp	r3, r4
 8004bba:	4607      	mov	r7, r0
 8004bbc:	db7d      	blt.n	8004cba <quorem+0x10a>
 8004bbe:	3c01      	subs	r4, #1
 8004bc0:	f101 0814 	add.w	r8, r1, #20
 8004bc4:	f100 0514 	add.w	r5, r0, #20
 8004bc8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004bcc:	9301      	str	r3, [sp, #4]
 8004bce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004bd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004bde:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004be2:	fbb2 f6f3 	udiv	r6, r2, r3
 8004be6:	d32e      	bcc.n	8004c46 <quorem+0x96>
 8004be8:	f04f 0e00 	mov.w	lr, #0
 8004bec:	4640      	mov	r0, r8
 8004bee:	46ac      	mov	ip, r5
 8004bf0:	46f2      	mov	sl, lr
 8004bf2:	f850 2b04 	ldr.w	r2, [r0], #4
 8004bf6:	b293      	uxth	r3, r2
 8004bf8:	fb06 e303 	mla	r3, r6, r3, lr
 8004bfc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004c00:	0c12      	lsrs	r2, r2, #16
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	fb06 e202 	mla	r2, r6, r2, lr
 8004c08:	ebaa 0303 	sub.w	r3, sl, r3
 8004c0c:	f8dc a000 	ldr.w	sl, [ip]
 8004c10:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004c14:	b292      	uxth	r2, r2
 8004c16:	fa13 f38a 	uxtah	r3, r3, sl
 8004c1a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004c1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c28:	4581      	cmp	r9, r0
 8004c2a:	f84c 3b04 	str.w	r3, [ip], #4
 8004c2e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004c32:	d2de      	bcs.n	8004bf2 <quorem+0x42>
 8004c34:	f855 300b 	ldr.w	r3, [r5, fp]
 8004c38:	b92b      	cbnz	r3, 8004c46 <quorem+0x96>
 8004c3a:	9b01      	ldr	r3, [sp, #4]
 8004c3c:	3b04      	subs	r3, #4
 8004c3e:	429d      	cmp	r5, r3
 8004c40:	461a      	mov	r2, r3
 8004c42:	d32e      	bcc.n	8004ca2 <quorem+0xf2>
 8004c44:	613c      	str	r4, [r7, #16]
 8004c46:	4638      	mov	r0, r7
 8004c48:	f001 fc88 	bl	800655c <__mcmp>
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	db24      	blt.n	8004c9a <quorem+0xea>
 8004c50:	3601      	adds	r6, #1
 8004c52:	4628      	mov	r0, r5
 8004c54:	f04f 0c00 	mov.w	ip, #0
 8004c58:	f858 2b04 	ldr.w	r2, [r8], #4
 8004c5c:	f8d0 e000 	ldr.w	lr, [r0]
 8004c60:	b293      	uxth	r3, r2
 8004c62:	ebac 0303 	sub.w	r3, ip, r3
 8004c66:	0c12      	lsrs	r2, r2, #16
 8004c68:	fa13 f38e 	uxtah	r3, r3, lr
 8004c6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004c70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c7a:	45c1      	cmp	r9, r8
 8004c7c:	f840 3b04 	str.w	r3, [r0], #4
 8004c80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c84:	d2e8      	bcs.n	8004c58 <quorem+0xa8>
 8004c86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c8e:	b922      	cbnz	r2, 8004c9a <quorem+0xea>
 8004c90:	3b04      	subs	r3, #4
 8004c92:	429d      	cmp	r5, r3
 8004c94:	461a      	mov	r2, r3
 8004c96:	d30a      	bcc.n	8004cae <quorem+0xfe>
 8004c98:	613c      	str	r4, [r7, #16]
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	b003      	add	sp, #12
 8004c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ca2:	6812      	ldr	r2, [r2, #0]
 8004ca4:	3b04      	subs	r3, #4
 8004ca6:	2a00      	cmp	r2, #0
 8004ca8:	d1cc      	bne.n	8004c44 <quorem+0x94>
 8004caa:	3c01      	subs	r4, #1
 8004cac:	e7c7      	b.n	8004c3e <quorem+0x8e>
 8004cae:	6812      	ldr	r2, [r2, #0]
 8004cb0:	3b04      	subs	r3, #4
 8004cb2:	2a00      	cmp	r2, #0
 8004cb4:	d1f0      	bne.n	8004c98 <quorem+0xe8>
 8004cb6:	3c01      	subs	r4, #1
 8004cb8:	e7eb      	b.n	8004c92 <quorem+0xe2>
 8004cba:	2000      	movs	r0, #0
 8004cbc:	e7ee      	b.n	8004c9c <quorem+0xec>
	...

08004cc0 <_dtoa_r>:
 8004cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004cc6:	b099      	sub	sp, #100	; 0x64
 8004cc8:	4616      	mov	r6, r2
 8004cca:	461f      	mov	r7, r3
 8004ccc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004cd0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004cd4:	4605      	mov	r5, r0
 8004cd6:	b974      	cbnz	r4, 8004cf6 <_dtoa_r+0x36>
 8004cd8:	2010      	movs	r0, #16
 8004cda:	f001 f94f 	bl	8005f7c <malloc>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	6268      	str	r0, [r5, #36]	; 0x24
 8004ce2:	b920      	cbnz	r0, 8004cee <_dtoa_r+0x2e>
 8004ce4:	4ba8      	ldr	r3, [pc, #672]	; (8004f88 <_dtoa_r+0x2c8>)
 8004ce6:	21ea      	movs	r1, #234	; 0xea
 8004ce8:	48a8      	ldr	r0, [pc, #672]	; (8004f8c <_dtoa_r+0x2cc>)
 8004cea:	f002 f8a9 	bl	8006e40 <__assert_func>
 8004cee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004cf2:	6004      	str	r4, [r0, #0]
 8004cf4:	60c4      	str	r4, [r0, #12]
 8004cf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004cf8:	6819      	ldr	r1, [r3, #0]
 8004cfa:	b151      	cbz	r1, 8004d12 <_dtoa_r+0x52>
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	604a      	str	r2, [r1, #4]
 8004d00:	2301      	movs	r3, #1
 8004d02:	4093      	lsls	r3, r2
 8004d04:	608b      	str	r3, [r1, #8]
 8004d06:	4628      	mov	r0, r5
 8004d08:	f001 f9a0 	bl	800604c <_Bfree>
 8004d0c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	1e3b      	subs	r3, r7, #0
 8004d14:	bfb9      	ittee	lt
 8004d16:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004d1a:	9305      	strlt	r3, [sp, #20]
 8004d1c:	2300      	movge	r3, #0
 8004d1e:	f8c8 3000 	strge.w	r3, [r8]
 8004d22:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004d26:	4b9a      	ldr	r3, [pc, #616]	; (8004f90 <_dtoa_r+0x2d0>)
 8004d28:	bfbc      	itt	lt
 8004d2a:	2201      	movlt	r2, #1
 8004d2c:	f8c8 2000 	strlt.w	r2, [r8]
 8004d30:	ea33 0309 	bics.w	r3, r3, r9
 8004d34:	d119      	bne.n	8004d6a <_dtoa_r+0xaa>
 8004d36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d38:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d3c:	6013      	str	r3, [r2, #0]
 8004d3e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d42:	4333      	orrs	r3, r6
 8004d44:	f000 8580 	beq.w	8005848 <_dtoa_r+0xb88>
 8004d48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d4a:	b953      	cbnz	r3, 8004d62 <_dtoa_r+0xa2>
 8004d4c:	4b91      	ldr	r3, [pc, #580]	; (8004f94 <_dtoa_r+0x2d4>)
 8004d4e:	e022      	b.n	8004d96 <_dtoa_r+0xd6>
 8004d50:	4b91      	ldr	r3, [pc, #580]	; (8004f98 <_dtoa_r+0x2d8>)
 8004d52:	9303      	str	r3, [sp, #12]
 8004d54:	3308      	adds	r3, #8
 8004d56:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	9803      	ldr	r0, [sp, #12]
 8004d5c:	b019      	add	sp, #100	; 0x64
 8004d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d62:	4b8c      	ldr	r3, [pc, #560]	; (8004f94 <_dtoa_r+0x2d4>)
 8004d64:	9303      	str	r3, [sp, #12]
 8004d66:	3303      	adds	r3, #3
 8004d68:	e7f5      	b.n	8004d56 <_dtoa_r+0x96>
 8004d6a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004d6e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004d72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d76:	2200      	movs	r2, #0
 8004d78:	2300      	movs	r3, #0
 8004d7a:	f7fb ff61 	bl	8000c40 <__aeabi_dcmpeq>
 8004d7e:	4680      	mov	r8, r0
 8004d80:	b158      	cbz	r0, 8004d9a <_dtoa_r+0xda>
 8004d82:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d84:	2301      	movs	r3, #1
 8004d86:	6013      	str	r3, [r2, #0]
 8004d88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 8559 	beq.w	8005842 <_dtoa_r+0xb82>
 8004d90:	4882      	ldr	r0, [pc, #520]	; (8004f9c <_dtoa_r+0x2dc>)
 8004d92:	6018      	str	r0, [r3, #0]
 8004d94:	1e43      	subs	r3, r0, #1
 8004d96:	9303      	str	r3, [sp, #12]
 8004d98:	e7df      	b.n	8004d5a <_dtoa_r+0x9a>
 8004d9a:	ab16      	add	r3, sp, #88	; 0x58
 8004d9c:	9301      	str	r3, [sp, #4]
 8004d9e:	ab17      	add	r3, sp, #92	; 0x5c
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	4628      	mov	r0, r5
 8004da4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004da8:	f001 fcf6 	bl	8006798 <__d2b>
 8004dac:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004db0:	4683      	mov	fp, r0
 8004db2:	2c00      	cmp	r4, #0
 8004db4:	d07e      	beq.n	8004eb4 <_dtoa_r+0x1f4>
 8004db6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004db8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004dbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004dc4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004dc8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004dcc:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004dd0:	4b73      	ldr	r3, [pc, #460]	; (8004fa0 <_dtoa_r+0x2e0>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f7fb fb14 	bl	8000400 <__aeabi_dsub>
 8004dd8:	a365      	add	r3, pc, #404	; (adr r3, 8004f70 <_dtoa_r+0x2b0>)
 8004dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dde:	f7fb fcc7 	bl	8000770 <__aeabi_dmul>
 8004de2:	a365      	add	r3, pc, #404	; (adr r3, 8004f78 <_dtoa_r+0x2b8>)
 8004de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de8:	f7fb fb0c 	bl	8000404 <__adddf3>
 8004dec:	4606      	mov	r6, r0
 8004dee:	4620      	mov	r0, r4
 8004df0:	460f      	mov	r7, r1
 8004df2:	f7fb fc53 	bl	800069c <__aeabi_i2d>
 8004df6:	a362      	add	r3, pc, #392	; (adr r3, 8004f80 <_dtoa_r+0x2c0>)
 8004df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfc:	f7fb fcb8 	bl	8000770 <__aeabi_dmul>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4630      	mov	r0, r6
 8004e06:	4639      	mov	r1, r7
 8004e08:	f7fb fafc 	bl	8000404 <__adddf3>
 8004e0c:	4606      	mov	r6, r0
 8004e0e:	460f      	mov	r7, r1
 8004e10:	f7fb ff5e 	bl	8000cd0 <__aeabi_d2iz>
 8004e14:	2200      	movs	r2, #0
 8004e16:	4682      	mov	sl, r0
 8004e18:	2300      	movs	r3, #0
 8004e1a:	4630      	mov	r0, r6
 8004e1c:	4639      	mov	r1, r7
 8004e1e:	f7fb ff19 	bl	8000c54 <__aeabi_dcmplt>
 8004e22:	b148      	cbz	r0, 8004e38 <_dtoa_r+0x178>
 8004e24:	4650      	mov	r0, sl
 8004e26:	f7fb fc39 	bl	800069c <__aeabi_i2d>
 8004e2a:	4632      	mov	r2, r6
 8004e2c:	463b      	mov	r3, r7
 8004e2e:	f7fb ff07 	bl	8000c40 <__aeabi_dcmpeq>
 8004e32:	b908      	cbnz	r0, 8004e38 <_dtoa_r+0x178>
 8004e34:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004e38:	f1ba 0f16 	cmp.w	sl, #22
 8004e3c:	d857      	bhi.n	8004eee <_dtoa_r+0x22e>
 8004e3e:	4b59      	ldr	r3, [pc, #356]	; (8004fa4 <_dtoa_r+0x2e4>)
 8004e40:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e4c:	f7fb ff02 	bl	8000c54 <__aeabi_dcmplt>
 8004e50:	2800      	cmp	r0, #0
 8004e52:	d04e      	beq.n	8004ef2 <_dtoa_r+0x232>
 8004e54:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004e58:	2300      	movs	r3, #0
 8004e5a:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004e5e:	1b1c      	subs	r4, r3, r4
 8004e60:	1e63      	subs	r3, r4, #1
 8004e62:	9309      	str	r3, [sp, #36]	; 0x24
 8004e64:	bf45      	ittet	mi
 8004e66:	f1c4 0301 	rsbmi	r3, r4, #1
 8004e6a:	9306      	strmi	r3, [sp, #24]
 8004e6c:	2300      	movpl	r3, #0
 8004e6e:	2300      	movmi	r3, #0
 8004e70:	bf4c      	ite	mi
 8004e72:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004e74:	9306      	strpl	r3, [sp, #24]
 8004e76:	f1ba 0f00 	cmp.w	sl, #0
 8004e7a:	db3c      	blt.n	8004ef6 <_dtoa_r+0x236>
 8004e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e7e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004e82:	4453      	add	r3, sl
 8004e84:	9309      	str	r3, [sp, #36]	; 0x24
 8004e86:	2300      	movs	r3, #0
 8004e88:	930a      	str	r3, [sp, #40]	; 0x28
 8004e8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e8c:	2b09      	cmp	r3, #9
 8004e8e:	f200 808d 	bhi.w	8004fac <_dtoa_r+0x2ec>
 8004e92:	2b05      	cmp	r3, #5
 8004e94:	bfc4      	itt	gt
 8004e96:	3b04      	subgt	r3, #4
 8004e98:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004e9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e9c:	f1a3 0302 	sub.w	r3, r3, #2
 8004ea0:	bfcc      	ite	gt
 8004ea2:	2400      	movgt	r4, #0
 8004ea4:	2401      	movle	r4, #1
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	f200 808c 	bhi.w	8004fc4 <_dtoa_r+0x304>
 8004eac:	e8df f003 	tbb	[pc, r3]
 8004eb0:	5b4d4f2d 	.word	0x5b4d4f2d
 8004eb4:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004eb8:	441c      	add	r4, r3
 8004eba:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004ebe:	2b20      	cmp	r3, #32
 8004ec0:	bfc3      	ittte	gt
 8004ec2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004ec6:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004eca:	fa09 f303 	lslgt.w	r3, r9, r3
 8004ece:	f1c3 0320 	rsble	r3, r3, #32
 8004ed2:	bfc6      	itte	gt
 8004ed4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004ed8:	4318      	orrgt	r0, r3
 8004eda:	fa06 f003 	lslle.w	r0, r6, r3
 8004ede:	f7fb fbcd 	bl	800067c <__aeabi_ui2d>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004ee8:	3c01      	subs	r4, #1
 8004eea:	9313      	str	r3, [sp, #76]	; 0x4c
 8004eec:	e770      	b.n	8004dd0 <_dtoa_r+0x110>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e7b3      	b.n	8004e5a <_dtoa_r+0x19a>
 8004ef2:	900f      	str	r0, [sp, #60]	; 0x3c
 8004ef4:	e7b2      	b.n	8004e5c <_dtoa_r+0x19c>
 8004ef6:	9b06      	ldr	r3, [sp, #24]
 8004ef8:	eba3 030a 	sub.w	r3, r3, sl
 8004efc:	9306      	str	r3, [sp, #24]
 8004efe:	f1ca 0300 	rsb	r3, sl, #0
 8004f02:	930a      	str	r3, [sp, #40]	; 0x28
 8004f04:	2300      	movs	r3, #0
 8004f06:	930e      	str	r3, [sp, #56]	; 0x38
 8004f08:	e7bf      	b.n	8004e8a <_dtoa_r+0x1ca>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	dc5a      	bgt.n	8004fca <_dtoa_r+0x30a>
 8004f14:	f04f 0901 	mov.w	r9, #1
 8004f18:	f8cd 9020 	str.w	r9, [sp, #32]
 8004f1c:	464b      	mov	r3, r9
 8004f1e:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004f22:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004f24:	2200      	movs	r2, #0
 8004f26:	6042      	str	r2, [r0, #4]
 8004f28:	2204      	movs	r2, #4
 8004f2a:	f102 0614 	add.w	r6, r2, #20
 8004f2e:	429e      	cmp	r6, r3
 8004f30:	6841      	ldr	r1, [r0, #4]
 8004f32:	d950      	bls.n	8004fd6 <_dtoa_r+0x316>
 8004f34:	4628      	mov	r0, r5
 8004f36:	f001 f849 	bl	8005fcc <_Balloc>
 8004f3a:	9003      	str	r0, [sp, #12]
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	d14e      	bne.n	8004fde <_dtoa_r+0x31e>
 8004f40:	4b19      	ldr	r3, [pc, #100]	; (8004fa8 <_dtoa_r+0x2e8>)
 8004f42:	4602      	mov	r2, r0
 8004f44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004f48:	e6ce      	b.n	8004ce8 <_dtoa_r+0x28>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e7de      	b.n	8004f0c <_dtoa_r+0x24c>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f54:	eb0a 0903 	add.w	r9, sl, r3
 8004f58:	f109 0301 	add.w	r3, r9, #1
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	9308      	str	r3, [sp, #32]
 8004f60:	bfb8      	it	lt
 8004f62:	2301      	movlt	r3, #1
 8004f64:	e7dd      	b.n	8004f22 <_dtoa_r+0x262>
 8004f66:	2301      	movs	r3, #1
 8004f68:	e7f2      	b.n	8004f50 <_dtoa_r+0x290>
 8004f6a:	bf00      	nop
 8004f6c:	f3af 8000 	nop.w
 8004f70:	636f4361 	.word	0x636f4361
 8004f74:	3fd287a7 	.word	0x3fd287a7
 8004f78:	8b60c8b3 	.word	0x8b60c8b3
 8004f7c:	3fc68a28 	.word	0x3fc68a28
 8004f80:	509f79fb 	.word	0x509f79fb
 8004f84:	3fd34413 	.word	0x3fd34413
 8004f88:	08007d36 	.word	0x08007d36
 8004f8c:	08007d4d 	.word	0x08007d4d
 8004f90:	7ff00000 	.word	0x7ff00000
 8004f94:	08007d32 	.word	0x08007d32
 8004f98:	08007d29 	.word	0x08007d29
 8004f9c:	08007bad 	.word	0x08007bad
 8004fa0:	3ff80000 	.word	0x3ff80000
 8004fa4:	08007eb8 	.word	0x08007eb8
 8004fa8:	08007da8 	.word	0x08007da8
 8004fac:	2401      	movs	r4, #1
 8004fae:	2300      	movs	r3, #0
 8004fb0:	9322      	str	r3, [sp, #136]	; 0x88
 8004fb2:	940b      	str	r4, [sp, #44]	; 0x2c
 8004fb4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f8cd 9020 	str.w	r9, [sp, #32]
 8004fbe:	2312      	movs	r3, #18
 8004fc0:	9223      	str	r2, [sp, #140]	; 0x8c
 8004fc2:	e7ae      	b.n	8004f22 <_dtoa_r+0x262>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fc8:	e7f4      	b.n	8004fb4 <_dtoa_r+0x2f4>
 8004fca:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004fce:	f8cd 9020 	str.w	r9, [sp, #32]
 8004fd2:	464b      	mov	r3, r9
 8004fd4:	e7a5      	b.n	8004f22 <_dtoa_r+0x262>
 8004fd6:	3101      	adds	r1, #1
 8004fd8:	6041      	str	r1, [r0, #4]
 8004fda:	0052      	lsls	r2, r2, #1
 8004fdc:	e7a5      	b.n	8004f2a <_dtoa_r+0x26a>
 8004fde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004fe0:	9a03      	ldr	r2, [sp, #12]
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	9b08      	ldr	r3, [sp, #32]
 8004fe6:	2b0e      	cmp	r3, #14
 8004fe8:	f200 80a8 	bhi.w	800513c <_dtoa_r+0x47c>
 8004fec:	2c00      	cmp	r4, #0
 8004fee:	f000 80a5 	beq.w	800513c <_dtoa_r+0x47c>
 8004ff2:	f1ba 0f00 	cmp.w	sl, #0
 8004ff6:	dd34      	ble.n	8005062 <_dtoa_r+0x3a2>
 8004ff8:	4a9a      	ldr	r2, [pc, #616]	; (8005264 <_dtoa_r+0x5a4>)
 8004ffa:	f00a 030f 	and.w	r3, sl, #15
 8004ffe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005002:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005006:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800500a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800500e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005012:	d016      	beq.n	8005042 <_dtoa_r+0x382>
 8005014:	4b94      	ldr	r3, [pc, #592]	; (8005268 <_dtoa_r+0x5a8>)
 8005016:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800501a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800501e:	f7fb fcd1 	bl	80009c4 <__aeabi_ddiv>
 8005022:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005026:	f004 040f 	and.w	r4, r4, #15
 800502a:	2703      	movs	r7, #3
 800502c:	4e8e      	ldr	r6, [pc, #568]	; (8005268 <_dtoa_r+0x5a8>)
 800502e:	b954      	cbnz	r4, 8005046 <_dtoa_r+0x386>
 8005030:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005034:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005038:	f7fb fcc4 	bl	80009c4 <__aeabi_ddiv>
 800503c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005040:	e029      	b.n	8005096 <_dtoa_r+0x3d6>
 8005042:	2702      	movs	r7, #2
 8005044:	e7f2      	b.n	800502c <_dtoa_r+0x36c>
 8005046:	07e1      	lsls	r1, r4, #31
 8005048:	d508      	bpl.n	800505c <_dtoa_r+0x39c>
 800504a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800504e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005052:	f7fb fb8d 	bl	8000770 <__aeabi_dmul>
 8005056:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800505a:	3701      	adds	r7, #1
 800505c:	1064      	asrs	r4, r4, #1
 800505e:	3608      	adds	r6, #8
 8005060:	e7e5      	b.n	800502e <_dtoa_r+0x36e>
 8005062:	f000 80a5 	beq.w	80051b0 <_dtoa_r+0x4f0>
 8005066:	f1ca 0400 	rsb	r4, sl, #0
 800506a:	4b7e      	ldr	r3, [pc, #504]	; (8005264 <_dtoa_r+0x5a4>)
 800506c:	4e7e      	ldr	r6, [pc, #504]	; (8005268 <_dtoa_r+0x5a8>)
 800506e:	f004 020f 	and.w	r2, r4, #15
 8005072:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800507e:	f7fb fb77 	bl	8000770 <__aeabi_dmul>
 8005082:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005086:	1124      	asrs	r4, r4, #4
 8005088:	2300      	movs	r3, #0
 800508a:	2702      	movs	r7, #2
 800508c:	2c00      	cmp	r4, #0
 800508e:	f040 8084 	bne.w	800519a <_dtoa_r+0x4da>
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1d2      	bne.n	800503c <_dtoa_r+0x37c>
 8005096:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 808b 	beq.w	80051b4 <_dtoa_r+0x4f4>
 800509e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80050a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80050a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050aa:	4b70      	ldr	r3, [pc, #448]	; (800526c <_dtoa_r+0x5ac>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	f7fb fdd1 	bl	8000c54 <__aeabi_dcmplt>
 80050b2:	2800      	cmp	r0, #0
 80050b4:	d07e      	beq.n	80051b4 <_dtoa_r+0x4f4>
 80050b6:	9b08      	ldr	r3, [sp, #32]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d07b      	beq.n	80051b4 <_dtoa_r+0x4f4>
 80050bc:	f1b9 0f00 	cmp.w	r9, #0
 80050c0:	dd38      	ble.n	8005134 <_dtoa_r+0x474>
 80050c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050c6:	4b6a      	ldr	r3, [pc, #424]	; (8005270 <_dtoa_r+0x5b0>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	f7fb fb51 	bl	8000770 <__aeabi_dmul>
 80050ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050d2:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 80050d6:	3701      	adds	r7, #1
 80050d8:	464c      	mov	r4, r9
 80050da:	4638      	mov	r0, r7
 80050dc:	f7fb fade 	bl	800069c <__aeabi_i2d>
 80050e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050e4:	f7fb fb44 	bl	8000770 <__aeabi_dmul>
 80050e8:	4b62      	ldr	r3, [pc, #392]	; (8005274 <_dtoa_r+0x5b4>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	f7fb f98a 	bl	8000404 <__adddf3>
 80050f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80050f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050f8:	9611      	str	r6, [sp, #68]	; 0x44
 80050fa:	2c00      	cmp	r4, #0
 80050fc:	d15d      	bne.n	80051ba <_dtoa_r+0x4fa>
 80050fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005102:	4b5d      	ldr	r3, [pc, #372]	; (8005278 <_dtoa_r+0x5b8>)
 8005104:	2200      	movs	r2, #0
 8005106:	f7fb f97b 	bl	8000400 <__aeabi_dsub>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005112:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005114:	4633      	mov	r3, r6
 8005116:	f7fb fdbb 	bl	8000c90 <__aeabi_dcmpgt>
 800511a:	2800      	cmp	r0, #0
 800511c:	f040 829c 	bne.w	8005658 <_dtoa_r+0x998>
 8005120:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005124:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005126:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800512a:	f7fb fd93 	bl	8000c54 <__aeabi_dcmplt>
 800512e:	2800      	cmp	r0, #0
 8005130:	f040 8290 	bne.w	8005654 <_dtoa_r+0x994>
 8005134:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005138:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800513c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800513e:	2b00      	cmp	r3, #0
 8005140:	f2c0 8152 	blt.w	80053e8 <_dtoa_r+0x728>
 8005144:	f1ba 0f0e 	cmp.w	sl, #14
 8005148:	f300 814e 	bgt.w	80053e8 <_dtoa_r+0x728>
 800514c:	4b45      	ldr	r3, [pc, #276]	; (8005264 <_dtoa_r+0x5a4>)
 800514e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005152:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005156:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800515a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800515c:	2b00      	cmp	r3, #0
 800515e:	f280 80db 	bge.w	8005318 <_dtoa_r+0x658>
 8005162:	9b08      	ldr	r3, [sp, #32]
 8005164:	2b00      	cmp	r3, #0
 8005166:	f300 80d7 	bgt.w	8005318 <_dtoa_r+0x658>
 800516a:	f040 8272 	bne.w	8005652 <_dtoa_r+0x992>
 800516e:	4b42      	ldr	r3, [pc, #264]	; (8005278 <_dtoa_r+0x5b8>)
 8005170:	2200      	movs	r2, #0
 8005172:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005176:	f7fb fafb 	bl	8000770 <__aeabi_dmul>
 800517a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800517e:	f7fb fd7d 	bl	8000c7c <__aeabi_dcmpge>
 8005182:	9c08      	ldr	r4, [sp, #32]
 8005184:	4626      	mov	r6, r4
 8005186:	2800      	cmp	r0, #0
 8005188:	f040 8248 	bne.w	800561c <_dtoa_r+0x95c>
 800518c:	9f03      	ldr	r7, [sp, #12]
 800518e:	2331      	movs	r3, #49	; 0x31
 8005190:	f807 3b01 	strb.w	r3, [r7], #1
 8005194:	f10a 0a01 	add.w	sl, sl, #1
 8005198:	e244      	b.n	8005624 <_dtoa_r+0x964>
 800519a:	07e2      	lsls	r2, r4, #31
 800519c:	d505      	bpl.n	80051aa <_dtoa_r+0x4ea>
 800519e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80051a2:	f7fb fae5 	bl	8000770 <__aeabi_dmul>
 80051a6:	3701      	adds	r7, #1
 80051a8:	2301      	movs	r3, #1
 80051aa:	1064      	asrs	r4, r4, #1
 80051ac:	3608      	adds	r6, #8
 80051ae:	e76d      	b.n	800508c <_dtoa_r+0x3cc>
 80051b0:	2702      	movs	r7, #2
 80051b2:	e770      	b.n	8005096 <_dtoa_r+0x3d6>
 80051b4:	9c08      	ldr	r4, [sp, #32]
 80051b6:	46d0      	mov	r8, sl
 80051b8:	e78f      	b.n	80050da <_dtoa_r+0x41a>
 80051ba:	9903      	ldr	r1, [sp, #12]
 80051bc:	4b29      	ldr	r3, [pc, #164]	; (8005264 <_dtoa_r+0x5a4>)
 80051be:	4421      	add	r1, r4
 80051c0:	9112      	str	r1, [sp, #72]	; 0x48
 80051c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80051c8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80051cc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80051d0:	2900      	cmp	r1, #0
 80051d2:	d055      	beq.n	8005280 <_dtoa_r+0x5c0>
 80051d4:	4929      	ldr	r1, [pc, #164]	; (800527c <_dtoa_r+0x5bc>)
 80051d6:	2000      	movs	r0, #0
 80051d8:	f7fb fbf4 	bl	80009c4 <__aeabi_ddiv>
 80051dc:	463b      	mov	r3, r7
 80051de:	4632      	mov	r2, r6
 80051e0:	f7fb f90e 	bl	8000400 <__aeabi_dsub>
 80051e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051e8:	9f03      	ldr	r7, [sp, #12]
 80051ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051ee:	f7fb fd6f 	bl	8000cd0 <__aeabi_d2iz>
 80051f2:	4604      	mov	r4, r0
 80051f4:	f7fb fa52 	bl	800069c <__aeabi_i2d>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005200:	f7fb f8fe 	bl	8000400 <__aeabi_dsub>
 8005204:	3430      	adds	r4, #48	; 0x30
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800520e:	f807 4b01 	strb.w	r4, [r7], #1
 8005212:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005216:	f7fb fd1d 	bl	8000c54 <__aeabi_dcmplt>
 800521a:	2800      	cmp	r0, #0
 800521c:	d174      	bne.n	8005308 <_dtoa_r+0x648>
 800521e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005222:	4912      	ldr	r1, [pc, #72]	; (800526c <_dtoa_r+0x5ac>)
 8005224:	2000      	movs	r0, #0
 8005226:	f7fb f8eb 	bl	8000400 <__aeabi_dsub>
 800522a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800522e:	f7fb fd11 	bl	8000c54 <__aeabi_dcmplt>
 8005232:	2800      	cmp	r0, #0
 8005234:	f040 80b7 	bne.w	80053a6 <_dtoa_r+0x6e6>
 8005238:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800523a:	429f      	cmp	r7, r3
 800523c:	f43f af7a 	beq.w	8005134 <_dtoa_r+0x474>
 8005240:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005244:	4b0a      	ldr	r3, [pc, #40]	; (8005270 <_dtoa_r+0x5b0>)
 8005246:	2200      	movs	r2, #0
 8005248:	f7fb fa92 	bl	8000770 <__aeabi_dmul>
 800524c:	4b08      	ldr	r3, [pc, #32]	; (8005270 <_dtoa_r+0x5b0>)
 800524e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005252:	2200      	movs	r2, #0
 8005254:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005258:	f7fb fa8a 	bl	8000770 <__aeabi_dmul>
 800525c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005260:	e7c3      	b.n	80051ea <_dtoa_r+0x52a>
 8005262:	bf00      	nop
 8005264:	08007eb8 	.word	0x08007eb8
 8005268:	08007e90 	.word	0x08007e90
 800526c:	3ff00000 	.word	0x3ff00000
 8005270:	40240000 	.word	0x40240000
 8005274:	401c0000 	.word	0x401c0000
 8005278:	40140000 	.word	0x40140000
 800527c:	3fe00000 	.word	0x3fe00000
 8005280:	4630      	mov	r0, r6
 8005282:	4639      	mov	r1, r7
 8005284:	f7fb fa74 	bl	8000770 <__aeabi_dmul>
 8005288:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800528c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800528e:	9c03      	ldr	r4, [sp, #12]
 8005290:	9314      	str	r3, [sp, #80]	; 0x50
 8005292:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005296:	f7fb fd1b 	bl	8000cd0 <__aeabi_d2iz>
 800529a:	9015      	str	r0, [sp, #84]	; 0x54
 800529c:	f7fb f9fe 	bl	800069c <__aeabi_i2d>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052a8:	f7fb f8aa 	bl	8000400 <__aeabi_dsub>
 80052ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80052ae:	3330      	adds	r3, #48	; 0x30
 80052b0:	f804 3b01 	strb.w	r3, [r4], #1
 80052b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052b6:	429c      	cmp	r4, r3
 80052b8:	4606      	mov	r6, r0
 80052ba:	460f      	mov	r7, r1
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	d124      	bne.n	800530c <_dtoa_r+0x64c>
 80052c2:	4ba4      	ldr	r3, [pc, #656]	; (8005554 <_dtoa_r+0x894>)
 80052c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80052c8:	f7fb f89c 	bl	8000404 <__adddf3>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4630      	mov	r0, r6
 80052d2:	4639      	mov	r1, r7
 80052d4:	f7fb fcdc 	bl	8000c90 <__aeabi_dcmpgt>
 80052d8:	2800      	cmp	r0, #0
 80052da:	d163      	bne.n	80053a4 <_dtoa_r+0x6e4>
 80052dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80052e0:	499c      	ldr	r1, [pc, #624]	; (8005554 <_dtoa_r+0x894>)
 80052e2:	2000      	movs	r0, #0
 80052e4:	f7fb f88c 	bl	8000400 <__aeabi_dsub>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4630      	mov	r0, r6
 80052ee:	4639      	mov	r1, r7
 80052f0:	f7fb fcb0 	bl	8000c54 <__aeabi_dcmplt>
 80052f4:	2800      	cmp	r0, #0
 80052f6:	f43f af1d 	beq.w	8005134 <_dtoa_r+0x474>
 80052fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80052fc:	1e7b      	subs	r3, r7, #1
 80052fe:	9314      	str	r3, [sp, #80]	; 0x50
 8005300:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005304:	2b30      	cmp	r3, #48	; 0x30
 8005306:	d0f8      	beq.n	80052fa <_dtoa_r+0x63a>
 8005308:	46c2      	mov	sl, r8
 800530a:	e03b      	b.n	8005384 <_dtoa_r+0x6c4>
 800530c:	4b92      	ldr	r3, [pc, #584]	; (8005558 <_dtoa_r+0x898>)
 800530e:	f7fb fa2f 	bl	8000770 <__aeabi_dmul>
 8005312:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005316:	e7bc      	b.n	8005292 <_dtoa_r+0x5d2>
 8005318:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800531c:	9f03      	ldr	r7, [sp, #12]
 800531e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005322:	4640      	mov	r0, r8
 8005324:	4649      	mov	r1, r9
 8005326:	f7fb fb4d 	bl	80009c4 <__aeabi_ddiv>
 800532a:	f7fb fcd1 	bl	8000cd0 <__aeabi_d2iz>
 800532e:	4604      	mov	r4, r0
 8005330:	f7fb f9b4 	bl	800069c <__aeabi_i2d>
 8005334:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005338:	f7fb fa1a 	bl	8000770 <__aeabi_dmul>
 800533c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	4640      	mov	r0, r8
 8005346:	4649      	mov	r1, r9
 8005348:	f7fb f85a 	bl	8000400 <__aeabi_dsub>
 800534c:	f807 6b01 	strb.w	r6, [r7], #1
 8005350:	9e03      	ldr	r6, [sp, #12]
 8005352:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005356:	1bbe      	subs	r6, r7, r6
 8005358:	45b4      	cmp	ip, r6
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	d136      	bne.n	80053ce <_dtoa_r+0x70e>
 8005360:	f7fb f850 	bl	8000404 <__adddf3>
 8005364:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005368:	4680      	mov	r8, r0
 800536a:	4689      	mov	r9, r1
 800536c:	f7fb fc90 	bl	8000c90 <__aeabi_dcmpgt>
 8005370:	bb58      	cbnz	r0, 80053ca <_dtoa_r+0x70a>
 8005372:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005376:	4640      	mov	r0, r8
 8005378:	4649      	mov	r1, r9
 800537a:	f7fb fc61 	bl	8000c40 <__aeabi_dcmpeq>
 800537e:	b108      	cbz	r0, 8005384 <_dtoa_r+0x6c4>
 8005380:	07e1      	lsls	r1, r4, #31
 8005382:	d422      	bmi.n	80053ca <_dtoa_r+0x70a>
 8005384:	4628      	mov	r0, r5
 8005386:	4659      	mov	r1, fp
 8005388:	f000 fe60 	bl	800604c <_Bfree>
 800538c:	2300      	movs	r3, #0
 800538e:	703b      	strb	r3, [r7, #0]
 8005390:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005392:	f10a 0001 	add.w	r0, sl, #1
 8005396:	6018      	str	r0, [r3, #0]
 8005398:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800539a:	2b00      	cmp	r3, #0
 800539c:	f43f acdd 	beq.w	8004d5a <_dtoa_r+0x9a>
 80053a0:	601f      	str	r7, [r3, #0]
 80053a2:	e4da      	b.n	8004d5a <_dtoa_r+0x9a>
 80053a4:	4627      	mov	r7, r4
 80053a6:	463b      	mov	r3, r7
 80053a8:	461f      	mov	r7, r3
 80053aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80053ae:	2a39      	cmp	r2, #57	; 0x39
 80053b0:	d107      	bne.n	80053c2 <_dtoa_r+0x702>
 80053b2:	9a03      	ldr	r2, [sp, #12]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d1f7      	bne.n	80053a8 <_dtoa_r+0x6e8>
 80053b8:	9903      	ldr	r1, [sp, #12]
 80053ba:	2230      	movs	r2, #48	; 0x30
 80053bc:	f108 0801 	add.w	r8, r8, #1
 80053c0:	700a      	strb	r2, [r1, #0]
 80053c2:	781a      	ldrb	r2, [r3, #0]
 80053c4:	3201      	adds	r2, #1
 80053c6:	701a      	strb	r2, [r3, #0]
 80053c8:	e79e      	b.n	8005308 <_dtoa_r+0x648>
 80053ca:	46d0      	mov	r8, sl
 80053cc:	e7eb      	b.n	80053a6 <_dtoa_r+0x6e6>
 80053ce:	4b62      	ldr	r3, [pc, #392]	; (8005558 <_dtoa_r+0x898>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	f7fb f9cd 	bl	8000770 <__aeabi_dmul>
 80053d6:	2200      	movs	r2, #0
 80053d8:	2300      	movs	r3, #0
 80053da:	4680      	mov	r8, r0
 80053dc:	4689      	mov	r9, r1
 80053de:	f7fb fc2f 	bl	8000c40 <__aeabi_dcmpeq>
 80053e2:	2800      	cmp	r0, #0
 80053e4:	d09b      	beq.n	800531e <_dtoa_r+0x65e>
 80053e6:	e7cd      	b.n	8005384 <_dtoa_r+0x6c4>
 80053e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80053ea:	2a00      	cmp	r2, #0
 80053ec:	f000 80d0 	beq.w	8005590 <_dtoa_r+0x8d0>
 80053f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80053f2:	2a01      	cmp	r2, #1
 80053f4:	f300 80b2 	bgt.w	800555c <_dtoa_r+0x89c>
 80053f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80053fa:	2a00      	cmp	r2, #0
 80053fc:	f000 80a6 	beq.w	800554c <_dtoa_r+0x88c>
 8005400:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005404:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005406:	9f06      	ldr	r7, [sp, #24]
 8005408:	9a06      	ldr	r2, [sp, #24]
 800540a:	441a      	add	r2, r3
 800540c:	9206      	str	r2, [sp, #24]
 800540e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005410:	2101      	movs	r1, #1
 8005412:	441a      	add	r2, r3
 8005414:	4628      	mov	r0, r5
 8005416:	9209      	str	r2, [sp, #36]	; 0x24
 8005418:	f000 ff18 	bl	800624c <__i2b>
 800541c:	4606      	mov	r6, r0
 800541e:	2f00      	cmp	r7, #0
 8005420:	dd0c      	ble.n	800543c <_dtoa_r+0x77c>
 8005422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005424:	2b00      	cmp	r3, #0
 8005426:	dd09      	ble.n	800543c <_dtoa_r+0x77c>
 8005428:	42bb      	cmp	r3, r7
 800542a:	9a06      	ldr	r2, [sp, #24]
 800542c:	bfa8      	it	ge
 800542e:	463b      	movge	r3, r7
 8005430:	1ad2      	subs	r2, r2, r3
 8005432:	9206      	str	r2, [sp, #24]
 8005434:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005436:	1aff      	subs	r7, r7, r3
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	9309      	str	r3, [sp, #36]	; 0x24
 800543c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800543e:	b1f3      	cbz	r3, 800547e <_dtoa_r+0x7be>
 8005440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 80a8 	beq.w	8005598 <_dtoa_r+0x8d8>
 8005448:	2c00      	cmp	r4, #0
 800544a:	dd10      	ble.n	800546e <_dtoa_r+0x7ae>
 800544c:	4631      	mov	r1, r6
 800544e:	4622      	mov	r2, r4
 8005450:	4628      	mov	r0, r5
 8005452:	f000 ffb9 	bl	80063c8 <__pow5mult>
 8005456:	465a      	mov	r2, fp
 8005458:	4601      	mov	r1, r0
 800545a:	4606      	mov	r6, r0
 800545c:	4628      	mov	r0, r5
 800545e:	f000 ff0b 	bl	8006278 <__multiply>
 8005462:	4659      	mov	r1, fp
 8005464:	4680      	mov	r8, r0
 8005466:	4628      	mov	r0, r5
 8005468:	f000 fdf0 	bl	800604c <_Bfree>
 800546c:	46c3      	mov	fp, r8
 800546e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005470:	1b1a      	subs	r2, r3, r4
 8005472:	d004      	beq.n	800547e <_dtoa_r+0x7be>
 8005474:	4659      	mov	r1, fp
 8005476:	4628      	mov	r0, r5
 8005478:	f000 ffa6 	bl	80063c8 <__pow5mult>
 800547c:	4683      	mov	fp, r0
 800547e:	2101      	movs	r1, #1
 8005480:	4628      	mov	r0, r5
 8005482:	f000 fee3 	bl	800624c <__i2b>
 8005486:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005488:	2b00      	cmp	r3, #0
 800548a:	4604      	mov	r4, r0
 800548c:	f340 8086 	ble.w	800559c <_dtoa_r+0x8dc>
 8005490:	461a      	mov	r2, r3
 8005492:	4601      	mov	r1, r0
 8005494:	4628      	mov	r0, r5
 8005496:	f000 ff97 	bl	80063c8 <__pow5mult>
 800549a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800549c:	2b01      	cmp	r3, #1
 800549e:	4604      	mov	r4, r0
 80054a0:	dd7f      	ble.n	80055a2 <_dtoa_r+0x8e2>
 80054a2:	f04f 0800 	mov.w	r8, #0
 80054a6:	6923      	ldr	r3, [r4, #16]
 80054a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80054ac:	6918      	ldr	r0, [r3, #16]
 80054ae:	f000 fe7f 	bl	80061b0 <__hi0bits>
 80054b2:	f1c0 0020 	rsb	r0, r0, #32
 80054b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054b8:	4418      	add	r0, r3
 80054ba:	f010 001f 	ands.w	r0, r0, #31
 80054be:	f000 8092 	beq.w	80055e6 <_dtoa_r+0x926>
 80054c2:	f1c0 0320 	rsb	r3, r0, #32
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	f340 808a 	ble.w	80055e0 <_dtoa_r+0x920>
 80054cc:	f1c0 001c 	rsb	r0, r0, #28
 80054d0:	9b06      	ldr	r3, [sp, #24]
 80054d2:	4403      	add	r3, r0
 80054d4:	9306      	str	r3, [sp, #24]
 80054d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054d8:	4403      	add	r3, r0
 80054da:	4407      	add	r7, r0
 80054dc:	9309      	str	r3, [sp, #36]	; 0x24
 80054de:	9b06      	ldr	r3, [sp, #24]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	dd05      	ble.n	80054f0 <_dtoa_r+0x830>
 80054e4:	4659      	mov	r1, fp
 80054e6:	461a      	mov	r2, r3
 80054e8:	4628      	mov	r0, r5
 80054ea:	f000 ffc7 	bl	800647c <__lshift>
 80054ee:	4683      	mov	fp, r0
 80054f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	dd05      	ble.n	8005502 <_dtoa_r+0x842>
 80054f6:	4621      	mov	r1, r4
 80054f8:	461a      	mov	r2, r3
 80054fa:	4628      	mov	r0, r5
 80054fc:	f000 ffbe 	bl	800647c <__lshift>
 8005500:	4604      	mov	r4, r0
 8005502:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005504:	2b00      	cmp	r3, #0
 8005506:	d070      	beq.n	80055ea <_dtoa_r+0x92a>
 8005508:	4621      	mov	r1, r4
 800550a:	4658      	mov	r0, fp
 800550c:	f001 f826 	bl	800655c <__mcmp>
 8005510:	2800      	cmp	r0, #0
 8005512:	da6a      	bge.n	80055ea <_dtoa_r+0x92a>
 8005514:	2300      	movs	r3, #0
 8005516:	4659      	mov	r1, fp
 8005518:	220a      	movs	r2, #10
 800551a:	4628      	mov	r0, r5
 800551c:	f000 fdb8 	bl	8006090 <__multadd>
 8005520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005522:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005526:	4683      	mov	fp, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 8194 	beq.w	8005856 <_dtoa_r+0xb96>
 800552e:	4631      	mov	r1, r6
 8005530:	2300      	movs	r3, #0
 8005532:	220a      	movs	r2, #10
 8005534:	4628      	mov	r0, r5
 8005536:	f000 fdab 	bl	8006090 <__multadd>
 800553a:	f1b9 0f00 	cmp.w	r9, #0
 800553e:	4606      	mov	r6, r0
 8005540:	f300 8093 	bgt.w	800566a <_dtoa_r+0x9aa>
 8005544:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005546:	2b02      	cmp	r3, #2
 8005548:	dc57      	bgt.n	80055fa <_dtoa_r+0x93a>
 800554a:	e08e      	b.n	800566a <_dtoa_r+0x9aa>
 800554c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800554e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005552:	e757      	b.n	8005404 <_dtoa_r+0x744>
 8005554:	3fe00000 	.word	0x3fe00000
 8005558:	40240000 	.word	0x40240000
 800555c:	9b08      	ldr	r3, [sp, #32]
 800555e:	1e5c      	subs	r4, r3, #1
 8005560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005562:	42a3      	cmp	r3, r4
 8005564:	bfbf      	itttt	lt
 8005566:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005568:	940a      	strlt	r4, [sp, #40]	; 0x28
 800556a:	1ae2      	sublt	r2, r4, r3
 800556c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800556e:	bfb6      	itet	lt
 8005570:	189b      	addlt	r3, r3, r2
 8005572:	1b1c      	subge	r4, r3, r4
 8005574:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005576:	9b08      	ldr	r3, [sp, #32]
 8005578:	bfb8      	it	lt
 800557a:	2400      	movlt	r4, #0
 800557c:	2b00      	cmp	r3, #0
 800557e:	bfb9      	ittee	lt
 8005580:	9b06      	ldrlt	r3, [sp, #24]
 8005582:	9a08      	ldrlt	r2, [sp, #32]
 8005584:	9f06      	ldrge	r7, [sp, #24]
 8005586:	9b08      	ldrge	r3, [sp, #32]
 8005588:	bfbc      	itt	lt
 800558a:	1a9f      	sublt	r7, r3, r2
 800558c:	2300      	movlt	r3, #0
 800558e:	e73b      	b.n	8005408 <_dtoa_r+0x748>
 8005590:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005592:	9f06      	ldr	r7, [sp, #24]
 8005594:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005596:	e742      	b.n	800541e <_dtoa_r+0x75e>
 8005598:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800559a:	e76b      	b.n	8005474 <_dtoa_r+0x7b4>
 800559c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800559e:	2b01      	cmp	r3, #1
 80055a0:	dc19      	bgt.n	80055d6 <_dtoa_r+0x916>
 80055a2:	9b04      	ldr	r3, [sp, #16]
 80055a4:	b9bb      	cbnz	r3, 80055d6 <_dtoa_r+0x916>
 80055a6:	9b05      	ldr	r3, [sp, #20]
 80055a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055ac:	b99b      	cbnz	r3, 80055d6 <_dtoa_r+0x916>
 80055ae:	9b05      	ldr	r3, [sp, #20]
 80055b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055b4:	0d1b      	lsrs	r3, r3, #20
 80055b6:	051b      	lsls	r3, r3, #20
 80055b8:	b183      	cbz	r3, 80055dc <_dtoa_r+0x91c>
 80055ba:	9b06      	ldr	r3, [sp, #24]
 80055bc:	3301      	adds	r3, #1
 80055be:	9306      	str	r3, [sp, #24]
 80055c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055c2:	3301      	adds	r3, #1
 80055c4:	9309      	str	r3, [sp, #36]	; 0x24
 80055c6:	f04f 0801 	mov.w	r8, #1
 80055ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f47f af6a 	bne.w	80054a6 <_dtoa_r+0x7e6>
 80055d2:	2001      	movs	r0, #1
 80055d4:	e76f      	b.n	80054b6 <_dtoa_r+0x7f6>
 80055d6:	f04f 0800 	mov.w	r8, #0
 80055da:	e7f6      	b.n	80055ca <_dtoa_r+0x90a>
 80055dc:	4698      	mov	r8, r3
 80055de:	e7f4      	b.n	80055ca <_dtoa_r+0x90a>
 80055e0:	f43f af7d 	beq.w	80054de <_dtoa_r+0x81e>
 80055e4:	4618      	mov	r0, r3
 80055e6:	301c      	adds	r0, #28
 80055e8:	e772      	b.n	80054d0 <_dtoa_r+0x810>
 80055ea:	9b08      	ldr	r3, [sp, #32]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	dc36      	bgt.n	800565e <_dtoa_r+0x99e>
 80055f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	dd33      	ble.n	800565e <_dtoa_r+0x99e>
 80055f6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055fa:	f1b9 0f00 	cmp.w	r9, #0
 80055fe:	d10d      	bne.n	800561c <_dtoa_r+0x95c>
 8005600:	4621      	mov	r1, r4
 8005602:	464b      	mov	r3, r9
 8005604:	2205      	movs	r2, #5
 8005606:	4628      	mov	r0, r5
 8005608:	f000 fd42 	bl	8006090 <__multadd>
 800560c:	4601      	mov	r1, r0
 800560e:	4604      	mov	r4, r0
 8005610:	4658      	mov	r0, fp
 8005612:	f000 ffa3 	bl	800655c <__mcmp>
 8005616:	2800      	cmp	r0, #0
 8005618:	f73f adb8 	bgt.w	800518c <_dtoa_r+0x4cc>
 800561c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800561e:	9f03      	ldr	r7, [sp, #12]
 8005620:	ea6f 0a03 	mvn.w	sl, r3
 8005624:	f04f 0800 	mov.w	r8, #0
 8005628:	4621      	mov	r1, r4
 800562a:	4628      	mov	r0, r5
 800562c:	f000 fd0e 	bl	800604c <_Bfree>
 8005630:	2e00      	cmp	r6, #0
 8005632:	f43f aea7 	beq.w	8005384 <_dtoa_r+0x6c4>
 8005636:	f1b8 0f00 	cmp.w	r8, #0
 800563a:	d005      	beq.n	8005648 <_dtoa_r+0x988>
 800563c:	45b0      	cmp	r8, r6
 800563e:	d003      	beq.n	8005648 <_dtoa_r+0x988>
 8005640:	4641      	mov	r1, r8
 8005642:	4628      	mov	r0, r5
 8005644:	f000 fd02 	bl	800604c <_Bfree>
 8005648:	4631      	mov	r1, r6
 800564a:	4628      	mov	r0, r5
 800564c:	f000 fcfe 	bl	800604c <_Bfree>
 8005650:	e698      	b.n	8005384 <_dtoa_r+0x6c4>
 8005652:	2400      	movs	r4, #0
 8005654:	4626      	mov	r6, r4
 8005656:	e7e1      	b.n	800561c <_dtoa_r+0x95c>
 8005658:	46c2      	mov	sl, r8
 800565a:	4626      	mov	r6, r4
 800565c:	e596      	b.n	800518c <_dtoa_r+0x4cc>
 800565e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005660:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 80fd 	beq.w	8005864 <_dtoa_r+0xba4>
 800566a:	2f00      	cmp	r7, #0
 800566c:	dd05      	ble.n	800567a <_dtoa_r+0x9ba>
 800566e:	4631      	mov	r1, r6
 8005670:	463a      	mov	r2, r7
 8005672:	4628      	mov	r0, r5
 8005674:	f000 ff02 	bl	800647c <__lshift>
 8005678:	4606      	mov	r6, r0
 800567a:	f1b8 0f00 	cmp.w	r8, #0
 800567e:	d05c      	beq.n	800573a <_dtoa_r+0xa7a>
 8005680:	6871      	ldr	r1, [r6, #4]
 8005682:	4628      	mov	r0, r5
 8005684:	f000 fca2 	bl	8005fcc <_Balloc>
 8005688:	4607      	mov	r7, r0
 800568a:	b928      	cbnz	r0, 8005698 <_dtoa_r+0x9d8>
 800568c:	4b80      	ldr	r3, [pc, #512]	; (8005890 <_dtoa_r+0xbd0>)
 800568e:	4602      	mov	r2, r0
 8005690:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005694:	f7ff bb28 	b.w	8004ce8 <_dtoa_r+0x28>
 8005698:	6932      	ldr	r2, [r6, #16]
 800569a:	3202      	adds	r2, #2
 800569c:	0092      	lsls	r2, r2, #2
 800569e:	f106 010c 	add.w	r1, r6, #12
 80056a2:	300c      	adds	r0, #12
 80056a4:	f000 fc84 	bl	8005fb0 <memcpy>
 80056a8:	2201      	movs	r2, #1
 80056aa:	4639      	mov	r1, r7
 80056ac:	4628      	mov	r0, r5
 80056ae:	f000 fee5 	bl	800647c <__lshift>
 80056b2:	9b03      	ldr	r3, [sp, #12]
 80056b4:	3301      	adds	r3, #1
 80056b6:	9308      	str	r3, [sp, #32]
 80056b8:	9b03      	ldr	r3, [sp, #12]
 80056ba:	444b      	add	r3, r9
 80056bc:	930a      	str	r3, [sp, #40]	; 0x28
 80056be:	9b04      	ldr	r3, [sp, #16]
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	46b0      	mov	r8, r6
 80056c6:	9309      	str	r3, [sp, #36]	; 0x24
 80056c8:	4606      	mov	r6, r0
 80056ca:	9b08      	ldr	r3, [sp, #32]
 80056cc:	4621      	mov	r1, r4
 80056ce:	3b01      	subs	r3, #1
 80056d0:	4658      	mov	r0, fp
 80056d2:	9304      	str	r3, [sp, #16]
 80056d4:	f7ff fa6c 	bl	8004bb0 <quorem>
 80056d8:	4603      	mov	r3, r0
 80056da:	3330      	adds	r3, #48	; 0x30
 80056dc:	9006      	str	r0, [sp, #24]
 80056de:	4641      	mov	r1, r8
 80056e0:	4658      	mov	r0, fp
 80056e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80056e4:	f000 ff3a 	bl	800655c <__mcmp>
 80056e8:	4632      	mov	r2, r6
 80056ea:	4681      	mov	r9, r0
 80056ec:	4621      	mov	r1, r4
 80056ee:	4628      	mov	r0, r5
 80056f0:	f000 ff50 	bl	8006594 <__mdiff>
 80056f4:	68c2      	ldr	r2, [r0, #12]
 80056f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056f8:	4607      	mov	r7, r0
 80056fa:	bb02      	cbnz	r2, 800573e <_dtoa_r+0xa7e>
 80056fc:	4601      	mov	r1, r0
 80056fe:	4658      	mov	r0, fp
 8005700:	f000 ff2c 	bl	800655c <__mcmp>
 8005704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005706:	4602      	mov	r2, r0
 8005708:	4639      	mov	r1, r7
 800570a:	4628      	mov	r0, r5
 800570c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005710:	f000 fc9c 	bl	800604c <_Bfree>
 8005714:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005716:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005718:	9f08      	ldr	r7, [sp, #32]
 800571a:	ea43 0102 	orr.w	r1, r3, r2
 800571e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005720:	430b      	orrs	r3, r1
 8005722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005724:	d10d      	bne.n	8005742 <_dtoa_r+0xa82>
 8005726:	2b39      	cmp	r3, #57	; 0x39
 8005728:	d029      	beq.n	800577e <_dtoa_r+0xabe>
 800572a:	f1b9 0f00 	cmp.w	r9, #0
 800572e:	dd01      	ble.n	8005734 <_dtoa_r+0xa74>
 8005730:	9b06      	ldr	r3, [sp, #24]
 8005732:	3331      	adds	r3, #49	; 0x31
 8005734:	9a04      	ldr	r2, [sp, #16]
 8005736:	7013      	strb	r3, [r2, #0]
 8005738:	e776      	b.n	8005628 <_dtoa_r+0x968>
 800573a:	4630      	mov	r0, r6
 800573c:	e7b9      	b.n	80056b2 <_dtoa_r+0x9f2>
 800573e:	2201      	movs	r2, #1
 8005740:	e7e2      	b.n	8005708 <_dtoa_r+0xa48>
 8005742:	f1b9 0f00 	cmp.w	r9, #0
 8005746:	db06      	blt.n	8005756 <_dtoa_r+0xa96>
 8005748:	9922      	ldr	r1, [sp, #136]	; 0x88
 800574a:	ea41 0909 	orr.w	r9, r1, r9
 800574e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005750:	ea59 0101 	orrs.w	r1, r9, r1
 8005754:	d120      	bne.n	8005798 <_dtoa_r+0xad8>
 8005756:	2a00      	cmp	r2, #0
 8005758:	ddec      	ble.n	8005734 <_dtoa_r+0xa74>
 800575a:	4659      	mov	r1, fp
 800575c:	2201      	movs	r2, #1
 800575e:	4628      	mov	r0, r5
 8005760:	9308      	str	r3, [sp, #32]
 8005762:	f000 fe8b 	bl	800647c <__lshift>
 8005766:	4621      	mov	r1, r4
 8005768:	4683      	mov	fp, r0
 800576a:	f000 fef7 	bl	800655c <__mcmp>
 800576e:	2800      	cmp	r0, #0
 8005770:	9b08      	ldr	r3, [sp, #32]
 8005772:	dc02      	bgt.n	800577a <_dtoa_r+0xaba>
 8005774:	d1de      	bne.n	8005734 <_dtoa_r+0xa74>
 8005776:	07da      	lsls	r2, r3, #31
 8005778:	d5dc      	bpl.n	8005734 <_dtoa_r+0xa74>
 800577a:	2b39      	cmp	r3, #57	; 0x39
 800577c:	d1d8      	bne.n	8005730 <_dtoa_r+0xa70>
 800577e:	9a04      	ldr	r2, [sp, #16]
 8005780:	2339      	movs	r3, #57	; 0x39
 8005782:	7013      	strb	r3, [r2, #0]
 8005784:	463b      	mov	r3, r7
 8005786:	461f      	mov	r7, r3
 8005788:	3b01      	subs	r3, #1
 800578a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800578e:	2a39      	cmp	r2, #57	; 0x39
 8005790:	d050      	beq.n	8005834 <_dtoa_r+0xb74>
 8005792:	3201      	adds	r2, #1
 8005794:	701a      	strb	r2, [r3, #0]
 8005796:	e747      	b.n	8005628 <_dtoa_r+0x968>
 8005798:	2a00      	cmp	r2, #0
 800579a:	dd03      	ble.n	80057a4 <_dtoa_r+0xae4>
 800579c:	2b39      	cmp	r3, #57	; 0x39
 800579e:	d0ee      	beq.n	800577e <_dtoa_r+0xabe>
 80057a0:	3301      	adds	r3, #1
 80057a2:	e7c7      	b.n	8005734 <_dtoa_r+0xa74>
 80057a4:	9a08      	ldr	r2, [sp, #32]
 80057a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80057a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80057ac:	428a      	cmp	r2, r1
 80057ae:	d02a      	beq.n	8005806 <_dtoa_r+0xb46>
 80057b0:	4659      	mov	r1, fp
 80057b2:	2300      	movs	r3, #0
 80057b4:	220a      	movs	r2, #10
 80057b6:	4628      	mov	r0, r5
 80057b8:	f000 fc6a 	bl	8006090 <__multadd>
 80057bc:	45b0      	cmp	r8, r6
 80057be:	4683      	mov	fp, r0
 80057c0:	f04f 0300 	mov.w	r3, #0
 80057c4:	f04f 020a 	mov.w	r2, #10
 80057c8:	4641      	mov	r1, r8
 80057ca:	4628      	mov	r0, r5
 80057cc:	d107      	bne.n	80057de <_dtoa_r+0xb1e>
 80057ce:	f000 fc5f 	bl	8006090 <__multadd>
 80057d2:	4680      	mov	r8, r0
 80057d4:	4606      	mov	r6, r0
 80057d6:	9b08      	ldr	r3, [sp, #32]
 80057d8:	3301      	adds	r3, #1
 80057da:	9308      	str	r3, [sp, #32]
 80057dc:	e775      	b.n	80056ca <_dtoa_r+0xa0a>
 80057de:	f000 fc57 	bl	8006090 <__multadd>
 80057e2:	4631      	mov	r1, r6
 80057e4:	4680      	mov	r8, r0
 80057e6:	2300      	movs	r3, #0
 80057e8:	220a      	movs	r2, #10
 80057ea:	4628      	mov	r0, r5
 80057ec:	f000 fc50 	bl	8006090 <__multadd>
 80057f0:	4606      	mov	r6, r0
 80057f2:	e7f0      	b.n	80057d6 <_dtoa_r+0xb16>
 80057f4:	f1b9 0f00 	cmp.w	r9, #0
 80057f8:	9a03      	ldr	r2, [sp, #12]
 80057fa:	bfcc      	ite	gt
 80057fc:	464f      	movgt	r7, r9
 80057fe:	2701      	movle	r7, #1
 8005800:	4417      	add	r7, r2
 8005802:	f04f 0800 	mov.w	r8, #0
 8005806:	4659      	mov	r1, fp
 8005808:	2201      	movs	r2, #1
 800580a:	4628      	mov	r0, r5
 800580c:	9308      	str	r3, [sp, #32]
 800580e:	f000 fe35 	bl	800647c <__lshift>
 8005812:	4621      	mov	r1, r4
 8005814:	4683      	mov	fp, r0
 8005816:	f000 fea1 	bl	800655c <__mcmp>
 800581a:	2800      	cmp	r0, #0
 800581c:	dcb2      	bgt.n	8005784 <_dtoa_r+0xac4>
 800581e:	d102      	bne.n	8005826 <_dtoa_r+0xb66>
 8005820:	9b08      	ldr	r3, [sp, #32]
 8005822:	07db      	lsls	r3, r3, #31
 8005824:	d4ae      	bmi.n	8005784 <_dtoa_r+0xac4>
 8005826:	463b      	mov	r3, r7
 8005828:	461f      	mov	r7, r3
 800582a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800582e:	2a30      	cmp	r2, #48	; 0x30
 8005830:	d0fa      	beq.n	8005828 <_dtoa_r+0xb68>
 8005832:	e6f9      	b.n	8005628 <_dtoa_r+0x968>
 8005834:	9a03      	ldr	r2, [sp, #12]
 8005836:	429a      	cmp	r2, r3
 8005838:	d1a5      	bne.n	8005786 <_dtoa_r+0xac6>
 800583a:	f10a 0a01 	add.w	sl, sl, #1
 800583e:	2331      	movs	r3, #49	; 0x31
 8005840:	e779      	b.n	8005736 <_dtoa_r+0xa76>
 8005842:	4b14      	ldr	r3, [pc, #80]	; (8005894 <_dtoa_r+0xbd4>)
 8005844:	f7ff baa7 	b.w	8004d96 <_dtoa_r+0xd6>
 8005848:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800584a:	2b00      	cmp	r3, #0
 800584c:	f47f aa80 	bne.w	8004d50 <_dtoa_r+0x90>
 8005850:	4b11      	ldr	r3, [pc, #68]	; (8005898 <_dtoa_r+0xbd8>)
 8005852:	f7ff baa0 	b.w	8004d96 <_dtoa_r+0xd6>
 8005856:	f1b9 0f00 	cmp.w	r9, #0
 800585a:	dc03      	bgt.n	8005864 <_dtoa_r+0xba4>
 800585c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800585e:	2b02      	cmp	r3, #2
 8005860:	f73f aecb 	bgt.w	80055fa <_dtoa_r+0x93a>
 8005864:	9f03      	ldr	r7, [sp, #12]
 8005866:	4621      	mov	r1, r4
 8005868:	4658      	mov	r0, fp
 800586a:	f7ff f9a1 	bl	8004bb0 <quorem>
 800586e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005872:	f807 3b01 	strb.w	r3, [r7], #1
 8005876:	9a03      	ldr	r2, [sp, #12]
 8005878:	1aba      	subs	r2, r7, r2
 800587a:	4591      	cmp	r9, r2
 800587c:	ddba      	ble.n	80057f4 <_dtoa_r+0xb34>
 800587e:	4659      	mov	r1, fp
 8005880:	2300      	movs	r3, #0
 8005882:	220a      	movs	r2, #10
 8005884:	4628      	mov	r0, r5
 8005886:	f000 fc03 	bl	8006090 <__multadd>
 800588a:	4683      	mov	fp, r0
 800588c:	e7eb      	b.n	8005866 <_dtoa_r+0xba6>
 800588e:	bf00      	nop
 8005890:	08007da8 	.word	0x08007da8
 8005894:	08007bac 	.word	0x08007bac
 8005898:	08007d29 	.word	0x08007d29

0800589c <__errno>:
 800589c:	4b01      	ldr	r3, [pc, #4]	; (80058a4 <__errno+0x8>)
 800589e:	6818      	ldr	r0, [r3, #0]
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	20000044 	.word	0x20000044

080058a8 <rshift>:
 80058a8:	6903      	ldr	r3, [r0, #16]
 80058aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80058ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80058b6:	f100 0414 	add.w	r4, r0, #20
 80058ba:	dd45      	ble.n	8005948 <rshift+0xa0>
 80058bc:	f011 011f 	ands.w	r1, r1, #31
 80058c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80058c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80058c8:	d10c      	bne.n	80058e4 <rshift+0x3c>
 80058ca:	f100 0710 	add.w	r7, r0, #16
 80058ce:	4629      	mov	r1, r5
 80058d0:	42b1      	cmp	r1, r6
 80058d2:	d334      	bcc.n	800593e <rshift+0x96>
 80058d4:	1a9b      	subs	r3, r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	1eea      	subs	r2, r5, #3
 80058da:	4296      	cmp	r6, r2
 80058dc:	bf38      	it	cc
 80058de:	2300      	movcc	r3, #0
 80058e0:	4423      	add	r3, r4
 80058e2:	e015      	b.n	8005910 <rshift+0x68>
 80058e4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80058e8:	f1c1 0820 	rsb	r8, r1, #32
 80058ec:	40cf      	lsrs	r7, r1
 80058ee:	f105 0e04 	add.w	lr, r5, #4
 80058f2:	46a1      	mov	r9, r4
 80058f4:	4576      	cmp	r6, lr
 80058f6:	46f4      	mov	ip, lr
 80058f8:	d815      	bhi.n	8005926 <rshift+0x7e>
 80058fa:	1a9a      	subs	r2, r3, r2
 80058fc:	0092      	lsls	r2, r2, #2
 80058fe:	3a04      	subs	r2, #4
 8005900:	3501      	adds	r5, #1
 8005902:	42ae      	cmp	r6, r5
 8005904:	bf38      	it	cc
 8005906:	2200      	movcc	r2, #0
 8005908:	18a3      	adds	r3, r4, r2
 800590a:	50a7      	str	r7, [r4, r2]
 800590c:	b107      	cbz	r7, 8005910 <rshift+0x68>
 800590e:	3304      	adds	r3, #4
 8005910:	1b1a      	subs	r2, r3, r4
 8005912:	42a3      	cmp	r3, r4
 8005914:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005918:	bf08      	it	eq
 800591a:	2300      	moveq	r3, #0
 800591c:	6102      	str	r2, [r0, #16]
 800591e:	bf08      	it	eq
 8005920:	6143      	streq	r3, [r0, #20]
 8005922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005926:	f8dc c000 	ldr.w	ip, [ip]
 800592a:	fa0c fc08 	lsl.w	ip, ip, r8
 800592e:	ea4c 0707 	orr.w	r7, ip, r7
 8005932:	f849 7b04 	str.w	r7, [r9], #4
 8005936:	f85e 7b04 	ldr.w	r7, [lr], #4
 800593a:	40cf      	lsrs	r7, r1
 800593c:	e7da      	b.n	80058f4 <rshift+0x4c>
 800593e:	f851 cb04 	ldr.w	ip, [r1], #4
 8005942:	f847 cf04 	str.w	ip, [r7, #4]!
 8005946:	e7c3      	b.n	80058d0 <rshift+0x28>
 8005948:	4623      	mov	r3, r4
 800594a:	e7e1      	b.n	8005910 <rshift+0x68>

0800594c <__hexdig_fun>:
 800594c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005950:	2b09      	cmp	r3, #9
 8005952:	d802      	bhi.n	800595a <__hexdig_fun+0xe>
 8005954:	3820      	subs	r0, #32
 8005956:	b2c0      	uxtb	r0, r0
 8005958:	4770      	bx	lr
 800595a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800595e:	2b05      	cmp	r3, #5
 8005960:	d801      	bhi.n	8005966 <__hexdig_fun+0x1a>
 8005962:	3847      	subs	r0, #71	; 0x47
 8005964:	e7f7      	b.n	8005956 <__hexdig_fun+0xa>
 8005966:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800596a:	2b05      	cmp	r3, #5
 800596c:	d801      	bhi.n	8005972 <__hexdig_fun+0x26>
 800596e:	3827      	subs	r0, #39	; 0x27
 8005970:	e7f1      	b.n	8005956 <__hexdig_fun+0xa>
 8005972:	2000      	movs	r0, #0
 8005974:	4770      	bx	lr
	...

08005978 <__gethex>:
 8005978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800597c:	b08b      	sub	sp, #44	; 0x2c
 800597e:	468b      	mov	fp, r1
 8005980:	9305      	str	r3, [sp, #20]
 8005982:	4bb2      	ldr	r3, [pc, #712]	; (8005c4c <__gethex+0x2d4>)
 8005984:	9002      	str	r0, [sp, #8]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	9303      	str	r3, [sp, #12]
 800598a:	4618      	mov	r0, r3
 800598c:	4690      	mov	r8, r2
 800598e:	f7fa fc27 	bl	80001e0 <strlen>
 8005992:	9b03      	ldr	r3, [sp, #12]
 8005994:	f8db 2000 	ldr.w	r2, [fp]
 8005998:	4403      	add	r3, r0
 800599a:	4682      	mov	sl, r0
 800599c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80059a0:	9306      	str	r3, [sp, #24]
 80059a2:	1c93      	adds	r3, r2, #2
 80059a4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80059a8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80059ac:	32fe      	adds	r2, #254	; 0xfe
 80059ae:	18d1      	adds	r1, r2, r3
 80059b0:	461f      	mov	r7, r3
 80059b2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80059b6:	9101      	str	r1, [sp, #4]
 80059b8:	2830      	cmp	r0, #48	; 0x30
 80059ba:	d0f8      	beq.n	80059ae <__gethex+0x36>
 80059bc:	f7ff ffc6 	bl	800594c <__hexdig_fun>
 80059c0:	4604      	mov	r4, r0
 80059c2:	2800      	cmp	r0, #0
 80059c4:	d13a      	bne.n	8005a3c <__gethex+0xc4>
 80059c6:	9903      	ldr	r1, [sp, #12]
 80059c8:	4652      	mov	r2, sl
 80059ca:	4638      	mov	r0, r7
 80059cc:	f001 fa16 	bl	8006dfc <strncmp>
 80059d0:	4605      	mov	r5, r0
 80059d2:	2800      	cmp	r0, #0
 80059d4:	d166      	bne.n	8005aa4 <__gethex+0x12c>
 80059d6:	f817 000a 	ldrb.w	r0, [r7, sl]
 80059da:	eb07 060a 	add.w	r6, r7, sl
 80059de:	f7ff ffb5 	bl	800594c <__hexdig_fun>
 80059e2:	2800      	cmp	r0, #0
 80059e4:	d060      	beq.n	8005aa8 <__gethex+0x130>
 80059e6:	4633      	mov	r3, r6
 80059e8:	7818      	ldrb	r0, [r3, #0]
 80059ea:	2830      	cmp	r0, #48	; 0x30
 80059ec:	461f      	mov	r7, r3
 80059ee:	f103 0301 	add.w	r3, r3, #1
 80059f2:	d0f9      	beq.n	80059e8 <__gethex+0x70>
 80059f4:	f7ff ffaa 	bl	800594c <__hexdig_fun>
 80059f8:	2301      	movs	r3, #1
 80059fa:	fab0 f480 	clz	r4, r0
 80059fe:	0964      	lsrs	r4, r4, #5
 8005a00:	4635      	mov	r5, r6
 8005a02:	9301      	str	r3, [sp, #4]
 8005a04:	463a      	mov	r2, r7
 8005a06:	4616      	mov	r6, r2
 8005a08:	3201      	adds	r2, #1
 8005a0a:	7830      	ldrb	r0, [r6, #0]
 8005a0c:	f7ff ff9e 	bl	800594c <__hexdig_fun>
 8005a10:	2800      	cmp	r0, #0
 8005a12:	d1f8      	bne.n	8005a06 <__gethex+0x8e>
 8005a14:	9903      	ldr	r1, [sp, #12]
 8005a16:	4652      	mov	r2, sl
 8005a18:	4630      	mov	r0, r6
 8005a1a:	f001 f9ef 	bl	8006dfc <strncmp>
 8005a1e:	b980      	cbnz	r0, 8005a42 <__gethex+0xca>
 8005a20:	b94d      	cbnz	r5, 8005a36 <__gethex+0xbe>
 8005a22:	eb06 050a 	add.w	r5, r6, sl
 8005a26:	462a      	mov	r2, r5
 8005a28:	4616      	mov	r6, r2
 8005a2a:	3201      	adds	r2, #1
 8005a2c:	7830      	ldrb	r0, [r6, #0]
 8005a2e:	f7ff ff8d 	bl	800594c <__hexdig_fun>
 8005a32:	2800      	cmp	r0, #0
 8005a34:	d1f8      	bne.n	8005a28 <__gethex+0xb0>
 8005a36:	1bad      	subs	r5, r5, r6
 8005a38:	00ad      	lsls	r5, r5, #2
 8005a3a:	e004      	b.n	8005a46 <__gethex+0xce>
 8005a3c:	2400      	movs	r4, #0
 8005a3e:	4625      	mov	r5, r4
 8005a40:	e7e0      	b.n	8005a04 <__gethex+0x8c>
 8005a42:	2d00      	cmp	r5, #0
 8005a44:	d1f7      	bne.n	8005a36 <__gethex+0xbe>
 8005a46:	7833      	ldrb	r3, [r6, #0]
 8005a48:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005a4c:	2b50      	cmp	r3, #80	; 0x50
 8005a4e:	d139      	bne.n	8005ac4 <__gethex+0x14c>
 8005a50:	7873      	ldrb	r3, [r6, #1]
 8005a52:	2b2b      	cmp	r3, #43	; 0x2b
 8005a54:	d02a      	beq.n	8005aac <__gethex+0x134>
 8005a56:	2b2d      	cmp	r3, #45	; 0x2d
 8005a58:	d02c      	beq.n	8005ab4 <__gethex+0x13c>
 8005a5a:	1c71      	adds	r1, r6, #1
 8005a5c:	f04f 0900 	mov.w	r9, #0
 8005a60:	7808      	ldrb	r0, [r1, #0]
 8005a62:	f7ff ff73 	bl	800594c <__hexdig_fun>
 8005a66:	1e43      	subs	r3, r0, #1
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b18      	cmp	r3, #24
 8005a6c:	d82a      	bhi.n	8005ac4 <__gethex+0x14c>
 8005a6e:	f1a0 0210 	sub.w	r2, r0, #16
 8005a72:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005a76:	f7ff ff69 	bl	800594c <__hexdig_fun>
 8005a7a:	1e43      	subs	r3, r0, #1
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b18      	cmp	r3, #24
 8005a80:	d91b      	bls.n	8005aba <__gethex+0x142>
 8005a82:	f1b9 0f00 	cmp.w	r9, #0
 8005a86:	d000      	beq.n	8005a8a <__gethex+0x112>
 8005a88:	4252      	negs	r2, r2
 8005a8a:	4415      	add	r5, r2
 8005a8c:	f8cb 1000 	str.w	r1, [fp]
 8005a90:	b1d4      	cbz	r4, 8005ac8 <__gethex+0x150>
 8005a92:	9b01      	ldr	r3, [sp, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	bf14      	ite	ne
 8005a98:	2700      	movne	r7, #0
 8005a9a:	2706      	moveq	r7, #6
 8005a9c:	4638      	mov	r0, r7
 8005a9e:	b00b      	add	sp, #44	; 0x2c
 8005aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa4:	463e      	mov	r6, r7
 8005aa6:	4625      	mov	r5, r4
 8005aa8:	2401      	movs	r4, #1
 8005aaa:	e7cc      	b.n	8005a46 <__gethex+0xce>
 8005aac:	f04f 0900 	mov.w	r9, #0
 8005ab0:	1cb1      	adds	r1, r6, #2
 8005ab2:	e7d5      	b.n	8005a60 <__gethex+0xe8>
 8005ab4:	f04f 0901 	mov.w	r9, #1
 8005ab8:	e7fa      	b.n	8005ab0 <__gethex+0x138>
 8005aba:	230a      	movs	r3, #10
 8005abc:	fb03 0202 	mla	r2, r3, r2, r0
 8005ac0:	3a10      	subs	r2, #16
 8005ac2:	e7d6      	b.n	8005a72 <__gethex+0xfa>
 8005ac4:	4631      	mov	r1, r6
 8005ac6:	e7e1      	b.n	8005a8c <__gethex+0x114>
 8005ac8:	1bf3      	subs	r3, r6, r7
 8005aca:	3b01      	subs	r3, #1
 8005acc:	4621      	mov	r1, r4
 8005ace:	2b07      	cmp	r3, #7
 8005ad0:	dc0a      	bgt.n	8005ae8 <__gethex+0x170>
 8005ad2:	9802      	ldr	r0, [sp, #8]
 8005ad4:	f000 fa7a 	bl	8005fcc <_Balloc>
 8005ad8:	4604      	mov	r4, r0
 8005ada:	b940      	cbnz	r0, 8005aee <__gethex+0x176>
 8005adc:	4b5c      	ldr	r3, [pc, #368]	; (8005c50 <__gethex+0x2d8>)
 8005ade:	4602      	mov	r2, r0
 8005ae0:	21de      	movs	r1, #222	; 0xde
 8005ae2:	485c      	ldr	r0, [pc, #368]	; (8005c54 <__gethex+0x2dc>)
 8005ae4:	f001 f9ac 	bl	8006e40 <__assert_func>
 8005ae8:	3101      	adds	r1, #1
 8005aea:	105b      	asrs	r3, r3, #1
 8005aec:	e7ef      	b.n	8005ace <__gethex+0x156>
 8005aee:	f100 0914 	add.w	r9, r0, #20
 8005af2:	f04f 0b00 	mov.w	fp, #0
 8005af6:	f1ca 0301 	rsb	r3, sl, #1
 8005afa:	f8cd 9010 	str.w	r9, [sp, #16]
 8005afe:	f8cd b004 	str.w	fp, [sp, #4]
 8005b02:	9308      	str	r3, [sp, #32]
 8005b04:	42b7      	cmp	r7, r6
 8005b06:	d33f      	bcc.n	8005b88 <__gethex+0x210>
 8005b08:	9f04      	ldr	r7, [sp, #16]
 8005b0a:	9b01      	ldr	r3, [sp, #4]
 8005b0c:	f847 3b04 	str.w	r3, [r7], #4
 8005b10:	eba7 0709 	sub.w	r7, r7, r9
 8005b14:	10bf      	asrs	r7, r7, #2
 8005b16:	6127      	str	r7, [r4, #16]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 fb49 	bl	80061b0 <__hi0bits>
 8005b1e:	017f      	lsls	r7, r7, #5
 8005b20:	f8d8 6000 	ldr.w	r6, [r8]
 8005b24:	1a3f      	subs	r7, r7, r0
 8005b26:	42b7      	cmp	r7, r6
 8005b28:	dd62      	ble.n	8005bf0 <__gethex+0x278>
 8005b2a:	1bbf      	subs	r7, r7, r6
 8005b2c:	4639      	mov	r1, r7
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f000 fedf 	bl	80068f2 <__any_on>
 8005b34:	4682      	mov	sl, r0
 8005b36:	b1a8      	cbz	r0, 8005b64 <__gethex+0x1ec>
 8005b38:	1e7b      	subs	r3, r7, #1
 8005b3a:	1159      	asrs	r1, r3, #5
 8005b3c:	f003 021f 	and.w	r2, r3, #31
 8005b40:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005b44:	f04f 0a01 	mov.w	sl, #1
 8005b48:	fa0a f202 	lsl.w	r2, sl, r2
 8005b4c:	420a      	tst	r2, r1
 8005b4e:	d009      	beq.n	8005b64 <__gethex+0x1ec>
 8005b50:	4553      	cmp	r3, sl
 8005b52:	dd05      	ble.n	8005b60 <__gethex+0x1e8>
 8005b54:	1eb9      	subs	r1, r7, #2
 8005b56:	4620      	mov	r0, r4
 8005b58:	f000 fecb 	bl	80068f2 <__any_on>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	d144      	bne.n	8005bea <__gethex+0x272>
 8005b60:	f04f 0a02 	mov.w	sl, #2
 8005b64:	4639      	mov	r1, r7
 8005b66:	4620      	mov	r0, r4
 8005b68:	f7ff fe9e 	bl	80058a8 <rshift>
 8005b6c:	443d      	add	r5, r7
 8005b6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005b72:	42ab      	cmp	r3, r5
 8005b74:	da4a      	bge.n	8005c0c <__gethex+0x294>
 8005b76:	9802      	ldr	r0, [sp, #8]
 8005b78:	4621      	mov	r1, r4
 8005b7a:	f000 fa67 	bl	800604c <_Bfree>
 8005b7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005b80:	2300      	movs	r3, #0
 8005b82:	6013      	str	r3, [r2, #0]
 8005b84:	27a3      	movs	r7, #163	; 0xa3
 8005b86:	e789      	b.n	8005a9c <__gethex+0x124>
 8005b88:	1e73      	subs	r3, r6, #1
 8005b8a:	9a06      	ldr	r2, [sp, #24]
 8005b8c:	9307      	str	r3, [sp, #28]
 8005b8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d019      	beq.n	8005bca <__gethex+0x252>
 8005b96:	f1bb 0f20 	cmp.w	fp, #32
 8005b9a:	d107      	bne.n	8005bac <__gethex+0x234>
 8005b9c:	9b04      	ldr	r3, [sp, #16]
 8005b9e:	9a01      	ldr	r2, [sp, #4]
 8005ba0:	f843 2b04 	str.w	r2, [r3], #4
 8005ba4:	9304      	str	r3, [sp, #16]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	9301      	str	r3, [sp, #4]
 8005baa:	469b      	mov	fp, r3
 8005bac:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005bb0:	f7ff fecc 	bl	800594c <__hexdig_fun>
 8005bb4:	9b01      	ldr	r3, [sp, #4]
 8005bb6:	f000 000f 	and.w	r0, r0, #15
 8005bba:	fa00 f00b 	lsl.w	r0, r0, fp
 8005bbe:	4303      	orrs	r3, r0
 8005bc0:	9301      	str	r3, [sp, #4]
 8005bc2:	f10b 0b04 	add.w	fp, fp, #4
 8005bc6:	9b07      	ldr	r3, [sp, #28]
 8005bc8:	e00d      	b.n	8005be6 <__gethex+0x26e>
 8005bca:	9a08      	ldr	r2, [sp, #32]
 8005bcc:	1e73      	subs	r3, r6, #1
 8005bce:	4413      	add	r3, r2
 8005bd0:	42bb      	cmp	r3, r7
 8005bd2:	d3e0      	bcc.n	8005b96 <__gethex+0x21e>
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	9903      	ldr	r1, [sp, #12]
 8005bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bda:	4652      	mov	r2, sl
 8005bdc:	f001 f90e 	bl	8006dfc <strncmp>
 8005be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005be2:	2800      	cmp	r0, #0
 8005be4:	d1d7      	bne.n	8005b96 <__gethex+0x21e>
 8005be6:	461e      	mov	r6, r3
 8005be8:	e78c      	b.n	8005b04 <__gethex+0x18c>
 8005bea:	f04f 0a03 	mov.w	sl, #3
 8005bee:	e7b9      	b.n	8005b64 <__gethex+0x1ec>
 8005bf0:	da09      	bge.n	8005c06 <__gethex+0x28e>
 8005bf2:	1bf7      	subs	r7, r6, r7
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	9802      	ldr	r0, [sp, #8]
 8005bf8:	463a      	mov	r2, r7
 8005bfa:	f000 fc3f 	bl	800647c <__lshift>
 8005bfe:	1bed      	subs	r5, r5, r7
 8005c00:	4604      	mov	r4, r0
 8005c02:	f100 0914 	add.w	r9, r0, #20
 8005c06:	f04f 0a00 	mov.w	sl, #0
 8005c0a:	e7b0      	b.n	8005b6e <__gethex+0x1f6>
 8005c0c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005c10:	42a8      	cmp	r0, r5
 8005c12:	dd71      	ble.n	8005cf8 <__gethex+0x380>
 8005c14:	1b45      	subs	r5, r0, r5
 8005c16:	42ae      	cmp	r6, r5
 8005c18:	dc35      	bgt.n	8005c86 <__gethex+0x30e>
 8005c1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d029      	beq.n	8005c76 <__gethex+0x2fe>
 8005c22:	2b03      	cmp	r3, #3
 8005c24:	d02b      	beq.n	8005c7e <__gethex+0x306>
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d11c      	bne.n	8005c64 <__gethex+0x2ec>
 8005c2a:	42ae      	cmp	r6, r5
 8005c2c:	d11a      	bne.n	8005c64 <__gethex+0x2ec>
 8005c2e:	2e01      	cmp	r6, #1
 8005c30:	d112      	bne.n	8005c58 <__gethex+0x2e0>
 8005c32:	9a05      	ldr	r2, [sp, #20]
 8005c34:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005c38:	6013      	str	r3, [r2, #0]
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	6123      	str	r3, [r4, #16]
 8005c3e:	f8c9 3000 	str.w	r3, [r9]
 8005c42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c44:	2762      	movs	r7, #98	; 0x62
 8005c46:	601c      	str	r4, [r3, #0]
 8005c48:	e728      	b.n	8005a9c <__gethex+0x124>
 8005c4a:	bf00      	nop
 8005c4c:	08007e20 	.word	0x08007e20
 8005c50:	08007da8 	.word	0x08007da8
 8005c54:	08007db9 	.word	0x08007db9
 8005c58:	1e71      	subs	r1, r6, #1
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f000 fe49 	bl	80068f2 <__any_on>
 8005c60:	2800      	cmp	r0, #0
 8005c62:	d1e6      	bne.n	8005c32 <__gethex+0x2ba>
 8005c64:	9802      	ldr	r0, [sp, #8]
 8005c66:	4621      	mov	r1, r4
 8005c68:	f000 f9f0 	bl	800604c <_Bfree>
 8005c6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005c6e:	2300      	movs	r3, #0
 8005c70:	6013      	str	r3, [r2, #0]
 8005c72:	2750      	movs	r7, #80	; 0x50
 8005c74:	e712      	b.n	8005a9c <__gethex+0x124>
 8005c76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1f3      	bne.n	8005c64 <__gethex+0x2ec>
 8005c7c:	e7d9      	b.n	8005c32 <__gethex+0x2ba>
 8005c7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1d6      	bne.n	8005c32 <__gethex+0x2ba>
 8005c84:	e7ee      	b.n	8005c64 <__gethex+0x2ec>
 8005c86:	1e6f      	subs	r7, r5, #1
 8005c88:	f1ba 0f00 	cmp.w	sl, #0
 8005c8c:	d131      	bne.n	8005cf2 <__gethex+0x37a>
 8005c8e:	b127      	cbz	r7, 8005c9a <__gethex+0x322>
 8005c90:	4639      	mov	r1, r7
 8005c92:	4620      	mov	r0, r4
 8005c94:	f000 fe2d 	bl	80068f2 <__any_on>
 8005c98:	4682      	mov	sl, r0
 8005c9a:	117b      	asrs	r3, r7, #5
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005ca2:	f007 071f 	and.w	r7, r7, #31
 8005ca6:	fa01 f707 	lsl.w	r7, r1, r7
 8005caa:	421f      	tst	r7, r3
 8005cac:	4629      	mov	r1, r5
 8005cae:	4620      	mov	r0, r4
 8005cb0:	bf18      	it	ne
 8005cb2:	f04a 0a02 	orrne.w	sl, sl, #2
 8005cb6:	1b76      	subs	r6, r6, r5
 8005cb8:	f7ff fdf6 	bl	80058a8 <rshift>
 8005cbc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005cc0:	2702      	movs	r7, #2
 8005cc2:	f1ba 0f00 	cmp.w	sl, #0
 8005cc6:	d048      	beq.n	8005d5a <__gethex+0x3e2>
 8005cc8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d015      	beq.n	8005cfc <__gethex+0x384>
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	d017      	beq.n	8005d04 <__gethex+0x38c>
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d109      	bne.n	8005cec <__gethex+0x374>
 8005cd8:	f01a 0f02 	tst.w	sl, #2
 8005cdc:	d006      	beq.n	8005cec <__gethex+0x374>
 8005cde:	f8d9 0000 	ldr.w	r0, [r9]
 8005ce2:	ea4a 0a00 	orr.w	sl, sl, r0
 8005ce6:	f01a 0f01 	tst.w	sl, #1
 8005cea:	d10e      	bne.n	8005d0a <__gethex+0x392>
 8005cec:	f047 0710 	orr.w	r7, r7, #16
 8005cf0:	e033      	b.n	8005d5a <__gethex+0x3e2>
 8005cf2:	f04f 0a01 	mov.w	sl, #1
 8005cf6:	e7d0      	b.n	8005c9a <__gethex+0x322>
 8005cf8:	2701      	movs	r7, #1
 8005cfa:	e7e2      	b.n	8005cc2 <__gethex+0x34a>
 8005cfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005cfe:	f1c3 0301 	rsb	r3, r3, #1
 8005d02:	9315      	str	r3, [sp, #84]	; 0x54
 8005d04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0f0      	beq.n	8005cec <__gethex+0x374>
 8005d0a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005d0e:	f104 0314 	add.w	r3, r4, #20
 8005d12:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005d16:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005d1a:	f04f 0c00 	mov.w	ip, #0
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d24:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8005d28:	d01c      	beq.n	8005d64 <__gethex+0x3ec>
 8005d2a:	3201      	adds	r2, #1
 8005d2c:	6002      	str	r2, [r0, #0]
 8005d2e:	2f02      	cmp	r7, #2
 8005d30:	f104 0314 	add.w	r3, r4, #20
 8005d34:	d13d      	bne.n	8005db2 <__gethex+0x43a>
 8005d36:	f8d8 2000 	ldr.w	r2, [r8]
 8005d3a:	3a01      	subs	r2, #1
 8005d3c:	42b2      	cmp	r2, r6
 8005d3e:	d10a      	bne.n	8005d56 <__gethex+0x3de>
 8005d40:	1171      	asrs	r1, r6, #5
 8005d42:	2201      	movs	r2, #1
 8005d44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005d48:	f006 061f 	and.w	r6, r6, #31
 8005d4c:	fa02 f606 	lsl.w	r6, r2, r6
 8005d50:	421e      	tst	r6, r3
 8005d52:	bf18      	it	ne
 8005d54:	4617      	movne	r7, r2
 8005d56:	f047 0720 	orr.w	r7, r7, #32
 8005d5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d5c:	601c      	str	r4, [r3, #0]
 8005d5e:	9b05      	ldr	r3, [sp, #20]
 8005d60:	601d      	str	r5, [r3, #0]
 8005d62:	e69b      	b.n	8005a9c <__gethex+0x124>
 8005d64:	4299      	cmp	r1, r3
 8005d66:	f843 cc04 	str.w	ip, [r3, #-4]
 8005d6a:	d8d8      	bhi.n	8005d1e <__gethex+0x3a6>
 8005d6c:	68a3      	ldr	r3, [r4, #8]
 8005d6e:	459b      	cmp	fp, r3
 8005d70:	db17      	blt.n	8005da2 <__gethex+0x42a>
 8005d72:	6861      	ldr	r1, [r4, #4]
 8005d74:	9802      	ldr	r0, [sp, #8]
 8005d76:	3101      	adds	r1, #1
 8005d78:	f000 f928 	bl	8005fcc <_Balloc>
 8005d7c:	4681      	mov	r9, r0
 8005d7e:	b918      	cbnz	r0, 8005d88 <__gethex+0x410>
 8005d80:	4b1a      	ldr	r3, [pc, #104]	; (8005dec <__gethex+0x474>)
 8005d82:	4602      	mov	r2, r0
 8005d84:	2184      	movs	r1, #132	; 0x84
 8005d86:	e6ac      	b.n	8005ae2 <__gethex+0x16a>
 8005d88:	6922      	ldr	r2, [r4, #16]
 8005d8a:	3202      	adds	r2, #2
 8005d8c:	f104 010c 	add.w	r1, r4, #12
 8005d90:	0092      	lsls	r2, r2, #2
 8005d92:	300c      	adds	r0, #12
 8005d94:	f000 f90c 	bl	8005fb0 <memcpy>
 8005d98:	4621      	mov	r1, r4
 8005d9a:	9802      	ldr	r0, [sp, #8]
 8005d9c:	f000 f956 	bl	800604c <_Bfree>
 8005da0:	464c      	mov	r4, r9
 8005da2:	6923      	ldr	r3, [r4, #16]
 8005da4:	1c5a      	adds	r2, r3, #1
 8005da6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005daa:	6122      	str	r2, [r4, #16]
 8005dac:	2201      	movs	r2, #1
 8005dae:	615a      	str	r2, [r3, #20]
 8005db0:	e7bd      	b.n	8005d2e <__gethex+0x3b6>
 8005db2:	6922      	ldr	r2, [r4, #16]
 8005db4:	455a      	cmp	r2, fp
 8005db6:	dd0b      	ble.n	8005dd0 <__gethex+0x458>
 8005db8:	2101      	movs	r1, #1
 8005dba:	4620      	mov	r0, r4
 8005dbc:	f7ff fd74 	bl	80058a8 <rshift>
 8005dc0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005dc4:	3501      	adds	r5, #1
 8005dc6:	42ab      	cmp	r3, r5
 8005dc8:	f6ff aed5 	blt.w	8005b76 <__gethex+0x1fe>
 8005dcc:	2701      	movs	r7, #1
 8005dce:	e7c2      	b.n	8005d56 <__gethex+0x3de>
 8005dd0:	f016 061f 	ands.w	r6, r6, #31
 8005dd4:	d0fa      	beq.n	8005dcc <__gethex+0x454>
 8005dd6:	4453      	add	r3, sl
 8005dd8:	f1c6 0620 	rsb	r6, r6, #32
 8005ddc:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005de0:	f000 f9e6 	bl	80061b0 <__hi0bits>
 8005de4:	42b0      	cmp	r0, r6
 8005de6:	dbe7      	blt.n	8005db8 <__gethex+0x440>
 8005de8:	e7f0      	b.n	8005dcc <__gethex+0x454>
 8005dea:	bf00      	nop
 8005dec:	08007da8 	.word	0x08007da8

08005df0 <L_shift>:
 8005df0:	f1c2 0208 	rsb	r2, r2, #8
 8005df4:	0092      	lsls	r2, r2, #2
 8005df6:	b570      	push	{r4, r5, r6, lr}
 8005df8:	f1c2 0620 	rsb	r6, r2, #32
 8005dfc:	6843      	ldr	r3, [r0, #4]
 8005dfe:	6804      	ldr	r4, [r0, #0]
 8005e00:	fa03 f506 	lsl.w	r5, r3, r6
 8005e04:	432c      	orrs	r4, r5
 8005e06:	40d3      	lsrs	r3, r2
 8005e08:	6004      	str	r4, [r0, #0]
 8005e0a:	f840 3f04 	str.w	r3, [r0, #4]!
 8005e0e:	4288      	cmp	r0, r1
 8005e10:	d3f4      	bcc.n	8005dfc <L_shift+0xc>
 8005e12:	bd70      	pop	{r4, r5, r6, pc}

08005e14 <__match>:
 8005e14:	b530      	push	{r4, r5, lr}
 8005e16:	6803      	ldr	r3, [r0, #0]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e1e:	b914      	cbnz	r4, 8005e26 <__match+0x12>
 8005e20:	6003      	str	r3, [r0, #0]
 8005e22:	2001      	movs	r0, #1
 8005e24:	bd30      	pop	{r4, r5, pc}
 8005e26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e2a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005e2e:	2d19      	cmp	r5, #25
 8005e30:	bf98      	it	ls
 8005e32:	3220      	addls	r2, #32
 8005e34:	42a2      	cmp	r2, r4
 8005e36:	d0f0      	beq.n	8005e1a <__match+0x6>
 8005e38:	2000      	movs	r0, #0
 8005e3a:	e7f3      	b.n	8005e24 <__match+0x10>

08005e3c <__hexnan>:
 8005e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e40:	680b      	ldr	r3, [r1, #0]
 8005e42:	115e      	asrs	r6, r3, #5
 8005e44:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005e48:	f013 031f 	ands.w	r3, r3, #31
 8005e4c:	b087      	sub	sp, #28
 8005e4e:	bf18      	it	ne
 8005e50:	3604      	addne	r6, #4
 8005e52:	2500      	movs	r5, #0
 8005e54:	1f37      	subs	r7, r6, #4
 8005e56:	4690      	mov	r8, r2
 8005e58:	6802      	ldr	r2, [r0, #0]
 8005e5a:	9301      	str	r3, [sp, #4]
 8005e5c:	4682      	mov	sl, r0
 8005e5e:	f846 5c04 	str.w	r5, [r6, #-4]
 8005e62:	46b9      	mov	r9, r7
 8005e64:	463c      	mov	r4, r7
 8005e66:	9502      	str	r5, [sp, #8]
 8005e68:	46ab      	mov	fp, r5
 8005e6a:	7851      	ldrb	r1, [r2, #1]
 8005e6c:	1c53      	adds	r3, r2, #1
 8005e6e:	9303      	str	r3, [sp, #12]
 8005e70:	b341      	cbz	r1, 8005ec4 <__hexnan+0x88>
 8005e72:	4608      	mov	r0, r1
 8005e74:	9205      	str	r2, [sp, #20]
 8005e76:	9104      	str	r1, [sp, #16]
 8005e78:	f7ff fd68 	bl	800594c <__hexdig_fun>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	d14f      	bne.n	8005f20 <__hexnan+0xe4>
 8005e80:	9904      	ldr	r1, [sp, #16]
 8005e82:	9a05      	ldr	r2, [sp, #20]
 8005e84:	2920      	cmp	r1, #32
 8005e86:	d818      	bhi.n	8005eba <__hexnan+0x7e>
 8005e88:	9b02      	ldr	r3, [sp, #8]
 8005e8a:	459b      	cmp	fp, r3
 8005e8c:	dd13      	ble.n	8005eb6 <__hexnan+0x7a>
 8005e8e:	454c      	cmp	r4, r9
 8005e90:	d206      	bcs.n	8005ea0 <__hexnan+0x64>
 8005e92:	2d07      	cmp	r5, #7
 8005e94:	dc04      	bgt.n	8005ea0 <__hexnan+0x64>
 8005e96:	462a      	mov	r2, r5
 8005e98:	4649      	mov	r1, r9
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f7ff ffa8 	bl	8005df0 <L_shift>
 8005ea0:	4544      	cmp	r4, r8
 8005ea2:	d950      	bls.n	8005f46 <__hexnan+0x10a>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f1a4 0904 	sub.w	r9, r4, #4
 8005eaa:	f844 3c04 	str.w	r3, [r4, #-4]
 8005eae:	f8cd b008 	str.w	fp, [sp, #8]
 8005eb2:	464c      	mov	r4, r9
 8005eb4:	461d      	mov	r5, r3
 8005eb6:	9a03      	ldr	r2, [sp, #12]
 8005eb8:	e7d7      	b.n	8005e6a <__hexnan+0x2e>
 8005eba:	2929      	cmp	r1, #41	; 0x29
 8005ebc:	d156      	bne.n	8005f6c <__hexnan+0x130>
 8005ebe:	3202      	adds	r2, #2
 8005ec0:	f8ca 2000 	str.w	r2, [sl]
 8005ec4:	f1bb 0f00 	cmp.w	fp, #0
 8005ec8:	d050      	beq.n	8005f6c <__hexnan+0x130>
 8005eca:	454c      	cmp	r4, r9
 8005ecc:	d206      	bcs.n	8005edc <__hexnan+0xa0>
 8005ece:	2d07      	cmp	r5, #7
 8005ed0:	dc04      	bgt.n	8005edc <__hexnan+0xa0>
 8005ed2:	462a      	mov	r2, r5
 8005ed4:	4649      	mov	r1, r9
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	f7ff ff8a 	bl	8005df0 <L_shift>
 8005edc:	4544      	cmp	r4, r8
 8005ede:	d934      	bls.n	8005f4a <__hexnan+0x10e>
 8005ee0:	f1a8 0204 	sub.w	r2, r8, #4
 8005ee4:	4623      	mov	r3, r4
 8005ee6:	f853 1b04 	ldr.w	r1, [r3], #4
 8005eea:	f842 1f04 	str.w	r1, [r2, #4]!
 8005eee:	429f      	cmp	r7, r3
 8005ef0:	d2f9      	bcs.n	8005ee6 <__hexnan+0xaa>
 8005ef2:	1b3b      	subs	r3, r7, r4
 8005ef4:	f023 0303 	bic.w	r3, r3, #3
 8005ef8:	3304      	adds	r3, #4
 8005efa:	3401      	adds	r4, #1
 8005efc:	3e03      	subs	r6, #3
 8005efe:	42b4      	cmp	r4, r6
 8005f00:	bf88      	it	hi
 8005f02:	2304      	movhi	r3, #4
 8005f04:	4443      	add	r3, r8
 8005f06:	2200      	movs	r2, #0
 8005f08:	f843 2b04 	str.w	r2, [r3], #4
 8005f0c:	429f      	cmp	r7, r3
 8005f0e:	d2fb      	bcs.n	8005f08 <__hexnan+0xcc>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	b91b      	cbnz	r3, 8005f1c <__hexnan+0xe0>
 8005f14:	4547      	cmp	r7, r8
 8005f16:	d127      	bne.n	8005f68 <__hexnan+0x12c>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	603b      	str	r3, [r7, #0]
 8005f1c:	2005      	movs	r0, #5
 8005f1e:	e026      	b.n	8005f6e <__hexnan+0x132>
 8005f20:	3501      	adds	r5, #1
 8005f22:	2d08      	cmp	r5, #8
 8005f24:	f10b 0b01 	add.w	fp, fp, #1
 8005f28:	dd06      	ble.n	8005f38 <__hexnan+0xfc>
 8005f2a:	4544      	cmp	r4, r8
 8005f2c:	d9c3      	bls.n	8005eb6 <__hexnan+0x7a>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	f844 3c04 	str.w	r3, [r4, #-4]
 8005f34:	2501      	movs	r5, #1
 8005f36:	3c04      	subs	r4, #4
 8005f38:	6822      	ldr	r2, [r4, #0]
 8005f3a:	f000 000f 	and.w	r0, r0, #15
 8005f3e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005f42:	6022      	str	r2, [r4, #0]
 8005f44:	e7b7      	b.n	8005eb6 <__hexnan+0x7a>
 8005f46:	2508      	movs	r5, #8
 8005f48:	e7b5      	b.n	8005eb6 <__hexnan+0x7a>
 8005f4a:	9b01      	ldr	r3, [sp, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d0df      	beq.n	8005f10 <__hexnan+0xd4>
 8005f50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f54:	f1c3 0320 	rsb	r3, r3, #32
 8005f58:	fa22 f303 	lsr.w	r3, r2, r3
 8005f5c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005f60:	401a      	ands	r2, r3
 8005f62:	f846 2c04 	str.w	r2, [r6, #-4]
 8005f66:	e7d3      	b.n	8005f10 <__hexnan+0xd4>
 8005f68:	3f04      	subs	r7, #4
 8005f6a:	e7d1      	b.n	8005f10 <__hexnan+0xd4>
 8005f6c:	2004      	movs	r0, #4
 8005f6e:	b007      	add	sp, #28
 8005f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005f74 <_localeconv_r>:
 8005f74:	4800      	ldr	r0, [pc, #0]	; (8005f78 <_localeconv_r+0x4>)
 8005f76:	4770      	bx	lr
 8005f78:	2000019c 	.word	0x2000019c

08005f7c <malloc>:
 8005f7c:	4b02      	ldr	r3, [pc, #8]	; (8005f88 <malloc+0xc>)
 8005f7e:	4601      	mov	r1, r0
 8005f80:	6818      	ldr	r0, [r3, #0]
 8005f82:	f000 bd55 	b.w	8006a30 <_malloc_r>
 8005f86:	bf00      	nop
 8005f88:	20000044 	.word	0x20000044

08005f8c <__ascii_mbtowc>:
 8005f8c:	b082      	sub	sp, #8
 8005f8e:	b901      	cbnz	r1, 8005f92 <__ascii_mbtowc+0x6>
 8005f90:	a901      	add	r1, sp, #4
 8005f92:	b142      	cbz	r2, 8005fa6 <__ascii_mbtowc+0x1a>
 8005f94:	b14b      	cbz	r3, 8005faa <__ascii_mbtowc+0x1e>
 8005f96:	7813      	ldrb	r3, [r2, #0]
 8005f98:	600b      	str	r3, [r1, #0]
 8005f9a:	7812      	ldrb	r2, [r2, #0]
 8005f9c:	1e10      	subs	r0, r2, #0
 8005f9e:	bf18      	it	ne
 8005fa0:	2001      	movne	r0, #1
 8005fa2:	b002      	add	sp, #8
 8005fa4:	4770      	bx	lr
 8005fa6:	4610      	mov	r0, r2
 8005fa8:	e7fb      	b.n	8005fa2 <__ascii_mbtowc+0x16>
 8005faa:	f06f 0001 	mvn.w	r0, #1
 8005fae:	e7f8      	b.n	8005fa2 <__ascii_mbtowc+0x16>

08005fb0 <memcpy>:
 8005fb0:	440a      	add	r2, r1
 8005fb2:	4291      	cmp	r1, r2
 8005fb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005fb8:	d100      	bne.n	8005fbc <memcpy+0xc>
 8005fba:	4770      	bx	lr
 8005fbc:	b510      	push	{r4, lr}
 8005fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fc6:	4291      	cmp	r1, r2
 8005fc8:	d1f9      	bne.n	8005fbe <memcpy+0xe>
 8005fca:	bd10      	pop	{r4, pc}

08005fcc <_Balloc>:
 8005fcc:	b570      	push	{r4, r5, r6, lr}
 8005fce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	460d      	mov	r5, r1
 8005fd4:	b976      	cbnz	r6, 8005ff4 <_Balloc+0x28>
 8005fd6:	2010      	movs	r0, #16
 8005fd8:	f7ff ffd0 	bl	8005f7c <malloc>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	6260      	str	r0, [r4, #36]	; 0x24
 8005fe0:	b920      	cbnz	r0, 8005fec <_Balloc+0x20>
 8005fe2:	4b18      	ldr	r3, [pc, #96]	; (8006044 <_Balloc+0x78>)
 8005fe4:	4818      	ldr	r0, [pc, #96]	; (8006048 <_Balloc+0x7c>)
 8005fe6:	2166      	movs	r1, #102	; 0x66
 8005fe8:	f000 ff2a 	bl	8006e40 <__assert_func>
 8005fec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ff0:	6006      	str	r6, [r0, #0]
 8005ff2:	60c6      	str	r6, [r0, #12]
 8005ff4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005ff6:	68f3      	ldr	r3, [r6, #12]
 8005ff8:	b183      	cbz	r3, 800601c <_Balloc+0x50>
 8005ffa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006002:	b9b8      	cbnz	r0, 8006034 <_Balloc+0x68>
 8006004:	2101      	movs	r1, #1
 8006006:	fa01 f605 	lsl.w	r6, r1, r5
 800600a:	1d72      	adds	r2, r6, #5
 800600c:	0092      	lsls	r2, r2, #2
 800600e:	4620      	mov	r0, r4
 8006010:	f000 fc90 	bl	8006934 <_calloc_r>
 8006014:	b160      	cbz	r0, 8006030 <_Balloc+0x64>
 8006016:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800601a:	e00e      	b.n	800603a <_Balloc+0x6e>
 800601c:	2221      	movs	r2, #33	; 0x21
 800601e:	2104      	movs	r1, #4
 8006020:	4620      	mov	r0, r4
 8006022:	f000 fc87 	bl	8006934 <_calloc_r>
 8006026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006028:	60f0      	str	r0, [r6, #12]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1e4      	bne.n	8005ffa <_Balloc+0x2e>
 8006030:	2000      	movs	r0, #0
 8006032:	bd70      	pop	{r4, r5, r6, pc}
 8006034:	6802      	ldr	r2, [r0, #0]
 8006036:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800603a:	2300      	movs	r3, #0
 800603c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006040:	e7f7      	b.n	8006032 <_Balloc+0x66>
 8006042:	bf00      	nop
 8006044:	08007d36 	.word	0x08007d36
 8006048:	08007e34 	.word	0x08007e34

0800604c <_Bfree>:
 800604c:	b570      	push	{r4, r5, r6, lr}
 800604e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006050:	4605      	mov	r5, r0
 8006052:	460c      	mov	r4, r1
 8006054:	b976      	cbnz	r6, 8006074 <_Bfree+0x28>
 8006056:	2010      	movs	r0, #16
 8006058:	f7ff ff90 	bl	8005f7c <malloc>
 800605c:	4602      	mov	r2, r0
 800605e:	6268      	str	r0, [r5, #36]	; 0x24
 8006060:	b920      	cbnz	r0, 800606c <_Bfree+0x20>
 8006062:	4b09      	ldr	r3, [pc, #36]	; (8006088 <_Bfree+0x3c>)
 8006064:	4809      	ldr	r0, [pc, #36]	; (800608c <_Bfree+0x40>)
 8006066:	218a      	movs	r1, #138	; 0x8a
 8006068:	f000 feea 	bl	8006e40 <__assert_func>
 800606c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006070:	6006      	str	r6, [r0, #0]
 8006072:	60c6      	str	r6, [r0, #12]
 8006074:	b13c      	cbz	r4, 8006086 <_Bfree+0x3a>
 8006076:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006078:	6862      	ldr	r2, [r4, #4]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006080:	6021      	str	r1, [r4, #0]
 8006082:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006086:	bd70      	pop	{r4, r5, r6, pc}
 8006088:	08007d36 	.word	0x08007d36
 800608c:	08007e34 	.word	0x08007e34

08006090 <__multadd>:
 8006090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006094:	690d      	ldr	r5, [r1, #16]
 8006096:	4607      	mov	r7, r0
 8006098:	460c      	mov	r4, r1
 800609a:	461e      	mov	r6, r3
 800609c:	f101 0c14 	add.w	ip, r1, #20
 80060a0:	2000      	movs	r0, #0
 80060a2:	f8dc 3000 	ldr.w	r3, [ip]
 80060a6:	b299      	uxth	r1, r3
 80060a8:	fb02 6101 	mla	r1, r2, r1, r6
 80060ac:	0c1e      	lsrs	r6, r3, #16
 80060ae:	0c0b      	lsrs	r3, r1, #16
 80060b0:	fb02 3306 	mla	r3, r2, r6, r3
 80060b4:	b289      	uxth	r1, r1
 80060b6:	3001      	adds	r0, #1
 80060b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80060bc:	4285      	cmp	r5, r0
 80060be:	f84c 1b04 	str.w	r1, [ip], #4
 80060c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80060c6:	dcec      	bgt.n	80060a2 <__multadd+0x12>
 80060c8:	b30e      	cbz	r6, 800610e <__multadd+0x7e>
 80060ca:	68a3      	ldr	r3, [r4, #8]
 80060cc:	42ab      	cmp	r3, r5
 80060ce:	dc19      	bgt.n	8006104 <__multadd+0x74>
 80060d0:	6861      	ldr	r1, [r4, #4]
 80060d2:	4638      	mov	r0, r7
 80060d4:	3101      	adds	r1, #1
 80060d6:	f7ff ff79 	bl	8005fcc <_Balloc>
 80060da:	4680      	mov	r8, r0
 80060dc:	b928      	cbnz	r0, 80060ea <__multadd+0x5a>
 80060de:	4602      	mov	r2, r0
 80060e0:	4b0c      	ldr	r3, [pc, #48]	; (8006114 <__multadd+0x84>)
 80060e2:	480d      	ldr	r0, [pc, #52]	; (8006118 <__multadd+0x88>)
 80060e4:	21b5      	movs	r1, #181	; 0xb5
 80060e6:	f000 feab 	bl	8006e40 <__assert_func>
 80060ea:	6922      	ldr	r2, [r4, #16]
 80060ec:	3202      	adds	r2, #2
 80060ee:	f104 010c 	add.w	r1, r4, #12
 80060f2:	0092      	lsls	r2, r2, #2
 80060f4:	300c      	adds	r0, #12
 80060f6:	f7ff ff5b 	bl	8005fb0 <memcpy>
 80060fa:	4621      	mov	r1, r4
 80060fc:	4638      	mov	r0, r7
 80060fe:	f7ff ffa5 	bl	800604c <_Bfree>
 8006102:	4644      	mov	r4, r8
 8006104:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006108:	3501      	adds	r5, #1
 800610a:	615e      	str	r6, [r3, #20]
 800610c:	6125      	str	r5, [r4, #16]
 800610e:	4620      	mov	r0, r4
 8006110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006114:	08007da8 	.word	0x08007da8
 8006118:	08007e34 	.word	0x08007e34

0800611c <__s2b>:
 800611c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006120:	460c      	mov	r4, r1
 8006122:	4615      	mov	r5, r2
 8006124:	461f      	mov	r7, r3
 8006126:	2209      	movs	r2, #9
 8006128:	3308      	adds	r3, #8
 800612a:	4606      	mov	r6, r0
 800612c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006130:	2100      	movs	r1, #0
 8006132:	2201      	movs	r2, #1
 8006134:	429a      	cmp	r2, r3
 8006136:	db09      	blt.n	800614c <__s2b+0x30>
 8006138:	4630      	mov	r0, r6
 800613a:	f7ff ff47 	bl	8005fcc <_Balloc>
 800613e:	b940      	cbnz	r0, 8006152 <__s2b+0x36>
 8006140:	4602      	mov	r2, r0
 8006142:	4b19      	ldr	r3, [pc, #100]	; (80061a8 <__s2b+0x8c>)
 8006144:	4819      	ldr	r0, [pc, #100]	; (80061ac <__s2b+0x90>)
 8006146:	21ce      	movs	r1, #206	; 0xce
 8006148:	f000 fe7a 	bl	8006e40 <__assert_func>
 800614c:	0052      	lsls	r2, r2, #1
 800614e:	3101      	adds	r1, #1
 8006150:	e7f0      	b.n	8006134 <__s2b+0x18>
 8006152:	9b08      	ldr	r3, [sp, #32]
 8006154:	6143      	str	r3, [r0, #20]
 8006156:	2d09      	cmp	r5, #9
 8006158:	f04f 0301 	mov.w	r3, #1
 800615c:	6103      	str	r3, [r0, #16]
 800615e:	dd16      	ble.n	800618e <__s2b+0x72>
 8006160:	f104 0909 	add.w	r9, r4, #9
 8006164:	46c8      	mov	r8, r9
 8006166:	442c      	add	r4, r5
 8006168:	f818 3b01 	ldrb.w	r3, [r8], #1
 800616c:	4601      	mov	r1, r0
 800616e:	3b30      	subs	r3, #48	; 0x30
 8006170:	220a      	movs	r2, #10
 8006172:	4630      	mov	r0, r6
 8006174:	f7ff ff8c 	bl	8006090 <__multadd>
 8006178:	45a0      	cmp	r8, r4
 800617a:	d1f5      	bne.n	8006168 <__s2b+0x4c>
 800617c:	f1a5 0408 	sub.w	r4, r5, #8
 8006180:	444c      	add	r4, r9
 8006182:	1b2d      	subs	r5, r5, r4
 8006184:	1963      	adds	r3, r4, r5
 8006186:	42bb      	cmp	r3, r7
 8006188:	db04      	blt.n	8006194 <__s2b+0x78>
 800618a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800618e:	340a      	adds	r4, #10
 8006190:	2509      	movs	r5, #9
 8006192:	e7f6      	b.n	8006182 <__s2b+0x66>
 8006194:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006198:	4601      	mov	r1, r0
 800619a:	3b30      	subs	r3, #48	; 0x30
 800619c:	220a      	movs	r2, #10
 800619e:	4630      	mov	r0, r6
 80061a0:	f7ff ff76 	bl	8006090 <__multadd>
 80061a4:	e7ee      	b.n	8006184 <__s2b+0x68>
 80061a6:	bf00      	nop
 80061a8:	08007da8 	.word	0x08007da8
 80061ac:	08007e34 	.word	0x08007e34

080061b0 <__hi0bits>:
 80061b0:	0c02      	lsrs	r2, r0, #16
 80061b2:	0412      	lsls	r2, r2, #16
 80061b4:	4603      	mov	r3, r0
 80061b6:	b9ca      	cbnz	r2, 80061ec <__hi0bits+0x3c>
 80061b8:	0403      	lsls	r3, r0, #16
 80061ba:	2010      	movs	r0, #16
 80061bc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80061c0:	bf04      	itt	eq
 80061c2:	021b      	lsleq	r3, r3, #8
 80061c4:	3008      	addeq	r0, #8
 80061c6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80061ca:	bf04      	itt	eq
 80061cc:	011b      	lsleq	r3, r3, #4
 80061ce:	3004      	addeq	r0, #4
 80061d0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80061d4:	bf04      	itt	eq
 80061d6:	009b      	lsleq	r3, r3, #2
 80061d8:	3002      	addeq	r0, #2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	db05      	blt.n	80061ea <__hi0bits+0x3a>
 80061de:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80061e2:	f100 0001 	add.w	r0, r0, #1
 80061e6:	bf08      	it	eq
 80061e8:	2020      	moveq	r0, #32
 80061ea:	4770      	bx	lr
 80061ec:	2000      	movs	r0, #0
 80061ee:	e7e5      	b.n	80061bc <__hi0bits+0xc>

080061f0 <__lo0bits>:
 80061f0:	6803      	ldr	r3, [r0, #0]
 80061f2:	4602      	mov	r2, r0
 80061f4:	f013 0007 	ands.w	r0, r3, #7
 80061f8:	d00b      	beq.n	8006212 <__lo0bits+0x22>
 80061fa:	07d9      	lsls	r1, r3, #31
 80061fc:	d421      	bmi.n	8006242 <__lo0bits+0x52>
 80061fe:	0798      	lsls	r0, r3, #30
 8006200:	bf49      	itett	mi
 8006202:	085b      	lsrmi	r3, r3, #1
 8006204:	089b      	lsrpl	r3, r3, #2
 8006206:	2001      	movmi	r0, #1
 8006208:	6013      	strmi	r3, [r2, #0]
 800620a:	bf5c      	itt	pl
 800620c:	6013      	strpl	r3, [r2, #0]
 800620e:	2002      	movpl	r0, #2
 8006210:	4770      	bx	lr
 8006212:	b299      	uxth	r1, r3
 8006214:	b909      	cbnz	r1, 800621a <__lo0bits+0x2a>
 8006216:	0c1b      	lsrs	r3, r3, #16
 8006218:	2010      	movs	r0, #16
 800621a:	b2d9      	uxtb	r1, r3
 800621c:	b909      	cbnz	r1, 8006222 <__lo0bits+0x32>
 800621e:	3008      	adds	r0, #8
 8006220:	0a1b      	lsrs	r3, r3, #8
 8006222:	0719      	lsls	r1, r3, #28
 8006224:	bf04      	itt	eq
 8006226:	091b      	lsreq	r3, r3, #4
 8006228:	3004      	addeq	r0, #4
 800622a:	0799      	lsls	r1, r3, #30
 800622c:	bf04      	itt	eq
 800622e:	089b      	lsreq	r3, r3, #2
 8006230:	3002      	addeq	r0, #2
 8006232:	07d9      	lsls	r1, r3, #31
 8006234:	d403      	bmi.n	800623e <__lo0bits+0x4e>
 8006236:	085b      	lsrs	r3, r3, #1
 8006238:	f100 0001 	add.w	r0, r0, #1
 800623c:	d003      	beq.n	8006246 <__lo0bits+0x56>
 800623e:	6013      	str	r3, [r2, #0]
 8006240:	4770      	bx	lr
 8006242:	2000      	movs	r0, #0
 8006244:	4770      	bx	lr
 8006246:	2020      	movs	r0, #32
 8006248:	4770      	bx	lr
	...

0800624c <__i2b>:
 800624c:	b510      	push	{r4, lr}
 800624e:	460c      	mov	r4, r1
 8006250:	2101      	movs	r1, #1
 8006252:	f7ff febb 	bl	8005fcc <_Balloc>
 8006256:	4602      	mov	r2, r0
 8006258:	b928      	cbnz	r0, 8006266 <__i2b+0x1a>
 800625a:	4b05      	ldr	r3, [pc, #20]	; (8006270 <__i2b+0x24>)
 800625c:	4805      	ldr	r0, [pc, #20]	; (8006274 <__i2b+0x28>)
 800625e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006262:	f000 fded 	bl	8006e40 <__assert_func>
 8006266:	2301      	movs	r3, #1
 8006268:	6144      	str	r4, [r0, #20]
 800626a:	6103      	str	r3, [r0, #16]
 800626c:	bd10      	pop	{r4, pc}
 800626e:	bf00      	nop
 8006270:	08007da8 	.word	0x08007da8
 8006274:	08007e34 	.word	0x08007e34

08006278 <__multiply>:
 8006278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627c:	4691      	mov	r9, r2
 800627e:	690a      	ldr	r2, [r1, #16]
 8006280:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006284:	429a      	cmp	r2, r3
 8006286:	bfb8      	it	lt
 8006288:	460b      	movlt	r3, r1
 800628a:	460c      	mov	r4, r1
 800628c:	bfbc      	itt	lt
 800628e:	464c      	movlt	r4, r9
 8006290:	4699      	movlt	r9, r3
 8006292:	6927      	ldr	r7, [r4, #16]
 8006294:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006298:	68a3      	ldr	r3, [r4, #8]
 800629a:	6861      	ldr	r1, [r4, #4]
 800629c:	eb07 060a 	add.w	r6, r7, sl
 80062a0:	42b3      	cmp	r3, r6
 80062a2:	b085      	sub	sp, #20
 80062a4:	bfb8      	it	lt
 80062a6:	3101      	addlt	r1, #1
 80062a8:	f7ff fe90 	bl	8005fcc <_Balloc>
 80062ac:	b930      	cbnz	r0, 80062bc <__multiply+0x44>
 80062ae:	4602      	mov	r2, r0
 80062b0:	4b43      	ldr	r3, [pc, #268]	; (80063c0 <__multiply+0x148>)
 80062b2:	4844      	ldr	r0, [pc, #272]	; (80063c4 <__multiply+0x14c>)
 80062b4:	f240 115d 	movw	r1, #349	; 0x15d
 80062b8:	f000 fdc2 	bl	8006e40 <__assert_func>
 80062bc:	f100 0514 	add.w	r5, r0, #20
 80062c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80062c4:	462b      	mov	r3, r5
 80062c6:	2200      	movs	r2, #0
 80062c8:	4543      	cmp	r3, r8
 80062ca:	d321      	bcc.n	8006310 <__multiply+0x98>
 80062cc:	f104 0314 	add.w	r3, r4, #20
 80062d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80062d4:	f109 0314 	add.w	r3, r9, #20
 80062d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80062dc:	9202      	str	r2, [sp, #8]
 80062de:	1b3a      	subs	r2, r7, r4
 80062e0:	3a15      	subs	r2, #21
 80062e2:	f022 0203 	bic.w	r2, r2, #3
 80062e6:	3204      	adds	r2, #4
 80062e8:	f104 0115 	add.w	r1, r4, #21
 80062ec:	428f      	cmp	r7, r1
 80062ee:	bf38      	it	cc
 80062f0:	2204      	movcc	r2, #4
 80062f2:	9201      	str	r2, [sp, #4]
 80062f4:	9a02      	ldr	r2, [sp, #8]
 80062f6:	9303      	str	r3, [sp, #12]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d80c      	bhi.n	8006316 <__multiply+0x9e>
 80062fc:	2e00      	cmp	r6, #0
 80062fe:	dd03      	ble.n	8006308 <__multiply+0x90>
 8006300:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006304:	2b00      	cmp	r3, #0
 8006306:	d059      	beq.n	80063bc <__multiply+0x144>
 8006308:	6106      	str	r6, [r0, #16]
 800630a:	b005      	add	sp, #20
 800630c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006310:	f843 2b04 	str.w	r2, [r3], #4
 8006314:	e7d8      	b.n	80062c8 <__multiply+0x50>
 8006316:	f8b3 a000 	ldrh.w	sl, [r3]
 800631a:	f1ba 0f00 	cmp.w	sl, #0
 800631e:	d023      	beq.n	8006368 <__multiply+0xf0>
 8006320:	f104 0e14 	add.w	lr, r4, #20
 8006324:	46a9      	mov	r9, r5
 8006326:	f04f 0c00 	mov.w	ip, #0
 800632a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800632e:	f8d9 1000 	ldr.w	r1, [r9]
 8006332:	fa1f fb82 	uxth.w	fp, r2
 8006336:	b289      	uxth	r1, r1
 8006338:	fb0a 110b 	mla	r1, sl, fp, r1
 800633c:	4461      	add	r1, ip
 800633e:	f8d9 c000 	ldr.w	ip, [r9]
 8006342:	0c12      	lsrs	r2, r2, #16
 8006344:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006348:	fb0a c202 	mla	r2, sl, r2, ip
 800634c:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006350:	b289      	uxth	r1, r1
 8006352:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006356:	4577      	cmp	r7, lr
 8006358:	f849 1b04 	str.w	r1, [r9], #4
 800635c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006360:	d8e3      	bhi.n	800632a <__multiply+0xb2>
 8006362:	9a01      	ldr	r2, [sp, #4]
 8006364:	f845 c002 	str.w	ip, [r5, r2]
 8006368:	9a03      	ldr	r2, [sp, #12]
 800636a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800636e:	3304      	adds	r3, #4
 8006370:	f1b9 0f00 	cmp.w	r9, #0
 8006374:	d020      	beq.n	80063b8 <__multiply+0x140>
 8006376:	6829      	ldr	r1, [r5, #0]
 8006378:	f104 0c14 	add.w	ip, r4, #20
 800637c:	46ae      	mov	lr, r5
 800637e:	f04f 0a00 	mov.w	sl, #0
 8006382:	f8bc b000 	ldrh.w	fp, [ip]
 8006386:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800638a:	fb09 220b 	mla	r2, r9, fp, r2
 800638e:	4492      	add	sl, r2
 8006390:	b289      	uxth	r1, r1
 8006392:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006396:	f84e 1b04 	str.w	r1, [lr], #4
 800639a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800639e:	f8be 1000 	ldrh.w	r1, [lr]
 80063a2:	0c12      	lsrs	r2, r2, #16
 80063a4:	fb09 1102 	mla	r1, r9, r2, r1
 80063a8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80063ac:	4567      	cmp	r7, ip
 80063ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80063b2:	d8e6      	bhi.n	8006382 <__multiply+0x10a>
 80063b4:	9a01      	ldr	r2, [sp, #4]
 80063b6:	50a9      	str	r1, [r5, r2]
 80063b8:	3504      	adds	r5, #4
 80063ba:	e79b      	b.n	80062f4 <__multiply+0x7c>
 80063bc:	3e01      	subs	r6, #1
 80063be:	e79d      	b.n	80062fc <__multiply+0x84>
 80063c0:	08007da8 	.word	0x08007da8
 80063c4:	08007e34 	.word	0x08007e34

080063c8 <__pow5mult>:
 80063c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063cc:	4615      	mov	r5, r2
 80063ce:	f012 0203 	ands.w	r2, r2, #3
 80063d2:	4606      	mov	r6, r0
 80063d4:	460f      	mov	r7, r1
 80063d6:	d007      	beq.n	80063e8 <__pow5mult+0x20>
 80063d8:	4c25      	ldr	r4, [pc, #148]	; (8006470 <__pow5mult+0xa8>)
 80063da:	3a01      	subs	r2, #1
 80063dc:	2300      	movs	r3, #0
 80063de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80063e2:	f7ff fe55 	bl	8006090 <__multadd>
 80063e6:	4607      	mov	r7, r0
 80063e8:	10ad      	asrs	r5, r5, #2
 80063ea:	d03d      	beq.n	8006468 <__pow5mult+0xa0>
 80063ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80063ee:	b97c      	cbnz	r4, 8006410 <__pow5mult+0x48>
 80063f0:	2010      	movs	r0, #16
 80063f2:	f7ff fdc3 	bl	8005f7c <malloc>
 80063f6:	4602      	mov	r2, r0
 80063f8:	6270      	str	r0, [r6, #36]	; 0x24
 80063fa:	b928      	cbnz	r0, 8006408 <__pow5mult+0x40>
 80063fc:	4b1d      	ldr	r3, [pc, #116]	; (8006474 <__pow5mult+0xac>)
 80063fe:	481e      	ldr	r0, [pc, #120]	; (8006478 <__pow5mult+0xb0>)
 8006400:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006404:	f000 fd1c 	bl	8006e40 <__assert_func>
 8006408:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800640c:	6004      	str	r4, [r0, #0]
 800640e:	60c4      	str	r4, [r0, #12]
 8006410:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006414:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006418:	b94c      	cbnz	r4, 800642e <__pow5mult+0x66>
 800641a:	f240 2171 	movw	r1, #625	; 0x271
 800641e:	4630      	mov	r0, r6
 8006420:	f7ff ff14 	bl	800624c <__i2b>
 8006424:	2300      	movs	r3, #0
 8006426:	f8c8 0008 	str.w	r0, [r8, #8]
 800642a:	4604      	mov	r4, r0
 800642c:	6003      	str	r3, [r0, #0]
 800642e:	f04f 0900 	mov.w	r9, #0
 8006432:	07eb      	lsls	r3, r5, #31
 8006434:	d50a      	bpl.n	800644c <__pow5mult+0x84>
 8006436:	4639      	mov	r1, r7
 8006438:	4622      	mov	r2, r4
 800643a:	4630      	mov	r0, r6
 800643c:	f7ff ff1c 	bl	8006278 <__multiply>
 8006440:	4639      	mov	r1, r7
 8006442:	4680      	mov	r8, r0
 8006444:	4630      	mov	r0, r6
 8006446:	f7ff fe01 	bl	800604c <_Bfree>
 800644a:	4647      	mov	r7, r8
 800644c:	106d      	asrs	r5, r5, #1
 800644e:	d00b      	beq.n	8006468 <__pow5mult+0xa0>
 8006450:	6820      	ldr	r0, [r4, #0]
 8006452:	b938      	cbnz	r0, 8006464 <__pow5mult+0x9c>
 8006454:	4622      	mov	r2, r4
 8006456:	4621      	mov	r1, r4
 8006458:	4630      	mov	r0, r6
 800645a:	f7ff ff0d 	bl	8006278 <__multiply>
 800645e:	6020      	str	r0, [r4, #0]
 8006460:	f8c0 9000 	str.w	r9, [r0]
 8006464:	4604      	mov	r4, r0
 8006466:	e7e4      	b.n	8006432 <__pow5mult+0x6a>
 8006468:	4638      	mov	r0, r7
 800646a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800646e:	bf00      	nop
 8006470:	08007f80 	.word	0x08007f80
 8006474:	08007d36 	.word	0x08007d36
 8006478:	08007e34 	.word	0x08007e34

0800647c <__lshift>:
 800647c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006480:	460c      	mov	r4, r1
 8006482:	6849      	ldr	r1, [r1, #4]
 8006484:	6923      	ldr	r3, [r4, #16]
 8006486:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800648a:	68a3      	ldr	r3, [r4, #8]
 800648c:	4607      	mov	r7, r0
 800648e:	4691      	mov	r9, r2
 8006490:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006494:	f108 0601 	add.w	r6, r8, #1
 8006498:	42b3      	cmp	r3, r6
 800649a:	db0b      	blt.n	80064b4 <__lshift+0x38>
 800649c:	4638      	mov	r0, r7
 800649e:	f7ff fd95 	bl	8005fcc <_Balloc>
 80064a2:	4605      	mov	r5, r0
 80064a4:	b948      	cbnz	r0, 80064ba <__lshift+0x3e>
 80064a6:	4602      	mov	r2, r0
 80064a8:	4b2a      	ldr	r3, [pc, #168]	; (8006554 <__lshift+0xd8>)
 80064aa:	482b      	ldr	r0, [pc, #172]	; (8006558 <__lshift+0xdc>)
 80064ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80064b0:	f000 fcc6 	bl	8006e40 <__assert_func>
 80064b4:	3101      	adds	r1, #1
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	e7ee      	b.n	8006498 <__lshift+0x1c>
 80064ba:	2300      	movs	r3, #0
 80064bc:	f100 0114 	add.w	r1, r0, #20
 80064c0:	f100 0210 	add.w	r2, r0, #16
 80064c4:	4618      	mov	r0, r3
 80064c6:	4553      	cmp	r3, sl
 80064c8:	db37      	blt.n	800653a <__lshift+0xbe>
 80064ca:	6920      	ldr	r0, [r4, #16]
 80064cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80064d0:	f104 0314 	add.w	r3, r4, #20
 80064d4:	f019 091f 	ands.w	r9, r9, #31
 80064d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80064dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80064e0:	d02f      	beq.n	8006542 <__lshift+0xc6>
 80064e2:	f1c9 0e20 	rsb	lr, r9, #32
 80064e6:	468a      	mov	sl, r1
 80064e8:	f04f 0c00 	mov.w	ip, #0
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	fa02 f209 	lsl.w	r2, r2, r9
 80064f2:	ea42 020c 	orr.w	r2, r2, ip
 80064f6:	f84a 2b04 	str.w	r2, [sl], #4
 80064fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80064fe:	4298      	cmp	r0, r3
 8006500:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006504:	d8f2      	bhi.n	80064ec <__lshift+0x70>
 8006506:	1b03      	subs	r3, r0, r4
 8006508:	3b15      	subs	r3, #21
 800650a:	f023 0303 	bic.w	r3, r3, #3
 800650e:	3304      	adds	r3, #4
 8006510:	f104 0215 	add.w	r2, r4, #21
 8006514:	4290      	cmp	r0, r2
 8006516:	bf38      	it	cc
 8006518:	2304      	movcc	r3, #4
 800651a:	f841 c003 	str.w	ip, [r1, r3]
 800651e:	f1bc 0f00 	cmp.w	ip, #0
 8006522:	d001      	beq.n	8006528 <__lshift+0xac>
 8006524:	f108 0602 	add.w	r6, r8, #2
 8006528:	3e01      	subs	r6, #1
 800652a:	4638      	mov	r0, r7
 800652c:	612e      	str	r6, [r5, #16]
 800652e:	4621      	mov	r1, r4
 8006530:	f7ff fd8c 	bl	800604c <_Bfree>
 8006534:	4628      	mov	r0, r5
 8006536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800653a:	f842 0f04 	str.w	r0, [r2, #4]!
 800653e:	3301      	adds	r3, #1
 8006540:	e7c1      	b.n	80064c6 <__lshift+0x4a>
 8006542:	3904      	subs	r1, #4
 8006544:	f853 2b04 	ldr.w	r2, [r3], #4
 8006548:	f841 2f04 	str.w	r2, [r1, #4]!
 800654c:	4298      	cmp	r0, r3
 800654e:	d8f9      	bhi.n	8006544 <__lshift+0xc8>
 8006550:	e7ea      	b.n	8006528 <__lshift+0xac>
 8006552:	bf00      	nop
 8006554:	08007da8 	.word	0x08007da8
 8006558:	08007e34 	.word	0x08007e34

0800655c <__mcmp>:
 800655c:	690a      	ldr	r2, [r1, #16]
 800655e:	4603      	mov	r3, r0
 8006560:	6900      	ldr	r0, [r0, #16]
 8006562:	1a80      	subs	r0, r0, r2
 8006564:	b530      	push	{r4, r5, lr}
 8006566:	d10d      	bne.n	8006584 <__mcmp+0x28>
 8006568:	3314      	adds	r3, #20
 800656a:	3114      	adds	r1, #20
 800656c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006570:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006574:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006578:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800657c:	4295      	cmp	r5, r2
 800657e:	d002      	beq.n	8006586 <__mcmp+0x2a>
 8006580:	d304      	bcc.n	800658c <__mcmp+0x30>
 8006582:	2001      	movs	r0, #1
 8006584:	bd30      	pop	{r4, r5, pc}
 8006586:	42a3      	cmp	r3, r4
 8006588:	d3f4      	bcc.n	8006574 <__mcmp+0x18>
 800658a:	e7fb      	b.n	8006584 <__mcmp+0x28>
 800658c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006590:	e7f8      	b.n	8006584 <__mcmp+0x28>
	...

08006594 <__mdiff>:
 8006594:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006598:	460d      	mov	r5, r1
 800659a:	4607      	mov	r7, r0
 800659c:	4611      	mov	r1, r2
 800659e:	4628      	mov	r0, r5
 80065a0:	4614      	mov	r4, r2
 80065a2:	f7ff ffdb 	bl	800655c <__mcmp>
 80065a6:	1e06      	subs	r6, r0, #0
 80065a8:	d111      	bne.n	80065ce <__mdiff+0x3a>
 80065aa:	4631      	mov	r1, r6
 80065ac:	4638      	mov	r0, r7
 80065ae:	f7ff fd0d 	bl	8005fcc <_Balloc>
 80065b2:	4602      	mov	r2, r0
 80065b4:	b928      	cbnz	r0, 80065c2 <__mdiff+0x2e>
 80065b6:	4b39      	ldr	r3, [pc, #228]	; (800669c <__mdiff+0x108>)
 80065b8:	f240 2132 	movw	r1, #562	; 0x232
 80065bc:	4838      	ldr	r0, [pc, #224]	; (80066a0 <__mdiff+0x10c>)
 80065be:	f000 fc3f 	bl	8006e40 <__assert_func>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80065c8:	4610      	mov	r0, r2
 80065ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ce:	bfa4      	itt	ge
 80065d0:	4623      	movge	r3, r4
 80065d2:	462c      	movge	r4, r5
 80065d4:	4638      	mov	r0, r7
 80065d6:	6861      	ldr	r1, [r4, #4]
 80065d8:	bfa6      	itte	ge
 80065da:	461d      	movge	r5, r3
 80065dc:	2600      	movge	r6, #0
 80065de:	2601      	movlt	r6, #1
 80065e0:	f7ff fcf4 	bl	8005fcc <_Balloc>
 80065e4:	4602      	mov	r2, r0
 80065e6:	b918      	cbnz	r0, 80065f0 <__mdiff+0x5c>
 80065e8:	4b2c      	ldr	r3, [pc, #176]	; (800669c <__mdiff+0x108>)
 80065ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80065ee:	e7e5      	b.n	80065bc <__mdiff+0x28>
 80065f0:	6927      	ldr	r7, [r4, #16]
 80065f2:	60c6      	str	r6, [r0, #12]
 80065f4:	692e      	ldr	r6, [r5, #16]
 80065f6:	f104 0014 	add.w	r0, r4, #20
 80065fa:	f105 0914 	add.w	r9, r5, #20
 80065fe:	f102 0e14 	add.w	lr, r2, #20
 8006602:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8006606:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800660a:	3410      	adds	r4, #16
 800660c:	46f2      	mov	sl, lr
 800660e:	2100      	movs	r1, #0
 8006610:	f859 3b04 	ldr.w	r3, [r9], #4
 8006614:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006618:	fa1f f883 	uxth.w	r8, r3
 800661c:	fa11 f18b 	uxtah	r1, r1, fp
 8006620:	0c1b      	lsrs	r3, r3, #16
 8006622:	eba1 0808 	sub.w	r8, r1, r8
 8006626:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800662a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800662e:	fa1f f888 	uxth.w	r8, r8
 8006632:	1419      	asrs	r1, r3, #16
 8006634:	454e      	cmp	r6, r9
 8006636:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800663a:	f84a 3b04 	str.w	r3, [sl], #4
 800663e:	d8e7      	bhi.n	8006610 <__mdiff+0x7c>
 8006640:	1b73      	subs	r3, r6, r5
 8006642:	3b15      	subs	r3, #21
 8006644:	f023 0303 	bic.w	r3, r3, #3
 8006648:	3304      	adds	r3, #4
 800664a:	3515      	adds	r5, #21
 800664c:	42ae      	cmp	r6, r5
 800664e:	bf38      	it	cc
 8006650:	2304      	movcc	r3, #4
 8006652:	4418      	add	r0, r3
 8006654:	4473      	add	r3, lr
 8006656:	469e      	mov	lr, r3
 8006658:	4606      	mov	r6, r0
 800665a:	4566      	cmp	r6, ip
 800665c:	d30e      	bcc.n	800667c <__mdiff+0xe8>
 800665e:	f10c 0103 	add.w	r1, ip, #3
 8006662:	1a09      	subs	r1, r1, r0
 8006664:	f021 0103 	bic.w	r1, r1, #3
 8006668:	3803      	subs	r0, #3
 800666a:	4584      	cmp	ip, r0
 800666c:	bf38      	it	cc
 800666e:	2100      	movcc	r1, #0
 8006670:	4419      	add	r1, r3
 8006672:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006676:	b17b      	cbz	r3, 8006698 <__mdiff+0x104>
 8006678:	6117      	str	r7, [r2, #16]
 800667a:	e7a5      	b.n	80065c8 <__mdiff+0x34>
 800667c:	f856 8b04 	ldr.w	r8, [r6], #4
 8006680:	fa11 f488 	uxtah	r4, r1, r8
 8006684:	1425      	asrs	r5, r4, #16
 8006686:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800668a:	b2a4      	uxth	r4, r4
 800668c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8006690:	f84e 4b04 	str.w	r4, [lr], #4
 8006694:	1429      	asrs	r1, r5, #16
 8006696:	e7e0      	b.n	800665a <__mdiff+0xc6>
 8006698:	3f01      	subs	r7, #1
 800669a:	e7ea      	b.n	8006672 <__mdiff+0xde>
 800669c:	08007da8 	.word	0x08007da8
 80066a0:	08007e34 	.word	0x08007e34

080066a4 <__ulp>:
 80066a4:	4b11      	ldr	r3, [pc, #68]	; (80066ec <__ulp+0x48>)
 80066a6:	400b      	ands	r3, r1
 80066a8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	dd02      	ble.n	80066b6 <__ulp+0x12>
 80066b0:	2000      	movs	r0, #0
 80066b2:	4619      	mov	r1, r3
 80066b4:	4770      	bx	lr
 80066b6:	425b      	negs	r3, r3
 80066b8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80066bc:	ea4f 5223 	mov.w	r2, r3, asr #20
 80066c0:	f04f 0000 	mov.w	r0, #0
 80066c4:	f04f 0100 	mov.w	r1, #0
 80066c8:	da04      	bge.n	80066d4 <__ulp+0x30>
 80066ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80066ce:	fa43 f102 	asr.w	r1, r3, r2
 80066d2:	4770      	bx	lr
 80066d4:	f1a2 0314 	sub.w	r3, r2, #20
 80066d8:	2b1e      	cmp	r3, #30
 80066da:	bfda      	itte	le
 80066dc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80066e0:	fa22 f303 	lsrle.w	r3, r2, r3
 80066e4:	2301      	movgt	r3, #1
 80066e6:	4618      	mov	r0, r3
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	7ff00000 	.word	0x7ff00000

080066f0 <__b2d>:
 80066f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066f4:	6907      	ldr	r7, [r0, #16]
 80066f6:	f100 0914 	add.w	r9, r0, #20
 80066fa:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80066fe:	f1a7 0804 	sub.w	r8, r7, #4
 8006702:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006706:	4630      	mov	r0, r6
 8006708:	f7ff fd52 	bl	80061b0 <__hi0bits>
 800670c:	f1c0 0320 	rsb	r3, r0, #32
 8006710:	280a      	cmp	r0, #10
 8006712:	600b      	str	r3, [r1, #0]
 8006714:	491f      	ldr	r1, [pc, #124]	; (8006794 <__b2d+0xa4>)
 8006716:	dc17      	bgt.n	8006748 <__b2d+0x58>
 8006718:	f1c0 0c0b 	rsb	ip, r0, #11
 800671c:	45c1      	cmp	r9, r8
 800671e:	fa26 f30c 	lsr.w	r3, r6, ip
 8006722:	bf38      	it	cc
 8006724:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006728:	ea43 0501 	orr.w	r5, r3, r1
 800672c:	bf28      	it	cs
 800672e:	2200      	movcs	r2, #0
 8006730:	f100 0315 	add.w	r3, r0, #21
 8006734:	fa06 f303 	lsl.w	r3, r6, r3
 8006738:	fa22 f20c 	lsr.w	r2, r2, ip
 800673c:	ea43 0402 	orr.w	r4, r3, r2
 8006740:	4620      	mov	r0, r4
 8006742:	4629      	mov	r1, r5
 8006744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006748:	45c1      	cmp	r9, r8
 800674a:	bf3a      	itte	cc
 800674c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006750:	f1a7 0808 	subcc.w	r8, r7, #8
 8006754:	2200      	movcs	r2, #0
 8006756:	f1b0 030b 	subs.w	r3, r0, #11
 800675a:	d016      	beq.n	800678a <__b2d+0x9a>
 800675c:	f1c3 0720 	rsb	r7, r3, #32
 8006760:	fa22 f107 	lsr.w	r1, r2, r7
 8006764:	45c8      	cmp	r8, r9
 8006766:	fa06 f603 	lsl.w	r6, r6, r3
 800676a:	ea46 0601 	orr.w	r6, r6, r1
 800676e:	bf8c      	ite	hi
 8006770:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006774:	2100      	movls	r1, #0
 8006776:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800677a:	fa02 f003 	lsl.w	r0, r2, r3
 800677e:	40f9      	lsrs	r1, r7
 8006780:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006784:	ea40 0401 	orr.w	r4, r0, r1
 8006788:	e7da      	b.n	8006740 <__b2d+0x50>
 800678a:	ea46 0501 	orr.w	r5, r6, r1
 800678e:	4614      	mov	r4, r2
 8006790:	e7d6      	b.n	8006740 <__b2d+0x50>
 8006792:	bf00      	nop
 8006794:	3ff00000 	.word	0x3ff00000

08006798 <__d2b>:
 8006798:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800679c:	2101      	movs	r1, #1
 800679e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80067a2:	4690      	mov	r8, r2
 80067a4:	461d      	mov	r5, r3
 80067a6:	f7ff fc11 	bl	8005fcc <_Balloc>
 80067aa:	4604      	mov	r4, r0
 80067ac:	b930      	cbnz	r0, 80067bc <__d2b+0x24>
 80067ae:	4602      	mov	r2, r0
 80067b0:	4b25      	ldr	r3, [pc, #148]	; (8006848 <__d2b+0xb0>)
 80067b2:	4826      	ldr	r0, [pc, #152]	; (800684c <__d2b+0xb4>)
 80067b4:	f240 310a 	movw	r1, #778	; 0x30a
 80067b8:	f000 fb42 	bl	8006e40 <__assert_func>
 80067bc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80067c0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80067c4:	bb2d      	cbnz	r5, 8006812 <__d2b+0x7a>
 80067c6:	9301      	str	r3, [sp, #4]
 80067c8:	f1b8 0300 	subs.w	r3, r8, #0
 80067cc:	d026      	beq.n	800681c <__d2b+0x84>
 80067ce:	4668      	mov	r0, sp
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	f7ff fd0d 	bl	80061f0 <__lo0bits>
 80067d6:	9900      	ldr	r1, [sp, #0]
 80067d8:	b1f0      	cbz	r0, 8006818 <__d2b+0x80>
 80067da:	9a01      	ldr	r2, [sp, #4]
 80067dc:	f1c0 0320 	rsb	r3, r0, #32
 80067e0:	fa02 f303 	lsl.w	r3, r2, r3
 80067e4:	430b      	orrs	r3, r1
 80067e6:	40c2      	lsrs	r2, r0
 80067e8:	6163      	str	r3, [r4, #20]
 80067ea:	9201      	str	r2, [sp, #4]
 80067ec:	9b01      	ldr	r3, [sp, #4]
 80067ee:	61a3      	str	r3, [r4, #24]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	bf14      	ite	ne
 80067f4:	2102      	movne	r1, #2
 80067f6:	2101      	moveq	r1, #1
 80067f8:	6121      	str	r1, [r4, #16]
 80067fa:	b1c5      	cbz	r5, 800682e <__d2b+0x96>
 80067fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006800:	4405      	add	r5, r0
 8006802:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006806:	603d      	str	r5, [r7, #0]
 8006808:	6030      	str	r0, [r6, #0]
 800680a:	4620      	mov	r0, r4
 800680c:	b002      	add	sp, #8
 800680e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006812:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006816:	e7d6      	b.n	80067c6 <__d2b+0x2e>
 8006818:	6161      	str	r1, [r4, #20]
 800681a:	e7e7      	b.n	80067ec <__d2b+0x54>
 800681c:	a801      	add	r0, sp, #4
 800681e:	f7ff fce7 	bl	80061f0 <__lo0bits>
 8006822:	9b01      	ldr	r3, [sp, #4]
 8006824:	6163      	str	r3, [r4, #20]
 8006826:	2101      	movs	r1, #1
 8006828:	6121      	str	r1, [r4, #16]
 800682a:	3020      	adds	r0, #32
 800682c:	e7e5      	b.n	80067fa <__d2b+0x62>
 800682e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006832:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006836:	6038      	str	r0, [r7, #0]
 8006838:	6918      	ldr	r0, [r3, #16]
 800683a:	f7ff fcb9 	bl	80061b0 <__hi0bits>
 800683e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006842:	6031      	str	r1, [r6, #0]
 8006844:	e7e1      	b.n	800680a <__d2b+0x72>
 8006846:	bf00      	nop
 8006848:	08007da8 	.word	0x08007da8
 800684c:	08007e34 	.word	0x08007e34

08006850 <__ratio>:
 8006850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006854:	4688      	mov	r8, r1
 8006856:	4669      	mov	r1, sp
 8006858:	4681      	mov	r9, r0
 800685a:	f7ff ff49 	bl	80066f0 <__b2d>
 800685e:	460f      	mov	r7, r1
 8006860:	4604      	mov	r4, r0
 8006862:	460d      	mov	r5, r1
 8006864:	4640      	mov	r0, r8
 8006866:	a901      	add	r1, sp, #4
 8006868:	f7ff ff42 	bl	80066f0 <__b2d>
 800686c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006870:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006874:	eba3 0c02 	sub.w	ip, r3, r2
 8006878:	e9dd 3200 	ldrd	r3, r2, [sp]
 800687c:	1a9b      	subs	r3, r3, r2
 800687e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006882:	2b00      	cmp	r3, #0
 8006884:	bfd5      	itete	le
 8006886:	460a      	movle	r2, r1
 8006888:	462a      	movgt	r2, r5
 800688a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800688e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006892:	468b      	mov	fp, r1
 8006894:	bfd8      	it	le
 8006896:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800689a:	465b      	mov	r3, fp
 800689c:	4602      	mov	r2, r0
 800689e:	4639      	mov	r1, r7
 80068a0:	4620      	mov	r0, r4
 80068a2:	f7fa f88f 	bl	80009c4 <__aeabi_ddiv>
 80068a6:	b003      	add	sp, #12
 80068a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080068ac <__copybits>:
 80068ac:	3901      	subs	r1, #1
 80068ae:	b570      	push	{r4, r5, r6, lr}
 80068b0:	1149      	asrs	r1, r1, #5
 80068b2:	6914      	ldr	r4, [r2, #16]
 80068b4:	3101      	adds	r1, #1
 80068b6:	f102 0314 	add.w	r3, r2, #20
 80068ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80068be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80068c2:	1f05      	subs	r5, r0, #4
 80068c4:	42a3      	cmp	r3, r4
 80068c6:	d30c      	bcc.n	80068e2 <__copybits+0x36>
 80068c8:	1aa3      	subs	r3, r4, r2
 80068ca:	3b11      	subs	r3, #17
 80068cc:	f023 0303 	bic.w	r3, r3, #3
 80068d0:	3211      	adds	r2, #17
 80068d2:	42a2      	cmp	r2, r4
 80068d4:	bf88      	it	hi
 80068d6:	2300      	movhi	r3, #0
 80068d8:	4418      	add	r0, r3
 80068da:	2300      	movs	r3, #0
 80068dc:	4288      	cmp	r0, r1
 80068de:	d305      	bcc.n	80068ec <__copybits+0x40>
 80068e0:	bd70      	pop	{r4, r5, r6, pc}
 80068e2:	f853 6b04 	ldr.w	r6, [r3], #4
 80068e6:	f845 6f04 	str.w	r6, [r5, #4]!
 80068ea:	e7eb      	b.n	80068c4 <__copybits+0x18>
 80068ec:	f840 3b04 	str.w	r3, [r0], #4
 80068f0:	e7f4      	b.n	80068dc <__copybits+0x30>

080068f2 <__any_on>:
 80068f2:	f100 0214 	add.w	r2, r0, #20
 80068f6:	6900      	ldr	r0, [r0, #16]
 80068f8:	114b      	asrs	r3, r1, #5
 80068fa:	4298      	cmp	r0, r3
 80068fc:	b510      	push	{r4, lr}
 80068fe:	db11      	blt.n	8006924 <__any_on+0x32>
 8006900:	dd0a      	ble.n	8006918 <__any_on+0x26>
 8006902:	f011 011f 	ands.w	r1, r1, #31
 8006906:	d007      	beq.n	8006918 <__any_on+0x26>
 8006908:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800690c:	fa24 f001 	lsr.w	r0, r4, r1
 8006910:	fa00 f101 	lsl.w	r1, r0, r1
 8006914:	428c      	cmp	r4, r1
 8006916:	d10b      	bne.n	8006930 <__any_on+0x3e>
 8006918:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800691c:	4293      	cmp	r3, r2
 800691e:	d803      	bhi.n	8006928 <__any_on+0x36>
 8006920:	2000      	movs	r0, #0
 8006922:	bd10      	pop	{r4, pc}
 8006924:	4603      	mov	r3, r0
 8006926:	e7f7      	b.n	8006918 <__any_on+0x26>
 8006928:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800692c:	2900      	cmp	r1, #0
 800692e:	d0f5      	beq.n	800691c <__any_on+0x2a>
 8006930:	2001      	movs	r0, #1
 8006932:	e7f6      	b.n	8006922 <__any_on+0x30>

08006934 <_calloc_r>:
 8006934:	b570      	push	{r4, r5, r6, lr}
 8006936:	fba1 5402 	umull	r5, r4, r1, r2
 800693a:	b934      	cbnz	r4, 800694a <_calloc_r+0x16>
 800693c:	4629      	mov	r1, r5
 800693e:	f000 f877 	bl	8006a30 <_malloc_r>
 8006942:	4606      	mov	r6, r0
 8006944:	b928      	cbnz	r0, 8006952 <_calloc_r+0x1e>
 8006946:	4630      	mov	r0, r6
 8006948:	bd70      	pop	{r4, r5, r6, pc}
 800694a:	220c      	movs	r2, #12
 800694c:	6002      	str	r2, [r0, #0]
 800694e:	2600      	movs	r6, #0
 8006950:	e7f9      	b.n	8006946 <_calloc_r+0x12>
 8006952:	462a      	mov	r2, r5
 8006954:	4621      	mov	r1, r4
 8006956:	f7fc fc07 	bl	8003168 <memset>
 800695a:	e7f4      	b.n	8006946 <_calloc_r+0x12>

0800695c <_free_r>:
 800695c:	b538      	push	{r3, r4, r5, lr}
 800695e:	4605      	mov	r5, r0
 8006960:	2900      	cmp	r1, #0
 8006962:	d041      	beq.n	80069e8 <_free_r+0x8c>
 8006964:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006968:	1f0c      	subs	r4, r1, #4
 800696a:	2b00      	cmp	r3, #0
 800696c:	bfb8      	it	lt
 800696e:	18e4      	addlt	r4, r4, r3
 8006970:	f000 fab0 	bl	8006ed4 <__malloc_lock>
 8006974:	4a1d      	ldr	r2, [pc, #116]	; (80069ec <_free_r+0x90>)
 8006976:	6813      	ldr	r3, [r2, #0]
 8006978:	b933      	cbnz	r3, 8006988 <_free_r+0x2c>
 800697a:	6063      	str	r3, [r4, #4]
 800697c:	6014      	str	r4, [r2, #0]
 800697e:	4628      	mov	r0, r5
 8006980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006984:	f000 baac 	b.w	8006ee0 <__malloc_unlock>
 8006988:	42a3      	cmp	r3, r4
 800698a:	d908      	bls.n	800699e <_free_r+0x42>
 800698c:	6820      	ldr	r0, [r4, #0]
 800698e:	1821      	adds	r1, r4, r0
 8006990:	428b      	cmp	r3, r1
 8006992:	bf01      	itttt	eq
 8006994:	6819      	ldreq	r1, [r3, #0]
 8006996:	685b      	ldreq	r3, [r3, #4]
 8006998:	1809      	addeq	r1, r1, r0
 800699a:	6021      	streq	r1, [r4, #0]
 800699c:	e7ed      	b.n	800697a <_free_r+0x1e>
 800699e:	461a      	mov	r2, r3
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	b10b      	cbz	r3, 80069a8 <_free_r+0x4c>
 80069a4:	42a3      	cmp	r3, r4
 80069a6:	d9fa      	bls.n	800699e <_free_r+0x42>
 80069a8:	6811      	ldr	r1, [r2, #0]
 80069aa:	1850      	adds	r0, r2, r1
 80069ac:	42a0      	cmp	r0, r4
 80069ae:	d10b      	bne.n	80069c8 <_free_r+0x6c>
 80069b0:	6820      	ldr	r0, [r4, #0]
 80069b2:	4401      	add	r1, r0
 80069b4:	1850      	adds	r0, r2, r1
 80069b6:	4283      	cmp	r3, r0
 80069b8:	6011      	str	r1, [r2, #0]
 80069ba:	d1e0      	bne.n	800697e <_free_r+0x22>
 80069bc:	6818      	ldr	r0, [r3, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	6053      	str	r3, [r2, #4]
 80069c2:	4401      	add	r1, r0
 80069c4:	6011      	str	r1, [r2, #0]
 80069c6:	e7da      	b.n	800697e <_free_r+0x22>
 80069c8:	d902      	bls.n	80069d0 <_free_r+0x74>
 80069ca:	230c      	movs	r3, #12
 80069cc:	602b      	str	r3, [r5, #0]
 80069ce:	e7d6      	b.n	800697e <_free_r+0x22>
 80069d0:	6820      	ldr	r0, [r4, #0]
 80069d2:	1821      	adds	r1, r4, r0
 80069d4:	428b      	cmp	r3, r1
 80069d6:	bf04      	itt	eq
 80069d8:	6819      	ldreq	r1, [r3, #0]
 80069da:	685b      	ldreq	r3, [r3, #4]
 80069dc:	6063      	str	r3, [r4, #4]
 80069de:	bf04      	itt	eq
 80069e0:	1809      	addeq	r1, r1, r0
 80069e2:	6021      	streq	r1, [r4, #0]
 80069e4:	6054      	str	r4, [r2, #4]
 80069e6:	e7ca      	b.n	800697e <_free_r+0x22>
 80069e8:	bd38      	pop	{r3, r4, r5, pc}
 80069ea:	bf00      	nop
 80069ec:	20006174 	.word	0x20006174

080069f0 <sbrk_aligned>:
 80069f0:	b570      	push	{r4, r5, r6, lr}
 80069f2:	4e0e      	ldr	r6, [pc, #56]	; (8006a2c <sbrk_aligned+0x3c>)
 80069f4:	460c      	mov	r4, r1
 80069f6:	6831      	ldr	r1, [r6, #0]
 80069f8:	4605      	mov	r5, r0
 80069fa:	b911      	cbnz	r1, 8006a02 <sbrk_aligned+0x12>
 80069fc:	f000 f9ee 	bl	8006ddc <_sbrk_r>
 8006a00:	6030      	str	r0, [r6, #0]
 8006a02:	4621      	mov	r1, r4
 8006a04:	4628      	mov	r0, r5
 8006a06:	f000 f9e9 	bl	8006ddc <_sbrk_r>
 8006a0a:	1c43      	adds	r3, r0, #1
 8006a0c:	d00a      	beq.n	8006a24 <sbrk_aligned+0x34>
 8006a0e:	1cc4      	adds	r4, r0, #3
 8006a10:	f024 0403 	bic.w	r4, r4, #3
 8006a14:	42a0      	cmp	r0, r4
 8006a16:	d007      	beq.n	8006a28 <sbrk_aligned+0x38>
 8006a18:	1a21      	subs	r1, r4, r0
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	f000 f9de 	bl	8006ddc <_sbrk_r>
 8006a20:	3001      	adds	r0, #1
 8006a22:	d101      	bne.n	8006a28 <sbrk_aligned+0x38>
 8006a24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006a28:	4620      	mov	r0, r4
 8006a2a:	bd70      	pop	{r4, r5, r6, pc}
 8006a2c:	20006178 	.word	0x20006178

08006a30 <_malloc_r>:
 8006a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a34:	1ccd      	adds	r5, r1, #3
 8006a36:	f025 0503 	bic.w	r5, r5, #3
 8006a3a:	3508      	adds	r5, #8
 8006a3c:	2d0c      	cmp	r5, #12
 8006a3e:	bf38      	it	cc
 8006a40:	250c      	movcc	r5, #12
 8006a42:	2d00      	cmp	r5, #0
 8006a44:	4607      	mov	r7, r0
 8006a46:	db01      	blt.n	8006a4c <_malloc_r+0x1c>
 8006a48:	42a9      	cmp	r1, r5
 8006a4a:	d905      	bls.n	8006a58 <_malloc_r+0x28>
 8006a4c:	230c      	movs	r3, #12
 8006a4e:	603b      	str	r3, [r7, #0]
 8006a50:	2600      	movs	r6, #0
 8006a52:	4630      	mov	r0, r6
 8006a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a58:	4e2e      	ldr	r6, [pc, #184]	; (8006b14 <_malloc_r+0xe4>)
 8006a5a:	f000 fa3b 	bl	8006ed4 <__malloc_lock>
 8006a5e:	6833      	ldr	r3, [r6, #0]
 8006a60:	461c      	mov	r4, r3
 8006a62:	bb34      	cbnz	r4, 8006ab2 <_malloc_r+0x82>
 8006a64:	4629      	mov	r1, r5
 8006a66:	4638      	mov	r0, r7
 8006a68:	f7ff ffc2 	bl	80069f0 <sbrk_aligned>
 8006a6c:	1c43      	adds	r3, r0, #1
 8006a6e:	4604      	mov	r4, r0
 8006a70:	d14d      	bne.n	8006b0e <_malloc_r+0xde>
 8006a72:	6834      	ldr	r4, [r6, #0]
 8006a74:	4626      	mov	r6, r4
 8006a76:	2e00      	cmp	r6, #0
 8006a78:	d140      	bne.n	8006afc <_malloc_r+0xcc>
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	4631      	mov	r1, r6
 8006a7e:	4638      	mov	r0, r7
 8006a80:	eb04 0803 	add.w	r8, r4, r3
 8006a84:	f000 f9aa 	bl	8006ddc <_sbrk_r>
 8006a88:	4580      	cmp	r8, r0
 8006a8a:	d13a      	bne.n	8006b02 <_malloc_r+0xd2>
 8006a8c:	6821      	ldr	r1, [r4, #0]
 8006a8e:	3503      	adds	r5, #3
 8006a90:	1a6d      	subs	r5, r5, r1
 8006a92:	f025 0503 	bic.w	r5, r5, #3
 8006a96:	3508      	adds	r5, #8
 8006a98:	2d0c      	cmp	r5, #12
 8006a9a:	bf38      	it	cc
 8006a9c:	250c      	movcc	r5, #12
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	4638      	mov	r0, r7
 8006aa2:	f7ff ffa5 	bl	80069f0 <sbrk_aligned>
 8006aa6:	3001      	adds	r0, #1
 8006aa8:	d02b      	beq.n	8006b02 <_malloc_r+0xd2>
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	442b      	add	r3, r5
 8006aae:	6023      	str	r3, [r4, #0]
 8006ab0:	e00e      	b.n	8006ad0 <_malloc_r+0xa0>
 8006ab2:	6822      	ldr	r2, [r4, #0]
 8006ab4:	1b52      	subs	r2, r2, r5
 8006ab6:	d41e      	bmi.n	8006af6 <_malloc_r+0xc6>
 8006ab8:	2a0b      	cmp	r2, #11
 8006aba:	d916      	bls.n	8006aea <_malloc_r+0xba>
 8006abc:	1961      	adds	r1, r4, r5
 8006abe:	42a3      	cmp	r3, r4
 8006ac0:	6025      	str	r5, [r4, #0]
 8006ac2:	bf18      	it	ne
 8006ac4:	6059      	strne	r1, [r3, #4]
 8006ac6:	6863      	ldr	r3, [r4, #4]
 8006ac8:	bf08      	it	eq
 8006aca:	6031      	streq	r1, [r6, #0]
 8006acc:	5162      	str	r2, [r4, r5]
 8006ace:	604b      	str	r3, [r1, #4]
 8006ad0:	4638      	mov	r0, r7
 8006ad2:	f104 060b 	add.w	r6, r4, #11
 8006ad6:	f000 fa03 	bl	8006ee0 <__malloc_unlock>
 8006ada:	f026 0607 	bic.w	r6, r6, #7
 8006ade:	1d23      	adds	r3, r4, #4
 8006ae0:	1af2      	subs	r2, r6, r3
 8006ae2:	d0b6      	beq.n	8006a52 <_malloc_r+0x22>
 8006ae4:	1b9b      	subs	r3, r3, r6
 8006ae6:	50a3      	str	r3, [r4, r2]
 8006ae8:	e7b3      	b.n	8006a52 <_malloc_r+0x22>
 8006aea:	6862      	ldr	r2, [r4, #4]
 8006aec:	42a3      	cmp	r3, r4
 8006aee:	bf0c      	ite	eq
 8006af0:	6032      	streq	r2, [r6, #0]
 8006af2:	605a      	strne	r2, [r3, #4]
 8006af4:	e7ec      	b.n	8006ad0 <_malloc_r+0xa0>
 8006af6:	4623      	mov	r3, r4
 8006af8:	6864      	ldr	r4, [r4, #4]
 8006afa:	e7b2      	b.n	8006a62 <_malloc_r+0x32>
 8006afc:	4634      	mov	r4, r6
 8006afe:	6876      	ldr	r6, [r6, #4]
 8006b00:	e7b9      	b.n	8006a76 <_malloc_r+0x46>
 8006b02:	230c      	movs	r3, #12
 8006b04:	603b      	str	r3, [r7, #0]
 8006b06:	4638      	mov	r0, r7
 8006b08:	f000 f9ea 	bl	8006ee0 <__malloc_unlock>
 8006b0c:	e7a1      	b.n	8006a52 <_malloc_r+0x22>
 8006b0e:	6025      	str	r5, [r4, #0]
 8006b10:	e7de      	b.n	8006ad0 <_malloc_r+0xa0>
 8006b12:	bf00      	nop
 8006b14:	20006174 	.word	0x20006174

08006b18 <__ssputs_r>:
 8006b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b1c:	688e      	ldr	r6, [r1, #8]
 8006b1e:	429e      	cmp	r6, r3
 8006b20:	4682      	mov	sl, r0
 8006b22:	460c      	mov	r4, r1
 8006b24:	4690      	mov	r8, r2
 8006b26:	461f      	mov	r7, r3
 8006b28:	d838      	bhi.n	8006b9c <__ssputs_r+0x84>
 8006b2a:	898a      	ldrh	r2, [r1, #12]
 8006b2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b30:	d032      	beq.n	8006b98 <__ssputs_r+0x80>
 8006b32:	6825      	ldr	r5, [r4, #0]
 8006b34:	6909      	ldr	r1, [r1, #16]
 8006b36:	eba5 0901 	sub.w	r9, r5, r1
 8006b3a:	6965      	ldr	r5, [r4, #20]
 8006b3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b44:	3301      	adds	r3, #1
 8006b46:	444b      	add	r3, r9
 8006b48:	106d      	asrs	r5, r5, #1
 8006b4a:	429d      	cmp	r5, r3
 8006b4c:	bf38      	it	cc
 8006b4e:	461d      	movcc	r5, r3
 8006b50:	0553      	lsls	r3, r2, #21
 8006b52:	d531      	bpl.n	8006bb8 <__ssputs_r+0xa0>
 8006b54:	4629      	mov	r1, r5
 8006b56:	f7ff ff6b 	bl	8006a30 <_malloc_r>
 8006b5a:	4606      	mov	r6, r0
 8006b5c:	b950      	cbnz	r0, 8006b74 <__ssputs_r+0x5c>
 8006b5e:	230c      	movs	r3, #12
 8006b60:	f8ca 3000 	str.w	r3, [sl]
 8006b64:	89a3      	ldrh	r3, [r4, #12]
 8006b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b6a:	81a3      	strh	r3, [r4, #12]
 8006b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b74:	6921      	ldr	r1, [r4, #16]
 8006b76:	464a      	mov	r2, r9
 8006b78:	f7ff fa1a 	bl	8005fb0 <memcpy>
 8006b7c:	89a3      	ldrh	r3, [r4, #12]
 8006b7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b86:	81a3      	strh	r3, [r4, #12]
 8006b88:	6126      	str	r6, [r4, #16]
 8006b8a:	6165      	str	r5, [r4, #20]
 8006b8c:	444e      	add	r6, r9
 8006b8e:	eba5 0509 	sub.w	r5, r5, r9
 8006b92:	6026      	str	r6, [r4, #0]
 8006b94:	60a5      	str	r5, [r4, #8]
 8006b96:	463e      	mov	r6, r7
 8006b98:	42be      	cmp	r6, r7
 8006b9a:	d900      	bls.n	8006b9e <__ssputs_r+0x86>
 8006b9c:	463e      	mov	r6, r7
 8006b9e:	6820      	ldr	r0, [r4, #0]
 8006ba0:	4632      	mov	r2, r6
 8006ba2:	4641      	mov	r1, r8
 8006ba4:	f000 f97c 	bl	8006ea0 <memmove>
 8006ba8:	68a3      	ldr	r3, [r4, #8]
 8006baa:	1b9b      	subs	r3, r3, r6
 8006bac:	60a3      	str	r3, [r4, #8]
 8006bae:	6823      	ldr	r3, [r4, #0]
 8006bb0:	4433      	add	r3, r6
 8006bb2:	6023      	str	r3, [r4, #0]
 8006bb4:	2000      	movs	r0, #0
 8006bb6:	e7db      	b.n	8006b70 <__ssputs_r+0x58>
 8006bb8:	462a      	mov	r2, r5
 8006bba:	f000 f997 	bl	8006eec <_realloc_r>
 8006bbe:	4606      	mov	r6, r0
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d1e1      	bne.n	8006b88 <__ssputs_r+0x70>
 8006bc4:	6921      	ldr	r1, [r4, #16]
 8006bc6:	4650      	mov	r0, sl
 8006bc8:	f7ff fec8 	bl	800695c <_free_r>
 8006bcc:	e7c7      	b.n	8006b5e <__ssputs_r+0x46>
	...

08006bd0 <_svfiprintf_r>:
 8006bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd4:	4698      	mov	r8, r3
 8006bd6:	898b      	ldrh	r3, [r1, #12]
 8006bd8:	061b      	lsls	r3, r3, #24
 8006bda:	b09d      	sub	sp, #116	; 0x74
 8006bdc:	4607      	mov	r7, r0
 8006bde:	460d      	mov	r5, r1
 8006be0:	4614      	mov	r4, r2
 8006be2:	d50e      	bpl.n	8006c02 <_svfiprintf_r+0x32>
 8006be4:	690b      	ldr	r3, [r1, #16]
 8006be6:	b963      	cbnz	r3, 8006c02 <_svfiprintf_r+0x32>
 8006be8:	2140      	movs	r1, #64	; 0x40
 8006bea:	f7ff ff21 	bl	8006a30 <_malloc_r>
 8006bee:	6028      	str	r0, [r5, #0]
 8006bf0:	6128      	str	r0, [r5, #16]
 8006bf2:	b920      	cbnz	r0, 8006bfe <_svfiprintf_r+0x2e>
 8006bf4:	230c      	movs	r3, #12
 8006bf6:	603b      	str	r3, [r7, #0]
 8006bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bfc:	e0d1      	b.n	8006da2 <_svfiprintf_r+0x1d2>
 8006bfe:	2340      	movs	r3, #64	; 0x40
 8006c00:	616b      	str	r3, [r5, #20]
 8006c02:	2300      	movs	r3, #0
 8006c04:	9309      	str	r3, [sp, #36]	; 0x24
 8006c06:	2320      	movs	r3, #32
 8006c08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c10:	2330      	movs	r3, #48	; 0x30
 8006c12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006dbc <_svfiprintf_r+0x1ec>
 8006c16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c1a:	f04f 0901 	mov.w	r9, #1
 8006c1e:	4623      	mov	r3, r4
 8006c20:	469a      	mov	sl, r3
 8006c22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c26:	b10a      	cbz	r2, 8006c2c <_svfiprintf_r+0x5c>
 8006c28:	2a25      	cmp	r2, #37	; 0x25
 8006c2a:	d1f9      	bne.n	8006c20 <_svfiprintf_r+0x50>
 8006c2c:	ebba 0b04 	subs.w	fp, sl, r4
 8006c30:	d00b      	beq.n	8006c4a <_svfiprintf_r+0x7a>
 8006c32:	465b      	mov	r3, fp
 8006c34:	4622      	mov	r2, r4
 8006c36:	4629      	mov	r1, r5
 8006c38:	4638      	mov	r0, r7
 8006c3a:	f7ff ff6d 	bl	8006b18 <__ssputs_r>
 8006c3e:	3001      	adds	r0, #1
 8006c40:	f000 80aa 	beq.w	8006d98 <_svfiprintf_r+0x1c8>
 8006c44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c46:	445a      	add	r2, fp
 8006c48:	9209      	str	r2, [sp, #36]	; 0x24
 8006c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 80a2 	beq.w	8006d98 <_svfiprintf_r+0x1c8>
 8006c54:	2300      	movs	r3, #0
 8006c56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c5e:	f10a 0a01 	add.w	sl, sl, #1
 8006c62:	9304      	str	r3, [sp, #16]
 8006c64:	9307      	str	r3, [sp, #28]
 8006c66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c6a:	931a      	str	r3, [sp, #104]	; 0x68
 8006c6c:	4654      	mov	r4, sl
 8006c6e:	2205      	movs	r2, #5
 8006c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c74:	4851      	ldr	r0, [pc, #324]	; (8006dbc <_svfiprintf_r+0x1ec>)
 8006c76:	f7f9 fabb 	bl	80001f0 <memchr>
 8006c7a:	9a04      	ldr	r2, [sp, #16]
 8006c7c:	b9d8      	cbnz	r0, 8006cb6 <_svfiprintf_r+0xe6>
 8006c7e:	06d0      	lsls	r0, r2, #27
 8006c80:	bf44      	itt	mi
 8006c82:	2320      	movmi	r3, #32
 8006c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c88:	0711      	lsls	r1, r2, #28
 8006c8a:	bf44      	itt	mi
 8006c8c:	232b      	movmi	r3, #43	; 0x2b
 8006c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c92:	f89a 3000 	ldrb.w	r3, [sl]
 8006c96:	2b2a      	cmp	r3, #42	; 0x2a
 8006c98:	d015      	beq.n	8006cc6 <_svfiprintf_r+0xf6>
 8006c9a:	9a07      	ldr	r2, [sp, #28]
 8006c9c:	4654      	mov	r4, sl
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	f04f 0c0a 	mov.w	ip, #10
 8006ca4:	4621      	mov	r1, r4
 8006ca6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006caa:	3b30      	subs	r3, #48	; 0x30
 8006cac:	2b09      	cmp	r3, #9
 8006cae:	d94e      	bls.n	8006d4e <_svfiprintf_r+0x17e>
 8006cb0:	b1b0      	cbz	r0, 8006ce0 <_svfiprintf_r+0x110>
 8006cb2:	9207      	str	r2, [sp, #28]
 8006cb4:	e014      	b.n	8006ce0 <_svfiprintf_r+0x110>
 8006cb6:	eba0 0308 	sub.w	r3, r0, r8
 8006cba:	fa09 f303 	lsl.w	r3, r9, r3
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	9304      	str	r3, [sp, #16]
 8006cc2:	46a2      	mov	sl, r4
 8006cc4:	e7d2      	b.n	8006c6c <_svfiprintf_r+0x9c>
 8006cc6:	9b03      	ldr	r3, [sp, #12]
 8006cc8:	1d19      	adds	r1, r3, #4
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	9103      	str	r1, [sp, #12]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	bfbb      	ittet	lt
 8006cd2:	425b      	neglt	r3, r3
 8006cd4:	f042 0202 	orrlt.w	r2, r2, #2
 8006cd8:	9307      	strge	r3, [sp, #28]
 8006cda:	9307      	strlt	r3, [sp, #28]
 8006cdc:	bfb8      	it	lt
 8006cde:	9204      	strlt	r2, [sp, #16]
 8006ce0:	7823      	ldrb	r3, [r4, #0]
 8006ce2:	2b2e      	cmp	r3, #46	; 0x2e
 8006ce4:	d10c      	bne.n	8006d00 <_svfiprintf_r+0x130>
 8006ce6:	7863      	ldrb	r3, [r4, #1]
 8006ce8:	2b2a      	cmp	r3, #42	; 0x2a
 8006cea:	d135      	bne.n	8006d58 <_svfiprintf_r+0x188>
 8006cec:	9b03      	ldr	r3, [sp, #12]
 8006cee:	1d1a      	adds	r2, r3, #4
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	9203      	str	r2, [sp, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	bfb8      	it	lt
 8006cf8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006cfc:	3402      	adds	r4, #2
 8006cfe:	9305      	str	r3, [sp, #20]
 8006d00:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006dc0 <_svfiprintf_r+0x1f0>
 8006d04:	7821      	ldrb	r1, [r4, #0]
 8006d06:	2203      	movs	r2, #3
 8006d08:	4650      	mov	r0, sl
 8006d0a:	f7f9 fa71 	bl	80001f0 <memchr>
 8006d0e:	b140      	cbz	r0, 8006d22 <_svfiprintf_r+0x152>
 8006d10:	2340      	movs	r3, #64	; 0x40
 8006d12:	eba0 000a 	sub.w	r0, r0, sl
 8006d16:	fa03 f000 	lsl.w	r0, r3, r0
 8006d1a:	9b04      	ldr	r3, [sp, #16]
 8006d1c:	4303      	orrs	r3, r0
 8006d1e:	3401      	adds	r4, #1
 8006d20:	9304      	str	r3, [sp, #16]
 8006d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d26:	4827      	ldr	r0, [pc, #156]	; (8006dc4 <_svfiprintf_r+0x1f4>)
 8006d28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d2c:	2206      	movs	r2, #6
 8006d2e:	f7f9 fa5f 	bl	80001f0 <memchr>
 8006d32:	2800      	cmp	r0, #0
 8006d34:	d038      	beq.n	8006da8 <_svfiprintf_r+0x1d8>
 8006d36:	4b24      	ldr	r3, [pc, #144]	; (8006dc8 <_svfiprintf_r+0x1f8>)
 8006d38:	bb1b      	cbnz	r3, 8006d82 <_svfiprintf_r+0x1b2>
 8006d3a:	9b03      	ldr	r3, [sp, #12]
 8006d3c:	3307      	adds	r3, #7
 8006d3e:	f023 0307 	bic.w	r3, r3, #7
 8006d42:	3308      	adds	r3, #8
 8006d44:	9303      	str	r3, [sp, #12]
 8006d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d48:	4433      	add	r3, r6
 8006d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d4c:	e767      	b.n	8006c1e <_svfiprintf_r+0x4e>
 8006d4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d52:	460c      	mov	r4, r1
 8006d54:	2001      	movs	r0, #1
 8006d56:	e7a5      	b.n	8006ca4 <_svfiprintf_r+0xd4>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	3401      	adds	r4, #1
 8006d5c:	9305      	str	r3, [sp, #20]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	f04f 0c0a 	mov.w	ip, #10
 8006d64:	4620      	mov	r0, r4
 8006d66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d6a:	3a30      	subs	r2, #48	; 0x30
 8006d6c:	2a09      	cmp	r2, #9
 8006d6e:	d903      	bls.n	8006d78 <_svfiprintf_r+0x1a8>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0c5      	beq.n	8006d00 <_svfiprintf_r+0x130>
 8006d74:	9105      	str	r1, [sp, #20]
 8006d76:	e7c3      	b.n	8006d00 <_svfiprintf_r+0x130>
 8006d78:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e7f0      	b.n	8006d64 <_svfiprintf_r+0x194>
 8006d82:	ab03      	add	r3, sp, #12
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	462a      	mov	r2, r5
 8006d88:	4b10      	ldr	r3, [pc, #64]	; (8006dcc <_svfiprintf_r+0x1fc>)
 8006d8a:	a904      	add	r1, sp, #16
 8006d8c:	4638      	mov	r0, r7
 8006d8e:	f7fc fa91 	bl	80032b4 <_printf_float>
 8006d92:	1c42      	adds	r2, r0, #1
 8006d94:	4606      	mov	r6, r0
 8006d96:	d1d6      	bne.n	8006d46 <_svfiprintf_r+0x176>
 8006d98:	89ab      	ldrh	r3, [r5, #12]
 8006d9a:	065b      	lsls	r3, r3, #25
 8006d9c:	f53f af2c 	bmi.w	8006bf8 <_svfiprintf_r+0x28>
 8006da0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006da2:	b01d      	add	sp, #116	; 0x74
 8006da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da8:	ab03      	add	r3, sp, #12
 8006daa:	9300      	str	r3, [sp, #0]
 8006dac:	462a      	mov	r2, r5
 8006dae:	4b07      	ldr	r3, [pc, #28]	; (8006dcc <_svfiprintf_r+0x1fc>)
 8006db0:	a904      	add	r1, sp, #16
 8006db2:	4638      	mov	r0, r7
 8006db4:	f7fc fd16 	bl	80037e4 <_printf_i>
 8006db8:	e7eb      	b.n	8006d92 <_svfiprintf_r+0x1c2>
 8006dba:	bf00      	nop
 8006dbc:	08007f8c 	.word	0x08007f8c
 8006dc0:	08007f92 	.word	0x08007f92
 8006dc4:	08007f96 	.word	0x08007f96
 8006dc8:	080032b5 	.word	0x080032b5
 8006dcc:	08006b19 	.word	0x08006b19

08006dd0 <nan>:
 8006dd0:	4901      	ldr	r1, [pc, #4]	; (8006dd8 <nan+0x8>)
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	7ff80000 	.word	0x7ff80000

08006ddc <_sbrk_r>:
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	4d06      	ldr	r5, [pc, #24]	; (8006df8 <_sbrk_r+0x1c>)
 8006de0:	2300      	movs	r3, #0
 8006de2:	4604      	mov	r4, r0
 8006de4:	4608      	mov	r0, r1
 8006de6:	602b      	str	r3, [r5, #0]
 8006de8:	f000 fe1a 	bl	8007a20 <_sbrk>
 8006dec:	1c43      	adds	r3, r0, #1
 8006dee:	d102      	bne.n	8006df6 <_sbrk_r+0x1a>
 8006df0:	682b      	ldr	r3, [r5, #0]
 8006df2:	b103      	cbz	r3, 8006df6 <_sbrk_r+0x1a>
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	bd38      	pop	{r3, r4, r5, pc}
 8006df8:	2000617c 	.word	0x2000617c

08006dfc <strncmp>:
 8006dfc:	b510      	push	{r4, lr}
 8006dfe:	4603      	mov	r3, r0
 8006e00:	b172      	cbz	r2, 8006e20 <strncmp+0x24>
 8006e02:	3901      	subs	r1, #1
 8006e04:	1884      	adds	r4, r0, r2
 8006e06:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006e0a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006e0e:	4290      	cmp	r0, r2
 8006e10:	d101      	bne.n	8006e16 <strncmp+0x1a>
 8006e12:	42a3      	cmp	r3, r4
 8006e14:	d101      	bne.n	8006e1a <strncmp+0x1e>
 8006e16:	1a80      	subs	r0, r0, r2
 8006e18:	bd10      	pop	{r4, pc}
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	d1f3      	bne.n	8006e06 <strncmp+0xa>
 8006e1e:	e7fa      	b.n	8006e16 <strncmp+0x1a>
 8006e20:	4610      	mov	r0, r2
 8006e22:	e7f9      	b.n	8006e18 <strncmp+0x1c>

08006e24 <__ascii_wctomb>:
 8006e24:	4603      	mov	r3, r0
 8006e26:	4608      	mov	r0, r1
 8006e28:	b141      	cbz	r1, 8006e3c <__ascii_wctomb+0x18>
 8006e2a:	2aff      	cmp	r2, #255	; 0xff
 8006e2c:	d904      	bls.n	8006e38 <__ascii_wctomb+0x14>
 8006e2e:	228a      	movs	r2, #138	; 0x8a
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e36:	4770      	bx	lr
 8006e38:	700a      	strb	r2, [r1, #0]
 8006e3a:	2001      	movs	r0, #1
 8006e3c:	4770      	bx	lr
	...

08006e40 <__assert_func>:
 8006e40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e42:	4614      	mov	r4, r2
 8006e44:	461a      	mov	r2, r3
 8006e46:	4b09      	ldr	r3, [pc, #36]	; (8006e6c <__assert_func+0x2c>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4605      	mov	r5, r0
 8006e4c:	68d8      	ldr	r0, [r3, #12]
 8006e4e:	b14c      	cbz	r4, 8006e64 <__assert_func+0x24>
 8006e50:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <__assert_func+0x30>)
 8006e52:	9100      	str	r1, [sp, #0]
 8006e54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e58:	4906      	ldr	r1, [pc, #24]	; (8006e74 <__assert_func+0x34>)
 8006e5a:	462b      	mov	r3, r5
 8006e5c:	f000 f80e 	bl	8006e7c <fiprintf>
 8006e60:	f000 fa8a 	bl	8007378 <abort>
 8006e64:	4b04      	ldr	r3, [pc, #16]	; (8006e78 <__assert_func+0x38>)
 8006e66:	461c      	mov	r4, r3
 8006e68:	e7f3      	b.n	8006e52 <__assert_func+0x12>
 8006e6a:	bf00      	nop
 8006e6c:	20000044 	.word	0x20000044
 8006e70:	08007f9d 	.word	0x08007f9d
 8006e74:	08007faa 	.word	0x08007faa
 8006e78:	08007fd8 	.word	0x08007fd8

08006e7c <fiprintf>:
 8006e7c:	b40e      	push	{r1, r2, r3}
 8006e7e:	b503      	push	{r0, r1, lr}
 8006e80:	4601      	mov	r1, r0
 8006e82:	ab03      	add	r3, sp, #12
 8006e84:	4805      	ldr	r0, [pc, #20]	; (8006e9c <fiprintf+0x20>)
 8006e86:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e8a:	6800      	ldr	r0, [r0, #0]
 8006e8c:	9301      	str	r3, [sp, #4]
 8006e8e:	f000 f883 	bl	8006f98 <_vfiprintf_r>
 8006e92:	b002      	add	sp, #8
 8006e94:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e98:	b003      	add	sp, #12
 8006e9a:	4770      	bx	lr
 8006e9c:	20000044 	.word	0x20000044

08006ea0 <memmove>:
 8006ea0:	4288      	cmp	r0, r1
 8006ea2:	b510      	push	{r4, lr}
 8006ea4:	eb01 0402 	add.w	r4, r1, r2
 8006ea8:	d902      	bls.n	8006eb0 <memmove+0x10>
 8006eaa:	4284      	cmp	r4, r0
 8006eac:	4623      	mov	r3, r4
 8006eae:	d807      	bhi.n	8006ec0 <memmove+0x20>
 8006eb0:	1e43      	subs	r3, r0, #1
 8006eb2:	42a1      	cmp	r1, r4
 8006eb4:	d008      	beq.n	8006ec8 <memmove+0x28>
 8006eb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006eba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ebe:	e7f8      	b.n	8006eb2 <memmove+0x12>
 8006ec0:	4402      	add	r2, r0
 8006ec2:	4601      	mov	r1, r0
 8006ec4:	428a      	cmp	r2, r1
 8006ec6:	d100      	bne.n	8006eca <memmove+0x2a>
 8006ec8:	bd10      	pop	{r4, pc}
 8006eca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ece:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ed2:	e7f7      	b.n	8006ec4 <memmove+0x24>

08006ed4 <__malloc_lock>:
 8006ed4:	4801      	ldr	r0, [pc, #4]	; (8006edc <__malloc_lock+0x8>)
 8006ed6:	f000 bc0b 	b.w	80076f0 <__retarget_lock_acquire_recursive>
 8006eda:	bf00      	nop
 8006edc:	20006180 	.word	0x20006180

08006ee0 <__malloc_unlock>:
 8006ee0:	4801      	ldr	r0, [pc, #4]	; (8006ee8 <__malloc_unlock+0x8>)
 8006ee2:	f000 bc06 	b.w	80076f2 <__retarget_lock_release_recursive>
 8006ee6:	bf00      	nop
 8006ee8:	20006180 	.word	0x20006180

08006eec <_realloc_r>:
 8006eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef0:	4680      	mov	r8, r0
 8006ef2:	4614      	mov	r4, r2
 8006ef4:	460e      	mov	r6, r1
 8006ef6:	b921      	cbnz	r1, 8006f02 <_realloc_r+0x16>
 8006ef8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006efc:	4611      	mov	r1, r2
 8006efe:	f7ff bd97 	b.w	8006a30 <_malloc_r>
 8006f02:	b92a      	cbnz	r2, 8006f10 <_realloc_r+0x24>
 8006f04:	f7ff fd2a 	bl	800695c <_free_r>
 8006f08:	4625      	mov	r5, r4
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f10:	f000 fc56 	bl	80077c0 <_malloc_usable_size_r>
 8006f14:	4284      	cmp	r4, r0
 8006f16:	4607      	mov	r7, r0
 8006f18:	d802      	bhi.n	8006f20 <_realloc_r+0x34>
 8006f1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f1e:	d812      	bhi.n	8006f46 <_realloc_r+0x5a>
 8006f20:	4621      	mov	r1, r4
 8006f22:	4640      	mov	r0, r8
 8006f24:	f7ff fd84 	bl	8006a30 <_malloc_r>
 8006f28:	4605      	mov	r5, r0
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	d0ed      	beq.n	8006f0a <_realloc_r+0x1e>
 8006f2e:	42bc      	cmp	r4, r7
 8006f30:	4622      	mov	r2, r4
 8006f32:	4631      	mov	r1, r6
 8006f34:	bf28      	it	cs
 8006f36:	463a      	movcs	r2, r7
 8006f38:	f7ff f83a 	bl	8005fb0 <memcpy>
 8006f3c:	4631      	mov	r1, r6
 8006f3e:	4640      	mov	r0, r8
 8006f40:	f7ff fd0c 	bl	800695c <_free_r>
 8006f44:	e7e1      	b.n	8006f0a <_realloc_r+0x1e>
 8006f46:	4635      	mov	r5, r6
 8006f48:	e7df      	b.n	8006f0a <_realloc_r+0x1e>

08006f4a <__sfputc_r>:
 8006f4a:	6893      	ldr	r3, [r2, #8]
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	b410      	push	{r4}
 8006f52:	6093      	str	r3, [r2, #8]
 8006f54:	da07      	bge.n	8006f66 <__sfputc_r+0x1c>
 8006f56:	6994      	ldr	r4, [r2, #24]
 8006f58:	42a3      	cmp	r3, r4
 8006f5a:	db01      	blt.n	8006f60 <__sfputc_r+0x16>
 8006f5c:	290a      	cmp	r1, #10
 8006f5e:	d102      	bne.n	8006f66 <__sfputc_r+0x1c>
 8006f60:	bc10      	pop	{r4}
 8006f62:	f000 b949 	b.w	80071f8 <__swbuf_r>
 8006f66:	6813      	ldr	r3, [r2, #0]
 8006f68:	1c58      	adds	r0, r3, #1
 8006f6a:	6010      	str	r0, [r2, #0]
 8006f6c:	7019      	strb	r1, [r3, #0]
 8006f6e:	4608      	mov	r0, r1
 8006f70:	bc10      	pop	{r4}
 8006f72:	4770      	bx	lr

08006f74 <__sfputs_r>:
 8006f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f76:	4606      	mov	r6, r0
 8006f78:	460f      	mov	r7, r1
 8006f7a:	4614      	mov	r4, r2
 8006f7c:	18d5      	adds	r5, r2, r3
 8006f7e:	42ac      	cmp	r4, r5
 8006f80:	d101      	bne.n	8006f86 <__sfputs_r+0x12>
 8006f82:	2000      	movs	r0, #0
 8006f84:	e007      	b.n	8006f96 <__sfputs_r+0x22>
 8006f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f8a:	463a      	mov	r2, r7
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	f7ff ffdc 	bl	8006f4a <__sfputc_r>
 8006f92:	1c43      	adds	r3, r0, #1
 8006f94:	d1f3      	bne.n	8006f7e <__sfputs_r+0xa>
 8006f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006f98 <_vfiprintf_r>:
 8006f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f9c:	460d      	mov	r5, r1
 8006f9e:	b09d      	sub	sp, #116	; 0x74
 8006fa0:	4614      	mov	r4, r2
 8006fa2:	4698      	mov	r8, r3
 8006fa4:	4606      	mov	r6, r0
 8006fa6:	b118      	cbz	r0, 8006fb0 <_vfiprintf_r+0x18>
 8006fa8:	6983      	ldr	r3, [r0, #24]
 8006faa:	b90b      	cbnz	r3, 8006fb0 <_vfiprintf_r+0x18>
 8006fac:	f000 fb02 	bl	80075b4 <__sinit>
 8006fb0:	4b89      	ldr	r3, [pc, #548]	; (80071d8 <_vfiprintf_r+0x240>)
 8006fb2:	429d      	cmp	r5, r3
 8006fb4:	d11b      	bne.n	8006fee <_vfiprintf_r+0x56>
 8006fb6:	6875      	ldr	r5, [r6, #4]
 8006fb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fba:	07d9      	lsls	r1, r3, #31
 8006fbc:	d405      	bmi.n	8006fca <_vfiprintf_r+0x32>
 8006fbe:	89ab      	ldrh	r3, [r5, #12]
 8006fc0:	059a      	lsls	r2, r3, #22
 8006fc2:	d402      	bmi.n	8006fca <_vfiprintf_r+0x32>
 8006fc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fc6:	f000 fb93 	bl	80076f0 <__retarget_lock_acquire_recursive>
 8006fca:	89ab      	ldrh	r3, [r5, #12]
 8006fcc:	071b      	lsls	r3, r3, #28
 8006fce:	d501      	bpl.n	8006fd4 <_vfiprintf_r+0x3c>
 8006fd0:	692b      	ldr	r3, [r5, #16]
 8006fd2:	b9eb      	cbnz	r3, 8007010 <_vfiprintf_r+0x78>
 8006fd4:	4629      	mov	r1, r5
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	f000 f960 	bl	800729c <__swsetup_r>
 8006fdc:	b1c0      	cbz	r0, 8007010 <_vfiprintf_r+0x78>
 8006fde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fe0:	07dc      	lsls	r4, r3, #31
 8006fe2:	d50e      	bpl.n	8007002 <_vfiprintf_r+0x6a>
 8006fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fe8:	b01d      	add	sp, #116	; 0x74
 8006fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fee:	4b7b      	ldr	r3, [pc, #492]	; (80071dc <_vfiprintf_r+0x244>)
 8006ff0:	429d      	cmp	r5, r3
 8006ff2:	d101      	bne.n	8006ff8 <_vfiprintf_r+0x60>
 8006ff4:	68b5      	ldr	r5, [r6, #8]
 8006ff6:	e7df      	b.n	8006fb8 <_vfiprintf_r+0x20>
 8006ff8:	4b79      	ldr	r3, [pc, #484]	; (80071e0 <_vfiprintf_r+0x248>)
 8006ffa:	429d      	cmp	r5, r3
 8006ffc:	bf08      	it	eq
 8006ffe:	68f5      	ldreq	r5, [r6, #12]
 8007000:	e7da      	b.n	8006fb8 <_vfiprintf_r+0x20>
 8007002:	89ab      	ldrh	r3, [r5, #12]
 8007004:	0598      	lsls	r0, r3, #22
 8007006:	d4ed      	bmi.n	8006fe4 <_vfiprintf_r+0x4c>
 8007008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800700a:	f000 fb72 	bl	80076f2 <__retarget_lock_release_recursive>
 800700e:	e7e9      	b.n	8006fe4 <_vfiprintf_r+0x4c>
 8007010:	2300      	movs	r3, #0
 8007012:	9309      	str	r3, [sp, #36]	; 0x24
 8007014:	2320      	movs	r3, #32
 8007016:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800701a:	f8cd 800c 	str.w	r8, [sp, #12]
 800701e:	2330      	movs	r3, #48	; 0x30
 8007020:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80071e4 <_vfiprintf_r+0x24c>
 8007024:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007028:	f04f 0901 	mov.w	r9, #1
 800702c:	4623      	mov	r3, r4
 800702e:	469a      	mov	sl, r3
 8007030:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007034:	b10a      	cbz	r2, 800703a <_vfiprintf_r+0xa2>
 8007036:	2a25      	cmp	r2, #37	; 0x25
 8007038:	d1f9      	bne.n	800702e <_vfiprintf_r+0x96>
 800703a:	ebba 0b04 	subs.w	fp, sl, r4
 800703e:	d00b      	beq.n	8007058 <_vfiprintf_r+0xc0>
 8007040:	465b      	mov	r3, fp
 8007042:	4622      	mov	r2, r4
 8007044:	4629      	mov	r1, r5
 8007046:	4630      	mov	r0, r6
 8007048:	f7ff ff94 	bl	8006f74 <__sfputs_r>
 800704c:	3001      	adds	r0, #1
 800704e:	f000 80aa 	beq.w	80071a6 <_vfiprintf_r+0x20e>
 8007052:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007054:	445a      	add	r2, fp
 8007056:	9209      	str	r2, [sp, #36]	; 0x24
 8007058:	f89a 3000 	ldrb.w	r3, [sl]
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 80a2 	beq.w	80071a6 <_vfiprintf_r+0x20e>
 8007062:	2300      	movs	r3, #0
 8007064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007068:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800706c:	f10a 0a01 	add.w	sl, sl, #1
 8007070:	9304      	str	r3, [sp, #16]
 8007072:	9307      	str	r3, [sp, #28]
 8007074:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007078:	931a      	str	r3, [sp, #104]	; 0x68
 800707a:	4654      	mov	r4, sl
 800707c:	2205      	movs	r2, #5
 800707e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007082:	4858      	ldr	r0, [pc, #352]	; (80071e4 <_vfiprintf_r+0x24c>)
 8007084:	f7f9 f8b4 	bl	80001f0 <memchr>
 8007088:	9a04      	ldr	r2, [sp, #16]
 800708a:	b9d8      	cbnz	r0, 80070c4 <_vfiprintf_r+0x12c>
 800708c:	06d1      	lsls	r1, r2, #27
 800708e:	bf44      	itt	mi
 8007090:	2320      	movmi	r3, #32
 8007092:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007096:	0713      	lsls	r3, r2, #28
 8007098:	bf44      	itt	mi
 800709a:	232b      	movmi	r3, #43	; 0x2b
 800709c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070a0:	f89a 3000 	ldrb.w	r3, [sl]
 80070a4:	2b2a      	cmp	r3, #42	; 0x2a
 80070a6:	d015      	beq.n	80070d4 <_vfiprintf_r+0x13c>
 80070a8:	9a07      	ldr	r2, [sp, #28]
 80070aa:	4654      	mov	r4, sl
 80070ac:	2000      	movs	r0, #0
 80070ae:	f04f 0c0a 	mov.w	ip, #10
 80070b2:	4621      	mov	r1, r4
 80070b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070b8:	3b30      	subs	r3, #48	; 0x30
 80070ba:	2b09      	cmp	r3, #9
 80070bc:	d94e      	bls.n	800715c <_vfiprintf_r+0x1c4>
 80070be:	b1b0      	cbz	r0, 80070ee <_vfiprintf_r+0x156>
 80070c0:	9207      	str	r2, [sp, #28]
 80070c2:	e014      	b.n	80070ee <_vfiprintf_r+0x156>
 80070c4:	eba0 0308 	sub.w	r3, r0, r8
 80070c8:	fa09 f303 	lsl.w	r3, r9, r3
 80070cc:	4313      	orrs	r3, r2
 80070ce:	9304      	str	r3, [sp, #16]
 80070d0:	46a2      	mov	sl, r4
 80070d2:	e7d2      	b.n	800707a <_vfiprintf_r+0xe2>
 80070d4:	9b03      	ldr	r3, [sp, #12]
 80070d6:	1d19      	adds	r1, r3, #4
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	9103      	str	r1, [sp, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	bfbb      	ittet	lt
 80070e0:	425b      	neglt	r3, r3
 80070e2:	f042 0202 	orrlt.w	r2, r2, #2
 80070e6:	9307      	strge	r3, [sp, #28]
 80070e8:	9307      	strlt	r3, [sp, #28]
 80070ea:	bfb8      	it	lt
 80070ec:	9204      	strlt	r2, [sp, #16]
 80070ee:	7823      	ldrb	r3, [r4, #0]
 80070f0:	2b2e      	cmp	r3, #46	; 0x2e
 80070f2:	d10c      	bne.n	800710e <_vfiprintf_r+0x176>
 80070f4:	7863      	ldrb	r3, [r4, #1]
 80070f6:	2b2a      	cmp	r3, #42	; 0x2a
 80070f8:	d135      	bne.n	8007166 <_vfiprintf_r+0x1ce>
 80070fa:	9b03      	ldr	r3, [sp, #12]
 80070fc:	1d1a      	adds	r2, r3, #4
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	9203      	str	r2, [sp, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	bfb8      	it	lt
 8007106:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800710a:	3402      	adds	r4, #2
 800710c:	9305      	str	r3, [sp, #20]
 800710e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80071e8 <_vfiprintf_r+0x250>
 8007112:	7821      	ldrb	r1, [r4, #0]
 8007114:	2203      	movs	r2, #3
 8007116:	4650      	mov	r0, sl
 8007118:	f7f9 f86a 	bl	80001f0 <memchr>
 800711c:	b140      	cbz	r0, 8007130 <_vfiprintf_r+0x198>
 800711e:	2340      	movs	r3, #64	; 0x40
 8007120:	eba0 000a 	sub.w	r0, r0, sl
 8007124:	fa03 f000 	lsl.w	r0, r3, r0
 8007128:	9b04      	ldr	r3, [sp, #16]
 800712a:	4303      	orrs	r3, r0
 800712c:	3401      	adds	r4, #1
 800712e:	9304      	str	r3, [sp, #16]
 8007130:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007134:	482d      	ldr	r0, [pc, #180]	; (80071ec <_vfiprintf_r+0x254>)
 8007136:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800713a:	2206      	movs	r2, #6
 800713c:	f7f9 f858 	bl	80001f0 <memchr>
 8007140:	2800      	cmp	r0, #0
 8007142:	d03f      	beq.n	80071c4 <_vfiprintf_r+0x22c>
 8007144:	4b2a      	ldr	r3, [pc, #168]	; (80071f0 <_vfiprintf_r+0x258>)
 8007146:	bb1b      	cbnz	r3, 8007190 <_vfiprintf_r+0x1f8>
 8007148:	9b03      	ldr	r3, [sp, #12]
 800714a:	3307      	adds	r3, #7
 800714c:	f023 0307 	bic.w	r3, r3, #7
 8007150:	3308      	adds	r3, #8
 8007152:	9303      	str	r3, [sp, #12]
 8007154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007156:	443b      	add	r3, r7
 8007158:	9309      	str	r3, [sp, #36]	; 0x24
 800715a:	e767      	b.n	800702c <_vfiprintf_r+0x94>
 800715c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007160:	460c      	mov	r4, r1
 8007162:	2001      	movs	r0, #1
 8007164:	e7a5      	b.n	80070b2 <_vfiprintf_r+0x11a>
 8007166:	2300      	movs	r3, #0
 8007168:	3401      	adds	r4, #1
 800716a:	9305      	str	r3, [sp, #20]
 800716c:	4619      	mov	r1, r3
 800716e:	f04f 0c0a 	mov.w	ip, #10
 8007172:	4620      	mov	r0, r4
 8007174:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007178:	3a30      	subs	r2, #48	; 0x30
 800717a:	2a09      	cmp	r2, #9
 800717c:	d903      	bls.n	8007186 <_vfiprintf_r+0x1ee>
 800717e:	2b00      	cmp	r3, #0
 8007180:	d0c5      	beq.n	800710e <_vfiprintf_r+0x176>
 8007182:	9105      	str	r1, [sp, #20]
 8007184:	e7c3      	b.n	800710e <_vfiprintf_r+0x176>
 8007186:	fb0c 2101 	mla	r1, ip, r1, r2
 800718a:	4604      	mov	r4, r0
 800718c:	2301      	movs	r3, #1
 800718e:	e7f0      	b.n	8007172 <_vfiprintf_r+0x1da>
 8007190:	ab03      	add	r3, sp, #12
 8007192:	9300      	str	r3, [sp, #0]
 8007194:	462a      	mov	r2, r5
 8007196:	4b17      	ldr	r3, [pc, #92]	; (80071f4 <_vfiprintf_r+0x25c>)
 8007198:	a904      	add	r1, sp, #16
 800719a:	4630      	mov	r0, r6
 800719c:	f7fc f88a 	bl	80032b4 <_printf_float>
 80071a0:	4607      	mov	r7, r0
 80071a2:	1c78      	adds	r0, r7, #1
 80071a4:	d1d6      	bne.n	8007154 <_vfiprintf_r+0x1bc>
 80071a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071a8:	07d9      	lsls	r1, r3, #31
 80071aa:	d405      	bmi.n	80071b8 <_vfiprintf_r+0x220>
 80071ac:	89ab      	ldrh	r3, [r5, #12]
 80071ae:	059a      	lsls	r2, r3, #22
 80071b0:	d402      	bmi.n	80071b8 <_vfiprintf_r+0x220>
 80071b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071b4:	f000 fa9d 	bl	80076f2 <__retarget_lock_release_recursive>
 80071b8:	89ab      	ldrh	r3, [r5, #12]
 80071ba:	065b      	lsls	r3, r3, #25
 80071bc:	f53f af12 	bmi.w	8006fe4 <_vfiprintf_r+0x4c>
 80071c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071c2:	e711      	b.n	8006fe8 <_vfiprintf_r+0x50>
 80071c4:	ab03      	add	r3, sp, #12
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	462a      	mov	r2, r5
 80071ca:	4b0a      	ldr	r3, [pc, #40]	; (80071f4 <_vfiprintf_r+0x25c>)
 80071cc:	a904      	add	r1, sp, #16
 80071ce:	4630      	mov	r0, r6
 80071d0:	f7fc fb08 	bl	80037e4 <_printf_i>
 80071d4:	e7e4      	b.n	80071a0 <_vfiprintf_r+0x208>
 80071d6:	bf00      	nop
 80071d8:	08007ffc 	.word	0x08007ffc
 80071dc:	0800801c 	.word	0x0800801c
 80071e0:	08007fdc 	.word	0x08007fdc
 80071e4:	08007f8c 	.word	0x08007f8c
 80071e8:	08007f92 	.word	0x08007f92
 80071ec:	08007f96 	.word	0x08007f96
 80071f0:	080032b5 	.word	0x080032b5
 80071f4:	08006f75 	.word	0x08006f75

080071f8 <__swbuf_r>:
 80071f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fa:	460e      	mov	r6, r1
 80071fc:	4614      	mov	r4, r2
 80071fe:	4605      	mov	r5, r0
 8007200:	b118      	cbz	r0, 800720a <__swbuf_r+0x12>
 8007202:	6983      	ldr	r3, [r0, #24]
 8007204:	b90b      	cbnz	r3, 800720a <__swbuf_r+0x12>
 8007206:	f000 f9d5 	bl	80075b4 <__sinit>
 800720a:	4b21      	ldr	r3, [pc, #132]	; (8007290 <__swbuf_r+0x98>)
 800720c:	429c      	cmp	r4, r3
 800720e:	d12b      	bne.n	8007268 <__swbuf_r+0x70>
 8007210:	686c      	ldr	r4, [r5, #4]
 8007212:	69a3      	ldr	r3, [r4, #24]
 8007214:	60a3      	str	r3, [r4, #8]
 8007216:	89a3      	ldrh	r3, [r4, #12]
 8007218:	071a      	lsls	r2, r3, #28
 800721a:	d52f      	bpl.n	800727c <__swbuf_r+0x84>
 800721c:	6923      	ldr	r3, [r4, #16]
 800721e:	b36b      	cbz	r3, 800727c <__swbuf_r+0x84>
 8007220:	6923      	ldr	r3, [r4, #16]
 8007222:	6820      	ldr	r0, [r4, #0]
 8007224:	1ac0      	subs	r0, r0, r3
 8007226:	6963      	ldr	r3, [r4, #20]
 8007228:	b2f6      	uxtb	r6, r6
 800722a:	4283      	cmp	r3, r0
 800722c:	4637      	mov	r7, r6
 800722e:	dc04      	bgt.n	800723a <__swbuf_r+0x42>
 8007230:	4621      	mov	r1, r4
 8007232:	4628      	mov	r0, r5
 8007234:	f000 f92a 	bl	800748c <_fflush_r>
 8007238:	bb30      	cbnz	r0, 8007288 <__swbuf_r+0x90>
 800723a:	68a3      	ldr	r3, [r4, #8]
 800723c:	3b01      	subs	r3, #1
 800723e:	60a3      	str	r3, [r4, #8]
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	1c5a      	adds	r2, r3, #1
 8007244:	6022      	str	r2, [r4, #0]
 8007246:	701e      	strb	r6, [r3, #0]
 8007248:	6963      	ldr	r3, [r4, #20]
 800724a:	3001      	adds	r0, #1
 800724c:	4283      	cmp	r3, r0
 800724e:	d004      	beq.n	800725a <__swbuf_r+0x62>
 8007250:	89a3      	ldrh	r3, [r4, #12]
 8007252:	07db      	lsls	r3, r3, #31
 8007254:	d506      	bpl.n	8007264 <__swbuf_r+0x6c>
 8007256:	2e0a      	cmp	r6, #10
 8007258:	d104      	bne.n	8007264 <__swbuf_r+0x6c>
 800725a:	4621      	mov	r1, r4
 800725c:	4628      	mov	r0, r5
 800725e:	f000 f915 	bl	800748c <_fflush_r>
 8007262:	b988      	cbnz	r0, 8007288 <__swbuf_r+0x90>
 8007264:	4638      	mov	r0, r7
 8007266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007268:	4b0a      	ldr	r3, [pc, #40]	; (8007294 <__swbuf_r+0x9c>)
 800726a:	429c      	cmp	r4, r3
 800726c:	d101      	bne.n	8007272 <__swbuf_r+0x7a>
 800726e:	68ac      	ldr	r4, [r5, #8]
 8007270:	e7cf      	b.n	8007212 <__swbuf_r+0x1a>
 8007272:	4b09      	ldr	r3, [pc, #36]	; (8007298 <__swbuf_r+0xa0>)
 8007274:	429c      	cmp	r4, r3
 8007276:	bf08      	it	eq
 8007278:	68ec      	ldreq	r4, [r5, #12]
 800727a:	e7ca      	b.n	8007212 <__swbuf_r+0x1a>
 800727c:	4621      	mov	r1, r4
 800727e:	4628      	mov	r0, r5
 8007280:	f000 f80c 	bl	800729c <__swsetup_r>
 8007284:	2800      	cmp	r0, #0
 8007286:	d0cb      	beq.n	8007220 <__swbuf_r+0x28>
 8007288:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800728c:	e7ea      	b.n	8007264 <__swbuf_r+0x6c>
 800728e:	bf00      	nop
 8007290:	08007ffc 	.word	0x08007ffc
 8007294:	0800801c 	.word	0x0800801c
 8007298:	08007fdc 	.word	0x08007fdc

0800729c <__swsetup_r>:
 800729c:	4b32      	ldr	r3, [pc, #200]	; (8007368 <__swsetup_r+0xcc>)
 800729e:	b570      	push	{r4, r5, r6, lr}
 80072a0:	681d      	ldr	r5, [r3, #0]
 80072a2:	4606      	mov	r6, r0
 80072a4:	460c      	mov	r4, r1
 80072a6:	b125      	cbz	r5, 80072b2 <__swsetup_r+0x16>
 80072a8:	69ab      	ldr	r3, [r5, #24]
 80072aa:	b913      	cbnz	r3, 80072b2 <__swsetup_r+0x16>
 80072ac:	4628      	mov	r0, r5
 80072ae:	f000 f981 	bl	80075b4 <__sinit>
 80072b2:	4b2e      	ldr	r3, [pc, #184]	; (800736c <__swsetup_r+0xd0>)
 80072b4:	429c      	cmp	r4, r3
 80072b6:	d10f      	bne.n	80072d8 <__swsetup_r+0x3c>
 80072b8:	686c      	ldr	r4, [r5, #4]
 80072ba:	89a3      	ldrh	r3, [r4, #12]
 80072bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072c0:	0719      	lsls	r1, r3, #28
 80072c2:	d42c      	bmi.n	800731e <__swsetup_r+0x82>
 80072c4:	06dd      	lsls	r5, r3, #27
 80072c6:	d411      	bmi.n	80072ec <__swsetup_r+0x50>
 80072c8:	2309      	movs	r3, #9
 80072ca:	6033      	str	r3, [r6, #0]
 80072cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80072d0:	81a3      	strh	r3, [r4, #12]
 80072d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072d6:	e03e      	b.n	8007356 <__swsetup_r+0xba>
 80072d8:	4b25      	ldr	r3, [pc, #148]	; (8007370 <__swsetup_r+0xd4>)
 80072da:	429c      	cmp	r4, r3
 80072dc:	d101      	bne.n	80072e2 <__swsetup_r+0x46>
 80072de:	68ac      	ldr	r4, [r5, #8]
 80072e0:	e7eb      	b.n	80072ba <__swsetup_r+0x1e>
 80072e2:	4b24      	ldr	r3, [pc, #144]	; (8007374 <__swsetup_r+0xd8>)
 80072e4:	429c      	cmp	r4, r3
 80072e6:	bf08      	it	eq
 80072e8:	68ec      	ldreq	r4, [r5, #12]
 80072ea:	e7e6      	b.n	80072ba <__swsetup_r+0x1e>
 80072ec:	0758      	lsls	r0, r3, #29
 80072ee:	d512      	bpl.n	8007316 <__swsetup_r+0x7a>
 80072f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072f2:	b141      	cbz	r1, 8007306 <__swsetup_r+0x6a>
 80072f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072f8:	4299      	cmp	r1, r3
 80072fa:	d002      	beq.n	8007302 <__swsetup_r+0x66>
 80072fc:	4630      	mov	r0, r6
 80072fe:	f7ff fb2d 	bl	800695c <_free_r>
 8007302:	2300      	movs	r3, #0
 8007304:	6363      	str	r3, [r4, #52]	; 0x34
 8007306:	89a3      	ldrh	r3, [r4, #12]
 8007308:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800730c:	81a3      	strh	r3, [r4, #12]
 800730e:	2300      	movs	r3, #0
 8007310:	6063      	str	r3, [r4, #4]
 8007312:	6923      	ldr	r3, [r4, #16]
 8007314:	6023      	str	r3, [r4, #0]
 8007316:	89a3      	ldrh	r3, [r4, #12]
 8007318:	f043 0308 	orr.w	r3, r3, #8
 800731c:	81a3      	strh	r3, [r4, #12]
 800731e:	6923      	ldr	r3, [r4, #16]
 8007320:	b94b      	cbnz	r3, 8007336 <__swsetup_r+0x9a>
 8007322:	89a3      	ldrh	r3, [r4, #12]
 8007324:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800732c:	d003      	beq.n	8007336 <__swsetup_r+0x9a>
 800732e:	4621      	mov	r1, r4
 8007330:	4630      	mov	r0, r6
 8007332:	f000 fa05 	bl	8007740 <__smakebuf_r>
 8007336:	89a0      	ldrh	r0, [r4, #12]
 8007338:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800733c:	f010 0301 	ands.w	r3, r0, #1
 8007340:	d00a      	beq.n	8007358 <__swsetup_r+0xbc>
 8007342:	2300      	movs	r3, #0
 8007344:	60a3      	str	r3, [r4, #8]
 8007346:	6963      	ldr	r3, [r4, #20]
 8007348:	425b      	negs	r3, r3
 800734a:	61a3      	str	r3, [r4, #24]
 800734c:	6923      	ldr	r3, [r4, #16]
 800734e:	b943      	cbnz	r3, 8007362 <__swsetup_r+0xc6>
 8007350:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007354:	d1ba      	bne.n	80072cc <__swsetup_r+0x30>
 8007356:	bd70      	pop	{r4, r5, r6, pc}
 8007358:	0781      	lsls	r1, r0, #30
 800735a:	bf58      	it	pl
 800735c:	6963      	ldrpl	r3, [r4, #20]
 800735e:	60a3      	str	r3, [r4, #8]
 8007360:	e7f4      	b.n	800734c <__swsetup_r+0xb0>
 8007362:	2000      	movs	r0, #0
 8007364:	e7f7      	b.n	8007356 <__swsetup_r+0xba>
 8007366:	bf00      	nop
 8007368:	20000044 	.word	0x20000044
 800736c:	08007ffc 	.word	0x08007ffc
 8007370:	0800801c 	.word	0x0800801c
 8007374:	08007fdc 	.word	0x08007fdc

08007378 <abort>:
 8007378:	b508      	push	{r3, lr}
 800737a:	2006      	movs	r0, #6
 800737c:	f000 fa50 	bl	8007820 <raise>
 8007380:	2001      	movs	r0, #1
 8007382:	f000 fb63 	bl	8007a4c <_exit>
	...

08007388 <__sflush_r>:
 8007388:	898a      	ldrh	r2, [r1, #12]
 800738a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738c:	4605      	mov	r5, r0
 800738e:	0710      	lsls	r0, r2, #28
 8007390:	460c      	mov	r4, r1
 8007392:	d457      	bmi.n	8007444 <__sflush_r+0xbc>
 8007394:	684b      	ldr	r3, [r1, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	dc04      	bgt.n	80073a4 <__sflush_r+0x1c>
 800739a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800739c:	2b00      	cmp	r3, #0
 800739e:	dc01      	bgt.n	80073a4 <__sflush_r+0x1c>
 80073a0:	2000      	movs	r0, #0
 80073a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073a6:	2e00      	cmp	r6, #0
 80073a8:	d0fa      	beq.n	80073a0 <__sflush_r+0x18>
 80073aa:	2300      	movs	r3, #0
 80073ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80073b0:	682f      	ldr	r7, [r5, #0]
 80073b2:	602b      	str	r3, [r5, #0]
 80073b4:	d032      	beq.n	800741c <__sflush_r+0x94>
 80073b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80073b8:	89a3      	ldrh	r3, [r4, #12]
 80073ba:	075a      	lsls	r2, r3, #29
 80073bc:	d505      	bpl.n	80073ca <__sflush_r+0x42>
 80073be:	6863      	ldr	r3, [r4, #4]
 80073c0:	1ac0      	subs	r0, r0, r3
 80073c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073c4:	b10b      	cbz	r3, 80073ca <__sflush_r+0x42>
 80073c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073c8:	1ac0      	subs	r0, r0, r3
 80073ca:	2300      	movs	r3, #0
 80073cc:	4602      	mov	r2, r0
 80073ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073d0:	6a21      	ldr	r1, [r4, #32]
 80073d2:	4628      	mov	r0, r5
 80073d4:	47b0      	blx	r6
 80073d6:	1c43      	adds	r3, r0, #1
 80073d8:	89a3      	ldrh	r3, [r4, #12]
 80073da:	d106      	bne.n	80073ea <__sflush_r+0x62>
 80073dc:	6829      	ldr	r1, [r5, #0]
 80073de:	291d      	cmp	r1, #29
 80073e0:	d82c      	bhi.n	800743c <__sflush_r+0xb4>
 80073e2:	4a29      	ldr	r2, [pc, #164]	; (8007488 <__sflush_r+0x100>)
 80073e4:	40ca      	lsrs	r2, r1
 80073e6:	07d6      	lsls	r6, r2, #31
 80073e8:	d528      	bpl.n	800743c <__sflush_r+0xb4>
 80073ea:	2200      	movs	r2, #0
 80073ec:	6062      	str	r2, [r4, #4]
 80073ee:	04d9      	lsls	r1, r3, #19
 80073f0:	6922      	ldr	r2, [r4, #16]
 80073f2:	6022      	str	r2, [r4, #0]
 80073f4:	d504      	bpl.n	8007400 <__sflush_r+0x78>
 80073f6:	1c42      	adds	r2, r0, #1
 80073f8:	d101      	bne.n	80073fe <__sflush_r+0x76>
 80073fa:	682b      	ldr	r3, [r5, #0]
 80073fc:	b903      	cbnz	r3, 8007400 <__sflush_r+0x78>
 80073fe:	6560      	str	r0, [r4, #84]	; 0x54
 8007400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007402:	602f      	str	r7, [r5, #0]
 8007404:	2900      	cmp	r1, #0
 8007406:	d0cb      	beq.n	80073a0 <__sflush_r+0x18>
 8007408:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800740c:	4299      	cmp	r1, r3
 800740e:	d002      	beq.n	8007416 <__sflush_r+0x8e>
 8007410:	4628      	mov	r0, r5
 8007412:	f7ff faa3 	bl	800695c <_free_r>
 8007416:	2000      	movs	r0, #0
 8007418:	6360      	str	r0, [r4, #52]	; 0x34
 800741a:	e7c2      	b.n	80073a2 <__sflush_r+0x1a>
 800741c:	6a21      	ldr	r1, [r4, #32]
 800741e:	2301      	movs	r3, #1
 8007420:	4628      	mov	r0, r5
 8007422:	47b0      	blx	r6
 8007424:	1c41      	adds	r1, r0, #1
 8007426:	d1c7      	bne.n	80073b8 <__sflush_r+0x30>
 8007428:	682b      	ldr	r3, [r5, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d0c4      	beq.n	80073b8 <__sflush_r+0x30>
 800742e:	2b1d      	cmp	r3, #29
 8007430:	d001      	beq.n	8007436 <__sflush_r+0xae>
 8007432:	2b16      	cmp	r3, #22
 8007434:	d101      	bne.n	800743a <__sflush_r+0xb2>
 8007436:	602f      	str	r7, [r5, #0]
 8007438:	e7b2      	b.n	80073a0 <__sflush_r+0x18>
 800743a:	89a3      	ldrh	r3, [r4, #12]
 800743c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007440:	81a3      	strh	r3, [r4, #12]
 8007442:	e7ae      	b.n	80073a2 <__sflush_r+0x1a>
 8007444:	690f      	ldr	r7, [r1, #16]
 8007446:	2f00      	cmp	r7, #0
 8007448:	d0aa      	beq.n	80073a0 <__sflush_r+0x18>
 800744a:	0793      	lsls	r3, r2, #30
 800744c:	680e      	ldr	r6, [r1, #0]
 800744e:	bf08      	it	eq
 8007450:	694b      	ldreq	r3, [r1, #20]
 8007452:	600f      	str	r7, [r1, #0]
 8007454:	bf18      	it	ne
 8007456:	2300      	movne	r3, #0
 8007458:	1bf6      	subs	r6, r6, r7
 800745a:	608b      	str	r3, [r1, #8]
 800745c:	2e00      	cmp	r6, #0
 800745e:	dd9f      	ble.n	80073a0 <__sflush_r+0x18>
 8007460:	6a21      	ldr	r1, [r4, #32]
 8007462:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007466:	4633      	mov	r3, r6
 8007468:	463a      	mov	r2, r7
 800746a:	4628      	mov	r0, r5
 800746c:	47e0      	blx	ip
 800746e:	2800      	cmp	r0, #0
 8007470:	dc06      	bgt.n	8007480 <__sflush_r+0xf8>
 8007472:	89a3      	ldrh	r3, [r4, #12]
 8007474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007478:	81a3      	strh	r3, [r4, #12]
 800747a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800747e:	e790      	b.n	80073a2 <__sflush_r+0x1a>
 8007480:	4407      	add	r7, r0
 8007482:	1a36      	subs	r6, r6, r0
 8007484:	e7ea      	b.n	800745c <__sflush_r+0xd4>
 8007486:	bf00      	nop
 8007488:	20400001 	.word	0x20400001

0800748c <_fflush_r>:
 800748c:	b538      	push	{r3, r4, r5, lr}
 800748e:	690b      	ldr	r3, [r1, #16]
 8007490:	4605      	mov	r5, r0
 8007492:	460c      	mov	r4, r1
 8007494:	b913      	cbnz	r3, 800749c <_fflush_r+0x10>
 8007496:	2500      	movs	r5, #0
 8007498:	4628      	mov	r0, r5
 800749a:	bd38      	pop	{r3, r4, r5, pc}
 800749c:	b118      	cbz	r0, 80074a6 <_fflush_r+0x1a>
 800749e:	6983      	ldr	r3, [r0, #24]
 80074a0:	b90b      	cbnz	r3, 80074a6 <_fflush_r+0x1a>
 80074a2:	f000 f887 	bl	80075b4 <__sinit>
 80074a6:	4b14      	ldr	r3, [pc, #80]	; (80074f8 <_fflush_r+0x6c>)
 80074a8:	429c      	cmp	r4, r3
 80074aa:	d11b      	bne.n	80074e4 <_fflush_r+0x58>
 80074ac:	686c      	ldr	r4, [r5, #4]
 80074ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d0ef      	beq.n	8007496 <_fflush_r+0xa>
 80074b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80074b8:	07d0      	lsls	r0, r2, #31
 80074ba:	d404      	bmi.n	80074c6 <_fflush_r+0x3a>
 80074bc:	0599      	lsls	r1, r3, #22
 80074be:	d402      	bmi.n	80074c6 <_fflush_r+0x3a>
 80074c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074c2:	f000 f915 	bl	80076f0 <__retarget_lock_acquire_recursive>
 80074c6:	4628      	mov	r0, r5
 80074c8:	4621      	mov	r1, r4
 80074ca:	f7ff ff5d 	bl	8007388 <__sflush_r>
 80074ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074d0:	07da      	lsls	r2, r3, #31
 80074d2:	4605      	mov	r5, r0
 80074d4:	d4e0      	bmi.n	8007498 <_fflush_r+0xc>
 80074d6:	89a3      	ldrh	r3, [r4, #12]
 80074d8:	059b      	lsls	r3, r3, #22
 80074da:	d4dd      	bmi.n	8007498 <_fflush_r+0xc>
 80074dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074de:	f000 f908 	bl	80076f2 <__retarget_lock_release_recursive>
 80074e2:	e7d9      	b.n	8007498 <_fflush_r+0xc>
 80074e4:	4b05      	ldr	r3, [pc, #20]	; (80074fc <_fflush_r+0x70>)
 80074e6:	429c      	cmp	r4, r3
 80074e8:	d101      	bne.n	80074ee <_fflush_r+0x62>
 80074ea:	68ac      	ldr	r4, [r5, #8]
 80074ec:	e7df      	b.n	80074ae <_fflush_r+0x22>
 80074ee:	4b04      	ldr	r3, [pc, #16]	; (8007500 <_fflush_r+0x74>)
 80074f0:	429c      	cmp	r4, r3
 80074f2:	bf08      	it	eq
 80074f4:	68ec      	ldreq	r4, [r5, #12]
 80074f6:	e7da      	b.n	80074ae <_fflush_r+0x22>
 80074f8:	08007ffc 	.word	0x08007ffc
 80074fc:	0800801c 	.word	0x0800801c
 8007500:	08007fdc 	.word	0x08007fdc

08007504 <std>:
 8007504:	2300      	movs	r3, #0
 8007506:	b510      	push	{r4, lr}
 8007508:	4604      	mov	r4, r0
 800750a:	e9c0 3300 	strd	r3, r3, [r0]
 800750e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007512:	6083      	str	r3, [r0, #8]
 8007514:	8181      	strh	r1, [r0, #12]
 8007516:	6643      	str	r3, [r0, #100]	; 0x64
 8007518:	81c2      	strh	r2, [r0, #14]
 800751a:	6183      	str	r3, [r0, #24]
 800751c:	4619      	mov	r1, r3
 800751e:	2208      	movs	r2, #8
 8007520:	305c      	adds	r0, #92	; 0x5c
 8007522:	f7fb fe21 	bl	8003168 <memset>
 8007526:	4b05      	ldr	r3, [pc, #20]	; (800753c <std+0x38>)
 8007528:	6263      	str	r3, [r4, #36]	; 0x24
 800752a:	4b05      	ldr	r3, [pc, #20]	; (8007540 <std+0x3c>)
 800752c:	62a3      	str	r3, [r4, #40]	; 0x28
 800752e:	4b05      	ldr	r3, [pc, #20]	; (8007544 <std+0x40>)
 8007530:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007532:	4b05      	ldr	r3, [pc, #20]	; (8007548 <std+0x44>)
 8007534:	6224      	str	r4, [r4, #32]
 8007536:	6323      	str	r3, [r4, #48]	; 0x30
 8007538:	bd10      	pop	{r4, pc}
 800753a:	bf00      	nop
 800753c:	08007859 	.word	0x08007859
 8007540:	0800787b 	.word	0x0800787b
 8007544:	080078b3 	.word	0x080078b3
 8007548:	080078d7 	.word	0x080078d7

0800754c <_cleanup_r>:
 800754c:	4901      	ldr	r1, [pc, #4]	; (8007554 <_cleanup_r+0x8>)
 800754e:	f000 b8af 	b.w	80076b0 <_fwalk_reent>
 8007552:	bf00      	nop
 8007554:	0800748d 	.word	0x0800748d

08007558 <__sfmoreglue>:
 8007558:	b570      	push	{r4, r5, r6, lr}
 800755a:	2268      	movs	r2, #104	; 0x68
 800755c:	1e4d      	subs	r5, r1, #1
 800755e:	4355      	muls	r5, r2
 8007560:	460e      	mov	r6, r1
 8007562:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007566:	f7ff fa63 	bl	8006a30 <_malloc_r>
 800756a:	4604      	mov	r4, r0
 800756c:	b140      	cbz	r0, 8007580 <__sfmoreglue+0x28>
 800756e:	2100      	movs	r1, #0
 8007570:	e9c0 1600 	strd	r1, r6, [r0]
 8007574:	300c      	adds	r0, #12
 8007576:	60a0      	str	r0, [r4, #8]
 8007578:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800757c:	f7fb fdf4 	bl	8003168 <memset>
 8007580:	4620      	mov	r0, r4
 8007582:	bd70      	pop	{r4, r5, r6, pc}

08007584 <__sfp_lock_acquire>:
 8007584:	4801      	ldr	r0, [pc, #4]	; (800758c <__sfp_lock_acquire+0x8>)
 8007586:	f000 b8b3 	b.w	80076f0 <__retarget_lock_acquire_recursive>
 800758a:	bf00      	nop
 800758c:	20006181 	.word	0x20006181

08007590 <__sfp_lock_release>:
 8007590:	4801      	ldr	r0, [pc, #4]	; (8007598 <__sfp_lock_release+0x8>)
 8007592:	f000 b8ae 	b.w	80076f2 <__retarget_lock_release_recursive>
 8007596:	bf00      	nop
 8007598:	20006181 	.word	0x20006181

0800759c <__sinit_lock_acquire>:
 800759c:	4801      	ldr	r0, [pc, #4]	; (80075a4 <__sinit_lock_acquire+0x8>)
 800759e:	f000 b8a7 	b.w	80076f0 <__retarget_lock_acquire_recursive>
 80075a2:	bf00      	nop
 80075a4:	20006182 	.word	0x20006182

080075a8 <__sinit_lock_release>:
 80075a8:	4801      	ldr	r0, [pc, #4]	; (80075b0 <__sinit_lock_release+0x8>)
 80075aa:	f000 b8a2 	b.w	80076f2 <__retarget_lock_release_recursive>
 80075ae:	bf00      	nop
 80075b0:	20006182 	.word	0x20006182

080075b4 <__sinit>:
 80075b4:	b510      	push	{r4, lr}
 80075b6:	4604      	mov	r4, r0
 80075b8:	f7ff fff0 	bl	800759c <__sinit_lock_acquire>
 80075bc:	69a3      	ldr	r3, [r4, #24]
 80075be:	b11b      	cbz	r3, 80075c8 <__sinit+0x14>
 80075c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075c4:	f7ff bff0 	b.w	80075a8 <__sinit_lock_release>
 80075c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80075cc:	6523      	str	r3, [r4, #80]	; 0x50
 80075ce:	4b13      	ldr	r3, [pc, #76]	; (800761c <__sinit+0x68>)
 80075d0:	4a13      	ldr	r2, [pc, #76]	; (8007620 <__sinit+0x6c>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80075d6:	42a3      	cmp	r3, r4
 80075d8:	bf04      	itt	eq
 80075da:	2301      	moveq	r3, #1
 80075dc:	61a3      	streq	r3, [r4, #24]
 80075de:	4620      	mov	r0, r4
 80075e0:	f000 f820 	bl	8007624 <__sfp>
 80075e4:	6060      	str	r0, [r4, #4]
 80075e6:	4620      	mov	r0, r4
 80075e8:	f000 f81c 	bl	8007624 <__sfp>
 80075ec:	60a0      	str	r0, [r4, #8]
 80075ee:	4620      	mov	r0, r4
 80075f0:	f000 f818 	bl	8007624 <__sfp>
 80075f4:	2200      	movs	r2, #0
 80075f6:	60e0      	str	r0, [r4, #12]
 80075f8:	2104      	movs	r1, #4
 80075fa:	6860      	ldr	r0, [r4, #4]
 80075fc:	f7ff ff82 	bl	8007504 <std>
 8007600:	68a0      	ldr	r0, [r4, #8]
 8007602:	2201      	movs	r2, #1
 8007604:	2109      	movs	r1, #9
 8007606:	f7ff ff7d 	bl	8007504 <std>
 800760a:	68e0      	ldr	r0, [r4, #12]
 800760c:	2202      	movs	r2, #2
 800760e:	2112      	movs	r1, #18
 8007610:	f7ff ff78 	bl	8007504 <std>
 8007614:	2301      	movs	r3, #1
 8007616:	61a3      	str	r3, [r4, #24]
 8007618:	e7d2      	b.n	80075c0 <__sinit+0xc>
 800761a:	bf00      	nop
 800761c:	08007b98 	.word	0x08007b98
 8007620:	0800754d 	.word	0x0800754d

08007624 <__sfp>:
 8007624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007626:	4607      	mov	r7, r0
 8007628:	f7ff ffac 	bl	8007584 <__sfp_lock_acquire>
 800762c:	4b1e      	ldr	r3, [pc, #120]	; (80076a8 <__sfp+0x84>)
 800762e:	681e      	ldr	r6, [r3, #0]
 8007630:	69b3      	ldr	r3, [r6, #24]
 8007632:	b913      	cbnz	r3, 800763a <__sfp+0x16>
 8007634:	4630      	mov	r0, r6
 8007636:	f7ff ffbd 	bl	80075b4 <__sinit>
 800763a:	3648      	adds	r6, #72	; 0x48
 800763c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007640:	3b01      	subs	r3, #1
 8007642:	d503      	bpl.n	800764c <__sfp+0x28>
 8007644:	6833      	ldr	r3, [r6, #0]
 8007646:	b30b      	cbz	r3, 800768c <__sfp+0x68>
 8007648:	6836      	ldr	r6, [r6, #0]
 800764a:	e7f7      	b.n	800763c <__sfp+0x18>
 800764c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007650:	b9d5      	cbnz	r5, 8007688 <__sfp+0x64>
 8007652:	4b16      	ldr	r3, [pc, #88]	; (80076ac <__sfp+0x88>)
 8007654:	60e3      	str	r3, [r4, #12]
 8007656:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800765a:	6665      	str	r5, [r4, #100]	; 0x64
 800765c:	f000 f847 	bl	80076ee <__retarget_lock_init_recursive>
 8007660:	f7ff ff96 	bl	8007590 <__sfp_lock_release>
 8007664:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007668:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800766c:	6025      	str	r5, [r4, #0]
 800766e:	61a5      	str	r5, [r4, #24]
 8007670:	2208      	movs	r2, #8
 8007672:	4629      	mov	r1, r5
 8007674:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007678:	f7fb fd76 	bl	8003168 <memset>
 800767c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007680:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007684:	4620      	mov	r0, r4
 8007686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007688:	3468      	adds	r4, #104	; 0x68
 800768a:	e7d9      	b.n	8007640 <__sfp+0x1c>
 800768c:	2104      	movs	r1, #4
 800768e:	4638      	mov	r0, r7
 8007690:	f7ff ff62 	bl	8007558 <__sfmoreglue>
 8007694:	4604      	mov	r4, r0
 8007696:	6030      	str	r0, [r6, #0]
 8007698:	2800      	cmp	r0, #0
 800769a:	d1d5      	bne.n	8007648 <__sfp+0x24>
 800769c:	f7ff ff78 	bl	8007590 <__sfp_lock_release>
 80076a0:	230c      	movs	r3, #12
 80076a2:	603b      	str	r3, [r7, #0]
 80076a4:	e7ee      	b.n	8007684 <__sfp+0x60>
 80076a6:	bf00      	nop
 80076a8:	08007b98 	.word	0x08007b98
 80076ac:	ffff0001 	.word	0xffff0001

080076b0 <_fwalk_reent>:
 80076b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076b4:	4606      	mov	r6, r0
 80076b6:	4688      	mov	r8, r1
 80076b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80076bc:	2700      	movs	r7, #0
 80076be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076c2:	f1b9 0901 	subs.w	r9, r9, #1
 80076c6:	d505      	bpl.n	80076d4 <_fwalk_reent+0x24>
 80076c8:	6824      	ldr	r4, [r4, #0]
 80076ca:	2c00      	cmp	r4, #0
 80076cc:	d1f7      	bne.n	80076be <_fwalk_reent+0xe>
 80076ce:	4638      	mov	r0, r7
 80076d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076d4:	89ab      	ldrh	r3, [r5, #12]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d907      	bls.n	80076ea <_fwalk_reent+0x3a>
 80076da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076de:	3301      	adds	r3, #1
 80076e0:	d003      	beq.n	80076ea <_fwalk_reent+0x3a>
 80076e2:	4629      	mov	r1, r5
 80076e4:	4630      	mov	r0, r6
 80076e6:	47c0      	blx	r8
 80076e8:	4307      	orrs	r7, r0
 80076ea:	3568      	adds	r5, #104	; 0x68
 80076ec:	e7e9      	b.n	80076c2 <_fwalk_reent+0x12>

080076ee <__retarget_lock_init_recursive>:
 80076ee:	4770      	bx	lr

080076f0 <__retarget_lock_acquire_recursive>:
 80076f0:	4770      	bx	lr

080076f2 <__retarget_lock_release_recursive>:
 80076f2:	4770      	bx	lr

080076f4 <__swhatbuf_r>:
 80076f4:	b570      	push	{r4, r5, r6, lr}
 80076f6:	460e      	mov	r6, r1
 80076f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076fc:	2900      	cmp	r1, #0
 80076fe:	b096      	sub	sp, #88	; 0x58
 8007700:	4614      	mov	r4, r2
 8007702:	461d      	mov	r5, r3
 8007704:	da08      	bge.n	8007718 <__swhatbuf_r+0x24>
 8007706:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	602a      	str	r2, [r5, #0]
 800770e:	061a      	lsls	r2, r3, #24
 8007710:	d410      	bmi.n	8007734 <__swhatbuf_r+0x40>
 8007712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007716:	e00e      	b.n	8007736 <__swhatbuf_r+0x42>
 8007718:	466a      	mov	r2, sp
 800771a:	f000 f903 	bl	8007924 <_fstat_r>
 800771e:	2800      	cmp	r0, #0
 8007720:	dbf1      	blt.n	8007706 <__swhatbuf_r+0x12>
 8007722:	9a01      	ldr	r2, [sp, #4]
 8007724:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007728:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800772c:	425a      	negs	r2, r3
 800772e:	415a      	adcs	r2, r3
 8007730:	602a      	str	r2, [r5, #0]
 8007732:	e7ee      	b.n	8007712 <__swhatbuf_r+0x1e>
 8007734:	2340      	movs	r3, #64	; 0x40
 8007736:	2000      	movs	r0, #0
 8007738:	6023      	str	r3, [r4, #0]
 800773a:	b016      	add	sp, #88	; 0x58
 800773c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007740 <__smakebuf_r>:
 8007740:	898b      	ldrh	r3, [r1, #12]
 8007742:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007744:	079d      	lsls	r5, r3, #30
 8007746:	4606      	mov	r6, r0
 8007748:	460c      	mov	r4, r1
 800774a:	d507      	bpl.n	800775c <__smakebuf_r+0x1c>
 800774c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007750:	6023      	str	r3, [r4, #0]
 8007752:	6123      	str	r3, [r4, #16]
 8007754:	2301      	movs	r3, #1
 8007756:	6163      	str	r3, [r4, #20]
 8007758:	b002      	add	sp, #8
 800775a:	bd70      	pop	{r4, r5, r6, pc}
 800775c:	ab01      	add	r3, sp, #4
 800775e:	466a      	mov	r2, sp
 8007760:	f7ff ffc8 	bl	80076f4 <__swhatbuf_r>
 8007764:	9900      	ldr	r1, [sp, #0]
 8007766:	4605      	mov	r5, r0
 8007768:	4630      	mov	r0, r6
 800776a:	f7ff f961 	bl	8006a30 <_malloc_r>
 800776e:	b948      	cbnz	r0, 8007784 <__smakebuf_r+0x44>
 8007770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007774:	059a      	lsls	r2, r3, #22
 8007776:	d4ef      	bmi.n	8007758 <__smakebuf_r+0x18>
 8007778:	f023 0303 	bic.w	r3, r3, #3
 800777c:	f043 0302 	orr.w	r3, r3, #2
 8007780:	81a3      	strh	r3, [r4, #12]
 8007782:	e7e3      	b.n	800774c <__smakebuf_r+0xc>
 8007784:	4b0d      	ldr	r3, [pc, #52]	; (80077bc <__smakebuf_r+0x7c>)
 8007786:	62b3      	str	r3, [r6, #40]	; 0x28
 8007788:	89a3      	ldrh	r3, [r4, #12]
 800778a:	6020      	str	r0, [r4, #0]
 800778c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007790:	81a3      	strh	r3, [r4, #12]
 8007792:	9b00      	ldr	r3, [sp, #0]
 8007794:	6163      	str	r3, [r4, #20]
 8007796:	9b01      	ldr	r3, [sp, #4]
 8007798:	6120      	str	r0, [r4, #16]
 800779a:	b15b      	cbz	r3, 80077b4 <__smakebuf_r+0x74>
 800779c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077a0:	4630      	mov	r0, r6
 80077a2:	f000 f8d1 	bl	8007948 <_isatty_r>
 80077a6:	b128      	cbz	r0, 80077b4 <__smakebuf_r+0x74>
 80077a8:	89a3      	ldrh	r3, [r4, #12]
 80077aa:	f023 0303 	bic.w	r3, r3, #3
 80077ae:	f043 0301 	orr.w	r3, r3, #1
 80077b2:	81a3      	strh	r3, [r4, #12]
 80077b4:	89a0      	ldrh	r0, [r4, #12]
 80077b6:	4305      	orrs	r5, r0
 80077b8:	81a5      	strh	r5, [r4, #12]
 80077ba:	e7cd      	b.n	8007758 <__smakebuf_r+0x18>
 80077bc:	0800754d 	.word	0x0800754d

080077c0 <_malloc_usable_size_r>:
 80077c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077c4:	1f18      	subs	r0, r3, #4
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	bfbc      	itt	lt
 80077ca:	580b      	ldrlt	r3, [r1, r0]
 80077cc:	18c0      	addlt	r0, r0, r3
 80077ce:	4770      	bx	lr

080077d0 <_raise_r>:
 80077d0:	291f      	cmp	r1, #31
 80077d2:	b538      	push	{r3, r4, r5, lr}
 80077d4:	4604      	mov	r4, r0
 80077d6:	460d      	mov	r5, r1
 80077d8:	d904      	bls.n	80077e4 <_raise_r+0x14>
 80077da:	2316      	movs	r3, #22
 80077dc:	6003      	str	r3, [r0, #0]
 80077de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077e2:	bd38      	pop	{r3, r4, r5, pc}
 80077e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80077e6:	b112      	cbz	r2, 80077ee <_raise_r+0x1e>
 80077e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80077ec:	b94b      	cbnz	r3, 8007802 <_raise_r+0x32>
 80077ee:	4620      	mov	r0, r4
 80077f0:	f000 f830 	bl	8007854 <_getpid_r>
 80077f4:	462a      	mov	r2, r5
 80077f6:	4601      	mov	r1, r0
 80077f8:	4620      	mov	r0, r4
 80077fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077fe:	f000 b817 	b.w	8007830 <_kill_r>
 8007802:	2b01      	cmp	r3, #1
 8007804:	d00a      	beq.n	800781c <_raise_r+0x4c>
 8007806:	1c59      	adds	r1, r3, #1
 8007808:	d103      	bne.n	8007812 <_raise_r+0x42>
 800780a:	2316      	movs	r3, #22
 800780c:	6003      	str	r3, [r0, #0]
 800780e:	2001      	movs	r0, #1
 8007810:	e7e7      	b.n	80077e2 <_raise_r+0x12>
 8007812:	2400      	movs	r4, #0
 8007814:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007818:	4628      	mov	r0, r5
 800781a:	4798      	blx	r3
 800781c:	2000      	movs	r0, #0
 800781e:	e7e0      	b.n	80077e2 <_raise_r+0x12>

08007820 <raise>:
 8007820:	4b02      	ldr	r3, [pc, #8]	; (800782c <raise+0xc>)
 8007822:	4601      	mov	r1, r0
 8007824:	6818      	ldr	r0, [r3, #0]
 8007826:	f7ff bfd3 	b.w	80077d0 <_raise_r>
 800782a:	bf00      	nop
 800782c:	20000044 	.word	0x20000044

08007830 <_kill_r>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	4d07      	ldr	r5, [pc, #28]	; (8007850 <_kill_r+0x20>)
 8007834:	2300      	movs	r3, #0
 8007836:	4604      	mov	r4, r0
 8007838:	4608      	mov	r0, r1
 800783a:	4611      	mov	r1, r2
 800783c:	602b      	str	r3, [r5, #0]
 800783e:	f000 f8d7 	bl	80079f0 <_kill>
 8007842:	1c43      	adds	r3, r0, #1
 8007844:	d102      	bne.n	800784c <_kill_r+0x1c>
 8007846:	682b      	ldr	r3, [r5, #0]
 8007848:	b103      	cbz	r3, 800784c <_kill_r+0x1c>
 800784a:	6023      	str	r3, [r4, #0]
 800784c:	bd38      	pop	{r3, r4, r5, pc}
 800784e:	bf00      	nop
 8007850:	2000617c 	.word	0x2000617c

08007854 <_getpid_r>:
 8007854:	f000 b8bc 	b.w	80079d0 <_getpid>

08007858 <__sread>:
 8007858:	b510      	push	{r4, lr}
 800785a:	460c      	mov	r4, r1
 800785c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007860:	f000 f894 	bl	800798c <_read_r>
 8007864:	2800      	cmp	r0, #0
 8007866:	bfab      	itete	ge
 8007868:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800786a:	89a3      	ldrhlt	r3, [r4, #12]
 800786c:	181b      	addge	r3, r3, r0
 800786e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007872:	bfac      	ite	ge
 8007874:	6563      	strge	r3, [r4, #84]	; 0x54
 8007876:	81a3      	strhlt	r3, [r4, #12]
 8007878:	bd10      	pop	{r4, pc}

0800787a <__swrite>:
 800787a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800787e:	461f      	mov	r7, r3
 8007880:	898b      	ldrh	r3, [r1, #12]
 8007882:	05db      	lsls	r3, r3, #23
 8007884:	4605      	mov	r5, r0
 8007886:	460c      	mov	r4, r1
 8007888:	4616      	mov	r6, r2
 800788a:	d505      	bpl.n	8007898 <__swrite+0x1e>
 800788c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007890:	2302      	movs	r3, #2
 8007892:	2200      	movs	r2, #0
 8007894:	f000 f868 	bl	8007968 <_lseek_r>
 8007898:	89a3      	ldrh	r3, [r4, #12]
 800789a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800789e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078a2:	81a3      	strh	r3, [r4, #12]
 80078a4:	4632      	mov	r2, r6
 80078a6:	463b      	mov	r3, r7
 80078a8:	4628      	mov	r0, r5
 80078aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ae:	f000 b817 	b.w	80078e0 <_write_r>

080078b2 <__sseek>:
 80078b2:	b510      	push	{r4, lr}
 80078b4:	460c      	mov	r4, r1
 80078b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ba:	f000 f855 	bl	8007968 <_lseek_r>
 80078be:	1c43      	adds	r3, r0, #1
 80078c0:	89a3      	ldrh	r3, [r4, #12]
 80078c2:	bf15      	itete	ne
 80078c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80078c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078ce:	81a3      	strheq	r3, [r4, #12]
 80078d0:	bf18      	it	ne
 80078d2:	81a3      	strhne	r3, [r4, #12]
 80078d4:	bd10      	pop	{r4, pc}

080078d6 <__sclose>:
 80078d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078da:	f000 b813 	b.w	8007904 <_close_r>
	...

080078e0 <_write_r>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	4d07      	ldr	r5, [pc, #28]	; (8007900 <_write_r+0x20>)
 80078e4:	4604      	mov	r4, r0
 80078e6:	4608      	mov	r0, r1
 80078e8:	4611      	mov	r1, r2
 80078ea:	2200      	movs	r2, #0
 80078ec:	602a      	str	r2, [r5, #0]
 80078ee:	461a      	mov	r2, r3
 80078f0:	f000 f8a4 	bl	8007a3c <_write>
 80078f4:	1c43      	adds	r3, r0, #1
 80078f6:	d102      	bne.n	80078fe <_write_r+0x1e>
 80078f8:	682b      	ldr	r3, [r5, #0]
 80078fa:	b103      	cbz	r3, 80078fe <_write_r+0x1e>
 80078fc:	6023      	str	r3, [r4, #0]
 80078fe:	bd38      	pop	{r3, r4, r5, pc}
 8007900:	2000617c 	.word	0x2000617c

08007904 <_close_r>:
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	4d06      	ldr	r5, [pc, #24]	; (8007920 <_close_r+0x1c>)
 8007908:	2300      	movs	r3, #0
 800790a:	4604      	mov	r4, r0
 800790c:	4608      	mov	r0, r1
 800790e:	602b      	str	r3, [r5, #0]
 8007910:	f000 f84e 	bl	80079b0 <_close>
 8007914:	1c43      	adds	r3, r0, #1
 8007916:	d102      	bne.n	800791e <_close_r+0x1a>
 8007918:	682b      	ldr	r3, [r5, #0]
 800791a:	b103      	cbz	r3, 800791e <_close_r+0x1a>
 800791c:	6023      	str	r3, [r4, #0]
 800791e:	bd38      	pop	{r3, r4, r5, pc}
 8007920:	2000617c 	.word	0x2000617c

08007924 <_fstat_r>:
 8007924:	b538      	push	{r3, r4, r5, lr}
 8007926:	4d07      	ldr	r5, [pc, #28]	; (8007944 <_fstat_r+0x20>)
 8007928:	2300      	movs	r3, #0
 800792a:	4604      	mov	r4, r0
 800792c:	4608      	mov	r0, r1
 800792e:	4611      	mov	r1, r2
 8007930:	602b      	str	r3, [r5, #0]
 8007932:	f000 f845 	bl	80079c0 <_fstat>
 8007936:	1c43      	adds	r3, r0, #1
 8007938:	d102      	bne.n	8007940 <_fstat_r+0x1c>
 800793a:	682b      	ldr	r3, [r5, #0]
 800793c:	b103      	cbz	r3, 8007940 <_fstat_r+0x1c>
 800793e:	6023      	str	r3, [r4, #0]
 8007940:	bd38      	pop	{r3, r4, r5, pc}
 8007942:	bf00      	nop
 8007944:	2000617c 	.word	0x2000617c

08007948 <_isatty_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	4d06      	ldr	r5, [pc, #24]	; (8007964 <_isatty_r+0x1c>)
 800794c:	2300      	movs	r3, #0
 800794e:	4604      	mov	r4, r0
 8007950:	4608      	mov	r0, r1
 8007952:	602b      	str	r3, [r5, #0]
 8007954:	f000 f844 	bl	80079e0 <_isatty>
 8007958:	1c43      	adds	r3, r0, #1
 800795a:	d102      	bne.n	8007962 <_isatty_r+0x1a>
 800795c:	682b      	ldr	r3, [r5, #0]
 800795e:	b103      	cbz	r3, 8007962 <_isatty_r+0x1a>
 8007960:	6023      	str	r3, [r4, #0]
 8007962:	bd38      	pop	{r3, r4, r5, pc}
 8007964:	2000617c 	.word	0x2000617c

08007968 <_lseek_r>:
 8007968:	b538      	push	{r3, r4, r5, lr}
 800796a:	4d07      	ldr	r5, [pc, #28]	; (8007988 <_lseek_r+0x20>)
 800796c:	4604      	mov	r4, r0
 800796e:	4608      	mov	r0, r1
 8007970:	4611      	mov	r1, r2
 8007972:	2200      	movs	r2, #0
 8007974:	602a      	str	r2, [r5, #0]
 8007976:	461a      	mov	r2, r3
 8007978:	f000 f842 	bl	8007a00 <_lseek>
 800797c:	1c43      	adds	r3, r0, #1
 800797e:	d102      	bne.n	8007986 <_lseek_r+0x1e>
 8007980:	682b      	ldr	r3, [r5, #0]
 8007982:	b103      	cbz	r3, 8007986 <_lseek_r+0x1e>
 8007984:	6023      	str	r3, [r4, #0]
 8007986:	bd38      	pop	{r3, r4, r5, pc}
 8007988:	2000617c 	.word	0x2000617c

0800798c <_read_r>:
 800798c:	b538      	push	{r3, r4, r5, lr}
 800798e:	4d07      	ldr	r5, [pc, #28]	; (80079ac <_read_r+0x20>)
 8007990:	4604      	mov	r4, r0
 8007992:	4608      	mov	r0, r1
 8007994:	4611      	mov	r1, r2
 8007996:	2200      	movs	r2, #0
 8007998:	602a      	str	r2, [r5, #0]
 800799a:	461a      	mov	r2, r3
 800799c:	f000 f838 	bl	8007a10 <_read>
 80079a0:	1c43      	adds	r3, r0, #1
 80079a2:	d102      	bne.n	80079aa <_read_r+0x1e>
 80079a4:	682b      	ldr	r3, [r5, #0]
 80079a6:	b103      	cbz	r3, 80079aa <_read_r+0x1e>
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	bd38      	pop	{r3, r4, r5, pc}
 80079ac:	2000617c 	.word	0x2000617c

080079b0 <_close>:
 80079b0:	4b02      	ldr	r3, [pc, #8]	; (80079bc <_close+0xc>)
 80079b2:	2258      	movs	r2, #88	; 0x58
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079ba:	4770      	bx	lr
 80079bc:	2000617c 	.word	0x2000617c

080079c0 <_fstat>:
 80079c0:	4b02      	ldr	r3, [pc, #8]	; (80079cc <_fstat+0xc>)
 80079c2:	2258      	movs	r2, #88	; 0x58
 80079c4:	601a      	str	r2, [r3, #0]
 80079c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079ca:	4770      	bx	lr
 80079cc:	2000617c 	.word	0x2000617c

080079d0 <_getpid>:
 80079d0:	4b02      	ldr	r3, [pc, #8]	; (80079dc <_getpid+0xc>)
 80079d2:	2258      	movs	r2, #88	; 0x58
 80079d4:	601a      	str	r2, [r3, #0]
 80079d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079da:	4770      	bx	lr
 80079dc:	2000617c 	.word	0x2000617c

080079e0 <_isatty>:
 80079e0:	4b02      	ldr	r3, [pc, #8]	; (80079ec <_isatty+0xc>)
 80079e2:	2258      	movs	r2, #88	; 0x58
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	2000      	movs	r0, #0
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	2000617c 	.word	0x2000617c

080079f0 <_kill>:
 80079f0:	4b02      	ldr	r3, [pc, #8]	; (80079fc <_kill+0xc>)
 80079f2:	2258      	movs	r2, #88	; 0x58
 80079f4:	601a      	str	r2, [r3, #0]
 80079f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079fa:	4770      	bx	lr
 80079fc:	2000617c 	.word	0x2000617c

08007a00 <_lseek>:
 8007a00:	4b02      	ldr	r3, [pc, #8]	; (8007a0c <_lseek+0xc>)
 8007a02:	2258      	movs	r2, #88	; 0x58
 8007a04:	601a      	str	r2, [r3, #0]
 8007a06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a0a:	4770      	bx	lr
 8007a0c:	2000617c 	.word	0x2000617c

08007a10 <_read>:
 8007a10:	4b02      	ldr	r3, [pc, #8]	; (8007a1c <_read+0xc>)
 8007a12:	2258      	movs	r2, #88	; 0x58
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a1a:	4770      	bx	lr
 8007a1c:	2000617c 	.word	0x2000617c

08007a20 <_sbrk>:
 8007a20:	4a04      	ldr	r2, [pc, #16]	; (8007a34 <_sbrk+0x14>)
 8007a22:	6811      	ldr	r1, [r2, #0]
 8007a24:	4603      	mov	r3, r0
 8007a26:	b909      	cbnz	r1, 8007a2c <_sbrk+0xc>
 8007a28:	4903      	ldr	r1, [pc, #12]	; (8007a38 <_sbrk+0x18>)
 8007a2a:	6011      	str	r1, [r2, #0]
 8007a2c:	6810      	ldr	r0, [r2, #0]
 8007a2e:	4403      	add	r3, r0
 8007a30:	6013      	str	r3, [r2, #0]
 8007a32:	4770      	bx	lr
 8007a34:	20006184 	.word	0x20006184
 8007a38:	20006188 	.word	0x20006188

08007a3c <_write>:
 8007a3c:	4b02      	ldr	r3, [pc, #8]	; (8007a48 <_write+0xc>)
 8007a3e:	2258      	movs	r2, #88	; 0x58
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a46:	4770      	bx	lr
 8007a48:	2000617c 	.word	0x2000617c

08007a4c <_exit>:
 8007a4c:	e7fe      	b.n	8007a4c <_exit>
	...

08007a50 <_init>:
 8007a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a52:	bf00      	nop
 8007a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a56:	bc08      	pop	{r3}
 8007a58:	469e      	mov	lr, r3
 8007a5a:	4770      	bx	lr

08007a5c <_fini>:
 8007a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5e:	bf00      	nop
 8007a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a62:	bc08      	pop	{r3}
 8007a64:	469e      	mov	lr, r3
 8007a66:	4770      	bx	lr
