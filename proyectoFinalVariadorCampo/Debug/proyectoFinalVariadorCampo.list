
proyectoFinalVariadorCampo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fdc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000134c  08008180  08008180  00018180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094cc  080094cc  00020218  2**0
                  CONTENTS
  4 .ARM          00000000  080094cc  080094cc  00020218  2**0
                  CONTENTS
  5 .preinit_array 00000000  080094cc  080094cc  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094cc  080094cc  000194cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094d0  080094d0  000194d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  080094d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  20000218  080096ec  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  080096ec  00020558  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003b47  00000000  00000000  00020242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c83  00000000  00000000  00023d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000298  00000000  00000000  00024a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000220  00000000  00000000  00024ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fbb9  00000000  00000000  00024ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004066  00000000  00000000  00034a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055e14  00000000  00000000  00038ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008e8fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002174  00000000  00000000  0008e94c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00090ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00090b8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008164 	.word	0x08008164

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	08008164 	.word	0x08008164

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	4605      	mov	r5, r0
 8000cbc:	460c      	mov	r4, r1
 8000cbe:	4628      	mov	r0, r5
 8000cc0:	4621      	mov	r1, r4
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f7ff ff21 	bl	8000b0c <__aeabi_dcmplt>
 8000cca:	b928      	cbnz	r0, 8000cd8 <__aeabi_d2lz+0x20>
 8000ccc:	4628      	mov	r0, r5
 8000cce:	4621      	mov	r1, r4
 8000cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd4:	f000 b80a 	b.w	8000cec <__aeabi_d2ulz>
 8000cd8:	4628      	mov	r0, r5
 8000cda:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000cde:	f000 f805 	bl	8000cec <__aeabi_d2ulz>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	bd38      	pop	{r3, r4, r5, pc}
 8000cea:	bf00      	nop

08000cec <__aeabi_d2ulz>:
 8000cec:	b5d0      	push	{r4, r6, r7, lr}
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__aeabi_d2ulz+0x34>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4606      	mov	r6, r0
 8000cf4:	460f      	mov	r7, r1
 8000cf6:	f7ff fc97 	bl	8000628 <__aeabi_dmul>
 8000cfa:	f7ff ff6d 	bl	8000bd8 <__aeabi_d2uiz>
 8000cfe:	4604      	mov	r4, r0
 8000d00:	f7ff fc18 	bl	8000534 <__aeabi_ui2d>
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <__aeabi_d2ulz+0x38>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	f7ff fc8e 	bl	8000628 <__aeabi_dmul>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4630      	mov	r0, r6
 8000d12:	4639      	mov	r1, r7
 8000d14:	f7ff fad0 	bl	80002b8 <__aeabi_dsub>
 8000d18:	f7ff ff5e 	bl	8000bd8 <__aeabi_d2uiz>
 8000d1c:	4621      	mov	r1, r4
 8000d1e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d20:	3df00000 	.word	0x3df00000
 8000d24:	41f00000 	.word	0x41f00000

08000d28 <main>:
unsigned int thirdparameter = 0;
// Función para los comandos
void parseCommands(char *ptrBufferReception);

/* Función principal del programa */
int main(void){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0

	/* inicialización de todos los elementos del sistema */
	initHardware();
 8000d2c:	f000 f844 	bl	8000db8 <initHardware>
	writeMsg(&USART2Comm, bufferData);
 8000d30:	491b      	ldr	r1, [pc, #108]	; (8000da0 <main+0x78>)
 8000d32:	481c      	ldr	r0, [pc, #112]	; (8000da4 <main+0x7c>)
 8000d34:	f001 fd85 	bl	8002842 <writeMsg>
	/* Loop infinito */
	while(1){
		duttyCicleReturn();
 8000d38:	f000 face 	bl	80012d8 <duttyCicleReturn>
		pwmSignalSwitch();
 8000d3c:	f000 fb14 	bl	8001368 <pwmSignalSwitch>
//			rxData = 0;
//			flagADC = 0;
//		}

		// Comunicacion para los comandos.
		if (rxData != '\0'){
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <main+0x80>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d01f      	beq.n	8000d88 <main+0x60>
			bufferReception[counterReception] = rxData;
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <main+0x84>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <main+0x80>)
 8000d50:	7819      	ldrb	r1, [r3, #0]
 8000d52:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <main+0x88>)
 8000d54:	5499      	strb	r1, [r3, r2]
			counterReception++;
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <main+0x84>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <main+0x84>)
 8000d60:	701a      	strb	r2, [r3, #0]
			if(rxData == '@'){
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <main+0x80>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b40      	cmp	r3, #64	; 0x40
 8000d68:	d10b      	bne.n	8000d82 <main+0x5a>
				stringComplete = true;
 8000d6a:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <main+0x8c>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
				bufferReception[counterReception] = '\0';
 8000d70:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <main+0x84>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <main+0x88>)
 8000d78:	2100      	movs	r1, #0
 8000d7a:	5499      	strb	r1, [r3, r2]
				counterReception = 0;
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <main+0x84>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
			}
			rxData = '\0';
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <main+0x80>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
		}
		// Envio de los strings
		if(stringComplete){
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <main+0x8c>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d0d3      	beq.n	8000d38 <main+0x10>
			parseCommands(bufferReception);
 8000d90:	4807      	ldr	r0, [pc, #28]	; (8000db0 <main+0x88>)
 8000d92:	f000 fd4d 	bl	8001830 <parseCommands>
			stringComplete = false;
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <main+0x8c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
		duttyCicleReturn();
 8000d9c:	e7cc      	b.n	8000d38 <main+0x10>
 8000d9e:	bf00      	nop
 8000da0:	20000000 	.word	0x20000000
 8000da4:	200002e4 	.word	0x200002e4
 8000da8:	2000044c 	.word	0x2000044c
 8000dac:	20000458 	.word	0x20000458
 8000db0:	2000045c 	.word	0x2000045c
 8000db4:	200004dc 	.word	0x200004dc

08000db8 <initHardware>:
	}
	return 0;
}// Final del main

// Función donde se configuran los pimsgToSendnes en general.
void initHardware(void){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0

	// Se desactiva el reloj HSE porque PH0 está conectado a un oscilador HSE.
	RCC->CR &= ~(RCC_CR_HSEON);
 8000dbc:	4bae      	ldr	r3, [pc, #696]	; (8001078 <initHardware+0x2c0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4aad      	ldr	r2, [pc, #692]	; (8001078 <initHardware+0x2c0>)
 8000dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dc6:	6013      	str	r3, [r2, #0]
	// GPIO del blinky pin a 250 ms.
	handlerStateLED.pGPIOx                               	= GPIOH;
 8000dc8:	4bac      	ldr	r3, [pc, #688]	; (800107c <initHardware+0x2c4>)
 8000dca:	4aad      	ldr	r2, [pc, #692]	; (8001080 <initHardware+0x2c8>)
 8000dcc:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber 			= PIN_1;
 8000dce:	4bab      	ldr	r3, [pc, #684]	; (800107c <initHardware+0x2c4>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode 			= GPIO_MODE_OUT;
 8000dd4:	4ba9      	ldr	r3, [pc, #676]	; (800107c <initHardware+0x2c4>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType 			= GPIO_OTYPE_PUSHPULL;
 8000dda:	4ba8      	ldr	r3, [pc, #672]	; (800107c <initHardware+0x2c4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed 			= GPIO_OSPEED_FAST;
 8000de0:	4ba6      	ldr	r3, [pc, #664]	; (800107c <initHardware+0x2c4>)
 8000de2:	2202      	movs	r2, #2
 8000de4:	719a      	strb	r2, [r3, #6]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl 		= GPIO_PUPDR_NOTHING;
 8000de6:	4ba5      	ldr	r3, [pc, #660]	; (800107c <initHardware+0x2c4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	71da      	strb	r2, [r3, #7]
	GPIO_Config(&handlerStateLED);
 8000dec:	48a3      	ldr	r0, [pc, #652]	; (800107c <initHardware+0x2c4>)
 8000dee:	f000 ffa3 	bl	8001d38 <GPIO_Config>

	/* Configuración del TIM2 para que haga un blinky cada 250 ms */
	handlerBlinkyTimer.ptrTIMx 								= TIM5;
 8000df2:	4ba4      	ldr	r3, [pc, #656]	; (8001084 <initHardware+0x2cc>)
 8000df4:	4aa4      	ldr	r2, [pc, #656]	; (8001088 <initHardware+0x2d0>)
 8000df6:	601a      	str	r2, [r3, #0]
	handlerBlinkyTimer.TIMx_Config.TIMx_mode 				= BTIMER_MODE_UP;
 8000df8:	4ba2      	ldr	r3, [pc, #648]	; (8001084 <initHardware+0x2cc>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	711a      	strb	r2, [r3, #4]
	handlerBlinkyTimer.TIMx_Config.TIMx_interruptEnable 	= BTIMER_INTERRUPT_ENABLE;
 8000dfe:	4ba1      	ldr	r3, [pc, #644]	; (8001084 <initHardware+0x2cc>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	741a      	strb	r2, [r3, #16]
	BasicTimer_Config(&handlerBlinkyTimer);
 8000e04:	489f      	ldr	r0, [pc, #636]	; (8001084 <initHardware+0x2cc>)
 8000e06:	f000 fe9b 	bl	8001b40 <BasicTimer_Config>

	/* Configuración del USART */
	// Transmisión
	handlerUSARTPINTX.pGPIOx  							= GPIOA;
 8000e0a:	4ba0      	ldr	r3, [pc, #640]	; (800108c <initHardware+0x2d4>)
 8000e0c:	4aa0      	ldr	r2, [pc, #640]	; (8001090 <initHardware+0x2d8>)
 8000e0e:	601a      	str	r2, [r3, #0]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinNumber 	= PIN_2;
 8000e10:	4b9e      	ldr	r3, [pc, #632]	; (800108c <initHardware+0x2d4>)
 8000e12:	2202      	movs	r2, #2
 8000e14:	711a      	strb	r2, [r3, #4]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFN;
 8000e16:	4b9d      	ldr	r3, [pc, #628]	; (800108c <initHardware+0x2d4>)
 8000e18:	2202      	movs	r2, #2
 8000e1a:	715a      	strb	r2, [r3, #5]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinAltFunMode = AF7;
 8000e1c:	4b9b      	ldr	r3, [pc, #620]	; (800108c <initHardware+0x2d4>)
 8000e1e:	2207      	movs	r2, #7
 8000e20:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerUSARTPINTX);
 8000e22:	489a      	ldr	r0, [pc, #616]	; (800108c <initHardware+0x2d4>)
 8000e24:	f000 ff88 	bl	8001d38 <GPIO_Config>

	// Recepción
	handlerUSARTPINRX.pGPIOx 						 	= GPIOA;
 8000e28:	4b9a      	ldr	r3, [pc, #616]	; (8001094 <initHardware+0x2dc>)
 8000e2a:	4a99      	ldr	r2, [pc, #612]	; (8001090 <initHardware+0x2d8>)
 8000e2c:	601a      	str	r2, [r3, #0]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinNumber		= PIN_3;
 8000e2e:	4b99      	ldr	r3, [pc, #612]	; (8001094 <initHardware+0x2dc>)
 8000e30:	2203      	movs	r2, #3
 8000e32:	711a      	strb	r2, [r3, #4]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFN;
 8000e34:	4b97      	ldr	r3, [pc, #604]	; (8001094 <initHardware+0x2dc>)
 8000e36:	2202      	movs	r2, #2
 8000e38:	715a      	strb	r2, [r3, #5]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinAltFunMode = AF7;
 8000e3a:	4b96      	ldr	r3, [pc, #600]	; (8001094 <initHardware+0x2dc>)
 8000e3c:	2207      	movs	r2, #7
 8000e3e:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerUSARTPINRX);
 8000e40:	4894      	ldr	r0, [pc, #592]	; (8001094 <initHardware+0x2dc>)
 8000e42:	f000 ff79 	bl	8001d38 <GPIO_Config>

	// Para el USART 6
	USART2Comm.ptrUSARTx 					= USART2;
 8000e46:	4b94      	ldr	r3, [pc, #592]	; (8001098 <initHardware+0x2e0>)
 8000e48:	4a94      	ldr	r2, [pc, #592]	; (800109c <initHardware+0x2e4>)
 8000e4a:	601a      	str	r2, [r3, #0]
	USART2Comm.USART_Config.USART_baudrate 	= USART_BAUDRATE_115200;
 8000e4c:	4b92      	ldr	r3, [pc, #584]	; (8001098 <initHardware+0x2e0>)
 8000e4e:	2202      	movs	r2, #2
 8000e50:	715a      	strb	r2, [r3, #5]
	USART2Comm.USART_Config.USART_datasize 	= USART_DATASIZE_8BIT;
 8000e52:	4b91      	ldr	r3, [pc, #580]	; (8001098 <initHardware+0x2e0>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	719a      	strb	r2, [r3, #6]
	USART2Comm.USART_Config.USART_parity 	= USART_PARITY_NONE;
 8000e58:	4b8f      	ldr	r3, [pc, #572]	; (8001098 <initHardware+0x2e0>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	71da      	strb	r2, [r3, #7]
	USART2Comm.USART_Config.USART_mode 		= USART_MODE_RXTX;
 8000e5e:	4b8e      	ldr	r3, [pc, #568]	; (8001098 <initHardware+0x2e0>)
 8000e60:	2202      	movs	r2, #2
 8000e62:	711a      	strb	r2, [r3, #4]
	USART2Comm.USART_Config.USART_stopbits 	= USART_STOPBIT_1;
 8000e64:	4b8c      	ldr	r3, [pc, #560]	; (8001098 <initHardware+0x2e0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	721a      	strb	r2, [r3, #8]
	USART2Comm.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;
 8000e6a:	4b8b      	ldr	r3, [pc, #556]	; (8001098 <initHardware+0x2e0>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	725a      	strb	r2, [r3, #9]

	// Se carga lo hecho sobre el USART
	USART_Config(&USART2Comm);
 8000e70:	4889      	ldr	r0, [pc, #548]	; (8001098 <initHardware+0x2e0>)
 8000e72:	f001 fac9 	bl	8002408 <USART_Config>

	/* Configuración ADC */
	// Cargando la configuración para la conversación ADC
	adcConfig.dataAlignment			= ADC_ALIGNMENT_RIGHT;
 8000e76:	4b8a      	ldr	r3, [pc, #552]	; (80010a0 <initHardware+0x2e8>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	711a      	strb	r2, [r3, #4]
	adcConfig.resolution			= ADC_RESOLUTION_12_BIT;
 8000e7c:	4b88      	ldr	r3, [pc, #544]	; (80010a0 <initHardware+0x2e8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	705a      	strb	r2, [r3, #1]
	adcConfig.samplingPeriod		= ADC_SAMPLING_PERIOD_28_CYCLES;
 8000e82:	4b87      	ldr	r3, [pc, #540]	; (80010a0 <initHardware+0x2e8>)
 8000e84:	2202      	movs	r2, #2
 8000e86:	805a      	strh	r2, [r3, #2]
	adcConfig.AdcEventType			= TIMER_ADC_EVENT;
 8000e88:	4b85      	ldr	r3, [pc, #532]	; (80010a0 <initHardware+0x2e8>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	721a      	strb	r2, [r3, #8]
	adcConfig.AdcChannelEvent		= TIM5_CH3;
 8000e8e:	4b84      	ldr	r3, [pc, #528]	; (80010a0 <initHardware+0x2e8>)
 8000e90:	220a      	movs	r2, #10
 8000e92:	725a      	strb	r2, [r3, #9]
	adcConfig.adcMultiChannel[0] 	= ADC_CHANNEL_1;
 8000e94:	4b82      	ldr	r3, [pc, #520]	; (80010a0 <initHardware+0x2e8>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	729a      	strb	r2, [r3, #10]
	adcConfig.adcMultiChannel[1]	= ADC_CHANNEL_4;
 8000e9a:	4b81      	ldr	r3, [pc, #516]	; (80010a0 <initHardware+0x2e8>)
 8000e9c:	2204      	movs	r2, #4
 8000e9e:	72da      	strb	r2, [r3, #11]
	adcConfig.adcMultiChannel[2]	= ADC_CHANNEL_0;
 8000ea0:	4b7f      	ldr	r3, [pc, #508]	; (80010a0 <initHardware+0x2e8>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	731a      	strb	r2, [r3, #12]
	adcMultiChannel(&adcConfig, 3);
 8000ea6:	2103      	movs	r1, #3
 8000ea8:	487d      	ldr	r0, [pc, #500]	; (80010a0 <initHardware+0x2e8>)
 8000eaa:	f001 fec7 	bl	8002c3c <adcMultiChannel>
	adcConfigEvents(&adcConfig);
 8000eae:	487c      	ldr	r0, [pc, #496]	; (80010a0 <initHardware+0x2e8>)
 8000eb0:	f001 fe38 	bl	8002b24 <adcConfigEvents>

	// handler PWM
	handlerPWMprueba.ptrTIMx           	  =   TIM5;
 8000eb4:	4b7b      	ldr	r3, [pc, #492]	; (80010a4 <initHardware+0x2ec>)
 8000eb6:	4a74      	ldr	r2, [pc, #464]	; (8001088 <initHardware+0x2d0>)
 8000eb8:	601a      	str	r2, [r3, #0]
	handlerPWMprueba.config.channel       =   PWM_CHANNEL_3;
 8000eba:	4b7a      	ldr	r3, [pc, #488]	; (80010a4 <initHardware+0x2ec>)
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	711a      	strb	r2, [r3, #4]
	handlerPWMprueba.config.duttyCicle    =   10000;
 8000ec0:	4b78      	ldr	r3, [pc, #480]	; (80010a4 <initHardware+0x2ec>)
 8000ec2:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ec6:	81da      	strh	r2, [r3, #14]
	handlerPWMprueba.config.periodo       =   20000;
 8000ec8:	4b76      	ldr	r3, [pc, #472]	; (80010a4 <initHardware+0x2ec>)
 8000eca:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000ece:	819a      	strh	r2, [r3, #12]
	handlerPWMprueba.config.prescaler     =   160;
 8000ed0:	4b74      	ldr	r3, [pc, #464]	; (80010a4 <initHardware+0x2ec>)
 8000ed2:	22a0      	movs	r2, #160	; 0xa0
 8000ed4:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWMprueba);
 8000ed6:	4873      	ldr	r0, [pc, #460]	; (80010a4 <initHardware+0x2ec>)
 8000ed8:	f001 f896 	bl	8002008 <pwm_Config>
	enableOutput(&handlerPWMprueba);
 8000edc:	4871      	ldr	r0, [pc, #452]	; (80010a4 <initHardware+0x2ec>)
 8000ede:	f001 f96b 	bl	80021b8 <enableOutput>
	startPwmSignal(&handlerPWMprueba);
 8000ee2:	4870      	ldr	r0, [pc, #448]	; (80010a4 <initHardware+0x2ec>)
 8000ee4:	f001 f956 	bl	8002194 <startPwmSignal>

	// GPIO TIM 3 CC4
	HandlerTIM5PWM_1.pGPIOx          					= GPIOB;
 8000ee8:	4b6f      	ldr	r3, [pc, #444]	; (80010a8 <initHardware+0x2f0>)
 8000eea:	4a70      	ldr	r2, [pc, #448]	; (80010ac <initHardware+0x2f4>)
 8000eec:	601a      	str	r2, [r3, #0]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinNumber  	= PIN_1;
 8000eee:	4b6e      	ldr	r3, [pc, #440]	; (80010a8 <initHardware+0x2f0>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	711a      	strb	r2, [r3, #4]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8000ef4:	4b6c      	ldr	r3, [pc, #432]	; (80010a8 <initHardware+0x2f0>)
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	715a      	strb	r2, [r3, #5]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8000efa:	4b6b      	ldr	r3, [pc, #428]	; (80010a8 <initHardware+0x2f0>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	721a      	strb	r2, [r3, #8]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f00:	4b69      	ldr	r3, [pc, #420]	; (80010a8 <initHardware+0x2f0>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	71da      	strb	r2, [r3, #7]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8000f06:	4b68      	ldr	r3, [pc, #416]	; (80010a8 <initHardware+0x2f0>)
 8000f08:	2202      	movs	r2, #2
 8000f0a:	719a      	strb	r2, [r3, #6]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000f0c:	4b66      	ldr	r3, [pc, #408]	; (80010a8 <initHardware+0x2f0>)
 8000f0e:	2202      	movs	r2, #2
 8000f10:	725a      	strb	r2, [r3, #9]
	GPIO_WritePin(&HandlerTIM5PWM_1, 0);
 8000f12:	2100      	movs	r1, #0
 8000f14:	4864      	ldr	r0, [pc, #400]	; (80010a8 <initHardware+0x2f0>)
 8000f16:	f001 f837 	bl	8001f88 <GPIO_WritePin>
	GPIO_Config(&HandlerTIM5PWM_1);
 8000f1a:	4863      	ldr	r0, [pc, #396]	; (80010a8 <initHardware+0x2f0>)
 8000f1c:	f000 ff0c 	bl	8001d38 <GPIO_Config>
	// Izquierda
	handlerPWM_1.ptrTIMx           	  =   TIM3;
 8000f20:	4b63      	ldr	r3, [pc, #396]	; (80010b0 <initHardware+0x2f8>)
 8000f22:	4a64      	ldr	r2, [pc, #400]	; (80010b4 <initHardware+0x2fc>)
 8000f24:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel       =   PWM_CHANNEL_4;
 8000f26:	4b62      	ldr	r3, [pc, #392]	; (80010b0 <initHardware+0x2f8>)
 8000f28:	2203      	movs	r2, #3
 8000f2a:	711a      	strb	r2, [r3, #4]
	handlerPWM_1.config.duttyCicle    =   10000;
 8000f2c:	4b60      	ldr	r3, [pc, #384]	; (80010b0 <initHardware+0x2f8>)
 8000f2e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f32:	81da      	strh	r2, [r3, #14]
	handlerPWM_1.config.periodo       =   25000;
 8000f34:	4b5e      	ldr	r3, [pc, #376]	; (80010b0 <initHardware+0x2f8>)
 8000f36:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000f3a:	819a      	strh	r2, [r3, #12]
	handlerPWM_1.config.prescaler     =   160;
 8000f3c:	4b5c      	ldr	r3, [pc, #368]	; (80010b0 <initHardware+0x2f8>)
 8000f3e:	22a0      	movs	r2, #160	; 0xa0
 8000f40:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_1);
 8000f42:	485b      	ldr	r0, [pc, #364]	; (80010b0 <initHardware+0x2f8>)
 8000f44:	f001 f860 	bl	8002008 <pwm_Config>

	// GPIO TIM 3 CC3
	HandlerTIM3PWM_2.pGPIOx          					= GPIOB;
 8000f48:	4b5b      	ldr	r3, [pc, #364]	; (80010b8 <initHardware+0x300>)
 8000f4a:	4a58      	ldr	r2, [pc, #352]	; (80010ac <initHardware+0x2f4>)
 8000f4c:	601a      	str	r2, [r3, #0]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinNumber  	= PIN_0;
 8000f4e:	4b5a      	ldr	r3, [pc, #360]	; (80010b8 <initHardware+0x300>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	711a      	strb	r2, [r3, #4]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8000f54:	4b58      	ldr	r3, [pc, #352]	; (80010b8 <initHardware+0x300>)
 8000f56:	2202      	movs	r2, #2
 8000f58:	715a      	strb	r2, [r3, #5]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8000f5a:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <initHardware+0x300>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	721a      	strb	r2, [r3, #8]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f60:	4b55      	ldr	r3, [pc, #340]	; (80010b8 <initHardware+0x300>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	71da      	strb	r2, [r3, #7]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8000f66:	4b54      	ldr	r3, [pc, #336]	; (80010b8 <initHardware+0x300>)
 8000f68:	2202      	movs	r2, #2
 8000f6a:	719a      	strb	r2, [r3, #6]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000f6c:	4b52      	ldr	r3, [pc, #328]	; (80010b8 <initHardware+0x300>)
 8000f6e:	2202      	movs	r2, #2
 8000f70:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&HandlerTIM3PWM_2);
 8000f72:	4851      	ldr	r0, [pc, #324]	; (80010b8 <initHardware+0x300>)
 8000f74:	f000 fee0 	bl	8001d38 <GPIO_Config>
	GPIO_WritePin(&HandlerTIM3PWM_2, 0);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	484f      	ldr	r0, [pc, #316]	; (80010b8 <initHardware+0x300>)
 8000f7c:	f001 f804 	bl	8001f88 <GPIO_WritePin>
	// Derecha
	handlerPWM_2.ptrTIMx           	  =   TIM3;
 8000f80:	4b4e      	ldr	r3, [pc, #312]	; (80010bc <initHardware+0x304>)
 8000f82:	4a4c      	ldr	r2, [pc, #304]	; (80010b4 <initHardware+0x2fc>)
 8000f84:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel       =   PWM_CHANNEL_3;
 8000f86:	4b4d      	ldr	r3, [pc, #308]	; (80010bc <initHardware+0x304>)
 8000f88:	2202      	movs	r2, #2
 8000f8a:	711a      	strb	r2, [r3, #4]
	handlerPWM_2.config.duttyCicle    =   10000;
 8000f8c:	4b4b      	ldr	r3, [pc, #300]	; (80010bc <initHardware+0x304>)
 8000f8e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f92:	81da      	strh	r2, [r3, #14]
	handlerPWM_2.config.periodo       =   25000;
 8000f94:	4b49      	ldr	r3, [pc, #292]	; (80010bc <initHardware+0x304>)
 8000f96:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000f9a:	819a      	strh	r2, [r3, #12]
	handlerPWM_2.config.prescaler     =   160;
 8000f9c:	4b47      	ldr	r3, [pc, #284]	; (80010bc <initHardware+0x304>)
 8000f9e:	22a0      	movs	r2, #160	; 0xa0
 8000fa0:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_2);
 8000fa2:	4846      	ldr	r0, [pc, #280]	; (80010bc <initHardware+0x304>)
 8000fa4:	f001 f830 	bl	8002008 <pwm_Config>

	// GPIO TIM 3 CC1
	HandlerTIM3PWM_3.pGPIOx          					= GPIOA;
 8000fa8:	4b45      	ldr	r3, [pc, #276]	; (80010c0 <initHardware+0x308>)
 8000faa:	4a39      	ldr	r2, [pc, #228]	; (8001090 <initHardware+0x2d8>)
 8000fac:	601a      	str	r2, [r3, #0]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinNumber  	= PIN_6;
 8000fae:	4b44      	ldr	r3, [pc, #272]	; (80010c0 <initHardware+0x308>)
 8000fb0:	2206      	movs	r2, #6
 8000fb2:	711a      	strb	r2, [r3, #4]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8000fb4:	4b42      	ldr	r3, [pc, #264]	; (80010c0 <initHardware+0x308>)
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	715a      	strb	r2, [r3, #5]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8000fba:	4b41      	ldr	r3, [pc, #260]	; (80010c0 <initHardware+0x308>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	721a      	strb	r2, [r3, #8]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000fc0:	4b3f      	ldr	r3, [pc, #252]	; (80010c0 <initHardware+0x308>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	71da      	strb	r2, [r3, #7]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8000fc6:	4b3e      	ldr	r3, [pc, #248]	; (80010c0 <initHardware+0x308>)
 8000fc8:	2202      	movs	r2, #2
 8000fca:	719a      	strb	r2, [r3, #6]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000fcc:	4b3c      	ldr	r3, [pc, #240]	; (80010c0 <initHardware+0x308>)
 8000fce:	2202      	movs	r2, #2
 8000fd0:	725a      	strb	r2, [r3, #9]
	GPIO_WritePin(&HandlerTIM3PWM_3, 0);
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	483a      	ldr	r0, [pc, #232]	; (80010c0 <initHardware+0x308>)
 8000fd6:	f000 ffd7 	bl	8001f88 <GPIO_WritePin>
	GPIO_Config(&HandlerTIM3PWM_3);
 8000fda:	4839      	ldr	r0, [pc, #228]	; (80010c0 <initHardware+0x308>)
 8000fdc:	f000 feac 	bl	8001d38 <GPIO_Config>
	// Arriba
	handlerPWM_3.ptrTIMx           	  =   TIM3;
 8000fe0:	4b38      	ldr	r3, [pc, #224]	; (80010c4 <initHardware+0x30c>)
 8000fe2:	4a34      	ldr	r2, [pc, #208]	; (80010b4 <initHardware+0x2fc>)
 8000fe4:	601a      	str	r2, [r3, #0]
	handlerPWM_3.config.channel       =   PWM_CHANNEL_1;
 8000fe6:	4b37      	ldr	r3, [pc, #220]	; (80010c4 <initHardware+0x30c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	711a      	strb	r2, [r3, #4]
	handlerPWM_3.config.duttyCicle    =   10000;
 8000fec:	4b35      	ldr	r3, [pc, #212]	; (80010c4 <initHardware+0x30c>)
 8000fee:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ff2:	81da      	strh	r2, [r3, #14]
	handlerPWM_3.config.periodo       =   25000;
 8000ff4:	4b33      	ldr	r3, [pc, #204]	; (80010c4 <initHardware+0x30c>)
 8000ff6:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000ffa:	819a      	strh	r2, [r3, #12]
	handlerPWM_3.config.prescaler     =   160;
 8000ffc:	4b31      	ldr	r3, [pc, #196]	; (80010c4 <initHardware+0x30c>)
 8000ffe:	22a0      	movs	r2, #160	; 0xa0
 8001000:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_3);
 8001002:	4830      	ldr	r0, [pc, #192]	; (80010c4 <initHardware+0x30c>)
 8001004:	f001 f800 	bl	8002008 <pwm_Config>

	// GPIO TIM 3 CC2
	HandlerTIM3PWM_4.pGPIOx          					= GPIOA;
 8001008:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <initHardware+0x310>)
 800100a:	4a21      	ldr	r2, [pc, #132]	; (8001090 <initHardware+0x2d8>)
 800100c:	601a      	str	r2, [r3, #0]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinNumber  	= PIN_7;
 800100e:	4b2e      	ldr	r3, [pc, #184]	; (80010c8 <initHardware+0x310>)
 8001010:	2207      	movs	r2, #7
 8001012:	711a      	strb	r2, [r3, #4]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8001014:	4b2c      	ldr	r3, [pc, #176]	; (80010c8 <initHardware+0x310>)
 8001016:	2202      	movs	r2, #2
 8001018:	715a      	strb	r2, [r3, #5]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 800101a:	4b2b      	ldr	r3, [pc, #172]	; (80010c8 <initHardware+0x310>)
 800101c:	2200      	movs	r2, #0
 800101e:	721a      	strb	r2, [r3, #8]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001020:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <initHardware+0x310>)
 8001022:	2200      	movs	r2, #0
 8001024:	71da      	strb	r2, [r3, #7]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8001026:	4b28      	ldr	r3, [pc, #160]	; (80010c8 <initHardware+0x310>)
 8001028:	2202      	movs	r2, #2
 800102a:	719a      	strb	r2, [r3, #6]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 800102c:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <initHardware+0x310>)
 800102e:	2202      	movs	r2, #2
 8001030:	725a      	strb	r2, [r3, #9]
	GPIO_WritePin(&HandlerTIM3PWM_4, 0);
 8001032:	2100      	movs	r1, #0
 8001034:	4824      	ldr	r0, [pc, #144]	; (80010c8 <initHardware+0x310>)
 8001036:	f000 ffa7 	bl	8001f88 <GPIO_WritePin>
	GPIO_Config(&HandlerTIM3PWM_4);
 800103a:	4823      	ldr	r0, [pc, #140]	; (80010c8 <initHardware+0x310>)
 800103c:	f000 fe7c 	bl	8001d38 <GPIO_Config>
	// Abajo
	handlerPWM_4.ptrTIMx           	  =   TIM3;
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <initHardware+0x314>)
 8001042:	4a1c      	ldr	r2, [pc, #112]	; (80010b4 <initHardware+0x2fc>)
 8001044:	601a      	str	r2, [r3, #0]
	handlerPWM_4.config.channel       =   PWM_CHANNEL_2;
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <initHardware+0x314>)
 8001048:	2201      	movs	r2, #1
 800104a:	711a      	strb	r2, [r3, #4]
	handlerPWM_4.config.duttyCicle    =   10000;
 800104c:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <initHardware+0x314>)
 800104e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001052:	81da      	strh	r2, [r3, #14]
	handlerPWM_4.config.periodo       =   25000;
 8001054:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <initHardware+0x314>)
 8001056:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800105a:	819a      	strh	r2, [r3, #12]
	handlerPWM_4.config.prescaler     =   160;
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <initHardware+0x314>)
 800105e:	22a0      	movs	r2, #160	; 0xa0
 8001060:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_4);
 8001062:	481a      	ldr	r0, [pc, #104]	; (80010cc <initHardware+0x314>)
 8001064:	f000 ffd0 	bl	8002008 <pwm_Config>

	// GPIO TIM 4 CC1
	HandlerTIM4PWM_5.pGPIOx          					= GPIOB;
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <initHardware+0x318>)
 800106a:	4a10      	ldr	r2, [pc, #64]	; (80010ac <initHardware+0x2f4>)
 800106c:	601a      	str	r2, [r3, #0]
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinNumber  	= PIN_6;
 800106e:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <initHardware+0x318>)
 8001070:	2206      	movs	r2, #6
 8001072:	711a      	strb	r2, [r3, #4]
 8001074:	e02e      	b.n	80010d4 <initHardware+0x31c>
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800
 800107c:	20000234 	.word	0x20000234
 8001080:	40021c00 	.word	0x40021c00
 8001084:	200002c4 	.word	0x200002c4
 8001088:	40000c00 	.word	0x40000c00
 800108c:	20000240 	.word	0x20000240
 8001090:	40020000 	.word	0x40020000
 8001094:	2000024c 	.word	0x2000024c
 8001098:	200002e4 	.word	0x200002e4
 800109c:	40004400 	.word	0x40004400
 80010a0:	200002d8 	.word	0x200002d8
 80010a4:	20000374 	.word	0x20000374
 80010a8:	20000258 	.word	0x20000258
 80010ac:	40020400 	.word	0x40020400
 80010b0:	20000388 	.word	0x20000388
 80010b4:	40000400 	.word	0x40000400
 80010b8:	20000264 	.word	0x20000264
 80010bc:	2000039c 	.word	0x2000039c
 80010c0:	20000270 	.word	0x20000270
 80010c4:	200003b0 	.word	0x200003b0
 80010c8:	2000027c 	.word	0x2000027c
 80010cc:	200003c4 	.word	0x200003c4
 80010d0:	20000288 	.word	0x20000288
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 80010d4:	4b74      	ldr	r3, [pc, #464]	; (80012a8 <initHardware+0x4f0>)
 80010d6:	2202      	movs	r2, #2
 80010d8:	715a      	strb	r2, [r3, #5]
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 80010da:	4b73      	ldr	r3, [pc, #460]	; (80012a8 <initHardware+0x4f0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	721a      	strb	r2, [r3, #8]
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010e0:	4b71      	ldr	r3, [pc, #452]	; (80012a8 <initHardware+0x4f0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	71da      	strb	r2, [r3, #7]
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 80010e6:	4b70      	ldr	r3, [pc, #448]	; (80012a8 <initHardware+0x4f0>)
 80010e8:	2202      	movs	r2, #2
 80010ea:	719a      	strb	r2, [r3, #6]
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 80010ec:	4b6e      	ldr	r3, [pc, #440]	; (80012a8 <initHardware+0x4f0>)
 80010ee:	2202      	movs	r2, #2
 80010f0:	725a      	strb	r2, [r3, #9]
	GPIO_WritePin(&HandlerTIM4PWM_5, 0);
 80010f2:	2100      	movs	r1, #0
 80010f4:	486c      	ldr	r0, [pc, #432]	; (80012a8 <initHardware+0x4f0>)
 80010f6:	f000 ff47 	bl	8001f88 <GPIO_WritePin>
	GPIO_Config(&HandlerTIM4PWM_5);
 80010fa:	486b      	ldr	r0, [pc, #428]	; (80012a8 <initHardware+0x4f0>)
 80010fc:	f000 fe1c 	bl	8001d38 <GPIO_Config>
	// DIAGONAL CUADRANTE 2
	handlerPWM_5.ptrTIMx           	  =   TIM4;
 8001100:	4b6a      	ldr	r3, [pc, #424]	; (80012ac <initHardware+0x4f4>)
 8001102:	4a6b      	ldr	r2, [pc, #428]	; (80012b0 <initHardware+0x4f8>)
 8001104:	601a      	str	r2, [r3, #0]
	handlerPWM_5.config.channel       =   PWM_CHANNEL_1;
 8001106:	4b69      	ldr	r3, [pc, #420]	; (80012ac <initHardware+0x4f4>)
 8001108:	2200      	movs	r2, #0
 800110a:	711a      	strb	r2, [r3, #4]
	handlerPWM_5.config.duttyCicle    =   10000;
 800110c:	4b67      	ldr	r3, [pc, #412]	; (80012ac <initHardware+0x4f4>)
 800110e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001112:	81da      	strh	r2, [r3, #14]
	handlerPWM_5.config.periodo       =   25000;
 8001114:	4b65      	ldr	r3, [pc, #404]	; (80012ac <initHardware+0x4f4>)
 8001116:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800111a:	819a      	strh	r2, [r3, #12]
	handlerPWM_5.config.prescaler     =   160;
 800111c:	4b63      	ldr	r3, [pc, #396]	; (80012ac <initHardware+0x4f4>)
 800111e:	22a0      	movs	r2, #160	; 0xa0
 8001120:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_5);
 8001122:	4862      	ldr	r0, [pc, #392]	; (80012ac <initHardware+0x4f4>)
 8001124:	f000 ff70 	bl	8002008 <pwm_Config>

	// GPIO TIM 4 CC2
	HandlerTIM4PWM_6.pGPIOx          					= GPIOB;
 8001128:	4b62      	ldr	r3, [pc, #392]	; (80012b4 <initHardware+0x4fc>)
 800112a:	4a63      	ldr	r2, [pc, #396]	; (80012b8 <initHardware+0x500>)
 800112c:	601a      	str	r2, [r3, #0]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinNumber  	= PIN_7;
 800112e:	4b61      	ldr	r3, [pc, #388]	; (80012b4 <initHardware+0x4fc>)
 8001130:	2207      	movs	r2, #7
 8001132:	711a      	strb	r2, [r3, #4]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8001134:	4b5f      	ldr	r3, [pc, #380]	; (80012b4 <initHardware+0x4fc>)
 8001136:	2202      	movs	r2, #2
 8001138:	715a      	strb	r2, [r3, #5]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 800113a:	4b5e      	ldr	r3, [pc, #376]	; (80012b4 <initHardware+0x4fc>)
 800113c:	2200      	movs	r2, #0
 800113e:	721a      	strb	r2, [r3, #8]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001140:	4b5c      	ldr	r3, [pc, #368]	; (80012b4 <initHardware+0x4fc>)
 8001142:	2200      	movs	r2, #0
 8001144:	71da      	strb	r2, [r3, #7]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8001146:	4b5b      	ldr	r3, [pc, #364]	; (80012b4 <initHardware+0x4fc>)
 8001148:	2202      	movs	r2, #2
 800114a:	719a      	strb	r2, [r3, #6]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 800114c:	4b59      	ldr	r3, [pc, #356]	; (80012b4 <initHardware+0x4fc>)
 800114e:	2202      	movs	r2, #2
 8001150:	725a      	strb	r2, [r3, #9]
	GPIO_WritePin(&HandlerTIM4PWM_6, 0);
 8001152:	2100      	movs	r1, #0
 8001154:	4857      	ldr	r0, [pc, #348]	; (80012b4 <initHardware+0x4fc>)
 8001156:	f000 ff17 	bl	8001f88 <GPIO_WritePin>
	GPIO_Config(&HandlerTIM4PWM_6);
 800115a:	4856      	ldr	r0, [pc, #344]	; (80012b4 <initHardware+0x4fc>)
 800115c:	f000 fdec 	bl	8001d38 <GPIO_Config>
	// DIAGONAL CUADRANTE 3
	handlerPWM_6.ptrTIMx           	  =   TIM4;
 8001160:	4b56      	ldr	r3, [pc, #344]	; (80012bc <initHardware+0x504>)
 8001162:	4a53      	ldr	r2, [pc, #332]	; (80012b0 <initHardware+0x4f8>)
 8001164:	601a      	str	r2, [r3, #0]
	handlerPWM_6.config.channel       =   PWM_CHANNEL_2;
 8001166:	4b55      	ldr	r3, [pc, #340]	; (80012bc <initHardware+0x504>)
 8001168:	2201      	movs	r2, #1
 800116a:	711a      	strb	r2, [r3, #4]
	handlerPWM_6.config.duttyCicle    =   10000;
 800116c:	4b53      	ldr	r3, [pc, #332]	; (80012bc <initHardware+0x504>)
 800116e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001172:	81da      	strh	r2, [r3, #14]
	handlerPWM_6.config.periodo       =   25000;
 8001174:	4b51      	ldr	r3, [pc, #324]	; (80012bc <initHardware+0x504>)
 8001176:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800117a:	819a      	strh	r2, [r3, #12]
	handlerPWM_6.config.prescaler     =   160;
 800117c:	4b4f      	ldr	r3, [pc, #316]	; (80012bc <initHardware+0x504>)
 800117e:	22a0      	movs	r2, #160	; 0xa0
 8001180:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_6);
 8001182:	484e      	ldr	r0, [pc, #312]	; (80012bc <initHardware+0x504>)
 8001184:	f000 ff40 	bl	8002008 <pwm_Config>

	// GPIO TIM 4 CC3
	HandlerTIM4PWM_7.pGPIOx          					= GPIOB;
 8001188:	4b4d      	ldr	r3, [pc, #308]	; (80012c0 <initHardware+0x508>)
 800118a:	4a4b      	ldr	r2, [pc, #300]	; (80012b8 <initHardware+0x500>)
 800118c:	601a      	str	r2, [r3, #0]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinNumber  	= PIN_8;
 800118e:	4b4c      	ldr	r3, [pc, #304]	; (80012c0 <initHardware+0x508>)
 8001190:	2208      	movs	r2, #8
 8001192:	711a      	strb	r2, [r3, #4]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8001194:	4b4a      	ldr	r3, [pc, #296]	; (80012c0 <initHardware+0x508>)
 8001196:	2202      	movs	r2, #2
 8001198:	715a      	strb	r2, [r3, #5]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 800119a:	4b49      	ldr	r3, [pc, #292]	; (80012c0 <initHardware+0x508>)
 800119c:	2200      	movs	r2, #0
 800119e:	721a      	strb	r2, [r3, #8]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80011a0:	4b47      	ldr	r3, [pc, #284]	; (80012c0 <initHardware+0x508>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	71da      	strb	r2, [r3, #7]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 80011a6:	4b46      	ldr	r3, [pc, #280]	; (80012c0 <initHardware+0x508>)
 80011a8:	2202      	movs	r2, #2
 80011aa:	719a      	strb	r2, [r3, #6]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 80011ac:	4b44      	ldr	r3, [pc, #272]	; (80012c0 <initHardware+0x508>)
 80011ae:	2202      	movs	r2, #2
 80011b0:	725a      	strb	r2, [r3, #9]
	GPIO_WritePin(&HandlerTIM4PWM_7, 0);
 80011b2:	2100      	movs	r1, #0
 80011b4:	4842      	ldr	r0, [pc, #264]	; (80012c0 <initHardware+0x508>)
 80011b6:	f000 fee7 	bl	8001f88 <GPIO_WritePin>
	GPIO_Config(&HandlerTIM4PWM_7);
 80011ba:	4841      	ldr	r0, [pc, #260]	; (80012c0 <initHardware+0x508>)
 80011bc:	f000 fdbc 	bl	8001d38 <GPIO_Config>
	// DIAGONAL CUADRANTE 1
	handlerPWM_7.ptrTIMx           	  =   TIM4;
 80011c0:	4b40      	ldr	r3, [pc, #256]	; (80012c4 <initHardware+0x50c>)
 80011c2:	4a3b      	ldr	r2, [pc, #236]	; (80012b0 <initHardware+0x4f8>)
 80011c4:	601a      	str	r2, [r3, #0]
	handlerPWM_7.config.channel       =   PWM_CHANNEL_3;
 80011c6:	4b3f      	ldr	r3, [pc, #252]	; (80012c4 <initHardware+0x50c>)
 80011c8:	2202      	movs	r2, #2
 80011ca:	711a      	strb	r2, [r3, #4]
	handlerPWM_7.config.duttyCicle    =   10000;
 80011cc:	4b3d      	ldr	r3, [pc, #244]	; (80012c4 <initHardware+0x50c>)
 80011ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80011d2:	81da      	strh	r2, [r3, #14]
	handlerPWM_7.config.periodo       =   25000;
 80011d4:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <initHardware+0x50c>)
 80011d6:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80011da:	819a      	strh	r2, [r3, #12]
	handlerPWM_7.config.prescaler     =   160;
 80011dc:	4b39      	ldr	r3, [pc, #228]	; (80012c4 <initHardware+0x50c>)
 80011de:	22a0      	movs	r2, #160	; 0xa0
 80011e0:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_7);
 80011e2:	4838      	ldr	r0, [pc, #224]	; (80012c4 <initHardware+0x50c>)
 80011e4:	f000 ff10 	bl	8002008 <pwm_Config>

	// GPIO TIM 4 CC4
	HandlerTIM4PWM_8.pGPIOx          					= GPIOB;
 80011e8:	4b37      	ldr	r3, [pc, #220]	; (80012c8 <initHardware+0x510>)
 80011ea:	4a33      	ldr	r2, [pc, #204]	; (80012b8 <initHardware+0x500>)
 80011ec:	601a      	str	r2, [r3, #0]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinNumber  	= PIN_9;
 80011ee:	4b36      	ldr	r3, [pc, #216]	; (80012c8 <initHardware+0x510>)
 80011f0:	2209      	movs	r2, #9
 80011f2:	711a      	strb	r2, [r3, #4]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 80011f4:	4b34      	ldr	r3, [pc, #208]	; (80012c8 <initHardware+0x510>)
 80011f6:	2202      	movs	r2, #2
 80011f8:	715a      	strb	r2, [r3, #5]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 80011fa:	4b33      	ldr	r3, [pc, #204]	; (80012c8 <initHardware+0x510>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	721a      	strb	r2, [r3, #8]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001200:	4b31      	ldr	r3, [pc, #196]	; (80012c8 <initHardware+0x510>)
 8001202:	2200      	movs	r2, #0
 8001204:	71da      	strb	r2, [r3, #7]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8001206:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <initHardware+0x510>)
 8001208:	2202      	movs	r2, #2
 800120a:	719a      	strb	r2, [r3, #6]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 800120c:	4b2e      	ldr	r3, [pc, #184]	; (80012c8 <initHardware+0x510>)
 800120e:	2202      	movs	r2, #2
 8001210:	725a      	strb	r2, [r3, #9]
	GPIO_WritePin(&HandlerTIM4PWM_8, 0);
 8001212:	2100      	movs	r1, #0
 8001214:	482c      	ldr	r0, [pc, #176]	; (80012c8 <initHardware+0x510>)
 8001216:	f000 feb7 	bl	8001f88 <GPIO_WritePin>
	GPIO_Config(&HandlerTIM4PWM_8);
 800121a:	482b      	ldr	r0, [pc, #172]	; (80012c8 <initHardware+0x510>)
 800121c:	f000 fd8c 	bl	8001d38 <GPIO_Config>
	// DIAGONAL CUADRANTE 4
	handlerPWM_8.ptrTIMx           	  =   TIM4;
 8001220:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <initHardware+0x514>)
 8001222:	4a23      	ldr	r2, [pc, #140]	; (80012b0 <initHardware+0x4f8>)
 8001224:	601a      	str	r2, [r3, #0]
	handlerPWM_8.config.channel       =   PWM_CHANNEL_4;
 8001226:	4b29      	ldr	r3, [pc, #164]	; (80012cc <initHardware+0x514>)
 8001228:	2203      	movs	r2, #3
 800122a:	711a      	strb	r2, [r3, #4]
	handlerPWM_8.config.duttyCicle    =   10000;
 800122c:	4b27      	ldr	r3, [pc, #156]	; (80012cc <initHardware+0x514>)
 800122e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001232:	81da      	strh	r2, [r3, #14]
	handlerPWM_8.config.periodo       =   25000;
 8001234:	4b25      	ldr	r3, [pc, #148]	; (80012cc <initHardware+0x514>)
 8001236:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800123a:	819a      	strh	r2, [r3, #12]
	handlerPWM_8.config.prescaler     =   160;
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <initHardware+0x514>)
 800123e:	22a0      	movs	r2, #160	; 0xa0
 8001240:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_8);
 8001242:	4822      	ldr	r0, [pc, #136]	; (80012cc <initHardware+0x514>)
 8001244:	f000 fee0 	bl	8002008 <pwm_Config>

	// GPIO TIM 4 CC4
	HandlerTIM2PWM_9.pGPIOx          					= GPIOB;
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <initHardware+0x518>)
 800124a:	4a1b      	ldr	r2, [pc, #108]	; (80012b8 <initHardware+0x500>)
 800124c:	601a      	str	r2, [r3, #0]
	HandlerTIM2PWM_9.GPIO_PinConfig.GPIO_PinNumber  	= PIN_3;
 800124e:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <initHardware+0x518>)
 8001250:	2203      	movs	r2, #3
 8001252:	711a      	strb	r2, [r3, #4]
	HandlerTIM2PWM_9.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <initHardware+0x518>)
 8001256:	2202      	movs	r2, #2
 8001258:	715a      	strb	r2, [r3, #5]
	HandlerTIM2PWM_9.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <initHardware+0x518>)
 800125c:	2200      	movs	r2, #0
 800125e:	721a      	strb	r2, [r3, #8]
	HandlerTIM2PWM_9.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <initHardware+0x518>)
 8001262:	2200      	movs	r2, #0
 8001264:	71da      	strb	r2, [r3, #7]
	HandlerTIM2PWM_9.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <initHardware+0x518>)
 8001268:	2202      	movs	r2, #2
 800126a:	719a      	strb	r2, [r3, #6]
	HandlerTIM2PWM_9.GPIO_PinConfig.GPIO_PinAltFunMode  = AF1;
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <initHardware+0x518>)
 800126e:	2201      	movs	r2, #1
 8001270:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&HandlerTIM2PWM_9);
 8001272:	4817      	ldr	r0, [pc, #92]	; (80012d0 <initHardware+0x518>)
 8001274:	f000 fd60 	bl	8001d38 <GPIO_Config>
	// CENTRO DEL TABLERO
	handlerPWM_9.ptrTIMx           	  =   TIM2;
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <initHardware+0x51c>)
 800127a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800127e:	601a      	str	r2, [r3, #0]
	handlerPWM_9.config.channel       =   PWM_CHANNEL_2;
 8001280:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <initHardware+0x51c>)
 8001282:	2201      	movs	r2, #1
 8001284:	711a      	strb	r2, [r3, #4]
	handlerPWM_9.config.duttyCicle    =   10000;
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <initHardware+0x51c>)
 8001288:	f242 7210 	movw	r2, #10000	; 0x2710
 800128c:	81da      	strh	r2, [r3, #14]
	handlerPWM_9.config.periodo       =   25000;
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <initHardware+0x51c>)
 8001290:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001294:	819a      	strh	r2, [r3, #12]
	handlerPWM_9.config.prescaler     =   160;
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <initHardware+0x51c>)
 8001298:	22a0      	movs	r2, #160	; 0xa0
 800129a:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_9);
 800129c:	480d      	ldr	r0, [pc, #52]	; (80012d4 <initHardware+0x51c>)
 800129e:	f000 feb3 	bl	8002008 <pwm_Config>


} // Fin initHardware
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000288 	.word	0x20000288
 80012ac:	200003d8 	.word	0x200003d8
 80012b0:	40000800 	.word	0x40000800
 80012b4:	20000294 	.word	0x20000294
 80012b8:	40020400 	.word	0x40020400
 80012bc:	200003ec 	.word	0x200003ec
 80012c0:	200002a0 	.word	0x200002a0
 80012c4:	20000400 	.word	0x20000400
 80012c8:	200002ac 	.word	0x200002ac
 80012cc:	20000414 	.word	0x20000414
 80012d0:	200002b8 	.word	0x200002b8
 80012d4:	20000428 	.word	0x20000428

080012d8 <duttyCicleReturn>:
// Esta funcion controla el dutty cicle del PWM en funcion de la tercera ADC del luxometro.
void duttyCicleReturn(void){
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
	if(dataADCChannel2[0] >= 0 && dataADCChannel2[0] <= 250){
 80012dc:	4b20      	ldr	r3, [pc, #128]	; (8001360 <duttyCicleReturn+0x88>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2bfa      	cmp	r3, #250	; 0xfa
 80012e2:	d804      	bhi.n	80012ee <duttyCicleReturn+0x16>
		duttyLux = 1000;
 80012e4:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <duttyCicleReturn+0x8c>)
 80012e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012ea:	601a      	str	r2, [r3, #0]
	}else if(dataADCChannel2[0] > 2000 && dataADCChannel2[0] <= 3000){
		duttyLux = 21000;
	}else{
		duttyLux = 21500;
	}
}
 80012ec:	e033      	b.n	8001356 <duttyCicleReturn+0x7e>
	}else if(dataADCChannel2[0] > 250 && dataADCChannel2[0] <= 1500){
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <duttyCicleReturn+0x88>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2bfa      	cmp	r3, #250	; 0xfa
 80012f4:	d90a      	bls.n	800130c <duttyCicleReturn+0x34>
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <duttyCicleReturn+0x88>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80012fe:	4293      	cmp	r3, r2
 8001300:	d804      	bhi.n	800130c <duttyCicleReturn+0x34>
		duttyLux = 12500;
 8001302:	4b18      	ldr	r3, [pc, #96]	; (8001364 <duttyCicleReturn+0x8c>)
 8001304:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	e024      	b.n	8001356 <duttyCicleReturn+0x7e>
	}else if(dataADCChannel2[0] > 1500 && dataADCChannel2[0] <= 2000){
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <duttyCicleReturn+0x88>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001314:	4293      	cmp	r3, r2
 8001316:	d909      	bls.n	800132c <duttyCicleReturn+0x54>
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <duttyCicleReturn+0x88>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001320:	d804      	bhi.n	800132c <duttyCicleReturn+0x54>
		duttyLux = 17500;
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <duttyCicleReturn+0x8c>)
 8001324:	f244 425c 	movw	r2, #17500	; 0x445c
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	e014      	b.n	8001356 <duttyCicleReturn+0x7e>
	}else if(dataADCChannel2[0] > 2000 && dataADCChannel2[0] <= 3000){
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <duttyCicleReturn+0x88>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001334:	d90a      	bls.n	800134c <duttyCicleReturn+0x74>
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <duttyCicleReturn+0x88>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800133e:	4293      	cmp	r3, r2
 8001340:	d804      	bhi.n	800134c <duttyCicleReturn+0x74>
		duttyLux = 21000;
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <duttyCicleReturn+0x8c>)
 8001344:	f245 2208 	movw	r2, #21000	; 0x5208
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	e004      	b.n	8001356 <duttyCicleReturn+0x7e>
		duttyLux = 21500;
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <duttyCicleReturn+0x8c>)
 800134e:	f245 32fc 	movw	r2, #21500	; 0x53fc
 8001352:	601a      	str	r2, [r3, #0]
}
 8001354:	e7ff      	b.n	8001356 <duttyCicleReturn+0x7e>
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000448 	.word	0x20000448
 8001364:	20000454 	.word	0x20000454

08001368 <pwmSignalSwitch>:
// Esta función lanza los pwm dependiendo de la posición en que esté el joystick.
void pwmSignalSwitch(void){
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	if (dataADCChannel0[0] <= 10 && (dataADCChannel1[0] >= 2000 && dataADCChannel1[0] <= 2150)){
 800136c:	4b99      	ldr	r3, [pc, #612]	; (80015d4 <pwmSignalSwitch+0x26c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b0a      	cmp	r3, #10
 8001372:	d838      	bhi.n	80013e6 <pwmSignalSwitch+0x7e>
 8001374:	4b98      	ldr	r3, [pc, #608]	; (80015d8 <pwmSignalSwitch+0x270>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800137c:	d333      	bcc.n	80013e6 <pwmSignalSwitch+0x7e>
 800137e:	4b96      	ldr	r3, [pc, #600]	; (80015d8 <pwmSignalSwitch+0x270>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f640 0266 	movw	r2, #2150	; 0x866
 8001386:	4293      	cmp	r3, r2
 8001388:	d82d      	bhi.n	80013e6 <pwmSignalSwitch+0x7e>
		updateDuttyCycle(&handlerPWM_1, duttyLux);
 800138a:	4b94      	ldr	r3, [pc, #592]	; (80015dc <pwmSignalSwitch+0x274>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	b29b      	uxth	r3, r3
 8001390:	4619      	mov	r1, r3
 8001392:	4893      	ldr	r0, [pc, #588]	; (80015e0 <pwmSignalSwitch+0x278>)
 8001394:	f000 ff94 	bl	80022c0 <updateDuttyCycle>
		enableOutput(&handlerPWM_1);
 8001398:	4891      	ldr	r0, [pc, #580]	; (80015e0 <pwmSignalSwitch+0x278>)
 800139a:	f000 ff0d 	bl	80021b8 <enableOutput>
		startPwmSignal(&handlerPWM_1);
 800139e:	4890      	ldr	r0, [pc, #576]	; (80015e0 <pwmSignalSwitch+0x278>)
 80013a0:	f000 fef8 	bl	8002194 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_2, 0);
 80013a4:	2100      	movs	r1, #0
 80013a6:	488f      	ldr	r0, [pc, #572]	; (80015e4 <pwmSignalSwitch+0x27c>)
 80013a8:	f000 ff8a 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 80013ac:	2100      	movs	r1, #0
 80013ae:	488e      	ldr	r0, [pc, #568]	; (80015e8 <pwmSignalSwitch+0x280>)
 80013b0:	f000 ff86 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 80013b4:	2100      	movs	r1, #0
 80013b6:	488d      	ldr	r0, [pc, #564]	; (80015ec <pwmSignalSwitch+0x284>)
 80013b8:	f000 ff82 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 80013bc:	2100      	movs	r1, #0
 80013be:	488c      	ldr	r0, [pc, #560]	; (80015f0 <pwmSignalSwitch+0x288>)
 80013c0:	f000 ff7e 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 80013c4:	2100      	movs	r1, #0
 80013c6:	488b      	ldr	r0, [pc, #556]	; (80015f4 <pwmSignalSwitch+0x28c>)
 80013c8:	f000 ff7a 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 80013cc:	2100      	movs	r1, #0
 80013ce:	488a      	ldr	r0, [pc, #552]	; (80015f8 <pwmSignalSwitch+0x290>)
 80013d0:	f000 ff76 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 80013d4:	2100      	movs	r1, #0
 80013d6:	4889      	ldr	r0, [pc, #548]	; (80015fc <pwmSignalSwitch+0x294>)
 80013d8:	f000 ff72 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 80013dc:	2100      	movs	r1, #0
 80013de:	4888      	ldr	r0, [pc, #544]	; (8001600 <pwmSignalSwitch+0x298>)
 80013e0:	f000 ff6e 	bl	80022c0 <updateDuttyCycle>
 80013e4:	e209      	b.n	80017fa <pwmSignalSwitch+0x492>
	}else if (dataADCChannel0[0] >= 4000 && (dataADCChannel1[0] >= 2000 && dataADCChannel1[0] <= 2150)){
 80013e6:	4b7b      	ldr	r3, [pc, #492]	; (80015d4 <pwmSignalSwitch+0x26c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80013ee:	d338      	bcc.n	8001462 <pwmSignalSwitch+0xfa>
 80013f0:	4b79      	ldr	r3, [pc, #484]	; (80015d8 <pwmSignalSwitch+0x270>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80013f8:	d333      	bcc.n	8001462 <pwmSignalSwitch+0xfa>
 80013fa:	4b77      	ldr	r3, [pc, #476]	; (80015d8 <pwmSignalSwitch+0x270>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f640 0266 	movw	r2, #2150	; 0x866
 8001402:	4293      	cmp	r3, r2
 8001404:	d82d      	bhi.n	8001462 <pwmSignalSwitch+0xfa>
		updateDuttyCycle(&handlerPWM_2, duttyLux);
 8001406:	4b75      	ldr	r3, [pc, #468]	; (80015dc <pwmSignalSwitch+0x274>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	b29b      	uxth	r3, r3
 800140c:	4619      	mov	r1, r3
 800140e:	4875      	ldr	r0, [pc, #468]	; (80015e4 <pwmSignalSwitch+0x27c>)
 8001410:	f000 ff56 	bl	80022c0 <updateDuttyCycle>
		enableOutput(&handlerPWM_2);
 8001414:	4873      	ldr	r0, [pc, #460]	; (80015e4 <pwmSignalSwitch+0x27c>)
 8001416:	f000 fecf 	bl	80021b8 <enableOutput>
		startPwmSignal(&handlerPWM_2);
 800141a:	4872      	ldr	r0, [pc, #456]	; (80015e4 <pwmSignalSwitch+0x27c>)
 800141c:	f000 feba 	bl	8002194 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 8001420:	2100      	movs	r1, #0
 8001422:	486f      	ldr	r0, [pc, #444]	; (80015e0 <pwmSignalSwitch+0x278>)
 8001424:	f000 ff4c 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 8001428:	2100      	movs	r1, #0
 800142a:	486f      	ldr	r0, [pc, #444]	; (80015e8 <pwmSignalSwitch+0x280>)
 800142c:	f000 ff48 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 8001430:	2100      	movs	r1, #0
 8001432:	486e      	ldr	r0, [pc, #440]	; (80015ec <pwmSignalSwitch+0x284>)
 8001434:	f000 ff44 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 8001438:	2100      	movs	r1, #0
 800143a:	486d      	ldr	r0, [pc, #436]	; (80015f0 <pwmSignalSwitch+0x288>)
 800143c:	f000 ff40 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 8001440:	2100      	movs	r1, #0
 8001442:	486c      	ldr	r0, [pc, #432]	; (80015f4 <pwmSignalSwitch+0x28c>)
 8001444:	f000 ff3c 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 8001448:	2100      	movs	r1, #0
 800144a:	486b      	ldr	r0, [pc, #428]	; (80015f8 <pwmSignalSwitch+0x290>)
 800144c:	f000 ff38 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 8001450:	2100      	movs	r1, #0
 8001452:	486a      	ldr	r0, [pc, #424]	; (80015fc <pwmSignalSwitch+0x294>)
 8001454:	f000 ff34 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 8001458:	2100      	movs	r1, #0
 800145a:	4869      	ldr	r0, [pc, #420]	; (8001600 <pwmSignalSwitch+0x298>)
 800145c:	f000 ff30 	bl	80022c0 <updateDuttyCycle>
 8001460:	e1cb      	b.n	80017fa <pwmSignalSwitch+0x492>
	}else if ((dataADCChannel0[0] >= 2000 && dataADCChannel0[0] <= 2150) && dataADCChannel1[0] >= 4000){
 8001462:	4b5c      	ldr	r3, [pc, #368]	; (80015d4 <pwmSignalSwitch+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800146a:	d338      	bcc.n	80014de <pwmSignalSwitch+0x176>
 800146c:	4b59      	ldr	r3, [pc, #356]	; (80015d4 <pwmSignalSwitch+0x26c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f640 0266 	movw	r2, #2150	; 0x866
 8001474:	4293      	cmp	r3, r2
 8001476:	d832      	bhi.n	80014de <pwmSignalSwitch+0x176>
 8001478:	4b57      	ldr	r3, [pc, #348]	; (80015d8 <pwmSignalSwitch+0x270>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001480:	d32d      	bcc.n	80014de <pwmSignalSwitch+0x176>
		updateDuttyCycle(&handlerPWM_3, duttyLux);
 8001482:	4b56      	ldr	r3, [pc, #344]	; (80015dc <pwmSignalSwitch+0x274>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	b29b      	uxth	r3, r3
 8001488:	4619      	mov	r1, r3
 800148a:	4857      	ldr	r0, [pc, #348]	; (80015e8 <pwmSignalSwitch+0x280>)
 800148c:	f000 ff18 	bl	80022c0 <updateDuttyCycle>
		enableOutput(&handlerPWM_3);
 8001490:	4855      	ldr	r0, [pc, #340]	; (80015e8 <pwmSignalSwitch+0x280>)
 8001492:	f000 fe91 	bl	80021b8 <enableOutput>
		startPwmSignal(&handlerPWM_3);
 8001496:	4854      	ldr	r0, [pc, #336]	; (80015e8 <pwmSignalSwitch+0x280>)
 8001498:	f000 fe7c 	bl	8002194 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 800149c:	2100      	movs	r1, #0
 800149e:	4850      	ldr	r0, [pc, #320]	; (80015e0 <pwmSignalSwitch+0x278>)
 80014a0:	f000 ff0e 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 80014a4:	2100      	movs	r1, #0
 80014a6:	484f      	ldr	r0, [pc, #316]	; (80015e4 <pwmSignalSwitch+0x27c>)
 80014a8:	f000 ff0a 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 80014ac:	2100      	movs	r1, #0
 80014ae:	484f      	ldr	r0, [pc, #316]	; (80015ec <pwmSignalSwitch+0x284>)
 80014b0:	f000 ff06 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 80014b4:	2100      	movs	r1, #0
 80014b6:	484e      	ldr	r0, [pc, #312]	; (80015f0 <pwmSignalSwitch+0x288>)
 80014b8:	f000 ff02 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 80014bc:	2100      	movs	r1, #0
 80014be:	484d      	ldr	r0, [pc, #308]	; (80015f4 <pwmSignalSwitch+0x28c>)
 80014c0:	f000 fefe 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 80014c4:	2100      	movs	r1, #0
 80014c6:	484c      	ldr	r0, [pc, #304]	; (80015f8 <pwmSignalSwitch+0x290>)
 80014c8:	f000 fefa 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 80014cc:	2100      	movs	r1, #0
 80014ce:	484b      	ldr	r0, [pc, #300]	; (80015fc <pwmSignalSwitch+0x294>)
 80014d0:	f000 fef6 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 80014d4:	2100      	movs	r1, #0
 80014d6:	484a      	ldr	r0, [pc, #296]	; (8001600 <pwmSignalSwitch+0x298>)
 80014d8:	f000 fef2 	bl	80022c0 <updateDuttyCycle>
 80014dc:	e18d      	b.n	80017fa <pwmSignalSwitch+0x492>
	}else if ((dataADCChannel0[0] >= 2000 && dataADCChannel0[0] <= 2150) && dataADCChannel1[0] <= 10){
 80014de:	4b3d      	ldr	r3, [pc, #244]	; (80015d4 <pwmSignalSwitch+0x26c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80014e6:	d337      	bcc.n	8001558 <pwmSignalSwitch+0x1f0>
 80014e8:	4b3a      	ldr	r3, [pc, #232]	; (80015d4 <pwmSignalSwitch+0x26c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f640 0266 	movw	r2, #2150	; 0x866
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d831      	bhi.n	8001558 <pwmSignalSwitch+0x1f0>
 80014f4:	4b38      	ldr	r3, [pc, #224]	; (80015d8 <pwmSignalSwitch+0x270>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b0a      	cmp	r3, #10
 80014fa:	d82d      	bhi.n	8001558 <pwmSignalSwitch+0x1f0>
		updateDuttyCycle(&handlerPWM_4, duttyLux);
 80014fc:	4b37      	ldr	r3, [pc, #220]	; (80015dc <pwmSignalSwitch+0x274>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	b29b      	uxth	r3, r3
 8001502:	4619      	mov	r1, r3
 8001504:	4839      	ldr	r0, [pc, #228]	; (80015ec <pwmSignalSwitch+0x284>)
 8001506:	f000 fedb 	bl	80022c0 <updateDuttyCycle>
		enableOutput(&handlerPWM_4);
 800150a:	4838      	ldr	r0, [pc, #224]	; (80015ec <pwmSignalSwitch+0x284>)
 800150c:	f000 fe54 	bl	80021b8 <enableOutput>
		startPwmSignal(&handlerPWM_4);
 8001510:	4836      	ldr	r0, [pc, #216]	; (80015ec <pwmSignalSwitch+0x284>)
 8001512:	f000 fe3f 	bl	8002194 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 8001516:	2100      	movs	r1, #0
 8001518:	4831      	ldr	r0, [pc, #196]	; (80015e0 <pwmSignalSwitch+0x278>)
 800151a:	f000 fed1 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 800151e:	2100      	movs	r1, #0
 8001520:	4830      	ldr	r0, [pc, #192]	; (80015e4 <pwmSignalSwitch+0x27c>)
 8001522:	f000 fecd 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 8001526:	2100      	movs	r1, #0
 8001528:	482f      	ldr	r0, [pc, #188]	; (80015e8 <pwmSignalSwitch+0x280>)
 800152a:	f000 fec9 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 800152e:	2100      	movs	r1, #0
 8001530:	482f      	ldr	r0, [pc, #188]	; (80015f0 <pwmSignalSwitch+0x288>)
 8001532:	f000 fec5 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 8001536:	2100      	movs	r1, #0
 8001538:	482e      	ldr	r0, [pc, #184]	; (80015f4 <pwmSignalSwitch+0x28c>)
 800153a:	f000 fec1 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 800153e:	2100      	movs	r1, #0
 8001540:	482d      	ldr	r0, [pc, #180]	; (80015f8 <pwmSignalSwitch+0x290>)
 8001542:	f000 febd 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 8001546:	2100      	movs	r1, #0
 8001548:	482c      	ldr	r0, [pc, #176]	; (80015fc <pwmSignalSwitch+0x294>)
 800154a:	f000 feb9 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 800154e:	2100      	movs	r1, #0
 8001550:	482b      	ldr	r0, [pc, #172]	; (8001600 <pwmSignalSwitch+0x298>)
 8001552:	f000 feb5 	bl	80022c0 <updateDuttyCycle>
 8001556:	e150      	b.n	80017fa <pwmSignalSwitch+0x492>
	}else if ((dataADCChannel1[0] >= 4000 && dataADCChannel1[0] <= 4150) && dataADCChannel0[0] <= 10){
 8001558:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <pwmSignalSwitch+0x270>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001560:	d350      	bcc.n	8001604 <pwmSignalSwitch+0x29c>
 8001562:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <pwmSignalSwitch+0x270>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f241 0236 	movw	r2, #4150	; 0x1036
 800156a:	4293      	cmp	r3, r2
 800156c:	d84a      	bhi.n	8001604 <pwmSignalSwitch+0x29c>
 800156e:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <pwmSignalSwitch+0x26c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b0a      	cmp	r3, #10
 8001574:	d846      	bhi.n	8001604 <pwmSignalSwitch+0x29c>
		updateDuttyCycle(&handlerPWM_5, duttyLux);
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <pwmSignalSwitch+0x274>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	b29b      	uxth	r3, r3
 800157c:	4619      	mov	r1, r3
 800157e:	481c      	ldr	r0, [pc, #112]	; (80015f0 <pwmSignalSwitch+0x288>)
 8001580:	f000 fe9e 	bl	80022c0 <updateDuttyCycle>
		enableOutput(&handlerPWM_5);
 8001584:	481a      	ldr	r0, [pc, #104]	; (80015f0 <pwmSignalSwitch+0x288>)
 8001586:	f000 fe17 	bl	80021b8 <enableOutput>
		startPwmSignal(&handlerPWM_5);
 800158a:	4819      	ldr	r0, [pc, #100]	; (80015f0 <pwmSignalSwitch+0x288>)
 800158c:	f000 fe02 	bl	8002194 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 8001590:	2100      	movs	r1, #0
 8001592:	4813      	ldr	r0, [pc, #76]	; (80015e0 <pwmSignalSwitch+0x278>)
 8001594:	f000 fe94 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 8001598:	2100      	movs	r1, #0
 800159a:	4812      	ldr	r0, [pc, #72]	; (80015e4 <pwmSignalSwitch+0x27c>)
 800159c:	f000 fe90 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 80015a0:	2100      	movs	r1, #0
 80015a2:	4811      	ldr	r0, [pc, #68]	; (80015e8 <pwmSignalSwitch+0x280>)
 80015a4:	f000 fe8c 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 80015a8:	2100      	movs	r1, #0
 80015aa:	4810      	ldr	r0, [pc, #64]	; (80015ec <pwmSignalSwitch+0x284>)
 80015ac:	f000 fe88 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 80015b0:	2100      	movs	r1, #0
 80015b2:	4810      	ldr	r0, [pc, #64]	; (80015f4 <pwmSignalSwitch+0x28c>)
 80015b4:	f000 fe84 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 80015b8:	2100      	movs	r1, #0
 80015ba:	480f      	ldr	r0, [pc, #60]	; (80015f8 <pwmSignalSwitch+0x290>)
 80015bc:	f000 fe80 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 80015c0:	2100      	movs	r1, #0
 80015c2:	480e      	ldr	r0, [pc, #56]	; (80015fc <pwmSignalSwitch+0x294>)
 80015c4:	f000 fe7c 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 80015c8:	2100      	movs	r1, #0
 80015ca:	480d      	ldr	r0, [pc, #52]	; (8001600 <pwmSignalSwitch+0x298>)
 80015cc:	f000 fe78 	bl	80022c0 <updateDuttyCycle>
 80015d0:	e113      	b.n	80017fa <pwmSignalSwitch+0x492>
 80015d2:	bf00      	nop
 80015d4:	20000440 	.word	0x20000440
 80015d8:	20000444 	.word	0x20000444
 80015dc:	20000454 	.word	0x20000454
 80015e0:	20000388 	.word	0x20000388
 80015e4:	2000039c 	.word	0x2000039c
 80015e8:	200003b0 	.word	0x200003b0
 80015ec:	200003c4 	.word	0x200003c4
 80015f0:	200003d8 	.word	0x200003d8
 80015f4:	200003ec 	.word	0x200003ec
 80015f8:	20000400 	.word	0x20000400
 80015fc:	20000414 	.word	0x20000414
 8001600:	20000428 	.word	0x20000428
	}else if ((dataADCChannel1[0] >= 0 && dataADCChannel1[0] <= 20) && dataADCChannel0[0] <= 20){
 8001604:	4b7e      	ldr	r3, [pc, #504]	; (8001800 <pwmSignalSwitch+0x498>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b14      	cmp	r3, #20
 800160a:	d831      	bhi.n	8001670 <pwmSignalSwitch+0x308>
 800160c:	4b7d      	ldr	r3, [pc, #500]	; (8001804 <pwmSignalSwitch+0x49c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b14      	cmp	r3, #20
 8001612:	d82d      	bhi.n	8001670 <pwmSignalSwitch+0x308>
		updateDuttyCycle(&handlerPWM_6, duttyLux);
 8001614:	4b7c      	ldr	r3, [pc, #496]	; (8001808 <pwmSignalSwitch+0x4a0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	b29b      	uxth	r3, r3
 800161a:	4619      	mov	r1, r3
 800161c:	487b      	ldr	r0, [pc, #492]	; (800180c <pwmSignalSwitch+0x4a4>)
 800161e:	f000 fe4f 	bl	80022c0 <updateDuttyCycle>
		enableOutput(&handlerPWM_6);
 8001622:	487a      	ldr	r0, [pc, #488]	; (800180c <pwmSignalSwitch+0x4a4>)
 8001624:	f000 fdc8 	bl	80021b8 <enableOutput>
		startPwmSignal(&handlerPWM_6);
 8001628:	4878      	ldr	r0, [pc, #480]	; (800180c <pwmSignalSwitch+0x4a4>)
 800162a:	f000 fdb3 	bl	8002194 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 800162e:	2100      	movs	r1, #0
 8001630:	4877      	ldr	r0, [pc, #476]	; (8001810 <pwmSignalSwitch+0x4a8>)
 8001632:	f000 fe45 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 8001636:	2100      	movs	r1, #0
 8001638:	4876      	ldr	r0, [pc, #472]	; (8001814 <pwmSignalSwitch+0x4ac>)
 800163a:	f000 fe41 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 800163e:	2100      	movs	r1, #0
 8001640:	4875      	ldr	r0, [pc, #468]	; (8001818 <pwmSignalSwitch+0x4b0>)
 8001642:	f000 fe3d 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 8001646:	2100      	movs	r1, #0
 8001648:	4874      	ldr	r0, [pc, #464]	; (800181c <pwmSignalSwitch+0x4b4>)
 800164a:	f000 fe39 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 800164e:	2100      	movs	r1, #0
 8001650:	4873      	ldr	r0, [pc, #460]	; (8001820 <pwmSignalSwitch+0x4b8>)
 8001652:	f000 fe35 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 8001656:	2100      	movs	r1, #0
 8001658:	4872      	ldr	r0, [pc, #456]	; (8001824 <pwmSignalSwitch+0x4bc>)
 800165a:	f000 fe31 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 800165e:	2100      	movs	r1, #0
 8001660:	4871      	ldr	r0, [pc, #452]	; (8001828 <pwmSignalSwitch+0x4c0>)
 8001662:	f000 fe2d 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 8001666:	2100      	movs	r1, #0
 8001668:	4870      	ldr	r0, [pc, #448]	; (800182c <pwmSignalSwitch+0x4c4>)
 800166a:	f000 fe29 	bl	80022c0 <updateDuttyCycle>
 800166e:	e0c4      	b.n	80017fa <pwmSignalSwitch+0x492>
	}else if ((dataADCChannel0[0] >= 4000 && dataADCChannel0[0] <= 4150) && (dataADCChannel1[0] >= 4000 && dataADCChannel1[0] <= 4150)){
 8001670:	4b64      	ldr	r3, [pc, #400]	; (8001804 <pwmSignalSwitch+0x49c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001678:	d33e      	bcc.n	80016f8 <pwmSignalSwitch+0x390>
 800167a:	4b62      	ldr	r3, [pc, #392]	; (8001804 <pwmSignalSwitch+0x49c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f241 0236 	movw	r2, #4150	; 0x1036
 8001682:	4293      	cmp	r3, r2
 8001684:	d838      	bhi.n	80016f8 <pwmSignalSwitch+0x390>
 8001686:	4b5e      	ldr	r3, [pc, #376]	; (8001800 <pwmSignalSwitch+0x498>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800168e:	d333      	bcc.n	80016f8 <pwmSignalSwitch+0x390>
 8001690:	4b5b      	ldr	r3, [pc, #364]	; (8001800 <pwmSignalSwitch+0x498>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f241 0236 	movw	r2, #4150	; 0x1036
 8001698:	4293      	cmp	r3, r2
 800169a:	d82d      	bhi.n	80016f8 <pwmSignalSwitch+0x390>
		updateDuttyCycle(&handlerPWM_7, duttyLux);
 800169c:	4b5a      	ldr	r3, [pc, #360]	; (8001808 <pwmSignalSwitch+0x4a0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	4619      	mov	r1, r3
 80016a4:	485f      	ldr	r0, [pc, #380]	; (8001824 <pwmSignalSwitch+0x4bc>)
 80016a6:	f000 fe0b 	bl	80022c0 <updateDuttyCycle>
		enableOutput(&handlerPWM_7);
 80016aa:	485e      	ldr	r0, [pc, #376]	; (8001824 <pwmSignalSwitch+0x4bc>)
 80016ac:	f000 fd84 	bl	80021b8 <enableOutput>
		startPwmSignal(&handlerPWM_7);
 80016b0:	485c      	ldr	r0, [pc, #368]	; (8001824 <pwmSignalSwitch+0x4bc>)
 80016b2:	f000 fd6f 	bl	8002194 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 80016b6:	2100      	movs	r1, #0
 80016b8:	4855      	ldr	r0, [pc, #340]	; (8001810 <pwmSignalSwitch+0x4a8>)
 80016ba:	f000 fe01 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 80016be:	2100      	movs	r1, #0
 80016c0:	4854      	ldr	r0, [pc, #336]	; (8001814 <pwmSignalSwitch+0x4ac>)
 80016c2:	f000 fdfd 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 80016c6:	2100      	movs	r1, #0
 80016c8:	4853      	ldr	r0, [pc, #332]	; (8001818 <pwmSignalSwitch+0x4b0>)
 80016ca:	f000 fdf9 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 80016ce:	2100      	movs	r1, #0
 80016d0:	4852      	ldr	r0, [pc, #328]	; (800181c <pwmSignalSwitch+0x4b4>)
 80016d2:	f000 fdf5 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 80016d6:	2100      	movs	r1, #0
 80016d8:	4851      	ldr	r0, [pc, #324]	; (8001820 <pwmSignalSwitch+0x4b8>)
 80016da:	f000 fdf1 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 80016de:	2100      	movs	r1, #0
 80016e0:	484a      	ldr	r0, [pc, #296]	; (800180c <pwmSignalSwitch+0x4a4>)
 80016e2:	f000 fded 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 80016e6:	2100      	movs	r1, #0
 80016e8:	484f      	ldr	r0, [pc, #316]	; (8001828 <pwmSignalSwitch+0x4c0>)
 80016ea:	f000 fde9 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 80016ee:	2100      	movs	r1, #0
 80016f0:	484e      	ldr	r0, [pc, #312]	; (800182c <pwmSignalSwitch+0x4c4>)
 80016f2:	f000 fde5 	bl	80022c0 <updateDuttyCycle>
 80016f6:	e080      	b.n	80017fa <pwmSignalSwitch+0x492>
	}else if ((dataADCChannel0[0] >= 4000 && dataADCChannel0[0] <= 4150) && dataADCChannel1[0] <= 20){
 80016f8:	4b42      	ldr	r3, [pc, #264]	; (8001804 <pwmSignalSwitch+0x49c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001700:	d337      	bcc.n	8001772 <pwmSignalSwitch+0x40a>
 8001702:	4b40      	ldr	r3, [pc, #256]	; (8001804 <pwmSignalSwitch+0x49c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f241 0236 	movw	r2, #4150	; 0x1036
 800170a:	4293      	cmp	r3, r2
 800170c:	d831      	bhi.n	8001772 <pwmSignalSwitch+0x40a>
 800170e:	4b3c      	ldr	r3, [pc, #240]	; (8001800 <pwmSignalSwitch+0x498>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b14      	cmp	r3, #20
 8001714:	d82d      	bhi.n	8001772 <pwmSignalSwitch+0x40a>
		updateDuttyCycle(&handlerPWM_8, duttyLux);
 8001716:	4b3c      	ldr	r3, [pc, #240]	; (8001808 <pwmSignalSwitch+0x4a0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	b29b      	uxth	r3, r3
 800171c:	4619      	mov	r1, r3
 800171e:	4842      	ldr	r0, [pc, #264]	; (8001828 <pwmSignalSwitch+0x4c0>)
 8001720:	f000 fdce 	bl	80022c0 <updateDuttyCycle>
		enableOutput(&handlerPWM_8);
 8001724:	4840      	ldr	r0, [pc, #256]	; (8001828 <pwmSignalSwitch+0x4c0>)
 8001726:	f000 fd47 	bl	80021b8 <enableOutput>
		startPwmSignal(&handlerPWM_8);
 800172a:	483f      	ldr	r0, [pc, #252]	; (8001828 <pwmSignalSwitch+0x4c0>)
 800172c:	f000 fd32 	bl	8002194 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 8001730:	2100      	movs	r1, #0
 8001732:	4837      	ldr	r0, [pc, #220]	; (8001810 <pwmSignalSwitch+0x4a8>)
 8001734:	f000 fdc4 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 8001738:	2100      	movs	r1, #0
 800173a:	4836      	ldr	r0, [pc, #216]	; (8001814 <pwmSignalSwitch+0x4ac>)
 800173c:	f000 fdc0 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 8001740:	2100      	movs	r1, #0
 8001742:	4835      	ldr	r0, [pc, #212]	; (8001818 <pwmSignalSwitch+0x4b0>)
 8001744:	f000 fdbc 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 8001748:	2100      	movs	r1, #0
 800174a:	4834      	ldr	r0, [pc, #208]	; (800181c <pwmSignalSwitch+0x4b4>)
 800174c:	f000 fdb8 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 8001750:	2100      	movs	r1, #0
 8001752:	4833      	ldr	r0, [pc, #204]	; (8001820 <pwmSignalSwitch+0x4b8>)
 8001754:	f000 fdb4 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 8001758:	2100      	movs	r1, #0
 800175a:	482c      	ldr	r0, [pc, #176]	; (800180c <pwmSignalSwitch+0x4a4>)
 800175c:	f000 fdb0 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 8001760:	2100      	movs	r1, #0
 8001762:	4830      	ldr	r0, [pc, #192]	; (8001824 <pwmSignalSwitch+0x4bc>)
 8001764:	f000 fdac 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 8001768:	2100      	movs	r1, #0
 800176a:	4830      	ldr	r0, [pc, #192]	; (800182c <pwmSignalSwitch+0x4c4>)
 800176c:	f000 fda8 	bl	80022c0 <updateDuttyCycle>
 8001770:	e043      	b.n	80017fa <pwmSignalSwitch+0x492>
	}else if ((dataADCChannel0[0] >= 2000 && dataADCChannel0[0] <= 2150) && (dataADCChannel1[0] >= 2000 && dataADCChannel1[0] <= 2150)){
 8001772:	4b24      	ldr	r3, [pc, #144]	; (8001804 <pwmSignalSwitch+0x49c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800177a:	d33e      	bcc.n	80017fa <pwmSignalSwitch+0x492>
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <pwmSignalSwitch+0x49c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f640 0266 	movw	r2, #2150	; 0x866
 8001784:	4293      	cmp	r3, r2
 8001786:	d838      	bhi.n	80017fa <pwmSignalSwitch+0x492>
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <pwmSignalSwitch+0x498>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001790:	d333      	bcc.n	80017fa <pwmSignalSwitch+0x492>
 8001792:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <pwmSignalSwitch+0x498>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f640 0266 	movw	r2, #2150	; 0x866
 800179a:	4293      	cmp	r3, r2
 800179c:	d82d      	bhi.n	80017fa <pwmSignalSwitch+0x492>
		updateDuttyCycle(&handlerPWM_9, duttyLux);
 800179e:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <pwmSignalSwitch+0x4a0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	4619      	mov	r1, r3
 80017a6:	4821      	ldr	r0, [pc, #132]	; (800182c <pwmSignalSwitch+0x4c4>)
 80017a8:	f000 fd8a 	bl	80022c0 <updateDuttyCycle>
		enableOutput(&handlerPWM_9);
 80017ac:	481f      	ldr	r0, [pc, #124]	; (800182c <pwmSignalSwitch+0x4c4>)
 80017ae:	f000 fd03 	bl	80021b8 <enableOutput>
		startPwmSignal(&handlerPWM_9);
 80017b2:	481e      	ldr	r0, [pc, #120]	; (800182c <pwmSignalSwitch+0x4c4>)
 80017b4:	f000 fcee 	bl	8002194 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 80017b8:	2100      	movs	r1, #0
 80017ba:	4815      	ldr	r0, [pc, #84]	; (8001810 <pwmSignalSwitch+0x4a8>)
 80017bc:	f000 fd80 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 80017c0:	2100      	movs	r1, #0
 80017c2:	4814      	ldr	r0, [pc, #80]	; (8001814 <pwmSignalSwitch+0x4ac>)
 80017c4:	f000 fd7c 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 80017c8:	2100      	movs	r1, #0
 80017ca:	4813      	ldr	r0, [pc, #76]	; (8001818 <pwmSignalSwitch+0x4b0>)
 80017cc:	f000 fd78 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 80017d0:	2100      	movs	r1, #0
 80017d2:	4812      	ldr	r0, [pc, #72]	; (800181c <pwmSignalSwitch+0x4b4>)
 80017d4:	f000 fd74 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 80017d8:	2100      	movs	r1, #0
 80017da:	4811      	ldr	r0, [pc, #68]	; (8001820 <pwmSignalSwitch+0x4b8>)
 80017dc:	f000 fd70 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 80017e0:	2100      	movs	r1, #0
 80017e2:	480a      	ldr	r0, [pc, #40]	; (800180c <pwmSignalSwitch+0x4a4>)
 80017e4:	f000 fd6c 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 80017e8:	2100      	movs	r1, #0
 80017ea:	480e      	ldr	r0, [pc, #56]	; (8001824 <pwmSignalSwitch+0x4bc>)
 80017ec:	f000 fd68 	bl	80022c0 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 80017f0:	2100      	movs	r1, #0
 80017f2:	480d      	ldr	r0, [pc, #52]	; (8001828 <pwmSignalSwitch+0x4c0>)
 80017f4:	f000 fd64 	bl	80022c0 <updateDuttyCycle>
	}
}
 80017f8:	e7ff      	b.n	80017fa <pwmSignalSwitch+0x492>
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000444 	.word	0x20000444
 8001804:	20000440 	.word	0x20000440
 8001808:	20000454 	.word	0x20000454
 800180c:	200003ec 	.word	0x200003ec
 8001810:	20000388 	.word	0x20000388
 8001814:	2000039c 	.word	0x2000039c
 8001818:	200003b0 	.word	0x200003b0
 800181c:	200003c4 	.word	0x200003c4
 8001820:	200003d8 	.word	0x200003d8
 8001824:	20000400 	.word	0x20000400
 8001828:	20000414 	.word	0x20000414
 800182c:	20000428 	.word	0x20000428

08001830 <parseCommands>:

void parseCommands(char *ptrBufferReception){
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af04      	add	r7, sp, #16
 8001836:	6078      	str	r0, [r7, #4]
	 * en cuenta la funcion que cumple coolterm para enviar strings de acuerdo a la función
	 * que necesita que realice el sistema. Debe informarse al usuario que la recomendacion
	 * inicial es que use el comando "help" que despliega un menu de ayuda que le dice cuales
	 * son los comandos y la forma de introducirlos de acuerdo con la función que se requiere.
	 */
	sscanf(ptrBufferReception,"%s %u %u %u %s",cmd,&firstParameter,&secondParameter,&thirdparameter,userMsg);
 8001838:	4b3f      	ldr	r3, [pc, #252]	; (8001938 <parseCommands+0x108>)
 800183a:	9302      	str	r3, [sp, #8]
 800183c:	4b3f      	ldr	r3, [pc, #252]	; (800193c <parseCommands+0x10c>)
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	4b3f      	ldr	r3, [pc, #252]	; (8001940 <parseCommands+0x110>)
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	4b3f      	ldr	r3, [pc, #252]	; (8001944 <parseCommands+0x114>)
 8001846:	4a40      	ldr	r2, [pc, #256]	; (8001948 <parseCommands+0x118>)
 8001848:	4940      	ldr	r1, [pc, #256]	; (800194c <parseCommands+0x11c>)
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f002 fa78 	bl	8003d40 <siscanf>
	//Este primer comando imprime una lista con los otros comandos que tiene el equipo
	if (strcmp(cmd, "help") == 0){
 8001850:	493f      	ldr	r1, [pc, #252]	; (8001950 <parseCommands+0x120>)
 8001852:	483d      	ldr	r0, [pc, #244]	; (8001948 <parseCommands+0x118>)
 8001854:	f7fe fcc4 	bl	80001e0 <strcmp>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d164      	bne.n	8001928 <parseCommands+0xf8>
		writeMsg(&USART2Comm, "QUE ESTE MENU DE AYUDA TE ACOMPANE\n");
 800185e:	493d      	ldr	r1, [pc, #244]	; (8001954 <parseCommands+0x124>)
 8001860:	483d      	ldr	r0, [pc, #244]	; (8001958 <parseCommands+0x128>)
 8001862:	f000 ffee 	bl	8002842 <writeMsg>
		writeMsg(&USART2Comm, "⠀⢀⣠⣄⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣴⣶⡾⠿⠿⠿⠿⢷⣶⣦⣤⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 8001866:	493d      	ldr	r1, [pc, #244]	; (800195c <parseCommands+0x12c>)
 8001868:	483b      	ldr	r0, [pc, #236]	; (8001958 <parseCommands+0x128>)
 800186a:	f000 ffea 	bl	8002842 <writeMsg>
		writeMsg(&USART2Comm, "⢰⣿⡟⠛⠛⠛⠻⠿⠿⢿⣶⣶⣦⣤⣤⣀⣀⡀⣀⣴⣾⡿⠟⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠻⢿⣷⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣀⣀⣀⣀⡀\n");
 800186e:	493c      	ldr	r1, [pc, #240]	; (8001960 <parseCommands+0x130>)
 8001870:	4839      	ldr	r0, [pc, #228]	; (8001958 <parseCommands+0x128>)
 8001872:	f000 ffe6 	bl	8002842 <writeMsg>
		writeMsg(&USART2Comm, "⠀⠻⣿⣦⡀⠀⠉⠓⠶⢦⣄⣀⠉⠉⠛⠛⠻⠿⠟⠋⠁⠀⠀⠀⣤⡀⠀⠀⢠⠀⠀⠀⣠⠀⠀⠀⠀⠈⠙⠻⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠟⠛⠛⢻⣿\n");
 8001876:	493b      	ldr	r1, [pc, #236]	; (8001964 <parseCommands+0x134>)
 8001878:	4837      	ldr	r0, [pc, #220]	; (8001958 <parseCommands+0x128>)
 800187a:	f000 ffe2 	bl	8002842 <writeMsg>
		writeMsg(&USART2Comm, "⠀⠀⠈⠻⣿⣦⠀⠀⠀⠀⠈⠙⠻⢷⣶⣤⡀⠀⠀⠀⠀⢀⣀⡀⠀⠙⢷⡀⠸⡇⠀⣰⠇⠀⢀⣀⣀⠀⠀⠀⠀⠀⠀⣀⣠⣤⣤⣶⡶⠶⠶⠒⠂⠀⠀⣠⣾⠟\n");
 800187e:	493a      	ldr	r1, [pc, #232]	; (8001968 <parseCommands+0x138>)
 8001880:	4835      	ldr	r0, [pc, #212]	; (8001958 <parseCommands+0x128>)
 8001882:	f000 ffde 	bl	8002842 <writeMsg>
		writeMsg(&USART2Comm, "⠀⠀⠀⠀⠈⢿⣷⡀⠀⠀⠀⠀⠀⠀⠈⢻⣿⡄⣠⣴⣿⣯⣭⣽⣷⣆⠀⠁⠀⠀⠀⠀⢠⣾⣿⣿⣿⣿⣦⡀⠀⣠⣾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠀⣠⣾⡟⠁⠀\n");
 8001886:	4939      	ldr	r1, [pc, #228]	; (800196c <parseCommands+0x13c>)
 8001888:	4833      	ldr	r0, [pc, #204]	; (8001958 <parseCommands+0x128>)
 800188a:	f000 ffda 	bl	8002842 <writeMsg>
		writeMsg(&USART2Comm, "⠀⠀⠀⠀⠀⠈⢻⣷⣄⠀⠀⠀⠀⠀⠀⠀⣿⡗⢻⣿⣧⣽⣿⣿⣿⣧⠀⠀⣀⣀⠀⢠⣿⣧⣼⣿⣿⣿⣿⠗⠰⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⡿⠋⠀⠀⠀\n");
 800188e:	4938      	ldr	r1, [pc, #224]	; (8001970 <parseCommands+0x140>)
 8001890:	4831      	ldr	r0, [pc, #196]	; (8001958 <parseCommands+0x128>)
 8001892:	f000 ffd6 	bl	8002842 <writeMsg>
		writeMsg(&USART2Comm, "⠀⠀⠀⠀⠀⠀⠀⠙⢿⣶⣄⡀⠀⠀⠀⠀⠸⠃⠈⠻⣿⣿⣿⣿⣿⡿⠃⠾⣥⡬⠗⠸⣿⣿⣿⣿⣿⡿⠛⠀⢀⡟⠀⠀⠀⠀⠀⠀⣀⣠⣾⡿⠋⠀⠀⠀⠀⠀\n");
 8001896:	4937      	ldr	r1, [pc, #220]	; (8001974 <parseCommands+0x144>)
 8001898:	482f      	ldr	r0, [pc, #188]	; (8001958 <parseCommands+0x128>)
 800189a:	f000 ffd2 	bl	8002842 <writeMsg>
		writeMsg(&USART2Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠿⣷⣶⣤⣤⣄⣰⣄⠀⠀⠉⠉⠉⠁⠀⢀⣀⣠⣄⣀⡀⠀⠉⠉⠉⠀⠀⢀⣠⣾⣥⣤⣤⣤⣶⣶⡿⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀\n");
 800189e:	4936      	ldr	r1, [pc, #216]	; (8001978 <parseCommands+0x148>)
 80018a0:	482d      	ldr	r0, [pc, #180]	; (8001958 <parseCommands+0x128>)
 80018a2:	f000 ffce 	bl	8002842 <writeMsg>
		writeMsg(&USART2Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⢻⣿⠛⢿⣷⣦⣤⣴⣶⣶⣦⣤⣤⣤⣤⣬⣥⡴⠶⠾⠿⠿⠿⠿⠛⢛⣿⣿⣿⣯⡉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 80018a6:	4935      	ldr	r1, [pc, #212]	; (800197c <parseCommands+0x14c>)
 80018a8:	482b      	ldr	r0, [pc, #172]	; (8001958 <parseCommands+0x128>)
 80018aa:	f000 ffca 	bl	8002842 <writeMsg>
		writeMsg(&USART2Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣧⡀⠈⠉⠀⠈⠁⣾⠛⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣿⠟⠉⣹⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 80018ae:	4934      	ldr	r1, [pc, #208]	; (8001980 <parseCommands+0x150>)
 80018b0:	4829      	ldr	r0, [pc, #164]	; (8001958 <parseCommands+0x128>)
 80018b2:	f000 ffc6 	bl	8002842 <writeMsg>
		writeMsg(&USART2Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣸⣿⣿⣦⣀⠀⠀⠀⢻⡀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣶⣿⠋⣿⠛⠃⠀⣈⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 80018b6:	4933      	ldr	r1, [pc, #204]	; (8001984 <parseCommands+0x154>)
 80018b8:	4827      	ldr	r0, [pc, #156]	; (8001958 <parseCommands+0x128>)
 80018ba:	f000 ffc2 	bl	8002842 <writeMsg>
		writeMsg(&USART2Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡿⢿⡀⠈⢹⡿⠶⣶⣼⡇⠀⢀⣀⣀⣤⣴⣾⠟⠋⣡⣿⡟⠀⢻⣶⠶⣿⣿⠛⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 80018be:	4932      	ldr	r1, [pc, #200]	; (8001988 <parseCommands+0x158>)
 80018c0:	4825      	ldr	r0, [pc, #148]	; (8001958 <parseCommands+0x128>)
 80018c2:	f000 ffbe 	bl	8002842 <writeMsg>
		writeMsg(&USART2Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣷⡈⢿⣦⣸⠇⢀⡿⠿⠿⡿⠿⠿⣿⠛⠋⠁⠀⣴⠟⣿⣧⡀⠈⢁⣰⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 80018c6:	4931      	ldr	r1, [pc, #196]	; (800198c <parseCommands+0x15c>)
 80018c8:	4823      	ldr	r0, [pc, #140]	; (8001958 <parseCommands+0x128>)
 80018ca:	f000 ffba 	bl	8002842 <writeMsg>
		writeMsg(&USART2Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⢻⣦⣈⣽⣀⣾⠃⠀⢸⡇⠀⢸⡇⠀⢀⣠⡾⠋⢰⣿⣿⣿⣿⡿⠟⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 80018ce:	4930      	ldr	r1, [pc, #192]	; (8001990 <parseCommands+0x160>)
 80018d0:	4821      	ldr	r0, [pc, #132]	; (8001958 <parseCommands+0x128>)
 80018d2:	f000 ffb6 	bl	8002842 <writeMsg>
		writeMsg(&USART2Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠿⢿⣿⣿⡟⠛⠃⠀⠀⣾⠀⠀⢸⡇⠐⠿⠋⠀⠀⣿⢻⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 80018d6:	492f      	ldr	r1, [pc, #188]	; (8001994 <parseCommands+0x164>)
 80018d8:	481f      	ldr	r0, [pc, #124]	; (8001958 <parseCommands+0x128>)
 80018da:	f000 ffb2 	bl	8002842 <writeMsg>
		writeMsg(&USART2Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠁⢀⡴⠋⠀⣿⠀⠀⢸⠇⠀⠀⠀⠀⠀⠁⢸⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 80018de:	492e      	ldr	r1, [pc, #184]	; (8001998 <parseCommands+0x168>)
 80018e0:	481d      	ldr	r0, [pc, #116]	; (8001958 <parseCommands+0x128>)
 80018e2:	f000 ffae 	bl	8002842 <writeMsg>
		writeMsg(&USART2Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⡿⠟⠋⠀⠀⠀⣿⠀⠀⣸⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 80018e6:	492d      	ldr	r1, [pc, #180]	; (800199c <parseCommands+0x16c>)
 80018e8:	481b      	ldr	r0, [pc, #108]	; (8001958 <parseCommands+0x128>)
 80018ea:	f000 ffaa 	bl	8002842 <writeMsg>
		writeMsg(&USART2Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣁⣀⠀⠀⠀⠀⣿⡀⠀⣿⠀⠀⠀⠀⠀⠀⢀⣈⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 80018ee:	492c      	ldr	r1, [pc, #176]	; (80019a0 <parseCommands+0x170>)
 80018f0:	4819      	ldr	r0, [pc, #100]	; (8001958 <parseCommands+0x128>)
 80018f2:	f000 ffa6 	bl	8002842 <writeMsg>
		writeMsg(&USART2Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠛⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠟⠛⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 80018f6:	492b      	ldr	r1, [pc, #172]	; (80019a4 <parseCommands+0x174>)
 80018f8:	4817      	ldr	r0, [pc, #92]	; (8001958 <parseCommands+0x128>)
 80018fa:	f000 ffa2 	bl	8002842 <writeMsg>
		writeMsg(&USART2Comm, "Help Menu CMDs:\n");
 80018fe:	492a      	ldr	r1, [pc, #168]	; (80019a8 <parseCommands+0x178>)
 8001900:	4815      	ldr	r0, [pc, #84]	; (8001958 <parseCommands+0x128>)
 8001902:	f000 ff9e 	bl	8002842 <writeMsg>
		writeMsg(&USART2Comm, "Bienvenido al variador de campo magnetico, por favor tenga discreción\n");
 8001906:	4929      	ldr	r1, [pc, #164]	; (80019ac <parseCommands+0x17c>)
 8001908:	4813      	ldr	r0, [pc, #76]	; (8001958 <parseCommands+0x128>)
 800190a:	f000 ff9a 	bl	8002842 <writeMsg>
		writeMsg(&USART2Comm, "Gire el Joystick en la posición de la bobina que desee encender\n");
 800190e:	4928      	ldr	r1, [pc, #160]	; (80019b0 <parseCommands+0x180>)
 8001910:	4811      	ldr	r0, [pc, #68]	; (8001958 <parseCommands+0x128>)
 8001912:	f000 ff96 	bl	8002842 <writeMsg>
		writeMsg(&USART2Comm, "La entrada de luz del luxometro define qué tanta corriente deja pasar el MOSFET\n");
 8001916:	4927      	ldr	r1, [pc, #156]	; (80019b4 <parseCommands+0x184>)
 8001918:	480f      	ldr	r0, [pc, #60]	; (8001958 <parseCommands+0x128>)
 800191a:	f000 ff92 	bl	8002842 <writeMsg>
		writeMsg(&USART2Comm, "ESPERO HABERTE AYUDADO\n");
 800191e:	4926      	ldr	r1, [pc, #152]	; (80019b8 <parseCommands+0x188>)
 8001920:	480d      	ldr	r0, [pc, #52]	; (8001958 <parseCommands+0x128>)
 8001922:	f000 ff8e 	bl	8002842 <writeMsg>
	}else{
		writeMsg(&USART2Comm, "invalid comand, please check the help menu\n");
	}
}
 8001926:	e003      	b.n	8001930 <parseCommands+0x100>
		writeMsg(&USART2Comm, "invalid comand, please check the help menu\n");
 8001928:	4924      	ldr	r1, [pc, #144]	; (80019bc <parseCommands+0x18c>)
 800192a:	480b      	ldr	r0, [pc, #44]	; (8001958 <parseCommands+0x128>)
 800192c:	f000 ff89 	bl	8002842 <writeMsg>
}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	200004e0 	.word	0x200004e0
 800193c:	20000528 	.word	0x20000528
 8001940:	20000524 	.word	0x20000524
 8001944:	20000520 	.word	0x20000520
 8001948:	2000049c 	.word	0x2000049c
 800194c:	08008180 	.word	0x08008180
 8001950:	08008190 	.word	0x08008190
 8001954:	08008198 	.word	0x08008198
 8001958:	200002e4 	.word	0x200002e4
 800195c:	080081bc 	.word	0x080081bc
 8001960:	0800826c 	.word	0x0800826c
 8001964:	0800831c 	.word	0x0800831c
 8001968:	080083cc 	.word	0x080083cc
 800196c:	0800847c 	.word	0x0800847c
 8001970:	0800852c 	.word	0x0800852c
 8001974:	080085dc 	.word	0x080085dc
 8001978:	0800868c 	.word	0x0800868c
 800197c:	0800873c 	.word	0x0800873c
 8001980:	080087ec 	.word	0x080087ec
 8001984:	0800889c 	.word	0x0800889c
 8001988:	0800894c 	.word	0x0800894c
 800198c:	080089fc 	.word	0x080089fc
 8001990:	08008aac 	.word	0x08008aac
 8001994:	08008b5c 	.word	0x08008b5c
 8001998:	08008c0c 	.word	0x08008c0c
 800199c:	08008cbc 	.word	0x08008cbc
 80019a0:	08008d6c 	.word	0x08008d6c
 80019a4:	08008e1c 	.word	0x08008e1c
 80019a8:	08008ecc 	.word	0x08008ecc
 80019ac:	08008ee0 	.word	0x08008ee0
 80019b0:	08008f28 	.word	0x08008f28
 80019b4:	08008f6c 	.word	0x08008f6c
 80019b8:	08008fc0 	.word	0x08008fc0
 80019bc:	08008fd8 	.word	0x08008fd8

080019c0 <BasicTimer5_Callback>:

/* Timer para el led de estado */
void BasicTimer5_Callback(void){
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	if(counterADC == 5){
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <BasicTimer5_Callback+0x30>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	2b05      	cmp	r3, #5
 80019ca:	d102      	bne.n	80019d2 <BasicTimer5_Callback+0x12>
		counterADC = 0;
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <BasicTimer5_Callback+0x30>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	801a      	strh	r2, [r3, #0]
	}
	flagADC = 1;
 80019d2:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <BasicTimer5_Callback+0x34>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	801a      	strh	r2, [r3, #0]
	counterADC++;
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <BasicTimer5_Callback+0x30>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	3301      	adds	r3, #1
 80019de:	b29a      	uxth	r2, r3
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <BasicTimer5_Callback+0x30>)
 80019e2:	801a      	strh	r2, [r3, #0]
	GPIOxTooglePin(&handlerStateLED);
 80019e4:	4804      	ldr	r0, [pc, #16]	; (80019f8 <BasicTimer5_Callback+0x38>)
 80019e6:	f000 faf9 	bl	8001fdc <GPIOxTooglePin>
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000450 	.word	0x20000450
 80019f4:	2000044e 	.word	0x2000044e
 80019f8:	20000234 	.word	0x20000234

080019fc <usart2Rx_Callback>:

// Callback para los comandos del USART.
void usart2Rx_Callback(void){
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
	rxData = getRxData();
 8001a00:	f000 ff38 	bl	8002874 <getRxData>
 8001a04:	4603      	mov	r3, r0
 8001a06:	461a      	mov	r2, r3
 8001a08:	4b01      	ldr	r3, [pc, #4]	; (8001a10 <usart2Rx_Callback+0x14>)
 8001a0a:	701a      	strb	r2, [r3, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	2000044c 	.word	0x2000044c

08001a14 <adcComplete_Callback>:

// Esta función controla el contador del ADC.(Hace las veces de callback)
void adcComplete_Callback(void){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
	if(cont == 0){
 8001a18:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <adcComplete_Callback+0x8c>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10a      	bne.n	8001a36 <adcComplete_Callback+0x22>
		dataADCChannel0[cont2] = getADC();
 8001a20:	f000 ffb0 	bl	8002984 <getADC>
 8001a24:	4603      	mov	r3, r0
 8001a26:	4619      	mov	r1, r3
 8001a28:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <adcComplete_Callback+0x90>)
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <adcComplete_Callback+0x94>)
 8001a30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001a34:	e01e      	b.n	8001a74 <adcComplete_Callback+0x60>
	}
	else if (cont == 1){
 8001a36:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <adcComplete_Callback+0x8c>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d10a      	bne.n	8001a54 <adcComplete_Callback+0x40>
		dataADCChannel1[cont2] = getADC();
 8001a3e:	f000 ffa1 	bl	8002984 <getADC>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4619      	mov	r1, r3
 8001a46:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <adcComplete_Callback+0x90>)
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4b17      	ldr	r3, [pc, #92]	; (8001aac <adcComplete_Callback+0x98>)
 8001a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001a52:	e00f      	b.n	8001a74 <adcComplete_Callback+0x60>
	}else{
		dataADCChannel2[cont2] = getADC();
 8001a54:	f000 ff96 	bl	8002984 <getADC>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <adcComplete_Callback+0x90>)
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <adcComplete_Callback+0x9c>)
 8001a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		cont2++;
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <adcComplete_Callback+0x90>)
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <adcComplete_Callback+0x90>)
 8001a72:	801a      	strh	r2, [r3, #0]
	}
	cont++;
 8001a74:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <adcComplete_Callback+0x8c>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <adcComplete_Callback+0x8c>)
 8001a7e:	701a      	strb	r2, [r3, #0]
	if(cont2 == 1){
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <adcComplete_Callback+0x90>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d102      	bne.n	8001a8e <adcComplete_Callback+0x7a>
		cont2 = 0;
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <adcComplete_Callback+0x90>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	801a      	strh	r2, [r3, #0]
	}
	if(cont == 3){
 8001a8e:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <adcComplete_Callback+0x8c>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d102      	bne.n	8001a9c <adcComplete_Callback+0x88>
		cont = 0;
 8001a96:	4b02      	ldr	r3, [pc, #8]	; (8001aa0 <adcComplete_Callback+0x8c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
	}
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	2000043c 	.word	0x2000043c
 8001aa4:	2000043e 	.word	0x2000043e
 8001aa8:	20000440 	.word	0x20000440
 8001aac:	20000444 	.word	0x20000444
 8001ab0:	20000448 	.word	0x20000448

08001ab4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ab4:	480d      	ldr	r0, [pc, #52]	; (8001aec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ab6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ab8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001abc:	480c      	ldr	r0, [pc, #48]	; (8001af0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001abe:	490d      	ldr	r1, [pc, #52]	; (8001af4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ac0:	4a0d      	ldr	r2, [pc, #52]	; (8001af8 <LoopForever+0xe>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac4:	e002      	b.n	8001acc <LoopCopyDataInit>

08001ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aca:	3304      	adds	r3, #4

08001acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad0:	d3f9      	bcc.n	8001ac6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ad4:	4c0a      	ldr	r4, [pc, #40]	; (8001b00 <LoopForever+0x16>)
  movs r3, #0
 8001ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad8:	e001      	b.n	8001ade <LoopFillZerobss>

08001ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001adc:	3204      	adds	r2, #4

08001ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae0:	d3fb      	bcc.n	8001ada <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ae2:	f001 fa75 	bl	8002fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ae6:	f7ff f91f 	bl	8000d28 <main>

08001aea <LoopForever>:

LoopForever:
    b LoopForever
 8001aea:	e7fe      	b.n	8001aea <LoopForever>
  ldr   r0, =_estack
 8001aec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af4:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8001af8:	080094d4 	.word	0x080094d4
  ldr r2, =_sbss
 8001afc:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8001b00:	20000558 	.word	0x20000558

08001b04 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b04:	e7fe      	b.n	8001b04 <BusFault_Handler>
	...

08001b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	db0b      	blt.n	8001b32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	f003 021f 	and.w	r2, r3, #31
 8001b20:	4906      	ldr	r1, [pc, #24]	; (8001b3c <__NVIC_EnableIRQ+0x34>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	095b      	lsrs	r3, r3, #5
 8001b28:	2001      	movs	r0, #1
 8001b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	e000e100 	.word	0xe000e100

08001b40 <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrBTimerHandler->ptrTIMx;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a4e      	ldr	r2, [pc, #312]	; (8001c88 <BasicTimer_Config+0x148>)
 8001b4e:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b50:	b672      	cpsid	i
}
 8001b52:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();
	/* 1. Activar la señal de reloj del periférico requerido */
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b5c:	d106      	bne.n	8001b6c <BasicTimer_Config+0x2c>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001b5e:	4b4b      	ldr	r3, [pc, #300]	; (8001c8c <BasicTimer_Config+0x14c>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	4a4a      	ldr	r2, [pc, #296]	; (8001c8c <BasicTimer_Config+0x14c>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6a:	e024      	b.n	8001bb6 <BasicTimer_Config+0x76>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a47      	ldr	r2, [pc, #284]	; (8001c90 <BasicTimer_Config+0x150>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d106      	bne.n	8001b84 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001b76:	4b45      	ldr	r3, [pc, #276]	; (8001c8c <BasicTimer_Config+0x14c>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	4a44      	ldr	r2, [pc, #272]	; (8001c8c <BasicTimer_Config+0x14c>)
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	6413      	str	r3, [r2, #64]	; 0x40
 8001b82:	e018      	b.n	8001bb6 <BasicTimer_Config+0x76>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a42      	ldr	r2, [pc, #264]	; (8001c94 <BasicTimer_Config+0x154>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d106      	bne.n	8001b9c <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001b8e:	4b3f      	ldr	r3, [pc, #252]	; (8001c8c <BasicTimer_Config+0x14c>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	4a3e      	ldr	r2, [pc, #248]	; (8001c8c <BasicTimer_Config+0x14c>)
 8001b94:	f043 0304 	orr.w	r3, r3, #4
 8001b98:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9a:	e00c      	b.n	8001bb6 <BasicTimer_Config+0x76>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a3d      	ldr	r2, [pc, #244]	; (8001c98 <BasicTimer_Config+0x158>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d106      	bne.n	8001bb4 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001ba6:	4b39      	ldr	r3, [pc, #228]	; (8001c8c <BasicTimer_Config+0x14c>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	4a38      	ldr	r2, [pc, #224]	; (8001c8c <BasicTimer_Config+0x14c>)
 8001bac:	f043 0308 	orr.w	r3, r3, #8
 8001bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb2:	e000      	b.n	8001bb6 <BasicTimer_Config+0x76>
	}

	else{
		__NOP();
 8001bb4:	bf00      	nop
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */
	// -1 porque el contador empieza en 0
	ptrBTimerHandler->ptrTIMx-> PSC = ptrBTimerHandler ->TIMx_Config.TIMx_speed - 1;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	3a01      	subs	r2, #1
 8001bc0:	629a      	str	r2, [r3, #40]	; 0x28

	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	791b      	ldrb	r3, [r3, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d112      	bne.n	8001bf0 <BasicTimer_Config+0xb0>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Necesitamos poner la direccion en 0 para que cuente hacia arria TIM_CR1_DIR = 1, entonces
		// lo negamos y hacemos una AND con el valor actual.
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0210 	bic.w	r2, r2, #16
 8001bd8:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	3a01      	subs	r2, #1
 8001be4:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2200      	movs	r2, #0
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24
 8001bee:	e00d      	b.n	8001c0c <BasicTimer_Config+0xcc>

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		// Cuando CR1 = 1 es descendente
		ptrBTimerHandler->ptrTIMx->CR1 = TIM_CR1_DIR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2210      	movs	r2, #16
 8001bf6:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		ptrBTimerHandler-> ptrTIMx->ARR = 0;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	3a01      	subs	r2, #1
 8001c0a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	// El registro encargado de la interrupcion es el UIE

	// Modificar con el ciclo If
	ptrBTimerHandler->ptrTIMx->DIER |= ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable; //TIM_DIER_UIE
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	7c1b      	ldrb	r3, [r3, #16]
 8001c26:	4619      	mov	r1, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c38:	d103      	bne.n	8001c42 <BasicTimer_Config+0x102>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8001c3a:	201c      	movs	r0, #28
 8001c3c:	f7ff ff64 	bl	8001b08 <__NVIC_EnableIRQ>
 8001c40:	e01b      	b.n	8001c7a <BasicTimer_Config+0x13a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <BasicTimer_Config+0x150>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d103      	bne.n	8001c54 <BasicTimer_Config+0x114>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8001c4c:	201d      	movs	r0, #29
 8001c4e:	f7ff ff5b 	bl	8001b08 <__NVIC_EnableIRQ>
 8001c52:	e012      	b.n	8001c7a <BasicTimer_Config+0x13a>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0e      	ldr	r2, [pc, #56]	; (8001c94 <BasicTimer_Config+0x154>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d103      	bne.n	8001c66 <BasicTimer_Config+0x126>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8001c5e:	201e      	movs	r0, #30
 8001c60:	f7ff ff52 	bl	8001b08 <__NVIC_EnableIRQ>
 8001c64:	e009      	b.n	8001c7a <BasicTimer_Config+0x13a>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a0b      	ldr	r2, [pc, #44]	; (8001c98 <BasicTimer_Config+0x158>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d103      	bne.n	8001c78 <BasicTimer_Config+0x138>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8001c70:	2032      	movs	r0, #50	; 0x32
 8001c72:	f7ff ff49 	bl	8001b08 <__NVIC_EnableIRQ>
 8001c76:	e000      	b.n	8001c7a <BasicTimer_Config+0x13a>
	}

	else{
		__NOP();
 8001c78:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8001c7a:	b662      	cpsie	i
}
 8001c7c:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	2000052c 	.word	0x2000052c
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40000400 	.word	0x40000400
 8001c94:	40000800 	.word	0x40000800
 8001c98:	40000c00 	.word	0x40000c00

08001c9c <BasicTimer2_Callback>:

__attribute__((weak)) void BasicTimer2_Callback(void){
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001ca0:	bf00      	nop
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr

08001caa <BasicTimer3_Callback>:
__attribute__((weak)) void BasicTimer3_Callback(void){
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001cae:	bf00      	nop
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <BasicTimer4_Callback>:
__attribute__((weak)) void BasicTimer4_Callback(void){
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001cbc:	bf00      	nop
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM2->SR &= ~TIM_SR_UIF;
 8001cca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer2_Callback();
 8001cda:	f7ff ffdf 	bl	8001c9c <BasicTimer2_Callback>
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM3->SR &= ~TIM_SR_UIF;
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <TIM3_IRQHandler+0x18>)
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	4a03      	ldr	r2, [pc, #12]	; (8001cfc <TIM3_IRQHandler+0x18>)
 8001cee:	f023 0301 	bic.w	r3, r3, #1
 8001cf2:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer3_Callback();
 8001cf4:	f7ff ffd9 	bl	8001caa <BasicTimer3_Callback>
}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40000400 	.word	0x40000400

08001d00 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM4->SR &= ~TIM_SR_UIF;
 8001d04:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <TIM4_IRQHandler+0x18>)
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	4a03      	ldr	r2, [pc, #12]	; (8001d18 <TIM4_IRQHandler+0x18>)
 8001d0a:	f023 0301 	bic.w	r3, r3, #1
 8001d0e:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer4_Callback();
 8001d10:	f7ff ffd2 	bl	8001cb8 <BasicTimer4_Callback>
}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40000800 	.word	0x40000800

08001d1c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM5->SR &= ~TIM_SR_UIF;
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <TIM5_IRQHandler+0x18>)
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	4a03      	ldr	r2, [pc, #12]	; (8001d34 <TIM5_IRQHandler+0x18>)
 8001d26:	f023 0301 	bic.w	r3, r3, #1
 8001d2a:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer5_Callback();
 8001d2c:	f7ff fe48 	bl	80019c0 <BasicTimer5_Callback>
}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40000c00 	.word	0x40000c00

08001d38 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemento "activar el periferico o activar la señal de reloj del periferico)
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60bb      	str	r3, [r7, #8]

	// 1)Activar el periferico
	//verificamos para GPIOA
	if(pGPIOHandler->pGPIOx == GPIOA){
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a87      	ldr	r2, [pc, #540]	; (8001f6c <GPIO_Config+0x234>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d106      	bne.n	8001d60 <GPIO_Config+0x28>
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 8001d52:	4b87      	ldr	r3, [pc, #540]	; (8001f70 <GPIO_Config+0x238>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	4a86      	ldr	r2, [pc, #536]	; (8001f70 <GPIO_Config+0x238>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5e:	e03a      	b.n	8001dd6 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx == GPIOB){
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a83      	ldr	r2, [pc, #524]	; (8001f74 <GPIO_Config+0x23c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d106      	bne.n	8001d78 <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 8001d6a:	4b81      	ldr	r3, [pc, #516]	; (8001f70 <GPIO_Config+0x238>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a80      	ldr	r2, [pc, #512]	; (8001f70 <GPIO_Config+0x238>)
 8001d70:	f043 0302 	orr.w	r3, r3, #2
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	e02e      	b.n	8001dd6 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if(pGPIOHandler->pGPIOx == GPIOC){
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a7e      	ldr	r2, [pc, #504]	; (8001f78 <GPIO_Config+0x240>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d106      	bne.n	8001d90 <GPIO_Config+0x58>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 8001d82:	4b7b      	ldr	r3, [pc, #492]	; (8001f70 <GPIO_Config+0x238>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a7a      	ldr	r2, [pc, #488]	; (8001f70 <GPIO_Config+0x238>)
 8001d88:	f043 0304 	orr.w	r3, r3, #4
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	e022      	b.n	8001dd6 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if(pGPIOHandler->pGPIOx == GPIOD){
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a79      	ldr	r2, [pc, #484]	; (8001f7c <GPIO_Config+0x244>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d106      	bne.n	8001da8 <GPIO_Config+0x70>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 8001d9a:	4b75      	ldr	r3, [pc, #468]	; (8001f70 <GPIO_Config+0x238>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a74      	ldr	r2, [pc, #464]	; (8001f70 <GPIO_Config+0x238>)
 8001da0:	f043 0308 	orr.w	r3, r3, #8
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	e016      	b.n	8001dd6 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if(pGPIOHandler->pGPIOx == GPIOE){
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a74      	ldr	r2, [pc, #464]	; (8001f80 <GPIO_Config+0x248>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d106      	bne.n	8001dc0 <GPIO_Config+0x88>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 8001db2:	4b6f      	ldr	r3, [pc, #444]	; (8001f70 <GPIO_Config+0x238>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a6e      	ldr	r2, [pc, #440]	; (8001f70 <GPIO_Config+0x238>)
 8001db8:	f043 0310 	orr.w	r3, r3, #16
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	e00a      	b.n	8001dd6 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOH
	else if(pGPIOHandler->pGPIOx == GPIOH){
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a6f      	ldr	r2, [pc, #444]	; (8001f84 <GPIO_Config+0x24c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d105      	bne.n	8001dd6 <GPIO_Config+0x9e>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 8001dca:	4b69      	ldr	r3, [pc, #420]	; (8001f70 <GPIO_Config+0x238>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a68      	ldr	r2, [pc, #416]	; (8001f70 <GPIO_Config+0x238>)
 8001dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
	// Despues de activado, podemos comenzar a configurar.

	// 2) COnfigurando el registro GPIOx_MODER
	// Acá estamos leyendo config, moviendo "PinNumber" veces hacia la izquierda
	// ese valor (shift left) y todo eso lo cargamos en la variable auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	795b      	ldrb	r3, [r3, #5]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	791b      	ldrb	r3, [r3, #4]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	60fb      	str	r3, [r7, #12]
	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro
	 * (debemos escribir 0b00) para lo cual aplicamos una mascara y una operación de
	 * bitwise AND
	 */
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	791b      	ldrb	r3, [r3, #4]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	2103      	movs	r1, #3
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	400a      	ands	r2, r1
 8001e04:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6819      	ldr	r1, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	7a1b      	ldrb	r3, [r3, #8]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	791b      	ldrb	r3, [r3, #4]
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	791b      	ldrb	r3, [r3, #4]
 8001e30:	4619      	mov	r1, r3
 8001e32:	2301      	movs	r3, #1
 8001e34:	408b      	lsls	r3, r1
 8001e36:	43db      	mvns	r3, r3
 8001e38:	4619      	mov	r1, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	400a      	ands	r2, r1
 8001e40:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6859      	ldr	r1, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	799b      	ldrb	r3, [r3, #6]
 8001e56:	461a      	mov	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	791b      	ldrb	r3, [r3, #4]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0B11 << 2 *pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	791b      	ldrb	r3, [r3, #4]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	2103      	movs	r1, #3
 8001e72:	fa01 f303 	lsl.w	r3, r1, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	4619      	mov	r1, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	400a      	ands	r2, r1
 8001e80:	609a      	str	r2, [r3, #8]

	//cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6899      	ldr	r1, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull up pull down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	79db      	ldrb	r3, [r3, #7]
 8001e96:	461a      	mov	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	791b      	ldrb	r3, [r3, #4]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	791b      	ldrb	r3, [r3, #4]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	2103      	movs	r1, #3
 8001eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	4619      	mov	r1, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	400a      	ands	r2, r1
 8001ec0:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68d9      	ldr	r1, [r3, #12]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas.. se vera luego
	if (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	795b      	ldrb	r3, [r3, #5]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d143      	bne.n	8001f62 <GPIO_Config+0x22a>

		//Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	791b      	ldrb	r3, [r3, #4]
 8001ede:	2b07      	cmp	r3, #7
 8001ee0:	d81f      	bhi.n	8001f22 <GPIO_Config+0x1ea>
			//Estamos en el registro AGRL, que controla los piner del pIN_0 AL PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	791b      	ldrb	r3, [r3, #4]
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del tegistro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6a1a      	ldr	r2, [r3, #32]
 8001ef0:	210f      	movs	r1, #15
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	4619      	mov	r1, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	400a      	ands	r2, r1
 8001f02:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor confiurado en la posicon seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6a1a      	ldr	r2, [r3, #32]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	7a5b      	ldrb	r3, [r3, #9]
 8001f0e:	4619      	mov	r1, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	4619      	mov	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} //Fin del GPIO_Config
 8001f20:	e01f      	b.n	8001f62 <GPIO_Config+0x22a>
			auxPosition = 4* (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber -8);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	791b      	ldrb	r3, [r3, #4]
 8001f26:	3b08      	subs	r3, #8
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f32:	210f      	movs	r1, #15
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	400a      	ands	r2, r1
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7a5b      	ldrb	r3, [r3, #9]
 8001f50:	4619      	mov	r1, r3
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	fa01 f303 	lsl.w	r3, r1, r3
 8001f58:	4619      	mov	r1, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	625a      	str	r2, [r3, #36]	; 0x24
} //Fin del GPIO_Config
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	40020000 	.word	0x40020000
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40020400 	.word	0x40020400
 8001f78:	40020800 	.word	0x40020800
 8001f7c:	40020c00 	.word	0x40020c00
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40021c00 	.word	0x40021c00

08001f88 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 *
 */
void GPIO_WritePin(GPIO_Handler_t *pPinHandler, uint8_t newState){
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->0DR &= ~(SET << pPinHandler ->GPIO_PinConfig.GPIO_PinNumber);
	if(newState == SET){
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d10d      	bne.n	8001fb6 <GPIO_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699a      	ldr	r2, [r3, #24]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	791b      	ldrb	r3, [r3, #4]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	408b      	lsls	r3, r1
 8001faa:	4619      	mov	r1, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	619a      	str	r2, [r3, #24]
	else{
		//Trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
	}

}
 8001fb4:	e00d      	b.n	8001fd2 <GPIO_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	699a      	ldr	r2, [r3, #24]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	791b      	ldrb	r3, [r3, #4]
 8001fc0:	3310      	adds	r3, #16
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	4619      	mov	r1, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	619a      	str	r2, [r3, #24]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <GPIOxTooglePin>:
	pinValue &= mask;

	return pinValue;
}

void GPIOxTooglePin(GPIO_Handler_t *pPinHandler){
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR ^= (SET <<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695a      	ldr	r2, [r3, #20]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	791b      	ldrb	r3, [r3, #4]
 8001fee:	4619      	mov	r1, r3
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	408b      	lsls	r3, r1
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	404a      	eors	r2, r1
 8001ffc:	615a      	str	r2, [r3, #20]
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <pwm_Config>:
 */

#include "PwmDriver.h"

/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if(ptrPwmHandler->ptrTIMx == TIM2){
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002018:	d106      	bne.n	8002028 <pwm_Config+0x20>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800201a:	4b5a      	ldr	r3, [pc, #360]	; (8002184 <pwm_Config+0x17c>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	4a59      	ldr	r2, [pc, #356]	; (8002184 <pwm_Config+0x17c>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
 8002026:	e024      	b.n	8002072 <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a56      	ldr	r2, [pc, #344]	; (8002188 <pwm_Config+0x180>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d106      	bne.n	8002040 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002032:	4b54      	ldr	r3, [pc, #336]	; (8002184 <pwm_Config+0x17c>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	4a53      	ldr	r2, [pc, #332]	; (8002184 <pwm_Config+0x17c>)
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	6413      	str	r3, [r2, #64]	; 0x40
 800203e:	e018      	b.n	8002072 <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a51      	ldr	r2, [pc, #324]	; (800218c <pwm_Config+0x184>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d106      	bne.n	8002058 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800204a:	4b4e      	ldr	r3, [pc, #312]	; (8002184 <pwm_Config+0x17c>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a4d      	ldr	r2, [pc, #308]	; (8002184 <pwm_Config+0x17c>)
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	6413      	str	r3, [r2, #64]	; 0x40
 8002056:	e00c      	b.n	8002072 <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a4c      	ldr	r2, [pc, #304]	; (8002190 <pwm_Config+0x188>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d106      	bne.n	8002070 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8002062:	4b48      	ldr	r3, [pc, #288]	; (8002184 <pwm_Config+0x17c>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	4a47      	ldr	r2, [pc, #284]	; (8002184 <pwm_Config+0x17c>)
 8002068:	f043 0308 	orr.w	r3, r3, #8
 800206c:	6413      	str	r3, [r2, #64]	; 0x40
 800206e:	e000      	b.n	8002072 <pwm_Config+0x6a>
	}
	else{
		__NOP();
 8002070:	bf00      	nop
	}

	/* 1. Cargamos la frecuencia deseada */
	setFrequency(ptrPwmHandler);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f8de 	bl	8002234 <setFrequency>

	/* 2. Cargamos el valor del dutty-Cycle*/
	setDuttyCycle(ptrPwmHandler);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f8ef 	bl	800225c <setDuttyCycle>

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0210 	bic.w	r2, r2, #16
 800208c:	601a      	str	r2, [r3, #0]
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	791b      	ldrb	r3, [r3, #4]
 8002092:	2b03      	cmp	r3, #3
 8002094:	d86e      	bhi.n	8002174 <pwm_Config+0x16c>
 8002096:	a201      	add	r2, pc, #4	; (adr r2, 800209c <pwm_Config+0x94>)
 8002098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209c:	080020ad 	.word	0x080020ad
 80020a0:	080020df 	.word	0x080020df
 80020a4:	08002111 	.word	0x08002111
 80020a8:	08002143 	.word	0x08002143
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~(TIM_CCMR1_CC1S);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	699a      	ldr	r2, [r3, #24]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0203 	bic.w	r2, r2, #3
 80020ba:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC1M_Pos);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699a      	ldr	r2, [r3, #24]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80020ca:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	699a      	ldr	r2, [r3, #24]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0208 	orr.w	r2, r2, #8
 80020da:	619a      	str	r2, [r3, #24]

		break;
 80020dc:	e04b      	b.n	8002176 <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~(TIM_CCMR1_CC2S);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	699a      	ldr	r2, [r3, #24]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80020ec:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC2M_Pos);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	699a      	ldr	r2, [r3, #24]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80020fc:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	699a      	ldr	r2, [r3, #24]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800210c:	619a      	str	r2, [r3, #24]
		break;
 800210e:	e032      	b.n	8002176 <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_3:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~(TIM_CCMR2_CC3S);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	69da      	ldr	r2, [r3, #28]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0203 	bic.w	r2, r2, #3
 800211e:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC3M_Pos);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	69da      	ldr	r2, [r3, #28]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800212e:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	69da      	ldr	r2, [r3, #28]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0208 	orr.w	r2, r2, #8
 800213e:	61da      	str	r2, [r3, #28]
		break;
 8002140:	e019      	b.n	8002176 <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_4:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~(TIM_CCMR2_CC4S);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	69da      	ldr	r2, [r3, #28]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002150:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC4M_Pos);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	69da      	ldr	r2, [r3, #28]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8002160:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	69da      	ldr	r2, [r3, #28]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002170:	61da      	str	r2, [r3, #28]
		break;
 8002172:	e000      	b.n	8002176 <pwm_Config+0x16e>
	}

	default:{
		break;
 8002174:	bf00      	nop
	/* 6. Activamos la salida seleccionada */
	enableOutput(ptrPwmHandler);


	}// fin del switch-case
	setPolarity(ptrPwmHandler);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f8b2 	bl	80022e0 <setPolarity>
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40023800 	.word	0x40023800
 8002188:	40000400 	.word	0x40000400
 800218c:	40000800 	.word	0x40000800
 8002190:	40000c00 	.word	0x40000c00

08002194 <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0201 	orr.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
	...

080021b8 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
void enableOutput(PWM_Handler_t *ptrPwmHandler) {
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
	switch (ptrPwmHandler->config.channel) {
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	791b      	ldrb	r3, [r3, #4]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d82f      	bhi.n	8002228 <enableOutput+0x70>
 80021c8:	a201      	add	r2, pc, #4	; (adr r2, 80021d0 <enableOutput+0x18>)
 80021ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ce:	bf00      	nop
 80021d0:	080021e1 	.word	0x080021e1
 80021d4:	080021f3 	.word	0x080021f3
 80021d8:	08002205 	.word	0x08002205
 80021dc:	08002217 	.word	0x08002217
	case PWM_CHANNEL_1: {
		// Activamos la salida del canal 1
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6a1a      	ldr	r2, [r3, #32]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	621a      	str	r2, [r3, #32]
		break;
 80021f0:	e01b      	b.n	800222a <enableOutput+0x72>
	}

	case PWM_CHANNEL_2: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6a1a      	ldr	r2, [r3, #32]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f042 0210 	orr.w	r2, r2, #16
 8002200:	621a      	str	r2, [r3, #32]
		break;
 8002202:	e012      	b.n	800222a <enableOutput+0x72>
	}

	case PWM_CHANNEL_3: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6a1a      	ldr	r2, [r3, #32]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002212:	621a      	str	r2, [r3, #32]

		break;
 8002214:	e009      	b.n	800222a <enableOutput+0x72>
	}

	case PWM_CHANNEL_4: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6a1a      	ldr	r2, [r3, #32]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002224:	621a      	str	r2, [r3, #32]

		break;
 8002226:	e000      	b.n	800222a <enableOutput+0x72>
	}

	default: {
		break;
 8002228:	bf00      	nop
	}
	}
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr

08002234 <setFrequency>:
/*
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler -1;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	3a01      	subs	r2, #1
 8002246:	629a      	str	r2, [r3, #40]	; 0x28

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.
	ptrPwmHandler->ptrTIMx->ARR = ptrPwmHandler->config.periodo;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	899a      	ldrh	r2, [r3, #12]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
    setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	791b      	ldrb	r3, [r3, #4]
 8002268:	2b03      	cmp	r3, #3
 800226a:	d823      	bhi.n	80022b4 <setDuttyCycle+0x58>
 800226c:	a201      	add	r2, pc, #4	; (adr r2, 8002274 <setDuttyCycle+0x18>)
 800226e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002272:	bf00      	nop
 8002274:	08002285 	.word	0x08002285
 8002278:	08002291 	.word	0x08002291
 800227c:	0800229d 	.word	0x0800229d
 8002280:	080022a9 	.word	0x080022a9
	case PWM_CHANNEL_1:{
		ptrPwmHandler->ptrTIMx->CCR1 = ptrPwmHandler->config.duttyCicle;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	89da      	ldrh	r2, [r3, #14]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 800228e:	e012      	b.n	80022b6 <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_2:{
		ptrPwmHandler->ptrTIMx->CCR2 = ptrPwmHandler->config.duttyCicle;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	89da      	ldrh	r2, [r3, #14]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 800229a:	e00c      	b.n	80022b6 <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_3:{
		ptrPwmHandler->ptrTIMx->CCR3 = ptrPwmHandler->config.duttyCicle;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	89da      	ldrh	r2, [r3, #14]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80022a6:	e006      	b.n	80022b6 <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_4:{
		ptrPwmHandler->ptrTIMx->CCR4 = ptrPwmHandler->config.duttyCicle;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	89da      	ldrh	r2, [r3, #14]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80022b2:	e000      	b.n	80022b6 <setDuttyCycle+0x5a>
	}

	default:{
		break;
 80022b4:	bf00      	nop
	}

	}// fin del switch-case

}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr

080022c0 <updateDuttyCycle>:


/* Función para actualizar el Dutty, funciona de la mano con setDuttyCycle */
void updateDuttyCycle(PWM_Handler_t *ptrPwmHandler, uint16_t newDutty){
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	807b      	strh	r3, [r7, #2]
	// Actualizamos el registro que manipula el dutty
	ptrPwmHandler->config.duttyCicle = newDutty;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	887a      	ldrh	r2, [r7, #2]
 80022d0:	81da      	strh	r2, [r3, #14]

	// Llamamos a la fucnión que cambia el dutty y cargamos el nuevo valor
	setDuttyCycle(ptrPwmHandler);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ffc2 	bl	800225c <setDuttyCycle>
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <setPolarity>:

void setPolarity(PWM_Handler_t *ptrPwmHandler){
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]

	if(ptrPwmHandler->config.polarity == PWM_POLARITY_ACTIVE_LOW){
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	7c1b      	ldrb	r3, [r3, #16]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d133      	bne.n	8002358 <setPolarity+0x78>
		//Estamos en active low por ende debemos configurar el canal
		//segun esta polaridad

		switch (ptrPwmHandler->config.channel) {
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	791b      	ldrb	r3, [r3, #4]
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	d863      	bhi.n	80023c0 <setPolarity+0xe0>
 80022f8:	a201      	add	r2, pc, #4	; (adr r2, 8002300 <setPolarity+0x20>)
 80022fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fe:	bf00      	nop
 8002300:	08002311 	.word	0x08002311
 8002304:	08002323 	.word	0x08002323
 8002308:	08002335 	.word	0x08002335
 800230c:	08002347 	.word	0x08002347

			case PWM_CHANNEL_1: {
				// Configuramos la polaridad del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P_Msk;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6a1a      	ldr	r2, [r3, #32]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0202 	orr.w	r2, r2, #2
 800231e:	621a      	str	r2, [r3, #32]

				break;
 8002320:	e051      	b.n	80023c6 <setPolarity+0xe6>
			}

			case PWM_CHANNEL_2: {
				// Configuramos la polaridad del canal 2
				ptrPwmHandler->ptrTIMx->CCER  |= TIM_CCER_CC2P_Msk;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6a1a      	ldr	r2, [r3, #32]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 0220 	orr.w	r2, r2, #32
 8002330:	621a      	str	r2, [r3, #32]

				break;
 8002332:	e048      	b.n	80023c6 <setPolarity+0xe6>
			}

			case PWM_CHANNEL_3: {
				// Configuramos la polaridad del canal 3
				ptrPwmHandler->ptrTIMx->CCER  |= TIM_CCER_CC3P_Msk;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6a1a      	ldr	r2, [r3, #32]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002342:	621a      	str	r2, [r3, #32]

				break;
 8002344:	e03f      	b.n	80023c6 <setPolarity+0xe6>
			}

			case PWM_CHANNEL_4: {
				// Configuramos la polaridad del canal 4
				ptrPwmHandler->ptrTIMx->CCER  |= TIM_CCER_CC4P_Msk;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6a1a      	ldr	r2, [r3, #32]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002354:	621a      	str	r2, [r3, #32]

				break;
 8002356:	e036      	b.n	80023c6 <setPolarity+0xe6>

	else {
		//Estamos en active high por ende debemos configurar el canal
		//segun esta polaridad. Este sera nuestra polaridad por defecto

		switch (ptrPwmHandler->config.channel) {
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	791b      	ldrb	r3, [r3, #4]
 800235c:	2b03      	cmp	r3, #3
 800235e:	d831      	bhi.n	80023c4 <setPolarity+0xe4>
 8002360:	a201      	add	r2, pc, #4	; (adr r2, 8002368 <setPolarity+0x88>)
 8002362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002366:	bf00      	nop
 8002368:	08002379 	.word	0x08002379
 800236c:	0800238b 	.word	0x0800238b
 8002370:	0800239d 	.word	0x0800239d
 8002374:	080023af 	.word	0x080023af

			case PWM_CHANNEL_1: {
				// Configuramos la polaridad del canal 1
				ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P_Msk;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6a1a      	ldr	r2, [r3, #32]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0202 	bic.w	r2, r2, #2
 8002386:	621a      	str	r2, [r3, #32]

				break;
 8002388:	e01d      	b.n	80023c6 <setPolarity+0xe6>
			}

			case PWM_CHANNEL_2: {
				// Configuramos la polaridad del canal 2
				ptrPwmHandler->ptrTIMx->CCER  &= ~TIM_CCER_CC2P_Msk;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6a1a      	ldr	r2, [r3, #32]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0220 	bic.w	r2, r2, #32
 8002398:	621a      	str	r2, [r3, #32]

				break;
 800239a:	e014      	b.n	80023c6 <setPolarity+0xe6>
			}

			case PWM_CHANNEL_3: {
				// Configuramos la polaridad del canal 3
				ptrPwmHandler->ptrTIMx->CCER  &= ~TIM_CCER_CC3P_Msk;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6a1a      	ldr	r2, [r3, #32]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023aa:	621a      	str	r2, [r3, #32]

				break;
 80023ac:	e00b      	b.n	80023c6 <setPolarity+0xe6>
			}

			case PWM_CHANNEL_4: {
				// Configuramos la polaridad del canal 4
				ptrPwmHandler->ptrTIMx->CCER  &= ~TIM_CCER_CC4P_Msk;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6a1a      	ldr	r2, [r3, #32]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023bc:	621a      	str	r2, [r3, #32]

				break;
 80023be:	e002      	b.n	80023c6 <setPolarity+0xe6>
				break;
 80023c0:	bf00      	nop
 80023c2:	e000      	b.n	80023c6 <setPolarity+0xe6>
			}

			default: {
				break;
 80023c4:	bf00      	nop
			}
		}//Fin del switch case
	}

}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr

080023d0 <__NVIC_EnableIRQ>:
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	db0b      	blt.n	80023fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	f003 021f 	and.w	r2, r3, #31
 80023e8:	4906      	ldr	r1, [pc, #24]	; (8002404 <__NVIC_EnableIRQ+0x34>)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	2001      	movs	r0, #1
 80023f2:	fa00 f202 	lsl.w	r2, r0, r2
 80023f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr
 8002404:	e000e100 	.word	0xe000e100

08002408 <USART_Config>:
 */

// Esta variable es necesaria para las interrupciones del USART 2 y 6.
uint8_t auxRxData = 0;

void USART_Config(USART_Handler_t *ptrUsartHandler){
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002410:	b672      	cpsid	i
}
 8002412:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a8c      	ldr	r2, [pc, #560]	; (800264c <USART_Config+0x244>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d106      	bne.n	800242c <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800241e:	4b8c      	ldr	r3, [pc, #560]	; (8002650 <USART_Config+0x248>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	4a8b      	ldr	r2, [pc, #556]	; (8002650 <USART_Config+0x248>)
 8002424:	f043 0310 	orr.w	r3, r3, #16
 8002428:	6453      	str	r3, [r2, #68]	; 0x44
 800242a:	e016      	b.n	800245a <USART_Config+0x52>
	}else if(ptrUsartHandler->ptrUSARTx == USART6){
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a88      	ldr	r2, [pc, #544]	; (8002654 <USART_Config+0x24c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d106      	bne.n	8002444 <USART_Config+0x3c>
		/*Configuramos el USART 6 que está en el mismo bus del USART 1 */
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8002436:	4b86      	ldr	r3, [pc, #536]	; (8002650 <USART_Config+0x248>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	4a85      	ldr	r2, [pc, #532]	; (8002650 <USART_Config+0x248>)
 800243c:	f043 0320 	orr.w	r3, r3, #32
 8002440:	6453      	str	r3, [r2, #68]	; 0x44
 8002442:	e00a      	b.n	800245a <USART_Config+0x52>
		// Luego el USART 2 que está en el bus 1.
	}else if(ptrUsartHandler->ptrUSARTx == USART2){
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a83      	ldr	r2, [pc, #524]	; (8002658 <USART_Config+0x250>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d105      	bne.n	800245a <USART_Config+0x52>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800244e:	4b80      	ldr	r3, [pc, #512]	; (8002650 <USART_Config+0x248>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	4a7f      	ldr	r2, [pc, #508]	; (8002650 <USART_Config+0x248>)
 8002454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002458:	6413      	str	r3, [r2, #64]	; 0x40
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2200      	movs	r2, #0
 8002460:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2200      	movs	r2, #0
 8002468:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	79db      	ldrb	r3, [r3, #7]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d025      	beq.n	80024be <USART_Config+0xb6>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	79db      	ldrb	r3, [r3, #7]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d110      	bne.n	800249c <USART_Config+0x94>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002488:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	e018      	b.n	80024ce <USART_Config+0xc6>

		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024aa:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024ba:	60da      	str	r2, [r3, #12]
 80024bc:	e007      	b.n	80024ce <USART_Config+0xc6>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024cc:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize ==USART_DATASIZE_8BIT){
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	799b      	ldrb	r3, [r3, #6]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d115      	bne.n	8002502 <USART_Config+0xfa>

	    	// Inicialmente debe corroborarse si se quiere o no la paridad.
	    	if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_NONE){
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	79db      	ldrb	r3, [r3, #7]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d108      	bne.n	80024f0 <USART_Config+0xe8>
	    		// Si se quieren datos de 8 bits.
	    		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	e010      	b.n	8002512 <USART_Config+0x10a>
	    	}
	    	else{
	    		// Si la partidad esta activada, se agrega un BIT adicional.
	    		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024fe:	60da      	str	r2, [r3, #12]
 8002500:	e007      	b.n	8002512 <USART_Config+0x10a>
	    	}
	    }
	    else{
	    	// Se configuran 9 bits para el tamaño.
	    	ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002510:	60da      	str	r2, [r3, #12]
	    }

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	7a1b      	ldrb	r3, [r3, #8]
 8002516:	2b03      	cmp	r3, #3
 8002518:	d84e      	bhi.n	80025b8 <USART_Config+0x1b0>
 800251a:	a201      	add	r2, pc, #4	; (adr r2, 8002520 <USART_Config+0x118>)
 800251c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002520:	08002531 	.word	0x08002531
 8002524:	08002553 	.word	0x08002553
 8002528:	08002575 	.word	0x08002575
 800252c:	08002597 	.word	0x08002597
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691a      	ldr	r2, [r3, #16]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800253e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691a      	ldr	r2, [r3, #16]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800254e:	611a      	str	r2, [r3, #16]
		break;
 8002550:	e043      	b.n	80025da <USART_Config+0x1d2>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002560:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002570:	611a      	str	r2, [r3, #16]
		break;
 8002572:	e032      	b.n	80025da <USART_Config+0x1d2>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691a      	ldr	r2, [r3, #16]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002582:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002592:	611a      	str	r2, [r3, #16]
		break;
 8002594:	e021      	b.n	80025da <USART_Config+0x1d2>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025a4:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025b4:	611a      	str	r2, [r3, #16]
		break;
 80025b6:	e010      	b.n	80025da <USART_Config+0x1d2>
	}
	default: {
		// En el caso por defecto seleccionamos 1 bit de parada
		// Escriba acá su código
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025c6:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025d6:	611a      	str	r2, [r3, #16]
		break;
 80025d8:	bf00      	nop
	 * decida utilizar el usuario. La función getConfig() retorna esta
	 * frecuencia en que se encuentra actualmente el reloj del sistema PLL,
	 * por tanto, se considera un condicional que incluye los cálculos para
	 * la frecuencia de 100 MHz y por defecto recurre a la frecuencia natural.
	 */
	if(actualFrecuency == 100000000){
 80025da:	f000 fcd7 	bl	8002f8c <getConfigPLL>
 80025de:	4603      	mov	r3, r0
 80025e0:	4a1e      	ldr	r2, [pc, #120]	; (800265c <USART_Config+0x254>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d11d      	bne.n	8002622 <USART_Config+0x21a>
		// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
		if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	795b      	ldrb	r3, [r3, #5]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d105      	bne.n	80025fa <USART_Config+0x1f2>
			// El valor a cargar es 651.041 -> Mantiza = 651,fraction = 0.041
			// Mantiza = 651 = 0x28b, fraction = 16 * 0.041 = 1
			// Valor a cargar 0x28B1
			// Configurando el Baudrate generator para una velocidad de 9600bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x28B1;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f642 02b1 	movw	r2, #10417	; 0x28b1
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	e03a      	b.n	8002670 <USART_Config+0x268>
		}

		else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	795b      	ldrb	r3, [r3, #5]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d105      	bne.n	800260e <USART_Config+0x206>
			// El valor a cargar es 325.520 -> Mantiza = 325,fraction = 0.520
			// Mantiza = 325 = 0x145, fraction = 16 * 0.520 = 8
			// Valor a cargar 0x1458
			ptrUsartHandler->ptrUSARTx->BRR = 0x1458;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f241 4258 	movw	r2, #5208	; 0x1458
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	e030      	b.n	8002670 <USART_Config+0x268>
		}

		else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	795b      	ldrb	r3, [r3, #5]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d12c      	bne.n	8002670 <USART_Config+0x268>
			// El valor a cargar es 54.253 -> Mantiza = 54,fraction = 0.253
			// Mantiza = 54 = 0x36, fraction = 16 * 0.253 = 4.
			ptrUsartHandler->ptrUSARTx->BRR = 0x364;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f44f 7259 	mov.w	r2, #868	; 0x364
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	e026      	b.n	8002670 <USART_Config+0x268>
		}
	// Caso por defecto de 16 MHz.
	}else{
		// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
		if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	795b      	ldrb	r3, [r3, #5]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d105      	bne.n	8002636 <USART_Config+0x22e>
			// El valor a cargar es 104.1875 -> Mantiza = 104,fraction = 0.1875
			// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
			// Valor a cargar 0x0683
			// Configurando el Baudrate generator para una velocidad de 9600bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f240 6283 	movw	r2, #1667	; 0x683
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	e01c      	b.n	8002670 <USART_Config+0x268>
		}

		else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	795b      	ldrb	r3, [r3, #5]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d110      	bne.n	8002660 <USART_Config+0x258>
			// El valor a cargar es 52.0625 -> Mantiza = 52,fraction = 0.0625
			// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
			// Escriba acá su código y los comentarios que faltan
			// Valor a cargar 0x0341
			ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f240 3241 	movw	r2, #833	; 0x341
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	e012      	b.n	8002670 <USART_Config+0x268>
 800264a:	bf00      	nop
 800264c:	40011000 	.word	0x40011000
 8002650:	40023800 	.word	0x40023800
 8002654:	40011400 	.word	0x40011400
 8002658:	40004400 	.word	0x40004400
 800265c:	05f5e100 	.word	0x05f5e100
		}

		else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	795b      	ldrb	r3, [r3, #5]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d103      	bne.n	8002670 <USART_Config+0x268>
			// Escriba acá su código y los comentarios que faltan
			// El valor a cargar es 8.6875 -> Mantiza = 8,fraction = 0.6875
			// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11 = B.
			ptrUsartHandler->ptrUSARTx->BRR = 0x008B;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	228b      	movs	r2, #139	; 0x8b
 800266e:	609a      	str	r2, [r3, #8]
		}
	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	791b      	ldrb	r3, [r3, #4]
 8002674:	2b03      	cmp	r3, #3
 8002676:	d847      	bhi.n	8002708 <USART_Config+0x300>
 8002678:	a201      	add	r2, pc, #4	; (adr r2, 8002680 <USART_Config+0x278>)
 800267a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267e:	bf00      	nop
 8002680:	08002691 	.word	0x08002691
 8002684:	080026a3 	.word	0x080026a3
 8002688:	080026b5 	.word	0x080026b5
 800268c:	080026d7 	.word	0x080026d7
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_TE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0208 	orr.w	r2, r2, #8
 800269e:	60da      	str	r2, [r3, #12]
		break;
 80026a0:	e04b      	b.n	800273a <USART_Config+0x332>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_RE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f042 0204 	orr.w	r2, r2, #4
 80026b0:	60da      	str	r2, [r3, #12]
		break;
 80026b2:	e042      	b.n	800273a <USART_Config+0x332>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmision como recepcion
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_TE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0208 	orr.w	r2, r2, #8
 80026c2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_RE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0204 	orr.w	r2, r2, #4
 80026d2:	60da      	str	r2, [r3, #12]
		break;
 80026d4:	e031      	b.n	800273a <USART_Config+0x332>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		// Escriba acá su código
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0204 	bic.w	r2, r2, #4
 80026e4:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0208 	bic.w	r2, r2, #8
 80026f4:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002704:	60da      	str	r2, [r3, #12]
		break;
 8002706:	e018      	b.n	800273a <USART_Config+0x332>
	}

	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0204 	bic.w	r2, r2, #4
 8002716:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0208 	bic.w	r2, r2, #8
 8002726:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002736:	60da      	str	r2, [r3, #12]
		break;
 8002738:	bf00      	nop
	}
	}

	// 2.7 Activamos el módulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	791b      	ldrb	r3, [r3, #4]
 800273e:	2b03      	cmp	r3, #3
 8002740:	d007      	beq.n	8002752 <USART_Config+0x34a>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002750:	60da      	str	r2, [r3, #12]
	}
	// Se verifica la activación de la interrupcion Rx
	if (ptrUsartHandler->ptrUSARTx == USART1){
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a28      	ldr	r2, [pc, #160]	; (80027f8 <USART_Config+0x3f0>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d03a      	beq.n	80027d2 <USART_Config+0x3ca>
	}

	/* 1.2 Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2) {
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a26      	ldr	r2, [pc, #152]	; (80027fc <USART_Config+0x3f4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d118      	bne.n	8002798 <USART_Config+0x390>
		if (ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE) {
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	7a5b      	ldrb	r3, [r3, #9]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d10b      	bne.n	8002786 <USART_Config+0x37e>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f042 0220 	orr.w	r2, r2, #32
 800277c:	60da      	str	r2, [r3, #12]
			NVIC_EnableIRQ(USART2_IRQn);
 800277e:	2026      	movs	r0, #38	; 0x26
 8002780:	f7ff fe26 	bl	80023d0 <__NVIC_EnableIRQ>
 8002784:	e025      	b.n	80027d2 <USART_Config+0x3ca>
		} else {
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0220 	bic.w	r2, r2, #32
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	e01c      	b.n	80027d2 <USART_Config+0x3ca>
		}
	}

	/* 1.3 Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6) {
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a18      	ldr	r2, [pc, #96]	; (8002800 <USART_Config+0x3f8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d117      	bne.n	80027d2 <USART_Config+0x3ca>
		if (ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE) {
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	7a5b      	ldrb	r3, [r3, #9]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d10b      	bne.n	80027c2 <USART_Config+0x3ba>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0220 	orr.w	r2, r2, #32
 80027b8:	60da      	str	r2, [r3, #12]
			NVIC_EnableIRQ(USART6_IRQn);
 80027ba:	2047      	movs	r0, #71	; 0x47
 80027bc:	f7ff fe08 	bl	80023d0 <__NVIC_EnableIRQ>
 80027c0:	e007      	b.n	80027d2 <USART_Config+0x3ca>
		} else {
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0220 	bic.w	r2, r2, #32
 80027d0:	60da      	str	r2, [r3, #12]
		}
	}

	// 2.8 Activamos el módulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	791b      	ldrb	r3, [r3, #4]
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d007      	beq.n	80027ea <USART_Config+0x3e2>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027e8:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80027ea:	b662      	cpsie	i
}
 80027ec:	bf00      	nop
	}

	// Activamos las interrupciones globales
	__enable_irq();
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40011000 	.word	0x40011000
 80027fc:	40004400 	.word	0x40004400
 8002800:	40011400 	.word	0x40011400

08002804 <usart6Rx_Callback>:
	            the usart2Rx_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void usart6Rx_Callback(void){
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the usart6Rx_Callback could be implemented in the main file
	   */
	__NOP();
 8002808:	bf00      	nop
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <writeChar>:

/* funcion para escribir un solo char */
int writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800281c:	e000      	b.n	8002820 <writeChar+0xe>
		__NOP();
 800281e:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f7      	beq.n	800281e <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	605a      	str	r2, [r3, #4]

	return dataToSend;
 8002836:	683b      	ldr	r3, [r7, #0]
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr

08002842 <writeMsg>:

// función para escribir un mensaje
void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	6039      	str	r1, [r7, #0]
	while(*msgToSend != '\0'){
 800284c:	e008      	b.n	8002860 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	4619      	mov	r1, r3
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7ff ffdc 	bl	8002812 <writeChar>
		msgToSend++;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	3301      	adds	r3, #1
 800285e:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1f2      	bne.n	800284e <writeMsg+0xc>
	}
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <getRxData>:

// función auxiliar
uint8_t getRxData(void){
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
	return auxRxData;
 8002878:	4b02      	ldr	r3, [pc, #8]	; (8002884 <getRxData+0x10>)
 800287a:	781b      	ldrb	r3, [r3, #0]
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	20000530 	.word	0x20000530

08002888 <USART2_IRQHandler>:

/* INTERRUPCIONES DEL USART */
// Se debe crear una variable auxiliar para la lectura que se declara al inicio.

/* Para el USART 2 */
void USART2_IRQHandler(void){
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
	// Se evalúa si la interrupción que se dio es por RX
	if(USART2->SR & USART_SR_RXNE){
 800288c:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <USART2_IRQHandler+0x30>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0320 	and.w	r3, r3, #32
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00c      	beq.n	80028b2 <USART2_IRQHandler+0x2a>
		USART2->SR &= ~USART_SR_RXNE;
 8002898:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <USART2_IRQHandler+0x30>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a06      	ldr	r2, [pc, #24]	; (80028b8 <USART2_IRQHandler+0x30>)
 800289e:	f023 0320 	bic.w	r3, r3, #32
 80028a2:	6013      	str	r3, [r2, #0]
		auxRxData = (uint8_t) USART2->DR;
 80028a4:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <USART2_IRQHandler+0x30>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	4b04      	ldr	r3, [pc, #16]	; (80028bc <USART2_IRQHandler+0x34>)
 80028ac:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 80028ae:	f7ff f8a5 	bl	80019fc <usart2Rx_Callback>
	}
}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40004400 	.word	0x40004400
 80028bc:	20000530 	.word	0x20000530

080028c0 <USART6_IRQHandler>:

/* Para el USART 6 */
void USART6_IRQHandler(void){
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
	// Evaluamos que la interrupción que se dio es por RX
	if(USART6->SR & USART_SR_RXNE){
 80028c4:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <USART6_IRQHandler+0x30>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0320 	and.w	r3, r3, #32
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00c      	beq.n	80028ea <USART6_IRQHandler+0x2a>
		USART6->SR &= ~USART_SR_RXNE;
 80028d0:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <USART6_IRQHandler+0x30>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a06      	ldr	r2, [pc, #24]	; (80028f0 <USART6_IRQHandler+0x30>)
 80028d6:	f023 0320 	bic.w	r3, r3, #32
 80028da:	6013      	str	r3, [r2, #0]
		auxRxData = (uint8_t) USART6->DR;
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <USART6_IRQHandler+0x30>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <USART6_IRQHandler+0x34>)
 80028e4:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 80028e6:	f7ff ff8d 	bl	8002804 <usart6Rx_Callback>
	}
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40011400 	.word	0x40011400
 80028f4:	20000530 	.word	0x20000530

080028f8 <__NVIC_EnableIRQ>:
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002906:	2b00      	cmp	r3, #0
 8002908:	db0b      	blt.n	8002922 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	f003 021f 	and.w	r2, r3, #31
 8002910:	4906      	ldr	r1, [pc, #24]	; (800292c <__NVIC_EnableIRQ+0x34>)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	2001      	movs	r0, #1
 800291a:	fa00 f202 	lsl.w	r2, r0, r2
 800291e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	e000e100 	.word	0xe000e100

08002930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	6039      	str	r1, [r7, #0]
 800293a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800293c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002940:	2b00      	cmp	r3, #0
 8002942:	db0a      	blt.n	800295a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	b2da      	uxtb	r2, r3
 8002948:	490c      	ldr	r1, [pc, #48]	; (800297c <__NVIC_SetPriority+0x4c>)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	0112      	lsls	r2, r2, #4
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	440b      	add	r3, r1
 8002954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002958:	e00a      	b.n	8002970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4908      	ldr	r1, [pc, #32]	; (8002980 <__NVIC_SetPriority+0x50>)
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	3b04      	subs	r3, #4
 8002968:	0112      	lsls	r2, r2, #4
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	440b      	add	r3, r1
 800296e:	761a      	strb	r2, [r3, #24]
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	e000e100 	.word	0xe000e100
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <getADC>:
/*
 * Función que retorna el ultimo dato adquirido por la ADC
 * La idea es que esta función es llamada desde la función callback, de forma que
 * siempre se obtiene el valor mas actual de la conversión ADC.
 * */
uint16_t getADC(void){
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
	// Esta variable es actualizada en la ISR de la conversión, cada vez que se obtiene
	// un nuevo valor.
	return adcRawData;
 8002988:	4b02      	ldr	r3, [pc, #8]	; (8002994 <getADC+0x10>)
 800298a:	881b      	ldrh	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr
 8002994:	20000532 	.word	0x20000532

08002998 <ADC_IRQHandler>:

/*
 * Esta es la ISR de la interrupción por conversión ADC
 */
void ADC_IRQHandler(void){
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
	// Evaluamos que se dio la interrupción por conversión ADC
	if(ADC1->SR & ADC_SR_EOC){
 800299c:	4b07      	ldr	r3, [pc, #28]	; (80029bc <ADC_IRQHandler+0x24>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d006      	beq.n	80029b6 <ADC_IRQHandler+0x1e>
		// Leemos el resultado de la conversión ADC y lo cargamos en una variale auxiliar
		// la cual es utilizada en la función getADC()
		adcRawData = ADC1->DR;
 80029a8:	4b04      	ldr	r3, [pc, #16]	; (80029bc <ADC_IRQHandler+0x24>)
 80029aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <ADC_IRQHandler+0x28>)
 80029b0:	801a      	strh	r2, [r3, #0]

		// Hacemos el llamado a la función que se ejecutará en el main
		adcComplete_Callback();
 80029b2:	f7ff f82f 	bl	8001a14 <adcComplete_Callback>
	}

}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40012000 	.word	0x40012000
 80029c0:	20000532 	.word	0x20000532

080029c4 <configAnalogPin>:
/*
 * Con esta función configuramos que pin deseamos que funcione como canal ADC
 * Esta funcion trabaja con el GPIOxDriver, por lo cual requiere que se incluya
 * dicho driver.
 */
void configAnalogPin(uint8_t adcChannel){
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	71fb      	strb	r3, [r7, #7]

	// Con este switch seleccionamos el canal y lo configuramos como análogo.
	switch (adcChannel) {
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	2b0f      	cmp	r3, #15
 80029d2:	f200 8093 	bhi.w	8002afc <configAnalogPin+0x138>
 80029d6:	a201      	add	r2, pc, #4	; (adr r2, 80029dc <configAnalogPin+0x18>)
 80029d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029dc:	08002a1d 	.word	0x08002a1d
 80029e0:	08002a2b 	.word	0x08002a2b
 80029e4:	08002a39 	.word	0x08002a39
 80029e8:	08002a47 	.word	0x08002a47
 80029ec:	08002a55 	.word	0x08002a55
 80029f0:	08002a63 	.word	0x08002a63
 80029f4:	08002a71 	.word	0x08002a71
 80029f8:	08002a7f 	.word	0x08002a7f
 80029fc:	08002a8d 	.word	0x08002a8d
 8002a00:	08002a9b 	.word	0x08002a9b
 8002a04:	08002aa9 	.word	0x08002aa9
 8002a08:	08002ab7 	.word	0x08002ab7
 8002a0c:	08002ac5 	.word	0x08002ac5
 8002a10:	08002ad3 	.word	0x08002ad3
 8002a14:	08002ae1 	.word	0x08002ae1
 8002a18:	08002aef 	.word	0x08002aef
	 * asignar. (Esto está más o menos en la página 40 del datasheet del micro)
	 */

	case ADC_CHANNEL_0: {
		// Es el pin PA0
		handlerAdcPin.pGPIOx 						= GPIOA;
 8002a1c:	4b3d      	ldr	r3, [pc, #244]	; (8002b14 <configAnalogPin+0x150>)
 8002a1e:	4a3e      	ldr	r2, [pc, #248]	; (8002b18 <configAnalogPin+0x154>)
 8002a20:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8002a22:	4b3c      	ldr	r3, [pc, #240]	; (8002b14 <configAnalogPin+0x150>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	711a      	strb	r2, [r3, #4]
		// Nota: Para el ejercicio inicial solo se necesita este canal, los demas
		// se necesitan para trabajos posteriores.
		break;
 8002a28:	e069      	b.n	8002afe <configAnalogPin+0x13a>
	}
		;

	case ADC_CHANNEL_1: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx						= GPIOA;
 8002a2a:	4b3a      	ldr	r3, [pc, #232]	; (8002b14 <configAnalogPin+0x150>)
 8002a2c:	4a3a      	ldr	r2, [pc, #232]	; (8002b18 <configAnalogPin+0x154>)
 8002a2e:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8002a30:	4b38      	ldr	r3, [pc, #224]	; (8002b14 <configAnalogPin+0x150>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	711a      	strb	r2, [r3, #4]

		break;
 8002a36:	e062      	b.n	8002afe <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_2: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 8002a38:	4b36      	ldr	r3, [pc, #216]	; (8002b14 <configAnalogPin+0x150>)
 8002a3a:	4a37      	ldr	r2, [pc, #220]	; (8002b18 <configAnalogPin+0x154>)
 8002a3c:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8002a3e:	4b35      	ldr	r3, [pc, #212]	; (8002b14 <configAnalogPin+0x150>)
 8002a40:	2202      	movs	r2, #2
 8002a42:	711a      	strb	r2, [r3, #4]

		break;
 8002a44:	e05b      	b.n	8002afe <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_3: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 8002a46:	4b33      	ldr	r3, [pc, #204]	; (8002b14 <configAnalogPin+0x150>)
 8002a48:	4a33      	ldr	r2, [pc, #204]	; (8002b18 <configAnalogPin+0x154>)
 8002a4a:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8002a4c:	4b31      	ldr	r3, [pc, #196]	; (8002b14 <configAnalogPin+0x150>)
 8002a4e:	2203      	movs	r2, #3
 8002a50:	711a      	strb	r2, [r3, #4]

		break;
 8002a52:	e054      	b.n	8002afe <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_4: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 8002a54:	4b2f      	ldr	r3, [pc, #188]	; (8002b14 <configAnalogPin+0x150>)
 8002a56:	4a30      	ldr	r2, [pc, #192]	; (8002b18 <configAnalogPin+0x154>)
 8002a58:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 8002a5a:	4b2e      	ldr	r3, [pc, #184]	; (8002b14 <configAnalogPin+0x150>)
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	711a      	strb	r2, [r3, #4]

		break;
 8002a60:	e04d      	b.n	8002afe <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_5: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 8002a62:	4b2c      	ldr	r3, [pc, #176]	; (8002b14 <configAnalogPin+0x150>)
 8002a64:	4a2c      	ldr	r2, [pc, #176]	; (8002b18 <configAnalogPin+0x154>)
 8002a66:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8002a68:	4b2a      	ldr	r3, [pc, #168]	; (8002b14 <configAnalogPin+0x150>)
 8002a6a:	2205      	movs	r2, #5
 8002a6c:	711a      	strb	r2, [r3, #4]

		break;
 8002a6e:	e046      	b.n	8002afe <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_6: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 8002a70:	4b28      	ldr	r3, [pc, #160]	; (8002b14 <configAnalogPin+0x150>)
 8002a72:	4a29      	ldr	r2, [pc, #164]	; (8002b18 <configAnalogPin+0x154>)
 8002a74:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_6;
 8002a76:	4b27      	ldr	r3, [pc, #156]	; (8002b14 <configAnalogPin+0x150>)
 8002a78:	2206      	movs	r2, #6
 8002a7a:	711a      	strb	r2, [r3, #4]

		break;
 8002a7c:	e03f      	b.n	8002afe <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_7: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 8002a7e:	4b25      	ldr	r3, [pc, #148]	; (8002b14 <configAnalogPin+0x150>)
 8002a80:	4a25      	ldr	r2, [pc, #148]	; (8002b18 <configAnalogPin+0x154>)
 8002a82:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_7;
 8002a84:	4b23      	ldr	r3, [pc, #140]	; (8002b14 <configAnalogPin+0x150>)
 8002a86:	2207      	movs	r2, #7
 8002a88:	711a      	strb	r2, [r3, #4]

		break;
 8002a8a:	e038      	b.n	8002afe <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_8: {
		//Es el pin PB0
		handlerAdcPin.pGPIOx 						= GPIOB;
 8002a8c:	4b21      	ldr	r3, [pc, #132]	; (8002b14 <configAnalogPin+0x150>)
 8002a8e:	4a23      	ldr	r2, [pc, #140]	; (8002b1c <configAnalogPin+0x158>)
 8002a90:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8002a92:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <configAnalogPin+0x150>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	711a      	strb	r2, [r3, #4]
		break;
 8002a98:	e031      	b.n	8002afe <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_9: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOB;
 8002a9a:	4b1e      	ldr	r3, [pc, #120]	; (8002b14 <configAnalogPin+0x150>)
 8002a9c:	4a1f      	ldr	r2, [pc, #124]	; (8002b1c <configAnalogPin+0x158>)
 8002a9e:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8002aa0:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <configAnalogPin+0x150>)
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	711a      	strb	r2, [r3, #4]

		break;
 8002aa6:	e02a      	b.n	8002afe <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_10: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8002aa8:	4b1a      	ldr	r3, [pc, #104]	; (8002b14 <configAnalogPin+0x150>)
 8002aaa:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <configAnalogPin+0x15c>)
 8002aac:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8002aae:	4b19      	ldr	r3, [pc, #100]	; (8002b14 <configAnalogPin+0x150>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	711a      	strb	r2, [r3, #4]

		break;
 8002ab4:	e023      	b.n	8002afe <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_11: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8002ab6:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <configAnalogPin+0x150>)
 8002ab8:	4a19      	ldr	r2, [pc, #100]	; (8002b20 <configAnalogPin+0x15c>)
 8002aba:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8002abc:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <configAnalogPin+0x150>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	711a      	strb	r2, [r3, #4]

		break;
 8002ac2:	e01c      	b.n	8002afe <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_12: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8002ac4:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <configAnalogPin+0x150>)
 8002ac6:	4a16      	ldr	r2, [pc, #88]	; (8002b20 <configAnalogPin+0x15c>)
 8002ac8:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8002aca:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <configAnalogPin+0x150>)
 8002acc:	2202      	movs	r2, #2
 8002ace:	711a      	strb	r2, [r3, #4]

		break;
 8002ad0:	e015      	b.n	8002afe <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_13: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8002ad2:	4b10      	ldr	r3, [pc, #64]	; (8002b14 <configAnalogPin+0x150>)
 8002ad4:	4a12      	ldr	r2, [pc, #72]	; (8002b20 <configAnalogPin+0x15c>)
 8002ad6:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8002ad8:	4b0e      	ldr	r3, [pc, #56]	; (8002b14 <configAnalogPin+0x150>)
 8002ada:	2203      	movs	r2, #3
 8002adc:	711a      	strb	r2, [r3, #4]

		break;
 8002ade:	e00e      	b.n	8002afe <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_14: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <configAnalogPin+0x150>)
 8002ae2:	4a0f      	ldr	r2, [pc, #60]	; (8002b20 <configAnalogPin+0x15c>)
 8002ae4:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <configAnalogPin+0x150>)
 8002ae8:	2204      	movs	r2, #4
 8002aea:	711a      	strb	r2, [r3, #4]

		break;
 8002aec:	e007      	b.n	8002afe <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_15: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8002aee:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <configAnalogPin+0x150>)
 8002af0:	4a0b      	ldr	r2, [pc, #44]	; (8002b20 <configAnalogPin+0x15c>)
 8002af2:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8002af4:	4b07      	ldr	r3, [pc, #28]	; (8002b14 <configAnalogPin+0x150>)
 8002af6:	2205      	movs	r2, #5
 8002af8:	711a      	strb	r2, [r3, #4]

		break;
 8002afa:	e000      	b.n	8002afe <configAnalogPin+0x13a>
	}
	default: {
		break;
 8002afc:	bf00      	nop

	}
	/*
	 * Se carga la información de cada pin configurado sobre el GPIO.
	 */
	handlerAdcPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 8002afe:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <configAnalogPin+0x150>)
 8002b00:	2203      	movs	r2, #3
 8002b02:	715a      	strb	r2, [r3, #5]
	GPIO_Config(&handlerAdcPin);
 8002b04:	4803      	ldr	r0, [pc, #12]	; (8002b14 <configAnalogPin+0x150>)
 8002b06:	f7ff f917 	bl	8001d38 <GPIO_Config>
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000538 	.word	0x20000538
 8002b18:	40020000 	.word	0x40020000
 8002b1c:	40020400 	.word	0x40020400
 8002b20:	40020800 	.word	0x40020800

08002b24 <adcConfigEvents>:
 * de la conversión adc. Los bits correspondientes a EXTSEL jerarquizan los
 * eventos externos dependiendo del canal que se quiera utilizar en cada uno
 * de los timmers disponibles para este propósito. Ver página 231 del reference
 * manual.
 */
void adcConfigEvents(ADC_Config_t *adcConfig) {
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]

	// Trigger detection on the rising edge, se toman los flancos
	// de bajada para los trigger externos
	ADC1->CR2 |= ADC_CR2_EXTEN_0;
 8002b2c:	4b42      	ldr	r3, [pc, #264]	; (8002c38 <adcConfigEvents+0x114>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	4a41      	ldr	r2, [pc, #260]	; (8002c38 <adcConfigEvents+0x114>)
 8002b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b36:	6093      	str	r3, [r2, #8]

	if (adcConfig->AdcEventType == TIMER_ADC_EVENT) {
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	7a1b      	ldrb	r3, [r3, #8]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d16f      	bne.n	8002c20 <adcConfigEvents+0xfc>
		switch (adcConfig->AdcChannelEvent) {
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	7a5b      	ldrb	r3, [r3, #9]
 8002b44:	2b0a      	cmp	r3, #10
 8002b46:	d864      	bhi.n	8002c12 <adcConfigEvents+0xee>
 8002b48:	a201      	add	r2, pc, #4	; (adr r2, 8002b50 <adcConfigEvents+0x2c>)
 8002b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4e:	bf00      	nop
 8002b50:	08002b7d 	.word	0x08002b7d
 8002b54:	08002b87 	.word	0x08002b87
 8002b58:	08002b95 	.word	0x08002b95
 8002b5c:	08002ba3 	.word	0x08002ba3
 8002b60:	08002bb1 	.word	0x08002bb1
 8002b64:	08002bbf 	.word	0x08002bbf
 8002b68:	08002bcd 	.word	0x08002bcd
 8002b6c:	08002bdb 	.word	0x08002bdb
 8002b70:	08002be9 	.word	0x08002be9
 8002b74:	08002bf7 	.word	0x08002bf7
 8002b78:	08002c05 	.word	0x08002c05

		case TIM1_CH1: {
			// Evento TIM1 CC1 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x0 << ADC_CR2_EXTSEL_Pos);
 8002b7c:	4b2e      	ldr	r3, [pc, #184]	; (8002c38 <adcConfigEvents+0x114>)
 8002b7e:	4a2e      	ldr	r2, [pc, #184]	; (8002c38 <adcConfigEvents+0x114>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	6093      	str	r3, [r2, #8]
			break;
 8002b84:	e053      	b.n	8002c2e <adcConfigEvents+0x10a>
		}

		case TIM1_CH2: {
			// Evento TIM1 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x1 << ADC_CR2_EXTSEL_Pos);
 8002b86:	4b2c      	ldr	r3, [pc, #176]	; (8002c38 <adcConfigEvents+0x114>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	4a2b      	ldr	r2, [pc, #172]	; (8002c38 <adcConfigEvents+0x114>)
 8002b8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b90:	6093      	str	r3, [r2, #8]
			break;
 8002b92:	e04c      	b.n	8002c2e <adcConfigEvents+0x10a>
		}

		case TIM1_CH3: {
			// Evento TIM1 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x2 << ADC_CR2_EXTSEL_Pos);
 8002b94:	4b28      	ldr	r3, [pc, #160]	; (8002c38 <adcConfigEvents+0x114>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	4a27      	ldr	r2, [pc, #156]	; (8002c38 <adcConfigEvents+0x114>)
 8002b9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	6093      	str	r3, [r2, #8]
			break;
 8002ba0:	e045      	b.n	8002c2e <adcConfigEvents+0x10a>
		}

		case TIM2_CH2: {
			// Evento TIM2 CC2 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x3 << ADC_CR2_EXTSEL_Pos);
 8002ba2:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <adcConfigEvents+0x114>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	4a24      	ldr	r2, [pc, #144]	; (8002c38 <adcConfigEvents+0x114>)
 8002ba8:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8002bac:	6093      	str	r3, [r2, #8]
			break;
 8002bae:	e03e      	b.n	8002c2e <adcConfigEvents+0x10a>
		}

		case TIM2_CH3: {
			// Evento TIM2 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x4 << ADC_CR2_EXTSEL_Pos);
 8002bb0:	4b21      	ldr	r3, [pc, #132]	; (8002c38 <adcConfigEvents+0x114>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	4a20      	ldr	r2, [pc, #128]	; (8002c38 <adcConfigEvents+0x114>)
 8002bb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bba:	6093      	str	r3, [r2, #8]
			break;
 8002bbc:	e037      	b.n	8002c2e <adcConfigEvents+0x10a>
		}

		case TIM2_CH4: {
			// Evento TIM2 CC4 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x5 << ADC_CR2_EXTSEL_Pos);
 8002bbe:	4b1e      	ldr	r3, [pc, #120]	; (8002c38 <adcConfigEvents+0x114>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	4a1d      	ldr	r2, [pc, #116]	; (8002c38 <adcConfigEvents+0x114>)
 8002bc4:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8002bc8:	6093      	str	r3, [r2, #8]
			break;
 8002bca:	e030      	b.n	8002c2e <adcConfigEvents+0x10a>
		}

		case TIM3_CH1: {
			// Evento TIM3 CC1 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x7 << ADC_CR2_EXTSEL_Pos);
 8002bcc:	4b1a      	ldr	r3, [pc, #104]	; (8002c38 <adcConfigEvents+0x114>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	4a19      	ldr	r2, [pc, #100]	; (8002c38 <adcConfigEvents+0x114>)
 8002bd2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002bd6:	6093      	str	r3, [r2, #8]
			break;
 8002bd8:	e029      	b.n	8002c2e <adcConfigEvents+0x10a>
		}

		case TIM4_CH4: {
			// Evento TIM4 CC4 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x9 << ADC_CR2_EXTSEL_Pos);
 8002bda:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <adcConfigEvents+0x114>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	4a16      	ldr	r2, [pc, #88]	; (8002c38 <adcConfigEvents+0x114>)
 8002be0:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
 8002be4:	6093      	str	r3, [r2, #8]
			break;
 8002be6:	e022      	b.n	8002c2e <adcConfigEvents+0x10a>
		}

		case TIM5_CH1: {
			// Evento TIM5 CC1 event para lanzar la conversion ADC
			ADC1->CR2 |= (0xA << ADC_CR2_EXTSEL_Pos);
 8002be8:	4b13      	ldr	r3, [pc, #76]	; (8002c38 <adcConfigEvents+0x114>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <adcConfigEvents+0x114>)
 8002bee:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
 8002bf2:	6093      	str	r3, [r2, #8]
			break;
 8002bf4:	e01b      	b.n	8002c2e <adcConfigEvents+0x10a>
		}

		case TIM5_CH2: {
			// Evento TIM5 CC2 event para lanzar la conversion ADC
			ADC1->CR2 |= (0xB << ADC_CR2_EXTSEL_Pos);
 8002bf6:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <adcConfigEvents+0x114>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	4a0f      	ldr	r2, [pc, #60]	; (8002c38 <adcConfigEvents+0x114>)
 8002bfc:	f043 6330 	orr.w	r3, r3, #184549376	; 0xb000000
 8002c00:	6093      	str	r3, [r2, #8]
			break;
 8002c02:	e014      	b.n	8002c2e <adcConfigEvents+0x10a>
		}

		case TIM5_CH3: {
			// Evento TIM5 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0xC << ADC_CR2_EXTSEL_Pos);
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <adcConfigEvents+0x114>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	4a0b      	ldr	r2, [pc, #44]	; (8002c38 <adcConfigEvents+0x114>)
 8002c0a:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8002c0e:	6093      	str	r3, [r2, #8]
			break;
 8002c10:	e00d      	b.n	8002c2e <adcConfigEvents+0x10a>
		}

		default: {
			// 1100: Timer 5 CC3 event
			ADC1->CR2 |= (0xC << ADC_CR2_EXTSEL_Pos);
 8002c12:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <adcConfigEvents+0x114>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	4a08      	ldr	r2, [pc, #32]	; (8002c38 <adcConfigEvents+0x114>)
 8002c18:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8002c1c:	6093      	str	r3, [r2, #8]
			break;
 8002c1e:	e006      	b.n	8002c2e <adcConfigEvents+0x10a>

		}
	}

	else {
		ADC1->CR2 |= (0xF << ADC_CR2_EXTSEL_Pos);
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <adcConfigEvents+0x114>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	4a04      	ldr	r2, [pc, #16]	; (8002c38 <adcConfigEvents+0x114>)
 8002c26:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8002c2a:	6093      	str	r3, [r2, #8]
	}
}
 8002c2c:	bf00      	nop
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr
 8002c38:	40012000 	.word	0x40012000

08002c3c <adcMultiChannel>:
 * para realizar varias conversiones ADC. La función recibe como parámetros
 * la configuración del ADC y el número de conversiones que se requieren,
 * que para efectos prácticos es el número de canales sobre los cuales
 * se van a hacer las conversiones.
 */
void adcMultiChannel(ADC_Config_t *adcConfig, uint8_t numberOfConversion){
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	70fb      	strb	r3, [r7, #3]
	for(counter5 = 0; counter5<numberOfConversion; counter5++){
 8002c48:	4b93      	ldr	r3, [pc, #588]	; (8002e98 <adcMultiChannel+0x25c>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	701a      	strb	r2, [r3, #0]
 8002c4e:	e00e      	b.n	8002c6e <adcMultiChannel+0x32>
		/* 1. Configuramos el PinX para que cumpla la función de canal análogo deseado. */
		configAnalogPin(adcConfig->adcMultiChannel[counter5]);
 8002c50:	4b91      	ldr	r3, [pc, #580]	; (8002e98 <adcMultiChannel+0x25c>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	461a      	mov	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4413      	add	r3, r2
 8002c5a:	7a9b      	ldrb	r3, [r3, #10]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff feb1 	bl	80029c4 <configAnalogPin>
	for(counter5 = 0; counter5<numberOfConversion; counter5++){
 8002c62:	4b8d      	ldr	r3, [pc, #564]	; (8002e98 <adcMultiChannel+0x25c>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	3301      	adds	r3, #1
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	4b8b      	ldr	r3, [pc, #556]	; (8002e98 <adcMultiChannel+0x25c>)
 8002c6c:	701a      	strb	r2, [r3, #0]
 8002c6e:	4b8a      	ldr	r3, [pc, #552]	; (8002e98 <adcMultiChannel+0x25c>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d8eb      	bhi.n	8002c50 <adcMultiChannel+0x14>
	}

	/* 2. Activamos la señal de reloj para el periférico ADC1 (bus APB2)*/
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8002c78:	4b88      	ldr	r3, [pc, #544]	; (8002e9c <adcMultiChannel+0x260>)
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7c:	4a87      	ldr	r2, [pc, #540]	; (8002e9c <adcMultiChannel+0x260>)
 8002c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c82:	6453      	str	r3, [r2, #68]	; 0x44

	// Limpiamos los registros antes de comenzar a configurar
	ADC1->CR1 = 0;
 8002c84:	4b86      	ldr	r3, [pc, #536]	; (8002ea0 <adcMultiChannel+0x264>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	605a      	str	r2, [r3, #4]
	ADC1->CR2 = 0;
 8002c8a:	4b85      	ldr	r3, [pc, #532]	; (8002ea0 <adcMultiChannel+0x264>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	609a      	str	r2, [r3, #8]

	/* Comenzamos la configuración del ADC1 */
	/* 3. Resolución del ADC */
	// Preferible utilizar la conversión a 12 bits para usar
	// la máxima capacidad del microcontrolador.
	switch (adcConfig->resolution) {
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	785b      	ldrb	r3, [r3, #1]
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	d83f      	bhi.n	8002d18 <adcMultiChannel+0xdc>
 8002c98:	a201      	add	r2, pc, #4	; (adr r2, 8002ca0 <adcMultiChannel+0x64>)
 8002c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9e:	bf00      	nop
 8002ca0:	08002cb1 	.word	0x08002cb1
 8002ca4:	08002ccb 	.word	0x08002ccb
 8002ca8:	08002ce5 	.word	0x08002ce5
 8002cac:	08002cff 	.word	0x08002cff
	case ADC_RESOLUTION_12_BIT: {

		ADC1->CR1 &= ~ADC_CR1_RES_0;
 8002cb0:	4b7b      	ldr	r3, [pc, #492]	; (8002ea0 <adcMultiChannel+0x264>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	4a7a      	ldr	r2, [pc, #488]	; (8002ea0 <adcMultiChannel+0x264>)
 8002cb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cba:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_1;
 8002cbc:	4b78      	ldr	r3, [pc, #480]	; (8002ea0 <adcMultiChannel+0x264>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4a77      	ldr	r2, [pc, #476]	; (8002ea0 <adcMultiChannel+0x264>)
 8002cc2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	6053      	str	r3, [r2, #4]
		break;
 8002cc8:	e027      	b.n	8002d1a <adcMultiChannel+0xde>
	}

	case ADC_RESOLUTION_10_BIT: {

		ADC1->CR1 |= ADC_CR1_RES_0;
 8002cca:	4b75      	ldr	r3, [pc, #468]	; (8002ea0 <adcMultiChannel+0x264>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4a74      	ldr	r2, [pc, #464]	; (8002ea0 <adcMultiChannel+0x264>)
 8002cd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cd4:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_1;
 8002cd6:	4b72      	ldr	r3, [pc, #456]	; (8002ea0 <adcMultiChannel+0x264>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	4a71      	ldr	r2, [pc, #452]	; (8002ea0 <adcMultiChannel+0x264>)
 8002cdc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002ce0:	6053      	str	r3, [r2, #4]
		break;
 8002ce2:	e01a      	b.n	8002d1a <adcMultiChannel+0xde>
	}

	case ADC_RESOLUTION_8_BIT: {

		ADC1->CR1 |= ADC_CR1_RES_1;
 8002ce4:	4b6e      	ldr	r3, [pc, #440]	; (8002ea0 <adcMultiChannel+0x264>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4a6d      	ldr	r2, [pc, #436]	; (8002ea0 <adcMultiChannel+0x264>)
 8002cea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cee:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_0;
 8002cf0:	4b6b      	ldr	r3, [pc, #428]	; (8002ea0 <adcMultiChannel+0x264>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	4a6a      	ldr	r2, [pc, #424]	; (8002ea0 <adcMultiChannel+0x264>)
 8002cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cfa:	6053      	str	r3, [r2, #4]
		break;
 8002cfc:	e00d      	b.n	8002d1a <adcMultiChannel+0xde>
	}

	case ADC_RESOLUTION_6_BIT: {
		ADC1->CR1 |= ADC_CR1_RES_0;
 8002cfe:	4b68      	ldr	r3, [pc, #416]	; (8002ea0 <adcMultiChannel+0x264>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	4a67      	ldr	r2, [pc, #412]	; (8002ea0 <adcMultiChannel+0x264>)
 8002d04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d08:	6053      	str	r3, [r2, #4]
		ADC1->CR1 |= ADC_CR1_RES_1;
 8002d0a:	4b65      	ldr	r3, [pc, #404]	; (8002ea0 <adcMultiChannel+0x264>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	4a64      	ldr	r2, [pc, #400]	; (8002ea0 <adcMultiChannel+0x264>)
 8002d10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d14:	6053      	str	r3, [r2, #4]
		break;
 8002d16:	e000      	b.n	8002d1a <adcMultiChannel+0xde>
	}

	default: {
		break;
 8002d18:	bf00      	nop
	}
	}

	/* 4. Configuramos el modo Scan como ACTIVADO */
	ADC1->CR1 |= ADC_CR1_SCAN;
 8002d1a:	4b61      	ldr	r3, [pc, #388]	; (8002ea0 <adcMultiChannel+0x264>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	4a60      	ldr	r2, [pc, #384]	; (8002ea0 <adcMultiChannel+0x264>)
 8002d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d24:	6053      	str	r3, [r2, #4]
	// Se configura además el EOCS end of conversion.
	ADC1->CR2 |= ADC_CR2_EOCS;
 8002d26:	4b5e      	ldr	r3, [pc, #376]	; (8002ea0 <adcMultiChannel+0x264>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	4a5d      	ldr	r2, [pc, #372]	; (8002ea0 <adcMultiChannel+0x264>)
 8002d2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d30:	6093      	str	r3, [r2, #8]

	/* 5. Configuramos la alineación de los datos (derecha o izquierda) */
	if (adcConfig->dataAlignment == ADC_ALIGNMENT_RIGHT) {
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	791b      	ldrb	r3, [r3, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d106      	bne.n	8002d48 <adcMultiChannel+0x10c>
		// Alineación a la derecha (esta es la forma "natural")
		ADC1->CR2 &= ~ADC_CR2_ALIGN;
 8002d3a:	4b59      	ldr	r3, [pc, #356]	; (8002ea0 <adcMultiChannel+0x264>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	4a58      	ldr	r2, [pc, #352]	; (8002ea0 <adcMultiChannel+0x264>)
 8002d40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d44:	6093      	str	r3, [r2, #8]
 8002d46:	e005      	b.n	8002d54 <adcMultiChannel+0x118>
	} else {
		// Alineación a la izquierda (para algunos cálculos matemáticos)
		ADC1->CR2 |= ADC_CR2_ALIGN;
 8002d48:	4b55      	ldr	r3, [pc, #340]	; (8002ea0 <adcMultiChannel+0x264>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	4a54      	ldr	r2, [pc, #336]	; (8002ea0 <adcMultiChannel+0x264>)
 8002d4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d52:	6093      	str	r3, [r2, #8]
	}

	/* 6. Desactivamos el "continuos mode" */
	ADC1->CR2 &= ~ADC_CR2_CONT;
 8002d54:	4b52      	ldr	r3, [pc, #328]	; (8002ea0 <adcMultiChannel+0x264>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	4a51      	ldr	r2, [pc, #324]	; (8002ea0 <adcMultiChannel+0x264>)
 8002d5a:	f023 0302 	bic.w	r3, r3, #2
 8002d5e:	6093      	str	r3, [r2, #8]

	/* 7. Acá se debería configurar el sampling...*/



	for(counter5 = 0; counter5 < numberOfConversion; counter5++){
 8002d60:	4b4d      	ldr	r3, [pc, #308]	; (8002e98 <adcMultiChannel+0x25c>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	701a      	strb	r2, [r3, #0]
 8002d66:	e05e      	b.n	8002e26 <adcMultiChannel+0x1ea>
		if (adcConfig->adcMultiChannel[counter5] <= ADC_CHANNEL_9) {
 8002d68:	4b4b      	ldr	r3, [pc, #300]	; (8002e98 <adcMultiChannel+0x25c>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4413      	add	r3, r2
 8002d72:	7a9b      	ldrb	r3, [r3, #10]
 8002d74:	2b09      	cmp	r3, #9
 8002d76:	d827      	bhi.n	8002dc8 <adcMultiChannel+0x18c>
			ADC1->SMPR2 &= ~(0b111 << (3 * (adcConfig->adcMultiChannel[counter5])));
 8002d78:	4b49      	ldr	r3, [pc, #292]	; (8002ea0 <adcMultiChannel+0x264>)
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	4b46      	ldr	r3, [pc, #280]	; (8002e98 <adcMultiChannel+0x25c>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	4619      	mov	r1, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	440b      	add	r3, r1
 8002d86:	7a9b      	ldrb	r3, [r3, #10]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	440b      	add	r3, r1
 8002d90:	2107      	movs	r1, #7
 8002d92:	fa01 f303 	lsl.w	r3, r1, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	4941      	ldr	r1, [pc, #260]	; (8002ea0 <adcMultiChannel+0x264>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	610b      	str	r3, [r1, #16]
			// Acá se establecen la cantidad de ciclos para cada canal (0 al 9)
			ADC1->SMPR2 |= (adcConfig->samplingPeriod << (3 * (adcConfig->adcMultiChannel[counter5])));
 8002d9e:	4b40      	ldr	r3, [pc, #256]	; (8002ea0 <adcMultiChannel+0x264>)
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	885b      	ldrh	r3, [r3, #2]
 8002da6:	4618      	mov	r0, r3
 8002da8:	4b3b      	ldr	r3, [pc, #236]	; (8002e98 <adcMultiChannel+0x25c>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	4619      	mov	r1, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	440b      	add	r3, r1
 8002db2:	7a9b      	ldrb	r3, [r3, #10]
 8002db4:	4619      	mov	r1, r3
 8002db6:	460b      	mov	r3, r1
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	440b      	add	r3, r1
 8002dbc:	fa00 f303 	lsl.w	r3, r0, r3
 8002dc0:	4937      	ldr	r1, [pc, #220]	; (8002ea0 <adcMultiChannel+0x264>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	610b      	str	r3, [r1, #16]
 8002dc6:	e028      	b.n	8002e1a <adcMultiChannel+0x1de>

		} else {
			ADC1->SMPR1 &= ~(0b111 << (3 * (adcConfig->adcMultiChannel[counter5] - 10)));
 8002dc8:	4b35      	ldr	r3, [pc, #212]	; (8002ea0 <adcMultiChannel+0x264>)
 8002dca:	68d9      	ldr	r1, [r3, #12]
 8002dcc:	4b32      	ldr	r3, [pc, #200]	; (8002e98 <adcMultiChannel+0x25c>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	7a9b      	ldrb	r3, [r3, #10]
 8002dd8:	f1a3 020a 	sub.w	r2, r3, #10
 8002ddc:	4613      	mov	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	2207      	movs	r2, #7
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	4a2d      	ldr	r2, [pc, #180]	; (8002ea0 <adcMultiChannel+0x264>)
 8002dec:	400b      	ands	r3, r1
 8002dee:	60d3      	str	r3, [r2, #12]
			// Acá se establecen la cantidad de ciclos para cada canal (10 al 18)
			ADC1->SMPR1 |= (adcConfig->samplingPeriod << (3 * (adcConfig->adcMultiChannel[counter5] - 10)));
 8002df0:	4b2b      	ldr	r3, [pc, #172]	; (8002ea0 <adcMultiChannel+0x264>)
 8002df2:	68d9      	ldr	r1, [r3, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	885b      	ldrh	r3, [r3, #2]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	4b27      	ldr	r3, [pc, #156]	; (8002e98 <adcMultiChannel+0x25c>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4413      	add	r3, r2
 8002e04:	7a9b      	ldrb	r3, [r3, #10]
 8002e06:	f1a3 020a 	sub.w	r2, r3, #10
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	4413      	add	r3, r2
 8002e10:	fa00 f303 	lsl.w	r3, r0, r3
 8002e14:	4a22      	ldr	r2, [pc, #136]	; (8002ea0 <adcMultiChannel+0x264>)
 8002e16:	430b      	orrs	r3, r1
 8002e18:	60d3      	str	r3, [r2, #12]
	for(counter5 = 0; counter5 < numberOfConversion; counter5++){
 8002e1a:	4b1f      	ldr	r3, [pc, #124]	; (8002e98 <adcMultiChannel+0x25c>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	4b1d      	ldr	r3, [pc, #116]	; (8002e98 <adcMultiChannel+0x25c>)
 8002e24:	701a      	strb	r2, [r3, #0]
 8002e26:	4b1c      	ldr	r3, [pc, #112]	; (8002e98 <adcMultiChannel+0x25c>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	78fa      	ldrb	r2, [r7, #3]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d89b      	bhi.n	8002d68 <adcMultiChannel+0x12c>

		}
	}
	ADC1->SQR1 = 0;
 8002e30:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <adcMultiChannel+0x264>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1->SQR2 = 0;
 8002e36:	4b1a      	ldr	r3, [pc, #104]	; (8002ea0 <adcMultiChannel+0x264>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
	ADC1->SQR3 = 0;
 8002e3c:	4b18      	ldr	r3, [pc, #96]	; (8002ea0 <adcMultiChannel+0x264>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	635a      	str	r2, [r3, #52]	; 0x34

	/* 8. Configuramos la secuencia y cuantos elementos hay en la secuencia */
	// Al hacerlo todo 0, estamos seleccionando solo 1 elemento en el conteo de la secuencia
	ADC1->SQR1 |= (numberOfConversion - 1) << ADC_SQR1_L_Pos;
 8002e42:	4b17      	ldr	r3, [pc, #92]	; (8002ea0 <adcMultiChannel+0x264>)
 8002e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	3a01      	subs	r2, #1
 8002e4a:	0512      	lsls	r2, r2, #20
 8002e4c:	4611      	mov	r1, r2
 8002e4e:	4a14      	ldr	r2, [pc, #80]	; (8002ea0 <adcMultiChannel+0x264>)
 8002e50:	430b      	orrs	r3, r1
 8002e52:	62d3      	str	r3, [r2, #44]	; 0x2c

	// Asignamos el orden de la conversión dependiendo del canal en que
	// se esté haciendo, de allí la variación en la agrupación de los
	// registros.
	for(counter5 = 0; counter5 < numberOfConversion; counter5++){
 8002e54:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <adcMultiChannel+0x25c>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	701a      	strb	r2, [r3, #0]
 8002e5a:	e06b      	b.n	8002f34 <adcMultiChannel+0x2f8>
		if(adcConfig->adcMultiChannel[counter5] <= 6){
 8002e5c:	4b0e      	ldr	r3, [pc, #56]	; (8002e98 <adcMultiChannel+0x25c>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	461a      	mov	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	7a9b      	ldrb	r3, [r3, #10]
 8002e68:	2b06      	cmp	r3, #6
 8002e6a:	d81b      	bhi.n	8002ea4 <adcMultiChannel+0x268>
			ADC1->SQR3 |= (adcConfig->adcMultiChannel[counter5] << (5 * counter5));
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <adcMultiChannel+0x264>)
 8002e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e70:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <adcMultiChannel+0x25c>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	4619      	mov	r1, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	440b      	add	r3, r1
 8002e7a:	7a9b      	ldrb	r3, [r3, #10]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <adcMultiChannel+0x25c>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	4619      	mov	r1, r3
 8002e84:	460b      	mov	r3, r1
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	fa00 f303 	lsl.w	r3, r0, r3
 8002e8e:	4904      	ldr	r1, [pc, #16]	; (8002ea0 <adcMultiChannel+0x264>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	634b      	str	r3, [r1, #52]	; 0x34
 8002e94:	e048      	b.n	8002f28 <adcMultiChannel+0x2ec>
 8002e96:	bf00      	nop
 8002e98:	20000534 	.word	0x20000534
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40012000 	.word	0x40012000
		}
		else if(adcConfig->adcMultiChannel[counter5] > 6 && adcConfig->adcMultiChannel[counter5] <= 12){
 8002ea4:	4b36      	ldr	r3, [pc, #216]	; (8002f80 <adcMultiChannel+0x344>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4413      	add	r3, r2
 8002eae:	7a9b      	ldrb	r3, [r3, #10]
 8002eb0:	2b06      	cmp	r3, #6
 8002eb2:	d91c      	bls.n	8002eee <adcMultiChannel+0x2b2>
 8002eb4:	4b32      	ldr	r3, [pc, #200]	; (8002f80 <adcMultiChannel+0x344>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	7a9b      	ldrb	r3, [r3, #10]
 8002ec0:	2b0c      	cmp	r3, #12
 8002ec2:	d814      	bhi.n	8002eee <adcMultiChannel+0x2b2>
			ADC1->SQR2 |= (adcConfig->adcMultiChannel[counter5] << (5 * (counter5 - 7)));
 8002ec4:	4b2f      	ldr	r3, [pc, #188]	; (8002f84 <adcMultiChannel+0x348>)
 8002ec6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ec8:	4b2d      	ldr	r3, [pc, #180]	; (8002f80 <adcMultiChannel+0x344>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	7a9b      	ldrb	r3, [r3, #10]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	4b2a      	ldr	r3, [pc, #168]	; (8002f80 <adcMultiChannel+0x344>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	1fda      	subs	r2, r3, #7
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	fa00 f303 	lsl.w	r3, r0, r3
 8002ee6:	4a27      	ldr	r2, [pc, #156]	; (8002f84 <adcMultiChannel+0x348>)
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	6313      	str	r3, [r2, #48]	; 0x30
 8002eec:	e01c      	b.n	8002f28 <adcMultiChannel+0x2ec>
		}
		else if(adcConfig->adcMultiChannel[counter5] > 12){
 8002eee:	4b24      	ldr	r3, [pc, #144]	; (8002f80 <adcMultiChannel+0x344>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	7a9b      	ldrb	r3, [r3, #10]
 8002efa:	2b0c      	cmp	r3, #12
 8002efc:	d914      	bls.n	8002f28 <adcMultiChannel+0x2ec>
			ADC1->SQR1 |= (adcConfig->adcMultiChannel[counter5] << (5 * (counter5 - 13)));
 8002efe:	4b21      	ldr	r3, [pc, #132]	; (8002f84 <adcMultiChannel+0x348>)
 8002f00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f02:	4b1f      	ldr	r3, [pc, #124]	; (8002f80 <adcMultiChannel+0x344>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	7a9b      	ldrb	r3, [r3, #10]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <adcMultiChannel+0x344>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	f1a3 020d 	sub.w	r2, r3, #13
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	fa00 f303 	lsl.w	r3, r0, r3
 8002f22:	4a18      	ldr	r2, [pc, #96]	; (8002f84 <adcMultiChannel+0x348>)
 8002f24:	430b      	orrs	r3, r1
 8002f26:	62d3      	str	r3, [r2, #44]	; 0x2c
	for(counter5 = 0; counter5 < numberOfConversion; counter5++){
 8002f28:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <adcMultiChannel+0x344>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <adcMultiChannel+0x344>)
 8002f32:	701a      	strb	r2, [r3, #0]
 8002f34:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <adcMultiChannel+0x344>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d88e      	bhi.n	8002e5c <adcMultiChannel+0x220>
		}
	}

	/* 9. Configuramos el preescaler del ADC en 2:1 (el mas rápido que se puede tener */
	ADC->CCR &= ~ADC_CCR_ADCPRE;
 8002f3e:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <adcMultiChannel+0x34c>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4a11      	ldr	r2, [pc, #68]	; (8002f88 <adcMultiChannel+0x34c>)
 8002f44:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002f48:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f4a:	b672      	cpsid	i
}
 8002f4c:	bf00      	nop

	/* 10. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 11. Activamos la interrupción debida a la finalización de una conversión EOC (CR1)*/
	ADC1->CR1 |= ADC_CR1_EOCIE;
 8002f4e:	4b0d      	ldr	r3, [pc, #52]	; (8002f84 <adcMultiChannel+0x348>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4a0c      	ldr	r2, [pc, #48]	; (8002f84 <adcMultiChannel+0x348>)
 8002f54:	f043 0320 	orr.w	r3, r3, #32
 8002f58:	6053      	str	r3, [r2, #4]

	/* 11a. Matriculamos la interrupción en el NVIC*/
	__NVIC_EnableIRQ(ADC_IRQn);
 8002f5a:	2012      	movs	r0, #18
 8002f5c:	f7ff fccc 	bl	80028f8 <__NVIC_EnableIRQ>

	/* 11b. Configuramos la prioridad para la interrupción ADC */
	__NVIC_SetPriority(ADC_IRQn, 4);
 8002f60:	2104      	movs	r1, #4
 8002f62:	2012      	movs	r0, #18
 8002f64:	f7ff fce4 	bl	8002930 <__NVIC_SetPriority>

	/* 12. Activamos el modulo ADC */
	ADC1->CR2 |= ADC_CR2_ADON;
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <adcMultiChannel+0x348>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	4a05      	ldr	r2, [pc, #20]	; (8002f84 <adcMultiChannel+0x348>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f74:	b662      	cpsie	i
}
 8002f76:	bf00      	nop

	/* 13. Activamos las interrupciones globales */
	__enable_irq();

}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20000534 	.word	0x20000534
 8002f84:	40012000 	.word	0x40012000
 8002f88:	40012300 	.word	0x40012300

08002f8c <getConfigPLL>:
	RCC->CR |= RCC_CR_HSITRIM_3;

}// FIN DE LA FUNCIÓN DE CONFIGURACIÓN PARA DISTINTAS FRECUENCIAS.

// Función para saber el estado del PLL y así poder caracterizar lo demás.
uint32_t getConfigPLL(void){
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
	// Se buscan los valores que están definiendo los valores actuales del reloj PLL
	uint32_t PLLN = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 8002f92:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <getConfigPLL+0x3c>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	099b      	lsrs	r3, r3, #6
 8002f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f9c:	60fb      	str	r3, [r7, #12]
	uint32_t PLLM = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos;
 8002f9e:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <getConfigPLL+0x3c>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fa6:	60bb      	str	r3, [r7, #8]
	// Se hace la operación para saber el valor actual del reloj. (Asume PLLP =2)
	uint32_t clockMicro = (HSI_VALUE / PLLM) * PLLN / 2;
 8002fa8:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <getConfigPLL+0x40>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	fb02 f303 	mul.w	r3, r2, r3
 8002fb8:	085b      	lsrs	r3, r3, #1
 8002fba:	607b      	str	r3, [r7, #4]
	return clockMicro;
 8002fbc:	687b      	ldr	r3, [r7, #4]

}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	20000040 	.word	0x20000040

08002fd0 <__libc_init_array>:
 8002fd0:	b570      	push	{r4, r5, r6, lr}
 8002fd2:	4d0d      	ldr	r5, [pc, #52]	; (8003008 <__libc_init_array+0x38>)
 8002fd4:	4c0d      	ldr	r4, [pc, #52]	; (800300c <__libc_init_array+0x3c>)
 8002fd6:	1b64      	subs	r4, r4, r5
 8002fd8:	10a4      	asrs	r4, r4, #2
 8002fda:	2600      	movs	r6, #0
 8002fdc:	42a6      	cmp	r6, r4
 8002fde:	d109      	bne.n	8002ff4 <__libc_init_array+0x24>
 8002fe0:	4d0b      	ldr	r5, [pc, #44]	; (8003010 <__libc_init_array+0x40>)
 8002fe2:	4c0c      	ldr	r4, [pc, #48]	; (8003014 <__libc_init_array+0x44>)
 8002fe4:	f005 f8be 	bl	8008164 <_init>
 8002fe8:	1b64      	subs	r4, r4, r5
 8002fea:	10a4      	asrs	r4, r4, #2
 8002fec:	2600      	movs	r6, #0
 8002fee:	42a6      	cmp	r6, r4
 8002ff0:	d105      	bne.n	8002ffe <__libc_init_array+0x2e>
 8002ff2:	bd70      	pop	{r4, r5, r6, pc}
 8002ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ff8:	4798      	blx	r3
 8002ffa:	3601      	adds	r6, #1
 8002ffc:	e7ee      	b.n	8002fdc <__libc_init_array+0xc>
 8002ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003002:	4798      	blx	r3
 8003004:	3601      	adds	r6, #1
 8003006:	e7f2      	b.n	8002fee <__libc_init_array+0x1e>
 8003008:	080094cc 	.word	0x080094cc
 800300c:	080094cc 	.word	0x080094cc
 8003010:	080094cc 	.word	0x080094cc
 8003014:	080094d0 	.word	0x080094d0

08003018 <memset>:
 8003018:	4402      	add	r2, r0
 800301a:	4603      	mov	r3, r0
 800301c:	4293      	cmp	r3, r2
 800301e:	d100      	bne.n	8003022 <memset+0xa>
 8003020:	4770      	bx	lr
 8003022:	f803 1b01 	strb.w	r1, [r3], #1
 8003026:	e7f9      	b.n	800301c <memset+0x4>

08003028 <__cvt>:
 8003028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800302c:	b088      	sub	sp, #32
 800302e:	2b00      	cmp	r3, #0
 8003030:	461f      	mov	r7, r3
 8003032:	4614      	mov	r4, r2
 8003034:	bfb8      	it	lt
 8003036:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800303a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800303c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800303e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003042:	bfb6      	itet	lt
 8003044:	461f      	movlt	r7, r3
 8003046:	2300      	movge	r3, #0
 8003048:	232d      	movlt	r3, #45	; 0x2d
 800304a:	7013      	strb	r3, [r2, #0]
 800304c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800304e:	f023 0820 	bic.w	r8, r3, #32
 8003052:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003056:	d005      	beq.n	8003064 <__cvt+0x3c>
 8003058:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800305c:	d100      	bne.n	8003060 <__cvt+0x38>
 800305e:	3501      	adds	r5, #1
 8003060:	2302      	movs	r3, #2
 8003062:	e000      	b.n	8003066 <__cvt+0x3e>
 8003064:	2303      	movs	r3, #3
 8003066:	aa07      	add	r2, sp, #28
 8003068:	9204      	str	r2, [sp, #16]
 800306a:	aa06      	add	r2, sp, #24
 800306c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003070:	e9cd 3500 	strd	r3, r5, [sp]
 8003074:	4622      	mov	r2, r4
 8003076:	463b      	mov	r3, r7
 8003078:	f001 fe0a 	bl	8004c90 <_dtoa_r>
 800307c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003080:	4606      	mov	r6, r0
 8003082:	d102      	bne.n	800308a <__cvt+0x62>
 8003084:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003086:	07db      	lsls	r3, r3, #31
 8003088:	d522      	bpl.n	80030d0 <__cvt+0xa8>
 800308a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800308e:	eb06 0905 	add.w	r9, r6, r5
 8003092:	d110      	bne.n	80030b6 <__cvt+0x8e>
 8003094:	7833      	ldrb	r3, [r6, #0]
 8003096:	2b30      	cmp	r3, #48	; 0x30
 8003098:	d10a      	bne.n	80030b0 <__cvt+0x88>
 800309a:	2200      	movs	r2, #0
 800309c:	2300      	movs	r3, #0
 800309e:	4620      	mov	r0, r4
 80030a0:	4639      	mov	r1, r7
 80030a2:	f7fd fd29 	bl	8000af8 <__aeabi_dcmpeq>
 80030a6:	b918      	cbnz	r0, 80030b0 <__cvt+0x88>
 80030a8:	f1c5 0501 	rsb	r5, r5, #1
 80030ac:	f8ca 5000 	str.w	r5, [sl]
 80030b0:	f8da 3000 	ldr.w	r3, [sl]
 80030b4:	4499      	add	r9, r3
 80030b6:	2200      	movs	r2, #0
 80030b8:	2300      	movs	r3, #0
 80030ba:	4620      	mov	r0, r4
 80030bc:	4639      	mov	r1, r7
 80030be:	f7fd fd1b 	bl	8000af8 <__aeabi_dcmpeq>
 80030c2:	b108      	cbz	r0, 80030c8 <__cvt+0xa0>
 80030c4:	f8cd 901c 	str.w	r9, [sp, #28]
 80030c8:	2230      	movs	r2, #48	; 0x30
 80030ca:	9b07      	ldr	r3, [sp, #28]
 80030cc:	454b      	cmp	r3, r9
 80030ce:	d307      	bcc.n	80030e0 <__cvt+0xb8>
 80030d0:	9b07      	ldr	r3, [sp, #28]
 80030d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80030d4:	1b9b      	subs	r3, r3, r6
 80030d6:	4630      	mov	r0, r6
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	b008      	add	sp, #32
 80030dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030e0:	1c59      	adds	r1, r3, #1
 80030e2:	9107      	str	r1, [sp, #28]
 80030e4:	701a      	strb	r2, [r3, #0]
 80030e6:	e7f0      	b.n	80030ca <__cvt+0xa2>

080030e8 <__exponent>:
 80030e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030ea:	4603      	mov	r3, r0
 80030ec:	2900      	cmp	r1, #0
 80030ee:	bfb8      	it	lt
 80030f0:	4249      	neglt	r1, r1
 80030f2:	f803 2b02 	strb.w	r2, [r3], #2
 80030f6:	bfb4      	ite	lt
 80030f8:	222d      	movlt	r2, #45	; 0x2d
 80030fa:	222b      	movge	r2, #43	; 0x2b
 80030fc:	2909      	cmp	r1, #9
 80030fe:	7042      	strb	r2, [r0, #1]
 8003100:	dd2a      	ble.n	8003158 <__exponent+0x70>
 8003102:	f10d 0407 	add.w	r4, sp, #7
 8003106:	46a4      	mov	ip, r4
 8003108:	270a      	movs	r7, #10
 800310a:	46a6      	mov	lr, r4
 800310c:	460a      	mov	r2, r1
 800310e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003112:	fb07 1516 	mls	r5, r7, r6, r1
 8003116:	3530      	adds	r5, #48	; 0x30
 8003118:	2a63      	cmp	r2, #99	; 0x63
 800311a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800311e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003122:	4631      	mov	r1, r6
 8003124:	dcf1      	bgt.n	800310a <__exponent+0x22>
 8003126:	3130      	adds	r1, #48	; 0x30
 8003128:	f1ae 0502 	sub.w	r5, lr, #2
 800312c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003130:	1c44      	adds	r4, r0, #1
 8003132:	4629      	mov	r1, r5
 8003134:	4561      	cmp	r1, ip
 8003136:	d30a      	bcc.n	800314e <__exponent+0x66>
 8003138:	f10d 0209 	add.w	r2, sp, #9
 800313c:	eba2 020e 	sub.w	r2, r2, lr
 8003140:	4565      	cmp	r5, ip
 8003142:	bf88      	it	hi
 8003144:	2200      	movhi	r2, #0
 8003146:	4413      	add	r3, r2
 8003148:	1a18      	subs	r0, r3, r0
 800314a:	b003      	add	sp, #12
 800314c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800314e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003152:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003156:	e7ed      	b.n	8003134 <__exponent+0x4c>
 8003158:	2330      	movs	r3, #48	; 0x30
 800315a:	3130      	adds	r1, #48	; 0x30
 800315c:	7083      	strb	r3, [r0, #2]
 800315e:	70c1      	strb	r1, [r0, #3]
 8003160:	1d03      	adds	r3, r0, #4
 8003162:	e7f1      	b.n	8003148 <__exponent+0x60>

08003164 <_printf_float>:
 8003164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003168:	b091      	sub	sp, #68	; 0x44
 800316a:	460c      	mov	r4, r1
 800316c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003170:	4616      	mov	r6, r2
 8003172:	461f      	mov	r7, r3
 8003174:	4605      	mov	r5, r0
 8003176:	f002 fee5 	bl	8005f44 <_localeconv_r>
 800317a:	6803      	ldr	r3, [r0, #0]
 800317c:	9309      	str	r3, [sp, #36]	; 0x24
 800317e:	4618      	mov	r0, r3
 8003180:	f7fd f838 	bl	80001f4 <strlen>
 8003184:	2300      	movs	r3, #0
 8003186:	930e      	str	r3, [sp, #56]	; 0x38
 8003188:	f8d8 3000 	ldr.w	r3, [r8]
 800318c:	900a      	str	r0, [sp, #40]	; 0x28
 800318e:	3307      	adds	r3, #7
 8003190:	f023 0307 	bic.w	r3, r3, #7
 8003194:	f103 0208 	add.w	r2, r3, #8
 8003198:	f894 9018 	ldrb.w	r9, [r4, #24]
 800319c:	f8d4 b000 	ldr.w	fp, [r4]
 80031a0:	f8c8 2000 	str.w	r2, [r8]
 80031a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80031ac:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80031b0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80031b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80031b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80031b8:	4b9c      	ldr	r3, [pc, #624]	; (800342c <_printf_float+0x2c8>)
 80031ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031be:	4640      	mov	r0, r8
 80031c0:	f7fd fccc 	bl	8000b5c <__aeabi_dcmpun>
 80031c4:	bb70      	cbnz	r0, 8003224 <_printf_float+0xc0>
 80031c6:	4b99      	ldr	r3, [pc, #612]	; (800342c <_printf_float+0x2c8>)
 80031c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80031ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031ce:	4640      	mov	r0, r8
 80031d0:	f7fd fca6 	bl	8000b20 <__aeabi_dcmple>
 80031d4:	bb30      	cbnz	r0, 8003224 <_printf_float+0xc0>
 80031d6:	2200      	movs	r2, #0
 80031d8:	2300      	movs	r3, #0
 80031da:	4640      	mov	r0, r8
 80031dc:	4651      	mov	r1, sl
 80031de:	f7fd fc95 	bl	8000b0c <__aeabi_dcmplt>
 80031e2:	b110      	cbz	r0, 80031ea <_printf_float+0x86>
 80031e4:	232d      	movs	r3, #45	; 0x2d
 80031e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031ea:	4b91      	ldr	r3, [pc, #580]	; (8003430 <_printf_float+0x2cc>)
 80031ec:	4891      	ldr	r0, [pc, #580]	; (8003434 <_printf_float+0x2d0>)
 80031ee:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80031f2:	bf94      	ite	ls
 80031f4:	4698      	movls	r8, r3
 80031f6:	4680      	movhi	r8, r0
 80031f8:	2303      	movs	r3, #3
 80031fa:	6123      	str	r3, [r4, #16]
 80031fc:	f02b 0304 	bic.w	r3, fp, #4
 8003200:	6023      	str	r3, [r4, #0]
 8003202:	f04f 0a00 	mov.w	sl, #0
 8003206:	9700      	str	r7, [sp, #0]
 8003208:	4633      	mov	r3, r6
 800320a:	aa0f      	add	r2, sp, #60	; 0x3c
 800320c:	4621      	mov	r1, r4
 800320e:	4628      	mov	r0, r5
 8003210:	f000 f9d2 	bl	80035b8 <_printf_common>
 8003214:	3001      	adds	r0, #1
 8003216:	f040 808f 	bne.w	8003338 <_printf_float+0x1d4>
 800321a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800321e:	b011      	add	sp, #68	; 0x44
 8003220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003224:	4642      	mov	r2, r8
 8003226:	4653      	mov	r3, sl
 8003228:	4640      	mov	r0, r8
 800322a:	4651      	mov	r1, sl
 800322c:	f7fd fc96 	bl	8000b5c <__aeabi_dcmpun>
 8003230:	b140      	cbz	r0, 8003244 <_printf_float+0xe0>
 8003232:	f1ba 0f00 	cmp.w	sl, #0
 8003236:	bfbc      	itt	lt
 8003238:	232d      	movlt	r3, #45	; 0x2d
 800323a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800323e:	487e      	ldr	r0, [pc, #504]	; (8003438 <_printf_float+0x2d4>)
 8003240:	4b7e      	ldr	r3, [pc, #504]	; (800343c <_printf_float+0x2d8>)
 8003242:	e7d4      	b.n	80031ee <_printf_float+0x8a>
 8003244:	6863      	ldr	r3, [r4, #4]
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800324c:	d142      	bne.n	80032d4 <_printf_float+0x170>
 800324e:	2306      	movs	r3, #6
 8003250:	6063      	str	r3, [r4, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	9206      	str	r2, [sp, #24]
 8003256:	aa0e      	add	r2, sp, #56	; 0x38
 8003258:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800325c:	aa0d      	add	r2, sp, #52	; 0x34
 800325e:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003262:	9203      	str	r2, [sp, #12]
 8003264:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003268:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800326c:	6023      	str	r3, [r4, #0]
 800326e:	6863      	ldr	r3, [r4, #4]
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	4642      	mov	r2, r8
 8003274:	4653      	mov	r3, sl
 8003276:	4628      	mov	r0, r5
 8003278:	910b      	str	r1, [sp, #44]	; 0x2c
 800327a:	f7ff fed5 	bl	8003028 <__cvt>
 800327e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003280:	2947      	cmp	r1, #71	; 0x47
 8003282:	4680      	mov	r8, r0
 8003284:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003286:	d108      	bne.n	800329a <_printf_float+0x136>
 8003288:	1cc8      	adds	r0, r1, #3
 800328a:	db02      	blt.n	8003292 <_printf_float+0x12e>
 800328c:	6863      	ldr	r3, [r4, #4]
 800328e:	4299      	cmp	r1, r3
 8003290:	dd40      	ble.n	8003314 <_printf_float+0x1b0>
 8003292:	f1a9 0902 	sub.w	r9, r9, #2
 8003296:	fa5f f989 	uxtb.w	r9, r9
 800329a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800329e:	d81f      	bhi.n	80032e0 <_printf_float+0x17c>
 80032a0:	3901      	subs	r1, #1
 80032a2:	464a      	mov	r2, r9
 80032a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80032a8:	910d      	str	r1, [sp, #52]	; 0x34
 80032aa:	f7ff ff1d 	bl	80030e8 <__exponent>
 80032ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80032b0:	1813      	adds	r3, r2, r0
 80032b2:	2a01      	cmp	r2, #1
 80032b4:	4682      	mov	sl, r0
 80032b6:	6123      	str	r3, [r4, #16]
 80032b8:	dc02      	bgt.n	80032c0 <_printf_float+0x15c>
 80032ba:	6822      	ldr	r2, [r4, #0]
 80032bc:	07d2      	lsls	r2, r2, #31
 80032be:	d501      	bpl.n	80032c4 <_printf_float+0x160>
 80032c0:	3301      	adds	r3, #1
 80032c2:	6123      	str	r3, [r4, #16]
 80032c4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d09c      	beq.n	8003206 <_printf_float+0xa2>
 80032cc:	232d      	movs	r3, #45	; 0x2d
 80032ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032d2:	e798      	b.n	8003206 <_printf_float+0xa2>
 80032d4:	2947      	cmp	r1, #71	; 0x47
 80032d6:	d1bc      	bne.n	8003252 <_printf_float+0xee>
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1ba      	bne.n	8003252 <_printf_float+0xee>
 80032dc:	2301      	movs	r3, #1
 80032de:	e7b7      	b.n	8003250 <_printf_float+0xec>
 80032e0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80032e4:	d118      	bne.n	8003318 <_printf_float+0x1b4>
 80032e6:	2900      	cmp	r1, #0
 80032e8:	6863      	ldr	r3, [r4, #4]
 80032ea:	dd0b      	ble.n	8003304 <_printf_float+0x1a0>
 80032ec:	6121      	str	r1, [r4, #16]
 80032ee:	b913      	cbnz	r3, 80032f6 <_printf_float+0x192>
 80032f0:	6822      	ldr	r2, [r4, #0]
 80032f2:	07d0      	lsls	r0, r2, #31
 80032f4:	d502      	bpl.n	80032fc <_printf_float+0x198>
 80032f6:	3301      	adds	r3, #1
 80032f8:	440b      	add	r3, r1
 80032fa:	6123      	str	r3, [r4, #16]
 80032fc:	65a1      	str	r1, [r4, #88]	; 0x58
 80032fe:	f04f 0a00 	mov.w	sl, #0
 8003302:	e7df      	b.n	80032c4 <_printf_float+0x160>
 8003304:	b913      	cbnz	r3, 800330c <_printf_float+0x1a8>
 8003306:	6822      	ldr	r2, [r4, #0]
 8003308:	07d2      	lsls	r2, r2, #31
 800330a:	d501      	bpl.n	8003310 <_printf_float+0x1ac>
 800330c:	3302      	adds	r3, #2
 800330e:	e7f4      	b.n	80032fa <_printf_float+0x196>
 8003310:	2301      	movs	r3, #1
 8003312:	e7f2      	b.n	80032fa <_printf_float+0x196>
 8003314:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003318:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800331a:	4299      	cmp	r1, r3
 800331c:	db05      	blt.n	800332a <_printf_float+0x1c6>
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	6121      	str	r1, [r4, #16]
 8003322:	07d8      	lsls	r0, r3, #31
 8003324:	d5ea      	bpl.n	80032fc <_printf_float+0x198>
 8003326:	1c4b      	adds	r3, r1, #1
 8003328:	e7e7      	b.n	80032fa <_printf_float+0x196>
 800332a:	2900      	cmp	r1, #0
 800332c:	bfd4      	ite	le
 800332e:	f1c1 0202 	rsble	r2, r1, #2
 8003332:	2201      	movgt	r2, #1
 8003334:	4413      	add	r3, r2
 8003336:	e7e0      	b.n	80032fa <_printf_float+0x196>
 8003338:	6823      	ldr	r3, [r4, #0]
 800333a:	055a      	lsls	r2, r3, #21
 800333c:	d407      	bmi.n	800334e <_printf_float+0x1ea>
 800333e:	6923      	ldr	r3, [r4, #16]
 8003340:	4642      	mov	r2, r8
 8003342:	4631      	mov	r1, r6
 8003344:	4628      	mov	r0, r5
 8003346:	47b8      	blx	r7
 8003348:	3001      	adds	r0, #1
 800334a:	d12b      	bne.n	80033a4 <_printf_float+0x240>
 800334c:	e765      	b.n	800321a <_printf_float+0xb6>
 800334e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003352:	f240 80dc 	bls.w	800350e <_printf_float+0x3aa>
 8003356:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800335a:	2200      	movs	r2, #0
 800335c:	2300      	movs	r3, #0
 800335e:	f7fd fbcb 	bl	8000af8 <__aeabi_dcmpeq>
 8003362:	2800      	cmp	r0, #0
 8003364:	d033      	beq.n	80033ce <_printf_float+0x26a>
 8003366:	4a36      	ldr	r2, [pc, #216]	; (8003440 <_printf_float+0x2dc>)
 8003368:	2301      	movs	r3, #1
 800336a:	4631      	mov	r1, r6
 800336c:	4628      	mov	r0, r5
 800336e:	47b8      	blx	r7
 8003370:	3001      	adds	r0, #1
 8003372:	f43f af52 	beq.w	800321a <_printf_float+0xb6>
 8003376:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800337a:	429a      	cmp	r2, r3
 800337c:	db02      	blt.n	8003384 <_printf_float+0x220>
 800337e:	6823      	ldr	r3, [r4, #0]
 8003380:	07d8      	lsls	r0, r3, #31
 8003382:	d50f      	bpl.n	80033a4 <_printf_float+0x240>
 8003384:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003388:	4631      	mov	r1, r6
 800338a:	4628      	mov	r0, r5
 800338c:	47b8      	blx	r7
 800338e:	3001      	adds	r0, #1
 8003390:	f43f af43 	beq.w	800321a <_printf_float+0xb6>
 8003394:	f04f 0800 	mov.w	r8, #0
 8003398:	f104 091a 	add.w	r9, r4, #26
 800339c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800339e:	3b01      	subs	r3, #1
 80033a0:	4543      	cmp	r3, r8
 80033a2:	dc09      	bgt.n	80033b8 <_printf_float+0x254>
 80033a4:	6823      	ldr	r3, [r4, #0]
 80033a6:	079b      	lsls	r3, r3, #30
 80033a8:	f100 8101 	bmi.w	80035ae <_printf_float+0x44a>
 80033ac:	68e0      	ldr	r0, [r4, #12]
 80033ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80033b0:	4298      	cmp	r0, r3
 80033b2:	bfb8      	it	lt
 80033b4:	4618      	movlt	r0, r3
 80033b6:	e732      	b.n	800321e <_printf_float+0xba>
 80033b8:	2301      	movs	r3, #1
 80033ba:	464a      	mov	r2, r9
 80033bc:	4631      	mov	r1, r6
 80033be:	4628      	mov	r0, r5
 80033c0:	47b8      	blx	r7
 80033c2:	3001      	adds	r0, #1
 80033c4:	f43f af29 	beq.w	800321a <_printf_float+0xb6>
 80033c8:	f108 0801 	add.w	r8, r8, #1
 80033cc:	e7e6      	b.n	800339c <_printf_float+0x238>
 80033ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	dc37      	bgt.n	8003444 <_printf_float+0x2e0>
 80033d4:	4a1a      	ldr	r2, [pc, #104]	; (8003440 <_printf_float+0x2dc>)
 80033d6:	2301      	movs	r3, #1
 80033d8:	4631      	mov	r1, r6
 80033da:	4628      	mov	r0, r5
 80033dc:	47b8      	blx	r7
 80033de:	3001      	adds	r0, #1
 80033e0:	f43f af1b 	beq.w	800321a <_printf_float+0xb6>
 80033e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80033e8:	4313      	orrs	r3, r2
 80033ea:	d102      	bne.n	80033f2 <_printf_float+0x28e>
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	07d9      	lsls	r1, r3, #31
 80033f0:	d5d8      	bpl.n	80033a4 <_printf_float+0x240>
 80033f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033f6:	4631      	mov	r1, r6
 80033f8:	4628      	mov	r0, r5
 80033fa:	47b8      	blx	r7
 80033fc:	3001      	adds	r0, #1
 80033fe:	f43f af0c 	beq.w	800321a <_printf_float+0xb6>
 8003402:	f04f 0900 	mov.w	r9, #0
 8003406:	f104 0a1a 	add.w	sl, r4, #26
 800340a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800340c:	425b      	negs	r3, r3
 800340e:	454b      	cmp	r3, r9
 8003410:	dc01      	bgt.n	8003416 <_printf_float+0x2b2>
 8003412:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003414:	e794      	b.n	8003340 <_printf_float+0x1dc>
 8003416:	2301      	movs	r3, #1
 8003418:	4652      	mov	r2, sl
 800341a:	4631      	mov	r1, r6
 800341c:	4628      	mov	r0, r5
 800341e:	47b8      	blx	r7
 8003420:	3001      	adds	r0, #1
 8003422:	f43f aefa 	beq.w	800321a <_printf_float+0xb6>
 8003426:	f109 0901 	add.w	r9, r9, #1
 800342a:	e7ee      	b.n	800340a <_printf_float+0x2a6>
 800342c:	7fefffff 	.word	0x7fefffff
 8003430:	08009014 	.word	0x08009014
 8003434:	08009018 	.word	0x08009018
 8003438:	08009020 	.word	0x08009020
 800343c:	0800901c 	.word	0x0800901c
 8003440:	08009419 	.word	0x08009419
 8003444:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003446:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003448:	429a      	cmp	r2, r3
 800344a:	bfa8      	it	ge
 800344c:	461a      	movge	r2, r3
 800344e:	2a00      	cmp	r2, #0
 8003450:	4691      	mov	r9, r2
 8003452:	dc37      	bgt.n	80034c4 <_printf_float+0x360>
 8003454:	f04f 0b00 	mov.w	fp, #0
 8003458:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800345c:	f104 021a 	add.w	r2, r4, #26
 8003460:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003464:	ebaa 0309 	sub.w	r3, sl, r9
 8003468:	455b      	cmp	r3, fp
 800346a:	dc33      	bgt.n	80034d4 <_printf_float+0x370>
 800346c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003470:	429a      	cmp	r2, r3
 8003472:	db3b      	blt.n	80034ec <_printf_float+0x388>
 8003474:	6823      	ldr	r3, [r4, #0]
 8003476:	07da      	lsls	r2, r3, #31
 8003478:	d438      	bmi.n	80034ec <_printf_float+0x388>
 800347a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800347c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800347e:	eba3 020a 	sub.w	r2, r3, sl
 8003482:	eba3 0901 	sub.w	r9, r3, r1
 8003486:	4591      	cmp	r9, r2
 8003488:	bfa8      	it	ge
 800348a:	4691      	movge	r9, r2
 800348c:	f1b9 0f00 	cmp.w	r9, #0
 8003490:	dc34      	bgt.n	80034fc <_printf_float+0x398>
 8003492:	f04f 0800 	mov.w	r8, #0
 8003496:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800349a:	f104 0a1a 	add.w	sl, r4, #26
 800349e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	eba3 0309 	sub.w	r3, r3, r9
 80034a8:	4543      	cmp	r3, r8
 80034aa:	f77f af7b 	ble.w	80033a4 <_printf_float+0x240>
 80034ae:	2301      	movs	r3, #1
 80034b0:	4652      	mov	r2, sl
 80034b2:	4631      	mov	r1, r6
 80034b4:	4628      	mov	r0, r5
 80034b6:	47b8      	blx	r7
 80034b8:	3001      	adds	r0, #1
 80034ba:	f43f aeae 	beq.w	800321a <_printf_float+0xb6>
 80034be:	f108 0801 	add.w	r8, r8, #1
 80034c2:	e7ec      	b.n	800349e <_printf_float+0x33a>
 80034c4:	4613      	mov	r3, r2
 80034c6:	4631      	mov	r1, r6
 80034c8:	4642      	mov	r2, r8
 80034ca:	4628      	mov	r0, r5
 80034cc:	47b8      	blx	r7
 80034ce:	3001      	adds	r0, #1
 80034d0:	d1c0      	bne.n	8003454 <_printf_float+0x2f0>
 80034d2:	e6a2      	b.n	800321a <_printf_float+0xb6>
 80034d4:	2301      	movs	r3, #1
 80034d6:	4631      	mov	r1, r6
 80034d8:	4628      	mov	r0, r5
 80034da:	920b      	str	r2, [sp, #44]	; 0x2c
 80034dc:	47b8      	blx	r7
 80034de:	3001      	adds	r0, #1
 80034e0:	f43f ae9b 	beq.w	800321a <_printf_float+0xb6>
 80034e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80034e6:	f10b 0b01 	add.w	fp, fp, #1
 80034ea:	e7b9      	b.n	8003460 <_printf_float+0x2fc>
 80034ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034f0:	4631      	mov	r1, r6
 80034f2:	4628      	mov	r0, r5
 80034f4:	47b8      	blx	r7
 80034f6:	3001      	adds	r0, #1
 80034f8:	d1bf      	bne.n	800347a <_printf_float+0x316>
 80034fa:	e68e      	b.n	800321a <_printf_float+0xb6>
 80034fc:	464b      	mov	r3, r9
 80034fe:	eb08 020a 	add.w	r2, r8, sl
 8003502:	4631      	mov	r1, r6
 8003504:	4628      	mov	r0, r5
 8003506:	47b8      	blx	r7
 8003508:	3001      	adds	r0, #1
 800350a:	d1c2      	bne.n	8003492 <_printf_float+0x32e>
 800350c:	e685      	b.n	800321a <_printf_float+0xb6>
 800350e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003510:	2a01      	cmp	r2, #1
 8003512:	dc01      	bgt.n	8003518 <_printf_float+0x3b4>
 8003514:	07db      	lsls	r3, r3, #31
 8003516:	d537      	bpl.n	8003588 <_printf_float+0x424>
 8003518:	2301      	movs	r3, #1
 800351a:	4642      	mov	r2, r8
 800351c:	4631      	mov	r1, r6
 800351e:	4628      	mov	r0, r5
 8003520:	47b8      	blx	r7
 8003522:	3001      	adds	r0, #1
 8003524:	f43f ae79 	beq.w	800321a <_printf_float+0xb6>
 8003528:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800352c:	4631      	mov	r1, r6
 800352e:	4628      	mov	r0, r5
 8003530:	47b8      	blx	r7
 8003532:	3001      	adds	r0, #1
 8003534:	f43f ae71 	beq.w	800321a <_printf_float+0xb6>
 8003538:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800353c:	2200      	movs	r2, #0
 800353e:	2300      	movs	r3, #0
 8003540:	f7fd fada 	bl	8000af8 <__aeabi_dcmpeq>
 8003544:	b9d8      	cbnz	r0, 800357e <_printf_float+0x41a>
 8003546:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003548:	f108 0201 	add.w	r2, r8, #1
 800354c:	3b01      	subs	r3, #1
 800354e:	4631      	mov	r1, r6
 8003550:	4628      	mov	r0, r5
 8003552:	47b8      	blx	r7
 8003554:	3001      	adds	r0, #1
 8003556:	d10e      	bne.n	8003576 <_printf_float+0x412>
 8003558:	e65f      	b.n	800321a <_printf_float+0xb6>
 800355a:	2301      	movs	r3, #1
 800355c:	464a      	mov	r2, r9
 800355e:	4631      	mov	r1, r6
 8003560:	4628      	mov	r0, r5
 8003562:	47b8      	blx	r7
 8003564:	3001      	adds	r0, #1
 8003566:	f43f ae58 	beq.w	800321a <_printf_float+0xb6>
 800356a:	f108 0801 	add.w	r8, r8, #1
 800356e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003570:	3b01      	subs	r3, #1
 8003572:	4543      	cmp	r3, r8
 8003574:	dcf1      	bgt.n	800355a <_printf_float+0x3f6>
 8003576:	4653      	mov	r3, sl
 8003578:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800357c:	e6e1      	b.n	8003342 <_printf_float+0x1de>
 800357e:	f04f 0800 	mov.w	r8, #0
 8003582:	f104 091a 	add.w	r9, r4, #26
 8003586:	e7f2      	b.n	800356e <_printf_float+0x40a>
 8003588:	2301      	movs	r3, #1
 800358a:	4642      	mov	r2, r8
 800358c:	e7df      	b.n	800354e <_printf_float+0x3ea>
 800358e:	2301      	movs	r3, #1
 8003590:	464a      	mov	r2, r9
 8003592:	4631      	mov	r1, r6
 8003594:	4628      	mov	r0, r5
 8003596:	47b8      	blx	r7
 8003598:	3001      	adds	r0, #1
 800359a:	f43f ae3e 	beq.w	800321a <_printf_float+0xb6>
 800359e:	f108 0801 	add.w	r8, r8, #1
 80035a2:	68e3      	ldr	r3, [r4, #12]
 80035a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80035a6:	1a5b      	subs	r3, r3, r1
 80035a8:	4543      	cmp	r3, r8
 80035aa:	dcf0      	bgt.n	800358e <_printf_float+0x42a>
 80035ac:	e6fe      	b.n	80033ac <_printf_float+0x248>
 80035ae:	f04f 0800 	mov.w	r8, #0
 80035b2:	f104 0919 	add.w	r9, r4, #25
 80035b6:	e7f4      	b.n	80035a2 <_printf_float+0x43e>

080035b8 <_printf_common>:
 80035b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035bc:	4616      	mov	r6, r2
 80035be:	4699      	mov	r9, r3
 80035c0:	688a      	ldr	r2, [r1, #8]
 80035c2:	690b      	ldr	r3, [r1, #16]
 80035c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035c8:	4293      	cmp	r3, r2
 80035ca:	bfb8      	it	lt
 80035cc:	4613      	movlt	r3, r2
 80035ce:	6033      	str	r3, [r6, #0]
 80035d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035d4:	4607      	mov	r7, r0
 80035d6:	460c      	mov	r4, r1
 80035d8:	b10a      	cbz	r2, 80035de <_printf_common+0x26>
 80035da:	3301      	adds	r3, #1
 80035dc:	6033      	str	r3, [r6, #0]
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	0699      	lsls	r1, r3, #26
 80035e2:	bf42      	ittt	mi
 80035e4:	6833      	ldrmi	r3, [r6, #0]
 80035e6:	3302      	addmi	r3, #2
 80035e8:	6033      	strmi	r3, [r6, #0]
 80035ea:	6825      	ldr	r5, [r4, #0]
 80035ec:	f015 0506 	ands.w	r5, r5, #6
 80035f0:	d106      	bne.n	8003600 <_printf_common+0x48>
 80035f2:	f104 0a19 	add.w	sl, r4, #25
 80035f6:	68e3      	ldr	r3, [r4, #12]
 80035f8:	6832      	ldr	r2, [r6, #0]
 80035fa:	1a9b      	subs	r3, r3, r2
 80035fc:	42ab      	cmp	r3, r5
 80035fe:	dc26      	bgt.n	800364e <_printf_common+0x96>
 8003600:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003604:	1e13      	subs	r3, r2, #0
 8003606:	6822      	ldr	r2, [r4, #0]
 8003608:	bf18      	it	ne
 800360a:	2301      	movne	r3, #1
 800360c:	0692      	lsls	r2, r2, #26
 800360e:	d42b      	bmi.n	8003668 <_printf_common+0xb0>
 8003610:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003614:	4649      	mov	r1, r9
 8003616:	4638      	mov	r0, r7
 8003618:	47c0      	blx	r8
 800361a:	3001      	adds	r0, #1
 800361c:	d01e      	beq.n	800365c <_printf_common+0xa4>
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	68e5      	ldr	r5, [r4, #12]
 8003622:	6832      	ldr	r2, [r6, #0]
 8003624:	f003 0306 	and.w	r3, r3, #6
 8003628:	2b04      	cmp	r3, #4
 800362a:	bf08      	it	eq
 800362c:	1aad      	subeq	r5, r5, r2
 800362e:	68a3      	ldr	r3, [r4, #8]
 8003630:	6922      	ldr	r2, [r4, #16]
 8003632:	bf0c      	ite	eq
 8003634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003638:	2500      	movne	r5, #0
 800363a:	4293      	cmp	r3, r2
 800363c:	bfc4      	itt	gt
 800363e:	1a9b      	subgt	r3, r3, r2
 8003640:	18ed      	addgt	r5, r5, r3
 8003642:	2600      	movs	r6, #0
 8003644:	341a      	adds	r4, #26
 8003646:	42b5      	cmp	r5, r6
 8003648:	d11a      	bne.n	8003680 <_printf_common+0xc8>
 800364a:	2000      	movs	r0, #0
 800364c:	e008      	b.n	8003660 <_printf_common+0xa8>
 800364e:	2301      	movs	r3, #1
 8003650:	4652      	mov	r2, sl
 8003652:	4649      	mov	r1, r9
 8003654:	4638      	mov	r0, r7
 8003656:	47c0      	blx	r8
 8003658:	3001      	adds	r0, #1
 800365a:	d103      	bne.n	8003664 <_printf_common+0xac>
 800365c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003664:	3501      	adds	r5, #1
 8003666:	e7c6      	b.n	80035f6 <_printf_common+0x3e>
 8003668:	18e1      	adds	r1, r4, r3
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	2030      	movs	r0, #48	; 0x30
 800366e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003672:	4422      	add	r2, r4
 8003674:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003678:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800367c:	3302      	adds	r3, #2
 800367e:	e7c7      	b.n	8003610 <_printf_common+0x58>
 8003680:	2301      	movs	r3, #1
 8003682:	4622      	mov	r2, r4
 8003684:	4649      	mov	r1, r9
 8003686:	4638      	mov	r0, r7
 8003688:	47c0      	blx	r8
 800368a:	3001      	adds	r0, #1
 800368c:	d0e6      	beq.n	800365c <_printf_common+0xa4>
 800368e:	3601      	adds	r6, #1
 8003690:	e7d9      	b.n	8003646 <_printf_common+0x8e>
	...

08003694 <_printf_i>:
 8003694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003698:	7e0f      	ldrb	r7, [r1, #24]
 800369a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800369c:	2f78      	cmp	r7, #120	; 0x78
 800369e:	4691      	mov	r9, r2
 80036a0:	4680      	mov	r8, r0
 80036a2:	460c      	mov	r4, r1
 80036a4:	469a      	mov	sl, r3
 80036a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80036aa:	d807      	bhi.n	80036bc <_printf_i+0x28>
 80036ac:	2f62      	cmp	r7, #98	; 0x62
 80036ae:	d80a      	bhi.n	80036c6 <_printf_i+0x32>
 80036b0:	2f00      	cmp	r7, #0
 80036b2:	f000 80d8 	beq.w	8003866 <_printf_i+0x1d2>
 80036b6:	2f58      	cmp	r7, #88	; 0x58
 80036b8:	f000 80a3 	beq.w	8003802 <_printf_i+0x16e>
 80036bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036c4:	e03a      	b.n	800373c <_printf_i+0xa8>
 80036c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036ca:	2b15      	cmp	r3, #21
 80036cc:	d8f6      	bhi.n	80036bc <_printf_i+0x28>
 80036ce:	a101      	add	r1, pc, #4	; (adr r1, 80036d4 <_printf_i+0x40>)
 80036d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036d4:	0800372d 	.word	0x0800372d
 80036d8:	08003741 	.word	0x08003741
 80036dc:	080036bd 	.word	0x080036bd
 80036e0:	080036bd 	.word	0x080036bd
 80036e4:	080036bd 	.word	0x080036bd
 80036e8:	080036bd 	.word	0x080036bd
 80036ec:	08003741 	.word	0x08003741
 80036f0:	080036bd 	.word	0x080036bd
 80036f4:	080036bd 	.word	0x080036bd
 80036f8:	080036bd 	.word	0x080036bd
 80036fc:	080036bd 	.word	0x080036bd
 8003700:	0800384d 	.word	0x0800384d
 8003704:	08003771 	.word	0x08003771
 8003708:	0800382f 	.word	0x0800382f
 800370c:	080036bd 	.word	0x080036bd
 8003710:	080036bd 	.word	0x080036bd
 8003714:	0800386f 	.word	0x0800386f
 8003718:	080036bd 	.word	0x080036bd
 800371c:	08003771 	.word	0x08003771
 8003720:	080036bd 	.word	0x080036bd
 8003724:	080036bd 	.word	0x080036bd
 8003728:	08003837 	.word	0x08003837
 800372c:	682b      	ldr	r3, [r5, #0]
 800372e:	1d1a      	adds	r2, r3, #4
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	602a      	str	r2, [r5, #0]
 8003734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003738:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800373c:	2301      	movs	r3, #1
 800373e:	e0a3      	b.n	8003888 <_printf_i+0x1f4>
 8003740:	6820      	ldr	r0, [r4, #0]
 8003742:	6829      	ldr	r1, [r5, #0]
 8003744:	0606      	lsls	r6, r0, #24
 8003746:	f101 0304 	add.w	r3, r1, #4
 800374a:	d50a      	bpl.n	8003762 <_printf_i+0xce>
 800374c:	680e      	ldr	r6, [r1, #0]
 800374e:	602b      	str	r3, [r5, #0]
 8003750:	2e00      	cmp	r6, #0
 8003752:	da03      	bge.n	800375c <_printf_i+0xc8>
 8003754:	232d      	movs	r3, #45	; 0x2d
 8003756:	4276      	negs	r6, r6
 8003758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800375c:	485e      	ldr	r0, [pc, #376]	; (80038d8 <_printf_i+0x244>)
 800375e:	230a      	movs	r3, #10
 8003760:	e019      	b.n	8003796 <_printf_i+0x102>
 8003762:	680e      	ldr	r6, [r1, #0]
 8003764:	602b      	str	r3, [r5, #0]
 8003766:	f010 0f40 	tst.w	r0, #64	; 0x40
 800376a:	bf18      	it	ne
 800376c:	b236      	sxthne	r6, r6
 800376e:	e7ef      	b.n	8003750 <_printf_i+0xbc>
 8003770:	682b      	ldr	r3, [r5, #0]
 8003772:	6820      	ldr	r0, [r4, #0]
 8003774:	1d19      	adds	r1, r3, #4
 8003776:	6029      	str	r1, [r5, #0]
 8003778:	0601      	lsls	r1, r0, #24
 800377a:	d501      	bpl.n	8003780 <_printf_i+0xec>
 800377c:	681e      	ldr	r6, [r3, #0]
 800377e:	e002      	b.n	8003786 <_printf_i+0xf2>
 8003780:	0646      	lsls	r6, r0, #25
 8003782:	d5fb      	bpl.n	800377c <_printf_i+0xe8>
 8003784:	881e      	ldrh	r6, [r3, #0]
 8003786:	4854      	ldr	r0, [pc, #336]	; (80038d8 <_printf_i+0x244>)
 8003788:	2f6f      	cmp	r7, #111	; 0x6f
 800378a:	bf0c      	ite	eq
 800378c:	2308      	moveq	r3, #8
 800378e:	230a      	movne	r3, #10
 8003790:	2100      	movs	r1, #0
 8003792:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003796:	6865      	ldr	r5, [r4, #4]
 8003798:	60a5      	str	r5, [r4, #8]
 800379a:	2d00      	cmp	r5, #0
 800379c:	bfa2      	ittt	ge
 800379e:	6821      	ldrge	r1, [r4, #0]
 80037a0:	f021 0104 	bicge.w	r1, r1, #4
 80037a4:	6021      	strge	r1, [r4, #0]
 80037a6:	b90e      	cbnz	r6, 80037ac <_printf_i+0x118>
 80037a8:	2d00      	cmp	r5, #0
 80037aa:	d04d      	beq.n	8003848 <_printf_i+0x1b4>
 80037ac:	4615      	mov	r5, r2
 80037ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80037b2:	fb03 6711 	mls	r7, r3, r1, r6
 80037b6:	5dc7      	ldrb	r7, [r0, r7]
 80037b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80037bc:	4637      	mov	r7, r6
 80037be:	42bb      	cmp	r3, r7
 80037c0:	460e      	mov	r6, r1
 80037c2:	d9f4      	bls.n	80037ae <_printf_i+0x11a>
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d10b      	bne.n	80037e0 <_printf_i+0x14c>
 80037c8:	6823      	ldr	r3, [r4, #0]
 80037ca:	07de      	lsls	r6, r3, #31
 80037cc:	d508      	bpl.n	80037e0 <_printf_i+0x14c>
 80037ce:	6923      	ldr	r3, [r4, #16]
 80037d0:	6861      	ldr	r1, [r4, #4]
 80037d2:	4299      	cmp	r1, r3
 80037d4:	bfde      	ittt	le
 80037d6:	2330      	movle	r3, #48	; 0x30
 80037d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80037e0:	1b52      	subs	r2, r2, r5
 80037e2:	6122      	str	r2, [r4, #16]
 80037e4:	f8cd a000 	str.w	sl, [sp]
 80037e8:	464b      	mov	r3, r9
 80037ea:	aa03      	add	r2, sp, #12
 80037ec:	4621      	mov	r1, r4
 80037ee:	4640      	mov	r0, r8
 80037f0:	f7ff fee2 	bl	80035b8 <_printf_common>
 80037f4:	3001      	adds	r0, #1
 80037f6:	d14c      	bne.n	8003892 <_printf_i+0x1fe>
 80037f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037fc:	b004      	add	sp, #16
 80037fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003802:	4835      	ldr	r0, [pc, #212]	; (80038d8 <_printf_i+0x244>)
 8003804:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003808:	6829      	ldr	r1, [r5, #0]
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003810:	6029      	str	r1, [r5, #0]
 8003812:	061d      	lsls	r5, r3, #24
 8003814:	d514      	bpl.n	8003840 <_printf_i+0x1ac>
 8003816:	07df      	lsls	r7, r3, #31
 8003818:	bf44      	itt	mi
 800381a:	f043 0320 	orrmi.w	r3, r3, #32
 800381e:	6023      	strmi	r3, [r4, #0]
 8003820:	b91e      	cbnz	r6, 800382a <_printf_i+0x196>
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	f023 0320 	bic.w	r3, r3, #32
 8003828:	6023      	str	r3, [r4, #0]
 800382a:	2310      	movs	r3, #16
 800382c:	e7b0      	b.n	8003790 <_printf_i+0xfc>
 800382e:	6823      	ldr	r3, [r4, #0]
 8003830:	f043 0320 	orr.w	r3, r3, #32
 8003834:	6023      	str	r3, [r4, #0]
 8003836:	2378      	movs	r3, #120	; 0x78
 8003838:	4828      	ldr	r0, [pc, #160]	; (80038dc <_printf_i+0x248>)
 800383a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800383e:	e7e3      	b.n	8003808 <_printf_i+0x174>
 8003840:	0659      	lsls	r1, r3, #25
 8003842:	bf48      	it	mi
 8003844:	b2b6      	uxthmi	r6, r6
 8003846:	e7e6      	b.n	8003816 <_printf_i+0x182>
 8003848:	4615      	mov	r5, r2
 800384a:	e7bb      	b.n	80037c4 <_printf_i+0x130>
 800384c:	682b      	ldr	r3, [r5, #0]
 800384e:	6826      	ldr	r6, [r4, #0]
 8003850:	6961      	ldr	r1, [r4, #20]
 8003852:	1d18      	adds	r0, r3, #4
 8003854:	6028      	str	r0, [r5, #0]
 8003856:	0635      	lsls	r5, r6, #24
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	d501      	bpl.n	8003860 <_printf_i+0x1cc>
 800385c:	6019      	str	r1, [r3, #0]
 800385e:	e002      	b.n	8003866 <_printf_i+0x1d2>
 8003860:	0670      	lsls	r0, r6, #25
 8003862:	d5fb      	bpl.n	800385c <_printf_i+0x1c8>
 8003864:	8019      	strh	r1, [r3, #0]
 8003866:	2300      	movs	r3, #0
 8003868:	6123      	str	r3, [r4, #16]
 800386a:	4615      	mov	r5, r2
 800386c:	e7ba      	b.n	80037e4 <_printf_i+0x150>
 800386e:	682b      	ldr	r3, [r5, #0]
 8003870:	1d1a      	adds	r2, r3, #4
 8003872:	602a      	str	r2, [r5, #0]
 8003874:	681d      	ldr	r5, [r3, #0]
 8003876:	6862      	ldr	r2, [r4, #4]
 8003878:	2100      	movs	r1, #0
 800387a:	4628      	mov	r0, r5
 800387c:	f7fc fcc8 	bl	8000210 <memchr>
 8003880:	b108      	cbz	r0, 8003886 <_printf_i+0x1f2>
 8003882:	1b40      	subs	r0, r0, r5
 8003884:	6060      	str	r0, [r4, #4]
 8003886:	6863      	ldr	r3, [r4, #4]
 8003888:	6123      	str	r3, [r4, #16]
 800388a:	2300      	movs	r3, #0
 800388c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003890:	e7a8      	b.n	80037e4 <_printf_i+0x150>
 8003892:	6923      	ldr	r3, [r4, #16]
 8003894:	462a      	mov	r2, r5
 8003896:	4649      	mov	r1, r9
 8003898:	4640      	mov	r0, r8
 800389a:	47d0      	blx	sl
 800389c:	3001      	adds	r0, #1
 800389e:	d0ab      	beq.n	80037f8 <_printf_i+0x164>
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	079b      	lsls	r3, r3, #30
 80038a4:	d413      	bmi.n	80038ce <_printf_i+0x23a>
 80038a6:	68e0      	ldr	r0, [r4, #12]
 80038a8:	9b03      	ldr	r3, [sp, #12]
 80038aa:	4298      	cmp	r0, r3
 80038ac:	bfb8      	it	lt
 80038ae:	4618      	movlt	r0, r3
 80038b0:	e7a4      	b.n	80037fc <_printf_i+0x168>
 80038b2:	2301      	movs	r3, #1
 80038b4:	4632      	mov	r2, r6
 80038b6:	4649      	mov	r1, r9
 80038b8:	4640      	mov	r0, r8
 80038ba:	47d0      	blx	sl
 80038bc:	3001      	adds	r0, #1
 80038be:	d09b      	beq.n	80037f8 <_printf_i+0x164>
 80038c0:	3501      	adds	r5, #1
 80038c2:	68e3      	ldr	r3, [r4, #12]
 80038c4:	9903      	ldr	r1, [sp, #12]
 80038c6:	1a5b      	subs	r3, r3, r1
 80038c8:	42ab      	cmp	r3, r5
 80038ca:	dcf2      	bgt.n	80038b2 <_printf_i+0x21e>
 80038cc:	e7eb      	b.n	80038a6 <_printf_i+0x212>
 80038ce:	2500      	movs	r5, #0
 80038d0:	f104 0619 	add.w	r6, r4, #25
 80038d4:	e7f5      	b.n	80038c2 <_printf_i+0x22e>
 80038d6:	bf00      	nop
 80038d8:	08009024 	.word	0x08009024
 80038dc:	08009035 	.word	0x08009035

080038e0 <_scanf_float>:
 80038e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e4:	b087      	sub	sp, #28
 80038e6:	4617      	mov	r7, r2
 80038e8:	9303      	str	r3, [sp, #12]
 80038ea:	688b      	ldr	r3, [r1, #8]
 80038ec:	1e5a      	subs	r2, r3, #1
 80038ee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80038f2:	bf83      	ittte	hi
 80038f4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80038f8:	195b      	addhi	r3, r3, r5
 80038fa:	9302      	strhi	r3, [sp, #8]
 80038fc:	2300      	movls	r3, #0
 80038fe:	bf86      	itte	hi
 8003900:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003904:	608b      	strhi	r3, [r1, #8]
 8003906:	9302      	strls	r3, [sp, #8]
 8003908:	680b      	ldr	r3, [r1, #0]
 800390a:	468b      	mov	fp, r1
 800390c:	2500      	movs	r5, #0
 800390e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003912:	f84b 3b1c 	str.w	r3, [fp], #28
 8003916:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800391a:	4680      	mov	r8, r0
 800391c:	460c      	mov	r4, r1
 800391e:	465e      	mov	r6, fp
 8003920:	46aa      	mov	sl, r5
 8003922:	46a9      	mov	r9, r5
 8003924:	9501      	str	r5, [sp, #4]
 8003926:	68a2      	ldr	r2, [r4, #8]
 8003928:	b152      	cbz	r2, 8003940 <_scanf_float+0x60>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b4e      	cmp	r3, #78	; 0x4e
 8003930:	d864      	bhi.n	80039fc <_scanf_float+0x11c>
 8003932:	2b40      	cmp	r3, #64	; 0x40
 8003934:	d83c      	bhi.n	80039b0 <_scanf_float+0xd0>
 8003936:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800393a:	b2c8      	uxtb	r0, r1
 800393c:	280e      	cmp	r0, #14
 800393e:	d93a      	bls.n	80039b6 <_scanf_float+0xd6>
 8003940:	f1b9 0f00 	cmp.w	r9, #0
 8003944:	d003      	beq.n	800394e <_scanf_float+0x6e>
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800394c:	6023      	str	r3, [r4, #0]
 800394e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003952:	f1ba 0f01 	cmp.w	sl, #1
 8003956:	f200 8113 	bhi.w	8003b80 <_scanf_float+0x2a0>
 800395a:	455e      	cmp	r6, fp
 800395c:	f200 8105 	bhi.w	8003b6a <_scanf_float+0x28a>
 8003960:	2501      	movs	r5, #1
 8003962:	4628      	mov	r0, r5
 8003964:	b007      	add	sp, #28
 8003966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800396a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800396e:	2a0d      	cmp	r2, #13
 8003970:	d8e6      	bhi.n	8003940 <_scanf_float+0x60>
 8003972:	a101      	add	r1, pc, #4	; (adr r1, 8003978 <_scanf_float+0x98>)
 8003974:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003978:	08003ab7 	.word	0x08003ab7
 800397c:	08003941 	.word	0x08003941
 8003980:	08003941 	.word	0x08003941
 8003984:	08003941 	.word	0x08003941
 8003988:	08003b17 	.word	0x08003b17
 800398c:	08003aef 	.word	0x08003aef
 8003990:	08003941 	.word	0x08003941
 8003994:	08003941 	.word	0x08003941
 8003998:	08003ac5 	.word	0x08003ac5
 800399c:	08003941 	.word	0x08003941
 80039a0:	08003941 	.word	0x08003941
 80039a4:	08003941 	.word	0x08003941
 80039a8:	08003941 	.word	0x08003941
 80039ac:	08003a7d 	.word	0x08003a7d
 80039b0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80039b4:	e7db      	b.n	800396e <_scanf_float+0x8e>
 80039b6:	290e      	cmp	r1, #14
 80039b8:	d8c2      	bhi.n	8003940 <_scanf_float+0x60>
 80039ba:	a001      	add	r0, pc, #4	; (adr r0, 80039c0 <_scanf_float+0xe0>)
 80039bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80039c0:	08003a6f 	.word	0x08003a6f
 80039c4:	08003941 	.word	0x08003941
 80039c8:	08003a6f 	.word	0x08003a6f
 80039cc:	08003b03 	.word	0x08003b03
 80039d0:	08003941 	.word	0x08003941
 80039d4:	08003a1d 	.word	0x08003a1d
 80039d8:	08003a59 	.word	0x08003a59
 80039dc:	08003a59 	.word	0x08003a59
 80039e0:	08003a59 	.word	0x08003a59
 80039e4:	08003a59 	.word	0x08003a59
 80039e8:	08003a59 	.word	0x08003a59
 80039ec:	08003a59 	.word	0x08003a59
 80039f0:	08003a59 	.word	0x08003a59
 80039f4:	08003a59 	.word	0x08003a59
 80039f8:	08003a59 	.word	0x08003a59
 80039fc:	2b6e      	cmp	r3, #110	; 0x6e
 80039fe:	d809      	bhi.n	8003a14 <_scanf_float+0x134>
 8003a00:	2b60      	cmp	r3, #96	; 0x60
 8003a02:	d8b2      	bhi.n	800396a <_scanf_float+0x8a>
 8003a04:	2b54      	cmp	r3, #84	; 0x54
 8003a06:	d077      	beq.n	8003af8 <_scanf_float+0x218>
 8003a08:	2b59      	cmp	r3, #89	; 0x59
 8003a0a:	d199      	bne.n	8003940 <_scanf_float+0x60>
 8003a0c:	2d07      	cmp	r5, #7
 8003a0e:	d197      	bne.n	8003940 <_scanf_float+0x60>
 8003a10:	2508      	movs	r5, #8
 8003a12:	e029      	b.n	8003a68 <_scanf_float+0x188>
 8003a14:	2b74      	cmp	r3, #116	; 0x74
 8003a16:	d06f      	beq.n	8003af8 <_scanf_float+0x218>
 8003a18:	2b79      	cmp	r3, #121	; 0x79
 8003a1a:	e7f6      	b.n	8003a0a <_scanf_float+0x12a>
 8003a1c:	6821      	ldr	r1, [r4, #0]
 8003a1e:	05c8      	lsls	r0, r1, #23
 8003a20:	d51a      	bpl.n	8003a58 <_scanf_float+0x178>
 8003a22:	9b02      	ldr	r3, [sp, #8]
 8003a24:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003a28:	6021      	str	r1, [r4, #0]
 8003a2a:	f109 0901 	add.w	r9, r9, #1
 8003a2e:	b11b      	cbz	r3, 8003a38 <_scanf_float+0x158>
 8003a30:	3b01      	subs	r3, #1
 8003a32:	3201      	adds	r2, #1
 8003a34:	9302      	str	r3, [sp, #8]
 8003a36:	60a2      	str	r2, [r4, #8]
 8003a38:	68a3      	ldr	r3, [r4, #8]
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	60a3      	str	r3, [r4, #8]
 8003a3e:	6923      	ldr	r3, [r4, #16]
 8003a40:	3301      	adds	r3, #1
 8003a42:	6123      	str	r3, [r4, #16]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	607b      	str	r3, [r7, #4]
 8003a4c:	f340 8084 	ble.w	8003b58 <_scanf_float+0x278>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	3301      	adds	r3, #1
 8003a54:	603b      	str	r3, [r7, #0]
 8003a56:	e766      	b.n	8003926 <_scanf_float+0x46>
 8003a58:	eb1a 0f05 	cmn.w	sl, r5
 8003a5c:	f47f af70 	bne.w	8003940 <_scanf_float+0x60>
 8003a60:	6822      	ldr	r2, [r4, #0]
 8003a62:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003a66:	6022      	str	r2, [r4, #0]
 8003a68:	f806 3b01 	strb.w	r3, [r6], #1
 8003a6c:	e7e4      	b.n	8003a38 <_scanf_float+0x158>
 8003a6e:	6822      	ldr	r2, [r4, #0]
 8003a70:	0610      	lsls	r0, r2, #24
 8003a72:	f57f af65 	bpl.w	8003940 <_scanf_float+0x60>
 8003a76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a7a:	e7f4      	b.n	8003a66 <_scanf_float+0x186>
 8003a7c:	f1ba 0f00 	cmp.w	sl, #0
 8003a80:	d10e      	bne.n	8003aa0 <_scanf_float+0x1c0>
 8003a82:	f1b9 0f00 	cmp.w	r9, #0
 8003a86:	d10e      	bne.n	8003aa6 <_scanf_float+0x1c6>
 8003a88:	6822      	ldr	r2, [r4, #0]
 8003a8a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003a8e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003a92:	d108      	bne.n	8003aa6 <_scanf_float+0x1c6>
 8003a94:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003a98:	6022      	str	r2, [r4, #0]
 8003a9a:	f04f 0a01 	mov.w	sl, #1
 8003a9e:	e7e3      	b.n	8003a68 <_scanf_float+0x188>
 8003aa0:	f1ba 0f02 	cmp.w	sl, #2
 8003aa4:	d055      	beq.n	8003b52 <_scanf_float+0x272>
 8003aa6:	2d01      	cmp	r5, #1
 8003aa8:	d002      	beq.n	8003ab0 <_scanf_float+0x1d0>
 8003aaa:	2d04      	cmp	r5, #4
 8003aac:	f47f af48 	bne.w	8003940 <_scanf_float+0x60>
 8003ab0:	3501      	adds	r5, #1
 8003ab2:	b2ed      	uxtb	r5, r5
 8003ab4:	e7d8      	b.n	8003a68 <_scanf_float+0x188>
 8003ab6:	f1ba 0f01 	cmp.w	sl, #1
 8003aba:	f47f af41 	bne.w	8003940 <_scanf_float+0x60>
 8003abe:	f04f 0a02 	mov.w	sl, #2
 8003ac2:	e7d1      	b.n	8003a68 <_scanf_float+0x188>
 8003ac4:	b97d      	cbnz	r5, 8003ae6 <_scanf_float+0x206>
 8003ac6:	f1b9 0f00 	cmp.w	r9, #0
 8003aca:	f47f af3c 	bne.w	8003946 <_scanf_float+0x66>
 8003ace:	6822      	ldr	r2, [r4, #0]
 8003ad0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003ad4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003ad8:	f47f af39 	bne.w	800394e <_scanf_float+0x6e>
 8003adc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003ae0:	6022      	str	r2, [r4, #0]
 8003ae2:	2501      	movs	r5, #1
 8003ae4:	e7c0      	b.n	8003a68 <_scanf_float+0x188>
 8003ae6:	2d03      	cmp	r5, #3
 8003ae8:	d0e2      	beq.n	8003ab0 <_scanf_float+0x1d0>
 8003aea:	2d05      	cmp	r5, #5
 8003aec:	e7de      	b.n	8003aac <_scanf_float+0x1cc>
 8003aee:	2d02      	cmp	r5, #2
 8003af0:	f47f af26 	bne.w	8003940 <_scanf_float+0x60>
 8003af4:	2503      	movs	r5, #3
 8003af6:	e7b7      	b.n	8003a68 <_scanf_float+0x188>
 8003af8:	2d06      	cmp	r5, #6
 8003afa:	f47f af21 	bne.w	8003940 <_scanf_float+0x60>
 8003afe:	2507      	movs	r5, #7
 8003b00:	e7b2      	b.n	8003a68 <_scanf_float+0x188>
 8003b02:	6822      	ldr	r2, [r4, #0]
 8003b04:	0591      	lsls	r1, r2, #22
 8003b06:	f57f af1b 	bpl.w	8003940 <_scanf_float+0x60>
 8003b0a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003b0e:	6022      	str	r2, [r4, #0]
 8003b10:	f8cd 9004 	str.w	r9, [sp, #4]
 8003b14:	e7a8      	b.n	8003a68 <_scanf_float+0x188>
 8003b16:	6822      	ldr	r2, [r4, #0]
 8003b18:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003b1c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003b20:	d006      	beq.n	8003b30 <_scanf_float+0x250>
 8003b22:	0550      	lsls	r0, r2, #21
 8003b24:	f57f af0c 	bpl.w	8003940 <_scanf_float+0x60>
 8003b28:	f1b9 0f00 	cmp.w	r9, #0
 8003b2c:	f43f af0f 	beq.w	800394e <_scanf_float+0x6e>
 8003b30:	0591      	lsls	r1, r2, #22
 8003b32:	bf58      	it	pl
 8003b34:	9901      	ldrpl	r1, [sp, #4]
 8003b36:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003b3a:	bf58      	it	pl
 8003b3c:	eba9 0101 	subpl.w	r1, r9, r1
 8003b40:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003b44:	bf58      	it	pl
 8003b46:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003b4a:	6022      	str	r2, [r4, #0]
 8003b4c:	f04f 0900 	mov.w	r9, #0
 8003b50:	e78a      	b.n	8003a68 <_scanf_float+0x188>
 8003b52:	f04f 0a03 	mov.w	sl, #3
 8003b56:	e787      	b.n	8003a68 <_scanf_float+0x188>
 8003b58:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003b5c:	4639      	mov	r1, r7
 8003b5e:	4640      	mov	r0, r8
 8003b60:	4798      	blx	r3
 8003b62:	2800      	cmp	r0, #0
 8003b64:	f43f aedf 	beq.w	8003926 <_scanf_float+0x46>
 8003b68:	e6ea      	b.n	8003940 <_scanf_float+0x60>
 8003b6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003b6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003b72:	463a      	mov	r2, r7
 8003b74:	4640      	mov	r0, r8
 8003b76:	4798      	blx	r3
 8003b78:	6923      	ldr	r3, [r4, #16]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	6123      	str	r3, [r4, #16]
 8003b7e:	e6ec      	b.n	800395a <_scanf_float+0x7a>
 8003b80:	1e6b      	subs	r3, r5, #1
 8003b82:	2b06      	cmp	r3, #6
 8003b84:	d825      	bhi.n	8003bd2 <_scanf_float+0x2f2>
 8003b86:	2d02      	cmp	r5, #2
 8003b88:	d836      	bhi.n	8003bf8 <_scanf_float+0x318>
 8003b8a:	455e      	cmp	r6, fp
 8003b8c:	f67f aee8 	bls.w	8003960 <_scanf_float+0x80>
 8003b90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003b94:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003b98:	463a      	mov	r2, r7
 8003b9a:	4640      	mov	r0, r8
 8003b9c:	4798      	blx	r3
 8003b9e:	6923      	ldr	r3, [r4, #16]
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	6123      	str	r3, [r4, #16]
 8003ba4:	e7f1      	b.n	8003b8a <_scanf_float+0x2aa>
 8003ba6:	9802      	ldr	r0, [sp, #8]
 8003ba8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003bac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003bb0:	9002      	str	r0, [sp, #8]
 8003bb2:	463a      	mov	r2, r7
 8003bb4:	4640      	mov	r0, r8
 8003bb6:	4798      	blx	r3
 8003bb8:	6923      	ldr	r3, [r4, #16]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	6123      	str	r3, [r4, #16]
 8003bbe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003bc2:	fa5f fa8a 	uxtb.w	sl, sl
 8003bc6:	f1ba 0f02 	cmp.w	sl, #2
 8003bca:	d1ec      	bne.n	8003ba6 <_scanf_float+0x2c6>
 8003bcc:	3d03      	subs	r5, #3
 8003bce:	b2ed      	uxtb	r5, r5
 8003bd0:	1b76      	subs	r6, r6, r5
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	05da      	lsls	r2, r3, #23
 8003bd6:	d52f      	bpl.n	8003c38 <_scanf_float+0x358>
 8003bd8:	055b      	lsls	r3, r3, #21
 8003bda:	d510      	bpl.n	8003bfe <_scanf_float+0x31e>
 8003bdc:	455e      	cmp	r6, fp
 8003bde:	f67f aebf 	bls.w	8003960 <_scanf_float+0x80>
 8003be2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003be6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003bea:	463a      	mov	r2, r7
 8003bec:	4640      	mov	r0, r8
 8003bee:	4798      	blx	r3
 8003bf0:	6923      	ldr	r3, [r4, #16]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	6123      	str	r3, [r4, #16]
 8003bf6:	e7f1      	b.n	8003bdc <_scanf_float+0x2fc>
 8003bf8:	46aa      	mov	sl, r5
 8003bfa:	9602      	str	r6, [sp, #8]
 8003bfc:	e7df      	b.n	8003bbe <_scanf_float+0x2de>
 8003bfe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003c02:	6923      	ldr	r3, [r4, #16]
 8003c04:	2965      	cmp	r1, #101	; 0x65
 8003c06:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003c0a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8003c0e:	6123      	str	r3, [r4, #16]
 8003c10:	d00c      	beq.n	8003c2c <_scanf_float+0x34c>
 8003c12:	2945      	cmp	r1, #69	; 0x45
 8003c14:	d00a      	beq.n	8003c2c <_scanf_float+0x34c>
 8003c16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c1a:	463a      	mov	r2, r7
 8003c1c:	4640      	mov	r0, r8
 8003c1e:	4798      	blx	r3
 8003c20:	6923      	ldr	r3, [r4, #16]
 8003c22:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	1eb5      	subs	r5, r6, #2
 8003c2a:	6123      	str	r3, [r4, #16]
 8003c2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c30:	463a      	mov	r2, r7
 8003c32:	4640      	mov	r0, r8
 8003c34:	4798      	blx	r3
 8003c36:	462e      	mov	r6, r5
 8003c38:	6825      	ldr	r5, [r4, #0]
 8003c3a:	f015 0510 	ands.w	r5, r5, #16
 8003c3e:	d155      	bne.n	8003cec <_scanf_float+0x40c>
 8003c40:	7035      	strb	r5, [r6, #0]
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4c:	d11b      	bne.n	8003c86 <_scanf_float+0x3a6>
 8003c4e:	9b01      	ldr	r3, [sp, #4]
 8003c50:	454b      	cmp	r3, r9
 8003c52:	eba3 0209 	sub.w	r2, r3, r9
 8003c56:	d123      	bne.n	8003ca0 <_scanf_float+0x3c0>
 8003c58:	2200      	movs	r2, #0
 8003c5a:	4659      	mov	r1, fp
 8003c5c:	4640      	mov	r0, r8
 8003c5e:	f000 fee7 	bl	8004a30 <_strtod_r>
 8003c62:	6822      	ldr	r2, [r4, #0]
 8003c64:	9b03      	ldr	r3, [sp, #12]
 8003c66:	f012 0f02 	tst.w	r2, #2
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4606      	mov	r6, r0
 8003c6e:	460f      	mov	r7, r1
 8003c70:	d021      	beq.n	8003cb6 <_scanf_float+0x3d6>
 8003c72:	1d1a      	adds	r2, r3, #4
 8003c74:	9903      	ldr	r1, [sp, #12]
 8003c76:	600a      	str	r2, [r1, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	e9c3 6700 	strd	r6, r7, [r3]
 8003c7e:	68e3      	ldr	r3, [r4, #12]
 8003c80:	3301      	adds	r3, #1
 8003c82:	60e3      	str	r3, [r4, #12]
 8003c84:	e66d      	b.n	8003962 <_scanf_float+0x82>
 8003c86:	9b04      	ldr	r3, [sp, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0e5      	beq.n	8003c58 <_scanf_float+0x378>
 8003c8c:	9905      	ldr	r1, [sp, #20]
 8003c8e:	230a      	movs	r3, #10
 8003c90:	462a      	mov	r2, r5
 8003c92:	3101      	adds	r1, #1
 8003c94:	4640      	mov	r0, r8
 8003c96:	f000 ff4d 	bl	8004b34 <_strtol_r>
 8003c9a:	9b04      	ldr	r3, [sp, #16]
 8003c9c:	9e05      	ldr	r6, [sp, #20]
 8003c9e:	1ac2      	subs	r2, r0, r3
 8003ca0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003ca4:	429e      	cmp	r6, r3
 8003ca6:	bf28      	it	cs
 8003ca8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003cac:	4910      	ldr	r1, [pc, #64]	; (8003cf0 <_scanf_float+0x410>)
 8003cae:	4630      	mov	r0, r6
 8003cb0:	f000 f826 	bl	8003d00 <siprintf>
 8003cb4:	e7d0      	b.n	8003c58 <_scanf_float+0x378>
 8003cb6:	f012 0f04 	tst.w	r2, #4
 8003cba:	f103 0204 	add.w	r2, r3, #4
 8003cbe:	d1d9      	bne.n	8003c74 <_scanf_float+0x394>
 8003cc0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003cc4:	f8cc 2000 	str.w	r2, [ip]
 8003cc8:	f8d3 8000 	ldr.w	r8, [r3]
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	f7fc ff44 	bl	8000b5c <__aeabi_dcmpun>
 8003cd4:	b128      	cbz	r0, 8003ce2 <_scanf_float+0x402>
 8003cd6:	4807      	ldr	r0, [pc, #28]	; (8003cf4 <_scanf_float+0x414>)
 8003cd8:	f000 f80e 	bl	8003cf8 <nanf>
 8003cdc:	f8c8 0000 	str.w	r0, [r8]
 8003ce0:	e7cd      	b.n	8003c7e <_scanf_float+0x39e>
 8003ce2:	4630      	mov	r0, r6
 8003ce4:	4639      	mov	r1, r7
 8003ce6:	f7fc ff97 	bl	8000c18 <__aeabi_d2f>
 8003cea:	e7f7      	b.n	8003cdc <_scanf_float+0x3fc>
 8003cec:	2500      	movs	r5, #0
 8003cee:	e638      	b.n	8003962 <_scanf_float+0x82>
 8003cf0:	08009046 	.word	0x08009046
 8003cf4:	0800946b 	.word	0x0800946b

08003cf8 <nanf>:
 8003cf8:	4800      	ldr	r0, [pc, #0]	; (8003cfc <nanf+0x4>)
 8003cfa:	4770      	bx	lr
 8003cfc:	7fc00000 	.word	0x7fc00000

08003d00 <siprintf>:
 8003d00:	b40e      	push	{r1, r2, r3}
 8003d02:	b500      	push	{lr}
 8003d04:	b09c      	sub	sp, #112	; 0x70
 8003d06:	ab1d      	add	r3, sp, #116	; 0x74
 8003d08:	9002      	str	r0, [sp, #8]
 8003d0a:	9006      	str	r0, [sp, #24]
 8003d0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d10:	4809      	ldr	r0, [pc, #36]	; (8003d38 <siprintf+0x38>)
 8003d12:	9107      	str	r1, [sp, #28]
 8003d14:	9104      	str	r1, [sp, #16]
 8003d16:	4909      	ldr	r1, [pc, #36]	; (8003d3c <siprintf+0x3c>)
 8003d18:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d1c:	9105      	str	r1, [sp, #20]
 8003d1e:	6800      	ldr	r0, [r0, #0]
 8003d20:	9301      	str	r3, [sp, #4]
 8003d22:	a902      	add	r1, sp, #8
 8003d24:	f002 ff4e 	bl	8006bc4 <_svfiprintf_r>
 8003d28:	9b02      	ldr	r3, [sp, #8]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	701a      	strb	r2, [r3, #0]
 8003d2e:	b01c      	add	sp, #112	; 0x70
 8003d30:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d34:	b003      	add	sp, #12
 8003d36:	4770      	bx	lr
 8003d38:	20000044 	.word	0x20000044
 8003d3c:	ffff0208 	.word	0xffff0208

08003d40 <siscanf>:
 8003d40:	b40e      	push	{r1, r2, r3}
 8003d42:	b530      	push	{r4, r5, lr}
 8003d44:	b09c      	sub	sp, #112	; 0x70
 8003d46:	ac1f      	add	r4, sp, #124	; 0x7c
 8003d48:	f44f 7201 	mov.w	r2, #516	; 0x204
 8003d4c:	f854 5b04 	ldr.w	r5, [r4], #4
 8003d50:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003d54:	9002      	str	r0, [sp, #8]
 8003d56:	9006      	str	r0, [sp, #24]
 8003d58:	f7fc fa4c 	bl	80001f4 <strlen>
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <siscanf+0x4c>)
 8003d5e:	9003      	str	r0, [sp, #12]
 8003d60:	9007      	str	r0, [sp, #28]
 8003d62:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d64:	480a      	ldr	r0, [pc, #40]	; (8003d90 <siscanf+0x50>)
 8003d66:	9401      	str	r4, [sp, #4]
 8003d68:	2300      	movs	r3, #0
 8003d6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8003d6c:	9314      	str	r3, [sp, #80]	; 0x50
 8003d6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d72:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003d76:	462a      	mov	r2, r5
 8003d78:	4623      	mov	r3, r4
 8003d7a:	a902      	add	r1, sp, #8
 8003d7c:	6800      	ldr	r0, [r0, #0]
 8003d7e:	f003 f87b 	bl	8006e78 <__ssvfiscanf_r>
 8003d82:	b01c      	add	sp, #112	; 0x70
 8003d84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d88:	b003      	add	sp, #12
 8003d8a:	4770      	bx	lr
 8003d8c:	08003db7 	.word	0x08003db7
 8003d90:	20000044 	.word	0x20000044

08003d94 <__sread>:
 8003d94:	b510      	push	{r4, lr}
 8003d96:	460c      	mov	r4, r1
 8003d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d9c:	f003 fb36 	bl	800740c <_read_r>
 8003da0:	2800      	cmp	r0, #0
 8003da2:	bfab      	itete	ge
 8003da4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003da6:	89a3      	ldrhlt	r3, [r4, #12]
 8003da8:	181b      	addge	r3, r3, r0
 8003daa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003dae:	bfac      	ite	ge
 8003db0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003db2:	81a3      	strhlt	r3, [r4, #12]
 8003db4:	bd10      	pop	{r4, pc}

08003db6 <__seofread>:
 8003db6:	2000      	movs	r0, #0
 8003db8:	4770      	bx	lr

08003dba <__swrite>:
 8003dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dbe:	461f      	mov	r7, r3
 8003dc0:	898b      	ldrh	r3, [r1, #12]
 8003dc2:	05db      	lsls	r3, r3, #23
 8003dc4:	4605      	mov	r5, r0
 8003dc6:	460c      	mov	r4, r1
 8003dc8:	4616      	mov	r6, r2
 8003dca:	d505      	bpl.n	8003dd8 <__swrite+0x1e>
 8003dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f002 f8ba 	bl	8005f4c <_lseek_r>
 8003dd8:	89a3      	ldrh	r3, [r4, #12]
 8003dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003de2:	81a3      	strh	r3, [r4, #12]
 8003de4:	4632      	mov	r2, r6
 8003de6:	463b      	mov	r3, r7
 8003de8:	4628      	mov	r0, r5
 8003dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dee:	f000 bea3 	b.w	8004b38 <_write_r>

08003df2 <__sseek>:
 8003df2:	b510      	push	{r4, lr}
 8003df4:	460c      	mov	r4, r1
 8003df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dfa:	f002 f8a7 	bl	8005f4c <_lseek_r>
 8003dfe:	1c43      	adds	r3, r0, #1
 8003e00:	89a3      	ldrh	r3, [r4, #12]
 8003e02:	bf15      	itete	ne
 8003e04:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e0e:	81a3      	strheq	r3, [r4, #12]
 8003e10:	bf18      	it	ne
 8003e12:	81a3      	strhne	r3, [r4, #12]
 8003e14:	bd10      	pop	{r4, pc}

08003e16 <__sclose>:
 8003e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e1a:	f000 be9f 	b.w	8004b5c <_close_r>

08003e1e <sulp>:
 8003e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e22:	460f      	mov	r7, r1
 8003e24:	4690      	mov	r8, r2
 8003e26:	f002 fc37 	bl	8006698 <__ulp>
 8003e2a:	4604      	mov	r4, r0
 8003e2c:	460d      	mov	r5, r1
 8003e2e:	f1b8 0f00 	cmp.w	r8, #0
 8003e32:	d011      	beq.n	8003e58 <sulp+0x3a>
 8003e34:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003e38:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	dd0b      	ble.n	8003e58 <sulp+0x3a>
 8003e40:	051b      	lsls	r3, r3, #20
 8003e42:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003e46:	2400      	movs	r4, #0
 8003e48:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003e4c:	4622      	mov	r2, r4
 8003e4e:	462b      	mov	r3, r5
 8003e50:	f7fc fbea 	bl	8000628 <__aeabi_dmul>
 8003e54:	4604      	mov	r4, r0
 8003e56:	460d      	mov	r5, r1
 8003e58:	4620      	mov	r0, r4
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003e60 <_strtod_l>:
 8003e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e64:	b09f      	sub	sp, #124	; 0x7c
 8003e66:	469b      	mov	fp, r3
 8003e68:	2300      	movs	r3, #0
 8003e6a:	931a      	str	r3, [sp, #104]	; 0x68
 8003e6c:	4b9e      	ldr	r3, [pc, #632]	; (80040e8 <_strtod_l+0x288>)
 8003e6e:	9215      	str	r2, [sp, #84]	; 0x54
 8003e70:	681f      	ldr	r7, [r3, #0]
 8003e72:	4682      	mov	sl, r0
 8003e74:	4638      	mov	r0, r7
 8003e76:	460e      	mov	r6, r1
 8003e78:	f7fc f9bc 	bl	80001f4 <strlen>
 8003e7c:	f04f 0800 	mov.w	r8, #0
 8003e80:	4604      	mov	r4, r0
 8003e82:	f04f 0900 	mov.w	r9, #0
 8003e86:	9619      	str	r6, [sp, #100]	; 0x64
 8003e88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003e8a:	781a      	ldrb	r2, [r3, #0]
 8003e8c:	2a2b      	cmp	r2, #43	; 0x2b
 8003e8e:	d04c      	beq.n	8003f2a <_strtod_l+0xca>
 8003e90:	d83a      	bhi.n	8003f08 <_strtod_l+0xa8>
 8003e92:	2a0d      	cmp	r2, #13
 8003e94:	d833      	bhi.n	8003efe <_strtod_l+0x9e>
 8003e96:	2a08      	cmp	r2, #8
 8003e98:	d833      	bhi.n	8003f02 <_strtod_l+0xa2>
 8003e9a:	2a00      	cmp	r2, #0
 8003e9c:	d03d      	beq.n	8003f1a <_strtod_l+0xba>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	930a      	str	r3, [sp, #40]	; 0x28
 8003ea2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8003ea4:	782b      	ldrb	r3, [r5, #0]
 8003ea6:	2b30      	cmp	r3, #48	; 0x30
 8003ea8:	f040 80aa 	bne.w	8004000 <_strtod_l+0x1a0>
 8003eac:	786b      	ldrb	r3, [r5, #1]
 8003eae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003eb2:	2b58      	cmp	r3, #88	; 0x58
 8003eb4:	d166      	bne.n	8003f84 <_strtod_l+0x124>
 8003eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003eb8:	9301      	str	r3, [sp, #4]
 8003eba:	ab1a      	add	r3, sp, #104	; 0x68
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	4a8b      	ldr	r2, [pc, #556]	; (80040ec <_strtod_l+0x28c>)
 8003ec0:	f8cd b008 	str.w	fp, [sp, #8]
 8003ec4:	ab1b      	add	r3, sp, #108	; 0x6c
 8003ec6:	a919      	add	r1, sp, #100	; 0x64
 8003ec8:	4650      	mov	r0, sl
 8003eca:	f001 fd3d 	bl	8005948 <__gethex>
 8003ece:	f010 0607 	ands.w	r6, r0, #7
 8003ed2:	4604      	mov	r4, r0
 8003ed4:	d005      	beq.n	8003ee2 <_strtod_l+0x82>
 8003ed6:	2e06      	cmp	r6, #6
 8003ed8:	d129      	bne.n	8003f2e <_strtod_l+0xce>
 8003eda:	3501      	adds	r5, #1
 8003edc:	2300      	movs	r3, #0
 8003ede:	9519      	str	r5, [sp, #100]	; 0x64
 8003ee0:	930a      	str	r3, [sp, #40]	; 0x28
 8003ee2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f040 858a 	bne.w	80049fe <_strtod_l+0xb9e>
 8003eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003eec:	b1d3      	cbz	r3, 8003f24 <_strtod_l+0xc4>
 8003eee:	4642      	mov	r2, r8
 8003ef0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	b01f      	add	sp, #124	; 0x7c
 8003efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003efe:	2a20      	cmp	r2, #32
 8003f00:	d1cd      	bne.n	8003e9e <_strtod_l+0x3e>
 8003f02:	3301      	adds	r3, #1
 8003f04:	9319      	str	r3, [sp, #100]	; 0x64
 8003f06:	e7bf      	b.n	8003e88 <_strtod_l+0x28>
 8003f08:	2a2d      	cmp	r2, #45	; 0x2d
 8003f0a:	d1c8      	bne.n	8003e9e <_strtod_l+0x3e>
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	920a      	str	r2, [sp, #40]	; 0x28
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	9219      	str	r2, [sp, #100]	; 0x64
 8003f14:	785b      	ldrb	r3, [r3, #1]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1c3      	bne.n	8003ea2 <_strtod_l+0x42>
 8003f1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003f1c:	9619      	str	r6, [sp, #100]	; 0x64
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f040 856b 	bne.w	80049fa <_strtod_l+0xb9a>
 8003f24:	4642      	mov	r2, r8
 8003f26:	464b      	mov	r3, r9
 8003f28:	e7e4      	b.n	8003ef4 <_strtod_l+0x94>
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	e7ef      	b.n	8003f0e <_strtod_l+0xae>
 8003f2e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003f30:	b13a      	cbz	r2, 8003f42 <_strtod_l+0xe2>
 8003f32:	2135      	movs	r1, #53	; 0x35
 8003f34:	a81c      	add	r0, sp, #112	; 0x70
 8003f36:	f002 fcb3 	bl	80068a0 <__copybits>
 8003f3a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003f3c:	4650      	mov	r0, sl
 8003f3e:	f002 f87f 	bl	8006040 <_Bfree>
 8003f42:	3e01      	subs	r6, #1
 8003f44:	2e04      	cmp	r6, #4
 8003f46:	d806      	bhi.n	8003f56 <_strtod_l+0xf6>
 8003f48:	e8df f006 	tbb	[pc, r6]
 8003f4c:	1714030a 	.word	0x1714030a
 8003f50:	0a          	.byte	0x0a
 8003f51:	00          	.byte	0x00
 8003f52:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8003f56:	0721      	lsls	r1, r4, #28
 8003f58:	d5c3      	bpl.n	8003ee2 <_strtod_l+0x82>
 8003f5a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8003f5e:	e7c0      	b.n	8003ee2 <_strtod_l+0x82>
 8003f60:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8003f64:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003f66:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003f6a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003f6e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8003f72:	e7f0      	b.n	8003f56 <_strtod_l+0xf6>
 8003f74:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80040f0 <_strtod_l+0x290>
 8003f78:	e7ed      	b.n	8003f56 <_strtod_l+0xf6>
 8003f7a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8003f7e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8003f82:	e7e8      	b.n	8003f56 <_strtod_l+0xf6>
 8003f84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	9219      	str	r2, [sp, #100]	; 0x64
 8003f8a:	785b      	ldrb	r3, [r3, #1]
 8003f8c:	2b30      	cmp	r3, #48	; 0x30
 8003f8e:	d0f9      	beq.n	8003f84 <_strtod_l+0x124>
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0a6      	beq.n	8003ee2 <_strtod_l+0x82>
 8003f94:	2301      	movs	r3, #1
 8003f96:	9307      	str	r3, [sp, #28]
 8003f98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003f9a:	9308      	str	r3, [sp, #32]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003fa2:	469b      	mov	fp, r3
 8003fa4:	220a      	movs	r2, #10
 8003fa6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8003fa8:	7805      	ldrb	r5, [r0, #0]
 8003faa:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003fae:	b2d9      	uxtb	r1, r3
 8003fb0:	2909      	cmp	r1, #9
 8003fb2:	d927      	bls.n	8004004 <_strtod_l+0x1a4>
 8003fb4:	4622      	mov	r2, r4
 8003fb6:	4639      	mov	r1, r7
 8003fb8:	f003 fa88 	bl	80074cc <strncmp>
 8003fbc:	2800      	cmp	r0, #0
 8003fbe:	d033      	beq.n	8004028 <_strtod_l+0x1c8>
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	462a      	mov	r2, r5
 8003fc4:	465c      	mov	r4, fp
 8003fc6:	9004      	str	r0, [sp, #16]
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2a65      	cmp	r2, #101	; 0x65
 8003fcc:	d001      	beq.n	8003fd2 <_strtod_l+0x172>
 8003fce:	2a45      	cmp	r2, #69	; 0x45
 8003fd0:	d114      	bne.n	8003ffc <_strtod_l+0x19c>
 8003fd2:	b91c      	cbnz	r4, 8003fdc <_strtod_l+0x17c>
 8003fd4:	9a07      	ldr	r2, [sp, #28]
 8003fd6:	4302      	orrs	r2, r0
 8003fd8:	d09f      	beq.n	8003f1a <_strtod_l+0xba>
 8003fda:	2400      	movs	r4, #0
 8003fdc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8003fde:	1c72      	adds	r2, r6, #1
 8003fe0:	9219      	str	r2, [sp, #100]	; 0x64
 8003fe2:	7872      	ldrb	r2, [r6, #1]
 8003fe4:	2a2b      	cmp	r2, #43	; 0x2b
 8003fe6:	d079      	beq.n	80040dc <_strtod_l+0x27c>
 8003fe8:	2a2d      	cmp	r2, #45	; 0x2d
 8003fea:	f000 8083 	beq.w	80040f4 <_strtod_l+0x294>
 8003fee:	2700      	movs	r7, #0
 8003ff0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8003ff4:	2909      	cmp	r1, #9
 8003ff6:	f240 8083 	bls.w	8004100 <_strtod_l+0x2a0>
 8003ffa:	9619      	str	r6, [sp, #100]	; 0x64
 8003ffc:	2500      	movs	r5, #0
 8003ffe:	e09f      	b.n	8004140 <_strtod_l+0x2e0>
 8004000:	2300      	movs	r3, #0
 8004002:	e7c8      	b.n	8003f96 <_strtod_l+0x136>
 8004004:	f1bb 0f08 	cmp.w	fp, #8
 8004008:	bfd5      	itete	le
 800400a:	9906      	ldrle	r1, [sp, #24]
 800400c:	9905      	ldrgt	r1, [sp, #20]
 800400e:	fb02 3301 	mlale	r3, r2, r1, r3
 8004012:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004016:	f100 0001 	add.w	r0, r0, #1
 800401a:	bfd4      	ite	le
 800401c:	9306      	strle	r3, [sp, #24]
 800401e:	9305      	strgt	r3, [sp, #20]
 8004020:	f10b 0b01 	add.w	fp, fp, #1
 8004024:	9019      	str	r0, [sp, #100]	; 0x64
 8004026:	e7be      	b.n	8003fa6 <_strtod_l+0x146>
 8004028:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800402a:	191a      	adds	r2, r3, r4
 800402c:	9219      	str	r2, [sp, #100]	; 0x64
 800402e:	5d1a      	ldrb	r2, [r3, r4]
 8004030:	f1bb 0f00 	cmp.w	fp, #0
 8004034:	d036      	beq.n	80040a4 <_strtod_l+0x244>
 8004036:	9004      	str	r0, [sp, #16]
 8004038:	465c      	mov	r4, fp
 800403a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800403e:	2b09      	cmp	r3, #9
 8004040:	d912      	bls.n	8004068 <_strtod_l+0x208>
 8004042:	2301      	movs	r3, #1
 8004044:	e7c1      	b.n	8003fca <_strtod_l+0x16a>
 8004046:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	9219      	str	r2, [sp, #100]	; 0x64
 800404c:	785a      	ldrb	r2, [r3, #1]
 800404e:	3001      	adds	r0, #1
 8004050:	2a30      	cmp	r2, #48	; 0x30
 8004052:	d0f8      	beq.n	8004046 <_strtod_l+0x1e6>
 8004054:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004058:	2b08      	cmp	r3, #8
 800405a:	f200 84d5 	bhi.w	8004a08 <_strtod_l+0xba8>
 800405e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004060:	9004      	str	r0, [sp, #16]
 8004062:	2000      	movs	r0, #0
 8004064:	9308      	str	r3, [sp, #32]
 8004066:	4604      	mov	r4, r0
 8004068:	3a30      	subs	r2, #48	; 0x30
 800406a:	f100 0301 	add.w	r3, r0, #1
 800406e:	d013      	beq.n	8004098 <_strtod_l+0x238>
 8004070:	9904      	ldr	r1, [sp, #16]
 8004072:	4419      	add	r1, r3
 8004074:	9104      	str	r1, [sp, #16]
 8004076:	4623      	mov	r3, r4
 8004078:	1905      	adds	r5, r0, r4
 800407a:	210a      	movs	r1, #10
 800407c:	42ab      	cmp	r3, r5
 800407e:	d113      	bne.n	80040a8 <_strtod_l+0x248>
 8004080:	1823      	adds	r3, r4, r0
 8004082:	2b08      	cmp	r3, #8
 8004084:	f104 0401 	add.w	r4, r4, #1
 8004088:	4404      	add	r4, r0
 800408a:	dc1b      	bgt.n	80040c4 <_strtod_l+0x264>
 800408c:	9906      	ldr	r1, [sp, #24]
 800408e:	230a      	movs	r3, #10
 8004090:	fb03 2301 	mla	r3, r3, r1, r2
 8004094:	9306      	str	r3, [sp, #24]
 8004096:	2300      	movs	r3, #0
 8004098:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800409a:	1c51      	adds	r1, r2, #1
 800409c:	9119      	str	r1, [sp, #100]	; 0x64
 800409e:	7852      	ldrb	r2, [r2, #1]
 80040a0:	4618      	mov	r0, r3
 80040a2:	e7ca      	b.n	800403a <_strtod_l+0x1da>
 80040a4:	4658      	mov	r0, fp
 80040a6:	e7d3      	b.n	8004050 <_strtod_l+0x1f0>
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	dc04      	bgt.n	80040b6 <_strtod_l+0x256>
 80040ac:	9f06      	ldr	r7, [sp, #24]
 80040ae:	434f      	muls	r7, r1
 80040b0:	9706      	str	r7, [sp, #24]
 80040b2:	3301      	adds	r3, #1
 80040b4:	e7e2      	b.n	800407c <_strtod_l+0x21c>
 80040b6:	1c5f      	adds	r7, r3, #1
 80040b8:	2f10      	cmp	r7, #16
 80040ba:	bfde      	ittt	le
 80040bc:	9f05      	ldrle	r7, [sp, #20]
 80040be:	434f      	mulle	r7, r1
 80040c0:	9705      	strle	r7, [sp, #20]
 80040c2:	e7f6      	b.n	80040b2 <_strtod_l+0x252>
 80040c4:	2c10      	cmp	r4, #16
 80040c6:	bfdf      	itttt	le
 80040c8:	9905      	ldrle	r1, [sp, #20]
 80040ca:	230a      	movle	r3, #10
 80040cc:	fb03 2301 	mlale	r3, r3, r1, r2
 80040d0:	9305      	strle	r3, [sp, #20]
 80040d2:	e7e0      	b.n	8004096 <_strtod_l+0x236>
 80040d4:	2300      	movs	r3, #0
 80040d6:	9304      	str	r3, [sp, #16]
 80040d8:	2301      	movs	r3, #1
 80040da:	e77b      	b.n	8003fd4 <_strtod_l+0x174>
 80040dc:	2700      	movs	r7, #0
 80040de:	1cb2      	adds	r2, r6, #2
 80040e0:	9219      	str	r2, [sp, #100]	; 0x64
 80040e2:	78b2      	ldrb	r2, [r6, #2]
 80040e4:	e784      	b.n	8003ff0 <_strtod_l+0x190>
 80040e6:	bf00      	nop
 80040e8:	08009298 	.word	0x08009298
 80040ec:	0800904c 	.word	0x0800904c
 80040f0:	7ff00000 	.word	0x7ff00000
 80040f4:	2701      	movs	r7, #1
 80040f6:	e7f2      	b.n	80040de <_strtod_l+0x27e>
 80040f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80040fa:	1c51      	adds	r1, r2, #1
 80040fc:	9119      	str	r1, [sp, #100]	; 0x64
 80040fe:	7852      	ldrb	r2, [r2, #1]
 8004100:	2a30      	cmp	r2, #48	; 0x30
 8004102:	d0f9      	beq.n	80040f8 <_strtod_l+0x298>
 8004104:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004108:	2908      	cmp	r1, #8
 800410a:	f63f af77 	bhi.w	8003ffc <_strtod_l+0x19c>
 800410e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8004112:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004114:	9209      	str	r2, [sp, #36]	; 0x24
 8004116:	f04f 0e0a 	mov.w	lr, #10
 800411a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800411c:	1c51      	adds	r1, r2, #1
 800411e:	9119      	str	r1, [sp, #100]	; 0x64
 8004120:	7852      	ldrb	r2, [r2, #1]
 8004122:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8004126:	2d09      	cmp	r5, #9
 8004128:	d935      	bls.n	8004196 <_strtod_l+0x336>
 800412a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800412c:	1b49      	subs	r1, r1, r5
 800412e:	2908      	cmp	r1, #8
 8004130:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8004134:	dc02      	bgt.n	800413c <_strtod_l+0x2dc>
 8004136:	4565      	cmp	r5, ip
 8004138:	bfa8      	it	ge
 800413a:	4665      	movge	r5, ip
 800413c:	b107      	cbz	r7, 8004140 <_strtod_l+0x2e0>
 800413e:	426d      	negs	r5, r5
 8004140:	2c00      	cmp	r4, #0
 8004142:	d14c      	bne.n	80041de <_strtod_l+0x37e>
 8004144:	9907      	ldr	r1, [sp, #28]
 8004146:	4301      	orrs	r1, r0
 8004148:	f47f aecb 	bne.w	8003ee2 <_strtod_l+0x82>
 800414c:	2b00      	cmp	r3, #0
 800414e:	f47f aee4 	bne.w	8003f1a <_strtod_l+0xba>
 8004152:	2a69      	cmp	r2, #105	; 0x69
 8004154:	d026      	beq.n	80041a4 <_strtod_l+0x344>
 8004156:	dc23      	bgt.n	80041a0 <_strtod_l+0x340>
 8004158:	2a49      	cmp	r2, #73	; 0x49
 800415a:	d023      	beq.n	80041a4 <_strtod_l+0x344>
 800415c:	2a4e      	cmp	r2, #78	; 0x4e
 800415e:	f47f aedc 	bne.w	8003f1a <_strtod_l+0xba>
 8004162:	499d      	ldr	r1, [pc, #628]	; (80043d8 <_strtod_l+0x578>)
 8004164:	a819      	add	r0, sp, #100	; 0x64
 8004166:	f001 fe3d 	bl	8005de4 <__match>
 800416a:	2800      	cmp	r0, #0
 800416c:	f43f aed5 	beq.w	8003f1a <_strtod_l+0xba>
 8004170:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b28      	cmp	r3, #40	; 0x28
 8004176:	d12c      	bne.n	80041d2 <_strtod_l+0x372>
 8004178:	4998      	ldr	r1, [pc, #608]	; (80043dc <_strtod_l+0x57c>)
 800417a:	aa1c      	add	r2, sp, #112	; 0x70
 800417c:	a819      	add	r0, sp, #100	; 0x64
 800417e:	f001 fe45 	bl	8005e0c <__hexnan>
 8004182:	2805      	cmp	r0, #5
 8004184:	d125      	bne.n	80041d2 <_strtod_l+0x372>
 8004186:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004188:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800418c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004190:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004194:	e6a5      	b.n	8003ee2 <_strtod_l+0x82>
 8004196:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800419a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800419e:	e7bc      	b.n	800411a <_strtod_l+0x2ba>
 80041a0:	2a6e      	cmp	r2, #110	; 0x6e
 80041a2:	e7dc      	b.n	800415e <_strtod_l+0x2fe>
 80041a4:	498e      	ldr	r1, [pc, #568]	; (80043e0 <_strtod_l+0x580>)
 80041a6:	a819      	add	r0, sp, #100	; 0x64
 80041a8:	f001 fe1c 	bl	8005de4 <__match>
 80041ac:	2800      	cmp	r0, #0
 80041ae:	f43f aeb4 	beq.w	8003f1a <_strtod_l+0xba>
 80041b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80041b4:	498b      	ldr	r1, [pc, #556]	; (80043e4 <_strtod_l+0x584>)
 80041b6:	3b01      	subs	r3, #1
 80041b8:	a819      	add	r0, sp, #100	; 0x64
 80041ba:	9319      	str	r3, [sp, #100]	; 0x64
 80041bc:	f001 fe12 	bl	8005de4 <__match>
 80041c0:	b910      	cbnz	r0, 80041c8 <_strtod_l+0x368>
 80041c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80041c4:	3301      	adds	r3, #1
 80041c6:	9319      	str	r3, [sp, #100]	; 0x64
 80041c8:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80043e8 <_strtod_l+0x588>
 80041cc:	f04f 0800 	mov.w	r8, #0
 80041d0:	e687      	b.n	8003ee2 <_strtod_l+0x82>
 80041d2:	4886      	ldr	r0, [pc, #536]	; (80043ec <_strtod_l+0x58c>)
 80041d4:	f003 f92c 	bl	8007430 <nan>
 80041d8:	4680      	mov	r8, r0
 80041da:	4689      	mov	r9, r1
 80041dc:	e681      	b.n	8003ee2 <_strtod_l+0x82>
 80041de:	9b04      	ldr	r3, [sp, #16]
 80041e0:	9806      	ldr	r0, [sp, #24]
 80041e2:	1aeb      	subs	r3, r5, r3
 80041e4:	f1bb 0f00 	cmp.w	fp, #0
 80041e8:	bf08      	it	eq
 80041ea:	46a3      	moveq	fp, r4
 80041ec:	2c10      	cmp	r4, #16
 80041ee:	9307      	str	r3, [sp, #28]
 80041f0:	4626      	mov	r6, r4
 80041f2:	bfa8      	it	ge
 80041f4:	2610      	movge	r6, #16
 80041f6:	f7fc f99d 	bl	8000534 <__aeabi_ui2d>
 80041fa:	2c09      	cmp	r4, #9
 80041fc:	4680      	mov	r8, r0
 80041fe:	4689      	mov	r9, r1
 8004200:	dd13      	ble.n	800422a <_strtod_l+0x3ca>
 8004202:	4b7b      	ldr	r3, [pc, #492]	; (80043f0 <_strtod_l+0x590>)
 8004204:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004208:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800420c:	f7fc fa0c 	bl	8000628 <__aeabi_dmul>
 8004210:	4680      	mov	r8, r0
 8004212:	9805      	ldr	r0, [sp, #20]
 8004214:	4689      	mov	r9, r1
 8004216:	f7fc f98d 	bl	8000534 <__aeabi_ui2d>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4640      	mov	r0, r8
 8004220:	4649      	mov	r1, r9
 8004222:	f7fc f84b 	bl	80002bc <__adddf3>
 8004226:	4680      	mov	r8, r0
 8004228:	4689      	mov	r9, r1
 800422a:	2c0f      	cmp	r4, #15
 800422c:	dc36      	bgt.n	800429c <_strtod_l+0x43c>
 800422e:	9b07      	ldr	r3, [sp, #28]
 8004230:	2b00      	cmp	r3, #0
 8004232:	f43f ae56 	beq.w	8003ee2 <_strtod_l+0x82>
 8004236:	dd22      	ble.n	800427e <_strtod_l+0x41e>
 8004238:	2b16      	cmp	r3, #22
 800423a:	dc09      	bgt.n	8004250 <_strtod_l+0x3f0>
 800423c:	496c      	ldr	r1, [pc, #432]	; (80043f0 <_strtod_l+0x590>)
 800423e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004242:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004246:	4642      	mov	r2, r8
 8004248:	464b      	mov	r3, r9
 800424a:	f7fc f9ed 	bl	8000628 <__aeabi_dmul>
 800424e:	e7c3      	b.n	80041d8 <_strtod_l+0x378>
 8004250:	9a07      	ldr	r2, [sp, #28]
 8004252:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004256:	4293      	cmp	r3, r2
 8004258:	db20      	blt.n	800429c <_strtod_l+0x43c>
 800425a:	4d65      	ldr	r5, [pc, #404]	; (80043f0 <_strtod_l+0x590>)
 800425c:	f1c4 040f 	rsb	r4, r4, #15
 8004260:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004264:	4642      	mov	r2, r8
 8004266:	464b      	mov	r3, r9
 8004268:	e9d1 0100 	ldrd	r0, r1, [r1]
 800426c:	f7fc f9dc 	bl	8000628 <__aeabi_dmul>
 8004270:	9b07      	ldr	r3, [sp, #28]
 8004272:	1b1c      	subs	r4, r3, r4
 8004274:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004278:	e9d5 2300 	ldrd	r2, r3, [r5]
 800427c:	e7e5      	b.n	800424a <_strtod_l+0x3ea>
 800427e:	9b07      	ldr	r3, [sp, #28]
 8004280:	3316      	adds	r3, #22
 8004282:	db0b      	blt.n	800429c <_strtod_l+0x43c>
 8004284:	9b04      	ldr	r3, [sp, #16]
 8004286:	1b5d      	subs	r5, r3, r5
 8004288:	4b59      	ldr	r3, [pc, #356]	; (80043f0 <_strtod_l+0x590>)
 800428a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800428e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004292:	4640      	mov	r0, r8
 8004294:	4649      	mov	r1, r9
 8004296:	f7fc faf1 	bl	800087c <__aeabi_ddiv>
 800429a:	e79d      	b.n	80041d8 <_strtod_l+0x378>
 800429c:	9b07      	ldr	r3, [sp, #28]
 800429e:	1ba6      	subs	r6, r4, r6
 80042a0:	441e      	add	r6, r3
 80042a2:	2e00      	cmp	r6, #0
 80042a4:	dd74      	ble.n	8004390 <_strtod_l+0x530>
 80042a6:	f016 030f 	ands.w	r3, r6, #15
 80042aa:	d00a      	beq.n	80042c2 <_strtod_l+0x462>
 80042ac:	4950      	ldr	r1, [pc, #320]	; (80043f0 <_strtod_l+0x590>)
 80042ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80042b2:	4642      	mov	r2, r8
 80042b4:	464b      	mov	r3, r9
 80042b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042ba:	f7fc f9b5 	bl	8000628 <__aeabi_dmul>
 80042be:	4680      	mov	r8, r0
 80042c0:	4689      	mov	r9, r1
 80042c2:	f036 060f 	bics.w	r6, r6, #15
 80042c6:	d052      	beq.n	800436e <_strtod_l+0x50e>
 80042c8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80042cc:	dd27      	ble.n	800431e <_strtod_l+0x4be>
 80042ce:	f04f 0b00 	mov.w	fp, #0
 80042d2:	f8cd b010 	str.w	fp, [sp, #16]
 80042d6:	f8cd b020 	str.w	fp, [sp, #32]
 80042da:	f8cd b018 	str.w	fp, [sp, #24]
 80042de:	2322      	movs	r3, #34	; 0x22
 80042e0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80043e8 <_strtod_l+0x588>
 80042e4:	f8ca 3000 	str.w	r3, [sl]
 80042e8:	f04f 0800 	mov.w	r8, #0
 80042ec:	9b08      	ldr	r3, [sp, #32]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f43f adf7 	beq.w	8003ee2 <_strtod_l+0x82>
 80042f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80042f6:	4650      	mov	r0, sl
 80042f8:	f001 fea2 	bl	8006040 <_Bfree>
 80042fc:	9906      	ldr	r1, [sp, #24]
 80042fe:	4650      	mov	r0, sl
 8004300:	f001 fe9e 	bl	8006040 <_Bfree>
 8004304:	9904      	ldr	r1, [sp, #16]
 8004306:	4650      	mov	r0, sl
 8004308:	f001 fe9a 	bl	8006040 <_Bfree>
 800430c:	9908      	ldr	r1, [sp, #32]
 800430e:	4650      	mov	r0, sl
 8004310:	f001 fe96 	bl	8006040 <_Bfree>
 8004314:	4659      	mov	r1, fp
 8004316:	4650      	mov	r0, sl
 8004318:	f001 fe92 	bl	8006040 <_Bfree>
 800431c:	e5e1      	b.n	8003ee2 <_strtod_l+0x82>
 800431e:	4b35      	ldr	r3, [pc, #212]	; (80043f4 <_strtod_l+0x594>)
 8004320:	9305      	str	r3, [sp, #20]
 8004322:	2300      	movs	r3, #0
 8004324:	1136      	asrs	r6, r6, #4
 8004326:	4640      	mov	r0, r8
 8004328:	4649      	mov	r1, r9
 800432a:	461f      	mov	r7, r3
 800432c:	2e01      	cmp	r6, #1
 800432e:	dc21      	bgt.n	8004374 <_strtod_l+0x514>
 8004330:	b10b      	cbz	r3, 8004336 <_strtod_l+0x4d6>
 8004332:	4680      	mov	r8, r0
 8004334:	4689      	mov	r9, r1
 8004336:	4b2f      	ldr	r3, [pc, #188]	; (80043f4 <_strtod_l+0x594>)
 8004338:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800433c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004340:	4642      	mov	r2, r8
 8004342:	464b      	mov	r3, r9
 8004344:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004348:	f7fc f96e 	bl	8000628 <__aeabi_dmul>
 800434c:	4b26      	ldr	r3, [pc, #152]	; (80043e8 <_strtod_l+0x588>)
 800434e:	460a      	mov	r2, r1
 8004350:	400b      	ands	r3, r1
 8004352:	4929      	ldr	r1, [pc, #164]	; (80043f8 <_strtod_l+0x598>)
 8004354:	428b      	cmp	r3, r1
 8004356:	4680      	mov	r8, r0
 8004358:	d8b9      	bhi.n	80042ce <_strtod_l+0x46e>
 800435a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800435e:	428b      	cmp	r3, r1
 8004360:	bf86      	itte	hi
 8004362:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 80043fc <_strtod_l+0x59c>
 8004366:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800436a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800436e:	2300      	movs	r3, #0
 8004370:	9305      	str	r3, [sp, #20]
 8004372:	e07f      	b.n	8004474 <_strtod_l+0x614>
 8004374:	07f2      	lsls	r2, r6, #31
 8004376:	d505      	bpl.n	8004384 <_strtod_l+0x524>
 8004378:	9b05      	ldr	r3, [sp, #20]
 800437a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437e:	f7fc f953 	bl	8000628 <__aeabi_dmul>
 8004382:	2301      	movs	r3, #1
 8004384:	9a05      	ldr	r2, [sp, #20]
 8004386:	3208      	adds	r2, #8
 8004388:	3701      	adds	r7, #1
 800438a:	1076      	asrs	r6, r6, #1
 800438c:	9205      	str	r2, [sp, #20]
 800438e:	e7cd      	b.n	800432c <_strtod_l+0x4cc>
 8004390:	d0ed      	beq.n	800436e <_strtod_l+0x50e>
 8004392:	4276      	negs	r6, r6
 8004394:	f016 020f 	ands.w	r2, r6, #15
 8004398:	d00a      	beq.n	80043b0 <_strtod_l+0x550>
 800439a:	4b15      	ldr	r3, [pc, #84]	; (80043f0 <_strtod_l+0x590>)
 800439c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80043a0:	4640      	mov	r0, r8
 80043a2:	4649      	mov	r1, r9
 80043a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a8:	f7fc fa68 	bl	800087c <__aeabi_ddiv>
 80043ac:	4680      	mov	r8, r0
 80043ae:	4689      	mov	r9, r1
 80043b0:	1136      	asrs	r6, r6, #4
 80043b2:	d0dc      	beq.n	800436e <_strtod_l+0x50e>
 80043b4:	2e1f      	cmp	r6, #31
 80043b6:	dd23      	ble.n	8004400 <_strtod_l+0x5a0>
 80043b8:	f04f 0b00 	mov.w	fp, #0
 80043bc:	f8cd b010 	str.w	fp, [sp, #16]
 80043c0:	f8cd b020 	str.w	fp, [sp, #32]
 80043c4:	f8cd b018 	str.w	fp, [sp, #24]
 80043c8:	2322      	movs	r3, #34	; 0x22
 80043ca:	f04f 0800 	mov.w	r8, #0
 80043ce:	f04f 0900 	mov.w	r9, #0
 80043d2:	f8ca 3000 	str.w	r3, [sl]
 80043d6:	e789      	b.n	80042ec <_strtod_l+0x48c>
 80043d8:	08009021 	.word	0x08009021
 80043dc:	08009060 	.word	0x08009060
 80043e0:	08009019 	.word	0x08009019
 80043e4:	080091a4 	.word	0x080091a4
 80043e8:	7ff00000 	.word	0x7ff00000
 80043ec:	0800946b 	.word	0x0800946b
 80043f0:	08009330 	.word	0x08009330
 80043f4:	08009308 	.word	0x08009308
 80043f8:	7ca00000 	.word	0x7ca00000
 80043fc:	7fefffff 	.word	0x7fefffff
 8004400:	f016 0310 	ands.w	r3, r6, #16
 8004404:	bf18      	it	ne
 8004406:	236a      	movne	r3, #106	; 0x6a
 8004408:	4fb1      	ldr	r7, [pc, #708]	; (80046d0 <_strtod_l+0x870>)
 800440a:	9305      	str	r3, [sp, #20]
 800440c:	4640      	mov	r0, r8
 800440e:	4649      	mov	r1, r9
 8004410:	2300      	movs	r3, #0
 8004412:	07f2      	lsls	r2, r6, #31
 8004414:	d504      	bpl.n	8004420 <_strtod_l+0x5c0>
 8004416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800441a:	f7fc f905 	bl	8000628 <__aeabi_dmul>
 800441e:	2301      	movs	r3, #1
 8004420:	1076      	asrs	r6, r6, #1
 8004422:	f107 0708 	add.w	r7, r7, #8
 8004426:	d1f4      	bne.n	8004412 <_strtod_l+0x5b2>
 8004428:	b10b      	cbz	r3, 800442e <_strtod_l+0x5ce>
 800442a:	4680      	mov	r8, r0
 800442c:	4689      	mov	r9, r1
 800442e:	9b05      	ldr	r3, [sp, #20]
 8004430:	b1c3      	cbz	r3, 8004464 <_strtod_l+0x604>
 8004432:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8004436:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800443a:	2b00      	cmp	r3, #0
 800443c:	4649      	mov	r1, r9
 800443e:	dd11      	ble.n	8004464 <_strtod_l+0x604>
 8004440:	2b1f      	cmp	r3, #31
 8004442:	f340 8124 	ble.w	800468e <_strtod_l+0x82e>
 8004446:	2b34      	cmp	r3, #52	; 0x34
 8004448:	bfde      	ittt	le
 800444a:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800444e:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8004452:	fa03 f202 	lslle.w	r2, r3, r2
 8004456:	f04f 0800 	mov.w	r8, #0
 800445a:	bfcc      	ite	gt
 800445c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004460:	ea02 0901 	andle.w	r9, r2, r1
 8004464:	2200      	movs	r2, #0
 8004466:	2300      	movs	r3, #0
 8004468:	4640      	mov	r0, r8
 800446a:	4649      	mov	r1, r9
 800446c:	f7fc fb44 	bl	8000af8 <__aeabi_dcmpeq>
 8004470:	2800      	cmp	r0, #0
 8004472:	d1a1      	bne.n	80043b8 <_strtod_l+0x558>
 8004474:	9b06      	ldr	r3, [sp, #24]
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	9908      	ldr	r1, [sp, #32]
 800447a:	4623      	mov	r3, r4
 800447c:	465a      	mov	r2, fp
 800447e:	4650      	mov	r0, sl
 8004480:	f001 fe46 	bl	8006110 <__s2b>
 8004484:	9008      	str	r0, [sp, #32]
 8004486:	2800      	cmp	r0, #0
 8004488:	f43f af21 	beq.w	80042ce <_strtod_l+0x46e>
 800448c:	9b04      	ldr	r3, [sp, #16]
 800448e:	1b5d      	subs	r5, r3, r5
 8004490:	9b07      	ldr	r3, [sp, #28]
 8004492:	2b00      	cmp	r3, #0
 8004494:	bfb4      	ite	lt
 8004496:	462b      	movlt	r3, r5
 8004498:	2300      	movge	r3, #0
 800449a:	930e      	str	r3, [sp, #56]	; 0x38
 800449c:	9b07      	ldr	r3, [sp, #28]
 800449e:	f04f 0b00 	mov.w	fp, #0
 80044a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80044a6:	9314      	str	r3, [sp, #80]	; 0x50
 80044a8:	f8cd b010 	str.w	fp, [sp, #16]
 80044ac:	9b08      	ldr	r3, [sp, #32]
 80044ae:	4650      	mov	r0, sl
 80044b0:	6859      	ldr	r1, [r3, #4]
 80044b2:	f001 fd85 	bl	8005fc0 <_Balloc>
 80044b6:	9006      	str	r0, [sp, #24]
 80044b8:	2800      	cmp	r0, #0
 80044ba:	f43f af10 	beq.w	80042de <_strtod_l+0x47e>
 80044be:	9b08      	ldr	r3, [sp, #32]
 80044c0:	691a      	ldr	r2, [r3, #16]
 80044c2:	3202      	adds	r2, #2
 80044c4:	f103 010c 	add.w	r1, r3, #12
 80044c8:	0092      	lsls	r2, r2, #2
 80044ca:	300c      	adds	r0, #12
 80044cc:	f001 fd6a 	bl	8005fa4 <memcpy>
 80044d0:	ab1c      	add	r3, sp, #112	; 0x70
 80044d2:	9301      	str	r3, [sp, #4]
 80044d4:	ab1b      	add	r3, sp, #108	; 0x6c
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	4642      	mov	r2, r8
 80044da:	464b      	mov	r3, r9
 80044dc:	4650      	mov	r0, sl
 80044de:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80044e2:	f002 f953 	bl	800678c <__d2b>
 80044e6:	901a      	str	r0, [sp, #104]	; 0x68
 80044e8:	2800      	cmp	r0, #0
 80044ea:	f43f aef8 	beq.w	80042de <_strtod_l+0x47e>
 80044ee:	2101      	movs	r1, #1
 80044f0:	4650      	mov	r0, sl
 80044f2:	f001 fea5 	bl	8006240 <__i2b>
 80044f6:	9004      	str	r0, [sp, #16]
 80044f8:	4603      	mov	r3, r0
 80044fa:	2800      	cmp	r0, #0
 80044fc:	f43f aeef 	beq.w	80042de <_strtod_l+0x47e>
 8004500:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004502:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004504:	2d00      	cmp	r5, #0
 8004506:	bfab      	itete	ge
 8004508:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800450a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800450c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800450e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004510:	bfac      	ite	ge
 8004512:	18ee      	addge	r6, r5, r3
 8004514:	1b5c      	sublt	r4, r3, r5
 8004516:	9b05      	ldr	r3, [sp, #20]
 8004518:	1aed      	subs	r5, r5, r3
 800451a:	4415      	add	r5, r2
 800451c:	4b6d      	ldr	r3, [pc, #436]	; (80046d4 <_strtod_l+0x874>)
 800451e:	3d01      	subs	r5, #1
 8004520:	429d      	cmp	r5, r3
 8004522:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004526:	f280 80c4 	bge.w	80046b2 <_strtod_l+0x852>
 800452a:	1b5b      	subs	r3, r3, r5
 800452c:	2b1f      	cmp	r3, #31
 800452e:	eba2 0203 	sub.w	r2, r2, r3
 8004532:	f04f 0701 	mov.w	r7, #1
 8004536:	f300 80b1 	bgt.w	800469c <_strtod_l+0x83c>
 800453a:	fa07 f303 	lsl.w	r3, r7, r3
 800453e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004540:	2500      	movs	r5, #0
 8004542:	18b7      	adds	r7, r6, r2
 8004544:	9b05      	ldr	r3, [sp, #20]
 8004546:	42be      	cmp	r6, r7
 8004548:	4414      	add	r4, r2
 800454a:	441c      	add	r4, r3
 800454c:	4633      	mov	r3, r6
 800454e:	bfa8      	it	ge
 8004550:	463b      	movge	r3, r7
 8004552:	42a3      	cmp	r3, r4
 8004554:	bfa8      	it	ge
 8004556:	4623      	movge	r3, r4
 8004558:	2b00      	cmp	r3, #0
 800455a:	bfc2      	ittt	gt
 800455c:	1aff      	subgt	r7, r7, r3
 800455e:	1ae4      	subgt	r4, r4, r3
 8004560:	1af6      	subgt	r6, r6, r3
 8004562:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004564:	2b00      	cmp	r3, #0
 8004566:	dd17      	ble.n	8004598 <_strtod_l+0x738>
 8004568:	9904      	ldr	r1, [sp, #16]
 800456a:	461a      	mov	r2, r3
 800456c:	4650      	mov	r0, sl
 800456e:	f001 ff25 	bl	80063bc <__pow5mult>
 8004572:	9004      	str	r0, [sp, #16]
 8004574:	2800      	cmp	r0, #0
 8004576:	f43f aeb2 	beq.w	80042de <_strtod_l+0x47e>
 800457a:	4601      	mov	r1, r0
 800457c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800457e:	4650      	mov	r0, sl
 8004580:	f001 fe74 	bl	800626c <__multiply>
 8004584:	9009      	str	r0, [sp, #36]	; 0x24
 8004586:	2800      	cmp	r0, #0
 8004588:	f43f aea9 	beq.w	80042de <_strtod_l+0x47e>
 800458c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800458e:	4650      	mov	r0, sl
 8004590:	f001 fd56 	bl	8006040 <_Bfree>
 8004594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004596:	931a      	str	r3, [sp, #104]	; 0x68
 8004598:	2f00      	cmp	r7, #0
 800459a:	f300 808e 	bgt.w	80046ba <_strtod_l+0x85a>
 800459e:	9b07      	ldr	r3, [sp, #28]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	dd08      	ble.n	80045b6 <_strtod_l+0x756>
 80045a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80045a6:	9906      	ldr	r1, [sp, #24]
 80045a8:	4650      	mov	r0, sl
 80045aa:	f001 ff07 	bl	80063bc <__pow5mult>
 80045ae:	9006      	str	r0, [sp, #24]
 80045b0:	2800      	cmp	r0, #0
 80045b2:	f43f ae94 	beq.w	80042de <_strtod_l+0x47e>
 80045b6:	2c00      	cmp	r4, #0
 80045b8:	dd08      	ble.n	80045cc <_strtod_l+0x76c>
 80045ba:	9906      	ldr	r1, [sp, #24]
 80045bc:	4622      	mov	r2, r4
 80045be:	4650      	mov	r0, sl
 80045c0:	f001 ff56 	bl	8006470 <__lshift>
 80045c4:	9006      	str	r0, [sp, #24]
 80045c6:	2800      	cmp	r0, #0
 80045c8:	f43f ae89 	beq.w	80042de <_strtod_l+0x47e>
 80045cc:	2e00      	cmp	r6, #0
 80045ce:	dd08      	ble.n	80045e2 <_strtod_l+0x782>
 80045d0:	9904      	ldr	r1, [sp, #16]
 80045d2:	4632      	mov	r2, r6
 80045d4:	4650      	mov	r0, sl
 80045d6:	f001 ff4b 	bl	8006470 <__lshift>
 80045da:	9004      	str	r0, [sp, #16]
 80045dc:	2800      	cmp	r0, #0
 80045de:	f43f ae7e 	beq.w	80042de <_strtod_l+0x47e>
 80045e2:	9a06      	ldr	r2, [sp, #24]
 80045e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80045e6:	4650      	mov	r0, sl
 80045e8:	f001 ffce 	bl	8006588 <__mdiff>
 80045ec:	4683      	mov	fp, r0
 80045ee:	2800      	cmp	r0, #0
 80045f0:	f43f ae75 	beq.w	80042de <_strtod_l+0x47e>
 80045f4:	2400      	movs	r4, #0
 80045f6:	68c3      	ldr	r3, [r0, #12]
 80045f8:	9904      	ldr	r1, [sp, #16]
 80045fa:	60c4      	str	r4, [r0, #12]
 80045fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80045fe:	f001 ffa7 	bl	8006550 <__mcmp>
 8004602:	42a0      	cmp	r0, r4
 8004604:	da6c      	bge.n	80046e0 <_strtod_l+0x880>
 8004606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004608:	ea53 0308 	orrs.w	r3, r3, r8
 800460c:	f040 8092 	bne.w	8004734 <_strtod_l+0x8d4>
 8004610:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004614:	2b00      	cmp	r3, #0
 8004616:	f040 808d 	bne.w	8004734 <_strtod_l+0x8d4>
 800461a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800461e:	0d1b      	lsrs	r3, r3, #20
 8004620:	051b      	lsls	r3, r3, #20
 8004622:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004626:	f240 8085 	bls.w	8004734 <_strtod_l+0x8d4>
 800462a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800462e:	b91b      	cbnz	r3, 8004638 <_strtod_l+0x7d8>
 8004630:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004634:	2b01      	cmp	r3, #1
 8004636:	dd7d      	ble.n	8004734 <_strtod_l+0x8d4>
 8004638:	4659      	mov	r1, fp
 800463a:	2201      	movs	r2, #1
 800463c:	4650      	mov	r0, sl
 800463e:	f001 ff17 	bl	8006470 <__lshift>
 8004642:	9904      	ldr	r1, [sp, #16]
 8004644:	4683      	mov	fp, r0
 8004646:	f001 ff83 	bl	8006550 <__mcmp>
 800464a:	2800      	cmp	r0, #0
 800464c:	dd72      	ble.n	8004734 <_strtod_l+0x8d4>
 800464e:	9905      	ldr	r1, [sp, #20]
 8004650:	4a21      	ldr	r2, [pc, #132]	; (80046d8 <_strtod_l+0x878>)
 8004652:	464b      	mov	r3, r9
 8004654:	2900      	cmp	r1, #0
 8004656:	f000 808d 	beq.w	8004774 <_strtod_l+0x914>
 800465a:	ea02 0109 	and.w	r1, r2, r9
 800465e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004662:	f300 8087 	bgt.w	8004774 <_strtod_l+0x914>
 8004666:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800466a:	f77f aead 	ble.w	80043c8 <_strtod_l+0x568>
 800466e:	4b1b      	ldr	r3, [pc, #108]	; (80046dc <_strtod_l+0x87c>)
 8004670:	4640      	mov	r0, r8
 8004672:	4649      	mov	r1, r9
 8004674:	2200      	movs	r2, #0
 8004676:	f7fb ffd7 	bl	8000628 <__aeabi_dmul>
 800467a:	460b      	mov	r3, r1
 800467c:	4303      	orrs	r3, r0
 800467e:	bf08      	it	eq
 8004680:	2322      	moveq	r3, #34	; 0x22
 8004682:	4680      	mov	r8, r0
 8004684:	4689      	mov	r9, r1
 8004686:	bf08      	it	eq
 8004688:	f8ca 3000 	streq.w	r3, [sl]
 800468c:	e632      	b.n	80042f4 <_strtod_l+0x494>
 800468e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	ea03 0808 	and.w	r8, r3, r8
 800469a:	e6e3      	b.n	8004464 <_strtod_l+0x604>
 800469c:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80046a0:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80046a4:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80046a8:	35e2      	adds	r5, #226	; 0xe2
 80046aa:	fa07 f505 	lsl.w	r5, r7, r5
 80046ae:	970f      	str	r7, [sp, #60]	; 0x3c
 80046b0:	e747      	b.n	8004542 <_strtod_l+0x6e2>
 80046b2:	2301      	movs	r3, #1
 80046b4:	2500      	movs	r5, #0
 80046b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80046b8:	e743      	b.n	8004542 <_strtod_l+0x6e2>
 80046ba:	991a      	ldr	r1, [sp, #104]	; 0x68
 80046bc:	463a      	mov	r2, r7
 80046be:	4650      	mov	r0, sl
 80046c0:	f001 fed6 	bl	8006470 <__lshift>
 80046c4:	901a      	str	r0, [sp, #104]	; 0x68
 80046c6:	2800      	cmp	r0, #0
 80046c8:	f47f af69 	bne.w	800459e <_strtod_l+0x73e>
 80046cc:	e607      	b.n	80042de <_strtod_l+0x47e>
 80046ce:	bf00      	nop
 80046d0:	08009078 	.word	0x08009078
 80046d4:	fffffc02 	.word	0xfffffc02
 80046d8:	7ff00000 	.word	0x7ff00000
 80046dc:	39500000 	.word	0x39500000
 80046e0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80046e4:	d165      	bne.n	80047b2 <_strtod_l+0x952>
 80046e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80046e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80046ec:	b35a      	cbz	r2, 8004746 <_strtod_l+0x8e6>
 80046ee:	4a9a      	ldr	r2, [pc, #616]	; (8004958 <_strtod_l+0xaf8>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d12b      	bne.n	800474c <_strtod_l+0x8ec>
 80046f4:	9b05      	ldr	r3, [sp, #20]
 80046f6:	4641      	mov	r1, r8
 80046f8:	b303      	cbz	r3, 800473c <_strtod_l+0x8dc>
 80046fa:	4b98      	ldr	r3, [pc, #608]	; (800495c <_strtod_l+0xafc>)
 80046fc:	464a      	mov	r2, r9
 80046fe:	4013      	ands	r3, r2
 8004700:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004704:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004708:	d81b      	bhi.n	8004742 <_strtod_l+0x8e2>
 800470a:	0d1b      	lsrs	r3, r3, #20
 800470c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	4299      	cmp	r1, r3
 8004716:	d119      	bne.n	800474c <_strtod_l+0x8ec>
 8004718:	4b91      	ldr	r3, [pc, #580]	; (8004960 <_strtod_l+0xb00>)
 800471a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800471c:	429a      	cmp	r2, r3
 800471e:	d102      	bne.n	8004726 <_strtod_l+0x8c6>
 8004720:	3101      	adds	r1, #1
 8004722:	f43f addc 	beq.w	80042de <_strtod_l+0x47e>
 8004726:	4b8d      	ldr	r3, [pc, #564]	; (800495c <_strtod_l+0xafc>)
 8004728:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800472a:	401a      	ands	r2, r3
 800472c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004730:	f04f 0800 	mov.w	r8, #0
 8004734:	9b05      	ldr	r3, [sp, #20]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d199      	bne.n	800466e <_strtod_l+0x80e>
 800473a:	e5db      	b.n	80042f4 <_strtod_l+0x494>
 800473c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004740:	e7e8      	b.n	8004714 <_strtod_l+0x8b4>
 8004742:	4613      	mov	r3, r2
 8004744:	e7e6      	b.n	8004714 <_strtod_l+0x8b4>
 8004746:	ea53 0308 	orrs.w	r3, r3, r8
 800474a:	d080      	beq.n	800464e <_strtod_l+0x7ee>
 800474c:	b1e5      	cbz	r5, 8004788 <_strtod_l+0x928>
 800474e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004750:	421d      	tst	r5, r3
 8004752:	d0ef      	beq.n	8004734 <_strtod_l+0x8d4>
 8004754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004756:	9a05      	ldr	r2, [sp, #20]
 8004758:	4640      	mov	r0, r8
 800475a:	4649      	mov	r1, r9
 800475c:	b1c3      	cbz	r3, 8004790 <_strtod_l+0x930>
 800475e:	f7ff fb5e 	bl	8003e1e <sulp>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800476a:	f7fb fda7 	bl	80002bc <__adddf3>
 800476e:	4680      	mov	r8, r0
 8004770:	4689      	mov	r9, r1
 8004772:	e7df      	b.n	8004734 <_strtod_l+0x8d4>
 8004774:	4013      	ands	r3, r2
 8004776:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800477a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800477e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004782:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004786:	e7d5      	b.n	8004734 <_strtod_l+0x8d4>
 8004788:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800478a:	ea13 0f08 	tst.w	r3, r8
 800478e:	e7e0      	b.n	8004752 <_strtod_l+0x8f2>
 8004790:	f7ff fb45 	bl	8003e1e <sulp>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800479c:	f7fb fd8c 	bl	80002b8 <__aeabi_dsub>
 80047a0:	2200      	movs	r2, #0
 80047a2:	2300      	movs	r3, #0
 80047a4:	4680      	mov	r8, r0
 80047a6:	4689      	mov	r9, r1
 80047a8:	f7fc f9a6 	bl	8000af8 <__aeabi_dcmpeq>
 80047ac:	2800      	cmp	r0, #0
 80047ae:	d0c1      	beq.n	8004734 <_strtod_l+0x8d4>
 80047b0:	e60a      	b.n	80043c8 <_strtod_l+0x568>
 80047b2:	9904      	ldr	r1, [sp, #16]
 80047b4:	4658      	mov	r0, fp
 80047b6:	f002 f845 	bl	8006844 <__ratio>
 80047ba:	2200      	movs	r2, #0
 80047bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047c0:	4606      	mov	r6, r0
 80047c2:	460f      	mov	r7, r1
 80047c4:	f7fc f9ac 	bl	8000b20 <__aeabi_dcmple>
 80047c8:	2800      	cmp	r0, #0
 80047ca:	d070      	beq.n	80048ae <_strtod_l+0xa4e>
 80047cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d042      	beq.n	8004858 <_strtod_l+0x9f8>
 80047d2:	4f64      	ldr	r7, [pc, #400]	; (8004964 <_strtod_l+0xb04>)
 80047d4:	2600      	movs	r6, #0
 80047d6:	4d63      	ldr	r5, [pc, #396]	; (8004964 <_strtod_l+0xb04>)
 80047d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047de:	0d1b      	lsrs	r3, r3, #20
 80047e0:	051b      	lsls	r3, r3, #20
 80047e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80047e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80047e6:	4b60      	ldr	r3, [pc, #384]	; (8004968 <_strtod_l+0xb08>)
 80047e8:	429a      	cmp	r2, r3
 80047ea:	f040 80c5 	bne.w	8004978 <_strtod_l+0xb18>
 80047ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047f0:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80047f4:	4640      	mov	r0, r8
 80047f6:	4649      	mov	r1, r9
 80047f8:	f001 ff4e 	bl	8006698 <__ulp>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4630      	mov	r0, r6
 8004802:	4639      	mov	r1, r7
 8004804:	f7fb ff10 	bl	8000628 <__aeabi_dmul>
 8004808:	4642      	mov	r2, r8
 800480a:	464b      	mov	r3, r9
 800480c:	f7fb fd56 	bl	80002bc <__adddf3>
 8004810:	460b      	mov	r3, r1
 8004812:	4952      	ldr	r1, [pc, #328]	; (800495c <_strtod_l+0xafc>)
 8004814:	4a55      	ldr	r2, [pc, #340]	; (800496c <_strtod_l+0xb0c>)
 8004816:	4019      	ands	r1, r3
 8004818:	4291      	cmp	r1, r2
 800481a:	4680      	mov	r8, r0
 800481c:	d95d      	bls.n	80048da <_strtod_l+0xa7a>
 800481e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004820:	4b4f      	ldr	r3, [pc, #316]	; (8004960 <_strtod_l+0xb00>)
 8004822:	429a      	cmp	r2, r3
 8004824:	d103      	bne.n	800482e <_strtod_l+0x9ce>
 8004826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004828:	3301      	adds	r3, #1
 800482a:	f43f ad58 	beq.w	80042de <_strtod_l+0x47e>
 800482e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8004960 <_strtod_l+0xb00>
 8004832:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004836:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004838:	4650      	mov	r0, sl
 800483a:	f001 fc01 	bl	8006040 <_Bfree>
 800483e:	9906      	ldr	r1, [sp, #24]
 8004840:	4650      	mov	r0, sl
 8004842:	f001 fbfd 	bl	8006040 <_Bfree>
 8004846:	9904      	ldr	r1, [sp, #16]
 8004848:	4650      	mov	r0, sl
 800484a:	f001 fbf9 	bl	8006040 <_Bfree>
 800484e:	4659      	mov	r1, fp
 8004850:	4650      	mov	r0, sl
 8004852:	f001 fbf5 	bl	8006040 <_Bfree>
 8004856:	e629      	b.n	80044ac <_strtod_l+0x64c>
 8004858:	f1b8 0f00 	cmp.w	r8, #0
 800485c:	d119      	bne.n	8004892 <_strtod_l+0xa32>
 800485e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004860:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004864:	b9e3      	cbnz	r3, 80048a0 <_strtod_l+0xa40>
 8004866:	4b3f      	ldr	r3, [pc, #252]	; (8004964 <_strtod_l+0xb04>)
 8004868:	2200      	movs	r2, #0
 800486a:	4630      	mov	r0, r6
 800486c:	4639      	mov	r1, r7
 800486e:	f7fc f94d 	bl	8000b0c <__aeabi_dcmplt>
 8004872:	b9c8      	cbnz	r0, 80048a8 <_strtod_l+0xa48>
 8004874:	4b3e      	ldr	r3, [pc, #248]	; (8004970 <_strtod_l+0xb10>)
 8004876:	2200      	movs	r2, #0
 8004878:	4630      	mov	r0, r6
 800487a:	4639      	mov	r1, r7
 800487c:	f7fb fed4 	bl	8000628 <__aeabi_dmul>
 8004880:	4604      	mov	r4, r0
 8004882:	460d      	mov	r5, r1
 8004884:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004888:	9416      	str	r4, [sp, #88]	; 0x58
 800488a:	9317      	str	r3, [sp, #92]	; 0x5c
 800488c:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8004890:	e7a2      	b.n	80047d8 <_strtod_l+0x978>
 8004892:	f1b8 0f01 	cmp.w	r8, #1
 8004896:	d103      	bne.n	80048a0 <_strtod_l+0xa40>
 8004898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800489a:	2b00      	cmp	r3, #0
 800489c:	f43f ad94 	beq.w	80043c8 <_strtod_l+0x568>
 80048a0:	4f34      	ldr	r7, [pc, #208]	; (8004974 <_strtod_l+0xb14>)
 80048a2:	2600      	movs	r6, #0
 80048a4:	2400      	movs	r4, #0
 80048a6:	e796      	b.n	80047d6 <_strtod_l+0x976>
 80048a8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80048aa:	4d31      	ldr	r5, [pc, #196]	; (8004970 <_strtod_l+0xb10>)
 80048ac:	e7ea      	b.n	8004884 <_strtod_l+0xa24>
 80048ae:	4b30      	ldr	r3, [pc, #192]	; (8004970 <_strtod_l+0xb10>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	4630      	mov	r0, r6
 80048b4:	4639      	mov	r1, r7
 80048b6:	f7fb feb7 	bl	8000628 <__aeabi_dmul>
 80048ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048bc:	4604      	mov	r4, r0
 80048be:	460d      	mov	r5, r1
 80048c0:	b933      	cbnz	r3, 80048d0 <_strtod_l+0xa70>
 80048c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80048c6:	9010      	str	r0, [sp, #64]	; 0x40
 80048c8:	9311      	str	r3, [sp, #68]	; 0x44
 80048ca:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80048ce:	e783      	b.n	80047d8 <_strtod_l+0x978>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80048d8:	e7f7      	b.n	80048ca <_strtod_l+0xa6a>
 80048da:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80048de:	9b05      	ldr	r3, [sp, #20]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1a8      	bne.n	8004836 <_strtod_l+0x9d6>
 80048e4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80048e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80048ea:	0d1b      	lsrs	r3, r3, #20
 80048ec:	051b      	lsls	r3, r3, #20
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d1a1      	bne.n	8004836 <_strtod_l+0x9d6>
 80048f2:	4620      	mov	r0, r4
 80048f4:	4629      	mov	r1, r5
 80048f6:	f7fc f9df 	bl	8000cb8 <__aeabi_d2lz>
 80048fa:	f7fb fe67 	bl	80005cc <__aeabi_l2d>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4620      	mov	r0, r4
 8004904:	4629      	mov	r1, r5
 8004906:	f7fb fcd7 	bl	80002b8 <__aeabi_dsub>
 800490a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800490c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004910:	ea43 0308 	orr.w	r3, r3, r8
 8004914:	4313      	orrs	r3, r2
 8004916:	4604      	mov	r4, r0
 8004918:	460d      	mov	r5, r1
 800491a:	d068      	beq.n	80049ee <_strtod_l+0xb8e>
 800491c:	a30a      	add	r3, pc, #40	; (adr r3, 8004948 <_strtod_l+0xae8>)
 800491e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004922:	f7fc f8f3 	bl	8000b0c <__aeabi_dcmplt>
 8004926:	2800      	cmp	r0, #0
 8004928:	f47f ace4 	bne.w	80042f4 <_strtod_l+0x494>
 800492c:	a308      	add	r3, pc, #32	; (adr r3, 8004950 <_strtod_l+0xaf0>)
 800492e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004932:	4620      	mov	r0, r4
 8004934:	4629      	mov	r1, r5
 8004936:	f7fc f907 	bl	8000b48 <__aeabi_dcmpgt>
 800493a:	2800      	cmp	r0, #0
 800493c:	f43f af7b 	beq.w	8004836 <_strtod_l+0x9d6>
 8004940:	e4d8      	b.n	80042f4 <_strtod_l+0x494>
 8004942:	bf00      	nop
 8004944:	f3af 8000 	nop.w
 8004948:	94a03595 	.word	0x94a03595
 800494c:	3fdfffff 	.word	0x3fdfffff
 8004950:	35afe535 	.word	0x35afe535
 8004954:	3fe00000 	.word	0x3fe00000
 8004958:	000fffff 	.word	0x000fffff
 800495c:	7ff00000 	.word	0x7ff00000
 8004960:	7fefffff 	.word	0x7fefffff
 8004964:	3ff00000 	.word	0x3ff00000
 8004968:	7fe00000 	.word	0x7fe00000
 800496c:	7c9fffff 	.word	0x7c9fffff
 8004970:	3fe00000 	.word	0x3fe00000
 8004974:	bff00000 	.word	0xbff00000
 8004978:	9b05      	ldr	r3, [sp, #20]
 800497a:	b313      	cbz	r3, 80049c2 <_strtod_l+0xb62>
 800497c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800497e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004982:	d81e      	bhi.n	80049c2 <_strtod_l+0xb62>
 8004984:	a326      	add	r3, pc, #152	; (adr r3, 8004a20 <_strtod_l+0xbc0>)
 8004986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498a:	4620      	mov	r0, r4
 800498c:	4629      	mov	r1, r5
 800498e:	f7fc f8c7 	bl	8000b20 <__aeabi_dcmple>
 8004992:	b190      	cbz	r0, 80049ba <_strtod_l+0xb5a>
 8004994:	4629      	mov	r1, r5
 8004996:	4620      	mov	r0, r4
 8004998:	f7fc f91e 	bl	8000bd8 <__aeabi_d2uiz>
 800499c:	2801      	cmp	r0, #1
 800499e:	bf38      	it	cc
 80049a0:	2001      	movcc	r0, #1
 80049a2:	f7fb fdc7 	bl	8000534 <__aeabi_ui2d>
 80049a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049a8:	4604      	mov	r4, r0
 80049aa:	460d      	mov	r5, r1
 80049ac:	b9d3      	cbnz	r3, 80049e4 <_strtod_l+0xb84>
 80049ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80049b2:	9012      	str	r0, [sp, #72]	; 0x48
 80049b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80049b6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80049ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80049bc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80049c0:	1a9f      	subs	r7, r3, r2
 80049c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80049c6:	f001 fe67 	bl	8006698 <__ulp>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4630      	mov	r0, r6
 80049d0:	4639      	mov	r1, r7
 80049d2:	f7fb fe29 	bl	8000628 <__aeabi_dmul>
 80049d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80049da:	f7fb fc6f 	bl	80002bc <__adddf3>
 80049de:	4680      	mov	r8, r0
 80049e0:	4689      	mov	r9, r1
 80049e2:	e77c      	b.n	80048de <_strtod_l+0xa7e>
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80049ec:	e7e3      	b.n	80049b6 <_strtod_l+0xb56>
 80049ee:	a30e      	add	r3, pc, #56	; (adr r3, 8004a28 <_strtod_l+0xbc8>)
 80049f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f4:	f7fc f88a 	bl	8000b0c <__aeabi_dcmplt>
 80049f8:	e79f      	b.n	800493a <_strtod_l+0xada>
 80049fa:	2300      	movs	r3, #0
 80049fc:	930a      	str	r3, [sp, #40]	; 0x28
 80049fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004a00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	f7ff ba71 	b.w	8003eea <_strtod_l+0x8a>
 8004a08:	2a65      	cmp	r2, #101	; 0x65
 8004a0a:	f43f ab63 	beq.w	80040d4 <_strtod_l+0x274>
 8004a0e:	2a45      	cmp	r2, #69	; 0x45
 8004a10:	f43f ab60 	beq.w	80040d4 <_strtod_l+0x274>
 8004a14:	2301      	movs	r3, #1
 8004a16:	f7ff bb95 	b.w	8004144 <_strtod_l+0x2e4>
 8004a1a:	bf00      	nop
 8004a1c:	f3af 8000 	nop.w
 8004a20:	ffc00000 	.word	0xffc00000
 8004a24:	41dfffff 	.word	0x41dfffff
 8004a28:	94a03595 	.word	0x94a03595
 8004a2c:	3fcfffff 	.word	0x3fcfffff

08004a30 <_strtod_r>:
 8004a30:	4b01      	ldr	r3, [pc, #4]	; (8004a38 <_strtod_r+0x8>)
 8004a32:	f7ff ba15 	b.w	8003e60 <_strtod_l>
 8004a36:	bf00      	nop
 8004a38:	200000ac 	.word	0x200000ac

08004a3c <_strtol_l.constprop.0>:
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a42:	4680      	mov	r8, r0
 8004a44:	d001      	beq.n	8004a4a <_strtol_l.constprop.0+0xe>
 8004a46:	2b24      	cmp	r3, #36	; 0x24
 8004a48:	d906      	bls.n	8004a58 <_strtol_l.constprop.0+0x1c>
 8004a4a:	f000 ff0f 	bl	800586c <__errno>
 8004a4e:	2316      	movs	r3, #22
 8004a50:	6003      	str	r3, [r0, #0]
 8004a52:	2000      	movs	r0, #0
 8004a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a58:	4f35      	ldr	r7, [pc, #212]	; (8004b30 <_strtol_l.constprop.0+0xf4>)
 8004a5a:	460d      	mov	r5, r1
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a62:	5de6      	ldrb	r6, [r4, r7]
 8004a64:	f016 0608 	ands.w	r6, r6, #8
 8004a68:	d1f8      	bne.n	8004a5c <_strtol_l.constprop.0+0x20>
 8004a6a:	2c2d      	cmp	r4, #45	; 0x2d
 8004a6c:	d12f      	bne.n	8004ace <_strtol_l.constprop.0+0x92>
 8004a6e:	782c      	ldrb	r4, [r5, #0]
 8004a70:	2601      	movs	r6, #1
 8004a72:	1c85      	adds	r5, r0, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d057      	beq.n	8004b28 <_strtol_l.constprop.0+0xec>
 8004a78:	2b10      	cmp	r3, #16
 8004a7a:	d109      	bne.n	8004a90 <_strtol_l.constprop.0+0x54>
 8004a7c:	2c30      	cmp	r4, #48	; 0x30
 8004a7e:	d107      	bne.n	8004a90 <_strtol_l.constprop.0+0x54>
 8004a80:	7828      	ldrb	r0, [r5, #0]
 8004a82:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004a86:	2858      	cmp	r0, #88	; 0x58
 8004a88:	d149      	bne.n	8004b1e <_strtol_l.constprop.0+0xe2>
 8004a8a:	786c      	ldrb	r4, [r5, #1]
 8004a8c:	2310      	movs	r3, #16
 8004a8e:	3502      	adds	r5, #2
 8004a90:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8004a94:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8004a98:	2700      	movs	r7, #0
 8004a9a:	fbbe f9f3 	udiv	r9, lr, r3
 8004a9e:	4638      	mov	r0, r7
 8004aa0:	fb03 ea19 	mls	sl, r3, r9, lr
 8004aa4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004aa8:	f1bc 0f09 	cmp.w	ip, #9
 8004aac:	d814      	bhi.n	8004ad8 <_strtol_l.constprop.0+0x9c>
 8004aae:	4664      	mov	r4, ip
 8004ab0:	42a3      	cmp	r3, r4
 8004ab2:	dd22      	ble.n	8004afa <_strtol_l.constprop.0+0xbe>
 8004ab4:	2f00      	cmp	r7, #0
 8004ab6:	db1d      	blt.n	8004af4 <_strtol_l.constprop.0+0xb8>
 8004ab8:	4581      	cmp	r9, r0
 8004aba:	d31b      	bcc.n	8004af4 <_strtol_l.constprop.0+0xb8>
 8004abc:	d101      	bne.n	8004ac2 <_strtol_l.constprop.0+0x86>
 8004abe:	45a2      	cmp	sl, r4
 8004ac0:	db18      	blt.n	8004af4 <_strtol_l.constprop.0+0xb8>
 8004ac2:	fb00 4003 	mla	r0, r0, r3, r4
 8004ac6:	2701      	movs	r7, #1
 8004ac8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004acc:	e7ea      	b.n	8004aa4 <_strtol_l.constprop.0+0x68>
 8004ace:	2c2b      	cmp	r4, #43	; 0x2b
 8004ad0:	bf04      	itt	eq
 8004ad2:	782c      	ldrbeq	r4, [r5, #0]
 8004ad4:	1c85      	addeq	r5, r0, #2
 8004ad6:	e7cd      	b.n	8004a74 <_strtol_l.constprop.0+0x38>
 8004ad8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004adc:	f1bc 0f19 	cmp.w	ip, #25
 8004ae0:	d801      	bhi.n	8004ae6 <_strtol_l.constprop.0+0xaa>
 8004ae2:	3c37      	subs	r4, #55	; 0x37
 8004ae4:	e7e4      	b.n	8004ab0 <_strtol_l.constprop.0+0x74>
 8004ae6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004aea:	f1bc 0f19 	cmp.w	ip, #25
 8004aee:	d804      	bhi.n	8004afa <_strtol_l.constprop.0+0xbe>
 8004af0:	3c57      	subs	r4, #87	; 0x57
 8004af2:	e7dd      	b.n	8004ab0 <_strtol_l.constprop.0+0x74>
 8004af4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004af8:	e7e6      	b.n	8004ac8 <_strtol_l.constprop.0+0x8c>
 8004afa:	2f00      	cmp	r7, #0
 8004afc:	da07      	bge.n	8004b0e <_strtol_l.constprop.0+0xd2>
 8004afe:	2322      	movs	r3, #34	; 0x22
 8004b00:	f8c8 3000 	str.w	r3, [r8]
 8004b04:	4670      	mov	r0, lr
 8004b06:	2a00      	cmp	r2, #0
 8004b08:	d0a4      	beq.n	8004a54 <_strtol_l.constprop.0+0x18>
 8004b0a:	1e69      	subs	r1, r5, #1
 8004b0c:	e005      	b.n	8004b1a <_strtol_l.constprop.0+0xde>
 8004b0e:	b106      	cbz	r6, 8004b12 <_strtol_l.constprop.0+0xd6>
 8004b10:	4240      	negs	r0, r0
 8004b12:	2a00      	cmp	r2, #0
 8004b14:	d09e      	beq.n	8004a54 <_strtol_l.constprop.0+0x18>
 8004b16:	2f00      	cmp	r7, #0
 8004b18:	d1f7      	bne.n	8004b0a <_strtol_l.constprop.0+0xce>
 8004b1a:	6011      	str	r1, [r2, #0]
 8004b1c:	e79a      	b.n	8004a54 <_strtol_l.constprop.0+0x18>
 8004b1e:	2430      	movs	r4, #48	; 0x30
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1b5      	bne.n	8004a90 <_strtol_l.constprop.0+0x54>
 8004b24:	2308      	movs	r3, #8
 8004b26:	e7b3      	b.n	8004a90 <_strtol_l.constprop.0+0x54>
 8004b28:	2c30      	cmp	r4, #48	; 0x30
 8004b2a:	d0a9      	beq.n	8004a80 <_strtol_l.constprop.0+0x44>
 8004b2c:	230a      	movs	r3, #10
 8004b2e:	e7af      	b.n	8004a90 <_strtol_l.constprop.0+0x54>
 8004b30:	080090a1 	.word	0x080090a1

08004b34 <_strtol_r>:
 8004b34:	f7ff bf82 	b.w	8004a3c <_strtol_l.constprop.0>

08004b38 <_write_r>:
 8004b38:	b538      	push	{r3, r4, r5, lr}
 8004b3a:	4d07      	ldr	r5, [pc, #28]	; (8004b58 <_write_r+0x20>)
 8004b3c:	4604      	mov	r4, r0
 8004b3e:	4608      	mov	r0, r1
 8004b40:	4611      	mov	r1, r2
 8004b42:	2200      	movs	r2, #0
 8004b44:	602a      	str	r2, [r5, #0]
 8004b46:	461a      	mov	r2, r3
 8004b48:	f003 fb02 	bl	8008150 <_write>
 8004b4c:	1c43      	adds	r3, r0, #1
 8004b4e:	d102      	bne.n	8004b56 <_write_r+0x1e>
 8004b50:	682b      	ldr	r3, [r5, #0]
 8004b52:	b103      	cbz	r3, 8004b56 <_write_r+0x1e>
 8004b54:	6023      	str	r3, [r4, #0]
 8004b56:	bd38      	pop	{r3, r4, r5, pc}
 8004b58:	2000054c 	.word	0x2000054c

08004b5c <_close_r>:
 8004b5c:	b538      	push	{r3, r4, r5, lr}
 8004b5e:	4d06      	ldr	r5, [pc, #24]	; (8004b78 <_close_r+0x1c>)
 8004b60:	2300      	movs	r3, #0
 8004b62:	4604      	mov	r4, r0
 8004b64:	4608      	mov	r0, r1
 8004b66:	602b      	str	r3, [r5, #0]
 8004b68:	f003 faac 	bl	80080c4 <_close>
 8004b6c:	1c43      	adds	r3, r0, #1
 8004b6e:	d102      	bne.n	8004b76 <_close_r+0x1a>
 8004b70:	682b      	ldr	r3, [r5, #0]
 8004b72:	b103      	cbz	r3, 8004b76 <_close_r+0x1a>
 8004b74:	6023      	str	r3, [r4, #0]
 8004b76:	bd38      	pop	{r3, r4, r5, pc}
 8004b78:	2000054c 	.word	0x2000054c

08004b7c <quorem>:
 8004b7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b80:	6903      	ldr	r3, [r0, #16]
 8004b82:	690c      	ldr	r4, [r1, #16]
 8004b84:	42a3      	cmp	r3, r4
 8004b86:	4607      	mov	r7, r0
 8004b88:	db7d      	blt.n	8004c86 <quorem+0x10a>
 8004b8a:	3c01      	subs	r4, #1
 8004b8c:	f101 0814 	add.w	r8, r1, #20
 8004b90:	f100 0514 	add.w	r5, r0, #20
 8004b94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b98:	9301      	str	r3, [sp, #4]
 8004b9a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004baa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004bae:	fbb2 f6f3 	udiv	r6, r2, r3
 8004bb2:	d32e      	bcc.n	8004c12 <quorem+0x96>
 8004bb4:	f04f 0e00 	mov.w	lr, #0
 8004bb8:	4640      	mov	r0, r8
 8004bba:	46ac      	mov	ip, r5
 8004bbc:	46f2      	mov	sl, lr
 8004bbe:	f850 2b04 	ldr.w	r2, [r0], #4
 8004bc2:	b293      	uxth	r3, r2
 8004bc4:	fb06 e303 	mla	r3, r6, r3, lr
 8004bc8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004bcc:	0c12      	lsrs	r2, r2, #16
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	fb06 e202 	mla	r2, r6, r2, lr
 8004bd4:	ebaa 0303 	sub.w	r3, sl, r3
 8004bd8:	f8dc a000 	ldr.w	sl, [ip]
 8004bdc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004be0:	b292      	uxth	r2, r2
 8004be2:	fa13 f38a 	uxtah	r3, r3, sl
 8004be6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004bea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bf4:	4581      	cmp	r9, r0
 8004bf6:	f84c 3b04 	str.w	r3, [ip], #4
 8004bfa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004bfe:	d2de      	bcs.n	8004bbe <quorem+0x42>
 8004c00:	f855 300b 	ldr.w	r3, [r5, fp]
 8004c04:	b92b      	cbnz	r3, 8004c12 <quorem+0x96>
 8004c06:	9b01      	ldr	r3, [sp, #4]
 8004c08:	3b04      	subs	r3, #4
 8004c0a:	429d      	cmp	r5, r3
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	d32e      	bcc.n	8004c6e <quorem+0xf2>
 8004c10:	613c      	str	r4, [r7, #16]
 8004c12:	4638      	mov	r0, r7
 8004c14:	f001 fc9c 	bl	8006550 <__mcmp>
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	db24      	blt.n	8004c66 <quorem+0xea>
 8004c1c:	3601      	adds	r6, #1
 8004c1e:	4628      	mov	r0, r5
 8004c20:	f04f 0c00 	mov.w	ip, #0
 8004c24:	f858 2b04 	ldr.w	r2, [r8], #4
 8004c28:	f8d0 e000 	ldr.w	lr, [r0]
 8004c2c:	b293      	uxth	r3, r2
 8004c2e:	ebac 0303 	sub.w	r3, ip, r3
 8004c32:	0c12      	lsrs	r2, r2, #16
 8004c34:	fa13 f38e 	uxtah	r3, r3, lr
 8004c38:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004c3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c46:	45c1      	cmp	r9, r8
 8004c48:	f840 3b04 	str.w	r3, [r0], #4
 8004c4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c50:	d2e8      	bcs.n	8004c24 <quorem+0xa8>
 8004c52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c5a:	b922      	cbnz	r2, 8004c66 <quorem+0xea>
 8004c5c:	3b04      	subs	r3, #4
 8004c5e:	429d      	cmp	r5, r3
 8004c60:	461a      	mov	r2, r3
 8004c62:	d30a      	bcc.n	8004c7a <quorem+0xfe>
 8004c64:	613c      	str	r4, [r7, #16]
 8004c66:	4630      	mov	r0, r6
 8004c68:	b003      	add	sp, #12
 8004c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c6e:	6812      	ldr	r2, [r2, #0]
 8004c70:	3b04      	subs	r3, #4
 8004c72:	2a00      	cmp	r2, #0
 8004c74:	d1cc      	bne.n	8004c10 <quorem+0x94>
 8004c76:	3c01      	subs	r4, #1
 8004c78:	e7c7      	b.n	8004c0a <quorem+0x8e>
 8004c7a:	6812      	ldr	r2, [r2, #0]
 8004c7c:	3b04      	subs	r3, #4
 8004c7e:	2a00      	cmp	r2, #0
 8004c80:	d1f0      	bne.n	8004c64 <quorem+0xe8>
 8004c82:	3c01      	subs	r4, #1
 8004c84:	e7eb      	b.n	8004c5e <quorem+0xe2>
 8004c86:	2000      	movs	r0, #0
 8004c88:	e7ee      	b.n	8004c68 <quorem+0xec>
 8004c8a:	0000      	movs	r0, r0
 8004c8c:	0000      	movs	r0, r0
	...

08004c90 <_dtoa_r>:
 8004c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c94:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004c96:	b099      	sub	sp, #100	; 0x64
 8004c98:	4616      	mov	r6, r2
 8004c9a:	461f      	mov	r7, r3
 8004c9c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004ca0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004ca4:	4605      	mov	r5, r0
 8004ca6:	b974      	cbnz	r4, 8004cc6 <_dtoa_r+0x36>
 8004ca8:	2010      	movs	r0, #16
 8004caa:	f001 f961 	bl	8005f70 <malloc>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	6268      	str	r0, [r5, #36]	; 0x24
 8004cb2:	b920      	cbnz	r0, 8004cbe <_dtoa_r+0x2e>
 8004cb4:	4ba8      	ldr	r3, [pc, #672]	; (8004f58 <_dtoa_r+0x2c8>)
 8004cb6:	21ea      	movs	r1, #234	; 0xea
 8004cb8:	48a8      	ldr	r0, [pc, #672]	; (8004f5c <_dtoa_r+0x2cc>)
 8004cba:	f002 fcd7 	bl	800766c <__assert_func>
 8004cbe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004cc2:	6004      	str	r4, [r0, #0]
 8004cc4:	60c4      	str	r4, [r0, #12]
 8004cc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004cc8:	6819      	ldr	r1, [r3, #0]
 8004cca:	b151      	cbz	r1, 8004ce2 <_dtoa_r+0x52>
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	604a      	str	r2, [r1, #4]
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	4093      	lsls	r3, r2
 8004cd4:	608b      	str	r3, [r1, #8]
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	f001 f9b2 	bl	8006040 <_Bfree>
 8004cdc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	1e3b      	subs	r3, r7, #0
 8004ce4:	bfb9      	ittee	lt
 8004ce6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004cea:	9305      	strlt	r3, [sp, #20]
 8004cec:	2300      	movge	r3, #0
 8004cee:	f8c8 3000 	strge.w	r3, [r8]
 8004cf2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004cf6:	4b9a      	ldr	r3, [pc, #616]	; (8004f60 <_dtoa_r+0x2d0>)
 8004cf8:	bfbc      	itt	lt
 8004cfa:	2201      	movlt	r2, #1
 8004cfc:	f8c8 2000 	strlt.w	r2, [r8]
 8004d00:	ea33 0309 	bics.w	r3, r3, r9
 8004d04:	d119      	bne.n	8004d3a <_dtoa_r+0xaa>
 8004d06:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d08:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d12:	4333      	orrs	r3, r6
 8004d14:	f000 8580 	beq.w	8005818 <_dtoa_r+0xb88>
 8004d18:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d1a:	b953      	cbnz	r3, 8004d32 <_dtoa_r+0xa2>
 8004d1c:	4b91      	ldr	r3, [pc, #580]	; (8004f64 <_dtoa_r+0x2d4>)
 8004d1e:	e022      	b.n	8004d66 <_dtoa_r+0xd6>
 8004d20:	4b91      	ldr	r3, [pc, #580]	; (8004f68 <_dtoa_r+0x2d8>)
 8004d22:	9303      	str	r3, [sp, #12]
 8004d24:	3308      	adds	r3, #8
 8004d26:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	9803      	ldr	r0, [sp, #12]
 8004d2c:	b019      	add	sp, #100	; 0x64
 8004d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d32:	4b8c      	ldr	r3, [pc, #560]	; (8004f64 <_dtoa_r+0x2d4>)
 8004d34:	9303      	str	r3, [sp, #12]
 8004d36:	3303      	adds	r3, #3
 8004d38:	e7f5      	b.n	8004d26 <_dtoa_r+0x96>
 8004d3a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004d3e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004d42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d46:	2200      	movs	r2, #0
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f7fb fed5 	bl	8000af8 <__aeabi_dcmpeq>
 8004d4e:	4680      	mov	r8, r0
 8004d50:	b158      	cbz	r0, 8004d6a <_dtoa_r+0xda>
 8004d52:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d54:	2301      	movs	r3, #1
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 8559 	beq.w	8005812 <_dtoa_r+0xb82>
 8004d60:	4882      	ldr	r0, [pc, #520]	; (8004f6c <_dtoa_r+0x2dc>)
 8004d62:	6018      	str	r0, [r3, #0]
 8004d64:	1e43      	subs	r3, r0, #1
 8004d66:	9303      	str	r3, [sp, #12]
 8004d68:	e7df      	b.n	8004d2a <_dtoa_r+0x9a>
 8004d6a:	ab16      	add	r3, sp, #88	; 0x58
 8004d6c:	9301      	str	r3, [sp, #4]
 8004d6e:	ab17      	add	r3, sp, #92	; 0x5c
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	4628      	mov	r0, r5
 8004d74:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004d78:	f001 fd08 	bl	800678c <__d2b>
 8004d7c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004d80:	4683      	mov	fp, r0
 8004d82:	2c00      	cmp	r4, #0
 8004d84:	d07e      	beq.n	8004e84 <_dtoa_r+0x1f4>
 8004d86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d88:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d94:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004d98:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004d9c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004da0:	4b73      	ldr	r3, [pc, #460]	; (8004f70 <_dtoa_r+0x2e0>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	f7fb fa88 	bl	80002b8 <__aeabi_dsub>
 8004da8:	a365      	add	r3, pc, #404	; (adr r3, 8004f40 <_dtoa_r+0x2b0>)
 8004daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dae:	f7fb fc3b 	bl	8000628 <__aeabi_dmul>
 8004db2:	a365      	add	r3, pc, #404	; (adr r3, 8004f48 <_dtoa_r+0x2b8>)
 8004db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db8:	f7fb fa80 	bl	80002bc <__adddf3>
 8004dbc:	4606      	mov	r6, r0
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	460f      	mov	r7, r1
 8004dc2:	f7fb fbc7 	bl	8000554 <__aeabi_i2d>
 8004dc6:	a362      	add	r3, pc, #392	; (adr r3, 8004f50 <_dtoa_r+0x2c0>)
 8004dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dcc:	f7fb fc2c 	bl	8000628 <__aeabi_dmul>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4630      	mov	r0, r6
 8004dd6:	4639      	mov	r1, r7
 8004dd8:	f7fb fa70 	bl	80002bc <__adddf3>
 8004ddc:	4606      	mov	r6, r0
 8004dde:	460f      	mov	r7, r1
 8004de0:	f7fb fed2 	bl	8000b88 <__aeabi_d2iz>
 8004de4:	2200      	movs	r2, #0
 8004de6:	4682      	mov	sl, r0
 8004de8:	2300      	movs	r3, #0
 8004dea:	4630      	mov	r0, r6
 8004dec:	4639      	mov	r1, r7
 8004dee:	f7fb fe8d 	bl	8000b0c <__aeabi_dcmplt>
 8004df2:	b148      	cbz	r0, 8004e08 <_dtoa_r+0x178>
 8004df4:	4650      	mov	r0, sl
 8004df6:	f7fb fbad 	bl	8000554 <__aeabi_i2d>
 8004dfa:	4632      	mov	r2, r6
 8004dfc:	463b      	mov	r3, r7
 8004dfe:	f7fb fe7b 	bl	8000af8 <__aeabi_dcmpeq>
 8004e02:	b908      	cbnz	r0, 8004e08 <_dtoa_r+0x178>
 8004e04:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004e08:	f1ba 0f16 	cmp.w	sl, #22
 8004e0c:	d857      	bhi.n	8004ebe <_dtoa_r+0x22e>
 8004e0e:	4b59      	ldr	r3, [pc, #356]	; (8004f74 <_dtoa_r+0x2e4>)
 8004e10:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e1c:	f7fb fe76 	bl	8000b0c <__aeabi_dcmplt>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	d04e      	beq.n	8004ec2 <_dtoa_r+0x232>
 8004e24:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004e28:	2300      	movs	r3, #0
 8004e2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004e2e:	1b1c      	subs	r4, r3, r4
 8004e30:	1e63      	subs	r3, r4, #1
 8004e32:	9309      	str	r3, [sp, #36]	; 0x24
 8004e34:	bf45      	ittet	mi
 8004e36:	f1c4 0301 	rsbmi	r3, r4, #1
 8004e3a:	9306      	strmi	r3, [sp, #24]
 8004e3c:	2300      	movpl	r3, #0
 8004e3e:	2300      	movmi	r3, #0
 8004e40:	bf4c      	ite	mi
 8004e42:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004e44:	9306      	strpl	r3, [sp, #24]
 8004e46:	f1ba 0f00 	cmp.w	sl, #0
 8004e4a:	db3c      	blt.n	8004ec6 <_dtoa_r+0x236>
 8004e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e4e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004e52:	4453      	add	r3, sl
 8004e54:	9309      	str	r3, [sp, #36]	; 0x24
 8004e56:	2300      	movs	r3, #0
 8004e58:	930a      	str	r3, [sp, #40]	; 0x28
 8004e5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e5c:	2b09      	cmp	r3, #9
 8004e5e:	f200 808d 	bhi.w	8004f7c <_dtoa_r+0x2ec>
 8004e62:	2b05      	cmp	r3, #5
 8004e64:	bfc4      	itt	gt
 8004e66:	3b04      	subgt	r3, #4
 8004e68:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004e6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e6c:	f1a3 0302 	sub.w	r3, r3, #2
 8004e70:	bfcc      	ite	gt
 8004e72:	2400      	movgt	r4, #0
 8004e74:	2401      	movle	r4, #1
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	f200 808c 	bhi.w	8004f94 <_dtoa_r+0x304>
 8004e7c:	e8df f003 	tbb	[pc, r3]
 8004e80:	5b4d4f2d 	.word	0x5b4d4f2d
 8004e84:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004e88:	441c      	add	r4, r3
 8004e8a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004e8e:	2b20      	cmp	r3, #32
 8004e90:	bfc3      	ittte	gt
 8004e92:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004e96:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004e9a:	fa09 f303 	lslgt.w	r3, r9, r3
 8004e9e:	f1c3 0320 	rsble	r3, r3, #32
 8004ea2:	bfc6      	itte	gt
 8004ea4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004ea8:	4318      	orrgt	r0, r3
 8004eaa:	fa06 f003 	lslle.w	r0, r6, r3
 8004eae:	f7fb fb41 	bl	8000534 <__aeabi_ui2d>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004eb8:	3c01      	subs	r4, #1
 8004eba:	9313      	str	r3, [sp, #76]	; 0x4c
 8004ebc:	e770      	b.n	8004da0 <_dtoa_r+0x110>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e7b3      	b.n	8004e2a <_dtoa_r+0x19a>
 8004ec2:	900f      	str	r0, [sp, #60]	; 0x3c
 8004ec4:	e7b2      	b.n	8004e2c <_dtoa_r+0x19c>
 8004ec6:	9b06      	ldr	r3, [sp, #24]
 8004ec8:	eba3 030a 	sub.w	r3, r3, sl
 8004ecc:	9306      	str	r3, [sp, #24]
 8004ece:	f1ca 0300 	rsb	r3, sl, #0
 8004ed2:	930a      	str	r3, [sp, #40]	; 0x28
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	930e      	str	r3, [sp, #56]	; 0x38
 8004ed8:	e7bf      	b.n	8004e5a <_dtoa_r+0x1ca>
 8004eda:	2300      	movs	r3, #0
 8004edc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ede:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	dc5a      	bgt.n	8004f9a <_dtoa_r+0x30a>
 8004ee4:	f04f 0901 	mov.w	r9, #1
 8004ee8:	f8cd 9020 	str.w	r9, [sp, #32]
 8004eec:	464b      	mov	r3, r9
 8004eee:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004ef2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	6042      	str	r2, [r0, #4]
 8004ef8:	2204      	movs	r2, #4
 8004efa:	f102 0614 	add.w	r6, r2, #20
 8004efe:	429e      	cmp	r6, r3
 8004f00:	6841      	ldr	r1, [r0, #4]
 8004f02:	d950      	bls.n	8004fa6 <_dtoa_r+0x316>
 8004f04:	4628      	mov	r0, r5
 8004f06:	f001 f85b 	bl	8005fc0 <_Balloc>
 8004f0a:	9003      	str	r0, [sp, #12]
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	d14e      	bne.n	8004fae <_dtoa_r+0x31e>
 8004f10:	4b19      	ldr	r3, [pc, #100]	; (8004f78 <_dtoa_r+0x2e8>)
 8004f12:	4602      	mov	r2, r0
 8004f14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004f18:	e6ce      	b.n	8004cb8 <_dtoa_r+0x28>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e7de      	b.n	8004edc <_dtoa_r+0x24c>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f24:	eb0a 0903 	add.w	r9, sl, r3
 8004f28:	f109 0301 	add.w	r3, r9, #1
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	9308      	str	r3, [sp, #32]
 8004f30:	bfb8      	it	lt
 8004f32:	2301      	movlt	r3, #1
 8004f34:	e7dd      	b.n	8004ef2 <_dtoa_r+0x262>
 8004f36:	2301      	movs	r3, #1
 8004f38:	e7f2      	b.n	8004f20 <_dtoa_r+0x290>
 8004f3a:	bf00      	nop
 8004f3c:	f3af 8000 	nop.w
 8004f40:	636f4361 	.word	0x636f4361
 8004f44:	3fd287a7 	.word	0x3fd287a7
 8004f48:	8b60c8b3 	.word	0x8b60c8b3
 8004f4c:	3fc68a28 	.word	0x3fc68a28
 8004f50:	509f79fb 	.word	0x509f79fb
 8004f54:	3fd34413 	.word	0x3fd34413
 8004f58:	080091ae 	.word	0x080091ae
 8004f5c:	080091c5 	.word	0x080091c5
 8004f60:	7ff00000 	.word	0x7ff00000
 8004f64:	080091aa 	.word	0x080091aa
 8004f68:	080091a1 	.word	0x080091a1
 8004f6c:	0800941a 	.word	0x0800941a
 8004f70:	3ff80000 	.word	0x3ff80000
 8004f74:	08009330 	.word	0x08009330
 8004f78:	08009220 	.word	0x08009220
 8004f7c:	2401      	movs	r4, #1
 8004f7e:	2300      	movs	r3, #0
 8004f80:	9322      	str	r3, [sp, #136]	; 0x88
 8004f82:	940b      	str	r4, [sp, #44]	; 0x2c
 8004f84:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f8cd 9020 	str.w	r9, [sp, #32]
 8004f8e:	2312      	movs	r3, #18
 8004f90:	9223      	str	r2, [sp, #140]	; 0x8c
 8004f92:	e7ae      	b.n	8004ef2 <_dtoa_r+0x262>
 8004f94:	2301      	movs	r3, #1
 8004f96:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f98:	e7f4      	b.n	8004f84 <_dtoa_r+0x2f4>
 8004f9a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004f9e:	f8cd 9020 	str.w	r9, [sp, #32]
 8004fa2:	464b      	mov	r3, r9
 8004fa4:	e7a5      	b.n	8004ef2 <_dtoa_r+0x262>
 8004fa6:	3101      	adds	r1, #1
 8004fa8:	6041      	str	r1, [r0, #4]
 8004faa:	0052      	lsls	r2, r2, #1
 8004fac:	e7a5      	b.n	8004efa <_dtoa_r+0x26a>
 8004fae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004fb0:	9a03      	ldr	r2, [sp, #12]
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	9b08      	ldr	r3, [sp, #32]
 8004fb6:	2b0e      	cmp	r3, #14
 8004fb8:	f200 80a8 	bhi.w	800510c <_dtoa_r+0x47c>
 8004fbc:	2c00      	cmp	r4, #0
 8004fbe:	f000 80a5 	beq.w	800510c <_dtoa_r+0x47c>
 8004fc2:	f1ba 0f00 	cmp.w	sl, #0
 8004fc6:	dd34      	ble.n	8005032 <_dtoa_r+0x3a2>
 8004fc8:	4a9a      	ldr	r2, [pc, #616]	; (8005234 <_dtoa_r+0x5a4>)
 8004fca:	f00a 030f 	and.w	r3, sl, #15
 8004fce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004fd2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fd6:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004fda:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004fde:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004fe2:	d016      	beq.n	8005012 <_dtoa_r+0x382>
 8004fe4:	4b94      	ldr	r3, [pc, #592]	; (8005238 <_dtoa_r+0x5a8>)
 8004fe6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fee:	f7fb fc45 	bl	800087c <__aeabi_ddiv>
 8004ff2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ff6:	f004 040f 	and.w	r4, r4, #15
 8004ffa:	2703      	movs	r7, #3
 8004ffc:	4e8e      	ldr	r6, [pc, #568]	; (8005238 <_dtoa_r+0x5a8>)
 8004ffe:	b954      	cbnz	r4, 8005016 <_dtoa_r+0x386>
 8005000:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005004:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005008:	f7fb fc38 	bl	800087c <__aeabi_ddiv>
 800500c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005010:	e029      	b.n	8005066 <_dtoa_r+0x3d6>
 8005012:	2702      	movs	r7, #2
 8005014:	e7f2      	b.n	8004ffc <_dtoa_r+0x36c>
 8005016:	07e1      	lsls	r1, r4, #31
 8005018:	d508      	bpl.n	800502c <_dtoa_r+0x39c>
 800501a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800501e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005022:	f7fb fb01 	bl	8000628 <__aeabi_dmul>
 8005026:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800502a:	3701      	adds	r7, #1
 800502c:	1064      	asrs	r4, r4, #1
 800502e:	3608      	adds	r6, #8
 8005030:	e7e5      	b.n	8004ffe <_dtoa_r+0x36e>
 8005032:	f000 80a5 	beq.w	8005180 <_dtoa_r+0x4f0>
 8005036:	f1ca 0400 	rsb	r4, sl, #0
 800503a:	4b7e      	ldr	r3, [pc, #504]	; (8005234 <_dtoa_r+0x5a4>)
 800503c:	4e7e      	ldr	r6, [pc, #504]	; (8005238 <_dtoa_r+0x5a8>)
 800503e:	f004 020f 	and.w	r2, r4, #15
 8005042:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800504e:	f7fb faeb 	bl	8000628 <__aeabi_dmul>
 8005052:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005056:	1124      	asrs	r4, r4, #4
 8005058:	2300      	movs	r3, #0
 800505a:	2702      	movs	r7, #2
 800505c:	2c00      	cmp	r4, #0
 800505e:	f040 8084 	bne.w	800516a <_dtoa_r+0x4da>
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1d2      	bne.n	800500c <_dtoa_r+0x37c>
 8005066:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 808b 	beq.w	8005184 <_dtoa_r+0x4f4>
 800506e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005072:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005076:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800507a:	4b70      	ldr	r3, [pc, #448]	; (800523c <_dtoa_r+0x5ac>)
 800507c:	2200      	movs	r2, #0
 800507e:	f7fb fd45 	bl	8000b0c <__aeabi_dcmplt>
 8005082:	2800      	cmp	r0, #0
 8005084:	d07e      	beq.n	8005184 <_dtoa_r+0x4f4>
 8005086:	9b08      	ldr	r3, [sp, #32]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d07b      	beq.n	8005184 <_dtoa_r+0x4f4>
 800508c:	f1b9 0f00 	cmp.w	r9, #0
 8005090:	dd38      	ble.n	8005104 <_dtoa_r+0x474>
 8005092:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005096:	4b6a      	ldr	r3, [pc, #424]	; (8005240 <_dtoa_r+0x5b0>)
 8005098:	2200      	movs	r2, #0
 800509a:	f7fb fac5 	bl	8000628 <__aeabi_dmul>
 800509e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050a2:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 80050a6:	3701      	adds	r7, #1
 80050a8:	464c      	mov	r4, r9
 80050aa:	4638      	mov	r0, r7
 80050ac:	f7fb fa52 	bl	8000554 <__aeabi_i2d>
 80050b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050b4:	f7fb fab8 	bl	8000628 <__aeabi_dmul>
 80050b8:	4b62      	ldr	r3, [pc, #392]	; (8005244 <_dtoa_r+0x5b4>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	f7fb f8fe 	bl	80002bc <__adddf3>
 80050c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80050c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050c8:	9611      	str	r6, [sp, #68]	; 0x44
 80050ca:	2c00      	cmp	r4, #0
 80050cc:	d15d      	bne.n	800518a <_dtoa_r+0x4fa>
 80050ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050d2:	4b5d      	ldr	r3, [pc, #372]	; (8005248 <_dtoa_r+0x5b8>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	f7fb f8ef 	bl	80002b8 <__aeabi_dsub>
 80050da:	4602      	mov	r2, r0
 80050dc:	460b      	mov	r3, r1
 80050de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050e4:	4633      	mov	r3, r6
 80050e6:	f7fb fd2f 	bl	8000b48 <__aeabi_dcmpgt>
 80050ea:	2800      	cmp	r0, #0
 80050ec:	f040 829c 	bne.w	8005628 <_dtoa_r+0x998>
 80050f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050f6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80050fa:	f7fb fd07 	bl	8000b0c <__aeabi_dcmplt>
 80050fe:	2800      	cmp	r0, #0
 8005100:	f040 8290 	bne.w	8005624 <_dtoa_r+0x994>
 8005104:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005108:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800510c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800510e:	2b00      	cmp	r3, #0
 8005110:	f2c0 8152 	blt.w	80053b8 <_dtoa_r+0x728>
 8005114:	f1ba 0f0e 	cmp.w	sl, #14
 8005118:	f300 814e 	bgt.w	80053b8 <_dtoa_r+0x728>
 800511c:	4b45      	ldr	r3, [pc, #276]	; (8005234 <_dtoa_r+0x5a4>)
 800511e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005122:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005126:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800512a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800512c:	2b00      	cmp	r3, #0
 800512e:	f280 80db 	bge.w	80052e8 <_dtoa_r+0x658>
 8005132:	9b08      	ldr	r3, [sp, #32]
 8005134:	2b00      	cmp	r3, #0
 8005136:	f300 80d7 	bgt.w	80052e8 <_dtoa_r+0x658>
 800513a:	f040 8272 	bne.w	8005622 <_dtoa_r+0x992>
 800513e:	4b42      	ldr	r3, [pc, #264]	; (8005248 <_dtoa_r+0x5b8>)
 8005140:	2200      	movs	r2, #0
 8005142:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005146:	f7fb fa6f 	bl	8000628 <__aeabi_dmul>
 800514a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800514e:	f7fb fcf1 	bl	8000b34 <__aeabi_dcmpge>
 8005152:	9c08      	ldr	r4, [sp, #32]
 8005154:	4626      	mov	r6, r4
 8005156:	2800      	cmp	r0, #0
 8005158:	f040 8248 	bne.w	80055ec <_dtoa_r+0x95c>
 800515c:	9f03      	ldr	r7, [sp, #12]
 800515e:	2331      	movs	r3, #49	; 0x31
 8005160:	f807 3b01 	strb.w	r3, [r7], #1
 8005164:	f10a 0a01 	add.w	sl, sl, #1
 8005168:	e244      	b.n	80055f4 <_dtoa_r+0x964>
 800516a:	07e2      	lsls	r2, r4, #31
 800516c:	d505      	bpl.n	800517a <_dtoa_r+0x4ea>
 800516e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005172:	f7fb fa59 	bl	8000628 <__aeabi_dmul>
 8005176:	3701      	adds	r7, #1
 8005178:	2301      	movs	r3, #1
 800517a:	1064      	asrs	r4, r4, #1
 800517c:	3608      	adds	r6, #8
 800517e:	e76d      	b.n	800505c <_dtoa_r+0x3cc>
 8005180:	2702      	movs	r7, #2
 8005182:	e770      	b.n	8005066 <_dtoa_r+0x3d6>
 8005184:	9c08      	ldr	r4, [sp, #32]
 8005186:	46d0      	mov	r8, sl
 8005188:	e78f      	b.n	80050aa <_dtoa_r+0x41a>
 800518a:	9903      	ldr	r1, [sp, #12]
 800518c:	4b29      	ldr	r3, [pc, #164]	; (8005234 <_dtoa_r+0x5a4>)
 800518e:	4421      	add	r1, r4
 8005190:	9112      	str	r1, [sp, #72]	; 0x48
 8005192:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005194:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005198:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800519c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80051a0:	2900      	cmp	r1, #0
 80051a2:	d055      	beq.n	8005250 <_dtoa_r+0x5c0>
 80051a4:	4929      	ldr	r1, [pc, #164]	; (800524c <_dtoa_r+0x5bc>)
 80051a6:	2000      	movs	r0, #0
 80051a8:	f7fb fb68 	bl	800087c <__aeabi_ddiv>
 80051ac:	463b      	mov	r3, r7
 80051ae:	4632      	mov	r2, r6
 80051b0:	f7fb f882 	bl	80002b8 <__aeabi_dsub>
 80051b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051b8:	9f03      	ldr	r7, [sp, #12]
 80051ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051be:	f7fb fce3 	bl	8000b88 <__aeabi_d2iz>
 80051c2:	4604      	mov	r4, r0
 80051c4:	f7fb f9c6 	bl	8000554 <__aeabi_i2d>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051d0:	f7fb f872 	bl	80002b8 <__aeabi_dsub>
 80051d4:	3430      	adds	r4, #48	; 0x30
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80051de:	f807 4b01 	strb.w	r4, [r7], #1
 80051e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051e6:	f7fb fc91 	bl	8000b0c <__aeabi_dcmplt>
 80051ea:	2800      	cmp	r0, #0
 80051ec:	d174      	bne.n	80052d8 <_dtoa_r+0x648>
 80051ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051f2:	4912      	ldr	r1, [pc, #72]	; (800523c <_dtoa_r+0x5ac>)
 80051f4:	2000      	movs	r0, #0
 80051f6:	f7fb f85f 	bl	80002b8 <__aeabi_dsub>
 80051fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051fe:	f7fb fc85 	bl	8000b0c <__aeabi_dcmplt>
 8005202:	2800      	cmp	r0, #0
 8005204:	f040 80b7 	bne.w	8005376 <_dtoa_r+0x6e6>
 8005208:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800520a:	429f      	cmp	r7, r3
 800520c:	f43f af7a 	beq.w	8005104 <_dtoa_r+0x474>
 8005210:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005214:	4b0a      	ldr	r3, [pc, #40]	; (8005240 <_dtoa_r+0x5b0>)
 8005216:	2200      	movs	r2, #0
 8005218:	f7fb fa06 	bl	8000628 <__aeabi_dmul>
 800521c:	4b08      	ldr	r3, [pc, #32]	; (8005240 <_dtoa_r+0x5b0>)
 800521e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005222:	2200      	movs	r2, #0
 8005224:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005228:	f7fb f9fe 	bl	8000628 <__aeabi_dmul>
 800522c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005230:	e7c3      	b.n	80051ba <_dtoa_r+0x52a>
 8005232:	bf00      	nop
 8005234:	08009330 	.word	0x08009330
 8005238:	08009308 	.word	0x08009308
 800523c:	3ff00000 	.word	0x3ff00000
 8005240:	40240000 	.word	0x40240000
 8005244:	401c0000 	.word	0x401c0000
 8005248:	40140000 	.word	0x40140000
 800524c:	3fe00000 	.word	0x3fe00000
 8005250:	4630      	mov	r0, r6
 8005252:	4639      	mov	r1, r7
 8005254:	f7fb f9e8 	bl	8000628 <__aeabi_dmul>
 8005258:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800525c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800525e:	9c03      	ldr	r4, [sp, #12]
 8005260:	9314      	str	r3, [sp, #80]	; 0x50
 8005262:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005266:	f7fb fc8f 	bl	8000b88 <__aeabi_d2iz>
 800526a:	9015      	str	r0, [sp, #84]	; 0x54
 800526c:	f7fb f972 	bl	8000554 <__aeabi_i2d>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005278:	f7fb f81e 	bl	80002b8 <__aeabi_dsub>
 800527c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800527e:	3330      	adds	r3, #48	; 0x30
 8005280:	f804 3b01 	strb.w	r3, [r4], #1
 8005284:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005286:	429c      	cmp	r4, r3
 8005288:	4606      	mov	r6, r0
 800528a:	460f      	mov	r7, r1
 800528c:	f04f 0200 	mov.w	r2, #0
 8005290:	d124      	bne.n	80052dc <_dtoa_r+0x64c>
 8005292:	4ba4      	ldr	r3, [pc, #656]	; (8005524 <_dtoa_r+0x894>)
 8005294:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005298:	f7fb f810 	bl	80002bc <__adddf3>
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	4630      	mov	r0, r6
 80052a2:	4639      	mov	r1, r7
 80052a4:	f7fb fc50 	bl	8000b48 <__aeabi_dcmpgt>
 80052a8:	2800      	cmp	r0, #0
 80052aa:	d163      	bne.n	8005374 <_dtoa_r+0x6e4>
 80052ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80052b0:	499c      	ldr	r1, [pc, #624]	; (8005524 <_dtoa_r+0x894>)
 80052b2:	2000      	movs	r0, #0
 80052b4:	f7fb f800 	bl	80002b8 <__aeabi_dsub>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4630      	mov	r0, r6
 80052be:	4639      	mov	r1, r7
 80052c0:	f7fb fc24 	bl	8000b0c <__aeabi_dcmplt>
 80052c4:	2800      	cmp	r0, #0
 80052c6:	f43f af1d 	beq.w	8005104 <_dtoa_r+0x474>
 80052ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80052cc:	1e7b      	subs	r3, r7, #1
 80052ce:	9314      	str	r3, [sp, #80]	; 0x50
 80052d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80052d4:	2b30      	cmp	r3, #48	; 0x30
 80052d6:	d0f8      	beq.n	80052ca <_dtoa_r+0x63a>
 80052d8:	46c2      	mov	sl, r8
 80052da:	e03b      	b.n	8005354 <_dtoa_r+0x6c4>
 80052dc:	4b92      	ldr	r3, [pc, #584]	; (8005528 <_dtoa_r+0x898>)
 80052de:	f7fb f9a3 	bl	8000628 <__aeabi_dmul>
 80052e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052e6:	e7bc      	b.n	8005262 <_dtoa_r+0x5d2>
 80052e8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80052ec:	9f03      	ldr	r7, [sp, #12]
 80052ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052f2:	4640      	mov	r0, r8
 80052f4:	4649      	mov	r1, r9
 80052f6:	f7fb fac1 	bl	800087c <__aeabi_ddiv>
 80052fa:	f7fb fc45 	bl	8000b88 <__aeabi_d2iz>
 80052fe:	4604      	mov	r4, r0
 8005300:	f7fb f928 	bl	8000554 <__aeabi_i2d>
 8005304:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005308:	f7fb f98e 	bl	8000628 <__aeabi_dmul>
 800530c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005310:	4602      	mov	r2, r0
 8005312:	460b      	mov	r3, r1
 8005314:	4640      	mov	r0, r8
 8005316:	4649      	mov	r1, r9
 8005318:	f7fa ffce 	bl	80002b8 <__aeabi_dsub>
 800531c:	f807 6b01 	strb.w	r6, [r7], #1
 8005320:	9e03      	ldr	r6, [sp, #12]
 8005322:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005326:	1bbe      	subs	r6, r7, r6
 8005328:	45b4      	cmp	ip, r6
 800532a:	4602      	mov	r2, r0
 800532c:	460b      	mov	r3, r1
 800532e:	d136      	bne.n	800539e <_dtoa_r+0x70e>
 8005330:	f7fa ffc4 	bl	80002bc <__adddf3>
 8005334:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005338:	4680      	mov	r8, r0
 800533a:	4689      	mov	r9, r1
 800533c:	f7fb fc04 	bl	8000b48 <__aeabi_dcmpgt>
 8005340:	bb58      	cbnz	r0, 800539a <_dtoa_r+0x70a>
 8005342:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005346:	4640      	mov	r0, r8
 8005348:	4649      	mov	r1, r9
 800534a:	f7fb fbd5 	bl	8000af8 <__aeabi_dcmpeq>
 800534e:	b108      	cbz	r0, 8005354 <_dtoa_r+0x6c4>
 8005350:	07e1      	lsls	r1, r4, #31
 8005352:	d422      	bmi.n	800539a <_dtoa_r+0x70a>
 8005354:	4628      	mov	r0, r5
 8005356:	4659      	mov	r1, fp
 8005358:	f000 fe72 	bl	8006040 <_Bfree>
 800535c:	2300      	movs	r3, #0
 800535e:	703b      	strb	r3, [r7, #0]
 8005360:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005362:	f10a 0001 	add.w	r0, sl, #1
 8005366:	6018      	str	r0, [r3, #0]
 8005368:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800536a:	2b00      	cmp	r3, #0
 800536c:	f43f acdd 	beq.w	8004d2a <_dtoa_r+0x9a>
 8005370:	601f      	str	r7, [r3, #0]
 8005372:	e4da      	b.n	8004d2a <_dtoa_r+0x9a>
 8005374:	4627      	mov	r7, r4
 8005376:	463b      	mov	r3, r7
 8005378:	461f      	mov	r7, r3
 800537a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800537e:	2a39      	cmp	r2, #57	; 0x39
 8005380:	d107      	bne.n	8005392 <_dtoa_r+0x702>
 8005382:	9a03      	ldr	r2, [sp, #12]
 8005384:	429a      	cmp	r2, r3
 8005386:	d1f7      	bne.n	8005378 <_dtoa_r+0x6e8>
 8005388:	9903      	ldr	r1, [sp, #12]
 800538a:	2230      	movs	r2, #48	; 0x30
 800538c:	f108 0801 	add.w	r8, r8, #1
 8005390:	700a      	strb	r2, [r1, #0]
 8005392:	781a      	ldrb	r2, [r3, #0]
 8005394:	3201      	adds	r2, #1
 8005396:	701a      	strb	r2, [r3, #0]
 8005398:	e79e      	b.n	80052d8 <_dtoa_r+0x648>
 800539a:	46d0      	mov	r8, sl
 800539c:	e7eb      	b.n	8005376 <_dtoa_r+0x6e6>
 800539e:	4b62      	ldr	r3, [pc, #392]	; (8005528 <_dtoa_r+0x898>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	f7fb f941 	bl	8000628 <__aeabi_dmul>
 80053a6:	2200      	movs	r2, #0
 80053a8:	2300      	movs	r3, #0
 80053aa:	4680      	mov	r8, r0
 80053ac:	4689      	mov	r9, r1
 80053ae:	f7fb fba3 	bl	8000af8 <__aeabi_dcmpeq>
 80053b2:	2800      	cmp	r0, #0
 80053b4:	d09b      	beq.n	80052ee <_dtoa_r+0x65e>
 80053b6:	e7cd      	b.n	8005354 <_dtoa_r+0x6c4>
 80053b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80053ba:	2a00      	cmp	r2, #0
 80053bc:	f000 80d0 	beq.w	8005560 <_dtoa_r+0x8d0>
 80053c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80053c2:	2a01      	cmp	r2, #1
 80053c4:	f300 80b2 	bgt.w	800552c <_dtoa_r+0x89c>
 80053c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80053ca:	2a00      	cmp	r2, #0
 80053cc:	f000 80a6 	beq.w	800551c <_dtoa_r+0x88c>
 80053d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80053d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80053d6:	9f06      	ldr	r7, [sp, #24]
 80053d8:	9a06      	ldr	r2, [sp, #24]
 80053da:	441a      	add	r2, r3
 80053dc:	9206      	str	r2, [sp, #24]
 80053de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053e0:	2101      	movs	r1, #1
 80053e2:	441a      	add	r2, r3
 80053e4:	4628      	mov	r0, r5
 80053e6:	9209      	str	r2, [sp, #36]	; 0x24
 80053e8:	f000 ff2a 	bl	8006240 <__i2b>
 80053ec:	4606      	mov	r6, r0
 80053ee:	2f00      	cmp	r7, #0
 80053f0:	dd0c      	ble.n	800540c <_dtoa_r+0x77c>
 80053f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	dd09      	ble.n	800540c <_dtoa_r+0x77c>
 80053f8:	42bb      	cmp	r3, r7
 80053fa:	9a06      	ldr	r2, [sp, #24]
 80053fc:	bfa8      	it	ge
 80053fe:	463b      	movge	r3, r7
 8005400:	1ad2      	subs	r2, r2, r3
 8005402:	9206      	str	r2, [sp, #24]
 8005404:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005406:	1aff      	subs	r7, r7, r3
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	9309      	str	r3, [sp, #36]	; 0x24
 800540c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800540e:	b1f3      	cbz	r3, 800544e <_dtoa_r+0x7be>
 8005410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 80a8 	beq.w	8005568 <_dtoa_r+0x8d8>
 8005418:	2c00      	cmp	r4, #0
 800541a:	dd10      	ble.n	800543e <_dtoa_r+0x7ae>
 800541c:	4631      	mov	r1, r6
 800541e:	4622      	mov	r2, r4
 8005420:	4628      	mov	r0, r5
 8005422:	f000 ffcb 	bl	80063bc <__pow5mult>
 8005426:	465a      	mov	r2, fp
 8005428:	4601      	mov	r1, r0
 800542a:	4606      	mov	r6, r0
 800542c:	4628      	mov	r0, r5
 800542e:	f000 ff1d 	bl	800626c <__multiply>
 8005432:	4659      	mov	r1, fp
 8005434:	4680      	mov	r8, r0
 8005436:	4628      	mov	r0, r5
 8005438:	f000 fe02 	bl	8006040 <_Bfree>
 800543c:	46c3      	mov	fp, r8
 800543e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005440:	1b1a      	subs	r2, r3, r4
 8005442:	d004      	beq.n	800544e <_dtoa_r+0x7be>
 8005444:	4659      	mov	r1, fp
 8005446:	4628      	mov	r0, r5
 8005448:	f000 ffb8 	bl	80063bc <__pow5mult>
 800544c:	4683      	mov	fp, r0
 800544e:	2101      	movs	r1, #1
 8005450:	4628      	mov	r0, r5
 8005452:	f000 fef5 	bl	8006240 <__i2b>
 8005456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005458:	2b00      	cmp	r3, #0
 800545a:	4604      	mov	r4, r0
 800545c:	f340 8086 	ble.w	800556c <_dtoa_r+0x8dc>
 8005460:	461a      	mov	r2, r3
 8005462:	4601      	mov	r1, r0
 8005464:	4628      	mov	r0, r5
 8005466:	f000 ffa9 	bl	80063bc <__pow5mult>
 800546a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800546c:	2b01      	cmp	r3, #1
 800546e:	4604      	mov	r4, r0
 8005470:	dd7f      	ble.n	8005572 <_dtoa_r+0x8e2>
 8005472:	f04f 0800 	mov.w	r8, #0
 8005476:	6923      	ldr	r3, [r4, #16]
 8005478:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800547c:	6918      	ldr	r0, [r3, #16]
 800547e:	f000 fe91 	bl	80061a4 <__hi0bits>
 8005482:	f1c0 0020 	rsb	r0, r0, #32
 8005486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005488:	4418      	add	r0, r3
 800548a:	f010 001f 	ands.w	r0, r0, #31
 800548e:	f000 8092 	beq.w	80055b6 <_dtoa_r+0x926>
 8005492:	f1c0 0320 	rsb	r3, r0, #32
 8005496:	2b04      	cmp	r3, #4
 8005498:	f340 808a 	ble.w	80055b0 <_dtoa_r+0x920>
 800549c:	f1c0 001c 	rsb	r0, r0, #28
 80054a0:	9b06      	ldr	r3, [sp, #24]
 80054a2:	4403      	add	r3, r0
 80054a4:	9306      	str	r3, [sp, #24]
 80054a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054a8:	4403      	add	r3, r0
 80054aa:	4407      	add	r7, r0
 80054ac:	9309      	str	r3, [sp, #36]	; 0x24
 80054ae:	9b06      	ldr	r3, [sp, #24]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	dd05      	ble.n	80054c0 <_dtoa_r+0x830>
 80054b4:	4659      	mov	r1, fp
 80054b6:	461a      	mov	r2, r3
 80054b8:	4628      	mov	r0, r5
 80054ba:	f000 ffd9 	bl	8006470 <__lshift>
 80054be:	4683      	mov	fp, r0
 80054c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	dd05      	ble.n	80054d2 <_dtoa_r+0x842>
 80054c6:	4621      	mov	r1, r4
 80054c8:	461a      	mov	r2, r3
 80054ca:	4628      	mov	r0, r5
 80054cc:	f000 ffd0 	bl	8006470 <__lshift>
 80054d0:	4604      	mov	r4, r0
 80054d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d070      	beq.n	80055ba <_dtoa_r+0x92a>
 80054d8:	4621      	mov	r1, r4
 80054da:	4658      	mov	r0, fp
 80054dc:	f001 f838 	bl	8006550 <__mcmp>
 80054e0:	2800      	cmp	r0, #0
 80054e2:	da6a      	bge.n	80055ba <_dtoa_r+0x92a>
 80054e4:	2300      	movs	r3, #0
 80054e6:	4659      	mov	r1, fp
 80054e8:	220a      	movs	r2, #10
 80054ea:	4628      	mov	r0, r5
 80054ec:	f000 fdca 	bl	8006084 <__multadd>
 80054f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80054f6:	4683      	mov	fp, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 8194 	beq.w	8005826 <_dtoa_r+0xb96>
 80054fe:	4631      	mov	r1, r6
 8005500:	2300      	movs	r3, #0
 8005502:	220a      	movs	r2, #10
 8005504:	4628      	mov	r0, r5
 8005506:	f000 fdbd 	bl	8006084 <__multadd>
 800550a:	f1b9 0f00 	cmp.w	r9, #0
 800550e:	4606      	mov	r6, r0
 8005510:	f300 8093 	bgt.w	800563a <_dtoa_r+0x9aa>
 8005514:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005516:	2b02      	cmp	r3, #2
 8005518:	dc57      	bgt.n	80055ca <_dtoa_r+0x93a>
 800551a:	e08e      	b.n	800563a <_dtoa_r+0x9aa>
 800551c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800551e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005522:	e757      	b.n	80053d4 <_dtoa_r+0x744>
 8005524:	3fe00000 	.word	0x3fe00000
 8005528:	40240000 	.word	0x40240000
 800552c:	9b08      	ldr	r3, [sp, #32]
 800552e:	1e5c      	subs	r4, r3, #1
 8005530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005532:	42a3      	cmp	r3, r4
 8005534:	bfbf      	itttt	lt
 8005536:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005538:	940a      	strlt	r4, [sp, #40]	; 0x28
 800553a:	1ae2      	sublt	r2, r4, r3
 800553c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800553e:	bfb6      	itet	lt
 8005540:	189b      	addlt	r3, r3, r2
 8005542:	1b1c      	subge	r4, r3, r4
 8005544:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005546:	9b08      	ldr	r3, [sp, #32]
 8005548:	bfb8      	it	lt
 800554a:	2400      	movlt	r4, #0
 800554c:	2b00      	cmp	r3, #0
 800554e:	bfb9      	ittee	lt
 8005550:	9b06      	ldrlt	r3, [sp, #24]
 8005552:	9a08      	ldrlt	r2, [sp, #32]
 8005554:	9f06      	ldrge	r7, [sp, #24]
 8005556:	9b08      	ldrge	r3, [sp, #32]
 8005558:	bfbc      	itt	lt
 800555a:	1a9f      	sublt	r7, r3, r2
 800555c:	2300      	movlt	r3, #0
 800555e:	e73b      	b.n	80053d8 <_dtoa_r+0x748>
 8005560:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005562:	9f06      	ldr	r7, [sp, #24]
 8005564:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005566:	e742      	b.n	80053ee <_dtoa_r+0x75e>
 8005568:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800556a:	e76b      	b.n	8005444 <_dtoa_r+0x7b4>
 800556c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800556e:	2b01      	cmp	r3, #1
 8005570:	dc19      	bgt.n	80055a6 <_dtoa_r+0x916>
 8005572:	9b04      	ldr	r3, [sp, #16]
 8005574:	b9bb      	cbnz	r3, 80055a6 <_dtoa_r+0x916>
 8005576:	9b05      	ldr	r3, [sp, #20]
 8005578:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800557c:	b99b      	cbnz	r3, 80055a6 <_dtoa_r+0x916>
 800557e:	9b05      	ldr	r3, [sp, #20]
 8005580:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005584:	0d1b      	lsrs	r3, r3, #20
 8005586:	051b      	lsls	r3, r3, #20
 8005588:	b183      	cbz	r3, 80055ac <_dtoa_r+0x91c>
 800558a:	9b06      	ldr	r3, [sp, #24]
 800558c:	3301      	adds	r3, #1
 800558e:	9306      	str	r3, [sp, #24]
 8005590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005592:	3301      	adds	r3, #1
 8005594:	9309      	str	r3, [sp, #36]	; 0x24
 8005596:	f04f 0801 	mov.w	r8, #1
 800559a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800559c:	2b00      	cmp	r3, #0
 800559e:	f47f af6a 	bne.w	8005476 <_dtoa_r+0x7e6>
 80055a2:	2001      	movs	r0, #1
 80055a4:	e76f      	b.n	8005486 <_dtoa_r+0x7f6>
 80055a6:	f04f 0800 	mov.w	r8, #0
 80055aa:	e7f6      	b.n	800559a <_dtoa_r+0x90a>
 80055ac:	4698      	mov	r8, r3
 80055ae:	e7f4      	b.n	800559a <_dtoa_r+0x90a>
 80055b0:	f43f af7d 	beq.w	80054ae <_dtoa_r+0x81e>
 80055b4:	4618      	mov	r0, r3
 80055b6:	301c      	adds	r0, #28
 80055b8:	e772      	b.n	80054a0 <_dtoa_r+0x810>
 80055ba:	9b08      	ldr	r3, [sp, #32]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	dc36      	bgt.n	800562e <_dtoa_r+0x99e>
 80055c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	dd33      	ble.n	800562e <_dtoa_r+0x99e>
 80055c6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055ca:	f1b9 0f00 	cmp.w	r9, #0
 80055ce:	d10d      	bne.n	80055ec <_dtoa_r+0x95c>
 80055d0:	4621      	mov	r1, r4
 80055d2:	464b      	mov	r3, r9
 80055d4:	2205      	movs	r2, #5
 80055d6:	4628      	mov	r0, r5
 80055d8:	f000 fd54 	bl	8006084 <__multadd>
 80055dc:	4601      	mov	r1, r0
 80055de:	4604      	mov	r4, r0
 80055e0:	4658      	mov	r0, fp
 80055e2:	f000 ffb5 	bl	8006550 <__mcmp>
 80055e6:	2800      	cmp	r0, #0
 80055e8:	f73f adb8 	bgt.w	800515c <_dtoa_r+0x4cc>
 80055ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055ee:	9f03      	ldr	r7, [sp, #12]
 80055f0:	ea6f 0a03 	mvn.w	sl, r3
 80055f4:	f04f 0800 	mov.w	r8, #0
 80055f8:	4621      	mov	r1, r4
 80055fa:	4628      	mov	r0, r5
 80055fc:	f000 fd20 	bl	8006040 <_Bfree>
 8005600:	2e00      	cmp	r6, #0
 8005602:	f43f aea7 	beq.w	8005354 <_dtoa_r+0x6c4>
 8005606:	f1b8 0f00 	cmp.w	r8, #0
 800560a:	d005      	beq.n	8005618 <_dtoa_r+0x988>
 800560c:	45b0      	cmp	r8, r6
 800560e:	d003      	beq.n	8005618 <_dtoa_r+0x988>
 8005610:	4641      	mov	r1, r8
 8005612:	4628      	mov	r0, r5
 8005614:	f000 fd14 	bl	8006040 <_Bfree>
 8005618:	4631      	mov	r1, r6
 800561a:	4628      	mov	r0, r5
 800561c:	f000 fd10 	bl	8006040 <_Bfree>
 8005620:	e698      	b.n	8005354 <_dtoa_r+0x6c4>
 8005622:	2400      	movs	r4, #0
 8005624:	4626      	mov	r6, r4
 8005626:	e7e1      	b.n	80055ec <_dtoa_r+0x95c>
 8005628:	46c2      	mov	sl, r8
 800562a:	4626      	mov	r6, r4
 800562c:	e596      	b.n	800515c <_dtoa_r+0x4cc>
 800562e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005630:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 80fd 	beq.w	8005834 <_dtoa_r+0xba4>
 800563a:	2f00      	cmp	r7, #0
 800563c:	dd05      	ble.n	800564a <_dtoa_r+0x9ba>
 800563e:	4631      	mov	r1, r6
 8005640:	463a      	mov	r2, r7
 8005642:	4628      	mov	r0, r5
 8005644:	f000 ff14 	bl	8006470 <__lshift>
 8005648:	4606      	mov	r6, r0
 800564a:	f1b8 0f00 	cmp.w	r8, #0
 800564e:	d05c      	beq.n	800570a <_dtoa_r+0xa7a>
 8005650:	6871      	ldr	r1, [r6, #4]
 8005652:	4628      	mov	r0, r5
 8005654:	f000 fcb4 	bl	8005fc0 <_Balloc>
 8005658:	4607      	mov	r7, r0
 800565a:	b928      	cbnz	r0, 8005668 <_dtoa_r+0x9d8>
 800565c:	4b80      	ldr	r3, [pc, #512]	; (8005860 <_dtoa_r+0xbd0>)
 800565e:	4602      	mov	r2, r0
 8005660:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005664:	f7ff bb28 	b.w	8004cb8 <_dtoa_r+0x28>
 8005668:	6932      	ldr	r2, [r6, #16]
 800566a:	3202      	adds	r2, #2
 800566c:	0092      	lsls	r2, r2, #2
 800566e:	f106 010c 	add.w	r1, r6, #12
 8005672:	300c      	adds	r0, #12
 8005674:	f000 fc96 	bl	8005fa4 <memcpy>
 8005678:	2201      	movs	r2, #1
 800567a:	4639      	mov	r1, r7
 800567c:	4628      	mov	r0, r5
 800567e:	f000 fef7 	bl	8006470 <__lshift>
 8005682:	9b03      	ldr	r3, [sp, #12]
 8005684:	3301      	adds	r3, #1
 8005686:	9308      	str	r3, [sp, #32]
 8005688:	9b03      	ldr	r3, [sp, #12]
 800568a:	444b      	add	r3, r9
 800568c:	930a      	str	r3, [sp, #40]	; 0x28
 800568e:	9b04      	ldr	r3, [sp, #16]
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	46b0      	mov	r8, r6
 8005696:	9309      	str	r3, [sp, #36]	; 0x24
 8005698:	4606      	mov	r6, r0
 800569a:	9b08      	ldr	r3, [sp, #32]
 800569c:	4621      	mov	r1, r4
 800569e:	3b01      	subs	r3, #1
 80056a0:	4658      	mov	r0, fp
 80056a2:	9304      	str	r3, [sp, #16]
 80056a4:	f7ff fa6a 	bl	8004b7c <quorem>
 80056a8:	4603      	mov	r3, r0
 80056aa:	3330      	adds	r3, #48	; 0x30
 80056ac:	9006      	str	r0, [sp, #24]
 80056ae:	4641      	mov	r1, r8
 80056b0:	4658      	mov	r0, fp
 80056b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80056b4:	f000 ff4c 	bl	8006550 <__mcmp>
 80056b8:	4632      	mov	r2, r6
 80056ba:	4681      	mov	r9, r0
 80056bc:	4621      	mov	r1, r4
 80056be:	4628      	mov	r0, r5
 80056c0:	f000 ff62 	bl	8006588 <__mdiff>
 80056c4:	68c2      	ldr	r2, [r0, #12]
 80056c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056c8:	4607      	mov	r7, r0
 80056ca:	bb02      	cbnz	r2, 800570e <_dtoa_r+0xa7e>
 80056cc:	4601      	mov	r1, r0
 80056ce:	4658      	mov	r0, fp
 80056d0:	f000 ff3e 	bl	8006550 <__mcmp>
 80056d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056d6:	4602      	mov	r2, r0
 80056d8:	4639      	mov	r1, r7
 80056da:	4628      	mov	r0, r5
 80056dc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80056e0:	f000 fcae 	bl	8006040 <_Bfree>
 80056e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056e8:	9f08      	ldr	r7, [sp, #32]
 80056ea:	ea43 0102 	orr.w	r1, r3, r2
 80056ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056f0:	430b      	orrs	r3, r1
 80056f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056f4:	d10d      	bne.n	8005712 <_dtoa_r+0xa82>
 80056f6:	2b39      	cmp	r3, #57	; 0x39
 80056f8:	d029      	beq.n	800574e <_dtoa_r+0xabe>
 80056fa:	f1b9 0f00 	cmp.w	r9, #0
 80056fe:	dd01      	ble.n	8005704 <_dtoa_r+0xa74>
 8005700:	9b06      	ldr	r3, [sp, #24]
 8005702:	3331      	adds	r3, #49	; 0x31
 8005704:	9a04      	ldr	r2, [sp, #16]
 8005706:	7013      	strb	r3, [r2, #0]
 8005708:	e776      	b.n	80055f8 <_dtoa_r+0x968>
 800570a:	4630      	mov	r0, r6
 800570c:	e7b9      	b.n	8005682 <_dtoa_r+0x9f2>
 800570e:	2201      	movs	r2, #1
 8005710:	e7e2      	b.n	80056d8 <_dtoa_r+0xa48>
 8005712:	f1b9 0f00 	cmp.w	r9, #0
 8005716:	db06      	blt.n	8005726 <_dtoa_r+0xa96>
 8005718:	9922      	ldr	r1, [sp, #136]	; 0x88
 800571a:	ea41 0909 	orr.w	r9, r1, r9
 800571e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005720:	ea59 0101 	orrs.w	r1, r9, r1
 8005724:	d120      	bne.n	8005768 <_dtoa_r+0xad8>
 8005726:	2a00      	cmp	r2, #0
 8005728:	ddec      	ble.n	8005704 <_dtoa_r+0xa74>
 800572a:	4659      	mov	r1, fp
 800572c:	2201      	movs	r2, #1
 800572e:	4628      	mov	r0, r5
 8005730:	9308      	str	r3, [sp, #32]
 8005732:	f000 fe9d 	bl	8006470 <__lshift>
 8005736:	4621      	mov	r1, r4
 8005738:	4683      	mov	fp, r0
 800573a:	f000 ff09 	bl	8006550 <__mcmp>
 800573e:	2800      	cmp	r0, #0
 8005740:	9b08      	ldr	r3, [sp, #32]
 8005742:	dc02      	bgt.n	800574a <_dtoa_r+0xaba>
 8005744:	d1de      	bne.n	8005704 <_dtoa_r+0xa74>
 8005746:	07da      	lsls	r2, r3, #31
 8005748:	d5dc      	bpl.n	8005704 <_dtoa_r+0xa74>
 800574a:	2b39      	cmp	r3, #57	; 0x39
 800574c:	d1d8      	bne.n	8005700 <_dtoa_r+0xa70>
 800574e:	9a04      	ldr	r2, [sp, #16]
 8005750:	2339      	movs	r3, #57	; 0x39
 8005752:	7013      	strb	r3, [r2, #0]
 8005754:	463b      	mov	r3, r7
 8005756:	461f      	mov	r7, r3
 8005758:	3b01      	subs	r3, #1
 800575a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800575e:	2a39      	cmp	r2, #57	; 0x39
 8005760:	d050      	beq.n	8005804 <_dtoa_r+0xb74>
 8005762:	3201      	adds	r2, #1
 8005764:	701a      	strb	r2, [r3, #0]
 8005766:	e747      	b.n	80055f8 <_dtoa_r+0x968>
 8005768:	2a00      	cmp	r2, #0
 800576a:	dd03      	ble.n	8005774 <_dtoa_r+0xae4>
 800576c:	2b39      	cmp	r3, #57	; 0x39
 800576e:	d0ee      	beq.n	800574e <_dtoa_r+0xabe>
 8005770:	3301      	adds	r3, #1
 8005772:	e7c7      	b.n	8005704 <_dtoa_r+0xa74>
 8005774:	9a08      	ldr	r2, [sp, #32]
 8005776:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005778:	f802 3c01 	strb.w	r3, [r2, #-1]
 800577c:	428a      	cmp	r2, r1
 800577e:	d02a      	beq.n	80057d6 <_dtoa_r+0xb46>
 8005780:	4659      	mov	r1, fp
 8005782:	2300      	movs	r3, #0
 8005784:	220a      	movs	r2, #10
 8005786:	4628      	mov	r0, r5
 8005788:	f000 fc7c 	bl	8006084 <__multadd>
 800578c:	45b0      	cmp	r8, r6
 800578e:	4683      	mov	fp, r0
 8005790:	f04f 0300 	mov.w	r3, #0
 8005794:	f04f 020a 	mov.w	r2, #10
 8005798:	4641      	mov	r1, r8
 800579a:	4628      	mov	r0, r5
 800579c:	d107      	bne.n	80057ae <_dtoa_r+0xb1e>
 800579e:	f000 fc71 	bl	8006084 <__multadd>
 80057a2:	4680      	mov	r8, r0
 80057a4:	4606      	mov	r6, r0
 80057a6:	9b08      	ldr	r3, [sp, #32]
 80057a8:	3301      	adds	r3, #1
 80057aa:	9308      	str	r3, [sp, #32]
 80057ac:	e775      	b.n	800569a <_dtoa_r+0xa0a>
 80057ae:	f000 fc69 	bl	8006084 <__multadd>
 80057b2:	4631      	mov	r1, r6
 80057b4:	4680      	mov	r8, r0
 80057b6:	2300      	movs	r3, #0
 80057b8:	220a      	movs	r2, #10
 80057ba:	4628      	mov	r0, r5
 80057bc:	f000 fc62 	bl	8006084 <__multadd>
 80057c0:	4606      	mov	r6, r0
 80057c2:	e7f0      	b.n	80057a6 <_dtoa_r+0xb16>
 80057c4:	f1b9 0f00 	cmp.w	r9, #0
 80057c8:	9a03      	ldr	r2, [sp, #12]
 80057ca:	bfcc      	ite	gt
 80057cc:	464f      	movgt	r7, r9
 80057ce:	2701      	movle	r7, #1
 80057d0:	4417      	add	r7, r2
 80057d2:	f04f 0800 	mov.w	r8, #0
 80057d6:	4659      	mov	r1, fp
 80057d8:	2201      	movs	r2, #1
 80057da:	4628      	mov	r0, r5
 80057dc:	9308      	str	r3, [sp, #32]
 80057de:	f000 fe47 	bl	8006470 <__lshift>
 80057e2:	4621      	mov	r1, r4
 80057e4:	4683      	mov	fp, r0
 80057e6:	f000 feb3 	bl	8006550 <__mcmp>
 80057ea:	2800      	cmp	r0, #0
 80057ec:	dcb2      	bgt.n	8005754 <_dtoa_r+0xac4>
 80057ee:	d102      	bne.n	80057f6 <_dtoa_r+0xb66>
 80057f0:	9b08      	ldr	r3, [sp, #32]
 80057f2:	07db      	lsls	r3, r3, #31
 80057f4:	d4ae      	bmi.n	8005754 <_dtoa_r+0xac4>
 80057f6:	463b      	mov	r3, r7
 80057f8:	461f      	mov	r7, r3
 80057fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057fe:	2a30      	cmp	r2, #48	; 0x30
 8005800:	d0fa      	beq.n	80057f8 <_dtoa_r+0xb68>
 8005802:	e6f9      	b.n	80055f8 <_dtoa_r+0x968>
 8005804:	9a03      	ldr	r2, [sp, #12]
 8005806:	429a      	cmp	r2, r3
 8005808:	d1a5      	bne.n	8005756 <_dtoa_r+0xac6>
 800580a:	f10a 0a01 	add.w	sl, sl, #1
 800580e:	2331      	movs	r3, #49	; 0x31
 8005810:	e779      	b.n	8005706 <_dtoa_r+0xa76>
 8005812:	4b14      	ldr	r3, [pc, #80]	; (8005864 <_dtoa_r+0xbd4>)
 8005814:	f7ff baa7 	b.w	8004d66 <_dtoa_r+0xd6>
 8005818:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800581a:	2b00      	cmp	r3, #0
 800581c:	f47f aa80 	bne.w	8004d20 <_dtoa_r+0x90>
 8005820:	4b11      	ldr	r3, [pc, #68]	; (8005868 <_dtoa_r+0xbd8>)
 8005822:	f7ff baa0 	b.w	8004d66 <_dtoa_r+0xd6>
 8005826:	f1b9 0f00 	cmp.w	r9, #0
 800582a:	dc03      	bgt.n	8005834 <_dtoa_r+0xba4>
 800582c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800582e:	2b02      	cmp	r3, #2
 8005830:	f73f aecb 	bgt.w	80055ca <_dtoa_r+0x93a>
 8005834:	9f03      	ldr	r7, [sp, #12]
 8005836:	4621      	mov	r1, r4
 8005838:	4658      	mov	r0, fp
 800583a:	f7ff f99f 	bl	8004b7c <quorem>
 800583e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005842:	f807 3b01 	strb.w	r3, [r7], #1
 8005846:	9a03      	ldr	r2, [sp, #12]
 8005848:	1aba      	subs	r2, r7, r2
 800584a:	4591      	cmp	r9, r2
 800584c:	ddba      	ble.n	80057c4 <_dtoa_r+0xb34>
 800584e:	4659      	mov	r1, fp
 8005850:	2300      	movs	r3, #0
 8005852:	220a      	movs	r2, #10
 8005854:	4628      	mov	r0, r5
 8005856:	f000 fc15 	bl	8006084 <__multadd>
 800585a:	4683      	mov	fp, r0
 800585c:	e7eb      	b.n	8005836 <_dtoa_r+0xba6>
 800585e:	bf00      	nop
 8005860:	08009220 	.word	0x08009220
 8005864:	08009419 	.word	0x08009419
 8005868:	080091a1 	.word	0x080091a1

0800586c <__errno>:
 800586c:	4b01      	ldr	r3, [pc, #4]	; (8005874 <__errno+0x8>)
 800586e:	6818      	ldr	r0, [r3, #0]
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20000044 	.word	0x20000044

08005878 <rshift>:
 8005878:	6903      	ldr	r3, [r0, #16]
 800587a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800587e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005882:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005886:	f100 0414 	add.w	r4, r0, #20
 800588a:	dd45      	ble.n	8005918 <rshift+0xa0>
 800588c:	f011 011f 	ands.w	r1, r1, #31
 8005890:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005894:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005898:	d10c      	bne.n	80058b4 <rshift+0x3c>
 800589a:	f100 0710 	add.w	r7, r0, #16
 800589e:	4629      	mov	r1, r5
 80058a0:	42b1      	cmp	r1, r6
 80058a2:	d334      	bcc.n	800590e <rshift+0x96>
 80058a4:	1a9b      	subs	r3, r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	1eea      	subs	r2, r5, #3
 80058aa:	4296      	cmp	r6, r2
 80058ac:	bf38      	it	cc
 80058ae:	2300      	movcc	r3, #0
 80058b0:	4423      	add	r3, r4
 80058b2:	e015      	b.n	80058e0 <rshift+0x68>
 80058b4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80058b8:	f1c1 0820 	rsb	r8, r1, #32
 80058bc:	40cf      	lsrs	r7, r1
 80058be:	f105 0e04 	add.w	lr, r5, #4
 80058c2:	46a1      	mov	r9, r4
 80058c4:	4576      	cmp	r6, lr
 80058c6:	46f4      	mov	ip, lr
 80058c8:	d815      	bhi.n	80058f6 <rshift+0x7e>
 80058ca:	1a9a      	subs	r2, r3, r2
 80058cc:	0092      	lsls	r2, r2, #2
 80058ce:	3a04      	subs	r2, #4
 80058d0:	3501      	adds	r5, #1
 80058d2:	42ae      	cmp	r6, r5
 80058d4:	bf38      	it	cc
 80058d6:	2200      	movcc	r2, #0
 80058d8:	18a3      	adds	r3, r4, r2
 80058da:	50a7      	str	r7, [r4, r2]
 80058dc:	b107      	cbz	r7, 80058e0 <rshift+0x68>
 80058de:	3304      	adds	r3, #4
 80058e0:	1b1a      	subs	r2, r3, r4
 80058e2:	42a3      	cmp	r3, r4
 80058e4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80058e8:	bf08      	it	eq
 80058ea:	2300      	moveq	r3, #0
 80058ec:	6102      	str	r2, [r0, #16]
 80058ee:	bf08      	it	eq
 80058f0:	6143      	streq	r3, [r0, #20]
 80058f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058f6:	f8dc c000 	ldr.w	ip, [ip]
 80058fa:	fa0c fc08 	lsl.w	ip, ip, r8
 80058fe:	ea4c 0707 	orr.w	r7, ip, r7
 8005902:	f849 7b04 	str.w	r7, [r9], #4
 8005906:	f85e 7b04 	ldr.w	r7, [lr], #4
 800590a:	40cf      	lsrs	r7, r1
 800590c:	e7da      	b.n	80058c4 <rshift+0x4c>
 800590e:	f851 cb04 	ldr.w	ip, [r1], #4
 8005912:	f847 cf04 	str.w	ip, [r7, #4]!
 8005916:	e7c3      	b.n	80058a0 <rshift+0x28>
 8005918:	4623      	mov	r3, r4
 800591a:	e7e1      	b.n	80058e0 <rshift+0x68>

0800591c <__hexdig_fun>:
 800591c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005920:	2b09      	cmp	r3, #9
 8005922:	d802      	bhi.n	800592a <__hexdig_fun+0xe>
 8005924:	3820      	subs	r0, #32
 8005926:	b2c0      	uxtb	r0, r0
 8005928:	4770      	bx	lr
 800592a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800592e:	2b05      	cmp	r3, #5
 8005930:	d801      	bhi.n	8005936 <__hexdig_fun+0x1a>
 8005932:	3847      	subs	r0, #71	; 0x47
 8005934:	e7f7      	b.n	8005926 <__hexdig_fun+0xa>
 8005936:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800593a:	2b05      	cmp	r3, #5
 800593c:	d801      	bhi.n	8005942 <__hexdig_fun+0x26>
 800593e:	3827      	subs	r0, #39	; 0x27
 8005940:	e7f1      	b.n	8005926 <__hexdig_fun+0xa>
 8005942:	2000      	movs	r0, #0
 8005944:	4770      	bx	lr
	...

08005948 <__gethex>:
 8005948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800594c:	b08b      	sub	sp, #44	; 0x2c
 800594e:	468b      	mov	fp, r1
 8005950:	9305      	str	r3, [sp, #20]
 8005952:	4bb2      	ldr	r3, [pc, #712]	; (8005c1c <__gethex+0x2d4>)
 8005954:	9002      	str	r0, [sp, #8]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	9303      	str	r3, [sp, #12]
 800595a:	4618      	mov	r0, r3
 800595c:	4690      	mov	r8, r2
 800595e:	f7fa fc49 	bl	80001f4 <strlen>
 8005962:	9b03      	ldr	r3, [sp, #12]
 8005964:	f8db 2000 	ldr.w	r2, [fp]
 8005968:	4403      	add	r3, r0
 800596a:	4682      	mov	sl, r0
 800596c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005970:	9306      	str	r3, [sp, #24]
 8005972:	1c93      	adds	r3, r2, #2
 8005974:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005978:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800597c:	32fe      	adds	r2, #254	; 0xfe
 800597e:	18d1      	adds	r1, r2, r3
 8005980:	461f      	mov	r7, r3
 8005982:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005986:	9101      	str	r1, [sp, #4]
 8005988:	2830      	cmp	r0, #48	; 0x30
 800598a:	d0f8      	beq.n	800597e <__gethex+0x36>
 800598c:	f7ff ffc6 	bl	800591c <__hexdig_fun>
 8005990:	4604      	mov	r4, r0
 8005992:	2800      	cmp	r0, #0
 8005994:	d13a      	bne.n	8005a0c <__gethex+0xc4>
 8005996:	9903      	ldr	r1, [sp, #12]
 8005998:	4652      	mov	r2, sl
 800599a:	4638      	mov	r0, r7
 800599c:	f001 fd96 	bl	80074cc <strncmp>
 80059a0:	4605      	mov	r5, r0
 80059a2:	2800      	cmp	r0, #0
 80059a4:	d166      	bne.n	8005a74 <__gethex+0x12c>
 80059a6:	f817 000a 	ldrb.w	r0, [r7, sl]
 80059aa:	eb07 060a 	add.w	r6, r7, sl
 80059ae:	f7ff ffb5 	bl	800591c <__hexdig_fun>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d060      	beq.n	8005a78 <__gethex+0x130>
 80059b6:	4633      	mov	r3, r6
 80059b8:	7818      	ldrb	r0, [r3, #0]
 80059ba:	2830      	cmp	r0, #48	; 0x30
 80059bc:	461f      	mov	r7, r3
 80059be:	f103 0301 	add.w	r3, r3, #1
 80059c2:	d0f9      	beq.n	80059b8 <__gethex+0x70>
 80059c4:	f7ff ffaa 	bl	800591c <__hexdig_fun>
 80059c8:	2301      	movs	r3, #1
 80059ca:	fab0 f480 	clz	r4, r0
 80059ce:	0964      	lsrs	r4, r4, #5
 80059d0:	4635      	mov	r5, r6
 80059d2:	9301      	str	r3, [sp, #4]
 80059d4:	463a      	mov	r2, r7
 80059d6:	4616      	mov	r6, r2
 80059d8:	3201      	adds	r2, #1
 80059da:	7830      	ldrb	r0, [r6, #0]
 80059dc:	f7ff ff9e 	bl	800591c <__hexdig_fun>
 80059e0:	2800      	cmp	r0, #0
 80059e2:	d1f8      	bne.n	80059d6 <__gethex+0x8e>
 80059e4:	9903      	ldr	r1, [sp, #12]
 80059e6:	4652      	mov	r2, sl
 80059e8:	4630      	mov	r0, r6
 80059ea:	f001 fd6f 	bl	80074cc <strncmp>
 80059ee:	b980      	cbnz	r0, 8005a12 <__gethex+0xca>
 80059f0:	b94d      	cbnz	r5, 8005a06 <__gethex+0xbe>
 80059f2:	eb06 050a 	add.w	r5, r6, sl
 80059f6:	462a      	mov	r2, r5
 80059f8:	4616      	mov	r6, r2
 80059fa:	3201      	adds	r2, #1
 80059fc:	7830      	ldrb	r0, [r6, #0]
 80059fe:	f7ff ff8d 	bl	800591c <__hexdig_fun>
 8005a02:	2800      	cmp	r0, #0
 8005a04:	d1f8      	bne.n	80059f8 <__gethex+0xb0>
 8005a06:	1bad      	subs	r5, r5, r6
 8005a08:	00ad      	lsls	r5, r5, #2
 8005a0a:	e004      	b.n	8005a16 <__gethex+0xce>
 8005a0c:	2400      	movs	r4, #0
 8005a0e:	4625      	mov	r5, r4
 8005a10:	e7e0      	b.n	80059d4 <__gethex+0x8c>
 8005a12:	2d00      	cmp	r5, #0
 8005a14:	d1f7      	bne.n	8005a06 <__gethex+0xbe>
 8005a16:	7833      	ldrb	r3, [r6, #0]
 8005a18:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005a1c:	2b50      	cmp	r3, #80	; 0x50
 8005a1e:	d139      	bne.n	8005a94 <__gethex+0x14c>
 8005a20:	7873      	ldrb	r3, [r6, #1]
 8005a22:	2b2b      	cmp	r3, #43	; 0x2b
 8005a24:	d02a      	beq.n	8005a7c <__gethex+0x134>
 8005a26:	2b2d      	cmp	r3, #45	; 0x2d
 8005a28:	d02c      	beq.n	8005a84 <__gethex+0x13c>
 8005a2a:	1c71      	adds	r1, r6, #1
 8005a2c:	f04f 0900 	mov.w	r9, #0
 8005a30:	7808      	ldrb	r0, [r1, #0]
 8005a32:	f7ff ff73 	bl	800591c <__hexdig_fun>
 8005a36:	1e43      	subs	r3, r0, #1
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b18      	cmp	r3, #24
 8005a3c:	d82a      	bhi.n	8005a94 <__gethex+0x14c>
 8005a3e:	f1a0 0210 	sub.w	r2, r0, #16
 8005a42:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005a46:	f7ff ff69 	bl	800591c <__hexdig_fun>
 8005a4a:	1e43      	subs	r3, r0, #1
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b18      	cmp	r3, #24
 8005a50:	d91b      	bls.n	8005a8a <__gethex+0x142>
 8005a52:	f1b9 0f00 	cmp.w	r9, #0
 8005a56:	d000      	beq.n	8005a5a <__gethex+0x112>
 8005a58:	4252      	negs	r2, r2
 8005a5a:	4415      	add	r5, r2
 8005a5c:	f8cb 1000 	str.w	r1, [fp]
 8005a60:	b1d4      	cbz	r4, 8005a98 <__gethex+0x150>
 8005a62:	9b01      	ldr	r3, [sp, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	bf14      	ite	ne
 8005a68:	2700      	movne	r7, #0
 8005a6a:	2706      	moveq	r7, #6
 8005a6c:	4638      	mov	r0, r7
 8005a6e:	b00b      	add	sp, #44	; 0x2c
 8005a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a74:	463e      	mov	r6, r7
 8005a76:	4625      	mov	r5, r4
 8005a78:	2401      	movs	r4, #1
 8005a7a:	e7cc      	b.n	8005a16 <__gethex+0xce>
 8005a7c:	f04f 0900 	mov.w	r9, #0
 8005a80:	1cb1      	adds	r1, r6, #2
 8005a82:	e7d5      	b.n	8005a30 <__gethex+0xe8>
 8005a84:	f04f 0901 	mov.w	r9, #1
 8005a88:	e7fa      	b.n	8005a80 <__gethex+0x138>
 8005a8a:	230a      	movs	r3, #10
 8005a8c:	fb03 0202 	mla	r2, r3, r2, r0
 8005a90:	3a10      	subs	r2, #16
 8005a92:	e7d6      	b.n	8005a42 <__gethex+0xfa>
 8005a94:	4631      	mov	r1, r6
 8005a96:	e7e1      	b.n	8005a5c <__gethex+0x114>
 8005a98:	1bf3      	subs	r3, r6, r7
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	4621      	mov	r1, r4
 8005a9e:	2b07      	cmp	r3, #7
 8005aa0:	dc0a      	bgt.n	8005ab8 <__gethex+0x170>
 8005aa2:	9802      	ldr	r0, [sp, #8]
 8005aa4:	f000 fa8c 	bl	8005fc0 <_Balloc>
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	b940      	cbnz	r0, 8005abe <__gethex+0x176>
 8005aac:	4b5c      	ldr	r3, [pc, #368]	; (8005c20 <__gethex+0x2d8>)
 8005aae:	4602      	mov	r2, r0
 8005ab0:	21de      	movs	r1, #222	; 0xde
 8005ab2:	485c      	ldr	r0, [pc, #368]	; (8005c24 <__gethex+0x2dc>)
 8005ab4:	f001 fdda 	bl	800766c <__assert_func>
 8005ab8:	3101      	adds	r1, #1
 8005aba:	105b      	asrs	r3, r3, #1
 8005abc:	e7ef      	b.n	8005a9e <__gethex+0x156>
 8005abe:	f100 0914 	add.w	r9, r0, #20
 8005ac2:	f04f 0b00 	mov.w	fp, #0
 8005ac6:	f1ca 0301 	rsb	r3, sl, #1
 8005aca:	f8cd 9010 	str.w	r9, [sp, #16]
 8005ace:	f8cd b004 	str.w	fp, [sp, #4]
 8005ad2:	9308      	str	r3, [sp, #32]
 8005ad4:	42b7      	cmp	r7, r6
 8005ad6:	d33f      	bcc.n	8005b58 <__gethex+0x210>
 8005ad8:	9f04      	ldr	r7, [sp, #16]
 8005ada:	9b01      	ldr	r3, [sp, #4]
 8005adc:	f847 3b04 	str.w	r3, [r7], #4
 8005ae0:	eba7 0709 	sub.w	r7, r7, r9
 8005ae4:	10bf      	asrs	r7, r7, #2
 8005ae6:	6127      	str	r7, [r4, #16]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 fb5b 	bl	80061a4 <__hi0bits>
 8005aee:	017f      	lsls	r7, r7, #5
 8005af0:	f8d8 6000 	ldr.w	r6, [r8]
 8005af4:	1a3f      	subs	r7, r7, r0
 8005af6:	42b7      	cmp	r7, r6
 8005af8:	dd62      	ble.n	8005bc0 <__gethex+0x278>
 8005afa:	1bbf      	subs	r7, r7, r6
 8005afc:	4639      	mov	r1, r7
 8005afe:	4620      	mov	r0, r4
 8005b00:	f000 fef1 	bl	80068e6 <__any_on>
 8005b04:	4682      	mov	sl, r0
 8005b06:	b1a8      	cbz	r0, 8005b34 <__gethex+0x1ec>
 8005b08:	1e7b      	subs	r3, r7, #1
 8005b0a:	1159      	asrs	r1, r3, #5
 8005b0c:	f003 021f 	and.w	r2, r3, #31
 8005b10:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005b14:	f04f 0a01 	mov.w	sl, #1
 8005b18:	fa0a f202 	lsl.w	r2, sl, r2
 8005b1c:	420a      	tst	r2, r1
 8005b1e:	d009      	beq.n	8005b34 <__gethex+0x1ec>
 8005b20:	4553      	cmp	r3, sl
 8005b22:	dd05      	ble.n	8005b30 <__gethex+0x1e8>
 8005b24:	1eb9      	subs	r1, r7, #2
 8005b26:	4620      	mov	r0, r4
 8005b28:	f000 fedd 	bl	80068e6 <__any_on>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	d144      	bne.n	8005bba <__gethex+0x272>
 8005b30:	f04f 0a02 	mov.w	sl, #2
 8005b34:	4639      	mov	r1, r7
 8005b36:	4620      	mov	r0, r4
 8005b38:	f7ff fe9e 	bl	8005878 <rshift>
 8005b3c:	443d      	add	r5, r7
 8005b3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005b42:	42ab      	cmp	r3, r5
 8005b44:	da4a      	bge.n	8005bdc <__gethex+0x294>
 8005b46:	9802      	ldr	r0, [sp, #8]
 8005b48:	4621      	mov	r1, r4
 8005b4a:	f000 fa79 	bl	8006040 <_Bfree>
 8005b4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005b50:	2300      	movs	r3, #0
 8005b52:	6013      	str	r3, [r2, #0]
 8005b54:	27a3      	movs	r7, #163	; 0xa3
 8005b56:	e789      	b.n	8005a6c <__gethex+0x124>
 8005b58:	1e73      	subs	r3, r6, #1
 8005b5a:	9a06      	ldr	r2, [sp, #24]
 8005b5c:	9307      	str	r3, [sp, #28]
 8005b5e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d019      	beq.n	8005b9a <__gethex+0x252>
 8005b66:	f1bb 0f20 	cmp.w	fp, #32
 8005b6a:	d107      	bne.n	8005b7c <__gethex+0x234>
 8005b6c:	9b04      	ldr	r3, [sp, #16]
 8005b6e:	9a01      	ldr	r2, [sp, #4]
 8005b70:	f843 2b04 	str.w	r2, [r3], #4
 8005b74:	9304      	str	r3, [sp, #16]
 8005b76:	2300      	movs	r3, #0
 8005b78:	9301      	str	r3, [sp, #4]
 8005b7a:	469b      	mov	fp, r3
 8005b7c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005b80:	f7ff fecc 	bl	800591c <__hexdig_fun>
 8005b84:	9b01      	ldr	r3, [sp, #4]
 8005b86:	f000 000f 	and.w	r0, r0, #15
 8005b8a:	fa00 f00b 	lsl.w	r0, r0, fp
 8005b8e:	4303      	orrs	r3, r0
 8005b90:	9301      	str	r3, [sp, #4]
 8005b92:	f10b 0b04 	add.w	fp, fp, #4
 8005b96:	9b07      	ldr	r3, [sp, #28]
 8005b98:	e00d      	b.n	8005bb6 <__gethex+0x26e>
 8005b9a:	9a08      	ldr	r2, [sp, #32]
 8005b9c:	1e73      	subs	r3, r6, #1
 8005b9e:	4413      	add	r3, r2
 8005ba0:	42bb      	cmp	r3, r7
 8005ba2:	d3e0      	bcc.n	8005b66 <__gethex+0x21e>
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	9903      	ldr	r1, [sp, #12]
 8005ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8005baa:	4652      	mov	r2, sl
 8005bac:	f001 fc8e 	bl	80074cc <strncmp>
 8005bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	d1d7      	bne.n	8005b66 <__gethex+0x21e>
 8005bb6:	461e      	mov	r6, r3
 8005bb8:	e78c      	b.n	8005ad4 <__gethex+0x18c>
 8005bba:	f04f 0a03 	mov.w	sl, #3
 8005bbe:	e7b9      	b.n	8005b34 <__gethex+0x1ec>
 8005bc0:	da09      	bge.n	8005bd6 <__gethex+0x28e>
 8005bc2:	1bf7      	subs	r7, r6, r7
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	9802      	ldr	r0, [sp, #8]
 8005bc8:	463a      	mov	r2, r7
 8005bca:	f000 fc51 	bl	8006470 <__lshift>
 8005bce:	1bed      	subs	r5, r5, r7
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	f100 0914 	add.w	r9, r0, #20
 8005bd6:	f04f 0a00 	mov.w	sl, #0
 8005bda:	e7b0      	b.n	8005b3e <__gethex+0x1f6>
 8005bdc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005be0:	42a8      	cmp	r0, r5
 8005be2:	dd71      	ble.n	8005cc8 <__gethex+0x380>
 8005be4:	1b45      	subs	r5, r0, r5
 8005be6:	42ae      	cmp	r6, r5
 8005be8:	dc35      	bgt.n	8005c56 <__gethex+0x30e>
 8005bea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d029      	beq.n	8005c46 <__gethex+0x2fe>
 8005bf2:	2b03      	cmp	r3, #3
 8005bf4:	d02b      	beq.n	8005c4e <__gethex+0x306>
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d11c      	bne.n	8005c34 <__gethex+0x2ec>
 8005bfa:	42ae      	cmp	r6, r5
 8005bfc:	d11a      	bne.n	8005c34 <__gethex+0x2ec>
 8005bfe:	2e01      	cmp	r6, #1
 8005c00:	d112      	bne.n	8005c28 <__gethex+0x2e0>
 8005c02:	9a05      	ldr	r2, [sp, #20]
 8005c04:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005c08:	6013      	str	r3, [r2, #0]
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	6123      	str	r3, [r4, #16]
 8005c0e:	f8c9 3000 	str.w	r3, [r9]
 8005c12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c14:	2762      	movs	r7, #98	; 0x62
 8005c16:	601c      	str	r4, [r3, #0]
 8005c18:	e728      	b.n	8005a6c <__gethex+0x124>
 8005c1a:	bf00      	nop
 8005c1c:	08009298 	.word	0x08009298
 8005c20:	08009220 	.word	0x08009220
 8005c24:	08009231 	.word	0x08009231
 8005c28:	1e71      	subs	r1, r6, #1
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	f000 fe5b 	bl	80068e6 <__any_on>
 8005c30:	2800      	cmp	r0, #0
 8005c32:	d1e6      	bne.n	8005c02 <__gethex+0x2ba>
 8005c34:	9802      	ldr	r0, [sp, #8]
 8005c36:	4621      	mov	r1, r4
 8005c38:	f000 fa02 	bl	8006040 <_Bfree>
 8005c3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005c3e:	2300      	movs	r3, #0
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	2750      	movs	r7, #80	; 0x50
 8005c44:	e712      	b.n	8005a6c <__gethex+0x124>
 8005c46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1f3      	bne.n	8005c34 <__gethex+0x2ec>
 8005c4c:	e7d9      	b.n	8005c02 <__gethex+0x2ba>
 8005c4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1d6      	bne.n	8005c02 <__gethex+0x2ba>
 8005c54:	e7ee      	b.n	8005c34 <__gethex+0x2ec>
 8005c56:	1e6f      	subs	r7, r5, #1
 8005c58:	f1ba 0f00 	cmp.w	sl, #0
 8005c5c:	d131      	bne.n	8005cc2 <__gethex+0x37a>
 8005c5e:	b127      	cbz	r7, 8005c6a <__gethex+0x322>
 8005c60:	4639      	mov	r1, r7
 8005c62:	4620      	mov	r0, r4
 8005c64:	f000 fe3f 	bl	80068e6 <__any_on>
 8005c68:	4682      	mov	sl, r0
 8005c6a:	117b      	asrs	r3, r7, #5
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005c72:	f007 071f 	and.w	r7, r7, #31
 8005c76:	fa01 f707 	lsl.w	r7, r1, r7
 8005c7a:	421f      	tst	r7, r3
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	4620      	mov	r0, r4
 8005c80:	bf18      	it	ne
 8005c82:	f04a 0a02 	orrne.w	sl, sl, #2
 8005c86:	1b76      	subs	r6, r6, r5
 8005c88:	f7ff fdf6 	bl	8005878 <rshift>
 8005c8c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005c90:	2702      	movs	r7, #2
 8005c92:	f1ba 0f00 	cmp.w	sl, #0
 8005c96:	d048      	beq.n	8005d2a <__gethex+0x3e2>
 8005c98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d015      	beq.n	8005ccc <__gethex+0x384>
 8005ca0:	2b03      	cmp	r3, #3
 8005ca2:	d017      	beq.n	8005cd4 <__gethex+0x38c>
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d109      	bne.n	8005cbc <__gethex+0x374>
 8005ca8:	f01a 0f02 	tst.w	sl, #2
 8005cac:	d006      	beq.n	8005cbc <__gethex+0x374>
 8005cae:	f8d9 0000 	ldr.w	r0, [r9]
 8005cb2:	ea4a 0a00 	orr.w	sl, sl, r0
 8005cb6:	f01a 0f01 	tst.w	sl, #1
 8005cba:	d10e      	bne.n	8005cda <__gethex+0x392>
 8005cbc:	f047 0710 	orr.w	r7, r7, #16
 8005cc0:	e033      	b.n	8005d2a <__gethex+0x3e2>
 8005cc2:	f04f 0a01 	mov.w	sl, #1
 8005cc6:	e7d0      	b.n	8005c6a <__gethex+0x322>
 8005cc8:	2701      	movs	r7, #1
 8005cca:	e7e2      	b.n	8005c92 <__gethex+0x34a>
 8005ccc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005cce:	f1c3 0301 	rsb	r3, r3, #1
 8005cd2:	9315      	str	r3, [sp, #84]	; 0x54
 8005cd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d0f0      	beq.n	8005cbc <__gethex+0x374>
 8005cda:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005cde:	f104 0314 	add.w	r3, r4, #20
 8005ce2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005ce6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005cea:	f04f 0c00 	mov.w	ip, #0
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cf4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8005cf8:	d01c      	beq.n	8005d34 <__gethex+0x3ec>
 8005cfa:	3201      	adds	r2, #1
 8005cfc:	6002      	str	r2, [r0, #0]
 8005cfe:	2f02      	cmp	r7, #2
 8005d00:	f104 0314 	add.w	r3, r4, #20
 8005d04:	d13d      	bne.n	8005d82 <__gethex+0x43a>
 8005d06:	f8d8 2000 	ldr.w	r2, [r8]
 8005d0a:	3a01      	subs	r2, #1
 8005d0c:	42b2      	cmp	r2, r6
 8005d0e:	d10a      	bne.n	8005d26 <__gethex+0x3de>
 8005d10:	1171      	asrs	r1, r6, #5
 8005d12:	2201      	movs	r2, #1
 8005d14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005d18:	f006 061f 	and.w	r6, r6, #31
 8005d1c:	fa02 f606 	lsl.w	r6, r2, r6
 8005d20:	421e      	tst	r6, r3
 8005d22:	bf18      	it	ne
 8005d24:	4617      	movne	r7, r2
 8005d26:	f047 0720 	orr.w	r7, r7, #32
 8005d2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d2c:	601c      	str	r4, [r3, #0]
 8005d2e:	9b05      	ldr	r3, [sp, #20]
 8005d30:	601d      	str	r5, [r3, #0]
 8005d32:	e69b      	b.n	8005a6c <__gethex+0x124>
 8005d34:	4299      	cmp	r1, r3
 8005d36:	f843 cc04 	str.w	ip, [r3, #-4]
 8005d3a:	d8d8      	bhi.n	8005cee <__gethex+0x3a6>
 8005d3c:	68a3      	ldr	r3, [r4, #8]
 8005d3e:	459b      	cmp	fp, r3
 8005d40:	db17      	blt.n	8005d72 <__gethex+0x42a>
 8005d42:	6861      	ldr	r1, [r4, #4]
 8005d44:	9802      	ldr	r0, [sp, #8]
 8005d46:	3101      	adds	r1, #1
 8005d48:	f000 f93a 	bl	8005fc0 <_Balloc>
 8005d4c:	4681      	mov	r9, r0
 8005d4e:	b918      	cbnz	r0, 8005d58 <__gethex+0x410>
 8005d50:	4b1a      	ldr	r3, [pc, #104]	; (8005dbc <__gethex+0x474>)
 8005d52:	4602      	mov	r2, r0
 8005d54:	2184      	movs	r1, #132	; 0x84
 8005d56:	e6ac      	b.n	8005ab2 <__gethex+0x16a>
 8005d58:	6922      	ldr	r2, [r4, #16]
 8005d5a:	3202      	adds	r2, #2
 8005d5c:	f104 010c 	add.w	r1, r4, #12
 8005d60:	0092      	lsls	r2, r2, #2
 8005d62:	300c      	adds	r0, #12
 8005d64:	f000 f91e 	bl	8005fa4 <memcpy>
 8005d68:	4621      	mov	r1, r4
 8005d6a:	9802      	ldr	r0, [sp, #8]
 8005d6c:	f000 f968 	bl	8006040 <_Bfree>
 8005d70:	464c      	mov	r4, r9
 8005d72:	6923      	ldr	r3, [r4, #16]
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005d7a:	6122      	str	r2, [r4, #16]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	615a      	str	r2, [r3, #20]
 8005d80:	e7bd      	b.n	8005cfe <__gethex+0x3b6>
 8005d82:	6922      	ldr	r2, [r4, #16]
 8005d84:	455a      	cmp	r2, fp
 8005d86:	dd0b      	ble.n	8005da0 <__gethex+0x458>
 8005d88:	2101      	movs	r1, #1
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	f7ff fd74 	bl	8005878 <rshift>
 8005d90:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005d94:	3501      	adds	r5, #1
 8005d96:	42ab      	cmp	r3, r5
 8005d98:	f6ff aed5 	blt.w	8005b46 <__gethex+0x1fe>
 8005d9c:	2701      	movs	r7, #1
 8005d9e:	e7c2      	b.n	8005d26 <__gethex+0x3de>
 8005da0:	f016 061f 	ands.w	r6, r6, #31
 8005da4:	d0fa      	beq.n	8005d9c <__gethex+0x454>
 8005da6:	4453      	add	r3, sl
 8005da8:	f1c6 0620 	rsb	r6, r6, #32
 8005dac:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005db0:	f000 f9f8 	bl	80061a4 <__hi0bits>
 8005db4:	42b0      	cmp	r0, r6
 8005db6:	dbe7      	blt.n	8005d88 <__gethex+0x440>
 8005db8:	e7f0      	b.n	8005d9c <__gethex+0x454>
 8005dba:	bf00      	nop
 8005dbc:	08009220 	.word	0x08009220

08005dc0 <L_shift>:
 8005dc0:	f1c2 0208 	rsb	r2, r2, #8
 8005dc4:	0092      	lsls	r2, r2, #2
 8005dc6:	b570      	push	{r4, r5, r6, lr}
 8005dc8:	f1c2 0620 	rsb	r6, r2, #32
 8005dcc:	6843      	ldr	r3, [r0, #4]
 8005dce:	6804      	ldr	r4, [r0, #0]
 8005dd0:	fa03 f506 	lsl.w	r5, r3, r6
 8005dd4:	432c      	orrs	r4, r5
 8005dd6:	40d3      	lsrs	r3, r2
 8005dd8:	6004      	str	r4, [r0, #0]
 8005dda:	f840 3f04 	str.w	r3, [r0, #4]!
 8005dde:	4288      	cmp	r0, r1
 8005de0:	d3f4      	bcc.n	8005dcc <L_shift+0xc>
 8005de2:	bd70      	pop	{r4, r5, r6, pc}

08005de4 <__match>:
 8005de4:	b530      	push	{r4, r5, lr}
 8005de6:	6803      	ldr	r3, [r0, #0]
 8005de8:	3301      	adds	r3, #1
 8005dea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dee:	b914      	cbnz	r4, 8005df6 <__match+0x12>
 8005df0:	6003      	str	r3, [r0, #0]
 8005df2:	2001      	movs	r0, #1
 8005df4:	bd30      	pop	{r4, r5, pc}
 8005df6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dfa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005dfe:	2d19      	cmp	r5, #25
 8005e00:	bf98      	it	ls
 8005e02:	3220      	addls	r2, #32
 8005e04:	42a2      	cmp	r2, r4
 8005e06:	d0f0      	beq.n	8005dea <__match+0x6>
 8005e08:	2000      	movs	r0, #0
 8005e0a:	e7f3      	b.n	8005df4 <__match+0x10>

08005e0c <__hexnan>:
 8005e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e10:	680b      	ldr	r3, [r1, #0]
 8005e12:	115e      	asrs	r6, r3, #5
 8005e14:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005e18:	f013 031f 	ands.w	r3, r3, #31
 8005e1c:	b087      	sub	sp, #28
 8005e1e:	bf18      	it	ne
 8005e20:	3604      	addne	r6, #4
 8005e22:	2500      	movs	r5, #0
 8005e24:	1f37      	subs	r7, r6, #4
 8005e26:	4690      	mov	r8, r2
 8005e28:	6802      	ldr	r2, [r0, #0]
 8005e2a:	9301      	str	r3, [sp, #4]
 8005e2c:	4682      	mov	sl, r0
 8005e2e:	f846 5c04 	str.w	r5, [r6, #-4]
 8005e32:	46b9      	mov	r9, r7
 8005e34:	463c      	mov	r4, r7
 8005e36:	9502      	str	r5, [sp, #8]
 8005e38:	46ab      	mov	fp, r5
 8005e3a:	7851      	ldrb	r1, [r2, #1]
 8005e3c:	1c53      	adds	r3, r2, #1
 8005e3e:	9303      	str	r3, [sp, #12]
 8005e40:	b341      	cbz	r1, 8005e94 <__hexnan+0x88>
 8005e42:	4608      	mov	r0, r1
 8005e44:	9205      	str	r2, [sp, #20]
 8005e46:	9104      	str	r1, [sp, #16]
 8005e48:	f7ff fd68 	bl	800591c <__hexdig_fun>
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	d14f      	bne.n	8005ef0 <__hexnan+0xe4>
 8005e50:	9904      	ldr	r1, [sp, #16]
 8005e52:	9a05      	ldr	r2, [sp, #20]
 8005e54:	2920      	cmp	r1, #32
 8005e56:	d818      	bhi.n	8005e8a <__hexnan+0x7e>
 8005e58:	9b02      	ldr	r3, [sp, #8]
 8005e5a:	459b      	cmp	fp, r3
 8005e5c:	dd13      	ble.n	8005e86 <__hexnan+0x7a>
 8005e5e:	454c      	cmp	r4, r9
 8005e60:	d206      	bcs.n	8005e70 <__hexnan+0x64>
 8005e62:	2d07      	cmp	r5, #7
 8005e64:	dc04      	bgt.n	8005e70 <__hexnan+0x64>
 8005e66:	462a      	mov	r2, r5
 8005e68:	4649      	mov	r1, r9
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	f7ff ffa8 	bl	8005dc0 <L_shift>
 8005e70:	4544      	cmp	r4, r8
 8005e72:	d950      	bls.n	8005f16 <__hexnan+0x10a>
 8005e74:	2300      	movs	r3, #0
 8005e76:	f1a4 0904 	sub.w	r9, r4, #4
 8005e7a:	f844 3c04 	str.w	r3, [r4, #-4]
 8005e7e:	f8cd b008 	str.w	fp, [sp, #8]
 8005e82:	464c      	mov	r4, r9
 8005e84:	461d      	mov	r5, r3
 8005e86:	9a03      	ldr	r2, [sp, #12]
 8005e88:	e7d7      	b.n	8005e3a <__hexnan+0x2e>
 8005e8a:	2929      	cmp	r1, #41	; 0x29
 8005e8c:	d156      	bne.n	8005f3c <__hexnan+0x130>
 8005e8e:	3202      	adds	r2, #2
 8005e90:	f8ca 2000 	str.w	r2, [sl]
 8005e94:	f1bb 0f00 	cmp.w	fp, #0
 8005e98:	d050      	beq.n	8005f3c <__hexnan+0x130>
 8005e9a:	454c      	cmp	r4, r9
 8005e9c:	d206      	bcs.n	8005eac <__hexnan+0xa0>
 8005e9e:	2d07      	cmp	r5, #7
 8005ea0:	dc04      	bgt.n	8005eac <__hexnan+0xa0>
 8005ea2:	462a      	mov	r2, r5
 8005ea4:	4649      	mov	r1, r9
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	f7ff ff8a 	bl	8005dc0 <L_shift>
 8005eac:	4544      	cmp	r4, r8
 8005eae:	d934      	bls.n	8005f1a <__hexnan+0x10e>
 8005eb0:	f1a8 0204 	sub.w	r2, r8, #4
 8005eb4:	4623      	mov	r3, r4
 8005eb6:	f853 1b04 	ldr.w	r1, [r3], #4
 8005eba:	f842 1f04 	str.w	r1, [r2, #4]!
 8005ebe:	429f      	cmp	r7, r3
 8005ec0:	d2f9      	bcs.n	8005eb6 <__hexnan+0xaa>
 8005ec2:	1b3b      	subs	r3, r7, r4
 8005ec4:	f023 0303 	bic.w	r3, r3, #3
 8005ec8:	3304      	adds	r3, #4
 8005eca:	3401      	adds	r4, #1
 8005ecc:	3e03      	subs	r6, #3
 8005ece:	42b4      	cmp	r4, r6
 8005ed0:	bf88      	it	hi
 8005ed2:	2304      	movhi	r3, #4
 8005ed4:	4443      	add	r3, r8
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f843 2b04 	str.w	r2, [r3], #4
 8005edc:	429f      	cmp	r7, r3
 8005ede:	d2fb      	bcs.n	8005ed8 <__hexnan+0xcc>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	b91b      	cbnz	r3, 8005eec <__hexnan+0xe0>
 8005ee4:	4547      	cmp	r7, r8
 8005ee6:	d127      	bne.n	8005f38 <__hexnan+0x12c>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	603b      	str	r3, [r7, #0]
 8005eec:	2005      	movs	r0, #5
 8005eee:	e026      	b.n	8005f3e <__hexnan+0x132>
 8005ef0:	3501      	adds	r5, #1
 8005ef2:	2d08      	cmp	r5, #8
 8005ef4:	f10b 0b01 	add.w	fp, fp, #1
 8005ef8:	dd06      	ble.n	8005f08 <__hexnan+0xfc>
 8005efa:	4544      	cmp	r4, r8
 8005efc:	d9c3      	bls.n	8005e86 <__hexnan+0x7a>
 8005efe:	2300      	movs	r3, #0
 8005f00:	f844 3c04 	str.w	r3, [r4, #-4]
 8005f04:	2501      	movs	r5, #1
 8005f06:	3c04      	subs	r4, #4
 8005f08:	6822      	ldr	r2, [r4, #0]
 8005f0a:	f000 000f 	and.w	r0, r0, #15
 8005f0e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005f12:	6022      	str	r2, [r4, #0]
 8005f14:	e7b7      	b.n	8005e86 <__hexnan+0x7a>
 8005f16:	2508      	movs	r5, #8
 8005f18:	e7b5      	b.n	8005e86 <__hexnan+0x7a>
 8005f1a:	9b01      	ldr	r3, [sp, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d0df      	beq.n	8005ee0 <__hexnan+0xd4>
 8005f20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f24:	f1c3 0320 	rsb	r3, r3, #32
 8005f28:	fa22 f303 	lsr.w	r3, r2, r3
 8005f2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005f30:	401a      	ands	r2, r3
 8005f32:	f846 2c04 	str.w	r2, [r6, #-4]
 8005f36:	e7d3      	b.n	8005ee0 <__hexnan+0xd4>
 8005f38:	3f04      	subs	r7, #4
 8005f3a:	e7d1      	b.n	8005ee0 <__hexnan+0xd4>
 8005f3c:	2004      	movs	r0, #4
 8005f3e:	b007      	add	sp, #28
 8005f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005f44 <_localeconv_r>:
 8005f44:	4800      	ldr	r0, [pc, #0]	; (8005f48 <_localeconv_r+0x4>)
 8005f46:	4770      	bx	lr
 8005f48:	2000019c 	.word	0x2000019c

08005f4c <_lseek_r>:
 8005f4c:	b538      	push	{r3, r4, r5, lr}
 8005f4e:	4d07      	ldr	r5, [pc, #28]	; (8005f6c <_lseek_r+0x20>)
 8005f50:	4604      	mov	r4, r0
 8005f52:	4608      	mov	r0, r1
 8005f54:	4611      	mov	r1, r2
 8005f56:	2200      	movs	r2, #0
 8005f58:	602a      	str	r2, [r5, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f002 f8da 	bl	8008114 <_lseek>
 8005f60:	1c43      	adds	r3, r0, #1
 8005f62:	d102      	bne.n	8005f6a <_lseek_r+0x1e>
 8005f64:	682b      	ldr	r3, [r5, #0]
 8005f66:	b103      	cbz	r3, 8005f6a <_lseek_r+0x1e>
 8005f68:	6023      	str	r3, [r4, #0]
 8005f6a:	bd38      	pop	{r3, r4, r5, pc}
 8005f6c:	2000054c 	.word	0x2000054c

08005f70 <malloc>:
 8005f70:	4b02      	ldr	r3, [pc, #8]	; (8005f7c <malloc+0xc>)
 8005f72:	4601      	mov	r1, r0
 8005f74:	6818      	ldr	r0, [r3, #0]
 8005f76:	f000 bd55 	b.w	8006a24 <_malloc_r>
 8005f7a:	bf00      	nop
 8005f7c:	20000044 	.word	0x20000044

08005f80 <__ascii_mbtowc>:
 8005f80:	b082      	sub	sp, #8
 8005f82:	b901      	cbnz	r1, 8005f86 <__ascii_mbtowc+0x6>
 8005f84:	a901      	add	r1, sp, #4
 8005f86:	b142      	cbz	r2, 8005f9a <__ascii_mbtowc+0x1a>
 8005f88:	b14b      	cbz	r3, 8005f9e <__ascii_mbtowc+0x1e>
 8005f8a:	7813      	ldrb	r3, [r2, #0]
 8005f8c:	600b      	str	r3, [r1, #0]
 8005f8e:	7812      	ldrb	r2, [r2, #0]
 8005f90:	1e10      	subs	r0, r2, #0
 8005f92:	bf18      	it	ne
 8005f94:	2001      	movne	r0, #1
 8005f96:	b002      	add	sp, #8
 8005f98:	4770      	bx	lr
 8005f9a:	4610      	mov	r0, r2
 8005f9c:	e7fb      	b.n	8005f96 <__ascii_mbtowc+0x16>
 8005f9e:	f06f 0001 	mvn.w	r0, #1
 8005fa2:	e7f8      	b.n	8005f96 <__ascii_mbtowc+0x16>

08005fa4 <memcpy>:
 8005fa4:	440a      	add	r2, r1
 8005fa6:	4291      	cmp	r1, r2
 8005fa8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005fac:	d100      	bne.n	8005fb0 <memcpy+0xc>
 8005fae:	4770      	bx	lr
 8005fb0:	b510      	push	{r4, lr}
 8005fb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fba:	4291      	cmp	r1, r2
 8005fbc:	d1f9      	bne.n	8005fb2 <memcpy+0xe>
 8005fbe:	bd10      	pop	{r4, pc}

08005fc0 <_Balloc>:
 8005fc0:	b570      	push	{r4, r5, r6, lr}
 8005fc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	460d      	mov	r5, r1
 8005fc8:	b976      	cbnz	r6, 8005fe8 <_Balloc+0x28>
 8005fca:	2010      	movs	r0, #16
 8005fcc:	f7ff ffd0 	bl	8005f70 <malloc>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	6260      	str	r0, [r4, #36]	; 0x24
 8005fd4:	b920      	cbnz	r0, 8005fe0 <_Balloc+0x20>
 8005fd6:	4b18      	ldr	r3, [pc, #96]	; (8006038 <_Balloc+0x78>)
 8005fd8:	4818      	ldr	r0, [pc, #96]	; (800603c <_Balloc+0x7c>)
 8005fda:	2166      	movs	r1, #102	; 0x66
 8005fdc:	f001 fb46 	bl	800766c <__assert_func>
 8005fe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fe4:	6006      	str	r6, [r0, #0]
 8005fe6:	60c6      	str	r6, [r0, #12]
 8005fe8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005fea:	68f3      	ldr	r3, [r6, #12]
 8005fec:	b183      	cbz	r3, 8006010 <_Balloc+0x50>
 8005fee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ff6:	b9b8      	cbnz	r0, 8006028 <_Balloc+0x68>
 8005ff8:	2101      	movs	r1, #1
 8005ffa:	fa01 f605 	lsl.w	r6, r1, r5
 8005ffe:	1d72      	adds	r2, r6, #5
 8006000:	0092      	lsls	r2, r2, #2
 8006002:	4620      	mov	r0, r4
 8006004:	f000 fc90 	bl	8006928 <_calloc_r>
 8006008:	b160      	cbz	r0, 8006024 <_Balloc+0x64>
 800600a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800600e:	e00e      	b.n	800602e <_Balloc+0x6e>
 8006010:	2221      	movs	r2, #33	; 0x21
 8006012:	2104      	movs	r1, #4
 8006014:	4620      	mov	r0, r4
 8006016:	f000 fc87 	bl	8006928 <_calloc_r>
 800601a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800601c:	60f0      	str	r0, [r6, #12]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1e4      	bne.n	8005fee <_Balloc+0x2e>
 8006024:	2000      	movs	r0, #0
 8006026:	bd70      	pop	{r4, r5, r6, pc}
 8006028:	6802      	ldr	r2, [r0, #0]
 800602a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800602e:	2300      	movs	r3, #0
 8006030:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006034:	e7f7      	b.n	8006026 <_Balloc+0x66>
 8006036:	bf00      	nop
 8006038:	080091ae 	.word	0x080091ae
 800603c:	080092ac 	.word	0x080092ac

08006040 <_Bfree>:
 8006040:	b570      	push	{r4, r5, r6, lr}
 8006042:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006044:	4605      	mov	r5, r0
 8006046:	460c      	mov	r4, r1
 8006048:	b976      	cbnz	r6, 8006068 <_Bfree+0x28>
 800604a:	2010      	movs	r0, #16
 800604c:	f7ff ff90 	bl	8005f70 <malloc>
 8006050:	4602      	mov	r2, r0
 8006052:	6268      	str	r0, [r5, #36]	; 0x24
 8006054:	b920      	cbnz	r0, 8006060 <_Bfree+0x20>
 8006056:	4b09      	ldr	r3, [pc, #36]	; (800607c <_Bfree+0x3c>)
 8006058:	4809      	ldr	r0, [pc, #36]	; (8006080 <_Bfree+0x40>)
 800605a:	218a      	movs	r1, #138	; 0x8a
 800605c:	f001 fb06 	bl	800766c <__assert_func>
 8006060:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006064:	6006      	str	r6, [r0, #0]
 8006066:	60c6      	str	r6, [r0, #12]
 8006068:	b13c      	cbz	r4, 800607a <_Bfree+0x3a>
 800606a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800606c:	6862      	ldr	r2, [r4, #4]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006074:	6021      	str	r1, [r4, #0]
 8006076:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800607a:	bd70      	pop	{r4, r5, r6, pc}
 800607c:	080091ae 	.word	0x080091ae
 8006080:	080092ac 	.word	0x080092ac

08006084 <__multadd>:
 8006084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006088:	690d      	ldr	r5, [r1, #16]
 800608a:	4607      	mov	r7, r0
 800608c:	460c      	mov	r4, r1
 800608e:	461e      	mov	r6, r3
 8006090:	f101 0c14 	add.w	ip, r1, #20
 8006094:	2000      	movs	r0, #0
 8006096:	f8dc 3000 	ldr.w	r3, [ip]
 800609a:	b299      	uxth	r1, r3
 800609c:	fb02 6101 	mla	r1, r2, r1, r6
 80060a0:	0c1e      	lsrs	r6, r3, #16
 80060a2:	0c0b      	lsrs	r3, r1, #16
 80060a4:	fb02 3306 	mla	r3, r2, r6, r3
 80060a8:	b289      	uxth	r1, r1
 80060aa:	3001      	adds	r0, #1
 80060ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80060b0:	4285      	cmp	r5, r0
 80060b2:	f84c 1b04 	str.w	r1, [ip], #4
 80060b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80060ba:	dcec      	bgt.n	8006096 <__multadd+0x12>
 80060bc:	b30e      	cbz	r6, 8006102 <__multadd+0x7e>
 80060be:	68a3      	ldr	r3, [r4, #8]
 80060c0:	42ab      	cmp	r3, r5
 80060c2:	dc19      	bgt.n	80060f8 <__multadd+0x74>
 80060c4:	6861      	ldr	r1, [r4, #4]
 80060c6:	4638      	mov	r0, r7
 80060c8:	3101      	adds	r1, #1
 80060ca:	f7ff ff79 	bl	8005fc0 <_Balloc>
 80060ce:	4680      	mov	r8, r0
 80060d0:	b928      	cbnz	r0, 80060de <__multadd+0x5a>
 80060d2:	4602      	mov	r2, r0
 80060d4:	4b0c      	ldr	r3, [pc, #48]	; (8006108 <__multadd+0x84>)
 80060d6:	480d      	ldr	r0, [pc, #52]	; (800610c <__multadd+0x88>)
 80060d8:	21b5      	movs	r1, #181	; 0xb5
 80060da:	f001 fac7 	bl	800766c <__assert_func>
 80060de:	6922      	ldr	r2, [r4, #16]
 80060e0:	3202      	adds	r2, #2
 80060e2:	f104 010c 	add.w	r1, r4, #12
 80060e6:	0092      	lsls	r2, r2, #2
 80060e8:	300c      	adds	r0, #12
 80060ea:	f7ff ff5b 	bl	8005fa4 <memcpy>
 80060ee:	4621      	mov	r1, r4
 80060f0:	4638      	mov	r0, r7
 80060f2:	f7ff ffa5 	bl	8006040 <_Bfree>
 80060f6:	4644      	mov	r4, r8
 80060f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80060fc:	3501      	adds	r5, #1
 80060fe:	615e      	str	r6, [r3, #20]
 8006100:	6125      	str	r5, [r4, #16]
 8006102:	4620      	mov	r0, r4
 8006104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006108:	08009220 	.word	0x08009220
 800610c:	080092ac 	.word	0x080092ac

08006110 <__s2b>:
 8006110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006114:	460c      	mov	r4, r1
 8006116:	4615      	mov	r5, r2
 8006118:	461f      	mov	r7, r3
 800611a:	2209      	movs	r2, #9
 800611c:	3308      	adds	r3, #8
 800611e:	4606      	mov	r6, r0
 8006120:	fb93 f3f2 	sdiv	r3, r3, r2
 8006124:	2100      	movs	r1, #0
 8006126:	2201      	movs	r2, #1
 8006128:	429a      	cmp	r2, r3
 800612a:	db09      	blt.n	8006140 <__s2b+0x30>
 800612c:	4630      	mov	r0, r6
 800612e:	f7ff ff47 	bl	8005fc0 <_Balloc>
 8006132:	b940      	cbnz	r0, 8006146 <__s2b+0x36>
 8006134:	4602      	mov	r2, r0
 8006136:	4b19      	ldr	r3, [pc, #100]	; (800619c <__s2b+0x8c>)
 8006138:	4819      	ldr	r0, [pc, #100]	; (80061a0 <__s2b+0x90>)
 800613a:	21ce      	movs	r1, #206	; 0xce
 800613c:	f001 fa96 	bl	800766c <__assert_func>
 8006140:	0052      	lsls	r2, r2, #1
 8006142:	3101      	adds	r1, #1
 8006144:	e7f0      	b.n	8006128 <__s2b+0x18>
 8006146:	9b08      	ldr	r3, [sp, #32]
 8006148:	6143      	str	r3, [r0, #20]
 800614a:	2d09      	cmp	r5, #9
 800614c:	f04f 0301 	mov.w	r3, #1
 8006150:	6103      	str	r3, [r0, #16]
 8006152:	dd16      	ble.n	8006182 <__s2b+0x72>
 8006154:	f104 0909 	add.w	r9, r4, #9
 8006158:	46c8      	mov	r8, r9
 800615a:	442c      	add	r4, r5
 800615c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006160:	4601      	mov	r1, r0
 8006162:	3b30      	subs	r3, #48	; 0x30
 8006164:	220a      	movs	r2, #10
 8006166:	4630      	mov	r0, r6
 8006168:	f7ff ff8c 	bl	8006084 <__multadd>
 800616c:	45a0      	cmp	r8, r4
 800616e:	d1f5      	bne.n	800615c <__s2b+0x4c>
 8006170:	f1a5 0408 	sub.w	r4, r5, #8
 8006174:	444c      	add	r4, r9
 8006176:	1b2d      	subs	r5, r5, r4
 8006178:	1963      	adds	r3, r4, r5
 800617a:	42bb      	cmp	r3, r7
 800617c:	db04      	blt.n	8006188 <__s2b+0x78>
 800617e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006182:	340a      	adds	r4, #10
 8006184:	2509      	movs	r5, #9
 8006186:	e7f6      	b.n	8006176 <__s2b+0x66>
 8006188:	f814 3b01 	ldrb.w	r3, [r4], #1
 800618c:	4601      	mov	r1, r0
 800618e:	3b30      	subs	r3, #48	; 0x30
 8006190:	220a      	movs	r2, #10
 8006192:	4630      	mov	r0, r6
 8006194:	f7ff ff76 	bl	8006084 <__multadd>
 8006198:	e7ee      	b.n	8006178 <__s2b+0x68>
 800619a:	bf00      	nop
 800619c:	08009220 	.word	0x08009220
 80061a0:	080092ac 	.word	0x080092ac

080061a4 <__hi0bits>:
 80061a4:	0c02      	lsrs	r2, r0, #16
 80061a6:	0412      	lsls	r2, r2, #16
 80061a8:	4603      	mov	r3, r0
 80061aa:	b9ca      	cbnz	r2, 80061e0 <__hi0bits+0x3c>
 80061ac:	0403      	lsls	r3, r0, #16
 80061ae:	2010      	movs	r0, #16
 80061b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80061b4:	bf04      	itt	eq
 80061b6:	021b      	lsleq	r3, r3, #8
 80061b8:	3008      	addeq	r0, #8
 80061ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80061be:	bf04      	itt	eq
 80061c0:	011b      	lsleq	r3, r3, #4
 80061c2:	3004      	addeq	r0, #4
 80061c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80061c8:	bf04      	itt	eq
 80061ca:	009b      	lsleq	r3, r3, #2
 80061cc:	3002      	addeq	r0, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	db05      	blt.n	80061de <__hi0bits+0x3a>
 80061d2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80061d6:	f100 0001 	add.w	r0, r0, #1
 80061da:	bf08      	it	eq
 80061dc:	2020      	moveq	r0, #32
 80061de:	4770      	bx	lr
 80061e0:	2000      	movs	r0, #0
 80061e2:	e7e5      	b.n	80061b0 <__hi0bits+0xc>

080061e4 <__lo0bits>:
 80061e4:	6803      	ldr	r3, [r0, #0]
 80061e6:	4602      	mov	r2, r0
 80061e8:	f013 0007 	ands.w	r0, r3, #7
 80061ec:	d00b      	beq.n	8006206 <__lo0bits+0x22>
 80061ee:	07d9      	lsls	r1, r3, #31
 80061f0:	d421      	bmi.n	8006236 <__lo0bits+0x52>
 80061f2:	0798      	lsls	r0, r3, #30
 80061f4:	bf49      	itett	mi
 80061f6:	085b      	lsrmi	r3, r3, #1
 80061f8:	089b      	lsrpl	r3, r3, #2
 80061fa:	2001      	movmi	r0, #1
 80061fc:	6013      	strmi	r3, [r2, #0]
 80061fe:	bf5c      	itt	pl
 8006200:	6013      	strpl	r3, [r2, #0]
 8006202:	2002      	movpl	r0, #2
 8006204:	4770      	bx	lr
 8006206:	b299      	uxth	r1, r3
 8006208:	b909      	cbnz	r1, 800620e <__lo0bits+0x2a>
 800620a:	0c1b      	lsrs	r3, r3, #16
 800620c:	2010      	movs	r0, #16
 800620e:	b2d9      	uxtb	r1, r3
 8006210:	b909      	cbnz	r1, 8006216 <__lo0bits+0x32>
 8006212:	3008      	adds	r0, #8
 8006214:	0a1b      	lsrs	r3, r3, #8
 8006216:	0719      	lsls	r1, r3, #28
 8006218:	bf04      	itt	eq
 800621a:	091b      	lsreq	r3, r3, #4
 800621c:	3004      	addeq	r0, #4
 800621e:	0799      	lsls	r1, r3, #30
 8006220:	bf04      	itt	eq
 8006222:	089b      	lsreq	r3, r3, #2
 8006224:	3002      	addeq	r0, #2
 8006226:	07d9      	lsls	r1, r3, #31
 8006228:	d403      	bmi.n	8006232 <__lo0bits+0x4e>
 800622a:	085b      	lsrs	r3, r3, #1
 800622c:	f100 0001 	add.w	r0, r0, #1
 8006230:	d003      	beq.n	800623a <__lo0bits+0x56>
 8006232:	6013      	str	r3, [r2, #0]
 8006234:	4770      	bx	lr
 8006236:	2000      	movs	r0, #0
 8006238:	4770      	bx	lr
 800623a:	2020      	movs	r0, #32
 800623c:	4770      	bx	lr
	...

08006240 <__i2b>:
 8006240:	b510      	push	{r4, lr}
 8006242:	460c      	mov	r4, r1
 8006244:	2101      	movs	r1, #1
 8006246:	f7ff febb 	bl	8005fc0 <_Balloc>
 800624a:	4602      	mov	r2, r0
 800624c:	b928      	cbnz	r0, 800625a <__i2b+0x1a>
 800624e:	4b05      	ldr	r3, [pc, #20]	; (8006264 <__i2b+0x24>)
 8006250:	4805      	ldr	r0, [pc, #20]	; (8006268 <__i2b+0x28>)
 8006252:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006256:	f001 fa09 	bl	800766c <__assert_func>
 800625a:	2301      	movs	r3, #1
 800625c:	6144      	str	r4, [r0, #20]
 800625e:	6103      	str	r3, [r0, #16]
 8006260:	bd10      	pop	{r4, pc}
 8006262:	bf00      	nop
 8006264:	08009220 	.word	0x08009220
 8006268:	080092ac 	.word	0x080092ac

0800626c <__multiply>:
 800626c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006270:	4691      	mov	r9, r2
 8006272:	690a      	ldr	r2, [r1, #16]
 8006274:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006278:	429a      	cmp	r2, r3
 800627a:	bfb8      	it	lt
 800627c:	460b      	movlt	r3, r1
 800627e:	460c      	mov	r4, r1
 8006280:	bfbc      	itt	lt
 8006282:	464c      	movlt	r4, r9
 8006284:	4699      	movlt	r9, r3
 8006286:	6927      	ldr	r7, [r4, #16]
 8006288:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800628c:	68a3      	ldr	r3, [r4, #8]
 800628e:	6861      	ldr	r1, [r4, #4]
 8006290:	eb07 060a 	add.w	r6, r7, sl
 8006294:	42b3      	cmp	r3, r6
 8006296:	b085      	sub	sp, #20
 8006298:	bfb8      	it	lt
 800629a:	3101      	addlt	r1, #1
 800629c:	f7ff fe90 	bl	8005fc0 <_Balloc>
 80062a0:	b930      	cbnz	r0, 80062b0 <__multiply+0x44>
 80062a2:	4602      	mov	r2, r0
 80062a4:	4b43      	ldr	r3, [pc, #268]	; (80063b4 <__multiply+0x148>)
 80062a6:	4844      	ldr	r0, [pc, #272]	; (80063b8 <__multiply+0x14c>)
 80062a8:	f240 115d 	movw	r1, #349	; 0x15d
 80062ac:	f001 f9de 	bl	800766c <__assert_func>
 80062b0:	f100 0514 	add.w	r5, r0, #20
 80062b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80062b8:	462b      	mov	r3, r5
 80062ba:	2200      	movs	r2, #0
 80062bc:	4543      	cmp	r3, r8
 80062be:	d321      	bcc.n	8006304 <__multiply+0x98>
 80062c0:	f104 0314 	add.w	r3, r4, #20
 80062c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80062c8:	f109 0314 	add.w	r3, r9, #20
 80062cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80062d0:	9202      	str	r2, [sp, #8]
 80062d2:	1b3a      	subs	r2, r7, r4
 80062d4:	3a15      	subs	r2, #21
 80062d6:	f022 0203 	bic.w	r2, r2, #3
 80062da:	3204      	adds	r2, #4
 80062dc:	f104 0115 	add.w	r1, r4, #21
 80062e0:	428f      	cmp	r7, r1
 80062e2:	bf38      	it	cc
 80062e4:	2204      	movcc	r2, #4
 80062e6:	9201      	str	r2, [sp, #4]
 80062e8:	9a02      	ldr	r2, [sp, #8]
 80062ea:	9303      	str	r3, [sp, #12]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d80c      	bhi.n	800630a <__multiply+0x9e>
 80062f0:	2e00      	cmp	r6, #0
 80062f2:	dd03      	ble.n	80062fc <__multiply+0x90>
 80062f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d059      	beq.n	80063b0 <__multiply+0x144>
 80062fc:	6106      	str	r6, [r0, #16]
 80062fe:	b005      	add	sp, #20
 8006300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006304:	f843 2b04 	str.w	r2, [r3], #4
 8006308:	e7d8      	b.n	80062bc <__multiply+0x50>
 800630a:	f8b3 a000 	ldrh.w	sl, [r3]
 800630e:	f1ba 0f00 	cmp.w	sl, #0
 8006312:	d023      	beq.n	800635c <__multiply+0xf0>
 8006314:	f104 0e14 	add.w	lr, r4, #20
 8006318:	46a9      	mov	r9, r5
 800631a:	f04f 0c00 	mov.w	ip, #0
 800631e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006322:	f8d9 1000 	ldr.w	r1, [r9]
 8006326:	fa1f fb82 	uxth.w	fp, r2
 800632a:	b289      	uxth	r1, r1
 800632c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006330:	4461      	add	r1, ip
 8006332:	f8d9 c000 	ldr.w	ip, [r9]
 8006336:	0c12      	lsrs	r2, r2, #16
 8006338:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800633c:	fb0a c202 	mla	r2, sl, r2, ip
 8006340:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006344:	b289      	uxth	r1, r1
 8006346:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800634a:	4577      	cmp	r7, lr
 800634c:	f849 1b04 	str.w	r1, [r9], #4
 8006350:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006354:	d8e3      	bhi.n	800631e <__multiply+0xb2>
 8006356:	9a01      	ldr	r2, [sp, #4]
 8006358:	f845 c002 	str.w	ip, [r5, r2]
 800635c:	9a03      	ldr	r2, [sp, #12]
 800635e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006362:	3304      	adds	r3, #4
 8006364:	f1b9 0f00 	cmp.w	r9, #0
 8006368:	d020      	beq.n	80063ac <__multiply+0x140>
 800636a:	6829      	ldr	r1, [r5, #0]
 800636c:	f104 0c14 	add.w	ip, r4, #20
 8006370:	46ae      	mov	lr, r5
 8006372:	f04f 0a00 	mov.w	sl, #0
 8006376:	f8bc b000 	ldrh.w	fp, [ip]
 800637a:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800637e:	fb09 220b 	mla	r2, r9, fp, r2
 8006382:	4492      	add	sl, r2
 8006384:	b289      	uxth	r1, r1
 8006386:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800638a:	f84e 1b04 	str.w	r1, [lr], #4
 800638e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006392:	f8be 1000 	ldrh.w	r1, [lr]
 8006396:	0c12      	lsrs	r2, r2, #16
 8006398:	fb09 1102 	mla	r1, r9, r2, r1
 800639c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80063a0:	4567      	cmp	r7, ip
 80063a2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80063a6:	d8e6      	bhi.n	8006376 <__multiply+0x10a>
 80063a8:	9a01      	ldr	r2, [sp, #4]
 80063aa:	50a9      	str	r1, [r5, r2]
 80063ac:	3504      	adds	r5, #4
 80063ae:	e79b      	b.n	80062e8 <__multiply+0x7c>
 80063b0:	3e01      	subs	r6, #1
 80063b2:	e79d      	b.n	80062f0 <__multiply+0x84>
 80063b4:	08009220 	.word	0x08009220
 80063b8:	080092ac 	.word	0x080092ac

080063bc <__pow5mult>:
 80063bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063c0:	4615      	mov	r5, r2
 80063c2:	f012 0203 	ands.w	r2, r2, #3
 80063c6:	4606      	mov	r6, r0
 80063c8:	460f      	mov	r7, r1
 80063ca:	d007      	beq.n	80063dc <__pow5mult+0x20>
 80063cc:	4c25      	ldr	r4, [pc, #148]	; (8006464 <__pow5mult+0xa8>)
 80063ce:	3a01      	subs	r2, #1
 80063d0:	2300      	movs	r3, #0
 80063d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80063d6:	f7ff fe55 	bl	8006084 <__multadd>
 80063da:	4607      	mov	r7, r0
 80063dc:	10ad      	asrs	r5, r5, #2
 80063de:	d03d      	beq.n	800645c <__pow5mult+0xa0>
 80063e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80063e2:	b97c      	cbnz	r4, 8006404 <__pow5mult+0x48>
 80063e4:	2010      	movs	r0, #16
 80063e6:	f7ff fdc3 	bl	8005f70 <malloc>
 80063ea:	4602      	mov	r2, r0
 80063ec:	6270      	str	r0, [r6, #36]	; 0x24
 80063ee:	b928      	cbnz	r0, 80063fc <__pow5mult+0x40>
 80063f0:	4b1d      	ldr	r3, [pc, #116]	; (8006468 <__pow5mult+0xac>)
 80063f2:	481e      	ldr	r0, [pc, #120]	; (800646c <__pow5mult+0xb0>)
 80063f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80063f8:	f001 f938 	bl	800766c <__assert_func>
 80063fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006400:	6004      	str	r4, [r0, #0]
 8006402:	60c4      	str	r4, [r0, #12]
 8006404:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006408:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800640c:	b94c      	cbnz	r4, 8006422 <__pow5mult+0x66>
 800640e:	f240 2171 	movw	r1, #625	; 0x271
 8006412:	4630      	mov	r0, r6
 8006414:	f7ff ff14 	bl	8006240 <__i2b>
 8006418:	2300      	movs	r3, #0
 800641a:	f8c8 0008 	str.w	r0, [r8, #8]
 800641e:	4604      	mov	r4, r0
 8006420:	6003      	str	r3, [r0, #0]
 8006422:	f04f 0900 	mov.w	r9, #0
 8006426:	07eb      	lsls	r3, r5, #31
 8006428:	d50a      	bpl.n	8006440 <__pow5mult+0x84>
 800642a:	4639      	mov	r1, r7
 800642c:	4622      	mov	r2, r4
 800642e:	4630      	mov	r0, r6
 8006430:	f7ff ff1c 	bl	800626c <__multiply>
 8006434:	4639      	mov	r1, r7
 8006436:	4680      	mov	r8, r0
 8006438:	4630      	mov	r0, r6
 800643a:	f7ff fe01 	bl	8006040 <_Bfree>
 800643e:	4647      	mov	r7, r8
 8006440:	106d      	asrs	r5, r5, #1
 8006442:	d00b      	beq.n	800645c <__pow5mult+0xa0>
 8006444:	6820      	ldr	r0, [r4, #0]
 8006446:	b938      	cbnz	r0, 8006458 <__pow5mult+0x9c>
 8006448:	4622      	mov	r2, r4
 800644a:	4621      	mov	r1, r4
 800644c:	4630      	mov	r0, r6
 800644e:	f7ff ff0d 	bl	800626c <__multiply>
 8006452:	6020      	str	r0, [r4, #0]
 8006454:	f8c0 9000 	str.w	r9, [r0]
 8006458:	4604      	mov	r4, r0
 800645a:	e7e4      	b.n	8006426 <__pow5mult+0x6a>
 800645c:	4638      	mov	r0, r7
 800645e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006462:	bf00      	nop
 8006464:	080093f8 	.word	0x080093f8
 8006468:	080091ae 	.word	0x080091ae
 800646c:	080092ac 	.word	0x080092ac

08006470 <__lshift>:
 8006470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006474:	460c      	mov	r4, r1
 8006476:	6849      	ldr	r1, [r1, #4]
 8006478:	6923      	ldr	r3, [r4, #16]
 800647a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800647e:	68a3      	ldr	r3, [r4, #8]
 8006480:	4607      	mov	r7, r0
 8006482:	4691      	mov	r9, r2
 8006484:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006488:	f108 0601 	add.w	r6, r8, #1
 800648c:	42b3      	cmp	r3, r6
 800648e:	db0b      	blt.n	80064a8 <__lshift+0x38>
 8006490:	4638      	mov	r0, r7
 8006492:	f7ff fd95 	bl	8005fc0 <_Balloc>
 8006496:	4605      	mov	r5, r0
 8006498:	b948      	cbnz	r0, 80064ae <__lshift+0x3e>
 800649a:	4602      	mov	r2, r0
 800649c:	4b2a      	ldr	r3, [pc, #168]	; (8006548 <__lshift+0xd8>)
 800649e:	482b      	ldr	r0, [pc, #172]	; (800654c <__lshift+0xdc>)
 80064a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80064a4:	f001 f8e2 	bl	800766c <__assert_func>
 80064a8:	3101      	adds	r1, #1
 80064aa:	005b      	lsls	r3, r3, #1
 80064ac:	e7ee      	b.n	800648c <__lshift+0x1c>
 80064ae:	2300      	movs	r3, #0
 80064b0:	f100 0114 	add.w	r1, r0, #20
 80064b4:	f100 0210 	add.w	r2, r0, #16
 80064b8:	4618      	mov	r0, r3
 80064ba:	4553      	cmp	r3, sl
 80064bc:	db37      	blt.n	800652e <__lshift+0xbe>
 80064be:	6920      	ldr	r0, [r4, #16]
 80064c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80064c4:	f104 0314 	add.w	r3, r4, #20
 80064c8:	f019 091f 	ands.w	r9, r9, #31
 80064cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80064d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80064d4:	d02f      	beq.n	8006536 <__lshift+0xc6>
 80064d6:	f1c9 0e20 	rsb	lr, r9, #32
 80064da:	468a      	mov	sl, r1
 80064dc:	f04f 0c00 	mov.w	ip, #0
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	fa02 f209 	lsl.w	r2, r2, r9
 80064e6:	ea42 020c 	orr.w	r2, r2, ip
 80064ea:	f84a 2b04 	str.w	r2, [sl], #4
 80064ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80064f2:	4298      	cmp	r0, r3
 80064f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80064f8:	d8f2      	bhi.n	80064e0 <__lshift+0x70>
 80064fa:	1b03      	subs	r3, r0, r4
 80064fc:	3b15      	subs	r3, #21
 80064fe:	f023 0303 	bic.w	r3, r3, #3
 8006502:	3304      	adds	r3, #4
 8006504:	f104 0215 	add.w	r2, r4, #21
 8006508:	4290      	cmp	r0, r2
 800650a:	bf38      	it	cc
 800650c:	2304      	movcc	r3, #4
 800650e:	f841 c003 	str.w	ip, [r1, r3]
 8006512:	f1bc 0f00 	cmp.w	ip, #0
 8006516:	d001      	beq.n	800651c <__lshift+0xac>
 8006518:	f108 0602 	add.w	r6, r8, #2
 800651c:	3e01      	subs	r6, #1
 800651e:	4638      	mov	r0, r7
 8006520:	612e      	str	r6, [r5, #16]
 8006522:	4621      	mov	r1, r4
 8006524:	f7ff fd8c 	bl	8006040 <_Bfree>
 8006528:	4628      	mov	r0, r5
 800652a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800652e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006532:	3301      	adds	r3, #1
 8006534:	e7c1      	b.n	80064ba <__lshift+0x4a>
 8006536:	3904      	subs	r1, #4
 8006538:	f853 2b04 	ldr.w	r2, [r3], #4
 800653c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006540:	4298      	cmp	r0, r3
 8006542:	d8f9      	bhi.n	8006538 <__lshift+0xc8>
 8006544:	e7ea      	b.n	800651c <__lshift+0xac>
 8006546:	bf00      	nop
 8006548:	08009220 	.word	0x08009220
 800654c:	080092ac 	.word	0x080092ac

08006550 <__mcmp>:
 8006550:	690a      	ldr	r2, [r1, #16]
 8006552:	4603      	mov	r3, r0
 8006554:	6900      	ldr	r0, [r0, #16]
 8006556:	1a80      	subs	r0, r0, r2
 8006558:	b530      	push	{r4, r5, lr}
 800655a:	d10d      	bne.n	8006578 <__mcmp+0x28>
 800655c:	3314      	adds	r3, #20
 800655e:	3114      	adds	r1, #20
 8006560:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006564:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006568:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800656c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006570:	4295      	cmp	r5, r2
 8006572:	d002      	beq.n	800657a <__mcmp+0x2a>
 8006574:	d304      	bcc.n	8006580 <__mcmp+0x30>
 8006576:	2001      	movs	r0, #1
 8006578:	bd30      	pop	{r4, r5, pc}
 800657a:	42a3      	cmp	r3, r4
 800657c:	d3f4      	bcc.n	8006568 <__mcmp+0x18>
 800657e:	e7fb      	b.n	8006578 <__mcmp+0x28>
 8006580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006584:	e7f8      	b.n	8006578 <__mcmp+0x28>
	...

08006588 <__mdiff>:
 8006588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800658c:	460d      	mov	r5, r1
 800658e:	4607      	mov	r7, r0
 8006590:	4611      	mov	r1, r2
 8006592:	4628      	mov	r0, r5
 8006594:	4614      	mov	r4, r2
 8006596:	f7ff ffdb 	bl	8006550 <__mcmp>
 800659a:	1e06      	subs	r6, r0, #0
 800659c:	d111      	bne.n	80065c2 <__mdiff+0x3a>
 800659e:	4631      	mov	r1, r6
 80065a0:	4638      	mov	r0, r7
 80065a2:	f7ff fd0d 	bl	8005fc0 <_Balloc>
 80065a6:	4602      	mov	r2, r0
 80065a8:	b928      	cbnz	r0, 80065b6 <__mdiff+0x2e>
 80065aa:	4b39      	ldr	r3, [pc, #228]	; (8006690 <__mdiff+0x108>)
 80065ac:	f240 2132 	movw	r1, #562	; 0x232
 80065b0:	4838      	ldr	r0, [pc, #224]	; (8006694 <__mdiff+0x10c>)
 80065b2:	f001 f85b 	bl	800766c <__assert_func>
 80065b6:	2301      	movs	r3, #1
 80065b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80065bc:	4610      	mov	r0, r2
 80065be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c2:	bfa4      	itt	ge
 80065c4:	4623      	movge	r3, r4
 80065c6:	462c      	movge	r4, r5
 80065c8:	4638      	mov	r0, r7
 80065ca:	6861      	ldr	r1, [r4, #4]
 80065cc:	bfa6      	itte	ge
 80065ce:	461d      	movge	r5, r3
 80065d0:	2600      	movge	r6, #0
 80065d2:	2601      	movlt	r6, #1
 80065d4:	f7ff fcf4 	bl	8005fc0 <_Balloc>
 80065d8:	4602      	mov	r2, r0
 80065da:	b918      	cbnz	r0, 80065e4 <__mdiff+0x5c>
 80065dc:	4b2c      	ldr	r3, [pc, #176]	; (8006690 <__mdiff+0x108>)
 80065de:	f44f 7110 	mov.w	r1, #576	; 0x240
 80065e2:	e7e5      	b.n	80065b0 <__mdiff+0x28>
 80065e4:	6927      	ldr	r7, [r4, #16]
 80065e6:	60c6      	str	r6, [r0, #12]
 80065e8:	692e      	ldr	r6, [r5, #16]
 80065ea:	f104 0014 	add.w	r0, r4, #20
 80065ee:	f105 0914 	add.w	r9, r5, #20
 80065f2:	f102 0e14 	add.w	lr, r2, #20
 80065f6:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 80065fa:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80065fe:	3410      	adds	r4, #16
 8006600:	46f2      	mov	sl, lr
 8006602:	2100      	movs	r1, #0
 8006604:	f859 3b04 	ldr.w	r3, [r9], #4
 8006608:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800660c:	fa1f f883 	uxth.w	r8, r3
 8006610:	fa11 f18b 	uxtah	r1, r1, fp
 8006614:	0c1b      	lsrs	r3, r3, #16
 8006616:	eba1 0808 	sub.w	r8, r1, r8
 800661a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800661e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006622:	fa1f f888 	uxth.w	r8, r8
 8006626:	1419      	asrs	r1, r3, #16
 8006628:	454e      	cmp	r6, r9
 800662a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800662e:	f84a 3b04 	str.w	r3, [sl], #4
 8006632:	d8e7      	bhi.n	8006604 <__mdiff+0x7c>
 8006634:	1b73      	subs	r3, r6, r5
 8006636:	3b15      	subs	r3, #21
 8006638:	f023 0303 	bic.w	r3, r3, #3
 800663c:	3304      	adds	r3, #4
 800663e:	3515      	adds	r5, #21
 8006640:	42ae      	cmp	r6, r5
 8006642:	bf38      	it	cc
 8006644:	2304      	movcc	r3, #4
 8006646:	4418      	add	r0, r3
 8006648:	4473      	add	r3, lr
 800664a:	469e      	mov	lr, r3
 800664c:	4606      	mov	r6, r0
 800664e:	4566      	cmp	r6, ip
 8006650:	d30e      	bcc.n	8006670 <__mdiff+0xe8>
 8006652:	f10c 0103 	add.w	r1, ip, #3
 8006656:	1a09      	subs	r1, r1, r0
 8006658:	f021 0103 	bic.w	r1, r1, #3
 800665c:	3803      	subs	r0, #3
 800665e:	4584      	cmp	ip, r0
 8006660:	bf38      	it	cc
 8006662:	2100      	movcc	r1, #0
 8006664:	4419      	add	r1, r3
 8006666:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800666a:	b17b      	cbz	r3, 800668c <__mdiff+0x104>
 800666c:	6117      	str	r7, [r2, #16]
 800666e:	e7a5      	b.n	80065bc <__mdiff+0x34>
 8006670:	f856 8b04 	ldr.w	r8, [r6], #4
 8006674:	fa11 f488 	uxtah	r4, r1, r8
 8006678:	1425      	asrs	r5, r4, #16
 800667a:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800667e:	b2a4      	uxth	r4, r4
 8006680:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8006684:	f84e 4b04 	str.w	r4, [lr], #4
 8006688:	1429      	asrs	r1, r5, #16
 800668a:	e7e0      	b.n	800664e <__mdiff+0xc6>
 800668c:	3f01      	subs	r7, #1
 800668e:	e7ea      	b.n	8006666 <__mdiff+0xde>
 8006690:	08009220 	.word	0x08009220
 8006694:	080092ac 	.word	0x080092ac

08006698 <__ulp>:
 8006698:	4b11      	ldr	r3, [pc, #68]	; (80066e0 <__ulp+0x48>)
 800669a:	400b      	ands	r3, r1
 800669c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	dd02      	ble.n	80066aa <__ulp+0x12>
 80066a4:	2000      	movs	r0, #0
 80066a6:	4619      	mov	r1, r3
 80066a8:	4770      	bx	lr
 80066aa:	425b      	negs	r3, r3
 80066ac:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80066b0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80066b4:	f04f 0000 	mov.w	r0, #0
 80066b8:	f04f 0100 	mov.w	r1, #0
 80066bc:	da04      	bge.n	80066c8 <__ulp+0x30>
 80066be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80066c2:	fa43 f102 	asr.w	r1, r3, r2
 80066c6:	4770      	bx	lr
 80066c8:	f1a2 0314 	sub.w	r3, r2, #20
 80066cc:	2b1e      	cmp	r3, #30
 80066ce:	bfda      	itte	le
 80066d0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80066d4:	fa22 f303 	lsrle.w	r3, r2, r3
 80066d8:	2301      	movgt	r3, #1
 80066da:	4618      	mov	r0, r3
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	7ff00000 	.word	0x7ff00000

080066e4 <__b2d>:
 80066e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066e8:	6907      	ldr	r7, [r0, #16]
 80066ea:	f100 0914 	add.w	r9, r0, #20
 80066ee:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80066f2:	f1a7 0804 	sub.w	r8, r7, #4
 80066f6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80066fa:	4630      	mov	r0, r6
 80066fc:	f7ff fd52 	bl	80061a4 <__hi0bits>
 8006700:	f1c0 0320 	rsb	r3, r0, #32
 8006704:	280a      	cmp	r0, #10
 8006706:	600b      	str	r3, [r1, #0]
 8006708:	491f      	ldr	r1, [pc, #124]	; (8006788 <__b2d+0xa4>)
 800670a:	dc17      	bgt.n	800673c <__b2d+0x58>
 800670c:	f1c0 0c0b 	rsb	ip, r0, #11
 8006710:	45c1      	cmp	r9, r8
 8006712:	fa26 f30c 	lsr.w	r3, r6, ip
 8006716:	bf38      	it	cc
 8006718:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800671c:	ea43 0501 	orr.w	r5, r3, r1
 8006720:	bf28      	it	cs
 8006722:	2200      	movcs	r2, #0
 8006724:	f100 0315 	add.w	r3, r0, #21
 8006728:	fa06 f303 	lsl.w	r3, r6, r3
 800672c:	fa22 f20c 	lsr.w	r2, r2, ip
 8006730:	ea43 0402 	orr.w	r4, r3, r2
 8006734:	4620      	mov	r0, r4
 8006736:	4629      	mov	r1, r5
 8006738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800673c:	45c1      	cmp	r9, r8
 800673e:	bf3a      	itte	cc
 8006740:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006744:	f1a7 0808 	subcc.w	r8, r7, #8
 8006748:	2200      	movcs	r2, #0
 800674a:	f1b0 030b 	subs.w	r3, r0, #11
 800674e:	d016      	beq.n	800677e <__b2d+0x9a>
 8006750:	f1c3 0720 	rsb	r7, r3, #32
 8006754:	fa22 f107 	lsr.w	r1, r2, r7
 8006758:	45c8      	cmp	r8, r9
 800675a:	fa06 f603 	lsl.w	r6, r6, r3
 800675e:	ea46 0601 	orr.w	r6, r6, r1
 8006762:	bf8c      	ite	hi
 8006764:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006768:	2100      	movls	r1, #0
 800676a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800676e:	fa02 f003 	lsl.w	r0, r2, r3
 8006772:	40f9      	lsrs	r1, r7
 8006774:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006778:	ea40 0401 	orr.w	r4, r0, r1
 800677c:	e7da      	b.n	8006734 <__b2d+0x50>
 800677e:	ea46 0501 	orr.w	r5, r6, r1
 8006782:	4614      	mov	r4, r2
 8006784:	e7d6      	b.n	8006734 <__b2d+0x50>
 8006786:	bf00      	nop
 8006788:	3ff00000 	.word	0x3ff00000

0800678c <__d2b>:
 800678c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006790:	2101      	movs	r1, #1
 8006792:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006796:	4690      	mov	r8, r2
 8006798:	461d      	mov	r5, r3
 800679a:	f7ff fc11 	bl	8005fc0 <_Balloc>
 800679e:	4604      	mov	r4, r0
 80067a0:	b930      	cbnz	r0, 80067b0 <__d2b+0x24>
 80067a2:	4602      	mov	r2, r0
 80067a4:	4b25      	ldr	r3, [pc, #148]	; (800683c <__d2b+0xb0>)
 80067a6:	4826      	ldr	r0, [pc, #152]	; (8006840 <__d2b+0xb4>)
 80067a8:	f240 310a 	movw	r1, #778	; 0x30a
 80067ac:	f000 ff5e 	bl	800766c <__assert_func>
 80067b0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80067b4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80067b8:	bb2d      	cbnz	r5, 8006806 <__d2b+0x7a>
 80067ba:	9301      	str	r3, [sp, #4]
 80067bc:	f1b8 0300 	subs.w	r3, r8, #0
 80067c0:	d026      	beq.n	8006810 <__d2b+0x84>
 80067c2:	4668      	mov	r0, sp
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	f7ff fd0d 	bl	80061e4 <__lo0bits>
 80067ca:	9900      	ldr	r1, [sp, #0]
 80067cc:	b1f0      	cbz	r0, 800680c <__d2b+0x80>
 80067ce:	9a01      	ldr	r2, [sp, #4]
 80067d0:	f1c0 0320 	rsb	r3, r0, #32
 80067d4:	fa02 f303 	lsl.w	r3, r2, r3
 80067d8:	430b      	orrs	r3, r1
 80067da:	40c2      	lsrs	r2, r0
 80067dc:	6163      	str	r3, [r4, #20]
 80067de:	9201      	str	r2, [sp, #4]
 80067e0:	9b01      	ldr	r3, [sp, #4]
 80067e2:	61a3      	str	r3, [r4, #24]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	bf14      	ite	ne
 80067e8:	2102      	movne	r1, #2
 80067ea:	2101      	moveq	r1, #1
 80067ec:	6121      	str	r1, [r4, #16]
 80067ee:	b1c5      	cbz	r5, 8006822 <__d2b+0x96>
 80067f0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80067f4:	4405      	add	r5, r0
 80067f6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80067fa:	603d      	str	r5, [r7, #0]
 80067fc:	6030      	str	r0, [r6, #0]
 80067fe:	4620      	mov	r0, r4
 8006800:	b002      	add	sp, #8
 8006802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006806:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800680a:	e7d6      	b.n	80067ba <__d2b+0x2e>
 800680c:	6161      	str	r1, [r4, #20]
 800680e:	e7e7      	b.n	80067e0 <__d2b+0x54>
 8006810:	a801      	add	r0, sp, #4
 8006812:	f7ff fce7 	bl	80061e4 <__lo0bits>
 8006816:	9b01      	ldr	r3, [sp, #4]
 8006818:	6163      	str	r3, [r4, #20]
 800681a:	2101      	movs	r1, #1
 800681c:	6121      	str	r1, [r4, #16]
 800681e:	3020      	adds	r0, #32
 8006820:	e7e5      	b.n	80067ee <__d2b+0x62>
 8006822:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006826:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800682a:	6038      	str	r0, [r7, #0]
 800682c:	6918      	ldr	r0, [r3, #16]
 800682e:	f7ff fcb9 	bl	80061a4 <__hi0bits>
 8006832:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006836:	6031      	str	r1, [r6, #0]
 8006838:	e7e1      	b.n	80067fe <__d2b+0x72>
 800683a:	bf00      	nop
 800683c:	08009220 	.word	0x08009220
 8006840:	080092ac 	.word	0x080092ac

08006844 <__ratio>:
 8006844:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006848:	4688      	mov	r8, r1
 800684a:	4669      	mov	r1, sp
 800684c:	4681      	mov	r9, r0
 800684e:	f7ff ff49 	bl	80066e4 <__b2d>
 8006852:	460f      	mov	r7, r1
 8006854:	4604      	mov	r4, r0
 8006856:	460d      	mov	r5, r1
 8006858:	4640      	mov	r0, r8
 800685a:	a901      	add	r1, sp, #4
 800685c:	f7ff ff42 	bl	80066e4 <__b2d>
 8006860:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006864:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006868:	eba3 0c02 	sub.w	ip, r3, r2
 800686c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006870:	1a9b      	subs	r3, r3, r2
 8006872:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006876:	2b00      	cmp	r3, #0
 8006878:	bfd5      	itete	le
 800687a:	460a      	movle	r2, r1
 800687c:	462a      	movgt	r2, r5
 800687e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006882:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006886:	468b      	mov	fp, r1
 8006888:	bfd8      	it	le
 800688a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800688e:	465b      	mov	r3, fp
 8006890:	4602      	mov	r2, r0
 8006892:	4639      	mov	r1, r7
 8006894:	4620      	mov	r0, r4
 8006896:	f7f9 fff1 	bl	800087c <__aeabi_ddiv>
 800689a:	b003      	add	sp, #12
 800689c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080068a0 <__copybits>:
 80068a0:	3901      	subs	r1, #1
 80068a2:	b570      	push	{r4, r5, r6, lr}
 80068a4:	1149      	asrs	r1, r1, #5
 80068a6:	6914      	ldr	r4, [r2, #16]
 80068a8:	3101      	adds	r1, #1
 80068aa:	f102 0314 	add.w	r3, r2, #20
 80068ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80068b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80068b6:	1f05      	subs	r5, r0, #4
 80068b8:	42a3      	cmp	r3, r4
 80068ba:	d30c      	bcc.n	80068d6 <__copybits+0x36>
 80068bc:	1aa3      	subs	r3, r4, r2
 80068be:	3b11      	subs	r3, #17
 80068c0:	f023 0303 	bic.w	r3, r3, #3
 80068c4:	3211      	adds	r2, #17
 80068c6:	42a2      	cmp	r2, r4
 80068c8:	bf88      	it	hi
 80068ca:	2300      	movhi	r3, #0
 80068cc:	4418      	add	r0, r3
 80068ce:	2300      	movs	r3, #0
 80068d0:	4288      	cmp	r0, r1
 80068d2:	d305      	bcc.n	80068e0 <__copybits+0x40>
 80068d4:	bd70      	pop	{r4, r5, r6, pc}
 80068d6:	f853 6b04 	ldr.w	r6, [r3], #4
 80068da:	f845 6f04 	str.w	r6, [r5, #4]!
 80068de:	e7eb      	b.n	80068b8 <__copybits+0x18>
 80068e0:	f840 3b04 	str.w	r3, [r0], #4
 80068e4:	e7f4      	b.n	80068d0 <__copybits+0x30>

080068e6 <__any_on>:
 80068e6:	f100 0214 	add.w	r2, r0, #20
 80068ea:	6900      	ldr	r0, [r0, #16]
 80068ec:	114b      	asrs	r3, r1, #5
 80068ee:	4298      	cmp	r0, r3
 80068f0:	b510      	push	{r4, lr}
 80068f2:	db11      	blt.n	8006918 <__any_on+0x32>
 80068f4:	dd0a      	ble.n	800690c <__any_on+0x26>
 80068f6:	f011 011f 	ands.w	r1, r1, #31
 80068fa:	d007      	beq.n	800690c <__any_on+0x26>
 80068fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006900:	fa24 f001 	lsr.w	r0, r4, r1
 8006904:	fa00 f101 	lsl.w	r1, r0, r1
 8006908:	428c      	cmp	r4, r1
 800690a:	d10b      	bne.n	8006924 <__any_on+0x3e>
 800690c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006910:	4293      	cmp	r3, r2
 8006912:	d803      	bhi.n	800691c <__any_on+0x36>
 8006914:	2000      	movs	r0, #0
 8006916:	bd10      	pop	{r4, pc}
 8006918:	4603      	mov	r3, r0
 800691a:	e7f7      	b.n	800690c <__any_on+0x26>
 800691c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006920:	2900      	cmp	r1, #0
 8006922:	d0f5      	beq.n	8006910 <__any_on+0x2a>
 8006924:	2001      	movs	r0, #1
 8006926:	e7f6      	b.n	8006916 <__any_on+0x30>

08006928 <_calloc_r>:
 8006928:	b570      	push	{r4, r5, r6, lr}
 800692a:	fba1 5402 	umull	r5, r4, r1, r2
 800692e:	b934      	cbnz	r4, 800693e <_calloc_r+0x16>
 8006930:	4629      	mov	r1, r5
 8006932:	f000 f877 	bl	8006a24 <_malloc_r>
 8006936:	4606      	mov	r6, r0
 8006938:	b928      	cbnz	r0, 8006946 <_calloc_r+0x1e>
 800693a:	4630      	mov	r0, r6
 800693c:	bd70      	pop	{r4, r5, r6, pc}
 800693e:	220c      	movs	r2, #12
 8006940:	6002      	str	r2, [r0, #0]
 8006942:	2600      	movs	r6, #0
 8006944:	e7f9      	b.n	800693a <_calloc_r+0x12>
 8006946:	462a      	mov	r2, r5
 8006948:	4621      	mov	r1, r4
 800694a:	f7fc fb65 	bl	8003018 <memset>
 800694e:	e7f4      	b.n	800693a <_calloc_r+0x12>

08006950 <_free_r>:
 8006950:	b538      	push	{r3, r4, r5, lr}
 8006952:	4605      	mov	r5, r0
 8006954:	2900      	cmp	r1, #0
 8006956:	d041      	beq.n	80069dc <_free_r+0x8c>
 8006958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800695c:	1f0c      	subs	r4, r1, #4
 800695e:	2b00      	cmp	r3, #0
 8006960:	bfb8      	it	lt
 8006962:	18e4      	addlt	r4, r4, r3
 8006964:	f001 f882 	bl	8007a6c <__malloc_lock>
 8006968:	4a1d      	ldr	r2, [pc, #116]	; (80069e0 <_free_r+0x90>)
 800696a:	6813      	ldr	r3, [r2, #0]
 800696c:	b933      	cbnz	r3, 800697c <_free_r+0x2c>
 800696e:	6063      	str	r3, [r4, #4]
 8006970:	6014      	str	r4, [r2, #0]
 8006972:	4628      	mov	r0, r5
 8006974:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006978:	f001 b87e 	b.w	8007a78 <__malloc_unlock>
 800697c:	42a3      	cmp	r3, r4
 800697e:	d908      	bls.n	8006992 <_free_r+0x42>
 8006980:	6820      	ldr	r0, [r4, #0]
 8006982:	1821      	adds	r1, r4, r0
 8006984:	428b      	cmp	r3, r1
 8006986:	bf01      	itttt	eq
 8006988:	6819      	ldreq	r1, [r3, #0]
 800698a:	685b      	ldreq	r3, [r3, #4]
 800698c:	1809      	addeq	r1, r1, r0
 800698e:	6021      	streq	r1, [r4, #0]
 8006990:	e7ed      	b.n	800696e <_free_r+0x1e>
 8006992:	461a      	mov	r2, r3
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	b10b      	cbz	r3, 800699c <_free_r+0x4c>
 8006998:	42a3      	cmp	r3, r4
 800699a:	d9fa      	bls.n	8006992 <_free_r+0x42>
 800699c:	6811      	ldr	r1, [r2, #0]
 800699e:	1850      	adds	r0, r2, r1
 80069a0:	42a0      	cmp	r0, r4
 80069a2:	d10b      	bne.n	80069bc <_free_r+0x6c>
 80069a4:	6820      	ldr	r0, [r4, #0]
 80069a6:	4401      	add	r1, r0
 80069a8:	1850      	adds	r0, r2, r1
 80069aa:	4283      	cmp	r3, r0
 80069ac:	6011      	str	r1, [r2, #0]
 80069ae:	d1e0      	bne.n	8006972 <_free_r+0x22>
 80069b0:	6818      	ldr	r0, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	6053      	str	r3, [r2, #4]
 80069b6:	4401      	add	r1, r0
 80069b8:	6011      	str	r1, [r2, #0]
 80069ba:	e7da      	b.n	8006972 <_free_r+0x22>
 80069bc:	d902      	bls.n	80069c4 <_free_r+0x74>
 80069be:	230c      	movs	r3, #12
 80069c0:	602b      	str	r3, [r5, #0]
 80069c2:	e7d6      	b.n	8006972 <_free_r+0x22>
 80069c4:	6820      	ldr	r0, [r4, #0]
 80069c6:	1821      	adds	r1, r4, r0
 80069c8:	428b      	cmp	r3, r1
 80069ca:	bf04      	itt	eq
 80069cc:	6819      	ldreq	r1, [r3, #0]
 80069ce:	685b      	ldreq	r3, [r3, #4]
 80069d0:	6063      	str	r3, [r4, #4]
 80069d2:	bf04      	itt	eq
 80069d4:	1809      	addeq	r1, r1, r0
 80069d6:	6021      	streq	r1, [r4, #0]
 80069d8:	6054      	str	r4, [r2, #4]
 80069da:	e7ca      	b.n	8006972 <_free_r+0x22>
 80069dc:	bd38      	pop	{r3, r4, r5, pc}
 80069de:	bf00      	nop
 80069e0:	20000544 	.word	0x20000544

080069e4 <sbrk_aligned>:
 80069e4:	b570      	push	{r4, r5, r6, lr}
 80069e6:	4e0e      	ldr	r6, [pc, #56]	; (8006a20 <sbrk_aligned+0x3c>)
 80069e8:	460c      	mov	r4, r1
 80069ea:	6831      	ldr	r1, [r6, #0]
 80069ec:	4605      	mov	r5, r0
 80069ee:	b911      	cbnz	r1, 80069f6 <sbrk_aligned+0x12>
 80069f0:	f000 fd24 	bl	800743c <_sbrk_r>
 80069f4:	6030      	str	r0, [r6, #0]
 80069f6:	4621      	mov	r1, r4
 80069f8:	4628      	mov	r0, r5
 80069fa:	f000 fd1f 	bl	800743c <_sbrk_r>
 80069fe:	1c43      	adds	r3, r0, #1
 8006a00:	d00a      	beq.n	8006a18 <sbrk_aligned+0x34>
 8006a02:	1cc4      	adds	r4, r0, #3
 8006a04:	f024 0403 	bic.w	r4, r4, #3
 8006a08:	42a0      	cmp	r0, r4
 8006a0a:	d007      	beq.n	8006a1c <sbrk_aligned+0x38>
 8006a0c:	1a21      	subs	r1, r4, r0
 8006a0e:	4628      	mov	r0, r5
 8006a10:	f000 fd14 	bl	800743c <_sbrk_r>
 8006a14:	3001      	adds	r0, #1
 8006a16:	d101      	bne.n	8006a1c <sbrk_aligned+0x38>
 8006a18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	bd70      	pop	{r4, r5, r6, pc}
 8006a20:	20000548 	.word	0x20000548

08006a24 <_malloc_r>:
 8006a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a28:	1ccd      	adds	r5, r1, #3
 8006a2a:	f025 0503 	bic.w	r5, r5, #3
 8006a2e:	3508      	adds	r5, #8
 8006a30:	2d0c      	cmp	r5, #12
 8006a32:	bf38      	it	cc
 8006a34:	250c      	movcc	r5, #12
 8006a36:	2d00      	cmp	r5, #0
 8006a38:	4607      	mov	r7, r0
 8006a3a:	db01      	blt.n	8006a40 <_malloc_r+0x1c>
 8006a3c:	42a9      	cmp	r1, r5
 8006a3e:	d905      	bls.n	8006a4c <_malloc_r+0x28>
 8006a40:	230c      	movs	r3, #12
 8006a42:	603b      	str	r3, [r7, #0]
 8006a44:	2600      	movs	r6, #0
 8006a46:	4630      	mov	r0, r6
 8006a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a4c:	4e2e      	ldr	r6, [pc, #184]	; (8006b08 <_malloc_r+0xe4>)
 8006a4e:	f001 f80d 	bl	8007a6c <__malloc_lock>
 8006a52:	6833      	ldr	r3, [r6, #0]
 8006a54:	461c      	mov	r4, r3
 8006a56:	bb34      	cbnz	r4, 8006aa6 <_malloc_r+0x82>
 8006a58:	4629      	mov	r1, r5
 8006a5a:	4638      	mov	r0, r7
 8006a5c:	f7ff ffc2 	bl	80069e4 <sbrk_aligned>
 8006a60:	1c43      	adds	r3, r0, #1
 8006a62:	4604      	mov	r4, r0
 8006a64:	d14d      	bne.n	8006b02 <_malloc_r+0xde>
 8006a66:	6834      	ldr	r4, [r6, #0]
 8006a68:	4626      	mov	r6, r4
 8006a6a:	2e00      	cmp	r6, #0
 8006a6c:	d140      	bne.n	8006af0 <_malloc_r+0xcc>
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	4631      	mov	r1, r6
 8006a72:	4638      	mov	r0, r7
 8006a74:	eb04 0803 	add.w	r8, r4, r3
 8006a78:	f000 fce0 	bl	800743c <_sbrk_r>
 8006a7c:	4580      	cmp	r8, r0
 8006a7e:	d13a      	bne.n	8006af6 <_malloc_r+0xd2>
 8006a80:	6821      	ldr	r1, [r4, #0]
 8006a82:	3503      	adds	r5, #3
 8006a84:	1a6d      	subs	r5, r5, r1
 8006a86:	f025 0503 	bic.w	r5, r5, #3
 8006a8a:	3508      	adds	r5, #8
 8006a8c:	2d0c      	cmp	r5, #12
 8006a8e:	bf38      	it	cc
 8006a90:	250c      	movcc	r5, #12
 8006a92:	4629      	mov	r1, r5
 8006a94:	4638      	mov	r0, r7
 8006a96:	f7ff ffa5 	bl	80069e4 <sbrk_aligned>
 8006a9a:	3001      	adds	r0, #1
 8006a9c:	d02b      	beq.n	8006af6 <_malloc_r+0xd2>
 8006a9e:	6823      	ldr	r3, [r4, #0]
 8006aa0:	442b      	add	r3, r5
 8006aa2:	6023      	str	r3, [r4, #0]
 8006aa4:	e00e      	b.n	8006ac4 <_malloc_r+0xa0>
 8006aa6:	6822      	ldr	r2, [r4, #0]
 8006aa8:	1b52      	subs	r2, r2, r5
 8006aaa:	d41e      	bmi.n	8006aea <_malloc_r+0xc6>
 8006aac:	2a0b      	cmp	r2, #11
 8006aae:	d916      	bls.n	8006ade <_malloc_r+0xba>
 8006ab0:	1961      	adds	r1, r4, r5
 8006ab2:	42a3      	cmp	r3, r4
 8006ab4:	6025      	str	r5, [r4, #0]
 8006ab6:	bf18      	it	ne
 8006ab8:	6059      	strne	r1, [r3, #4]
 8006aba:	6863      	ldr	r3, [r4, #4]
 8006abc:	bf08      	it	eq
 8006abe:	6031      	streq	r1, [r6, #0]
 8006ac0:	5162      	str	r2, [r4, r5]
 8006ac2:	604b      	str	r3, [r1, #4]
 8006ac4:	4638      	mov	r0, r7
 8006ac6:	f104 060b 	add.w	r6, r4, #11
 8006aca:	f000 ffd5 	bl	8007a78 <__malloc_unlock>
 8006ace:	f026 0607 	bic.w	r6, r6, #7
 8006ad2:	1d23      	adds	r3, r4, #4
 8006ad4:	1af2      	subs	r2, r6, r3
 8006ad6:	d0b6      	beq.n	8006a46 <_malloc_r+0x22>
 8006ad8:	1b9b      	subs	r3, r3, r6
 8006ada:	50a3      	str	r3, [r4, r2]
 8006adc:	e7b3      	b.n	8006a46 <_malloc_r+0x22>
 8006ade:	6862      	ldr	r2, [r4, #4]
 8006ae0:	42a3      	cmp	r3, r4
 8006ae2:	bf0c      	ite	eq
 8006ae4:	6032      	streq	r2, [r6, #0]
 8006ae6:	605a      	strne	r2, [r3, #4]
 8006ae8:	e7ec      	b.n	8006ac4 <_malloc_r+0xa0>
 8006aea:	4623      	mov	r3, r4
 8006aec:	6864      	ldr	r4, [r4, #4]
 8006aee:	e7b2      	b.n	8006a56 <_malloc_r+0x32>
 8006af0:	4634      	mov	r4, r6
 8006af2:	6876      	ldr	r6, [r6, #4]
 8006af4:	e7b9      	b.n	8006a6a <_malloc_r+0x46>
 8006af6:	230c      	movs	r3, #12
 8006af8:	603b      	str	r3, [r7, #0]
 8006afa:	4638      	mov	r0, r7
 8006afc:	f000 ffbc 	bl	8007a78 <__malloc_unlock>
 8006b00:	e7a1      	b.n	8006a46 <_malloc_r+0x22>
 8006b02:	6025      	str	r5, [r4, #0]
 8006b04:	e7de      	b.n	8006ac4 <_malloc_r+0xa0>
 8006b06:	bf00      	nop
 8006b08:	20000544 	.word	0x20000544

08006b0c <__ssputs_r>:
 8006b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b10:	688e      	ldr	r6, [r1, #8]
 8006b12:	429e      	cmp	r6, r3
 8006b14:	4682      	mov	sl, r0
 8006b16:	460c      	mov	r4, r1
 8006b18:	4690      	mov	r8, r2
 8006b1a:	461f      	mov	r7, r3
 8006b1c:	d838      	bhi.n	8006b90 <__ssputs_r+0x84>
 8006b1e:	898a      	ldrh	r2, [r1, #12]
 8006b20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b24:	d032      	beq.n	8006b8c <__ssputs_r+0x80>
 8006b26:	6825      	ldr	r5, [r4, #0]
 8006b28:	6909      	ldr	r1, [r1, #16]
 8006b2a:	eba5 0901 	sub.w	r9, r5, r1
 8006b2e:	6965      	ldr	r5, [r4, #20]
 8006b30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b38:	3301      	adds	r3, #1
 8006b3a:	444b      	add	r3, r9
 8006b3c:	106d      	asrs	r5, r5, #1
 8006b3e:	429d      	cmp	r5, r3
 8006b40:	bf38      	it	cc
 8006b42:	461d      	movcc	r5, r3
 8006b44:	0553      	lsls	r3, r2, #21
 8006b46:	d531      	bpl.n	8006bac <__ssputs_r+0xa0>
 8006b48:	4629      	mov	r1, r5
 8006b4a:	f7ff ff6b 	bl	8006a24 <_malloc_r>
 8006b4e:	4606      	mov	r6, r0
 8006b50:	b950      	cbnz	r0, 8006b68 <__ssputs_r+0x5c>
 8006b52:	230c      	movs	r3, #12
 8006b54:	f8ca 3000 	str.w	r3, [sl]
 8006b58:	89a3      	ldrh	r3, [r4, #12]
 8006b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b5e:	81a3      	strh	r3, [r4, #12]
 8006b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b68:	6921      	ldr	r1, [r4, #16]
 8006b6a:	464a      	mov	r2, r9
 8006b6c:	f7ff fa1a 	bl	8005fa4 <memcpy>
 8006b70:	89a3      	ldrh	r3, [r4, #12]
 8006b72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b7a:	81a3      	strh	r3, [r4, #12]
 8006b7c:	6126      	str	r6, [r4, #16]
 8006b7e:	6165      	str	r5, [r4, #20]
 8006b80:	444e      	add	r6, r9
 8006b82:	eba5 0509 	sub.w	r5, r5, r9
 8006b86:	6026      	str	r6, [r4, #0]
 8006b88:	60a5      	str	r5, [r4, #8]
 8006b8a:	463e      	mov	r6, r7
 8006b8c:	42be      	cmp	r6, r7
 8006b8e:	d900      	bls.n	8006b92 <__ssputs_r+0x86>
 8006b90:	463e      	mov	r6, r7
 8006b92:	6820      	ldr	r0, [r4, #0]
 8006b94:	4632      	mov	r2, r6
 8006b96:	4641      	mov	r1, r8
 8006b98:	f000 ff4e 	bl	8007a38 <memmove>
 8006b9c:	68a3      	ldr	r3, [r4, #8]
 8006b9e:	1b9b      	subs	r3, r3, r6
 8006ba0:	60a3      	str	r3, [r4, #8]
 8006ba2:	6823      	ldr	r3, [r4, #0]
 8006ba4:	4433      	add	r3, r6
 8006ba6:	6023      	str	r3, [r4, #0]
 8006ba8:	2000      	movs	r0, #0
 8006baa:	e7db      	b.n	8006b64 <__ssputs_r+0x58>
 8006bac:	462a      	mov	r2, r5
 8006bae:	f000 ff69 	bl	8007a84 <_realloc_r>
 8006bb2:	4606      	mov	r6, r0
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	d1e1      	bne.n	8006b7c <__ssputs_r+0x70>
 8006bb8:	6921      	ldr	r1, [r4, #16]
 8006bba:	4650      	mov	r0, sl
 8006bbc:	f7ff fec8 	bl	8006950 <_free_r>
 8006bc0:	e7c7      	b.n	8006b52 <__ssputs_r+0x46>
	...

08006bc4 <_svfiprintf_r>:
 8006bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc8:	4698      	mov	r8, r3
 8006bca:	898b      	ldrh	r3, [r1, #12]
 8006bcc:	061b      	lsls	r3, r3, #24
 8006bce:	b09d      	sub	sp, #116	; 0x74
 8006bd0:	4607      	mov	r7, r0
 8006bd2:	460d      	mov	r5, r1
 8006bd4:	4614      	mov	r4, r2
 8006bd6:	d50e      	bpl.n	8006bf6 <_svfiprintf_r+0x32>
 8006bd8:	690b      	ldr	r3, [r1, #16]
 8006bda:	b963      	cbnz	r3, 8006bf6 <_svfiprintf_r+0x32>
 8006bdc:	2140      	movs	r1, #64	; 0x40
 8006bde:	f7ff ff21 	bl	8006a24 <_malloc_r>
 8006be2:	6028      	str	r0, [r5, #0]
 8006be4:	6128      	str	r0, [r5, #16]
 8006be6:	b920      	cbnz	r0, 8006bf2 <_svfiprintf_r+0x2e>
 8006be8:	230c      	movs	r3, #12
 8006bea:	603b      	str	r3, [r7, #0]
 8006bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bf0:	e0d1      	b.n	8006d96 <_svfiprintf_r+0x1d2>
 8006bf2:	2340      	movs	r3, #64	; 0x40
 8006bf4:	616b      	str	r3, [r5, #20]
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8006bfa:	2320      	movs	r3, #32
 8006bfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c00:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c04:	2330      	movs	r3, #48	; 0x30
 8006c06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006db0 <_svfiprintf_r+0x1ec>
 8006c0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c0e:	f04f 0901 	mov.w	r9, #1
 8006c12:	4623      	mov	r3, r4
 8006c14:	469a      	mov	sl, r3
 8006c16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c1a:	b10a      	cbz	r2, 8006c20 <_svfiprintf_r+0x5c>
 8006c1c:	2a25      	cmp	r2, #37	; 0x25
 8006c1e:	d1f9      	bne.n	8006c14 <_svfiprintf_r+0x50>
 8006c20:	ebba 0b04 	subs.w	fp, sl, r4
 8006c24:	d00b      	beq.n	8006c3e <_svfiprintf_r+0x7a>
 8006c26:	465b      	mov	r3, fp
 8006c28:	4622      	mov	r2, r4
 8006c2a:	4629      	mov	r1, r5
 8006c2c:	4638      	mov	r0, r7
 8006c2e:	f7ff ff6d 	bl	8006b0c <__ssputs_r>
 8006c32:	3001      	adds	r0, #1
 8006c34:	f000 80aa 	beq.w	8006d8c <_svfiprintf_r+0x1c8>
 8006c38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c3a:	445a      	add	r2, fp
 8006c3c:	9209      	str	r2, [sp, #36]	; 0x24
 8006c3e:	f89a 3000 	ldrb.w	r3, [sl]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 80a2 	beq.w	8006d8c <_svfiprintf_r+0x1c8>
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c52:	f10a 0a01 	add.w	sl, sl, #1
 8006c56:	9304      	str	r3, [sp, #16]
 8006c58:	9307      	str	r3, [sp, #28]
 8006c5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c5e:	931a      	str	r3, [sp, #104]	; 0x68
 8006c60:	4654      	mov	r4, sl
 8006c62:	2205      	movs	r2, #5
 8006c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c68:	4851      	ldr	r0, [pc, #324]	; (8006db0 <_svfiprintf_r+0x1ec>)
 8006c6a:	f7f9 fad1 	bl	8000210 <memchr>
 8006c6e:	9a04      	ldr	r2, [sp, #16]
 8006c70:	b9d8      	cbnz	r0, 8006caa <_svfiprintf_r+0xe6>
 8006c72:	06d0      	lsls	r0, r2, #27
 8006c74:	bf44      	itt	mi
 8006c76:	2320      	movmi	r3, #32
 8006c78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c7c:	0711      	lsls	r1, r2, #28
 8006c7e:	bf44      	itt	mi
 8006c80:	232b      	movmi	r3, #43	; 0x2b
 8006c82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c86:	f89a 3000 	ldrb.w	r3, [sl]
 8006c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c8c:	d015      	beq.n	8006cba <_svfiprintf_r+0xf6>
 8006c8e:	9a07      	ldr	r2, [sp, #28]
 8006c90:	4654      	mov	r4, sl
 8006c92:	2000      	movs	r0, #0
 8006c94:	f04f 0c0a 	mov.w	ip, #10
 8006c98:	4621      	mov	r1, r4
 8006c9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c9e:	3b30      	subs	r3, #48	; 0x30
 8006ca0:	2b09      	cmp	r3, #9
 8006ca2:	d94e      	bls.n	8006d42 <_svfiprintf_r+0x17e>
 8006ca4:	b1b0      	cbz	r0, 8006cd4 <_svfiprintf_r+0x110>
 8006ca6:	9207      	str	r2, [sp, #28]
 8006ca8:	e014      	b.n	8006cd4 <_svfiprintf_r+0x110>
 8006caa:	eba0 0308 	sub.w	r3, r0, r8
 8006cae:	fa09 f303 	lsl.w	r3, r9, r3
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	9304      	str	r3, [sp, #16]
 8006cb6:	46a2      	mov	sl, r4
 8006cb8:	e7d2      	b.n	8006c60 <_svfiprintf_r+0x9c>
 8006cba:	9b03      	ldr	r3, [sp, #12]
 8006cbc:	1d19      	adds	r1, r3, #4
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	9103      	str	r1, [sp, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	bfbb      	ittet	lt
 8006cc6:	425b      	neglt	r3, r3
 8006cc8:	f042 0202 	orrlt.w	r2, r2, #2
 8006ccc:	9307      	strge	r3, [sp, #28]
 8006cce:	9307      	strlt	r3, [sp, #28]
 8006cd0:	bfb8      	it	lt
 8006cd2:	9204      	strlt	r2, [sp, #16]
 8006cd4:	7823      	ldrb	r3, [r4, #0]
 8006cd6:	2b2e      	cmp	r3, #46	; 0x2e
 8006cd8:	d10c      	bne.n	8006cf4 <_svfiprintf_r+0x130>
 8006cda:	7863      	ldrb	r3, [r4, #1]
 8006cdc:	2b2a      	cmp	r3, #42	; 0x2a
 8006cde:	d135      	bne.n	8006d4c <_svfiprintf_r+0x188>
 8006ce0:	9b03      	ldr	r3, [sp, #12]
 8006ce2:	1d1a      	adds	r2, r3, #4
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	9203      	str	r2, [sp, #12]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	bfb8      	it	lt
 8006cec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006cf0:	3402      	adds	r4, #2
 8006cf2:	9305      	str	r3, [sp, #20]
 8006cf4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006db4 <_svfiprintf_r+0x1f0>
 8006cf8:	7821      	ldrb	r1, [r4, #0]
 8006cfa:	2203      	movs	r2, #3
 8006cfc:	4650      	mov	r0, sl
 8006cfe:	f7f9 fa87 	bl	8000210 <memchr>
 8006d02:	b140      	cbz	r0, 8006d16 <_svfiprintf_r+0x152>
 8006d04:	2340      	movs	r3, #64	; 0x40
 8006d06:	eba0 000a 	sub.w	r0, r0, sl
 8006d0a:	fa03 f000 	lsl.w	r0, r3, r0
 8006d0e:	9b04      	ldr	r3, [sp, #16]
 8006d10:	4303      	orrs	r3, r0
 8006d12:	3401      	adds	r4, #1
 8006d14:	9304      	str	r3, [sp, #16]
 8006d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d1a:	4827      	ldr	r0, [pc, #156]	; (8006db8 <_svfiprintf_r+0x1f4>)
 8006d1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d20:	2206      	movs	r2, #6
 8006d22:	f7f9 fa75 	bl	8000210 <memchr>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	d038      	beq.n	8006d9c <_svfiprintf_r+0x1d8>
 8006d2a:	4b24      	ldr	r3, [pc, #144]	; (8006dbc <_svfiprintf_r+0x1f8>)
 8006d2c:	bb1b      	cbnz	r3, 8006d76 <_svfiprintf_r+0x1b2>
 8006d2e:	9b03      	ldr	r3, [sp, #12]
 8006d30:	3307      	adds	r3, #7
 8006d32:	f023 0307 	bic.w	r3, r3, #7
 8006d36:	3308      	adds	r3, #8
 8006d38:	9303      	str	r3, [sp, #12]
 8006d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d3c:	4433      	add	r3, r6
 8006d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d40:	e767      	b.n	8006c12 <_svfiprintf_r+0x4e>
 8006d42:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d46:	460c      	mov	r4, r1
 8006d48:	2001      	movs	r0, #1
 8006d4a:	e7a5      	b.n	8006c98 <_svfiprintf_r+0xd4>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	3401      	adds	r4, #1
 8006d50:	9305      	str	r3, [sp, #20]
 8006d52:	4619      	mov	r1, r3
 8006d54:	f04f 0c0a 	mov.w	ip, #10
 8006d58:	4620      	mov	r0, r4
 8006d5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d5e:	3a30      	subs	r2, #48	; 0x30
 8006d60:	2a09      	cmp	r2, #9
 8006d62:	d903      	bls.n	8006d6c <_svfiprintf_r+0x1a8>
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d0c5      	beq.n	8006cf4 <_svfiprintf_r+0x130>
 8006d68:	9105      	str	r1, [sp, #20]
 8006d6a:	e7c3      	b.n	8006cf4 <_svfiprintf_r+0x130>
 8006d6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d70:	4604      	mov	r4, r0
 8006d72:	2301      	movs	r3, #1
 8006d74:	e7f0      	b.n	8006d58 <_svfiprintf_r+0x194>
 8006d76:	ab03      	add	r3, sp, #12
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	462a      	mov	r2, r5
 8006d7c:	4b10      	ldr	r3, [pc, #64]	; (8006dc0 <_svfiprintf_r+0x1fc>)
 8006d7e:	a904      	add	r1, sp, #16
 8006d80:	4638      	mov	r0, r7
 8006d82:	f7fc f9ef 	bl	8003164 <_printf_float>
 8006d86:	1c42      	adds	r2, r0, #1
 8006d88:	4606      	mov	r6, r0
 8006d8a:	d1d6      	bne.n	8006d3a <_svfiprintf_r+0x176>
 8006d8c:	89ab      	ldrh	r3, [r5, #12]
 8006d8e:	065b      	lsls	r3, r3, #25
 8006d90:	f53f af2c 	bmi.w	8006bec <_svfiprintf_r+0x28>
 8006d94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d96:	b01d      	add	sp, #116	; 0x74
 8006d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d9c:	ab03      	add	r3, sp, #12
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	462a      	mov	r2, r5
 8006da2:	4b07      	ldr	r3, [pc, #28]	; (8006dc0 <_svfiprintf_r+0x1fc>)
 8006da4:	a904      	add	r1, sp, #16
 8006da6:	4638      	mov	r0, r7
 8006da8:	f7fc fc74 	bl	8003694 <_printf_i>
 8006dac:	e7eb      	b.n	8006d86 <_svfiprintf_r+0x1c2>
 8006dae:	bf00      	nop
 8006db0:	08009404 	.word	0x08009404
 8006db4:	0800940a 	.word	0x0800940a
 8006db8:	0800940e 	.word	0x0800940e
 8006dbc:	08003165 	.word	0x08003165
 8006dc0:	08006b0d 	.word	0x08006b0d

08006dc4 <_sungetc_r>:
 8006dc4:	b538      	push	{r3, r4, r5, lr}
 8006dc6:	1c4b      	adds	r3, r1, #1
 8006dc8:	4614      	mov	r4, r2
 8006dca:	d103      	bne.n	8006dd4 <_sungetc_r+0x10>
 8006dcc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	bd38      	pop	{r3, r4, r5, pc}
 8006dd4:	8993      	ldrh	r3, [r2, #12]
 8006dd6:	f023 0320 	bic.w	r3, r3, #32
 8006dda:	8193      	strh	r3, [r2, #12]
 8006ddc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006dde:	6852      	ldr	r2, [r2, #4]
 8006de0:	b2cd      	uxtb	r5, r1
 8006de2:	b18b      	cbz	r3, 8006e08 <_sungetc_r+0x44>
 8006de4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006de6:	4293      	cmp	r3, r2
 8006de8:	dd08      	ble.n	8006dfc <_sungetc_r+0x38>
 8006dea:	6823      	ldr	r3, [r4, #0]
 8006dec:	1e5a      	subs	r2, r3, #1
 8006dee:	6022      	str	r2, [r4, #0]
 8006df0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006df4:	6863      	ldr	r3, [r4, #4]
 8006df6:	3301      	adds	r3, #1
 8006df8:	6063      	str	r3, [r4, #4]
 8006dfa:	e7e9      	b.n	8006dd0 <_sungetc_r+0xc>
 8006dfc:	4621      	mov	r1, r4
 8006dfe:	f000 fbed 	bl	80075dc <__submore>
 8006e02:	2800      	cmp	r0, #0
 8006e04:	d0f1      	beq.n	8006dea <_sungetc_r+0x26>
 8006e06:	e7e1      	b.n	8006dcc <_sungetc_r+0x8>
 8006e08:	6921      	ldr	r1, [r4, #16]
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	b151      	cbz	r1, 8006e24 <_sungetc_r+0x60>
 8006e0e:	4299      	cmp	r1, r3
 8006e10:	d208      	bcs.n	8006e24 <_sungetc_r+0x60>
 8006e12:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006e16:	42a9      	cmp	r1, r5
 8006e18:	d104      	bne.n	8006e24 <_sungetc_r+0x60>
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	3201      	adds	r2, #1
 8006e1e:	6023      	str	r3, [r4, #0]
 8006e20:	6062      	str	r2, [r4, #4]
 8006e22:	e7d5      	b.n	8006dd0 <_sungetc_r+0xc>
 8006e24:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006e28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e2c:	6363      	str	r3, [r4, #52]	; 0x34
 8006e2e:	2303      	movs	r3, #3
 8006e30:	63a3      	str	r3, [r4, #56]	; 0x38
 8006e32:	4623      	mov	r3, r4
 8006e34:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e7dc      	b.n	8006df8 <_sungetc_r+0x34>

08006e3e <__ssrefill_r>:
 8006e3e:	b510      	push	{r4, lr}
 8006e40:	460c      	mov	r4, r1
 8006e42:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006e44:	b169      	cbz	r1, 8006e62 <__ssrefill_r+0x24>
 8006e46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e4a:	4299      	cmp	r1, r3
 8006e4c:	d001      	beq.n	8006e52 <__ssrefill_r+0x14>
 8006e4e:	f7ff fd7f 	bl	8006950 <_free_r>
 8006e52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e54:	6063      	str	r3, [r4, #4]
 8006e56:	2000      	movs	r0, #0
 8006e58:	6360      	str	r0, [r4, #52]	; 0x34
 8006e5a:	b113      	cbz	r3, 8006e62 <__ssrefill_r+0x24>
 8006e5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006e5e:	6023      	str	r3, [r4, #0]
 8006e60:	bd10      	pop	{r4, pc}
 8006e62:	6923      	ldr	r3, [r4, #16]
 8006e64:	6023      	str	r3, [r4, #0]
 8006e66:	2300      	movs	r3, #0
 8006e68:	6063      	str	r3, [r4, #4]
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	f043 0320 	orr.w	r3, r3, #32
 8006e70:	81a3      	strh	r3, [r4, #12]
 8006e72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e76:	e7f3      	b.n	8006e60 <__ssrefill_r+0x22>

08006e78 <__ssvfiscanf_r>:
 8006e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e7c:	460c      	mov	r4, r1
 8006e7e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8006e82:	2100      	movs	r1, #0
 8006e84:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006e88:	49a6      	ldr	r1, [pc, #664]	; (8007124 <__ssvfiscanf_r+0x2ac>)
 8006e8a:	91a0      	str	r1, [sp, #640]	; 0x280
 8006e8c:	f10d 0804 	add.w	r8, sp, #4
 8006e90:	49a5      	ldr	r1, [pc, #660]	; (8007128 <__ssvfiscanf_r+0x2b0>)
 8006e92:	4fa6      	ldr	r7, [pc, #664]	; (800712c <__ssvfiscanf_r+0x2b4>)
 8006e94:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8007130 <__ssvfiscanf_r+0x2b8>
 8006e98:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006e9c:	4606      	mov	r6, r0
 8006e9e:	91a1      	str	r1, [sp, #644]	; 0x284
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	7813      	ldrb	r3, [r2, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 815a 	beq.w	800715e <__ssvfiscanf_r+0x2e6>
 8006eaa:	5dd9      	ldrb	r1, [r3, r7]
 8006eac:	f011 0108 	ands.w	r1, r1, #8
 8006eb0:	f102 0501 	add.w	r5, r2, #1
 8006eb4:	d019      	beq.n	8006eea <__ssvfiscanf_r+0x72>
 8006eb6:	6863      	ldr	r3, [r4, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	dd0f      	ble.n	8006edc <__ssvfiscanf_r+0x64>
 8006ebc:	6823      	ldr	r3, [r4, #0]
 8006ebe:	781a      	ldrb	r2, [r3, #0]
 8006ec0:	5cba      	ldrb	r2, [r7, r2]
 8006ec2:	0712      	lsls	r2, r2, #28
 8006ec4:	d401      	bmi.n	8006eca <__ssvfiscanf_r+0x52>
 8006ec6:	462a      	mov	r2, r5
 8006ec8:	e7eb      	b.n	8006ea2 <__ssvfiscanf_r+0x2a>
 8006eca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006ecc:	3201      	adds	r2, #1
 8006ece:	9245      	str	r2, [sp, #276]	; 0x114
 8006ed0:	6862      	ldr	r2, [r4, #4]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	3a01      	subs	r2, #1
 8006ed6:	6062      	str	r2, [r4, #4]
 8006ed8:	6023      	str	r3, [r4, #0]
 8006eda:	e7ec      	b.n	8006eb6 <__ssvfiscanf_r+0x3e>
 8006edc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006ede:	4621      	mov	r1, r4
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	4798      	blx	r3
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	d0e9      	beq.n	8006ebc <__ssvfiscanf_r+0x44>
 8006ee8:	e7ed      	b.n	8006ec6 <__ssvfiscanf_r+0x4e>
 8006eea:	2b25      	cmp	r3, #37	; 0x25
 8006eec:	d012      	beq.n	8006f14 <__ssvfiscanf_r+0x9c>
 8006eee:	469a      	mov	sl, r3
 8006ef0:	6863      	ldr	r3, [r4, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f340 8091 	ble.w	800701a <__ssvfiscanf_r+0x1a2>
 8006ef8:	6822      	ldr	r2, [r4, #0]
 8006efa:	7813      	ldrb	r3, [r2, #0]
 8006efc:	4553      	cmp	r3, sl
 8006efe:	f040 812e 	bne.w	800715e <__ssvfiscanf_r+0x2e6>
 8006f02:	6863      	ldr	r3, [r4, #4]
 8006f04:	3b01      	subs	r3, #1
 8006f06:	6063      	str	r3, [r4, #4]
 8006f08:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006f0a:	3201      	adds	r2, #1
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	6022      	str	r2, [r4, #0]
 8006f10:	9345      	str	r3, [sp, #276]	; 0x114
 8006f12:	e7d8      	b.n	8006ec6 <__ssvfiscanf_r+0x4e>
 8006f14:	9141      	str	r1, [sp, #260]	; 0x104
 8006f16:	9143      	str	r1, [sp, #268]	; 0x10c
 8006f18:	7853      	ldrb	r3, [r2, #1]
 8006f1a:	2b2a      	cmp	r3, #42	; 0x2a
 8006f1c:	bf02      	ittt	eq
 8006f1e:	2310      	moveq	r3, #16
 8006f20:	1c95      	addeq	r5, r2, #2
 8006f22:	9341      	streq	r3, [sp, #260]	; 0x104
 8006f24:	220a      	movs	r2, #10
 8006f26:	46aa      	mov	sl, r5
 8006f28:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006f2c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006f30:	2b09      	cmp	r3, #9
 8006f32:	d91d      	bls.n	8006f70 <__ssvfiscanf_r+0xf8>
 8006f34:	487e      	ldr	r0, [pc, #504]	; (8007130 <__ssvfiscanf_r+0x2b8>)
 8006f36:	2203      	movs	r2, #3
 8006f38:	f7f9 f96a 	bl	8000210 <memchr>
 8006f3c:	b140      	cbz	r0, 8006f50 <__ssvfiscanf_r+0xd8>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	eba0 0009 	sub.w	r0, r0, r9
 8006f44:	fa03 f000 	lsl.w	r0, r3, r0
 8006f48:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006f4a:	4318      	orrs	r0, r3
 8006f4c:	9041      	str	r0, [sp, #260]	; 0x104
 8006f4e:	4655      	mov	r5, sl
 8006f50:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006f54:	2b78      	cmp	r3, #120	; 0x78
 8006f56:	d806      	bhi.n	8006f66 <__ssvfiscanf_r+0xee>
 8006f58:	2b57      	cmp	r3, #87	; 0x57
 8006f5a:	d810      	bhi.n	8006f7e <__ssvfiscanf_r+0x106>
 8006f5c:	2b25      	cmp	r3, #37	; 0x25
 8006f5e:	d0c6      	beq.n	8006eee <__ssvfiscanf_r+0x76>
 8006f60:	d856      	bhi.n	8007010 <__ssvfiscanf_r+0x198>
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d064      	beq.n	8007030 <__ssvfiscanf_r+0x1b8>
 8006f66:	2303      	movs	r3, #3
 8006f68:	9347      	str	r3, [sp, #284]	; 0x11c
 8006f6a:	230a      	movs	r3, #10
 8006f6c:	9342      	str	r3, [sp, #264]	; 0x108
 8006f6e:	e071      	b.n	8007054 <__ssvfiscanf_r+0x1dc>
 8006f70:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006f72:	fb02 1103 	mla	r1, r2, r3, r1
 8006f76:	3930      	subs	r1, #48	; 0x30
 8006f78:	9143      	str	r1, [sp, #268]	; 0x10c
 8006f7a:	4655      	mov	r5, sl
 8006f7c:	e7d3      	b.n	8006f26 <__ssvfiscanf_r+0xae>
 8006f7e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8006f82:	2a20      	cmp	r2, #32
 8006f84:	d8ef      	bhi.n	8006f66 <__ssvfiscanf_r+0xee>
 8006f86:	a101      	add	r1, pc, #4	; (adr r1, 8006f8c <__ssvfiscanf_r+0x114>)
 8006f88:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006f8c:	0800703f 	.word	0x0800703f
 8006f90:	08006f67 	.word	0x08006f67
 8006f94:	08006f67 	.word	0x08006f67
 8006f98:	0800709d 	.word	0x0800709d
 8006f9c:	08006f67 	.word	0x08006f67
 8006fa0:	08006f67 	.word	0x08006f67
 8006fa4:	08006f67 	.word	0x08006f67
 8006fa8:	08006f67 	.word	0x08006f67
 8006fac:	08006f67 	.word	0x08006f67
 8006fb0:	08006f67 	.word	0x08006f67
 8006fb4:	08006f67 	.word	0x08006f67
 8006fb8:	080070b3 	.word	0x080070b3
 8006fbc:	08007089 	.word	0x08007089
 8006fc0:	08007017 	.word	0x08007017
 8006fc4:	08007017 	.word	0x08007017
 8006fc8:	08007017 	.word	0x08007017
 8006fcc:	08006f67 	.word	0x08006f67
 8006fd0:	0800708d 	.word	0x0800708d
 8006fd4:	08006f67 	.word	0x08006f67
 8006fd8:	08006f67 	.word	0x08006f67
 8006fdc:	08006f67 	.word	0x08006f67
 8006fe0:	08006f67 	.word	0x08006f67
 8006fe4:	080070c3 	.word	0x080070c3
 8006fe8:	08007095 	.word	0x08007095
 8006fec:	08007037 	.word	0x08007037
 8006ff0:	08006f67 	.word	0x08006f67
 8006ff4:	08006f67 	.word	0x08006f67
 8006ff8:	080070bf 	.word	0x080070bf
 8006ffc:	08006f67 	.word	0x08006f67
 8007000:	08007089 	.word	0x08007089
 8007004:	08006f67 	.word	0x08006f67
 8007008:	08006f67 	.word	0x08006f67
 800700c:	0800703f 	.word	0x0800703f
 8007010:	3b45      	subs	r3, #69	; 0x45
 8007012:	2b02      	cmp	r3, #2
 8007014:	d8a7      	bhi.n	8006f66 <__ssvfiscanf_r+0xee>
 8007016:	2305      	movs	r3, #5
 8007018:	e01b      	b.n	8007052 <__ssvfiscanf_r+0x1da>
 800701a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800701c:	4621      	mov	r1, r4
 800701e:	4630      	mov	r0, r6
 8007020:	4798      	blx	r3
 8007022:	2800      	cmp	r0, #0
 8007024:	f43f af68 	beq.w	8006ef8 <__ssvfiscanf_r+0x80>
 8007028:	9844      	ldr	r0, [sp, #272]	; 0x110
 800702a:	2800      	cmp	r0, #0
 800702c:	f040 808d 	bne.w	800714a <__ssvfiscanf_r+0x2d2>
 8007030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007034:	e08f      	b.n	8007156 <__ssvfiscanf_r+0x2de>
 8007036:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007038:	f042 0220 	orr.w	r2, r2, #32
 800703c:	9241      	str	r2, [sp, #260]	; 0x104
 800703e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007044:	9241      	str	r2, [sp, #260]	; 0x104
 8007046:	2210      	movs	r2, #16
 8007048:	2b6f      	cmp	r3, #111	; 0x6f
 800704a:	9242      	str	r2, [sp, #264]	; 0x108
 800704c:	bf34      	ite	cc
 800704e:	2303      	movcc	r3, #3
 8007050:	2304      	movcs	r3, #4
 8007052:	9347      	str	r3, [sp, #284]	; 0x11c
 8007054:	6863      	ldr	r3, [r4, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	dd42      	ble.n	80070e0 <__ssvfiscanf_r+0x268>
 800705a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800705c:	0659      	lsls	r1, r3, #25
 800705e:	d404      	bmi.n	800706a <__ssvfiscanf_r+0x1f2>
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	781a      	ldrb	r2, [r3, #0]
 8007064:	5cba      	ldrb	r2, [r7, r2]
 8007066:	0712      	lsls	r2, r2, #28
 8007068:	d441      	bmi.n	80070ee <__ssvfiscanf_r+0x276>
 800706a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800706c:	2b02      	cmp	r3, #2
 800706e:	dc50      	bgt.n	8007112 <__ssvfiscanf_r+0x29a>
 8007070:	466b      	mov	r3, sp
 8007072:	4622      	mov	r2, r4
 8007074:	a941      	add	r1, sp, #260	; 0x104
 8007076:	4630      	mov	r0, r6
 8007078:	f000 f876 	bl	8007168 <_scanf_chars>
 800707c:	2801      	cmp	r0, #1
 800707e:	d06e      	beq.n	800715e <__ssvfiscanf_r+0x2e6>
 8007080:	2802      	cmp	r0, #2
 8007082:	f47f af20 	bne.w	8006ec6 <__ssvfiscanf_r+0x4e>
 8007086:	e7cf      	b.n	8007028 <__ssvfiscanf_r+0x1b0>
 8007088:	220a      	movs	r2, #10
 800708a:	e7dd      	b.n	8007048 <__ssvfiscanf_r+0x1d0>
 800708c:	2300      	movs	r3, #0
 800708e:	9342      	str	r3, [sp, #264]	; 0x108
 8007090:	2303      	movs	r3, #3
 8007092:	e7de      	b.n	8007052 <__ssvfiscanf_r+0x1da>
 8007094:	2308      	movs	r3, #8
 8007096:	9342      	str	r3, [sp, #264]	; 0x108
 8007098:	2304      	movs	r3, #4
 800709a:	e7da      	b.n	8007052 <__ssvfiscanf_r+0x1da>
 800709c:	4629      	mov	r1, r5
 800709e:	4640      	mov	r0, r8
 80070a0:	f000 f9dc 	bl	800745c <__sccl>
 80070a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80070a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070aa:	9341      	str	r3, [sp, #260]	; 0x104
 80070ac:	4605      	mov	r5, r0
 80070ae:	2301      	movs	r3, #1
 80070b0:	e7cf      	b.n	8007052 <__ssvfiscanf_r+0x1da>
 80070b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80070b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070b8:	9341      	str	r3, [sp, #260]	; 0x104
 80070ba:	2300      	movs	r3, #0
 80070bc:	e7c9      	b.n	8007052 <__ssvfiscanf_r+0x1da>
 80070be:	2302      	movs	r3, #2
 80070c0:	e7c7      	b.n	8007052 <__ssvfiscanf_r+0x1da>
 80070c2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80070c4:	06c3      	lsls	r3, r0, #27
 80070c6:	f53f aefe 	bmi.w	8006ec6 <__ssvfiscanf_r+0x4e>
 80070ca:	9b00      	ldr	r3, [sp, #0]
 80070cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80070ce:	1d19      	adds	r1, r3, #4
 80070d0:	9100      	str	r1, [sp, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f010 0f01 	tst.w	r0, #1
 80070d8:	bf14      	ite	ne
 80070da:	801a      	strhne	r2, [r3, #0]
 80070dc:	601a      	streq	r2, [r3, #0]
 80070de:	e6f2      	b.n	8006ec6 <__ssvfiscanf_r+0x4e>
 80070e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80070e2:	4621      	mov	r1, r4
 80070e4:	4630      	mov	r0, r6
 80070e6:	4798      	blx	r3
 80070e8:	2800      	cmp	r0, #0
 80070ea:	d0b6      	beq.n	800705a <__ssvfiscanf_r+0x1e2>
 80070ec:	e79c      	b.n	8007028 <__ssvfiscanf_r+0x1b0>
 80070ee:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80070f0:	3201      	adds	r2, #1
 80070f2:	9245      	str	r2, [sp, #276]	; 0x114
 80070f4:	6862      	ldr	r2, [r4, #4]
 80070f6:	3a01      	subs	r2, #1
 80070f8:	2a00      	cmp	r2, #0
 80070fa:	6062      	str	r2, [r4, #4]
 80070fc:	dd02      	ble.n	8007104 <__ssvfiscanf_r+0x28c>
 80070fe:	3301      	adds	r3, #1
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	e7ad      	b.n	8007060 <__ssvfiscanf_r+0x1e8>
 8007104:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007106:	4621      	mov	r1, r4
 8007108:	4630      	mov	r0, r6
 800710a:	4798      	blx	r3
 800710c:	2800      	cmp	r0, #0
 800710e:	d0a7      	beq.n	8007060 <__ssvfiscanf_r+0x1e8>
 8007110:	e78a      	b.n	8007028 <__ssvfiscanf_r+0x1b0>
 8007112:	2b04      	cmp	r3, #4
 8007114:	dc0e      	bgt.n	8007134 <__ssvfiscanf_r+0x2bc>
 8007116:	466b      	mov	r3, sp
 8007118:	4622      	mov	r2, r4
 800711a:	a941      	add	r1, sp, #260	; 0x104
 800711c:	4630      	mov	r0, r6
 800711e:	f000 f87d 	bl	800721c <_scanf_i>
 8007122:	e7ab      	b.n	800707c <__ssvfiscanf_r+0x204>
 8007124:	08006dc5 	.word	0x08006dc5
 8007128:	08006e3f 	.word	0x08006e3f
 800712c:	080090a1 	.word	0x080090a1
 8007130:	0800940a 	.word	0x0800940a
 8007134:	4b0b      	ldr	r3, [pc, #44]	; (8007164 <__ssvfiscanf_r+0x2ec>)
 8007136:	2b00      	cmp	r3, #0
 8007138:	f43f aec5 	beq.w	8006ec6 <__ssvfiscanf_r+0x4e>
 800713c:	466b      	mov	r3, sp
 800713e:	4622      	mov	r2, r4
 8007140:	a941      	add	r1, sp, #260	; 0x104
 8007142:	4630      	mov	r0, r6
 8007144:	f7fc fbcc 	bl	80038e0 <_scanf_float>
 8007148:	e798      	b.n	800707c <__ssvfiscanf_r+0x204>
 800714a:	89a3      	ldrh	r3, [r4, #12]
 800714c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007150:	bf18      	it	ne
 8007152:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007156:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800715a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800715e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007160:	e7f9      	b.n	8007156 <__ssvfiscanf_r+0x2de>
 8007162:	bf00      	nop
 8007164:	080038e1 	.word	0x080038e1

08007168 <_scanf_chars>:
 8007168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800716c:	4615      	mov	r5, r2
 800716e:	688a      	ldr	r2, [r1, #8]
 8007170:	4680      	mov	r8, r0
 8007172:	460c      	mov	r4, r1
 8007174:	b932      	cbnz	r2, 8007184 <_scanf_chars+0x1c>
 8007176:	698a      	ldr	r2, [r1, #24]
 8007178:	2a00      	cmp	r2, #0
 800717a:	bf0c      	ite	eq
 800717c:	2201      	moveq	r2, #1
 800717e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8007182:	608a      	str	r2, [r1, #8]
 8007184:	6822      	ldr	r2, [r4, #0]
 8007186:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007218 <_scanf_chars+0xb0>
 800718a:	06d1      	lsls	r1, r2, #27
 800718c:	bf5f      	itttt	pl
 800718e:	681a      	ldrpl	r2, [r3, #0]
 8007190:	1d11      	addpl	r1, r2, #4
 8007192:	6019      	strpl	r1, [r3, #0]
 8007194:	6816      	ldrpl	r6, [r2, #0]
 8007196:	2700      	movs	r7, #0
 8007198:	69a0      	ldr	r0, [r4, #24]
 800719a:	b188      	cbz	r0, 80071c0 <_scanf_chars+0x58>
 800719c:	2801      	cmp	r0, #1
 800719e:	d107      	bne.n	80071b0 <_scanf_chars+0x48>
 80071a0:	682b      	ldr	r3, [r5, #0]
 80071a2:	781a      	ldrb	r2, [r3, #0]
 80071a4:	6963      	ldr	r3, [r4, #20]
 80071a6:	5c9b      	ldrb	r3, [r3, r2]
 80071a8:	b953      	cbnz	r3, 80071c0 <_scanf_chars+0x58>
 80071aa:	2f00      	cmp	r7, #0
 80071ac:	d031      	beq.n	8007212 <_scanf_chars+0xaa>
 80071ae:	e022      	b.n	80071f6 <_scanf_chars+0x8e>
 80071b0:	2802      	cmp	r0, #2
 80071b2:	d120      	bne.n	80071f6 <_scanf_chars+0x8e>
 80071b4:	682b      	ldr	r3, [r5, #0]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80071bc:	071b      	lsls	r3, r3, #28
 80071be:	d41a      	bmi.n	80071f6 <_scanf_chars+0x8e>
 80071c0:	6823      	ldr	r3, [r4, #0]
 80071c2:	06da      	lsls	r2, r3, #27
 80071c4:	bf5e      	ittt	pl
 80071c6:	682b      	ldrpl	r3, [r5, #0]
 80071c8:	781b      	ldrbpl	r3, [r3, #0]
 80071ca:	f806 3b01 	strbpl.w	r3, [r6], #1
 80071ce:	682a      	ldr	r2, [r5, #0]
 80071d0:	686b      	ldr	r3, [r5, #4]
 80071d2:	3201      	adds	r2, #1
 80071d4:	602a      	str	r2, [r5, #0]
 80071d6:	68a2      	ldr	r2, [r4, #8]
 80071d8:	3b01      	subs	r3, #1
 80071da:	3a01      	subs	r2, #1
 80071dc:	606b      	str	r3, [r5, #4]
 80071de:	3701      	adds	r7, #1
 80071e0:	60a2      	str	r2, [r4, #8]
 80071e2:	b142      	cbz	r2, 80071f6 <_scanf_chars+0x8e>
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	dcd7      	bgt.n	8007198 <_scanf_chars+0x30>
 80071e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80071ec:	4629      	mov	r1, r5
 80071ee:	4640      	mov	r0, r8
 80071f0:	4798      	blx	r3
 80071f2:	2800      	cmp	r0, #0
 80071f4:	d0d0      	beq.n	8007198 <_scanf_chars+0x30>
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	f013 0310 	ands.w	r3, r3, #16
 80071fc:	d105      	bne.n	800720a <_scanf_chars+0xa2>
 80071fe:	68e2      	ldr	r2, [r4, #12]
 8007200:	3201      	adds	r2, #1
 8007202:	60e2      	str	r2, [r4, #12]
 8007204:	69a2      	ldr	r2, [r4, #24]
 8007206:	b102      	cbz	r2, 800720a <_scanf_chars+0xa2>
 8007208:	7033      	strb	r3, [r6, #0]
 800720a:	6923      	ldr	r3, [r4, #16]
 800720c:	443b      	add	r3, r7
 800720e:	6123      	str	r3, [r4, #16]
 8007210:	2000      	movs	r0, #0
 8007212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007216:	bf00      	nop
 8007218:	080090a1 	.word	0x080090a1

0800721c <_scanf_i>:
 800721c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007220:	4698      	mov	r8, r3
 8007222:	4b76      	ldr	r3, [pc, #472]	; (80073fc <_scanf_i+0x1e0>)
 8007224:	460c      	mov	r4, r1
 8007226:	4682      	mov	sl, r0
 8007228:	4616      	mov	r6, r2
 800722a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800722e:	b087      	sub	sp, #28
 8007230:	ab03      	add	r3, sp, #12
 8007232:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007236:	4b72      	ldr	r3, [pc, #456]	; (8007400 <_scanf_i+0x1e4>)
 8007238:	69a1      	ldr	r1, [r4, #24]
 800723a:	4a72      	ldr	r2, [pc, #456]	; (8007404 <_scanf_i+0x1e8>)
 800723c:	2903      	cmp	r1, #3
 800723e:	bf18      	it	ne
 8007240:	461a      	movne	r2, r3
 8007242:	68a3      	ldr	r3, [r4, #8]
 8007244:	9201      	str	r2, [sp, #4]
 8007246:	1e5a      	subs	r2, r3, #1
 8007248:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800724c:	bf88      	it	hi
 800724e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007252:	4627      	mov	r7, r4
 8007254:	bf82      	ittt	hi
 8007256:	eb03 0905 	addhi.w	r9, r3, r5
 800725a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800725e:	60a3      	strhi	r3, [r4, #8]
 8007260:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007264:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007268:	bf98      	it	ls
 800726a:	f04f 0900 	movls.w	r9, #0
 800726e:	6023      	str	r3, [r4, #0]
 8007270:	463d      	mov	r5, r7
 8007272:	f04f 0b00 	mov.w	fp, #0
 8007276:	6831      	ldr	r1, [r6, #0]
 8007278:	ab03      	add	r3, sp, #12
 800727a:	7809      	ldrb	r1, [r1, #0]
 800727c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007280:	2202      	movs	r2, #2
 8007282:	f7f8 ffc5 	bl	8000210 <memchr>
 8007286:	b328      	cbz	r0, 80072d4 <_scanf_i+0xb8>
 8007288:	f1bb 0f01 	cmp.w	fp, #1
 800728c:	d159      	bne.n	8007342 <_scanf_i+0x126>
 800728e:	6862      	ldr	r2, [r4, #4]
 8007290:	b92a      	cbnz	r2, 800729e <_scanf_i+0x82>
 8007292:	6822      	ldr	r2, [r4, #0]
 8007294:	2308      	movs	r3, #8
 8007296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800729a:	6063      	str	r3, [r4, #4]
 800729c:	6022      	str	r2, [r4, #0]
 800729e:	6822      	ldr	r2, [r4, #0]
 80072a0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80072a4:	6022      	str	r2, [r4, #0]
 80072a6:	68a2      	ldr	r2, [r4, #8]
 80072a8:	1e51      	subs	r1, r2, #1
 80072aa:	60a1      	str	r1, [r4, #8]
 80072ac:	b192      	cbz	r2, 80072d4 <_scanf_i+0xb8>
 80072ae:	6832      	ldr	r2, [r6, #0]
 80072b0:	1c51      	adds	r1, r2, #1
 80072b2:	6031      	str	r1, [r6, #0]
 80072b4:	7812      	ldrb	r2, [r2, #0]
 80072b6:	f805 2b01 	strb.w	r2, [r5], #1
 80072ba:	6872      	ldr	r2, [r6, #4]
 80072bc:	3a01      	subs	r2, #1
 80072be:	2a00      	cmp	r2, #0
 80072c0:	6072      	str	r2, [r6, #4]
 80072c2:	dc07      	bgt.n	80072d4 <_scanf_i+0xb8>
 80072c4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80072c8:	4631      	mov	r1, r6
 80072ca:	4650      	mov	r0, sl
 80072cc:	4790      	blx	r2
 80072ce:	2800      	cmp	r0, #0
 80072d0:	f040 8085 	bne.w	80073de <_scanf_i+0x1c2>
 80072d4:	f10b 0b01 	add.w	fp, fp, #1
 80072d8:	f1bb 0f03 	cmp.w	fp, #3
 80072dc:	d1cb      	bne.n	8007276 <_scanf_i+0x5a>
 80072de:	6863      	ldr	r3, [r4, #4]
 80072e0:	b90b      	cbnz	r3, 80072e6 <_scanf_i+0xca>
 80072e2:	230a      	movs	r3, #10
 80072e4:	6063      	str	r3, [r4, #4]
 80072e6:	6863      	ldr	r3, [r4, #4]
 80072e8:	4947      	ldr	r1, [pc, #284]	; (8007408 <_scanf_i+0x1ec>)
 80072ea:	6960      	ldr	r0, [r4, #20]
 80072ec:	1ac9      	subs	r1, r1, r3
 80072ee:	f000 f8b5 	bl	800745c <__sccl>
 80072f2:	f04f 0b00 	mov.w	fp, #0
 80072f6:	68a3      	ldr	r3, [r4, #8]
 80072f8:	6822      	ldr	r2, [r4, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d03d      	beq.n	800737a <_scanf_i+0x15e>
 80072fe:	6831      	ldr	r1, [r6, #0]
 8007300:	6960      	ldr	r0, [r4, #20]
 8007302:	f891 c000 	ldrb.w	ip, [r1]
 8007306:	f810 000c 	ldrb.w	r0, [r0, ip]
 800730a:	2800      	cmp	r0, #0
 800730c:	d035      	beq.n	800737a <_scanf_i+0x15e>
 800730e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007312:	d124      	bne.n	800735e <_scanf_i+0x142>
 8007314:	0510      	lsls	r0, r2, #20
 8007316:	d522      	bpl.n	800735e <_scanf_i+0x142>
 8007318:	f10b 0b01 	add.w	fp, fp, #1
 800731c:	f1b9 0f00 	cmp.w	r9, #0
 8007320:	d003      	beq.n	800732a <_scanf_i+0x10e>
 8007322:	3301      	adds	r3, #1
 8007324:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8007328:	60a3      	str	r3, [r4, #8]
 800732a:	6873      	ldr	r3, [r6, #4]
 800732c:	3b01      	subs	r3, #1
 800732e:	2b00      	cmp	r3, #0
 8007330:	6073      	str	r3, [r6, #4]
 8007332:	dd1b      	ble.n	800736c <_scanf_i+0x150>
 8007334:	6833      	ldr	r3, [r6, #0]
 8007336:	3301      	adds	r3, #1
 8007338:	6033      	str	r3, [r6, #0]
 800733a:	68a3      	ldr	r3, [r4, #8]
 800733c:	3b01      	subs	r3, #1
 800733e:	60a3      	str	r3, [r4, #8]
 8007340:	e7d9      	b.n	80072f6 <_scanf_i+0xda>
 8007342:	f1bb 0f02 	cmp.w	fp, #2
 8007346:	d1ae      	bne.n	80072a6 <_scanf_i+0x8a>
 8007348:	6822      	ldr	r2, [r4, #0]
 800734a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800734e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007352:	d1bf      	bne.n	80072d4 <_scanf_i+0xb8>
 8007354:	2310      	movs	r3, #16
 8007356:	6063      	str	r3, [r4, #4]
 8007358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800735c:	e7a2      	b.n	80072a4 <_scanf_i+0x88>
 800735e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007362:	6022      	str	r2, [r4, #0]
 8007364:	780b      	ldrb	r3, [r1, #0]
 8007366:	f805 3b01 	strb.w	r3, [r5], #1
 800736a:	e7de      	b.n	800732a <_scanf_i+0x10e>
 800736c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007370:	4631      	mov	r1, r6
 8007372:	4650      	mov	r0, sl
 8007374:	4798      	blx	r3
 8007376:	2800      	cmp	r0, #0
 8007378:	d0df      	beq.n	800733a <_scanf_i+0x11e>
 800737a:	6823      	ldr	r3, [r4, #0]
 800737c:	05db      	lsls	r3, r3, #23
 800737e:	d50d      	bpl.n	800739c <_scanf_i+0x180>
 8007380:	42bd      	cmp	r5, r7
 8007382:	d909      	bls.n	8007398 <_scanf_i+0x17c>
 8007384:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007388:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800738c:	4632      	mov	r2, r6
 800738e:	4650      	mov	r0, sl
 8007390:	4798      	blx	r3
 8007392:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8007396:	464d      	mov	r5, r9
 8007398:	42bd      	cmp	r5, r7
 800739a:	d02d      	beq.n	80073f8 <_scanf_i+0x1dc>
 800739c:	6822      	ldr	r2, [r4, #0]
 800739e:	f012 0210 	ands.w	r2, r2, #16
 80073a2:	d113      	bne.n	80073cc <_scanf_i+0x1b0>
 80073a4:	702a      	strb	r2, [r5, #0]
 80073a6:	6863      	ldr	r3, [r4, #4]
 80073a8:	9e01      	ldr	r6, [sp, #4]
 80073aa:	4639      	mov	r1, r7
 80073ac:	4650      	mov	r0, sl
 80073ae:	47b0      	blx	r6
 80073b0:	6821      	ldr	r1, [r4, #0]
 80073b2:	f8d8 3000 	ldr.w	r3, [r8]
 80073b6:	f011 0f20 	tst.w	r1, #32
 80073ba:	d013      	beq.n	80073e4 <_scanf_i+0x1c8>
 80073bc:	1d1a      	adds	r2, r3, #4
 80073be:	f8c8 2000 	str.w	r2, [r8]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6018      	str	r0, [r3, #0]
 80073c6:	68e3      	ldr	r3, [r4, #12]
 80073c8:	3301      	adds	r3, #1
 80073ca:	60e3      	str	r3, [r4, #12]
 80073cc:	1bed      	subs	r5, r5, r7
 80073ce:	44ab      	add	fp, r5
 80073d0:	6925      	ldr	r5, [r4, #16]
 80073d2:	445d      	add	r5, fp
 80073d4:	6125      	str	r5, [r4, #16]
 80073d6:	2000      	movs	r0, #0
 80073d8:	b007      	add	sp, #28
 80073da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073de:	f04f 0b00 	mov.w	fp, #0
 80073e2:	e7ca      	b.n	800737a <_scanf_i+0x15e>
 80073e4:	1d1a      	adds	r2, r3, #4
 80073e6:	f8c8 2000 	str.w	r2, [r8]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f011 0f01 	tst.w	r1, #1
 80073f0:	bf14      	ite	ne
 80073f2:	8018      	strhne	r0, [r3, #0]
 80073f4:	6018      	streq	r0, [r3, #0]
 80073f6:	e7e6      	b.n	80073c6 <_scanf_i+0x1aa>
 80073f8:	2001      	movs	r0, #1
 80073fa:	e7ed      	b.n	80073d8 <_scanf_i+0x1bc>
 80073fc:	08009004 	.word	0x08009004
 8007400:	080075d9 	.word	0x080075d9
 8007404:	08004b35 	.word	0x08004b35
 8007408:	0800942e 	.word	0x0800942e

0800740c <_read_r>:
 800740c:	b538      	push	{r3, r4, r5, lr}
 800740e:	4d07      	ldr	r5, [pc, #28]	; (800742c <_read_r+0x20>)
 8007410:	4604      	mov	r4, r0
 8007412:	4608      	mov	r0, r1
 8007414:	4611      	mov	r1, r2
 8007416:	2200      	movs	r2, #0
 8007418:	602a      	str	r2, [r5, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	f000 fe82 	bl	8008124 <_read>
 8007420:	1c43      	adds	r3, r0, #1
 8007422:	d102      	bne.n	800742a <_read_r+0x1e>
 8007424:	682b      	ldr	r3, [r5, #0]
 8007426:	b103      	cbz	r3, 800742a <_read_r+0x1e>
 8007428:	6023      	str	r3, [r4, #0]
 800742a:	bd38      	pop	{r3, r4, r5, pc}
 800742c:	2000054c 	.word	0x2000054c

08007430 <nan>:
 8007430:	4901      	ldr	r1, [pc, #4]	; (8007438 <nan+0x8>)
 8007432:	2000      	movs	r0, #0
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	7ff80000 	.word	0x7ff80000

0800743c <_sbrk_r>:
 800743c:	b538      	push	{r3, r4, r5, lr}
 800743e:	4d06      	ldr	r5, [pc, #24]	; (8007458 <_sbrk_r+0x1c>)
 8007440:	2300      	movs	r3, #0
 8007442:	4604      	mov	r4, r0
 8007444:	4608      	mov	r0, r1
 8007446:	602b      	str	r3, [r5, #0]
 8007448:	f000 fe74 	bl	8008134 <_sbrk>
 800744c:	1c43      	adds	r3, r0, #1
 800744e:	d102      	bne.n	8007456 <_sbrk_r+0x1a>
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	b103      	cbz	r3, 8007456 <_sbrk_r+0x1a>
 8007454:	6023      	str	r3, [r4, #0]
 8007456:	bd38      	pop	{r3, r4, r5, pc}
 8007458:	2000054c 	.word	0x2000054c

0800745c <__sccl>:
 800745c:	b570      	push	{r4, r5, r6, lr}
 800745e:	780b      	ldrb	r3, [r1, #0]
 8007460:	4604      	mov	r4, r0
 8007462:	2b5e      	cmp	r3, #94	; 0x5e
 8007464:	bf0b      	itete	eq
 8007466:	784b      	ldrbeq	r3, [r1, #1]
 8007468:	1c48      	addne	r0, r1, #1
 800746a:	1c88      	addeq	r0, r1, #2
 800746c:	2200      	movne	r2, #0
 800746e:	bf08      	it	eq
 8007470:	2201      	moveq	r2, #1
 8007472:	1e61      	subs	r1, r4, #1
 8007474:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007478:	f801 2f01 	strb.w	r2, [r1, #1]!
 800747c:	42a9      	cmp	r1, r5
 800747e:	d1fb      	bne.n	8007478 <__sccl+0x1c>
 8007480:	b90b      	cbnz	r3, 8007486 <__sccl+0x2a>
 8007482:	3801      	subs	r0, #1
 8007484:	bd70      	pop	{r4, r5, r6, pc}
 8007486:	f082 0201 	eor.w	r2, r2, #1
 800748a:	54e2      	strb	r2, [r4, r3]
 800748c:	4605      	mov	r5, r0
 800748e:	4628      	mov	r0, r5
 8007490:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007494:	292d      	cmp	r1, #45	; 0x2d
 8007496:	d006      	beq.n	80074a6 <__sccl+0x4a>
 8007498:	295d      	cmp	r1, #93	; 0x5d
 800749a:	d0f3      	beq.n	8007484 <__sccl+0x28>
 800749c:	b909      	cbnz	r1, 80074a2 <__sccl+0x46>
 800749e:	4628      	mov	r0, r5
 80074a0:	e7f0      	b.n	8007484 <__sccl+0x28>
 80074a2:	460b      	mov	r3, r1
 80074a4:	e7f1      	b.n	800748a <__sccl+0x2e>
 80074a6:	786e      	ldrb	r6, [r5, #1]
 80074a8:	2e5d      	cmp	r6, #93	; 0x5d
 80074aa:	d0fa      	beq.n	80074a2 <__sccl+0x46>
 80074ac:	42b3      	cmp	r3, r6
 80074ae:	dcf8      	bgt.n	80074a2 <__sccl+0x46>
 80074b0:	3502      	adds	r5, #2
 80074b2:	4619      	mov	r1, r3
 80074b4:	3101      	adds	r1, #1
 80074b6:	428e      	cmp	r6, r1
 80074b8:	5462      	strb	r2, [r4, r1]
 80074ba:	dcfb      	bgt.n	80074b4 <__sccl+0x58>
 80074bc:	1af1      	subs	r1, r6, r3
 80074be:	3901      	subs	r1, #1
 80074c0:	1c58      	adds	r0, r3, #1
 80074c2:	42b3      	cmp	r3, r6
 80074c4:	bfa8      	it	ge
 80074c6:	2100      	movge	r1, #0
 80074c8:	1843      	adds	r3, r0, r1
 80074ca:	e7e0      	b.n	800748e <__sccl+0x32>

080074cc <strncmp>:
 80074cc:	b510      	push	{r4, lr}
 80074ce:	4603      	mov	r3, r0
 80074d0:	b172      	cbz	r2, 80074f0 <strncmp+0x24>
 80074d2:	3901      	subs	r1, #1
 80074d4:	1884      	adds	r4, r0, r2
 80074d6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80074da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80074de:	4290      	cmp	r0, r2
 80074e0:	d101      	bne.n	80074e6 <strncmp+0x1a>
 80074e2:	42a3      	cmp	r3, r4
 80074e4:	d101      	bne.n	80074ea <strncmp+0x1e>
 80074e6:	1a80      	subs	r0, r0, r2
 80074e8:	bd10      	pop	{r4, pc}
 80074ea:	2800      	cmp	r0, #0
 80074ec:	d1f3      	bne.n	80074d6 <strncmp+0xa>
 80074ee:	e7fa      	b.n	80074e6 <strncmp+0x1a>
 80074f0:	4610      	mov	r0, r2
 80074f2:	e7f9      	b.n	80074e8 <strncmp+0x1c>

080074f4 <_strtoul_l.constprop.0>:
 80074f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074f8:	4f36      	ldr	r7, [pc, #216]	; (80075d4 <_strtoul_l.constprop.0+0xe0>)
 80074fa:	4686      	mov	lr, r0
 80074fc:	460d      	mov	r5, r1
 80074fe:	4628      	mov	r0, r5
 8007500:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007504:	5de6      	ldrb	r6, [r4, r7]
 8007506:	f016 0608 	ands.w	r6, r6, #8
 800750a:	d1f8      	bne.n	80074fe <_strtoul_l.constprop.0+0xa>
 800750c:	2c2d      	cmp	r4, #45	; 0x2d
 800750e:	d12f      	bne.n	8007570 <_strtoul_l.constprop.0+0x7c>
 8007510:	782c      	ldrb	r4, [r5, #0]
 8007512:	2601      	movs	r6, #1
 8007514:	1c85      	adds	r5, r0, #2
 8007516:	2b00      	cmp	r3, #0
 8007518:	d057      	beq.n	80075ca <_strtoul_l.constprop.0+0xd6>
 800751a:	2b10      	cmp	r3, #16
 800751c:	d109      	bne.n	8007532 <_strtoul_l.constprop.0+0x3e>
 800751e:	2c30      	cmp	r4, #48	; 0x30
 8007520:	d107      	bne.n	8007532 <_strtoul_l.constprop.0+0x3e>
 8007522:	7828      	ldrb	r0, [r5, #0]
 8007524:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007528:	2858      	cmp	r0, #88	; 0x58
 800752a:	d149      	bne.n	80075c0 <_strtoul_l.constprop.0+0xcc>
 800752c:	786c      	ldrb	r4, [r5, #1]
 800752e:	2310      	movs	r3, #16
 8007530:	3502      	adds	r5, #2
 8007532:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007536:	2700      	movs	r7, #0
 8007538:	fbb8 f8f3 	udiv	r8, r8, r3
 800753c:	fb03 f908 	mul.w	r9, r3, r8
 8007540:	ea6f 0909 	mvn.w	r9, r9
 8007544:	4638      	mov	r0, r7
 8007546:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800754a:	f1bc 0f09 	cmp.w	ip, #9
 800754e:	d814      	bhi.n	800757a <_strtoul_l.constprop.0+0x86>
 8007550:	4664      	mov	r4, ip
 8007552:	42a3      	cmp	r3, r4
 8007554:	dd22      	ble.n	800759c <_strtoul_l.constprop.0+0xa8>
 8007556:	2f00      	cmp	r7, #0
 8007558:	db1d      	blt.n	8007596 <_strtoul_l.constprop.0+0xa2>
 800755a:	4580      	cmp	r8, r0
 800755c:	d31b      	bcc.n	8007596 <_strtoul_l.constprop.0+0xa2>
 800755e:	d101      	bne.n	8007564 <_strtoul_l.constprop.0+0x70>
 8007560:	45a1      	cmp	r9, r4
 8007562:	db18      	blt.n	8007596 <_strtoul_l.constprop.0+0xa2>
 8007564:	fb00 4003 	mla	r0, r0, r3, r4
 8007568:	2701      	movs	r7, #1
 800756a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800756e:	e7ea      	b.n	8007546 <_strtoul_l.constprop.0+0x52>
 8007570:	2c2b      	cmp	r4, #43	; 0x2b
 8007572:	bf04      	itt	eq
 8007574:	782c      	ldrbeq	r4, [r5, #0]
 8007576:	1c85      	addeq	r5, r0, #2
 8007578:	e7cd      	b.n	8007516 <_strtoul_l.constprop.0+0x22>
 800757a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800757e:	f1bc 0f19 	cmp.w	ip, #25
 8007582:	d801      	bhi.n	8007588 <_strtoul_l.constprop.0+0x94>
 8007584:	3c37      	subs	r4, #55	; 0x37
 8007586:	e7e4      	b.n	8007552 <_strtoul_l.constprop.0+0x5e>
 8007588:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800758c:	f1bc 0f19 	cmp.w	ip, #25
 8007590:	d804      	bhi.n	800759c <_strtoul_l.constprop.0+0xa8>
 8007592:	3c57      	subs	r4, #87	; 0x57
 8007594:	e7dd      	b.n	8007552 <_strtoul_l.constprop.0+0x5e>
 8007596:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800759a:	e7e6      	b.n	800756a <_strtoul_l.constprop.0+0x76>
 800759c:	2f00      	cmp	r7, #0
 800759e:	da07      	bge.n	80075b0 <_strtoul_l.constprop.0+0xbc>
 80075a0:	2322      	movs	r3, #34	; 0x22
 80075a2:	f8ce 3000 	str.w	r3, [lr]
 80075a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075aa:	b932      	cbnz	r2, 80075ba <_strtoul_l.constprop.0+0xc6>
 80075ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075b0:	b106      	cbz	r6, 80075b4 <_strtoul_l.constprop.0+0xc0>
 80075b2:	4240      	negs	r0, r0
 80075b4:	2a00      	cmp	r2, #0
 80075b6:	d0f9      	beq.n	80075ac <_strtoul_l.constprop.0+0xb8>
 80075b8:	b107      	cbz	r7, 80075bc <_strtoul_l.constprop.0+0xc8>
 80075ba:	1e69      	subs	r1, r5, #1
 80075bc:	6011      	str	r1, [r2, #0]
 80075be:	e7f5      	b.n	80075ac <_strtoul_l.constprop.0+0xb8>
 80075c0:	2430      	movs	r4, #48	; 0x30
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1b5      	bne.n	8007532 <_strtoul_l.constprop.0+0x3e>
 80075c6:	2308      	movs	r3, #8
 80075c8:	e7b3      	b.n	8007532 <_strtoul_l.constprop.0+0x3e>
 80075ca:	2c30      	cmp	r4, #48	; 0x30
 80075cc:	d0a9      	beq.n	8007522 <_strtoul_l.constprop.0+0x2e>
 80075ce:	230a      	movs	r3, #10
 80075d0:	e7af      	b.n	8007532 <_strtoul_l.constprop.0+0x3e>
 80075d2:	bf00      	nop
 80075d4:	080090a1 	.word	0x080090a1

080075d8 <_strtoul_r>:
 80075d8:	f7ff bf8c 	b.w	80074f4 <_strtoul_l.constprop.0>

080075dc <__submore>:
 80075dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075e0:	460c      	mov	r4, r1
 80075e2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80075e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075e8:	4299      	cmp	r1, r3
 80075ea:	d11d      	bne.n	8007628 <__submore+0x4c>
 80075ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80075f0:	f7ff fa18 	bl	8006a24 <_malloc_r>
 80075f4:	b918      	cbnz	r0, 80075fe <__submore+0x22>
 80075f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007602:	63a3      	str	r3, [r4, #56]	; 0x38
 8007604:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007608:	6360      	str	r0, [r4, #52]	; 0x34
 800760a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800760e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007612:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007616:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800761a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800761e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007622:	6020      	str	r0, [r4, #0]
 8007624:	2000      	movs	r0, #0
 8007626:	e7e8      	b.n	80075fa <__submore+0x1e>
 8007628:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800762a:	0077      	lsls	r7, r6, #1
 800762c:	463a      	mov	r2, r7
 800762e:	f000 fa29 	bl	8007a84 <_realloc_r>
 8007632:	4605      	mov	r5, r0
 8007634:	2800      	cmp	r0, #0
 8007636:	d0de      	beq.n	80075f6 <__submore+0x1a>
 8007638:	eb00 0806 	add.w	r8, r0, r6
 800763c:	4601      	mov	r1, r0
 800763e:	4632      	mov	r2, r6
 8007640:	4640      	mov	r0, r8
 8007642:	f7fe fcaf 	bl	8005fa4 <memcpy>
 8007646:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800764a:	f8c4 8000 	str.w	r8, [r4]
 800764e:	e7e9      	b.n	8007624 <__submore+0x48>

08007650 <__ascii_wctomb>:
 8007650:	4603      	mov	r3, r0
 8007652:	4608      	mov	r0, r1
 8007654:	b141      	cbz	r1, 8007668 <__ascii_wctomb+0x18>
 8007656:	2aff      	cmp	r2, #255	; 0xff
 8007658:	d904      	bls.n	8007664 <__ascii_wctomb+0x14>
 800765a:	228a      	movs	r2, #138	; 0x8a
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007662:	4770      	bx	lr
 8007664:	700a      	strb	r2, [r1, #0]
 8007666:	2001      	movs	r0, #1
 8007668:	4770      	bx	lr
	...

0800766c <__assert_func>:
 800766c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800766e:	4614      	mov	r4, r2
 8007670:	461a      	mov	r2, r3
 8007672:	4b09      	ldr	r3, [pc, #36]	; (8007698 <__assert_func+0x2c>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4605      	mov	r5, r0
 8007678:	68d8      	ldr	r0, [r3, #12]
 800767a:	b14c      	cbz	r4, 8007690 <__assert_func+0x24>
 800767c:	4b07      	ldr	r3, [pc, #28]	; (800769c <__assert_func+0x30>)
 800767e:	9100      	str	r1, [sp, #0]
 8007680:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007684:	4906      	ldr	r1, [pc, #24]	; (80076a0 <__assert_func+0x34>)
 8007686:	462b      	mov	r3, r5
 8007688:	f000 f9a2 	bl	80079d0 <fiprintf>
 800768c:	f000 fc40 	bl	8007f10 <abort>
 8007690:	4b04      	ldr	r3, [pc, #16]	; (80076a4 <__assert_func+0x38>)
 8007692:	461c      	mov	r4, r3
 8007694:	e7f3      	b.n	800767e <__assert_func+0x12>
 8007696:	bf00      	nop
 8007698:	20000044 	.word	0x20000044
 800769c:	08009430 	.word	0x08009430
 80076a0:	0800943d 	.word	0x0800943d
 80076a4:	0800946b 	.word	0x0800946b

080076a8 <__sflush_r>:
 80076a8:	898a      	ldrh	r2, [r1, #12]
 80076aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ac:	4605      	mov	r5, r0
 80076ae:	0710      	lsls	r0, r2, #28
 80076b0:	460c      	mov	r4, r1
 80076b2:	d457      	bmi.n	8007764 <__sflush_r+0xbc>
 80076b4:	684b      	ldr	r3, [r1, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	dc04      	bgt.n	80076c4 <__sflush_r+0x1c>
 80076ba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076bc:	2b00      	cmp	r3, #0
 80076be:	dc01      	bgt.n	80076c4 <__sflush_r+0x1c>
 80076c0:	2000      	movs	r0, #0
 80076c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076c6:	2e00      	cmp	r6, #0
 80076c8:	d0fa      	beq.n	80076c0 <__sflush_r+0x18>
 80076ca:	2300      	movs	r3, #0
 80076cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076d0:	682f      	ldr	r7, [r5, #0]
 80076d2:	602b      	str	r3, [r5, #0]
 80076d4:	d032      	beq.n	800773c <__sflush_r+0x94>
 80076d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076d8:	89a3      	ldrh	r3, [r4, #12]
 80076da:	075a      	lsls	r2, r3, #29
 80076dc:	d505      	bpl.n	80076ea <__sflush_r+0x42>
 80076de:	6863      	ldr	r3, [r4, #4]
 80076e0:	1ac0      	subs	r0, r0, r3
 80076e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076e4:	b10b      	cbz	r3, 80076ea <__sflush_r+0x42>
 80076e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076e8:	1ac0      	subs	r0, r0, r3
 80076ea:	2300      	movs	r3, #0
 80076ec:	4602      	mov	r2, r0
 80076ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076f0:	6a21      	ldr	r1, [r4, #32]
 80076f2:	4628      	mov	r0, r5
 80076f4:	47b0      	blx	r6
 80076f6:	1c43      	adds	r3, r0, #1
 80076f8:	89a3      	ldrh	r3, [r4, #12]
 80076fa:	d106      	bne.n	800770a <__sflush_r+0x62>
 80076fc:	6829      	ldr	r1, [r5, #0]
 80076fe:	291d      	cmp	r1, #29
 8007700:	d82c      	bhi.n	800775c <__sflush_r+0xb4>
 8007702:	4a29      	ldr	r2, [pc, #164]	; (80077a8 <__sflush_r+0x100>)
 8007704:	40ca      	lsrs	r2, r1
 8007706:	07d6      	lsls	r6, r2, #31
 8007708:	d528      	bpl.n	800775c <__sflush_r+0xb4>
 800770a:	2200      	movs	r2, #0
 800770c:	6062      	str	r2, [r4, #4]
 800770e:	04d9      	lsls	r1, r3, #19
 8007710:	6922      	ldr	r2, [r4, #16]
 8007712:	6022      	str	r2, [r4, #0]
 8007714:	d504      	bpl.n	8007720 <__sflush_r+0x78>
 8007716:	1c42      	adds	r2, r0, #1
 8007718:	d101      	bne.n	800771e <__sflush_r+0x76>
 800771a:	682b      	ldr	r3, [r5, #0]
 800771c:	b903      	cbnz	r3, 8007720 <__sflush_r+0x78>
 800771e:	6560      	str	r0, [r4, #84]	; 0x54
 8007720:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007722:	602f      	str	r7, [r5, #0]
 8007724:	2900      	cmp	r1, #0
 8007726:	d0cb      	beq.n	80076c0 <__sflush_r+0x18>
 8007728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800772c:	4299      	cmp	r1, r3
 800772e:	d002      	beq.n	8007736 <__sflush_r+0x8e>
 8007730:	4628      	mov	r0, r5
 8007732:	f7ff f90d 	bl	8006950 <_free_r>
 8007736:	2000      	movs	r0, #0
 8007738:	6360      	str	r0, [r4, #52]	; 0x34
 800773a:	e7c2      	b.n	80076c2 <__sflush_r+0x1a>
 800773c:	6a21      	ldr	r1, [r4, #32]
 800773e:	2301      	movs	r3, #1
 8007740:	4628      	mov	r0, r5
 8007742:	47b0      	blx	r6
 8007744:	1c41      	adds	r1, r0, #1
 8007746:	d1c7      	bne.n	80076d8 <__sflush_r+0x30>
 8007748:	682b      	ldr	r3, [r5, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d0c4      	beq.n	80076d8 <__sflush_r+0x30>
 800774e:	2b1d      	cmp	r3, #29
 8007750:	d001      	beq.n	8007756 <__sflush_r+0xae>
 8007752:	2b16      	cmp	r3, #22
 8007754:	d101      	bne.n	800775a <__sflush_r+0xb2>
 8007756:	602f      	str	r7, [r5, #0]
 8007758:	e7b2      	b.n	80076c0 <__sflush_r+0x18>
 800775a:	89a3      	ldrh	r3, [r4, #12]
 800775c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007760:	81a3      	strh	r3, [r4, #12]
 8007762:	e7ae      	b.n	80076c2 <__sflush_r+0x1a>
 8007764:	690f      	ldr	r7, [r1, #16]
 8007766:	2f00      	cmp	r7, #0
 8007768:	d0aa      	beq.n	80076c0 <__sflush_r+0x18>
 800776a:	0793      	lsls	r3, r2, #30
 800776c:	680e      	ldr	r6, [r1, #0]
 800776e:	bf08      	it	eq
 8007770:	694b      	ldreq	r3, [r1, #20]
 8007772:	600f      	str	r7, [r1, #0]
 8007774:	bf18      	it	ne
 8007776:	2300      	movne	r3, #0
 8007778:	1bf6      	subs	r6, r6, r7
 800777a:	608b      	str	r3, [r1, #8]
 800777c:	2e00      	cmp	r6, #0
 800777e:	dd9f      	ble.n	80076c0 <__sflush_r+0x18>
 8007780:	6a21      	ldr	r1, [r4, #32]
 8007782:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007786:	4633      	mov	r3, r6
 8007788:	463a      	mov	r2, r7
 800778a:	4628      	mov	r0, r5
 800778c:	47e0      	blx	ip
 800778e:	2800      	cmp	r0, #0
 8007790:	dc06      	bgt.n	80077a0 <__sflush_r+0xf8>
 8007792:	89a3      	ldrh	r3, [r4, #12]
 8007794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007798:	81a3      	strh	r3, [r4, #12]
 800779a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800779e:	e790      	b.n	80076c2 <__sflush_r+0x1a>
 80077a0:	4407      	add	r7, r0
 80077a2:	1a36      	subs	r6, r6, r0
 80077a4:	e7ea      	b.n	800777c <__sflush_r+0xd4>
 80077a6:	bf00      	nop
 80077a8:	20400001 	.word	0x20400001

080077ac <_fflush_r>:
 80077ac:	b538      	push	{r3, r4, r5, lr}
 80077ae:	690b      	ldr	r3, [r1, #16]
 80077b0:	4605      	mov	r5, r0
 80077b2:	460c      	mov	r4, r1
 80077b4:	b913      	cbnz	r3, 80077bc <_fflush_r+0x10>
 80077b6:	2500      	movs	r5, #0
 80077b8:	4628      	mov	r0, r5
 80077ba:	bd38      	pop	{r3, r4, r5, pc}
 80077bc:	b118      	cbz	r0, 80077c6 <_fflush_r+0x1a>
 80077be:	6983      	ldr	r3, [r0, #24]
 80077c0:	b90b      	cbnz	r3, 80077c6 <_fflush_r+0x1a>
 80077c2:	f000 f887 	bl	80078d4 <__sinit>
 80077c6:	4b14      	ldr	r3, [pc, #80]	; (8007818 <_fflush_r+0x6c>)
 80077c8:	429c      	cmp	r4, r3
 80077ca:	d11b      	bne.n	8007804 <_fflush_r+0x58>
 80077cc:	686c      	ldr	r4, [r5, #4]
 80077ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d0ef      	beq.n	80077b6 <_fflush_r+0xa>
 80077d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077d8:	07d0      	lsls	r0, r2, #31
 80077da:	d404      	bmi.n	80077e6 <_fflush_r+0x3a>
 80077dc:	0599      	lsls	r1, r3, #22
 80077de:	d402      	bmi.n	80077e6 <_fflush_r+0x3a>
 80077e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077e2:	f000 f927 	bl	8007a34 <__retarget_lock_acquire_recursive>
 80077e6:	4628      	mov	r0, r5
 80077e8:	4621      	mov	r1, r4
 80077ea:	f7ff ff5d 	bl	80076a8 <__sflush_r>
 80077ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077f0:	07da      	lsls	r2, r3, #31
 80077f2:	4605      	mov	r5, r0
 80077f4:	d4e0      	bmi.n	80077b8 <_fflush_r+0xc>
 80077f6:	89a3      	ldrh	r3, [r4, #12]
 80077f8:	059b      	lsls	r3, r3, #22
 80077fa:	d4dd      	bmi.n	80077b8 <_fflush_r+0xc>
 80077fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077fe:	f000 f91a 	bl	8007a36 <__retarget_lock_release_recursive>
 8007802:	e7d9      	b.n	80077b8 <_fflush_r+0xc>
 8007804:	4b05      	ldr	r3, [pc, #20]	; (800781c <_fflush_r+0x70>)
 8007806:	429c      	cmp	r4, r3
 8007808:	d101      	bne.n	800780e <_fflush_r+0x62>
 800780a:	68ac      	ldr	r4, [r5, #8]
 800780c:	e7df      	b.n	80077ce <_fflush_r+0x22>
 800780e:	4b04      	ldr	r3, [pc, #16]	; (8007820 <_fflush_r+0x74>)
 8007810:	429c      	cmp	r4, r3
 8007812:	bf08      	it	eq
 8007814:	68ec      	ldreq	r4, [r5, #12]
 8007816:	e7da      	b.n	80077ce <_fflush_r+0x22>
 8007818:	0800948c 	.word	0x0800948c
 800781c:	080094ac 	.word	0x080094ac
 8007820:	0800946c 	.word	0x0800946c

08007824 <std>:
 8007824:	2300      	movs	r3, #0
 8007826:	b510      	push	{r4, lr}
 8007828:	4604      	mov	r4, r0
 800782a:	e9c0 3300 	strd	r3, r3, [r0]
 800782e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007832:	6083      	str	r3, [r0, #8]
 8007834:	8181      	strh	r1, [r0, #12]
 8007836:	6643      	str	r3, [r0, #100]	; 0x64
 8007838:	81c2      	strh	r2, [r0, #14]
 800783a:	6183      	str	r3, [r0, #24]
 800783c:	4619      	mov	r1, r3
 800783e:	2208      	movs	r2, #8
 8007840:	305c      	adds	r0, #92	; 0x5c
 8007842:	f7fb fbe9 	bl	8003018 <memset>
 8007846:	4b05      	ldr	r3, [pc, #20]	; (800785c <std+0x38>)
 8007848:	6263      	str	r3, [r4, #36]	; 0x24
 800784a:	4b05      	ldr	r3, [pc, #20]	; (8007860 <std+0x3c>)
 800784c:	62a3      	str	r3, [r4, #40]	; 0x28
 800784e:	4b05      	ldr	r3, [pc, #20]	; (8007864 <std+0x40>)
 8007850:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007852:	4b05      	ldr	r3, [pc, #20]	; (8007868 <std+0x44>)
 8007854:	6224      	str	r4, [r4, #32]
 8007856:	6323      	str	r3, [r4, #48]	; 0x30
 8007858:	bd10      	pop	{r4, pc}
 800785a:	bf00      	nop
 800785c:	08003d95 	.word	0x08003d95
 8007860:	08003dbb 	.word	0x08003dbb
 8007864:	08003df3 	.word	0x08003df3
 8007868:	08003e17 	.word	0x08003e17

0800786c <_cleanup_r>:
 800786c:	4901      	ldr	r1, [pc, #4]	; (8007874 <_cleanup_r+0x8>)
 800786e:	f000 b8c1 	b.w	80079f4 <_fwalk_reent>
 8007872:	bf00      	nop
 8007874:	080077ad 	.word	0x080077ad

08007878 <__sfmoreglue>:
 8007878:	b570      	push	{r4, r5, r6, lr}
 800787a:	2268      	movs	r2, #104	; 0x68
 800787c:	1e4d      	subs	r5, r1, #1
 800787e:	4355      	muls	r5, r2
 8007880:	460e      	mov	r6, r1
 8007882:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007886:	f7ff f8cd 	bl	8006a24 <_malloc_r>
 800788a:	4604      	mov	r4, r0
 800788c:	b140      	cbz	r0, 80078a0 <__sfmoreglue+0x28>
 800788e:	2100      	movs	r1, #0
 8007890:	e9c0 1600 	strd	r1, r6, [r0]
 8007894:	300c      	adds	r0, #12
 8007896:	60a0      	str	r0, [r4, #8]
 8007898:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800789c:	f7fb fbbc 	bl	8003018 <memset>
 80078a0:	4620      	mov	r0, r4
 80078a2:	bd70      	pop	{r4, r5, r6, pc}

080078a4 <__sfp_lock_acquire>:
 80078a4:	4801      	ldr	r0, [pc, #4]	; (80078ac <__sfp_lock_acquire+0x8>)
 80078a6:	f000 b8c5 	b.w	8007a34 <__retarget_lock_acquire_recursive>
 80078aa:	bf00      	nop
 80078ac:	20000551 	.word	0x20000551

080078b0 <__sfp_lock_release>:
 80078b0:	4801      	ldr	r0, [pc, #4]	; (80078b8 <__sfp_lock_release+0x8>)
 80078b2:	f000 b8c0 	b.w	8007a36 <__retarget_lock_release_recursive>
 80078b6:	bf00      	nop
 80078b8:	20000551 	.word	0x20000551

080078bc <__sinit_lock_acquire>:
 80078bc:	4801      	ldr	r0, [pc, #4]	; (80078c4 <__sinit_lock_acquire+0x8>)
 80078be:	f000 b8b9 	b.w	8007a34 <__retarget_lock_acquire_recursive>
 80078c2:	bf00      	nop
 80078c4:	20000552 	.word	0x20000552

080078c8 <__sinit_lock_release>:
 80078c8:	4801      	ldr	r0, [pc, #4]	; (80078d0 <__sinit_lock_release+0x8>)
 80078ca:	f000 b8b4 	b.w	8007a36 <__retarget_lock_release_recursive>
 80078ce:	bf00      	nop
 80078d0:	20000552 	.word	0x20000552

080078d4 <__sinit>:
 80078d4:	b510      	push	{r4, lr}
 80078d6:	4604      	mov	r4, r0
 80078d8:	f7ff fff0 	bl	80078bc <__sinit_lock_acquire>
 80078dc:	69a3      	ldr	r3, [r4, #24]
 80078de:	b11b      	cbz	r3, 80078e8 <__sinit+0x14>
 80078e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078e4:	f7ff bff0 	b.w	80078c8 <__sinit_lock_release>
 80078e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80078ec:	6523      	str	r3, [r4, #80]	; 0x50
 80078ee:	4b13      	ldr	r3, [pc, #76]	; (800793c <__sinit+0x68>)
 80078f0:	4a13      	ldr	r2, [pc, #76]	; (8007940 <__sinit+0x6c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80078f6:	42a3      	cmp	r3, r4
 80078f8:	bf04      	itt	eq
 80078fa:	2301      	moveq	r3, #1
 80078fc:	61a3      	streq	r3, [r4, #24]
 80078fe:	4620      	mov	r0, r4
 8007900:	f000 f820 	bl	8007944 <__sfp>
 8007904:	6060      	str	r0, [r4, #4]
 8007906:	4620      	mov	r0, r4
 8007908:	f000 f81c 	bl	8007944 <__sfp>
 800790c:	60a0      	str	r0, [r4, #8]
 800790e:	4620      	mov	r0, r4
 8007910:	f000 f818 	bl	8007944 <__sfp>
 8007914:	2200      	movs	r2, #0
 8007916:	60e0      	str	r0, [r4, #12]
 8007918:	2104      	movs	r1, #4
 800791a:	6860      	ldr	r0, [r4, #4]
 800791c:	f7ff ff82 	bl	8007824 <std>
 8007920:	68a0      	ldr	r0, [r4, #8]
 8007922:	2201      	movs	r2, #1
 8007924:	2109      	movs	r1, #9
 8007926:	f7ff ff7d 	bl	8007824 <std>
 800792a:	68e0      	ldr	r0, [r4, #12]
 800792c:	2202      	movs	r2, #2
 800792e:	2112      	movs	r1, #18
 8007930:	f7ff ff78 	bl	8007824 <std>
 8007934:	2301      	movs	r3, #1
 8007936:	61a3      	str	r3, [r4, #24]
 8007938:	e7d2      	b.n	80078e0 <__sinit+0xc>
 800793a:	bf00      	nop
 800793c:	08009010 	.word	0x08009010
 8007940:	0800786d 	.word	0x0800786d

08007944 <__sfp>:
 8007944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007946:	4607      	mov	r7, r0
 8007948:	f7ff ffac 	bl	80078a4 <__sfp_lock_acquire>
 800794c:	4b1e      	ldr	r3, [pc, #120]	; (80079c8 <__sfp+0x84>)
 800794e:	681e      	ldr	r6, [r3, #0]
 8007950:	69b3      	ldr	r3, [r6, #24]
 8007952:	b913      	cbnz	r3, 800795a <__sfp+0x16>
 8007954:	4630      	mov	r0, r6
 8007956:	f7ff ffbd 	bl	80078d4 <__sinit>
 800795a:	3648      	adds	r6, #72	; 0x48
 800795c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007960:	3b01      	subs	r3, #1
 8007962:	d503      	bpl.n	800796c <__sfp+0x28>
 8007964:	6833      	ldr	r3, [r6, #0]
 8007966:	b30b      	cbz	r3, 80079ac <__sfp+0x68>
 8007968:	6836      	ldr	r6, [r6, #0]
 800796a:	e7f7      	b.n	800795c <__sfp+0x18>
 800796c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007970:	b9d5      	cbnz	r5, 80079a8 <__sfp+0x64>
 8007972:	4b16      	ldr	r3, [pc, #88]	; (80079cc <__sfp+0x88>)
 8007974:	60e3      	str	r3, [r4, #12]
 8007976:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800797a:	6665      	str	r5, [r4, #100]	; 0x64
 800797c:	f000 f859 	bl	8007a32 <__retarget_lock_init_recursive>
 8007980:	f7ff ff96 	bl	80078b0 <__sfp_lock_release>
 8007984:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007988:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800798c:	6025      	str	r5, [r4, #0]
 800798e:	61a5      	str	r5, [r4, #24]
 8007990:	2208      	movs	r2, #8
 8007992:	4629      	mov	r1, r5
 8007994:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007998:	f7fb fb3e 	bl	8003018 <memset>
 800799c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079a4:	4620      	mov	r0, r4
 80079a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079a8:	3468      	adds	r4, #104	; 0x68
 80079aa:	e7d9      	b.n	8007960 <__sfp+0x1c>
 80079ac:	2104      	movs	r1, #4
 80079ae:	4638      	mov	r0, r7
 80079b0:	f7ff ff62 	bl	8007878 <__sfmoreglue>
 80079b4:	4604      	mov	r4, r0
 80079b6:	6030      	str	r0, [r6, #0]
 80079b8:	2800      	cmp	r0, #0
 80079ba:	d1d5      	bne.n	8007968 <__sfp+0x24>
 80079bc:	f7ff ff78 	bl	80078b0 <__sfp_lock_release>
 80079c0:	230c      	movs	r3, #12
 80079c2:	603b      	str	r3, [r7, #0]
 80079c4:	e7ee      	b.n	80079a4 <__sfp+0x60>
 80079c6:	bf00      	nop
 80079c8:	08009010 	.word	0x08009010
 80079cc:	ffff0001 	.word	0xffff0001

080079d0 <fiprintf>:
 80079d0:	b40e      	push	{r1, r2, r3}
 80079d2:	b503      	push	{r0, r1, lr}
 80079d4:	4601      	mov	r1, r0
 80079d6:	ab03      	add	r3, sp, #12
 80079d8:	4805      	ldr	r0, [pc, #20]	; (80079f0 <fiprintf+0x20>)
 80079da:	f853 2b04 	ldr.w	r2, [r3], #4
 80079de:	6800      	ldr	r0, [r0, #0]
 80079e0:	9301      	str	r3, [sp, #4]
 80079e2:	f000 f8a5 	bl	8007b30 <_vfiprintf_r>
 80079e6:	b002      	add	sp, #8
 80079e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80079ec:	b003      	add	sp, #12
 80079ee:	4770      	bx	lr
 80079f0:	20000044 	.word	0x20000044

080079f4 <_fwalk_reent>:
 80079f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079f8:	4606      	mov	r6, r0
 80079fa:	4688      	mov	r8, r1
 80079fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a00:	2700      	movs	r7, #0
 8007a02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a06:	f1b9 0901 	subs.w	r9, r9, #1
 8007a0a:	d505      	bpl.n	8007a18 <_fwalk_reent+0x24>
 8007a0c:	6824      	ldr	r4, [r4, #0]
 8007a0e:	2c00      	cmp	r4, #0
 8007a10:	d1f7      	bne.n	8007a02 <_fwalk_reent+0xe>
 8007a12:	4638      	mov	r0, r7
 8007a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a18:	89ab      	ldrh	r3, [r5, #12]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d907      	bls.n	8007a2e <_fwalk_reent+0x3a>
 8007a1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a22:	3301      	adds	r3, #1
 8007a24:	d003      	beq.n	8007a2e <_fwalk_reent+0x3a>
 8007a26:	4629      	mov	r1, r5
 8007a28:	4630      	mov	r0, r6
 8007a2a:	47c0      	blx	r8
 8007a2c:	4307      	orrs	r7, r0
 8007a2e:	3568      	adds	r5, #104	; 0x68
 8007a30:	e7e9      	b.n	8007a06 <_fwalk_reent+0x12>

08007a32 <__retarget_lock_init_recursive>:
 8007a32:	4770      	bx	lr

08007a34 <__retarget_lock_acquire_recursive>:
 8007a34:	4770      	bx	lr

08007a36 <__retarget_lock_release_recursive>:
 8007a36:	4770      	bx	lr

08007a38 <memmove>:
 8007a38:	4288      	cmp	r0, r1
 8007a3a:	b510      	push	{r4, lr}
 8007a3c:	eb01 0402 	add.w	r4, r1, r2
 8007a40:	d902      	bls.n	8007a48 <memmove+0x10>
 8007a42:	4284      	cmp	r4, r0
 8007a44:	4623      	mov	r3, r4
 8007a46:	d807      	bhi.n	8007a58 <memmove+0x20>
 8007a48:	1e43      	subs	r3, r0, #1
 8007a4a:	42a1      	cmp	r1, r4
 8007a4c:	d008      	beq.n	8007a60 <memmove+0x28>
 8007a4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a56:	e7f8      	b.n	8007a4a <memmove+0x12>
 8007a58:	4402      	add	r2, r0
 8007a5a:	4601      	mov	r1, r0
 8007a5c:	428a      	cmp	r2, r1
 8007a5e:	d100      	bne.n	8007a62 <memmove+0x2a>
 8007a60:	bd10      	pop	{r4, pc}
 8007a62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a6a:	e7f7      	b.n	8007a5c <memmove+0x24>

08007a6c <__malloc_lock>:
 8007a6c:	4801      	ldr	r0, [pc, #4]	; (8007a74 <__malloc_lock+0x8>)
 8007a6e:	f7ff bfe1 	b.w	8007a34 <__retarget_lock_acquire_recursive>
 8007a72:	bf00      	nop
 8007a74:	20000550 	.word	0x20000550

08007a78 <__malloc_unlock>:
 8007a78:	4801      	ldr	r0, [pc, #4]	; (8007a80 <__malloc_unlock+0x8>)
 8007a7a:	f7ff bfdc 	b.w	8007a36 <__retarget_lock_release_recursive>
 8007a7e:	bf00      	nop
 8007a80:	20000550 	.word	0x20000550

08007a84 <_realloc_r>:
 8007a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a88:	4680      	mov	r8, r0
 8007a8a:	4614      	mov	r4, r2
 8007a8c:	460e      	mov	r6, r1
 8007a8e:	b921      	cbnz	r1, 8007a9a <_realloc_r+0x16>
 8007a90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a94:	4611      	mov	r1, r2
 8007a96:	f7fe bfc5 	b.w	8006a24 <_malloc_r>
 8007a9a:	b92a      	cbnz	r2, 8007aa8 <_realloc_r+0x24>
 8007a9c:	f7fe ff58 	bl	8006950 <_free_r>
 8007aa0:	4625      	mov	r5, r4
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aa8:	f000 fa9e 	bl	8007fe8 <_malloc_usable_size_r>
 8007aac:	4284      	cmp	r4, r0
 8007aae:	4607      	mov	r7, r0
 8007ab0:	d802      	bhi.n	8007ab8 <_realloc_r+0x34>
 8007ab2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007ab6:	d812      	bhi.n	8007ade <_realloc_r+0x5a>
 8007ab8:	4621      	mov	r1, r4
 8007aba:	4640      	mov	r0, r8
 8007abc:	f7fe ffb2 	bl	8006a24 <_malloc_r>
 8007ac0:	4605      	mov	r5, r0
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d0ed      	beq.n	8007aa2 <_realloc_r+0x1e>
 8007ac6:	42bc      	cmp	r4, r7
 8007ac8:	4622      	mov	r2, r4
 8007aca:	4631      	mov	r1, r6
 8007acc:	bf28      	it	cs
 8007ace:	463a      	movcs	r2, r7
 8007ad0:	f7fe fa68 	bl	8005fa4 <memcpy>
 8007ad4:	4631      	mov	r1, r6
 8007ad6:	4640      	mov	r0, r8
 8007ad8:	f7fe ff3a 	bl	8006950 <_free_r>
 8007adc:	e7e1      	b.n	8007aa2 <_realloc_r+0x1e>
 8007ade:	4635      	mov	r5, r6
 8007ae0:	e7df      	b.n	8007aa2 <_realloc_r+0x1e>

08007ae2 <__sfputc_r>:
 8007ae2:	6893      	ldr	r3, [r2, #8]
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	b410      	push	{r4}
 8007aea:	6093      	str	r3, [r2, #8]
 8007aec:	da07      	bge.n	8007afe <__sfputc_r+0x1c>
 8007aee:	6994      	ldr	r4, [r2, #24]
 8007af0:	42a3      	cmp	r3, r4
 8007af2:	db01      	blt.n	8007af8 <__sfputc_r+0x16>
 8007af4:	290a      	cmp	r1, #10
 8007af6:	d102      	bne.n	8007afe <__sfputc_r+0x1c>
 8007af8:	bc10      	pop	{r4}
 8007afa:	f000 b949 	b.w	8007d90 <__swbuf_r>
 8007afe:	6813      	ldr	r3, [r2, #0]
 8007b00:	1c58      	adds	r0, r3, #1
 8007b02:	6010      	str	r0, [r2, #0]
 8007b04:	7019      	strb	r1, [r3, #0]
 8007b06:	4608      	mov	r0, r1
 8007b08:	bc10      	pop	{r4}
 8007b0a:	4770      	bx	lr

08007b0c <__sfputs_r>:
 8007b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0e:	4606      	mov	r6, r0
 8007b10:	460f      	mov	r7, r1
 8007b12:	4614      	mov	r4, r2
 8007b14:	18d5      	adds	r5, r2, r3
 8007b16:	42ac      	cmp	r4, r5
 8007b18:	d101      	bne.n	8007b1e <__sfputs_r+0x12>
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	e007      	b.n	8007b2e <__sfputs_r+0x22>
 8007b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b22:	463a      	mov	r2, r7
 8007b24:	4630      	mov	r0, r6
 8007b26:	f7ff ffdc 	bl	8007ae2 <__sfputc_r>
 8007b2a:	1c43      	adds	r3, r0, #1
 8007b2c:	d1f3      	bne.n	8007b16 <__sfputs_r+0xa>
 8007b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007b30 <_vfiprintf_r>:
 8007b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b34:	460d      	mov	r5, r1
 8007b36:	b09d      	sub	sp, #116	; 0x74
 8007b38:	4614      	mov	r4, r2
 8007b3a:	4698      	mov	r8, r3
 8007b3c:	4606      	mov	r6, r0
 8007b3e:	b118      	cbz	r0, 8007b48 <_vfiprintf_r+0x18>
 8007b40:	6983      	ldr	r3, [r0, #24]
 8007b42:	b90b      	cbnz	r3, 8007b48 <_vfiprintf_r+0x18>
 8007b44:	f7ff fec6 	bl	80078d4 <__sinit>
 8007b48:	4b89      	ldr	r3, [pc, #548]	; (8007d70 <_vfiprintf_r+0x240>)
 8007b4a:	429d      	cmp	r5, r3
 8007b4c:	d11b      	bne.n	8007b86 <_vfiprintf_r+0x56>
 8007b4e:	6875      	ldr	r5, [r6, #4]
 8007b50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b52:	07d9      	lsls	r1, r3, #31
 8007b54:	d405      	bmi.n	8007b62 <_vfiprintf_r+0x32>
 8007b56:	89ab      	ldrh	r3, [r5, #12]
 8007b58:	059a      	lsls	r2, r3, #22
 8007b5a:	d402      	bmi.n	8007b62 <_vfiprintf_r+0x32>
 8007b5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b5e:	f7ff ff69 	bl	8007a34 <__retarget_lock_acquire_recursive>
 8007b62:	89ab      	ldrh	r3, [r5, #12]
 8007b64:	071b      	lsls	r3, r3, #28
 8007b66:	d501      	bpl.n	8007b6c <_vfiprintf_r+0x3c>
 8007b68:	692b      	ldr	r3, [r5, #16]
 8007b6a:	b9eb      	cbnz	r3, 8007ba8 <_vfiprintf_r+0x78>
 8007b6c:	4629      	mov	r1, r5
 8007b6e:	4630      	mov	r0, r6
 8007b70:	f000 f960 	bl	8007e34 <__swsetup_r>
 8007b74:	b1c0      	cbz	r0, 8007ba8 <_vfiprintf_r+0x78>
 8007b76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b78:	07dc      	lsls	r4, r3, #31
 8007b7a:	d50e      	bpl.n	8007b9a <_vfiprintf_r+0x6a>
 8007b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b80:	b01d      	add	sp, #116	; 0x74
 8007b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b86:	4b7b      	ldr	r3, [pc, #492]	; (8007d74 <_vfiprintf_r+0x244>)
 8007b88:	429d      	cmp	r5, r3
 8007b8a:	d101      	bne.n	8007b90 <_vfiprintf_r+0x60>
 8007b8c:	68b5      	ldr	r5, [r6, #8]
 8007b8e:	e7df      	b.n	8007b50 <_vfiprintf_r+0x20>
 8007b90:	4b79      	ldr	r3, [pc, #484]	; (8007d78 <_vfiprintf_r+0x248>)
 8007b92:	429d      	cmp	r5, r3
 8007b94:	bf08      	it	eq
 8007b96:	68f5      	ldreq	r5, [r6, #12]
 8007b98:	e7da      	b.n	8007b50 <_vfiprintf_r+0x20>
 8007b9a:	89ab      	ldrh	r3, [r5, #12]
 8007b9c:	0598      	lsls	r0, r3, #22
 8007b9e:	d4ed      	bmi.n	8007b7c <_vfiprintf_r+0x4c>
 8007ba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ba2:	f7ff ff48 	bl	8007a36 <__retarget_lock_release_recursive>
 8007ba6:	e7e9      	b.n	8007b7c <_vfiprintf_r+0x4c>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	9309      	str	r3, [sp, #36]	; 0x24
 8007bac:	2320      	movs	r3, #32
 8007bae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bb6:	2330      	movs	r3, #48	; 0x30
 8007bb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007d7c <_vfiprintf_r+0x24c>
 8007bbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bc0:	f04f 0901 	mov.w	r9, #1
 8007bc4:	4623      	mov	r3, r4
 8007bc6:	469a      	mov	sl, r3
 8007bc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bcc:	b10a      	cbz	r2, 8007bd2 <_vfiprintf_r+0xa2>
 8007bce:	2a25      	cmp	r2, #37	; 0x25
 8007bd0:	d1f9      	bne.n	8007bc6 <_vfiprintf_r+0x96>
 8007bd2:	ebba 0b04 	subs.w	fp, sl, r4
 8007bd6:	d00b      	beq.n	8007bf0 <_vfiprintf_r+0xc0>
 8007bd8:	465b      	mov	r3, fp
 8007bda:	4622      	mov	r2, r4
 8007bdc:	4629      	mov	r1, r5
 8007bde:	4630      	mov	r0, r6
 8007be0:	f7ff ff94 	bl	8007b0c <__sfputs_r>
 8007be4:	3001      	adds	r0, #1
 8007be6:	f000 80aa 	beq.w	8007d3e <_vfiprintf_r+0x20e>
 8007bea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bec:	445a      	add	r2, fp
 8007bee:	9209      	str	r2, [sp, #36]	; 0x24
 8007bf0:	f89a 3000 	ldrb.w	r3, [sl]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f000 80a2 	beq.w	8007d3e <_vfiprintf_r+0x20e>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c04:	f10a 0a01 	add.w	sl, sl, #1
 8007c08:	9304      	str	r3, [sp, #16]
 8007c0a:	9307      	str	r3, [sp, #28]
 8007c0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c10:	931a      	str	r3, [sp, #104]	; 0x68
 8007c12:	4654      	mov	r4, sl
 8007c14:	2205      	movs	r2, #5
 8007c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c1a:	4858      	ldr	r0, [pc, #352]	; (8007d7c <_vfiprintf_r+0x24c>)
 8007c1c:	f7f8 faf8 	bl	8000210 <memchr>
 8007c20:	9a04      	ldr	r2, [sp, #16]
 8007c22:	b9d8      	cbnz	r0, 8007c5c <_vfiprintf_r+0x12c>
 8007c24:	06d1      	lsls	r1, r2, #27
 8007c26:	bf44      	itt	mi
 8007c28:	2320      	movmi	r3, #32
 8007c2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c2e:	0713      	lsls	r3, r2, #28
 8007c30:	bf44      	itt	mi
 8007c32:	232b      	movmi	r3, #43	; 0x2b
 8007c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c38:	f89a 3000 	ldrb.w	r3, [sl]
 8007c3c:	2b2a      	cmp	r3, #42	; 0x2a
 8007c3e:	d015      	beq.n	8007c6c <_vfiprintf_r+0x13c>
 8007c40:	9a07      	ldr	r2, [sp, #28]
 8007c42:	4654      	mov	r4, sl
 8007c44:	2000      	movs	r0, #0
 8007c46:	f04f 0c0a 	mov.w	ip, #10
 8007c4a:	4621      	mov	r1, r4
 8007c4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c50:	3b30      	subs	r3, #48	; 0x30
 8007c52:	2b09      	cmp	r3, #9
 8007c54:	d94e      	bls.n	8007cf4 <_vfiprintf_r+0x1c4>
 8007c56:	b1b0      	cbz	r0, 8007c86 <_vfiprintf_r+0x156>
 8007c58:	9207      	str	r2, [sp, #28]
 8007c5a:	e014      	b.n	8007c86 <_vfiprintf_r+0x156>
 8007c5c:	eba0 0308 	sub.w	r3, r0, r8
 8007c60:	fa09 f303 	lsl.w	r3, r9, r3
 8007c64:	4313      	orrs	r3, r2
 8007c66:	9304      	str	r3, [sp, #16]
 8007c68:	46a2      	mov	sl, r4
 8007c6a:	e7d2      	b.n	8007c12 <_vfiprintf_r+0xe2>
 8007c6c:	9b03      	ldr	r3, [sp, #12]
 8007c6e:	1d19      	adds	r1, r3, #4
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	9103      	str	r1, [sp, #12]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	bfbb      	ittet	lt
 8007c78:	425b      	neglt	r3, r3
 8007c7a:	f042 0202 	orrlt.w	r2, r2, #2
 8007c7e:	9307      	strge	r3, [sp, #28]
 8007c80:	9307      	strlt	r3, [sp, #28]
 8007c82:	bfb8      	it	lt
 8007c84:	9204      	strlt	r2, [sp, #16]
 8007c86:	7823      	ldrb	r3, [r4, #0]
 8007c88:	2b2e      	cmp	r3, #46	; 0x2e
 8007c8a:	d10c      	bne.n	8007ca6 <_vfiprintf_r+0x176>
 8007c8c:	7863      	ldrb	r3, [r4, #1]
 8007c8e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c90:	d135      	bne.n	8007cfe <_vfiprintf_r+0x1ce>
 8007c92:	9b03      	ldr	r3, [sp, #12]
 8007c94:	1d1a      	adds	r2, r3, #4
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	9203      	str	r2, [sp, #12]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	bfb8      	it	lt
 8007c9e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007ca2:	3402      	adds	r4, #2
 8007ca4:	9305      	str	r3, [sp, #20]
 8007ca6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007d80 <_vfiprintf_r+0x250>
 8007caa:	7821      	ldrb	r1, [r4, #0]
 8007cac:	2203      	movs	r2, #3
 8007cae:	4650      	mov	r0, sl
 8007cb0:	f7f8 faae 	bl	8000210 <memchr>
 8007cb4:	b140      	cbz	r0, 8007cc8 <_vfiprintf_r+0x198>
 8007cb6:	2340      	movs	r3, #64	; 0x40
 8007cb8:	eba0 000a 	sub.w	r0, r0, sl
 8007cbc:	fa03 f000 	lsl.w	r0, r3, r0
 8007cc0:	9b04      	ldr	r3, [sp, #16]
 8007cc2:	4303      	orrs	r3, r0
 8007cc4:	3401      	adds	r4, #1
 8007cc6:	9304      	str	r3, [sp, #16]
 8007cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ccc:	482d      	ldr	r0, [pc, #180]	; (8007d84 <_vfiprintf_r+0x254>)
 8007cce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cd2:	2206      	movs	r2, #6
 8007cd4:	f7f8 fa9c 	bl	8000210 <memchr>
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	d03f      	beq.n	8007d5c <_vfiprintf_r+0x22c>
 8007cdc:	4b2a      	ldr	r3, [pc, #168]	; (8007d88 <_vfiprintf_r+0x258>)
 8007cde:	bb1b      	cbnz	r3, 8007d28 <_vfiprintf_r+0x1f8>
 8007ce0:	9b03      	ldr	r3, [sp, #12]
 8007ce2:	3307      	adds	r3, #7
 8007ce4:	f023 0307 	bic.w	r3, r3, #7
 8007ce8:	3308      	adds	r3, #8
 8007cea:	9303      	str	r3, [sp, #12]
 8007cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cee:	443b      	add	r3, r7
 8007cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8007cf2:	e767      	b.n	8007bc4 <_vfiprintf_r+0x94>
 8007cf4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	2001      	movs	r0, #1
 8007cfc:	e7a5      	b.n	8007c4a <_vfiprintf_r+0x11a>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	3401      	adds	r4, #1
 8007d02:	9305      	str	r3, [sp, #20]
 8007d04:	4619      	mov	r1, r3
 8007d06:	f04f 0c0a 	mov.w	ip, #10
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d10:	3a30      	subs	r2, #48	; 0x30
 8007d12:	2a09      	cmp	r2, #9
 8007d14:	d903      	bls.n	8007d1e <_vfiprintf_r+0x1ee>
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d0c5      	beq.n	8007ca6 <_vfiprintf_r+0x176>
 8007d1a:	9105      	str	r1, [sp, #20]
 8007d1c:	e7c3      	b.n	8007ca6 <_vfiprintf_r+0x176>
 8007d1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d22:	4604      	mov	r4, r0
 8007d24:	2301      	movs	r3, #1
 8007d26:	e7f0      	b.n	8007d0a <_vfiprintf_r+0x1da>
 8007d28:	ab03      	add	r3, sp, #12
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	462a      	mov	r2, r5
 8007d2e:	4b17      	ldr	r3, [pc, #92]	; (8007d8c <_vfiprintf_r+0x25c>)
 8007d30:	a904      	add	r1, sp, #16
 8007d32:	4630      	mov	r0, r6
 8007d34:	f7fb fa16 	bl	8003164 <_printf_float>
 8007d38:	4607      	mov	r7, r0
 8007d3a:	1c78      	adds	r0, r7, #1
 8007d3c:	d1d6      	bne.n	8007cec <_vfiprintf_r+0x1bc>
 8007d3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d40:	07d9      	lsls	r1, r3, #31
 8007d42:	d405      	bmi.n	8007d50 <_vfiprintf_r+0x220>
 8007d44:	89ab      	ldrh	r3, [r5, #12]
 8007d46:	059a      	lsls	r2, r3, #22
 8007d48:	d402      	bmi.n	8007d50 <_vfiprintf_r+0x220>
 8007d4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d4c:	f7ff fe73 	bl	8007a36 <__retarget_lock_release_recursive>
 8007d50:	89ab      	ldrh	r3, [r5, #12]
 8007d52:	065b      	lsls	r3, r3, #25
 8007d54:	f53f af12 	bmi.w	8007b7c <_vfiprintf_r+0x4c>
 8007d58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d5a:	e711      	b.n	8007b80 <_vfiprintf_r+0x50>
 8007d5c:	ab03      	add	r3, sp, #12
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	462a      	mov	r2, r5
 8007d62:	4b0a      	ldr	r3, [pc, #40]	; (8007d8c <_vfiprintf_r+0x25c>)
 8007d64:	a904      	add	r1, sp, #16
 8007d66:	4630      	mov	r0, r6
 8007d68:	f7fb fc94 	bl	8003694 <_printf_i>
 8007d6c:	e7e4      	b.n	8007d38 <_vfiprintf_r+0x208>
 8007d6e:	bf00      	nop
 8007d70:	0800948c 	.word	0x0800948c
 8007d74:	080094ac 	.word	0x080094ac
 8007d78:	0800946c 	.word	0x0800946c
 8007d7c:	08009404 	.word	0x08009404
 8007d80:	0800940a 	.word	0x0800940a
 8007d84:	0800940e 	.word	0x0800940e
 8007d88:	08003165 	.word	0x08003165
 8007d8c:	08007b0d 	.word	0x08007b0d

08007d90 <__swbuf_r>:
 8007d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d92:	460e      	mov	r6, r1
 8007d94:	4614      	mov	r4, r2
 8007d96:	4605      	mov	r5, r0
 8007d98:	b118      	cbz	r0, 8007da2 <__swbuf_r+0x12>
 8007d9a:	6983      	ldr	r3, [r0, #24]
 8007d9c:	b90b      	cbnz	r3, 8007da2 <__swbuf_r+0x12>
 8007d9e:	f7ff fd99 	bl	80078d4 <__sinit>
 8007da2:	4b21      	ldr	r3, [pc, #132]	; (8007e28 <__swbuf_r+0x98>)
 8007da4:	429c      	cmp	r4, r3
 8007da6:	d12b      	bne.n	8007e00 <__swbuf_r+0x70>
 8007da8:	686c      	ldr	r4, [r5, #4]
 8007daa:	69a3      	ldr	r3, [r4, #24]
 8007dac:	60a3      	str	r3, [r4, #8]
 8007dae:	89a3      	ldrh	r3, [r4, #12]
 8007db0:	071a      	lsls	r2, r3, #28
 8007db2:	d52f      	bpl.n	8007e14 <__swbuf_r+0x84>
 8007db4:	6923      	ldr	r3, [r4, #16]
 8007db6:	b36b      	cbz	r3, 8007e14 <__swbuf_r+0x84>
 8007db8:	6923      	ldr	r3, [r4, #16]
 8007dba:	6820      	ldr	r0, [r4, #0]
 8007dbc:	1ac0      	subs	r0, r0, r3
 8007dbe:	6963      	ldr	r3, [r4, #20]
 8007dc0:	b2f6      	uxtb	r6, r6
 8007dc2:	4283      	cmp	r3, r0
 8007dc4:	4637      	mov	r7, r6
 8007dc6:	dc04      	bgt.n	8007dd2 <__swbuf_r+0x42>
 8007dc8:	4621      	mov	r1, r4
 8007dca:	4628      	mov	r0, r5
 8007dcc:	f7ff fcee 	bl	80077ac <_fflush_r>
 8007dd0:	bb30      	cbnz	r0, 8007e20 <__swbuf_r+0x90>
 8007dd2:	68a3      	ldr	r3, [r4, #8]
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	60a3      	str	r3, [r4, #8]
 8007dd8:	6823      	ldr	r3, [r4, #0]
 8007dda:	1c5a      	adds	r2, r3, #1
 8007ddc:	6022      	str	r2, [r4, #0]
 8007dde:	701e      	strb	r6, [r3, #0]
 8007de0:	6963      	ldr	r3, [r4, #20]
 8007de2:	3001      	adds	r0, #1
 8007de4:	4283      	cmp	r3, r0
 8007de6:	d004      	beq.n	8007df2 <__swbuf_r+0x62>
 8007de8:	89a3      	ldrh	r3, [r4, #12]
 8007dea:	07db      	lsls	r3, r3, #31
 8007dec:	d506      	bpl.n	8007dfc <__swbuf_r+0x6c>
 8007dee:	2e0a      	cmp	r6, #10
 8007df0:	d104      	bne.n	8007dfc <__swbuf_r+0x6c>
 8007df2:	4621      	mov	r1, r4
 8007df4:	4628      	mov	r0, r5
 8007df6:	f7ff fcd9 	bl	80077ac <_fflush_r>
 8007dfa:	b988      	cbnz	r0, 8007e20 <__swbuf_r+0x90>
 8007dfc:	4638      	mov	r0, r7
 8007dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e00:	4b0a      	ldr	r3, [pc, #40]	; (8007e2c <__swbuf_r+0x9c>)
 8007e02:	429c      	cmp	r4, r3
 8007e04:	d101      	bne.n	8007e0a <__swbuf_r+0x7a>
 8007e06:	68ac      	ldr	r4, [r5, #8]
 8007e08:	e7cf      	b.n	8007daa <__swbuf_r+0x1a>
 8007e0a:	4b09      	ldr	r3, [pc, #36]	; (8007e30 <__swbuf_r+0xa0>)
 8007e0c:	429c      	cmp	r4, r3
 8007e0e:	bf08      	it	eq
 8007e10:	68ec      	ldreq	r4, [r5, #12]
 8007e12:	e7ca      	b.n	8007daa <__swbuf_r+0x1a>
 8007e14:	4621      	mov	r1, r4
 8007e16:	4628      	mov	r0, r5
 8007e18:	f000 f80c 	bl	8007e34 <__swsetup_r>
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d0cb      	beq.n	8007db8 <__swbuf_r+0x28>
 8007e20:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007e24:	e7ea      	b.n	8007dfc <__swbuf_r+0x6c>
 8007e26:	bf00      	nop
 8007e28:	0800948c 	.word	0x0800948c
 8007e2c:	080094ac 	.word	0x080094ac
 8007e30:	0800946c 	.word	0x0800946c

08007e34 <__swsetup_r>:
 8007e34:	4b32      	ldr	r3, [pc, #200]	; (8007f00 <__swsetup_r+0xcc>)
 8007e36:	b570      	push	{r4, r5, r6, lr}
 8007e38:	681d      	ldr	r5, [r3, #0]
 8007e3a:	4606      	mov	r6, r0
 8007e3c:	460c      	mov	r4, r1
 8007e3e:	b125      	cbz	r5, 8007e4a <__swsetup_r+0x16>
 8007e40:	69ab      	ldr	r3, [r5, #24]
 8007e42:	b913      	cbnz	r3, 8007e4a <__swsetup_r+0x16>
 8007e44:	4628      	mov	r0, r5
 8007e46:	f7ff fd45 	bl	80078d4 <__sinit>
 8007e4a:	4b2e      	ldr	r3, [pc, #184]	; (8007f04 <__swsetup_r+0xd0>)
 8007e4c:	429c      	cmp	r4, r3
 8007e4e:	d10f      	bne.n	8007e70 <__swsetup_r+0x3c>
 8007e50:	686c      	ldr	r4, [r5, #4]
 8007e52:	89a3      	ldrh	r3, [r4, #12]
 8007e54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e58:	0719      	lsls	r1, r3, #28
 8007e5a:	d42c      	bmi.n	8007eb6 <__swsetup_r+0x82>
 8007e5c:	06dd      	lsls	r5, r3, #27
 8007e5e:	d411      	bmi.n	8007e84 <__swsetup_r+0x50>
 8007e60:	2309      	movs	r3, #9
 8007e62:	6033      	str	r3, [r6, #0]
 8007e64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e68:	81a3      	strh	r3, [r4, #12]
 8007e6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e6e:	e03e      	b.n	8007eee <__swsetup_r+0xba>
 8007e70:	4b25      	ldr	r3, [pc, #148]	; (8007f08 <__swsetup_r+0xd4>)
 8007e72:	429c      	cmp	r4, r3
 8007e74:	d101      	bne.n	8007e7a <__swsetup_r+0x46>
 8007e76:	68ac      	ldr	r4, [r5, #8]
 8007e78:	e7eb      	b.n	8007e52 <__swsetup_r+0x1e>
 8007e7a:	4b24      	ldr	r3, [pc, #144]	; (8007f0c <__swsetup_r+0xd8>)
 8007e7c:	429c      	cmp	r4, r3
 8007e7e:	bf08      	it	eq
 8007e80:	68ec      	ldreq	r4, [r5, #12]
 8007e82:	e7e6      	b.n	8007e52 <__swsetup_r+0x1e>
 8007e84:	0758      	lsls	r0, r3, #29
 8007e86:	d512      	bpl.n	8007eae <__swsetup_r+0x7a>
 8007e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e8a:	b141      	cbz	r1, 8007e9e <__swsetup_r+0x6a>
 8007e8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e90:	4299      	cmp	r1, r3
 8007e92:	d002      	beq.n	8007e9a <__swsetup_r+0x66>
 8007e94:	4630      	mov	r0, r6
 8007e96:	f7fe fd5b 	bl	8006950 <_free_r>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	6363      	str	r3, [r4, #52]	; 0x34
 8007e9e:	89a3      	ldrh	r3, [r4, #12]
 8007ea0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ea4:	81a3      	strh	r3, [r4, #12]
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	6063      	str	r3, [r4, #4]
 8007eaa:	6923      	ldr	r3, [r4, #16]
 8007eac:	6023      	str	r3, [r4, #0]
 8007eae:	89a3      	ldrh	r3, [r4, #12]
 8007eb0:	f043 0308 	orr.w	r3, r3, #8
 8007eb4:	81a3      	strh	r3, [r4, #12]
 8007eb6:	6923      	ldr	r3, [r4, #16]
 8007eb8:	b94b      	cbnz	r3, 8007ece <__swsetup_r+0x9a>
 8007eba:	89a3      	ldrh	r3, [r4, #12]
 8007ebc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ec4:	d003      	beq.n	8007ece <__swsetup_r+0x9a>
 8007ec6:	4621      	mov	r1, r4
 8007ec8:	4630      	mov	r0, r6
 8007eca:	f000 f84d 	bl	8007f68 <__smakebuf_r>
 8007ece:	89a0      	ldrh	r0, [r4, #12]
 8007ed0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ed4:	f010 0301 	ands.w	r3, r0, #1
 8007ed8:	d00a      	beq.n	8007ef0 <__swsetup_r+0xbc>
 8007eda:	2300      	movs	r3, #0
 8007edc:	60a3      	str	r3, [r4, #8]
 8007ede:	6963      	ldr	r3, [r4, #20]
 8007ee0:	425b      	negs	r3, r3
 8007ee2:	61a3      	str	r3, [r4, #24]
 8007ee4:	6923      	ldr	r3, [r4, #16]
 8007ee6:	b943      	cbnz	r3, 8007efa <__swsetup_r+0xc6>
 8007ee8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007eec:	d1ba      	bne.n	8007e64 <__swsetup_r+0x30>
 8007eee:	bd70      	pop	{r4, r5, r6, pc}
 8007ef0:	0781      	lsls	r1, r0, #30
 8007ef2:	bf58      	it	pl
 8007ef4:	6963      	ldrpl	r3, [r4, #20]
 8007ef6:	60a3      	str	r3, [r4, #8]
 8007ef8:	e7f4      	b.n	8007ee4 <__swsetup_r+0xb0>
 8007efa:	2000      	movs	r0, #0
 8007efc:	e7f7      	b.n	8007eee <__swsetup_r+0xba>
 8007efe:	bf00      	nop
 8007f00:	20000044 	.word	0x20000044
 8007f04:	0800948c 	.word	0x0800948c
 8007f08:	080094ac 	.word	0x080094ac
 8007f0c:	0800946c 	.word	0x0800946c

08007f10 <abort>:
 8007f10:	b508      	push	{r3, lr}
 8007f12:	2006      	movs	r0, #6
 8007f14:	f000 f898 	bl	8008048 <raise>
 8007f18:	2001      	movs	r0, #1
 8007f1a:	f000 f921 	bl	8008160 <_exit>

08007f1e <__swhatbuf_r>:
 8007f1e:	b570      	push	{r4, r5, r6, lr}
 8007f20:	460e      	mov	r6, r1
 8007f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f26:	2900      	cmp	r1, #0
 8007f28:	b096      	sub	sp, #88	; 0x58
 8007f2a:	4614      	mov	r4, r2
 8007f2c:	461d      	mov	r5, r3
 8007f2e:	da08      	bge.n	8007f42 <__swhatbuf_r+0x24>
 8007f30:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	602a      	str	r2, [r5, #0]
 8007f38:	061a      	lsls	r2, r3, #24
 8007f3a:	d410      	bmi.n	8007f5e <__swhatbuf_r+0x40>
 8007f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f40:	e00e      	b.n	8007f60 <__swhatbuf_r+0x42>
 8007f42:	466a      	mov	r2, sp
 8007f44:	f000 f89c 	bl	8008080 <_fstat_r>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	dbf1      	blt.n	8007f30 <__swhatbuf_r+0x12>
 8007f4c:	9a01      	ldr	r2, [sp, #4]
 8007f4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f56:	425a      	negs	r2, r3
 8007f58:	415a      	adcs	r2, r3
 8007f5a:	602a      	str	r2, [r5, #0]
 8007f5c:	e7ee      	b.n	8007f3c <__swhatbuf_r+0x1e>
 8007f5e:	2340      	movs	r3, #64	; 0x40
 8007f60:	2000      	movs	r0, #0
 8007f62:	6023      	str	r3, [r4, #0]
 8007f64:	b016      	add	sp, #88	; 0x58
 8007f66:	bd70      	pop	{r4, r5, r6, pc}

08007f68 <__smakebuf_r>:
 8007f68:	898b      	ldrh	r3, [r1, #12]
 8007f6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f6c:	079d      	lsls	r5, r3, #30
 8007f6e:	4606      	mov	r6, r0
 8007f70:	460c      	mov	r4, r1
 8007f72:	d507      	bpl.n	8007f84 <__smakebuf_r+0x1c>
 8007f74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f78:	6023      	str	r3, [r4, #0]
 8007f7a:	6123      	str	r3, [r4, #16]
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	6163      	str	r3, [r4, #20]
 8007f80:	b002      	add	sp, #8
 8007f82:	bd70      	pop	{r4, r5, r6, pc}
 8007f84:	ab01      	add	r3, sp, #4
 8007f86:	466a      	mov	r2, sp
 8007f88:	f7ff ffc9 	bl	8007f1e <__swhatbuf_r>
 8007f8c:	9900      	ldr	r1, [sp, #0]
 8007f8e:	4605      	mov	r5, r0
 8007f90:	4630      	mov	r0, r6
 8007f92:	f7fe fd47 	bl	8006a24 <_malloc_r>
 8007f96:	b948      	cbnz	r0, 8007fac <__smakebuf_r+0x44>
 8007f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f9c:	059a      	lsls	r2, r3, #22
 8007f9e:	d4ef      	bmi.n	8007f80 <__smakebuf_r+0x18>
 8007fa0:	f023 0303 	bic.w	r3, r3, #3
 8007fa4:	f043 0302 	orr.w	r3, r3, #2
 8007fa8:	81a3      	strh	r3, [r4, #12]
 8007faa:	e7e3      	b.n	8007f74 <__smakebuf_r+0xc>
 8007fac:	4b0d      	ldr	r3, [pc, #52]	; (8007fe4 <__smakebuf_r+0x7c>)
 8007fae:	62b3      	str	r3, [r6, #40]	; 0x28
 8007fb0:	89a3      	ldrh	r3, [r4, #12]
 8007fb2:	6020      	str	r0, [r4, #0]
 8007fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fb8:	81a3      	strh	r3, [r4, #12]
 8007fba:	9b00      	ldr	r3, [sp, #0]
 8007fbc:	6163      	str	r3, [r4, #20]
 8007fbe:	9b01      	ldr	r3, [sp, #4]
 8007fc0:	6120      	str	r0, [r4, #16]
 8007fc2:	b15b      	cbz	r3, 8007fdc <__smakebuf_r+0x74>
 8007fc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fc8:	4630      	mov	r0, r6
 8007fca:	f000 f86b 	bl	80080a4 <_isatty_r>
 8007fce:	b128      	cbz	r0, 8007fdc <__smakebuf_r+0x74>
 8007fd0:	89a3      	ldrh	r3, [r4, #12]
 8007fd2:	f023 0303 	bic.w	r3, r3, #3
 8007fd6:	f043 0301 	orr.w	r3, r3, #1
 8007fda:	81a3      	strh	r3, [r4, #12]
 8007fdc:	89a0      	ldrh	r0, [r4, #12]
 8007fde:	4305      	orrs	r5, r0
 8007fe0:	81a5      	strh	r5, [r4, #12]
 8007fe2:	e7cd      	b.n	8007f80 <__smakebuf_r+0x18>
 8007fe4:	0800786d 	.word	0x0800786d

08007fe8 <_malloc_usable_size_r>:
 8007fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fec:	1f18      	subs	r0, r3, #4
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	bfbc      	itt	lt
 8007ff2:	580b      	ldrlt	r3, [r1, r0]
 8007ff4:	18c0      	addlt	r0, r0, r3
 8007ff6:	4770      	bx	lr

08007ff8 <_raise_r>:
 8007ff8:	291f      	cmp	r1, #31
 8007ffa:	b538      	push	{r3, r4, r5, lr}
 8007ffc:	4604      	mov	r4, r0
 8007ffe:	460d      	mov	r5, r1
 8008000:	d904      	bls.n	800800c <_raise_r+0x14>
 8008002:	2316      	movs	r3, #22
 8008004:	6003      	str	r3, [r0, #0]
 8008006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800800a:	bd38      	pop	{r3, r4, r5, pc}
 800800c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800800e:	b112      	cbz	r2, 8008016 <_raise_r+0x1e>
 8008010:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008014:	b94b      	cbnz	r3, 800802a <_raise_r+0x32>
 8008016:	4620      	mov	r0, r4
 8008018:	f000 f830 	bl	800807c <_getpid_r>
 800801c:	462a      	mov	r2, r5
 800801e:	4601      	mov	r1, r0
 8008020:	4620      	mov	r0, r4
 8008022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008026:	f000 b817 	b.w	8008058 <_kill_r>
 800802a:	2b01      	cmp	r3, #1
 800802c:	d00a      	beq.n	8008044 <_raise_r+0x4c>
 800802e:	1c59      	adds	r1, r3, #1
 8008030:	d103      	bne.n	800803a <_raise_r+0x42>
 8008032:	2316      	movs	r3, #22
 8008034:	6003      	str	r3, [r0, #0]
 8008036:	2001      	movs	r0, #1
 8008038:	e7e7      	b.n	800800a <_raise_r+0x12>
 800803a:	2400      	movs	r4, #0
 800803c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008040:	4628      	mov	r0, r5
 8008042:	4798      	blx	r3
 8008044:	2000      	movs	r0, #0
 8008046:	e7e0      	b.n	800800a <_raise_r+0x12>

08008048 <raise>:
 8008048:	4b02      	ldr	r3, [pc, #8]	; (8008054 <raise+0xc>)
 800804a:	4601      	mov	r1, r0
 800804c:	6818      	ldr	r0, [r3, #0]
 800804e:	f7ff bfd3 	b.w	8007ff8 <_raise_r>
 8008052:	bf00      	nop
 8008054:	20000044 	.word	0x20000044

08008058 <_kill_r>:
 8008058:	b538      	push	{r3, r4, r5, lr}
 800805a:	4d07      	ldr	r5, [pc, #28]	; (8008078 <_kill_r+0x20>)
 800805c:	2300      	movs	r3, #0
 800805e:	4604      	mov	r4, r0
 8008060:	4608      	mov	r0, r1
 8008062:	4611      	mov	r1, r2
 8008064:	602b      	str	r3, [r5, #0]
 8008066:	f000 f84d 	bl	8008104 <_kill>
 800806a:	1c43      	adds	r3, r0, #1
 800806c:	d102      	bne.n	8008074 <_kill_r+0x1c>
 800806e:	682b      	ldr	r3, [r5, #0]
 8008070:	b103      	cbz	r3, 8008074 <_kill_r+0x1c>
 8008072:	6023      	str	r3, [r4, #0]
 8008074:	bd38      	pop	{r3, r4, r5, pc}
 8008076:	bf00      	nop
 8008078:	2000054c 	.word	0x2000054c

0800807c <_getpid_r>:
 800807c:	f000 b832 	b.w	80080e4 <_getpid>

08008080 <_fstat_r>:
 8008080:	b538      	push	{r3, r4, r5, lr}
 8008082:	4d07      	ldr	r5, [pc, #28]	; (80080a0 <_fstat_r+0x20>)
 8008084:	2300      	movs	r3, #0
 8008086:	4604      	mov	r4, r0
 8008088:	4608      	mov	r0, r1
 800808a:	4611      	mov	r1, r2
 800808c:	602b      	str	r3, [r5, #0]
 800808e:	f000 f821 	bl	80080d4 <_fstat>
 8008092:	1c43      	adds	r3, r0, #1
 8008094:	d102      	bne.n	800809c <_fstat_r+0x1c>
 8008096:	682b      	ldr	r3, [r5, #0]
 8008098:	b103      	cbz	r3, 800809c <_fstat_r+0x1c>
 800809a:	6023      	str	r3, [r4, #0]
 800809c:	bd38      	pop	{r3, r4, r5, pc}
 800809e:	bf00      	nop
 80080a0:	2000054c 	.word	0x2000054c

080080a4 <_isatty_r>:
 80080a4:	b538      	push	{r3, r4, r5, lr}
 80080a6:	4d06      	ldr	r5, [pc, #24]	; (80080c0 <_isatty_r+0x1c>)
 80080a8:	2300      	movs	r3, #0
 80080aa:	4604      	mov	r4, r0
 80080ac:	4608      	mov	r0, r1
 80080ae:	602b      	str	r3, [r5, #0]
 80080b0:	f000 f820 	bl	80080f4 <_isatty>
 80080b4:	1c43      	adds	r3, r0, #1
 80080b6:	d102      	bne.n	80080be <_isatty_r+0x1a>
 80080b8:	682b      	ldr	r3, [r5, #0]
 80080ba:	b103      	cbz	r3, 80080be <_isatty_r+0x1a>
 80080bc:	6023      	str	r3, [r4, #0]
 80080be:	bd38      	pop	{r3, r4, r5, pc}
 80080c0:	2000054c 	.word	0x2000054c

080080c4 <_close>:
 80080c4:	4b02      	ldr	r3, [pc, #8]	; (80080d0 <_close+0xc>)
 80080c6:	2258      	movs	r2, #88	; 0x58
 80080c8:	601a      	str	r2, [r3, #0]
 80080ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080ce:	4770      	bx	lr
 80080d0:	2000054c 	.word	0x2000054c

080080d4 <_fstat>:
 80080d4:	4b02      	ldr	r3, [pc, #8]	; (80080e0 <_fstat+0xc>)
 80080d6:	2258      	movs	r2, #88	; 0x58
 80080d8:	601a      	str	r2, [r3, #0]
 80080da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080de:	4770      	bx	lr
 80080e0:	2000054c 	.word	0x2000054c

080080e4 <_getpid>:
 80080e4:	4b02      	ldr	r3, [pc, #8]	; (80080f0 <_getpid+0xc>)
 80080e6:	2258      	movs	r2, #88	; 0x58
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080ee:	4770      	bx	lr
 80080f0:	2000054c 	.word	0x2000054c

080080f4 <_isatty>:
 80080f4:	4b02      	ldr	r3, [pc, #8]	; (8008100 <_isatty+0xc>)
 80080f6:	2258      	movs	r2, #88	; 0x58
 80080f8:	601a      	str	r2, [r3, #0]
 80080fa:	2000      	movs	r0, #0
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	2000054c 	.word	0x2000054c

08008104 <_kill>:
 8008104:	4b02      	ldr	r3, [pc, #8]	; (8008110 <_kill+0xc>)
 8008106:	2258      	movs	r2, #88	; 0x58
 8008108:	601a      	str	r2, [r3, #0]
 800810a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800810e:	4770      	bx	lr
 8008110:	2000054c 	.word	0x2000054c

08008114 <_lseek>:
 8008114:	4b02      	ldr	r3, [pc, #8]	; (8008120 <_lseek+0xc>)
 8008116:	2258      	movs	r2, #88	; 0x58
 8008118:	601a      	str	r2, [r3, #0]
 800811a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800811e:	4770      	bx	lr
 8008120:	2000054c 	.word	0x2000054c

08008124 <_read>:
 8008124:	4b02      	ldr	r3, [pc, #8]	; (8008130 <_read+0xc>)
 8008126:	2258      	movs	r2, #88	; 0x58
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800812e:	4770      	bx	lr
 8008130:	2000054c 	.word	0x2000054c

08008134 <_sbrk>:
 8008134:	4a04      	ldr	r2, [pc, #16]	; (8008148 <_sbrk+0x14>)
 8008136:	6811      	ldr	r1, [r2, #0]
 8008138:	4603      	mov	r3, r0
 800813a:	b909      	cbnz	r1, 8008140 <_sbrk+0xc>
 800813c:	4903      	ldr	r1, [pc, #12]	; (800814c <_sbrk+0x18>)
 800813e:	6011      	str	r1, [r2, #0]
 8008140:	6810      	ldr	r0, [r2, #0]
 8008142:	4403      	add	r3, r0
 8008144:	6013      	str	r3, [r2, #0]
 8008146:	4770      	bx	lr
 8008148:	20000554 	.word	0x20000554
 800814c:	20000558 	.word	0x20000558

08008150 <_write>:
 8008150:	4b02      	ldr	r3, [pc, #8]	; (800815c <_write+0xc>)
 8008152:	2258      	movs	r2, #88	; 0x58
 8008154:	601a      	str	r2, [r3, #0]
 8008156:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800815a:	4770      	bx	lr
 800815c:	2000054c 	.word	0x2000054c

08008160 <_exit>:
 8008160:	e7fe      	b.n	8008160 <_exit>
	...

08008164 <_init>:
 8008164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008166:	bf00      	nop
 8008168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800816a:	bc08      	pop	{r3}
 800816c:	469e      	mov	lr, r3
 800816e:	4770      	bx	lr

08008170 <_fini>:
 8008170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008172:	bf00      	nop
 8008174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008176:	bc08      	pop	{r3}
 8008178:	469e      	mov	lr, r3
 800817a:	4770      	bx	lr
