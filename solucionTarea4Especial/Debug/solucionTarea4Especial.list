
solucionTarea4Especial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007928  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  08007ac8  08007ac8  00017ac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800809c  0800809c  00020218  2**0
                  CONTENTS
  4 .ARM          00000000  0800809c  0800809c  00020218  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800809c  0800809c  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800809c  0800809c  0001809c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080a0  080080a0  000180a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  080080a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005f70  20000218  080082bc  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006188  080082bc  00026188  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   000034a7  00000000  00000000  00020242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b6d  00000000  00000000  000236e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000278  00000000  00000000  00024258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000200  00000000  00000000  000244d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fc37  00000000  00000000  000246d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003cff  00000000  00000000  00034307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055f5e  00000000  00000000  00038006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008df64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f50  00000000  00000000  0008dfb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0008ff04  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0008ffd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007ab0 	.word	0x08007ab0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	08007ab0 	.word	0x08007ab0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_fmul>:
 8000290:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000294:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000298:	bf1e      	ittt	ne
 800029a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800029e:	ea92 0f0c 	teqne	r2, ip
 80002a2:	ea93 0f0c 	teqne	r3, ip
 80002a6:	d06f      	beq.n	8000388 <__aeabi_fmul+0xf8>
 80002a8:	441a      	add	r2, r3
 80002aa:	ea80 0c01 	eor.w	ip, r0, r1
 80002ae:	0240      	lsls	r0, r0, #9
 80002b0:	bf18      	it	ne
 80002b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80002b6:	d01e      	beq.n	80002f6 <__aeabi_fmul+0x66>
 80002b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80002bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80002c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80002c4:	fba0 3101 	umull	r3, r1, r0, r1
 80002c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80002cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80002d0:	bf3e      	ittt	cc
 80002d2:	0049      	lslcc	r1, r1, #1
 80002d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80002d8:	005b      	lslcc	r3, r3, #1
 80002da:	ea40 0001 	orr.w	r0, r0, r1
 80002de:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80002e2:	2afd      	cmp	r2, #253	; 0xfd
 80002e4:	d81d      	bhi.n	8000322 <__aeabi_fmul+0x92>
 80002e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80002ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ee:	bf08      	it	eq
 80002f0:	f020 0001 	biceq.w	r0, r0, #1
 80002f4:	4770      	bx	lr
 80002f6:	f090 0f00 	teq	r0, #0
 80002fa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002fe:	bf08      	it	eq
 8000300:	0249      	lsleq	r1, r1, #9
 8000302:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000306:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800030a:	3a7f      	subs	r2, #127	; 0x7f
 800030c:	bfc2      	ittt	gt
 800030e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000312:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000316:	4770      	bxgt	lr
 8000318:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800031c:	f04f 0300 	mov.w	r3, #0
 8000320:	3a01      	subs	r2, #1
 8000322:	dc5d      	bgt.n	80003e0 <__aeabi_fmul+0x150>
 8000324:	f112 0f19 	cmn.w	r2, #25
 8000328:	bfdc      	itt	le
 800032a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800032e:	4770      	bxle	lr
 8000330:	f1c2 0200 	rsb	r2, r2, #0
 8000334:	0041      	lsls	r1, r0, #1
 8000336:	fa21 f102 	lsr.w	r1, r1, r2
 800033a:	f1c2 0220 	rsb	r2, r2, #32
 800033e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000342:	ea5f 0031 	movs.w	r0, r1, rrx
 8000346:	f140 0000 	adc.w	r0, r0, #0
 800034a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800034e:	bf08      	it	eq
 8000350:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000354:	4770      	bx	lr
 8000356:	f092 0f00 	teq	r2, #0
 800035a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800035e:	bf02      	ittt	eq
 8000360:	0040      	lsleq	r0, r0, #1
 8000362:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000366:	3a01      	subeq	r2, #1
 8000368:	d0f9      	beq.n	800035e <__aeabi_fmul+0xce>
 800036a:	ea40 000c 	orr.w	r0, r0, ip
 800036e:	f093 0f00 	teq	r3, #0
 8000372:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000376:	bf02      	ittt	eq
 8000378:	0049      	lsleq	r1, r1, #1
 800037a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800037e:	3b01      	subeq	r3, #1
 8000380:	d0f9      	beq.n	8000376 <__aeabi_fmul+0xe6>
 8000382:	ea41 010c 	orr.w	r1, r1, ip
 8000386:	e78f      	b.n	80002a8 <__aeabi_fmul+0x18>
 8000388:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800038c:	ea92 0f0c 	teq	r2, ip
 8000390:	bf18      	it	ne
 8000392:	ea93 0f0c 	teqne	r3, ip
 8000396:	d00a      	beq.n	80003ae <__aeabi_fmul+0x11e>
 8000398:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800039c:	bf18      	it	ne
 800039e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80003a2:	d1d8      	bne.n	8000356 <__aeabi_fmul+0xc6>
 80003a4:	ea80 0001 	eor.w	r0, r0, r1
 80003a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80003ac:	4770      	bx	lr
 80003ae:	f090 0f00 	teq	r0, #0
 80003b2:	bf17      	itett	ne
 80003b4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80003b8:	4608      	moveq	r0, r1
 80003ba:	f091 0f00 	teqne	r1, #0
 80003be:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80003c2:	d014      	beq.n	80003ee <__aeabi_fmul+0x15e>
 80003c4:	ea92 0f0c 	teq	r2, ip
 80003c8:	d101      	bne.n	80003ce <__aeabi_fmul+0x13e>
 80003ca:	0242      	lsls	r2, r0, #9
 80003cc:	d10f      	bne.n	80003ee <__aeabi_fmul+0x15e>
 80003ce:	ea93 0f0c 	teq	r3, ip
 80003d2:	d103      	bne.n	80003dc <__aeabi_fmul+0x14c>
 80003d4:	024b      	lsls	r3, r1, #9
 80003d6:	bf18      	it	ne
 80003d8:	4608      	movne	r0, r1
 80003da:	d108      	bne.n	80003ee <__aeabi_fmul+0x15e>
 80003dc:	ea80 0001 	eor.w	r0, r0, r1
 80003e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003ec:	4770      	bx	lr
 80003ee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003f2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80003f6:	4770      	bx	lr

080003f8 <__aeabi_drsub>:
 80003f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003fc:	e002      	b.n	8000404 <__adddf3>
 80003fe:	bf00      	nop

08000400 <__aeabi_dsub>:
 8000400:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000404 <__adddf3>:
 8000404:	b530      	push	{r4, r5, lr}
 8000406:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800040a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	bf1f      	itttt	ne
 800041a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800041e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000422:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000426:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042a:	f000 80e2 	beq.w	80005f2 <__adddf3+0x1ee>
 800042e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000432:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000436:	bfb8      	it	lt
 8000438:	426d      	neglt	r5, r5
 800043a:	dd0c      	ble.n	8000456 <__adddf3+0x52>
 800043c:	442c      	add	r4, r5
 800043e:	ea80 0202 	eor.w	r2, r0, r2
 8000442:	ea81 0303 	eor.w	r3, r1, r3
 8000446:	ea82 0000 	eor.w	r0, r2, r0
 800044a:	ea83 0101 	eor.w	r1, r3, r1
 800044e:	ea80 0202 	eor.w	r2, r0, r2
 8000452:	ea81 0303 	eor.w	r3, r1, r3
 8000456:	2d36      	cmp	r5, #54	; 0x36
 8000458:	bf88      	it	hi
 800045a:	bd30      	pophi	{r4, r5, pc}
 800045c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000460:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000464:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000468:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800046c:	d002      	beq.n	8000474 <__adddf3+0x70>
 800046e:	4240      	negs	r0, r0
 8000470:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000474:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000478:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800047c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000480:	d002      	beq.n	8000488 <__adddf3+0x84>
 8000482:	4252      	negs	r2, r2
 8000484:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000488:	ea94 0f05 	teq	r4, r5
 800048c:	f000 80a7 	beq.w	80005de <__adddf3+0x1da>
 8000490:	f1a4 0401 	sub.w	r4, r4, #1
 8000494:	f1d5 0e20 	rsbs	lr, r5, #32
 8000498:	db0d      	blt.n	80004b6 <__adddf3+0xb2>
 800049a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800049e:	fa22 f205 	lsr.w	r2, r2, r5
 80004a2:	1880      	adds	r0, r0, r2
 80004a4:	f141 0100 	adc.w	r1, r1, #0
 80004a8:	fa03 f20e 	lsl.w	r2, r3, lr
 80004ac:	1880      	adds	r0, r0, r2
 80004ae:	fa43 f305 	asr.w	r3, r3, r5
 80004b2:	4159      	adcs	r1, r3
 80004b4:	e00e      	b.n	80004d4 <__adddf3+0xd0>
 80004b6:	f1a5 0520 	sub.w	r5, r5, #32
 80004ba:	f10e 0e20 	add.w	lr, lr, #32
 80004be:	2a01      	cmp	r2, #1
 80004c0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004c4:	bf28      	it	cs
 80004c6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ca:	fa43 f305 	asr.w	r3, r3, r5
 80004ce:	18c0      	adds	r0, r0, r3
 80004d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	d507      	bpl.n	80004ea <__adddf3+0xe6>
 80004da:	f04f 0e00 	mov.w	lr, #0
 80004de:	f1dc 0c00 	rsbs	ip, ip, #0
 80004e2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004e6:	eb6e 0101 	sbc.w	r1, lr, r1
 80004ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004ee:	d31b      	bcc.n	8000528 <__adddf3+0x124>
 80004f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004f4:	d30c      	bcc.n	8000510 <__adddf3+0x10c>
 80004f6:	0849      	lsrs	r1, r1, #1
 80004f8:	ea5f 0030 	movs.w	r0, r0, rrx
 80004fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000500:	f104 0401 	add.w	r4, r4, #1
 8000504:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000508:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800050c:	f080 809a 	bcs.w	8000644 <__adddf3+0x240>
 8000510:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000514:	bf08      	it	eq
 8000516:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800051a:	f150 0000 	adcs.w	r0, r0, #0
 800051e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000522:	ea41 0105 	orr.w	r1, r1, r5
 8000526:	bd30      	pop	{r4, r5, pc}
 8000528:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800052c:	4140      	adcs	r0, r0
 800052e:	eb41 0101 	adc.w	r1, r1, r1
 8000532:	3c01      	subs	r4, #1
 8000534:	bf28      	it	cs
 8000536:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800053a:	d2e9      	bcs.n	8000510 <__adddf3+0x10c>
 800053c:	f091 0f00 	teq	r1, #0
 8000540:	bf04      	itt	eq
 8000542:	4601      	moveq	r1, r0
 8000544:	2000      	moveq	r0, #0
 8000546:	fab1 f381 	clz	r3, r1
 800054a:	bf08      	it	eq
 800054c:	3320      	addeq	r3, #32
 800054e:	f1a3 030b 	sub.w	r3, r3, #11
 8000552:	f1b3 0220 	subs.w	r2, r3, #32
 8000556:	da0c      	bge.n	8000572 <__adddf3+0x16e>
 8000558:	320c      	adds	r2, #12
 800055a:	dd08      	ble.n	800056e <__adddf3+0x16a>
 800055c:	f102 0c14 	add.w	ip, r2, #20
 8000560:	f1c2 020c 	rsb	r2, r2, #12
 8000564:	fa01 f00c 	lsl.w	r0, r1, ip
 8000568:	fa21 f102 	lsr.w	r1, r1, r2
 800056c:	e00c      	b.n	8000588 <__adddf3+0x184>
 800056e:	f102 0214 	add.w	r2, r2, #20
 8000572:	bfd8      	it	le
 8000574:	f1c2 0c20 	rsble	ip, r2, #32
 8000578:	fa01 f102 	lsl.w	r1, r1, r2
 800057c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000580:	bfdc      	itt	le
 8000582:	ea41 010c 	orrle.w	r1, r1, ip
 8000586:	4090      	lslle	r0, r2
 8000588:	1ae4      	subs	r4, r4, r3
 800058a:	bfa2      	ittt	ge
 800058c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000590:	4329      	orrge	r1, r5
 8000592:	bd30      	popge	{r4, r5, pc}
 8000594:	ea6f 0404 	mvn.w	r4, r4
 8000598:	3c1f      	subs	r4, #31
 800059a:	da1c      	bge.n	80005d6 <__adddf3+0x1d2>
 800059c:	340c      	adds	r4, #12
 800059e:	dc0e      	bgt.n	80005be <__adddf3+0x1ba>
 80005a0:	f104 0414 	add.w	r4, r4, #20
 80005a4:	f1c4 0220 	rsb	r2, r4, #32
 80005a8:	fa20 f004 	lsr.w	r0, r0, r4
 80005ac:	fa01 f302 	lsl.w	r3, r1, r2
 80005b0:	ea40 0003 	orr.w	r0, r0, r3
 80005b4:	fa21 f304 	lsr.w	r3, r1, r4
 80005b8:	ea45 0103 	orr.w	r1, r5, r3
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	f1c4 040c 	rsb	r4, r4, #12
 80005c2:	f1c4 0220 	rsb	r2, r4, #32
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 f304 	lsl.w	r3, r1, r4
 80005ce:	ea40 0003 	orr.w	r0, r0, r3
 80005d2:	4629      	mov	r1, r5
 80005d4:	bd30      	pop	{r4, r5, pc}
 80005d6:	fa21 f004 	lsr.w	r0, r1, r4
 80005da:	4629      	mov	r1, r5
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	f094 0f00 	teq	r4, #0
 80005e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005e6:	bf06      	itte	eq
 80005e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005ec:	3401      	addeq	r4, #1
 80005ee:	3d01      	subne	r5, #1
 80005f0:	e74e      	b.n	8000490 <__adddf3+0x8c>
 80005f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005f6:	bf18      	it	ne
 80005f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005fc:	d029      	beq.n	8000652 <__adddf3+0x24e>
 80005fe:	ea94 0f05 	teq	r4, r5
 8000602:	bf08      	it	eq
 8000604:	ea90 0f02 	teqeq	r0, r2
 8000608:	d005      	beq.n	8000616 <__adddf3+0x212>
 800060a:	ea54 0c00 	orrs.w	ip, r4, r0
 800060e:	bf04      	itt	eq
 8000610:	4619      	moveq	r1, r3
 8000612:	4610      	moveq	r0, r2
 8000614:	bd30      	pop	{r4, r5, pc}
 8000616:	ea91 0f03 	teq	r1, r3
 800061a:	bf1e      	ittt	ne
 800061c:	2100      	movne	r1, #0
 800061e:	2000      	movne	r0, #0
 8000620:	bd30      	popne	{r4, r5, pc}
 8000622:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000626:	d105      	bne.n	8000634 <__adddf3+0x230>
 8000628:	0040      	lsls	r0, r0, #1
 800062a:	4149      	adcs	r1, r1
 800062c:	bf28      	it	cs
 800062e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000638:	bf3c      	itt	cc
 800063a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800063e:	bd30      	popcc	{r4, r5, pc}
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000644:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000648:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800064c:	f04f 0000 	mov.w	r0, #0
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000656:	bf1a      	itte	ne
 8000658:	4619      	movne	r1, r3
 800065a:	4610      	movne	r0, r2
 800065c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000660:	bf1c      	itt	ne
 8000662:	460b      	movne	r3, r1
 8000664:	4602      	movne	r2, r0
 8000666:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800066a:	bf06      	itte	eq
 800066c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000670:	ea91 0f03 	teqeq	r1, r3
 8000674:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	bf00      	nop

0800067c <__aeabi_ui2d>:
 800067c:	f090 0f00 	teq	r0, #0
 8000680:	bf04      	itt	eq
 8000682:	2100      	moveq	r1, #0
 8000684:	4770      	bxeq	lr
 8000686:	b530      	push	{r4, r5, lr}
 8000688:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800068c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000690:	f04f 0500 	mov.w	r5, #0
 8000694:	f04f 0100 	mov.w	r1, #0
 8000698:	e750      	b.n	800053c <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_i2d>:
 800069c:	f090 0f00 	teq	r0, #0
 80006a0:	bf04      	itt	eq
 80006a2:	2100      	moveq	r1, #0
 80006a4:	4770      	bxeq	lr
 80006a6:	b530      	push	{r4, r5, lr}
 80006a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006b4:	bf48      	it	mi
 80006b6:	4240      	negmi	r0, r0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e73e      	b.n	800053c <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_f2d>:
 80006c0:	0042      	lsls	r2, r0, #1
 80006c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006ce:	bf1f      	itttt	ne
 80006d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006dc:	4770      	bxne	lr
 80006de:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006e2:	bf08      	it	eq
 80006e4:	4770      	bxeq	lr
 80006e6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006ea:	bf04      	itt	eq
 80006ec:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006f0:	4770      	bxeq	lr
 80006f2:	b530      	push	{r4, r5, lr}
 80006f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000700:	e71c      	b.n	800053c <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_ul2d>:
 8000704:	ea50 0201 	orrs.w	r2, r0, r1
 8000708:	bf08      	it	eq
 800070a:	4770      	bxeq	lr
 800070c:	b530      	push	{r4, r5, lr}
 800070e:	f04f 0500 	mov.w	r5, #0
 8000712:	e00a      	b.n	800072a <__aeabi_l2d+0x16>

08000714 <__aeabi_l2d>:
 8000714:	ea50 0201 	orrs.w	r2, r0, r1
 8000718:	bf08      	it	eq
 800071a:	4770      	bxeq	lr
 800071c:	b530      	push	{r4, r5, lr}
 800071e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000722:	d502      	bpl.n	800072a <__aeabi_l2d+0x16>
 8000724:	4240      	negs	r0, r0
 8000726:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800072a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800072e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000732:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000736:	f43f aed8 	beq.w	80004ea <__adddf3+0xe6>
 800073a:	f04f 0203 	mov.w	r2, #3
 800073e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000742:	bf18      	it	ne
 8000744:	3203      	addne	r2, #3
 8000746:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800074a:	bf18      	it	ne
 800074c:	3203      	addne	r2, #3
 800074e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000752:	f1c2 0320 	rsb	r3, r2, #32
 8000756:	fa00 fc03 	lsl.w	ip, r0, r3
 800075a:	fa20 f002 	lsr.w	r0, r0, r2
 800075e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000762:	ea40 000e 	orr.w	r0, r0, lr
 8000766:	fa21 f102 	lsr.w	r1, r1, r2
 800076a:	4414      	add	r4, r2
 800076c:	e6bd      	b.n	80004ea <__adddf3+0xe6>
 800076e:	bf00      	nop

08000770 <__aeabi_dmul>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8de 	bleq	800094c <__aeabi_dmul+0x1dc>
 8000790:	442c      	add	r4, r5
 8000792:	ea81 0603 	eor.w	r6, r1, r3
 8000796:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800079a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800079e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80007a2:	bf18      	it	ne
 80007a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80007a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80007b0:	d038      	beq.n	8000824 <__aeabi_dmul+0xb4>
 80007b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80007b6:	f04f 0500 	mov.w	r5, #0
 80007ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80007be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80007c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80007c6:	f04f 0600 	mov.w	r6, #0
 80007ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80007ce:	f09c 0f00 	teq	ip, #0
 80007d2:	bf18      	it	ne
 80007d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80007d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80007dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80007e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80007e4:	d204      	bcs.n	80007f0 <__aeabi_dmul+0x80>
 80007e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80007ea:	416d      	adcs	r5, r5
 80007ec:	eb46 0606 	adc.w	r6, r6, r6
 80007f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80007f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000800:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000804:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000808:	bf88      	it	hi
 800080a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800080e:	d81e      	bhi.n	800084e <__aeabi_dmul+0xde>
 8000810:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000814:	bf08      	it	eq
 8000816:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800081a:	f150 0000 	adcs.w	r0, r0, #0
 800081e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000822:	bd70      	pop	{r4, r5, r6, pc}
 8000824:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000828:	ea46 0101 	orr.w	r1, r6, r1
 800082c:	ea40 0002 	orr.w	r0, r0, r2
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000838:	bfc2      	ittt	gt
 800083a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800083e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000842:	bd70      	popgt	{r4, r5, r6, pc}
 8000844:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000848:	f04f 0e00 	mov.w	lr, #0
 800084c:	3c01      	subs	r4, #1
 800084e:	f300 80ab 	bgt.w	80009a8 <__aeabi_dmul+0x238>
 8000852:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000856:	bfde      	ittt	le
 8000858:	2000      	movle	r0, #0
 800085a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800085e:	bd70      	pople	{r4, r5, r6, pc}
 8000860:	f1c4 0400 	rsb	r4, r4, #0
 8000864:	3c20      	subs	r4, #32
 8000866:	da35      	bge.n	80008d4 <__aeabi_dmul+0x164>
 8000868:	340c      	adds	r4, #12
 800086a:	dc1b      	bgt.n	80008a4 <__aeabi_dmul+0x134>
 800086c:	f104 0414 	add.w	r4, r4, #20
 8000870:	f1c4 0520 	rsb	r5, r4, #32
 8000874:	fa00 f305 	lsl.w	r3, r0, r5
 8000878:	fa20 f004 	lsr.w	r0, r0, r4
 800087c:	fa01 f205 	lsl.w	r2, r1, r5
 8000880:	ea40 0002 	orr.w	r0, r0, r2
 8000884:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000888:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800088c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000890:	fa21 f604 	lsr.w	r6, r1, r4
 8000894:	eb42 0106 	adc.w	r1, r2, r6
 8000898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800089c:	bf08      	it	eq
 800089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f1c4 040c 	rsb	r4, r4, #12
 80008a8:	f1c4 0520 	rsb	r5, r4, #32
 80008ac:	fa00 f304 	lsl.w	r3, r0, r4
 80008b0:	fa20 f005 	lsr.w	r0, r0, r5
 80008b4:	fa01 f204 	lsl.w	r2, r1, r4
 80008b8:	ea40 0002 	orr.w	r0, r0, r2
 80008bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80008c4:	f141 0100 	adc.w	r1, r1, #0
 80008c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008cc:	bf08      	it	eq
 80008ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008d2:	bd70      	pop	{r4, r5, r6, pc}
 80008d4:	f1c4 0520 	rsb	r5, r4, #32
 80008d8:	fa00 f205 	lsl.w	r2, r0, r5
 80008dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80008e0:	fa20 f304 	lsr.w	r3, r0, r4
 80008e4:	fa01 f205 	lsl.w	r2, r1, r5
 80008e8:	ea43 0302 	orr.w	r3, r3, r2
 80008ec:	fa21 f004 	lsr.w	r0, r1, r4
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f4:	fa21 f204 	lsr.w	r2, r1, r4
 80008f8:	ea20 0002 	bic.w	r0, r0, r2
 80008fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000900:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000904:	bf08      	it	eq
 8000906:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f094 0f00 	teq	r4, #0
 8000910:	d10f      	bne.n	8000932 <__aeabi_dmul+0x1c2>
 8000912:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000916:	0040      	lsls	r0, r0, #1
 8000918:	eb41 0101 	adc.w	r1, r1, r1
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	bf08      	it	eq
 8000922:	3c01      	subeq	r4, #1
 8000924:	d0f7      	beq.n	8000916 <__aeabi_dmul+0x1a6>
 8000926:	ea41 0106 	orr.w	r1, r1, r6
 800092a:	f095 0f00 	teq	r5, #0
 800092e:	bf18      	it	ne
 8000930:	4770      	bxne	lr
 8000932:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000936:	0052      	lsls	r2, r2, #1
 8000938:	eb43 0303 	adc.w	r3, r3, r3
 800093c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000940:	bf08      	it	eq
 8000942:	3d01      	subeq	r5, #1
 8000944:	d0f7      	beq.n	8000936 <__aeabi_dmul+0x1c6>
 8000946:	ea43 0306 	orr.w	r3, r3, r6
 800094a:	4770      	bx	lr
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000954:	bf18      	it	ne
 8000956:	ea95 0f0c 	teqne	r5, ip
 800095a:	d00c      	beq.n	8000976 <__aeabi_dmul+0x206>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	d1d1      	bne.n	800090c <__aeabi_dmul+0x19c>
 8000968:	ea81 0103 	eor.w	r1, r1, r3
 800096c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000970:	f04f 0000 	mov.w	r0, #0
 8000974:	bd70      	pop	{r4, r5, r6, pc}
 8000976:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097a:	bf06      	itte	eq
 800097c:	4610      	moveq	r0, r2
 800097e:	4619      	moveq	r1, r3
 8000980:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000984:	d019      	beq.n	80009ba <__aeabi_dmul+0x24a>
 8000986:	ea94 0f0c 	teq	r4, ip
 800098a:	d102      	bne.n	8000992 <__aeabi_dmul+0x222>
 800098c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000990:	d113      	bne.n	80009ba <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	d105      	bne.n	80009a4 <__aeabi_dmul+0x234>
 8000998:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800099c:	bf1c      	itt	ne
 800099e:	4610      	movne	r0, r2
 80009a0:	4619      	movne	r1, r3
 80009a2:	d10a      	bne.n	80009ba <__aeabi_dmul+0x24a>
 80009a4:	ea81 0103 	eor.w	r1, r1, r3
 80009a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80009b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	bd70      	pop	{r4, r5, r6, pc}
 80009ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80009be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80009c2:	bd70      	pop	{r4, r5, r6, pc}

080009c4 <__aeabi_ddiv>:
 80009c4:	b570      	push	{r4, r5, r6, lr}
 80009c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80009ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80009d2:	bf1d      	ittte	ne
 80009d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80009d8:	ea94 0f0c 	teqne	r4, ip
 80009dc:	ea95 0f0c 	teqne	r5, ip
 80009e0:	f000 f8a7 	bleq	8000b32 <__aeabi_ddiv+0x16e>
 80009e4:	eba4 0405 	sub.w	r4, r4, r5
 80009e8:	ea81 0e03 	eor.w	lr, r1, r3
 80009ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80009f4:	f000 8088 	beq.w	8000b08 <__aeabi_ddiv+0x144>
 80009f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000a00:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000a04:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000a08:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000a0c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000a10:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000a14:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000a18:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000a1c:	429d      	cmp	r5, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4296      	cmpeq	r6, r2
 8000a22:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000a26:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000a2a:	d202      	bcs.n	8000a32 <__aeabi_ddiv+0x6e>
 8000a2c:	085b      	lsrs	r3, r3, #1
 8000a2e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a32:	1ab6      	subs	r6, r6, r2
 8000a34:	eb65 0503 	sbc.w	r5, r5, r3
 8000a38:	085b      	lsrs	r3, r3, #1
 8000a3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a3e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000a42:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000a46:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a4e:	bf22      	ittt	cs
 8000a50:	1ab6      	subcs	r6, r6, r2
 8000a52:	4675      	movcs	r5, lr
 8000a54:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a58:	085b      	lsrs	r3, r3, #1
 8000a5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a5e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a62:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a66:	bf22      	ittt	cs
 8000a68:	1ab6      	subcs	r6, r6, r2
 8000a6a:	4675      	movcs	r5, lr
 8000a6c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a70:	085b      	lsrs	r3, r3, #1
 8000a72:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a76:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a7e:	bf22      	ittt	cs
 8000a80:	1ab6      	subcs	r6, r6, r2
 8000a82:	4675      	movcs	r5, lr
 8000a84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a88:	085b      	lsrs	r3, r3, #1
 8000a8a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a8e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a92:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a96:	bf22      	ittt	cs
 8000a98:	1ab6      	subcs	r6, r6, r2
 8000a9a:	4675      	movcs	r5, lr
 8000a9c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000aa0:	ea55 0e06 	orrs.w	lr, r5, r6
 8000aa4:	d018      	beq.n	8000ad8 <__aeabi_ddiv+0x114>
 8000aa6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000aaa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000aae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000ab2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000ab6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000aba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000abe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000ac2:	d1c0      	bne.n	8000a46 <__aeabi_ddiv+0x82>
 8000ac4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000ac8:	d10b      	bne.n	8000ae2 <__aeabi_ddiv+0x11e>
 8000aca:	ea41 0100 	orr.w	r1, r1, r0
 8000ace:	f04f 0000 	mov.w	r0, #0
 8000ad2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000ad6:	e7b6      	b.n	8000a46 <__aeabi_ddiv+0x82>
 8000ad8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000adc:	bf04      	itt	eq
 8000ade:	4301      	orreq	r1, r0
 8000ae0:	2000      	moveq	r0, #0
 8000ae2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000ae6:	bf88      	it	hi
 8000ae8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000aec:	f63f aeaf 	bhi.w	800084e <__aeabi_dmul+0xde>
 8000af0:	ebb5 0c03 	subs.w	ip, r5, r3
 8000af4:	bf04      	itt	eq
 8000af6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000afa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000afe:	f150 0000 	adcs.w	r0, r0, #0
 8000b02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000b06:	bd70      	pop	{r4, r5, r6, pc}
 8000b08:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000b0c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000b10:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000b14:	bfc2      	ittt	gt
 8000b16:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000b1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000b1e:	bd70      	popgt	{r4, r5, r6, pc}
 8000b20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b24:	f04f 0e00 	mov.w	lr, #0
 8000b28:	3c01      	subs	r4, #1
 8000b2a:	e690      	b.n	800084e <__aeabi_dmul+0xde>
 8000b2c:	ea45 0e06 	orr.w	lr, r5, r6
 8000b30:	e68d      	b.n	800084e <__aeabi_dmul+0xde>
 8000b32:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000b36:	ea94 0f0c 	teq	r4, ip
 8000b3a:	bf08      	it	eq
 8000b3c:	ea95 0f0c 	teqeq	r5, ip
 8000b40:	f43f af3b 	beq.w	80009ba <__aeabi_dmul+0x24a>
 8000b44:	ea94 0f0c 	teq	r4, ip
 8000b48:	d10a      	bne.n	8000b60 <__aeabi_ddiv+0x19c>
 8000b4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000b4e:	f47f af34 	bne.w	80009ba <__aeabi_dmul+0x24a>
 8000b52:	ea95 0f0c 	teq	r5, ip
 8000b56:	f47f af25 	bne.w	80009a4 <__aeabi_dmul+0x234>
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	e72c      	b.n	80009ba <__aeabi_dmul+0x24a>
 8000b60:	ea95 0f0c 	teq	r5, ip
 8000b64:	d106      	bne.n	8000b74 <__aeabi_ddiv+0x1b0>
 8000b66:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b6a:	f43f aefd 	beq.w	8000968 <__aeabi_dmul+0x1f8>
 8000b6e:	4610      	mov	r0, r2
 8000b70:	4619      	mov	r1, r3
 8000b72:	e722      	b.n	80009ba <__aeabi_dmul+0x24a>
 8000b74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b78:	bf18      	it	ne
 8000b7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b7e:	f47f aec5 	bne.w	800090c <__aeabi_dmul+0x19c>
 8000b82:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b86:	f47f af0d 	bne.w	80009a4 <__aeabi_dmul+0x234>
 8000b8a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b8e:	f47f aeeb 	bne.w	8000968 <__aeabi_dmul+0x1f8>
 8000b92:	e712      	b.n	80009ba <__aeabi_dmul+0x24a>

08000b94 <__gedf2>:
 8000b94:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b98:	e006      	b.n	8000ba8 <__cmpdf2+0x4>
 8000b9a:	bf00      	nop

08000b9c <__ledf2>:
 8000b9c:	f04f 0c01 	mov.w	ip, #1
 8000ba0:	e002      	b.n	8000ba8 <__cmpdf2+0x4>
 8000ba2:	bf00      	nop

08000ba4 <__cmpdf2>:
 8000ba4:	f04f 0c01 	mov.w	ip, #1
 8000ba8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000bac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb8:	bf18      	it	ne
 8000bba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000bbe:	d01b      	beq.n	8000bf8 <__cmpdf2+0x54>
 8000bc0:	b001      	add	sp, #4
 8000bc2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000bc6:	bf0c      	ite	eq
 8000bc8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000bcc:	ea91 0f03 	teqne	r1, r3
 8000bd0:	bf02      	ittt	eq
 8000bd2:	ea90 0f02 	teqeq	r0, r2
 8000bd6:	2000      	moveq	r0, #0
 8000bd8:	4770      	bxeq	lr
 8000bda:	f110 0f00 	cmn.w	r0, #0
 8000bde:	ea91 0f03 	teq	r1, r3
 8000be2:	bf58      	it	pl
 8000be4:	4299      	cmppl	r1, r3
 8000be6:	bf08      	it	eq
 8000be8:	4290      	cmpeq	r0, r2
 8000bea:	bf2c      	ite	cs
 8000bec:	17d8      	asrcs	r0, r3, #31
 8000bee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000bf2:	f040 0001 	orr.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bfc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c00:	d102      	bne.n	8000c08 <__cmpdf2+0x64>
 8000c02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c06:	d107      	bne.n	8000c18 <__cmpdf2+0x74>
 8000c08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c10:	d1d6      	bne.n	8000bc0 <__cmpdf2+0x1c>
 8000c12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c16:	d0d3      	beq.n	8000bc0 <__cmpdf2+0x1c>
 8000c18:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_cdrcmple>:
 8000c20:	4684      	mov	ip, r0
 8000c22:	4610      	mov	r0, r2
 8000c24:	4662      	mov	r2, ip
 8000c26:	468c      	mov	ip, r1
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4663      	mov	r3, ip
 8000c2c:	e000      	b.n	8000c30 <__aeabi_cdcmpeq>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_cdcmpeq>:
 8000c30:	b501      	push	{r0, lr}
 8000c32:	f7ff ffb7 	bl	8000ba4 <__cmpdf2>
 8000c36:	2800      	cmp	r0, #0
 8000c38:	bf48      	it	mi
 8000c3a:	f110 0f00 	cmnmi.w	r0, #0
 8000c3e:	bd01      	pop	{r0, pc}

08000c40 <__aeabi_dcmpeq>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff fff4 	bl	8000c30 <__aeabi_cdcmpeq>
 8000c48:	bf0c      	ite	eq
 8000c4a:	2001      	moveq	r0, #1
 8000c4c:	2000      	movne	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_dcmplt>:
 8000c54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c58:	f7ff ffea 	bl	8000c30 <__aeabi_cdcmpeq>
 8000c5c:	bf34      	ite	cc
 8000c5e:	2001      	movcc	r0, #1
 8000c60:	2000      	movcs	r0, #0
 8000c62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c66:	bf00      	nop

08000c68 <__aeabi_dcmple>:
 8000c68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c6c:	f7ff ffe0 	bl	8000c30 <__aeabi_cdcmpeq>
 8000c70:	bf94      	ite	ls
 8000c72:	2001      	movls	r0, #1
 8000c74:	2000      	movhi	r0, #0
 8000c76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c7a:	bf00      	nop

08000c7c <__aeabi_dcmpge>:
 8000c7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c80:	f7ff ffce 	bl	8000c20 <__aeabi_cdrcmple>
 8000c84:	bf94      	ite	ls
 8000c86:	2001      	movls	r0, #1
 8000c88:	2000      	movhi	r0, #0
 8000c8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c8e:	bf00      	nop

08000c90 <__aeabi_dcmpgt>:
 8000c90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c94:	f7ff ffc4 	bl	8000c20 <__aeabi_cdrcmple>
 8000c98:	bf34      	ite	cc
 8000c9a:	2001      	movcc	r0, #1
 8000c9c:	2000      	movcs	r0, #0
 8000c9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_dcmpun>:
 8000ca4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ca8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cac:	d102      	bne.n	8000cb4 <__aeabi_dcmpun+0x10>
 8000cae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000cb2:	d10a      	bne.n	8000cca <__aeabi_dcmpun+0x26>
 8000cb4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cbc:	d102      	bne.n	8000cc4 <__aeabi_dcmpun+0x20>
 8000cbe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000cc2:	d102      	bne.n	8000cca <__aeabi_dcmpun+0x26>
 8000cc4:	f04f 0000 	mov.w	r0, #0
 8000cc8:	4770      	bx	lr
 8000cca:	f04f 0001 	mov.w	r0, #1
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_d2iz>:
 8000cd0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cd8:	d215      	bcs.n	8000d06 <__aeabi_d2iz+0x36>
 8000cda:	d511      	bpl.n	8000d00 <__aeabi_d2iz+0x30>
 8000cdc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ce0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ce4:	d912      	bls.n	8000d0c <__aeabi_d2iz+0x3c>
 8000ce6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cf2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cf6:	fa23 f002 	lsr.w	r0, r3, r2
 8000cfa:	bf18      	it	ne
 8000cfc:	4240      	negne	r0, r0
 8000cfe:	4770      	bx	lr
 8000d00:	f04f 0000 	mov.w	r0, #0
 8000d04:	4770      	bx	lr
 8000d06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d0a:	d105      	bne.n	8000d18 <__aeabi_d2iz+0x48>
 8000d0c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000d10:	bf08      	it	eq
 8000d12:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d16:	4770      	bx	lr
 8000d18:	f04f 0000 	mov.w	r0, #0
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <__aeabi_d2uiz>:
 8000d20:	004a      	lsls	r2, r1, #1
 8000d22:	d211      	bcs.n	8000d48 <__aeabi_d2uiz+0x28>
 8000d24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000d28:	d211      	bcs.n	8000d4e <__aeabi_d2uiz+0x2e>
 8000d2a:	d50d      	bpl.n	8000d48 <__aeabi_d2uiz+0x28>
 8000d2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000d30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000d34:	d40e      	bmi.n	8000d54 <__aeabi_d2uiz+0x34>
 8000d36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000d42:	fa23 f002 	lsr.w	r0, r3, r2
 8000d46:	4770      	bx	lr
 8000d48:	f04f 0000 	mov.w	r0, #0
 8000d4c:	4770      	bx	lr
 8000d4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d52:	d102      	bne.n	8000d5a <__aeabi_d2uiz+0x3a>
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d58:	4770      	bx	lr
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_d2f>:
 8000d60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000d68:	bf24      	itt	cs
 8000d6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000d6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000d72:	d90d      	bls.n	8000d90 <__aeabi_d2f+0x30>
 8000d74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d88:	bf08      	it	eq
 8000d8a:	f020 0001 	biceq.w	r0, r0, #1
 8000d8e:	4770      	bx	lr
 8000d90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d94:	d121      	bne.n	8000dda <__aeabi_d2f+0x7a>
 8000d96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d9a:	bfbc      	itt	lt
 8000d9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000da0:	4770      	bxlt	lr
 8000da2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000da6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000daa:	f1c2 0218 	rsb	r2, r2, #24
 8000dae:	f1c2 0c20 	rsb	ip, r2, #32
 8000db2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000db6:	fa20 f002 	lsr.w	r0, r0, r2
 8000dba:	bf18      	it	ne
 8000dbc:	f040 0001 	orrne.w	r0, r0, #1
 8000dc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000dc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000dc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000dcc:	ea40 000c 	orr.w	r0, r0, ip
 8000dd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000dd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000dd8:	e7cc      	b.n	8000d74 <__aeabi_d2f+0x14>
 8000dda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000dde:	d107      	bne.n	8000df0 <__aeabi_d2f+0x90>
 8000de0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000de4:	bf1e      	ittt	ne
 8000de6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000dea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000dee:	4770      	bxne	lr
 8000df0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000df4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000df8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <__aeabi_frsub>:
 8000e00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000e04:	e002      	b.n	8000e0c <__addsf3>
 8000e06:	bf00      	nop

08000e08 <__aeabi_fsub>:
 8000e08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000e0c <__addsf3>:
 8000e0c:	0042      	lsls	r2, r0, #1
 8000e0e:	bf1f      	itttt	ne
 8000e10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000e14:	ea92 0f03 	teqne	r2, r3
 8000e18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000e1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e20:	d06a      	beq.n	8000ef8 <__addsf3+0xec>
 8000e22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000e26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000e2a:	bfc1      	itttt	gt
 8000e2c:	18d2      	addgt	r2, r2, r3
 8000e2e:	4041      	eorgt	r1, r0
 8000e30:	4048      	eorgt	r0, r1
 8000e32:	4041      	eorgt	r1, r0
 8000e34:	bfb8      	it	lt
 8000e36:	425b      	neglt	r3, r3
 8000e38:	2b19      	cmp	r3, #25
 8000e3a:	bf88      	it	hi
 8000e3c:	4770      	bxhi	lr
 8000e3e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000e4a:	bf18      	it	ne
 8000e4c:	4240      	negne	r0, r0
 8000e4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e52:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000e56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000e5a:	bf18      	it	ne
 8000e5c:	4249      	negne	r1, r1
 8000e5e:	ea92 0f03 	teq	r2, r3
 8000e62:	d03f      	beq.n	8000ee4 <__addsf3+0xd8>
 8000e64:	f1a2 0201 	sub.w	r2, r2, #1
 8000e68:	fa41 fc03 	asr.w	ip, r1, r3
 8000e6c:	eb10 000c 	adds.w	r0, r0, ip
 8000e70:	f1c3 0320 	rsb	r3, r3, #32
 8000e74:	fa01 f103 	lsl.w	r1, r1, r3
 8000e78:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__addsf3+0x78>
 8000e7e:	4249      	negs	r1, r1
 8000e80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000e84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000e88:	d313      	bcc.n	8000eb2 <__addsf3+0xa6>
 8000e8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e8e:	d306      	bcc.n	8000e9e <__addsf3+0x92>
 8000e90:	0840      	lsrs	r0, r0, #1
 8000e92:	ea4f 0131 	mov.w	r1, r1, rrx
 8000e96:	f102 0201 	add.w	r2, r2, #1
 8000e9a:	2afe      	cmp	r2, #254	; 0xfe
 8000e9c:	d251      	bcs.n	8000f42 <__addsf3+0x136>
 8000e9e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ea2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ea6:	bf08      	it	eq
 8000ea8:	f020 0001 	biceq.w	r0, r0, #1
 8000eac:	ea40 0003 	orr.w	r0, r0, r3
 8000eb0:	4770      	bx	lr
 8000eb2:	0049      	lsls	r1, r1, #1
 8000eb4:	eb40 0000 	adc.w	r0, r0, r0
 8000eb8:	3a01      	subs	r2, #1
 8000eba:	bf28      	it	cs
 8000ebc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ec0:	d2ed      	bcs.n	8000e9e <__addsf3+0x92>
 8000ec2:	fab0 fc80 	clz	ip, r0
 8000ec6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000eca:	ebb2 020c 	subs.w	r2, r2, ip
 8000ece:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ed2:	bfaa      	itet	ge
 8000ed4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ed8:	4252      	neglt	r2, r2
 8000eda:	4318      	orrge	r0, r3
 8000edc:	bfbc      	itt	lt
 8000ede:	40d0      	lsrlt	r0, r2
 8000ee0:	4318      	orrlt	r0, r3
 8000ee2:	4770      	bx	lr
 8000ee4:	f092 0f00 	teq	r2, #0
 8000ee8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000eec:	bf06      	itte	eq
 8000eee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ef2:	3201      	addeq	r2, #1
 8000ef4:	3b01      	subne	r3, #1
 8000ef6:	e7b5      	b.n	8000e64 <__addsf3+0x58>
 8000ef8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000efc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f00:	bf18      	it	ne
 8000f02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f06:	d021      	beq.n	8000f4c <__addsf3+0x140>
 8000f08:	ea92 0f03 	teq	r2, r3
 8000f0c:	d004      	beq.n	8000f18 <__addsf3+0x10c>
 8000f0e:	f092 0f00 	teq	r2, #0
 8000f12:	bf08      	it	eq
 8000f14:	4608      	moveq	r0, r1
 8000f16:	4770      	bx	lr
 8000f18:	ea90 0f01 	teq	r0, r1
 8000f1c:	bf1c      	itt	ne
 8000f1e:	2000      	movne	r0, #0
 8000f20:	4770      	bxne	lr
 8000f22:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000f26:	d104      	bne.n	8000f32 <__addsf3+0x126>
 8000f28:	0040      	lsls	r0, r0, #1
 8000f2a:	bf28      	it	cs
 8000f2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000f30:	4770      	bx	lr
 8000f32:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000f36:	bf3c      	itt	cc
 8000f38:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000f3c:	4770      	bxcc	lr
 8000f3e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000f42:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000f46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4a:	4770      	bx	lr
 8000f4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000f50:	bf16      	itet	ne
 8000f52:	4608      	movne	r0, r1
 8000f54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000f58:	4601      	movne	r1, r0
 8000f5a:	0242      	lsls	r2, r0, #9
 8000f5c:	bf06      	itte	eq
 8000f5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000f62:	ea90 0f01 	teqeq	r0, r1
 8000f66:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000f6a:	4770      	bx	lr

08000f6c <__aeabi_ui2f>:
 8000f6c:	f04f 0300 	mov.w	r3, #0
 8000f70:	e004      	b.n	8000f7c <__aeabi_i2f+0x8>
 8000f72:	bf00      	nop

08000f74 <__aeabi_i2f>:
 8000f74:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000f78:	bf48      	it	mi
 8000f7a:	4240      	negmi	r0, r0
 8000f7c:	ea5f 0c00 	movs.w	ip, r0
 8000f80:	bf08      	it	eq
 8000f82:	4770      	bxeq	lr
 8000f84:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000f88:	4601      	mov	r1, r0
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	e01c      	b.n	8000fca <__aeabi_l2f+0x2a>

08000f90 <__aeabi_ul2f>:
 8000f90:	ea50 0201 	orrs.w	r2, r0, r1
 8000f94:	bf08      	it	eq
 8000f96:	4770      	bxeq	lr
 8000f98:	f04f 0300 	mov.w	r3, #0
 8000f9c:	e00a      	b.n	8000fb4 <__aeabi_l2f+0x14>
 8000f9e:	bf00      	nop

08000fa0 <__aeabi_l2f>:
 8000fa0:	ea50 0201 	orrs.w	r2, r0, r1
 8000fa4:	bf08      	it	eq
 8000fa6:	4770      	bxeq	lr
 8000fa8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000fac:	d502      	bpl.n	8000fb4 <__aeabi_l2f+0x14>
 8000fae:	4240      	negs	r0, r0
 8000fb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fb4:	ea5f 0c01 	movs.w	ip, r1
 8000fb8:	bf02      	ittt	eq
 8000fba:	4684      	moveq	ip, r0
 8000fbc:	4601      	moveq	r1, r0
 8000fbe:	2000      	moveq	r0, #0
 8000fc0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000fc4:	bf08      	it	eq
 8000fc6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000fca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000fce:	fabc f28c 	clz	r2, ip
 8000fd2:	3a08      	subs	r2, #8
 8000fd4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000fd8:	db10      	blt.n	8000ffc <__aeabi_l2f+0x5c>
 8000fda:	fa01 fc02 	lsl.w	ip, r1, r2
 8000fde:	4463      	add	r3, ip
 8000fe0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000fe4:	f1c2 0220 	rsb	r2, r2, #32
 8000fe8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000fec:	fa20 f202 	lsr.w	r2, r0, r2
 8000ff0:	eb43 0002 	adc.w	r0, r3, r2
 8000ff4:	bf08      	it	eq
 8000ff6:	f020 0001 	biceq.w	r0, r0, #1
 8000ffa:	4770      	bx	lr
 8000ffc:	f102 0220 	add.w	r2, r2, #32
 8001000:	fa01 fc02 	lsl.w	ip, r1, r2
 8001004:	f1c2 0220 	rsb	r2, r2, #32
 8001008:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800100c:	fa21 f202 	lsr.w	r2, r1, r2
 8001010:	eb43 0002 	adc.w	r0, r3, r2
 8001014:	bf08      	it	eq
 8001016:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800101a:	4770      	bx	lr

0800101c <__aeabi_f2uiz>:
 800101c:	0042      	lsls	r2, r0, #1
 800101e:	d20e      	bcs.n	800103e <__aeabi_f2uiz+0x22>
 8001020:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001024:	d30b      	bcc.n	800103e <__aeabi_f2uiz+0x22>
 8001026:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800102a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800102e:	d409      	bmi.n	8001044 <__aeabi_f2uiz+0x28>
 8001030:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001038:	fa23 f002 	lsr.w	r0, r3, r2
 800103c:	4770      	bx	lr
 800103e:	f04f 0000 	mov.w	r0, #0
 8001042:	4770      	bx	lr
 8001044:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001048:	d101      	bne.n	800104e <__aeabi_f2uiz+0x32>
 800104a:	0242      	lsls	r2, r0, #9
 800104c:	d102      	bne.n	8001054 <__aeabi_f2uiz+0x38>
 800104e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001052:	4770      	bx	lr
 8001054:	f04f 0000 	mov.w	r0, #0
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <__aeabi_d2lz>:
 800105c:	b538      	push	{r3, r4, r5, lr}
 800105e:	4605      	mov	r5, r0
 8001060:	460c      	mov	r4, r1
 8001062:	4628      	mov	r0, r5
 8001064:	4621      	mov	r1, r4
 8001066:	2200      	movs	r2, #0
 8001068:	2300      	movs	r3, #0
 800106a:	f7ff fdf3 	bl	8000c54 <__aeabi_dcmplt>
 800106e:	b928      	cbnz	r0, 800107c <__aeabi_d2lz+0x20>
 8001070:	4628      	mov	r0, r5
 8001072:	4621      	mov	r1, r4
 8001074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001078:	f000 b80a 	b.w	8001090 <__aeabi_d2ulz>
 800107c:	4628      	mov	r0, r5
 800107e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001082:	f000 f805 	bl	8001090 <__aeabi_d2ulz>
 8001086:	4240      	negs	r0, r0
 8001088:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800108c:	bd38      	pop	{r3, r4, r5, pc}
 800108e:	bf00      	nop

08001090 <__aeabi_d2ulz>:
 8001090:	b5d0      	push	{r4, r6, r7, lr}
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <__aeabi_d2ulz+0x34>)
 8001094:	2200      	movs	r2, #0
 8001096:	4606      	mov	r6, r0
 8001098:	460f      	mov	r7, r1
 800109a:	f7ff fb69 	bl	8000770 <__aeabi_dmul>
 800109e:	f7ff fe3f 	bl	8000d20 <__aeabi_d2uiz>
 80010a2:	4604      	mov	r4, r0
 80010a4:	f7ff faea 	bl	800067c <__aeabi_ui2d>
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <__aeabi_d2ulz+0x38>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	f7ff fb60 	bl	8000770 <__aeabi_dmul>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4630      	mov	r0, r6
 80010b6:	4639      	mov	r1, r7
 80010b8:	f7ff f9a2 	bl	8000400 <__aeabi_dsub>
 80010bc:	f7ff fe30 	bl	8000d20 <__aeabi_d2uiz>
 80010c0:	4621      	mov	r1, r4
 80010c2:	bdd0      	pop	{r4, r6, r7, pc}
 80010c4:	3df00000 	.word	0x3df00000
 80010c8:	41f00000 	.word	0x41f00000
 80010cc:	00000000 	.word	0x00000000

080010d0 <main>:

// La función de inicialización del sistema
void init_Hardware(void);


int main(void){
 80010d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010d4:	b094      	sub	sp, #80	; 0x50
 80010d6:	af06      	add	r7, sp, #24
	// Se llama la función de inicialización.
	init_Hardware();
 80010d8:	f000 fcca 	bl	8001a70 <init_Hardware>
		 */

		/* Este condicional siempre se ejecuta para tener el muestreo que controla
		 * las señales de salida de PWM con dutty variable.
		 */
		if(flagMuestreo == 1){
 80010dc:	4bae      	ldr	r3, [pc, #696]	; (8001398 <main+0x2c8>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	f040 809e 	bne.w	8001222 <main+0x152>
			uint8_t AccelX_low =  i2c_readSingleRegister(&Acelerometer, ACCEL_X1_L);
 80010e6:	2132      	movs	r1, #50	; 0x32
 80010e8:	48ac      	ldr	r0, [pc, #688]	; (800139c <main+0x2cc>)
 80010ea:	f001 fa9b 	bl	8002624 <i2c_readSingleRegister>
 80010ee:	4603      	mov	r3, r0
 80010f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint8_t AccelX_high = i2c_readSingleRegister(&Acelerometer, ACCEL_X1_H);
 80010f4:	2133      	movs	r1, #51	; 0x33
 80010f6:	48a9      	ldr	r0, [pc, #676]	; (800139c <main+0x2cc>)
 80010f8:	f001 fa94 	bl	8002624 <i2c_readSingleRegister>
 80010fc:	4603      	mov	r3, r0
 80010fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			int16_t AccelX = AccelX_high << 8 | AccelX_low;
 8001102:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	b21a      	sxth	r2, r3
 800110a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800110e:	b21b      	sxth	r3, r3
 8001110:	4313      	orrs	r3, r2
 8001112:	85bb      	strh	r3, [r7, #44]	; 0x2c
			X_axis = AccelX * 0.0039 * 9.8;
 8001114:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fabf 	bl	800069c <__aeabi_i2d>
 800111e:	a39a      	add	r3, pc, #616	; (adr r3, 8001388 <main+0x2b8>)
 8001120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001124:	f7ff fb24 	bl	8000770 <__aeabi_dmul>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	a397      	add	r3, pc, #604	; (adr r3, 8001390 <main+0x2c0>)
 8001132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001136:	f7ff fb1b 	bl	8000770 <__aeabi_dmul>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4610      	mov	r0, r2
 8001140:	4619      	mov	r1, r3
 8001142:	f7ff fe0d 	bl	8000d60 <__aeabi_d2f>
 8001146:	4603      	mov	r3, r0
 8001148:	4a95      	ldr	r2, [pc, #596]	; (80013a0 <main+0x2d0>)
 800114a:	6013      	str	r3, [r2, #0]

			uint8_t AccelY_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Y1_L);
 800114c:	2134      	movs	r1, #52	; 0x34
 800114e:	4893      	ldr	r0, [pc, #588]	; (800139c <main+0x2cc>)
 8001150:	f001 fa68 	bl	8002624 <i2c_readSingleRegister>
 8001154:	4603      	mov	r3, r0
 8001156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			uint8_t AccelY_high = i2c_readSingleRegister(&Acelerometer,ACCEL_Y1_H);
 800115a:	2135      	movs	r1, #53	; 0x35
 800115c:	488f      	ldr	r0, [pc, #572]	; (800139c <main+0x2cc>)
 800115e:	f001 fa61 	bl	8002624 <i2c_readSingleRegister>
 8001162:	4603      	mov	r3, r0
 8001164:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			int16_t AccelY = AccelY_high << 8 | AccelY_low;
 8001168:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b21a      	sxth	r2, r3
 8001170:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001174:	b21b      	sxth	r3, r3
 8001176:	4313      	orrs	r3, r2
 8001178:	853b      	strh	r3, [r7, #40]	; 0x28
			Y_axis = AccelY * 0.0039 * 9.8;
 800117a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fa8c 	bl	800069c <__aeabi_i2d>
 8001184:	a380      	add	r3, pc, #512	; (adr r3, 8001388 <main+0x2b8>)
 8001186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118a:	f7ff faf1 	bl	8000770 <__aeabi_dmul>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4610      	mov	r0, r2
 8001194:	4619      	mov	r1, r3
 8001196:	a37e      	add	r3, pc, #504	; (adr r3, 8001390 <main+0x2c0>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fae8 	bl	8000770 <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4610      	mov	r0, r2
 80011a6:	4619      	mov	r1, r3
 80011a8:	f7ff fdda 	bl	8000d60 <__aeabi_d2f>
 80011ac:	4603      	mov	r3, r0
 80011ae:	4a7d      	ldr	r2, [pc, #500]	; (80013a4 <main+0x2d4>)
 80011b0:	6013      	str	r3, [r2, #0]

			uint8_t AccelZ_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_L);
 80011b2:	2136      	movs	r1, #54	; 0x36
 80011b4:	4879      	ldr	r0, [pc, #484]	; (800139c <main+0x2cc>)
 80011b6:	f001 fa35 	bl	8002624 <i2c_readSingleRegister>
 80011ba:	4603      	mov	r3, r0
 80011bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			uint8_t AccelZ_high = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_H);
 80011c0:	2137      	movs	r1, #55	; 0x37
 80011c2:	4876      	ldr	r0, [pc, #472]	; (800139c <main+0x2cc>)
 80011c4:	f001 fa2e 	bl	8002624 <i2c_readSingleRegister>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			int16_t AccelZ = AccelZ_high << 8 | AccelZ_low;
 80011ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011da:	b21b      	sxth	r3, r3
 80011dc:	4313      	orrs	r3, r2
 80011de:	84bb      	strh	r3, [r7, #36]	; 0x24
			Z_axis = AccelZ * 0.0039 * 9.8;
 80011e0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fa59 	bl	800069c <__aeabi_i2d>
 80011ea:	a367      	add	r3, pc, #412	; (adr r3, 8001388 <main+0x2b8>)
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	f7ff fabe 	bl	8000770 <__aeabi_dmul>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	a364      	add	r3, pc, #400	; (adr r3, 8001390 <main+0x2c0>)
 80011fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001202:	f7ff fab5 	bl	8000770 <__aeabi_dmul>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	f7ff fda7 	bl	8000d60 <__aeabi_d2f>
 8001212:	4603      	mov	r3, r0
 8001214:	4a64      	ldr	r2, [pc, #400]	; (80013a8 <main+0x2d8>)
 8001216:	6013      	str	r3, [r2, #0]

			signalsPWM();
 8001218:	f000 fbc4 	bl	80019a4 <signalsPWM>
			flagMuestreo = 0;
 800121c:	4b5e      	ldr	r3, [pc, #376]	; (8001398 <main+0x2c8>)
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]

		}

		if(rxData != '\0'){
 8001222:	4b62      	ldr	r3, [pc, #392]	; (80013ac <main+0x2dc>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	f43f af58 	beq.w	80010dc <main+0xc>
			//writeChar(&USART6Comm, rxData);
			// Lectura sobre el WHO_AM_I del acelerómetro.
			if(flagMuestreo == 1){
 800122c:	4b5a      	ldr	r3, [pc, #360]	; (8001398 <main+0x2c8>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b01      	cmp	r3, #1
 8001232:	f040 8171 	bne.w	8001518 <main+0x448>
				if(rxData == 'w'){
 8001236:	4b5d      	ldr	r3, [pc, #372]	; (80013ac <main+0x2dc>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b77      	cmp	r3, #119	; 0x77
 800123c:	d11e      	bne.n	800127c <main+0x1ac>
					sprintf(bufferData, "WHO_AM_I? (r)\n");
 800123e:	495c      	ldr	r1, [pc, #368]	; (80013b0 <main+0x2e0>)
 8001240:	485c      	ldr	r0, [pc, #368]	; (80013b4 <main+0x2e4>)
 8001242:	f002 fe37 	bl	8003eb4 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 8001246:	495b      	ldr	r1, [pc, #364]	; (80013b4 <main+0x2e4>)
 8001248:	485b      	ldr	r0, [pc, #364]	; (80013b8 <main+0x2e8>)
 800124a:	f001 ff40 	bl	80030ce <writeMsg>
					// Configuración del I2C e impresión del mensaje,
					i2cBuffer = i2c_readSingleRegister(&Acelerometer, WHO_AM_I);
 800124e:	2100      	movs	r1, #0
 8001250:	4852      	ldr	r0, [pc, #328]	; (800139c <main+0x2cc>)
 8001252:	f001 f9e7 	bl	8002624 <i2c_readSingleRegister>
 8001256:	4603      	mov	r3, r0
 8001258:	461a      	mov	r2, r3
 800125a:	4b58      	ldr	r3, [pc, #352]	; (80013bc <main+0x2ec>)
 800125c:	701a      	strb	r2, [r3, #0]
					sprintf(bufferData, "dataRead = 0x%x \n", (unsigned int) i2cBuffer);
 800125e:	4b57      	ldr	r3, [pc, #348]	; (80013bc <main+0x2ec>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	4956      	ldr	r1, [pc, #344]	; (80013c0 <main+0x2f0>)
 8001266:	4853      	ldr	r0, [pc, #332]	; (80013b4 <main+0x2e4>)
 8001268:	f002 fe24 	bl	8003eb4 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 800126c:	4951      	ldr	r1, [pc, #324]	; (80013b4 <main+0x2e4>)
 800126e:	4852      	ldr	r0, [pc, #328]	; (80013b8 <main+0x2e8>)
 8001270:	f001 ff2d 	bl	80030ce <writeMsg>
					rxData = '\0';
 8001274:	4b4d      	ldr	r3, [pc, #308]	; (80013ac <main+0x2dc>)
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
 800127a:	e14a      	b.n	8001512 <main+0x442>
				}
				// Estado del acelerómetro
				else if (rxData == 'p'){
 800127c:	4b4b      	ldr	r3, [pc, #300]	; (80013ac <main+0x2dc>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b70      	cmp	r3, #112	; 0x70
 8001282:	d11e      	bne.n	80012c2 <main+0x1f2>
					sprintf(bufferData, "PWR_MGMT_1 state (r)\n");
 8001284:	494f      	ldr	r1, [pc, #316]	; (80013c4 <main+0x2f4>)
 8001286:	484b      	ldr	r0, [pc, #300]	; (80013b4 <main+0x2e4>)
 8001288:	f002 fe14 	bl	8003eb4 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 800128c:	4949      	ldr	r1, [pc, #292]	; (80013b4 <main+0x2e4>)
 800128e:	484a      	ldr	r0, [pc, #296]	; (80013b8 <main+0x2e8>)
 8001290:	f001 ff1d 	bl	80030ce <writeMsg>
					i2cBuffer = i2c_readSingleRegister(&Acelerometer, POWER_CTL);
 8001294:	212d      	movs	r1, #45	; 0x2d
 8001296:	4841      	ldr	r0, [pc, #260]	; (800139c <main+0x2cc>)
 8001298:	f001 f9c4 	bl	8002624 <i2c_readSingleRegister>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	4b46      	ldr	r3, [pc, #280]	; (80013bc <main+0x2ec>)
 80012a2:	701a      	strb	r2, [r3, #0]
					sprintf(bufferData, "dataRead = 0x%x \n", (unsigned int) i2cBuffer);
 80012a4:	4b45      	ldr	r3, [pc, #276]	; (80013bc <main+0x2ec>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4945      	ldr	r1, [pc, #276]	; (80013c0 <main+0x2f0>)
 80012ac:	4841      	ldr	r0, [pc, #260]	; (80013b4 <main+0x2e4>)
 80012ae:	f002 fe01 	bl	8003eb4 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 80012b2:	4940      	ldr	r1, [pc, #256]	; (80013b4 <main+0x2e4>)
 80012b4:	4840      	ldr	r0, [pc, #256]	; (80013b8 <main+0x2e8>)
 80012b6:	f001 ff0a 	bl	80030ce <writeMsg>
					rxData = '\0';
 80012ba:	4b3c      	ldr	r3, [pc, #240]	; (80013ac <main+0x2dc>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	e127      	b.n	8001512 <main+0x442>
				}
				// Reset para el acelerómetro.
				else if (rxData == 'r'){
 80012c2:	4b3a      	ldr	r3, [pc, #232]	; (80013ac <main+0x2dc>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b72      	cmp	r3, #114	; 0x72
 80012c8:	d110      	bne.n	80012ec <main+0x21c>
					sprintf(bufferData, "PWR_MGMT_1 reset (w)\n");
 80012ca:	493f      	ldr	r1, [pc, #252]	; (80013c8 <main+0x2f8>)
 80012cc:	4839      	ldr	r0, [pc, #228]	; (80013b4 <main+0x2e4>)
 80012ce:	f002 fdf1 	bl	8003eb4 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 80012d2:	4938      	ldr	r1, [pc, #224]	; (80013b4 <main+0x2e4>)
 80012d4:	4838      	ldr	r0, [pc, #224]	; (80013b8 <main+0x2e8>)
 80012d6:	f001 fefa 	bl	80030ce <writeMsg>
					// Configuración del reset dentro del I2C.
					i2c_writeSingleRegister(&Acelerometer, POWER_CTL , 0x2D);
 80012da:	222d      	movs	r2, #45	; 0x2d
 80012dc:	212d      	movs	r1, #45	; 0x2d
 80012de:	482f      	ldr	r0, [pc, #188]	; (800139c <main+0x2cc>)
 80012e0:	f001 f9d1 	bl	8002686 <i2c_writeSingleRegister>
					rxData = '\0';
 80012e4:	4b31      	ldr	r3, [pc, #196]	; (80013ac <main+0x2dc>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
 80012ea:	e112      	b.n	8001512 <main+0x442>
				}
				// Para el eje X y su lectura presionando la tecla "x".
				else if (rxData == 'x'){
 80012ec:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <main+0x2dc>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b78      	cmp	r3, #120	; 0x78
 80012f2:	d16f      	bne.n	80013d4 <main+0x304>
					sprintf(bufferData, "Axis X data (r) \n");
 80012f4:	4935      	ldr	r1, [pc, #212]	; (80013cc <main+0x2fc>)
 80012f6:	482f      	ldr	r0, [pc, #188]	; (80013b4 <main+0x2e4>)
 80012f8:	f002 fddc 	bl	8003eb4 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 80012fc:	492d      	ldr	r1, [pc, #180]	; (80013b4 <main+0x2e4>)
 80012fe:	482e      	ldr	r0, [pc, #184]	; (80013b8 <main+0x2e8>)
 8001300:	f001 fee5 	bl	80030ce <writeMsg>
					uint8_t AccelX_low =  i2c_readSingleRegister(&Acelerometer, ACCEL_X1_L);
 8001304:	2132      	movs	r1, #50	; 0x32
 8001306:	4825      	ldr	r0, [pc, #148]	; (800139c <main+0x2cc>)
 8001308:	f001 f98c 	bl	8002624 <i2c_readSingleRegister>
 800130c:	4603      	mov	r3, r0
 800130e:	76fb      	strb	r3, [r7, #27]
					uint8_t AccelX_high = i2c_readSingleRegister(&Acelerometer, ACCEL_X1_H);
 8001310:	2133      	movs	r1, #51	; 0x33
 8001312:	4822      	ldr	r0, [pc, #136]	; (800139c <main+0x2cc>)
 8001314:	f001 f986 	bl	8002624 <i2c_readSingleRegister>
 8001318:	4603      	mov	r3, r0
 800131a:	76bb      	strb	r3, [r7, #26]
					int16_t AccelX = AccelX_high << 8 | AccelX_low;
 800131c:	7ebb      	ldrb	r3, [r7, #26]
 800131e:	021b      	lsls	r3, r3, #8
 8001320:	b21a      	sxth	r2, r3
 8001322:	7efb      	ldrb	r3, [r7, #27]
 8001324:	b21b      	sxth	r3, r3
 8001326:	4313      	orrs	r3, r2
 8001328:	833b      	strh	r3, [r7, #24]
					X_axis = AccelX * 0.0039 * 9.8;
 800132a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f9b4 	bl	800069c <__aeabi_i2d>
 8001334:	a314      	add	r3, pc, #80	; (adr r3, 8001388 <main+0x2b8>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	f7ff fa19 	bl	8000770 <__aeabi_dmul>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	a312      	add	r3, pc, #72	; (adr r3, 8001390 <main+0x2c0>)
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	f7ff fa10 	bl	8000770 <__aeabi_dmul>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	f7ff fd02 	bl	8000d60 <__aeabi_d2f>
 800135c:	4603      	mov	r3, r0
 800135e:	4a10      	ldr	r2, [pc, #64]	; (80013a0 <main+0x2d0>)
 8001360:	6013      	str	r3, [r2, #0]
					sprintf(bufferData, "AccelX = %.2f \n", X_axis);
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <main+0x2d0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f9aa 	bl	80006c0 <__aeabi_f2d>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4917      	ldr	r1, [pc, #92]	; (80013d0 <main+0x300>)
 8001372:	4810      	ldr	r0, [pc, #64]	; (80013b4 <main+0x2e4>)
 8001374:	f002 fd9e 	bl	8003eb4 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 8001378:	490e      	ldr	r1, [pc, #56]	; (80013b4 <main+0x2e4>)
 800137a:	480f      	ldr	r0, [pc, #60]	; (80013b8 <main+0x2e8>)
 800137c:	f001 fea7 	bl	80030ce <writeMsg>
					rxData = '\0';
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <main+0x2dc>)
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
 8001386:	e0c4      	b.n	8001512 <main+0x442>
 8001388:	8e8a71de 	.word	0x8e8a71de
 800138c:	3f6ff2e4 	.word	0x3f6ff2e4
 8001390:	9999999a 	.word	0x9999999a
 8001394:	40239999 	.word	0x40239999
 8001398:	20006100 	.word	0x20006100
 800139c:	20000308 	.word	0x20000308
 80013a0:	20006158 	.word	0x20006158
 80013a4:	2000615c 	.word	0x2000615c
 80013a8:	20006160 	.word	0x20006160
 80013ac:	20000311 	.word	0x20000311
 80013b0:	08007ac8 	.word	0x08007ac8
 80013b4:	20000000 	.word	0x20000000
 80013b8:	2000025c 	.word	0x2000025c
 80013bc:	20000310 	.word	0x20000310
 80013c0:	08007ad8 	.word	0x08007ad8
 80013c4:	08007aec 	.word	0x08007aec
 80013c8:	08007b04 	.word	0x08007b04
 80013cc:	08007b1c 	.word	0x08007b1c
 80013d0:	08007b30 	.word	0x08007b30
				}
				// Para el eje Y y su lectura presionando la tecla "y".
				else if(rxData == 'y'){
 80013d4:	4bb6      	ldr	r3, [pc, #728]	; (80016b0 <main+0x5e0>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b79      	cmp	r3, #121	; 0x79
 80013da:	d149      	bne.n	8001470 <main+0x3a0>
					sprintf(bufferData, "Axis Y data (r)\n");
 80013dc:	49b5      	ldr	r1, [pc, #724]	; (80016b4 <main+0x5e4>)
 80013de:	48b6      	ldr	r0, [pc, #728]	; (80016b8 <main+0x5e8>)
 80013e0:	f002 fd68 	bl	8003eb4 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 80013e4:	49b4      	ldr	r1, [pc, #720]	; (80016b8 <main+0x5e8>)
 80013e6:	48b5      	ldr	r0, [pc, #724]	; (80016bc <main+0x5ec>)
 80013e8:	f001 fe71 	bl	80030ce <writeMsg>
					uint8_t AccelY_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Y1_L);
 80013ec:	2134      	movs	r1, #52	; 0x34
 80013ee:	48b4      	ldr	r0, [pc, #720]	; (80016c0 <main+0x5f0>)
 80013f0:	f001 f918 	bl	8002624 <i2c_readSingleRegister>
 80013f4:	4603      	mov	r3, r0
 80013f6:	77fb      	strb	r3, [r7, #31]
					uint8_t AccelY_high = i2c_readSingleRegister(&Acelerometer,ACCEL_Y1_H);
 80013f8:	2135      	movs	r1, #53	; 0x35
 80013fa:	48b1      	ldr	r0, [pc, #708]	; (80016c0 <main+0x5f0>)
 80013fc:	f001 f912 	bl	8002624 <i2c_readSingleRegister>
 8001400:	4603      	mov	r3, r0
 8001402:	77bb      	strb	r3, [r7, #30]
					int16_t AccelY = AccelY_high << 8 | AccelY_low;
 8001404:	7fbb      	ldrb	r3, [r7, #30]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	b21a      	sxth	r2, r3
 800140a:	7ffb      	ldrb	r3, [r7, #31]
 800140c:	b21b      	sxth	r3, r3
 800140e:	4313      	orrs	r3, r2
 8001410:	83bb      	strh	r3, [r7, #28]
					Y_axis = AccelY * 0.0039 * 9.8;
 8001412:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f940 	bl	800069c <__aeabi_i2d>
 800141c:	a3a0      	add	r3, pc, #640	; (adr r3, 80016a0 <main+0x5d0>)
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	f7ff f9a5 	bl	8000770 <__aeabi_dmul>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	a39e      	add	r3, pc, #632	; (adr r3, 80016a8 <main+0x5d8>)
 8001430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001434:	f7ff f99c 	bl	8000770 <__aeabi_dmul>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fc8e 	bl	8000d60 <__aeabi_d2f>
 8001444:	4603      	mov	r3, r0
 8001446:	4a9f      	ldr	r2, [pc, #636]	; (80016c4 <main+0x5f4>)
 8001448:	6013      	str	r3, [r2, #0]
					sprintf(bufferData, "AccelY = %.2f \n", Y_axis);
 800144a:	4b9e      	ldr	r3, [pc, #632]	; (80016c4 <main+0x5f4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f936 	bl	80006c0 <__aeabi_f2d>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	499b      	ldr	r1, [pc, #620]	; (80016c8 <main+0x5f8>)
 800145a:	4897      	ldr	r0, [pc, #604]	; (80016b8 <main+0x5e8>)
 800145c:	f002 fd2a 	bl	8003eb4 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 8001460:	4995      	ldr	r1, [pc, #596]	; (80016b8 <main+0x5e8>)
 8001462:	4896      	ldr	r0, [pc, #600]	; (80016bc <main+0x5ec>)
 8001464:	f001 fe33 	bl	80030ce <writeMsg>
					rxData = '\0';
 8001468:	4b91      	ldr	r3, [pc, #580]	; (80016b0 <main+0x5e0>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	e050      	b.n	8001512 <main+0x442>
				}
				// Para el eje Z y su lectura presionando la tecla "z".
				else if(rxData == 'z'){
 8001470:	4b8f      	ldr	r3, [pc, #572]	; (80016b0 <main+0x5e0>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b7a      	cmp	r3, #122	; 0x7a
 8001476:	d14c      	bne.n	8001512 <main+0x442>
					sprintf(bufferData, "Axis Z data (r)\n");
 8001478:	4994      	ldr	r1, [pc, #592]	; (80016cc <main+0x5fc>)
 800147a:	488f      	ldr	r0, [pc, #572]	; (80016b8 <main+0x5e8>)
 800147c:	f002 fd1a 	bl	8003eb4 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 8001480:	498d      	ldr	r1, [pc, #564]	; (80016b8 <main+0x5e8>)
 8001482:	488e      	ldr	r0, [pc, #568]	; (80016bc <main+0x5ec>)
 8001484:	f001 fe23 	bl	80030ce <writeMsg>
					uint8_t AccelZ_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_L);
 8001488:	2136      	movs	r1, #54	; 0x36
 800148a:	488d      	ldr	r0, [pc, #564]	; (80016c0 <main+0x5f0>)
 800148c:	f001 f8ca 	bl	8002624 <i2c_readSingleRegister>
 8001490:	4603      	mov	r3, r0
 8001492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					uint8_t AccelZ_high = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_H);
 8001496:	2137      	movs	r1, #55	; 0x37
 8001498:	4889      	ldr	r0, [pc, #548]	; (80016c0 <main+0x5f0>)
 800149a:	f001 f8c3 	bl	8002624 <i2c_readSingleRegister>
 800149e:	4603      	mov	r3, r0
 80014a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					int16_t AccelZ = AccelZ_high << 8 | AccelZ_low;
 80014a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	4313      	orrs	r3, r2
 80014b4:	843b      	strh	r3, [r7, #32]
					Z_axis = AccelZ * 0.0039 * 9.8;
 80014b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f8ee 	bl	800069c <__aeabi_i2d>
 80014c0:	a377      	add	r3, pc, #476	; (adr r3, 80016a0 <main+0x5d0>)
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	f7ff f953 	bl	8000770 <__aeabi_dmul>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	a375      	add	r3, pc, #468	; (adr r3, 80016a8 <main+0x5d8>)
 80014d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d8:	f7ff f94a 	bl	8000770 <__aeabi_dmul>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4610      	mov	r0, r2
 80014e2:	4619      	mov	r1, r3
 80014e4:	f7ff fc3c 	bl	8000d60 <__aeabi_d2f>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4a79      	ldr	r2, [pc, #484]	; (80016d0 <main+0x600>)
 80014ec:	6013      	str	r3, [r2, #0]
					sprintf(bufferData, "AccelZ = %.2f \n", Z_axis);
 80014ee:	4b78      	ldr	r3, [pc, #480]	; (80016d0 <main+0x600>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f8e4 	bl	80006c0 <__aeabi_f2d>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4975      	ldr	r1, [pc, #468]	; (80016d4 <main+0x604>)
 80014fe:	486e      	ldr	r0, [pc, #440]	; (80016b8 <main+0x5e8>)
 8001500:	f002 fcd8 	bl	8003eb4 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 8001504:	496c      	ldr	r1, [pc, #432]	; (80016b8 <main+0x5e8>)
 8001506:	486d      	ldr	r0, [pc, #436]	; (80016bc <main+0x5ec>)
 8001508:	f001 fde1 	bl	80030ce <writeMsg>
					rxData = '\0';
 800150c:	4b68      	ldr	r3, [pc, #416]	; (80016b0 <main+0x5e0>)
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
				}
				flagMuestreo = 0;
 8001512:	4b71      	ldr	r3, [pc, #452]	; (80016d8 <main+0x608>)
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
			 * El condicional se define en función del segundo valor que
			 * puede tomar la bandera que se define en el Basic Callback.
			 * El sistema entra aquí al presionar la letra "c".
			 * Aquí se tiene un primer muestreo infinito a 1 kHz.
			 */
			if(flagMuestreo == 2){
 8001518:	4b6f      	ldr	r3, [pc, #444]	; (80016d8 <main+0x608>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b02      	cmp	r3, #2
 800151e:	f040 80b6 	bne.w	800168e <main+0x5be>
				// Para el eje X
				uint8_t AccelX_low =  i2c_readSingleRegister(&Acelerometer, ACCEL_X1_L);
 8001522:	2132      	movs	r1, #50	; 0x32
 8001524:	4866      	ldr	r0, [pc, #408]	; (80016c0 <main+0x5f0>)
 8001526:	f001 f87d 	bl	8002624 <i2c_readSingleRegister>
 800152a:	4603      	mov	r3, r0
 800152c:	75fb      	strb	r3, [r7, #23]
				uint8_t AccelX_high = i2c_readSingleRegister(&Acelerometer, ACCEL_X1_H);
 800152e:	2133      	movs	r1, #51	; 0x33
 8001530:	4863      	ldr	r0, [pc, #396]	; (80016c0 <main+0x5f0>)
 8001532:	f001 f877 	bl	8002624 <i2c_readSingleRegister>
 8001536:	4603      	mov	r3, r0
 8001538:	75bb      	strb	r3, [r7, #22]
				int16_t AccelX = AccelX_high << 8 | AccelX_low;
 800153a:	7dbb      	ldrb	r3, [r7, #22]
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	b21a      	sxth	r2, r3
 8001540:	7dfb      	ldrb	r3, [r7, #23]
 8001542:	b21b      	sxth	r3, r3
 8001544:	4313      	orrs	r3, r2
 8001546:	82bb      	strh	r3, [r7, #20]
				X_axis = AccelX * 0.0039 * 9.8;
 8001548:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f8a5 	bl	800069c <__aeabi_i2d>
 8001552:	a353      	add	r3, pc, #332	; (adr r3, 80016a0 <main+0x5d0>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f7ff f90a 	bl	8000770 <__aeabi_dmul>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	a350      	add	r3, pc, #320	; (adr r3, 80016a8 <main+0x5d8>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	f7ff f901 	bl	8000770 <__aeabi_dmul>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff fbf3 	bl	8000d60 <__aeabi_d2f>
 800157a:	4603      	mov	r3, r0
 800157c:	4a57      	ldr	r2, [pc, #348]	; (80016dc <main+0x60c>)
 800157e:	6013      	str	r3, [r2, #0]
				X_1[counter] = X_axis; // Arreglo definido para X.
 8001580:	4b57      	ldr	r3, [pc, #348]	; (80016e0 <main+0x610>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	4b55      	ldr	r3, [pc, #340]	; (80016dc <main+0x60c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a56      	ldr	r2, [pc, #344]	; (80016e4 <main+0x614>)
 800158c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				// Para el eje Y
				uint8_t AccelY_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Y1_L);
 8001590:	2134      	movs	r1, #52	; 0x34
 8001592:	484b      	ldr	r0, [pc, #300]	; (80016c0 <main+0x5f0>)
 8001594:	f001 f846 	bl	8002624 <i2c_readSingleRegister>
 8001598:	4603      	mov	r3, r0
 800159a:	74fb      	strb	r3, [r7, #19]
				uint8_t AccelY_high = i2c_readSingleRegister(&Acelerometer,ACCEL_Y1_H);
 800159c:	2135      	movs	r1, #53	; 0x35
 800159e:	4848      	ldr	r0, [pc, #288]	; (80016c0 <main+0x5f0>)
 80015a0:	f001 f840 	bl	8002624 <i2c_readSingleRegister>
 80015a4:	4603      	mov	r3, r0
 80015a6:	74bb      	strb	r3, [r7, #18]
				int16_t AccelY = AccelY_high << 8 | AccelY_low;
 80015a8:	7cbb      	ldrb	r3, [r7, #18]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	7cfb      	ldrb	r3, [r7, #19]
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	4313      	orrs	r3, r2
 80015b4:	823b      	strh	r3, [r7, #16]
				Y_axis = AccelY * 0.0039 * 9.8;
 80015b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff f86e 	bl	800069c <__aeabi_i2d>
 80015c0:	a337      	add	r3, pc, #220	; (adr r3, 80016a0 <main+0x5d0>)
 80015c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c6:	f7ff f8d3 	bl	8000770 <__aeabi_dmul>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	a335      	add	r3, pc, #212	; (adr r3, 80016a8 <main+0x5d8>)
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	f7ff f8ca 	bl	8000770 <__aeabi_dmul>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	f7ff fbbc 	bl	8000d60 <__aeabi_d2f>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4a36      	ldr	r2, [pc, #216]	; (80016c4 <main+0x5f4>)
 80015ec:	6013      	str	r3, [r2, #0]
				Y_1[counter] = Y_axis; // Arreglo definido para Y.
 80015ee:	4b3c      	ldr	r3, [pc, #240]	; (80016e0 <main+0x610>)
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	4619      	mov	r1, r3
 80015f4:	4b33      	ldr	r3, [pc, #204]	; (80016c4 <main+0x5f4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a3b      	ldr	r2, [pc, #236]	; (80016e8 <main+0x618>)
 80015fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				// Para el eje Z
				uint8_t AccelZ_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_L);
 80015fe:	2136      	movs	r1, #54	; 0x36
 8001600:	482f      	ldr	r0, [pc, #188]	; (80016c0 <main+0x5f0>)
 8001602:	f001 f80f 	bl	8002624 <i2c_readSingleRegister>
 8001606:	4603      	mov	r3, r0
 8001608:	73fb      	strb	r3, [r7, #15]
				uint8_t AccelZ_high = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_H);
 800160a:	2137      	movs	r1, #55	; 0x37
 800160c:	482c      	ldr	r0, [pc, #176]	; (80016c0 <main+0x5f0>)
 800160e:	f001 f809 	bl	8002624 <i2c_readSingleRegister>
 8001612:	4603      	mov	r3, r0
 8001614:	73bb      	strb	r3, [r7, #14]
				int16_t AccelZ = AccelZ_high << 8 | AccelZ_low;
 8001616:	7bbb      	ldrb	r3, [r7, #14]
 8001618:	021b      	lsls	r3, r3, #8
 800161a:	b21a      	sxth	r2, r3
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	b21b      	sxth	r3, r3
 8001620:	4313      	orrs	r3, r2
 8001622:	81bb      	strh	r3, [r7, #12]
				Z_axis = AccelZ * 0.0039 * 9.8;
 8001624:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff f837 	bl	800069c <__aeabi_i2d>
 800162e:	a31c      	add	r3, pc, #112	; (adr r3, 80016a0 <main+0x5d0>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7ff f89c 	bl	8000770 <__aeabi_dmul>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	a319      	add	r3, pc, #100	; (adr r3, 80016a8 <main+0x5d8>)
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7ff f893 	bl	8000770 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	f7ff fb85 	bl	8000d60 <__aeabi_d2f>
 8001656:	4603      	mov	r3, r0
 8001658:	4a1d      	ldr	r2, [pc, #116]	; (80016d0 <main+0x600>)
 800165a:	6013      	str	r3, [r2, #0]
				Z_1[counter] = Z_axis; // Arreglo definido para Y.
 800165c:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <main+0x610>)
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <main+0x600>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a21      	ldr	r2, [pc, #132]	; (80016ec <main+0x61c>)
 8001668:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				// El contador que barre los arreglos.
				counter++;
 800166c:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <main+0x610>)
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	b29a      	uxth	r2, r3
 8001674:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <main+0x610>)
 8001676:	801a      	strh	r2, [r3, #0]
				// Las 2000 tomas para los 2000 segundos.
				if(counter == 2000){
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <main+0x610>)
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001680:	d105      	bne.n	800168e <main+0x5be>
					flag = 1; // Bandera para entrar al ciclo if y enviar valores de aceleración
 8001682:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <main+0x620>)
 8001684:	2201      	movs	r2, #1
 8001686:	701a      	strb	r2, [r3, #0]
					counter = 0;
 8001688:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <main+0x610>)
 800168a:	2200      	movs	r2, #0
 800168c:	801a      	strh	r2, [r3, #0]

			/* IMPRESIÓN DE LOS ARREGLOS :
			 * Aquí se define la forma en que se busca dar un formato definido para
			 * la presentación de los arreglos bajo el muestreo de 1 kHz.
			 */
				if(flag == 1){
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <main+0x620>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d161      	bne.n	800175a <main+0x68a>
					for( int i = 0 ; i < 2000; i++){
 8001696:	2300      	movs	r3, #0
 8001698:	637b      	str	r3, [r7, #52]	; 0x34
 800169a:	e05a      	b.n	8001752 <main+0x682>
 800169c:	f3af 8000 	nop.w
 80016a0:	8e8a71de 	.word	0x8e8a71de
 80016a4:	3f6ff2e4 	.word	0x3f6ff2e4
 80016a8:	9999999a 	.word	0x9999999a
 80016ac:	40239999 	.word	0x40239999
 80016b0:	20000311 	.word	0x20000311
 80016b4:	08007b40 	.word	0x08007b40
 80016b8:	20000000 	.word	0x20000000
 80016bc:	2000025c 	.word	0x2000025c
 80016c0:	20000308 	.word	0x20000308
 80016c4:	2000615c 	.word	0x2000615c
 80016c8:	08007b54 	.word	0x08007b54
 80016cc:	08007b64 	.word	0x08007b64
 80016d0:	20006160 	.word	0x20006160
 80016d4:	08007b78 	.word	0x08007b78
 80016d8:	20006100 	.word	0x20006100
 80016dc:	20006158 	.word	0x20006158
 80016e0:	200060d4 	.word	0x200060d4
 80016e4:	20000314 	.word	0x20000314
 80016e8:	20002254 	.word	0x20002254
 80016ec:	20004194 	.word	0x20004194
 80016f0:	200002ed 	.word	0x200002ed
						sprintf(bufferData, " AccelX = %.2f ; AccelY = %.2f ; AccelZ = %.2f \n",X_1[i],Y_1[i],Z_1[i]);
 80016f4:	4a9c      	ldr	r2, [pc, #624]	; (8001968 <main+0x898>)
 80016f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe ffdf 	bl	80006c0 <__aeabi_f2d>
 8001702:	4680      	mov	r8, r0
 8001704:	4689      	mov	r9, r1
 8001706:	4a99      	ldr	r2, [pc, #612]	; (800196c <main+0x89c>)
 8001708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800170a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ffd6 	bl	80006c0 <__aeabi_f2d>
 8001714:	4604      	mov	r4, r0
 8001716:	460d      	mov	r5, r1
 8001718:	4a95      	ldr	r2, [pc, #596]	; (8001970 <main+0x8a0>)
 800171a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe ffcd 	bl	80006c0 <__aeabi_f2d>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800172e:	e9cd 4500 	strd	r4, r5, [sp]
 8001732:	4642      	mov	r2, r8
 8001734:	464b      	mov	r3, r9
 8001736:	498f      	ldr	r1, [pc, #572]	; (8001974 <main+0x8a4>)
 8001738:	488f      	ldr	r0, [pc, #572]	; (8001978 <main+0x8a8>)
 800173a:	f002 fbbb 	bl	8003eb4 <siprintf>
						writeMsg(&USART6Comm, bufferData);
 800173e:	498e      	ldr	r1, [pc, #568]	; (8001978 <main+0x8a8>)
 8001740:	488e      	ldr	r0, [pc, #568]	; (800197c <main+0x8ac>)
 8001742:	f001 fcc4 	bl	80030ce <writeMsg>
						flagMuestreo = 0;
 8001746:	4b8e      	ldr	r3, [pc, #568]	; (8001980 <main+0x8b0>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
					for( int i = 0 ; i < 2000; i++){
 800174c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800174e:	3301      	adds	r3, #1
 8001750:	637b      	str	r3, [r7, #52]	; 0x34
 8001752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001754:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001758:	dbcc      	blt.n	80016f4 <main+0x624>
				 * del formato de retorno de los datos un segundo contador que
				 * mostrará que sí se están retornando los 2000 datos (definiendo
				 * un dato como el grupo de valores de las 3 coordenadas) y no
				 * menos.
				 */
				if(flagMuestreo == 3){
 800175a:	4b89      	ldr	r3, [pc, #548]	; (8001980 <main+0x8b0>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b03      	cmp	r3, #3
 8001760:	f040 80b6 	bne.w	80018d0 <main+0x800>

					uint8_t AccelX_low =  i2c_readSingleRegister(&Acelerometer, ACCEL_X1_L);
 8001764:	2132      	movs	r1, #50	; 0x32
 8001766:	4887      	ldr	r0, [pc, #540]	; (8001984 <main+0x8b4>)
 8001768:	f000 ff5c 	bl	8002624 <i2c_readSingleRegister>
 800176c:	4603      	mov	r3, r0
 800176e:	72fb      	strb	r3, [r7, #11]
					uint8_t AccelX_high = i2c_readSingleRegister(&Acelerometer, ACCEL_X1_H);
 8001770:	2133      	movs	r1, #51	; 0x33
 8001772:	4884      	ldr	r0, [pc, #528]	; (8001984 <main+0x8b4>)
 8001774:	f000 ff56 	bl	8002624 <i2c_readSingleRegister>
 8001778:	4603      	mov	r3, r0
 800177a:	72bb      	strb	r3, [r7, #10]
					int16_t AccelX = AccelX_high << 8 | AccelX_low;
 800177c:	7abb      	ldrb	r3, [r7, #10]
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	b21a      	sxth	r2, r3
 8001782:	7afb      	ldrb	r3, [r7, #11]
 8001784:	b21b      	sxth	r3, r3
 8001786:	4313      	orrs	r3, r2
 8001788:	813b      	strh	r3, [r7, #8]
					X_axis = AccelX * 0.0039 * 9.8;
 800178a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe ff84 	bl	800069c <__aeabi_i2d>
 8001794:	a370      	add	r3, pc, #448	; (adr r3, 8001958 <main+0x888>)
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	f7fe ffe9 	bl	8000770 <__aeabi_dmul>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	a36e      	add	r3, pc, #440	; (adr r3, 8001960 <main+0x890>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f7fe ffe0 	bl	8000770 <__aeabi_dmul>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f7ff fad2 	bl	8000d60 <__aeabi_d2f>
 80017bc:	4603      	mov	r3, r0
 80017be:	4a72      	ldr	r2, [pc, #456]	; (8001988 <main+0x8b8>)
 80017c0:	6013      	str	r3, [r2, #0]
					X_1[counter]=X_axis;
 80017c2:	4b72      	ldr	r3, [pc, #456]	; (800198c <main+0x8bc>)
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	4619      	mov	r1, r3
 80017c8:	4b6f      	ldr	r3, [pc, #444]	; (8001988 <main+0x8b8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a66      	ldr	r2, [pc, #408]	; (8001968 <main+0x898>)
 80017ce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

					uint8_t AccelY_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Y1_L);
 80017d2:	2134      	movs	r1, #52	; 0x34
 80017d4:	486b      	ldr	r0, [pc, #428]	; (8001984 <main+0x8b4>)
 80017d6:	f000 ff25 	bl	8002624 <i2c_readSingleRegister>
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
					uint8_t AccelY_high = i2c_readSingleRegister(&Acelerometer,ACCEL_Y1_H);
 80017de:	2135      	movs	r1, #53	; 0x35
 80017e0:	4868      	ldr	r0, [pc, #416]	; (8001984 <main+0x8b4>)
 80017e2:	f000 ff1f 	bl	8002624 <i2c_readSingleRegister>
 80017e6:	4603      	mov	r3, r0
 80017e8:	71bb      	strb	r3, [r7, #6]
					int16_t AccelY = AccelY_high << 8 | AccelY_low;
 80017ea:	79bb      	ldrb	r3, [r7, #6]
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	b21a      	sxth	r2, r3
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	b21b      	sxth	r3, r3
 80017f4:	4313      	orrs	r3, r2
 80017f6:	80bb      	strh	r3, [r7, #4]
					Y_axis = AccelY * 0.0039 * 9.8;
 80017f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe ff4d 	bl	800069c <__aeabi_i2d>
 8001802:	a355      	add	r3, pc, #340	; (adr r3, 8001958 <main+0x888>)
 8001804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001808:	f7fe ffb2 	bl	8000770 <__aeabi_dmul>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	a352      	add	r3, pc, #328	; (adr r3, 8001960 <main+0x890>)
 8001816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181a:	f7fe ffa9 	bl	8000770 <__aeabi_dmul>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	f7ff fa9b 	bl	8000d60 <__aeabi_d2f>
 800182a:	4603      	mov	r3, r0
 800182c:	4a58      	ldr	r2, [pc, #352]	; (8001990 <main+0x8c0>)
 800182e:	6013      	str	r3, [r2, #0]
					Y_1[counter]=Y_axis;
 8001830:	4b56      	ldr	r3, [pc, #344]	; (800198c <main+0x8bc>)
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	4619      	mov	r1, r3
 8001836:	4b56      	ldr	r3, [pc, #344]	; (8001990 <main+0x8c0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a4c      	ldr	r2, [pc, #304]	; (800196c <main+0x89c>)
 800183c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

					uint8_t AccelZ_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_L);
 8001840:	2136      	movs	r1, #54	; 0x36
 8001842:	4850      	ldr	r0, [pc, #320]	; (8001984 <main+0x8b4>)
 8001844:	f000 feee 	bl	8002624 <i2c_readSingleRegister>
 8001848:	4603      	mov	r3, r0
 800184a:	70fb      	strb	r3, [r7, #3]
					uint8_t AccelZ_high = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_H);
 800184c:	2137      	movs	r1, #55	; 0x37
 800184e:	484d      	ldr	r0, [pc, #308]	; (8001984 <main+0x8b4>)
 8001850:	f000 fee8 	bl	8002624 <i2c_readSingleRegister>
 8001854:	4603      	mov	r3, r0
 8001856:	70bb      	strb	r3, [r7, #2]
					int16_t AccelZ = AccelZ_high << 8 | AccelZ_low;
 8001858:	78bb      	ldrb	r3, [r7, #2]
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	b21a      	sxth	r2, r3
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	b21b      	sxth	r3, r3
 8001862:	4313      	orrs	r3, r2
 8001864:	803b      	strh	r3, [r7, #0]
					Z_axis = AccelZ * 0.0039 * 9.8;
 8001866:	f9b7 3000 	ldrsh.w	r3, [r7]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe ff16 	bl	800069c <__aeabi_i2d>
 8001870:	a339      	add	r3, pc, #228	; (adr r3, 8001958 <main+0x888>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	f7fe ff7b 	bl	8000770 <__aeabi_dmul>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	a337      	add	r3, pc, #220	; (adr r3, 8001960 <main+0x890>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7fe ff72 	bl	8000770 <__aeabi_dmul>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	f7ff fa64 	bl	8000d60 <__aeabi_d2f>
 8001898:	4603      	mov	r3, r0
 800189a:	4a3e      	ldr	r2, [pc, #248]	; (8001994 <main+0x8c4>)
 800189c:	6013      	str	r3, [r2, #0]
					Z_1[counter]=Z_axis;
 800189e:	4b3b      	ldr	r3, [pc, #236]	; (800198c <main+0x8bc>)
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	4619      	mov	r1, r3
 80018a4:	4b3b      	ldr	r3, [pc, #236]	; (8001994 <main+0x8c4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a31      	ldr	r2, [pc, #196]	; (8001970 <main+0x8a0>)
 80018aa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
					counter++;
 80018ae:	4b37      	ldr	r3, [pc, #220]	; (800198c <main+0x8bc>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	3301      	adds	r3, #1
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	4b35      	ldr	r3, [pc, #212]	; (800198c <main+0x8bc>)
 80018b8:	801a      	strh	r2, [r3, #0]
					if(counter == 2000){
 80018ba:	4b34      	ldr	r3, [pc, #208]	; (800198c <main+0x8bc>)
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80018c2:	d105      	bne.n	80018d0 <main+0x800>
						flag2 = 1;
 80018c4:	4b34      	ldr	r3, [pc, #208]	; (8001998 <main+0x8c8>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	701a      	strb	r2, [r3, #0]
						rxData = '\0';
 80018ca:	4b34      	ldr	r3, [pc, #208]	; (800199c <main+0x8cc>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
				/* Dentro de este if y gracias a la configuración de la velocidad
				 * a la cual se pone a trabajar el timer, se imprimen los datos
				 * recopilados dentro del arreglo para su fácil lectura y análisis.
				 */

				if(flag2 == 1){
 80018d0:	4b31      	ldr	r3, [pc, #196]	; (8001998 <main+0x8c8>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	f47f ac01 	bne.w	80010dc <main+0xc>
					for( int i = 0 ; i < 2000; i++){
 80018da:	2300      	movs	r3, #0
 80018dc:	633b      	str	r3, [r7, #48]	; 0x30
 80018de:	e032      	b.n	8001946 <main+0x876>
						sprintf(bufferData, "[m/s²] #%d AccelX = %.2f ; AccelY = %.2f ; AccelZ = %.2f \n",i,X_1[i],Y_1[i],Z_1[i]);
 80018e0:	4a21      	ldr	r2, [pc, #132]	; (8001968 <main+0x898>)
 80018e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fee9 	bl	80006c0 <__aeabi_f2d>
 80018ee:	4604      	mov	r4, r0
 80018f0:	460d      	mov	r5, r1
 80018f2:	4a1e      	ldr	r2, [pc, #120]	; (800196c <main+0x89c>)
 80018f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fee0 	bl	80006c0 <__aeabi_f2d>
 8001900:	4680      	mov	r8, r0
 8001902:	4689      	mov	r9, r1
 8001904:	4a1a      	ldr	r2, [pc, #104]	; (8001970 <main+0x8a0>)
 8001906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fed7 	bl	80006c0 <__aeabi_f2d>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800191a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800191e:	e9cd 4500 	strd	r4, r5, [sp]
 8001922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001924:	491e      	ldr	r1, [pc, #120]	; (80019a0 <main+0x8d0>)
 8001926:	4814      	ldr	r0, [pc, #80]	; (8001978 <main+0x8a8>)
 8001928:	f002 fac4 	bl	8003eb4 <siprintf>
						writeMsg(&USART6Comm, bufferData);
 800192c:	4912      	ldr	r1, [pc, #72]	; (8001978 <main+0x8a8>)
 800192e:	4813      	ldr	r0, [pc, #76]	; (800197c <main+0x8ac>)
 8001930:	f001 fbcd 	bl	80030ce <writeMsg>
						flagMuestreo =0;
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <main+0x8b0>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
						flag2 = 0;
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <main+0x8c8>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
					for( int i = 0 ; i < 2000; i++){
 8001940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001942:	3301      	adds	r3, #1
 8001944:	633b      	str	r3, [r7, #48]	; 0x30
 8001946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001948:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800194c:	dbc8      	blt.n	80018e0 <main+0x810>
		if(flagMuestreo == 1){
 800194e:	f7ff bbc5 	b.w	80010dc <main+0xc>
 8001952:	bf00      	nop
 8001954:	f3af 8000 	nop.w
 8001958:	8e8a71de 	.word	0x8e8a71de
 800195c:	3f6ff2e4 	.word	0x3f6ff2e4
 8001960:	9999999a 	.word	0x9999999a
 8001964:	40239999 	.word	0x40239999
 8001968:	20000314 	.word	0x20000314
 800196c:	20002254 	.word	0x20002254
 8001970:	20004194 	.word	0x20004194
 8001974:	08007b88 	.word	0x08007b88
 8001978:	20000000 	.word	0x20000000
 800197c:	2000025c 	.word	0x2000025c
 8001980:	20006100 	.word	0x20006100
 8001984:	20000308 	.word	0x20000308
 8001988:	20006158 	.word	0x20006158
 800198c:	200060d4 	.word	0x200060d4
 8001990:	2000615c 	.word	0x2000615c
 8001994:	20006160 	.word	0x20006160
 8001998:	200002ee 	.word	0x200002ee
 800199c:	20000311 	.word	0x20000311
 80019a0:	08007bbc 	.word	0x08007bbc

080019a4 <signalsPWM>:
 * en que se vió desde la experiencia que oscilan los valores. La línea recta
 * mantiene los valores de tiempo del dutty cicle dentro de los rangos en que
 * solicita mantenerlos según el texto de la tarea.
 */

void signalsPWM(void){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	// Para cada eje debemos conservar la misma recta porque las condiciones so
	newDutty_1 = 1000 * X_axis + 10000;
 80019a8:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <signalsPWM+0xa0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4926      	ldr	r1, [pc, #152]	; (8001a48 <signalsPWM+0xa4>)
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fc6e 	bl	8000290 <__aeabi_fmul>
 80019b4:	4603      	mov	r3, r0
 80019b6:	4925      	ldr	r1, [pc, #148]	; (8001a4c <signalsPWM+0xa8>)
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fa27 	bl	8000e0c <__addsf3>
 80019be:	4603      	mov	r3, r0
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fb2b 	bl	800101c <__aeabi_f2uiz>
 80019c6:	4603      	mov	r3, r0
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	4b21      	ldr	r3, [pc, #132]	; (8001a50 <signalsPWM+0xac>)
 80019cc:	801a      	strh	r2, [r3, #0]
	newDutty_2 = 1000 * Y_axis + 10000;
 80019ce:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <signalsPWM+0xb0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	491d      	ldr	r1, [pc, #116]	; (8001a48 <signalsPWM+0xa4>)
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fc5b 	bl	8000290 <__aeabi_fmul>
 80019da:	4603      	mov	r3, r0
 80019dc:	491b      	ldr	r1, [pc, #108]	; (8001a4c <signalsPWM+0xa8>)
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fa14 	bl	8000e0c <__addsf3>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fb18 	bl	800101c <__aeabi_f2uiz>
 80019ec:	4603      	mov	r3, r0
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <signalsPWM+0xb4>)
 80019f2:	801a      	strh	r2, [r3, #0]
	newDutty_3 = 1000 * Z_axis + 10000;
 80019f4:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <signalsPWM+0xb8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4913      	ldr	r1, [pc, #76]	; (8001a48 <signalsPWM+0xa4>)
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fc48 	bl	8000290 <__aeabi_fmul>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4912      	ldr	r1, [pc, #72]	; (8001a4c <signalsPWM+0xa8>)
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fa01 	bl	8000e0c <__addsf3>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fb05 	bl	800101c <__aeabi_f2uiz>
 8001a12:	4603      	mov	r3, r0
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <signalsPWM+0xbc>)
 8001a18:	801a      	strh	r2, [r3, #0]
	// Se actualiza la configuración del PWM bajo la nueva condición.
	updateDuttyCycle(&handlerTIM3PWM_1, newDutty_1);
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <signalsPWM+0xac>)
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4810      	ldr	r0, [pc, #64]	; (8001a64 <signalsPWM+0xc0>)
 8001a22:	f001 f90b 	bl	8002c3c <updateDuttyCycle>
	updateDuttyCycle(&handlerTIM3PWM_2, newDutty_2);
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <signalsPWM+0xb4>)
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	480e      	ldr	r0, [pc, #56]	; (8001a68 <signalsPWM+0xc4>)
 8001a2e:	f001 f905 	bl	8002c3c <updateDuttyCycle>
	updateDuttyCycle(&handlerTIM3PWM_3, newDutty_3);
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <signalsPWM+0xbc>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	480c      	ldr	r0, [pc, #48]	; (8001a6c <signalsPWM+0xc8>)
 8001a3a:	f001 f8ff 	bl	8002c3c <updateDuttyCycle>
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20006158 	.word	0x20006158
 8001a48:	447a0000 	.word	0x447a0000
 8001a4c:	461c4000 	.word	0x461c4000
 8001a50:	20006164 	.word	0x20006164
 8001a54:	2000615c 	.word	0x2000615c
 8001a58:	20006166 	.word	0x20006166
 8001a5c:	20006160 	.word	0x20006160
 8001a60:	20006168 	.word	0x20006168
 8001a64:	20006128 	.word	0x20006128
 8001a68:	20006138 	.word	0x20006138
 8001a6c:	20006148 	.word	0x20006148

08001a70 <init_Hardware>:

//Función de configuración de los elementos del sistema.
void init_Hardware(void){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0

	// Se configura el PLL con los parámetros dados.
	handlerPLL.PLL_Config.PLL_voltage		= VOLTAGE_84MHZ;
 8001a74:	4baa      	ldr	r3, [pc, #680]	; (8001d20 <init_Hardware+0x2b0>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	701a      	strb	r2, [r3, #0]
	handlerPLL.PLL_Config.PLL_frecuency		= FRECUENCY_80MHZ;
 8001a7a:	4ba9      	ldr	r3, [pc, #676]	; (8001d20 <init_Hardware+0x2b0>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	705a      	strb	r2, [r3, #1]
	PLL_Config(&handlerPLL);
 8001a80:	48a7      	ldr	r0, [pc, #668]	; (8001d20 <init_Hardware+0x2b0>)
 8001a82:	f000 fe23 	bl	80026cc <PLL_Config>
	getConfigPLL();
 8001a86:	f000 ff5d 	bl	8002944 <getConfigPLL>

	/* LED DE ESTADO A 250 ms aproximadamente. */
	handlerBlinkyPin.pGPIOx 									= GPIOA;
 8001a8a:	4ba6      	ldr	r3, [pc, #664]	; (8001d24 <init_Hardware+0x2b4>)
 8001a8c:	4aa6      	ldr	r2, [pc, #664]	; (8001d28 <init_Hardware+0x2b8>)
 8001a8e:	601a      	str	r2, [r3, #0]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinNumber 				= PIN_5;
 8001a90:	4ba4      	ldr	r3, [pc, #656]	; (8001d24 <init_Hardware+0x2b4>)
 8001a92:	2205      	movs	r2, #5
 8001a94:	711a      	strb	r2, [r3, #4]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 8001a96:	4ba3      	ldr	r3, [pc, #652]	; (8001d24 <init_Hardware+0x2b4>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	715a      	strb	r2, [r3, #5]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8001a9c:	4ba1      	ldr	r3, [pc, #644]	; (8001d24 <init_Hardware+0x2b4>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	721a      	strb	r2, [r3, #8]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinSpeed  				= GPIO_OSPEED_FAST;
 8001aa2:	4ba0      	ldr	r3, [pc, #640]	; (8001d24 <init_Hardware+0x2b4>)
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	719a      	strb	r2, [r3, #6]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinPuPdControl			= GPIO_PUPDR_NOTHING;
 8001aa8:	4b9e      	ldr	r3, [pc, #632]	; (8001d24 <init_Hardware+0x2b4>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	71da      	strb	r2, [r3, #7]

	// Se carga la configuración del Blinky,
	GPIO_Config(&handlerBlinkyPin);
 8001aae:	489d      	ldr	r0, [pc, #628]	; (8001d24 <init_Hardware+0x2b4>)
 8001ab0:	f000 fae2 	bl	8002078 <GPIO_Config>
	GPIO_WritePin(&handlerBlinkyPin, SET);
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	489b      	ldr	r0, [pc, #620]	; (8001d24 <init_Hardware+0x2b4>)
 8001ab8:	f000 fc06 	bl	80022c8 <GPIO_WritePin>

	// Se configura el timer del blinky.
	handlerBlinkyTimer.ptrTIMx								= TIM2;
 8001abc:	4b9b      	ldr	r3, [pc, #620]	; (8001d2c <init_Hardware+0x2bc>)
 8001abe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ac2:	601a      	str	r2, [r3, #0]
	handlerBlinkyTimer.TIMx_Config.TIMx_mode				= BTIMER_MODE_UP;
 8001ac4:	4b99      	ldr	r3, [pc, #612]	; (8001d2c <init_Hardware+0x2bc>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	711a      	strb	r2, [r3, #4]
	handlerBlinkyTimer.TIMx_Config.TIMx_speed				= BTIMER_SPEED_80MHz;
 8001aca:	4b98      	ldr	r3, [pc, #608]	; (8001d2c <init_Hardware+0x2bc>)
 8001acc:	f641 72a4 	movw	r2, #8100	; 0x1fa4
 8001ad0:	609a      	str	r2, [r3, #8]
	handlerBlinkyTimer.TIMx_Config.TIMx_period				= 2500;
 8001ad2:	4b96      	ldr	r3, [pc, #600]	; (8001d2c <init_Hardware+0x2bc>)
 8001ad4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001ad8:	60da      	str	r2, [r3, #12]
	handlerBlinkyTimer.TIMx_Config.TIMx_interruptEnable 	= BTIMER_INTERRUPT_ENABLE;
 8001ada:	4b94      	ldr	r3, [pc, #592]	; (8001d2c <init_Hardware+0x2bc>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	741a      	strb	r2, [r3, #16]

	// Se carga lo hecho sobre el timer del blinky.
	BasicTimer_Config(&handlerBlinkyTimer);
 8001ae0:	4892      	ldr	r0, [pc, #584]	; (8001d2c <init_Hardware+0x2bc>)
 8001ae2:	f000 f9d5 	bl	8001e90 <BasicTimer_Config>

	/* Configuración del USART */
	// Transmisión
	handlerUSARTPINTX.pGPIOx  							= GPIOA;
 8001ae6:	4b92      	ldr	r3, [pc, #584]	; (8001d30 <init_Hardware+0x2c0>)
 8001ae8:	4a8f      	ldr	r2, [pc, #572]	; (8001d28 <init_Hardware+0x2b8>)
 8001aea:	601a      	str	r2, [r3, #0]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinNumber 	= PIN_11;
 8001aec:	4b90      	ldr	r3, [pc, #576]	; (8001d30 <init_Hardware+0x2c0>)
 8001aee:	220b      	movs	r2, #11
 8001af0:	711a      	strb	r2, [r3, #4]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFN;
 8001af2:	4b8f      	ldr	r3, [pc, #572]	; (8001d30 <init_Hardware+0x2c0>)
 8001af4:	2202      	movs	r2, #2
 8001af6:	715a      	strb	r2, [r3, #5]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinAltFunMode = AF8;
 8001af8:	4b8d      	ldr	r3, [pc, #564]	; (8001d30 <init_Hardware+0x2c0>)
 8001afa:	2208      	movs	r2, #8
 8001afc:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerUSARTPINTX);
 8001afe:	488c      	ldr	r0, [pc, #560]	; (8001d30 <init_Hardware+0x2c0>)
 8001b00:	f000 faba 	bl	8002078 <GPIO_Config>

	// Recepción
	handlerUSARTPINRX.pGPIOx 						 	= GPIOA;
 8001b04:	4b8b      	ldr	r3, [pc, #556]	; (8001d34 <init_Hardware+0x2c4>)
 8001b06:	4a88      	ldr	r2, [pc, #544]	; (8001d28 <init_Hardware+0x2b8>)
 8001b08:	601a      	str	r2, [r3, #0]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinNumber		= PIN_12;
 8001b0a:	4b8a      	ldr	r3, [pc, #552]	; (8001d34 <init_Hardware+0x2c4>)
 8001b0c:	220c      	movs	r2, #12
 8001b0e:	711a      	strb	r2, [r3, #4]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFN;
 8001b10:	4b88      	ldr	r3, [pc, #544]	; (8001d34 <init_Hardware+0x2c4>)
 8001b12:	2202      	movs	r2, #2
 8001b14:	715a      	strb	r2, [r3, #5]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinAltFunMode = AF8;
 8001b16:	4b87      	ldr	r3, [pc, #540]	; (8001d34 <init_Hardware+0x2c4>)
 8001b18:	2208      	movs	r2, #8
 8001b1a:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerUSARTPINRX);
 8001b1c:	4885      	ldr	r0, [pc, #532]	; (8001d34 <init_Hardware+0x2c4>)
 8001b1e:	f000 faab 	bl	8002078 <GPIO_Config>

	// Para el USART 6
	USART6Comm.ptrUSARTx 					= USART6;
 8001b22:	4b85      	ldr	r3, [pc, #532]	; (8001d38 <init_Hardware+0x2c8>)
 8001b24:	4a85      	ldr	r2, [pc, #532]	; (8001d3c <init_Hardware+0x2cc>)
 8001b26:	601a      	str	r2, [r3, #0]
	USART6Comm.USART_Config.USART_baudrate 	= USART_BAUDRATE_115200;
 8001b28:	4b83      	ldr	r3, [pc, #524]	; (8001d38 <init_Hardware+0x2c8>)
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	715a      	strb	r2, [r3, #5]
	USART6Comm.USART_Config.USART_datasize 	= USART_DATASIZE_8BIT;
 8001b2e:	4b82      	ldr	r3, [pc, #520]	; (8001d38 <init_Hardware+0x2c8>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	719a      	strb	r2, [r3, #6]
	USART6Comm.USART_Config.USART_parity 	= USART_PARITY_NONE;
 8001b34:	4b80      	ldr	r3, [pc, #512]	; (8001d38 <init_Hardware+0x2c8>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	71da      	strb	r2, [r3, #7]
	USART6Comm.USART_Config.USART_mode 		= USART_MODE_RXTX;
 8001b3a:	4b7f      	ldr	r3, [pc, #508]	; (8001d38 <init_Hardware+0x2c8>)
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	711a      	strb	r2, [r3, #4]
	USART6Comm.USART_Config.USART_stopbits 	= USART_STOPBIT_1;
 8001b40:	4b7d      	ldr	r3, [pc, #500]	; (8001d38 <init_Hardware+0x2c8>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	721a      	strb	r2, [r3, #8]
	USART6Comm.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;
 8001b46:	4b7c      	ldr	r3, [pc, #496]	; (8001d38 <init_Hardware+0x2c8>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	725a      	strb	r2, [r3, #9]

	// Se carga lo hecho sobre el USART
	USART_Config(&USART6Comm);
 8001b4c:	487a      	ldr	r0, [pc, #488]	; (8001d38 <init_Hardware+0x2c8>)
 8001b4e:	f001 f8a1 	bl	8002c94 <USART_Config>

	//Configuración I2C
	// Para el acelerómetro ADXL-345
	SCL.pGPIOx                                    = GPIOB;
 8001b52:	4b7b      	ldr	r3, [pc, #492]	; (8001d40 <init_Hardware+0x2d0>)
 8001b54:	4a7b      	ldr	r2, [pc, #492]	; (8001d44 <init_Hardware+0x2d4>)
 8001b56:	601a      	str	r2, [r3, #0]
	SCL.GPIO_PinConfig.GPIO_PinNumber             = PIN_8;
 8001b58:	4b79      	ldr	r3, [pc, #484]	; (8001d40 <init_Hardware+0x2d0>)
 8001b5a:	2208      	movs	r2, #8
 8001b5c:	711a      	strb	r2, [r3, #4]
	SCL.GPIO_PinConfig.GPIO_PinMode               = GPIO_MODE_ALTFN;
 8001b5e:	4b78      	ldr	r3, [pc, #480]	; (8001d40 <init_Hardware+0x2d0>)
 8001b60:	2202      	movs	r2, #2
 8001b62:	715a      	strb	r2, [r3, #5]
	SCL.GPIO_PinConfig.GPIO_PinOPType             = GPIO_OTYPE_OPENDRAIN;
 8001b64:	4b76      	ldr	r3, [pc, #472]	; (8001d40 <init_Hardware+0x2d0>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	721a      	strb	r2, [r3, #8]
	SCL.GPIO_PinConfig.GPIO_PinPuPdControl        = GPIO_PUPDR_NOTHING;
 8001b6a:	4b75      	ldr	r3, [pc, #468]	; (8001d40 <init_Hardware+0x2d0>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	71da      	strb	r2, [r3, #7]
	SCL.GPIO_PinConfig.GPIO_PinSpeed              = GPIO_OSPEED_FAST;
 8001b70:	4b73      	ldr	r3, [pc, #460]	; (8001d40 <init_Hardware+0x2d0>)
 8001b72:	2202      	movs	r2, #2
 8001b74:	719a      	strb	r2, [r3, #6]
	SCL.GPIO_PinConfig.GPIO_PinAltFunMode         = AF4;
 8001b76:	4b72      	ldr	r3, [pc, #456]	; (8001d40 <init_Hardware+0x2d0>)
 8001b78:	2204      	movs	r2, #4
 8001b7a:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&SCL);
 8001b7c:	4870      	ldr	r0, [pc, #448]	; (8001d40 <init_Hardware+0x2d0>)
 8001b7e:	f000 fa7b 	bl	8002078 <GPIO_Config>
	// SDA pin del ADXL-345
	SDA.pGPIOx                                    = GPIOB;
 8001b82:	4b71      	ldr	r3, [pc, #452]	; (8001d48 <init_Hardware+0x2d8>)
 8001b84:	4a6f      	ldr	r2, [pc, #444]	; (8001d44 <init_Hardware+0x2d4>)
 8001b86:	601a      	str	r2, [r3, #0]
	SDA.GPIO_PinConfig.GPIO_PinNumber             = PIN_9;
 8001b88:	4b6f      	ldr	r3, [pc, #444]	; (8001d48 <init_Hardware+0x2d8>)
 8001b8a:	2209      	movs	r2, #9
 8001b8c:	711a      	strb	r2, [r3, #4]
	SDA.GPIO_PinConfig.GPIO_PinMode               = GPIO_MODE_ALTFN;
 8001b8e:	4b6e      	ldr	r3, [pc, #440]	; (8001d48 <init_Hardware+0x2d8>)
 8001b90:	2202      	movs	r2, #2
 8001b92:	715a      	strb	r2, [r3, #5]
	SDA.GPIO_PinConfig.GPIO_PinOPType             = GPIO_OTYPE_OPENDRAIN;
 8001b94:	4b6c      	ldr	r3, [pc, #432]	; (8001d48 <init_Hardware+0x2d8>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	721a      	strb	r2, [r3, #8]
	SDA.GPIO_PinConfig.GPIO_PinPuPdControl        = GPIO_PUPDR_NOTHING;
 8001b9a:	4b6b      	ldr	r3, [pc, #428]	; (8001d48 <init_Hardware+0x2d8>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	71da      	strb	r2, [r3, #7]
	SDA.GPIO_PinConfig.GPIO_PinSpeed              = GPIO_OSPEED_FAST;
 8001ba0:	4b69      	ldr	r3, [pc, #420]	; (8001d48 <init_Hardware+0x2d8>)
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	719a      	strb	r2, [r3, #6]
	SDA.GPIO_PinConfig.GPIO_PinAltFunMode         = AF4;
 8001ba6:	4b68      	ldr	r3, [pc, #416]	; (8001d48 <init_Hardware+0x2d8>)
 8001ba8:	2204      	movs	r2, #4
 8001baa:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&SDA);
 8001bac:	4866      	ldr	r0, [pc, #408]	; (8001d48 <init_Hardware+0x2d8>)
 8001bae:	f000 fa63 	bl	8002078 <GPIO_Config>
	// Se carga en el I2C.
	Acelerometer.ptrI2Cx                            = I2C1;
 8001bb2:	4b66      	ldr	r3, [pc, #408]	; (8001d4c <init_Hardware+0x2dc>)
 8001bb4:	4a66      	ldr	r2, [pc, #408]	; (8001d50 <init_Hardware+0x2e0>)
 8001bb6:	601a      	str	r2, [r3, #0]
	Acelerometer.modeI2C                            = I2C_MODE_FM;
 8001bb8:	4b64      	ldr	r3, [pc, #400]	; (8001d4c <init_Hardware+0x2dc>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	715a      	strb	r2, [r3, #5]
	Acelerometer.slaveAddress                       = ACCEL_ADDRESS;
 8001bbe:	4b63      	ldr	r3, [pc, #396]	; (8001d4c <init_Hardware+0x2dc>)
 8001bc0:	221d      	movs	r2, #29
 8001bc2:	711a      	strb	r2, [r3, #4]
	i2c_config(&Acelerometer);
 8001bc4:	4861      	ldr	r0, [pc, #388]	; (8001d4c <init_Hardware+0x2dc>)
 8001bc6:	f000 fbbf 	bl	8002348 <i2c_config>

	// Definición del timer para el muestreo de 1 KHz
	handlerTimer5.ptrTIMx							= TIM5;
 8001bca:	4b62      	ldr	r3, [pc, #392]	; (8001d54 <init_Hardware+0x2e4>)
 8001bcc:	4a62      	ldr	r2, [pc, #392]	; (8001d58 <init_Hardware+0x2e8>)
 8001bce:	601a      	str	r2, [r3, #0]
	handlerTimer5.TIMx_Config.TIMx_mode				= BTIMER_MODE_UP;
 8001bd0:	4b60      	ldr	r3, [pc, #384]	; (8001d54 <init_Hardware+0x2e4>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	711a      	strb	r2, [r3, #4]
	handlerTimer5.TIMx_Config.TIMx_speed			= BTIMER_SPEED_80MHz;
 8001bd6:	4b5f      	ldr	r3, [pc, #380]	; (8001d54 <init_Hardware+0x2e4>)
 8001bd8:	f641 72a4 	movw	r2, #8100	; 0x1fa4
 8001bdc:	609a      	str	r2, [r3, #8]
	handlerTimer5.TIMx_Config.TIMx_period			= 10;
 8001bde:	4b5d      	ldr	r3, [pc, #372]	; (8001d54 <init_Hardware+0x2e4>)
 8001be0:	220a      	movs	r2, #10
 8001be2:	60da      	str	r2, [r3, #12]
	handlerTimer5.TIMx_Config.TIMx_interruptEnable 	= BTIMER_INTERRUPT_ENABLE;
 8001be4:	4b5b      	ldr	r3, [pc, #364]	; (8001d54 <init_Hardware+0x2e4>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	741a      	strb	r2, [r3, #16]

	// Se carga lo hecho sobre el timer del muestreo.
	BasicTimer_Config(&handlerTimer5);
 8001bea:	485a      	ldr	r0, [pc, #360]	; (8001d54 <init_Hardware+0x2e4>)
 8001bec:	f000 f950 	bl	8001e90 <BasicTimer_Config>

	// Configuración para el PWM
	// Como son 3 señales, se tiene PWM_1, PWM_2 Y PWM_3.
	// Se multiplexa el timer 3, dado que cada uno tiene 4 canales de PWM.
	HandlerPWM_1.pGPIOx          					= GPIOC;
 8001bf0:	4b5a      	ldr	r3, [pc, #360]	; (8001d5c <init_Hardware+0x2ec>)
 8001bf2:	4a5b      	ldr	r2, [pc, #364]	; (8001d60 <init_Hardware+0x2f0>)
 8001bf4:	601a      	str	r2, [r3, #0]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinNumber  	= PIN_7;
 8001bf6:	4b59      	ldr	r3, [pc, #356]	; (8001d5c <init_Hardware+0x2ec>)
 8001bf8:	2207      	movs	r2, #7
 8001bfa:	711a      	strb	r2, [r3, #4]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8001bfc:	4b57      	ldr	r3, [pc, #348]	; (8001d5c <init_Hardware+0x2ec>)
 8001bfe:	2202      	movs	r2, #2
 8001c00:	715a      	strb	r2, [r3, #5]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8001c02:	4b56      	ldr	r3, [pc, #344]	; (8001d5c <init_Hardware+0x2ec>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	721a      	strb	r2, [r3, #8]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001c08:	4b54      	ldr	r3, [pc, #336]	; (8001d5c <init_Hardware+0x2ec>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	71da      	strb	r2, [r3, #7]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8001c0e:	4b53      	ldr	r3, [pc, #332]	; (8001d5c <init_Hardware+0x2ec>)
 8001c10:	2202      	movs	r2, #2
 8001c12:	719a      	strb	r2, [r3, #6]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001c14:	4b51      	ldr	r3, [pc, #324]	; (8001d5c <init_Hardware+0x2ec>)
 8001c16:	2202      	movs	r2, #2
 8001c18:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerPWM_1);
 8001c1a:	4850      	ldr	r0, [pc, #320]	; (8001d5c <init_Hardware+0x2ec>)
 8001c1c:	f000 fa2c 	bl	8002078 <GPIO_Config>

	handlerTIM3PWM_1.ptrTIMx           	  =   TIM3;
 8001c20:	4b50      	ldr	r3, [pc, #320]	; (8001d64 <init_Hardware+0x2f4>)
 8001c22:	4a51      	ldr	r2, [pc, #324]	; (8001d68 <init_Hardware+0x2f8>)
 8001c24:	601a      	str	r2, [r3, #0]
	handlerTIM3PWM_1.config.channel       =   PWM_CHANNEL_2;
 8001c26:	4b4f      	ldr	r3, [pc, #316]	; (8001d64 <init_Hardware+0x2f4>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	711a      	strb	r2, [r3, #4]
	handlerTIM3PWM_1.config.duttyCicle    =   1500;
 8001c2c:	4b4d      	ldr	r3, [pc, #308]	; (8001d64 <init_Hardware+0x2f4>)
 8001c2e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001c32:	81da      	strh	r2, [r3, #14]
	handlerTIM3PWM_1.config.periodo       =   20000;
 8001c34:	4b4b      	ldr	r3, [pc, #300]	; (8001d64 <init_Hardware+0x2f4>)
 8001c36:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001c3a:	819a      	strh	r2, [r3, #12]
	handlerTIM3PWM_1.config.prescaler     =   80;
 8001c3c:	4b49      	ldr	r3, [pc, #292]	; (8001d64 <init_Hardware+0x2f4>)
 8001c3e:	2250      	movs	r2, #80	; 0x50
 8001c40:	609a      	str	r2, [r3, #8]

	pwm_Config(&handlerTIM3PWM_1);
 8001c42:	4848      	ldr	r0, [pc, #288]	; (8001d64 <init_Hardware+0x2f4>)
 8001c44:	f000 fea0 	bl	8002988 <pwm_Config>

	enableOutput(&handlerTIM3PWM_1);
 8001c48:	4846      	ldr	r0, [pc, #280]	; (8001d64 <init_Hardware+0x2f4>)
 8001c4a:	f000 ff73 	bl	8002b34 <enableOutput>
	startPwmSignal(&handlerTIM3PWM_1);
 8001c4e:	4845      	ldr	r0, [pc, #276]	; (8001d64 <init_Hardware+0x2f4>)
 8001c50:	f000 ff5e 	bl	8002b10 <startPwmSignal>

	HandlerPWM_2.pGPIOx          					= GPIOC;
 8001c54:	4b45      	ldr	r3, [pc, #276]	; (8001d6c <init_Hardware+0x2fc>)
 8001c56:	4a42      	ldr	r2, [pc, #264]	; (8001d60 <init_Hardware+0x2f0>)
 8001c58:	601a      	str	r2, [r3, #0]
	HandlerPWM_2.GPIO_PinConfig.GPIO_PinNumber  	= PIN_8;
 8001c5a:	4b44      	ldr	r3, [pc, #272]	; (8001d6c <init_Hardware+0x2fc>)
 8001c5c:	2208      	movs	r2, #8
 8001c5e:	711a      	strb	r2, [r3, #4]
	HandlerPWM_2.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8001c60:	4b42      	ldr	r3, [pc, #264]	; (8001d6c <init_Hardware+0x2fc>)
 8001c62:	2202      	movs	r2, #2
 8001c64:	715a      	strb	r2, [r3, #5]
	HandlerPWM_2.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8001c66:	4b41      	ldr	r3, [pc, #260]	; (8001d6c <init_Hardware+0x2fc>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	721a      	strb	r2, [r3, #8]
	HandlerPWM_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001c6c:	4b3f      	ldr	r3, [pc, #252]	; (8001d6c <init_Hardware+0x2fc>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	71da      	strb	r2, [r3, #7]
	HandlerPWM_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8001c72:	4b3e      	ldr	r3, [pc, #248]	; (8001d6c <init_Hardware+0x2fc>)
 8001c74:	2202      	movs	r2, #2
 8001c76:	719a      	strb	r2, [r3, #6]
	HandlerPWM_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001c78:	4b3c      	ldr	r3, [pc, #240]	; (8001d6c <init_Hardware+0x2fc>)
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerPWM_2);
 8001c7e:	483b      	ldr	r0, [pc, #236]	; (8001d6c <init_Hardware+0x2fc>)
 8001c80:	f000 f9fa 	bl	8002078 <GPIO_Config>

	handlerTIM3PWM_2.ptrTIMx           	  =   TIM3;
 8001c84:	4b3a      	ldr	r3, [pc, #232]	; (8001d70 <init_Hardware+0x300>)
 8001c86:	4a38      	ldr	r2, [pc, #224]	; (8001d68 <init_Hardware+0x2f8>)
 8001c88:	601a      	str	r2, [r3, #0]
	handlerTIM3PWM_2.config.channel       =   PWM_CHANNEL_3;
 8001c8a:	4b39      	ldr	r3, [pc, #228]	; (8001d70 <init_Hardware+0x300>)
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	711a      	strb	r2, [r3, #4]
	handlerTIM3PWM_2.config.duttyCicle    =   1500;
 8001c90:	4b37      	ldr	r3, [pc, #220]	; (8001d70 <init_Hardware+0x300>)
 8001c92:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001c96:	81da      	strh	r2, [r3, #14]
	handlerTIM3PWM_2.config.periodo       =   20000;
 8001c98:	4b35      	ldr	r3, [pc, #212]	; (8001d70 <init_Hardware+0x300>)
 8001c9a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001c9e:	819a      	strh	r2, [r3, #12]
	handlerTIM3PWM_2.config.prescaler     =   80;
 8001ca0:	4b33      	ldr	r3, [pc, #204]	; (8001d70 <init_Hardware+0x300>)
 8001ca2:	2250      	movs	r2, #80	; 0x50
 8001ca4:	609a      	str	r2, [r3, #8]

	pwm_Config(&handlerTIM3PWM_2);
 8001ca6:	4832      	ldr	r0, [pc, #200]	; (8001d70 <init_Hardware+0x300>)
 8001ca8:	f000 fe6e 	bl	8002988 <pwm_Config>

	enableOutput(&handlerTIM3PWM_2);
 8001cac:	4830      	ldr	r0, [pc, #192]	; (8001d70 <init_Hardware+0x300>)
 8001cae:	f000 ff41 	bl	8002b34 <enableOutput>
	startPwmSignal(&handlerTIM3PWM_2);
 8001cb2:	482f      	ldr	r0, [pc, #188]	; (8001d70 <init_Hardware+0x300>)
 8001cb4:	f000 ff2c 	bl	8002b10 <startPwmSignal>

	HandlerPWM_3.pGPIOx          					= GPIOC;
 8001cb8:	4b2e      	ldr	r3, [pc, #184]	; (8001d74 <init_Hardware+0x304>)
 8001cba:	4a29      	ldr	r2, [pc, #164]	; (8001d60 <init_Hardware+0x2f0>)
 8001cbc:	601a      	str	r2, [r3, #0]
	HandlerPWM_3.GPIO_PinConfig.GPIO_PinNumber  	= PIN_9;
 8001cbe:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <init_Hardware+0x304>)
 8001cc0:	2209      	movs	r2, #9
 8001cc2:	711a      	strb	r2, [r3, #4]
	HandlerPWM_3.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8001cc4:	4b2b      	ldr	r3, [pc, #172]	; (8001d74 <init_Hardware+0x304>)
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	715a      	strb	r2, [r3, #5]
	HandlerPWM_3.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8001cca:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <init_Hardware+0x304>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	721a      	strb	r2, [r3, #8]
	HandlerPWM_3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001cd0:	4b28      	ldr	r3, [pc, #160]	; (8001d74 <init_Hardware+0x304>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	71da      	strb	r2, [r3, #7]
	HandlerPWM_3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8001cd6:	4b27      	ldr	r3, [pc, #156]	; (8001d74 <init_Hardware+0x304>)
 8001cd8:	2202      	movs	r2, #2
 8001cda:	719a      	strb	r2, [r3, #6]
	HandlerPWM_3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001cdc:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <init_Hardware+0x304>)
 8001cde:	2202      	movs	r2, #2
 8001ce0:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerPWM_3);
 8001ce2:	4824      	ldr	r0, [pc, #144]	; (8001d74 <init_Hardware+0x304>)
 8001ce4:	f000 f9c8 	bl	8002078 <GPIO_Config>

	handlerTIM3PWM_3.ptrTIMx           	  =   TIM3;
 8001ce8:	4b23      	ldr	r3, [pc, #140]	; (8001d78 <init_Hardware+0x308>)
 8001cea:	4a1f      	ldr	r2, [pc, #124]	; (8001d68 <init_Hardware+0x2f8>)
 8001cec:	601a      	str	r2, [r3, #0]
	handlerTIM3PWM_3.config.channel       =   PWM_CHANNEL_4;
 8001cee:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <init_Hardware+0x308>)
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	711a      	strb	r2, [r3, #4]
	handlerTIM3PWM_3.config.duttyCicle    =   1500;
 8001cf4:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <init_Hardware+0x308>)
 8001cf6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001cfa:	81da      	strh	r2, [r3, #14]
	handlerTIM3PWM_3.config.periodo       =   20000;
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <init_Hardware+0x308>)
 8001cfe:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001d02:	819a      	strh	r2, [r3, #12]
	handlerTIM3PWM_3.config.prescaler     =   80;
 8001d04:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <init_Hardware+0x308>)
 8001d06:	2250      	movs	r2, #80	; 0x50
 8001d08:	609a      	str	r2, [r3, #8]

	pwm_Config(&handlerTIM3PWM_3);
 8001d0a:	481b      	ldr	r0, [pc, #108]	; (8001d78 <init_Hardware+0x308>)
 8001d0c:	f000 fe3c 	bl	8002988 <pwm_Config>

	enableOutput(&handlerTIM3PWM_3);
 8001d10:	4819      	ldr	r0, [pc, #100]	; (8001d78 <init_Hardware+0x308>)
 8001d12:	f000 ff0f 	bl	8002b34 <enableOutput>
	startPwmSignal(&handlerTIM3PWM_3);
 8001d16:	4818      	ldr	r0, [pc, #96]	; (8001d78 <init_Hardware+0x308>)
 8001d18:	f000 fefa 	bl	8002b10 <startPwmSignal>
}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000234 	.word	0x20000234
 8001d24:	20000238 	.word	0x20000238
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	200060d8 	.word	0x200060d8
 8001d30:	20000244 	.word	0x20000244
 8001d34:	20000250 	.word	0x20000250
 8001d38:	2000025c 	.word	0x2000025c
 8001d3c:	40011400 	.word	0x40011400
 8001d40:	200002fc 	.word	0x200002fc
 8001d44:	40020400 	.word	0x40020400
 8001d48:	200002f0 	.word	0x200002f0
 8001d4c:	20000308 	.word	0x20000308
 8001d50:	40005400 	.word	0x40005400
 8001d54:	200060ec 	.word	0x200060ec
 8001d58:	40000c00 	.word	0x40000c00
 8001d5c:	20006104 	.word	0x20006104
 8001d60:	40020800 	.word	0x40020800
 8001d64:	20006128 	.word	0x20006128
 8001d68:	40000400 	.word	0x40000400
 8001d6c:	20006110 	.word	0x20006110
 8001d70:	20006138 	.word	0x20006138
 8001d74:	2000611c 	.word	0x2000611c
 8001d78:	20006148 	.word	0x20006148

08001d7c <BasicTimer2_Callback>:


// Callback para el blinky pin.
void BasicTimer2_Callback(void){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handlerBlinkyPin);
 8001d80:	4805      	ldr	r0, [pc, #20]	; (8001d98 <BasicTimer2_Callback+0x1c>)
 8001d82:	f000 facb 	bl	800231c <GPIOxTooglePin>
	sendMSG++;
 8001d86:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <BasicTimer2_Callback+0x20>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <BasicTimer2_Callback+0x20>)
 8001d90:	701a      	strb	r2, [r3, #0]
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000238 	.word	0x20000238
 8001d9c:	200002ec 	.word	0x200002ec

08001da0 <BasicTimer5_Callback>:

// Callback para la bandera del muestreo de 1 KHz
void BasicTimer5_Callback(void){
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
	if(rxData == 'c'){
 8001da4:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <BasicTimer5_Callback+0x44>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b63      	cmp	r3, #99	; 0x63
 8001daa:	d103      	bne.n	8001db4 <BasicTimer5_Callback+0x14>
		flagMuestreo = 2;
 8001dac:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <BasicTimer5_Callback+0x48>)
 8001dae:	2202      	movs	r2, #2
 8001db0:	701a      	strb	r2, [r3, #0]
	}else if(rxData == 'v'){
		flagMuestreo = 4;
	}else{
		flagMuestreo = 1;
	}
}
 8001db2:	e012      	b.n	8001dda <BasicTimer5_Callback+0x3a>
	}else if(rxData == 'k'){
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <BasicTimer5_Callback+0x44>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b6b      	cmp	r3, #107	; 0x6b
 8001dba:	d103      	bne.n	8001dc4 <BasicTimer5_Callback+0x24>
		flagMuestreo = 3;
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <BasicTimer5_Callback+0x48>)
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	701a      	strb	r2, [r3, #0]
}
 8001dc2:	e00a      	b.n	8001dda <BasicTimer5_Callback+0x3a>
	}else if(rxData == 'v'){
 8001dc4:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <BasicTimer5_Callback+0x44>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b76      	cmp	r3, #118	; 0x76
 8001dca:	d103      	bne.n	8001dd4 <BasicTimer5_Callback+0x34>
		flagMuestreo = 4;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <BasicTimer5_Callback+0x48>)
 8001dce:	2204      	movs	r2, #4
 8001dd0:	701a      	strb	r2, [r3, #0]
}
 8001dd2:	e002      	b.n	8001dda <BasicTimer5_Callback+0x3a>
		flagMuestreo = 1;
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <BasicTimer5_Callback+0x48>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	701a      	strb	r2, [r3, #0]
}
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	20000311 	.word	0x20000311
 8001de8:	20006100 	.word	0x20006100

08001dec <usart6Rx_Callback>:
// Callback para el usart 6.
void usart6Rx_Callback(void){
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
	rxData = getRxData();
 8001df0:	f001 f986 	bl	8003100 <getRxData>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b01      	ldr	r3, [pc, #4]	; (8001e00 <usart6Rx_Callback+0x14>)
 8001dfa:	701a      	strb	r2, [r3, #0]
}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000311 	.word	0x20000311

08001e04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e04:	480d      	ldr	r0, [pc, #52]	; (8001e3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e06:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e08:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e0c:	480c      	ldr	r0, [pc, #48]	; (8001e40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e0e:	490d      	ldr	r1, [pc, #52]	; (8001e44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e10:	4a0d      	ldr	r2, [pc, #52]	; (8001e48 <LoopForever+0xe>)
  movs r3, #0
 8001e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e14:	e002      	b.n	8001e1c <LoopCopyDataInit>

08001e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e1a:	3304      	adds	r3, #4

08001e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e20:	d3f9      	bcc.n	8001e16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e22:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e24:	4c0a      	ldr	r4, [pc, #40]	; (8001e50 <LoopForever+0x16>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e28:	e001      	b.n	8001e2e <LoopFillZerobss>

08001e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e2c:	3204      	adds	r2, #4

08001e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e30:	d3fb      	bcc.n	8001e2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e32:	f001 f9a7 	bl	8003184 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e36:	f7ff f94b 	bl	80010d0 <main>

08001e3a <LoopForever>:

LoopForever:
    b LoopForever
 8001e3a:	e7fe      	b.n	8001e3a <LoopForever>
  ldr   r0, =_estack
 8001e3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e44:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8001e48:	080080a4 	.word	0x080080a4
  ldr r2, =_sbss
 8001e4c:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8001e50:	20006188 	.word	0x20006188

08001e54 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e54:	e7fe      	b.n	8001e54 <ADC_IRQHandler>
	...

08001e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	db0b      	blt.n	8001e82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	f003 021f 	and.w	r2, r3, #31
 8001e70:	4906      	ldr	r1, [pc, #24]	; (8001e8c <__NVIC_EnableIRQ+0x34>)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	2001      	movs	r0, #1
 8001e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	e000e100 	.word	0xe000e100

08001e90 <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrBTimerHandler->ptrTIMx;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a4e      	ldr	r2, [pc, #312]	; (8001fd8 <BasicTimer_Config+0x148>)
 8001e9e:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea0:	b672      	cpsid	i
}
 8001ea2:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();
	/* 1. Activar la señal de reloj del periférico requerido */
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eac:	d106      	bne.n	8001ebc <BasicTimer_Config+0x2c>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001eae:	4b4b      	ldr	r3, [pc, #300]	; (8001fdc <BasicTimer_Config+0x14c>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a4a      	ldr	r2, [pc, #296]	; (8001fdc <BasicTimer_Config+0x14c>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eba:	e024      	b.n	8001f06 <BasicTimer_Config+0x76>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a47      	ldr	r2, [pc, #284]	; (8001fe0 <BasicTimer_Config+0x150>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d106      	bne.n	8001ed4 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001ec6:	4b45      	ldr	r3, [pc, #276]	; (8001fdc <BasicTimer_Config+0x14c>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	4a44      	ldr	r2, [pc, #272]	; (8001fdc <BasicTimer_Config+0x14c>)
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed2:	e018      	b.n	8001f06 <BasicTimer_Config+0x76>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a42      	ldr	r2, [pc, #264]	; (8001fe4 <BasicTimer_Config+0x154>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d106      	bne.n	8001eec <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001ede:	4b3f      	ldr	r3, [pc, #252]	; (8001fdc <BasicTimer_Config+0x14c>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a3e      	ldr	r2, [pc, #248]	; (8001fdc <BasicTimer_Config+0x14c>)
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eea:	e00c      	b.n	8001f06 <BasicTimer_Config+0x76>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a3d      	ldr	r2, [pc, #244]	; (8001fe8 <BasicTimer_Config+0x158>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d106      	bne.n	8001f04 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001ef6:	4b39      	ldr	r3, [pc, #228]	; (8001fdc <BasicTimer_Config+0x14c>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	4a38      	ldr	r2, [pc, #224]	; (8001fdc <BasicTimer_Config+0x14c>)
 8001efc:	f043 0308 	orr.w	r3, r3, #8
 8001f00:	6413      	str	r3, [r2, #64]	; 0x40
 8001f02:	e000      	b.n	8001f06 <BasicTimer_Config+0x76>
	}

	else{
		__NOP();
 8001f04:	bf00      	nop
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */
	// -1 porque el contador empieza en 0
	ptrBTimerHandler->ptrTIMx-> PSC = ptrBTimerHandler ->TIMx_Config.TIMx_speed - 1;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	3a01      	subs	r2, #1
 8001f10:	629a      	str	r2, [r3, #40]	; 0x28

	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	791b      	ldrb	r3, [r3, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d112      	bne.n	8001f40 <BasicTimer_Config+0xb0>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Necesitamos poner la direccion en 0 para que cuente hacia arria TIM_CR1_DIR = 1, entonces
		// lo negamos y hacemos una AND con el valor actual.
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0210 	bic.w	r2, r2, #16
 8001f28:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	3a01      	subs	r2, #1
 8001f34:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24
 8001f3e:	e00d      	b.n	8001f5c <BasicTimer_Config+0xcc>

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		// Cuando CR1 = 1 es descendente
		ptrBTimerHandler->ptrTIMx->CR1 = TIM_CR1_DIR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2210      	movs	r2, #16
 8001f46:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		ptrBTimerHandler-> ptrTIMx->ARR = 0;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	3a01      	subs	r2, #1
 8001f5a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0201 	orr.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	// El registro encargado de la interrupcion es el UIE

	// Modificar con el ciclo If
	ptrBTimerHandler->ptrTIMx->DIER |= ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable; //TIM_DIER_UIE
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	7c1b      	ldrb	r3, [r3, #16]
 8001f76:	4619      	mov	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f88:	d103      	bne.n	8001f92 <BasicTimer_Config+0x102>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8001f8a:	201c      	movs	r0, #28
 8001f8c:	f7ff ff64 	bl	8001e58 <__NVIC_EnableIRQ>
 8001f90:	e01b      	b.n	8001fca <BasicTimer_Config+0x13a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a12      	ldr	r2, [pc, #72]	; (8001fe0 <BasicTimer_Config+0x150>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d103      	bne.n	8001fa4 <BasicTimer_Config+0x114>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8001f9c:	201d      	movs	r0, #29
 8001f9e:	f7ff ff5b 	bl	8001e58 <__NVIC_EnableIRQ>
 8001fa2:	e012      	b.n	8001fca <BasicTimer_Config+0x13a>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0e      	ldr	r2, [pc, #56]	; (8001fe4 <BasicTimer_Config+0x154>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d103      	bne.n	8001fb6 <BasicTimer_Config+0x126>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8001fae:	201e      	movs	r0, #30
 8001fb0:	f7ff ff52 	bl	8001e58 <__NVIC_EnableIRQ>
 8001fb4:	e009      	b.n	8001fca <BasicTimer_Config+0x13a>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a0b      	ldr	r2, [pc, #44]	; (8001fe8 <BasicTimer_Config+0x158>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d103      	bne.n	8001fc8 <BasicTimer_Config+0x138>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8001fc0:	2032      	movs	r0, #50	; 0x32
 8001fc2:	f7ff ff49 	bl	8001e58 <__NVIC_EnableIRQ>
 8001fc6:	e000      	b.n	8001fca <BasicTimer_Config+0x13a>
	}

	else{
		__NOP();
 8001fc8:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8001fca:	b662      	cpsie	i
}
 8001fcc:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	2000616c 	.word	0x2000616c
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40000400 	.word	0x40000400
 8001fe4:	40000800 	.word	0x40000800
 8001fe8:	40000c00 	.word	0x40000c00

08001fec <BasicTimer3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer3_Callback(void){
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001ff0:	bf00      	nop
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr

08001ffa <BasicTimer4_Callback>:
__attribute__((weak)) void BasicTimer4_Callback(void){
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001ffe:	bf00      	nop
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM2->SR &= ~TIM_SR_UIF;
 800200c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002016:	f023 0301 	bic.w	r3, r3, #1
 800201a:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer2_Callback();
 800201c:	f7ff feae 	bl	8001d7c <BasicTimer2_Callback>
}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}

08002024 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM3->SR &= ~TIM_SR_UIF;
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <TIM3_IRQHandler+0x18>)
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	4a03      	ldr	r2, [pc, #12]	; (800203c <TIM3_IRQHandler+0x18>)
 800202e:	f023 0301 	bic.w	r3, r3, #1
 8002032:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer3_Callback();
 8002034:	f7ff ffda 	bl	8001fec <BasicTimer3_Callback>
}
 8002038:	bf00      	nop
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40000400 	.word	0x40000400

08002040 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM4->SR &= ~TIM_SR_UIF;
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <TIM4_IRQHandler+0x18>)
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	4a03      	ldr	r2, [pc, #12]	; (8002058 <TIM4_IRQHandler+0x18>)
 800204a:	f023 0301 	bic.w	r3, r3, #1
 800204e:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer4_Callback();
 8002050:	f7ff ffd3 	bl	8001ffa <BasicTimer4_Callback>
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40000800 	.word	0x40000800

0800205c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM5->SR &= ~TIM_SR_UIF;
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <TIM5_IRQHandler+0x18>)
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	4a03      	ldr	r2, [pc, #12]	; (8002074 <TIM5_IRQHandler+0x18>)
 8002066:	f023 0301 	bic.w	r3, r3, #1
 800206a:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer5_Callback();
 800206c:	f7ff fe98 	bl	8001da0 <BasicTimer5_Callback>
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40000c00 	.word	0x40000c00

08002078 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemento "activar el periferico o activar la señal de reloj del periferico)
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]

	// 1)Activar el periferico
	//verificamos para GPIOA
	if(pGPIOHandler->pGPIOx == GPIOA){
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a87      	ldr	r2, [pc, #540]	; (80022ac <GPIO_Config+0x234>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d106      	bne.n	80020a0 <GPIO_Config+0x28>
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 8002092:	4b87      	ldr	r3, [pc, #540]	; (80022b0 <GPIO_Config+0x238>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a86      	ldr	r2, [pc, #536]	; (80022b0 <GPIO_Config+0x238>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	e03a      	b.n	8002116 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx == GPIOB){
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a83      	ldr	r2, [pc, #524]	; (80022b4 <GPIO_Config+0x23c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d106      	bne.n	80020b8 <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 80020aa:	4b81      	ldr	r3, [pc, #516]	; (80022b0 <GPIO_Config+0x238>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a80      	ldr	r2, [pc, #512]	; (80022b0 <GPIO_Config+0x238>)
 80020b0:	f043 0302 	orr.w	r3, r3, #2
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	e02e      	b.n	8002116 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if(pGPIOHandler->pGPIOx == GPIOC){
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a7e      	ldr	r2, [pc, #504]	; (80022b8 <GPIO_Config+0x240>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d106      	bne.n	80020d0 <GPIO_Config+0x58>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 80020c2:	4b7b      	ldr	r3, [pc, #492]	; (80022b0 <GPIO_Config+0x238>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a7a      	ldr	r2, [pc, #488]	; (80022b0 <GPIO_Config+0x238>)
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	e022      	b.n	8002116 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if(pGPIOHandler->pGPIOx == GPIOD){
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a79      	ldr	r2, [pc, #484]	; (80022bc <GPIO_Config+0x244>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d106      	bne.n	80020e8 <GPIO_Config+0x70>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 80020da:	4b75      	ldr	r3, [pc, #468]	; (80022b0 <GPIO_Config+0x238>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a74      	ldr	r2, [pc, #464]	; (80022b0 <GPIO_Config+0x238>)
 80020e0:	f043 0308 	orr.w	r3, r3, #8
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	e016      	b.n	8002116 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if(pGPIOHandler->pGPIOx == GPIOE){
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a74      	ldr	r2, [pc, #464]	; (80022c0 <GPIO_Config+0x248>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d106      	bne.n	8002100 <GPIO_Config+0x88>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 80020f2:	4b6f      	ldr	r3, [pc, #444]	; (80022b0 <GPIO_Config+0x238>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a6e      	ldr	r2, [pc, #440]	; (80022b0 <GPIO_Config+0x238>)
 80020f8:	f043 0310 	orr.w	r3, r3, #16
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	e00a      	b.n	8002116 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOH
	else if(pGPIOHandler->pGPIOx == GPIOH){
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a6f      	ldr	r2, [pc, #444]	; (80022c4 <GPIO_Config+0x24c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d105      	bne.n	8002116 <GPIO_Config+0x9e>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 800210a:	4b69      	ldr	r3, [pc, #420]	; (80022b0 <GPIO_Config+0x238>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a68      	ldr	r2, [pc, #416]	; (80022b0 <GPIO_Config+0x238>)
 8002110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
	// Despues de activado, podemos comenzar a configurar.

	// 2) COnfigurando el registro GPIOx_MODER
	// Acá estamos leyendo config, moviendo "PinNumber" veces hacia la izquierda
	// ese valor (shift left) y todo eso lo cargamos en la variable auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	795b      	ldrb	r3, [r3, #5]
 800211a:	461a      	mov	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	791b      	ldrb	r3, [r3, #4]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	60fb      	str	r3, [r7, #12]
	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro
	 * (debemos escribir 0b00) para lo cual aplicamos una mascara y una operación de
	 * bitwise AND
	 */
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	791b      	ldrb	r3, [r3, #4]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	2103      	movs	r1, #3
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	4619      	mov	r1, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	400a      	ands	r2, r1
 8002144:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6819      	ldr	r1, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	430a      	orrs	r2, r1
 8002154:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	7a1b      	ldrb	r3, [r3, #8]
 800215a:	461a      	mov	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	791b      	ldrb	r3, [r3, #4]
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	791b      	ldrb	r3, [r3, #4]
 8002170:	4619      	mov	r1, r3
 8002172:	2301      	movs	r3, #1
 8002174:	408b      	lsls	r3, r1
 8002176:	43db      	mvns	r3, r3
 8002178:	4619      	mov	r1, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	400a      	ands	r2, r1
 8002180:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6859      	ldr	r1, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	430a      	orrs	r2, r1
 8002190:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	799b      	ldrb	r3, [r3, #6]
 8002196:	461a      	mov	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	791b      	ldrb	r3, [r3, #4]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0B11 << 2 *pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	791b      	ldrb	r3, [r3, #4]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	2103      	movs	r1, #3
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	4619      	mov	r1, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	400a      	ands	r2, r1
 80021c0:	609a      	str	r2, [r3, #8]

	//cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6899      	ldr	r1, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull up pull down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	79db      	ldrb	r3, [r3, #7]
 80021d6:	461a      	mov	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	791b      	ldrb	r3, [r3, #4]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	791b      	ldrb	r3, [r3, #4]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	2103      	movs	r1, #3
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	4619      	mov	r1, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	400a      	ands	r2, r1
 8002200:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68d9      	ldr	r1, [r3, #12]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	430a      	orrs	r2, r1
 8002210:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas.. se vera luego
	if (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	795b      	ldrb	r3, [r3, #5]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d143      	bne.n	80022a2 <GPIO_Config+0x22a>

		//Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	791b      	ldrb	r3, [r3, #4]
 800221e:	2b07      	cmp	r3, #7
 8002220:	d81f      	bhi.n	8002262 <GPIO_Config+0x1ea>
			//Estamos en el registro AGRL, que controla los piner del pIN_0 AL PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	791b      	ldrb	r3, [r3, #4]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del tegistro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6a1a      	ldr	r2, [r3, #32]
 8002230:	210f      	movs	r1, #15
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	fa01 f303 	lsl.w	r3, r1, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	4619      	mov	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	400a      	ands	r2, r1
 8002242:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor confiurado en la posicon seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6a1a      	ldr	r2, [r3, #32]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	7a5b      	ldrb	r3, [r3, #9]
 800224e:	4619      	mov	r1, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	fa01 f303 	lsl.w	r3, r1, r3
 8002256:	4619      	mov	r1, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} //Fin del GPIO_Config
 8002260:	e01f      	b.n	80022a2 <GPIO_Config+0x22a>
			auxPosition = 4* (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber -8);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	791b      	ldrb	r3, [r3, #4]
 8002266:	3b08      	subs	r3, #8
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002272:	210f      	movs	r1, #15
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	fa01 f303 	lsl.w	r3, r1, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	4619      	mov	r1, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	400a      	ands	r2, r1
 8002284:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	7a5b      	ldrb	r3, [r3, #9]
 8002290:	4619      	mov	r1, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	fa01 f303 	lsl.w	r3, r1, r3
 8002298:	4619      	mov	r1, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24
} //Fin del GPIO_Config
 80022a2:	bf00      	nop
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr
 80022ac:	40020000 	.word	0x40020000
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40021c00 	.word	0x40021c00

080022c8 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 *
 */
void GPIO_WritePin(GPIO_Handler_t *pPinHandler, uint8_t newState){
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->0DR &= ~(SET << pPinHandler ->GPIO_PinConfig.GPIO_PinNumber);
	if(newState == SET){
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d10d      	bne.n	80022f6 <GPIO_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699a      	ldr	r2, [r3, #24]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	791b      	ldrb	r3, [r3, #4]
 80022e4:	4619      	mov	r1, r3
 80022e6:	2301      	movs	r3, #1
 80022e8:	408b      	lsls	r3, r1
 80022ea:	4619      	mov	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	619a      	str	r2, [r3, #24]
	else{
		//Trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
	}

}
 80022f4:	e00d      	b.n	8002312 <GPIO_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699a      	ldr	r2, [r3, #24]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	791b      	ldrb	r3, [r3, #4]
 8002300:	3310      	adds	r3, #16
 8002302:	2101      	movs	r1, #1
 8002304:	fa01 f303 	lsl.w	r3, r1, r3
 8002308:	4619      	mov	r1, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	619a      	str	r2, [r3, #24]
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <GPIOxTooglePin>:
	pinValue &= mask;

	return pinValue;
}

void GPIOxTooglePin(GPIO_Handler_t *pPinHandler){
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR ^= (SET <<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695a      	ldr	r2, [r3, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	791b      	ldrb	r3, [r3, #4]
 800232e:	4619      	mov	r1, r3
 8002330:	2301      	movs	r3, #1
 8002332:	408b      	lsls	r3, r1
 8002334:	4619      	mov	r1, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	404a      	eors	r2, r1
 800233c:	615a      	str	r2, [r3, #20]
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <i2c_config>:
 *
 * Además, estos pines deben ser configurados como salidas open-drain y con las
 * resistencias en modo pull-up..
 */

void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	/* 1. Activamos la señal de reloj para el modulo I2C seleccionado */
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a45      	ldr	r2, [pc, #276]	; (800246c <i2c_config+0x124>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d106      	bne.n	8002368 <i2c_config+0x20>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800235a:	4b45      	ldr	r3, [pc, #276]	; (8002470 <i2c_config+0x128>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4a44      	ldr	r2, [pc, #272]	; (8002470 <i2c_config+0x128>)
 8002360:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002364:	6413      	str	r3, [r2, #64]	; 0x40
 8002366:	e016      	b.n	8002396 <i2c_config+0x4e>
	}
	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a41      	ldr	r2, [pc, #260]	; (8002474 <i2c_config+0x12c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d106      	bne.n	8002380 <i2c_config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8002372:	4b3f      	ldr	r3, [pc, #252]	; (8002470 <i2c_config+0x128>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	4a3e      	ldr	r2, [pc, #248]	; (8002470 <i2c_config+0x128>)
 8002378:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800237c:	6413      	str	r3, [r2, #64]	; 0x40
 800237e:	e00a      	b.n	8002396 <i2c_config+0x4e>
	}
	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a3c      	ldr	r2, [pc, #240]	; (8002478 <i2c_config+0x130>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d105      	bne.n	8002396 <i2c_config+0x4e>
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 800238a:	4b39      	ldr	r3, [pc, #228]	; (8002470 <i2c_config+0x128>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	4a38      	ldr	r2, [pc, #224]	; (8002470 <i2c_config+0x128>)
 8002390:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002394:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023a4:	601a      	str	r2, [r3, #0]
	__NOP();
 80023a6:	bf00      	nop
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_SWRST;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023b6:	601a      	str	r2, [r3, #0]

	/* 3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C
	 */
	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos); // Borramos la configuración previa
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80023c6:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_100_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);// Seleccionamos 80 MHz
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 80023d6:	605a      	str	r2, [r3, #4]
	/* 4. Configuramos el modo I2C en el que el sistema funciona
	 * En esta configuración se incluye también la configuración del reloj
	 * y el tiempo maximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los registros en 0
	 */
	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2200      	movs	r2, #0
 80023de:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2200      	movs	r2, #0
 80023e6:	621a      	str	r2, [r3, #32]

	if (ptrHandlerI2C->modeI2C == I2C_MODE_SM){
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	795b      	ldrb	r3, [r3, #5]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d118      	bne.n	8002422 <i2c_config+0xda>
		// Estamos en modo "standar" (SM mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~I2C_CCR_FS;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	69da      	ldr	r2, [r3, #28]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023fe:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que se encarga de generar la señal del reloj
		ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_SM_SPEED_100KHz << I2C_CCR_CCR_Pos);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	69da      	ldr	r2, [r3, #28]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
 800240e:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que controla el tiempo T-Rise maximo
		ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6a1a      	ldr	r2, [r3, #32]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 800241e:	621a      	str	r2, [r3, #32]
 8002420:	e017      	b.n	8002452 <i2c_config+0x10a>
	}
	else{
		// Estamos en modo "fast" (FM mode)
		// Seleccionamos el modo fast
		ptrHandlerI2C->ptrI2Cx->CCR &= I2C_CCR_FS;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	69da      	ldr	r2, [r3, #28]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002430:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que se encarga de generar la señal del reloj
		ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz << I2C_CCR_CCR_Pos);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	69da      	ldr	r2, [r3, #28]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 8002440:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que controla el tiempo T-Rise maximo
		ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6a1a      	ldr	r2, [r3, #32]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 020f 	orr.w	r2, r2, #15
 8002450:	621a      	str	r2, [r3, #32]
	}

	/* 5. Activamos el modulo I2C
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 0201 	orr.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr
 800246c:	40005400 	.word	0x40005400
 8002470:	40023800 	.word	0x40023800
 8002474:	40005800 	.word	0x40005800
 8002478:	40005c00 	.word	0x40005c00

0800247c <i2c_stopTransaction>:

/* 8. Generamos la condición de stop
 */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	/* 7. Generamos la condición de stop
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002492:	601a      	str	r2, [r3, #0]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr

0800249e <i2c_startTransaction>:
/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_CR2
 * 2. Generamos la señal de "start"
 * 2a. Esperamos a que la bandera del evento "start" se levante.
 * Mientras esperamos, el valor de SB es 0, entonces la negación (!) es 1
 */
void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_CR2
	 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80024a6:	e000      	b.n	80024aa <i2c_startTransaction+0xc>
		__NOP();
 80024a8:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f7      	bne.n	80024a8 <i2c_startTransaction+0xa>
	}

	/* 2. Generamos la señal de "start"
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024c6:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante.
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80024c8:	e000      	b.n	80024cc <i2c_startTransaction+0x2e>
		__NOP();
 80024ca:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f7      	beq.n	80024ca <i2c_startTransaction+0x2c>
	}
}
 80024da:	bf00      	nop
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr

080024e6 <i2c_reStartTransaction>:

/*
 */
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
	/* 2. Generamos la señal de "start"
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024fc:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante.
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80024fe:	e000      	b.n	8002502 <i2c_reStartTransaction+0x1c>
		__NOP();
 8002500:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f7      	beq.n	8002500 <i2c_reStartTransaction+0x1a>
	}
}
 8002510:	bf00      	nop
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <i2c_sendNoAck>:

/* 7a. Activamos la indicación para no-ACK (indicación para el Slave de terminar)
 */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
	/* Debemos escribir cero en la posición ACK del registro de control 1
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_ACK;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002532:	601a      	str	r2, [r3, #0]
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr

0800253e <i2c_sendSlaveAddressRW>:
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 800253e:	b480      	push	{r7}
 8002540:	b085      	sub	sp, #20
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	460b      	mov	r3, r1
 8002548:	70fb      	strb	r3, [r7, #3]
 800254a:	4613      	mov	r3, r2
 800254c:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar
	 */
	uint8_t auxByte = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la dirección del Slave y el bit que indica que deseamos escribir un (0)
	 * (en el siguiente paso se envía la dirección de memoria que se desea escribir)
	 */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 8002552:	78fb      	ldrb	r3, [r7, #3]
 8002554:	005a      	lsls	r2, r3, #1
 8002556:	78bb      	ldrb	r3, [r7, #2]
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bandera del evento "addr" se levante
	 * (esto nos indica que la dirección fue enviada satisfactoriamente)
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8002560:	e000      	b.n	8002564 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 8002562:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f7      	beq.n	8002562 <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepción de ACK de la "addr",
	 * para lo cual debemos leer en secuencia primero el I2C_SR1 y luego el I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	73fb      	strb	r3, [r7, #15]
}
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	70fb      	strb	r3, [r7, #3]
	/* 4. Enviamos la dirección de memoria que deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	611a      	str	r2, [r3, #16]

	/* 4.1 Esperamos hasta que el byte sea transmitido
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 80025a0:	e000      	b.n	80025a4 <i2c_sendMemoryAddress+0x18>
		__NOP();
 80025a2:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f7      	beq.n	80025a2 <i2c_sendMemoryAddress+0x16>
	}
}
 80025b2:	bf00      	nop
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	460b      	mov	r3, r1
 80025c8:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 80025d2:	e000      	b.n	80025d6 <i2c_sendDataByte+0x18>
		__NOP();
 80025d4:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f7      	beq.n	80025d4 <i2c_sendDataByte+0x16>
	}
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <i2c_readDataByte>:

/**/
uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	/* 9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 80025f8:	e000      	b.n	80025fc <i2c_readDataByte+0xc>
		__NOP();
 80025fa:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f7      	beq.n	80025fa <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->dataI2C;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	799b      	ldrb	r3, [r3, #6]
}
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <i2c_readSingleRegister>:

/**/
uint8_t i2c_readSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead){
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	460b      	mov	r3, r1
 800262e:	70fb      	strb	r3, [r7, #3]
	/* 0. Creamos una variable auxiliar para recibir el dato que leemos */
	uint8_t auxRead = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	73fb      	strb	r3, [r7, #15]

	/* 1. Generamos la condición de start */
	i2c_startTransaction(ptrHandlerI2C);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff ff32 	bl	800249e <i2c_startTransaction>

	/* 2. Enviamos la dirección del esclavo y la indicación de ESCRIBIR */
	i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	791b      	ldrb	r3, [r3, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	4619      	mov	r1, r3
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ff7b 	bl	800253e <i2c_sendSlaveAddressRW>

	/* 3. Enviamos la dirección de memoria que deseamos leer */
	i2c_sendMemoryAddress(ptrHandlerI2C, regToRead);
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	4619      	mov	r1, r3
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff ff9d 	bl	800258c <i2c_sendMemoryAddress>

	/* 4. Creamos una condición de reStart */
	i2c_reStartTransaction(ptrHandlerI2C);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff ff47 	bl	80024e6 <i2c_reStartTransaction>

	/* 5. Enviamos la dirección del esclavo y la indicación de LEER */
	i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_READ_DATA);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	791b      	ldrb	r3, [r3, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	4619      	mov	r1, r3
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff ff6c 	bl	800253e <i2c_sendSlaveAddressRW>

	/* 6. Generamos la condición de NoACK, para que el master no funciona y el slave solo envie 1 byte */
	i2c_sendNoAck(ptrHandlerI2C);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff ff58 	bl	800251c <i2c_sendNoAck>

	/* 7. Generamos la señal de Stop, para que el slave se detenga después de 1 byte*/
	i2c_stopTransaction(ptrHandlerI2C);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff ff05 	bl	800247c <i2c_stopTransaction>

	/* 8. Leemos el dato que envia el esclavo */
	auxRead = i2c_readDataByte(ptrHandlerI2C);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff ffbc 	bl	80025f0 <i2c_readDataByte>
 8002678:	4603      	mov	r3, r0
 800267a:	73fb      	strb	r3, [r7, #15]

	return auxRead;
 800267c:	7bfb      	ldrb	r3, [r7, #15]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <i2c_writeSingleRegister>:

/**/
void i2c_writeSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead, uint8_t newValue){
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	460b      	mov	r3, r1
 8002690:	70fb      	strb	r3, [r7, #3]
 8002692:	4613      	mov	r3, r2
 8002694:	70bb      	strb	r3, [r7, #2]

	/* 1. Generamos la condición de Start*/
	i2c_startTransaction(ptrHandlerI2C);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff ff01 	bl	800249e <i2c_startTransaction>

	/* 2. Enviamos la diracción del esclavo y la indicación de ESCRIBIR */
	i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	791b      	ldrb	r3, [r3, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	4619      	mov	r1, r3
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff ff4a 	bl	800253e <i2c_sendSlaveAddressRW>

	/* 3. Enviamos la dirección de memoria que deseamos escribir*/
	i2c_sendMemoryAddress(ptrHandlerI2C, regToRead);
 80026aa:	78fb      	ldrb	r3, [r7, #3]
 80026ac:	4619      	mov	r1, r3
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff ff6c 	bl	800258c <i2c_sendMemoryAddress>

	/* 4. Enviamos el valor que deseamos escribir */
	i2c_sendDataByte(ptrHandlerI2C, newValue);
 80026b4:	78bb      	ldrb	r3, [r7, #2]
 80026b6:	4619      	mov	r1, r3
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff ff80 	bl	80025be <i2c_sendDataByte>

	/* 5. Generamos la condición de Stop, para que el slave se detenga después de un byte */
	i2c_stopTransaction(ptrHandlerI2C);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff fedc 	bl	800247c <i2c_stopTransaction>
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <PLL_Config>:
#include "PLLDriver.h"

uint32_t HSI_VALUE = 16000000;


void PLL_Config(PLL_Handler_t *ptrPLLHandler){
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]

	// Se selecciona HSI como reloj interno del PLL en vez de un oscilador.
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC);
 80026d4:	4b64      	ldr	r3, [pc, #400]	; (8002868 <PLL_Config+0x19c>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	4a63      	ldr	r2, [pc, #396]	; (8002868 <PLL_Config+0x19c>)
 80026da:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80026de:	6053      	str	r3, [r2, #4]

	// Se observa el valor del HSI RDY.
	while( !(RCC->CR & RCC_CR_HSIRDY) );
 80026e0:	bf00      	nop
 80026e2:	4b61      	ldr	r3, [pc, #388]	; (8002868 <PLL_Config+0x19c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f9      	beq.n	80026e2 <PLL_Config+0x16>

	// Se inicializa el power enable clock del APB1.
	RCC->APB1ENR |= RCC_APB1RSTR_PWRRST;
 80026ee:	4b5e      	ldr	r3, [pc, #376]	; (8002868 <PLL_Config+0x19c>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	4a5d      	ldr	r2, [pc, #372]	; (8002868 <PLL_Config+0x19c>)
 80026f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f8:	6413      	str	r3, [r2, #64]	; 0x40


	// Estas líneas adecúan el acceso a la memoria del microcontrolador
	// para comenzar a ejecutar las instrucciones. Ver ACR.
	FLASH->ACR |= 1<<8;
 80026fa:	4b5c      	ldr	r3, [pc, #368]	; (800286c <PLL_Config+0x1a0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a5b      	ldr	r2, [pc, #364]	; (800286c <PLL_Config+0x1a0>)
 8002700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002704:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= 1<<9;
 8002706:	4b59      	ldr	r3, [pc, #356]	; (800286c <PLL_Config+0x1a0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a58      	ldr	r2, [pc, #352]	; (800286c <PLL_Config+0x1a0>)
 800270c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002710:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= 1<<10;
 8002712:	4b56      	ldr	r3, [pc, #344]	; (800286c <PLL_Config+0x1a0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a55      	ldr	r2, [pc, #340]	; (800286c <PLL_Config+0x1a0>)
 8002718:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800271c:	6013      	str	r3, [r2, #0]
	 *  los voltajes de las distintas frecuencias que pueden llegar a configurarse.
	 *  Además, deben establecerse diferentes tiempos de espera para cada rango.
	 */

	// Voltajes para las frecuencias dentro de un rango máximo de 64 MHz.
	if(ptrPLLHandler->PLL_Config.PLL_voltage == VOLTAGE_64MHZ){
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10c      	bne.n	8002740 <PLL_Config+0x74>
		// Se toma 0 en el bit 15 y 1 en el bit 14 del PWR para la potencia.
		PWR->CR |= 01<<14;
 8002726:	4b52      	ldr	r3, [pc, #328]	; (8002870 <PLL_Config+0x1a4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a51      	ldr	r2, [pc, #324]	; (8002870 <PLL_Config+0x1a4>)
 800272c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002730:	6013      	str	r3, [r2, #0]

		// Se configura el tiempo de espera.
		FLASH->ACR |= 1<<0;
 8002732:	4b4e      	ldr	r3, [pc, #312]	; (800286c <PLL_Config+0x1a0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a4d      	ldr	r2, [pc, #308]	; (800286c <PLL_Config+0x1a0>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	e02d      	b.n	800279c <PLL_Config+0xd0>
	}
	else if(ptrPLLHandler->PLL_Config.PLL_voltage == VOLTAGE_84MHZ){
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d10c      	bne.n	8002762 <PLL_Config+0x96>
		// Se toma 1 en el bit 15 y 0 en el bit 14 del PWR para la potencia.
		PWR->CR |= 10<<14;
 8002748:	4b49      	ldr	r3, [pc, #292]	; (8002870 <PLL_Config+0x1a4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a48      	ldr	r2, [pc, #288]	; (8002870 <PLL_Config+0x1a4>)
 800274e:	f443 3320 	orr.w	r3, r3, #163840	; 0x28000
 8002752:	6013      	str	r3, [r2, #0]

		// Se configura el tiempo de espera.
		FLASH->ACR |= 3<<0;
 8002754:	4b45      	ldr	r3, [pc, #276]	; (800286c <PLL_Config+0x1a0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a44      	ldr	r2, [pc, #272]	; (800286c <PLL_Config+0x1a0>)
 800275a:	f043 0303 	orr.w	r3, r3, #3
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	e01c      	b.n	800279c <PLL_Config+0xd0>
	}
	else if(ptrPLLHandler->PLL_Config.PLL_voltage == VOLTAGE_100MHZ){
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d10c      	bne.n	8002784 <PLL_Config+0xb8>
		// Se toma 1 en el bit 15 y 1 en el bit 14 del PWR para la potencia.
		PWR->CR |= 11<<14;
 800276a:	4b41      	ldr	r3, [pc, #260]	; (8002870 <PLL_Config+0x1a4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a40      	ldr	r2, [pc, #256]	; (8002870 <PLL_Config+0x1a4>)
 8002770:	f443 3330 	orr.w	r3, r3, #180224	; 0x2c000
 8002774:	6013      	str	r3, [r2, #0]

		// Se configura el tiempo de espera.
		FLASH->ACR |= 5<<0;
 8002776:	4b3d      	ldr	r3, [pc, #244]	; (800286c <PLL_Config+0x1a0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a3c      	ldr	r2, [pc, #240]	; (800286c <PLL_Config+0x1a0>)
 800277c:	f043 0305 	orr.w	r3, r3, #5
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	e00b      	b.n	800279c <PLL_Config+0xd0>
	}
	else{
		// Implementamos la máxima frecuencia para el caso por defecto.
		PWR->CR |= 11<<14;
 8002784:	4b3a      	ldr	r3, [pc, #232]	; (8002870 <PLL_Config+0x1a4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a39      	ldr	r2, [pc, #228]	; (8002870 <PLL_Config+0x1a4>)
 800278a:	f443 3330 	orr.w	r3, r3, #180224	; 0x2c000
 800278e:	6013      	str	r3, [r2, #0]

		// Tiempo de espera.
		FLASH->ACR |= 5<<0;
 8002790:	4b36      	ldr	r3, [pc, #216]	; (800286c <PLL_Config+0x1a0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a35      	ldr	r2, [pc, #212]	; (800286c <PLL_Config+0x1a0>)
 8002796:	f043 0305 	orr.w	r3, r3, #5
 800279a:	6013      	str	r3, [r2, #0]
	}

	/*
	 * El preescaler null debe ser 1 para conseguir la máxima salida de frecuencia.
	 */
	RCC->CFGR |= 0001<<4;
 800279c:	4b32      	ldr	r3, [pc, #200]	; (8002868 <PLL_Config+0x19c>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	4a31      	ldr	r2, [pc, #196]	; (8002868 <PLL_Config+0x19c>)
 80027a2:	f043 0310 	orr.w	r3, r3, #16
 80027a6:	6093      	str	r3, [r2, #8]
	 * a 80 MHz que se encuentra evidentemente en un intervalo superior a este valor,
	 * se decide no incluir el primer preescaler que divide en 1 la frecuencia que se
	 * quiere implementar, sino comenzar con la división en 2,4,8,16...
	 */
	// Se divide en 2 el bus 1.
	RCC->CFGR |= (RCC_CFGR_PPRE1_DIV2);
 80027a8:	4b2f      	ldr	r3, [pc, #188]	; (8002868 <PLL_Config+0x19c>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	4a2e      	ldr	r2, [pc, #184]	; (8002868 <PLL_Config+0x19c>)
 80027ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027b2:	6093      	str	r3, [r2, #8]
	 * a 80 MHz, esta frecuencia se encuentra cómodamente ubicada antes de la
	 * frecuencia máxima del bus de datos, por tanto, el preescaler 0 que mantiene
	 * la frecuencia original, puede implementarse, dividiendo en 1.
	 */
	// Se divide en 1 el bus 2.
	RCC->CFGR |= (RCC_CFGR_PPRE2_DIV1);
 80027b4:	4b2c      	ldr	r3, [pc, #176]	; (8002868 <PLL_Config+0x19c>)
 80027b6:	4a2c      	ldr	r2, [pc, #176]	; (8002868 <PLL_Config+0x19c>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	6093      	str	r3, [r2, #8]

// Se debe configurar el sistema de manera que cuando la entrada del HSI
// sean 80 MHz, se mantenga.
	// La fuente de reloj del micro se configura sobre el HSI,
	RCC->PLLCFGR |= (0 << 22);
 80027bc:	4b2a      	ldr	r3, [pc, #168]	; (8002868 <PLL_Config+0x19c>)
 80027be:	4a2a      	ldr	r2, [pc, #168]	; (8002868 <PLL_Config+0x19c>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	6053      	str	r3, [r2, #4]

	// Se divide la entrada de frecuencia en 8, para obtener 2 MHz.
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM_4);
 80027c4:	4b28      	ldr	r3, [pc, #160]	; (8002868 <PLL_Config+0x19c>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	4a27      	ldr	r2, [pc, #156]	; (8002868 <PLL_Config+0x19c>)
 80027ca:	f023 0310 	bic.w	r3, r3, #16
 80027ce:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLM_3);
 80027d0:	4b25      	ldr	r3, [pc, #148]	; (8002868 <PLL_Config+0x19c>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	4a24      	ldr	r2, [pc, #144]	; (8002868 <PLL_Config+0x19c>)
 80027d6:	f043 0308 	orr.w	r3, r3, #8
 80027da:	6053      	str	r3, [r2, #4]

	// Se aplica una máscara un poco rudimentaria para garantizar la limpieza del
	// del registro.
	RCC->PLLCFGR &= 0b1111111111111000000000111111;
 80027dc:	4b22      	ldr	r3, [pc, #136]	; (8002868 <PLL_Config+0x19c>)
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	4921      	ldr	r1, [pc, #132]	; (8002868 <PLL_Config+0x19c>)
 80027e2:	4b24      	ldr	r3, [pc, #144]	; (8002874 <PLL_Config+0x1a8>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]
	// Se ecriben los diferentes valores de las frecuencias que se quieren multiplicar.
	/* NOTE que aquí es donde se escriben cada una de las frecuencias dentro del
	 * registro de 9 bits que se tiene dentro del registro PLLCFGR del RCC qur se deciden
	 * aleatoriamente a gusto del usuario dentro del intervalo de voltaje escogido.
	 */
	if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_80MHZ){
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	785b      	ldrb	r3, [r3, #1]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d10c      	bne.n	800280a <PLL_Config+0x13e>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_4);
 80027f0:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <PLL_Config+0x19c>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	4a1c      	ldr	r2, [pc, #112]	; (8002868 <PLL_Config+0x19c>)
 80027f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027fa:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 80027fc:	4b1a      	ldr	r3, [pc, #104]	; (8002868 <PLL_Config+0x19c>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4a19      	ldr	r2, [pc, #100]	; (8002868 <PLL_Config+0x19c>)
 8002802:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002806:	6053      	str	r3, [r2, #4]
 8002808:	e046      	b.n	8002898 <PLL_Config+0x1cc>
	}else if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_100MHZ){
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	785b      	ldrb	r3, [r3, #1]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d112      	bne.n	8002838 <PLL_Config+0x16c>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_2);
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <PLL_Config+0x19c>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4a14      	ldr	r2, [pc, #80]	; (8002868 <PLL_Config+0x19c>)
 8002818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281c:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_5);
 800281e:	4b12      	ldr	r3, [pc, #72]	; (8002868 <PLL_Config+0x19c>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4a11      	ldr	r2, [pc, #68]	; (8002868 <PLL_Config+0x19c>)
 8002824:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002828:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 800282a:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <PLL_Config+0x19c>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4a0e      	ldr	r2, [pc, #56]	; (8002868 <PLL_Config+0x19c>)
 8002830:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002834:	6053      	str	r3, [r2, #4]
 8002836:	e02f      	b.n	8002898 <PLL_Config+0x1cc>
	}else if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_70MHZ){
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	785b      	ldrb	r3, [r3, #1]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d11b      	bne.n	8002878 <PLL_Config+0x1ac>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_1);
 8002840:	4b09      	ldr	r3, [pc, #36]	; (8002868 <PLL_Config+0x19c>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	4a08      	ldr	r2, [pc, #32]	; (8002868 <PLL_Config+0x19c>)
 8002846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800284a:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_2);
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <PLL_Config+0x19c>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	4a05      	ldr	r2, [pc, #20]	; (8002868 <PLL_Config+0x19c>)
 8002852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002856:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 8002858:	4b03      	ldr	r3, [pc, #12]	; (8002868 <PLL_Config+0x19c>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4a02      	ldr	r2, [pc, #8]	; (8002868 <PLL_Config+0x19c>)
 800285e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002862:	6053      	str	r3, [r2, #4]
 8002864:	e018      	b.n	8002898 <PLL_Config+0x1cc>
 8002866:	bf00      	nop
 8002868:	40023800 	.word	0x40023800
 800286c:	40023c00 	.word	0x40023c00
 8002870:	40007000 	.word	0x40007000
 8002874:	0fff803f 	.word	0x0fff803f
	}else if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_65MHZ){
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	785b      	ldrb	r3, [r3, #1]
 800287c:	2b03      	cmp	r3, #3
 800287e:	d10b      	bne.n	8002898 <PLL_Config+0x1cc>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_0);
 8002880:	4b2f      	ldr	r3, [pc, #188]	; (8002940 <PLL_Config+0x274>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	4a2e      	ldr	r2, [pc, #184]	; (8002940 <PLL_Config+0x274>)
 8002886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800288a:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 800288c:	4b2c      	ldr	r3, [pc, #176]	; (8002940 <PLL_Config+0x274>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	4a2b      	ldr	r2, [pc, #172]	; (8002940 <PLL_Config+0x274>)
 8002892:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002896:	6053      	str	r3, [r2, #4]
	}
	// Se escoge como factor de reloj principal PLLP el número dos para obtener
	// la salida deseada en cada caso.
	RCC->PLLCFGR |= (00 << 16);
 8002898:	4b29      	ldr	r3, [pc, #164]	; (8002940 <PLL_Config+0x274>)
 800289a:	4a29      	ldr	r2, [pc, #164]	; (8002940 <PLL_Config+0x274>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	6053      	str	r3, [r2, #4]

	/*ACTIVACIÓN DEL PLL CON LOS PARÁMETROS ELEGIDOS ANTERIORMENTE. */
	// Se activa el PLL.
	RCC->CR |= (1<<24);
 80028a0:	4b27      	ldr	r3, [pc, #156]	; (8002940 <PLL_Config+0x274>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a26      	ldr	r2, [pc, #152]	; (8002940 <PLL_Config+0x274>)
 80028a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028aa:	6013      	str	r3, [r2, #0]
	// Se da un retardo que indica la activación del PLL.
	while (!(RCC->CR & (1<<25)));
 80028ac:	bf00      	nop
 80028ae:	4b24      	ldr	r3, [pc, #144]	; (8002940 <PLL_Config+0x274>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f9      	beq.n	80028ae <PLL_Config+0x1e2>
	// Se introduce un 2 dentro del clock source del PLL.
	RCC->CFGR |= (2<<0);
 80028ba:	4b21      	ldr	r3, [pc, #132]	; (8002940 <PLL_Config+0x274>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	4a20      	ldr	r2, [pc, #128]	; (8002940 <PLL_Config+0x274>)
 80028c0:	f043 0302 	orr.w	r3, r3, #2
 80028c4:	6093      	str	r3, [r2, #8]

	// Aquí se espera a que el PLL esté listo como reloj principal de la configuracion.
	while (!(RCC->CFGR & (2<<2)));
 80028c6:	bf00      	nop
 80028c8:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <PLL_Config+0x274>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0f9      	beq.n	80028c8 <PLL_Config+0x1fc>

	// Se selecciona la señal del PLL.
	RCC->CFGR |= (RCC_CFGR_MCO1_0);
 80028d4:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <PLL_Config+0x274>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	4a19      	ldr	r2, [pc, #100]	; (8002940 <PLL_Config+0x274>)
 80028da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028de:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (RCC_CFGR_MCO1_1);
 80028e0:	4b17      	ldr	r3, [pc, #92]	; (8002940 <PLL_Config+0x274>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	4a16      	ldr	r2, [pc, #88]	; (8002940 <PLL_Config+0x274>)
 80028e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028ea:	6093      	str	r3, [r2, #8]

	// Para un preescaler de 5 unidades.
	RCC->CFGR |=  (RCC_CFGR_MCO1PRE_0);
 80028ec:	4b14      	ldr	r3, [pc, #80]	; (8002940 <PLL_Config+0x274>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	4a13      	ldr	r2, [pc, #76]	; (8002940 <PLL_Config+0x274>)
 80028f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028f6:	6093      	str	r3, [r2, #8]
	RCC->CFGR |=  (RCC_CFGR_MCO1PRE_1);
 80028f8:	4b11      	ldr	r3, [pc, #68]	; (8002940 <PLL_Config+0x274>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	4a10      	ldr	r2, [pc, #64]	; (8002940 <PLL_Config+0x274>)
 80028fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002902:	6093      	str	r3, [r2, #8]
	RCC->CFGR |=  (RCC_CFGR_MCO1PRE_2);
 8002904:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <PLL_Config+0x274>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	4a0d      	ldr	r2, [pc, #52]	; (8002940 <PLL_Config+0x274>)
 800290a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800290e:	6093      	str	r3, [r2, #8]

	// Limpiamos el registo clock control register -> HSITRIM
	RCC->CR &= ~(RCC_CR_HSITRIM);
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <PLL_Config+0x274>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a0a      	ldr	r2, [pc, #40]	; (8002940 <PLL_Config+0x274>)
 8002916:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800291a:	6013      	str	r3, [r2, #0]

	/* En control register se indica el resultado de la ecuación:
	 * (F_deseada - F_real)/48 kHz.
	 * Para ajustar el reloj interno del MCU, se escribe 12 en HSITRIM.
	 */
	RCC->CR |= RCC_CR_HSITRIM_2;
 800291c:	4b08      	ldr	r3, [pc, #32]	; (8002940 <PLL_Config+0x274>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a07      	ldr	r2, [pc, #28]	; (8002940 <PLL_Config+0x274>)
 8002922:	f043 0320 	orr.w	r3, r3, #32
 8002926:	6013      	str	r3, [r2, #0]
	RCC->CR |= RCC_CR_HSITRIM_3;
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <PLL_Config+0x274>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a04      	ldr	r2, [pc, #16]	; (8002940 <PLL_Config+0x274>)
 800292e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002932:	6013      	str	r3, [r2, #0]

}// FIN DE LA FUNCIÓN DE CONFIGURACIÓN PARA DISTINTAS FRECUENCIAS.
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800

08002944 <getConfigPLL>:

// Función para saber el estado del PLL y así poder caracterizar lo demás.
uint32_t getConfigPLL(void){
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
	// Se buscan los valores que están definiendo los valores actuales del reloj PLL
	uint32_t PLLN = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 800294a:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <getConfigPLL+0x3c>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	099b      	lsrs	r3, r3, #6
 8002950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002954:	60fb      	str	r3, [r7, #12]
	uint32_t PLLM = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos;
 8002956:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <getConfigPLL+0x3c>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800295e:	60bb      	str	r3, [r7, #8]
	// Se hace la operación para saber el valor actual del reloj. (Asume PLLP =2)
	uint32_t clockMicro = (HSI_VALUE / PLLM) * PLLN / 2;
 8002960:	4b08      	ldr	r3, [pc, #32]	; (8002984 <getConfigPLL+0x40>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	fbb2 f3f3 	udiv	r3, r2, r3
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	fb02 f303 	mul.w	r3, r2, r3
 8002970:	085b      	lsrs	r3, r3, #1
 8002972:	607b      	str	r3, [r7, #4]
	return clockMicro;
 8002974:	687b      	ldr	r3, [r7, #4]

}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	40023800 	.word	0x40023800
 8002984:	20000040 	.word	0x20000040

08002988 <pwm_Config>:
 */

#include "PwmDriver.h"

/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if(ptrPwmHandler->ptrTIMx == TIM2){
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002998:	d106      	bne.n	80029a8 <pwm_Config+0x20>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800299a:	4b59      	ldr	r3, [pc, #356]	; (8002b00 <pwm_Config+0x178>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	4a58      	ldr	r2, [pc, #352]	; (8002b00 <pwm_Config+0x178>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	6413      	str	r3, [r2, #64]	; 0x40
 80029a6:	e024      	b.n	80029f2 <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a55      	ldr	r2, [pc, #340]	; (8002b04 <pwm_Config+0x17c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d106      	bne.n	80029c0 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80029b2:	4b53      	ldr	r3, [pc, #332]	; (8002b00 <pwm_Config+0x178>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	4a52      	ldr	r2, [pc, #328]	; (8002b00 <pwm_Config+0x178>)
 80029b8:	f043 0302 	orr.w	r3, r3, #2
 80029bc:	6413      	str	r3, [r2, #64]	; 0x40
 80029be:	e018      	b.n	80029f2 <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a50      	ldr	r2, [pc, #320]	; (8002b08 <pwm_Config+0x180>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d106      	bne.n	80029d8 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80029ca:	4b4d      	ldr	r3, [pc, #308]	; (8002b00 <pwm_Config+0x178>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	4a4c      	ldr	r2, [pc, #304]	; (8002b00 <pwm_Config+0x178>)
 80029d0:	f043 0304 	orr.w	r3, r3, #4
 80029d4:	6413      	str	r3, [r2, #64]	; 0x40
 80029d6:	e00c      	b.n	80029f2 <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a4b      	ldr	r2, [pc, #300]	; (8002b0c <pwm_Config+0x184>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d106      	bne.n	80029f0 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80029e2:	4b47      	ldr	r3, [pc, #284]	; (8002b00 <pwm_Config+0x178>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	4a46      	ldr	r2, [pc, #280]	; (8002b00 <pwm_Config+0x178>)
 80029e8:	f043 0308 	orr.w	r3, r3, #8
 80029ec:	6413      	str	r3, [r2, #64]	; 0x40
 80029ee:	e000      	b.n	80029f2 <pwm_Config+0x6a>
	}
	else{
		__NOP();
 80029f0:	bf00      	nop
	}

	/* 1. Cargamos la frecuencia deseada */
	setFrequency(ptrPwmHandler);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f8dc 	bl	8002bb0 <setFrequency>

	/* 2. Cargamos el valor del dutty-Cycle*/
	setDuttyCycle(ptrPwmHandler);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f8ed 	bl	8002bd8 <setDuttyCycle>

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0210 	bic.w	r2, r2, #16
 8002a0c:	601a      	str	r2, [r3, #0]
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	791b      	ldrb	r3, [r3, #4]
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d86e      	bhi.n	8002af4 <pwm_Config+0x16c>
 8002a16:	a201      	add	r2, pc, #4	; (adr r2, 8002a1c <pwm_Config+0x94>)
 8002a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1c:	08002a2d 	.word	0x08002a2d
 8002a20:	08002a5f 	.word	0x08002a5f
 8002a24:	08002a91 	.word	0x08002a91
 8002a28:	08002ac3 	.word	0x08002ac3
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~(TIM_CCMR1_CC1S);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0203 	bic.w	r2, r2, #3
 8002a3a:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC1M_Pos);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699a      	ldr	r2, [r3, #24]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002a4a:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699a      	ldr	r2, [r3, #24]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0208 	orr.w	r2, r2, #8
 8002a5a:	619a      	str	r2, [r3, #24]

		break;
 8002a5c:	e04b      	b.n	8002af6 <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~(TIM_CCMR1_CC2S);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	699a      	ldr	r2, [r3, #24]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a6c:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC2M_Pos);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	699a      	ldr	r2, [r3, #24]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8002a7c:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699a      	ldr	r2, [r3, #24]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a8c:	619a      	str	r2, [r3, #24]
		break;
 8002a8e:	e032      	b.n	8002af6 <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_3:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~(TIM_CCMR2_CC3S);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	69da      	ldr	r2, [r3, #28]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0203 	bic.w	r2, r2, #3
 8002a9e:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC3M_Pos);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	69da      	ldr	r2, [r3, #28]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002aae:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	69da      	ldr	r2, [r3, #28]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0208 	orr.w	r2, r2, #8
 8002abe:	61da      	str	r2, [r3, #28]
		break;
 8002ac0:	e019      	b.n	8002af6 <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_4:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~(TIM_CCMR2_CC4S);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	69da      	ldr	r2, [r3, #28]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ad0:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC4M_Pos);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	69da      	ldr	r2, [r3, #28]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8002ae0:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	69da      	ldr	r2, [r3, #28]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002af0:	61da      	str	r2, [r3, #28]
		break;
 8002af2:	e000      	b.n	8002af6 <pwm_Config+0x16e>
	}

	default:{
		break;
 8002af4:	bf00      	nop

	/* 6. Activamos la salida seleccionada */
	enableOutput(ptrPwmHandler);

	}// fin del switch-case
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40023800 	.word	0x40023800
 8002b04:	40000400 	.word	0x40000400
 8002b08:	40000800 	.word	0x40000800
 8002b0c:	40000c00 	.word	0x40000c00

08002b10 <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr
	...

08002b34 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
void enableOutput(PWM_Handler_t *ptrPwmHandler) {
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
	switch (ptrPwmHandler->config.channel) {
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	791b      	ldrb	r3, [r3, #4]
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d82f      	bhi.n	8002ba4 <enableOutput+0x70>
 8002b44:	a201      	add	r2, pc, #4	; (adr r2, 8002b4c <enableOutput+0x18>)
 8002b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4a:	bf00      	nop
 8002b4c:	08002b5d 	.word	0x08002b5d
 8002b50:	08002b6f 	.word	0x08002b6f
 8002b54:	08002b81 	.word	0x08002b81
 8002b58:	08002b93 	.word	0x08002b93
	case PWM_CHANNEL_1: {
		// Activamos la salida del canal 1
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6a1a      	ldr	r2, [r3, #32]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0201 	orr.w	r2, r2, #1
 8002b6a:	621a      	str	r2, [r3, #32]
		break;
 8002b6c:	e01b      	b.n	8002ba6 <enableOutput+0x72>
	}

	case PWM_CHANNEL_2: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6a1a      	ldr	r2, [r3, #32]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 0210 	orr.w	r2, r2, #16
 8002b7c:	621a      	str	r2, [r3, #32]
		break;
 8002b7e:	e012      	b.n	8002ba6 <enableOutput+0x72>
	}

	case PWM_CHANNEL_3: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6a1a      	ldr	r2, [r3, #32]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b8e:	621a      	str	r2, [r3, #32]

		break;
 8002b90:	e009      	b.n	8002ba6 <enableOutput+0x72>
	}

	case PWM_CHANNEL_4: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6a1a      	ldr	r2, [r3, #32]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ba0:	621a      	str	r2, [r3, #32]

		break;
 8002ba2:	e000      	b.n	8002ba6 <enableOutput+0x72>
	}

	default: {
		break;
 8002ba4:	bf00      	nop
	}
	}
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <setFrequency>:
/*
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler -1;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	3a01      	subs	r2, #1
 8002bc2:	629a      	str	r2, [r3, #40]	; 0x28

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.
	ptrPwmHandler->ptrTIMx->ARR = ptrPwmHandler->config.periodo;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	899a      	ldrh	r2, [r3, #12]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
    setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	791b      	ldrb	r3, [r3, #4]
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d823      	bhi.n	8002c30 <setDuttyCycle+0x58>
 8002be8:	a201      	add	r2, pc, #4	; (adr r2, 8002bf0 <setDuttyCycle+0x18>)
 8002bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bee:	bf00      	nop
 8002bf0:	08002c01 	.word	0x08002c01
 8002bf4:	08002c0d 	.word	0x08002c0d
 8002bf8:	08002c19 	.word	0x08002c19
 8002bfc:	08002c25 	.word	0x08002c25
	case PWM_CHANNEL_1:{
		ptrPwmHandler->ptrTIMx->CCR1 = ptrPwmHandler->config.duttyCicle;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	89da      	ldrh	r2, [r3, #14]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 8002c0a:	e012      	b.n	8002c32 <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_2:{
		ptrPwmHandler->ptrTIMx->CCR2 = ptrPwmHandler->config.duttyCicle;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	89da      	ldrh	r2, [r3, #14]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8002c16:	e00c      	b.n	8002c32 <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_3:{
		ptrPwmHandler->ptrTIMx->CCR3 = ptrPwmHandler->config.duttyCicle;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	89da      	ldrh	r2, [r3, #14]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8002c22:	e006      	b.n	8002c32 <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_4:{
		ptrPwmHandler->ptrTIMx->CCR4 = ptrPwmHandler->config.duttyCicle;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	89da      	ldrh	r2, [r3, #14]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8002c2e:	e000      	b.n	8002c32 <setDuttyCycle+0x5a>
	}

	default:{
		break;
 8002c30:	bf00      	nop
	}

	}// fin del switch-case

}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <updateDuttyCycle>:


/* Función para actualizar el Dutty, funciona de la mano con setDuttyCycle */
void updateDuttyCycle(PWM_Handler_t *ptrPwmHandler, uint16_t newDutty){
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	807b      	strh	r3, [r7, #2]
	// Actualizamos el registro que manipula el dutty
	ptrPwmHandler->config.duttyCicle = newDutty;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	887a      	ldrh	r2, [r7, #2]
 8002c4c:	81da      	strh	r2, [r3, #14]

	// Llamamos a la fucnión que cambia el dutty y cargamos el nuevo valor
	setDuttyCycle(ptrPwmHandler);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff ffc2 	bl	8002bd8 <setDuttyCycle>
}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <__NVIC_EnableIRQ>:
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	db0b      	blt.n	8002c86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	f003 021f 	and.w	r2, r3, #31
 8002c74:	4906      	ldr	r1, [pc, #24]	; (8002c90 <__NVIC_EnableIRQ+0x34>)
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr
 8002c90:	e000e100 	.word	0xe000e100

08002c94 <USART_Config>:
 */

// Esta variable es necesaria para las interrupciones del USART 2 y 6.
uint8_t auxRxData = 0;

void USART_Config(USART_Handler_t *ptrUsartHandler){
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c9c:	b672      	cpsid	i
}
 8002c9e:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a8c      	ldr	r2, [pc, #560]	; (8002ed8 <USART_Config+0x244>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d106      	bne.n	8002cb8 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8002caa:	4b8c      	ldr	r3, [pc, #560]	; (8002edc <USART_Config+0x248>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	4a8b      	ldr	r2, [pc, #556]	; (8002edc <USART_Config+0x248>)
 8002cb0:	f043 0310 	orr.w	r3, r3, #16
 8002cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cb6:	e016      	b.n	8002ce6 <USART_Config+0x52>
	}else if(ptrUsartHandler->ptrUSARTx == USART6){
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a88      	ldr	r2, [pc, #544]	; (8002ee0 <USART_Config+0x24c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d106      	bne.n	8002cd0 <USART_Config+0x3c>
		/*Configuramos el USART 6 que está en el mismo bus del USART 1 */
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8002cc2:	4b86      	ldr	r3, [pc, #536]	; (8002edc <USART_Config+0x248>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	4a85      	ldr	r2, [pc, #532]	; (8002edc <USART_Config+0x248>)
 8002cc8:	f043 0320 	orr.w	r3, r3, #32
 8002ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cce:	e00a      	b.n	8002ce6 <USART_Config+0x52>
		// Luego el USART 2 que está en el bus 1.
	}else if(ptrUsartHandler->ptrUSARTx == USART2){
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a83      	ldr	r2, [pc, #524]	; (8002ee4 <USART_Config+0x250>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d105      	bne.n	8002ce6 <USART_Config+0x52>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8002cda:	4b80      	ldr	r3, [pc, #512]	; (8002edc <USART_Config+0x248>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	4a7f      	ldr	r2, [pc, #508]	; (8002edc <USART_Config+0x248>)
 8002ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce4:	6413      	str	r3, [r2, #64]	; 0x40
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2200      	movs	r2, #0
 8002cec:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	79db      	ldrb	r3, [r3, #7]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d025      	beq.n	8002d4a <USART_Config+0xb6>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	79db      	ldrb	r3, [r3, #7]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d110      	bne.n	8002d28 <USART_Config+0x94>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d14:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d24:	60da      	str	r2, [r3, #12]
 8002d26:	e018      	b.n	8002d5a <USART_Config+0xc6>

		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d36:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d46:	60da      	str	r2, [r3, #12]
 8002d48:	e007      	b.n	8002d5a <USART_Config+0xc6>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d58:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize ==USART_DATASIZE_8BIT){
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	799b      	ldrb	r3, [r3, #6]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d115      	bne.n	8002d8e <USART_Config+0xfa>

	    	// Inicialmente debe corroborarse si se quiere o no la paridad.
	    	if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_NONE){
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	79db      	ldrb	r3, [r3, #7]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d108      	bne.n	8002d7c <USART_Config+0xe8>
	    		// Si se quieren datos de 8 bits.
	    		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d78:	60da      	str	r2, [r3, #12]
 8002d7a:	e010      	b.n	8002d9e <USART_Config+0x10a>
	    	}
	    	else{
	    		// Si la partidad esta activada, se agrega un BIT adicional.
	    		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d8a:	60da      	str	r2, [r3, #12]
 8002d8c:	e007      	b.n	8002d9e <USART_Config+0x10a>
	    	}
	    }
	    else{
	    	// Se configuran 9 bits para el tamaño.
	    	ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d9c:	60da      	str	r2, [r3, #12]
	    }

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	7a1b      	ldrb	r3, [r3, #8]
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d84e      	bhi.n	8002e44 <USART_Config+0x1b0>
 8002da6:	a201      	add	r2, pc, #4	; (adr r2, 8002dac <USART_Config+0x118>)
 8002da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dac:	08002dbd 	.word	0x08002dbd
 8002db0:	08002ddf 	.word	0x08002ddf
 8002db4:	08002e01 	.word	0x08002e01
 8002db8:	08002e23 	.word	0x08002e23
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691a      	ldr	r2, [r3, #16]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dca:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691a      	ldr	r2, [r3, #16]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dda:	611a      	str	r2, [r3, #16]
		break;
 8002ddc:	e043      	b.n	8002e66 <USART_Config+0x1d2>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002dec:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dfc:	611a      	str	r2, [r3, #16]
		break;
 8002dfe:	e032      	b.n	8002e66 <USART_Config+0x1d2>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e0e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e1e:	611a      	str	r2, [r3, #16]
		break;
 8002e20:	e021      	b.n	8002e66 <USART_Config+0x1d2>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e30:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e40:	611a      	str	r2, [r3, #16]
		break;
 8002e42:	e010      	b.n	8002e66 <USART_Config+0x1d2>
	}
	default: {
		// En el caso por defecto seleccionamos 1 bit de parada
		// Escriba acá su código
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	691a      	ldr	r2, [r3, #16]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e52:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691a      	ldr	r2, [r3, #16]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e62:	611a      	str	r2, [r3, #16]
		break;
 8002e64:	bf00      	nop
	 * decida utilizar el usuario. La función getConfig() retorna esta
	 * frecuencia en que se encuentra actualmente el reloj del sistema PLL,
	 * por tanto, se considera un condicional que incluye los cálculos para
	 * la frecuencia de 100 MHz y por defecto recurre a la frecuencia natural.
	 */
	if(actualFrecuency == 100000000){
 8002e66:	f7ff fd6d 	bl	8002944 <getConfigPLL>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	4a1e      	ldr	r2, [pc, #120]	; (8002ee8 <USART_Config+0x254>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d11d      	bne.n	8002eae <USART_Config+0x21a>
		// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
		if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	795b      	ldrb	r3, [r3, #5]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d105      	bne.n	8002e86 <USART_Config+0x1f2>
			// El valor a cargar es 651.041 -> Mantiza = 651,fraction = 0.041
			// Mantiza = 651 = 0x28b, fraction = 16 * 0.041 = 1
			// Valor a cargar 0x28B1
			// Configurando el Baudrate generator para una velocidad de 9600bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x28B1;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f642 02b1 	movw	r2, #10417	; 0x28b1
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	e03a      	b.n	8002efc <USART_Config+0x268>
		}

		else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	795b      	ldrb	r3, [r3, #5]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d105      	bne.n	8002e9a <USART_Config+0x206>
			// El valor a cargar es 325.520 -> Mantiza = 325,fraction = 0.520
			// Mantiza = 325 = 0x145, fraction = 16 * 0.520 = 8
			// Valor a cargar 0x1458
			ptrUsartHandler->ptrUSARTx->BRR = 0x1458;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f241 4258 	movw	r2, #5208	; 0x1458
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	e030      	b.n	8002efc <USART_Config+0x268>
		}

		else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	795b      	ldrb	r3, [r3, #5]
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d12c      	bne.n	8002efc <USART_Config+0x268>
			// El valor a cargar es 54.253 -> Mantiza = 54,fraction = 0.253
			// Mantiza = 54 = 0x36, fraction = 16 * 0.253 = 4.
			ptrUsartHandler->ptrUSARTx->BRR = 0x364;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f44f 7259 	mov.w	r2, #868	; 0x364
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	e026      	b.n	8002efc <USART_Config+0x268>
		}
	// Caso por defecto de 16 MHz.
	}else{
		// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
		if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	795b      	ldrb	r3, [r3, #5]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d105      	bne.n	8002ec2 <USART_Config+0x22e>
			// El valor a cargar es 104.1875 -> Mantiza = 104,fraction = 0.1875
			// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
			// Valor a cargar 0x0683
			// Configurando el Baudrate generator para una velocidad de 9600bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f240 6283 	movw	r2, #1667	; 0x683
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	e01c      	b.n	8002efc <USART_Config+0x268>
		}

		else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	795b      	ldrb	r3, [r3, #5]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d110      	bne.n	8002eec <USART_Config+0x258>
			// El valor a cargar es 52.0625 -> Mantiza = 52,fraction = 0.0625
			// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
			// Escriba acá su código y los comentarios que faltan
			// Valor a cargar 0x0341
			ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f240 3241 	movw	r2, #833	; 0x341
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	e012      	b.n	8002efc <USART_Config+0x268>
 8002ed6:	bf00      	nop
 8002ed8:	40011000 	.word	0x40011000
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	40011400 	.word	0x40011400
 8002ee4:	40004400 	.word	0x40004400
 8002ee8:	05f5e100 	.word	0x05f5e100
		}

		else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	795b      	ldrb	r3, [r3, #5]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d103      	bne.n	8002efc <USART_Config+0x268>
			// Escriba acá su código y los comentarios que faltan
			// El valor a cargar es 8.6875 -> Mantiza = 8,fraction = 0.6875
			// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11 = B.
			ptrUsartHandler->ptrUSARTx->BRR = 0x008B;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	228b      	movs	r2, #139	; 0x8b
 8002efa:	609a      	str	r2, [r3, #8]
		}
	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	791b      	ldrb	r3, [r3, #4]
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d847      	bhi.n	8002f94 <USART_Config+0x300>
 8002f04:	a201      	add	r2, pc, #4	; (adr r2, 8002f0c <USART_Config+0x278>)
 8002f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0a:	bf00      	nop
 8002f0c:	08002f1d 	.word	0x08002f1d
 8002f10:	08002f2f 	.word	0x08002f2f
 8002f14:	08002f41 	.word	0x08002f41
 8002f18:	08002f63 	.word	0x08002f63
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_TE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0208 	orr.w	r2, r2, #8
 8002f2a:	60da      	str	r2, [r3, #12]
		break;
 8002f2c:	e04b      	b.n	8002fc6 <USART_Config+0x332>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_RE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f042 0204 	orr.w	r2, r2, #4
 8002f3c:	60da      	str	r2, [r3, #12]
		break;
 8002f3e:	e042      	b.n	8002fc6 <USART_Config+0x332>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmision como recepcion
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_TE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0208 	orr.w	r2, r2, #8
 8002f4e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_RE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0204 	orr.w	r2, r2, #4
 8002f5e:	60da      	str	r2, [r3, #12]
		break;
 8002f60:	e031      	b.n	8002fc6 <USART_Config+0x332>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		// Escriba acá su código
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0204 	bic.w	r2, r2, #4
 8002f70:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0208 	bic.w	r2, r2, #8
 8002f80:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f90:	60da      	str	r2, [r3, #12]
		break;
 8002f92:	e018      	b.n	8002fc6 <USART_Config+0x332>
	}

	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0204 	bic.w	r2, r2, #4
 8002fa2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0208 	bic.w	r2, r2, #8
 8002fb2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fc2:	60da      	str	r2, [r3, #12]
		break;
 8002fc4:	bf00      	nop
	}
	}

	// 2.7 Activamos el módulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	791b      	ldrb	r3, [r3, #4]
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d007      	beq.n	8002fde <USART_Config+0x34a>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fdc:	60da      	str	r2, [r3, #12]
	}
	// Se verifica la activación de la interrupcion Rx
	if (ptrUsartHandler->ptrUSARTx == USART1){
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a28      	ldr	r2, [pc, #160]	; (8003084 <USART_Config+0x3f0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d03a      	beq.n	800305e <USART_Config+0x3ca>
	}

	/* 1.2 Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2) {
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a26      	ldr	r2, [pc, #152]	; (8003088 <USART_Config+0x3f4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d118      	bne.n	8003024 <USART_Config+0x390>
		if (ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE) {
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	7a5b      	ldrb	r3, [r3, #9]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d10b      	bne.n	8003012 <USART_Config+0x37e>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 0220 	orr.w	r2, r2, #32
 8003008:	60da      	str	r2, [r3, #12]
			NVIC_EnableIRQ(USART2_IRQn);
 800300a:	2026      	movs	r0, #38	; 0x26
 800300c:	f7ff fe26 	bl	8002c5c <__NVIC_EnableIRQ>
 8003010:	e025      	b.n	800305e <USART_Config+0x3ca>
		} else {
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0220 	bic.w	r2, r2, #32
 8003020:	60da      	str	r2, [r3, #12]
 8003022:	e01c      	b.n	800305e <USART_Config+0x3ca>
		}
	}

	/* 1.3 Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6) {
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a18      	ldr	r2, [pc, #96]	; (800308c <USART_Config+0x3f8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d117      	bne.n	800305e <USART_Config+0x3ca>
		if (ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE) {
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	7a5b      	ldrb	r3, [r3, #9]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d10b      	bne.n	800304e <USART_Config+0x3ba>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0220 	orr.w	r2, r2, #32
 8003044:	60da      	str	r2, [r3, #12]
			NVIC_EnableIRQ(USART6_IRQn);
 8003046:	2047      	movs	r0, #71	; 0x47
 8003048:	f7ff fe08 	bl	8002c5c <__NVIC_EnableIRQ>
 800304c:	e007      	b.n	800305e <USART_Config+0x3ca>
		} else {
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0220 	bic.w	r2, r2, #32
 800305c:	60da      	str	r2, [r3, #12]
		}
	}

	// 2.8 Activamos el módulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	791b      	ldrb	r3, [r3, #4]
 8003062:	2b03      	cmp	r3, #3
 8003064:	d007      	beq.n	8003076 <USART_Config+0x3e2>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003074:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8003076:	b662      	cpsie	i
}
 8003078:	bf00      	nop
	}

	// Activamos las interrupciones globales
	__enable_irq();
}
 800307a:	bf00      	nop
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40011000 	.word	0x40011000
 8003088:	40004400 	.word	0x40004400
 800308c:	40011400 	.word	0x40011400

08003090 <usart2Rx_Callback>:

/* Similar a como se hizo con las EXTI, se crean los callbacks para los USART */

__attribute__((weak)) void usart2Rx_Callback(void){
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the usart2Rx_Callback could be implemented in the main file
	   */
	__NOP();
 8003094:	bf00      	nop
}
 8003096:	bf00      	nop
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr

0800309e <writeChar>:
	   */
	__NOP();
}

/* funcion para escribir un solo char */
int writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80030a8:	e000      	b.n	80030ac <writeChar+0xe>
		__NOP();
 80030aa:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f7      	beq.n	80030aa <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	605a      	str	r2, [r3, #4]

	return dataToSend;
 80030c2:	683b      	ldr	r3, [r7, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr

080030ce <writeMsg>:

// función para escribir un mensaje
void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	6039      	str	r1, [r7, #0]
	while(*msgToSend != '\0'){
 80030d8:	e008      	b.n	80030ec <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	4619      	mov	r1, r3
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7ff ffdc 	bl	800309e <writeChar>
		msgToSend++;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	3301      	adds	r3, #1
 80030ea:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1f2      	bne.n	80030da <writeMsg+0xc>
	}
}
 80030f4:	bf00      	nop
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <getRxData>:

// función auxiliar
uint8_t getRxData(void){
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
	return auxRxData;
 8003104:	4b02      	ldr	r3, [pc, #8]	; (8003110 <getRxData+0x10>)
 8003106:	781b      	ldrb	r3, [r3, #0]
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr
 8003110:	20006170 	.word	0x20006170

08003114 <USART2_IRQHandler>:

/* INTERRUPCIONES DEL USART */
// Se debe crear una variable auxiliar para la lectura que se declara al inicio.

/* Para el USART 2 */
void USART2_IRQHandler(void){
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
	// Se evalúa si la interrupción que se dio es por RX
	if(USART2->SR & USART_SR_RXNE){
 8003118:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <USART2_IRQHandler+0x30>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00c      	beq.n	800313e <USART2_IRQHandler+0x2a>
		USART2->SR &= ~USART_SR_RXNE;
 8003124:	4b07      	ldr	r3, [pc, #28]	; (8003144 <USART2_IRQHandler+0x30>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a06      	ldr	r2, [pc, #24]	; (8003144 <USART2_IRQHandler+0x30>)
 800312a:	f023 0320 	bic.w	r3, r3, #32
 800312e:	6013      	str	r3, [r2, #0]
		auxRxData = (uint8_t) USART2->DR;
 8003130:	4b04      	ldr	r3, [pc, #16]	; (8003144 <USART2_IRQHandler+0x30>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	b2da      	uxtb	r2, r3
 8003136:	4b04      	ldr	r3, [pc, #16]	; (8003148 <USART2_IRQHandler+0x34>)
 8003138:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 800313a:	f7ff ffa9 	bl	8003090 <usart2Rx_Callback>
	}
}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40004400 	.word	0x40004400
 8003148:	20006170 	.word	0x20006170

0800314c <USART6_IRQHandler>:

/* Para el USART 6 */
void USART6_IRQHandler(void){
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
	// Evaluamos que la interrupción que se dio es por RX
	if(USART6->SR & USART_SR_RXNE){
 8003150:	4b0a      	ldr	r3, [pc, #40]	; (800317c <USART6_IRQHandler+0x30>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0320 	and.w	r3, r3, #32
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00c      	beq.n	8003176 <USART6_IRQHandler+0x2a>
		USART6->SR &= ~USART_SR_RXNE;
 800315c:	4b07      	ldr	r3, [pc, #28]	; (800317c <USART6_IRQHandler+0x30>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a06      	ldr	r2, [pc, #24]	; (800317c <USART6_IRQHandler+0x30>)
 8003162:	f023 0320 	bic.w	r3, r3, #32
 8003166:	6013      	str	r3, [r2, #0]
		auxRxData = (uint8_t) USART6->DR;
 8003168:	4b04      	ldr	r3, [pc, #16]	; (800317c <USART6_IRQHandler+0x30>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	b2da      	uxtb	r2, r3
 800316e:	4b04      	ldr	r3, [pc, #16]	; (8003180 <USART6_IRQHandler+0x34>)
 8003170:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 8003172:	f7fe fe3b 	bl	8001dec <usart6Rx_Callback>
	}
}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40011400 	.word	0x40011400
 8003180:	20006170 	.word	0x20006170

08003184 <__libc_init_array>:
 8003184:	b570      	push	{r4, r5, r6, lr}
 8003186:	4d0d      	ldr	r5, [pc, #52]	; (80031bc <__libc_init_array+0x38>)
 8003188:	4c0d      	ldr	r4, [pc, #52]	; (80031c0 <__libc_init_array+0x3c>)
 800318a:	1b64      	subs	r4, r4, r5
 800318c:	10a4      	asrs	r4, r4, #2
 800318e:	2600      	movs	r6, #0
 8003190:	42a6      	cmp	r6, r4
 8003192:	d109      	bne.n	80031a8 <__libc_init_array+0x24>
 8003194:	4d0b      	ldr	r5, [pc, #44]	; (80031c4 <__libc_init_array+0x40>)
 8003196:	4c0c      	ldr	r4, [pc, #48]	; (80031c8 <__libc_init_array+0x44>)
 8003198:	f004 fc8a 	bl	8007ab0 <_init>
 800319c:	1b64      	subs	r4, r4, r5
 800319e:	10a4      	asrs	r4, r4, #2
 80031a0:	2600      	movs	r6, #0
 80031a2:	42a6      	cmp	r6, r4
 80031a4:	d105      	bne.n	80031b2 <__libc_init_array+0x2e>
 80031a6:	bd70      	pop	{r4, r5, r6, pc}
 80031a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ac:	4798      	blx	r3
 80031ae:	3601      	adds	r6, #1
 80031b0:	e7ee      	b.n	8003190 <__libc_init_array+0xc>
 80031b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031b6:	4798      	blx	r3
 80031b8:	3601      	adds	r6, #1
 80031ba:	e7f2      	b.n	80031a2 <__libc_init_array+0x1e>
 80031bc:	0800809c 	.word	0x0800809c
 80031c0:	0800809c 	.word	0x0800809c
 80031c4:	0800809c 	.word	0x0800809c
 80031c8:	080080a0 	.word	0x080080a0

080031cc <memset>:
 80031cc:	4402      	add	r2, r0
 80031ce:	4603      	mov	r3, r0
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d100      	bne.n	80031d6 <memset+0xa>
 80031d4:	4770      	bx	lr
 80031d6:	f803 1b01 	strb.w	r1, [r3], #1
 80031da:	e7f9      	b.n	80031d0 <memset+0x4>

080031dc <__cvt>:
 80031dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031e0:	b088      	sub	sp, #32
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	461f      	mov	r7, r3
 80031e6:	4614      	mov	r4, r2
 80031e8:	bfb8      	it	lt
 80031ea:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80031ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80031f0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80031f2:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80031f6:	bfb6      	itet	lt
 80031f8:	461f      	movlt	r7, r3
 80031fa:	2300      	movge	r3, #0
 80031fc:	232d      	movlt	r3, #45	; 0x2d
 80031fe:	7013      	strb	r3, [r2, #0]
 8003200:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003202:	f023 0820 	bic.w	r8, r3, #32
 8003206:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800320a:	d005      	beq.n	8003218 <__cvt+0x3c>
 800320c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003210:	d100      	bne.n	8003214 <__cvt+0x38>
 8003212:	3501      	adds	r5, #1
 8003214:	2302      	movs	r3, #2
 8003216:	e000      	b.n	800321a <__cvt+0x3e>
 8003218:	2303      	movs	r3, #3
 800321a:	aa07      	add	r2, sp, #28
 800321c:	9204      	str	r2, [sp, #16]
 800321e:	aa06      	add	r2, sp, #24
 8003220:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003224:	e9cd 3500 	strd	r3, r5, [sp]
 8003228:	4622      	mov	r2, r4
 800322a:	463b      	mov	r3, r7
 800322c:	f001 fd78 	bl	8004d20 <_dtoa_r>
 8003230:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003234:	4606      	mov	r6, r0
 8003236:	d102      	bne.n	800323e <__cvt+0x62>
 8003238:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800323a:	07db      	lsls	r3, r3, #31
 800323c:	d522      	bpl.n	8003284 <__cvt+0xa8>
 800323e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003242:	eb06 0905 	add.w	r9, r6, r5
 8003246:	d110      	bne.n	800326a <__cvt+0x8e>
 8003248:	7833      	ldrb	r3, [r6, #0]
 800324a:	2b30      	cmp	r3, #48	; 0x30
 800324c:	d10a      	bne.n	8003264 <__cvt+0x88>
 800324e:	2200      	movs	r2, #0
 8003250:	2300      	movs	r3, #0
 8003252:	4620      	mov	r0, r4
 8003254:	4639      	mov	r1, r7
 8003256:	f7fd fcf3 	bl	8000c40 <__aeabi_dcmpeq>
 800325a:	b918      	cbnz	r0, 8003264 <__cvt+0x88>
 800325c:	f1c5 0501 	rsb	r5, r5, #1
 8003260:	f8ca 5000 	str.w	r5, [sl]
 8003264:	f8da 3000 	ldr.w	r3, [sl]
 8003268:	4499      	add	r9, r3
 800326a:	2200      	movs	r2, #0
 800326c:	2300      	movs	r3, #0
 800326e:	4620      	mov	r0, r4
 8003270:	4639      	mov	r1, r7
 8003272:	f7fd fce5 	bl	8000c40 <__aeabi_dcmpeq>
 8003276:	b108      	cbz	r0, 800327c <__cvt+0xa0>
 8003278:	f8cd 901c 	str.w	r9, [sp, #28]
 800327c:	2230      	movs	r2, #48	; 0x30
 800327e:	9b07      	ldr	r3, [sp, #28]
 8003280:	454b      	cmp	r3, r9
 8003282:	d307      	bcc.n	8003294 <__cvt+0xb8>
 8003284:	9b07      	ldr	r3, [sp, #28]
 8003286:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003288:	1b9b      	subs	r3, r3, r6
 800328a:	4630      	mov	r0, r6
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	b008      	add	sp, #32
 8003290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003294:	1c59      	adds	r1, r3, #1
 8003296:	9107      	str	r1, [sp, #28]
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	e7f0      	b.n	800327e <__cvt+0xa2>

0800329c <__exponent>:
 800329c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800329e:	4603      	mov	r3, r0
 80032a0:	2900      	cmp	r1, #0
 80032a2:	bfb8      	it	lt
 80032a4:	4249      	neglt	r1, r1
 80032a6:	f803 2b02 	strb.w	r2, [r3], #2
 80032aa:	bfb4      	ite	lt
 80032ac:	222d      	movlt	r2, #45	; 0x2d
 80032ae:	222b      	movge	r2, #43	; 0x2b
 80032b0:	2909      	cmp	r1, #9
 80032b2:	7042      	strb	r2, [r0, #1]
 80032b4:	dd2a      	ble.n	800330c <__exponent+0x70>
 80032b6:	f10d 0407 	add.w	r4, sp, #7
 80032ba:	46a4      	mov	ip, r4
 80032bc:	270a      	movs	r7, #10
 80032be:	46a6      	mov	lr, r4
 80032c0:	460a      	mov	r2, r1
 80032c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80032c6:	fb07 1516 	mls	r5, r7, r6, r1
 80032ca:	3530      	adds	r5, #48	; 0x30
 80032cc:	2a63      	cmp	r2, #99	; 0x63
 80032ce:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80032d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80032d6:	4631      	mov	r1, r6
 80032d8:	dcf1      	bgt.n	80032be <__exponent+0x22>
 80032da:	3130      	adds	r1, #48	; 0x30
 80032dc:	f1ae 0502 	sub.w	r5, lr, #2
 80032e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80032e4:	1c44      	adds	r4, r0, #1
 80032e6:	4629      	mov	r1, r5
 80032e8:	4561      	cmp	r1, ip
 80032ea:	d30a      	bcc.n	8003302 <__exponent+0x66>
 80032ec:	f10d 0209 	add.w	r2, sp, #9
 80032f0:	eba2 020e 	sub.w	r2, r2, lr
 80032f4:	4565      	cmp	r5, ip
 80032f6:	bf88      	it	hi
 80032f8:	2200      	movhi	r2, #0
 80032fa:	4413      	add	r3, r2
 80032fc:	1a18      	subs	r0, r3, r0
 80032fe:	b003      	add	sp, #12
 8003300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003302:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003306:	f804 2f01 	strb.w	r2, [r4, #1]!
 800330a:	e7ed      	b.n	80032e8 <__exponent+0x4c>
 800330c:	2330      	movs	r3, #48	; 0x30
 800330e:	3130      	adds	r1, #48	; 0x30
 8003310:	7083      	strb	r3, [r0, #2]
 8003312:	70c1      	strb	r1, [r0, #3]
 8003314:	1d03      	adds	r3, r0, #4
 8003316:	e7f1      	b.n	80032fc <__exponent+0x60>

08003318 <_printf_float>:
 8003318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800331c:	b091      	sub	sp, #68	; 0x44
 800331e:	460c      	mov	r4, r1
 8003320:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003324:	4616      	mov	r6, r2
 8003326:	461f      	mov	r7, r3
 8003328:	4605      	mov	r5, r0
 800332a:	f002 fe53 	bl	8005fd4 <_localeconv_r>
 800332e:	6803      	ldr	r3, [r0, #0]
 8003330:	9309      	str	r3, [sp, #36]	; 0x24
 8003332:	4618      	mov	r0, r3
 8003334:	f7fc ff54 	bl	80001e0 <strlen>
 8003338:	2300      	movs	r3, #0
 800333a:	930e      	str	r3, [sp, #56]	; 0x38
 800333c:	f8d8 3000 	ldr.w	r3, [r8]
 8003340:	900a      	str	r0, [sp, #40]	; 0x28
 8003342:	3307      	adds	r3, #7
 8003344:	f023 0307 	bic.w	r3, r3, #7
 8003348:	f103 0208 	add.w	r2, r3, #8
 800334c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003350:	f8d4 b000 	ldr.w	fp, [r4]
 8003354:	f8c8 2000 	str.w	r2, [r8]
 8003358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003360:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003364:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003368:	930b      	str	r3, [sp, #44]	; 0x2c
 800336a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800336c:	4b9c      	ldr	r3, [pc, #624]	; (80035e0 <_printf_float+0x2c8>)
 800336e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003372:	4640      	mov	r0, r8
 8003374:	f7fd fc96 	bl	8000ca4 <__aeabi_dcmpun>
 8003378:	bb70      	cbnz	r0, 80033d8 <_printf_float+0xc0>
 800337a:	4b99      	ldr	r3, [pc, #612]	; (80035e0 <_printf_float+0x2c8>)
 800337c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800337e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003382:	4640      	mov	r0, r8
 8003384:	f7fd fc70 	bl	8000c68 <__aeabi_dcmple>
 8003388:	bb30      	cbnz	r0, 80033d8 <_printf_float+0xc0>
 800338a:	2200      	movs	r2, #0
 800338c:	2300      	movs	r3, #0
 800338e:	4640      	mov	r0, r8
 8003390:	4651      	mov	r1, sl
 8003392:	f7fd fc5f 	bl	8000c54 <__aeabi_dcmplt>
 8003396:	b110      	cbz	r0, 800339e <_printf_float+0x86>
 8003398:	232d      	movs	r3, #45	; 0x2d
 800339a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800339e:	4b91      	ldr	r3, [pc, #580]	; (80035e4 <_printf_float+0x2cc>)
 80033a0:	4891      	ldr	r0, [pc, #580]	; (80035e8 <_printf_float+0x2d0>)
 80033a2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80033a6:	bf94      	ite	ls
 80033a8:	4698      	movls	r8, r3
 80033aa:	4680      	movhi	r8, r0
 80033ac:	2303      	movs	r3, #3
 80033ae:	6123      	str	r3, [r4, #16]
 80033b0:	f02b 0304 	bic.w	r3, fp, #4
 80033b4:	6023      	str	r3, [r4, #0]
 80033b6:	f04f 0a00 	mov.w	sl, #0
 80033ba:	9700      	str	r7, [sp, #0]
 80033bc:	4633      	mov	r3, r6
 80033be:	aa0f      	add	r2, sp, #60	; 0x3c
 80033c0:	4621      	mov	r1, r4
 80033c2:	4628      	mov	r0, r5
 80033c4:	f000 f9d2 	bl	800376c <_printf_common>
 80033c8:	3001      	adds	r0, #1
 80033ca:	f040 808f 	bne.w	80034ec <_printf_float+0x1d4>
 80033ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033d2:	b011      	add	sp, #68	; 0x44
 80033d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033d8:	4642      	mov	r2, r8
 80033da:	4653      	mov	r3, sl
 80033dc:	4640      	mov	r0, r8
 80033de:	4651      	mov	r1, sl
 80033e0:	f7fd fc60 	bl	8000ca4 <__aeabi_dcmpun>
 80033e4:	b140      	cbz	r0, 80033f8 <_printf_float+0xe0>
 80033e6:	f1ba 0f00 	cmp.w	sl, #0
 80033ea:	bfbc      	itt	lt
 80033ec:	232d      	movlt	r3, #45	; 0x2d
 80033ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80033f2:	487e      	ldr	r0, [pc, #504]	; (80035ec <_printf_float+0x2d4>)
 80033f4:	4b7e      	ldr	r3, [pc, #504]	; (80035f0 <_printf_float+0x2d8>)
 80033f6:	e7d4      	b.n	80033a2 <_printf_float+0x8a>
 80033f8:	6863      	ldr	r3, [r4, #4]
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003400:	d142      	bne.n	8003488 <_printf_float+0x170>
 8003402:	2306      	movs	r3, #6
 8003404:	6063      	str	r3, [r4, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	9206      	str	r2, [sp, #24]
 800340a:	aa0e      	add	r2, sp, #56	; 0x38
 800340c:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003410:	aa0d      	add	r2, sp, #52	; 0x34
 8003412:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003416:	9203      	str	r2, [sp, #12]
 8003418:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800341c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003420:	6023      	str	r3, [r4, #0]
 8003422:	6863      	ldr	r3, [r4, #4]
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	4642      	mov	r2, r8
 8003428:	4653      	mov	r3, sl
 800342a:	4628      	mov	r0, r5
 800342c:	910b      	str	r1, [sp, #44]	; 0x2c
 800342e:	f7ff fed5 	bl	80031dc <__cvt>
 8003432:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003434:	2947      	cmp	r1, #71	; 0x47
 8003436:	4680      	mov	r8, r0
 8003438:	990d      	ldr	r1, [sp, #52]	; 0x34
 800343a:	d108      	bne.n	800344e <_printf_float+0x136>
 800343c:	1cc8      	adds	r0, r1, #3
 800343e:	db02      	blt.n	8003446 <_printf_float+0x12e>
 8003440:	6863      	ldr	r3, [r4, #4]
 8003442:	4299      	cmp	r1, r3
 8003444:	dd40      	ble.n	80034c8 <_printf_float+0x1b0>
 8003446:	f1a9 0902 	sub.w	r9, r9, #2
 800344a:	fa5f f989 	uxtb.w	r9, r9
 800344e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003452:	d81f      	bhi.n	8003494 <_printf_float+0x17c>
 8003454:	3901      	subs	r1, #1
 8003456:	464a      	mov	r2, r9
 8003458:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800345c:	910d      	str	r1, [sp, #52]	; 0x34
 800345e:	f7ff ff1d 	bl	800329c <__exponent>
 8003462:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003464:	1813      	adds	r3, r2, r0
 8003466:	2a01      	cmp	r2, #1
 8003468:	4682      	mov	sl, r0
 800346a:	6123      	str	r3, [r4, #16]
 800346c:	dc02      	bgt.n	8003474 <_printf_float+0x15c>
 800346e:	6822      	ldr	r2, [r4, #0]
 8003470:	07d2      	lsls	r2, r2, #31
 8003472:	d501      	bpl.n	8003478 <_printf_float+0x160>
 8003474:	3301      	adds	r3, #1
 8003476:	6123      	str	r3, [r4, #16]
 8003478:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800347c:	2b00      	cmp	r3, #0
 800347e:	d09c      	beq.n	80033ba <_printf_float+0xa2>
 8003480:	232d      	movs	r3, #45	; 0x2d
 8003482:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003486:	e798      	b.n	80033ba <_printf_float+0xa2>
 8003488:	2947      	cmp	r1, #71	; 0x47
 800348a:	d1bc      	bne.n	8003406 <_printf_float+0xee>
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1ba      	bne.n	8003406 <_printf_float+0xee>
 8003490:	2301      	movs	r3, #1
 8003492:	e7b7      	b.n	8003404 <_printf_float+0xec>
 8003494:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003498:	d118      	bne.n	80034cc <_printf_float+0x1b4>
 800349a:	2900      	cmp	r1, #0
 800349c:	6863      	ldr	r3, [r4, #4]
 800349e:	dd0b      	ble.n	80034b8 <_printf_float+0x1a0>
 80034a0:	6121      	str	r1, [r4, #16]
 80034a2:	b913      	cbnz	r3, 80034aa <_printf_float+0x192>
 80034a4:	6822      	ldr	r2, [r4, #0]
 80034a6:	07d0      	lsls	r0, r2, #31
 80034a8:	d502      	bpl.n	80034b0 <_printf_float+0x198>
 80034aa:	3301      	adds	r3, #1
 80034ac:	440b      	add	r3, r1
 80034ae:	6123      	str	r3, [r4, #16]
 80034b0:	65a1      	str	r1, [r4, #88]	; 0x58
 80034b2:	f04f 0a00 	mov.w	sl, #0
 80034b6:	e7df      	b.n	8003478 <_printf_float+0x160>
 80034b8:	b913      	cbnz	r3, 80034c0 <_printf_float+0x1a8>
 80034ba:	6822      	ldr	r2, [r4, #0]
 80034bc:	07d2      	lsls	r2, r2, #31
 80034be:	d501      	bpl.n	80034c4 <_printf_float+0x1ac>
 80034c0:	3302      	adds	r3, #2
 80034c2:	e7f4      	b.n	80034ae <_printf_float+0x196>
 80034c4:	2301      	movs	r3, #1
 80034c6:	e7f2      	b.n	80034ae <_printf_float+0x196>
 80034c8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80034cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034ce:	4299      	cmp	r1, r3
 80034d0:	db05      	blt.n	80034de <_printf_float+0x1c6>
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	6121      	str	r1, [r4, #16]
 80034d6:	07d8      	lsls	r0, r3, #31
 80034d8:	d5ea      	bpl.n	80034b0 <_printf_float+0x198>
 80034da:	1c4b      	adds	r3, r1, #1
 80034dc:	e7e7      	b.n	80034ae <_printf_float+0x196>
 80034de:	2900      	cmp	r1, #0
 80034e0:	bfd4      	ite	le
 80034e2:	f1c1 0202 	rsble	r2, r1, #2
 80034e6:	2201      	movgt	r2, #1
 80034e8:	4413      	add	r3, r2
 80034ea:	e7e0      	b.n	80034ae <_printf_float+0x196>
 80034ec:	6823      	ldr	r3, [r4, #0]
 80034ee:	055a      	lsls	r2, r3, #21
 80034f0:	d407      	bmi.n	8003502 <_printf_float+0x1ea>
 80034f2:	6923      	ldr	r3, [r4, #16]
 80034f4:	4642      	mov	r2, r8
 80034f6:	4631      	mov	r1, r6
 80034f8:	4628      	mov	r0, r5
 80034fa:	47b8      	blx	r7
 80034fc:	3001      	adds	r0, #1
 80034fe:	d12b      	bne.n	8003558 <_printf_float+0x240>
 8003500:	e765      	b.n	80033ce <_printf_float+0xb6>
 8003502:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003506:	f240 80dc 	bls.w	80036c2 <_printf_float+0x3aa>
 800350a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800350e:	2200      	movs	r2, #0
 8003510:	2300      	movs	r3, #0
 8003512:	f7fd fb95 	bl	8000c40 <__aeabi_dcmpeq>
 8003516:	2800      	cmp	r0, #0
 8003518:	d033      	beq.n	8003582 <_printf_float+0x26a>
 800351a:	4a36      	ldr	r2, [pc, #216]	; (80035f4 <_printf_float+0x2dc>)
 800351c:	2301      	movs	r3, #1
 800351e:	4631      	mov	r1, r6
 8003520:	4628      	mov	r0, r5
 8003522:	47b8      	blx	r7
 8003524:	3001      	adds	r0, #1
 8003526:	f43f af52 	beq.w	80033ce <_printf_float+0xb6>
 800352a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800352e:	429a      	cmp	r2, r3
 8003530:	db02      	blt.n	8003538 <_printf_float+0x220>
 8003532:	6823      	ldr	r3, [r4, #0]
 8003534:	07d8      	lsls	r0, r3, #31
 8003536:	d50f      	bpl.n	8003558 <_printf_float+0x240>
 8003538:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800353c:	4631      	mov	r1, r6
 800353e:	4628      	mov	r0, r5
 8003540:	47b8      	blx	r7
 8003542:	3001      	adds	r0, #1
 8003544:	f43f af43 	beq.w	80033ce <_printf_float+0xb6>
 8003548:	f04f 0800 	mov.w	r8, #0
 800354c:	f104 091a 	add.w	r9, r4, #26
 8003550:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003552:	3b01      	subs	r3, #1
 8003554:	4543      	cmp	r3, r8
 8003556:	dc09      	bgt.n	800356c <_printf_float+0x254>
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	079b      	lsls	r3, r3, #30
 800355c:	f100 8101 	bmi.w	8003762 <_printf_float+0x44a>
 8003560:	68e0      	ldr	r0, [r4, #12]
 8003562:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003564:	4298      	cmp	r0, r3
 8003566:	bfb8      	it	lt
 8003568:	4618      	movlt	r0, r3
 800356a:	e732      	b.n	80033d2 <_printf_float+0xba>
 800356c:	2301      	movs	r3, #1
 800356e:	464a      	mov	r2, r9
 8003570:	4631      	mov	r1, r6
 8003572:	4628      	mov	r0, r5
 8003574:	47b8      	blx	r7
 8003576:	3001      	adds	r0, #1
 8003578:	f43f af29 	beq.w	80033ce <_printf_float+0xb6>
 800357c:	f108 0801 	add.w	r8, r8, #1
 8003580:	e7e6      	b.n	8003550 <_printf_float+0x238>
 8003582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003584:	2b00      	cmp	r3, #0
 8003586:	dc37      	bgt.n	80035f8 <_printf_float+0x2e0>
 8003588:	4a1a      	ldr	r2, [pc, #104]	; (80035f4 <_printf_float+0x2dc>)
 800358a:	2301      	movs	r3, #1
 800358c:	4631      	mov	r1, r6
 800358e:	4628      	mov	r0, r5
 8003590:	47b8      	blx	r7
 8003592:	3001      	adds	r0, #1
 8003594:	f43f af1b 	beq.w	80033ce <_printf_float+0xb6>
 8003598:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800359c:	4313      	orrs	r3, r2
 800359e:	d102      	bne.n	80035a6 <_printf_float+0x28e>
 80035a0:	6823      	ldr	r3, [r4, #0]
 80035a2:	07d9      	lsls	r1, r3, #31
 80035a4:	d5d8      	bpl.n	8003558 <_printf_float+0x240>
 80035a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035aa:	4631      	mov	r1, r6
 80035ac:	4628      	mov	r0, r5
 80035ae:	47b8      	blx	r7
 80035b0:	3001      	adds	r0, #1
 80035b2:	f43f af0c 	beq.w	80033ce <_printf_float+0xb6>
 80035b6:	f04f 0900 	mov.w	r9, #0
 80035ba:	f104 0a1a 	add.w	sl, r4, #26
 80035be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035c0:	425b      	negs	r3, r3
 80035c2:	454b      	cmp	r3, r9
 80035c4:	dc01      	bgt.n	80035ca <_printf_float+0x2b2>
 80035c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035c8:	e794      	b.n	80034f4 <_printf_float+0x1dc>
 80035ca:	2301      	movs	r3, #1
 80035cc:	4652      	mov	r2, sl
 80035ce:	4631      	mov	r1, r6
 80035d0:	4628      	mov	r0, r5
 80035d2:	47b8      	blx	r7
 80035d4:	3001      	adds	r0, #1
 80035d6:	f43f aefa 	beq.w	80033ce <_printf_float+0xb6>
 80035da:	f109 0901 	add.w	r9, r9, #1
 80035de:	e7ee      	b.n	80035be <_printf_float+0x2a6>
 80035e0:	7fefffff 	.word	0x7fefffff
 80035e4:	08007bfc 	.word	0x08007bfc
 80035e8:	08007c00 	.word	0x08007c00
 80035ec:	08007c08 	.word	0x08007c08
 80035f0:	08007c04 	.word	0x08007c04
 80035f4:	08007c0c 	.word	0x08007c0c
 80035f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80035fc:	429a      	cmp	r2, r3
 80035fe:	bfa8      	it	ge
 8003600:	461a      	movge	r2, r3
 8003602:	2a00      	cmp	r2, #0
 8003604:	4691      	mov	r9, r2
 8003606:	dc37      	bgt.n	8003678 <_printf_float+0x360>
 8003608:	f04f 0b00 	mov.w	fp, #0
 800360c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003610:	f104 021a 	add.w	r2, r4, #26
 8003614:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003618:	ebaa 0309 	sub.w	r3, sl, r9
 800361c:	455b      	cmp	r3, fp
 800361e:	dc33      	bgt.n	8003688 <_printf_float+0x370>
 8003620:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003624:	429a      	cmp	r2, r3
 8003626:	db3b      	blt.n	80036a0 <_printf_float+0x388>
 8003628:	6823      	ldr	r3, [r4, #0]
 800362a:	07da      	lsls	r2, r3, #31
 800362c:	d438      	bmi.n	80036a0 <_printf_float+0x388>
 800362e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003630:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003632:	eba3 020a 	sub.w	r2, r3, sl
 8003636:	eba3 0901 	sub.w	r9, r3, r1
 800363a:	4591      	cmp	r9, r2
 800363c:	bfa8      	it	ge
 800363e:	4691      	movge	r9, r2
 8003640:	f1b9 0f00 	cmp.w	r9, #0
 8003644:	dc34      	bgt.n	80036b0 <_printf_float+0x398>
 8003646:	f04f 0800 	mov.w	r8, #0
 800364a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800364e:	f104 0a1a 	add.w	sl, r4, #26
 8003652:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	eba3 0309 	sub.w	r3, r3, r9
 800365c:	4543      	cmp	r3, r8
 800365e:	f77f af7b 	ble.w	8003558 <_printf_float+0x240>
 8003662:	2301      	movs	r3, #1
 8003664:	4652      	mov	r2, sl
 8003666:	4631      	mov	r1, r6
 8003668:	4628      	mov	r0, r5
 800366a:	47b8      	blx	r7
 800366c:	3001      	adds	r0, #1
 800366e:	f43f aeae 	beq.w	80033ce <_printf_float+0xb6>
 8003672:	f108 0801 	add.w	r8, r8, #1
 8003676:	e7ec      	b.n	8003652 <_printf_float+0x33a>
 8003678:	4613      	mov	r3, r2
 800367a:	4631      	mov	r1, r6
 800367c:	4642      	mov	r2, r8
 800367e:	4628      	mov	r0, r5
 8003680:	47b8      	blx	r7
 8003682:	3001      	adds	r0, #1
 8003684:	d1c0      	bne.n	8003608 <_printf_float+0x2f0>
 8003686:	e6a2      	b.n	80033ce <_printf_float+0xb6>
 8003688:	2301      	movs	r3, #1
 800368a:	4631      	mov	r1, r6
 800368c:	4628      	mov	r0, r5
 800368e:	920b      	str	r2, [sp, #44]	; 0x2c
 8003690:	47b8      	blx	r7
 8003692:	3001      	adds	r0, #1
 8003694:	f43f ae9b 	beq.w	80033ce <_printf_float+0xb6>
 8003698:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800369a:	f10b 0b01 	add.w	fp, fp, #1
 800369e:	e7b9      	b.n	8003614 <_printf_float+0x2fc>
 80036a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036a4:	4631      	mov	r1, r6
 80036a6:	4628      	mov	r0, r5
 80036a8:	47b8      	blx	r7
 80036aa:	3001      	adds	r0, #1
 80036ac:	d1bf      	bne.n	800362e <_printf_float+0x316>
 80036ae:	e68e      	b.n	80033ce <_printf_float+0xb6>
 80036b0:	464b      	mov	r3, r9
 80036b2:	eb08 020a 	add.w	r2, r8, sl
 80036b6:	4631      	mov	r1, r6
 80036b8:	4628      	mov	r0, r5
 80036ba:	47b8      	blx	r7
 80036bc:	3001      	adds	r0, #1
 80036be:	d1c2      	bne.n	8003646 <_printf_float+0x32e>
 80036c0:	e685      	b.n	80033ce <_printf_float+0xb6>
 80036c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80036c4:	2a01      	cmp	r2, #1
 80036c6:	dc01      	bgt.n	80036cc <_printf_float+0x3b4>
 80036c8:	07db      	lsls	r3, r3, #31
 80036ca:	d537      	bpl.n	800373c <_printf_float+0x424>
 80036cc:	2301      	movs	r3, #1
 80036ce:	4642      	mov	r2, r8
 80036d0:	4631      	mov	r1, r6
 80036d2:	4628      	mov	r0, r5
 80036d4:	47b8      	blx	r7
 80036d6:	3001      	adds	r0, #1
 80036d8:	f43f ae79 	beq.w	80033ce <_printf_float+0xb6>
 80036dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036e0:	4631      	mov	r1, r6
 80036e2:	4628      	mov	r0, r5
 80036e4:	47b8      	blx	r7
 80036e6:	3001      	adds	r0, #1
 80036e8:	f43f ae71 	beq.w	80033ce <_printf_float+0xb6>
 80036ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80036f0:	2200      	movs	r2, #0
 80036f2:	2300      	movs	r3, #0
 80036f4:	f7fd faa4 	bl	8000c40 <__aeabi_dcmpeq>
 80036f8:	b9d8      	cbnz	r0, 8003732 <_printf_float+0x41a>
 80036fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036fc:	f108 0201 	add.w	r2, r8, #1
 8003700:	3b01      	subs	r3, #1
 8003702:	4631      	mov	r1, r6
 8003704:	4628      	mov	r0, r5
 8003706:	47b8      	blx	r7
 8003708:	3001      	adds	r0, #1
 800370a:	d10e      	bne.n	800372a <_printf_float+0x412>
 800370c:	e65f      	b.n	80033ce <_printf_float+0xb6>
 800370e:	2301      	movs	r3, #1
 8003710:	464a      	mov	r2, r9
 8003712:	4631      	mov	r1, r6
 8003714:	4628      	mov	r0, r5
 8003716:	47b8      	blx	r7
 8003718:	3001      	adds	r0, #1
 800371a:	f43f ae58 	beq.w	80033ce <_printf_float+0xb6>
 800371e:	f108 0801 	add.w	r8, r8, #1
 8003722:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003724:	3b01      	subs	r3, #1
 8003726:	4543      	cmp	r3, r8
 8003728:	dcf1      	bgt.n	800370e <_printf_float+0x3f6>
 800372a:	4653      	mov	r3, sl
 800372c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003730:	e6e1      	b.n	80034f6 <_printf_float+0x1de>
 8003732:	f04f 0800 	mov.w	r8, #0
 8003736:	f104 091a 	add.w	r9, r4, #26
 800373a:	e7f2      	b.n	8003722 <_printf_float+0x40a>
 800373c:	2301      	movs	r3, #1
 800373e:	4642      	mov	r2, r8
 8003740:	e7df      	b.n	8003702 <_printf_float+0x3ea>
 8003742:	2301      	movs	r3, #1
 8003744:	464a      	mov	r2, r9
 8003746:	4631      	mov	r1, r6
 8003748:	4628      	mov	r0, r5
 800374a:	47b8      	blx	r7
 800374c:	3001      	adds	r0, #1
 800374e:	f43f ae3e 	beq.w	80033ce <_printf_float+0xb6>
 8003752:	f108 0801 	add.w	r8, r8, #1
 8003756:	68e3      	ldr	r3, [r4, #12]
 8003758:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800375a:	1a5b      	subs	r3, r3, r1
 800375c:	4543      	cmp	r3, r8
 800375e:	dcf0      	bgt.n	8003742 <_printf_float+0x42a>
 8003760:	e6fe      	b.n	8003560 <_printf_float+0x248>
 8003762:	f04f 0800 	mov.w	r8, #0
 8003766:	f104 0919 	add.w	r9, r4, #25
 800376a:	e7f4      	b.n	8003756 <_printf_float+0x43e>

0800376c <_printf_common>:
 800376c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003770:	4616      	mov	r6, r2
 8003772:	4699      	mov	r9, r3
 8003774:	688a      	ldr	r2, [r1, #8]
 8003776:	690b      	ldr	r3, [r1, #16]
 8003778:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800377c:	4293      	cmp	r3, r2
 800377e:	bfb8      	it	lt
 8003780:	4613      	movlt	r3, r2
 8003782:	6033      	str	r3, [r6, #0]
 8003784:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003788:	4607      	mov	r7, r0
 800378a:	460c      	mov	r4, r1
 800378c:	b10a      	cbz	r2, 8003792 <_printf_common+0x26>
 800378e:	3301      	adds	r3, #1
 8003790:	6033      	str	r3, [r6, #0]
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	0699      	lsls	r1, r3, #26
 8003796:	bf42      	ittt	mi
 8003798:	6833      	ldrmi	r3, [r6, #0]
 800379a:	3302      	addmi	r3, #2
 800379c:	6033      	strmi	r3, [r6, #0]
 800379e:	6825      	ldr	r5, [r4, #0]
 80037a0:	f015 0506 	ands.w	r5, r5, #6
 80037a4:	d106      	bne.n	80037b4 <_printf_common+0x48>
 80037a6:	f104 0a19 	add.w	sl, r4, #25
 80037aa:	68e3      	ldr	r3, [r4, #12]
 80037ac:	6832      	ldr	r2, [r6, #0]
 80037ae:	1a9b      	subs	r3, r3, r2
 80037b0:	42ab      	cmp	r3, r5
 80037b2:	dc26      	bgt.n	8003802 <_printf_common+0x96>
 80037b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037b8:	1e13      	subs	r3, r2, #0
 80037ba:	6822      	ldr	r2, [r4, #0]
 80037bc:	bf18      	it	ne
 80037be:	2301      	movne	r3, #1
 80037c0:	0692      	lsls	r2, r2, #26
 80037c2:	d42b      	bmi.n	800381c <_printf_common+0xb0>
 80037c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037c8:	4649      	mov	r1, r9
 80037ca:	4638      	mov	r0, r7
 80037cc:	47c0      	blx	r8
 80037ce:	3001      	adds	r0, #1
 80037d0:	d01e      	beq.n	8003810 <_printf_common+0xa4>
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	68e5      	ldr	r5, [r4, #12]
 80037d6:	6832      	ldr	r2, [r6, #0]
 80037d8:	f003 0306 	and.w	r3, r3, #6
 80037dc:	2b04      	cmp	r3, #4
 80037de:	bf08      	it	eq
 80037e0:	1aad      	subeq	r5, r5, r2
 80037e2:	68a3      	ldr	r3, [r4, #8]
 80037e4:	6922      	ldr	r2, [r4, #16]
 80037e6:	bf0c      	ite	eq
 80037e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037ec:	2500      	movne	r5, #0
 80037ee:	4293      	cmp	r3, r2
 80037f0:	bfc4      	itt	gt
 80037f2:	1a9b      	subgt	r3, r3, r2
 80037f4:	18ed      	addgt	r5, r5, r3
 80037f6:	2600      	movs	r6, #0
 80037f8:	341a      	adds	r4, #26
 80037fa:	42b5      	cmp	r5, r6
 80037fc:	d11a      	bne.n	8003834 <_printf_common+0xc8>
 80037fe:	2000      	movs	r0, #0
 8003800:	e008      	b.n	8003814 <_printf_common+0xa8>
 8003802:	2301      	movs	r3, #1
 8003804:	4652      	mov	r2, sl
 8003806:	4649      	mov	r1, r9
 8003808:	4638      	mov	r0, r7
 800380a:	47c0      	blx	r8
 800380c:	3001      	adds	r0, #1
 800380e:	d103      	bne.n	8003818 <_printf_common+0xac>
 8003810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003818:	3501      	adds	r5, #1
 800381a:	e7c6      	b.n	80037aa <_printf_common+0x3e>
 800381c:	18e1      	adds	r1, r4, r3
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	2030      	movs	r0, #48	; 0x30
 8003822:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003826:	4422      	add	r2, r4
 8003828:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800382c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003830:	3302      	adds	r3, #2
 8003832:	e7c7      	b.n	80037c4 <_printf_common+0x58>
 8003834:	2301      	movs	r3, #1
 8003836:	4622      	mov	r2, r4
 8003838:	4649      	mov	r1, r9
 800383a:	4638      	mov	r0, r7
 800383c:	47c0      	blx	r8
 800383e:	3001      	adds	r0, #1
 8003840:	d0e6      	beq.n	8003810 <_printf_common+0xa4>
 8003842:	3601      	adds	r6, #1
 8003844:	e7d9      	b.n	80037fa <_printf_common+0x8e>
	...

08003848 <_printf_i>:
 8003848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800384c:	7e0f      	ldrb	r7, [r1, #24]
 800384e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003850:	2f78      	cmp	r7, #120	; 0x78
 8003852:	4691      	mov	r9, r2
 8003854:	4680      	mov	r8, r0
 8003856:	460c      	mov	r4, r1
 8003858:	469a      	mov	sl, r3
 800385a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800385e:	d807      	bhi.n	8003870 <_printf_i+0x28>
 8003860:	2f62      	cmp	r7, #98	; 0x62
 8003862:	d80a      	bhi.n	800387a <_printf_i+0x32>
 8003864:	2f00      	cmp	r7, #0
 8003866:	f000 80d8 	beq.w	8003a1a <_printf_i+0x1d2>
 800386a:	2f58      	cmp	r7, #88	; 0x58
 800386c:	f000 80a3 	beq.w	80039b6 <_printf_i+0x16e>
 8003870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003874:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003878:	e03a      	b.n	80038f0 <_printf_i+0xa8>
 800387a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800387e:	2b15      	cmp	r3, #21
 8003880:	d8f6      	bhi.n	8003870 <_printf_i+0x28>
 8003882:	a101      	add	r1, pc, #4	; (adr r1, 8003888 <_printf_i+0x40>)
 8003884:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003888:	080038e1 	.word	0x080038e1
 800388c:	080038f5 	.word	0x080038f5
 8003890:	08003871 	.word	0x08003871
 8003894:	08003871 	.word	0x08003871
 8003898:	08003871 	.word	0x08003871
 800389c:	08003871 	.word	0x08003871
 80038a0:	080038f5 	.word	0x080038f5
 80038a4:	08003871 	.word	0x08003871
 80038a8:	08003871 	.word	0x08003871
 80038ac:	08003871 	.word	0x08003871
 80038b0:	08003871 	.word	0x08003871
 80038b4:	08003a01 	.word	0x08003a01
 80038b8:	08003925 	.word	0x08003925
 80038bc:	080039e3 	.word	0x080039e3
 80038c0:	08003871 	.word	0x08003871
 80038c4:	08003871 	.word	0x08003871
 80038c8:	08003a23 	.word	0x08003a23
 80038cc:	08003871 	.word	0x08003871
 80038d0:	08003925 	.word	0x08003925
 80038d4:	08003871 	.word	0x08003871
 80038d8:	08003871 	.word	0x08003871
 80038dc:	080039eb 	.word	0x080039eb
 80038e0:	682b      	ldr	r3, [r5, #0]
 80038e2:	1d1a      	adds	r2, r3, #4
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	602a      	str	r2, [r5, #0]
 80038e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0a3      	b.n	8003a3c <_printf_i+0x1f4>
 80038f4:	6820      	ldr	r0, [r4, #0]
 80038f6:	6829      	ldr	r1, [r5, #0]
 80038f8:	0606      	lsls	r6, r0, #24
 80038fa:	f101 0304 	add.w	r3, r1, #4
 80038fe:	d50a      	bpl.n	8003916 <_printf_i+0xce>
 8003900:	680e      	ldr	r6, [r1, #0]
 8003902:	602b      	str	r3, [r5, #0]
 8003904:	2e00      	cmp	r6, #0
 8003906:	da03      	bge.n	8003910 <_printf_i+0xc8>
 8003908:	232d      	movs	r3, #45	; 0x2d
 800390a:	4276      	negs	r6, r6
 800390c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003910:	485e      	ldr	r0, [pc, #376]	; (8003a8c <_printf_i+0x244>)
 8003912:	230a      	movs	r3, #10
 8003914:	e019      	b.n	800394a <_printf_i+0x102>
 8003916:	680e      	ldr	r6, [r1, #0]
 8003918:	602b      	str	r3, [r5, #0]
 800391a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800391e:	bf18      	it	ne
 8003920:	b236      	sxthne	r6, r6
 8003922:	e7ef      	b.n	8003904 <_printf_i+0xbc>
 8003924:	682b      	ldr	r3, [r5, #0]
 8003926:	6820      	ldr	r0, [r4, #0]
 8003928:	1d19      	adds	r1, r3, #4
 800392a:	6029      	str	r1, [r5, #0]
 800392c:	0601      	lsls	r1, r0, #24
 800392e:	d501      	bpl.n	8003934 <_printf_i+0xec>
 8003930:	681e      	ldr	r6, [r3, #0]
 8003932:	e002      	b.n	800393a <_printf_i+0xf2>
 8003934:	0646      	lsls	r6, r0, #25
 8003936:	d5fb      	bpl.n	8003930 <_printf_i+0xe8>
 8003938:	881e      	ldrh	r6, [r3, #0]
 800393a:	4854      	ldr	r0, [pc, #336]	; (8003a8c <_printf_i+0x244>)
 800393c:	2f6f      	cmp	r7, #111	; 0x6f
 800393e:	bf0c      	ite	eq
 8003940:	2308      	moveq	r3, #8
 8003942:	230a      	movne	r3, #10
 8003944:	2100      	movs	r1, #0
 8003946:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800394a:	6865      	ldr	r5, [r4, #4]
 800394c:	60a5      	str	r5, [r4, #8]
 800394e:	2d00      	cmp	r5, #0
 8003950:	bfa2      	ittt	ge
 8003952:	6821      	ldrge	r1, [r4, #0]
 8003954:	f021 0104 	bicge.w	r1, r1, #4
 8003958:	6021      	strge	r1, [r4, #0]
 800395a:	b90e      	cbnz	r6, 8003960 <_printf_i+0x118>
 800395c:	2d00      	cmp	r5, #0
 800395e:	d04d      	beq.n	80039fc <_printf_i+0x1b4>
 8003960:	4615      	mov	r5, r2
 8003962:	fbb6 f1f3 	udiv	r1, r6, r3
 8003966:	fb03 6711 	mls	r7, r3, r1, r6
 800396a:	5dc7      	ldrb	r7, [r0, r7]
 800396c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003970:	4637      	mov	r7, r6
 8003972:	42bb      	cmp	r3, r7
 8003974:	460e      	mov	r6, r1
 8003976:	d9f4      	bls.n	8003962 <_printf_i+0x11a>
 8003978:	2b08      	cmp	r3, #8
 800397a:	d10b      	bne.n	8003994 <_printf_i+0x14c>
 800397c:	6823      	ldr	r3, [r4, #0]
 800397e:	07de      	lsls	r6, r3, #31
 8003980:	d508      	bpl.n	8003994 <_printf_i+0x14c>
 8003982:	6923      	ldr	r3, [r4, #16]
 8003984:	6861      	ldr	r1, [r4, #4]
 8003986:	4299      	cmp	r1, r3
 8003988:	bfde      	ittt	le
 800398a:	2330      	movle	r3, #48	; 0x30
 800398c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003990:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003994:	1b52      	subs	r2, r2, r5
 8003996:	6122      	str	r2, [r4, #16]
 8003998:	f8cd a000 	str.w	sl, [sp]
 800399c:	464b      	mov	r3, r9
 800399e:	aa03      	add	r2, sp, #12
 80039a0:	4621      	mov	r1, r4
 80039a2:	4640      	mov	r0, r8
 80039a4:	f7ff fee2 	bl	800376c <_printf_common>
 80039a8:	3001      	adds	r0, #1
 80039aa:	d14c      	bne.n	8003a46 <_printf_i+0x1fe>
 80039ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039b0:	b004      	add	sp, #16
 80039b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039b6:	4835      	ldr	r0, [pc, #212]	; (8003a8c <_printf_i+0x244>)
 80039b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80039bc:	6829      	ldr	r1, [r5, #0]
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80039c4:	6029      	str	r1, [r5, #0]
 80039c6:	061d      	lsls	r5, r3, #24
 80039c8:	d514      	bpl.n	80039f4 <_printf_i+0x1ac>
 80039ca:	07df      	lsls	r7, r3, #31
 80039cc:	bf44      	itt	mi
 80039ce:	f043 0320 	orrmi.w	r3, r3, #32
 80039d2:	6023      	strmi	r3, [r4, #0]
 80039d4:	b91e      	cbnz	r6, 80039de <_printf_i+0x196>
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	f023 0320 	bic.w	r3, r3, #32
 80039dc:	6023      	str	r3, [r4, #0]
 80039de:	2310      	movs	r3, #16
 80039e0:	e7b0      	b.n	8003944 <_printf_i+0xfc>
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	f043 0320 	orr.w	r3, r3, #32
 80039e8:	6023      	str	r3, [r4, #0]
 80039ea:	2378      	movs	r3, #120	; 0x78
 80039ec:	4828      	ldr	r0, [pc, #160]	; (8003a90 <_printf_i+0x248>)
 80039ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039f2:	e7e3      	b.n	80039bc <_printf_i+0x174>
 80039f4:	0659      	lsls	r1, r3, #25
 80039f6:	bf48      	it	mi
 80039f8:	b2b6      	uxthmi	r6, r6
 80039fa:	e7e6      	b.n	80039ca <_printf_i+0x182>
 80039fc:	4615      	mov	r5, r2
 80039fe:	e7bb      	b.n	8003978 <_printf_i+0x130>
 8003a00:	682b      	ldr	r3, [r5, #0]
 8003a02:	6826      	ldr	r6, [r4, #0]
 8003a04:	6961      	ldr	r1, [r4, #20]
 8003a06:	1d18      	adds	r0, r3, #4
 8003a08:	6028      	str	r0, [r5, #0]
 8003a0a:	0635      	lsls	r5, r6, #24
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	d501      	bpl.n	8003a14 <_printf_i+0x1cc>
 8003a10:	6019      	str	r1, [r3, #0]
 8003a12:	e002      	b.n	8003a1a <_printf_i+0x1d2>
 8003a14:	0670      	lsls	r0, r6, #25
 8003a16:	d5fb      	bpl.n	8003a10 <_printf_i+0x1c8>
 8003a18:	8019      	strh	r1, [r3, #0]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	6123      	str	r3, [r4, #16]
 8003a1e:	4615      	mov	r5, r2
 8003a20:	e7ba      	b.n	8003998 <_printf_i+0x150>
 8003a22:	682b      	ldr	r3, [r5, #0]
 8003a24:	1d1a      	adds	r2, r3, #4
 8003a26:	602a      	str	r2, [r5, #0]
 8003a28:	681d      	ldr	r5, [r3, #0]
 8003a2a:	6862      	ldr	r2, [r4, #4]
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	4628      	mov	r0, r5
 8003a30:	f7fc fbde 	bl	80001f0 <memchr>
 8003a34:	b108      	cbz	r0, 8003a3a <_printf_i+0x1f2>
 8003a36:	1b40      	subs	r0, r0, r5
 8003a38:	6060      	str	r0, [r4, #4]
 8003a3a:	6863      	ldr	r3, [r4, #4]
 8003a3c:	6123      	str	r3, [r4, #16]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a44:	e7a8      	b.n	8003998 <_printf_i+0x150>
 8003a46:	6923      	ldr	r3, [r4, #16]
 8003a48:	462a      	mov	r2, r5
 8003a4a:	4649      	mov	r1, r9
 8003a4c:	4640      	mov	r0, r8
 8003a4e:	47d0      	blx	sl
 8003a50:	3001      	adds	r0, #1
 8003a52:	d0ab      	beq.n	80039ac <_printf_i+0x164>
 8003a54:	6823      	ldr	r3, [r4, #0]
 8003a56:	079b      	lsls	r3, r3, #30
 8003a58:	d413      	bmi.n	8003a82 <_printf_i+0x23a>
 8003a5a:	68e0      	ldr	r0, [r4, #12]
 8003a5c:	9b03      	ldr	r3, [sp, #12]
 8003a5e:	4298      	cmp	r0, r3
 8003a60:	bfb8      	it	lt
 8003a62:	4618      	movlt	r0, r3
 8003a64:	e7a4      	b.n	80039b0 <_printf_i+0x168>
 8003a66:	2301      	movs	r3, #1
 8003a68:	4632      	mov	r2, r6
 8003a6a:	4649      	mov	r1, r9
 8003a6c:	4640      	mov	r0, r8
 8003a6e:	47d0      	blx	sl
 8003a70:	3001      	adds	r0, #1
 8003a72:	d09b      	beq.n	80039ac <_printf_i+0x164>
 8003a74:	3501      	adds	r5, #1
 8003a76:	68e3      	ldr	r3, [r4, #12]
 8003a78:	9903      	ldr	r1, [sp, #12]
 8003a7a:	1a5b      	subs	r3, r3, r1
 8003a7c:	42ab      	cmp	r3, r5
 8003a7e:	dcf2      	bgt.n	8003a66 <_printf_i+0x21e>
 8003a80:	e7eb      	b.n	8003a5a <_printf_i+0x212>
 8003a82:	2500      	movs	r5, #0
 8003a84:	f104 0619 	add.w	r6, r4, #25
 8003a88:	e7f5      	b.n	8003a76 <_printf_i+0x22e>
 8003a8a:	bf00      	nop
 8003a8c:	08007c0e 	.word	0x08007c0e
 8003a90:	08007c1f 	.word	0x08007c1f

08003a94 <_scanf_float>:
 8003a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a98:	b087      	sub	sp, #28
 8003a9a:	4617      	mov	r7, r2
 8003a9c:	9303      	str	r3, [sp, #12]
 8003a9e:	688b      	ldr	r3, [r1, #8]
 8003aa0:	1e5a      	subs	r2, r3, #1
 8003aa2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003aa6:	bf83      	ittte	hi
 8003aa8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003aac:	195b      	addhi	r3, r3, r5
 8003aae:	9302      	strhi	r3, [sp, #8]
 8003ab0:	2300      	movls	r3, #0
 8003ab2:	bf86      	itte	hi
 8003ab4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003ab8:	608b      	strhi	r3, [r1, #8]
 8003aba:	9302      	strls	r3, [sp, #8]
 8003abc:	680b      	ldr	r3, [r1, #0]
 8003abe:	468b      	mov	fp, r1
 8003ac0:	2500      	movs	r5, #0
 8003ac2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003ac6:	f84b 3b1c 	str.w	r3, [fp], #28
 8003aca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003ace:	4680      	mov	r8, r0
 8003ad0:	460c      	mov	r4, r1
 8003ad2:	465e      	mov	r6, fp
 8003ad4:	46aa      	mov	sl, r5
 8003ad6:	46a9      	mov	r9, r5
 8003ad8:	9501      	str	r5, [sp, #4]
 8003ada:	68a2      	ldr	r2, [r4, #8]
 8003adc:	b152      	cbz	r2, 8003af4 <_scanf_float+0x60>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	2b4e      	cmp	r3, #78	; 0x4e
 8003ae4:	d864      	bhi.n	8003bb0 <_scanf_float+0x11c>
 8003ae6:	2b40      	cmp	r3, #64	; 0x40
 8003ae8:	d83c      	bhi.n	8003b64 <_scanf_float+0xd0>
 8003aea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003aee:	b2c8      	uxtb	r0, r1
 8003af0:	280e      	cmp	r0, #14
 8003af2:	d93a      	bls.n	8003b6a <_scanf_float+0xd6>
 8003af4:	f1b9 0f00 	cmp.w	r9, #0
 8003af8:	d003      	beq.n	8003b02 <_scanf_float+0x6e>
 8003afa:	6823      	ldr	r3, [r4, #0]
 8003afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b00:	6023      	str	r3, [r4, #0]
 8003b02:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003b06:	f1ba 0f01 	cmp.w	sl, #1
 8003b0a:	f200 8113 	bhi.w	8003d34 <_scanf_float+0x2a0>
 8003b0e:	455e      	cmp	r6, fp
 8003b10:	f200 8105 	bhi.w	8003d1e <_scanf_float+0x28a>
 8003b14:	2501      	movs	r5, #1
 8003b16:	4628      	mov	r0, r5
 8003b18:	b007      	add	sp, #28
 8003b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b1e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003b22:	2a0d      	cmp	r2, #13
 8003b24:	d8e6      	bhi.n	8003af4 <_scanf_float+0x60>
 8003b26:	a101      	add	r1, pc, #4	; (adr r1, 8003b2c <_scanf_float+0x98>)
 8003b28:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003b2c:	08003c6b 	.word	0x08003c6b
 8003b30:	08003af5 	.word	0x08003af5
 8003b34:	08003af5 	.word	0x08003af5
 8003b38:	08003af5 	.word	0x08003af5
 8003b3c:	08003ccb 	.word	0x08003ccb
 8003b40:	08003ca3 	.word	0x08003ca3
 8003b44:	08003af5 	.word	0x08003af5
 8003b48:	08003af5 	.word	0x08003af5
 8003b4c:	08003c79 	.word	0x08003c79
 8003b50:	08003af5 	.word	0x08003af5
 8003b54:	08003af5 	.word	0x08003af5
 8003b58:	08003af5 	.word	0x08003af5
 8003b5c:	08003af5 	.word	0x08003af5
 8003b60:	08003c31 	.word	0x08003c31
 8003b64:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003b68:	e7db      	b.n	8003b22 <_scanf_float+0x8e>
 8003b6a:	290e      	cmp	r1, #14
 8003b6c:	d8c2      	bhi.n	8003af4 <_scanf_float+0x60>
 8003b6e:	a001      	add	r0, pc, #4	; (adr r0, 8003b74 <_scanf_float+0xe0>)
 8003b70:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003b74:	08003c23 	.word	0x08003c23
 8003b78:	08003af5 	.word	0x08003af5
 8003b7c:	08003c23 	.word	0x08003c23
 8003b80:	08003cb7 	.word	0x08003cb7
 8003b84:	08003af5 	.word	0x08003af5
 8003b88:	08003bd1 	.word	0x08003bd1
 8003b8c:	08003c0d 	.word	0x08003c0d
 8003b90:	08003c0d 	.word	0x08003c0d
 8003b94:	08003c0d 	.word	0x08003c0d
 8003b98:	08003c0d 	.word	0x08003c0d
 8003b9c:	08003c0d 	.word	0x08003c0d
 8003ba0:	08003c0d 	.word	0x08003c0d
 8003ba4:	08003c0d 	.word	0x08003c0d
 8003ba8:	08003c0d 	.word	0x08003c0d
 8003bac:	08003c0d 	.word	0x08003c0d
 8003bb0:	2b6e      	cmp	r3, #110	; 0x6e
 8003bb2:	d809      	bhi.n	8003bc8 <_scanf_float+0x134>
 8003bb4:	2b60      	cmp	r3, #96	; 0x60
 8003bb6:	d8b2      	bhi.n	8003b1e <_scanf_float+0x8a>
 8003bb8:	2b54      	cmp	r3, #84	; 0x54
 8003bba:	d077      	beq.n	8003cac <_scanf_float+0x218>
 8003bbc:	2b59      	cmp	r3, #89	; 0x59
 8003bbe:	d199      	bne.n	8003af4 <_scanf_float+0x60>
 8003bc0:	2d07      	cmp	r5, #7
 8003bc2:	d197      	bne.n	8003af4 <_scanf_float+0x60>
 8003bc4:	2508      	movs	r5, #8
 8003bc6:	e029      	b.n	8003c1c <_scanf_float+0x188>
 8003bc8:	2b74      	cmp	r3, #116	; 0x74
 8003bca:	d06f      	beq.n	8003cac <_scanf_float+0x218>
 8003bcc:	2b79      	cmp	r3, #121	; 0x79
 8003bce:	e7f6      	b.n	8003bbe <_scanf_float+0x12a>
 8003bd0:	6821      	ldr	r1, [r4, #0]
 8003bd2:	05c8      	lsls	r0, r1, #23
 8003bd4:	d51a      	bpl.n	8003c0c <_scanf_float+0x178>
 8003bd6:	9b02      	ldr	r3, [sp, #8]
 8003bd8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003bdc:	6021      	str	r1, [r4, #0]
 8003bde:	f109 0901 	add.w	r9, r9, #1
 8003be2:	b11b      	cbz	r3, 8003bec <_scanf_float+0x158>
 8003be4:	3b01      	subs	r3, #1
 8003be6:	3201      	adds	r2, #1
 8003be8:	9302      	str	r3, [sp, #8]
 8003bea:	60a2      	str	r2, [r4, #8]
 8003bec:	68a3      	ldr	r3, [r4, #8]
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	60a3      	str	r3, [r4, #8]
 8003bf2:	6923      	ldr	r3, [r4, #16]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	6123      	str	r3, [r4, #16]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	607b      	str	r3, [r7, #4]
 8003c00:	f340 8084 	ble.w	8003d0c <_scanf_float+0x278>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	3301      	adds	r3, #1
 8003c08:	603b      	str	r3, [r7, #0]
 8003c0a:	e766      	b.n	8003ada <_scanf_float+0x46>
 8003c0c:	eb1a 0f05 	cmn.w	sl, r5
 8003c10:	f47f af70 	bne.w	8003af4 <_scanf_float+0x60>
 8003c14:	6822      	ldr	r2, [r4, #0]
 8003c16:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003c1a:	6022      	str	r2, [r4, #0]
 8003c1c:	f806 3b01 	strb.w	r3, [r6], #1
 8003c20:	e7e4      	b.n	8003bec <_scanf_float+0x158>
 8003c22:	6822      	ldr	r2, [r4, #0]
 8003c24:	0610      	lsls	r0, r2, #24
 8003c26:	f57f af65 	bpl.w	8003af4 <_scanf_float+0x60>
 8003c2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c2e:	e7f4      	b.n	8003c1a <_scanf_float+0x186>
 8003c30:	f1ba 0f00 	cmp.w	sl, #0
 8003c34:	d10e      	bne.n	8003c54 <_scanf_float+0x1c0>
 8003c36:	f1b9 0f00 	cmp.w	r9, #0
 8003c3a:	d10e      	bne.n	8003c5a <_scanf_float+0x1c6>
 8003c3c:	6822      	ldr	r2, [r4, #0]
 8003c3e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003c42:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003c46:	d108      	bne.n	8003c5a <_scanf_float+0x1c6>
 8003c48:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003c4c:	6022      	str	r2, [r4, #0]
 8003c4e:	f04f 0a01 	mov.w	sl, #1
 8003c52:	e7e3      	b.n	8003c1c <_scanf_float+0x188>
 8003c54:	f1ba 0f02 	cmp.w	sl, #2
 8003c58:	d055      	beq.n	8003d06 <_scanf_float+0x272>
 8003c5a:	2d01      	cmp	r5, #1
 8003c5c:	d002      	beq.n	8003c64 <_scanf_float+0x1d0>
 8003c5e:	2d04      	cmp	r5, #4
 8003c60:	f47f af48 	bne.w	8003af4 <_scanf_float+0x60>
 8003c64:	3501      	adds	r5, #1
 8003c66:	b2ed      	uxtb	r5, r5
 8003c68:	e7d8      	b.n	8003c1c <_scanf_float+0x188>
 8003c6a:	f1ba 0f01 	cmp.w	sl, #1
 8003c6e:	f47f af41 	bne.w	8003af4 <_scanf_float+0x60>
 8003c72:	f04f 0a02 	mov.w	sl, #2
 8003c76:	e7d1      	b.n	8003c1c <_scanf_float+0x188>
 8003c78:	b97d      	cbnz	r5, 8003c9a <_scanf_float+0x206>
 8003c7a:	f1b9 0f00 	cmp.w	r9, #0
 8003c7e:	f47f af3c 	bne.w	8003afa <_scanf_float+0x66>
 8003c82:	6822      	ldr	r2, [r4, #0]
 8003c84:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003c88:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003c8c:	f47f af39 	bne.w	8003b02 <_scanf_float+0x6e>
 8003c90:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003c94:	6022      	str	r2, [r4, #0]
 8003c96:	2501      	movs	r5, #1
 8003c98:	e7c0      	b.n	8003c1c <_scanf_float+0x188>
 8003c9a:	2d03      	cmp	r5, #3
 8003c9c:	d0e2      	beq.n	8003c64 <_scanf_float+0x1d0>
 8003c9e:	2d05      	cmp	r5, #5
 8003ca0:	e7de      	b.n	8003c60 <_scanf_float+0x1cc>
 8003ca2:	2d02      	cmp	r5, #2
 8003ca4:	f47f af26 	bne.w	8003af4 <_scanf_float+0x60>
 8003ca8:	2503      	movs	r5, #3
 8003caa:	e7b7      	b.n	8003c1c <_scanf_float+0x188>
 8003cac:	2d06      	cmp	r5, #6
 8003cae:	f47f af21 	bne.w	8003af4 <_scanf_float+0x60>
 8003cb2:	2507      	movs	r5, #7
 8003cb4:	e7b2      	b.n	8003c1c <_scanf_float+0x188>
 8003cb6:	6822      	ldr	r2, [r4, #0]
 8003cb8:	0591      	lsls	r1, r2, #22
 8003cba:	f57f af1b 	bpl.w	8003af4 <_scanf_float+0x60>
 8003cbe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003cc2:	6022      	str	r2, [r4, #0]
 8003cc4:	f8cd 9004 	str.w	r9, [sp, #4]
 8003cc8:	e7a8      	b.n	8003c1c <_scanf_float+0x188>
 8003cca:	6822      	ldr	r2, [r4, #0]
 8003ccc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003cd0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003cd4:	d006      	beq.n	8003ce4 <_scanf_float+0x250>
 8003cd6:	0550      	lsls	r0, r2, #21
 8003cd8:	f57f af0c 	bpl.w	8003af4 <_scanf_float+0x60>
 8003cdc:	f1b9 0f00 	cmp.w	r9, #0
 8003ce0:	f43f af0f 	beq.w	8003b02 <_scanf_float+0x6e>
 8003ce4:	0591      	lsls	r1, r2, #22
 8003ce6:	bf58      	it	pl
 8003ce8:	9901      	ldrpl	r1, [sp, #4]
 8003cea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003cee:	bf58      	it	pl
 8003cf0:	eba9 0101 	subpl.w	r1, r9, r1
 8003cf4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003cf8:	bf58      	it	pl
 8003cfa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003cfe:	6022      	str	r2, [r4, #0]
 8003d00:	f04f 0900 	mov.w	r9, #0
 8003d04:	e78a      	b.n	8003c1c <_scanf_float+0x188>
 8003d06:	f04f 0a03 	mov.w	sl, #3
 8003d0a:	e787      	b.n	8003c1c <_scanf_float+0x188>
 8003d0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003d10:	4639      	mov	r1, r7
 8003d12:	4640      	mov	r0, r8
 8003d14:	4798      	blx	r3
 8003d16:	2800      	cmp	r0, #0
 8003d18:	f43f aedf 	beq.w	8003ada <_scanf_float+0x46>
 8003d1c:	e6ea      	b.n	8003af4 <_scanf_float+0x60>
 8003d1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003d26:	463a      	mov	r2, r7
 8003d28:	4640      	mov	r0, r8
 8003d2a:	4798      	blx	r3
 8003d2c:	6923      	ldr	r3, [r4, #16]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	6123      	str	r3, [r4, #16]
 8003d32:	e6ec      	b.n	8003b0e <_scanf_float+0x7a>
 8003d34:	1e6b      	subs	r3, r5, #1
 8003d36:	2b06      	cmp	r3, #6
 8003d38:	d825      	bhi.n	8003d86 <_scanf_float+0x2f2>
 8003d3a:	2d02      	cmp	r5, #2
 8003d3c:	d836      	bhi.n	8003dac <_scanf_float+0x318>
 8003d3e:	455e      	cmp	r6, fp
 8003d40:	f67f aee8 	bls.w	8003b14 <_scanf_float+0x80>
 8003d44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d48:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003d4c:	463a      	mov	r2, r7
 8003d4e:	4640      	mov	r0, r8
 8003d50:	4798      	blx	r3
 8003d52:	6923      	ldr	r3, [r4, #16]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	6123      	str	r3, [r4, #16]
 8003d58:	e7f1      	b.n	8003d3e <_scanf_float+0x2aa>
 8003d5a:	9802      	ldr	r0, [sp, #8]
 8003d5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d60:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003d64:	9002      	str	r0, [sp, #8]
 8003d66:	463a      	mov	r2, r7
 8003d68:	4640      	mov	r0, r8
 8003d6a:	4798      	blx	r3
 8003d6c:	6923      	ldr	r3, [r4, #16]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	6123      	str	r3, [r4, #16]
 8003d72:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003d76:	fa5f fa8a 	uxtb.w	sl, sl
 8003d7a:	f1ba 0f02 	cmp.w	sl, #2
 8003d7e:	d1ec      	bne.n	8003d5a <_scanf_float+0x2c6>
 8003d80:	3d03      	subs	r5, #3
 8003d82:	b2ed      	uxtb	r5, r5
 8003d84:	1b76      	subs	r6, r6, r5
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	05da      	lsls	r2, r3, #23
 8003d8a:	d52f      	bpl.n	8003dec <_scanf_float+0x358>
 8003d8c:	055b      	lsls	r3, r3, #21
 8003d8e:	d510      	bpl.n	8003db2 <_scanf_float+0x31e>
 8003d90:	455e      	cmp	r6, fp
 8003d92:	f67f aebf 	bls.w	8003b14 <_scanf_float+0x80>
 8003d96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003d9e:	463a      	mov	r2, r7
 8003da0:	4640      	mov	r0, r8
 8003da2:	4798      	blx	r3
 8003da4:	6923      	ldr	r3, [r4, #16]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	6123      	str	r3, [r4, #16]
 8003daa:	e7f1      	b.n	8003d90 <_scanf_float+0x2fc>
 8003dac:	46aa      	mov	sl, r5
 8003dae:	9602      	str	r6, [sp, #8]
 8003db0:	e7df      	b.n	8003d72 <_scanf_float+0x2de>
 8003db2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003db6:	6923      	ldr	r3, [r4, #16]
 8003db8:	2965      	cmp	r1, #101	; 0x65
 8003dba:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003dbe:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8003dc2:	6123      	str	r3, [r4, #16]
 8003dc4:	d00c      	beq.n	8003de0 <_scanf_float+0x34c>
 8003dc6:	2945      	cmp	r1, #69	; 0x45
 8003dc8:	d00a      	beq.n	8003de0 <_scanf_float+0x34c>
 8003dca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003dce:	463a      	mov	r2, r7
 8003dd0:	4640      	mov	r0, r8
 8003dd2:	4798      	blx	r3
 8003dd4:	6923      	ldr	r3, [r4, #16]
 8003dd6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	1eb5      	subs	r5, r6, #2
 8003dde:	6123      	str	r3, [r4, #16]
 8003de0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003de4:	463a      	mov	r2, r7
 8003de6:	4640      	mov	r0, r8
 8003de8:	4798      	blx	r3
 8003dea:	462e      	mov	r6, r5
 8003dec:	6825      	ldr	r5, [r4, #0]
 8003dee:	f015 0510 	ands.w	r5, r5, #16
 8003df2:	d155      	bne.n	8003ea0 <_scanf_float+0x40c>
 8003df4:	7035      	strb	r5, [r6, #0]
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e00:	d11b      	bne.n	8003e3a <_scanf_float+0x3a6>
 8003e02:	9b01      	ldr	r3, [sp, #4]
 8003e04:	454b      	cmp	r3, r9
 8003e06:	eba3 0209 	sub.w	r2, r3, r9
 8003e0a:	d123      	bne.n	8003e54 <_scanf_float+0x3c0>
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	4659      	mov	r1, fp
 8003e10:	4640      	mov	r0, r8
 8003e12:	f000 fe79 	bl	8004b08 <_strtod_r>
 8003e16:	6822      	ldr	r2, [r4, #0]
 8003e18:	9b03      	ldr	r3, [sp, #12]
 8003e1a:	f012 0f02 	tst.w	r2, #2
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4606      	mov	r6, r0
 8003e22:	460f      	mov	r7, r1
 8003e24:	d021      	beq.n	8003e6a <_scanf_float+0x3d6>
 8003e26:	1d1a      	adds	r2, r3, #4
 8003e28:	9903      	ldr	r1, [sp, #12]
 8003e2a:	600a      	str	r2, [r1, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	e9c3 6700 	strd	r6, r7, [r3]
 8003e32:	68e3      	ldr	r3, [r4, #12]
 8003e34:	3301      	adds	r3, #1
 8003e36:	60e3      	str	r3, [r4, #12]
 8003e38:	e66d      	b.n	8003b16 <_scanf_float+0x82>
 8003e3a:	9b04      	ldr	r3, [sp, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0e5      	beq.n	8003e0c <_scanf_float+0x378>
 8003e40:	9905      	ldr	r1, [sp, #20]
 8003e42:	230a      	movs	r3, #10
 8003e44:	462a      	mov	r2, r5
 8003e46:	3101      	adds	r1, #1
 8003e48:	4640      	mov	r0, r8
 8003e4a:	f000 fedf 	bl	8004c0c <_strtol_r>
 8003e4e:	9b04      	ldr	r3, [sp, #16]
 8003e50:	9e05      	ldr	r6, [sp, #20]
 8003e52:	1ac2      	subs	r2, r0, r3
 8003e54:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003e58:	429e      	cmp	r6, r3
 8003e5a:	bf28      	it	cs
 8003e5c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003e60:	4910      	ldr	r1, [pc, #64]	; (8003ea4 <_scanf_float+0x410>)
 8003e62:	4630      	mov	r0, r6
 8003e64:	f000 f826 	bl	8003eb4 <siprintf>
 8003e68:	e7d0      	b.n	8003e0c <_scanf_float+0x378>
 8003e6a:	f012 0f04 	tst.w	r2, #4
 8003e6e:	f103 0204 	add.w	r2, r3, #4
 8003e72:	d1d9      	bne.n	8003e28 <_scanf_float+0x394>
 8003e74:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003e78:	f8cc 2000 	str.w	r2, [ip]
 8003e7c:	f8d3 8000 	ldr.w	r8, [r3]
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	f7fc ff0e 	bl	8000ca4 <__aeabi_dcmpun>
 8003e88:	b128      	cbz	r0, 8003e96 <_scanf_float+0x402>
 8003e8a:	4807      	ldr	r0, [pc, #28]	; (8003ea8 <_scanf_float+0x414>)
 8003e8c:	f000 f80e 	bl	8003eac <nanf>
 8003e90:	f8c8 0000 	str.w	r0, [r8]
 8003e94:	e7cd      	b.n	8003e32 <_scanf_float+0x39e>
 8003e96:	4630      	mov	r0, r6
 8003e98:	4639      	mov	r1, r7
 8003e9a:	f7fc ff61 	bl	8000d60 <__aeabi_d2f>
 8003e9e:	e7f7      	b.n	8003e90 <_scanf_float+0x3fc>
 8003ea0:	2500      	movs	r5, #0
 8003ea2:	e638      	b.n	8003b16 <_scanf_float+0x82>
 8003ea4:	08007c30 	.word	0x08007c30
 8003ea8:	08008038 	.word	0x08008038

08003eac <nanf>:
 8003eac:	4800      	ldr	r0, [pc, #0]	; (8003eb0 <nanf+0x4>)
 8003eae:	4770      	bx	lr
 8003eb0:	7fc00000 	.word	0x7fc00000

08003eb4 <siprintf>:
 8003eb4:	b40e      	push	{r1, r2, r3}
 8003eb6:	b500      	push	{lr}
 8003eb8:	b09c      	sub	sp, #112	; 0x70
 8003eba:	ab1d      	add	r3, sp, #116	; 0x74
 8003ebc:	9002      	str	r0, [sp, #8]
 8003ebe:	9006      	str	r0, [sp, #24]
 8003ec0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ec4:	4809      	ldr	r0, [pc, #36]	; (8003eec <siprintf+0x38>)
 8003ec6:	9107      	str	r1, [sp, #28]
 8003ec8:	9104      	str	r1, [sp, #16]
 8003eca:	4909      	ldr	r1, [pc, #36]	; (8003ef0 <siprintf+0x3c>)
 8003ecc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ed0:	9105      	str	r1, [sp, #20]
 8003ed2:	6800      	ldr	r0, [r0, #0]
 8003ed4:	9301      	str	r3, [sp, #4]
 8003ed6:	a902      	add	r1, sp, #8
 8003ed8:	f002 feaa 	bl	8006c30 <_svfiprintf_r>
 8003edc:	9b02      	ldr	r3, [sp, #8]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	701a      	strb	r2, [r3, #0]
 8003ee2:	b01c      	add	sp, #112	; 0x70
 8003ee4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ee8:	b003      	add	sp, #12
 8003eea:	4770      	bx	lr
 8003eec:	20000044 	.word	0x20000044
 8003ef0:	ffff0208 	.word	0xffff0208

08003ef4 <sulp>:
 8003ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef8:	460f      	mov	r7, r1
 8003efa:	4690      	mov	r8, r2
 8003efc:	f002 fc02 	bl	8006704 <__ulp>
 8003f00:	4604      	mov	r4, r0
 8003f02:	460d      	mov	r5, r1
 8003f04:	f1b8 0f00 	cmp.w	r8, #0
 8003f08:	d011      	beq.n	8003f2e <sulp+0x3a>
 8003f0a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003f0e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	dd0b      	ble.n	8003f2e <sulp+0x3a>
 8003f16:	051b      	lsls	r3, r3, #20
 8003f18:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003f1c:	2400      	movs	r4, #0
 8003f1e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003f22:	4622      	mov	r2, r4
 8003f24:	462b      	mov	r3, r5
 8003f26:	f7fc fc23 	bl	8000770 <__aeabi_dmul>
 8003f2a:	4604      	mov	r4, r0
 8003f2c:	460d      	mov	r5, r1
 8003f2e:	4620      	mov	r0, r4
 8003f30:	4629      	mov	r1, r5
 8003f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003f38 <_strtod_l>:
 8003f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f3c:	b09f      	sub	sp, #124	; 0x7c
 8003f3e:	469b      	mov	fp, r3
 8003f40:	2300      	movs	r3, #0
 8003f42:	931a      	str	r3, [sp, #104]	; 0x68
 8003f44:	4b9e      	ldr	r3, [pc, #632]	; (80041c0 <_strtod_l+0x288>)
 8003f46:	9215      	str	r2, [sp, #84]	; 0x54
 8003f48:	681f      	ldr	r7, [r3, #0]
 8003f4a:	4682      	mov	sl, r0
 8003f4c:	4638      	mov	r0, r7
 8003f4e:	460e      	mov	r6, r1
 8003f50:	f7fc f946 	bl	80001e0 <strlen>
 8003f54:	f04f 0800 	mov.w	r8, #0
 8003f58:	4604      	mov	r4, r0
 8003f5a:	f04f 0900 	mov.w	r9, #0
 8003f5e:	9619      	str	r6, [sp, #100]	; 0x64
 8003f60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003f62:	781a      	ldrb	r2, [r3, #0]
 8003f64:	2a2b      	cmp	r2, #43	; 0x2b
 8003f66:	d04c      	beq.n	8004002 <_strtod_l+0xca>
 8003f68:	d83a      	bhi.n	8003fe0 <_strtod_l+0xa8>
 8003f6a:	2a0d      	cmp	r2, #13
 8003f6c:	d833      	bhi.n	8003fd6 <_strtod_l+0x9e>
 8003f6e:	2a08      	cmp	r2, #8
 8003f70:	d833      	bhi.n	8003fda <_strtod_l+0xa2>
 8003f72:	2a00      	cmp	r2, #0
 8003f74:	d03d      	beq.n	8003ff2 <_strtod_l+0xba>
 8003f76:	2300      	movs	r3, #0
 8003f78:	930a      	str	r3, [sp, #40]	; 0x28
 8003f7a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8003f7c:	782b      	ldrb	r3, [r5, #0]
 8003f7e:	2b30      	cmp	r3, #48	; 0x30
 8003f80:	f040 80aa 	bne.w	80040d8 <_strtod_l+0x1a0>
 8003f84:	786b      	ldrb	r3, [r5, #1]
 8003f86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003f8a:	2b58      	cmp	r3, #88	; 0x58
 8003f8c:	d166      	bne.n	800405c <_strtod_l+0x124>
 8003f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f90:	9301      	str	r3, [sp, #4]
 8003f92:	ab1a      	add	r3, sp, #104	; 0x68
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	4a8b      	ldr	r2, [pc, #556]	; (80041c4 <_strtod_l+0x28c>)
 8003f98:	f8cd b008 	str.w	fp, [sp, #8]
 8003f9c:	ab1b      	add	r3, sp, #108	; 0x6c
 8003f9e:	a919      	add	r1, sp, #100	; 0x64
 8003fa0:	4650      	mov	r0, sl
 8003fa2:	f001 fd19 	bl	80059d8 <__gethex>
 8003fa6:	f010 0607 	ands.w	r6, r0, #7
 8003faa:	4604      	mov	r4, r0
 8003fac:	d005      	beq.n	8003fba <_strtod_l+0x82>
 8003fae:	2e06      	cmp	r6, #6
 8003fb0:	d129      	bne.n	8004006 <_strtod_l+0xce>
 8003fb2:	3501      	adds	r5, #1
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	9519      	str	r5, [sp, #100]	; 0x64
 8003fb8:	930a      	str	r3, [sp, #40]	; 0x28
 8003fba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f040 858a 	bne.w	8004ad6 <_strtod_l+0xb9e>
 8003fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fc4:	b1d3      	cbz	r3, 8003ffc <_strtod_l+0xc4>
 8003fc6:	4642      	mov	r2, r8
 8003fc8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003fcc:	4610      	mov	r0, r2
 8003fce:	4619      	mov	r1, r3
 8003fd0:	b01f      	add	sp, #124	; 0x7c
 8003fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fd6:	2a20      	cmp	r2, #32
 8003fd8:	d1cd      	bne.n	8003f76 <_strtod_l+0x3e>
 8003fda:	3301      	adds	r3, #1
 8003fdc:	9319      	str	r3, [sp, #100]	; 0x64
 8003fde:	e7bf      	b.n	8003f60 <_strtod_l+0x28>
 8003fe0:	2a2d      	cmp	r2, #45	; 0x2d
 8003fe2:	d1c8      	bne.n	8003f76 <_strtod_l+0x3e>
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	920a      	str	r2, [sp, #40]	; 0x28
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	9219      	str	r2, [sp, #100]	; 0x64
 8003fec:	785b      	ldrb	r3, [r3, #1]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1c3      	bne.n	8003f7a <_strtod_l+0x42>
 8003ff2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003ff4:	9619      	str	r6, [sp, #100]	; 0x64
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f040 856b 	bne.w	8004ad2 <_strtod_l+0xb9a>
 8003ffc:	4642      	mov	r2, r8
 8003ffe:	464b      	mov	r3, r9
 8004000:	e7e4      	b.n	8003fcc <_strtod_l+0x94>
 8004002:	2200      	movs	r2, #0
 8004004:	e7ef      	b.n	8003fe6 <_strtod_l+0xae>
 8004006:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004008:	b13a      	cbz	r2, 800401a <_strtod_l+0xe2>
 800400a:	2135      	movs	r1, #53	; 0x35
 800400c:	a81c      	add	r0, sp, #112	; 0x70
 800400e:	f002 fc7d 	bl	800690c <__copybits>
 8004012:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004014:	4650      	mov	r0, sl
 8004016:	f002 f849 	bl	80060ac <_Bfree>
 800401a:	3e01      	subs	r6, #1
 800401c:	2e04      	cmp	r6, #4
 800401e:	d806      	bhi.n	800402e <_strtod_l+0xf6>
 8004020:	e8df f006 	tbb	[pc, r6]
 8004024:	1714030a 	.word	0x1714030a
 8004028:	0a          	.byte	0x0a
 8004029:	00          	.byte	0x00
 800402a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800402e:	0721      	lsls	r1, r4, #28
 8004030:	d5c3      	bpl.n	8003fba <_strtod_l+0x82>
 8004032:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004036:	e7c0      	b.n	8003fba <_strtod_l+0x82>
 8004038:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800403c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800403e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004042:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004046:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800404a:	e7f0      	b.n	800402e <_strtod_l+0xf6>
 800404c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80041c8 <_strtod_l+0x290>
 8004050:	e7ed      	b.n	800402e <_strtod_l+0xf6>
 8004052:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004056:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800405a:	e7e8      	b.n	800402e <_strtod_l+0xf6>
 800405c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	9219      	str	r2, [sp, #100]	; 0x64
 8004062:	785b      	ldrb	r3, [r3, #1]
 8004064:	2b30      	cmp	r3, #48	; 0x30
 8004066:	d0f9      	beq.n	800405c <_strtod_l+0x124>
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0a6      	beq.n	8003fba <_strtod_l+0x82>
 800406c:	2301      	movs	r3, #1
 800406e:	9307      	str	r3, [sp, #28]
 8004070:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004072:	9308      	str	r3, [sp, #32]
 8004074:	2300      	movs	r3, #0
 8004076:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800407a:	469b      	mov	fp, r3
 800407c:	220a      	movs	r2, #10
 800407e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004080:	7805      	ldrb	r5, [r0, #0]
 8004082:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004086:	b2d9      	uxtb	r1, r3
 8004088:	2909      	cmp	r1, #9
 800408a:	d927      	bls.n	80040dc <_strtod_l+0x1a4>
 800408c:	4622      	mov	r2, r4
 800408e:	4639      	mov	r1, r7
 8004090:	f002 fee4 	bl	8006e5c <strncmp>
 8004094:	2800      	cmp	r0, #0
 8004096:	d033      	beq.n	8004100 <_strtod_l+0x1c8>
 8004098:	2000      	movs	r0, #0
 800409a:	462a      	mov	r2, r5
 800409c:	465c      	mov	r4, fp
 800409e:	9004      	str	r0, [sp, #16]
 80040a0:	4603      	mov	r3, r0
 80040a2:	2a65      	cmp	r2, #101	; 0x65
 80040a4:	d001      	beq.n	80040aa <_strtod_l+0x172>
 80040a6:	2a45      	cmp	r2, #69	; 0x45
 80040a8:	d114      	bne.n	80040d4 <_strtod_l+0x19c>
 80040aa:	b91c      	cbnz	r4, 80040b4 <_strtod_l+0x17c>
 80040ac:	9a07      	ldr	r2, [sp, #28]
 80040ae:	4302      	orrs	r2, r0
 80040b0:	d09f      	beq.n	8003ff2 <_strtod_l+0xba>
 80040b2:	2400      	movs	r4, #0
 80040b4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80040b6:	1c72      	adds	r2, r6, #1
 80040b8:	9219      	str	r2, [sp, #100]	; 0x64
 80040ba:	7872      	ldrb	r2, [r6, #1]
 80040bc:	2a2b      	cmp	r2, #43	; 0x2b
 80040be:	d079      	beq.n	80041b4 <_strtod_l+0x27c>
 80040c0:	2a2d      	cmp	r2, #45	; 0x2d
 80040c2:	f000 8083 	beq.w	80041cc <_strtod_l+0x294>
 80040c6:	2700      	movs	r7, #0
 80040c8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80040cc:	2909      	cmp	r1, #9
 80040ce:	f240 8083 	bls.w	80041d8 <_strtod_l+0x2a0>
 80040d2:	9619      	str	r6, [sp, #100]	; 0x64
 80040d4:	2500      	movs	r5, #0
 80040d6:	e09f      	b.n	8004218 <_strtod_l+0x2e0>
 80040d8:	2300      	movs	r3, #0
 80040da:	e7c8      	b.n	800406e <_strtod_l+0x136>
 80040dc:	f1bb 0f08 	cmp.w	fp, #8
 80040e0:	bfd5      	itete	le
 80040e2:	9906      	ldrle	r1, [sp, #24]
 80040e4:	9905      	ldrgt	r1, [sp, #20]
 80040e6:	fb02 3301 	mlale	r3, r2, r1, r3
 80040ea:	fb02 3301 	mlagt	r3, r2, r1, r3
 80040ee:	f100 0001 	add.w	r0, r0, #1
 80040f2:	bfd4      	ite	le
 80040f4:	9306      	strle	r3, [sp, #24]
 80040f6:	9305      	strgt	r3, [sp, #20]
 80040f8:	f10b 0b01 	add.w	fp, fp, #1
 80040fc:	9019      	str	r0, [sp, #100]	; 0x64
 80040fe:	e7be      	b.n	800407e <_strtod_l+0x146>
 8004100:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004102:	191a      	adds	r2, r3, r4
 8004104:	9219      	str	r2, [sp, #100]	; 0x64
 8004106:	5d1a      	ldrb	r2, [r3, r4]
 8004108:	f1bb 0f00 	cmp.w	fp, #0
 800410c:	d036      	beq.n	800417c <_strtod_l+0x244>
 800410e:	9004      	str	r0, [sp, #16]
 8004110:	465c      	mov	r4, fp
 8004112:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004116:	2b09      	cmp	r3, #9
 8004118:	d912      	bls.n	8004140 <_strtod_l+0x208>
 800411a:	2301      	movs	r3, #1
 800411c:	e7c1      	b.n	80040a2 <_strtod_l+0x16a>
 800411e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	9219      	str	r2, [sp, #100]	; 0x64
 8004124:	785a      	ldrb	r2, [r3, #1]
 8004126:	3001      	adds	r0, #1
 8004128:	2a30      	cmp	r2, #48	; 0x30
 800412a:	d0f8      	beq.n	800411e <_strtod_l+0x1e6>
 800412c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004130:	2b08      	cmp	r3, #8
 8004132:	f200 84d5 	bhi.w	8004ae0 <_strtod_l+0xba8>
 8004136:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004138:	9004      	str	r0, [sp, #16]
 800413a:	2000      	movs	r0, #0
 800413c:	9308      	str	r3, [sp, #32]
 800413e:	4604      	mov	r4, r0
 8004140:	3a30      	subs	r2, #48	; 0x30
 8004142:	f100 0301 	add.w	r3, r0, #1
 8004146:	d013      	beq.n	8004170 <_strtod_l+0x238>
 8004148:	9904      	ldr	r1, [sp, #16]
 800414a:	4419      	add	r1, r3
 800414c:	9104      	str	r1, [sp, #16]
 800414e:	4623      	mov	r3, r4
 8004150:	1905      	adds	r5, r0, r4
 8004152:	210a      	movs	r1, #10
 8004154:	42ab      	cmp	r3, r5
 8004156:	d113      	bne.n	8004180 <_strtod_l+0x248>
 8004158:	1823      	adds	r3, r4, r0
 800415a:	2b08      	cmp	r3, #8
 800415c:	f104 0401 	add.w	r4, r4, #1
 8004160:	4404      	add	r4, r0
 8004162:	dc1b      	bgt.n	800419c <_strtod_l+0x264>
 8004164:	9906      	ldr	r1, [sp, #24]
 8004166:	230a      	movs	r3, #10
 8004168:	fb03 2301 	mla	r3, r3, r1, r2
 800416c:	9306      	str	r3, [sp, #24]
 800416e:	2300      	movs	r3, #0
 8004170:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004172:	1c51      	adds	r1, r2, #1
 8004174:	9119      	str	r1, [sp, #100]	; 0x64
 8004176:	7852      	ldrb	r2, [r2, #1]
 8004178:	4618      	mov	r0, r3
 800417a:	e7ca      	b.n	8004112 <_strtod_l+0x1da>
 800417c:	4658      	mov	r0, fp
 800417e:	e7d3      	b.n	8004128 <_strtod_l+0x1f0>
 8004180:	2b08      	cmp	r3, #8
 8004182:	dc04      	bgt.n	800418e <_strtod_l+0x256>
 8004184:	9f06      	ldr	r7, [sp, #24]
 8004186:	434f      	muls	r7, r1
 8004188:	9706      	str	r7, [sp, #24]
 800418a:	3301      	adds	r3, #1
 800418c:	e7e2      	b.n	8004154 <_strtod_l+0x21c>
 800418e:	1c5f      	adds	r7, r3, #1
 8004190:	2f10      	cmp	r7, #16
 8004192:	bfde      	ittt	le
 8004194:	9f05      	ldrle	r7, [sp, #20]
 8004196:	434f      	mulle	r7, r1
 8004198:	9705      	strle	r7, [sp, #20]
 800419a:	e7f6      	b.n	800418a <_strtod_l+0x252>
 800419c:	2c10      	cmp	r4, #16
 800419e:	bfdf      	itttt	le
 80041a0:	9905      	ldrle	r1, [sp, #20]
 80041a2:	230a      	movle	r3, #10
 80041a4:	fb03 2301 	mlale	r3, r3, r1, r2
 80041a8:	9305      	strle	r3, [sp, #20]
 80041aa:	e7e0      	b.n	800416e <_strtod_l+0x236>
 80041ac:	2300      	movs	r3, #0
 80041ae:	9304      	str	r3, [sp, #16]
 80041b0:	2301      	movs	r3, #1
 80041b2:	e77b      	b.n	80040ac <_strtod_l+0x174>
 80041b4:	2700      	movs	r7, #0
 80041b6:	1cb2      	adds	r2, r6, #2
 80041b8:	9219      	str	r2, [sp, #100]	; 0x64
 80041ba:	78b2      	ldrb	r2, [r6, #2]
 80041bc:	e784      	b.n	80040c8 <_strtod_l+0x190>
 80041be:	bf00      	nop
 80041c0:	08007e80 	.word	0x08007e80
 80041c4:	08007c38 	.word	0x08007c38
 80041c8:	7ff00000 	.word	0x7ff00000
 80041cc:	2701      	movs	r7, #1
 80041ce:	e7f2      	b.n	80041b6 <_strtod_l+0x27e>
 80041d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80041d2:	1c51      	adds	r1, r2, #1
 80041d4:	9119      	str	r1, [sp, #100]	; 0x64
 80041d6:	7852      	ldrb	r2, [r2, #1]
 80041d8:	2a30      	cmp	r2, #48	; 0x30
 80041da:	d0f9      	beq.n	80041d0 <_strtod_l+0x298>
 80041dc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80041e0:	2908      	cmp	r1, #8
 80041e2:	f63f af77 	bhi.w	80040d4 <_strtod_l+0x19c>
 80041e6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80041ea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80041ec:	9209      	str	r2, [sp, #36]	; 0x24
 80041ee:	f04f 0e0a 	mov.w	lr, #10
 80041f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80041f4:	1c51      	adds	r1, r2, #1
 80041f6:	9119      	str	r1, [sp, #100]	; 0x64
 80041f8:	7852      	ldrb	r2, [r2, #1]
 80041fa:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80041fe:	2d09      	cmp	r5, #9
 8004200:	d935      	bls.n	800426e <_strtod_l+0x336>
 8004202:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004204:	1b49      	subs	r1, r1, r5
 8004206:	2908      	cmp	r1, #8
 8004208:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800420c:	dc02      	bgt.n	8004214 <_strtod_l+0x2dc>
 800420e:	4565      	cmp	r5, ip
 8004210:	bfa8      	it	ge
 8004212:	4665      	movge	r5, ip
 8004214:	b107      	cbz	r7, 8004218 <_strtod_l+0x2e0>
 8004216:	426d      	negs	r5, r5
 8004218:	2c00      	cmp	r4, #0
 800421a:	d14c      	bne.n	80042b6 <_strtod_l+0x37e>
 800421c:	9907      	ldr	r1, [sp, #28]
 800421e:	4301      	orrs	r1, r0
 8004220:	f47f aecb 	bne.w	8003fba <_strtod_l+0x82>
 8004224:	2b00      	cmp	r3, #0
 8004226:	f47f aee4 	bne.w	8003ff2 <_strtod_l+0xba>
 800422a:	2a69      	cmp	r2, #105	; 0x69
 800422c:	d026      	beq.n	800427c <_strtod_l+0x344>
 800422e:	dc23      	bgt.n	8004278 <_strtod_l+0x340>
 8004230:	2a49      	cmp	r2, #73	; 0x49
 8004232:	d023      	beq.n	800427c <_strtod_l+0x344>
 8004234:	2a4e      	cmp	r2, #78	; 0x4e
 8004236:	f47f aedc 	bne.w	8003ff2 <_strtod_l+0xba>
 800423a:	499d      	ldr	r1, [pc, #628]	; (80044b0 <_strtod_l+0x578>)
 800423c:	a819      	add	r0, sp, #100	; 0x64
 800423e:	f001 fe19 	bl	8005e74 <__match>
 8004242:	2800      	cmp	r0, #0
 8004244:	f43f aed5 	beq.w	8003ff2 <_strtod_l+0xba>
 8004248:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b28      	cmp	r3, #40	; 0x28
 800424e:	d12c      	bne.n	80042aa <_strtod_l+0x372>
 8004250:	4998      	ldr	r1, [pc, #608]	; (80044b4 <_strtod_l+0x57c>)
 8004252:	aa1c      	add	r2, sp, #112	; 0x70
 8004254:	a819      	add	r0, sp, #100	; 0x64
 8004256:	f001 fe21 	bl	8005e9c <__hexnan>
 800425a:	2805      	cmp	r0, #5
 800425c:	d125      	bne.n	80042aa <_strtod_l+0x372>
 800425e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004260:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004264:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004268:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800426c:	e6a5      	b.n	8003fba <_strtod_l+0x82>
 800426e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8004272:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004276:	e7bc      	b.n	80041f2 <_strtod_l+0x2ba>
 8004278:	2a6e      	cmp	r2, #110	; 0x6e
 800427a:	e7dc      	b.n	8004236 <_strtod_l+0x2fe>
 800427c:	498e      	ldr	r1, [pc, #568]	; (80044b8 <_strtod_l+0x580>)
 800427e:	a819      	add	r0, sp, #100	; 0x64
 8004280:	f001 fdf8 	bl	8005e74 <__match>
 8004284:	2800      	cmp	r0, #0
 8004286:	f43f aeb4 	beq.w	8003ff2 <_strtod_l+0xba>
 800428a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800428c:	498b      	ldr	r1, [pc, #556]	; (80044bc <_strtod_l+0x584>)
 800428e:	3b01      	subs	r3, #1
 8004290:	a819      	add	r0, sp, #100	; 0x64
 8004292:	9319      	str	r3, [sp, #100]	; 0x64
 8004294:	f001 fdee 	bl	8005e74 <__match>
 8004298:	b910      	cbnz	r0, 80042a0 <_strtod_l+0x368>
 800429a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800429c:	3301      	adds	r3, #1
 800429e:	9319      	str	r3, [sp, #100]	; 0x64
 80042a0:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80044c0 <_strtod_l+0x588>
 80042a4:	f04f 0800 	mov.w	r8, #0
 80042a8:	e687      	b.n	8003fba <_strtod_l+0x82>
 80042aa:	4886      	ldr	r0, [pc, #536]	; (80044c4 <_strtod_l+0x58c>)
 80042ac:	f002 fdc0 	bl	8006e30 <nan>
 80042b0:	4680      	mov	r8, r0
 80042b2:	4689      	mov	r9, r1
 80042b4:	e681      	b.n	8003fba <_strtod_l+0x82>
 80042b6:	9b04      	ldr	r3, [sp, #16]
 80042b8:	9806      	ldr	r0, [sp, #24]
 80042ba:	1aeb      	subs	r3, r5, r3
 80042bc:	f1bb 0f00 	cmp.w	fp, #0
 80042c0:	bf08      	it	eq
 80042c2:	46a3      	moveq	fp, r4
 80042c4:	2c10      	cmp	r4, #16
 80042c6:	9307      	str	r3, [sp, #28]
 80042c8:	4626      	mov	r6, r4
 80042ca:	bfa8      	it	ge
 80042cc:	2610      	movge	r6, #16
 80042ce:	f7fc f9d5 	bl	800067c <__aeabi_ui2d>
 80042d2:	2c09      	cmp	r4, #9
 80042d4:	4680      	mov	r8, r0
 80042d6:	4689      	mov	r9, r1
 80042d8:	dd13      	ble.n	8004302 <_strtod_l+0x3ca>
 80042da:	4b7b      	ldr	r3, [pc, #492]	; (80044c8 <_strtod_l+0x590>)
 80042dc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80042e0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80042e4:	f7fc fa44 	bl	8000770 <__aeabi_dmul>
 80042e8:	4680      	mov	r8, r0
 80042ea:	9805      	ldr	r0, [sp, #20]
 80042ec:	4689      	mov	r9, r1
 80042ee:	f7fc f9c5 	bl	800067c <__aeabi_ui2d>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4640      	mov	r0, r8
 80042f8:	4649      	mov	r1, r9
 80042fa:	f7fc f883 	bl	8000404 <__adddf3>
 80042fe:	4680      	mov	r8, r0
 8004300:	4689      	mov	r9, r1
 8004302:	2c0f      	cmp	r4, #15
 8004304:	dc36      	bgt.n	8004374 <_strtod_l+0x43c>
 8004306:	9b07      	ldr	r3, [sp, #28]
 8004308:	2b00      	cmp	r3, #0
 800430a:	f43f ae56 	beq.w	8003fba <_strtod_l+0x82>
 800430e:	dd22      	ble.n	8004356 <_strtod_l+0x41e>
 8004310:	2b16      	cmp	r3, #22
 8004312:	dc09      	bgt.n	8004328 <_strtod_l+0x3f0>
 8004314:	496c      	ldr	r1, [pc, #432]	; (80044c8 <_strtod_l+0x590>)
 8004316:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800431a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800431e:	4642      	mov	r2, r8
 8004320:	464b      	mov	r3, r9
 8004322:	f7fc fa25 	bl	8000770 <__aeabi_dmul>
 8004326:	e7c3      	b.n	80042b0 <_strtod_l+0x378>
 8004328:	9a07      	ldr	r2, [sp, #28]
 800432a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800432e:	4293      	cmp	r3, r2
 8004330:	db20      	blt.n	8004374 <_strtod_l+0x43c>
 8004332:	4d65      	ldr	r5, [pc, #404]	; (80044c8 <_strtod_l+0x590>)
 8004334:	f1c4 040f 	rsb	r4, r4, #15
 8004338:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800433c:	4642      	mov	r2, r8
 800433e:	464b      	mov	r3, r9
 8004340:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004344:	f7fc fa14 	bl	8000770 <__aeabi_dmul>
 8004348:	9b07      	ldr	r3, [sp, #28]
 800434a:	1b1c      	subs	r4, r3, r4
 800434c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004350:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004354:	e7e5      	b.n	8004322 <_strtod_l+0x3ea>
 8004356:	9b07      	ldr	r3, [sp, #28]
 8004358:	3316      	adds	r3, #22
 800435a:	db0b      	blt.n	8004374 <_strtod_l+0x43c>
 800435c:	9b04      	ldr	r3, [sp, #16]
 800435e:	1b5d      	subs	r5, r3, r5
 8004360:	4b59      	ldr	r3, [pc, #356]	; (80044c8 <_strtod_l+0x590>)
 8004362:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004366:	e9d5 2300 	ldrd	r2, r3, [r5]
 800436a:	4640      	mov	r0, r8
 800436c:	4649      	mov	r1, r9
 800436e:	f7fc fb29 	bl	80009c4 <__aeabi_ddiv>
 8004372:	e79d      	b.n	80042b0 <_strtod_l+0x378>
 8004374:	9b07      	ldr	r3, [sp, #28]
 8004376:	1ba6      	subs	r6, r4, r6
 8004378:	441e      	add	r6, r3
 800437a:	2e00      	cmp	r6, #0
 800437c:	dd74      	ble.n	8004468 <_strtod_l+0x530>
 800437e:	f016 030f 	ands.w	r3, r6, #15
 8004382:	d00a      	beq.n	800439a <_strtod_l+0x462>
 8004384:	4950      	ldr	r1, [pc, #320]	; (80044c8 <_strtod_l+0x590>)
 8004386:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800438a:	4642      	mov	r2, r8
 800438c:	464b      	mov	r3, r9
 800438e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004392:	f7fc f9ed 	bl	8000770 <__aeabi_dmul>
 8004396:	4680      	mov	r8, r0
 8004398:	4689      	mov	r9, r1
 800439a:	f036 060f 	bics.w	r6, r6, #15
 800439e:	d052      	beq.n	8004446 <_strtod_l+0x50e>
 80043a0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80043a4:	dd27      	ble.n	80043f6 <_strtod_l+0x4be>
 80043a6:	f04f 0b00 	mov.w	fp, #0
 80043aa:	f8cd b010 	str.w	fp, [sp, #16]
 80043ae:	f8cd b020 	str.w	fp, [sp, #32]
 80043b2:	f8cd b018 	str.w	fp, [sp, #24]
 80043b6:	2322      	movs	r3, #34	; 0x22
 80043b8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80044c0 <_strtod_l+0x588>
 80043bc:	f8ca 3000 	str.w	r3, [sl]
 80043c0:	f04f 0800 	mov.w	r8, #0
 80043c4:	9b08      	ldr	r3, [sp, #32]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f43f adf7 	beq.w	8003fba <_strtod_l+0x82>
 80043cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80043ce:	4650      	mov	r0, sl
 80043d0:	f001 fe6c 	bl	80060ac <_Bfree>
 80043d4:	9906      	ldr	r1, [sp, #24]
 80043d6:	4650      	mov	r0, sl
 80043d8:	f001 fe68 	bl	80060ac <_Bfree>
 80043dc:	9904      	ldr	r1, [sp, #16]
 80043de:	4650      	mov	r0, sl
 80043e0:	f001 fe64 	bl	80060ac <_Bfree>
 80043e4:	9908      	ldr	r1, [sp, #32]
 80043e6:	4650      	mov	r0, sl
 80043e8:	f001 fe60 	bl	80060ac <_Bfree>
 80043ec:	4659      	mov	r1, fp
 80043ee:	4650      	mov	r0, sl
 80043f0:	f001 fe5c 	bl	80060ac <_Bfree>
 80043f4:	e5e1      	b.n	8003fba <_strtod_l+0x82>
 80043f6:	4b35      	ldr	r3, [pc, #212]	; (80044cc <_strtod_l+0x594>)
 80043f8:	9305      	str	r3, [sp, #20]
 80043fa:	2300      	movs	r3, #0
 80043fc:	1136      	asrs	r6, r6, #4
 80043fe:	4640      	mov	r0, r8
 8004400:	4649      	mov	r1, r9
 8004402:	461f      	mov	r7, r3
 8004404:	2e01      	cmp	r6, #1
 8004406:	dc21      	bgt.n	800444c <_strtod_l+0x514>
 8004408:	b10b      	cbz	r3, 800440e <_strtod_l+0x4d6>
 800440a:	4680      	mov	r8, r0
 800440c:	4689      	mov	r9, r1
 800440e:	4b2f      	ldr	r3, [pc, #188]	; (80044cc <_strtod_l+0x594>)
 8004410:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004414:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004418:	4642      	mov	r2, r8
 800441a:	464b      	mov	r3, r9
 800441c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004420:	f7fc f9a6 	bl	8000770 <__aeabi_dmul>
 8004424:	4b26      	ldr	r3, [pc, #152]	; (80044c0 <_strtod_l+0x588>)
 8004426:	460a      	mov	r2, r1
 8004428:	400b      	ands	r3, r1
 800442a:	4929      	ldr	r1, [pc, #164]	; (80044d0 <_strtod_l+0x598>)
 800442c:	428b      	cmp	r3, r1
 800442e:	4680      	mov	r8, r0
 8004430:	d8b9      	bhi.n	80043a6 <_strtod_l+0x46e>
 8004432:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004436:	428b      	cmp	r3, r1
 8004438:	bf86      	itte	hi
 800443a:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 80044d4 <_strtod_l+0x59c>
 800443e:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8004442:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8004446:	2300      	movs	r3, #0
 8004448:	9305      	str	r3, [sp, #20]
 800444a:	e07f      	b.n	800454c <_strtod_l+0x614>
 800444c:	07f2      	lsls	r2, r6, #31
 800444e:	d505      	bpl.n	800445c <_strtod_l+0x524>
 8004450:	9b05      	ldr	r3, [sp, #20]
 8004452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004456:	f7fc f98b 	bl	8000770 <__aeabi_dmul>
 800445a:	2301      	movs	r3, #1
 800445c:	9a05      	ldr	r2, [sp, #20]
 800445e:	3208      	adds	r2, #8
 8004460:	3701      	adds	r7, #1
 8004462:	1076      	asrs	r6, r6, #1
 8004464:	9205      	str	r2, [sp, #20]
 8004466:	e7cd      	b.n	8004404 <_strtod_l+0x4cc>
 8004468:	d0ed      	beq.n	8004446 <_strtod_l+0x50e>
 800446a:	4276      	negs	r6, r6
 800446c:	f016 020f 	ands.w	r2, r6, #15
 8004470:	d00a      	beq.n	8004488 <_strtod_l+0x550>
 8004472:	4b15      	ldr	r3, [pc, #84]	; (80044c8 <_strtod_l+0x590>)
 8004474:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004478:	4640      	mov	r0, r8
 800447a:	4649      	mov	r1, r9
 800447c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004480:	f7fc faa0 	bl	80009c4 <__aeabi_ddiv>
 8004484:	4680      	mov	r8, r0
 8004486:	4689      	mov	r9, r1
 8004488:	1136      	asrs	r6, r6, #4
 800448a:	d0dc      	beq.n	8004446 <_strtod_l+0x50e>
 800448c:	2e1f      	cmp	r6, #31
 800448e:	dd23      	ble.n	80044d8 <_strtod_l+0x5a0>
 8004490:	f04f 0b00 	mov.w	fp, #0
 8004494:	f8cd b010 	str.w	fp, [sp, #16]
 8004498:	f8cd b020 	str.w	fp, [sp, #32]
 800449c:	f8cd b018 	str.w	fp, [sp, #24]
 80044a0:	2322      	movs	r3, #34	; 0x22
 80044a2:	f04f 0800 	mov.w	r8, #0
 80044a6:	f04f 0900 	mov.w	r9, #0
 80044aa:	f8ca 3000 	str.w	r3, [sl]
 80044ae:	e789      	b.n	80043c4 <_strtod_l+0x48c>
 80044b0:	08007c09 	.word	0x08007c09
 80044b4:	08007c4c 	.word	0x08007c4c
 80044b8:	08007c01 	.word	0x08007c01
 80044bc:	08007d8c 	.word	0x08007d8c
 80044c0:	7ff00000 	.word	0x7ff00000
 80044c4:	08008038 	.word	0x08008038
 80044c8:	08007f18 	.word	0x08007f18
 80044cc:	08007ef0 	.word	0x08007ef0
 80044d0:	7ca00000 	.word	0x7ca00000
 80044d4:	7fefffff 	.word	0x7fefffff
 80044d8:	f016 0310 	ands.w	r3, r6, #16
 80044dc:	bf18      	it	ne
 80044de:	236a      	movne	r3, #106	; 0x6a
 80044e0:	4fb1      	ldr	r7, [pc, #708]	; (80047a8 <_strtod_l+0x870>)
 80044e2:	9305      	str	r3, [sp, #20]
 80044e4:	4640      	mov	r0, r8
 80044e6:	4649      	mov	r1, r9
 80044e8:	2300      	movs	r3, #0
 80044ea:	07f2      	lsls	r2, r6, #31
 80044ec:	d504      	bpl.n	80044f8 <_strtod_l+0x5c0>
 80044ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044f2:	f7fc f93d 	bl	8000770 <__aeabi_dmul>
 80044f6:	2301      	movs	r3, #1
 80044f8:	1076      	asrs	r6, r6, #1
 80044fa:	f107 0708 	add.w	r7, r7, #8
 80044fe:	d1f4      	bne.n	80044ea <_strtod_l+0x5b2>
 8004500:	b10b      	cbz	r3, 8004506 <_strtod_l+0x5ce>
 8004502:	4680      	mov	r8, r0
 8004504:	4689      	mov	r9, r1
 8004506:	9b05      	ldr	r3, [sp, #20]
 8004508:	b1c3      	cbz	r3, 800453c <_strtod_l+0x604>
 800450a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800450e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004512:	2b00      	cmp	r3, #0
 8004514:	4649      	mov	r1, r9
 8004516:	dd11      	ble.n	800453c <_strtod_l+0x604>
 8004518:	2b1f      	cmp	r3, #31
 800451a:	f340 8124 	ble.w	8004766 <_strtod_l+0x82e>
 800451e:	2b34      	cmp	r3, #52	; 0x34
 8004520:	bfde      	ittt	le
 8004522:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004526:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800452a:	fa03 f202 	lslle.w	r2, r3, r2
 800452e:	f04f 0800 	mov.w	r8, #0
 8004532:	bfcc      	ite	gt
 8004534:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004538:	ea02 0901 	andle.w	r9, r2, r1
 800453c:	2200      	movs	r2, #0
 800453e:	2300      	movs	r3, #0
 8004540:	4640      	mov	r0, r8
 8004542:	4649      	mov	r1, r9
 8004544:	f7fc fb7c 	bl	8000c40 <__aeabi_dcmpeq>
 8004548:	2800      	cmp	r0, #0
 800454a:	d1a1      	bne.n	8004490 <_strtod_l+0x558>
 800454c:	9b06      	ldr	r3, [sp, #24]
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	9908      	ldr	r1, [sp, #32]
 8004552:	4623      	mov	r3, r4
 8004554:	465a      	mov	r2, fp
 8004556:	4650      	mov	r0, sl
 8004558:	f001 fe10 	bl	800617c <__s2b>
 800455c:	9008      	str	r0, [sp, #32]
 800455e:	2800      	cmp	r0, #0
 8004560:	f43f af21 	beq.w	80043a6 <_strtod_l+0x46e>
 8004564:	9b04      	ldr	r3, [sp, #16]
 8004566:	1b5d      	subs	r5, r3, r5
 8004568:	9b07      	ldr	r3, [sp, #28]
 800456a:	2b00      	cmp	r3, #0
 800456c:	bfb4      	ite	lt
 800456e:	462b      	movlt	r3, r5
 8004570:	2300      	movge	r3, #0
 8004572:	930e      	str	r3, [sp, #56]	; 0x38
 8004574:	9b07      	ldr	r3, [sp, #28]
 8004576:	f04f 0b00 	mov.w	fp, #0
 800457a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800457e:	9314      	str	r3, [sp, #80]	; 0x50
 8004580:	f8cd b010 	str.w	fp, [sp, #16]
 8004584:	9b08      	ldr	r3, [sp, #32]
 8004586:	4650      	mov	r0, sl
 8004588:	6859      	ldr	r1, [r3, #4]
 800458a:	f001 fd4f 	bl	800602c <_Balloc>
 800458e:	9006      	str	r0, [sp, #24]
 8004590:	2800      	cmp	r0, #0
 8004592:	f43f af10 	beq.w	80043b6 <_strtod_l+0x47e>
 8004596:	9b08      	ldr	r3, [sp, #32]
 8004598:	691a      	ldr	r2, [r3, #16]
 800459a:	3202      	adds	r2, #2
 800459c:	f103 010c 	add.w	r1, r3, #12
 80045a0:	0092      	lsls	r2, r2, #2
 80045a2:	300c      	adds	r0, #12
 80045a4:	f001 fd34 	bl	8006010 <memcpy>
 80045a8:	ab1c      	add	r3, sp, #112	; 0x70
 80045aa:	9301      	str	r3, [sp, #4]
 80045ac:	ab1b      	add	r3, sp, #108	; 0x6c
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	4642      	mov	r2, r8
 80045b2:	464b      	mov	r3, r9
 80045b4:	4650      	mov	r0, sl
 80045b6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80045ba:	f002 f91d 	bl	80067f8 <__d2b>
 80045be:	901a      	str	r0, [sp, #104]	; 0x68
 80045c0:	2800      	cmp	r0, #0
 80045c2:	f43f aef8 	beq.w	80043b6 <_strtod_l+0x47e>
 80045c6:	2101      	movs	r1, #1
 80045c8:	4650      	mov	r0, sl
 80045ca:	f001 fe6f 	bl	80062ac <__i2b>
 80045ce:	9004      	str	r0, [sp, #16]
 80045d0:	4603      	mov	r3, r0
 80045d2:	2800      	cmp	r0, #0
 80045d4:	f43f aeef 	beq.w	80043b6 <_strtod_l+0x47e>
 80045d8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80045da:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80045dc:	2d00      	cmp	r5, #0
 80045de:	bfab      	itete	ge
 80045e0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80045e2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80045e4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80045e6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80045e8:	bfac      	ite	ge
 80045ea:	18ee      	addge	r6, r5, r3
 80045ec:	1b5c      	sublt	r4, r3, r5
 80045ee:	9b05      	ldr	r3, [sp, #20]
 80045f0:	1aed      	subs	r5, r5, r3
 80045f2:	4415      	add	r5, r2
 80045f4:	4b6d      	ldr	r3, [pc, #436]	; (80047ac <_strtod_l+0x874>)
 80045f6:	3d01      	subs	r5, #1
 80045f8:	429d      	cmp	r5, r3
 80045fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80045fe:	f280 80c4 	bge.w	800478a <_strtod_l+0x852>
 8004602:	1b5b      	subs	r3, r3, r5
 8004604:	2b1f      	cmp	r3, #31
 8004606:	eba2 0203 	sub.w	r2, r2, r3
 800460a:	f04f 0701 	mov.w	r7, #1
 800460e:	f300 80b1 	bgt.w	8004774 <_strtod_l+0x83c>
 8004612:	fa07 f303 	lsl.w	r3, r7, r3
 8004616:	930f      	str	r3, [sp, #60]	; 0x3c
 8004618:	2500      	movs	r5, #0
 800461a:	18b7      	adds	r7, r6, r2
 800461c:	9b05      	ldr	r3, [sp, #20]
 800461e:	42be      	cmp	r6, r7
 8004620:	4414      	add	r4, r2
 8004622:	441c      	add	r4, r3
 8004624:	4633      	mov	r3, r6
 8004626:	bfa8      	it	ge
 8004628:	463b      	movge	r3, r7
 800462a:	42a3      	cmp	r3, r4
 800462c:	bfa8      	it	ge
 800462e:	4623      	movge	r3, r4
 8004630:	2b00      	cmp	r3, #0
 8004632:	bfc2      	ittt	gt
 8004634:	1aff      	subgt	r7, r7, r3
 8004636:	1ae4      	subgt	r4, r4, r3
 8004638:	1af6      	subgt	r6, r6, r3
 800463a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800463c:	2b00      	cmp	r3, #0
 800463e:	dd17      	ble.n	8004670 <_strtod_l+0x738>
 8004640:	9904      	ldr	r1, [sp, #16]
 8004642:	461a      	mov	r2, r3
 8004644:	4650      	mov	r0, sl
 8004646:	f001 feef 	bl	8006428 <__pow5mult>
 800464a:	9004      	str	r0, [sp, #16]
 800464c:	2800      	cmp	r0, #0
 800464e:	f43f aeb2 	beq.w	80043b6 <_strtod_l+0x47e>
 8004652:	4601      	mov	r1, r0
 8004654:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004656:	4650      	mov	r0, sl
 8004658:	f001 fe3e 	bl	80062d8 <__multiply>
 800465c:	9009      	str	r0, [sp, #36]	; 0x24
 800465e:	2800      	cmp	r0, #0
 8004660:	f43f aea9 	beq.w	80043b6 <_strtod_l+0x47e>
 8004664:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004666:	4650      	mov	r0, sl
 8004668:	f001 fd20 	bl	80060ac <_Bfree>
 800466c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800466e:	931a      	str	r3, [sp, #104]	; 0x68
 8004670:	2f00      	cmp	r7, #0
 8004672:	f300 808e 	bgt.w	8004792 <_strtod_l+0x85a>
 8004676:	9b07      	ldr	r3, [sp, #28]
 8004678:	2b00      	cmp	r3, #0
 800467a:	dd08      	ble.n	800468e <_strtod_l+0x756>
 800467c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800467e:	9906      	ldr	r1, [sp, #24]
 8004680:	4650      	mov	r0, sl
 8004682:	f001 fed1 	bl	8006428 <__pow5mult>
 8004686:	9006      	str	r0, [sp, #24]
 8004688:	2800      	cmp	r0, #0
 800468a:	f43f ae94 	beq.w	80043b6 <_strtod_l+0x47e>
 800468e:	2c00      	cmp	r4, #0
 8004690:	dd08      	ble.n	80046a4 <_strtod_l+0x76c>
 8004692:	9906      	ldr	r1, [sp, #24]
 8004694:	4622      	mov	r2, r4
 8004696:	4650      	mov	r0, sl
 8004698:	f001 ff20 	bl	80064dc <__lshift>
 800469c:	9006      	str	r0, [sp, #24]
 800469e:	2800      	cmp	r0, #0
 80046a0:	f43f ae89 	beq.w	80043b6 <_strtod_l+0x47e>
 80046a4:	2e00      	cmp	r6, #0
 80046a6:	dd08      	ble.n	80046ba <_strtod_l+0x782>
 80046a8:	9904      	ldr	r1, [sp, #16]
 80046aa:	4632      	mov	r2, r6
 80046ac:	4650      	mov	r0, sl
 80046ae:	f001 ff15 	bl	80064dc <__lshift>
 80046b2:	9004      	str	r0, [sp, #16]
 80046b4:	2800      	cmp	r0, #0
 80046b6:	f43f ae7e 	beq.w	80043b6 <_strtod_l+0x47e>
 80046ba:	9a06      	ldr	r2, [sp, #24]
 80046bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80046be:	4650      	mov	r0, sl
 80046c0:	f001 ff98 	bl	80065f4 <__mdiff>
 80046c4:	4683      	mov	fp, r0
 80046c6:	2800      	cmp	r0, #0
 80046c8:	f43f ae75 	beq.w	80043b6 <_strtod_l+0x47e>
 80046cc:	2400      	movs	r4, #0
 80046ce:	68c3      	ldr	r3, [r0, #12]
 80046d0:	9904      	ldr	r1, [sp, #16]
 80046d2:	60c4      	str	r4, [r0, #12]
 80046d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80046d6:	f001 ff71 	bl	80065bc <__mcmp>
 80046da:	42a0      	cmp	r0, r4
 80046dc:	da6c      	bge.n	80047b8 <_strtod_l+0x880>
 80046de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046e0:	ea53 0308 	orrs.w	r3, r3, r8
 80046e4:	f040 8092 	bne.w	800480c <_strtod_l+0x8d4>
 80046e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f040 808d 	bne.w	800480c <_strtod_l+0x8d4>
 80046f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80046f6:	0d1b      	lsrs	r3, r3, #20
 80046f8:	051b      	lsls	r3, r3, #20
 80046fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80046fe:	f240 8085 	bls.w	800480c <_strtod_l+0x8d4>
 8004702:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004706:	b91b      	cbnz	r3, 8004710 <_strtod_l+0x7d8>
 8004708:	f8db 3010 	ldr.w	r3, [fp, #16]
 800470c:	2b01      	cmp	r3, #1
 800470e:	dd7d      	ble.n	800480c <_strtod_l+0x8d4>
 8004710:	4659      	mov	r1, fp
 8004712:	2201      	movs	r2, #1
 8004714:	4650      	mov	r0, sl
 8004716:	f001 fee1 	bl	80064dc <__lshift>
 800471a:	9904      	ldr	r1, [sp, #16]
 800471c:	4683      	mov	fp, r0
 800471e:	f001 ff4d 	bl	80065bc <__mcmp>
 8004722:	2800      	cmp	r0, #0
 8004724:	dd72      	ble.n	800480c <_strtod_l+0x8d4>
 8004726:	9905      	ldr	r1, [sp, #20]
 8004728:	4a21      	ldr	r2, [pc, #132]	; (80047b0 <_strtod_l+0x878>)
 800472a:	464b      	mov	r3, r9
 800472c:	2900      	cmp	r1, #0
 800472e:	f000 808d 	beq.w	800484c <_strtod_l+0x914>
 8004732:	ea02 0109 	and.w	r1, r2, r9
 8004736:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800473a:	f300 8087 	bgt.w	800484c <_strtod_l+0x914>
 800473e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004742:	f77f aead 	ble.w	80044a0 <_strtod_l+0x568>
 8004746:	4b1b      	ldr	r3, [pc, #108]	; (80047b4 <_strtod_l+0x87c>)
 8004748:	4640      	mov	r0, r8
 800474a:	4649      	mov	r1, r9
 800474c:	2200      	movs	r2, #0
 800474e:	f7fc f80f 	bl	8000770 <__aeabi_dmul>
 8004752:	460b      	mov	r3, r1
 8004754:	4303      	orrs	r3, r0
 8004756:	bf08      	it	eq
 8004758:	2322      	moveq	r3, #34	; 0x22
 800475a:	4680      	mov	r8, r0
 800475c:	4689      	mov	r9, r1
 800475e:	bf08      	it	eq
 8004760:	f8ca 3000 	streq.w	r3, [sl]
 8004764:	e632      	b.n	80043cc <_strtod_l+0x494>
 8004766:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	ea03 0808 	and.w	r8, r3, r8
 8004772:	e6e3      	b.n	800453c <_strtod_l+0x604>
 8004774:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004778:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800477c:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004780:	35e2      	adds	r5, #226	; 0xe2
 8004782:	fa07 f505 	lsl.w	r5, r7, r5
 8004786:	970f      	str	r7, [sp, #60]	; 0x3c
 8004788:	e747      	b.n	800461a <_strtod_l+0x6e2>
 800478a:	2301      	movs	r3, #1
 800478c:	2500      	movs	r5, #0
 800478e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004790:	e743      	b.n	800461a <_strtod_l+0x6e2>
 8004792:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004794:	463a      	mov	r2, r7
 8004796:	4650      	mov	r0, sl
 8004798:	f001 fea0 	bl	80064dc <__lshift>
 800479c:	901a      	str	r0, [sp, #104]	; 0x68
 800479e:	2800      	cmp	r0, #0
 80047a0:	f47f af69 	bne.w	8004676 <_strtod_l+0x73e>
 80047a4:	e607      	b.n	80043b6 <_strtod_l+0x47e>
 80047a6:	bf00      	nop
 80047a8:	08007c60 	.word	0x08007c60
 80047ac:	fffffc02 	.word	0xfffffc02
 80047b0:	7ff00000 	.word	0x7ff00000
 80047b4:	39500000 	.word	0x39500000
 80047b8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80047bc:	d165      	bne.n	800488a <_strtod_l+0x952>
 80047be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80047c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80047c4:	b35a      	cbz	r2, 800481e <_strtod_l+0x8e6>
 80047c6:	4a9a      	ldr	r2, [pc, #616]	; (8004a30 <_strtod_l+0xaf8>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d12b      	bne.n	8004824 <_strtod_l+0x8ec>
 80047cc:	9b05      	ldr	r3, [sp, #20]
 80047ce:	4641      	mov	r1, r8
 80047d0:	b303      	cbz	r3, 8004814 <_strtod_l+0x8dc>
 80047d2:	4b98      	ldr	r3, [pc, #608]	; (8004a34 <_strtod_l+0xafc>)
 80047d4:	464a      	mov	r2, r9
 80047d6:	4013      	ands	r3, r2
 80047d8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80047dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047e0:	d81b      	bhi.n	800481a <_strtod_l+0x8e2>
 80047e2:	0d1b      	lsrs	r3, r3, #20
 80047e4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	4299      	cmp	r1, r3
 80047ee:	d119      	bne.n	8004824 <_strtod_l+0x8ec>
 80047f0:	4b91      	ldr	r3, [pc, #580]	; (8004a38 <_strtod_l+0xb00>)
 80047f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d102      	bne.n	80047fe <_strtod_l+0x8c6>
 80047f8:	3101      	adds	r1, #1
 80047fa:	f43f addc 	beq.w	80043b6 <_strtod_l+0x47e>
 80047fe:	4b8d      	ldr	r3, [pc, #564]	; (8004a34 <_strtod_l+0xafc>)
 8004800:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004802:	401a      	ands	r2, r3
 8004804:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004808:	f04f 0800 	mov.w	r8, #0
 800480c:	9b05      	ldr	r3, [sp, #20]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d199      	bne.n	8004746 <_strtod_l+0x80e>
 8004812:	e5db      	b.n	80043cc <_strtod_l+0x494>
 8004814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004818:	e7e8      	b.n	80047ec <_strtod_l+0x8b4>
 800481a:	4613      	mov	r3, r2
 800481c:	e7e6      	b.n	80047ec <_strtod_l+0x8b4>
 800481e:	ea53 0308 	orrs.w	r3, r3, r8
 8004822:	d080      	beq.n	8004726 <_strtod_l+0x7ee>
 8004824:	b1e5      	cbz	r5, 8004860 <_strtod_l+0x928>
 8004826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004828:	421d      	tst	r5, r3
 800482a:	d0ef      	beq.n	800480c <_strtod_l+0x8d4>
 800482c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800482e:	9a05      	ldr	r2, [sp, #20]
 8004830:	4640      	mov	r0, r8
 8004832:	4649      	mov	r1, r9
 8004834:	b1c3      	cbz	r3, 8004868 <_strtod_l+0x930>
 8004836:	f7ff fb5d 	bl	8003ef4 <sulp>
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004842:	f7fb fddf 	bl	8000404 <__adddf3>
 8004846:	4680      	mov	r8, r0
 8004848:	4689      	mov	r9, r1
 800484a:	e7df      	b.n	800480c <_strtod_l+0x8d4>
 800484c:	4013      	ands	r3, r2
 800484e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004852:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004856:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800485a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800485e:	e7d5      	b.n	800480c <_strtod_l+0x8d4>
 8004860:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004862:	ea13 0f08 	tst.w	r3, r8
 8004866:	e7e0      	b.n	800482a <_strtod_l+0x8f2>
 8004868:	f7ff fb44 	bl	8003ef4 <sulp>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004874:	f7fb fdc4 	bl	8000400 <__aeabi_dsub>
 8004878:	2200      	movs	r2, #0
 800487a:	2300      	movs	r3, #0
 800487c:	4680      	mov	r8, r0
 800487e:	4689      	mov	r9, r1
 8004880:	f7fc f9de 	bl	8000c40 <__aeabi_dcmpeq>
 8004884:	2800      	cmp	r0, #0
 8004886:	d0c1      	beq.n	800480c <_strtod_l+0x8d4>
 8004888:	e60a      	b.n	80044a0 <_strtod_l+0x568>
 800488a:	9904      	ldr	r1, [sp, #16]
 800488c:	4658      	mov	r0, fp
 800488e:	f002 f80f 	bl	80068b0 <__ratio>
 8004892:	2200      	movs	r2, #0
 8004894:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004898:	4606      	mov	r6, r0
 800489a:	460f      	mov	r7, r1
 800489c:	f7fc f9e4 	bl	8000c68 <__aeabi_dcmple>
 80048a0:	2800      	cmp	r0, #0
 80048a2:	d070      	beq.n	8004986 <_strtod_l+0xa4e>
 80048a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d042      	beq.n	8004930 <_strtod_l+0x9f8>
 80048aa:	4f64      	ldr	r7, [pc, #400]	; (8004a3c <_strtod_l+0xb04>)
 80048ac:	2600      	movs	r6, #0
 80048ae:	4d63      	ldr	r5, [pc, #396]	; (8004a3c <_strtod_l+0xb04>)
 80048b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048b6:	0d1b      	lsrs	r3, r3, #20
 80048b8:	051b      	lsls	r3, r3, #20
 80048ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80048bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80048be:	4b60      	ldr	r3, [pc, #384]	; (8004a40 <_strtod_l+0xb08>)
 80048c0:	429a      	cmp	r2, r3
 80048c2:	f040 80c5 	bne.w	8004a50 <_strtod_l+0xb18>
 80048c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048c8:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80048cc:	4640      	mov	r0, r8
 80048ce:	4649      	mov	r1, r9
 80048d0:	f001 ff18 	bl	8006704 <__ulp>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	4630      	mov	r0, r6
 80048da:	4639      	mov	r1, r7
 80048dc:	f7fb ff48 	bl	8000770 <__aeabi_dmul>
 80048e0:	4642      	mov	r2, r8
 80048e2:	464b      	mov	r3, r9
 80048e4:	f7fb fd8e 	bl	8000404 <__adddf3>
 80048e8:	460b      	mov	r3, r1
 80048ea:	4952      	ldr	r1, [pc, #328]	; (8004a34 <_strtod_l+0xafc>)
 80048ec:	4a55      	ldr	r2, [pc, #340]	; (8004a44 <_strtod_l+0xb0c>)
 80048ee:	4019      	ands	r1, r3
 80048f0:	4291      	cmp	r1, r2
 80048f2:	4680      	mov	r8, r0
 80048f4:	d95d      	bls.n	80049b2 <_strtod_l+0xa7a>
 80048f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80048f8:	4b4f      	ldr	r3, [pc, #316]	; (8004a38 <_strtod_l+0xb00>)
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d103      	bne.n	8004906 <_strtod_l+0x9ce>
 80048fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004900:	3301      	adds	r3, #1
 8004902:	f43f ad58 	beq.w	80043b6 <_strtod_l+0x47e>
 8004906:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8004a38 <_strtod_l+0xb00>
 800490a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800490e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004910:	4650      	mov	r0, sl
 8004912:	f001 fbcb 	bl	80060ac <_Bfree>
 8004916:	9906      	ldr	r1, [sp, #24]
 8004918:	4650      	mov	r0, sl
 800491a:	f001 fbc7 	bl	80060ac <_Bfree>
 800491e:	9904      	ldr	r1, [sp, #16]
 8004920:	4650      	mov	r0, sl
 8004922:	f001 fbc3 	bl	80060ac <_Bfree>
 8004926:	4659      	mov	r1, fp
 8004928:	4650      	mov	r0, sl
 800492a:	f001 fbbf 	bl	80060ac <_Bfree>
 800492e:	e629      	b.n	8004584 <_strtod_l+0x64c>
 8004930:	f1b8 0f00 	cmp.w	r8, #0
 8004934:	d119      	bne.n	800496a <_strtod_l+0xa32>
 8004936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004938:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800493c:	b9e3      	cbnz	r3, 8004978 <_strtod_l+0xa40>
 800493e:	4b3f      	ldr	r3, [pc, #252]	; (8004a3c <_strtod_l+0xb04>)
 8004940:	2200      	movs	r2, #0
 8004942:	4630      	mov	r0, r6
 8004944:	4639      	mov	r1, r7
 8004946:	f7fc f985 	bl	8000c54 <__aeabi_dcmplt>
 800494a:	b9c8      	cbnz	r0, 8004980 <_strtod_l+0xa48>
 800494c:	4b3e      	ldr	r3, [pc, #248]	; (8004a48 <_strtod_l+0xb10>)
 800494e:	2200      	movs	r2, #0
 8004950:	4630      	mov	r0, r6
 8004952:	4639      	mov	r1, r7
 8004954:	f7fb ff0c 	bl	8000770 <__aeabi_dmul>
 8004958:	4604      	mov	r4, r0
 800495a:	460d      	mov	r5, r1
 800495c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004960:	9416      	str	r4, [sp, #88]	; 0x58
 8004962:	9317      	str	r3, [sp, #92]	; 0x5c
 8004964:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8004968:	e7a2      	b.n	80048b0 <_strtod_l+0x978>
 800496a:	f1b8 0f01 	cmp.w	r8, #1
 800496e:	d103      	bne.n	8004978 <_strtod_l+0xa40>
 8004970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004972:	2b00      	cmp	r3, #0
 8004974:	f43f ad94 	beq.w	80044a0 <_strtod_l+0x568>
 8004978:	4f34      	ldr	r7, [pc, #208]	; (8004a4c <_strtod_l+0xb14>)
 800497a:	2600      	movs	r6, #0
 800497c:	2400      	movs	r4, #0
 800497e:	e796      	b.n	80048ae <_strtod_l+0x976>
 8004980:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004982:	4d31      	ldr	r5, [pc, #196]	; (8004a48 <_strtod_l+0xb10>)
 8004984:	e7ea      	b.n	800495c <_strtod_l+0xa24>
 8004986:	4b30      	ldr	r3, [pc, #192]	; (8004a48 <_strtod_l+0xb10>)
 8004988:	2200      	movs	r2, #0
 800498a:	4630      	mov	r0, r6
 800498c:	4639      	mov	r1, r7
 800498e:	f7fb feef 	bl	8000770 <__aeabi_dmul>
 8004992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004994:	4604      	mov	r4, r0
 8004996:	460d      	mov	r5, r1
 8004998:	b933      	cbnz	r3, 80049a8 <_strtod_l+0xa70>
 800499a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800499e:	9010      	str	r0, [sp, #64]	; 0x40
 80049a0:	9311      	str	r3, [sp, #68]	; 0x44
 80049a2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80049a6:	e783      	b.n	80048b0 <_strtod_l+0x978>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80049b0:	e7f7      	b.n	80049a2 <_strtod_l+0xa6a>
 80049b2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80049b6:	9b05      	ldr	r3, [sp, #20]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1a8      	bne.n	800490e <_strtod_l+0x9d6>
 80049bc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80049c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80049c2:	0d1b      	lsrs	r3, r3, #20
 80049c4:	051b      	lsls	r3, r3, #20
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d1a1      	bne.n	800490e <_strtod_l+0x9d6>
 80049ca:	4620      	mov	r0, r4
 80049cc:	4629      	mov	r1, r5
 80049ce:	f7fc fb45 	bl	800105c <__aeabi_d2lz>
 80049d2:	f7fb fe9f 	bl	8000714 <__aeabi_l2d>
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	4620      	mov	r0, r4
 80049dc:	4629      	mov	r1, r5
 80049de:	f7fb fd0f 	bl	8000400 <__aeabi_dsub>
 80049e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80049e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80049e8:	ea43 0308 	orr.w	r3, r3, r8
 80049ec:	4313      	orrs	r3, r2
 80049ee:	4604      	mov	r4, r0
 80049f0:	460d      	mov	r5, r1
 80049f2:	d068      	beq.n	8004ac6 <_strtod_l+0xb8e>
 80049f4:	a30a      	add	r3, pc, #40	; (adr r3, 8004a20 <_strtod_l+0xae8>)
 80049f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fa:	f7fc f92b 	bl	8000c54 <__aeabi_dcmplt>
 80049fe:	2800      	cmp	r0, #0
 8004a00:	f47f ace4 	bne.w	80043cc <_strtod_l+0x494>
 8004a04:	a308      	add	r3, pc, #32	; (adr r3, 8004a28 <_strtod_l+0xaf0>)
 8004a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	f7fc f93f 	bl	8000c90 <__aeabi_dcmpgt>
 8004a12:	2800      	cmp	r0, #0
 8004a14:	f43f af7b 	beq.w	800490e <_strtod_l+0x9d6>
 8004a18:	e4d8      	b.n	80043cc <_strtod_l+0x494>
 8004a1a:	bf00      	nop
 8004a1c:	f3af 8000 	nop.w
 8004a20:	94a03595 	.word	0x94a03595
 8004a24:	3fdfffff 	.word	0x3fdfffff
 8004a28:	35afe535 	.word	0x35afe535
 8004a2c:	3fe00000 	.word	0x3fe00000
 8004a30:	000fffff 	.word	0x000fffff
 8004a34:	7ff00000 	.word	0x7ff00000
 8004a38:	7fefffff 	.word	0x7fefffff
 8004a3c:	3ff00000 	.word	0x3ff00000
 8004a40:	7fe00000 	.word	0x7fe00000
 8004a44:	7c9fffff 	.word	0x7c9fffff
 8004a48:	3fe00000 	.word	0x3fe00000
 8004a4c:	bff00000 	.word	0xbff00000
 8004a50:	9b05      	ldr	r3, [sp, #20]
 8004a52:	b313      	cbz	r3, 8004a9a <_strtod_l+0xb62>
 8004a54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004a5a:	d81e      	bhi.n	8004a9a <_strtod_l+0xb62>
 8004a5c:	a326      	add	r3, pc, #152	; (adr r3, 8004af8 <_strtod_l+0xbc0>)
 8004a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a62:	4620      	mov	r0, r4
 8004a64:	4629      	mov	r1, r5
 8004a66:	f7fc f8ff 	bl	8000c68 <__aeabi_dcmple>
 8004a6a:	b190      	cbz	r0, 8004a92 <_strtod_l+0xb5a>
 8004a6c:	4629      	mov	r1, r5
 8004a6e:	4620      	mov	r0, r4
 8004a70:	f7fc f956 	bl	8000d20 <__aeabi_d2uiz>
 8004a74:	2801      	cmp	r0, #1
 8004a76:	bf38      	it	cc
 8004a78:	2001      	movcc	r0, #1
 8004a7a:	f7fb fdff 	bl	800067c <__aeabi_ui2d>
 8004a7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a80:	4604      	mov	r4, r0
 8004a82:	460d      	mov	r5, r1
 8004a84:	b9d3      	cbnz	r3, 8004abc <_strtod_l+0xb84>
 8004a86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a8a:	9012      	str	r0, [sp, #72]	; 0x48
 8004a8c:	9313      	str	r3, [sp, #76]	; 0x4c
 8004a8e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004a92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a94:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004a98:	1a9f      	subs	r7, r3, r2
 8004a9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a9e:	f001 fe31 	bl	8006704 <__ulp>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	4639      	mov	r1, r7
 8004aaa:	f7fb fe61 	bl	8000770 <__aeabi_dmul>
 8004aae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004ab2:	f7fb fca7 	bl	8000404 <__adddf3>
 8004ab6:	4680      	mov	r8, r0
 8004ab8:	4689      	mov	r9, r1
 8004aba:	e77c      	b.n	80049b6 <_strtod_l+0xa7e>
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004ac4:	e7e3      	b.n	8004a8e <_strtod_l+0xb56>
 8004ac6:	a30e      	add	r3, pc, #56	; (adr r3, 8004b00 <_strtod_l+0xbc8>)
 8004ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004acc:	f7fc f8c2 	bl	8000c54 <__aeabi_dcmplt>
 8004ad0:	e79f      	b.n	8004a12 <_strtod_l+0xada>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	930a      	str	r3, [sp, #40]	; 0x28
 8004ad6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004ad8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	f7ff ba71 	b.w	8003fc2 <_strtod_l+0x8a>
 8004ae0:	2a65      	cmp	r2, #101	; 0x65
 8004ae2:	f43f ab63 	beq.w	80041ac <_strtod_l+0x274>
 8004ae6:	2a45      	cmp	r2, #69	; 0x45
 8004ae8:	f43f ab60 	beq.w	80041ac <_strtod_l+0x274>
 8004aec:	2301      	movs	r3, #1
 8004aee:	f7ff bb95 	b.w	800421c <_strtod_l+0x2e4>
 8004af2:	bf00      	nop
 8004af4:	f3af 8000 	nop.w
 8004af8:	ffc00000 	.word	0xffc00000
 8004afc:	41dfffff 	.word	0x41dfffff
 8004b00:	94a03595 	.word	0x94a03595
 8004b04:	3fcfffff 	.word	0x3fcfffff

08004b08 <_strtod_r>:
 8004b08:	4b01      	ldr	r3, [pc, #4]	; (8004b10 <_strtod_r+0x8>)
 8004b0a:	f7ff ba15 	b.w	8003f38 <_strtod_l>
 8004b0e:	bf00      	nop
 8004b10:	200000ac 	.word	0x200000ac

08004b14 <_strtol_l.constprop.0>:
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b1a:	4680      	mov	r8, r0
 8004b1c:	d001      	beq.n	8004b22 <_strtol_l.constprop.0+0xe>
 8004b1e:	2b24      	cmp	r3, #36	; 0x24
 8004b20:	d906      	bls.n	8004b30 <_strtol_l.constprop.0+0x1c>
 8004b22:	f000 feeb 	bl	80058fc <__errno>
 8004b26:	2316      	movs	r3, #22
 8004b28:	6003      	str	r3, [r0, #0]
 8004b2a:	2000      	movs	r0, #0
 8004b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b30:	4f35      	ldr	r7, [pc, #212]	; (8004c08 <_strtol_l.constprop.0+0xf4>)
 8004b32:	460d      	mov	r5, r1
 8004b34:	4628      	mov	r0, r5
 8004b36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b3a:	5de6      	ldrb	r6, [r4, r7]
 8004b3c:	f016 0608 	ands.w	r6, r6, #8
 8004b40:	d1f8      	bne.n	8004b34 <_strtol_l.constprop.0+0x20>
 8004b42:	2c2d      	cmp	r4, #45	; 0x2d
 8004b44:	d12f      	bne.n	8004ba6 <_strtol_l.constprop.0+0x92>
 8004b46:	782c      	ldrb	r4, [r5, #0]
 8004b48:	2601      	movs	r6, #1
 8004b4a:	1c85      	adds	r5, r0, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d057      	beq.n	8004c00 <_strtol_l.constprop.0+0xec>
 8004b50:	2b10      	cmp	r3, #16
 8004b52:	d109      	bne.n	8004b68 <_strtol_l.constprop.0+0x54>
 8004b54:	2c30      	cmp	r4, #48	; 0x30
 8004b56:	d107      	bne.n	8004b68 <_strtol_l.constprop.0+0x54>
 8004b58:	7828      	ldrb	r0, [r5, #0]
 8004b5a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004b5e:	2858      	cmp	r0, #88	; 0x58
 8004b60:	d149      	bne.n	8004bf6 <_strtol_l.constprop.0+0xe2>
 8004b62:	786c      	ldrb	r4, [r5, #1]
 8004b64:	2310      	movs	r3, #16
 8004b66:	3502      	adds	r5, #2
 8004b68:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8004b6c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8004b70:	2700      	movs	r7, #0
 8004b72:	fbbe f9f3 	udiv	r9, lr, r3
 8004b76:	4638      	mov	r0, r7
 8004b78:	fb03 ea19 	mls	sl, r3, r9, lr
 8004b7c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004b80:	f1bc 0f09 	cmp.w	ip, #9
 8004b84:	d814      	bhi.n	8004bb0 <_strtol_l.constprop.0+0x9c>
 8004b86:	4664      	mov	r4, ip
 8004b88:	42a3      	cmp	r3, r4
 8004b8a:	dd22      	ble.n	8004bd2 <_strtol_l.constprop.0+0xbe>
 8004b8c:	2f00      	cmp	r7, #0
 8004b8e:	db1d      	blt.n	8004bcc <_strtol_l.constprop.0+0xb8>
 8004b90:	4581      	cmp	r9, r0
 8004b92:	d31b      	bcc.n	8004bcc <_strtol_l.constprop.0+0xb8>
 8004b94:	d101      	bne.n	8004b9a <_strtol_l.constprop.0+0x86>
 8004b96:	45a2      	cmp	sl, r4
 8004b98:	db18      	blt.n	8004bcc <_strtol_l.constprop.0+0xb8>
 8004b9a:	fb00 4003 	mla	r0, r0, r3, r4
 8004b9e:	2701      	movs	r7, #1
 8004ba0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ba4:	e7ea      	b.n	8004b7c <_strtol_l.constprop.0+0x68>
 8004ba6:	2c2b      	cmp	r4, #43	; 0x2b
 8004ba8:	bf04      	itt	eq
 8004baa:	782c      	ldrbeq	r4, [r5, #0]
 8004bac:	1c85      	addeq	r5, r0, #2
 8004bae:	e7cd      	b.n	8004b4c <_strtol_l.constprop.0+0x38>
 8004bb0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004bb4:	f1bc 0f19 	cmp.w	ip, #25
 8004bb8:	d801      	bhi.n	8004bbe <_strtol_l.constprop.0+0xaa>
 8004bba:	3c37      	subs	r4, #55	; 0x37
 8004bbc:	e7e4      	b.n	8004b88 <_strtol_l.constprop.0+0x74>
 8004bbe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004bc2:	f1bc 0f19 	cmp.w	ip, #25
 8004bc6:	d804      	bhi.n	8004bd2 <_strtol_l.constprop.0+0xbe>
 8004bc8:	3c57      	subs	r4, #87	; 0x57
 8004bca:	e7dd      	b.n	8004b88 <_strtol_l.constprop.0+0x74>
 8004bcc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004bd0:	e7e6      	b.n	8004ba0 <_strtol_l.constprop.0+0x8c>
 8004bd2:	2f00      	cmp	r7, #0
 8004bd4:	da07      	bge.n	8004be6 <_strtol_l.constprop.0+0xd2>
 8004bd6:	2322      	movs	r3, #34	; 0x22
 8004bd8:	f8c8 3000 	str.w	r3, [r8]
 8004bdc:	4670      	mov	r0, lr
 8004bde:	2a00      	cmp	r2, #0
 8004be0:	d0a4      	beq.n	8004b2c <_strtol_l.constprop.0+0x18>
 8004be2:	1e69      	subs	r1, r5, #1
 8004be4:	e005      	b.n	8004bf2 <_strtol_l.constprop.0+0xde>
 8004be6:	b106      	cbz	r6, 8004bea <_strtol_l.constprop.0+0xd6>
 8004be8:	4240      	negs	r0, r0
 8004bea:	2a00      	cmp	r2, #0
 8004bec:	d09e      	beq.n	8004b2c <_strtol_l.constprop.0+0x18>
 8004bee:	2f00      	cmp	r7, #0
 8004bf0:	d1f7      	bne.n	8004be2 <_strtol_l.constprop.0+0xce>
 8004bf2:	6011      	str	r1, [r2, #0]
 8004bf4:	e79a      	b.n	8004b2c <_strtol_l.constprop.0+0x18>
 8004bf6:	2430      	movs	r4, #48	; 0x30
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1b5      	bne.n	8004b68 <_strtol_l.constprop.0+0x54>
 8004bfc:	2308      	movs	r3, #8
 8004bfe:	e7b3      	b.n	8004b68 <_strtol_l.constprop.0+0x54>
 8004c00:	2c30      	cmp	r4, #48	; 0x30
 8004c02:	d0a9      	beq.n	8004b58 <_strtol_l.constprop.0+0x44>
 8004c04:	230a      	movs	r3, #10
 8004c06:	e7af      	b.n	8004b68 <_strtol_l.constprop.0+0x54>
 8004c08:	08007c89 	.word	0x08007c89

08004c0c <_strtol_r>:
 8004c0c:	f7ff bf82 	b.w	8004b14 <_strtol_l.constprop.0>

08004c10 <quorem>:
 8004c10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c14:	6903      	ldr	r3, [r0, #16]
 8004c16:	690c      	ldr	r4, [r1, #16]
 8004c18:	42a3      	cmp	r3, r4
 8004c1a:	4607      	mov	r7, r0
 8004c1c:	db7d      	blt.n	8004d1a <quorem+0x10a>
 8004c1e:	3c01      	subs	r4, #1
 8004c20:	f101 0814 	add.w	r8, r1, #20
 8004c24:	f100 0514 	add.w	r5, r0, #20
 8004c28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c2c:	9301      	str	r3, [sp, #4]
 8004c2e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004c32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c36:	3301      	adds	r3, #1
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004c3e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004c42:	fbb2 f6f3 	udiv	r6, r2, r3
 8004c46:	d32e      	bcc.n	8004ca6 <quorem+0x96>
 8004c48:	f04f 0e00 	mov.w	lr, #0
 8004c4c:	4640      	mov	r0, r8
 8004c4e:	46ac      	mov	ip, r5
 8004c50:	46f2      	mov	sl, lr
 8004c52:	f850 2b04 	ldr.w	r2, [r0], #4
 8004c56:	b293      	uxth	r3, r2
 8004c58:	fb06 e303 	mla	r3, r6, r3, lr
 8004c5c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004c60:	0c12      	lsrs	r2, r2, #16
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	fb06 e202 	mla	r2, r6, r2, lr
 8004c68:	ebaa 0303 	sub.w	r3, sl, r3
 8004c6c:	f8dc a000 	ldr.w	sl, [ip]
 8004c70:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004c74:	b292      	uxth	r2, r2
 8004c76:	fa13 f38a 	uxtah	r3, r3, sl
 8004c7a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004c7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c88:	4581      	cmp	r9, r0
 8004c8a:	f84c 3b04 	str.w	r3, [ip], #4
 8004c8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004c92:	d2de      	bcs.n	8004c52 <quorem+0x42>
 8004c94:	f855 300b 	ldr.w	r3, [r5, fp]
 8004c98:	b92b      	cbnz	r3, 8004ca6 <quorem+0x96>
 8004c9a:	9b01      	ldr	r3, [sp, #4]
 8004c9c:	3b04      	subs	r3, #4
 8004c9e:	429d      	cmp	r5, r3
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	d32e      	bcc.n	8004d02 <quorem+0xf2>
 8004ca4:	613c      	str	r4, [r7, #16]
 8004ca6:	4638      	mov	r0, r7
 8004ca8:	f001 fc88 	bl	80065bc <__mcmp>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	db24      	blt.n	8004cfa <quorem+0xea>
 8004cb0:	3601      	adds	r6, #1
 8004cb2:	4628      	mov	r0, r5
 8004cb4:	f04f 0c00 	mov.w	ip, #0
 8004cb8:	f858 2b04 	ldr.w	r2, [r8], #4
 8004cbc:	f8d0 e000 	ldr.w	lr, [r0]
 8004cc0:	b293      	uxth	r3, r2
 8004cc2:	ebac 0303 	sub.w	r3, ip, r3
 8004cc6:	0c12      	lsrs	r2, r2, #16
 8004cc8:	fa13 f38e 	uxtah	r3, r3, lr
 8004ccc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004cd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cda:	45c1      	cmp	r9, r8
 8004cdc:	f840 3b04 	str.w	r3, [r0], #4
 8004ce0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004ce4:	d2e8      	bcs.n	8004cb8 <quorem+0xa8>
 8004ce6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004cea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004cee:	b922      	cbnz	r2, 8004cfa <quorem+0xea>
 8004cf0:	3b04      	subs	r3, #4
 8004cf2:	429d      	cmp	r5, r3
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	d30a      	bcc.n	8004d0e <quorem+0xfe>
 8004cf8:	613c      	str	r4, [r7, #16]
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	b003      	add	sp, #12
 8004cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d02:	6812      	ldr	r2, [r2, #0]
 8004d04:	3b04      	subs	r3, #4
 8004d06:	2a00      	cmp	r2, #0
 8004d08:	d1cc      	bne.n	8004ca4 <quorem+0x94>
 8004d0a:	3c01      	subs	r4, #1
 8004d0c:	e7c7      	b.n	8004c9e <quorem+0x8e>
 8004d0e:	6812      	ldr	r2, [r2, #0]
 8004d10:	3b04      	subs	r3, #4
 8004d12:	2a00      	cmp	r2, #0
 8004d14:	d1f0      	bne.n	8004cf8 <quorem+0xe8>
 8004d16:	3c01      	subs	r4, #1
 8004d18:	e7eb      	b.n	8004cf2 <quorem+0xe2>
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	e7ee      	b.n	8004cfc <quorem+0xec>
	...

08004d20 <_dtoa_r>:
 8004d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d24:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004d26:	b099      	sub	sp, #100	; 0x64
 8004d28:	4616      	mov	r6, r2
 8004d2a:	461f      	mov	r7, r3
 8004d2c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004d30:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004d34:	4605      	mov	r5, r0
 8004d36:	b974      	cbnz	r4, 8004d56 <_dtoa_r+0x36>
 8004d38:	2010      	movs	r0, #16
 8004d3a:	f001 f94f 	bl	8005fdc <malloc>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	6268      	str	r0, [r5, #36]	; 0x24
 8004d42:	b920      	cbnz	r0, 8004d4e <_dtoa_r+0x2e>
 8004d44:	4ba8      	ldr	r3, [pc, #672]	; (8004fe8 <_dtoa_r+0x2c8>)
 8004d46:	21ea      	movs	r1, #234	; 0xea
 8004d48:	48a8      	ldr	r0, [pc, #672]	; (8004fec <_dtoa_r+0x2cc>)
 8004d4a:	f002 f8a9 	bl	8006ea0 <__assert_func>
 8004d4e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004d52:	6004      	str	r4, [r0, #0]
 8004d54:	60c4      	str	r4, [r0, #12]
 8004d56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d58:	6819      	ldr	r1, [r3, #0]
 8004d5a:	b151      	cbz	r1, 8004d72 <_dtoa_r+0x52>
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	604a      	str	r2, [r1, #4]
 8004d60:	2301      	movs	r3, #1
 8004d62:	4093      	lsls	r3, r2
 8004d64:	608b      	str	r3, [r1, #8]
 8004d66:	4628      	mov	r0, r5
 8004d68:	f001 f9a0 	bl	80060ac <_Bfree>
 8004d6c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	1e3b      	subs	r3, r7, #0
 8004d74:	bfb9      	ittee	lt
 8004d76:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004d7a:	9305      	strlt	r3, [sp, #20]
 8004d7c:	2300      	movge	r3, #0
 8004d7e:	f8c8 3000 	strge.w	r3, [r8]
 8004d82:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004d86:	4b9a      	ldr	r3, [pc, #616]	; (8004ff0 <_dtoa_r+0x2d0>)
 8004d88:	bfbc      	itt	lt
 8004d8a:	2201      	movlt	r2, #1
 8004d8c:	f8c8 2000 	strlt.w	r2, [r8]
 8004d90:	ea33 0309 	bics.w	r3, r3, r9
 8004d94:	d119      	bne.n	8004dca <_dtoa_r+0xaa>
 8004d96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d98:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004da2:	4333      	orrs	r3, r6
 8004da4:	f000 8580 	beq.w	80058a8 <_dtoa_r+0xb88>
 8004da8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004daa:	b953      	cbnz	r3, 8004dc2 <_dtoa_r+0xa2>
 8004dac:	4b91      	ldr	r3, [pc, #580]	; (8004ff4 <_dtoa_r+0x2d4>)
 8004dae:	e022      	b.n	8004df6 <_dtoa_r+0xd6>
 8004db0:	4b91      	ldr	r3, [pc, #580]	; (8004ff8 <_dtoa_r+0x2d8>)
 8004db2:	9303      	str	r3, [sp, #12]
 8004db4:	3308      	adds	r3, #8
 8004db6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	9803      	ldr	r0, [sp, #12]
 8004dbc:	b019      	add	sp, #100	; 0x64
 8004dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dc2:	4b8c      	ldr	r3, [pc, #560]	; (8004ff4 <_dtoa_r+0x2d4>)
 8004dc4:	9303      	str	r3, [sp, #12]
 8004dc6:	3303      	adds	r3, #3
 8004dc8:	e7f5      	b.n	8004db6 <_dtoa_r+0x96>
 8004dca:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004dce:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004dd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	2300      	movs	r3, #0
 8004dda:	f7fb ff31 	bl	8000c40 <__aeabi_dcmpeq>
 8004dde:	4680      	mov	r8, r0
 8004de0:	b158      	cbz	r0, 8004dfa <_dtoa_r+0xda>
 8004de2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004de4:	2301      	movs	r3, #1
 8004de6:	6013      	str	r3, [r2, #0]
 8004de8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 8559 	beq.w	80058a2 <_dtoa_r+0xb82>
 8004df0:	4882      	ldr	r0, [pc, #520]	; (8004ffc <_dtoa_r+0x2dc>)
 8004df2:	6018      	str	r0, [r3, #0]
 8004df4:	1e43      	subs	r3, r0, #1
 8004df6:	9303      	str	r3, [sp, #12]
 8004df8:	e7df      	b.n	8004dba <_dtoa_r+0x9a>
 8004dfa:	ab16      	add	r3, sp, #88	; 0x58
 8004dfc:	9301      	str	r3, [sp, #4]
 8004dfe:	ab17      	add	r3, sp, #92	; 0x5c
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	4628      	mov	r0, r5
 8004e04:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004e08:	f001 fcf6 	bl	80067f8 <__d2b>
 8004e0c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004e10:	4683      	mov	fp, r0
 8004e12:	2c00      	cmp	r4, #0
 8004e14:	d07e      	beq.n	8004f14 <_dtoa_r+0x1f4>
 8004e16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e18:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e24:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004e28:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004e2c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004e30:	4b73      	ldr	r3, [pc, #460]	; (8005000 <_dtoa_r+0x2e0>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	f7fb fae4 	bl	8000400 <__aeabi_dsub>
 8004e38:	a365      	add	r3, pc, #404	; (adr r3, 8004fd0 <_dtoa_r+0x2b0>)
 8004e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3e:	f7fb fc97 	bl	8000770 <__aeabi_dmul>
 8004e42:	a365      	add	r3, pc, #404	; (adr r3, 8004fd8 <_dtoa_r+0x2b8>)
 8004e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e48:	f7fb fadc 	bl	8000404 <__adddf3>
 8004e4c:	4606      	mov	r6, r0
 8004e4e:	4620      	mov	r0, r4
 8004e50:	460f      	mov	r7, r1
 8004e52:	f7fb fc23 	bl	800069c <__aeabi_i2d>
 8004e56:	a362      	add	r3, pc, #392	; (adr r3, 8004fe0 <_dtoa_r+0x2c0>)
 8004e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5c:	f7fb fc88 	bl	8000770 <__aeabi_dmul>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4630      	mov	r0, r6
 8004e66:	4639      	mov	r1, r7
 8004e68:	f7fb facc 	bl	8000404 <__adddf3>
 8004e6c:	4606      	mov	r6, r0
 8004e6e:	460f      	mov	r7, r1
 8004e70:	f7fb ff2e 	bl	8000cd0 <__aeabi_d2iz>
 8004e74:	2200      	movs	r2, #0
 8004e76:	4682      	mov	sl, r0
 8004e78:	2300      	movs	r3, #0
 8004e7a:	4630      	mov	r0, r6
 8004e7c:	4639      	mov	r1, r7
 8004e7e:	f7fb fee9 	bl	8000c54 <__aeabi_dcmplt>
 8004e82:	b148      	cbz	r0, 8004e98 <_dtoa_r+0x178>
 8004e84:	4650      	mov	r0, sl
 8004e86:	f7fb fc09 	bl	800069c <__aeabi_i2d>
 8004e8a:	4632      	mov	r2, r6
 8004e8c:	463b      	mov	r3, r7
 8004e8e:	f7fb fed7 	bl	8000c40 <__aeabi_dcmpeq>
 8004e92:	b908      	cbnz	r0, 8004e98 <_dtoa_r+0x178>
 8004e94:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004e98:	f1ba 0f16 	cmp.w	sl, #22
 8004e9c:	d857      	bhi.n	8004f4e <_dtoa_r+0x22e>
 8004e9e:	4b59      	ldr	r3, [pc, #356]	; (8005004 <_dtoa_r+0x2e4>)
 8004ea0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004eac:	f7fb fed2 	bl	8000c54 <__aeabi_dcmplt>
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	d04e      	beq.n	8004f52 <_dtoa_r+0x232>
 8004eb4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004eb8:	2300      	movs	r3, #0
 8004eba:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ebc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004ebe:	1b1c      	subs	r4, r3, r4
 8004ec0:	1e63      	subs	r3, r4, #1
 8004ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ec4:	bf45      	ittet	mi
 8004ec6:	f1c4 0301 	rsbmi	r3, r4, #1
 8004eca:	9306      	strmi	r3, [sp, #24]
 8004ecc:	2300      	movpl	r3, #0
 8004ece:	2300      	movmi	r3, #0
 8004ed0:	bf4c      	ite	mi
 8004ed2:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004ed4:	9306      	strpl	r3, [sp, #24]
 8004ed6:	f1ba 0f00 	cmp.w	sl, #0
 8004eda:	db3c      	blt.n	8004f56 <_dtoa_r+0x236>
 8004edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ede:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004ee2:	4453      	add	r3, sl
 8004ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	930a      	str	r3, [sp, #40]	; 0x28
 8004eea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004eec:	2b09      	cmp	r3, #9
 8004eee:	f200 808d 	bhi.w	800500c <_dtoa_r+0x2ec>
 8004ef2:	2b05      	cmp	r3, #5
 8004ef4:	bfc4      	itt	gt
 8004ef6:	3b04      	subgt	r3, #4
 8004ef8:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004efa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004efc:	f1a3 0302 	sub.w	r3, r3, #2
 8004f00:	bfcc      	ite	gt
 8004f02:	2400      	movgt	r4, #0
 8004f04:	2401      	movle	r4, #1
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	f200 808c 	bhi.w	8005024 <_dtoa_r+0x304>
 8004f0c:	e8df f003 	tbb	[pc, r3]
 8004f10:	5b4d4f2d 	.word	0x5b4d4f2d
 8004f14:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004f18:	441c      	add	r4, r3
 8004f1a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004f1e:	2b20      	cmp	r3, #32
 8004f20:	bfc3      	ittte	gt
 8004f22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004f26:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004f2a:	fa09 f303 	lslgt.w	r3, r9, r3
 8004f2e:	f1c3 0320 	rsble	r3, r3, #32
 8004f32:	bfc6      	itte	gt
 8004f34:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004f38:	4318      	orrgt	r0, r3
 8004f3a:	fa06 f003 	lslle.w	r0, r6, r3
 8004f3e:	f7fb fb9d 	bl	800067c <__aeabi_ui2d>
 8004f42:	2301      	movs	r3, #1
 8004f44:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004f48:	3c01      	subs	r4, #1
 8004f4a:	9313      	str	r3, [sp, #76]	; 0x4c
 8004f4c:	e770      	b.n	8004e30 <_dtoa_r+0x110>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e7b3      	b.n	8004eba <_dtoa_r+0x19a>
 8004f52:	900f      	str	r0, [sp, #60]	; 0x3c
 8004f54:	e7b2      	b.n	8004ebc <_dtoa_r+0x19c>
 8004f56:	9b06      	ldr	r3, [sp, #24]
 8004f58:	eba3 030a 	sub.w	r3, r3, sl
 8004f5c:	9306      	str	r3, [sp, #24]
 8004f5e:	f1ca 0300 	rsb	r3, sl, #0
 8004f62:	930a      	str	r3, [sp, #40]	; 0x28
 8004f64:	2300      	movs	r3, #0
 8004f66:	930e      	str	r3, [sp, #56]	; 0x38
 8004f68:	e7bf      	b.n	8004eea <_dtoa_r+0x1ca>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f6e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	dc5a      	bgt.n	800502a <_dtoa_r+0x30a>
 8004f74:	f04f 0901 	mov.w	r9, #1
 8004f78:	f8cd 9020 	str.w	r9, [sp, #32]
 8004f7c:	464b      	mov	r3, r9
 8004f7e:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004f82:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004f84:	2200      	movs	r2, #0
 8004f86:	6042      	str	r2, [r0, #4]
 8004f88:	2204      	movs	r2, #4
 8004f8a:	f102 0614 	add.w	r6, r2, #20
 8004f8e:	429e      	cmp	r6, r3
 8004f90:	6841      	ldr	r1, [r0, #4]
 8004f92:	d950      	bls.n	8005036 <_dtoa_r+0x316>
 8004f94:	4628      	mov	r0, r5
 8004f96:	f001 f849 	bl	800602c <_Balloc>
 8004f9a:	9003      	str	r0, [sp, #12]
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	d14e      	bne.n	800503e <_dtoa_r+0x31e>
 8004fa0:	4b19      	ldr	r3, [pc, #100]	; (8005008 <_dtoa_r+0x2e8>)
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004fa8:	e6ce      	b.n	8004d48 <_dtoa_r+0x28>
 8004faa:	2301      	movs	r3, #1
 8004fac:	e7de      	b.n	8004f6c <_dtoa_r+0x24c>
 8004fae:	2300      	movs	r3, #0
 8004fb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004fb4:	eb0a 0903 	add.w	r9, sl, r3
 8004fb8:	f109 0301 	add.w	r3, r9, #1
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	9308      	str	r3, [sp, #32]
 8004fc0:	bfb8      	it	lt
 8004fc2:	2301      	movlt	r3, #1
 8004fc4:	e7dd      	b.n	8004f82 <_dtoa_r+0x262>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e7f2      	b.n	8004fb0 <_dtoa_r+0x290>
 8004fca:	bf00      	nop
 8004fcc:	f3af 8000 	nop.w
 8004fd0:	636f4361 	.word	0x636f4361
 8004fd4:	3fd287a7 	.word	0x3fd287a7
 8004fd8:	8b60c8b3 	.word	0x8b60c8b3
 8004fdc:	3fc68a28 	.word	0x3fc68a28
 8004fe0:	509f79fb 	.word	0x509f79fb
 8004fe4:	3fd34413 	.word	0x3fd34413
 8004fe8:	08007d96 	.word	0x08007d96
 8004fec:	08007dad 	.word	0x08007dad
 8004ff0:	7ff00000 	.word	0x7ff00000
 8004ff4:	08007d92 	.word	0x08007d92
 8004ff8:	08007d89 	.word	0x08007d89
 8004ffc:	08007c0d 	.word	0x08007c0d
 8005000:	3ff80000 	.word	0x3ff80000
 8005004:	08007f18 	.word	0x08007f18
 8005008:	08007e08 	.word	0x08007e08
 800500c:	2401      	movs	r4, #1
 800500e:	2300      	movs	r3, #0
 8005010:	9322      	str	r3, [sp, #136]	; 0x88
 8005012:	940b      	str	r4, [sp, #44]	; 0x2c
 8005014:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005018:	2200      	movs	r2, #0
 800501a:	f8cd 9020 	str.w	r9, [sp, #32]
 800501e:	2312      	movs	r3, #18
 8005020:	9223      	str	r2, [sp, #140]	; 0x8c
 8005022:	e7ae      	b.n	8004f82 <_dtoa_r+0x262>
 8005024:	2301      	movs	r3, #1
 8005026:	930b      	str	r3, [sp, #44]	; 0x2c
 8005028:	e7f4      	b.n	8005014 <_dtoa_r+0x2f4>
 800502a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800502e:	f8cd 9020 	str.w	r9, [sp, #32]
 8005032:	464b      	mov	r3, r9
 8005034:	e7a5      	b.n	8004f82 <_dtoa_r+0x262>
 8005036:	3101      	adds	r1, #1
 8005038:	6041      	str	r1, [r0, #4]
 800503a:	0052      	lsls	r2, r2, #1
 800503c:	e7a5      	b.n	8004f8a <_dtoa_r+0x26a>
 800503e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005040:	9a03      	ldr	r2, [sp, #12]
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	9b08      	ldr	r3, [sp, #32]
 8005046:	2b0e      	cmp	r3, #14
 8005048:	f200 80a8 	bhi.w	800519c <_dtoa_r+0x47c>
 800504c:	2c00      	cmp	r4, #0
 800504e:	f000 80a5 	beq.w	800519c <_dtoa_r+0x47c>
 8005052:	f1ba 0f00 	cmp.w	sl, #0
 8005056:	dd34      	ble.n	80050c2 <_dtoa_r+0x3a2>
 8005058:	4a9a      	ldr	r2, [pc, #616]	; (80052c4 <_dtoa_r+0x5a4>)
 800505a:	f00a 030f 	and.w	r3, sl, #15
 800505e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005062:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005066:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800506a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800506e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005072:	d016      	beq.n	80050a2 <_dtoa_r+0x382>
 8005074:	4b94      	ldr	r3, [pc, #592]	; (80052c8 <_dtoa_r+0x5a8>)
 8005076:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800507a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800507e:	f7fb fca1 	bl	80009c4 <__aeabi_ddiv>
 8005082:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005086:	f004 040f 	and.w	r4, r4, #15
 800508a:	2703      	movs	r7, #3
 800508c:	4e8e      	ldr	r6, [pc, #568]	; (80052c8 <_dtoa_r+0x5a8>)
 800508e:	b954      	cbnz	r4, 80050a6 <_dtoa_r+0x386>
 8005090:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005094:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005098:	f7fb fc94 	bl	80009c4 <__aeabi_ddiv>
 800509c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050a0:	e029      	b.n	80050f6 <_dtoa_r+0x3d6>
 80050a2:	2702      	movs	r7, #2
 80050a4:	e7f2      	b.n	800508c <_dtoa_r+0x36c>
 80050a6:	07e1      	lsls	r1, r4, #31
 80050a8:	d508      	bpl.n	80050bc <_dtoa_r+0x39c>
 80050aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80050b2:	f7fb fb5d 	bl	8000770 <__aeabi_dmul>
 80050b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050ba:	3701      	adds	r7, #1
 80050bc:	1064      	asrs	r4, r4, #1
 80050be:	3608      	adds	r6, #8
 80050c0:	e7e5      	b.n	800508e <_dtoa_r+0x36e>
 80050c2:	f000 80a5 	beq.w	8005210 <_dtoa_r+0x4f0>
 80050c6:	f1ca 0400 	rsb	r4, sl, #0
 80050ca:	4b7e      	ldr	r3, [pc, #504]	; (80052c4 <_dtoa_r+0x5a4>)
 80050cc:	4e7e      	ldr	r6, [pc, #504]	; (80052c8 <_dtoa_r+0x5a8>)
 80050ce:	f004 020f 	and.w	r2, r4, #15
 80050d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050de:	f7fb fb47 	bl	8000770 <__aeabi_dmul>
 80050e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050e6:	1124      	asrs	r4, r4, #4
 80050e8:	2300      	movs	r3, #0
 80050ea:	2702      	movs	r7, #2
 80050ec:	2c00      	cmp	r4, #0
 80050ee:	f040 8084 	bne.w	80051fa <_dtoa_r+0x4da>
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1d2      	bne.n	800509c <_dtoa_r+0x37c>
 80050f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 808b 	beq.w	8005214 <_dtoa_r+0x4f4>
 80050fe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005102:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005106:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800510a:	4b70      	ldr	r3, [pc, #448]	; (80052cc <_dtoa_r+0x5ac>)
 800510c:	2200      	movs	r2, #0
 800510e:	f7fb fda1 	bl	8000c54 <__aeabi_dcmplt>
 8005112:	2800      	cmp	r0, #0
 8005114:	d07e      	beq.n	8005214 <_dtoa_r+0x4f4>
 8005116:	9b08      	ldr	r3, [sp, #32]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d07b      	beq.n	8005214 <_dtoa_r+0x4f4>
 800511c:	f1b9 0f00 	cmp.w	r9, #0
 8005120:	dd38      	ble.n	8005194 <_dtoa_r+0x474>
 8005122:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005126:	4b6a      	ldr	r3, [pc, #424]	; (80052d0 <_dtoa_r+0x5b0>)
 8005128:	2200      	movs	r2, #0
 800512a:	f7fb fb21 	bl	8000770 <__aeabi_dmul>
 800512e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005132:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8005136:	3701      	adds	r7, #1
 8005138:	464c      	mov	r4, r9
 800513a:	4638      	mov	r0, r7
 800513c:	f7fb faae 	bl	800069c <__aeabi_i2d>
 8005140:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005144:	f7fb fb14 	bl	8000770 <__aeabi_dmul>
 8005148:	4b62      	ldr	r3, [pc, #392]	; (80052d4 <_dtoa_r+0x5b4>)
 800514a:	2200      	movs	r2, #0
 800514c:	f7fb f95a 	bl	8000404 <__adddf3>
 8005150:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005154:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005158:	9611      	str	r6, [sp, #68]	; 0x44
 800515a:	2c00      	cmp	r4, #0
 800515c:	d15d      	bne.n	800521a <_dtoa_r+0x4fa>
 800515e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005162:	4b5d      	ldr	r3, [pc, #372]	; (80052d8 <_dtoa_r+0x5b8>)
 8005164:	2200      	movs	r2, #0
 8005166:	f7fb f94b 	bl	8000400 <__aeabi_dsub>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005172:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005174:	4633      	mov	r3, r6
 8005176:	f7fb fd8b 	bl	8000c90 <__aeabi_dcmpgt>
 800517a:	2800      	cmp	r0, #0
 800517c:	f040 829c 	bne.w	80056b8 <_dtoa_r+0x998>
 8005180:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005184:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005186:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800518a:	f7fb fd63 	bl	8000c54 <__aeabi_dcmplt>
 800518e:	2800      	cmp	r0, #0
 8005190:	f040 8290 	bne.w	80056b4 <_dtoa_r+0x994>
 8005194:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005198:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800519c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f2c0 8152 	blt.w	8005448 <_dtoa_r+0x728>
 80051a4:	f1ba 0f0e 	cmp.w	sl, #14
 80051a8:	f300 814e 	bgt.w	8005448 <_dtoa_r+0x728>
 80051ac:	4b45      	ldr	r3, [pc, #276]	; (80052c4 <_dtoa_r+0x5a4>)
 80051ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80051b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051b6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80051ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f280 80db 	bge.w	8005378 <_dtoa_r+0x658>
 80051c2:	9b08      	ldr	r3, [sp, #32]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f300 80d7 	bgt.w	8005378 <_dtoa_r+0x658>
 80051ca:	f040 8272 	bne.w	80056b2 <_dtoa_r+0x992>
 80051ce:	4b42      	ldr	r3, [pc, #264]	; (80052d8 <_dtoa_r+0x5b8>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051d6:	f7fb facb 	bl	8000770 <__aeabi_dmul>
 80051da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051de:	f7fb fd4d 	bl	8000c7c <__aeabi_dcmpge>
 80051e2:	9c08      	ldr	r4, [sp, #32]
 80051e4:	4626      	mov	r6, r4
 80051e6:	2800      	cmp	r0, #0
 80051e8:	f040 8248 	bne.w	800567c <_dtoa_r+0x95c>
 80051ec:	9f03      	ldr	r7, [sp, #12]
 80051ee:	2331      	movs	r3, #49	; 0x31
 80051f0:	f807 3b01 	strb.w	r3, [r7], #1
 80051f4:	f10a 0a01 	add.w	sl, sl, #1
 80051f8:	e244      	b.n	8005684 <_dtoa_r+0x964>
 80051fa:	07e2      	lsls	r2, r4, #31
 80051fc:	d505      	bpl.n	800520a <_dtoa_r+0x4ea>
 80051fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005202:	f7fb fab5 	bl	8000770 <__aeabi_dmul>
 8005206:	3701      	adds	r7, #1
 8005208:	2301      	movs	r3, #1
 800520a:	1064      	asrs	r4, r4, #1
 800520c:	3608      	adds	r6, #8
 800520e:	e76d      	b.n	80050ec <_dtoa_r+0x3cc>
 8005210:	2702      	movs	r7, #2
 8005212:	e770      	b.n	80050f6 <_dtoa_r+0x3d6>
 8005214:	9c08      	ldr	r4, [sp, #32]
 8005216:	46d0      	mov	r8, sl
 8005218:	e78f      	b.n	800513a <_dtoa_r+0x41a>
 800521a:	9903      	ldr	r1, [sp, #12]
 800521c:	4b29      	ldr	r3, [pc, #164]	; (80052c4 <_dtoa_r+0x5a4>)
 800521e:	4421      	add	r1, r4
 8005220:	9112      	str	r1, [sp, #72]	; 0x48
 8005222:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005224:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005228:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800522c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005230:	2900      	cmp	r1, #0
 8005232:	d055      	beq.n	80052e0 <_dtoa_r+0x5c0>
 8005234:	4929      	ldr	r1, [pc, #164]	; (80052dc <_dtoa_r+0x5bc>)
 8005236:	2000      	movs	r0, #0
 8005238:	f7fb fbc4 	bl	80009c4 <__aeabi_ddiv>
 800523c:	463b      	mov	r3, r7
 800523e:	4632      	mov	r2, r6
 8005240:	f7fb f8de 	bl	8000400 <__aeabi_dsub>
 8005244:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005248:	9f03      	ldr	r7, [sp, #12]
 800524a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800524e:	f7fb fd3f 	bl	8000cd0 <__aeabi_d2iz>
 8005252:	4604      	mov	r4, r0
 8005254:	f7fb fa22 	bl	800069c <__aeabi_i2d>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005260:	f7fb f8ce 	bl	8000400 <__aeabi_dsub>
 8005264:	3430      	adds	r4, #48	; 0x30
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800526e:	f807 4b01 	strb.w	r4, [r7], #1
 8005272:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005276:	f7fb fced 	bl	8000c54 <__aeabi_dcmplt>
 800527a:	2800      	cmp	r0, #0
 800527c:	d174      	bne.n	8005368 <_dtoa_r+0x648>
 800527e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005282:	4912      	ldr	r1, [pc, #72]	; (80052cc <_dtoa_r+0x5ac>)
 8005284:	2000      	movs	r0, #0
 8005286:	f7fb f8bb 	bl	8000400 <__aeabi_dsub>
 800528a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800528e:	f7fb fce1 	bl	8000c54 <__aeabi_dcmplt>
 8005292:	2800      	cmp	r0, #0
 8005294:	f040 80b7 	bne.w	8005406 <_dtoa_r+0x6e6>
 8005298:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800529a:	429f      	cmp	r7, r3
 800529c:	f43f af7a 	beq.w	8005194 <_dtoa_r+0x474>
 80052a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80052a4:	4b0a      	ldr	r3, [pc, #40]	; (80052d0 <_dtoa_r+0x5b0>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	f7fb fa62 	bl	8000770 <__aeabi_dmul>
 80052ac:	4b08      	ldr	r3, [pc, #32]	; (80052d0 <_dtoa_r+0x5b0>)
 80052ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052b2:	2200      	movs	r2, #0
 80052b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052b8:	f7fb fa5a 	bl	8000770 <__aeabi_dmul>
 80052bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052c0:	e7c3      	b.n	800524a <_dtoa_r+0x52a>
 80052c2:	bf00      	nop
 80052c4:	08007f18 	.word	0x08007f18
 80052c8:	08007ef0 	.word	0x08007ef0
 80052cc:	3ff00000 	.word	0x3ff00000
 80052d0:	40240000 	.word	0x40240000
 80052d4:	401c0000 	.word	0x401c0000
 80052d8:	40140000 	.word	0x40140000
 80052dc:	3fe00000 	.word	0x3fe00000
 80052e0:	4630      	mov	r0, r6
 80052e2:	4639      	mov	r1, r7
 80052e4:	f7fb fa44 	bl	8000770 <__aeabi_dmul>
 80052e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052ee:	9c03      	ldr	r4, [sp, #12]
 80052f0:	9314      	str	r3, [sp, #80]	; 0x50
 80052f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052f6:	f7fb fceb 	bl	8000cd0 <__aeabi_d2iz>
 80052fa:	9015      	str	r0, [sp, #84]	; 0x54
 80052fc:	f7fb f9ce 	bl	800069c <__aeabi_i2d>
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005308:	f7fb f87a 	bl	8000400 <__aeabi_dsub>
 800530c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800530e:	3330      	adds	r3, #48	; 0x30
 8005310:	f804 3b01 	strb.w	r3, [r4], #1
 8005314:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005316:	429c      	cmp	r4, r3
 8005318:	4606      	mov	r6, r0
 800531a:	460f      	mov	r7, r1
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	d124      	bne.n	800536c <_dtoa_r+0x64c>
 8005322:	4ba4      	ldr	r3, [pc, #656]	; (80055b4 <_dtoa_r+0x894>)
 8005324:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005328:	f7fb f86c 	bl	8000404 <__adddf3>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4630      	mov	r0, r6
 8005332:	4639      	mov	r1, r7
 8005334:	f7fb fcac 	bl	8000c90 <__aeabi_dcmpgt>
 8005338:	2800      	cmp	r0, #0
 800533a:	d163      	bne.n	8005404 <_dtoa_r+0x6e4>
 800533c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005340:	499c      	ldr	r1, [pc, #624]	; (80055b4 <_dtoa_r+0x894>)
 8005342:	2000      	movs	r0, #0
 8005344:	f7fb f85c 	bl	8000400 <__aeabi_dsub>
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	4630      	mov	r0, r6
 800534e:	4639      	mov	r1, r7
 8005350:	f7fb fc80 	bl	8000c54 <__aeabi_dcmplt>
 8005354:	2800      	cmp	r0, #0
 8005356:	f43f af1d 	beq.w	8005194 <_dtoa_r+0x474>
 800535a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800535c:	1e7b      	subs	r3, r7, #1
 800535e:	9314      	str	r3, [sp, #80]	; 0x50
 8005360:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005364:	2b30      	cmp	r3, #48	; 0x30
 8005366:	d0f8      	beq.n	800535a <_dtoa_r+0x63a>
 8005368:	46c2      	mov	sl, r8
 800536a:	e03b      	b.n	80053e4 <_dtoa_r+0x6c4>
 800536c:	4b92      	ldr	r3, [pc, #584]	; (80055b8 <_dtoa_r+0x898>)
 800536e:	f7fb f9ff 	bl	8000770 <__aeabi_dmul>
 8005372:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005376:	e7bc      	b.n	80052f2 <_dtoa_r+0x5d2>
 8005378:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800537c:	9f03      	ldr	r7, [sp, #12]
 800537e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005382:	4640      	mov	r0, r8
 8005384:	4649      	mov	r1, r9
 8005386:	f7fb fb1d 	bl	80009c4 <__aeabi_ddiv>
 800538a:	f7fb fca1 	bl	8000cd0 <__aeabi_d2iz>
 800538e:	4604      	mov	r4, r0
 8005390:	f7fb f984 	bl	800069c <__aeabi_i2d>
 8005394:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005398:	f7fb f9ea 	bl	8000770 <__aeabi_dmul>
 800539c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	4640      	mov	r0, r8
 80053a6:	4649      	mov	r1, r9
 80053a8:	f7fb f82a 	bl	8000400 <__aeabi_dsub>
 80053ac:	f807 6b01 	strb.w	r6, [r7], #1
 80053b0:	9e03      	ldr	r6, [sp, #12]
 80053b2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80053b6:	1bbe      	subs	r6, r7, r6
 80053b8:	45b4      	cmp	ip, r6
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	d136      	bne.n	800542e <_dtoa_r+0x70e>
 80053c0:	f7fb f820 	bl	8000404 <__adddf3>
 80053c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053c8:	4680      	mov	r8, r0
 80053ca:	4689      	mov	r9, r1
 80053cc:	f7fb fc60 	bl	8000c90 <__aeabi_dcmpgt>
 80053d0:	bb58      	cbnz	r0, 800542a <_dtoa_r+0x70a>
 80053d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053d6:	4640      	mov	r0, r8
 80053d8:	4649      	mov	r1, r9
 80053da:	f7fb fc31 	bl	8000c40 <__aeabi_dcmpeq>
 80053de:	b108      	cbz	r0, 80053e4 <_dtoa_r+0x6c4>
 80053e0:	07e1      	lsls	r1, r4, #31
 80053e2:	d422      	bmi.n	800542a <_dtoa_r+0x70a>
 80053e4:	4628      	mov	r0, r5
 80053e6:	4659      	mov	r1, fp
 80053e8:	f000 fe60 	bl	80060ac <_Bfree>
 80053ec:	2300      	movs	r3, #0
 80053ee:	703b      	strb	r3, [r7, #0]
 80053f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80053f2:	f10a 0001 	add.w	r0, sl, #1
 80053f6:	6018      	str	r0, [r3, #0]
 80053f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f43f acdd 	beq.w	8004dba <_dtoa_r+0x9a>
 8005400:	601f      	str	r7, [r3, #0]
 8005402:	e4da      	b.n	8004dba <_dtoa_r+0x9a>
 8005404:	4627      	mov	r7, r4
 8005406:	463b      	mov	r3, r7
 8005408:	461f      	mov	r7, r3
 800540a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800540e:	2a39      	cmp	r2, #57	; 0x39
 8005410:	d107      	bne.n	8005422 <_dtoa_r+0x702>
 8005412:	9a03      	ldr	r2, [sp, #12]
 8005414:	429a      	cmp	r2, r3
 8005416:	d1f7      	bne.n	8005408 <_dtoa_r+0x6e8>
 8005418:	9903      	ldr	r1, [sp, #12]
 800541a:	2230      	movs	r2, #48	; 0x30
 800541c:	f108 0801 	add.w	r8, r8, #1
 8005420:	700a      	strb	r2, [r1, #0]
 8005422:	781a      	ldrb	r2, [r3, #0]
 8005424:	3201      	adds	r2, #1
 8005426:	701a      	strb	r2, [r3, #0]
 8005428:	e79e      	b.n	8005368 <_dtoa_r+0x648>
 800542a:	46d0      	mov	r8, sl
 800542c:	e7eb      	b.n	8005406 <_dtoa_r+0x6e6>
 800542e:	4b62      	ldr	r3, [pc, #392]	; (80055b8 <_dtoa_r+0x898>)
 8005430:	2200      	movs	r2, #0
 8005432:	f7fb f99d 	bl	8000770 <__aeabi_dmul>
 8005436:	2200      	movs	r2, #0
 8005438:	2300      	movs	r3, #0
 800543a:	4680      	mov	r8, r0
 800543c:	4689      	mov	r9, r1
 800543e:	f7fb fbff 	bl	8000c40 <__aeabi_dcmpeq>
 8005442:	2800      	cmp	r0, #0
 8005444:	d09b      	beq.n	800537e <_dtoa_r+0x65e>
 8005446:	e7cd      	b.n	80053e4 <_dtoa_r+0x6c4>
 8005448:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800544a:	2a00      	cmp	r2, #0
 800544c:	f000 80d0 	beq.w	80055f0 <_dtoa_r+0x8d0>
 8005450:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005452:	2a01      	cmp	r2, #1
 8005454:	f300 80b2 	bgt.w	80055bc <_dtoa_r+0x89c>
 8005458:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800545a:	2a00      	cmp	r2, #0
 800545c:	f000 80a6 	beq.w	80055ac <_dtoa_r+0x88c>
 8005460:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005464:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005466:	9f06      	ldr	r7, [sp, #24]
 8005468:	9a06      	ldr	r2, [sp, #24]
 800546a:	441a      	add	r2, r3
 800546c:	9206      	str	r2, [sp, #24]
 800546e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005470:	2101      	movs	r1, #1
 8005472:	441a      	add	r2, r3
 8005474:	4628      	mov	r0, r5
 8005476:	9209      	str	r2, [sp, #36]	; 0x24
 8005478:	f000 ff18 	bl	80062ac <__i2b>
 800547c:	4606      	mov	r6, r0
 800547e:	2f00      	cmp	r7, #0
 8005480:	dd0c      	ble.n	800549c <_dtoa_r+0x77c>
 8005482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005484:	2b00      	cmp	r3, #0
 8005486:	dd09      	ble.n	800549c <_dtoa_r+0x77c>
 8005488:	42bb      	cmp	r3, r7
 800548a:	9a06      	ldr	r2, [sp, #24]
 800548c:	bfa8      	it	ge
 800548e:	463b      	movge	r3, r7
 8005490:	1ad2      	subs	r2, r2, r3
 8005492:	9206      	str	r2, [sp, #24]
 8005494:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005496:	1aff      	subs	r7, r7, r3
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	9309      	str	r3, [sp, #36]	; 0x24
 800549c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800549e:	b1f3      	cbz	r3, 80054de <_dtoa_r+0x7be>
 80054a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 80a8 	beq.w	80055f8 <_dtoa_r+0x8d8>
 80054a8:	2c00      	cmp	r4, #0
 80054aa:	dd10      	ble.n	80054ce <_dtoa_r+0x7ae>
 80054ac:	4631      	mov	r1, r6
 80054ae:	4622      	mov	r2, r4
 80054b0:	4628      	mov	r0, r5
 80054b2:	f000 ffb9 	bl	8006428 <__pow5mult>
 80054b6:	465a      	mov	r2, fp
 80054b8:	4601      	mov	r1, r0
 80054ba:	4606      	mov	r6, r0
 80054bc:	4628      	mov	r0, r5
 80054be:	f000 ff0b 	bl	80062d8 <__multiply>
 80054c2:	4659      	mov	r1, fp
 80054c4:	4680      	mov	r8, r0
 80054c6:	4628      	mov	r0, r5
 80054c8:	f000 fdf0 	bl	80060ac <_Bfree>
 80054cc:	46c3      	mov	fp, r8
 80054ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054d0:	1b1a      	subs	r2, r3, r4
 80054d2:	d004      	beq.n	80054de <_dtoa_r+0x7be>
 80054d4:	4659      	mov	r1, fp
 80054d6:	4628      	mov	r0, r5
 80054d8:	f000 ffa6 	bl	8006428 <__pow5mult>
 80054dc:	4683      	mov	fp, r0
 80054de:	2101      	movs	r1, #1
 80054e0:	4628      	mov	r0, r5
 80054e2:	f000 fee3 	bl	80062ac <__i2b>
 80054e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	4604      	mov	r4, r0
 80054ec:	f340 8086 	ble.w	80055fc <_dtoa_r+0x8dc>
 80054f0:	461a      	mov	r2, r3
 80054f2:	4601      	mov	r1, r0
 80054f4:	4628      	mov	r0, r5
 80054f6:	f000 ff97 	bl	8006428 <__pow5mult>
 80054fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	4604      	mov	r4, r0
 8005500:	dd7f      	ble.n	8005602 <_dtoa_r+0x8e2>
 8005502:	f04f 0800 	mov.w	r8, #0
 8005506:	6923      	ldr	r3, [r4, #16]
 8005508:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800550c:	6918      	ldr	r0, [r3, #16]
 800550e:	f000 fe7f 	bl	8006210 <__hi0bits>
 8005512:	f1c0 0020 	rsb	r0, r0, #32
 8005516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005518:	4418      	add	r0, r3
 800551a:	f010 001f 	ands.w	r0, r0, #31
 800551e:	f000 8092 	beq.w	8005646 <_dtoa_r+0x926>
 8005522:	f1c0 0320 	rsb	r3, r0, #32
 8005526:	2b04      	cmp	r3, #4
 8005528:	f340 808a 	ble.w	8005640 <_dtoa_r+0x920>
 800552c:	f1c0 001c 	rsb	r0, r0, #28
 8005530:	9b06      	ldr	r3, [sp, #24]
 8005532:	4403      	add	r3, r0
 8005534:	9306      	str	r3, [sp, #24]
 8005536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005538:	4403      	add	r3, r0
 800553a:	4407      	add	r7, r0
 800553c:	9309      	str	r3, [sp, #36]	; 0x24
 800553e:	9b06      	ldr	r3, [sp, #24]
 8005540:	2b00      	cmp	r3, #0
 8005542:	dd05      	ble.n	8005550 <_dtoa_r+0x830>
 8005544:	4659      	mov	r1, fp
 8005546:	461a      	mov	r2, r3
 8005548:	4628      	mov	r0, r5
 800554a:	f000 ffc7 	bl	80064dc <__lshift>
 800554e:	4683      	mov	fp, r0
 8005550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005552:	2b00      	cmp	r3, #0
 8005554:	dd05      	ble.n	8005562 <_dtoa_r+0x842>
 8005556:	4621      	mov	r1, r4
 8005558:	461a      	mov	r2, r3
 800555a:	4628      	mov	r0, r5
 800555c:	f000 ffbe 	bl	80064dc <__lshift>
 8005560:	4604      	mov	r4, r0
 8005562:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005564:	2b00      	cmp	r3, #0
 8005566:	d070      	beq.n	800564a <_dtoa_r+0x92a>
 8005568:	4621      	mov	r1, r4
 800556a:	4658      	mov	r0, fp
 800556c:	f001 f826 	bl	80065bc <__mcmp>
 8005570:	2800      	cmp	r0, #0
 8005572:	da6a      	bge.n	800564a <_dtoa_r+0x92a>
 8005574:	2300      	movs	r3, #0
 8005576:	4659      	mov	r1, fp
 8005578:	220a      	movs	r2, #10
 800557a:	4628      	mov	r0, r5
 800557c:	f000 fdb8 	bl	80060f0 <__multadd>
 8005580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005582:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005586:	4683      	mov	fp, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 8194 	beq.w	80058b6 <_dtoa_r+0xb96>
 800558e:	4631      	mov	r1, r6
 8005590:	2300      	movs	r3, #0
 8005592:	220a      	movs	r2, #10
 8005594:	4628      	mov	r0, r5
 8005596:	f000 fdab 	bl	80060f0 <__multadd>
 800559a:	f1b9 0f00 	cmp.w	r9, #0
 800559e:	4606      	mov	r6, r0
 80055a0:	f300 8093 	bgt.w	80056ca <_dtoa_r+0x9aa>
 80055a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	dc57      	bgt.n	800565a <_dtoa_r+0x93a>
 80055aa:	e08e      	b.n	80056ca <_dtoa_r+0x9aa>
 80055ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80055ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80055b2:	e757      	b.n	8005464 <_dtoa_r+0x744>
 80055b4:	3fe00000 	.word	0x3fe00000
 80055b8:	40240000 	.word	0x40240000
 80055bc:	9b08      	ldr	r3, [sp, #32]
 80055be:	1e5c      	subs	r4, r3, #1
 80055c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055c2:	42a3      	cmp	r3, r4
 80055c4:	bfbf      	itttt	lt
 80055c6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80055c8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80055ca:	1ae2      	sublt	r2, r4, r3
 80055cc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80055ce:	bfb6      	itet	lt
 80055d0:	189b      	addlt	r3, r3, r2
 80055d2:	1b1c      	subge	r4, r3, r4
 80055d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80055d6:	9b08      	ldr	r3, [sp, #32]
 80055d8:	bfb8      	it	lt
 80055da:	2400      	movlt	r4, #0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	bfb9      	ittee	lt
 80055e0:	9b06      	ldrlt	r3, [sp, #24]
 80055e2:	9a08      	ldrlt	r2, [sp, #32]
 80055e4:	9f06      	ldrge	r7, [sp, #24]
 80055e6:	9b08      	ldrge	r3, [sp, #32]
 80055e8:	bfbc      	itt	lt
 80055ea:	1a9f      	sublt	r7, r3, r2
 80055ec:	2300      	movlt	r3, #0
 80055ee:	e73b      	b.n	8005468 <_dtoa_r+0x748>
 80055f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80055f2:	9f06      	ldr	r7, [sp, #24]
 80055f4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80055f6:	e742      	b.n	800547e <_dtoa_r+0x75e>
 80055f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055fa:	e76b      	b.n	80054d4 <_dtoa_r+0x7b4>
 80055fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055fe:	2b01      	cmp	r3, #1
 8005600:	dc19      	bgt.n	8005636 <_dtoa_r+0x916>
 8005602:	9b04      	ldr	r3, [sp, #16]
 8005604:	b9bb      	cbnz	r3, 8005636 <_dtoa_r+0x916>
 8005606:	9b05      	ldr	r3, [sp, #20]
 8005608:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800560c:	b99b      	cbnz	r3, 8005636 <_dtoa_r+0x916>
 800560e:	9b05      	ldr	r3, [sp, #20]
 8005610:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005614:	0d1b      	lsrs	r3, r3, #20
 8005616:	051b      	lsls	r3, r3, #20
 8005618:	b183      	cbz	r3, 800563c <_dtoa_r+0x91c>
 800561a:	9b06      	ldr	r3, [sp, #24]
 800561c:	3301      	adds	r3, #1
 800561e:	9306      	str	r3, [sp, #24]
 8005620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005622:	3301      	adds	r3, #1
 8005624:	9309      	str	r3, [sp, #36]	; 0x24
 8005626:	f04f 0801 	mov.w	r8, #1
 800562a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800562c:	2b00      	cmp	r3, #0
 800562e:	f47f af6a 	bne.w	8005506 <_dtoa_r+0x7e6>
 8005632:	2001      	movs	r0, #1
 8005634:	e76f      	b.n	8005516 <_dtoa_r+0x7f6>
 8005636:	f04f 0800 	mov.w	r8, #0
 800563a:	e7f6      	b.n	800562a <_dtoa_r+0x90a>
 800563c:	4698      	mov	r8, r3
 800563e:	e7f4      	b.n	800562a <_dtoa_r+0x90a>
 8005640:	f43f af7d 	beq.w	800553e <_dtoa_r+0x81e>
 8005644:	4618      	mov	r0, r3
 8005646:	301c      	adds	r0, #28
 8005648:	e772      	b.n	8005530 <_dtoa_r+0x810>
 800564a:	9b08      	ldr	r3, [sp, #32]
 800564c:	2b00      	cmp	r3, #0
 800564e:	dc36      	bgt.n	80056be <_dtoa_r+0x99e>
 8005650:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005652:	2b02      	cmp	r3, #2
 8005654:	dd33      	ble.n	80056be <_dtoa_r+0x99e>
 8005656:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800565a:	f1b9 0f00 	cmp.w	r9, #0
 800565e:	d10d      	bne.n	800567c <_dtoa_r+0x95c>
 8005660:	4621      	mov	r1, r4
 8005662:	464b      	mov	r3, r9
 8005664:	2205      	movs	r2, #5
 8005666:	4628      	mov	r0, r5
 8005668:	f000 fd42 	bl	80060f0 <__multadd>
 800566c:	4601      	mov	r1, r0
 800566e:	4604      	mov	r4, r0
 8005670:	4658      	mov	r0, fp
 8005672:	f000 ffa3 	bl	80065bc <__mcmp>
 8005676:	2800      	cmp	r0, #0
 8005678:	f73f adb8 	bgt.w	80051ec <_dtoa_r+0x4cc>
 800567c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800567e:	9f03      	ldr	r7, [sp, #12]
 8005680:	ea6f 0a03 	mvn.w	sl, r3
 8005684:	f04f 0800 	mov.w	r8, #0
 8005688:	4621      	mov	r1, r4
 800568a:	4628      	mov	r0, r5
 800568c:	f000 fd0e 	bl	80060ac <_Bfree>
 8005690:	2e00      	cmp	r6, #0
 8005692:	f43f aea7 	beq.w	80053e4 <_dtoa_r+0x6c4>
 8005696:	f1b8 0f00 	cmp.w	r8, #0
 800569a:	d005      	beq.n	80056a8 <_dtoa_r+0x988>
 800569c:	45b0      	cmp	r8, r6
 800569e:	d003      	beq.n	80056a8 <_dtoa_r+0x988>
 80056a0:	4641      	mov	r1, r8
 80056a2:	4628      	mov	r0, r5
 80056a4:	f000 fd02 	bl	80060ac <_Bfree>
 80056a8:	4631      	mov	r1, r6
 80056aa:	4628      	mov	r0, r5
 80056ac:	f000 fcfe 	bl	80060ac <_Bfree>
 80056b0:	e698      	b.n	80053e4 <_dtoa_r+0x6c4>
 80056b2:	2400      	movs	r4, #0
 80056b4:	4626      	mov	r6, r4
 80056b6:	e7e1      	b.n	800567c <_dtoa_r+0x95c>
 80056b8:	46c2      	mov	sl, r8
 80056ba:	4626      	mov	r6, r4
 80056bc:	e596      	b.n	80051ec <_dtoa_r+0x4cc>
 80056be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 80fd 	beq.w	80058c4 <_dtoa_r+0xba4>
 80056ca:	2f00      	cmp	r7, #0
 80056cc:	dd05      	ble.n	80056da <_dtoa_r+0x9ba>
 80056ce:	4631      	mov	r1, r6
 80056d0:	463a      	mov	r2, r7
 80056d2:	4628      	mov	r0, r5
 80056d4:	f000 ff02 	bl	80064dc <__lshift>
 80056d8:	4606      	mov	r6, r0
 80056da:	f1b8 0f00 	cmp.w	r8, #0
 80056de:	d05c      	beq.n	800579a <_dtoa_r+0xa7a>
 80056e0:	6871      	ldr	r1, [r6, #4]
 80056e2:	4628      	mov	r0, r5
 80056e4:	f000 fca2 	bl	800602c <_Balloc>
 80056e8:	4607      	mov	r7, r0
 80056ea:	b928      	cbnz	r0, 80056f8 <_dtoa_r+0x9d8>
 80056ec:	4b80      	ldr	r3, [pc, #512]	; (80058f0 <_dtoa_r+0xbd0>)
 80056ee:	4602      	mov	r2, r0
 80056f0:	f240 21ea 	movw	r1, #746	; 0x2ea
 80056f4:	f7ff bb28 	b.w	8004d48 <_dtoa_r+0x28>
 80056f8:	6932      	ldr	r2, [r6, #16]
 80056fa:	3202      	adds	r2, #2
 80056fc:	0092      	lsls	r2, r2, #2
 80056fe:	f106 010c 	add.w	r1, r6, #12
 8005702:	300c      	adds	r0, #12
 8005704:	f000 fc84 	bl	8006010 <memcpy>
 8005708:	2201      	movs	r2, #1
 800570a:	4639      	mov	r1, r7
 800570c:	4628      	mov	r0, r5
 800570e:	f000 fee5 	bl	80064dc <__lshift>
 8005712:	9b03      	ldr	r3, [sp, #12]
 8005714:	3301      	adds	r3, #1
 8005716:	9308      	str	r3, [sp, #32]
 8005718:	9b03      	ldr	r3, [sp, #12]
 800571a:	444b      	add	r3, r9
 800571c:	930a      	str	r3, [sp, #40]	; 0x28
 800571e:	9b04      	ldr	r3, [sp, #16]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	46b0      	mov	r8, r6
 8005726:	9309      	str	r3, [sp, #36]	; 0x24
 8005728:	4606      	mov	r6, r0
 800572a:	9b08      	ldr	r3, [sp, #32]
 800572c:	4621      	mov	r1, r4
 800572e:	3b01      	subs	r3, #1
 8005730:	4658      	mov	r0, fp
 8005732:	9304      	str	r3, [sp, #16]
 8005734:	f7ff fa6c 	bl	8004c10 <quorem>
 8005738:	4603      	mov	r3, r0
 800573a:	3330      	adds	r3, #48	; 0x30
 800573c:	9006      	str	r0, [sp, #24]
 800573e:	4641      	mov	r1, r8
 8005740:	4658      	mov	r0, fp
 8005742:	930b      	str	r3, [sp, #44]	; 0x2c
 8005744:	f000 ff3a 	bl	80065bc <__mcmp>
 8005748:	4632      	mov	r2, r6
 800574a:	4681      	mov	r9, r0
 800574c:	4621      	mov	r1, r4
 800574e:	4628      	mov	r0, r5
 8005750:	f000 ff50 	bl	80065f4 <__mdiff>
 8005754:	68c2      	ldr	r2, [r0, #12]
 8005756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005758:	4607      	mov	r7, r0
 800575a:	bb02      	cbnz	r2, 800579e <_dtoa_r+0xa7e>
 800575c:	4601      	mov	r1, r0
 800575e:	4658      	mov	r0, fp
 8005760:	f000 ff2c 	bl	80065bc <__mcmp>
 8005764:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005766:	4602      	mov	r2, r0
 8005768:	4639      	mov	r1, r7
 800576a:	4628      	mov	r0, r5
 800576c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005770:	f000 fc9c 	bl	80060ac <_Bfree>
 8005774:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005776:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005778:	9f08      	ldr	r7, [sp, #32]
 800577a:	ea43 0102 	orr.w	r1, r3, r2
 800577e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005780:	430b      	orrs	r3, r1
 8005782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005784:	d10d      	bne.n	80057a2 <_dtoa_r+0xa82>
 8005786:	2b39      	cmp	r3, #57	; 0x39
 8005788:	d029      	beq.n	80057de <_dtoa_r+0xabe>
 800578a:	f1b9 0f00 	cmp.w	r9, #0
 800578e:	dd01      	ble.n	8005794 <_dtoa_r+0xa74>
 8005790:	9b06      	ldr	r3, [sp, #24]
 8005792:	3331      	adds	r3, #49	; 0x31
 8005794:	9a04      	ldr	r2, [sp, #16]
 8005796:	7013      	strb	r3, [r2, #0]
 8005798:	e776      	b.n	8005688 <_dtoa_r+0x968>
 800579a:	4630      	mov	r0, r6
 800579c:	e7b9      	b.n	8005712 <_dtoa_r+0x9f2>
 800579e:	2201      	movs	r2, #1
 80057a0:	e7e2      	b.n	8005768 <_dtoa_r+0xa48>
 80057a2:	f1b9 0f00 	cmp.w	r9, #0
 80057a6:	db06      	blt.n	80057b6 <_dtoa_r+0xa96>
 80057a8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80057aa:	ea41 0909 	orr.w	r9, r1, r9
 80057ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057b0:	ea59 0101 	orrs.w	r1, r9, r1
 80057b4:	d120      	bne.n	80057f8 <_dtoa_r+0xad8>
 80057b6:	2a00      	cmp	r2, #0
 80057b8:	ddec      	ble.n	8005794 <_dtoa_r+0xa74>
 80057ba:	4659      	mov	r1, fp
 80057bc:	2201      	movs	r2, #1
 80057be:	4628      	mov	r0, r5
 80057c0:	9308      	str	r3, [sp, #32]
 80057c2:	f000 fe8b 	bl	80064dc <__lshift>
 80057c6:	4621      	mov	r1, r4
 80057c8:	4683      	mov	fp, r0
 80057ca:	f000 fef7 	bl	80065bc <__mcmp>
 80057ce:	2800      	cmp	r0, #0
 80057d0:	9b08      	ldr	r3, [sp, #32]
 80057d2:	dc02      	bgt.n	80057da <_dtoa_r+0xaba>
 80057d4:	d1de      	bne.n	8005794 <_dtoa_r+0xa74>
 80057d6:	07da      	lsls	r2, r3, #31
 80057d8:	d5dc      	bpl.n	8005794 <_dtoa_r+0xa74>
 80057da:	2b39      	cmp	r3, #57	; 0x39
 80057dc:	d1d8      	bne.n	8005790 <_dtoa_r+0xa70>
 80057de:	9a04      	ldr	r2, [sp, #16]
 80057e0:	2339      	movs	r3, #57	; 0x39
 80057e2:	7013      	strb	r3, [r2, #0]
 80057e4:	463b      	mov	r3, r7
 80057e6:	461f      	mov	r7, r3
 80057e8:	3b01      	subs	r3, #1
 80057ea:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80057ee:	2a39      	cmp	r2, #57	; 0x39
 80057f0:	d050      	beq.n	8005894 <_dtoa_r+0xb74>
 80057f2:	3201      	adds	r2, #1
 80057f4:	701a      	strb	r2, [r3, #0]
 80057f6:	e747      	b.n	8005688 <_dtoa_r+0x968>
 80057f8:	2a00      	cmp	r2, #0
 80057fa:	dd03      	ble.n	8005804 <_dtoa_r+0xae4>
 80057fc:	2b39      	cmp	r3, #57	; 0x39
 80057fe:	d0ee      	beq.n	80057de <_dtoa_r+0xabe>
 8005800:	3301      	adds	r3, #1
 8005802:	e7c7      	b.n	8005794 <_dtoa_r+0xa74>
 8005804:	9a08      	ldr	r2, [sp, #32]
 8005806:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005808:	f802 3c01 	strb.w	r3, [r2, #-1]
 800580c:	428a      	cmp	r2, r1
 800580e:	d02a      	beq.n	8005866 <_dtoa_r+0xb46>
 8005810:	4659      	mov	r1, fp
 8005812:	2300      	movs	r3, #0
 8005814:	220a      	movs	r2, #10
 8005816:	4628      	mov	r0, r5
 8005818:	f000 fc6a 	bl	80060f0 <__multadd>
 800581c:	45b0      	cmp	r8, r6
 800581e:	4683      	mov	fp, r0
 8005820:	f04f 0300 	mov.w	r3, #0
 8005824:	f04f 020a 	mov.w	r2, #10
 8005828:	4641      	mov	r1, r8
 800582a:	4628      	mov	r0, r5
 800582c:	d107      	bne.n	800583e <_dtoa_r+0xb1e>
 800582e:	f000 fc5f 	bl	80060f0 <__multadd>
 8005832:	4680      	mov	r8, r0
 8005834:	4606      	mov	r6, r0
 8005836:	9b08      	ldr	r3, [sp, #32]
 8005838:	3301      	adds	r3, #1
 800583a:	9308      	str	r3, [sp, #32]
 800583c:	e775      	b.n	800572a <_dtoa_r+0xa0a>
 800583e:	f000 fc57 	bl	80060f0 <__multadd>
 8005842:	4631      	mov	r1, r6
 8005844:	4680      	mov	r8, r0
 8005846:	2300      	movs	r3, #0
 8005848:	220a      	movs	r2, #10
 800584a:	4628      	mov	r0, r5
 800584c:	f000 fc50 	bl	80060f0 <__multadd>
 8005850:	4606      	mov	r6, r0
 8005852:	e7f0      	b.n	8005836 <_dtoa_r+0xb16>
 8005854:	f1b9 0f00 	cmp.w	r9, #0
 8005858:	9a03      	ldr	r2, [sp, #12]
 800585a:	bfcc      	ite	gt
 800585c:	464f      	movgt	r7, r9
 800585e:	2701      	movle	r7, #1
 8005860:	4417      	add	r7, r2
 8005862:	f04f 0800 	mov.w	r8, #0
 8005866:	4659      	mov	r1, fp
 8005868:	2201      	movs	r2, #1
 800586a:	4628      	mov	r0, r5
 800586c:	9308      	str	r3, [sp, #32]
 800586e:	f000 fe35 	bl	80064dc <__lshift>
 8005872:	4621      	mov	r1, r4
 8005874:	4683      	mov	fp, r0
 8005876:	f000 fea1 	bl	80065bc <__mcmp>
 800587a:	2800      	cmp	r0, #0
 800587c:	dcb2      	bgt.n	80057e4 <_dtoa_r+0xac4>
 800587e:	d102      	bne.n	8005886 <_dtoa_r+0xb66>
 8005880:	9b08      	ldr	r3, [sp, #32]
 8005882:	07db      	lsls	r3, r3, #31
 8005884:	d4ae      	bmi.n	80057e4 <_dtoa_r+0xac4>
 8005886:	463b      	mov	r3, r7
 8005888:	461f      	mov	r7, r3
 800588a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800588e:	2a30      	cmp	r2, #48	; 0x30
 8005890:	d0fa      	beq.n	8005888 <_dtoa_r+0xb68>
 8005892:	e6f9      	b.n	8005688 <_dtoa_r+0x968>
 8005894:	9a03      	ldr	r2, [sp, #12]
 8005896:	429a      	cmp	r2, r3
 8005898:	d1a5      	bne.n	80057e6 <_dtoa_r+0xac6>
 800589a:	f10a 0a01 	add.w	sl, sl, #1
 800589e:	2331      	movs	r3, #49	; 0x31
 80058a0:	e779      	b.n	8005796 <_dtoa_r+0xa76>
 80058a2:	4b14      	ldr	r3, [pc, #80]	; (80058f4 <_dtoa_r+0xbd4>)
 80058a4:	f7ff baa7 	b.w	8004df6 <_dtoa_r+0xd6>
 80058a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f47f aa80 	bne.w	8004db0 <_dtoa_r+0x90>
 80058b0:	4b11      	ldr	r3, [pc, #68]	; (80058f8 <_dtoa_r+0xbd8>)
 80058b2:	f7ff baa0 	b.w	8004df6 <_dtoa_r+0xd6>
 80058b6:	f1b9 0f00 	cmp.w	r9, #0
 80058ba:	dc03      	bgt.n	80058c4 <_dtoa_r+0xba4>
 80058bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058be:	2b02      	cmp	r3, #2
 80058c0:	f73f aecb 	bgt.w	800565a <_dtoa_r+0x93a>
 80058c4:	9f03      	ldr	r7, [sp, #12]
 80058c6:	4621      	mov	r1, r4
 80058c8:	4658      	mov	r0, fp
 80058ca:	f7ff f9a1 	bl	8004c10 <quorem>
 80058ce:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80058d2:	f807 3b01 	strb.w	r3, [r7], #1
 80058d6:	9a03      	ldr	r2, [sp, #12]
 80058d8:	1aba      	subs	r2, r7, r2
 80058da:	4591      	cmp	r9, r2
 80058dc:	ddba      	ble.n	8005854 <_dtoa_r+0xb34>
 80058de:	4659      	mov	r1, fp
 80058e0:	2300      	movs	r3, #0
 80058e2:	220a      	movs	r2, #10
 80058e4:	4628      	mov	r0, r5
 80058e6:	f000 fc03 	bl	80060f0 <__multadd>
 80058ea:	4683      	mov	fp, r0
 80058ec:	e7eb      	b.n	80058c6 <_dtoa_r+0xba6>
 80058ee:	bf00      	nop
 80058f0:	08007e08 	.word	0x08007e08
 80058f4:	08007c0c 	.word	0x08007c0c
 80058f8:	08007d89 	.word	0x08007d89

080058fc <__errno>:
 80058fc:	4b01      	ldr	r3, [pc, #4]	; (8005904 <__errno+0x8>)
 80058fe:	6818      	ldr	r0, [r3, #0]
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	20000044 	.word	0x20000044

08005908 <rshift>:
 8005908:	6903      	ldr	r3, [r0, #16]
 800590a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800590e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005912:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005916:	f100 0414 	add.w	r4, r0, #20
 800591a:	dd45      	ble.n	80059a8 <rshift+0xa0>
 800591c:	f011 011f 	ands.w	r1, r1, #31
 8005920:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005924:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005928:	d10c      	bne.n	8005944 <rshift+0x3c>
 800592a:	f100 0710 	add.w	r7, r0, #16
 800592e:	4629      	mov	r1, r5
 8005930:	42b1      	cmp	r1, r6
 8005932:	d334      	bcc.n	800599e <rshift+0x96>
 8005934:	1a9b      	subs	r3, r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	1eea      	subs	r2, r5, #3
 800593a:	4296      	cmp	r6, r2
 800593c:	bf38      	it	cc
 800593e:	2300      	movcc	r3, #0
 8005940:	4423      	add	r3, r4
 8005942:	e015      	b.n	8005970 <rshift+0x68>
 8005944:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005948:	f1c1 0820 	rsb	r8, r1, #32
 800594c:	40cf      	lsrs	r7, r1
 800594e:	f105 0e04 	add.w	lr, r5, #4
 8005952:	46a1      	mov	r9, r4
 8005954:	4576      	cmp	r6, lr
 8005956:	46f4      	mov	ip, lr
 8005958:	d815      	bhi.n	8005986 <rshift+0x7e>
 800595a:	1a9a      	subs	r2, r3, r2
 800595c:	0092      	lsls	r2, r2, #2
 800595e:	3a04      	subs	r2, #4
 8005960:	3501      	adds	r5, #1
 8005962:	42ae      	cmp	r6, r5
 8005964:	bf38      	it	cc
 8005966:	2200      	movcc	r2, #0
 8005968:	18a3      	adds	r3, r4, r2
 800596a:	50a7      	str	r7, [r4, r2]
 800596c:	b107      	cbz	r7, 8005970 <rshift+0x68>
 800596e:	3304      	adds	r3, #4
 8005970:	1b1a      	subs	r2, r3, r4
 8005972:	42a3      	cmp	r3, r4
 8005974:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005978:	bf08      	it	eq
 800597a:	2300      	moveq	r3, #0
 800597c:	6102      	str	r2, [r0, #16]
 800597e:	bf08      	it	eq
 8005980:	6143      	streq	r3, [r0, #20]
 8005982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005986:	f8dc c000 	ldr.w	ip, [ip]
 800598a:	fa0c fc08 	lsl.w	ip, ip, r8
 800598e:	ea4c 0707 	orr.w	r7, ip, r7
 8005992:	f849 7b04 	str.w	r7, [r9], #4
 8005996:	f85e 7b04 	ldr.w	r7, [lr], #4
 800599a:	40cf      	lsrs	r7, r1
 800599c:	e7da      	b.n	8005954 <rshift+0x4c>
 800599e:	f851 cb04 	ldr.w	ip, [r1], #4
 80059a2:	f847 cf04 	str.w	ip, [r7, #4]!
 80059a6:	e7c3      	b.n	8005930 <rshift+0x28>
 80059a8:	4623      	mov	r3, r4
 80059aa:	e7e1      	b.n	8005970 <rshift+0x68>

080059ac <__hexdig_fun>:
 80059ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80059b0:	2b09      	cmp	r3, #9
 80059b2:	d802      	bhi.n	80059ba <__hexdig_fun+0xe>
 80059b4:	3820      	subs	r0, #32
 80059b6:	b2c0      	uxtb	r0, r0
 80059b8:	4770      	bx	lr
 80059ba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80059be:	2b05      	cmp	r3, #5
 80059c0:	d801      	bhi.n	80059c6 <__hexdig_fun+0x1a>
 80059c2:	3847      	subs	r0, #71	; 0x47
 80059c4:	e7f7      	b.n	80059b6 <__hexdig_fun+0xa>
 80059c6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80059ca:	2b05      	cmp	r3, #5
 80059cc:	d801      	bhi.n	80059d2 <__hexdig_fun+0x26>
 80059ce:	3827      	subs	r0, #39	; 0x27
 80059d0:	e7f1      	b.n	80059b6 <__hexdig_fun+0xa>
 80059d2:	2000      	movs	r0, #0
 80059d4:	4770      	bx	lr
	...

080059d8 <__gethex>:
 80059d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059dc:	b08b      	sub	sp, #44	; 0x2c
 80059de:	468b      	mov	fp, r1
 80059e0:	9305      	str	r3, [sp, #20]
 80059e2:	4bb2      	ldr	r3, [pc, #712]	; (8005cac <__gethex+0x2d4>)
 80059e4:	9002      	str	r0, [sp, #8]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	9303      	str	r3, [sp, #12]
 80059ea:	4618      	mov	r0, r3
 80059ec:	4690      	mov	r8, r2
 80059ee:	f7fa fbf7 	bl	80001e0 <strlen>
 80059f2:	9b03      	ldr	r3, [sp, #12]
 80059f4:	f8db 2000 	ldr.w	r2, [fp]
 80059f8:	4403      	add	r3, r0
 80059fa:	4682      	mov	sl, r0
 80059fc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005a00:	9306      	str	r3, [sp, #24]
 8005a02:	1c93      	adds	r3, r2, #2
 8005a04:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005a08:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005a0c:	32fe      	adds	r2, #254	; 0xfe
 8005a0e:	18d1      	adds	r1, r2, r3
 8005a10:	461f      	mov	r7, r3
 8005a12:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005a16:	9101      	str	r1, [sp, #4]
 8005a18:	2830      	cmp	r0, #48	; 0x30
 8005a1a:	d0f8      	beq.n	8005a0e <__gethex+0x36>
 8005a1c:	f7ff ffc6 	bl	80059ac <__hexdig_fun>
 8005a20:	4604      	mov	r4, r0
 8005a22:	2800      	cmp	r0, #0
 8005a24:	d13a      	bne.n	8005a9c <__gethex+0xc4>
 8005a26:	9903      	ldr	r1, [sp, #12]
 8005a28:	4652      	mov	r2, sl
 8005a2a:	4638      	mov	r0, r7
 8005a2c:	f001 fa16 	bl	8006e5c <strncmp>
 8005a30:	4605      	mov	r5, r0
 8005a32:	2800      	cmp	r0, #0
 8005a34:	d166      	bne.n	8005b04 <__gethex+0x12c>
 8005a36:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005a3a:	eb07 060a 	add.w	r6, r7, sl
 8005a3e:	f7ff ffb5 	bl	80059ac <__hexdig_fun>
 8005a42:	2800      	cmp	r0, #0
 8005a44:	d060      	beq.n	8005b08 <__gethex+0x130>
 8005a46:	4633      	mov	r3, r6
 8005a48:	7818      	ldrb	r0, [r3, #0]
 8005a4a:	2830      	cmp	r0, #48	; 0x30
 8005a4c:	461f      	mov	r7, r3
 8005a4e:	f103 0301 	add.w	r3, r3, #1
 8005a52:	d0f9      	beq.n	8005a48 <__gethex+0x70>
 8005a54:	f7ff ffaa 	bl	80059ac <__hexdig_fun>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	fab0 f480 	clz	r4, r0
 8005a5e:	0964      	lsrs	r4, r4, #5
 8005a60:	4635      	mov	r5, r6
 8005a62:	9301      	str	r3, [sp, #4]
 8005a64:	463a      	mov	r2, r7
 8005a66:	4616      	mov	r6, r2
 8005a68:	3201      	adds	r2, #1
 8005a6a:	7830      	ldrb	r0, [r6, #0]
 8005a6c:	f7ff ff9e 	bl	80059ac <__hexdig_fun>
 8005a70:	2800      	cmp	r0, #0
 8005a72:	d1f8      	bne.n	8005a66 <__gethex+0x8e>
 8005a74:	9903      	ldr	r1, [sp, #12]
 8005a76:	4652      	mov	r2, sl
 8005a78:	4630      	mov	r0, r6
 8005a7a:	f001 f9ef 	bl	8006e5c <strncmp>
 8005a7e:	b980      	cbnz	r0, 8005aa2 <__gethex+0xca>
 8005a80:	b94d      	cbnz	r5, 8005a96 <__gethex+0xbe>
 8005a82:	eb06 050a 	add.w	r5, r6, sl
 8005a86:	462a      	mov	r2, r5
 8005a88:	4616      	mov	r6, r2
 8005a8a:	3201      	adds	r2, #1
 8005a8c:	7830      	ldrb	r0, [r6, #0]
 8005a8e:	f7ff ff8d 	bl	80059ac <__hexdig_fun>
 8005a92:	2800      	cmp	r0, #0
 8005a94:	d1f8      	bne.n	8005a88 <__gethex+0xb0>
 8005a96:	1bad      	subs	r5, r5, r6
 8005a98:	00ad      	lsls	r5, r5, #2
 8005a9a:	e004      	b.n	8005aa6 <__gethex+0xce>
 8005a9c:	2400      	movs	r4, #0
 8005a9e:	4625      	mov	r5, r4
 8005aa0:	e7e0      	b.n	8005a64 <__gethex+0x8c>
 8005aa2:	2d00      	cmp	r5, #0
 8005aa4:	d1f7      	bne.n	8005a96 <__gethex+0xbe>
 8005aa6:	7833      	ldrb	r3, [r6, #0]
 8005aa8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005aac:	2b50      	cmp	r3, #80	; 0x50
 8005aae:	d139      	bne.n	8005b24 <__gethex+0x14c>
 8005ab0:	7873      	ldrb	r3, [r6, #1]
 8005ab2:	2b2b      	cmp	r3, #43	; 0x2b
 8005ab4:	d02a      	beq.n	8005b0c <__gethex+0x134>
 8005ab6:	2b2d      	cmp	r3, #45	; 0x2d
 8005ab8:	d02c      	beq.n	8005b14 <__gethex+0x13c>
 8005aba:	1c71      	adds	r1, r6, #1
 8005abc:	f04f 0900 	mov.w	r9, #0
 8005ac0:	7808      	ldrb	r0, [r1, #0]
 8005ac2:	f7ff ff73 	bl	80059ac <__hexdig_fun>
 8005ac6:	1e43      	subs	r3, r0, #1
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b18      	cmp	r3, #24
 8005acc:	d82a      	bhi.n	8005b24 <__gethex+0x14c>
 8005ace:	f1a0 0210 	sub.w	r2, r0, #16
 8005ad2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005ad6:	f7ff ff69 	bl	80059ac <__hexdig_fun>
 8005ada:	1e43      	subs	r3, r0, #1
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b18      	cmp	r3, #24
 8005ae0:	d91b      	bls.n	8005b1a <__gethex+0x142>
 8005ae2:	f1b9 0f00 	cmp.w	r9, #0
 8005ae6:	d000      	beq.n	8005aea <__gethex+0x112>
 8005ae8:	4252      	negs	r2, r2
 8005aea:	4415      	add	r5, r2
 8005aec:	f8cb 1000 	str.w	r1, [fp]
 8005af0:	b1d4      	cbz	r4, 8005b28 <__gethex+0x150>
 8005af2:	9b01      	ldr	r3, [sp, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	bf14      	ite	ne
 8005af8:	2700      	movne	r7, #0
 8005afa:	2706      	moveq	r7, #6
 8005afc:	4638      	mov	r0, r7
 8005afe:	b00b      	add	sp, #44	; 0x2c
 8005b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b04:	463e      	mov	r6, r7
 8005b06:	4625      	mov	r5, r4
 8005b08:	2401      	movs	r4, #1
 8005b0a:	e7cc      	b.n	8005aa6 <__gethex+0xce>
 8005b0c:	f04f 0900 	mov.w	r9, #0
 8005b10:	1cb1      	adds	r1, r6, #2
 8005b12:	e7d5      	b.n	8005ac0 <__gethex+0xe8>
 8005b14:	f04f 0901 	mov.w	r9, #1
 8005b18:	e7fa      	b.n	8005b10 <__gethex+0x138>
 8005b1a:	230a      	movs	r3, #10
 8005b1c:	fb03 0202 	mla	r2, r3, r2, r0
 8005b20:	3a10      	subs	r2, #16
 8005b22:	e7d6      	b.n	8005ad2 <__gethex+0xfa>
 8005b24:	4631      	mov	r1, r6
 8005b26:	e7e1      	b.n	8005aec <__gethex+0x114>
 8005b28:	1bf3      	subs	r3, r6, r7
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	2b07      	cmp	r3, #7
 8005b30:	dc0a      	bgt.n	8005b48 <__gethex+0x170>
 8005b32:	9802      	ldr	r0, [sp, #8]
 8005b34:	f000 fa7a 	bl	800602c <_Balloc>
 8005b38:	4604      	mov	r4, r0
 8005b3a:	b940      	cbnz	r0, 8005b4e <__gethex+0x176>
 8005b3c:	4b5c      	ldr	r3, [pc, #368]	; (8005cb0 <__gethex+0x2d8>)
 8005b3e:	4602      	mov	r2, r0
 8005b40:	21de      	movs	r1, #222	; 0xde
 8005b42:	485c      	ldr	r0, [pc, #368]	; (8005cb4 <__gethex+0x2dc>)
 8005b44:	f001 f9ac 	bl	8006ea0 <__assert_func>
 8005b48:	3101      	adds	r1, #1
 8005b4a:	105b      	asrs	r3, r3, #1
 8005b4c:	e7ef      	b.n	8005b2e <__gethex+0x156>
 8005b4e:	f100 0914 	add.w	r9, r0, #20
 8005b52:	f04f 0b00 	mov.w	fp, #0
 8005b56:	f1ca 0301 	rsb	r3, sl, #1
 8005b5a:	f8cd 9010 	str.w	r9, [sp, #16]
 8005b5e:	f8cd b004 	str.w	fp, [sp, #4]
 8005b62:	9308      	str	r3, [sp, #32]
 8005b64:	42b7      	cmp	r7, r6
 8005b66:	d33f      	bcc.n	8005be8 <__gethex+0x210>
 8005b68:	9f04      	ldr	r7, [sp, #16]
 8005b6a:	9b01      	ldr	r3, [sp, #4]
 8005b6c:	f847 3b04 	str.w	r3, [r7], #4
 8005b70:	eba7 0709 	sub.w	r7, r7, r9
 8005b74:	10bf      	asrs	r7, r7, #2
 8005b76:	6127      	str	r7, [r4, #16]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 fb49 	bl	8006210 <__hi0bits>
 8005b7e:	017f      	lsls	r7, r7, #5
 8005b80:	f8d8 6000 	ldr.w	r6, [r8]
 8005b84:	1a3f      	subs	r7, r7, r0
 8005b86:	42b7      	cmp	r7, r6
 8005b88:	dd62      	ble.n	8005c50 <__gethex+0x278>
 8005b8a:	1bbf      	subs	r7, r7, r6
 8005b8c:	4639      	mov	r1, r7
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f000 fedf 	bl	8006952 <__any_on>
 8005b94:	4682      	mov	sl, r0
 8005b96:	b1a8      	cbz	r0, 8005bc4 <__gethex+0x1ec>
 8005b98:	1e7b      	subs	r3, r7, #1
 8005b9a:	1159      	asrs	r1, r3, #5
 8005b9c:	f003 021f 	and.w	r2, r3, #31
 8005ba0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005ba4:	f04f 0a01 	mov.w	sl, #1
 8005ba8:	fa0a f202 	lsl.w	r2, sl, r2
 8005bac:	420a      	tst	r2, r1
 8005bae:	d009      	beq.n	8005bc4 <__gethex+0x1ec>
 8005bb0:	4553      	cmp	r3, sl
 8005bb2:	dd05      	ble.n	8005bc0 <__gethex+0x1e8>
 8005bb4:	1eb9      	subs	r1, r7, #2
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	f000 fecb 	bl	8006952 <__any_on>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	d144      	bne.n	8005c4a <__gethex+0x272>
 8005bc0:	f04f 0a02 	mov.w	sl, #2
 8005bc4:	4639      	mov	r1, r7
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	f7ff fe9e 	bl	8005908 <rshift>
 8005bcc:	443d      	add	r5, r7
 8005bce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005bd2:	42ab      	cmp	r3, r5
 8005bd4:	da4a      	bge.n	8005c6c <__gethex+0x294>
 8005bd6:	9802      	ldr	r0, [sp, #8]
 8005bd8:	4621      	mov	r1, r4
 8005bda:	f000 fa67 	bl	80060ac <_Bfree>
 8005bde:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005be0:	2300      	movs	r3, #0
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	27a3      	movs	r7, #163	; 0xa3
 8005be6:	e789      	b.n	8005afc <__gethex+0x124>
 8005be8:	1e73      	subs	r3, r6, #1
 8005bea:	9a06      	ldr	r2, [sp, #24]
 8005bec:	9307      	str	r3, [sp, #28]
 8005bee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d019      	beq.n	8005c2a <__gethex+0x252>
 8005bf6:	f1bb 0f20 	cmp.w	fp, #32
 8005bfa:	d107      	bne.n	8005c0c <__gethex+0x234>
 8005bfc:	9b04      	ldr	r3, [sp, #16]
 8005bfe:	9a01      	ldr	r2, [sp, #4]
 8005c00:	f843 2b04 	str.w	r2, [r3], #4
 8005c04:	9304      	str	r3, [sp, #16]
 8005c06:	2300      	movs	r3, #0
 8005c08:	9301      	str	r3, [sp, #4]
 8005c0a:	469b      	mov	fp, r3
 8005c0c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005c10:	f7ff fecc 	bl	80059ac <__hexdig_fun>
 8005c14:	9b01      	ldr	r3, [sp, #4]
 8005c16:	f000 000f 	and.w	r0, r0, #15
 8005c1a:	fa00 f00b 	lsl.w	r0, r0, fp
 8005c1e:	4303      	orrs	r3, r0
 8005c20:	9301      	str	r3, [sp, #4]
 8005c22:	f10b 0b04 	add.w	fp, fp, #4
 8005c26:	9b07      	ldr	r3, [sp, #28]
 8005c28:	e00d      	b.n	8005c46 <__gethex+0x26e>
 8005c2a:	9a08      	ldr	r2, [sp, #32]
 8005c2c:	1e73      	subs	r3, r6, #1
 8005c2e:	4413      	add	r3, r2
 8005c30:	42bb      	cmp	r3, r7
 8005c32:	d3e0      	bcc.n	8005bf6 <__gethex+0x21e>
 8005c34:	4618      	mov	r0, r3
 8005c36:	9903      	ldr	r1, [sp, #12]
 8005c38:	9309      	str	r3, [sp, #36]	; 0x24
 8005c3a:	4652      	mov	r2, sl
 8005c3c:	f001 f90e 	bl	8006e5c <strncmp>
 8005c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c42:	2800      	cmp	r0, #0
 8005c44:	d1d7      	bne.n	8005bf6 <__gethex+0x21e>
 8005c46:	461e      	mov	r6, r3
 8005c48:	e78c      	b.n	8005b64 <__gethex+0x18c>
 8005c4a:	f04f 0a03 	mov.w	sl, #3
 8005c4e:	e7b9      	b.n	8005bc4 <__gethex+0x1ec>
 8005c50:	da09      	bge.n	8005c66 <__gethex+0x28e>
 8005c52:	1bf7      	subs	r7, r6, r7
 8005c54:	4621      	mov	r1, r4
 8005c56:	9802      	ldr	r0, [sp, #8]
 8005c58:	463a      	mov	r2, r7
 8005c5a:	f000 fc3f 	bl	80064dc <__lshift>
 8005c5e:	1bed      	subs	r5, r5, r7
 8005c60:	4604      	mov	r4, r0
 8005c62:	f100 0914 	add.w	r9, r0, #20
 8005c66:	f04f 0a00 	mov.w	sl, #0
 8005c6a:	e7b0      	b.n	8005bce <__gethex+0x1f6>
 8005c6c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005c70:	42a8      	cmp	r0, r5
 8005c72:	dd71      	ble.n	8005d58 <__gethex+0x380>
 8005c74:	1b45      	subs	r5, r0, r5
 8005c76:	42ae      	cmp	r6, r5
 8005c78:	dc35      	bgt.n	8005ce6 <__gethex+0x30e>
 8005c7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d029      	beq.n	8005cd6 <__gethex+0x2fe>
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d02b      	beq.n	8005cde <__gethex+0x306>
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d11c      	bne.n	8005cc4 <__gethex+0x2ec>
 8005c8a:	42ae      	cmp	r6, r5
 8005c8c:	d11a      	bne.n	8005cc4 <__gethex+0x2ec>
 8005c8e:	2e01      	cmp	r6, #1
 8005c90:	d112      	bne.n	8005cb8 <__gethex+0x2e0>
 8005c92:	9a05      	ldr	r2, [sp, #20]
 8005c94:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005c98:	6013      	str	r3, [r2, #0]
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	6123      	str	r3, [r4, #16]
 8005c9e:	f8c9 3000 	str.w	r3, [r9]
 8005ca2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005ca4:	2762      	movs	r7, #98	; 0x62
 8005ca6:	601c      	str	r4, [r3, #0]
 8005ca8:	e728      	b.n	8005afc <__gethex+0x124>
 8005caa:	bf00      	nop
 8005cac:	08007e80 	.word	0x08007e80
 8005cb0:	08007e08 	.word	0x08007e08
 8005cb4:	08007e19 	.word	0x08007e19
 8005cb8:	1e71      	subs	r1, r6, #1
 8005cba:	4620      	mov	r0, r4
 8005cbc:	f000 fe49 	bl	8006952 <__any_on>
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d1e6      	bne.n	8005c92 <__gethex+0x2ba>
 8005cc4:	9802      	ldr	r0, [sp, #8]
 8005cc6:	4621      	mov	r1, r4
 8005cc8:	f000 f9f0 	bl	80060ac <_Bfree>
 8005ccc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005cce:	2300      	movs	r3, #0
 8005cd0:	6013      	str	r3, [r2, #0]
 8005cd2:	2750      	movs	r7, #80	; 0x50
 8005cd4:	e712      	b.n	8005afc <__gethex+0x124>
 8005cd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1f3      	bne.n	8005cc4 <__gethex+0x2ec>
 8005cdc:	e7d9      	b.n	8005c92 <__gethex+0x2ba>
 8005cde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1d6      	bne.n	8005c92 <__gethex+0x2ba>
 8005ce4:	e7ee      	b.n	8005cc4 <__gethex+0x2ec>
 8005ce6:	1e6f      	subs	r7, r5, #1
 8005ce8:	f1ba 0f00 	cmp.w	sl, #0
 8005cec:	d131      	bne.n	8005d52 <__gethex+0x37a>
 8005cee:	b127      	cbz	r7, 8005cfa <__gethex+0x322>
 8005cf0:	4639      	mov	r1, r7
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f000 fe2d 	bl	8006952 <__any_on>
 8005cf8:	4682      	mov	sl, r0
 8005cfa:	117b      	asrs	r3, r7, #5
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005d02:	f007 071f 	and.w	r7, r7, #31
 8005d06:	fa01 f707 	lsl.w	r7, r1, r7
 8005d0a:	421f      	tst	r7, r3
 8005d0c:	4629      	mov	r1, r5
 8005d0e:	4620      	mov	r0, r4
 8005d10:	bf18      	it	ne
 8005d12:	f04a 0a02 	orrne.w	sl, sl, #2
 8005d16:	1b76      	subs	r6, r6, r5
 8005d18:	f7ff fdf6 	bl	8005908 <rshift>
 8005d1c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005d20:	2702      	movs	r7, #2
 8005d22:	f1ba 0f00 	cmp.w	sl, #0
 8005d26:	d048      	beq.n	8005dba <__gethex+0x3e2>
 8005d28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d015      	beq.n	8005d5c <__gethex+0x384>
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	d017      	beq.n	8005d64 <__gethex+0x38c>
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d109      	bne.n	8005d4c <__gethex+0x374>
 8005d38:	f01a 0f02 	tst.w	sl, #2
 8005d3c:	d006      	beq.n	8005d4c <__gethex+0x374>
 8005d3e:	f8d9 0000 	ldr.w	r0, [r9]
 8005d42:	ea4a 0a00 	orr.w	sl, sl, r0
 8005d46:	f01a 0f01 	tst.w	sl, #1
 8005d4a:	d10e      	bne.n	8005d6a <__gethex+0x392>
 8005d4c:	f047 0710 	orr.w	r7, r7, #16
 8005d50:	e033      	b.n	8005dba <__gethex+0x3e2>
 8005d52:	f04f 0a01 	mov.w	sl, #1
 8005d56:	e7d0      	b.n	8005cfa <__gethex+0x322>
 8005d58:	2701      	movs	r7, #1
 8005d5a:	e7e2      	b.n	8005d22 <__gethex+0x34a>
 8005d5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d5e:	f1c3 0301 	rsb	r3, r3, #1
 8005d62:	9315      	str	r3, [sp, #84]	; 0x54
 8005d64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d0f0      	beq.n	8005d4c <__gethex+0x374>
 8005d6a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005d6e:	f104 0314 	add.w	r3, r4, #20
 8005d72:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005d76:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005d7a:	f04f 0c00 	mov.w	ip, #0
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d84:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8005d88:	d01c      	beq.n	8005dc4 <__gethex+0x3ec>
 8005d8a:	3201      	adds	r2, #1
 8005d8c:	6002      	str	r2, [r0, #0]
 8005d8e:	2f02      	cmp	r7, #2
 8005d90:	f104 0314 	add.w	r3, r4, #20
 8005d94:	d13d      	bne.n	8005e12 <__gethex+0x43a>
 8005d96:	f8d8 2000 	ldr.w	r2, [r8]
 8005d9a:	3a01      	subs	r2, #1
 8005d9c:	42b2      	cmp	r2, r6
 8005d9e:	d10a      	bne.n	8005db6 <__gethex+0x3de>
 8005da0:	1171      	asrs	r1, r6, #5
 8005da2:	2201      	movs	r2, #1
 8005da4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005da8:	f006 061f 	and.w	r6, r6, #31
 8005dac:	fa02 f606 	lsl.w	r6, r2, r6
 8005db0:	421e      	tst	r6, r3
 8005db2:	bf18      	it	ne
 8005db4:	4617      	movne	r7, r2
 8005db6:	f047 0720 	orr.w	r7, r7, #32
 8005dba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005dbc:	601c      	str	r4, [r3, #0]
 8005dbe:	9b05      	ldr	r3, [sp, #20]
 8005dc0:	601d      	str	r5, [r3, #0]
 8005dc2:	e69b      	b.n	8005afc <__gethex+0x124>
 8005dc4:	4299      	cmp	r1, r3
 8005dc6:	f843 cc04 	str.w	ip, [r3, #-4]
 8005dca:	d8d8      	bhi.n	8005d7e <__gethex+0x3a6>
 8005dcc:	68a3      	ldr	r3, [r4, #8]
 8005dce:	459b      	cmp	fp, r3
 8005dd0:	db17      	blt.n	8005e02 <__gethex+0x42a>
 8005dd2:	6861      	ldr	r1, [r4, #4]
 8005dd4:	9802      	ldr	r0, [sp, #8]
 8005dd6:	3101      	adds	r1, #1
 8005dd8:	f000 f928 	bl	800602c <_Balloc>
 8005ddc:	4681      	mov	r9, r0
 8005dde:	b918      	cbnz	r0, 8005de8 <__gethex+0x410>
 8005de0:	4b1a      	ldr	r3, [pc, #104]	; (8005e4c <__gethex+0x474>)
 8005de2:	4602      	mov	r2, r0
 8005de4:	2184      	movs	r1, #132	; 0x84
 8005de6:	e6ac      	b.n	8005b42 <__gethex+0x16a>
 8005de8:	6922      	ldr	r2, [r4, #16]
 8005dea:	3202      	adds	r2, #2
 8005dec:	f104 010c 	add.w	r1, r4, #12
 8005df0:	0092      	lsls	r2, r2, #2
 8005df2:	300c      	adds	r0, #12
 8005df4:	f000 f90c 	bl	8006010 <memcpy>
 8005df8:	4621      	mov	r1, r4
 8005dfa:	9802      	ldr	r0, [sp, #8]
 8005dfc:	f000 f956 	bl	80060ac <_Bfree>
 8005e00:	464c      	mov	r4, r9
 8005e02:	6923      	ldr	r3, [r4, #16]
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e0a:	6122      	str	r2, [r4, #16]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	615a      	str	r2, [r3, #20]
 8005e10:	e7bd      	b.n	8005d8e <__gethex+0x3b6>
 8005e12:	6922      	ldr	r2, [r4, #16]
 8005e14:	455a      	cmp	r2, fp
 8005e16:	dd0b      	ble.n	8005e30 <__gethex+0x458>
 8005e18:	2101      	movs	r1, #1
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f7ff fd74 	bl	8005908 <rshift>
 8005e20:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005e24:	3501      	adds	r5, #1
 8005e26:	42ab      	cmp	r3, r5
 8005e28:	f6ff aed5 	blt.w	8005bd6 <__gethex+0x1fe>
 8005e2c:	2701      	movs	r7, #1
 8005e2e:	e7c2      	b.n	8005db6 <__gethex+0x3de>
 8005e30:	f016 061f 	ands.w	r6, r6, #31
 8005e34:	d0fa      	beq.n	8005e2c <__gethex+0x454>
 8005e36:	4453      	add	r3, sl
 8005e38:	f1c6 0620 	rsb	r6, r6, #32
 8005e3c:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005e40:	f000 f9e6 	bl	8006210 <__hi0bits>
 8005e44:	42b0      	cmp	r0, r6
 8005e46:	dbe7      	blt.n	8005e18 <__gethex+0x440>
 8005e48:	e7f0      	b.n	8005e2c <__gethex+0x454>
 8005e4a:	bf00      	nop
 8005e4c:	08007e08 	.word	0x08007e08

08005e50 <L_shift>:
 8005e50:	f1c2 0208 	rsb	r2, r2, #8
 8005e54:	0092      	lsls	r2, r2, #2
 8005e56:	b570      	push	{r4, r5, r6, lr}
 8005e58:	f1c2 0620 	rsb	r6, r2, #32
 8005e5c:	6843      	ldr	r3, [r0, #4]
 8005e5e:	6804      	ldr	r4, [r0, #0]
 8005e60:	fa03 f506 	lsl.w	r5, r3, r6
 8005e64:	432c      	orrs	r4, r5
 8005e66:	40d3      	lsrs	r3, r2
 8005e68:	6004      	str	r4, [r0, #0]
 8005e6a:	f840 3f04 	str.w	r3, [r0, #4]!
 8005e6e:	4288      	cmp	r0, r1
 8005e70:	d3f4      	bcc.n	8005e5c <L_shift+0xc>
 8005e72:	bd70      	pop	{r4, r5, r6, pc}

08005e74 <__match>:
 8005e74:	b530      	push	{r4, r5, lr}
 8005e76:	6803      	ldr	r3, [r0, #0]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e7e:	b914      	cbnz	r4, 8005e86 <__match+0x12>
 8005e80:	6003      	str	r3, [r0, #0]
 8005e82:	2001      	movs	r0, #1
 8005e84:	bd30      	pop	{r4, r5, pc}
 8005e86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e8a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005e8e:	2d19      	cmp	r5, #25
 8005e90:	bf98      	it	ls
 8005e92:	3220      	addls	r2, #32
 8005e94:	42a2      	cmp	r2, r4
 8005e96:	d0f0      	beq.n	8005e7a <__match+0x6>
 8005e98:	2000      	movs	r0, #0
 8005e9a:	e7f3      	b.n	8005e84 <__match+0x10>

08005e9c <__hexnan>:
 8005e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea0:	680b      	ldr	r3, [r1, #0]
 8005ea2:	115e      	asrs	r6, r3, #5
 8005ea4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005ea8:	f013 031f 	ands.w	r3, r3, #31
 8005eac:	b087      	sub	sp, #28
 8005eae:	bf18      	it	ne
 8005eb0:	3604      	addne	r6, #4
 8005eb2:	2500      	movs	r5, #0
 8005eb4:	1f37      	subs	r7, r6, #4
 8005eb6:	4690      	mov	r8, r2
 8005eb8:	6802      	ldr	r2, [r0, #0]
 8005eba:	9301      	str	r3, [sp, #4]
 8005ebc:	4682      	mov	sl, r0
 8005ebe:	f846 5c04 	str.w	r5, [r6, #-4]
 8005ec2:	46b9      	mov	r9, r7
 8005ec4:	463c      	mov	r4, r7
 8005ec6:	9502      	str	r5, [sp, #8]
 8005ec8:	46ab      	mov	fp, r5
 8005eca:	7851      	ldrb	r1, [r2, #1]
 8005ecc:	1c53      	adds	r3, r2, #1
 8005ece:	9303      	str	r3, [sp, #12]
 8005ed0:	b341      	cbz	r1, 8005f24 <__hexnan+0x88>
 8005ed2:	4608      	mov	r0, r1
 8005ed4:	9205      	str	r2, [sp, #20]
 8005ed6:	9104      	str	r1, [sp, #16]
 8005ed8:	f7ff fd68 	bl	80059ac <__hexdig_fun>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	d14f      	bne.n	8005f80 <__hexnan+0xe4>
 8005ee0:	9904      	ldr	r1, [sp, #16]
 8005ee2:	9a05      	ldr	r2, [sp, #20]
 8005ee4:	2920      	cmp	r1, #32
 8005ee6:	d818      	bhi.n	8005f1a <__hexnan+0x7e>
 8005ee8:	9b02      	ldr	r3, [sp, #8]
 8005eea:	459b      	cmp	fp, r3
 8005eec:	dd13      	ble.n	8005f16 <__hexnan+0x7a>
 8005eee:	454c      	cmp	r4, r9
 8005ef0:	d206      	bcs.n	8005f00 <__hexnan+0x64>
 8005ef2:	2d07      	cmp	r5, #7
 8005ef4:	dc04      	bgt.n	8005f00 <__hexnan+0x64>
 8005ef6:	462a      	mov	r2, r5
 8005ef8:	4649      	mov	r1, r9
 8005efa:	4620      	mov	r0, r4
 8005efc:	f7ff ffa8 	bl	8005e50 <L_shift>
 8005f00:	4544      	cmp	r4, r8
 8005f02:	d950      	bls.n	8005fa6 <__hexnan+0x10a>
 8005f04:	2300      	movs	r3, #0
 8005f06:	f1a4 0904 	sub.w	r9, r4, #4
 8005f0a:	f844 3c04 	str.w	r3, [r4, #-4]
 8005f0e:	f8cd b008 	str.w	fp, [sp, #8]
 8005f12:	464c      	mov	r4, r9
 8005f14:	461d      	mov	r5, r3
 8005f16:	9a03      	ldr	r2, [sp, #12]
 8005f18:	e7d7      	b.n	8005eca <__hexnan+0x2e>
 8005f1a:	2929      	cmp	r1, #41	; 0x29
 8005f1c:	d156      	bne.n	8005fcc <__hexnan+0x130>
 8005f1e:	3202      	adds	r2, #2
 8005f20:	f8ca 2000 	str.w	r2, [sl]
 8005f24:	f1bb 0f00 	cmp.w	fp, #0
 8005f28:	d050      	beq.n	8005fcc <__hexnan+0x130>
 8005f2a:	454c      	cmp	r4, r9
 8005f2c:	d206      	bcs.n	8005f3c <__hexnan+0xa0>
 8005f2e:	2d07      	cmp	r5, #7
 8005f30:	dc04      	bgt.n	8005f3c <__hexnan+0xa0>
 8005f32:	462a      	mov	r2, r5
 8005f34:	4649      	mov	r1, r9
 8005f36:	4620      	mov	r0, r4
 8005f38:	f7ff ff8a 	bl	8005e50 <L_shift>
 8005f3c:	4544      	cmp	r4, r8
 8005f3e:	d934      	bls.n	8005faa <__hexnan+0x10e>
 8005f40:	f1a8 0204 	sub.w	r2, r8, #4
 8005f44:	4623      	mov	r3, r4
 8005f46:	f853 1b04 	ldr.w	r1, [r3], #4
 8005f4a:	f842 1f04 	str.w	r1, [r2, #4]!
 8005f4e:	429f      	cmp	r7, r3
 8005f50:	d2f9      	bcs.n	8005f46 <__hexnan+0xaa>
 8005f52:	1b3b      	subs	r3, r7, r4
 8005f54:	f023 0303 	bic.w	r3, r3, #3
 8005f58:	3304      	adds	r3, #4
 8005f5a:	3401      	adds	r4, #1
 8005f5c:	3e03      	subs	r6, #3
 8005f5e:	42b4      	cmp	r4, r6
 8005f60:	bf88      	it	hi
 8005f62:	2304      	movhi	r3, #4
 8005f64:	4443      	add	r3, r8
 8005f66:	2200      	movs	r2, #0
 8005f68:	f843 2b04 	str.w	r2, [r3], #4
 8005f6c:	429f      	cmp	r7, r3
 8005f6e:	d2fb      	bcs.n	8005f68 <__hexnan+0xcc>
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	b91b      	cbnz	r3, 8005f7c <__hexnan+0xe0>
 8005f74:	4547      	cmp	r7, r8
 8005f76:	d127      	bne.n	8005fc8 <__hexnan+0x12c>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	603b      	str	r3, [r7, #0]
 8005f7c:	2005      	movs	r0, #5
 8005f7e:	e026      	b.n	8005fce <__hexnan+0x132>
 8005f80:	3501      	adds	r5, #1
 8005f82:	2d08      	cmp	r5, #8
 8005f84:	f10b 0b01 	add.w	fp, fp, #1
 8005f88:	dd06      	ble.n	8005f98 <__hexnan+0xfc>
 8005f8a:	4544      	cmp	r4, r8
 8005f8c:	d9c3      	bls.n	8005f16 <__hexnan+0x7a>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	f844 3c04 	str.w	r3, [r4, #-4]
 8005f94:	2501      	movs	r5, #1
 8005f96:	3c04      	subs	r4, #4
 8005f98:	6822      	ldr	r2, [r4, #0]
 8005f9a:	f000 000f 	and.w	r0, r0, #15
 8005f9e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005fa2:	6022      	str	r2, [r4, #0]
 8005fa4:	e7b7      	b.n	8005f16 <__hexnan+0x7a>
 8005fa6:	2508      	movs	r5, #8
 8005fa8:	e7b5      	b.n	8005f16 <__hexnan+0x7a>
 8005faa:	9b01      	ldr	r3, [sp, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d0df      	beq.n	8005f70 <__hexnan+0xd4>
 8005fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fb4:	f1c3 0320 	rsb	r3, r3, #32
 8005fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fbc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005fc0:	401a      	ands	r2, r3
 8005fc2:	f846 2c04 	str.w	r2, [r6, #-4]
 8005fc6:	e7d3      	b.n	8005f70 <__hexnan+0xd4>
 8005fc8:	3f04      	subs	r7, #4
 8005fca:	e7d1      	b.n	8005f70 <__hexnan+0xd4>
 8005fcc:	2004      	movs	r0, #4
 8005fce:	b007      	add	sp, #28
 8005fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005fd4 <_localeconv_r>:
 8005fd4:	4800      	ldr	r0, [pc, #0]	; (8005fd8 <_localeconv_r+0x4>)
 8005fd6:	4770      	bx	lr
 8005fd8:	2000019c 	.word	0x2000019c

08005fdc <malloc>:
 8005fdc:	4b02      	ldr	r3, [pc, #8]	; (8005fe8 <malloc+0xc>)
 8005fde:	4601      	mov	r1, r0
 8005fe0:	6818      	ldr	r0, [r3, #0]
 8005fe2:	f000 bd55 	b.w	8006a90 <_malloc_r>
 8005fe6:	bf00      	nop
 8005fe8:	20000044 	.word	0x20000044

08005fec <__ascii_mbtowc>:
 8005fec:	b082      	sub	sp, #8
 8005fee:	b901      	cbnz	r1, 8005ff2 <__ascii_mbtowc+0x6>
 8005ff0:	a901      	add	r1, sp, #4
 8005ff2:	b142      	cbz	r2, 8006006 <__ascii_mbtowc+0x1a>
 8005ff4:	b14b      	cbz	r3, 800600a <__ascii_mbtowc+0x1e>
 8005ff6:	7813      	ldrb	r3, [r2, #0]
 8005ff8:	600b      	str	r3, [r1, #0]
 8005ffa:	7812      	ldrb	r2, [r2, #0]
 8005ffc:	1e10      	subs	r0, r2, #0
 8005ffe:	bf18      	it	ne
 8006000:	2001      	movne	r0, #1
 8006002:	b002      	add	sp, #8
 8006004:	4770      	bx	lr
 8006006:	4610      	mov	r0, r2
 8006008:	e7fb      	b.n	8006002 <__ascii_mbtowc+0x16>
 800600a:	f06f 0001 	mvn.w	r0, #1
 800600e:	e7f8      	b.n	8006002 <__ascii_mbtowc+0x16>

08006010 <memcpy>:
 8006010:	440a      	add	r2, r1
 8006012:	4291      	cmp	r1, r2
 8006014:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006018:	d100      	bne.n	800601c <memcpy+0xc>
 800601a:	4770      	bx	lr
 800601c:	b510      	push	{r4, lr}
 800601e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006022:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006026:	4291      	cmp	r1, r2
 8006028:	d1f9      	bne.n	800601e <memcpy+0xe>
 800602a:	bd10      	pop	{r4, pc}

0800602c <_Balloc>:
 800602c:	b570      	push	{r4, r5, r6, lr}
 800602e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006030:	4604      	mov	r4, r0
 8006032:	460d      	mov	r5, r1
 8006034:	b976      	cbnz	r6, 8006054 <_Balloc+0x28>
 8006036:	2010      	movs	r0, #16
 8006038:	f7ff ffd0 	bl	8005fdc <malloc>
 800603c:	4602      	mov	r2, r0
 800603e:	6260      	str	r0, [r4, #36]	; 0x24
 8006040:	b920      	cbnz	r0, 800604c <_Balloc+0x20>
 8006042:	4b18      	ldr	r3, [pc, #96]	; (80060a4 <_Balloc+0x78>)
 8006044:	4818      	ldr	r0, [pc, #96]	; (80060a8 <_Balloc+0x7c>)
 8006046:	2166      	movs	r1, #102	; 0x66
 8006048:	f000 ff2a 	bl	8006ea0 <__assert_func>
 800604c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006050:	6006      	str	r6, [r0, #0]
 8006052:	60c6      	str	r6, [r0, #12]
 8006054:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006056:	68f3      	ldr	r3, [r6, #12]
 8006058:	b183      	cbz	r3, 800607c <_Balloc+0x50>
 800605a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006062:	b9b8      	cbnz	r0, 8006094 <_Balloc+0x68>
 8006064:	2101      	movs	r1, #1
 8006066:	fa01 f605 	lsl.w	r6, r1, r5
 800606a:	1d72      	adds	r2, r6, #5
 800606c:	0092      	lsls	r2, r2, #2
 800606e:	4620      	mov	r0, r4
 8006070:	f000 fc90 	bl	8006994 <_calloc_r>
 8006074:	b160      	cbz	r0, 8006090 <_Balloc+0x64>
 8006076:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800607a:	e00e      	b.n	800609a <_Balloc+0x6e>
 800607c:	2221      	movs	r2, #33	; 0x21
 800607e:	2104      	movs	r1, #4
 8006080:	4620      	mov	r0, r4
 8006082:	f000 fc87 	bl	8006994 <_calloc_r>
 8006086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006088:	60f0      	str	r0, [r6, #12]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1e4      	bne.n	800605a <_Balloc+0x2e>
 8006090:	2000      	movs	r0, #0
 8006092:	bd70      	pop	{r4, r5, r6, pc}
 8006094:	6802      	ldr	r2, [r0, #0]
 8006096:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800609a:	2300      	movs	r3, #0
 800609c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80060a0:	e7f7      	b.n	8006092 <_Balloc+0x66>
 80060a2:	bf00      	nop
 80060a4:	08007d96 	.word	0x08007d96
 80060a8:	08007e94 	.word	0x08007e94

080060ac <_Bfree>:
 80060ac:	b570      	push	{r4, r5, r6, lr}
 80060ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80060b0:	4605      	mov	r5, r0
 80060b2:	460c      	mov	r4, r1
 80060b4:	b976      	cbnz	r6, 80060d4 <_Bfree+0x28>
 80060b6:	2010      	movs	r0, #16
 80060b8:	f7ff ff90 	bl	8005fdc <malloc>
 80060bc:	4602      	mov	r2, r0
 80060be:	6268      	str	r0, [r5, #36]	; 0x24
 80060c0:	b920      	cbnz	r0, 80060cc <_Bfree+0x20>
 80060c2:	4b09      	ldr	r3, [pc, #36]	; (80060e8 <_Bfree+0x3c>)
 80060c4:	4809      	ldr	r0, [pc, #36]	; (80060ec <_Bfree+0x40>)
 80060c6:	218a      	movs	r1, #138	; 0x8a
 80060c8:	f000 feea 	bl	8006ea0 <__assert_func>
 80060cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060d0:	6006      	str	r6, [r0, #0]
 80060d2:	60c6      	str	r6, [r0, #12]
 80060d4:	b13c      	cbz	r4, 80060e6 <_Bfree+0x3a>
 80060d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80060d8:	6862      	ldr	r2, [r4, #4]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060e0:	6021      	str	r1, [r4, #0]
 80060e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80060e6:	bd70      	pop	{r4, r5, r6, pc}
 80060e8:	08007d96 	.word	0x08007d96
 80060ec:	08007e94 	.word	0x08007e94

080060f0 <__multadd>:
 80060f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060f4:	690d      	ldr	r5, [r1, #16]
 80060f6:	4607      	mov	r7, r0
 80060f8:	460c      	mov	r4, r1
 80060fa:	461e      	mov	r6, r3
 80060fc:	f101 0c14 	add.w	ip, r1, #20
 8006100:	2000      	movs	r0, #0
 8006102:	f8dc 3000 	ldr.w	r3, [ip]
 8006106:	b299      	uxth	r1, r3
 8006108:	fb02 6101 	mla	r1, r2, r1, r6
 800610c:	0c1e      	lsrs	r6, r3, #16
 800610e:	0c0b      	lsrs	r3, r1, #16
 8006110:	fb02 3306 	mla	r3, r2, r6, r3
 8006114:	b289      	uxth	r1, r1
 8006116:	3001      	adds	r0, #1
 8006118:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800611c:	4285      	cmp	r5, r0
 800611e:	f84c 1b04 	str.w	r1, [ip], #4
 8006122:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006126:	dcec      	bgt.n	8006102 <__multadd+0x12>
 8006128:	b30e      	cbz	r6, 800616e <__multadd+0x7e>
 800612a:	68a3      	ldr	r3, [r4, #8]
 800612c:	42ab      	cmp	r3, r5
 800612e:	dc19      	bgt.n	8006164 <__multadd+0x74>
 8006130:	6861      	ldr	r1, [r4, #4]
 8006132:	4638      	mov	r0, r7
 8006134:	3101      	adds	r1, #1
 8006136:	f7ff ff79 	bl	800602c <_Balloc>
 800613a:	4680      	mov	r8, r0
 800613c:	b928      	cbnz	r0, 800614a <__multadd+0x5a>
 800613e:	4602      	mov	r2, r0
 8006140:	4b0c      	ldr	r3, [pc, #48]	; (8006174 <__multadd+0x84>)
 8006142:	480d      	ldr	r0, [pc, #52]	; (8006178 <__multadd+0x88>)
 8006144:	21b5      	movs	r1, #181	; 0xb5
 8006146:	f000 feab 	bl	8006ea0 <__assert_func>
 800614a:	6922      	ldr	r2, [r4, #16]
 800614c:	3202      	adds	r2, #2
 800614e:	f104 010c 	add.w	r1, r4, #12
 8006152:	0092      	lsls	r2, r2, #2
 8006154:	300c      	adds	r0, #12
 8006156:	f7ff ff5b 	bl	8006010 <memcpy>
 800615a:	4621      	mov	r1, r4
 800615c:	4638      	mov	r0, r7
 800615e:	f7ff ffa5 	bl	80060ac <_Bfree>
 8006162:	4644      	mov	r4, r8
 8006164:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006168:	3501      	adds	r5, #1
 800616a:	615e      	str	r6, [r3, #20]
 800616c:	6125      	str	r5, [r4, #16]
 800616e:	4620      	mov	r0, r4
 8006170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006174:	08007e08 	.word	0x08007e08
 8006178:	08007e94 	.word	0x08007e94

0800617c <__s2b>:
 800617c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006180:	460c      	mov	r4, r1
 8006182:	4615      	mov	r5, r2
 8006184:	461f      	mov	r7, r3
 8006186:	2209      	movs	r2, #9
 8006188:	3308      	adds	r3, #8
 800618a:	4606      	mov	r6, r0
 800618c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006190:	2100      	movs	r1, #0
 8006192:	2201      	movs	r2, #1
 8006194:	429a      	cmp	r2, r3
 8006196:	db09      	blt.n	80061ac <__s2b+0x30>
 8006198:	4630      	mov	r0, r6
 800619a:	f7ff ff47 	bl	800602c <_Balloc>
 800619e:	b940      	cbnz	r0, 80061b2 <__s2b+0x36>
 80061a0:	4602      	mov	r2, r0
 80061a2:	4b19      	ldr	r3, [pc, #100]	; (8006208 <__s2b+0x8c>)
 80061a4:	4819      	ldr	r0, [pc, #100]	; (800620c <__s2b+0x90>)
 80061a6:	21ce      	movs	r1, #206	; 0xce
 80061a8:	f000 fe7a 	bl	8006ea0 <__assert_func>
 80061ac:	0052      	lsls	r2, r2, #1
 80061ae:	3101      	adds	r1, #1
 80061b0:	e7f0      	b.n	8006194 <__s2b+0x18>
 80061b2:	9b08      	ldr	r3, [sp, #32]
 80061b4:	6143      	str	r3, [r0, #20]
 80061b6:	2d09      	cmp	r5, #9
 80061b8:	f04f 0301 	mov.w	r3, #1
 80061bc:	6103      	str	r3, [r0, #16]
 80061be:	dd16      	ble.n	80061ee <__s2b+0x72>
 80061c0:	f104 0909 	add.w	r9, r4, #9
 80061c4:	46c8      	mov	r8, r9
 80061c6:	442c      	add	r4, r5
 80061c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80061cc:	4601      	mov	r1, r0
 80061ce:	3b30      	subs	r3, #48	; 0x30
 80061d0:	220a      	movs	r2, #10
 80061d2:	4630      	mov	r0, r6
 80061d4:	f7ff ff8c 	bl	80060f0 <__multadd>
 80061d8:	45a0      	cmp	r8, r4
 80061da:	d1f5      	bne.n	80061c8 <__s2b+0x4c>
 80061dc:	f1a5 0408 	sub.w	r4, r5, #8
 80061e0:	444c      	add	r4, r9
 80061e2:	1b2d      	subs	r5, r5, r4
 80061e4:	1963      	adds	r3, r4, r5
 80061e6:	42bb      	cmp	r3, r7
 80061e8:	db04      	blt.n	80061f4 <__s2b+0x78>
 80061ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061ee:	340a      	adds	r4, #10
 80061f0:	2509      	movs	r5, #9
 80061f2:	e7f6      	b.n	80061e2 <__s2b+0x66>
 80061f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80061f8:	4601      	mov	r1, r0
 80061fa:	3b30      	subs	r3, #48	; 0x30
 80061fc:	220a      	movs	r2, #10
 80061fe:	4630      	mov	r0, r6
 8006200:	f7ff ff76 	bl	80060f0 <__multadd>
 8006204:	e7ee      	b.n	80061e4 <__s2b+0x68>
 8006206:	bf00      	nop
 8006208:	08007e08 	.word	0x08007e08
 800620c:	08007e94 	.word	0x08007e94

08006210 <__hi0bits>:
 8006210:	0c02      	lsrs	r2, r0, #16
 8006212:	0412      	lsls	r2, r2, #16
 8006214:	4603      	mov	r3, r0
 8006216:	b9ca      	cbnz	r2, 800624c <__hi0bits+0x3c>
 8006218:	0403      	lsls	r3, r0, #16
 800621a:	2010      	movs	r0, #16
 800621c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006220:	bf04      	itt	eq
 8006222:	021b      	lsleq	r3, r3, #8
 8006224:	3008      	addeq	r0, #8
 8006226:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800622a:	bf04      	itt	eq
 800622c:	011b      	lsleq	r3, r3, #4
 800622e:	3004      	addeq	r0, #4
 8006230:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006234:	bf04      	itt	eq
 8006236:	009b      	lsleq	r3, r3, #2
 8006238:	3002      	addeq	r0, #2
 800623a:	2b00      	cmp	r3, #0
 800623c:	db05      	blt.n	800624a <__hi0bits+0x3a>
 800623e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006242:	f100 0001 	add.w	r0, r0, #1
 8006246:	bf08      	it	eq
 8006248:	2020      	moveq	r0, #32
 800624a:	4770      	bx	lr
 800624c:	2000      	movs	r0, #0
 800624e:	e7e5      	b.n	800621c <__hi0bits+0xc>

08006250 <__lo0bits>:
 8006250:	6803      	ldr	r3, [r0, #0]
 8006252:	4602      	mov	r2, r0
 8006254:	f013 0007 	ands.w	r0, r3, #7
 8006258:	d00b      	beq.n	8006272 <__lo0bits+0x22>
 800625a:	07d9      	lsls	r1, r3, #31
 800625c:	d421      	bmi.n	80062a2 <__lo0bits+0x52>
 800625e:	0798      	lsls	r0, r3, #30
 8006260:	bf49      	itett	mi
 8006262:	085b      	lsrmi	r3, r3, #1
 8006264:	089b      	lsrpl	r3, r3, #2
 8006266:	2001      	movmi	r0, #1
 8006268:	6013      	strmi	r3, [r2, #0]
 800626a:	bf5c      	itt	pl
 800626c:	6013      	strpl	r3, [r2, #0]
 800626e:	2002      	movpl	r0, #2
 8006270:	4770      	bx	lr
 8006272:	b299      	uxth	r1, r3
 8006274:	b909      	cbnz	r1, 800627a <__lo0bits+0x2a>
 8006276:	0c1b      	lsrs	r3, r3, #16
 8006278:	2010      	movs	r0, #16
 800627a:	b2d9      	uxtb	r1, r3
 800627c:	b909      	cbnz	r1, 8006282 <__lo0bits+0x32>
 800627e:	3008      	adds	r0, #8
 8006280:	0a1b      	lsrs	r3, r3, #8
 8006282:	0719      	lsls	r1, r3, #28
 8006284:	bf04      	itt	eq
 8006286:	091b      	lsreq	r3, r3, #4
 8006288:	3004      	addeq	r0, #4
 800628a:	0799      	lsls	r1, r3, #30
 800628c:	bf04      	itt	eq
 800628e:	089b      	lsreq	r3, r3, #2
 8006290:	3002      	addeq	r0, #2
 8006292:	07d9      	lsls	r1, r3, #31
 8006294:	d403      	bmi.n	800629e <__lo0bits+0x4e>
 8006296:	085b      	lsrs	r3, r3, #1
 8006298:	f100 0001 	add.w	r0, r0, #1
 800629c:	d003      	beq.n	80062a6 <__lo0bits+0x56>
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	4770      	bx	lr
 80062a2:	2000      	movs	r0, #0
 80062a4:	4770      	bx	lr
 80062a6:	2020      	movs	r0, #32
 80062a8:	4770      	bx	lr
	...

080062ac <__i2b>:
 80062ac:	b510      	push	{r4, lr}
 80062ae:	460c      	mov	r4, r1
 80062b0:	2101      	movs	r1, #1
 80062b2:	f7ff febb 	bl	800602c <_Balloc>
 80062b6:	4602      	mov	r2, r0
 80062b8:	b928      	cbnz	r0, 80062c6 <__i2b+0x1a>
 80062ba:	4b05      	ldr	r3, [pc, #20]	; (80062d0 <__i2b+0x24>)
 80062bc:	4805      	ldr	r0, [pc, #20]	; (80062d4 <__i2b+0x28>)
 80062be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80062c2:	f000 fded 	bl	8006ea0 <__assert_func>
 80062c6:	2301      	movs	r3, #1
 80062c8:	6144      	str	r4, [r0, #20]
 80062ca:	6103      	str	r3, [r0, #16]
 80062cc:	bd10      	pop	{r4, pc}
 80062ce:	bf00      	nop
 80062d0:	08007e08 	.word	0x08007e08
 80062d4:	08007e94 	.word	0x08007e94

080062d8 <__multiply>:
 80062d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062dc:	4691      	mov	r9, r2
 80062de:	690a      	ldr	r2, [r1, #16]
 80062e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	bfb8      	it	lt
 80062e8:	460b      	movlt	r3, r1
 80062ea:	460c      	mov	r4, r1
 80062ec:	bfbc      	itt	lt
 80062ee:	464c      	movlt	r4, r9
 80062f0:	4699      	movlt	r9, r3
 80062f2:	6927      	ldr	r7, [r4, #16]
 80062f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80062f8:	68a3      	ldr	r3, [r4, #8]
 80062fa:	6861      	ldr	r1, [r4, #4]
 80062fc:	eb07 060a 	add.w	r6, r7, sl
 8006300:	42b3      	cmp	r3, r6
 8006302:	b085      	sub	sp, #20
 8006304:	bfb8      	it	lt
 8006306:	3101      	addlt	r1, #1
 8006308:	f7ff fe90 	bl	800602c <_Balloc>
 800630c:	b930      	cbnz	r0, 800631c <__multiply+0x44>
 800630e:	4602      	mov	r2, r0
 8006310:	4b43      	ldr	r3, [pc, #268]	; (8006420 <__multiply+0x148>)
 8006312:	4844      	ldr	r0, [pc, #272]	; (8006424 <__multiply+0x14c>)
 8006314:	f240 115d 	movw	r1, #349	; 0x15d
 8006318:	f000 fdc2 	bl	8006ea0 <__assert_func>
 800631c:	f100 0514 	add.w	r5, r0, #20
 8006320:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006324:	462b      	mov	r3, r5
 8006326:	2200      	movs	r2, #0
 8006328:	4543      	cmp	r3, r8
 800632a:	d321      	bcc.n	8006370 <__multiply+0x98>
 800632c:	f104 0314 	add.w	r3, r4, #20
 8006330:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006334:	f109 0314 	add.w	r3, r9, #20
 8006338:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800633c:	9202      	str	r2, [sp, #8]
 800633e:	1b3a      	subs	r2, r7, r4
 8006340:	3a15      	subs	r2, #21
 8006342:	f022 0203 	bic.w	r2, r2, #3
 8006346:	3204      	adds	r2, #4
 8006348:	f104 0115 	add.w	r1, r4, #21
 800634c:	428f      	cmp	r7, r1
 800634e:	bf38      	it	cc
 8006350:	2204      	movcc	r2, #4
 8006352:	9201      	str	r2, [sp, #4]
 8006354:	9a02      	ldr	r2, [sp, #8]
 8006356:	9303      	str	r3, [sp, #12]
 8006358:	429a      	cmp	r2, r3
 800635a:	d80c      	bhi.n	8006376 <__multiply+0x9e>
 800635c:	2e00      	cmp	r6, #0
 800635e:	dd03      	ble.n	8006368 <__multiply+0x90>
 8006360:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006364:	2b00      	cmp	r3, #0
 8006366:	d059      	beq.n	800641c <__multiply+0x144>
 8006368:	6106      	str	r6, [r0, #16]
 800636a:	b005      	add	sp, #20
 800636c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006370:	f843 2b04 	str.w	r2, [r3], #4
 8006374:	e7d8      	b.n	8006328 <__multiply+0x50>
 8006376:	f8b3 a000 	ldrh.w	sl, [r3]
 800637a:	f1ba 0f00 	cmp.w	sl, #0
 800637e:	d023      	beq.n	80063c8 <__multiply+0xf0>
 8006380:	f104 0e14 	add.w	lr, r4, #20
 8006384:	46a9      	mov	r9, r5
 8006386:	f04f 0c00 	mov.w	ip, #0
 800638a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800638e:	f8d9 1000 	ldr.w	r1, [r9]
 8006392:	fa1f fb82 	uxth.w	fp, r2
 8006396:	b289      	uxth	r1, r1
 8006398:	fb0a 110b 	mla	r1, sl, fp, r1
 800639c:	4461      	add	r1, ip
 800639e:	f8d9 c000 	ldr.w	ip, [r9]
 80063a2:	0c12      	lsrs	r2, r2, #16
 80063a4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80063a8:	fb0a c202 	mla	r2, sl, r2, ip
 80063ac:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80063b0:	b289      	uxth	r1, r1
 80063b2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80063b6:	4577      	cmp	r7, lr
 80063b8:	f849 1b04 	str.w	r1, [r9], #4
 80063bc:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80063c0:	d8e3      	bhi.n	800638a <__multiply+0xb2>
 80063c2:	9a01      	ldr	r2, [sp, #4]
 80063c4:	f845 c002 	str.w	ip, [r5, r2]
 80063c8:	9a03      	ldr	r2, [sp, #12]
 80063ca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80063ce:	3304      	adds	r3, #4
 80063d0:	f1b9 0f00 	cmp.w	r9, #0
 80063d4:	d020      	beq.n	8006418 <__multiply+0x140>
 80063d6:	6829      	ldr	r1, [r5, #0]
 80063d8:	f104 0c14 	add.w	ip, r4, #20
 80063dc:	46ae      	mov	lr, r5
 80063de:	f04f 0a00 	mov.w	sl, #0
 80063e2:	f8bc b000 	ldrh.w	fp, [ip]
 80063e6:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80063ea:	fb09 220b 	mla	r2, r9, fp, r2
 80063ee:	4492      	add	sl, r2
 80063f0:	b289      	uxth	r1, r1
 80063f2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80063f6:	f84e 1b04 	str.w	r1, [lr], #4
 80063fa:	f85c 2b04 	ldr.w	r2, [ip], #4
 80063fe:	f8be 1000 	ldrh.w	r1, [lr]
 8006402:	0c12      	lsrs	r2, r2, #16
 8006404:	fb09 1102 	mla	r1, r9, r2, r1
 8006408:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800640c:	4567      	cmp	r7, ip
 800640e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006412:	d8e6      	bhi.n	80063e2 <__multiply+0x10a>
 8006414:	9a01      	ldr	r2, [sp, #4]
 8006416:	50a9      	str	r1, [r5, r2]
 8006418:	3504      	adds	r5, #4
 800641a:	e79b      	b.n	8006354 <__multiply+0x7c>
 800641c:	3e01      	subs	r6, #1
 800641e:	e79d      	b.n	800635c <__multiply+0x84>
 8006420:	08007e08 	.word	0x08007e08
 8006424:	08007e94 	.word	0x08007e94

08006428 <__pow5mult>:
 8006428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800642c:	4615      	mov	r5, r2
 800642e:	f012 0203 	ands.w	r2, r2, #3
 8006432:	4606      	mov	r6, r0
 8006434:	460f      	mov	r7, r1
 8006436:	d007      	beq.n	8006448 <__pow5mult+0x20>
 8006438:	4c25      	ldr	r4, [pc, #148]	; (80064d0 <__pow5mult+0xa8>)
 800643a:	3a01      	subs	r2, #1
 800643c:	2300      	movs	r3, #0
 800643e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006442:	f7ff fe55 	bl	80060f0 <__multadd>
 8006446:	4607      	mov	r7, r0
 8006448:	10ad      	asrs	r5, r5, #2
 800644a:	d03d      	beq.n	80064c8 <__pow5mult+0xa0>
 800644c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800644e:	b97c      	cbnz	r4, 8006470 <__pow5mult+0x48>
 8006450:	2010      	movs	r0, #16
 8006452:	f7ff fdc3 	bl	8005fdc <malloc>
 8006456:	4602      	mov	r2, r0
 8006458:	6270      	str	r0, [r6, #36]	; 0x24
 800645a:	b928      	cbnz	r0, 8006468 <__pow5mult+0x40>
 800645c:	4b1d      	ldr	r3, [pc, #116]	; (80064d4 <__pow5mult+0xac>)
 800645e:	481e      	ldr	r0, [pc, #120]	; (80064d8 <__pow5mult+0xb0>)
 8006460:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006464:	f000 fd1c 	bl	8006ea0 <__assert_func>
 8006468:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800646c:	6004      	str	r4, [r0, #0]
 800646e:	60c4      	str	r4, [r0, #12]
 8006470:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006474:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006478:	b94c      	cbnz	r4, 800648e <__pow5mult+0x66>
 800647a:	f240 2171 	movw	r1, #625	; 0x271
 800647e:	4630      	mov	r0, r6
 8006480:	f7ff ff14 	bl	80062ac <__i2b>
 8006484:	2300      	movs	r3, #0
 8006486:	f8c8 0008 	str.w	r0, [r8, #8]
 800648a:	4604      	mov	r4, r0
 800648c:	6003      	str	r3, [r0, #0]
 800648e:	f04f 0900 	mov.w	r9, #0
 8006492:	07eb      	lsls	r3, r5, #31
 8006494:	d50a      	bpl.n	80064ac <__pow5mult+0x84>
 8006496:	4639      	mov	r1, r7
 8006498:	4622      	mov	r2, r4
 800649a:	4630      	mov	r0, r6
 800649c:	f7ff ff1c 	bl	80062d8 <__multiply>
 80064a0:	4639      	mov	r1, r7
 80064a2:	4680      	mov	r8, r0
 80064a4:	4630      	mov	r0, r6
 80064a6:	f7ff fe01 	bl	80060ac <_Bfree>
 80064aa:	4647      	mov	r7, r8
 80064ac:	106d      	asrs	r5, r5, #1
 80064ae:	d00b      	beq.n	80064c8 <__pow5mult+0xa0>
 80064b0:	6820      	ldr	r0, [r4, #0]
 80064b2:	b938      	cbnz	r0, 80064c4 <__pow5mult+0x9c>
 80064b4:	4622      	mov	r2, r4
 80064b6:	4621      	mov	r1, r4
 80064b8:	4630      	mov	r0, r6
 80064ba:	f7ff ff0d 	bl	80062d8 <__multiply>
 80064be:	6020      	str	r0, [r4, #0]
 80064c0:	f8c0 9000 	str.w	r9, [r0]
 80064c4:	4604      	mov	r4, r0
 80064c6:	e7e4      	b.n	8006492 <__pow5mult+0x6a>
 80064c8:	4638      	mov	r0, r7
 80064ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064ce:	bf00      	nop
 80064d0:	08007fe0 	.word	0x08007fe0
 80064d4:	08007d96 	.word	0x08007d96
 80064d8:	08007e94 	.word	0x08007e94

080064dc <__lshift>:
 80064dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064e0:	460c      	mov	r4, r1
 80064e2:	6849      	ldr	r1, [r1, #4]
 80064e4:	6923      	ldr	r3, [r4, #16]
 80064e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80064ea:	68a3      	ldr	r3, [r4, #8]
 80064ec:	4607      	mov	r7, r0
 80064ee:	4691      	mov	r9, r2
 80064f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80064f4:	f108 0601 	add.w	r6, r8, #1
 80064f8:	42b3      	cmp	r3, r6
 80064fa:	db0b      	blt.n	8006514 <__lshift+0x38>
 80064fc:	4638      	mov	r0, r7
 80064fe:	f7ff fd95 	bl	800602c <_Balloc>
 8006502:	4605      	mov	r5, r0
 8006504:	b948      	cbnz	r0, 800651a <__lshift+0x3e>
 8006506:	4602      	mov	r2, r0
 8006508:	4b2a      	ldr	r3, [pc, #168]	; (80065b4 <__lshift+0xd8>)
 800650a:	482b      	ldr	r0, [pc, #172]	; (80065b8 <__lshift+0xdc>)
 800650c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006510:	f000 fcc6 	bl	8006ea0 <__assert_func>
 8006514:	3101      	adds	r1, #1
 8006516:	005b      	lsls	r3, r3, #1
 8006518:	e7ee      	b.n	80064f8 <__lshift+0x1c>
 800651a:	2300      	movs	r3, #0
 800651c:	f100 0114 	add.w	r1, r0, #20
 8006520:	f100 0210 	add.w	r2, r0, #16
 8006524:	4618      	mov	r0, r3
 8006526:	4553      	cmp	r3, sl
 8006528:	db37      	blt.n	800659a <__lshift+0xbe>
 800652a:	6920      	ldr	r0, [r4, #16]
 800652c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006530:	f104 0314 	add.w	r3, r4, #20
 8006534:	f019 091f 	ands.w	r9, r9, #31
 8006538:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800653c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006540:	d02f      	beq.n	80065a2 <__lshift+0xc6>
 8006542:	f1c9 0e20 	rsb	lr, r9, #32
 8006546:	468a      	mov	sl, r1
 8006548:	f04f 0c00 	mov.w	ip, #0
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	fa02 f209 	lsl.w	r2, r2, r9
 8006552:	ea42 020c 	orr.w	r2, r2, ip
 8006556:	f84a 2b04 	str.w	r2, [sl], #4
 800655a:	f853 2b04 	ldr.w	r2, [r3], #4
 800655e:	4298      	cmp	r0, r3
 8006560:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006564:	d8f2      	bhi.n	800654c <__lshift+0x70>
 8006566:	1b03      	subs	r3, r0, r4
 8006568:	3b15      	subs	r3, #21
 800656a:	f023 0303 	bic.w	r3, r3, #3
 800656e:	3304      	adds	r3, #4
 8006570:	f104 0215 	add.w	r2, r4, #21
 8006574:	4290      	cmp	r0, r2
 8006576:	bf38      	it	cc
 8006578:	2304      	movcc	r3, #4
 800657a:	f841 c003 	str.w	ip, [r1, r3]
 800657e:	f1bc 0f00 	cmp.w	ip, #0
 8006582:	d001      	beq.n	8006588 <__lshift+0xac>
 8006584:	f108 0602 	add.w	r6, r8, #2
 8006588:	3e01      	subs	r6, #1
 800658a:	4638      	mov	r0, r7
 800658c:	612e      	str	r6, [r5, #16]
 800658e:	4621      	mov	r1, r4
 8006590:	f7ff fd8c 	bl	80060ac <_Bfree>
 8006594:	4628      	mov	r0, r5
 8006596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800659a:	f842 0f04 	str.w	r0, [r2, #4]!
 800659e:	3301      	adds	r3, #1
 80065a0:	e7c1      	b.n	8006526 <__lshift+0x4a>
 80065a2:	3904      	subs	r1, #4
 80065a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80065a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80065ac:	4298      	cmp	r0, r3
 80065ae:	d8f9      	bhi.n	80065a4 <__lshift+0xc8>
 80065b0:	e7ea      	b.n	8006588 <__lshift+0xac>
 80065b2:	bf00      	nop
 80065b4:	08007e08 	.word	0x08007e08
 80065b8:	08007e94 	.word	0x08007e94

080065bc <__mcmp>:
 80065bc:	690a      	ldr	r2, [r1, #16]
 80065be:	4603      	mov	r3, r0
 80065c0:	6900      	ldr	r0, [r0, #16]
 80065c2:	1a80      	subs	r0, r0, r2
 80065c4:	b530      	push	{r4, r5, lr}
 80065c6:	d10d      	bne.n	80065e4 <__mcmp+0x28>
 80065c8:	3314      	adds	r3, #20
 80065ca:	3114      	adds	r1, #20
 80065cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80065d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80065d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80065d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80065dc:	4295      	cmp	r5, r2
 80065de:	d002      	beq.n	80065e6 <__mcmp+0x2a>
 80065e0:	d304      	bcc.n	80065ec <__mcmp+0x30>
 80065e2:	2001      	movs	r0, #1
 80065e4:	bd30      	pop	{r4, r5, pc}
 80065e6:	42a3      	cmp	r3, r4
 80065e8:	d3f4      	bcc.n	80065d4 <__mcmp+0x18>
 80065ea:	e7fb      	b.n	80065e4 <__mcmp+0x28>
 80065ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065f0:	e7f8      	b.n	80065e4 <__mcmp+0x28>
	...

080065f4 <__mdiff>:
 80065f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f8:	460d      	mov	r5, r1
 80065fa:	4607      	mov	r7, r0
 80065fc:	4611      	mov	r1, r2
 80065fe:	4628      	mov	r0, r5
 8006600:	4614      	mov	r4, r2
 8006602:	f7ff ffdb 	bl	80065bc <__mcmp>
 8006606:	1e06      	subs	r6, r0, #0
 8006608:	d111      	bne.n	800662e <__mdiff+0x3a>
 800660a:	4631      	mov	r1, r6
 800660c:	4638      	mov	r0, r7
 800660e:	f7ff fd0d 	bl	800602c <_Balloc>
 8006612:	4602      	mov	r2, r0
 8006614:	b928      	cbnz	r0, 8006622 <__mdiff+0x2e>
 8006616:	4b39      	ldr	r3, [pc, #228]	; (80066fc <__mdiff+0x108>)
 8006618:	f240 2132 	movw	r1, #562	; 0x232
 800661c:	4838      	ldr	r0, [pc, #224]	; (8006700 <__mdiff+0x10c>)
 800661e:	f000 fc3f 	bl	8006ea0 <__assert_func>
 8006622:	2301      	movs	r3, #1
 8006624:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006628:	4610      	mov	r0, r2
 800662a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800662e:	bfa4      	itt	ge
 8006630:	4623      	movge	r3, r4
 8006632:	462c      	movge	r4, r5
 8006634:	4638      	mov	r0, r7
 8006636:	6861      	ldr	r1, [r4, #4]
 8006638:	bfa6      	itte	ge
 800663a:	461d      	movge	r5, r3
 800663c:	2600      	movge	r6, #0
 800663e:	2601      	movlt	r6, #1
 8006640:	f7ff fcf4 	bl	800602c <_Balloc>
 8006644:	4602      	mov	r2, r0
 8006646:	b918      	cbnz	r0, 8006650 <__mdiff+0x5c>
 8006648:	4b2c      	ldr	r3, [pc, #176]	; (80066fc <__mdiff+0x108>)
 800664a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800664e:	e7e5      	b.n	800661c <__mdiff+0x28>
 8006650:	6927      	ldr	r7, [r4, #16]
 8006652:	60c6      	str	r6, [r0, #12]
 8006654:	692e      	ldr	r6, [r5, #16]
 8006656:	f104 0014 	add.w	r0, r4, #20
 800665a:	f105 0914 	add.w	r9, r5, #20
 800665e:	f102 0e14 	add.w	lr, r2, #20
 8006662:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8006666:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800666a:	3410      	adds	r4, #16
 800666c:	46f2      	mov	sl, lr
 800666e:	2100      	movs	r1, #0
 8006670:	f859 3b04 	ldr.w	r3, [r9], #4
 8006674:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006678:	fa1f f883 	uxth.w	r8, r3
 800667c:	fa11 f18b 	uxtah	r1, r1, fp
 8006680:	0c1b      	lsrs	r3, r3, #16
 8006682:	eba1 0808 	sub.w	r8, r1, r8
 8006686:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800668a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800668e:	fa1f f888 	uxth.w	r8, r8
 8006692:	1419      	asrs	r1, r3, #16
 8006694:	454e      	cmp	r6, r9
 8006696:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800669a:	f84a 3b04 	str.w	r3, [sl], #4
 800669e:	d8e7      	bhi.n	8006670 <__mdiff+0x7c>
 80066a0:	1b73      	subs	r3, r6, r5
 80066a2:	3b15      	subs	r3, #21
 80066a4:	f023 0303 	bic.w	r3, r3, #3
 80066a8:	3304      	adds	r3, #4
 80066aa:	3515      	adds	r5, #21
 80066ac:	42ae      	cmp	r6, r5
 80066ae:	bf38      	it	cc
 80066b0:	2304      	movcc	r3, #4
 80066b2:	4418      	add	r0, r3
 80066b4:	4473      	add	r3, lr
 80066b6:	469e      	mov	lr, r3
 80066b8:	4606      	mov	r6, r0
 80066ba:	4566      	cmp	r6, ip
 80066bc:	d30e      	bcc.n	80066dc <__mdiff+0xe8>
 80066be:	f10c 0103 	add.w	r1, ip, #3
 80066c2:	1a09      	subs	r1, r1, r0
 80066c4:	f021 0103 	bic.w	r1, r1, #3
 80066c8:	3803      	subs	r0, #3
 80066ca:	4584      	cmp	ip, r0
 80066cc:	bf38      	it	cc
 80066ce:	2100      	movcc	r1, #0
 80066d0:	4419      	add	r1, r3
 80066d2:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80066d6:	b17b      	cbz	r3, 80066f8 <__mdiff+0x104>
 80066d8:	6117      	str	r7, [r2, #16]
 80066da:	e7a5      	b.n	8006628 <__mdiff+0x34>
 80066dc:	f856 8b04 	ldr.w	r8, [r6], #4
 80066e0:	fa11 f488 	uxtah	r4, r1, r8
 80066e4:	1425      	asrs	r5, r4, #16
 80066e6:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 80066ea:	b2a4      	uxth	r4, r4
 80066ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80066f0:	f84e 4b04 	str.w	r4, [lr], #4
 80066f4:	1429      	asrs	r1, r5, #16
 80066f6:	e7e0      	b.n	80066ba <__mdiff+0xc6>
 80066f8:	3f01      	subs	r7, #1
 80066fa:	e7ea      	b.n	80066d2 <__mdiff+0xde>
 80066fc:	08007e08 	.word	0x08007e08
 8006700:	08007e94 	.word	0x08007e94

08006704 <__ulp>:
 8006704:	4b11      	ldr	r3, [pc, #68]	; (800674c <__ulp+0x48>)
 8006706:	400b      	ands	r3, r1
 8006708:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800670c:	2b00      	cmp	r3, #0
 800670e:	dd02      	ble.n	8006716 <__ulp+0x12>
 8006710:	2000      	movs	r0, #0
 8006712:	4619      	mov	r1, r3
 8006714:	4770      	bx	lr
 8006716:	425b      	negs	r3, r3
 8006718:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800671c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006720:	f04f 0000 	mov.w	r0, #0
 8006724:	f04f 0100 	mov.w	r1, #0
 8006728:	da04      	bge.n	8006734 <__ulp+0x30>
 800672a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800672e:	fa43 f102 	asr.w	r1, r3, r2
 8006732:	4770      	bx	lr
 8006734:	f1a2 0314 	sub.w	r3, r2, #20
 8006738:	2b1e      	cmp	r3, #30
 800673a:	bfda      	itte	le
 800673c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006740:	fa22 f303 	lsrle.w	r3, r2, r3
 8006744:	2301      	movgt	r3, #1
 8006746:	4618      	mov	r0, r3
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	7ff00000 	.word	0x7ff00000

08006750 <__b2d>:
 8006750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006754:	6907      	ldr	r7, [r0, #16]
 8006756:	f100 0914 	add.w	r9, r0, #20
 800675a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800675e:	f1a7 0804 	sub.w	r8, r7, #4
 8006762:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006766:	4630      	mov	r0, r6
 8006768:	f7ff fd52 	bl	8006210 <__hi0bits>
 800676c:	f1c0 0320 	rsb	r3, r0, #32
 8006770:	280a      	cmp	r0, #10
 8006772:	600b      	str	r3, [r1, #0]
 8006774:	491f      	ldr	r1, [pc, #124]	; (80067f4 <__b2d+0xa4>)
 8006776:	dc17      	bgt.n	80067a8 <__b2d+0x58>
 8006778:	f1c0 0c0b 	rsb	ip, r0, #11
 800677c:	45c1      	cmp	r9, r8
 800677e:	fa26 f30c 	lsr.w	r3, r6, ip
 8006782:	bf38      	it	cc
 8006784:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006788:	ea43 0501 	orr.w	r5, r3, r1
 800678c:	bf28      	it	cs
 800678e:	2200      	movcs	r2, #0
 8006790:	f100 0315 	add.w	r3, r0, #21
 8006794:	fa06 f303 	lsl.w	r3, r6, r3
 8006798:	fa22 f20c 	lsr.w	r2, r2, ip
 800679c:	ea43 0402 	orr.w	r4, r3, r2
 80067a0:	4620      	mov	r0, r4
 80067a2:	4629      	mov	r1, r5
 80067a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067a8:	45c1      	cmp	r9, r8
 80067aa:	bf3a      	itte	cc
 80067ac:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80067b0:	f1a7 0808 	subcc.w	r8, r7, #8
 80067b4:	2200      	movcs	r2, #0
 80067b6:	f1b0 030b 	subs.w	r3, r0, #11
 80067ba:	d016      	beq.n	80067ea <__b2d+0x9a>
 80067bc:	f1c3 0720 	rsb	r7, r3, #32
 80067c0:	fa22 f107 	lsr.w	r1, r2, r7
 80067c4:	45c8      	cmp	r8, r9
 80067c6:	fa06 f603 	lsl.w	r6, r6, r3
 80067ca:	ea46 0601 	orr.w	r6, r6, r1
 80067ce:	bf8c      	ite	hi
 80067d0:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80067d4:	2100      	movls	r1, #0
 80067d6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80067da:	fa02 f003 	lsl.w	r0, r2, r3
 80067de:	40f9      	lsrs	r1, r7
 80067e0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80067e4:	ea40 0401 	orr.w	r4, r0, r1
 80067e8:	e7da      	b.n	80067a0 <__b2d+0x50>
 80067ea:	ea46 0501 	orr.w	r5, r6, r1
 80067ee:	4614      	mov	r4, r2
 80067f0:	e7d6      	b.n	80067a0 <__b2d+0x50>
 80067f2:	bf00      	nop
 80067f4:	3ff00000 	.word	0x3ff00000

080067f8 <__d2b>:
 80067f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80067fc:	2101      	movs	r1, #1
 80067fe:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006802:	4690      	mov	r8, r2
 8006804:	461d      	mov	r5, r3
 8006806:	f7ff fc11 	bl	800602c <_Balloc>
 800680a:	4604      	mov	r4, r0
 800680c:	b930      	cbnz	r0, 800681c <__d2b+0x24>
 800680e:	4602      	mov	r2, r0
 8006810:	4b25      	ldr	r3, [pc, #148]	; (80068a8 <__d2b+0xb0>)
 8006812:	4826      	ldr	r0, [pc, #152]	; (80068ac <__d2b+0xb4>)
 8006814:	f240 310a 	movw	r1, #778	; 0x30a
 8006818:	f000 fb42 	bl	8006ea0 <__assert_func>
 800681c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006820:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006824:	bb2d      	cbnz	r5, 8006872 <__d2b+0x7a>
 8006826:	9301      	str	r3, [sp, #4]
 8006828:	f1b8 0300 	subs.w	r3, r8, #0
 800682c:	d026      	beq.n	800687c <__d2b+0x84>
 800682e:	4668      	mov	r0, sp
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	f7ff fd0d 	bl	8006250 <__lo0bits>
 8006836:	9900      	ldr	r1, [sp, #0]
 8006838:	b1f0      	cbz	r0, 8006878 <__d2b+0x80>
 800683a:	9a01      	ldr	r2, [sp, #4]
 800683c:	f1c0 0320 	rsb	r3, r0, #32
 8006840:	fa02 f303 	lsl.w	r3, r2, r3
 8006844:	430b      	orrs	r3, r1
 8006846:	40c2      	lsrs	r2, r0
 8006848:	6163      	str	r3, [r4, #20]
 800684a:	9201      	str	r2, [sp, #4]
 800684c:	9b01      	ldr	r3, [sp, #4]
 800684e:	61a3      	str	r3, [r4, #24]
 8006850:	2b00      	cmp	r3, #0
 8006852:	bf14      	ite	ne
 8006854:	2102      	movne	r1, #2
 8006856:	2101      	moveq	r1, #1
 8006858:	6121      	str	r1, [r4, #16]
 800685a:	b1c5      	cbz	r5, 800688e <__d2b+0x96>
 800685c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006860:	4405      	add	r5, r0
 8006862:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006866:	603d      	str	r5, [r7, #0]
 8006868:	6030      	str	r0, [r6, #0]
 800686a:	4620      	mov	r0, r4
 800686c:	b002      	add	sp, #8
 800686e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006872:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006876:	e7d6      	b.n	8006826 <__d2b+0x2e>
 8006878:	6161      	str	r1, [r4, #20]
 800687a:	e7e7      	b.n	800684c <__d2b+0x54>
 800687c:	a801      	add	r0, sp, #4
 800687e:	f7ff fce7 	bl	8006250 <__lo0bits>
 8006882:	9b01      	ldr	r3, [sp, #4]
 8006884:	6163      	str	r3, [r4, #20]
 8006886:	2101      	movs	r1, #1
 8006888:	6121      	str	r1, [r4, #16]
 800688a:	3020      	adds	r0, #32
 800688c:	e7e5      	b.n	800685a <__d2b+0x62>
 800688e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006892:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006896:	6038      	str	r0, [r7, #0]
 8006898:	6918      	ldr	r0, [r3, #16]
 800689a:	f7ff fcb9 	bl	8006210 <__hi0bits>
 800689e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80068a2:	6031      	str	r1, [r6, #0]
 80068a4:	e7e1      	b.n	800686a <__d2b+0x72>
 80068a6:	bf00      	nop
 80068a8:	08007e08 	.word	0x08007e08
 80068ac:	08007e94 	.word	0x08007e94

080068b0 <__ratio>:
 80068b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b4:	4688      	mov	r8, r1
 80068b6:	4669      	mov	r1, sp
 80068b8:	4681      	mov	r9, r0
 80068ba:	f7ff ff49 	bl	8006750 <__b2d>
 80068be:	460f      	mov	r7, r1
 80068c0:	4604      	mov	r4, r0
 80068c2:	460d      	mov	r5, r1
 80068c4:	4640      	mov	r0, r8
 80068c6:	a901      	add	r1, sp, #4
 80068c8:	f7ff ff42 	bl	8006750 <__b2d>
 80068cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80068d0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80068d4:	eba3 0c02 	sub.w	ip, r3, r2
 80068d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80068dc:	1a9b      	subs	r3, r3, r2
 80068de:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	bfd5      	itete	le
 80068e6:	460a      	movle	r2, r1
 80068e8:	462a      	movgt	r2, r5
 80068ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80068ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80068f2:	468b      	mov	fp, r1
 80068f4:	bfd8      	it	le
 80068f6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80068fa:	465b      	mov	r3, fp
 80068fc:	4602      	mov	r2, r0
 80068fe:	4639      	mov	r1, r7
 8006900:	4620      	mov	r0, r4
 8006902:	f7fa f85f 	bl	80009c4 <__aeabi_ddiv>
 8006906:	b003      	add	sp, #12
 8006908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800690c <__copybits>:
 800690c:	3901      	subs	r1, #1
 800690e:	b570      	push	{r4, r5, r6, lr}
 8006910:	1149      	asrs	r1, r1, #5
 8006912:	6914      	ldr	r4, [r2, #16]
 8006914:	3101      	adds	r1, #1
 8006916:	f102 0314 	add.w	r3, r2, #20
 800691a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800691e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006922:	1f05      	subs	r5, r0, #4
 8006924:	42a3      	cmp	r3, r4
 8006926:	d30c      	bcc.n	8006942 <__copybits+0x36>
 8006928:	1aa3      	subs	r3, r4, r2
 800692a:	3b11      	subs	r3, #17
 800692c:	f023 0303 	bic.w	r3, r3, #3
 8006930:	3211      	adds	r2, #17
 8006932:	42a2      	cmp	r2, r4
 8006934:	bf88      	it	hi
 8006936:	2300      	movhi	r3, #0
 8006938:	4418      	add	r0, r3
 800693a:	2300      	movs	r3, #0
 800693c:	4288      	cmp	r0, r1
 800693e:	d305      	bcc.n	800694c <__copybits+0x40>
 8006940:	bd70      	pop	{r4, r5, r6, pc}
 8006942:	f853 6b04 	ldr.w	r6, [r3], #4
 8006946:	f845 6f04 	str.w	r6, [r5, #4]!
 800694a:	e7eb      	b.n	8006924 <__copybits+0x18>
 800694c:	f840 3b04 	str.w	r3, [r0], #4
 8006950:	e7f4      	b.n	800693c <__copybits+0x30>

08006952 <__any_on>:
 8006952:	f100 0214 	add.w	r2, r0, #20
 8006956:	6900      	ldr	r0, [r0, #16]
 8006958:	114b      	asrs	r3, r1, #5
 800695a:	4298      	cmp	r0, r3
 800695c:	b510      	push	{r4, lr}
 800695e:	db11      	blt.n	8006984 <__any_on+0x32>
 8006960:	dd0a      	ble.n	8006978 <__any_on+0x26>
 8006962:	f011 011f 	ands.w	r1, r1, #31
 8006966:	d007      	beq.n	8006978 <__any_on+0x26>
 8006968:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800696c:	fa24 f001 	lsr.w	r0, r4, r1
 8006970:	fa00 f101 	lsl.w	r1, r0, r1
 8006974:	428c      	cmp	r4, r1
 8006976:	d10b      	bne.n	8006990 <__any_on+0x3e>
 8006978:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800697c:	4293      	cmp	r3, r2
 800697e:	d803      	bhi.n	8006988 <__any_on+0x36>
 8006980:	2000      	movs	r0, #0
 8006982:	bd10      	pop	{r4, pc}
 8006984:	4603      	mov	r3, r0
 8006986:	e7f7      	b.n	8006978 <__any_on+0x26>
 8006988:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800698c:	2900      	cmp	r1, #0
 800698e:	d0f5      	beq.n	800697c <__any_on+0x2a>
 8006990:	2001      	movs	r0, #1
 8006992:	e7f6      	b.n	8006982 <__any_on+0x30>

08006994 <_calloc_r>:
 8006994:	b570      	push	{r4, r5, r6, lr}
 8006996:	fba1 5402 	umull	r5, r4, r1, r2
 800699a:	b934      	cbnz	r4, 80069aa <_calloc_r+0x16>
 800699c:	4629      	mov	r1, r5
 800699e:	f000 f877 	bl	8006a90 <_malloc_r>
 80069a2:	4606      	mov	r6, r0
 80069a4:	b928      	cbnz	r0, 80069b2 <_calloc_r+0x1e>
 80069a6:	4630      	mov	r0, r6
 80069a8:	bd70      	pop	{r4, r5, r6, pc}
 80069aa:	220c      	movs	r2, #12
 80069ac:	6002      	str	r2, [r0, #0]
 80069ae:	2600      	movs	r6, #0
 80069b0:	e7f9      	b.n	80069a6 <_calloc_r+0x12>
 80069b2:	462a      	mov	r2, r5
 80069b4:	4621      	mov	r1, r4
 80069b6:	f7fc fc09 	bl	80031cc <memset>
 80069ba:	e7f4      	b.n	80069a6 <_calloc_r+0x12>

080069bc <_free_r>:
 80069bc:	b538      	push	{r3, r4, r5, lr}
 80069be:	4605      	mov	r5, r0
 80069c0:	2900      	cmp	r1, #0
 80069c2:	d041      	beq.n	8006a48 <_free_r+0x8c>
 80069c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069c8:	1f0c      	subs	r4, r1, #4
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	bfb8      	it	lt
 80069ce:	18e4      	addlt	r4, r4, r3
 80069d0:	f000 fab0 	bl	8006f34 <__malloc_lock>
 80069d4:	4a1d      	ldr	r2, [pc, #116]	; (8006a4c <_free_r+0x90>)
 80069d6:	6813      	ldr	r3, [r2, #0]
 80069d8:	b933      	cbnz	r3, 80069e8 <_free_r+0x2c>
 80069da:	6063      	str	r3, [r4, #4]
 80069dc:	6014      	str	r4, [r2, #0]
 80069de:	4628      	mov	r0, r5
 80069e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069e4:	f000 baac 	b.w	8006f40 <__malloc_unlock>
 80069e8:	42a3      	cmp	r3, r4
 80069ea:	d908      	bls.n	80069fe <_free_r+0x42>
 80069ec:	6820      	ldr	r0, [r4, #0]
 80069ee:	1821      	adds	r1, r4, r0
 80069f0:	428b      	cmp	r3, r1
 80069f2:	bf01      	itttt	eq
 80069f4:	6819      	ldreq	r1, [r3, #0]
 80069f6:	685b      	ldreq	r3, [r3, #4]
 80069f8:	1809      	addeq	r1, r1, r0
 80069fa:	6021      	streq	r1, [r4, #0]
 80069fc:	e7ed      	b.n	80069da <_free_r+0x1e>
 80069fe:	461a      	mov	r2, r3
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	b10b      	cbz	r3, 8006a08 <_free_r+0x4c>
 8006a04:	42a3      	cmp	r3, r4
 8006a06:	d9fa      	bls.n	80069fe <_free_r+0x42>
 8006a08:	6811      	ldr	r1, [r2, #0]
 8006a0a:	1850      	adds	r0, r2, r1
 8006a0c:	42a0      	cmp	r0, r4
 8006a0e:	d10b      	bne.n	8006a28 <_free_r+0x6c>
 8006a10:	6820      	ldr	r0, [r4, #0]
 8006a12:	4401      	add	r1, r0
 8006a14:	1850      	adds	r0, r2, r1
 8006a16:	4283      	cmp	r3, r0
 8006a18:	6011      	str	r1, [r2, #0]
 8006a1a:	d1e0      	bne.n	80069de <_free_r+0x22>
 8006a1c:	6818      	ldr	r0, [r3, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	6053      	str	r3, [r2, #4]
 8006a22:	4401      	add	r1, r0
 8006a24:	6011      	str	r1, [r2, #0]
 8006a26:	e7da      	b.n	80069de <_free_r+0x22>
 8006a28:	d902      	bls.n	8006a30 <_free_r+0x74>
 8006a2a:	230c      	movs	r3, #12
 8006a2c:	602b      	str	r3, [r5, #0]
 8006a2e:	e7d6      	b.n	80069de <_free_r+0x22>
 8006a30:	6820      	ldr	r0, [r4, #0]
 8006a32:	1821      	adds	r1, r4, r0
 8006a34:	428b      	cmp	r3, r1
 8006a36:	bf04      	itt	eq
 8006a38:	6819      	ldreq	r1, [r3, #0]
 8006a3a:	685b      	ldreq	r3, [r3, #4]
 8006a3c:	6063      	str	r3, [r4, #4]
 8006a3e:	bf04      	itt	eq
 8006a40:	1809      	addeq	r1, r1, r0
 8006a42:	6021      	streq	r1, [r4, #0]
 8006a44:	6054      	str	r4, [r2, #4]
 8006a46:	e7ca      	b.n	80069de <_free_r+0x22>
 8006a48:	bd38      	pop	{r3, r4, r5, pc}
 8006a4a:	bf00      	nop
 8006a4c:	20006174 	.word	0x20006174

08006a50 <sbrk_aligned>:
 8006a50:	b570      	push	{r4, r5, r6, lr}
 8006a52:	4e0e      	ldr	r6, [pc, #56]	; (8006a8c <sbrk_aligned+0x3c>)
 8006a54:	460c      	mov	r4, r1
 8006a56:	6831      	ldr	r1, [r6, #0]
 8006a58:	4605      	mov	r5, r0
 8006a5a:	b911      	cbnz	r1, 8006a62 <sbrk_aligned+0x12>
 8006a5c:	f000 f9ee 	bl	8006e3c <_sbrk_r>
 8006a60:	6030      	str	r0, [r6, #0]
 8006a62:	4621      	mov	r1, r4
 8006a64:	4628      	mov	r0, r5
 8006a66:	f000 f9e9 	bl	8006e3c <_sbrk_r>
 8006a6a:	1c43      	adds	r3, r0, #1
 8006a6c:	d00a      	beq.n	8006a84 <sbrk_aligned+0x34>
 8006a6e:	1cc4      	adds	r4, r0, #3
 8006a70:	f024 0403 	bic.w	r4, r4, #3
 8006a74:	42a0      	cmp	r0, r4
 8006a76:	d007      	beq.n	8006a88 <sbrk_aligned+0x38>
 8006a78:	1a21      	subs	r1, r4, r0
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	f000 f9de 	bl	8006e3c <_sbrk_r>
 8006a80:	3001      	adds	r0, #1
 8006a82:	d101      	bne.n	8006a88 <sbrk_aligned+0x38>
 8006a84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006a88:	4620      	mov	r0, r4
 8006a8a:	bd70      	pop	{r4, r5, r6, pc}
 8006a8c:	20006178 	.word	0x20006178

08006a90 <_malloc_r>:
 8006a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a94:	1ccd      	adds	r5, r1, #3
 8006a96:	f025 0503 	bic.w	r5, r5, #3
 8006a9a:	3508      	adds	r5, #8
 8006a9c:	2d0c      	cmp	r5, #12
 8006a9e:	bf38      	it	cc
 8006aa0:	250c      	movcc	r5, #12
 8006aa2:	2d00      	cmp	r5, #0
 8006aa4:	4607      	mov	r7, r0
 8006aa6:	db01      	blt.n	8006aac <_malloc_r+0x1c>
 8006aa8:	42a9      	cmp	r1, r5
 8006aaa:	d905      	bls.n	8006ab8 <_malloc_r+0x28>
 8006aac:	230c      	movs	r3, #12
 8006aae:	603b      	str	r3, [r7, #0]
 8006ab0:	2600      	movs	r6, #0
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ab8:	4e2e      	ldr	r6, [pc, #184]	; (8006b74 <_malloc_r+0xe4>)
 8006aba:	f000 fa3b 	bl	8006f34 <__malloc_lock>
 8006abe:	6833      	ldr	r3, [r6, #0]
 8006ac0:	461c      	mov	r4, r3
 8006ac2:	bb34      	cbnz	r4, 8006b12 <_malloc_r+0x82>
 8006ac4:	4629      	mov	r1, r5
 8006ac6:	4638      	mov	r0, r7
 8006ac8:	f7ff ffc2 	bl	8006a50 <sbrk_aligned>
 8006acc:	1c43      	adds	r3, r0, #1
 8006ace:	4604      	mov	r4, r0
 8006ad0:	d14d      	bne.n	8006b6e <_malloc_r+0xde>
 8006ad2:	6834      	ldr	r4, [r6, #0]
 8006ad4:	4626      	mov	r6, r4
 8006ad6:	2e00      	cmp	r6, #0
 8006ad8:	d140      	bne.n	8006b5c <_malloc_r+0xcc>
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	4631      	mov	r1, r6
 8006ade:	4638      	mov	r0, r7
 8006ae0:	eb04 0803 	add.w	r8, r4, r3
 8006ae4:	f000 f9aa 	bl	8006e3c <_sbrk_r>
 8006ae8:	4580      	cmp	r8, r0
 8006aea:	d13a      	bne.n	8006b62 <_malloc_r+0xd2>
 8006aec:	6821      	ldr	r1, [r4, #0]
 8006aee:	3503      	adds	r5, #3
 8006af0:	1a6d      	subs	r5, r5, r1
 8006af2:	f025 0503 	bic.w	r5, r5, #3
 8006af6:	3508      	adds	r5, #8
 8006af8:	2d0c      	cmp	r5, #12
 8006afa:	bf38      	it	cc
 8006afc:	250c      	movcc	r5, #12
 8006afe:	4629      	mov	r1, r5
 8006b00:	4638      	mov	r0, r7
 8006b02:	f7ff ffa5 	bl	8006a50 <sbrk_aligned>
 8006b06:	3001      	adds	r0, #1
 8006b08:	d02b      	beq.n	8006b62 <_malloc_r+0xd2>
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	442b      	add	r3, r5
 8006b0e:	6023      	str	r3, [r4, #0]
 8006b10:	e00e      	b.n	8006b30 <_malloc_r+0xa0>
 8006b12:	6822      	ldr	r2, [r4, #0]
 8006b14:	1b52      	subs	r2, r2, r5
 8006b16:	d41e      	bmi.n	8006b56 <_malloc_r+0xc6>
 8006b18:	2a0b      	cmp	r2, #11
 8006b1a:	d916      	bls.n	8006b4a <_malloc_r+0xba>
 8006b1c:	1961      	adds	r1, r4, r5
 8006b1e:	42a3      	cmp	r3, r4
 8006b20:	6025      	str	r5, [r4, #0]
 8006b22:	bf18      	it	ne
 8006b24:	6059      	strne	r1, [r3, #4]
 8006b26:	6863      	ldr	r3, [r4, #4]
 8006b28:	bf08      	it	eq
 8006b2a:	6031      	streq	r1, [r6, #0]
 8006b2c:	5162      	str	r2, [r4, r5]
 8006b2e:	604b      	str	r3, [r1, #4]
 8006b30:	4638      	mov	r0, r7
 8006b32:	f104 060b 	add.w	r6, r4, #11
 8006b36:	f000 fa03 	bl	8006f40 <__malloc_unlock>
 8006b3a:	f026 0607 	bic.w	r6, r6, #7
 8006b3e:	1d23      	adds	r3, r4, #4
 8006b40:	1af2      	subs	r2, r6, r3
 8006b42:	d0b6      	beq.n	8006ab2 <_malloc_r+0x22>
 8006b44:	1b9b      	subs	r3, r3, r6
 8006b46:	50a3      	str	r3, [r4, r2]
 8006b48:	e7b3      	b.n	8006ab2 <_malloc_r+0x22>
 8006b4a:	6862      	ldr	r2, [r4, #4]
 8006b4c:	42a3      	cmp	r3, r4
 8006b4e:	bf0c      	ite	eq
 8006b50:	6032      	streq	r2, [r6, #0]
 8006b52:	605a      	strne	r2, [r3, #4]
 8006b54:	e7ec      	b.n	8006b30 <_malloc_r+0xa0>
 8006b56:	4623      	mov	r3, r4
 8006b58:	6864      	ldr	r4, [r4, #4]
 8006b5a:	e7b2      	b.n	8006ac2 <_malloc_r+0x32>
 8006b5c:	4634      	mov	r4, r6
 8006b5e:	6876      	ldr	r6, [r6, #4]
 8006b60:	e7b9      	b.n	8006ad6 <_malloc_r+0x46>
 8006b62:	230c      	movs	r3, #12
 8006b64:	603b      	str	r3, [r7, #0]
 8006b66:	4638      	mov	r0, r7
 8006b68:	f000 f9ea 	bl	8006f40 <__malloc_unlock>
 8006b6c:	e7a1      	b.n	8006ab2 <_malloc_r+0x22>
 8006b6e:	6025      	str	r5, [r4, #0]
 8006b70:	e7de      	b.n	8006b30 <_malloc_r+0xa0>
 8006b72:	bf00      	nop
 8006b74:	20006174 	.word	0x20006174

08006b78 <__ssputs_r>:
 8006b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b7c:	688e      	ldr	r6, [r1, #8]
 8006b7e:	429e      	cmp	r6, r3
 8006b80:	4682      	mov	sl, r0
 8006b82:	460c      	mov	r4, r1
 8006b84:	4690      	mov	r8, r2
 8006b86:	461f      	mov	r7, r3
 8006b88:	d838      	bhi.n	8006bfc <__ssputs_r+0x84>
 8006b8a:	898a      	ldrh	r2, [r1, #12]
 8006b8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b90:	d032      	beq.n	8006bf8 <__ssputs_r+0x80>
 8006b92:	6825      	ldr	r5, [r4, #0]
 8006b94:	6909      	ldr	r1, [r1, #16]
 8006b96:	eba5 0901 	sub.w	r9, r5, r1
 8006b9a:	6965      	ldr	r5, [r4, #20]
 8006b9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ba0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	444b      	add	r3, r9
 8006ba8:	106d      	asrs	r5, r5, #1
 8006baa:	429d      	cmp	r5, r3
 8006bac:	bf38      	it	cc
 8006bae:	461d      	movcc	r5, r3
 8006bb0:	0553      	lsls	r3, r2, #21
 8006bb2:	d531      	bpl.n	8006c18 <__ssputs_r+0xa0>
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	f7ff ff6b 	bl	8006a90 <_malloc_r>
 8006bba:	4606      	mov	r6, r0
 8006bbc:	b950      	cbnz	r0, 8006bd4 <__ssputs_r+0x5c>
 8006bbe:	230c      	movs	r3, #12
 8006bc0:	f8ca 3000 	str.w	r3, [sl]
 8006bc4:	89a3      	ldrh	r3, [r4, #12]
 8006bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bca:	81a3      	strh	r3, [r4, #12]
 8006bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd4:	6921      	ldr	r1, [r4, #16]
 8006bd6:	464a      	mov	r2, r9
 8006bd8:	f7ff fa1a 	bl	8006010 <memcpy>
 8006bdc:	89a3      	ldrh	r3, [r4, #12]
 8006bde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006be6:	81a3      	strh	r3, [r4, #12]
 8006be8:	6126      	str	r6, [r4, #16]
 8006bea:	6165      	str	r5, [r4, #20]
 8006bec:	444e      	add	r6, r9
 8006bee:	eba5 0509 	sub.w	r5, r5, r9
 8006bf2:	6026      	str	r6, [r4, #0]
 8006bf4:	60a5      	str	r5, [r4, #8]
 8006bf6:	463e      	mov	r6, r7
 8006bf8:	42be      	cmp	r6, r7
 8006bfa:	d900      	bls.n	8006bfe <__ssputs_r+0x86>
 8006bfc:	463e      	mov	r6, r7
 8006bfe:	6820      	ldr	r0, [r4, #0]
 8006c00:	4632      	mov	r2, r6
 8006c02:	4641      	mov	r1, r8
 8006c04:	f000 f97c 	bl	8006f00 <memmove>
 8006c08:	68a3      	ldr	r3, [r4, #8]
 8006c0a:	1b9b      	subs	r3, r3, r6
 8006c0c:	60a3      	str	r3, [r4, #8]
 8006c0e:	6823      	ldr	r3, [r4, #0]
 8006c10:	4433      	add	r3, r6
 8006c12:	6023      	str	r3, [r4, #0]
 8006c14:	2000      	movs	r0, #0
 8006c16:	e7db      	b.n	8006bd0 <__ssputs_r+0x58>
 8006c18:	462a      	mov	r2, r5
 8006c1a:	f000 f997 	bl	8006f4c <_realloc_r>
 8006c1e:	4606      	mov	r6, r0
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d1e1      	bne.n	8006be8 <__ssputs_r+0x70>
 8006c24:	6921      	ldr	r1, [r4, #16]
 8006c26:	4650      	mov	r0, sl
 8006c28:	f7ff fec8 	bl	80069bc <_free_r>
 8006c2c:	e7c7      	b.n	8006bbe <__ssputs_r+0x46>
	...

08006c30 <_svfiprintf_r>:
 8006c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c34:	4698      	mov	r8, r3
 8006c36:	898b      	ldrh	r3, [r1, #12]
 8006c38:	061b      	lsls	r3, r3, #24
 8006c3a:	b09d      	sub	sp, #116	; 0x74
 8006c3c:	4607      	mov	r7, r0
 8006c3e:	460d      	mov	r5, r1
 8006c40:	4614      	mov	r4, r2
 8006c42:	d50e      	bpl.n	8006c62 <_svfiprintf_r+0x32>
 8006c44:	690b      	ldr	r3, [r1, #16]
 8006c46:	b963      	cbnz	r3, 8006c62 <_svfiprintf_r+0x32>
 8006c48:	2140      	movs	r1, #64	; 0x40
 8006c4a:	f7ff ff21 	bl	8006a90 <_malloc_r>
 8006c4e:	6028      	str	r0, [r5, #0]
 8006c50:	6128      	str	r0, [r5, #16]
 8006c52:	b920      	cbnz	r0, 8006c5e <_svfiprintf_r+0x2e>
 8006c54:	230c      	movs	r3, #12
 8006c56:	603b      	str	r3, [r7, #0]
 8006c58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c5c:	e0d1      	b.n	8006e02 <_svfiprintf_r+0x1d2>
 8006c5e:	2340      	movs	r3, #64	; 0x40
 8006c60:	616b      	str	r3, [r5, #20]
 8006c62:	2300      	movs	r3, #0
 8006c64:	9309      	str	r3, [sp, #36]	; 0x24
 8006c66:	2320      	movs	r3, #32
 8006c68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c70:	2330      	movs	r3, #48	; 0x30
 8006c72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006e1c <_svfiprintf_r+0x1ec>
 8006c76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c7a:	f04f 0901 	mov.w	r9, #1
 8006c7e:	4623      	mov	r3, r4
 8006c80:	469a      	mov	sl, r3
 8006c82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c86:	b10a      	cbz	r2, 8006c8c <_svfiprintf_r+0x5c>
 8006c88:	2a25      	cmp	r2, #37	; 0x25
 8006c8a:	d1f9      	bne.n	8006c80 <_svfiprintf_r+0x50>
 8006c8c:	ebba 0b04 	subs.w	fp, sl, r4
 8006c90:	d00b      	beq.n	8006caa <_svfiprintf_r+0x7a>
 8006c92:	465b      	mov	r3, fp
 8006c94:	4622      	mov	r2, r4
 8006c96:	4629      	mov	r1, r5
 8006c98:	4638      	mov	r0, r7
 8006c9a:	f7ff ff6d 	bl	8006b78 <__ssputs_r>
 8006c9e:	3001      	adds	r0, #1
 8006ca0:	f000 80aa 	beq.w	8006df8 <_svfiprintf_r+0x1c8>
 8006ca4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ca6:	445a      	add	r2, fp
 8006ca8:	9209      	str	r2, [sp, #36]	; 0x24
 8006caa:	f89a 3000 	ldrb.w	r3, [sl]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 80a2 	beq.w	8006df8 <_svfiprintf_r+0x1c8>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cbe:	f10a 0a01 	add.w	sl, sl, #1
 8006cc2:	9304      	str	r3, [sp, #16]
 8006cc4:	9307      	str	r3, [sp, #28]
 8006cc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cca:	931a      	str	r3, [sp, #104]	; 0x68
 8006ccc:	4654      	mov	r4, sl
 8006cce:	2205      	movs	r2, #5
 8006cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cd4:	4851      	ldr	r0, [pc, #324]	; (8006e1c <_svfiprintf_r+0x1ec>)
 8006cd6:	f7f9 fa8b 	bl	80001f0 <memchr>
 8006cda:	9a04      	ldr	r2, [sp, #16]
 8006cdc:	b9d8      	cbnz	r0, 8006d16 <_svfiprintf_r+0xe6>
 8006cde:	06d0      	lsls	r0, r2, #27
 8006ce0:	bf44      	itt	mi
 8006ce2:	2320      	movmi	r3, #32
 8006ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ce8:	0711      	lsls	r1, r2, #28
 8006cea:	bf44      	itt	mi
 8006cec:	232b      	movmi	r3, #43	; 0x2b
 8006cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cf2:	f89a 3000 	ldrb.w	r3, [sl]
 8006cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8006cf8:	d015      	beq.n	8006d26 <_svfiprintf_r+0xf6>
 8006cfa:	9a07      	ldr	r2, [sp, #28]
 8006cfc:	4654      	mov	r4, sl
 8006cfe:	2000      	movs	r0, #0
 8006d00:	f04f 0c0a 	mov.w	ip, #10
 8006d04:	4621      	mov	r1, r4
 8006d06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d0a:	3b30      	subs	r3, #48	; 0x30
 8006d0c:	2b09      	cmp	r3, #9
 8006d0e:	d94e      	bls.n	8006dae <_svfiprintf_r+0x17e>
 8006d10:	b1b0      	cbz	r0, 8006d40 <_svfiprintf_r+0x110>
 8006d12:	9207      	str	r2, [sp, #28]
 8006d14:	e014      	b.n	8006d40 <_svfiprintf_r+0x110>
 8006d16:	eba0 0308 	sub.w	r3, r0, r8
 8006d1a:	fa09 f303 	lsl.w	r3, r9, r3
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	9304      	str	r3, [sp, #16]
 8006d22:	46a2      	mov	sl, r4
 8006d24:	e7d2      	b.n	8006ccc <_svfiprintf_r+0x9c>
 8006d26:	9b03      	ldr	r3, [sp, #12]
 8006d28:	1d19      	adds	r1, r3, #4
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	9103      	str	r1, [sp, #12]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	bfbb      	ittet	lt
 8006d32:	425b      	neglt	r3, r3
 8006d34:	f042 0202 	orrlt.w	r2, r2, #2
 8006d38:	9307      	strge	r3, [sp, #28]
 8006d3a:	9307      	strlt	r3, [sp, #28]
 8006d3c:	bfb8      	it	lt
 8006d3e:	9204      	strlt	r2, [sp, #16]
 8006d40:	7823      	ldrb	r3, [r4, #0]
 8006d42:	2b2e      	cmp	r3, #46	; 0x2e
 8006d44:	d10c      	bne.n	8006d60 <_svfiprintf_r+0x130>
 8006d46:	7863      	ldrb	r3, [r4, #1]
 8006d48:	2b2a      	cmp	r3, #42	; 0x2a
 8006d4a:	d135      	bne.n	8006db8 <_svfiprintf_r+0x188>
 8006d4c:	9b03      	ldr	r3, [sp, #12]
 8006d4e:	1d1a      	adds	r2, r3, #4
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	9203      	str	r2, [sp, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	bfb8      	it	lt
 8006d58:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006d5c:	3402      	adds	r4, #2
 8006d5e:	9305      	str	r3, [sp, #20]
 8006d60:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006e20 <_svfiprintf_r+0x1f0>
 8006d64:	7821      	ldrb	r1, [r4, #0]
 8006d66:	2203      	movs	r2, #3
 8006d68:	4650      	mov	r0, sl
 8006d6a:	f7f9 fa41 	bl	80001f0 <memchr>
 8006d6e:	b140      	cbz	r0, 8006d82 <_svfiprintf_r+0x152>
 8006d70:	2340      	movs	r3, #64	; 0x40
 8006d72:	eba0 000a 	sub.w	r0, r0, sl
 8006d76:	fa03 f000 	lsl.w	r0, r3, r0
 8006d7a:	9b04      	ldr	r3, [sp, #16]
 8006d7c:	4303      	orrs	r3, r0
 8006d7e:	3401      	adds	r4, #1
 8006d80:	9304      	str	r3, [sp, #16]
 8006d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d86:	4827      	ldr	r0, [pc, #156]	; (8006e24 <_svfiprintf_r+0x1f4>)
 8006d88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d8c:	2206      	movs	r2, #6
 8006d8e:	f7f9 fa2f 	bl	80001f0 <memchr>
 8006d92:	2800      	cmp	r0, #0
 8006d94:	d038      	beq.n	8006e08 <_svfiprintf_r+0x1d8>
 8006d96:	4b24      	ldr	r3, [pc, #144]	; (8006e28 <_svfiprintf_r+0x1f8>)
 8006d98:	bb1b      	cbnz	r3, 8006de2 <_svfiprintf_r+0x1b2>
 8006d9a:	9b03      	ldr	r3, [sp, #12]
 8006d9c:	3307      	adds	r3, #7
 8006d9e:	f023 0307 	bic.w	r3, r3, #7
 8006da2:	3308      	adds	r3, #8
 8006da4:	9303      	str	r3, [sp, #12]
 8006da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da8:	4433      	add	r3, r6
 8006daa:	9309      	str	r3, [sp, #36]	; 0x24
 8006dac:	e767      	b.n	8006c7e <_svfiprintf_r+0x4e>
 8006dae:	fb0c 3202 	mla	r2, ip, r2, r3
 8006db2:	460c      	mov	r4, r1
 8006db4:	2001      	movs	r0, #1
 8006db6:	e7a5      	b.n	8006d04 <_svfiprintf_r+0xd4>
 8006db8:	2300      	movs	r3, #0
 8006dba:	3401      	adds	r4, #1
 8006dbc:	9305      	str	r3, [sp, #20]
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	f04f 0c0a 	mov.w	ip, #10
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dca:	3a30      	subs	r2, #48	; 0x30
 8006dcc:	2a09      	cmp	r2, #9
 8006dce:	d903      	bls.n	8006dd8 <_svfiprintf_r+0x1a8>
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d0c5      	beq.n	8006d60 <_svfiprintf_r+0x130>
 8006dd4:	9105      	str	r1, [sp, #20]
 8006dd6:	e7c3      	b.n	8006d60 <_svfiprintf_r+0x130>
 8006dd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ddc:	4604      	mov	r4, r0
 8006dde:	2301      	movs	r3, #1
 8006de0:	e7f0      	b.n	8006dc4 <_svfiprintf_r+0x194>
 8006de2:	ab03      	add	r3, sp, #12
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	462a      	mov	r2, r5
 8006de8:	4b10      	ldr	r3, [pc, #64]	; (8006e2c <_svfiprintf_r+0x1fc>)
 8006dea:	a904      	add	r1, sp, #16
 8006dec:	4638      	mov	r0, r7
 8006dee:	f7fc fa93 	bl	8003318 <_printf_float>
 8006df2:	1c42      	adds	r2, r0, #1
 8006df4:	4606      	mov	r6, r0
 8006df6:	d1d6      	bne.n	8006da6 <_svfiprintf_r+0x176>
 8006df8:	89ab      	ldrh	r3, [r5, #12]
 8006dfa:	065b      	lsls	r3, r3, #25
 8006dfc:	f53f af2c 	bmi.w	8006c58 <_svfiprintf_r+0x28>
 8006e00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e02:	b01d      	add	sp, #116	; 0x74
 8006e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e08:	ab03      	add	r3, sp, #12
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	462a      	mov	r2, r5
 8006e0e:	4b07      	ldr	r3, [pc, #28]	; (8006e2c <_svfiprintf_r+0x1fc>)
 8006e10:	a904      	add	r1, sp, #16
 8006e12:	4638      	mov	r0, r7
 8006e14:	f7fc fd18 	bl	8003848 <_printf_i>
 8006e18:	e7eb      	b.n	8006df2 <_svfiprintf_r+0x1c2>
 8006e1a:	bf00      	nop
 8006e1c:	08007fec 	.word	0x08007fec
 8006e20:	08007ff2 	.word	0x08007ff2
 8006e24:	08007ff6 	.word	0x08007ff6
 8006e28:	08003319 	.word	0x08003319
 8006e2c:	08006b79 	.word	0x08006b79

08006e30 <nan>:
 8006e30:	4901      	ldr	r1, [pc, #4]	; (8006e38 <nan+0x8>)
 8006e32:	2000      	movs	r0, #0
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	7ff80000 	.word	0x7ff80000

08006e3c <_sbrk_r>:
 8006e3c:	b538      	push	{r3, r4, r5, lr}
 8006e3e:	4d06      	ldr	r5, [pc, #24]	; (8006e58 <_sbrk_r+0x1c>)
 8006e40:	2300      	movs	r3, #0
 8006e42:	4604      	mov	r4, r0
 8006e44:	4608      	mov	r0, r1
 8006e46:	602b      	str	r3, [r5, #0]
 8006e48:	f000 fe1a 	bl	8007a80 <_sbrk>
 8006e4c:	1c43      	adds	r3, r0, #1
 8006e4e:	d102      	bne.n	8006e56 <_sbrk_r+0x1a>
 8006e50:	682b      	ldr	r3, [r5, #0]
 8006e52:	b103      	cbz	r3, 8006e56 <_sbrk_r+0x1a>
 8006e54:	6023      	str	r3, [r4, #0]
 8006e56:	bd38      	pop	{r3, r4, r5, pc}
 8006e58:	2000617c 	.word	0x2000617c

08006e5c <strncmp>:
 8006e5c:	b510      	push	{r4, lr}
 8006e5e:	4603      	mov	r3, r0
 8006e60:	b172      	cbz	r2, 8006e80 <strncmp+0x24>
 8006e62:	3901      	subs	r1, #1
 8006e64:	1884      	adds	r4, r0, r2
 8006e66:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006e6a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006e6e:	4290      	cmp	r0, r2
 8006e70:	d101      	bne.n	8006e76 <strncmp+0x1a>
 8006e72:	42a3      	cmp	r3, r4
 8006e74:	d101      	bne.n	8006e7a <strncmp+0x1e>
 8006e76:	1a80      	subs	r0, r0, r2
 8006e78:	bd10      	pop	{r4, pc}
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	d1f3      	bne.n	8006e66 <strncmp+0xa>
 8006e7e:	e7fa      	b.n	8006e76 <strncmp+0x1a>
 8006e80:	4610      	mov	r0, r2
 8006e82:	e7f9      	b.n	8006e78 <strncmp+0x1c>

08006e84 <__ascii_wctomb>:
 8006e84:	4603      	mov	r3, r0
 8006e86:	4608      	mov	r0, r1
 8006e88:	b141      	cbz	r1, 8006e9c <__ascii_wctomb+0x18>
 8006e8a:	2aff      	cmp	r2, #255	; 0xff
 8006e8c:	d904      	bls.n	8006e98 <__ascii_wctomb+0x14>
 8006e8e:	228a      	movs	r2, #138	; 0x8a
 8006e90:	601a      	str	r2, [r3, #0]
 8006e92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e96:	4770      	bx	lr
 8006e98:	700a      	strb	r2, [r1, #0]
 8006e9a:	2001      	movs	r0, #1
 8006e9c:	4770      	bx	lr
	...

08006ea0 <__assert_func>:
 8006ea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ea2:	4614      	mov	r4, r2
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	4b09      	ldr	r3, [pc, #36]	; (8006ecc <__assert_func+0x2c>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4605      	mov	r5, r0
 8006eac:	68d8      	ldr	r0, [r3, #12]
 8006eae:	b14c      	cbz	r4, 8006ec4 <__assert_func+0x24>
 8006eb0:	4b07      	ldr	r3, [pc, #28]	; (8006ed0 <__assert_func+0x30>)
 8006eb2:	9100      	str	r1, [sp, #0]
 8006eb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006eb8:	4906      	ldr	r1, [pc, #24]	; (8006ed4 <__assert_func+0x34>)
 8006eba:	462b      	mov	r3, r5
 8006ebc:	f000 f80e 	bl	8006edc <fiprintf>
 8006ec0:	f000 fa8a 	bl	80073d8 <abort>
 8006ec4:	4b04      	ldr	r3, [pc, #16]	; (8006ed8 <__assert_func+0x38>)
 8006ec6:	461c      	mov	r4, r3
 8006ec8:	e7f3      	b.n	8006eb2 <__assert_func+0x12>
 8006eca:	bf00      	nop
 8006ecc:	20000044 	.word	0x20000044
 8006ed0:	08007ffd 	.word	0x08007ffd
 8006ed4:	0800800a 	.word	0x0800800a
 8006ed8:	08008038 	.word	0x08008038

08006edc <fiprintf>:
 8006edc:	b40e      	push	{r1, r2, r3}
 8006ede:	b503      	push	{r0, r1, lr}
 8006ee0:	4601      	mov	r1, r0
 8006ee2:	ab03      	add	r3, sp, #12
 8006ee4:	4805      	ldr	r0, [pc, #20]	; (8006efc <fiprintf+0x20>)
 8006ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eea:	6800      	ldr	r0, [r0, #0]
 8006eec:	9301      	str	r3, [sp, #4]
 8006eee:	f000 f883 	bl	8006ff8 <_vfiprintf_r>
 8006ef2:	b002      	add	sp, #8
 8006ef4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ef8:	b003      	add	sp, #12
 8006efa:	4770      	bx	lr
 8006efc:	20000044 	.word	0x20000044

08006f00 <memmove>:
 8006f00:	4288      	cmp	r0, r1
 8006f02:	b510      	push	{r4, lr}
 8006f04:	eb01 0402 	add.w	r4, r1, r2
 8006f08:	d902      	bls.n	8006f10 <memmove+0x10>
 8006f0a:	4284      	cmp	r4, r0
 8006f0c:	4623      	mov	r3, r4
 8006f0e:	d807      	bhi.n	8006f20 <memmove+0x20>
 8006f10:	1e43      	subs	r3, r0, #1
 8006f12:	42a1      	cmp	r1, r4
 8006f14:	d008      	beq.n	8006f28 <memmove+0x28>
 8006f16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f1e:	e7f8      	b.n	8006f12 <memmove+0x12>
 8006f20:	4402      	add	r2, r0
 8006f22:	4601      	mov	r1, r0
 8006f24:	428a      	cmp	r2, r1
 8006f26:	d100      	bne.n	8006f2a <memmove+0x2a>
 8006f28:	bd10      	pop	{r4, pc}
 8006f2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f32:	e7f7      	b.n	8006f24 <memmove+0x24>

08006f34 <__malloc_lock>:
 8006f34:	4801      	ldr	r0, [pc, #4]	; (8006f3c <__malloc_lock+0x8>)
 8006f36:	f000 bc0b 	b.w	8007750 <__retarget_lock_acquire_recursive>
 8006f3a:	bf00      	nop
 8006f3c:	20006180 	.word	0x20006180

08006f40 <__malloc_unlock>:
 8006f40:	4801      	ldr	r0, [pc, #4]	; (8006f48 <__malloc_unlock+0x8>)
 8006f42:	f000 bc06 	b.w	8007752 <__retarget_lock_release_recursive>
 8006f46:	bf00      	nop
 8006f48:	20006180 	.word	0x20006180

08006f4c <_realloc_r>:
 8006f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f50:	4680      	mov	r8, r0
 8006f52:	4614      	mov	r4, r2
 8006f54:	460e      	mov	r6, r1
 8006f56:	b921      	cbnz	r1, 8006f62 <_realloc_r+0x16>
 8006f58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	f7ff bd97 	b.w	8006a90 <_malloc_r>
 8006f62:	b92a      	cbnz	r2, 8006f70 <_realloc_r+0x24>
 8006f64:	f7ff fd2a 	bl	80069bc <_free_r>
 8006f68:	4625      	mov	r5, r4
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f70:	f000 fc56 	bl	8007820 <_malloc_usable_size_r>
 8006f74:	4284      	cmp	r4, r0
 8006f76:	4607      	mov	r7, r0
 8006f78:	d802      	bhi.n	8006f80 <_realloc_r+0x34>
 8006f7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f7e:	d812      	bhi.n	8006fa6 <_realloc_r+0x5a>
 8006f80:	4621      	mov	r1, r4
 8006f82:	4640      	mov	r0, r8
 8006f84:	f7ff fd84 	bl	8006a90 <_malloc_r>
 8006f88:	4605      	mov	r5, r0
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	d0ed      	beq.n	8006f6a <_realloc_r+0x1e>
 8006f8e:	42bc      	cmp	r4, r7
 8006f90:	4622      	mov	r2, r4
 8006f92:	4631      	mov	r1, r6
 8006f94:	bf28      	it	cs
 8006f96:	463a      	movcs	r2, r7
 8006f98:	f7ff f83a 	bl	8006010 <memcpy>
 8006f9c:	4631      	mov	r1, r6
 8006f9e:	4640      	mov	r0, r8
 8006fa0:	f7ff fd0c 	bl	80069bc <_free_r>
 8006fa4:	e7e1      	b.n	8006f6a <_realloc_r+0x1e>
 8006fa6:	4635      	mov	r5, r6
 8006fa8:	e7df      	b.n	8006f6a <_realloc_r+0x1e>

08006faa <__sfputc_r>:
 8006faa:	6893      	ldr	r3, [r2, #8]
 8006fac:	3b01      	subs	r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	b410      	push	{r4}
 8006fb2:	6093      	str	r3, [r2, #8]
 8006fb4:	da07      	bge.n	8006fc6 <__sfputc_r+0x1c>
 8006fb6:	6994      	ldr	r4, [r2, #24]
 8006fb8:	42a3      	cmp	r3, r4
 8006fba:	db01      	blt.n	8006fc0 <__sfputc_r+0x16>
 8006fbc:	290a      	cmp	r1, #10
 8006fbe:	d102      	bne.n	8006fc6 <__sfputc_r+0x1c>
 8006fc0:	bc10      	pop	{r4}
 8006fc2:	f000 b949 	b.w	8007258 <__swbuf_r>
 8006fc6:	6813      	ldr	r3, [r2, #0]
 8006fc8:	1c58      	adds	r0, r3, #1
 8006fca:	6010      	str	r0, [r2, #0]
 8006fcc:	7019      	strb	r1, [r3, #0]
 8006fce:	4608      	mov	r0, r1
 8006fd0:	bc10      	pop	{r4}
 8006fd2:	4770      	bx	lr

08006fd4 <__sfputs_r>:
 8006fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd6:	4606      	mov	r6, r0
 8006fd8:	460f      	mov	r7, r1
 8006fda:	4614      	mov	r4, r2
 8006fdc:	18d5      	adds	r5, r2, r3
 8006fde:	42ac      	cmp	r4, r5
 8006fe0:	d101      	bne.n	8006fe6 <__sfputs_r+0x12>
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	e007      	b.n	8006ff6 <__sfputs_r+0x22>
 8006fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fea:	463a      	mov	r2, r7
 8006fec:	4630      	mov	r0, r6
 8006fee:	f7ff ffdc 	bl	8006faa <__sfputc_r>
 8006ff2:	1c43      	adds	r3, r0, #1
 8006ff4:	d1f3      	bne.n	8006fde <__sfputs_r+0xa>
 8006ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ff8 <_vfiprintf_r>:
 8006ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	460d      	mov	r5, r1
 8006ffe:	b09d      	sub	sp, #116	; 0x74
 8007000:	4614      	mov	r4, r2
 8007002:	4698      	mov	r8, r3
 8007004:	4606      	mov	r6, r0
 8007006:	b118      	cbz	r0, 8007010 <_vfiprintf_r+0x18>
 8007008:	6983      	ldr	r3, [r0, #24]
 800700a:	b90b      	cbnz	r3, 8007010 <_vfiprintf_r+0x18>
 800700c:	f000 fb02 	bl	8007614 <__sinit>
 8007010:	4b89      	ldr	r3, [pc, #548]	; (8007238 <_vfiprintf_r+0x240>)
 8007012:	429d      	cmp	r5, r3
 8007014:	d11b      	bne.n	800704e <_vfiprintf_r+0x56>
 8007016:	6875      	ldr	r5, [r6, #4]
 8007018:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800701a:	07d9      	lsls	r1, r3, #31
 800701c:	d405      	bmi.n	800702a <_vfiprintf_r+0x32>
 800701e:	89ab      	ldrh	r3, [r5, #12]
 8007020:	059a      	lsls	r2, r3, #22
 8007022:	d402      	bmi.n	800702a <_vfiprintf_r+0x32>
 8007024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007026:	f000 fb93 	bl	8007750 <__retarget_lock_acquire_recursive>
 800702a:	89ab      	ldrh	r3, [r5, #12]
 800702c:	071b      	lsls	r3, r3, #28
 800702e:	d501      	bpl.n	8007034 <_vfiprintf_r+0x3c>
 8007030:	692b      	ldr	r3, [r5, #16]
 8007032:	b9eb      	cbnz	r3, 8007070 <_vfiprintf_r+0x78>
 8007034:	4629      	mov	r1, r5
 8007036:	4630      	mov	r0, r6
 8007038:	f000 f960 	bl	80072fc <__swsetup_r>
 800703c:	b1c0      	cbz	r0, 8007070 <_vfiprintf_r+0x78>
 800703e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007040:	07dc      	lsls	r4, r3, #31
 8007042:	d50e      	bpl.n	8007062 <_vfiprintf_r+0x6a>
 8007044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007048:	b01d      	add	sp, #116	; 0x74
 800704a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800704e:	4b7b      	ldr	r3, [pc, #492]	; (800723c <_vfiprintf_r+0x244>)
 8007050:	429d      	cmp	r5, r3
 8007052:	d101      	bne.n	8007058 <_vfiprintf_r+0x60>
 8007054:	68b5      	ldr	r5, [r6, #8]
 8007056:	e7df      	b.n	8007018 <_vfiprintf_r+0x20>
 8007058:	4b79      	ldr	r3, [pc, #484]	; (8007240 <_vfiprintf_r+0x248>)
 800705a:	429d      	cmp	r5, r3
 800705c:	bf08      	it	eq
 800705e:	68f5      	ldreq	r5, [r6, #12]
 8007060:	e7da      	b.n	8007018 <_vfiprintf_r+0x20>
 8007062:	89ab      	ldrh	r3, [r5, #12]
 8007064:	0598      	lsls	r0, r3, #22
 8007066:	d4ed      	bmi.n	8007044 <_vfiprintf_r+0x4c>
 8007068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800706a:	f000 fb72 	bl	8007752 <__retarget_lock_release_recursive>
 800706e:	e7e9      	b.n	8007044 <_vfiprintf_r+0x4c>
 8007070:	2300      	movs	r3, #0
 8007072:	9309      	str	r3, [sp, #36]	; 0x24
 8007074:	2320      	movs	r3, #32
 8007076:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800707a:	f8cd 800c 	str.w	r8, [sp, #12]
 800707e:	2330      	movs	r3, #48	; 0x30
 8007080:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007244 <_vfiprintf_r+0x24c>
 8007084:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007088:	f04f 0901 	mov.w	r9, #1
 800708c:	4623      	mov	r3, r4
 800708e:	469a      	mov	sl, r3
 8007090:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007094:	b10a      	cbz	r2, 800709a <_vfiprintf_r+0xa2>
 8007096:	2a25      	cmp	r2, #37	; 0x25
 8007098:	d1f9      	bne.n	800708e <_vfiprintf_r+0x96>
 800709a:	ebba 0b04 	subs.w	fp, sl, r4
 800709e:	d00b      	beq.n	80070b8 <_vfiprintf_r+0xc0>
 80070a0:	465b      	mov	r3, fp
 80070a2:	4622      	mov	r2, r4
 80070a4:	4629      	mov	r1, r5
 80070a6:	4630      	mov	r0, r6
 80070a8:	f7ff ff94 	bl	8006fd4 <__sfputs_r>
 80070ac:	3001      	adds	r0, #1
 80070ae:	f000 80aa 	beq.w	8007206 <_vfiprintf_r+0x20e>
 80070b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070b4:	445a      	add	r2, fp
 80070b6:	9209      	str	r2, [sp, #36]	; 0x24
 80070b8:	f89a 3000 	ldrb.w	r3, [sl]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 80a2 	beq.w	8007206 <_vfiprintf_r+0x20e>
 80070c2:	2300      	movs	r3, #0
 80070c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070cc:	f10a 0a01 	add.w	sl, sl, #1
 80070d0:	9304      	str	r3, [sp, #16]
 80070d2:	9307      	str	r3, [sp, #28]
 80070d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070d8:	931a      	str	r3, [sp, #104]	; 0x68
 80070da:	4654      	mov	r4, sl
 80070dc:	2205      	movs	r2, #5
 80070de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070e2:	4858      	ldr	r0, [pc, #352]	; (8007244 <_vfiprintf_r+0x24c>)
 80070e4:	f7f9 f884 	bl	80001f0 <memchr>
 80070e8:	9a04      	ldr	r2, [sp, #16]
 80070ea:	b9d8      	cbnz	r0, 8007124 <_vfiprintf_r+0x12c>
 80070ec:	06d1      	lsls	r1, r2, #27
 80070ee:	bf44      	itt	mi
 80070f0:	2320      	movmi	r3, #32
 80070f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070f6:	0713      	lsls	r3, r2, #28
 80070f8:	bf44      	itt	mi
 80070fa:	232b      	movmi	r3, #43	; 0x2b
 80070fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007100:	f89a 3000 	ldrb.w	r3, [sl]
 8007104:	2b2a      	cmp	r3, #42	; 0x2a
 8007106:	d015      	beq.n	8007134 <_vfiprintf_r+0x13c>
 8007108:	9a07      	ldr	r2, [sp, #28]
 800710a:	4654      	mov	r4, sl
 800710c:	2000      	movs	r0, #0
 800710e:	f04f 0c0a 	mov.w	ip, #10
 8007112:	4621      	mov	r1, r4
 8007114:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007118:	3b30      	subs	r3, #48	; 0x30
 800711a:	2b09      	cmp	r3, #9
 800711c:	d94e      	bls.n	80071bc <_vfiprintf_r+0x1c4>
 800711e:	b1b0      	cbz	r0, 800714e <_vfiprintf_r+0x156>
 8007120:	9207      	str	r2, [sp, #28]
 8007122:	e014      	b.n	800714e <_vfiprintf_r+0x156>
 8007124:	eba0 0308 	sub.w	r3, r0, r8
 8007128:	fa09 f303 	lsl.w	r3, r9, r3
 800712c:	4313      	orrs	r3, r2
 800712e:	9304      	str	r3, [sp, #16]
 8007130:	46a2      	mov	sl, r4
 8007132:	e7d2      	b.n	80070da <_vfiprintf_r+0xe2>
 8007134:	9b03      	ldr	r3, [sp, #12]
 8007136:	1d19      	adds	r1, r3, #4
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	9103      	str	r1, [sp, #12]
 800713c:	2b00      	cmp	r3, #0
 800713e:	bfbb      	ittet	lt
 8007140:	425b      	neglt	r3, r3
 8007142:	f042 0202 	orrlt.w	r2, r2, #2
 8007146:	9307      	strge	r3, [sp, #28]
 8007148:	9307      	strlt	r3, [sp, #28]
 800714a:	bfb8      	it	lt
 800714c:	9204      	strlt	r2, [sp, #16]
 800714e:	7823      	ldrb	r3, [r4, #0]
 8007150:	2b2e      	cmp	r3, #46	; 0x2e
 8007152:	d10c      	bne.n	800716e <_vfiprintf_r+0x176>
 8007154:	7863      	ldrb	r3, [r4, #1]
 8007156:	2b2a      	cmp	r3, #42	; 0x2a
 8007158:	d135      	bne.n	80071c6 <_vfiprintf_r+0x1ce>
 800715a:	9b03      	ldr	r3, [sp, #12]
 800715c:	1d1a      	adds	r2, r3, #4
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	9203      	str	r2, [sp, #12]
 8007162:	2b00      	cmp	r3, #0
 8007164:	bfb8      	it	lt
 8007166:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800716a:	3402      	adds	r4, #2
 800716c:	9305      	str	r3, [sp, #20]
 800716e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007248 <_vfiprintf_r+0x250>
 8007172:	7821      	ldrb	r1, [r4, #0]
 8007174:	2203      	movs	r2, #3
 8007176:	4650      	mov	r0, sl
 8007178:	f7f9 f83a 	bl	80001f0 <memchr>
 800717c:	b140      	cbz	r0, 8007190 <_vfiprintf_r+0x198>
 800717e:	2340      	movs	r3, #64	; 0x40
 8007180:	eba0 000a 	sub.w	r0, r0, sl
 8007184:	fa03 f000 	lsl.w	r0, r3, r0
 8007188:	9b04      	ldr	r3, [sp, #16]
 800718a:	4303      	orrs	r3, r0
 800718c:	3401      	adds	r4, #1
 800718e:	9304      	str	r3, [sp, #16]
 8007190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007194:	482d      	ldr	r0, [pc, #180]	; (800724c <_vfiprintf_r+0x254>)
 8007196:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800719a:	2206      	movs	r2, #6
 800719c:	f7f9 f828 	bl	80001f0 <memchr>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	d03f      	beq.n	8007224 <_vfiprintf_r+0x22c>
 80071a4:	4b2a      	ldr	r3, [pc, #168]	; (8007250 <_vfiprintf_r+0x258>)
 80071a6:	bb1b      	cbnz	r3, 80071f0 <_vfiprintf_r+0x1f8>
 80071a8:	9b03      	ldr	r3, [sp, #12]
 80071aa:	3307      	adds	r3, #7
 80071ac:	f023 0307 	bic.w	r3, r3, #7
 80071b0:	3308      	adds	r3, #8
 80071b2:	9303      	str	r3, [sp, #12]
 80071b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071b6:	443b      	add	r3, r7
 80071b8:	9309      	str	r3, [sp, #36]	; 0x24
 80071ba:	e767      	b.n	800708c <_vfiprintf_r+0x94>
 80071bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80071c0:	460c      	mov	r4, r1
 80071c2:	2001      	movs	r0, #1
 80071c4:	e7a5      	b.n	8007112 <_vfiprintf_r+0x11a>
 80071c6:	2300      	movs	r3, #0
 80071c8:	3401      	adds	r4, #1
 80071ca:	9305      	str	r3, [sp, #20]
 80071cc:	4619      	mov	r1, r3
 80071ce:	f04f 0c0a 	mov.w	ip, #10
 80071d2:	4620      	mov	r0, r4
 80071d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071d8:	3a30      	subs	r2, #48	; 0x30
 80071da:	2a09      	cmp	r2, #9
 80071dc:	d903      	bls.n	80071e6 <_vfiprintf_r+0x1ee>
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d0c5      	beq.n	800716e <_vfiprintf_r+0x176>
 80071e2:	9105      	str	r1, [sp, #20]
 80071e4:	e7c3      	b.n	800716e <_vfiprintf_r+0x176>
 80071e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80071ea:	4604      	mov	r4, r0
 80071ec:	2301      	movs	r3, #1
 80071ee:	e7f0      	b.n	80071d2 <_vfiprintf_r+0x1da>
 80071f0:	ab03      	add	r3, sp, #12
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	462a      	mov	r2, r5
 80071f6:	4b17      	ldr	r3, [pc, #92]	; (8007254 <_vfiprintf_r+0x25c>)
 80071f8:	a904      	add	r1, sp, #16
 80071fa:	4630      	mov	r0, r6
 80071fc:	f7fc f88c 	bl	8003318 <_printf_float>
 8007200:	4607      	mov	r7, r0
 8007202:	1c78      	adds	r0, r7, #1
 8007204:	d1d6      	bne.n	80071b4 <_vfiprintf_r+0x1bc>
 8007206:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007208:	07d9      	lsls	r1, r3, #31
 800720a:	d405      	bmi.n	8007218 <_vfiprintf_r+0x220>
 800720c:	89ab      	ldrh	r3, [r5, #12]
 800720e:	059a      	lsls	r2, r3, #22
 8007210:	d402      	bmi.n	8007218 <_vfiprintf_r+0x220>
 8007212:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007214:	f000 fa9d 	bl	8007752 <__retarget_lock_release_recursive>
 8007218:	89ab      	ldrh	r3, [r5, #12]
 800721a:	065b      	lsls	r3, r3, #25
 800721c:	f53f af12 	bmi.w	8007044 <_vfiprintf_r+0x4c>
 8007220:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007222:	e711      	b.n	8007048 <_vfiprintf_r+0x50>
 8007224:	ab03      	add	r3, sp, #12
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	462a      	mov	r2, r5
 800722a:	4b0a      	ldr	r3, [pc, #40]	; (8007254 <_vfiprintf_r+0x25c>)
 800722c:	a904      	add	r1, sp, #16
 800722e:	4630      	mov	r0, r6
 8007230:	f7fc fb0a 	bl	8003848 <_printf_i>
 8007234:	e7e4      	b.n	8007200 <_vfiprintf_r+0x208>
 8007236:	bf00      	nop
 8007238:	0800805c 	.word	0x0800805c
 800723c:	0800807c 	.word	0x0800807c
 8007240:	0800803c 	.word	0x0800803c
 8007244:	08007fec 	.word	0x08007fec
 8007248:	08007ff2 	.word	0x08007ff2
 800724c:	08007ff6 	.word	0x08007ff6
 8007250:	08003319 	.word	0x08003319
 8007254:	08006fd5 	.word	0x08006fd5

08007258 <__swbuf_r>:
 8007258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725a:	460e      	mov	r6, r1
 800725c:	4614      	mov	r4, r2
 800725e:	4605      	mov	r5, r0
 8007260:	b118      	cbz	r0, 800726a <__swbuf_r+0x12>
 8007262:	6983      	ldr	r3, [r0, #24]
 8007264:	b90b      	cbnz	r3, 800726a <__swbuf_r+0x12>
 8007266:	f000 f9d5 	bl	8007614 <__sinit>
 800726a:	4b21      	ldr	r3, [pc, #132]	; (80072f0 <__swbuf_r+0x98>)
 800726c:	429c      	cmp	r4, r3
 800726e:	d12b      	bne.n	80072c8 <__swbuf_r+0x70>
 8007270:	686c      	ldr	r4, [r5, #4]
 8007272:	69a3      	ldr	r3, [r4, #24]
 8007274:	60a3      	str	r3, [r4, #8]
 8007276:	89a3      	ldrh	r3, [r4, #12]
 8007278:	071a      	lsls	r2, r3, #28
 800727a:	d52f      	bpl.n	80072dc <__swbuf_r+0x84>
 800727c:	6923      	ldr	r3, [r4, #16]
 800727e:	b36b      	cbz	r3, 80072dc <__swbuf_r+0x84>
 8007280:	6923      	ldr	r3, [r4, #16]
 8007282:	6820      	ldr	r0, [r4, #0]
 8007284:	1ac0      	subs	r0, r0, r3
 8007286:	6963      	ldr	r3, [r4, #20]
 8007288:	b2f6      	uxtb	r6, r6
 800728a:	4283      	cmp	r3, r0
 800728c:	4637      	mov	r7, r6
 800728e:	dc04      	bgt.n	800729a <__swbuf_r+0x42>
 8007290:	4621      	mov	r1, r4
 8007292:	4628      	mov	r0, r5
 8007294:	f000 f92a 	bl	80074ec <_fflush_r>
 8007298:	bb30      	cbnz	r0, 80072e8 <__swbuf_r+0x90>
 800729a:	68a3      	ldr	r3, [r4, #8]
 800729c:	3b01      	subs	r3, #1
 800729e:	60a3      	str	r3, [r4, #8]
 80072a0:	6823      	ldr	r3, [r4, #0]
 80072a2:	1c5a      	adds	r2, r3, #1
 80072a4:	6022      	str	r2, [r4, #0]
 80072a6:	701e      	strb	r6, [r3, #0]
 80072a8:	6963      	ldr	r3, [r4, #20]
 80072aa:	3001      	adds	r0, #1
 80072ac:	4283      	cmp	r3, r0
 80072ae:	d004      	beq.n	80072ba <__swbuf_r+0x62>
 80072b0:	89a3      	ldrh	r3, [r4, #12]
 80072b2:	07db      	lsls	r3, r3, #31
 80072b4:	d506      	bpl.n	80072c4 <__swbuf_r+0x6c>
 80072b6:	2e0a      	cmp	r6, #10
 80072b8:	d104      	bne.n	80072c4 <__swbuf_r+0x6c>
 80072ba:	4621      	mov	r1, r4
 80072bc:	4628      	mov	r0, r5
 80072be:	f000 f915 	bl	80074ec <_fflush_r>
 80072c2:	b988      	cbnz	r0, 80072e8 <__swbuf_r+0x90>
 80072c4:	4638      	mov	r0, r7
 80072c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072c8:	4b0a      	ldr	r3, [pc, #40]	; (80072f4 <__swbuf_r+0x9c>)
 80072ca:	429c      	cmp	r4, r3
 80072cc:	d101      	bne.n	80072d2 <__swbuf_r+0x7a>
 80072ce:	68ac      	ldr	r4, [r5, #8]
 80072d0:	e7cf      	b.n	8007272 <__swbuf_r+0x1a>
 80072d2:	4b09      	ldr	r3, [pc, #36]	; (80072f8 <__swbuf_r+0xa0>)
 80072d4:	429c      	cmp	r4, r3
 80072d6:	bf08      	it	eq
 80072d8:	68ec      	ldreq	r4, [r5, #12]
 80072da:	e7ca      	b.n	8007272 <__swbuf_r+0x1a>
 80072dc:	4621      	mov	r1, r4
 80072de:	4628      	mov	r0, r5
 80072e0:	f000 f80c 	bl	80072fc <__swsetup_r>
 80072e4:	2800      	cmp	r0, #0
 80072e6:	d0cb      	beq.n	8007280 <__swbuf_r+0x28>
 80072e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80072ec:	e7ea      	b.n	80072c4 <__swbuf_r+0x6c>
 80072ee:	bf00      	nop
 80072f0:	0800805c 	.word	0x0800805c
 80072f4:	0800807c 	.word	0x0800807c
 80072f8:	0800803c 	.word	0x0800803c

080072fc <__swsetup_r>:
 80072fc:	4b32      	ldr	r3, [pc, #200]	; (80073c8 <__swsetup_r+0xcc>)
 80072fe:	b570      	push	{r4, r5, r6, lr}
 8007300:	681d      	ldr	r5, [r3, #0]
 8007302:	4606      	mov	r6, r0
 8007304:	460c      	mov	r4, r1
 8007306:	b125      	cbz	r5, 8007312 <__swsetup_r+0x16>
 8007308:	69ab      	ldr	r3, [r5, #24]
 800730a:	b913      	cbnz	r3, 8007312 <__swsetup_r+0x16>
 800730c:	4628      	mov	r0, r5
 800730e:	f000 f981 	bl	8007614 <__sinit>
 8007312:	4b2e      	ldr	r3, [pc, #184]	; (80073cc <__swsetup_r+0xd0>)
 8007314:	429c      	cmp	r4, r3
 8007316:	d10f      	bne.n	8007338 <__swsetup_r+0x3c>
 8007318:	686c      	ldr	r4, [r5, #4]
 800731a:	89a3      	ldrh	r3, [r4, #12]
 800731c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007320:	0719      	lsls	r1, r3, #28
 8007322:	d42c      	bmi.n	800737e <__swsetup_r+0x82>
 8007324:	06dd      	lsls	r5, r3, #27
 8007326:	d411      	bmi.n	800734c <__swsetup_r+0x50>
 8007328:	2309      	movs	r3, #9
 800732a:	6033      	str	r3, [r6, #0]
 800732c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007330:	81a3      	strh	r3, [r4, #12]
 8007332:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007336:	e03e      	b.n	80073b6 <__swsetup_r+0xba>
 8007338:	4b25      	ldr	r3, [pc, #148]	; (80073d0 <__swsetup_r+0xd4>)
 800733a:	429c      	cmp	r4, r3
 800733c:	d101      	bne.n	8007342 <__swsetup_r+0x46>
 800733e:	68ac      	ldr	r4, [r5, #8]
 8007340:	e7eb      	b.n	800731a <__swsetup_r+0x1e>
 8007342:	4b24      	ldr	r3, [pc, #144]	; (80073d4 <__swsetup_r+0xd8>)
 8007344:	429c      	cmp	r4, r3
 8007346:	bf08      	it	eq
 8007348:	68ec      	ldreq	r4, [r5, #12]
 800734a:	e7e6      	b.n	800731a <__swsetup_r+0x1e>
 800734c:	0758      	lsls	r0, r3, #29
 800734e:	d512      	bpl.n	8007376 <__swsetup_r+0x7a>
 8007350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007352:	b141      	cbz	r1, 8007366 <__swsetup_r+0x6a>
 8007354:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007358:	4299      	cmp	r1, r3
 800735a:	d002      	beq.n	8007362 <__swsetup_r+0x66>
 800735c:	4630      	mov	r0, r6
 800735e:	f7ff fb2d 	bl	80069bc <_free_r>
 8007362:	2300      	movs	r3, #0
 8007364:	6363      	str	r3, [r4, #52]	; 0x34
 8007366:	89a3      	ldrh	r3, [r4, #12]
 8007368:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800736c:	81a3      	strh	r3, [r4, #12]
 800736e:	2300      	movs	r3, #0
 8007370:	6063      	str	r3, [r4, #4]
 8007372:	6923      	ldr	r3, [r4, #16]
 8007374:	6023      	str	r3, [r4, #0]
 8007376:	89a3      	ldrh	r3, [r4, #12]
 8007378:	f043 0308 	orr.w	r3, r3, #8
 800737c:	81a3      	strh	r3, [r4, #12]
 800737e:	6923      	ldr	r3, [r4, #16]
 8007380:	b94b      	cbnz	r3, 8007396 <__swsetup_r+0x9a>
 8007382:	89a3      	ldrh	r3, [r4, #12]
 8007384:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800738c:	d003      	beq.n	8007396 <__swsetup_r+0x9a>
 800738e:	4621      	mov	r1, r4
 8007390:	4630      	mov	r0, r6
 8007392:	f000 fa05 	bl	80077a0 <__smakebuf_r>
 8007396:	89a0      	ldrh	r0, [r4, #12]
 8007398:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800739c:	f010 0301 	ands.w	r3, r0, #1
 80073a0:	d00a      	beq.n	80073b8 <__swsetup_r+0xbc>
 80073a2:	2300      	movs	r3, #0
 80073a4:	60a3      	str	r3, [r4, #8]
 80073a6:	6963      	ldr	r3, [r4, #20]
 80073a8:	425b      	negs	r3, r3
 80073aa:	61a3      	str	r3, [r4, #24]
 80073ac:	6923      	ldr	r3, [r4, #16]
 80073ae:	b943      	cbnz	r3, 80073c2 <__swsetup_r+0xc6>
 80073b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073b4:	d1ba      	bne.n	800732c <__swsetup_r+0x30>
 80073b6:	bd70      	pop	{r4, r5, r6, pc}
 80073b8:	0781      	lsls	r1, r0, #30
 80073ba:	bf58      	it	pl
 80073bc:	6963      	ldrpl	r3, [r4, #20]
 80073be:	60a3      	str	r3, [r4, #8]
 80073c0:	e7f4      	b.n	80073ac <__swsetup_r+0xb0>
 80073c2:	2000      	movs	r0, #0
 80073c4:	e7f7      	b.n	80073b6 <__swsetup_r+0xba>
 80073c6:	bf00      	nop
 80073c8:	20000044 	.word	0x20000044
 80073cc:	0800805c 	.word	0x0800805c
 80073d0:	0800807c 	.word	0x0800807c
 80073d4:	0800803c 	.word	0x0800803c

080073d8 <abort>:
 80073d8:	b508      	push	{r3, lr}
 80073da:	2006      	movs	r0, #6
 80073dc:	f000 fa50 	bl	8007880 <raise>
 80073e0:	2001      	movs	r0, #1
 80073e2:	f000 fb63 	bl	8007aac <_exit>
	...

080073e8 <__sflush_r>:
 80073e8:	898a      	ldrh	r2, [r1, #12]
 80073ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ec:	4605      	mov	r5, r0
 80073ee:	0710      	lsls	r0, r2, #28
 80073f0:	460c      	mov	r4, r1
 80073f2:	d457      	bmi.n	80074a4 <__sflush_r+0xbc>
 80073f4:	684b      	ldr	r3, [r1, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	dc04      	bgt.n	8007404 <__sflush_r+0x1c>
 80073fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	dc01      	bgt.n	8007404 <__sflush_r+0x1c>
 8007400:	2000      	movs	r0, #0
 8007402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007404:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007406:	2e00      	cmp	r6, #0
 8007408:	d0fa      	beq.n	8007400 <__sflush_r+0x18>
 800740a:	2300      	movs	r3, #0
 800740c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007410:	682f      	ldr	r7, [r5, #0]
 8007412:	602b      	str	r3, [r5, #0]
 8007414:	d032      	beq.n	800747c <__sflush_r+0x94>
 8007416:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007418:	89a3      	ldrh	r3, [r4, #12]
 800741a:	075a      	lsls	r2, r3, #29
 800741c:	d505      	bpl.n	800742a <__sflush_r+0x42>
 800741e:	6863      	ldr	r3, [r4, #4]
 8007420:	1ac0      	subs	r0, r0, r3
 8007422:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007424:	b10b      	cbz	r3, 800742a <__sflush_r+0x42>
 8007426:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007428:	1ac0      	subs	r0, r0, r3
 800742a:	2300      	movs	r3, #0
 800742c:	4602      	mov	r2, r0
 800742e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007430:	6a21      	ldr	r1, [r4, #32]
 8007432:	4628      	mov	r0, r5
 8007434:	47b0      	blx	r6
 8007436:	1c43      	adds	r3, r0, #1
 8007438:	89a3      	ldrh	r3, [r4, #12]
 800743a:	d106      	bne.n	800744a <__sflush_r+0x62>
 800743c:	6829      	ldr	r1, [r5, #0]
 800743e:	291d      	cmp	r1, #29
 8007440:	d82c      	bhi.n	800749c <__sflush_r+0xb4>
 8007442:	4a29      	ldr	r2, [pc, #164]	; (80074e8 <__sflush_r+0x100>)
 8007444:	40ca      	lsrs	r2, r1
 8007446:	07d6      	lsls	r6, r2, #31
 8007448:	d528      	bpl.n	800749c <__sflush_r+0xb4>
 800744a:	2200      	movs	r2, #0
 800744c:	6062      	str	r2, [r4, #4]
 800744e:	04d9      	lsls	r1, r3, #19
 8007450:	6922      	ldr	r2, [r4, #16]
 8007452:	6022      	str	r2, [r4, #0]
 8007454:	d504      	bpl.n	8007460 <__sflush_r+0x78>
 8007456:	1c42      	adds	r2, r0, #1
 8007458:	d101      	bne.n	800745e <__sflush_r+0x76>
 800745a:	682b      	ldr	r3, [r5, #0]
 800745c:	b903      	cbnz	r3, 8007460 <__sflush_r+0x78>
 800745e:	6560      	str	r0, [r4, #84]	; 0x54
 8007460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007462:	602f      	str	r7, [r5, #0]
 8007464:	2900      	cmp	r1, #0
 8007466:	d0cb      	beq.n	8007400 <__sflush_r+0x18>
 8007468:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800746c:	4299      	cmp	r1, r3
 800746e:	d002      	beq.n	8007476 <__sflush_r+0x8e>
 8007470:	4628      	mov	r0, r5
 8007472:	f7ff faa3 	bl	80069bc <_free_r>
 8007476:	2000      	movs	r0, #0
 8007478:	6360      	str	r0, [r4, #52]	; 0x34
 800747a:	e7c2      	b.n	8007402 <__sflush_r+0x1a>
 800747c:	6a21      	ldr	r1, [r4, #32]
 800747e:	2301      	movs	r3, #1
 8007480:	4628      	mov	r0, r5
 8007482:	47b0      	blx	r6
 8007484:	1c41      	adds	r1, r0, #1
 8007486:	d1c7      	bne.n	8007418 <__sflush_r+0x30>
 8007488:	682b      	ldr	r3, [r5, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d0c4      	beq.n	8007418 <__sflush_r+0x30>
 800748e:	2b1d      	cmp	r3, #29
 8007490:	d001      	beq.n	8007496 <__sflush_r+0xae>
 8007492:	2b16      	cmp	r3, #22
 8007494:	d101      	bne.n	800749a <__sflush_r+0xb2>
 8007496:	602f      	str	r7, [r5, #0]
 8007498:	e7b2      	b.n	8007400 <__sflush_r+0x18>
 800749a:	89a3      	ldrh	r3, [r4, #12]
 800749c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074a0:	81a3      	strh	r3, [r4, #12]
 80074a2:	e7ae      	b.n	8007402 <__sflush_r+0x1a>
 80074a4:	690f      	ldr	r7, [r1, #16]
 80074a6:	2f00      	cmp	r7, #0
 80074a8:	d0aa      	beq.n	8007400 <__sflush_r+0x18>
 80074aa:	0793      	lsls	r3, r2, #30
 80074ac:	680e      	ldr	r6, [r1, #0]
 80074ae:	bf08      	it	eq
 80074b0:	694b      	ldreq	r3, [r1, #20]
 80074b2:	600f      	str	r7, [r1, #0]
 80074b4:	bf18      	it	ne
 80074b6:	2300      	movne	r3, #0
 80074b8:	1bf6      	subs	r6, r6, r7
 80074ba:	608b      	str	r3, [r1, #8]
 80074bc:	2e00      	cmp	r6, #0
 80074be:	dd9f      	ble.n	8007400 <__sflush_r+0x18>
 80074c0:	6a21      	ldr	r1, [r4, #32]
 80074c2:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80074c6:	4633      	mov	r3, r6
 80074c8:	463a      	mov	r2, r7
 80074ca:	4628      	mov	r0, r5
 80074cc:	47e0      	blx	ip
 80074ce:	2800      	cmp	r0, #0
 80074d0:	dc06      	bgt.n	80074e0 <__sflush_r+0xf8>
 80074d2:	89a3      	ldrh	r3, [r4, #12]
 80074d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074d8:	81a3      	strh	r3, [r4, #12]
 80074da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074de:	e790      	b.n	8007402 <__sflush_r+0x1a>
 80074e0:	4407      	add	r7, r0
 80074e2:	1a36      	subs	r6, r6, r0
 80074e4:	e7ea      	b.n	80074bc <__sflush_r+0xd4>
 80074e6:	bf00      	nop
 80074e8:	20400001 	.word	0x20400001

080074ec <_fflush_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	690b      	ldr	r3, [r1, #16]
 80074f0:	4605      	mov	r5, r0
 80074f2:	460c      	mov	r4, r1
 80074f4:	b913      	cbnz	r3, 80074fc <_fflush_r+0x10>
 80074f6:	2500      	movs	r5, #0
 80074f8:	4628      	mov	r0, r5
 80074fa:	bd38      	pop	{r3, r4, r5, pc}
 80074fc:	b118      	cbz	r0, 8007506 <_fflush_r+0x1a>
 80074fe:	6983      	ldr	r3, [r0, #24]
 8007500:	b90b      	cbnz	r3, 8007506 <_fflush_r+0x1a>
 8007502:	f000 f887 	bl	8007614 <__sinit>
 8007506:	4b14      	ldr	r3, [pc, #80]	; (8007558 <_fflush_r+0x6c>)
 8007508:	429c      	cmp	r4, r3
 800750a:	d11b      	bne.n	8007544 <_fflush_r+0x58>
 800750c:	686c      	ldr	r4, [r5, #4]
 800750e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d0ef      	beq.n	80074f6 <_fflush_r+0xa>
 8007516:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007518:	07d0      	lsls	r0, r2, #31
 800751a:	d404      	bmi.n	8007526 <_fflush_r+0x3a>
 800751c:	0599      	lsls	r1, r3, #22
 800751e:	d402      	bmi.n	8007526 <_fflush_r+0x3a>
 8007520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007522:	f000 f915 	bl	8007750 <__retarget_lock_acquire_recursive>
 8007526:	4628      	mov	r0, r5
 8007528:	4621      	mov	r1, r4
 800752a:	f7ff ff5d 	bl	80073e8 <__sflush_r>
 800752e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007530:	07da      	lsls	r2, r3, #31
 8007532:	4605      	mov	r5, r0
 8007534:	d4e0      	bmi.n	80074f8 <_fflush_r+0xc>
 8007536:	89a3      	ldrh	r3, [r4, #12]
 8007538:	059b      	lsls	r3, r3, #22
 800753a:	d4dd      	bmi.n	80074f8 <_fflush_r+0xc>
 800753c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800753e:	f000 f908 	bl	8007752 <__retarget_lock_release_recursive>
 8007542:	e7d9      	b.n	80074f8 <_fflush_r+0xc>
 8007544:	4b05      	ldr	r3, [pc, #20]	; (800755c <_fflush_r+0x70>)
 8007546:	429c      	cmp	r4, r3
 8007548:	d101      	bne.n	800754e <_fflush_r+0x62>
 800754a:	68ac      	ldr	r4, [r5, #8]
 800754c:	e7df      	b.n	800750e <_fflush_r+0x22>
 800754e:	4b04      	ldr	r3, [pc, #16]	; (8007560 <_fflush_r+0x74>)
 8007550:	429c      	cmp	r4, r3
 8007552:	bf08      	it	eq
 8007554:	68ec      	ldreq	r4, [r5, #12]
 8007556:	e7da      	b.n	800750e <_fflush_r+0x22>
 8007558:	0800805c 	.word	0x0800805c
 800755c:	0800807c 	.word	0x0800807c
 8007560:	0800803c 	.word	0x0800803c

08007564 <std>:
 8007564:	2300      	movs	r3, #0
 8007566:	b510      	push	{r4, lr}
 8007568:	4604      	mov	r4, r0
 800756a:	e9c0 3300 	strd	r3, r3, [r0]
 800756e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007572:	6083      	str	r3, [r0, #8]
 8007574:	8181      	strh	r1, [r0, #12]
 8007576:	6643      	str	r3, [r0, #100]	; 0x64
 8007578:	81c2      	strh	r2, [r0, #14]
 800757a:	6183      	str	r3, [r0, #24]
 800757c:	4619      	mov	r1, r3
 800757e:	2208      	movs	r2, #8
 8007580:	305c      	adds	r0, #92	; 0x5c
 8007582:	f7fb fe23 	bl	80031cc <memset>
 8007586:	4b05      	ldr	r3, [pc, #20]	; (800759c <std+0x38>)
 8007588:	6263      	str	r3, [r4, #36]	; 0x24
 800758a:	4b05      	ldr	r3, [pc, #20]	; (80075a0 <std+0x3c>)
 800758c:	62a3      	str	r3, [r4, #40]	; 0x28
 800758e:	4b05      	ldr	r3, [pc, #20]	; (80075a4 <std+0x40>)
 8007590:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007592:	4b05      	ldr	r3, [pc, #20]	; (80075a8 <std+0x44>)
 8007594:	6224      	str	r4, [r4, #32]
 8007596:	6323      	str	r3, [r4, #48]	; 0x30
 8007598:	bd10      	pop	{r4, pc}
 800759a:	bf00      	nop
 800759c:	080078b9 	.word	0x080078b9
 80075a0:	080078db 	.word	0x080078db
 80075a4:	08007913 	.word	0x08007913
 80075a8:	08007937 	.word	0x08007937

080075ac <_cleanup_r>:
 80075ac:	4901      	ldr	r1, [pc, #4]	; (80075b4 <_cleanup_r+0x8>)
 80075ae:	f000 b8af 	b.w	8007710 <_fwalk_reent>
 80075b2:	bf00      	nop
 80075b4:	080074ed 	.word	0x080074ed

080075b8 <__sfmoreglue>:
 80075b8:	b570      	push	{r4, r5, r6, lr}
 80075ba:	2268      	movs	r2, #104	; 0x68
 80075bc:	1e4d      	subs	r5, r1, #1
 80075be:	4355      	muls	r5, r2
 80075c0:	460e      	mov	r6, r1
 80075c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80075c6:	f7ff fa63 	bl	8006a90 <_malloc_r>
 80075ca:	4604      	mov	r4, r0
 80075cc:	b140      	cbz	r0, 80075e0 <__sfmoreglue+0x28>
 80075ce:	2100      	movs	r1, #0
 80075d0:	e9c0 1600 	strd	r1, r6, [r0]
 80075d4:	300c      	adds	r0, #12
 80075d6:	60a0      	str	r0, [r4, #8]
 80075d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80075dc:	f7fb fdf6 	bl	80031cc <memset>
 80075e0:	4620      	mov	r0, r4
 80075e2:	bd70      	pop	{r4, r5, r6, pc}

080075e4 <__sfp_lock_acquire>:
 80075e4:	4801      	ldr	r0, [pc, #4]	; (80075ec <__sfp_lock_acquire+0x8>)
 80075e6:	f000 b8b3 	b.w	8007750 <__retarget_lock_acquire_recursive>
 80075ea:	bf00      	nop
 80075ec:	20006181 	.word	0x20006181

080075f0 <__sfp_lock_release>:
 80075f0:	4801      	ldr	r0, [pc, #4]	; (80075f8 <__sfp_lock_release+0x8>)
 80075f2:	f000 b8ae 	b.w	8007752 <__retarget_lock_release_recursive>
 80075f6:	bf00      	nop
 80075f8:	20006181 	.word	0x20006181

080075fc <__sinit_lock_acquire>:
 80075fc:	4801      	ldr	r0, [pc, #4]	; (8007604 <__sinit_lock_acquire+0x8>)
 80075fe:	f000 b8a7 	b.w	8007750 <__retarget_lock_acquire_recursive>
 8007602:	bf00      	nop
 8007604:	20006182 	.word	0x20006182

08007608 <__sinit_lock_release>:
 8007608:	4801      	ldr	r0, [pc, #4]	; (8007610 <__sinit_lock_release+0x8>)
 800760a:	f000 b8a2 	b.w	8007752 <__retarget_lock_release_recursive>
 800760e:	bf00      	nop
 8007610:	20006182 	.word	0x20006182

08007614 <__sinit>:
 8007614:	b510      	push	{r4, lr}
 8007616:	4604      	mov	r4, r0
 8007618:	f7ff fff0 	bl	80075fc <__sinit_lock_acquire>
 800761c:	69a3      	ldr	r3, [r4, #24]
 800761e:	b11b      	cbz	r3, 8007628 <__sinit+0x14>
 8007620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007624:	f7ff bff0 	b.w	8007608 <__sinit_lock_release>
 8007628:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800762c:	6523      	str	r3, [r4, #80]	; 0x50
 800762e:	4b13      	ldr	r3, [pc, #76]	; (800767c <__sinit+0x68>)
 8007630:	4a13      	ldr	r2, [pc, #76]	; (8007680 <__sinit+0x6c>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	62a2      	str	r2, [r4, #40]	; 0x28
 8007636:	42a3      	cmp	r3, r4
 8007638:	bf04      	itt	eq
 800763a:	2301      	moveq	r3, #1
 800763c:	61a3      	streq	r3, [r4, #24]
 800763e:	4620      	mov	r0, r4
 8007640:	f000 f820 	bl	8007684 <__sfp>
 8007644:	6060      	str	r0, [r4, #4]
 8007646:	4620      	mov	r0, r4
 8007648:	f000 f81c 	bl	8007684 <__sfp>
 800764c:	60a0      	str	r0, [r4, #8]
 800764e:	4620      	mov	r0, r4
 8007650:	f000 f818 	bl	8007684 <__sfp>
 8007654:	2200      	movs	r2, #0
 8007656:	60e0      	str	r0, [r4, #12]
 8007658:	2104      	movs	r1, #4
 800765a:	6860      	ldr	r0, [r4, #4]
 800765c:	f7ff ff82 	bl	8007564 <std>
 8007660:	68a0      	ldr	r0, [r4, #8]
 8007662:	2201      	movs	r2, #1
 8007664:	2109      	movs	r1, #9
 8007666:	f7ff ff7d 	bl	8007564 <std>
 800766a:	68e0      	ldr	r0, [r4, #12]
 800766c:	2202      	movs	r2, #2
 800766e:	2112      	movs	r1, #18
 8007670:	f7ff ff78 	bl	8007564 <std>
 8007674:	2301      	movs	r3, #1
 8007676:	61a3      	str	r3, [r4, #24]
 8007678:	e7d2      	b.n	8007620 <__sinit+0xc>
 800767a:	bf00      	nop
 800767c:	08007bf8 	.word	0x08007bf8
 8007680:	080075ad 	.word	0x080075ad

08007684 <__sfp>:
 8007684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007686:	4607      	mov	r7, r0
 8007688:	f7ff ffac 	bl	80075e4 <__sfp_lock_acquire>
 800768c:	4b1e      	ldr	r3, [pc, #120]	; (8007708 <__sfp+0x84>)
 800768e:	681e      	ldr	r6, [r3, #0]
 8007690:	69b3      	ldr	r3, [r6, #24]
 8007692:	b913      	cbnz	r3, 800769a <__sfp+0x16>
 8007694:	4630      	mov	r0, r6
 8007696:	f7ff ffbd 	bl	8007614 <__sinit>
 800769a:	3648      	adds	r6, #72	; 0x48
 800769c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076a0:	3b01      	subs	r3, #1
 80076a2:	d503      	bpl.n	80076ac <__sfp+0x28>
 80076a4:	6833      	ldr	r3, [r6, #0]
 80076a6:	b30b      	cbz	r3, 80076ec <__sfp+0x68>
 80076a8:	6836      	ldr	r6, [r6, #0]
 80076aa:	e7f7      	b.n	800769c <__sfp+0x18>
 80076ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076b0:	b9d5      	cbnz	r5, 80076e8 <__sfp+0x64>
 80076b2:	4b16      	ldr	r3, [pc, #88]	; (800770c <__sfp+0x88>)
 80076b4:	60e3      	str	r3, [r4, #12]
 80076b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076ba:	6665      	str	r5, [r4, #100]	; 0x64
 80076bc:	f000 f847 	bl	800774e <__retarget_lock_init_recursive>
 80076c0:	f7ff ff96 	bl	80075f0 <__sfp_lock_release>
 80076c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80076c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80076cc:	6025      	str	r5, [r4, #0]
 80076ce:	61a5      	str	r5, [r4, #24]
 80076d0:	2208      	movs	r2, #8
 80076d2:	4629      	mov	r1, r5
 80076d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80076d8:	f7fb fd78 	bl	80031cc <memset>
 80076dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80076e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80076e4:	4620      	mov	r0, r4
 80076e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076e8:	3468      	adds	r4, #104	; 0x68
 80076ea:	e7d9      	b.n	80076a0 <__sfp+0x1c>
 80076ec:	2104      	movs	r1, #4
 80076ee:	4638      	mov	r0, r7
 80076f0:	f7ff ff62 	bl	80075b8 <__sfmoreglue>
 80076f4:	4604      	mov	r4, r0
 80076f6:	6030      	str	r0, [r6, #0]
 80076f8:	2800      	cmp	r0, #0
 80076fa:	d1d5      	bne.n	80076a8 <__sfp+0x24>
 80076fc:	f7ff ff78 	bl	80075f0 <__sfp_lock_release>
 8007700:	230c      	movs	r3, #12
 8007702:	603b      	str	r3, [r7, #0]
 8007704:	e7ee      	b.n	80076e4 <__sfp+0x60>
 8007706:	bf00      	nop
 8007708:	08007bf8 	.word	0x08007bf8
 800770c:	ffff0001 	.word	0xffff0001

08007710 <_fwalk_reent>:
 8007710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007714:	4606      	mov	r6, r0
 8007716:	4688      	mov	r8, r1
 8007718:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800771c:	2700      	movs	r7, #0
 800771e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007722:	f1b9 0901 	subs.w	r9, r9, #1
 8007726:	d505      	bpl.n	8007734 <_fwalk_reent+0x24>
 8007728:	6824      	ldr	r4, [r4, #0]
 800772a:	2c00      	cmp	r4, #0
 800772c:	d1f7      	bne.n	800771e <_fwalk_reent+0xe>
 800772e:	4638      	mov	r0, r7
 8007730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007734:	89ab      	ldrh	r3, [r5, #12]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d907      	bls.n	800774a <_fwalk_reent+0x3a>
 800773a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800773e:	3301      	adds	r3, #1
 8007740:	d003      	beq.n	800774a <_fwalk_reent+0x3a>
 8007742:	4629      	mov	r1, r5
 8007744:	4630      	mov	r0, r6
 8007746:	47c0      	blx	r8
 8007748:	4307      	orrs	r7, r0
 800774a:	3568      	adds	r5, #104	; 0x68
 800774c:	e7e9      	b.n	8007722 <_fwalk_reent+0x12>

0800774e <__retarget_lock_init_recursive>:
 800774e:	4770      	bx	lr

08007750 <__retarget_lock_acquire_recursive>:
 8007750:	4770      	bx	lr

08007752 <__retarget_lock_release_recursive>:
 8007752:	4770      	bx	lr

08007754 <__swhatbuf_r>:
 8007754:	b570      	push	{r4, r5, r6, lr}
 8007756:	460e      	mov	r6, r1
 8007758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800775c:	2900      	cmp	r1, #0
 800775e:	b096      	sub	sp, #88	; 0x58
 8007760:	4614      	mov	r4, r2
 8007762:	461d      	mov	r5, r3
 8007764:	da08      	bge.n	8007778 <__swhatbuf_r+0x24>
 8007766:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	602a      	str	r2, [r5, #0]
 800776e:	061a      	lsls	r2, r3, #24
 8007770:	d410      	bmi.n	8007794 <__swhatbuf_r+0x40>
 8007772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007776:	e00e      	b.n	8007796 <__swhatbuf_r+0x42>
 8007778:	466a      	mov	r2, sp
 800777a:	f000 f903 	bl	8007984 <_fstat_r>
 800777e:	2800      	cmp	r0, #0
 8007780:	dbf1      	blt.n	8007766 <__swhatbuf_r+0x12>
 8007782:	9a01      	ldr	r2, [sp, #4]
 8007784:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007788:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800778c:	425a      	negs	r2, r3
 800778e:	415a      	adcs	r2, r3
 8007790:	602a      	str	r2, [r5, #0]
 8007792:	e7ee      	b.n	8007772 <__swhatbuf_r+0x1e>
 8007794:	2340      	movs	r3, #64	; 0x40
 8007796:	2000      	movs	r0, #0
 8007798:	6023      	str	r3, [r4, #0]
 800779a:	b016      	add	sp, #88	; 0x58
 800779c:	bd70      	pop	{r4, r5, r6, pc}
	...

080077a0 <__smakebuf_r>:
 80077a0:	898b      	ldrh	r3, [r1, #12]
 80077a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077a4:	079d      	lsls	r5, r3, #30
 80077a6:	4606      	mov	r6, r0
 80077a8:	460c      	mov	r4, r1
 80077aa:	d507      	bpl.n	80077bc <__smakebuf_r+0x1c>
 80077ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077b0:	6023      	str	r3, [r4, #0]
 80077b2:	6123      	str	r3, [r4, #16]
 80077b4:	2301      	movs	r3, #1
 80077b6:	6163      	str	r3, [r4, #20]
 80077b8:	b002      	add	sp, #8
 80077ba:	bd70      	pop	{r4, r5, r6, pc}
 80077bc:	ab01      	add	r3, sp, #4
 80077be:	466a      	mov	r2, sp
 80077c0:	f7ff ffc8 	bl	8007754 <__swhatbuf_r>
 80077c4:	9900      	ldr	r1, [sp, #0]
 80077c6:	4605      	mov	r5, r0
 80077c8:	4630      	mov	r0, r6
 80077ca:	f7ff f961 	bl	8006a90 <_malloc_r>
 80077ce:	b948      	cbnz	r0, 80077e4 <__smakebuf_r+0x44>
 80077d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077d4:	059a      	lsls	r2, r3, #22
 80077d6:	d4ef      	bmi.n	80077b8 <__smakebuf_r+0x18>
 80077d8:	f023 0303 	bic.w	r3, r3, #3
 80077dc:	f043 0302 	orr.w	r3, r3, #2
 80077e0:	81a3      	strh	r3, [r4, #12]
 80077e2:	e7e3      	b.n	80077ac <__smakebuf_r+0xc>
 80077e4:	4b0d      	ldr	r3, [pc, #52]	; (800781c <__smakebuf_r+0x7c>)
 80077e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80077e8:	89a3      	ldrh	r3, [r4, #12]
 80077ea:	6020      	str	r0, [r4, #0]
 80077ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f0:	81a3      	strh	r3, [r4, #12]
 80077f2:	9b00      	ldr	r3, [sp, #0]
 80077f4:	6163      	str	r3, [r4, #20]
 80077f6:	9b01      	ldr	r3, [sp, #4]
 80077f8:	6120      	str	r0, [r4, #16]
 80077fa:	b15b      	cbz	r3, 8007814 <__smakebuf_r+0x74>
 80077fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007800:	4630      	mov	r0, r6
 8007802:	f000 f8d1 	bl	80079a8 <_isatty_r>
 8007806:	b128      	cbz	r0, 8007814 <__smakebuf_r+0x74>
 8007808:	89a3      	ldrh	r3, [r4, #12]
 800780a:	f023 0303 	bic.w	r3, r3, #3
 800780e:	f043 0301 	orr.w	r3, r3, #1
 8007812:	81a3      	strh	r3, [r4, #12]
 8007814:	89a0      	ldrh	r0, [r4, #12]
 8007816:	4305      	orrs	r5, r0
 8007818:	81a5      	strh	r5, [r4, #12]
 800781a:	e7cd      	b.n	80077b8 <__smakebuf_r+0x18>
 800781c:	080075ad 	.word	0x080075ad

08007820 <_malloc_usable_size_r>:
 8007820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007824:	1f18      	subs	r0, r3, #4
 8007826:	2b00      	cmp	r3, #0
 8007828:	bfbc      	itt	lt
 800782a:	580b      	ldrlt	r3, [r1, r0]
 800782c:	18c0      	addlt	r0, r0, r3
 800782e:	4770      	bx	lr

08007830 <_raise_r>:
 8007830:	291f      	cmp	r1, #31
 8007832:	b538      	push	{r3, r4, r5, lr}
 8007834:	4604      	mov	r4, r0
 8007836:	460d      	mov	r5, r1
 8007838:	d904      	bls.n	8007844 <_raise_r+0x14>
 800783a:	2316      	movs	r3, #22
 800783c:	6003      	str	r3, [r0, #0]
 800783e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007842:	bd38      	pop	{r3, r4, r5, pc}
 8007844:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007846:	b112      	cbz	r2, 800784e <_raise_r+0x1e>
 8007848:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800784c:	b94b      	cbnz	r3, 8007862 <_raise_r+0x32>
 800784e:	4620      	mov	r0, r4
 8007850:	f000 f830 	bl	80078b4 <_getpid_r>
 8007854:	462a      	mov	r2, r5
 8007856:	4601      	mov	r1, r0
 8007858:	4620      	mov	r0, r4
 800785a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800785e:	f000 b817 	b.w	8007890 <_kill_r>
 8007862:	2b01      	cmp	r3, #1
 8007864:	d00a      	beq.n	800787c <_raise_r+0x4c>
 8007866:	1c59      	adds	r1, r3, #1
 8007868:	d103      	bne.n	8007872 <_raise_r+0x42>
 800786a:	2316      	movs	r3, #22
 800786c:	6003      	str	r3, [r0, #0]
 800786e:	2001      	movs	r0, #1
 8007870:	e7e7      	b.n	8007842 <_raise_r+0x12>
 8007872:	2400      	movs	r4, #0
 8007874:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007878:	4628      	mov	r0, r5
 800787a:	4798      	blx	r3
 800787c:	2000      	movs	r0, #0
 800787e:	e7e0      	b.n	8007842 <_raise_r+0x12>

08007880 <raise>:
 8007880:	4b02      	ldr	r3, [pc, #8]	; (800788c <raise+0xc>)
 8007882:	4601      	mov	r1, r0
 8007884:	6818      	ldr	r0, [r3, #0]
 8007886:	f7ff bfd3 	b.w	8007830 <_raise_r>
 800788a:	bf00      	nop
 800788c:	20000044 	.word	0x20000044

08007890 <_kill_r>:
 8007890:	b538      	push	{r3, r4, r5, lr}
 8007892:	4d07      	ldr	r5, [pc, #28]	; (80078b0 <_kill_r+0x20>)
 8007894:	2300      	movs	r3, #0
 8007896:	4604      	mov	r4, r0
 8007898:	4608      	mov	r0, r1
 800789a:	4611      	mov	r1, r2
 800789c:	602b      	str	r3, [r5, #0]
 800789e:	f000 f8d7 	bl	8007a50 <_kill>
 80078a2:	1c43      	adds	r3, r0, #1
 80078a4:	d102      	bne.n	80078ac <_kill_r+0x1c>
 80078a6:	682b      	ldr	r3, [r5, #0]
 80078a8:	b103      	cbz	r3, 80078ac <_kill_r+0x1c>
 80078aa:	6023      	str	r3, [r4, #0]
 80078ac:	bd38      	pop	{r3, r4, r5, pc}
 80078ae:	bf00      	nop
 80078b0:	2000617c 	.word	0x2000617c

080078b4 <_getpid_r>:
 80078b4:	f000 b8bc 	b.w	8007a30 <_getpid>

080078b8 <__sread>:
 80078b8:	b510      	push	{r4, lr}
 80078ba:	460c      	mov	r4, r1
 80078bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078c0:	f000 f894 	bl	80079ec <_read_r>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	bfab      	itete	ge
 80078c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078ca:	89a3      	ldrhlt	r3, [r4, #12]
 80078cc:	181b      	addge	r3, r3, r0
 80078ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078d2:	bfac      	ite	ge
 80078d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80078d6:	81a3      	strhlt	r3, [r4, #12]
 80078d8:	bd10      	pop	{r4, pc}

080078da <__swrite>:
 80078da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078de:	461f      	mov	r7, r3
 80078e0:	898b      	ldrh	r3, [r1, #12]
 80078e2:	05db      	lsls	r3, r3, #23
 80078e4:	4605      	mov	r5, r0
 80078e6:	460c      	mov	r4, r1
 80078e8:	4616      	mov	r6, r2
 80078ea:	d505      	bpl.n	80078f8 <__swrite+0x1e>
 80078ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f0:	2302      	movs	r3, #2
 80078f2:	2200      	movs	r2, #0
 80078f4:	f000 f868 	bl	80079c8 <_lseek_r>
 80078f8:	89a3      	ldrh	r3, [r4, #12]
 80078fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007902:	81a3      	strh	r3, [r4, #12]
 8007904:	4632      	mov	r2, r6
 8007906:	463b      	mov	r3, r7
 8007908:	4628      	mov	r0, r5
 800790a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800790e:	f000 b817 	b.w	8007940 <_write_r>

08007912 <__sseek>:
 8007912:	b510      	push	{r4, lr}
 8007914:	460c      	mov	r4, r1
 8007916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800791a:	f000 f855 	bl	80079c8 <_lseek_r>
 800791e:	1c43      	adds	r3, r0, #1
 8007920:	89a3      	ldrh	r3, [r4, #12]
 8007922:	bf15      	itete	ne
 8007924:	6560      	strne	r0, [r4, #84]	; 0x54
 8007926:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800792a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800792e:	81a3      	strheq	r3, [r4, #12]
 8007930:	bf18      	it	ne
 8007932:	81a3      	strhne	r3, [r4, #12]
 8007934:	bd10      	pop	{r4, pc}

08007936 <__sclose>:
 8007936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800793a:	f000 b813 	b.w	8007964 <_close_r>
	...

08007940 <_write_r>:
 8007940:	b538      	push	{r3, r4, r5, lr}
 8007942:	4d07      	ldr	r5, [pc, #28]	; (8007960 <_write_r+0x20>)
 8007944:	4604      	mov	r4, r0
 8007946:	4608      	mov	r0, r1
 8007948:	4611      	mov	r1, r2
 800794a:	2200      	movs	r2, #0
 800794c:	602a      	str	r2, [r5, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	f000 f8a4 	bl	8007a9c <_write>
 8007954:	1c43      	adds	r3, r0, #1
 8007956:	d102      	bne.n	800795e <_write_r+0x1e>
 8007958:	682b      	ldr	r3, [r5, #0]
 800795a:	b103      	cbz	r3, 800795e <_write_r+0x1e>
 800795c:	6023      	str	r3, [r4, #0]
 800795e:	bd38      	pop	{r3, r4, r5, pc}
 8007960:	2000617c 	.word	0x2000617c

08007964 <_close_r>:
 8007964:	b538      	push	{r3, r4, r5, lr}
 8007966:	4d06      	ldr	r5, [pc, #24]	; (8007980 <_close_r+0x1c>)
 8007968:	2300      	movs	r3, #0
 800796a:	4604      	mov	r4, r0
 800796c:	4608      	mov	r0, r1
 800796e:	602b      	str	r3, [r5, #0]
 8007970:	f000 f84e 	bl	8007a10 <_close>
 8007974:	1c43      	adds	r3, r0, #1
 8007976:	d102      	bne.n	800797e <_close_r+0x1a>
 8007978:	682b      	ldr	r3, [r5, #0]
 800797a:	b103      	cbz	r3, 800797e <_close_r+0x1a>
 800797c:	6023      	str	r3, [r4, #0]
 800797e:	bd38      	pop	{r3, r4, r5, pc}
 8007980:	2000617c 	.word	0x2000617c

08007984 <_fstat_r>:
 8007984:	b538      	push	{r3, r4, r5, lr}
 8007986:	4d07      	ldr	r5, [pc, #28]	; (80079a4 <_fstat_r+0x20>)
 8007988:	2300      	movs	r3, #0
 800798a:	4604      	mov	r4, r0
 800798c:	4608      	mov	r0, r1
 800798e:	4611      	mov	r1, r2
 8007990:	602b      	str	r3, [r5, #0]
 8007992:	f000 f845 	bl	8007a20 <_fstat>
 8007996:	1c43      	adds	r3, r0, #1
 8007998:	d102      	bne.n	80079a0 <_fstat_r+0x1c>
 800799a:	682b      	ldr	r3, [r5, #0]
 800799c:	b103      	cbz	r3, 80079a0 <_fstat_r+0x1c>
 800799e:	6023      	str	r3, [r4, #0]
 80079a0:	bd38      	pop	{r3, r4, r5, pc}
 80079a2:	bf00      	nop
 80079a4:	2000617c 	.word	0x2000617c

080079a8 <_isatty_r>:
 80079a8:	b538      	push	{r3, r4, r5, lr}
 80079aa:	4d06      	ldr	r5, [pc, #24]	; (80079c4 <_isatty_r+0x1c>)
 80079ac:	2300      	movs	r3, #0
 80079ae:	4604      	mov	r4, r0
 80079b0:	4608      	mov	r0, r1
 80079b2:	602b      	str	r3, [r5, #0]
 80079b4:	f000 f844 	bl	8007a40 <_isatty>
 80079b8:	1c43      	adds	r3, r0, #1
 80079ba:	d102      	bne.n	80079c2 <_isatty_r+0x1a>
 80079bc:	682b      	ldr	r3, [r5, #0]
 80079be:	b103      	cbz	r3, 80079c2 <_isatty_r+0x1a>
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	bd38      	pop	{r3, r4, r5, pc}
 80079c4:	2000617c 	.word	0x2000617c

080079c8 <_lseek_r>:
 80079c8:	b538      	push	{r3, r4, r5, lr}
 80079ca:	4d07      	ldr	r5, [pc, #28]	; (80079e8 <_lseek_r+0x20>)
 80079cc:	4604      	mov	r4, r0
 80079ce:	4608      	mov	r0, r1
 80079d0:	4611      	mov	r1, r2
 80079d2:	2200      	movs	r2, #0
 80079d4:	602a      	str	r2, [r5, #0]
 80079d6:	461a      	mov	r2, r3
 80079d8:	f000 f842 	bl	8007a60 <_lseek>
 80079dc:	1c43      	adds	r3, r0, #1
 80079de:	d102      	bne.n	80079e6 <_lseek_r+0x1e>
 80079e0:	682b      	ldr	r3, [r5, #0]
 80079e2:	b103      	cbz	r3, 80079e6 <_lseek_r+0x1e>
 80079e4:	6023      	str	r3, [r4, #0]
 80079e6:	bd38      	pop	{r3, r4, r5, pc}
 80079e8:	2000617c 	.word	0x2000617c

080079ec <_read_r>:
 80079ec:	b538      	push	{r3, r4, r5, lr}
 80079ee:	4d07      	ldr	r5, [pc, #28]	; (8007a0c <_read_r+0x20>)
 80079f0:	4604      	mov	r4, r0
 80079f2:	4608      	mov	r0, r1
 80079f4:	4611      	mov	r1, r2
 80079f6:	2200      	movs	r2, #0
 80079f8:	602a      	str	r2, [r5, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	f000 f838 	bl	8007a70 <_read>
 8007a00:	1c43      	adds	r3, r0, #1
 8007a02:	d102      	bne.n	8007a0a <_read_r+0x1e>
 8007a04:	682b      	ldr	r3, [r5, #0]
 8007a06:	b103      	cbz	r3, 8007a0a <_read_r+0x1e>
 8007a08:	6023      	str	r3, [r4, #0]
 8007a0a:	bd38      	pop	{r3, r4, r5, pc}
 8007a0c:	2000617c 	.word	0x2000617c

08007a10 <_close>:
 8007a10:	4b02      	ldr	r3, [pc, #8]	; (8007a1c <_close+0xc>)
 8007a12:	2258      	movs	r2, #88	; 0x58
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a1a:	4770      	bx	lr
 8007a1c:	2000617c 	.word	0x2000617c

08007a20 <_fstat>:
 8007a20:	4b02      	ldr	r3, [pc, #8]	; (8007a2c <_fstat+0xc>)
 8007a22:	2258      	movs	r2, #88	; 0x58
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a2a:	4770      	bx	lr
 8007a2c:	2000617c 	.word	0x2000617c

08007a30 <_getpid>:
 8007a30:	4b02      	ldr	r3, [pc, #8]	; (8007a3c <_getpid+0xc>)
 8007a32:	2258      	movs	r2, #88	; 0x58
 8007a34:	601a      	str	r2, [r3, #0]
 8007a36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a3a:	4770      	bx	lr
 8007a3c:	2000617c 	.word	0x2000617c

08007a40 <_isatty>:
 8007a40:	4b02      	ldr	r3, [pc, #8]	; (8007a4c <_isatty+0xc>)
 8007a42:	2258      	movs	r2, #88	; 0x58
 8007a44:	601a      	str	r2, [r3, #0]
 8007a46:	2000      	movs	r0, #0
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	2000617c 	.word	0x2000617c

08007a50 <_kill>:
 8007a50:	4b02      	ldr	r3, [pc, #8]	; (8007a5c <_kill+0xc>)
 8007a52:	2258      	movs	r2, #88	; 0x58
 8007a54:	601a      	str	r2, [r3, #0]
 8007a56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a5a:	4770      	bx	lr
 8007a5c:	2000617c 	.word	0x2000617c

08007a60 <_lseek>:
 8007a60:	4b02      	ldr	r3, [pc, #8]	; (8007a6c <_lseek+0xc>)
 8007a62:	2258      	movs	r2, #88	; 0x58
 8007a64:	601a      	str	r2, [r3, #0]
 8007a66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a6a:	4770      	bx	lr
 8007a6c:	2000617c 	.word	0x2000617c

08007a70 <_read>:
 8007a70:	4b02      	ldr	r3, [pc, #8]	; (8007a7c <_read+0xc>)
 8007a72:	2258      	movs	r2, #88	; 0x58
 8007a74:	601a      	str	r2, [r3, #0]
 8007a76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a7a:	4770      	bx	lr
 8007a7c:	2000617c 	.word	0x2000617c

08007a80 <_sbrk>:
 8007a80:	4a04      	ldr	r2, [pc, #16]	; (8007a94 <_sbrk+0x14>)
 8007a82:	6811      	ldr	r1, [r2, #0]
 8007a84:	4603      	mov	r3, r0
 8007a86:	b909      	cbnz	r1, 8007a8c <_sbrk+0xc>
 8007a88:	4903      	ldr	r1, [pc, #12]	; (8007a98 <_sbrk+0x18>)
 8007a8a:	6011      	str	r1, [r2, #0]
 8007a8c:	6810      	ldr	r0, [r2, #0]
 8007a8e:	4403      	add	r3, r0
 8007a90:	6013      	str	r3, [r2, #0]
 8007a92:	4770      	bx	lr
 8007a94:	20006184 	.word	0x20006184
 8007a98:	20006188 	.word	0x20006188

08007a9c <_write>:
 8007a9c:	4b02      	ldr	r3, [pc, #8]	; (8007aa8 <_write+0xc>)
 8007a9e:	2258      	movs	r2, #88	; 0x58
 8007aa0:	601a      	str	r2, [r3, #0]
 8007aa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007aa6:	4770      	bx	lr
 8007aa8:	2000617c 	.word	0x2000617c

08007aac <_exit>:
 8007aac:	e7fe      	b.n	8007aac <_exit>
	...

08007ab0 <_init>:
 8007ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab2:	bf00      	nop
 8007ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ab6:	bc08      	pop	{r3}
 8007ab8:	469e      	mov	lr, r3
 8007aba:	4770      	bx	lr

08007abc <_fini>:
 8007abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007abe:	bf00      	nop
 8007ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ac2:	bc08      	pop	{r3}
 8007ac4:	469e      	mov	lr, r3
 8007ac6:	4770      	bx	lr
