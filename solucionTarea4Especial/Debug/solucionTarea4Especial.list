
solucionTarea4Especial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  08006b60  08006b60  00016b60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070c4  080070c4  00020218  2**0
                  CONTENTS
  4 .ARM          00000000  080070c4  080070c4  00020218  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070c4  080070c4  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070c4  080070c4  000170c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070c8  080070c8  000170c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  080070cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000218  080072e4  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  080072e4  00020344  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002a3b  00000000  00000000  00020242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a21  00000000  00000000  00022c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  000236a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000198  00000000  00000000  000238a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fb26  00000000  00000000  00023a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003291  00000000  00000000  0003355e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055d73  00000000  00000000  000367ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008c562  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ce4  00000000  00000000  0008c5b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0008e298  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0008e364  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006b48 	.word	0x08006b48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	08006b48 	.word	0x08006b48

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	4605      	mov	r5, r0
 8000c9c:	460c      	mov	r4, r1
 8000c9e:	4628      	mov	r0, r5
 8000ca0:	4621      	mov	r1, r4
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f7ff ff21 	bl	8000aec <__aeabi_dcmplt>
 8000caa:	b928      	cbnz	r0, 8000cb8 <__aeabi_d2lz+0x20>
 8000cac:	4628      	mov	r0, r5
 8000cae:	4621      	mov	r1, r4
 8000cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb4:	f000 b80a 	b.w	8000ccc <__aeabi_d2ulz>
 8000cb8:	4628      	mov	r0, r5
 8000cba:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000cbe:	f000 f805 	bl	8000ccc <__aeabi_d2ulz>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	bd38      	pop	{r3, r4, r5, pc}
 8000cca:	bf00      	nop

08000ccc <__aeabi_d2ulz>:
 8000ccc:	b5d0      	push	{r4, r6, r7, lr}
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__aeabi_d2ulz+0x34>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4606      	mov	r6, r0
 8000cd4:	460f      	mov	r7, r1
 8000cd6:	f7ff fc97 	bl	8000608 <__aeabi_dmul>
 8000cda:	f7ff ff6d 	bl	8000bb8 <__aeabi_d2uiz>
 8000cde:	4604      	mov	r4, r0
 8000ce0:	f7ff fc18 	bl	8000514 <__aeabi_ui2d>
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <__aeabi_d2ulz+0x38>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f7ff fc8e 	bl	8000608 <__aeabi_dmul>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4630      	mov	r0, r6
 8000cf2:	4639      	mov	r1, r7
 8000cf4:	f7ff fad0 	bl	8000298 <__aeabi_dsub>
 8000cf8:	f7ff ff5e 	bl	8000bb8 <__aeabi_d2uiz>
 8000cfc:	4621      	mov	r1, r4
 8000cfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000d00:	3df00000 	.word	0x3df00000
 8000d04:	41f00000 	.word	0x41f00000

08000d08 <main>:


void init_Hardware(void);


int main(void){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
	// Se llama la función de inicialización.
	init_Hardware();
 8000d0e:	f000 f971 	bl	8000ff4 <init_Hardware>

	while(1){
		//Hacemos un "eco" con el valor que nos llega por el serial
		if(rxData != '\0'){
 8000d12:	4ba9      	ldr	r3, [pc, #676]	; (8000fb8 <main+0x2b0>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d0fb      	beq.n	8000d12 <main+0xa>
			writeChar(&USART6Comm, rxData);
 8000d1a:	4ba7      	ldr	r3, [pc, #668]	; (8000fb8 <main+0x2b0>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	4619      	mov	r1, r3
 8000d20:	48a6      	ldr	r0, [pc, #664]	; (8000fbc <main+0x2b4>)
 8000d22:	f001 fa08 	bl	8002136 <writeChar>

			if(rxData == 'w'){
 8000d26:	4ba4      	ldr	r3, [pc, #656]	; (8000fb8 <main+0x2b0>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b77      	cmp	r3, #119	; 0x77
 8000d2c:	d11e      	bne.n	8000d6c <main+0x64>
				sprintf(bufferData, "WHO_AM_I? (r)\n");
 8000d2e:	49a4      	ldr	r1, [pc, #656]	; (8000fc0 <main+0x2b8>)
 8000d30:	48a4      	ldr	r0, [pc, #656]	; (8000fc4 <main+0x2bc>)
 8000d32:	f002 f90b 	bl	8002f4c <siprintf>
				writeMsg(&USART6Comm, bufferData);
 8000d36:	49a3      	ldr	r1, [pc, #652]	; (8000fc4 <main+0x2bc>)
 8000d38:	48a0      	ldr	r0, [pc, #640]	; (8000fbc <main+0x2b4>)
 8000d3a:	f001 fa14 	bl	8002166 <writeMsg>

				i2cBuffer = i2c_readSingleRegister(&Acelerometer, WHO_AM_I);
 8000d3e:	2100      	movs	r1, #0
 8000d40:	48a1      	ldr	r0, [pc, #644]	; (8000fc8 <main+0x2c0>)
 8000d42:	f000 fe57 	bl	80019f4 <i2c_readSingleRegister>
 8000d46:	4603      	mov	r3, r0
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4ba0      	ldr	r3, [pc, #640]	; (8000fcc <main+0x2c4>)
 8000d4c:	701a      	strb	r2, [r3, #0]
				sprintf(bufferData, "dataRead = 0x%x \n", (unsigned int) i2cBuffer);
 8000d4e:	4b9f      	ldr	r3, [pc, #636]	; (8000fcc <main+0x2c4>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	461a      	mov	r2, r3
 8000d54:	499e      	ldr	r1, [pc, #632]	; (8000fd0 <main+0x2c8>)
 8000d56:	489b      	ldr	r0, [pc, #620]	; (8000fc4 <main+0x2bc>)
 8000d58:	f002 f8f8 	bl	8002f4c <siprintf>
				writeMsg(&USART6Comm, bufferData);
 8000d5c:	4999      	ldr	r1, [pc, #612]	; (8000fc4 <main+0x2bc>)
 8000d5e:	4897      	ldr	r0, [pc, #604]	; (8000fbc <main+0x2b4>)
 8000d60:	f001 fa01 	bl	8002166 <writeMsg>
				rxData = '\0';
 8000d64:	4b94      	ldr	r3, [pc, #592]	; (8000fb8 <main+0x2b0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
 8000d6a:	e7d2      	b.n	8000d12 <main+0xa>
			}
			else if (rxData == 'p'){
 8000d6c:	4b92      	ldr	r3, [pc, #584]	; (8000fb8 <main+0x2b0>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b70      	cmp	r3, #112	; 0x70
 8000d72:	d11e      	bne.n	8000db2 <main+0xaa>
				sprintf(bufferData, "PWR_MGMT_1 state (r)\n");
 8000d74:	4997      	ldr	r1, [pc, #604]	; (8000fd4 <main+0x2cc>)
 8000d76:	4893      	ldr	r0, [pc, #588]	; (8000fc4 <main+0x2bc>)
 8000d78:	f002 f8e8 	bl	8002f4c <siprintf>
				writeMsg(&USART6Comm, bufferData);
 8000d7c:	4991      	ldr	r1, [pc, #580]	; (8000fc4 <main+0x2bc>)
 8000d7e:	488f      	ldr	r0, [pc, #572]	; (8000fbc <main+0x2b4>)
 8000d80:	f001 f9f1 	bl	8002166 <writeMsg>

				i2cBuffer = i2c_readSingleRegister(&Acelerometer, POWER_CTL);
 8000d84:	212d      	movs	r1, #45	; 0x2d
 8000d86:	4890      	ldr	r0, [pc, #576]	; (8000fc8 <main+0x2c0>)
 8000d88:	f000 fe34 	bl	80019f4 <i2c_readSingleRegister>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b8e      	ldr	r3, [pc, #568]	; (8000fcc <main+0x2c4>)
 8000d92:	701a      	strb	r2, [r3, #0]
				sprintf(bufferData, "dataRead = 0x%x \n", (unsigned int) i2cBuffer);
 8000d94:	4b8d      	ldr	r3, [pc, #564]	; (8000fcc <main+0x2c4>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	498d      	ldr	r1, [pc, #564]	; (8000fd0 <main+0x2c8>)
 8000d9c:	4889      	ldr	r0, [pc, #548]	; (8000fc4 <main+0x2bc>)
 8000d9e:	f002 f8d5 	bl	8002f4c <siprintf>
				writeMsg(&USART6Comm, bufferData);
 8000da2:	4988      	ldr	r1, [pc, #544]	; (8000fc4 <main+0x2bc>)
 8000da4:	4885      	ldr	r0, [pc, #532]	; (8000fbc <main+0x2b4>)
 8000da6:	f001 f9de 	bl	8002166 <writeMsg>
				rxData = '\0';
 8000daa:	4b83      	ldr	r3, [pc, #524]	; (8000fb8 <main+0x2b0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
 8000db0:	e7af      	b.n	8000d12 <main+0xa>
			}
			else if (rxData == 'r'){
 8000db2:	4b81      	ldr	r3, [pc, #516]	; (8000fb8 <main+0x2b0>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b72      	cmp	r3, #114	; 0x72
 8000db8:	d110      	bne.n	8000ddc <main+0xd4>
				sprintf(bufferData, "PWR_MGMT_1 reset (w)\n");
 8000dba:	4987      	ldr	r1, [pc, #540]	; (8000fd8 <main+0x2d0>)
 8000dbc:	4881      	ldr	r0, [pc, #516]	; (8000fc4 <main+0x2bc>)
 8000dbe:	f002 f8c5 	bl	8002f4c <siprintf>
				writeMsg(&USART6Comm, bufferData);
 8000dc2:	4980      	ldr	r1, [pc, #512]	; (8000fc4 <main+0x2bc>)
 8000dc4:	487d      	ldr	r0, [pc, #500]	; (8000fbc <main+0x2b4>)
 8000dc6:	f001 f9ce 	bl	8002166 <writeMsg>

				i2c_writeSingleRegister(&Acelerometer, POWER_CTL , 0x2D); // modo medida en acelerometro
 8000dca:	222d      	movs	r2, #45	; 0x2d
 8000dcc:	212d      	movs	r1, #45	; 0x2d
 8000dce:	487e      	ldr	r0, [pc, #504]	; (8000fc8 <main+0x2c0>)
 8000dd0:	f000 fe41 	bl	8001a56 <i2c_writeSingleRegister>
				rxData = '\0';
 8000dd4:	4b78      	ldr	r3, [pc, #480]	; (8000fb8 <main+0x2b0>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
 8000dda:	e79a      	b.n	8000d12 <main+0xa>
			}
			else if (rxData == 'x'){
 8000ddc:	4b76      	ldr	r3, [pc, #472]	; (8000fb8 <main+0x2b0>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b78      	cmp	r3, #120	; 0x78
 8000de2:	d146      	bne.n	8000e72 <main+0x16a>
				sprintf(bufferData, "Axis X data (r) \n");
 8000de4:	497d      	ldr	r1, [pc, #500]	; (8000fdc <main+0x2d4>)
 8000de6:	4877      	ldr	r0, [pc, #476]	; (8000fc4 <main+0x2bc>)
 8000de8:	f002 f8b0 	bl	8002f4c <siprintf>
				writeMsg(&USART6Comm, bufferData);
 8000dec:	4975      	ldr	r1, [pc, #468]	; (8000fc4 <main+0x2bc>)
 8000dee:	4873      	ldr	r0, [pc, #460]	; (8000fbc <main+0x2b4>)
 8000df0:	f001 f9b9 	bl	8002166 <writeMsg>

				uint8_t AccelX_low =  i2c_readSingleRegister(&Acelerometer, ACCEL_X1_L);
 8000df4:	2132      	movs	r1, #50	; 0x32
 8000df6:	4874      	ldr	r0, [pc, #464]	; (8000fc8 <main+0x2c0>)
 8000df8:	f000 fdfc 	bl	80019f4 <i2c_readSingleRegister>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	71fb      	strb	r3, [r7, #7]
				uint8_t AccelX_high = i2c_readSingleRegister(&Acelerometer, ACCEL_X1_H);
 8000e00:	2133      	movs	r1, #51	; 0x33
 8000e02:	4871      	ldr	r0, [pc, #452]	; (8000fc8 <main+0x2c0>)
 8000e04:	f000 fdf6 	bl	80019f4 <i2c_readSingleRegister>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	71bb      	strb	r3, [r7, #6]
				int16_t AccelX = AccelX_high << 8 | AccelX_low;
 8000e0c:	79bb      	ldrb	r3, [r7, #6]
 8000e0e:	021b      	lsls	r3, r3, #8
 8000e10:	b21a      	sxth	r2, r3
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	b21b      	sxth	r3, r3
 8000e16:	4313      	orrs	r3, r2
 8000e18:	80bb      	strh	r3, [r7, #4]
				float X_axis = AccelX * 0.0039 * 9.8;
 8000e1a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fb88 	bl	8000534 <__aeabi_i2d>
 8000e24:	a360      	add	r3, pc, #384	; (adr r3, 8000fa8 <main+0x2a0>)
 8000e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2a:	f7ff fbed 	bl	8000608 <__aeabi_dmul>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	460b      	mov	r3, r1
 8000e32:	4610      	mov	r0, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	a35e      	add	r3, pc, #376	; (adr r3, 8000fb0 <main+0x2a8>)
 8000e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3c:	f7ff fbe4 	bl	8000608 <__aeabi_dmul>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4610      	mov	r0, r2
 8000e46:	4619      	mov	r1, r3
 8000e48:	f7ff fed6 	bl	8000bf8 <__aeabi_d2f>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	603b      	str	r3, [r7, #0]
				sprintf(bufferData, "AccelX = %.2f \n", X_axis);
 8000e50:	6838      	ldr	r0, [r7, #0]
 8000e52:	f7ff fb81 	bl	8000558 <__aeabi_f2d>
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	4961      	ldr	r1, [pc, #388]	; (8000fe0 <main+0x2d8>)
 8000e5c:	4859      	ldr	r0, [pc, #356]	; (8000fc4 <main+0x2bc>)
 8000e5e:	f002 f875 	bl	8002f4c <siprintf>
				writeMsg(&USART6Comm, bufferData);
 8000e62:	4958      	ldr	r1, [pc, #352]	; (8000fc4 <main+0x2bc>)
 8000e64:	4855      	ldr	r0, [pc, #340]	; (8000fbc <main+0x2b4>)
 8000e66:	f001 f97e 	bl	8002166 <writeMsg>
				rxData = '\0';
 8000e6a:	4b53      	ldr	r3, [pc, #332]	; (8000fb8 <main+0x2b0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
 8000e70:	e74f      	b.n	8000d12 <main+0xa>
			}
			else if(rxData == 'y'){
 8000e72:	4b51      	ldr	r3, [pc, #324]	; (8000fb8 <main+0x2b0>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b79      	cmp	r3, #121	; 0x79
 8000e78:	d146      	bne.n	8000f08 <main+0x200>
				sprintf(bufferData, "Axis Y data (r)\n");
 8000e7a:	495a      	ldr	r1, [pc, #360]	; (8000fe4 <main+0x2dc>)
 8000e7c:	4851      	ldr	r0, [pc, #324]	; (8000fc4 <main+0x2bc>)
 8000e7e:	f002 f865 	bl	8002f4c <siprintf>
				writeMsg(&USART6Comm, bufferData);
 8000e82:	4950      	ldr	r1, [pc, #320]	; (8000fc4 <main+0x2bc>)
 8000e84:	484d      	ldr	r0, [pc, #308]	; (8000fbc <main+0x2b4>)
 8000e86:	f001 f96e 	bl	8002166 <writeMsg>
				uint8_t AccelY_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Y1_L);
 8000e8a:	2134      	movs	r1, #52	; 0x34
 8000e8c:	484e      	ldr	r0, [pc, #312]	; (8000fc8 <main+0x2c0>)
 8000e8e:	f000 fdb1 	bl	80019f4 <i2c_readSingleRegister>
 8000e92:	4603      	mov	r3, r0
 8000e94:	73fb      	strb	r3, [r7, #15]
				uint8_t AccelY_high = i2c_readSingleRegister(&Acelerometer,ACCEL_Y1_H);
 8000e96:	2135      	movs	r1, #53	; 0x35
 8000e98:	484b      	ldr	r0, [pc, #300]	; (8000fc8 <main+0x2c0>)
 8000e9a:	f000 fdab 	bl	80019f4 <i2c_readSingleRegister>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	73bb      	strb	r3, [r7, #14]
				int16_t AccelY = AccelY_high << 8 | AccelY_low;
 8000ea2:	7bbb      	ldrb	r3, [r7, #14]
 8000ea4:	021b      	lsls	r3, r3, #8
 8000ea6:	b21a      	sxth	r2, r3
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	b21b      	sxth	r3, r3
 8000eac:	4313      	orrs	r3, r2
 8000eae:	81bb      	strh	r3, [r7, #12]
				float Y_axis = AccelY * 0.0039 * 9.8;
 8000eb0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fb3d 	bl	8000534 <__aeabi_i2d>
 8000eba:	a33b      	add	r3, pc, #236	; (adr r3, 8000fa8 <main+0x2a0>)
 8000ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec0:	f7ff fba2 	bl	8000608 <__aeabi_dmul>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4610      	mov	r0, r2
 8000eca:	4619      	mov	r1, r3
 8000ecc:	a338      	add	r3, pc, #224	; (adr r3, 8000fb0 <main+0x2a8>)
 8000ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed2:	f7ff fb99 	bl	8000608 <__aeabi_dmul>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4610      	mov	r0, r2
 8000edc:	4619      	mov	r1, r3
 8000ede:	f7ff fe8b 	bl	8000bf8 <__aeabi_d2f>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	60bb      	str	r3, [r7, #8]
				sprintf(bufferData, "AccelY = %.2f \n", Y_axis);
 8000ee6:	68b8      	ldr	r0, [r7, #8]
 8000ee8:	f7ff fb36 	bl	8000558 <__aeabi_f2d>
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	493d      	ldr	r1, [pc, #244]	; (8000fe8 <main+0x2e0>)
 8000ef2:	4834      	ldr	r0, [pc, #208]	; (8000fc4 <main+0x2bc>)
 8000ef4:	f002 f82a 	bl	8002f4c <siprintf>
				writeMsg(&USART6Comm, bufferData);
 8000ef8:	4932      	ldr	r1, [pc, #200]	; (8000fc4 <main+0x2bc>)
 8000efa:	4830      	ldr	r0, [pc, #192]	; (8000fbc <main+0x2b4>)
 8000efc:	f001 f933 	bl	8002166 <writeMsg>
				rxData = '\0';
 8000f00:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <main+0x2b0>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	e704      	b.n	8000d12 <main+0xa>
			}
			else if(rxData == 'z'){
 8000f08:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <main+0x2b0>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b7a      	cmp	r3, #122	; 0x7a
 8000f0e:	d146      	bne.n	8000f9e <main+0x296>
				sprintf(bufferData, "Axis Z data (r)\n");
 8000f10:	4936      	ldr	r1, [pc, #216]	; (8000fec <main+0x2e4>)
 8000f12:	482c      	ldr	r0, [pc, #176]	; (8000fc4 <main+0x2bc>)
 8000f14:	f002 f81a 	bl	8002f4c <siprintf>
				writeMsg(&USART6Comm, bufferData);
 8000f18:	492a      	ldr	r1, [pc, #168]	; (8000fc4 <main+0x2bc>)
 8000f1a:	4828      	ldr	r0, [pc, #160]	; (8000fbc <main+0x2b4>)
 8000f1c:	f001 f923 	bl	8002166 <writeMsg>

				uint8_t AccelZ_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_L);
 8000f20:	2136      	movs	r1, #54	; 0x36
 8000f22:	4829      	ldr	r0, [pc, #164]	; (8000fc8 <main+0x2c0>)
 8000f24:	f000 fd66 	bl	80019f4 <i2c_readSingleRegister>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	75fb      	strb	r3, [r7, #23]
				uint8_t AccelZ_high = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_H);
 8000f2c:	2137      	movs	r1, #55	; 0x37
 8000f2e:	4826      	ldr	r0, [pc, #152]	; (8000fc8 <main+0x2c0>)
 8000f30:	f000 fd60 	bl	80019f4 <i2c_readSingleRegister>
 8000f34:	4603      	mov	r3, r0
 8000f36:	75bb      	strb	r3, [r7, #22]
				int16_t AccelZ = AccelZ_high << 8 | AccelZ_low;
 8000f38:	7dbb      	ldrb	r3, [r7, #22]
 8000f3a:	021b      	lsls	r3, r3, #8
 8000f3c:	b21a      	sxth	r2, r3
 8000f3e:	7dfb      	ldrb	r3, [r7, #23]
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	4313      	orrs	r3, r2
 8000f44:	82bb      	strh	r3, [r7, #20]
				float Z_axis = AccelZ * 0.0039 * 9.8;
 8000f46:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff faf2 	bl	8000534 <__aeabi_i2d>
 8000f50:	a315      	add	r3, pc, #84	; (adr r3, 8000fa8 <main+0x2a0>)
 8000f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f56:	f7ff fb57 	bl	8000608 <__aeabi_dmul>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4610      	mov	r0, r2
 8000f60:	4619      	mov	r1, r3
 8000f62:	a313      	add	r3, pc, #76	; (adr r3, 8000fb0 <main+0x2a8>)
 8000f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f68:	f7ff fb4e 	bl	8000608 <__aeabi_dmul>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	f7ff fe40 	bl	8000bf8 <__aeabi_d2f>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	613b      	str	r3, [r7, #16]
				sprintf(bufferData, "AccelZ = %.2f \n", Z_axis);
 8000f7c:	6938      	ldr	r0, [r7, #16]
 8000f7e:	f7ff faeb 	bl	8000558 <__aeabi_f2d>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	491a      	ldr	r1, [pc, #104]	; (8000ff0 <main+0x2e8>)
 8000f88:	480e      	ldr	r0, [pc, #56]	; (8000fc4 <main+0x2bc>)
 8000f8a:	f001 ffdf 	bl	8002f4c <siprintf>
				writeMsg(&USART6Comm, bufferData);
 8000f8e:	490d      	ldr	r1, [pc, #52]	; (8000fc4 <main+0x2bc>)
 8000f90:	480a      	ldr	r0, [pc, #40]	; (8000fbc <main+0x2b4>)
 8000f92:	f001 f8e8 	bl	8002166 <writeMsg>
				rxData = '\0';
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <main+0x2b0>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
 8000f9c:	e6b9      	b.n	8000d12 <main+0xa>
			}
			else{
				rxData = '\0';
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <main+0x2b0>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
		if(rxData != '\0'){
 8000fa4:	e6b5      	b.n	8000d12 <main+0xa>
 8000fa6:	bf00      	nop
 8000fa8:	8e8a71de 	.word	0x8e8a71de
 8000fac:	3f6ff2e4 	.word	0x3f6ff2e4
 8000fb0:	9999999a 	.word	0x9999999a
 8000fb4:	40239999 	.word	0x40239999
 8000fb8:	20000311 	.word	0x20000311
 8000fbc:	2000025c 	.word	0x2000025c
 8000fc0:	08006b60 	.word	0x08006b60
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	20000308 	.word	0x20000308
 8000fcc:	20000310 	.word	0x20000310
 8000fd0:	08006b70 	.word	0x08006b70
 8000fd4:	08006b84 	.word	0x08006b84
 8000fd8:	08006b9c 	.word	0x08006b9c
 8000fdc:	08006bb4 	.word	0x08006bb4
 8000fe0:	08006bc8 	.word	0x08006bc8
 8000fe4:	08006bd8 	.word	0x08006bd8
 8000fe8:	08006bec 	.word	0x08006bec
 8000fec:	08006bfc 	.word	0x08006bfc
 8000ff0:	08006c10 	.word	0x08006c10

08000ff4 <init_Hardware>:
	}
	return 0;
}

//Función de configuración de los elementos del sistema.
void init_Hardware(void){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0

	// Se configura el PLL con los parámetros dados.
	handlerPLL.PLL_Config.PLL_voltage		= VOLTAGE_84MHZ;
 8000ff8:	4b56      	ldr	r3, [pc, #344]	; (8001154 <init_Hardware+0x160>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
	handlerPLL.PLL_Config.PLL_frecuency		= FRECUENCY_80MHZ;
 8000ffe:	4b55      	ldr	r3, [pc, #340]	; (8001154 <init_Hardware+0x160>)
 8001000:	2201      	movs	r2, #1
 8001002:	705a      	strb	r2, [r3, #1]
	PLL_Config(&handlerPLL);
 8001004:	4853      	ldr	r0, [pc, #332]	; (8001154 <init_Hardware+0x160>)
 8001006:	f000 fd49 	bl	8001a9c <PLL_Config>
	getConfigPLL();
 800100a:	f000 fe51 	bl	8001cb0 <getConfigPLL>

	/* LED DE ESTADO A 250 ms aproximadamente. */
	handlerBlinkyPin.pGPIOx 									= GPIOA;
 800100e:	4b52      	ldr	r3, [pc, #328]	; (8001158 <init_Hardware+0x164>)
 8001010:	4a52      	ldr	r2, [pc, #328]	; (800115c <init_Hardware+0x168>)
 8001012:	601a      	str	r2, [r3, #0]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinNumber 				= PIN_5;
 8001014:	4b50      	ldr	r3, [pc, #320]	; (8001158 <init_Hardware+0x164>)
 8001016:	2205      	movs	r2, #5
 8001018:	711a      	strb	r2, [r3, #4]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 800101a:	4b4f      	ldr	r3, [pc, #316]	; (8001158 <init_Hardware+0x164>)
 800101c:	2201      	movs	r2, #1
 800101e:	715a      	strb	r2, [r3, #5]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8001020:	4b4d      	ldr	r3, [pc, #308]	; (8001158 <init_Hardware+0x164>)
 8001022:	2200      	movs	r2, #0
 8001024:	721a      	strb	r2, [r3, #8]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinSpeed  				= GPIO_OSPEED_FAST;
 8001026:	4b4c      	ldr	r3, [pc, #304]	; (8001158 <init_Hardware+0x164>)
 8001028:	2202      	movs	r2, #2
 800102a:	719a      	strb	r2, [r3, #6]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinPuPdControl			= GPIO_PUPDR_NOTHING;
 800102c:	4b4a      	ldr	r3, [pc, #296]	; (8001158 <init_Hardware+0x164>)
 800102e:	2200      	movs	r2, #0
 8001030:	71da      	strb	r2, [r3, #7]

	// Se carga la configuración del Blinky,
	GPIO_Config(&handlerBlinkyPin);
 8001032:	4849      	ldr	r0, [pc, #292]	; (8001158 <init_Hardware+0x164>)
 8001034:	f000 fa08 	bl	8001448 <GPIO_Config>
	GPIO_WritePin(&handlerBlinkyPin, SET);
 8001038:	2101      	movs	r1, #1
 800103a:	4847      	ldr	r0, [pc, #284]	; (8001158 <init_Hardware+0x164>)
 800103c:	f000 fb2c 	bl	8001698 <GPIO_WritePin>

	// Se configura el timer del blinky.
	handlerBlinkyTimer.ptrTIMx								= TIM2;
 8001040:	4b47      	ldr	r3, [pc, #284]	; (8001160 <init_Hardware+0x16c>)
 8001042:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001046:	601a      	str	r2, [r3, #0]
	handlerBlinkyTimer.TIMx_Config.TIMx_mode				= BTIMER_MODE_UP;
 8001048:	4b45      	ldr	r3, [pc, #276]	; (8001160 <init_Hardware+0x16c>)
 800104a:	2200      	movs	r2, #0
 800104c:	711a      	strb	r2, [r3, #4]
	handlerBlinkyTimer.TIMx_Config.TIMx_speed				= BTIMER_SPEED_80MHz;
 800104e:	4b44      	ldr	r3, [pc, #272]	; (8001160 <init_Hardware+0x16c>)
 8001050:	f641 72a4 	movw	r2, #8100	; 0x1fa4
 8001054:	609a      	str	r2, [r3, #8]
	handlerBlinkyTimer.TIMx_Config.TIMx_period				= 2500;
 8001056:	4b42      	ldr	r3, [pc, #264]	; (8001160 <init_Hardware+0x16c>)
 8001058:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800105c:	60da      	str	r2, [r3, #12]
	handlerBlinkyTimer.TIMx_Config.TIMx_interruptEnable 	= BTIMER_INTERRUPT_ENABLE;
 800105e:	4b40      	ldr	r3, [pc, #256]	; (8001160 <init_Hardware+0x16c>)
 8001060:	2201      	movs	r2, #1
 8001062:	741a      	strb	r2, [r3, #16]

	// Se carga lo hecho sobre el timer del blinky.
	BasicTimer_Config(&handlerBlinkyTimer);
 8001064:	483e      	ldr	r0, [pc, #248]	; (8001160 <init_Hardware+0x16c>)
 8001066:	f000 f8f3 	bl	8001250 <BasicTimer_Config>

	/* Configuración del USART */
	// Transmisión
	handlerUSARTPINTX.pGPIOx  							= GPIOA;
 800106a:	4b3e      	ldr	r3, [pc, #248]	; (8001164 <init_Hardware+0x170>)
 800106c:	4a3b      	ldr	r2, [pc, #236]	; (800115c <init_Hardware+0x168>)
 800106e:	601a      	str	r2, [r3, #0]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinNumber 	= PIN_11;
 8001070:	4b3c      	ldr	r3, [pc, #240]	; (8001164 <init_Hardware+0x170>)
 8001072:	220b      	movs	r2, #11
 8001074:	711a      	strb	r2, [r3, #4]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFN;
 8001076:	4b3b      	ldr	r3, [pc, #236]	; (8001164 <init_Hardware+0x170>)
 8001078:	2202      	movs	r2, #2
 800107a:	715a      	strb	r2, [r3, #5]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinAltFunMode = AF8;
 800107c:	4b39      	ldr	r3, [pc, #228]	; (8001164 <init_Hardware+0x170>)
 800107e:	2208      	movs	r2, #8
 8001080:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerUSARTPINTX);
 8001082:	4838      	ldr	r0, [pc, #224]	; (8001164 <init_Hardware+0x170>)
 8001084:	f000 f9e0 	bl	8001448 <GPIO_Config>

	// Recepción
	handlerUSARTPINRX.pGPIOx 						 	= GPIOA;
 8001088:	4b37      	ldr	r3, [pc, #220]	; (8001168 <init_Hardware+0x174>)
 800108a:	4a34      	ldr	r2, [pc, #208]	; (800115c <init_Hardware+0x168>)
 800108c:	601a      	str	r2, [r3, #0]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinNumber		= PIN_12;
 800108e:	4b36      	ldr	r3, [pc, #216]	; (8001168 <init_Hardware+0x174>)
 8001090:	220c      	movs	r2, #12
 8001092:	711a      	strb	r2, [r3, #4]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFN;
 8001094:	4b34      	ldr	r3, [pc, #208]	; (8001168 <init_Hardware+0x174>)
 8001096:	2202      	movs	r2, #2
 8001098:	715a      	strb	r2, [r3, #5]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinAltFunMode = AF8;
 800109a:	4b33      	ldr	r3, [pc, #204]	; (8001168 <init_Hardware+0x174>)
 800109c:	2208      	movs	r2, #8
 800109e:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerUSARTPINRX);
 80010a0:	4831      	ldr	r0, [pc, #196]	; (8001168 <init_Hardware+0x174>)
 80010a2:	f000 f9d1 	bl	8001448 <GPIO_Config>

	// Para el USART 6
	USART6Comm.ptrUSARTx 					= USART6;
 80010a6:	4b31      	ldr	r3, [pc, #196]	; (800116c <init_Hardware+0x178>)
 80010a8:	4a31      	ldr	r2, [pc, #196]	; (8001170 <init_Hardware+0x17c>)
 80010aa:	601a      	str	r2, [r3, #0]
	USART6Comm.USART_Config.USART_baudrate 	= USART_BAUDRATE_115200;
 80010ac:	4b2f      	ldr	r3, [pc, #188]	; (800116c <init_Hardware+0x178>)
 80010ae:	2202      	movs	r2, #2
 80010b0:	715a      	strb	r2, [r3, #5]
	USART6Comm.USART_Config.USART_datasize 	= USART_DATASIZE_8BIT;
 80010b2:	4b2e      	ldr	r3, [pc, #184]	; (800116c <init_Hardware+0x178>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	719a      	strb	r2, [r3, #6]
	USART6Comm.USART_Config.USART_parity 	= USART_PARITY_NONE;
 80010b8:	4b2c      	ldr	r3, [pc, #176]	; (800116c <init_Hardware+0x178>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	71da      	strb	r2, [r3, #7]
	USART6Comm.USART_Config.USART_mode 		= USART_MODE_RXTX;
 80010be:	4b2b      	ldr	r3, [pc, #172]	; (800116c <init_Hardware+0x178>)
 80010c0:	2202      	movs	r2, #2
 80010c2:	711a      	strb	r2, [r3, #4]
	USART6Comm.USART_Config.USART_stopbits 	= USART_STOPBIT_1;
 80010c4:	4b29      	ldr	r3, [pc, #164]	; (800116c <init_Hardware+0x178>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	721a      	strb	r2, [r3, #8]
	USART6Comm.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;
 80010ca:	4b28      	ldr	r3, [pc, #160]	; (800116c <init_Hardware+0x178>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	725a      	strb	r2, [r3, #9]

	// Se carga lo hecho sobre el USART
	USART_Config(&USART6Comm);
 80010d0:	4826      	ldr	r0, [pc, #152]	; (800116c <init_Hardware+0x178>)
 80010d2:	f000 fe2b 	bl	8001d2c <USART_Config>

	//Configuración I2C
	SCL.pGPIOx                                    = GPIOB;
 80010d6:	4b27      	ldr	r3, [pc, #156]	; (8001174 <init_Hardware+0x180>)
 80010d8:	4a27      	ldr	r2, [pc, #156]	; (8001178 <init_Hardware+0x184>)
 80010da:	601a      	str	r2, [r3, #0]
	SCL.GPIO_PinConfig.GPIO_PinNumber             = PIN_8;
 80010dc:	4b25      	ldr	r3, [pc, #148]	; (8001174 <init_Hardware+0x180>)
 80010de:	2208      	movs	r2, #8
 80010e0:	711a      	strb	r2, [r3, #4]
	SCL.GPIO_PinConfig.GPIO_PinMode               = GPIO_MODE_ALTFN;
 80010e2:	4b24      	ldr	r3, [pc, #144]	; (8001174 <init_Hardware+0x180>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	715a      	strb	r2, [r3, #5]
	SCL.GPIO_PinConfig.GPIO_PinOPType             = GPIO_OTYPE_OPENDRAIN;
 80010e8:	4b22      	ldr	r3, [pc, #136]	; (8001174 <init_Hardware+0x180>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	721a      	strb	r2, [r3, #8]
	SCL.GPIO_PinConfig.GPIO_PinPuPdControl        = GPIO_PUPDR_NOTHING;
 80010ee:	4b21      	ldr	r3, [pc, #132]	; (8001174 <init_Hardware+0x180>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	71da      	strb	r2, [r3, #7]
	SCL.GPIO_PinConfig.GPIO_PinSpeed              = GPIO_OSPEED_FAST;
 80010f4:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <init_Hardware+0x180>)
 80010f6:	2202      	movs	r2, #2
 80010f8:	719a      	strb	r2, [r3, #6]
	SCL.GPIO_PinConfig.GPIO_PinAltFunMode         = AF4;
 80010fa:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <init_Hardware+0x180>)
 80010fc:	2204      	movs	r2, #4
 80010fe:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&SCL);
 8001100:	481c      	ldr	r0, [pc, #112]	; (8001174 <init_Hardware+0x180>)
 8001102:	f000 f9a1 	bl	8001448 <GPIO_Config>

	SDA.pGPIOx                                    = GPIOB;
 8001106:	4b1d      	ldr	r3, [pc, #116]	; (800117c <init_Hardware+0x188>)
 8001108:	4a1b      	ldr	r2, [pc, #108]	; (8001178 <init_Hardware+0x184>)
 800110a:	601a      	str	r2, [r3, #0]
	SDA.GPIO_PinConfig.GPIO_PinNumber             = PIN_9;
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <init_Hardware+0x188>)
 800110e:	2209      	movs	r2, #9
 8001110:	711a      	strb	r2, [r3, #4]
	SDA.GPIO_PinConfig.GPIO_PinMode               = GPIO_MODE_ALTFN;
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <init_Hardware+0x188>)
 8001114:	2202      	movs	r2, #2
 8001116:	715a      	strb	r2, [r3, #5]
	SDA.GPIO_PinConfig.GPIO_PinOPType              = GPIO_OTYPE_OPENDRAIN;
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <init_Hardware+0x188>)
 800111a:	2201      	movs	r2, #1
 800111c:	721a      	strb	r2, [r3, #8]
	SDA.GPIO_PinConfig.GPIO_PinPuPdControl        = GPIO_PUPDR_NOTHING;
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <init_Hardware+0x188>)
 8001120:	2200      	movs	r2, #0
 8001122:	71da      	strb	r2, [r3, #7]
	SDA.GPIO_PinConfig.GPIO_PinSpeed              = GPIO_OSPEED_FAST;
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <init_Hardware+0x188>)
 8001126:	2202      	movs	r2, #2
 8001128:	719a      	strb	r2, [r3, #6]
	SDA.GPIO_PinConfig.GPIO_PinAltFunMode         = AF4;
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <init_Hardware+0x188>)
 800112c:	2204      	movs	r2, #4
 800112e:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&SDA);
 8001130:	4812      	ldr	r0, [pc, #72]	; (800117c <init_Hardware+0x188>)
 8001132:	f000 f989 	bl	8001448 <GPIO_Config>

	Acelerometer.ptrI2Cx                            = I2C1;
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <init_Hardware+0x18c>)
 8001138:	4a12      	ldr	r2, [pc, #72]	; (8001184 <init_Hardware+0x190>)
 800113a:	601a      	str	r2, [r3, #0]
	Acelerometer.modeI2C                            = I2C_MODE_FM;
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <init_Hardware+0x18c>)
 800113e:	2201      	movs	r2, #1
 8001140:	715a      	strb	r2, [r3, #5]
	Acelerometer.slaveAddress                       = ACCEL_ADDRESS;
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <init_Hardware+0x18c>)
 8001144:	221d      	movs	r2, #29
 8001146:	711a      	strb	r2, [r3, #4]
	i2c_config(&Acelerometer);
 8001148:	480d      	ldr	r0, [pc, #52]	; (8001180 <init_Hardware+0x18c>)
 800114a:	f000 fae5 	bl	8001718 <i2c_config>

}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000234 	.word	0x20000234
 8001158:	20000238 	.word	0x20000238
 800115c:	40020000 	.word	0x40020000
 8001160:	20000314 	.word	0x20000314
 8001164:	20000244 	.word	0x20000244
 8001168:	20000250 	.word	0x20000250
 800116c:	2000025c 	.word	0x2000025c
 8001170:	40011400 	.word	0x40011400
 8001174:	200002fc 	.word	0x200002fc
 8001178:	40020400 	.word	0x40020400
 800117c:	200002f0 	.word	0x200002f0
 8001180:	20000308 	.word	0x20000308
 8001184:	40005400 	.word	0x40005400

08001188 <BasicTimer2_Callback>:

// Callback para el blinky pin.
void BasicTimer2_Callback(void){
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handlerBlinkyPin);
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <BasicTimer2_Callback+0x1c>)
 800118e:	f000 faad 	bl	80016ec <GPIOxTooglePin>
	sendMSG++;
 8001192:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <BasicTimer2_Callback+0x20>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <BasicTimer2_Callback+0x20>)
 800119c:	701a      	strb	r2, [r3, #0]
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000238 	.word	0x20000238
 80011a8:	200002ec 	.word	0x200002ec

080011ac <usart6Rx_Callback>:

void usart6Rx_Callback(void){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	//Leemo el valor del registro DR, donde se encuentra almacenado el dato que llega
	// ESto además debe bajar la bandera de la interrupción
	rxData = getRxData();
 80011b0:	f000 fff2 	bl	8002198 <getRxData>
 80011b4:	4603      	mov	r3, r0
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b01      	ldr	r3, [pc, #4]	; (80011c0 <usart6Rx_Callback+0x14>)
 80011ba:	701a      	strb	r2, [r3, #0]
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000311 	.word	0x20000311

080011c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011c4:	480d      	ldr	r0, [pc, #52]	; (80011fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <LoopForever+0x6>)
  ldr r1, =_edata
 80011ce:	490d      	ldr	r1, [pc, #52]	; (8001204 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011d0:	4a0d      	ldr	r2, [pc, #52]	; (8001208 <LoopForever+0xe>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <LoopForever+0x12>)
  ldr r4, =_ebss
 80011e4:	4c0a      	ldr	r4, [pc, #40]	; (8001210 <LoopForever+0x16>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011f2:	f001 f813 	bl	800221c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011f6:	f7ff fd87 	bl	8000d08 <main>

080011fa <LoopForever>:

LoopForever:
    b LoopForever
 80011fa:	e7fe      	b.n	80011fa <LoopForever>
  ldr   r0, =_estack
 80011fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001204:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8001208:	080070cc 	.word	0x080070cc
  ldr r2, =_sbss
 800120c:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8001210:	20000344 	.word	0x20000344

08001214 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001214:	e7fe      	b.n	8001214 <ADC_IRQHandler>
	...

08001218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	2b00      	cmp	r3, #0
 8001228:	db0b      	blt.n	8001242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 021f 	and.w	r2, r3, #31
 8001230:	4906      	ldr	r1, [pc, #24]	; (800124c <__NVIC_EnableIRQ+0x34>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	2001      	movs	r0, #1
 800123a:	fa00 f202 	lsl.w	r2, r0, r2
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	e000e100 	.word	0xe000e100

08001250 <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrBTimerHandler->ptrTIMx;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a4e      	ldr	r2, [pc, #312]	; (8001398 <BasicTimer_Config+0x148>)
 800125e:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001260:	b672      	cpsid	i
}
 8001262:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();
	/* 1. Activar la señal de reloj del periférico requerido */
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800126c:	d106      	bne.n	800127c <BasicTimer_Config+0x2c>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 800126e:	4b4b      	ldr	r3, [pc, #300]	; (800139c <BasicTimer_Config+0x14c>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	4a4a      	ldr	r2, [pc, #296]	; (800139c <BasicTimer_Config+0x14c>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6413      	str	r3, [r2, #64]	; 0x40
 800127a:	e024      	b.n	80012c6 <BasicTimer_Config+0x76>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a47      	ldr	r2, [pc, #284]	; (80013a0 <BasicTimer_Config+0x150>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d106      	bne.n	8001294 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001286:	4b45      	ldr	r3, [pc, #276]	; (800139c <BasicTimer_Config+0x14c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	4a44      	ldr	r2, [pc, #272]	; (800139c <BasicTimer_Config+0x14c>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	6413      	str	r3, [r2, #64]	; 0x40
 8001292:	e018      	b.n	80012c6 <BasicTimer_Config+0x76>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a42      	ldr	r2, [pc, #264]	; (80013a4 <BasicTimer_Config+0x154>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d106      	bne.n	80012ac <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 800129e:	4b3f      	ldr	r3, [pc, #252]	; (800139c <BasicTimer_Config+0x14c>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	4a3e      	ldr	r2, [pc, #248]	; (800139c <BasicTimer_Config+0x14c>)
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	6413      	str	r3, [r2, #64]	; 0x40
 80012aa:	e00c      	b.n	80012c6 <BasicTimer_Config+0x76>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a3d      	ldr	r2, [pc, #244]	; (80013a8 <BasicTimer_Config+0x158>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d106      	bne.n	80012c4 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 80012b6:	4b39      	ldr	r3, [pc, #228]	; (800139c <BasicTimer_Config+0x14c>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	4a38      	ldr	r2, [pc, #224]	; (800139c <BasicTimer_Config+0x14c>)
 80012bc:	f043 0308 	orr.w	r3, r3, #8
 80012c0:	6413      	str	r3, [r2, #64]	; 0x40
 80012c2:	e000      	b.n	80012c6 <BasicTimer_Config+0x76>
	}

	else{
		__NOP();
 80012c4:	bf00      	nop
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */
	// -1 porque el contador empieza en 0
	ptrBTimerHandler->ptrTIMx-> PSC = ptrBTimerHandler ->TIMx_Config.TIMx_speed - 1;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	3a01      	subs	r2, #1
 80012d0:	629a      	str	r2, [r3, #40]	; 0x28

	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	791b      	ldrb	r3, [r3, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d112      	bne.n	8001300 <BasicTimer_Config+0xb0>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Necesitamos poner la direccion en 0 para que cuente hacia arria TIM_CR1_DIR = 1, entonces
		// lo negamos y hacemos una AND con el valor actual.
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0210 	bic.w	r2, r2, #16
 80012e8:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	3a01      	subs	r2, #1
 80012f4:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2200      	movs	r2, #0
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24
 80012fe:	e00d      	b.n	800131c <BasicTimer_Config+0xcc>

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		// Cuando CR1 = 1 es descendente
		ptrBTimerHandler->ptrTIMx->CR1 = TIM_CR1_DIR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2210      	movs	r2, #16
 8001306:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		ptrBTimerHandler-> ptrTIMx->ARR = 0;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2200      	movs	r2, #0
 800130e:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68da      	ldr	r2, [r3, #12]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	3a01      	subs	r2, #1
 800131a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 0201 	orr.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]
	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	// El registro encargado de la interrupcion es el UIE

	// Modificar con el ciclo If
	ptrBTimerHandler->ptrTIMx->DIER |= ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable; //TIM_DIER_UIE
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	7c1b      	ldrb	r3, [r3, #16]
 8001336:	4619      	mov	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	430a      	orrs	r2, r1
 800133e:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001348:	d103      	bne.n	8001352 <BasicTimer_Config+0x102>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 800134a:	201c      	movs	r0, #28
 800134c:	f7ff ff64 	bl	8001218 <__NVIC_EnableIRQ>
 8001350:	e01b      	b.n	800138a <BasicTimer_Config+0x13a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <BasicTimer_Config+0x150>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d103      	bne.n	8001364 <BasicTimer_Config+0x114>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 800135c:	201d      	movs	r0, #29
 800135e:	f7ff ff5b 	bl	8001218 <__NVIC_EnableIRQ>
 8001362:	e012      	b.n	800138a <BasicTimer_Config+0x13a>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <BasicTimer_Config+0x154>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d103      	bne.n	8001376 <BasicTimer_Config+0x126>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 800136e:	201e      	movs	r0, #30
 8001370:	f7ff ff52 	bl	8001218 <__NVIC_EnableIRQ>
 8001374:	e009      	b.n	800138a <BasicTimer_Config+0x13a>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <BasicTimer_Config+0x158>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d103      	bne.n	8001388 <BasicTimer_Config+0x138>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8001380:	2032      	movs	r0, #50	; 0x32
 8001382:	f7ff ff49 	bl	8001218 <__NVIC_EnableIRQ>
 8001386:	e000      	b.n	800138a <BasicTimer_Config+0x13a>
	}

	else{
		__NOP();
 8001388:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800138a:	b662      	cpsie	i
}
 800138c:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000328 	.word	0x20000328
 800139c:	40023800 	.word	0x40023800
 80013a0:	40000400 	.word	0x40000400
 80013a4:	40000800 	.word	0x40000800
 80013a8:	40000c00 	.word	0x40000c00

080013ac <BasicTimer3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer3_Callback(void){
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80013b0:	bf00      	nop
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr

080013ba <BasicTimer4_Callback>:
__attribute__((weak)) void BasicTimer4_Callback(void){
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80013be:	bf00      	nop
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80013cc:	bf00      	nop
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr

080013d6 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 80013d6:	b580      	push	{r7, lr}
 80013d8:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM2->SR &= ~TIM_SR_UIF;
 80013da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013e4:	f023 0301 	bic.w	r3, r3, #1
 80013e8:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer2_Callback();
 80013ea:	f7ff fecd 	bl	8001188 <BasicTimer2_Callback>
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM3->SR &= ~TIM_SR_UIF;
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <TIM3_IRQHandler+0x18>)
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	4a03      	ldr	r2, [pc, #12]	; (800140c <TIM3_IRQHandler+0x18>)
 80013fe:	f023 0301 	bic.w	r3, r3, #1
 8001402:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer3_Callback();
 8001404:	f7ff ffd2 	bl	80013ac <BasicTimer3_Callback>
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40000400 	.word	0x40000400

08001410 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM4->SR &= ~TIM_SR_UIF;
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <TIM4_IRQHandler+0x18>)
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	4a03      	ldr	r2, [pc, #12]	; (8001428 <TIM4_IRQHandler+0x18>)
 800141a:	f023 0301 	bic.w	r3, r3, #1
 800141e:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer4_Callback();
 8001420:	f7ff ffcb 	bl	80013ba <BasicTimer4_Callback>
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40000800 	.word	0x40000800

0800142c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM5->SR &= ~TIM_SR_UIF;
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <TIM5_IRQHandler+0x18>)
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	4a03      	ldr	r2, [pc, #12]	; (8001444 <TIM5_IRQHandler+0x18>)
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer5_Callback();
 800143c:	f7ff ffc4 	bl	80013c8 <BasicTimer5_Callback>
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40000c00 	.word	0x40000c00

08001448 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemento "activar el periferico o activar la señal de reloj del periferico)
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]

	// 1)Activar el periferico
	//verificamos para GPIOA
	if(pGPIOHandler->pGPIOx == GPIOA){
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a87      	ldr	r2, [pc, #540]	; (800167c <GPIO_Config+0x234>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d106      	bne.n	8001470 <GPIO_Config+0x28>
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 8001462:	4b87      	ldr	r3, [pc, #540]	; (8001680 <GPIO_Config+0x238>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a86      	ldr	r2, [pc, #536]	; (8001680 <GPIO_Config+0x238>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	e03a      	b.n	80014e6 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx == GPIOB){
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a83      	ldr	r2, [pc, #524]	; (8001684 <GPIO_Config+0x23c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d106      	bne.n	8001488 <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 800147a:	4b81      	ldr	r3, [pc, #516]	; (8001680 <GPIO_Config+0x238>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a80      	ldr	r2, [pc, #512]	; (8001680 <GPIO_Config+0x238>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	e02e      	b.n	80014e6 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if(pGPIOHandler->pGPIOx == GPIOC){
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a7e      	ldr	r2, [pc, #504]	; (8001688 <GPIO_Config+0x240>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d106      	bne.n	80014a0 <GPIO_Config+0x58>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 8001492:	4b7b      	ldr	r3, [pc, #492]	; (8001680 <GPIO_Config+0x238>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a7a      	ldr	r2, [pc, #488]	; (8001680 <GPIO_Config+0x238>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	e022      	b.n	80014e6 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if(pGPIOHandler->pGPIOx == GPIOD){
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a79      	ldr	r2, [pc, #484]	; (800168c <GPIO_Config+0x244>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d106      	bne.n	80014b8 <GPIO_Config+0x70>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 80014aa:	4b75      	ldr	r3, [pc, #468]	; (8001680 <GPIO_Config+0x238>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a74      	ldr	r2, [pc, #464]	; (8001680 <GPIO_Config+0x238>)
 80014b0:	f043 0308 	orr.w	r3, r3, #8
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	e016      	b.n	80014e6 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if(pGPIOHandler->pGPIOx == GPIOE){
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a74      	ldr	r2, [pc, #464]	; (8001690 <GPIO_Config+0x248>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d106      	bne.n	80014d0 <GPIO_Config+0x88>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 80014c2:	4b6f      	ldr	r3, [pc, #444]	; (8001680 <GPIO_Config+0x238>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a6e      	ldr	r2, [pc, #440]	; (8001680 <GPIO_Config+0x238>)
 80014c8:	f043 0310 	orr.w	r3, r3, #16
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	e00a      	b.n	80014e6 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOH
	else if(pGPIOHandler->pGPIOx == GPIOH){
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a6f      	ldr	r2, [pc, #444]	; (8001694 <GPIO_Config+0x24c>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d105      	bne.n	80014e6 <GPIO_Config+0x9e>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 80014da:	4b69      	ldr	r3, [pc, #420]	; (8001680 <GPIO_Config+0x238>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a68      	ldr	r2, [pc, #416]	; (8001680 <GPIO_Config+0x238>)
 80014e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
	// Despues de activado, podemos comenzar a configurar.

	// 2) COnfigurando el registro GPIOx_MODER
	// Acá estamos leyendo config, moviendo "PinNumber" veces hacia la izquierda
	// ese valor (shift left) y todo eso lo cargamos en la variable auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	795b      	ldrb	r3, [r3, #5]
 80014ea:	461a      	mov	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	791b      	ldrb	r3, [r3, #4]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	60fb      	str	r3, [r7, #12]
	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro
	 * (debemos escribir 0b00) para lo cual aplicamos una mascara y una operación de
	 * bitwise AND
	 */
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	791b      	ldrb	r3, [r3, #4]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	2103      	movs	r1, #3
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	4619      	mov	r1, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	400a      	ands	r2, r1
 8001514:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6819      	ldr	r1, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	430a      	orrs	r2, r1
 8001524:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	7a1b      	ldrb	r3, [r3, #8]
 800152a:	461a      	mov	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	791b      	ldrb	r3, [r3, #4]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	791b      	ldrb	r3, [r3, #4]
 8001540:	4619      	mov	r1, r3
 8001542:	2301      	movs	r3, #1
 8001544:	408b      	lsls	r3, r1
 8001546:	43db      	mvns	r3, r3
 8001548:	4619      	mov	r1, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	400a      	ands	r2, r1
 8001550:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6859      	ldr	r1, [r3, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	430a      	orrs	r2, r1
 8001560:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	799b      	ldrb	r3, [r3, #6]
 8001566:	461a      	mov	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	791b      	ldrb	r3, [r3, #4]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0B11 << 2 *pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	791b      	ldrb	r3, [r3, #4]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	2103      	movs	r1, #3
 8001582:	fa01 f303 	lsl.w	r3, r1, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	4619      	mov	r1, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	400a      	ands	r2, r1
 8001590:	609a      	str	r2, [r3, #8]

	//cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6899      	ldr	r1, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	430a      	orrs	r2, r1
 80015a0:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull up pull down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	79db      	ldrb	r3, [r3, #7]
 80015a6:	461a      	mov	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	791b      	ldrb	r3, [r3, #4]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	791b      	ldrb	r3, [r3, #4]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	2103      	movs	r1, #3
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	4619      	mov	r1, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	400a      	ands	r2, r1
 80015d0:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68d9      	ldr	r1, [r3, #12]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	430a      	orrs	r2, r1
 80015e0:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas.. se vera luego
	if (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	795b      	ldrb	r3, [r3, #5]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d143      	bne.n	8001672 <GPIO_Config+0x22a>

		//Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	791b      	ldrb	r3, [r3, #4]
 80015ee:	2b07      	cmp	r3, #7
 80015f0:	d81f      	bhi.n	8001632 <GPIO_Config+0x1ea>
			//Estamos en el registro AGRL, que controla los piner del pIN_0 AL PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	791b      	ldrb	r3, [r3, #4]
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del tegistro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6a1a      	ldr	r2, [r3, #32]
 8001600:	210f      	movs	r1, #15
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	4619      	mov	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	400a      	ands	r2, r1
 8001612:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor confiurado en la posicon seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6a1a      	ldr	r2, [r3, #32]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	7a5b      	ldrb	r3, [r3, #9]
 800161e:	4619      	mov	r1, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	4619      	mov	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} //Fin del GPIO_Config
 8001630:	e01f      	b.n	8001672 <GPIO_Config+0x22a>
			auxPosition = 4* (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber -8);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	791b      	ldrb	r3, [r3, #4]
 8001636:	3b08      	subs	r3, #8
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001642:	210f      	movs	r1, #15
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	fa01 f303 	lsl.w	r3, r1, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	4619      	mov	r1, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	400a      	ands	r2, r1
 8001654:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	7a5b      	ldrb	r3, [r3, #9]
 8001660:	4619      	mov	r1, r3
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	fa01 f303 	lsl.w	r3, r1, r3
 8001668:	4619      	mov	r1, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	625a      	str	r2, [r3, #36]	; 0x24
} //Fin del GPIO_Config
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	40020000 	.word	0x40020000
 8001680:	40023800 	.word	0x40023800
 8001684:	40020400 	.word	0x40020400
 8001688:	40020800 	.word	0x40020800
 800168c:	40020c00 	.word	0x40020c00
 8001690:	40021000 	.word	0x40021000
 8001694:	40021c00 	.word	0x40021c00

08001698 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 *
 */
void GPIO_WritePin(GPIO_Handler_t *pPinHandler, uint8_t newState){
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->0DR &= ~(SET << pPinHandler ->GPIO_PinConfig.GPIO_PinNumber);
	if(newState == SET){
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d10d      	bne.n	80016c6 <GPIO_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	699a      	ldr	r2, [r3, #24]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	791b      	ldrb	r3, [r3, #4]
 80016b4:	4619      	mov	r1, r3
 80016b6:	2301      	movs	r3, #1
 80016b8:	408b      	lsls	r3, r1
 80016ba:	4619      	mov	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	619a      	str	r2, [r3, #24]
	else{
		//Trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
	}

}
 80016c4:	e00d      	b.n	80016e2 <GPIO_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	699a      	ldr	r2, [r3, #24]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	791b      	ldrb	r3, [r3, #4]
 80016d0:	3310      	adds	r3, #16
 80016d2:	2101      	movs	r1, #1
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	4619      	mov	r1, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	619a      	str	r2, [r3, #24]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <GPIOxTooglePin>:
	pinValue &= mask;

	return pinValue;
}

void GPIOxTooglePin(GPIO_Handler_t *pPinHandler){
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR ^= (SET <<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	791b      	ldrb	r3, [r3, #4]
 80016fe:	4619      	mov	r1, r3
 8001700:	2301      	movs	r3, #1
 8001702:	408b      	lsls	r3, r1
 8001704:	4619      	mov	r1, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	404a      	eors	r2, r1
 800170c:	615a      	str	r2, [r3, #20]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <i2c_config>:
 *
 * Además, estos pines deben ser configurados como salidas open-drain y con las
 * resistencias en modo pull-up..
 */

void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	/* 1. Activamos la señal de reloj para el modulo I2C seleccionado */
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a45      	ldr	r2, [pc, #276]	; (800183c <i2c_config+0x124>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d106      	bne.n	8001738 <i2c_config+0x20>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800172a:	4b45      	ldr	r3, [pc, #276]	; (8001840 <i2c_config+0x128>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a44      	ldr	r2, [pc, #272]	; (8001840 <i2c_config+0x128>)
 8001730:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
 8001736:	e016      	b.n	8001766 <i2c_config+0x4e>
	}
	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a41      	ldr	r2, [pc, #260]	; (8001844 <i2c_config+0x12c>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d106      	bne.n	8001750 <i2c_config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8001742:	4b3f      	ldr	r3, [pc, #252]	; (8001840 <i2c_config+0x128>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	4a3e      	ldr	r2, [pc, #248]	; (8001840 <i2c_config+0x128>)
 8001748:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800174c:	6413      	str	r3, [r2, #64]	; 0x40
 800174e:	e00a      	b.n	8001766 <i2c_config+0x4e>
	}
	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a3c      	ldr	r2, [pc, #240]	; (8001848 <i2c_config+0x130>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d105      	bne.n	8001766 <i2c_config+0x4e>
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 800175a:	4b39      	ldr	r3, [pc, #228]	; (8001840 <i2c_config+0x128>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a38      	ldr	r2, [pc, #224]	; (8001840 <i2c_config+0x128>)
 8001760:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001774:	601a      	str	r2, [r3, #0]
	__NOP();
 8001776:	bf00      	nop
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_SWRST;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001786:	601a      	str	r2, [r3, #0]

	/* 3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C
	 */
	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos); // Borramos la configuración previa
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001796:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_80_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);// Seleccionamos 80 MHz
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 80017a6:	605a      	str	r2, [r3, #4]
	/* 4. Configuramos el modo I2C en el que el sistema funciona
	 * En esta configuración se incluye también la configuración del reloj
	 * y el tiempo maximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los registros en 0
	 */
	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2200      	movs	r2, #0
 80017ae:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2200      	movs	r2, #0
 80017b6:	621a      	str	r2, [r3, #32]

	if (ptrHandlerI2C->modeI2C == I2C_MODE_SM){
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	795b      	ldrb	r3, [r3, #5]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d118      	bne.n	80017f2 <i2c_config+0xda>
		// Estamos en modo "standar" (SM mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~I2C_CCR_FS;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	69da      	ldr	r2, [r3, #28]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017ce:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que se encarga de generar la señal del reloj
		ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_SM_SPEED_100KHz << I2C_CCR_CCR_Pos);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	69da      	ldr	r2, [r3, #28]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 80017de:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que controla el tiempo T-Rise maximo
		ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6a1a      	ldr	r2, [r3, #32]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0229 	orr.w	r2, r2, #41	; 0x29
 80017ee:	621a      	str	r2, [r3, #32]
 80017f0:	e017      	b.n	8001822 <i2c_config+0x10a>
	}
	else{
		// Estamos en modo "fast" (FM mode)
		// Seleccionamos el modo fast
		ptrHandlerI2C->ptrI2Cx->CCR &= I2C_CCR_FS;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	69da      	ldr	r2, [r3, #28]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001800:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que se encarga de generar la señal del reloj
		ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz << I2C_CCR_CCR_Pos);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	69da      	ldr	r2, [r3, #28]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f042 0221 	orr.w	r2, r2, #33	; 0x21
 8001810:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que controla el tiempo T-Rise maximo
		ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6a1a      	ldr	r2, [r3, #32]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f042 020c 	orr.w	r2, r2, #12
 8001820:	621a      	str	r2, [r3, #32]
	}

	/* 5. Activamos el modulo I2C
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f042 0201 	orr.w	r2, r2, #1
 8001830:	601a      	str	r2, [r3, #0]
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	40005400 	.word	0x40005400
 8001840:	40023800 	.word	0x40023800
 8001844:	40005800 	.word	0x40005800
 8001848:	40005c00 	.word	0x40005c00

0800184c <i2c_stopTransaction>:

/* 8. Generamos la condición de stop
 */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	/* 7. Generamos la condición de stop
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001862:	601a      	str	r2, [r3, #0]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr

0800186e <i2c_startTransaction>:
/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_CR2
 * 2. Generamos la señal de "start"
 * 2a. Esperamos a que la bandera del evento "start" se levante.
 * Mientras esperamos, el valor de SB es 0, entonces la negación (!) es 1
 */
void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_CR2
	 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8001876:	e000      	b.n	800187a <i2c_startTransaction+0xc>
		__NOP();
 8001878:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f7      	bne.n	8001878 <i2c_startTransaction+0xa>
	}

	/* 2. Generamos la señal de "start"
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001896:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante.
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8001898:	e000      	b.n	800189c <i2c_startTransaction+0x2e>
		__NOP();
 800189a:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f7      	beq.n	800189a <i2c_startTransaction+0x2c>
	}
}
 80018aa:	bf00      	nop
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <i2c_reStartTransaction>:

/*
 */
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
	/* 2. Generamos la señal de "start"
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018cc:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante.
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80018ce:	e000      	b.n	80018d2 <i2c_reStartTransaction+0x1c>
		__NOP();
 80018d0:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f7      	beq.n	80018d0 <i2c_reStartTransaction+0x1a>
	}
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <i2c_sendNoAck>:

/* 7a. Activamos la indicación para no-ACK (indicación para el Slave de terminar)
 */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	/* Debemos escribir cero en la posición ACK del registro de control 1
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_ACK;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001902:	601a      	str	r2, [r3, #0]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr

0800190e <i2c_sendSlaveAddressRW>:
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 800190e:	b480      	push	{r7}
 8001910:	b085      	sub	sp, #20
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	460b      	mov	r3, r1
 8001918:	70fb      	strb	r3, [r7, #3]
 800191a:	4613      	mov	r3, r2
 800191c:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar
	 */
	uint8_t auxByte = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la dirección del Slave y el bit que indica que deseamos escribir un (0)
	 * (en el siguiente paso se envía la dirección de memoria que se desea escribir)
	 */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	005a      	lsls	r2, r3, #1
 8001926:	78bb      	ldrb	r3, [r7, #2]
 8001928:	431a      	orrs	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bandera del evento "addr" se levante
	 * (esto nos indica que la dirección fue enviada satisfactoriamente)
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8001930:	e000      	b.n	8001934 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 8001932:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f7      	beq.n	8001932 <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepción de ACK de la "addr",
	 * para lo cual debemos leer en secuencia primero el I2C_SR1 y luego el I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	73fb      	strb	r3, [r7, #15]
}
 8001952:	bf00      	nop
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	70fb      	strb	r3, [r7, #3]
	/* 4. Enviamos la dirección de memoria que deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	611a      	str	r2, [r3, #16]

	/* 4.1 Esperamos hasta que el byte sea transmitido
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8001970:	e000      	b.n	8001974 <i2c_sendMemoryAddress+0x18>
		__NOP();
 8001972:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f7      	beq.n	8001972 <i2c_sendMemoryAddress+0x16>
	}
}
 8001982:	bf00      	nop
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr

0800198e <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	460b      	mov	r3, r1
 8001998:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	78fa      	ldrb	r2, [r7, #3]
 80019a0:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 80019a2:	e000      	b.n	80019a6 <i2c_sendDataByte+0x18>
		__NOP();
 80019a4:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f7      	beq.n	80019a4 <i2c_sendDataByte+0x16>
	}
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <i2c_readDataByte>:

/**/
uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	/* 9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 80019c8:	e000      	b.n	80019cc <i2c_readDataByte+0xc>
		__NOP();
 80019ca:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0f7      	beq.n	80019ca <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->dataI2C;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	799b      	ldrb	r3, [r3, #6]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <i2c_readSingleRegister>:

/**/
uint8_t i2c_readSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	70fb      	strb	r3, [r7, #3]
	/* 0. Creamos una variable auxiliar para recibir el dato que leemos */
	uint8_t auxRead = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	73fb      	strb	r3, [r7, #15]

	/* 1. Generamos la condición de start */
	i2c_startTransaction(ptrHandlerI2C);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ff32 	bl	800186e <i2c_startTransaction>

	/* 2. Enviamos la dirección del esclavo y la indicación de ESCRIBIR */
	i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	791b      	ldrb	r3, [r3, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	4619      	mov	r1, r3
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ff7b 	bl	800190e <i2c_sendSlaveAddressRW>

	/* 3. Enviamos la dirección de memoria que deseamos leer */
	i2c_sendMemoryAddress(ptrHandlerI2C, regToRead);
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff9d 	bl	800195c <i2c_sendMemoryAddress>

	/* 4. Creamos una condición de reStart */
	i2c_reStartTransaction(ptrHandlerI2C);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ff47 	bl	80018b6 <i2c_reStartTransaction>

	/* 5. Enviamos la dirección del esclavo y la indicación de LEER */
	i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_READ_DATA);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	791b      	ldrb	r3, [r3, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	4619      	mov	r1, r3
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ff6c 	bl	800190e <i2c_sendSlaveAddressRW>

	/* 6. Generamos la condición de NoACK, para que el master no funciona y el slave solo envie 1 byte */
	i2c_sendNoAck(ptrHandlerI2C);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff ff58 	bl	80018ec <i2c_sendNoAck>

	/* 7. Generamos la señal de Stop, para que el slave se detenga después de 1 byte*/
	i2c_stopTransaction(ptrHandlerI2C);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ff05 	bl	800184c <i2c_stopTransaction>

	/* 8. Leemos el dato que envia el esclavo */
	auxRead = i2c_readDataByte(ptrHandlerI2C);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ffbc 	bl	80019c0 <i2c_readDataByte>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	73fb      	strb	r3, [r7, #15]

	return auxRead;
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <i2c_writeSingleRegister>:

/**/
void i2c_writeSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead, uint8_t newValue){
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
 8001a5e:	460b      	mov	r3, r1
 8001a60:	70fb      	strb	r3, [r7, #3]
 8001a62:	4613      	mov	r3, r2
 8001a64:	70bb      	strb	r3, [r7, #2]

	/* 1. Generamos la condición de Start*/
	i2c_startTransaction(ptrHandlerI2C);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ff01 	bl	800186e <i2c_startTransaction>

	/* 2. Enviamos la diracción del esclavo y la indicación de ESCRIBIR */
	i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	791b      	ldrb	r3, [r3, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	4619      	mov	r1, r3
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ff4a 	bl	800190e <i2c_sendSlaveAddressRW>

	/* 3. Enviamos la dirección de memoria que deseamos escribir*/
	i2c_sendMemoryAddress(ptrHandlerI2C, regToRead);
 8001a7a:	78fb      	ldrb	r3, [r7, #3]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ff6c 	bl	800195c <i2c_sendMemoryAddress>

	/* 4. Enviamos el valor que deseamos escribir */
	i2c_sendDataByte(ptrHandlerI2C, newValue);
 8001a84:	78bb      	ldrb	r3, [r7, #2]
 8001a86:	4619      	mov	r1, r3
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ff80 	bl	800198e <i2c_sendDataByte>

	/* 5. Generamos la condición de Stop, para que el slave se detenga después de un byte */
	i2c_stopTransaction(ptrHandlerI2C);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff fedc 	bl	800184c <i2c_stopTransaction>
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <PLL_Config>:
#include "PLLDriver.h"

uint32_t HSI_VALUE = 16000000;


void PLL_Config(PLL_Handler_t *ptrPLLHandler){
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

	// Se selecciona HSI como reloj interno del PLL en vez de un oscilador.
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC);
 8001aa4:	4b7e      	ldr	r3, [pc, #504]	; (8001ca0 <PLL_Config+0x204>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4a7d      	ldr	r2, [pc, #500]	; (8001ca0 <PLL_Config+0x204>)
 8001aaa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001aae:	6053      	str	r3, [r2, #4]

	// Se observa el valor del HSI RDY.
	while( !(RCC->CR & RCC_CR_HSIRDY) );
 8001ab0:	bf00      	nop
 8001ab2:	4b7b      	ldr	r3, [pc, #492]	; (8001ca0 <PLL_Config+0x204>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f9      	beq.n	8001ab2 <PLL_Config+0x16>

	// Se inicializa el power enable clock del APB1.
	RCC->APB1ENR |= RCC_APB1RSTR_PWRRST;
 8001abe:	4b78      	ldr	r3, [pc, #480]	; (8001ca0 <PLL_Config+0x204>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	4a77      	ldr	r2, [pc, #476]	; (8001ca0 <PLL_Config+0x204>)
 8001ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	6413      	str	r3, [r2, #64]	; 0x40


	// Estas líneas adecúan el acceso a la memoria del microcontrolador
	// para comenzar a ejecutar las instrucciones. Ver ACR.
	FLASH->ACR |= 1<<8;
 8001aca:	4b76      	ldr	r3, [pc, #472]	; (8001ca4 <PLL_Config+0x208>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a75      	ldr	r2, [pc, #468]	; (8001ca4 <PLL_Config+0x208>)
 8001ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad4:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= 1<<9;
 8001ad6:	4b73      	ldr	r3, [pc, #460]	; (8001ca4 <PLL_Config+0x208>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a72      	ldr	r2, [pc, #456]	; (8001ca4 <PLL_Config+0x208>)
 8001adc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ae0:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= 1<<10;
 8001ae2:	4b70      	ldr	r3, [pc, #448]	; (8001ca4 <PLL_Config+0x208>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a6f      	ldr	r2, [pc, #444]	; (8001ca4 <PLL_Config+0x208>)
 8001ae8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aec:	6013      	str	r3, [r2, #0]
	 *  los voltajes de las distintas frecuencias que pueden llegar a configurarse.
	 *  Además, deben establecerse diferentes tiempos de espera para cada rango.
	 */

	// Voltajes para las frecuencias dentro de un rango máximo de 64 MHz.
	if(ptrPLLHandler->PLL_Config.PLL_voltage == VOLTAGE_64MHZ){
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10c      	bne.n	8001b10 <PLL_Config+0x74>
		// Se toma 0 en el bit 15 y 1 en el bit 14 del PWR para la potencia.
		PWR->CR |= 01<<14;
 8001af6:	4b6c      	ldr	r3, [pc, #432]	; (8001ca8 <PLL_Config+0x20c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a6b      	ldr	r2, [pc, #428]	; (8001ca8 <PLL_Config+0x20c>)
 8001afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b00:	6013      	str	r3, [r2, #0]

		// Se configura el tiempo de espera.
		FLASH->ACR |= 1<<0;
 8001b02:	4b68      	ldr	r3, [pc, #416]	; (8001ca4 <PLL_Config+0x208>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a67      	ldr	r2, [pc, #412]	; (8001ca4 <PLL_Config+0x208>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	e02d      	b.n	8001b6c <PLL_Config+0xd0>
	}
	else if(ptrPLLHandler->PLL_Config.PLL_voltage == VOLTAGE_84MHZ){
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d10c      	bne.n	8001b32 <PLL_Config+0x96>
		// Se toma 1 en el bit 15 y 0 en el bit 14 del PWR para la potencia.
		PWR->CR |= 10<<14;
 8001b18:	4b63      	ldr	r3, [pc, #396]	; (8001ca8 <PLL_Config+0x20c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a62      	ldr	r2, [pc, #392]	; (8001ca8 <PLL_Config+0x20c>)
 8001b1e:	f443 3320 	orr.w	r3, r3, #163840	; 0x28000
 8001b22:	6013      	str	r3, [r2, #0]

		// Se configura el tiempo de espera.
		FLASH->ACR |= 3<<0;
 8001b24:	4b5f      	ldr	r3, [pc, #380]	; (8001ca4 <PLL_Config+0x208>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a5e      	ldr	r2, [pc, #376]	; (8001ca4 <PLL_Config+0x208>)
 8001b2a:	f043 0303 	orr.w	r3, r3, #3
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	e01c      	b.n	8001b6c <PLL_Config+0xd0>
	}
	else if(ptrPLLHandler->PLL_Config.PLL_voltage == VOLTAGE_100MHZ){
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d10c      	bne.n	8001b54 <PLL_Config+0xb8>
		// Se toma 1 en el bit 15 y 1 en el bit 14 del PWR para la potencia.
		PWR->CR |= 11<<14;
 8001b3a:	4b5b      	ldr	r3, [pc, #364]	; (8001ca8 <PLL_Config+0x20c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a5a      	ldr	r2, [pc, #360]	; (8001ca8 <PLL_Config+0x20c>)
 8001b40:	f443 3330 	orr.w	r3, r3, #180224	; 0x2c000
 8001b44:	6013      	str	r3, [r2, #0]

		// Se configura el tiempo de espera.
		FLASH->ACR |= 5<<0;
 8001b46:	4b57      	ldr	r3, [pc, #348]	; (8001ca4 <PLL_Config+0x208>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a56      	ldr	r2, [pc, #344]	; (8001ca4 <PLL_Config+0x208>)
 8001b4c:	f043 0305 	orr.w	r3, r3, #5
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e00b      	b.n	8001b6c <PLL_Config+0xd0>
	}
	else{
		// Implementamos la máxima frecuencia para el caso por defecto.
		PWR->CR |= 11<<14;
 8001b54:	4b54      	ldr	r3, [pc, #336]	; (8001ca8 <PLL_Config+0x20c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a53      	ldr	r2, [pc, #332]	; (8001ca8 <PLL_Config+0x20c>)
 8001b5a:	f443 3330 	orr.w	r3, r3, #180224	; 0x2c000
 8001b5e:	6013      	str	r3, [r2, #0]

		// Tiempo de espera.
		FLASH->ACR |= 5<<0;
 8001b60:	4b50      	ldr	r3, [pc, #320]	; (8001ca4 <PLL_Config+0x208>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a4f      	ldr	r2, [pc, #316]	; (8001ca4 <PLL_Config+0x208>)
 8001b66:	f043 0305 	orr.w	r3, r3, #5
 8001b6a:	6013      	str	r3, [r2, #0]
	}

	/*
	 * El preescaler null debe ser 1 para conseguir la máxima salida de frecuencia.
	 */
	RCC->CFGR |= 0001<<4;
 8001b6c:	4b4c      	ldr	r3, [pc, #304]	; (8001ca0 <PLL_Config+0x204>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	4a4b      	ldr	r2, [pc, #300]	; (8001ca0 <PLL_Config+0x204>)
 8001b72:	f043 0310 	orr.w	r3, r3, #16
 8001b76:	6093      	str	r3, [r2, #8]
	 * a 80 MHz que se encuentra evidentemente en un intervalo superior a este valor,
	 * se decide no incluir el primer preescaler que divide en 1 la frecuencia que se
	 * quiere implementar, sino comenzar con la división en 2,4,8,16...
	 */
	// Se divide en 2 el bus 1.
	RCC->CFGR |= (RCC_CFGR_PPRE1_DIV2);
 8001b78:	4b49      	ldr	r3, [pc, #292]	; (8001ca0 <PLL_Config+0x204>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	4a48      	ldr	r2, [pc, #288]	; (8001ca0 <PLL_Config+0x204>)
 8001b7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b82:	6093      	str	r3, [r2, #8]
	 * a 80 MHz, esta frecuencia se encuentra cómodamente ubicada antes de la
	 * frecuencia máxima del bus de datos, por tanto, el preescaler 0 que mantiene
	 * la frecuencia original, puede implementarse, dividiendo en 1.
	 */
	// Se divide en 1 el bus 2.
	RCC->CFGR |= (RCC_CFGR_PPRE2_DIV1);
 8001b84:	4b46      	ldr	r3, [pc, #280]	; (8001ca0 <PLL_Config+0x204>)
 8001b86:	4a46      	ldr	r2, [pc, #280]	; (8001ca0 <PLL_Config+0x204>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	6093      	str	r3, [r2, #8]

// Se debe configurar el sistema de manera que cuando la entrada del HSI
// sean 80 MHz, se mantenga.
	// La fuente de reloj del micro se configura sobre el HSI,
	RCC->PLLCFGR |= (0 << 22);
 8001b8c:	4b44      	ldr	r3, [pc, #272]	; (8001ca0 <PLL_Config+0x204>)
 8001b8e:	4a44      	ldr	r2, [pc, #272]	; (8001ca0 <PLL_Config+0x204>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	6053      	str	r3, [r2, #4]

	// Se divide la entrada de frecuencia en 8, para obtener 2 MHz.
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM_4);
 8001b94:	4b42      	ldr	r3, [pc, #264]	; (8001ca0 <PLL_Config+0x204>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	4a41      	ldr	r2, [pc, #260]	; (8001ca0 <PLL_Config+0x204>)
 8001b9a:	f023 0310 	bic.w	r3, r3, #16
 8001b9e:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLM_3);
 8001ba0:	4b3f      	ldr	r3, [pc, #252]	; (8001ca0 <PLL_Config+0x204>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	4a3e      	ldr	r2, [pc, #248]	; (8001ca0 <PLL_Config+0x204>)
 8001ba6:	f043 0308 	orr.w	r3, r3, #8
 8001baa:	6053      	str	r3, [r2, #4]

	// Se aplica una máscara un poco rudimentaria para garantizar la limpieza del
	// del registro.
	RCC->PLLCFGR &= 0b1111111111111000000000111111;
 8001bac:	4b3c      	ldr	r3, [pc, #240]	; (8001ca0 <PLL_Config+0x204>)
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	493b      	ldr	r1, [pc, #236]	; (8001ca0 <PLL_Config+0x204>)
 8001bb2:	4b3e      	ldr	r3, [pc, #248]	; (8001cac <PLL_Config+0x210>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	604b      	str	r3, [r1, #4]
	// Se ecriben los diferentes valores de las frecuencias que se quieren multiplicar.
	/* NOTE que aquí es donde se escriben cada una de las frecuencias dentro del
	 * registro de 9 bits que se tiene dentro del registro PLLCFGR del RCC qur se deciden
	 * aleatoriamente a gusto del usuario dentro del intervalo de voltaje escogido.
	 */
	if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_80MHZ){
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	785b      	ldrb	r3, [r3, #1]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d10c      	bne.n	8001bda <PLL_Config+0x13e>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_4);
 8001bc0:	4b37      	ldr	r3, [pc, #220]	; (8001ca0 <PLL_Config+0x204>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	4a36      	ldr	r2, [pc, #216]	; (8001ca0 <PLL_Config+0x204>)
 8001bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bca:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 8001bcc:	4b34      	ldr	r3, [pc, #208]	; (8001ca0 <PLL_Config+0x204>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	4a33      	ldr	r2, [pc, #204]	; (8001ca0 <PLL_Config+0x204>)
 8001bd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bd6:	6053      	str	r3, [r2, #4]
 8001bd8:	e03d      	b.n	8001c56 <PLL_Config+0x1ba>
	}else if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_100MHZ){
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	785b      	ldrb	r3, [r3, #1]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d112      	bne.n	8001c08 <PLL_Config+0x16c>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_2);
 8001be2:	4b2f      	ldr	r3, [pc, #188]	; (8001ca0 <PLL_Config+0x204>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4a2e      	ldr	r2, [pc, #184]	; (8001ca0 <PLL_Config+0x204>)
 8001be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bec:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_5);
 8001bee:	4b2c      	ldr	r3, [pc, #176]	; (8001ca0 <PLL_Config+0x204>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	4a2b      	ldr	r2, [pc, #172]	; (8001ca0 <PLL_Config+0x204>)
 8001bf4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bf8:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 8001bfa:	4b29      	ldr	r3, [pc, #164]	; (8001ca0 <PLL_Config+0x204>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4a28      	ldr	r2, [pc, #160]	; (8001ca0 <PLL_Config+0x204>)
 8001c00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c04:	6053      	str	r3, [r2, #4]
 8001c06:	e026      	b.n	8001c56 <PLL_Config+0x1ba>
	}else if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_70MHZ){
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	785b      	ldrb	r3, [r3, #1]
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d112      	bne.n	8001c36 <PLL_Config+0x19a>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_1);
 8001c10:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <PLL_Config+0x204>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	4a22      	ldr	r2, [pc, #136]	; (8001ca0 <PLL_Config+0x204>)
 8001c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c1a:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_2);
 8001c1c:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <PLL_Config+0x204>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	4a1f      	ldr	r2, [pc, #124]	; (8001ca0 <PLL_Config+0x204>)
 8001c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c26:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 8001c28:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <PLL_Config+0x204>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	4a1c      	ldr	r2, [pc, #112]	; (8001ca0 <PLL_Config+0x204>)
 8001c2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c32:	6053      	str	r3, [r2, #4]
 8001c34:	e00f      	b.n	8001c56 <PLL_Config+0x1ba>
	}else if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_65MHZ){
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	785b      	ldrb	r3, [r3, #1]
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d10b      	bne.n	8001c56 <PLL_Config+0x1ba>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_0);
 8001c3e:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <PLL_Config+0x204>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	4a17      	ldr	r2, [pc, #92]	; (8001ca0 <PLL_Config+0x204>)
 8001c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c48:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <PLL_Config+0x204>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	4a14      	ldr	r2, [pc, #80]	; (8001ca0 <PLL_Config+0x204>)
 8001c50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c54:	6053      	str	r3, [r2, #4]
	}
	// Se escoge como factor de reloj principal PLLP el número dos para obtener
	// la salida deseada en cada caso.
	RCC->PLLCFGR |= (00 << 16);
 8001c56:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <PLL_Config+0x204>)
 8001c58:	4a11      	ldr	r2, [pc, #68]	; (8001ca0 <PLL_Config+0x204>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	6053      	str	r3, [r2, #4]

	/*ACTIVACIÓN DEL PLL CON LOS PARÁMETROS ELEGIDOS ANTERIORMENTE. */
	// Se activa el PLL.
	RCC->CR |= (1<<24);
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <PLL_Config+0x204>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a0f      	ldr	r2, [pc, #60]	; (8001ca0 <PLL_Config+0x204>)
 8001c64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c68:	6013      	str	r3, [r2, #0]
	// Se da un retardo que indica la activación del PLL.
	while (!(RCC->CR & (1<<25)));
 8001c6a:	bf00      	nop
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <PLL_Config+0x204>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f9      	beq.n	8001c6c <PLL_Config+0x1d0>
	// Se introduce un 2 dentro del clock source del PLL.
	RCC->CFGR |= (2<<0);
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <PLL_Config+0x204>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	4a08      	ldr	r2, [pc, #32]	; (8001ca0 <PLL_Config+0x204>)
 8001c7e:	f043 0302 	orr.w	r3, r3, #2
 8001c82:	6093      	str	r3, [r2, #8]

	// Aquí se espera a que el PLL esté listo como reloj principal de la configuracion.
	while (!(RCC->CFGR & (2<<2)));
 8001c84:	bf00      	nop
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <PLL_Config+0x204>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f9      	beq.n	8001c86 <PLL_Config+0x1ea>

}// FIN DE LA FUNCIÓN DE CONFIGURACIÓN PARA DISTINTAS FRECUENCIAS.
 8001c92:	bf00      	nop
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40023c00 	.word	0x40023c00
 8001ca8:	40007000 	.word	0x40007000
 8001cac:	0fff803f 	.word	0x0fff803f

08001cb0 <getConfigPLL>:

// Función para saber el estado del PLL y así poder caracterizar lo demás.
uint32_t getConfigPLL(void){
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
	// Se buscan los valores que están definiendo los valores actuales del reloj PLL
	uint32_t PLLN = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <getConfigPLL+0x3c>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	099b      	lsrs	r3, r3, #6
 8001cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cc0:	60fb      	str	r3, [r7, #12]
	uint32_t PLLM = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos;
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <getConfigPLL+0x3c>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cca:	60bb      	str	r3, [r7, #8]
	// Se hace la operación para saber el valor actual del reloj. (Asume PLLP =2)
	uint32_t clockMicro = (HSI_VALUE / PLLM) * PLLN / 2;
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <getConfigPLL+0x40>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	fb02 f303 	mul.w	r3, r2, r3
 8001cdc:	085b      	lsrs	r3, r3, #1
 8001cde:	607b      	str	r3, [r7, #4]
	return clockMicro;
 8001ce0:	687b      	ldr	r3, [r7, #4]

}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	20000040 	.word	0x20000040

08001cf4 <__NVIC_EnableIRQ>:
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	db0b      	blt.n	8001d1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	f003 021f 	and.w	r2, r3, #31
 8001d0c:	4906      	ldr	r1, [pc, #24]	; (8001d28 <__NVIC_EnableIRQ+0x34>)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	095b      	lsrs	r3, r3, #5
 8001d14:	2001      	movs	r0, #1
 8001d16:	fa00 f202 	lsl.w	r2, r0, r2
 8001d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	e000e100 	.word	0xe000e100

08001d2c <USART_Config>:
 */

// Esta variable es necesaria para las interrupciones del USART 2 y 6.
uint8_t auxRxData = 0;

void USART_Config(USART_Handler_t *ptrUsartHandler){
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d34:	b672      	cpsid	i
}
 8001d36:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a8c      	ldr	r2, [pc, #560]	; (8001f70 <USART_Config+0x244>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d106      	bne.n	8001d50 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8001d42:	4b8c      	ldr	r3, [pc, #560]	; (8001f74 <USART_Config+0x248>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	4a8b      	ldr	r2, [pc, #556]	; (8001f74 <USART_Config+0x248>)
 8001d48:	f043 0310 	orr.w	r3, r3, #16
 8001d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4e:	e016      	b.n	8001d7e <USART_Config+0x52>
	}else if(ptrUsartHandler->ptrUSARTx == USART6){
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a88      	ldr	r2, [pc, #544]	; (8001f78 <USART_Config+0x24c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d106      	bne.n	8001d68 <USART_Config+0x3c>
		/*Configuramos el USART 6 que está en el mismo bus del USART 1 */
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8001d5a:	4b86      	ldr	r3, [pc, #536]	; (8001f74 <USART_Config+0x248>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	4a85      	ldr	r2, [pc, #532]	; (8001f74 <USART_Config+0x248>)
 8001d60:	f043 0320 	orr.w	r3, r3, #32
 8001d64:	6453      	str	r3, [r2, #68]	; 0x44
 8001d66:	e00a      	b.n	8001d7e <USART_Config+0x52>
		// Luego el USART 2 que está en el bus 1.
	}else if(ptrUsartHandler->ptrUSARTx == USART2){
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a83      	ldr	r2, [pc, #524]	; (8001f7c <USART_Config+0x250>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d105      	bne.n	8001d7e <USART_Config+0x52>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8001d72:	4b80      	ldr	r3, [pc, #512]	; (8001f74 <USART_Config+0x248>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a7f      	ldr	r2, [pc, #508]	; (8001f74 <USART_Config+0x248>)
 8001d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2200      	movs	r2, #0
 8001d84:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	79db      	ldrb	r3, [r3, #7]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d025      	beq.n	8001de2 <USART_Config+0xb6>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	79db      	ldrb	r3, [r3, #7]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d110      	bne.n	8001dc0 <USART_Config+0x94>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dac:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	e018      	b.n	8001df2 <USART_Config+0xc6>

		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dce:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001dde:	60da      	str	r2, [r3, #12]
 8001de0:	e007      	b.n	8001df2 <USART_Config+0xc6>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001df0:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize ==USART_DATASIZE_8BIT){
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	799b      	ldrb	r3, [r3, #6]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d115      	bne.n	8001e26 <USART_Config+0xfa>

	    	// Inicialmente debe corroborarse si se quiere o no la paridad.
	    	if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_NONE){
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	79db      	ldrb	r3, [r3, #7]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d108      	bne.n	8001e14 <USART_Config+0xe8>
	    		// Si se quieren datos de 8 bits.
	    		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	e010      	b.n	8001e36 <USART_Config+0x10a>
	    	}
	    	else{
	    		// Si la partidad esta activada, se agrega un BIT adicional.
	    		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e22:	60da      	str	r2, [r3, #12]
 8001e24:	e007      	b.n	8001e36 <USART_Config+0x10a>
	    	}
	    }
	    else{
	    	// Se configuran 9 bits para el tamaño.
	    	ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e34:	60da      	str	r2, [r3, #12]
	    }

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7a1b      	ldrb	r3, [r3, #8]
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d84e      	bhi.n	8001edc <USART_Config+0x1b0>
 8001e3e:	a201      	add	r2, pc, #4	; (adr r2, 8001e44 <USART_Config+0x118>)
 8001e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e44:	08001e55 	.word	0x08001e55
 8001e48:	08001e77 	.word	0x08001e77
 8001e4c:	08001e99 	.word	0x08001e99
 8001e50:	08001ebb 	.word	0x08001ebb
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691a      	ldr	r2, [r3, #16]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e62:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691a      	ldr	r2, [r3, #16]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e72:	611a      	str	r2, [r3, #16]
		break;
 8001e74:	e043      	b.n	8001efe <USART_Config+0x1d2>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e84:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e94:	611a      	str	r2, [r3, #16]
		break;
 8001e96:	e032      	b.n	8001efe <USART_Config+0x1d2>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691a      	ldr	r2, [r3, #16]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ea6:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691a      	ldr	r2, [r3, #16]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001eb6:	611a      	str	r2, [r3, #16]
		break;
 8001eb8:	e021      	b.n	8001efe <USART_Config+0x1d2>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	691a      	ldr	r2, [r3, #16]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ec8:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ed8:	611a      	str	r2, [r3, #16]
		break;
 8001eda:	e010      	b.n	8001efe <USART_Config+0x1d2>
	}
	default: {
		// En el caso por defecto seleccionamos 1 bit de parada
		// Escriba acá su código
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001eea:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691a      	ldr	r2, [r3, #16]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001efa:	611a      	str	r2, [r3, #16]
		break;
 8001efc:	bf00      	nop
	 * decida utilizar el usuario. La función getConfig() retorna esta
	 * frecuencia en que se encuentra actualmente el reloj del sistema PLL,
	 * por tanto, se considera un condicional que incluye los cálculos para
	 * la frecuencia de 80 MHz y por defecto recurre a la frecuencia natural.
	 */
	if(actualFrecuency == 80000000){
 8001efe:	f7ff fed7 	bl	8001cb0 <getConfigPLL>
 8001f02:	4603      	mov	r3, r0
 8001f04:	4a1e      	ldr	r2, [pc, #120]	; (8001f80 <USART_Config+0x254>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d11d      	bne.n	8001f46 <USART_Config+0x21a>
		// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
		if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	795b      	ldrb	r3, [r3, #5]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d105      	bne.n	8001f1e <USART_Config+0x1f2>
			// El valor a cargar es 520.833 -> Mantiza = 520,fraction = 0.833
			// Mantiza = 520 = 0x208, fraction = 16 * 0.833 = 13
			// Valor a cargar 0x208D
			// Configurando el Baudrate generator para una velocidad de 9600bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x20F5;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f242 02f5 	movw	r2, #8437	; 0x20f5
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	e03a      	b.n	8001f94 <USART_Config+0x268>
		}

		else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	795b      	ldrb	r3, [r3, #5]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d105      	bne.n	8001f32 <USART_Config+0x206>
			// El valor a cargar es 260.4166 -> Mantiza = 260,fraction = 0.4166
			// Mantiza = 260 = 0x104, fraction = 16 * 0.4166 = 7
			// Escriba acá su código y los comentarios que faltan
			// Valor a cargar 0x1047
			ptrUsartHandler->ptrUSARTx->BRR = 0x107B;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f241 027b 	movw	r2, #4219	; 0x107b
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	e030      	b.n	8001f94 <USART_Config+0x268>
		}

		else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	795b      	ldrb	r3, [r3, #5]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d12c      	bne.n	8001f94 <USART_Config+0x268>
			// Escriba acá su código y los comentarios que faltan
			// El valor a cargar es 43.402 -> Mantiza = 43,fraction = 0.402
			// Mantiza = 43 = 0x2B, fraction = 16 * 0.402 = 6.
			ptrUsartHandler->ptrUSARTx->BRR = 0x2BF;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f240 22bf 	movw	r2, #703	; 0x2bf
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	e026      	b.n	8001f94 <USART_Config+0x268>
		}
	// Caso por defecto de 16 MHz.
	}else{
		// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
		if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	795b      	ldrb	r3, [r3, #5]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d105      	bne.n	8001f5a <USART_Config+0x22e>
			// El valor a cargar es 104.1875 -> Mantiza = 104,fraction = 0.1875
			// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
			// Valor a cargar 0x0683
			// Configurando el Baudrate generator para una velocidad de 9600bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f240 6283 	movw	r2, #1667	; 0x683
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	e01c      	b.n	8001f94 <USART_Config+0x268>
		}

		else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	795b      	ldrb	r3, [r3, #5]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d110      	bne.n	8001f84 <USART_Config+0x258>
			// El valor a cargar es 52.0625 -> Mantiza = 52,fraction = 0.0625
			// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
			// Escriba acá su código y los comentarios que faltan
			// Valor a cargar 0x0341
			ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f240 3241 	movw	r2, #833	; 0x341
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	e012      	b.n	8001f94 <USART_Config+0x268>
 8001f6e:	bf00      	nop
 8001f70:	40011000 	.word	0x40011000
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40011400 	.word	0x40011400
 8001f7c:	40004400 	.word	0x40004400
 8001f80:	04c4b400 	.word	0x04c4b400
		}

		else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	795b      	ldrb	r3, [r3, #5]
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d103      	bne.n	8001f94 <USART_Config+0x268>
			// Escriba acá su código y los comentarios que faltan
			// El valor a cargar es 8.6875 -> Mantiza = 8,fraction = 0.6875
			// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11 = B.
			ptrUsartHandler->ptrUSARTx->BRR = 0x008B;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	228b      	movs	r2, #139	; 0x8b
 8001f92:	609a      	str	r2, [r3, #8]
		}
	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	791b      	ldrb	r3, [r3, #4]
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d847      	bhi.n	800202c <USART_Config+0x300>
 8001f9c:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <USART_Config+0x278>)
 8001f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa2:	bf00      	nop
 8001fa4:	08001fb5 	.word	0x08001fb5
 8001fa8:	08001fc7 	.word	0x08001fc7
 8001fac:	08001fd9 	.word	0x08001fd9
 8001fb0:	08001ffb 	.word	0x08001ffb
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_TE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0208 	orr.w	r2, r2, #8
 8001fc2:	60da      	str	r2, [r3, #12]
		break;
 8001fc4:	e04b      	b.n	800205e <USART_Config+0x332>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_RE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0204 	orr.w	r2, r2, #4
 8001fd4:	60da      	str	r2, [r3, #12]
		break;
 8001fd6:	e042      	b.n	800205e <USART_Config+0x332>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmision como recepcion
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_TE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0208 	orr.w	r2, r2, #8
 8001fe6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_RE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0204 	orr.w	r2, r2, #4
 8001ff6:	60da      	str	r2, [r3, #12]
		break;
 8001ff8:	e031      	b.n	800205e <USART_Config+0x332>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		// Escriba acá su código
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0204 	bic.w	r2, r2, #4
 8002008:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 0208 	bic.w	r2, r2, #8
 8002018:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002028:	60da      	str	r2, [r3, #12]
		break;
 800202a:	e018      	b.n	800205e <USART_Config+0x332>
	}

	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0204 	bic.w	r2, r2, #4
 800203a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0208 	bic.w	r2, r2, #8
 800204a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800205a:	60da      	str	r2, [r3, #12]
		break;
 800205c:	bf00      	nop
	}
	}

	// 2.7 Activamos el módulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	791b      	ldrb	r3, [r3, #4]
 8002062:	2b03      	cmp	r3, #3
 8002064:	d007      	beq.n	8002076 <USART_Config+0x34a>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002074:	60da      	str	r2, [r3, #12]
	}
	// Se verifica la activación de la interrupcion Rx
	if (ptrUsartHandler->ptrUSARTx == USART1){
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a28      	ldr	r2, [pc, #160]	; (800211c <USART_Config+0x3f0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d03a      	beq.n	80020f6 <USART_Config+0x3ca>
	}

	/* 1.2 Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2) {
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a26      	ldr	r2, [pc, #152]	; (8002120 <USART_Config+0x3f4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d118      	bne.n	80020bc <USART_Config+0x390>
		if (ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE) {
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	7a5b      	ldrb	r3, [r3, #9]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d10b      	bne.n	80020aa <USART_Config+0x37e>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0220 	orr.w	r2, r2, #32
 80020a0:	60da      	str	r2, [r3, #12]
			NVIC_EnableIRQ(USART2_IRQn);
 80020a2:	2026      	movs	r0, #38	; 0x26
 80020a4:	f7ff fe26 	bl	8001cf4 <__NVIC_EnableIRQ>
 80020a8:	e025      	b.n	80020f6 <USART_Config+0x3ca>
		} else {
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0220 	bic.w	r2, r2, #32
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	e01c      	b.n	80020f6 <USART_Config+0x3ca>
		}
	}

	/* 1.3 Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6) {
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a18      	ldr	r2, [pc, #96]	; (8002124 <USART_Config+0x3f8>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d117      	bne.n	80020f6 <USART_Config+0x3ca>
		if (ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE) {
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	7a5b      	ldrb	r3, [r3, #9]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d10b      	bne.n	80020e6 <USART_Config+0x3ba>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f042 0220 	orr.w	r2, r2, #32
 80020dc:	60da      	str	r2, [r3, #12]
			NVIC_EnableIRQ(USART6_IRQn);
 80020de:	2047      	movs	r0, #71	; 0x47
 80020e0:	f7ff fe08 	bl	8001cf4 <__NVIC_EnableIRQ>
 80020e4:	e007      	b.n	80020f6 <USART_Config+0x3ca>
		} else {
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 0220 	bic.w	r2, r2, #32
 80020f4:	60da      	str	r2, [r3, #12]
		}
	}

	// 2.8 Activamos el módulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	791b      	ldrb	r3, [r3, #4]
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d007      	beq.n	800210e <USART_Config+0x3e2>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800210c:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800210e:	b662      	cpsie	i
}
 8002110:	bf00      	nop
	}

	// Activamos las interrupciones globales
	__enable_irq();
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40011000 	.word	0x40011000
 8002120:	40004400 	.word	0x40004400
 8002124:	40011400 	.word	0x40011400

08002128 <usart2Rx_Callback>:

/* Similar a como se hizo con las EXTI, se crean los callbacks para los USART */

__attribute__((weak)) void usart2Rx_Callback(void){
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the usart2Rx_Callback could be implemented in the main file
	   */
	__NOP();
 800212c:	bf00      	nop
}
 800212e:	bf00      	nop
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr

08002136 <writeChar>:
	   */
	__NOP();
}

/* funcion para escribir un solo char */
int writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8002140:	e000      	b.n	8002144 <writeChar+0xe>
		__NOP();
 8002142:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f7      	beq.n	8002142 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	605a      	str	r2, [r3, #4]

	return dataToSend;
 800215a:	683b      	ldr	r3, [r7, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <writeMsg>:

// función para escribir un mensaje
void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]
	while(*msgToSend != '\0'){
 8002170:	e008      	b.n	8002184 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	4619      	mov	r1, r3
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ffdc 	bl	8002136 <writeChar>
		msgToSend++;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	3301      	adds	r3, #1
 8002182:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1f2      	bne.n	8002172 <writeMsg+0xc>
	}
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <getRxData>:

// función auxiliar
uint8_t getRxData(void){
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
	return auxRxData;
 800219c:	4b02      	ldr	r3, [pc, #8]	; (80021a8 <getRxData+0x10>)
 800219e:	781b      	ldrb	r3, [r3, #0]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	2000032c 	.word	0x2000032c

080021ac <USART2_IRQHandler>:

/* INTERRUPCIONES DEL USART */
// Se debe crear una variable auxiliar para la lectura que se declara al inicio.

/* Para el USART 2 */
void USART2_IRQHandler(void){
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
	// Se evalúa si la interrupción que se dio es por RX
	if(USART2->SR & USART_SR_RXNE){
 80021b0:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <USART2_IRQHandler+0x30>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0320 	and.w	r3, r3, #32
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00c      	beq.n	80021d6 <USART2_IRQHandler+0x2a>
		USART2->SR &= ~USART_SR_RXNE;
 80021bc:	4b07      	ldr	r3, [pc, #28]	; (80021dc <USART2_IRQHandler+0x30>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a06      	ldr	r2, [pc, #24]	; (80021dc <USART2_IRQHandler+0x30>)
 80021c2:	f023 0320 	bic.w	r3, r3, #32
 80021c6:	6013      	str	r3, [r2, #0]
		auxRxData = (uint8_t) USART2->DR;
 80021c8:	4b04      	ldr	r3, [pc, #16]	; (80021dc <USART2_IRQHandler+0x30>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <USART2_IRQHandler+0x34>)
 80021d0:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 80021d2:	f7ff ffa9 	bl	8002128 <usart2Rx_Callback>
	}
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40004400 	.word	0x40004400
 80021e0:	2000032c 	.word	0x2000032c

080021e4 <USART6_IRQHandler>:

/* Para el USART 6 */
void USART6_IRQHandler(void){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
	// Evaluamos que la interrupción que se dio es por RX
	if(USART6->SR & USART_SR_RXNE){
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <USART6_IRQHandler+0x30>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0320 	and.w	r3, r3, #32
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00c      	beq.n	800220e <USART6_IRQHandler+0x2a>
		USART6->SR &= ~USART_SR_RXNE;
 80021f4:	4b07      	ldr	r3, [pc, #28]	; (8002214 <USART6_IRQHandler+0x30>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a06      	ldr	r2, [pc, #24]	; (8002214 <USART6_IRQHandler+0x30>)
 80021fa:	f023 0320 	bic.w	r3, r3, #32
 80021fe:	6013      	str	r3, [r2, #0]
		auxRxData = (uint8_t) USART6->DR;
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <USART6_IRQHandler+0x30>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	b2da      	uxtb	r2, r3
 8002206:	4b04      	ldr	r3, [pc, #16]	; (8002218 <USART6_IRQHandler+0x34>)
 8002208:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 800220a:	f7fe ffcf 	bl	80011ac <usart6Rx_Callback>
	}
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40011400 	.word	0x40011400
 8002218:	2000032c 	.word	0x2000032c

0800221c <__libc_init_array>:
 800221c:	b570      	push	{r4, r5, r6, lr}
 800221e:	4d0d      	ldr	r5, [pc, #52]	; (8002254 <__libc_init_array+0x38>)
 8002220:	4c0d      	ldr	r4, [pc, #52]	; (8002258 <__libc_init_array+0x3c>)
 8002222:	1b64      	subs	r4, r4, r5
 8002224:	10a4      	asrs	r4, r4, #2
 8002226:	2600      	movs	r6, #0
 8002228:	42a6      	cmp	r6, r4
 800222a:	d109      	bne.n	8002240 <__libc_init_array+0x24>
 800222c:	4d0b      	ldr	r5, [pc, #44]	; (800225c <__libc_init_array+0x40>)
 800222e:	4c0c      	ldr	r4, [pc, #48]	; (8002260 <__libc_init_array+0x44>)
 8002230:	f004 fc8a 	bl	8006b48 <_init>
 8002234:	1b64      	subs	r4, r4, r5
 8002236:	10a4      	asrs	r4, r4, #2
 8002238:	2600      	movs	r6, #0
 800223a:	42a6      	cmp	r6, r4
 800223c:	d105      	bne.n	800224a <__libc_init_array+0x2e>
 800223e:	bd70      	pop	{r4, r5, r6, pc}
 8002240:	f855 3b04 	ldr.w	r3, [r5], #4
 8002244:	4798      	blx	r3
 8002246:	3601      	adds	r6, #1
 8002248:	e7ee      	b.n	8002228 <__libc_init_array+0xc>
 800224a:	f855 3b04 	ldr.w	r3, [r5], #4
 800224e:	4798      	blx	r3
 8002250:	3601      	adds	r6, #1
 8002252:	e7f2      	b.n	800223a <__libc_init_array+0x1e>
 8002254:	080070c4 	.word	0x080070c4
 8002258:	080070c4 	.word	0x080070c4
 800225c:	080070c4 	.word	0x080070c4
 8002260:	080070c8 	.word	0x080070c8

08002264 <memset>:
 8002264:	4402      	add	r2, r0
 8002266:	4603      	mov	r3, r0
 8002268:	4293      	cmp	r3, r2
 800226a:	d100      	bne.n	800226e <memset+0xa>
 800226c:	4770      	bx	lr
 800226e:	f803 1b01 	strb.w	r1, [r3], #1
 8002272:	e7f9      	b.n	8002268 <memset+0x4>

08002274 <__cvt>:
 8002274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002278:	b088      	sub	sp, #32
 800227a:	2b00      	cmp	r3, #0
 800227c:	461f      	mov	r7, r3
 800227e:	4614      	mov	r4, r2
 8002280:	bfb8      	it	lt
 8002282:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002286:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002288:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800228a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800228e:	bfb6      	itet	lt
 8002290:	461f      	movlt	r7, r3
 8002292:	2300      	movge	r3, #0
 8002294:	232d      	movlt	r3, #45	; 0x2d
 8002296:	7013      	strb	r3, [r2, #0]
 8002298:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800229a:	f023 0820 	bic.w	r8, r3, #32
 800229e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80022a2:	d005      	beq.n	80022b0 <__cvt+0x3c>
 80022a4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80022a8:	d100      	bne.n	80022ac <__cvt+0x38>
 80022aa:	3501      	adds	r5, #1
 80022ac:	2302      	movs	r3, #2
 80022ae:	e000      	b.n	80022b2 <__cvt+0x3e>
 80022b0:	2303      	movs	r3, #3
 80022b2:	aa07      	add	r2, sp, #28
 80022b4:	9204      	str	r2, [sp, #16]
 80022b6:	aa06      	add	r2, sp, #24
 80022b8:	e9cd a202 	strd	sl, r2, [sp, #8]
 80022bc:	e9cd 3500 	strd	r3, r5, [sp]
 80022c0:	4622      	mov	r2, r4
 80022c2:	463b      	mov	r3, r7
 80022c4:	f001 fd78 	bl	8003db8 <_dtoa_r>
 80022c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80022cc:	4606      	mov	r6, r0
 80022ce:	d102      	bne.n	80022d6 <__cvt+0x62>
 80022d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80022d2:	07db      	lsls	r3, r3, #31
 80022d4:	d522      	bpl.n	800231c <__cvt+0xa8>
 80022d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80022da:	eb06 0905 	add.w	r9, r6, r5
 80022de:	d110      	bne.n	8002302 <__cvt+0x8e>
 80022e0:	7833      	ldrb	r3, [r6, #0]
 80022e2:	2b30      	cmp	r3, #48	; 0x30
 80022e4:	d10a      	bne.n	80022fc <__cvt+0x88>
 80022e6:	2200      	movs	r2, #0
 80022e8:	2300      	movs	r3, #0
 80022ea:	4620      	mov	r0, r4
 80022ec:	4639      	mov	r1, r7
 80022ee:	f7fe fbf3 	bl	8000ad8 <__aeabi_dcmpeq>
 80022f2:	b918      	cbnz	r0, 80022fc <__cvt+0x88>
 80022f4:	f1c5 0501 	rsb	r5, r5, #1
 80022f8:	f8ca 5000 	str.w	r5, [sl]
 80022fc:	f8da 3000 	ldr.w	r3, [sl]
 8002300:	4499      	add	r9, r3
 8002302:	2200      	movs	r2, #0
 8002304:	2300      	movs	r3, #0
 8002306:	4620      	mov	r0, r4
 8002308:	4639      	mov	r1, r7
 800230a:	f7fe fbe5 	bl	8000ad8 <__aeabi_dcmpeq>
 800230e:	b108      	cbz	r0, 8002314 <__cvt+0xa0>
 8002310:	f8cd 901c 	str.w	r9, [sp, #28]
 8002314:	2230      	movs	r2, #48	; 0x30
 8002316:	9b07      	ldr	r3, [sp, #28]
 8002318:	454b      	cmp	r3, r9
 800231a:	d307      	bcc.n	800232c <__cvt+0xb8>
 800231c:	9b07      	ldr	r3, [sp, #28]
 800231e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002320:	1b9b      	subs	r3, r3, r6
 8002322:	4630      	mov	r0, r6
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	b008      	add	sp, #32
 8002328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800232c:	1c59      	adds	r1, r3, #1
 800232e:	9107      	str	r1, [sp, #28]
 8002330:	701a      	strb	r2, [r3, #0]
 8002332:	e7f0      	b.n	8002316 <__cvt+0xa2>

08002334 <__exponent>:
 8002334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002336:	4603      	mov	r3, r0
 8002338:	2900      	cmp	r1, #0
 800233a:	bfb8      	it	lt
 800233c:	4249      	neglt	r1, r1
 800233e:	f803 2b02 	strb.w	r2, [r3], #2
 8002342:	bfb4      	ite	lt
 8002344:	222d      	movlt	r2, #45	; 0x2d
 8002346:	222b      	movge	r2, #43	; 0x2b
 8002348:	2909      	cmp	r1, #9
 800234a:	7042      	strb	r2, [r0, #1]
 800234c:	dd2a      	ble.n	80023a4 <__exponent+0x70>
 800234e:	f10d 0407 	add.w	r4, sp, #7
 8002352:	46a4      	mov	ip, r4
 8002354:	270a      	movs	r7, #10
 8002356:	46a6      	mov	lr, r4
 8002358:	460a      	mov	r2, r1
 800235a:	fb91 f6f7 	sdiv	r6, r1, r7
 800235e:	fb07 1516 	mls	r5, r7, r6, r1
 8002362:	3530      	adds	r5, #48	; 0x30
 8002364:	2a63      	cmp	r2, #99	; 0x63
 8002366:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800236a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800236e:	4631      	mov	r1, r6
 8002370:	dcf1      	bgt.n	8002356 <__exponent+0x22>
 8002372:	3130      	adds	r1, #48	; 0x30
 8002374:	f1ae 0502 	sub.w	r5, lr, #2
 8002378:	f804 1c01 	strb.w	r1, [r4, #-1]
 800237c:	1c44      	adds	r4, r0, #1
 800237e:	4629      	mov	r1, r5
 8002380:	4561      	cmp	r1, ip
 8002382:	d30a      	bcc.n	800239a <__exponent+0x66>
 8002384:	f10d 0209 	add.w	r2, sp, #9
 8002388:	eba2 020e 	sub.w	r2, r2, lr
 800238c:	4565      	cmp	r5, ip
 800238e:	bf88      	it	hi
 8002390:	2200      	movhi	r2, #0
 8002392:	4413      	add	r3, r2
 8002394:	1a18      	subs	r0, r3, r0
 8002396:	b003      	add	sp, #12
 8002398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800239a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800239e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80023a2:	e7ed      	b.n	8002380 <__exponent+0x4c>
 80023a4:	2330      	movs	r3, #48	; 0x30
 80023a6:	3130      	adds	r1, #48	; 0x30
 80023a8:	7083      	strb	r3, [r0, #2]
 80023aa:	70c1      	strb	r1, [r0, #3]
 80023ac:	1d03      	adds	r3, r0, #4
 80023ae:	e7f1      	b.n	8002394 <__exponent+0x60>

080023b0 <_printf_float>:
 80023b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023b4:	b091      	sub	sp, #68	; 0x44
 80023b6:	460c      	mov	r4, r1
 80023b8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80023bc:	4616      	mov	r6, r2
 80023be:	461f      	mov	r7, r3
 80023c0:	4605      	mov	r5, r0
 80023c2:	f002 fe53 	bl	800506c <_localeconv_r>
 80023c6:	6803      	ldr	r3, [r0, #0]
 80023c8:	9309      	str	r3, [sp, #36]	; 0x24
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fd ff08 	bl	80001e0 <strlen>
 80023d0:	2300      	movs	r3, #0
 80023d2:	930e      	str	r3, [sp, #56]	; 0x38
 80023d4:	f8d8 3000 	ldr.w	r3, [r8]
 80023d8:	900a      	str	r0, [sp, #40]	; 0x28
 80023da:	3307      	adds	r3, #7
 80023dc:	f023 0307 	bic.w	r3, r3, #7
 80023e0:	f103 0208 	add.w	r2, r3, #8
 80023e4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80023e8:	f8d4 b000 	ldr.w	fp, [r4]
 80023ec:	f8c8 2000 	str.w	r2, [r8]
 80023f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80023f8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80023fc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002400:	930b      	str	r3, [sp, #44]	; 0x2c
 8002402:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002404:	4b9c      	ldr	r3, [pc, #624]	; (8002678 <_printf_float+0x2c8>)
 8002406:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800240a:	4640      	mov	r0, r8
 800240c:	f7fe fb96 	bl	8000b3c <__aeabi_dcmpun>
 8002410:	bb70      	cbnz	r0, 8002470 <_printf_float+0xc0>
 8002412:	4b99      	ldr	r3, [pc, #612]	; (8002678 <_printf_float+0x2c8>)
 8002414:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002416:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800241a:	4640      	mov	r0, r8
 800241c:	f7fe fb70 	bl	8000b00 <__aeabi_dcmple>
 8002420:	bb30      	cbnz	r0, 8002470 <_printf_float+0xc0>
 8002422:	2200      	movs	r2, #0
 8002424:	2300      	movs	r3, #0
 8002426:	4640      	mov	r0, r8
 8002428:	4651      	mov	r1, sl
 800242a:	f7fe fb5f 	bl	8000aec <__aeabi_dcmplt>
 800242e:	b110      	cbz	r0, 8002436 <_printf_float+0x86>
 8002430:	232d      	movs	r3, #45	; 0x2d
 8002432:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002436:	4b91      	ldr	r3, [pc, #580]	; (800267c <_printf_float+0x2cc>)
 8002438:	4891      	ldr	r0, [pc, #580]	; (8002680 <_printf_float+0x2d0>)
 800243a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800243e:	bf94      	ite	ls
 8002440:	4698      	movls	r8, r3
 8002442:	4680      	movhi	r8, r0
 8002444:	2303      	movs	r3, #3
 8002446:	6123      	str	r3, [r4, #16]
 8002448:	f02b 0304 	bic.w	r3, fp, #4
 800244c:	6023      	str	r3, [r4, #0]
 800244e:	f04f 0a00 	mov.w	sl, #0
 8002452:	9700      	str	r7, [sp, #0]
 8002454:	4633      	mov	r3, r6
 8002456:	aa0f      	add	r2, sp, #60	; 0x3c
 8002458:	4621      	mov	r1, r4
 800245a:	4628      	mov	r0, r5
 800245c:	f000 f9d2 	bl	8002804 <_printf_common>
 8002460:	3001      	adds	r0, #1
 8002462:	f040 808f 	bne.w	8002584 <_printf_float+0x1d4>
 8002466:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800246a:	b011      	add	sp, #68	; 0x44
 800246c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002470:	4642      	mov	r2, r8
 8002472:	4653      	mov	r3, sl
 8002474:	4640      	mov	r0, r8
 8002476:	4651      	mov	r1, sl
 8002478:	f7fe fb60 	bl	8000b3c <__aeabi_dcmpun>
 800247c:	b140      	cbz	r0, 8002490 <_printf_float+0xe0>
 800247e:	f1ba 0f00 	cmp.w	sl, #0
 8002482:	bfbc      	itt	lt
 8002484:	232d      	movlt	r3, #45	; 0x2d
 8002486:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800248a:	487e      	ldr	r0, [pc, #504]	; (8002684 <_printf_float+0x2d4>)
 800248c:	4b7e      	ldr	r3, [pc, #504]	; (8002688 <_printf_float+0x2d8>)
 800248e:	e7d4      	b.n	800243a <_printf_float+0x8a>
 8002490:	6863      	ldr	r3, [r4, #4]
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002498:	d142      	bne.n	8002520 <_printf_float+0x170>
 800249a:	2306      	movs	r3, #6
 800249c:	6063      	str	r3, [r4, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	9206      	str	r2, [sp, #24]
 80024a2:	aa0e      	add	r2, sp, #56	; 0x38
 80024a4:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80024a8:	aa0d      	add	r2, sp, #52	; 0x34
 80024aa:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80024ae:	9203      	str	r2, [sp, #12]
 80024b0:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80024b4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80024b8:	6023      	str	r3, [r4, #0]
 80024ba:	6863      	ldr	r3, [r4, #4]
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	4642      	mov	r2, r8
 80024c0:	4653      	mov	r3, sl
 80024c2:	4628      	mov	r0, r5
 80024c4:	910b      	str	r1, [sp, #44]	; 0x2c
 80024c6:	f7ff fed5 	bl	8002274 <__cvt>
 80024ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80024cc:	2947      	cmp	r1, #71	; 0x47
 80024ce:	4680      	mov	r8, r0
 80024d0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80024d2:	d108      	bne.n	80024e6 <_printf_float+0x136>
 80024d4:	1cc8      	adds	r0, r1, #3
 80024d6:	db02      	blt.n	80024de <_printf_float+0x12e>
 80024d8:	6863      	ldr	r3, [r4, #4]
 80024da:	4299      	cmp	r1, r3
 80024dc:	dd40      	ble.n	8002560 <_printf_float+0x1b0>
 80024de:	f1a9 0902 	sub.w	r9, r9, #2
 80024e2:	fa5f f989 	uxtb.w	r9, r9
 80024e6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80024ea:	d81f      	bhi.n	800252c <_printf_float+0x17c>
 80024ec:	3901      	subs	r1, #1
 80024ee:	464a      	mov	r2, r9
 80024f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80024f4:	910d      	str	r1, [sp, #52]	; 0x34
 80024f6:	f7ff ff1d 	bl	8002334 <__exponent>
 80024fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80024fc:	1813      	adds	r3, r2, r0
 80024fe:	2a01      	cmp	r2, #1
 8002500:	4682      	mov	sl, r0
 8002502:	6123      	str	r3, [r4, #16]
 8002504:	dc02      	bgt.n	800250c <_printf_float+0x15c>
 8002506:	6822      	ldr	r2, [r4, #0]
 8002508:	07d2      	lsls	r2, r2, #31
 800250a:	d501      	bpl.n	8002510 <_printf_float+0x160>
 800250c:	3301      	adds	r3, #1
 800250e:	6123      	str	r3, [r4, #16]
 8002510:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002514:	2b00      	cmp	r3, #0
 8002516:	d09c      	beq.n	8002452 <_printf_float+0xa2>
 8002518:	232d      	movs	r3, #45	; 0x2d
 800251a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800251e:	e798      	b.n	8002452 <_printf_float+0xa2>
 8002520:	2947      	cmp	r1, #71	; 0x47
 8002522:	d1bc      	bne.n	800249e <_printf_float+0xee>
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1ba      	bne.n	800249e <_printf_float+0xee>
 8002528:	2301      	movs	r3, #1
 800252a:	e7b7      	b.n	800249c <_printf_float+0xec>
 800252c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002530:	d118      	bne.n	8002564 <_printf_float+0x1b4>
 8002532:	2900      	cmp	r1, #0
 8002534:	6863      	ldr	r3, [r4, #4]
 8002536:	dd0b      	ble.n	8002550 <_printf_float+0x1a0>
 8002538:	6121      	str	r1, [r4, #16]
 800253a:	b913      	cbnz	r3, 8002542 <_printf_float+0x192>
 800253c:	6822      	ldr	r2, [r4, #0]
 800253e:	07d0      	lsls	r0, r2, #31
 8002540:	d502      	bpl.n	8002548 <_printf_float+0x198>
 8002542:	3301      	adds	r3, #1
 8002544:	440b      	add	r3, r1
 8002546:	6123      	str	r3, [r4, #16]
 8002548:	65a1      	str	r1, [r4, #88]	; 0x58
 800254a:	f04f 0a00 	mov.w	sl, #0
 800254e:	e7df      	b.n	8002510 <_printf_float+0x160>
 8002550:	b913      	cbnz	r3, 8002558 <_printf_float+0x1a8>
 8002552:	6822      	ldr	r2, [r4, #0]
 8002554:	07d2      	lsls	r2, r2, #31
 8002556:	d501      	bpl.n	800255c <_printf_float+0x1ac>
 8002558:	3302      	adds	r3, #2
 800255a:	e7f4      	b.n	8002546 <_printf_float+0x196>
 800255c:	2301      	movs	r3, #1
 800255e:	e7f2      	b.n	8002546 <_printf_float+0x196>
 8002560:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002564:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002566:	4299      	cmp	r1, r3
 8002568:	db05      	blt.n	8002576 <_printf_float+0x1c6>
 800256a:	6823      	ldr	r3, [r4, #0]
 800256c:	6121      	str	r1, [r4, #16]
 800256e:	07d8      	lsls	r0, r3, #31
 8002570:	d5ea      	bpl.n	8002548 <_printf_float+0x198>
 8002572:	1c4b      	adds	r3, r1, #1
 8002574:	e7e7      	b.n	8002546 <_printf_float+0x196>
 8002576:	2900      	cmp	r1, #0
 8002578:	bfd4      	ite	le
 800257a:	f1c1 0202 	rsble	r2, r1, #2
 800257e:	2201      	movgt	r2, #1
 8002580:	4413      	add	r3, r2
 8002582:	e7e0      	b.n	8002546 <_printf_float+0x196>
 8002584:	6823      	ldr	r3, [r4, #0]
 8002586:	055a      	lsls	r2, r3, #21
 8002588:	d407      	bmi.n	800259a <_printf_float+0x1ea>
 800258a:	6923      	ldr	r3, [r4, #16]
 800258c:	4642      	mov	r2, r8
 800258e:	4631      	mov	r1, r6
 8002590:	4628      	mov	r0, r5
 8002592:	47b8      	blx	r7
 8002594:	3001      	adds	r0, #1
 8002596:	d12b      	bne.n	80025f0 <_printf_float+0x240>
 8002598:	e765      	b.n	8002466 <_printf_float+0xb6>
 800259a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800259e:	f240 80dc 	bls.w	800275a <_printf_float+0x3aa>
 80025a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80025a6:	2200      	movs	r2, #0
 80025a8:	2300      	movs	r3, #0
 80025aa:	f7fe fa95 	bl	8000ad8 <__aeabi_dcmpeq>
 80025ae:	2800      	cmp	r0, #0
 80025b0:	d033      	beq.n	800261a <_printf_float+0x26a>
 80025b2:	4a36      	ldr	r2, [pc, #216]	; (800268c <_printf_float+0x2dc>)
 80025b4:	2301      	movs	r3, #1
 80025b6:	4631      	mov	r1, r6
 80025b8:	4628      	mov	r0, r5
 80025ba:	47b8      	blx	r7
 80025bc:	3001      	adds	r0, #1
 80025be:	f43f af52 	beq.w	8002466 <_printf_float+0xb6>
 80025c2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80025c6:	429a      	cmp	r2, r3
 80025c8:	db02      	blt.n	80025d0 <_printf_float+0x220>
 80025ca:	6823      	ldr	r3, [r4, #0]
 80025cc:	07d8      	lsls	r0, r3, #31
 80025ce:	d50f      	bpl.n	80025f0 <_printf_float+0x240>
 80025d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80025d4:	4631      	mov	r1, r6
 80025d6:	4628      	mov	r0, r5
 80025d8:	47b8      	blx	r7
 80025da:	3001      	adds	r0, #1
 80025dc:	f43f af43 	beq.w	8002466 <_printf_float+0xb6>
 80025e0:	f04f 0800 	mov.w	r8, #0
 80025e4:	f104 091a 	add.w	r9, r4, #26
 80025e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80025ea:	3b01      	subs	r3, #1
 80025ec:	4543      	cmp	r3, r8
 80025ee:	dc09      	bgt.n	8002604 <_printf_float+0x254>
 80025f0:	6823      	ldr	r3, [r4, #0]
 80025f2:	079b      	lsls	r3, r3, #30
 80025f4:	f100 8101 	bmi.w	80027fa <_printf_float+0x44a>
 80025f8:	68e0      	ldr	r0, [r4, #12]
 80025fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80025fc:	4298      	cmp	r0, r3
 80025fe:	bfb8      	it	lt
 8002600:	4618      	movlt	r0, r3
 8002602:	e732      	b.n	800246a <_printf_float+0xba>
 8002604:	2301      	movs	r3, #1
 8002606:	464a      	mov	r2, r9
 8002608:	4631      	mov	r1, r6
 800260a:	4628      	mov	r0, r5
 800260c:	47b8      	blx	r7
 800260e:	3001      	adds	r0, #1
 8002610:	f43f af29 	beq.w	8002466 <_printf_float+0xb6>
 8002614:	f108 0801 	add.w	r8, r8, #1
 8002618:	e7e6      	b.n	80025e8 <_printf_float+0x238>
 800261a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800261c:	2b00      	cmp	r3, #0
 800261e:	dc37      	bgt.n	8002690 <_printf_float+0x2e0>
 8002620:	4a1a      	ldr	r2, [pc, #104]	; (800268c <_printf_float+0x2dc>)
 8002622:	2301      	movs	r3, #1
 8002624:	4631      	mov	r1, r6
 8002626:	4628      	mov	r0, r5
 8002628:	47b8      	blx	r7
 800262a:	3001      	adds	r0, #1
 800262c:	f43f af1b 	beq.w	8002466 <_printf_float+0xb6>
 8002630:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002634:	4313      	orrs	r3, r2
 8002636:	d102      	bne.n	800263e <_printf_float+0x28e>
 8002638:	6823      	ldr	r3, [r4, #0]
 800263a:	07d9      	lsls	r1, r3, #31
 800263c:	d5d8      	bpl.n	80025f0 <_printf_float+0x240>
 800263e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002642:	4631      	mov	r1, r6
 8002644:	4628      	mov	r0, r5
 8002646:	47b8      	blx	r7
 8002648:	3001      	adds	r0, #1
 800264a:	f43f af0c 	beq.w	8002466 <_printf_float+0xb6>
 800264e:	f04f 0900 	mov.w	r9, #0
 8002652:	f104 0a1a 	add.w	sl, r4, #26
 8002656:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002658:	425b      	negs	r3, r3
 800265a:	454b      	cmp	r3, r9
 800265c:	dc01      	bgt.n	8002662 <_printf_float+0x2b2>
 800265e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002660:	e794      	b.n	800258c <_printf_float+0x1dc>
 8002662:	2301      	movs	r3, #1
 8002664:	4652      	mov	r2, sl
 8002666:	4631      	mov	r1, r6
 8002668:	4628      	mov	r0, r5
 800266a:	47b8      	blx	r7
 800266c:	3001      	adds	r0, #1
 800266e:	f43f aefa 	beq.w	8002466 <_printf_float+0xb6>
 8002672:	f109 0901 	add.w	r9, r9, #1
 8002676:	e7ee      	b.n	8002656 <_printf_float+0x2a6>
 8002678:	7fefffff 	.word	0x7fefffff
 800267c:	08006c24 	.word	0x08006c24
 8002680:	08006c28 	.word	0x08006c28
 8002684:	08006c30 	.word	0x08006c30
 8002688:	08006c2c 	.word	0x08006c2c
 800268c:	08006c34 	.word	0x08006c34
 8002690:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002692:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002694:	429a      	cmp	r2, r3
 8002696:	bfa8      	it	ge
 8002698:	461a      	movge	r2, r3
 800269a:	2a00      	cmp	r2, #0
 800269c:	4691      	mov	r9, r2
 800269e:	dc37      	bgt.n	8002710 <_printf_float+0x360>
 80026a0:	f04f 0b00 	mov.w	fp, #0
 80026a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80026a8:	f104 021a 	add.w	r2, r4, #26
 80026ac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80026b0:	ebaa 0309 	sub.w	r3, sl, r9
 80026b4:	455b      	cmp	r3, fp
 80026b6:	dc33      	bgt.n	8002720 <_printf_float+0x370>
 80026b8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80026bc:	429a      	cmp	r2, r3
 80026be:	db3b      	blt.n	8002738 <_printf_float+0x388>
 80026c0:	6823      	ldr	r3, [r4, #0]
 80026c2:	07da      	lsls	r2, r3, #31
 80026c4:	d438      	bmi.n	8002738 <_printf_float+0x388>
 80026c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80026c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80026ca:	eba3 020a 	sub.w	r2, r3, sl
 80026ce:	eba3 0901 	sub.w	r9, r3, r1
 80026d2:	4591      	cmp	r9, r2
 80026d4:	bfa8      	it	ge
 80026d6:	4691      	movge	r9, r2
 80026d8:	f1b9 0f00 	cmp.w	r9, #0
 80026dc:	dc34      	bgt.n	8002748 <_printf_float+0x398>
 80026de:	f04f 0800 	mov.w	r8, #0
 80026e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80026e6:	f104 0a1a 	add.w	sl, r4, #26
 80026ea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	eba3 0309 	sub.w	r3, r3, r9
 80026f4:	4543      	cmp	r3, r8
 80026f6:	f77f af7b 	ble.w	80025f0 <_printf_float+0x240>
 80026fa:	2301      	movs	r3, #1
 80026fc:	4652      	mov	r2, sl
 80026fe:	4631      	mov	r1, r6
 8002700:	4628      	mov	r0, r5
 8002702:	47b8      	blx	r7
 8002704:	3001      	adds	r0, #1
 8002706:	f43f aeae 	beq.w	8002466 <_printf_float+0xb6>
 800270a:	f108 0801 	add.w	r8, r8, #1
 800270e:	e7ec      	b.n	80026ea <_printf_float+0x33a>
 8002710:	4613      	mov	r3, r2
 8002712:	4631      	mov	r1, r6
 8002714:	4642      	mov	r2, r8
 8002716:	4628      	mov	r0, r5
 8002718:	47b8      	blx	r7
 800271a:	3001      	adds	r0, #1
 800271c:	d1c0      	bne.n	80026a0 <_printf_float+0x2f0>
 800271e:	e6a2      	b.n	8002466 <_printf_float+0xb6>
 8002720:	2301      	movs	r3, #1
 8002722:	4631      	mov	r1, r6
 8002724:	4628      	mov	r0, r5
 8002726:	920b      	str	r2, [sp, #44]	; 0x2c
 8002728:	47b8      	blx	r7
 800272a:	3001      	adds	r0, #1
 800272c:	f43f ae9b 	beq.w	8002466 <_printf_float+0xb6>
 8002730:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002732:	f10b 0b01 	add.w	fp, fp, #1
 8002736:	e7b9      	b.n	80026ac <_printf_float+0x2fc>
 8002738:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800273c:	4631      	mov	r1, r6
 800273e:	4628      	mov	r0, r5
 8002740:	47b8      	blx	r7
 8002742:	3001      	adds	r0, #1
 8002744:	d1bf      	bne.n	80026c6 <_printf_float+0x316>
 8002746:	e68e      	b.n	8002466 <_printf_float+0xb6>
 8002748:	464b      	mov	r3, r9
 800274a:	eb08 020a 	add.w	r2, r8, sl
 800274e:	4631      	mov	r1, r6
 8002750:	4628      	mov	r0, r5
 8002752:	47b8      	blx	r7
 8002754:	3001      	adds	r0, #1
 8002756:	d1c2      	bne.n	80026de <_printf_float+0x32e>
 8002758:	e685      	b.n	8002466 <_printf_float+0xb6>
 800275a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800275c:	2a01      	cmp	r2, #1
 800275e:	dc01      	bgt.n	8002764 <_printf_float+0x3b4>
 8002760:	07db      	lsls	r3, r3, #31
 8002762:	d537      	bpl.n	80027d4 <_printf_float+0x424>
 8002764:	2301      	movs	r3, #1
 8002766:	4642      	mov	r2, r8
 8002768:	4631      	mov	r1, r6
 800276a:	4628      	mov	r0, r5
 800276c:	47b8      	blx	r7
 800276e:	3001      	adds	r0, #1
 8002770:	f43f ae79 	beq.w	8002466 <_printf_float+0xb6>
 8002774:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002778:	4631      	mov	r1, r6
 800277a:	4628      	mov	r0, r5
 800277c:	47b8      	blx	r7
 800277e:	3001      	adds	r0, #1
 8002780:	f43f ae71 	beq.w	8002466 <_printf_float+0xb6>
 8002784:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002788:	2200      	movs	r2, #0
 800278a:	2300      	movs	r3, #0
 800278c:	f7fe f9a4 	bl	8000ad8 <__aeabi_dcmpeq>
 8002790:	b9d8      	cbnz	r0, 80027ca <_printf_float+0x41a>
 8002792:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002794:	f108 0201 	add.w	r2, r8, #1
 8002798:	3b01      	subs	r3, #1
 800279a:	4631      	mov	r1, r6
 800279c:	4628      	mov	r0, r5
 800279e:	47b8      	blx	r7
 80027a0:	3001      	adds	r0, #1
 80027a2:	d10e      	bne.n	80027c2 <_printf_float+0x412>
 80027a4:	e65f      	b.n	8002466 <_printf_float+0xb6>
 80027a6:	2301      	movs	r3, #1
 80027a8:	464a      	mov	r2, r9
 80027aa:	4631      	mov	r1, r6
 80027ac:	4628      	mov	r0, r5
 80027ae:	47b8      	blx	r7
 80027b0:	3001      	adds	r0, #1
 80027b2:	f43f ae58 	beq.w	8002466 <_printf_float+0xb6>
 80027b6:	f108 0801 	add.w	r8, r8, #1
 80027ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80027bc:	3b01      	subs	r3, #1
 80027be:	4543      	cmp	r3, r8
 80027c0:	dcf1      	bgt.n	80027a6 <_printf_float+0x3f6>
 80027c2:	4653      	mov	r3, sl
 80027c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80027c8:	e6e1      	b.n	800258e <_printf_float+0x1de>
 80027ca:	f04f 0800 	mov.w	r8, #0
 80027ce:	f104 091a 	add.w	r9, r4, #26
 80027d2:	e7f2      	b.n	80027ba <_printf_float+0x40a>
 80027d4:	2301      	movs	r3, #1
 80027d6:	4642      	mov	r2, r8
 80027d8:	e7df      	b.n	800279a <_printf_float+0x3ea>
 80027da:	2301      	movs	r3, #1
 80027dc:	464a      	mov	r2, r9
 80027de:	4631      	mov	r1, r6
 80027e0:	4628      	mov	r0, r5
 80027e2:	47b8      	blx	r7
 80027e4:	3001      	adds	r0, #1
 80027e6:	f43f ae3e 	beq.w	8002466 <_printf_float+0xb6>
 80027ea:	f108 0801 	add.w	r8, r8, #1
 80027ee:	68e3      	ldr	r3, [r4, #12]
 80027f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80027f2:	1a5b      	subs	r3, r3, r1
 80027f4:	4543      	cmp	r3, r8
 80027f6:	dcf0      	bgt.n	80027da <_printf_float+0x42a>
 80027f8:	e6fe      	b.n	80025f8 <_printf_float+0x248>
 80027fa:	f04f 0800 	mov.w	r8, #0
 80027fe:	f104 0919 	add.w	r9, r4, #25
 8002802:	e7f4      	b.n	80027ee <_printf_float+0x43e>

08002804 <_printf_common>:
 8002804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002808:	4616      	mov	r6, r2
 800280a:	4699      	mov	r9, r3
 800280c:	688a      	ldr	r2, [r1, #8]
 800280e:	690b      	ldr	r3, [r1, #16]
 8002810:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002814:	4293      	cmp	r3, r2
 8002816:	bfb8      	it	lt
 8002818:	4613      	movlt	r3, r2
 800281a:	6033      	str	r3, [r6, #0]
 800281c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002820:	4607      	mov	r7, r0
 8002822:	460c      	mov	r4, r1
 8002824:	b10a      	cbz	r2, 800282a <_printf_common+0x26>
 8002826:	3301      	adds	r3, #1
 8002828:	6033      	str	r3, [r6, #0]
 800282a:	6823      	ldr	r3, [r4, #0]
 800282c:	0699      	lsls	r1, r3, #26
 800282e:	bf42      	ittt	mi
 8002830:	6833      	ldrmi	r3, [r6, #0]
 8002832:	3302      	addmi	r3, #2
 8002834:	6033      	strmi	r3, [r6, #0]
 8002836:	6825      	ldr	r5, [r4, #0]
 8002838:	f015 0506 	ands.w	r5, r5, #6
 800283c:	d106      	bne.n	800284c <_printf_common+0x48>
 800283e:	f104 0a19 	add.w	sl, r4, #25
 8002842:	68e3      	ldr	r3, [r4, #12]
 8002844:	6832      	ldr	r2, [r6, #0]
 8002846:	1a9b      	subs	r3, r3, r2
 8002848:	42ab      	cmp	r3, r5
 800284a:	dc26      	bgt.n	800289a <_printf_common+0x96>
 800284c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002850:	1e13      	subs	r3, r2, #0
 8002852:	6822      	ldr	r2, [r4, #0]
 8002854:	bf18      	it	ne
 8002856:	2301      	movne	r3, #1
 8002858:	0692      	lsls	r2, r2, #26
 800285a:	d42b      	bmi.n	80028b4 <_printf_common+0xb0>
 800285c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002860:	4649      	mov	r1, r9
 8002862:	4638      	mov	r0, r7
 8002864:	47c0      	blx	r8
 8002866:	3001      	adds	r0, #1
 8002868:	d01e      	beq.n	80028a8 <_printf_common+0xa4>
 800286a:	6823      	ldr	r3, [r4, #0]
 800286c:	68e5      	ldr	r5, [r4, #12]
 800286e:	6832      	ldr	r2, [r6, #0]
 8002870:	f003 0306 	and.w	r3, r3, #6
 8002874:	2b04      	cmp	r3, #4
 8002876:	bf08      	it	eq
 8002878:	1aad      	subeq	r5, r5, r2
 800287a:	68a3      	ldr	r3, [r4, #8]
 800287c:	6922      	ldr	r2, [r4, #16]
 800287e:	bf0c      	ite	eq
 8002880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002884:	2500      	movne	r5, #0
 8002886:	4293      	cmp	r3, r2
 8002888:	bfc4      	itt	gt
 800288a:	1a9b      	subgt	r3, r3, r2
 800288c:	18ed      	addgt	r5, r5, r3
 800288e:	2600      	movs	r6, #0
 8002890:	341a      	adds	r4, #26
 8002892:	42b5      	cmp	r5, r6
 8002894:	d11a      	bne.n	80028cc <_printf_common+0xc8>
 8002896:	2000      	movs	r0, #0
 8002898:	e008      	b.n	80028ac <_printf_common+0xa8>
 800289a:	2301      	movs	r3, #1
 800289c:	4652      	mov	r2, sl
 800289e:	4649      	mov	r1, r9
 80028a0:	4638      	mov	r0, r7
 80028a2:	47c0      	blx	r8
 80028a4:	3001      	adds	r0, #1
 80028a6:	d103      	bne.n	80028b0 <_printf_common+0xac>
 80028a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028b0:	3501      	adds	r5, #1
 80028b2:	e7c6      	b.n	8002842 <_printf_common+0x3e>
 80028b4:	18e1      	adds	r1, r4, r3
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	2030      	movs	r0, #48	; 0x30
 80028ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028be:	4422      	add	r2, r4
 80028c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028c8:	3302      	adds	r3, #2
 80028ca:	e7c7      	b.n	800285c <_printf_common+0x58>
 80028cc:	2301      	movs	r3, #1
 80028ce:	4622      	mov	r2, r4
 80028d0:	4649      	mov	r1, r9
 80028d2:	4638      	mov	r0, r7
 80028d4:	47c0      	blx	r8
 80028d6:	3001      	adds	r0, #1
 80028d8:	d0e6      	beq.n	80028a8 <_printf_common+0xa4>
 80028da:	3601      	adds	r6, #1
 80028dc:	e7d9      	b.n	8002892 <_printf_common+0x8e>
	...

080028e0 <_printf_i>:
 80028e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028e4:	7e0f      	ldrb	r7, [r1, #24]
 80028e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80028e8:	2f78      	cmp	r7, #120	; 0x78
 80028ea:	4691      	mov	r9, r2
 80028ec:	4680      	mov	r8, r0
 80028ee:	460c      	mov	r4, r1
 80028f0:	469a      	mov	sl, r3
 80028f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80028f6:	d807      	bhi.n	8002908 <_printf_i+0x28>
 80028f8:	2f62      	cmp	r7, #98	; 0x62
 80028fa:	d80a      	bhi.n	8002912 <_printf_i+0x32>
 80028fc:	2f00      	cmp	r7, #0
 80028fe:	f000 80d8 	beq.w	8002ab2 <_printf_i+0x1d2>
 8002902:	2f58      	cmp	r7, #88	; 0x58
 8002904:	f000 80a3 	beq.w	8002a4e <_printf_i+0x16e>
 8002908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800290c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002910:	e03a      	b.n	8002988 <_printf_i+0xa8>
 8002912:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002916:	2b15      	cmp	r3, #21
 8002918:	d8f6      	bhi.n	8002908 <_printf_i+0x28>
 800291a:	a101      	add	r1, pc, #4	; (adr r1, 8002920 <_printf_i+0x40>)
 800291c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002920:	08002979 	.word	0x08002979
 8002924:	0800298d 	.word	0x0800298d
 8002928:	08002909 	.word	0x08002909
 800292c:	08002909 	.word	0x08002909
 8002930:	08002909 	.word	0x08002909
 8002934:	08002909 	.word	0x08002909
 8002938:	0800298d 	.word	0x0800298d
 800293c:	08002909 	.word	0x08002909
 8002940:	08002909 	.word	0x08002909
 8002944:	08002909 	.word	0x08002909
 8002948:	08002909 	.word	0x08002909
 800294c:	08002a99 	.word	0x08002a99
 8002950:	080029bd 	.word	0x080029bd
 8002954:	08002a7b 	.word	0x08002a7b
 8002958:	08002909 	.word	0x08002909
 800295c:	08002909 	.word	0x08002909
 8002960:	08002abb 	.word	0x08002abb
 8002964:	08002909 	.word	0x08002909
 8002968:	080029bd 	.word	0x080029bd
 800296c:	08002909 	.word	0x08002909
 8002970:	08002909 	.word	0x08002909
 8002974:	08002a83 	.word	0x08002a83
 8002978:	682b      	ldr	r3, [r5, #0]
 800297a:	1d1a      	adds	r2, r3, #4
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	602a      	str	r2, [r5, #0]
 8002980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002988:	2301      	movs	r3, #1
 800298a:	e0a3      	b.n	8002ad4 <_printf_i+0x1f4>
 800298c:	6820      	ldr	r0, [r4, #0]
 800298e:	6829      	ldr	r1, [r5, #0]
 8002990:	0606      	lsls	r6, r0, #24
 8002992:	f101 0304 	add.w	r3, r1, #4
 8002996:	d50a      	bpl.n	80029ae <_printf_i+0xce>
 8002998:	680e      	ldr	r6, [r1, #0]
 800299a:	602b      	str	r3, [r5, #0]
 800299c:	2e00      	cmp	r6, #0
 800299e:	da03      	bge.n	80029a8 <_printf_i+0xc8>
 80029a0:	232d      	movs	r3, #45	; 0x2d
 80029a2:	4276      	negs	r6, r6
 80029a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029a8:	485e      	ldr	r0, [pc, #376]	; (8002b24 <_printf_i+0x244>)
 80029aa:	230a      	movs	r3, #10
 80029ac:	e019      	b.n	80029e2 <_printf_i+0x102>
 80029ae:	680e      	ldr	r6, [r1, #0]
 80029b0:	602b      	str	r3, [r5, #0]
 80029b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80029b6:	bf18      	it	ne
 80029b8:	b236      	sxthne	r6, r6
 80029ba:	e7ef      	b.n	800299c <_printf_i+0xbc>
 80029bc:	682b      	ldr	r3, [r5, #0]
 80029be:	6820      	ldr	r0, [r4, #0]
 80029c0:	1d19      	adds	r1, r3, #4
 80029c2:	6029      	str	r1, [r5, #0]
 80029c4:	0601      	lsls	r1, r0, #24
 80029c6:	d501      	bpl.n	80029cc <_printf_i+0xec>
 80029c8:	681e      	ldr	r6, [r3, #0]
 80029ca:	e002      	b.n	80029d2 <_printf_i+0xf2>
 80029cc:	0646      	lsls	r6, r0, #25
 80029ce:	d5fb      	bpl.n	80029c8 <_printf_i+0xe8>
 80029d0:	881e      	ldrh	r6, [r3, #0]
 80029d2:	4854      	ldr	r0, [pc, #336]	; (8002b24 <_printf_i+0x244>)
 80029d4:	2f6f      	cmp	r7, #111	; 0x6f
 80029d6:	bf0c      	ite	eq
 80029d8:	2308      	moveq	r3, #8
 80029da:	230a      	movne	r3, #10
 80029dc:	2100      	movs	r1, #0
 80029de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80029e2:	6865      	ldr	r5, [r4, #4]
 80029e4:	60a5      	str	r5, [r4, #8]
 80029e6:	2d00      	cmp	r5, #0
 80029e8:	bfa2      	ittt	ge
 80029ea:	6821      	ldrge	r1, [r4, #0]
 80029ec:	f021 0104 	bicge.w	r1, r1, #4
 80029f0:	6021      	strge	r1, [r4, #0]
 80029f2:	b90e      	cbnz	r6, 80029f8 <_printf_i+0x118>
 80029f4:	2d00      	cmp	r5, #0
 80029f6:	d04d      	beq.n	8002a94 <_printf_i+0x1b4>
 80029f8:	4615      	mov	r5, r2
 80029fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80029fe:	fb03 6711 	mls	r7, r3, r1, r6
 8002a02:	5dc7      	ldrb	r7, [r0, r7]
 8002a04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002a08:	4637      	mov	r7, r6
 8002a0a:	42bb      	cmp	r3, r7
 8002a0c:	460e      	mov	r6, r1
 8002a0e:	d9f4      	bls.n	80029fa <_printf_i+0x11a>
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d10b      	bne.n	8002a2c <_printf_i+0x14c>
 8002a14:	6823      	ldr	r3, [r4, #0]
 8002a16:	07de      	lsls	r6, r3, #31
 8002a18:	d508      	bpl.n	8002a2c <_printf_i+0x14c>
 8002a1a:	6923      	ldr	r3, [r4, #16]
 8002a1c:	6861      	ldr	r1, [r4, #4]
 8002a1e:	4299      	cmp	r1, r3
 8002a20:	bfde      	ittt	le
 8002a22:	2330      	movle	r3, #48	; 0x30
 8002a24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a28:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002a2c:	1b52      	subs	r2, r2, r5
 8002a2e:	6122      	str	r2, [r4, #16]
 8002a30:	f8cd a000 	str.w	sl, [sp]
 8002a34:	464b      	mov	r3, r9
 8002a36:	aa03      	add	r2, sp, #12
 8002a38:	4621      	mov	r1, r4
 8002a3a:	4640      	mov	r0, r8
 8002a3c:	f7ff fee2 	bl	8002804 <_printf_common>
 8002a40:	3001      	adds	r0, #1
 8002a42:	d14c      	bne.n	8002ade <_printf_i+0x1fe>
 8002a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a48:	b004      	add	sp, #16
 8002a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a4e:	4835      	ldr	r0, [pc, #212]	; (8002b24 <_printf_i+0x244>)
 8002a50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002a54:	6829      	ldr	r1, [r5, #0]
 8002a56:	6823      	ldr	r3, [r4, #0]
 8002a58:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a5c:	6029      	str	r1, [r5, #0]
 8002a5e:	061d      	lsls	r5, r3, #24
 8002a60:	d514      	bpl.n	8002a8c <_printf_i+0x1ac>
 8002a62:	07df      	lsls	r7, r3, #31
 8002a64:	bf44      	itt	mi
 8002a66:	f043 0320 	orrmi.w	r3, r3, #32
 8002a6a:	6023      	strmi	r3, [r4, #0]
 8002a6c:	b91e      	cbnz	r6, 8002a76 <_printf_i+0x196>
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	f023 0320 	bic.w	r3, r3, #32
 8002a74:	6023      	str	r3, [r4, #0]
 8002a76:	2310      	movs	r3, #16
 8002a78:	e7b0      	b.n	80029dc <_printf_i+0xfc>
 8002a7a:	6823      	ldr	r3, [r4, #0]
 8002a7c:	f043 0320 	orr.w	r3, r3, #32
 8002a80:	6023      	str	r3, [r4, #0]
 8002a82:	2378      	movs	r3, #120	; 0x78
 8002a84:	4828      	ldr	r0, [pc, #160]	; (8002b28 <_printf_i+0x248>)
 8002a86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a8a:	e7e3      	b.n	8002a54 <_printf_i+0x174>
 8002a8c:	0659      	lsls	r1, r3, #25
 8002a8e:	bf48      	it	mi
 8002a90:	b2b6      	uxthmi	r6, r6
 8002a92:	e7e6      	b.n	8002a62 <_printf_i+0x182>
 8002a94:	4615      	mov	r5, r2
 8002a96:	e7bb      	b.n	8002a10 <_printf_i+0x130>
 8002a98:	682b      	ldr	r3, [r5, #0]
 8002a9a:	6826      	ldr	r6, [r4, #0]
 8002a9c:	6961      	ldr	r1, [r4, #20]
 8002a9e:	1d18      	adds	r0, r3, #4
 8002aa0:	6028      	str	r0, [r5, #0]
 8002aa2:	0635      	lsls	r5, r6, #24
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	d501      	bpl.n	8002aac <_printf_i+0x1cc>
 8002aa8:	6019      	str	r1, [r3, #0]
 8002aaa:	e002      	b.n	8002ab2 <_printf_i+0x1d2>
 8002aac:	0670      	lsls	r0, r6, #25
 8002aae:	d5fb      	bpl.n	8002aa8 <_printf_i+0x1c8>
 8002ab0:	8019      	strh	r1, [r3, #0]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	6123      	str	r3, [r4, #16]
 8002ab6:	4615      	mov	r5, r2
 8002ab8:	e7ba      	b.n	8002a30 <_printf_i+0x150>
 8002aba:	682b      	ldr	r3, [r5, #0]
 8002abc:	1d1a      	adds	r2, r3, #4
 8002abe:	602a      	str	r2, [r5, #0]
 8002ac0:	681d      	ldr	r5, [r3, #0]
 8002ac2:	6862      	ldr	r2, [r4, #4]
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4628      	mov	r0, r5
 8002ac8:	f7fd fb92 	bl	80001f0 <memchr>
 8002acc:	b108      	cbz	r0, 8002ad2 <_printf_i+0x1f2>
 8002ace:	1b40      	subs	r0, r0, r5
 8002ad0:	6060      	str	r0, [r4, #4]
 8002ad2:	6863      	ldr	r3, [r4, #4]
 8002ad4:	6123      	str	r3, [r4, #16]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002adc:	e7a8      	b.n	8002a30 <_printf_i+0x150>
 8002ade:	6923      	ldr	r3, [r4, #16]
 8002ae0:	462a      	mov	r2, r5
 8002ae2:	4649      	mov	r1, r9
 8002ae4:	4640      	mov	r0, r8
 8002ae6:	47d0      	blx	sl
 8002ae8:	3001      	adds	r0, #1
 8002aea:	d0ab      	beq.n	8002a44 <_printf_i+0x164>
 8002aec:	6823      	ldr	r3, [r4, #0]
 8002aee:	079b      	lsls	r3, r3, #30
 8002af0:	d413      	bmi.n	8002b1a <_printf_i+0x23a>
 8002af2:	68e0      	ldr	r0, [r4, #12]
 8002af4:	9b03      	ldr	r3, [sp, #12]
 8002af6:	4298      	cmp	r0, r3
 8002af8:	bfb8      	it	lt
 8002afa:	4618      	movlt	r0, r3
 8002afc:	e7a4      	b.n	8002a48 <_printf_i+0x168>
 8002afe:	2301      	movs	r3, #1
 8002b00:	4632      	mov	r2, r6
 8002b02:	4649      	mov	r1, r9
 8002b04:	4640      	mov	r0, r8
 8002b06:	47d0      	blx	sl
 8002b08:	3001      	adds	r0, #1
 8002b0a:	d09b      	beq.n	8002a44 <_printf_i+0x164>
 8002b0c:	3501      	adds	r5, #1
 8002b0e:	68e3      	ldr	r3, [r4, #12]
 8002b10:	9903      	ldr	r1, [sp, #12]
 8002b12:	1a5b      	subs	r3, r3, r1
 8002b14:	42ab      	cmp	r3, r5
 8002b16:	dcf2      	bgt.n	8002afe <_printf_i+0x21e>
 8002b18:	e7eb      	b.n	8002af2 <_printf_i+0x212>
 8002b1a:	2500      	movs	r5, #0
 8002b1c:	f104 0619 	add.w	r6, r4, #25
 8002b20:	e7f5      	b.n	8002b0e <_printf_i+0x22e>
 8002b22:	bf00      	nop
 8002b24:	08006c36 	.word	0x08006c36
 8002b28:	08006c47 	.word	0x08006c47

08002b2c <_scanf_float>:
 8002b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b30:	b087      	sub	sp, #28
 8002b32:	4617      	mov	r7, r2
 8002b34:	9303      	str	r3, [sp, #12]
 8002b36:	688b      	ldr	r3, [r1, #8]
 8002b38:	1e5a      	subs	r2, r3, #1
 8002b3a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8002b3e:	bf83      	ittte	hi
 8002b40:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8002b44:	195b      	addhi	r3, r3, r5
 8002b46:	9302      	strhi	r3, [sp, #8]
 8002b48:	2300      	movls	r3, #0
 8002b4a:	bf86      	itte	hi
 8002b4c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8002b50:	608b      	strhi	r3, [r1, #8]
 8002b52:	9302      	strls	r3, [sp, #8]
 8002b54:	680b      	ldr	r3, [r1, #0]
 8002b56:	468b      	mov	fp, r1
 8002b58:	2500      	movs	r5, #0
 8002b5a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8002b5e:	f84b 3b1c 	str.w	r3, [fp], #28
 8002b62:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8002b66:	4680      	mov	r8, r0
 8002b68:	460c      	mov	r4, r1
 8002b6a:	465e      	mov	r6, fp
 8002b6c:	46aa      	mov	sl, r5
 8002b6e:	46a9      	mov	r9, r5
 8002b70:	9501      	str	r5, [sp, #4]
 8002b72:	68a2      	ldr	r2, [r4, #8]
 8002b74:	b152      	cbz	r2, 8002b8c <_scanf_float+0x60>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b4e      	cmp	r3, #78	; 0x4e
 8002b7c:	d864      	bhi.n	8002c48 <_scanf_float+0x11c>
 8002b7e:	2b40      	cmp	r3, #64	; 0x40
 8002b80:	d83c      	bhi.n	8002bfc <_scanf_float+0xd0>
 8002b82:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8002b86:	b2c8      	uxtb	r0, r1
 8002b88:	280e      	cmp	r0, #14
 8002b8a:	d93a      	bls.n	8002c02 <_scanf_float+0xd6>
 8002b8c:	f1b9 0f00 	cmp.w	r9, #0
 8002b90:	d003      	beq.n	8002b9a <_scanf_float+0x6e>
 8002b92:	6823      	ldr	r3, [r4, #0]
 8002b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b98:	6023      	str	r3, [r4, #0]
 8002b9a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8002b9e:	f1ba 0f01 	cmp.w	sl, #1
 8002ba2:	f200 8113 	bhi.w	8002dcc <_scanf_float+0x2a0>
 8002ba6:	455e      	cmp	r6, fp
 8002ba8:	f200 8105 	bhi.w	8002db6 <_scanf_float+0x28a>
 8002bac:	2501      	movs	r5, #1
 8002bae:	4628      	mov	r0, r5
 8002bb0:	b007      	add	sp, #28
 8002bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bb6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8002bba:	2a0d      	cmp	r2, #13
 8002bbc:	d8e6      	bhi.n	8002b8c <_scanf_float+0x60>
 8002bbe:	a101      	add	r1, pc, #4	; (adr r1, 8002bc4 <_scanf_float+0x98>)
 8002bc0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002bc4:	08002d03 	.word	0x08002d03
 8002bc8:	08002b8d 	.word	0x08002b8d
 8002bcc:	08002b8d 	.word	0x08002b8d
 8002bd0:	08002b8d 	.word	0x08002b8d
 8002bd4:	08002d63 	.word	0x08002d63
 8002bd8:	08002d3b 	.word	0x08002d3b
 8002bdc:	08002b8d 	.word	0x08002b8d
 8002be0:	08002b8d 	.word	0x08002b8d
 8002be4:	08002d11 	.word	0x08002d11
 8002be8:	08002b8d 	.word	0x08002b8d
 8002bec:	08002b8d 	.word	0x08002b8d
 8002bf0:	08002b8d 	.word	0x08002b8d
 8002bf4:	08002b8d 	.word	0x08002b8d
 8002bf8:	08002cc9 	.word	0x08002cc9
 8002bfc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002c00:	e7db      	b.n	8002bba <_scanf_float+0x8e>
 8002c02:	290e      	cmp	r1, #14
 8002c04:	d8c2      	bhi.n	8002b8c <_scanf_float+0x60>
 8002c06:	a001      	add	r0, pc, #4	; (adr r0, 8002c0c <_scanf_float+0xe0>)
 8002c08:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8002c0c:	08002cbb 	.word	0x08002cbb
 8002c10:	08002b8d 	.word	0x08002b8d
 8002c14:	08002cbb 	.word	0x08002cbb
 8002c18:	08002d4f 	.word	0x08002d4f
 8002c1c:	08002b8d 	.word	0x08002b8d
 8002c20:	08002c69 	.word	0x08002c69
 8002c24:	08002ca5 	.word	0x08002ca5
 8002c28:	08002ca5 	.word	0x08002ca5
 8002c2c:	08002ca5 	.word	0x08002ca5
 8002c30:	08002ca5 	.word	0x08002ca5
 8002c34:	08002ca5 	.word	0x08002ca5
 8002c38:	08002ca5 	.word	0x08002ca5
 8002c3c:	08002ca5 	.word	0x08002ca5
 8002c40:	08002ca5 	.word	0x08002ca5
 8002c44:	08002ca5 	.word	0x08002ca5
 8002c48:	2b6e      	cmp	r3, #110	; 0x6e
 8002c4a:	d809      	bhi.n	8002c60 <_scanf_float+0x134>
 8002c4c:	2b60      	cmp	r3, #96	; 0x60
 8002c4e:	d8b2      	bhi.n	8002bb6 <_scanf_float+0x8a>
 8002c50:	2b54      	cmp	r3, #84	; 0x54
 8002c52:	d077      	beq.n	8002d44 <_scanf_float+0x218>
 8002c54:	2b59      	cmp	r3, #89	; 0x59
 8002c56:	d199      	bne.n	8002b8c <_scanf_float+0x60>
 8002c58:	2d07      	cmp	r5, #7
 8002c5a:	d197      	bne.n	8002b8c <_scanf_float+0x60>
 8002c5c:	2508      	movs	r5, #8
 8002c5e:	e029      	b.n	8002cb4 <_scanf_float+0x188>
 8002c60:	2b74      	cmp	r3, #116	; 0x74
 8002c62:	d06f      	beq.n	8002d44 <_scanf_float+0x218>
 8002c64:	2b79      	cmp	r3, #121	; 0x79
 8002c66:	e7f6      	b.n	8002c56 <_scanf_float+0x12a>
 8002c68:	6821      	ldr	r1, [r4, #0]
 8002c6a:	05c8      	lsls	r0, r1, #23
 8002c6c:	d51a      	bpl.n	8002ca4 <_scanf_float+0x178>
 8002c6e:	9b02      	ldr	r3, [sp, #8]
 8002c70:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002c74:	6021      	str	r1, [r4, #0]
 8002c76:	f109 0901 	add.w	r9, r9, #1
 8002c7a:	b11b      	cbz	r3, 8002c84 <_scanf_float+0x158>
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	3201      	adds	r2, #1
 8002c80:	9302      	str	r3, [sp, #8]
 8002c82:	60a2      	str	r2, [r4, #8]
 8002c84:	68a3      	ldr	r3, [r4, #8]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	60a3      	str	r3, [r4, #8]
 8002c8a:	6923      	ldr	r3, [r4, #16]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	6123      	str	r3, [r4, #16]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	607b      	str	r3, [r7, #4]
 8002c98:	f340 8084 	ble.w	8002da4 <_scanf_float+0x278>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	603b      	str	r3, [r7, #0]
 8002ca2:	e766      	b.n	8002b72 <_scanf_float+0x46>
 8002ca4:	eb1a 0f05 	cmn.w	sl, r5
 8002ca8:	f47f af70 	bne.w	8002b8c <_scanf_float+0x60>
 8002cac:	6822      	ldr	r2, [r4, #0]
 8002cae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8002cb2:	6022      	str	r2, [r4, #0]
 8002cb4:	f806 3b01 	strb.w	r3, [r6], #1
 8002cb8:	e7e4      	b.n	8002c84 <_scanf_float+0x158>
 8002cba:	6822      	ldr	r2, [r4, #0]
 8002cbc:	0610      	lsls	r0, r2, #24
 8002cbe:	f57f af65 	bpl.w	8002b8c <_scanf_float+0x60>
 8002cc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cc6:	e7f4      	b.n	8002cb2 <_scanf_float+0x186>
 8002cc8:	f1ba 0f00 	cmp.w	sl, #0
 8002ccc:	d10e      	bne.n	8002cec <_scanf_float+0x1c0>
 8002cce:	f1b9 0f00 	cmp.w	r9, #0
 8002cd2:	d10e      	bne.n	8002cf2 <_scanf_float+0x1c6>
 8002cd4:	6822      	ldr	r2, [r4, #0]
 8002cd6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8002cda:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8002cde:	d108      	bne.n	8002cf2 <_scanf_float+0x1c6>
 8002ce0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8002ce4:	6022      	str	r2, [r4, #0]
 8002ce6:	f04f 0a01 	mov.w	sl, #1
 8002cea:	e7e3      	b.n	8002cb4 <_scanf_float+0x188>
 8002cec:	f1ba 0f02 	cmp.w	sl, #2
 8002cf0:	d055      	beq.n	8002d9e <_scanf_float+0x272>
 8002cf2:	2d01      	cmp	r5, #1
 8002cf4:	d002      	beq.n	8002cfc <_scanf_float+0x1d0>
 8002cf6:	2d04      	cmp	r5, #4
 8002cf8:	f47f af48 	bne.w	8002b8c <_scanf_float+0x60>
 8002cfc:	3501      	adds	r5, #1
 8002cfe:	b2ed      	uxtb	r5, r5
 8002d00:	e7d8      	b.n	8002cb4 <_scanf_float+0x188>
 8002d02:	f1ba 0f01 	cmp.w	sl, #1
 8002d06:	f47f af41 	bne.w	8002b8c <_scanf_float+0x60>
 8002d0a:	f04f 0a02 	mov.w	sl, #2
 8002d0e:	e7d1      	b.n	8002cb4 <_scanf_float+0x188>
 8002d10:	b97d      	cbnz	r5, 8002d32 <_scanf_float+0x206>
 8002d12:	f1b9 0f00 	cmp.w	r9, #0
 8002d16:	f47f af3c 	bne.w	8002b92 <_scanf_float+0x66>
 8002d1a:	6822      	ldr	r2, [r4, #0]
 8002d1c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8002d20:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8002d24:	f47f af39 	bne.w	8002b9a <_scanf_float+0x6e>
 8002d28:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8002d2c:	6022      	str	r2, [r4, #0]
 8002d2e:	2501      	movs	r5, #1
 8002d30:	e7c0      	b.n	8002cb4 <_scanf_float+0x188>
 8002d32:	2d03      	cmp	r5, #3
 8002d34:	d0e2      	beq.n	8002cfc <_scanf_float+0x1d0>
 8002d36:	2d05      	cmp	r5, #5
 8002d38:	e7de      	b.n	8002cf8 <_scanf_float+0x1cc>
 8002d3a:	2d02      	cmp	r5, #2
 8002d3c:	f47f af26 	bne.w	8002b8c <_scanf_float+0x60>
 8002d40:	2503      	movs	r5, #3
 8002d42:	e7b7      	b.n	8002cb4 <_scanf_float+0x188>
 8002d44:	2d06      	cmp	r5, #6
 8002d46:	f47f af21 	bne.w	8002b8c <_scanf_float+0x60>
 8002d4a:	2507      	movs	r5, #7
 8002d4c:	e7b2      	b.n	8002cb4 <_scanf_float+0x188>
 8002d4e:	6822      	ldr	r2, [r4, #0]
 8002d50:	0591      	lsls	r1, r2, #22
 8002d52:	f57f af1b 	bpl.w	8002b8c <_scanf_float+0x60>
 8002d56:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8002d5a:	6022      	str	r2, [r4, #0]
 8002d5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8002d60:	e7a8      	b.n	8002cb4 <_scanf_float+0x188>
 8002d62:	6822      	ldr	r2, [r4, #0]
 8002d64:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8002d68:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8002d6c:	d006      	beq.n	8002d7c <_scanf_float+0x250>
 8002d6e:	0550      	lsls	r0, r2, #21
 8002d70:	f57f af0c 	bpl.w	8002b8c <_scanf_float+0x60>
 8002d74:	f1b9 0f00 	cmp.w	r9, #0
 8002d78:	f43f af0f 	beq.w	8002b9a <_scanf_float+0x6e>
 8002d7c:	0591      	lsls	r1, r2, #22
 8002d7e:	bf58      	it	pl
 8002d80:	9901      	ldrpl	r1, [sp, #4]
 8002d82:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8002d86:	bf58      	it	pl
 8002d88:	eba9 0101 	subpl.w	r1, r9, r1
 8002d8c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8002d90:	bf58      	it	pl
 8002d92:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8002d96:	6022      	str	r2, [r4, #0]
 8002d98:	f04f 0900 	mov.w	r9, #0
 8002d9c:	e78a      	b.n	8002cb4 <_scanf_float+0x188>
 8002d9e:	f04f 0a03 	mov.w	sl, #3
 8002da2:	e787      	b.n	8002cb4 <_scanf_float+0x188>
 8002da4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002da8:	4639      	mov	r1, r7
 8002daa:	4640      	mov	r0, r8
 8002dac:	4798      	blx	r3
 8002dae:	2800      	cmp	r0, #0
 8002db0:	f43f aedf 	beq.w	8002b72 <_scanf_float+0x46>
 8002db4:	e6ea      	b.n	8002b8c <_scanf_float+0x60>
 8002db6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002dba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002dbe:	463a      	mov	r2, r7
 8002dc0:	4640      	mov	r0, r8
 8002dc2:	4798      	blx	r3
 8002dc4:	6923      	ldr	r3, [r4, #16]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	6123      	str	r3, [r4, #16]
 8002dca:	e6ec      	b.n	8002ba6 <_scanf_float+0x7a>
 8002dcc:	1e6b      	subs	r3, r5, #1
 8002dce:	2b06      	cmp	r3, #6
 8002dd0:	d825      	bhi.n	8002e1e <_scanf_float+0x2f2>
 8002dd2:	2d02      	cmp	r5, #2
 8002dd4:	d836      	bhi.n	8002e44 <_scanf_float+0x318>
 8002dd6:	455e      	cmp	r6, fp
 8002dd8:	f67f aee8 	bls.w	8002bac <_scanf_float+0x80>
 8002ddc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002de0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002de4:	463a      	mov	r2, r7
 8002de6:	4640      	mov	r0, r8
 8002de8:	4798      	blx	r3
 8002dea:	6923      	ldr	r3, [r4, #16]
 8002dec:	3b01      	subs	r3, #1
 8002dee:	6123      	str	r3, [r4, #16]
 8002df0:	e7f1      	b.n	8002dd6 <_scanf_float+0x2aa>
 8002df2:	9802      	ldr	r0, [sp, #8]
 8002df4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002df8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8002dfc:	9002      	str	r0, [sp, #8]
 8002dfe:	463a      	mov	r2, r7
 8002e00:	4640      	mov	r0, r8
 8002e02:	4798      	blx	r3
 8002e04:	6923      	ldr	r3, [r4, #16]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	6123      	str	r3, [r4, #16]
 8002e0a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8002e0e:	fa5f fa8a 	uxtb.w	sl, sl
 8002e12:	f1ba 0f02 	cmp.w	sl, #2
 8002e16:	d1ec      	bne.n	8002df2 <_scanf_float+0x2c6>
 8002e18:	3d03      	subs	r5, #3
 8002e1a:	b2ed      	uxtb	r5, r5
 8002e1c:	1b76      	subs	r6, r6, r5
 8002e1e:	6823      	ldr	r3, [r4, #0]
 8002e20:	05da      	lsls	r2, r3, #23
 8002e22:	d52f      	bpl.n	8002e84 <_scanf_float+0x358>
 8002e24:	055b      	lsls	r3, r3, #21
 8002e26:	d510      	bpl.n	8002e4a <_scanf_float+0x31e>
 8002e28:	455e      	cmp	r6, fp
 8002e2a:	f67f aebf 	bls.w	8002bac <_scanf_float+0x80>
 8002e2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002e32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8002e36:	463a      	mov	r2, r7
 8002e38:	4640      	mov	r0, r8
 8002e3a:	4798      	blx	r3
 8002e3c:	6923      	ldr	r3, [r4, #16]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	6123      	str	r3, [r4, #16]
 8002e42:	e7f1      	b.n	8002e28 <_scanf_float+0x2fc>
 8002e44:	46aa      	mov	sl, r5
 8002e46:	9602      	str	r6, [sp, #8]
 8002e48:	e7df      	b.n	8002e0a <_scanf_float+0x2de>
 8002e4a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8002e4e:	6923      	ldr	r3, [r4, #16]
 8002e50:	2965      	cmp	r1, #101	; 0x65
 8002e52:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8002e56:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8002e5a:	6123      	str	r3, [r4, #16]
 8002e5c:	d00c      	beq.n	8002e78 <_scanf_float+0x34c>
 8002e5e:	2945      	cmp	r1, #69	; 0x45
 8002e60:	d00a      	beq.n	8002e78 <_scanf_float+0x34c>
 8002e62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002e66:	463a      	mov	r2, r7
 8002e68:	4640      	mov	r0, r8
 8002e6a:	4798      	blx	r3
 8002e6c:	6923      	ldr	r3, [r4, #16]
 8002e6e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	1eb5      	subs	r5, r6, #2
 8002e76:	6123      	str	r3, [r4, #16]
 8002e78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002e7c:	463a      	mov	r2, r7
 8002e7e:	4640      	mov	r0, r8
 8002e80:	4798      	blx	r3
 8002e82:	462e      	mov	r6, r5
 8002e84:	6825      	ldr	r5, [r4, #0]
 8002e86:	f015 0510 	ands.w	r5, r5, #16
 8002e8a:	d155      	bne.n	8002f38 <_scanf_float+0x40c>
 8002e8c:	7035      	strb	r5, [r6, #0]
 8002e8e:	6823      	ldr	r3, [r4, #0]
 8002e90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e98:	d11b      	bne.n	8002ed2 <_scanf_float+0x3a6>
 8002e9a:	9b01      	ldr	r3, [sp, #4]
 8002e9c:	454b      	cmp	r3, r9
 8002e9e:	eba3 0209 	sub.w	r2, r3, r9
 8002ea2:	d123      	bne.n	8002eec <_scanf_float+0x3c0>
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	4659      	mov	r1, fp
 8002ea8:	4640      	mov	r0, r8
 8002eaa:	f000 fe79 	bl	8003ba0 <_strtod_r>
 8002eae:	6822      	ldr	r2, [r4, #0]
 8002eb0:	9b03      	ldr	r3, [sp, #12]
 8002eb2:	f012 0f02 	tst.w	r2, #2
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4606      	mov	r6, r0
 8002eba:	460f      	mov	r7, r1
 8002ebc:	d021      	beq.n	8002f02 <_scanf_float+0x3d6>
 8002ebe:	1d1a      	adds	r2, r3, #4
 8002ec0:	9903      	ldr	r1, [sp, #12]
 8002ec2:	600a      	str	r2, [r1, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	e9c3 6700 	strd	r6, r7, [r3]
 8002eca:	68e3      	ldr	r3, [r4, #12]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	60e3      	str	r3, [r4, #12]
 8002ed0:	e66d      	b.n	8002bae <_scanf_float+0x82>
 8002ed2:	9b04      	ldr	r3, [sp, #16]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0e5      	beq.n	8002ea4 <_scanf_float+0x378>
 8002ed8:	9905      	ldr	r1, [sp, #20]
 8002eda:	230a      	movs	r3, #10
 8002edc:	462a      	mov	r2, r5
 8002ede:	3101      	adds	r1, #1
 8002ee0:	4640      	mov	r0, r8
 8002ee2:	f000 fedf 	bl	8003ca4 <_strtol_r>
 8002ee6:	9b04      	ldr	r3, [sp, #16]
 8002ee8:	9e05      	ldr	r6, [sp, #20]
 8002eea:	1ac2      	subs	r2, r0, r3
 8002eec:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8002ef0:	429e      	cmp	r6, r3
 8002ef2:	bf28      	it	cs
 8002ef4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8002ef8:	4910      	ldr	r1, [pc, #64]	; (8002f3c <_scanf_float+0x410>)
 8002efa:	4630      	mov	r0, r6
 8002efc:	f000 f826 	bl	8002f4c <siprintf>
 8002f00:	e7d0      	b.n	8002ea4 <_scanf_float+0x378>
 8002f02:	f012 0f04 	tst.w	r2, #4
 8002f06:	f103 0204 	add.w	r2, r3, #4
 8002f0a:	d1d9      	bne.n	8002ec0 <_scanf_float+0x394>
 8002f0c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002f10:	f8cc 2000 	str.w	r2, [ip]
 8002f14:	f8d3 8000 	ldr.w	r8, [r3]
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	f7fd fe0e 	bl	8000b3c <__aeabi_dcmpun>
 8002f20:	b128      	cbz	r0, 8002f2e <_scanf_float+0x402>
 8002f22:	4807      	ldr	r0, [pc, #28]	; (8002f40 <_scanf_float+0x414>)
 8002f24:	f000 f80e 	bl	8002f44 <nanf>
 8002f28:	f8c8 0000 	str.w	r0, [r8]
 8002f2c:	e7cd      	b.n	8002eca <_scanf_float+0x39e>
 8002f2e:	4630      	mov	r0, r6
 8002f30:	4639      	mov	r1, r7
 8002f32:	f7fd fe61 	bl	8000bf8 <__aeabi_d2f>
 8002f36:	e7f7      	b.n	8002f28 <_scanf_float+0x3fc>
 8002f38:	2500      	movs	r5, #0
 8002f3a:	e638      	b.n	8002bae <_scanf_float+0x82>
 8002f3c:	08006c58 	.word	0x08006c58
 8002f40:	08007060 	.word	0x08007060

08002f44 <nanf>:
 8002f44:	4800      	ldr	r0, [pc, #0]	; (8002f48 <nanf+0x4>)
 8002f46:	4770      	bx	lr
 8002f48:	7fc00000 	.word	0x7fc00000

08002f4c <siprintf>:
 8002f4c:	b40e      	push	{r1, r2, r3}
 8002f4e:	b500      	push	{lr}
 8002f50:	b09c      	sub	sp, #112	; 0x70
 8002f52:	ab1d      	add	r3, sp, #116	; 0x74
 8002f54:	9002      	str	r0, [sp, #8]
 8002f56:	9006      	str	r0, [sp, #24]
 8002f58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f5c:	4809      	ldr	r0, [pc, #36]	; (8002f84 <siprintf+0x38>)
 8002f5e:	9107      	str	r1, [sp, #28]
 8002f60:	9104      	str	r1, [sp, #16]
 8002f62:	4909      	ldr	r1, [pc, #36]	; (8002f88 <siprintf+0x3c>)
 8002f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f68:	9105      	str	r1, [sp, #20]
 8002f6a:	6800      	ldr	r0, [r0, #0]
 8002f6c:	9301      	str	r3, [sp, #4]
 8002f6e:	a902      	add	r1, sp, #8
 8002f70:	f002 feaa 	bl	8005cc8 <_svfiprintf_r>
 8002f74:	9b02      	ldr	r3, [sp, #8]
 8002f76:	2200      	movs	r2, #0
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	b01c      	add	sp, #112	; 0x70
 8002f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f80:	b003      	add	sp, #12
 8002f82:	4770      	bx	lr
 8002f84:	20000044 	.word	0x20000044
 8002f88:	ffff0208 	.word	0xffff0208

08002f8c <sulp>:
 8002f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f90:	460f      	mov	r7, r1
 8002f92:	4690      	mov	r8, r2
 8002f94:	f002 fc02 	bl	800579c <__ulp>
 8002f98:	4604      	mov	r4, r0
 8002f9a:	460d      	mov	r5, r1
 8002f9c:	f1b8 0f00 	cmp.w	r8, #0
 8002fa0:	d011      	beq.n	8002fc6 <sulp+0x3a>
 8002fa2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8002fa6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	dd0b      	ble.n	8002fc6 <sulp+0x3a>
 8002fae:	051b      	lsls	r3, r3, #20
 8002fb0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8002fb4:	2400      	movs	r4, #0
 8002fb6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8002fba:	4622      	mov	r2, r4
 8002fbc:	462b      	mov	r3, r5
 8002fbe:	f7fd fb23 	bl	8000608 <__aeabi_dmul>
 8002fc2:	4604      	mov	r4, r0
 8002fc4:	460d      	mov	r5, r1
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	4629      	mov	r1, r5
 8002fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002fd0 <_strtod_l>:
 8002fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fd4:	b09f      	sub	sp, #124	; 0x7c
 8002fd6:	469b      	mov	fp, r3
 8002fd8:	2300      	movs	r3, #0
 8002fda:	931a      	str	r3, [sp, #104]	; 0x68
 8002fdc:	4b9e      	ldr	r3, [pc, #632]	; (8003258 <_strtod_l+0x288>)
 8002fde:	9215      	str	r2, [sp, #84]	; 0x54
 8002fe0:	681f      	ldr	r7, [r3, #0]
 8002fe2:	4682      	mov	sl, r0
 8002fe4:	4638      	mov	r0, r7
 8002fe6:	460e      	mov	r6, r1
 8002fe8:	f7fd f8fa 	bl	80001e0 <strlen>
 8002fec:	f04f 0800 	mov.w	r8, #0
 8002ff0:	4604      	mov	r4, r0
 8002ff2:	f04f 0900 	mov.w	r9, #0
 8002ff6:	9619      	str	r6, [sp, #100]	; 0x64
 8002ff8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002ffa:	781a      	ldrb	r2, [r3, #0]
 8002ffc:	2a2b      	cmp	r2, #43	; 0x2b
 8002ffe:	d04c      	beq.n	800309a <_strtod_l+0xca>
 8003000:	d83a      	bhi.n	8003078 <_strtod_l+0xa8>
 8003002:	2a0d      	cmp	r2, #13
 8003004:	d833      	bhi.n	800306e <_strtod_l+0x9e>
 8003006:	2a08      	cmp	r2, #8
 8003008:	d833      	bhi.n	8003072 <_strtod_l+0xa2>
 800300a:	2a00      	cmp	r2, #0
 800300c:	d03d      	beq.n	800308a <_strtod_l+0xba>
 800300e:	2300      	movs	r3, #0
 8003010:	930a      	str	r3, [sp, #40]	; 0x28
 8003012:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8003014:	782b      	ldrb	r3, [r5, #0]
 8003016:	2b30      	cmp	r3, #48	; 0x30
 8003018:	f040 80aa 	bne.w	8003170 <_strtod_l+0x1a0>
 800301c:	786b      	ldrb	r3, [r5, #1]
 800301e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003022:	2b58      	cmp	r3, #88	; 0x58
 8003024:	d166      	bne.n	80030f4 <_strtod_l+0x124>
 8003026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003028:	9301      	str	r3, [sp, #4]
 800302a:	ab1a      	add	r3, sp, #104	; 0x68
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	4a8b      	ldr	r2, [pc, #556]	; (800325c <_strtod_l+0x28c>)
 8003030:	f8cd b008 	str.w	fp, [sp, #8]
 8003034:	ab1b      	add	r3, sp, #108	; 0x6c
 8003036:	a919      	add	r1, sp, #100	; 0x64
 8003038:	4650      	mov	r0, sl
 800303a:	f001 fd19 	bl	8004a70 <__gethex>
 800303e:	f010 0607 	ands.w	r6, r0, #7
 8003042:	4604      	mov	r4, r0
 8003044:	d005      	beq.n	8003052 <_strtod_l+0x82>
 8003046:	2e06      	cmp	r6, #6
 8003048:	d129      	bne.n	800309e <_strtod_l+0xce>
 800304a:	3501      	adds	r5, #1
 800304c:	2300      	movs	r3, #0
 800304e:	9519      	str	r5, [sp, #100]	; 0x64
 8003050:	930a      	str	r3, [sp, #40]	; 0x28
 8003052:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003054:	2b00      	cmp	r3, #0
 8003056:	f040 858a 	bne.w	8003b6e <_strtod_l+0xb9e>
 800305a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800305c:	b1d3      	cbz	r3, 8003094 <_strtod_l+0xc4>
 800305e:	4642      	mov	r2, r8
 8003060:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003064:	4610      	mov	r0, r2
 8003066:	4619      	mov	r1, r3
 8003068:	b01f      	add	sp, #124	; 0x7c
 800306a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800306e:	2a20      	cmp	r2, #32
 8003070:	d1cd      	bne.n	800300e <_strtod_l+0x3e>
 8003072:	3301      	adds	r3, #1
 8003074:	9319      	str	r3, [sp, #100]	; 0x64
 8003076:	e7bf      	b.n	8002ff8 <_strtod_l+0x28>
 8003078:	2a2d      	cmp	r2, #45	; 0x2d
 800307a:	d1c8      	bne.n	800300e <_strtod_l+0x3e>
 800307c:	2201      	movs	r2, #1
 800307e:	920a      	str	r2, [sp, #40]	; 0x28
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	9219      	str	r2, [sp, #100]	; 0x64
 8003084:	785b      	ldrb	r3, [r3, #1]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1c3      	bne.n	8003012 <_strtod_l+0x42>
 800308a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800308c:	9619      	str	r6, [sp, #100]	; 0x64
 800308e:	2b00      	cmp	r3, #0
 8003090:	f040 856b 	bne.w	8003b6a <_strtod_l+0xb9a>
 8003094:	4642      	mov	r2, r8
 8003096:	464b      	mov	r3, r9
 8003098:	e7e4      	b.n	8003064 <_strtod_l+0x94>
 800309a:	2200      	movs	r2, #0
 800309c:	e7ef      	b.n	800307e <_strtod_l+0xae>
 800309e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80030a0:	b13a      	cbz	r2, 80030b2 <_strtod_l+0xe2>
 80030a2:	2135      	movs	r1, #53	; 0x35
 80030a4:	a81c      	add	r0, sp, #112	; 0x70
 80030a6:	f002 fc7d 	bl	80059a4 <__copybits>
 80030aa:	991a      	ldr	r1, [sp, #104]	; 0x68
 80030ac:	4650      	mov	r0, sl
 80030ae:	f002 f849 	bl	8005144 <_Bfree>
 80030b2:	3e01      	subs	r6, #1
 80030b4:	2e04      	cmp	r6, #4
 80030b6:	d806      	bhi.n	80030c6 <_strtod_l+0xf6>
 80030b8:	e8df f006 	tbb	[pc, r6]
 80030bc:	1714030a 	.word	0x1714030a
 80030c0:	0a          	.byte	0x0a
 80030c1:	00          	.byte	0x00
 80030c2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80030c6:	0721      	lsls	r1, r4, #28
 80030c8:	d5c3      	bpl.n	8003052 <_strtod_l+0x82>
 80030ca:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80030ce:	e7c0      	b.n	8003052 <_strtod_l+0x82>
 80030d0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80030d4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80030d6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80030da:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80030de:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80030e2:	e7f0      	b.n	80030c6 <_strtod_l+0xf6>
 80030e4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8003260 <_strtod_l+0x290>
 80030e8:	e7ed      	b.n	80030c6 <_strtod_l+0xf6>
 80030ea:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80030ee:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80030f2:	e7e8      	b.n	80030c6 <_strtod_l+0xf6>
 80030f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	9219      	str	r2, [sp, #100]	; 0x64
 80030fa:	785b      	ldrb	r3, [r3, #1]
 80030fc:	2b30      	cmp	r3, #48	; 0x30
 80030fe:	d0f9      	beq.n	80030f4 <_strtod_l+0x124>
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0a6      	beq.n	8003052 <_strtod_l+0x82>
 8003104:	2301      	movs	r3, #1
 8003106:	9307      	str	r3, [sp, #28]
 8003108:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800310a:	9308      	str	r3, [sp, #32]
 800310c:	2300      	movs	r3, #0
 800310e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003112:	469b      	mov	fp, r3
 8003114:	220a      	movs	r2, #10
 8003116:	9819      	ldr	r0, [sp, #100]	; 0x64
 8003118:	7805      	ldrb	r5, [r0, #0]
 800311a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800311e:	b2d9      	uxtb	r1, r3
 8003120:	2909      	cmp	r1, #9
 8003122:	d927      	bls.n	8003174 <_strtod_l+0x1a4>
 8003124:	4622      	mov	r2, r4
 8003126:	4639      	mov	r1, r7
 8003128:	f002 fee4 	bl	8005ef4 <strncmp>
 800312c:	2800      	cmp	r0, #0
 800312e:	d033      	beq.n	8003198 <_strtod_l+0x1c8>
 8003130:	2000      	movs	r0, #0
 8003132:	462a      	mov	r2, r5
 8003134:	465c      	mov	r4, fp
 8003136:	9004      	str	r0, [sp, #16]
 8003138:	4603      	mov	r3, r0
 800313a:	2a65      	cmp	r2, #101	; 0x65
 800313c:	d001      	beq.n	8003142 <_strtod_l+0x172>
 800313e:	2a45      	cmp	r2, #69	; 0x45
 8003140:	d114      	bne.n	800316c <_strtod_l+0x19c>
 8003142:	b91c      	cbnz	r4, 800314c <_strtod_l+0x17c>
 8003144:	9a07      	ldr	r2, [sp, #28]
 8003146:	4302      	orrs	r2, r0
 8003148:	d09f      	beq.n	800308a <_strtod_l+0xba>
 800314a:	2400      	movs	r4, #0
 800314c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800314e:	1c72      	adds	r2, r6, #1
 8003150:	9219      	str	r2, [sp, #100]	; 0x64
 8003152:	7872      	ldrb	r2, [r6, #1]
 8003154:	2a2b      	cmp	r2, #43	; 0x2b
 8003156:	d079      	beq.n	800324c <_strtod_l+0x27c>
 8003158:	2a2d      	cmp	r2, #45	; 0x2d
 800315a:	f000 8083 	beq.w	8003264 <_strtod_l+0x294>
 800315e:	2700      	movs	r7, #0
 8003160:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8003164:	2909      	cmp	r1, #9
 8003166:	f240 8083 	bls.w	8003270 <_strtod_l+0x2a0>
 800316a:	9619      	str	r6, [sp, #100]	; 0x64
 800316c:	2500      	movs	r5, #0
 800316e:	e09f      	b.n	80032b0 <_strtod_l+0x2e0>
 8003170:	2300      	movs	r3, #0
 8003172:	e7c8      	b.n	8003106 <_strtod_l+0x136>
 8003174:	f1bb 0f08 	cmp.w	fp, #8
 8003178:	bfd5      	itete	le
 800317a:	9906      	ldrle	r1, [sp, #24]
 800317c:	9905      	ldrgt	r1, [sp, #20]
 800317e:	fb02 3301 	mlale	r3, r2, r1, r3
 8003182:	fb02 3301 	mlagt	r3, r2, r1, r3
 8003186:	f100 0001 	add.w	r0, r0, #1
 800318a:	bfd4      	ite	le
 800318c:	9306      	strle	r3, [sp, #24]
 800318e:	9305      	strgt	r3, [sp, #20]
 8003190:	f10b 0b01 	add.w	fp, fp, #1
 8003194:	9019      	str	r0, [sp, #100]	; 0x64
 8003196:	e7be      	b.n	8003116 <_strtod_l+0x146>
 8003198:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800319a:	191a      	adds	r2, r3, r4
 800319c:	9219      	str	r2, [sp, #100]	; 0x64
 800319e:	5d1a      	ldrb	r2, [r3, r4]
 80031a0:	f1bb 0f00 	cmp.w	fp, #0
 80031a4:	d036      	beq.n	8003214 <_strtod_l+0x244>
 80031a6:	9004      	str	r0, [sp, #16]
 80031a8:	465c      	mov	r4, fp
 80031aa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80031ae:	2b09      	cmp	r3, #9
 80031b0:	d912      	bls.n	80031d8 <_strtod_l+0x208>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e7c1      	b.n	800313a <_strtod_l+0x16a>
 80031b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	9219      	str	r2, [sp, #100]	; 0x64
 80031bc:	785a      	ldrb	r2, [r3, #1]
 80031be:	3001      	adds	r0, #1
 80031c0:	2a30      	cmp	r2, #48	; 0x30
 80031c2:	d0f8      	beq.n	80031b6 <_strtod_l+0x1e6>
 80031c4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	f200 84d5 	bhi.w	8003b78 <_strtod_l+0xba8>
 80031ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80031d0:	9004      	str	r0, [sp, #16]
 80031d2:	2000      	movs	r0, #0
 80031d4:	9308      	str	r3, [sp, #32]
 80031d6:	4604      	mov	r4, r0
 80031d8:	3a30      	subs	r2, #48	; 0x30
 80031da:	f100 0301 	add.w	r3, r0, #1
 80031de:	d013      	beq.n	8003208 <_strtod_l+0x238>
 80031e0:	9904      	ldr	r1, [sp, #16]
 80031e2:	4419      	add	r1, r3
 80031e4:	9104      	str	r1, [sp, #16]
 80031e6:	4623      	mov	r3, r4
 80031e8:	1905      	adds	r5, r0, r4
 80031ea:	210a      	movs	r1, #10
 80031ec:	42ab      	cmp	r3, r5
 80031ee:	d113      	bne.n	8003218 <_strtod_l+0x248>
 80031f0:	1823      	adds	r3, r4, r0
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	f104 0401 	add.w	r4, r4, #1
 80031f8:	4404      	add	r4, r0
 80031fa:	dc1b      	bgt.n	8003234 <_strtod_l+0x264>
 80031fc:	9906      	ldr	r1, [sp, #24]
 80031fe:	230a      	movs	r3, #10
 8003200:	fb03 2301 	mla	r3, r3, r1, r2
 8003204:	9306      	str	r3, [sp, #24]
 8003206:	2300      	movs	r3, #0
 8003208:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800320a:	1c51      	adds	r1, r2, #1
 800320c:	9119      	str	r1, [sp, #100]	; 0x64
 800320e:	7852      	ldrb	r2, [r2, #1]
 8003210:	4618      	mov	r0, r3
 8003212:	e7ca      	b.n	80031aa <_strtod_l+0x1da>
 8003214:	4658      	mov	r0, fp
 8003216:	e7d3      	b.n	80031c0 <_strtod_l+0x1f0>
 8003218:	2b08      	cmp	r3, #8
 800321a:	dc04      	bgt.n	8003226 <_strtod_l+0x256>
 800321c:	9f06      	ldr	r7, [sp, #24]
 800321e:	434f      	muls	r7, r1
 8003220:	9706      	str	r7, [sp, #24]
 8003222:	3301      	adds	r3, #1
 8003224:	e7e2      	b.n	80031ec <_strtod_l+0x21c>
 8003226:	1c5f      	adds	r7, r3, #1
 8003228:	2f10      	cmp	r7, #16
 800322a:	bfde      	ittt	le
 800322c:	9f05      	ldrle	r7, [sp, #20]
 800322e:	434f      	mulle	r7, r1
 8003230:	9705      	strle	r7, [sp, #20]
 8003232:	e7f6      	b.n	8003222 <_strtod_l+0x252>
 8003234:	2c10      	cmp	r4, #16
 8003236:	bfdf      	itttt	le
 8003238:	9905      	ldrle	r1, [sp, #20]
 800323a:	230a      	movle	r3, #10
 800323c:	fb03 2301 	mlale	r3, r3, r1, r2
 8003240:	9305      	strle	r3, [sp, #20]
 8003242:	e7e0      	b.n	8003206 <_strtod_l+0x236>
 8003244:	2300      	movs	r3, #0
 8003246:	9304      	str	r3, [sp, #16]
 8003248:	2301      	movs	r3, #1
 800324a:	e77b      	b.n	8003144 <_strtod_l+0x174>
 800324c:	2700      	movs	r7, #0
 800324e:	1cb2      	adds	r2, r6, #2
 8003250:	9219      	str	r2, [sp, #100]	; 0x64
 8003252:	78b2      	ldrb	r2, [r6, #2]
 8003254:	e784      	b.n	8003160 <_strtod_l+0x190>
 8003256:	bf00      	nop
 8003258:	08006ea8 	.word	0x08006ea8
 800325c:	08006c60 	.word	0x08006c60
 8003260:	7ff00000 	.word	0x7ff00000
 8003264:	2701      	movs	r7, #1
 8003266:	e7f2      	b.n	800324e <_strtod_l+0x27e>
 8003268:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800326a:	1c51      	adds	r1, r2, #1
 800326c:	9119      	str	r1, [sp, #100]	; 0x64
 800326e:	7852      	ldrb	r2, [r2, #1]
 8003270:	2a30      	cmp	r2, #48	; 0x30
 8003272:	d0f9      	beq.n	8003268 <_strtod_l+0x298>
 8003274:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8003278:	2908      	cmp	r1, #8
 800327a:	f63f af77 	bhi.w	800316c <_strtod_l+0x19c>
 800327e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8003282:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003284:	9209      	str	r2, [sp, #36]	; 0x24
 8003286:	f04f 0e0a 	mov.w	lr, #10
 800328a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800328c:	1c51      	adds	r1, r2, #1
 800328e:	9119      	str	r1, [sp, #100]	; 0x64
 8003290:	7852      	ldrb	r2, [r2, #1]
 8003292:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8003296:	2d09      	cmp	r5, #9
 8003298:	d935      	bls.n	8003306 <_strtod_l+0x336>
 800329a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800329c:	1b49      	subs	r1, r1, r5
 800329e:	2908      	cmp	r1, #8
 80032a0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80032a4:	dc02      	bgt.n	80032ac <_strtod_l+0x2dc>
 80032a6:	4565      	cmp	r5, ip
 80032a8:	bfa8      	it	ge
 80032aa:	4665      	movge	r5, ip
 80032ac:	b107      	cbz	r7, 80032b0 <_strtod_l+0x2e0>
 80032ae:	426d      	negs	r5, r5
 80032b0:	2c00      	cmp	r4, #0
 80032b2:	d14c      	bne.n	800334e <_strtod_l+0x37e>
 80032b4:	9907      	ldr	r1, [sp, #28]
 80032b6:	4301      	orrs	r1, r0
 80032b8:	f47f aecb 	bne.w	8003052 <_strtod_l+0x82>
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f47f aee4 	bne.w	800308a <_strtod_l+0xba>
 80032c2:	2a69      	cmp	r2, #105	; 0x69
 80032c4:	d026      	beq.n	8003314 <_strtod_l+0x344>
 80032c6:	dc23      	bgt.n	8003310 <_strtod_l+0x340>
 80032c8:	2a49      	cmp	r2, #73	; 0x49
 80032ca:	d023      	beq.n	8003314 <_strtod_l+0x344>
 80032cc:	2a4e      	cmp	r2, #78	; 0x4e
 80032ce:	f47f aedc 	bne.w	800308a <_strtod_l+0xba>
 80032d2:	499d      	ldr	r1, [pc, #628]	; (8003548 <_strtod_l+0x578>)
 80032d4:	a819      	add	r0, sp, #100	; 0x64
 80032d6:	f001 fe19 	bl	8004f0c <__match>
 80032da:	2800      	cmp	r0, #0
 80032dc:	f43f aed5 	beq.w	800308a <_strtod_l+0xba>
 80032e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b28      	cmp	r3, #40	; 0x28
 80032e6:	d12c      	bne.n	8003342 <_strtod_l+0x372>
 80032e8:	4998      	ldr	r1, [pc, #608]	; (800354c <_strtod_l+0x57c>)
 80032ea:	aa1c      	add	r2, sp, #112	; 0x70
 80032ec:	a819      	add	r0, sp, #100	; 0x64
 80032ee:	f001 fe21 	bl	8004f34 <__hexnan>
 80032f2:	2805      	cmp	r0, #5
 80032f4:	d125      	bne.n	8003342 <_strtod_l+0x372>
 80032f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80032f8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80032fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8003300:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8003304:	e6a5      	b.n	8003052 <_strtod_l+0x82>
 8003306:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800330a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800330e:	e7bc      	b.n	800328a <_strtod_l+0x2ba>
 8003310:	2a6e      	cmp	r2, #110	; 0x6e
 8003312:	e7dc      	b.n	80032ce <_strtod_l+0x2fe>
 8003314:	498e      	ldr	r1, [pc, #568]	; (8003550 <_strtod_l+0x580>)
 8003316:	a819      	add	r0, sp, #100	; 0x64
 8003318:	f001 fdf8 	bl	8004f0c <__match>
 800331c:	2800      	cmp	r0, #0
 800331e:	f43f aeb4 	beq.w	800308a <_strtod_l+0xba>
 8003322:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003324:	498b      	ldr	r1, [pc, #556]	; (8003554 <_strtod_l+0x584>)
 8003326:	3b01      	subs	r3, #1
 8003328:	a819      	add	r0, sp, #100	; 0x64
 800332a:	9319      	str	r3, [sp, #100]	; 0x64
 800332c:	f001 fdee 	bl	8004f0c <__match>
 8003330:	b910      	cbnz	r0, 8003338 <_strtod_l+0x368>
 8003332:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003334:	3301      	adds	r3, #1
 8003336:	9319      	str	r3, [sp, #100]	; 0x64
 8003338:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8003558 <_strtod_l+0x588>
 800333c:	f04f 0800 	mov.w	r8, #0
 8003340:	e687      	b.n	8003052 <_strtod_l+0x82>
 8003342:	4886      	ldr	r0, [pc, #536]	; (800355c <_strtod_l+0x58c>)
 8003344:	f002 fdc0 	bl	8005ec8 <nan>
 8003348:	4680      	mov	r8, r0
 800334a:	4689      	mov	r9, r1
 800334c:	e681      	b.n	8003052 <_strtod_l+0x82>
 800334e:	9b04      	ldr	r3, [sp, #16]
 8003350:	9806      	ldr	r0, [sp, #24]
 8003352:	1aeb      	subs	r3, r5, r3
 8003354:	f1bb 0f00 	cmp.w	fp, #0
 8003358:	bf08      	it	eq
 800335a:	46a3      	moveq	fp, r4
 800335c:	2c10      	cmp	r4, #16
 800335e:	9307      	str	r3, [sp, #28]
 8003360:	4626      	mov	r6, r4
 8003362:	bfa8      	it	ge
 8003364:	2610      	movge	r6, #16
 8003366:	f7fd f8d5 	bl	8000514 <__aeabi_ui2d>
 800336a:	2c09      	cmp	r4, #9
 800336c:	4680      	mov	r8, r0
 800336e:	4689      	mov	r9, r1
 8003370:	dd13      	ble.n	800339a <_strtod_l+0x3ca>
 8003372:	4b7b      	ldr	r3, [pc, #492]	; (8003560 <_strtod_l+0x590>)
 8003374:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003378:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800337c:	f7fd f944 	bl	8000608 <__aeabi_dmul>
 8003380:	4680      	mov	r8, r0
 8003382:	9805      	ldr	r0, [sp, #20]
 8003384:	4689      	mov	r9, r1
 8003386:	f7fd f8c5 	bl	8000514 <__aeabi_ui2d>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4640      	mov	r0, r8
 8003390:	4649      	mov	r1, r9
 8003392:	f7fc ff83 	bl	800029c <__adddf3>
 8003396:	4680      	mov	r8, r0
 8003398:	4689      	mov	r9, r1
 800339a:	2c0f      	cmp	r4, #15
 800339c:	dc36      	bgt.n	800340c <_strtod_l+0x43c>
 800339e:	9b07      	ldr	r3, [sp, #28]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f43f ae56 	beq.w	8003052 <_strtod_l+0x82>
 80033a6:	dd22      	ble.n	80033ee <_strtod_l+0x41e>
 80033a8:	2b16      	cmp	r3, #22
 80033aa:	dc09      	bgt.n	80033c0 <_strtod_l+0x3f0>
 80033ac:	496c      	ldr	r1, [pc, #432]	; (8003560 <_strtod_l+0x590>)
 80033ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80033b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033b6:	4642      	mov	r2, r8
 80033b8:	464b      	mov	r3, r9
 80033ba:	f7fd f925 	bl	8000608 <__aeabi_dmul>
 80033be:	e7c3      	b.n	8003348 <_strtod_l+0x378>
 80033c0:	9a07      	ldr	r2, [sp, #28]
 80033c2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80033c6:	4293      	cmp	r3, r2
 80033c8:	db20      	blt.n	800340c <_strtod_l+0x43c>
 80033ca:	4d65      	ldr	r5, [pc, #404]	; (8003560 <_strtod_l+0x590>)
 80033cc:	f1c4 040f 	rsb	r4, r4, #15
 80033d0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80033d4:	4642      	mov	r2, r8
 80033d6:	464b      	mov	r3, r9
 80033d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033dc:	f7fd f914 	bl	8000608 <__aeabi_dmul>
 80033e0:	9b07      	ldr	r3, [sp, #28]
 80033e2:	1b1c      	subs	r4, r3, r4
 80033e4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80033e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80033ec:	e7e5      	b.n	80033ba <_strtod_l+0x3ea>
 80033ee:	9b07      	ldr	r3, [sp, #28]
 80033f0:	3316      	adds	r3, #22
 80033f2:	db0b      	blt.n	800340c <_strtod_l+0x43c>
 80033f4:	9b04      	ldr	r3, [sp, #16]
 80033f6:	1b5d      	subs	r5, r3, r5
 80033f8:	4b59      	ldr	r3, [pc, #356]	; (8003560 <_strtod_l+0x590>)
 80033fa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80033fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003402:	4640      	mov	r0, r8
 8003404:	4649      	mov	r1, r9
 8003406:	f7fd fa29 	bl	800085c <__aeabi_ddiv>
 800340a:	e79d      	b.n	8003348 <_strtod_l+0x378>
 800340c:	9b07      	ldr	r3, [sp, #28]
 800340e:	1ba6      	subs	r6, r4, r6
 8003410:	441e      	add	r6, r3
 8003412:	2e00      	cmp	r6, #0
 8003414:	dd74      	ble.n	8003500 <_strtod_l+0x530>
 8003416:	f016 030f 	ands.w	r3, r6, #15
 800341a:	d00a      	beq.n	8003432 <_strtod_l+0x462>
 800341c:	4950      	ldr	r1, [pc, #320]	; (8003560 <_strtod_l+0x590>)
 800341e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003422:	4642      	mov	r2, r8
 8003424:	464b      	mov	r3, r9
 8003426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800342a:	f7fd f8ed 	bl	8000608 <__aeabi_dmul>
 800342e:	4680      	mov	r8, r0
 8003430:	4689      	mov	r9, r1
 8003432:	f036 060f 	bics.w	r6, r6, #15
 8003436:	d052      	beq.n	80034de <_strtod_l+0x50e>
 8003438:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800343c:	dd27      	ble.n	800348e <_strtod_l+0x4be>
 800343e:	f04f 0b00 	mov.w	fp, #0
 8003442:	f8cd b010 	str.w	fp, [sp, #16]
 8003446:	f8cd b020 	str.w	fp, [sp, #32]
 800344a:	f8cd b018 	str.w	fp, [sp, #24]
 800344e:	2322      	movs	r3, #34	; 0x22
 8003450:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8003558 <_strtod_l+0x588>
 8003454:	f8ca 3000 	str.w	r3, [sl]
 8003458:	f04f 0800 	mov.w	r8, #0
 800345c:	9b08      	ldr	r3, [sp, #32]
 800345e:	2b00      	cmp	r3, #0
 8003460:	f43f adf7 	beq.w	8003052 <_strtod_l+0x82>
 8003464:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003466:	4650      	mov	r0, sl
 8003468:	f001 fe6c 	bl	8005144 <_Bfree>
 800346c:	9906      	ldr	r1, [sp, #24]
 800346e:	4650      	mov	r0, sl
 8003470:	f001 fe68 	bl	8005144 <_Bfree>
 8003474:	9904      	ldr	r1, [sp, #16]
 8003476:	4650      	mov	r0, sl
 8003478:	f001 fe64 	bl	8005144 <_Bfree>
 800347c:	9908      	ldr	r1, [sp, #32]
 800347e:	4650      	mov	r0, sl
 8003480:	f001 fe60 	bl	8005144 <_Bfree>
 8003484:	4659      	mov	r1, fp
 8003486:	4650      	mov	r0, sl
 8003488:	f001 fe5c 	bl	8005144 <_Bfree>
 800348c:	e5e1      	b.n	8003052 <_strtod_l+0x82>
 800348e:	4b35      	ldr	r3, [pc, #212]	; (8003564 <_strtod_l+0x594>)
 8003490:	9305      	str	r3, [sp, #20]
 8003492:	2300      	movs	r3, #0
 8003494:	1136      	asrs	r6, r6, #4
 8003496:	4640      	mov	r0, r8
 8003498:	4649      	mov	r1, r9
 800349a:	461f      	mov	r7, r3
 800349c:	2e01      	cmp	r6, #1
 800349e:	dc21      	bgt.n	80034e4 <_strtod_l+0x514>
 80034a0:	b10b      	cbz	r3, 80034a6 <_strtod_l+0x4d6>
 80034a2:	4680      	mov	r8, r0
 80034a4:	4689      	mov	r9, r1
 80034a6:	4b2f      	ldr	r3, [pc, #188]	; (8003564 <_strtod_l+0x594>)
 80034a8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80034ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80034b0:	4642      	mov	r2, r8
 80034b2:	464b      	mov	r3, r9
 80034b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034b8:	f7fd f8a6 	bl	8000608 <__aeabi_dmul>
 80034bc:	4b26      	ldr	r3, [pc, #152]	; (8003558 <_strtod_l+0x588>)
 80034be:	460a      	mov	r2, r1
 80034c0:	400b      	ands	r3, r1
 80034c2:	4929      	ldr	r1, [pc, #164]	; (8003568 <_strtod_l+0x598>)
 80034c4:	428b      	cmp	r3, r1
 80034c6:	4680      	mov	r8, r0
 80034c8:	d8b9      	bhi.n	800343e <_strtod_l+0x46e>
 80034ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80034ce:	428b      	cmp	r3, r1
 80034d0:	bf86      	itte	hi
 80034d2:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 800356c <_strtod_l+0x59c>
 80034d6:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80034da:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80034de:	2300      	movs	r3, #0
 80034e0:	9305      	str	r3, [sp, #20]
 80034e2:	e07f      	b.n	80035e4 <_strtod_l+0x614>
 80034e4:	07f2      	lsls	r2, r6, #31
 80034e6:	d505      	bpl.n	80034f4 <_strtod_l+0x524>
 80034e8:	9b05      	ldr	r3, [sp, #20]
 80034ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ee:	f7fd f88b 	bl	8000608 <__aeabi_dmul>
 80034f2:	2301      	movs	r3, #1
 80034f4:	9a05      	ldr	r2, [sp, #20]
 80034f6:	3208      	adds	r2, #8
 80034f8:	3701      	adds	r7, #1
 80034fa:	1076      	asrs	r6, r6, #1
 80034fc:	9205      	str	r2, [sp, #20]
 80034fe:	e7cd      	b.n	800349c <_strtod_l+0x4cc>
 8003500:	d0ed      	beq.n	80034de <_strtod_l+0x50e>
 8003502:	4276      	negs	r6, r6
 8003504:	f016 020f 	ands.w	r2, r6, #15
 8003508:	d00a      	beq.n	8003520 <_strtod_l+0x550>
 800350a:	4b15      	ldr	r3, [pc, #84]	; (8003560 <_strtod_l+0x590>)
 800350c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003510:	4640      	mov	r0, r8
 8003512:	4649      	mov	r1, r9
 8003514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003518:	f7fd f9a0 	bl	800085c <__aeabi_ddiv>
 800351c:	4680      	mov	r8, r0
 800351e:	4689      	mov	r9, r1
 8003520:	1136      	asrs	r6, r6, #4
 8003522:	d0dc      	beq.n	80034de <_strtod_l+0x50e>
 8003524:	2e1f      	cmp	r6, #31
 8003526:	dd23      	ble.n	8003570 <_strtod_l+0x5a0>
 8003528:	f04f 0b00 	mov.w	fp, #0
 800352c:	f8cd b010 	str.w	fp, [sp, #16]
 8003530:	f8cd b020 	str.w	fp, [sp, #32]
 8003534:	f8cd b018 	str.w	fp, [sp, #24]
 8003538:	2322      	movs	r3, #34	; 0x22
 800353a:	f04f 0800 	mov.w	r8, #0
 800353e:	f04f 0900 	mov.w	r9, #0
 8003542:	f8ca 3000 	str.w	r3, [sl]
 8003546:	e789      	b.n	800345c <_strtod_l+0x48c>
 8003548:	08006c31 	.word	0x08006c31
 800354c:	08006c74 	.word	0x08006c74
 8003550:	08006c29 	.word	0x08006c29
 8003554:	08006db4 	.word	0x08006db4
 8003558:	7ff00000 	.word	0x7ff00000
 800355c:	08007060 	.word	0x08007060
 8003560:	08006f40 	.word	0x08006f40
 8003564:	08006f18 	.word	0x08006f18
 8003568:	7ca00000 	.word	0x7ca00000
 800356c:	7fefffff 	.word	0x7fefffff
 8003570:	f016 0310 	ands.w	r3, r6, #16
 8003574:	bf18      	it	ne
 8003576:	236a      	movne	r3, #106	; 0x6a
 8003578:	4fb1      	ldr	r7, [pc, #708]	; (8003840 <_strtod_l+0x870>)
 800357a:	9305      	str	r3, [sp, #20]
 800357c:	4640      	mov	r0, r8
 800357e:	4649      	mov	r1, r9
 8003580:	2300      	movs	r3, #0
 8003582:	07f2      	lsls	r2, r6, #31
 8003584:	d504      	bpl.n	8003590 <_strtod_l+0x5c0>
 8003586:	e9d7 2300 	ldrd	r2, r3, [r7]
 800358a:	f7fd f83d 	bl	8000608 <__aeabi_dmul>
 800358e:	2301      	movs	r3, #1
 8003590:	1076      	asrs	r6, r6, #1
 8003592:	f107 0708 	add.w	r7, r7, #8
 8003596:	d1f4      	bne.n	8003582 <_strtod_l+0x5b2>
 8003598:	b10b      	cbz	r3, 800359e <_strtod_l+0x5ce>
 800359a:	4680      	mov	r8, r0
 800359c:	4689      	mov	r9, r1
 800359e:	9b05      	ldr	r3, [sp, #20]
 80035a0:	b1c3      	cbz	r3, 80035d4 <_strtod_l+0x604>
 80035a2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80035a6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	4649      	mov	r1, r9
 80035ae:	dd11      	ble.n	80035d4 <_strtod_l+0x604>
 80035b0:	2b1f      	cmp	r3, #31
 80035b2:	f340 8124 	ble.w	80037fe <_strtod_l+0x82e>
 80035b6:	2b34      	cmp	r3, #52	; 0x34
 80035b8:	bfde      	ittt	le
 80035ba:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80035be:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80035c2:	fa03 f202 	lslle.w	r2, r3, r2
 80035c6:	f04f 0800 	mov.w	r8, #0
 80035ca:	bfcc      	ite	gt
 80035cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80035d0:	ea02 0901 	andle.w	r9, r2, r1
 80035d4:	2200      	movs	r2, #0
 80035d6:	2300      	movs	r3, #0
 80035d8:	4640      	mov	r0, r8
 80035da:	4649      	mov	r1, r9
 80035dc:	f7fd fa7c 	bl	8000ad8 <__aeabi_dcmpeq>
 80035e0:	2800      	cmp	r0, #0
 80035e2:	d1a1      	bne.n	8003528 <_strtod_l+0x558>
 80035e4:	9b06      	ldr	r3, [sp, #24]
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	9908      	ldr	r1, [sp, #32]
 80035ea:	4623      	mov	r3, r4
 80035ec:	465a      	mov	r2, fp
 80035ee:	4650      	mov	r0, sl
 80035f0:	f001 fe10 	bl	8005214 <__s2b>
 80035f4:	9008      	str	r0, [sp, #32]
 80035f6:	2800      	cmp	r0, #0
 80035f8:	f43f af21 	beq.w	800343e <_strtod_l+0x46e>
 80035fc:	9b04      	ldr	r3, [sp, #16]
 80035fe:	1b5d      	subs	r5, r3, r5
 8003600:	9b07      	ldr	r3, [sp, #28]
 8003602:	2b00      	cmp	r3, #0
 8003604:	bfb4      	ite	lt
 8003606:	462b      	movlt	r3, r5
 8003608:	2300      	movge	r3, #0
 800360a:	930e      	str	r3, [sp, #56]	; 0x38
 800360c:	9b07      	ldr	r3, [sp, #28]
 800360e:	f04f 0b00 	mov.w	fp, #0
 8003612:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003616:	9314      	str	r3, [sp, #80]	; 0x50
 8003618:	f8cd b010 	str.w	fp, [sp, #16]
 800361c:	9b08      	ldr	r3, [sp, #32]
 800361e:	4650      	mov	r0, sl
 8003620:	6859      	ldr	r1, [r3, #4]
 8003622:	f001 fd4f 	bl	80050c4 <_Balloc>
 8003626:	9006      	str	r0, [sp, #24]
 8003628:	2800      	cmp	r0, #0
 800362a:	f43f af10 	beq.w	800344e <_strtod_l+0x47e>
 800362e:	9b08      	ldr	r3, [sp, #32]
 8003630:	691a      	ldr	r2, [r3, #16]
 8003632:	3202      	adds	r2, #2
 8003634:	f103 010c 	add.w	r1, r3, #12
 8003638:	0092      	lsls	r2, r2, #2
 800363a:	300c      	adds	r0, #12
 800363c:	f001 fd34 	bl	80050a8 <memcpy>
 8003640:	ab1c      	add	r3, sp, #112	; 0x70
 8003642:	9301      	str	r3, [sp, #4]
 8003644:	ab1b      	add	r3, sp, #108	; 0x6c
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	4642      	mov	r2, r8
 800364a:	464b      	mov	r3, r9
 800364c:	4650      	mov	r0, sl
 800364e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8003652:	f002 f91d 	bl	8005890 <__d2b>
 8003656:	901a      	str	r0, [sp, #104]	; 0x68
 8003658:	2800      	cmp	r0, #0
 800365a:	f43f aef8 	beq.w	800344e <_strtod_l+0x47e>
 800365e:	2101      	movs	r1, #1
 8003660:	4650      	mov	r0, sl
 8003662:	f001 fe6f 	bl	8005344 <__i2b>
 8003666:	9004      	str	r0, [sp, #16]
 8003668:	4603      	mov	r3, r0
 800366a:	2800      	cmp	r0, #0
 800366c:	f43f aeef 	beq.w	800344e <_strtod_l+0x47e>
 8003670:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003672:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003674:	2d00      	cmp	r5, #0
 8003676:	bfab      	itete	ge
 8003678:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800367a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800367c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800367e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8003680:	bfac      	ite	ge
 8003682:	18ee      	addge	r6, r5, r3
 8003684:	1b5c      	sublt	r4, r3, r5
 8003686:	9b05      	ldr	r3, [sp, #20]
 8003688:	1aed      	subs	r5, r5, r3
 800368a:	4415      	add	r5, r2
 800368c:	4b6d      	ldr	r3, [pc, #436]	; (8003844 <_strtod_l+0x874>)
 800368e:	3d01      	subs	r5, #1
 8003690:	429d      	cmp	r5, r3
 8003692:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003696:	f280 80c4 	bge.w	8003822 <_strtod_l+0x852>
 800369a:	1b5b      	subs	r3, r3, r5
 800369c:	2b1f      	cmp	r3, #31
 800369e:	eba2 0203 	sub.w	r2, r2, r3
 80036a2:	f04f 0701 	mov.w	r7, #1
 80036a6:	f300 80b1 	bgt.w	800380c <_strtod_l+0x83c>
 80036aa:	fa07 f303 	lsl.w	r3, r7, r3
 80036ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80036b0:	2500      	movs	r5, #0
 80036b2:	18b7      	adds	r7, r6, r2
 80036b4:	9b05      	ldr	r3, [sp, #20]
 80036b6:	42be      	cmp	r6, r7
 80036b8:	4414      	add	r4, r2
 80036ba:	441c      	add	r4, r3
 80036bc:	4633      	mov	r3, r6
 80036be:	bfa8      	it	ge
 80036c0:	463b      	movge	r3, r7
 80036c2:	42a3      	cmp	r3, r4
 80036c4:	bfa8      	it	ge
 80036c6:	4623      	movge	r3, r4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	bfc2      	ittt	gt
 80036cc:	1aff      	subgt	r7, r7, r3
 80036ce:	1ae4      	subgt	r4, r4, r3
 80036d0:	1af6      	subgt	r6, r6, r3
 80036d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	dd17      	ble.n	8003708 <_strtod_l+0x738>
 80036d8:	9904      	ldr	r1, [sp, #16]
 80036da:	461a      	mov	r2, r3
 80036dc:	4650      	mov	r0, sl
 80036de:	f001 feef 	bl	80054c0 <__pow5mult>
 80036e2:	9004      	str	r0, [sp, #16]
 80036e4:	2800      	cmp	r0, #0
 80036e6:	f43f aeb2 	beq.w	800344e <_strtod_l+0x47e>
 80036ea:	4601      	mov	r1, r0
 80036ec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80036ee:	4650      	mov	r0, sl
 80036f0:	f001 fe3e 	bl	8005370 <__multiply>
 80036f4:	9009      	str	r0, [sp, #36]	; 0x24
 80036f6:	2800      	cmp	r0, #0
 80036f8:	f43f aea9 	beq.w	800344e <_strtod_l+0x47e>
 80036fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80036fe:	4650      	mov	r0, sl
 8003700:	f001 fd20 	bl	8005144 <_Bfree>
 8003704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003706:	931a      	str	r3, [sp, #104]	; 0x68
 8003708:	2f00      	cmp	r7, #0
 800370a:	f300 808e 	bgt.w	800382a <_strtod_l+0x85a>
 800370e:	9b07      	ldr	r3, [sp, #28]
 8003710:	2b00      	cmp	r3, #0
 8003712:	dd08      	ble.n	8003726 <_strtod_l+0x756>
 8003714:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003716:	9906      	ldr	r1, [sp, #24]
 8003718:	4650      	mov	r0, sl
 800371a:	f001 fed1 	bl	80054c0 <__pow5mult>
 800371e:	9006      	str	r0, [sp, #24]
 8003720:	2800      	cmp	r0, #0
 8003722:	f43f ae94 	beq.w	800344e <_strtod_l+0x47e>
 8003726:	2c00      	cmp	r4, #0
 8003728:	dd08      	ble.n	800373c <_strtod_l+0x76c>
 800372a:	9906      	ldr	r1, [sp, #24]
 800372c:	4622      	mov	r2, r4
 800372e:	4650      	mov	r0, sl
 8003730:	f001 ff20 	bl	8005574 <__lshift>
 8003734:	9006      	str	r0, [sp, #24]
 8003736:	2800      	cmp	r0, #0
 8003738:	f43f ae89 	beq.w	800344e <_strtod_l+0x47e>
 800373c:	2e00      	cmp	r6, #0
 800373e:	dd08      	ble.n	8003752 <_strtod_l+0x782>
 8003740:	9904      	ldr	r1, [sp, #16]
 8003742:	4632      	mov	r2, r6
 8003744:	4650      	mov	r0, sl
 8003746:	f001 ff15 	bl	8005574 <__lshift>
 800374a:	9004      	str	r0, [sp, #16]
 800374c:	2800      	cmp	r0, #0
 800374e:	f43f ae7e 	beq.w	800344e <_strtod_l+0x47e>
 8003752:	9a06      	ldr	r2, [sp, #24]
 8003754:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003756:	4650      	mov	r0, sl
 8003758:	f001 ff98 	bl	800568c <__mdiff>
 800375c:	4683      	mov	fp, r0
 800375e:	2800      	cmp	r0, #0
 8003760:	f43f ae75 	beq.w	800344e <_strtod_l+0x47e>
 8003764:	2400      	movs	r4, #0
 8003766:	68c3      	ldr	r3, [r0, #12]
 8003768:	9904      	ldr	r1, [sp, #16]
 800376a:	60c4      	str	r4, [r0, #12]
 800376c:	930b      	str	r3, [sp, #44]	; 0x2c
 800376e:	f001 ff71 	bl	8005654 <__mcmp>
 8003772:	42a0      	cmp	r0, r4
 8003774:	da6c      	bge.n	8003850 <_strtod_l+0x880>
 8003776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003778:	ea53 0308 	orrs.w	r3, r3, r8
 800377c:	f040 8092 	bne.w	80038a4 <_strtod_l+0x8d4>
 8003780:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003784:	2b00      	cmp	r3, #0
 8003786:	f040 808d 	bne.w	80038a4 <_strtod_l+0x8d4>
 800378a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800378e:	0d1b      	lsrs	r3, r3, #20
 8003790:	051b      	lsls	r3, r3, #20
 8003792:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8003796:	f240 8085 	bls.w	80038a4 <_strtod_l+0x8d4>
 800379a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800379e:	b91b      	cbnz	r3, 80037a8 <_strtod_l+0x7d8>
 80037a0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	dd7d      	ble.n	80038a4 <_strtod_l+0x8d4>
 80037a8:	4659      	mov	r1, fp
 80037aa:	2201      	movs	r2, #1
 80037ac:	4650      	mov	r0, sl
 80037ae:	f001 fee1 	bl	8005574 <__lshift>
 80037b2:	9904      	ldr	r1, [sp, #16]
 80037b4:	4683      	mov	fp, r0
 80037b6:	f001 ff4d 	bl	8005654 <__mcmp>
 80037ba:	2800      	cmp	r0, #0
 80037bc:	dd72      	ble.n	80038a4 <_strtod_l+0x8d4>
 80037be:	9905      	ldr	r1, [sp, #20]
 80037c0:	4a21      	ldr	r2, [pc, #132]	; (8003848 <_strtod_l+0x878>)
 80037c2:	464b      	mov	r3, r9
 80037c4:	2900      	cmp	r1, #0
 80037c6:	f000 808d 	beq.w	80038e4 <_strtod_l+0x914>
 80037ca:	ea02 0109 	and.w	r1, r2, r9
 80037ce:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80037d2:	f300 8087 	bgt.w	80038e4 <_strtod_l+0x914>
 80037d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80037da:	f77f aead 	ble.w	8003538 <_strtod_l+0x568>
 80037de:	4b1b      	ldr	r3, [pc, #108]	; (800384c <_strtod_l+0x87c>)
 80037e0:	4640      	mov	r0, r8
 80037e2:	4649      	mov	r1, r9
 80037e4:	2200      	movs	r2, #0
 80037e6:	f7fc ff0f 	bl	8000608 <__aeabi_dmul>
 80037ea:	460b      	mov	r3, r1
 80037ec:	4303      	orrs	r3, r0
 80037ee:	bf08      	it	eq
 80037f0:	2322      	moveq	r3, #34	; 0x22
 80037f2:	4680      	mov	r8, r0
 80037f4:	4689      	mov	r9, r1
 80037f6:	bf08      	it	eq
 80037f8:	f8ca 3000 	streq.w	r3, [sl]
 80037fc:	e632      	b.n	8003464 <_strtod_l+0x494>
 80037fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	ea03 0808 	and.w	r8, r3, r8
 800380a:	e6e3      	b.n	80035d4 <_strtod_l+0x604>
 800380c:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8003810:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8003814:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8003818:	35e2      	adds	r5, #226	; 0xe2
 800381a:	fa07 f505 	lsl.w	r5, r7, r5
 800381e:	970f      	str	r7, [sp, #60]	; 0x3c
 8003820:	e747      	b.n	80036b2 <_strtod_l+0x6e2>
 8003822:	2301      	movs	r3, #1
 8003824:	2500      	movs	r5, #0
 8003826:	930f      	str	r3, [sp, #60]	; 0x3c
 8003828:	e743      	b.n	80036b2 <_strtod_l+0x6e2>
 800382a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800382c:	463a      	mov	r2, r7
 800382e:	4650      	mov	r0, sl
 8003830:	f001 fea0 	bl	8005574 <__lshift>
 8003834:	901a      	str	r0, [sp, #104]	; 0x68
 8003836:	2800      	cmp	r0, #0
 8003838:	f47f af69 	bne.w	800370e <_strtod_l+0x73e>
 800383c:	e607      	b.n	800344e <_strtod_l+0x47e>
 800383e:	bf00      	nop
 8003840:	08006c88 	.word	0x08006c88
 8003844:	fffffc02 	.word	0xfffffc02
 8003848:	7ff00000 	.word	0x7ff00000
 800384c:	39500000 	.word	0x39500000
 8003850:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003854:	d165      	bne.n	8003922 <_strtod_l+0x952>
 8003856:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003858:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800385c:	b35a      	cbz	r2, 80038b6 <_strtod_l+0x8e6>
 800385e:	4a9a      	ldr	r2, [pc, #616]	; (8003ac8 <_strtod_l+0xaf8>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d12b      	bne.n	80038bc <_strtod_l+0x8ec>
 8003864:	9b05      	ldr	r3, [sp, #20]
 8003866:	4641      	mov	r1, r8
 8003868:	b303      	cbz	r3, 80038ac <_strtod_l+0x8dc>
 800386a:	4b98      	ldr	r3, [pc, #608]	; (8003acc <_strtod_l+0xafc>)
 800386c:	464a      	mov	r2, r9
 800386e:	4013      	ands	r3, r2
 8003870:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8003874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003878:	d81b      	bhi.n	80038b2 <_strtod_l+0x8e2>
 800387a:	0d1b      	lsrs	r3, r3, #20
 800387c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	4299      	cmp	r1, r3
 8003886:	d119      	bne.n	80038bc <_strtod_l+0x8ec>
 8003888:	4b91      	ldr	r3, [pc, #580]	; (8003ad0 <_strtod_l+0xb00>)
 800388a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800388c:	429a      	cmp	r2, r3
 800388e:	d102      	bne.n	8003896 <_strtod_l+0x8c6>
 8003890:	3101      	adds	r1, #1
 8003892:	f43f addc 	beq.w	800344e <_strtod_l+0x47e>
 8003896:	4b8d      	ldr	r3, [pc, #564]	; (8003acc <_strtod_l+0xafc>)
 8003898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800389a:	401a      	ands	r2, r3
 800389c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80038a0:	f04f 0800 	mov.w	r8, #0
 80038a4:	9b05      	ldr	r3, [sp, #20]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d199      	bne.n	80037de <_strtod_l+0x80e>
 80038aa:	e5db      	b.n	8003464 <_strtod_l+0x494>
 80038ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038b0:	e7e8      	b.n	8003884 <_strtod_l+0x8b4>
 80038b2:	4613      	mov	r3, r2
 80038b4:	e7e6      	b.n	8003884 <_strtod_l+0x8b4>
 80038b6:	ea53 0308 	orrs.w	r3, r3, r8
 80038ba:	d080      	beq.n	80037be <_strtod_l+0x7ee>
 80038bc:	b1e5      	cbz	r5, 80038f8 <_strtod_l+0x928>
 80038be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038c0:	421d      	tst	r5, r3
 80038c2:	d0ef      	beq.n	80038a4 <_strtod_l+0x8d4>
 80038c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80038c6:	9a05      	ldr	r2, [sp, #20]
 80038c8:	4640      	mov	r0, r8
 80038ca:	4649      	mov	r1, r9
 80038cc:	b1c3      	cbz	r3, 8003900 <_strtod_l+0x930>
 80038ce:	f7ff fb5d 	bl	8002f8c <sulp>
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80038da:	f7fc fcdf 	bl	800029c <__adddf3>
 80038de:	4680      	mov	r8, r0
 80038e0:	4689      	mov	r9, r1
 80038e2:	e7df      	b.n	80038a4 <_strtod_l+0x8d4>
 80038e4:	4013      	ands	r3, r2
 80038e6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80038ea:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80038ee:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80038f2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80038f6:	e7d5      	b.n	80038a4 <_strtod_l+0x8d4>
 80038f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80038fa:	ea13 0f08 	tst.w	r3, r8
 80038fe:	e7e0      	b.n	80038c2 <_strtod_l+0x8f2>
 8003900:	f7ff fb44 	bl	8002f8c <sulp>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800390c:	f7fc fcc4 	bl	8000298 <__aeabi_dsub>
 8003910:	2200      	movs	r2, #0
 8003912:	2300      	movs	r3, #0
 8003914:	4680      	mov	r8, r0
 8003916:	4689      	mov	r9, r1
 8003918:	f7fd f8de 	bl	8000ad8 <__aeabi_dcmpeq>
 800391c:	2800      	cmp	r0, #0
 800391e:	d0c1      	beq.n	80038a4 <_strtod_l+0x8d4>
 8003920:	e60a      	b.n	8003538 <_strtod_l+0x568>
 8003922:	9904      	ldr	r1, [sp, #16]
 8003924:	4658      	mov	r0, fp
 8003926:	f002 f80f 	bl	8005948 <__ratio>
 800392a:	2200      	movs	r2, #0
 800392c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003930:	4606      	mov	r6, r0
 8003932:	460f      	mov	r7, r1
 8003934:	f7fd f8e4 	bl	8000b00 <__aeabi_dcmple>
 8003938:	2800      	cmp	r0, #0
 800393a:	d070      	beq.n	8003a1e <_strtod_l+0xa4e>
 800393c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800393e:	2b00      	cmp	r3, #0
 8003940:	d042      	beq.n	80039c8 <_strtod_l+0x9f8>
 8003942:	4f64      	ldr	r7, [pc, #400]	; (8003ad4 <_strtod_l+0xb04>)
 8003944:	2600      	movs	r6, #0
 8003946:	4d63      	ldr	r5, [pc, #396]	; (8003ad4 <_strtod_l+0xb04>)
 8003948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800394a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800394e:	0d1b      	lsrs	r3, r3, #20
 8003950:	051b      	lsls	r3, r3, #20
 8003952:	930f      	str	r3, [sp, #60]	; 0x3c
 8003954:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003956:	4b60      	ldr	r3, [pc, #384]	; (8003ad8 <_strtod_l+0xb08>)
 8003958:	429a      	cmp	r2, r3
 800395a:	f040 80c5 	bne.w	8003ae8 <_strtod_l+0xb18>
 800395e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003960:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8003964:	4640      	mov	r0, r8
 8003966:	4649      	mov	r1, r9
 8003968:	f001 ff18 	bl	800579c <__ulp>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4630      	mov	r0, r6
 8003972:	4639      	mov	r1, r7
 8003974:	f7fc fe48 	bl	8000608 <__aeabi_dmul>
 8003978:	4642      	mov	r2, r8
 800397a:	464b      	mov	r3, r9
 800397c:	f7fc fc8e 	bl	800029c <__adddf3>
 8003980:	460b      	mov	r3, r1
 8003982:	4952      	ldr	r1, [pc, #328]	; (8003acc <_strtod_l+0xafc>)
 8003984:	4a55      	ldr	r2, [pc, #340]	; (8003adc <_strtod_l+0xb0c>)
 8003986:	4019      	ands	r1, r3
 8003988:	4291      	cmp	r1, r2
 800398a:	4680      	mov	r8, r0
 800398c:	d95d      	bls.n	8003a4a <_strtod_l+0xa7a>
 800398e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003990:	4b4f      	ldr	r3, [pc, #316]	; (8003ad0 <_strtod_l+0xb00>)
 8003992:	429a      	cmp	r2, r3
 8003994:	d103      	bne.n	800399e <_strtod_l+0x9ce>
 8003996:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003998:	3301      	adds	r3, #1
 800399a:	f43f ad58 	beq.w	800344e <_strtod_l+0x47e>
 800399e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8003ad0 <_strtod_l+0xb00>
 80039a2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80039a6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80039a8:	4650      	mov	r0, sl
 80039aa:	f001 fbcb 	bl	8005144 <_Bfree>
 80039ae:	9906      	ldr	r1, [sp, #24]
 80039b0:	4650      	mov	r0, sl
 80039b2:	f001 fbc7 	bl	8005144 <_Bfree>
 80039b6:	9904      	ldr	r1, [sp, #16]
 80039b8:	4650      	mov	r0, sl
 80039ba:	f001 fbc3 	bl	8005144 <_Bfree>
 80039be:	4659      	mov	r1, fp
 80039c0:	4650      	mov	r0, sl
 80039c2:	f001 fbbf 	bl	8005144 <_Bfree>
 80039c6:	e629      	b.n	800361c <_strtod_l+0x64c>
 80039c8:	f1b8 0f00 	cmp.w	r8, #0
 80039cc:	d119      	bne.n	8003a02 <_strtod_l+0xa32>
 80039ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039d4:	b9e3      	cbnz	r3, 8003a10 <_strtod_l+0xa40>
 80039d6:	4b3f      	ldr	r3, [pc, #252]	; (8003ad4 <_strtod_l+0xb04>)
 80039d8:	2200      	movs	r2, #0
 80039da:	4630      	mov	r0, r6
 80039dc:	4639      	mov	r1, r7
 80039de:	f7fd f885 	bl	8000aec <__aeabi_dcmplt>
 80039e2:	b9c8      	cbnz	r0, 8003a18 <_strtod_l+0xa48>
 80039e4:	4b3e      	ldr	r3, [pc, #248]	; (8003ae0 <_strtod_l+0xb10>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	4630      	mov	r0, r6
 80039ea:	4639      	mov	r1, r7
 80039ec:	f7fc fe0c 	bl	8000608 <__aeabi_dmul>
 80039f0:	4604      	mov	r4, r0
 80039f2:	460d      	mov	r5, r1
 80039f4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80039f8:	9416      	str	r4, [sp, #88]	; 0x58
 80039fa:	9317      	str	r3, [sp, #92]	; 0x5c
 80039fc:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8003a00:	e7a2      	b.n	8003948 <_strtod_l+0x978>
 8003a02:	f1b8 0f01 	cmp.w	r8, #1
 8003a06:	d103      	bne.n	8003a10 <_strtod_l+0xa40>
 8003a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f43f ad94 	beq.w	8003538 <_strtod_l+0x568>
 8003a10:	4f34      	ldr	r7, [pc, #208]	; (8003ae4 <_strtod_l+0xb14>)
 8003a12:	2600      	movs	r6, #0
 8003a14:	2400      	movs	r4, #0
 8003a16:	e796      	b.n	8003946 <_strtod_l+0x976>
 8003a18:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003a1a:	4d31      	ldr	r5, [pc, #196]	; (8003ae0 <_strtod_l+0xb10>)
 8003a1c:	e7ea      	b.n	80039f4 <_strtod_l+0xa24>
 8003a1e:	4b30      	ldr	r3, [pc, #192]	; (8003ae0 <_strtod_l+0xb10>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	4630      	mov	r0, r6
 8003a24:	4639      	mov	r1, r7
 8003a26:	f7fc fdef 	bl	8000608 <__aeabi_dmul>
 8003a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a2c:	4604      	mov	r4, r0
 8003a2e:	460d      	mov	r5, r1
 8003a30:	b933      	cbnz	r3, 8003a40 <_strtod_l+0xa70>
 8003a32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003a36:	9010      	str	r0, [sp, #64]	; 0x40
 8003a38:	9311      	str	r3, [sp, #68]	; 0x44
 8003a3a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003a3e:	e783      	b.n	8003948 <_strtod_l+0x978>
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8003a48:	e7f7      	b.n	8003a3a <_strtod_l+0xa6a>
 8003a4a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8003a4e:	9b05      	ldr	r3, [sp, #20]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1a8      	bne.n	80039a6 <_strtod_l+0x9d6>
 8003a54:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003a58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003a5a:	0d1b      	lsrs	r3, r3, #20
 8003a5c:	051b      	lsls	r3, r3, #20
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d1a1      	bne.n	80039a6 <_strtod_l+0x9d6>
 8003a62:	4620      	mov	r0, r4
 8003a64:	4629      	mov	r1, r5
 8003a66:	f7fd f917 	bl	8000c98 <__aeabi_d2lz>
 8003a6a:	f7fc fd9f 	bl	80005ac <__aeabi_l2d>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4620      	mov	r0, r4
 8003a74:	4629      	mov	r1, r5
 8003a76:	f7fc fc0f 	bl	8000298 <__aeabi_dsub>
 8003a7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003a7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003a80:	ea43 0308 	orr.w	r3, r3, r8
 8003a84:	4313      	orrs	r3, r2
 8003a86:	4604      	mov	r4, r0
 8003a88:	460d      	mov	r5, r1
 8003a8a:	d068      	beq.n	8003b5e <_strtod_l+0xb8e>
 8003a8c:	a30a      	add	r3, pc, #40	; (adr r3, 8003ab8 <_strtod_l+0xae8>)
 8003a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a92:	f7fd f82b 	bl	8000aec <__aeabi_dcmplt>
 8003a96:	2800      	cmp	r0, #0
 8003a98:	f47f ace4 	bne.w	8003464 <_strtod_l+0x494>
 8003a9c:	a308      	add	r3, pc, #32	; (adr r3, 8003ac0 <_strtod_l+0xaf0>)
 8003a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	4629      	mov	r1, r5
 8003aa6:	f7fd f83f 	bl	8000b28 <__aeabi_dcmpgt>
 8003aaa:	2800      	cmp	r0, #0
 8003aac:	f43f af7b 	beq.w	80039a6 <_strtod_l+0x9d6>
 8003ab0:	e4d8      	b.n	8003464 <_strtod_l+0x494>
 8003ab2:	bf00      	nop
 8003ab4:	f3af 8000 	nop.w
 8003ab8:	94a03595 	.word	0x94a03595
 8003abc:	3fdfffff 	.word	0x3fdfffff
 8003ac0:	35afe535 	.word	0x35afe535
 8003ac4:	3fe00000 	.word	0x3fe00000
 8003ac8:	000fffff 	.word	0x000fffff
 8003acc:	7ff00000 	.word	0x7ff00000
 8003ad0:	7fefffff 	.word	0x7fefffff
 8003ad4:	3ff00000 	.word	0x3ff00000
 8003ad8:	7fe00000 	.word	0x7fe00000
 8003adc:	7c9fffff 	.word	0x7c9fffff
 8003ae0:	3fe00000 	.word	0x3fe00000
 8003ae4:	bff00000 	.word	0xbff00000
 8003ae8:	9b05      	ldr	r3, [sp, #20]
 8003aea:	b313      	cbz	r3, 8003b32 <_strtod_l+0xb62>
 8003aec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003aee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8003af2:	d81e      	bhi.n	8003b32 <_strtod_l+0xb62>
 8003af4:	a326      	add	r3, pc, #152	; (adr r3, 8003b90 <_strtod_l+0xbc0>)
 8003af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afa:	4620      	mov	r0, r4
 8003afc:	4629      	mov	r1, r5
 8003afe:	f7fc ffff 	bl	8000b00 <__aeabi_dcmple>
 8003b02:	b190      	cbz	r0, 8003b2a <_strtod_l+0xb5a>
 8003b04:	4629      	mov	r1, r5
 8003b06:	4620      	mov	r0, r4
 8003b08:	f7fd f856 	bl	8000bb8 <__aeabi_d2uiz>
 8003b0c:	2801      	cmp	r0, #1
 8003b0e:	bf38      	it	cc
 8003b10:	2001      	movcc	r0, #1
 8003b12:	f7fc fcff 	bl	8000514 <__aeabi_ui2d>
 8003b16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b18:	4604      	mov	r4, r0
 8003b1a:	460d      	mov	r5, r1
 8003b1c:	b9d3      	cbnz	r3, 8003b54 <_strtod_l+0xb84>
 8003b1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003b22:	9012      	str	r0, [sp, #72]	; 0x48
 8003b24:	9313      	str	r3, [sp, #76]	; 0x4c
 8003b26:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8003b2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003b2c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8003b30:	1a9f      	subs	r7, r3, r2
 8003b32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003b36:	f001 fe31 	bl	800579c <__ulp>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4630      	mov	r0, r6
 8003b40:	4639      	mov	r1, r7
 8003b42:	f7fc fd61 	bl	8000608 <__aeabi_dmul>
 8003b46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003b4a:	f7fc fba7 	bl	800029c <__adddf3>
 8003b4e:	4680      	mov	r8, r0
 8003b50:	4689      	mov	r9, r1
 8003b52:	e77c      	b.n	8003a4e <_strtod_l+0xa7e>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8003b5c:	e7e3      	b.n	8003b26 <_strtod_l+0xb56>
 8003b5e:	a30e      	add	r3, pc, #56	; (adr r3, 8003b98 <_strtod_l+0xbc8>)
 8003b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b64:	f7fc ffc2 	bl	8000aec <__aeabi_dcmplt>
 8003b68:	e79f      	b.n	8003aaa <_strtod_l+0xada>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	930a      	str	r3, [sp, #40]	; 0x28
 8003b6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003b70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	f7ff ba71 	b.w	800305a <_strtod_l+0x8a>
 8003b78:	2a65      	cmp	r2, #101	; 0x65
 8003b7a:	f43f ab63 	beq.w	8003244 <_strtod_l+0x274>
 8003b7e:	2a45      	cmp	r2, #69	; 0x45
 8003b80:	f43f ab60 	beq.w	8003244 <_strtod_l+0x274>
 8003b84:	2301      	movs	r3, #1
 8003b86:	f7ff bb95 	b.w	80032b4 <_strtod_l+0x2e4>
 8003b8a:	bf00      	nop
 8003b8c:	f3af 8000 	nop.w
 8003b90:	ffc00000 	.word	0xffc00000
 8003b94:	41dfffff 	.word	0x41dfffff
 8003b98:	94a03595 	.word	0x94a03595
 8003b9c:	3fcfffff 	.word	0x3fcfffff

08003ba0 <_strtod_r>:
 8003ba0:	4b01      	ldr	r3, [pc, #4]	; (8003ba8 <_strtod_r+0x8>)
 8003ba2:	f7ff ba15 	b.w	8002fd0 <_strtod_l>
 8003ba6:	bf00      	nop
 8003ba8:	200000ac 	.word	0x200000ac

08003bac <_strtol_l.constprop.0>:
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bb2:	4680      	mov	r8, r0
 8003bb4:	d001      	beq.n	8003bba <_strtol_l.constprop.0+0xe>
 8003bb6:	2b24      	cmp	r3, #36	; 0x24
 8003bb8:	d906      	bls.n	8003bc8 <_strtol_l.constprop.0+0x1c>
 8003bba:	f000 feeb 	bl	8004994 <__errno>
 8003bbe:	2316      	movs	r3, #22
 8003bc0:	6003      	str	r3, [r0, #0]
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bc8:	4f35      	ldr	r7, [pc, #212]	; (8003ca0 <_strtol_l.constprop.0+0xf4>)
 8003bca:	460d      	mov	r5, r1
 8003bcc:	4628      	mov	r0, r5
 8003bce:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003bd2:	5de6      	ldrb	r6, [r4, r7]
 8003bd4:	f016 0608 	ands.w	r6, r6, #8
 8003bd8:	d1f8      	bne.n	8003bcc <_strtol_l.constprop.0+0x20>
 8003bda:	2c2d      	cmp	r4, #45	; 0x2d
 8003bdc:	d12f      	bne.n	8003c3e <_strtol_l.constprop.0+0x92>
 8003bde:	782c      	ldrb	r4, [r5, #0]
 8003be0:	2601      	movs	r6, #1
 8003be2:	1c85      	adds	r5, r0, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d057      	beq.n	8003c98 <_strtol_l.constprop.0+0xec>
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d109      	bne.n	8003c00 <_strtol_l.constprop.0+0x54>
 8003bec:	2c30      	cmp	r4, #48	; 0x30
 8003bee:	d107      	bne.n	8003c00 <_strtol_l.constprop.0+0x54>
 8003bf0:	7828      	ldrb	r0, [r5, #0]
 8003bf2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003bf6:	2858      	cmp	r0, #88	; 0x58
 8003bf8:	d149      	bne.n	8003c8e <_strtol_l.constprop.0+0xe2>
 8003bfa:	786c      	ldrb	r4, [r5, #1]
 8003bfc:	2310      	movs	r3, #16
 8003bfe:	3502      	adds	r5, #2
 8003c00:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8003c04:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8003c08:	2700      	movs	r7, #0
 8003c0a:	fbbe f9f3 	udiv	r9, lr, r3
 8003c0e:	4638      	mov	r0, r7
 8003c10:	fb03 ea19 	mls	sl, r3, r9, lr
 8003c14:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003c18:	f1bc 0f09 	cmp.w	ip, #9
 8003c1c:	d814      	bhi.n	8003c48 <_strtol_l.constprop.0+0x9c>
 8003c1e:	4664      	mov	r4, ip
 8003c20:	42a3      	cmp	r3, r4
 8003c22:	dd22      	ble.n	8003c6a <_strtol_l.constprop.0+0xbe>
 8003c24:	2f00      	cmp	r7, #0
 8003c26:	db1d      	blt.n	8003c64 <_strtol_l.constprop.0+0xb8>
 8003c28:	4581      	cmp	r9, r0
 8003c2a:	d31b      	bcc.n	8003c64 <_strtol_l.constprop.0+0xb8>
 8003c2c:	d101      	bne.n	8003c32 <_strtol_l.constprop.0+0x86>
 8003c2e:	45a2      	cmp	sl, r4
 8003c30:	db18      	blt.n	8003c64 <_strtol_l.constprop.0+0xb8>
 8003c32:	fb00 4003 	mla	r0, r0, r3, r4
 8003c36:	2701      	movs	r7, #1
 8003c38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003c3c:	e7ea      	b.n	8003c14 <_strtol_l.constprop.0+0x68>
 8003c3e:	2c2b      	cmp	r4, #43	; 0x2b
 8003c40:	bf04      	itt	eq
 8003c42:	782c      	ldrbeq	r4, [r5, #0]
 8003c44:	1c85      	addeq	r5, r0, #2
 8003c46:	e7cd      	b.n	8003be4 <_strtol_l.constprop.0+0x38>
 8003c48:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003c4c:	f1bc 0f19 	cmp.w	ip, #25
 8003c50:	d801      	bhi.n	8003c56 <_strtol_l.constprop.0+0xaa>
 8003c52:	3c37      	subs	r4, #55	; 0x37
 8003c54:	e7e4      	b.n	8003c20 <_strtol_l.constprop.0+0x74>
 8003c56:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003c5a:	f1bc 0f19 	cmp.w	ip, #25
 8003c5e:	d804      	bhi.n	8003c6a <_strtol_l.constprop.0+0xbe>
 8003c60:	3c57      	subs	r4, #87	; 0x57
 8003c62:	e7dd      	b.n	8003c20 <_strtol_l.constprop.0+0x74>
 8003c64:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003c68:	e7e6      	b.n	8003c38 <_strtol_l.constprop.0+0x8c>
 8003c6a:	2f00      	cmp	r7, #0
 8003c6c:	da07      	bge.n	8003c7e <_strtol_l.constprop.0+0xd2>
 8003c6e:	2322      	movs	r3, #34	; 0x22
 8003c70:	f8c8 3000 	str.w	r3, [r8]
 8003c74:	4670      	mov	r0, lr
 8003c76:	2a00      	cmp	r2, #0
 8003c78:	d0a4      	beq.n	8003bc4 <_strtol_l.constprop.0+0x18>
 8003c7a:	1e69      	subs	r1, r5, #1
 8003c7c:	e005      	b.n	8003c8a <_strtol_l.constprop.0+0xde>
 8003c7e:	b106      	cbz	r6, 8003c82 <_strtol_l.constprop.0+0xd6>
 8003c80:	4240      	negs	r0, r0
 8003c82:	2a00      	cmp	r2, #0
 8003c84:	d09e      	beq.n	8003bc4 <_strtol_l.constprop.0+0x18>
 8003c86:	2f00      	cmp	r7, #0
 8003c88:	d1f7      	bne.n	8003c7a <_strtol_l.constprop.0+0xce>
 8003c8a:	6011      	str	r1, [r2, #0]
 8003c8c:	e79a      	b.n	8003bc4 <_strtol_l.constprop.0+0x18>
 8003c8e:	2430      	movs	r4, #48	; 0x30
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1b5      	bne.n	8003c00 <_strtol_l.constprop.0+0x54>
 8003c94:	2308      	movs	r3, #8
 8003c96:	e7b3      	b.n	8003c00 <_strtol_l.constprop.0+0x54>
 8003c98:	2c30      	cmp	r4, #48	; 0x30
 8003c9a:	d0a9      	beq.n	8003bf0 <_strtol_l.constprop.0+0x44>
 8003c9c:	230a      	movs	r3, #10
 8003c9e:	e7af      	b.n	8003c00 <_strtol_l.constprop.0+0x54>
 8003ca0:	08006cb1 	.word	0x08006cb1

08003ca4 <_strtol_r>:
 8003ca4:	f7ff bf82 	b.w	8003bac <_strtol_l.constprop.0>

08003ca8 <quorem>:
 8003ca8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cac:	6903      	ldr	r3, [r0, #16]
 8003cae:	690c      	ldr	r4, [r1, #16]
 8003cb0:	42a3      	cmp	r3, r4
 8003cb2:	4607      	mov	r7, r0
 8003cb4:	db7d      	blt.n	8003db2 <quorem+0x10a>
 8003cb6:	3c01      	subs	r4, #1
 8003cb8:	f101 0814 	add.w	r8, r1, #20
 8003cbc:	f100 0514 	add.w	r5, r0, #20
 8003cc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003cc4:	9301      	str	r3, [sp, #4]
 8003cc6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003cca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003cd6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003cda:	fbb2 f6f3 	udiv	r6, r2, r3
 8003cde:	d32e      	bcc.n	8003d3e <quorem+0x96>
 8003ce0:	f04f 0e00 	mov.w	lr, #0
 8003ce4:	4640      	mov	r0, r8
 8003ce6:	46ac      	mov	ip, r5
 8003ce8:	46f2      	mov	sl, lr
 8003cea:	f850 2b04 	ldr.w	r2, [r0], #4
 8003cee:	b293      	uxth	r3, r2
 8003cf0:	fb06 e303 	mla	r3, r6, r3, lr
 8003cf4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003cf8:	0c12      	lsrs	r2, r2, #16
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	fb06 e202 	mla	r2, r6, r2, lr
 8003d00:	ebaa 0303 	sub.w	r3, sl, r3
 8003d04:	f8dc a000 	ldr.w	sl, [ip]
 8003d08:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003d0c:	b292      	uxth	r2, r2
 8003d0e:	fa13 f38a 	uxtah	r3, r3, sl
 8003d12:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003d16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d20:	4581      	cmp	r9, r0
 8003d22:	f84c 3b04 	str.w	r3, [ip], #4
 8003d26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003d2a:	d2de      	bcs.n	8003cea <quorem+0x42>
 8003d2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8003d30:	b92b      	cbnz	r3, 8003d3e <quorem+0x96>
 8003d32:	9b01      	ldr	r3, [sp, #4]
 8003d34:	3b04      	subs	r3, #4
 8003d36:	429d      	cmp	r5, r3
 8003d38:	461a      	mov	r2, r3
 8003d3a:	d32e      	bcc.n	8003d9a <quorem+0xf2>
 8003d3c:	613c      	str	r4, [r7, #16]
 8003d3e:	4638      	mov	r0, r7
 8003d40:	f001 fc88 	bl	8005654 <__mcmp>
 8003d44:	2800      	cmp	r0, #0
 8003d46:	db24      	blt.n	8003d92 <quorem+0xea>
 8003d48:	3601      	adds	r6, #1
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	f04f 0c00 	mov.w	ip, #0
 8003d50:	f858 2b04 	ldr.w	r2, [r8], #4
 8003d54:	f8d0 e000 	ldr.w	lr, [r0]
 8003d58:	b293      	uxth	r3, r2
 8003d5a:	ebac 0303 	sub.w	r3, ip, r3
 8003d5e:	0c12      	lsrs	r2, r2, #16
 8003d60:	fa13 f38e 	uxtah	r3, r3, lr
 8003d64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003d68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d72:	45c1      	cmp	r9, r8
 8003d74:	f840 3b04 	str.w	r3, [r0], #4
 8003d78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003d7c:	d2e8      	bcs.n	8003d50 <quorem+0xa8>
 8003d7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003d82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003d86:	b922      	cbnz	r2, 8003d92 <quorem+0xea>
 8003d88:	3b04      	subs	r3, #4
 8003d8a:	429d      	cmp	r5, r3
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	d30a      	bcc.n	8003da6 <quorem+0xfe>
 8003d90:	613c      	str	r4, [r7, #16]
 8003d92:	4630      	mov	r0, r6
 8003d94:	b003      	add	sp, #12
 8003d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d9a:	6812      	ldr	r2, [r2, #0]
 8003d9c:	3b04      	subs	r3, #4
 8003d9e:	2a00      	cmp	r2, #0
 8003da0:	d1cc      	bne.n	8003d3c <quorem+0x94>
 8003da2:	3c01      	subs	r4, #1
 8003da4:	e7c7      	b.n	8003d36 <quorem+0x8e>
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	3b04      	subs	r3, #4
 8003daa:	2a00      	cmp	r2, #0
 8003dac:	d1f0      	bne.n	8003d90 <quorem+0xe8>
 8003dae:	3c01      	subs	r4, #1
 8003db0:	e7eb      	b.n	8003d8a <quorem+0xe2>
 8003db2:	2000      	movs	r0, #0
 8003db4:	e7ee      	b.n	8003d94 <quorem+0xec>
	...

08003db8 <_dtoa_r>:
 8003db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dbc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003dbe:	b099      	sub	sp, #100	; 0x64
 8003dc0:	4616      	mov	r6, r2
 8003dc2:	461f      	mov	r7, r3
 8003dc4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003dc8:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003dcc:	4605      	mov	r5, r0
 8003dce:	b974      	cbnz	r4, 8003dee <_dtoa_r+0x36>
 8003dd0:	2010      	movs	r0, #16
 8003dd2:	f001 f94f 	bl	8005074 <malloc>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	6268      	str	r0, [r5, #36]	; 0x24
 8003dda:	b920      	cbnz	r0, 8003de6 <_dtoa_r+0x2e>
 8003ddc:	4ba8      	ldr	r3, [pc, #672]	; (8004080 <_dtoa_r+0x2c8>)
 8003dde:	21ea      	movs	r1, #234	; 0xea
 8003de0:	48a8      	ldr	r0, [pc, #672]	; (8004084 <_dtoa_r+0x2cc>)
 8003de2:	f002 f8a9 	bl	8005f38 <__assert_func>
 8003de6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003dea:	6004      	str	r4, [r0, #0]
 8003dec:	60c4      	str	r4, [r0, #12]
 8003dee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003df0:	6819      	ldr	r1, [r3, #0]
 8003df2:	b151      	cbz	r1, 8003e0a <_dtoa_r+0x52>
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	604a      	str	r2, [r1, #4]
 8003df8:	2301      	movs	r3, #1
 8003dfa:	4093      	lsls	r3, r2
 8003dfc:	608b      	str	r3, [r1, #8]
 8003dfe:	4628      	mov	r0, r5
 8003e00:	f001 f9a0 	bl	8005144 <_Bfree>
 8003e04:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	1e3b      	subs	r3, r7, #0
 8003e0c:	bfb9      	ittee	lt
 8003e0e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003e12:	9305      	strlt	r3, [sp, #20]
 8003e14:	2300      	movge	r3, #0
 8003e16:	f8c8 3000 	strge.w	r3, [r8]
 8003e1a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003e1e:	4b9a      	ldr	r3, [pc, #616]	; (8004088 <_dtoa_r+0x2d0>)
 8003e20:	bfbc      	itt	lt
 8003e22:	2201      	movlt	r2, #1
 8003e24:	f8c8 2000 	strlt.w	r2, [r8]
 8003e28:	ea33 0309 	bics.w	r3, r3, r9
 8003e2c:	d119      	bne.n	8003e62 <_dtoa_r+0xaa>
 8003e2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003e30:	f242 730f 	movw	r3, #9999	; 0x270f
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003e3a:	4333      	orrs	r3, r6
 8003e3c:	f000 8580 	beq.w	8004940 <_dtoa_r+0xb88>
 8003e40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003e42:	b953      	cbnz	r3, 8003e5a <_dtoa_r+0xa2>
 8003e44:	4b91      	ldr	r3, [pc, #580]	; (800408c <_dtoa_r+0x2d4>)
 8003e46:	e022      	b.n	8003e8e <_dtoa_r+0xd6>
 8003e48:	4b91      	ldr	r3, [pc, #580]	; (8004090 <_dtoa_r+0x2d8>)
 8003e4a:	9303      	str	r3, [sp, #12]
 8003e4c:	3308      	adds	r3, #8
 8003e4e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	9803      	ldr	r0, [sp, #12]
 8003e54:	b019      	add	sp, #100	; 0x64
 8003e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e5a:	4b8c      	ldr	r3, [pc, #560]	; (800408c <_dtoa_r+0x2d4>)
 8003e5c:	9303      	str	r3, [sp, #12]
 8003e5e:	3303      	adds	r3, #3
 8003e60:	e7f5      	b.n	8003e4e <_dtoa_r+0x96>
 8003e62:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003e66:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003e6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003e6e:	2200      	movs	r2, #0
 8003e70:	2300      	movs	r3, #0
 8003e72:	f7fc fe31 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e76:	4680      	mov	r8, r0
 8003e78:	b158      	cbz	r0, 8003e92 <_dtoa_r+0xda>
 8003e7a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 8559 	beq.w	800493a <_dtoa_r+0xb82>
 8003e88:	4882      	ldr	r0, [pc, #520]	; (8004094 <_dtoa_r+0x2dc>)
 8003e8a:	6018      	str	r0, [r3, #0]
 8003e8c:	1e43      	subs	r3, r0, #1
 8003e8e:	9303      	str	r3, [sp, #12]
 8003e90:	e7df      	b.n	8003e52 <_dtoa_r+0x9a>
 8003e92:	ab16      	add	r3, sp, #88	; 0x58
 8003e94:	9301      	str	r3, [sp, #4]
 8003e96:	ab17      	add	r3, sp, #92	; 0x5c
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	4628      	mov	r0, r5
 8003e9c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003ea0:	f001 fcf6 	bl	8005890 <__d2b>
 8003ea4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003ea8:	4683      	mov	fp, r0
 8003eaa:	2c00      	cmp	r4, #0
 8003eac:	d07e      	beq.n	8003fac <_dtoa_r+0x1f4>
 8003eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003eb0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003eb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003eb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003ebc:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003ec0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003ec4:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003ec8:	4b73      	ldr	r3, [pc, #460]	; (8004098 <_dtoa_r+0x2e0>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f7fc f9e4 	bl	8000298 <__aeabi_dsub>
 8003ed0:	a365      	add	r3, pc, #404	; (adr r3, 8004068 <_dtoa_r+0x2b0>)
 8003ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed6:	f7fc fb97 	bl	8000608 <__aeabi_dmul>
 8003eda:	a365      	add	r3, pc, #404	; (adr r3, 8004070 <_dtoa_r+0x2b8>)
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	f7fc f9dc 	bl	800029c <__adddf3>
 8003ee4:	4606      	mov	r6, r0
 8003ee6:	4620      	mov	r0, r4
 8003ee8:	460f      	mov	r7, r1
 8003eea:	f7fc fb23 	bl	8000534 <__aeabi_i2d>
 8003eee:	a362      	add	r3, pc, #392	; (adr r3, 8004078 <_dtoa_r+0x2c0>)
 8003ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef4:	f7fc fb88 	bl	8000608 <__aeabi_dmul>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4630      	mov	r0, r6
 8003efe:	4639      	mov	r1, r7
 8003f00:	f7fc f9cc 	bl	800029c <__adddf3>
 8003f04:	4606      	mov	r6, r0
 8003f06:	460f      	mov	r7, r1
 8003f08:	f7fc fe2e 	bl	8000b68 <__aeabi_d2iz>
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	4682      	mov	sl, r0
 8003f10:	2300      	movs	r3, #0
 8003f12:	4630      	mov	r0, r6
 8003f14:	4639      	mov	r1, r7
 8003f16:	f7fc fde9 	bl	8000aec <__aeabi_dcmplt>
 8003f1a:	b148      	cbz	r0, 8003f30 <_dtoa_r+0x178>
 8003f1c:	4650      	mov	r0, sl
 8003f1e:	f7fc fb09 	bl	8000534 <__aeabi_i2d>
 8003f22:	4632      	mov	r2, r6
 8003f24:	463b      	mov	r3, r7
 8003f26:	f7fc fdd7 	bl	8000ad8 <__aeabi_dcmpeq>
 8003f2a:	b908      	cbnz	r0, 8003f30 <_dtoa_r+0x178>
 8003f2c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003f30:	f1ba 0f16 	cmp.w	sl, #22
 8003f34:	d857      	bhi.n	8003fe6 <_dtoa_r+0x22e>
 8003f36:	4b59      	ldr	r3, [pc, #356]	; (800409c <_dtoa_r+0x2e4>)
 8003f38:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003f44:	f7fc fdd2 	bl	8000aec <__aeabi_dcmplt>
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	d04e      	beq.n	8003fea <_dtoa_r+0x232>
 8003f4c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003f50:	2300      	movs	r3, #0
 8003f52:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f54:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003f56:	1b1c      	subs	r4, r3, r4
 8003f58:	1e63      	subs	r3, r4, #1
 8003f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f5c:	bf45      	ittet	mi
 8003f5e:	f1c4 0301 	rsbmi	r3, r4, #1
 8003f62:	9306      	strmi	r3, [sp, #24]
 8003f64:	2300      	movpl	r3, #0
 8003f66:	2300      	movmi	r3, #0
 8003f68:	bf4c      	ite	mi
 8003f6a:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003f6c:	9306      	strpl	r3, [sp, #24]
 8003f6e:	f1ba 0f00 	cmp.w	sl, #0
 8003f72:	db3c      	blt.n	8003fee <_dtoa_r+0x236>
 8003f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f76:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003f7a:	4453      	add	r3, sl
 8003f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f7e:	2300      	movs	r3, #0
 8003f80:	930a      	str	r3, [sp, #40]	; 0x28
 8003f82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f84:	2b09      	cmp	r3, #9
 8003f86:	f200 808d 	bhi.w	80040a4 <_dtoa_r+0x2ec>
 8003f8a:	2b05      	cmp	r3, #5
 8003f8c:	bfc4      	itt	gt
 8003f8e:	3b04      	subgt	r3, #4
 8003f90:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003f92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f94:	f1a3 0302 	sub.w	r3, r3, #2
 8003f98:	bfcc      	ite	gt
 8003f9a:	2400      	movgt	r4, #0
 8003f9c:	2401      	movle	r4, #1
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	f200 808c 	bhi.w	80040bc <_dtoa_r+0x304>
 8003fa4:	e8df f003 	tbb	[pc, r3]
 8003fa8:	5b4d4f2d 	.word	0x5b4d4f2d
 8003fac:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003fb0:	441c      	add	r4, r3
 8003fb2:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	bfc3      	ittte	gt
 8003fba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003fbe:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003fc2:	fa09 f303 	lslgt.w	r3, r9, r3
 8003fc6:	f1c3 0320 	rsble	r3, r3, #32
 8003fca:	bfc6      	itte	gt
 8003fcc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003fd0:	4318      	orrgt	r0, r3
 8003fd2:	fa06 f003 	lslle.w	r0, r6, r3
 8003fd6:	f7fc fa9d 	bl	8000514 <__aeabi_ui2d>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003fe0:	3c01      	subs	r4, #1
 8003fe2:	9313      	str	r3, [sp, #76]	; 0x4c
 8003fe4:	e770      	b.n	8003ec8 <_dtoa_r+0x110>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e7b3      	b.n	8003f52 <_dtoa_r+0x19a>
 8003fea:	900f      	str	r0, [sp, #60]	; 0x3c
 8003fec:	e7b2      	b.n	8003f54 <_dtoa_r+0x19c>
 8003fee:	9b06      	ldr	r3, [sp, #24]
 8003ff0:	eba3 030a 	sub.w	r3, r3, sl
 8003ff4:	9306      	str	r3, [sp, #24]
 8003ff6:	f1ca 0300 	rsb	r3, sl, #0
 8003ffa:	930a      	str	r3, [sp, #40]	; 0x28
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	930e      	str	r3, [sp, #56]	; 0x38
 8004000:	e7bf      	b.n	8003f82 <_dtoa_r+0x1ca>
 8004002:	2300      	movs	r3, #0
 8004004:	930b      	str	r3, [sp, #44]	; 0x2c
 8004006:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004008:	2b00      	cmp	r3, #0
 800400a:	dc5a      	bgt.n	80040c2 <_dtoa_r+0x30a>
 800400c:	f04f 0901 	mov.w	r9, #1
 8004010:	f8cd 9020 	str.w	r9, [sp, #32]
 8004014:	464b      	mov	r3, r9
 8004016:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800401a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800401c:	2200      	movs	r2, #0
 800401e:	6042      	str	r2, [r0, #4]
 8004020:	2204      	movs	r2, #4
 8004022:	f102 0614 	add.w	r6, r2, #20
 8004026:	429e      	cmp	r6, r3
 8004028:	6841      	ldr	r1, [r0, #4]
 800402a:	d950      	bls.n	80040ce <_dtoa_r+0x316>
 800402c:	4628      	mov	r0, r5
 800402e:	f001 f849 	bl	80050c4 <_Balloc>
 8004032:	9003      	str	r0, [sp, #12]
 8004034:	2800      	cmp	r0, #0
 8004036:	d14e      	bne.n	80040d6 <_dtoa_r+0x31e>
 8004038:	4b19      	ldr	r3, [pc, #100]	; (80040a0 <_dtoa_r+0x2e8>)
 800403a:	4602      	mov	r2, r0
 800403c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004040:	e6ce      	b.n	8003de0 <_dtoa_r+0x28>
 8004042:	2301      	movs	r3, #1
 8004044:	e7de      	b.n	8004004 <_dtoa_r+0x24c>
 8004046:	2300      	movs	r3, #0
 8004048:	930b      	str	r3, [sp, #44]	; 0x2c
 800404a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800404c:	eb0a 0903 	add.w	r9, sl, r3
 8004050:	f109 0301 	add.w	r3, r9, #1
 8004054:	2b01      	cmp	r3, #1
 8004056:	9308      	str	r3, [sp, #32]
 8004058:	bfb8      	it	lt
 800405a:	2301      	movlt	r3, #1
 800405c:	e7dd      	b.n	800401a <_dtoa_r+0x262>
 800405e:	2301      	movs	r3, #1
 8004060:	e7f2      	b.n	8004048 <_dtoa_r+0x290>
 8004062:	bf00      	nop
 8004064:	f3af 8000 	nop.w
 8004068:	636f4361 	.word	0x636f4361
 800406c:	3fd287a7 	.word	0x3fd287a7
 8004070:	8b60c8b3 	.word	0x8b60c8b3
 8004074:	3fc68a28 	.word	0x3fc68a28
 8004078:	509f79fb 	.word	0x509f79fb
 800407c:	3fd34413 	.word	0x3fd34413
 8004080:	08006dbe 	.word	0x08006dbe
 8004084:	08006dd5 	.word	0x08006dd5
 8004088:	7ff00000 	.word	0x7ff00000
 800408c:	08006dba 	.word	0x08006dba
 8004090:	08006db1 	.word	0x08006db1
 8004094:	08006c35 	.word	0x08006c35
 8004098:	3ff80000 	.word	0x3ff80000
 800409c:	08006f40 	.word	0x08006f40
 80040a0:	08006e30 	.word	0x08006e30
 80040a4:	2401      	movs	r4, #1
 80040a6:	2300      	movs	r3, #0
 80040a8:	9322      	str	r3, [sp, #136]	; 0x88
 80040aa:	940b      	str	r4, [sp, #44]	; 0x2c
 80040ac:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80040b0:	2200      	movs	r2, #0
 80040b2:	f8cd 9020 	str.w	r9, [sp, #32]
 80040b6:	2312      	movs	r3, #18
 80040b8:	9223      	str	r2, [sp, #140]	; 0x8c
 80040ba:	e7ae      	b.n	800401a <_dtoa_r+0x262>
 80040bc:	2301      	movs	r3, #1
 80040be:	930b      	str	r3, [sp, #44]	; 0x2c
 80040c0:	e7f4      	b.n	80040ac <_dtoa_r+0x2f4>
 80040c2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80040c6:	f8cd 9020 	str.w	r9, [sp, #32]
 80040ca:	464b      	mov	r3, r9
 80040cc:	e7a5      	b.n	800401a <_dtoa_r+0x262>
 80040ce:	3101      	adds	r1, #1
 80040d0:	6041      	str	r1, [r0, #4]
 80040d2:	0052      	lsls	r2, r2, #1
 80040d4:	e7a5      	b.n	8004022 <_dtoa_r+0x26a>
 80040d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80040d8:	9a03      	ldr	r2, [sp, #12]
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	9b08      	ldr	r3, [sp, #32]
 80040de:	2b0e      	cmp	r3, #14
 80040e0:	f200 80a8 	bhi.w	8004234 <_dtoa_r+0x47c>
 80040e4:	2c00      	cmp	r4, #0
 80040e6:	f000 80a5 	beq.w	8004234 <_dtoa_r+0x47c>
 80040ea:	f1ba 0f00 	cmp.w	sl, #0
 80040ee:	dd34      	ble.n	800415a <_dtoa_r+0x3a2>
 80040f0:	4a9a      	ldr	r2, [pc, #616]	; (800435c <_dtoa_r+0x5a4>)
 80040f2:	f00a 030f 	and.w	r3, sl, #15
 80040f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80040fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80040fe:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004102:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004106:	ea4f 142a 	mov.w	r4, sl, asr #4
 800410a:	d016      	beq.n	800413a <_dtoa_r+0x382>
 800410c:	4b94      	ldr	r3, [pc, #592]	; (8004360 <_dtoa_r+0x5a8>)
 800410e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004112:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004116:	f7fc fba1 	bl	800085c <__aeabi_ddiv>
 800411a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800411e:	f004 040f 	and.w	r4, r4, #15
 8004122:	2703      	movs	r7, #3
 8004124:	4e8e      	ldr	r6, [pc, #568]	; (8004360 <_dtoa_r+0x5a8>)
 8004126:	b954      	cbnz	r4, 800413e <_dtoa_r+0x386>
 8004128:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800412c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004130:	f7fc fb94 	bl	800085c <__aeabi_ddiv>
 8004134:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004138:	e029      	b.n	800418e <_dtoa_r+0x3d6>
 800413a:	2702      	movs	r7, #2
 800413c:	e7f2      	b.n	8004124 <_dtoa_r+0x36c>
 800413e:	07e1      	lsls	r1, r4, #31
 8004140:	d508      	bpl.n	8004154 <_dtoa_r+0x39c>
 8004142:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004146:	e9d6 2300 	ldrd	r2, r3, [r6]
 800414a:	f7fc fa5d 	bl	8000608 <__aeabi_dmul>
 800414e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004152:	3701      	adds	r7, #1
 8004154:	1064      	asrs	r4, r4, #1
 8004156:	3608      	adds	r6, #8
 8004158:	e7e5      	b.n	8004126 <_dtoa_r+0x36e>
 800415a:	f000 80a5 	beq.w	80042a8 <_dtoa_r+0x4f0>
 800415e:	f1ca 0400 	rsb	r4, sl, #0
 8004162:	4b7e      	ldr	r3, [pc, #504]	; (800435c <_dtoa_r+0x5a4>)
 8004164:	4e7e      	ldr	r6, [pc, #504]	; (8004360 <_dtoa_r+0x5a8>)
 8004166:	f004 020f 	and.w	r2, r4, #15
 800416a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004176:	f7fc fa47 	bl	8000608 <__aeabi_dmul>
 800417a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800417e:	1124      	asrs	r4, r4, #4
 8004180:	2300      	movs	r3, #0
 8004182:	2702      	movs	r7, #2
 8004184:	2c00      	cmp	r4, #0
 8004186:	f040 8084 	bne.w	8004292 <_dtoa_r+0x4da>
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1d2      	bne.n	8004134 <_dtoa_r+0x37c>
 800418e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 808b 	beq.w	80042ac <_dtoa_r+0x4f4>
 8004196:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800419a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800419e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80041a2:	4b70      	ldr	r3, [pc, #448]	; (8004364 <_dtoa_r+0x5ac>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	f7fc fca1 	bl	8000aec <__aeabi_dcmplt>
 80041aa:	2800      	cmp	r0, #0
 80041ac:	d07e      	beq.n	80042ac <_dtoa_r+0x4f4>
 80041ae:	9b08      	ldr	r3, [sp, #32]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d07b      	beq.n	80042ac <_dtoa_r+0x4f4>
 80041b4:	f1b9 0f00 	cmp.w	r9, #0
 80041b8:	dd38      	ble.n	800422c <_dtoa_r+0x474>
 80041ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80041be:	4b6a      	ldr	r3, [pc, #424]	; (8004368 <_dtoa_r+0x5b0>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	f7fc fa21 	bl	8000608 <__aeabi_dmul>
 80041c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80041ca:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 80041ce:	3701      	adds	r7, #1
 80041d0:	464c      	mov	r4, r9
 80041d2:	4638      	mov	r0, r7
 80041d4:	f7fc f9ae 	bl	8000534 <__aeabi_i2d>
 80041d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041dc:	f7fc fa14 	bl	8000608 <__aeabi_dmul>
 80041e0:	4b62      	ldr	r3, [pc, #392]	; (800436c <_dtoa_r+0x5b4>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	f7fc f85a 	bl	800029c <__adddf3>
 80041e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80041ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80041f0:	9611      	str	r6, [sp, #68]	; 0x44
 80041f2:	2c00      	cmp	r4, #0
 80041f4:	d15d      	bne.n	80042b2 <_dtoa_r+0x4fa>
 80041f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041fa:	4b5d      	ldr	r3, [pc, #372]	; (8004370 <_dtoa_r+0x5b8>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	f7fc f84b 	bl	8000298 <__aeabi_dsub>
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800420a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800420c:	4633      	mov	r3, r6
 800420e:	f7fc fc8b 	bl	8000b28 <__aeabi_dcmpgt>
 8004212:	2800      	cmp	r0, #0
 8004214:	f040 829c 	bne.w	8004750 <_dtoa_r+0x998>
 8004218:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800421c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800421e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004222:	f7fc fc63 	bl	8000aec <__aeabi_dcmplt>
 8004226:	2800      	cmp	r0, #0
 8004228:	f040 8290 	bne.w	800474c <_dtoa_r+0x994>
 800422c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004230:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004234:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004236:	2b00      	cmp	r3, #0
 8004238:	f2c0 8152 	blt.w	80044e0 <_dtoa_r+0x728>
 800423c:	f1ba 0f0e 	cmp.w	sl, #14
 8004240:	f300 814e 	bgt.w	80044e0 <_dtoa_r+0x728>
 8004244:	4b45      	ldr	r3, [pc, #276]	; (800435c <_dtoa_r+0x5a4>)
 8004246:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800424a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800424e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004252:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004254:	2b00      	cmp	r3, #0
 8004256:	f280 80db 	bge.w	8004410 <_dtoa_r+0x658>
 800425a:	9b08      	ldr	r3, [sp, #32]
 800425c:	2b00      	cmp	r3, #0
 800425e:	f300 80d7 	bgt.w	8004410 <_dtoa_r+0x658>
 8004262:	f040 8272 	bne.w	800474a <_dtoa_r+0x992>
 8004266:	4b42      	ldr	r3, [pc, #264]	; (8004370 <_dtoa_r+0x5b8>)
 8004268:	2200      	movs	r2, #0
 800426a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800426e:	f7fc f9cb 	bl	8000608 <__aeabi_dmul>
 8004272:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004276:	f7fc fc4d 	bl	8000b14 <__aeabi_dcmpge>
 800427a:	9c08      	ldr	r4, [sp, #32]
 800427c:	4626      	mov	r6, r4
 800427e:	2800      	cmp	r0, #0
 8004280:	f040 8248 	bne.w	8004714 <_dtoa_r+0x95c>
 8004284:	9f03      	ldr	r7, [sp, #12]
 8004286:	2331      	movs	r3, #49	; 0x31
 8004288:	f807 3b01 	strb.w	r3, [r7], #1
 800428c:	f10a 0a01 	add.w	sl, sl, #1
 8004290:	e244      	b.n	800471c <_dtoa_r+0x964>
 8004292:	07e2      	lsls	r2, r4, #31
 8004294:	d505      	bpl.n	80042a2 <_dtoa_r+0x4ea>
 8004296:	e9d6 2300 	ldrd	r2, r3, [r6]
 800429a:	f7fc f9b5 	bl	8000608 <__aeabi_dmul>
 800429e:	3701      	adds	r7, #1
 80042a0:	2301      	movs	r3, #1
 80042a2:	1064      	asrs	r4, r4, #1
 80042a4:	3608      	adds	r6, #8
 80042a6:	e76d      	b.n	8004184 <_dtoa_r+0x3cc>
 80042a8:	2702      	movs	r7, #2
 80042aa:	e770      	b.n	800418e <_dtoa_r+0x3d6>
 80042ac:	9c08      	ldr	r4, [sp, #32]
 80042ae:	46d0      	mov	r8, sl
 80042b0:	e78f      	b.n	80041d2 <_dtoa_r+0x41a>
 80042b2:	9903      	ldr	r1, [sp, #12]
 80042b4:	4b29      	ldr	r3, [pc, #164]	; (800435c <_dtoa_r+0x5a4>)
 80042b6:	4421      	add	r1, r4
 80042b8:	9112      	str	r1, [sp, #72]	; 0x48
 80042ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80042c0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80042c4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80042c8:	2900      	cmp	r1, #0
 80042ca:	d055      	beq.n	8004378 <_dtoa_r+0x5c0>
 80042cc:	4929      	ldr	r1, [pc, #164]	; (8004374 <_dtoa_r+0x5bc>)
 80042ce:	2000      	movs	r0, #0
 80042d0:	f7fc fac4 	bl	800085c <__aeabi_ddiv>
 80042d4:	463b      	mov	r3, r7
 80042d6:	4632      	mov	r2, r6
 80042d8:	f7fb ffde 	bl	8000298 <__aeabi_dsub>
 80042dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80042e0:	9f03      	ldr	r7, [sp, #12]
 80042e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042e6:	f7fc fc3f 	bl	8000b68 <__aeabi_d2iz>
 80042ea:	4604      	mov	r4, r0
 80042ec:	f7fc f922 	bl	8000534 <__aeabi_i2d>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042f8:	f7fb ffce 	bl	8000298 <__aeabi_dsub>
 80042fc:	3430      	adds	r4, #48	; 0x30
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004306:	f807 4b01 	strb.w	r4, [r7], #1
 800430a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800430e:	f7fc fbed 	bl	8000aec <__aeabi_dcmplt>
 8004312:	2800      	cmp	r0, #0
 8004314:	d174      	bne.n	8004400 <_dtoa_r+0x648>
 8004316:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800431a:	4912      	ldr	r1, [pc, #72]	; (8004364 <_dtoa_r+0x5ac>)
 800431c:	2000      	movs	r0, #0
 800431e:	f7fb ffbb 	bl	8000298 <__aeabi_dsub>
 8004322:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004326:	f7fc fbe1 	bl	8000aec <__aeabi_dcmplt>
 800432a:	2800      	cmp	r0, #0
 800432c:	f040 80b7 	bne.w	800449e <_dtoa_r+0x6e6>
 8004330:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004332:	429f      	cmp	r7, r3
 8004334:	f43f af7a 	beq.w	800422c <_dtoa_r+0x474>
 8004338:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800433c:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <_dtoa_r+0x5b0>)
 800433e:	2200      	movs	r2, #0
 8004340:	f7fc f962 	bl	8000608 <__aeabi_dmul>
 8004344:	4b08      	ldr	r3, [pc, #32]	; (8004368 <_dtoa_r+0x5b0>)
 8004346:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800434a:	2200      	movs	r2, #0
 800434c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004350:	f7fc f95a 	bl	8000608 <__aeabi_dmul>
 8004354:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004358:	e7c3      	b.n	80042e2 <_dtoa_r+0x52a>
 800435a:	bf00      	nop
 800435c:	08006f40 	.word	0x08006f40
 8004360:	08006f18 	.word	0x08006f18
 8004364:	3ff00000 	.word	0x3ff00000
 8004368:	40240000 	.word	0x40240000
 800436c:	401c0000 	.word	0x401c0000
 8004370:	40140000 	.word	0x40140000
 8004374:	3fe00000 	.word	0x3fe00000
 8004378:	4630      	mov	r0, r6
 800437a:	4639      	mov	r1, r7
 800437c:	f7fc f944 	bl	8000608 <__aeabi_dmul>
 8004380:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004384:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004386:	9c03      	ldr	r4, [sp, #12]
 8004388:	9314      	str	r3, [sp, #80]	; 0x50
 800438a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800438e:	f7fc fbeb 	bl	8000b68 <__aeabi_d2iz>
 8004392:	9015      	str	r0, [sp, #84]	; 0x54
 8004394:	f7fc f8ce 	bl	8000534 <__aeabi_i2d>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043a0:	f7fb ff7a 	bl	8000298 <__aeabi_dsub>
 80043a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80043a6:	3330      	adds	r3, #48	; 0x30
 80043a8:	f804 3b01 	strb.w	r3, [r4], #1
 80043ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80043ae:	429c      	cmp	r4, r3
 80043b0:	4606      	mov	r6, r0
 80043b2:	460f      	mov	r7, r1
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	d124      	bne.n	8004404 <_dtoa_r+0x64c>
 80043ba:	4ba4      	ldr	r3, [pc, #656]	; (800464c <_dtoa_r+0x894>)
 80043bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80043c0:	f7fb ff6c 	bl	800029c <__adddf3>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4630      	mov	r0, r6
 80043ca:	4639      	mov	r1, r7
 80043cc:	f7fc fbac 	bl	8000b28 <__aeabi_dcmpgt>
 80043d0:	2800      	cmp	r0, #0
 80043d2:	d163      	bne.n	800449c <_dtoa_r+0x6e4>
 80043d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80043d8:	499c      	ldr	r1, [pc, #624]	; (800464c <_dtoa_r+0x894>)
 80043da:	2000      	movs	r0, #0
 80043dc:	f7fb ff5c 	bl	8000298 <__aeabi_dsub>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4630      	mov	r0, r6
 80043e6:	4639      	mov	r1, r7
 80043e8:	f7fc fb80 	bl	8000aec <__aeabi_dcmplt>
 80043ec:	2800      	cmp	r0, #0
 80043ee:	f43f af1d 	beq.w	800422c <_dtoa_r+0x474>
 80043f2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80043f4:	1e7b      	subs	r3, r7, #1
 80043f6:	9314      	str	r3, [sp, #80]	; 0x50
 80043f8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80043fc:	2b30      	cmp	r3, #48	; 0x30
 80043fe:	d0f8      	beq.n	80043f2 <_dtoa_r+0x63a>
 8004400:	46c2      	mov	sl, r8
 8004402:	e03b      	b.n	800447c <_dtoa_r+0x6c4>
 8004404:	4b92      	ldr	r3, [pc, #584]	; (8004650 <_dtoa_r+0x898>)
 8004406:	f7fc f8ff 	bl	8000608 <__aeabi_dmul>
 800440a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800440e:	e7bc      	b.n	800438a <_dtoa_r+0x5d2>
 8004410:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004414:	9f03      	ldr	r7, [sp, #12]
 8004416:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800441a:	4640      	mov	r0, r8
 800441c:	4649      	mov	r1, r9
 800441e:	f7fc fa1d 	bl	800085c <__aeabi_ddiv>
 8004422:	f7fc fba1 	bl	8000b68 <__aeabi_d2iz>
 8004426:	4604      	mov	r4, r0
 8004428:	f7fc f884 	bl	8000534 <__aeabi_i2d>
 800442c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004430:	f7fc f8ea 	bl	8000608 <__aeabi_dmul>
 8004434:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4640      	mov	r0, r8
 800443e:	4649      	mov	r1, r9
 8004440:	f7fb ff2a 	bl	8000298 <__aeabi_dsub>
 8004444:	f807 6b01 	strb.w	r6, [r7], #1
 8004448:	9e03      	ldr	r6, [sp, #12]
 800444a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800444e:	1bbe      	subs	r6, r7, r6
 8004450:	45b4      	cmp	ip, r6
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	d136      	bne.n	80044c6 <_dtoa_r+0x70e>
 8004458:	f7fb ff20 	bl	800029c <__adddf3>
 800445c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004460:	4680      	mov	r8, r0
 8004462:	4689      	mov	r9, r1
 8004464:	f7fc fb60 	bl	8000b28 <__aeabi_dcmpgt>
 8004468:	bb58      	cbnz	r0, 80044c2 <_dtoa_r+0x70a>
 800446a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800446e:	4640      	mov	r0, r8
 8004470:	4649      	mov	r1, r9
 8004472:	f7fc fb31 	bl	8000ad8 <__aeabi_dcmpeq>
 8004476:	b108      	cbz	r0, 800447c <_dtoa_r+0x6c4>
 8004478:	07e1      	lsls	r1, r4, #31
 800447a:	d422      	bmi.n	80044c2 <_dtoa_r+0x70a>
 800447c:	4628      	mov	r0, r5
 800447e:	4659      	mov	r1, fp
 8004480:	f000 fe60 	bl	8005144 <_Bfree>
 8004484:	2300      	movs	r3, #0
 8004486:	703b      	strb	r3, [r7, #0]
 8004488:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800448a:	f10a 0001 	add.w	r0, sl, #1
 800448e:	6018      	str	r0, [r3, #0]
 8004490:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004492:	2b00      	cmp	r3, #0
 8004494:	f43f acdd 	beq.w	8003e52 <_dtoa_r+0x9a>
 8004498:	601f      	str	r7, [r3, #0]
 800449a:	e4da      	b.n	8003e52 <_dtoa_r+0x9a>
 800449c:	4627      	mov	r7, r4
 800449e:	463b      	mov	r3, r7
 80044a0:	461f      	mov	r7, r3
 80044a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80044a6:	2a39      	cmp	r2, #57	; 0x39
 80044a8:	d107      	bne.n	80044ba <_dtoa_r+0x702>
 80044aa:	9a03      	ldr	r2, [sp, #12]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d1f7      	bne.n	80044a0 <_dtoa_r+0x6e8>
 80044b0:	9903      	ldr	r1, [sp, #12]
 80044b2:	2230      	movs	r2, #48	; 0x30
 80044b4:	f108 0801 	add.w	r8, r8, #1
 80044b8:	700a      	strb	r2, [r1, #0]
 80044ba:	781a      	ldrb	r2, [r3, #0]
 80044bc:	3201      	adds	r2, #1
 80044be:	701a      	strb	r2, [r3, #0]
 80044c0:	e79e      	b.n	8004400 <_dtoa_r+0x648>
 80044c2:	46d0      	mov	r8, sl
 80044c4:	e7eb      	b.n	800449e <_dtoa_r+0x6e6>
 80044c6:	4b62      	ldr	r3, [pc, #392]	; (8004650 <_dtoa_r+0x898>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	f7fc f89d 	bl	8000608 <__aeabi_dmul>
 80044ce:	2200      	movs	r2, #0
 80044d0:	2300      	movs	r3, #0
 80044d2:	4680      	mov	r8, r0
 80044d4:	4689      	mov	r9, r1
 80044d6:	f7fc faff 	bl	8000ad8 <__aeabi_dcmpeq>
 80044da:	2800      	cmp	r0, #0
 80044dc:	d09b      	beq.n	8004416 <_dtoa_r+0x65e>
 80044de:	e7cd      	b.n	800447c <_dtoa_r+0x6c4>
 80044e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80044e2:	2a00      	cmp	r2, #0
 80044e4:	f000 80d0 	beq.w	8004688 <_dtoa_r+0x8d0>
 80044e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80044ea:	2a01      	cmp	r2, #1
 80044ec:	f300 80b2 	bgt.w	8004654 <_dtoa_r+0x89c>
 80044f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80044f2:	2a00      	cmp	r2, #0
 80044f4:	f000 80a6 	beq.w	8004644 <_dtoa_r+0x88c>
 80044f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80044fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80044fe:	9f06      	ldr	r7, [sp, #24]
 8004500:	9a06      	ldr	r2, [sp, #24]
 8004502:	441a      	add	r2, r3
 8004504:	9206      	str	r2, [sp, #24]
 8004506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004508:	2101      	movs	r1, #1
 800450a:	441a      	add	r2, r3
 800450c:	4628      	mov	r0, r5
 800450e:	9209      	str	r2, [sp, #36]	; 0x24
 8004510:	f000 ff18 	bl	8005344 <__i2b>
 8004514:	4606      	mov	r6, r0
 8004516:	2f00      	cmp	r7, #0
 8004518:	dd0c      	ble.n	8004534 <_dtoa_r+0x77c>
 800451a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800451c:	2b00      	cmp	r3, #0
 800451e:	dd09      	ble.n	8004534 <_dtoa_r+0x77c>
 8004520:	42bb      	cmp	r3, r7
 8004522:	9a06      	ldr	r2, [sp, #24]
 8004524:	bfa8      	it	ge
 8004526:	463b      	movge	r3, r7
 8004528:	1ad2      	subs	r2, r2, r3
 800452a:	9206      	str	r2, [sp, #24]
 800452c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800452e:	1aff      	subs	r7, r7, r3
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	9309      	str	r3, [sp, #36]	; 0x24
 8004534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004536:	b1f3      	cbz	r3, 8004576 <_dtoa_r+0x7be>
 8004538:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 80a8 	beq.w	8004690 <_dtoa_r+0x8d8>
 8004540:	2c00      	cmp	r4, #0
 8004542:	dd10      	ble.n	8004566 <_dtoa_r+0x7ae>
 8004544:	4631      	mov	r1, r6
 8004546:	4622      	mov	r2, r4
 8004548:	4628      	mov	r0, r5
 800454a:	f000 ffb9 	bl	80054c0 <__pow5mult>
 800454e:	465a      	mov	r2, fp
 8004550:	4601      	mov	r1, r0
 8004552:	4606      	mov	r6, r0
 8004554:	4628      	mov	r0, r5
 8004556:	f000 ff0b 	bl	8005370 <__multiply>
 800455a:	4659      	mov	r1, fp
 800455c:	4680      	mov	r8, r0
 800455e:	4628      	mov	r0, r5
 8004560:	f000 fdf0 	bl	8005144 <_Bfree>
 8004564:	46c3      	mov	fp, r8
 8004566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004568:	1b1a      	subs	r2, r3, r4
 800456a:	d004      	beq.n	8004576 <_dtoa_r+0x7be>
 800456c:	4659      	mov	r1, fp
 800456e:	4628      	mov	r0, r5
 8004570:	f000 ffa6 	bl	80054c0 <__pow5mult>
 8004574:	4683      	mov	fp, r0
 8004576:	2101      	movs	r1, #1
 8004578:	4628      	mov	r0, r5
 800457a:	f000 fee3 	bl	8005344 <__i2b>
 800457e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004580:	2b00      	cmp	r3, #0
 8004582:	4604      	mov	r4, r0
 8004584:	f340 8086 	ble.w	8004694 <_dtoa_r+0x8dc>
 8004588:	461a      	mov	r2, r3
 800458a:	4601      	mov	r1, r0
 800458c:	4628      	mov	r0, r5
 800458e:	f000 ff97 	bl	80054c0 <__pow5mult>
 8004592:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004594:	2b01      	cmp	r3, #1
 8004596:	4604      	mov	r4, r0
 8004598:	dd7f      	ble.n	800469a <_dtoa_r+0x8e2>
 800459a:	f04f 0800 	mov.w	r8, #0
 800459e:	6923      	ldr	r3, [r4, #16]
 80045a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80045a4:	6918      	ldr	r0, [r3, #16]
 80045a6:	f000 fe7f 	bl	80052a8 <__hi0bits>
 80045aa:	f1c0 0020 	rsb	r0, r0, #32
 80045ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045b0:	4418      	add	r0, r3
 80045b2:	f010 001f 	ands.w	r0, r0, #31
 80045b6:	f000 8092 	beq.w	80046de <_dtoa_r+0x926>
 80045ba:	f1c0 0320 	rsb	r3, r0, #32
 80045be:	2b04      	cmp	r3, #4
 80045c0:	f340 808a 	ble.w	80046d8 <_dtoa_r+0x920>
 80045c4:	f1c0 001c 	rsb	r0, r0, #28
 80045c8:	9b06      	ldr	r3, [sp, #24]
 80045ca:	4403      	add	r3, r0
 80045cc:	9306      	str	r3, [sp, #24]
 80045ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045d0:	4403      	add	r3, r0
 80045d2:	4407      	add	r7, r0
 80045d4:	9309      	str	r3, [sp, #36]	; 0x24
 80045d6:	9b06      	ldr	r3, [sp, #24]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	dd05      	ble.n	80045e8 <_dtoa_r+0x830>
 80045dc:	4659      	mov	r1, fp
 80045de:	461a      	mov	r2, r3
 80045e0:	4628      	mov	r0, r5
 80045e2:	f000 ffc7 	bl	8005574 <__lshift>
 80045e6:	4683      	mov	fp, r0
 80045e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	dd05      	ble.n	80045fa <_dtoa_r+0x842>
 80045ee:	4621      	mov	r1, r4
 80045f0:	461a      	mov	r2, r3
 80045f2:	4628      	mov	r0, r5
 80045f4:	f000 ffbe 	bl	8005574 <__lshift>
 80045f8:	4604      	mov	r4, r0
 80045fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d070      	beq.n	80046e2 <_dtoa_r+0x92a>
 8004600:	4621      	mov	r1, r4
 8004602:	4658      	mov	r0, fp
 8004604:	f001 f826 	bl	8005654 <__mcmp>
 8004608:	2800      	cmp	r0, #0
 800460a:	da6a      	bge.n	80046e2 <_dtoa_r+0x92a>
 800460c:	2300      	movs	r3, #0
 800460e:	4659      	mov	r1, fp
 8004610:	220a      	movs	r2, #10
 8004612:	4628      	mov	r0, r5
 8004614:	f000 fdb8 	bl	8005188 <__multadd>
 8004618:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800461a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800461e:	4683      	mov	fp, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 8194 	beq.w	800494e <_dtoa_r+0xb96>
 8004626:	4631      	mov	r1, r6
 8004628:	2300      	movs	r3, #0
 800462a:	220a      	movs	r2, #10
 800462c:	4628      	mov	r0, r5
 800462e:	f000 fdab 	bl	8005188 <__multadd>
 8004632:	f1b9 0f00 	cmp.w	r9, #0
 8004636:	4606      	mov	r6, r0
 8004638:	f300 8093 	bgt.w	8004762 <_dtoa_r+0x9aa>
 800463c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800463e:	2b02      	cmp	r3, #2
 8004640:	dc57      	bgt.n	80046f2 <_dtoa_r+0x93a>
 8004642:	e08e      	b.n	8004762 <_dtoa_r+0x9aa>
 8004644:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004646:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800464a:	e757      	b.n	80044fc <_dtoa_r+0x744>
 800464c:	3fe00000 	.word	0x3fe00000
 8004650:	40240000 	.word	0x40240000
 8004654:	9b08      	ldr	r3, [sp, #32]
 8004656:	1e5c      	subs	r4, r3, #1
 8004658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800465a:	42a3      	cmp	r3, r4
 800465c:	bfbf      	itttt	lt
 800465e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004660:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004662:	1ae2      	sublt	r2, r4, r3
 8004664:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004666:	bfb6      	itet	lt
 8004668:	189b      	addlt	r3, r3, r2
 800466a:	1b1c      	subge	r4, r3, r4
 800466c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800466e:	9b08      	ldr	r3, [sp, #32]
 8004670:	bfb8      	it	lt
 8004672:	2400      	movlt	r4, #0
 8004674:	2b00      	cmp	r3, #0
 8004676:	bfb9      	ittee	lt
 8004678:	9b06      	ldrlt	r3, [sp, #24]
 800467a:	9a08      	ldrlt	r2, [sp, #32]
 800467c:	9f06      	ldrge	r7, [sp, #24]
 800467e:	9b08      	ldrge	r3, [sp, #32]
 8004680:	bfbc      	itt	lt
 8004682:	1a9f      	sublt	r7, r3, r2
 8004684:	2300      	movlt	r3, #0
 8004686:	e73b      	b.n	8004500 <_dtoa_r+0x748>
 8004688:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800468a:	9f06      	ldr	r7, [sp, #24]
 800468c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800468e:	e742      	b.n	8004516 <_dtoa_r+0x75e>
 8004690:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004692:	e76b      	b.n	800456c <_dtoa_r+0x7b4>
 8004694:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004696:	2b01      	cmp	r3, #1
 8004698:	dc19      	bgt.n	80046ce <_dtoa_r+0x916>
 800469a:	9b04      	ldr	r3, [sp, #16]
 800469c:	b9bb      	cbnz	r3, 80046ce <_dtoa_r+0x916>
 800469e:	9b05      	ldr	r3, [sp, #20]
 80046a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046a4:	b99b      	cbnz	r3, 80046ce <_dtoa_r+0x916>
 80046a6:	9b05      	ldr	r3, [sp, #20]
 80046a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046ac:	0d1b      	lsrs	r3, r3, #20
 80046ae:	051b      	lsls	r3, r3, #20
 80046b0:	b183      	cbz	r3, 80046d4 <_dtoa_r+0x91c>
 80046b2:	9b06      	ldr	r3, [sp, #24]
 80046b4:	3301      	adds	r3, #1
 80046b6:	9306      	str	r3, [sp, #24]
 80046b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046ba:	3301      	adds	r3, #1
 80046bc:	9309      	str	r3, [sp, #36]	; 0x24
 80046be:	f04f 0801 	mov.w	r8, #1
 80046c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f47f af6a 	bne.w	800459e <_dtoa_r+0x7e6>
 80046ca:	2001      	movs	r0, #1
 80046cc:	e76f      	b.n	80045ae <_dtoa_r+0x7f6>
 80046ce:	f04f 0800 	mov.w	r8, #0
 80046d2:	e7f6      	b.n	80046c2 <_dtoa_r+0x90a>
 80046d4:	4698      	mov	r8, r3
 80046d6:	e7f4      	b.n	80046c2 <_dtoa_r+0x90a>
 80046d8:	f43f af7d 	beq.w	80045d6 <_dtoa_r+0x81e>
 80046dc:	4618      	mov	r0, r3
 80046de:	301c      	adds	r0, #28
 80046e0:	e772      	b.n	80045c8 <_dtoa_r+0x810>
 80046e2:	9b08      	ldr	r3, [sp, #32]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	dc36      	bgt.n	8004756 <_dtoa_r+0x99e>
 80046e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	dd33      	ble.n	8004756 <_dtoa_r+0x99e>
 80046ee:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046f2:	f1b9 0f00 	cmp.w	r9, #0
 80046f6:	d10d      	bne.n	8004714 <_dtoa_r+0x95c>
 80046f8:	4621      	mov	r1, r4
 80046fa:	464b      	mov	r3, r9
 80046fc:	2205      	movs	r2, #5
 80046fe:	4628      	mov	r0, r5
 8004700:	f000 fd42 	bl	8005188 <__multadd>
 8004704:	4601      	mov	r1, r0
 8004706:	4604      	mov	r4, r0
 8004708:	4658      	mov	r0, fp
 800470a:	f000 ffa3 	bl	8005654 <__mcmp>
 800470e:	2800      	cmp	r0, #0
 8004710:	f73f adb8 	bgt.w	8004284 <_dtoa_r+0x4cc>
 8004714:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004716:	9f03      	ldr	r7, [sp, #12]
 8004718:	ea6f 0a03 	mvn.w	sl, r3
 800471c:	f04f 0800 	mov.w	r8, #0
 8004720:	4621      	mov	r1, r4
 8004722:	4628      	mov	r0, r5
 8004724:	f000 fd0e 	bl	8005144 <_Bfree>
 8004728:	2e00      	cmp	r6, #0
 800472a:	f43f aea7 	beq.w	800447c <_dtoa_r+0x6c4>
 800472e:	f1b8 0f00 	cmp.w	r8, #0
 8004732:	d005      	beq.n	8004740 <_dtoa_r+0x988>
 8004734:	45b0      	cmp	r8, r6
 8004736:	d003      	beq.n	8004740 <_dtoa_r+0x988>
 8004738:	4641      	mov	r1, r8
 800473a:	4628      	mov	r0, r5
 800473c:	f000 fd02 	bl	8005144 <_Bfree>
 8004740:	4631      	mov	r1, r6
 8004742:	4628      	mov	r0, r5
 8004744:	f000 fcfe 	bl	8005144 <_Bfree>
 8004748:	e698      	b.n	800447c <_dtoa_r+0x6c4>
 800474a:	2400      	movs	r4, #0
 800474c:	4626      	mov	r6, r4
 800474e:	e7e1      	b.n	8004714 <_dtoa_r+0x95c>
 8004750:	46c2      	mov	sl, r8
 8004752:	4626      	mov	r6, r4
 8004754:	e596      	b.n	8004284 <_dtoa_r+0x4cc>
 8004756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004758:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 80fd 	beq.w	800495c <_dtoa_r+0xba4>
 8004762:	2f00      	cmp	r7, #0
 8004764:	dd05      	ble.n	8004772 <_dtoa_r+0x9ba>
 8004766:	4631      	mov	r1, r6
 8004768:	463a      	mov	r2, r7
 800476a:	4628      	mov	r0, r5
 800476c:	f000 ff02 	bl	8005574 <__lshift>
 8004770:	4606      	mov	r6, r0
 8004772:	f1b8 0f00 	cmp.w	r8, #0
 8004776:	d05c      	beq.n	8004832 <_dtoa_r+0xa7a>
 8004778:	6871      	ldr	r1, [r6, #4]
 800477a:	4628      	mov	r0, r5
 800477c:	f000 fca2 	bl	80050c4 <_Balloc>
 8004780:	4607      	mov	r7, r0
 8004782:	b928      	cbnz	r0, 8004790 <_dtoa_r+0x9d8>
 8004784:	4b80      	ldr	r3, [pc, #512]	; (8004988 <_dtoa_r+0xbd0>)
 8004786:	4602      	mov	r2, r0
 8004788:	f240 21ea 	movw	r1, #746	; 0x2ea
 800478c:	f7ff bb28 	b.w	8003de0 <_dtoa_r+0x28>
 8004790:	6932      	ldr	r2, [r6, #16]
 8004792:	3202      	adds	r2, #2
 8004794:	0092      	lsls	r2, r2, #2
 8004796:	f106 010c 	add.w	r1, r6, #12
 800479a:	300c      	adds	r0, #12
 800479c:	f000 fc84 	bl	80050a8 <memcpy>
 80047a0:	2201      	movs	r2, #1
 80047a2:	4639      	mov	r1, r7
 80047a4:	4628      	mov	r0, r5
 80047a6:	f000 fee5 	bl	8005574 <__lshift>
 80047aa:	9b03      	ldr	r3, [sp, #12]
 80047ac:	3301      	adds	r3, #1
 80047ae:	9308      	str	r3, [sp, #32]
 80047b0:	9b03      	ldr	r3, [sp, #12]
 80047b2:	444b      	add	r3, r9
 80047b4:	930a      	str	r3, [sp, #40]	; 0x28
 80047b6:	9b04      	ldr	r3, [sp, #16]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	46b0      	mov	r8, r6
 80047be:	9309      	str	r3, [sp, #36]	; 0x24
 80047c0:	4606      	mov	r6, r0
 80047c2:	9b08      	ldr	r3, [sp, #32]
 80047c4:	4621      	mov	r1, r4
 80047c6:	3b01      	subs	r3, #1
 80047c8:	4658      	mov	r0, fp
 80047ca:	9304      	str	r3, [sp, #16]
 80047cc:	f7ff fa6c 	bl	8003ca8 <quorem>
 80047d0:	4603      	mov	r3, r0
 80047d2:	3330      	adds	r3, #48	; 0x30
 80047d4:	9006      	str	r0, [sp, #24]
 80047d6:	4641      	mov	r1, r8
 80047d8:	4658      	mov	r0, fp
 80047da:	930b      	str	r3, [sp, #44]	; 0x2c
 80047dc:	f000 ff3a 	bl	8005654 <__mcmp>
 80047e0:	4632      	mov	r2, r6
 80047e2:	4681      	mov	r9, r0
 80047e4:	4621      	mov	r1, r4
 80047e6:	4628      	mov	r0, r5
 80047e8:	f000 ff50 	bl	800568c <__mdiff>
 80047ec:	68c2      	ldr	r2, [r0, #12]
 80047ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047f0:	4607      	mov	r7, r0
 80047f2:	bb02      	cbnz	r2, 8004836 <_dtoa_r+0xa7e>
 80047f4:	4601      	mov	r1, r0
 80047f6:	4658      	mov	r0, fp
 80047f8:	f000 ff2c 	bl	8005654 <__mcmp>
 80047fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047fe:	4602      	mov	r2, r0
 8004800:	4639      	mov	r1, r7
 8004802:	4628      	mov	r0, r5
 8004804:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004808:	f000 fc9c 	bl	8005144 <_Bfree>
 800480c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800480e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004810:	9f08      	ldr	r7, [sp, #32]
 8004812:	ea43 0102 	orr.w	r1, r3, r2
 8004816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004818:	430b      	orrs	r3, r1
 800481a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800481c:	d10d      	bne.n	800483a <_dtoa_r+0xa82>
 800481e:	2b39      	cmp	r3, #57	; 0x39
 8004820:	d029      	beq.n	8004876 <_dtoa_r+0xabe>
 8004822:	f1b9 0f00 	cmp.w	r9, #0
 8004826:	dd01      	ble.n	800482c <_dtoa_r+0xa74>
 8004828:	9b06      	ldr	r3, [sp, #24]
 800482a:	3331      	adds	r3, #49	; 0x31
 800482c:	9a04      	ldr	r2, [sp, #16]
 800482e:	7013      	strb	r3, [r2, #0]
 8004830:	e776      	b.n	8004720 <_dtoa_r+0x968>
 8004832:	4630      	mov	r0, r6
 8004834:	e7b9      	b.n	80047aa <_dtoa_r+0x9f2>
 8004836:	2201      	movs	r2, #1
 8004838:	e7e2      	b.n	8004800 <_dtoa_r+0xa48>
 800483a:	f1b9 0f00 	cmp.w	r9, #0
 800483e:	db06      	blt.n	800484e <_dtoa_r+0xa96>
 8004840:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004842:	ea41 0909 	orr.w	r9, r1, r9
 8004846:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004848:	ea59 0101 	orrs.w	r1, r9, r1
 800484c:	d120      	bne.n	8004890 <_dtoa_r+0xad8>
 800484e:	2a00      	cmp	r2, #0
 8004850:	ddec      	ble.n	800482c <_dtoa_r+0xa74>
 8004852:	4659      	mov	r1, fp
 8004854:	2201      	movs	r2, #1
 8004856:	4628      	mov	r0, r5
 8004858:	9308      	str	r3, [sp, #32]
 800485a:	f000 fe8b 	bl	8005574 <__lshift>
 800485e:	4621      	mov	r1, r4
 8004860:	4683      	mov	fp, r0
 8004862:	f000 fef7 	bl	8005654 <__mcmp>
 8004866:	2800      	cmp	r0, #0
 8004868:	9b08      	ldr	r3, [sp, #32]
 800486a:	dc02      	bgt.n	8004872 <_dtoa_r+0xaba>
 800486c:	d1de      	bne.n	800482c <_dtoa_r+0xa74>
 800486e:	07da      	lsls	r2, r3, #31
 8004870:	d5dc      	bpl.n	800482c <_dtoa_r+0xa74>
 8004872:	2b39      	cmp	r3, #57	; 0x39
 8004874:	d1d8      	bne.n	8004828 <_dtoa_r+0xa70>
 8004876:	9a04      	ldr	r2, [sp, #16]
 8004878:	2339      	movs	r3, #57	; 0x39
 800487a:	7013      	strb	r3, [r2, #0]
 800487c:	463b      	mov	r3, r7
 800487e:	461f      	mov	r7, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004886:	2a39      	cmp	r2, #57	; 0x39
 8004888:	d050      	beq.n	800492c <_dtoa_r+0xb74>
 800488a:	3201      	adds	r2, #1
 800488c:	701a      	strb	r2, [r3, #0]
 800488e:	e747      	b.n	8004720 <_dtoa_r+0x968>
 8004890:	2a00      	cmp	r2, #0
 8004892:	dd03      	ble.n	800489c <_dtoa_r+0xae4>
 8004894:	2b39      	cmp	r3, #57	; 0x39
 8004896:	d0ee      	beq.n	8004876 <_dtoa_r+0xabe>
 8004898:	3301      	adds	r3, #1
 800489a:	e7c7      	b.n	800482c <_dtoa_r+0xa74>
 800489c:	9a08      	ldr	r2, [sp, #32]
 800489e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80048a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80048a4:	428a      	cmp	r2, r1
 80048a6:	d02a      	beq.n	80048fe <_dtoa_r+0xb46>
 80048a8:	4659      	mov	r1, fp
 80048aa:	2300      	movs	r3, #0
 80048ac:	220a      	movs	r2, #10
 80048ae:	4628      	mov	r0, r5
 80048b0:	f000 fc6a 	bl	8005188 <__multadd>
 80048b4:	45b0      	cmp	r8, r6
 80048b6:	4683      	mov	fp, r0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	f04f 020a 	mov.w	r2, #10
 80048c0:	4641      	mov	r1, r8
 80048c2:	4628      	mov	r0, r5
 80048c4:	d107      	bne.n	80048d6 <_dtoa_r+0xb1e>
 80048c6:	f000 fc5f 	bl	8005188 <__multadd>
 80048ca:	4680      	mov	r8, r0
 80048cc:	4606      	mov	r6, r0
 80048ce:	9b08      	ldr	r3, [sp, #32]
 80048d0:	3301      	adds	r3, #1
 80048d2:	9308      	str	r3, [sp, #32]
 80048d4:	e775      	b.n	80047c2 <_dtoa_r+0xa0a>
 80048d6:	f000 fc57 	bl	8005188 <__multadd>
 80048da:	4631      	mov	r1, r6
 80048dc:	4680      	mov	r8, r0
 80048de:	2300      	movs	r3, #0
 80048e0:	220a      	movs	r2, #10
 80048e2:	4628      	mov	r0, r5
 80048e4:	f000 fc50 	bl	8005188 <__multadd>
 80048e8:	4606      	mov	r6, r0
 80048ea:	e7f0      	b.n	80048ce <_dtoa_r+0xb16>
 80048ec:	f1b9 0f00 	cmp.w	r9, #0
 80048f0:	9a03      	ldr	r2, [sp, #12]
 80048f2:	bfcc      	ite	gt
 80048f4:	464f      	movgt	r7, r9
 80048f6:	2701      	movle	r7, #1
 80048f8:	4417      	add	r7, r2
 80048fa:	f04f 0800 	mov.w	r8, #0
 80048fe:	4659      	mov	r1, fp
 8004900:	2201      	movs	r2, #1
 8004902:	4628      	mov	r0, r5
 8004904:	9308      	str	r3, [sp, #32]
 8004906:	f000 fe35 	bl	8005574 <__lshift>
 800490a:	4621      	mov	r1, r4
 800490c:	4683      	mov	fp, r0
 800490e:	f000 fea1 	bl	8005654 <__mcmp>
 8004912:	2800      	cmp	r0, #0
 8004914:	dcb2      	bgt.n	800487c <_dtoa_r+0xac4>
 8004916:	d102      	bne.n	800491e <_dtoa_r+0xb66>
 8004918:	9b08      	ldr	r3, [sp, #32]
 800491a:	07db      	lsls	r3, r3, #31
 800491c:	d4ae      	bmi.n	800487c <_dtoa_r+0xac4>
 800491e:	463b      	mov	r3, r7
 8004920:	461f      	mov	r7, r3
 8004922:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004926:	2a30      	cmp	r2, #48	; 0x30
 8004928:	d0fa      	beq.n	8004920 <_dtoa_r+0xb68>
 800492a:	e6f9      	b.n	8004720 <_dtoa_r+0x968>
 800492c:	9a03      	ldr	r2, [sp, #12]
 800492e:	429a      	cmp	r2, r3
 8004930:	d1a5      	bne.n	800487e <_dtoa_r+0xac6>
 8004932:	f10a 0a01 	add.w	sl, sl, #1
 8004936:	2331      	movs	r3, #49	; 0x31
 8004938:	e779      	b.n	800482e <_dtoa_r+0xa76>
 800493a:	4b14      	ldr	r3, [pc, #80]	; (800498c <_dtoa_r+0xbd4>)
 800493c:	f7ff baa7 	b.w	8003e8e <_dtoa_r+0xd6>
 8004940:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004942:	2b00      	cmp	r3, #0
 8004944:	f47f aa80 	bne.w	8003e48 <_dtoa_r+0x90>
 8004948:	4b11      	ldr	r3, [pc, #68]	; (8004990 <_dtoa_r+0xbd8>)
 800494a:	f7ff baa0 	b.w	8003e8e <_dtoa_r+0xd6>
 800494e:	f1b9 0f00 	cmp.w	r9, #0
 8004952:	dc03      	bgt.n	800495c <_dtoa_r+0xba4>
 8004954:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004956:	2b02      	cmp	r3, #2
 8004958:	f73f aecb 	bgt.w	80046f2 <_dtoa_r+0x93a>
 800495c:	9f03      	ldr	r7, [sp, #12]
 800495e:	4621      	mov	r1, r4
 8004960:	4658      	mov	r0, fp
 8004962:	f7ff f9a1 	bl	8003ca8 <quorem>
 8004966:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800496a:	f807 3b01 	strb.w	r3, [r7], #1
 800496e:	9a03      	ldr	r2, [sp, #12]
 8004970:	1aba      	subs	r2, r7, r2
 8004972:	4591      	cmp	r9, r2
 8004974:	ddba      	ble.n	80048ec <_dtoa_r+0xb34>
 8004976:	4659      	mov	r1, fp
 8004978:	2300      	movs	r3, #0
 800497a:	220a      	movs	r2, #10
 800497c:	4628      	mov	r0, r5
 800497e:	f000 fc03 	bl	8005188 <__multadd>
 8004982:	4683      	mov	fp, r0
 8004984:	e7eb      	b.n	800495e <_dtoa_r+0xba6>
 8004986:	bf00      	nop
 8004988:	08006e30 	.word	0x08006e30
 800498c:	08006c34 	.word	0x08006c34
 8004990:	08006db1 	.word	0x08006db1

08004994 <__errno>:
 8004994:	4b01      	ldr	r3, [pc, #4]	; (800499c <__errno+0x8>)
 8004996:	6818      	ldr	r0, [r3, #0]
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	20000044 	.word	0x20000044

080049a0 <rshift>:
 80049a0:	6903      	ldr	r3, [r0, #16]
 80049a2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80049a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80049aa:	ea4f 1261 	mov.w	r2, r1, asr #5
 80049ae:	f100 0414 	add.w	r4, r0, #20
 80049b2:	dd45      	ble.n	8004a40 <rshift+0xa0>
 80049b4:	f011 011f 	ands.w	r1, r1, #31
 80049b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80049bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80049c0:	d10c      	bne.n	80049dc <rshift+0x3c>
 80049c2:	f100 0710 	add.w	r7, r0, #16
 80049c6:	4629      	mov	r1, r5
 80049c8:	42b1      	cmp	r1, r6
 80049ca:	d334      	bcc.n	8004a36 <rshift+0x96>
 80049cc:	1a9b      	subs	r3, r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	1eea      	subs	r2, r5, #3
 80049d2:	4296      	cmp	r6, r2
 80049d4:	bf38      	it	cc
 80049d6:	2300      	movcc	r3, #0
 80049d8:	4423      	add	r3, r4
 80049da:	e015      	b.n	8004a08 <rshift+0x68>
 80049dc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80049e0:	f1c1 0820 	rsb	r8, r1, #32
 80049e4:	40cf      	lsrs	r7, r1
 80049e6:	f105 0e04 	add.w	lr, r5, #4
 80049ea:	46a1      	mov	r9, r4
 80049ec:	4576      	cmp	r6, lr
 80049ee:	46f4      	mov	ip, lr
 80049f0:	d815      	bhi.n	8004a1e <rshift+0x7e>
 80049f2:	1a9a      	subs	r2, r3, r2
 80049f4:	0092      	lsls	r2, r2, #2
 80049f6:	3a04      	subs	r2, #4
 80049f8:	3501      	adds	r5, #1
 80049fa:	42ae      	cmp	r6, r5
 80049fc:	bf38      	it	cc
 80049fe:	2200      	movcc	r2, #0
 8004a00:	18a3      	adds	r3, r4, r2
 8004a02:	50a7      	str	r7, [r4, r2]
 8004a04:	b107      	cbz	r7, 8004a08 <rshift+0x68>
 8004a06:	3304      	adds	r3, #4
 8004a08:	1b1a      	subs	r2, r3, r4
 8004a0a:	42a3      	cmp	r3, r4
 8004a0c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8004a10:	bf08      	it	eq
 8004a12:	2300      	moveq	r3, #0
 8004a14:	6102      	str	r2, [r0, #16]
 8004a16:	bf08      	it	eq
 8004a18:	6143      	streq	r3, [r0, #20]
 8004a1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a1e:	f8dc c000 	ldr.w	ip, [ip]
 8004a22:	fa0c fc08 	lsl.w	ip, ip, r8
 8004a26:	ea4c 0707 	orr.w	r7, ip, r7
 8004a2a:	f849 7b04 	str.w	r7, [r9], #4
 8004a2e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004a32:	40cf      	lsrs	r7, r1
 8004a34:	e7da      	b.n	80049ec <rshift+0x4c>
 8004a36:	f851 cb04 	ldr.w	ip, [r1], #4
 8004a3a:	f847 cf04 	str.w	ip, [r7, #4]!
 8004a3e:	e7c3      	b.n	80049c8 <rshift+0x28>
 8004a40:	4623      	mov	r3, r4
 8004a42:	e7e1      	b.n	8004a08 <rshift+0x68>

08004a44 <__hexdig_fun>:
 8004a44:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004a48:	2b09      	cmp	r3, #9
 8004a4a:	d802      	bhi.n	8004a52 <__hexdig_fun+0xe>
 8004a4c:	3820      	subs	r0, #32
 8004a4e:	b2c0      	uxtb	r0, r0
 8004a50:	4770      	bx	lr
 8004a52:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8004a56:	2b05      	cmp	r3, #5
 8004a58:	d801      	bhi.n	8004a5e <__hexdig_fun+0x1a>
 8004a5a:	3847      	subs	r0, #71	; 0x47
 8004a5c:	e7f7      	b.n	8004a4e <__hexdig_fun+0xa>
 8004a5e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8004a62:	2b05      	cmp	r3, #5
 8004a64:	d801      	bhi.n	8004a6a <__hexdig_fun+0x26>
 8004a66:	3827      	subs	r0, #39	; 0x27
 8004a68:	e7f1      	b.n	8004a4e <__hexdig_fun+0xa>
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	4770      	bx	lr
	...

08004a70 <__gethex>:
 8004a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a74:	b08b      	sub	sp, #44	; 0x2c
 8004a76:	468b      	mov	fp, r1
 8004a78:	9305      	str	r3, [sp, #20]
 8004a7a:	4bb2      	ldr	r3, [pc, #712]	; (8004d44 <__gethex+0x2d4>)
 8004a7c:	9002      	str	r0, [sp, #8]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	9303      	str	r3, [sp, #12]
 8004a82:	4618      	mov	r0, r3
 8004a84:	4690      	mov	r8, r2
 8004a86:	f7fb fbab 	bl	80001e0 <strlen>
 8004a8a:	9b03      	ldr	r3, [sp, #12]
 8004a8c:	f8db 2000 	ldr.w	r2, [fp]
 8004a90:	4403      	add	r3, r0
 8004a92:	4682      	mov	sl, r0
 8004a94:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004a98:	9306      	str	r3, [sp, #24]
 8004a9a:	1c93      	adds	r3, r2, #2
 8004a9c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8004aa0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8004aa4:	32fe      	adds	r2, #254	; 0xfe
 8004aa6:	18d1      	adds	r1, r2, r3
 8004aa8:	461f      	mov	r7, r3
 8004aaa:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004aae:	9101      	str	r1, [sp, #4]
 8004ab0:	2830      	cmp	r0, #48	; 0x30
 8004ab2:	d0f8      	beq.n	8004aa6 <__gethex+0x36>
 8004ab4:	f7ff ffc6 	bl	8004a44 <__hexdig_fun>
 8004ab8:	4604      	mov	r4, r0
 8004aba:	2800      	cmp	r0, #0
 8004abc:	d13a      	bne.n	8004b34 <__gethex+0xc4>
 8004abe:	9903      	ldr	r1, [sp, #12]
 8004ac0:	4652      	mov	r2, sl
 8004ac2:	4638      	mov	r0, r7
 8004ac4:	f001 fa16 	bl	8005ef4 <strncmp>
 8004ac8:	4605      	mov	r5, r0
 8004aca:	2800      	cmp	r0, #0
 8004acc:	d166      	bne.n	8004b9c <__gethex+0x12c>
 8004ace:	f817 000a 	ldrb.w	r0, [r7, sl]
 8004ad2:	eb07 060a 	add.w	r6, r7, sl
 8004ad6:	f7ff ffb5 	bl	8004a44 <__hexdig_fun>
 8004ada:	2800      	cmp	r0, #0
 8004adc:	d060      	beq.n	8004ba0 <__gethex+0x130>
 8004ade:	4633      	mov	r3, r6
 8004ae0:	7818      	ldrb	r0, [r3, #0]
 8004ae2:	2830      	cmp	r0, #48	; 0x30
 8004ae4:	461f      	mov	r7, r3
 8004ae6:	f103 0301 	add.w	r3, r3, #1
 8004aea:	d0f9      	beq.n	8004ae0 <__gethex+0x70>
 8004aec:	f7ff ffaa 	bl	8004a44 <__hexdig_fun>
 8004af0:	2301      	movs	r3, #1
 8004af2:	fab0 f480 	clz	r4, r0
 8004af6:	0964      	lsrs	r4, r4, #5
 8004af8:	4635      	mov	r5, r6
 8004afa:	9301      	str	r3, [sp, #4]
 8004afc:	463a      	mov	r2, r7
 8004afe:	4616      	mov	r6, r2
 8004b00:	3201      	adds	r2, #1
 8004b02:	7830      	ldrb	r0, [r6, #0]
 8004b04:	f7ff ff9e 	bl	8004a44 <__hexdig_fun>
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	d1f8      	bne.n	8004afe <__gethex+0x8e>
 8004b0c:	9903      	ldr	r1, [sp, #12]
 8004b0e:	4652      	mov	r2, sl
 8004b10:	4630      	mov	r0, r6
 8004b12:	f001 f9ef 	bl	8005ef4 <strncmp>
 8004b16:	b980      	cbnz	r0, 8004b3a <__gethex+0xca>
 8004b18:	b94d      	cbnz	r5, 8004b2e <__gethex+0xbe>
 8004b1a:	eb06 050a 	add.w	r5, r6, sl
 8004b1e:	462a      	mov	r2, r5
 8004b20:	4616      	mov	r6, r2
 8004b22:	3201      	adds	r2, #1
 8004b24:	7830      	ldrb	r0, [r6, #0]
 8004b26:	f7ff ff8d 	bl	8004a44 <__hexdig_fun>
 8004b2a:	2800      	cmp	r0, #0
 8004b2c:	d1f8      	bne.n	8004b20 <__gethex+0xb0>
 8004b2e:	1bad      	subs	r5, r5, r6
 8004b30:	00ad      	lsls	r5, r5, #2
 8004b32:	e004      	b.n	8004b3e <__gethex+0xce>
 8004b34:	2400      	movs	r4, #0
 8004b36:	4625      	mov	r5, r4
 8004b38:	e7e0      	b.n	8004afc <__gethex+0x8c>
 8004b3a:	2d00      	cmp	r5, #0
 8004b3c:	d1f7      	bne.n	8004b2e <__gethex+0xbe>
 8004b3e:	7833      	ldrb	r3, [r6, #0]
 8004b40:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004b44:	2b50      	cmp	r3, #80	; 0x50
 8004b46:	d139      	bne.n	8004bbc <__gethex+0x14c>
 8004b48:	7873      	ldrb	r3, [r6, #1]
 8004b4a:	2b2b      	cmp	r3, #43	; 0x2b
 8004b4c:	d02a      	beq.n	8004ba4 <__gethex+0x134>
 8004b4e:	2b2d      	cmp	r3, #45	; 0x2d
 8004b50:	d02c      	beq.n	8004bac <__gethex+0x13c>
 8004b52:	1c71      	adds	r1, r6, #1
 8004b54:	f04f 0900 	mov.w	r9, #0
 8004b58:	7808      	ldrb	r0, [r1, #0]
 8004b5a:	f7ff ff73 	bl	8004a44 <__hexdig_fun>
 8004b5e:	1e43      	subs	r3, r0, #1
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b18      	cmp	r3, #24
 8004b64:	d82a      	bhi.n	8004bbc <__gethex+0x14c>
 8004b66:	f1a0 0210 	sub.w	r2, r0, #16
 8004b6a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004b6e:	f7ff ff69 	bl	8004a44 <__hexdig_fun>
 8004b72:	1e43      	subs	r3, r0, #1
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b18      	cmp	r3, #24
 8004b78:	d91b      	bls.n	8004bb2 <__gethex+0x142>
 8004b7a:	f1b9 0f00 	cmp.w	r9, #0
 8004b7e:	d000      	beq.n	8004b82 <__gethex+0x112>
 8004b80:	4252      	negs	r2, r2
 8004b82:	4415      	add	r5, r2
 8004b84:	f8cb 1000 	str.w	r1, [fp]
 8004b88:	b1d4      	cbz	r4, 8004bc0 <__gethex+0x150>
 8004b8a:	9b01      	ldr	r3, [sp, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	bf14      	ite	ne
 8004b90:	2700      	movne	r7, #0
 8004b92:	2706      	moveq	r7, #6
 8004b94:	4638      	mov	r0, r7
 8004b96:	b00b      	add	sp, #44	; 0x2c
 8004b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b9c:	463e      	mov	r6, r7
 8004b9e:	4625      	mov	r5, r4
 8004ba0:	2401      	movs	r4, #1
 8004ba2:	e7cc      	b.n	8004b3e <__gethex+0xce>
 8004ba4:	f04f 0900 	mov.w	r9, #0
 8004ba8:	1cb1      	adds	r1, r6, #2
 8004baa:	e7d5      	b.n	8004b58 <__gethex+0xe8>
 8004bac:	f04f 0901 	mov.w	r9, #1
 8004bb0:	e7fa      	b.n	8004ba8 <__gethex+0x138>
 8004bb2:	230a      	movs	r3, #10
 8004bb4:	fb03 0202 	mla	r2, r3, r2, r0
 8004bb8:	3a10      	subs	r2, #16
 8004bba:	e7d6      	b.n	8004b6a <__gethex+0xfa>
 8004bbc:	4631      	mov	r1, r6
 8004bbe:	e7e1      	b.n	8004b84 <__gethex+0x114>
 8004bc0:	1bf3      	subs	r3, r6, r7
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	4621      	mov	r1, r4
 8004bc6:	2b07      	cmp	r3, #7
 8004bc8:	dc0a      	bgt.n	8004be0 <__gethex+0x170>
 8004bca:	9802      	ldr	r0, [sp, #8]
 8004bcc:	f000 fa7a 	bl	80050c4 <_Balloc>
 8004bd0:	4604      	mov	r4, r0
 8004bd2:	b940      	cbnz	r0, 8004be6 <__gethex+0x176>
 8004bd4:	4b5c      	ldr	r3, [pc, #368]	; (8004d48 <__gethex+0x2d8>)
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	21de      	movs	r1, #222	; 0xde
 8004bda:	485c      	ldr	r0, [pc, #368]	; (8004d4c <__gethex+0x2dc>)
 8004bdc:	f001 f9ac 	bl	8005f38 <__assert_func>
 8004be0:	3101      	adds	r1, #1
 8004be2:	105b      	asrs	r3, r3, #1
 8004be4:	e7ef      	b.n	8004bc6 <__gethex+0x156>
 8004be6:	f100 0914 	add.w	r9, r0, #20
 8004bea:	f04f 0b00 	mov.w	fp, #0
 8004bee:	f1ca 0301 	rsb	r3, sl, #1
 8004bf2:	f8cd 9010 	str.w	r9, [sp, #16]
 8004bf6:	f8cd b004 	str.w	fp, [sp, #4]
 8004bfa:	9308      	str	r3, [sp, #32]
 8004bfc:	42b7      	cmp	r7, r6
 8004bfe:	d33f      	bcc.n	8004c80 <__gethex+0x210>
 8004c00:	9f04      	ldr	r7, [sp, #16]
 8004c02:	9b01      	ldr	r3, [sp, #4]
 8004c04:	f847 3b04 	str.w	r3, [r7], #4
 8004c08:	eba7 0709 	sub.w	r7, r7, r9
 8004c0c:	10bf      	asrs	r7, r7, #2
 8004c0e:	6127      	str	r7, [r4, #16]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fb49 	bl	80052a8 <__hi0bits>
 8004c16:	017f      	lsls	r7, r7, #5
 8004c18:	f8d8 6000 	ldr.w	r6, [r8]
 8004c1c:	1a3f      	subs	r7, r7, r0
 8004c1e:	42b7      	cmp	r7, r6
 8004c20:	dd62      	ble.n	8004ce8 <__gethex+0x278>
 8004c22:	1bbf      	subs	r7, r7, r6
 8004c24:	4639      	mov	r1, r7
 8004c26:	4620      	mov	r0, r4
 8004c28:	f000 fedf 	bl	80059ea <__any_on>
 8004c2c:	4682      	mov	sl, r0
 8004c2e:	b1a8      	cbz	r0, 8004c5c <__gethex+0x1ec>
 8004c30:	1e7b      	subs	r3, r7, #1
 8004c32:	1159      	asrs	r1, r3, #5
 8004c34:	f003 021f 	and.w	r2, r3, #31
 8004c38:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8004c3c:	f04f 0a01 	mov.w	sl, #1
 8004c40:	fa0a f202 	lsl.w	r2, sl, r2
 8004c44:	420a      	tst	r2, r1
 8004c46:	d009      	beq.n	8004c5c <__gethex+0x1ec>
 8004c48:	4553      	cmp	r3, sl
 8004c4a:	dd05      	ble.n	8004c58 <__gethex+0x1e8>
 8004c4c:	1eb9      	subs	r1, r7, #2
 8004c4e:	4620      	mov	r0, r4
 8004c50:	f000 fecb 	bl	80059ea <__any_on>
 8004c54:	2800      	cmp	r0, #0
 8004c56:	d144      	bne.n	8004ce2 <__gethex+0x272>
 8004c58:	f04f 0a02 	mov.w	sl, #2
 8004c5c:	4639      	mov	r1, r7
 8004c5e:	4620      	mov	r0, r4
 8004c60:	f7ff fe9e 	bl	80049a0 <rshift>
 8004c64:	443d      	add	r5, r7
 8004c66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004c6a:	42ab      	cmp	r3, r5
 8004c6c:	da4a      	bge.n	8004d04 <__gethex+0x294>
 8004c6e:	9802      	ldr	r0, [sp, #8]
 8004c70:	4621      	mov	r1, r4
 8004c72:	f000 fa67 	bl	8005144 <_Bfree>
 8004c76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004c78:	2300      	movs	r3, #0
 8004c7a:	6013      	str	r3, [r2, #0]
 8004c7c:	27a3      	movs	r7, #163	; 0xa3
 8004c7e:	e789      	b.n	8004b94 <__gethex+0x124>
 8004c80:	1e73      	subs	r3, r6, #1
 8004c82:	9a06      	ldr	r2, [sp, #24]
 8004c84:	9307      	str	r3, [sp, #28]
 8004c86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d019      	beq.n	8004cc2 <__gethex+0x252>
 8004c8e:	f1bb 0f20 	cmp.w	fp, #32
 8004c92:	d107      	bne.n	8004ca4 <__gethex+0x234>
 8004c94:	9b04      	ldr	r3, [sp, #16]
 8004c96:	9a01      	ldr	r2, [sp, #4]
 8004c98:	f843 2b04 	str.w	r2, [r3], #4
 8004c9c:	9304      	str	r3, [sp, #16]
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	9301      	str	r3, [sp, #4]
 8004ca2:	469b      	mov	fp, r3
 8004ca4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8004ca8:	f7ff fecc 	bl	8004a44 <__hexdig_fun>
 8004cac:	9b01      	ldr	r3, [sp, #4]
 8004cae:	f000 000f 	and.w	r0, r0, #15
 8004cb2:	fa00 f00b 	lsl.w	r0, r0, fp
 8004cb6:	4303      	orrs	r3, r0
 8004cb8:	9301      	str	r3, [sp, #4]
 8004cba:	f10b 0b04 	add.w	fp, fp, #4
 8004cbe:	9b07      	ldr	r3, [sp, #28]
 8004cc0:	e00d      	b.n	8004cde <__gethex+0x26e>
 8004cc2:	9a08      	ldr	r2, [sp, #32]
 8004cc4:	1e73      	subs	r3, r6, #1
 8004cc6:	4413      	add	r3, r2
 8004cc8:	42bb      	cmp	r3, r7
 8004cca:	d3e0      	bcc.n	8004c8e <__gethex+0x21e>
 8004ccc:	4618      	mov	r0, r3
 8004cce:	9903      	ldr	r1, [sp, #12]
 8004cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8004cd2:	4652      	mov	r2, sl
 8004cd4:	f001 f90e 	bl	8005ef4 <strncmp>
 8004cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	d1d7      	bne.n	8004c8e <__gethex+0x21e>
 8004cde:	461e      	mov	r6, r3
 8004ce0:	e78c      	b.n	8004bfc <__gethex+0x18c>
 8004ce2:	f04f 0a03 	mov.w	sl, #3
 8004ce6:	e7b9      	b.n	8004c5c <__gethex+0x1ec>
 8004ce8:	da09      	bge.n	8004cfe <__gethex+0x28e>
 8004cea:	1bf7      	subs	r7, r6, r7
 8004cec:	4621      	mov	r1, r4
 8004cee:	9802      	ldr	r0, [sp, #8]
 8004cf0:	463a      	mov	r2, r7
 8004cf2:	f000 fc3f 	bl	8005574 <__lshift>
 8004cf6:	1bed      	subs	r5, r5, r7
 8004cf8:	4604      	mov	r4, r0
 8004cfa:	f100 0914 	add.w	r9, r0, #20
 8004cfe:	f04f 0a00 	mov.w	sl, #0
 8004d02:	e7b0      	b.n	8004c66 <__gethex+0x1f6>
 8004d04:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004d08:	42a8      	cmp	r0, r5
 8004d0a:	dd71      	ble.n	8004df0 <__gethex+0x380>
 8004d0c:	1b45      	subs	r5, r0, r5
 8004d0e:	42ae      	cmp	r6, r5
 8004d10:	dc35      	bgt.n	8004d7e <__gethex+0x30e>
 8004d12:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d029      	beq.n	8004d6e <__gethex+0x2fe>
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d02b      	beq.n	8004d76 <__gethex+0x306>
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d11c      	bne.n	8004d5c <__gethex+0x2ec>
 8004d22:	42ae      	cmp	r6, r5
 8004d24:	d11a      	bne.n	8004d5c <__gethex+0x2ec>
 8004d26:	2e01      	cmp	r6, #1
 8004d28:	d112      	bne.n	8004d50 <__gethex+0x2e0>
 8004d2a:	9a05      	ldr	r2, [sp, #20]
 8004d2c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	2301      	movs	r3, #1
 8004d34:	6123      	str	r3, [r4, #16]
 8004d36:	f8c9 3000 	str.w	r3, [r9]
 8004d3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004d3c:	2762      	movs	r7, #98	; 0x62
 8004d3e:	601c      	str	r4, [r3, #0]
 8004d40:	e728      	b.n	8004b94 <__gethex+0x124>
 8004d42:	bf00      	nop
 8004d44:	08006ea8 	.word	0x08006ea8
 8004d48:	08006e30 	.word	0x08006e30
 8004d4c:	08006e41 	.word	0x08006e41
 8004d50:	1e71      	subs	r1, r6, #1
 8004d52:	4620      	mov	r0, r4
 8004d54:	f000 fe49 	bl	80059ea <__any_on>
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	d1e6      	bne.n	8004d2a <__gethex+0x2ba>
 8004d5c:	9802      	ldr	r0, [sp, #8]
 8004d5e:	4621      	mov	r1, r4
 8004d60:	f000 f9f0 	bl	8005144 <_Bfree>
 8004d64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004d66:	2300      	movs	r3, #0
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	2750      	movs	r7, #80	; 0x50
 8004d6c:	e712      	b.n	8004b94 <__gethex+0x124>
 8004d6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1f3      	bne.n	8004d5c <__gethex+0x2ec>
 8004d74:	e7d9      	b.n	8004d2a <__gethex+0x2ba>
 8004d76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1d6      	bne.n	8004d2a <__gethex+0x2ba>
 8004d7c:	e7ee      	b.n	8004d5c <__gethex+0x2ec>
 8004d7e:	1e6f      	subs	r7, r5, #1
 8004d80:	f1ba 0f00 	cmp.w	sl, #0
 8004d84:	d131      	bne.n	8004dea <__gethex+0x37a>
 8004d86:	b127      	cbz	r7, 8004d92 <__gethex+0x322>
 8004d88:	4639      	mov	r1, r7
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	f000 fe2d 	bl	80059ea <__any_on>
 8004d90:	4682      	mov	sl, r0
 8004d92:	117b      	asrs	r3, r7, #5
 8004d94:	2101      	movs	r1, #1
 8004d96:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004d9a:	f007 071f 	and.w	r7, r7, #31
 8004d9e:	fa01 f707 	lsl.w	r7, r1, r7
 8004da2:	421f      	tst	r7, r3
 8004da4:	4629      	mov	r1, r5
 8004da6:	4620      	mov	r0, r4
 8004da8:	bf18      	it	ne
 8004daa:	f04a 0a02 	orrne.w	sl, sl, #2
 8004dae:	1b76      	subs	r6, r6, r5
 8004db0:	f7ff fdf6 	bl	80049a0 <rshift>
 8004db4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8004db8:	2702      	movs	r7, #2
 8004dba:	f1ba 0f00 	cmp.w	sl, #0
 8004dbe:	d048      	beq.n	8004e52 <__gethex+0x3e2>
 8004dc0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d015      	beq.n	8004df4 <__gethex+0x384>
 8004dc8:	2b03      	cmp	r3, #3
 8004dca:	d017      	beq.n	8004dfc <__gethex+0x38c>
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d109      	bne.n	8004de4 <__gethex+0x374>
 8004dd0:	f01a 0f02 	tst.w	sl, #2
 8004dd4:	d006      	beq.n	8004de4 <__gethex+0x374>
 8004dd6:	f8d9 0000 	ldr.w	r0, [r9]
 8004dda:	ea4a 0a00 	orr.w	sl, sl, r0
 8004dde:	f01a 0f01 	tst.w	sl, #1
 8004de2:	d10e      	bne.n	8004e02 <__gethex+0x392>
 8004de4:	f047 0710 	orr.w	r7, r7, #16
 8004de8:	e033      	b.n	8004e52 <__gethex+0x3e2>
 8004dea:	f04f 0a01 	mov.w	sl, #1
 8004dee:	e7d0      	b.n	8004d92 <__gethex+0x322>
 8004df0:	2701      	movs	r7, #1
 8004df2:	e7e2      	b.n	8004dba <__gethex+0x34a>
 8004df4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004df6:	f1c3 0301 	rsb	r3, r3, #1
 8004dfa:	9315      	str	r3, [sp, #84]	; 0x54
 8004dfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0f0      	beq.n	8004de4 <__gethex+0x374>
 8004e02:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8004e06:	f104 0314 	add.w	r3, r4, #20
 8004e0a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8004e0e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8004e12:	f04f 0c00 	mov.w	ip, #0
 8004e16:	4618      	mov	r0, r3
 8004e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e1c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8004e20:	d01c      	beq.n	8004e5c <__gethex+0x3ec>
 8004e22:	3201      	adds	r2, #1
 8004e24:	6002      	str	r2, [r0, #0]
 8004e26:	2f02      	cmp	r7, #2
 8004e28:	f104 0314 	add.w	r3, r4, #20
 8004e2c:	d13d      	bne.n	8004eaa <__gethex+0x43a>
 8004e2e:	f8d8 2000 	ldr.w	r2, [r8]
 8004e32:	3a01      	subs	r2, #1
 8004e34:	42b2      	cmp	r2, r6
 8004e36:	d10a      	bne.n	8004e4e <__gethex+0x3de>
 8004e38:	1171      	asrs	r1, r6, #5
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004e40:	f006 061f 	and.w	r6, r6, #31
 8004e44:	fa02 f606 	lsl.w	r6, r2, r6
 8004e48:	421e      	tst	r6, r3
 8004e4a:	bf18      	it	ne
 8004e4c:	4617      	movne	r7, r2
 8004e4e:	f047 0720 	orr.w	r7, r7, #32
 8004e52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004e54:	601c      	str	r4, [r3, #0]
 8004e56:	9b05      	ldr	r3, [sp, #20]
 8004e58:	601d      	str	r5, [r3, #0]
 8004e5a:	e69b      	b.n	8004b94 <__gethex+0x124>
 8004e5c:	4299      	cmp	r1, r3
 8004e5e:	f843 cc04 	str.w	ip, [r3, #-4]
 8004e62:	d8d8      	bhi.n	8004e16 <__gethex+0x3a6>
 8004e64:	68a3      	ldr	r3, [r4, #8]
 8004e66:	459b      	cmp	fp, r3
 8004e68:	db17      	blt.n	8004e9a <__gethex+0x42a>
 8004e6a:	6861      	ldr	r1, [r4, #4]
 8004e6c:	9802      	ldr	r0, [sp, #8]
 8004e6e:	3101      	adds	r1, #1
 8004e70:	f000 f928 	bl	80050c4 <_Balloc>
 8004e74:	4681      	mov	r9, r0
 8004e76:	b918      	cbnz	r0, 8004e80 <__gethex+0x410>
 8004e78:	4b1a      	ldr	r3, [pc, #104]	; (8004ee4 <__gethex+0x474>)
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	2184      	movs	r1, #132	; 0x84
 8004e7e:	e6ac      	b.n	8004bda <__gethex+0x16a>
 8004e80:	6922      	ldr	r2, [r4, #16]
 8004e82:	3202      	adds	r2, #2
 8004e84:	f104 010c 	add.w	r1, r4, #12
 8004e88:	0092      	lsls	r2, r2, #2
 8004e8a:	300c      	adds	r0, #12
 8004e8c:	f000 f90c 	bl	80050a8 <memcpy>
 8004e90:	4621      	mov	r1, r4
 8004e92:	9802      	ldr	r0, [sp, #8]
 8004e94:	f000 f956 	bl	8005144 <_Bfree>
 8004e98:	464c      	mov	r4, r9
 8004e9a:	6923      	ldr	r3, [r4, #16]
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004ea2:	6122      	str	r2, [r4, #16]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	615a      	str	r2, [r3, #20]
 8004ea8:	e7bd      	b.n	8004e26 <__gethex+0x3b6>
 8004eaa:	6922      	ldr	r2, [r4, #16]
 8004eac:	455a      	cmp	r2, fp
 8004eae:	dd0b      	ble.n	8004ec8 <__gethex+0x458>
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	f7ff fd74 	bl	80049a0 <rshift>
 8004eb8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004ebc:	3501      	adds	r5, #1
 8004ebe:	42ab      	cmp	r3, r5
 8004ec0:	f6ff aed5 	blt.w	8004c6e <__gethex+0x1fe>
 8004ec4:	2701      	movs	r7, #1
 8004ec6:	e7c2      	b.n	8004e4e <__gethex+0x3de>
 8004ec8:	f016 061f 	ands.w	r6, r6, #31
 8004ecc:	d0fa      	beq.n	8004ec4 <__gethex+0x454>
 8004ece:	4453      	add	r3, sl
 8004ed0:	f1c6 0620 	rsb	r6, r6, #32
 8004ed4:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8004ed8:	f000 f9e6 	bl	80052a8 <__hi0bits>
 8004edc:	42b0      	cmp	r0, r6
 8004ede:	dbe7      	blt.n	8004eb0 <__gethex+0x440>
 8004ee0:	e7f0      	b.n	8004ec4 <__gethex+0x454>
 8004ee2:	bf00      	nop
 8004ee4:	08006e30 	.word	0x08006e30

08004ee8 <L_shift>:
 8004ee8:	f1c2 0208 	rsb	r2, r2, #8
 8004eec:	0092      	lsls	r2, r2, #2
 8004eee:	b570      	push	{r4, r5, r6, lr}
 8004ef0:	f1c2 0620 	rsb	r6, r2, #32
 8004ef4:	6843      	ldr	r3, [r0, #4]
 8004ef6:	6804      	ldr	r4, [r0, #0]
 8004ef8:	fa03 f506 	lsl.w	r5, r3, r6
 8004efc:	432c      	orrs	r4, r5
 8004efe:	40d3      	lsrs	r3, r2
 8004f00:	6004      	str	r4, [r0, #0]
 8004f02:	f840 3f04 	str.w	r3, [r0, #4]!
 8004f06:	4288      	cmp	r0, r1
 8004f08:	d3f4      	bcc.n	8004ef4 <L_shift+0xc>
 8004f0a:	bd70      	pop	{r4, r5, r6, pc}

08004f0c <__match>:
 8004f0c:	b530      	push	{r4, r5, lr}
 8004f0e:	6803      	ldr	r3, [r0, #0]
 8004f10:	3301      	adds	r3, #1
 8004f12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f16:	b914      	cbnz	r4, 8004f1e <__match+0x12>
 8004f18:	6003      	str	r3, [r0, #0]
 8004f1a:	2001      	movs	r0, #1
 8004f1c:	bd30      	pop	{r4, r5, pc}
 8004f1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f22:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8004f26:	2d19      	cmp	r5, #25
 8004f28:	bf98      	it	ls
 8004f2a:	3220      	addls	r2, #32
 8004f2c:	42a2      	cmp	r2, r4
 8004f2e:	d0f0      	beq.n	8004f12 <__match+0x6>
 8004f30:	2000      	movs	r0, #0
 8004f32:	e7f3      	b.n	8004f1c <__match+0x10>

08004f34 <__hexnan>:
 8004f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f38:	680b      	ldr	r3, [r1, #0]
 8004f3a:	115e      	asrs	r6, r3, #5
 8004f3c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004f40:	f013 031f 	ands.w	r3, r3, #31
 8004f44:	b087      	sub	sp, #28
 8004f46:	bf18      	it	ne
 8004f48:	3604      	addne	r6, #4
 8004f4a:	2500      	movs	r5, #0
 8004f4c:	1f37      	subs	r7, r6, #4
 8004f4e:	4690      	mov	r8, r2
 8004f50:	6802      	ldr	r2, [r0, #0]
 8004f52:	9301      	str	r3, [sp, #4]
 8004f54:	4682      	mov	sl, r0
 8004f56:	f846 5c04 	str.w	r5, [r6, #-4]
 8004f5a:	46b9      	mov	r9, r7
 8004f5c:	463c      	mov	r4, r7
 8004f5e:	9502      	str	r5, [sp, #8]
 8004f60:	46ab      	mov	fp, r5
 8004f62:	7851      	ldrb	r1, [r2, #1]
 8004f64:	1c53      	adds	r3, r2, #1
 8004f66:	9303      	str	r3, [sp, #12]
 8004f68:	b341      	cbz	r1, 8004fbc <__hexnan+0x88>
 8004f6a:	4608      	mov	r0, r1
 8004f6c:	9205      	str	r2, [sp, #20]
 8004f6e:	9104      	str	r1, [sp, #16]
 8004f70:	f7ff fd68 	bl	8004a44 <__hexdig_fun>
 8004f74:	2800      	cmp	r0, #0
 8004f76:	d14f      	bne.n	8005018 <__hexnan+0xe4>
 8004f78:	9904      	ldr	r1, [sp, #16]
 8004f7a:	9a05      	ldr	r2, [sp, #20]
 8004f7c:	2920      	cmp	r1, #32
 8004f7e:	d818      	bhi.n	8004fb2 <__hexnan+0x7e>
 8004f80:	9b02      	ldr	r3, [sp, #8]
 8004f82:	459b      	cmp	fp, r3
 8004f84:	dd13      	ble.n	8004fae <__hexnan+0x7a>
 8004f86:	454c      	cmp	r4, r9
 8004f88:	d206      	bcs.n	8004f98 <__hexnan+0x64>
 8004f8a:	2d07      	cmp	r5, #7
 8004f8c:	dc04      	bgt.n	8004f98 <__hexnan+0x64>
 8004f8e:	462a      	mov	r2, r5
 8004f90:	4649      	mov	r1, r9
 8004f92:	4620      	mov	r0, r4
 8004f94:	f7ff ffa8 	bl	8004ee8 <L_shift>
 8004f98:	4544      	cmp	r4, r8
 8004f9a:	d950      	bls.n	800503e <__hexnan+0x10a>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f1a4 0904 	sub.w	r9, r4, #4
 8004fa2:	f844 3c04 	str.w	r3, [r4, #-4]
 8004fa6:	f8cd b008 	str.w	fp, [sp, #8]
 8004faa:	464c      	mov	r4, r9
 8004fac:	461d      	mov	r5, r3
 8004fae:	9a03      	ldr	r2, [sp, #12]
 8004fb0:	e7d7      	b.n	8004f62 <__hexnan+0x2e>
 8004fb2:	2929      	cmp	r1, #41	; 0x29
 8004fb4:	d156      	bne.n	8005064 <__hexnan+0x130>
 8004fb6:	3202      	adds	r2, #2
 8004fb8:	f8ca 2000 	str.w	r2, [sl]
 8004fbc:	f1bb 0f00 	cmp.w	fp, #0
 8004fc0:	d050      	beq.n	8005064 <__hexnan+0x130>
 8004fc2:	454c      	cmp	r4, r9
 8004fc4:	d206      	bcs.n	8004fd4 <__hexnan+0xa0>
 8004fc6:	2d07      	cmp	r5, #7
 8004fc8:	dc04      	bgt.n	8004fd4 <__hexnan+0xa0>
 8004fca:	462a      	mov	r2, r5
 8004fcc:	4649      	mov	r1, r9
 8004fce:	4620      	mov	r0, r4
 8004fd0:	f7ff ff8a 	bl	8004ee8 <L_shift>
 8004fd4:	4544      	cmp	r4, r8
 8004fd6:	d934      	bls.n	8005042 <__hexnan+0x10e>
 8004fd8:	f1a8 0204 	sub.w	r2, r8, #4
 8004fdc:	4623      	mov	r3, r4
 8004fde:	f853 1b04 	ldr.w	r1, [r3], #4
 8004fe2:	f842 1f04 	str.w	r1, [r2, #4]!
 8004fe6:	429f      	cmp	r7, r3
 8004fe8:	d2f9      	bcs.n	8004fde <__hexnan+0xaa>
 8004fea:	1b3b      	subs	r3, r7, r4
 8004fec:	f023 0303 	bic.w	r3, r3, #3
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	3401      	adds	r4, #1
 8004ff4:	3e03      	subs	r6, #3
 8004ff6:	42b4      	cmp	r4, r6
 8004ff8:	bf88      	it	hi
 8004ffa:	2304      	movhi	r3, #4
 8004ffc:	4443      	add	r3, r8
 8004ffe:	2200      	movs	r2, #0
 8005000:	f843 2b04 	str.w	r2, [r3], #4
 8005004:	429f      	cmp	r7, r3
 8005006:	d2fb      	bcs.n	8005000 <__hexnan+0xcc>
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	b91b      	cbnz	r3, 8005014 <__hexnan+0xe0>
 800500c:	4547      	cmp	r7, r8
 800500e:	d127      	bne.n	8005060 <__hexnan+0x12c>
 8005010:	2301      	movs	r3, #1
 8005012:	603b      	str	r3, [r7, #0]
 8005014:	2005      	movs	r0, #5
 8005016:	e026      	b.n	8005066 <__hexnan+0x132>
 8005018:	3501      	adds	r5, #1
 800501a:	2d08      	cmp	r5, #8
 800501c:	f10b 0b01 	add.w	fp, fp, #1
 8005020:	dd06      	ble.n	8005030 <__hexnan+0xfc>
 8005022:	4544      	cmp	r4, r8
 8005024:	d9c3      	bls.n	8004fae <__hexnan+0x7a>
 8005026:	2300      	movs	r3, #0
 8005028:	f844 3c04 	str.w	r3, [r4, #-4]
 800502c:	2501      	movs	r5, #1
 800502e:	3c04      	subs	r4, #4
 8005030:	6822      	ldr	r2, [r4, #0]
 8005032:	f000 000f 	and.w	r0, r0, #15
 8005036:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800503a:	6022      	str	r2, [r4, #0]
 800503c:	e7b7      	b.n	8004fae <__hexnan+0x7a>
 800503e:	2508      	movs	r5, #8
 8005040:	e7b5      	b.n	8004fae <__hexnan+0x7a>
 8005042:	9b01      	ldr	r3, [sp, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0df      	beq.n	8005008 <__hexnan+0xd4>
 8005048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800504c:	f1c3 0320 	rsb	r3, r3, #32
 8005050:	fa22 f303 	lsr.w	r3, r2, r3
 8005054:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005058:	401a      	ands	r2, r3
 800505a:	f846 2c04 	str.w	r2, [r6, #-4]
 800505e:	e7d3      	b.n	8005008 <__hexnan+0xd4>
 8005060:	3f04      	subs	r7, #4
 8005062:	e7d1      	b.n	8005008 <__hexnan+0xd4>
 8005064:	2004      	movs	r0, #4
 8005066:	b007      	add	sp, #28
 8005068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800506c <_localeconv_r>:
 800506c:	4800      	ldr	r0, [pc, #0]	; (8005070 <_localeconv_r+0x4>)
 800506e:	4770      	bx	lr
 8005070:	2000019c 	.word	0x2000019c

08005074 <malloc>:
 8005074:	4b02      	ldr	r3, [pc, #8]	; (8005080 <malloc+0xc>)
 8005076:	4601      	mov	r1, r0
 8005078:	6818      	ldr	r0, [r3, #0]
 800507a:	f000 bd55 	b.w	8005b28 <_malloc_r>
 800507e:	bf00      	nop
 8005080:	20000044 	.word	0x20000044

08005084 <__ascii_mbtowc>:
 8005084:	b082      	sub	sp, #8
 8005086:	b901      	cbnz	r1, 800508a <__ascii_mbtowc+0x6>
 8005088:	a901      	add	r1, sp, #4
 800508a:	b142      	cbz	r2, 800509e <__ascii_mbtowc+0x1a>
 800508c:	b14b      	cbz	r3, 80050a2 <__ascii_mbtowc+0x1e>
 800508e:	7813      	ldrb	r3, [r2, #0]
 8005090:	600b      	str	r3, [r1, #0]
 8005092:	7812      	ldrb	r2, [r2, #0]
 8005094:	1e10      	subs	r0, r2, #0
 8005096:	bf18      	it	ne
 8005098:	2001      	movne	r0, #1
 800509a:	b002      	add	sp, #8
 800509c:	4770      	bx	lr
 800509e:	4610      	mov	r0, r2
 80050a0:	e7fb      	b.n	800509a <__ascii_mbtowc+0x16>
 80050a2:	f06f 0001 	mvn.w	r0, #1
 80050a6:	e7f8      	b.n	800509a <__ascii_mbtowc+0x16>

080050a8 <memcpy>:
 80050a8:	440a      	add	r2, r1
 80050aa:	4291      	cmp	r1, r2
 80050ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80050b0:	d100      	bne.n	80050b4 <memcpy+0xc>
 80050b2:	4770      	bx	lr
 80050b4:	b510      	push	{r4, lr}
 80050b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050be:	4291      	cmp	r1, r2
 80050c0:	d1f9      	bne.n	80050b6 <memcpy+0xe>
 80050c2:	bd10      	pop	{r4, pc}

080050c4 <_Balloc>:
 80050c4:	b570      	push	{r4, r5, r6, lr}
 80050c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80050c8:	4604      	mov	r4, r0
 80050ca:	460d      	mov	r5, r1
 80050cc:	b976      	cbnz	r6, 80050ec <_Balloc+0x28>
 80050ce:	2010      	movs	r0, #16
 80050d0:	f7ff ffd0 	bl	8005074 <malloc>
 80050d4:	4602      	mov	r2, r0
 80050d6:	6260      	str	r0, [r4, #36]	; 0x24
 80050d8:	b920      	cbnz	r0, 80050e4 <_Balloc+0x20>
 80050da:	4b18      	ldr	r3, [pc, #96]	; (800513c <_Balloc+0x78>)
 80050dc:	4818      	ldr	r0, [pc, #96]	; (8005140 <_Balloc+0x7c>)
 80050de:	2166      	movs	r1, #102	; 0x66
 80050e0:	f000 ff2a 	bl	8005f38 <__assert_func>
 80050e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80050e8:	6006      	str	r6, [r0, #0]
 80050ea:	60c6      	str	r6, [r0, #12]
 80050ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80050ee:	68f3      	ldr	r3, [r6, #12]
 80050f0:	b183      	cbz	r3, 8005114 <_Balloc+0x50>
 80050f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80050fa:	b9b8      	cbnz	r0, 800512c <_Balloc+0x68>
 80050fc:	2101      	movs	r1, #1
 80050fe:	fa01 f605 	lsl.w	r6, r1, r5
 8005102:	1d72      	adds	r2, r6, #5
 8005104:	0092      	lsls	r2, r2, #2
 8005106:	4620      	mov	r0, r4
 8005108:	f000 fc90 	bl	8005a2c <_calloc_r>
 800510c:	b160      	cbz	r0, 8005128 <_Balloc+0x64>
 800510e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005112:	e00e      	b.n	8005132 <_Balloc+0x6e>
 8005114:	2221      	movs	r2, #33	; 0x21
 8005116:	2104      	movs	r1, #4
 8005118:	4620      	mov	r0, r4
 800511a:	f000 fc87 	bl	8005a2c <_calloc_r>
 800511e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005120:	60f0      	str	r0, [r6, #12]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e4      	bne.n	80050f2 <_Balloc+0x2e>
 8005128:	2000      	movs	r0, #0
 800512a:	bd70      	pop	{r4, r5, r6, pc}
 800512c:	6802      	ldr	r2, [r0, #0]
 800512e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005132:	2300      	movs	r3, #0
 8005134:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005138:	e7f7      	b.n	800512a <_Balloc+0x66>
 800513a:	bf00      	nop
 800513c:	08006dbe 	.word	0x08006dbe
 8005140:	08006ebc 	.word	0x08006ebc

08005144 <_Bfree>:
 8005144:	b570      	push	{r4, r5, r6, lr}
 8005146:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005148:	4605      	mov	r5, r0
 800514a:	460c      	mov	r4, r1
 800514c:	b976      	cbnz	r6, 800516c <_Bfree+0x28>
 800514e:	2010      	movs	r0, #16
 8005150:	f7ff ff90 	bl	8005074 <malloc>
 8005154:	4602      	mov	r2, r0
 8005156:	6268      	str	r0, [r5, #36]	; 0x24
 8005158:	b920      	cbnz	r0, 8005164 <_Bfree+0x20>
 800515a:	4b09      	ldr	r3, [pc, #36]	; (8005180 <_Bfree+0x3c>)
 800515c:	4809      	ldr	r0, [pc, #36]	; (8005184 <_Bfree+0x40>)
 800515e:	218a      	movs	r1, #138	; 0x8a
 8005160:	f000 feea 	bl	8005f38 <__assert_func>
 8005164:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005168:	6006      	str	r6, [r0, #0]
 800516a:	60c6      	str	r6, [r0, #12]
 800516c:	b13c      	cbz	r4, 800517e <_Bfree+0x3a>
 800516e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005170:	6862      	ldr	r2, [r4, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005178:	6021      	str	r1, [r4, #0]
 800517a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800517e:	bd70      	pop	{r4, r5, r6, pc}
 8005180:	08006dbe 	.word	0x08006dbe
 8005184:	08006ebc 	.word	0x08006ebc

08005188 <__multadd>:
 8005188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800518c:	690d      	ldr	r5, [r1, #16]
 800518e:	4607      	mov	r7, r0
 8005190:	460c      	mov	r4, r1
 8005192:	461e      	mov	r6, r3
 8005194:	f101 0c14 	add.w	ip, r1, #20
 8005198:	2000      	movs	r0, #0
 800519a:	f8dc 3000 	ldr.w	r3, [ip]
 800519e:	b299      	uxth	r1, r3
 80051a0:	fb02 6101 	mla	r1, r2, r1, r6
 80051a4:	0c1e      	lsrs	r6, r3, #16
 80051a6:	0c0b      	lsrs	r3, r1, #16
 80051a8:	fb02 3306 	mla	r3, r2, r6, r3
 80051ac:	b289      	uxth	r1, r1
 80051ae:	3001      	adds	r0, #1
 80051b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80051b4:	4285      	cmp	r5, r0
 80051b6:	f84c 1b04 	str.w	r1, [ip], #4
 80051ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80051be:	dcec      	bgt.n	800519a <__multadd+0x12>
 80051c0:	b30e      	cbz	r6, 8005206 <__multadd+0x7e>
 80051c2:	68a3      	ldr	r3, [r4, #8]
 80051c4:	42ab      	cmp	r3, r5
 80051c6:	dc19      	bgt.n	80051fc <__multadd+0x74>
 80051c8:	6861      	ldr	r1, [r4, #4]
 80051ca:	4638      	mov	r0, r7
 80051cc:	3101      	adds	r1, #1
 80051ce:	f7ff ff79 	bl	80050c4 <_Balloc>
 80051d2:	4680      	mov	r8, r0
 80051d4:	b928      	cbnz	r0, 80051e2 <__multadd+0x5a>
 80051d6:	4602      	mov	r2, r0
 80051d8:	4b0c      	ldr	r3, [pc, #48]	; (800520c <__multadd+0x84>)
 80051da:	480d      	ldr	r0, [pc, #52]	; (8005210 <__multadd+0x88>)
 80051dc:	21b5      	movs	r1, #181	; 0xb5
 80051de:	f000 feab 	bl	8005f38 <__assert_func>
 80051e2:	6922      	ldr	r2, [r4, #16]
 80051e4:	3202      	adds	r2, #2
 80051e6:	f104 010c 	add.w	r1, r4, #12
 80051ea:	0092      	lsls	r2, r2, #2
 80051ec:	300c      	adds	r0, #12
 80051ee:	f7ff ff5b 	bl	80050a8 <memcpy>
 80051f2:	4621      	mov	r1, r4
 80051f4:	4638      	mov	r0, r7
 80051f6:	f7ff ffa5 	bl	8005144 <_Bfree>
 80051fa:	4644      	mov	r4, r8
 80051fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005200:	3501      	adds	r5, #1
 8005202:	615e      	str	r6, [r3, #20]
 8005204:	6125      	str	r5, [r4, #16]
 8005206:	4620      	mov	r0, r4
 8005208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800520c:	08006e30 	.word	0x08006e30
 8005210:	08006ebc 	.word	0x08006ebc

08005214 <__s2b>:
 8005214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005218:	460c      	mov	r4, r1
 800521a:	4615      	mov	r5, r2
 800521c:	461f      	mov	r7, r3
 800521e:	2209      	movs	r2, #9
 8005220:	3308      	adds	r3, #8
 8005222:	4606      	mov	r6, r0
 8005224:	fb93 f3f2 	sdiv	r3, r3, r2
 8005228:	2100      	movs	r1, #0
 800522a:	2201      	movs	r2, #1
 800522c:	429a      	cmp	r2, r3
 800522e:	db09      	blt.n	8005244 <__s2b+0x30>
 8005230:	4630      	mov	r0, r6
 8005232:	f7ff ff47 	bl	80050c4 <_Balloc>
 8005236:	b940      	cbnz	r0, 800524a <__s2b+0x36>
 8005238:	4602      	mov	r2, r0
 800523a:	4b19      	ldr	r3, [pc, #100]	; (80052a0 <__s2b+0x8c>)
 800523c:	4819      	ldr	r0, [pc, #100]	; (80052a4 <__s2b+0x90>)
 800523e:	21ce      	movs	r1, #206	; 0xce
 8005240:	f000 fe7a 	bl	8005f38 <__assert_func>
 8005244:	0052      	lsls	r2, r2, #1
 8005246:	3101      	adds	r1, #1
 8005248:	e7f0      	b.n	800522c <__s2b+0x18>
 800524a:	9b08      	ldr	r3, [sp, #32]
 800524c:	6143      	str	r3, [r0, #20]
 800524e:	2d09      	cmp	r5, #9
 8005250:	f04f 0301 	mov.w	r3, #1
 8005254:	6103      	str	r3, [r0, #16]
 8005256:	dd16      	ble.n	8005286 <__s2b+0x72>
 8005258:	f104 0909 	add.w	r9, r4, #9
 800525c:	46c8      	mov	r8, r9
 800525e:	442c      	add	r4, r5
 8005260:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005264:	4601      	mov	r1, r0
 8005266:	3b30      	subs	r3, #48	; 0x30
 8005268:	220a      	movs	r2, #10
 800526a:	4630      	mov	r0, r6
 800526c:	f7ff ff8c 	bl	8005188 <__multadd>
 8005270:	45a0      	cmp	r8, r4
 8005272:	d1f5      	bne.n	8005260 <__s2b+0x4c>
 8005274:	f1a5 0408 	sub.w	r4, r5, #8
 8005278:	444c      	add	r4, r9
 800527a:	1b2d      	subs	r5, r5, r4
 800527c:	1963      	adds	r3, r4, r5
 800527e:	42bb      	cmp	r3, r7
 8005280:	db04      	blt.n	800528c <__s2b+0x78>
 8005282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005286:	340a      	adds	r4, #10
 8005288:	2509      	movs	r5, #9
 800528a:	e7f6      	b.n	800527a <__s2b+0x66>
 800528c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005290:	4601      	mov	r1, r0
 8005292:	3b30      	subs	r3, #48	; 0x30
 8005294:	220a      	movs	r2, #10
 8005296:	4630      	mov	r0, r6
 8005298:	f7ff ff76 	bl	8005188 <__multadd>
 800529c:	e7ee      	b.n	800527c <__s2b+0x68>
 800529e:	bf00      	nop
 80052a0:	08006e30 	.word	0x08006e30
 80052a4:	08006ebc 	.word	0x08006ebc

080052a8 <__hi0bits>:
 80052a8:	0c02      	lsrs	r2, r0, #16
 80052aa:	0412      	lsls	r2, r2, #16
 80052ac:	4603      	mov	r3, r0
 80052ae:	b9ca      	cbnz	r2, 80052e4 <__hi0bits+0x3c>
 80052b0:	0403      	lsls	r3, r0, #16
 80052b2:	2010      	movs	r0, #16
 80052b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80052b8:	bf04      	itt	eq
 80052ba:	021b      	lsleq	r3, r3, #8
 80052bc:	3008      	addeq	r0, #8
 80052be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80052c2:	bf04      	itt	eq
 80052c4:	011b      	lsleq	r3, r3, #4
 80052c6:	3004      	addeq	r0, #4
 80052c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80052cc:	bf04      	itt	eq
 80052ce:	009b      	lsleq	r3, r3, #2
 80052d0:	3002      	addeq	r0, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	db05      	blt.n	80052e2 <__hi0bits+0x3a>
 80052d6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80052da:	f100 0001 	add.w	r0, r0, #1
 80052de:	bf08      	it	eq
 80052e0:	2020      	moveq	r0, #32
 80052e2:	4770      	bx	lr
 80052e4:	2000      	movs	r0, #0
 80052e6:	e7e5      	b.n	80052b4 <__hi0bits+0xc>

080052e8 <__lo0bits>:
 80052e8:	6803      	ldr	r3, [r0, #0]
 80052ea:	4602      	mov	r2, r0
 80052ec:	f013 0007 	ands.w	r0, r3, #7
 80052f0:	d00b      	beq.n	800530a <__lo0bits+0x22>
 80052f2:	07d9      	lsls	r1, r3, #31
 80052f4:	d421      	bmi.n	800533a <__lo0bits+0x52>
 80052f6:	0798      	lsls	r0, r3, #30
 80052f8:	bf49      	itett	mi
 80052fa:	085b      	lsrmi	r3, r3, #1
 80052fc:	089b      	lsrpl	r3, r3, #2
 80052fe:	2001      	movmi	r0, #1
 8005300:	6013      	strmi	r3, [r2, #0]
 8005302:	bf5c      	itt	pl
 8005304:	6013      	strpl	r3, [r2, #0]
 8005306:	2002      	movpl	r0, #2
 8005308:	4770      	bx	lr
 800530a:	b299      	uxth	r1, r3
 800530c:	b909      	cbnz	r1, 8005312 <__lo0bits+0x2a>
 800530e:	0c1b      	lsrs	r3, r3, #16
 8005310:	2010      	movs	r0, #16
 8005312:	b2d9      	uxtb	r1, r3
 8005314:	b909      	cbnz	r1, 800531a <__lo0bits+0x32>
 8005316:	3008      	adds	r0, #8
 8005318:	0a1b      	lsrs	r3, r3, #8
 800531a:	0719      	lsls	r1, r3, #28
 800531c:	bf04      	itt	eq
 800531e:	091b      	lsreq	r3, r3, #4
 8005320:	3004      	addeq	r0, #4
 8005322:	0799      	lsls	r1, r3, #30
 8005324:	bf04      	itt	eq
 8005326:	089b      	lsreq	r3, r3, #2
 8005328:	3002      	addeq	r0, #2
 800532a:	07d9      	lsls	r1, r3, #31
 800532c:	d403      	bmi.n	8005336 <__lo0bits+0x4e>
 800532e:	085b      	lsrs	r3, r3, #1
 8005330:	f100 0001 	add.w	r0, r0, #1
 8005334:	d003      	beq.n	800533e <__lo0bits+0x56>
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	4770      	bx	lr
 800533a:	2000      	movs	r0, #0
 800533c:	4770      	bx	lr
 800533e:	2020      	movs	r0, #32
 8005340:	4770      	bx	lr
	...

08005344 <__i2b>:
 8005344:	b510      	push	{r4, lr}
 8005346:	460c      	mov	r4, r1
 8005348:	2101      	movs	r1, #1
 800534a:	f7ff febb 	bl	80050c4 <_Balloc>
 800534e:	4602      	mov	r2, r0
 8005350:	b928      	cbnz	r0, 800535e <__i2b+0x1a>
 8005352:	4b05      	ldr	r3, [pc, #20]	; (8005368 <__i2b+0x24>)
 8005354:	4805      	ldr	r0, [pc, #20]	; (800536c <__i2b+0x28>)
 8005356:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800535a:	f000 fded 	bl	8005f38 <__assert_func>
 800535e:	2301      	movs	r3, #1
 8005360:	6144      	str	r4, [r0, #20]
 8005362:	6103      	str	r3, [r0, #16]
 8005364:	bd10      	pop	{r4, pc}
 8005366:	bf00      	nop
 8005368:	08006e30 	.word	0x08006e30
 800536c:	08006ebc 	.word	0x08006ebc

08005370 <__multiply>:
 8005370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005374:	4691      	mov	r9, r2
 8005376:	690a      	ldr	r2, [r1, #16]
 8005378:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800537c:	429a      	cmp	r2, r3
 800537e:	bfb8      	it	lt
 8005380:	460b      	movlt	r3, r1
 8005382:	460c      	mov	r4, r1
 8005384:	bfbc      	itt	lt
 8005386:	464c      	movlt	r4, r9
 8005388:	4699      	movlt	r9, r3
 800538a:	6927      	ldr	r7, [r4, #16]
 800538c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005390:	68a3      	ldr	r3, [r4, #8]
 8005392:	6861      	ldr	r1, [r4, #4]
 8005394:	eb07 060a 	add.w	r6, r7, sl
 8005398:	42b3      	cmp	r3, r6
 800539a:	b085      	sub	sp, #20
 800539c:	bfb8      	it	lt
 800539e:	3101      	addlt	r1, #1
 80053a0:	f7ff fe90 	bl	80050c4 <_Balloc>
 80053a4:	b930      	cbnz	r0, 80053b4 <__multiply+0x44>
 80053a6:	4602      	mov	r2, r0
 80053a8:	4b43      	ldr	r3, [pc, #268]	; (80054b8 <__multiply+0x148>)
 80053aa:	4844      	ldr	r0, [pc, #272]	; (80054bc <__multiply+0x14c>)
 80053ac:	f240 115d 	movw	r1, #349	; 0x15d
 80053b0:	f000 fdc2 	bl	8005f38 <__assert_func>
 80053b4:	f100 0514 	add.w	r5, r0, #20
 80053b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80053bc:	462b      	mov	r3, r5
 80053be:	2200      	movs	r2, #0
 80053c0:	4543      	cmp	r3, r8
 80053c2:	d321      	bcc.n	8005408 <__multiply+0x98>
 80053c4:	f104 0314 	add.w	r3, r4, #20
 80053c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80053cc:	f109 0314 	add.w	r3, r9, #20
 80053d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80053d4:	9202      	str	r2, [sp, #8]
 80053d6:	1b3a      	subs	r2, r7, r4
 80053d8:	3a15      	subs	r2, #21
 80053da:	f022 0203 	bic.w	r2, r2, #3
 80053de:	3204      	adds	r2, #4
 80053e0:	f104 0115 	add.w	r1, r4, #21
 80053e4:	428f      	cmp	r7, r1
 80053e6:	bf38      	it	cc
 80053e8:	2204      	movcc	r2, #4
 80053ea:	9201      	str	r2, [sp, #4]
 80053ec:	9a02      	ldr	r2, [sp, #8]
 80053ee:	9303      	str	r3, [sp, #12]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d80c      	bhi.n	800540e <__multiply+0x9e>
 80053f4:	2e00      	cmp	r6, #0
 80053f6:	dd03      	ble.n	8005400 <__multiply+0x90>
 80053f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d059      	beq.n	80054b4 <__multiply+0x144>
 8005400:	6106      	str	r6, [r0, #16]
 8005402:	b005      	add	sp, #20
 8005404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005408:	f843 2b04 	str.w	r2, [r3], #4
 800540c:	e7d8      	b.n	80053c0 <__multiply+0x50>
 800540e:	f8b3 a000 	ldrh.w	sl, [r3]
 8005412:	f1ba 0f00 	cmp.w	sl, #0
 8005416:	d023      	beq.n	8005460 <__multiply+0xf0>
 8005418:	f104 0e14 	add.w	lr, r4, #20
 800541c:	46a9      	mov	r9, r5
 800541e:	f04f 0c00 	mov.w	ip, #0
 8005422:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005426:	f8d9 1000 	ldr.w	r1, [r9]
 800542a:	fa1f fb82 	uxth.w	fp, r2
 800542e:	b289      	uxth	r1, r1
 8005430:	fb0a 110b 	mla	r1, sl, fp, r1
 8005434:	4461      	add	r1, ip
 8005436:	f8d9 c000 	ldr.w	ip, [r9]
 800543a:	0c12      	lsrs	r2, r2, #16
 800543c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005440:	fb0a c202 	mla	r2, sl, r2, ip
 8005444:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005448:	b289      	uxth	r1, r1
 800544a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800544e:	4577      	cmp	r7, lr
 8005450:	f849 1b04 	str.w	r1, [r9], #4
 8005454:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005458:	d8e3      	bhi.n	8005422 <__multiply+0xb2>
 800545a:	9a01      	ldr	r2, [sp, #4]
 800545c:	f845 c002 	str.w	ip, [r5, r2]
 8005460:	9a03      	ldr	r2, [sp, #12]
 8005462:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005466:	3304      	adds	r3, #4
 8005468:	f1b9 0f00 	cmp.w	r9, #0
 800546c:	d020      	beq.n	80054b0 <__multiply+0x140>
 800546e:	6829      	ldr	r1, [r5, #0]
 8005470:	f104 0c14 	add.w	ip, r4, #20
 8005474:	46ae      	mov	lr, r5
 8005476:	f04f 0a00 	mov.w	sl, #0
 800547a:	f8bc b000 	ldrh.w	fp, [ip]
 800547e:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005482:	fb09 220b 	mla	r2, r9, fp, r2
 8005486:	4492      	add	sl, r2
 8005488:	b289      	uxth	r1, r1
 800548a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800548e:	f84e 1b04 	str.w	r1, [lr], #4
 8005492:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005496:	f8be 1000 	ldrh.w	r1, [lr]
 800549a:	0c12      	lsrs	r2, r2, #16
 800549c:	fb09 1102 	mla	r1, r9, r2, r1
 80054a0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80054a4:	4567      	cmp	r7, ip
 80054a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80054aa:	d8e6      	bhi.n	800547a <__multiply+0x10a>
 80054ac:	9a01      	ldr	r2, [sp, #4]
 80054ae:	50a9      	str	r1, [r5, r2]
 80054b0:	3504      	adds	r5, #4
 80054b2:	e79b      	b.n	80053ec <__multiply+0x7c>
 80054b4:	3e01      	subs	r6, #1
 80054b6:	e79d      	b.n	80053f4 <__multiply+0x84>
 80054b8:	08006e30 	.word	0x08006e30
 80054bc:	08006ebc 	.word	0x08006ebc

080054c0 <__pow5mult>:
 80054c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054c4:	4615      	mov	r5, r2
 80054c6:	f012 0203 	ands.w	r2, r2, #3
 80054ca:	4606      	mov	r6, r0
 80054cc:	460f      	mov	r7, r1
 80054ce:	d007      	beq.n	80054e0 <__pow5mult+0x20>
 80054d0:	4c25      	ldr	r4, [pc, #148]	; (8005568 <__pow5mult+0xa8>)
 80054d2:	3a01      	subs	r2, #1
 80054d4:	2300      	movs	r3, #0
 80054d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80054da:	f7ff fe55 	bl	8005188 <__multadd>
 80054de:	4607      	mov	r7, r0
 80054e0:	10ad      	asrs	r5, r5, #2
 80054e2:	d03d      	beq.n	8005560 <__pow5mult+0xa0>
 80054e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80054e6:	b97c      	cbnz	r4, 8005508 <__pow5mult+0x48>
 80054e8:	2010      	movs	r0, #16
 80054ea:	f7ff fdc3 	bl	8005074 <malloc>
 80054ee:	4602      	mov	r2, r0
 80054f0:	6270      	str	r0, [r6, #36]	; 0x24
 80054f2:	b928      	cbnz	r0, 8005500 <__pow5mult+0x40>
 80054f4:	4b1d      	ldr	r3, [pc, #116]	; (800556c <__pow5mult+0xac>)
 80054f6:	481e      	ldr	r0, [pc, #120]	; (8005570 <__pow5mult+0xb0>)
 80054f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80054fc:	f000 fd1c 	bl	8005f38 <__assert_func>
 8005500:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005504:	6004      	str	r4, [r0, #0]
 8005506:	60c4      	str	r4, [r0, #12]
 8005508:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800550c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005510:	b94c      	cbnz	r4, 8005526 <__pow5mult+0x66>
 8005512:	f240 2171 	movw	r1, #625	; 0x271
 8005516:	4630      	mov	r0, r6
 8005518:	f7ff ff14 	bl	8005344 <__i2b>
 800551c:	2300      	movs	r3, #0
 800551e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005522:	4604      	mov	r4, r0
 8005524:	6003      	str	r3, [r0, #0]
 8005526:	f04f 0900 	mov.w	r9, #0
 800552a:	07eb      	lsls	r3, r5, #31
 800552c:	d50a      	bpl.n	8005544 <__pow5mult+0x84>
 800552e:	4639      	mov	r1, r7
 8005530:	4622      	mov	r2, r4
 8005532:	4630      	mov	r0, r6
 8005534:	f7ff ff1c 	bl	8005370 <__multiply>
 8005538:	4639      	mov	r1, r7
 800553a:	4680      	mov	r8, r0
 800553c:	4630      	mov	r0, r6
 800553e:	f7ff fe01 	bl	8005144 <_Bfree>
 8005542:	4647      	mov	r7, r8
 8005544:	106d      	asrs	r5, r5, #1
 8005546:	d00b      	beq.n	8005560 <__pow5mult+0xa0>
 8005548:	6820      	ldr	r0, [r4, #0]
 800554a:	b938      	cbnz	r0, 800555c <__pow5mult+0x9c>
 800554c:	4622      	mov	r2, r4
 800554e:	4621      	mov	r1, r4
 8005550:	4630      	mov	r0, r6
 8005552:	f7ff ff0d 	bl	8005370 <__multiply>
 8005556:	6020      	str	r0, [r4, #0]
 8005558:	f8c0 9000 	str.w	r9, [r0]
 800555c:	4604      	mov	r4, r0
 800555e:	e7e4      	b.n	800552a <__pow5mult+0x6a>
 8005560:	4638      	mov	r0, r7
 8005562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005566:	bf00      	nop
 8005568:	08007008 	.word	0x08007008
 800556c:	08006dbe 	.word	0x08006dbe
 8005570:	08006ebc 	.word	0x08006ebc

08005574 <__lshift>:
 8005574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005578:	460c      	mov	r4, r1
 800557a:	6849      	ldr	r1, [r1, #4]
 800557c:	6923      	ldr	r3, [r4, #16]
 800557e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005582:	68a3      	ldr	r3, [r4, #8]
 8005584:	4607      	mov	r7, r0
 8005586:	4691      	mov	r9, r2
 8005588:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800558c:	f108 0601 	add.w	r6, r8, #1
 8005590:	42b3      	cmp	r3, r6
 8005592:	db0b      	blt.n	80055ac <__lshift+0x38>
 8005594:	4638      	mov	r0, r7
 8005596:	f7ff fd95 	bl	80050c4 <_Balloc>
 800559a:	4605      	mov	r5, r0
 800559c:	b948      	cbnz	r0, 80055b2 <__lshift+0x3e>
 800559e:	4602      	mov	r2, r0
 80055a0:	4b2a      	ldr	r3, [pc, #168]	; (800564c <__lshift+0xd8>)
 80055a2:	482b      	ldr	r0, [pc, #172]	; (8005650 <__lshift+0xdc>)
 80055a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80055a8:	f000 fcc6 	bl	8005f38 <__assert_func>
 80055ac:	3101      	adds	r1, #1
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	e7ee      	b.n	8005590 <__lshift+0x1c>
 80055b2:	2300      	movs	r3, #0
 80055b4:	f100 0114 	add.w	r1, r0, #20
 80055b8:	f100 0210 	add.w	r2, r0, #16
 80055bc:	4618      	mov	r0, r3
 80055be:	4553      	cmp	r3, sl
 80055c0:	db37      	blt.n	8005632 <__lshift+0xbe>
 80055c2:	6920      	ldr	r0, [r4, #16]
 80055c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80055c8:	f104 0314 	add.w	r3, r4, #20
 80055cc:	f019 091f 	ands.w	r9, r9, #31
 80055d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80055d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80055d8:	d02f      	beq.n	800563a <__lshift+0xc6>
 80055da:	f1c9 0e20 	rsb	lr, r9, #32
 80055de:	468a      	mov	sl, r1
 80055e0:	f04f 0c00 	mov.w	ip, #0
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	fa02 f209 	lsl.w	r2, r2, r9
 80055ea:	ea42 020c 	orr.w	r2, r2, ip
 80055ee:	f84a 2b04 	str.w	r2, [sl], #4
 80055f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80055f6:	4298      	cmp	r0, r3
 80055f8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80055fc:	d8f2      	bhi.n	80055e4 <__lshift+0x70>
 80055fe:	1b03      	subs	r3, r0, r4
 8005600:	3b15      	subs	r3, #21
 8005602:	f023 0303 	bic.w	r3, r3, #3
 8005606:	3304      	adds	r3, #4
 8005608:	f104 0215 	add.w	r2, r4, #21
 800560c:	4290      	cmp	r0, r2
 800560e:	bf38      	it	cc
 8005610:	2304      	movcc	r3, #4
 8005612:	f841 c003 	str.w	ip, [r1, r3]
 8005616:	f1bc 0f00 	cmp.w	ip, #0
 800561a:	d001      	beq.n	8005620 <__lshift+0xac>
 800561c:	f108 0602 	add.w	r6, r8, #2
 8005620:	3e01      	subs	r6, #1
 8005622:	4638      	mov	r0, r7
 8005624:	612e      	str	r6, [r5, #16]
 8005626:	4621      	mov	r1, r4
 8005628:	f7ff fd8c 	bl	8005144 <_Bfree>
 800562c:	4628      	mov	r0, r5
 800562e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005632:	f842 0f04 	str.w	r0, [r2, #4]!
 8005636:	3301      	adds	r3, #1
 8005638:	e7c1      	b.n	80055be <__lshift+0x4a>
 800563a:	3904      	subs	r1, #4
 800563c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005640:	f841 2f04 	str.w	r2, [r1, #4]!
 8005644:	4298      	cmp	r0, r3
 8005646:	d8f9      	bhi.n	800563c <__lshift+0xc8>
 8005648:	e7ea      	b.n	8005620 <__lshift+0xac>
 800564a:	bf00      	nop
 800564c:	08006e30 	.word	0x08006e30
 8005650:	08006ebc 	.word	0x08006ebc

08005654 <__mcmp>:
 8005654:	690a      	ldr	r2, [r1, #16]
 8005656:	4603      	mov	r3, r0
 8005658:	6900      	ldr	r0, [r0, #16]
 800565a:	1a80      	subs	r0, r0, r2
 800565c:	b530      	push	{r4, r5, lr}
 800565e:	d10d      	bne.n	800567c <__mcmp+0x28>
 8005660:	3314      	adds	r3, #20
 8005662:	3114      	adds	r1, #20
 8005664:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005668:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800566c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005670:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005674:	4295      	cmp	r5, r2
 8005676:	d002      	beq.n	800567e <__mcmp+0x2a>
 8005678:	d304      	bcc.n	8005684 <__mcmp+0x30>
 800567a:	2001      	movs	r0, #1
 800567c:	bd30      	pop	{r4, r5, pc}
 800567e:	42a3      	cmp	r3, r4
 8005680:	d3f4      	bcc.n	800566c <__mcmp+0x18>
 8005682:	e7fb      	b.n	800567c <__mcmp+0x28>
 8005684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005688:	e7f8      	b.n	800567c <__mcmp+0x28>
	...

0800568c <__mdiff>:
 800568c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005690:	460d      	mov	r5, r1
 8005692:	4607      	mov	r7, r0
 8005694:	4611      	mov	r1, r2
 8005696:	4628      	mov	r0, r5
 8005698:	4614      	mov	r4, r2
 800569a:	f7ff ffdb 	bl	8005654 <__mcmp>
 800569e:	1e06      	subs	r6, r0, #0
 80056a0:	d111      	bne.n	80056c6 <__mdiff+0x3a>
 80056a2:	4631      	mov	r1, r6
 80056a4:	4638      	mov	r0, r7
 80056a6:	f7ff fd0d 	bl	80050c4 <_Balloc>
 80056aa:	4602      	mov	r2, r0
 80056ac:	b928      	cbnz	r0, 80056ba <__mdiff+0x2e>
 80056ae:	4b39      	ldr	r3, [pc, #228]	; (8005794 <__mdiff+0x108>)
 80056b0:	f240 2132 	movw	r1, #562	; 0x232
 80056b4:	4838      	ldr	r0, [pc, #224]	; (8005798 <__mdiff+0x10c>)
 80056b6:	f000 fc3f 	bl	8005f38 <__assert_func>
 80056ba:	2301      	movs	r3, #1
 80056bc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80056c0:	4610      	mov	r0, r2
 80056c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c6:	bfa4      	itt	ge
 80056c8:	4623      	movge	r3, r4
 80056ca:	462c      	movge	r4, r5
 80056cc:	4638      	mov	r0, r7
 80056ce:	6861      	ldr	r1, [r4, #4]
 80056d0:	bfa6      	itte	ge
 80056d2:	461d      	movge	r5, r3
 80056d4:	2600      	movge	r6, #0
 80056d6:	2601      	movlt	r6, #1
 80056d8:	f7ff fcf4 	bl	80050c4 <_Balloc>
 80056dc:	4602      	mov	r2, r0
 80056de:	b918      	cbnz	r0, 80056e8 <__mdiff+0x5c>
 80056e0:	4b2c      	ldr	r3, [pc, #176]	; (8005794 <__mdiff+0x108>)
 80056e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80056e6:	e7e5      	b.n	80056b4 <__mdiff+0x28>
 80056e8:	6927      	ldr	r7, [r4, #16]
 80056ea:	60c6      	str	r6, [r0, #12]
 80056ec:	692e      	ldr	r6, [r5, #16]
 80056ee:	f104 0014 	add.w	r0, r4, #20
 80056f2:	f105 0914 	add.w	r9, r5, #20
 80056f6:	f102 0e14 	add.w	lr, r2, #20
 80056fa:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 80056fe:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005702:	3410      	adds	r4, #16
 8005704:	46f2      	mov	sl, lr
 8005706:	2100      	movs	r1, #0
 8005708:	f859 3b04 	ldr.w	r3, [r9], #4
 800570c:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005710:	fa1f f883 	uxth.w	r8, r3
 8005714:	fa11 f18b 	uxtah	r1, r1, fp
 8005718:	0c1b      	lsrs	r3, r3, #16
 800571a:	eba1 0808 	sub.w	r8, r1, r8
 800571e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005722:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005726:	fa1f f888 	uxth.w	r8, r8
 800572a:	1419      	asrs	r1, r3, #16
 800572c:	454e      	cmp	r6, r9
 800572e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005732:	f84a 3b04 	str.w	r3, [sl], #4
 8005736:	d8e7      	bhi.n	8005708 <__mdiff+0x7c>
 8005738:	1b73      	subs	r3, r6, r5
 800573a:	3b15      	subs	r3, #21
 800573c:	f023 0303 	bic.w	r3, r3, #3
 8005740:	3304      	adds	r3, #4
 8005742:	3515      	adds	r5, #21
 8005744:	42ae      	cmp	r6, r5
 8005746:	bf38      	it	cc
 8005748:	2304      	movcc	r3, #4
 800574a:	4418      	add	r0, r3
 800574c:	4473      	add	r3, lr
 800574e:	469e      	mov	lr, r3
 8005750:	4606      	mov	r6, r0
 8005752:	4566      	cmp	r6, ip
 8005754:	d30e      	bcc.n	8005774 <__mdiff+0xe8>
 8005756:	f10c 0103 	add.w	r1, ip, #3
 800575a:	1a09      	subs	r1, r1, r0
 800575c:	f021 0103 	bic.w	r1, r1, #3
 8005760:	3803      	subs	r0, #3
 8005762:	4584      	cmp	ip, r0
 8005764:	bf38      	it	cc
 8005766:	2100      	movcc	r1, #0
 8005768:	4419      	add	r1, r3
 800576a:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800576e:	b17b      	cbz	r3, 8005790 <__mdiff+0x104>
 8005770:	6117      	str	r7, [r2, #16]
 8005772:	e7a5      	b.n	80056c0 <__mdiff+0x34>
 8005774:	f856 8b04 	ldr.w	r8, [r6], #4
 8005778:	fa11 f488 	uxtah	r4, r1, r8
 800577c:	1425      	asrs	r5, r4, #16
 800577e:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 8005782:	b2a4      	uxth	r4, r4
 8005784:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8005788:	f84e 4b04 	str.w	r4, [lr], #4
 800578c:	1429      	asrs	r1, r5, #16
 800578e:	e7e0      	b.n	8005752 <__mdiff+0xc6>
 8005790:	3f01      	subs	r7, #1
 8005792:	e7ea      	b.n	800576a <__mdiff+0xde>
 8005794:	08006e30 	.word	0x08006e30
 8005798:	08006ebc 	.word	0x08006ebc

0800579c <__ulp>:
 800579c:	4b11      	ldr	r3, [pc, #68]	; (80057e4 <__ulp+0x48>)
 800579e:	400b      	ands	r3, r1
 80057a0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	dd02      	ble.n	80057ae <__ulp+0x12>
 80057a8:	2000      	movs	r0, #0
 80057aa:	4619      	mov	r1, r3
 80057ac:	4770      	bx	lr
 80057ae:	425b      	negs	r3, r3
 80057b0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80057b4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80057b8:	f04f 0000 	mov.w	r0, #0
 80057bc:	f04f 0100 	mov.w	r1, #0
 80057c0:	da04      	bge.n	80057cc <__ulp+0x30>
 80057c2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80057c6:	fa43 f102 	asr.w	r1, r3, r2
 80057ca:	4770      	bx	lr
 80057cc:	f1a2 0314 	sub.w	r3, r2, #20
 80057d0:	2b1e      	cmp	r3, #30
 80057d2:	bfda      	itte	le
 80057d4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80057d8:	fa22 f303 	lsrle.w	r3, r2, r3
 80057dc:	2301      	movgt	r3, #1
 80057de:	4618      	mov	r0, r3
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	7ff00000 	.word	0x7ff00000

080057e8 <__b2d>:
 80057e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057ec:	6907      	ldr	r7, [r0, #16]
 80057ee:	f100 0914 	add.w	r9, r0, #20
 80057f2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80057f6:	f1a7 0804 	sub.w	r8, r7, #4
 80057fa:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80057fe:	4630      	mov	r0, r6
 8005800:	f7ff fd52 	bl	80052a8 <__hi0bits>
 8005804:	f1c0 0320 	rsb	r3, r0, #32
 8005808:	280a      	cmp	r0, #10
 800580a:	600b      	str	r3, [r1, #0]
 800580c:	491f      	ldr	r1, [pc, #124]	; (800588c <__b2d+0xa4>)
 800580e:	dc17      	bgt.n	8005840 <__b2d+0x58>
 8005810:	f1c0 0c0b 	rsb	ip, r0, #11
 8005814:	45c1      	cmp	r9, r8
 8005816:	fa26 f30c 	lsr.w	r3, r6, ip
 800581a:	bf38      	it	cc
 800581c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8005820:	ea43 0501 	orr.w	r5, r3, r1
 8005824:	bf28      	it	cs
 8005826:	2200      	movcs	r2, #0
 8005828:	f100 0315 	add.w	r3, r0, #21
 800582c:	fa06 f303 	lsl.w	r3, r6, r3
 8005830:	fa22 f20c 	lsr.w	r2, r2, ip
 8005834:	ea43 0402 	orr.w	r4, r3, r2
 8005838:	4620      	mov	r0, r4
 800583a:	4629      	mov	r1, r5
 800583c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005840:	45c1      	cmp	r9, r8
 8005842:	bf3a      	itte	cc
 8005844:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8005848:	f1a7 0808 	subcc.w	r8, r7, #8
 800584c:	2200      	movcs	r2, #0
 800584e:	f1b0 030b 	subs.w	r3, r0, #11
 8005852:	d016      	beq.n	8005882 <__b2d+0x9a>
 8005854:	f1c3 0720 	rsb	r7, r3, #32
 8005858:	fa22 f107 	lsr.w	r1, r2, r7
 800585c:	45c8      	cmp	r8, r9
 800585e:	fa06 f603 	lsl.w	r6, r6, r3
 8005862:	ea46 0601 	orr.w	r6, r6, r1
 8005866:	bf8c      	ite	hi
 8005868:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800586c:	2100      	movls	r1, #0
 800586e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8005872:	fa02 f003 	lsl.w	r0, r2, r3
 8005876:	40f9      	lsrs	r1, r7
 8005878:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800587c:	ea40 0401 	orr.w	r4, r0, r1
 8005880:	e7da      	b.n	8005838 <__b2d+0x50>
 8005882:	ea46 0501 	orr.w	r5, r6, r1
 8005886:	4614      	mov	r4, r2
 8005888:	e7d6      	b.n	8005838 <__b2d+0x50>
 800588a:	bf00      	nop
 800588c:	3ff00000 	.word	0x3ff00000

08005890 <__d2b>:
 8005890:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005894:	2101      	movs	r1, #1
 8005896:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800589a:	4690      	mov	r8, r2
 800589c:	461d      	mov	r5, r3
 800589e:	f7ff fc11 	bl	80050c4 <_Balloc>
 80058a2:	4604      	mov	r4, r0
 80058a4:	b930      	cbnz	r0, 80058b4 <__d2b+0x24>
 80058a6:	4602      	mov	r2, r0
 80058a8:	4b25      	ldr	r3, [pc, #148]	; (8005940 <__d2b+0xb0>)
 80058aa:	4826      	ldr	r0, [pc, #152]	; (8005944 <__d2b+0xb4>)
 80058ac:	f240 310a 	movw	r1, #778	; 0x30a
 80058b0:	f000 fb42 	bl	8005f38 <__assert_func>
 80058b4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80058b8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80058bc:	bb2d      	cbnz	r5, 800590a <__d2b+0x7a>
 80058be:	9301      	str	r3, [sp, #4]
 80058c0:	f1b8 0300 	subs.w	r3, r8, #0
 80058c4:	d026      	beq.n	8005914 <__d2b+0x84>
 80058c6:	4668      	mov	r0, sp
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	f7ff fd0d 	bl	80052e8 <__lo0bits>
 80058ce:	9900      	ldr	r1, [sp, #0]
 80058d0:	b1f0      	cbz	r0, 8005910 <__d2b+0x80>
 80058d2:	9a01      	ldr	r2, [sp, #4]
 80058d4:	f1c0 0320 	rsb	r3, r0, #32
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	430b      	orrs	r3, r1
 80058de:	40c2      	lsrs	r2, r0
 80058e0:	6163      	str	r3, [r4, #20]
 80058e2:	9201      	str	r2, [sp, #4]
 80058e4:	9b01      	ldr	r3, [sp, #4]
 80058e6:	61a3      	str	r3, [r4, #24]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	bf14      	ite	ne
 80058ec:	2102      	movne	r1, #2
 80058ee:	2101      	moveq	r1, #1
 80058f0:	6121      	str	r1, [r4, #16]
 80058f2:	b1c5      	cbz	r5, 8005926 <__d2b+0x96>
 80058f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80058f8:	4405      	add	r5, r0
 80058fa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80058fe:	603d      	str	r5, [r7, #0]
 8005900:	6030      	str	r0, [r6, #0]
 8005902:	4620      	mov	r0, r4
 8005904:	b002      	add	sp, #8
 8005906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800590a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800590e:	e7d6      	b.n	80058be <__d2b+0x2e>
 8005910:	6161      	str	r1, [r4, #20]
 8005912:	e7e7      	b.n	80058e4 <__d2b+0x54>
 8005914:	a801      	add	r0, sp, #4
 8005916:	f7ff fce7 	bl	80052e8 <__lo0bits>
 800591a:	9b01      	ldr	r3, [sp, #4]
 800591c:	6163      	str	r3, [r4, #20]
 800591e:	2101      	movs	r1, #1
 8005920:	6121      	str	r1, [r4, #16]
 8005922:	3020      	adds	r0, #32
 8005924:	e7e5      	b.n	80058f2 <__d2b+0x62>
 8005926:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800592a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800592e:	6038      	str	r0, [r7, #0]
 8005930:	6918      	ldr	r0, [r3, #16]
 8005932:	f7ff fcb9 	bl	80052a8 <__hi0bits>
 8005936:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800593a:	6031      	str	r1, [r6, #0]
 800593c:	e7e1      	b.n	8005902 <__d2b+0x72>
 800593e:	bf00      	nop
 8005940:	08006e30 	.word	0x08006e30
 8005944:	08006ebc 	.word	0x08006ebc

08005948 <__ratio>:
 8005948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800594c:	4688      	mov	r8, r1
 800594e:	4669      	mov	r1, sp
 8005950:	4681      	mov	r9, r0
 8005952:	f7ff ff49 	bl	80057e8 <__b2d>
 8005956:	460f      	mov	r7, r1
 8005958:	4604      	mov	r4, r0
 800595a:	460d      	mov	r5, r1
 800595c:	4640      	mov	r0, r8
 800595e:	a901      	add	r1, sp, #4
 8005960:	f7ff ff42 	bl	80057e8 <__b2d>
 8005964:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005968:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800596c:	eba3 0c02 	sub.w	ip, r3, r2
 8005970:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005974:	1a9b      	subs	r3, r3, r2
 8005976:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800597a:	2b00      	cmp	r3, #0
 800597c:	bfd5      	itete	le
 800597e:	460a      	movle	r2, r1
 8005980:	462a      	movgt	r2, r5
 8005982:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005986:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800598a:	468b      	mov	fp, r1
 800598c:	bfd8      	it	le
 800598e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8005992:	465b      	mov	r3, fp
 8005994:	4602      	mov	r2, r0
 8005996:	4639      	mov	r1, r7
 8005998:	4620      	mov	r0, r4
 800599a:	f7fa ff5f 	bl	800085c <__aeabi_ddiv>
 800599e:	b003      	add	sp, #12
 80059a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080059a4 <__copybits>:
 80059a4:	3901      	subs	r1, #1
 80059a6:	b570      	push	{r4, r5, r6, lr}
 80059a8:	1149      	asrs	r1, r1, #5
 80059aa:	6914      	ldr	r4, [r2, #16]
 80059ac:	3101      	adds	r1, #1
 80059ae:	f102 0314 	add.w	r3, r2, #20
 80059b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80059b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80059ba:	1f05      	subs	r5, r0, #4
 80059bc:	42a3      	cmp	r3, r4
 80059be:	d30c      	bcc.n	80059da <__copybits+0x36>
 80059c0:	1aa3      	subs	r3, r4, r2
 80059c2:	3b11      	subs	r3, #17
 80059c4:	f023 0303 	bic.w	r3, r3, #3
 80059c8:	3211      	adds	r2, #17
 80059ca:	42a2      	cmp	r2, r4
 80059cc:	bf88      	it	hi
 80059ce:	2300      	movhi	r3, #0
 80059d0:	4418      	add	r0, r3
 80059d2:	2300      	movs	r3, #0
 80059d4:	4288      	cmp	r0, r1
 80059d6:	d305      	bcc.n	80059e4 <__copybits+0x40>
 80059d8:	bd70      	pop	{r4, r5, r6, pc}
 80059da:	f853 6b04 	ldr.w	r6, [r3], #4
 80059de:	f845 6f04 	str.w	r6, [r5, #4]!
 80059e2:	e7eb      	b.n	80059bc <__copybits+0x18>
 80059e4:	f840 3b04 	str.w	r3, [r0], #4
 80059e8:	e7f4      	b.n	80059d4 <__copybits+0x30>

080059ea <__any_on>:
 80059ea:	f100 0214 	add.w	r2, r0, #20
 80059ee:	6900      	ldr	r0, [r0, #16]
 80059f0:	114b      	asrs	r3, r1, #5
 80059f2:	4298      	cmp	r0, r3
 80059f4:	b510      	push	{r4, lr}
 80059f6:	db11      	blt.n	8005a1c <__any_on+0x32>
 80059f8:	dd0a      	ble.n	8005a10 <__any_on+0x26>
 80059fa:	f011 011f 	ands.w	r1, r1, #31
 80059fe:	d007      	beq.n	8005a10 <__any_on+0x26>
 8005a00:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005a04:	fa24 f001 	lsr.w	r0, r4, r1
 8005a08:	fa00 f101 	lsl.w	r1, r0, r1
 8005a0c:	428c      	cmp	r4, r1
 8005a0e:	d10b      	bne.n	8005a28 <__any_on+0x3e>
 8005a10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d803      	bhi.n	8005a20 <__any_on+0x36>
 8005a18:	2000      	movs	r0, #0
 8005a1a:	bd10      	pop	{r4, pc}
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	e7f7      	b.n	8005a10 <__any_on+0x26>
 8005a20:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005a24:	2900      	cmp	r1, #0
 8005a26:	d0f5      	beq.n	8005a14 <__any_on+0x2a>
 8005a28:	2001      	movs	r0, #1
 8005a2a:	e7f6      	b.n	8005a1a <__any_on+0x30>

08005a2c <_calloc_r>:
 8005a2c:	b570      	push	{r4, r5, r6, lr}
 8005a2e:	fba1 5402 	umull	r5, r4, r1, r2
 8005a32:	b934      	cbnz	r4, 8005a42 <_calloc_r+0x16>
 8005a34:	4629      	mov	r1, r5
 8005a36:	f000 f877 	bl	8005b28 <_malloc_r>
 8005a3a:	4606      	mov	r6, r0
 8005a3c:	b928      	cbnz	r0, 8005a4a <_calloc_r+0x1e>
 8005a3e:	4630      	mov	r0, r6
 8005a40:	bd70      	pop	{r4, r5, r6, pc}
 8005a42:	220c      	movs	r2, #12
 8005a44:	6002      	str	r2, [r0, #0]
 8005a46:	2600      	movs	r6, #0
 8005a48:	e7f9      	b.n	8005a3e <_calloc_r+0x12>
 8005a4a:	462a      	mov	r2, r5
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	f7fc fc09 	bl	8002264 <memset>
 8005a52:	e7f4      	b.n	8005a3e <_calloc_r+0x12>

08005a54 <_free_r>:
 8005a54:	b538      	push	{r3, r4, r5, lr}
 8005a56:	4605      	mov	r5, r0
 8005a58:	2900      	cmp	r1, #0
 8005a5a:	d041      	beq.n	8005ae0 <_free_r+0x8c>
 8005a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a60:	1f0c      	subs	r4, r1, #4
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	bfb8      	it	lt
 8005a66:	18e4      	addlt	r4, r4, r3
 8005a68:	f000 fab0 	bl	8005fcc <__malloc_lock>
 8005a6c:	4a1d      	ldr	r2, [pc, #116]	; (8005ae4 <_free_r+0x90>)
 8005a6e:	6813      	ldr	r3, [r2, #0]
 8005a70:	b933      	cbnz	r3, 8005a80 <_free_r+0x2c>
 8005a72:	6063      	str	r3, [r4, #4]
 8005a74:	6014      	str	r4, [r2, #0]
 8005a76:	4628      	mov	r0, r5
 8005a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a7c:	f000 baac 	b.w	8005fd8 <__malloc_unlock>
 8005a80:	42a3      	cmp	r3, r4
 8005a82:	d908      	bls.n	8005a96 <_free_r+0x42>
 8005a84:	6820      	ldr	r0, [r4, #0]
 8005a86:	1821      	adds	r1, r4, r0
 8005a88:	428b      	cmp	r3, r1
 8005a8a:	bf01      	itttt	eq
 8005a8c:	6819      	ldreq	r1, [r3, #0]
 8005a8e:	685b      	ldreq	r3, [r3, #4]
 8005a90:	1809      	addeq	r1, r1, r0
 8005a92:	6021      	streq	r1, [r4, #0]
 8005a94:	e7ed      	b.n	8005a72 <_free_r+0x1e>
 8005a96:	461a      	mov	r2, r3
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	b10b      	cbz	r3, 8005aa0 <_free_r+0x4c>
 8005a9c:	42a3      	cmp	r3, r4
 8005a9e:	d9fa      	bls.n	8005a96 <_free_r+0x42>
 8005aa0:	6811      	ldr	r1, [r2, #0]
 8005aa2:	1850      	adds	r0, r2, r1
 8005aa4:	42a0      	cmp	r0, r4
 8005aa6:	d10b      	bne.n	8005ac0 <_free_r+0x6c>
 8005aa8:	6820      	ldr	r0, [r4, #0]
 8005aaa:	4401      	add	r1, r0
 8005aac:	1850      	adds	r0, r2, r1
 8005aae:	4283      	cmp	r3, r0
 8005ab0:	6011      	str	r1, [r2, #0]
 8005ab2:	d1e0      	bne.n	8005a76 <_free_r+0x22>
 8005ab4:	6818      	ldr	r0, [r3, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	6053      	str	r3, [r2, #4]
 8005aba:	4401      	add	r1, r0
 8005abc:	6011      	str	r1, [r2, #0]
 8005abe:	e7da      	b.n	8005a76 <_free_r+0x22>
 8005ac0:	d902      	bls.n	8005ac8 <_free_r+0x74>
 8005ac2:	230c      	movs	r3, #12
 8005ac4:	602b      	str	r3, [r5, #0]
 8005ac6:	e7d6      	b.n	8005a76 <_free_r+0x22>
 8005ac8:	6820      	ldr	r0, [r4, #0]
 8005aca:	1821      	adds	r1, r4, r0
 8005acc:	428b      	cmp	r3, r1
 8005ace:	bf04      	itt	eq
 8005ad0:	6819      	ldreq	r1, [r3, #0]
 8005ad2:	685b      	ldreq	r3, [r3, #4]
 8005ad4:	6063      	str	r3, [r4, #4]
 8005ad6:	bf04      	itt	eq
 8005ad8:	1809      	addeq	r1, r1, r0
 8005ada:	6021      	streq	r1, [r4, #0]
 8005adc:	6054      	str	r4, [r2, #4]
 8005ade:	e7ca      	b.n	8005a76 <_free_r+0x22>
 8005ae0:	bd38      	pop	{r3, r4, r5, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20000330 	.word	0x20000330

08005ae8 <sbrk_aligned>:
 8005ae8:	b570      	push	{r4, r5, r6, lr}
 8005aea:	4e0e      	ldr	r6, [pc, #56]	; (8005b24 <sbrk_aligned+0x3c>)
 8005aec:	460c      	mov	r4, r1
 8005aee:	6831      	ldr	r1, [r6, #0]
 8005af0:	4605      	mov	r5, r0
 8005af2:	b911      	cbnz	r1, 8005afa <sbrk_aligned+0x12>
 8005af4:	f000 f9ee 	bl	8005ed4 <_sbrk_r>
 8005af8:	6030      	str	r0, [r6, #0]
 8005afa:	4621      	mov	r1, r4
 8005afc:	4628      	mov	r0, r5
 8005afe:	f000 f9e9 	bl	8005ed4 <_sbrk_r>
 8005b02:	1c43      	adds	r3, r0, #1
 8005b04:	d00a      	beq.n	8005b1c <sbrk_aligned+0x34>
 8005b06:	1cc4      	adds	r4, r0, #3
 8005b08:	f024 0403 	bic.w	r4, r4, #3
 8005b0c:	42a0      	cmp	r0, r4
 8005b0e:	d007      	beq.n	8005b20 <sbrk_aligned+0x38>
 8005b10:	1a21      	subs	r1, r4, r0
 8005b12:	4628      	mov	r0, r5
 8005b14:	f000 f9de 	bl	8005ed4 <_sbrk_r>
 8005b18:	3001      	adds	r0, #1
 8005b1a:	d101      	bne.n	8005b20 <sbrk_aligned+0x38>
 8005b1c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005b20:	4620      	mov	r0, r4
 8005b22:	bd70      	pop	{r4, r5, r6, pc}
 8005b24:	20000334 	.word	0x20000334

08005b28 <_malloc_r>:
 8005b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b2c:	1ccd      	adds	r5, r1, #3
 8005b2e:	f025 0503 	bic.w	r5, r5, #3
 8005b32:	3508      	adds	r5, #8
 8005b34:	2d0c      	cmp	r5, #12
 8005b36:	bf38      	it	cc
 8005b38:	250c      	movcc	r5, #12
 8005b3a:	2d00      	cmp	r5, #0
 8005b3c:	4607      	mov	r7, r0
 8005b3e:	db01      	blt.n	8005b44 <_malloc_r+0x1c>
 8005b40:	42a9      	cmp	r1, r5
 8005b42:	d905      	bls.n	8005b50 <_malloc_r+0x28>
 8005b44:	230c      	movs	r3, #12
 8005b46:	603b      	str	r3, [r7, #0]
 8005b48:	2600      	movs	r6, #0
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b50:	4e2e      	ldr	r6, [pc, #184]	; (8005c0c <_malloc_r+0xe4>)
 8005b52:	f000 fa3b 	bl	8005fcc <__malloc_lock>
 8005b56:	6833      	ldr	r3, [r6, #0]
 8005b58:	461c      	mov	r4, r3
 8005b5a:	bb34      	cbnz	r4, 8005baa <_malloc_r+0x82>
 8005b5c:	4629      	mov	r1, r5
 8005b5e:	4638      	mov	r0, r7
 8005b60:	f7ff ffc2 	bl	8005ae8 <sbrk_aligned>
 8005b64:	1c43      	adds	r3, r0, #1
 8005b66:	4604      	mov	r4, r0
 8005b68:	d14d      	bne.n	8005c06 <_malloc_r+0xde>
 8005b6a:	6834      	ldr	r4, [r6, #0]
 8005b6c:	4626      	mov	r6, r4
 8005b6e:	2e00      	cmp	r6, #0
 8005b70:	d140      	bne.n	8005bf4 <_malloc_r+0xcc>
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	4631      	mov	r1, r6
 8005b76:	4638      	mov	r0, r7
 8005b78:	eb04 0803 	add.w	r8, r4, r3
 8005b7c:	f000 f9aa 	bl	8005ed4 <_sbrk_r>
 8005b80:	4580      	cmp	r8, r0
 8005b82:	d13a      	bne.n	8005bfa <_malloc_r+0xd2>
 8005b84:	6821      	ldr	r1, [r4, #0]
 8005b86:	3503      	adds	r5, #3
 8005b88:	1a6d      	subs	r5, r5, r1
 8005b8a:	f025 0503 	bic.w	r5, r5, #3
 8005b8e:	3508      	adds	r5, #8
 8005b90:	2d0c      	cmp	r5, #12
 8005b92:	bf38      	it	cc
 8005b94:	250c      	movcc	r5, #12
 8005b96:	4629      	mov	r1, r5
 8005b98:	4638      	mov	r0, r7
 8005b9a:	f7ff ffa5 	bl	8005ae8 <sbrk_aligned>
 8005b9e:	3001      	adds	r0, #1
 8005ba0:	d02b      	beq.n	8005bfa <_malloc_r+0xd2>
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	442b      	add	r3, r5
 8005ba6:	6023      	str	r3, [r4, #0]
 8005ba8:	e00e      	b.n	8005bc8 <_malloc_r+0xa0>
 8005baa:	6822      	ldr	r2, [r4, #0]
 8005bac:	1b52      	subs	r2, r2, r5
 8005bae:	d41e      	bmi.n	8005bee <_malloc_r+0xc6>
 8005bb0:	2a0b      	cmp	r2, #11
 8005bb2:	d916      	bls.n	8005be2 <_malloc_r+0xba>
 8005bb4:	1961      	adds	r1, r4, r5
 8005bb6:	42a3      	cmp	r3, r4
 8005bb8:	6025      	str	r5, [r4, #0]
 8005bba:	bf18      	it	ne
 8005bbc:	6059      	strne	r1, [r3, #4]
 8005bbe:	6863      	ldr	r3, [r4, #4]
 8005bc0:	bf08      	it	eq
 8005bc2:	6031      	streq	r1, [r6, #0]
 8005bc4:	5162      	str	r2, [r4, r5]
 8005bc6:	604b      	str	r3, [r1, #4]
 8005bc8:	4638      	mov	r0, r7
 8005bca:	f104 060b 	add.w	r6, r4, #11
 8005bce:	f000 fa03 	bl	8005fd8 <__malloc_unlock>
 8005bd2:	f026 0607 	bic.w	r6, r6, #7
 8005bd6:	1d23      	adds	r3, r4, #4
 8005bd8:	1af2      	subs	r2, r6, r3
 8005bda:	d0b6      	beq.n	8005b4a <_malloc_r+0x22>
 8005bdc:	1b9b      	subs	r3, r3, r6
 8005bde:	50a3      	str	r3, [r4, r2]
 8005be0:	e7b3      	b.n	8005b4a <_malloc_r+0x22>
 8005be2:	6862      	ldr	r2, [r4, #4]
 8005be4:	42a3      	cmp	r3, r4
 8005be6:	bf0c      	ite	eq
 8005be8:	6032      	streq	r2, [r6, #0]
 8005bea:	605a      	strne	r2, [r3, #4]
 8005bec:	e7ec      	b.n	8005bc8 <_malloc_r+0xa0>
 8005bee:	4623      	mov	r3, r4
 8005bf0:	6864      	ldr	r4, [r4, #4]
 8005bf2:	e7b2      	b.n	8005b5a <_malloc_r+0x32>
 8005bf4:	4634      	mov	r4, r6
 8005bf6:	6876      	ldr	r6, [r6, #4]
 8005bf8:	e7b9      	b.n	8005b6e <_malloc_r+0x46>
 8005bfa:	230c      	movs	r3, #12
 8005bfc:	603b      	str	r3, [r7, #0]
 8005bfe:	4638      	mov	r0, r7
 8005c00:	f000 f9ea 	bl	8005fd8 <__malloc_unlock>
 8005c04:	e7a1      	b.n	8005b4a <_malloc_r+0x22>
 8005c06:	6025      	str	r5, [r4, #0]
 8005c08:	e7de      	b.n	8005bc8 <_malloc_r+0xa0>
 8005c0a:	bf00      	nop
 8005c0c:	20000330 	.word	0x20000330

08005c10 <__ssputs_r>:
 8005c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c14:	688e      	ldr	r6, [r1, #8]
 8005c16:	429e      	cmp	r6, r3
 8005c18:	4682      	mov	sl, r0
 8005c1a:	460c      	mov	r4, r1
 8005c1c:	4690      	mov	r8, r2
 8005c1e:	461f      	mov	r7, r3
 8005c20:	d838      	bhi.n	8005c94 <__ssputs_r+0x84>
 8005c22:	898a      	ldrh	r2, [r1, #12]
 8005c24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c28:	d032      	beq.n	8005c90 <__ssputs_r+0x80>
 8005c2a:	6825      	ldr	r5, [r4, #0]
 8005c2c:	6909      	ldr	r1, [r1, #16]
 8005c2e:	eba5 0901 	sub.w	r9, r5, r1
 8005c32:	6965      	ldr	r5, [r4, #20]
 8005c34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	444b      	add	r3, r9
 8005c40:	106d      	asrs	r5, r5, #1
 8005c42:	429d      	cmp	r5, r3
 8005c44:	bf38      	it	cc
 8005c46:	461d      	movcc	r5, r3
 8005c48:	0553      	lsls	r3, r2, #21
 8005c4a:	d531      	bpl.n	8005cb0 <__ssputs_r+0xa0>
 8005c4c:	4629      	mov	r1, r5
 8005c4e:	f7ff ff6b 	bl	8005b28 <_malloc_r>
 8005c52:	4606      	mov	r6, r0
 8005c54:	b950      	cbnz	r0, 8005c6c <__ssputs_r+0x5c>
 8005c56:	230c      	movs	r3, #12
 8005c58:	f8ca 3000 	str.w	r3, [sl]
 8005c5c:	89a3      	ldrh	r3, [r4, #12]
 8005c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c62:	81a3      	strh	r3, [r4, #12]
 8005c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c6c:	6921      	ldr	r1, [r4, #16]
 8005c6e:	464a      	mov	r2, r9
 8005c70:	f7ff fa1a 	bl	80050a8 <memcpy>
 8005c74:	89a3      	ldrh	r3, [r4, #12]
 8005c76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c7e:	81a3      	strh	r3, [r4, #12]
 8005c80:	6126      	str	r6, [r4, #16]
 8005c82:	6165      	str	r5, [r4, #20]
 8005c84:	444e      	add	r6, r9
 8005c86:	eba5 0509 	sub.w	r5, r5, r9
 8005c8a:	6026      	str	r6, [r4, #0]
 8005c8c:	60a5      	str	r5, [r4, #8]
 8005c8e:	463e      	mov	r6, r7
 8005c90:	42be      	cmp	r6, r7
 8005c92:	d900      	bls.n	8005c96 <__ssputs_r+0x86>
 8005c94:	463e      	mov	r6, r7
 8005c96:	6820      	ldr	r0, [r4, #0]
 8005c98:	4632      	mov	r2, r6
 8005c9a:	4641      	mov	r1, r8
 8005c9c:	f000 f97c 	bl	8005f98 <memmove>
 8005ca0:	68a3      	ldr	r3, [r4, #8]
 8005ca2:	1b9b      	subs	r3, r3, r6
 8005ca4:	60a3      	str	r3, [r4, #8]
 8005ca6:	6823      	ldr	r3, [r4, #0]
 8005ca8:	4433      	add	r3, r6
 8005caa:	6023      	str	r3, [r4, #0]
 8005cac:	2000      	movs	r0, #0
 8005cae:	e7db      	b.n	8005c68 <__ssputs_r+0x58>
 8005cb0:	462a      	mov	r2, r5
 8005cb2:	f000 f997 	bl	8005fe4 <_realloc_r>
 8005cb6:	4606      	mov	r6, r0
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	d1e1      	bne.n	8005c80 <__ssputs_r+0x70>
 8005cbc:	6921      	ldr	r1, [r4, #16]
 8005cbe:	4650      	mov	r0, sl
 8005cc0:	f7ff fec8 	bl	8005a54 <_free_r>
 8005cc4:	e7c7      	b.n	8005c56 <__ssputs_r+0x46>
	...

08005cc8 <_svfiprintf_r>:
 8005cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ccc:	4698      	mov	r8, r3
 8005cce:	898b      	ldrh	r3, [r1, #12]
 8005cd0:	061b      	lsls	r3, r3, #24
 8005cd2:	b09d      	sub	sp, #116	; 0x74
 8005cd4:	4607      	mov	r7, r0
 8005cd6:	460d      	mov	r5, r1
 8005cd8:	4614      	mov	r4, r2
 8005cda:	d50e      	bpl.n	8005cfa <_svfiprintf_r+0x32>
 8005cdc:	690b      	ldr	r3, [r1, #16]
 8005cde:	b963      	cbnz	r3, 8005cfa <_svfiprintf_r+0x32>
 8005ce0:	2140      	movs	r1, #64	; 0x40
 8005ce2:	f7ff ff21 	bl	8005b28 <_malloc_r>
 8005ce6:	6028      	str	r0, [r5, #0]
 8005ce8:	6128      	str	r0, [r5, #16]
 8005cea:	b920      	cbnz	r0, 8005cf6 <_svfiprintf_r+0x2e>
 8005cec:	230c      	movs	r3, #12
 8005cee:	603b      	str	r3, [r7, #0]
 8005cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cf4:	e0d1      	b.n	8005e9a <_svfiprintf_r+0x1d2>
 8005cf6:	2340      	movs	r3, #64	; 0x40
 8005cf8:	616b      	str	r3, [r5, #20]
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8005cfe:	2320      	movs	r3, #32
 8005d00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d04:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d08:	2330      	movs	r3, #48	; 0x30
 8005d0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005eb4 <_svfiprintf_r+0x1ec>
 8005d0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d12:	f04f 0901 	mov.w	r9, #1
 8005d16:	4623      	mov	r3, r4
 8005d18:	469a      	mov	sl, r3
 8005d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d1e:	b10a      	cbz	r2, 8005d24 <_svfiprintf_r+0x5c>
 8005d20:	2a25      	cmp	r2, #37	; 0x25
 8005d22:	d1f9      	bne.n	8005d18 <_svfiprintf_r+0x50>
 8005d24:	ebba 0b04 	subs.w	fp, sl, r4
 8005d28:	d00b      	beq.n	8005d42 <_svfiprintf_r+0x7a>
 8005d2a:	465b      	mov	r3, fp
 8005d2c:	4622      	mov	r2, r4
 8005d2e:	4629      	mov	r1, r5
 8005d30:	4638      	mov	r0, r7
 8005d32:	f7ff ff6d 	bl	8005c10 <__ssputs_r>
 8005d36:	3001      	adds	r0, #1
 8005d38:	f000 80aa 	beq.w	8005e90 <_svfiprintf_r+0x1c8>
 8005d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d3e:	445a      	add	r2, fp
 8005d40:	9209      	str	r2, [sp, #36]	; 0x24
 8005d42:	f89a 3000 	ldrb.w	r3, [sl]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 80a2 	beq.w	8005e90 <_svfiprintf_r+0x1c8>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d56:	f10a 0a01 	add.w	sl, sl, #1
 8005d5a:	9304      	str	r3, [sp, #16]
 8005d5c:	9307      	str	r3, [sp, #28]
 8005d5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d62:	931a      	str	r3, [sp, #104]	; 0x68
 8005d64:	4654      	mov	r4, sl
 8005d66:	2205      	movs	r2, #5
 8005d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d6c:	4851      	ldr	r0, [pc, #324]	; (8005eb4 <_svfiprintf_r+0x1ec>)
 8005d6e:	f7fa fa3f 	bl	80001f0 <memchr>
 8005d72:	9a04      	ldr	r2, [sp, #16]
 8005d74:	b9d8      	cbnz	r0, 8005dae <_svfiprintf_r+0xe6>
 8005d76:	06d0      	lsls	r0, r2, #27
 8005d78:	bf44      	itt	mi
 8005d7a:	2320      	movmi	r3, #32
 8005d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d80:	0711      	lsls	r1, r2, #28
 8005d82:	bf44      	itt	mi
 8005d84:	232b      	movmi	r3, #43	; 0x2b
 8005d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8005d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8005d90:	d015      	beq.n	8005dbe <_svfiprintf_r+0xf6>
 8005d92:	9a07      	ldr	r2, [sp, #28]
 8005d94:	4654      	mov	r4, sl
 8005d96:	2000      	movs	r0, #0
 8005d98:	f04f 0c0a 	mov.w	ip, #10
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005da2:	3b30      	subs	r3, #48	; 0x30
 8005da4:	2b09      	cmp	r3, #9
 8005da6:	d94e      	bls.n	8005e46 <_svfiprintf_r+0x17e>
 8005da8:	b1b0      	cbz	r0, 8005dd8 <_svfiprintf_r+0x110>
 8005daa:	9207      	str	r2, [sp, #28]
 8005dac:	e014      	b.n	8005dd8 <_svfiprintf_r+0x110>
 8005dae:	eba0 0308 	sub.w	r3, r0, r8
 8005db2:	fa09 f303 	lsl.w	r3, r9, r3
 8005db6:	4313      	orrs	r3, r2
 8005db8:	9304      	str	r3, [sp, #16]
 8005dba:	46a2      	mov	sl, r4
 8005dbc:	e7d2      	b.n	8005d64 <_svfiprintf_r+0x9c>
 8005dbe:	9b03      	ldr	r3, [sp, #12]
 8005dc0:	1d19      	adds	r1, r3, #4
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	9103      	str	r1, [sp, #12]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	bfbb      	ittet	lt
 8005dca:	425b      	neglt	r3, r3
 8005dcc:	f042 0202 	orrlt.w	r2, r2, #2
 8005dd0:	9307      	strge	r3, [sp, #28]
 8005dd2:	9307      	strlt	r3, [sp, #28]
 8005dd4:	bfb8      	it	lt
 8005dd6:	9204      	strlt	r2, [sp, #16]
 8005dd8:	7823      	ldrb	r3, [r4, #0]
 8005dda:	2b2e      	cmp	r3, #46	; 0x2e
 8005ddc:	d10c      	bne.n	8005df8 <_svfiprintf_r+0x130>
 8005dde:	7863      	ldrb	r3, [r4, #1]
 8005de0:	2b2a      	cmp	r3, #42	; 0x2a
 8005de2:	d135      	bne.n	8005e50 <_svfiprintf_r+0x188>
 8005de4:	9b03      	ldr	r3, [sp, #12]
 8005de6:	1d1a      	adds	r2, r3, #4
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	9203      	str	r2, [sp, #12]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	bfb8      	it	lt
 8005df0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005df4:	3402      	adds	r4, #2
 8005df6:	9305      	str	r3, [sp, #20]
 8005df8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005eb8 <_svfiprintf_r+0x1f0>
 8005dfc:	7821      	ldrb	r1, [r4, #0]
 8005dfe:	2203      	movs	r2, #3
 8005e00:	4650      	mov	r0, sl
 8005e02:	f7fa f9f5 	bl	80001f0 <memchr>
 8005e06:	b140      	cbz	r0, 8005e1a <_svfiprintf_r+0x152>
 8005e08:	2340      	movs	r3, #64	; 0x40
 8005e0a:	eba0 000a 	sub.w	r0, r0, sl
 8005e0e:	fa03 f000 	lsl.w	r0, r3, r0
 8005e12:	9b04      	ldr	r3, [sp, #16]
 8005e14:	4303      	orrs	r3, r0
 8005e16:	3401      	adds	r4, #1
 8005e18:	9304      	str	r3, [sp, #16]
 8005e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e1e:	4827      	ldr	r0, [pc, #156]	; (8005ebc <_svfiprintf_r+0x1f4>)
 8005e20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e24:	2206      	movs	r2, #6
 8005e26:	f7fa f9e3 	bl	80001f0 <memchr>
 8005e2a:	2800      	cmp	r0, #0
 8005e2c:	d038      	beq.n	8005ea0 <_svfiprintf_r+0x1d8>
 8005e2e:	4b24      	ldr	r3, [pc, #144]	; (8005ec0 <_svfiprintf_r+0x1f8>)
 8005e30:	bb1b      	cbnz	r3, 8005e7a <_svfiprintf_r+0x1b2>
 8005e32:	9b03      	ldr	r3, [sp, #12]
 8005e34:	3307      	adds	r3, #7
 8005e36:	f023 0307 	bic.w	r3, r3, #7
 8005e3a:	3308      	adds	r3, #8
 8005e3c:	9303      	str	r3, [sp, #12]
 8005e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e40:	4433      	add	r3, r6
 8005e42:	9309      	str	r3, [sp, #36]	; 0x24
 8005e44:	e767      	b.n	8005d16 <_svfiprintf_r+0x4e>
 8005e46:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e4a:	460c      	mov	r4, r1
 8005e4c:	2001      	movs	r0, #1
 8005e4e:	e7a5      	b.n	8005d9c <_svfiprintf_r+0xd4>
 8005e50:	2300      	movs	r3, #0
 8005e52:	3401      	adds	r4, #1
 8005e54:	9305      	str	r3, [sp, #20]
 8005e56:	4619      	mov	r1, r3
 8005e58:	f04f 0c0a 	mov.w	ip, #10
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e62:	3a30      	subs	r2, #48	; 0x30
 8005e64:	2a09      	cmp	r2, #9
 8005e66:	d903      	bls.n	8005e70 <_svfiprintf_r+0x1a8>
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d0c5      	beq.n	8005df8 <_svfiprintf_r+0x130>
 8005e6c:	9105      	str	r1, [sp, #20]
 8005e6e:	e7c3      	b.n	8005df8 <_svfiprintf_r+0x130>
 8005e70:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e74:	4604      	mov	r4, r0
 8005e76:	2301      	movs	r3, #1
 8005e78:	e7f0      	b.n	8005e5c <_svfiprintf_r+0x194>
 8005e7a:	ab03      	add	r3, sp, #12
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	462a      	mov	r2, r5
 8005e80:	4b10      	ldr	r3, [pc, #64]	; (8005ec4 <_svfiprintf_r+0x1fc>)
 8005e82:	a904      	add	r1, sp, #16
 8005e84:	4638      	mov	r0, r7
 8005e86:	f7fc fa93 	bl	80023b0 <_printf_float>
 8005e8a:	1c42      	adds	r2, r0, #1
 8005e8c:	4606      	mov	r6, r0
 8005e8e:	d1d6      	bne.n	8005e3e <_svfiprintf_r+0x176>
 8005e90:	89ab      	ldrh	r3, [r5, #12]
 8005e92:	065b      	lsls	r3, r3, #25
 8005e94:	f53f af2c 	bmi.w	8005cf0 <_svfiprintf_r+0x28>
 8005e98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e9a:	b01d      	add	sp, #116	; 0x74
 8005e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ea0:	ab03      	add	r3, sp, #12
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	462a      	mov	r2, r5
 8005ea6:	4b07      	ldr	r3, [pc, #28]	; (8005ec4 <_svfiprintf_r+0x1fc>)
 8005ea8:	a904      	add	r1, sp, #16
 8005eaa:	4638      	mov	r0, r7
 8005eac:	f7fc fd18 	bl	80028e0 <_printf_i>
 8005eb0:	e7eb      	b.n	8005e8a <_svfiprintf_r+0x1c2>
 8005eb2:	bf00      	nop
 8005eb4:	08007014 	.word	0x08007014
 8005eb8:	0800701a 	.word	0x0800701a
 8005ebc:	0800701e 	.word	0x0800701e
 8005ec0:	080023b1 	.word	0x080023b1
 8005ec4:	08005c11 	.word	0x08005c11

08005ec8 <nan>:
 8005ec8:	4901      	ldr	r1, [pc, #4]	; (8005ed0 <nan+0x8>)
 8005eca:	2000      	movs	r0, #0
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	7ff80000 	.word	0x7ff80000

08005ed4 <_sbrk_r>:
 8005ed4:	b538      	push	{r3, r4, r5, lr}
 8005ed6:	4d06      	ldr	r5, [pc, #24]	; (8005ef0 <_sbrk_r+0x1c>)
 8005ed8:	2300      	movs	r3, #0
 8005eda:	4604      	mov	r4, r0
 8005edc:	4608      	mov	r0, r1
 8005ede:	602b      	str	r3, [r5, #0]
 8005ee0:	f000 fe1a 	bl	8006b18 <_sbrk>
 8005ee4:	1c43      	adds	r3, r0, #1
 8005ee6:	d102      	bne.n	8005eee <_sbrk_r+0x1a>
 8005ee8:	682b      	ldr	r3, [r5, #0]
 8005eea:	b103      	cbz	r3, 8005eee <_sbrk_r+0x1a>
 8005eec:	6023      	str	r3, [r4, #0]
 8005eee:	bd38      	pop	{r3, r4, r5, pc}
 8005ef0:	20000338 	.word	0x20000338

08005ef4 <strncmp>:
 8005ef4:	b510      	push	{r4, lr}
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	b172      	cbz	r2, 8005f18 <strncmp+0x24>
 8005efa:	3901      	subs	r1, #1
 8005efc:	1884      	adds	r4, r0, r2
 8005efe:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005f02:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005f06:	4290      	cmp	r0, r2
 8005f08:	d101      	bne.n	8005f0e <strncmp+0x1a>
 8005f0a:	42a3      	cmp	r3, r4
 8005f0c:	d101      	bne.n	8005f12 <strncmp+0x1e>
 8005f0e:	1a80      	subs	r0, r0, r2
 8005f10:	bd10      	pop	{r4, pc}
 8005f12:	2800      	cmp	r0, #0
 8005f14:	d1f3      	bne.n	8005efe <strncmp+0xa>
 8005f16:	e7fa      	b.n	8005f0e <strncmp+0x1a>
 8005f18:	4610      	mov	r0, r2
 8005f1a:	e7f9      	b.n	8005f10 <strncmp+0x1c>

08005f1c <__ascii_wctomb>:
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	4608      	mov	r0, r1
 8005f20:	b141      	cbz	r1, 8005f34 <__ascii_wctomb+0x18>
 8005f22:	2aff      	cmp	r2, #255	; 0xff
 8005f24:	d904      	bls.n	8005f30 <__ascii_wctomb+0x14>
 8005f26:	228a      	movs	r2, #138	; 0x8a
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f2e:	4770      	bx	lr
 8005f30:	700a      	strb	r2, [r1, #0]
 8005f32:	2001      	movs	r0, #1
 8005f34:	4770      	bx	lr
	...

08005f38 <__assert_func>:
 8005f38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f3a:	4614      	mov	r4, r2
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	4b09      	ldr	r3, [pc, #36]	; (8005f64 <__assert_func+0x2c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4605      	mov	r5, r0
 8005f44:	68d8      	ldr	r0, [r3, #12]
 8005f46:	b14c      	cbz	r4, 8005f5c <__assert_func+0x24>
 8005f48:	4b07      	ldr	r3, [pc, #28]	; (8005f68 <__assert_func+0x30>)
 8005f4a:	9100      	str	r1, [sp, #0]
 8005f4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f50:	4906      	ldr	r1, [pc, #24]	; (8005f6c <__assert_func+0x34>)
 8005f52:	462b      	mov	r3, r5
 8005f54:	f000 f80e 	bl	8005f74 <fiprintf>
 8005f58:	f000 fa8a 	bl	8006470 <abort>
 8005f5c:	4b04      	ldr	r3, [pc, #16]	; (8005f70 <__assert_func+0x38>)
 8005f5e:	461c      	mov	r4, r3
 8005f60:	e7f3      	b.n	8005f4a <__assert_func+0x12>
 8005f62:	bf00      	nop
 8005f64:	20000044 	.word	0x20000044
 8005f68:	08007025 	.word	0x08007025
 8005f6c:	08007032 	.word	0x08007032
 8005f70:	08007060 	.word	0x08007060

08005f74 <fiprintf>:
 8005f74:	b40e      	push	{r1, r2, r3}
 8005f76:	b503      	push	{r0, r1, lr}
 8005f78:	4601      	mov	r1, r0
 8005f7a:	ab03      	add	r3, sp, #12
 8005f7c:	4805      	ldr	r0, [pc, #20]	; (8005f94 <fiprintf+0x20>)
 8005f7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f82:	6800      	ldr	r0, [r0, #0]
 8005f84:	9301      	str	r3, [sp, #4]
 8005f86:	f000 f883 	bl	8006090 <_vfiprintf_r>
 8005f8a:	b002      	add	sp, #8
 8005f8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f90:	b003      	add	sp, #12
 8005f92:	4770      	bx	lr
 8005f94:	20000044 	.word	0x20000044

08005f98 <memmove>:
 8005f98:	4288      	cmp	r0, r1
 8005f9a:	b510      	push	{r4, lr}
 8005f9c:	eb01 0402 	add.w	r4, r1, r2
 8005fa0:	d902      	bls.n	8005fa8 <memmove+0x10>
 8005fa2:	4284      	cmp	r4, r0
 8005fa4:	4623      	mov	r3, r4
 8005fa6:	d807      	bhi.n	8005fb8 <memmove+0x20>
 8005fa8:	1e43      	subs	r3, r0, #1
 8005faa:	42a1      	cmp	r1, r4
 8005fac:	d008      	beq.n	8005fc0 <memmove+0x28>
 8005fae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fb6:	e7f8      	b.n	8005faa <memmove+0x12>
 8005fb8:	4402      	add	r2, r0
 8005fba:	4601      	mov	r1, r0
 8005fbc:	428a      	cmp	r2, r1
 8005fbe:	d100      	bne.n	8005fc2 <memmove+0x2a>
 8005fc0:	bd10      	pop	{r4, pc}
 8005fc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fca:	e7f7      	b.n	8005fbc <memmove+0x24>

08005fcc <__malloc_lock>:
 8005fcc:	4801      	ldr	r0, [pc, #4]	; (8005fd4 <__malloc_lock+0x8>)
 8005fce:	f000 bc0b 	b.w	80067e8 <__retarget_lock_acquire_recursive>
 8005fd2:	bf00      	nop
 8005fd4:	2000033c 	.word	0x2000033c

08005fd8 <__malloc_unlock>:
 8005fd8:	4801      	ldr	r0, [pc, #4]	; (8005fe0 <__malloc_unlock+0x8>)
 8005fda:	f000 bc06 	b.w	80067ea <__retarget_lock_release_recursive>
 8005fde:	bf00      	nop
 8005fe0:	2000033c 	.word	0x2000033c

08005fe4 <_realloc_r>:
 8005fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe8:	4680      	mov	r8, r0
 8005fea:	4614      	mov	r4, r2
 8005fec:	460e      	mov	r6, r1
 8005fee:	b921      	cbnz	r1, 8005ffa <_realloc_r+0x16>
 8005ff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ff4:	4611      	mov	r1, r2
 8005ff6:	f7ff bd97 	b.w	8005b28 <_malloc_r>
 8005ffa:	b92a      	cbnz	r2, 8006008 <_realloc_r+0x24>
 8005ffc:	f7ff fd2a 	bl	8005a54 <_free_r>
 8006000:	4625      	mov	r5, r4
 8006002:	4628      	mov	r0, r5
 8006004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006008:	f000 fc56 	bl	80068b8 <_malloc_usable_size_r>
 800600c:	4284      	cmp	r4, r0
 800600e:	4607      	mov	r7, r0
 8006010:	d802      	bhi.n	8006018 <_realloc_r+0x34>
 8006012:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006016:	d812      	bhi.n	800603e <_realloc_r+0x5a>
 8006018:	4621      	mov	r1, r4
 800601a:	4640      	mov	r0, r8
 800601c:	f7ff fd84 	bl	8005b28 <_malloc_r>
 8006020:	4605      	mov	r5, r0
 8006022:	2800      	cmp	r0, #0
 8006024:	d0ed      	beq.n	8006002 <_realloc_r+0x1e>
 8006026:	42bc      	cmp	r4, r7
 8006028:	4622      	mov	r2, r4
 800602a:	4631      	mov	r1, r6
 800602c:	bf28      	it	cs
 800602e:	463a      	movcs	r2, r7
 8006030:	f7ff f83a 	bl	80050a8 <memcpy>
 8006034:	4631      	mov	r1, r6
 8006036:	4640      	mov	r0, r8
 8006038:	f7ff fd0c 	bl	8005a54 <_free_r>
 800603c:	e7e1      	b.n	8006002 <_realloc_r+0x1e>
 800603e:	4635      	mov	r5, r6
 8006040:	e7df      	b.n	8006002 <_realloc_r+0x1e>

08006042 <__sfputc_r>:
 8006042:	6893      	ldr	r3, [r2, #8]
 8006044:	3b01      	subs	r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	b410      	push	{r4}
 800604a:	6093      	str	r3, [r2, #8]
 800604c:	da07      	bge.n	800605e <__sfputc_r+0x1c>
 800604e:	6994      	ldr	r4, [r2, #24]
 8006050:	42a3      	cmp	r3, r4
 8006052:	db01      	blt.n	8006058 <__sfputc_r+0x16>
 8006054:	290a      	cmp	r1, #10
 8006056:	d102      	bne.n	800605e <__sfputc_r+0x1c>
 8006058:	bc10      	pop	{r4}
 800605a:	f000 b949 	b.w	80062f0 <__swbuf_r>
 800605e:	6813      	ldr	r3, [r2, #0]
 8006060:	1c58      	adds	r0, r3, #1
 8006062:	6010      	str	r0, [r2, #0]
 8006064:	7019      	strb	r1, [r3, #0]
 8006066:	4608      	mov	r0, r1
 8006068:	bc10      	pop	{r4}
 800606a:	4770      	bx	lr

0800606c <__sfputs_r>:
 800606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606e:	4606      	mov	r6, r0
 8006070:	460f      	mov	r7, r1
 8006072:	4614      	mov	r4, r2
 8006074:	18d5      	adds	r5, r2, r3
 8006076:	42ac      	cmp	r4, r5
 8006078:	d101      	bne.n	800607e <__sfputs_r+0x12>
 800607a:	2000      	movs	r0, #0
 800607c:	e007      	b.n	800608e <__sfputs_r+0x22>
 800607e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006082:	463a      	mov	r2, r7
 8006084:	4630      	mov	r0, r6
 8006086:	f7ff ffdc 	bl	8006042 <__sfputc_r>
 800608a:	1c43      	adds	r3, r0, #1
 800608c:	d1f3      	bne.n	8006076 <__sfputs_r+0xa>
 800608e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006090 <_vfiprintf_r>:
 8006090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006094:	460d      	mov	r5, r1
 8006096:	b09d      	sub	sp, #116	; 0x74
 8006098:	4614      	mov	r4, r2
 800609a:	4698      	mov	r8, r3
 800609c:	4606      	mov	r6, r0
 800609e:	b118      	cbz	r0, 80060a8 <_vfiprintf_r+0x18>
 80060a0:	6983      	ldr	r3, [r0, #24]
 80060a2:	b90b      	cbnz	r3, 80060a8 <_vfiprintf_r+0x18>
 80060a4:	f000 fb02 	bl	80066ac <__sinit>
 80060a8:	4b89      	ldr	r3, [pc, #548]	; (80062d0 <_vfiprintf_r+0x240>)
 80060aa:	429d      	cmp	r5, r3
 80060ac:	d11b      	bne.n	80060e6 <_vfiprintf_r+0x56>
 80060ae:	6875      	ldr	r5, [r6, #4]
 80060b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060b2:	07d9      	lsls	r1, r3, #31
 80060b4:	d405      	bmi.n	80060c2 <_vfiprintf_r+0x32>
 80060b6:	89ab      	ldrh	r3, [r5, #12]
 80060b8:	059a      	lsls	r2, r3, #22
 80060ba:	d402      	bmi.n	80060c2 <_vfiprintf_r+0x32>
 80060bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060be:	f000 fb93 	bl	80067e8 <__retarget_lock_acquire_recursive>
 80060c2:	89ab      	ldrh	r3, [r5, #12]
 80060c4:	071b      	lsls	r3, r3, #28
 80060c6:	d501      	bpl.n	80060cc <_vfiprintf_r+0x3c>
 80060c8:	692b      	ldr	r3, [r5, #16]
 80060ca:	b9eb      	cbnz	r3, 8006108 <_vfiprintf_r+0x78>
 80060cc:	4629      	mov	r1, r5
 80060ce:	4630      	mov	r0, r6
 80060d0:	f000 f960 	bl	8006394 <__swsetup_r>
 80060d4:	b1c0      	cbz	r0, 8006108 <_vfiprintf_r+0x78>
 80060d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060d8:	07dc      	lsls	r4, r3, #31
 80060da:	d50e      	bpl.n	80060fa <_vfiprintf_r+0x6a>
 80060dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060e0:	b01d      	add	sp, #116	; 0x74
 80060e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060e6:	4b7b      	ldr	r3, [pc, #492]	; (80062d4 <_vfiprintf_r+0x244>)
 80060e8:	429d      	cmp	r5, r3
 80060ea:	d101      	bne.n	80060f0 <_vfiprintf_r+0x60>
 80060ec:	68b5      	ldr	r5, [r6, #8]
 80060ee:	e7df      	b.n	80060b0 <_vfiprintf_r+0x20>
 80060f0:	4b79      	ldr	r3, [pc, #484]	; (80062d8 <_vfiprintf_r+0x248>)
 80060f2:	429d      	cmp	r5, r3
 80060f4:	bf08      	it	eq
 80060f6:	68f5      	ldreq	r5, [r6, #12]
 80060f8:	e7da      	b.n	80060b0 <_vfiprintf_r+0x20>
 80060fa:	89ab      	ldrh	r3, [r5, #12]
 80060fc:	0598      	lsls	r0, r3, #22
 80060fe:	d4ed      	bmi.n	80060dc <_vfiprintf_r+0x4c>
 8006100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006102:	f000 fb72 	bl	80067ea <__retarget_lock_release_recursive>
 8006106:	e7e9      	b.n	80060dc <_vfiprintf_r+0x4c>
 8006108:	2300      	movs	r3, #0
 800610a:	9309      	str	r3, [sp, #36]	; 0x24
 800610c:	2320      	movs	r3, #32
 800610e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006112:	f8cd 800c 	str.w	r8, [sp, #12]
 8006116:	2330      	movs	r3, #48	; 0x30
 8006118:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80062dc <_vfiprintf_r+0x24c>
 800611c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006120:	f04f 0901 	mov.w	r9, #1
 8006124:	4623      	mov	r3, r4
 8006126:	469a      	mov	sl, r3
 8006128:	f813 2b01 	ldrb.w	r2, [r3], #1
 800612c:	b10a      	cbz	r2, 8006132 <_vfiprintf_r+0xa2>
 800612e:	2a25      	cmp	r2, #37	; 0x25
 8006130:	d1f9      	bne.n	8006126 <_vfiprintf_r+0x96>
 8006132:	ebba 0b04 	subs.w	fp, sl, r4
 8006136:	d00b      	beq.n	8006150 <_vfiprintf_r+0xc0>
 8006138:	465b      	mov	r3, fp
 800613a:	4622      	mov	r2, r4
 800613c:	4629      	mov	r1, r5
 800613e:	4630      	mov	r0, r6
 8006140:	f7ff ff94 	bl	800606c <__sfputs_r>
 8006144:	3001      	adds	r0, #1
 8006146:	f000 80aa 	beq.w	800629e <_vfiprintf_r+0x20e>
 800614a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800614c:	445a      	add	r2, fp
 800614e:	9209      	str	r2, [sp, #36]	; 0x24
 8006150:	f89a 3000 	ldrb.w	r3, [sl]
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 80a2 	beq.w	800629e <_vfiprintf_r+0x20e>
 800615a:	2300      	movs	r3, #0
 800615c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006160:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006164:	f10a 0a01 	add.w	sl, sl, #1
 8006168:	9304      	str	r3, [sp, #16]
 800616a:	9307      	str	r3, [sp, #28]
 800616c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006170:	931a      	str	r3, [sp, #104]	; 0x68
 8006172:	4654      	mov	r4, sl
 8006174:	2205      	movs	r2, #5
 8006176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800617a:	4858      	ldr	r0, [pc, #352]	; (80062dc <_vfiprintf_r+0x24c>)
 800617c:	f7fa f838 	bl	80001f0 <memchr>
 8006180:	9a04      	ldr	r2, [sp, #16]
 8006182:	b9d8      	cbnz	r0, 80061bc <_vfiprintf_r+0x12c>
 8006184:	06d1      	lsls	r1, r2, #27
 8006186:	bf44      	itt	mi
 8006188:	2320      	movmi	r3, #32
 800618a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800618e:	0713      	lsls	r3, r2, #28
 8006190:	bf44      	itt	mi
 8006192:	232b      	movmi	r3, #43	; 0x2b
 8006194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006198:	f89a 3000 	ldrb.w	r3, [sl]
 800619c:	2b2a      	cmp	r3, #42	; 0x2a
 800619e:	d015      	beq.n	80061cc <_vfiprintf_r+0x13c>
 80061a0:	9a07      	ldr	r2, [sp, #28]
 80061a2:	4654      	mov	r4, sl
 80061a4:	2000      	movs	r0, #0
 80061a6:	f04f 0c0a 	mov.w	ip, #10
 80061aa:	4621      	mov	r1, r4
 80061ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061b0:	3b30      	subs	r3, #48	; 0x30
 80061b2:	2b09      	cmp	r3, #9
 80061b4:	d94e      	bls.n	8006254 <_vfiprintf_r+0x1c4>
 80061b6:	b1b0      	cbz	r0, 80061e6 <_vfiprintf_r+0x156>
 80061b8:	9207      	str	r2, [sp, #28]
 80061ba:	e014      	b.n	80061e6 <_vfiprintf_r+0x156>
 80061bc:	eba0 0308 	sub.w	r3, r0, r8
 80061c0:	fa09 f303 	lsl.w	r3, r9, r3
 80061c4:	4313      	orrs	r3, r2
 80061c6:	9304      	str	r3, [sp, #16]
 80061c8:	46a2      	mov	sl, r4
 80061ca:	e7d2      	b.n	8006172 <_vfiprintf_r+0xe2>
 80061cc:	9b03      	ldr	r3, [sp, #12]
 80061ce:	1d19      	adds	r1, r3, #4
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	9103      	str	r1, [sp, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	bfbb      	ittet	lt
 80061d8:	425b      	neglt	r3, r3
 80061da:	f042 0202 	orrlt.w	r2, r2, #2
 80061de:	9307      	strge	r3, [sp, #28]
 80061e0:	9307      	strlt	r3, [sp, #28]
 80061e2:	bfb8      	it	lt
 80061e4:	9204      	strlt	r2, [sp, #16]
 80061e6:	7823      	ldrb	r3, [r4, #0]
 80061e8:	2b2e      	cmp	r3, #46	; 0x2e
 80061ea:	d10c      	bne.n	8006206 <_vfiprintf_r+0x176>
 80061ec:	7863      	ldrb	r3, [r4, #1]
 80061ee:	2b2a      	cmp	r3, #42	; 0x2a
 80061f0:	d135      	bne.n	800625e <_vfiprintf_r+0x1ce>
 80061f2:	9b03      	ldr	r3, [sp, #12]
 80061f4:	1d1a      	adds	r2, r3, #4
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	9203      	str	r2, [sp, #12]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	bfb8      	it	lt
 80061fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006202:	3402      	adds	r4, #2
 8006204:	9305      	str	r3, [sp, #20]
 8006206:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80062e0 <_vfiprintf_r+0x250>
 800620a:	7821      	ldrb	r1, [r4, #0]
 800620c:	2203      	movs	r2, #3
 800620e:	4650      	mov	r0, sl
 8006210:	f7f9 ffee 	bl	80001f0 <memchr>
 8006214:	b140      	cbz	r0, 8006228 <_vfiprintf_r+0x198>
 8006216:	2340      	movs	r3, #64	; 0x40
 8006218:	eba0 000a 	sub.w	r0, r0, sl
 800621c:	fa03 f000 	lsl.w	r0, r3, r0
 8006220:	9b04      	ldr	r3, [sp, #16]
 8006222:	4303      	orrs	r3, r0
 8006224:	3401      	adds	r4, #1
 8006226:	9304      	str	r3, [sp, #16]
 8006228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800622c:	482d      	ldr	r0, [pc, #180]	; (80062e4 <_vfiprintf_r+0x254>)
 800622e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006232:	2206      	movs	r2, #6
 8006234:	f7f9 ffdc 	bl	80001f0 <memchr>
 8006238:	2800      	cmp	r0, #0
 800623a:	d03f      	beq.n	80062bc <_vfiprintf_r+0x22c>
 800623c:	4b2a      	ldr	r3, [pc, #168]	; (80062e8 <_vfiprintf_r+0x258>)
 800623e:	bb1b      	cbnz	r3, 8006288 <_vfiprintf_r+0x1f8>
 8006240:	9b03      	ldr	r3, [sp, #12]
 8006242:	3307      	adds	r3, #7
 8006244:	f023 0307 	bic.w	r3, r3, #7
 8006248:	3308      	adds	r3, #8
 800624a:	9303      	str	r3, [sp, #12]
 800624c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800624e:	443b      	add	r3, r7
 8006250:	9309      	str	r3, [sp, #36]	; 0x24
 8006252:	e767      	b.n	8006124 <_vfiprintf_r+0x94>
 8006254:	fb0c 3202 	mla	r2, ip, r2, r3
 8006258:	460c      	mov	r4, r1
 800625a:	2001      	movs	r0, #1
 800625c:	e7a5      	b.n	80061aa <_vfiprintf_r+0x11a>
 800625e:	2300      	movs	r3, #0
 8006260:	3401      	adds	r4, #1
 8006262:	9305      	str	r3, [sp, #20]
 8006264:	4619      	mov	r1, r3
 8006266:	f04f 0c0a 	mov.w	ip, #10
 800626a:	4620      	mov	r0, r4
 800626c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006270:	3a30      	subs	r2, #48	; 0x30
 8006272:	2a09      	cmp	r2, #9
 8006274:	d903      	bls.n	800627e <_vfiprintf_r+0x1ee>
 8006276:	2b00      	cmp	r3, #0
 8006278:	d0c5      	beq.n	8006206 <_vfiprintf_r+0x176>
 800627a:	9105      	str	r1, [sp, #20]
 800627c:	e7c3      	b.n	8006206 <_vfiprintf_r+0x176>
 800627e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006282:	4604      	mov	r4, r0
 8006284:	2301      	movs	r3, #1
 8006286:	e7f0      	b.n	800626a <_vfiprintf_r+0x1da>
 8006288:	ab03      	add	r3, sp, #12
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	462a      	mov	r2, r5
 800628e:	4b17      	ldr	r3, [pc, #92]	; (80062ec <_vfiprintf_r+0x25c>)
 8006290:	a904      	add	r1, sp, #16
 8006292:	4630      	mov	r0, r6
 8006294:	f7fc f88c 	bl	80023b0 <_printf_float>
 8006298:	4607      	mov	r7, r0
 800629a:	1c78      	adds	r0, r7, #1
 800629c:	d1d6      	bne.n	800624c <_vfiprintf_r+0x1bc>
 800629e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062a0:	07d9      	lsls	r1, r3, #31
 80062a2:	d405      	bmi.n	80062b0 <_vfiprintf_r+0x220>
 80062a4:	89ab      	ldrh	r3, [r5, #12]
 80062a6:	059a      	lsls	r2, r3, #22
 80062a8:	d402      	bmi.n	80062b0 <_vfiprintf_r+0x220>
 80062aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062ac:	f000 fa9d 	bl	80067ea <__retarget_lock_release_recursive>
 80062b0:	89ab      	ldrh	r3, [r5, #12]
 80062b2:	065b      	lsls	r3, r3, #25
 80062b4:	f53f af12 	bmi.w	80060dc <_vfiprintf_r+0x4c>
 80062b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062ba:	e711      	b.n	80060e0 <_vfiprintf_r+0x50>
 80062bc:	ab03      	add	r3, sp, #12
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	462a      	mov	r2, r5
 80062c2:	4b0a      	ldr	r3, [pc, #40]	; (80062ec <_vfiprintf_r+0x25c>)
 80062c4:	a904      	add	r1, sp, #16
 80062c6:	4630      	mov	r0, r6
 80062c8:	f7fc fb0a 	bl	80028e0 <_printf_i>
 80062cc:	e7e4      	b.n	8006298 <_vfiprintf_r+0x208>
 80062ce:	bf00      	nop
 80062d0:	08007084 	.word	0x08007084
 80062d4:	080070a4 	.word	0x080070a4
 80062d8:	08007064 	.word	0x08007064
 80062dc:	08007014 	.word	0x08007014
 80062e0:	0800701a 	.word	0x0800701a
 80062e4:	0800701e 	.word	0x0800701e
 80062e8:	080023b1 	.word	0x080023b1
 80062ec:	0800606d 	.word	0x0800606d

080062f0 <__swbuf_r>:
 80062f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f2:	460e      	mov	r6, r1
 80062f4:	4614      	mov	r4, r2
 80062f6:	4605      	mov	r5, r0
 80062f8:	b118      	cbz	r0, 8006302 <__swbuf_r+0x12>
 80062fa:	6983      	ldr	r3, [r0, #24]
 80062fc:	b90b      	cbnz	r3, 8006302 <__swbuf_r+0x12>
 80062fe:	f000 f9d5 	bl	80066ac <__sinit>
 8006302:	4b21      	ldr	r3, [pc, #132]	; (8006388 <__swbuf_r+0x98>)
 8006304:	429c      	cmp	r4, r3
 8006306:	d12b      	bne.n	8006360 <__swbuf_r+0x70>
 8006308:	686c      	ldr	r4, [r5, #4]
 800630a:	69a3      	ldr	r3, [r4, #24]
 800630c:	60a3      	str	r3, [r4, #8]
 800630e:	89a3      	ldrh	r3, [r4, #12]
 8006310:	071a      	lsls	r2, r3, #28
 8006312:	d52f      	bpl.n	8006374 <__swbuf_r+0x84>
 8006314:	6923      	ldr	r3, [r4, #16]
 8006316:	b36b      	cbz	r3, 8006374 <__swbuf_r+0x84>
 8006318:	6923      	ldr	r3, [r4, #16]
 800631a:	6820      	ldr	r0, [r4, #0]
 800631c:	1ac0      	subs	r0, r0, r3
 800631e:	6963      	ldr	r3, [r4, #20]
 8006320:	b2f6      	uxtb	r6, r6
 8006322:	4283      	cmp	r3, r0
 8006324:	4637      	mov	r7, r6
 8006326:	dc04      	bgt.n	8006332 <__swbuf_r+0x42>
 8006328:	4621      	mov	r1, r4
 800632a:	4628      	mov	r0, r5
 800632c:	f000 f92a 	bl	8006584 <_fflush_r>
 8006330:	bb30      	cbnz	r0, 8006380 <__swbuf_r+0x90>
 8006332:	68a3      	ldr	r3, [r4, #8]
 8006334:	3b01      	subs	r3, #1
 8006336:	60a3      	str	r3, [r4, #8]
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	6022      	str	r2, [r4, #0]
 800633e:	701e      	strb	r6, [r3, #0]
 8006340:	6963      	ldr	r3, [r4, #20]
 8006342:	3001      	adds	r0, #1
 8006344:	4283      	cmp	r3, r0
 8006346:	d004      	beq.n	8006352 <__swbuf_r+0x62>
 8006348:	89a3      	ldrh	r3, [r4, #12]
 800634a:	07db      	lsls	r3, r3, #31
 800634c:	d506      	bpl.n	800635c <__swbuf_r+0x6c>
 800634e:	2e0a      	cmp	r6, #10
 8006350:	d104      	bne.n	800635c <__swbuf_r+0x6c>
 8006352:	4621      	mov	r1, r4
 8006354:	4628      	mov	r0, r5
 8006356:	f000 f915 	bl	8006584 <_fflush_r>
 800635a:	b988      	cbnz	r0, 8006380 <__swbuf_r+0x90>
 800635c:	4638      	mov	r0, r7
 800635e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006360:	4b0a      	ldr	r3, [pc, #40]	; (800638c <__swbuf_r+0x9c>)
 8006362:	429c      	cmp	r4, r3
 8006364:	d101      	bne.n	800636a <__swbuf_r+0x7a>
 8006366:	68ac      	ldr	r4, [r5, #8]
 8006368:	e7cf      	b.n	800630a <__swbuf_r+0x1a>
 800636a:	4b09      	ldr	r3, [pc, #36]	; (8006390 <__swbuf_r+0xa0>)
 800636c:	429c      	cmp	r4, r3
 800636e:	bf08      	it	eq
 8006370:	68ec      	ldreq	r4, [r5, #12]
 8006372:	e7ca      	b.n	800630a <__swbuf_r+0x1a>
 8006374:	4621      	mov	r1, r4
 8006376:	4628      	mov	r0, r5
 8006378:	f000 f80c 	bl	8006394 <__swsetup_r>
 800637c:	2800      	cmp	r0, #0
 800637e:	d0cb      	beq.n	8006318 <__swbuf_r+0x28>
 8006380:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006384:	e7ea      	b.n	800635c <__swbuf_r+0x6c>
 8006386:	bf00      	nop
 8006388:	08007084 	.word	0x08007084
 800638c:	080070a4 	.word	0x080070a4
 8006390:	08007064 	.word	0x08007064

08006394 <__swsetup_r>:
 8006394:	4b32      	ldr	r3, [pc, #200]	; (8006460 <__swsetup_r+0xcc>)
 8006396:	b570      	push	{r4, r5, r6, lr}
 8006398:	681d      	ldr	r5, [r3, #0]
 800639a:	4606      	mov	r6, r0
 800639c:	460c      	mov	r4, r1
 800639e:	b125      	cbz	r5, 80063aa <__swsetup_r+0x16>
 80063a0:	69ab      	ldr	r3, [r5, #24]
 80063a2:	b913      	cbnz	r3, 80063aa <__swsetup_r+0x16>
 80063a4:	4628      	mov	r0, r5
 80063a6:	f000 f981 	bl	80066ac <__sinit>
 80063aa:	4b2e      	ldr	r3, [pc, #184]	; (8006464 <__swsetup_r+0xd0>)
 80063ac:	429c      	cmp	r4, r3
 80063ae:	d10f      	bne.n	80063d0 <__swsetup_r+0x3c>
 80063b0:	686c      	ldr	r4, [r5, #4]
 80063b2:	89a3      	ldrh	r3, [r4, #12]
 80063b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063b8:	0719      	lsls	r1, r3, #28
 80063ba:	d42c      	bmi.n	8006416 <__swsetup_r+0x82>
 80063bc:	06dd      	lsls	r5, r3, #27
 80063be:	d411      	bmi.n	80063e4 <__swsetup_r+0x50>
 80063c0:	2309      	movs	r3, #9
 80063c2:	6033      	str	r3, [r6, #0]
 80063c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063c8:	81a3      	strh	r3, [r4, #12]
 80063ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063ce:	e03e      	b.n	800644e <__swsetup_r+0xba>
 80063d0:	4b25      	ldr	r3, [pc, #148]	; (8006468 <__swsetup_r+0xd4>)
 80063d2:	429c      	cmp	r4, r3
 80063d4:	d101      	bne.n	80063da <__swsetup_r+0x46>
 80063d6:	68ac      	ldr	r4, [r5, #8]
 80063d8:	e7eb      	b.n	80063b2 <__swsetup_r+0x1e>
 80063da:	4b24      	ldr	r3, [pc, #144]	; (800646c <__swsetup_r+0xd8>)
 80063dc:	429c      	cmp	r4, r3
 80063de:	bf08      	it	eq
 80063e0:	68ec      	ldreq	r4, [r5, #12]
 80063e2:	e7e6      	b.n	80063b2 <__swsetup_r+0x1e>
 80063e4:	0758      	lsls	r0, r3, #29
 80063e6:	d512      	bpl.n	800640e <__swsetup_r+0x7a>
 80063e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063ea:	b141      	cbz	r1, 80063fe <__swsetup_r+0x6a>
 80063ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063f0:	4299      	cmp	r1, r3
 80063f2:	d002      	beq.n	80063fa <__swsetup_r+0x66>
 80063f4:	4630      	mov	r0, r6
 80063f6:	f7ff fb2d 	bl	8005a54 <_free_r>
 80063fa:	2300      	movs	r3, #0
 80063fc:	6363      	str	r3, [r4, #52]	; 0x34
 80063fe:	89a3      	ldrh	r3, [r4, #12]
 8006400:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006404:	81a3      	strh	r3, [r4, #12]
 8006406:	2300      	movs	r3, #0
 8006408:	6063      	str	r3, [r4, #4]
 800640a:	6923      	ldr	r3, [r4, #16]
 800640c:	6023      	str	r3, [r4, #0]
 800640e:	89a3      	ldrh	r3, [r4, #12]
 8006410:	f043 0308 	orr.w	r3, r3, #8
 8006414:	81a3      	strh	r3, [r4, #12]
 8006416:	6923      	ldr	r3, [r4, #16]
 8006418:	b94b      	cbnz	r3, 800642e <__swsetup_r+0x9a>
 800641a:	89a3      	ldrh	r3, [r4, #12]
 800641c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006424:	d003      	beq.n	800642e <__swsetup_r+0x9a>
 8006426:	4621      	mov	r1, r4
 8006428:	4630      	mov	r0, r6
 800642a:	f000 fa05 	bl	8006838 <__smakebuf_r>
 800642e:	89a0      	ldrh	r0, [r4, #12]
 8006430:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006434:	f010 0301 	ands.w	r3, r0, #1
 8006438:	d00a      	beq.n	8006450 <__swsetup_r+0xbc>
 800643a:	2300      	movs	r3, #0
 800643c:	60a3      	str	r3, [r4, #8]
 800643e:	6963      	ldr	r3, [r4, #20]
 8006440:	425b      	negs	r3, r3
 8006442:	61a3      	str	r3, [r4, #24]
 8006444:	6923      	ldr	r3, [r4, #16]
 8006446:	b943      	cbnz	r3, 800645a <__swsetup_r+0xc6>
 8006448:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800644c:	d1ba      	bne.n	80063c4 <__swsetup_r+0x30>
 800644e:	bd70      	pop	{r4, r5, r6, pc}
 8006450:	0781      	lsls	r1, r0, #30
 8006452:	bf58      	it	pl
 8006454:	6963      	ldrpl	r3, [r4, #20]
 8006456:	60a3      	str	r3, [r4, #8]
 8006458:	e7f4      	b.n	8006444 <__swsetup_r+0xb0>
 800645a:	2000      	movs	r0, #0
 800645c:	e7f7      	b.n	800644e <__swsetup_r+0xba>
 800645e:	bf00      	nop
 8006460:	20000044 	.word	0x20000044
 8006464:	08007084 	.word	0x08007084
 8006468:	080070a4 	.word	0x080070a4
 800646c:	08007064 	.word	0x08007064

08006470 <abort>:
 8006470:	b508      	push	{r3, lr}
 8006472:	2006      	movs	r0, #6
 8006474:	f000 fa50 	bl	8006918 <raise>
 8006478:	2001      	movs	r0, #1
 800647a:	f000 fb63 	bl	8006b44 <_exit>
	...

08006480 <__sflush_r>:
 8006480:	898a      	ldrh	r2, [r1, #12]
 8006482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006484:	4605      	mov	r5, r0
 8006486:	0710      	lsls	r0, r2, #28
 8006488:	460c      	mov	r4, r1
 800648a:	d457      	bmi.n	800653c <__sflush_r+0xbc>
 800648c:	684b      	ldr	r3, [r1, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	dc04      	bgt.n	800649c <__sflush_r+0x1c>
 8006492:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006494:	2b00      	cmp	r3, #0
 8006496:	dc01      	bgt.n	800649c <__sflush_r+0x1c>
 8006498:	2000      	movs	r0, #0
 800649a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800649c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800649e:	2e00      	cmp	r6, #0
 80064a0:	d0fa      	beq.n	8006498 <__sflush_r+0x18>
 80064a2:	2300      	movs	r3, #0
 80064a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064a8:	682f      	ldr	r7, [r5, #0]
 80064aa:	602b      	str	r3, [r5, #0]
 80064ac:	d032      	beq.n	8006514 <__sflush_r+0x94>
 80064ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064b0:	89a3      	ldrh	r3, [r4, #12]
 80064b2:	075a      	lsls	r2, r3, #29
 80064b4:	d505      	bpl.n	80064c2 <__sflush_r+0x42>
 80064b6:	6863      	ldr	r3, [r4, #4]
 80064b8:	1ac0      	subs	r0, r0, r3
 80064ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064bc:	b10b      	cbz	r3, 80064c2 <__sflush_r+0x42>
 80064be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064c0:	1ac0      	subs	r0, r0, r3
 80064c2:	2300      	movs	r3, #0
 80064c4:	4602      	mov	r2, r0
 80064c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064c8:	6a21      	ldr	r1, [r4, #32]
 80064ca:	4628      	mov	r0, r5
 80064cc:	47b0      	blx	r6
 80064ce:	1c43      	adds	r3, r0, #1
 80064d0:	89a3      	ldrh	r3, [r4, #12]
 80064d2:	d106      	bne.n	80064e2 <__sflush_r+0x62>
 80064d4:	6829      	ldr	r1, [r5, #0]
 80064d6:	291d      	cmp	r1, #29
 80064d8:	d82c      	bhi.n	8006534 <__sflush_r+0xb4>
 80064da:	4a29      	ldr	r2, [pc, #164]	; (8006580 <__sflush_r+0x100>)
 80064dc:	40ca      	lsrs	r2, r1
 80064de:	07d6      	lsls	r6, r2, #31
 80064e0:	d528      	bpl.n	8006534 <__sflush_r+0xb4>
 80064e2:	2200      	movs	r2, #0
 80064e4:	6062      	str	r2, [r4, #4]
 80064e6:	04d9      	lsls	r1, r3, #19
 80064e8:	6922      	ldr	r2, [r4, #16]
 80064ea:	6022      	str	r2, [r4, #0]
 80064ec:	d504      	bpl.n	80064f8 <__sflush_r+0x78>
 80064ee:	1c42      	adds	r2, r0, #1
 80064f0:	d101      	bne.n	80064f6 <__sflush_r+0x76>
 80064f2:	682b      	ldr	r3, [r5, #0]
 80064f4:	b903      	cbnz	r3, 80064f8 <__sflush_r+0x78>
 80064f6:	6560      	str	r0, [r4, #84]	; 0x54
 80064f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064fa:	602f      	str	r7, [r5, #0]
 80064fc:	2900      	cmp	r1, #0
 80064fe:	d0cb      	beq.n	8006498 <__sflush_r+0x18>
 8006500:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006504:	4299      	cmp	r1, r3
 8006506:	d002      	beq.n	800650e <__sflush_r+0x8e>
 8006508:	4628      	mov	r0, r5
 800650a:	f7ff faa3 	bl	8005a54 <_free_r>
 800650e:	2000      	movs	r0, #0
 8006510:	6360      	str	r0, [r4, #52]	; 0x34
 8006512:	e7c2      	b.n	800649a <__sflush_r+0x1a>
 8006514:	6a21      	ldr	r1, [r4, #32]
 8006516:	2301      	movs	r3, #1
 8006518:	4628      	mov	r0, r5
 800651a:	47b0      	blx	r6
 800651c:	1c41      	adds	r1, r0, #1
 800651e:	d1c7      	bne.n	80064b0 <__sflush_r+0x30>
 8006520:	682b      	ldr	r3, [r5, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d0c4      	beq.n	80064b0 <__sflush_r+0x30>
 8006526:	2b1d      	cmp	r3, #29
 8006528:	d001      	beq.n	800652e <__sflush_r+0xae>
 800652a:	2b16      	cmp	r3, #22
 800652c:	d101      	bne.n	8006532 <__sflush_r+0xb2>
 800652e:	602f      	str	r7, [r5, #0]
 8006530:	e7b2      	b.n	8006498 <__sflush_r+0x18>
 8006532:	89a3      	ldrh	r3, [r4, #12]
 8006534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006538:	81a3      	strh	r3, [r4, #12]
 800653a:	e7ae      	b.n	800649a <__sflush_r+0x1a>
 800653c:	690f      	ldr	r7, [r1, #16]
 800653e:	2f00      	cmp	r7, #0
 8006540:	d0aa      	beq.n	8006498 <__sflush_r+0x18>
 8006542:	0793      	lsls	r3, r2, #30
 8006544:	680e      	ldr	r6, [r1, #0]
 8006546:	bf08      	it	eq
 8006548:	694b      	ldreq	r3, [r1, #20]
 800654a:	600f      	str	r7, [r1, #0]
 800654c:	bf18      	it	ne
 800654e:	2300      	movne	r3, #0
 8006550:	1bf6      	subs	r6, r6, r7
 8006552:	608b      	str	r3, [r1, #8]
 8006554:	2e00      	cmp	r6, #0
 8006556:	dd9f      	ble.n	8006498 <__sflush_r+0x18>
 8006558:	6a21      	ldr	r1, [r4, #32]
 800655a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800655e:	4633      	mov	r3, r6
 8006560:	463a      	mov	r2, r7
 8006562:	4628      	mov	r0, r5
 8006564:	47e0      	blx	ip
 8006566:	2800      	cmp	r0, #0
 8006568:	dc06      	bgt.n	8006578 <__sflush_r+0xf8>
 800656a:	89a3      	ldrh	r3, [r4, #12]
 800656c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006570:	81a3      	strh	r3, [r4, #12]
 8006572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006576:	e790      	b.n	800649a <__sflush_r+0x1a>
 8006578:	4407      	add	r7, r0
 800657a:	1a36      	subs	r6, r6, r0
 800657c:	e7ea      	b.n	8006554 <__sflush_r+0xd4>
 800657e:	bf00      	nop
 8006580:	20400001 	.word	0x20400001

08006584 <_fflush_r>:
 8006584:	b538      	push	{r3, r4, r5, lr}
 8006586:	690b      	ldr	r3, [r1, #16]
 8006588:	4605      	mov	r5, r0
 800658a:	460c      	mov	r4, r1
 800658c:	b913      	cbnz	r3, 8006594 <_fflush_r+0x10>
 800658e:	2500      	movs	r5, #0
 8006590:	4628      	mov	r0, r5
 8006592:	bd38      	pop	{r3, r4, r5, pc}
 8006594:	b118      	cbz	r0, 800659e <_fflush_r+0x1a>
 8006596:	6983      	ldr	r3, [r0, #24]
 8006598:	b90b      	cbnz	r3, 800659e <_fflush_r+0x1a>
 800659a:	f000 f887 	bl	80066ac <__sinit>
 800659e:	4b14      	ldr	r3, [pc, #80]	; (80065f0 <_fflush_r+0x6c>)
 80065a0:	429c      	cmp	r4, r3
 80065a2:	d11b      	bne.n	80065dc <_fflush_r+0x58>
 80065a4:	686c      	ldr	r4, [r5, #4]
 80065a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d0ef      	beq.n	800658e <_fflush_r+0xa>
 80065ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80065b0:	07d0      	lsls	r0, r2, #31
 80065b2:	d404      	bmi.n	80065be <_fflush_r+0x3a>
 80065b4:	0599      	lsls	r1, r3, #22
 80065b6:	d402      	bmi.n	80065be <_fflush_r+0x3a>
 80065b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065ba:	f000 f915 	bl	80067e8 <__retarget_lock_acquire_recursive>
 80065be:	4628      	mov	r0, r5
 80065c0:	4621      	mov	r1, r4
 80065c2:	f7ff ff5d 	bl	8006480 <__sflush_r>
 80065c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065c8:	07da      	lsls	r2, r3, #31
 80065ca:	4605      	mov	r5, r0
 80065cc:	d4e0      	bmi.n	8006590 <_fflush_r+0xc>
 80065ce:	89a3      	ldrh	r3, [r4, #12]
 80065d0:	059b      	lsls	r3, r3, #22
 80065d2:	d4dd      	bmi.n	8006590 <_fflush_r+0xc>
 80065d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065d6:	f000 f908 	bl	80067ea <__retarget_lock_release_recursive>
 80065da:	e7d9      	b.n	8006590 <_fflush_r+0xc>
 80065dc:	4b05      	ldr	r3, [pc, #20]	; (80065f4 <_fflush_r+0x70>)
 80065de:	429c      	cmp	r4, r3
 80065e0:	d101      	bne.n	80065e6 <_fflush_r+0x62>
 80065e2:	68ac      	ldr	r4, [r5, #8]
 80065e4:	e7df      	b.n	80065a6 <_fflush_r+0x22>
 80065e6:	4b04      	ldr	r3, [pc, #16]	; (80065f8 <_fflush_r+0x74>)
 80065e8:	429c      	cmp	r4, r3
 80065ea:	bf08      	it	eq
 80065ec:	68ec      	ldreq	r4, [r5, #12]
 80065ee:	e7da      	b.n	80065a6 <_fflush_r+0x22>
 80065f0:	08007084 	.word	0x08007084
 80065f4:	080070a4 	.word	0x080070a4
 80065f8:	08007064 	.word	0x08007064

080065fc <std>:
 80065fc:	2300      	movs	r3, #0
 80065fe:	b510      	push	{r4, lr}
 8006600:	4604      	mov	r4, r0
 8006602:	e9c0 3300 	strd	r3, r3, [r0]
 8006606:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800660a:	6083      	str	r3, [r0, #8]
 800660c:	8181      	strh	r1, [r0, #12]
 800660e:	6643      	str	r3, [r0, #100]	; 0x64
 8006610:	81c2      	strh	r2, [r0, #14]
 8006612:	6183      	str	r3, [r0, #24]
 8006614:	4619      	mov	r1, r3
 8006616:	2208      	movs	r2, #8
 8006618:	305c      	adds	r0, #92	; 0x5c
 800661a:	f7fb fe23 	bl	8002264 <memset>
 800661e:	4b05      	ldr	r3, [pc, #20]	; (8006634 <std+0x38>)
 8006620:	6263      	str	r3, [r4, #36]	; 0x24
 8006622:	4b05      	ldr	r3, [pc, #20]	; (8006638 <std+0x3c>)
 8006624:	62a3      	str	r3, [r4, #40]	; 0x28
 8006626:	4b05      	ldr	r3, [pc, #20]	; (800663c <std+0x40>)
 8006628:	62e3      	str	r3, [r4, #44]	; 0x2c
 800662a:	4b05      	ldr	r3, [pc, #20]	; (8006640 <std+0x44>)
 800662c:	6224      	str	r4, [r4, #32]
 800662e:	6323      	str	r3, [r4, #48]	; 0x30
 8006630:	bd10      	pop	{r4, pc}
 8006632:	bf00      	nop
 8006634:	08006951 	.word	0x08006951
 8006638:	08006973 	.word	0x08006973
 800663c:	080069ab 	.word	0x080069ab
 8006640:	080069cf 	.word	0x080069cf

08006644 <_cleanup_r>:
 8006644:	4901      	ldr	r1, [pc, #4]	; (800664c <_cleanup_r+0x8>)
 8006646:	f000 b8af 	b.w	80067a8 <_fwalk_reent>
 800664a:	bf00      	nop
 800664c:	08006585 	.word	0x08006585

08006650 <__sfmoreglue>:
 8006650:	b570      	push	{r4, r5, r6, lr}
 8006652:	2268      	movs	r2, #104	; 0x68
 8006654:	1e4d      	subs	r5, r1, #1
 8006656:	4355      	muls	r5, r2
 8006658:	460e      	mov	r6, r1
 800665a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800665e:	f7ff fa63 	bl	8005b28 <_malloc_r>
 8006662:	4604      	mov	r4, r0
 8006664:	b140      	cbz	r0, 8006678 <__sfmoreglue+0x28>
 8006666:	2100      	movs	r1, #0
 8006668:	e9c0 1600 	strd	r1, r6, [r0]
 800666c:	300c      	adds	r0, #12
 800666e:	60a0      	str	r0, [r4, #8]
 8006670:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006674:	f7fb fdf6 	bl	8002264 <memset>
 8006678:	4620      	mov	r0, r4
 800667a:	bd70      	pop	{r4, r5, r6, pc}

0800667c <__sfp_lock_acquire>:
 800667c:	4801      	ldr	r0, [pc, #4]	; (8006684 <__sfp_lock_acquire+0x8>)
 800667e:	f000 b8b3 	b.w	80067e8 <__retarget_lock_acquire_recursive>
 8006682:	bf00      	nop
 8006684:	2000033d 	.word	0x2000033d

08006688 <__sfp_lock_release>:
 8006688:	4801      	ldr	r0, [pc, #4]	; (8006690 <__sfp_lock_release+0x8>)
 800668a:	f000 b8ae 	b.w	80067ea <__retarget_lock_release_recursive>
 800668e:	bf00      	nop
 8006690:	2000033d 	.word	0x2000033d

08006694 <__sinit_lock_acquire>:
 8006694:	4801      	ldr	r0, [pc, #4]	; (800669c <__sinit_lock_acquire+0x8>)
 8006696:	f000 b8a7 	b.w	80067e8 <__retarget_lock_acquire_recursive>
 800669a:	bf00      	nop
 800669c:	2000033e 	.word	0x2000033e

080066a0 <__sinit_lock_release>:
 80066a0:	4801      	ldr	r0, [pc, #4]	; (80066a8 <__sinit_lock_release+0x8>)
 80066a2:	f000 b8a2 	b.w	80067ea <__retarget_lock_release_recursive>
 80066a6:	bf00      	nop
 80066a8:	2000033e 	.word	0x2000033e

080066ac <__sinit>:
 80066ac:	b510      	push	{r4, lr}
 80066ae:	4604      	mov	r4, r0
 80066b0:	f7ff fff0 	bl	8006694 <__sinit_lock_acquire>
 80066b4:	69a3      	ldr	r3, [r4, #24]
 80066b6:	b11b      	cbz	r3, 80066c0 <__sinit+0x14>
 80066b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066bc:	f7ff bff0 	b.w	80066a0 <__sinit_lock_release>
 80066c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80066c4:	6523      	str	r3, [r4, #80]	; 0x50
 80066c6:	4b13      	ldr	r3, [pc, #76]	; (8006714 <__sinit+0x68>)
 80066c8:	4a13      	ldr	r2, [pc, #76]	; (8006718 <__sinit+0x6c>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80066ce:	42a3      	cmp	r3, r4
 80066d0:	bf04      	itt	eq
 80066d2:	2301      	moveq	r3, #1
 80066d4:	61a3      	streq	r3, [r4, #24]
 80066d6:	4620      	mov	r0, r4
 80066d8:	f000 f820 	bl	800671c <__sfp>
 80066dc:	6060      	str	r0, [r4, #4]
 80066de:	4620      	mov	r0, r4
 80066e0:	f000 f81c 	bl	800671c <__sfp>
 80066e4:	60a0      	str	r0, [r4, #8]
 80066e6:	4620      	mov	r0, r4
 80066e8:	f000 f818 	bl	800671c <__sfp>
 80066ec:	2200      	movs	r2, #0
 80066ee:	60e0      	str	r0, [r4, #12]
 80066f0:	2104      	movs	r1, #4
 80066f2:	6860      	ldr	r0, [r4, #4]
 80066f4:	f7ff ff82 	bl	80065fc <std>
 80066f8:	68a0      	ldr	r0, [r4, #8]
 80066fa:	2201      	movs	r2, #1
 80066fc:	2109      	movs	r1, #9
 80066fe:	f7ff ff7d 	bl	80065fc <std>
 8006702:	68e0      	ldr	r0, [r4, #12]
 8006704:	2202      	movs	r2, #2
 8006706:	2112      	movs	r1, #18
 8006708:	f7ff ff78 	bl	80065fc <std>
 800670c:	2301      	movs	r3, #1
 800670e:	61a3      	str	r3, [r4, #24]
 8006710:	e7d2      	b.n	80066b8 <__sinit+0xc>
 8006712:	bf00      	nop
 8006714:	08006c20 	.word	0x08006c20
 8006718:	08006645 	.word	0x08006645

0800671c <__sfp>:
 800671c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671e:	4607      	mov	r7, r0
 8006720:	f7ff ffac 	bl	800667c <__sfp_lock_acquire>
 8006724:	4b1e      	ldr	r3, [pc, #120]	; (80067a0 <__sfp+0x84>)
 8006726:	681e      	ldr	r6, [r3, #0]
 8006728:	69b3      	ldr	r3, [r6, #24]
 800672a:	b913      	cbnz	r3, 8006732 <__sfp+0x16>
 800672c:	4630      	mov	r0, r6
 800672e:	f7ff ffbd 	bl	80066ac <__sinit>
 8006732:	3648      	adds	r6, #72	; 0x48
 8006734:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006738:	3b01      	subs	r3, #1
 800673a:	d503      	bpl.n	8006744 <__sfp+0x28>
 800673c:	6833      	ldr	r3, [r6, #0]
 800673e:	b30b      	cbz	r3, 8006784 <__sfp+0x68>
 8006740:	6836      	ldr	r6, [r6, #0]
 8006742:	e7f7      	b.n	8006734 <__sfp+0x18>
 8006744:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006748:	b9d5      	cbnz	r5, 8006780 <__sfp+0x64>
 800674a:	4b16      	ldr	r3, [pc, #88]	; (80067a4 <__sfp+0x88>)
 800674c:	60e3      	str	r3, [r4, #12]
 800674e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006752:	6665      	str	r5, [r4, #100]	; 0x64
 8006754:	f000 f847 	bl	80067e6 <__retarget_lock_init_recursive>
 8006758:	f7ff ff96 	bl	8006688 <__sfp_lock_release>
 800675c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006760:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006764:	6025      	str	r5, [r4, #0]
 8006766:	61a5      	str	r5, [r4, #24]
 8006768:	2208      	movs	r2, #8
 800676a:	4629      	mov	r1, r5
 800676c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006770:	f7fb fd78 	bl	8002264 <memset>
 8006774:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006778:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800677c:	4620      	mov	r0, r4
 800677e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006780:	3468      	adds	r4, #104	; 0x68
 8006782:	e7d9      	b.n	8006738 <__sfp+0x1c>
 8006784:	2104      	movs	r1, #4
 8006786:	4638      	mov	r0, r7
 8006788:	f7ff ff62 	bl	8006650 <__sfmoreglue>
 800678c:	4604      	mov	r4, r0
 800678e:	6030      	str	r0, [r6, #0]
 8006790:	2800      	cmp	r0, #0
 8006792:	d1d5      	bne.n	8006740 <__sfp+0x24>
 8006794:	f7ff ff78 	bl	8006688 <__sfp_lock_release>
 8006798:	230c      	movs	r3, #12
 800679a:	603b      	str	r3, [r7, #0]
 800679c:	e7ee      	b.n	800677c <__sfp+0x60>
 800679e:	bf00      	nop
 80067a0:	08006c20 	.word	0x08006c20
 80067a4:	ffff0001 	.word	0xffff0001

080067a8 <_fwalk_reent>:
 80067a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067ac:	4606      	mov	r6, r0
 80067ae:	4688      	mov	r8, r1
 80067b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80067b4:	2700      	movs	r7, #0
 80067b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067ba:	f1b9 0901 	subs.w	r9, r9, #1
 80067be:	d505      	bpl.n	80067cc <_fwalk_reent+0x24>
 80067c0:	6824      	ldr	r4, [r4, #0]
 80067c2:	2c00      	cmp	r4, #0
 80067c4:	d1f7      	bne.n	80067b6 <_fwalk_reent+0xe>
 80067c6:	4638      	mov	r0, r7
 80067c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067cc:	89ab      	ldrh	r3, [r5, #12]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d907      	bls.n	80067e2 <_fwalk_reent+0x3a>
 80067d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067d6:	3301      	adds	r3, #1
 80067d8:	d003      	beq.n	80067e2 <_fwalk_reent+0x3a>
 80067da:	4629      	mov	r1, r5
 80067dc:	4630      	mov	r0, r6
 80067de:	47c0      	blx	r8
 80067e0:	4307      	orrs	r7, r0
 80067e2:	3568      	adds	r5, #104	; 0x68
 80067e4:	e7e9      	b.n	80067ba <_fwalk_reent+0x12>

080067e6 <__retarget_lock_init_recursive>:
 80067e6:	4770      	bx	lr

080067e8 <__retarget_lock_acquire_recursive>:
 80067e8:	4770      	bx	lr

080067ea <__retarget_lock_release_recursive>:
 80067ea:	4770      	bx	lr

080067ec <__swhatbuf_r>:
 80067ec:	b570      	push	{r4, r5, r6, lr}
 80067ee:	460e      	mov	r6, r1
 80067f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067f4:	2900      	cmp	r1, #0
 80067f6:	b096      	sub	sp, #88	; 0x58
 80067f8:	4614      	mov	r4, r2
 80067fa:	461d      	mov	r5, r3
 80067fc:	da08      	bge.n	8006810 <__swhatbuf_r+0x24>
 80067fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	602a      	str	r2, [r5, #0]
 8006806:	061a      	lsls	r2, r3, #24
 8006808:	d410      	bmi.n	800682c <__swhatbuf_r+0x40>
 800680a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800680e:	e00e      	b.n	800682e <__swhatbuf_r+0x42>
 8006810:	466a      	mov	r2, sp
 8006812:	f000 f903 	bl	8006a1c <_fstat_r>
 8006816:	2800      	cmp	r0, #0
 8006818:	dbf1      	blt.n	80067fe <__swhatbuf_r+0x12>
 800681a:	9a01      	ldr	r2, [sp, #4]
 800681c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006820:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006824:	425a      	negs	r2, r3
 8006826:	415a      	adcs	r2, r3
 8006828:	602a      	str	r2, [r5, #0]
 800682a:	e7ee      	b.n	800680a <__swhatbuf_r+0x1e>
 800682c:	2340      	movs	r3, #64	; 0x40
 800682e:	2000      	movs	r0, #0
 8006830:	6023      	str	r3, [r4, #0]
 8006832:	b016      	add	sp, #88	; 0x58
 8006834:	bd70      	pop	{r4, r5, r6, pc}
	...

08006838 <__smakebuf_r>:
 8006838:	898b      	ldrh	r3, [r1, #12]
 800683a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800683c:	079d      	lsls	r5, r3, #30
 800683e:	4606      	mov	r6, r0
 8006840:	460c      	mov	r4, r1
 8006842:	d507      	bpl.n	8006854 <__smakebuf_r+0x1c>
 8006844:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006848:	6023      	str	r3, [r4, #0]
 800684a:	6123      	str	r3, [r4, #16]
 800684c:	2301      	movs	r3, #1
 800684e:	6163      	str	r3, [r4, #20]
 8006850:	b002      	add	sp, #8
 8006852:	bd70      	pop	{r4, r5, r6, pc}
 8006854:	ab01      	add	r3, sp, #4
 8006856:	466a      	mov	r2, sp
 8006858:	f7ff ffc8 	bl	80067ec <__swhatbuf_r>
 800685c:	9900      	ldr	r1, [sp, #0]
 800685e:	4605      	mov	r5, r0
 8006860:	4630      	mov	r0, r6
 8006862:	f7ff f961 	bl	8005b28 <_malloc_r>
 8006866:	b948      	cbnz	r0, 800687c <__smakebuf_r+0x44>
 8006868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800686c:	059a      	lsls	r2, r3, #22
 800686e:	d4ef      	bmi.n	8006850 <__smakebuf_r+0x18>
 8006870:	f023 0303 	bic.w	r3, r3, #3
 8006874:	f043 0302 	orr.w	r3, r3, #2
 8006878:	81a3      	strh	r3, [r4, #12]
 800687a:	e7e3      	b.n	8006844 <__smakebuf_r+0xc>
 800687c:	4b0d      	ldr	r3, [pc, #52]	; (80068b4 <__smakebuf_r+0x7c>)
 800687e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006880:	89a3      	ldrh	r3, [r4, #12]
 8006882:	6020      	str	r0, [r4, #0]
 8006884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006888:	81a3      	strh	r3, [r4, #12]
 800688a:	9b00      	ldr	r3, [sp, #0]
 800688c:	6163      	str	r3, [r4, #20]
 800688e:	9b01      	ldr	r3, [sp, #4]
 8006890:	6120      	str	r0, [r4, #16]
 8006892:	b15b      	cbz	r3, 80068ac <__smakebuf_r+0x74>
 8006894:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006898:	4630      	mov	r0, r6
 800689a:	f000 f8d1 	bl	8006a40 <_isatty_r>
 800689e:	b128      	cbz	r0, 80068ac <__smakebuf_r+0x74>
 80068a0:	89a3      	ldrh	r3, [r4, #12]
 80068a2:	f023 0303 	bic.w	r3, r3, #3
 80068a6:	f043 0301 	orr.w	r3, r3, #1
 80068aa:	81a3      	strh	r3, [r4, #12]
 80068ac:	89a0      	ldrh	r0, [r4, #12]
 80068ae:	4305      	orrs	r5, r0
 80068b0:	81a5      	strh	r5, [r4, #12]
 80068b2:	e7cd      	b.n	8006850 <__smakebuf_r+0x18>
 80068b4:	08006645 	.word	0x08006645

080068b8 <_malloc_usable_size_r>:
 80068b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068bc:	1f18      	subs	r0, r3, #4
 80068be:	2b00      	cmp	r3, #0
 80068c0:	bfbc      	itt	lt
 80068c2:	580b      	ldrlt	r3, [r1, r0]
 80068c4:	18c0      	addlt	r0, r0, r3
 80068c6:	4770      	bx	lr

080068c8 <_raise_r>:
 80068c8:	291f      	cmp	r1, #31
 80068ca:	b538      	push	{r3, r4, r5, lr}
 80068cc:	4604      	mov	r4, r0
 80068ce:	460d      	mov	r5, r1
 80068d0:	d904      	bls.n	80068dc <_raise_r+0x14>
 80068d2:	2316      	movs	r3, #22
 80068d4:	6003      	str	r3, [r0, #0]
 80068d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068da:	bd38      	pop	{r3, r4, r5, pc}
 80068dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80068de:	b112      	cbz	r2, 80068e6 <_raise_r+0x1e>
 80068e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068e4:	b94b      	cbnz	r3, 80068fa <_raise_r+0x32>
 80068e6:	4620      	mov	r0, r4
 80068e8:	f000 f830 	bl	800694c <_getpid_r>
 80068ec:	462a      	mov	r2, r5
 80068ee:	4601      	mov	r1, r0
 80068f0:	4620      	mov	r0, r4
 80068f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068f6:	f000 b817 	b.w	8006928 <_kill_r>
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d00a      	beq.n	8006914 <_raise_r+0x4c>
 80068fe:	1c59      	adds	r1, r3, #1
 8006900:	d103      	bne.n	800690a <_raise_r+0x42>
 8006902:	2316      	movs	r3, #22
 8006904:	6003      	str	r3, [r0, #0]
 8006906:	2001      	movs	r0, #1
 8006908:	e7e7      	b.n	80068da <_raise_r+0x12>
 800690a:	2400      	movs	r4, #0
 800690c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006910:	4628      	mov	r0, r5
 8006912:	4798      	blx	r3
 8006914:	2000      	movs	r0, #0
 8006916:	e7e0      	b.n	80068da <_raise_r+0x12>

08006918 <raise>:
 8006918:	4b02      	ldr	r3, [pc, #8]	; (8006924 <raise+0xc>)
 800691a:	4601      	mov	r1, r0
 800691c:	6818      	ldr	r0, [r3, #0]
 800691e:	f7ff bfd3 	b.w	80068c8 <_raise_r>
 8006922:	bf00      	nop
 8006924:	20000044 	.word	0x20000044

08006928 <_kill_r>:
 8006928:	b538      	push	{r3, r4, r5, lr}
 800692a:	4d07      	ldr	r5, [pc, #28]	; (8006948 <_kill_r+0x20>)
 800692c:	2300      	movs	r3, #0
 800692e:	4604      	mov	r4, r0
 8006930:	4608      	mov	r0, r1
 8006932:	4611      	mov	r1, r2
 8006934:	602b      	str	r3, [r5, #0]
 8006936:	f000 f8d7 	bl	8006ae8 <_kill>
 800693a:	1c43      	adds	r3, r0, #1
 800693c:	d102      	bne.n	8006944 <_kill_r+0x1c>
 800693e:	682b      	ldr	r3, [r5, #0]
 8006940:	b103      	cbz	r3, 8006944 <_kill_r+0x1c>
 8006942:	6023      	str	r3, [r4, #0]
 8006944:	bd38      	pop	{r3, r4, r5, pc}
 8006946:	bf00      	nop
 8006948:	20000338 	.word	0x20000338

0800694c <_getpid_r>:
 800694c:	f000 b8bc 	b.w	8006ac8 <_getpid>

08006950 <__sread>:
 8006950:	b510      	push	{r4, lr}
 8006952:	460c      	mov	r4, r1
 8006954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006958:	f000 f894 	bl	8006a84 <_read_r>
 800695c:	2800      	cmp	r0, #0
 800695e:	bfab      	itete	ge
 8006960:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006962:	89a3      	ldrhlt	r3, [r4, #12]
 8006964:	181b      	addge	r3, r3, r0
 8006966:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800696a:	bfac      	ite	ge
 800696c:	6563      	strge	r3, [r4, #84]	; 0x54
 800696e:	81a3      	strhlt	r3, [r4, #12]
 8006970:	bd10      	pop	{r4, pc}

08006972 <__swrite>:
 8006972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006976:	461f      	mov	r7, r3
 8006978:	898b      	ldrh	r3, [r1, #12]
 800697a:	05db      	lsls	r3, r3, #23
 800697c:	4605      	mov	r5, r0
 800697e:	460c      	mov	r4, r1
 8006980:	4616      	mov	r6, r2
 8006982:	d505      	bpl.n	8006990 <__swrite+0x1e>
 8006984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006988:	2302      	movs	r3, #2
 800698a:	2200      	movs	r2, #0
 800698c:	f000 f868 	bl	8006a60 <_lseek_r>
 8006990:	89a3      	ldrh	r3, [r4, #12]
 8006992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006996:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800699a:	81a3      	strh	r3, [r4, #12]
 800699c:	4632      	mov	r2, r6
 800699e:	463b      	mov	r3, r7
 80069a0:	4628      	mov	r0, r5
 80069a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069a6:	f000 b817 	b.w	80069d8 <_write_r>

080069aa <__sseek>:
 80069aa:	b510      	push	{r4, lr}
 80069ac:	460c      	mov	r4, r1
 80069ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069b2:	f000 f855 	bl	8006a60 <_lseek_r>
 80069b6:	1c43      	adds	r3, r0, #1
 80069b8:	89a3      	ldrh	r3, [r4, #12]
 80069ba:	bf15      	itete	ne
 80069bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80069be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80069c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80069c6:	81a3      	strheq	r3, [r4, #12]
 80069c8:	bf18      	it	ne
 80069ca:	81a3      	strhne	r3, [r4, #12]
 80069cc:	bd10      	pop	{r4, pc}

080069ce <__sclose>:
 80069ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069d2:	f000 b813 	b.w	80069fc <_close_r>
	...

080069d8 <_write_r>:
 80069d8:	b538      	push	{r3, r4, r5, lr}
 80069da:	4d07      	ldr	r5, [pc, #28]	; (80069f8 <_write_r+0x20>)
 80069dc:	4604      	mov	r4, r0
 80069de:	4608      	mov	r0, r1
 80069e0:	4611      	mov	r1, r2
 80069e2:	2200      	movs	r2, #0
 80069e4:	602a      	str	r2, [r5, #0]
 80069e6:	461a      	mov	r2, r3
 80069e8:	f000 f8a4 	bl	8006b34 <_write>
 80069ec:	1c43      	adds	r3, r0, #1
 80069ee:	d102      	bne.n	80069f6 <_write_r+0x1e>
 80069f0:	682b      	ldr	r3, [r5, #0]
 80069f2:	b103      	cbz	r3, 80069f6 <_write_r+0x1e>
 80069f4:	6023      	str	r3, [r4, #0]
 80069f6:	bd38      	pop	{r3, r4, r5, pc}
 80069f8:	20000338 	.word	0x20000338

080069fc <_close_r>:
 80069fc:	b538      	push	{r3, r4, r5, lr}
 80069fe:	4d06      	ldr	r5, [pc, #24]	; (8006a18 <_close_r+0x1c>)
 8006a00:	2300      	movs	r3, #0
 8006a02:	4604      	mov	r4, r0
 8006a04:	4608      	mov	r0, r1
 8006a06:	602b      	str	r3, [r5, #0]
 8006a08:	f000 f84e 	bl	8006aa8 <_close>
 8006a0c:	1c43      	adds	r3, r0, #1
 8006a0e:	d102      	bne.n	8006a16 <_close_r+0x1a>
 8006a10:	682b      	ldr	r3, [r5, #0]
 8006a12:	b103      	cbz	r3, 8006a16 <_close_r+0x1a>
 8006a14:	6023      	str	r3, [r4, #0]
 8006a16:	bd38      	pop	{r3, r4, r5, pc}
 8006a18:	20000338 	.word	0x20000338

08006a1c <_fstat_r>:
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	4d07      	ldr	r5, [pc, #28]	; (8006a3c <_fstat_r+0x20>)
 8006a20:	2300      	movs	r3, #0
 8006a22:	4604      	mov	r4, r0
 8006a24:	4608      	mov	r0, r1
 8006a26:	4611      	mov	r1, r2
 8006a28:	602b      	str	r3, [r5, #0]
 8006a2a:	f000 f845 	bl	8006ab8 <_fstat>
 8006a2e:	1c43      	adds	r3, r0, #1
 8006a30:	d102      	bne.n	8006a38 <_fstat_r+0x1c>
 8006a32:	682b      	ldr	r3, [r5, #0]
 8006a34:	b103      	cbz	r3, 8006a38 <_fstat_r+0x1c>
 8006a36:	6023      	str	r3, [r4, #0]
 8006a38:	bd38      	pop	{r3, r4, r5, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20000338 	.word	0x20000338

08006a40 <_isatty_r>:
 8006a40:	b538      	push	{r3, r4, r5, lr}
 8006a42:	4d06      	ldr	r5, [pc, #24]	; (8006a5c <_isatty_r+0x1c>)
 8006a44:	2300      	movs	r3, #0
 8006a46:	4604      	mov	r4, r0
 8006a48:	4608      	mov	r0, r1
 8006a4a:	602b      	str	r3, [r5, #0]
 8006a4c:	f000 f844 	bl	8006ad8 <_isatty>
 8006a50:	1c43      	adds	r3, r0, #1
 8006a52:	d102      	bne.n	8006a5a <_isatty_r+0x1a>
 8006a54:	682b      	ldr	r3, [r5, #0]
 8006a56:	b103      	cbz	r3, 8006a5a <_isatty_r+0x1a>
 8006a58:	6023      	str	r3, [r4, #0]
 8006a5a:	bd38      	pop	{r3, r4, r5, pc}
 8006a5c:	20000338 	.word	0x20000338

08006a60 <_lseek_r>:
 8006a60:	b538      	push	{r3, r4, r5, lr}
 8006a62:	4d07      	ldr	r5, [pc, #28]	; (8006a80 <_lseek_r+0x20>)
 8006a64:	4604      	mov	r4, r0
 8006a66:	4608      	mov	r0, r1
 8006a68:	4611      	mov	r1, r2
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	602a      	str	r2, [r5, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	f000 f842 	bl	8006af8 <_lseek>
 8006a74:	1c43      	adds	r3, r0, #1
 8006a76:	d102      	bne.n	8006a7e <_lseek_r+0x1e>
 8006a78:	682b      	ldr	r3, [r5, #0]
 8006a7a:	b103      	cbz	r3, 8006a7e <_lseek_r+0x1e>
 8006a7c:	6023      	str	r3, [r4, #0]
 8006a7e:	bd38      	pop	{r3, r4, r5, pc}
 8006a80:	20000338 	.word	0x20000338

08006a84 <_read_r>:
 8006a84:	b538      	push	{r3, r4, r5, lr}
 8006a86:	4d07      	ldr	r5, [pc, #28]	; (8006aa4 <_read_r+0x20>)
 8006a88:	4604      	mov	r4, r0
 8006a8a:	4608      	mov	r0, r1
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	2200      	movs	r2, #0
 8006a90:	602a      	str	r2, [r5, #0]
 8006a92:	461a      	mov	r2, r3
 8006a94:	f000 f838 	bl	8006b08 <_read>
 8006a98:	1c43      	adds	r3, r0, #1
 8006a9a:	d102      	bne.n	8006aa2 <_read_r+0x1e>
 8006a9c:	682b      	ldr	r3, [r5, #0]
 8006a9e:	b103      	cbz	r3, 8006aa2 <_read_r+0x1e>
 8006aa0:	6023      	str	r3, [r4, #0]
 8006aa2:	bd38      	pop	{r3, r4, r5, pc}
 8006aa4:	20000338 	.word	0x20000338

08006aa8 <_close>:
 8006aa8:	4b02      	ldr	r3, [pc, #8]	; (8006ab4 <_close+0xc>)
 8006aaa:	2258      	movs	r2, #88	; 0x58
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ab2:	4770      	bx	lr
 8006ab4:	20000338 	.word	0x20000338

08006ab8 <_fstat>:
 8006ab8:	4b02      	ldr	r3, [pc, #8]	; (8006ac4 <_fstat+0xc>)
 8006aba:	2258      	movs	r2, #88	; 0x58
 8006abc:	601a      	str	r2, [r3, #0]
 8006abe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ac2:	4770      	bx	lr
 8006ac4:	20000338 	.word	0x20000338

08006ac8 <_getpid>:
 8006ac8:	4b02      	ldr	r3, [pc, #8]	; (8006ad4 <_getpid+0xc>)
 8006aca:	2258      	movs	r2, #88	; 0x58
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ad2:	4770      	bx	lr
 8006ad4:	20000338 	.word	0x20000338

08006ad8 <_isatty>:
 8006ad8:	4b02      	ldr	r3, [pc, #8]	; (8006ae4 <_isatty+0xc>)
 8006ada:	2258      	movs	r2, #88	; 0x58
 8006adc:	601a      	str	r2, [r3, #0]
 8006ade:	2000      	movs	r0, #0
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	20000338 	.word	0x20000338

08006ae8 <_kill>:
 8006ae8:	4b02      	ldr	r3, [pc, #8]	; (8006af4 <_kill+0xc>)
 8006aea:	2258      	movs	r2, #88	; 0x58
 8006aec:	601a      	str	r2, [r3, #0]
 8006aee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006af2:	4770      	bx	lr
 8006af4:	20000338 	.word	0x20000338

08006af8 <_lseek>:
 8006af8:	4b02      	ldr	r3, [pc, #8]	; (8006b04 <_lseek+0xc>)
 8006afa:	2258      	movs	r2, #88	; 0x58
 8006afc:	601a      	str	r2, [r3, #0]
 8006afe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b02:	4770      	bx	lr
 8006b04:	20000338 	.word	0x20000338

08006b08 <_read>:
 8006b08:	4b02      	ldr	r3, [pc, #8]	; (8006b14 <_read+0xc>)
 8006b0a:	2258      	movs	r2, #88	; 0x58
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b12:	4770      	bx	lr
 8006b14:	20000338 	.word	0x20000338

08006b18 <_sbrk>:
 8006b18:	4a04      	ldr	r2, [pc, #16]	; (8006b2c <_sbrk+0x14>)
 8006b1a:	6811      	ldr	r1, [r2, #0]
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	b909      	cbnz	r1, 8006b24 <_sbrk+0xc>
 8006b20:	4903      	ldr	r1, [pc, #12]	; (8006b30 <_sbrk+0x18>)
 8006b22:	6011      	str	r1, [r2, #0]
 8006b24:	6810      	ldr	r0, [r2, #0]
 8006b26:	4403      	add	r3, r0
 8006b28:	6013      	str	r3, [r2, #0]
 8006b2a:	4770      	bx	lr
 8006b2c:	20000340 	.word	0x20000340
 8006b30:	20000348 	.word	0x20000348

08006b34 <_write>:
 8006b34:	4b02      	ldr	r3, [pc, #8]	; (8006b40 <_write+0xc>)
 8006b36:	2258      	movs	r2, #88	; 0x58
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b3e:	4770      	bx	lr
 8006b40:	20000338 	.word	0x20000338

08006b44 <_exit>:
 8006b44:	e7fe      	b.n	8006b44 <_exit>
	...

08006b48 <_init>:
 8006b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4a:	bf00      	nop
 8006b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b4e:	bc08      	pop	{r3}
 8006b50:	469e      	mov	lr, r3
 8006b52:	4770      	bx	lr

08006b54 <_fini>:
 8006b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b56:	bf00      	nop
 8006b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b5a:	bc08      	pop	{r3}
 8006b5c:	469e      	mov	lr, r3
 8006b5e:	4770      	bx	lr
