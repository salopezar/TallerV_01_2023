
solucionTarea4Especial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bf0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  08007d90  08007d90  00017d90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008364  08008364  00020218  2**0
                  CONTENTS
  4 .ARM          00000000  08008364  08008364  00020218  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008364  08008364  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008364  08008364  00018364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008368  08008368  00018368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800836c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005f68  20000218  08008584  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006180  08008584  00026180  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   000034d0  00000000  00000000  00020242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bda  00000000  00000000  00023712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000270  00000000  00000000  000242f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001f8  00000000  00000000  00024560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fc4f  00000000  00000000  00024758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003da6  00000000  00000000  000343a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055f6c  00000000  00000000  0003814d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008e0b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f48  00000000  00000000  0008e10c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00090054  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00090120  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007d78 	.word	0x08007d78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	08007d78 	.word	0x08007d78

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_frsub>:
 8000c98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	e002      	b.n	8000ca4 <__addsf3>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_fsub>:
 8000ca0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ca4 <__addsf3>:
 8000ca4:	0042      	lsls	r2, r0, #1
 8000ca6:	bf1f      	itttt	ne
 8000ca8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cac:	ea92 0f03 	teqne	r2, r3
 8000cb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb8:	d06a      	beq.n	8000d90 <__addsf3+0xec>
 8000cba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cc2:	bfc1      	itttt	gt
 8000cc4:	18d2      	addgt	r2, r2, r3
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	4048      	eorgt	r0, r1
 8000cca:	4041      	eorgt	r1, r0
 8000ccc:	bfb8      	it	lt
 8000cce:	425b      	neglt	r3, r3
 8000cd0:	2b19      	cmp	r3, #25
 8000cd2:	bf88      	it	hi
 8000cd4:	4770      	bxhi	lr
 8000cd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4240      	negne	r0, r0
 8000ce6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4249      	negne	r1, r1
 8000cf6:	ea92 0f03 	teq	r2, r3
 8000cfa:	d03f      	beq.n	8000d7c <__addsf3+0xd8>
 8000cfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000d00:	fa41 fc03 	asr.w	ip, r1, r3
 8000d04:	eb10 000c 	adds.w	r0, r0, ip
 8000d08:	f1c3 0320 	rsb	r3, r3, #32
 8000d0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__addsf3+0x78>
 8000d16:	4249      	negs	r1, r1
 8000d18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d20:	d313      	bcc.n	8000d4a <__addsf3+0xa6>
 8000d22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d26:	d306      	bcc.n	8000d36 <__addsf3+0x92>
 8000d28:	0840      	lsrs	r0, r0, #1
 8000d2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2e:	f102 0201 	add.w	r2, r2, #1
 8000d32:	2afe      	cmp	r2, #254	; 0xfe
 8000d34:	d251      	bcs.n	8000dda <__addsf3+0x136>
 8000d36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	ea40 0003 	orr.w	r0, r0, r3
 8000d48:	4770      	bx	lr
 8000d4a:	0049      	lsls	r1, r1, #1
 8000d4c:	eb40 0000 	adc.w	r0, r0, r0
 8000d50:	3a01      	subs	r2, #1
 8000d52:	bf28      	it	cs
 8000d54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d58:	d2ed      	bcs.n	8000d36 <__addsf3+0x92>
 8000d5a:	fab0 fc80 	clz	ip, r0
 8000d5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d62:	ebb2 020c 	subs.w	r2, r2, ip
 8000d66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d6a:	bfaa      	itet	ge
 8000d6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d70:	4252      	neglt	r2, r2
 8000d72:	4318      	orrge	r0, r3
 8000d74:	bfbc      	itt	lt
 8000d76:	40d0      	lsrlt	r0, r2
 8000d78:	4318      	orrlt	r0, r3
 8000d7a:	4770      	bx	lr
 8000d7c:	f092 0f00 	teq	r2, #0
 8000d80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d84:	bf06      	itte	eq
 8000d86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d8a:	3201      	addeq	r2, #1
 8000d8c:	3b01      	subne	r3, #1
 8000d8e:	e7b5      	b.n	8000cfc <__addsf3+0x58>
 8000d90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	bf18      	it	ne
 8000d9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9e:	d021      	beq.n	8000de4 <__addsf3+0x140>
 8000da0:	ea92 0f03 	teq	r2, r3
 8000da4:	d004      	beq.n	8000db0 <__addsf3+0x10c>
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	bf08      	it	eq
 8000dac:	4608      	moveq	r0, r1
 8000dae:	4770      	bx	lr
 8000db0:	ea90 0f01 	teq	r0, r1
 8000db4:	bf1c      	itt	ne
 8000db6:	2000      	movne	r0, #0
 8000db8:	4770      	bxne	lr
 8000dba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dbe:	d104      	bne.n	8000dca <__addsf3+0x126>
 8000dc0:	0040      	lsls	r0, r0, #1
 8000dc2:	bf28      	it	cs
 8000dc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc8:	4770      	bx	lr
 8000dca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dce:	bf3c      	itt	cc
 8000dd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dd4:	4770      	bxcc	lr
 8000dd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de2:	4770      	bx	lr
 8000de4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de8:	bf16      	itet	ne
 8000dea:	4608      	movne	r0, r1
 8000dec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000df0:	4601      	movne	r1, r0
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	bf06      	itte	eq
 8000df6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dfa:	ea90 0f01 	teqeq	r0, r1
 8000dfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_ui2f>:
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e004      	b.n	8000e14 <__aeabi_i2f+0x8>
 8000e0a:	bf00      	nop

08000e0c <__aeabi_i2f>:
 8000e0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e10:	bf48      	it	mi
 8000e12:	4240      	negmi	r0, r0
 8000e14:	ea5f 0c00 	movs.w	ip, r0
 8000e18:	bf08      	it	eq
 8000e1a:	4770      	bxeq	lr
 8000e1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e20:	4601      	mov	r1, r0
 8000e22:	f04f 0000 	mov.w	r0, #0
 8000e26:	e01c      	b.n	8000e62 <__aeabi_l2f+0x2a>

08000e28 <__aeabi_ul2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e00a      	b.n	8000e4c <__aeabi_l2f+0x14>
 8000e36:	bf00      	nop

08000e38 <__aeabi_l2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e44:	d502      	bpl.n	8000e4c <__aeabi_l2f+0x14>
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	ea5f 0c01 	movs.w	ip, r1
 8000e50:	bf02      	ittt	eq
 8000e52:	4684      	moveq	ip, r0
 8000e54:	4601      	moveq	r1, r0
 8000e56:	2000      	moveq	r0, #0
 8000e58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e5c:	bf08      	it	eq
 8000e5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e66:	fabc f28c 	clz	r2, ip
 8000e6a:	3a08      	subs	r2, #8
 8000e6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e70:	db10      	blt.n	8000e94 <__aeabi_l2f+0x5c>
 8000e72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e76:	4463      	add	r3, ip
 8000e78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7c:	f1c2 0220 	rsb	r2, r2, #32
 8000e80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e84:	fa20 f202 	lsr.w	r2, r0, r2
 8000e88:	eb43 0002 	adc.w	r0, r3, r2
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f102 0220 	add.w	r2, r2, #32
 8000e98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_fmul>:
 8000eb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ebc:	bf1e      	ittt	ne
 8000ebe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ec2:	ea92 0f0c 	teqne	r2, ip
 8000ec6:	ea93 0f0c 	teqne	r3, ip
 8000eca:	d06f      	beq.n	8000fac <__aeabi_fmul+0xf8>
 8000ecc:	441a      	add	r2, r3
 8000ece:	ea80 0c01 	eor.w	ip, r0, r1
 8000ed2:	0240      	lsls	r0, r0, #9
 8000ed4:	bf18      	it	ne
 8000ed6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000eda:	d01e      	beq.n	8000f1a <__aeabi_fmul+0x66>
 8000edc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ee0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ee4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ee8:	fba0 3101 	umull	r3, r1, r0, r1
 8000eec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ef4:	bf3e      	ittt	cc
 8000ef6:	0049      	lslcc	r1, r1, #1
 8000ef8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	ea40 0001 	orr.w	r0, r0, r1
 8000f02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000f06:	2afd      	cmp	r2, #253	; 0xfd
 8000f08:	d81d      	bhi.n	8000f46 <__aeabi_fmul+0x92>
 8000f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f12:	bf08      	it	eq
 8000f14:	f020 0001 	biceq.w	r0, r0, #1
 8000f18:	4770      	bx	lr
 8000f1a:	f090 0f00 	teq	r0, #0
 8000f1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f22:	bf08      	it	eq
 8000f24:	0249      	lsleq	r1, r1, #9
 8000f26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000f2e:	3a7f      	subs	r2, #127	; 0x7f
 8000f30:	bfc2      	ittt	gt
 8000f32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f3a:	4770      	bxgt	lr
 8000f3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	3a01      	subs	r2, #1
 8000f46:	dc5d      	bgt.n	8001004 <__aeabi_fmul+0x150>
 8000f48:	f112 0f19 	cmn.w	r2, #25
 8000f4c:	bfdc      	itt	le
 8000f4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000f52:	4770      	bxle	lr
 8000f54:	f1c2 0200 	rsb	r2, r2, #0
 8000f58:	0041      	lsls	r1, r0, #1
 8000f5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000f5e:	f1c2 0220 	rsb	r2, r2, #32
 8000f62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f6a:	f140 0000 	adc.w	r0, r0, #0
 8000f6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f72:	bf08      	it	eq
 8000f74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f78:	4770      	bx	lr
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fmul+0xce>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fmul+0xe6>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e78f      	b.n	8000ecc <__aeabi_fmul+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	bf18      	it	ne
 8000fb6:	ea93 0f0c 	teqne	r3, ip
 8000fba:	d00a      	beq.n	8000fd2 <__aeabi_fmul+0x11e>
 8000fbc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc0:	bf18      	it	ne
 8000fc2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	d1d8      	bne.n	8000f7a <__aeabi_fmul+0xc6>
 8000fc8:	ea80 0001 	eor.w	r0, r0, r1
 8000fcc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fd0:	4770      	bx	lr
 8000fd2:	f090 0f00 	teq	r0, #0
 8000fd6:	bf17      	itett	ne
 8000fd8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000fdc:	4608      	moveq	r0, r1
 8000fde:	f091 0f00 	teqne	r1, #0
 8000fe2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000fe6:	d014      	beq.n	8001012 <__aeabi_fmul+0x15e>
 8000fe8:	ea92 0f0c 	teq	r2, ip
 8000fec:	d101      	bne.n	8000ff2 <__aeabi_fmul+0x13e>
 8000fee:	0242      	lsls	r2, r0, #9
 8000ff0:	d10f      	bne.n	8001012 <__aeabi_fmul+0x15e>
 8000ff2:	ea93 0f0c 	teq	r3, ip
 8000ff6:	d103      	bne.n	8001000 <__aeabi_fmul+0x14c>
 8000ff8:	024b      	lsls	r3, r1, #9
 8000ffa:	bf18      	it	ne
 8000ffc:	4608      	movne	r0, r1
 8000ffe:	d108      	bne.n	8001012 <__aeabi_fmul+0x15e>
 8001000:	ea80 0001 	eor.w	r0, r0, r1
 8001004:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8001008:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800100c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001010:	4770      	bx	lr
 8001012:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001016:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800101a:	4770      	bx	lr

0800101c <__aeabi_fdiv>:
 800101c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001020:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001024:	bf1e      	ittt	ne
 8001026:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800102a:	ea92 0f0c 	teqne	r2, ip
 800102e:	ea93 0f0c 	teqne	r3, ip
 8001032:	d069      	beq.n	8001108 <__aeabi_fdiv+0xec>
 8001034:	eba2 0203 	sub.w	r2, r2, r3
 8001038:	ea80 0c01 	eor.w	ip, r0, r1
 800103c:	0249      	lsls	r1, r1, #9
 800103e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001042:	d037      	beq.n	80010b4 <__aeabi_fdiv+0x98>
 8001044:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001048:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800104c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001050:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001054:	428b      	cmp	r3, r1
 8001056:	bf38      	it	cc
 8001058:	005b      	lslcc	r3, r3, #1
 800105a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800105e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001062:	428b      	cmp	r3, r1
 8001064:	bf24      	itt	cs
 8001066:	1a5b      	subcs	r3, r3, r1
 8001068:	ea40 000c 	orrcs.w	r0, r0, ip
 800106c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001070:	bf24      	itt	cs
 8001072:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001076:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800107a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800107e:	bf24      	itt	cs
 8001080:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001084:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001088:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800108c:	bf24      	itt	cs
 800108e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001092:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001096:	011b      	lsls	r3, r3, #4
 8001098:	bf18      	it	ne
 800109a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800109e:	d1e0      	bne.n	8001062 <__aeabi_fdiv+0x46>
 80010a0:	2afd      	cmp	r2, #253	; 0xfd
 80010a2:	f63f af50 	bhi.w	8000f46 <__aeabi_fmul+0x92>
 80010a6:	428b      	cmp	r3, r1
 80010a8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80010ac:	bf08      	it	eq
 80010ae:	f020 0001 	biceq.w	r0, r0, #1
 80010b2:	4770      	bx	lr
 80010b4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80010b8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80010bc:	327f      	adds	r2, #127	; 0x7f
 80010be:	bfc2      	ittt	gt
 80010c0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80010c4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80010c8:	4770      	bxgt	lr
 80010ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	3a01      	subs	r2, #1
 80010d4:	e737      	b.n	8000f46 <__aeabi_fmul+0x92>
 80010d6:	f092 0f00 	teq	r2, #0
 80010da:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80010de:	bf02      	ittt	eq
 80010e0:	0040      	lsleq	r0, r0, #1
 80010e2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80010e6:	3a01      	subeq	r2, #1
 80010e8:	d0f9      	beq.n	80010de <__aeabi_fdiv+0xc2>
 80010ea:	ea40 000c 	orr.w	r0, r0, ip
 80010ee:	f093 0f00 	teq	r3, #0
 80010f2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80010f6:	bf02      	ittt	eq
 80010f8:	0049      	lsleq	r1, r1, #1
 80010fa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010fe:	3b01      	subeq	r3, #1
 8001100:	d0f9      	beq.n	80010f6 <__aeabi_fdiv+0xda>
 8001102:	ea41 010c 	orr.w	r1, r1, ip
 8001106:	e795      	b.n	8001034 <__aeabi_fdiv+0x18>
 8001108:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800110c:	ea92 0f0c 	teq	r2, ip
 8001110:	d108      	bne.n	8001124 <__aeabi_fdiv+0x108>
 8001112:	0242      	lsls	r2, r0, #9
 8001114:	f47f af7d 	bne.w	8001012 <__aeabi_fmul+0x15e>
 8001118:	ea93 0f0c 	teq	r3, ip
 800111c:	f47f af70 	bne.w	8001000 <__aeabi_fmul+0x14c>
 8001120:	4608      	mov	r0, r1
 8001122:	e776      	b.n	8001012 <__aeabi_fmul+0x15e>
 8001124:	ea93 0f0c 	teq	r3, ip
 8001128:	d104      	bne.n	8001134 <__aeabi_fdiv+0x118>
 800112a:	024b      	lsls	r3, r1, #9
 800112c:	f43f af4c 	beq.w	8000fc8 <__aeabi_fmul+0x114>
 8001130:	4608      	mov	r0, r1
 8001132:	e76e      	b.n	8001012 <__aeabi_fmul+0x15e>
 8001134:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001138:	bf18      	it	ne
 800113a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800113e:	d1ca      	bne.n	80010d6 <__aeabi_fdiv+0xba>
 8001140:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001144:	f47f af5c 	bne.w	8001000 <__aeabi_fmul+0x14c>
 8001148:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800114c:	f47f af3c 	bne.w	8000fc8 <__aeabi_fmul+0x114>
 8001150:	e75f      	b.n	8001012 <__aeabi_fmul+0x15e>
 8001152:	bf00      	nop

08001154 <__aeabi_f2uiz>:
 8001154:	0042      	lsls	r2, r0, #1
 8001156:	d20e      	bcs.n	8001176 <__aeabi_f2uiz+0x22>
 8001158:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800115c:	d30b      	bcc.n	8001176 <__aeabi_f2uiz+0x22>
 800115e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001162:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001166:	d409      	bmi.n	800117c <__aeabi_f2uiz+0x28>
 8001168:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800116c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001170:	fa23 f002 	lsr.w	r0, r3, r2
 8001174:	4770      	bx	lr
 8001176:	f04f 0000 	mov.w	r0, #0
 800117a:	4770      	bx	lr
 800117c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001180:	d101      	bne.n	8001186 <__aeabi_f2uiz+0x32>
 8001182:	0242      	lsls	r2, r0, #9
 8001184:	d102      	bne.n	800118c <__aeabi_f2uiz+0x38>
 8001186:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800118a:	4770      	bx	lr
 800118c:	f04f 0000 	mov.w	r0, #0
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop

08001194 <__aeabi_d2lz>:
 8001194:	b538      	push	{r3, r4, r5, lr}
 8001196:	4605      	mov	r5, r0
 8001198:	460c      	mov	r4, r1
 800119a:	4628      	mov	r0, r5
 800119c:	4621      	mov	r1, r4
 800119e:	2200      	movs	r2, #0
 80011a0:	2300      	movs	r3, #0
 80011a2:	f7ff fca3 	bl	8000aec <__aeabi_dcmplt>
 80011a6:	b928      	cbnz	r0, 80011b4 <__aeabi_d2lz+0x20>
 80011a8:	4628      	mov	r0, r5
 80011aa:	4621      	mov	r1, r4
 80011ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011b0:	f000 b80a 	b.w	80011c8 <__aeabi_d2ulz>
 80011b4:	4628      	mov	r0, r5
 80011b6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011ba:	f000 f805 	bl	80011c8 <__aeabi_d2ulz>
 80011be:	4240      	negs	r0, r0
 80011c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011c4:	bd38      	pop	{r3, r4, r5, pc}
 80011c6:	bf00      	nop

080011c8 <__aeabi_d2ulz>:
 80011c8:	b5d0      	push	{r4, r6, r7, lr}
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <__aeabi_d2ulz+0x34>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	4606      	mov	r6, r0
 80011d0:	460f      	mov	r7, r1
 80011d2:	f7ff fa19 	bl	8000608 <__aeabi_dmul>
 80011d6:	f7ff fcef 	bl	8000bb8 <__aeabi_d2uiz>
 80011da:	4604      	mov	r4, r0
 80011dc:	f7ff f99a 	bl	8000514 <__aeabi_ui2d>
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <__aeabi_d2ulz+0x38>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	f7ff fa10 	bl	8000608 <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4630      	mov	r0, r6
 80011ee:	4639      	mov	r1, r7
 80011f0:	f7ff f852 	bl	8000298 <__aeabi_dsub>
 80011f4:	f7ff fce0 	bl	8000bb8 <__aeabi_d2uiz>
 80011f8:	4621      	mov	r1, r4
 80011fa:	bdd0      	pop	{r4, r6, r7, pc}
 80011fc:	3df00000 	.word	0x3df00000
 8001200:	41f00000 	.word	0x41f00000
 8001204:	00000000 	.word	0x00000000

08001208 <main>:

// La función de inicialización del sistema
void init_Hardware(void);


int main(void){
 8001208:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800120c:	b094      	sub	sp, #80	; 0x50
 800120e:	af06      	add	r7, sp, #24
	// Se llama la función de inicialización.
	init_Hardware();
 8001210:	f000 fd3a 	bl	8001c88 <init_Hardware>
		 * los ejes X, Y y Z. El código utiliza funciones de comunicación I2C
		 * para interactuar con el acelerómetro. Se entra en el ciclo cuando lo que
		 * se envía es diferente del caracter nulo,
		 */

		if(rxData != '\0'){
 8001214:	4b88      	ldr	r3, [pc, #544]	; (8001438 <main+0x230>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0fb      	beq.n	8001214 <main+0xc>
			//writeChar(&USART6Comm, rxData);
			// Lectura sobre el WHO_AM_I del acelerómetro.
			if(flagMuestreo == 1){
 800121c:	4b87      	ldr	r3, [pc, #540]	; (800143c <main+0x234>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b01      	cmp	r3, #1
 8001222:	f040 817a 	bne.w	800151a <main+0x312>
				if(rxData == 'w'){
 8001226:	4b84      	ldr	r3, [pc, #528]	; (8001438 <main+0x230>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b77      	cmp	r3, #119	; 0x77
 800122c:	d11e      	bne.n	800126c <main+0x64>
					sprintf(bufferData, "WHO_AM_I? (r)\n");
 800122e:	4984      	ldr	r1, [pc, #528]	; (8001440 <main+0x238>)
 8001230:	4884      	ldr	r0, [pc, #528]	; (8001444 <main+0x23c>)
 8001232:	f002 ffa1 	bl	8004178 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 8001236:	4983      	ldr	r1, [pc, #524]	; (8001444 <main+0x23c>)
 8001238:	4883      	ldr	r0, [pc, #524]	; (8001448 <main+0x240>)
 800123a:	f002 f8aa 	bl	8003392 <writeMsg>
					// Configuración del I2C e impresión del mensaje,
					i2cBuffer = i2c_readSingleRegister(&Acelerometer, WHO_AM_I);
 800123e:	2100      	movs	r1, #0
 8001240:	4882      	ldr	r0, [pc, #520]	; (800144c <main+0x244>)
 8001242:	f001 fb0d 	bl	8002860 <i2c_readSingleRegister>
 8001246:	4603      	mov	r3, r0
 8001248:	461a      	mov	r2, r3
 800124a:	4b81      	ldr	r3, [pc, #516]	; (8001450 <main+0x248>)
 800124c:	701a      	strb	r2, [r3, #0]
					sprintf(bufferData, "dataRead = 0x%x \n", (unsigned int) i2cBuffer);
 800124e:	4b80      	ldr	r3, [pc, #512]	; (8001450 <main+0x248>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	497f      	ldr	r1, [pc, #508]	; (8001454 <main+0x24c>)
 8001256:	487b      	ldr	r0, [pc, #492]	; (8001444 <main+0x23c>)
 8001258:	f002 ff8e 	bl	8004178 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 800125c:	4979      	ldr	r1, [pc, #484]	; (8001444 <main+0x23c>)
 800125e:	487a      	ldr	r0, [pc, #488]	; (8001448 <main+0x240>)
 8001260:	f002 f897 	bl	8003392 <writeMsg>
					rxData = '\0';
 8001264:	4b74      	ldr	r3, [pc, #464]	; (8001438 <main+0x230>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
 800126a:	e156      	b.n	800151a <main+0x312>
				}
				// Estado del acelerómetro
				else if (rxData == 'p'){
 800126c:	4b72      	ldr	r3, [pc, #456]	; (8001438 <main+0x230>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b70      	cmp	r3, #112	; 0x70
 8001272:	d11e      	bne.n	80012b2 <main+0xaa>
					sprintf(bufferData, "PWR_MGMT_1 state (r)\n");
 8001274:	4978      	ldr	r1, [pc, #480]	; (8001458 <main+0x250>)
 8001276:	4873      	ldr	r0, [pc, #460]	; (8001444 <main+0x23c>)
 8001278:	f002 ff7e 	bl	8004178 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 800127c:	4971      	ldr	r1, [pc, #452]	; (8001444 <main+0x23c>)
 800127e:	4872      	ldr	r0, [pc, #456]	; (8001448 <main+0x240>)
 8001280:	f002 f887 	bl	8003392 <writeMsg>
					i2cBuffer = i2c_readSingleRegister(&Acelerometer, POWER_CTL);
 8001284:	212d      	movs	r1, #45	; 0x2d
 8001286:	4871      	ldr	r0, [pc, #452]	; (800144c <main+0x244>)
 8001288:	f001 faea 	bl	8002860 <i2c_readSingleRegister>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	4b6f      	ldr	r3, [pc, #444]	; (8001450 <main+0x248>)
 8001292:	701a      	strb	r2, [r3, #0]
					sprintf(bufferData, "dataRead = 0x%x \n", (unsigned int) i2cBuffer);
 8001294:	4b6e      	ldr	r3, [pc, #440]	; (8001450 <main+0x248>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	496e      	ldr	r1, [pc, #440]	; (8001454 <main+0x24c>)
 800129c:	4869      	ldr	r0, [pc, #420]	; (8001444 <main+0x23c>)
 800129e:	f002 ff6b 	bl	8004178 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 80012a2:	4968      	ldr	r1, [pc, #416]	; (8001444 <main+0x23c>)
 80012a4:	4868      	ldr	r0, [pc, #416]	; (8001448 <main+0x240>)
 80012a6:	f002 f874 	bl	8003392 <writeMsg>
					rxData = '\0';
 80012aa:	4b63      	ldr	r3, [pc, #396]	; (8001438 <main+0x230>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
 80012b0:	e133      	b.n	800151a <main+0x312>
				}
				// Reset para el acelerómetro.
				else if (rxData == 'r'){
 80012b2:	4b61      	ldr	r3, [pc, #388]	; (8001438 <main+0x230>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b72      	cmp	r3, #114	; 0x72
 80012b8:	d110      	bne.n	80012dc <main+0xd4>
					sprintf(bufferData, "PWR_MGMT_1 reset (w)\n");
 80012ba:	4968      	ldr	r1, [pc, #416]	; (800145c <main+0x254>)
 80012bc:	4861      	ldr	r0, [pc, #388]	; (8001444 <main+0x23c>)
 80012be:	f002 ff5b 	bl	8004178 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 80012c2:	4960      	ldr	r1, [pc, #384]	; (8001444 <main+0x23c>)
 80012c4:	4860      	ldr	r0, [pc, #384]	; (8001448 <main+0x240>)
 80012c6:	f002 f864 	bl	8003392 <writeMsg>
					// Configuración del reset dentro del I2C.
					i2c_writeSingleRegister(&Acelerometer, POWER_CTL , 0x2D);
 80012ca:	222d      	movs	r2, #45	; 0x2d
 80012cc:	212d      	movs	r1, #45	; 0x2d
 80012ce:	485f      	ldr	r0, [pc, #380]	; (800144c <main+0x244>)
 80012d0:	f001 faf7 	bl	80028c2 <i2c_writeSingleRegister>
					rxData = '\0';
 80012d4:	4b58      	ldr	r3, [pc, #352]	; (8001438 <main+0x230>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
 80012da:	e11e      	b.n	800151a <main+0x312>
				}
				// Para el eje X y su lectura presionando la tecla "x".
				else if (rxData == 'x'){
 80012dc:	4b56      	ldr	r3, [pc, #344]	; (8001438 <main+0x230>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b78      	cmp	r3, #120	; 0x78
 80012e2:	d14d      	bne.n	8001380 <main+0x178>
					sprintf(bufferData, "Axis X data (r) \n");
 80012e4:	495e      	ldr	r1, [pc, #376]	; (8001460 <main+0x258>)
 80012e6:	4857      	ldr	r0, [pc, #348]	; (8001444 <main+0x23c>)
 80012e8:	f002 ff46 	bl	8004178 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 80012ec:	4955      	ldr	r1, [pc, #340]	; (8001444 <main+0x23c>)
 80012ee:	4856      	ldr	r0, [pc, #344]	; (8001448 <main+0x240>)
 80012f0:	f002 f84f 	bl	8003392 <writeMsg>
					uint8_t AccelX_low =  i2c_readSingleRegister(&Acelerometer, ACCEL_X1_L);
 80012f4:	2132      	movs	r1, #50	; 0x32
 80012f6:	4855      	ldr	r0, [pc, #340]	; (800144c <main+0x244>)
 80012f8:	f001 fab2 	bl	8002860 <i2c_readSingleRegister>
 80012fc:	4603      	mov	r3, r0
 80012fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					uint8_t AccelX_high = i2c_readSingleRegister(&Acelerometer, ACCEL_X1_H);
 8001302:	2133      	movs	r1, #51	; 0x33
 8001304:	4851      	ldr	r0, [pc, #324]	; (800144c <main+0x244>)
 8001306:	f001 faab 	bl	8002860 <i2c_readSingleRegister>
 800130a:	4603      	mov	r3, r0
 800130c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					int16_t AccelX = AccelX_high << 8 | AccelX_low;
 8001310:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b21a      	sxth	r2, r3
 8001318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800131c:	b21b      	sxth	r3, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	84bb      	strh	r3, [r7, #36]	; 0x24
					X_axis = AccelX * 0.0039 * 9.8;
 8001322:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f904 	bl	8000534 <__aeabi_i2d>
 800132c:	a33e      	add	r3, pc, #248	; (adr r3, 8001428 <main+0x220>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	f7ff f969 	bl	8000608 <__aeabi_dmul>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	a33c      	add	r3, pc, #240	; (adr r3, 8001430 <main+0x228>)
 8001340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001344:	f7ff f960 	bl	8000608 <__aeabi_dmul>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff fc52 	bl	8000bf8 <__aeabi_d2f>
 8001354:	4603      	mov	r3, r0
 8001356:	4a43      	ldr	r2, [pc, #268]	; (8001464 <main+0x25c>)
 8001358:	6013      	str	r3, [r2, #0]
					sprintf(bufferData, "AccelX = %.2f \n", X_axis);
 800135a:	4b42      	ldr	r3, [pc, #264]	; (8001464 <main+0x25c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f8fa 	bl	8000558 <__aeabi_f2d>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	493f      	ldr	r1, [pc, #252]	; (8001468 <main+0x260>)
 800136a:	4836      	ldr	r0, [pc, #216]	; (8001444 <main+0x23c>)
 800136c:	f002 ff04 	bl	8004178 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 8001370:	4934      	ldr	r1, [pc, #208]	; (8001444 <main+0x23c>)
 8001372:	4835      	ldr	r0, [pc, #212]	; (8001448 <main+0x240>)
 8001374:	f002 f80d 	bl	8003392 <writeMsg>
					rxData = '\0';
 8001378:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <main+0x230>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
 800137e:	e0cc      	b.n	800151a <main+0x312>
				}
				// Para el eje Y y su lectura presionando la tecla "y".
				else if(rxData == 'y'){
 8001380:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <main+0x230>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b79      	cmp	r3, #121	; 0x79
 8001386:	d177      	bne.n	8001478 <main+0x270>
					sprintf(bufferData, "Axis Y data (r)\n");
 8001388:	4938      	ldr	r1, [pc, #224]	; (800146c <main+0x264>)
 800138a:	482e      	ldr	r0, [pc, #184]	; (8001444 <main+0x23c>)
 800138c:	f002 fef4 	bl	8004178 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 8001390:	492c      	ldr	r1, [pc, #176]	; (8001444 <main+0x23c>)
 8001392:	482d      	ldr	r0, [pc, #180]	; (8001448 <main+0x240>)
 8001394:	f001 fffd 	bl	8003392 <writeMsg>
					uint8_t AccelY_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Y1_L);
 8001398:	2134      	movs	r1, #52	; 0x34
 800139a:	482c      	ldr	r0, [pc, #176]	; (800144c <main+0x244>)
 800139c:	f001 fa60 	bl	8002860 <i2c_readSingleRegister>
 80013a0:	4603      	mov	r3, r0
 80013a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					uint8_t AccelY_high = i2c_readSingleRegister(&Acelerometer,ACCEL_Y1_H);
 80013a6:	2135      	movs	r1, #53	; 0x35
 80013a8:	4828      	ldr	r0, [pc, #160]	; (800144c <main+0x244>)
 80013aa:	f001 fa59 	bl	8002860 <i2c_readSingleRegister>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
					int16_t AccelY = AccelY_high << 8 | AccelY_low;
 80013b4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	b21a      	sxth	r2, r3
 80013bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80013c0:	b21b      	sxth	r3, r3
 80013c2:	4313      	orrs	r3, r2
 80013c4:	853b      	strh	r3, [r7, #40]	; 0x28
					Y_axis = AccelY * 0.0039 * 9.8;
 80013c6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f8b2 	bl	8000534 <__aeabi_i2d>
 80013d0:	a315      	add	r3, pc, #84	; (adr r3, 8001428 <main+0x220>)
 80013d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d6:	f7ff f917 	bl	8000608 <__aeabi_dmul>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4610      	mov	r0, r2
 80013e0:	4619      	mov	r1, r3
 80013e2:	a313      	add	r3, pc, #76	; (adr r3, 8001430 <main+0x228>)
 80013e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e8:	f7ff f90e 	bl	8000608 <__aeabi_dmul>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4610      	mov	r0, r2
 80013f2:	4619      	mov	r1, r3
 80013f4:	f7ff fc00 	bl	8000bf8 <__aeabi_d2f>
 80013f8:	4603      	mov	r3, r0
 80013fa:	4a1d      	ldr	r2, [pc, #116]	; (8001470 <main+0x268>)
 80013fc:	6013      	str	r3, [r2, #0]
					sprintf(bufferData, "AccelY = %.2f \n", Y_axis);
 80013fe:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <main+0x268>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f8a8 	bl	8000558 <__aeabi_f2d>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4919      	ldr	r1, [pc, #100]	; (8001474 <main+0x26c>)
 800140e:	480d      	ldr	r0, [pc, #52]	; (8001444 <main+0x23c>)
 8001410:	f002 feb2 	bl	8004178 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 8001414:	490b      	ldr	r1, [pc, #44]	; (8001444 <main+0x23c>)
 8001416:	480c      	ldr	r0, [pc, #48]	; (8001448 <main+0x240>)
 8001418:	f001 ffbb 	bl	8003392 <writeMsg>
					rxData = '\0';
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <main+0x230>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
 8001422:	e07a      	b.n	800151a <main+0x312>
 8001424:	f3af 8000 	nop.w
 8001428:	8e8a71de 	.word	0x8e8a71de
 800142c:	3f6ff2e4 	.word	0x3f6ff2e4
 8001430:	9999999a 	.word	0x9999999a
 8001434:	40239999 	.word	0x40239999
 8001438:	20000311 	.word	0x20000311
 800143c:	20006100 	.word	0x20006100
 8001440:	08007d90 	.word	0x08007d90
 8001444:	20000000 	.word	0x20000000
 8001448:	2000025c 	.word	0x2000025c
 800144c:	20000308 	.word	0x20000308
 8001450:	20000310 	.word	0x20000310
 8001454:	08007da0 	.word	0x08007da0
 8001458:	08007db4 	.word	0x08007db4
 800145c:	08007dcc 	.word	0x08007dcc
 8001460:	08007de4 	.word	0x08007de4
 8001464:	20006158 	.word	0x20006158
 8001468:	08007df8 	.word	0x08007df8
 800146c:	08007e08 	.word	0x08007e08
 8001470:	2000615c 	.word	0x2000615c
 8001474:	08007e1c 	.word	0x08007e1c
				}
				// Para el eje Z y su lectura presionando la tecla "z".
				else if(rxData == 'z'){
 8001478:	4b8f      	ldr	r3, [pc, #572]	; (80016b8 <main+0x4b0>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b7a      	cmp	r3, #122	; 0x7a
 800147e:	d14c      	bne.n	800151a <main+0x312>
					sprintf(bufferData, "Axis Z data (r)\n");
 8001480:	498e      	ldr	r1, [pc, #568]	; (80016bc <main+0x4b4>)
 8001482:	488f      	ldr	r0, [pc, #572]	; (80016c0 <main+0x4b8>)
 8001484:	f002 fe78 	bl	8004178 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 8001488:	498d      	ldr	r1, [pc, #564]	; (80016c0 <main+0x4b8>)
 800148a:	488e      	ldr	r0, [pc, #568]	; (80016c4 <main+0x4bc>)
 800148c:	f001 ff81 	bl	8003392 <writeMsg>
					uint8_t AccelZ_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_L);
 8001490:	2136      	movs	r1, #54	; 0x36
 8001492:	488d      	ldr	r0, [pc, #564]	; (80016c8 <main+0x4c0>)
 8001494:	f001 f9e4 	bl	8002860 <i2c_readSingleRegister>
 8001498:	4603      	mov	r3, r0
 800149a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					uint8_t AccelZ_high = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_H);
 800149e:	2137      	movs	r1, #55	; 0x37
 80014a0:	4889      	ldr	r0, [pc, #548]	; (80016c8 <main+0x4c0>)
 80014a2:	f001 f9dd 	bl	8002860 <i2c_readSingleRegister>
 80014a6:	4603      	mov	r3, r0
 80014a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					int16_t AccelZ = AccelZ_high << 8 | AccelZ_low;
 80014ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014b8:	b21b      	sxth	r3, r3
 80014ba:	4313      	orrs	r3, r2
 80014bc:	85bb      	strh	r3, [r7, #44]	; 0x2c
					Z_axis = AccelZ * 0.0039 * 9.8;
 80014be:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f836 	bl	8000534 <__aeabi_i2d>
 80014c8:	a377      	add	r3, pc, #476	; (adr r3, 80016a8 <main+0x4a0>)
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	f7ff f89b 	bl	8000608 <__aeabi_dmul>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	a375      	add	r3, pc, #468	; (adr r3, 80016b0 <main+0x4a8>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f892 	bl	8000608 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	f7ff fb84 	bl	8000bf8 <__aeabi_d2f>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4a76      	ldr	r2, [pc, #472]	; (80016cc <main+0x4c4>)
 80014f4:	6013      	str	r3, [r2, #0]
					sprintf(bufferData, "AccelZ = %.2f \n", Z_axis);
 80014f6:	4b75      	ldr	r3, [pc, #468]	; (80016cc <main+0x4c4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f82c 	bl	8000558 <__aeabi_f2d>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4972      	ldr	r1, [pc, #456]	; (80016d0 <main+0x4c8>)
 8001506:	486e      	ldr	r0, [pc, #440]	; (80016c0 <main+0x4b8>)
 8001508:	f002 fe36 	bl	8004178 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 800150c:	496c      	ldr	r1, [pc, #432]	; (80016c0 <main+0x4b8>)
 800150e:	486d      	ldr	r0, [pc, #436]	; (80016c4 <main+0x4bc>)
 8001510:	f001 ff3f 	bl	8003392 <writeMsg>
					rxData = '\0';
 8001514:	4b68      	ldr	r3, [pc, #416]	; (80016b8 <main+0x4b0>)
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
			 * El condicional se define en función del segundo valor que
			 * puede tomar la bandera que se define en el Basic Callback.
			 * El sistema entra aquí al presionar la letra "c".
			 * Aquí se tiene un primer muestreo infinito a 1 kHz.
			 */
			if(flagMuestreo == 2){
 800151a:	4b6e      	ldr	r3, [pc, #440]	; (80016d4 <main+0x4cc>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b02      	cmp	r3, #2
 8001520:	f040 80ba 	bne.w	8001698 <main+0x490>
				// Para el eje X
				uint8_t AccelX_low =  i2c_readSingleRegister(&Acelerometer, ACCEL_X1_L);
 8001524:	2132      	movs	r1, #50	; 0x32
 8001526:	4868      	ldr	r0, [pc, #416]	; (80016c8 <main+0x4c0>)
 8001528:	f001 f99a 	bl	8002860 <i2c_readSingleRegister>
 800152c:	4603      	mov	r3, r0
 800152e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				uint8_t AccelX_high = i2c_readSingleRegister(&Acelerometer, ACCEL_X1_H);
 8001532:	2133      	movs	r1, #51	; 0x33
 8001534:	4864      	ldr	r0, [pc, #400]	; (80016c8 <main+0x4c0>)
 8001536:	f001 f993 	bl	8002860 <i2c_readSingleRegister>
 800153a:	4603      	mov	r3, r0
 800153c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				int16_t AccelX = AccelX_high << 8 | AccelX_low;
 8001540:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	b21a      	sxth	r2, r3
 8001548:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800154c:	b21b      	sxth	r3, r3
 800154e:	4313      	orrs	r3, r2
 8001550:	843b      	strh	r3, [r7, #32]
				X_axis = AccelX * 0.0039 * 9.8;
 8001552:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe ffec 	bl	8000534 <__aeabi_i2d>
 800155c:	a352      	add	r3, pc, #328	; (adr r3, 80016a8 <main+0x4a0>)
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	f7ff f851 	bl	8000608 <__aeabi_dmul>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	a350      	add	r3, pc, #320	; (adr r3, 80016b0 <main+0x4a8>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7ff f848 	bl	8000608 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f7ff fb3a 	bl	8000bf8 <__aeabi_d2f>
 8001584:	4603      	mov	r3, r0
 8001586:	4a54      	ldr	r2, [pc, #336]	; (80016d8 <main+0x4d0>)
 8001588:	6013      	str	r3, [r2, #0]
				X_1[counter] = X_axis; // Arreglo definido para X.
 800158a:	4b54      	ldr	r3, [pc, #336]	; (80016dc <main+0x4d4>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	4619      	mov	r1, r3
 8001590:	4b51      	ldr	r3, [pc, #324]	; (80016d8 <main+0x4d0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a52      	ldr	r2, [pc, #328]	; (80016e0 <main+0x4d8>)
 8001596:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				// Para el eje Y
				uint8_t AccelY_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Y1_L);
 800159a:	2134      	movs	r1, #52	; 0x34
 800159c:	484a      	ldr	r0, [pc, #296]	; (80016c8 <main+0x4c0>)
 800159e:	f001 f95f 	bl	8002860 <i2c_readSingleRegister>
 80015a2:	4603      	mov	r3, r0
 80015a4:	77fb      	strb	r3, [r7, #31]
				uint8_t AccelY_high = i2c_readSingleRegister(&Acelerometer,ACCEL_Y1_H);
 80015a6:	2135      	movs	r1, #53	; 0x35
 80015a8:	4847      	ldr	r0, [pc, #284]	; (80016c8 <main+0x4c0>)
 80015aa:	f001 f959 	bl	8002860 <i2c_readSingleRegister>
 80015ae:	4603      	mov	r3, r0
 80015b0:	77bb      	strb	r3, [r7, #30]
				int16_t AccelY = AccelY_high << 8 | AccelY_low;
 80015b2:	7fbb      	ldrb	r3, [r7, #30]
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	7ffb      	ldrb	r3, [r7, #31]
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	83bb      	strh	r3, [r7, #28]
				Y_axis = AccelY * 0.0039 * 9.8;
 80015c0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ffb5 	bl	8000534 <__aeabi_i2d>
 80015ca:	a337      	add	r3, pc, #220	; (adr r3, 80016a8 <main+0x4a0>)
 80015cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d0:	f7ff f81a 	bl	8000608 <__aeabi_dmul>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	a334      	add	r3, pc, #208	; (adr r3, 80016b0 <main+0x4a8>)
 80015de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e2:	f7ff f811 	bl	8000608 <__aeabi_dmul>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f7ff fb03 	bl	8000bf8 <__aeabi_d2f>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4a3b      	ldr	r2, [pc, #236]	; (80016e4 <main+0x4dc>)
 80015f6:	6013      	str	r3, [r2, #0]
				Y_1[counter] = Y_axis; // Arreglo definido para Y.
 80015f8:	4b38      	ldr	r3, [pc, #224]	; (80016dc <main+0x4d4>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	4b39      	ldr	r3, [pc, #228]	; (80016e4 <main+0x4dc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a39      	ldr	r2, [pc, #228]	; (80016e8 <main+0x4e0>)
 8001604:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				// Para el eje Z
				uint8_t AccelZ_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_L);
 8001608:	2136      	movs	r1, #54	; 0x36
 800160a:	482f      	ldr	r0, [pc, #188]	; (80016c8 <main+0x4c0>)
 800160c:	f001 f928 	bl	8002860 <i2c_readSingleRegister>
 8001610:	4603      	mov	r3, r0
 8001612:	76fb      	strb	r3, [r7, #27]
				uint8_t AccelZ_high = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_H);
 8001614:	2137      	movs	r1, #55	; 0x37
 8001616:	482c      	ldr	r0, [pc, #176]	; (80016c8 <main+0x4c0>)
 8001618:	f001 f922 	bl	8002860 <i2c_readSingleRegister>
 800161c:	4603      	mov	r3, r0
 800161e:	76bb      	strb	r3, [r7, #26]
				int16_t AccelZ = AccelZ_high << 8 | AccelZ_low;
 8001620:	7ebb      	ldrb	r3, [r7, #26]
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	b21a      	sxth	r2, r3
 8001626:	7efb      	ldrb	r3, [r7, #27]
 8001628:	b21b      	sxth	r3, r3
 800162a:	4313      	orrs	r3, r2
 800162c:	833b      	strh	r3, [r7, #24]
				Z_axis = AccelZ * 0.0039 * 9.8;
 800162e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe ff7e 	bl	8000534 <__aeabi_i2d>
 8001638:	a31b      	add	r3, pc, #108	; (adr r3, 80016a8 <main+0x4a0>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	f7fe ffe3 	bl	8000608 <__aeabi_dmul>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	a319      	add	r3, pc, #100	; (adr r3, 80016b0 <main+0x4a8>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7fe ffda 	bl	8000608 <__aeabi_dmul>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	f7ff facc 	bl	8000bf8 <__aeabi_d2f>
 8001660:	4603      	mov	r3, r0
 8001662:	4a1a      	ldr	r2, [pc, #104]	; (80016cc <main+0x4c4>)
 8001664:	6013      	str	r3, [r2, #0]
				Z_1[counter] = Z_axis; // Arreglo definido para Y.
 8001666:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <main+0x4d4>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	4619      	mov	r1, r3
 800166c:	4b17      	ldr	r3, [pc, #92]	; (80016cc <main+0x4c4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a1e      	ldr	r2, [pc, #120]	; (80016ec <main+0x4e4>)
 8001672:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				// El contador que barre los arreglos.
				counter++;
 8001676:	4b19      	ldr	r3, [pc, #100]	; (80016dc <main+0x4d4>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	3301      	adds	r3, #1
 800167c:	b29a      	uxth	r2, r3
 800167e:	4b17      	ldr	r3, [pc, #92]	; (80016dc <main+0x4d4>)
 8001680:	801a      	strh	r2, [r3, #0]
				// Las 2000 tomas para los 2000 segundos.
				if(counter == 2000){
 8001682:	4b16      	ldr	r3, [pc, #88]	; (80016dc <main+0x4d4>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800168a:	d105      	bne.n	8001698 <main+0x490>
					flag = 1; // Bandera para entrar al ciclo if y enviar valores de aceleración
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <main+0x4e8>)
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
					counter = 0;
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <main+0x4d4>)
 8001694:	2200      	movs	r2, #0
 8001696:	801a      	strh	r2, [r3, #0]

			/* IMPRESIÓN DE LOS ARREGLOS :
			 * Aquí se define la forma en que se busca dar un formato definido para
			 * la presentación de los arreglos bajo el muestreo de 1 kHz.
			 */
				if(flag == 1){
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <main+0x4e8>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d15c      	bne.n	800175a <main+0x552>
					for( int i = 0 ; i < 2000; i++){
 80016a0:	2300      	movs	r3, #0
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
 80016a4:	e055      	b.n	8001752 <main+0x54a>
 80016a6:	bf00      	nop
 80016a8:	8e8a71de 	.word	0x8e8a71de
 80016ac:	3f6ff2e4 	.word	0x3f6ff2e4
 80016b0:	9999999a 	.word	0x9999999a
 80016b4:	40239999 	.word	0x40239999
 80016b8:	20000311 	.word	0x20000311
 80016bc:	08007e2c 	.word	0x08007e2c
 80016c0:	20000000 	.word	0x20000000
 80016c4:	2000025c 	.word	0x2000025c
 80016c8:	20000308 	.word	0x20000308
 80016cc:	20006160 	.word	0x20006160
 80016d0:	08007e40 	.word	0x08007e40
 80016d4:	20006100 	.word	0x20006100
 80016d8:	20006158 	.word	0x20006158
 80016dc:	200060d4 	.word	0x200060d4
 80016e0:	20000314 	.word	0x20000314
 80016e4:	2000615c 	.word	0x2000615c
 80016e8:	20002254 	.word	0x20002254
 80016ec:	20004194 	.word	0x20004194
 80016f0:	200002ed 	.word	0x200002ed
						sprintf(bufferData, " AccelX = %.2f ; AccelY = %.2f ; AccelZ = %.2f \n",X_1[i],Y_1[i],Z_1[i]);
 80016f4:	4a7e      	ldr	r2, [pc, #504]	; (80018f0 <main+0x6e8>)
 80016f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe ff2b 	bl	8000558 <__aeabi_f2d>
 8001702:	4680      	mov	r8, r0
 8001704:	4689      	mov	r9, r1
 8001706:	4a7b      	ldr	r2, [pc, #492]	; (80018f4 <main+0x6ec>)
 8001708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800170a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ff22 	bl	8000558 <__aeabi_f2d>
 8001714:	4604      	mov	r4, r0
 8001716:	460d      	mov	r5, r1
 8001718:	4a77      	ldr	r2, [pc, #476]	; (80018f8 <main+0x6f0>)
 800171a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe ff19 	bl	8000558 <__aeabi_f2d>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800172e:	e9cd 4500 	strd	r4, r5, [sp]
 8001732:	4642      	mov	r2, r8
 8001734:	464b      	mov	r3, r9
 8001736:	4971      	ldr	r1, [pc, #452]	; (80018fc <main+0x6f4>)
 8001738:	4871      	ldr	r0, [pc, #452]	; (8001900 <main+0x6f8>)
 800173a:	f002 fd1d 	bl	8004178 <siprintf>
						writeMsg(&USART6Comm, bufferData);
 800173e:	4970      	ldr	r1, [pc, #448]	; (8001900 <main+0x6f8>)
 8001740:	4870      	ldr	r0, [pc, #448]	; (8001904 <main+0x6fc>)
 8001742:	f001 fe26 	bl	8003392 <writeMsg>
						flagMuestreo = 0;
 8001746:	4b70      	ldr	r3, [pc, #448]	; (8001908 <main+0x700>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
					for( int i = 0 ; i < 2000; i++){
 800174c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800174e:	3301      	adds	r3, #1
 8001750:	637b      	str	r3, [r7, #52]	; 0x34
 8001752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001754:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001758:	dbcc      	blt.n	80016f4 <main+0x4ec>
				 * del formato de retorno de los datos un segundo contador que
				 * mostrará que sí se están retornando los 2000 datos (definiendo
				 * un dato como el grupo de valores de las 3 coordenadas) y no
				 * menos.
				 */
				if(flagMuestreo == 3){
 800175a:	4b6b      	ldr	r3, [pc, #428]	; (8001908 <main+0x700>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b03      	cmp	r3, #3
 8001760:	f040 80b6 	bne.w	80018d0 <main+0x6c8>

					uint8_t AccelX_low =  i2c_readSingleRegister(&Acelerometer, ACCEL_X1_L);
 8001764:	2132      	movs	r1, #50	; 0x32
 8001766:	4869      	ldr	r0, [pc, #420]	; (800190c <main+0x704>)
 8001768:	f001 f87a 	bl	8002860 <i2c_readSingleRegister>
 800176c:	4603      	mov	r3, r0
 800176e:	75fb      	strb	r3, [r7, #23]
					uint8_t AccelX_high = i2c_readSingleRegister(&Acelerometer, ACCEL_X1_H);
 8001770:	2133      	movs	r1, #51	; 0x33
 8001772:	4866      	ldr	r0, [pc, #408]	; (800190c <main+0x704>)
 8001774:	f001 f874 	bl	8002860 <i2c_readSingleRegister>
 8001778:	4603      	mov	r3, r0
 800177a:	75bb      	strb	r3, [r7, #22]
					int16_t AccelX = AccelX_high << 8 | AccelX_low;
 800177c:	7dbb      	ldrb	r3, [r7, #22]
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	b21a      	sxth	r2, r3
 8001782:	7dfb      	ldrb	r3, [r7, #23]
 8001784:	b21b      	sxth	r3, r3
 8001786:	4313      	orrs	r3, r2
 8001788:	82bb      	strh	r3, [r7, #20]
					X_axis = AccelX * 0.0039 * 9.8;
 800178a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fed0 	bl	8000534 <__aeabi_i2d>
 8001794:	a352      	add	r3, pc, #328	; (adr r3, 80018e0 <main+0x6d8>)
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	f7fe ff35 	bl	8000608 <__aeabi_dmul>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	a350      	add	r3, pc, #320	; (adr r3, 80018e8 <main+0x6e0>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f7fe ff2c 	bl	8000608 <__aeabi_dmul>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f7ff fa1e 	bl	8000bf8 <__aeabi_d2f>
 80017bc:	4603      	mov	r3, r0
 80017be:	4a54      	ldr	r2, [pc, #336]	; (8001910 <main+0x708>)
 80017c0:	6013      	str	r3, [r2, #0]
					X_1[counter]=X_axis;
 80017c2:	4b54      	ldr	r3, [pc, #336]	; (8001914 <main+0x70c>)
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	4619      	mov	r1, r3
 80017c8:	4b51      	ldr	r3, [pc, #324]	; (8001910 <main+0x708>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a48      	ldr	r2, [pc, #288]	; (80018f0 <main+0x6e8>)
 80017ce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

					uint8_t AccelY_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Y1_L);
 80017d2:	2134      	movs	r1, #52	; 0x34
 80017d4:	484d      	ldr	r0, [pc, #308]	; (800190c <main+0x704>)
 80017d6:	f001 f843 	bl	8002860 <i2c_readSingleRegister>
 80017da:	4603      	mov	r3, r0
 80017dc:	74fb      	strb	r3, [r7, #19]
					uint8_t AccelY_high = i2c_readSingleRegister(&Acelerometer,ACCEL_Y1_H);
 80017de:	2135      	movs	r1, #53	; 0x35
 80017e0:	484a      	ldr	r0, [pc, #296]	; (800190c <main+0x704>)
 80017e2:	f001 f83d 	bl	8002860 <i2c_readSingleRegister>
 80017e6:	4603      	mov	r3, r0
 80017e8:	74bb      	strb	r3, [r7, #18]
					int16_t AccelY = AccelY_high << 8 | AccelY_low;
 80017ea:	7cbb      	ldrb	r3, [r7, #18]
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	b21a      	sxth	r2, r3
 80017f0:	7cfb      	ldrb	r3, [r7, #19]
 80017f2:	b21b      	sxth	r3, r3
 80017f4:	4313      	orrs	r3, r2
 80017f6:	823b      	strh	r3, [r7, #16]
					Y_axis = AccelY * 0.0039 * 9.8;
 80017f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe fe99 	bl	8000534 <__aeabi_i2d>
 8001802:	a337      	add	r3, pc, #220	; (adr r3, 80018e0 <main+0x6d8>)
 8001804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001808:	f7fe fefe 	bl	8000608 <__aeabi_dmul>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	a334      	add	r3, pc, #208	; (adr r3, 80018e8 <main+0x6e0>)
 8001816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181a:	f7fe fef5 	bl	8000608 <__aeabi_dmul>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	f7ff f9e7 	bl	8000bf8 <__aeabi_d2f>
 800182a:	4603      	mov	r3, r0
 800182c:	4a3a      	ldr	r2, [pc, #232]	; (8001918 <main+0x710>)
 800182e:	6013      	str	r3, [r2, #0]
					Y_1[counter]=Y_axis;
 8001830:	4b38      	ldr	r3, [pc, #224]	; (8001914 <main+0x70c>)
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	4619      	mov	r1, r3
 8001836:	4b38      	ldr	r3, [pc, #224]	; (8001918 <main+0x710>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a2e      	ldr	r2, [pc, #184]	; (80018f4 <main+0x6ec>)
 800183c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

					uint8_t AccelZ_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_L);
 8001840:	2136      	movs	r1, #54	; 0x36
 8001842:	4832      	ldr	r0, [pc, #200]	; (800190c <main+0x704>)
 8001844:	f001 f80c 	bl	8002860 <i2c_readSingleRegister>
 8001848:	4603      	mov	r3, r0
 800184a:	73fb      	strb	r3, [r7, #15]
					uint8_t AccelZ_high = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_H);
 800184c:	2137      	movs	r1, #55	; 0x37
 800184e:	482f      	ldr	r0, [pc, #188]	; (800190c <main+0x704>)
 8001850:	f001 f806 	bl	8002860 <i2c_readSingleRegister>
 8001854:	4603      	mov	r3, r0
 8001856:	73bb      	strb	r3, [r7, #14]
					int16_t AccelZ = AccelZ_high << 8 | AccelZ_low;
 8001858:	7bbb      	ldrb	r3, [r7, #14]
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	b21a      	sxth	r2, r3
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	b21b      	sxth	r3, r3
 8001862:	4313      	orrs	r3, r2
 8001864:	81bb      	strh	r3, [r7, #12]
					Z_axis = AccelZ * 0.0039 * 9.8;
 8001866:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe62 	bl	8000534 <__aeabi_i2d>
 8001870:	a31b      	add	r3, pc, #108	; (adr r3, 80018e0 <main+0x6d8>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	f7fe fec7 	bl	8000608 <__aeabi_dmul>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	a319      	add	r3, pc, #100	; (adr r3, 80018e8 <main+0x6e0>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7fe febe 	bl	8000608 <__aeabi_dmul>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	f7ff f9b0 	bl	8000bf8 <__aeabi_d2f>
 8001898:	4603      	mov	r3, r0
 800189a:	4a20      	ldr	r2, [pc, #128]	; (800191c <main+0x714>)
 800189c:	6013      	str	r3, [r2, #0]
					Z_1[counter]=Z_axis;
 800189e:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <main+0x70c>)
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	4619      	mov	r1, r3
 80018a4:	4b1d      	ldr	r3, [pc, #116]	; (800191c <main+0x714>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a13      	ldr	r2, [pc, #76]	; (80018f8 <main+0x6f0>)
 80018aa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
					counter++;
 80018ae:	4b19      	ldr	r3, [pc, #100]	; (8001914 <main+0x70c>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	3301      	adds	r3, #1
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	4b17      	ldr	r3, [pc, #92]	; (8001914 <main+0x70c>)
 80018b8:	801a      	strh	r2, [r3, #0]
					if(counter == 2000){
 80018ba:	4b16      	ldr	r3, [pc, #88]	; (8001914 <main+0x70c>)
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80018c2:	d105      	bne.n	80018d0 <main+0x6c8>
						flag2 = 1;
 80018c4:	4b16      	ldr	r3, [pc, #88]	; (8001920 <main+0x718>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	701a      	strb	r2, [r3, #0]
						rxData = '\0';
 80018ca:	4b16      	ldr	r3, [pc, #88]	; (8001924 <main+0x71c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
				/* Dentro de este if y gracias a la configuración de la velocidad
				 * a la cual se pone a trabajar el timer, se imprimen los datos
				 * recopilados dentro del arreglo para su fácil lectura y análisis.
				 */

				if(flag2 == 1){
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <main+0x718>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d15e      	bne.n	8001996 <main+0x78e>
					for( int i = 0 ; i < 2000; i++){
 80018d8:	2300      	movs	r3, #0
 80018da:	633b      	str	r3, [r7, #48]	; 0x30
 80018dc:	e057      	b.n	800198e <main+0x786>
 80018de:	bf00      	nop
 80018e0:	8e8a71de 	.word	0x8e8a71de
 80018e4:	3f6ff2e4 	.word	0x3f6ff2e4
 80018e8:	9999999a 	.word	0x9999999a
 80018ec:	40239999 	.word	0x40239999
 80018f0:	20000314 	.word	0x20000314
 80018f4:	20002254 	.word	0x20002254
 80018f8:	20004194 	.word	0x20004194
 80018fc:	08007e50 	.word	0x08007e50
 8001900:	20000000 	.word	0x20000000
 8001904:	2000025c 	.word	0x2000025c
 8001908:	20006100 	.word	0x20006100
 800190c:	20000308 	.word	0x20000308
 8001910:	20006158 	.word	0x20006158
 8001914:	200060d4 	.word	0x200060d4
 8001918:	2000615c 	.word	0x2000615c
 800191c:	20006160 	.word	0x20006160
 8001920:	200002ee 	.word	0x200002ee
 8001924:	20000311 	.word	0x20000311
						sprintf(bufferData, "[m/s²] #%d AccelX = %.2f ; AccelY = %.2f ; AccelZ = %.2f \n",i,X_1[i],Y_1[i],Z_1[i]);
 8001928:	4aa9      	ldr	r2, [pc, #676]	; (8001bd0 <main+0x9c8>)
 800192a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800192c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fe11 	bl	8000558 <__aeabi_f2d>
 8001936:	4604      	mov	r4, r0
 8001938:	460d      	mov	r5, r1
 800193a:	4aa6      	ldr	r2, [pc, #664]	; (8001bd4 <main+0x9cc>)
 800193c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800193e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fe08 	bl	8000558 <__aeabi_f2d>
 8001948:	4680      	mov	r8, r0
 800194a:	4689      	mov	r9, r1
 800194c:	4aa2      	ldr	r2, [pc, #648]	; (8001bd8 <main+0x9d0>)
 800194e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fdff 	bl	8000558 <__aeabi_f2d>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001962:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001966:	e9cd 4500 	strd	r4, r5, [sp]
 800196a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800196c:	499b      	ldr	r1, [pc, #620]	; (8001bdc <main+0x9d4>)
 800196e:	489c      	ldr	r0, [pc, #624]	; (8001be0 <main+0x9d8>)
 8001970:	f002 fc02 	bl	8004178 <siprintf>
						writeMsg(&USART6Comm, bufferData);
 8001974:	499a      	ldr	r1, [pc, #616]	; (8001be0 <main+0x9d8>)
 8001976:	489b      	ldr	r0, [pc, #620]	; (8001be4 <main+0x9dc>)
 8001978:	f001 fd0b 	bl	8003392 <writeMsg>
						flagMuestreo =0;
 800197c:	4b9a      	ldr	r3, [pc, #616]	; (8001be8 <main+0x9e0>)
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
						flag2 = 0;
 8001982:	4b9a      	ldr	r3, [pc, #616]	; (8001bec <main+0x9e4>)
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
					for( int i = 0 ; i < 2000; i++){
 8001988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800198a:	3301      	adds	r3, #1
 800198c:	633b      	str	r3, [r7, #48]	; 0x30
 800198e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001990:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001994:	dbc8      	blt.n	8001928 <main+0x720>
				/* Si se presiona la letra "v", el sistema envía datos sobre
				 * los 3 ejes de aceleración por medio del USART. Se define sobre
				 * la variación de cada uno de los ejes una señal PWM diferente que se
				 * activa básicamente luego de escribir sobre el I2C.
				 */
				if(flagMuestreo == 4){
 8001996:	4b94      	ldr	r3, [pc, #592]	; (8001be8 <main+0x9e0>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b04      	cmp	r3, #4
 800199c:	f47f ac3a 	bne.w	8001214 <main+0xc>
					// Para X.
					sprintf(bufferData, "Axis X data (r) \n");
 80019a0:	4993      	ldr	r1, [pc, #588]	; (8001bf0 <main+0x9e8>)
 80019a2:	488f      	ldr	r0, [pc, #572]	; (8001be0 <main+0x9d8>)
 80019a4:	f002 fbe8 	bl	8004178 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 80019a8:	498d      	ldr	r1, [pc, #564]	; (8001be0 <main+0x9d8>)
 80019aa:	488e      	ldr	r0, [pc, #568]	; (8001be4 <main+0x9dc>)
 80019ac:	f001 fcf1 	bl	8003392 <writeMsg>
					uint8_t AccelX_low =  i2c_readSingleRegister(&Acelerometer, ACCEL_X1_L);
 80019b0:	2132      	movs	r1, #50	; 0x32
 80019b2:	4890      	ldr	r0, [pc, #576]	; (8001bf4 <main+0x9ec>)
 80019b4:	f000 ff54 	bl	8002860 <i2c_readSingleRegister>
 80019b8:	4603      	mov	r3, r0
 80019ba:	72fb      	strb	r3, [r7, #11]
					uint8_t AccelX_high = i2c_readSingleRegister(&Acelerometer, ACCEL_X1_H);
 80019bc:	2133      	movs	r1, #51	; 0x33
 80019be:	488d      	ldr	r0, [pc, #564]	; (8001bf4 <main+0x9ec>)
 80019c0:	f000 ff4e 	bl	8002860 <i2c_readSingleRegister>
 80019c4:	4603      	mov	r3, r0
 80019c6:	72bb      	strb	r3, [r7, #10]
					int16_t AccelX = AccelX_high << 8 | AccelX_low;
 80019c8:	7abb      	ldrb	r3, [r7, #10]
 80019ca:	021b      	lsls	r3, r3, #8
 80019cc:	b21a      	sxth	r2, r3
 80019ce:	7afb      	ldrb	r3, [r7, #11]
 80019d0:	b21b      	sxth	r3, r3
 80019d2:	4313      	orrs	r3, r2
 80019d4:	813b      	strh	r3, [r7, #8]
					X_axis = AccelX * 0.0039 * 9.8;
 80019d6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fdaa 	bl	8000534 <__aeabi_i2d>
 80019e0:	a377      	add	r3, pc, #476	; (adr r3, 8001bc0 <main+0x9b8>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	f7fe fe0f 	bl	8000608 <__aeabi_dmul>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	a375      	add	r3, pc, #468	; (adr r3, 8001bc8 <main+0x9c0>)
 80019f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f8:	f7fe fe06 	bl	8000608 <__aeabi_dmul>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	f7ff f8f8 	bl	8000bf8 <__aeabi_d2f>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4a7b      	ldr	r2, [pc, #492]	; (8001bf8 <main+0x9f0>)
 8001a0c:	6013      	str	r3, [r2, #0]
					sprintf(bufferData, "AccelX = %.2f \n", X_axis);
 8001a0e:	4b7a      	ldr	r3, [pc, #488]	; (8001bf8 <main+0x9f0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fda0 	bl	8000558 <__aeabi_f2d>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4977      	ldr	r1, [pc, #476]	; (8001bfc <main+0x9f4>)
 8001a1e:	4870      	ldr	r0, [pc, #448]	; (8001be0 <main+0x9d8>)
 8001a20:	f002 fbaa 	bl	8004178 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 8001a24:	496e      	ldr	r1, [pc, #440]	; (8001be0 <main+0x9d8>)
 8001a26:	486f      	ldr	r0, [pc, #444]	; (8001be4 <main+0x9dc>)
 8001a28:	f001 fcb3 	bl	8003392 <writeMsg>
					updateDuttyCycle(&handlerTIM3PWM_1,duttyCalculator(X_axis) * (200));
 8001a2c:	4b72      	ldr	r3, [pc, #456]	; (8001bf8 <main+0x9f0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 f8f7 	bl	8001c24 <duttyCalculator>
 8001a36:	4603      	mov	r3, r0
 8001a38:	461a      	mov	r2, r3
 8001a3a:	0092      	lsls	r2, r2, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	461a      	mov	r2, r3
 8001a40:	0091      	lsls	r1, r2, #2
 8001a42:	461a      	mov	r2, r3
 8001a44:	460b      	mov	r3, r1
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	486c      	ldr	r0, [pc, #432]	; (8001c00 <main+0x9f8>)
 8001a50:	f001 fa56 	bl	8002f00 <updateDuttyCycle>
					// Para Y.
					sprintf(bufferData, "Axis Y data (r)\n");
 8001a54:	496b      	ldr	r1, [pc, #428]	; (8001c04 <main+0x9fc>)
 8001a56:	4862      	ldr	r0, [pc, #392]	; (8001be0 <main+0x9d8>)
 8001a58:	f002 fb8e 	bl	8004178 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 8001a5c:	4960      	ldr	r1, [pc, #384]	; (8001be0 <main+0x9d8>)
 8001a5e:	4861      	ldr	r0, [pc, #388]	; (8001be4 <main+0x9dc>)
 8001a60:	f001 fc97 	bl	8003392 <writeMsg>
					uint8_t AccelY_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Y1_L);
 8001a64:	2134      	movs	r1, #52	; 0x34
 8001a66:	4863      	ldr	r0, [pc, #396]	; (8001bf4 <main+0x9ec>)
 8001a68:	f000 fefa 	bl	8002860 <i2c_readSingleRegister>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	71fb      	strb	r3, [r7, #7]
					uint8_t AccelY_high = i2c_readSingleRegister(&Acelerometer,ACCEL_Y1_H);
 8001a70:	2135      	movs	r1, #53	; 0x35
 8001a72:	4860      	ldr	r0, [pc, #384]	; (8001bf4 <main+0x9ec>)
 8001a74:	f000 fef4 	bl	8002860 <i2c_readSingleRegister>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	71bb      	strb	r3, [r7, #6]
					int16_t AccelY = AccelY_high << 8 | AccelY_low;
 8001a7c:	79bb      	ldrb	r3, [r7, #6]
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	b21a      	sxth	r2, r3
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	b21b      	sxth	r3, r3
 8001a86:	4313      	orrs	r3, r2
 8001a88:	80bb      	strh	r3, [r7, #4]
					Y_axis = AccelY * 0.0039 * 9.8;
 8001a8a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fd50 	bl	8000534 <__aeabi_i2d>
 8001a94:	a34a      	add	r3, pc, #296	; (adr r3, 8001bc0 <main+0x9b8>)
 8001a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9a:	f7fe fdb5 	bl	8000608 <__aeabi_dmul>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	a348      	add	r3, pc, #288	; (adr r3, 8001bc8 <main+0x9c0>)
 8001aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aac:	f7fe fdac 	bl	8000608 <__aeabi_dmul>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7ff f89e 	bl	8000bf8 <__aeabi_d2f>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4a52      	ldr	r2, [pc, #328]	; (8001c08 <main+0xa00>)
 8001ac0:	6013      	str	r3, [r2, #0]
					sprintf(bufferData, "AccelY = %.2f \n", Y_axis);
 8001ac2:	4b51      	ldr	r3, [pc, #324]	; (8001c08 <main+0xa00>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fd46 	bl	8000558 <__aeabi_f2d>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	494e      	ldr	r1, [pc, #312]	; (8001c0c <main+0xa04>)
 8001ad2:	4843      	ldr	r0, [pc, #268]	; (8001be0 <main+0x9d8>)
 8001ad4:	f002 fb50 	bl	8004178 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 8001ad8:	4941      	ldr	r1, [pc, #260]	; (8001be0 <main+0x9d8>)
 8001ada:	4842      	ldr	r0, [pc, #264]	; (8001be4 <main+0x9dc>)
 8001adc:	f001 fc59 	bl	8003392 <writeMsg>
					updateDuttyCycle(&handlerTIM3PWM_2,duttyCalculator(Y_axis) * (200));
 8001ae0:	4b49      	ldr	r3, [pc, #292]	; (8001c08 <main+0xa00>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 f89d 	bl	8001c24 <duttyCalculator>
 8001aea:	4603      	mov	r3, r0
 8001aec:	461a      	mov	r2, r3
 8001aee:	0092      	lsls	r2, r2, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	461a      	mov	r2, r3
 8001af4:	0091      	lsls	r1, r2, #2
 8001af6:	461a      	mov	r2, r3
 8001af8:	460b      	mov	r3, r1
 8001afa:	4413      	add	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4619      	mov	r1, r3
 8001b02:	4843      	ldr	r0, [pc, #268]	; (8001c10 <main+0xa08>)
 8001b04:	f001 f9fc 	bl	8002f00 <updateDuttyCycle>
					// Para Z.
					sprintf(bufferData, "Axis Z data (r)\n");
 8001b08:	4942      	ldr	r1, [pc, #264]	; (8001c14 <main+0xa0c>)
 8001b0a:	4835      	ldr	r0, [pc, #212]	; (8001be0 <main+0x9d8>)
 8001b0c:	f002 fb34 	bl	8004178 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 8001b10:	4933      	ldr	r1, [pc, #204]	; (8001be0 <main+0x9d8>)
 8001b12:	4834      	ldr	r0, [pc, #208]	; (8001be4 <main+0x9dc>)
 8001b14:	f001 fc3d 	bl	8003392 <writeMsg>
					uint8_t AccelZ_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_L);
 8001b18:	2136      	movs	r1, #54	; 0x36
 8001b1a:	4836      	ldr	r0, [pc, #216]	; (8001bf4 <main+0x9ec>)
 8001b1c:	f000 fea0 	bl	8002860 <i2c_readSingleRegister>
 8001b20:	4603      	mov	r3, r0
 8001b22:	70fb      	strb	r3, [r7, #3]
					uint8_t AccelZ_high = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_H);
 8001b24:	2137      	movs	r1, #55	; 0x37
 8001b26:	4833      	ldr	r0, [pc, #204]	; (8001bf4 <main+0x9ec>)
 8001b28:	f000 fe9a 	bl	8002860 <i2c_readSingleRegister>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	70bb      	strb	r3, [r7, #2]
					int16_t AccelZ = AccelZ_high << 8 | AccelZ_low;
 8001b30:	78bb      	ldrb	r3, [r7, #2]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	b21a      	sxth	r2, r3
 8001b36:	78fb      	ldrb	r3, [r7, #3]
 8001b38:	b21b      	sxth	r3, r3
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	803b      	strh	r3, [r7, #0]
					Z_axis = AccelZ * 0.0039 * 9.8;
 8001b3e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fcf6 	bl	8000534 <__aeabi_i2d>
 8001b48:	a31d      	add	r3, pc, #116	; (adr r3, 8001bc0 <main+0x9b8>)
 8001b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4e:	f7fe fd5b 	bl	8000608 <__aeabi_dmul>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4610      	mov	r0, r2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	a31b      	add	r3, pc, #108	; (adr r3, 8001bc8 <main+0x9c0>)
 8001b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b60:	f7fe fd52 	bl	8000608 <__aeabi_dmul>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	f7ff f844 	bl	8000bf8 <__aeabi_d2f>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4a29      	ldr	r2, [pc, #164]	; (8001c18 <main+0xa10>)
 8001b74:	6013      	str	r3, [r2, #0]
					sprintf(bufferData, "AccelZ = %.2f \n", Z_axis);
 8001b76:	4b28      	ldr	r3, [pc, #160]	; (8001c18 <main+0xa10>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fcec 	bl	8000558 <__aeabi_f2d>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4925      	ldr	r1, [pc, #148]	; (8001c1c <main+0xa14>)
 8001b86:	4816      	ldr	r0, [pc, #88]	; (8001be0 <main+0x9d8>)
 8001b88:	f002 faf6 	bl	8004178 <siprintf>
					writeMsg(&USART6Comm, bufferData);
 8001b8c:	4914      	ldr	r1, [pc, #80]	; (8001be0 <main+0x9d8>)
 8001b8e:	4815      	ldr	r0, [pc, #84]	; (8001be4 <main+0x9dc>)
 8001b90:	f001 fbff 	bl	8003392 <writeMsg>
					updateDuttyCycle(&handlerTIM3PWM_3,duttyCalculator(Z_axis) * (200));
 8001b94:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <main+0xa10>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 f843 	bl	8001c24 <duttyCalculator>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	0092      	lsls	r2, r2, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	0091      	lsls	r1, r2, #2
 8001baa:	461a      	mov	r2, r3
 8001bac:	460b      	mov	r3, r1
 8001bae:	4413      	add	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	481a      	ldr	r0, [pc, #104]	; (8001c20 <main+0xa18>)
 8001bb8:	f001 f9a2 	bl	8002f00 <updateDuttyCycle>
		if(rxData != '\0'){
 8001bbc:	f7ff bb2a 	b.w	8001214 <main+0xc>
 8001bc0:	8e8a71de 	.word	0x8e8a71de
 8001bc4:	3f6ff2e4 	.word	0x3f6ff2e4
 8001bc8:	9999999a 	.word	0x9999999a
 8001bcc:	40239999 	.word	0x40239999
 8001bd0:	20000314 	.word	0x20000314
 8001bd4:	20002254 	.word	0x20002254
 8001bd8:	20004194 	.word	0x20004194
 8001bdc:	08007e84 	.word	0x08007e84
 8001be0:	20000000 	.word	0x20000000
 8001be4:	2000025c 	.word	0x2000025c
 8001be8:	20006100 	.word	0x20006100
 8001bec:	200002ee 	.word	0x200002ee
 8001bf0:	08007de4 	.word	0x08007de4
 8001bf4:	20000308 	.word	0x20000308
 8001bf8:	20006158 	.word	0x20006158
 8001bfc:	08007df8 	.word	0x08007df8
 8001c00:	20006128 	.word	0x20006128
 8001c04:	08007e08 	.word	0x08007e08
 8001c08:	2000615c 	.word	0x2000615c
 8001c0c:	08007e1c 	.word	0x08007e1c
 8001c10:	20006138 	.word	0x20006138
 8001c14:	08007e2c 	.word	0x08007e2c
 8001c18:	20006160 	.word	0x20006160
 8001c1c:	08007e40 	.word	0x08007e40
 8001c20:	20006148 	.word	0x20006148

08001c24 <duttyCalculator>:
// Función para calcular el dutty cycle a partir de la definición de error.
/* Se toma un rango ideal para el acelerómetro tomando en cuenta las condiciones
 * en que se vió desde la experiencia que oscilan los valores.
 */

uint16_t duttyCalculator(float valor){
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	uint16_t dutty = ((40 - valor) / 40) * 100;
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	4814      	ldr	r0, [pc, #80]	; (8001c80 <duttyCalculator+0x5c>)
 8001c30:	f7ff f836 	bl	8000ca0 <__aeabi_fsub>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4912      	ldr	r1, [pc, #72]	; (8001c80 <duttyCalculator+0x5c>)
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff f9ef 	bl	800101c <__aeabi_fdiv>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	4910      	ldr	r1, [pc, #64]	; (8001c84 <duttyCalculator+0x60>)
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff f936 	bl	8000eb4 <__aeabi_fmul>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fa82 	bl	8001154 <__aeabi_f2uiz>
 8001c50:	4603      	mov	r3, r0
 8001c52:	81fb      	strh	r3, [r7, #14]
	if (dutty > 100){
 8001c54:	89fb      	ldrh	r3, [r7, #14]
 8001c56:	2b64      	cmp	r3, #100	; 0x64
 8001c58:	d904      	bls.n	8001c64 <duttyCalculator+0x40>
		uint16_t dutty_percent = dutty - 100;
 8001c5a:	89fb      	ldrh	r3, [r7, #14]
 8001c5c:	3b64      	subs	r3, #100	; 0x64
 8001c5e:	813b      	strh	r3, [r7, #8]
		return dutty_percent;
 8001c60:	893b      	ldrh	r3, [r7, #8]
 8001c62:	e009      	b.n	8001c78 <duttyCalculator+0x54>
	}else if(dutty < 100){
 8001c64:	89fb      	ldrh	r3, [r7, #14]
 8001c66:	2b63      	cmp	r3, #99	; 0x63
 8001c68:	d803      	bhi.n	8001c72 <duttyCalculator+0x4e>
		uint16_t dutty_percent = dutty;
 8001c6a:	89fb      	ldrh	r3, [r7, #14]
 8001c6c:	817b      	strh	r3, [r7, #10]
		return dutty_percent;
 8001c6e:	897b      	ldrh	r3, [r7, #10]
 8001c70:	e002      	b.n	8001c78 <duttyCalculator+0x54>
	}else{
		uint16_t dutty_percent = 50;
 8001c72:	2332      	movs	r3, #50	; 0x32
 8001c74:	81bb      	strh	r3, [r7, #12]
		return dutty_percent;
 8001c76:	89bb      	ldrh	r3, [r7, #12]
	}
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	42200000 	.word	0x42200000
 8001c84:	42c80000 	.word	0x42c80000

08001c88 <init_Hardware>:



//Función de configuración de los elementos del sistema.
void init_Hardware(void){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0

	// Se configura el PLL con los parámetros dados.
	handlerPLL.PLL_Config.PLL_voltage		= VOLTAGE_84MHZ;
 8001c8c:	4baa      	ldr	r3, [pc, #680]	; (8001f38 <init_Hardware+0x2b0>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	701a      	strb	r2, [r3, #0]
	handlerPLL.PLL_Config.PLL_frecuency		= FRECUENCY_80MHZ;
 8001c92:	4ba9      	ldr	r3, [pc, #676]	; (8001f38 <init_Hardware+0x2b0>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	705a      	strb	r2, [r3, #1]
	PLL_Config(&handlerPLL);
 8001c98:	48a7      	ldr	r0, [pc, #668]	; (8001f38 <init_Hardware+0x2b0>)
 8001c9a:	f000 fe35 	bl	8002908 <PLL_Config>
	getConfigPLL();
 8001c9e:	f000 ff3d 	bl	8002b1c <getConfigPLL>

	/* LED DE ESTADO A 250 ms aproximadamente. */
	handlerBlinkyPin.pGPIOx 									= GPIOA;
 8001ca2:	4ba6      	ldr	r3, [pc, #664]	; (8001f3c <init_Hardware+0x2b4>)
 8001ca4:	4aa6      	ldr	r2, [pc, #664]	; (8001f40 <init_Hardware+0x2b8>)
 8001ca6:	601a      	str	r2, [r3, #0]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinNumber 				= PIN_5;
 8001ca8:	4ba4      	ldr	r3, [pc, #656]	; (8001f3c <init_Hardware+0x2b4>)
 8001caa:	2205      	movs	r2, #5
 8001cac:	711a      	strb	r2, [r3, #4]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 8001cae:	4ba3      	ldr	r3, [pc, #652]	; (8001f3c <init_Hardware+0x2b4>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	715a      	strb	r2, [r3, #5]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8001cb4:	4ba1      	ldr	r3, [pc, #644]	; (8001f3c <init_Hardware+0x2b4>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	721a      	strb	r2, [r3, #8]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinSpeed  				= GPIO_OSPEED_FAST;
 8001cba:	4ba0      	ldr	r3, [pc, #640]	; (8001f3c <init_Hardware+0x2b4>)
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	719a      	strb	r2, [r3, #6]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinPuPdControl			= GPIO_PUPDR_NOTHING;
 8001cc0:	4b9e      	ldr	r3, [pc, #632]	; (8001f3c <init_Hardware+0x2b4>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	71da      	strb	r2, [r3, #7]

	// Se carga la configuración del Blinky,
	GPIO_Config(&handlerBlinkyPin);
 8001cc6:	489d      	ldr	r0, [pc, #628]	; (8001f3c <init_Hardware+0x2b4>)
 8001cc8:	f000 faf4 	bl	80022b4 <GPIO_Config>
	GPIO_WritePin(&handlerBlinkyPin, SET);
 8001ccc:	2101      	movs	r1, #1
 8001cce:	489b      	ldr	r0, [pc, #620]	; (8001f3c <init_Hardware+0x2b4>)
 8001cd0:	f000 fc18 	bl	8002504 <GPIO_WritePin>

	// Se configura el timer del blinky.
	handlerBlinkyTimer.ptrTIMx								= TIM2;
 8001cd4:	4b9b      	ldr	r3, [pc, #620]	; (8001f44 <init_Hardware+0x2bc>)
 8001cd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cda:	601a      	str	r2, [r3, #0]
	handlerBlinkyTimer.TIMx_Config.TIMx_mode				= BTIMER_MODE_UP;
 8001cdc:	4b99      	ldr	r3, [pc, #612]	; (8001f44 <init_Hardware+0x2bc>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	711a      	strb	r2, [r3, #4]
	handlerBlinkyTimer.TIMx_Config.TIMx_speed				= BTIMER_SPEED_80MHz;
 8001ce2:	4b98      	ldr	r3, [pc, #608]	; (8001f44 <init_Hardware+0x2bc>)
 8001ce4:	f641 72a4 	movw	r2, #8100	; 0x1fa4
 8001ce8:	609a      	str	r2, [r3, #8]
	handlerBlinkyTimer.TIMx_Config.TIMx_period				= 2500;
 8001cea:	4b96      	ldr	r3, [pc, #600]	; (8001f44 <init_Hardware+0x2bc>)
 8001cec:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001cf0:	60da      	str	r2, [r3, #12]
	handlerBlinkyTimer.TIMx_Config.TIMx_interruptEnable 	= BTIMER_INTERRUPT_ENABLE;
 8001cf2:	4b94      	ldr	r3, [pc, #592]	; (8001f44 <init_Hardware+0x2bc>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	741a      	strb	r2, [r3, #16]

	// Se carga lo hecho sobre el timer del blinky.
	BasicTimer_Config(&handlerBlinkyTimer);
 8001cf8:	4892      	ldr	r0, [pc, #584]	; (8001f44 <init_Hardware+0x2bc>)
 8001cfa:	f000 f9e7 	bl	80020cc <BasicTimer_Config>

	/* Configuración del USART */
	// Transmisión
	handlerUSARTPINTX.pGPIOx  							= GPIOA;
 8001cfe:	4b92      	ldr	r3, [pc, #584]	; (8001f48 <init_Hardware+0x2c0>)
 8001d00:	4a8f      	ldr	r2, [pc, #572]	; (8001f40 <init_Hardware+0x2b8>)
 8001d02:	601a      	str	r2, [r3, #0]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinNumber 	= PIN_11;
 8001d04:	4b90      	ldr	r3, [pc, #576]	; (8001f48 <init_Hardware+0x2c0>)
 8001d06:	220b      	movs	r2, #11
 8001d08:	711a      	strb	r2, [r3, #4]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFN;
 8001d0a:	4b8f      	ldr	r3, [pc, #572]	; (8001f48 <init_Hardware+0x2c0>)
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	715a      	strb	r2, [r3, #5]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinAltFunMode = AF8;
 8001d10:	4b8d      	ldr	r3, [pc, #564]	; (8001f48 <init_Hardware+0x2c0>)
 8001d12:	2208      	movs	r2, #8
 8001d14:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerUSARTPINTX);
 8001d16:	488c      	ldr	r0, [pc, #560]	; (8001f48 <init_Hardware+0x2c0>)
 8001d18:	f000 facc 	bl	80022b4 <GPIO_Config>

	// Recepción
	handlerUSARTPINRX.pGPIOx 						 	= GPIOA;
 8001d1c:	4b8b      	ldr	r3, [pc, #556]	; (8001f4c <init_Hardware+0x2c4>)
 8001d1e:	4a88      	ldr	r2, [pc, #544]	; (8001f40 <init_Hardware+0x2b8>)
 8001d20:	601a      	str	r2, [r3, #0]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinNumber		= PIN_12;
 8001d22:	4b8a      	ldr	r3, [pc, #552]	; (8001f4c <init_Hardware+0x2c4>)
 8001d24:	220c      	movs	r2, #12
 8001d26:	711a      	strb	r2, [r3, #4]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFN;
 8001d28:	4b88      	ldr	r3, [pc, #544]	; (8001f4c <init_Hardware+0x2c4>)
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	715a      	strb	r2, [r3, #5]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinAltFunMode = AF8;
 8001d2e:	4b87      	ldr	r3, [pc, #540]	; (8001f4c <init_Hardware+0x2c4>)
 8001d30:	2208      	movs	r2, #8
 8001d32:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerUSARTPINRX);
 8001d34:	4885      	ldr	r0, [pc, #532]	; (8001f4c <init_Hardware+0x2c4>)
 8001d36:	f000 fabd 	bl	80022b4 <GPIO_Config>

	// Para el USART 6
	USART6Comm.ptrUSARTx 					= USART6;
 8001d3a:	4b85      	ldr	r3, [pc, #532]	; (8001f50 <init_Hardware+0x2c8>)
 8001d3c:	4a85      	ldr	r2, [pc, #532]	; (8001f54 <init_Hardware+0x2cc>)
 8001d3e:	601a      	str	r2, [r3, #0]
	USART6Comm.USART_Config.USART_baudrate 	= USART_BAUDRATE_115200;
 8001d40:	4b83      	ldr	r3, [pc, #524]	; (8001f50 <init_Hardware+0x2c8>)
 8001d42:	2202      	movs	r2, #2
 8001d44:	715a      	strb	r2, [r3, #5]
	USART6Comm.USART_Config.USART_datasize 	= USART_DATASIZE_8BIT;
 8001d46:	4b82      	ldr	r3, [pc, #520]	; (8001f50 <init_Hardware+0x2c8>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	719a      	strb	r2, [r3, #6]
	USART6Comm.USART_Config.USART_parity 	= USART_PARITY_NONE;
 8001d4c:	4b80      	ldr	r3, [pc, #512]	; (8001f50 <init_Hardware+0x2c8>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	71da      	strb	r2, [r3, #7]
	USART6Comm.USART_Config.USART_mode 		= USART_MODE_RXTX;
 8001d52:	4b7f      	ldr	r3, [pc, #508]	; (8001f50 <init_Hardware+0x2c8>)
 8001d54:	2202      	movs	r2, #2
 8001d56:	711a      	strb	r2, [r3, #4]
	USART6Comm.USART_Config.USART_stopbits 	= USART_STOPBIT_1;
 8001d58:	4b7d      	ldr	r3, [pc, #500]	; (8001f50 <init_Hardware+0x2c8>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	721a      	strb	r2, [r3, #8]
	USART6Comm.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;
 8001d5e:	4b7c      	ldr	r3, [pc, #496]	; (8001f50 <init_Hardware+0x2c8>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	725a      	strb	r2, [r3, #9]

	// Se carga lo hecho sobre el USART
	USART_Config(&USART6Comm);
 8001d64:	487a      	ldr	r0, [pc, #488]	; (8001f50 <init_Hardware+0x2c8>)
 8001d66:	f001 f8f7 	bl	8002f58 <USART_Config>

	//Configuración I2C
	// Para el acelerómetro ADXL-345
	SCL.pGPIOx                                    = GPIOB;
 8001d6a:	4b7b      	ldr	r3, [pc, #492]	; (8001f58 <init_Hardware+0x2d0>)
 8001d6c:	4a7b      	ldr	r2, [pc, #492]	; (8001f5c <init_Hardware+0x2d4>)
 8001d6e:	601a      	str	r2, [r3, #0]
	SCL.GPIO_PinConfig.GPIO_PinNumber             = PIN_8;
 8001d70:	4b79      	ldr	r3, [pc, #484]	; (8001f58 <init_Hardware+0x2d0>)
 8001d72:	2208      	movs	r2, #8
 8001d74:	711a      	strb	r2, [r3, #4]
	SCL.GPIO_PinConfig.GPIO_PinMode               = GPIO_MODE_ALTFN;
 8001d76:	4b78      	ldr	r3, [pc, #480]	; (8001f58 <init_Hardware+0x2d0>)
 8001d78:	2202      	movs	r2, #2
 8001d7a:	715a      	strb	r2, [r3, #5]
	SCL.GPIO_PinConfig.GPIO_PinOPType             = GPIO_OTYPE_OPENDRAIN;
 8001d7c:	4b76      	ldr	r3, [pc, #472]	; (8001f58 <init_Hardware+0x2d0>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	721a      	strb	r2, [r3, #8]
	SCL.GPIO_PinConfig.GPIO_PinPuPdControl        = GPIO_PUPDR_NOTHING;
 8001d82:	4b75      	ldr	r3, [pc, #468]	; (8001f58 <init_Hardware+0x2d0>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	71da      	strb	r2, [r3, #7]
	SCL.GPIO_PinConfig.GPIO_PinSpeed              = GPIO_OSPEED_FAST;
 8001d88:	4b73      	ldr	r3, [pc, #460]	; (8001f58 <init_Hardware+0x2d0>)
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	719a      	strb	r2, [r3, #6]
	SCL.GPIO_PinConfig.GPIO_PinAltFunMode         = AF4;
 8001d8e:	4b72      	ldr	r3, [pc, #456]	; (8001f58 <init_Hardware+0x2d0>)
 8001d90:	2204      	movs	r2, #4
 8001d92:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&SCL);
 8001d94:	4870      	ldr	r0, [pc, #448]	; (8001f58 <init_Hardware+0x2d0>)
 8001d96:	f000 fa8d 	bl	80022b4 <GPIO_Config>
	// SDA pin del ADXL-345
	SDA.pGPIOx                                    = GPIOB;
 8001d9a:	4b71      	ldr	r3, [pc, #452]	; (8001f60 <init_Hardware+0x2d8>)
 8001d9c:	4a6f      	ldr	r2, [pc, #444]	; (8001f5c <init_Hardware+0x2d4>)
 8001d9e:	601a      	str	r2, [r3, #0]
	SDA.GPIO_PinConfig.GPIO_PinNumber             = PIN_9;
 8001da0:	4b6f      	ldr	r3, [pc, #444]	; (8001f60 <init_Hardware+0x2d8>)
 8001da2:	2209      	movs	r2, #9
 8001da4:	711a      	strb	r2, [r3, #4]
	SDA.GPIO_PinConfig.GPIO_PinMode               = GPIO_MODE_ALTFN;
 8001da6:	4b6e      	ldr	r3, [pc, #440]	; (8001f60 <init_Hardware+0x2d8>)
 8001da8:	2202      	movs	r2, #2
 8001daa:	715a      	strb	r2, [r3, #5]
	SDA.GPIO_PinConfig.GPIO_PinOPType             = GPIO_OTYPE_OPENDRAIN;
 8001dac:	4b6c      	ldr	r3, [pc, #432]	; (8001f60 <init_Hardware+0x2d8>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	721a      	strb	r2, [r3, #8]
	SDA.GPIO_PinConfig.GPIO_PinPuPdControl        = GPIO_PUPDR_NOTHING;
 8001db2:	4b6b      	ldr	r3, [pc, #428]	; (8001f60 <init_Hardware+0x2d8>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	71da      	strb	r2, [r3, #7]
	SDA.GPIO_PinConfig.GPIO_PinSpeed              = GPIO_OSPEED_FAST;
 8001db8:	4b69      	ldr	r3, [pc, #420]	; (8001f60 <init_Hardware+0x2d8>)
 8001dba:	2202      	movs	r2, #2
 8001dbc:	719a      	strb	r2, [r3, #6]
	SDA.GPIO_PinConfig.GPIO_PinAltFunMode         = AF4;
 8001dbe:	4b68      	ldr	r3, [pc, #416]	; (8001f60 <init_Hardware+0x2d8>)
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&SDA);
 8001dc4:	4866      	ldr	r0, [pc, #408]	; (8001f60 <init_Hardware+0x2d8>)
 8001dc6:	f000 fa75 	bl	80022b4 <GPIO_Config>
	// Se carga en el I2C.
	Acelerometer.ptrI2Cx                            = I2C1;
 8001dca:	4b66      	ldr	r3, [pc, #408]	; (8001f64 <init_Hardware+0x2dc>)
 8001dcc:	4a66      	ldr	r2, [pc, #408]	; (8001f68 <init_Hardware+0x2e0>)
 8001dce:	601a      	str	r2, [r3, #0]
	Acelerometer.modeI2C                            = I2C_MODE_FM;
 8001dd0:	4b64      	ldr	r3, [pc, #400]	; (8001f64 <init_Hardware+0x2dc>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	715a      	strb	r2, [r3, #5]
	Acelerometer.slaveAddress                       = ACCEL_ADDRESS;
 8001dd6:	4b63      	ldr	r3, [pc, #396]	; (8001f64 <init_Hardware+0x2dc>)
 8001dd8:	221d      	movs	r2, #29
 8001dda:	711a      	strb	r2, [r3, #4]
	i2c_config(&Acelerometer);
 8001ddc:	4861      	ldr	r0, [pc, #388]	; (8001f64 <init_Hardware+0x2dc>)
 8001dde:	f000 fbd1 	bl	8002584 <i2c_config>

	// Definición del timer para el muestreo de 1 KHz
	handlerTimer5.ptrTIMx							= TIM5;
 8001de2:	4b62      	ldr	r3, [pc, #392]	; (8001f6c <init_Hardware+0x2e4>)
 8001de4:	4a62      	ldr	r2, [pc, #392]	; (8001f70 <init_Hardware+0x2e8>)
 8001de6:	601a      	str	r2, [r3, #0]
	handlerTimer5.TIMx_Config.TIMx_mode				= BTIMER_MODE_UP;
 8001de8:	4b60      	ldr	r3, [pc, #384]	; (8001f6c <init_Hardware+0x2e4>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	711a      	strb	r2, [r3, #4]
	handlerTimer5.TIMx_Config.TIMx_speed			= BTIMER_SPEED_80MHz;
 8001dee:	4b5f      	ldr	r3, [pc, #380]	; (8001f6c <init_Hardware+0x2e4>)
 8001df0:	f641 72a4 	movw	r2, #8100	; 0x1fa4
 8001df4:	609a      	str	r2, [r3, #8]
	handlerTimer5.TIMx_Config.TIMx_period			= 10;
 8001df6:	4b5d      	ldr	r3, [pc, #372]	; (8001f6c <init_Hardware+0x2e4>)
 8001df8:	220a      	movs	r2, #10
 8001dfa:	60da      	str	r2, [r3, #12]
	handlerTimer5.TIMx_Config.TIMx_interruptEnable 	= BTIMER_INTERRUPT_ENABLE;
 8001dfc:	4b5b      	ldr	r3, [pc, #364]	; (8001f6c <init_Hardware+0x2e4>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	741a      	strb	r2, [r3, #16]

	// Se carga lo hecho sobre el timer del muestreo.
	BasicTimer_Config(&handlerTimer5);
 8001e02:	485a      	ldr	r0, [pc, #360]	; (8001f6c <init_Hardware+0x2e4>)
 8001e04:	f000 f962 	bl	80020cc <BasicTimer_Config>

	// Configuración para el PWM
	// Como son 3 señales, se tiene PWM_1, PWM_2 Y PWM_3.
	// Se multiplexa el timer 3, dado que cada uno tiene 4 canales de PWM.
	HandlerPWM_1.pGPIOx          					= GPIOC;
 8001e08:	4b5a      	ldr	r3, [pc, #360]	; (8001f74 <init_Hardware+0x2ec>)
 8001e0a:	4a5b      	ldr	r2, [pc, #364]	; (8001f78 <init_Hardware+0x2f0>)
 8001e0c:	601a      	str	r2, [r3, #0]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinNumber  	= PIN_7;
 8001e0e:	4b59      	ldr	r3, [pc, #356]	; (8001f74 <init_Hardware+0x2ec>)
 8001e10:	2207      	movs	r2, #7
 8001e12:	711a      	strb	r2, [r3, #4]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8001e14:	4b57      	ldr	r3, [pc, #348]	; (8001f74 <init_Hardware+0x2ec>)
 8001e16:	2202      	movs	r2, #2
 8001e18:	715a      	strb	r2, [r3, #5]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8001e1a:	4b56      	ldr	r3, [pc, #344]	; (8001f74 <init_Hardware+0x2ec>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	721a      	strb	r2, [r3, #8]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001e20:	4b54      	ldr	r3, [pc, #336]	; (8001f74 <init_Hardware+0x2ec>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	71da      	strb	r2, [r3, #7]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8001e26:	4b53      	ldr	r3, [pc, #332]	; (8001f74 <init_Hardware+0x2ec>)
 8001e28:	2202      	movs	r2, #2
 8001e2a:	719a      	strb	r2, [r3, #6]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001e2c:	4b51      	ldr	r3, [pc, #324]	; (8001f74 <init_Hardware+0x2ec>)
 8001e2e:	2202      	movs	r2, #2
 8001e30:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerPWM_1);
 8001e32:	4850      	ldr	r0, [pc, #320]	; (8001f74 <init_Hardware+0x2ec>)
 8001e34:	f000 fa3e 	bl	80022b4 <GPIO_Config>

	handlerTIM3PWM_1.ptrTIMx           	  =   TIM3;
 8001e38:	4b50      	ldr	r3, [pc, #320]	; (8001f7c <init_Hardware+0x2f4>)
 8001e3a:	4a51      	ldr	r2, [pc, #324]	; (8001f80 <init_Hardware+0x2f8>)
 8001e3c:	601a      	str	r2, [r3, #0]
	handlerTIM3PWM_1.config.channel       =   PWM_CHANNEL_2;
 8001e3e:	4b4f      	ldr	r3, [pc, #316]	; (8001f7c <init_Hardware+0x2f4>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	711a      	strb	r2, [r3, #4]
	handlerTIM3PWM_1.config.duttyCicle    =   PWM_DUTTY_50_PERCENT;
 8001e44:	4b4d      	ldr	r3, [pc, #308]	; (8001f7c <init_Hardware+0x2f4>)
 8001e46:	2232      	movs	r2, #50	; 0x32
 8001e48:	81da      	strh	r2, [r3, #14]
	handlerTIM3PWM_1.config.periodo       =   20000;
 8001e4a:	4b4c      	ldr	r3, [pc, #304]	; (8001f7c <init_Hardware+0x2f4>)
 8001e4c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001e50:	819a      	strh	r2, [r3, #12]
	handlerTIM3PWM_1.config.prescaler     =   PWM_PSC_80_MHZ;
 8001e52:	4b4a      	ldr	r3, [pc, #296]	; (8001f7c <init_Hardware+0x2f4>)
 8001e54:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001e58:	609a      	str	r2, [r3, #8]

	pwm_Config(&handlerTIM3PWM_1);
 8001e5a:	4848      	ldr	r0, [pc, #288]	; (8001f7c <init_Hardware+0x2f4>)
 8001e5c:	f000 fe80 	bl	8002b60 <pwm_Config>

	enableOutput(&handlerTIM3PWM_1);
 8001e60:	4846      	ldr	r0, [pc, #280]	; (8001f7c <init_Hardware+0x2f4>)
 8001e62:	f000 ffc1 	bl	8002de8 <enableOutput>
	startPwmSignal(&handlerTIM3PWM_1);
 8001e66:	4845      	ldr	r0, [pc, #276]	; (8001f7c <init_Hardware+0x2f4>)
 8001e68:	f000 ffac 	bl	8002dc4 <startPwmSignal>

	HandlerPWM_2.pGPIOx          					= GPIOC;
 8001e6c:	4b45      	ldr	r3, [pc, #276]	; (8001f84 <init_Hardware+0x2fc>)
 8001e6e:	4a42      	ldr	r2, [pc, #264]	; (8001f78 <init_Hardware+0x2f0>)
 8001e70:	601a      	str	r2, [r3, #0]
	HandlerPWM_2.GPIO_PinConfig.GPIO_PinNumber  	= PIN_8;
 8001e72:	4b44      	ldr	r3, [pc, #272]	; (8001f84 <init_Hardware+0x2fc>)
 8001e74:	2208      	movs	r2, #8
 8001e76:	711a      	strb	r2, [r3, #4]
	HandlerPWM_2.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8001e78:	4b42      	ldr	r3, [pc, #264]	; (8001f84 <init_Hardware+0x2fc>)
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	715a      	strb	r2, [r3, #5]
	HandlerPWM_2.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8001e7e:	4b41      	ldr	r3, [pc, #260]	; (8001f84 <init_Hardware+0x2fc>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	721a      	strb	r2, [r3, #8]
	HandlerPWM_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001e84:	4b3f      	ldr	r3, [pc, #252]	; (8001f84 <init_Hardware+0x2fc>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	71da      	strb	r2, [r3, #7]
	HandlerPWM_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8001e8a:	4b3e      	ldr	r3, [pc, #248]	; (8001f84 <init_Hardware+0x2fc>)
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	719a      	strb	r2, [r3, #6]
	HandlerPWM_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001e90:	4b3c      	ldr	r3, [pc, #240]	; (8001f84 <init_Hardware+0x2fc>)
 8001e92:	2202      	movs	r2, #2
 8001e94:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerPWM_2);
 8001e96:	483b      	ldr	r0, [pc, #236]	; (8001f84 <init_Hardware+0x2fc>)
 8001e98:	f000 fa0c 	bl	80022b4 <GPIO_Config>

	handlerTIM3PWM_2.ptrTIMx           	  =   TIM3;
 8001e9c:	4b3a      	ldr	r3, [pc, #232]	; (8001f88 <init_Hardware+0x300>)
 8001e9e:	4a38      	ldr	r2, [pc, #224]	; (8001f80 <init_Hardware+0x2f8>)
 8001ea0:	601a      	str	r2, [r3, #0]
	handlerTIM3PWM_2.config.channel       =   PWM_CHANNEL_3;
 8001ea2:	4b39      	ldr	r3, [pc, #228]	; (8001f88 <init_Hardware+0x300>)
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	711a      	strb	r2, [r3, #4]
	handlerTIM3PWM_2.config.duttyCicle    =   PWM_DUTTY_50_PERCENT;
 8001ea8:	4b37      	ldr	r3, [pc, #220]	; (8001f88 <init_Hardware+0x300>)
 8001eaa:	2232      	movs	r2, #50	; 0x32
 8001eac:	81da      	strh	r2, [r3, #14]
	handlerTIM3PWM_2.config.periodo       =   20000;
 8001eae:	4b36      	ldr	r3, [pc, #216]	; (8001f88 <init_Hardware+0x300>)
 8001eb0:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001eb4:	819a      	strh	r2, [r3, #12]
	handlerTIM3PWM_2.config.prescaler     =   PWM_PSC_80_MHZ;
 8001eb6:	4b34      	ldr	r3, [pc, #208]	; (8001f88 <init_Hardware+0x300>)
 8001eb8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001ebc:	609a      	str	r2, [r3, #8]

	pwm_Config(&handlerTIM3PWM_2);
 8001ebe:	4832      	ldr	r0, [pc, #200]	; (8001f88 <init_Hardware+0x300>)
 8001ec0:	f000 fe4e 	bl	8002b60 <pwm_Config>

	enableOutput(&handlerTIM3PWM_2);
 8001ec4:	4830      	ldr	r0, [pc, #192]	; (8001f88 <init_Hardware+0x300>)
 8001ec6:	f000 ff8f 	bl	8002de8 <enableOutput>
	startPwmSignal(&handlerTIM3PWM_2);
 8001eca:	482f      	ldr	r0, [pc, #188]	; (8001f88 <init_Hardware+0x300>)
 8001ecc:	f000 ff7a 	bl	8002dc4 <startPwmSignal>

	HandlerPWM_3.pGPIOx          					= GPIOC;
 8001ed0:	4b2e      	ldr	r3, [pc, #184]	; (8001f8c <init_Hardware+0x304>)
 8001ed2:	4a29      	ldr	r2, [pc, #164]	; (8001f78 <init_Hardware+0x2f0>)
 8001ed4:	601a      	str	r2, [r3, #0]
	HandlerPWM_3.GPIO_PinConfig.GPIO_PinNumber  	= PIN_9;
 8001ed6:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <init_Hardware+0x304>)
 8001ed8:	2209      	movs	r2, #9
 8001eda:	711a      	strb	r2, [r3, #4]
	HandlerPWM_3.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8001edc:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <init_Hardware+0x304>)
 8001ede:	2202      	movs	r2, #2
 8001ee0:	715a      	strb	r2, [r3, #5]
	HandlerPWM_3.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8001ee2:	4b2a      	ldr	r3, [pc, #168]	; (8001f8c <init_Hardware+0x304>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	721a      	strb	r2, [r3, #8]
	HandlerPWM_3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001ee8:	4b28      	ldr	r3, [pc, #160]	; (8001f8c <init_Hardware+0x304>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	71da      	strb	r2, [r3, #7]
	HandlerPWM_3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8001eee:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <init_Hardware+0x304>)
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	719a      	strb	r2, [r3, #6]
	HandlerPWM_3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001ef4:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <init_Hardware+0x304>)
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerPWM_3);
 8001efa:	4824      	ldr	r0, [pc, #144]	; (8001f8c <init_Hardware+0x304>)
 8001efc:	f000 f9da 	bl	80022b4 <GPIO_Config>

	handlerTIM3PWM_3.ptrTIMx           	  =   TIM3;
 8001f00:	4b23      	ldr	r3, [pc, #140]	; (8001f90 <init_Hardware+0x308>)
 8001f02:	4a1f      	ldr	r2, [pc, #124]	; (8001f80 <init_Hardware+0x2f8>)
 8001f04:	601a      	str	r2, [r3, #0]
	handlerTIM3PWM_3.config.channel       =   PWM_CHANNEL_4;
 8001f06:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <init_Hardware+0x308>)
 8001f08:	2203      	movs	r2, #3
 8001f0a:	711a      	strb	r2, [r3, #4]
	handlerTIM3PWM_3.config.duttyCicle    =   PWM_DUTTY_50_PERCENT;
 8001f0c:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <init_Hardware+0x308>)
 8001f0e:	2232      	movs	r2, #50	; 0x32
 8001f10:	81da      	strh	r2, [r3, #14]
	handlerTIM3PWM_3.config.periodo       =   20000;
 8001f12:	4b1f      	ldr	r3, [pc, #124]	; (8001f90 <init_Hardware+0x308>)
 8001f14:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001f18:	819a      	strh	r2, [r3, #12]
	handlerTIM3PWM_3.config.prescaler     =   PWM_PSC_80_MHZ;
 8001f1a:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <init_Hardware+0x308>)
 8001f1c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001f20:	609a      	str	r2, [r3, #8]

	pwm_Config(&handlerTIM3PWM_3);
 8001f22:	481b      	ldr	r0, [pc, #108]	; (8001f90 <init_Hardware+0x308>)
 8001f24:	f000 fe1c 	bl	8002b60 <pwm_Config>

	enableOutput(&handlerTIM3PWM_3);
 8001f28:	4819      	ldr	r0, [pc, #100]	; (8001f90 <init_Hardware+0x308>)
 8001f2a:	f000 ff5d 	bl	8002de8 <enableOutput>
	startPwmSignal(&handlerTIM3PWM_3);
 8001f2e:	4818      	ldr	r0, [pc, #96]	; (8001f90 <init_Hardware+0x308>)
 8001f30:	f000 ff48 	bl	8002dc4 <startPwmSignal>
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000234 	.word	0x20000234
 8001f3c:	20000238 	.word	0x20000238
 8001f40:	40020000 	.word	0x40020000
 8001f44:	200060d8 	.word	0x200060d8
 8001f48:	20000244 	.word	0x20000244
 8001f4c:	20000250 	.word	0x20000250
 8001f50:	2000025c 	.word	0x2000025c
 8001f54:	40011400 	.word	0x40011400
 8001f58:	200002fc 	.word	0x200002fc
 8001f5c:	40020400 	.word	0x40020400
 8001f60:	200002f0 	.word	0x200002f0
 8001f64:	20000308 	.word	0x20000308
 8001f68:	40005400 	.word	0x40005400
 8001f6c:	200060ec 	.word	0x200060ec
 8001f70:	40000c00 	.word	0x40000c00
 8001f74:	20006104 	.word	0x20006104
 8001f78:	40020800 	.word	0x40020800
 8001f7c:	20006128 	.word	0x20006128
 8001f80:	40000400 	.word	0x40000400
 8001f84:	20006110 	.word	0x20006110
 8001f88:	20006138 	.word	0x20006138
 8001f8c:	2000611c 	.word	0x2000611c
 8001f90:	20006148 	.word	0x20006148

08001f94 <BasicTimer2_Callback>:


// Callback para el blinky pin.
void BasicTimer2_Callback(void){
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handlerBlinkyPin);
 8001f98:	480c      	ldr	r0, [pc, #48]	; (8001fcc <BasicTimer2_Callback+0x38>)
 8001f9a:	f000 fadd 	bl	8002558 <GPIOxTooglePin>
	if(sendMSG >= 4){
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <BasicTimer2_Callback+0x3c>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d909      	bls.n	8001fba <BasicTimer2_Callback+0x26>
		updateDuttyCycle(&handlerTIM3PWM_1, duttyCalculator(X_axis));
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <BasicTimer2_Callback+0x40>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fe3a 	bl	8001c24 <duttyCalculator>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4808      	ldr	r0, [pc, #32]	; (8001fd8 <BasicTimer2_Callback+0x44>)
 8001fb6:	f000 ffa3 	bl	8002f00 <updateDuttyCycle>
	}
	sendMSG++;
 8001fba:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <BasicTimer2_Callback+0x3c>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <BasicTimer2_Callback+0x3c>)
 8001fc4:	701a      	strb	r2, [r3, #0]
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000238 	.word	0x20000238
 8001fd0:	200002ec 	.word	0x200002ec
 8001fd4:	20006158 	.word	0x20006158
 8001fd8:	20006128 	.word	0x20006128

08001fdc <BasicTimer5_Callback>:

// Callback para la bandera del muestreo de 1 KHz
void BasicTimer5_Callback(void){
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
	if(rxData == 'c'){
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <BasicTimer5_Callback+0x44>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b63      	cmp	r3, #99	; 0x63
 8001fe6:	d103      	bne.n	8001ff0 <BasicTimer5_Callback+0x14>
		flagMuestreo = 2;
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <BasicTimer5_Callback+0x48>)
 8001fea:	2202      	movs	r2, #2
 8001fec:	701a      	strb	r2, [r3, #0]
	}else if(rxData == 'v'){
		flagMuestreo = 4;
	}else{
		flagMuestreo = 1;
	}
}
 8001fee:	e012      	b.n	8002016 <BasicTimer5_Callback+0x3a>
	}else if(rxData == 'k'){
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <BasicTimer5_Callback+0x44>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b6b      	cmp	r3, #107	; 0x6b
 8001ff6:	d103      	bne.n	8002000 <BasicTimer5_Callback+0x24>
		flagMuestreo = 3;
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <BasicTimer5_Callback+0x48>)
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	701a      	strb	r2, [r3, #0]
}
 8001ffe:	e00a      	b.n	8002016 <BasicTimer5_Callback+0x3a>
	}else if(rxData == 'v'){
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <BasicTimer5_Callback+0x44>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b76      	cmp	r3, #118	; 0x76
 8002006:	d103      	bne.n	8002010 <BasicTimer5_Callback+0x34>
		flagMuestreo = 4;
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <BasicTimer5_Callback+0x48>)
 800200a:	2204      	movs	r2, #4
 800200c:	701a      	strb	r2, [r3, #0]
}
 800200e:	e002      	b.n	8002016 <BasicTimer5_Callback+0x3a>
		flagMuestreo = 1;
 8002010:	4b04      	ldr	r3, [pc, #16]	; (8002024 <BasicTimer5_Callback+0x48>)
 8002012:	2201      	movs	r2, #1
 8002014:	701a      	strb	r2, [r3, #0]
}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000311 	.word	0x20000311
 8002024:	20006100 	.word	0x20006100

08002028 <usart6Rx_Callback>:
// Callback para el usart 6.
void usart6Rx_Callback(void){
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
	rxData = getRxData();
 800202c:	f001 f9ca 	bl	80033c4 <getRxData>
 8002030:	4603      	mov	r3, r0
 8002032:	461a      	mov	r2, r3
 8002034:	4b01      	ldr	r3, [pc, #4]	; (800203c <usart6Rx_Callback+0x14>)
 8002036:	701a      	strb	r2, [r3, #0]
}
 8002038:	bf00      	nop
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20000311 	.word	0x20000311

08002040 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002040:	480d      	ldr	r0, [pc, #52]	; (8002078 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002042:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002044:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002048:	480c      	ldr	r0, [pc, #48]	; (800207c <LoopForever+0x6>)
  ldr r1, =_edata
 800204a:	490d      	ldr	r1, [pc, #52]	; (8002080 <LoopForever+0xa>)
  ldr r2, =_sidata
 800204c:	4a0d      	ldr	r2, [pc, #52]	; (8002084 <LoopForever+0xe>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002050:	e002      	b.n	8002058 <LoopCopyDataInit>

08002052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002056:	3304      	adds	r3, #4

08002058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800205c:	d3f9      	bcc.n	8002052 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800205e:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002060:	4c0a      	ldr	r4, [pc, #40]	; (800208c <LoopForever+0x16>)
  movs r3, #0
 8002062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002064:	e001      	b.n	800206a <LoopFillZerobss>

08002066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002068:	3204      	adds	r2, #4

0800206a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800206a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800206c:	d3fb      	bcc.n	8002066 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800206e:	f001 f9eb 	bl	8003448 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002072:	f7ff f8c9 	bl	8001208 <main>

08002076 <LoopForever>:

LoopForever:
    b LoopForever
 8002076:	e7fe      	b.n	8002076 <LoopForever>
  ldr   r0, =_estack
 8002078:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800207c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002080:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8002084:	0800836c 	.word	0x0800836c
  ldr r2, =_sbss
 8002088:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 800208c:	20006180 	.word	0x20006180

08002090 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002090:	e7fe      	b.n	8002090 <ADC_IRQHandler>
	...

08002094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	db0b      	blt.n	80020be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	f003 021f 	and.w	r2, r3, #31
 80020ac:	4906      	ldr	r1, [pc, #24]	; (80020c8 <__NVIC_EnableIRQ+0x34>)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	2001      	movs	r0, #1
 80020b6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr
 80020c8:	e000e100 	.word	0xe000e100

080020cc <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrBTimerHandler->ptrTIMx;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a4e      	ldr	r2, [pc, #312]	; (8002214 <BasicTimer_Config+0x148>)
 80020da:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020dc:	b672      	cpsid	i
}
 80020de:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();
	/* 1. Activar la señal de reloj del periférico requerido */
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e8:	d106      	bne.n	80020f8 <BasicTimer_Config+0x2c>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 80020ea:	4b4b      	ldr	r3, [pc, #300]	; (8002218 <BasicTimer_Config+0x14c>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	4a4a      	ldr	r2, [pc, #296]	; (8002218 <BasicTimer_Config+0x14c>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6413      	str	r3, [r2, #64]	; 0x40
 80020f6:	e024      	b.n	8002142 <BasicTimer_Config+0x76>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a47      	ldr	r2, [pc, #284]	; (800221c <BasicTimer_Config+0x150>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d106      	bne.n	8002110 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002102:	4b45      	ldr	r3, [pc, #276]	; (8002218 <BasicTimer_Config+0x14c>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	4a44      	ldr	r2, [pc, #272]	; (8002218 <BasicTimer_Config+0x14c>)
 8002108:	f043 0302 	orr.w	r3, r3, #2
 800210c:	6413      	str	r3, [r2, #64]	; 0x40
 800210e:	e018      	b.n	8002142 <BasicTimer_Config+0x76>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a42      	ldr	r2, [pc, #264]	; (8002220 <BasicTimer_Config+0x154>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d106      	bne.n	8002128 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 800211a:	4b3f      	ldr	r3, [pc, #252]	; (8002218 <BasicTimer_Config+0x14c>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	4a3e      	ldr	r2, [pc, #248]	; (8002218 <BasicTimer_Config+0x14c>)
 8002120:	f043 0304 	orr.w	r3, r3, #4
 8002124:	6413      	str	r3, [r2, #64]	; 0x40
 8002126:	e00c      	b.n	8002142 <BasicTimer_Config+0x76>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a3d      	ldr	r2, [pc, #244]	; (8002224 <BasicTimer_Config+0x158>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d106      	bne.n	8002140 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 8002132:	4b39      	ldr	r3, [pc, #228]	; (8002218 <BasicTimer_Config+0x14c>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	4a38      	ldr	r2, [pc, #224]	; (8002218 <BasicTimer_Config+0x14c>)
 8002138:	f043 0308 	orr.w	r3, r3, #8
 800213c:	6413      	str	r3, [r2, #64]	; 0x40
 800213e:	e000      	b.n	8002142 <BasicTimer_Config+0x76>
	}

	else{
		__NOP();
 8002140:	bf00      	nop
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */
	// -1 porque el contador empieza en 0
	ptrBTimerHandler->ptrTIMx-> PSC = ptrBTimerHandler ->TIMx_Config.TIMx_speed - 1;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	3a01      	subs	r2, #1
 800214c:	629a      	str	r2, [r3, #40]	; 0x28

	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	791b      	ldrb	r3, [r3, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d112      	bne.n	800217c <BasicTimer_Config+0xb0>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Necesitamos poner la direccion en 0 para que cuente hacia arria TIM_CR1_DIR = 1, entonces
		// lo negamos y hacemos una AND con el valor actual.
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0210 	bic.w	r2, r2, #16
 8002164:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	3a01      	subs	r2, #1
 8002170:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2200      	movs	r2, #0
 8002178:	625a      	str	r2, [r3, #36]	; 0x24
 800217a:	e00d      	b.n	8002198 <BasicTimer_Config+0xcc>

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		// Cuando CR1 = 1 es descendente
		ptrBTimerHandler->ptrTIMx->CR1 = TIM_CR1_DIR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2210      	movs	r2, #16
 8002182:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		ptrBTimerHandler-> ptrTIMx->ARR = 0;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2200      	movs	r2, #0
 800218a:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	3a01      	subs	r2, #1
 8002196:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0201 	orr.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]
	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	// El registro encargado de la interrupcion es el UIE

	// Modificar con el ciclo If
	ptrBTimerHandler->ptrTIMx->DIER |= ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable; //TIM_DIER_UIE
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	7c1b      	ldrb	r3, [r3, #16]
 80021b2:	4619      	mov	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c4:	d103      	bne.n	80021ce <BasicTimer_Config+0x102>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 80021c6:	201c      	movs	r0, #28
 80021c8:	f7ff ff64 	bl	8002094 <__NVIC_EnableIRQ>
 80021cc:	e01b      	b.n	8002206 <BasicTimer_Config+0x13a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a12      	ldr	r2, [pc, #72]	; (800221c <BasicTimer_Config+0x150>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d103      	bne.n	80021e0 <BasicTimer_Config+0x114>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 80021d8:	201d      	movs	r0, #29
 80021da:	f7ff ff5b 	bl	8002094 <__NVIC_EnableIRQ>
 80021de:	e012      	b.n	8002206 <BasicTimer_Config+0x13a>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0e      	ldr	r2, [pc, #56]	; (8002220 <BasicTimer_Config+0x154>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d103      	bne.n	80021f2 <BasicTimer_Config+0x126>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 80021ea:	201e      	movs	r0, #30
 80021ec:	f7ff ff52 	bl	8002094 <__NVIC_EnableIRQ>
 80021f0:	e009      	b.n	8002206 <BasicTimer_Config+0x13a>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a0b      	ldr	r2, [pc, #44]	; (8002224 <BasicTimer_Config+0x158>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d103      	bne.n	8002204 <BasicTimer_Config+0x138>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 80021fc:	2032      	movs	r0, #50	; 0x32
 80021fe:	f7ff ff49 	bl	8002094 <__NVIC_EnableIRQ>
 8002202:	e000      	b.n	8002206 <BasicTimer_Config+0x13a>
	}

	else{
		__NOP();
 8002204:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8002206:	b662      	cpsie	i
}
 8002208:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20006164 	.word	0x20006164
 8002218:	40023800 	.word	0x40023800
 800221c:	40000400 	.word	0x40000400
 8002220:	40000800 	.word	0x40000800
 8002224:	40000c00 	.word	0x40000c00

08002228 <BasicTimer3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer3_Callback(void){
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800222c:	bf00      	nop
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr

08002236 <BasicTimer4_Callback>:
__attribute__((weak)) void BasicTimer4_Callback(void){
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800223a:	bf00      	nop
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr

08002244 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM2->SR &= ~TIM_SR_UIF;
 8002248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002252:	f023 0301 	bic.w	r3, r3, #1
 8002256:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer2_Callback();
 8002258:	f7ff fe9c 	bl	8001f94 <BasicTimer2_Callback>
}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}

08002260 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM3->SR &= ~TIM_SR_UIF;
 8002264:	4b04      	ldr	r3, [pc, #16]	; (8002278 <TIM3_IRQHandler+0x18>)
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	4a03      	ldr	r2, [pc, #12]	; (8002278 <TIM3_IRQHandler+0x18>)
 800226a:	f023 0301 	bic.w	r3, r3, #1
 800226e:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer3_Callback();
 8002270:	f7ff ffda 	bl	8002228 <BasicTimer3_Callback>
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40000400 	.word	0x40000400

0800227c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM4->SR &= ~TIM_SR_UIF;
 8002280:	4b04      	ldr	r3, [pc, #16]	; (8002294 <TIM4_IRQHandler+0x18>)
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	4a03      	ldr	r2, [pc, #12]	; (8002294 <TIM4_IRQHandler+0x18>)
 8002286:	f023 0301 	bic.w	r3, r3, #1
 800228a:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer4_Callback();
 800228c:	f7ff ffd3 	bl	8002236 <BasicTimer4_Callback>
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40000800 	.word	0x40000800

08002298 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM5->SR &= ~TIM_SR_UIF;
 800229c:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <TIM5_IRQHandler+0x18>)
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	4a03      	ldr	r2, [pc, #12]	; (80022b0 <TIM5_IRQHandler+0x18>)
 80022a2:	f023 0301 	bic.w	r3, r3, #1
 80022a6:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer5_Callback();
 80022a8:	f7ff fe98 	bl	8001fdc <BasicTimer5_Callback>
}
 80022ac:	bf00      	nop
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40000c00 	.word	0x40000c00

080022b4 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemento "activar el periferico o activar la señal de reloj del periferico)
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60bb      	str	r3, [r7, #8]

	// 1)Activar el periferico
	//verificamos para GPIOA
	if(pGPIOHandler->pGPIOx == GPIOA){
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a87      	ldr	r2, [pc, #540]	; (80024e8 <GPIO_Config+0x234>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d106      	bne.n	80022dc <GPIO_Config+0x28>
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 80022ce:	4b87      	ldr	r3, [pc, #540]	; (80024ec <GPIO_Config+0x238>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	4a86      	ldr	r2, [pc, #536]	; (80024ec <GPIO_Config+0x238>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	6313      	str	r3, [r2, #48]	; 0x30
 80022da:	e03a      	b.n	8002352 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx == GPIOB){
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a83      	ldr	r2, [pc, #524]	; (80024f0 <GPIO_Config+0x23c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d106      	bne.n	80022f4 <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 80022e6:	4b81      	ldr	r3, [pc, #516]	; (80024ec <GPIO_Config+0x238>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a80      	ldr	r2, [pc, #512]	; (80024ec <GPIO_Config+0x238>)
 80022ec:	f043 0302 	orr.w	r3, r3, #2
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	e02e      	b.n	8002352 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if(pGPIOHandler->pGPIOx == GPIOC){
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a7e      	ldr	r2, [pc, #504]	; (80024f4 <GPIO_Config+0x240>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d106      	bne.n	800230c <GPIO_Config+0x58>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 80022fe:	4b7b      	ldr	r3, [pc, #492]	; (80024ec <GPIO_Config+0x238>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	4a7a      	ldr	r2, [pc, #488]	; (80024ec <GPIO_Config+0x238>)
 8002304:	f043 0304 	orr.w	r3, r3, #4
 8002308:	6313      	str	r3, [r2, #48]	; 0x30
 800230a:	e022      	b.n	8002352 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if(pGPIOHandler->pGPIOx == GPIOD){
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a79      	ldr	r2, [pc, #484]	; (80024f8 <GPIO_Config+0x244>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d106      	bne.n	8002324 <GPIO_Config+0x70>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 8002316:	4b75      	ldr	r3, [pc, #468]	; (80024ec <GPIO_Config+0x238>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	4a74      	ldr	r2, [pc, #464]	; (80024ec <GPIO_Config+0x238>)
 800231c:	f043 0308 	orr.w	r3, r3, #8
 8002320:	6313      	str	r3, [r2, #48]	; 0x30
 8002322:	e016      	b.n	8002352 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if(pGPIOHandler->pGPIOx == GPIOE){
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a74      	ldr	r2, [pc, #464]	; (80024fc <GPIO_Config+0x248>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d106      	bne.n	800233c <GPIO_Config+0x88>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 800232e:	4b6f      	ldr	r3, [pc, #444]	; (80024ec <GPIO_Config+0x238>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a6e      	ldr	r2, [pc, #440]	; (80024ec <GPIO_Config+0x238>)
 8002334:	f043 0310 	orr.w	r3, r3, #16
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	e00a      	b.n	8002352 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOH
	else if(pGPIOHandler->pGPIOx == GPIOH){
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a6f      	ldr	r2, [pc, #444]	; (8002500 <GPIO_Config+0x24c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d105      	bne.n	8002352 <GPIO_Config+0x9e>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 8002346:	4b69      	ldr	r3, [pc, #420]	; (80024ec <GPIO_Config+0x238>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	4a68      	ldr	r2, [pc, #416]	; (80024ec <GPIO_Config+0x238>)
 800234c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002350:	6313      	str	r3, [r2, #48]	; 0x30
	// Despues de activado, podemos comenzar a configurar.

	// 2) COnfigurando el registro GPIOx_MODER
	// Acá estamos leyendo config, moviendo "PinNumber" veces hacia la izquierda
	// ese valor (shift left) y todo eso lo cargamos en la variable auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	795b      	ldrb	r3, [r3, #5]
 8002356:	461a      	mov	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	791b      	ldrb	r3, [r3, #4]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	60fb      	str	r3, [r7, #12]
	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro
	 * (debemos escribir 0b00) para lo cual aplicamos una mascara y una operación de
	 * bitwise AND
	 */
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	791b      	ldrb	r3, [r3, #4]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	2103      	movs	r1, #3
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	4619      	mov	r1, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	400a      	ands	r2, r1
 8002380:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6819      	ldr	r1, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	430a      	orrs	r2, r1
 8002390:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	7a1b      	ldrb	r3, [r3, #8]
 8002396:	461a      	mov	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	791b      	ldrb	r3, [r3, #4]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	791b      	ldrb	r3, [r3, #4]
 80023ac:	4619      	mov	r1, r3
 80023ae:	2301      	movs	r3, #1
 80023b0:	408b      	lsls	r3, r1
 80023b2:	43db      	mvns	r3, r3
 80023b4:	4619      	mov	r1, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	400a      	ands	r2, r1
 80023bc:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6859      	ldr	r1, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	799b      	ldrb	r3, [r3, #6]
 80023d2:	461a      	mov	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	791b      	ldrb	r3, [r3, #4]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0B11 << 2 *pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	791b      	ldrb	r3, [r3, #4]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	2103      	movs	r1, #3
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	4619      	mov	r1, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	400a      	ands	r2, r1
 80023fc:	609a      	str	r2, [r3, #8]

	//cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6899      	ldr	r1, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	430a      	orrs	r2, r1
 800240c:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull up pull down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	79db      	ldrb	r3, [r3, #7]
 8002412:	461a      	mov	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	791b      	ldrb	r3, [r3, #4]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	791b      	ldrb	r3, [r3, #4]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	2103      	movs	r1, #3
 800242e:	fa01 f303 	lsl.w	r3, r1, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	4619      	mov	r1, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	400a      	ands	r2, r1
 800243c:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68d9      	ldr	r1, [r3, #12]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	430a      	orrs	r2, r1
 800244c:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas.. se vera luego
	if (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	795b      	ldrb	r3, [r3, #5]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d143      	bne.n	80024de <GPIO_Config+0x22a>

		//Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	791b      	ldrb	r3, [r3, #4]
 800245a:	2b07      	cmp	r3, #7
 800245c:	d81f      	bhi.n	800249e <GPIO_Config+0x1ea>
			//Estamos en el registro AGRL, que controla los piner del pIN_0 AL PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	791b      	ldrb	r3, [r3, #4]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del tegistro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6a1a      	ldr	r2, [r3, #32]
 800246c:	210f      	movs	r1, #15
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	fa01 f303 	lsl.w	r3, r1, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	4619      	mov	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	400a      	ands	r2, r1
 800247e:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor confiurado en la posicon seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6a1a      	ldr	r2, [r3, #32]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	7a5b      	ldrb	r3, [r3, #9]
 800248a:	4619      	mov	r1, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	fa01 f303 	lsl.w	r3, r1, r3
 8002492:	4619      	mov	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} //Fin del GPIO_Config
 800249c:	e01f      	b.n	80024de <GPIO_Config+0x22a>
			auxPosition = 4* (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber -8);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	791b      	ldrb	r3, [r3, #4]
 80024a2:	3b08      	subs	r3, #8
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ae:	210f      	movs	r1, #15
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	fa01 f303 	lsl.w	r3, r1, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	4619      	mov	r1, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	400a      	ands	r2, r1
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	7a5b      	ldrb	r3, [r3, #9]
 80024cc:	4619      	mov	r1, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	fa01 f303 	lsl.w	r3, r1, r3
 80024d4:	4619      	mov	r1, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24
} //Fin del GPIO_Config
 80024de:	bf00      	nop
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr
 80024e8:	40020000 	.word	0x40020000
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40020400 	.word	0x40020400
 80024f4:	40020800 	.word	0x40020800
 80024f8:	40020c00 	.word	0x40020c00
 80024fc:	40021000 	.word	0x40021000
 8002500:	40021c00 	.word	0x40021c00

08002504 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 *
 */
void GPIO_WritePin(GPIO_Handler_t *pPinHandler, uint8_t newState){
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->0DR &= ~(SET << pPinHandler ->GPIO_PinConfig.GPIO_PinNumber);
	if(newState == SET){
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d10d      	bne.n	8002532 <GPIO_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699a      	ldr	r2, [r3, #24]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	791b      	ldrb	r3, [r3, #4]
 8002520:	4619      	mov	r1, r3
 8002522:	2301      	movs	r3, #1
 8002524:	408b      	lsls	r3, r1
 8002526:	4619      	mov	r1, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	619a      	str	r2, [r3, #24]
	else{
		//Trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
	}

}
 8002530:	e00d      	b.n	800254e <GPIO_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699a      	ldr	r2, [r3, #24]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	791b      	ldrb	r3, [r3, #4]
 800253c:	3310      	adds	r3, #16
 800253e:	2101      	movs	r1, #1
 8002540:	fa01 f303 	lsl.w	r3, r1, r3
 8002544:	4619      	mov	r1, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	619a      	str	r2, [r3, #24]
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr

08002558 <GPIOxTooglePin>:
	pinValue &= mask;

	return pinValue;
}

void GPIOxTooglePin(GPIO_Handler_t *pPinHandler){
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR ^= (SET <<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695a      	ldr	r2, [r3, #20]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	791b      	ldrb	r3, [r3, #4]
 800256a:	4619      	mov	r1, r3
 800256c:	2301      	movs	r3, #1
 800256e:	408b      	lsls	r3, r1
 8002570:	4619      	mov	r1, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	404a      	eors	r2, r1
 8002578:	615a      	str	r2, [r3, #20]
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <i2c_config>:
 *
 * Además, estos pines deben ser configurados como salidas open-drain y con las
 * resistencias en modo pull-up..
 */

void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
	/* 1. Activamos la señal de reloj para el modulo I2C seleccionado */
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a45      	ldr	r2, [pc, #276]	; (80026a8 <i2c_config+0x124>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d106      	bne.n	80025a4 <i2c_config+0x20>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8002596:	4b45      	ldr	r3, [pc, #276]	; (80026ac <i2c_config+0x128>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	4a44      	ldr	r2, [pc, #272]	; (80026ac <i2c_config+0x128>)
 800259c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025a0:	6413      	str	r3, [r2, #64]	; 0x40
 80025a2:	e016      	b.n	80025d2 <i2c_config+0x4e>
	}
	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a41      	ldr	r2, [pc, #260]	; (80026b0 <i2c_config+0x12c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d106      	bne.n	80025bc <i2c_config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 80025ae:	4b3f      	ldr	r3, [pc, #252]	; (80026ac <i2c_config+0x128>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	4a3e      	ldr	r2, [pc, #248]	; (80026ac <i2c_config+0x128>)
 80025b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025b8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ba:	e00a      	b.n	80025d2 <i2c_config+0x4e>
	}
	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a3c      	ldr	r2, [pc, #240]	; (80026b4 <i2c_config+0x130>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d105      	bne.n	80025d2 <i2c_config+0x4e>
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 80025c6:	4b39      	ldr	r3, [pc, #228]	; (80026ac <i2c_config+0x128>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	4a38      	ldr	r2, [pc, #224]	; (80026ac <i2c_config+0x128>)
 80025cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025d0:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025e0:	601a      	str	r2, [r3, #0]
	__NOP();
 80025e2:	bf00      	nop
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_SWRST;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025f2:	601a      	str	r2, [r3, #0]

	/* 3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C
	 */
	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos); // Borramos la configuración previa
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002602:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_80_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);// Seleccionamos 80 MHz
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8002612:	605a      	str	r2, [r3, #4]
	/* 4. Configuramos el modo I2C en el que el sistema funciona
	 * En esta configuración se incluye también la configuración del reloj
	 * y el tiempo maximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los registros en 0
	 */
	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2200      	movs	r2, #0
 800261a:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2200      	movs	r2, #0
 8002622:	621a      	str	r2, [r3, #32]

	if (ptrHandlerI2C->modeI2C == I2C_MODE_SM){
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	795b      	ldrb	r3, [r3, #5]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d118      	bne.n	800265e <i2c_config+0xda>
		// Estamos en modo "standar" (SM mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~I2C_CCR_FS;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	69da      	ldr	r2, [r3, #28]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800263a:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que se encarga de generar la señal del reloj
		ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_SM_SPEED_100KHz << I2C_CCR_CCR_Pos);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	69da      	ldr	r2, [r3, #28]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 800264a:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que controla el tiempo T-Rise maximo
		ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6a1a      	ldr	r2, [r3, #32]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0229 	orr.w	r2, r2, #41	; 0x29
 800265a:	621a      	str	r2, [r3, #32]
 800265c:	e017      	b.n	800268e <i2c_config+0x10a>
	}
	else{
		// Estamos en modo "fast" (FM mode)
		// Seleccionamos el modo fast
		ptrHandlerI2C->ptrI2Cx->CCR &= I2C_CCR_FS;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	69da      	ldr	r2, [r3, #28]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800266c:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que se encarga de generar la señal del reloj
		ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz << I2C_CCR_CCR_Pos);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	69da      	ldr	r2, [r3, #28]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f042 0221 	orr.w	r2, r2, #33	; 0x21
 800267c:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que controla el tiempo T-Rise maximo
		ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6a1a      	ldr	r2, [r3, #32]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 020c 	orr.w	r2, r2, #12
 800268c:	621a      	str	r2, [r3, #32]
	}

	/* 5. Activamos el modulo I2C
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f042 0201 	orr.w	r2, r2, #1
 800269c:	601a      	str	r2, [r3, #0]
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	40005400 	.word	0x40005400
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40005800 	.word	0x40005800
 80026b4:	40005c00 	.word	0x40005c00

080026b8 <i2c_stopTransaction>:

/* 8. Generamos la condición de stop
 */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	/* 7. Generamos la condición de stop
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ce:	601a      	str	r2, [r3, #0]
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <i2c_startTransaction>:
/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_CR2
 * 2. Generamos la señal de "start"
 * 2a. Esperamos a que la bandera del evento "start" se levante.
 * Mientras esperamos, el valor de SB es 0, entonces la negación (!) es 1
 */
void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_CR2
	 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80026e2:	e000      	b.n	80026e6 <i2c_startTransaction+0xc>
		__NOP();
 80026e4:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f7      	bne.n	80026e4 <i2c_startTransaction+0xa>
	}

	/* 2. Generamos la señal de "start"
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002702:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante.
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8002704:	e000      	b.n	8002708 <i2c_startTransaction+0x2e>
		__NOP();
 8002706:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0f7      	beq.n	8002706 <i2c_startTransaction+0x2c>
	}
}
 8002716:	bf00      	nop
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr

08002722 <i2c_reStartTransaction>:

/*
 */
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
	/* 2. Generamos la señal de "start"
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002738:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante.
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800273a:	e000      	b.n	800273e <i2c_reStartTransaction+0x1c>
		__NOP();
 800273c:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0f7      	beq.n	800273c <i2c_reStartTransaction+0x1a>
	}
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <i2c_sendNoAck>:

/* 7a. Activamos la indicación para no-ACK (indicación para el Slave de terminar)
 */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	/* Debemos escribir cero en la posición ACK del registro de control 1
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_ACK;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800276e:	601a      	str	r2, [r3, #0]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr

0800277a <i2c_sendSlaveAddressRW>:
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 800277a:	b480      	push	{r7}
 800277c:	b085      	sub	sp, #20
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	460b      	mov	r3, r1
 8002784:	70fb      	strb	r3, [r7, #3]
 8002786:	4613      	mov	r3, r2
 8002788:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar
	 */
	uint8_t auxByte = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la dirección del Slave y el bit que indica que deseamos escribir un (0)
	 * (en el siguiente paso se envía la dirección de memoria que se desea escribir)
	 */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 800278e:	78fb      	ldrb	r3, [r7, #3]
 8002790:	005a      	lsls	r2, r3, #1
 8002792:	78bb      	ldrb	r3, [r7, #2]
 8002794:	431a      	orrs	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bandera del evento "addr" se levante
	 * (esto nos indica que la dirección fue enviada satisfactoriamente)
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 800279c:	e000      	b.n	80027a0 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 800279e:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f7      	beq.n	800279e <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepción de ACK de la "addr",
	 * para lo cual debemos leer en secuencia primero el I2C_SR1 y luego el I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	73fb      	strb	r3, [r7, #15]
}
 80027be:	bf00      	nop
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	70fb      	strb	r3, [r7, #3]
	/* 4. Enviamos la dirección de memoria que deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	78fa      	ldrb	r2, [r7, #3]
 80027da:	611a      	str	r2, [r3, #16]

	/* 4.1 Esperamos hasta que el byte sea transmitido
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 80027dc:	e000      	b.n	80027e0 <i2c_sendMemoryAddress+0x18>
		__NOP();
 80027de:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f7      	beq.n	80027de <i2c_sendMemoryAddress+0x16>
	}
}
 80027ee:	bf00      	nop
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	460b      	mov	r3, r1
 8002804:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	78fa      	ldrb	r2, [r7, #3]
 800280c:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800280e:	e000      	b.n	8002812 <i2c_sendDataByte+0x18>
		__NOP();
 8002810:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f7      	beq.n	8002810 <i2c_sendDataByte+0x16>
	}
}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <i2c_readDataByte>:

/**/
uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
	/* 9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 8002834:	e000      	b.n	8002838 <i2c_readDataByte+0xc>
		__NOP();
 8002836:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f7      	beq.n	8002836 <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	b2da      	uxtb	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->dataI2C;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	799b      	ldrb	r3, [r3, #6]
}
 8002856:	4618      	mov	r0, r3
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <i2c_readSingleRegister>:

/**/
uint8_t i2c_readSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead){
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	70fb      	strb	r3, [r7, #3]
	/* 0. Creamos una variable auxiliar para recibir el dato que leemos */
	uint8_t auxRead = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	73fb      	strb	r3, [r7, #15]

	/* 1. Generamos la condición de start */
	i2c_startTransaction(ptrHandlerI2C);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff ff32 	bl	80026da <i2c_startTransaction>

	/* 2. Enviamos la dirección del esclavo y la indicación de ESCRIBIR */
	i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	791b      	ldrb	r3, [r3, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	4619      	mov	r1, r3
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff ff7b 	bl	800277a <i2c_sendSlaveAddressRW>

	/* 3. Enviamos la dirección de memoria que deseamos leer */
	i2c_sendMemoryAddress(ptrHandlerI2C, regToRead);
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	4619      	mov	r1, r3
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff ff9d 	bl	80027c8 <i2c_sendMemoryAddress>

	/* 4. Creamos una condición de reStart */
	i2c_reStartTransaction(ptrHandlerI2C);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff ff47 	bl	8002722 <i2c_reStartTransaction>

	/* 5. Enviamos la dirección del esclavo y la indicación de LEER */
	i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_READ_DATA);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	791b      	ldrb	r3, [r3, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	4619      	mov	r1, r3
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff ff6c 	bl	800277a <i2c_sendSlaveAddressRW>

	/* 6. Generamos la condición de NoACK, para que el master no funciona y el slave solo envie 1 byte */
	i2c_sendNoAck(ptrHandlerI2C);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff ff58 	bl	8002758 <i2c_sendNoAck>

	/* 7. Generamos la señal de Stop, para que el slave se detenga después de 1 byte*/
	i2c_stopTransaction(ptrHandlerI2C);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7ff ff05 	bl	80026b8 <i2c_stopTransaction>

	/* 8. Leemos el dato que envia el esclavo */
	auxRead = i2c_readDataByte(ptrHandlerI2C);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff ffbc 	bl	800282c <i2c_readDataByte>
 80028b4:	4603      	mov	r3, r0
 80028b6:	73fb      	strb	r3, [r7, #15]

	return auxRead;
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <i2c_writeSingleRegister>:

/**/
void i2c_writeSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead, uint8_t newValue){
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	460b      	mov	r3, r1
 80028cc:	70fb      	strb	r3, [r7, #3]
 80028ce:	4613      	mov	r3, r2
 80028d0:	70bb      	strb	r3, [r7, #2]

	/* 1. Generamos la condición de Start*/
	i2c_startTransaction(ptrHandlerI2C);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff ff01 	bl	80026da <i2c_startTransaction>

	/* 2. Enviamos la diracción del esclavo y la indicación de ESCRIBIR */
	i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	791b      	ldrb	r3, [r3, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	4619      	mov	r1, r3
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff ff4a 	bl	800277a <i2c_sendSlaveAddressRW>

	/* 3. Enviamos la dirección de memoria que deseamos escribir*/
	i2c_sendMemoryAddress(ptrHandlerI2C, regToRead);
 80028e6:	78fb      	ldrb	r3, [r7, #3]
 80028e8:	4619      	mov	r1, r3
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff ff6c 	bl	80027c8 <i2c_sendMemoryAddress>

	/* 4. Enviamos el valor que deseamos escribir */
	i2c_sendDataByte(ptrHandlerI2C, newValue);
 80028f0:	78bb      	ldrb	r3, [r7, #2]
 80028f2:	4619      	mov	r1, r3
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff ff80 	bl	80027fa <i2c_sendDataByte>

	/* 5. Generamos la condición de Stop, para que el slave se detenga después de un byte */
	i2c_stopTransaction(ptrHandlerI2C);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff fedc 	bl	80026b8 <i2c_stopTransaction>
}
 8002900:	bf00      	nop
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <PLL_Config>:
#include "PLLDriver.h"

uint32_t HSI_VALUE = 16000000;


void PLL_Config(PLL_Handler_t *ptrPLLHandler){
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]

	// Se selecciona HSI como reloj interno del PLL en vez de un oscilador.
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC);
 8002910:	4b7e      	ldr	r3, [pc, #504]	; (8002b0c <PLL_Config+0x204>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4a7d      	ldr	r2, [pc, #500]	; (8002b0c <PLL_Config+0x204>)
 8002916:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800291a:	6053      	str	r3, [r2, #4]

	// Se observa el valor del HSI RDY.
	while( !(RCC->CR & RCC_CR_HSIRDY) );
 800291c:	bf00      	nop
 800291e:	4b7b      	ldr	r3, [pc, #492]	; (8002b0c <PLL_Config+0x204>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f9      	beq.n	800291e <PLL_Config+0x16>

	// Se inicializa el power enable clock del APB1.
	RCC->APB1ENR |= RCC_APB1RSTR_PWRRST;
 800292a:	4b78      	ldr	r3, [pc, #480]	; (8002b0c <PLL_Config+0x204>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	4a77      	ldr	r2, [pc, #476]	; (8002b0c <PLL_Config+0x204>)
 8002930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002934:	6413      	str	r3, [r2, #64]	; 0x40


	// Estas líneas adecúan el acceso a la memoria del microcontrolador
	// para comenzar a ejecutar las instrucciones. Ver ACR.
	FLASH->ACR |= 1<<8;
 8002936:	4b76      	ldr	r3, [pc, #472]	; (8002b10 <PLL_Config+0x208>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a75      	ldr	r2, [pc, #468]	; (8002b10 <PLL_Config+0x208>)
 800293c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002940:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= 1<<9;
 8002942:	4b73      	ldr	r3, [pc, #460]	; (8002b10 <PLL_Config+0x208>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a72      	ldr	r2, [pc, #456]	; (8002b10 <PLL_Config+0x208>)
 8002948:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800294c:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= 1<<10;
 800294e:	4b70      	ldr	r3, [pc, #448]	; (8002b10 <PLL_Config+0x208>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a6f      	ldr	r2, [pc, #444]	; (8002b10 <PLL_Config+0x208>)
 8002954:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002958:	6013      	str	r3, [r2, #0]
	 *  los voltajes de las distintas frecuencias que pueden llegar a configurarse.
	 *  Además, deben establecerse diferentes tiempos de espera para cada rango.
	 */

	// Voltajes para las frecuencias dentro de un rango máximo de 64 MHz.
	if(ptrPLLHandler->PLL_Config.PLL_voltage == VOLTAGE_64MHZ){
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10c      	bne.n	800297c <PLL_Config+0x74>
		// Se toma 0 en el bit 15 y 1 en el bit 14 del PWR para la potencia.
		PWR->CR |= 01<<14;
 8002962:	4b6c      	ldr	r3, [pc, #432]	; (8002b14 <PLL_Config+0x20c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a6b      	ldr	r2, [pc, #428]	; (8002b14 <PLL_Config+0x20c>)
 8002968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800296c:	6013      	str	r3, [r2, #0]

		// Se configura el tiempo de espera.
		FLASH->ACR |= 1<<0;
 800296e:	4b68      	ldr	r3, [pc, #416]	; (8002b10 <PLL_Config+0x208>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a67      	ldr	r2, [pc, #412]	; (8002b10 <PLL_Config+0x208>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e02d      	b.n	80029d8 <PLL_Config+0xd0>
	}
	else if(ptrPLLHandler->PLL_Config.PLL_voltage == VOLTAGE_84MHZ){
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d10c      	bne.n	800299e <PLL_Config+0x96>
		// Se toma 1 en el bit 15 y 0 en el bit 14 del PWR para la potencia.
		PWR->CR |= 10<<14;
 8002984:	4b63      	ldr	r3, [pc, #396]	; (8002b14 <PLL_Config+0x20c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a62      	ldr	r2, [pc, #392]	; (8002b14 <PLL_Config+0x20c>)
 800298a:	f443 3320 	orr.w	r3, r3, #163840	; 0x28000
 800298e:	6013      	str	r3, [r2, #0]

		// Se configura el tiempo de espera.
		FLASH->ACR |= 3<<0;
 8002990:	4b5f      	ldr	r3, [pc, #380]	; (8002b10 <PLL_Config+0x208>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a5e      	ldr	r2, [pc, #376]	; (8002b10 <PLL_Config+0x208>)
 8002996:	f043 0303 	orr.w	r3, r3, #3
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	e01c      	b.n	80029d8 <PLL_Config+0xd0>
	}
	else if(ptrPLLHandler->PLL_Config.PLL_voltage == VOLTAGE_100MHZ){
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d10c      	bne.n	80029c0 <PLL_Config+0xb8>
		// Se toma 1 en el bit 15 y 1 en el bit 14 del PWR para la potencia.
		PWR->CR |= 11<<14;
 80029a6:	4b5b      	ldr	r3, [pc, #364]	; (8002b14 <PLL_Config+0x20c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a5a      	ldr	r2, [pc, #360]	; (8002b14 <PLL_Config+0x20c>)
 80029ac:	f443 3330 	orr.w	r3, r3, #180224	; 0x2c000
 80029b0:	6013      	str	r3, [r2, #0]

		// Se configura el tiempo de espera.
		FLASH->ACR |= 5<<0;
 80029b2:	4b57      	ldr	r3, [pc, #348]	; (8002b10 <PLL_Config+0x208>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a56      	ldr	r2, [pc, #344]	; (8002b10 <PLL_Config+0x208>)
 80029b8:	f043 0305 	orr.w	r3, r3, #5
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	e00b      	b.n	80029d8 <PLL_Config+0xd0>
	}
	else{
		// Implementamos la máxima frecuencia para el caso por defecto.
		PWR->CR |= 11<<14;
 80029c0:	4b54      	ldr	r3, [pc, #336]	; (8002b14 <PLL_Config+0x20c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a53      	ldr	r2, [pc, #332]	; (8002b14 <PLL_Config+0x20c>)
 80029c6:	f443 3330 	orr.w	r3, r3, #180224	; 0x2c000
 80029ca:	6013      	str	r3, [r2, #0]

		// Tiempo de espera.
		FLASH->ACR |= 5<<0;
 80029cc:	4b50      	ldr	r3, [pc, #320]	; (8002b10 <PLL_Config+0x208>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a4f      	ldr	r2, [pc, #316]	; (8002b10 <PLL_Config+0x208>)
 80029d2:	f043 0305 	orr.w	r3, r3, #5
 80029d6:	6013      	str	r3, [r2, #0]
	}

	/*
	 * El preescaler null debe ser 1 para conseguir la máxima salida de frecuencia.
	 */
	RCC->CFGR |= 0001<<4;
 80029d8:	4b4c      	ldr	r3, [pc, #304]	; (8002b0c <PLL_Config+0x204>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	4a4b      	ldr	r2, [pc, #300]	; (8002b0c <PLL_Config+0x204>)
 80029de:	f043 0310 	orr.w	r3, r3, #16
 80029e2:	6093      	str	r3, [r2, #8]
	 * a 80 MHz que se encuentra evidentemente en un intervalo superior a este valor,
	 * se decide no incluir el primer preescaler que divide en 1 la frecuencia que se
	 * quiere implementar, sino comenzar con la división en 2,4,8,16...
	 */
	// Se divide en 2 el bus 1.
	RCC->CFGR |= (RCC_CFGR_PPRE1_DIV2);
 80029e4:	4b49      	ldr	r3, [pc, #292]	; (8002b0c <PLL_Config+0x204>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	4a48      	ldr	r2, [pc, #288]	; (8002b0c <PLL_Config+0x204>)
 80029ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029ee:	6093      	str	r3, [r2, #8]
	 * a 80 MHz, esta frecuencia se encuentra cómodamente ubicada antes de la
	 * frecuencia máxima del bus de datos, por tanto, el preescaler 0 que mantiene
	 * la frecuencia original, puede implementarse, dividiendo en 1.
	 */
	// Se divide en 1 el bus 2.
	RCC->CFGR |= (RCC_CFGR_PPRE2_DIV1);
 80029f0:	4b46      	ldr	r3, [pc, #280]	; (8002b0c <PLL_Config+0x204>)
 80029f2:	4a46      	ldr	r2, [pc, #280]	; (8002b0c <PLL_Config+0x204>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	6093      	str	r3, [r2, #8]

// Se debe configurar el sistema de manera que cuando la entrada del HSI
// sean 80 MHz, se mantenga.
	// La fuente de reloj del micro se configura sobre el HSI,
	RCC->PLLCFGR |= (0 << 22);
 80029f8:	4b44      	ldr	r3, [pc, #272]	; (8002b0c <PLL_Config+0x204>)
 80029fa:	4a44      	ldr	r2, [pc, #272]	; (8002b0c <PLL_Config+0x204>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	6053      	str	r3, [r2, #4]

	// Se divide la entrada de frecuencia en 8, para obtener 2 MHz.
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM_4);
 8002a00:	4b42      	ldr	r3, [pc, #264]	; (8002b0c <PLL_Config+0x204>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	4a41      	ldr	r2, [pc, #260]	; (8002b0c <PLL_Config+0x204>)
 8002a06:	f023 0310 	bic.w	r3, r3, #16
 8002a0a:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLM_3);
 8002a0c:	4b3f      	ldr	r3, [pc, #252]	; (8002b0c <PLL_Config+0x204>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	4a3e      	ldr	r2, [pc, #248]	; (8002b0c <PLL_Config+0x204>)
 8002a12:	f043 0308 	orr.w	r3, r3, #8
 8002a16:	6053      	str	r3, [r2, #4]

	// Se aplica una máscara un poco rudimentaria para garantizar la limpieza del
	// del registro.
	RCC->PLLCFGR &= 0b1111111111111000000000111111;
 8002a18:	4b3c      	ldr	r3, [pc, #240]	; (8002b0c <PLL_Config+0x204>)
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	493b      	ldr	r1, [pc, #236]	; (8002b0c <PLL_Config+0x204>)
 8002a1e:	4b3e      	ldr	r3, [pc, #248]	; (8002b18 <PLL_Config+0x210>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	604b      	str	r3, [r1, #4]
	// Se ecriben los diferentes valores de las frecuencias que se quieren multiplicar.
	/* NOTE que aquí es donde se escriben cada una de las frecuencias dentro del
	 * registro de 9 bits que se tiene dentro del registro PLLCFGR del RCC qur se deciden
	 * aleatoriamente a gusto del usuario dentro del intervalo de voltaje escogido.
	 */
	if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_80MHZ){
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	785b      	ldrb	r3, [r3, #1]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d10c      	bne.n	8002a46 <PLL_Config+0x13e>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_4);
 8002a2c:	4b37      	ldr	r3, [pc, #220]	; (8002b0c <PLL_Config+0x204>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	4a36      	ldr	r2, [pc, #216]	; (8002b0c <PLL_Config+0x204>)
 8002a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a36:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 8002a38:	4b34      	ldr	r3, [pc, #208]	; (8002b0c <PLL_Config+0x204>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	4a33      	ldr	r2, [pc, #204]	; (8002b0c <PLL_Config+0x204>)
 8002a3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a42:	6053      	str	r3, [r2, #4]
 8002a44:	e03d      	b.n	8002ac2 <PLL_Config+0x1ba>
	}else if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_100MHZ){
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	785b      	ldrb	r3, [r3, #1]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d112      	bne.n	8002a74 <PLL_Config+0x16c>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_2);
 8002a4e:	4b2f      	ldr	r3, [pc, #188]	; (8002b0c <PLL_Config+0x204>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	4a2e      	ldr	r2, [pc, #184]	; (8002b0c <PLL_Config+0x204>)
 8002a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a58:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_5);
 8002a5a:	4b2c      	ldr	r3, [pc, #176]	; (8002b0c <PLL_Config+0x204>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	4a2b      	ldr	r2, [pc, #172]	; (8002b0c <PLL_Config+0x204>)
 8002a60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a64:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 8002a66:	4b29      	ldr	r3, [pc, #164]	; (8002b0c <PLL_Config+0x204>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	4a28      	ldr	r2, [pc, #160]	; (8002b0c <PLL_Config+0x204>)
 8002a6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a70:	6053      	str	r3, [r2, #4]
 8002a72:	e026      	b.n	8002ac2 <PLL_Config+0x1ba>
	}else if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_70MHZ){
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	785b      	ldrb	r3, [r3, #1]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d112      	bne.n	8002aa2 <PLL_Config+0x19a>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_1);
 8002a7c:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <PLL_Config+0x204>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	4a22      	ldr	r2, [pc, #136]	; (8002b0c <PLL_Config+0x204>)
 8002a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a86:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_2);
 8002a88:	4b20      	ldr	r3, [pc, #128]	; (8002b0c <PLL_Config+0x204>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	4a1f      	ldr	r2, [pc, #124]	; (8002b0c <PLL_Config+0x204>)
 8002a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a92:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 8002a94:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <PLL_Config+0x204>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	4a1c      	ldr	r2, [pc, #112]	; (8002b0c <PLL_Config+0x204>)
 8002a9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a9e:	6053      	str	r3, [r2, #4]
 8002aa0:	e00f      	b.n	8002ac2 <PLL_Config+0x1ba>
	}else if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_65MHZ){
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	785b      	ldrb	r3, [r3, #1]
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d10b      	bne.n	8002ac2 <PLL_Config+0x1ba>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_0);
 8002aaa:	4b18      	ldr	r3, [pc, #96]	; (8002b0c <PLL_Config+0x204>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4a17      	ldr	r2, [pc, #92]	; (8002b0c <PLL_Config+0x204>)
 8002ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ab4:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <PLL_Config+0x204>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <PLL_Config+0x204>)
 8002abc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ac0:	6053      	str	r3, [r2, #4]
	}
	// Se escoge como factor de reloj principal PLLP el número dos para obtener
	// la salida deseada en cada caso.
	RCC->PLLCFGR |= (00 << 16);
 8002ac2:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <PLL_Config+0x204>)
 8002ac4:	4a11      	ldr	r2, [pc, #68]	; (8002b0c <PLL_Config+0x204>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	6053      	str	r3, [r2, #4]

	/*ACTIVACIÓN DEL PLL CON LOS PARÁMETROS ELEGIDOS ANTERIORMENTE. */
	// Se activa el PLL.
	RCC->CR |= (1<<24);
 8002aca:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <PLL_Config+0x204>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a0f      	ldr	r2, [pc, #60]	; (8002b0c <PLL_Config+0x204>)
 8002ad0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ad4:	6013      	str	r3, [r2, #0]
	// Se da un retardo que indica la activación del PLL.
	while (!(RCC->CR & (1<<25)));
 8002ad6:	bf00      	nop
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <PLL_Config+0x204>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f9      	beq.n	8002ad8 <PLL_Config+0x1d0>
	// Se introduce un 2 dentro del clock source del PLL.
	RCC->CFGR |= (2<<0);
 8002ae4:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <PLL_Config+0x204>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4a08      	ldr	r2, [pc, #32]	; (8002b0c <PLL_Config+0x204>)
 8002aea:	f043 0302 	orr.w	r3, r3, #2
 8002aee:	6093      	str	r3, [r2, #8]

	// Aquí se espera a que el PLL esté listo como reloj principal de la configuracion.
	while (!(RCC->CFGR & (2<<2)));
 8002af0:	bf00      	nop
 8002af2:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <PLL_Config+0x204>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f9      	beq.n	8002af2 <PLL_Config+0x1ea>

}// FIN DE LA FUNCIÓN DE CONFIGURACIÓN PARA DISTINTAS FRECUENCIAS.
 8002afe:	bf00      	nop
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40023c00 	.word	0x40023c00
 8002b14:	40007000 	.word	0x40007000
 8002b18:	0fff803f 	.word	0x0fff803f

08002b1c <getConfigPLL>:

// Función para saber el estado del PLL y así poder caracterizar lo demás.
uint32_t getConfigPLL(void){
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
	// Se buscan los valores que están definiendo los valores actuales del reloj PLL
	uint32_t PLLN = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 8002b22:	4b0d      	ldr	r3, [pc, #52]	; (8002b58 <getConfigPLL+0x3c>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	099b      	lsrs	r3, r3, #6
 8002b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b2c:	60fb      	str	r3, [r7, #12]
	uint32_t PLLM = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos;
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <getConfigPLL+0x3c>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b36:	60bb      	str	r3, [r7, #8]
	// Se hace la operación para saber el valor actual del reloj. (Asume PLLP =2)
	uint32_t clockMicro = (HSI_VALUE / PLLM) * PLLN / 2;
 8002b38:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <getConfigPLL+0x40>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	fb02 f303 	mul.w	r3, r2, r3
 8002b48:	085b      	lsrs	r3, r3, #1
 8002b4a:	607b      	str	r3, [r7, #4]
	return clockMicro;
 8002b4c:	687b      	ldr	r3, [r7, #4]

}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	20000040 	.word	0x20000040

08002b60 <pwm_Config>:
 */

#include "PwmDriver.h"

/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if(ptrPwmHandler->ptrTIMx == TIM2){
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b70:	d106      	bne.n	8002b80 <pwm_Config+0x20>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002b72:	4b90      	ldr	r3, [pc, #576]	; (8002db4 <pwm_Config+0x254>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	4a8f      	ldr	r2, [pc, #572]	; (8002db4 <pwm_Config+0x254>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b7e:	e024      	b.n	8002bca <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a8c      	ldr	r2, [pc, #560]	; (8002db8 <pwm_Config+0x258>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d106      	bne.n	8002b98 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002b8a:	4b8a      	ldr	r3, [pc, #552]	; (8002db4 <pwm_Config+0x254>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	4a89      	ldr	r2, [pc, #548]	; (8002db4 <pwm_Config+0x254>)
 8002b90:	f043 0302 	orr.w	r3, r3, #2
 8002b94:	6413      	str	r3, [r2, #64]	; 0x40
 8002b96:	e018      	b.n	8002bca <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a87      	ldr	r2, [pc, #540]	; (8002dbc <pwm_Config+0x25c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d106      	bne.n	8002bb0 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002ba2:	4b84      	ldr	r3, [pc, #528]	; (8002db4 <pwm_Config+0x254>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	4a83      	ldr	r2, [pc, #524]	; (8002db4 <pwm_Config+0x254>)
 8002ba8:	f043 0304 	orr.w	r3, r3, #4
 8002bac:	6413      	str	r3, [r2, #64]	; 0x40
 8002bae:	e00c      	b.n	8002bca <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a82      	ldr	r2, [pc, #520]	; (8002dc0 <pwm_Config+0x260>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d106      	bne.n	8002bc8 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8002bba:	4b7e      	ldr	r3, [pc, #504]	; (8002db4 <pwm_Config+0x254>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	4a7d      	ldr	r2, [pc, #500]	; (8002db4 <pwm_Config+0x254>)
 8002bc0:	f043 0308 	orr.w	r3, r3, #8
 8002bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc6:	e000      	b.n	8002bca <pwm_Config+0x6a>
	}
	else{
		__NOP();
 8002bc8:	bf00      	nop
	}

	/* 1. Cargamos la frecuencia deseada */
	setFrequency(ptrPwmHandler);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f94a 	bl	8002e64 <setFrequency>

	/* 2. Cargamos el valor del dutty-Cycle*/
	setDuttyCycle(ptrPwmHandler);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f95f 	bl	8002e94 <setDuttyCycle>

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0210 	bic.w	r2, r2, #16
 8002be4:	601a      	str	r2, [r3, #0]
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	791b      	ldrb	r3, [r3, #4]
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	f200 80dc 	bhi.w	8002da8 <pwm_Config+0x248>
 8002bf0:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <pwm_Config+0x98>)
 8002bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf6:	bf00      	nop
 8002bf8:	08002c09 	.word	0x08002c09
 8002bfc:	08002c71 	.word	0x08002c71
 8002c00:	08002cd9 	.word	0x08002cd9
 8002c04:	08002d41 	.word	0x08002d41
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S_0;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699a      	ldr	r2, [r3, #24]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0201 	bic.w	r2, r2, #1
 8002c16:	619a      	str	r2, [r3, #24]
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S_1;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0202 	bic.w	r2, r2, #2
 8002c26:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0210 	bic.w	r2, r2, #16
 8002c36:	619a      	str	r2, [r3, #24]
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0220 	orr.w	r2, r2, #32
 8002c46:	619a      	str	r2, [r3, #24]
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_2;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c56:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699a      	ldr	r2, [r3, #24]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0208 	orr.w	r2, r2, #8
 8002c66:	619a      	str	r2, [r3, #24]

		enableOutput(ptrPwmHandler);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f8bd 	bl	8002de8 <enableOutput>

		break;
 8002c6e:	e09c      	b.n	8002daa <pwm_Config+0x24a>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S_0;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699a      	ldr	r2, [r3, #24]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c7e:	619a      	str	r2, [r3, #24]
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S_1;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699a      	ldr	r2, [r3, #24]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c8e:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2M_0;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699a      	ldr	r2, [r3, #24]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c9e:	619a      	str	r2, [r3, #24]
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	699a      	ldr	r2, [r3, #24]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cae:	619a      	str	r2, [r3, #24]
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_2;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699a      	ldr	r2, [r3, #24]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cbe:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	699a      	ldr	r2, [r3, #24]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cce:	619a      	str	r2, [r3, #24]

		enableOutput(ptrPwmHandler);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f889 	bl	8002de8 <enableOutput>

		break;
 8002cd6:	e068      	b.n	8002daa <pwm_Config+0x24a>
	}

	case PWM_CHANNEL_3:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S_0;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	69da      	ldr	r2, [r3, #28]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0201 	bic.w	r2, r2, #1
 8002ce6:	61da      	str	r2, [r3, #28]
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S_1;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69da      	ldr	r2, [r3, #28]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0202 	bic.w	r2, r2, #2
 8002cf6:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3M_0;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	69da      	ldr	r2, [r3, #28]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0210 	bic.w	r2, r2, #16
 8002d06:	61da      	str	r2, [r3, #28]
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	69da      	ldr	r2, [r3, #28]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0220 	orr.w	r2, r2, #32
 8002d16:	61da      	str	r2, [r3, #28]
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_2;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	69da      	ldr	r2, [r3, #28]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d26:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	69da      	ldr	r2, [r3, #28]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 0208 	orr.w	r2, r2, #8
 8002d36:	61da      	str	r2, [r3, #28]

		enableOutput(ptrPwmHandler);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f855 	bl	8002de8 <enableOutput>

		break;
 8002d3e:	e034      	b.n	8002daa <pwm_Config+0x24a>
	}

	case PWM_CHANNEL_4:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S_0;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69da      	ldr	r2, [r3, #28]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d4e:	61da      	str	r2, [r3, #28]
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S_1;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69da      	ldr	r2, [r3, #28]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d5e:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4M_0;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69da      	ldr	r2, [r3, #28]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d6e:	61da      	str	r2, [r3, #28]
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	69da      	ldr	r2, [r3, #28]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d7e:	61da      	str	r2, [r3, #28]
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_2;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	69da      	ldr	r2, [r3, #28]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d8e:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	69da      	ldr	r2, [r3, #28]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d9e:	61da      	str	r2, [r3, #28]

		enableOutput(ptrPwmHandler);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f821 	bl	8002de8 <enableOutput>

		break;
 8002da6:	e000      	b.n	8002daa <pwm_Config+0x24a>
	}

	default:{
		break;
 8002da8:	bf00      	nop

	/* 6. Activamos la salida seleccionada */
	enableOutput(ptrPwmHandler);

	}// fin del switch-case
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40000400 	.word	0x40000400
 8002dbc:	40000800 	.word	0x40000800
 8002dc0:	40000c00 	.word	0x40000c00

08002dc4 <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr
	...

08002de8 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
void enableOutput(PWM_Handler_t *ptrPwmHandler) {
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
	switch (ptrPwmHandler->config.channel) {
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	791b      	ldrb	r3, [r3, #4]
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d82f      	bhi.n	8002e58 <enableOutput+0x70>
 8002df8:	a201      	add	r2, pc, #4	; (adr r2, 8002e00 <enableOutput+0x18>)
 8002dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfe:	bf00      	nop
 8002e00:	08002e11 	.word	0x08002e11
 8002e04:	08002e23 	.word	0x08002e23
 8002e08:	08002e35 	.word	0x08002e35
 8002e0c:	08002e47 	.word	0x08002e47
	case PWM_CHANNEL_1: {
		// Activamos la salida del canal 1
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6a1a      	ldr	r2, [r3, #32]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	621a      	str	r2, [r3, #32]
		break;
 8002e20:	e01b      	b.n	8002e5a <enableOutput+0x72>
	}

	case PWM_CHANNEL_2: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6a1a      	ldr	r2, [r3, #32]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0210 	orr.w	r2, r2, #16
 8002e30:	621a      	str	r2, [r3, #32]
		break;
 8002e32:	e012      	b.n	8002e5a <enableOutput+0x72>
	}

	case PWM_CHANNEL_3: {
		// Activamos la salida del canal 3
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6a1a      	ldr	r2, [r3, #32]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e42:	621a      	str	r2, [r3, #32]
		break;
 8002e44:	e009      	b.n	8002e5a <enableOutput+0x72>
	}

	case PWM_CHANNEL_4: {
		// Activamos la salida del canal 4
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6a1a      	ldr	r2, [r3, #32]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e54:	621a      	str	r2, [r3, #32]
		break;
 8002e56:	e000      	b.n	8002e5a <enableOutput+0x72>
	}

	default: {
		break;
 8002e58:	bf00      	nop
	}
	}
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr

08002e64 <setFrequency>:
/*
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC |= ptrPwmHandler->config.prescaler;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	629a      	str	r2, [r3, #40]	; 0x28

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.
	ptrPwmHandler->ptrTIMx->ARR = ptrPwmHandler->config.periodo - 1;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	899b      	ldrh	r3, [r3, #12]
 8002e82:	1e5a      	subs	r2, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <setDuttyCycle>:
	// Llamamos a la función que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	791b      	ldrb	r3, [r3, #4]
 8002ea0:	2b03      	cmp	r3, #3
 8002ea2:	d827      	bhi.n	8002ef4 <setDuttyCycle+0x60>
 8002ea4:	a201      	add	r2, pc, #4	; (adr r2, 8002eac <setDuttyCycle+0x18>)
 8002ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eaa:	bf00      	nop
 8002eac:	08002ebd 	.word	0x08002ebd
 8002eb0:	08002ecb 	.word	0x08002ecb
 8002eb4:	08002ed9 	.word	0x08002ed9
 8002eb8:	08002ee7 	.word	0x08002ee7
	case PWM_CHANNEL_1:{
		ptrPwmHandler->ptrTIMx->CCR1 = ptrPwmHandler->config.duttyCicle - 1;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	89db      	ldrh	r3, [r3, #14]
 8002ec0:	1e5a      	subs	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 8002ec8:	e015      	b.n	8002ef6 <setDuttyCycle+0x62>
	}

	case PWM_CHANNEL_2:{
		ptrPwmHandler->ptrTIMx->CCR2 = ptrPwmHandler->config.duttyCicle - 1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	89db      	ldrh	r3, [r3, #14]
 8002ece:	1e5a      	subs	r2, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	639a      	str	r2, [r3, #56]	; 0x38

		break;
 8002ed6:	e00e      	b.n	8002ef6 <setDuttyCycle+0x62>
	}

	case PWM_CHANNEL_3:{
		ptrPwmHandler->ptrTIMx->CCR3 = ptrPwmHandler->config.duttyCicle - 1;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	89db      	ldrh	r3, [r3, #14]
 8002edc:	1e5a      	subs	r2, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	63da      	str	r2, [r3, #60]	; 0x3c

		break;
 8002ee4:	e007      	b.n	8002ef6 <setDuttyCycle+0x62>
	}

	case PWM_CHANNEL_4:{
		ptrPwmHandler->ptrTIMx->CCR4 = ptrPwmHandler->config.duttyCicle - 1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	89db      	ldrh	r3, [r3, #14]
 8002eea:	1e5a      	subs	r2, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40

		break;
 8002ef2:	e000      	b.n	8002ef6 <setDuttyCycle+0x62>
	}

	default:{
		break;
 8002ef4:	bf00      	nop
	}
	}// fin del switch-case
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <updateDuttyCycle>:



/* Función para actualizar el Dutty, funciona de la mano con setDuttyCycle */
void updateDuttyCycle(PWM_Handler_t *ptrPwmHandler, uint16_t newDutty){
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	807b      	strh	r3, [r7, #2]
	// Actualizamos el registro que manipula el dutty
	ptrPwmHandler->config.duttyCicle = newDutty;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	887a      	ldrh	r2, [r7, #2]
 8002f10:	81da      	strh	r2, [r3, #14]

	// Llamamos a la función que cambia el dutty y cargamos el nuevo valor
	setDuttyCycle(ptrPwmHandler);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff ffbe 	bl	8002e94 <setDuttyCycle>
}
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <__NVIC_EnableIRQ>:
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	db0b      	blt.n	8002f4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	f003 021f 	and.w	r2, r3, #31
 8002f38:	4906      	ldr	r1, [pc, #24]	; (8002f54 <__NVIC_EnableIRQ+0x34>)
 8002f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	2001      	movs	r0, #1
 8002f42:	fa00 f202 	lsl.w	r2, r0, r2
 8002f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr
 8002f54:	e000e100 	.word	0xe000e100

08002f58 <USART_Config>:
 */

// Esta variable es necesaria para las interrupciones del USART 2 y 6.
uint8_t auxRxData = 0;

void USART_Config(USART_Handler_t *ptrUsartHandler){
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f60:	b672      	cpsid	i
}
 8002f62:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a8c      	ldr	r2, [pc, #560]	; (800319c <USART_Config+0x244>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d106      	bne.n	8002f7c <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8002f6e:	4b8c      	ldr	r3, [pc, #560]	; (80031a0 <USART_Config+0x248>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	4a8b      	ldr	r2, [pc, #556]	; (80031a0 <USART_Config+0x248>)
 8002f74:	f043 0310 	orr.w	r3, r3, #16
 8002f78:	6453      	str	r3, [r2, #68]	; 0x44
 8002f7a:	e016      	b.n	8002faa <USART_Config+0x52>
	}else if(ptrUsartHandler->ptrUSARTx == USART6){
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a88      	ldr	r2, [pc, #544]	; (80031a4 <USART_Config+0x24c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d106      	bne.n	8002f94 <USART_Config+0x3c>
		/*Configuramos el USART 6 que está en el mismo bus del USART 1 */
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8002f86:	4b86      	ldr	r3, [pc, #536]	; (80031a0 <USART_Config+0x248>)
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	4a85      	ldr	r2, [pc, #532]	; (80031a0 <USART_Config+0x248>)
 8002f8c:	f043 0320 	orr.w	r3, r3, #32
 8002f90:	6453      	str	r3, [r2, #68]	; 0x44
 8002f92:	e00a      	b.n	8002faa <USART_Config+0x52>
		// Luego el USART 2 que está en el bus 1.
	}else if(ptrUsartHandler->ptrUSARTx == USART2){
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a83      	ldr	r2, [pc, #524]	; (80031a8 <USART_Config+0x250>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d105      	bne.n	8002faa <USART_Config+0x52>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8002f9e:	4b80      	ldr	r3, [pc, #512]	; (80031a0 <USART_Config+0x248>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	4a7f      	ldr	r2, [pc, #508]	; (80031a0 <USART_Config+0x248>)
 8002fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa8:	6413      	str	r3, [r2, #64]	; 0x40
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	79db      	ldrb	r3, [r3, #7]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d025      	beq.n	800300e <USART_Config+0xb6>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	79db      	ldrb	r3, [r3, #7]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d110      	bne.n	8002fec <USART_Config+0x94>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fd8:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fe8:	60da      	str	r2, [r3, #12]
 8002fea:	e018      	b.n	800301e <USART_Config+0xc6>

		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ffa:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800300a:	60da      	str	r2, [r3, #12]
 800300c:	e007      	b.n	800301e <USART_Config+0xc6>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800301c:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize ==USART_DATASIZE_8BIT){
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	799b      	ldrb	r3, [r3, #6]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d115      	bne.n	8003052 <USART_Config+0xfa>

	    	// Inicialmente debe corroborarse si se quiere o no la paridad.
	    	if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_NONE){
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	79db      	ldrb	r3, [r3, #7]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d108      	bne.n	8003040 <USART_Config+0xe8>
	    		// Si se quieren datos de 8 bits.
	    		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800303c:	60da      	str	r2, [r3, #12]
 800303e:	e010      	b.n	8003062 <USART_Config+0x10a>
	    	}
	    	else{
	    		// Si la partidad esta activada, se agrega un BIT adicional.
	    		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800304e:	60da      	str	r2, [r3, #12]
 8003050:	e007      	b.n	8003062 <USART_Config+0x10a>
	    	}
	    }
	    else{
	    	// Se configuran 9 bits para el tamaño.
	    	ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003060:	60da      	str	r2, [r3, #12]
	    }

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	7a1b      	ldrb	r3, [r3, #8]
 8003066:	2b03      	cmp	r3, #3
 8003068:	d84e      	bhi.n	8003108 <USART_Config+0x1b0>
 800306a:	a201      	add	r2, pc, #4	; (adr r2, 8003070 <USART_Config+0x118>)
 800306c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003070:	08003081 	.word	0x08003081
 8003074:	080030a3 	.word	0x080030a3
 8003078:	080030c5 	.word	0x080030c5
 800307c:	080030e7 	.word	0x080030e7
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800308e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800309e:	611a      	str	r2, [r3, #16]
		break;
 80030a0:	e043      	b.n	800312a <USART_Config+0x1d2>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030b0:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030c0:	611a      	str	r2, [r3, #16]
		break;
 80030c2:	e032      	b.n	800312a <USART_Config+0x1d2>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691a      	ldr	r2, [r3, #16]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030d2:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691a      	ldr	r2, [r3, #16]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030e2:	611a      	str	r2, [r3, #16]
		break;
 80030e4:	e021      	b.n	800312a <USART_Config+0x1d2>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030f4:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003104:	611a      	str	r2, [r3, #16]
		break;
 8003106:	e010      	b.n	800312a <USART_Config+0x1d2>
	}
	default: {
		// En el caso por defecto seleccionamos 1 bit de parada
		// Escriba acá su código
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691a      	ldr	r2, [r3, #16]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003116:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691a      	ldr	r2, [r3, #16]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003126:	611a      	str	r2, [r3, #16]
		break;
 8003128:	bf00      	nop
	 * decida utilizar el usuario. La función getConfig() retorna esta
	 * frecuencia en que se encuentra actualmente el reloj del sistema PLL,
	 * por tanto, se considera un condicional que incluye los cálculos para
	 * la frecuencia de 80 MHz y por defecto recurre a la frecuencia natural.
	 */
	if(actualFrecuency == 80000000){
 800312a:	f7ff fcf7 	bl	8002b1c <getConfigPLL>
 800312e:	4603      	mov	r3, r0
 8003130:	4a1e      	ldr	r2, [pc, #120]	; (80031ac <USART_Config+0x254>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d11d      	bne.n	8003172 <USART_Config+0x21a>
		// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
		if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	795b      	ldrb	r3, [r3, #5]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d105      	bne.n	800314a <USART_Config+0x1f2>
			// El valor a cargar es 520.833 -> Mantiza = 520,fraction = 0.833
			// Mantiza = 520 = 0x208, fraction = 16 * 0.833 = 13
			// Valor a cargar 0x208D
			// Configurando el Baudrate generator para una velocidad de 9600bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x20F5;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f242 02f5 	movw	r2, #8437	; 0x20f5
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	e03a      	b.n	80031c0 <USART_Config+0x268>
		}

		else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	795b      	ldrb	r3, [r3, #5]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d105      	bne.n	800315e <USART_Config+0x206>
			// El valor a cargar es 260.4166 -> Mantiza = 260,fraction = 0.4166
			// Mantiza = 260 = 0x104, fraction = 16 * 0.4166 = 7
			// Escriba acá su código y los comentarios que faltan
			// Valor a cargar 0x1047
			ptrUsartHandler->ptrUSARTx->BRR = 0x107B;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f241 027b 	movw	r2, #4219	; 0x107b
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	e030      	b.n	80031c0 <USART_Config+0x268>
		}

		else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	795b      	ldrb	r3, [r3, #5]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d12c      	bne.n	80031c0 <USART_Config+0x268>
			// Escriba acá su código y los comentarios que faltan
			// El valor a cargar es 43.402 -> Mantiza = 43,fraction = 0.402
			// Mantiza = 43 = 0x2B, fraction = 16 * 0.402 = 6.
			ptrUsartHandler->ptrUSARTx->BRR = 0x2BF;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f240 22bf 	movw	r2, #703	; 0x2bf
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	e026      	b.n	80031c0 <USART_Config+0x268>
		}
	// Caso por defecto de 16 MHz.
	}else{
		// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
		if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	795b      	ldrb	r3, [r3, #5]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d105      	bne.n	8003186 <USART_Config+0x22e>
			// El valor a cargar es 104.1875 -> Mantiza = 104,fraction = 0.1875
			// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
			// Valor a cargar 0x0683
			// Configurando el Baudrate generator para una velocidad de 9600bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f240 6283 	movw	r2, #1667	; 0x683
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	e01c      	b.n	80031c0 <USART_Config+0x268>
		}

		else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	795b      	ldrb	r3, [r3, #5]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d110      	bne.n	80031b0 <USART_Config+0x258>
			// El valor a cargar es 52.0625 -> Mantiza = 52,fraction = 0.0625
			// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
			// Escriba acá su código y los comentarios que faltan
			// Valor a cargar 0x0341
			ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f240 3241 	movw	r2, #833	; 0x341
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	e012      	b.n	80031c0 <USART_Config+0x268>
 800319a:	bf00      	nop
 800319c:	40011000 	.word	0x40011000
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40011400 	.word	0x40011400
 80031a8:	40004400 	.word	0x40004400
 80031ac:	04c4b400 	.word	0x04c4b400
		}

		else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	795b      	ldrb	r3, [r3, #5]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d103      	bne.n	80031c0 <USART_Config+0x268>
			// Escriba acá su código y los comentarios que faltan
			// El valor a cargar es 8.6875 -> Mantiza = 8,fraction = 0.6875
			// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11 = B.
			ptrUsartHandler->ptrUSARTx->BRR = 0x008B;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	228b      	movs	r2, #139	; 0x8b
 80031be:	609a      	str	r2, [r3, #8]
		}
	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	791b      	ldrb	r3, [r3, #4]
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d847      	bhi.n	8003258 <USART_Config+0x300>
 80031c8:	a201      	add	r2, pc, #4	; (adr r2, 80031d0 <USART_Config+0x278>)
 80031ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ce:	bf00      	nop
 80031d0:	080031e1 	.word	0x080031e1
 80031d4:	080031f3 	.word	0x080031f3
 80031d8:	08003205 	.word	0x08003205
 80031dc:	08003227 	.word	0x08003227
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_TE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0208 	orr.w	r2, r2, #8
 80031ee:	60da      	str	r2, [r3, #12]
		break;
 80031f0:	e04b      	b.n	800328a <USART_Config+0x332>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_RE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0204 	orr.w	r2, r2, #4
 8003200:	60da      	str	r2, [r3, #12]
		break;
 8003202:	e042      	b.n	800328a <USART_Config+0x332>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmision como recepcion
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_TE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0208 	orr.w	r2, r2, #8
 8003212:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_RE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0204 	orr.w	r2, r2, #4
 8003222:	60da      	str	r2, [r3, #12]
		break;
 8003224:	e031      	b.n	800328a <USART_Config+0x332>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		// Escriba acá su código
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0204 	bic.w	r2, r2, #4
 8003234:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0208 	bic.w	r2, r2, #8
 8003244:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003254:	60da      	str	r2, [r3, #12]
		break;
 8003256:	e018      	b.n	800328a <USART_Config+0x332>
	}

	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0204 	bic.w	r2, r2, #4
 8003266:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0208 	bic.w	r2, r2, #8
 8003276:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003286:	60da      	str	r2, [r3, #12]
		break;
 8003288:	bf00      	nop
	}
	}

	// 2.7 Activamos el módulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	791b      	ldrb	r3, [r3, #4]
 800328e:	2b03      	cmp	r3, #3
 8003290:	d007      	beq.n	80032a2 <USART_Config+0x34a>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032a0:	60da      	str	r2, [r3, #12]
	}
	// Se verifica la activación de la interrupcion Rx
	if (ptrUsartHandler->ptrUSARTx == USART1){
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a28      	ldr	r2, [pc, #160]	; (8003348 <USART_Config+0x3f0>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d03a      	beq.n	8003322 <USART_Config+0x3ca>
	}

	/* 1.2 Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2) {
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a26      	ldr	r2, [pc, #152]	; (800334c <USART_Config+0x3f4>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d118      	bne.n	80032e8 <USART_Config+0x390>
		if (ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE) {
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	7a5b      	ldrb	r3, [r3, #9]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d10b      	bne.n	80032d6 <USART_Config+0x37e>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f042 0220 	orr.w	r2, r2, #32
 80032cc:	60da      	str	r2, [r3, #12]
			NVIC_EnableIRQ(USART2_IRQn);
 80032ce:	2026      	movs	r0, #38	; 0x26
 80032d0:	f7ff fe26 	bl	8002f20 <__NVIC_EnableIRQ>
 80032d4:	e025      	b.n	8003322 <USART_Config+0x3ca>
		} else {
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0220 	bic.w	r2, r2, #32
 80032e4:	60da      	str	r2, [r3, #12]
 80032e6:	e01c      	b.n	8003322 <USART_Config+0x3ca>
		}
	}

	/* 1.3 Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6) {
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a18      	ldr	r2, [pc, #96]	; (8003350 <USART_Config+0x3f8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d117      	bne.n	8003322 <USART_Config+0x3ca>
		if (ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE) {
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	7a5b      	ldrb	r3, [r3, #9]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d10b      	bne.n	8003312 <USART_Config+0x3ba>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0220 	orr.w	r2, r2, #32
 8003308:	60da      	str	r2, [r3, #12]
			NVIC_EnableIRQ(USART6_IRQn);
 800330a:	2047      	movs	r0, #71	; 0x47
 800330c:	f7ff fe08 	bl	8002f20 <__NVIC_EnableIRQ>
 8003310:	e007      	b.n	8003322 <USART_Config+0x3ca>
		} else {
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0220 	bic.w	r2, r2, #32
 8003320:	60da      	str	r2, [r3, #12]
		}
	}

	// 2.8 Activamos el módulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	791b      	ldrb	r3, [r3, #4]
 8003326:	2b03      	cmp	r3, #3
 8003328:	d007      	beq.n	800333a <USART_Config+0x3e2>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003338:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800333a:	b662      	cpsie	i
}
 800333c:	bf00      	nop
	}

	// Activamos las interrupciones globales
	__enable_irq();
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40011000 	.word	0x40011000
 800334c:	40004400 	.word	0x40004400
 8003350:	40011400 	.word	0x40011400

08003354 <usart2Rx_Callback>:

/* Similar a como se hizo con las EXTI, se crean los callbacks para los USART */

__attribute__((weak)) void usart2Rx_Callback(void){
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the usart2Rx_Callback could be implemented in the main file
	   */
	__NOP();
 8003358:	bf00      	nop
}
 800335a:	bf00      	nop
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr

08003362 <writeChar>:
	   */
	__NOP();
}

/* funcion para escribir un solo char */
int writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800336c:	e000      	b.n	8003370 <writeChar+0xe>
		__NOP();
 800336e:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f7      	beq.n	800336e <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	605a      	str	r2, [r3, #4]

	return dataToSend;
 8003386:	683b      	ldr	r3, [r7, #0]
}
 8003388:	4618      	mov	r0, r3
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr

08003392 <writeMsg>:

// función para escribir un mensaje
void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 8003392:	b580      	push	{r7, lr}
 8003394:	b082      	sub	sp, #8
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	6039      	str	r1, [r7, #0]
	while(*msgToSend != '\0'){
 800339c:	e008      	b.n	80033b0 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	4619      	mov	r1, r3
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff ffdc 	bl	8003362 <writeChar>
		msgToSend++;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	3301      	adds	r3, #1
 80033ae:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1f2      	bne.n	800339e <writeMsg+0xc>
	}
}
 80033b8:	bf00      	nop
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
	...

080033c4 <getRxData>:

// función auxiliar
uint8_t getRxData(void){
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
	return auxRxData;
 80033c8:	4b02      	ldr	r3, [pc, #8]	; (80033d4 <getRxData+0x10>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr
 80033d4:	20006168 	.word	0x20006168

080033d8 <USART2_IRQHandler>:

/* INTERRUPCIONES DEL USART */
// Se debe crear una variable auxiliar para la lectura que se declara al inicio.

/* Para el USART 2 */
void USART2_IRQHandler(void){
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
	// Se evalúa si la interrupción que se dio es por RX
	if(USART2->SR & USART_SR_RXNE){
 80033dc:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <USART2_IRQHandler+0x30>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00c      	beq.n	8003402 <USART2_IRQHandler+0x2a>
		USART2->SR &= ~USART_SR_RXNE;
 80033e8:	4b07      	ldr	r3, [pc, #28]	; (8003408 <USART2_IRQHandler+0x30>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a06      	ldr	r2, [pc, #24]	; (8003408 <USART2_IRQHandler+0x30>)
 80033ee:	f023 0320 	bic.w	r3, r3, #32
 80033f2:	6013      	str	r3, [r2, #0]
		auxRxData = (uint8_t) USART2->DR;
 80033f4:	4b04      	ldr	r3, [pc, #16]	; (8003408 <USART2_IRQHandler+0x30>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	4b04      	ldr	r3, [pc, #16]	; (800340c <USART2_IRQHandler+0x34>)
 80033fc:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 80033fe:	f7ff ffa9 	bl	8003354 <usart2Rx_Callback>
	}
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40004400 	.word	0x40004400
 800340c:	20006168 	.word	0x20006168

08003410 <USART6_IRQHandler>:

/* Para el USART 6 */
void USART6_IRQHandler(void){
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
	// Evaluamos que la interrupción que se dio es por RX
	if(USART6->SR & USART_SR_RXNE){
 8003414:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <USART6_IRQHandler+0x30>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0320 	and.w	r3, r3, #32
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00c      	beq.n	800343a <USART6_IRQHandler+0x2a>
		USART6->SR &= ~USART_SR_RXNE;
 8003420:	4b07      	ldr	r3, [pc, #28]	; (8003440 <USART6_IRQHandler+0x30>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a06      	ldr	r2, [pc, #24]	; (8003440 <USART6_IRQHandler+0x30>)
 8003426:	f023 0320 	bic.w	r3, r3, #32
 800342a:	6013      	str	r3, [r2, #0]
		auxRxData = (uint8_t) USART6->DR;
 800342c:	4b04      	ldr	r3, [pc, #16]	; (8003440 <USART6_IRQHandler+0x30>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	b2da      	uxtb	r2, r3
 8003432:	4b04      	ldr	r3, [pc, #16]	; (8003444 <USART6_IRQHandler+0x34>)
 8003434:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 8003436:	f7fe fdf7 	bl	8002028 <usart6Rx_Callback>
	}
}
 800343a:	bf00      	nop
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40011400 	.word	0x40011400
 8003444:	20006168 	.word	0x20006168

08003448 <__libc_init_array>:
 8003448:	b570      	push	{r4, r5, r6, lr}
 800344a:	4d0d      	ldr	r5, [pc, #52]	; (8003480 <__libc_init_array+0x38>)
 800344c:	4c0d      	ldr	r4, [pc, #52]	; (8003484 <__libc_init_array+0x3c>)
 800344e:	1b64      	subs	r4, r4, r5
 8003450:	10a4      	asrs	r4, r4, #2
 8003452:	2600      	movs	r6, #0
 8003454:	42a6      	cmp	r6, r4
 8003456:	d109      	bne.n	800346c <__libc_init_array+0x24>
 8003458:	4d0b      	ldr	r5, [pc, #44]	; (8003488 <__libc_init_array+0x40>)
 800345a:	4c0c      	ldr	r4, [pc, #48]	; (800348c <__libc_init_array+0x44>)
 800345c:	f004 fc8c 	bl	8007d78 <_init>
 8003460:	1b64      	subs	r4, r4, r5
 8003462:	10a4      	asrs	r4, r4, #2
 8003464:	2600      	movs	r6, #0
 8003466:	42a6      	cmp	r6, r4
 8003468:	d105      	bne.n	8003476 <__libc_init_array+0x2e>
 800346a:	bd70      	pop	{r4, r5, r6, pc}
 800346c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003470:	4798      	blx	r3
 8003472:	3601      	adds	r6, #1
 8003474:	e7ee      	b.n	8003454 <__libc_init_array+0xc>
 8003476:	f855 3b04 	ldr.w	r3, [r5], #4
 800347a:	4798      	blx	r3
 800347c:	3601      	adds	r6, #1
 800347e:	e7f2      	b.n	8003466 <__libc_init_array+0x1e>
 8003480:	08008364 	.word	0x08008364
 8003484:	08008364 	.word	0x08008364
 8003488:	08008364 	.word	0x08008364
 800348c:	08008368 	.word	0x08008368

08003490 <memset>:
 8003490:	4402      	add	r2, r0
 8003492:	4603      	mov	r3, r0
 8003494:	4293      	cmp	r3, r2
 8003496:	d100      	bne.n	800349a <memset+0xa>
 8003498:	4770      	bx	lr
 800349a:	f803 1b01 	strb.w	r1, [r3], #1
 800349e:	e7f9      	b.n	8003494 <memset+0x4>

080034a0 <__cvt>:
 80034a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034a4:	b088      	sub	sp, #32
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	461f      	mov	r7, r3
 80034aa:	4614      	mov	r4, r2
 80034ac:	bfb8      	it	lt
 80034ae:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80034b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80034b4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80034b6:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80034ba:	bfb6      	itet	lt
 80034bc:	461f      	movlt	r7, r3
 80034be:	2300      	movge	r3, #0
 80034c0:	232d      	movlt	r3, #45	; 0x2d
 80034c2:	7013      	strb	r3, [r2, #0]
 80034c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80034c6:	f023 0820 	bic.w	r8, r3, #32
 80034ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80034ce:	d005      	beq.n	80034dc <__cvt+0x3c>
 80034d0:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80034d4:	d100      	bne.n	80034d8 <__cvt+0x38>
 80034d6:	3501      	adds	r5, #1
 80034d8:	2302      	movs	r3, #2
 80034da:	e000      	b.n	80034de <__cvt+0x3e>
 80034dc:	2303      	movs	r3, #3
 80034de:	aa07      	add	r2, sp, #28
 80034e0:	9204      	str	r2, [sp, #16]
 80034e2:	aa06      	add	r2, sp, #24
 80034e4:	e9cd a202 	strd	sl, r2, [sp, #8]
 80034e8:	e9cd 3500 	strd	r3, r5, [sp]
 80034ec:	4622      	mov	r2, r4
 80034ee:	463b      	mov	r3, r7
 80034f0:	f001 fd7a 	bl	8004fe8 <_dtoa_r>
 80034f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80034f8:	4606      	mov	r6, r0
 80034fa:	d102      	bne.n	8003502 <__cvt+0x62>
 80034fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80034fe:	07db      	lsls	r3, r3, #31
 8003500:	d522      	bpl.n	8003548 <__cvt+0xa8>
 8003502:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003506:	eb06 0905 	add.w	r9, r6, r5
 800350a:	d110      	bne.n	800352e <__cvt+0x8e>
 800350c:	7833      	ldrb	r3, [r6, #0]
 800350e:	2b30      	cmp	r3, #48	; 0x30
 8003510:	d10a      	bne.n	8003528 <__cvt+0x88>
 8003512:	2200      	movs	r2, #0
 8003514:	2300      	movs	r3, #0
 8003516:	4620      	mov	r0, r4
 8003518:	4639      	mov	r1, r7
 800351a:	f7fd fadd 	bl	8000ad8 <__aeabi_dcmpeq>
 800351e:	b918      	cbnz	r0, 8003528 <__cvt+0x88>
 8003520:	f1c5 0501 	rsb	r5, r5, #1
 8003524:	f8ca 5000 	str.w	r5, [sl]
 8003528:	f8da 3000 	ldr.w	r3, [sl]
 800352c:	4499      	add	r9, r3
 800352e:	2200      	movs	r2, #0
 8003530:	2300      	movs	r3, #0
 8003532:	4620      	mov	r0, r4
 8003534:	4639      	mov	r1, r7
 8003536:	f7fd facf 	bl	8000ad8 <__aeabi_dcmpeq>
 800353a:	b108      	cbz	r0, 8003540 <__cvt+0xa0>
 800353c:	f8cd 901c 	str.w	r9, [sp, #28]
 8003540:	2230      	movs	r2, #48	; 0x30
 8003542:	9b07      	ldr	r3, [sp, #28]
 8003544:	454b      	cmp	r3, r9
 8003546:	d307      	bcc.n	8003558 <__cvt+0xb8>
 8003548:	9b07      	ldr	r3, [sp, #28]
 800354a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800354c:	1b9b      	subs	r3, r3, r6
 800354e:	4630      	mov	r0, r6
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	b008      	add	sp, #32
 8003554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003558:	1c59      	adds	r1, r3, #1
 800355a:	9107      	str	r1, [sp, #28]
 800355c:	701a      	strb	r2, [r3, #0]
 800355e:	e7f0      	b.n	8003542 <__cvt+0xa2>

08003560 <__exponent>:
 8003560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003562:	4603      	mov	r3, r0
 8003564:	2900      	cmp	r1, #0
 8003566:	bfb8      	it	lt
 8003568:	4249      	neglt	r1, r1
 800356a:	f803 2b02 	strb.w	r2, [r3], #2
 800356e:	bfb4      	ite	lt
 8003570:	222d      	movlt	r2, #45	; 0x2d
 8003572:	222b      	movge	r2, #43	; 0x2b
 8003574:	2909      	cmp	r1, #9
 8003576:	7042      	strb	r2, [r0, #1]
 8003578:	dd2a      	ble.n	80035d0 <__exponent+0x70>
 800357a:	f10d 0407 	add.w	r4, sp, #7
 800357e:	46a4      	mov	ip, r4
 8003580:	270a      	movs	r7, #10
 8003582:	46a6      	mov	lr, r4
 8003584:	460a      	mov	r2, r1
 8003586:	fb91 f6f7 	sdiv	r6, r1, r7
 800358a:	fb07 1516 	mls	r5, r7, r6, r1
 800358e:	3530      	adds	r5, #48	; 0x30
 8003590:	2a63      	cmp	r2, #99	; 0x63
 8003592:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003596:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800359a:	4631      	mov	r1, r6
 800359c:	dcf1      	bgt.n	8003582 <__exponent+0x22>
 800359e:	3130      	adds	r1, #48	; 0x30
 80035a0:	f1ae 0502 	sub.w	r5, lr, #2
 80035a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80035a8:	1c44      	adds	r4, r0, #1
 80035aa:	4629      	mov	r1, r5
 80035ac:	4561      	cmp	r1, ip
 80035ae:	d30a      	bcc.n	80035c6 <__exponent+0x66>
 80035b0:	f10d 0209 	add.w	r2, sp, #9
 80035b4:	eba2 020e 	sub.w	r2, r2, lr
 80035b8:	4565      	cmp	r5, ip
 80035ba:	bf88      	it	hi
 80035bc:	2200      	movhi	r2, #0
 80035be:	4413      	add	r3, r2
 80035c0:	1a18      	subs	r0, r3, r0
 80035c2:	b003      	add	sp, #12
 80035c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80035ce:	e7ed      	b.n	80035ac <__exponent+0x4c>
 80035d0:	2330      	movs	r3, #48	; 0x30
 80035d2:	3130      	adds	r1, #48	; 0x30
 80035d4:	7083      	strb	r3, [r0, #2]
 80035d6:	70c1      	strb	r1, [r0, #3]
 80035d8:	1d03      	adds	r3, r0, #4
 80035da:	e7f1      	b.n	80035c0 <__exponent+0x60>

080035dc <_printf_float>:
 80035dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035e0:	b091      	sub	sp, #68	; 0x44
 80035e2:	460c      	mov	r4, r1
 80035e4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80035e8:	4616      	mov	r6, r2
 80035ea:	461f      	mov	r7, r3
 80035ec:	4605      	mov	r5, r0
 80035ee:	f002 fe55 	bl	800629c <_localeconv_r>
 80035f2:	6803      	ldr	r3, [r0, #0]
 80035f4:	9309      	str	r3, [sp, #36]	; 0x24
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fc fdf2 	bl	80001e0 <strlen>
 80035fc:	2300      	movs	r3, #0
 80035fe:	930e      	str	r3, [sp, #56]	; 0x38
 8003600:	f8d8 3000 	ldr.w	r3, [r8]
 8003604:	900a      	str	r0, [sp, #40]	; 0x28
 8003606:	3307      	adds	r3, #7
 8003608:	f023 0307 	bic.w	r3, r3, #7
 800360c:	f103 0208 	add.w	r2, r3, #8
 8003610:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003614:	f8d4 b000 	ldr.w	fp, [r4]
 8003618:	f8c8 2000 	str.w	r2, [r8]
 800361c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003620:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003624:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003628:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800362c:	930b      	str	r3, [sp, #44]	; 0x2c
 800362e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003630:	4b9c      	ldr	r3, [pc, #624]	; (80038a4 <_printf_float+0x2c8>)
 8003632:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003636:	4640      	mov	r0, r8
 8003638:	f7fd fa80 	bl	8000b3c <__aeabi_dcmpun>
 800363c:	bb70      	cbnz	r0, 800369c <_printf_float+0xc0>
 800363e:	4b99      	ldr	r3, [pc, #612]	; (80038a4 <_printf_float+0x2c8>)
 8003640:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003642:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003646:	4640      	mov	r0, r8
 8003648:	f7fd fa5a 	bl	8000b00 <__aeabi_dcmple>
 800364c:	bb30      	cbnz	r0, 800369c <_printf_float+0xc0>
 800364e:	2200      	movs	r2, #0
 8003650:	2300      	movs	r3, #0
 8003652:	4640      	mov	r0, r8
 8003654:	4651      	mov	r1, sl
 8003656:	f7fd fa49 	bl	8000aec <__aeabi_dcmplt>
 800365a:	b110      	cbz	r0, 8003662 <_printf_float+0x86>
 800365c:	232d      	movs	r3, #45	; 0x2d
 800365e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003662:	4b91      	ldr	r3, [pc, #580]	; (80038a8 <_printf_float+0x2cc>)
 8003664:	4891      	ldr	r0, [pc, #580]	; (80038ac <_printf_float+0x2d0>)
 8003666:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800366a:	bf94      	ite	ls
 800366c:	4698      	movls	r8, r3
 800366e:	4680      	movhi	r8, r0
 8003670:	2303      	movs	r3, #3
 8003672:	6123      	str	r3, [r4, #16]
 8003674:	f02b 0304 	bic.w	r3, fp, #4
 8003678:	6023      	str	r3, [r4, #0]
 800367a:	f04f 0a00 	mov.w	sl, #0
 800367e:	9700      	str	r7, [sp, #0]
 8003680:	4633      	mov	r3, r6
 8003682:	aa0f      	add	r2, sp, #60	; 0x3c
 8003684:	4621      	mov	r1, r4
 8003686:	4628      	mov	r0, r5
 8003688:	f000 f9d2 	bl	8003a30 <_printf_common>
 800368c:	3001      	adds	r0, #1
 800368e:	f040 808f 	bne.w	80037b0 <_printf_float+0x1d4>
 8003692:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003696:	b011      	add	sp, #68	; 0x44
 8003698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800369c:	4642      	mov	r2, r8
 800369e:	4653      	mov	r3, sl
 80036a0:	4640      	mov	r0, r8
 80036a2:	4651      	mov	r1, sl
 80036a4:	f7fd fa4a 	bl	8000b3c <__aeabi_dcmpun>
 80036a8:	b140      	cbz	r0, 80036bc <_printf_float+0xe0>
 80036aa:	f1ba 0f00 	cmp.w	sl, #0
 80036ae:	bfbc      	itt	lt
 80036b0:	232d      	movlt	r3, #45	; 0x2d
 80036b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80036b6:	487e      	ldr	r0, [pc, #504]	; (80038b0 <_printf_float+0x2d4>)
 80036b8:	4b7e      	ldr	r3, [pc, #504]	; (80038b4 <_printf_float+0x2d8>)
 80036ba:	e7d4      	b.n	8003666 <_printf_float+0x8a>
 80036bc:	6863      	ldr	r3, [r4, #4]
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80036c4:	d142      	bne.n	800374c <_printf_float+0x170>
 80036c6:	2306      	movs	r3, #6
 80036c8:	6063      	str	r3, [r4, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	9206      	str	r2, [sp, #24]
 80036ce:	aa0e      	add	r2, sp, #56	; 0x38
 80036d0:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80036d4:	aa0d      	add	r2, sp, #52	; 0x34
 80036d6:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80036da:	9203      	str	r2, [sp, #12]
 80036dc:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80036e0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80036e4:	6023      	str	r3, [r4, #0]
 80036e6:	6863      	ldr	r3, [r4, #4]
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	4642      	mov	r2, r8
 80036ec:	4653      	mov	r3, sl
 80036ee:	4628      	mov	r0, r5
 80036f0:	910b      	str	r1, [sp, #44]	; 0x2c
 80036f2:	f7ff fed5 	bl	80034a0 <__cvt>
 80036f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80036f8:	2947      	cmp	r1, #71	; 0x47
 80036fa:	4680      	mov	r8, r0
 80036fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80036fe:	d108      	bne.n	8003712 <_printf_float+0x136>
 8003700:	1cc8      	adds	r0, r1, #3
 8003702:	db02      	blt.n	800370a <_printf_float+0x12e>
 8003704:	6863      	ldr	r3, [r4, #4]
 8003706:	4299      	cmp	r1, r3
 8003708:	dd40      	ble.n	800378c <_printf_float+0x1b0>
 800370a:	f1a9 0902 	sub.w	r9, r9, #2
 800370e:	fa5f f989 	uxtb.w	r9, r9
 8003712:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003716:	d81f      	bhi.n	8003758 <_printf_float+0x17c>
 8003718:	3901      	subs	r1, #1
 800371a:	464a      	mov	r2, r9
 800371c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003720:	910d      	str	r1, [sp, #52]	; 0x34
 8003722:	f7ff ff1d 	bl	8003560 <__exponent>
 8003726:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003728:	1813      	adds	r3, r2, r0
 800372a:	2a01      	cmp	r2, #1
 800372c:	4682      	mov	sl, r0
 800372e:	6123      	str	r3, [r4, #16]
 8003730:	dc02      	bgt.n	8003738 <_printf_float+0x15c>
 8003732:	6822      	ldr	r2, [r4, #0]
 8003734:	07d2      	lsls	r2, r2, #31
 8003736:	d501      	bpl.n	800373c <_printf_float+0x160>
 8003738:	3301      	adds	r3, #1
 800373a:	6123      	str	r3, [r4, #16]
 800373c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003740:	2b00      	cmp	r3, #0
 8003742:	d09c      	beq.n	800367e <_printf_float+0xa2>
 8003744:	232d      	movs	r3, #45	; 0x2d
 8003746:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800374a:	e798      	b.n	800367e <_printf_float+0xa2>
 800374c:	2947      	cmp	r1, #71	; 0x47
 800374e:	d1bc      	bne.n	80036ca <_printf_float+0xee>
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1ba      	bne.n	80036ca <_printf_float+0xee>
 8003754:	2301      	movs	r3, #1
 8003756:	e7b7      	b.n	80036c8 <_printf_float+0xec>
 8003758:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800375c:	d118      	bne.n	8003790 <_printf_float+0x1b4>
 800375e:	2900      	cmp	r1, #0
 8003760:	6863      	ldr	r3, [r4, #4]
 8003762:	dd0b      	ble.n	800377c <_printf_float+0x1a0>
 8003764:	6121      	str	r1, [r4, #16]
 8003766:	b913      	cbnz	r3, 800376e <_printf_float+0x192>
 8003768:	6822      	ldr	r2, [r4, #0]
 800376a:	07d0      	lsls	r0, r2, #31
 800376c:	d502      	bpl.n	8003774 <_printf_float+0x198>
 800376e:	3301      	adds	r3, #1
 8003770:	440b      	add	r3, r1
 8003772:	6123      	str	r3, [r4, #16]
 8003774:	65a1      	str	r1, [r4, #88]	; 0x58
 8003776:	f04f 0a00 	mov.w	sl, #0
 800377a:	e7df      	b.n	800373c <_printf_float+0x160>
 800377c:	b913      	cbnz	r3, 8003784 <_printf_float+0x1a8>
 800377e:	6822      	ldr	r2, [r4, #0]
 8003780:	07d2      	lsls	r2, r2, #31
 8003782:	d501      	bpl.n	8003788 <_printf_float+0x1ac>
 8003784:	3302      	adds	r3, #2
 8003786:	e7f4      	b.n	8003772 <_printf_float+0x196>
 8003788:	2301      	movs	r3, #1
 800378a:	e7f2      	b.n	8003772 <_printf_float+0x196>
 800378c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003790:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003792:	4299      	cmp	r1, r3
 8003794:	db05      	blt.n	80037a2 <_printf_float+0x1c6>
 8003796:	6823      	ldr	r3, [r4, #0]
 8003798:	6121      	str	r1, [r4, #16]
 800379a:	07d8      	lsls	r0, r3, #31
 800379c:	d5ea      	bpl.n	8003774 <_printf_float+0x198>
 800379e:	1c4b      	adds	r3, r1, #1
 80037a0:	e7e7      	b.n	8003772 <_printf_float+0x196>
 80037a2:	2900      	cmp	r1, #0
 80037a4:	bfd4      	ite	le
 80037a6:	f1c1 0202 	rsble	r2, r1, #2
 80037aa:	2201      	movgt	r2, #1
 80037ac:	4413      	add	r3, r2
 80037ae:	e7e0      	b.n	8003772 <_printf_float+0x196>
 80037b0:	6823      	ldr	r3, [r4, #0]
 80037b2:	055a      	lsls	r2, r3, #21
 80037b4:	d407      	bmi.n	80037c6 <_printf_float+0x1ea>
 80037b6:	6923      	ldr	r3, [r4, #16]
 80037b8:	4642      	mov	r2, r8
 80037ba:	4631      	mov	r1, r6
 80037bc:	4628      	mov	r0, r5
 80037be:	47b8      	blx	r7
 80037c0:	3001      	adds	r0, #1
 80037c2:	d12b      	bne.n	800381c <_printf_float+0x240>
 80037c4:	e765      	b.n	8003692 <_printf_float+0xb6>
 80037c6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80037ca:	f240 80dc 	bls.w	8003986 <_printf_float+0x3aa>
 80037ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80037d2:	2200      	movs	r2, #0
 80037d4:	2300      	movs	r3, #0
 80037d6:	f7fd f97f 	bl	8000ad8 <__aeabi_dcmpeq>
 80037da:	2800      	cmp	r0, #0
 80037dc:	d033      	beq.n	8003846 <_printf_float+0x26a>
 80037de:	4a36      	ldr	r2, [pc, #216]	; (80038b8 <_printf_float+0x2dc>)
 80037e0:	2301      	movs	r3, #1
 80037e2:	4631      	mov	r1, r6
 80037e4:	4628      	mov	r0, r5
 80037e6:	47b8      	blx	r7
 80037e8:	3001      	adds	r0, #1
 80037ea:	f43f af52 	beq.w	8003692 <_printf_float+0xb6>
 80037ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80037f2:	429a      	cmp	r2, r3
 80037f4:	db02      	blt.n	80037fc <_printf_float+0x220>
 80037f6:	6823      	ldr	r3, [r4, #0]
 80037f8:	07d8      	lsls	r0, r3, #31
 80037fa:	d50f      	bpl.n	800381c <_printf_float+0x240>
 80037fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003800:	4631      	mov	r1, r6
 8003802:	4628      	mov	r0, r5
 8003804:	47b8      	blx	r7
 8003806:	3001      	adds	r0, #1
 8003808:	f43f af43 	beq.w	8003692 <_printf_float+0xb6>
 800380c:	f04f 0800 	mov.w	r8, #0
 8003810:	f104 091a 	add.w	r9, r4, #26
 8003814:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003816:	3b01      	subs	r3, #1
 8003818:	4543      	cmp	r3, r8
 800381a:	dc09      	bgt.n	8003830 <_printf_float+0x254>
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	079b      	lsls	r3, r3, #30
 8003820:	f100 8101 	bmi.w	8003a26 <_printf_float+0x44a>
 8003824:	68e0      	ldr	r0, [r4, #12]
 8003826:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003828:	4298      	cmp	r0, r3
 800382a:	bfb8      	it	lt
 800382c:	4618      	movlt	r0, r3
 800382e:	e732      	b.n	8003696 <_printf_float+0xba>
 8003830:	2301      	movs	r3, #1
 8003832:	464a      	mov	r2, r9
 8003834:	4631      	mov	r1, r6
 8003836:	4628      	mov	r0, r5
 8003838:	47b8      	blx	r7
 800383a:	3001      	adds	r0, #1
 800383c:	f43f af29 	beq.w	8003692 <_printf_float+0xb6>
 8003840:	f108 0801 	add.w	r8, r8, #1
 8003844:	e7e6      	b.n	8003814 <_printf_float+0x238>
 8003846:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003848:	2b00      	cmp	r3, #0
 800384a:	dc37      	bgt.n	80038bc <_printf_float+0x2e0>
 800384c:	4a1a      	ldr	r2, [pc, #104]	; (80038b8 <_printf_float+0x2dc>)
 800384e:	2301      	movs	r3, #1
 8003850:	4631      	mov	r1, r6
 8003852:	4628      	mov	r0, r5
 8003854:	47b8      	blx	r7
 8003856:	3001      	adds	r0, #1
 8003858:	f43f af1b 	beq.w	8003692 <_printf_float+0xb6>
 800385c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003860:	4313      	orrs	r3, r2
 8003862:	d102      	bne.n	800386a <_printf_float+0x28e>
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	07d9      	lsls	r1, r3, #31
 8003868:	d5d8      	bpl.n	800381c <_printf_float+0x240>
 800386a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800386e:	4631      	mov	r1, r6
 8003870:	4628      	mov	r0, r5
 8003872:	47b8      	blx	r7
 8003874:	3001      	adds	r0, #1
 8003876:	f43f af0c 	beq.w	8003692 <_printf_float+0xb6>
 800387a:	f04f 0900 	mov.w	r9, #0
 800387e:	f104 0a1a 	add.w	sl, r4, #26
 8003882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003884:	425b      	negs	r3, r3
 8003886:	454b      	cmp	r3, r9
 8003888:	dc01      	bgt.n	800388e <_printf_float+0x2b2>
 800388a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800388c:	e794      	b.n	80037b8 <_printf_float+0x1dc>
 800388e:	2301      	movs	r3, #1
 8003890:	4652      	mov	r2, sl
 8003892:	4631      	mov	r1, r6
 8003894:	4628      	mov	r0, r5
 8003896:	47b8      	blx	r7
 8003898:	3001      	adds	r0, #1
 800389a:	f43f aefa 	beq.w	8003692 <_printf_float+0xb6>
 800389e:	f109 0901 	add.w	r9, r9, #1
 80038a2:	e7ee      	b.n	8003882 <_printf_float+0x2a6>
 80038a4:	7fefffff 	.word	0x7fefffff
 80038a8:	08007ec4 	.word	0x08007ec4
 80038ac:	08007ec8 	.word	0x08007ec8
 80038b0:	08007ed0 	.word	0x08007ed0
 80038b4:	08007ecc 	.word	0x08007ecc
 80038b8:	08007ed4 	.word	0x08007ed4
 80038bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80038be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038c0:	429a      	cmp	r2, r3
 80038c2:	bfa8      	it	ge
 80038c4:	461a      	movge	r2, r3
 80038c6:	2a00      	cmp	r2, #0
 80038c8:	4691      	mov	r9, r2
 80038ca:	dc37      	bgt.n	800393c <_printf_float+0x360>
 80038cc:	f04f 0b00 	mov.w	fp, #0
 80038d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80038d4:	f104 021a 	add.w	r2, r4, #26
 80038d8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80038dc:	ebaa 0309 	sub.w	r3, sl, r9
 80038e0:	455b      	cmp	r3, fp
 80038e2:	dc33      	bgt.n	800394c <_printf_float+0x370>
 80038e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80038e8:	429a      	cmp	r2, r3
 80038ea:	db3b      	blt.n	8003964 <_printf_float+0x388>
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	07da      	lsls	r2, r3, #31
 80038f0:	d438      	bmi.n	8003964 <_printf_float+0x388>
 80038f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80038f6:	eba3 020a 	sub.w	r2, r3, sl
 80038fa:	eba3 0901 	sub.w	r9, r3, r1
 80038fe:	4591      	cmp	r9, r2
 8003900:	bfa8      	it	ge
 8003902:	4691      	movge	r9, r2
 8003904:	f1b9 0f00 	cmp.w	r9, #0
 8003908:	dc34      	bgt.n	8003974 <_printf_float+0x398>
 800390a:	f04f 0800 	mov.w	r8, #0
 800390e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003912:	f104 0a1a 	add.w	sl, r4, #26
 8003916:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800391a:	1a9b      	subs	r3, r3, r2
 800391c:	eba3 0309 	sub.w	r3, r3, r9
 8003920:	4543      	cmp	r3, r8
 8003922:	f77f af7b 	ble.w	800381c <_printf_float+0x240>
 8003926:	2301      	movs	r3, #1
 8003928:	4652      	mov	r2, sl
 800392a:	4631      	mov	r1, r6
 800392c:	4628      	mov	r0, r5
 800392e:	47b8      	blx	r7
 8003930:	3001      	adds	r0, #1
 8003932:	f43f aeae 	beq.w	8003692 <_printf_float+0xb6>
 8003936:	f108 0801 	add.w	r8, r8, #1
 800393a:	e7ec      	b.n	8003916 <_printf_float+0x33a>
 800393c:	4613      	mov	r3, r2
 800393e:	4631      	mov	r1, r6
 8003940:	4642      	mov	r2, r8
 8003942:	4628      	mov	r0, r5
 8003944:	47b8      	blx	r7
 8003946:	3001      	adds	r0, #1
 8003948:	d1c0      	bne.n	80038cc <_printf_float+0x2f0>
 800394a:	e6a2      	b.n	8003692 <_printf_float+0xb6>
 800394c:	2301      	movs	r3, #1
 800394e:	4631      	mov	r1, r6
 8003950:	4628      	mov	r0, r5
 8003952:	920b      	str	r2, [sp, #44]	; 0x2c
 8003954:	47b8      	blx	r7
 8003956:	3001      	adds	r0, #1
 8003958:	f43f ae9b 	beq.w	8003692 <_printf_float+0xb6>
 800395c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800395e:	f10b 0b01 	add.w	fp, fp, #1
 8003962:	e7b9      	b.n	80038d8 <_printf_float+0x2fc>
 8003964:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003968:	4631      	mov	r1, r6
 800396a:	4628      	mov	r0, r5
 800396c:	47b8      	blx	r7
 800396e:	3001      	adds	r0, #1
 8003970:	d1bf      	bne.n	80038f2 <_printf_float+0x316>
 8003972:	e68e      	b.n	8003692 <_printf_float+0xb6>
 8003974:	464b      	mov	r3, r9
 8003976:	eb08 020a 	add.w	r2, r8, sl
 800397a:	4631      	mov	r1, r6
 800397c:	4628      	mov	r0, r5
 800397e:	47b8      	blx	r7
 8003980:	3001      	adds	r0, #1
 8003982:	d1c2      	bne.n	800390a <_printf_float+0x32e>
 8003984:	e685      	b.n	8003692 <_printf_float+0xb6>
 8003986:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003988:	2a01      	cmp	r2, #1
 800398a:	dc01      	bgt.n	8003990 <_printf_float+0x3b4>
 800398c:	07db      	lsls	r3, r3, #31
 800398e:	d537      	bpl.n	8003a00 <_printf_float+0x424>
 8003990:	2301      	movs	r3, #1
 8003992:	4642      	mov	r2, r8
 8003994:	4631      	mov	r1, r6
 8003996:	4628      	mov	r0, r5
 8003998:	47b8      	blx	r7
 800399a:	3001      	adds	r0, #1
 800399c:	f43f ae79 	beq.w	8003692 <_printf_float+0xb6>
 80039a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039a4:	4631      	mov	r1, r6
 80039a6:	4628      	mov	r0, r5
 80039a8:	47b8      	blx	r7
 80039aa:	3001      	adds	r0, #1
 80039ac:	f43f ae71 	beq.w	8003692 <_printf_float+0xb6>
 80039b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80039b4:	2200      	movs	r2, #0
 80039b6:	2300      	movs	r3, #0
 80039b8:	f7fd f88e 	bl	8000ad8 <__aeabi_dcmpeq>
 80039bc:	b9d8      	cbnz	r0, 80039f6 <_printf_float+0x41a>
 80039be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80039c0:	f108 0201 	add.w	r2, r8, #1
 80039c4:	3b01      	subs	r3, #1
 80039c6:	4631      	mov	r1, r6
 80039c8:	4628      	mov	r0, r5
 80039ca:	47b8      	blx	r7
 80039cc:	3001      	adds	r0, #1
 80039ce:	d10e      	bne.n	80039ee <_printf_float+0x412>
 80039d0:	e65f      	b.n	8003692 <_printf_float+0xb6>
 80039d2:	2301      	movs	r3, #1
 80039d4:	464a      	mov	r2, r9
 80039d6:	4631      	mov	r1, r6
 80039d8:	4628      	mov	r0, r5
 80039da:	47b8      	blx	r7
 80039dc:	3001      	adds	r0, #1
 80039de:	f43f ae58 	beq.w	8003692 <_printf_float+0xb6>
 80039e2:	f108 0801 	add.w	r8, r8, #1
 80039e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80039e8:	3b01      	subs	r3, #1
 80039ea:	4543      	cmp	r3, r8
 80039ec:	dcf1      	bgt.n	80039d2 <_printf_float+0x3f6>
 80039ee:	4653      	mov	r3, sl
 80039f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80039f4:	e6e1      	b.n	80037ba <_printf_float+0x1de>
 80039f6:	f04f 0800 	mov.w	r8, #0
 80039fa:	f104 091a 	add.w	r9, r4, #26
 80039fe:	e7f2      	b.n	80039e6 <_printf_float+0x40a>
 8003a00:	2301      	movs	r3, #1
 8003a02:	4642      	mov	r2, r8
 8003a04:	e7df      	b.n	80039c6 <_printf_float+0x3ea>
 8003a06:	2301      	movs	r3, #1
 8003a08:	464a      	mov	r2, r9
 8003a0a:	4631      	mov	r1, r6
 8003a0c:	4628      	mov	r0, r5
 8003a0e:	47b8      	blx	r7
 8003a10:	3001      	adds	r0, #1
 8003a12:	f43f ae3e 	beq.w	8003692 <_printf_float+0xb6>
 8003a16:	f108 0801 	add.w	r8, r8, #1
 8003a1a:	68e3      	ldr	r3, [r4, #12]
 8003a1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003a1e:	1a5b      	subs	r3, r3, r1
 8003a20:	4543      	cmp	r3, r8
 8003a22:	dcf0      	bgt.n	8003a06 <_printf_float+0x42a>
 8003a24:	e6fe      	b.n	8003824 <_printf_float+0x248>
 8003a26:	f04f 0800 	mov.w	r8, #0
 8003a2a:	f104 0919 	add.w	r9, r4, #25
 8003a2e:	e7f4      	b.n	8003a1a <_printf_float+0x43e>

08003a30 <_printf_common>:
 8003a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a34:	4616      	mov	r6, r2
 8003a36:	4699      	mov	r9, r3
 8003a38:	688a      	ldr	r2, [r1, #8]
 8003a3a:	690b      	ldr	r3, [r1, #16]
 8003a3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a40:	4293      	cmp	r3, r2
 8003a42:	bfb8      	it	lt
 8003a44:	4613      	movlt	r3, r2
 8003a46:	6033      	str	r3, [r6, #0]
 8003a48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a4c:	4607      	mov	r7, r0
 8003a4e:	460c      	mov	r4, r1
 8003a50:	b10a      	cbz	r2, 8003a56 <_printf_common+0x26>
 8003a52:	3301      	adds	r3, #1
 8003a54:	6033      	str	r3, [r6, #0]
 8003a56:	6823      	ldr	r3, [r4, #0]
 8003a58:	0699      	lsls	r1, r3, #26
 8003a5a:	bf42      	ittt	mi
 8003a5c:	6833      	ldrmi	r3, [r6, #0]
 8003a5e:	3302      	addmi	r3, #2
 8003a60:	6033      	strmi	r3, [r6, #0]
 8003a62:	6825      	ldr	r5, [r4, #0]
 8003a64:	f015 0506 	ands.w	r5, r5, #6
 8003a68:	d106      	bne.n	8003a78 <_printf_common+0x48>
 8003a6a:	f104 0a19 	add.w	sl, r4, #25
 8003a6e:	68e3      	ldr	r3, [r4, #12]
 8003a70:	6832      	ldr	r2, [r6, #0]
 8003a72:	1a9b      	subs	r3, r3, r2
 8003a74:	42ab      	cmp	r3, r5
 8003a76:	dc26      	bgt.n	8003ac6 <_printf_common+0x96>
 8003a78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a7c:	1e13      	subs	r3, r2, #0
 8003a7e:	6822      	ldr	r2, [r4, #0]
 8003a80:	bf18      	it	ne
 8003a82:	2301      	movne	r3, #1
 8003a84:	0692      	lsls	r2, r2, #26
 8003a86:	d42b      	bmi.n	8003ae0 <_printf_common+0xb0>
 8003a88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a8c:	4649      	mov	r1, r9
 8003a8e:	4638      	mov	r0, r7
 8003a90:	47c0      	blx	r8
 8003a92:	3001      	adds	r0, #1
 8003a94:	d01e      	beq.n	8003ad4 <_printf_common+0xa4>
 8003a96:	6823      	ldr	r3, [r4, #0]
 8003a98:	68e5      	ldr	r5, [r4, #12]
 8003a9a:	6832      	ldr	r2, [r6, #0]
 8003a9c:	f003 0306 	and.w	r3, r3, #6
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	bf08      	it	eq
 8003aa4:	1aad      	subeq	r5, r5, r2
 8003aa6:	68a3      	ldr	r3, [r4, #8]
 8003aa8:	6922      	ldr	r2, [r4, #16]
 8003aaa:	bf0c      	ite	eq
 8003aac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ab0:	2500      	movne	r5, #0
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	bfc4      	itt	gt
 8003ab6:	1a9b      	subgt	r3, r3, r2
 8003ab8:	18ed      	addgt	r5, r5, r3
 8003aba:	2600      	movs	r6, #0
 8003abc:	341a      	adds	r4, #26
 8003abe:	42b5      	cmp	r5, r6
 8003ac0:	d11a      	bne.n	8003af8 <_printf_common+0xc8>
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	e008      	b.n	8003ad8 <_printf_common+0xa8>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	4652      	mov	r2, sl
 8003aca:	4649      	mov	r1, r9
 8003acc:	4638      	mov	r0, r7
 8003ace:	47c0      	blx	r8
 8003ad0:	3001      	adds	r0, #1
 8003ad2:	d103      	bne.n	8003adc <_printf_common+0xac>
 8003ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003adc:	3501      	adds	r5, #1
 8003ade:	e7c6      	b.n	8003a6e <_printf_common+0x3e>
 8003ae0:	18e1      	adds	r1, r4, r3
 8003ae2:	1c5a      	adds	r2, r3, #1
 8003ae4:	2030      	movs	r0, #48	; 0x30
 8003ae6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003aea:	4422      	add	r2, r4
 8003aec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003af0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003af4:	3302      	adds	r3, #2
 8003af6:	e7c7      	b.n	8003a88 <_printf_common+0x58>
 8003af8:	2301      	movs	r3, #1
 8003afa:	4622      	mov	r2, r4
 8003afc:	4649      	mov	r1, r9
 8003afe:	4638      	mov	r0, r7
 8003b00:	47c0      	blx	r8
 8003b02:	3001      	adds	r0, #1
 8003b04:	d0e6      	beq.n	8003ad4 <_printf_common+0xa4>
 8003b06:	3601      	adds	r6, #1
 8003b08:	e7d9      	b.n	8003abe <_printf_common+0x8e>
	...

08003b0c <_printf_i>:
 8003b0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b10:	7e0f      	ldrb	r7, [r1, #24]
 8003b12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b14:	2f78      	cmp	r7, #120	; 0x78
 8003b16:	4691      	mov	r9, r2
 8003b18:	4680      	mov	r8, r0
 8003b1a:	460c      	mov	r4, r1
 8003b1c:	469a      	mov	sl, r3
 8003b1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b22:	d807      	bhi.n	8003b34 <_printf_i+0x28>
 8003b24:	2f62      	cmp	r7, #98	; 0x62
 8003b26:	d80a      	bhi.n	8003b3e <_printf_i+0x32>
 8003b28:	2f00      	cmp	r7, #0
 8003b2a:	f000 80d8 	beq.w	8003cde <_printf_i+0x1d2>
 8003b2e:	2f58      	cmp	r7, #88	; 0x58
 8003b30:	f000 80a3 	beq.w	8003c7a <_printf_i+0x16e>
 8003b34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b3c:	e03a      	b.n	8003bb4 <_printf_i+0xa8>
 8003b3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b42:	2b15      	cmp	r3, #21
 8003b44:	d8f6      	bhi.n	8003b34 <_printf_i+0x28>
 8003b46:	a101      	add	r1, pc, #4	; (adr r1, 8003b4c <_printf_i+0x40>)
 8003b48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b4c:	08003ba5 	.word	0x08003ba5
 8003b50:	08003bb9 	.word	0x08003bb9
 8003b54:	08003b35 	.word	0x08003b35
 8003b58:	08003b35 	.word	0x08003b35
 8003b5c:	08003b35 	.word	0x08003b35
 8003b60:	08003b35 	.word	0x08003b35
 8003b64:	08003bb9 	.word	0x08003bb9
 8003b68:	08003b35 	.word	0x08003b35
 8003b6c:	08003b35 	.word	0x08003b35
 8003b70:	08003b35 	.word	0x08003b35
 8003b74:	08003b35 	.word	0x08003b35
 8003b78:	08003cc5 	.word	0x08003cc5
 8003b7c:	08003be9 	.word	0x08003be9
 8003b80:	08003ca7 	.word	0x08003ca7
 8003b84:	08003b35 	.word	0x08003b35
 8003b88:	08003b35 	.word	0x08003b35
 8003b8c:	08003ce7 	.word	0x08003ce7
 8003b90:	08003b35 	.word	0x08003b35
 8003b94:	08003be9 	.word	0x08003be9
 8003b98:	08003b35 	.word	0x08003b35
 8003b9c:	08003b35 	.word	0x08003b35
 8003ba0:	08003caf 	.word	0x08003caf
 8003ba4:	682b      	ldr	r3, [r5, #0]
 8003ba6:	1d1a      	adds	r2, r3, #4
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	602a      	str	r2, [r5, #0]
 8003bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e0a3      	b.n	8003d00 <_printf_i+0x1f4>
 8003bb8:	6820      	ldr	r0, [r4, #0]
 8003bba:	6829      	ldr	r1, [r5, #0]
 8003bbc:	0606      	lsls	r6, r0, #24
 8003bbe:	f101 0304 	add.w	r3, r1, #4
 8003bc2:	d50a      	bpl.n	8003bda <_printf_i+0xce>
 8003bc4:	680e      	ldr	r6, [r1, #0]
 8003bc6:	602b      	str	r3, [r5, #0]
 8003bc8:	2e00      	cmp	r6, #0
 8003bca:	da03      	bge.n	8003bd4 <_printf_i+0xc8>
 8003bcc:	232d      	movs	r3, #45	; 0x2d
 8003bce:	4276      	negs	r6, r6
 8003bd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bd4:	485e      	ldr	r0, [pc, #376]	; (8003d50 <_printf_i+0x244>)
 8003bd6:	230a      	movs	r3, #10
 8003bd8:	e019      	b.n	8003c0e <_printf_i+0x102>
 8003bda:	680e      	ldr	r6, [r1, #0]
 8003bdc:	602b      	str	r3, [r5, #0]
 8003bde:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003be2:	bf18      	it	ne
 8003be4:	b236      	sxthne	r6, r6
 8003be6:	e7ef      	b.n	8003bc8 <_printf_i+0xbc>
 8003be8:	682b      	ldr	r3, [r5, #0]
 8003bea:	6820      	ldr	r0, [r4, #0]
 8003bec:	1d19      	adds	r1, r3, #4
 8003bee:	6029      	str	r1, [r5, #0]
 8003bf0:	0601      	lsls	r1, r0, #24
 8003bf2:	d501      	bpl.n	8003bf8 <_printf_i+0xec>
 8003bf4:	681e      	ldr	r6, [r3, #0]
 8003bf6:	e002      	b.n	8003bfe <_printf_i+0xf2>
 8003bf8:	0646      	lsls	r6, r0, #25
 8003bfa:	d5fb      	bpl.n	8003bf4 <_printf_i+0xe8>
 8003bfc:	881e      	ldrh	r6, [r3, #0]
 8003bfe:	4854      	ldr	r0, [pc, #336]	; (8003d50 <_printf_i+0x244>)
 8003c00:	2f6f      	cmp	r7, #111	; 0x6f
 8003c02:	bf0c      	ite	eq
 8003c04:	2308      	moveq	r3, #8
 8003c06:	230a      	movne	r3, #10
 8003c08:	2100      	movs	r1, #0
 8003c0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c0e:	6865      	ldr	r5, [r4, #4]
 8003c10:	60a5      	str	r5, [r4, #8]
 8003c12:	2d00      	cmp	r5, #0
 8003c14:	bfa2      	ittt	ge
 8003c16:	6821      	ldrge	r1, [r4, #0]
 8003c18:	f021 0104 	bicge.w	r1, r1, #4
 8003c1c:	6021      	strge	r1, [r4, #0]
 8003c1e:	b90e      	cbnz	r6, 8003c24 <_printf_i+0x118>
 8003c20:	2d00      	cmp	r5, #0
 8003c22:	d04d      	beq.n	8003cc0 <_printf_i+0x1b4>
 8003c24:	4615      	mov	r5, r2
 8003c26:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c2a:	fb03 6711 	mls	r7, r3, r1, r6
 8003c2e:	5dc7      	ldrb	r7, [r0, r7]
 8003c30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c34:	4637      	mov	r7, r6
 8003c36:	42bb      	cmp	r3, r7
 8003c38:	460e      	mov	r6, r1
 8003c3a:	d9f4      	bls.n	8003c26 <_printf_i+0x11a>
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d10b      	bne.n	8003c58 <_printf_i+0x14c>
 8003c40:	6823      	ldr	r3, [r4, #0]
 8003c42:	07de      	lsls	r6, r3, #31
 8003c44:	d508      	bpl.n	8003c58 <_printf_i+0x14c>
 8003c46:	6923      	ldr	r3, [r4, #16]
 8003c48:	6861      	ldr	r1, [r4, #4]
 8003c4a:	4299      	cmp	r1, r3
 8003c4c:	bfde      	ittt	le
 8003c4e:	2330      	movle	r3, #48	; 0x30
 8003c50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c54:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003c58:	1b52      	subs	r2, r2, r5
 8003c5a:	6122      	str	r2, [r4, #16]
 8003c5c:	f8cd a000 	str.w	sl, [sp]
 8003c60:	464b      	mov	r3, r9
 8003c62:	aa03      	add	r2, sp, #12
 8003c64:	4621      	mov	r1, r4
 8003c66:	4640      	mov	r0, r8
 8003c68:	f7ff fee2 	bl	8003a30 <_printf_common>
 8003c6c:	3001      	adds	r0, #1
 8003c6e:	d14c      	bne.n	8003d0a <_printf_i+0x1fe>
 8003c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c74:	b004      	add	sp, #16
 8003c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c7a:	4835      	ldr	r0, [pc, #212]	; (8003d50 <_printf_i+0x244>)
 8003c7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003c80:	6829      	ldr	r1, [r5, #0]
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c88:	6029      	str	r1, [r5, #0]
 8003c8a:	061d      	lsls	r5, r3, #24
 8003c8c:	d514      	bpl.n	8003cb8 <_printf_i+0x1ac>
 8003c8e:	07df      	lsls	r7, r3, #31
 8003c90:	bf44      	itt	mi
 8003c92:	f043 0320 	orrmi.w	r3, r3, #32
 8003c96:	6023      	strmi	r3, [r4, #0]
 8003c98:	b91e      	cbnz	r6, 8003ca2 <_printf_i+0x196>
 8003c9a:	6823      	ldr	r3, [r4, #0]
 8003c9c:	f023 0320 	bic.w	r3, r3, #32
 8003ca0:	6023      	str	r3, [r4, #0]
 8003ca2:	2310      	movs	r3, #16
 8003ca4:	e7b0      	b.n	8003c08 <_printf_i+0xfc>
 8003ca6:	6823      	ldr	r3, [r4, #0]
 8003ca8:	f043 0320 	orr.w	r3, r3, #32
 8003cac:	6023      	str	r3, [r4, #0]
 8003cae:	2378      	movs	r3, #120	; 0x78
 8003cb0:	4828      	ldr	r0, [pc, #160]	; (8003d54 <_printf_i+0x248>)
 8003cb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003cb6:	e7e3      	b.n	8003c80 <_printf_i+0x174>
 8003cb8:	0659      	lsls	r1, r3, #25
 8003cba:	bf48      	it	mi
 8003cbc:	b2b6      	uxthmi	r6, r6
 8003cbe:	e7e6      	b.n	8003c8e <_printf_i+0x182>
 8003cc0:	4615      	mov	r5, r2
 8003cc2:	e7bb      	b.n	8003c3c <_printf_i+0x130>
 8003cc4:	682b      	ldr	r3, [r5, #0]
 8003cc6:	6826      	ldr	r6, [r4, #0]
 8003cc8:	6961      	ldr	r1, [r4, #20]
 8003cca:	1d18      	adds	r0, r3, #4
 8003ccc:	6028      	str	r0, [r5, #0]
 8003cce:	0635      	lsls	r5, r6, #24
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	d501      	bpl.n	8003cd8 <_printf_i+0x1cc>
 8003cd4:	6019      	str	r1, [r3, #0]
 8003cd6:	e002      	b.n	8003cde <_printf_i+0x1d2>
 8003cd8:	0670      	lsls	r0, r6, #25
 8003cda:	d5fb      	bpl.n	8003cd4 <_printf_i+0x1c8>
 8003cdc:	8019      	strh	r1, [r3, #0]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	6123      	str	r3, [r4, #16]
 8003ce2:	4615      	mov	r5, r2
 8003ce4:	e7ba      	b.n	8003c5c <_printf_i+0x150>
 8003ce6:	682b      	ldr	r3, [r5, #0]
 8003ce8:	1d1a      	adds	r2, r3, #4
 8003cea:	602a      	str	r2, [r5, #0]
 8003cec:	681d      	ldr	r5, [r3, #0]
 8003cee:	6862      	ldr	r2, [r4, #4]
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	f7fc fa7c 	bl	80001f0 <memchr>
 8003cf8:	b108      	cbz	r0, 8003cfe <_printf_i+0x1f2>
 8003cfa:	1b40      	subs	r0, r0, r5
 8003cfc:	6060      	str	r0, [r4, #4]
 8003cfe:	6863      	ldr	r3, [r4, #4]
 8003d00:	6123      	str	r3, [r4, #16]
 8003d02:	2300      	movs	r3, #0
 8003d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d08:	e7a8      	b.n	8003c5c <_printf_i+0x150>
 8003d0a:	6923      	ldr	r3, [r4, #16]
 8003d0c:	462a      	mov	r2, r5
 8003d0e:	4649      	mov	r1, r9
 8003d10:	4640      	mov	r0, r8
 8003d12:	47d0      	blx	sl
 8003d14:	3001      	adds	r0, #1
 8003d16:	d0ab      	beq.n	8003c70 <_printf_i+0x164>
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	079b      	lsls	r3, r3, #30
 8003d1c:	d413      	bmi.n	8003d46 <_printf_i+0x23a>
 8003d1e:	68e0      	ldr	r0, [r4, #12]
 8003d20:	9b03      	ldr	r3, [sp, #12]
 8003d22:	4298      	cmp	r0, r3
 8003d24:	bfb8      	it	lt
 8003d26:	4618      	movlt	r0, r3
 8003d28:	e7a4      	b.n	8003c74 <_printf_i+0x168>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	4632      	mov	r2, r6
 8003d2e:	4649      	mov	r1, r9
 8003d30:	4640      	mov	r0, r8
 8003d32:	47d0      	blx	sl
 8003d34:	3001      	adds	r0, #1
 8003d36:	d09b      	beq.n	8003c70 <_printf_i+0x164>
 8003d38:	3501      	adds	r5, #1
 8003d3a:	68e3      	ldr	r3, [r4, #12]
 8003d3c:	9903      	ldr	r1, [sp, #12]
 8003d3e:	1a5b      	subs	r3, r3, r1
 8003d40:	42ab      	cmp	r3, r5
 8003d42:	dcf2      	bgt.n	8003d2a <_printf_i+0x21e>
 8003d44:	e7eb      	b.n	8003d1e <_printf_i+0x212>
 8003d46:	2500      	movs	r5, #0
 8003d48:	f104 0619 	add.w	r6, r4, #25
 8003d4c:	e7f5      	b.n	8003d3a <_printf_i+0x22e>
 8003d4e:	bf00      	nop
 8003d50:	08007ed6 	.word	0x08007ed6
 8003d54:	08007ee7 	.word	0x08007ee7

08003d58 <_scanf_float>:
 8003d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d5c:	b087      	sub	sp, #28
 8003d5e:	4617      	mov	r7, r2
 8003d60:	9303      	str	r3, [sp, #12]
 8003d62:	688b      	ldr	r3, [r1, #8]
 8003d64:	1e5a      	subs	r2, r3, #1
 8003d66:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003d6a:	bf83      	ittte	hi
 8003d6c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003d70:	195b      	addhi	r3, r3, r5
 8003d72:	9302      	strhi	r3, [sp, #8]
 8003d74:	2300      	movls	r3, #0
 8003d76:	bf86      	itte	hi
 8003d78:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003d7c:	608b      	strhi	r3, [r1, #8]
 8003d7e:	9302      	strls	r3, [sp, #8]
 8003d80:	680b      	ldr	r3, [r1, #0]
 8003d82:	468b      	mov	fp, r1
 8003d84:	2500      	movs	r5, #0
 8003d86:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003d8a:	f84b 3b1c 	str.w	r3, [fp], #28
 8003d8e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003d92:	4680      	mov	r8, r0
 8003d94:	460c      	mov	r4, r1
 8003d96:	465e      	mov	r6, fp
 8003d98:	46aa      	mov	sl, r5
 8003d9a:	46a9      	mov	r9, r5
 8003d9c:	9501      	str	r5, [sp, #4]
 8003d9e:	68a2      	ldr	r2, [r4, #8]
 8003da0:	b152      	cbz	r2, 8003db8 <_scanf_float+0x60>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	2b4e      	cmp	r3, #78	; 0x4e
 8003da8:	d864      	bhi.n	8003e74 <_scanf_float+0x11c>
 8003daa:	2b40      	cmp	r3, #64	; 0x40
 8003dac:	d83c      	bhi.n	8003e28 <_scanf_float+0xd0>
 8003dae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003db2:	b2c8      	uxtb	r0, r1
 8003db4:	280e      	cmp	r0, #14
 8003db6:	d93a      	bls.n	8003e2e <_scanf_float+0xd6>
 8003db8:	f1b9 0f00 	cmp.w	r9, #0
 8003dbc:	d003      	beq.n	8003dc6 <_scanf_float+0x6e>
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dc4:	6023      	str	r3, [r4, #0]
 8003dc6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003dca:	f1ba 0f01 	cmp.w	sl, #1
 8003dce:	f200 8113 	bhi.w	8003ff8 <_scanf_float+0x2a0>
 8003dd2:	455e      	cmp	r6, fp
 8003dd4:	f200 8105 	bhi.w	8003fe2 <_scanf_float+0x28a>
 8003dd8:	2501      	movs	r5, #1
 8003dda:	4628      	mov	r0, r5
 8003ddc:	b007      	add	sp, #28
 8003dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003de2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003de6:	2a0d      	cmp	r2, #13
 8003de8:	d8e6      	bhi.n	8003db8 <_scanf_float+0x60>
 8003dea:	a101      	add	r1, pc, #4	; (adr r1, 8003df0 <_scanf_float+0x98>)
 8003dec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003df0:	08003f2f 	.word	0x08003f2f
 8003df4:	08003db9 	.word	0x08003db9
 8003df8:	08003db9 	.word	0x08003db9
 8003dfc:	08003db9 	.word	0x08003db9
 8003e00:	08003f8f 	.word	0x08003f8f
 8003e04:	08003f67 	.word	0x08003f67
 8003e08:	08003db9 	.word	0x08003db9
 8003e0c:	08003db9 	.word	0x08003db9
 8003e10:	08003f3d 	.word	0x08003f3d
 8003e14:	08003db9 	.word	0x08003db9
 8003e18:	08003db9 	.word	0x08003db9
 8003e1c:	08003db9 	.word	0x08003db9
 8003e20:	08003db9 	.word	0x08003db9
 8003e24:	08003ef5 	.word	0x08003ef5
 8003e28:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003e2c:	e7db      	b.n	8003de6 <_scanf_float+0x8e>
 8003e2e:	290e      	cmp	r1, #14
 8003e30:	d8c2      	bhi.n	8003db8 <_scanf_float+0x60>
 8003e32:	a001      	add	r0, pc, #4	; (adr r0, 8003e38 <_scanf_float+0xe0>)
 8003e34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003e38:	08003ee7 	.word	0x08003ee7
 8003e3c:	08003db9 	.word	0x08003db9
 8003e40:	08003ee7 	.word	0x08003ee7
 8003e44:	08003f7b 	.word	0x08003f7b
 8003e48:	08003db9 	.word	0x08003db9
 8003e4c:	08003e95 	.word	0x08003e95
 8003e50:	08003ed1 	.word	0x08003ed1
 8003e54:	08003ed1 	.word	0x08003ed1
 8003e58:	08003ed1 	.word	0x08003ed1
 8003e5c:	08003ed1 	.word	0x08003ed1
 8003e60:	08003ed1 	.word	0x08003ed1
 8003e64:	08003ed1 	.word	0x08003ed1
 8003e68:	08003ed1 	.word	0x08003ed1
 8003e6c:	08003ed1 	.word	0x08003ed1
 8003e70:	08003ed1 	.word	0x08003ed1
 8003e74:	2b6e      	cmp	r3, #110	; 0x6e
 8003e76:	d809      	bhi.n	8003e8c <_scanf_float+0x134>
 8003e78:	2b60      	cmp	r3, #96	; 0x60
 8003e7a:	d8b2      	bhi.n	8003de2 <_scanf_float+0x8a>
 8003e7c:	2b54      	cmp	r3, #84	; 0x54
 8003e7e:	d077      	beq.n	8003f70 <_scanf_float+0x218>
 8003e80:	2b59      	cmp	r3, #89	; 0x59
 8003e82:	d199      	bne.n	8003db8 <_scanf_float+0x60>
 8003e84:	2d07      	cmp	r5, #7
 8003e86:	d197      	bne.n	8003db8 <_scanf_float+0x60>
 8003e88:	2508      	movs	r5, #8
 8003e8a:	e029      	b.n	8003ee0 <_scanf_float+0x188>
 8003e8c:	2b74      	cmp	r3, #116	; 0x74
 8003e8e:	d06f      	beq.n	8003f70 <_scanf_float+0x218>
 8003e90:	2b79      	cmp	r3, #121	; 0x79
 8003e92:	e7f6      	b.n	8003e82 <_scanf_float+0x12a>
 8003e94:	6821      	ldr	r1, [r4, #0]
 8003e96:	05c8      	lsls	r0, r1, #23
 8003e98:	d51a      	bpl.n	8003ed0 <_scanf_float+0x178>
 8003e9a:	9b02      	ldr	r3, [sp, #8]
 8003e9c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003ea0:	6021      	str	r1, [r4, #0]
 8003ea2:	f109 0901 	add.w	r9, r9, #1
 8003ea6:	b11b      	cbz	r3, 8003eb0 <_scanf_float+0x158>
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	3201      	adds	r2, #1
 8003eac:	9302      	str	r3, [sp, #8]
 8003eae:	60a2      	str	r2, [r4, #8]
 8003eb0:	68a3      	ldr	r3, [r4, #8]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	60a3      	str	r3, [r4, #8]
 8003eb6:	6923      	ldr	r3, [r4, #16]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	6123      	str	r3, [r4, #16]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	607b      	str	r3, [r7, #4]
 8003ec4:	f340 8084 	ble.w	8003fd0 <_scanf_float+0x278>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	603b      	str	r3, [r7, #0]
 8003ece:	e766      	b.n	8003d9e <_scanf_float+0x46>
 8003ed0:	eb1a 0f05 	cmn.w	sl, r5
 8003ed4:	f47f af70 	bne.w	8003db8 <_scanf_float+0x60>
 8003ed8:	6822      	ldr	r2, [r4, #0]
 8003eda:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003ede:	6022      	str	r2, [r4, #0]
 8003ee0:	f806 3b01 	strb.w	r3, [r6], #1
 8003ee4:	e7e4      	b.n	8003eb0 <_scanf_float+0x158>
 8003ee6:	6822      	ldr	r2, [r4, #0]
 8003ee8:	0610      	lsls	r0, r2, #24
 8003eea:	f57f af65 	bpl.w	8003db8 <_scanf_float+0x60>
 8003eee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ef2:	e7f4      	b.n	8003ede <_scanf_float+0x186>
 8003ef4:	f1ba 0f00 	cmp.w	sl, #0
 8003ef8:	d10e      	bne.n	8003f18 <_scanf_float+0x1c0>
 8003efa:	f1b9 0f00 	cmp.w	r9, #0
 8003efe:	d10e      	bne.n	8003f1e <_scanf_float+0x1c6>
 8003f00:	6822      	ldr	r2, [r4, #0]
 8003f02:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003f06:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003f0a:	d108      	bne.n	8003f1e <_scanf_float+0x1c6>
 8003f0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003f10:	6022      	str	r2, [r4, #0]
 8003f12:	f04f 0a01 	mov.w	sl, #1
 8003f16:	e7e3      	b.n	8003ee0 <_scanf_float+0x188>
 8003f18:	f1ba 0f02 	cmp.w	sl, #2
 8003f1c:	d055      	beq.n	8003fca <_scanf_float+0x272>
 8003f1e:	2d01      	cmp	r5, #1
 8003f20:	d002      	beq.n	8003f28 <_scanf_float+0x1d0>
 8003f22:	2d04      	cmp	r5, #4
 8003f24:	f47f af48 	bne.w	8003db8 <_scanf_float+0x60>
 8003f28:	3501      	adds	r5, #1
 8003f2a:	b2ed      	uxtb	r5, r5
 8003f2c:	e7d8      	b.n	8003ee0 <_scanf_float+0x188>
 8003f2e:	f1ba 0f01 	cmp.w	sl, #1
 8003f32:	f47f af41 	bne.w	8003db8 <_scanf_float+0x60>
 8003f36:	f04f 0a02 	mov.w	sl, #2
 8003f3a:	e7d1      	b.n	8003ee0 <_scanf_float+0x188>
 8003f3c:	b97d      	cbnz	r5, 8003f5e <_scanf_float+0x206>
 8003f3e:	f1b9 0f00 	cmp.w	r9, #0
 8003f42:	f47f af3c 	bne.w	8003dbe <_scanf_float+0x66>
 8003f46:	6822      	ldr	r2, [r4, #0]
 8003f48:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003f4c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003f50:	f47f af39 	bne.w	8003dc6 <_scanf_float+0x6e>
 8003f54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003f58:	6022      	str	r2, [r4, #0]
 8003f5a:	2501      	movs	r5, #1
 8003f5c:	e7c0      	b.n	8003ee0 <_scanf_float+0x188>
 8003f5e:	2d03      	cmp	r5, #3
 8003f60:	d0e2      	beq.n	8003f28 <_scanf_float+0x1d0>
 8003f62:	2d05      	cmp	r5, #5
 8003f64:	e7de      	b.n	8003f24 <_scanf_float+0x1cc>
 8003f66:	2d02      	cmp	r5, #2
 8003f68:	f47f af26 	bne.w	8003db8 <_scanf_float+0x60>
 8003f6c:	2503      	movs	r5, #3
 8003f6e:	e7b7      	b.n	8003ee0 <_scanf_float+0x188>
 8003f70:	2d06      	cmp	r5, #6
 8003f72:	f47f af21 	bne.w	8003db8 <_scanf_float+0x60>
 8003f76:	2507      	movs	r5, #7
 8003f78:	e7b2      	b.n	8003ee0 <_scanf_float+0x188>
 8003f7a:	6822      	ldr	r2, [r4, #0]
 8003f7c:	0591      	lsls	r1, r2, #22
 8003f7e:	f57f af1b 	bpl.w	8003db8 <_scanf_float+0x60>
 8003f82:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003f86:	6022      	str	r2, [r4, #0]
 8003f88:	f8cd 9004 	str.w	r9, [sp, #4]
 8003f8c:	e7a8      	b.n	8003ee0 <_scanf_float+0x188>
 8003f8e:	6822      	ldr	r2, [r4, #0]
 8003f90:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003f94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003f98:	d006      	beq.n	8003fa8 <_scanf_float+0x250>
 8003f9a:	0550      	lsls	r0, r2, #21
 8003f9c:	f57f af0c 	bpl.w	8003db8 <_scanf_float+0x60>
 8003fa0:	f1b9 0f00 	cmp.w	r9, #0
 8003fa4:	f43f af0f 	beq.w	8003dc6 <_scanf_float+0x6e>
 8003fa8:	0591      	lsls	r1, r2, #22
 8003faa:	bf58      	it	pl
 8003fac:	9901      	ldrpl	r1, [sp, #4]
 8003fae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003fb2:	bf58      	it	pl
 8003fb4:	eba9 0101 	subpl.w	r1, r9, r1
 8003fb8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003fbc:	bf58      	it	pl
 8003fbe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003fc2:	6022      	str	r2, [r4, #0]
 8003fc4:	f04f 0900 	mov.w	r9, #0
 8003fc8:	e78a      	b.n	8003ee0 <_scanf_float+0x188>
 8003fca:	f04f 0a03 	mov.w	sl, #3
 8003fce:	e787      	b.n	8003ee0 <_scanf_float+0x188>
 8003fd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003fd4:	4639      	mov	r1, r7
 8003fd6:	4640      	mov	r0, r8
 8003fd8:	4798      	blx	r3
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	f43f aedf 	beq.w	8003d9e <_scanf_float+0x46>
 8003fe0:	e6ea      	b.n	8003db8 <_scanf_float+0x60>
 8003fe2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003fe6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003fea:	463a      	mov	r2, r7
 8003fec:	4640      	mov	r0, r8
 8003fee:	4798      	blx	r3
 8003ff0:	6923      	ldr	r3, [r4, #16]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	6123      	str	r3, [r4, #16]
 8003ff6:	e6ec      	b.n	8003dd2 <_scanf_float+0x7a>
 8003ff8:	1e6b      	subs	r3, r5, #1
 8003ffa:	2b06      	cmp	r3, #6
 8003ffc:	d825      	bhi.n	800404a <_scanf_float+0x2f2>
 8003ffe:	2d02      	cmp	r5, #2
 8004000:	d836      	bhi.n	8004070 <_scanf_float+0x318>
 8004002:	455e      	cmp	r6, fp
 8004004:	f67f aee8 	bls.w	8003dd8 <_scanf_float+0x80>
 8004008:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800400c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004010:	463a      	mov	r2, r7
 8004012:	4640      	mov	r0, r8
 8004014:	4798      	blx	r3
 8004016:	6923      	ldr	r3, [r4, #16]
 8004018:	3b01      	subs	r3, #1
 800401a:	6123      	str	r3, [r4, #16]
 800401c:	e7f1      	b.n	8004002 <_scanf_float+0x2aa>
 800401e:	9802      	ldr	r0, [sp, #8]
 8004020:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004024:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004028:	9002      	str	r0, [sp, #8]
 800402a:	463a      	mov	r2, r7
 800402c:	4640      	mov	r0, r8
 800402e:	4798      	blx	r3
 8004030:	6923      	ldr	r3, [r4, #16]
 8004032:	3b01      	subs	r3, #1
 8004034:	6123      	str	r3, [r4, #16]
 8004036:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800403a:	fa5f fa8a 	uxtb.w	sl, sl
 800403e:	f1ba 0f02 	cmp.w	sl, #2
 8004042:	d1ec      	bne.n	800401e <_scanf_float+0x2c6>
 8004044:	3d03      	subs	r5, #3
 8004046:	b2ed      	uxtb	r5, r5
 8004048:	1b76      	subs	r6, r6, r5
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	05da      	lsls	r2, r3, #23
 800404e:	d52f      	bpl.n	80040b0 <_scanf_float+0x358>
 8004050:	055b      	lsls	r3, r3, #21
 8004052:	d510      	bpl.n	8004076 <_scanf_float+0x31e>
 8004054:	455e      	cmp	r6, fp
 8004056:	f67f aebf 	bls.w	8003dd8 <_scanf_float+0x80>
 800405a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800405e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004062:	463a      	mov	r2, r7
 8004064:	4640      	mov	r0, r8
 8004066:	4798      	blx	r3
 8004068:	6923      	ldr	r3, [r4, #16]
 800406a:	3b01      	subs	r3, #1
 800406c:	6123      	str	r3, [r4, #16]
 800406e:	e7f1      	b.n	8004054 <_scanf_float+0x2fc>
 8004070:	46aa      	mov	sl, r5
 8004072:	9602      	str	r6, [sp, #8]
 8004074:	e7df      	b.n	8004036 <_scanf_float+0x2de>
 8004076:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800407a:	6923      	ldr	r3, [r4, #16]
 800407c:	2965      	cmp	r1, #101	; 0x65
 800407e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004082:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8004086:	6123      	str	r3, [r4, #16]
 8004088:	d00c      	beq.n	80040a4 <_scanf_float+0x34c>
 800408a:	2945      	cmp	r1, #69	; 0x45
 800408c:	d00a      	beq.n	80040a4 <_scanf_float+0x34c>
 800408e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004092:	463a      	mov	r2, r7
 8004094:	4640      	mov	r0, r8
 8004096:	4798      	blx	r3
 8004098:	6923      	ldr	r3, [r4, #16]
 800409a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800409e:	3b01      	subs	r3, #1
 80040a0:	1eb5      	subs	r5, r6, #2
 80040a2:	6123      	str	r3, [r4, #16]
 80040a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80040a8:	463a      	mov	r2, r7
 80040aa:	4640      	mov	r0, r8
 80040ac:	4798      	blx	r3
 80040ae:	462e      	mov	r6, r5
 80040b0:	6825      	ldr	r5, [r4, #0]
 80040b2:	f015 0510 	ands.w	r5, r5, #16
 80040b6:	d155      	bne.n	8004164 <_scanf_float+0x40c>
 80040b8:	7035      	strb	r5, [r6, #0]
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c4:	d11b      	bne.n	80040fe <_scanf_float+0x3a6>
 80040c6:	9b01      	ldr	r3, [sp, #4]
 80040c8:	454b      	cmp	r3, r9
 80040ca:	eba3 0209 	sub.w	r2, r3, r9
 80040ce:	d123      	bne.n	8004118 <_scanf_float+0x3c0>
 80040d0:	2200      	movs	r2, #0
 80040d2:	4659      	mov	r1, fp
 80040d4:	4640      	mov	r0, r8
 80040d6:	f000 fe7b 	bl	8004dd0 <_strtod_r>
 80040da:	6822      	ldr	r2, [r4, #0]
 80040dc:	9b03      	ldr	r3, [sp, #12]
 80040de:	f012 0f02 	tst.w	r2, #2
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4606      	mov	r6, r0
 80040e6:	460f      	mov	r7, r1
 80040e8:	d021      	beq.n	800412e <_scanf_float+0x3d6>
 80040ea:	1d1a      	adds	r2, r3, #4
 80040ec:	9903      	ldr	r1, [sp, #12]
 80040ee:	600a      	str	r2, [r1, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	e9c3 6700 	strd	r6, r7, [r3]
 80040f6:	68e3      	ldr	r3, [r4, #12]
 80040f8:	3301      	adds	r3, #1
 80040fa:	60e3      	str	r3, [r4, #12]
 80040fc:	e66d      	b.n	8003dda <_scanf_float+0x82>
 80040fe:	9b04      	ldr	r3, [sp, #16]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0e5      	beq.n	80040d0 <_scanf_float+0x378>
 8004104:	9905      	ldr	r1, [sp, #20]
 8004106:	230a      	movs	r3, #10
 8004108:	462a      	mov	r2, r5
 800410a:	3101      	adds	r1, #1
 800410c:	4640      	mov	r0, r8
 800410e:	f000 fee1 	bl	8004ed4 <_strtol_r>
 8004112:	9b04      	ldr	r3, [sp, #16]
 8004114:	9e05      	ldr	r6, [sp, #20]
 8004116:	1ac2      	subs	r2, r0, r3
 8004118:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800411c:	429e      	cmp	r6, r3
 800411e:	bf28      	it	cs
 8004120:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004124:	4910      	ldr	r1, [pc, #64]	; (8004168 <_scanf_float+0x410>)
 8004126:	4630      	mov	r0, r6
 8004128:	f000 f826 	bl	8004178 <siprintf>
 800412c:	e7d0      	b.n	80040d0 <_scanf_float+0x378>
 800412e:	f012 0f04 	tst.w	r2, #4
 8004132:	f103 0204 	add.w	r2, r3, #4
 8004136:	d1d9      	bne.n	80040ec <_scanf_float+0x394>
 8004138:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800413c:	f8cc 2000 	str.w	r2, [ip]
 8004140:	f8d3 8000 	ldr.w	r8, [r3]
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	f7fc fcf8 	bl	8000b3c <__aeabi_dcmpun>
 800414c:	b128      	cbz	r0, 800415a <_scanf_float+0x402>
 800414e:	4807      	ldr	r0, [pc, #28]	; (800416c <_scanf_float+0x414>)
 8004150:	f000 f80e 	bl	8004170 <nanf>
 8004154:	f8c8 0000 	str.w	r0, [r8]
 8004158:	e7cd      	b.n	80040f6 <_scanf_float+0x39e>
 800415a:	4630      	mov	r0, r6
 800415c:	4639      	mov	r1, r7
 800415e:	f7fc fd4b 	bl	8000bf8 <__aeabi_d2f>
 8004162:	e7f7      	b.n	8004154 <_scanf_float+0x3fc>
 8004164:	2500      	movs	r5, #0
 8004166:	e638      	b.n	8003dda <_scanf_float+0x82>
 8004168:	08007ef8 	.word	0x08007ef8
 800416c:	08008300 	.word	0x08008300

08004170 <nanf>:
 8004170:	4800      	ldr	r0, [pc, #0]	; (8004174 <nanf+0x4>)
 8004172:	4770      	bx	lr
 8004174:	7fc00000 	.word	0x7fc00000

08004178 <siprintf>:
 8004178:	b40e      	push	{r1, r2, r3}
 800417a:	b500      	push	{lr}
 800417c:	b09c      	sub	sp, #112	; 0x70
 800417e:	ab1d      	add	r3, sp, #116	; 0x74
 8004180:	9002      	str	r0, [sp, #8]
 8004182:	9006      	str	r0, [sp, #24]
 8004184:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004188:	4809      	ldr	r0, [pc, #36]	; (80041b0 <siprintf+0x38>)
 800418a:	9107      	str	r1, [sp, #28]
 800418c:	9104      	str	r1, [sp, #16]
 800418e:	4909      	ldr	r1, [pc, #36]	; (80041b4 <siprintf+0x3c>)
 8004190:	f853 2b04 	ldr.w	r2, [r3], #4
 8004194:	9105      	str	r1, [sp, #20]
 8004196:	6800      	ldr	r0, [r0, #0]
 8004198:	9301      	str	r3, [sp, #4]
 800419a:	a902      	add	r1, sp, #8
 800419c:	f002 feac 	bl	8006ef8 <_svfiprintf_r>
 80041a0:	9b02      	ldr	r3, [sp, #8]
 80041a2:	2200      	movs	r2, #0
 80041a4:	701a      	strb	r2, [r3, #0]
 80041a6:	b01c      	add	sp, #112	; 0x70
 80041a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80041ac:	b003      	add	sp, #12
 80041ae:	4770      	bx	lr
 80041b0:	20000044 	.word	0x20000044
 80041b4:	ffff0208 	.word	0xffff0208

080041b8 <sulp>:
 80041b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041bc:	460f      	mov	r7, r1
 80041be:	4690      	mov	r8, r2
 80041c0:	f002 fc04 	bl	80069cc <__ulp>
 80041c4:	4604      	mov	r4, r0
 80041c6:	460d      	mov	r5, r1
 80041c8:	f1b8 0f00 	cmp.w	r8, #0
 80041cc:	d011      	beq.n	80041f2 <sulp+0x3a>
 80041ce:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80041d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	dd0b      	ble.n	80041f2 <sulp+0x3a>
 80041da:	051b      	lsls	r3, r3, #20
 80041dc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80041e0:	2400      	movs	r4, #0
 80041e2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80041e6:	4622      	mov	r2, r4
 80041e8:	462b      	mov	r3, r5
 80041ea:	f7fc fa0d 	bl	8000608 <__aeabi_dmul>
 80041ee:	4604      	mov	r4, r0
 80041f0:	460d      	mov	r5, r1
 80041f2:	4620      	mov	r0, r4
 80041f4:	4629      	mov	r1, r5
 80041f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041fa:	0000      	movs	r0, r0
 80041fc:	0000      	movs	r0, r0
	...

08004200 <_strtod_l>:
 8004200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004204:	b09f      	sub	sp, #124	; 0x7c
 8004206:	469b      	mov	fp, r3
 8004208:	2300      	movs	r3, #0
 800420a:	931a      	str	r3, [sp, #104]	; 0x68
 800420c:	4b9e      	ldr	r3, [pc, #632]	; (8004488 <_strtod_l+0x288>)
 800420e:	9215      	str	r2, [sp, #84]	; 0x54
 8004210:	681f      	ldr	r7, [r3, #0]
 8004212:	4682      	mov	sl, r0
 8004214:	4638      	mov	r0, r7
 8004216:	460e      	mov	r6, r1
 8004218:	f7fb ffe2 	bl	80001e0 <strlen>
 800421c:	f04f 0800 	mov.w	r8, #0
 8004220:	4604      	mov	r4, r0
 8004222:	f04f 0900 	mov.w	r9, #0
 8004226:	9619      	str	r6, [sp, #100]	; 0x64
 8004228:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800422a:	781a      	ldrb	r2, [r3, #0]
 800422c:	2a2b      	cmp	r2, #43	; 0x2b
 800422e:	d04c      	beq.n	80042ca <_strtod_l+0xca>
 8004230:	d83a      	bhi.n	80042a8 <_strtod_l+0xa8>
 8004232:	2a0d      	cmp	r2, #13
 8004234:	d833      	bhi.n	800429e <_strtod_l+0x9e>
 8004236:	2a08      	cmp	r2, #8
 8004238:	d833      	bhi.n	80042a2 <_strtod_l+0xa2>
 800423a:	2a00      	cmp	r2, #0
 800423c:	d03d      	beq.n	80042ba <_strtod_l+0xba>
 800423e:	2300      	movs	r3, #0
 8004240:	930a      	str	r3, [sp, #40]	; 0x28
 8004242:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004244:	782b      	ldrb	r3, [r5, #0]
 8004246:	2b30      	cmp	r3, #48	; 0x30
 8004248:	f040 80aa 	bne.w	80043a0 <_strtod_l+0x1a0>
 800424c:	786b      	ldrb	r3, [r5, #1]
 800424e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004252:	2b58      	cmp	r3, #88	; 0x58
 8004254:	d166      	bne.n	8004324 <_strtod_l+0x124>
 8004256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004258:	9301      	str	r3, [sp, #4]
 800425a:	ab1a      	add	r3, sp, #104	; 0x68
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	4a8b      	ldr	r2, [pc, #556]	; (800448c <_strtod_l+0x28c>)
 8004260:	f8cd b008 	str.w	fp, [sp, #8]
 8004264:	ab1b      	add	r3, sp, #108	; 0x6c
 8004266:	a919      	add	r1, sp, #100	; 0x64
 8004268:	4650      	mov	r0, sl
 800426a:	f001 fd19 	bl	8005ca0 <__gethex>
 800426e:	f010 0607 	ands.w	r6, r0, #7
 8004272:	4604      	mov	r4, r0
 8004274:	d005      	beq.n	8004282 <_strtod_l+0x82>
 8004276:	2e06      	cmp	r6, #6
 8004278:	d129      	bne.n	80042ce <_strtod_l+0xce>
 800427a:	3501      	adds	r5, #1
 800427c:	2300      	movs	r3, #0
 800427e:	9519      	str	r5, [sp, #100]	; 0x64
 8004280:	930a      	str	r3, [sp, #40]	; 0x28
 8004282:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004284:	2b00      	cmp	r3, #0
 8004286:	f040 858a 	bne.w	8004d9e <_strtod_l+0xb9e>
 800428a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800428c:	b1d3      	cbz	r3, 80042c4 <_strtod_l+0xc4>
 800428e:	4642      	mov	r2, r8
 8004290:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004294:	4610      	mov	r0, r2
 8004296:	4619      	mov	r1, r3
 8004298:	b01f      	add	sp, #124	; 0x7c
 800429a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800429e:	2a20      	cmp	r2, #32
 80042a0:	d1cd      	bne.n	800423e <_strtod_l+0x3e>
 80042a2:	3301      	adds	r3, #1
 80042a4:	9319      	str	r3, [sp, #100]	; 0x64
 80042a6:	e7bf      	b.n	8004228 <_strtod_l+0x28>
 80042a8:	2a2d      	cmp	r2, #45	; 0x2d
 80042aa:	d1c8      	bne.n	800423e <_strtod_l+0x3e>
 80042ac:	2201      	movs	r2, #1
 80042ae:	920a      	str	r2, [sp, #40]	; 0x28
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	9219      	str	r2, [sp, #100]	; 0x64
 80042b4:	785b      	ldrb	r3, [r3, #1]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1c3      	bne.n	8004242 <_strtod_l+0x42>
 80042ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80042bc:	9619      	str	r6, [sp, #100]	; 0x64
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f040 856b 	bne.w	8004d9a <_strtod_l+0xb9a>
 80042c4:	4642      	mov	r2, r8
 80042c6:	464b      	mov	r3, r9
 80042c8:	e7e4      	b.n	8004294 <_strtod_l+0x94>
 80042ca:	2200      	movs	r2, #0
 80042cc:	e7ef      	b.n	80042ae <_strtod_l+0xae>
 80042ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80042d0:	b13a      	cbz	r2, 80042e2 <_strtod_l+0xe2>
 80042d2:	2135      	movs	r1, #53	; 0x35
 80042d4:	a81c      	add	r0, sp, #112	; 0x70
 80042d6:	f002 fc7d 	bl	8006bd4 <__copybits>
 80042da:	991a      	ldr	r1, [sp, #104]	; 0x68
 80042dc:	4650      	mov	r0, sl
 80042de:	f002 f849 	bl	8006374 <_Bfree>
 80042e2:	3e01      	subs	r6, #1
 80042e4:	2e04      	cmp	r6, #4
 80042e6:	d806      	bhi.n	80042f6 <_strtod_l+0xf6>
 80042e8:	e8df f006 	tbb	[pc, r6]
 80042ec:	1714030a 	.word	0x1714030a
 80042f0:	0a          	.byte	0x0a
 80042f1:	00          	.byte	0x00
 80042f2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80042f6:	0721      	lsls	r1, r4, #28
 80042f8:	d5c3      	bpl.n	8004282 <_strtod_l+0x82>
 80042fa:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80042fe:	e7c0      	b.n	8004282 <_strtod_l+0x82>
 8004300:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8004304:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004306:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800430a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800430e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004312:	e7f0      	b.n	80042f6 <_strtod_l+0xf6>
 8004314:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004490 <_strtod_l+0x290>
 8004318:	e7ed      	b.n	80042f6 <_strtod_l+0xf6>
 800431a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800431e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004322:	e7e8      	b.n	80042f6 <_strtod_l+0xf6>
 8004324:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	9219      	str	r2, [sp, #100]	; 0x64
 800432a:	785b      	ldrb	r3, [r3, #1]
 800432c:	2b30      	cmp	r3, #48	; 0x30
 800432e:	d0f9      	beq.n	8004324 <_strtod_l+0x124>
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0a6      	beq.n	8004282 <_strtod_l+0x82>
 8004334:	2301      	movs	r3, #1
 8004336:	9307      	str	r3, [sp, #28]
 8004338:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800433a:	9308      	str	r3, [sp, #32]
 800433c:	2300      	movs	r3, #0
 800433e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004342:	469b      	mov	fp, r3
 8004344:	220a      	movs	r2, #10
 8004346:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004348:	7805      	ldrb	r5, [r0, #0]
 800434a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800434e:	b2d9      	uxtb	r1, r3
 8004350:	2909      	cmp	r1, #9
 8004352:	d927      	bls.n	80043a4 <_strtod_l+0x1a4>
 8004354:	4622      	mov	r2, r4
 8004356:	4639      	mov	r1, r7
 8004358:	f002 fee4 	bl	8007124 <strncmp>
 800435c:	2800      	cmp	r0, #0
 800435e:	d033      	beq.n	80043c8 <_strtod_l+0x1c8>
 8004360:	2000      	movs	r0, #0
 8004362:	462a      	mov	r2, r5
 8004364:	465c      	mov	r4, fp
 8004366:	9004      	str	r0, [sp, #16]
 8004368:	4603      	mov	r3, r0
 800436a:	2a65      	cmp	r2, #101	; 0x65
 800436c:	d001      	beq.n	8004372 <_strtod_l+0x172>
 800436e:	2a45      	cmp	r2, #69	; 0x45
 8004370:	d114      	bne.n	800439c <_strtod_l+0x19c>
 8004372:	b91c      	cbnz	r4, 800437c <_strtod_l+0x17c>
 8004374:	9a07      	ldr	r2, [sp, #28]
 8004376:	4302      	orrs	r2, r0
 8004378:	d09f      	beq.n	80042ba <_strtod_l+0xba>
 800437a:	2400      	movs	r4, #0
 800437c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800437e:	1c72      	adds	r2, r6, #1
 8004380:	9219      	str	r2, [sp, #100]	; 0x64
 8004382:	7872      	ldrb	r2, [r6, #1]
 8004384:	2a2b      	cmp	r2, #43	; 0x2b
 8004386:	d079      	beq.n	800447c <_strtod_l+0x27c>
 8004388:	2a2d      	cmp	r2, #45	; 0x2d
 800438a:	f000 8083 	beq.w	8004494 <_strtod_l+0x294>
 800438e:	2700      	movs	r7, #0
 8004390:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004394:	2909      	cmp	r1, #9
 8004396:	f240 8083 	bls.w	80044a0 <_strtod_l+0x2a0>
 800439a:	9619      	str	r6, [sp, #100]	; 0x64
 800439c:	2500      	movs	r5, #0
 800439e:	e09f      	b.n	80044e0 <_strtod_l+0x2e0>
 80043a0:	2300      	movs	r3, #0
 80043a2:	e7c8      	b.n	8004336 <_strtod_l+0x136>
 80043a4:	f1bb 0f08 	cmp.w	fp, #8
 80043a8:	bfd5      	itete	le
 80043aa:	9906      	ldrle	r1, [sp, #24]
 80043ac:	9905      	ldrgt	r1, [sp, #20]
 80043ae:	fb02 3301 	mlale	r3, r2, r1, r3
 80043b2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80043b6:	f100 0001 	add.w	r0, r0, #1
 80043ba:	bfd4      	ite	le
 80043bc:	9306      	strle	r3, [sp, #24]
 80043be:	9305      	strgt	r3, [sp, #20]
 80043c0:	f10b 0b01 	add.w	fp, fp, #1
 80043c4:	9019      	str	r0, [sp, #100]	; 0x64
 80043c6:	e7be      	b.n	8004346 <_strtod_l+0x146>
 80043c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80043ca:	191a      	adds	r2, r3, r4
 80043cc:	9219      	str	r2, [sp, #100]	; 0x64
 80043ce:	5d1a      	ldrb	r2, [r3, r4]
 80043d0:	f1bb 0f00 	cmp.w	fp, #0
 80043d4:	d036      	beq.n	8004444 <_strtod_l+0x244>
 80043d6:	9004      	str	r0, [sp, #16]
 80043d8:	465c      	mov	r4, fp
 80043da:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80043de:	2b09      	cmp	r3, #9
 80043e0:	d912      	bls.n	8004408 <_strtod_l+0x208>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e7c1      	b.n	800436a <_strtod_l+0x16a>
 80043e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	9219      	str	r2, [sp, #100]	; 0x64
 80043ec:	785a      	ldrb	r2, [r3, #1]
 80043ee:	3001      	adds	r0, #1
 80043f0:	2a30      	cmp	r2, #48	; 0x30
 80043f2:	d0f8      	beq.n	80043e6 <_strtod_l+0x1e6>
 80043f4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	f200 84d5 	bhi.w	8004da8 <_strtod_l+0xba8>
 80043fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004400:	9004      	str	r0, [sp, #16]
 8004402:	2000      	movs	r0, #0
 8004404:	9308      	str	r3, [sp, #32]
 8004406:	4604      	mov	r4, r0
 8004408:	3a30      	subs	r2, #48	; 0x30
 800440a:	f100 0301 	add.w	r3, r0, #1
 800440e:	d013      	beq.n	8004438 <_strtod_l+0x238>
 8004410:	9904      	ldr	r1, [sp, #16]
 8004412:	4419      	add	r1, r3
 8004414:	9104      	str	r1, [sp, #16]
 8004416:	4623      	mov	r3, r4
 8004418:	1905      	adds	r5, r0, r4
 800441a:	210a      	movs	r1, #10
 800441c:	42ab      	cmp	r3, r5
 800441e:	d113      	bne.n	8004448 <_strtod_l+0x248>
 8004420:	1823      	adds	r3, r4, r0
 8004422:	2b08      	cmp	r3, #8
 8004424:	f104 0401 	add.w	r4, r4, #1
 8004428:	4404      	add	r4, r0
 800442a:	dc1b      	bgt.n	8004464 <_strtod_l+0x264>
 800442c:	9906      	ldr	r1, [sp, #24]
 800442e:	230a      	movs	r3, #10
 8004430:	fb03 2301 	mla	r3, r3, r1, r2
 8004434:	9306      	str	r3, [sp, #24]
 8004436:	2300      	movs	r3, #0
 8004438:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800443a:	1c51      	adds	r1, r2, #1
 800443c:	9119      	str	r1, [sp, #100]	; 0x64
 800443e:	7852      	ldrb	r2, [r2, #1]
 8004440:	4618      	mov	r0, r3
 8004442:	e7ca      	b.n	80043da <_strtod_l+0x1da>
 8004444:	4658      	mov	r0, fp
 8004446:	e7d3      	b.n	80043f0 <_strtod_l+0x1f0>
 8004448:	2b08      	cmp	r3, #8
 800444a:	dc04      	bgt.n	8004456 <_strtod_l+0x256>
 800444c:	9f06      	ldr	r7, [sp, #24]
 800444e:	434f      	muls	r7, r1
 8004450:	9706      	str	r7, [sp, #24]
 8004452:	3301      	adds	r3, #1
 8004454:	e7e2      	b.n	800441c <_strtod_l+0x21c>
 8004456:	1c5f      	adds	r7, r3, #1
 8004458:	2f10      	cmp	r7, #16
 800445a:	bfde      	ittt	le
 800445c:	9f05      	ldrle	r7, [sp, #20]
 800445e:	434f      	mulle	r7, r1
 8004460:	9705      	strle	r7, [sp, #20]
 8004462:	e7f6      	b.n	8004452 <_strtod_l+0x252>
 8004464:	2c10      	cmp	r4, #16
 8004466:	bfdf      	itttt	le
 8004468:	9905      	ldrle	r1, [sp, #20]
 800446a:	230a      	movle	r3, #10
 800446c:	fb03 2301 	mlale	r3, r3, r1, r2
 8004470:	9305      	strle	r3, [sp, #20]
 8004472:	e7e0      	b.n	8004436 <_strtod_l+0x236>
 8004474:	2300      	movs	r3, #0
 8004476:	9304      	str	r3, [sp, #16]
 8004478:	2301      	movs	r3, #1
 800447a:	e77b      	b.n	8004374 <_strtod_l+0x174>
 800447c:	2700      	movs	r7, #0
 800447e:	1cb2      	adds	r2, r6, #2
 8004480:	9219      	str	r2, [sp, #100]	; 0x64
 8004482:	78b2      	ldrb	r2, [r6, #2]
 8004484:	e784      	b.n	8004390 <_strtod_l+0x190>
 8004486:	bf00      	nop
 8004488:	08008148 	.word	0x08008148
 800448c:	08007f00 	.word	0x08007f00
 8004490:	7ff00000 	.word	0x7ff00000
 8004494:	2701      	movs	r7, #1
 8004496:	e7f2      	b.n	800447e <_strtod_l+0x27e>
 8004498:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800449a:	1c51      	adds	r1, r2, #1
 800449c:	9119      	str	r1, [sp, #100]	; 0x64
 800449e:	7852      	ldrb	r2, [r2, #1]
 80044a0:	2a30      	cmp	r2, #48	; 0x30
 80044a2:	d0f9      	beq.n	8004498 <_strtod_l+0x298>
 80044a4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80044a8:	2908      	cmp	r1, #8
 80044aa:	f63f af77 	bhi.w	800439c <_strtod_l+0x19c>
 80044ae:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80044b2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80044b4:	9209      	str	r2, [sp, #36]	; 0x24
 80044b6:	f04f 0e0a 	mov.w	lr, #10
 80044ba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80044bc:	1c51      	adds	r1, r2, #1
 80044be:	9119      	str	r1, [sp, #100]	; 0x64
 80044c0:	7852      	ldrb	r2, [r2, #1]
 80044c2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80044c6:	2d09      	cmp	r5, #9
 80044c8:	d935      	bls.n	8004536 <_strtod_l+0x336>
 80044ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80044cc:	1b49      	subs	r1, r1, r5
 80044ce:	2908      	cmp	r1, #8
 80044d0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80044d4:	dc02      	bgt.n	80044dc <_strtod_l+0x2dc>
 80044d6:	4565      	cmp	r5, ip
 80044d8:	bfa8      	it	ge
 80044da:	4665      	movge	r5, ip
 80044dc:	b107      	cbz	r7, 80044e0 <_strtod_l+0x2e0>
 80044de:	426d      	negs	r5, r5
 80044e0:	2c00      	cmp	r4, #0
 80044e2:	d14c      	bne.n	800457e <_strtod_l+0x37e>
 80044e4:	9907      	ldr	r1, [sp, #28]
 80044e6:	4301      	orrs	r1, r0
 80044e8:	f47f aecb 	bne.w	8004282 <_strtod_l+0x82>
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f47f aee4 	bne.w	80042ba <_strtod_l+0xba>
 80044f2:	2a69      	cmp	r2, #105	; 0x69
 80044f4:	d026      	beq.n	8004544 <_strtod_l+0x344>
 80044f6:	dc23      	bgt.n	8004540 <_strtod_l+0x340>
 80044f8:	2a49      	cmp	r2, #73	; 0x49
 80044fa:	d023      	beq.n	8004544 <_strtod_l+0x344>
 80044fc:	2a4e      	cmp	r2, #78	; 0x4e
 80044fe:	f47f aedc 	bne.w	80042ba <_strtod_l+0xba>
 8004502:	499d      	ldr	r1, [pc, #628]	; (8004778 <_strtod_l+0x578>)
 8004504:	a819      	add	r0, sp, #100	; 0x64
 8004506:	f001 fe19 	bl	800613c <__match>
 800450a:	2800      	cmp	r0, #0
 800450c:	f43f aed5 	beq.w	80042ba <_strtod_l+0xba>
 8004510:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b28      	cmp	r3, #40	; 0x28
 8004516:	d12c      	bne.n	8004572 <_strtod_l+0x372>
 8004518:	4998      	ldr	r1, [pc, #608]	; (800477c <_strtod_l+0x57c>)
 800451a:	aa1c      	add	r2, sp, #112	; 0x70
 800451c:	a819      	add	r0, sp, #100	; 0x64
 800451e:	f001 fe21 	bl	8006164 <__hexnan>
 8004522:	2805      	cmp	r0, #5
 8004524:	d125      	bne.n	8004572 <_strtod_l+0x372>
 8004526:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004528:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800452c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004530:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004534:	e6a5      	b.n	8004282 <_strtod_l+0x82>
 8004536:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800453a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800453e:	e7bc      	b.n	80044ba <_strtod_l+0x2ba>
 8004540:	2a6e      	cmp	r2, #110	; 0x6e
 8004542:	e7dc      	b.n	80044fe <_strtod_l+0x2fe>
 8004544:	498e      	ldr	r1, [pc, #568]	; (8004780 <_strtod_l+0x580>)
 8004546:	a819      	add	r0, sp, #100	; 0x64
 8004548:	f001 fdf8 	bl	800613c <__match>
 800454c:	2800      	cmp	r0, #0
 800454e:	f43f aeb4 	beq.w	80042ba <_strtod_l+0xba>
 8004552:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004554:	498b      	ldr	r1, [pc, #556]	; (8004784 <_strtod_l+0x584>)
 8004556:	3b01      	subs	r3, #1
 8004558:	a819      	add	r0, sp, #100	; 0x64
 800455a:	9319      	str	r3, [sp, #100]	; 0x64
 800455c:	f001 fdee 	bl	800613c <__match>
 8004560:	b910      	cbnz	r0, 8004568 <_strtod_l+0x368>
 8004562:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004564:	3301      	adds	r3, #1
 8004566:	9319      	str	r3, [sp, #100]	; 0x64
 8004568:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8004788 <_strtod_l+0x588>
 800456c:	f04f 0800 	mov.w	r8, #0
 8004570:	e687      	b.n	8004282 <_strtod_l+0x82>
 8004572:	4886      	ldr	r0, [pc, #536]	; (800478c <_strtod_l+0x58c>)
 8004574:	f002 fdc0 	bl	80070f8 <nan>
 8004578:	4680      	mov	r8, r0
 800457a:	4689      	mov	r9, r1
 800457c:	e681      	b.n	8004282 <_strtod_l+0x82>
 800457e:	9b04      	ldr	r3, [sp, #16]
 8004580:	9806      	ldr	r0, [sp, #24]
 8004582:	1aeb      	subs	r3, r5, r3
 8004584:	f1bb 0f00 	cmp.w	fp, #0
 8004588:	bf08      	it	eq
 800458a:	46a3      	moveq	fp, r4
 800458c:	2c10      	cmp	r4, #16
 800458e:	9307      	str	r3, [sp, #28]
 8004590:	4626      	mov	r6, r4
 8004592:	bfa8      	it	ge
 8004594:	2610      	movge	r6, #16
 8004596:	f7fb ffbd 	bl	8000514 <__aeabi_ui2d>
 800459a:	2c09      	cmp	r4, #9
 800459c:	4680      	mov	r8, r0
 800459e:	4689      	mov	r9, r1
 80045a0:	dd13      	ble.n	80045ca <_strtod_l+0x3ca>
 80045a2:	4b7b      	ldr	r3, [pc, #492]	; (8004790 <_strtod_l+0x590>)
 80045a4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80045a8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80045ac:	f7fc f82c 	bl	8000608 <__aeabi_dmul>
 80045b0:	4680      	mov	r8, r0
 80045b2:	9805      	ldr	r0, [sp, #20]
 80045b4:	4689      	mov	r9, r1
 80045b6:	f7fb ffad 	bl	8000514 <__aeabi_ui2d>
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	4640      	mov	r0, r8
 80045c0:	4649      	mov	r1, r9
 80045c2:	f7fb fe6b 	bl	800029c <__adddf3>
 80045c6:	4680      	mov	r8, r0
 80045c8:	4689      	mov	r9, r1
 80045ca:	2c0f      	cmp	r4, #15
 80045cc:	dc36      	bgt.n	800463c <_strtod_l+0x43c>
 80045ce:	9b07      	ldr	r3, [sp, #28]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f43f ae56 	beq.w	8004282 <_strtod_l+0x82>
 80045d6:	dd22      	ble.n	800461e <_strtod_l+0x41e>
 80045d8:	2b16      	cmp	r3, #22
 80045da:	dc09      	bgt.n	80045f0 <_strtod_l+0x3f0>
 80045dc:	496c      	ldr	r1, [pc, #432]	; (8004790 <_strtod_l+0x590>)
 80045de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80045e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045e6:	4642      	mov	r2, r8
 80045e8:	464b      	mov	r3, r9
 80045ea:	f7fc f80d 	bl	8000608 <__aeabi_dmul>
 80045ee:	e7c3      	b.n	8004578 <_strtod_l+0x378>
 80045f0:	9a07      	ldr	r2, [sp, #28]
 80045f2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80045f6:	4293      	cmp	r3, r2
 80045f8:	db20      	blt.n	800463c <_strtod_l+0x43c>
 80045fa:	4d65      	ldr	r5, [pc, #404]	; (8004790 <_strtod_l+0x590>)
 80045fc:	f1c4 040f 	rsb	r4, r4, #15
 8004600:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004604:	4642      	mov	r2, r8
 8004606:	464b      	mov	r3, r9
 8004608:	e9d1 0100 	ldrd	r0, r1, [r1]
 800460c:	f7fb fffc 	bl	8000608 <__aeabi_dmul>
 8004610:	9b07      	ldr	r3, [sp, #28]
 8004612:	1b1c      	subs	r4, r3, r4
 8004614:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004618:	e9d5 2300 	ldrd	r2, r3, [r5]
 800461c:	e7e5      	b.n	80045ea <_strtod_l+0x3ea>
 800461e:	9b07      	ldr	r3, [sp, #28]
 8004620:	3316      	adds	r3, #22
 8004622:	db0b      	blt.n	800463c <_strtod_l+0x43c>
 8004624:	9b04      	ldr	r3, [sp, #16]
 8004626:	1b5d      	subs	r5, r3, r5
 8004628:	4b59      	ldr	r3, [pc, #356]	; (8004790 <_strtod_l+0x590>)
 800462a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800462e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004632:	4640      	mov	r0, r8
 8004634:	4649      	mov	r1, r9
 8004636:	f7fc f911 	bl	800085c <__aeabi_ddiv>
 800463a:	e79d      	b.n	8004578 <_strtod_l+0x378>
 800463c:	9b07      	ldr	r3, [sp, #28]
 800463e:	1ba6      	subs	r6, r4, r6
 8004640:	441e      	add	r6, r3
 8004642:	2e00      	cmp	r6, #0
 8004644:	dd74      	ble.n	8004730 <_strtod_l+0x530>
 8004646:	f016 030f 	ands.w	r3, r6, #15
 800464a:	d00a      	beq.n	8004662 <_strtod_l+0x462>
 800464c:	4950      	ldr	r1, [pc, #320]	; (8004790 <_strtod_l+0x590>)
 800464e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004652:	4642      	mov	r2, r8
 8004654:	464b      	mov	r3, r9
 8004656:	e9d1 0100 	ldrd	r0, r1, [r1]
 800465a:	f7fb ffd5 	bl	8000608 <__aeabi_dmul>
 800465e:	4680      	mov	r8, r0
 8004660:	4689      	mov	r9, r1
 8004662:	f036 060f 	bics.w	r6, r6, #15
 8004666:	d052      	beq.n	800470e <_strtod_l+0x50e>
 8004668:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800466c:	dd27      	ble.n	80046be <_strtod_l+0x4be>
 800466e:	f04f 0b00 	mov.w	fp, #0
 8004672:	f8cd b010 	str.w	fp, [sp, #16]
 8004676:	f8cd b020 	str.w	fp, [sp, #32]
 800467a:	f8cd b018 	str.w	fp, [sp, #24]
 800467e:	2322      	movs	r3, #34	; 0x22
 8004680:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8004788 <_strtod_l+0x588>
 8004684:	f8ca 3000 	str.w	r3, [sl]
 8004688:	f04f 0800 	mov.w	r8, #0
 800468c:	9b08      	ldr	r3, [sp, #32]
 800468e:	2b00      	cmp	r3, #0
 8004690:	f43f adf7 	beq.w	8004282 <_strtod_l+0x82>
 8004694:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004696:	4650      	mov	r0, sl
 8004698:	f001 fe6c 	bl	8006374 <_Bfree>
 800469c:	9906      	ldr	r1, [sp, #24]
 800469e:	4650      	mov	r0, sl
 80046a0:	f001 fe68 	bl	8006374 <_Bfree>
 80046a4:	9904      	ldr	r1, [sp, #16]
 80046a6:	4650      	mov	r0, sl
 80046a8:	f001 fe64 	bl	8006374 <_Bfree>
 80046ac:	9908      	ldr	r1, [sp, #32]
 80046ae:	4650      	mov	r0, sl
 80046b0:	f001 fe60 	bl	8006374 <_Bfree>
 80046b4:	4659      	mov	r1, fp
 80046b6:	4650      	mov	r0, sl
 80046b8:	f001 fe5c 	bl	8006374 <_Bfree>
 80046bc:	e5e1      	b.n	8004282 <_strtod_l+0x82>
 80046be:	4b35      	ldr	r3, [pc, #212]	; (8004794 <_strtod_l+0x594>)
 80046c0:	9305      	str	r3, [sp, #20]
 80046c2:	2300      	movs	r3, #0
 80046c4:	1136      	asrs	r6, r6, #4
 80046c6:	4640      	mov	r0, r8
 80046c8:	4649      	mov	r1, r9
 80046ca:	461f      	mov	r7, r3
 80046cc:	2e01      	cmp	r6, #1
 80046ce:	dc21      	bgt.n	8004714 <_strtod_l+0x514>
 80046d0:	b10b      	cbz	r3, 80046d6 <_strtod_l+0x4d6>
 80046d2:	4680      	mov	r8, r0
 80046d4:	4689      	mov	r9, r1
 80046d6:	4b2f      	ldr	r3, [pc, #188]	; (8004794 <_strtod_l+0x594>)
 80046d8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80046dc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80046e0:	4642      	mov	r2, r8
 80046e2:	464b      	mov	r3, r9
 80046e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046e8:	f7fb ff8e 	bl	8000608 <__aeabi_dmul>
 80046ec:	4b26      	ldr	r3, [pc, #152]	; (8004788 <_strtod_l+0x588>)
 80046ee:	460a      	mov	r2, r1
 80046f0:	400b      	ands	r3, r1
 80046f2:	4929      	ldr	r1, [pc, #164]	; (8004798 <_strtod_l+0x598>)
 80046f4:	428b      	cmp	r3, r1
 80046f6:	4680      	mov	r8, r0
 80046f8:	d8b9      	bhi.n	800466e <_strtod_l+0x46e>
 80046fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80046fe:	428b      	cmp	r3, r1
 8004700:	bf86      	itte	hi
 8004702:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 800479c <_strtod_l+0x59c>
 8004706:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800470a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800470e:	2300      	movs	r3, #0
 8004710:	9305      	str	r3, [sp, #20]
 8004712:	e07f      	b.n	8004814 <_strtod_l+0x614>
 8004714:	07f2      	lsls	r2, r6, #31
 8004716:	d505      	bpl.n	8004724 <_strtod_l+0x524>
 8004718:	9b05      	ldr	r3, [sp, #20]
 800471a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471e:	f7fb ff73 	bl	8000608 <__aeabi_dmul>
 8004722:	2301      	movs	r3, #1
 8004724:	9a05      	ldr	r2, [sp, #20]
 8004726:	3208      	adds	r2, #8
 8004728:	3701      	adds	r7, #1
 800472a:	1076      	asrs	r6, r6, #1
 800472c:	9205      	str	r2, [sp, #20]
 800472e:	e7cd      	b.n	80046cc <_strtod_l+0x4cc>
 8004730:	d0ed      	beq.n	800470e <_strtod_l+0x50e>
 8004732:	4276      	negs	r6, r6
 8004734:	f016 020f 	ands.w	r2, r6, #15
 8004738:	d00a      	beq.n	8004750 <_strtod_l+0x550>
 800473a:	4b15      	ldr	r3, [pc, #84]	; (8004790 <_strtod_l+0x590>)
 800473c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004740:	4640      	mov	r0, r8
 8004742:	4649      	mov	r1, r9
 8004744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004748:	f7fc f888 	bl	800085c <__aeabi_ddiv>
 800474c:	4680      	mov	r8, r0
 800474e:	4689      	mov	r9, r1
 8004750:	1136      	asrs	r6, r6, #4
 8004752:	d0dc      	beq.n	800470e <_strtod_l+0x50e>
 8004754:	2e1f      	cmp	r6, #31
 8004756:	dd23      	ble.n	80047a0 <_strtod_l+0x5a0>
 8004758:	f04f 0b00 	mov.w	fp, #0
 800475c:	f8cd b010 	str.w	fp, [sp, #16]
 8004760:	f8cd b020 	str.w	fp, [sp, #32]
 8004764:	f8cd b018 	str.w	fp, [sp, #24]
 8004768:	2322      	movs	r3, #34	; 0x22
 800476a:	f04f 0800 	mov.w	r8, #0
 800476e:	f04f 0900 	mov.w	r9, #0
 8004772:	f8ca 3000 	str.w	r3, [sl]
 8004776:	e789      	b.n	800468c <_strtod_l+0x48c>
 8004778:	08007ed1 	.word	0x08007ed1
 800477c:	08007f14 	.word	0x08007f14
 8004780:	08007ec9 	.word	0x08007ec9
 8004784:	08008054 	.word	0x08008054
 8004788:	7ff00000 	.word	0x7ff00000
 800478c:	08008300 	.word	0x08008300
 8004790:	080081e0 	.word	0x080081e0
 8004794:	080081b8 	.word	0x080081b8
 8004798:	7ca00000 	.word	0x7ca00000
 800479c:	7fefffff 	.word	0x7fefffff
 80047a0:	f016 0310 	ands.w	r3, r6, #16
 80047a4:	bf18      	it	ne
 80047a6:	236a      	movne	r3, #106	; 0x6a
 80047a8:	4fb1      	ldr	r7, [pc, #708]	; (8004a70 <_strtod_l+0x870>)
 80047aa:	9305      	str	r3, [sp, #20]
 80047ac:	4640      	mov	r0, r8
 80047ae:	4649      	mov	r1, r9
 80047b0:	2300      	movs	r3, #0
 80047b2:	07f2      	lsls	r2, r6, #31
 80047b4:	d504      	bpl.n	80047c0 <_strtod_l+0x5c0>
 80047b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047ba:	f7fb ff25 	bl	8000608 <__aeabi_dmul>
 80047be:	2301      	movs	r3, #1
 80047c0:	1076      	asrs	r6, r6, #1
 80047c2:	f107 0708 	add.w	r7, r7, #8
 80047c6:	d1f4      	bne.n	80047b2 <_strtod_l+0x5b2>
 80047c8:	b10b      	cbz	r3, 80047ce <_strtod_l+0x5ce>
 80047ca:	4680      	mov	r8, r0
 80047cc:	4689      	mov	r9, r1
 80047ce:	9b05      	ldr	r3, [sp, #20]
 80047d0:	b1c3      	cbz	r3, 8004804 <_strtod_l+0x604>
 80047d2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80047d6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80047da:	2b00      	cmp	r3, #0
 80047dc:	4649      	mov	r1, r9
 80047de:	dd11      	ble.n	8004804 <_strtod_l+0x604>
 80047e0:	2b1f      	cmp	r3, #31
 80047e2:	f340 8124 	ble.w	8004a2e <_strtod_l+0x82e>
 80047e6:	2b34      	cmp	r3, #52	; 0x34
 80047e8:	bfde      	ittt	le
 80047ea:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80047ee:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80047f2:	fa03 f202 	lslle.w	r2, r3, r2
 80047f6:	f04f 0800 	mov.w	r8, #0
 80047fa:	bfcc      	ite	gt
 80047fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004800:	ea02 0901 	andle.w	r9, r2, r1
 8004804:	2200      	movs	r2, #0
 8004806:	2300      	movs	r3, #0
 8004808:	4640      	mov	r0, r8
 800480a:	4649      	mov	r1, r9
 800480c:	f7fc f964 	bl	8000ad8 <__aeabi_dcmpeq>
 8004810:	2800      	cmp	r0, #0
 8004812:	d1a1      	bne.n	8004758 <_strtod_l+0x558>
 8004814:	9b06      	ldr	r3, [sp, #24]
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	9908      	ldr	r1, [sp, #32]
 800481a:	4623      	mov	r3, r4
 800481c:	465a      	mov	r2, fp
 800481e:	4650      	mov	r0, sl
 8004820:	f001 fe10 	bl	8006444 <__s2b>
 8004824:	9008      	str	r0, [sp, #32]
 8004826:	2800      	cmp	r0, #0
 8004828:	f43f af21 	beq.w	800466e <_strtod_l+0x46e>
 800482c:	9b04      	ldr	r3, [sp, #16]
 800482e:	1b5d      	subs	r5, r3, r5
 8004830:	9b07      	ldr	r3, [sp, #28]
 8004832:	2b00      	cmp	r3, #0
 8004834:	bfb4      	ite	lt
 8004836:	462b      	movlt	r3, r5
 8004838:	2300      	movge	r3, #0
 800483a:	930e      	str	r3, [sp, #56]	; 0x38
 800483c:	9b07      	ldr	r3, [sp, #28]
 800483e:	f04f 0b00 	mov.w	fp, #0
 8004842:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004846:	9314      	str	r3, [sp, #80]	; 0x50
 8004848:	f8cd b010 	str.w	fp, [sp, #16]
 800484c:	9b08      	ldr	r3, [sp, #32]
 800484e:	4650      	mov	r0, sl
 8004850:	6859      	ldr	r1, [r3, #4]
 8004852:	f001 fd4f 	bl	80062f4 <_Balloc>
 8004856:	9006      	str	r0, [sp, #24]
 8004858:	2800      	cmp	r0, #0
 800485a:	f43f af10 	beq.w	800467e <_strtod_l+0x47e>
 800485e:	9b08      	ldr	r3, [sp, #32]
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	3202      	adds	r2, #2
 8004864:	f103 010c 	add.w	r1, r3, #12
 8004868:	0092      	lsls	r2, r2, #2
 800486a:	300c      	adds	r0, #12
 800486c:	f001 fd34 	bl	80062d8 <memcpy>
 8004870:	ab1c      	add	r3, sp, #112	; 0x70
 8004872:	9301      	str	r3, [sp, #4]
 8004874:	ab1b      	add	r3, sp, #108	; 0x6c
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	4642      	mov	r2, r8
 800487a:	464b      	mov	r3, r9
 800487c:	4650      	mov	r0, sl
 800487e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8004882:	f002 f91d 	bl	8006ac0 <__d2b>
 8004886:	901a      	str	r0, [sp, #104]	; 0x68
 8004888:	2800      	cmp	r0, #0
 800488a:	f43f aef8 	beq.w	800467e <_strtod_l+0x47e>
 800488e:	2101      	movs	r1, #1
 8004890:	4650      	mov	r0, sl
 8004892:	f001 fe6f 	bl	8006574 <__i2b>
 8004896:	9004      	str	r0, [sp, #16]
 8004898:	4603      	mov	r3, r0
 800489a:	2800      	cmp	r0, #0
 800489c:	f43f aeef 	beq.w	800467e <_strtod_l+0x47e>
 80048a0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80048a2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80048a4:	2d00      	cmp	r5, #0
 80048a6:	bfab      	itete	ge
 80048a8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80048aa:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80048ac:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80048ae:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80048b0:	bfac      	ite	ge
 80048b2:	18ee      	addge	r6, r5, r3
 80048b4:	1b5c      	sublt	r4, r3, r5
 80048b6:	9b05      	ldr	r3, [sp, #20]
 80048b8:	1aed      	subs	r5, r5, r3
 80048ba:	4415      	add	r5, r2
 80048bc:	4b6d      	ldr	r3, [pc, #436]	; (8004a74 <_strtod_l+0x874>)
 80048be:	3d01      	subs	r5, #1
 80048c0:	429d      	cmp	r5, r3
 80048c2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80048c6:	f280 80c4 	bge.w	8004a52 <_strtod_l+0x852>
 80048ca:	1b5b      	subs	r3, r3, r5
 80048cc:	2b1f      	cmp	r3, #31
 80048ce:	eba2 0203 	sub.w	r2, r2, r3
 80048d2:	f04f 0701 	mov.w	r7, #1
 80048d6:	f300 80b1 	bgt.w	8004a3c <_strtod_l+0x83c>
 80048da:	fa07 f303 	lsl.w	r3, r7, r3
 80048de:	930f      	str	r3, [sp, #60]	; 0x3c
 80048e0:	2500      	movs	r5, #0
 80048e2:	18b7      	adds	r7, r6, r2
 80048e4:	9b05      	ldr	r3, [sp, #20]
 80048e6:	42be      	cmp	r6, r7
 80048e8:	4414      	add	r4, r2
 80048ea:	441c      	add	r4, r3
 80048ec:	4633      	mov	r3, r6
 80048ee:	bfa8      	it	ge
 80048f0:	463b      	movge	r3, r7
 80048f2:	42a3      	cmp	r3, r4
 80048f4:	bfa8      	it	ge
 80048f6:	4623      	movge	r3, r4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	bfc2      	ittt	gt
 80048fc:	1aff      	subgt	r7, r7, r3
 80048fe:	1ae4      	subgt	r4, r4, r3
 8004900:	1af6      	subgt	r6, r6, r3
 8004902:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004904:	2b00      	cmp	r3, #0
 8004906:	dd17      	ble.n	8004938 <_strtod_l+0x738>
 8004908:	9904      	ldr	r1, [sp, #16]
 800490a:	461a      	mov	r2, r3
 800490c:	4650      	mov	r0, sl
 800490e:	f001 feef 	bl	80066f0 <__pow5mult>
 8004912:	9004      	str	r0, [sp, #16]
 8004914:	2800      	cmp	r0, #0
 8004916:	f43f aeb2 	beq.w	800467e <_strtod_l+0x47e>
 800491a:	4601      	mov	r1, r0
 800491c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800491e:	4650      	mov	r0, sl
 8004920:	f001 fe3e 	bl	80065a0 <__multiply>
 8004924:	9009      	str	r0, [sp, #36]	; 0x24
 8004926:	2800      	cmp	r0, #0
 8004928:	f43f aea9 	beq.w	800467e <_strtod_l+0x47e>
 800492c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800492e:	4650      	mov	r0, sl
 8004930:	f001 fd20 	bl	8006374 <_Bfree>
 8004934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004936:	931a      	str	r3, [sp, #104]	; 0x68
 8004938:	2f00      	cmp	r7, #0
 800493a:	f300 808e 	bgt.w	8004a5a <_strtod_l+0x85a>
 800493e:	9b07      	ldr	r3, [sp, #28]
 8004940:	2b00      	cmp	r3, #0
 8004942:	dd08      	ble.n	8004956 <_strtod_l+0x756>
 8004944:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004946:	9906      	ldr	r1, [sp, #24]
 8004948:	4650      	mov	r0, sl
 800494a:	f001 fed1 	bl	80066f0 <__pow5mult>
 800494e:	9006      	str	r0, [sp, #24]
 8004950:	2800      	cmp	r0, #0
 8004952:	f43f ae94 	beq.w	800467e <_strtod_l+0x47e>
 8004956:	2c00      	cmp	r4, #0
 8004958:	dd08      	ble.n	800496c <_strtod_l+0x76c>
 800495a:	9906      	ldr	r1, [sp, #24]
 800495c:	4622      	mov	r2, r4
 800495e:	4650      	mov	r0, sl
 8004960:	f001 ff20 	bl	80067a4 <__lshift>
 8004964:	9006      	str	r0, [sp, #24]
 8004966:	2800      	cmp	r0, #0
 8004968:	f43f ae89 	beq.w	800467e <_strtod_l+0x47e>
 800496c:	2e00      	cmp	r6, #0
 800496e:	dd08      	ble.n	8004982 <_strtod_l+0x782>
 8004970:	9904      	ldr	r1, [sp, #16]
 8004972:	4632      	mov	r2, r6
 8004974:	4650      	mov	r0, sl
 8004976:	f001 ff15 	bl	80067a4 <__lshift>
 800497a:	9004      	str	r0, [sp, #16]
 800497c:	2800      	cmp	r0, #0
 800497e:	f43f ae7e 	beq.w	800467e <_strtod_l+0x47e>
 8004982:	9a06      	ldr	r2, [sp, #24]
 8004984:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004986:	4650      	mov	r0, sl
 8004988:	f001 ff98 	bl	80068bc <__mdiff>
 800498c:	4683      	mov	fp, r0
 800498e:	2800      	cmp	r0, #0
 8004990:	f43f ae75 	beq.w	800467e <_strtod_l+0x47e>
 8004994:	2400      	movs	r4, #0
 8004996:	68c3      	ldr	r3, [r0, #12]
 8004998:	9904      	ldr	r1, [sp, #16]
 800499a:	60c4      	str	r4, [r0, #12]
 800499c:	930b      	str	r3, [sp, #44]	; 0x2c
 800499e:	f001 ff71 	bl	8006884 <__mcmp>
 80049a2:	42a0      	cmp	r0, r4
 80049a4:	da6c      	bge.n	8004a80 <_strtod_l+0x880>
 80049a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049a8:	ea53 0308 	orrs.w	r3, r3, r8
 80049ac:	f040 8092 	bne.w	8004ad4 <_strtod_l+0x8d4>
 80049b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f040 808d 	bne.w	8004ad4 <_strtod_l+0x8d4>
 80049ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80049be:	0d1b      	lsrs	r3, r3, #20
 80049c0:	051b      	lsls	r3, r3, #20
 80049c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80049c6:	f240 8085 	bls.w	8004ad4 <_strtod_l+0x8d4>
 80049ca:	f8db 3014 	ldr.w	r3, [fp, #20]
 80049ce:	b91b      	cbnz	r3, 80049d8 <_strtod_l+0x7d8>
 80049d0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	dd7d      	ble.n	8004ad4 <_strtod_l+0x8d4>
 80049d8:	4659      	mov	r1, fp
 80049da:	2201      	movs	r2, #1
 80049dc:	4650      	mov	r0, sl
 80049de:	f001 fee1 	bl	80067a4 <__lshift>
 80049e2:	9904      	ldr	r1, [sp, #16]
 80049e4:	4683      	mov	fp, r0
 80049e6:	f001 ff4d 	bl	8006884 <__mcmp>
 80049ea:	2800      	cmp	r0, #0
 80049ec:	dd72      	ble.n	8004ad4 <_strtod_l+0x8d4>
 80049ee:	9905      	ldr	r1, [sp, #20]
 80049f0:	4a21      	ldr	r2, [pc, #132]	; (8004a78 <_strtod_l+0x878>)
 80049f2:	464b      	mov	r3, r9
 80049f4:	2900      	cmp	r1, #0
 80049f6:	f000 808d 	beq.w	8004b14 <_strtod_l+0x914>
 80049fa:	ea02 0109 	and.w	r1, r2, r9
 80049fe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004a02:	f300 8087 	bgt.w	8004b14 <_strtod_l+0x914>
 8004a06:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004a0a:	f77f aead 	ble.w	8004768 <_strtod_l+0x568>
 8004a0e:	4b1b      	ldr	r3, [pc, #108]	; (8004a7c <_strtod_l+0x87c>)
 8004a10:	4640      	mov	r0, r8
 8004a12:	4649      	mov	r1, r9
 8004a14:	2200      	movs	r2, #0
 8004a16:	f7fb fdf7 	bl	8000608 <__aeabi_dmul>
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4303      	orrs	r3, r0
 8004a1e:	bf08      	it	eq
 8004a20:	2322      	moveq	r3, #34	; 0x22
 8004a22:	4680      	mov	r8, r0
 8004a24:	4689      	mov	r9, r1
 8004a26:	bf08      	it	eq
 8004a28:	f8ca 3000 	streq.w	r3, [sl]
 8004a2c:	e632      	b.n	8004694 <_strtod_l+0x494>
 8004a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	ea03 0808 	and.w	r8, r3, r8
 8004a3a:	e6e3      	b.n	8004804 <_strtod_l+0x604>
 8004a3c:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004a40:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004a44:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004a48:	35e2      	adds	r5, #226	; 0xe2
 8004a4a:	fa07 f505 	lsl.w	r5, r7, r5
 8004a4e:	970f      	str	r7, [sp, #60]	; 0x3c
 8004a50:	e747      	b.n	80048e2 <_strtod_l+0x6e2>
 8004a52:	2301      	movs	r3, #1
 8004a54:	2500      	movs	r5, #0
 8004a56:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a58:	e743      	b.n	80048e2 <_strtod_l+0x6e2>
 8004a5a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004a5c:	463a      	mov	r2, r7
 8004a5e:	4650      	mov	r0, sl
 8004a60:	f001 fea0 	bl	80067a4 <__lshift>
 8004a64:	901a      	str	r0, [sp, #104]	; 0x68
 8004a66:	2800      	cmp	r0, #0
 8004a68:	f47f af69 	bne.w	800493e <_strtod_l+0x73e>
 8004a6c:	e607      	b.n	800467e <_strtod_l+0x47e>
 8004a6e:	bf00      	nop
 8004a70:	08007f28 	.word	0x08007f28
 8004a74:	fffffc02 	.word	0xfffffc02
 8004a78:	7ff00000 	.word	0x7ff00000
 8004a7c:	39500000 	.word	0x39500000
 8004a80:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004a84:	d165      	bne.n	8004b52 <_strtod_l+0x952>
 8004a86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004a8c:	b35a      	cbz	r2, 8004ae6 <_strtod_l+0x8e6>
 8004a8e:	4a9a      	ldr	r2, [pc, #616]	; (8004cf8 <_strtod_l+0xaf8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d12b      	bne.n	8004aec <_strtod_l+0x8ec>
 8004a94:	9b05      	ldr	r3, [sp, #20]
 8004a96:	4641      	mov	r1, r8
 8004a98:	b303      	cbz	r3, 8004adc <_strtod_l+0x8dc>
 8004a9a:	4b98      	ldr	r3, [pc, #608]	; (8004cfc <_strtod_l+0xafc>)
 8004a9c:	464a      	mov	r2, r9
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004aa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004aa8:	d81b      	bhi.n	8004ae2 <_strtod_l+0x8e2>
 8004aaa:	0d1b      	lsrs	r3, r3, #20
 8004aac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	4299      	cmp	r1, r3
 8004ab6:	d119      	bne.n	8004aec <_strtod_l+0x8ec>
 8004ab8:	4b91      	ldr	r3, [pc, #580]	; (8004d00 <_strtod_l+0xb00>)
 8004aba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d102      	bne.n	8004ac6 <_strtod_l+0x8c6>
 8004ac0:	3101      	adds	r1, #1
 8004ac2:	f43f addc 	beq.w	800467e <_strtod_l+0x47e>
 8004ac6:	4b8d      	ldr	r3, [pc, #564]	; (8004cfc <_strtod_l+0xafc>)
 8004ac8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004aca:	401a      	ands	r2, r3
 8004acc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004ad0:	f04f 0800 	mov.w	r8, #0
 8004ad4:	9b05      	ldr	r3, [sp, #20]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d199      	bne.n	8004a0e <_strtod_l+0x80e>
 8004ada:	e5db      	b.n	8004694 <_strtod_l+0x494>
 8004adc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ae0:	e7e8      	b.n	8004ab4 <_strtod_l+0x8b4>
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	e7e6      	b.n	8004ab4 <_strtod_l+0x8b4>
 8004ae6:	ea53 0308 	orrs.w	r3, r3, r8
 8004aea:	d080      	beq.n	80049ee <_strtod_l+0x7ee>
 8004aec:	b1e5      	cbz	r5, 8004b28 <_strtod_l+0x928>
 8004aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004af0:	421d      	tst	r5, r3
 8004af2:	d0ef      	beq.n	8004ad4 <_strtod_l+0x8d4>
 8004af4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004af6:	9a05      	ldr	r2, [sp, #20]
 8004af8:	4640      	mov	r0, r8
 8004afa:	4649      	mov	r1, r9
 8004afc:	b1c3      	cbz	r3, 8004b30 <_strtod_l+0x930>
 8004afe:	f7ff fb5b 	bl	80041b8 <sulp>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b0a:	f7fb fbc7 	bl	800029c <__adddf3>
 8004b0e:	4680      	mov	r8, r0
 8004b10:	4689      	mov	r9, r1
 8004b12:	e7df      	b.n	8004ad4 <_strtod_l+0x8d4>
 8004b14:	4013      	ands	r3, r2
 8004b16:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004b1a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004b1e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004b22:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004b26:	e7d5      	b.n	8004ad4 <_strtod_l+0x8d4>
 8004b28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b2a:	ea13 0f08 	tst.w	r3, r8
 8004b2e:	e7e0      	b.n	8004af2 <_strtod_l+0x8f2>
 8004b30:	f7ff fb42 	bl	80041b8 <sulp>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b3c:	f7fb fbac 	bl	8000298 <__aeabi_dsub>
 8004b40:	2200      	movs	r2, #0
 8004b42:	2300      	movs	r3, #0
 8004b44:	4680      	mov	r8, r0
 8004b46:	4689      	mov	r9, r1
 8004b48:	f7fb ffc6 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	d0c1      	beq.n	8004ad4 <_strtod_l+0x8d4>
 8004b50:	e60a      	b.n	8004768 <_strtod_l+0x568>
 8004b52:	9904      	ldr	r1, [sp, #16]
 8004b54:	4658      	mov	r0, fp
 8004b56:	f002 f80f 	bl	8006b78 <__ratio>
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b60:	4606      	mov	r6, r0
 8004b62:	460f      	mov	r7, r1
 8004b64:	f7fb ffcc 	bl	8000b00 <__aeabi_dcmple>
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	d070      	beq.n	8004c4e <_strtod_l+0xa4e>
 8004b6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d042      	beq.n	8004bf8 <_strtod_l+0x9f8>
 8004b72:	4f64      	ldr	r7, [pc, #400]	; (8004d04 <_strtod_l+0xb04>)
 8004b74:	2600      	movs	r6, #0
 8004b76:	4d63      	ldr	r5, [pc, #396]	; (8004d04 <_strtod_l+0xb04>)
 8004b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b7e:	0d1b      	lsrs	r3, r3, #20
 8004b80:	051b      	lsls	r3, r3, #20
 8004b82:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b86:	4b60      	ldr	r3, [pc, #384]	; (8004d08 <_strtod_l+0xb08>)
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	f040 80c5 	bne.w	8004d18 <_strtod_l+0xb18>
 8004b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b90:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004b94:	4640      	mov	r0, r8
 8004b96:	4649      	mov	r1, r9
 8004b98:	f001 ff18 	bl	80069cc <__ulp>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	4639      	mov	r1, r7
 8004ba4:	f7fb fd30 	bl	8000608 <__aeabi_dmul>
 8004ba8:	4642      	mov	r2, r8
 8004baa:	464b      	mov	r3, r9
 8004bac:	f7fb fb76 	bl	800029c <__adddf3>
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4952      	ldr	r1, [pc, #328]	; (8004cfc <_strtod_l+0xafc>)
 8004bb4:	4a55      	ldr	r2, [pc, #340]	; (8004d0c <_strtod_l+0xb0c>)
 8004bb6:	4019      	ands	r1, r3
 8004bb8:	4291      	cmp	r1, r2
 8004bba:	4680      	mov	r8, r0
 8004bbc:	d95d      	bls.n	8004c7a <_strtod_l+0xa7a>
 8004bbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004bc0:	4b4f      	ldr	r3, [pc, #316]	; (8004d00 <_strtod_l+0xb00>)
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d103      	bne.n	8004bce <_strtod_l+0x9ce>
 8004bc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004bc8:	3301      	adds	r3, #1
 8004bca:	f43f ad58 	beq.w	800467e <_strtod_l+0x47e>
 8004bce:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8004d00 <_strtod_l+0xb00>
 8004bd2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004bd6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004bd8:	4650      	mov	r0, sl
 8004bda:	f001 fbcb 	bl	8006374 <_Bfree>
 8004bde:	9906      	ldr	r1, [sp, #24]
 8004be0:	4650      	mov	r0, sl
 8004be2:	f001 fbc7 	bl	8006374 <_Bfree>
 8004be6:	9904      	ldr	r1, [sp, #16]
 8004be8:	4650      	mov	r0, sl
 8004bea:	f001 fbc3 	bl	8006374 <_Bfree>
 8004bee:	4659      	mov	r1, fp
 8004bf0:	4650      	mov	r0, sl
 8004bf2:	f001 fbbf 	bl	8006374 <_Bfree>
 8004bf6:	e629      	b.n	800484c <_strtod_l+0x64c>
 8004bf8:	f1b8 0f00 	cmp.w	r8, #0
 8004bfc:	d119      	bne.n	8004c32 <_strtod_l+0xa32>
 8004bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c04:	b9e3      	cbnz	r3, 8004c40 <_strtod_l+0xa40>
 8004c06:	4b3f      	ldr	r3, [pc, #252]	; (8004d04 <_strtod_l+0xb04>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	4639      	mov	r1, r7
 8004c0e:	f7fb ff6d 	bl	8000aec <__aeabi_dcmplt>
 8004c12:	b9c8      	cbnz	r0, 8004c48 <_strtod_l+0xa48>
 8004c14:	4b3e      	ldr	r3, [pc, #248]	; (8004d10 <_strtod_l+0xb10>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	4630      	mov	r0, r6
 8004c1a:	4639      	mov	r1, r7
 8004c1c:	f7fb fcf4 	bl	8000608 <__aeabi_dmul>
 8004c20:	4604      	mov	r4, r0
 8004c22:	460d      	mov	r5, r1
 8004c24:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004c28:	9416      	str	r4, [sp, #88]	; 0x58
 8004c2a:	9317      	str	r3, [sp, #92]	; 0x5c
 8004c2c:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8004c30:	e7a2      	b.n	8004b78 <_strtod_l+0x978>
 8004c32:	f1b8 0f01 	cmp.w	r8, #1
 8004c36:	d103      	bne.n	8004c40 <_strtod_l+0xa40>
 8004c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f43f ad94 	beq.w	8004768 <_strtod_l+0x568>
 8004c40:	4f34      	ldr	r7, [pc, #208]	; (8004d14 <_strtod_l+0xb14>)
 8004c42:	2600      	movs	r6, #0
 8004c44:	2400      	movs	r4, #0
 8004c46:	e796      	b.n	8004b76 <_strtod_l+0x976>
 8004c48:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004c4a:	4d31      	ldr	r5, [pc, #196]	; (8004d10 <_strtod_l+0xb10>)
 8004c4c:	e7ea      	b.n	8004c24 <_strtod_l+0xa24>
 8004c4e:	4b30      	ldr	r3, [pc, #192]	; (8004d10 <_strtod_l+0xb10>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	4630      	mov	r0, r6
 8004c54:	4639      	mov	r1, r7
 8004c56:	f7fb fcd7 	bl	8000608 <__aeabi_dmul>
 8004c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c5c:	4604      	mov	r4, r0
 8004c5e:	460d      	mov	r5, r1
 8004c60:	b933      	cbnz	r3, 8004c70 <_strtod_l+0xa70>
 8004c62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c66:	9010      	str	r0, [sp, #64]	; 0x40
 8004c68:	9311      	str	r3, [sp, #68]	; 0x44
 8004c6a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004c6e:	e783      	b.n	8004b78 <_strtod_l+0x978>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004c78:	e7f7      	b.n	8004c6a <_strtod_l+0xa6a>
 8004c7a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004c7e:	9b05      	ldr	r3, [sp, #20]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1a8      	bne.n	8004bd6 <_strtod_l+0x9d6>
 8004c84:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004c88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004c8a:	0d1b      	lsrs	r3, r3, #20
 8004c8c:	051b      	lsls	r3, r3, #20
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d1a1      	bne.n	8004bd6 <_strtod_l+0x9d6>
 8004c92:	4620      	mov	r0, r4
 8004c94:	4629      	mov	r1, r5
 8004c96:	f7fc fa7d 	bl	8001194 <__aeabi_d2lz>
 8004c9a:	f7fb fc87 	bl	80005ac <__aeabi_l2d>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	f7fb faf7 	bl	8000298 <__aeabi_dsub>
 8004caa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004cac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004cb0:	ea43 0308 	orr.w	r3, r3, r8
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	460d      	mov	r5, r1
 8004cba:	d068      	beq.n	8004d8e <_strtod_l+0xb8e>
 8004cbc:	a30a      	add	r3, pc, #40	; (adr r3, 8004ce8 <_strtod_l+0xae8>)
 8004cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc2:	f7fb ff13 	bl	8000aec <__aeabi_dcmplt>
 8004cc6:	2800      	cmp	r0, #0
 8004cc8:	f47f ace4 	bne.w	8004694 <_strtod_l+0x494>
 8004ccc:	a308      	add	r3, pc, #32	; (adr r3, 8004cf0 <_strtod_l+0xaf0>)
 8004cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	f7fb ff27 	bl	8000b28 <__aeabi_dcmpgt>
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	f43f af7b 	beq.w	8004bd6 <_strtod_l+0x9d6>
 8004ce0:	e4d8      	b.n	8004694 <_strtod_l+0x494>
 8004ce2:	bf00      	nop
 8004ce4:	f3af 8000 	nop.w
 8004ce8:	94a03595 	.word	0x94a03595
 8004cec:	3fdfffff 	.word	0x3fdfffff
 8004cf0:	35afe535 	.word	0x35afe535
 8004cf4:	3fe00000 	.word	0x3fe00000
 8004cf8:	000fffff 	.word	0x000fffff
 8004cfc:	7ff00000 	.word	0x7ff00000
 8004d00:	7fefffff 	.word	0x7fefffff
 8004d04:	3ff00000 	.word	0x3ff00000
 8004d08:	7fe00000 	.word	0x7fe00000
 8004d0c:	7c9fffff 	.word	0x7c9fffff
 8004d10:	3fe00000 	.word	0x3fe00000
 8004d14:	bff00000 	.word	0xbff00000
 8004d18:	9b05      	ldr	r3, [sp, #20]
 8004d1a:	b313      	cbz	r3, 8004d62 <_strtod_l+0xb62>
 8004d1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d1e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004d22:	d81e      	bhi.n	8004d62 <_strtod_l+0xb62>
 8004d24:	a326      	add	r3, pc, #152	; (adr r3, 8004dc0 <_strtod_l+0xbc0>)
 8004d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	4629      	mov	r1, r5
 8004d2e:	f7fb fee7 	bl	8000b00 <__aeabi_dcmple>
 8004d32:	b190      	cbz	r0, 8004d5a <_strtod_l+0xb5a>
 8004d34:	4629      	mov	r1, r5
 8004d36:	4620      	mov	r0, r4
 8004d38:	f7fb ff3e 	bl	8000bb8 <__aeabi_d2uiz>
 8004d3c:	2801      	cmp	r0, #1
 8004d3e:	bf38      	it	cc
 8004d40:	2001      	movcc	r0, #1
 8004d42:	f7fb fbe7 	bl	8000514 <__aeabi_ui2d>
 8004d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d48:	4604      	mov	r4, r0
 8004d4a:	460d      	mov	r5, r1
 8004d4c:	b9d3      	cbnz	r3, 8004d84 <_strtod_l+0xb84>
 8004d4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d52:	9012      	str	r0, [sp, #72]	; 0x48
 8004d54:	9313      	str	r3, [sp, #76]	; 0x4c
 8004d56:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004d5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004d5c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004d60:	1a9f      	subs	r7, r3, r2
 8004d62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d66:	f001 fe31 	bl	80069cc <__ulp>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	4630      	mov	r0, r6
 8004d70:	4639      	mov	r1, r7
 8004d72:	f7fb fc49 	bl	8000608 <__aeabi_dmul>
 8004d76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004d7a:	f7fb fa8f 	bl	800029c <__adddf3>
 8004d7e:	4680      	mov	r8, r0
 8004d80:	4689      	mov	r9, r1
 8004d82:	e77c      	b.n	8004c7e <_strtod_l+0xa7e>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004d8c:	e7e3      	b.n	8004d56 <_strtod_l+0xb56>
 8004d8e:	a30e      	add	r3, pc, #56	; (adr r3, 8004dc8 <_strtod_l+0xbc8>)
 8004d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d94:	f7fb feaa 	bl	8000aec <__aeabi_dcmplt>
 8004d98:	e79f      	b.n	8004cda <_strtod_l+0xada>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	930a      	str	r3, [sp, #40]	; 0x28
 8004d9e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004da0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	f7ff ba71 	b.w	800428a <_strtod_l+0x8a>
 8004da8:	2a65      	cmp	r2, #101	; 0x65
 8004daa:	f43f ab63 	beq.w	8004474 <_strtod_l+0x274>
 8004dae:	2a45      	cmp	r2, #69	; 0x45
 8004db0:	f43f ab60 	beq.w	8004474 <_strtod_l+0x274>
 8004db4:	2301      	movs	r3, #1
 8004db6:	f7ff bb95 	b.w	80044e4 <_strtod_l+0x2e4>
 8004dba:	bf00      	nop
 8004dbc:	f3af 8000 	nop.w
 8004dc0:	ffc00000 	.word	0xffc00000
 8004dc4:	41dfffff 	.word	0x41dfffff
 8004dc8:	94a03595 	.word	0x94a03595
 8004dcc:	3fcfffff 	.word	0x3fcfffff

08004dd0 <_strtod_r>:
 8004dd0:	4b01      	ldr	r3, [pc, #4]	; (8004dd8 <_strtod_r+0x8>)
 8004dd2:	f7ff ba15 	b.w	8004200 <_strtod_l>
 8004dd6:	bf00      	nop
 8004dd8:	200000ac 	.word	0x200000ac

08004ddc <_strtol_l.constprop.0>:
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004de2:	4680      	mov	r8, r0
 8004de4:	d001      	beq.n	8004dea <_strtol_l.constprop.0+0xe>
 8004de6:	2b24      	cmp	r3, #36	; 0x24
 8004de8:	d906      	bls.n	8004df8 <_strtol_l.constprop.0+0x1c>
 8004dea:	f000 feeb 	bl	8005bc4 <__errno>
 8004dee:	2316      	movs	r3, #22
 8004df0:	6003      	str	r3, [r0, #0]
 8004df2:	2000      	movs	r0, #0
 8004df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004df8:	4f35      	ldr	r7, [pc, #212]	; (8004ed0 <_strtol_l.constprop.0+0xf4>)
 8004dfa:	460d      	mov	r5, r1
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e02:	5de6      	ldrb	r6, [r4, r7]
 8004e04:	f016 0608 	ands.w	r6, r6, #8
 8004e08:	d1f8      	bne.n	8004dfc <_strtol_l.constprop.0+0x20>
 8004e0a:	2c2d      	cmp	r4, #45	; 0x2d
 8004e0c:	d12f      	bne.n	8004e6e <_strtol_l.constprop.0+0x92>
 8004e0e:	782c      	ldrb	r4, [r5, #0]
 8004e10:	2601      	movs	r6, #1
 8004e12:	1c85      	adds	r5, r0, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d057      	beq.n	8004ec8 <_strtol_l.constprop.0+0xec>
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d109      	bne.n	8004e30 <_strtol_l.constprop.0+0x54>
 8004e1c:	2c30      	cmp	r4, #48	; 0x30
 8004e1e:	d107      	bne.n	8004e30 <_strtol_l.constprop.0+0x54>
 8004e20:	7828      	ldrb	r0, [r5, #0]
 8004e22:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004e26:	2858      	cmp	r0, #88	; 0x58
 8004e28:	d149      	bne.n	8004ebe <_strtol_l.constprop.0+0xe2>
 8004e2a:	786c      	ldrb	r4, [r5, #1]
 8004e2c:	2310      	movs	r3, #16
 8004e2e:	3502      	adds	r5, #2
 8004e30:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8004e34:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8004e38:	2700      	movs	r7, #0
 8004e3a:	fbbe f9f3 	udiv	r9, lr, r3
 8004e3e:	4638      	mov	r0, r7
 8004e40:	fb03 ea19 	mls	sl, r3, r9, lr
 8004e44:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004e48:	f1bc 0f09 	cmp.w	ip, #9
 8004e4c:	d814      	bhi.n	8004e78 <_strtol_l.constprop.0+0x9c>
 8004e4e:	4664      	mov	r4, ip
 8004e50:	42a3      	cmp	r3, r4
 8004e52:	dd22      	ble.n	8004e9a <_strtol_l.constprop.0+0xbe>
 8004e54:	2f00      	cmp	r7, #0
 8004e56:	db1d      	blt.n	8004e94 <_strtol_l.constprop.0+0xb8>
 8004e58:	4581      	cmp	r9, r0
 8004e5a:	d31b      	bcc.n	8004e94 <_strtol_l.constprop.0+0xb8>
 8004e5c:	d101      	bne.n	8004e62 <_strtol_l.constprop.0+0x86>
 8004e5e:	45a2      	cmp	sl, r4
 8004e60:	db18      	blt.n	8004e94 <_strtol_l.constprop.0+0xb8>
 8004e62:	fb00 4003 	mla	r0, r0, r3, r4
 8004e66:	2701      	movs	r7, #1
 8004e68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e6c:	e7ea      	b.n	8004e44 <_strtol_l.constprop.0+0x68>
 8004e6e:	2c2b      	cmp	r4, #43	; 0x2b
 8004e70:	bf04      	itt	eq
 8004e72:	782c      	ldrbeq	r4, [r5, #0]
 8004e74:	1c85      	addeq	r5, r0, #2
 8004e76:	e7cd      	b.n	8004e14 <_strtol_l.constprop.0+0x38>
 8004e78:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004e7c:	f1bc 0f19 	cmp.w	ip, #25
 8004e80:	d801      	bhi.n	8004e86 <_strtol_l.constprop.0+0xaa>
 8004e82:	3c37      	subs	r4, #55	; 0x37
 8004e84:	e7e4      	b.n	8004e50 <_strtol_l.constprop.0+0x74>
 8004e86:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004e8a:	f1bc 0f19 	cmp.w	ip, #25
 8004e8e:	d804      	bhi.n	8004e9a <_strtol_l.constprop.0+0xbe>
 8004e90:	3c57      	subs	r4, #87	; 0x57
 8004e92:	e7dd      	b.n	8004e50 <_strtol_l.constprop.0+0x74>
 8004e94:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004e98:	e7e6      	b.n	8004e68 <_strtol_l.constprop.0+0x8c>
 8004e9a:	2f00      	cmp	r7, #0
 8004e9c:	da07      	bge.n	8004eae <_strtol_l.constprop.0+0xd2>
 8004e9e:	2322      	movs	r3, #34	; 0x22
 8004ea0:	f8c8 3000 	str.w	r3, [r8]
 8004ea4:	4670      	mov	r0, lr
 8004ea6:	2a00      	cmp	r2, #0
 8004ea8:	d0a4      	beq.n	8004df4 <_strtol_l.constprop.0+0x18>
 8004eaa:	1e69      	subs	r1, r5, #1
 8004eac:	e005      	b.n	8004eba <_strtol_l.constprop.0+0xde>
 8004eae:	b106      	cbz	r6, 8004eb2 <_strtol_l.constprop.0+0xd6>
 8004eb0:	4240      	negs	r0, r0
 8004eb2:	2a00      	cmp	r2, #0
 8004eb4:	d09e      	beq.n	8004df4 <_strtol_l.constprop.0+0x18>
 8004eb6:	2f00      	cmp	r7, #0
 8004eb8:	d1f7      	bne.n	8004eaa <_strtol_l.constprop.0+0xce>
 8004eba:	6011      	str	r1, [r2, #0]
 8004ebc:	e79a      	b.n	8004df4 <_strtol_l.constprop.0+0x18>
 8004ebe:	2430      	movs	r4, #48	; 0x30
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1b5      	bne.n	8004e30 <_strtol_l.constprop.0+0x54>
 8004ec4:	2308      	movs	r3, #8
 8004ec6:	e7b3      	b.n	8004e30 <_strtol_l.constprop.0+0x54>
 8004ec8:	2c30      	cmp	r4, #48	; 0x30
 8004eca:	d0a9      	beq.n	8004e20 <_strtol_l.constprop.0+0x44>
 8004ecc:	230a      	movs	r3, #10
 8004ece:	e7af      	b.n	8004e30 <_strtol_l.constprop.0+0x54>
 8004ed0:	08007f51 	.word	0x08007f51

08004ed4 <_strtol_r>:
 8004ed4:	f7ff bf82 	b.w	8004ddc <_strtol_l.constprop.0>

08004ed8 <quorem>:
 8004ed8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004edc:	6903      	ldr	r3, [r0, #16]
 8004ede:	690c      	ldr	r4, [r1, #16]
 8004ee0:	42a3      	cmp	r3, r4
 8004ee2:	4607      	mov	r7, r0
 8004ee4:	db7d      	blt.n	8004fe2 <quorem+0x10a>
 8004ee6:	3c01      	subs	r4, #1
 8004ee8:	f101 0814 	add.w	r8, r1, #20
 8004eec:	f100 0514 	add.w	r5, r0, #20
 8004ef0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ef4:	9301      	str	r3, [sp, #4]
 8004ef6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004efa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004efe:	3301      	adds	r3, #1
 8004f00:	429a      	cmp	r2, r3
 8004f02:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004f06:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004f0a:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f0e:	d32e      	bcc.n	8004f6e <quorem+0x96>
 8004f10:	f04f 0e00 	mov.w	lr, #0
 8004f14:	4640      	mov	r0, r8
 8004f16:	46ac      	mov	ip, r5
 8004f18:	46f2      	mov	sl, lr
 8004f1a:	f850 2b04 	ldr.w	r2, [r0], #4
 8004f1e:	b293      	uxth	r3, r2
 8004f20:	fb06 e303 	mla	r3, r6, r3, lr
 8004f24:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004f28:	0c12      	lsrs	r2, r2, #16
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	fb06 e202 	mla	r2, r6, r2, lr
 8004f30:	ebaa 0303 	sub.w	r3, sl, r3
 8004f34:	f8dc a000 	ldr.w	sl, [ip]
 8004f38:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004f3c:	b292      	uxth	r2, r2
 8004f3e:	fa13 f38a 	uxtah	r3, r3, sl
 8004f42:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004f46:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f50:	4581      	cmp	r9, r0
 8004f52:	f84c 3b04 	str.w	r3, [ip], #4
 8004f56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004f5a:	d2de      	bcs.n	8004f1a <quorem+0x42>
 8004f5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004f60:	b92b      	cbnz	r3, 8004f6e <quorem+0x96>
 8004f62:	9b01      	ldr	r3, [sp, #4]
 8004f64:	3b04      	subs	r3, #4
 8004f66:	429d      	cmp	r5, r3
 8004f68:	461a      	mov	r2, r3
 8004f6a:	d32e      	bcc.n	8004fca <quorem+0xf2>
 8004f6c:	613c      	str	r4, [r7, #16]
 8004f6e:	4638      	mov	r0, r7
 8004f70:	f001 fc88 	bl	8006884 <__mcmp>
 8004f74:	2800      	cmp	r0, #0
 8004f76:	db24      	blt.n	8004fc2 <quorem+0xea>
 8004f78:	3601      	adds	r6, #1
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	f04f 0c00 	mov.w	ip, #0
 8004f80:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f84:	f8d0 e000 	ldr.w	lr, [r0]
 8004f88:	b293      	uxth	r3, r2
 8004f8a:	ebac 0303 	sub.w	r3, ip, r3
 8004f8e:	0c12      	lsrs	r2, r2, #16
 8004f90:	fa13 f38e 	uxtah	r3, r3, lr
 8004f94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004f98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004fa2:	45c1      	cmp	r9, r8
 8004fa4:	f840 3b04 	str.w	r3, [r0], #4
 8004fa8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004fac:	d2e8      	bcs.n	8004f80 <quorem+0xa8>
 8004fae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fb6:	b922      	cbnz	r2, 8004fc2 <quorem+0xea>
 8004fb8:	3b04      	subs	r3, #4
 8004fba:	429d      	cmp	r5, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	d30a      	bcc.n	8004fd6 <quorem+0xfe>
 8004fc0:	613c      	str	r4, [r7, #16]
 8004fc2:	4630      	mov	r0, r6
 8004fc4:	b003      	add	sp, #12
 8004fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	3b04      	subs	r3, #4
 8004fce:	2a00      	cmp	r2, #0
 8004fd0:	d1cc      	bne.n	8004f6c <quorem+0x94>
 8004fd2:	3c01      	subs	r4, #1
 8004fd4:	e7c7      	b.n	8004f66 <quorem+0x8e>
 8004fd6:	6812      	ldr	r2, [r2, #0]
 8004fd8:	3b04      	subs	r3, #4
 8004fda:	2a00      	cmp	r2, #0
 8004fdc:	d1f0      	bne.n	8004fc0 <quorem+0xe8>
 8004fde:	3c01      	subs	r4, #1
 8004fe0:	e7eb      	b.n	8004fba <quorem+0xe2>
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	e7ee      	b.n	8004fc4 <quorem+0xec>
	...

08004fe8 <_dtoa_r>:
 8004fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fec:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004fee:	b099      	sub	sp, #100	; 0x64
 8004ff0:	4616      	mov	r6, r2
 8004ff2:	461f      	mov	r7, r3
 8004ff4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004ff8:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004ffc:	4605      	mov	r5, r0
 8004ffe:	b974      	cbnz	r4, 800501e <_dtoa_r+0x36>
 8005000:	2010      	movs	r0, #16
 8005002:	f001 f94f 	bl	80062a4 <malloc>
 8005006:	4602      	mov	r2, r0
 8005008:	6268      	str	r0, [r5, #36]	; 0x24
 800500a:	b920      	cbnz	r0, 8005016 <_dtoa_r+0x2e>
 800500c:	4ba8      	ldr	r3, [pc, #672]	; (80052b0 <_dtoa_r+0x2c8>)
 800500e:	21ea      	movs	r1, #234	; 0xea
 8005010:	48a8      	ldr	r0, [pc, #672]	; (80052b4 <_dtoa_r+0x2cc>)
 8005012:	f002 f8a9 	bl	8007168 <__assert_func>
 8005016:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800501a:	6004      	str	r4, [r0, #0]
 800501c:	60c4      	str	r4, [r0, #12]
 800501e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005020:	6819      	ldr	r1, [r3, #0]
 8005022:	b151      	cbz	r1, 800503a <_dtoa_r+0x52>
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	604a      	str	r2, [r1, #4]
 8005028:	2301      	movs	r3, #1
 800502a:	4093      	lsls	r3, r2
 800502c:	608b      	str	r3, [r1, #8]
 800502e:	4628      	mov	r0, r5
 8005030:	f001 f9a0 	bl	8006374 <_Bfree>
 8005034:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005036:	2200      	movs	r2, #0
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	1e3b      	subs	r3, r7, #0
 800503c:	bfb9      	ittee	lt
 800503e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005042:	9305      	strlt	r3, [sp, #20]
 8005044:	2300      	movge	r3, #0
 8005046:	f8c8 3000 	strge.w	r3, [r8]
 800504a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800504e:	4b9a      	ldr	r3, [pc, #616]	; (80052b8 <_dtoa_r+0x2d0>)
 8005050:	bfbc      	itt	lt
 8005052:	2201      	movlt	r2, #1
 8005054:	f8c8 2000 	strlt.w	r2, [r8]
 8005058:	ea33 0309 	bics.w	r3, r3, r9
 800505c:	d119      	bne.n	8005092 <_dtoa_r+0xaa>
 800505e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005060:	f242 730f 	movw	r3, #9999	; 0x270f
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800506a:	4333      	orrs	r3, r6
 800506c:	f000 8580 	beq.w	8005b70 <_dtoa_r+0xb88>
 8005070:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005072:	b953      	cbnz	r3, 800508a <_dtoa_r+0xa2>
 8005074:	4b91      	ldr	r3, [pc, #580]	; (80052bc <_dtoa_r+0x2d4>)
 8005076:	e022      	b.n	80050be <_dtoa_r+0xd6>
 8005078:	4b91      	ldr	r3, [pc, #580]	; (80052c0 <_dtoa_r+0x2d8>)
 800507a:	9303      	str	r3, [sp, #12]
 800507c:	3308      	adds	r3, #8
 800507e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	9803      	ldr	r0, [sp, #12]
 8005084:	b019      	add	sp, #100	; 0x64
 8005086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800508a:	4b8c      	ldr	r3, [pc, #560]	; (80052bc <_dtoa_r+0x2d4>)
 800508c:	9303      	str	r3, [sp, #12]
 800508e:	3303      	adds	r3, #3
 8005090:	e7f5      	b.n	800507e <_dtoa_r+0x96>
 8005092:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005096:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800509a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800509e:	2200      	movs	r2, #0
 80050a0:	2300      	movs	r3, #0
 80050a2:	f7fb fd19 	bl	8000ad8 <__aeabi_dcmpeq>
 80050a6:	4680      	mov	r8, r0
 80050a8:	b158      	cbz	r0, 80050c2 <_dtoa_r+0xda>
 80050aa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80050ac:	2301      	movs	r3, #1
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 8559 	beq.w	8005b6a <_dtoa_r+0xb82>
 80050b8:	4882      	ldr	r0, [pc, #520]	; (80052c4 <_dtoa_r+0x2dc>)
 80050ba:	6018      	str	r0, [r3, #0]
 80050bc:	1e43      	subs	r3, r0, #1
 80050be:	9303      	str	r3, [sp, #12]
 80050c0:	e7df      	b.n	8005082 <_dtoa_r+0x9a>
 80050c2:	ab16      	add	r3, sp, #88	; 0x58
 80050c4:	9301      	str	r3, [sp, #4]
 80050c6:	ab17      	add	r3, sp, #92	; 0x5c
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	4628      	mov	r0, r5
 80050cc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80050d0:	f001 fcf6 	bl	8006ac0 <__d2b>
 80050d4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80050d8:	4683      	mov	fp, r0
 80050da:	2c00      	cmp	r4, #0
 80050dc:	d07e      	beq.n	80051dc <_dtoa_r+0x1f4>
 80050de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050e0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80050e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050ec:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80050f0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80050f4:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80050f8:	4b73      	ldr	r3, [pc, #460]	; (80052c8 <_dtoa_r+0x2e0>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	f7fb f8cc 	bl	8000298 <__aeabi_dsub>
 8005100:	a365      	add	r3, pc, #404	; (adr r3, 8005298 <_dtoa_r+0x2b0>)
 8005102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005106:	f7fb fa7f 	bl	8000608 <__aeabi_dmul>
 800510a:	a365      	add	r3, pc, #404	; (adr r3, 80052a0 <_dtoa_r+0x2b8>)
 800510c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005110:	f7fb f8c4 	bl	800029c <__adddf3>
 8005114:	4606      	mov	r6, r0
 8005116:	4620      	mov	r0, r4
 8005118:	460f      	mov	r7, r1
 800511a:	f7fb fa0b 	bl	8000534 <__aeabi_i2d>
 800511e:	a362      	add	r3, pc, #392	; (adr r3, 80052a8 <_dtoa_r+0x2c0>)
 8005120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005124:	f7fb fa70 	bl	8000608 <__aeabi_dmul>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4630      	mov	r0, r6
 800512e:	4639      	mov	r1, r7
 8005130:	f7fb f8b4 	bl	800029c <__adddf3>
 8005134:	4606      	mov	r6, r0
 8005136:	460f      	mov	r7, r1
 8005138:	f7fb fd16 	bl	8000b68 <__aeabi_d2iz>
 800513c:	2200      	movs	r2, #0
 800513e:	4682      	mov	sl, r0
 8005140:	2300      	movs	r3, #0
 8005142:	4630      	mov	r0, r6
 8005144:	4639      	mov	r1, r7
 8005146:	f7fb fcd1 	bl	8000aec <__aeabi_dcmplt>
 800514a:	b148      	cbz	r0, 8005160 <_dtoa_r+0x178>
 800514c:	4650      	mov	r0, sl
 800514e:	f7fb f9f1 	bl	8000534 <__aeabi_i2d>
 8005152:	4632      	mov	r2, r6
 8005154:	463b      	mov	r3, r7
 8005156:	f7fb fcbf 	bl	8000ad8 <__aeabi_dcmpeq>
 800515a:	b908      	cbnz	r0, 8005160 <_dtoa_r+0x178>
 800515c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005160:	f1ba 0f16 	cmp.w	sl, #22
 8005164:	d857      	bhi.n	8005216 <_dtoa_r+0x22e>
 8005166:	4b59      	ldr	r3, [pc, #356]	; (80052cc <_dtoa_r+0x2e4>)
 8005168:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800516c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005170:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005174:	f7fb fcba 	bl	8000aec <__aeabi_dcmplt>
 8005178:	2800      	cmp	r0, #0
 800517a:	d04e      	beq.n	800521a <_dtoa_r+0x232>
 800517c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005180:	2300      	movs	r3, #0
 8005182:	930f      	str	r3, [sp, #60]	; 0x3c
 8005184:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005186:	1b1c      	subs	r4, r3, r4
 8005188:	1e63      	subs	r3, r4, #1
 800518a:	9309      	str	r3, [sp, #36]	; 0x24
 800518c:	bf45      	ittet	mi
 800518e:	f1c4 0301 	rsbmi	r3, r4, #1
 8005192:	9306      	strmi	r3, [sp, #24]
 8005194:	2300      	movpl	r3, #0
 8005196:	2300      	movmi	r3, #0
 8005198:	bf4c      	ite	mi
 800519a:	9309      	strmi	r3, [sp, #36]	; 0x24
 800519c:	9306      	strpl	r3, [sp, #24]
 800519e:	f1ba 0f00 	cmp.w	sl, #0
 80051a2:	db3c      	blt.n	800521e <_dtoa_r+0x236>
 80051a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051a6:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80051aa:	4453      	add	r3, sl
 80051ac:	9309      	str	r3, [sp, #36]	; 0x24
 80051ae:	2300      	movs	r3, #0
 80051b0:	930a      	str	r3, [sp, #40]	; 0x28
 80051b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051b4:	2b09      	cmp	r3, #9
 80051b6:	f200 808d 	bhi.w	80052d4 <_dtoa_r+0x2ec>
 80051ba:	2b05      	cmp	r3, #5
 80051bc:	bfc4      	itt	gt
 80051be:	3b04      	subgt	r3, #4
 80051c0:	9322      	strgt	r3, [sp, #136]	; 0x88
 80051c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051c4:	f1a3 0302 	sub.w	r3, r3, #2
 80051c8:	bfcc      	ite	gt
 80051ca:	2400      	movgt	r4, #0
 80051cc:	2401      	movle	r4, #1
 80051ce:	2b03      	cmp	r3, #3
 80051d0:	f200 808c 	bhi.w	80052ec <_dtoa_r+0x304>
 80051d4:	e8df f003 	tbb	[pc, r3]
 80051d8:	5b4d4f2d 	.word	0x5b4d4f2d
 80051dc:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80051e0:	441c      	add	r4, r3
 80051e2:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80051e6:	2b20      	cmp	r3, #32
 80051e8:	bfc3      	ittte	gt
 80051ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80051ee:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80051f2:	fa09 f303 	lslgt.w	r3, r9, r3
 80051f6:	f1c3 0320 	rsble	r3, r3, #32
 80051fa:	bfc6      	itte	gt
 80051fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005200:	4318      	orrgt	r0, r3
 8005202:	fa06 f003 	lslle.w	r0, r6, r3
 8005206:	f7fb f985 	bl	8000514 <__aeabi_ui2d>
 800520a:	2301      	movs	r3, #1
 800520c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005210:	3c01      	subs	r4, #1
 8005212:	9313      	str	r3, [sp, #76]	; 0x4c
 8005214:	e770      	b.n	80050f8 <_dtoa_r+0x110>
 8005216:	2301      	movs	r3, #1
 8005218:	e7b3      	b.n	8005182 <_dtoa_r+0x19a>
 800521a:	900f      	str	r0, [sp, #60]	; 0x3c
 800521c:	e7b2      	b.n	8005184 <_dtoa_r+0x19c>
 800521e:	9b06      	ldr	r3, [sp, #24]
 8005220:	eba3 030a 	sub.w	r3, r3, sl
 8005224:	9306      	str	r3, [sp, #24]
 8005226:	f1ca 0300 	rsb	r3, sl, #0
 800522a:	930a      	str	r3, [sp, #40]	; 0x28
 800522c:	2300      	movs	r3, #0
 800522e:	930e      	str	r3, [sp, #56]	; 0x38
 8005230:	e7bf      	b.n	80051b2 <_dtoa_r+0x1ca>
 8005232:	2300      	movs	r3, #0
 8005234:	930b      	str	r3, [sp, #44]	; 0x2c
 8005236:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005238:	2b00      	cmp	r3, #0
 800523a:	dc5a      	bgt.n	80052f2 <_dtoa_r+0x30a>
 800523c:	f04f 0901 	mov.w	r9, #1
 8005240:	f8cd 9020 	str.w	r9, [sp, #32]
 8005244:	464b      	mov	r3, r9
 8005246:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800524a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800524c:	2200      	movs	r2, #0
 800524e:	6042      	str	r2, [r0, #4]
 8005250:	2204      	movs	r2, #4
 8005252:	f102 0614 	add.w	r6, r2, #20
 8005256:	429e      	cmp	r6, r3
 8005258:	6841      	ldr	r1, [r0, #4]
 800525a:	d950      	bls.n	80052fe <_dtoa_r+0x316>
 800525c:	4628      	mov	r0, r5
 800525e:	f001 f849 	bl	80062f4 <_Balloc>
 8005262:	9003      	str	r0, [sp, #12]
 8005264:	2800      	cmp	r0, #0
 8005266:	d14e      	bne.n	8005306 <_dtoa_r+0x31e>
 8005268:	4b19      	ldr	r3, [pc, #100]	; (80052d0 <_dtoa_r+0x2e8>)
 800526a:	4602      	mov	r2, r0
 800526c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005270:	e6ce      	b.n	8005010 <_dtoa_r+0x28>
 8005272:	2301      	movs	r3, #1
 8005274:	e7de      	b.n	8005234 <_dtoa_r+0x24c>
 8005276:	2300      	movs	r3, #0
 8005278:	930b      	str	r3, [sp, #44]	; 0x2c
 800527a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800527c:	eb0a 0903 	add.w	r9, sl, r3
 8005280:	f109 0301 	add.w	r3, r9, #1
 8005284:	2b01      	cmp	r3, #1
 8005286:	9308      	str	r3, [sp, #32]
 8005288:	bfb8      	it	lt
 800528a:	2301      	movlt	r3, #1
 800528c:	e7dd      	b.n	800524a <_dtoa_r+0x262>
 800528e:	2301      	movs	r3, #1
 8005290:	e7f2      	b.n	8005278 <_dtoa_r+0x290>
 8005292:	bf00      	nop
 8005294:	f3af 8000 	nop.w
 8005298:	636f4361 	.word	0x636f4361
 800529c:	3fd287a7 	.word	0x3fd287a7
 80052a0:	8b60c8b3 	.word	0x8b60c8b3
 80052a4:	3fc68a28 	.word	0x3fc68a28
 80052a8:	509f79fb 	.word	0x509f79fb
 80052ac:	3fd34413 	.word	0x3fd34413
 80052b0:	0800805e 	.word	0x0800805e
 80052b4:	08008075 	.word	0x08008075
 80052b8:	7ff00000 	.word	0x7ff00000
 80052bc:	0800805a 	.word	0x0800805a
 80052c0:	08008051 	.word	0x08008051
 80052c4:	08007ed5 	.word	0x08007ed5
 80052c8:	3ff80000 	.word	0x3ff80000
 80052cc:	080081e0 	.word	0x080081e0
 80052d0:	080080d0 	.word	0x080080d0
 80052d4:	2401      	movs	r4, #1
 80052d6:	2300      	movs	r3, #0
 80052d8:	9322      	str	r3, [sp, #136]	; 0x88
 80052da:	940b      	str	r4, [sp, #44]	; 0x2c
 80052dc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80052e0:	2200      	movs	r2, #0
 80052e2:	f8cd 9020 	str.w	r9, [sp, #32]
 80052e6:	2312      	movs	r3, #18
 80052e8:	9223      	str	r2, [sp, #140]	; 0x8c
 80052ea:	e7ae      	b.n	800524a <_dtoa_r+0x262>
 80052ec:	2301      	movs	r3, #1
 80052ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80052f0:	e7f4      	b.n	80052dc <_dtoa_r+0x2f4>
 80052f2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80052f6:	f8cd 9020 	str.w	r9, [sp, #32]
 80052fa:	464b      	mov	r3, r9
 80052fc:	e7a5      	b.n	800524a <_dtoa_r+0x262>
 80052fe:	3101      	adds	r1, #1
 8005300:	6041      	str	r1, [r0, #4]
 8005302:	0052      	lsls	r2, r2, #1
 8005304:	e7a5      	b.n	8005252 <_dtoa_r+0x26a>
 8005306:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005308:	9a03      	ldr	r2, [sp, #12]
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	9b08      	ldr	r3, [sp, #32]
 800530e:	2b0e      	cmp	r3, #14
 8005310:	f200 80a8 	bhi.w	8005464 <_dtoa_r+0x47c>
 8005314:	2c00      	cmp	r4, #0
 8005316:	f000 80a5 	beq.w	8005464 <_dtoa_r+0x47c>
 800531a:	f1ba 0f00 	cmp.w	sl, #0
 800531e:	dd34      	ble.n	800538a <_dtoa_r+0x3a2>
 8005320:	4a9a      	ldr	r2, [pc, #616]	; (800558c <_dtoa_r+0x5a4>)
 8005322:	f00a 030f 	and.w	r3, sl, #15
 8005326:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800532a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800532e:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005332:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005336:	ea4f 142a 	mov.w	r4, sl, asr #4
 800533a:	d016      	beq.n	800536a <_dtoa_r+0x382>
 800533c:	4b94      	ldr	r3, [pc, #592]	; (8005590 <_dtoa_r+0x5a8>)
 800533e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005342:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005346:	f7fb fa89 	bl	800085c <__aeabi_ddiv>
 800534a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800534e:	f004 040f 	and.w	r4, r4, #15
 8005352:	2703      	movs	r7, #3
 8005354:	4e8e      	ldr	r6, [pc, #568]	; (8005590 <_dtoa_r+0x5a8>)
 8005356:	b954      	cbnz	r4, 800536e <_dtoa_r+0x386>
 8005358:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800535c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005360:	f7fb fa7c 	bl	800085c <__aeabi_ddiv>
 8005364:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005368:	e029      	b.n	80053be <_dtoa_r+0x3d6>
 800536a:	2702      	movs	r7, #2
 800536c:	e7f2      	b.n	8005354 <_dtoa_r+0x36c>
 800536e:	07e1      	lsls	r1, r4, #31
 8005370:	d508      	bpl.n	8005384 <_dtoa_r+0x39c>
 8005372:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005376:	e9d6 2300 	ldrd	r2, r3, [r6]
 800537a:	f7fb f945 	bl	8000608 <__aeabi_dmul>
 800537e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005382:	3701      	adds	r7, #1
 8005384:	1064      	asrs	r4, r4, #1
 8005386:	3608      	adds	r6, #8
 8005388:	e7e5      	b.n	8005356 <_dtoa_r+0x36e>
 800538a:	f000 80a5 	beq.w	80054d8 <_dtoa_r+0x4f0>
 800538e:	f1ca 0400 	rsb	r4, sl, #0
 8005392:	4b7e      	ldr	r3, [pc, #504]	; (800558c <_dtoa_r+0x5a4>)
 8005394:	4e7e      	ldr	r6, [pc, #504]	; (8005590 <_dtoa_r+0x5a8>)
 8005396:	f004 020f 	and.w	r2, r4, #15
 800539a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800539e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053a6:	f7fb f92f 	bl	8000608 <__aeabi_dmul>
 80053aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053ae:	1124      	asrs	r4, r4, #4
 80053b0:	2300      	movs	r3, #0
 80053b2:	2702      	movs	r7, #2
 80053b4:	2c00      	cmp	r4, #0
 80053b6:	f040 8084 	bne.w	80054c2 <_dtoa_r+0x4da>
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1d2      	bne.n	8005364 <_dtoa_r+0x37c>
 80053be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 808b 	beq.w	80054dc <_dtoa_r+0x4f4>
 80053c6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80053ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80053ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053d2:	4b70      	ldr	r3, [pc, #448]	; (8005594 <_dtoa_r+0x5ac>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	f7fb fb89 	bl	8000aec <__aeabi_dcmplt>
 80053da:	2800      	cmp	r0, #0
 80053dc:	d07e      	beq.n	80054dc <_dtoa_r+0x4f4>
 80053de:	9b08      	ldr	r3, [sp, #32]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d07b      	beq.n	80054dc <_dtoa_r+0x4f4>
 80053e4:	f1b9 0f00 	cmp.w	r9, #0
 80053e8:	dd38      	ble.n	800545c <_dtoa_r+0x474>
 80053ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053ee:	4b6a      	ldr	r3, [pc, #424]	; (8005598 <_dtoa_r+0x5b0>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	f7fb f909 	bl	8000608 <__aeabi_dmul>
 80053f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053fa:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 80053fe:	3701      	adds	r7, #1
 8005400:	464c      	mov	r4, r9
 8005402:	4638      	mov	r0, r7
 8005404:	f7fb f896 	bl	8000534 <__aeabi_i2d>
 8005408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800540c:	f7fb f8fc 	bl	8000608 <__aeabi_dmul>
 8005410:	4b62      	ldr	r3, [pc, #392]	; (800559c <_dtoa_r+0x5b4>)
 8005412:	2200      	movs	r2, #0
 8005414:	f7fa ff42 	bl	800029c <__adddf3>
 8005418:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800541c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005420:	9611      	str	r6, [sp, #68]	; 0x44
 8005422:	2c00      	cmp	r4, #0
 8005424:	d15d      	bne.n	80054e2 <_dtoa_r+0x4fa>
 8005426:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800542a:	4b5d      	ldr	r3, [pc, #372]	; (80055a0 <_dtoa_r+0x5b8>)
 800542c:	2200      	movs	r2, #0
 800542e:	f7fa ff33 	bl	8000298 <__aeabi_dsub>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800543a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800543c:	4633      	mov	r3, r6
 800543e:	f7fb fb73 	bl	8000b28 <__aeabi_dcmpgt>
 8005442:	2800      	cmp	r0, #0
 8005444:	f040 829c 	bne.w	8005980 <_dtoa_r+0x998>
 8005448:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800544c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800544e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005452:	f7fb fb4b 	bl	8000aec <__aeabi_dcmplt>
 8005456:	2800      	cmp	r0, #0
 8005458:	f040 8290 	bne.w	800597c <_dtoa_r+0x994>
 800545c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005460:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005464:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005466:	2b00      	cmp	r3, #0
 8005468:	f2c0 8152 	blt.w	8005710 <_dtoa_r+0x728>
 800546c:	f1ba 0f0e 	cmp.w	sl, #14
 8005470:	f300 814e 	bgt.w	8005710 <_dtoa_r+0x728>
 8005474:	4b45      	ldr	r3, [pc, #276]	; (800558c <_dtoa_r+0x5a4>)
 8005476:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800547a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800547e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005482:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005484:	2b00      	cmp	r3, #0
 8005486:	f280 80db 	bge.w	8005640 <_dtoa_r+0x658>
 800548a:	9b08      	ldr	r3, [sp, #32]
 800548c:	2b00      	cmp	r3, #0
 800548e:	f300 80d7 	bgt.w	8005640 <_dtoa_r+0x658>
 8005492:	f040 8272 	bne.w	800597a <_dtoa_r+0x992>
 8005496:	4b42      	ldr	r3, [pc, #264]	; (80055a0 <_dtoa_r+0x5b8>)
 8005498:	2200      	movs	r2, #0
 800549a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800549e:	f7fb f8b3 	bl	8000608 <__aeabi_dmul>
 80054a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054a6:	f7fb fb35 	bl	8000b14 <__aeabi_dcmpge>
 80054aa:	9c08      	ldr	r4, [sp, #32]
 80054ac:	4626      	mov	r6, r4
 80054ae:	2800      	cmp	r0, #0
 80054b0:	f040 8248 	bne.w	8005944 <_dtoa_r+0x95c>
 80054b4:	9f03      	ldr	r7, [sp, #12]
 80054b6:	2331      	movs	r3, #49	; 0x31
 80054b8:	f807 3b01 	strb.w	r3, [r7], #1
 80054bc:	f10a 0a01 	add.w	sl, sl, #1
 80054c0:	e244      	b.n	800594c <_dtoa_r+0x964>
 80054c2:	07e2      	lsls	r2, r4, #31
 80054c4:	d505      	bpl.n	80054d2 <_dtoa_r+0x4ea>
 80054c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80054ca:	f7fb f89d 	bl	8000608 <__aeabi_dmul>
 80054ce:	3701      	adds	r7, #1
 80054d0:	2301      	movs	r3, #1
 80054d2:	1064      	asrs	r4, r4, #1
 80054d4:	3608      	adds	r6, #8
 80054d6:	e76d      	b.n	80053b4 <_dtoa_r+0x3cc>
 80054d8:	2702      	movs	r7, #2
 80054da:	e770      	b.n	80053be <_dtoa_r+0x3d6>
 80054dc:	9c08      	ldr	r4, [sp, #32]
 80054de:	46d0      	mov	r8, sl
 80054e0:	e78f      	b.n	8005402 <_dtoa_r+0x41a>
 80054e2:	9903      	ldr	r1, [sp, #12]
 80054e4:	4b29      	ldr	r3, [pc, #164]	; (800558c <_dtoa_r+0x5a4>)
 80054e6:	4421      	add	r1, r4
 80054e8:	9112      	str	r1, [sp, #72]	; 0x48
 80054ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80054f0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80054f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80054f8:	2900      	cmp	r1, #0
 80054fa:	d055      	beq.n	80055a8 <_dtoa_r+0x5c0>
 80054fc:	4929      	ldr	r1, [pc, #164]	; (80055a4 <_dtoa_r+0x5bc>)
 80054fe:	2000      	movs	r0, #0
 8005500:	f7fb f9ac 	bl	800085c <__aeabi_ddiv>
 8005504:	463b      	mov	r3, r7
 8005506:	4632      	mov	r2, r6
 8005508:	f7fa fec6 	bl	8000298 <__aeabi_dsub>
 800550c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005510:	9f03      	ldr	r7, [sp, #12]
 8005512:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005516:	f7fb fb27 	bl	8000b68 <__aeabi_d2iz>
 800551a:	4604      	mov	r4, r0
 800551c:	f7fb f80a 	bl	8000534 <__aeabi_i2d>
 8005520:	4602      	mov	r2, r0
 8005522:	460b      	mov	r3, r1
 8005524:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005528:	f7fa feb6 	bl	8000298 <__aeabi_dsub>
 800552c:	3430      	adds	r4, #48	; 0x30
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005536:	f807 4b01 	strb.w	r4, [r7], #1
 800553a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800553e:	f7fb fad5 	bl	8000aec <__aeabi_dcmplt>
 8005542:	2800      	cmp	r0, #0
 8005544:	d174      	bne.n	8005630 <_dtoa_r+0x648>
 8005546:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800554a:	4912      	ldr	r1, [pc, #72]	; (8005594 <_dtoa_r+0x5ac>)
 800554c:	2000      	movs	r0, #0
 800554e:	f7fa fea3 	bl	8000298 <__aeabi_dsub>
 8005552:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005556:	f7fb fac9 	bl	8000aec <__aeabi_dcmplt>
 800555a:	2800      	cmp	r0, #0
 800555c:	f040 80b7 	bne.w	80056ce <_dtoa_r+0x6e6>
 8005560:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005562:	429f      	cmp	r7, r3
 8005564:	f43f af7a 	beq.w	800545c <_dtoa_r+0x474>
 8005568:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800556c:	4b0a      	ldr	r3, [pc, #40]	; (8005598 <_dtoa_r+0x5b0>)
 800556e:	2200      	movs	r2, #0
 8005570:	f7fb f84a 	bl	8000608 <__aeabi_dmul>
 8005574:	4b08      	ldr	r3, [pc, #32]	; (8005598 <_dtoa_r+0x5b0>)
 8005576:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800557a:	2200      	movs	r2, #0
 800557c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005580:	f7fb f842 	bl	8000608 <__aeabi_dmul>
 8005584:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005588:	e7c3      	b.n	8005512 <_dtoa_r+0x52a>
 800558a:	bf00      	nop
 800558c:	080081e0 	.word	0x080081e0
 8005590:	080081b8 	.word	0x080081b8
 8005594:	3ff00000 	.word	0x3ff00000
 8005598:	40240000 	.word	0x40240000
 800559c:	401c0000 	.word	0x401c0000
 80055a0:	40140000 	.word	0x40140000
 80055a4:	3fe00000 	.word	0x3fe00000
 80055a8:	4630      	mov	r0, r6
 80055aa:	4639      	mov	r1, r7
 80055ac:	f7fb f82c 	bl	8000608 <__aeabi_dmul>
 80055b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80055b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055b6:	9c03      	ldr	r4, [sp, #12]
 80055b8:	9314      	str	r3, [sp, #80]	; 0x50
 80055ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055be:	f7fb fad3 	bl	8000b68 <__aeabi_d2iz>
 80055c2:	9015      	str	r0, [sp, #84]	; 0x54
 80055c4:	f7fa ffb6 	bl	8000534 <__aeabi_i2d>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055d0:	f7fa fe62 	bl	8000298 <__aeabi_dsub>
 80055d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055d6:	3330      	adds	r3, #48	; 0x30
 80055d8:	f804 3b01 	strb.w	r3, [r4], #1
 80055dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055de:	429c      	cmp	r4, r3
 80055e0:	4606      	mov	r6, r0
 80055e2:	460f      	mov	r7, r1
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	d124      	bne.n	8005634 <_dtoa_r+0x64c>
 80055ea:	4ba4      	ldr	r3, [pc, #656]	; (800587c <_dtoa_r+0x894>)
 80055ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055f0:	f7fa fe54 	bl	800029c <__adddf3>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	4630      	mov	r0, r6
 80055fa:	4639      	mov	r1, r7
 80055fc:	f7fb fa94 	bl	8000b28 <__aeabi_dcmpgt>
 8005600:	2800      	cmp	r0, #0
 8005602:	d163      	bne.n	80056cc <_dtoa_r+0x6e4>
 8005604:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005608:	499c      	ldr	r1, [pc, #624]	; (800587c <_dtoa_r+0x894>)
 800560a:	2000      	movs	r0, #0
 800560c:	f7fa fe44 	bl	8000298 <__aeabi_dsub>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	4630      	mov	r0, r6
 8005616:	4639      	mov	r1, r7
 8005618:	f7fb fa68 	bl	8000aec <__aeabi_dcmplt>
 800561c:	2800      	cmp	r0, #0
 800561e:	f43f af1d 	beq.w	800545c <_dtoa_r+0x474>
 8005622:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005624:	1e7b      	subs	r3, r7, #1
 8005626:	9314      	str	r3, [sp, #80]	; 0x50
 8005628:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800562c:	2b30      	cmp	r3, #48	; 0x30
 800562e:	d0f8      	beq.n	8005622 <_dtoa_r+0x63a>
 8005630:	46c2      	mov	sl, r8
 8005632:	e03b      	b.n	80056ac <_dtoa_r+0x6c4>
 8005634:	4b92      	ldr	r3, [pc, #584]	; (8005880 <_dtoa_r+0x898>)
 8005636:	f7fa ffe7 	bl	8000608 <__aeabi_dmul>
 800563a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800563e:	e7bc      	b.n	80055ba <_dtoa_r+0x5d2>
 8005640:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005644:	9f03      	ldr	r7, [sp, #12]
 8005646:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800564a:	4640      	mov	r0, r8
 800564c:	4649      	mov	r1, r9
 800564e:	f7fb f905 	bl	800085c <__aeabi_ddiv>
 8005652:	f7fb fa89 	bl	8000b68 <__aeabi_d2iz>
 8005656:	4604      	mov	r4, r0
 8005658:	f7fa ff6c 	bl	8000534 <__aeabi_i2d>
 800565c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005660:	f7fa ffd2 	bl	8000608 <__aeabi_dmul>
 8005664:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4640      	mov	r0, r8
 800566e:	4649      	mov	r1, r9
 8005670:	f7fa fe12 	bl	8000298 <__aeabi_dsub>
 8005674:	f807 6b01 	strb.w	r6, [r7], #1
 8005678:	9e03      	ldr	r6, [sp, #12]
 800567a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800567e:	1bbe      	subs	r6, r7, r6
 8005680:	45b4      	cmp	ip, r6
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	d136      	bne.n	80056f6 <_dtoa_r+0x70e>
 8005688:	f7fa fe08 	bl	800029c <__adddf3>
 800568c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005690:	4680      	mov	r8, r0
 8005692:	4689      	mov	r9, r1
 8005694:	f7fb fa48 	bl	8000b28 <__aeabi_dcmpgt>
 8005698:	bb58      	cbnz	r0, 80056f2 <_dtoa_r+0x70a>
 800569a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800569e:	4640      	mov	r0, r8
 80056a0:	4649      	mov	r1, r9
 80056a2:	f7fb fa19 	bl	8000ad8 <__aeabi_dcmpeq>
 80056a6:	b108      	cbz	r0, 80056ac <_dtoa_r+0x6c4>
 80056a8:	07e1      	lsls	r1, r4, #31
 80056aa:	d422      	bmi.n	80056f2 <_dtoa_r+0x70a>
 80056ac:	4628      	mov	r0, r5
 80056ae:	4659      	mov	r1, fp
 80056b0:	f000 fe60 	bl	8006374 <_Bfree>
 80056b4:	2300      	movs	r3, #0
 80056b6:	703b      	strb	r3, [r7, #0]
 80056b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80056ba:	f10a 0001 	add.w	r0, sl, #1
 80056be:	6018      	str	r0, [r3, #0]
 80056c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f43f acdd 	beq.w	8005082 <_dtoa_r+0x9a>
 80056c8:	601f      	str	r7, [r3, #0]
 80056ca:	e4da      	b.n	8005082 <_dtoa_r+0x9a>
 80056cc:	4627      	mov	r7, r4
 80056ce:	463b      	mov	r3, r7
 80056d0:	461f      	mov	r7, r3
 80056d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056d6:	2a39      	cmp	r2, #57	; 0x39
 80056d8:	d107      	bne.n	80056ea <_dtoa_r+0x702>
 80056da:	9a03      	ldr	r2, [sp, #12]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d1f7      	bne.n	80056d0 <_dtoa_r+0x6e8>
 80056e0:	9903      	ldr	r1, [sp, #12]
 80056e2:	2230      	movs	r2, #48	; 0x30
 80056e4:	f108 0801 	add.w	r8, r8, #1
 80056e8:	700a      	strb	r2, [r1, #0]
 80056ea:	781a      	ldrb	r2, [r3, #0]
 80056ec:	3201      	adds	r2, #1
 80056ee:	701a      	strb	r2, [r3, #0]
 80056f0:	e79e      	b.n	8005630 <_dtoa_r+0x648>
 80056f2:	46d0      	mov	r8, sl
 80056f4:	e7eb      	b.n	80056ce <_dtoa_r+0x6e6>
 80056f6:	4b62      	ldr	r3, [pc, #392]	; (8005880 <_dtoa_r+0x898>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	f7fa ff85 	bl	8000608 <__aeabi_dmul>
 80056fe:	2200      	movs	r2, #0
 8005700:	2300      	movs	r3, #0
 8005702:	4680      	mov	r8, r0
 8005704:	4689      	mov	r9, r1
 8005706:	f7fb f9e7 	bl	8000ad8 <__aeabi_dcmpeq>
 800570a:	2800      	cmp	r0, #0
 800570c:	d09b      	beq.n	8005646 <_dtoa_r+0x65e>
 800570e:	e7cd      	b.n	80056ac <_dtoa_r+0x6c4>
 8005710:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005712:	2a00      	cmp	r2, #0
 8005714:	f000 80d0 	beq.w	80058b8 <_dtoa_r+0x8d0>
 8005718:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800571a:	2a01      	cmp	r2, #1
 800571c:	f300 80b2 	bgt.w	8005884 <_dtoa_r+0x89c>
 8005720:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005722:	2a00      	cmp	r2, #0
 8005724:	f000 80a6 	beq.w	8005874 <_dtoa_r+0x88c>
 8005728:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800572c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800572e:	9f06      	ldr	r7, [sp, #24]
 8005730:	9a06      	ldr	r2, [sp, #24]
 8005732:	441a      	add	r2, r3
 8005734:	9206      	str	r2, [sp, #24]
 8005736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005738:	2101      	movs	r1, #1
 800573a:	441a      	add	r2, r3
 800573c:	4628      	mov	r0, r5
 800573e:	9209      	str	r2, [sp, #36]	; 0x24
 8005740:	f000 ff18 	bl	8006574 <__i2b>
 8005744:	4606      	mov	r6, r0
 8005746:	2f00      	cmp	r7, #0
 8005748:	dd0c      	ble.n	8005764 <_dtoa_r+0x77c>
 800574a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800574c:	2b00      	cmp	r3, #0
 800574e:	dd09      	ble.n	8005764 <_dtoa_r+0x77c>
 8005750:	42bb      	cmp	r3, r7
 8005752:	9a06      	ldr	r2, [sp, #24]
 8005754:	bfa8      	it	ge
 8005756:	463b      	movge	r3, r7
 8005758:	1ad2      	subs	r2, r2, r3
 800575a:	9206      	str	r2, [sp, #24]
 800575c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800575e:	1aff      	subs	r7, r7, r3
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	9309      	str	r3, [sp, #36]	; 0x24
 8005764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005766:	b1f3      	cbz	r3, 80057a6 <_dtoa_r+0x7be>
 8005768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 80a8 	beq.w	80058c0 <_dtoa_r+0x8d8>
 8005770:	2c00      	cmp	r4, #0
 8005772:	dd10      	ble.n	8005796 <_dtoa_r+0x7ae>
 8005774:	4631      	mov	r1, r6
 8005776:	4622      	mov	r2, r4
 8005778:	4628      	mov	r0, r5
 800577a:	f000 ffb9 	bl	80066f0 <__pow5mult>
 800577e:	465a      	mov	r2, fp
 8005780:	4601      	mov	r1, r0
 8005782:	4606      	mov	r6, r0
 8005784:	4628      	mov	r0, r5
 8005786:	f000 ff0b 	bl	80065a0 <__multiply>
 800578a:	4659      	mov	r1, fp
 800578c:	4680      	mov	r8, r0
 800578e:	4628      	mov	r0, r5
 8005790:	f000 fdf0 	bl	8006374 <_Bfree>
 8005794:	46c3      	mov	fp, r8
 8005796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005798:	1b1a      	subs	r2, r3, r4
 800579a:	d004      	beq.n	80057a6 <_dtoa_r+0x7be>
 800579c:	4659      	mov	r1, fp
 800579e:	4628      	mov	r0, r5
 80057a0:	f000 ffa6 	bl	80066f0 <__pow5mult>
 80057a4:	4683      	mov	fp, r0
 80057a6:	2101      	movs	r1, #1
 80057a8:	4628      	mov	r0, r5
 80057aa:	f000 fee3 	bl	8006574 <__i2b>
 80057ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	4604      	mov	r4, r0
 80057b4:	f340 8086 	ble.w	80058c4 <_dtoa_r+0x8dc>
 80057b8:	461a      	mov	r2, r3
 80057ba:	4601      	mov	r1, r0
 80057bc:	4628      	mov	r0, r5
 80057be:	f000 ff97 	bl	80066f0 <__pow5mult>
 80057c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	4604      	mov	r4, r0
 80057c8:	dd7f      	ble.n	80058ca <_dtoa_r+0x8e2>
 80057ca:	f04f 0800 	mov.w	r8, #0
 80057ce:	6923      	ldr	r3, [r4, #16]
 80057d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80057d4:	6918      	ldr	r0, [r3, #16]
 80057d6:	f000 fe7f 	bl	80064d8 <__hi0bits>
 80057da:	f1c0 0020 	rsb	r0, r0, #32
 80057de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057e0:	4418      	add	r0, r3
 80057e2:	f010 001f 	ands.w	r0, r0, #31
 80057e6:	f000 8092 	beq.w	800590e <_dtoa_r+0x926>
 80057ea:	f1c0 0320 	rsb	r3, r0, #32
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	f340 808a 	ble.w	8005908 <_dtoa_r+0x920>
 80057f4:	f1c0 001c 	rsb	r0, r0, #28
 80057f8:	9b06      	ldr	r3, [sp, #24]
 80057fa:	4403      	add	r3, r0
 80057fc:	9306      	str	r3, [sp, #24]
 80057fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005800:	4403      	add	r3, r0
 8005802:	4407      	add	r7, r0
 8005804:	9309      	str	r3, [sp, #36]	; 0x24
 8005806:	9b06      	ldr	r3, [sp, #24]
 8005808:	2b00      	cmp	r3, #0
 800580a:	dd05      	ble.n	8005818 <_dtoa_r+0x830>
 800580c:	4659      	mov	r1, fp
 800580e:	461a      	mov	r2, r3
 8005810:	4628      	mov	r0, r5
 8005812:	f000 ffc7 	bl	80067a4 <__lshift>
 8005816:	4683      	mov	fp, r0
 8005818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800581a:	2b00      	cmp	r3, #0
 800581c:	dd05      	ble.n	800582a <_dtoa_r+0x842>
 800581e:	4621      	mov	r1, r4
 8005820:	461a      	mov	r2, r3
 8005822:	4628      	mov	r0, r5
 8005824:	f000 ffbe 	bl	80067a4 <__lshift>
 8005828:	4604      	mov	r4, r0
 800582a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800582c:	2b00      	cmp	r3, #0
 800582e:	d070      	beq.n	8005912 <_dtoa_r+0x92a>
 8005830:	4621      	mov	r1, r4
 8005832:	4658      	mov	r0, fp
 8005834:	f001 f826 	bl	8006884 <__mcmp>
 8005838:	2800      	cmp	r0, #0
 800583a:	da6a      	bge.n	8005912 <_dtoa_r+0x92a>
 800583c:	2300      	movs	r3, #0
 800583e:	4659      	mov	r1, fp
 8005840:	220a      	movs	r2, #10
 8005842:	4628      	mov	r0, r5
 8005844:	f000 fdb8 	bl	80063b8 <__multadd>
 8005848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800584a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800584e:	4683      	mov	fp, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 8194 	beq.w	8005b7e <_dtoa_r+0xb96>
 8005856:	4631      	mov	r1, r6
 8005858:	2300      	movs	r3, #0
 800585a:	220a      	movs	r2, #10
 800585c:	4628      	mov	r0, r5
 800585e:	f000 fdab 	bl	80063b8 <__multadd>
 8005862:	f1b9 0f00 	cmp.w	r9, #0
 8005866:	4606      	mov	r6, r0
 8005868:	f300 8093 	bgt.w	8005992 <_dtoa_r+0x9aa>
 800586c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800586e:	2b02      	cmp	r3, #2
 8005870:	dc57      	bgt.n	8005922 <_dtoa_r+0x93a>
 8005872:	e08e      	b.n	8005992 <_dtoa_r+0x9aa>
 8005874:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005876:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800587a:	e757      	b.n	800572c <_dtoa_r+0x744>
 800587c:	3fe00000 	.word	0x3fe00000
 8005880:	40240000 	.word	0x40240000
 8005884:	9b08      	ldr	r3, [sp, #32]
 8005886:	1e5c      	subs	r4, r3, #1
 8005888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800588a:	42a3      	cmp	r3, r4
 800588c:	bfbf      	itttt	lt
 800588e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005890:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005892:	1ae2      	sublt	r2, r4, r3
 8005894:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005896:	bfb6      	itet	lt
 8005898:	189b      	addlt	r3, r3, r2
 800589a:	1b1c      	subge	r4, r3, r4
 800589c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800589e:	9b08      	ldr	r3, [sp, #32]
 80058a0:	bfb8      	it	lt
 80058a2:	2400      	movlt	r4, #0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	bfb9      	ittee	lt
 80058a8:	9b06      	ldrlt	r3, [sp, #24]
 80058aa:	9a08      	ldrlt	r2, [sp, #32]
 80058ac:	9f06      	ldrge	r7, [sp, #24]
 80058ae:	9b08      	ldrge	r3, [sp, #32]
 80058b0:	bfbc      	itt	lt
 80058b2:	1a9f      	sublt	r7, r3, r2
 80058b4:	2300      	movlt	r3, #0
 80058b6:	e73b      	b.n	8005730 <_dtoa_r+0x748>
 80058b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80058ba:	9f06      	ldr	r7, [sp, #24]
 80058bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80058be:	e742      	b.n	8005746 <_dtoa_r+0x75e>
 80058c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058c2:	e76b      	b.n	800579c <_dtoa_r+0x7b4>
 80058c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	dc19      	bgt.n	80058fe <_dtoa_r+0x916>
 80058ca:	9b04      	ldr	r3, [sp, #16]
 80058cc:	b9bb      	cbnz	r3, 80058fe <_dtoa_r+0x916>
 80058ce:	9b05      	ldr	r3, [sp, #20]
 80058d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058d4:	b99b      	cbnz	r3, 80058fe <_dtoa_r+0x916>
 80058d6:	9b05      	ldr	r3, [sp, #20]
 80058d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058dc:	0d1b      	lsrs	r3, r3, #20
 80058de:	051b      	lsls	r3, r3, #20
 80058e0:	b183      	cbz	r3, 8005904 <_dtoa_r+0x91c>
 80058e2:	9b06      	ldr	r3, [sp, #24]
 80058e4:	3301      	adds	r3, #1
 80058e6:	9306      	str	r3, [sp, #24]
 80058e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ea:	3301      	adds	r3, #1
 80058ec:	9309      	str	r3, [sp, #36]	; 0x24
 80058ee:	f04f 0801 	mov.w	r8, #1
 80058f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f47f af6a 	bne.w	80057ce <_dtoa_r+0x7e6>
 80058fa:	2001      	movs	r0, #1
 80058fc:	e76f      	b.n	80057de <_dtoa_r+0x7f6>
 80058fe:	f04f 0800 	mov.w	r8, #0
 8005902:	e7f6      	b.n	80058f2 <_dtoa_r+0x90a>
 8005904:	4698      	mov	r8, r3
 8005906:	e7f4      	b.n	80058f2 <_dtoa_r+0x90a>
 8005908:	f43f af7d 	beq.w	8005806 <_dtoa_r+0x81e>
 800590c:	4618      	mov	r0, r3
 800590e:	301c      	adds	r0, #28
 8005910:	e772      	b.n	80057f8 <_dtoa_r+0x810>
 8005912:	9b08      	ldr	r3, [sp, #32]
 8005914:	2b00      	cmp	r3, #0
 8005916:	dc36      	bgt.n	8005986 <_dtoa_r+0x99e>
 8005918:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800591a:	2b02      	cmp	r3, #2
 800591c:	dd33      	ble.n	8005986 <_dtoa_r+0x99e>
 800591e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005922:	f1b9 0f00 	cmp.w	r9, #0
 8005926:	d10d      	bne.n	8005944 <_dtoa_r+0x95c>
 8005928:	4621      	mov	r1, r4
 800592a:	464b      	mov	r3, r9
 800592c:	2205      	movs	r2, #5
 800592e:	4628      	mov	r0, r5
 8005930:	f000 fd42 	bl	80063b8 <__multadd>
 8005934:	4601      	mov	r1, r0
 8005936:	4604      	mov	r4, r0
 8005938:	4658      	mov	r0, fp
 800593a:	f000 ffa3 	bl	8006884 <__mcmp>
 800593e:	2800      	cmp	r0, #0
 8005940:	f73f adb8 	bgt.w	80054b4 <_dtoa_r+0x4cc>
 8005944:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005946:	9f03      	ldr	r7, [sp, #12]
 8005948:	ea6f 0a03 	mvn.w	sl, r3
 800594c:	f04f 0800 	mov.w	r8, #0
 8005950:	4621      	mov	r1, r4
 8005952:	4628      	mov	r0, r5
 8005954:	f000 fd0e 	bl	8006374 <_Bfree>
 8005958:	2e00      	cmp	r6, #0
 800595a:	f43f aea7 	beq.w	80056ac <_dtoa_r+0x6c4>
 800595e:	f1b8 0f00 	cmp.w	r8, #0
 8005962:	d005      	beq.n	8005970 <_dtoa_r+0x988>
 8005964:	45b0      	cmp	r8, r6
 8005966:	d003      	beq.n	8005970 <_dtoa_r+0x988>
 8005968:	4641      	mov	r1, r8
 800596a:	4628      	mov	r0, r5
 800596c:	f000 fd02 	bl	8006374 <_Bfree>
 8005970:	4631      	mov	r1, r6
 8005972:	4628      	mov	r0, r5
 8005974:	f000 fcfe 	bl	8006374 <_Bfree>
 8005978:	e698      	b.n	80056ac <_dtoa_r+0x6c4>
 800597a:	2400      	movs	r4, #0
 800597c:	4626      	mov	r6, r4
 800597e:	e7e1      	b.n	8005944 <_dtoa_r+0x95c>
 8005980:	46c2      	mov	sl, r8
 8005982:	4626      	mov	r6, r4
 8005984:	e596      	b.n	80054b4 <_dtoa_r+0x4cc>
 8005986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005988:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 80fd 	beq.w	8005b8c <_dtoa_r+0xba4>
 8005992:	2f00      	cmp	r7, #0
 8005994:	dd05      	ble.n	80059a2 <_dtoa_r+0x9ba>
 8005996:	4631      	mov	r1, r6
 8005998:	463a      	mov	r2, r7
 800599a:	4628      	mov	r0, r5
 800599c:	f000 ff02 	bl	80067a4 <__lshift>
 80059a0:	4606      	mov	r6, r0
 80059a2:	f1b8 0f00 	cmp.w	r8, #0
 80059a6:	d05c      	beq.n	8005a62 <_dtoa_r+0xa7a>
 80059a8:	6871      	ldr	r1, [r6, #4]
 80059aa:	4628      	mov	r0, r5
 80059ac:	f000 fca2 	bl	80062f4 <_Balloc>
 80059b0:	4607      	mov	r7, r0
 80059b2:	b928      	cbnz	r0, 80059c0 <_dtoa_r+0x9d8>
 80059b4:	4b80      	ldr	r3, [pc, #512]	; (8005bb8 <_dtoa_r+0xbd0>)
 80059b6:	4602      	mov	r2, r0
 80059b8:	f240 21ea 	movw	r1, #746	; 0x2ea
 80059bc:	f7ff bb28 	b.w	8005010 <_dtoa_r+0x28>
 80059c0:	6932      	ldr	r2, [r6, #16]
 80059c2:	3202      	adds	r2, #2
 80059c4:	0092      	lsls	r2, r2, #2
 80059c6:	f106 010c 	add.w	r1, r6, #12
 80059ca:	300c      	adds	r0, #12
 80059cc:	f000 fc84 	bl	80062d8 <memcpy>
 80059d0:	2201      	movs	r2, #1
 80059d2:	4639      	mov	r1, r7
 80059d4:	4628      	mov	r0, r5
 80059d6:	f000 fee5 	bl	80067a4 <__lshift>
 80059da:	9b03      	ldr	r3, [sp, #12]
 80059dc:	3301      	adds	r3, #1
 80059de:	9308      	str	r3, [sp, #32]
 80059e0:	9b03      	ldr	r3, [sp, #12]
 80059e2:	444b      	add	r3, r9
 80059e4:	930a      	str	r3, [sp, #40]	; 0x28
 80059e6:	9b04      	ldr	r3, [sp, #16]
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	46b0      	mov	r8, r6
 80059ee:	9309      	str	r3, [sp, #36]	; 0x24
 80059f0:	4606      	mov	r6, r0
 80059f2:	9b08      	ldr	r3, [sp, #32]
 80059f4:	4621      	mov	r1, r4
 80059f6:	3b01      	subs	r3, #1
 80059f8:	4658      	mov	r0, fp
 80059fa:	9304      	str	r3, [sp, #16]
 80059fc:	f7ff fa6c 	bl	8004ed8 <quorem>
 8005a00:	4603      	mov	r3, r0
 8005a02:	3330      	adds	r3, #48	; 0x30
 8005a04:	9006      	str	r0, [sp, #24]
 8005a06:	4641      	mov	r1, r8
 8005a08:	4658      	mov	r0, fp
 8005a0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a0c:	f000 ff3a 	bl	8006884 <__mcmp>
 8005a10:	4632      	mov	r2, r6
 8005a12:	4681      	mov	r9, r0
 8005a14:	4621      	mov	r1, r4
 8005a16:	4628      	mov	r0, r5
 8005a18:	f000 ff50 	bl	80068bc <__mdiff>
 8005a1c:	68c2      	ldr	r2, [r0, #12]
 8005a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a20:	4607      	mov	r7, r0
 8005a22:	bb02      	cbnz	r2, 8005a66 <_dtoa_r+0xa7e>
 8005a24:	4601      	mov	r1, r0
 8005a26:	4658      	mov	r0, fp
 8005a28:	f000 ff2c 	bl	8006884 <__mcmp>
 8005a2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a2e:	4602      	mov	r2, r0
 8005a30:	4639      	mov	r1, r7
 8005a32:	4628      	mov	r0, r5
 8005a34:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005a38:	f000 fc9c 	bl	8006374 <_Bfree>
 8005a3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a40:	9f08      	ldr	r7, [sp, #32]
 8005a42:	ea43 0102 	orr.w	r1, r3, r2
 8005a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a48:	430b      	orrs	r3, r1
 8005a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a4c:	d10d      	bne.n	8005a6a <_dtoa_r+0xa82>
 8005a4e:	2b39      	cmp	r3, #57	; 0x39
 8005a50:	d029      	beq.n	8005aa6 <_dtoa_r+0xabe>
 8005a52:	f1b9 0f00 	cmp.w	r9, #0
 8005a56:	dd01      	ble.n	8005a5c <_dtoa_r+0xa74>
 8005a58:	9b06      	ldr	r3, [sp, #24]
 8005a5a:	3331      	adds	r3, #49	; 0x31
 8005a5c:	9a04      	ldr	r2, [sp, #16]
 8005a5e:	7013      	strb	r3, [r2, #0]
 8005a60:	e776      	b.n	8005950 <_dtoa_r+0x968>
 8005a62:	4630      	mov	r0, r6
 8005a64:	e7b9      	b.n	80059da <_dtoa_r+0x9f2>
 8005a66:	2201      	movs	r2, #1
 8005a68:	e7e2      	b.n	8005a30 <_dtoa_r+0xa48>
 8005a6a:	f1b9 0f00 	cmp.w	r9, #0
 8005a6e:	db06      	blt.n	8005a7e <_dtoa_r+0xa96>
 8005a70:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005a72:	ea41 0909 	orr.w	r9, r1, r9
 8005a76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a78:	ea59 0101 	orrs.w	r1, r9, r1
 8005a7c:	d120      	bne.n	8005ac0 <_dtoa_r+0xad8>
 8005a7e:	2a00      	cmp	r2, #0
 8005a80:	ddec      	ble.n	8005a5c <_dtoa_r+0xa74>
 8005a82:	4659      	mov	r1, fp
 8005a84:	2201      	movs	r2, #1
 8005a86:	4628      	mov	r0, r5
 8005a88:	9308      	str	r3, [sp, #32]
 8005a8a:	f000 fe8b 	bl	80067a4 <__lshift>
 8005a8e:	4621      	mov	r1, r4
 8005a90:	4683      	mov	fp, r0
 8005a92:	f000 fef7 	bl	8006884 <__mcmp>
 8005a96:	2800      	cmp	r0, #0
 8005a98:	9b08      	ldr	r3, [sp, #32]
 8005a9a:	dc02      	bgt.n	8005aa2 <_dtoa_r+0xaba>
 8005a9c:	d1de      	bne.n	8005a5c <_dtoa_r+0xa74>
 8005a9e:	07da      	lsls	r2, r3, #31
 8005aa0:	d5dc      	bpl.n	8005a5c <_dtoa_r+0xa74>
 8005aa2:	2b39      	cmp	r3, #57	; 0x39
 8005aa4:	d1d8      	bne.n	8005a58 <_dtoa_r+0xa70>
 8005aa6:	9a04      	ldr	r2, [sp, #16]
 8005aa8:	2339      	movs	r3, #57	; 0x39
 8005aaa:	7013      	strb	r3, [r2, #0]
 8005aac:	463b      	mov	r3, r7
 8005aae:	461f      	mov	r7, r3
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005ab6:	2a39      	cmp	r2, #57	; 0x39
 8005ab8:	d050      	beq.n	8005b5c <_dtoa_r+0xb74>
 8005aba:	3201      	adds	r2, #1
 8005abc:	701a      	strb	r2, [r3, #0]
 8005abe:	e747      	b.n	8005950 <_dtoa_r+0x968>
 8005ac0:	2a00      	cmp	r2, #0
 8005ac2:	dd03      	ble.n	8005acc <_dtoa_r+0xae4>
 8005ac4:	2b39      	cmp	r3, #57	; 0x39
 8005ac6:	d0ee      	beq.n	8005aa6 <_dtoa_r+0xabe>
 8005ac8:	3301      	adds	r3, #1
 8005aca:	e7c7      	b.n	8005a5c <_dtoa_r+0xa74>
 8005acc:	9a08      	ldr	r2, [sp, #32]
 8005ace:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ad0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005ad4:	428a      	cmp	r2, r1
 8005ad6:	d02a      	beq.n	8005b2e <_dtoa_r+0xb46>
 8005ad8:	4659      	mov	r1, fp
 8005ada:	2300      	movs	r3, #0
 8005adc:	220a      	movs	r2, #10
 8005ade:	4628      	mov	r0, r5
 8005ae0:	f000 fc6a 	bl	80063b8 <__multadd>
 8005ae4:	45b0      	cmp	r8, r6
 8005ae6:	4683      	mov	fp, r0
 8005ae8:	f04f 0300 	mov.w	r3, #0
 8005aec:	f04f 020a 	mov.w	r2, #10
 8005af0:	4641      	mov	r1, r8
 8005af2:	4628      	mov	r0, r5
 8005af4:	d107      	bne.n	8005b06 <_dtoa_r+0xb1e>
 8005af6:	f000 fc5f 	bl	80063b8 <__multadd>
 8005afa:	4680      	mov	r8, r0
 8005afc:	4606      	mov	r6, r0
 8005afe:	9b08      	ldr	r3, [sp, #32]
 8005b00:	3301      	adds	r3, #1
 8005b02:	9308      	str	r3, [sp, #32]
 8005b04:	e775      	b.n	80059f2 <_dtoa_r+0xa0a>
 8005b06:	f000 fc57 	bl	80063b8 <__multadd>
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	4680      	mov	r8, r0
 8005b0e:	2300      	movs	r3, #0
 8005b10:	220a      	movs	r2, #10
 8005b12:	4628      	mov	r0, r5
 8005b14:	f000 fc50 	bl	80063b8 <__multadd>
 8005b18:	4606      	mov	r6, r0
 8005b1a:	e7f0      	b.n	8005afe <_dtoa_r+0xb16>
 8005b1c:	f1b9 0f00 	cmp.w	r9, #0
 8005b20:	9a03      	ldr	r2, [sp, #12]
 8005b22:	bfcc      	ite	gt
 8005b24:	464f      	movgt	r7, r9
 8005b26:	2701      	movle	r7, #1
 8005b28:	4417      	add	r7, r2
 8005b2a:	f04f 0800 	mov.w	r8, #0
 8005b2e:	4659      	mov	r1, fp
 8005b30:	2201      	movs	r2, #1
 8005b32:	4628      	mov	r0, r5
 8005b34:	9308      	str	r3, [sp, #32]
 8005b36:	f000 fe35 	bl	80067a4 <__lshift>
 8005b3a:	4621      	mov	r1, r4
 8005b3c:	4683      	mov	fp, r0
 8005b3e:	f000 fea1 	bl	8006884 <__mcmp>
 8005b42:	2800      	cmp	r0, #0
 8005b44:	dcb2      	bgt.n	8005aac <_dtoa_r+0xac4>
 8005b46:	d102      	bne.n	8005b4e <_dtoa_r+0xb66>
 8005b48:	9b08      	ldr	r3, [sp, #32]
 8005b4a:	07db      	lsls	r3, r3, #31
 8005b4c:	d4ae      	bmi.n	8005aac <_dtoa_r+0xac4>
 8005b4e:	463b      	mov	r3, r7
 8005b50:	461f      	mov	r7, r3
 8005b52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b56:	2a30      	cmp	r2, #48	; 0x30
 8005b58:	d0fa      	beq.n	8005b50 <_dtoa_r+0xb68>
 8005b5a:	e6f9      	b.n	8005950 <_dtoa_r+0x968>
 8005b5c:	9a03      	ldr	r2, [sp, #12]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d1a5      	bne.n	8005aae <_dtoa_r+0xac6>
 8005b62:	f10a 0a01 	add.w	sl, sl, #1
 8005b66:	2331      	movs	r3, #49	; 0x31
 8005b68:	e779      	b.n	8005a5e <_dtoa_r+0xa76>
 8005b6a:	4b14      	ldr	r3, [pc, #80]	; (8005bbc <_dtoa_r+0xbd4>)
 8005b6c:	f7ff baa7 	b.w	80050be <_dtoa_r+0xd6>
 8005b70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f47f aa80 	bne.w	8005078 <_dtoa_r+0x90>
 8005b78:	4b11      	ldr	r3, [pc, #68]	; (8005bc0 <_dtoa_r+0xbd8>)
 8005b7a:	f7ff baa0 	b.w	80050be <_dtoa_r+0xd6>
 8005b7e:	f1b9 0f00 	cmp.w	r9, #0
 8005b82:	dc03      	bgt.n	8005b8c <_dtoa_r+0xba4>
 8005b84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	f73f aecb 	bgt.w	8005922 <_dtoa_r+0x93a>
 8005b8c:	9f03      	ldr	r7, [sp, #12]
 8005b8e:	4621      	mov	r1, r4
 8005b90:	4658      	mov	r0, fp
 8005b92:	f7ff f9a1 	bl	8004ed8 <quorem>
 8005b96:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005b9a:	f807 3b01 	strb.w	r3, [r7], #1
 8005b9e:	9a03      	ldr	r2, [sp, #12]
 8005ba0:	1aba      	subs	r2, r7, r2
 8005ba2:	4591      	cmp	r9, r2
 8005ba4:	ddba      	ble.n	8005b1c <_dtoa_r+0xb34>
 8005ba6:	4659      	mov	r1, fp
 8005ba8:	2300      	movs	r3, #0
 8005baa:	220a      	movs	r2, #10
 8005bac:	4628      	mov	r0, r5
 8005bae:	f000 fc03 	bl	80063b8 <__multadd>
 8005bb2:	4683      	mov	fp, r0
 8005bb4:	e7eb      	b.n	8005b8e <_dtoa_r+0xba6>
 8005bb6:	bf00      	nop
 8005bb8:	080080d0 	.word	0x080080d0
 8005bbc:	08007ed4 	.word	0x08007ed4
 8005bc0:	08008051 	.word	0x08008051

08005bc4 <__errno>:
 8005bc4:	4b01      	ldr	r3, [pc, #4]	; (8005bcc <__errno+0x8>)
 8005bc6:	6818      	ldr	r0, [r3, #0]
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	20000044 	.word	0x20000044

08005bd0 <rshift>:
 8005bd0:	6903      	ldr	r3, [r0, #16]
 8005bd2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005bd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bda:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005bde:	f100 0414 	add.w	r4, r0, #20
 8005be2:	dd45      	ble.n	8005c70 <rshift+0xa0>
 8005be4:	f011 011f 	ands.w	r1, r1, #31
 8005be8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005bec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005bf0:	d10c      	bne.n	8005c0c <rshift+0x3c>
 8005bf2:	f100 0710 	add.w	r7, r0, #16
 8005bf6:	4629      	mov	r1, r5
 8005bf8:	42b1      	cmp	r1, r6
 8005bfa:	d334      	bcc.n	8005c66 <rshift+0x96>
 8005bfc:	1a9b      	subs	r3, r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	1eea      	subs	r2, r5, #3
 8005c02:	4296      	cmp	r6, r2
 8005c04:	bf38      	it	cc
 8005c06:	2300      	movcc	r3, #0
 8005c08:	4423      	add	r3, r4
 8005c0a:	e015      	b.n	8005c38 <rshift+0x68>
 8005c0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005c10:	f1c1 0820 	rsb	r8, r1, #32
 8005c14:	40cf      	lsrs	r7, r1
 8005c16:	f105 0e04 	add.w	lr, r5, #4
 8005c1a:	46a1      	mov	r9, r4
 8005c1c:	4576      	cmp	r6, lr
 8005c1e:	46f4      	mov	ip, lr
 8005c20:	d815      	bhi.n	8005c4e <rshift+0x7e>
 8005c22:	1a9a      	subs	r2, r3, r2
 8005c24:	0092      	lsls	r2, r2, #2
 8005c26:	3a04      	subs	r2, #4
 8005c28:	3501      	adds	r5, #1
 8005c2a:	42ae      	cmp	r6, r5
 8005c2c:	bf38      	it	cc
 8005c2e:	2200      	movcc	r2, #0
 8005c30:	18a3      	adds	r3, r4, r2
 8005c32:	50a7      	str	r7, [r4, r2]
 8005c34:	b107      	cbz	r7, 8005c38 <rshift+0x68>
 8005c36:	3304      	adds	r3, #4
 8005c38:	1b1a      	subs	r2, r3, r4
 8005c3a:	42a3      	cmp	r3, r4
 8005c3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005c40:	bf08      	it	eq
 8005c42:	2300      	moveq	r3, #0
 8005c44:	6102      	str	r2, [r0, #16]
 8005c46:	bf08      	it	eq
 8005c48:	6143      	streq	r3, [r0, #20]
 8005c4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c4e:	f8dc c000 	ldr.w	ip, [ip]
 8005c52:	fa0c fc08 	lsl.w	ip, ip, r8
 8005c56:	ea4c 0707 	orr.w	r7, ip, r7
 8005c5a:	f849 7b04 	str.w	r7, [r9], #4
 8005c5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005c62:	40cf      	lsrs	r7, r1
 8005c64:	e7da      	b.n	8005c1c <rshift+0x4c>
 8005c66:	f851 cb04 	ldr.w	ip, [r1], #4
 8005c6a:	f847 cf04 	str.w	ip, [r7, #4]!
 8005c6e:	e7c3      	b.n	8005bf8 <rshift+0x28>
 8005c70:	4623      	mov	r3, r4
 8005c72:	e7e1      	b.n	8005c38 <rshift+0x68>

08005c74 <__hexdig_fun>:
 8005c74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005c78:	2b09      	cmp	r3, #9
 8005c7a:	d802      	bhi.n	8005c82 <__hexdig_fun+0xe>
 8005c7c:	3820      	subs	r0, #32
 8005c7e:	b2c0      	uxtb	r0, r0
 8005c80:	4770      	bx	lr
 8005c82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005c86:	2b05      	cmp	r3, #5
 8005c88:	d801      	bhi.n	8005c8e <__hexdig_fun+0x1a>
 8005c8a:	3847      	subs	r0, #71	; 0x47
 8005c8c:	e7f7      	b.n	8005c7e <__hexdig_fun+0xa>
 8005c8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005c92:	2b05      	cmp	r3, #5
 8005c94:	d801      	bhi.n	8005c9a <__hexdig_fun+0x26>
 8005c96:	3827      	subs	r0, #39	; 0x27
 8005c98:	e7f1      	b.n	8005c7e <__hexdig_fun+0xa>
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	4770      	bx	lr
	...

08005ca0 <__gethex>:
 8005ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca4:	b08b      	sub	sp, #44	; 0x2c
 8005ca6:	468b      	mov	fp, r1
 8005ca8:	9305      	str	r3, [sp, #20]
 8005caa:	4bb2      	ldr	r3, [pc, #712]	; (8005f74 <__gethex+0x2d4>)
 8005cac:	9002      	str	r0, [sp, #8]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	9303      	str	r3, [sp, #12]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	4690      	mov	r8, r2
 8005cb6:	f7fa fa93 	bl	80001e0 <strlen>
 8005cba:	9b03      	ldr	r3, [sp, #12]
 8005cbc:	f8db 2000 	ldr.w	r2, [fp]
 8005cc0:	4403      	add	r3, r0
 8005cc2:	4682      	mov	sl, r0
 8005cc4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005cc8:	9306      	str	r3, [sp, #24]
 8005cca:	1c93      	adds	r3, r2, #2
 8005ccc:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005cd0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005cd4:	32fe      	adds	r2, #254	; 0xfe
 8005cd6:	18d1      	adds	r1, r2, r3
 8005cd8:	461f      	mov	r7, r3
 8005cda:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005cde:	9101      	str	r1, [sp, #4]
 8005ce0:	2830      	cmp	r0, #48	; 0x30
 8005ce2:	d0f8      	beq.n	8005cd6 <__gethex+0x36>
 8005ce4:	f7ff ffc6 	bl	8005c74 <__hexdig_fun>
 8005ce8:	4604      	mov	r4, r0
 8005cea:	2800      	cmp	r0, #0
 8005cec:	d13a      	bne.n	8005d64 <__gethex+0xc4>
 8005cee:	9903      	ldr	r1, [sp, #12]
 8005cf0:	4652      	mov	r2, sl
 8005cf2:	4638      	mov	r0, r7
 8005cf4:	f001 fa16 	bl	8007124 <strncmp>
 8005cf8:	4605      	mov	r5, r0
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	d166      	bne.n	8005dcc <__gethex+0x12c>
 8005cfe:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005d02:	eb07 060a 	add.w	r6, r7, sl
 8005d06:	f7ff ffb5 	bl	8005c74 <__hexdig_fun>
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	d060      	beq.n	8005dd0 <__gethex+0x130>
 8005d0e:	4633      	mov	r3, r6
 8005d10:	7818      	ldrb	r0, [r3, #0]
 8005d12:	2830      	cmp	r0, #48	; 0x30
 8005d14:	461f      	mov	r7, r3
 8005d16:	f103 0301 	add.w	r3, r3, #1
 8005d1a:	d0f9      	beq.n	8005d10 <__gethex+0x70>
 8005d1c:	f7ff ffaa 	bl	8005c74 <__hexdig_fun>
 8005d20:	2301      	movs	r3, #1
 8005d22:	fab0 f480 	clz	r4, r0
 8005d26:	0964      	lsrs	r4, r4, #5
 8005d28:	4635      	mov	r5, r6
 8005d2a:	9301      	str	r3, [sp, #4]
 8005d2c:	463a      	mov	r2, r7
 8005d2e:	4616      	mov	r6, r2
 8005d30:	3201      	adds	r2, #1
 8005d32:	7830      	ldrb	r0, [r6, #0]
 8005d34:	f7ff ff9e 	bl	8005c74 <__hexdig_fun>
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	d1f8      	bne.n	8005d2e <__gethex+0x8e>
 8005d3c:	9903      	ldr	r1, [sp, #12]
 8005d3e:	4652      	mov	r2, sl
 8005d40:	4630      	mov	r0, r6
 8005d42:	f001 f9ef 	bl	8007124 <strncmp>
 8005d46:	b980      	cbnz	r0, 8005d6a <__gethex+0xca>
 8005d48:	b94d      	cbnz	r5, 8005d5e <__gethex+0xbe>
 8005d4a:	eb06 050a 	add.w	r5, r6, sl
 8005d4e:	462a      	mov	r2, r5
 8005d50:	4616      	mov	r6, r2
 8005d52:	3201      	adds	r2, #1
 8005d54:	7830      	ldrb	r0, [r6, #0]
 8005d56:	f7ff ff8d 	bl	8005c74 <__hexdig_fun>
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d1f8      	bne.n	8005d50 <__gethex+0xb0>
 8005d5e:	1bad      	subs	r5, r5, r6
 8005d60:	00ad      	lsls	r5, r5, #2
 8005d62:	e004      	b.n	8005d6e <__gethex+0xce>
 8005d64:	2400      	movs	r4, #0
 8005d66:	4625      	mov	r5, r4
 8005d68:	e7e0      	b.n	8005d2c <__gethex+0x8c>
 8005d6a:	2d00      	cmp	r5, #0
 8005d6c:	d1f7      	bne.n	8005d5e <__gethex+0xbe>
 8005d6e:	7833      	ldrb	r3, [r6, #0]
 8005d70:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005d74:	2b50      	cmp	r3, #80	; 0x50
 8005d76:	d139      	bne.n	8005dec <__gethex+0x14c>
 8005d78:	7873      	ldrb	r3, [r6, #1]
 8005d7a:	2b2b      	cmp	r3, #43	; 0x2b
 8005d7c:	d02a      	beq.n	8005dd4 <__gethex+0x134>
 8005d7e:	2b2d      	cmp	r3, #45	; 0x2d
 8005d80:	d02c      	beq.n	8005ddc <__gethex+0x13c>
 8005d82:	1c71      	adds	r1, r6, #1
 8005d84:	f04f 0900 	mov.w	r9, #0
 8005d88:	7808      	ldrb	r0, [r1, #0]
 8005d8a:	f7ff ff73 	bl	8005c74 <__hexdig_fun>
 8005d8e:	1e43      	subs	r3, r0, #1
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b18      	cmp	r3, #24
 8005d94:	d82a      	bhi.n	8005dec <__gethex+0x14c>
 8005d96:	f1a0 0210 	sub.w	r2, r0, #16
 8005d9a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005d9e:	f7ff ff69 	bl	8005c74 <__hexdig_fun>
 8005da2:	1e43      	subs	r3, r0, #1
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b18      	cmp	r3, #24
 8005da8:	d91b      	bls.n	8005de2 <__gethex+0x142>
 8005daa:	f1b9 0f00 	cmp.w	r9, #0
 8005dae:	d000      	beq.n	8005db2 <__gethex+0x112>
 8005db0:	4252      	negs	r2, r2
 8005db2:	4415      	add	r5, r2
 8005db4:	f8cb 1000 	str.w	r1, [fp]
 8005db8:	b1d4      	cbz	r4, 8005df0 <__gethex+0x150>
 8005dba:	9b01      	ldr	r3, [sp, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	bf14      	ite	ne
 8005dc0:	2700      	movne	r7, #0
 8005dc2:	2706      	moveq	r7, #6
 8005dc4:	4638      	mov	r0, r7
 8005dc6:	b00b      	add	sp, #44	; 0x2c
 8005dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dcc:	463e      	mov	r6, r7
 8005dce:	4625      	mov	r5, r4
 8005dd0:	2401      	movs	r4, #1
 8005dd2:	e7cc      	b.n	8005d6e <__gethex+0xce>
 8005dd4:	f04f 0900 	mov.w	r9, #0
 8005dd8:	1cb1      	adds	r1, r6, #2
 8005dda:	e7d5      	b.n	8005d88 <__gethex+0xe8>
 8005ddc:	f04f 0901 	mov.w	r9, #1
 8005de0:	e7fa      	b.n	8005dd8 <__gethex+0x138>
 8005de2:	230a      	movs	r3, #10
 8005de4:	fb03 0202 	mla	r2, r3, r2, r0
 8005de8:	3a10      	subs	r2, #16
 8005dea:	e7d6      	b.n	8005d9a <__gethex+0xfa>
 8005dec:	4631      	mov	r1, r6
 8005dee:	e7e1      	b.n	8005db4 <__gethex+0x114>
 8005df0:	1bf3      	subs	r3, r6, r7
 8005df2:	3b01      	subs	r3, #1
 8005df4:	4621      	mov	r1, r4
 8005df6:	2b07      	cmp	r3, #7
 8005df8:	dc0a      	bgt.n	8005e10 <__gethex+0x170>
 8005dfa:	9802      	ldr	r0, [sp, #8]
 8005dfc:	f000 fa7a 	bl	80062f4 <_Balloc>
 8005e00:	4604      	mov	r4, r0
 8005e02:	b940      	cbnz	r0, 8005e16 <__gethex+0x176>
 8005e04:	4b5c      	ldr	r3, [pc, #368]	; (8005f78 <__gethex+0x2d8>)
 8005e06:	4602      	mov	r2, r0
 8005e08:	21de      	movs	r1, #222	; 0xde
 8005e0a:	485c      	ldr	r0, [pc, #368]	; (8005f7c <__gethex+0x2dc>)
 8005e0c:	f001 f9ac 	bl	8007168 <__assert_func>
 8005e10:	3101      	adds	r1, #1
 8005e12:	105b      	asrs	r3, r3, #1
 8005e14:	e7ef      	b.n	8005df6 <__gethex+0x156>
 8005e16:	f100 0914 	add.w	r9, r0, #20
 8005e1a:	f04f 0b00 	mov.w	fp, #0
 8005e1e:	f1ca 0301 	rsb	r3, sl, #1
 8005e22:	f8cd 9010 	str.w	r9, [sp, #16]
 8005e26:	f8cd b004 	str.w	fp, [sp, #4]
 8005e2a:	9308      	str	r3, [sp, #32]
 8005e2c:	42b7      	cmp	r7, r6
 8005e2e:	d33f      	bcc.n	8005eb0 <__gethex+0x210>
 8005e30:	9f04      	ldr	r7, [sp, #16]
 8005e32:	9b01      	ldr	r3, [sp, #4]
 8005e34:	f847 3b04 	str.w	r3, [r7], #4
 8005e38:	eba7 0709 	sub.w	r7, r7, r9
 8005e3c:	10bf      	asrs	r7, r7, #2
 8005e3e:	6127      	str	r7, [r4, #16]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f000 fb49 	bl	80064d8 <__hi0bits>
 8005e46:	017f      	lsls	r7, r7, #5
 8005e48:	f8d8 6000 	ldr.w	r6, [r8]
 8005e4c:	1a3f      	subs	r7, r7, r0
 8005e4e:	42b7      	cmp	r7, r6
 8005e50:	dd62      	ble.n	8005f18 <__gethex+0x278>
 8005e52:	1bbf      	subs	r7, r7, r6
 8005e54:	4639      	mov	r1, r7
 8005e56:	4620      	mov	r0, r4
 8005e58:	f000 fedf 	bl	8006c1a <__any_on>
 8005e5c:	4682      	mov	sl, r0
 8005e5e:	b1a8      	cbz	r0, 8005e8c <__gethex+0x1ec>
 8005e60:	1e7b      	subs	r3, r7, #1
 8005e62:	1159      	asrs	r1, r3, #5
 8005e64:	f003 021f 	and.w	r2, r3, #31
 8005e68:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005e6c:	f04f 0a01 	mov.w	sl, #1
 8005e70:	fa0a f202 	lsl.w	r2, sl, r2
 8005e74:	420a      	tst	r2, r1
 8005e76:	d009      	beq.n	8005e8c <__gethex+0x1ec>
 8005e78:	4553      	cmp	r3, sl
 8005e7a:	dd05      	ble.n	8005e88 <__gethex+0x1e8>
 8005e7c:	1eb9      	subs	r1, r7, #2
 8005e7e:	4620      	mov	r0, r4
 8005e80:	f000 fecb 	bl	8006c1a <__any_on>
 8005e84:	2800      	cmp	r0, #0
 8005e86:	d144      	bne.n	8005f12 <__gethex+0x272>
 8005e88:	f04f 0a02 	mov.w	sl, #2
 8005e8c:	4639      	mov	r1, r7
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f7ff fe9e 	bl	8005bd0 <rshift>
 8005e94:	443d      	add	r5, r7
 8005e96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005e9a:	42ab      	cmp	r3, r5
 8005e9c:	da4a      	bge.n	8005f34 <__gethex+0x294>
 8005e9e:	9802      	ldr	r0, [sp, #8]
 8005ea0:	4621      	mov	r1, r4
 8005ea2:	f000 fa67 	bl	8006374 <_Bfree>
 8005ea6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	6013      	str	r3, [r2, #0]
 8005eac:	27a3      	movs	r7, #163	; 0xa3
 8005eae:	e789      	b.n	8005dc4 <__gethex+0x124>
 8005eb0:	1e73      	subs	r3, r6, #1
 8005eb2:	9a06      	ldr	r2, [sp, #24]
 8005eb4:	9307      	str	r3, [sp, #28]
 8005eb6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d019      	beq.n	8005ef2 <__gethex+0x252>
 8005ebe:	f1bb 0f20 	cmp.w	fp, #32
 8005ec2:	d107      	bne.n	8005ed4 <__gethex+0x234>
 8005ec4:	9b04      	ldr	r3, [sp, #16]
 8005ec6:	9a01      	ldr	r2, [sp, #4]
 8005ec8:	f843 2b04 	str.w	r2, [r3], #4
 8005ecc:	9304      	str	r3, [sp, #16]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	9301      	str	r3, [sp, #4]
 8005ed2:	469b      	mov	fp, r3
 8005ed4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005ed8:	f7ff fecc 	bl	8005c74 <__hexdig_fun>
 8005edc:	9b01      	ldr	r3, [sp, #4]
 8005ede:	f000 000f 	and.w	r0, r0, #15
 8005ee2:	fa00 f00b 	lsl.w	r0, r0, fp
 8005ee6:	4303      	orrs	r3, r0
 8005ee8:	9301      	str	r3, [sp, #4]
 8005eea:	f10b 0b04 	add.w	fp, fp, #4
 8005eee:	9b07      	ldr	r3, [sp, #28]
 8005ef0:	e00d      	b.n	8005f0e <__gethex+0x26e>
 8005ef2:	9a08      	ldr	r2, [sp, #32]
 8005ef4:	1e73      	subs	r3, r6, #1
 8005ef6:	4413      	add	r3, r2
 8005ef8:	42bb      	cmp	r3, r7
 8005efa:	d3e0      	bcc.n	8005ebe <__gethex+0x21e>
 8005efc:	4618      	mov	r0, r3
 8005efe:	9903      	ldr	r1, [sp, #12]
 8005f00:	9309      	str	r3, [sp, #36]	; 0x24
 8005f02:	4652      	mov	r2, sl
 8005f04:	f001 f90e 	bl	8007124 <strncmp>
 8005f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	d1d7      	bne.n	8005ebe <__gethex+0x21e>
 8005f0e:	461e      	mov	r6, r3
 8005f10:	e78c      	b.n	8005e2c <__gethex+0x18c>
 8005f12:	f04f 0a03 	mov.w	sl, #3
 8005f16:	e7b9      	b.n	8005e8c <__gethex+0x1ec>
 8005f18:	da09      	bge.n	8005f2e <__gethex+0x28e>
 8005f1a:	1bf7      	subs	r7, r6, r7
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	9802      	ldr	r0, [sp, #8]
 8005f20:	463a      	mov	r2, r7
 8005f22:	f000 fc3f 	bl	80067a4 <__lshift>
 8005f26:	1bed      	subs	r5, r5, r7
 8005f28:	4604      	mov	r4, r0
 8005f2a:	f100 0914 	add.w	r9, r0, #20
 8005f2e:	f04f 0a00 	mov.w	sl, #0
 8005f32:	e7b0      	b.n	8005e96 <__gethex+0x1f6>
 8005f34:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005f38:	42a8      	cmp	r0, r5
 8005f3a:	dd71      	ble.n	8006020 <__gethex+0x380>
 8005f3c:	1b45      	subs	r5, r0, r5
 8005f3e:	42ae      	cmp	r6, r5
 8005f40:	dc35      	bgt.n	8005fae <__gethex+0x30e>
 8005f42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d029      	beq.n	8005f9e <__gethex+0x2fe>
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d02b      	beq.n	8005fa6 <__gethex+0x306>
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d11c      	bne.n	8005f8c <__gethex+0x2ec>
 8005f52:	42ae      	cmp	r6, r5
 8005f54:	d11a      	bne.n	8005f8c <__gethex+0x2ec>
 8005f56:	2e01      	cmp	r6, #1
 8005f58:	d112      	bne.n	8005f80 <__gethex+0x2e0>
 8005f5a:	9a05      	ldr	r2, [sp, #20]
 8005f5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005f60:	6013      	str	r3, [r2, #0]
 8005f62:	2301      	movs	r3, #1
 8005f64:	6123      	str	r3, [r4, #16]
 8005f66:	f8c9 3000 	str.w	r3, [r9]
 8005f6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f6c:	2762      	movs	r7, #98	; 0x62
 8005f6e:	601c      	str	r4, [r3, #0]
 8005f70:	e728      	b.n	8005dc4 <__gethex+0x124>
 8005f72:	bf00      	nop
 8005f74:	08008148 	.word	0x08008148
 8005f78:	080080d0 	.word	0x080080d0
 8005f7c:	080080e1 	.word	0x080080e1
 8005f80:	1e71      	subs	r1, r6, #1
 8005f82:	4620      	mov	r0, r4
 8005f84:	f000 fe49 	bl	8006c1a <__any_on>
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	d1e6      	bne.n	8005f5a <__gethex+0x2ba>
 8005f8c:	9802      	ldr	r0, [sp, #8]
 8005f8e:	4621      	mov	r1, r4
 8005f90:	f000 f9f0 	bl	8006374 <_Bfree>
 8005f94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005f96:	2300      	movs	r3, #0
 8005f98:	6013      	str	r3, [r2, #0]
 8005f9a:	2750      	movs	r7, #80	; 0x50
 8005f9c:	e712      	b.n	8005dc4 <__gethex+0x124>
 8005f9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1f3      	bne.n	8005f8c <__gethex+0x2ec>
 8005fa4:	e7d9      	b.n	8005f5a <__gethex+0x2ba>
 8005fa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1d6      	bne.n	8005f5a <__gethex+0x2ba>
 8005fac:	e7ee      	b.n	8005f8c <__gethex+0x2ec>
 8005fae:	1e6f      	subs	r7, r5, #1
 8005fb0:	f1ba 0f00 	cmp.w	sl, #0
 8005fb4:	d131      	bne.n	800601a <__gethex+0x37a>
 8005fb6:	b127      	cbz	r7, 8005fc2 <__gethex+0x322>
 8005fb8:	4639      	mov	r1, r7
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f000 fe2d 	bl	8006c1a <__any_on>
 8005fc0:	4682      	mov	sl, r0
 8005fc2:	117b      	asrs	r3, r7, #5
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005fca:	f007 071f 	and.w	r7, r7, #31
 8005fce:	fa01 f707 	lsl.w	r7, r1, r7
 8005fd2:	421f      	tst	r7, r3
 8005fd4:	4629      	mov	r1, r5
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	bf18      	it	ne
 8005fda:	f04a 0a02 	orrne.w	sl, sl, #2
 8005fde:	1b76      	subs	r6, r6, r5
 8005fe0:	f7ff fdf6 	bl	8005bd0 <rshift>
 8005fe4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005fe8:	2702      	movs	r7, #2
 8005fea:	f1ba 0f00 	cmp.w	sl, #0
 8005fee:	d048      	beq.n	8006082 <__gethex+0x3e2>
 8005ff0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d015      	beq.n	8006024 <__gethex+0x384>
 8005ff8:	2b03      	cmp	r3, #3
 8005ffa:	d017      	beq.n	800602c <__gethex+0x38c>
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d109      	bne.n	8006014 <__gethex+0x374>
 8006000:	f01a 0f02 	tst.w	sl, #2
 8006004:	d006      	beq.n	8006014 <__gethex+0x374>
 8006006:	f8d9 0000 	ldr.w	r0, [r9]
 800600a:	ea4a 0a00 	orr.w	sl, sl, r0
 800600e:	f01a 0f01 	tst.w	sl, #1
 8006012:	d10e      	bne.n	8006032 <__gethex+0x392>
 8006014:	f047 0710 	orr.w	r7, r7, #16
 8006018:	e033      	b.n	8006082 <__gethex+0x3e2>
 800601a:	f04f 0a01 	mov.w	sl, #1
 800601e:	e7d0      	b.n	8005fc2 <__gethex+0x322>
 8006020:	2701      	movs	r7, #1
 8006022:	e7e2      	b.n	8005fea <__gethex+0x34a>
 8006024:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006026:	f1c3 0301 	rsb	r3, r3, #1
 800602a:	9315      	str	r3, [sp, #84]	; 0x54
 800602c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800602e:	2b00      	cmp	r3, #0
 8006030:	d0f0      	beq.n	8006014 <__gethex+0x374>
 8006032:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006036:	f104 0314 	add.w	r3, r4, #20
 800603a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800603e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006042:	f04f 0c00 	mov.w	ip, #0
 8006046:	4618      	mov	r0, r3
 8006048:	f853 2b04 	ldr.w	r2, [r3], #4
 800604c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8006050:	d01c      	beq.n	800608c <__gethex+0x3ec>
 8006052:	3201      	adds	r2, #1
 8006054:	6002      	str	r2, [r0, #0]
 8006056:	2f02      	cmp	r7, #2
 8006058:	f104 0314 	add.w	r3, r4, #20
 800605c:	d13d      	bne.n	80060da <__gethex+0x43a>
 800605e:	f8d8 2000 	ldr.w	r2, [r8]
 8006062:	3a01      	subs	r2, #1
 8006064:	42b2      	cmp	r2, r6
 8006066:	d10a      	bne.n	800607e <__gethex+0x3de>
 8006068:	1171      	asrs	r1, r6, #5
 800606a:	2201      	movs	r2, #1
 800606c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006070:	f006 061f 	and.w	r6, r6, #31
 8006074:	fa02 f606 	lsl.w	r6, r2, r6
 8006078:	421e      	tst	r6, r3
 800607a:	bf18      	it	ne
 800607c:	4617      	movne	r7, r2
 800607e:	f047 0720 	orr.w	r7, r7, #32
 8006082:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006084:	601c      	str	r4, [r3, #0]
 8006086:	9b05      	ldr	r3, [sp, #20]
 8006088:	601d      	str	r5, [r3, #0]
 800608a:	e69b      	b.n	8005dc4 <__gethex+0x124>
 800608c:	4299      	cmp	r1, r3
 800608e:	f843 cc04 	str.w	ip, [r3, #-4]
 8006092:	d8d8      	bhi.n	8006046 <__gethex+0x3a6>
 8006094:	68a3      	ldr	r3, [r4, #8]
 8006096:	459b      	cmp	fp, r3
 8006098:	db17      	blt.n	80060ca <__gethex+0x42a>
 800609a:	6861      	ldr	r1, [r4, #4]
 800609c:	9802      	ldr	r0, [sp, #8]
 800609e:	3101      	adds	r1, #1
 80060a0:	f000 f928 	bl	80062f4 <_Balloc>
 80060a4:	4681      	mov	r9, r0
 80060a6:	b918      	cbnz	r0, 80060b0 <__gethex+0x410>
 80060a8:	4b1a      	ldr	r3, [pc, #104]	; (8006114 <__gethex+0x474>)
 80060aa:	4602      	mov	r2, r0
 80060ac:	2184      	movs	r1, #132	; 0x84
 80060ae:	e6ac      	b.n	8005e0a <__gethex+0x16a>
 80060b0:	6922      	ldr	r2, [r4, #16]
 80060b2:	3202      	adds	r2, #2
 80060b4:	f104 010c 	add.w	r1, r4, #12
 80060b8:	0092      	lsls	r2, r2, #2
 80060ba:	300c      	adds	r0, #12
 80060bc:	f000 f90c 	bl	80062d8 <memcpy>
 80060c0:	4621      	mov	r1, r4
 80060c2:	9802      	ldr	r0, [sp, #8]
 80060c4:	f000 f956 	bl	8006374 <_Bfree>
 80060c8:	464c      	mov	r4, r9
 80060ca:	6923      	ldr	r3, [r4, #16]
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80060d2:	6122      	str	r2, [r4, #16]
 80060d4:	2201      	movs	r2, #1
 80060d6:	615a      	str	r2, [r3, #20]
 80060d8:	e7bd      	b.n	8006056 <__gethex+0x3b6>
 80060da:	6922      	ldr	r2, [r4, #16]
 80060dc:	455a      	cmp	r2, fp
 80060de:	dd0b      	ble.n	80060f8 <__gethex+0x458>
 80060e0:	2101      	movs	r1, #1
 80060e2:	4620      	mov	r0, r4
 80060e4:	f7ff fd74 	bl	8005bd0 <rshift>
 80060e8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80060ec:	3501      	adds	r5, #1
 80060ee:	42ab      	cmp	r3, r5
 80060f0:	f6ff aed5 	blt.w	8005e9e <__gethex+0x1fe>
 80060f4:	2701      	movs	r7, #1
 80060f6:	e7c2      	b.n	800607e <__gethex+0x3de>
 80060f8:	f016 061f 	ands.w	r6, r6, #31
 80060fc:	d0fa      	beq.n	80060f4 <__gethex+0x454>
 80060fe:	4453      	add	r3, sl
 8006100:	f1c6 0620 	rsb	r6, r6, #32
 8006104:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006108:	f000 f9e6 	bl	80064d8 <__hi0bits>
 800610c:	42b0      	cmp	r0, r6
 800610e:	dbe7      	blt.n	80060e0 <__gethex+0x440>
 8006110:	e7f0      	b.n	80060f4 <__gethex+0x454>
 8006112:	bf00      	nop
 8006114:	080080d0 	.word	0x080080d0

08006118 <L_shift>:
 8006118:	f1c2 0208 	rsb	r2, r2, #8
 800611c:	0092      	lsls	r2, r2, #2
 800611e:	b570      	push	{r4, r5, r6, lr}
 8006120:	f1c2 0620 	rsb	r6, r2, #32
 8006124:	6843      	ldr	r3, [r0, #4]
 8006126:	6804      	ldr	r4, [r0, #0]
 8006128:	fa03 f506 	lsl.w	r5, r3, r6
 800612c:	432c      	orrs	r4, r5
 800612e:	40d3      	lsrs	r3, r2
 8006130:	6004      	str	r4, [r0, #0]
 8006132:	f840 3f04 	str.w	r3, [r0, #4]!
 8006136:	4288      	cmp	r0, r1
 8006138:	d3f4      	bcc.n	8006124 <L_shift+0xc>
 800613a:	bd70      	pop	{r4, r5, r6, pc}

0800613c <__match>:
 800613c:	b530      	push	{r4, r5, lr}
 800613e:	6803      	ldr	r3, [r0, #0]
 8006140:	3301      	adds	r3, #1
 8006142:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006146:	b914      	cbnz	r4, 800614e <__match+0x12>
 8006148:	6003      	str	r3, [r0, #0]
 800614a:	2001      	movs	r0, #1
 800614c:	bd30      	pop	{r4, r5, pc}
 800614e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006152:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006156:	2d19      	cmp	r5, #25
 8006158:	bf98      	it	ls
 800615a:	3220      	addls	r2, #32
 800615c:	42a2      	cmp	r2, r4
 800615e:	d0f0      	beq.n	8006142 <__match+0x6>
 8006160:	2000      	movs	r0, #0
 8006162:	e7f3      	b.n	800614c <__match+0x10>

08006164 <__hexnan>:
 8006164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006168:	680b      	ldr	r3, [r1, #0]
 800616a:	115e      	asrs	r6, r3, #5
 800616c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006170:	f013 031f 	ands.w	r3, r3, #31
 8006174:	b087      	sub	sp, #28
 8006176:	bf18      	it	ne
 8006178:	3604      	addne	r6, #4
 800617a:	2500      	movs	r5, #0
 800617c:	1f37      	subs	r7, r6, #4
 800617e:	4690      	mov	r8, r2
 8006180:	6802      	ldr	r2, [r0, #0]
 8006182:	9301      	str	r3, [sp, #4]
 8006184:	4682      	mov	sl, r0
 8006186:	f846 5c04 	str.w	r5, [r6, #-4]
 800618a:	46b9      	mov	r9, r7
 800618c:	463c      	mov	r4, r7
 800618e:	9502      	str	r5, [sp, #8]
 8006190:	46ab      	mov	fp, r5
 8006192:	7851      	ldrb	r1, [r2, #1]
 8006194:	1c53      	adds	r3, r2, #1
 8006196:	9303      	str	r3, [sp, #12]
 8006198:	b341      	cbz	r1, 80061ec <__hexnan+0x88>
 800619a:	4608      	mov	r0, r1
 800619c:	9205      	str	r2, [sp, #20]
 800619e:	9104      	str	r1, [sp, #16]
 80061a0:	f7ff fd68 	bl	8005c74 <__hexdig_fun>
 80061a4:	2800      	cmp	r0, #0
 80061a6:	d14f      	bne.n	8006248 <__hexnan+0xe4>
 80061a8:	9904      	ldr	r1, [sp, #16]
 80061aa:	9a05      	ldr	r2, [sp, #20]
 80061ac:	2920      	cmp	r1, #32
 80061ae:	d818      	bhi.n	80061e2 <__hexnan+0x7e>
 80061b0:	9b02      	ldr	r3, [sp, #8]
 80061b2:	459b      	cmp	fp, r3
 80061b4:	dd13      	ble.n	80061de <__hexnan+0x7a>
 80061b6:	454c      	cmp	r4, r9
 80061b8:	d206      	bcs.n	80061c8 <__hexnan+0x64>
 80061ba:	2d07      	cmp	r5, #7
 80061bc:	dc04      	bgt.n	80061c8 <__hexnan+0x64>
 80061be:	462a      	mov	r2, r5
 80061c0:	4649      	mov	r1, r9
 80061c2:	4620      	mov	r0, r4
 80061c4:	f7ff ffa8 	bl	8006118 <L_shift>
 80061c8:	4544      	cmp	r4, r8
 80061ca:	d950      	bls.n	800626e <__hexnan+0x10a>
 80061cc:	2300      	movs	r3, #0
 80061ce:	f1a4 0904 	sub.w	r9, r4, #4
 80061d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80061d6:	f8cd b008 	str.w	fp, [sp, #8]
 80061da:	464c      	mov	r4, r9
 80061dc:	461d      	mov	r5, r3
 80061de:	9a03      	ldr	r2, [sp, #12]
 80061e0:	e7d7      	b.n	8006192 <__hexnan+0x2e>
 80061e2:	2929      	cmp	r1, #41	; 0x29
 80061e4:	d156      	bne.n	8006294 <__hexnan+0x130>
 80061e6:	3202      	adds	r2, #2
 80061e8:	f8ca 2000 	str.w	r2, [sl]
 80061ec:	f1bb 0f00 	cmp.w	fp, #0
 80061f0:	d050      	beq.n	8006294 <__hexnan+0x130>
 80061f2:	454c      	cmp	r4, r9
 80061f4:	d206      	bcs.n	8006204 <__hexnan+0xa0>
 80061f6:	2d07      	cmp	r5, #7
 80061f8:	dc04      	bgt.n	8006204 <__hexnan+0xa0>
 80061fa:	462a      	mov	r2, r5
 80061fc:	4649      	mov	r1, r9
 80061fe:	4620      	mov	r0, r4
 8006200:	f7ff ff8a 	bl	8006118 <L_shift>
 8006204:	4544      	cmp	r4, r8
 8006206:	d934      	bls.n	8006272 <__hexnan+0x10e>
 8006208:	f1a8 0204 	sub.w	r2, r8, #4
 800620c:	4623      	mov	r3, r4
 800620e:	f853 1b04 	ldr.w	r1, [r3], #4
 8006212:	f842 1f04 	str.w	r1, [r2, #4]!
 8006216:	429f      	cmp	r7, r3
 8006218:	d2f9      	bcs.n	800620e <__hexnan+0xaa>
 800621a:	1b3b      	subs	r3, r7, r4
 800621c:	f023 0303 	bic.w	r3, r3, #3
 8006220:	3304      	adds	r3, #4
 8006222:	3401      	adds	r4, #1
 8006224:	3e03      	subs	r6, #3
 8006226:	42b4      	cmp	r4, r6
 8006228:	bf88      	it	hi
 800622a:	2304      	movhi	r3, #4
 800622c:	4443      	add	r3, r8
 800622e:	2200      	movs	r2, #0
 8006230:	f843 2b04 	str.w	r2, [r3], #4
 8006234:	429f      	cmp	r7, r3
 8006236:	d2fb      	bcs.n	8006230 <__hexnan+0xcc>
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	b91b      	cbnz	r3, 8006244 <__hexnan+0xe0>
 800623c:	4547      	cmp	r7, r8
 800623e:	d127      	bne.n	8006290 <__hexnan+0x12c>
 8006240:	2301      	movs	r3, #1
 8006242:	603b      	str	r3, [r7, #0]
 8006244:	2005      	movs	r0, #5
 8006246:	e026      	b.n	8006296 <__hexnan+0x132>
 8006248:	3501      	adds	r5, #1
 800624a:	2d08      	cmp	r5, #8
 800624c:	f10b 0b01 	add.w	fp, fp, #1
 8006250:	dd06      	ble.n	8006260 <__hexnan+0xfc>
 8006252:	4544      	cmp	r4, r8
 8006254:	d9c3      	bls.n	80061de <__hexnan+0x7a>
 8006256:	2300      	movs	r3, #0
 8006258:	f844 3c04 	str.w	r3, [r4, #-4]
 800625c:	2501      	movs	r5, #1
 800625e:	3c04      	subs	r4, #4
 8006260:	6822      	ldr	r2, [r4, #0]
 8006262:	f000 000f 	and.w	r0, r0, #15
 8006266:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800626a:	6022      	str	r2, [r4, #0]
 800626c:	e7b7      	b.n	80061de <__hexnan+0x7a>
 800626e:	2508      	movs	r5, #8
 8006270:	e7b5      	b.n	80061de <__hexnan+0x7a>
 8006272:	9b01      	ldr	r3, [sp, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d0df      	beq.n	8006238 <__hexnan+0xd4>
 8006278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800627c:	f1c3 0320 	rsb	r3, r3, #32
 8006280:	fa22 f303 	lsr.w	r3, r2, r3
 8006284:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006288:	401a      	ands	r2, r3
 800628a:	f846 2c04 	str.w	r2, [r6, #-4]
 800628e:	e7d3      	b.n	8006238 <__hexnan+0xd4>
 8006290:	3f04      	subs	r7, #4
 8006292:	e7d1      	b.n	8006238 <__hexnan+0xd4>
 8006294:	2004      	movs	r0, #4
 8006296:	b007      	add	sp, #28
 8006298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800629c <_localeconv_r>:
 800629c:	4800      	ldr	r0, [pc, #0]	; (80062a0 <_localeconv_r+0x4>)
 800629e:	4770      	bx	lr
 80062a0:	2000019c 	.word	0x2000019c

080062a4 <malloc>:
 80062a4:	4b02      	ldr	r3, [pc, #8]	; (80062b0 <malloc+0xc>)
 80062a6:	4601      	mov	r1, r0
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	f000 bd55 	b.w	8006d58 <_malloc_r>
 80062ae:	bf00      	nop
 80062b0:	20000044 	.word	0x20000044

080062b4 <__ascii_mbtowc>:
 80062b4:	b082      	sub	sp, #8
 80062b6:	b901      	cbnz	r1, 80062ba <__ascii_mbtowc+0x6>
 80062b8:	a901      	add	r1, sp, #4
 80062ba:	b142      	cbz	r2, 80062ce <__ascii_mbtowc+0x1a>
 80062bc:	b14b      	cbz	r3, 80062d2 <__ascii_mbtowc+0x1e>
 80062be:	7813      	ldrb	r3, [r2, #0]
 80062c0:	600b      	str	r3, [r1, #0]
 80062c2:	7812      	ldrb	r2, [r2, #0]
 80062c4:	1e10      	subs	r0, r2, #0
 80062c6:	bf18      	it	ne
 80062c8:	2001      	movne	r0, #1
 80062ca:	b002      	add	sp, #8
 80062cc:	4770      	bx	lr
 80062ce:	4610      	mov	r0, r2
 80062d0:	e7fb      	b.n	80062ca <__ascii_mbtowc+0x16>
 80062d2:	f06f 0001 	mvn.w	r0, #1
 80062d6:	e7f8      	b.n	80062ca <__ascii_mbtowc+0x16>

080062d8 <memcpy>:
 80062d8:	440a      	add	r2, r1
 80062da:	4291      	cmp	r1, r2
 80062dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80062e0:	d100      	bne.n	80062e4 <memcpy+0xc>
 80062e2:	4770      	bx	lr
 80062e4:	b510      	push	{r4, lr}
 80062e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062ee:	4291      	cmp	r1, r2
 80062f0:	d1f9      	bne.n	80062e6 <memcpy+0xe>
 80062f2:	bd10      	pop	{r4, pc}

080062f4 <_Balloc>:
 80062f4:	b570      	push	{r4, r5, r6, lr}
 80062f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80062f8:	4604      	mov	r4, r0
 80062fa:	460d      	mov	r5, r1
 80062fc:	b976      	cbnz	r6, 800631c <_Balloc+0x28>
 80062fe:	2010      	movs	r0, #16
 8006300:	f7ff ffd0 	bl	80062a4 <malloc>
 8006304:	4602      	mov	r2, r0
 8006306:	6260      	str	r0, [r4, #36]	; 0x24
 8006308:	b920      	cbnz	r0, 8006314 <_Balloc+0x20>
 800630a:	4b18      	ldr	r3, [pc, #96]	; (800636c <_Balloc+0x78>)
 800630c:	4818      	ldr	r0, [pc, #96]	; (8006370 <_Balloc+0x7c>)
 800630e:	2166      	movs	r1, #102	; 0x66
 8006310:	f000 ff2a 	bl	8007168 <__assert_func>
 8006314:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006318:	6006      	str	r6, [r0, #0]
 800631a:	60c6      	str	r6, [r0, #12]
 800631c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800631e:	68f3      	ldr	r3, [r6, #12]
 8006320:	b183      	cbz	r3, 8006344 <_Balloc+0x50>
 8006322:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800632a:	b9b8      	cbnz	r0, 800635c <_Balloc+0x68>
 800632c:	2101      	movs	r1, #1
 800632e:	fa01 f605 	lsl.w	r6, r1, r5
 8006332:	1d72      	adds	r2, r6, #5
 8006334:	0092      	lsls	r2, r2, #2
 8006336:	4620      	mov	r0, r4
 8006338:	f000 fc90 	bl	8006c5c <_calloc_r>
 800633c:	b160      	cbz	r0, 8006358 <_Balloc+0x64>
 800633e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006342:	e00e      	b.n	8006362 <_Balloc+0x6e>
 8006344:	2221      	movs	r2, #33	; 0x21
 8006346:	2104      	movs	r1, #4
 8006348:	4620      	mov	r0, r4
 800634a:	f000 fc87 	bl	8006c5c <_calloc_r>
 800634e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006350:	60f0      	str	r0, [r6, #12]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1e4      	bne.n	8006322 <_Balloc+0x2e>
 8006358:	2000      	movs	r0, #0
 800635a:	bd70      	pop	{r4, r5, r6, pc}
 800635c:	6802      	ldr	r2, [r0, #0]
 800635e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006362:	2300      	movs	r3, #0
 8006364:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006368:	e7f7      	b.n	800635a <_Balloc+0x66>
 800636a:	bf00      	nop
 800636c:	0800805e 	.word	0x0800805e
 8006370:	0800815c 	.word	0x0800815c

08006374 <_Bfree>:
 8006374:	b570      	push	{r4, r5, r6, lr}
 8006376:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006378:	4605      	mov	r5, r0
 800637a:	460c      	mov	r4, r1
 800637c:	b976      	cbnz	r6, 800639c <_Bfree+0x28>
 800637e:	2010      	movs	r0, #16
 8006380:	f7ff ff90 	bl	80062a4 <malloc>
 8006384:	4602      	mov	r2, r0
 8006386:	6268      	str	r0, [r5, #36]	; 0x24
 8006388:	b920      	cbnz	r0, 8006394 <_Bfree+0x20>
 800638a:	4b09      	ldr	r3, [pc, #36]	; (80063b0 <_Bfree+0x3c>)
 800638c:	4809      	ldr	r0, [pc, #36]	; (80063b4 <_Bfree+0x40>)
 800638e:	218a      	movs	r1, #138	; 0x8a
 8006390:	f000 feea 	bl	8007168 <__assert_func>
 8006394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006398:	6006      	str	r6, [r0, #0]
 800639a:	60c6      	str	r6, [r0, #12]
 800639c:	b13c      	cbz	r4, 80063ae <_Bfree+0x3a>
 800639e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80063a0:	6862      	ldr	r2, [r4, #4]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063a8:	6021      	str	r1, [r4, #0]
 80063aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80063ae:	bd70      	pop	{r4, r5, r6, pc}
 80063b0:	0800805e 	.word	0x0800805e
 80063b4:	0800815c 	.word	0x0800815c

080063b8 <__multadd>:
 80063b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063bc:	690d      	ldr	r5, [r1, #16]
 80063be:	4607      	mov	r7, r0
 80063c0:	460c      	mov	r4, r1
 80063c2:	461e      	mov	r6, r3
 80063c4:	f101 0c14 	add.w	ip, r1, #20
 80063c8:	2000      	movs	r0, #0
 80063ca:	f8dc 3000 	ldr.w	r3, [ip]
 80063ce:	b299      	uxth	r1, r3
 80063d0:	fb02 6101 	mla	r1, r2, r1, r6
 80063d4:	0c1e      	lsrs	r6, r3, #16
 80063d6:	0c0b      	lsrs	r3, r1, #16
 80063d8:	fb02 3306 	mla	r3, r2, r6, r3
 80063dc:	b289      	uxth	r1, r1
 80063de:	3001      	adds	r0, #1
 80063e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80063e4:	4285      	cmp	r5, r0
 80063e6:	f84c 1b04 	str.w	r1, [ip], #4
 80063ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80063ee:	dcec      	bgt.n	80063ca <__multadd+0x12>
 80063f0:	b30e      	cbz	r6, 8006436 <__multadd+0x7e>
 80063f2:	68a3      	ldr	r3, [r4, #8]
 80063f4:	42ab      	cmp	r3, r5
 80063f6:	dc19      	bgt.n	800642c <__multadd+0x74>
 80063f8:	6861      	ldr	r1, [r4, #4]
 80063fa:	4638      	mov	r0, r7
 80063fc:	3101      	adds	r1, #1
 80063fe:	f7ff ff79 	bl	80062f4 <_Balloc>
 8006402:	4680      	mov	r8, r0
 8006404:	b928      	cbnz	r0, 8006412 <__multadd+0x5a>
 8006406:	4602      	mov	r2, r0
 8006408:	4b0c      	ldr	r3, [pc, #48]	; (800643c <__multadd+0x84>)
 800640a:	480d      	ldr	r0, [pc, #52]	; (8006440 <__multadd+0x88>)
 800640c:	21b5      	movs	r1, #181	; 0xb5
 800640e:	f000 feab 	bl	8007168 <__assert_func>
 8006412:	6922      	ldr	r2, [r4, #16]
 8006414:	3202      	adds	r2, #2
 8006416:	f104 010c 	add.w	r1, r4, #12
 800641a:	0092      	lsls	r2, r2, #2
 800641c:	300c      	adds	r0, #12
 800641e:	f7ff ff5b 	bl	80062d8 <memcpy>
 8006422:	4621      	mov	r1, r4
 8006424:	4638      	mov	r0, r7
 8006426:	f7ff ffa5 	bl	8006374 <_Bfree>
 800642a:	4644      	mov	r4, r8
 800642c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006430:	3501      	adds	r5, #1
 8006432:	615e      	str	r6, [r3, #20]
 8006434:	6125      	str	r5, [r4, #16]
 8006436:	4620      	mov	r0, r4
 8006438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800643c:	080080d0 	.word	0x080080d0
 8006440:	0800815c 	.word	0x0800815c

08006444 <__s2b>:
 8006444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006448:	460c      	mov	r4, r1
 800644a:	4615      	mov	r5, r2
 800644c:	461f      	mov	r7, r3
 800644e:	2209      	movs	r2, #9
 8006450:	3308      	adds	r3, #8
 8006452:	4606      	mov	r6, r0
 8006454:	fb93 f3f2 	sdiv	r3, r3, r2
 8006458:	2100      	movs	r1, #0
 800645a:	2201      	movs	r2, #1
 800645c:	429a      	cmp	r2, r3
 800645e:	db09      	blt.n	8006474 <__s2b+0x30>
 8006460:	4630      	mov	r0, r6
 8006462:	f7ff ff47 	bl	80062f4 <_Balloc>
 8006466:	b940      	cbnz	r0, 800647a <__s2b+0x36>
 8006468:	4602      	mov	r2, r0
 800646a:	4b19      	ldr	r3, [pc, #100]	; (80064d0 <__s2b+0x8c>)
 800646c:	4819      	ldr	r0, [pc, #100]	; (80064d4 <__s2b+0x90>)
 800646e:	21ce      	movs	r1, #206	; 0xce
 8006470:	f000 fe7a 	bl	8007168 <__assert_func>
 8006474:	0052      	lsls	r2, r2, #1
 8006476:	3101      	adds	r1, #1
 8006478:	e7f0      	b.n	800645c <__s2b+0x18>
 800647a:	9b08      	ldr	r3, [sp, #32]
 800647c:	6143      	str	r3, [r0, #20]
 800647e:	2d09      	cmp	r5, #9
 8006480:	f04f 0301 	mov.w	r3, #1
 8006484:	6103      	str	r3, [r0, #16]
 8006486:	dd16      	ble.n	80064b6 <__s2b+0x72>
 8006488:	f104 0909 	add.w	r9, r4, #9
 800648c:	46c8      	mov	r8, r9
 800648e:	442c      	add	r4, r5
 8006490:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006494:	4601      	mov	r1, r0
 8006496:	3b30      	subs	r3, #48	; 0x30
 8006498:	220a      	movs	r2, #10
 800649a:	4630      	mov	r0, r6
 800649c:	f7ff ff8c 	bl	80063b8 <__multadd>
 80064a0:	45a0      	cmp	r8, r4
 80064a2:	d1f5      	bne.n	8006490 <__s2b+0x4c>
 80064a4:	f1a5 0408 	sub.w	r4, r5, #8
 80064a8:	444c      	add	r4, r9
 80064aa:	1b2d      	subs	r5, r5, r4
 80064ac:	1963      	adds	r3, r4, r5
 80064ae:	42bb      	cmp	r3, r7
 80064b0:	db04      	blt.n	80064bc <__s2b+0x78>
 80064b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064b6:	340a      	adds	r4, #10
 80064b8:	2509      	movs	r5, #9
 80064ba:	e7f6      	b.n	80064aa <__s2b+0x66>
 80064bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80064c0:	4601      	mov	r1, r0
 80064c2:	3b30      	subs	r3, #48	; 0x30
 80064c4:	220a      	movs	r2, #10
 80064c6:	4630      	mov	r0, r6
 80064c8:	f7ff ff76 	bl	80063b8 <__multadd>
 80064cc:	e7ee      	b.n	80064ac <__s2b+0x68>
 80064ce:	bf00      	nop
 80064d0:	080080d0 	.word	0x080080d0
 80064d4:	0800815c 	.word	0x0800815c

080064d8 <__hi0bits>:
 80064d8:	0c02      	lsrs	r2, r0, #16
 80064da:	0412      	lsls	r2, r2, #16
 80064dc:	4603      	mov	r3, r0
 80064de:	b9ca      	cbnz	r2, 8006514 <__hi0bits+0x3c>
 80064e0:	0403      	lsls	r3, r0, #16
 80064e2:	2010      	movs	r0, #16
 80064e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80064e8:	bf04      	itt	eq
 80064ea:	021b      	lsleq	r3, r3, #8
 80064ec:	3008      	addeq	r0, #8
 80064ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80064f2:	bf04      	itt	eq
 80064f4:	011b      	lsleq	r3, r3, #4
 80064f6:	3004      	addeq	r0, #4
 80064f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80064fc:	bf04      	itt	eq
 80064fe:	009b      	lsleq	r3, r3, #2
 8006500:	3002      	addeq	r0, #2
 8006502:	2b00      	cmp	r3, #0
 8006504:	db05      	blt.n	8006512 <__hi0bits+0x3a>
 8006506:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800650a:	f100 0001 	add.w	r0, r0, #1
 800650e:	bf08      	it	eq
 8006510:	2020      	moveq	r0, #32
 8006512:	4770      	bx	lr
 8006514:	2000      	movs	r0, #0
 8006516:	e7e5      	b.n	80064e4 <__hi0bits+0xc>

08006518 <__lo0bits>:
 8006518:	6803      	ldr	r3, [r0, #0]
 800651a:	4602      	mov	r2, r0
 800651c:	f013 0007 	ands.w	r0, r3, #7
 8006520:	d00b      	beq.n	800653a <__lo0bits+0x22>
 8006522:	07d9      	lsls	r1, r3, #31
 8006524:	d421      	bmi.n	800656a <__lo0bits+0x52>
 8006526:	0798      	lsls	r0, r3, #30
 8006528:	bf49      	itett	mi
 800652a:	085b      	lsrmi	r3, r3, #1
 800652c:	089b      	lsrpl	r3, r3, #2
 800652e:	2001      	movmi	r0, #1
 8006530:	6013      	strmi	r3, [r2, #0]
 8006532:	bf5c      	itt	pl
 8006534:	6013      	strpl	r3, [r2, #0]
 8006536:	2002      	movpl	r0, #2
 8006538:	4770      	bx	lr
 800653a:	b299      	uxth	r1, r3
 800653c:	b909      	cbnz	r1, 8006542 <__lo0bits+0x2a>
 800653e:	0c1b      	lsrs	r3, r3, #16
 8006540:	2010      	movs	r0, #16
 8006542:	b2d9      	uxtb	r1, r3
 8006544:	b909      	cbnz	r1, 800654a <__lo0bits+0x32>
 8006546:	3008      	adds	r0, #8
 8006548:	0a1b      	lsrs	r3, r3, #8
 800654a:	0719      	lsls	r1, r3, #28
 800654c:	bf04      	itt	eq
 800654e:	091b      	lsreq	r3, r3, #4
 8006550:	3004      	addeq	r0, #4
 8006552:	0799      	lsls	r1, r3, #30
 8006554:	bf04      	itt	eq
 8006556:	089b      	lsreq	r3, r3, #2
 8006558:	3002      	addeq	r0, #2
 800655a:	07d9      	lsls	r1, r3, #31
 800655c:	d403      	bmi.n	8006566 <__lo0bits+0x4e>
 800655e:	085b      	lsrs	r3, r3, #1
 8006560:	f100 0001 	add.w	r0, r0, #1
 8006564:	d003      	beq.n	800656e <__lo0bits+0x56>
 8006566:	6013      	str	r3, [r2, #0]
 8006568:	4770      	bx	lr
 800656a:	2000      	movs	r0, #0
 800656c:	4770      	bx	lr
 800656e:	2020      	movs	r0, #32
 8006570:	4770      	bx	lr
	...

08006574 <__i2b>:
 8006574:	b510      	push	{r4, lr}
 8006576:	460c      	mov	r4, r1
 8006578:	2101      	movs	r1, #1
 800657a:	f7ff febb 	bl	80062f4 <_Balloc>
 800657e:	4602      	mov	r2, r0
 8006580:	b928      	cbnz	r0, 800658e <__i2b+0x1a>
 8006582:	4b05      	ldr	r3, [pc, #20]	; (8006598 <__i2b+0x24>)
 8006584:	4805      	ldr	r0, [pc, #20]	; (800659c <__i2b+0x28>)
 8006586:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800658a:	f000 fded 	bl	8007168 <__assert_func>
 800658e:	2301      	movs	r3, #1
 8006590:	6144      	str	r4, [r0, #20]
 8006592:	6103      	str	r3, [r0, #16]
 8006594:	bd10      	pop	{r4, pc}
 8006596:	bf00      	nop
 8006598:	080080d0 	.word	0x080080d0
 800659c:	0800815c 	.word	0x0800815c

080065a0 <__multiply>:
 80065a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a4:	4691      	mov	r9, r2
 80065a6:	690a      	ldr	r2, [r1, #16]
 80065a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	bfb8      	it	lt
 80065b0:	460b      	movlt	r3, r1
 80065b2:	460c      	mov	r4, r1
 80065b4:	bfbc      	itt	lt
 80065b6:	464c      	movlt	r4, r9
 80065b8:	4699      	movlt	r9, r3
 80065ba:	6927      	ldr	r7, [r4, #16]
 80065bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80065c0:	68a3      	ldr	r3, [r4, #8]
 80065c2:	6861      	ldr	r1, [r4, #4]
 80065c4:	eb07 060a 	add.w	r6, r7, sl
 80065c8:	42b3      	cmp	r3, r6
 80065ca:	b085      	sub	sp, #20
 80065cc:	bfb8      	it	lt
 80065ce:	3101      	addlt	r1, #1
 80065d0:	f7ff fe90 	bl	80062f4 <_Balloc>
 80065d4:	b930      	cbnz	r0, 80065e4 <__multiply+0x44>
 80065d6:	4602      	mov	r2, r0
 80065d8:	4b43      	ldr	r3, [pc, #268]	; (80066e8 <__multiply+0x148>)
 80065da:	4844      	ldr	r0, [pc, #272]	; (80066ec <__multiply+0x14c>)
 80065dc:	f240 115d 	movw	r1, #349	; 0x15d
 80065e0:	f000 fdc2 	bl	8007168 <__assert_func>
 80065e4:	f100 0514 	add.w	r5, r0, #20
 80065e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80065ec:	462b      	mov	r3, r5
 80065ee:	2200      	movs	r2, #0
 80065f0:	4543      	cmp	r3, r8
 80065f2:	d321      	bcc.n	8006638 <__multiply+0x98>
 80065f4:	f104 0314 	add.w	r3, r4, #20
 80065f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80065fc:	f109 0314 	add.w	r3, r9, #20
 8006600:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006604:	9202      	str	r2, [sp, #8]
 8006606:	1b3a      	subs	r2, r7, r4
 8006608:	3a15      	subs	r2, #21
 800660a:	f022 0203 	bic.w	r2, r2, #3
 800660e:	3204      	adds	r2, #4
 8006610:	f104 0115 	add.w	r1, r4, #21
 8006614:	428f      	cmp	r7, r1
 8006616:	bf38      	it	cc
 8006618:	2204      	movcc	r2, #4
 800661a:	9201      	str	r2, [sp, #4]
 800661c:	9a02      	ldr	r2, [sp, #8]
 800661e:	9303      	str	r3, [sp, #12]
 8006620:	429a      	cmp	r2, r3
 8006622:	d80c      	bhi.n	800663e <__multiply+0x9e>
 8006624:	2e00      	cmp	r6, #0
 8006626:	dd03      	ble.n	8006630 <__multiply+0x90>
 8006628:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800662c:	2b00      	cmp	r3, #0
 800662e:	d059      	beq.n	80066e4 <__multiply+0x144>
 8006630:	6106      	str	r6, [r0, #16]
 8006632:	b005      	add	sp, #20
 8006634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006638:	f843 2b04 	str.w	r2, [r3], #4
 800663c:	e7d8      	b.n	80065f0 <__multiply+0x50>
 800663e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006642:	f1ba 0f00 	cmp.w	sl, #0
 8006646:	d023      	beq.n	8006690 <__multiply+0xf0>
 8006648:	f104 0e14 	add.w	lr, r4, #20
 800664c:	46a9      	mov	r9, r5
 800664e:	f04f 0c00 	mov.w	ip, #0
 8006652:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006656:	f8d9 1000 	ldr.w	r1, [r9]
 800665a:	fa1f fb82 	uxth.w	fp, r2
 800665e:	b289      	uxth	r1, r1
 8006660:	fb0a 110b 	mla	r1, sl, fp, r1
 8006664:	4461      	add	r1, ip
 8006666:	f8d9 c000 	ldr.w	ip, [r9]
 800666a:	0c12      	lsrs	r2, r2, #16
 800666c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006670:	fb0a c202 	mla	r2, sl, r2, ip
 8006674:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006678:	b289      	uxth	r1, r1
 800667a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800667e:	4577      	cmp	r7, lr
 8006680:	f849 1b04 	str.w	r1, [r9], #4
 8006684:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006688:	d8e3      	bhi.n	8006652 <__multiply+0xb2>
 800668a:	9a01      	ldr	r2, [sp, #4]
 800668c:	f845 c002 	str.w	ip, [r5, r2]
 8006690:	9a03      	ldr	r2, [sp, #12]
 8006692:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006696:	3304      	adds	r3, #4
 8006698:	f1b9 0f00 	cmp.w	r9, #0
 800669c:	d020      	beq.n	80066e0 <__multiply+0x140>
 800669e:	6829      	ldr	r1, [r5, #0]
 80066a0:	f104 0c14 	add.w	ip, r4, #20
 80066a4:	46ae      	mov	lr, r5
 80066a6:	f04f 0a00 	mov.w	sl, #0
 80066aa:	f8bc b000 	ldrh.w	fp, [ip]
 80066ae:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80066b2:	fb09 220b 	mla	r2, r9, fp, r2
 80066b6:	4492      	add	sl, r2
 80066b8:	b289      	uxth	r1, r1
 80066ba:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80066be:	f84e 1b04 	str.w	r1, [lr], #4
 80066c2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80066c6:	f8be 1000 	ldrh.w	r1, [lr]
 80066ca:	0c12      	lsrs	r2, r2, #16
 80066cc:	fb09 1102 	mla	r1, r9, r2, r1
 80066d0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80066d4:	4567      	cmp	r7, ip
 80066d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80066da:	d8e6      	bhi.n	80066aa <__multiply+0x10a>
 80066dc:	9a01      	ldr	r2, [sp, #4]
 80066de:	50a9      	str	r1, [r5, r2]
 80066e0:	3504      	adds	r5, #4
 80066e2:	e79b      	b.n	800661c <__multiply+0x7c>
 80066e4:	3e01      	subs	r6, #1
 80066e6:	e79d      	b.n	8006624 <__multiply+0x84>
 80066e8:	080080d0 	.word	0x080080d0
 80066ec:	0800815c 	.word	0x0800815c

080066f0 <__pow5mult>:
 80066f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066f4:	4615      	mov	r5, r2
 80066f6:	f012 0203 	ands.w	r2, r2, #3
 80066fa:	4606      	mov	r6, r0
 80066fc:	460f      	mov	r7, r1
 80066fe:	d007      	beq.n	8006710 <__pow5mult+0x20>
 8006700:	4c25      	ldr	r4, [pc, #148]	; (8006798 <__pow5mult+0xa8>)
 8006702:	3a01      	subs	r2, #1
 8006704:	2300      	movs	r3, #0
 8006706:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800670a:	f7ff fe55 	bl	80063b8 <__multadd>
 800670e:	4607      	mov	r7, r0
 8006710:	10ad      	asrs	r5, r5, #2
 8006712:	d03d      	beq.n	8006790 <__pow5mult+0xa0>
 8006714:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006716:	b97c      	cbnz	r4, 8006738 <__pow5mult+0x48>
 8006718:	2010      	movs	r0, #16
 800671a:	f7ff fdc3 	bl	80062a4 <malloc>
 800671e:	4602      	mov	r2, r0
 8006720:	6270      	str	r0, [r6, #36]	; 0x24
 8006722:	b928      	cbnz	r0, 8006730 <__pow5mult+0x40>
 8006724:	4b1d      	ldr	r3, [pc, #116]	; (800679c <__pow5mult+0xac>)
 8006726:	481e      	ldr	r0, [pc, #120]	; (80067a0 <__pow5mult+0xb0>)
 8006728:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800672c:	f000 fd1c 	bl	8007168 <__assert_func>
 8006730:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006734:	6004      	str	r4, [r0, #0]
 8006736:	60c4      	str	r4, [r0, #12]
 8006738:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800673c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006740:	b94c      	cbnz	r4, 8006756 <__pow5mult+0x66>
 8006742:	f240 2171 	movw	r1, #625	; 0x271
 8006746:	4630      	mov	r0, r6
 8006748:	f7ff ff14 	bl	8006574 <__i2b>
 800674c:	2300      	movs	r3, #0
 800674e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006752:	4604      	mov	r4, r0
 8006754:	6003      	str	r3, [r0, #0]
 8006756:	f04f 0900 	mov.w	r9, #0
 800675a:	07eb      	lsls	r3, r5, #31
 800675c:	d50a      	bpl.n	8006774 <__pow5mult+0x84>
 800675e:	4639      	mov	r1, r7
 8006760:	4622      	mov	r2, r4
 8006762:	4630      	mov	r0, r6
 8006764:	f7ff ff1c 	bl	80065a0 <__multiply>
 8006768:	4639      	mov	r1, r7
 800676a:	4680      	mov	r8, r0
 800676c:	4630      	mov	r0, r6
 800676e:	f7ff fe01 	bl	8006374 <_Bfree>
 8006772:	4647      	mov	r7, r8
 8006774:	106d      	asrs	r5, r5, #1
 8006776:	d00b      	beq.n	8006790 <__pow5mult+0xa0>
 8006778:	6820      	ldr	r0, [r4, #0]
 800677a:	b938      	cbnz	r0, 800678c <__pow5mult+0x9c>
 800677c:	4622      	mov	r2, r4
 800677e:	4621      	mov	r1, r4
 8006780:	4630      	mov	r0, r6
 8006782:	f7ff ff0d 	bl	80065a0 <__multiply>
 8006786:	6020      	str	r0, [r4, #0]
 8006788:	f8c0 9000 	str.w	r9, [r0]
 800678c:	4604      	mov	r4, r0
 800678e:	e7e4      	b.n	800675a <__pow5mult+0x6a>
 8006790:	4638      	mov	r0, r7
 8006792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006796:	bf00      	nop
 8006798:	080082a8 	.word	0x080082a8
 800679c:	0800805e 	.word	0x0800805e
 80067a0:	0800815c 	.word	0x0800815c

080067a4 <__lshift>:
 80067a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067a8:	460c      	mov	r4, r1
 80067aa:	6849      	ldr	r1, [r1, #4]
 80067ac:	6923      	ldr	r3, [r4, #16]
 80067ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80067b2:	68a3      	ldr	r3, [r4, #8]
 80067b4:	4607      	mov	r7, r0
 80067b6:	4691      	mov	r9, r2
 80067b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80067bc:	f108 0601 	add.w	r6, r8, #1
 80067c0:	42b3      	cmp	r3, r6
 80067c2:	db0b      	blt.n	80067dc <__lshift+0x38>
 80067c4:	4638      	mov	r0, r7
 80067c6:	f7ff fd95 	bl	80062f4 <_Balloc>
 80067ca:	4605      	mov	r5, r0
 80067cc:	b948      	cbnz	r0, 80067e2 <__lshift+0x3e>
 80067ce:	4602      	mov	r2, r0
 80067d0:	4b2a      	ldr	r3, [pc, #168]	; (800687c <__lshift+0xd8>)
 80067d2:	482b      	ldr	r0, [pc, #172]	; (8006880 <__lshift+0xdc>)
 80067d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80067d8:	f000 fcc6 	bl	8007168 <__assert_func>
 80067dc:	3101      	adds	r1, #1
 80067de:	005b      	lsls	r3, r3, #1
 80067e0:	e7ee      	b.n	80067c0 <__lshift+0x1c>
 80067e2:	2300      	movs	r3, #0
 80067e4:	f100 0114 	add.w	r1, r0, #20
 80067e8:	f100 0210 	add.w	r2, r0, #16
 80067ec:	4618      	mov	r0, r3
 80067ee:	4553      	cmp	r3, sl
 80067f0:	db37      	blt.n	8006862 <__lshift+0xbe>
 80067f2:	6920      	ldr	r0, [r4, #16]
 80067f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067f8:	f104 0314 	add.w	r3, r4, #20
 80067fc:	f019 091f 	ands.w	r9, r9, #31
 8006800:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006804:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006808:	d02f      	beq.n	800686a <__lshift+0xc6>
 800680a:	f1c9 0e20 	rsb	lr, r9, #32
 800680e:	468a      	mov	sl, r1
 8006810:	f04f 0c00 	mov.w	ip, #0
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	fa02 f209 	lsl.w	r2, r2, r9
 800681a:	ea42 020c 	orr.w	r2, r2, ip
 800681e:	f84a 2b04 	str.w	r2, [sl], #4
 8006822:	f853 2b04 	ldr.w	r2, [r3], #4
 8006826:	4298      	cmp	r0, r3
 8006828:	fa22 fc0e 	lsr.w	ip, r2, lr
 800682c:	d8f2      	bhi.n	8006814 <__lshift+0x70>
 800682e:	1b03      	subs	r3, r0, r4
 8006830:	3b15      	subs	r3, #21
 8006832:	f023 0303 	bic.w	r3, r3, #3
 8006836:	3304      	adds	r3, #4
 8006838:	f104 0215 	add.w	r2, r4, #21
 800683c:	4290      	cmp	r0, r2
 800683e:	bf38      	it	cc
 8006840:	2304      	movcc	r3, #4
 8006842:	f841 c003 	str.w	ip, [r1, r3]
 8006846:	f1bc 0f00 	cmp.w	ip, #0
 800684a:	d001      	beq.n	8006850 <__lshift+0xac>
 800684c:	f108 0602 	add.w	r6, r8, #2
 8006850:	3e01      	subs	r6, #1
 8006852:	4638      	mov	r0, r7
 8006854:	612e      	str	r6, [r5, #16]
 8006856:	4621      	mov	r1, r4
 8006858:	f7ff fd8c 	bl	8006374 <_Bfree>
 800685c:	4628      	mov	r0, r5
 800685e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006862:	f842 0f04 	str.w	r0, [r2, #4]!
 8006866:	3301      	adds	r3, #1
 8006868:	e7c1      	b.n	80067ee <__lshift+0x4a>
 800686a:	3904      	subs	r1, #4
 800686c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006870:	f841 2f04 	str.w	r2, [r1, #4]!
 8006874:	4298      	cmp	r0, r3
 8006876:	d8f9      	bhi.n	800686c <__lshift+0xc8>
 8006878:	e7ea      	b.n	8006850 <__lshift+0xac>
 800687a:	bf00      	nop
 800687c:	080080d0 	.word	0x080080d0
 8006880:	0800815c 	.word	0x0800815c

08006884 <__mcmp>:
 8006884:	690a      	ldr	r2, [r1, #16]
 8006886:	4603      	mov	r3, r0
 8006888:	6900      	ldr	r0, [r0, #16]
 800688a:	1a80      	subs	r0, r0, r2
 800688c:	b530      	push	{r4, r5, lr}
 800688e:	d10d      	bne.n	80068ac <__mcmp+0x28>
 8006890:	3314      	adds	r3, #20
 8006892:	3114      	adds	r1, #20
 8006894:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006898:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800689c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80068a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80068a4:	4295      	cmp	r5, r2
 80068a6:	d002      	beq.n	80068ae <__mcmp+0x2a>
 80068a8:	d304      	bcc.n	80068b4 <__mcmp+0x30>
 80068aa:	2001      	movs	r0, #1
 80068ac:	bd30      	pop	{r4, r5, pc}
 80068ae:	42a3      	cmp	r3, r4
 80068b0:	d3f4      	bcc.n	800689c <__mcmp+0x18>
 80068b2:	e7fb      	b.n	80068ac <__mcmp+0x28>
 80068b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068b8:	e7f8      	b.n	80068ac <__mcmp+0x28>
	...

080068bc <__mdiff>:
 80068bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c0:	460d      	mov	r5, r1
 80068c2:	4607      	mov	r7, r0
 80068c4:	4611      	mov	r1, r2
 80068c6:	4628      	mov	r0, r5
 80068c8:	4614      	mov	r4, r2
 80068ca:	f7ff ffdb 	bl	8006884 <__mcmp>
 80068ce:	1e06      	subs	r6, r0, #0
 80068d0:	d111      	bne.n	80068f6 <__mdiff+0x3a>
 80068d2:	4631      	mov	r1, r6
 80068d4:	4638      	mov	r0, r7
 80068d6:	f7ff fd0d 	bl	80062f4 <_Balloc>
 80068da:	4602      	mov	r2, r0
 80068dc:	b928      	cbnz	r0, 80068ea <__mdiff+0x2e>
 80068de:	4b39      	ldr	r3, [pc, #228]	; (80069c4 <__mdiff+0x108>)
 80068e0:	f240 2132 	movw	r1, #562	; 0x232
 80068e4:	4838      	ldr	r0, [pc, #224]	; (80069c8 <__mdiff+0x10c>)
 80068e6:	f000 fc3f 	bl	8007168 <__assert_func>
 80068ea:	2301      	movs	r3, #1
 80068ec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80068f0:	4610      	mov	r0, r2
 80068f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f6:	bfa4      	itt	ge
 80068f8:	4623      	movge	r3, r4
 80068fa:	462c      	movge	r4, r5
 80068fc:	4638      	mov	r0, r7
 80068fe:	6861      	ldr	r1, [r4, #4]
 8006900:	bfa6      	itte	ge
 8006902:	461d      	movge	r5, r3
 8006904:	2600      	movge	r6, #0
 8006906:	2601      	movlt	r6, #1
 8006908:	f7ff fcf4 	bl	80062f4 <_Balloc>
 800690c:	4602      	mov	r2, r0
 800690e:	b918      	cbnz	r0, 8006918 <__mdiff+0x5c>
 8006910:	4b2c      	ldr	r3, [pc, #176]	; (80069c4 <__mdiff+0x108>)
 8006912:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006916:	e7e5      	b.n	80068e4 <__mdiff+0x28>
 8006918:	6927      	ldr	r7, [r4, #16]
 800691a:	60c6      	str	r6, [r0, #12]
 800691c:	692e      	ldr	r6, [r5, #16]
 800691e:	f104 0014 	add.w	r0, r4, #20
 8006922:	f105 0914 	add.w	r9, r5, #20
 8006926:	f102 0e14 	add.w	lr, r2, #20
 800692a:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800692e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006932:	3410      	adds	r4, #16
 8006934:	46f2      	mov	sl, lr
 8006936:	2100      	movs	r1, #0
 8006938:	f859 3b04 	ldr.w	r3, [r9], #4
 800693c:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006940:	fa1f f883 	uxth.w	r8, r3
 8006944:	fa11 f18b 	uxtah	r1, r1, fp
 8006948:	0c1b      	lsrs	r3, r3, #16
 800694a:	eba1 0808 	sub.w	r8, r1, r8
 800694e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006952:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006956:	fa1f f888 	uxth.w	r8, r8
 800695a:	1419      	asrs	r1, r3, #16
 800695c:	454e      	cmp	r6, r9
 800695e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006962:	f84a 3b04 	str.w	r3, [sl], #4
 8006966:	d8e7      	bhi.n	8006938 <__mdiff+0x7c>
 8006968:	1b73      	subs	r3, r6, r5
 800696a:	3b15      	subs	r3, #21
 800696c:	f023 0303 	bic.w	r3, r3, #3
 8006970:	3304      	adds	r3, #4
 8006972:	3515      	adds	r5, #21
 8006974:	42ae      	cmp	r6, r5
 8006976:	bf38      	it	cc
 8006978:	2304      	movcc	r3, #4
 800697a:	4418      	add	r0, r3
 800697c:	4473      	add	r3, lr
 800697e:	469e      	mov	lr, r3
 8006980:	4606      	mov	r6, r0
 8006982:	4566      	cmp	r6, ip
 8006984:	d30e      	bcc.n	80069a4 <__mdiff+0xe8>
 8006986:	f10c 0103 	add.w	r1, ip, #3
 800698a:	1a09      	subs	r1, r1, r0
 800698c:	f021 0103 	bic.w	r1, r1, #3
 8006990:	3803      	subs	r0, #3
 8006992:	4584      	cmp	ip, r0
 8006994:	bf38      	it	cc
 8006996:	2100      	movcc	r1, #0
 8006998:	4419      	add	r1, r3
 800699a:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800699e:	b17b      	cbz	r3, 80069c0 <__mdiff+0x104>
 80069a0:	6117      	str	r7, [r2, #16]
 80069a2:	e7a5      	b.n	80068f0 <__mdiff+0x34>
 80069a4:	f856 8b04 	ldr.w	r8, [r6], #4
 80069a8:	fa11 f488 	uxtah	r4, r1, r8
 80069ac:	1425      	asrs	r5, r4, #16
 80069ae:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 80069b2:	b2a4      	uxth	r4, r4
 80069b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80069b8:	f84e 4b04 	str.w	r4, [lr], #4
 80069bc:	1429      	asrs	r1, r5, #16
 80069be:	e7e0      	b.n	8006982 <__mdiff+0xc6>
 80069c0:	3f01      	subs	r7, #1
 80069c2:	e7ea      	b.n	800699a <__mdiff+0xde>
 80069c4:	080080d0 	.word	0x080080d0
 80069c8:	0800815c 	.word	0x0800815c

080069cc <__ulp>:
 80069cc:	4b11      	ldr	r3, [pc, #68]	; (8006a14 <__ulp+0x48>)
 80069ce:	400b      	ands	r3, r1
 80069d0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	dd02      	ble.n	80069de <__ulp+0x12>
 80069d8:	2000      	movs	r0, #0
 80069da:	4619      	mov	r1, r3
 80069dc:	4770      	bx	lr
 80069de:	425b      	negs	r3, r3
 80069e0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80069e4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80069e8:	f04f 0000 	mov.w	r0, #0
 80069ec:	f04f 0100 	mov.w	r1, #0
 80069f0:	da04      	bge.n	80069fc <__ulp+0x30>
 80069f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80069f6:	fa43 f102 	asr.w	r1, r3, r2
 80069fa:	4770      	bx	lr
 80069fc:	f1a2 0314 	sub.w	r3, r2, #20
 8006a00:	2b1e      	cmp	r3, #30
 8006a02:	bfda      	itte	le
 8006a04:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006a08:	fa22 f303 	lsrle.w	r3, r2, r3
 8006a0c:	2301      	movgt	r3, #1
 8006a0e:	4618      	mov	r0, r3
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	7ff00000 	.word	0x7ff00000

08006a18 <__b2d>:
 8006a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a1c:	6907      	ldr	r7, [r0, #16]
 8006a1e:	f100 0914 	add.w	r9, r0, #20
 8006a22:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006a26:	f1a7 0804 	sub.w	r8, r7, #4
 8006a2a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006a2e:	4630      	mov	r0, r6
 8006a30:	f7ff fd52 	bl	80064d8 <__hi0bits>
 8006a34:	f1c0 0320 	rsb	r3, r0, #32
 8006a38:	280a      	cmp	r0, #10
 8006a3a:	600b      	str	r3, [r1, #0]
 8006a3c:	491f      	ldr	r1, [pc, #124]	; (8006abc <__b2d+0xa4>)
 8006a3e:	dc17      	bgt.n	8006a70 <__b2d+0x58>
 8006a40:	f1c0 0c0b 	rsb	ip, r0, #11
 8006a44:	45c1      	cmp	r9, r8
 8006a46:	fa26 f30c 	lsr.w	r3, r6, ip
 8006a4a:	bf38      	it	cc
 8006a4c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006a50:	ea43 0501 	orr.w	r5, r3, r1
 8006a54:	bf28      	it	cs
 8006a56:	2200      	movcs	r2, #0
 8006a58:	f100 0315 	add.w	r3, r0, #21
 8006a5c:	fa06 f303 	lsl.w	r3, r6, r3
 8006a60:	fa22 f20c 	lsr.w	r2, r2, ip
 8006a64:	ea43 0402 	orr.w	r4, r3, r2
 8006a68:	4620      	mov	r0, r4
 8006a6a:	4629      	mov	r1, r5
 8006a6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a70:	45c1      	cmp	r9, r8
 8006a72:	bf3a      	itte	cc
 8006a74:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006a78:	f1a7 0808 	subcc.w	r8, r7, #8
 8006a7c:	2200      	movcs	r2, #0
 8006a7e:	f1b0 030b 	subs.w	r3, r0, #11
 8006a82:	d016      	beq.n	8006ab2 <__b2d+0x9a>
 8006a84:	f1c3 0720 	rsb	r7, r3, #32
 8006a88:	fa22 f107 	lsr.w	r1, r2, r7
 8006a8c:	45c8      	cmp	r8, r9
 8006a8e:	fa06 f603 	lsl.w	r6, r6, r3
 8006a92:	ea46 0601 	orr.w	r6, r6, r1
 8006a96:	bf8c      	ite	hi
 8006a98:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006a9c:	2100      	movls	r1, #0
 8006a9e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8006aa2:	fa02 f003 	lsl.w	r0, r2, r3
 8006aa6:	40f9      	lsrs	r1, r7
 8006aa8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006aac:	ea40 0401 	orr.w	r4, r0, r1
 8006ab0:	e7da      	b.n	8006a68 <__b2d+0x50>
 8006ab2:	ea46 0501 	orr.w	r5, r6, r1
 8006ab6:	4614      	mov	r4, r2
 8006ab8:	e7d6      	b.n	8006a68 <__b2d+0x50>
 8006aba:	bf00      	nop
 8006abc:	3ff00000 	.word	0x3ff00000

08006ac0 <__d2b>:
 8006ac0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006aca:	4690      	mov	r8, r2
 8006acc:	461d      	mov	r5, r3
 8006ace:	f7ff fc11 	bl	80062f4 <_Balloc>
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	b930      	cbnz	r0, 8006ae4 <__d2b+0x24>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	4b25      	ldr	r3, [pc, #148]	; (8006b70 <__d2b+0xb0>)
 8006ada:	4826      	ldr	r0, [pc, #152]	; (8006b74 <__d2b+0xb4>)
 8006adc:	f240 310a 	movw	r1, #778	; 0x30a
 8006ae0:	f000 fb42 	bl	8007168 <__assert_func>
 8006ae4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006ae8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006aec:	bb2d      	cbnz	r5, 8006b3a <__d2b+0x7a>
 8006aee:	9301      	str	r3, [sp, #4]
 8006af0:	f1b8 0300 	subs.w	r3, r8, #0
 8006af4:	d026      	beq.n	8006b44 <__d2b+0x84>
 8006af6:	4668      	mov	r0, sp
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	f7ff fd0d 	bl	8006518 <__lo0bits>
 8006afe:	9900      	ldr	r1, [sp, #0]
 8006b00:	b1f0      	cbz	r0, 8006b40 <__d2b+0x80>
 8006b02:	9a01      	ldr	r2, [sp, #4]
 8006b04:	f1c0 0320 	rsb	r3, r0, #32
 8006b08:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0c:	430b      	orrs	r3, r1
 8006b0e:	40c2      	lsrs	r2, r0
 8006b10:	6163      	str	r3, [r4, #20]
 8006b12:	9201      	str	r2, [sp, #4]
 8006b14:	9b01      	ldr	r3, [sp, #4]
 8006b16:	61a3      	str	r3, [r4, #24]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	bf14      	ite	ne
 8006b1c:	2102      	movne	r1, #2
 8006b1e:	2101      	moveq	r1, #1
 8006b20:	6121      	str	r1, [r4, #16]
 8006b22:	b1c5      	cbz	r5, 8006b56 <__d2b+0x96>
 8006b24:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b28:	4405      	add	r5, r0
 8006b2a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b2e:	603d      	str	r5, [r7, #0]
 8006b30:	6030      	str	r0, [r6, #0]
 8006b32:	4620      	mov	r0, r4
 8006b34:	b002      	add	sp, #8
 8006b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b3e:	e7d6      	b.n	8006aee <__d2b+0x2e>
 8006b40:	6161      	str	r1, [r4, #20]
 8006b42:	e7e7      	b.n	8006b14 <__d2b+0x54>
 8006b44:	a801      	add	r0, sp, #4
 8006b46:	f7ff fce7 	bl	8006518 <__lo0bits>
 8006b4a:	9b01      	ldr	r3, [sp, #4]
 8006b4c:	6163      	str	r3, [r4, #20]
 8006b4e:	2101      	movs	r1, #1
 8006b50:	6121      	str	r1, [r4, #16]
 8006b52:	3020      	adds	r0, #32
 8006b54:	e7e5      	b.n	8006b22 <__d2b+0x62>
 8006b56:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006b5a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b5e:	6038      	str	r0, [r7, #0]
 8006b60:	6918      	ldr	r0, [r3, #16]
 8006b62:	f7ff fcb9 	bl	80064d8 <__hi0bits>
 8006b66:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006b6a:	6031      	str	r1, [r6, #0]
 8006b6c:	e7e1      	b.n	8006b32 <__d2b+0x72>
 8006b6e:	bf00      	nop
 8006b70:	080080d0 	.word	0x080080d0
 8006b74:	0800815c 	.word	0x0800815c

08006b78 <__ratio>:
 8006b78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7c:	4688      	mov	r8, r1
 8006b7e:	4669      	mov	r1, sp
 8006b80:	4681      	mov	r9, r0
 8006b82:	f7ff ff49 	bl	8006a18 <__b2d>
 8006b86:	460f      	mov	r7, r1
 8006b88:	4604      	mov	r4, r0
 8006b8a:	460d      	mov	r5, r1
 8006b8c:	4640      	mov	r0, r8
 8006b8e:	a901      	add	r1, sp, #4
 8006b90:	f7ff ff42 	bl	8006a18 <__b2d>
 8006b94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006b98:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006b9c:	eba3 0c02 	sub.w	ip, r3, r2
 8006ba0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006ba4:	1a9b      	subs	r3, r3, r2
 8006ba6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	bfd5      	itete	le
 8006bae:	460a      	movle	r2, r1
 8006bb0:	462a      	movgt	r2, r5
 8006bb2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006bb6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006bba:	468b      	mov	fp, r1
 8006bbc:	bfd8      	it	le
 8006bbe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006bc2:	465b      	mov	r3, fp
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	4639      	mov	r1, r7
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f7f9 fe47 	bl	800085c <__aeabi_ddiv>
 8006bce:	b003      	add	sp, #12
 8006bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006bd4 <__copybits>:
 8006bd4:	3901      	subs	r1, #1
 8006bd6:	b570      	push	{r4, r5, r6, lr}
 8006bd8:	1149      	asrs	r1, r1, #5
 8006bda:	6914      	ldr	r4, [r2, #16]
 8006bdc:	3101      	adds	r1, #1
 8006bde:	f102 0314 	add.w	r3, r2, #20
 8006be2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006be6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006bea:	1f05      	subs	r5, r0, #4
 8006bec:	42a3      	cmp	r3, r4
 8006bee:	d30c      	bcc.n	8006c0a <__copybits+0x36>
 8006bf0:	1aa3      	subs	r3, r4, r2
 8006bf2:	3b11      	subs	r3, #17
 8006bf4:	f023 0303 	bic.w	r3, r3, #3
 8006bf8:	3211      	adds	r2, #17
 8006bfa:	42a2      	cmp	r2, r4
 8006bfc:	bf88      	it	hi
 8006bfe:	2300      	movhi	r3, #0
 8006c00:	4418      	add	r0, r3
 8006c02:	2300      	movs	r3, #0
 8006c04:	4288      	cmp	r0, r1
 8006c06:	d305      	bcc.n	8006c14 <__copybits+0x40>
 8006c08:	bd70      	pop	{r4, r5, r6, pc}
 8006c0a:	f853 6b04 	ldr.w	r6, [r3], #4
 8006c0e:	f845 6f04 	str.w	r6, [r5, #4]!
 8006c12:	e7eb      	b.n	8006bec <__copybits+0x18>
 8006c14:	f840 3b04 	str.w	r3, [r0], #4
 8006c18:	e7f4      	b.n	8006c04 <__copybits+0x30>

08006c1a <__any_on>:
 8006c1a:	f100 0214 	add.w	r2, r0, #20
 8006c1e:	6900      	ldr	r0, [r0, #16]
 8006c20:	114b      	asrs	r3, r1, #5
 8006c22:	4298      	cmp	r0, r3
 8006c24:	b510      	push	{r4, lr}
 8006c26:	db11      	blt.n	8006c4c <__any_on+0x32>
 8006c28:	dd0a      	ble.n	8006c40 <__any_on+0x26>
 8006c2a:	f011 011f 	ands.w	r1, r1, #31
 8006c2e:	d007      	beq.n	8006c40 <__any_on+0x26>
 8006c30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006c34:	fa24 f001 	lsr.w	r0, r4, r1
 8006c38:	fa00 f101 	lsl.w	r1, r0, r1
 8006c3c:	428c      	cmp	r4, r1
 8006c3e:	d10b      	bne.n	8006c58 <__any_on+0x3e>
 8006c40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d803      	bhi.n	8006c50 <__any_on+0x36>
 8006c48:	2000      	movs	r0, #0
 8006c4a:	bd10      	pop	{r4, pc}
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	e7f7      	b.n	8006c40 <__any_on+0x26>
 8006c50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006c54:	2900      	cmp	r1, #0
 8006c56:	d0f5      	beq.n	8006c44 <__any_on+0x2a>
 8006c58:	2001      	movs	r0, #1
 8006c5a:	e7f6      	b.n	8006c4a <__any_on+0x30>

08006c5c <_calloc_r>:
 8006c5c:	b570      	push	{r4, r5, r6, lr}
 8006c5e:	fba1 5402 	umull	r5, r4, r1, r2
 8006c62:	b934      	cbnz	r4, 8006c72 <_calloc_r+0x16>
 8006c64:	4629      	mov	r1, r5
 8006c66:	f000 f877 	bl	8006d58 <_malloc_r>
 8006c6a:	4606      	mov	r6, r0
 8006c6c:	b928      	cbnz	r0, 8006c7a <_calloc_r+0x1e>
 8006c6e:	4630      	mov	r0, r6
 8006c70:	bd70      	pop	{r4, r5, r6, pc}
 8006c72:	220c      	movs	r2, #12
 8006c74:	6002      	str	r2, [r0, #0]
 8006c76:	2600      	movs	r6, #0
 8006c78:	e7f9      	b.n	8006c6e <_calloc_r+0x12>
 8006c7a:	462a      	mov	r2, r5
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	f7fc fc07 	bl	8003490 <memset>
 8006c82:	e7f4      	b.n	8006c6e <_calloc_r+0x12>

08006c84 <_free_r>:
 8006c84:	b538      	push	{r3, r4, r5, lr}
 8006c86:	4605      	mov	r5, r0
 8006c88:	2900      	cmp	r1, #0
 8006c8a:	d041      	beq.n	8006d10 <_free_r+0x8c>
 8006c8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c90:	1f0c      	subs	r4, r1, #4
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	bfb8      	it	lt
 8006c96:	18e4      	addlt	r4, r4, r3
 8006c98:	f000 fab0 	bl	80071fc <__malloc_lock>
 8006c9c:	4a1d      	ldr	r2, [pc, #116]	; (8006d14 <_free_r+0x90>)
 8006c9e:	6813      	ldr	r3, [r2, #0]
 8006ca0:	b933      	cbnz	r3, 8006cb0 <_free_r+0x2c>
 8006ca2:	6063      	str	r3, [r4, #4]
 8006ca4:	6014      	str	r4, [r2, #0]
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cac:	f000 baac 	b.w	8007208 <__malloc_unlock>
 8006cb0:	42a3      	cmp	r3, r4
 8006cb2:	d908      	bls.n	8006cc6 <_free_r+0x42>
 8006cb4:	6820      	ldr	r0, [r4, #0]
 8006cb6:	1821      	adds	r1, r4, r0
 8006cb8:	428b      	cmp	r3, r1
 8006cba:	bf01      	itttt	eq
 8006cbc:	6819      	ldreq	r1, [r3, #0]
 8006cbe:	685b      	ldreq	r3, [r3, #4]
 8006cc0:	1809      	addeq	r1, r1, r0
 8006cc2:	6021      	streq	r1, [r4, #0]
 8006cc4:	e7ed      	b.n	8006ca2 <_free_r+0x1e>
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	b10b      	cbz	r3, 8006cd0 <_free_r+0x4c>
 8006ccc:	42a3      	cmp	r3, r4
 8006cce:	d9fa      	bls.n	8006cc6 <_free_r+0x42>
 8006cd0:	6811      	ldr	r1, [r2, #0]
 8006cd2:	1850      	adds	r0, r2, r1
 8006cd4:	42a0      	cmp	r0, r4
 8006cd6:	d10b      	bne.n	8006cf0 <_free_r+0x6c>
 8006cd8:	6820      	ldr	r0, [r4, #0]
 8006cda:	4401      	add	r1, r0
 8006cdc:	1850      	adds	r0, r2, r1
 8006cde:	4283      	cmp	r3, r0
 8006ce0:	6011      	str	r1, [r2, #0]
 8006ce2:	d1e0      	bne.n	8006ca6 <_free_r+0x22>
 8006ce4:	6818      	ldr	r0, [r3, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	6053      	str	r3, [r2, #4]
 8006cea:	4401      	add	r1, r0
 8006cec:	6011      	str	r1, [r2, #0]
 8006cee:	e7da      	b.n	8006ca6 <_free_r+0x22>
 8006cf0:	d902      	bls.n	8006cf8 <_free_r+0x74>
 8006cf2:	230c      	movs	r3, #12
 8006cf4:	602b      	str	r3, [r5, #0]
 8006cf6:	e7d6      	b.n	8006ca6 <_free_r+0x22>
 8006cf8:	6820      	ldr	r0, [r4, #0]
 8006cfa:	1821      	adds	r1, r4, r0
 8006cfc:	428b      	cmp	r3, r1
 8006cfe:	bf04      	itt	eq
 8006d00:	6819      	ldreq	r1, [r3, #0]
 8006d02:	685b      	ldreq	r3, [r3, #4]
 8006d04:	6063      	str	r3, [r4, #4]
 8006d06:	bf04      	itt	eq
 8006d08:	1809      	addeq	r1, r1, r0
 8006d0a:	6021      	streq	r1, [r4, #0]
 8006d0c:	6054      	str	r4, [r2, #4]
 8006d0e:	e7ca      	b.n	8006ca6 <_free_r+0x22>
 8006d10:	bd38      	pop	{r3, r4, r5, pc}
 8006d12:	bf00      	nop
 8006d14:	2000616c 	.word	0x2000616c

08006d18 <sbrk_aligned>:
 8006d18:	b570      	push	{r4, r5, r6, lr}
 8006d1a:	4e0e      	ldr	r6, [pc, #56]	; (8006d54 <sbrk_aligned+0x3c>)
 8006d1c:	460c      	mov	r4, r1
 8006d1e:	6831      	ldr	r1, [r6, #0]
 8006d20:	4605      	mov	r5, r0
 8006d22:	b911      	cbnz	r1, 8006d2a <sbrk_aligned+0x12>
 8006d24:	f000 f9ee 	bl	8007104 <_sbrk_r>
 8006d28:	6030      	str	r0, [r6, #0]
 8006d2a:	4621      	mov	r1, r4
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	f000 f9e9 	bl	8007104 <_sbrk_r>
 8006d32:	1c43      	adds	r3, r0, #1
 8006d34:	d00a      	beq.n	8006d4c <sbrk_aligned+0x34>
 8006d36:	1cc4      	adds	r4, r0, #3
 8006d38:	f024 0403 	bic.w	r4, r4, #3
 8006d3c:	42a0      	cmp	r0, r4
 8006d3e:	d007      	beq.n	8006d50 <sbrk_aligned+0x38>
 8006d40:	1a21      	subs	r1, r4, r0
 8006d42:	4628      	mov	r0, r5
 8006d44:	f000 f9de 	bl	8007104 <_sbrk_r>
 8006d48:	3001      	adds	r0, #1
 8006d4a:	d101      	bne.n	8006d50 <sbrk_aligned+0x38>
 8006d4c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006d50:	4620      	mov	r0, r4
 8006d52:	bd70      	pop	{r4, r5, r6, pc}
 8006d54:	20006170 	.word	0x20006170

08006d58 <_malloc_r>:
 8006d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d5c:	1ccd      	adds	r5, r1, #3
 8006d5e:	f025 0503 	bic.w	r5, r5, #3
 8006d62:	3508      	adds	r5, #8
 8006d64:	2d0c      	cmp	r5, #12
 8006d66:	bf38      	it	cc
 8006d68:	250c      	movcc	r5, #12
 8006d6a:	2d00      	cmp	r5, #0
 8006d6c:	4607      	mov	r7, r0
 8006d6e:	db01      	blt.n	8006d74 <_malloc_r+0x1c>
 8006d70:	42a9      	cmp	r1, r5
 8006d72:	d905      	bls.n	8006d80 <_malloc_r+0x28>
 8006d74:	230c      	movs	r3, #12
 8006d76:	603b      	str	r3, [r7, #0]
 8006d78:	2600      	movs	r6, #0
 8006d7a:	4630      	mov	r0, r6
 8006d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d80:	4e2e      	ldr	r6, [pc, #184]	; (8006e3c <_malloc_r+0xe4>)
 8006d82:	f000 fa3b 	bl	80071fc <__malloc_lock>
 8006d86:	6833      	ldr	r3, [r6, #0]
 8006d88:	461c      	mov	r4, r3
 8006d8a:	bb34      	cbnz	r4, 8006dda <_malloc_r+0x82>
 8006d8c:	4629      	mov	r1, r5
 8006d8e:	4638      	mov	r0, r7
 8006d90:	f7ff ffc2 	bl	8006d18 <sbrk_aligned>
 8006d94:	1c43      	adds	r3, r0, #1
 8006d96:	4604      	mov	r4, r0
 8006d98:	d14d      	bne.n	8006e36 <_malloc_r+0xde>
 8006d9a:	6834      	ldr	r4, [r6, #0]
 8006d9c:	4626      	mov	r6, r4
 8006d9e:	2e00      	cmp	r6, #0
 8006da0:	d140      	bne.n	8006e24 <_malloc_r+0xcc>
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	4631      	mov	r1, r6
 8006da6:	4638      	mov	r0, r7
 8006da8:	eb04 0803 	add.w	r8, r4, r3
 8006dac:	f000 f9aa 	bl	8007104 <_sbrk_r>
 8006db0:	4580      	cmp	r8, r0
 8006db2:	d13a      	bne.n	8006e2a <_malloc_r+0xd2>
 8006db4:	6821      	ldr	r1, [r4, #0]
 8006db6:	3503      	adds	r5, #3
 8006db8:	1a6d      	subs	r5, r5, r1
 8006dba:	f025 0503 	bic.w	r5, r5, #3
 8006dbe:	3508      	adds	r5, #8
 8006dc0:	2d0c      	cmp	r5, #12
 8006dc2:	bf38      	it	cc
 8006dc4:	250c      	movcc	r5, #12
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	4638      	mov	r0, r7
 8006dca:	f7ff ffa5 	bl	8006d18 <sbrk_aligned>
 8006dce:	3001      	adds	r0, #1
 8006dd0:	d02b      	beq.n	8006e2a <_malloc_r+0xd2>
 8006dd2:	6823      	ldr	r3, [r4, #0]
 8006dd4:	442b      	add	r3, r5
 8006dd6:	6023      	str	r3, [r4, #0]
 8006dd8:	e00e      	b.n	8006df8 <_malloc_r+0xa0>
 8006dda:	6822      	ldr	r2, [r4, #0]
 8006ddc:	1b52      	subs	r2, r2, r5
 8006dde:	d41e      	bmi.n	8006e1e <_malloc_r+0xc6>
 8006de0:	2a0b      	cmp	r2, #11
 8006de2:	d916      	bls.n	8006e12 <_malloc_r+0xba>
 8006de4:	1961      	adds	r1, r4, r5
 8006de6:	42a3      	cmp	r3, r4
 8006de8:	6025      	str	r5, [r4, #0]
 8006dea:	bf18      	it	ne
 8006dec:	6059      	strne	r1, [r3, #4]
 8006dee:	6863      	ldr	r3, [r4, #4]
 8006df0:	bf08      	it	eq
 8006df2:	6031      	streq	r1, [r6, #0]
 8006df4:	5162      	str	r2, [r4, r5]
 8006df6:	604b      	str	r3, [r1, #4]
 8006df8:	4638      	mov	r0, r7
 8006dfa:	f104 060b 	add.w	r6, r4, #11
 8006dfe:	f000 fa03 	bl	8007208 <__malloc_unlock>
 8006e02:	f026 0607 	bic.w	r6, r6, #7
 8006e06:	1d23      	adds	r3, r4, #4
 8006e08:	1af2      	subs	r2, r6, r3
 8006e0a:	d0b6      	beq.n	8006d7a <_malloc_r+0x22>
 8006e0c:	1b9b      	subs	r3, r3, r6
 8006e0e:	50a3      	str	r3, [r4, r2]
 8006e10:	e7b3      	b.n	8006d7a <_malloc_r+0x22>
 8006e12:	6862      	ldr	r2, [r4, #4]
 8006e14:	42a3      	cmp	r3, r4
 8006e16:	bf0c      	ite	eq
 8006e18:	6032      	streq	r2, [r6, #0]
 8006e1a:	605a      	strne	r2, [r3, #4]
 8006e1c:	e7ec      	b.n	8006df8 <_malloc_r+0xa0>
 8006e1e:	4623      	mov	r3, r4
 8006e20:	6864      	ldr	r4, [r4, #4]
 8006e22:	e7b2      	b.n	8006d8a <_malloc_r+0x32>
 8006e24:	4634      	mov	r4, r6
 8006e26:	6876      	ldr	r6, [r6, #4]
 8006e28:	e7b9      	b.n	8006d9e <_malloc_r+0x46>
 8006e2a:	230c      	movs	r3, #12
 8006e2c:	603b      	str	r3, [r7, #0]
 8006e2e:	4638      	mov	r0, r7
 8006e30:	f000 f9ea 	bl	8007208 <__malloc_unlock>
 8006e34:	e7a1      	b.n	8006d7a <_malloc_r+0x22>
 8006e36:	6025      	str	r5, [r4, #0]
 8006e38:	e7de      	b.n	8006df8 <_malloc_r+0xa0>
 8006e3a:	bf00      	nop
 8006e3c:	2000616c 	.word	0x2000616c

08006e40 <__ssputs_r>:
 8006e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e44:	688e      	ldr	r6, [r1, #8]
 8006e46:	429e      	cmp	r6, r3
 8006e48:	4682      	mov	sl, r0
 8006e4a:	460c      	mov	r4, r1
 8006e4c:	4690      	mov	r8, r2
 8006e4e:	461f      	mov	r7, r3
 8006e50:	d838      	bhi.n	8006ec4 <__ssputs_r+0x84>
 8006e52:	898a      	ldrh	r2, [r1, #12]
 8006e54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e58:	d032      	beq.n	8006ec0 <__ssputs_r+0x80>
 8006e5a:	6825      	ldr	r5, [r4, #0]
 8006e5c:	6909      	ldr	r1, [r1, #16]
 8006e5e:	eba5 0901 	sub.w	r9, r5, r1
 8006e62:	6965      	ldr	r5, [r4, #20]
 8006e64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	444b      	add	r3, r9
 8006e70:	106d      	asrs	r5, r5, #1
 8006e72:	429d      	cmp	r5, r3
 8006e74:	bf38      	it	cc
 8006e76:	461d      	movcc	r5, r3
 8006e78:	0553      	lsls	r3, r2, #21
 8006e7a:	d531      	bpl.n	8006ee0 <__ssputs_r+0xa0>
 8006e7c:	4629      	mov	r1, r5
 8006e7e:	f7ff ff6b 	bl	8006d58 <_malloc_r>
 8006e82:	4606      	mov	r6, r0
 8006e84:	b950      	cbnz	r0, 8006e9c <__ssputs_r+0x5c>
 8006e86:	230c      	movs	r3, #12
 8006e88:	f8ca 3000 	str.w	r3, [sl]
 8006e8c:	89a3      	ldrh	r3, [r4, #12]
 8006e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e92:	81a3      	strh	r3, [r4, #12]
 8006e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e9c:	6921      	ldr	r1, [r4, #16]
 8006e9e:	464a      	mov	r2, r9
 8006ea0:	f7ff fa1a 	bl	80062d8 <memcpy>
 8006ea4:	89a3      	ldrh	r3, [r4, #12]
 8006ea6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eae:	81a3      	strh	r3, [r4, #12]
 8006eb0:	6126      	str	r6, [r4, #16]
 8006eb2:	6165      	str	r5, [r4, #20]
 8006eb4:	444e      	add	r6, r9
 8006eb6:	eba5 0509 	sub.w	r5, r5, r9
 8006eba:	6026      	str	r6, [r4, #0]
 8006ebc:	60a5      	str	r5, [r4, #8]
 8006ebe:	463e      	mov	r6, r7
 8006ec0:	42be      	cmp	r6, r7
 8006ec2:	d900      	bls.n	8006ec6 <__ssputs_r+0x86>
 8006ec4:	463e      	mov	r6, r7
 8006ec6:	6820      	ldr	r0, [r4, #0]
 8006ec8:	4632      	mov	r2, r6
 8006eca:	4641      	mov	r1, r8
 8006ecc:	f000 f97c 	bl	80071c8 <memmove>
 8006ed0:	68a3      	ldr	r3, [r4, #8]
 8006ed2:	1b9b      	subs	r3, r3, r6
 8006ed4:	60a3      	str	r3, [r4, #8]
 8006ed6:	6823      	ldr	r3, [r4, #0]
 8006ed8:	4433      	add	r3, r6
 8006eda:	6023      	str	r3, [r4, #0]
 8006edc:	2000      	movs	r0, #0
 8006ede:	e7db      	b.n	8006e98 <__ssputs_r+0x58>
 8006ee0:	462a      	mov	r2, r5
 8006ee2:	f000 f997 	bl	8007214 <_realloc_r>
 8006ee6:	4606      	mov	r6, r0
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d1e1      	bne.n	8006eb0 <__ssputs_r+0x70>
 8006eec:	6921      	ldr	r1, [r4, #16]
 8006eee:	4650      	mov	r0, sl
 8006ef0:	f7ff fec8 	bl	8006c84 <_free_r>
 8006ef4:	e7c7      	b.n	8006e86 <__ssputs_r+0x46>
	...

08006ef8 <_svfiprintf_r>:
 8006ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efc:	4698      	mov	r8, r3
 8006efe:	898b      	ldrh	r3, [r1, #12]
 8006f00:	061b      	lsls	r3, r3, #24
 8006f02:	b09d      	sub	sp, #116	; 0x74
 8006f04:	4607      	mov	r7, r0
 8006f06:	460d      	mov	r5, r1
 8006f08:	4614      	mov	r4, r2
 8006f0a:	d50e      	bpl.n	8006f2a <_svfiprintf_r+0x32>
 8006f0c:	690b      	ldr	r3, [r1, #16]
 8006f0e:	b963      	cbnz	r3, 8006f2a <_svfiprintf_r+0x32>
 8006f10:	2140      	movs	r1, #64	; 0x40
 8006f12:	f7ff ff21 	bl	8006d58 <_malloc_r>
 8006f16:	6028      	str	r0, [r5, #0]
 8006f18:	6128      	str	r0, [r5, #16]
 8006f1a:	b920      	cbnz	r0, 8006f26 <_svfiprintf_r+0x2e>
 8006f1c:	230c      	movs	r3, #12
 8006f1e:	603b      	str	r3, [r7, #0]
 8006f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f24:	e0d1      	b.n	80070ca <_svfiprintf_r+0x1d2>
 8006f26:	2340      	movs	r3, #64	; 0x40
 8006f28:	616b      	str	r3, [r5, #20]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f2e:	2320      	movs	r3, #32
 8006f30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f34:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f38:	2330      	movs	r3, #48	; 0x30
 8006f3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80070e4 <_svfiprintf_r+0x1ec>
 8006f3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f42:	f04f 0901 	mov.w	r9, #1
 8006f46:	4623      	mov	r3, r4
 8006f48:	469a      	mov	sl, r3
 8006f4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f4e:	b10a      	cbz	r2, 8006f54 <_svfiprintf_r+0x5c>
 8006f50:	2a25      	cmp	r2, #37	; 0x25
 8006f52:	d1f9      	bne.n	8006f48 <_svfiprintf_r+0x50>
 8006f54:	ebba 0b04 	subs.w	fp, sl, r4
 8006f58:	d00b      	beq.n	8006f72 <_svfiprintf_r+0x7a>
 8006f5a:	465b      	mov	r3, fp
 8006f5c:	4622      	mov	r2, r4
 8006f5e:	4629      	mov	r1, r5
 8006f60:	4638      	mov	r0, r7
 8006f62:	f7ff ff6d 	bl	8006e40 <__ssputs_r>
 8006f66:	3001      	adds	r0, #1
 8006f68:	f000 80aa 	beq.w	80070c0 <_svfiprintf_r+0x1c8>
 8006f6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f6e:	445a      	add	r2, fp
 8006f70:	9209      	str	r2, [sp, #36]	; 0x24
 8006f72:	f89a 3000 	ldrb.w	r3, [sl]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f000 80a2 	beq.w	80070c0 <_svfiprintf_r+0x1c8>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f86:	f10a 0a01 	add.w	sl, sl, #1
 8006f8a:	9304      	str	r3, [sp, #16]
 8006f8c:	9307      	str	r3, [sp, #28]
 8006f8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f92:	931a      	str	r3, [sp, #104]	; 0x68
 8006f94:	4654      	mov	r4, sl
 8006f96:	2205      	movs	r2, #5
 8006f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f9c:	4851      	ldr	r0, [pc, #324]	; (80070e4 <_svfiprintf_r+0x1ec>)
 8006f9e:	f7f9 f927 	bl	80001f0 <memchr>
 8006fa2:	9a04      	ldr	r2, [sp, #16]
 8006fa4:	b9d8      	cbnz	r0, 8006fde <_svfiprintf_r+0xe6>
 8006fa6:	06d0      	lsls	r0, r2, #27
 8006fa8:	bf44      	itt	mi
 8006faa:	2320      	movmi	r3, #32
 8006fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fb0:	0711      	lsls	r1, r2, #28
 8006fb2:	bf44      	itt	mi
 8006fb4:	232b      	movmi	r3, #43	; 0x2b
 8006fb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fba:	f89a 3000 	ldrb.w	r3, [sl]
 8006fbe:	2b2a      	cmp	r3, #42	; 0x2a
 8006fc0:	d015      	beq.n	8006fee <_svfiprintf_r+0xf6>
 8006fc2:	9a07      	ldr	r2, [sp, #28]
 8006fc4:	4654      	mov	r4, sl
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	f04f 0c0a 	mov.w	ip, #10
 8006fcc:	4621      	mov	r1, r4
 8006fce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fd2:	3b30      	subs	r3, #48	; 0x30
 8006fd4:	2b09      	cmp	r3, #9
 8006fd6:	d94e      	bls.n	8007076 <_svfiprintf_r+0x17e>
 8006fd8:	b1b0      	cbz	r0, 8007008 <_svfiprintf_r+0x110>
 8006fda:	9207      	str	r2, [sp, #28]
 8006fdc:	e014      	b.n	8007008 <_svfiprintf_r+0x110>
 8006fde:	eba0 0308 	sub.w	r3, r0, r8
 8006fe2:	fa09 f303 	lsl.w	r3, r9, r3
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	9304      	str	r3, [sp, #16]
 8006fea:	46a2      	mov	sl, r4
 8006fec:	e7d2      	b.n	8006f94 <_svfiprintf_r+0x9c>
 8006fee:	9b03      	ldr	r3, [sp, #12]
 8006ff0:	1d19      	adds	r1, r3, #4
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	9103      	str	r1, [sp, #12]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	bfbb      	ittet	lt
 8006ffa:	425b      	neglt	r3, r3
 8006ffc:	f042 0202 	orrlt.w	r2, r2, #2
 8007000:	9307      	strge	r3, [sp, #28]
 8007002:	9307      	strlt	r3, [sp, #28]
 8007004:	bfb8      	it	lt
 8007006:	9204      	strlt	r2, [sp, #16]
 8007008:	7823      	ldrb	r3, [r4, #0]
 800700a:	2b2e      	cmp	r3, #46	; 0x2e
 800700c:	d10c      	bne.n	8007028 <_svfiprintf_r+0x130>
 800700e:	7863      	ldrb	r3, [r4, #1]
 8007010:	2b2a      	cmp	r3, #42	; 0x2a
 8007012:	d135      	bne.n	8007080 <_svfiprintf_r+0x188>
 8007014:	9b03      	ldr	r3, [sp, #12]
 8007016:	1d1a      	adds	r2, r3, #4
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	9203      	str	r2, [sp, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	bfb8      	it	lt
 8007020:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007024:	3402      	adds	r4, #2
 8007026:	9305      	str	r3, [sp, #20]
 8007028:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80070e8 <_svfiprintf_r+0x1f0>
 800702c:	7821      	ldrb	r1, [r4, #0]
 800702e:	2203      	movs	r2, #3
 8007030:	4650      	mov	r0, sl
 8007032:	f7f9 f8dd 	bl	80001f0 <memchr>
 8007036:	b140      	cbz	r0, 800704a <_svfiprintf_r+0x152>
 8007038:	2340      	movs	r3, #64	; 0x40
 800703a:	eba0 000a 	sub.w	r0, r0, sl
 800703e:	fa03 f000 	lsl.w	r0, r3, r0
 8007042:	9b04      	ldr	r3, [sp, #16]
 8007044:	4303      	orrs	r3, r0
 8007046:	3401      	adds	r4, #1
 8007048:	9304      	str	r3, [sp, #16]
 800704a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800704e:	4827      	ldr	r0, [pc, #156]	; (80070ec <_svfiprintf_r+0x1f4>)
 8007050:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007054:	2206      	movs	r2, #6
 8007056:	f7f9 f8cb 	bl	80001f0 <memchr>
 800705a:	2800      	cmp	r0, #0
 800705c:	d038      	beq.n	80070d0 <_svfiprintf_r+0x1d8>
 800705e:	4b24      	ldr	r3, [pc, #144]	; (80070f0 <_svfiprintf_r+0x1f8>)
 8007060:	bb1b      	cbnz	r3, 80070aa <_svfiprintf_r+0x1b2>
 8007062:	9b03      	ldr	r3, [sp, #12]
 8007064:	3307      	adds	r3, #7
 8007066:	f023 0307 	bic.w	r3, r3, #7
 800706a:	3308      	adds	r3, #8
 800706c:	9303      	str	r3, [sp, #12]
 800706e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007070:	4433      	add	r3, r6
 8007072:	9309      	str	r3, [sp, #36]	; 0x24
 8007074:	e767      	b.n	8006f46 <_svfiprintf_r+0x4e>
 8007076:	fb0c 3202 	mla	r2, ip, r2, r3
 800707a:	460c      	mov	r4, r1
 800707c:	2001      	movs	r0, #1
 800707e:	e7a5      	b.n	8006fcc <_svfiprintf_r+0xd4>
 8007080:	2300      	movs	r3, #0
 8007082:	3401      	adds	r4, #1
 8007084:	9305      	str	r3, [sp, #20]
 8007086:	4619      	mov	r1, r3
 8007088:	f04f 0c0a 	mov.w	ip, #10
 800708c:	4620      	mov	r0, r4
 800708e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007092:	3a30      	subs	r2, #48	; 0x30
 8007094:	2a09      	cmp	r2, #9
 8007096:	d903      	bls.n	80070a0 <_svfiprintf_r+0x1a8>
 8007098:	2b00      	cmp	r3, #0
 800709a:	d0c5      	beq.n	8007028 <_svfiprintf_r+0x130>
 800709c:	9105      	str	r1, [sp, #20]
 800709e:	e7c3      	b.n	8007028 <_svfiprintf_r+0x130>
 80070a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80070a4:	4604      	mov	r4, r0
 80070a6:	2301      	movs	r3, #1
 80070a8:	e7f0      	b.n	800708c <_svfiprintf_r+0x194>
 80070aa:	ab03      	add	r3, sp, #12
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	462a      	mov	r2, r5
 80070b0:	4b10      	ldr	r3, [pc, #64]	; (80070f4 <_svfiprintf_r+0x1fc>)
 80070b2:	a904      	add	r1, sp, #16
 80070b4:	4638      	mov	r0, r7
 80070b6:	f7fc fa91 	bl	80035dc <_printf_float>
 80070ba:	1c42      	adds	r2, r0, #1
 80070bc:	4606      	mov	r6, r0
 80070be:	d1d6      	bne.n	800706e <_svfiprintf_r+0x176>
 80070c0:	89ab      	ldrh	r3, [r5, #12]
 80070c2:	065b      	lsls	r3, r3, #25
 80070c4:	f53f af2c 	bmi.w	8006f20 <_svfiprintf_r+0x28>
 80070c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070ca:	b01d      	add	sp, #116	; 0x74
 80070cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d0:	ab03      	add	r3, sp, #12
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	462a      	mov	r2, r5
 80070d6:	4b07      	ldr	r3, [pc, #28]	; (80070f4 <_svfiprintf_r+0x1fc>)
 80070d8:	a904      	add	r1, sp, #16
 80070da:	4638      	mov	r0, r7
 80070dc:	f7fc fd16 	bl	8003b0c <_printf_i>
 80070e0:	e7eb      	b.n	80070ba <_svfiprintf_r+0x1c2>
 80070e2:	bf00      	nop
 80070e4:	080082b4 	.word	0x080082b4
 80070e8:	080082ba 	.word	0x080082ba
 80070ec:	080082be 	.word	0x080082be
 80070f0:	080035dd 	.word	0x080035dd
 80070f4:	08006e41 	.word	0x08006e41

080070f8 <nan>:
 80070f8:	4901      	ldr	r1, [pc, #4]	; (8007100 <nan+0x8>)
 80070fa:	2000      	movs	r0, #0
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	7ff80000 	.word	0x7ff80000

08007104 <_sbrk_r>:
 8007104:	b538      	push	{r3, r4, r5, lr}
 8007106:	4d06      	ldr	r5, [pc, #24]	; (8007120 <_sbrk_r+0x1c>)
 8007108:	2300      	movs	r3, #0
 800710a:	4604      	mov	r4, r0
 800710c:	4608      	mov	r0, r1
 800710e:	602b      	str	r3, [r5, #0]
 8007110:	f000 fe1a 	bl	8007d48 <_sbrk>
 8007114:	1c43      	adds	r3, r0, #1
 8007116:	d102      	bne.n	800711e <_sbrk_r+0x1a>
 8007118:	682b      	ldr	r3, [r5, #0]
 800711a:	b103      	cbz	r3, 800711e <_sbrk_r+0x1a>
 800711c:	6023      	str	r3, [r4, #0]
 800711e:	bd38      	pop	{r3, r4, r5, pc}
 8007120:	20006174 	.word	0x20006174

08007124 <strncmp>:
 8007124:	b510      	push	{r4, lr}
 8007126:	4603      	mov	r3, r0
 8007128:	b172      	cbz	r2, 8007148 <strncmp+0x24>
 800712a:	3901      	subs	r1, #1
 800712c:	1884      	adds	r4, r0, r2
 800712e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007132:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007136:	4290      	cmp	r0, r2
 8007138:	d101      	bne.n	800713e <strncmp+0x1a>
 800713a:	42a3      	cmp	r3, r4
 800713c:	d101      	bne.n	8007142 <strncmp+0x1e>
 800713e:	1a80      	subs	r0, r0, r2
 8007140:	bd10      	pop	{r4, pc}
 8007142:	2800      	cmp	r0, #0
 8007144:	d1f3      	bne.n	800712e <strncmp+0xa>
 8007146:	e7fa      	b.n	800713e <strncmp+0x1a>
 8007148:	4610      	mov	r0, r2
 800714a:	e7f9      	b.n	8007140 <strncmp+0x1c>

0800714c <__ascii_wctomb>:
 800714c:	4603      	mov	r3, r0
 800714e:	4608      	mov	r0, r1
 8007150:	b141      	cbz	r1, 8007164 <__ascii_wctomb+0x18>
 8007152:	2aff      	cmp	r2, #255	; 0xff
 8007154:	d904      	bls.n	8007160 <__ascii_wctomb+0x14>
 8007156:	228a      	movs	r2, #138	; 0x8a
 8007158:	601a      	str	r2, [r3, #0]
 800715a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800715e:	4770      	bx	lr
 8007160:	700a      	strb	r2, [r1, #0]
 8007162:	2001      	movs	r0, #1
 8007164:	4770      	bx	lr
	...

08007168 <__assert_func>:
 8007168:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800716a:	4614      	mov	r4, r2
 800716c:	461a      	mov	r2, r3
 800716e:	4b09      	ldr	r3, [pc, #36]	; (8007194 <__assert_func+0x2c>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4605      	mov	r5, r0
 8007174:	68d8      	ldr	r0, [r3, #12]
 8007176:	b14c      	cbz	r4, 800718c <__assert_func+0x24>
 8007178:	4b07      	ldr	r3, [pc, #28]	; (8007198 <__assert_func+0x30>)
 800717a:	9100      	str	r1, [sp, #0]
 800717c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007180:	4906      	ldr	r1, [pc, #24]	; (800719c <__assert_func+0x34>)
 8007182:	462b      	mov	r3, r5
 8007184:	f000 f80e 	bl	80071a4 <fiprintf>
 8007188:	f000 fa8a 	bl	80076a0 <abort>
 800718c:	4b04      	ldr	r3, [pc, #16]	; (80071a0 <__assert_func+0x38>)
 800718e:	461c      	mov	r4, r3
 8007190:	e7f3      	b.n	800717a <__assert_func+0x12>
 8007192:	bf00      	nop
 8007194:	20000044 	.word	0x20000044
 8007198:	080082c5 	.word	0x080082c5
 800719c:	080082d2 	.word	0x080082d2
 80071a0:	08008300 	.word	0x08008300

080071a4 <fiprintf>:
 80071a4:	b40e      	push	{r1, r2, r3}
 80071a6:	b503      	push	{r0, r1, lr}
 80071a8:	4601      	mov	r1, r0
 80071aa:	ab03      	add	r3, sp, #12
 80071ac:	4805      	ldr	r0, [pc, #20]	; (80071c4 <fiprintf+0x20>)
 80071ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80071b2:	6800      	ldr	r0, [r0, #0]
 80071b4:	9301      	str	r3, [sp, #4]
 80071b6:	f000 f883 	bl	80072c0 <_vfiprintf_r>
 80071ba:	b002      	add	sp, #8
 80071bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80071c0:	b003      	add	sp, #12
 80071c2:	4770      	bx	lr
 80071c4:	20000044 	.word	0x20000044

080071c8 <memmove>:
 80071c8:	4288      	cmp	r0, r1
 80071ca:	b510      	push	{r4, lr}
 80071cc:	eb01 0402 	add.w	r4, r1, r2
 80071d0:	d902      	bls.n	80071d8 <memmove+0x10>
 80071d2:	4284      	cmp	r4, r0
 80071d4:	4623      	mov	r3, r4
 80071d6:	d807      	bhi.n	80071e8 <memmove+0x20>
 80071d8:	1e43      	subs	r3, r0, #1
 80071da:	42a1      	cmp	r1, r4
 80071dc:	d008      	beq.n	80071f0 <memmove+0x28>
 80071de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071e6:	e7f8      	b.n	80071da <memmove+0x12>
 80071e8:	4402      	add	r2, r0
 80071ea:	4601      	mov	r1, r0
 80071ec:	428a      	cmp	r2, r1
 80071ee:	d100      	bne.n	80071f2 <memmove+0x2a>
 80071f0:	bd10      	pop	{r4, pc}
 80071f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071fa:	e7f7      	b.n	80071ec <memmove+0x24>

080071fc <__malloc_lock>:
 80071fc:	4801      	ldr	r0, [pc, #4]	; (8007204 <__malloc_lock+0x8>)
 80071fe:	f000 bc0b 	b.w	8007a18 <__retarget_lock_acquire_recursive>
 8007202:	bf00      	nop
 8007204:	20006178 	.word	0x20006178

08007208 <__malloc_unlock>:
 8007208:	4801      	ldr	r0, [pc, #4]	; (8007210 <__malloc_unlock+0x8>)
 800720a:	f000 bc06 	b.w	8007a1a <__retarget_lock_release_recursive>
 800720e:	bf00      	nop
 8007210:	20006178 	.word	0x20006178

08007214 <_realloc_r>:
 8007214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007218:	4680      	mov	r8, r0
 800721a:	4614      	mov	r4, r2
 800721c:	460e      	mov	r6, r1
 800721e:	b921      	cbnz	r1, 800722a <_realloc_r+0x16>
 8007220:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007224:	4611      	mov	r1, r2
 8007226:	f7ff bd97 	b.w	8006d58 <_malloc_r>
 800722a:	b92a      	cbnz	r2, 8007238 <_realloc_r+0x24>
 800722c:	f7ff fd2a 	bl	8006c84 <_free_r>
 8007230:	4625      	mov	r5, r4
 8007232:	4628      	mov	r0, r5
 8007234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007238:	f000 fc56 	bl	8007ae8 <_malloc_usable_size_r>
 800723c:	4284      	cmp	r4, r0
 800723e:	4607      	mov	r7, r0
 8007240:	d802      	bhi.n	8007248 <_realloc_r+0x34>
 8007242:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007246:	d812      	bhi.n	800726e <_realloc_r+0x5a>
 8007248:	4621      	mov	r1, r4
 800724a:	4640      	mov	r0, r8
 800724c:	f7ff fd84 	bl	8006d58 <_malloc_r>
 8007250:	4605      	mov	r5, r0
 8007252:	2800      	cmp	r0, #0
 8007254:	d0ed      	beq.n	8007232 <_realloc_r+0x1e>
 8007256:	42bc      	cmp	r4, r7
 8007258:	4622      	mov	r2, r4
 800725a:	4631      	mov	r1, r6
 800725c:	bf28      	it	cs
 800725e:	463a      	movcs	r2, r7
 8007260:	f7ff f83a 	bl	80062d8 <memcpy>
 8007264:	4631      	mov	r1, r6
 8007266:	4640      	mov	r0, r8
 8007268:	f7ff fd0c 	bl	8006c84 <_free_r>
 800726c:	e7e1      	b.n	8007232 <_realloc_r+0x1e>
 800726e:	4635      	mov	r5, r6
 8007270:	e7df      	b.n	8007232 <_realloc_r+0x1e>

08007272 <__sfputc_r>:
 8007272:	6893      	ldr	r3, [r2, #8]
 8007274:	3b01      	subs	r3, #1
 8007276:	2b00      	cmp	r3, #0
 8007278:	b410      	push	{r4}
 800727a:	6093      	str	r3, [r2, #8]
 800727c:	da07      	bge.n	800728e <__sfputc_r+0x1c>
 800727e:	6994      	ldr	r4, [r2, #24]
 8007280:	42a3      	cmp	r3, r4
 8007282:	db01      	blt.n	8007288 <__sfputc_r+0x16>
 8007284:	290a      	cmp	r1, #10
 8007286:	d102      	bne.n	800728e <__sfputc_r+0x1c>
 8007288:	bc10      	pop	{r4}
 800728a:	f000 b949 	b.w	8007520 <__swbuf_r>
 800728e:	6813      	ldr	r3, [r2, #0]
 8007290:	1c58      	adds	r0, r3, #1
 8007292:	6010      	str	r0, [r2, #0]
 8007294:	7019      	strb	r1, [r3, #0]
 8007296:	4608      	mov	r0, r1
 8007298:	bc10      	pop	{r4}
 800729a:	4770      	bx	lr

0800729c <__sfputs_r>:
 800729c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729e:	4606      	mov	r6, r0
 80072a0:	460f      	mov	r7, r1
 80072a2:	4614      	mov	r4, r2
 80072a4:	18d5      	adds	r5, r2, r3
 80072a6:	42ac      	cmp	r4, r5
 80072a8:	d101      	bne.n	80072ae <__sfputs_r+0x12>
 80072aa:	2000      	movs	r0, #0
 80072ac:	e007      	b.n	80072be <__sfputs_r+0x22>
 80072ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072b2:	463a      	mov	r2, r7
 80072b4:	4630      	mov	r0, r6
 80072b6:	f7ff ffdc 	bl	8007272 <__sfputc_r>
 80072ba:	1c43      	adds	r3, r0, #1
 80072bc:	d1f3      	bne.n	80072a6 <__sfputs_r+0xa>
 80072be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080072c0 <_vfiprintf_r>:
 80072c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c4:	460d      	mov	r5, r1
 80072c6:	b09d      	sub	sp, #116	; 0x74
 80072c8:	4614      	mov	r4, r2
 80072ca:	4698      	mov	r8, r3
 80072cc:	4606      	mov	r6, r0
 80072ce:	b118      	cbz	r0, 80072d8 <_vfiprintf_r+0x18>
 80072d0:	6983      	ldr	r3, [r0, #24]
 80072d2:	b90b      	cbnz	r3, 80072d8 <_vfiprintf_r+0x18>
 80072d4:	f000 fb02 	bl	80078dc <__sinit>
 80072d8:	4b89      	ldr	r3, [pc, #548]	; (8007500 <_vfiprintf_r+0x240>)
 80072da:	429d      	cmp	r5, r3
 80072dc:	d11b      	bne.n	8007316 <_vfiprintf_r+0x56>
 80072de:	6875      	ldr	r5, [r6, #4]
 80072e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072e2:	07d9      	lsls	r1, r3, #31
 80072e4:	d405      	bmi.n	80072f2 <_vfiprintf_r+0x32>
 80072e6:	89ab      	ldrh	r3, [r5, #12]
 80072e8:	059a      	lsls	r2, r3, #22
 80072ea:	d402      	bmi.n	80072f2 <_vfiprintf_r+0x32>
 80072ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072ee:	f000 fb93 	bl	8007a18 <__retarget_lock_acquire_recursive>
 80072f2:	89ab      	ldrh	r3, [r5, #12]
 80072f4:	071b      	lsls	r3, r3, #28
 80072f6:	d501      	bpl.n	80072fc <_vfiprintf_r+0x3c>
 80072f8:	692b      	ldr	r3, [r5, #16]
 80072fa:	b9eb      	cbnz	r3, 8007338 <_vfiprintf_r+0x78>
 80072fc:	4629      	mov	r1, r5
 80072fe:	4630      	mov	r0, r6
 8007300:	f000 f960 	bl	80075c4 <__swsetup_r>
 8007304:	b1c0      	cbz	r0, 8007338 <_vfiprintf_r+0x78>
 8007306:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007308:	07dc      	lsls	r4, r3, #31
 800730a:	d50e      	bpl.n	800732a <_vfiprintf_r+0x6a>
 800730c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007310:	b01d      	add	sp, #116	; 0x74
 8007312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007316:	4b7b      	ldr	r3, [pc, #492]	; (8007504 <_vfiprintf_r+0x244>)
 8007318:	429d      	cmp	r5, r3
 800731a:	d101      	bne.n	8007320 <_vfiprintf_r+0x60>
 800731c:	68b5      	ldr	r5, [r6, #8]
 800731e:	e7df      	b.n	80072e0 <_vfiprintf_r+0x20>
 8007320:	4b79      	ldr	r3, [pc, #484]	; (8007508 <_vfiprintf_r+0x248>)
 8007322:	429d      	cmp	r5, r3
 8007324:	bf08      	it	eq
 8007326:	68f5      	ldreq	r5, [r6, #12]
 8007328:	e7da      	b.n	80072e0 <_vfiprintf_r+0x20>
 800732a:	89ab      	ldrh	r3, [r5, #12]
 800732c:	0598      	lsls	r0, r3, #22
 800732e:	d4ed      	bmi.n	800730c <_vfiprintf_r+0x4c>
 8007330:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007332:	f000 fb72 	bl	8007a1a <__retarget_lock_release_recursive>
 8007336:	e7e9      	b.n	800730c <_vfiprintf_r+0x4c>
 8007338:	2300      	movs	r3, #0
 800733a:	9309      	str	r3, [sp, #36]	; 0x24
 800733c:	2320      	movs	r3, #32
 800733e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007342:	f8cd 800c 	str.w	r8, [sp, #12]
 8007346:	2330      	movs	r3, #48	; 0x30
 8007348:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800750c <_vfiprintf_r+0x24c>
 800734c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007350:	f04f 0901 	mov.w	r9, #1
 8007354:	4623      	mov	r3, r4
 8007356:	469a      	mov	sl, r3
 8007358:	f813 2b01 	ldrb.w	r2, [r3], #1
 800735c:	b10a      	cbz	r2, 8007362 <_vfiprintf_r+0xa2>
 800735e:	2a25      	cmp	r2, #37	; 0x25
 8007360:	d1f9      	bne.n	8007356 <_vfiprintf_r+0x96>
 8007362:	ebba 0b04 	subs.w	fp, sl, r4
 8007366:	d00b      	beq.n	8007380 <_vfiprintf_r+0xc0>
 8007368:	465b      	mov	r3, fp
 800736a:	4622      	mov	r2, r4
 800736c:	4629      	mov	r1, r5
 800736e:	4630      	mov	r0, r6
 8007370:	f7ff ff94 	bl	800729c <__sfputs_r>
 8007374:	3001      	adds	r0, #1
 8007376:	f000 80aa 	beq.w	80074ce <_vfiprintf_r+0x20e>
 800737a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800737c:	445a      	add	r2, fp
 800737e:	9209      	str	r2, [sp, #36]	; 0x24
 8007380:	f89a 3000 	ldrb.w	r3, [sl]
 8007384:	2b00      	cmp	r3, #0
 8007386:	f000 80a2 	beq.w	80074ce <_vfiprintf_r+0x20e>
 800738a:	2300      	movs	r3, #0
 800738c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007390:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007394:	f10a 0a01 	add.w	sl, sl, #1
 8007398:	9304      	str	r3, [sp, #16]
 800739a:	9307      	str	r3, [sp, #28]
 800739c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073a0:	931a      	str	r3, [sp, #104]	; 0x68
 80073a2:	4654      	mov	r4, sl
 80073a4:	2205      	movs	r2, #5
 80073a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073aa:	4858      	ldr	r0, [pc, #352]	; (800750c <_vfiprintf_r+0x24c>)
 80073ac:	f7f8 ff20 	bl	80001f0 <memchr>
 80073b0:	9a04      	ldr	r2, [sp, #16]
 80073b2:	b9d8      	cbnz	r0, 80073ec <_vfiprintf_r+0x12c>
 80073b4:	06d1      	lsls	r1, r2, #27
 80073b6:	bf44      	itt	mi
 80073b8:	2320      	movmi	r3, #32
 80073ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073be:	0713      	lsls	r3, r2, #28
 80073c0:	bf44      	itt	mi
 80073c2:	232b      	movmi	r3, #43	; 0x2b
 80073c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073c8:	f89a 3000 	ldrb.w	r3, [sl]
 80073cc:	2b2a      	cmp	r3, #42	; 0x2a
 80073ce:	d015      	beq.n	80073fc <_vfiprintf_r+0x13c>
 80073d0:	9a07      	ldr	r2, [sp, #28]
 80073d2:	4654      	mov	r4, sl
 80073d4:	2000      	movs	r0, #0
 80073d6:	f04f 0c0a 	mov.w	ip, #10
 80073da:	4621      	mov	r1, r4
 80073dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073e0:	3b30      	subs	r3, #48	; 0x30
 80073e2:	2b09      	cmp	r3, #9
 80073e4:	d94e      	bls.n	8007484 <_vfiprintf_r+0x1c4>
 80073e6:	b1b0      	cbz	r0, 8007416 <_vfiprintf_r+0x156>
 80073e8:	9207      	str	r2, [sp, #28]
 80073ea:	e014      	b.n	8007416 <_vfiprintf_r+0x156>
 80073ec:	eba0 0308 	sub.w	r3, r0, r8
 80073f0:	fa09 f303 	lsl.w	r3, r9, r3
 80073f4:	4313      	orrs	r3, r2
 80073f6:	9304      	str	r3, [sp, #16]
 80073f8:	46a2      	mov	sl, r4
 80073fa:	e7d2      	b.n	80073a2 <_vfiprintf_r+0xe2>
 80073fc:	9b03      	ldr	r3, [sp, #12]
 80073fe:	1d19      	adds	r1, r3, #4
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	9103      	str	r1, [sp, #12]
 8007404:	2b00      	cmp	r3, #0
 8007406:	bfbb      	ittet	lt
 8007408:	425b      	neglt	r3, r3
 800740a:	f042 0202 	orrlt.w	r2, r2, #2
 800740e:	9307      	strge	r3, [sp, #28]
 8007410:	9307      	strlt	r3, [sp, #28]
 8007412:	bfb8      	it	lt
 8007414:	9204      	strlt	r2, [sp, #16]
 8007416:	7823      	ldrb	r3, [r4, #0]
 8007418:	2b2e      	cmp	r3, #46	; 0x2e
 800741a:	d10c      	bne.n	8007436 <_vfiprintf_r+0x176>
 800741c:	7863      	ldrb	r3, [r4, #1]
 800741e:	2b2a      	cmp	r3, #42	; 0x2a
 8007420:	d135      	bne.n	800748e <_vfiprintf_r+0x1ce>
 8007422:	9b03      	ldr	r3, [sp, #12]
 8007424:	1d1a      	adds	r2, r3, #4
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	9203      	str	r2, [sp, #12]
 800742a:	2b00      	cmp	r3, #0
 800742c:	bfb8      	it	lt
 800742e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007432:	3402      	adds	r4, #2
 8007434:	9305      	str	r3, [sp, #20]
 8007436:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007510 <_vfiprintf_r+0x250>
 800743a:	7821      	ldrb	r1, [r4, #0]
 800743c:	2203      	movs	r2, #3
 800743e:	4650      	mov	r0, sl
 8007440:	f7f8 fed6 	bl	80001f0 <memchr>
 8007444:	b140      	cbz	r0, 8007458 <_vfiprintf_r+0x198>
 8007446:	2340      	movs	r3, #64	; 0x40
 8007448:	eba0 000a 	sub.w	r0, r0, sl
 800744c:	fa03 f000 	lsl.w	r0, r3, r0
 8007450:	9b04      	ldr	r3, [sp, #16]
 8007452:	4303      	orrs	r3, r0
 8007454:	3401      	adds	r4, #1
 8007456:	9304      	str	r3, [sp, #16]
 8007458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800745c:	482d      	ldr	r0, [pc, #180]	; (8007514 <_vfiprintf_r+0x254>)
 800745e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007462:	2206      	movs	r2, #6
 8007464:	f7f8 fec4 	bl	80001f0 <memchr>
 8007468:	2800      	cmp	r0, #0
 800746a:	d03f      	beq.n	80074ec <_vfiprintf_r+0x22c>
 800746c:	4b2a      	ldr	r3, [pc, #168]	; (8007518 <_vfiprintf_r+0x258>)
 800746e:	bb1b      	cbnz	r3, 80074b8 <_vfiprintf_r+0x1f8>
 8007470:	9b03      	ldr	r3, [sp, #12]
 8007472:	3307      	adds	r3, #7
 8007474:	f023 0307 	bic.w	r3, r3, #7
 8007478:	3308      	adds	r3, #8
 800747a:	9303      	str	r3, [sp, #12]
 800747c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800747e:	443b      	add	r3, r7
 8007480:	9309      	str	r3, [sp, #36]	; 0x24
 8007482:	e767      	b.n	8007354 <_vfiprintf_r+0x94>
 8007484:	fb0c 3202 	mla	r2, ip, r2, r3
 8007488:	460c      	mov	r4, r1
 800748a:	2001      	movs	r0, #1
 800748c:	e7a5      	b.n	80073da <_vfiprintf_r+0x11a>
 800748e:	2300      	movs	r3, #0
 8007490:	3401      	adds	r4, #1
 8007492:	9305      	str	r3, [sp, #20]
 8007494:	4619      	mov	r1, r3
 8007496:	f04f 0c0a 	mov.w	ip, #10
 800749a:	4620      	mov	r0, r4
 800749c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074a0:	3a30      	subs	r2, #48	; 0x30
 80074a2:	2a09      	cmp	r2, #9
 80074a4:	d903      	bls.n	80074ae <_vfiprintf_r+0x1ee>
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d0c5      	beq.n	8007436 <_vfiprintf_r+0x176>
 80074aa:	9105      	str	r1, [sp, #20]
 80074ac:	e7c3      	b.n	8007436 <_vfiprintf_r+0x176>
 80074ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80074b2:	4604      	mov	r4, r0
 80074b4:	2301      	movs	r3, #1
 80074b6:	e7f0      	b.n	800749a <_vfiprintf_r+0x1da>
 80074b8:	ab03      	add	r3, sp, #12
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	462a      	mov	r2, r5
 80074be:	4b17      	ldr	r3, [pc, #92]	; (800751c <_vfiprintf_r+0x25c>)
 80074c0:	a904      	add	r1, sp, #16
 80074c2:	4630      	mov	r0, r6
 80074c4:	f7fc f88a 	bl	80035dc <_printf_float>
 80074c8:	4607      	mov	r7, r0
 80074ca:	1c78      	adds	r0, r7, #1
 80074cc:	d1d6      	bne.n	800747c <_vfiprintf_r+0x1bc>
 80074ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074d0:	07d9      	lsls	r1, r3, #31
 80074d2:	d405      	bmi.n	80074e0 <_vfiprintf_r+0x220>
 80074d4:	89ab      	ldrh	r3, [r5, #12]
 80074d6:	059a      	lsls	r2, r3, #22
 80074d8:	d402      	bmi.n	80074e0 <_vfiprintf_r+0x220>
 80074da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074dc:	f000 fa9d 	bl	8007a1a <__retarget_lock_release_recursive>
 80074e0:	89ab      	ldrh	r3, [r5, #12]
 80074e2:	065b      	lsls	r3, r3, #25
 80074e4:	f53f af12 	bmi.w	800730c <_vfiprintf_r+0x4c>
 80074e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074ea:	e711      	b.n	8007310 <_vfiprintf_r+0x50>
 80074ec:	ab03      	add	r3, sp, #12
 80074ee:	9300      	str	r3, [sp, #0]
 80074f0:	462a      	mov	r2, r5
 80074f2:	4b0a      	ldr	r3, [pc, #40]	; (800751c <_vfiprintf_r+0x25c>)
 80074f4:	a904      	add	r1, sp, #16
 80074f6:	4630      	mov	r0, r6
 80074f8:	f7fc fb08 	bl	8003b0c <_printf_i>
 80074fc:	e7e4      	b.n	80074c8 <_vfiprintf_r+0x208>
 80074fe:	bf00      	nop
 8007500:	08008324 	.word	0x08008324
 8007504:	08008344 	.word	0x08008344
 8007508:	08008304 	.word	0x08008304
 800750c:	080082b4 	.word	0x080082b4
 8007510:	080082ba 	.word	0x080082ba
 8007514:	080082be 	.word	0x080082be
 8007518:	080035dd 	.word	0x080035dd
 800751c:	0800729d 	.word	0x0800729d

08007520 <__swbuf_r>:
 8007520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007522:	460e      	mov	r6, r1
 8007524:	4614      	mov	r4, r2
 8007526:	4605      	mov	r5, r0
 8007528:	b118      	cbz	r0, 8007532 <__swbuf_r+0x12>
 800752a:	6983      	ldr	r3, [r0, #24]
 800752c:	b90b      	cbnz	r3, 8007532 <__swbuf_r+0x12>
 800752e:	f000 f9d5 	bl	80078dc <__sinit>
 8007532:	4b21      	ldr	r3, [pc, #132]	; (80075b8 <__swbuf_r+0x98>)
 8007534:	429c      	cmp	r4, r3
 8007536:	d12b      	bne.n	8007590 <__swbuf_r+0x70>
 8007538:	686c      	ldr	r4, [r5, #4]
 800753a:	69a3      	ldr	r3, [r4, #24]
 800753c:	60a3      	str	r3, [r4, #8]
 800753e:	89a3      	ldrh	r3, [r4, #12]
 8007540:	071a      	lsls	r2, r3, #28
 8007542:	d52f      	bpl.n	80075a4 <__swbuf_r+0x84>
 8007544:	6923      	ldr	r3, [r4, #16]
 8007546:	b36b      	cbz	r3, 80075a4 <__swbuf_r+0x84>
 8007548:	6923      	ldr	r3, [r4, #16]
 800754a:	6820      	ldr	r0, [r4, #0]
 800754c:	1ac0      	subs	r0, r0, r3
 800754e:	6963      	ldr	r3, [r4, #20]
 8007550:	b2f6      	uxtb	r6, r6
 8007552:	4283      	cmp	r3, r0
 8007554:	4637      	mov	r7, r6
 8007556:	dc04      	bgt.n	8007562 <__swbuf_r+0x42>
 8007558:	4621      	mov	r1, r4
 800755a:	4628      	mov	r0, r5
 800755c:	f000 f92a 	bl	80077b4 <_fflush_r>
 8007560:	bb30      	cbnz	r0, 80075b0 <__swbuf_r+0x90>
 8007562:	68a3      	ldr	r3, [r4, #8]
 8007564:	3b01      	subs	r3, #1
 8007566:	60a3      	str	r3, [r4, #8]
 8007568:	6823      	ldr	r3, [r4, #0]
 800756a:	1c5a      	adds	r2, r3, #1
 800756c:	6022      	str	r2, [r4, #0]
 800756e:	701e      	strb	r6, [r3, #0]
 8007570:	6963      	ldr	r3, [r4, #20]
 8007572:	3001      	adds	r0, #1
 8007574:	4283      	cmp	r3, r0
 8007576:	d004      	beq.n	8007582 <__swbuf_r+0x62>
 8007578:	89a3      	ldrh	r3, [r4, #12]
 800757a:	07db      	lsls	r3, r3, #31
 800757c:	d506      	bpl.n	800758c <__swbuf_r+0x6c>
 800757e:	2e0a      	cmp	r6, #10
 8007580:	d104      	bne.n	800758c <__swbuf_r+0x6c>
 8007582:	4621      	mov	r1, r4
 8007584:	4628      	mov	r0, r5
 8007586:	f000 f915 	bl	80077b4 <_fflush_r>
 800758a:	b988      	cbnz	r0, 80075b0 <__swbuf_r+0x90>
 800758c:	4638      	mov	r0, r7
 800758e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007590:	4b0a      	ldr	r3, [pc, #40]	; (80075bc <__swbuf_r+0x9c>)
 8007592:	429c      	cmp	r4, r3
 8007594:	d101      	bne.n	800759a <__swbuf_r+0x7a>
 8007596:	68ac      	ldr	r4, [r5, #8]
 8007598:	e7cf      	b.n	800753a <__swbuf_r+0x1a>
 800759a:	4b09      	ldr	r3, [pc, #36]	; (80075c0 <__swbuf_r+0xa0>)
 800759c:	429c      	cmp	r4, r3
 800759e:	bf08      	it	eq
 80075a0:	68ec      	ldreq	r4, [r5, #12]
 80075a2:	e7ca      	b.n	800753a <__swbuf_r+0x1a>
 80075a4:	4621      	mov	r1, r4
 80075a6:	4628      	mov	r0, r5
 80075a8:	f000 f80c 	bl	80075c4 <__swsetup_r>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	d0cb      	beq.n	8007548 <__swbuf_r+0x28>
 80075b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80075b4:	e7ea      	b.n	800758c <__swbuf_r+0x6c>
 80075b6:	bf00      	nop
 80075b8:	08008324 	.word	0x08008324
 80075bc:	08008344 	.word	0x08008344
 80075c0:	08008304 	.word	0x08008304

080075c4 <__swsetup_r>:
 80075c4:	4b32      	ldr	r3, [pc, #200]	; (8007690 <__swsetup_r+0xcc>)
 80075c6:	b570      	push	{r4, r5, r6, lr}
 80075c8:	681d      	ldr	r5, [r3, #0]
 80075ca:	4606      	mov	r6, r0
 80075cc:	460c      	mov	r4, r1
 80075ce:	b125      	cbz	r5, 80075da <__swsetup_r+0x16>
 80075d0:	69ab      	ldr	r3, [r5, #24]
 80075d2:	b913      	cbnz	r3, 80075da <__swsetup_r+0x16>
 80075d4:	4628      	mov	r0, r5
 80075d6:	f000 f981 	bl	80078dc <__sinit>
 80075da:	4b2e      	ldr	r3, [pc, #184]	; (8007694 <__swsetup_r+0xd0>)
 80075dc:	429c      	cmp	r4, r3
 80075de:	d10f      	bne.n	8007600 <__swsetup_r+0x3c>
 80075e0:	686c      	ldr	r4, [r5, #4]
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075e8:	0719      	lsls	r1, r3, #28
 80075ea:	d42c      	bmi.n	8007646 <__swsetup_r+0x82>
 80075ec:	06dd      	lsls	r5, r3, #27
 80075ee:	d411      	bmi.n	8007614 <__swsetup_r+0x50>
 80075f0:	2309      	movs	r3, #9
 80075f2:	6033      	str	r3, [r6, #0]
 80075f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80075f8:	81a3      	strh	r3, [r4, #12]
 80075fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075fe:	e03e      	b.n	800767e <__swsetup_r+0xba>
 8007600:	4b25      	ldr	r3, [pc, #148]	; (8007698 <__swsetup_r+0xd4>)
 8007602:	429c      	cmp	r4, r3
 8007604:	d101      	bne.n	800760a <__swsetup_r+0x46>
 8007606:	68ac      	ldr	r4, [r5, #8]
 8007608:	e7eb      	b.n	80075e2 <__swsetup_r+0x1e>
 800760a:	4b24      	ldr	r3, [pc, #144]	; (800769c <__swsetup_r+0xd8>)
 800760c:	429c      	cmp	r4, r3
 800760e:	bf08      	it	eq
 8007610:	68ec      	ldreq	r4, [r5, #12]
 8007612:	e7e6      	b.n	80075e2 <__swsetup_r+0x1e>
 8007614:	0758      	lsls	r0, r3, #29
 8007616:	d512      	bpl.n	800763e <__swsetup_r+0x7a>
 8007618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800761a:	b141      	cbz	r1, 800762e <__swsetup_r+0x6a>
 800761c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007620:	4299      	cmp	r1, r3
 8007622:	d002      	beq.n	800762a <__swsetup_r+0x66>
 8007624:	4630      	mov	r0, r6
 8007626:	f7ff fb2d 	bl	8006c84 <_free_r>
 800762a:	2300      	movs	r3, #0
 800762c:	6363      	str	r3, [r4, #52]	; 0x34
 800762e:	89a3      	ldrh	r3, [r4, #12]
 8007630:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007634:	81a3      	strh	r3, [r4, #12]
 8007636:	2300      	movs	r3, #0
 8007638:	6063      	str	r3, [r4, #4]
 800763a:	6923      	ldr	r3, [r4, #16]
 800763c:	6023      	str	r3, [r4, #0]
 800763e:	89a3      	ldrh	r3, [r4, #12]
 8007640:	f043 0308 	orr.w	r3, r3, #8
 8007644:	81a3      	strh	r3, [r4, #12]
 8007646:	6923      	ldr	r3, [r4, #16]
 8007648:	b94b      	cbnz	r3, 800765e <__swsetup_r+0x9a>
 800764a:	89a3      	ldrh	r3, [r4, #12]
 800764c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007654:	d003      	beq.n	800765e <__swsetup_r+0x9a>
 8007656:	4621      	mov	r1, r4
 8007658:	4630      	mov	r0, r6
 800765a:	f000 fa05 	bl	8007a68 <__smakebuf_r>
 800765e:	89a0      	ldrh	r0, [r4, #12]
 8007660:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007664:	f010 0301 	ands.w	r3, r0, #1
 8007668:	d00a      	beq.n	8007680 <__swsetup_r+0xbc>
 800766a:	2300      	movs	r3, #0
 800766c:	60a3      	str	r3, [r4, #8]
 800766e:	6963      	ldr	r3, [r4, #20]
 8007670:	425b      	negs	r3, r3
 8007672:	61a3      	str	r3, [r4, #24]
 8007674:	6923      	ldr	r3, [r4, #16]
 8007676:	b943      	cbnz	r3, 800768a <__swsetup_r+0xc6>
 8007678:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800767c:	d1ba      	bne.n	80075f4 <__swsetup_r+0x30>
 800767e:	bd70      	pop	{r4, r5, r6, pc}
 8007680:	0781      	lsls	r1, r0, #30
 8007682:	bf58      	it	pl
 8007684:	6963      	ldrpl	r3, [r4, #20]
 8007686:	60a3      	str	r3, [r4, #8]
 8007688:	e7f4      	b.n	8007674 <__swsetup_r+0xb0>
 800768a:	2000      	movs	r0, #0
 800768c:	e7f7      	b.n	800767e <__swsetup_r+0xba>
 800768e:	bf00      	nop
 8007690:	20000044 	.word	0x20000044
 8007694:	08008324 	.word	0x08008324
 8007698:	08008344 	.word	0x08008344
 800769c:	08008304 	.word	0x08008304

080076a0 <abort>:
 80076a0:	b508      	push	{r3, lr}
 80076a2:	2006      	movs	r0, #6
 80076a4:	f000 fa50 	bl	8007b48 <raise>
 80076a8:	2001      	movs	r0, #1
 80076aa:	f000 fb63 	bl	8007d74 <_exit>
	...

080076b0 <__sflush_r>:
 80076b0:	898a      	ldrh	r2, [r1, #12]
 80076b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b4:	4605      	mov	r5, r0
 80076b6:	0710      	lsls	r0, r2, #28
 80076b8:	460c      	mov	r4, r1
 80076ba:	d457      	bmi.n	800776c <__sflush_r+0xbc>
 80076bc:	684b      	ldr	r3, [r1, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	dc04      	bgt.n	80076cc <__sflush_r+0x1c>
 80076c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	dc01      	bgt.n	80076cc <__sflush_r+0x1c>
 80076c8:	2000      	movs	r0, #0
 80076ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076ce:	2e00      	cmp	r6, #0
 80076d0:	d0fa      	beq.n	80076c8 <__sflush_r+0x18>
 80076d2:	2300      	movs	r3, #0
 80076d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076d8:	682f      	ldr	r7, [r5, #0]
 80076da:	602b      	str	r3, [r5, #0]
 80076dc:	d032      	beq.n	8007744 <__sflush_r+0x94>
 80076de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076e0:	89a3      	ldrh	r3, [r4, #12]
 80076e2:	075a      	lsls	r2, r3, #29
 80076e4:	d505      	bpl.n	80076f2 <__sflush_r+0x42>
 80076e6:	6863      	ldr	r3, [r4, #4]
 80076e8:	1ac0      	subs	r0, r0, r3
 80076ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076ec:	b10b      	cbz	r3, 80076f2 <__sflush_r+0x42>
 80076ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076f0:	1ac0      	subs	r0, r0, r3
 80076f2:	2300      	movs	r3, #0
 80076f4:	4602      	mov	r2, r0
 80076f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076f8:	6a21      	ldr	r1, [r4, #32]
 80076fa:	4628      	mov	r0, r5
 80076fc:	47b0      	blx	r6
 80076fe:	1c43      	adds	r3, r0, #1
 8007700:	89a3      	ldrh	r3, [r4, #12]
 8007702:	d106      	bne.n	8007712 <__sflush_r+0x62>
 8007704:	6829      	ldr	r1, [r5, #0]
 8007706:	291d      	cmp	r1, #29
 8007708:	d82c      	bhi.n	8007764 <__sflush_r+0xb4>
 800770a:	4a29      	ldr	r2, [pc, #164]	; (80077b0 <__sflush_r+0x100>)
 800770c:	40ca      	lsrs	r2, r1
 800770e:	07d6      	lsls	r6, r2, #31
 8007710:	d528      	bpl.n	8007764 <__sflush_r+0xb4>
 8007712:	2200      	movs	r2, #0
 8007714:	6062      	str	r2, [r4, #4]
 8007716:	04d9      	lsls	r1, r3, #19
 8007718:	6922      	ldr	r2, [r4, #16]
 800771a:	6022      	str	r2, [r4, #0]
 800771c:	d504      	bpl.n	8007728 <__sflush_r+0x78>
 800771e:	1c42      	adds	r2, r0, #1
 8007720:	d101      	bne.n	8007726 <__sflush_r+0x76>
 8007722:	682b      	ldr	r3, [r5, #0]
 8007724:	b903      	cbnz	r3, 8007728 <__sflush_r+0x78>
 8007726:	6560      	str	r0, [r4, #84]	; 0x54
 8007728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800772a:	602f      	str	r7, [r5, #0]
 800772c:	2900      	cmp	r1, #0
 800772e:	d0cb      	beq.n	80076c8 <__sflush_r+0x18>
 8007730:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007734:	4299      	cmp	r1, r3
 8007736:	d002      	beq.n	800773e <__sflush_r+0x8e>
 8007738:	4628      	mov	r0, r5
 800773a:	f7ff faa3 	bl	8006c84 <_free_r>
 800773e:	2000      	movs	r0, #0
 8007740:	6360      	str	r0, [r4, #52]	; 0x34
 8007742:	e7c2      	b.n	80076ca <__sflush_r+0x1a>
 8007744:	6a21      	ldr	r1, [r4, #32]
 8007746:	2301      	movs	r3, #1
 8007748:	4628      	mov	r0, r5
 800774a:	47b0      	blx	r6
 800774c:	1c41      	adds	r1, r0, #1
 800774e:	d1c7      	bne.n	80076e0 <__sflush_r+0x30>
 8007750:	682b      	ldr	r3, [r5, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d0c4      	beq.n	80076e0 <__sflush_r+0x30>
 8007756:	2b1d      	cmp	r3, #29
 8007758:	d001      	beq.n	800775e <__sflush_r+0xae>
 800775a:	2b16      	cmp	r3, #22
 800775c:	d101      	bne.n	8007762 <__sflush_r+0xb2>
 800775e:	602f      	str	r7, [r5, #0]
 8007760:	e7b2      	b.n	80076c8 <__sflush_r+0x18>
 8007762:	89a3      	ldrh	r3, [r4, #12]
 8007764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007768:	81a3      	strh	r3, [r4, #12]
 800776a:	e7ae      	b.n	80076ca <__sflush_r+0x1a>
 800776c:	690f      	ldr	r7, [r1, #16]
 800776e:	2f00      	cmp	r7, #0
 8007770:	d0aa      	beq.n	80076c8 <__sflush_r+0x18>
 8007772:	0793      	lsls	r3, r2, #30
 8007774:	680e      	ldr	r6, [r1, #0]
 8007776:	bf08      	it	eq
 8007778:	694b      	ldreq	r3, [r1, #20]
 800777a:	600f      	str	r7, [r1, #0]
 800777c:	bf18      	it	ne
 800777e:	2300      	movne	r3, #0
 8007780:	1bf6      	subs	r6, r6, r7
 8007782:	608b      	str	r3, [r1, #8]
 8007784:	2e00      	cmp	r6, #0
 8007786:	dd9f      	ble.n	80076c8 <__sflush_r+0x18>
 8007788:	6a21      	ldr	r1, [r4, #32]
 800778a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800778e:	4633      	mov	r3, r6
 8007790:	463a      	mov	r2, r7
 8007792:	4628      	mov	r0, r5
 8007794:	47e0      	blx	ip
 8007796:	2800      	cmp	r0, #0
 8007798:	dc06      	bgt.n	80077a8 <__sflush_r+0xf8>
 800779a:	89a3      	ldrh	r3, [r4, #12]
 800779c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077a0:	81a3      	strh	r3, [r4, #12]
 80077a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077a6:	e790      	b.n	80076ca <__sflush_r+0x1a>
 80077a8:	4407      	add	r7, r0
 80077aa:	1a36      	subs	r6, r6, r0
 80077ac:	e7ea      	b.n	8007784 <__sflush_r+0xd4>
 80077ae:	bf00      	nop
 80077b0:	20400001 	.word	0x20400001

080077b4 <_fflush_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	690b      	ldr	r3, [r1, #16]
 80077b8:	4605      	mov	r5, r0
 80077ba:	460c      	mov	r4, r1
 80077bc:	b913      	cbnz	r3, 80077c4 <_fflush_r+0x10>
 80077be:	2500      	movs	r5, #0
 80077c0:	4628      	mov	r0, r5
 80077c2:	bd38      	pop	{r3, r4, r5, pc}
 80077c4:	b118      	cbz	r0, 80077ce <_fflush_r+0x1a>
 80077c6:	6983      	ldr	r3, [r0, #24]
 80077c8:	b90b      	cbnz	r3, 80077ce <_fflush_r+0x1a>
 80077ca:	f000 f887 	bl	80078dc <__sinit>
 80077ce:	4b14      	ldr	r3, [pc, #80]	; (8007820 <_fflush_r+0x6c>)
 80077d0:	429c      	cmp	r4, r3
 80077d2:	d11b      	bne.n	800780c <_fflush_r+0x58>
 80077d4:	686c      	ldr	r4, [r5, #4]
 80077d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d0ef      	beq.n	80077be <_fflush_r+0xa>
 80077de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077e0:	07d0      	lsls	r0, r2, #31
 80077e2:	d404      	bmi.n	80077ee <_fflush_r+0x3a>
 80077e4:	0599      	lsls	r1, r3, #22
 80077e6:	d402      	bmi.n	80077ee <_fflush_r+0x3a>
 80077e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077ea:	f000 f915 	bl	8007a18 <__retarget_lock_acquire_recursive>
 80077ee:	4628      	mov	r0, r5
 80077f0:	4621      	mov	r1, r4
 80077f2:	f7ff ff5d 	bl	80076b0 <__sflush_r>
 80077f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077f8:	07da      	lsls	r2, r3, #31
 80077fa:	4605      	mov	r5, r0
 80077fc:	d4e0      	bmi.n	80077c0 <_fflush_r+0xc>
 80077fe:	89a3      	ldrh	r3, [r4, #12]
 8007800:	059b      	lsls	r3, r3, #22
 8007802:	d4dd      	bmi.n	80077c0 <_fflush_r+0xc>
 8007804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007806:	f000 f908 	bl	8007a1a <__retarget_lock_release_recursive>
 800780a:	e7d9      	b.n	80077c0 <_fflush_r+0xc>
 800780c:	4b05      	ldr	r3, [pc, #20]	; (8007824 <_fflush_r+0x70>)
 800780e:	429c      	cmp	r4, r3
 8007810:	d101      	bne.n	8007816 <_fflush_r+0x62>
 8007812:	68ac      	ldr	r4, [r5, #8]
 8007814:	e7df      	b.n	80077d6 <_fflush_r+0x22>
 8007816:	4b04      	ldr	r3, [pc, #16]	; (8007828 <_fflush_r+0x74>)
 8007818:	429c      	cmp	r4, r3
 800781a:	bf08      	it	eq
 800781c:	68ec      	ldreq	r4, [r5, #12]
 800781e:	e7da      	b.n	80077d6 <_fflush_r+0x22>
 8007820:	08008324 	.word	0x08008324
 8007824:	08008344 	.word	0x08008344
 8007828:	08008304 	.word	0x08008304

0800782c <std>:
 800782c:	2300      	movs	r3, #0
 800782e:	b510      	push	{r4, lr}
 8007830:	4604      	mov	r4, r0
 8007832:	e9c0 3300 	strd	r3, r3, [r0]
 8007836:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800783a:	6083      	str	r3, [r0, #8]
 800783c:	8181      	strh	r1, [r0, #12]
 800783e:	6643      	str	r3, [r0, #100]	; 0x64
 8007840:	81c2      	strh	r2, [r0, #14]
 8007842:	6183      	str	r3, [r0, #24]
 8007844:	4619      	mov	r1, r3
 8007846:	2208      	movs	r2, #8
 8007848:	305c      	adds	r0, #92	; 0x5c
 800784a:	f7fb fe21 	bl	8003490 <memset>
 800784e:	4b05      	ldr	r3, [pc, #20]	; (8007864 <std+0x38>)
 8007850:	6263      	str	r3, [r4, #36]	; 0x24
 8007852:	4b05      	ldr	r3, [pc, #20]	; (8007868 <std+0x3c>)
 8007854:	62a3      	str	r3, [r4, #40]	; 0x28
 8007856:	4b05      	ldr	r3, [pc, #20]	; (800786c <std+0x40>)
 8007858:	62e3      	str	r3, [r4, #44]	; 0x2c
 800785a:	4b05      	ldr	r3, [pc, #20]	; (8007870 <std+0x44>)
 800785c:	6224      	str	r4, [r4, #32]
 800785e:	6323      	str	r3, [r4, #48]	; 0x30
 8007860:	bd10      	pop	{r4, pc}
 8007862:	bf00      	nop
 8007864:	08007b81 	.word	0x08007b81
 8007868:	08007ba3 	.word	0x08007ba3
 800786c:	08007bdb 	.word	0x08007bdb
 8007870:	08007bff 	.word	0x08007bff

08007874 <_cleanup_r>:
 8007874:	4901      	ldr	r1, [pc, #4]	; (800787c <_cleanup_r+0x8>)
 8007876:	f000 b8af 	b.w	80079d8 <_fwalk_reent>
 800787a:	bf00      	nop
 800787c:	080077b5 	.word	0x080077b5

08007880 <__sfmoreglue>:
 8007880:	b570      	push	{r4, r5, r6, lr}
 8007882:	2268      	movs	r2, #104	; 0x68
 8007884:	1e4d      	subs	r5, r1, #1
 8007886:	4355      	muls	r5, r2
 8007888:	460e      	mov	r6, r1
 800788a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800788e:	f7ff fa63 	bl	8006d58 <_malloc_r>
 8007892:	4604      	mov	r4, r0
 8007894:	b140      	cbz	r0, 80078a8 <__sfmoreglue+0x28>
 8007896:	2100      	movs	r1, #0
 8007898:	e9c0 1600 	strd	r1, r6, [r0]
 800789c:	300c      	adds	r0, #12
 800789e:	60a0      	str	r0, [r4, #8]
 80078a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078a4:	f7fb fdf4 	bl	8003490 <memset>
 80078a8:	4620      	mov	r0, r4
 80078aa:	bd70      	pop	{r4, r5, r6, pc}

080078ac <__sfp_lock_acquire>:
 80078ac:	4801      	ldr	r0, [pc, #4]	; (80078b4 <__sfp_lock_acquire+0x8>)
 80078ae:	f000 b8b3 	b.w	8007a18 <__retarget_lock_acquire_recursive>
 80078b2:	bf00      	nop
 80078b4:	20006179 	.word	0x20006179

080078b8 <__sfp_lock_release>:
 80078b8:	4801      	ldr	r0, [pc, #4]	; (80078c0 <__sfp_lock_release+0x8>)
 80078ba:	f000 b8ae 	b.w	8007a1a <__retarget_lock_release_recursive>
 80078be:	bf00      	nop
 80078c0:	20006179 	.word	0x20006179

080078c4 <__sinit_lock_acquire>:
 80078c4:	4801      	ldr	r0, [pc, #4]	; (80078cc <__sinit_lock_acquire+0x8>)
 80078c6:	f000 b8a7 	b.w	8007a18 <__retarget_lock_acquire_recursive>
 80078ca:	bf00      	nop
 80078cc:	2000617a 	.word	0x2000617a

080078d0 <__sinit_lock_release>:
 80078d0:	4801      	ldr	r0, [pc, #4]	; (80078d8 <__sinit_lock_release+0x8>)
 80078d2:	f000 b8a2 	b.w	8007a1a <__retarget_lock_release_recursive>
 80078d6:	bf00      	nop
 80078d8:	2000617a 	.word	0x2000617a

080078dc <__sinit>:
 80078dc:	b510      	push	{r4, lr}
 80078de:	4604      	mov	r4, r0
 80078e0:	f7ff fff0 	bl	80078c4 <__sinit_lock_acquire>
 80078e4:	69a3      	ldr	r3, [r4, #24]
 80078e6:	b11b      	cbz	r3, 80078f0 <__sinit+0x14>
 80078e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078ec:	f7ff bff0 	b.w	80078d0 <__sinit_lock_release>
 80078f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80078f4:	6523      	str	r3, [r4, #80]	; 0x50
 80078f6:	4b13      	ldr	r3, [pc, #76]	; (8007944 <__sinit+0x68>)
 80078f8:	4a13      	ldr	r2, [pc, #76]	; (8007948 <__sinit+0x6c>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80078fe:	42a3      	cmp	r3, r4
 8007900:	bf04      	itt	eq
 8007902:	2301      	moveq	r3, #1
 8007904:	61a3      	streq	r3, [r4, #24]
 8007906:	4620      	mov	r0, r4
 8007908:	f000 f820 	bl	800794c <__sfp>
 800790c:	6060      	str	r0, [r4, #4]
 800790e:	4620      	mov	r0, r4
 8007910:	f000 f81c 	bl	800794c <__sfp>
 8007914:	60a0      	str	r0, [r4, #8]
 8007916:	4620      	mov	r0, r4
 8007918:	f000 f818 	bl	800794c <__sfp>
 800791c:	2200      	movs	r2, #0
 800791e:	60e0      	str	r0, [r4, #12]
 8007920:	2104      	movs	r1, #4
 8007922:	6860      	ldr	r0, [r4, #4]
 8007924:	f7ff ff82 	bl	800782c <std>
 8007928:	68a0      	ldr	r0, [r4, #8]
 800792a:	2201      	movs	r2, #1
 800792c:	2109      	movs	r1, #9
 800792e:	f7ff ff7d 	bl	800782c <std>
 8007932:	68e0      	ldr	r0, [r4, #12]
 8007934:	2202      	movs	r2, #2
 8007936:	2112      	movs	r1, #18
 8007938:	f7ff ff78 	bl	800782c <std>
 800793c:	2301      	movs	r3, #1
 800793e:	61a3      	str	r3, [r4, #24]
 8007940:	e7d2      	b.n	80078e8 <__sinit+0xc>
 8007942:	bf00      	nop
 8007944:	08007ec0 	.word	0x08007ec0
 8007948:	08007875 	.word	0x08007875

0800794c <__sfp>:
 800794c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794e:	4607      	mov	r7, r0
 8007950:	f7ff ffac 	bl	80078ac <__sfp_lock_acquire>
 8007954:	4b1e      	ldr	r3, [pc, #120]	; (80079d0 <__sfp+0x84>)
 8007956:	681e      	ldr	r6, [r3, #0]
 8007958:	69b3      	ldr	r3, [r6, #24]
 800795a:	b913      	cbnz	r3, 8007962 <__sfp+0x16>
 800795c:	4630      	mov	r0, r6
 800795e:	f7ff ffbd 	bl	80078dc <__sinit>
 8007962:	3648      	adds	r6, #72	; 0x48
 8007964:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007968:	3b01      	subs	r3, #1
 800796a:	d503      	bpl.n	8007974 <__sfp+0x28>
 800796c:	6833      	ldr	r3, [r6, #0]
 800796e:	b30b      	cbz	r3, 80079b4 <__sfp+0x68>
 8007970:	6836      	ldr	r6, [r6, #0]
 8007972:	e7f7      	b.n	8007964 <__sfp+0x18>
 8007974:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007978:	b9d5      	cbnz	r5, 80079b0 <__sfp+0x64>
 800797a:	4b16      	ldr	r3, [pc, #88]	; (80079d4 <__sfp+0x88>)
 800797c:	60e3      	str	r3, [r4, #12]
 800797e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007982:	6665      	str	r5, [r4, #100]	; 0x64
 8007984:	f000 f847 	bl	8007a16 <__retarget_lock_init_recursive>
 8007988:	f7ff ff96 	bl	80078b8 <__sfp_lock_release>
 800798c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007990:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007994:	6025      	str	r5, [r4, #0]
 8007996:	61a5      	str	r5, [r4, #24]
 8007998:	2208      	movs	r2, #8
 800799a:	4629      	mov	r1, r5
 800799c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079a0:	f7fb fd76 	bl	8003490 <memset>
 80079a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079ac:	4620      	mov	r0, r4
 80079ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b0:	3468      	adds	r4, #104	; 0x68
 80079b2:	e7d9      	b.n	8007968 <__sfp+0x1c>
 80079b4:	2104      	movs	r1, #4
 80079b6:	4638      	mov	r0, r7
 80079b8:	f7ff ff62 	bl	8007880 <__sfmoreglue>
 80079bc:	4604      	mov	r4, r0
 80079be:	6030      	str	r0, [r6, #0]
 80079c0:	2800      	cmp	r0, #0
 80079c2:	d1d5      	bne.n	8007970 <__sfp+0x24>
 80079c4:	f7ff ff78 	bl	80078b8 <__sfp_lock_release>
 80079c8:	230c      	movs	r3, #12
 80079ca:	603b      	str	r3, [r7, #0]
 80079cc:	e7ee      	b.n	80079ac <__sfp+0x60>
 80079ce:	bf00      	nop
 80079d0:	08007ec0 	.word	0x08007ec0
 80079d4:	ffff0001 	.word	0xffff0001

080079d8 <_fwalk_reent>:
 80079d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079dc:	4606      	mov	r6, r0
 80079de:	4688      	mov	r8, r1
 80079e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079e4:	2700      	movs	r7, #0
 80079e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079ea:	f1b9 0901 	subs.w	r9, r9, #1
 80079ee:	d505      	bpl.n	80079fc <_fwalk_reent+0x24>
 80079f0:	6824      	ldr	r4, [r4, #0]
 80079f2:	2c00      	cmp	r4, #0
 80079f4:	d1f7      	bne.n	80079e6 <_fwalk_reent+0xe>
 80079f6:	4638      	mov	r0, r7
 80079f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079fc:	89ab      	ldrh	r3, [r5, #12]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d907      	bls.n	8007a12 <_fwalk_reent+0x3a>
 8007a02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a06:	3301      	adds	r3, #1
 8007a08:	d003      	beq.n	8007a12 <_fwalk_reent+0x3a>
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	47c0      	blx	r8
 8007a10:	4307      	orrs	r7, r0
 8007a12:	3568      	adds	r5, #104	; 0x68
 8007a14:	e7e9      	b.n	80079ea <_fwalk_reent+0x12>

08007a16 <__retarget_lock_init_recursive>:
 8007a16:	4770      	bx	lr

08007a18 <__retarget_lock_acquire_recursive>:
 8007a18:	4770      	bx	lr

08007a1a <__retarget_lock_release_recursive>:
 8007a1a:	4770      	bx	lr

08007a1c <__swhatbuf_r>:
 8007a1c:	b570      	push	{r4, r5, r6, lr}
 8007a1e:	460e      	mov	r6, r1
 8007a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a24:	2900      	cmp	r1, #0
 8007a26:	b096      	sub	sp, #88	; 0x58
 8007a28:	4614      	mov	r4, r2
 8007a2a:	461d      	mov	r5, r3
 8007a2c:	da08      	bge.n	8007a40 <__swhatbuf_r+0x24>
 8007a2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	602a      	str	r2, [r5, #0]
 8007a36:	061a      	lsls	r2, r3, #24
 8007a38:	d410      	bmi.n	8007a5c <__swhatbuf_r+0x40>
 8007a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a3e:	e00e      	b.n	8007a5e <__swhatbuf_r+0x42>
 8007a40:	466a      	mov	r2, sp
 8007a42:	f000 f903 	bl	8007c4c <_fstat_r>
 8007a46:	2800      	cmp	r0, #0
 8007a48:	dbf1      	blt.n	8007a2e <__swhatbuf_r+0x12>
 8007a4a:	9a01      	ldr	r2, [sp, #4]
 8007a4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a54:	425a      	negs	r2, r3
 8007a56:	415a      	adcs	r2, r3
 8007a58:	602a      	str	r2, [r5, #0]
 8007a5a:	e7ee      	b.n	8007a3a <__swhatbuf_r+0x1e>
 8007a5c:	2340      	movs	r3, #64	; 0x40
 8007a5e:	2000      	movs	r0, #0
 8007a60:	6023      	str	r3, [r4, #0]
 8007a62:	b016      	add	sp, #88	; 0x58
 8007a64:	bd70      	pop	{r4, r5, r6, pc}
	...

08007a68 <__smakebuf_r>:
 8007a68:	898b      	ldrh	r3, [r1, #12]
 8007a6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a6c:	079d      	lsls	r5, r3, #30
 8007a6e:	4606      	mov	r6, r0
 8007a70:	460c      	mov	r4, r1
 8007a72:	d507      	bpl.n	8007a84 <__smakebuf_r+0x1c>
 8007a74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	6123      	str	r3, [r4, #16]
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	6163      	str	r3, [r4, #20]
 8007a80:	b002      	add	sp, #8
 8007a82:	bd70      	pop	{r4, r5, r6, pc}
 8007a84:	ab01      	add	r3, sp, #4
 8007a86:	466a      	mov	r2, sp
 8007a88:	f7ff ffc8 	bl	8007a1c <__swhatbuf_r>
 8007a8c:	9900      	ldr	r1, [sp, #0]
 8007a8e:	4605      	mov	r5, r0
 8007a90:	4630      	mov	r0, r6
 8007a92:	f7ff f961 	bl	8006d58 <_malloc_r>
 8007a96:	b948      	cbnz	r0, 8007aac <__smakebuf_r+0x44>
 8007a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a9c:	059a      	lsls	r2, r3, #22
 8007a9e:	d4ef      	bmi.n	8007a80 <__smakebuf_r+0x18>
 8007aa0:	f023 0303 	bic.w	r3, r3, #3
 8007aa4:	f043 0302 	orr.w	r3, r3, #2
 8007aa8:	81a3      	strh	r3, [r4, #12]
 8007aaa:	e7e3      	b.n	8007a74 <__smakebuf_r+0xc>
 8007aac:	4b0d      	ldr	r3, [pc, #52]	; (8007ae4 <__smakebuf_r+0x7c>)
 8007aae:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ab0:	89a3      	ldrh	r3, [r4, #12]
 8007ab2:	6020      	str	r0, [r4, #0]
 8007ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ab8:	81a3      	strh	r3, [r4, #12]
 8007aba:	9b00      	ldr	r3, [sp, #0]
 8007abc:	6163      	str	r3, [r4, #20]
 8007abe:	9b01      	ldr	r3, [sp, #4]
 8007ac0:	6120      	str	r0, [r4, #16]
 8007ac2:	b15b      	cbz	r3, 8007adc <__smakebuf_r+0x74>
 8007ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ac8:	4630      	mov	r0, r6
 8007aca:	f000 f8d1 	bl	8007c70 <_isatty_r>
 8007ace:	b128      	cbz	r0, 8007adc <__smakebuf_r+0x74>
 8007ad0:	89a3      	ldrh	r3, [r4, #12]
 8007ad2:	f023 0303 	bic.w	r3, r3, #3
 8007ad6:	f043 0301 	orr.w	r3, r3, #1
 8007ada:	81a3      	strh	r3, [r4, #12]
 8007adc:	89a0      	ldrh	r0, [r4, #12]
 8007ade:	4305      	orrs	r5, r0
 8007ae0:	81a5      	strh	r5, [r4, #12]
 8007ae2:	e7cd      	b.n	8007a80 <__smakebuf_r+0x18>
 8007ae4:	08007875 	.word	0x08007875

08007ae8 <_malloc_usable_size_r>:
 8007ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aec:	1f18      	subs	r0, r3, #4
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	bfbc      	itt	lt
 8007af2:	580b      	ldrlt	r3, [r1, r0]
 8007af4:	18c0      	addlt	r0, r0, r3
 8007af6:	4770      	bx	lr

08007af8 <_raise_r>:
 8007af8:	291f      	cmp	r1, #31
 8007afa:	b538      	push	{r3, r4, r5, lr}
 8007afc:	4604      	mov	r4, r0
 8007afe:	460d      	mov	r5, r1
 8007b00:	d904      	bls.n	8007b0c <_raise_r+0x14>
 8007b02:	2316      	movs	r3, #22
 8007b04:	6003      	str	r3, [r0, #0]
 8007b06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b0a:	bd38      	pop	{r3, r4, r5, pc}
 8007b0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b0e:	b112      	cbz	r2, 8007b16 <_raise_r+0x1e>
 8007b10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b14:	b94b      	cbnz	r3, 8007b2a <_raise_r+0x32>
 8007b16:	4620      	mov	r0, r4
 8007b18:	f000 f830 	bl	8007b7c <_getpid_r>
 8007b1c:	462a      	mov	r2, r5
 8007b1e:	4601      	mov	r1, r0
 8007b20:	4620      	mov	r0, r4
 8007b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b26:	f000 b817 	b.w	8007b58 <_kill_r>
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d00a      	beq.n	8007b44 <_raise_r+0x4c>
 8007b2e:	1c59      	adds	r1, r3, #1
 8007b30:	d103      	bne.n	8007b3a <_raise_r+0x42>
 8007b32:	2316      	movs	r3, #22
 8007b34:	6003      	str	r3, [r0, #0]
 8007b36:	2001      	movs	r0, #1
 8007b38:	e7e7      	b.n	8007b0a <_raise_r+0x12>
 8007b3a:	2400      	movs	r4, #0
 8007b3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b40:	4628      	mov	r0, r5
 8007b42:	4798      	blx	r3
 8007b44:	2000      	movs	r0, #0
 8007b46:	e7e0      	b.n	8007b0a <_raise_r+0x12>

08007b48 <raise>:
 8007b48:	4b02      	ldr	r3, [pc, #8]	; (8007b54 <raise+0xc>)
 8007b4a:	4601      	mov	r1, r0
 8007b4c:	6818      	ldr	r0, [r3, #0]
 8007b4e:	f7ff bfd3 	b.w	8007af8 <_raise_r>
 8007b52:	bf00      	nop
 8007b54:	20000044 	.word	0x20000044

08007b58 <_kill_r>:
 8007b58:	b538      	push	{r3, r4, r5, lr}
 8007b5a:	4d07      	ldr	r5, [pc, #28]	; (8007b78 <_kill_r+0x20>)
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	4604      	mov	r4, r0
 8007b60:	4608      	mov	r0, r1
 8007b62:	4611      	mov	r1, r2
 8007b64:	602b      	str	r3, [r5, #0]
 8007b66:	f000 f8d7 	bl	8007d18 <_kill>
 8007b6a:	1c43      	adds	r3, r0, #1
 8007b6c:	d102      	bne.n	8007b74 <_kill_r+0x1c>
 8007b6e:	682b      	ldr	r3, [r5, #0]
 8007b70:	b103      	cbz	r3, 8007b74 <_kill_r+0x1c>
 8007b72:	6023      	str	r3, [r4, #0]
 8007b74:	bd38      	pop	{r3, r4, r5, pc}
 8007b76:	bf00      	nop
 8007b78:	20006174 	.word	0x20006174

08007b7c <_getpid_r>:
 8007b7c:	f000 b8bc 	b.w	8007cf8 <_getpid>

08007b80 <__sread>:
 8007b80:	b510      	push	{r4, lr}
 8007b82:	460c      	mov	r4, r1
 8007b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b88:	f000 f894 	bl	8007cb4 <_read_r>
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	bfab      	itete	ge
 8007b90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b92:	89a3      	ldrhlt	r3, [r4, #12]
 8007b94:	181b      	addge	r3, r3, r0
 8007b96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b9a:	bfac      	ite	ge
 8007b9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b9e:	81a3      	strhlt	r3, [r4, #12]
 8007ba0:	bd10      	pop	{r4, pc}

08007ba2 <__swrite>:
 8007ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba6:	461f      	mov	r7, r3
 8007ba8:	898b      	ldrh	r3, [r1, #12]
 8007baa:	05db      	lsls	r3, r3, #23
 8007bac:	4605      	mov	r5, r0
 8007bae:	460c      	mov	r4, r1
 8007bb0:	4616      	mov	r6, r2
 8007bb2:	d505      	bpl.n	8007bc0 <__swrite+0x1e>
 8007bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bb8:	2302      	movs	r3, #2
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f000 f868 	bl	8007c90 <_lseek_r>
 8007bc0:	89a3      	ldrh	r3, [r4, #12]
 8007bc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bca:	81a3      	strh	r3, [r4, #12]
 8007bcc:	4632      	mov	r2, r6
 8007bce:	463b      	mov	r3, r7
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd6:	f000 b817 	b.w	8007c08 <_write_r>

08007bda <__sseek>:
 8007bda:	b510      	push	{r4, lr}
 8007bdc:	460c      	mov	r4, r1
 8007bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be2:	f000 f855 	bl	8007c90 <_lseek_r>
 8007be6:	1c43      	adds	r3, r0, #1
 8007be8:	89a3      	ldrh	r3, [r4, #12]
 8007bea:	bf15      	itete	ne
 8007bec:	6560      	strne	r0, [r4, #84]	; 0x54
 8007bee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007bf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007bf6:	81a3      	strheq	r3, [r4, #12]
 8007bf8:	bf18      	it	ne
 8007bfa:	81a3      	strhne	r3, [r4, #12]
 8007bfc:	bd10      	pop	{r4, pc}

08007bfe <__sclose>:
 8007bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c02:	f000 b813 	b.w	8007c2c <_close_r>
	...

08007c08 <_write_r>:
 8007c08:	b538      	push	{r3, r4, r5, lr}
 8007c0a:	4d07      	ldr	r5, [pc, #28]	; (8007c28 <_write_r+0x20>)
 8007c0c:	4604      	mov	r4, r0
 8007c0e:	4608      	mov	r0, r1
 8007c10:	4611      	mov	r1, r2
 8007c12:	2200      	movs	r2, #0
 8007c14:	602a      	str	r2, [r5, #0]
 8007c16:	461a      	mov	r2, r3
 8007c18:	f000 f8a4 	bl	8007d64 <_write>
 8007c1c:	1c43      	adds	r3, r0, #1
 8007c1e:	d102      	bne.n	8007c26 <_write_r+0x1e>
 8007c20:	682b      	ldr	r3, [r5, #0]
 8007c22:	b103      	cbz	r3, 8007c26 <_write_r+0x1e>
 8007c24:	6023      	str	r3, [r4, #0]
 8007c26:	bd38      	pop	{r3, r4, r5, pc}
 8007c28:	20006174 	.word	0x20006174

08007c2c <_close_r>:
 8007c2c:	b538      	push	{r3, r4, r5, lr}
 8007c2e:	4d06      	ldr	r5, [pc, #24]	; (8007c48 <_close_r+0x1c>)
 8007c30:	2300      	movs	r3, #0
 8007c32:	4604      	mov	r4, r0
 8007c34:	4608      	mov	r0, r1
 8007c36:	602b      	str	r3, [r5, #0]
 8007c38:	f000 f84e 	bl	8007cd8 <_close>
 8007c3c:	1c43      	adds	r3, r0, #1
 8007c3e:	d102      	bne.n	8007c46 <_close_r+0x1a>
 8007c40:	682b      	ldr	r3, [r5, #0]
 8007c42:	b103      	cbz	r3, 8007c46 <_close_r+0x1a>
 8007c44:	6023      	str	r3, [r4, #0]
 8007c46:	bd38      	pop	{r3, r4, r5, pc}
 8007c48:	20006174 	.word	0x20006174

08007c4c <_fstat_r>:
 8007c4c:	b538      	push	{r3, r4, r5, lr}
 8007c4e:	4d07      	ldr	r5, [pc, #28]	; (8007c6c <_fstat_r+0x20>)
 8007c50:	2300      	movs	r3, #0
 8007c52:	4604      	mov	r4, r0
 8007c54:	4608      	mov	r0, r1
 8007c56:	4611      	mov	r1, r2
 8007c58:	602b      	str	r3, [r5, #0]
 8007c5a:	f000 f845 	bl	8007ce8 <_fstat>
 8007c5e:	1c43      	adds	r3, r0, #1
 8007c60:	d102      	bne.n	8007c68 <_fstat_r+0x1c>
 8007c62:	682b      	ldr	r3, [r5, #0]
 8007c64:	b103      	cbz	r3, 8007c68 <_fstat_r+0x1c>
 8007c66:	6023      	str	r3, [r4, #0]
 8007c68:	bd38      	pop	{r3, r4, r5, pc}
 8007c6a:	bf00      	nop
 8007c6c:	20006174 	.word	0x20006174

08007c70 <_isatty_r>:
 8007c70:	b538      	push	{r3, r4, r5, lr}
 8007c72:	4d06      	ldr	r5, [pc, #24]	; (8007c8c <_isatty_r+0x1c>)
 8007c74:	2300      	movs	r3, #0
 8007c76:	4604      	mov	r4, r0
 8007c78:	4608      	mov	r0, r1
 8007c7a:	602b      	str	r3, [r5, #0]
 8007c7c:	f000 f844 	bl	8007d08 <_isatty>
 8007c80:	1c43      	adds	r3, r0, #1
 8007c82:	d102      	bne.n	8007c8a <_isatty_r+0x1a>
 8007c84:	682b      	ldr	r3, [r5, #0]
 8007c86:	b103      	cbz	r3, 8007c8a <_isatty_r+0x1a>
 8007c88:	6023      	str	r3, [r4, #0]
 8007c8a:	bd38      	pop	{r3, r4, r5, pc}
 8007c8c:	20006174 	.word	0x20006174

08007c90 <_lseek_r>:
 8007c90:	b538      	push	{r3, r4, r5, lr}
 8007c92:	4d07      	ldr	r5, [pc, #28]	; (8007cb0 <_lseek_r+0x20>)
 8007c94:	4604      	mov	r4, r0
 8007c96:	4608      	mov	r0, r1
 8007c98:	4611      	mov	r1, r2
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	602a      	str	r2, [r5, #0]
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	f000 f842 	bl	8007d28 <_lseek>
 8007ca4:	1c43      	adds	r3, r0, #1
 8007ca6:	d102      	bne.n	8007cae <_lseek_r+0x1e>
 8007ca8:	682b      	ldr	r3, [r5, #0]
 8007caa:	b103      	cbz	r3, 8007cae <_lseek_r+0x1e>
 8007cac:	6023      	str	r3, [r4, #0]
 8007cae:	bd38      	pop	{r3, r4, r5, pc}
 8007cb0:	20006174 	.word	0x20006174

08007cb4 <_read_r>:
 8007cb4:	b538      	push	{r3, r4, r5, lr}
 8007cb6:	4d07      	ldr	r5, [pc, #28]	; (8007cd4 <_read_r+0x20>)
 8007cb8:	4604      	mov	r4, r0
 8007cba:	4608      	mov	r0, r1
 8007cbc:	4611      	mov	r1, r2
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	602a      	str	r2, [r5, #0]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	f000 f838 	bl	8007d38 <_read>
 8007cc8:	1c43      	adds	r3, r0, #1
 8007cca:	d102      	bne.n	8007cd2 <_read_r+0x1e>
 8007ccc:	682b      	ldr	r3, [r5, #0]
 8007cce:	b103      	cbz	r3, 8007cd2 <_read_r+0x1e>
 8007cd0:	6023      	str	r3, [r4, #0]
 8007cd2:	bd38      	pop	{r3, r4, r5, pc}
 8007cd4:	20006174 	.word	0x20006174

08007cd8 <_close>:
 8007cd8:	4b02      	ldr	r3, [pc, #8]	; (8007ce4 <_close+0xc>)
 8007cda:	2258      	movs	r2, #88	; 0x58
 8007cdc:	601a      	str	r2, [r3, #0]
 8007cde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ce2:	4770      	bx	lr
 8007ce4:	20006174 	.word	0x20006174

08007ce8 <_fstat>:
 8007ce8:	4b02      	ldr	r3, [pc, #8]	; (8007cf4 <_fstat+0xc>)
 8007cea:	2258      	movs	r2, #88	; 0x58
 8007cec:	601a      	str	r2, [r3, #0]
 8007cee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cf2:	4770      	bx	lr
 8007cf4:	20006174 	.word	0x20006174

08007cf8 <_getpid>:
 8007cf8:	4b02      	ldr	r3, [pc, #8]	; (8007d04 <_getpid+0xc>)
 8007cfa:	2258      	movs	r2, #88	; 0x58
 8007cfc:	601a      	str	r2, [r3, #0]
 8007cfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d02:	4770      	bx	lr
 8007d04:	20006174 	.word	0x20006174

08007d08 <_isatty>:
 8007d08:	4b02      	ldr	r3, [pc, #8]	; (8007d14 <_isatty+0xc>)
 8007d0a:	2258      	movs	r2, #88	; 0x58
 8007d0c:	601a      	str	r2, [r3, #0]
 8007d0e:	2000      	movs	r0, #0
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	20006174 	.word	0x20006174

08007d18 <_kill>:
 8007d18:	4b02      	ldr	r3, [pc, #8]	; (8007d24 <_kill+0xc>)
 8007d1a:	2258      	movs	r2, #88	; 0x58
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d22:	4770      	bx	lr
 8007d24:	20006174 	.word	0x20006174

08007d28 <_lseek>:
 8007d28:	4b02      	ldr	r3, [pc, #8]	; (8007d34 <_lseek+0xc>)
 8007d2a:	2258      	movs	r2, #88	; 0x58
 8007d2c:	601a      	str	r2, [r3, #0]
 8007d2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d32:	4770      	bx	lr
 8007d34:	20006174 	.word	0x20006174

08007d38 <_read>:
 8007d38:	4b02      	ldr	r3, [pc, #8]	; (8007d44 <_read+0xc>)
 8007d3a:	2258      	movs	r2, #88	; 0x58
 8007d3c:	601a      	str	r2, [r3, #0]
 8007d3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d42:	4770      	bx	lr
 8007d44:	20006174 	.word	0x20006174

08007d48 <_sbrk>:
 8007d48:	4a04      	ldr	r2, [pc, #16]	; (8007d5c <_sbrk+0x14>)
 8007d4a:	6811      	ldr	r1, [r2, #0]
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	b909      	cbnz	r1, 8007d54 <_sbrk+0xc>
 8007d50:	4903      	ldr	r1, [pc, #12]	; (8007d60 <_sbrk+0x18>)
 8007d52:	6011      	str	r1, [r2, #0]
 8007d54:	6810      	ldr	r0, [r2, #0]
 8007d56:	4403      	add	r3, r0
 8007d58:	6013      	str	r3, [r2, #0]
 8007d5a:	4770      	bx	lr
 8007d5c:	2000617c 	.word	0x2000617c
 8007d60:	20006180 	.word	0x20006180

08007d64 <_write>:
 8007d64:	4b02      	ldr	r3, [pc, #8]	; (8007d70 <_write+0xc>)
 8007d66:	2258      	movs	r2, #88	; 0x58
 8007d68:	601a      	str	r2, [r3, #0]
 8007d6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d6e:	4770      	bx	lr
 8007d70:	20006174 	.word	0x20006174

08007d74 <_exit>:
 8007d74:	e7fe      	b.n	8007d74 <_exit>
	...

08007d78 <_init>:
 8007d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7a:	bf00      	nop
 8007d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d7e:	bc08      	pop	{r3}
 8007d80:	469e      	mov	lr, r3
 8007d82:	4770      	bx	lr

08007d84 <_fini>:
 8007d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d86:	bf00      	nop
 8007d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d8a:	bc08      	pop	{r3}
 8007d8c:	469e      	mov	lr, r3
 8007d8e:	4770      	bx	lr
