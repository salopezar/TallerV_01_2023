
solucionTarea4Especial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  08007a60  08007a60  00017a60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fc4  08007fc4  00020218  2**0
                  CONTENTS
  4 .ARM          00000000  08007fc4  08007fc4  00020218  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007fc4  08007fc4  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fc4  08007fc4  00017fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fc8  08007fc8  00017fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08007fcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000218  080081e4  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  080081e4  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003354  00000000  00000000  00020242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000baf  00000000  00000000  00023596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000270  00000000  00000000  00024148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001f8  00000000  00000000  000243b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fc4f  00000000  00000000  000245b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003c4d  00000000  00000000  000341ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055f59  00000000  00000000  00037e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008dda5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f40  00000000  00000000  0008ddf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0008fd38  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0008fe04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007a48 	.word	0x08007a48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	08007a48 	.word	0x08007a48

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_frsub>:
 8000c98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	e002      	b.n	8000ca4 <__addsf3>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_fsub>:
 8000ca0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ca4 <__addsf3>:
 8000ca4:	0042      	lsls	r2, r0, #1
 8000ca6:	bf1f      	itttt	ne
 8000ca8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cac:	ea92 0f03 	teqne	r2, r3
 8000cb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb8:	d06a      	beq.n	8000d90 <__addsf3+0xec>
 8000cba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cc2:	bfc1      	itttt	gt
 8000cc4:	18d2      	addgt	r2, r2, r3
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	4048      	eorgt	r0, r1
 8000cca:	4041      	eorgt	r1, r0
 8000ccc:	bfb8      	it	lt
 8000cce:	425b      	neglt	r3, r3
 8000cd0:	2b19      	cmp	r3, #25
 8000cd2:	bf88      	it	hi
 8000cd4:	4770      	bxhi	lr
 8000cd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4240      	negne	r0, r0
 8000ce6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4249      	negne	r1, r1
 8000cf6:	ea92 0f03 	teq	r2, r3
 8000cfa:	d03f      	beq.n	8000d7c <__addsf3+0xd8>
 8000cfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000d00:	fa41 fc03 	asr.w	ip, r1, r3
 8000d04:	eb10 000c 	adds.w	r0, r0, ip
 8000d08:	f1c3 0320 	rsb	r3, r3, #32
 8000d0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__addsf3+0x78>
 8000d16:	4249      	negs	r1, r1
 8000d18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d20:	d313      	bcc.n	8000d4a <__addsf3+0xa6>
 8000d22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d26:	d306      	bcc.n	8000d36 <__addsf3+0x92>
 8000d28:	0840      	lsrs	r0, r0, #1
 8000d2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2e:	f102 0201 	add.w	r2, r2, #1
 8000d32:	2afe      	cmp	r2, #254	; 0xfe
 8000d34:	d251      	bcs.n	8000dda <__addsf3+0x136>
 8000d36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	ea40 0003 	orr.w	r0, r0, r3
 8000d48:	4770      	bx	lr
 8000d4a:	0049      	lsls	r1, r1, #1
 8000d4c:	eb40 0000 	adc.w	r0, r0, r0
 8000d50:	3a01      	subs	r2, #1
 8000d52:	bf28      	it	cs
 8000d54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d58:	d2ed      	bcs.n	8000d36 <__addsf3+0x92>
 8000d5a:	fab0 fc80 	clz	ip, r0
 8000d5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d62:	ebb2 020c 	subs.w	r2, r2, ip
 8000d66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d6a:	bfaa      	itet	ge
 8000d6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d70:	4252      	neglt	r2, r2
 8000d72:	4318      	orrge	r0, r3
 8000d74:	bfbc      	itt	lt
 8000d76:	40d0      	lsrlt	r0, r2
 8000d78:	4318      	orrlt	r0, r3
 8000d7a:	4770      	bx	lr
 8000d7c:	f092 0f00 	teq	r2, #0
 8000d80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d84:	bf06      	itte	eq
 8000d86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d8a:	3201      	addeq	r2, #1
 8000d8c:	3b01      	subne	r3, #1
 8000d8e:	e7b5      	b.n	8000cfc <__addsf3+0x58>
 8000d90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	bf18      	it	ne
 8000d9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9e:	d021      	beq.n	8000de4 <__addsf3+0x140>
 8000da0:	ea92 0f03 	teq	r2, r3
 8000da4:	d004      	beq.n	8000db0 <__addsf3+0x10c>
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	bf08      	it	eq
 8000dac:	4608      	moveq	r0, r1
 8000dae:	4770      	bx	lr
 8000db0:	ea90 0f01 	teq	r0, r1
 8000db4:	bf1c      	itt	ne
 8000db6:	2000      	movne	r0, #0
 8000db8:	4770      	bxne	lr
 8000dba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dbe:	d104      	bne.n	8000dca <__addsf3+0x126>
 8000dc0:	0040      	lsls	r0, r0, #1
 8000dc2:	bf28      	it	cs
 8000dc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc8:	4770      	bx	lr
 8000dca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dce:	bf3c      	itt	cc
 8000dd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dd4:	4770      	bxcc	lr
 8000dd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de2:	4770      	bx	lr
 8000de4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de8:	bf16      	itet	ne
 8000dea:	4608      	movne	r0, r1
 8000dec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000df0:	4601      	movne	r1, r0
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	bf06      	itte	eq
 8000df6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dfa:	ea90 0f01 	teqeq	r0, r1
 8000dfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_ui2f>:
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e004      	b.n	8000e14 <__aeabi_i2f+0x8>
 8000e0a:	bf00      	nop

08000e0c <__aeabi_i2f>:
 8000e0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e10:	bf48      	it	mi
 8000e12:	4240      	negmi	r0, r0
 8000e14:	ea5f 0c00 	movs.w	ip, r0
 8000e18:	bf08      	it	eq
 8000e1a:	4770      	bxeq	lr
 8000e1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e20:	4601      	mov	r1, r0
 8000e22:	f04f 0000 	mov.w	r0, #0
 8000e26:	e01c      	b.n	8000e62 <__aeabi_l2f+0x2a>

08000e28 <__aeabi_ul2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e00a      	b.n	8000e4c <__aeabi_l2f+0x14>
 8000e36:	bf00      	nop

08000e38 <__aeabi_l2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e44:	d502      	bpl.n	8000e4c <__aeabi_l2f+0x14>
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	ea5f 0c01 	movs.w	ip, r1
 8000e50:	bf02      	ittt	eq
 8000e52:	4684      	moveq	ip, r0
 8000e54:	4601      	moveq	r1, r0
 8000e56:	2000      	moveq	r0, #0
 8000e58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e5c:	bf08      	it	eq
 8000e5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e66:	fabc f28c 	clz	r2, ip
 8000e6a:	3a08      	subs	r2, #8
 8000e6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e70:	db10      	blt.n	8000e94 <__aeabi_l2f+0x5c>
 8000e72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e76:	4463      	add	r3, ip
 8000e78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7c:	f1c2 0220 	rsb	r2, r2, #32
 8000e80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e84:	fa20 f202 	lsr.w	r2, r0, r2
 8000e88:	eb43 0002 	adc.w	r0, r3, r2
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f102 0220 	add.w	r2, r2, #32
 8000e98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_fmul>:
 8000eb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ebc:	bf1e      	ittt	ne
 8000ebe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ec2:	ea92 0f0c 	teqne	r2, ip
 8000ec6:	ea93 0f0c 	teqne	r3, ip
 8000eca:	d06f      	beq.n	8000fac <__aeabi_fmul+0xf8>
 8000ecc:	441a      	add	r2, r3
 8000ece:	ea80 0c01 	eor.w	ip, r0, r1
 8000ed2:	0240      	lsls	r0, r0, #9
 8000ed4:	bf18      	it	ne
 8000ed6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000eda:	d01e      	beq.n	8000f1a <__aeabi_fmul+0x66>
 8000edc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ee0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ee4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ee8:	fba0 3101 	umull	r3, r1, r0, r1
 8000eec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ef4:	bf3e      	ittt	cc
 8000ef6:	0049      	lslcc	r1, r1, #1
 8000ef8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	ea40 0001 	orr.w	r0, r0, r1
 8000f02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000f06:	2afd      	cmp	r2, #253	; 0xfd
 8000f08:	d81d      	bhi.n	8000f46 <__aeabi_fmul+0x92>
 8000f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f12:	bf08      	it	eq
 8000f14:	f020 0001 	biceq.w	r0, r0, #1
 8000f18:	4770      	bx	lr
 8000f1a:	f090 0f00 	teq	r0, #0
 8000f1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f22:	bf08      	it	eq
 8000f24:	0249      	lsleq	r1, r1, #9
 8000f26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000f2e:	3a7f      	subs	r2, #127	; 0x7f
 8000f30:	bfc2      	ittt	gt
 8000f32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f3a:	4770      	bxgt	lr
 8000f3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	3a01      	subs	r2, #1
 8000f46:	dc5d      	bgt.n	8001004 <__aeabi_fmul+0x150>
 8000f48:	f112 0f19 	cmn.w	r2, #25
 8000f4c:	bfdc      	itt	le
 8000f4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000f52:	4770      	bxle	lr
 8000f54:	f1c2 0200 	rsb	r2, r2, #0
 8000f58:	0041      	lsls	r1, r0, #1
 8000f5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000f5e:	f1c2 0220 	rsb	r2, r2, #32
 8000f62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f6a:	f140 0000 	adc.w	r0, r0, #0
 8000f6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f72:	bf08      	it	eq
 8000f74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f78:	4770      	bx	lr
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fmul+0xce>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fmul+0xe6>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e78f      	b.n	8000ecc <__aeabi_fmul+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	bf18      	it	ne
 8000fb6:	ea93 0f0c 	teqne	r3, ip
 8000fba:	d00a      	beq.n	8000fd2 <__aeabi_fmul+0x11e>
 8000fbc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc0:	bf18      	it	ne
 8000fc2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	d1d8      	bne.n	8000f7a <__aeabi_fmul+0xc6>
 8000fc8:	ea80 0001 	eor.w	r0, r0, r1
 8000fcc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fd0:	4770      	bx	lr
 8000fd2:	f090 0f00 	teq	r0, #0
 8000fd6:	bf17      	itett	ne
 8000fd8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000fdc:	4608      	moveq	r0, r1
 8000fde:	f091 0f00 	teqne	r1, #0
 8000fe2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000fe6:	d014      	beq.n	8001012 <__aeabi_fmul+0x15e>
 8000fe8:	ea92 0f0c 	teq	r2, ip
 8000fec:	d101      	bne.n	8000ff2 <__aeabi_fmul+0x13e>
 8000fee:	0242      	lsls	r2, r0, #9
 8000ff0:	d10f      	bne.n	8001012 <__aeabi_fmul+0x15e>
 8000ff2:	ea93 0f0c 	teq	r3, ip
 8000ff6:	d103      	bne.n	8001000 <__aeabi_fmul+0x14c>
 8000ff8:	024b      	lsls	r3, r1, #9
 8000ffa:	bf18      	it	ne
 8000ffc:	4608      	movne	r0, r1
 8000ffe:	d108      	bne.n	8001012 <__aeabi_fmul+0x15e>
 8001000:	ea80 0001 	eor.w	r0, r0, r1
 8001004:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8001008:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800100c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001010:	4770      	bx	lr
 8001012:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001016:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800101a:	4770      	bx	lr

0800101c <__aeabi_fdiv>:
 800101c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001020:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001024:	bf1e      	ittt	ne
 8001026:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800102a:	ea92 0f0c 	teqne	r2, ip
 800102e:	ea93 0f0c 	teqne	r3, ip
 8001032:	d069      	beq.n	8001108 <__aeabi_fdiv+0xec>
 8001034:	eba2 0203 	sub.w	r2, r2, r3
 8001038:	ea80 0c01 	eor.w	ip, r0, r1
 800103c:	0249      	lsls	r1, r1, #9
 800103e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001042:	d037      	beq.n	80010b4 <__aeabi_fdiv+0x98>
 8001044:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001048:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800104c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001050:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001054:	428b      	cmp	r3, r1
 8001056:	bf38      	it	cc
 8001058:	005b      	lslcc	r3, r3, #1
 800105a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800105e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001062:	428b      	cmp	r3, r1
 8001064:	bf24      	itt	cs
 8001066:	1a5b      	subcs	r3, r3, r1
 8001068:	ea40 000c 	orrcs.w	r0, r0, ip
 800106c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001070:	bf24      	itt	cs
 8001072:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001076:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800107a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800107e:	bf24      	itt	cs
 8001080:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001084:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001088:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800108c:	bf24      	itt	cs
 800108e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001092:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001096:	011b      	lsls	r3, r3, #4
 8001098:	bf18      	it	ne
 800109a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800109e:	d1e0      	bne.n	8001062 <__aeabi_fdiv+0x46>
 80010a0:	2afd      	cmp	r2, #253	; 0xfd
 80010a2:	f63f af50 	bhi.w	8000f46 <__aeabi_fmul+0x92>
 80010a6:	428b      	cmp	r3, r1
 80010a8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80010ac:	bf08      	it	eq
 80010ae:	f020 0001 	biceq.w	r0, r0, #1
 80010b2:	4770      	bx	lr
 80010b4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80010b8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80010bc:	327f      	adds	r2, #127	; 0x7f
 80010be:	bfc2      	ittt	gt
 80010c0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80010c4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80010c8:	4770      	bxgt	lr
 80010ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	3a01      	subs	r2, #1
 80010d4:	e737      	b.n	8000f46 <__aeabi_fmul+0x92>
 80010d6:	f092 0f00 	teq	r2, #0
 80010da:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80010de:	bf02      	ittt	eq
 80010e0:	0040      	lsleq	r0, r0, #1
 80010e2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80010e6:	3a01      	subeq	r2, #1
 80010e8:	d0f9      	beq.n	80010de <__aeabi_fdiv+0xc2>
 80010ea:	ea40 000c 	orr.w	r0, r0, ip
 80010ee:	f093 0f00 	teq	r3, #0
 80010f2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80010f6:	bf02      	ittt	eq
 80010f8:	0049      	lsleq	r1, r1, #1
 80010fa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010fe:	3b01      	subeq	r3, #1
 8001100:	d0f9      	beq.n	80010f6 <__aeabi_fdiv+0xda>
 8001102:	ea41 010c 	orr.w	r1, r1, ip
 8001106:	e795      	b.n	8001034 <__aeabi_fdiv+0x18>
 8001108:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800110c:	ea92 0f0c 	teq	r2, ip
 8001110:	d108      	bne.n	8001124 <__aeabi_fdiv+0x108>
 8001112:	0242      	lsls	r2, r0, #9
 8001114:	f47f af7d 	bne.w	8001012 <__aeabi_fmul+0x15e>
 8001118:	ea93 0f0c 	teq	r3, ip
 800111c:	f47f af70 	bne.w	8001000 <__aeabi_fmul+0x14c>
 8001120:	4608      	mov	r0, r1
 8001122:	e776      	b.n	8001012 <__aeabi_fmul+0x15e>
 8001124:	ea93 0f0c 	teq	r3, ip
 8001128:	d104      	bne.n	8001134 <__aeabi_fdiv+0x118>
 800112a:	024b      	lsls	r3, r1, #9
 800112c:	f43f af4c 	beq.w	8000fc8 <__aeabi_fmul+0x114>
 8001130:	4608      	mov	r0, r1
 8001132:	e76e      	b.n	8001012 <__aeabi_fmul+0x15e>
 8001134:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001138:	bf18      	it	ne
 800113a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800113e:	d1ca      	bne.n	80010d6 <__aeabi_fdiv+0xba>
 8001140:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001144:	f47f af5c 	bne.w	8001000 <__aeabi_fmul+0x14c>
 8001148:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800114c:	f47f af3c 	bne.w	8000fc8 <__aeabi_fmul+0x114>
 8001150:	e75f      	b.n	8001012 <__aeabi_fmul+0x15e>
 8001152:	bf00      	nop

08001154 <__aeabi_f2uiz>:
 8001154:	0042      	lsls	r2, r0, #1
 8001156:	d20e      	bcs.n	8001176 <__aeabi_f2uiz+0x22>
 8001158:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800115c:	d30b      	bcc.n	8001176 <__aeabi_f2uiz+0x22>
 800115e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001162:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001166:	d409      	bmi.n	800117c <__aeabi_f2uiz+0x28>
 8001168:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800116c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001170:	fa23 f002 	lsr.w	r0, r3, r2
 8001174:	4770      	bx	lr
 8001176:	f04f 0000 	mov.w	r0, #0
 800117a:	4770      	bx	lr
 800117c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001180:	d101      	bne.n	8001186 <__aeabi_f2uiz+0x32>
 8001182:	0242      	lsls	r2, r0, #9
 8001184:	d102      	bne.n	800118c <__aeabi_f2uiz+0x38>
 8001186:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800118a:	4770      	bx	lr
 800118c:	f04f 0000 	mov.w	r0, #0
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop

08001194 <__aeabi_d2lz>:
 8001194:	b538      	push	{r3, r4, r5, lr}
 8001196:	4605      	mov	r5, r0
 8001198:	460c      	mov	r4, r1
 800119a:	4628      	mov	r0, r5
 800119c:	4621      	mov	r1, r4
 800119e:	2200      	movs	r2, #0
 80011a0:	2300      	movs	r3, #0
 80011a2:	f7ff fca3 	bl	8000aec <__aeabi_dcmplt>
 80011a6:	b928      	cbnz	r0, 80011b4 <__aeabi_d2lz+0x20>
 80011a8:	4628      	mov	r0, r5
 80011aa:	4621      	mov	r1, r4
 80011ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011b0:	f000 b80a 	b.w	80011c8 <__aeabi_d2ulz>
 80011b4:	4628      	mov	r0, r5
 80011b6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011ba:	f000 f805 	bl	80011c8 <__aeabi_d2ulz>
 80011be:	4240      	negs	r0, r0
 80011c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011c4:	bd38      	pop	{r3, r4, r5, pc}
 80011c6:	bf00      	nop

080011c8 <__aeabi_d2ulz>:
 80011c8:	b5d0      	push	{r4, r6, r7, lr}
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <__aeabi_d2ulz+0x34>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	4606      	mov	r6, r0
 80011d0:	460f      	mov	r7, r1
 80011d2:	f7ff fa19 	bl	8000608 <__aeabi_dmul>
 80011d6:	f7ff fcef 	bl	8000bb8 <__aeabi_d2uiz>
 80011da:	4604      	mov	r4, r0
 80011dc:	f7ff f99a 	bl	8000514 <__aeabi_ui2d>
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <__aeabi_d2ulz+0x38>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	f7ff fa10 	bl	8000608 <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4630      	mov	r0, r6
 80011ee:	4639      	mov	r1, r7
 80011f0:	f7ff f852 	bl	8000298 <__aeabi_dsub>
 80011f4:	f7ff fce0 	bl	8000bb8 <__aeabi_d2uiz>
 80011f8:	4621      	mov	r1, r4
 80011fa:	bdd0      	pop	{r4, r6, r7, pc}
 80011fc:	3df00000 	.word	0x3df00000
 8001200:	41f00000 	.word	0x41f00000
 8001204:	00000000 	.word	0x00000000

08001208 <main>:

// La función de inicialización del sistema
void init_Hardware(void);


int main(void){
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
	// Se llama la función de inicialización.
	init_Hardware();
 800120e:	f000 fbbf 	bl	8001990 <init_Hardware>
		 * los ejes X, Y y Z. El código utiliza funciones de comunicación I2C
		 * para interactuar con el acelerómetro. Se entra en el ciclo cuando lo que
		 * se envía es diferente del caracter nulo,
		 */

		if(rxData != '\0'){
 8001212:	4b85      	ldr	r3, [pc, #532]	; (8001428 <main+0x220>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 8175 	beq.w	8001506 <main+0x2fe>
			//writeChar(&USART6Comm, rxData);
			// Lectura sobre el WHO_AM_I del acelerómetro.
			if(rxData == 'w'){
 800121c:	4b82      	ldr	r3, [pc, #520]	; (8001428 <main+0x220>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b77      	cmp	r3, #119	; 0x77
 8001222:	d11e      	bne.n	8001262 <main+0x5a>
				sprintf(bufferData, "WHO_AM_I? (r)\n");
 8001224:	4981      	ldr	r1, [pc, #516]	; (800142c <main+0x224>)
 8001226:	4882      	ldr	r0, [pc, #520]	; (8001430 <main+0x228>)
 8001228:	f002 fe0e 	bl	8003e48 <siprintf>
				writeMsg(&USART6Comm, bufferData);
 800122c:	4980      	ldr	r1, [pc, #512]	; (8001430 <main+0x228>)
 800122e:	4881      	ldr	r0, [pc, #516]	; (8001434 <main+0x22c>)
 8001230:	f001 ff17 	bl	8003062 <writeMsg>
				// Configuración del I2C e impresión del mensaje,
				i2cBuffer = i2c_readSingleRegister(&Acelerometer, WHO_AM_I);
 8001234:	2100      	movs	r1, #0
 8001236:	4880      	ldr	r0, [pc, #512]	; (8001438 <main+0x230>)
 8001238:	f001 f97a 	bl	8002530 <i2c_readSingleRegister>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	4b7e      	ldr	r3, [pc, #504]	; (800143c <main+0x234>)
 8001242:	701a      	strb	r2, [r3, #0]
				sprintf(bufferData, "dataRead = 0x%x \n", (unsigned int) i2cBuffer);
 8001244:	4b7d      	ldr	r3, [pc, #500]	; (800143c <main+0x234>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	497d      	ldr	r1, [pc, #500]	; (8001440 <main+0x238>)
 800124c:	4878      	ldr	r0, [pc, #480]	; (8001430 <main+0x228>)
 800124e:	f002 fdfb 	bl	8003e48 <siprintf>
				writeMsg(&USART6Comm, bufferData);
 8001252:	4977      	ldr	r1, [pc, #476]	; (8001430 <main+0x228>)
 8001254:	4877      	ldr	r0, [pc, #476]	; (8001434 <main+0x22c>)
 8001256:	f001 ff04 	bl	8003062 <writeMsg>
				rxData = '\0';
 800125a:	4b73      	ldr	r3, [pc, #460]	; (8001428 <main+0x220>)
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
 8001260:	e151      	b.n	8001506 <main+0x2fe>
			}
			// Estado del acelerómetro
			else if (rxData == 'p'){
 8001262:	4b71      	ldr	r3, [pc, #452]	; (8001428 <main+0x220>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b70      	cmp	r3, #112	; 0x70
 8001268:	d11e      	bne.n	80012a8 <main+0xa0>
				sprintf(bufferData, "PWR_MGMT_1 state (r)\n");
 800126a:	4976      	ldr	r1, [pc, #472]	; (8001444 <main+0x23c>)
 800126c:	4870      	ldr	r0, [pc, #448]	; (8001430 <main+0x228>)
 800126e:	f002 fdeb 	bl	8003e48 <siprintf>
				writeMsg(&USART6Comm, bufferData);
 8001272:	496f      	ldr	r1, [pc, #444]	; (8001430 <main+0x228>)
 8001274:	486f      	ldr	r0, [pc, #444]	; (8001434 <main+0x22c>)
 8001276:	f001 fef4 	bl	8003062 <writeMsg>
				i2cBuffer = i2c_readSingleRegister(&Acelerometer, POWER_CTL);
 800127a:	212d      	movs	r1, #45	; 0x2d
 800127c:	486e      	ldr	r0, [pc, #440]	; (8001438 <main+0x230>)
 800127e:	f001 f957 	bl	8002530 <i2c_readSingleRegister>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	4b6d      	ldr	r3, [pc, #436]	; (800143c <main+0x234>)
 8001288:	701a      	strb	r2, [r3, #0]
				sprintf(bufferData, "dataRead = 0x%x \n", (unsigned int) i2cBuffer);
 800128a:	4b6c      	ldr	r3, [pc, #432]	; (800143c <main+0x234>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	496b      	ldr	r1, [pc, #428]	; (8001440 <main+0x238>)
 8001292:	4867      	ldr	r0, [pc, #412]	; (8001430 <main+0x228>)
 8001294:	f002 fdd8 	bl	8003e48 <siprintf>
				writeMsg(&USART6Comm, bufferData);
 8001298:	4965      	ldr	r1, [pc, #404]	; (8001430 <main+0x228>)
 800129a:	4866      	ldr	r0, [pc, #408]	; (8001434 <main+0x22c>)
 800129c:	f001 fee1 	bl	8003062 <writeMsg>
				rxData = '\0';
 80012a0:	4b61      	ldr	r3, [pc, #388]	; (8001428 <main+0x220>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
 80012a6:	e12e      	b.n	8001506 <main+0x2fe>
			}
			// Reset para el acelerómetro.
			else if (rxData == 'r'){
 80012a8:	4b5f      	ldr	r3, [pc, #380]	; (8001428 <main+0x220>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b72      	cmp	r3, #114	; 0x72
 80012ae:	d110      	bne.n	80012d2 <main+0xca>
				sprintf(bufferData, "PWR_MGMT_1 reset (w)\n");
 80012b0:	4965      	ldr	r1, [pc, #404]	; (8001448 <main+0x240>)
 80012b2:	485f      	ldr	r0, [pc, #380]	; (8001430 <main+0x228>)
 80012b4:	f002 fdc8 	bl	8003e48 <siprintf>
				writeMsg(&USART6Comm, bufferData);
 80012b8:	495d      	ldr	r1, [pc, #372]	; (8001430 <main+0x228>)
 80012ba:	485e      	ldr	r0, [pc, #376]	; (8001434 <main+0x22c>)
 80012bc:	f001 fed1 	bl	8003062 <writeMsg>
				// Configuración del reset dentro del I2C.
				i2c_writeSingleRegister(&Acelerometer, POWER_CTL , 0x2D);
 80012c0:	222d      	movs	r2, #45	; 0x2d
 80012c2:	212d      	movs	r1, #45	; 0x2d
 80012c4:	485c      	ldr	r0, [pc, #368]	; (8001438 <main+0x230>)
 80012c6:	f001 f964 	bl	8002592 <i2c_writeSingleRegister>
				rxData = '\0';
 80012ca:	4b57      	ldr	r3, [pc, #348]	; (8001428 <main+0x220>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
 80012d0:	e119      	b.n	8001506 <main+0x2fe>
			}
			// Para el eje X y su lectura presionando la tecla "x".
			else if (rxData == 'x'){
 80012d2:	4b55      	ldr	r3, [pc, #340]	; (8001428 <main+0x220>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b78      	cmp	r3, #120	; 0x78
 80012d8:	d149      	bne.n	800136e <main+0x166>
				sprintf(bufferData, "Axis X data (r) \n");
 80012da:	495c      	ldr	r1, [pc, #368]	; (800144c <main+0x244>)
 80012dc:	4854      	ldr	r0, [pc, #336]	; (8001430 <main+0x228>)
 80012de:	f002 fdb3 	bl	8003e48 <siprintf>
				writeMsg(&USART6Comm, bufferData);
 80012e2:	4953      	ldr	r1, [pc, #332]	; (8001430 <main+0x228>)
 80012e4:	4853      	ldr	r0, [pc, #332]	; (8001434 <main+0x22c>)
 80012e6:	f001 febc 	bl	8003062 <writeMsg>
				uint8_t AccelX_low =  i2c_readSingleRegister(&Acelerometer, ACCEL_X1_L);
 80012ea:	2132      	movs	r1, #50	; 0x32
 80012ec:	4852      	ldr	r0, [pc, #328]	; (8001438 <main+0x230>)
 80012ee:	f001 f91f 	bl	8002530 <i2c_readSingleRegister>
 80012f2:	4603      	mov	r3, r0
 80012f4:	77fb      	strb	r3, [r7, #31]
				uint8_t AccelX_high = i2c_readSingleRegister(&Acelerometer, ACCEL_X1_H);
 80012f6:	2133      	movs	r1, #51	; 0x33
 80012f8:	484f      	ldr	r0, [pc, #316]	; (8001438 <main+0x230>)
 80012fa:	f001 f919 	bl	8002530 <i2c_readSingleRegister>
 80012fe:	4603      	mov	r3, r0
 8001300:	77bb      	strb	r3, [r7, #30]
				int16_t AccelX = AccelX_high << 8 | AccelX_low;
 8001302:	7fbb      	ldrb	r3, [r7, #30]
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	b21a      	sxth	r2, r3
 8001308:	7ffb      	ldrb	r3, [r7, #31]
 800130a:	b21b      	sxth	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	83bb      	strh	r3, [r7, #28]
				X_axis = AccelX * 0.0039 * 9.8;
 8001310:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f90d 	bl	8000534 <__aeabi_i2d>
 800131a:	a33f      	add	r3, pc, #252	; (adr r3, 8001418 <main+0x210>)
 800131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001320:	f7ff f972 	bl	8000608 <__aeabi_dmul>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	a33c      	add	r3, pc, #240	; (adr r3, 8001420 <main+0x218>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	f7ff f969 	bl	8000608 <__aeabi_dmul>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fc5b 	bl	8000bf8 <__aeabi_d2f>
 8001342:	4603      	mov	r3, r0
 8001344:	4a42      	ldr	r2, [pc, #264]	; (8001450 <main+0x248>)
 8001346:	6013      	str	r3, [r2, #0]
				sprintf(bufferData, "AccelX = %.2f \n", X_axis);
 8001348:	4b41      	ldr	r3, [pc, #260]	; (8001450 <main+0x248>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f903 	bl	8000558 <__aeabi_f2d>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	493f      	ldr	r1, [pc, #252]	; (8001454 <main+0x24c>)
 8001358:	4835      	ldr	r0, [pc, #212]	; (8001430 <main+0x228>)
 800135a:	f002 fd75 	bl	8003e48 <siprintf>
				writeMsg(&USART6Comm, bufferData);
 800135e:	4934      	ldr	r1, [pc, #208]	; (8001430 <main+0x228>)
 8001360:	4834      	ldr	r0, [pc, #208]	; (8001434 <main+0x22c>)
 8001362:	f001 fe7e 	bl	8003062 <writeMsg>
				rxData = '\0';
 8001366:	4b30      	ldr	r3, [pc, #192]	; (8001428 <main+0x220>)
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
 800136c:	e0cb      	b.n	8001506 <main+0x2fe>
			}
			// Para el eje Y y su lectura presionando la tecla "y".
			else if(rxData == 'y'){
 800136e:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <main+0x220>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b79      	cmp	r3, #121	; 0x79
 8001374:	d176      	bne.n	8001464 <main+0x25c>
				sprintf(bufferData, "Axis Y data (r)\n");
 8001376:	4938      	ldr	r1, [pc, #224]	; (8001458 <main+0x250>)
 8001378:	482d      	ldr	r0, [pc, #180]	; (8001430 <main+0x228>)
 800137a:	f002 fd65 	bl	8003e48 <siprintf>
				writeMsg(&USART6Comm, bufferData);
 800137e:	492c      	ldr	r1, [pc, #176]	; (8001430 <main+0x228>)
 8001380:	482c      	ldr	r0, [pc, #176]	; (8001434 <main+0x22c>)
 8001382:	f001 fe6e 	bl	8003062 <writeMsg>
				uint8_t AccelY_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Y1_L);
 8001386:	2134      	movs	r1, #52	; 0x34
 8001388:	482b      	ldr	r0, [pc, #172]	; (8001438 <main+0x230>)
 800138a:	f001 f8d1 	bl	8002530 <i2c_readSingleRegister>
 800138e:	4603      	mov	r3, r0
 8001390:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				uint8_t AccelY_high = i2c_readSingleRegister(&Acelerometer,ACCEL_Y1_H);
 8001394:	2135      	movs	r1, #53	; 0x35
 8001396:	4828      	ldr	r0, [pc, #160]	; (8001438 <main+0x230>)
 8001398:	f001 f8ca 	bl	8002530 <i2c_readSingleRegister>
 800139c:	4603      	mov	r3, r0
 800139e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				int16_t AccelY = AccelY_high << 8 | AccelY_low;
 80013a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	b21a      	sxth	r2, r3
 80013aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	4313      	orrs	r3, r2
 80013b2:	843b      	strh	r3, [r7, #32]
				Y_axis = AccelY * 0.0039 * 9.8;
 80013b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f8bb 	bl	8000534 <__aeabi_i2d>
 80013be:	a316      	add	r3, pc, #88	; (adr r3, 8001418 <main+0x210>)
 80013c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c4:	f7ff f920 	bl	8000608 <__aeabi_dmul>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	a313      	add	r3, pc, #76	; (adr r3, 8001420 <main+0x218>)
 80013d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d6:	f7ff f917 	bl	8000608 <__aeabi_dmul>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4610      	mov	r0, r2
 80013e0:	4619      	mov	r1, r3
 80013e2:	f7ff fc09 	bl	8000bf8 <__aeabi_d2f>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4a1c      	ldr	r2, [pc, #112]	; (800145c <main+0x254>)
 80013ea:	6013      	str	r3, [r2, #0]
				sprintf(bufferData, "AccelY = %.2f \n", Y_axis);
 80013ec:	4b1b      	ldr	r3, [pc, #108]	; (800145c <main+0x254>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f8b1 	bl	8000558 <__aeabi_f2d>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4919      	ldr	r1, [pc, #100]	; (8001460 <main+0x258>)
 80013fc:	480c      	ldr	r0, [pc, #48]	; (8001430 <main+0x228>)
 80013fe:	f002 fd23 	bl	8003e48 <siprintf>
				writeMsg(&USART6Comm, bufferData);
 8001402:	490b      	ldr	r1, [pc, #44]	; (8001430 <main+0x228>)
 8001404:	480b      	ldr	r0, [pc, #44]	; (8001434 <main+0x22c>)
 8001406:	f001 fe2c 	bl	8003062 <writeMsg>
				rxData = '\0';
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <main+0x220>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
 8001410:	e079      	b.n	8001506 <main+0x2fe>
 8001412:	bf00      	nop
 8001414:	f3af 8000 	nop.w
 8001418:	8e8a71de 	.word	0x8e8a71de
 800141c:	3f6ff2e4 	.word	0x3f6ff2e4
 8001420:	9999999a 	.word	0x9999999a
 8001424:	40239999 	.word	0x40239999
 8001428:	20000311 	.word	0x20000311
 800142c:	08007a60 	.word	0x08007a60
 8001430:	20000000 	.word	0x20000000
 8001434:	2000025c 	.word	0x2000025c
 8001438:	20000308 	.word	0x20000308
 800143c:	20000310 	.word	0x20000310
 8001440:	08007a70 	.word	0x08007a70
 8001444:	08007a84 	.word	0x08007a84
 8001448:	08007a9c 	.word	0x08007a9c
 800144c:	08007ab4 	.word	0x08007ab4
 8001450:	20000394 	.word	0x20000394
 8001454:	08007ac8 	.word	0x08007ac8
 8001458:	08007ad8 	.word	0x08007ad8
 800145c:	20000398 	.word	0x20000398
 8001460:	08007aec 	.word	0x08007aec
			}
			// // Para el eje Z y su lectura presionando la tecla "z".
			else if(rxData == 'z'){
 8001464:	4bbe      	ldr	r3, [pc, #760]	; (8001760 <main+0x558>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b7a      	cmp	r3, #122	; 0x7a
 800146a:	d14c      	bne.n	8001506 <main+0x2fe>
				sprintf(bufferData, "Axis Z data (r)\n");
 800146c:	49bd      	ldr	r1, [pc, #756]	; (8001764 <main+0x55c>)
 800146e:	48be      	ldr	r0, [pc, #760]	; (8001768 <main+0x560>)
 8001470:	f002 fcea 	bl	8003e48 <siprintf>
				writeMsg(&USART6Comm, bufferData);
 8001474:	49bc      	ldr	r1, [pc, #752]	; (8001768 <main+0x560>)
 8001476:	48bd      	ldr	r0, [pc, #756]	; (800176c <main+0x564>)
 8001478:	f001 fdf3 	bl	8003062 <writeMsg>
				uint8_t AccelZ_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_L);
 800147c:	2136      	movs	r1, #54	; 0x36
 800147e:	48bc      	ldr	r0, [pc, #752]	; (8001770 <main+0x568>)
 8001480:	f001 f856 	bl	8002530 <i2c_readSingleRegister>
 8001484:	4603      	mov	r3, r0
 8001486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				uint8_t AccelZ_high = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_H);
 800148a:	2137      	movs	r1, #55	; 0x37
 800148c:	48b8      	ldr	r0, [pc, #736]	; (8001770 <main+0x568>)
 800148e:	f001 f84f 	bl	8002530 <i2c_readSingleRegister>
 8001492:	4603      	mov	r3, r0
 8001494:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				int16_t AccelZ = AccelZ_high << 8 | AccelZ_low;
 8001498:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800149c:	021b      	lsls	r3, r3, #8
 800149e:	b21a      	sxth	r2, r3
 80014a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014a4:	b21b      	sxth	r3, r3
 80014a6:	4313      	orrs	r3, r2
 80014a8:	84bb      	strh	r3, [r7, #36]	; 0x24
				Z_axis = AccelZ * 0.0039 * 9.8;
 80014aa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f840 	bl	8000534 <__aeabi_i2d>
 80014b4:	a3a6      	add	r3, pc, #664	; (adr r3, 8001750 <main+0x548>)
 80014b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ba:	f7ff f8a5 	bl	8000608 <__aeabi_dmul>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4610      	mov	r0, r2
 80014c4:	4619      	mov	r1, r3
 80014c6:	a3a4      	add	r3, pc, #656	; (adr r3, 8001758 <main+0x550>)
 80014c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014cc:	f7ff f89c 	bl	8000608 <__aeabi_dmul>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f7ff fb8e 	bl	8000bf8 <__aeabi_d2f>
 80014dc:	4603      	mov	r3, r0
 80014de:	4aa5      	ldr	r2, [pc, #660]	; (8001774 <main+0x56c>)
 80014e0:	6013      	str	r3, [r2, #0]
				sprintf(bufferData, "AccelZ = %.2f \n", Z_axis);
 80014e2:	4ba4      	ldr	r3, [pc, #656]	; (8001774 <main+0x56c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f836 	bl	8000558 <__aeabi_f2d>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	49a1      	ldr	r1, [pc, #644]	; (8001778 <main+0x570>)
 80014f2:	489d      	ldr	r0, [pc, #628]	; (8001768 <main+0x560>)
 80014f4:	f002 fca8 	bl	8003e48 <siprintf>
				writeMsg(&USART6Comm, bufferData);
 80014f8:	499b      	ldr	r1, [pc, #620]	; (8001768 <main+0x560>)
 80014fa:	489c      	ldr	r0, [pc, #624]	; (800176c <main+0x564>)
 80014fc:	f001 fdb1 	bl	8003062 <writeMsg>
				rxData = '\0';
 8001500:	4b97      	ldr	r3, [pc, #604]	; (8001760 <main+0x558>)
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
		 * la tecla "s" desde la terminal serial. Se realiza la conversión
		 * establecida dentro del datasheet del ADXL-345 para que los valores
		 * estén dados en unidades del sistema internacional para aceleración.
		 */
		// La bandera flagMuestreo está definida dentro del timer 5.
		if (flagMuestreo == 1 && rxData == 's'){
 8001506:	4b9d      	ldr	r3, [pc, #628]	; (800177c <main+0x574>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b01      	cmp	r3, #1
 800150c:	f040 80da 	bne.w	80016c4 <main+0x4bc>
 8001510:	4b93      	ldr	r3, [pc, #588]	; (8001760 <main+0x558>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b73      	cmp	r3, #115	; 0x73
 8001516:	f040 80d5 	bne.w	80016c4 <main+0x4bc>
			// Para X.
			sprintf(bufferData, "Axis X data (r) \n");
 800151a:	4999      	ldr	r1, [pc, #612]	; (8001780 <main+0x578>)
 800151c:	4892      	ldr	r0, [pc, #584]	; (8001768 <main+0x560>)
 800151e:	f002 fc93 	bl	8003e48 <siprintf>
			writeMsg(&USART6Comm, bufferData);
 8001522:	4991      	ldr	r1, [pc, #580]	; (8001768 <main+0x560>)
 8001524:	4891      	ldr	r0, [pc, #580]	; (800176c <main+0x564>)
 8001526:	f001 fd9c 	bl	8003062 <writeMsg>
			uint8_t AccelX_low =  i2c_readSingleRegister(&Acelerometer, ACCEL_X1_L);
 800152a:	2132      	movs	r1, #50	; 0x32
 800152c:	4890      	ldr	r0, [pc, #576]	; (8001770 <main+0x568>)
 800152e:	f000 ffff 	bl	8002530 <i2c_readSingleRegister>
 8001532:	4603      	mov	r3, r0
 8001534:	76fb      	strb	r3, [r7, #27]
			uint8_t AccelX_high = i2c_readSingleRegister(&Acelerometer, ACCEL_X1_H);
 8001536:	2133      	movs	r1, #51	; 0x33
 8001538:	488d      	ldr	r0, [pc, #564]	; (8001770 <main+0x568>)
 800153a:	f000 fff9 	bl	8002530 <i2c_readSingleRegister>
 800153e:	4603      	mov	r3, r0
 8001540:	76bb      	strb	r3, [r7, #26]
			int16_t AccelX = AccelX_high << 8 | AccelX_low;
 8001542:	7ebb      	ldrb	r3, [r7, #26]
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	b21a      	sxth	r2, r3
 8001548:	7efb      	ldrb	r3, [r7, #27]
 800154a:	b21b      	sxth	r3, r3
 800154c:	4313      	orrs	r3, r2
 800154e:	833b      	strh	r3, [r7, #24]
			X_axis = AccelX * 0.0039 * 9.8;
 8001550:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe ffed 	bl	8000534 <__aeabi_i2d>
 800155a:	a37d      	add	r3, pc, #500	; (adr r3, 8001750 <main+0x548>)
 800155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001560:	f7ff f852 	bl	8000608 <__aeabi_dmul>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	a37a      	add	r3, pc, #488	; (adr r3, 8001758 <main+0x550>)
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	f7ff f849 	bl	8000608 <__aeabi_dmul>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff fb3b 	bl	8000bf8 <__aeabi_d2f>
 8001582:	4603      	mov	r3, r0
 8001584:	4a7f      	ldr	r2, [pc, #508]	; (8001784 <main+0x57c>)
 8001586:	6013      	str	r3, [r2, #0]
			sprintf(bufferData, "AccelX = %.2f \n", X_axis);
 8001588:	4b7e      	ldr	r3, [pc, #504]	; (8001784 <main+0x57c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe ffe3 	bl	8000558 <__aeabi_f2d>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	497c      	ldr	r1, [pc, #496]	; (8001788 <main+0x580>)
 8001598:	4873      	ldr	r0, [pc, #460]	; (8001768 <main+0x560>)
 800159a:	f002 fc55 	bl	8003e48 <siprintf>
			writeMsg(&USART6Comm, bufferData);
 800159e:	4972      	ldr	r1, [pc, #456]	; (8001768 <main+0x560>)
 80015a0:	4872      	ldr	r0, [pc, #456]	; (800176c <main+0x564>)
 80015a2:	f001 fd5e 	bl	8003062 <writeMsg>
			// Para Y.
			sprintf(bufferData, "Axis Y data (r)\n");
 80015a6:	4979      	ldr	r1, [pc, #484]	; (800178c <main+0x584>)
 80015a8:	486f      	ldr	r0, [pc, #444]	; (8001768 <main+0x560>)
 80015aa:	f002 fc4d 	bl	8003e48 <siprintf>
			writeMsg(&USART6Comm, bufferData);
 80015ae:	496e      	ldr	r1, [pc, #440]	; (8001768 <main+0x560>)
 80015b0:	486e      	ldr	r0, [pc, #440]	; (800176c <main+0x564>)
 80015b2:	f001 fd56 	bl	8003062 <writeMsg>
			uint8_t AccelY_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Y1_L);
 80015b6:	2134      	movs	r1, #52	; 0x34
 80015b8:	486d      	ldr	r0, [pc, #436]	; (8001770 <main+0x568>)
 80015ba:	f000 ffb9 	bl	8002530 <i2c_readSingleRegister>
 80015be:	4603      	mov	r3, r0
 80015c0:	75fb      	strb	r3, [r7, #23]
			uint8_t AccelY_high = i2c_readSingleRegister(&Acelerometer,ACCEL_Y1_H);
 80015c2:	2135      	movs	r1, #53	; 0x35
 80015c4:	486a      	ldr	r0, [pc, #424]	; (8001770 <main+0x568>)
 80015c6:	f000 ffb3 	bl	8002530 <i2c_readSingleRegister>
 80015ca:	4603      	mov	r3, r0
 80015cc:	75bb      	strb	r3, [r7, #22]
			int16_t AccelY = AccelY_high << 8 | AccelY_low;
 80015ce:	7dbb      	ldrb	r3, [r7, #22]
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	7dfb      	ldrb	r3, [r7, #23]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	82bb      	strh	r3, [r7, #20]
			Y_axis = AccelY * 0.0039 * 9.8;
 80015dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ffa7 	bl	8000534 <__aeabi_i2d>
 80015e6:	a35a      	add	r3, pc, #360	; (adr r3, 8001750 <main+0x548>)
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	f7ff f80c 	bl	8000608 <__aeabi_dmul>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	a357      	add	r3, pc, #348	; (adr r3, 8001758 <main+0x550>)
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	f7ff f803 	bl	8000608 <__aeabi_dmul>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4610      	mov	r0, r2
 8001608:	4619      	mov	r1, r3
 800160a:	f7ff faf5 	bl	8000bf8 <__aeabi_d2f>
 800160e:	4603      	mov	r3, r0
 8001610:	4a5f      	ldr	r2, [pc, #380]	; (8001790 <main+0x588>)
 8001612:	6013      	str	r3, [r2, #0]
			sprintf(bufferData, "AccelY = %.2f \n", Y_axis);
 8001614:	4b5e      	ldr	r3, [pc, #376]	; (8001790 <main+0x588>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe ff9d 	bl	8000558 <__aeabi_f2d>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	495c      	ldr	r1, [pc, #368]	; (8001794 <main+0x58c>)
 8001624:	4850      	ldr	r0, [pc, #320]	; (8001768 <main+0x560>)
 8001626:	f002 fc0f 	bl	8003e48 <siprintf>
			writeMsg(&USART6Comm, bufferData);
 800162a:	494f      	ldr	r1, [pc, #316]	; (8001768 <main+0x560>)
 800162c:	484f      	ldr	r0, [pc, #316]	; (800176c <main+0x564>)
 800162e:	f001 fd18 	bl	8003062 <writeMsg>
			// Para Z.
			sprintf(bufferData, "Axis Z data (r)\n");
 8001632:	494c      	ldr	r1, [pc, #304]	; (8001764 <main+0x55c>)
 8001634:	484c      	ldr	r0, [pc, #304]	; (8001768 <main+0x560>)
 8001636:	f002 fc07 	bl	8003e48 <siprintf>
			writeMsg(&USART6Comm, bufferData);
 800163a:	494b      	ldr	r1, [pc, #300]	; (8001768 <main+0x560>)
 800163c:	484b      	ldr	r0, [pc, #300]	; (800176c <main+0x564>)
 800163e:	f001 fd10 	bl	8003062 <writeMsg>
			uint8_t AccelZ_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_L);
 8001642:	2136      	movs	r1, #54	; 0x36
 8001644:	484a      	ldr	r0, [pc, #296]	; (8001770 <main+0x568>)
 8001646:	f000 ff73 	bl	8002530 <i2c_readSingleRegister>
 800164a:	4603      	mov	r3, r0
 800164c:	74fb      	strb	r3, [r7, #19]
			uint8_t AccelZ_high = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_H);
 800164e:	2137      	movs	r1, #55	; 0x37
 8001650:	4847      	ldr	r0, [pc, #284]	; (8001770 <main+0x568>)
 8001652:	f000 ff6d 	bl	8002530 <i2c_readSingleRegister>
 8001656:	4603      	mov	r3, r0
 8001658:	74bb      	strb	r3, [r7, #18]
			int16_t AccelZ = AccelZ_high << 8 | AccelZ_low;
 800165a:	7cbb      	ldrb	r3, [r7, #18]
 800165c:	021b      	lsls	r3, r3, #8
 800165e:	b21a      	sxth	r2, r3
 8001660:	7cfb      	ldrb	r3, [r7, #19]
 8001662:	b21b      	sxth	r3, r3
 8001664:	4313      	orrs	r3, r2
 8001666:	823b      	strh	r3, [r7, #16]
			Z_axis = AccelZ * 0.0039 * 9.8;
 8001668:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe ff61 	bl	8000534 <__aeabi_i2d>
 8001672:	a337      	add	r3, pc, #220	; (adr r3, 8001750 <main+0x548>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	f7fe ffc6 	bl	8000608 <__aeabi_dmul>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4610      	mov	r0, r2
 8001682:	4619      	mov	r1, r3
 8001684:	a334      	add	r3, pc, #208	; (adr r3, 8001758 <main+0x550>)
 8001686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168a:	f7fe ffbd 	bl	8000608 <__aeabi_dmul>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	f7ff faaf 	bl	8000bf8 <__aeabi_d2f>
 800169a:	4603      	mov	r3, r0
 800169c:	4a35      	ldr	r2, [pc, #212]	; (8001774 <main+0x56c>)
 800169e:	6013      	str	r3, [r2, #0]
			sprintf(bufferData, "AccelZ = %.2f \n", Z_axis);
 80016a0:	4b34      	ldr	r3, [pc, #208]	; (8001774 <main+0x56c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe ff57 	bl	8000558 <__aeabi_f2d>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4932      	ldr	r1, [pc, #200]	; (8001778 <main+0x570>)
 80016b0:	482d      	ldr	r0, [pc, #180]	; (8001768 <main+0x560>)
 80016b2:	f002 fbc9 	bl	8003e48 <siprintf>
			writeMsg(&USART6Comm, bufferData);
 80016b6:	492c      	ldr	r1, [pc, #176]	; (8001768 <main+0x560>)
 80016b8:	482c      	ldr	r0, [pc, #176]	; (800176c <main+0x564>)
 80016ba:	f001 fcd2 	bl	8003062 <writeMsg>
			// Se baja la bandera.
			flagMuestreo = 0;
 80016be:	4b2f      	ldr	r3, [pc, #188]	; (800177c <main+0x574>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
		/* Si se presiona la letra "K", el sistema envía datos sobre
		 * los 3 ejes de aceleración por medio del USART. Se define sobre
		 * la variación de cada uno de los ejes una señal PWM diferente que se
		 * activa básicamente luego de escribir sobre el I2C.
		 */
		if (rxData == 'k'){
 80016c4:	4b26      	ldr	r3, [pc, #152]	; (8001760 <main+0x558>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b6b      	cmp	r3, #107	; 0x6b
 80016ca:	f47f ada2 	bne.w	8001212 <main+0xa>
			// Para X.
			sprintf(bufferData, "Axis X data (r) \n");
 80016ce:	492c      	ldr	r1, [pc, #176]	; (8001780 <main+0x578>)
 80016d0:	4825      	ldr	r0, [pc, #148]	; (8001768 <main+0x560>)
 80016d2:	f002 fbb9 	bl	8003e48 <siprintf>
			writeMsg(&USART6Comm, bufferData);
 80016d6:	4924      	ldr	r1, [pc, #144]	; (8001768 <main+0x560>)
 80016d8:	4824      	ldr	r0, [pc, #144]	; (800176c <main+0x564>)
 80016da:	f001 fcc2 	bl	8003062 <writeMsg>
			uint8_t AccelX_low =  i2c_readSingleRegister(&Acelerometer, ACCEL_X1_L);
 80016de:	2132      	movs	r1, #50	; 0x32
 80016e0:	4823      	ldr	r0, [pc, #140]	; (8001770 <main+0x568>)
 80016e2:	f000 ff25 	bl	8002530 <i2c_readSingleRegister>
 80016e6:	4603      	mov	r3, r0
 80016e8:	73fb      	strb	r3, [r7, #15]
			uint8_t AccelX_high = i2c_readSingleRegister(&Acelerometer, ACCEL_X1_H);
 80016ea:	2133      	movs	r1, #51	; 0x33
 80016ec:	4820      	ldr	r0, [pc, #128]	; (8001770 <main+0x568>)
 80016ee:	f000 ff1f 	bl	8002530 <i2c_readSingleRegister>
 80016f2:	4603      	mov	r3, r0
 80016f4:	73bb      	strb	r3, [r7, #14]
			int16_t AccelX = AccelX_high << 8 | AccelX_low;
 80016f6:	7bbb      	ldrb	r3, [r7, #14]
 80016f8:	021b      	lsls	r3, r3, #8
 80016fa:	b21a      	sxth	r2, r3
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	b21b      	sxth	r3, r3
 8001700:	4313      	orrs	r3, r2
 8001702:	81bb      	strh	r3, [r7, #12]
			X_axis = AccelX * 0.0039 * 9.8;
 8001704:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe ff13 	bl	8000534 <__aeabi_i2d>
 800170e:	a310      	add	r3, pc, #64	; (adr r3, 8001750 <main+0x548>)
 8001710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001714:	f7fe ff78 	bl	8000608 <__aeabi_dmul>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	a30d      	add	r3, pc, #52	; (adr r3, 8001758 <main+0x550>)
 8001722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001726:	f7fe ff6f 	bl	8000608 <__aeabi_dmul>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4610      	mov	r0, r2
 8001730:	4619      	mov	r1, r3
 8001732:	f7ff fa61 	bl	8000bf8 <__aeabi_d2f>
 8001736:	4603      	mov	r3, r0
 8001738:	4a12      	ldr	r2, [pc, #72]	; (8001784 <main+0x57c>)
 800173a:	6013      	str	r3, [r2, #0]
			sprintf(bufferData, "AccelX = %.2f \n", X_axis);
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <main+0x57c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe ff09 	bl	8000558 <__aeabi_f2d>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	e025      	b.n	8001798 <main+0x590>
 800174c:	f3af 8000 	nop.w
 8001750:	8e8a71de 	.word	0x8e8a71de
 8001754:	3f6ff2e4 	.word	0x3f6ff2e4
 8001758:	9999999a 	.word	0x9999999a
 800175c:	40239999 	.word	0x40239999
 8001760:	20000311 	.word	0x20000311
 8001764:	08007afc 	.word	0x08007afc
 8001768:	20000000 	.word	0x20000000
 800176c:	2000025c 	.word	0x2000025c
 8001770:	20000308 	.word	0x20000308
 8001774:	2000039c 	.word	0x2000039c
 8001778:	08007b10 	.word	0x08007b10
 800177c:	2000033c 	.word	0x2000033c
 8001780:	08007ab4 	.word	0x08007ab4
 8001784:	20000394 	.word	0x20000394
 8001788:	08007ac8 	.word	0x08007ac8
 800178c:	08007ad8 	.word	0x08007ad8
 8001790:	20000398 	.word	0x20000398
 8001794:	08007aec 	.word	0x08007aec
 8001798:	495d      	ldr	r1, [pc, #372]	; (8001910 <main+0x708>)
 800179a:	485e      	ldr	r0, [pc, #376]	; (8001914 <main+0x70c>)
 800179c:	f002 fb54 	bl	8003e48 <siprintf>
			writeMsg(&USART6Comm, bufferData);
 80017a0:	495c      	ldr	r1, [pc, #368]	; (8001914 <main+0x70c>)
 80017a2:	485d      	ldr	r0, [pc, #372]	; (8001918 <main+0x710>)
 80017a4:	f001 fc5d 	bl	8003062 <writeMsg>
			updateDuttyCycle(&handlerTIM3PWM_1,duttyCalculator(X_axis));
 80017a8:	4b5c      	ldr	r3, [pc, #368]	; (800191c <main+0x714>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 f8cb 	bl	8001948 <duttyCalculator>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4619      	mov	r1, r3
 80017b6:	485a      	ldr	r0, [pc, #360]	; (8001920 <main+0x718>)
 80017b8:	f001 fa0a 	bl	8002bd0 <updateDuttyCycle>
			// Para Y.
			sprintf(bufferData, "Axis Y data (r)\n");
 80017bc:	4959      	ldr	r1, [pc, #356]	; (8001924 <main+0x71c>)
 80017be:	4855      	ldr	r0, [pc, #340]	; (8001914 <main+0x70c>)
 80017c0:	f002 fb42 	bl	8003e48 <siprintf>
			writeMsg(&USART6Comm, bufferData);
 80017c4:	4953      	ldr	r1, [pc, #332]	; (8001914 <main+0x70c>)
 80017c6:	4854      	ldr	r0, [pc, #336]	; (8001918 <main+0x710>)
 80017c8:	f001 fc4b 	bl	8003062 <writeMsg>
			uint8_t AccelY_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Y1_L);
 80017cc:	2134      	movs	r1, #52	; 0x34
 80017ce:	4856      	ldr	r0, [pc, #344]	; (8001928 <main+0x720>)
 80017d0:	f000 feae 	bl	8002530 <i2c_readSingleRegister>
 80017d4:	4603      	mov	r3, r0
 80017d6:	72fb      	strb	r3, [r7, #11]
			uint8_t AccelY_high = i2c_readSingleRegister(&Acelerometer,ACCEL_Y1_H);
 80017d8:	2135      	movs	r1, #53	; 0x35
 80017da:	4853      	ldr	r0, [pc, #332]	; (8001928 <main+0x720>)
 80017dc:	f000 fea8 	bl	8002530 <i2c_readSingleRegister>
 80017e0:	4603      	mov	r3, r0
 80017e2:	72bb      	strb	r3, [r7, #10]
			int16_t AccelY = AccelY_high << 8 | AccelY_low;
 80017e4:	7abb      	ldrb	r3, [r7, #10]
 80017e6:	021b      	lsls	r3, r3, #8
 80017e8:	b21a      	sxth	r2, r3
 80017ea:	7afb      	ldrb	r3, [r7, #11]
 80017ec:	b21b      	sxth	r3, r3
 80017ee:	4313      	orrs	r3, r2
 80017f0:	813b      	strh	r3, [r7, #8]
			Y_axis = AccelY * 0.0039 * 9.8;
 80017f2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fe9c 	bl	8000534 <__aeabi_i2d>
 80017fc:	a340      	add	r3, pc, #256	; (adr r3, 8001900 <main+0x6f8>)
 80017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001802:	f7fe ff01 	bl	8000608 <__aeabi_dmul>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	a33e      	add	r3, pc, #248	; (adr r3, 8001908 <main+0x700>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7fe fef8 	bl	8000608 <__aeabi_dmul>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	f7ff f9ea 	bl	8000bf8 <__aeabi_d2f>
 8001824:	4603      	mov	r3, r0
 8001826:	4a41      	ldr	r2, [pc, #260]	; (800192c <main+0x724>)
 8001828:	6013      	str	r3, [r2, #0]
			sprintf(bufferData, "AccelY = %.2f \n", Y_axis);
 800182a:	4b40      	ldr	r3, [pc, #256]	; (800192c <main+0x724>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fe92 	bl	8000558 <__aeabi_f2d>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	493d      	ldr	r1, [pc, #244]	; (8001930 <main+0x728>)
 800183a:	4836      	ldr	r0, [pc, #216]	; (8001914 <main+0x70c>)
 800183c:	f002 fb04 	bl	8003e48 <siprintf>
			writeMsg(&USART6Comm, bufferData);
 8001840:	4934      	ldr	r1, [pc, #208]	; (8001914 <main+0x70c>)
 8001842:	4835      	ldr	r0, [pc, #212]	; (8001918 <main+0x710>)
 8001844:	f001 fc0d 	bl	8003062 <writeMsg>
			updateDuttyCycle(&handlerTIM3PWM_2,duttyCalculator(Y_axis));
 8001848:	4b38      	ldr	r3, [pc, #224]	; (800192c <main+0x724>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f000 f87b 	bl	8001948 <duttyCalculator>
 8001852:	4603      	mov	r3, r0
 8001854:	4619      	mov	r1, r3
 8001856:	4837      	ldr	r0, [pc, #220]	; (8001934 <main+0x72c>)
 8001858:	f001 f9ba 	bl	8002bd0 <updateDuttyCycle>
			// Para Z.
			sprintf(bufferData, "Axis Z data (r)\n");
 800185c:	4936      	ldr	r1, [pc, #216]	; (8001938 <main+0x730>)
 800185e:	482d      	ldr	r0, [pc, #180]	; (8001914 <main+0x70c>)
 8001860:	f002 faf2 	bl	8003e48 <siprintf>
			writeMsg(&USART6Comm, bufferData);
 8001864:	492b      	ldr	r1, [pc, #172]	; (8001914 <main+0x70c>)
 8001866:	482c      	ldr	r0, [pc, #176]	; (8001918 <main+0x710>)
 8001868:	f001 fbfb 	bl	8003062 <writeMsg>
			uint8_t AccelZ_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_L);
 800186c:	2136      	movs	r1, #54	; 0x36
 800186e:	482e      	ldr	r0, [pc, #184]	; (8001928 <main+0x720>)
 8001870:	f000 fe5e 	bl	8002530 <i2c_readSingleRegister>
 8001874:	4603      	mov	r3, r0
 8001876:	71fb      	strb	r3, [r7, #7]
			uint8_t AccelZ_high = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_H);
 8001878:	2137      	movs	r1, #55	; 0x37
 800187a:	482b      	ldr	r0, [pc, #172]	; (8001928 <main+0x720>)
 800187c:	f000 fe58 	bl	8002530 <i2c_readSingleRegister>
 8001880:	4603      	mov	r3, r0
 8001882:	71bb      	strb	r3, [r7, #6]
			int16_t AccelZ = AccelZ_high << 8 | AccelZ_low;
 8001884:	79bb      	ldrb	r3, [r7, #6]
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	b21a      	sxth	r2, r3
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	b21b      	sxth	r3, r3
 800188e:	4313      	orrs	r3, r2
 8001890:	80bb      	strh	r3, [r7, #4]
			Z_axis = AccelZ * 0.0039 * 9.8;
 8001892:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fe4c 	bl	8000534 <__aeabi_i2d>
 800189c:	a318      	add	r3, pc, #96	; (adr r3, 8001900 <main+0x6f8>)
 800189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a2:	f7fe feb1 	bl	8000608 <__aeabi_dmul>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4610      	mov	r0, r2
 80018ac:	4619      	mov	r1, r3
 80018ae:	a316      	add	r3, pc, #88	; (adr r3, 8001908 <main+0x700>)
 80018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b4:	f7fe fea8 	bl	8000608 <__aeabi_dmul>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	f7ff f99a 	bl	8000bf8 <__aeabi_d2f>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4a1d      	ldr	r2, [pc, #116]	; (800193c <main+0x734>)
 80018c8:	6013      	str	r3, [r2, #0]
			sprintf(bufferData, "AccelZ = %.2f \n", Z_axis);
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <main+0x734>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fe42 	bl	8000558 <__aeabi_f2d>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4919      	ldr	r1, [pc, #100]	; (8001940 <main+0x738>)
 80018da:	480e      	ldr	r0, [pc, #56]	; (8001914 <main+0x70c>)
 80018dc:	f002 fab4 	bl	8003e48 <siprintf>
			writeMsg(&USART6Comm, bufferData);
 80018e0:	490c      	ldr	r1, [pc, #48]	; (8001914 <main+0x70c>)
 80018e2:	480d      	ldr	r0, [pc, #52]	; (8001918 <main+0x710>)
 80018e4:	f001 fbbd 	bl	8003062 <writeMsg>
			updateDuttyCycle(&handlerTIM3PWM_3,duttyCalculator(Z_axis));
 80018e8:	4b14      	ldr	r3, [pc, #80]	; (800193c <main+0x734>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 f82b 	bl	8001948 <duttyCalculator>
 80018f2:	4603      	mov	r3, r0
 80018f4:	4619      	mov	r1, r3
 80018f6:	4813      	ldr	r0, [pc, #76]	; (8001944 <main+0x73c>)
 80018f8:	f001 f96a 	bl	8002bd0 <updateDuttyCycle>
		if(rxData != '\0'){
 80018fc:	e489      	b.n	8001212 <main+0xa>
 80018fe:	bf00      	nop
 8001900:	8e8a71de 	.word	0x8e8a71de
 8001904:	3f6ff2e4 	.word	0x3f6ff2e4
 8001908:	9999999a 	.word	0x9999999a
 800190c:	40239999 	.word	0x40239999
 8001910:	08007ac8 	.word	0x08007ac8
 8001914:	20000000 	.word	0x20000000
 8001918:	2000025c 	.word	0x2000025c
 800191c:	20000394 	.word	0x20000394
 8001920:	20000364 	.word	0x20000364
 8001924:	08007ad8 	.word	0x08007ad8
 8001928:	20000308 	.word	0x20000308
 800192c:	20000398 	.word	0x20000398
 8001930:	08007aec 	.word	0x08007aec
 8001934:	20000374 	.word	0x20000374
 8001938:	08007afc 	.word	0x08007afc
 800193c:	2000039c 	.word	0x2000039c
 8001940:	08007b10 	.word	0x08007b10
 8001944:	20000384 	.word	0x20000384

08001948 <duttyCalculator>:

	}
	return 0;
}
// Función para calcular el dutty cycle a partir de la definición de error.
uint16_t duttyCalculator(float valor){
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	uint16_t dutty = (10 - valor) / 10;
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	480e      	ldr	r0, [pc, #56]	; (800198c <duttyCalculator+0x44>)
 8001954:	f7ff f9a4 	bl	8000ca0 <__aeabi_fsub>
 8001958:	4603      	mov	r3, r0
 800195a:	490c      	ldr	r1, [pc, #48]	; (800198c <duttyCalculator+0x44>)
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fb5d 	bl	800101c <__aeabi_fdiv>
 8001962:	4603      	mov	r3, r0
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fbf5 	bl	8001154 <__aeabi_f2uiz>
 800196a:	4603      	mov	r3, r0
 800196c:	81fb      	strh	r3, [r7, #14]
	if (dutty > 1){
 800196e:	89fb      	ldrh	r3, [r7, #14]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d904      	bls.n	800197e <duttyCalculator+0x36>
		uint16_t dutty_percent = dutty - 1;
 8001974:	89fb      	ldrh	r3, [r7, #14]
 8001976:	3b01      	subs	r3, #1
 8001978:	817b      	strh	r3, [r7, #10]
		return dutty_percent;
 800197a:	897b      	ldrh	r3, [r7, #10]
 800197c:	e002      	b.n	8001984 <duttyCalculator+0x3c>
	}else{
		uint16_t dutty_percent = dutty;
 800197e:	89fb      	ldrh	r3, [r7, #14]
 8001980:	81bb      	strh	r3, [r7, #12]
		return dutty_percent;
 8001982:	89bb      	ldrh	r3, [r7, #12]
	}
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	41200000 	.word	0x41200000

08001990 <init_Hardware>:

//Función de configuración de los elementos del sistema.
void init_Hardware(void){
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0

	// Se configura el PLL con los parámetros dados.
	handlerPLL.PLL_Config.PLL_voltage		= VOLTAGE_84MHZ;
 8001994:	4ba9      	ldr	r3, [pc, #676]	; (8001c3c <init_Hardware+0x2ac>)
 8001996:	2201      	movs	r2, #1
 8001998:	701a      	strb	r2, [r3, #0]
	handlerPLL.PLL_Config.PLL_frecuency		= FRECUENCY_80MHZ;
 800199a:	4ba8      	ldr	r3, [pc, #672]	; (8001c3c <init_Hardware+0x2ac>)
 800199c:	2201      	movs	r2, #1
 800199e:	705a      	strb	r2, [r3, #1]
	PLL_Config(&handlerPLL);
 80019a0:	48a6      	ldr	r0, [pc, #664]	; (8001c3c <init_Hardware+0x2ac>)
 80019a2:	f000 fe19 	bl	80025d8 <PLL_Config>
	getConfigPLL();
 80019a6:	f000 ff21 	bl	80027ec <getConfigPLL>

	/* LED DE ESTADO A 250 ms aproximadamente. */
	handlerBlinkyPin.pGPIOx 									= GPIOA;
 80019aa:	4ba5      	ldr	r3, [pc, #660]	; (8001c40 <init_Hardware+0x2b0>)
 80019ac:	4aa5      	ldr	r2, [pc, #660]	; (8001c44 <init_Hardware+0x2b4>)
 80019ae:	601a      	str	r2, [r3, #0]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinNumber 				= PIN_5;
 80019b0:	4ba3      	ldr	r3, [pc, #652]	; (8001c40 <init_Hardware+0x2b0>)
 80019b2:	2205      	movs	r2, #5
 80019b4:	711a      	strb	r2, [r3, #4]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 80019b6:	4ba2      	ldr	r3, [pc, #648]	; (8001c40 <init_Hardware+0x2b0>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	715a      	strb	r2, [r3, #5]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 80019bc:	4ba0      	ldr	r3, [pc, #640]	; (8001c40 <init_Hardware+0x2b0>)
 80019be:	2200      	movs	r2, #0
 80019c0:	721a      	strb	r2, [r3, #8]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinSpeed  				= GPIO_OSPEED_FAST;
 80019c2:	4b9f      	ldr	r3, [pc, #636]	; (8001c40 <init_Hardware+0x2b0>)
 80019c4:	2202      	movs	r2, #2
 80019c6:	719a      	strb	r2, [r3, #6]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinPuPdControl			= GPIO_PUPDR_NOTHING;
 80019c8:	4b9d      	ldr	r3, [pc, #628]	; (8001c40 <init_Hardware+0x2b0>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	71da      	strb	r2, [r3, #7]

	// Se carga la configuración del Blinky,
	GPIO_Config(&handlerBlinkyPin);
 80019ce:	489c      	ldr	r0, [pc, #624]	; (8001c40 <init_Hardware+0x2b0>)
 80019d0:	f000 fad8 	bl	8001f84 <GPIO_Config>
	GPIO_WritePin(&handlerBlinkyPin, SET);
 80019d4:	2101      	movs	r1, #1
 80019d6:	489a      	ldr	r0, [pc, #616]	; (8001c40 <init_Hardware+0x2b0>)
 80019d8:	f000 fbfc 	bl	80021d4 <GPIO_WritePin>

	// Se configura el timer del blinky.
	handlerBlinkyTimer.ptrTIMx								= TIM2;
 80019dc:	4b9a      	ldr	r3, [pc, #616]	; (8001c48 <init_Hardware+0x2b8>)
 80019de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019e2:	601a      	str	r2, [r3, #0]
	handlerBlinkyTimer.TIMx_Config.TIMx_mode				= BTIMER_MODE_UP;
 80019e4:	4b98      	ldr	r3, [pc, #608]	; (8001c48 <init_Hardware+0x2b8>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	711a      	strb	r2, [r3, #4]
	handlerBlinkyTimer.TIMx_Config.TIMx_speed				= BTIMER_SPEED_80MHz;
 80019ea:	4b97      	ldr	r3, [pc, #604]	; (8001c48 <init_Hardware+0x2b8>)
 80019ec:	f641 72a4 	movw	r2, #8100	; 0x1fa4
 80019f0:	609a      	str	r2, [r3, #8]
	handlerBlinkyTimer.TIMx_Config.TIMx_period				= 2500;
 80019f2:	4b95      	ldr	r3, [pc, #596]	; (8001c48 <init_Hardware+0x2b8>)
 80019f4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80019f8:	60da      	str	r2, [r3, #12]
	handlerBlinkyTimer.TIMx_Config.TIMx_interruptEnable 	= BTIMER_INTERRUPT_ENABLE;
 80019fa:	4b93      	ldr	r3, [pc, #588]	; (8001c48 <init_Hardware+0x2b8>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	741a      	strb	r2, [r3, #16]

	// Se carga lo hecho sobre el timer del blinky.
	BasicTimer_Config(&handlerBlinkyTimer);
 8001a00:	4891      	ldr	r0, [pc, #580]	; (8001c48 <init_Hardware+0x2b8>)
 8001a02:	f000 f9cb 	bl	8001d9c <BasicTimer_Config>

	/* Configuración del USART */
	// Transmisión
	handlerUSARTPINTX.pGPIOx  							= GPIOA;
 8001a06:	4b91      	ldr	r3, [pc, #580]	; (8001c4c <init_Hardware+0x2bc>)
 8001a08:	4a8e      	ldr	r2, [pc, #568]	; (8001c44 <init_Hardware+0x2b4>)
 8001a0a:	601a      	str	r2, [r3, #0]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinNumber 	= PIN_11;
 8001a0c:	4b8f      	ldr	r3, [pc, #572]	; (8001c4c <init_Hardware+0x2bc>)
 8001a0e:	220b      	movs	r2, #11
 8001a10:	711a      	strb	r2, [r3, #4]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFN;
 8001a12:	4b8e      	ldr	r3, [pc, #568]	; (8001c4c <init_Hardware+0x2bc>)
 8001a14:	2202      	movs	r2, #2
 8001a16:	715a      	strb	r2, [r3, #5]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinAltFunMode = AF8;
 8001a18:	4b8c      	ldr	r3, [pc, #560]	; (8001c4c <init_Hardware+0x2bc>)
 8001a1a:	2208      	movs	r2, #8
 8001a1c:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerUSARTPINTX);
 8001a1e:	488b      	ldr	r0, [pc, #556]	; (8001c4c <init_Hardware+0x2bc>)
 8001a20:	f000 fab0 	bl	8001f84 <GPIO_Config>

	// Recepción
	handlerUSARTPINRX.pGPIOx 						 	= GPIOA;
 8001a24:	4b8a      	ldr	r3, [pc, #552]	; (8001c50 <init_Hardware+0x2c0>)
 8001a26:	4a87      	ldr	r2, [pc, #540]	; (8001c44 <init_Hardware+0x2b4>)
 8001a28:	601a      	str	r2, [r3, #0]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinNumber		= PIN_12;
 8001a2a:	4b89      	ldr	r3, [pc, #548]	; (8001c50 <init_Hardware+0x2c0>)
 8001a2c:	220c      	movs	r2, #12
 8001a2e:	711a      	strb	r2, [r3, #4]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFN;
 8001a30:	4b87      	ldr	r3, [pc, #540]	; (8001c50 <init_Hardware+0x2c0>)
 8001a32:	2202      	movs	r2, #2
 8001a34:	715a      	strb	r2, [r3, #5]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinAltFunMode = AF8;
 8001a36:	4b86      	ldr	r3, [pc, #536]	; (8001c50 <init_Hardware+0x2c0>)
 8001a38:	2208      	movs	r2, #8
 8001a3a:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerUSARTPINRX);
 8001a3c:	4884      	ldr	r0, [pc, #528]	; (8001c50 <init_Hardware+0x2c0>)
 8001a3e:	f000 faa1 	bl	8001f84 <GPIO_Config>

	// Para el USART 6
	USART6Comm.ptrUSARTx 					= USART6;
 8001a42:	4b84      	ldr	r3, [pc, #528]	; (8001c54 <init_Hardware+0x2c4>)
 8001a44:	4a84      	ldr	r2, [pc, #528]	; (8001c58 <init_Hardware+0x2c8>)
 8001a46:	601a      	str	r2, [r3, #0]
	USART6Comm.USART_Config.USART_baudrate 	= USART_BAUDRATE_115200;
 8001a48:	4b82      	ldr	r3, [pc, #520]	; (8001c54 <init_Hardware+0x2c4>)
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	715a      	strb	r2, [r3, #5]
	USART6Comm.USART_Config.USART_datasize 	= USART_DATASIZE_8BIT;
 8001a4e:	4b81      	ldr	r3, [pc, #516]	; (8001c54 <init_Hardware+0x2c4>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	719a      	strb	r2, [r3, #6]
	USART6Comm.USART_Config.USART_parity 	= USART_PARITY_NONE;
 8001a54:	4b7f      	ldr	r3, [pc, #508]	; (8001c54 <init_Hardware+0x2c4>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	71da      	strb	r2, [r3, #7]
	USART6Comm.USART_Config.USART_mode 		= USART_MODE_RXTX;
 8001a5a:	4b7e      	ldr	r3, [pc, #504]	; (8001c54 <init_Hardware+0x2c4>)
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	711a      	strb	r2, [r3, #4]
	USART6Comm.USART_Config.USART_stopbits 	= USART_STOPBIT_1;
 8001a60:	4b7c      	ldr	r3, [pc, #496]	; (8001c54 <init_Hardware+0x2c4>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	721a      	strb	r2, [r3, #8]
	USART6Comm.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;
 8001a66:	4b7b      	ldr	r3, [pc, #492]	; (8001c54 <init_Hardware+0x2c4>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	725a      	strb	r2, [r3, #9]

	// Se carga lo hecho sobre el USART
	USART_Config(&USART6Comm);
 8001a6c:	4879      	ldr	r0, [pc, #484]	; (8001c54 <init_Hardware+0x2c4>)
 8001a6e:	f001 f8db 	bl	8002c28 <USART_Config>

	//Configuración I2C
	// Para el acelerómetro ADXL-345
	SCL.pGPIOx                                    = GPIOB;
 8001a72:	4b7a      	ldr	r3, [pc, #488]	; (8001c5c <init_Hardware+0x2cc>)
 8001a74:	4a7a      	ldr	r2, [pc, #488]	; (8001c60 <init_Hardware+0x2d0>)
 8001a76:	601a      	str	r2, [r3, #0]
	SCL.GPIO_PinConfig.GPIO_PinNumber             = PIN_8;
 8001a78:	4b78      	ldr	r3, [pc, #480]	; (8001c5c <init_Hardware+0x2cc>)
 8001a7a:	2208      	movs	r2, #8
 8001a7c:	711a      	strb	r2, [r3, #4]
	SCL.GPIO_PinConfig.GPIO_PinMode               = GPIO_MODE_ALTFN;
 8001a7e:	4b77      	ldr	r3, [pc, #476]	; (8001c5c <init_Hardware+0x2cc>)
 8001a80:	2202      	movs	r2, #2
 8001a82:	715a      	strb	r2, [r3, #5]
	SCL.GPIO_PinConfig.GPIO_PinOPType             = GPIO_OTYPE_OPENDRAIN;
 8001a84:	4b75      	ldr	r3, [pc, #468]	; (8001c5c <init_Hardware+0x2cc>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	721a      	strb	r2, [r3, #8]
	SCL.GPIO_PinConfig.GPIO_PinPuPdControl        = GPIO_PUPDR_NOTHING;
 8001a8a:	4b74      	ldr	r3, [pc, #464]	; (8001c5c <init_Hardware+0x2cc>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	71da      	strb	r2, [r3, #7]
	SCL.GPIO_PinConfig.GPIO_PinSpeed              = GPIO_OSPEED_FAST;
 8001a90:	4b72      	ldr	r3, [pc, #456]	; (8001c5c <init_Hardware+0x2cc>)
 8001a92:	2202      	movs	r2, #2
 8001a94:	719a      	strb	r2, [r3, #6]
	SCL.GPIO_PinConfig.GPIO_PinAltFunMode         = AF4;
 8001a96:	4b71      	ldr	r3, [pc, #452]	; (8001c5c <init_Hardware+0x2cc>)
 8001a98:	2204      	movs	r2, #4
 8001a9a:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&SCL);
 8001a9c:	486f      	ldr	r0, [pc, #444]	; (8001c5c <init_Hardware+0x2cc>)
 8001a9e:	f000 fa71 	bl	8001f84 <GPIO_Config>
	// SDA pin del ADXL-345
	SDA.pGPIOx                                    = GPIOB;
 8001aa2:	4b70      	ldr	r3, [pc, #448]	; (8001c64 <init_Hardware+0x2d4>)
 8001aa4:	4a6e      	ldr	r2, [pc, #440]	; (8001c60 <init_Hardware+0x2d0>)
 8001aa6:	601a      	str	r2, [r3, #0]
	SDA.GPIO_PinConfig.GPIO_PinNumber             = PIN_9;
 8001aa8:	4b6e      	ldr	r3, [pc, #440]	; (8001c64 <init_Hardware+0x2d4>)
 8001aaa:	2209      	movs	r2, #9
 8001aac:	711a      	strb	r2, [r3, #4]
	SDA.GPIO_PinConfig.GPIO_PinMode               = GPIO_MODE_ALTFN;
 8001aae:	4b6d      	ldr	r3, [pc, #436]	; (8001c64 <init_Hardware+0x2d4>)
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	715a      	strb	r2, [r3, #5]
	SDA.GPIO_PinConfig.GPIO_PinOPType             = GPIO_OTYPE_OPENDRAIN;
 8001ab4:	4b6b      	ldr	r3, [pc, #428]	; (8001c64 <init_Hardware+0x2d4>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	721a      	strb	r2, [r3, #8]
	SDA.GPIO_PinConfig.GPIO_PinPuPdControl        = GPIO_PUPDR_NOTHING;
 8001aba:	4b6a      	ldr	r3, [pc, #424]	; (8001c64 <init_Hardware+0x2d4>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	71da      	strb	r2, [r3, #7]
	SDA.GPIO_PinConfig.GPIO_PinSpeed              = GPIO_OSPEED_FAST;
 8001ac0:	4b68      	ldr	r3, [pc, #416]	; (8001c64 <init_Hardware+0x2d4>)
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	719a      	strb	r2, [r3, #6]
	SDA.GPIO_PinConfig.GPIO_PinAltFunMode         = AF4;
 8001ac6:	4b67      	ldr	r3, [pc, #412]	; (8001c64 <init_Hardware+0x2d4>)
 8001ac8:	2204      	movs	r2, #4
 8001aca:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&SDA);
 8001acc:	4865      	ldr	r0, [pc, #404]	; (8001c64 <init_Hardware+0x2d4>)
 8001ace:	f000 fa59 	bl	8001f84 <GPIO_Config>
	// Se carga en el I2C.
	Acelerometer.ptrI2Cx                            = I2C1;
 8001ad2:	4b65      	ldr	r3, [pc, #404]	; (8001c68 <init_Hardware+0x2d8>)
 8001ad4:	4a65      	ldr	r2, [pc, #404]	; (8001c6c <init_Hardware+0x2dc>)
 8001ad6:	601a      	str	r2, [r3, #0]
	Acelerometer.modeI2C                            = I2C_MODE_FM;
 8001ad8:	4b63      	ldr	r3, [pc, #396]	; (8001c68 <init_Hardware+0x2d8>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	715a      	strb	r2, [r3, #5]
	Acelerometer.slaveAddress                       = ACCEL_ADDRESS;
 8001ade:	4b62      	ldr	r3, [pc, #392]	; (8001c68 <init_Hardware+0x2d8>)
 8001ae0:	221d      	movs	r2, #29
 8001ae2:	711a      	strb	r2, [r3, #4]
	i2c_config(&Acelerometer);
 8001ae4:	4860      	ldr	r0, [pc, #384]	; (8001c68 <init_Hardware+0x2d8>)
 8001ae6:	f000 fbb5 	bl	8002254 <i2c_config>

	// Definición del timer para el muestreo de 1 KHz
	handlerTimer5.ptrTIMx							= TIM5;
 8001aea:	4b61      	ldr	r3, [pc, #388]	; (8001c70 <init_Hardware+0x2e0>)
 8001aec:	4a61      	ldr	r2, [pc, #388]	; (8001c74 <init_Hardware+0x2e4>)
 8001aee:	601a      	str	r2, [r3, #0]
	handlerTimer5.TIMx_Config.TIMx_mode				= BTIMER_MODE_UP;
 8001af0:	4b5f      	ldr	r3, [pc, #380]	; (8001c70 <init_Hardware+0x2e0>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	711a      	strb	r2, [r3, #4]
	handlerTimer5.TIMx_Config.TIMx_speed			= BTIMER_SPEED_80MHz;
 8001af6:	4b5e      	ldr	r3, [pc, #376]	; (8001c70 <init_Hardware+0x2e0>)
 8001af8:	f641 72a4 	movw	r2, #8100	; 0x1fa4
 8001afc:	609a      	str	r2, [r3, #8]
	handlerTimer5.TIMx_Config.TIMx_period			= 10;
 8001afe:	4b5c      	ldr	r3, [pc, #368]	; (8001c70 <init_Hardware+0x2e0>)
 8001b00:	220a      	movs	r2, #10
 8001b02:	60da      	str	r2, [r3, #12]
	handlerTimer5.TIMx_Config.TIMx_interruptEnable 	= BTIMER_INTERRUPT_ENABLE;
 8001b04:	4b5a      	ldr	r3, [pc, #360]	; (8001c70 <init_Hardware+0x2e0>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	741a      	strb	r2, [r3, #16]

	// Se carga lo hecho sobre el timer del muestreo.
	BasicTimer_Config(&handlerTimer5);
 8001b0a:	4859      	ldr	r0, [pc, #356]	; (8001c70 <init_Hardware+0x2e0>)
 8001b0c:	f000 f946 	bl	8001d9c <BasicTimer_Config>

	// Configuración para el PWM
	// Como son 3 señales, se tiene PWM_1, PWM_2 Y PWM_3.
	// Se multiplexa el timer 3, dado que cada uno tiene 4 canales de PWM.
	HandlerPWM_1.pGPIOx          					= GPIOC;
 8001b10:	4b59      	ldr	r3, [pc, #356]	; (8001c78 <init_Hardware+0x2e8>)
 8001b12:	4a5a      	ldr	r2, [pc, #360]	; (8001c7c <init_Hardware+0x2ec>)
 8001b14:	601a      	str	r2, [r3, #0]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinNumber  	= PIN_7;
 8001b16:	4b58      	ldr	r3, [pc, #352]	; (8001c78 <init_Hardware+0x2e8>)
 8001b18:	2207      	movs	r2, #7
 8001b1a:	711a      	strb	r2, [r3, #4]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8001b1c:	4b56      	ldr	r3, [pc, #344]	; (8001c78 <init_Hardware+0x2e8>)
 8001b1e:	2202      	movs	r2, #2
 8001b20:	715a      	strb	r2, [r3, #5]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8001b22:	4b55      	ldr	r3, [pc, #340]	; (8001c78 <init_Hardware+0x2e8>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	721a      	strb	r2, [r3, #8]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001b28:	4b53      	ldr	r3, [pc, #332]	; (8001c78 <init_Hardware+0x2e8>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	71da      	strb	r2, [r3, #7]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8001b2e:	4b52      	ldr	r3, [pc, #328]	; (8001c78 <init_Hardware+0x2e8>)
 8001b30:	2202      	movs	r2, #2
 8001b32:	719a      	strb	r2, [r3, #6]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001b34:	4b50      	ldr	r3, [pc, #320]	; (8001c78 <init_Hardware+0x2e8>)
 8001b36:	2202      	movs	r2, #2
 8001b38:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerPWM_1);
 8001b3a:	484f      	ldr	r0, [pc, #316]	; (8001c78 <init_Hardware+0x2e8>)
 8001b3c:	f000 fa22 	bl	8001f84 <GPIO_Config>

	handlerTIM3PWM_1.ptrTIMx           	  =   TIM3;
 8001b40:	4b4f      	ldr	r3, [pc, #316]	; (8001c80 <init_Hardware+0x2f0>)
 8001b42:	4a50      	ldr	r2, [pc, #320]	; (8001c84 <init_Hardware+0x2f4>)
 8001b44:	601a      	str	r2, [r3, #0]
	handlerTIM3PWM_1.config.channel       =   PWM_CHANNEL_2;
 8001b46:	4b4e      	ldr	r3, [pc, #312]	; (8001c80 <init_Hardware+0x2f0>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	711a      	strb	r2, [r3, #4]
	handlerTIM3PWM_1.config.duttyCicle    =   PWM_DUTTY_50_PERCENT;
 8001b4c:	4b4c      	ldr	r3, [pc, #304]	; (8001c80 <init_Hardware+0x2f0>)
 8001b4e:	2232      	movs	r2, #50	; 0x32
 8001b50:	81da      	strh	r2, [r3, #14]
	handlerTIM3PWM_1.config.periodo       =   20000;
 8001b52:	4b4b      	ldr	r3, [pc, #300]	; (8001c80 <init_Hardware+0x2f0>)
 8001b54:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001b58:	819a      	strh	r2, [r3, #12]
	handlerTIM3PWM_1.config.prescaler     =   16;
 8001b5a:	4b49      	ldr	r3, [pc, #292]	; (8001c80 <init_Hardware+0x2f0>)
 8001b5c:	2210      	movs	r2, #16
 8001b5e:	609a      	str	r2, [r3, #8]

	pwm_Config(&handlerTIM3PWM_1);
 8001b60:	4847      	ldr	r0, [pc, #284]	; (8001c80 <init_Hardware+0x2f0>)
 8001b62:	f000 fe65 	bl	8002830 <pwm_Config>

	enableOutput(&handlerTIM3PWM_1);
 8001b66:	4846      	ldr	r0, [pc, #280]	; (8001c80 <init_Hardware+0x2f0>)
 8001b68:	f000 ffa6 	bl	8002ab8 <enableOutput>
	startPwmSignal(&handlerTIM3PWM_1);
 8001b6c:	4844      	ldr	r0, [pc, #272]	; (8001c80 <init_Hardware+0x2f0>)
 8001b6e:	f000 ff91 	bl	8002a94 <startPwmSignal>

	HandlerPWM_2.pGPIOx          					= GPIOC;
 8001b72:	4b45      	ldr	r3, [pc, #276]	; (8001c88 <init_Hardware+0x2f8>)
 8001b74:	4a41      	ldr	r2, [pc, #260]	; (8001c7c <init_Hardware+0x2ec>)
 8001b76:	601a      	str	r2, [r3, #0]
	HandlerPWM_2.GPIO_PinConfig.GPIO_PinNumber  	= PIN_8;
 8001b78:	4b43      	ldr	r3, [pc, #268]	; (8001c88 <init_Hardware+0x2f8>)
 8001b7a:	2208      	movs	r2, #8
 8001b7c:	711a      	strb	r2, [r3, #4]
	HandlerPWM_2.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8001b7e:	4b42      	ldr	r3, [pc, #264]	; (8001c88 <init_Hardware+0x2f8>)
 8001b80:	2202      	movs	r2, #2
 8001b82:	715a      	strb	r2, [r3, #5]
	HandlerPWM_2.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8001b84:	4b40      	ldr	r3, [pc, #256]	; (8001c88 <init_Hardware+0x2f8>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	721a      	strb	r2, [r3, #8]
	HandlerPWM_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001b8a:	4b3f      	ldr	r3, [pc, #252]	; (8001c88 <init_Hardware+0x2f8>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	71da      	strb	r2, [r3, #7]
	HandlerPWM_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8001b90:	4b3d      	ldr	r3, [pc, #244]	; (8001c88 <init_Hardware+0x2f8>)
 8001b92:	2202      	movs	r2, #2
 8001b94:	719a      	strb	r2, [r3, #6]
	HandlerPWM_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001b96:	4b3c      	ldr	r3, [pc, #240]	; (8001c88 <init_Hardware+0x2f8>)
 8001b98:	2202      	movs	r2, #2
 8001b9a:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerPWM_2);
 8001b9c:	483a      	ldr	r0, [pc, #232]	; (8001c88 <init_Hardware+0x2f8>)
 8001b9e:	f000 f9f1 	bl	8001f84 <GPIO_Config>

	handlerTIM3PWM_2.ptrTIMx           	  =   TIM3;
 8001ba2:	4b3a      	ldr	r3, [pc, #232]	; (8001c8c <init_Hardware+0x2fc>)
 8001ba4:	4a37      	ldr	r2, [pc, #220]	; (8001c84 <init_Hardware+0x2f4>)
 8001ba6:	601a      	str	r2, [r3, #0]
	handlerTIM3PWM_2.config.channel       =   PWM_CHANNEL_3;
 8001ba8:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <init_Hardware+0x2fc>)
 8001baa:	2202      	movs	r2, #2
 8001bac:	711a      	strb	r2, [r3, #4]
	handlerTIM3PWM_2.config.duttyCicle    =   PWM_DUTTY_50_PERCENT;
 8001bae:	4b37      	ldr	r3, [pc, #220]	; (8001c8c <init_Hardware+0x2fc>)
 8001bb0:	2232      	movs	r2, #50	; 0x32
 8001bb2:	81da      	strh	r2, [r3, #14]
	handlerTIM3PWM_2.config.periodo       =   20000;
 8001bb4:	4b35      	ldr	r3, [pc, #212]	; (8001c8c <init_Hardware+0x2fc>)
 8001bb6:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001bba:	819a      	strh	r2, [r3, #12]
	handlerTIM3PWM_2.config.prescaler     =   16;
 8001bbc:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <init_Hardware+0x2fc>)
 8001bbe:	2210      	movs	r2, #16
 8001bc0:	609a      	str	r2, [r3, #8]

	pwm_Config(&handlerTIM3PWM_2);
 8001bc2:	4832      	ldr	r0, [pc, #200]	; (8001c8c <init_Hardware+0x2fc>)
 8001bc4:	f000 fe34 	bl	8002830 <pwm_Config>

	enableOutput(&handlerTIM3PWM_2);
 8001bc8:	4830      	ldr	r0, [pc, #192]	; (8001c8c <init_Hardware+0x2fc>)
 8001bca:	f000 ff75 	bl	8002ab8 <enableOutput>
	startPwmSignal(&handlerTIM3PWM_2);
 8001bce:	482f      	ldr	r0, [pc, #188]	; (8001c8c <init_Hardware+0x2fc>)
 8001bd0:	f000 ff60 	bl	8002a94 <startPwmSignal>

	HandlerPWM_3.pGPIOx          					= GPIOC;
 8001bd4:	4b2e      	ldr	r3, [pc, #184]	; (8001c90 <init_Hardware+0x300>)
 8001bd6:	4a29      	ldr	r2, [pc, #164]	; (8001c7c <init_Hardware+0x2ec>)
 8001bd8:	601a      	str	r2, [r3, #0]
	HandlerPWM_3.GPIO_PinConfig.GPIO_PinNumber  	= PIN_9;
 8001bda:	4b2d      	ldr	r3, [pc, #180]	; (8001c90 <init_Hardware+0x300>)
 8001bdc:	2209      	movs	r2, #9
 8001bde:	711a      	strb	r2, [r3, #4]
	HandlerPWM_3.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8001be0:	4b2b      	ldr	r3, [pc, #172]	; (8001c90 <init_Hardware+0x300>)
 8001be2:	2202      	movs	r2, #2
 8001be4:	715a      	strb	r2, [r3, #5]
	HandlerPWM_3.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8001be6:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <init_Hardware+0x300>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	721a      	strb	r2, [r3, #8]
	HandlerPWM_3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001bec:	4b28      	ldr	r3, [pc, #160]	; (8001c90 <init_Hardware+0x300>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	71da      	strb	r2, [r3, #7]
	HandlerPWM_3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8001bf2:	4b27      	ldr	r3, [pc, #156]	; (8001c90 <init_Hardware+0x300>)
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	719a      	strb	r2, [r3, #6]
	HandlerPWM_3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001bf8:	4b25      	ldr	r3, [pc, #148]	; (8001c90 <init_Hardware+0x300>)
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerPWM_3);
 8001bfe:	4824      	ldr	r0, [pc, #144]	; (8001c90 <init_Hardware+0x300>)
 8001c00:	f000 f9c0 	bl	8001f84 <GPIO_Config>

	handlerTIM3PWM_3.ptrTIMx           	  =   TIM3;
 8001c04:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <init_Hardware+0x304>)
 8001c06:	4a1f      	ldr	r2, [pc, #124]	; (8001c84 <init_Hardware+0x2f4>)
 8001c08:	601a      	str	r2, [r3, #0]
	handlerTIM3PWM_3.config.channel       =   PWM_CHANNEL_4;
 8001c0a:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <init_Hardware+0x304>)
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	711a      	strb	r2, [r3, #4]
	handlerTIM3PWM_3.config.duttyCicle    =   PWM_DUTTY_50_PERCENT;
 8001c10:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <init_Hardware+0x304>)
 8001c12:	2232      	movs	r2, #50	; 0x32
 8001c14:	81da      	strh	r2, [r3, #14]
	handlerTIM3PWM_3.config.periodo       =   20000;
 8001c16:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <init_Hardware+0x304>)
 8001c18:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001c1c:	819a      	strh	r2, [r3, #12]
	handlerTIM3PWM_3.config.prescaler     =   PWM_PSC_80_MHZ;
 8001c1e:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <init_Hardware+0x304>)
 8001c20:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001c24:	609a      	str	r2, [r3, #8]

	pwm_Config(&handlerTIM3PWM_3);
 8001c26:	481b      	ldr	r0, [pc, #108]	; (8001c94 <init_Hardware+0x304>)
 8001c28:	f000 fe02 	bl	8002830 <pwm_Config>

	enableOutput(&handlerTIM3PWM_3);
 8001c2c:	4819      	ldr	r0, [pc, #100]	; (8001c94 <init_Hardware+0x304>)
 8001c2e:	f000 ff43 	bl	8002ab8 <enableOutput>
	startPwmSignal(&handlerTIM3PWM_3);
 8001c32:	4818      	ldr	r0, [pc, #96]	; (8001c94 <init_Hardware+0x304>)
 8001c34:	f000 ff2e 	bl	8002a94 <startPwmSignal>
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000234 	.word	0x20000234
 8001c40:	20000238 	.word	0x20000238
 8001c44:	40020000 	.word	0x40020000
 8001c48:	20000314 	.word	0x20000314
 8001c4c:	20000244 	.word	0x20000244
 8001c50:	20000250 	.word	0x20000250
 8001c54:	2000025c 	.word	0x2000025c
 8001c58:	40011400 	.word	0x40011400
 8001c5c:	200002fc 	.word	0x200002fc
 8001c60:	40020400 	.word	0x40020400
 8001c64:	200002f0 	.word	0x200002f0
 8001c68:	20000308 	.word	0x20000308
 8001c6c:	40005400 	.word	0x40005400
 8001c70:	20000328 	.word	0x20000328
 8001c74:	40000c00 	.word	0x40000c00
 8001c78:	20000340 	.word	0x20000340
 8001c7c:	40020800 	.word	0x40020800
 8001c80:	20000364 	.word	0x20000364
 8001c84:	40000400 	.word	0x40000400
 8001c88:	2000034c 	.word	0x2000034c
 8001c8c:	20000374 	.word	0x20000374
 8001c90:	20000358 	.word	0x20000358
 8001c94:	20000384 	.word	0x20000384

08001c98 <BasicTimer2_Callback>:



// Callback para el blinky pin.
void BasicTimer2_Callback(void){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handlerBlinkyPin);
 8001c9c:	480c      	ldr	r0, [pc, #48]	; (8001cd0 <BasicTimer2_Callback+0x38>)
 8001c9e:	f000 fac3 	bl	8002228 <GPIOxTooglePin>
	if(sendMSG >= 4){
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <BasicTimer2_Callback+0x3c>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d909      	bls.n	8001cbe <BasicTimer2_Callback+0x26>
		updateDuttyCycle(&handlerTIM3PWM_1, duttyCalculator(X_axis));
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <BasicTimer2_Callback+0x40>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fe4a 	bl	8001948 <duttyCalculator>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4808      	ldr	r0, [pc, #32]	; (8001cdc <BasicTimer2_Callback+0x44>)
 8001cba:	f000 ff89 	bl	8002bd0 <updateDuttyCycle>
	}
	sendMSG++;
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <BasicTimer2_Callback+0x3c>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <BasicTimer2_Callback+0x3c>)
 8001cc8:	701a      	strb	r2, [r3, #0]
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000238 	.word	0x20000238
 8001cd4:	200002ec 	.word	0x200002ec
 8001cd8:	20000394 	.word	0x20000394
 8001cdc:	20000364 	.word	0x20000364

08001ce0 <BasicTimer5_Callback>:

// Callback para la bandera del muestreo de 1 KHz
void BasicTimer5_Callback(void){
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
	flagMuestreo = 1;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <BasicTimer5_Callback+0x14>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	2000033c 	.word	0x2000033c

08001cf8 <usart6Rx_Callback>:
// Callback para el usart 6.
void usart6Rx_Callback(void){
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
	rxData = getRxData();
 8001cfc:	f001 f9ca 	bl	8003094 <getRxData>
 8001d00:	4603      	mov	r3, r0
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b01      	ldr	r3, [pc, #4]	; (8001d0c <usart6Rx_Callback+0x14>)
 8001d06:	701a      	strb	r2, [r3, #0]
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000311 	.word	0x20000311

08001d10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d10:	480d      	ldr	r0, [pc, #52]	; (8001d48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d12:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d14:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d18:	480c      	ldr	r0, [pc, #48]	; (8001d4c <LoopForever+0x6>)
  ldr r1, =_edata
 8001d1a:	490d      	ldr	r1, [pc, #52]	; (8001d50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d1c:	4a0d      	ldr	r2, [pc, #52]	; (8001d54 <LoopForever+0xe>)
  movs r3, #0
 8001d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d20:	e002      	b.n	8001d28 <LoopCopyDataInit>

08001d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d26:	3304      	adds	r3, #4

08001d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d2c:	d3f9      	bcc.n	8001d22 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d30:	4c0a      	ldr	r4, [pc, #40]	; (8001d5c <LoopForever+0x16>)
  movs r3, #0
 8001d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d34:	e001      	b.n	8001d3a <LoopFillZerobss>

08001d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d38:	3204      	adds	r2, #4

08001d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d3c:	d3fb      	bcc.n	8001d36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d3e:	f001 f9eb 	bl	8003118 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d42:	f7ff fa61 	bl	8001208 <main>

08001d46 <LoopForever>:

LoopForever:
    b LoopForever
 8001d46:	e7fe      	b.n	8001d46 <LoopForever>
  ldr   r0, =_estack
 8001d48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d50:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8001d54:	08007fcc 	.word	0x08007fcc
  ldr r2, =_sbss
 8001d58:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8001d5c:	200003bc 	.word	0x200003bc

08001d60 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d60:	e7fe      	b.n	8001d60 <ADC_IRQHandler>
	...

08001d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	db0b      	blt.n	8001d8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	f003 021f 	and.w	r2, r3, #31
 8001d7c:	4906      	ldr	r1, [pc, #24]	; (8001d98 <__NVIC_EnableIRQ+0x34>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	095b      	lsrs	r3, r3, #5
 8001d84:	2001      	movs	r0, #1
 8001d86:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	e000e100 	.word	0xe000e100

08001d9c <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrBTimerHandler->ptrTIMx;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a4e      	ldr	r2, [pc, #312]	; (8001ee4 <BasicTimer_Config+0x148>)
 8001daa:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dac:	b672      	cpsid	i
}
 8001dae:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();
	/* 1. Activar la señal de reloj del periférico requerido */
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db8:	d106      	bne.n	8001dc8 <BasicTimer_Config+0x2c>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001dba:	4b4b      	ldr	r3, [pc, #300]	; (8001ee8 <BasicTimer_Config+0x14c>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a4a      	ldr	r2, [pc, #296]	; (8001ee8 <BasicTimer_Config+0x14c>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	e024      	b.n	8001e12 <BasicTimer_Config+0x76>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a47      	ldr	r2, [pc, #284]	; (8001eec <BasicTimer_Config+0x150>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d106      	bne.n	8001de0 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001dd2:	4b45      	ldr	r3, [pc, #276]	; (8001ee8 <BasicTimer_Config+0x14c>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	4a44      	ldr	r2, [pc, #272]	; (8001ee8 <BasicTimer_Config+0x14c>)
 8001dd8:	f043 0302 	orr.w	r3, r3, #2
 8001ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dde:	e018      	b.n	8001e12 <BasicTimer_Config+0x76>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a42      	ldr	r2, [pc, #264]	; (8001ef0 <BasicTimer_Config+0x154>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d106      	bne.n	8001df8 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001dea:	4b3f      	ldr	r3, [pc, #252]	; (8001ee8 <BasicTimer_Config+0x14c>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	4a3e      	ldr	r2, [pc, #248]	; (8001ee8 <BasicTimer_Config+0x14c>)
 8001df0:	f043 0304 	orr.w	r3, r3, #4
 8001df4:	6413      	str	r3, [r2, #64]	; 0x40
 8001df6:	e00c      	b.n	8001e12 <BasicTimer_Config+0x76>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a3d      	ldr	r2, [pc, #244]	; (8001ef4 <BasicTimer_Config+0x158>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d106      	bne.n	8001e10 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001e02:	4b39      	ldr	r3, [pc, #228]	; (8001ee8 <BasicTimer_Config+0x14c>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	4a38      	ldr	r2, [pc, #224]	; (8001ee8 <BasicTimer_Config+0x14c>)
 8001e08:	f043 0308 	orr.w	r3, r3, #8
 8001e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0e:	e000      	b.n	8001e12 <BasicTimer_Config+0x76>
	}

	else{
		__NOP();
 8001e10:	bf00      	nop
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */
	// -1 porque el contador empieza en 0
	ptrBTimerHandler->ptrTIMx-> PSC = ptrBTimerHandler ->TIMx_Config.TIMx_speed - 1;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	3a01      	subs	r2, #1
 8001e1c:	629a      	str	r2, [r3, #40]	; 0x28

	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	791b      	ldrb	r3, [r3, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d112      	bne.n	8001e4c <BasicTimer_Config+0xb0>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Necesitamos poner la direccion en 0 para que cuente hacia arria TIM_CR1_DIR = 1, entonces
		// lo negamos y hacemos una AND con el valor actual.
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0210 	bic.w	r2, r2, #16
 8001e34:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	3a01      	subs	r2, #1
 8001e40:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2200      	movs	r2, #0
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24
 8001e4a:	e00d      	b.n	8001e68 <BasicTimer_Config+0xcc>

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		// Cuando CR1 = 1 es descendente
		ptrBTimerHandler->ptrTIMx->CR1 = TIM_CR1_DIR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2210      	movs	r2, #16
 8001e52:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		ptrBTimerHandler-> ptrTIMx->ARR = 0;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	3a01      	subs	r2, #1
 8001e66:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	// El registro encargado de la interrupcion es el UIE

	// Modificar con el ciclo If
	ptrBTimerHandler->ptrTIMx->DIER |= ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable; //TIM_DIER_UIE
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	7c1b      	ldrb	r3, [r3, #16]
 8001e82:	4619      	mov	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e94:	d103      	bne.n	8001e9e <BasicTimer_Config+0x102>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8001e96:	201c      	movs	r0, #28
 8001e98:	f7ff ff64 	bl	8001d64 <__NVIC_EnableIRQ>
 8001e9c:	e01b      	b.n	8001ed6 <BasicTimer_Config+0x13a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a12      	ldr	r2, [pc, #72]	; (8001eec <BasicTimer_Config+0x150>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d103      	bne.n	8001eb0 <BasicTimer_Config+0x114>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8001ea8:	201d      	movs	r0, #29
 8001eaa:	f7ff ff5b 	bl	8001d64 <__NVIC_EnableIRQ>
 8001eae:	e012      	b.n	8001ed6 <BasicTimer_Config+0x13a>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a0e      	ldr	r2, [pc, #56]	; (8001ef0 <BasicTimer_Config+0x154>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d103      	bne.n	8001ec2 <BasicTimer_Config+0x126>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8001eba:	201e      	movs	r0, #30
 8001ebc:	f7ff ff52 	bl	8001d64 <__NVIC_EnableIRQ>
 8001ec0:	e009      	b.n	8001ed6 <BasicTimer_Config+0x13a>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a0b      	ldr	r2, [pc, #44]	; (8001ef4 <BasicTimer_Config+0x158>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d103      	bne.n	8001ed4 <BasicTimer_Config+0x138>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8001ecc:	2032      	movs	r0, #50	; 0x32
 8001ece:	f7ff ff49 	bl	8001d64 <__NVIC_EnableIRQ>
 8001ed2:	e000      	b.n	8001ed6 <BasicTimer_Config+0x13a>
	}

	else{
		__NOP();
 8001ed4:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8001ed6:	b662      	cpsie	i
}
 8001ed8:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200003a0 	.word	0x200003a0
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40000400 	.word	0x40000400
 8001ef0:	40000800 	.word	0x40000800
 8001ef4:	40000c00 	.word	0x40000c00

08001ef8 <BasicTimer3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer3_Callback(void){
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001efc:	bf00      	nop
}
 8001efe:	bf00      	nop
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr

08001f06 <BasicTimer4_Callback>:
__attribute__((weak)) void BasicTimer4_Callback(void){
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001f0a:	bf00      	nop
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM2->SR &= ~TIM_SR_UIF;
 8001f18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f22:	f023 0301 	bic.w	r3, r3, #1
 8001f26:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer2_Callback();
 8001f28:	f7ff feb6 	bl	8001c98 <BasicTimer2_Callback>
}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM3->SR &= ~TIM_SR_UIF;
 8001f34:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <TIM3_IRQHandler+0x18>)
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	4a03      	ldr	r2, [pc, #12]	; (8001f48 <TIM3_IRQHandler+0x18>)
 8001f3a:	f023 0301 	bic.w	r3, r3, #1
 8001f3e:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer3_Callback();
 8001f40:	f7ff ffda 	bl	8001ef8 <BasicTimer3_Callback>
}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40000400 	.word	0x40000400

08001f4c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM4->SR &= ~TIM_SR_UIF;
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <TIM4_IRQHandler+0x18>)
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	4a03      	ldr	r2, [pc, #12]	; (8001f64 <TIM4_IRQHandler+0x18>)
 8001f56:	f023 0301 	bic.w	r3, r3, #1
 8001f5a:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer4_Callback();
 8001f5c:	f7ff ffd3 	bl	8001f06 <BasicTimer4_Callback>
}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40000800 	.word	0x40000800

08001f68 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM5->SR &= ~TIM_SR_UIF;
 8001f6c:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <TIM5_IRQHandler+0x18>)
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	4a03      	ldr	r2, [pc, #12]	; (8001f80 <TIM5_IRQHandler+0x18>)
 8001f72:	f023 0301 	bic.w	r3, r3, #1
 8001f76:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer5_Callback();
 8001f78:	f7ff feb2 	bl	8001ce0 <BasicTimer5_Callback>
}
 8001f7c:	bf00      	nop
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40000c00 	.word	0x40000c00

08001f84 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemento "activar el periferico o activar la señal de reloj del periferico)
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60bb      	str	r3, [r7, #8]

	// 1)Activar el periferico
	//verificamos para GPIOA
	if(pGPIOHandler->pGPIOx == GPIOA){
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a87      	ldr	r2, [pc, #540]	; (80021b8 <GPIO_Config+0x234>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d106      	bne.n	8001fac <GPIO_Config+0x28>
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 8001f9e:	4b87      	ldr	r3, [pc, #540]	; (80021bc <GPIO_Config+0x238>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	4a86      	ldr	r2, [pc, #536]	; (80021bc <GPIO_Config+0x238>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001faa:	e03a      	b.n	8002022 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx == GPIOB){
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a83      	ldr	r2, [pc, #524]	; (80021c0 <GPIO_Config+0x23c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d106      	bne.n	8001fc4 <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 8001fb6:	4b81      	ldr	r3, [pc, #516]	; (80021bc <GPIO_Config+0x238>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a80      	ldr	r2, [pc, #512]	; (80021bc <GPIO_Config+0x238>)
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	e02e      	b.n	8002022 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if(pGPIOHandler->pGPIOx == GPIOC){
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a7e      	ldr	r2, [pc, #504]	; (80021c4 <GPIO_Config+0x240>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d106      	bne.n	8001fdc <GPIO_Config+0x58>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 8001fce:	4b7b      	ldr	r3, [pc, #492]	; (80021bc <GPIO_Config+0x238>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a7a      	ldr	r2, [pc, #488]	; (80021bc <GPIO_Config+0x238>)
 8001fd4:	f043 0304 	orr.w	r3, r3, #4
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	e022      	b.n	8002022 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if(pGPIOHandler->pGPIOx == GPIOD){
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a79      	ldr	r2, [pc, #484]	; (80021c8 <GPIO_Config+0x244>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d106      	bne.n	8001ff4 <GPIO_Config+0x70>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 8001fe6:	4b75      	ldr	r3, [pc, #468]	; (80021bc <GPIO_Config+0x238>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a74      	ldr	r2, [pc, #464]	; (80021bc <GPIO_Config+0x238>)
 8001fec:	f043 0308 	orr.w	r3, r3, #8
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	e016      	b.n	8002022 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if(pGPIOHandler->pGPIOx == GPIOE){
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a74      	ldr	r2, [pc, #464]	; (80021cc <GPIO_Config+0x248>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d106      	bne.n	800200c <GPIO_Config+0x88>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 8001ffe:	4b6f      	ldr	r3, [pc, #444]	; (80021bc <GPIO_Config+0x238>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a6e      	ldr	r2, [pc, #440]	; (80021bc <GPIO_Config+0x238>)
 8002004:	f043 0310 	orr.w	r3, r3, #16
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	e00a      	b.n	8002022 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOH
	else if(pGPIOHandler->pGPIOx == GPIOH){
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a6f      	ldr	r2, [pc, #444]	; (80021d0 <GPIO_Config+0x24c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d105      	bne.n	8002022 <GPIO_Config+0x9e>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 8002016:	4b69      	ldr	r3, [pc, #420]	; (80021bc <GPIO_Config+0x238>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a68      	ldr	r2, [pc, #416]	; (80021bc <GPIO_Config+0x238>)
 800201c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
	// Despues de activado, podemos comenzar a configurar.

	// 2) COnfigurando el registro GPIOx_MODER
	// Acá estamos leyendo config, moviendo "PinNumber" veces hacia la izquierda
	// ese valor (shift left) y todo eso lo cargamos en la variable auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	795b      	ldrb	r3, [r3, #5]
 8002026:	461a      	mov	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	791b      	ldrb	r3, [r3, #4]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	60fb      	str	r3, [r7, #12]
	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro
	 * (debemos escribir 0b00) para lo cual aplicamos una mascara y una operación de
	 * bitwise AND
	 */
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	791b      	ldrb	r3, [r3, #4]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	2103      	movs	r1, #3
 8002042:	fa01 f303 	lsl.w	r3, r1, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	4619      	mov	r1, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	400a      	ands	r2, r1
 8002050:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6819      	ldr	r1, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	430a      	orrs	r2, r1
 8002060:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	7a1b      	ldrb	r3, [r3, #8]
 8002066:	461a      	mov	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	791b      	ldrb	r3, [r3, #4]
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	791b      	ldrb	r3, [r3, #4]
 800207c:	4619      	mov	r1, r3
 800207e:	2301      	movs	r3, #1
 8002080:	408b      	lsls	r3, r1
 8002082:	43db      	mvns	r3, r3
 8002084:	4619      	mov	r1, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	400a      	ands	r2, r1
 800208c:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6859      	ldr	r1, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	430a      	orrs	r2, r1
 800209c:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	799b      	ldrb	r3, [r3, #6]
 80020a2:	461a      	mov	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	791b      	ldrb	r3, [r3, #4]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0B11 << 2 *pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	791b      	ldrb	r3, [r3, #4]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	2103      	movs	r1, #3
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	4619      	mov	r1, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	400a      	ands	r2, r1
 80020cc:	609a      	str	r2, [r3, #8]

	//cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6899      	ldr	r1, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	430a      	orrs	r2, r1
 80020dc:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull up pull down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	79db      	ldrb	r3, [r3, #7]
 80020e2:	461a      	mov	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	791b      	ldrb	r3, [r3, #4]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	791b      	ldrb	r3, [r3, #4]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	2103      	movs	r1, #3
 80020fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	4619      	mov	r1, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	400a      	ands	r2, r1
 800210c:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68d9      	ldr	r1, [r3, #12]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	430a      	orrs	r2, r1
 800211c:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas.. se vera luego
	if (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	795b      	ldrb	r3, [r3, #5]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d143      	bne.n	80021ae <GPIO_Config+0x22a>

		//Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	791b      	ldrb	r3, [r3, #4]
 800212a:	2b07      	cmp	r3, #7
 800212c:	d81f      	bhi.n	800216e <GPIO_Config+0x1ea>
			//Estamos en el registro AGRL, que controla los piner del pIN_0 AL PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	791b      	ldrb	r3, [r3, #4]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del tegistro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6a1a      	ldr	r2, [r3, #32]
 800213c:	210f      	movs	r1, #15
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	fa01 f303 	lsl.w	r3, r1, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	4619      	mov	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	400a      	ands	r2, r1
 800214e:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor confiurado en la posicon seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6a1a      	ldr	r2, [r3, #32]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	7a5b      	ldrb	r3, [r3, #9]
 800215a:	4619      	mov	r1, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	fa01 f303 	lsl.w	r3, r1, r3
 8002162:	4619      	mov	r1, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} //Fin del GPIO_Config
 800216c:	e01f      	b.n	80021ae <GPIO_Config+0x22a>
			auxPosition = 4* (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber -8);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	791b      	ldrb	r3, [r3, #4]
 8002172:	3b08      	subs	r3, #8
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800217e:	210f      	movs	r1, #15
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	4619      	mov	r1, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	400a      	ands	r2, r1
 8002190:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	7a5b      	ldrb	r3, [r3, #9]
 800219c:	4619      	mov	r1, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	fa01 f303 	lsl.w	r3, r1, r3
 80021a4:	4619      	mov	r1, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	625a      	str	r2, [r3, #36]	; 0x24
} //Fin del GPIO_Config
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	40020000 	.word	0x40020000
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40020400 	.word	0x40020400
 80021c4:	40020800 	.word	0x40020800
 80021c8:	40020c00 	.word	0x40020c00
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40021c00 	.word	0x40021c00

080021d4 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 *
 */
void GPIO_WritePin(GPIO_Handler_t *pPinHandler, uint8_t newState){
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->0DR &= ~(SET << pPinHandler ->GPIO_PinConfig.GPIO_PinNumber);
	if(newState == SET){
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d10d      	bne.n	8002202 <GPIO_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699a      	ldr	r2, [r3, #24]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	791b      	ldrb	r3, [r3, #4]
 80021f0:	4619      	mov	r1, r3
 80021f2:	2301      	movs	r3, #1
 80021f4:	408b      	lsls	r3, r1
 80021f6:	4619      	mov	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	619a      	str	r2, [r3, #24]
	else{
		//Trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
	}

}
 8002200:	e00d      	b.n	800221e <GPIO_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	699a      	ldr	r2, [r3, #24]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	791b      	ldrb	r3, [r3, #4]
 800220c:	3310      	adds	r3, #16
 800220e:	2101      	movs	r1, #1
 8002210:	fa01 f303 	lsl.w	r3, r1, r3
 8002214:	4619      	mov	r1, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	619a      	str	r2, [r3, #24]
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <GPIOxTooglePin>:
	pinValue &= mask;

	return pinValue;
}

void GPIOxTooglePin(GPIO_Handler_t *pPinHandler){
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR ^= (SET <<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695a      	ldr	r2, [r3, #20]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	791b      	ldrb	r3, [r3, #4]
 800223a:	4619      	mov	r1, r3
 800223c:	2301      	movs	r3, #1
 800223e:	408b      	lsls	r3, r1
 8002240:	4619      	mov	r1, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	404a      	eors	r2, r1
 8002248:	615a      	str	r2, [r3, #20]
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr

08002254 <i2c_config>:
 *
 * Además, estos pines deben ser configurados como salidas open-drain y con las
 * resistencias en modo pull-up..
 */

void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
	/* 1. Activamos la señal de reloj para el modulo I2C seleccionado */
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a45      	ldr	r2, [pc, #276]	; (8002378 <i2c_config+0x124>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d106      	bne.n	8002274 <i2c_config+0x20>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8002266:	4b45      	ldr	r3, [pc, #276]	; (800237c <i2c_config+0x128>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	4a44      	ldr	r2, [pc, #272]	; (800237c <i2c_config+0x128>)
 800226c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002270:	6413      	str	r3, [r2, #64]	; 0x40
 8002272:	e016      	b.n	80022a2 <i2c_config+0x4e>
	}
	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a41      	ldr	r2, [pc, #260]	; (8002380 <i2c_config+0x12c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d106      	bne.n	800228c <i2c_config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 800227e:	4b3f      	ldr	r3, [pc, #252]	; (800237c <i2c_config+0x128>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	4a3e      	ldr	r2, [pc, #248]	; (800237c <i2c_config+0x128>)
 8002284:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002288:	6413      	str	r3, [r2, #64]	; 0x40
 800228a:	e00a      	b.n	80022a2 <i2c_config+0x4e>
	}
	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a3c      	ldr	r2, [pc, #240]	; (8002384 <i2c_config+0x130>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d105      	bne.n	80022a2 <i2c_config+0x4e>
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8002296:	4b39      	ldr	r3, [pc, #228]	; (800237c <i2c_config+0x128>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	4a38      	ldr	r2, [pc, #224]	; (800237c <i2c_config+0x128>)
 800229c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022a0:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022b0:	601a      	str	r2, [r3, #0]
	__NOP();
 80022b2:	bf00      	nop
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_SWRST;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022c2:	601a      	str	r2, [r3, #0]

	/* 3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C
	 */
	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos); // Borramos la configuración previa
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80022d2:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_80_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);// Seleccionamos 80 MHz
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 80022e2:	605a      	str	r2, [r3, #4]
	/* 4. Configuramos el modo I2C en el que el sistema funciona
	 * En esta configuración se incluye también la configuración del reloj
	 * y el tiempo maximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los registros en 0
	 */
	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2200      	movs	r2, #0
 80022ea:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2200      	movs	r2, #0
 80022f2:	621a      	str	r2, [r3, #32]

	if (ptrHandlerI2C->modeI2C == I2C_MODE_SM){
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	795b      	ldrb	r3, [r3, #5]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d118      	bne.n	800232e <i2c_config+0xda>
		// Estamos en modo "standar" (SM mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~I2C_CCR_FS;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	69da      	ldr	r2, [r3, #28]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800230a:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que se encarga de generar la señal del reloj
		ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_SM_SPEED_100KHz << I2C_CCR_CCR_Pos);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	69da      	ldr	r2, [r3, #28]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 800231a:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que controla el tiempo T-Rise maximo
		ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6a1a      	ldr	r2, [r3, #32]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0229 	orr.w	r2, r2, #41	; 0x29
 800232a:	621a      	str	r2, [r3, #32]
 800232c:	e017      	b.n	800235e <i2c_config+0x10a>
	}
	else{
		// Estamos en modo "fast" (FM mode)
		// Seleccionamos el modo fast
		ptrHandlerI2C->ptrI2Cx->CCR &= I2C_CCR_FS;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	69da      	ldr	r2, [r3, #28]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800233c:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que se encarga de generar la señal del reloj
		ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz << I2C_CCR_CCR_Pos);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	69da      	ldr	r2, [r3, #28]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0221 	orr.w	r2, r2, #33	; 0x21
 800234c:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que controla el tiempo T-Rise maximo
		ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6a1a      	ldr	r2, [r3, #32]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 020c 	orr.w	r2, r2, #12
 800235c:	621a      	str	r2, [r3, #32]
	}

	/* 5. Activamos el modulo I2C
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f042 0201 	orr.w	r2, r2, #1
 800236c:	601a      	str	r2, [r3, #0]
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr
 8002378:	40005400 	.word	0x40005400
 800237c:	40023800 	.word	0x40023800
 8002380:	40005800 	.word	0x40005800
 8002384:	40005c00 	.word	0x40005c00

08002388 <i2c_stopTransaction>:

/* 8. Generamos la condición de stop
 */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	/* 7. Generamos la condición de stop
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239e:	601a      	str	r2, [r3, #0]
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr

080023aa <i2c_startTransaction>:
/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_CR2
 * 2. Generamos la señal de "start"
 * 2a. Esperamos a que la bandera del evento "start" se levante.
 * Mientras esperamos, el valor de SB es 0, entonces la negación (!) es 1
 */
void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_CR2
	 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80023b2:	e000      	b.n	80023b6 <i2c_startTransaction+0xc>
		__NOP();
 80023b4:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f7      	bne.n	80023b4 <i2c_startTransaction+0xa>
	}

	/* 2. Generamos la señal de "start"
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023d2:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante.
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80023d4:	e000      	b.n	80023d8 <i2c_startTransaction+0x2e>
		__NOP();
 80023d6:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f7      	beq.n	80023d6 <i2c_startTransaction+0x2c>
	}
}
 80023e6:	bf00      	nop
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr

080023f2 <i2c_reStartTransaction>:

/*
 */
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
	/* 2. Generamos la señal de "start"
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002408:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante.
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800240a:	e000      	b.n	800240e <i2c_reStartTransaction+0x1c>
		__NOP();
 800240c:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f7      	beq.n	800240c <i2c_reStartTransaction+0x1a>
	}
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <i2c_sendNoAck>:

/* 7a. Activamos la indicación para no-ACK (indicación para el Slave de terminar)
 */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	/* Debemos escribir cero en la posición ACK del registro de control 1
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_ACK;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800243e:	601a      	str	r2, [r3, #0]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <i2c_sendSlaveAddressRW>:
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 800244a:	b480      	push	{r7}
 800244c:	b085      	sub	sp, #20
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	460b      	mov	r3, r1
 8002454:	70fb      	strb	r3, [r7, #3]
 8002456:	4613      	mov	r3, r2
 8002458:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar
	 */
	uint8_t auxByte = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la dirección del Slave y el bit que indica que deseamos escribir un (0)
	 * (en el siguiente paso se envía la dirección de memoria que se desea escribir)
	 */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 800245e:	78fb      	ldrb	r3, [r7, #3]
 8002460:	005a      	lsls	r2, r3, #1
 8002462:	78bb      	ldrb	r3, [r7, #2]
 8002464:	431a      	orrs	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bandera del evento "addr" se levante
	 * (esto nos indica que la dirección fue enviada satisfactoriamente)
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 800246c:	e000      	b.n	8002470 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 800246e:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0f7      	beq.n	800246e <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepción de ACK de la "addr",
	 * para lo cual debemos leer en secuencia primero el I2C_SR1 y luego el I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	73fb      	strb	r3, [r7, #15]
}
 800248e:	bf00      	nop
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	70fb      	strb	r3, [r7, #3]
	/* 4. Enviamos la dirección de memoria que deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	78fa      	ldrb	r2, [r7, #3]
 80024aa:	611a      	str	r2, [r3, #16]

	/* 4.1 Esperamos hasta que el byte sea transmitido
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 80024ac:	e000      	b.n	80024b0 <i2c_sendMemoryAddress+0x18>
		__NOP();
 80024ae:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f7      	beq.n	80024ae <i2c_sendMemoryAddress+0x16>
	}
}
 80024be:	bf00      	nop
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr

080024ca <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	460b      	mov	r3, r1
 80024d4:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	78fa      	ldrb	r2, [r7, #3]
 80024dc:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 80024de:	e000      	b.n	80024e2 <i2c_sendDataByte+0x18>
		__NOP();
 80024e0:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f7      	beq.n	80024e0 <i2c_sendDataByte+0x16>
	}
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr

080024fc <i2c_readDataByte>:

/**/
uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	/* 9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 8002504:	e000      	b.n	8002508 <i2c_readDataByte+0xc>
		__NOP();
 8002506:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f7      	beq.n	8002506 <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	b2da      	uxtb	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->dataI2C;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	799b      	ldrb	r3, [r3, #6]
}
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <i2c_readSingleRegister>:

/**/
uint8_t i2c_readSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead){
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	70fb      	strb	r3, [r7, #3]
	/* 0. Creamos una variable auxiliar para recibir el dato que leemos */
	uint8_t auxRead = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	73fb      	strb	r3, [r7, #15]

	/* 1. Generamos la condición de start */
	i2c_startTransaction(ptrHandlerI2C);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff ff32 	bl	80023aa <i2c_startTransaction>

	/* 2. Enviamos la dirección del esclavo y la indicación de ESCRIBIR */
	i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	791b      	ldrb	r3, [r3, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	4619      	mov	r1, r3
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7ff ff7b 	bl	800244a <i2c_sendSlaveAddressRW>

	/* 3. Enviamos la dirección de memoria que deseamos leer */
	i2c_sendMemoryAddress(ptrHandlerI2C, regToRead);
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	4619      	mov	r1, r3
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff ff9d 	bl	8002498 <i2c_sendMemoryAddress>

	/* 4. Creamos una condición de reStart */
	i2c_reStartTransaction(ptrHandlerI2C);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff ff47 	bl	80023f2 <i2c_reStartTransaction>

	/* 5. Enviamos la dirección del esclavo y la indicación de LEER */
	i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_READ_DATA);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	791b      	ldrb	r3, [r3, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	4619      	mov	r1, r3
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff ff6c 	bl	800244a <i2c_sendSlaveAddressRW>

	/* 6. Generamos la condición de NoACK, para que el master no funciona y el slave solo envie 1 byte */
	i2c_sendNoAck(ptrHandlerI2C);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ff58 	bl	8002428 <i2c_sendNoAck>

	/* 7. Generamos la señal de Stop, para que el slave se detenga después de 1 byte*/
	i2c_stopTransaction(ptrHandlerI2C);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff ff05 	bl	8002388 <i2c_stopTransaction>

	/* 8. Leemos el dato que envia el esclavo */
	auxRead = i2c_readDataByte(ptrHandlerI2C);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff ffbc 	bl	80024fc <i2c_readDataByte>
 8002584:	4603      	mov	r3, r0
 8002586:	73fb      	strb	r3, [r7, #15]

	return auxRead;
 8002588:	7bfb      	ldrb	r3, [r7, #15]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <i2c_writeSingleRegister>:

/**/
void i2c_writeSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead, uint8_t newValue){
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	460b      	mov	r3, r1
 800259c:	70fb      	strb	r3, [r7, #3]
 800259e:	4613      	mov	r3, r2
 80025a0:	70bb      	strb	r3, [r7, #2]

	/* 1. Generamos la condición de Start*/
	i2c_startTransaction(ptrHandlerI2C);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff ff01 	bl	80023aa <i2c_startTransaction>

	/* 2. Enviamos la diracción del esclavo y la indicación de ESCRIBIR */
	i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	791b      	ldrb	r3, [r3, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	4619      	mov	r1, r3
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7ff ff4a 	bl	800244a <i2c_sendSlaveAddressRW>

	/* 3. Enviamos la dirección de memoria que deseamos escribir*/
	i2c_sendMemoryAddress(ptrHandlerI2C, regToRead);
 80025b6:	78fb      	ldrb	r3, [r7, #3]
 80025b8:	4619      	mov	r1, r3
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff ff6c 	bl	8002498 <i2c_sendMemoryAddress>

	/* 4. Enviamos el valor que deseamos escribir */
	i2c_sendDataByte(ptrHandlerI2C, newValue);
 80025c0:	78bb      	ldrb	r3, [r7, #2]
 80025c2:	4619      	mov	r1, r3
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff ff80 	bl	80024ca <i2c_sendDataByte>

	/* 5. Generamos la condición de Stop, para que el slave se detenga después de un byte */
	i2c_stopTransaction(ptrHandlerI2C);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff fedc 	bl	8002388 <i2c_stopTransaction>
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <PLL_Config>:
#include "PLLDriver.h"

uint32_t HSI_VALUE = 16000000;


void PLL_Config(PLL_Handler_t *ptrPLLHandler){
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

	// Se selecciona HSI como reloj interno del PLL en vez de un oscilador.
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC);
 80025e0:	4b7e      	ldr	r3, [pc, #504]	; (80027dc <PLL_Config+0x204>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4a7d      	ldr	r2, [pc, #500]	; (80027dc <PLL_Config+0x204>)
 80025e6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80025ea:	6053      	str	r3, [r2, #4]

	// Se observa el valor del HSI RDY.
	while( !(RCC->CR & RCC_CR_HSIRDY) );
 80025ec:	bf00      	nop
 80025ee:	4b7b      	ldr	r3, [pc, #492]	; (80027dc <PLL_Config+0x204>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f9      	beq.n	80025ee <PLL_Config+0x16>

	// Se inicializa el power enable clock del APB1.
	RCC->APB1ENR |= RCC_APB1RSTR_PWRRST;
 80025fa:	4b78      	ldr	r3, [pc, #480]	; (80027dc <PLL_Config+0x204>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	4a77      	ldr	r2, [pc, #476]	; (80027dc <PLL_Config+0x204>)
 8002600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002604:	6413      	str	r3, [r2, #64]	; 0x40


	// Estas líneas adecúan el acceso a la memoria del microcontrolador
	// para comenzar a ejecutar las instrucciones. Ver ACR.
	FLASH->ACR |= 1<<8;
 8002606:	4b76      	ldr	r3, [pc, #472]	; (80027e0 <PLL_Config+0x208>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a75      	ldr	r2, [pc, #468]	; (80027e0 <PLL_Config+0x208>)
 800260c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002610:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= 1<<9;
 8002612:	4b73      	ldr	r3, [pc, #460]	; (80027e0 <PLL_Config+0x208>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a72      	ldr	r2, [pc, #456]	; (80027e0 <PLL_Config+0x208>)
 8002618:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800261c:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= 1<<10;
 800261e:	4b70      	ldr	r3, [pc, #448]	; (80027e0 <PLL_Config+0x208>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a6f      	ldr	r2, [pc, #444]	; (80027e0 <PLL_Config+0x208>)
 8002624:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002628:	6013      	str	r3, [r2, #0]
	 *  los voltajes de las distintas frecuencias que pueden llegar a configurarse.
	 *  Además, deben establecerse diferentes tiempos de espera para cada rango.
	 */

	// Voltajes para las frecuencias dentro de un rango máximo de 64 MHz.
	if(ptrPLLHandler->PLL_Config.PLL_voltage == VOLTAGE_64MHZ){
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10c      	bne.n	800264c <PLL_Config+0x74>
		// Se toma 0 en el bit 15 y 1 en el bit 14 del PWR para la potencia.
		PWR->CR |= 01<<14;
 8002632:	4b6c      	ldr	r3, [pc, #432]	; (80027e4 <PLL_Config+0x20c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a6b      	ldr	r2, [pc, #428]	; (80027e4 <PLL_Config+0x20c>)
 8002638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800263c:	6013      	str	r3, [r2, #0]

		// Se configura el tiempo de espera.
		FLASH->ACR |= 1<<0;
 800263e:	4b68      	ldr	r3, [pc, #416]	; (80027e0 <PLL_Config+0x208>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a67      	ldr	r2, [pc, #412]	; (80027e0 <PLL_Config+0x208>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	e02d      	b.n	80026a8 <PLL_Config+0xd0>
	}
	else if(ptrPLLHandler->PLL_Config.PLL_voltage == VOLTAGE_84MHZ){
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d10c      	bne.n	800266e <PLL_Config+0x96>
		// Se toma 1 en el bit 15 y 0 en el bit 14 del PWR para la potencia.
		PWR->CR |= 10<<14;
 8002654:	4b63      	ldr	r3, [pc, #396]	; (80027e4 <PLL_Config+0x20c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a62      	ldr	r2, [pc, #392]	; (80027e4 <PLL_Config+0x20c>)
 800265a:	f443 3320 	orr.w	r3, r3, #163840	; 0x28000
 800265e:	6013      	str	r3, [r2, #0]

		// Se configura el tiempo de espera.
		FLASH->ACR |= 3<<0;
 8002660:	4b5f      	ldr	r3, [pc, #380]	; (80027e0 <PLL_Config+0x208>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a5e      	ldr	r2, [pc, #376]	; (80027e0 <PLL_Config+0x208>)
 8002666:	f043 0303 	orr.w	r3, r3, #3
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	e01c      	b.n	80026a8 <PLL_Config+0xd0>
	}
	else if(ptrPLLHandler->PLL_Config.PLL_voltage == VOLTAGE_100MHZ){
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d10c      	bne.n	8002690 <PLL_Config+0xb8>
		// Se toma 1 en el bit 15 y 1 en el bit 14 del PWR para la potencia.
		PWR->CR |= 11<<14;
 8002676:	4b5b      	ldr	r3, [pc, #364]	; (80027e4 <PLL_Config+0x20c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a5a      	ldr	r2, [pc, #360]	; (80027e4 <PLL_Config+0x20c>)
 800267c:	f443 3330 	orr.w	r3, r3, #180224	; 0x2c000
 8002680:	6013      	str	r3, [r2, #0]

		// Se configura el tiempo de espera.
		FLASH->ACR |= 5<<0;
 8002682:	4b57      	ldr	r3, [pc, #348]	; (80027e0 <PLL_Config+0x208>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a56      	ldr	r2, [pc, #344]	; (80027e0 <PLL_Config+0x208>)
 8002688:	f043 0305 	orr.w	r3, r3, #5
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	e00b      	b.n	80026a8 <PLL_Config+0xd0>
	}
	else{
		// Implementamos la máxima frecuencia para el caso por defecto.
		PWR->CR |= 11<<14;
 8002690:	4b54      	ldr	r3, [pc, #336]	; (80027e4 <PLL_Config+0x20c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a53      	ldr	r2, [pc, #332]	; (80027e4 <PLL_Config+0x20c>)
 8002696:	f443 3330 	orr.w	r3, r3, #180224	; 0x2c000
 800269a:	6013      	str	r3, [r2, #0]

		// Tiempo de espera.
		FLASH->ACR |= 5<<0;
 800269c:	4b50      	ldr	r3, [pc, #320]	; (80027e0 <PLL_Config+0x208>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a4f      	ldr	r2, [pc, #316]	; (80027e0 <PLL_Config+0x208>)
 80026a2:	f043 0305 	orr.w	r3, r3, #5
 80026a6:	6013      	str	r3, [r2, #0]
	}

	/*
	 * El preescaler null debe ser 1 para conseguir la máxima salida de frecuencia.
	 */
	RCC->CFGR |= 0001<<4;
 80026a8:	4b4c      	ldr	r3, [pc, #304]	; (80027dc <PLL_Config+0x204>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	4a4b      	ldr	r2, [pc, #300]	; (80027dc <PLL_Config+0x204>)
 80026ae:	f043 0310 	orr.w	r3, r3, #16
 80026b2:	6093      	str	r3, [r2, #8]
	 * a 80 MHz que se encuentra evidentemente en un intervalo superior a este valor,
	 * se decide no incluir el primer preescaler que divide en 1 la frecuencia que se
	 * quiere implementar, sino comenzar con la división en 2,4,8,16...
	 */
	// Se divide en 2 el bus 1.
	RCC->CFGR |= (RCC_CFGR_PPRE1_DIV2);
 80026b4:	4b49      	ldr	r3, [pc, #292]	; (80027dc <PLL_Config+0x204>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	4a48      	ldr	r2, [pc, #288]	; (80027dc <PLL_Config+0x204>)
 80026ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026be:	6093      	str	r3, [r2, #8]
	 * a 80 MHz, esta frecuencia se encuentra cómodamente ubicada antes de la
	 * frecuencia máxima del bus de datos, por tanto, el preescaler 0 que mantiene
	 * la frecuencia original, puede implementarse, dividiendo en 1.
	 */
	// Se divide en 1 el bus 2.
	RCC->CFGR |= (RCC_CFGR_PPRE2_DIV1);
 80026c0:	4b46      	ldr	r3, [pc, #280]	; (80027dc <PLL_Config+0x204>)
 80026c2:	4a46      	ldr	r2, [pc, #280]	; (80027dc <PLL_Config+0x204>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	6093      	str	r3, [r2, #8]

// Se debe configurar el sistema de manera que cuando la entrada del HSI
// sean 80 MHz, se mantenga.
	// La fuente de reloj del micro se configura sobre el HSI,
	RCC->PLLCFGR |= (0 << 22);
 80026c8:	4b44      	ldr	r3, [pc, #272]	; (80027dc <PLL_Config+0x204>)
 80026ca:	4a44      	ldr	r2, [pc, #272]	; (80027dc <PLL_Config+0x204>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	6053      	str	r3, [r2, #4]

	// Se divide la entrada de frecuencia en 8, para obtener 2 MHz.
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM_4);
 80026d0:	4b42      	ldr	r3, [pc, #264]	; (80027dc <PLL_Config+0x204>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4a41      	ldr	r2, [pc, #260]	; (80027dc <PLL_Config+0x204>)
 80026d6:	f023 0310 	bic.w	r3, r3, #16
 80026da:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLM_3);
 80026dc:	4b3f      	ldr	r3, [pc, #252]	; (80027dc <PLL_Config+0x204>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	4a3e      	ldr	r2, [pc, #248]	; (80027dc <PLL_Config+0x204>)
 80026e2:	f043 0308 	orr.w	r3, r3, #8
 80026e6:	6053      	str	r3, [r2, #4]

	// Se aplica una máscara un poco rudimentaria para garantizar la limpieza del
	// del registro.
	RCC->PLLCFGR &= 0b1111111111111000000000111111;
 80026e8:	4b3c      	ldr	r3, [pc, #240]	; (80027dc <PLL_Config+0x204>)
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	493b      	ldr	r1, [pc, #236]	; (80027dc <PLL_Config+0x204>)
 80026ee:	4b3e      	ldr	r3, [pc, #248]	; (80027e8 <PLL_Config+0x210>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]
	// Se ecriben los diferentes valores de las frecuencias que se quieren multiplicar.
	/* NOTE que aquí es donde se escriben cada una de las frecuencias dentro del
	 * registro de 9 bits que se tiene dentro del registro PLLCFGR del RCC qur se deciden
	 * aleatoriamente a gusto del usuario dentro del intervalo de voltaje escogido.
	 */
	if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_80MHZ){
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	785b      	ldrb	r3, [r3, #1]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d10c      	bne.n	8002716 <PLL_Config+0x13e>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_4);
 80026fc:	4b37      	ldr	r3, [pc, #220]	; (80027dc <PLL_Config+0x204>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4a36      	ldr	r2, [pc, #216]	; (80027dc <PLL_Config+0x204>)
 8002702:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002706:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 8002708:	4b34      	ldr	r3, [pc, #208]	; (80027dc <PLL_Config+0x204>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	4a33      	ldr	r2, [pc, #204]	; (80027dc <PLL_Config+0x204>)
 800270e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002712:	6053      	str	r3, [r2, #4]
 8002714:	e03d      	b.n	8002792 <PLL_Config+0x1ba>
	}else if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_100MHZ){
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	785b      	ldrb	r3, [r3, #1]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d112      	bne.n	8002744 <PLL_Config+0x16c>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_2);
 800271e:	4b2f      	ldr	r3, [pc, #188]	; (80027dc <PLL_Config+0x204>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4a2e      	ldr	r2, [pc, #184]	; (80027dc <PLL_Config+0x204>)
 8002724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002728:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_5);
 800272a:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <PLL_Config+0x204>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4a2b      	ldr	r2, [pc, #172]	; (80027dc <PLL_Config+0x204>)
 8002730:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002734:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 8002736:	4b29      	ldr	r3, [pc, #164]	; (80027dc <PLL_Config+0x204>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4a28      	ldr	r2, [pc, #160]	; (80027dc <PLL_Config+0x204>)
 800273c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002740:	6053      	str	r3, [r2, #4]
 8002742:	e026      	b.n	8002792 <PLL_Config+0x1ba>
	}else if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_70MHZ){
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	785b      	ldrb	r3, [r3, #1]
 8002748:	2b02      	cmp	r3, #2
 800274a:	d112      	bne.n	8002772 <PLL_Config+0x19a>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_1);
 800274c:	4b23      	ldr	r3, [pc, #140]	; (80027dc <PLL_Config+0x204>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	4a22      	ldr	r2, [pc, #136]	; (80027dc <PLL_Config+0x204>)
 8002752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002756:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_2);
 8002758:	4b20      	ldr	r3, [pc, #128]	; (80027dc <PLL_Config+0x204>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4a1f      	ldr	r2, [pc, #124]	; (80027dc <PLL_Config+0x204>)
 800275e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002762:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 8002764:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <PLL_Config+0x204>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	4a1c      	ldr	r2, [pc, #112]	; (80027dc <PLL_Config+0x204>)
 800276a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800276e:	6053      	str	r3, [r2, #4]
 8002770:	e00f      	b.n	8002792 <PLL_Config+0x1ba>
	}else if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_65MHZ){
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	785b      	ldrb	r3, [r3, #1]
 8002776:	2b03      	cmp	r3, #3
 8002778:	d10b      	bne.n	8002792 <PLL_Config+0x1ba>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_0);
 800277a:	4b18      	ldr	r3, [pc, #96]	; (80027dc <PLL_Config+0x204>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	4a17      	ldr	r2, [pc, #92]	; (80027dc <PLL_Config+0x204>)
 8002780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002784:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 8002786:	4b15      	ldr	r3, [pc, #84]	; (80027dc <PLL_Config+0x204>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4a14      	ldr	r2, [pc, #80]	; (80027dc <PLL_Config+0x204>)
 800278c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002790:	6053      	str	r3, [r2, #4]
	}
	// Se escoge como factor de reloj principal PLLP el número dos para obtener
	// la salida deseada en cada caso.
	RCC->PLLCFGR |= (00 << 16);
 8002792:	4b12      	ldr	r3, [pc, #72]	; (80027dc <PLL_Config+0x204>)
 8002794:	4a11      	ldr	r2, [pc, #68]	; (80027dc <PLL_Config+0x204>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	6053      	str	r3, [r2, #4]

	/*ACTIVACIÓN DEL PLL CON LOS PARÁMETROS ELEGIDOS ANTERIORMENTE. */
	// Se activa el PLL.
	RCC->CR |= (1<<24);
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <PLL_Config+0x204>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a0f      	ldr	r2, [pc, #60]	; (80027dc <PLL_Config+0x204>)
 80027a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027a4:	6013      	str	r3, [r2, #0]
	// Se da un retardo que indica la activación del PLL.
	while (!(RCC->CR & (1<<25)));
 80027a6:	bf00      	nop
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <PLL_Config+0x204>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f9      	beq.n	80027a8 <PLL_Config+0x1d0>
	// Se introduce un 2 dentro del clock source del PLL.
	RCC->CFGR |= (2<<0);
 80027b4:	4b09      	ldr	r3, [pc, #36]	; (80027dc <PLL_Config+0x204>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4a08      	ldr	r2, [pc, #32]	; (80027dc <PLL_Config+0x204>)
 80027ba:	f043 0302 	orr.w	r3, r3, #2
 80027be:	6093      	str	r3, [r2, #8]

	// Aquí se espera a que el PLL esté listo como reloj principal de la configuracion.
	while (!(RCC->CFGR & (2<<2)));
 80027c0:	bf00      	nop
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <PLL_Config+0x204>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f9      	beq.n	80027c2 <PLL_Config+0x1ea>

}// FIN DE LA FUNCIÓN DE CONFIGURACIÓN PARA DISTINTAS FRECUENCIAS.
 80027ce:	bf00      	nop
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40023c00 	.word	0x40023c00
 80027e4:	40007000 	.word	0x40007000
 80027e8:	0fff803f 	.word	0x0fff803f

080027ec <getConfigPLL>:

// Función para saber el estado del PLL y así poder caracterizar lo demás.
uint32_t getConfigPLL(void){
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
	// Se buscan los valores que están definiendo los valores actuales del reloj PLL
	uint32_t PLLN = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 80027f2:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <getConfigPLL+0x3c>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	099b      	lsrs	r3, r3, #6
 80027f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027fc:	60fb      	str	r3, [r7, #12]
	uint32_t PLLM = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos;
 80027fe:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <getConfigPLL+0x3c>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002806:	60bb      	str	r3, [r7, #8]
	// Se hace la operación para saber el valor actual del reloj. (Asume PLLP =2)
	uint32_t clockMicro = (HSI_VALUE / PLLM) * PLLN / 2;
 8002808:	4b08      	ldr	r3, [pc, #32]	; (800282c <getConfigPLL+0x40>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	fb02 f303 	mul.w	r3, r2, r3
 8002818:	085b      	lsrs	r3, r3, #1
 800281a:	607b      	str	r3, [r7, #4]
	return clockMicro;
 800281c:	687b      	ldr	r3, [r7, #4]

}
 800281e:	4618      	mov	r0, r3
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr
 8002828:	40023800 	.word	0x40023800
 800282c:	20000040 	.word	0x20000040

08002830 <pwm_Config>:
 */

#include "PwmDriver.h"

/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if(ptrPwmHandler->ptrTIMx == TIM2){
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002840:	d106      	bne.n	8002850 <pwm_Config+0x20>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002842:	4b90      	ldr	r3, [pc, #576]	; (8002a84 <pwm_Config+0x254>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	4a8f      	ldr	r2, [pc, #572]	; (8002a84 <pwm_Config+0x254>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	6413      	str	r3, [r2, #64]	; 0x40
 800284e:	e024      	b.n	800289a <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a8c      	ldr	r2, [pc, #560]	; (8002a88 <pwm_Config+0x258>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d106      	bne.n	8002868 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800285a:	4b8a      	ldr	r3, [pc, #552]	; (8002a84 <pwm_Config+0x254>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	4a89      	ldr	r2, [pc, #548]	; (8002a84 <pwm_Config+0x254>)
 8002860:	f043 0302 	orr.w	r3, r3, #2
 8002864:	6413      	str	r3, [r2, #64]	; 0x40
 8002866:	e018      	b.n	800289a <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a87      	ldr	r2, [pc, #540]	; (8002a8c <pwm_Config+0x25c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d106      	bne.n	8002880 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002872:	4b84      	ldr	r3, [pc, #528]	; (8002a84 <pwm_Config+0x254>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4a83      	ldr	r2, [pc, #524]	; (8002a84 <pwm_Config+0x254>)
 8002878:	f043 0304 	orr.w	r3, r3, #4
 800287c:	6413      	str	r3, [r2, #64]	; 0x40
 800287e:	e00c      	b.n	800289a <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a82      	ldr	r2, [pc, #520]	; (8002a90 <pwm_Config+0x260>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d106      	bne.n	8002898 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800288a:	4b7e      	ldr	r3, [pc, #504]	; (8002a84 <pwm_Config+0x254>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	4a7d      	ldr	r2, [pc, #500]	; (8002a84 <pwm_Config+0x254>)
 8002890:	f043 0308 	orr.w	r3, r3, #8
 8002894:	6413      	str	r3, [r2, #64]	; 0x40
 8002896:	e000      	b.n	800289a <pwm_Config+0x6a>
	}
	else{
		__NOP();
 8002898:	bf00      	nop
	}

	/* 1. Cargamos la frecuencia deseada */
	setFrequency(ptrPwmHandler);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f94a 	bl	8002b34 <setFrequency>

	/* 2. Cargamos el valor del dutty-Cycle*/
	setDuttyCycle(ptrPwmHandler);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f95f 	bl	8002b64 <setDuttyCycle>

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0210 	bic.w	r2, r2, #16
 80028b4:	601a      	str	r2, [r3, #0]
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	791b      	ldrb	r3, [r3, #4]
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	f200 80dc 	bhi.w	8002a78 <pwm_Config+0x248>
 80028c0:	a201      	add	r2, pc, #4	; (adr r2, 80028c8 <pwm_Config+0x98>)
 80028c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c6:	bf00      	nop
 80028c8:	080028d9 	.word	0x080028d9
 80028cc:	08002941 	.word	0x08002941
 80028d0:	080029a9 	.word	0x080029a9
 80028d4:	08002a11 	.word	0x08002a11
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S_0;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	699a      	ldr	r2, [r3, #24]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	619a      	str	r2, [r3, #24]
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S_1;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699a      	ldr	r2, [r3, #24]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0202 	bic.w	r2, r2, #2
 80028f6:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699a      	ldr	r2, [r3, #24]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0210 	bic.w	r2, r2, #16
 8002906:	619a      	str	r2, [r3, #24]
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699a      	ldr	r2, [r3, #24]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0220 	orr.w	r2, r2, #32
 8002916:	619a      	str	r2, [r3, #24]
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_2;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699a      	ldr	r2, [r3, #24]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002926:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699a      	ldr	r2, [r3, #24]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0208 	orr.w	r2, r2, #8
 8002936:	619a      	str	r2, [r3, #24]

		enableOutput(ptrPwmHandler);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f8bd 	bl	8002ab8 <enableOutput>

		break;
 800293e:	e09c      	b.n	8002a7a <pwm_Config+0x24a>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S_0;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699a      	ldr	r2, [r3, #24]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800294e:	619a      	str	r2, [r3, #24]
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S_1;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699a      	ldr	r2, [r3, #24]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800295e:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2M_0;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699a      	ldr	r2, [r3, #24]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800296e:	619a      	str	r2, [r3, #24]
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699a      	ldr	r2, [r3, #24]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800297e:	619a      	str	r2, [r3, #24]
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_2;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699a      	ldr	r2, [r3, #24]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800298e:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699a      	ldr	r2, [r3, #24]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800299e:	619a      	str	r2, [r3, #24]

		enableOutput(ptrPwmHandler);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f889 	bl	8002ab8 <enableOutput>

		break;
 80029a6:	e068      	b.n	8002a7a <pwm_Config+0x24a>
	}

	case PWM_CHANNEL_3:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S_0;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	69da      	ldr	r2, [r3, #28]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	61da      	str	r2, [r3, #28]
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S_1;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	69da      	ldr	r2, [r3, #28]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0202 	bic.w	r2, r2, #2
 80029c6:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3M_0;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	69da      	ldr	r2, [r3, #28]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0210 	bic.w	r2, r2, #16
 80029d6:	61da      	str	r2, [r3, #28]
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	69da      	ldr	r2, [r3, #28]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0220 	orr.w	r2, r2, #32
 80029e6:	61da      	str	r2, [r3, #28]
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_2;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	69da      	ldr	r2, [r3, #28]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029f6:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	69da      	ldr	r2, [r3, #28]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0208 	orr.w	r2, r2, #8
 8002a06:	61da      	str	r2, [r3, #28]

		enableOutput(ptrPwmHandler);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f855 	bl	8002ab8 <enableOutput>

		break;
 8002a0e:	e034      	b.n	8002a7a <pwm_Config+0x24a>
	}

	case PWM_CHANNEL_4:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S_0;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69da      	ldr	r2, [r3, #28]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a1e:	61da      	str	r2, [r3, #28]
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S_1;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	69da      	ldr	r2, [r3, #28]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a2e:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4M_0;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	69da      	ldr	r2, [r3, #28]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a3e:	61da      	str	r2, [r3, #28]
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	69da      	ldr	r2, [r3, #28]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a4e:	61da      	str	r2, [r3, #28]
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_2;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	69da      	ldr	r2, [r3, #28]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a5e:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	69da      	ldr	r2, [r3, #28]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a6e:	61da      	str	r2, [r3, #28]

		enableOutput(ptrPwmHandler);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f821 	bl	8002ab8 <enableOutput>

		break;
 8002a76:	e000      	b.n	8002a7a <pwm_Config+0x24a>
	}

	default:{
		break;
 8002a78:	bf00      	nop

	/* 6. Activamos la salida seleccionada */
	enableOutput(ptrPwmHandler);

	}// fin del switch-case
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40000400 	.word	0x40000400
 8002a8c:	40000800 	.word	0x40000800
 8002a90:	40000c00 	.word	0x40000c00

08002a94 <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0201 	orr.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr
	...

08002ab8 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
void enableOutput(PWM_Handler_t *ptrPwmHandler) {
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
	switch (ptrPwmHandler->config.channel) {
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	791b      	ldrb	r3, [r3, #4]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d82f      	bhi.n	8002b28 <enableOutput+0x70>
 8002ac8:	a201      	add	r2, pc, #4	; (adr r2, 8002ad0 <enableOutput+0x18>)
 8002aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ace:	bf00      	nop
 8002ad0:	08002ae1 	.word	0x08002ae1
 8002ad4:	08002af3 	.word	0x08002af3
 8002ad8:	08002b05 	.word	0x08002b05
 8002adc:	08002b17 	.word	0x08002b17
	case PWM_CHANNEL_1: {
		// Activamos la salida del canal 1
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6a1a      	ldr	r2, [r3, #32]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	621a      	str	r2, [r3, #32]
		break;
 8002af0:	e01b      	b.n	8002b2a <enableOutput+0x72>
	}

	case PWM_CHANNEL_2: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6a1a      	ldr	r2, [r3, #32]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 0210 	orr.w	r2, r2, #16
 8002b00:	621a      	str	r2, [r3, #32]
		break;
 8002b02:	e012      	b.n	8002b2a <enableOutput+0x72>
	}

	case PWM_CHANNEL_3: {
		// Activamos la salida del canal 3
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6a1a      	ldr	r2, [r3, #32]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b12:	621a      	str	r2, [r3, #32]
		break;
 8002b14:	e009      	b.n	8002b2a <enableOutput+0x72>
	}

	case PWM_CHANNEL_4: {
		// Activamos la salida del canal 4
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6a1a      	ldr	r2, [r3, #32]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b24:	621a      	str	r2, [r3, #32]
		break;
 8002b26:	e000      	b.n	8002b2a <enableOutput+0x72>
	}

	default: {
		break;
 8002b28:	bf00      	nop
	}
	}
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <setFrequency>:
/*
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC |= ptrPwmHandler->config.prescaler;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	629a      	str	r2, [r3, #40]	; 0x28

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.
	ptrPwmHandler->ptrTIMx->ARR = ptrPwmHandler->config.periodo - 1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	899b      	ldrh	r3, [r3, #12]
 8002b52:	1e5a      	subs	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <setDuttyCycle>:
	// Llamamos a la función que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	791b      	ldrb	r3, [r3, #4]
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d827      	bhi.n	8002bc4 <setDuttyCycle+0x60>
 8002b74:	a201      	add	r2, pc, #4	; (adr r2, 8002b7c <setDuttyCycle+0x18>)
 8002b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7a:	bf00      	nop
 8002b7c:	08002b8d 	.word	0x08002b8d
 8002b80:	08002b9b 	.word	0x08002b9b
 8002b84:	08002ba9 	.word	0x08002ba9
 8002b88:	08002bb7 	.word	0x08002bb7
	case PWM_CHANNEL_1:{
		ptrPwmHandler->ptrTIMx->CCR1 = ptrPwmHandler->config.duttyCicle - 1;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	89db      	ldrh	r3, [r3, #14]
 8002b90:	1e5a      	subs	r2, r3, #1
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 8002b98:	e015      	b.n	8002bc6 <setDuttyCycle+0x62>
	}

	case PWM_CHANNEL_2:{
		ptrPwmHandler->ptrTIMx->CCR2 = ptrPwmHandler->config.duttyCicle - 1;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	89db      	ldrh	r3, [r3, #14]
 8002b9e:	1e5a      	subs	r2, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	639a      	str	r2, [r3, #56]	; 0x38

		break;
 8002ba6:	e00e      	b.n	8002bc6 <setDuttyCycle+0x62>
	}

	case PWM_CHANNEL_3:{
		ptrPwmHandler->ptrTIMx->CCR3 = ptrPwmHandler->config.duttyCicle - 1;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	89db      	ldrh	r3, [r3, #14]
 8002bac:	1e5a      	subs	r2, r3, #1
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	63da      	str	r2, [r3, #60]	; 0x3c

		break;
 8002bb4:	e007      	b.n	8002bc6 <setDuttyCycle+0x62>
	}

	case PWM_CHANNEL_4:{
		ptrPwmHandler->ptrTIMx->CCR4 = ptrPwmHandler->config.duttyCicle - 1;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	89db      	ldrh	r3, [r3, #14]
 8002bba:	1e5a      	subs	r2, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40

		break;
 8002bc2:	e000      	b.n	8002bc6 <setDuttyCycle+0x62>
	}

	default:{
		break;
 8002bc4:	bf00      	nop
	}
	}// fin del switch-case
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <updateDuttyCycle>:



/* Función para actualizar el Dutty, funciona de la mano con setDuttyCycle */
void updateDuttyCycle(PWM_Handler_t *ptrPwmHandler, uint16_t newDutty){
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	807b      	strh	r3, [r7, #2]
	// Actualizamos el registro que manipula el dutty
	ptrPwmHandler->config.duttyCicle = newDutty;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	887a      	ldrh	r2, [r7, #2]
 8002be0:	81da      	strh	r2, [r3, #14]

	// Llamamos a la función que cambia el dutty y cargamos el nuevo valor
	setDuttyCycle(ptrPwmHandler);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7ff ffbe 	bl	8002b64 <setDuttyCycle>
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <__NVIC_EnableIRQ>:
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	db0b      	blt.n	8002c1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	f003 021f 	and.w	r2, r3, #31
 8002c08:	4906      	ldr	r1, [pc, #24]	; (8002c24 <__NVIC_EnableIRQ+0x34>)
 8002c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0e:	095b      	lsrs	r3, r3, #5
 8002c10:	2001      	movs	r0, #1
 8002c12:	fa00 f202 	lsl.w	r2, r0, r2
 8002c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr
 8002c24:	e000e100 	.word	0xe000e100

08002c28 <USART_Config>:
 */

// Esta variable es necesaria para las interrupciones del USART 2 y 6.
uint8_t auxRxData = 0;

void USART_Config(USART_Handler_t *ptrUsartHandler){
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c30:	b672      	cpsid	i
}
 8002c32:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a8c      	ldr	r2, [pc, #560]	; (8002e6c <USART_Config+0x244>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d106      	bne.n	8002c4c <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8002c3e:	4b8c      	ldr	r3, [pc, #560]	; (8002e70 <USART_Config+0x248>)
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	4a8b      	ldr	r2, [pc, #556]	; (8002e70 <USART_Config+0x248>)
 8002c44:	f043 0310 	orr.w	r3, r3, #16
 8002c48:	6453      	str	r3, [r2, #68]	; 0x44
 8002c4a:	e016      	b.n	8002c7a <USART_Config+0x52>
	}else if(ptrUsartHandler->ptrUSARTx == USART6){
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a88      	ldr	r2, [pc, #544]	; (8002e74 <USART_Config+0x24c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d106      	bne.n	8002c64 <USART_Config+0x3c>
		/*Configuramos el USART 6 que está en el mismo bus del USART 1 */
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8002c56:	4b86      	ldr	r3, [pc, #536]	; (8002e70 <USART_Config+0x248>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	4a85      	ldr	r2, [pc, #532]	; (8002e70 <USART_Config+0x248>)
 8002c5c:	f043 0320 	orr.w	r3, r3, #32
 8002c60:	6453      	str	r3, [r2, #68]	; 0x44
 8002c62:	e00a      	b.n	8002c7a <USART_Config+0x52>
		// Luego el USART 2 que está en el bus 1.
	}else if(ptrUsartHandler->ptrUSARTx == USART2){
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a83      	ldr	r2, [pc, #524]	; (8002e78 <USART_Config+0x250>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d105      	bne.n	8002c7a <USART_Config+0x52>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8002c6e:	4b80      	ldr	r3, [pc, #512]	; (8002e70 <USART_Config+0x248>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	4a7f      	ldr	r2, [pc, #508]	; (8002e70 <USART_Config+0x248>)
 8002c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c78:	6413      	str	r3, [r2, #64]	; 0x40
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2200      	movs	r2, #0
 8002c88:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	79db      	ldrb	r3, [r3, #7]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d025      	beq.n	8002cde <USART_Config+0xb6>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	79db      	ldrb	r3, [r3, #7]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d110      	bne.n	8002cbc <USART_Config+0x94>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ca8:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	e018      	b.n	8002cee <USART_Config+0xc6>

		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cca:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cda:	60da      	str	r2, [r3, #12]
 8002cdc:	e007      	b.n	8002cee <USART_Config+0xc6>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cec:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize ==USART_DATASIZE_8BIT){
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	799b      	ldrb	r3, [r3, #6]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d115      	bne.n	8002d22 <USART_Config+0xfa>

	    	// Inicialmente debe corroborarse si se quiere o no la paridad.
	    	if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_NONE){
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	79db      	ldrb	r3, [r3, #7]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d108      	bne.n	8002d10 <USART_Config+0xe8>
	    		// Si se quieren datos de 8 bits.
	    		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	e010      	b.n	8002d32 <USART_Config+0x10a>
	    	}
	    	else{
	    		// Si la partidad esta activada, se agrega un BIT adicional.
	    		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d1e:	60da      	str	r2, [r3, #12]
 8002d20:	e007      	b.n	8002d32 <USART_Config+0x10a>
	    	}
	    }
	    else{
	    	// Se configuran 9 bits para el tamaño.
	    	ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d30:	60da      	str	r2, [r3, #12]
	    }

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	7a1b      	ldrb	r3, [r3, #8]
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	d84e      	bhi.n	8002dd8 <USART_Config+0x1b0>
 8002d3a:	a201      	add	r2, pc, #4	; (adr r2, 8002d40 <USART_Config+0x118>)
 8002d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d40:	08002d51 	.word	0x08002d51
 8002d44:	08002d73 	.word	0x08002d73
 8002d48:	08002d95 	.word	0x08002d95
 8002d4c:	08002db7 	.word	0x08002db7
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d5e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d6e:	611a      	str	r2, [r3, #16]
		break;
 8002d70:	e043      	b.n	8002dfa <USART_Config+0x1d2>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d80:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d90:	611a      	str	r2, [r3, #16]
		break;
 8002d92:	e032      	b.n	8002dfa <USART_Config+0x1d2>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691a      	ldr	r2, [r3, #16]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002da2:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691a      	ldr	r2, [r3, #16]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002db2:	611a      	str	r2, [r3, #16]
		break;
 8002db4:	e021      	b.n	8002dfa <USART_Config+0x1d2>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002dc4:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dd4:	611a      	str	r2, [r3, #16]
		break;
 8002dd6:	e010      	b.n	8002dfa <USART_Config+0x1d2>
	}
	default: {
		// En el caso por defecto seleccionamos 1 bit de parada
		// Escriba acá su código
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	691a      	ldr	r2, [r3, #16]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002de6:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	691a      	ldr	r2, [r3, #16]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002df6:	611a      	str	r2, [r3, #16]
		break;
 8002df8:	bf00      	nop
	 * decida utilizar el usuario. La función getConfig() retorna esta
	 * frecuencia en que se encuentra actualmente el reloj del sistema PLL,
	 * por tanto, se considera un condicional que incluye los cálculos para
	 * la frecuencia de 80 MHz y por defecto recurre a la frecuencia natural.
	 */
	if(actualFrecuency == 80000000){
 8002dfa:	f7ff fcf7 	bl	80027ec <getConfigPLL>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	4a1e      	ldr	r2, [pc, #120]	; (8002e7c <USART_Config+0x254>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d11d      	bne.n	8002e42 <USART_Config+0x21a>
		// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
		if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	795b      	ldrb	r3, [r3, #5]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d105      	bne.n	8002e1a <USART_Config+0x1f2>
			// El valor a cargar es 520.833 -> Mantiza = 520,fraction = 0.833
			// Mantiza = 520 = 0x208, fraction = 16 * 0.833 = 13
			// Valor a cargar 0x208D
			// Configurando el Baudrate generator para una velocidad de 9600bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x20F5;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f242 02f5 	movw	r2, #8437	; 0x20f5
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	e03a      	b.n	8002e90 <USART_Config+0x268>
		}

		else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	795b      	ldrb	r3, [r3, #5]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d105      	bne.n	8002e2e <USART_Config+0x206>
			// El valor a cargar es 260.4166 -> Mantiza = 260,fraction = 0.4166
			// Mantiza = 260 = 0x104, fraction = 16 * 0.4166 = 7
			// Escriba acá su código y los comentarios que faltan
			// Valor a cargar 0x1047
			ptrUsartHandler->ptrUSARTx->BRR = 0x107B;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f241 027b 	movw	r2, #4219	; 0x107b
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	e030      	b.n	8002e90 <USART_Config+0x268>
		}

		else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	795b      	ldrb	r3, [r3, #5]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d12c      	bne.n	8002e90 <USART_Config+0x268>
			// Escriba acá su código y los comentarios que faltan
			// El valor a cargar es 43.402 -> Mantiza = 43,fraction = 0.402
			// Mantiza = 43 = 0x2B, fraction = 16 * 0.402 = 6.
			ptrUsartHandler->ptrUSARTx->BRR = 0x2BF;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f240 22bf 	movw	r2, #703	; 0x2bf
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	e026      	b.n	8002e90 <USART_Config+0x268>
		}
	// Caso por defecto de 16 MHz.
	}else{
		// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
		if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	795b      	ldrb	r3, [r3, #5]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d105      	bne.n	8002e56 <USART_Config+0x22e>
			// El valor a cargar es 104.1875 -> Mantiza = 104,fraction = 0.1875
			// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
			// Valor a cargar 0x0683
			// Configurando el Baudrate generator para una velocidad de 9600bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f240 6283 	movw	r2, #1667	; 0x683
 8002e52:	609a      	str	r2, [r3, #8]
 8002e54:	e01c      	b.n	8002e90 <USART_Config+0x268>
		}

		else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	795b      	ldrb	r3, [r3, #5]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d110      	bne.n	8002e80 <USART_Config+0x258>
			// El valor a cargar es 52.0625 -> Mantiza = 52,fraction = 0.0625
			// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
			// Escriba acá su código y los comentarios que faltan
			// Valor a cargar 0x0341
			ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f240 3241 	movw	r2, #833	; 0x341
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	e012      	b.n	8002e90 <USART_Config+0x268>
 8002e6a:	bf00      	nop
 8002e6c:	40011000 	.word	0x40011000
 8002e70:	40023800 	.word	0x40023800
 8002e74:	40011400 	.word	0x40011400
 8002e78:	40004400 	.word	0x40004400
 8002e7c:	04c4b400 	.word	0x04c4b400
		}

		else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	795b      	ldrb	r3, [r3, #5]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d103      	bne.n	8002e90 <USART_Config+0x268>
			// Escriba acá su código y los comentarios que faltan
			// El valor a cargar es 8.6875 -> Mantiza = 8,fraction = 0.6875
			// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11 = B.
			ptrUsartHandler->ptrUSARTx->BRR = 0x008B;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	228b      	movs	r2, #139	; 0x8b
 8002e8e:	609a      	str	r2, [r3, #8]
		}
	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	791b      	ldrb	r3, [r3, #4]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d847      	bhi.n	8002f28 <USART_Config+0x300>
 8002e98:	a201      	add	r2, pc, #4	; (adr r2, 8002ea0 <USART_Config+0x278>)
 8002e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9e:	bf00      	nop
 8002ea0:	08002eb1 	.word	0x08002eb1
 8002ea4:	08002ec3 	.word	0x08002ec3
 8002ea8:	08002ed5 	.word	0x08002ed5
 8002eac:	08002ef7 	.word	0x08002ef7
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_TE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0208 	orr.w	r2, r2, #8
 8002ebe:	60da      	str	r2, [r3, #12]
		break;
 8002ec0:	e04b      	b.n	8002f5a <USART_Config+0x332>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_RE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0204 	orr.w	r2, r2, #4
 8002ed0:	60da      	str	r2, [r3, #12]
		break;
 8002ed2:	e042      	b.n	8002f5a <USART_Config+0x332>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmision como recepcion
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_TE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0208 	orr.w	r2, r2, #8
 8002ee2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_RE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0204 	orr.w	r2, r2, #4
 8002ef2:	60da      	str	r2, [r3, #12]
		break;
 8002ef4:	e031      	b.n	8002f5a <USART_Config+0x332>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		// Escriba acá su código
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68da      	ldr	r2, [r3, #12]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0204 	bic.w	r2, r2, #4
 8002f04:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0208 	bic.w	r2, r2, #8
 8002f14:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f24:	60da      	str	r2, [r3, #12]
		break;
 8002f26:	e018      	b.n	8002f5a <USART_Config+0x332>
	}

	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0204 	bic.w	r2, r2, #4
 8002f36:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0208 	bic.w	r2, r2, #8
 8002f46:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f56:	60da      	str	r2, [r3, #12]
		break;
 8002f58:	bf00      	nop
	}
	}

	// 2.7 Activamos el módulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	791b      	ldrb	r3, [r3, #4]
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	d007      	beq.n	8002f72 <USART_Config+0x34a>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f70:	60da      	str	r2, [r3, #12]
	}
	// Se verifica la activación de la interrupcion Rx
	if (ptrUsartHandler->ptrUSARTx == USART1){
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a28      	ldr	r2, [pc, #160]	; (8003018 <USART_Config+0x3f0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d03a      	beq.n	8002ff2 <USART_Config+0x3ca>
	}

	/* 1.2 Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2) {
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a26      	ldr	r2, [pc, #152]	; (800301c <USART_Config+0x3f4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d118      	bne.n	8002fb8 <USART_Config+0x390>
		if (ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE) {
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	7a5b      	ldrb	r3, [r3, #9]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d10b      	bne.n	8002fa6 <USART_Config+0x37e>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0220 	orr.w	r2, r2, #32
 8002f9c:	60da      	str	r2, [r3, #12]
			NVIC_EnableIRQ(USART2_IRQn);
 8002f9e:	2026      	movs	r0, #38	; 0x26
 8002fa0:	f7ff fe26 	bl	8002bf0 <__NVIC_EnableIRQ>
 8002fa4:	e025      	b.n	8002ff2 <USART_Config+0x3ca>
		} else {
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0220 	bic.w	r2, r2, #32
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	e01c      	b.n	8002ff2 <USART_Config+0x3ca>
		}
	}

	/* 1.3 Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6) {
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a18      	ldr	r2, [pc, #96]	; (8003020 <USART_Config+0x3f8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d117      	bne.n	8002ff2 <USART_Config+0x3ca>
		if (ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE) {
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	7a5b      	ldrb	r3, [r3, #9]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d10b      	bne.n	8002fe2 <USART_Config+0x3ba>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0220 	orr.w	r2, r2, #32
 8002fd8:	60da      	str	r2, [r3, #12]
			NVIC_EnableIRQ(USART6_IRQn);
 8002fda:	2047      	movs	r0, #71	; 0x47
 8002fdc:	f7ff fe08 	bl	8002bf0 <__NVIC_EnableIRQ>
 8002fe0:	e007      	b.n	8002ff2 <USART_Config+0x3ca>
		} else {
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0220 	bic.w	r2, r2, #32
 8002ff0:	60da      	str	r2, [r3, #12]
		}
	}

	// 2.8 Activamos el módulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	791b      	ldrb	r3, [r3, #4]
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	d007      	beq.n	800300a <USART_Config+0x3e2>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003008:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800300a:	b662      	cpsie	i
}
 800300c:	bf00      	nop
	}

	// Activamos las interrupciones globales
	__enable_irq();
}
 800300e:	bf00      	nop
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40011000 	.word	0x40011000
 800301c:	40004400 	.word	0x40004400
 8003020:	40011400 	.word	0x40011400

08003024 <usart2Rx_Callback>:

/* Similar a como se hizo con las EXTI, se crean los callbacks para los USART */

__attribute__((weak)) void usart2Rx_Callback(void){
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the usart2Rx_Callback could be implemented in the main file
	   */
	__NOP();
 8003028:	bf00      	nop
}
 800302a:	bf00      	nop
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr

08003032 <writeChar>:
	   */
	__NOP();
}

/* funcion para escribir un solo char */
int writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800303c:	e000      	b.n	8003040 <writeChar+0xe>
		__NOP();
 800303e:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f7      	beq.n	800303e <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	605a      	str	r2, [r3, #4]

	return dataToSend;
 8003056:	683b      	ldr	r3, [r7, #0]
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr

08003062 <writeMsg>:

// función para escribir un mensaje
void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	6039      	str	r1, [r7, #0]
	while(*msgToSend != '\0'){
 800306c:	e008      	b.n	8003080 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	4619      	mov	r1, r3
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff ffdc 	bl	8003032 <writeChar>
		msgToSend++;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	3301      	adds	r3, #1
 800307e:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f2      	bne.n	800306e <writeMsg+0xc>
	}
}
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <getRxData>:

// función auxiliar
uint8_t getRxData(void){
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
	return auxRxData;
 8003098:	4b02      	ldr	r3, [pc, #8]	; (80030a4 <getRxData+0x10>)
 800309a:	781b      	ldrb	r3, [r3, #0]
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr
 80030a4:	200003a4 	.word	0x200003a4

080030a8 <USART2_IRQHandler>:

/* INTERRUPCIONES DEL USART */
// Se debe crear una variable auxiliar para la lectura que se declara al inicio.

/* Para el USART 2 */
void USART2_IRQHandler(void){
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
	// Se evalúa si la interrupción que se dio es por RX
	if(USART2->SR & USART_SR_RXNE){
 80030ac:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <USART2_IRQHandler+0x30>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0320 	and.w	r3, r3, #32
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00c      	beq.n	80030d2 <USART2_IRQHandler+0x2a>
		USART2->SR &= ~USART_SR_RXNE;
 80030b8:	4b07      	ldr	r3, [pc, #28]	; (80030d8 <USART2_IRQHandler+0x30>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a06      	ldr	r2, [pc, #24]	; (80030d8 <USART2_IRQHandler+0x30>)
 80030be:	f023 0320 	bic.w	r3, r3, #32
 80030c2:	6013      	str	r3, [r2, #0]
		auxRxData = (uint8_t) USART2->DR;
 80030c4:	4b04      	ldr	r3, [pc, #16]	; (80030d8 <USART2_IRQHandler+0x30>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	4b04      	ldr	r3, [pc, #16]	; (80030dc <USART2_IRQHandler+0x34>)
 80030cc:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 80030ce:	f7ff ffa9 	bl	8003024 <usart2Rx_Callback>
	}
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40004400 	.word	0x40004400
 80030dc:	200003a4 	.word	0x200003a4

080030e0 <USART6_IRQHandler>:

/* Para el USART 6 */
void USART6_IRQHandler(void){
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
	// Evaluamos que la interrupción que se dio es por RX
	if(USART6->SR & USART_SR_RXNE){
 80030e4:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <USART6_IRQHandler+0x30>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0320 	and.w	r3, r3, #32
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00c      	beq.n	800310a <USART6_IRQHandler+0x2a>
		USART6->SR &= ~USART_SR_RXNE;
 80030f0:	4b07      	ldr	r3, [pc, #28]	; (8003110 <USART6_IRQHandler+0x30>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a06      	ldr	r2, [pc, #24]	; (8003110 <USART6_IRQHandler+0x30>)
 80030f6:	f023 0320 	bic.w	r3, r3, #32
 80030fa:	6013      	str	r3, [r2, #0]
		auxRxData = (uint8_t) USART6->DR;
 80030fc:	4b04      	ldr	r3, [pc, #16]	; (8003110 <USART6_IRQHandler+0x30>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	b2da      	uxtb	r2, r3
 8003102:	4b04      	ldr	r3, [pc, #16]	; (8003114 <USART6_IRQHandler+0x34>)
 8003104:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 8003106:	f7fe fdf7 	bl	8001cf8 <usart6Rx_Callback>
	}
}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40011400 	.word	0x40011400
 8003114:	200003a4 	.word	0x200003a4

08003118 <__libc_init_array>:
 8003118:	b570      	push	{r4, r5, r6, lr}
 800311a:	4d0d      	ldr	r5, [pc, #52]	; (8003150 <__libc_init_array+0x38>)
 800311c:	4c0d      	ldr	r4, [pc, #52]	; (8003154 <__libc_init_array+0x3c>)
 800311e:	1b64      	subs	r4, r4, r5
 8003120:	10a4      	asrs	r4, r4, #2
 8003122:	2600      	movs	r6, #0
 8003124:	42a6      	cmp	r6, r4
 8003126:	d109      	bne.n	800313c <__libc_init_array+0x24>
 8003128:	4d0b      	ldr	r5, [pc, #44]	; (8003158 <__libc_init_array+0x40>)
 800312a:	4c0c      	ldr	r4, [pc, #48]	; (800315c <__libc_init_array+0x44>)
 800312c:	f004 fc8c 	bl	8007a48 <_init>
 8003130:	1b64      	subs	r4, r4, r5
 8003132:	10a4      	asrs	r4, r4, #2
 8003134:	2600      	movs	r6, #0
 8003136:	42a6      	cmp	r6, r4
 8003138:	d105      	bne.n	8003146 <__libc_init_array+0x2e>
 800313a:	bd70      	pop	{r4, r5, r6, pc}
 800313c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003140:	4798      	blx	r3
 8003142:	3601      	adds	r6, #1
 8003144:	e7ee      	b.n	8003124 <__libc_init_array+0xc>
 8003146:	f855 3b04 	ldr.w	r3, [r5], #4
 800314a:	4798      	blx	r3
 800314c:	3601      	adds	r6, #1
 800314e:	e7f2      	b.n	8003136 <__libc_init_array+0x1e>
 8003150:	08007fc4 	.word	0x08007fc4
 8003154:	08007fc4 	.word	0x08007fc4
 8003158:	08007fc4 	.word	0x08007fc4
 800315c:	08007fc8 	.word	0x08007fc8

08003160 <memset>:
 8003160:	4402      	add	r2, r0
 8003162:	4603      	mov	r3, r0
 8003164:	4293      	cmp	r3, r2
 8003166:	d100      	bne.n	800316a <memset+0xa>
 8003168:	4770      	bx	lr
 800316a:	f803 1b01 	strb.w	r1, [r3], #1
 800316e:	e7f9      	b.n	8003164 <memset+0x4>

08003170 <__cvt>:
 8003170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003174:	b088      	sub	sp, #32
 8003176:	2b00      	cmp	r3, #0
 8003178:	461f      	mov	r7, r3
 800317a:	4614      	mov	r4, r2
 800317c:	bfb8      	it	lt
 800317e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003182:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003184:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003186:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800318a:	bfb6      	itet	lt
 800318c:	461f      	movlt	r7, r3
 800318e:	2300      	movge	r3, #0
 8003190:	232d      	movlt	r3, #45	; 0x2d
 8003192:	7013      	strb	r3, [r2, #0]
 8003194:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003196:	f023 0820 	bic.w	r8, r3, #32
 800319a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800319e:	d005      	beq.n	80031ac <__cvt+0x3c>
 80031a0:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80031a4:	d100      	bne.n	80031a8 <__cvt+0x38>
 80031a6:	3501      	adds	r5, #1
 80031a8:	2302      	movs	r3, #2
 80031aa:	e000      	b.n	80031ae <__cvt+0x3e>
 80031ac:	2303      	movs	r3, #3
 80031ae:	aa07      	add	r2, sp, #28
 80031b0:	9204      	str	r2, [sp, #16]
 80031b2:	aa06      	add	r2, sp, #24
 80031b4:	e9cd a202 	strd	sl, r2, [sp, #8]
 80031b8:	e9cd 3500 	strd	r3, r5, [sp]
 80031bc:	4622      	mov	r2, r4
 80031be:	463b      	mov	r3, r7
 80031c0:	f001 fd7a 	bl	8004cb8 <_dtoa_r>
 80031c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80031c8:	4606      	mov	r6, r0
 80031ca:	d102      	bne.n	80031d2 <__cvt+0x62>
 80031cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80031ce:	07db      	lsls	r3, r3, #31
 80031d0:	d522      	bpl.n	8003218 <__cvt+0xa8>
 80031d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80031d6:	eb06 0905 	add.w	r9, r6, r5
 80031da:	d110      	bne.n	80031fe <__cvt+0x8e>
 80031dc:	7833      	ldrb	r3, [r6, #0]
 80031de:	2b30      	cmp	r3, #48	; 0x30
 80031e0:	d10a      	bne.n	80031f8 <__cvt+0x88>
 80031e2:	2200      	movs	r2, #0
 80031e4:	2300      	movs	r3, #0
 80031e6:	4620      	mov	r0, r4
 80031e8:	4639      	mov	r1, r7
 80031ea:	f7fd fc75 	bl	8000ad8 <__aeabi_dcmpeq>
 80031ee:	b918      	cbnz	r0, 80031f8 <__cvt+0x88>
 80031f0:	f1c5 0501 	rsb	r5, r5, #1
 80031f4:	f8ca 5000 	str.w	r5, [sl]
 80031f8:	f8da 3000 	ldr.w	r3, [sl]
 80031fc:	4499      	add	r9, r3
 80031fe:	2200      	movs	r2, #0
 8003200:	2300      	movs	r3, #0
 8003202:	4620      	mov	r0, r4
 8003204:	4639      	mov	r1, r7
 8003206:	f7fd fc67 	bl	8000ad8 <__aeabi_dcmpeq>
 800320a:	b108      	cbz	r0, 8003210 <__cvt+0xa0>
 800320c:	f8cd 901c 	str.w	r9, [sp, #28]
 8003210:	2230      	movs	r2, #48	; 0x30
 8003212:	9b07      	ldr	r3, [sp, #28]
 8003214:	454b      	cmp	r3, r9
 8003216:	d307      	bcc.n	8003228 <__cvt+0xb8>
 8003218:	9b07      	ldr	r3, [sp, #28]
 800321a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800321c:	1b9b      	subs	r3, r3, r6
 800321e:	4630      	mov	r0, r6
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	b008      	add	sp, #32
 8003224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003228:	1c59      	adds	r1, r3, #1
 800322a:	9107      	str	r1, [sp, #28]
 800322c:	701a      	strb	r2, [r3, #0]
 800322e:	e7f0      	b.n	8003212 <__cvt+0xa2>

08003230 <__exponent>:
 8003230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003232:	4603      	mov	r3, r0
 8003234:	2900      	cmp	r1, #0
 8003236:	bfb8      	it	lt
 8003238:	4249      	neglt	r1, r1
 800323a:	f803 2b02 	strb.w	r2, [r3], #2
 800323e:	bfb4      	ite	lt
 8003240:	222d      	movlt	r2, #45	; 0x2d
 8003242:	222b      	movge	r2, #43	; 0x2b
 8003244:	2909      	cmp	r1, #9
 8003246:	7042      	strb	r2, [r0, #1]
 8003248:	dd2a      	ble.n	80032a0 <__exponent+0x70>
 800324a:	f10d 0407 	add.w	r4, sp, #7
 800324e:	46a4      	mov	ip, r4
 8003250:	270a      	movs	r7, #10
 8003252:	46a6      	mov	lr, r4
 8003254:	460a      	mov	r2, r1
 8003256:	fb91 f6f7 	sdiv	r6, r1, r7
 800325a:	fb07 1516 	mls	r5, r7, r6, r1
 800325e:	3530      	adds	r5, #48	; 0x30
 8003260:	2a63      	cmp	r2, #99	; 0x63
 8003262:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003266:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800326a:	4631      	mov	r1, r6
 800326c:	dcf1      	bgt.n	8003252 <__exponent+0x22>
 800326e:	3130      	adds	r1, #48	; 0x30
 8003270:	f1ae 0502 	sub.w	r5, lr, #2
 8003274:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003278:	1c44      	adds	r4, r0, #1
 800327a:	4629      	mov	r1, r5
 800327c:	4561      	cmp	r1, ip
 800327e:	d30a      	bcc.n	8003296 <__exponent+0x66>
 8003280:	f10d 0209 	add.w	r2, sp, #9
 8003284:	eba2 020e 	sub.w	r2, r2, lr
 8003288:	4565      	cmp	r5, ip
 800328a:	bf88      	it	hi
 800328c:	2200      	movhi	r2, #0
 800328e:	4413      	add	r3, r2
 8003290:	1a18      	subs	r0, r3, r0
 8003292:	b003      	add	sp, #12
 8003294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003296:	f811 2b01 	ldrb.w	r2, [r1], #1
 800329a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800329e:	e7ed      	b.n	800327c <__exponent+0x4c>
 80032a0:	2330      	movs	r3, #48	; 0x30
 80032a2:	3130      	adds	r1, #48	; 0x30
 80032a4:	7083      	strb	r3, [r0, #2]
 80032a6:	70c1      	strb	r1, [r0, #3]
 80032a8:	1d03      	adds	r3, r0, #4
 80032aa:	e7f1      	b.n	8003290 <__exponent+0x60>

080032ac <_printf_float>:
 80032ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032b0:	b091      	sub	sp, #68	; 0x44
 80032b2:	460c      	mov	r4, r1
 80032b4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80032b8:	4616      	mov	r6, r2
 80032ba:	461f      	mov	r7, r3
 80032bc:	4605      	mov	r5, r0
 80032be:	f002 fe55 	bl	8005f6c <_localeconv_r>
 80032c2:	6803      	ldr	r3, [r0, #0]
 80032c4:	9309      	str	r3, [sp, #36]	; 0x24
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fc ff8a 	bl	80001e0 <strlen>
 80032cc:	2300      	movs	r3, #0
 80032ce:	930e      	str	r3, [sp, #56]	; 0x38
 80032d0:	f8d8 3000 	ldr.w	r3, [r8]
 80032d4:	900a      	str	r0, [sp, #40]	; 0x28
 80032d6:	3307      	adds	r3, #7
 80032d8:	f023 0307 	bic.w	r3, r3, #7
 80032dc:	f103 0208 	add.w	r2, r3, #8
 80032e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80032e4:	f8d4 b000 	ldr.w	fp, [r4]
 80032e8:	f8c8 2000 	str.w	r2, [r8]
 80032ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80032f4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80032f8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80032fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80032fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003300:	4b9c      	ldr	r3, [pc, #624]	; (8003574 <_printf_float+0x2c8>)
 8003302:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003306:	4640      	mov	r0, r8
 8003308:	f7fd fc18 	bl	8000b3c <__aeabi_dcmpun>
 800330c:	bb70      	cbnz	r0, 800336c <_printf_float+0xc0>
 800330e:	4b99      	ldr	r3, [pc, #612]	; (8003574 <_printf_float+0x2c8>)
 8003310:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003312:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003316:	4640      	mov	r0, r8
 8003318:	f7fd fbf2 	bl	8000b00 <__aeabi_dcmple>
 800331c:	bb30      	cbnz	r0, 800336c <_printf_float+0xc0>
 800331e:	2200      	movs	r2, #0
 8003320:	2300      	movs	r3, #0
 8003322:	4640      	mov	r0, r8
 8003324:	4651      	mov	r1, sl
 8003326:	f7fd fbe1 	bl	8000aec <__aeabi_dcmplt>
 800332a:	b110      	cbz	r0, 8003332 <_printf_float+0x86>
 800332c:	232d      	movs	r3, #45	; 0x2d
 800332e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003332:	4b91      	ldr	r3, [pc, #580]	; (8003578 <_printf_float+0x2cc>)
 8003334:	4891      	ldr	r0, [pc, #580]	; (800357c <_printf_float+0x2d0>)
 8003336:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800333a:	bf94      	ite	ls
 800333c:	4698      	movls	r8, r3
 800333e:	4680      	movhi	r8, r0
 8003340:	2303      	movs	r3, #3
 8003342:	6123      	str	r3, [r4, #16]
 8003344:	f02b 0304 	bic.w	r3, fp, #4
 8003348:	6023      	str	r3, [r4, #0]
 800334a:	f04f 0a00 	mov.w	sl, #0
 800334e:	9700      	str	r7, [sp, #0]
 8003350:	4633      	mov	r3, r6
 8003352:	aa0f      	add	r2, sp, #60	; 0x3c
 8003354:	4621      	mov	r1, r4
 8003356:	4628      	mov	r0, r5
 8003358:	f000 f9d2 	bl	8003700 <_printf_common>
 800335c:	3001      	adds	r0, #1
 800335e:	f040 808f 	bne.w	8003480 <_printf_float+0x1d4>
 8003362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003366:	b011      	add	sp, #68	; 0x44
 8003368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800336c:	4642      	mov	r2, r8
 800336e:	4653      	mov	r3, sl
 8003370:	4640      	mov	r0, r8
 8003372:	4651      	mov	r1, sl
 8003374:	f7fd fbe2 	bl	8000b3c <__aeabi_dcmpun>
 8003378:	b140      	cbz	r0, 800338c <_printf_float+0xe0>
 800337a:	f1ba 0f00 	cmp.w	sl, #0
 800337e:	bfbc      	itt	lt
 8003380:	232d      	movlt	r3, #45	; 0x2d
 8003382:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003386:	487e      	ldr	r0, [pc, #504]	; (8003580 <_printf_float+0x2d4>)
 8003388:	4b7e      	ldr	r3, [pc, #504]	; (8003584 <_printf_float+0x2d8>)
 800338a:	e7d4      	b.n	8003336 <_printf_float+0x8a>
 800338c:	6863      	ldr	r3, [r4, #4]
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003394:	d142      	bne.n	800341c <_printf_float+0x170>
 8003396:	2306      	movs	r3, #6
 8003398:	6063      	str	r3, [r4, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	9206      	str	r2, [sp, #24]
 800339e:	aa0e      	add	r2, sp, #56	; 0x38
 80033a0:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80033a4:	aa0d      	add	r2, sp, #52	; 0x34
 80033a6:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80033aa:	9203      	str	r2, [sp, #12]
 80033ac:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80033b0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80033b4:	6023      	str	r3, [r4, #0]
 80033b6:	6863      	ldr	r3, [r4, #4]
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	4642      	mov	r2, r8
 80033bc:	4653      	mov	r3, sl
 80033be:	4628      	mov	r0, r5
 80033c0:	910b      	str	r1, [sp, #44]	; 0x2c
 80033c2:	f7ff fed5 	bl	8003170 <__cvt>
 80033c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80033c8:	2947      	cmp	r1, #71	; 0x47
 80033ca:	4680      	mov	r8, r0
 80033cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80033ce:	d108      	bne.n	80033e2 <_printf_float+0x136>
 80033d0:	1cc8      	adds	r0, r1, #3
 80033d2:	db02      	blt.n	80033da <_printf_float+0x12e>
 80033d4:	6863      	ldr	r3, [r4, #4]
 80033d6:	4299      	cmp	r1, r3
 80033d8:	dd40      	ble.n	800345c <_printf_float+0x1b0>
 80033da:	f1a9 0902 	sub.w	r9, r9, #2
 80033de:	fa5f f989 	uxtb.w	r9, r9
 80033e2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80033e6:	d81f      	bhi.n	8003428 <_printf_float+0x17c>
 80033e8:	3901      	subs	r1, #1
 80033ea:	464a      	mov	r2, r9
 80033ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80033f0:	910d      	str	r1, [sp, #52]	; 0x34
 80033f2:	f7ff ff1d 	bl	8003230 <__exponent>
 80033f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033f8:	1813      	adds	r3, r2, r0
 80033fa:	2a01      	cmp	r2, #1
 80033fc:	4682      	mov	sl, r0
 80033fe:	6123      	str	r3, [r4, #16]
 8003400:	dc02      	bgt.n	8003408 <_printf_float+0x15c>
 8003402:	6822      	ldr	r2, [r4, #0]
 8003404:	07d2      	lsls	r2, r2, #31
 8003406:	d501      	bpl.n	800340c <_printf_float+0x160>
 8003408:	3301      	adds	r3, #1
 800340a:	6123      	str	r3, [r4, #16]
 800340c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003410:	2b00      	cmp	r3, #0
 8003412:	d09c      	beq.n	800334e <_printf_float+0xa2>
 8003414:	232d      	movs	r3, #45	; 0x2d
 8003416:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800341a:	e798      	b.n	800334e <_printf_float+0xa2>
 800341c:	2947      	cmp	r1, #71	; 0x47
 800341e:	d1bc      	bne.n	800339a <_printf_float+0xee>
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1ba      	bne.n	800339a <_printf_float+0xee>
 8003424:	2301      	movs	r3, #1
 8003426:	e7b7      	b.n	8003398 <_printf_float+0xec>
 8003428:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800342c:	d118      	bne.n	8003460 <_printf_float+0x1b4>
 800342e:	2900      	cmp	r1, #0
 8003430:	6863      	ldr	r3, [r4, #4]
 8003432:	dd0b      	ble.n	800344c <_printf_float+0x1a0>
 8003434:	6121      	str	r1, [r4, #16]
 8003436:	b913      	cbnz	r3, 800343e <_printf_float+0x192>
 8003438:	6822      	ldr	r2, [r4, #0]
 800343a:	07d0      	lsls	r0, r2, #31
 800343c:	d502      	bpl.n	8003444 <_printf_float+0x198>
 800343e:	3301      	adds	r3, #1
 8003440:	440b      	add	r3, r1
 8003442:	6123      	str	r3, [r4, #16]
 8003444:	65a1      	str	r1, [r4, #88]	; 0x58
 8003446:	f04f 0a00 	mov.w	sl, #0
 800344a:	e7df      	b.n	800340c <_printf_float+0x160>
 800344c:	b913      	cbnz	r3, 8003454 <_printf_float+0x1a8>
 800344e:	6822      	ldr	r2, [r4, #0]
 8003450:	07d2      	lsls	r2, r2, #31
 8003452:	d501      	bpl.n	8003458 <_printf_float+0x1ac>
 8003454:	3302      	adds	r3, #2
 8003456:	e7f4      	b.n	8003442 <_printf_float+0x196>
 8003458:	2301      	movs	r3, #1
 800345a:	e7f2      	b.n	8003442 <_printf_float+0x196>
 800345c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003460:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003462:	4299      	cmp	r1, r3
 8003464:	db05      	blt.n	8003472 <_printf_float+0x1c6>
 8003466:	6823      	ldr	r3, [r4, #0]
 8003468:	6121      	str	r1, [r4, #16]
 800346a:	07d8      	lsls	r0, r3, #31
 800346c:	d5ea      	bpl.n	8003444 <_printf_float+0x198>
 800346e:	1c4b      	adds	r3, r1, #1
 8003470:	e7e7      	b.n	8003442 <_printf_float+0x196>
 8003472:	2900      	cmp	r1, #0
 8003474:	bfd4      	ite	le
 8003476:	f1c1 0202 	rsble	r2, r1, #2
 800347a:	2201      	movgt	r2, #1
 800347c:	4413      	add	r3, r2
 800347e:	e7e0      	b.n	8003442 <_printf_float+0x196>
 8003480:	6823      	ldr	r3, [r4, #0]
 8003482:	055a      	lsls	r2, r3, #21
 8003484:	d407      	bmi.n	8003496 <_printf_float+0x1ea>
 8003486:	6923      	ldr	r3, [r4, #16]
 8003488:	4642      	mov	r2, r8
 800348a:	4631      	mov	r1, r6
 800348c:	4628      	mov	r0, r5
 800348e:	47b8      	blx	r7
 8003490:	3001      	adds	r0, #1
 8003492:	d12b      	bne.n	80034ec <_printf_float+0x240>
 8003494:	e765      	b.n	8003362 <_printf_float+0xb6>
 8003496:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800349a:	f240 80dc 	bls.w	8003656 <_printf_float+0x3aa>
 800349e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80034a2:	2200      	movs	r2, #0
 80034a4:	2300      	movs	r3, #0
 80034a6:	f7fd fb17 	bl	8000ad8 <__aeabi_dcmpeq>
 80034aa:	2800      	cmp	r0, #0
 80034ac:	d033      	beq.n	8003516 <_printf_float+0x26a>
 80034ae:	4a36      	ldr	r2, [pc, #216]	; (8003588 <_printf_float+0x2dc>)
 80034b0:	2301      	movs	r3, #1
 80034b2:	4631      	mov	r1, r6
 80034b4:	4628      	mov	r0, r5
 80034b6:	47b8      	blx	r7
 80034b8:	3001      	adds	r0, #1
 80034ba:	f43f af52 	beq.w	8003362 <_printf_float+0xb6>
 80034be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80034c2:	429a      	cmp	r2, r3
 80034c4:	db02      	blt.n	80034cc <_printf_float+0x220>
 80034c6:	6823      	ldr	r3, [r4, #0]
 80034c8:	07d8      	lsls	r0, r3, #31
 80034ca:	d50f      	bpl.n	80034ec <_printf_float+0x240>
 80034cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034d0:	4631      	mov	r1, r6
 80034d2:	4628      	mov	r0, r5
 80034d4:	47b8      	blx	r7
 80034d6:	3001      	adds	r0, #1
 80034d8:	f43f af43 	beq.w	8003362 <_printf_float+0xb6>
 80034dc:	f04f 0800 	mov.w	r8, #0
 80034e0:	f104 091a 	add.w	r9, r4, #26
 80034e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034e6:	3b01      	subs	r3, #1
 80034e8:	4543      	cmp	r3, r8
 80034ea:	dc09      	bgt.n	8003500 <_printf_float+0x254>
 80034ec:	6823      	ldr	r3, [r4, #0]
 80034ee:	079b      	lsls	r3, r3, #30
 80034f0:	f100 8101 	bmi.w	80036f6 <_printf_float+0x44a>
 80034f4:	68e0      	ldr	r0, [r4, #12]
 80034f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80034f8:	4298      	cmp	r0, r3
 80034fa:	bfb8      	it	lt
 80034fc:	4618      	movlt	r0, r3
 80034fe:	e732      	b.n	8003366 <_printf_float+0xba>
 8003500:	2301      	movs	r3, #1
 8003502:	464a      	mov	r2, r9
 8003504:	4631      	mov	r1, r6
 8003506:	4628      	mov	r0, r5
 8003508:	47b8      	blx	r7
 800350a:	3001      	adds	r0, #1
 800350c:	f43f af29 	beq.w	8003362 <_printf_float+0xb6>
 8003510:	f108 0801 	add.w	r8, r8, #1
 8003514:	e7e6      	b.n	80034e4 <_printf_float+0x238>
 8003516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003518:	2b00      	cmp	r3, #0
 800351a:	dc37      	bgt.n	800358c <_printf_float+0x2e0>
 800351c:	4a1a      	ldr	r2, [pc, #104]	; (8003588 <_printf_float+0x2dc>)
 800351e:	2301      	movs	r3, #1
 8003520:	4631      	mov	r1, r6
 8003522:	4628      	mov	r0, r5
 8003524:	47b8      	blx	r7
 8003526:	3001      	adds	r0, #1
 8003528:	f43f af1b 	beq.w	8003362 <_printf_float+0xb6>
 800352c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003530:	4313      	orrs	r3, r2
 8003532:	d102      	bne.n	800353a <_printf_float+0x28e>
 8003534:	6823      	ldr	r3, [r4, #0]
 8003536:	07d9      	lsls	r1, r3, #31
 8003538:	d5d8      	bpl.n	80034ec <_printf_float+0x240>
 800353a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800353e:	4631      	mov	r1, r6
 8003540:	4628      	mov	r0, r5
 8003542:	47b8      	blx	r7
 8003544:	3001      	adds	r0, #1
 8003546:	f43f af0c 	beq.w	8003362 <_printf_float+0xb6>
 800354a:	f04f 0900 	mov.w	r9, #0
 800354e:	f104 0a1a 	add.w	sl, r4, #26
 8003552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003554:	425b      	negs	r3, r3
 8003556:	454b      	cmp	r3, r9
 8003558:	dc01      	bgt.n	800355e <_printf_float+0x2b2>
 800355a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800355c:	e794      	b.n	8003488 <_printf_float+0x1dc>
 800355e:	2301      	movs	r3, #1
 8003560:	4652      	mov	r2, sl
 8003562:	4631      	mov	r1, r6
 8003564:	4628      	mov	r0, r5
 8003566:	47b8      	blx	r7
 8003568:	3001      	adds	r0, #1
 800356a:	f43f aefa 	beq.w	8003362 <_printf_float+0xb6>
 800356e:	f109 0901 	add.w	r9, r9, #1
 8003572:	e7ee      	b.n	8003552 <_printf_float+0x2a6>
 8003574:	7fefffff 	.word	0x7fefffff
 8003578:	08007b24 	.word	0x08007b24
 800357c:	08007b28 	.word	0x08007b28
 8003580:	08007b30 	.word	0x08007b30
 8003584:	08007b2c 	.word	0x08007b2c
 8003588:	08007b34 	.word	0x08007b34
 800358c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800358e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003590:	429a      	cmp	r2, r3
 8003592:	bfa8      	it	ge
 8003594:	461a      	movge	r2, r3
 8003596:	2a00      	cmp	r2, #0
 8003598:	4691      	mov	r9, r2
 800359a:	dc37      	bgt.n	800360c <_printf_float+0x360>
 800359c:	f04f 0b00 	mov.w	fp, #0
 80035a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80035a4:	f104 021a 	add.w	r2, r4, #26
 80035a8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80035ac:	ebaa 0309 	sub.w	r3, sl, r9
 80035b0:	455b      	cmp	r3, fp
 80035b2:	dc33      	bgt.n	800361c <_printf_float+0x370>
 80035b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035b8:	429a      	cmp	r2, r3
 80035ba:	db3b      	blt.n	8003634 <_printf_float+0x388>
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	07da      	lsls	r2, r3, #31
 80035c0:	d438      	bmi.n	8003634 <_printf_float+0x388>
 80035c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80035c6:	eba3 020a 	sub.w	r2, r3, sl
 80035ca:	eba3 0901 	sub.w	r9, r3, r1
 80035ce:	4591      	cmp	r9, r2
 80035d0:	bfa8      	it	ge
 80035d2:	4691      	movge	r9, r2
 80035d4:	f1b9 0f00 	cmp.w	r9, #0
 80035d8:	dc34      	bgt.n	8003644 <_printf_float+0x398>
 80035da:	f04f 0800 	mov.w	r8, #0
 80035de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80035e2:	f104 0a1a 	add.w	sl, r4, #26
 80035e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035ea:	1a9b      	subs	r3, r3, r2
 80035ec:	eba3 0309 	sub.w	r3, r3, r9
 80035f0:	4543      	cmp	r3, r8
 80035f2:	f77f af7b 	ble.w	80034ec <_printf_float+0x240>
 80035f6:	2301      	movs	r3, #1
 80035f8:	4652      	mov	r2, sl
 80035fa:	4631      	mov	r1, r6
 80035fc:	4628      	mov	r0, r5
 80035fe:	47b8      	blx	r7
 8003600:	3001      	adds	r0, #1
 8003602:	f43f aeae 	beq.w	8003362 <_printf_float+0xb6>
 8003606:	f108 0801 	add.w	r8, r8, #1
 800360a:	e7ec      	b.n	80035e6 <_printf_float+0x33a>
 800360c:	4613      	mov	r3, r2
 800360e:	4631      	mov	r1, r6
 8003610:	4642      	mov	r2, r8
 8003612:	4628      	mov	r0, r5
 8003614:	47b8      	blx	r7
 8003616:	3001      	adds	r0, #1
 8003618:	d1c0      	bne.n	800359c <_printf_float+0x2f0>
 800361a:	e6a2      	b.n	8003362 <_printf_float+0xb6>
 800361c:	2301      	movs	r3, #1
 800361e:	4631      	mov	r1, r6
 8003620:	4628      	mov	r0, r5
 8003622:	920b      	str	r2, [sp, #44]	; 0x2c
 8003624:	47b8      	blx	r7
 8003626:	3001      	adds	r0, #1
 8003628:	f43f ae9b 	beq.w	8003362 <_printf_float+0xb6>
 800362c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800362e:	f10b 0b01 	add.w	fp, fp, #1
 8003632:	e7b9      	b.n	80035a8 <_printf_float+0x2fc>
 8003634:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003638:	4631      	mov	r1, r6
 800363a:	4628      	mov	r0, r5
 800363c:	47b8      	blx	r7
 800363e:	3001      	adds	r0, #1
 8003640:	d1bf      	bne.n	80035c2 <_printf_float+0x316>
 8003642:	e68e      	b.n	8003362 <_printf_float+0xb6>
 8003644:	464b      	mov	r3, r9
 8003646:	eb08 020a 	add.w	r2, r8, sl
 800364a:	4631      	mov	r1, r6
 800364c:	4628      	mov	r0, r5
 800364e:	47b8      	blx	r7
 8003650:	3001      	adds	r0, #1
 8003652:	d1c2      	bne.n	80035da <_printf_float+0x32e>
 8003654:	e685      	b.n	8003362 <_printf_float+0xb6>
 8003656:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003658:	2a01      	cmp	r2, #1
 800365a:	dc01      	bgt.n	8003660 <_printf_float+0x3b4>
 800365c:	07db      	lsls	r3, r3, #31
 800365e:	d537      	bpl.n	80036d0 <_printf_float+0x424>
 8003660:	2301      	movs	r3, #1
 8003662:	4642      	mov	r2, r8
 8003664:	4631      	mov	r1, r6
 8003666:	4628      	mov	r0, r5
 8003668:	47b8      	blx	r7
 800366a:	3001      	adds	r0, #1
 800366c:	f43f ae79 	beq.w	8003362 <_printf_float+0xb6>
 8003670:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003674:	4631      	mov	r1, r6
 8003676:	4628      	mov	r0, r5
 8003678:	47b8      	blx	r7
 800367a:	3001      	adds	r0, #1
 800367c:	f43f ae71 	beq.w	8003362 <_printf_float+0xb6>
 8003680:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003684:	2200      	movs	r2, #0
 8003686:	2300      	movs	r3, #0
 8003688:	f7fd fa26 	bl	8000ad8 <__aeabi_dcmpeq>
 800368c:	b9d8      	cbnz	r0, 80036c6 <_printf_float+0x41a>
 800368e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003690:	f108 0201 	add.w	r2, r8, #1
 8003694:	3b01      	subs	r3, #1
 8003696:	4631      	mov	r1, r6
 8003698:	4628      	mov	r0, r5
 800369a:	47b8      	blx	r7
 800369c:	3001      	adds	r0, #1
 800369e:	d10e      	bne.n	80036be <_printf_float+0x412>
 80036a0:	e65f      	b.n	8003362 <_printf_float+0xb6>
 80036a2:	2301      	movs	r3, #1
 80036a4:	464a      	mov	r2, r9
 80036a6:	4631      	mov	r1, r6
 80036a8:	4628      	mov	r0, r5
 80036aa:	47b8      	blx	r7
 80036ac:	3001      	adds	r0, #1
 80036ae:	f43f ae58 	beq.w	8003362 <_printf_float+0xb6>
 80036b2:	f108 0801 	add.w	r8, r8, #1
 80036b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036b8:	3b01      	subs	r3, #1
 80036ba:	4543      	cmp	r3, r8
 80036bc:	dcf1      	bgt.n	80036a2 <_printf_float+0x3f6>
 80036be:	4653      	mov	r3, sl
 80036c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80036c4:	e6e1      	b.n	800348a <_printf_float+0x1de>
 80036c6:	f04f 0800 	mov.w	r8, #0
 80036ca:	f104 091a 	add.w	r9, r4, #26
 80036ce:	e7f2      	b.n	80036b6 <_printf_float+0x40a>
 80036d0:	2301      	movs	r3, #1
 80036d2:	4642      	mov	r2, r8
 80036d4:	e7df      	b.n	8003696 <_printf_float+0x3ea>
 80036d6:	2301      	movs	r3, #1
 80036d8:	464a      	mov	r2, r9
 80036da:	4631      	mov	r1, r6
 80036dc:	4628      	mov	r0, r5
 80036de:	47b8      	blx	r7
 80036e0:	3001      	adds	r0, #1
 80036e2:	f43f ae3e 	beq.w	8003362 <_printf_float+0xb6>
 80036e6:	f108 0801 	add.w	r8, r8, #1
 80036ea:	68e3      	ldr	r3, [r4, #12]
 80036ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80036ee:	1a5b      	subs	r3, r3, r1
 80036f0:	4543      	cmp	r3, r8
 80036f2:	dcf0      	bgt.n	80036d6 <_printf_float+0x42a>
 80036f4:	e6fe      	b.n	80034f4 <_printf_float+0x248>
 80036f6:	f04f 0800 	mov.w	r8, #0
 80036fa:	f104 0919 	add.w	r9, r4, #25
 80036fe:	e7f4      	b.n	80036ea <_printf_float+0x43e>

08003700 <_printf_common>:
 8003700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003704:	4616      	mov	r6, r2
 8003706:	4699      	mov	r9, r3
 8003708:	688a      	ldr	r2, [r1, #8]
 800370a:	690b      	ldr	r3, [r1, #16]
 800370c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003710:	4293      	cmp	r3, r2
 8003712:	bfb8      	it	lt
 8003714:	4613      	movlt	r3, r2
 8003716:	6033      	str	r3, [r6, #0]
 8003718:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800371c:	4607      	mov	r7, r0
 800371e:	460c      	mov	r4, r1
 8003720:	b10a      	cbz	r2, 8003726 <_printf_common+0x26>
 8003722:	3301      	adds	r3, #1
 8003724:	6033      	str	r3, [r6, #0]
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	0699      	lsls	r1, r3, #26
 800372a:	bf42      	ittt	mi
 800372c:	6833      	ldrmi	r3, [r6, #0]
 800372e:	3302      	addmi	r3, #2
 8003730:	6033      	strmi	r3, [r6, #0]
 8003732:	6825      	ldr	r5, [r4, #0]
 8003734:	f015 0506 	ands.w	r5, r5, #6
 8003738:	d106      	bne.n	8003748 <_printf_common+0x48>
 800373a:	f104 0a19 	add.w	sl, r4, #25
 800373e:	68e3      	ldr	r3, [r4, #12]
 8003740:	6832      	ldr	r2, [r6, #0]
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	42ab      	cmp	r3, r5
 8003746:	dc26      	bgt.n	8003796 <_printf_common+0x96>
 8003748:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800374c:	1e13      	subs	r3, r2, #0
 800374e:	6822      	ldr	r2, [r4, #0]
 8003750:	bf18      	it	ne
 8003752:	2301      	movne	r3, #1
 8003754:	0692      	lsls	r2, r2, #26
 8003756:	d42b      	bmi.n	80037b0 <_printf_common+0xb0>
 8003758:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800375c:	4649      	mov	r1, r9
 800375e:	4638      	mov	r0, r7
 8003760:	47c0      	blx	r8
 8003762:	3001      	adds	r0, #1
 8003764:	d01e      	beq.n	80037a4 <_printf_common+0xa4>
 8003766:	6823      	ldr	r3, [r4, #0]
 8003768:	68e5      	ldr	r5, [r4, #12]
 800376a:	6832      	ldr	r2, [r6, #0]
 800376c:	f003 0306 	and.w	r3, r3, #6
 8003770:	2b04      	cmp	r3, #4
 8003772:	bf08      	it	eq
 8003774:	1aad      	subeq	r5, r5, r2
 8003776:	68a3      	ldr	r3, [r4, #8]
 8003778:	6922      	ldr	r2, [r4, #16]
 800377a:	bf0c      	ite	eq
 800377c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003780:	2500      	movne	r5, #0
 8003782:	4293      	cmp	r3, r2
 8003784:	bfc4      	itt	gt
 8003786:	1a9b      	subgt	r3, r3, r2
 8003788:	18ed      	addgt	r5, r5, r3
 800378a:	2600      	movs	r6, #0
 800378c:	341a      	adds	r4, #26
 800378e:	42b5      	cmp	r5, r6
 8003790:	d11a      	bne.n	80037c8 <_printf_common+0xc8>
 8003792:	2000      	movs	r0, #0
 8003794:	e008      	b.n	80037a8 <_printf_common+0xa8>
 8003796:	2301      	movs	r3, #1
 8003798:	4652      	mov	r2, sl
 800379a:	4649      	mov	r1, r9
 800379c:	4638      	mov	r0, r7
 800379e:	47c0      	blx	r8
 80037a0:	3001      	adds	r0, #1
 80037a2:	d103      	bne.n	80037ac <_printf_common+0xac>
 80037a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ac:	3501      	adds	r5, #1
 80037ae:	e7c6      	b.n	800373e <_printf_common+0x3e>
 80037b0:	18e1      	adds	r1, r4, r3
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	2030      	movs	r0, #48	; 0x30
 80037b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037ba:	4422      	add	r2, r4
 80037bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037c4:	3302      	adds	r3, #2
 80037c6:	e7c7      	b.n	8003758 <_printf_common+0x58>
 80037c8:	2301      	movs	r3, #1
 80037ca:	4622      	mov	r2, r4
 80037cc:	4649      	mov	r1, r9
 80037ce:	4638      	mov	r0, r7
 80037d0:	47c0      	blx	r8
 80037d2:	3001      	adds	r0, #1
 80037d4:	d0e6      	beq.n	80037a4 <_printf_common+0xa4>
 80037d6:	3601      	adds	r6, #1
 80037d8:	e7d9      	b.n	800378e <_printf_common+0x8e>
	...

080037dc <_printf_i>:
 80037dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037e0:	7e0f      	ldrb	r7, [r1, #24]
 80037e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80037e4:	2f78      	cmp	r7, #120	; 0x78
 80037e6:	4691      	mov	r9, r2
 80037e8:	4680      	mov	r8, r0
 80037ea:	460c      	mov	r4, r1
 80037ec:	469a      	mov	sl, r3
 80037ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80037f2:	d807      	bhi.n	8003804 <_printf_i+0x28>
 80037f4:	2f62      	cmp	r7, #98	; 0x62
 80037f6:	d80a      	bhi.n	800380e <_printf_i+0x32>
 80037f8:	2f00      	cmp	r7, #0
 80037fa:	f000 80d8 	beq.w	80039ae <_printf_i+0x1d2>
 80037fe:	2f58      	cmp	r7, #88	; 0x58
 8003800:	f000 80a3 	beq.w	800394a <_printf_i+0x16e>
 8003804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003808:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800380c:	e03a      	b.n	8003884 <_printf_i+0xa8>
 800380e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003812:	2b15      	cmp	r3, #21
 8003814:	d8f6      	bhi.n	8003804 <_printf_i+0x28>
 8003816:	a101      	add	r1, pc, #4	; (adr r1, 800381c <_printf_i+0x40>)
 8003818:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800381c:	08003875 	.word	0x08003875
 8003820:	08003889 	.word	0x08003889
 8003824:	08003805 	.word	0x08003805
 8003828:	08003805 	.word	0x08003805
 800382c:	08003805 	.word	0x08003805
 8003830:	08003805 	.word	0x08003805
 8003834:	08003889 	.word	0x08003889
 8003838:	08003805 	.word	0x08003805
 800383c:	08003805 	.word	0x08003805
 8003840:	08003805 	.word	0x08003805
 8003844:	08003805 	.word	0x08003805
 8003848:	08003995 	.word	0x08003995
 800384c:	080038b9 	.word	0x080038b9
 8003850:	08003977 	.word	0x08003977
 8003854:	08003805 	.word	0x08003805
 8003858:	08003805 	.word	0x08003805
 800385c:	080039b7 	.word	0x080039b7
 8003860:	08003805 	.word	0x08003805
 8003864:	080038b9 	.word	0x080038b9
 8003868:	08003805 	.word	0x08003805
 800386c:	08003805 	.word	0x08003805
 8003870:	0800397f 	.word	0x0800397f
 8003874:	682b      	ldr	r3, [r5, #0]
 8003876:	1d1a      	adds	r2, r3, #4
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	602a      	str	r2, [r5, #0]
 800387c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003880:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003884:	2301      	movs	r3, #1
 8003886:	e0a3      	b.n	80039d0 <_printf_i+0x1f4>
 8003888:	6820      	ldr	r0, [r4, #0]
 800388a:	6829      	ldr	r1, [r5, #0]
 800388c:	0606      	lsls	r6, r0, #24
 800388e:	f101 0304 	add.w	r3, r1, #4
 8003892:	d50a      	bpl.n	80038aa <_printf_i+0xce>
 8003894:	680e      	ldr	r6, [r1, #0]
 8003896:	602b      	str	r3, [r5, #0]
 8003898:	2e00      	cmp	r6, #0
 800389a:	da03      	bge.n	80038a4 <_printf_i+0xc8>
 800389c:	232d      	movs	r3, #45	; 0x2d
 800389e:	4276      	negs	r6, r6
 80038a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038a4:	485e      	ldr	r0, [pc, #376]	; (8003a20 <_printf_i+0x244>)
 80038a6:	230a      	movs	r3, #10
 80038a8:	e019      	b.n	80038de <_printf_i+0x102>
 80038aa:	680e      	ldr	r6, [r1, #0]
 80038ac:	602b      	str	r3, [r5, #0]
 80038ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038b2:	bf18      	it	ne
 80038b4:	b236      	sxthne	r6, r6
 80038b6:	e7ef      	b.n	8003898 <_printf_i+0xbc>
 80038b8:	682b      	ldr	r3, [r5, #0]
 80038ba:	6820      	ldr	r0, [r4, #0]
 80038bc:	1d19      	adds	r1, r3, #4
 80038be:	6029      	str	r1, [r5, #0]
 80038c0:	0601      	lsls	r1, r0, #24
 80038c2:	d501      	bpl.n	80038c8 <_printf_i+0xec>
 80038c4:	681e      	ldr	r6, [r3, #0]
 80038c6:	e002      	b.n	80038ce <_printf_i+0xf2>
 80038c8:	0646      	lsls	r6, r0, #25
 80038ca:	d5fb      	bpl.n	80038c4 <_printf_i+0xe8>
 80038cc:	881e      	ldrh	r6, [r3, #0]
 80038ce:	4854      	ldr	r0, [pc, #336]	; (8003a20 <_printf_i+0x244>)
 80038d0:	2f6f      	cmp	r7, #111	; 0x6f
 80038d2:	bf0c      	ite	eq
 80038d4:	2308      	moveq	r3, #8
 80038d6:	230a      	movne	r3, #10
 80038d8:	2100      	movs	r1, #0
 80038da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038de:	6865      	ldr	r5, [r4, #4]
 80038e0:	60a5      	str	r5, [r4, #8]
 80038e2:	2d00      	cmp	r5, #0
 80038e4:	bfa2      	ittt	ge
 80038e6:	6821      	ldrge	r1, [r4, #0]
 80038e8:	f021 0104 	bicge.w	r1, r1, #4
 80038ec:	6021      	strge	r1, [r4, #0]
 80038ee:	b90e      	cbnz	r6, 80038f4 <_printf_i+0x118>
 80038f0:	2d00      	cmp	r5, #0
 80038f2:	d04d      	beq.n	8003990 <_printf_i+0x1b4>
 80038f4:	4615      	mov	r5, r2
 80038f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80038fa:	fb03 6711 	mls	r7, r3, r1, r6
 80038fe:	5dc7      	ldrb	r7, [r0, r7]
 8003900:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003904:	4637      	mov	r7, r6
 8003906:	42bb      	cmp	r3, r7
 8003908:	460e      	mov	r6, r1
 800390a:	d9f4      	bls.n	80038f6 <_printf_i+0x11a>
 800390c:	2b08      	cmp	r3, #8
 800390e:	d10b      	bne.n	8003928 <_printf_i+0x14c>
 8003910:	6823      	ldr	r3, [r4, #0]
 8003912:	07de      	lsls	r6, r3, #31
 8003914:	d508      	bpl.n	8003928 <_printf_i+0x14c>
 8003916:	6923      	ldr	r3, [r4, #16]
 8003918:	6861      	ldr	r1, [r4, #4]
 800391a:	4299      	cmp	r1, r3
 800391c:	bfde      	ittt	le
 800391e:	2330      	movle	r3, #48	; 0x30
 8003920:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003924:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003928:	1b52      	subs	r2, r2, r5
 800392a:	6122      	str	r2, [r4, #16]
 800392c:	f8cd a000 	str.w	sl, [sp]
 8003930:	464b      	mov	r3, r9
 8003932:	aa03      	add	r2, sp, #12
 8003934:	4621      	mov	r1, r4
 8003936:	4640      	mov	r0, r8
 8003938:	f7ff fee2 	bl	8003700 <_printf_common>
 800393c:	3001      	adds	r0, #1
 800393e:	d14c      	bne.n	80039da <_printf_i+0x1fe>
 8003940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003944:	b004      	add	sp, #16
 8003946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800394a:	4835      	ldr	r0, [pc, #212]	; (8003a20 <_printf_i+0x244>)
 800394c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003950:	6829      	ldr	r1, [r5, #0]
 8003952:	6823      	ldr	r3, [r4, #0]
 8003954:	f851 6b04 	ldr.w	r6, [r1], #4
 8003958:	6029      	str	r1, [r5, #0]
 800395a:	061d      	lsls	r5, r3, #24
 800395c:	d514      	bpl.n	8003988 <_printf_i+0x1ac>
 800395e:	07df      	lsls	r7, r3, #31
 8003960:	bf44      	itt	mi
 8003962:	f043 0320 	orrmi.w	r3, r3, #32
 8003966:	6023      	strmi	r3, [r4, #0]
 8003968:	b91e      	cbnz	r6, 8003972 <_printf_i+0x196>
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	f023 0320 	bic.w	r3, r3, #32
 8003970:	6023      	str	r3, [r4, #0]
 8003972:	2310      	movs	r3, #16
 8003974:	e7b0      	b.n	80038d8 <_printf_i+0xfc>
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	f043 0320 	orr.w	r3, r3, #32
 800397c:	6023      	str	r3, [r4, #0]
 800397e:	2378      	movs	r3, #120	; 0x78
 8003980:	4828      	ldr	r0, [pc, #160]	; (8003a24 <_printf_i+0x248>)
 8003982:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003986:	e7e3      	b.n	8003950 <_printf_i+0x174>
 8003988:	0659      	lsls	r1, r3, #25
 800398a:	bf48      	it	mi
 800398c:	b2b6      	uxthmi	r6, r6
 800398e:	e7e6      	b.n	800395e <_printf_i+0x182>
 8003990:	4615      	mov	r5, r2
 8003992:	e7bb      	b.n	800390c <_printf_i+0x130>
 8003994:	682b      	ldr	r3, [r5, #0]
 8003996:	6826      	ldr	r6, [r4, #0]
 8003998:	6961      	ldr	r1, [r4, #20]
 800399a:	1d18      	adds	r0, r3, #4
 800399c:	6028      	str	r0, [r5, #0]
 800399e:	0635      	lsls	r5, r6, #24
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	d501      	bpl.n	80039a8 <_printf_i+0x1cc>
 80039a4:	6019      	str	r1, [r3, #0]
 80039a6:	e002      	b.n	80039ae <_printf_i+0x1d2>
 80039a8:	0670      	lsls	r0, r6, #25
 80039aa:	d5fb      	bpl.n	80039a4 <_printf_i+0x1c8>
 80039ac:	8019      	strh	r1, [r3, #0]
 80039ae:	2300      	movs	r3, #0
 80039b0:	6123      	str	r3, [r4, #16]
 80039b2:	4615      	mov	r5, r2
 80039b4:	e7ba      	b.n	800392c <_printf_i+0x150>
 80039b6:	682b      	ldr	r3, [r5, #0]
 80039b8:	1d1a      	adds	r2, r3, #4
 80039ba:	602a      	str	r2, [r5, #0]
 80039bc:	681d      	ldr	r5, [r3, #0]
 80039be:	6862      	ldr	r2, [r4, #4]
 80039c0:	2100      	movs	r1, #0
 80039c2:	4628      	mov	r0, r5
 80039c4:	f7fc fc14 	bl	80001f0 <memchr>
 80039c8:	b108      	cbz	r0, 80039ce <_printf_i+0x1f2>
 80039ca:	1b40      	subs	r0, r0, r5
 80039cc:	6060      	str	r0, [r4, #4]
 80039ce:	6863      	ldr	r3, [r4, #4]
 80039d0:	6123      	str	r3, [r4, #16]
 80039d2:	2300      	movs	r3, #0
 80039d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039d8:	e7a8      	b.n	800392c <_printf_i+0x150>
 80039da:	6923      	ldr	r3, [r4, #16]
 80039dc:	462a      	mov	r2, r5
 80039de:	4649      	mov	r1, r9
 80039e0:	4640      	mov	r0, r8
 80039e2:	47d0      	blx	sl
 80039e4:	3001      	adds	r0, #1
 80039e6:	d0ab      	beq.n	8003940 <_printf_i+0x164>
 80039e8:	6823      	ldr	r3, [r4, #0]
 80039ea:	079b      	lsls	r3, r3, #30
 80039ec:	d413      	bmi.n	8003a16 <_printf_i+0x23a>
 80039ee:	68e0      	ldr	r0, [r4, #12]
 80039f0:	9b03      	ldr	r3, [sp, #12]
 80039f2:	4298      	cmp	r0, r3
 80039f4:	bfb8      	it	lt
 80039f6:	4618      	movlt	r0, r3
 80039f8:	e7a4      	b.n	8003944 <_printf_i+0x168>
 80039fa:	2301      	movs	r3, #1
 80039fc:	4632      	mov	r2, r6
 80039fe:	4649      	mov	r1, r9
 8003a00:	4640      	mov	r0, r8
 8003a02:	47d0      	blx	sl
 8003a04:	3001      	adds	r0, #1
 8003a06:	d09b      	beq.n	8003940 <_printf_i+0x164>
 8003a08:	3501      	adds	r5, #1
 8003a0a:	68e3      	ldr	r3, [r4, #12]
 8003a0c:	9903      	ldr	r1, [sp, #12]
 8003a0e:	1a5b      	subs	r3, r3, r1
 8003a10:	42ab      	cmp	r3, r5
 8003a12:	dcf2      	bgt.n	80039fa <_printf_i+0x21e>
 8003a14:	e7eb      	b.n	80039ee <_printf_i+0x212>
 8003a16:	2500      	movs	r5, #0
 8003a18:	f104 0619 	add.w	r6, r4, #25
 8003a1c:	e7f5      	b.n	8003a0a <_printf_i+0x22e>
 8003a1e:	bf00      	nop
 8003a20:	08007b36 	.word	0x08007b36
 8003a24:	08007b47 	.word	0x08007b47

08003a28 <_scanf_float>:
 8003a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a2c:	b087      	sub	sp, #28
 8003a2e:	4617      	mov	r7, r2
 8003a30:	9303      	str	r3, [sp, #12]
 8003a32:	688b      	ldr	r3, [r1, #8]
 8003a34:	1e5a      	subs	r2, r3, #1
 8003a36:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003a3a:	bf83      	ittte	hi
 8003a3c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003a40:	195b      	addhi	r3, r3, r5
 8003a42:	9302      	strhi	r3, [sp, #8]
 8003a44:	2300      	movls	r3, #0
 8003a46:	bf86      	itte	hi
 8003a48:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003a4c:	608b      	strhi	r3, [r1, #8]
 8003a4e:	9302      	strls	r3, [sp, #8]
 8003a50:	680b      	ldr	r3, [r1, #0]
 8003a52:	468b      	mov	fp, r1
 8003a54:	2500      	movs	r5, #0
 8003a56:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003a5a:	f84b 3b1c 	str.w	r3, [fp], #28
 8003a5e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003a62:	4680      	mov	r8, r0
 8003a64:	460c      	mov	r4, r1
 8003a66:	465e      	mov	r6, fp
 8003a68:	46aa      	mov	sl, r5
 8003a6a:	46a9      	mov	r9, r5
 8003a6c:	9501      	str	r5, [sp, #4]
 8003a6e:	68a2      	ldr	r2, [r4, #8]
 8003a70:	b152      	cbz	r2, 8003a88 <_scanf_float+0x60>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b4e      	cmp	r3, #78	; 0x4e
 8003a78:	d864      	bhi.n	8003b44 <_scanf_float+0x11c>
 8003a7a:	2b40      	cmp	r3, #64	; 0x40
 8003a7c:	d83c      	bhi.n	8003af8 <_scanf_float+0xd0>
 8003a7e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003a82:	b2c8      	uxtb	r0, r1
 8003a84:	280e      	cmp	r0, #14
 8003a86:	d93a      	bls.n	8003afe <_scanf_float+0xd6>
 8003a88:	f1b9 0f00 	cmp.w	r9, #0
 8003a8c:	d003      	beq.n	8003a96 <_scanf_float+0x6e>
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a94:	6023      	str	r3, [r4, #0]
 8003a96:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003a9a:	f1ba 0f01 	cmp.w	sl, #1
 8003a9e:	f200 8113 	bhi.w	8003cc8 <_scanf_float+0x2a0>
 8003aa2:	455e      	cmp	r6, fp
 8003aa4:	f200 8105 	bhi.w	8003cb2 <_scanf_float+0x28a>
 8003aa8:	2501      	movs	r5, #1
 8003aaa:	4628      	mov	r0, r5
 8003aac:	b007      	add	sp, #28
 8003aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ab2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003ab6:	2a0d      	cmp	r2, #13
 8003ab8:	d8e6      	bhi.n	8003a88 <_scanf_float+0x60>
 8003aba:	a101      	add	r1, pc, #4	; (adr r1, 8003ac0 <_scanf_float+0x98>)
 8003abc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003ac0:	08003bff 	.word	0x08003bff
 8003ac4:	08003a89 	.word	0x08003a89
 8003ac8:	08003a89 	.word	0x08003a89
 8003acc:	08003a89 	.word	0x08003a89
 8003ad0:	08003c5f 	.word	0x08003c5f
 8003ad4:	08003c37 	.word	0x08003c37
 8003ad8:	08003a89 	.word	0x08003a89
 8003adc:	08003a89 	.word	0x08003a89
 8003ae0:	08003c0d 	.word	0x08003c0d
 8003ae4:	08003a89 	.word	0x08003a89
 8003ae8:	08003a89 	.word	0x08003a89
 8003aec:	08003a89 	.word	0x08003a89
 8003af0:	08003a89 	.word	0x08003a89
 8003af4:	08003bc5 	.word	0x08003bc5
 8003af8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003afc:	e7db      	b.n	8003ab6 <_scanf_float+0x8e>
 8003afe:	290e      	cmp	r1, #14
 8003b00:	d8c2      	bhi.n	8003a88 <_scanf_float+0x60>
 8003b02:	a001      	add	r0, pc, #4	; (adr r0, 8003b08 <_scanf_float+0xe0>)
 8003b04:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003b08:	08003bb7 	.word	0x08003bb7
 8003b0c:	08003a89 	.word	0x08003a89
 8003b10:	08003bb7 	.word	0x08003bb7
 8003b14:	08003c4b 	.word	0x08003c4b
 8003b18:	08003a89 	.word	0x08003a89
 8003b1c:	08003b65 	.word	0x08003b65
 8003b20:	08003ba1 	.word	0x08003ba1
 8003b24:	08003ba1 	.word	0x08003ba1
 8003b28:	08003ba1 	.word	0x08003ba1
 8003b2c:	08003ba1 	.word	0x08003ba1
 8003b30:	08003ba1 	.word	0x08003ba1
 8003b34:	08003ba1 	.word	0x08003ba1
 8003b38:	08003ba1 	.word	0x08003ba1
 8003b3c:	08003ba1 	.word	0x08003ba1
 8003b40:	08003ba1 	.word	0x08003ba1
 8003b44:	2b6e      	cmp	r3, #110	; 0x6e
 8003b46:	d809      	bhi.n	8003b5c <_scanf_float+0x134>
 8003b48:	2b60      	cmp	r3, #96	; 0x60
 8003b4a:	d8b2      	bhi.n	8003ab2 <_scanf_float+0x8a>
 8003b4c:	2b54      	cmp	r3, #84	; 0x54
 8003b4e:	d077      	beq.n	8003c40 <_scanf_float+0x218>
 8003b50:	2b59      	cmp	r3, #89	; 0x59
 8003b52:	d199      	bne.n	8003a88 <_scanf_float+0x60>
 8003b54:	2d07      	cmp	r5, #7
 8003b56:	d197      	bne.n	8003a88 <_scanf_float+0x60>
 8003b58:	2508      	movs	r5, #8
 8003b5a:	e029      	b.n	8003bb0 <_scanf_float+0x188>
 8003b5c:	2b74      	cmp	r3, #116	; 0x74
 8003b5e:	d06f      	beq.n	8003c40 <_scanf_float+0x218>
 8003b60:	2b79      	cmp	r3, #121	; 0x79
 8003b62:	e7f6      	b.n	8003b52 <_scanf_float+0x12a>
 8003b64:	6821      	ldr	r1, [r4, #0]
 8003b66:	05c8      	lsls	r0, r1, #23
 8003b68:	d51a      	bpl.n	8003ba0 <_scanf_float+0x178>
 8003b6a:	9b02      	ldr	r3, [sp, #8]
 8003b6c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003b70:	6021      	str	r1, [r4, #0]
 8003b72:	f109 0901 	add.w	r9, r9, #1
 8003b76:	b11b      	cbz	r3, 8003b80 <_scanf_float+0x158>
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	3201      	adds	r2, #1
 8003b7c:	9302      	str	r3, [sp, #8]
 8003b7e:	60a2      	str	r2, [r4, #8]
 8003b80:	68a3      	ldr	r3, [r4, #8]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	60a3      	str	r3, [r4, #8]
 8003b86:	6923      	ldr	r3, [r4, #16]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	6123      	str	r3, [r4, #16]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	607b      	str	r3, [r7, #4]
 8003b94:	f340 8084 	ble.w	8003ca0 <_scanf_float+0x278>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	603b      	str	r3, [r7, #0]
 8003b9e:	e766      	b.n	8003a6e <_scanf_float+0x46>
 8003ba0:	eb1a 0f05 	cmn.w	sl, r5
 8003ba4:	f47f af70 	bne.w	8003a88 <_scanf_float+0x60>
 8003ba8:	6822      	ldr	r2, [r4, #0]
 8003baa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003bae:	6022      	str	r2, [r4, #0]
 8003bb0:	f806 3b01 	strb.w	r3, [r6], #1
 8003bb4:	e7e4      	b.n	8003b80 <_scanf_float+0x158>
 8003bb6:	6822      	ldr	r2, [r4, #0]
 8003bb8:	0610      	lsls	r0, r2, #24
 8003bba:	f57f af65 	bpl.w	8003a88 <_scanf_float+0x60>
 8003bbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bc2:	e7f4      	b.n	8003bae <_scanf_float+0x186>
 8003bc4:	f1ba 0f00 	cmp.w	sl, #0
 8003bc8:	d10e      	bne.n	8003be8 <_scanf_float+0x1c0>
 8003bca:	f1b9 0f00 	cmp.w	r9, #0
 8003bce:	d10e      	bne.n	8003bee <_scanf_float+0x1c6>
 8003bd0:	6822      	ldr	r2, [r4, #0]
 8003bd2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003bd6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003bda:	d108      	bne.n	8003bee <_scanf_float+0x1c6>
 8003bdc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003be0:	6022      	str	r2, [r4, #0]
 8003be2:	f04f 0a01 	mov.w	sl, #1
 8003be6:	e7e3      	b.n	8003bb0 <_scanf_float+0x188>
 8003be8:	f1ba 0f02 	cmp.w	sl, #2
 8003bec:	d055      	beq.n	8003c9a <_scanf_float+0x272>
 8003bee:	2d01      	cmp	r5, #1
 8003bf0:	d002      	beq.n	8003bf8 <_scanf_float+0x1d0>
 8003bf2:	2d04      	cmp	r5, #4
 8003bf4:	f47f af48 	bne.w	8003a88 <_scanf_float+0x60>
 8003bf8:	3501      	adds	r5, #1
 8003bfa:	b2ed      	uxtb	r5, r5
 8003bfc:	e7d8      	b.n	8003bb0 <_scanf_float+0x188>
 8003bfe:	f1ba 0f01 	cmp.w	sl, #1
 8003c02:	f47f af41 	bne.w	8003a88 <_scanf_float+0x60>
 8003c06:	f04f 0a02 	mov.w	sl, #2
 8003c0a:	e7d1      	b.n	8003bb0 <_scanf_float+0x188>
 8003c0c:	b97d      	cbnz	r5, 8003c2e <_scanf_float+0x206>
 8003c0e:	f1b9 0f00 	cmp.w	r9, #0
 8003c12:	f47f af3c 	bne.w	8003a8e <_scanf_float+0x66>
 8003c16:	6822      	ldr	r2, [r4, #0]
 8003c18:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003c1c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003c20:	f47f af39 	bne.w	8003a96 <_scanf_float+0x6e>
 8003c24:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003c28:	6022      	str	r2, [r4, #0]
 8003c2a:	2501      	movs	r5, #1
 8003c2c:	e7c0      	b.n	8003bb0 <_scanf_float+0x188>
 8003c2e:	2d03      	cmp	r5, #3
 8003c30:	d0e2      	beq.n	8003bf8 <_scanf_float+0x1d0>
 8003c32:	2d05      	cmp	r5, #5
 8003c34:	e7de      	b.n	8003bf4 <_scanf_float+0x1cc>
 8003c36:	2d02      	cmp	r5, #2
 8003c38:	f47f af26 	bne.w	8003a88 <_scanf_float+0x60>
 8003c3c:	2503      	movs	r5, #3
 8003c3e:	e7b7      	b.n	8003bb0 <_scanf_float+0x188>
 8003c40:	2d06      	cmp	r5, #6
 8003c42:	f47f af21 	bne.w	8003a88 <_scanf_float+0x60>
 8003c46:	2507      	movs	r5, #7
 8003c48:	e7b2      	b.n	8003bb0 <_scanf_float+0x188>
 8003c4a:	6822      	ldr	r2, [r4, #0]
 8003c4c:	0591      	lsls	r1, r2, #22
 8003c4e:	f57f af1b 	bpl.w	8003a88 <_scanf_float+0x60>
 8003c52:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003c56:	6022      	str	r2, [r4, #0]
 8003c58:	f8cd 9004 	str.w	r9, [sp, #4]
 8003c5c:	e7a8      	b.n	8003bb0 <_scanf_float+0x188>
 8003c5e:	6822      	ldr	r2, [r4, #0]
 8003c60:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003c64:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003c68:	d006      	beq.n	8003c78 <_scanf_float+0x250>
 8003c6a:	0550      	lsls	r0, r2, #21
 8003c6c:	f57f af0c 	bpl.w	8003a88 <_scanf_float+0x60>
 8003c70:	f1b9 0f00 	cmp.w	r9, #0
 8003c74:	f43f af0f 	beq.w	8003a96 <_scanf_float+0x6e>
 8003c78:	0591      	lsls	r1, r2, #22
 8003c7a:	bf58      	it	pl
 8003c7c:	9901      	ldrpl	r1, [sp, #4]
 8003c7e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003c82:	bf58      	it	pl
 8003c84:	eba9 0101 	subpl.w	r1, r9, r1
 8003c88:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003c8c:	bf58      	it	pl
 8003c8e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003c92:	6022      	str	r2, [r4, #0]
 8003c94:	f04f 0900 	mov.w	r9, #0
 8003c98:	e78a      	b.n	8003bb0 <_scanf_float+0x188>
 8003c9a:	f04f 0a03 	mov.w	sl, #3
 8003c9e:	e787      	b.n	8003bb0 <_scanf_float+0x188>
 8003ca0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003ca4:	4639      	mov	r1, r7
 8003ca6:	4640      	mov	r0, r8
 8003ca8:	4798      	blx	r3
 8003caa:	2800      	cmp	r0, #0
 8003cac:	f43f aedf 	beq.w	8003a6e <_scanf_float+0x46>
 8003cb0:	e6ea      	b.n	8003a88 <_scanf_float+0x60>
 8003cb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003cb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003cba:	463a      	mov	r2, r7
 8003cbc:	4640      	mov	r0, r8
 8003cbe:	4798      	blx	r3
 8003cc0:	6923      	ldr	r3, [r4, #16]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	6123      	str	r3, [r4, #16]
 8003cc6:	e6ec      	b.n	8003aa2 <_scanf_float+0x7a>
 8003cc8:	1e6b      	subs	r3, r5, #1
 8003cca:	2b06      	cmp	r3, #6
 8003ccc:	d825      	bhi.n	8003d1a <_scanf_float+0x2f2>
 8003cce:	2d02      	cmp	r5, #2
 8003cd0:	d836      	bhi.n	8003d40 <_scanf_float+0x318>
 8003cd2:	455e      	cmp	r6, fp
 8003cd4:	f67f aee8 	bls.w	8003aa8 <_scanf_float+0x80>
 8003cd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003cdc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003ce0:	463a      	mov	r2, r7
 8003ce2:	4640      	mov	r0, r8
 8003ce4:	4798      	blx	r3
 8003ce6:	6923      	ldr	r3, [r4, #16]
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	6123      	str	r3, [r4, #16]
 8003cec:	e7f1      	b.n	8003cd2 <_scanf_float+0x2aa>
 8003cee:	9802      	ldr	r0, [sp, #8]
 8003cf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003cf4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003cf8:	9002      	str	r0, [sp, #8]
 8003cfa:	463a      	mov	r2, r7
 8003cfc:	4640      	mov	r0, r8
 8003cfe:	4798      	blx	r3
 8003d00:	6923      	ldr	r3, [r4, #16]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	6123      	str	r3, [r4, #16]
 8003d06:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003d0a:	fa5f fa8a 	uxtb.w	sl, sl
 8003d0e:	f1ba 0f02 	cmp.w	sl, #2
 8003d12:	d1ec      	bne.n	8003cee <_scanf_float+0x2c6>
 8003d14:	3d03      	subs	r5, #3
 8003d16:	b2ed      	uxtb	r5, r5
 8003d18:	1b76      	subs	r6, r6, r5
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	05da      	lsls	r2, r3, #23
 8003d1e:	d52f      	bpl.n	8003d80 <_scanf_float+0x358>
 8003d20:	055b      	lsls	r3, r3, #21
 8003d22:	d510      	bpl.n	8003d46 <_scanf_float+0x31e>
 8003d24:	455e      	cmp	r6, fp
 8003d26:	f67f aebf 	bls.w	8003aa8 <_scanf_float+0x80>
 8003d2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003d32:	463a      	mov	r2, r7
 8003d34:	4640      	mov	r0, r8
 8003d36:	4798      	blx	r3
 8003d38:	6923      	ldr	r3, [r4, #16]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	6123      	str	r3, [r4, #16]
 8003d3e:	e7f1      	b.n	8003d24 <_scanf_float+0x2fc>
 8003d40:	46aa      	mov	sl, r5
 8003d42:	9602      	str	r6, [sp, #8]
 8003d44:	e7df      	b.n	8003d06 <_scanf_float+0x2de>
 8003d46:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003d4a:	6923      	ldr	r3, [r4, #16]
 8003d4c:	2965      	cmp	r1, #101	; 0x65
 8003d4e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003d52:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8003d56:	6123      	str	r3, [r4, #16]
 8003d58:	d00c      	beq.n	8003d74 <_scanf_float+0x34c>
 8003d5a:	2945      	cmp	r1, #69	; 0x45
 8003d5c:	d00a      	beq.n	8003d74 <_scanf_float+0x34c>
 8003d5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d62:	463a      	mov	r2, r7
 8003d64:	4640      	mov	r0, r8
 8003d66:	4798      	blx	r3
 8003d68:	6923      	ldr	r3, [r4, #16]
 8003d6a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	1eb5      	subs	r5, r6, #2
 8003d72:	6123      	str	r3, [r4, #16]
 8003d74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d78:	463a      	mov	r2, r7
 8003d7a:	4640      	mov	r0, r8
 8003d7c:	4798      	blx	r3
 8003d7e:	462e      	mov	r6, r5
 8003d80:	6825      	ldr	r5, [r4, #0]
 8003d82:	f015 0510 	ands.w	r5, r5, #16
 8003d86:	d155      	bne.n	8003e34 <_scanf_float+0x40c>
 8003d88:	7035      	strb	r5, [r6, #0]
 8003d8a:	6823      	ldr	r3, [r4, #0]
 8003d8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d94:	d11b      	bne.n	8003dce <_scanf_float+0x3a6>
 8003d96:	9b01      	ldr	r3, [sp, #4]
 8003d98:	454b      	cmp	r3, r9
 8003d9a:	eba3 0209 	sub.w	r2, r3, r9
 8003d9e:	d123      	bne.n	8003de8 <_scanf_float+0x3c0>
 8003da0:	2200      	movs	r2, #0
 8003da2:	4659      	mov	r1, fp
 8003da4:	4640      	mov	r0, r8
 8003da6:	f000 fe7b 	bl	8004aa0 <_strtod_r>
 8003daa:	6822      	ldr	r2, [r4, #0]
 8003dac:	9b03      	ldr	r3, [sp, #12]
 8003dae:	f012 0f02 	tst.w	r2, #2
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4606      	mov	r6, r0
 8003db6:	460f      	mov	r7, r1
 8003db8:	d021      	beq.n	8003dfe <_scanf_float+0x3d6>
 8003dba:	1d1a      	adds	r2, r3, #4
 8003dbc:	9903      	ldr	r1, [sp, #12]
 8003dbe:	600a      	str	r2, [r1, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	e9c3 6700 	strd	r6, r7, [r3]
 8003dc6:	68e3      	ldr	r3, [r4, #12]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	60e3      	str	r3, [r4, #12]
 8003dcc:	e66d      	b.n	8003aaa <_scanf_float+0x82>
 8003dce:	9b04      	ldr	r3, [sp, #16]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0e5      	beq.n	8003da0 <_scanf_float+0x378>
 8003dd4:	9905      	ldr	r1, [sp, #20]
 8003dd6:	230a      	movs	r3, #10
 8003dd8:	462a      	mov	r2, r5
 8003dda:	3101      	adds	r1, #1
 8003ddc:	4640      	mov	r0, r8
 8003dde:	f000 fee1 	bl	8004ba4 <_strtol_r>
 8003de2:	9b04      	ldr	r3, [sp, #16]
 8003de4:	9e05      	ldr	r6, [sp, #20]
 8003de6:	1ac2      	subs	r2, r0, r3
 8003de8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003dec:	429e      	cmp	r6, r3
 8003dee:	bf28      	it	cs
 8003df0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003df4:	4910      	ldr	r1, [pc, #64]	; (8003e38 <_scanf_float+0x410>)
 8003df6:	4630      	mov	r0, r6
 8003df8:	f000 f826 	bl	8003e48 <siprintf>
 8003dfc:	e7d0      	b.n	8003da0 <_scanf_float+0x378>
 8003dfe:	f012 0f04 	tst.w	r2, #4
 8003e02:	f103 0204 	add.w	r2, r3, #4
 8003e06:	d1d9      	bne.n	8003dbc <_scanf_float+0x394>
 8003e08:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003e0c:	f8cc 2000 	str.w	r2, [ip]
 8003e10:	f8d3 8000 	ldr.w	r8, [r3]
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	f7fc fe90 	bl	8000b3c <__aeabi_dcmpun>
 8003e1c:	b128      	cbz	r0, 8003e2a <_scanf_float+0x402>
 8003e1e:	4807      	ldr	r0, [pc, #28]	; (8003e3c <_scanf_float+0x414>)
 8003e20:	f000 f80e 	bl	8003e40 <nanf>
 8003e24:	f8c8 0000 	str.w	r0, [r8]
 8003e28:	e7cd      	b.n	8003dc6 <_scanf_float+0x39e>
 8003e2a:	4630      	mov	r0, r6
 8003e2c:	4639      	mov	r1, r7
 8003e2e:	f7fc fee3 	bl	8000bf8 <__aeabi_d2f>
 8003e32:	e7f7      	b.n	8003e24 <_scanf_float+0x3fc>
 8003e34:	2500      	movs	r5, #0
 8003e36:	e638      	b.n	8003aaa <_scanf_float+0x82>
 8003e38:	08007b58 	.word	0x08007b58
 8003e3c:	08007f60 	.word	0x08007f60

08003e40 <nanf>:
 8003e40:	4800      	ldr	r0, [pc, #0]	; (8003e44 <nanf+0x4>)
 8003e42:	4770      	bx	lr
 8003e44:	7fc00000 	.word	0x7fc00000

08003e48 <siprintf>:
 8003e48:	b40e      	push	{r1, r2, r3}
 8003e4a:	b500      	push	{lr}
 8003e4c:	b09c      	sub	sp, #112	; 0x70
 8003e4e:	ab1d      	add	r3, sp, #116	; 0x74
 8003e50:	9002      	str	r0, [sp, #8]
 8003e52:	9006      	str	r0, [sp, #24]
 8003e54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e58:	4809      	ldr	r0, [pc, #36]	; (8003e80 <siprintf+0x38>)
 8003e5a:	9107      	str	r1, [sp, #28]
 8003e5c:	9104      	str	r1, [sp, #16]
 8003e5e:	4909      	ldr	r1, [pc, #36]	; (8003e84 <siprintf+0x3c>)
 8003e60:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e64:	9105      	str	r1, [sp, #20]
 8003e66:	6800      	ldr	r0, [r0, #0]
 8003e68:	9301      	str	r3, [sp, #4]
 8003e6a:	a902      	add	r1, sp, #8
 8003e6c:	f002 feac 	bl	8006bc8 <_svfiprintf_r>
 8003e70:	9b02      	ldr	r3, [sp, #8]
 8003e72:	2200      	movs	r2, #0
 8003e74:	701a      	strb	r2, [r3, #0]
 8003e76:	b01c      	add	sp, #112	; 0x70
 8003e78:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e7c:	b003      	add	sp, #12
 8003e7e:	4770      	bx	lr
 8003e80:	20000044 	.word	0x20000044
 8003e84:	ffff0208 	.word	0xffff0208

08003e88 <sulp>:
 8003e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e8c:	460f      	mov	r7, r1
 8003e8e:	4690      	mov	r8, r2
 8003e90:	f002 fc04 	bl	800669c <__ulp>
 8003e94:	4604      	mov	r4, r0
 8003e96:	460d      	mov	r5, r1
 8003e98:	f1b8 0f00 	cmp.w	r8, #0
 8003e9c:	d011      	beq.n	8003ec2 <sulp+0x3a>
 8003e9e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003ea2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	dd0b      	ble.n	8003ec2 <sulp+0x3a>
 8003eaa:	051b      	lsls	r3, r3, #20
 8003eac:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003eb0:	2400      	movs	r4, #0
 8003eb2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003eb6:	4622      	mov	r2, r4
 8003eb8:	462b      	mov	r3, r5
 8003eba:	f7fc fba5 	bl	8000608 <__aeabi_dmul>
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	460d      	mov	r5, r1
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	4629      	mov	r1, r5
 8003ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003eca:	0000      	movs	r0, r0
 8003ecc:	0000      	movs	r0, r0
	...

08003ed0 <_strtod_l>:
 8003ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed4:	b09f      	sub	sp, #124	; 0x7c
 8003ed6:	469b      	mov	fp, r3
 8003ed8:	2300      	movs	r3, #0
 8003eda:	931a      	str	r3, [sp, #104]	; 0x68
 8003edc:	4b9e      	ldr	r3, [pc, #632]	; (8004158 <_strtod_l+0x288>)
 8003ede:	9215      	str	r2, [sp, #84]	; 0x54
 8003ee0:	681f      	ldr	r7, [r3, #0]
 8003ee2:	4682      	mov	sl, r0
 8003ee4:	4638      	mov	r0, r7
 8003ee6:	460e      	mov	r6, r1
 8003ee8:	f7fc f97a 	bl	80001e0 <strlen>
 8003eec:	f04f 0800 	mov.w	r8, #0
 8003ef0:	4604      	mov	r4, r0
 8003ef2:	f04f 0900 	mov.w	r9, #0
 8003ef6:	9619      	str	r6, [sp, #100]	; 0x64
 8003ef8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003efa:	781a      	ldrb	r2, [r3, #0]
 8003efc:	2a2b      	cmp	r2, #43	; 0x2b
 8003efe:	d04c      	beq.n	8003f9a <_strtod_l+0xca>
 8003f00:	d83a      	bhi.n	8003f78 <_strtod_l+0xa8>
 8003f02:	2a0d      	cmp	r2, #13
 8003f04:	d833      	bhi.n	8003f6e <_strtod_l+0x9e>
 8003f06:	2a08      	cmp	r2, #8
 8003f08:	d833      	bhi.n	8003f72 <_strtod_l+0xa2>
 8003f0a:	2a00      	cmp	r2, #0
 8003f0c:	d03d      	beq.n	8003f8a <_strtod_l+0xba>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	930a      	str	r3, [sp, #40]	; 0x28
 8003f12:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8003f14:	782b      	ldrb	r3, [r5, #0]
 8003f16:	2b30      	cmp	r3, #48	; 0x30
 8003f18:	f040 80aa 	bne.w	8004070 <_strtod_l+0x1a0>
 8003f1c:	786b      	ldrb	r3, [r5, #1]
 8003f1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003f22:	2b58      	cmp	r3, #88	; 0x58
 8003f24:	d166      	bne.n	8003ff4 <_strtod_l+0x124>
 8003f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f28:	9301      	str	r3, [sp, #4]
 8003f2a:	ab1a      	add	r3, sp, #104	; 0x68
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	4a8b      	ldr	r2, [pc, #556]	; (800415c <_strtod_l+0x28c>)
 8003f30:	f8cd b008 	str.w	fp, [sp, #8]
 8003f34:	ab1b      	add	r3, sp, #108	; 0x6c
 8003f36:	a919      	add	r1, sp, #100	; 0x64
 8003f38:	4650      	mov	r0, sl
 8003f3a:	f001 fd19 	bl	8005970 <__gethex>
 8003f3e:	f010 0607 	ands.w	r6, r0, #7
 8003f42:	4604      	mov	r4, r0
 8003f44:	d005      	beq.n	8003f52 <_strtod_l+0x82>
 8003f46:	2e06      	cmp	r6, #6
 8003f48:	d129      	bne.n	8003f9e <_strtod_l+0xce>
 8003f4a:	3501      	adds	r5, #1
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	9519      	str	r5, [sp, #100]	; 0x64
 8003f50:	930a      	str	r3, [sp, #40]	; 0x28
 8003f52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f040 858a 	bne.w	8004a6e <_strtod_l+0xb9e>
 8003f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f5c:	b1d3      	cbz	r3, 8003f94 <_strtod_l+0xc4>
 8003f5e:	4642      	mov	r2, r8
 8003f60:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003f64:	4610      	mov	r0, r2
 8003f66:	4619      	mov	r1, r3
 8003f68:	b01f      	add	sp, #124	; 0x7c
 8003f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f6e:	2a20      	cmp	r2, #32
 8003f70:	d1cd      	bne.n	8003f0e <_strtod_l+0x3e>
 8003f72:	3301      	adds	r3, #1
 8003f74:	9319      	str	r3, [sp, #100]	; 0x64
 8003f76:	e7bf      	b.n	8003ef8 <_strtod_l+0x28>
 8003f78:	2a2d      	cmp	r2, #45	; 0x2d
 8003f7a:	d1c8      	bne.n	8003f0e <_strtod_l+0x3e>
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	920a      	str	r2, [sp, #40]	; 0x28
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	9219      	str	r2, [sp, #100]	; 0x64
 8003f84:	785b      	ldrb	r3, [r3, #1]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1c3      	bne.n	8003f12 <_strtod_l+0x42>
 8003f8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003f8c:	9619      	str	r6, [sp, #100]	; 0x64
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f040 856b 	bne.w	8004a6a <_strtod_l+0xb9a>
 8003f94:	4642      	mov	r2, r8
 8003f96:	464b      	mov	r3, r9
 8003f98:	e7e4      	b.n	8003f64 <_strtod_l+0x94>
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	e7ef      	b.n	8003f7e <_strtod_l+0xae>
 8003f9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003fa0:	b13a      	cbz	r2, 8003fb2 <_strtod_l+0xe2>
 8003fa2:	2135      	movs	r1, #53	; 0x35
 8003fa4:	a81c      	add	r0, sp, #112	; 0x70
 8003fa6:	f002 fc7d 	bl	80068a4 <__copybits>
 8003faa:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003fac:	4650      	mov	r0, sl
 8003fae:	f002 f849 	bl	8006044 <_Bfree>
 8003fb2:	3e01      	subs	r6, #1
 8003fb4:	2e04      	cmp	r6, #4
 8003fb6:	d806      	bhi.n	8003fc6 <_strtod_l+0xf6>
 8003fb8:	e8df f006 	tbb	[pc, r6]
 8003fbc:	1714030a 	.word	0x1714030a
 8003fc0:	0a          	.byte	0x0a
 8003fc1:	00          	.byte	0x00
 8003fc2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8003fc6:	0721      	lsls	r1, r4, #28
 8003fc8:	d5c3      	bpl.n	8003f52 <_strtod_l+0x82>
 8003fca:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8003fce:	e7c0      	b.n	8003f52 <_strtod_l+0x82>
 8003fd0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8003fd4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003fd6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003fda:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003fde:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8003fe2:	e7f0      	b.n	8003fc6 <_strtod_l+0xf6>
 8003fe4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004160 <_strtod_l+0x290>
 8003fe8:	e7ed      	b.n	8003fc6 <_strtod_l+0xf6>
 8003fea:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8003fee:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8003ff2:	e7e8      	b.n	8003fc6 <_strtod_l+0xf6>
 8003ff4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	9219      	str	r2, [sp, #100]	; 0x64
 8003ffa:	785b      	ldrb	r3, [r3, #1]
 8003ffc:	2b30      	cmp	r3, #48	; 0x30
 8003ffe:	d0f9      	beq.n	8003ff4 <_strtod_l+0x124>
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0a6      	beq.n	8003f52 <_strtod_l+0x82>
 8004004:	2301      	movs	r3, #1
 8004006:	9307      	str	r3, [sp, #28]
 8004008:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800400a:	9308      	str	r3, [sp, #32]
 800400c:	2300      	movs	r3, #0
 800400e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004012:	469b      	mov	fp, r3
 8004014:	220a      	movs	r2, #10
 8004016:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004018:	7805      	ldrb	r5, [r0, #0]
 800401a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800401e:	b2d9      	uxtb	r1, r3
 8004020:	2909      	cmp	r1, #9
 8004022:	d927      	bls.n	8004074 <_strtod_l+0x1a4>
 8004024:	4622      	mov	r2, r4
 8004026:	4639      	mov	r1, r7
 8004028:	f002 fee4 	bl	8006df4 <strncmp>
 800402c:	2800      	cmp	r0, #0
 800402e:	d033      	beq.n	8004098 <_strtod_l+0x1c8>
 8004030:	2000      	movs	r0, #0
 8004032:	462a      	mov	r2, r5
 8004034:	465c      	mov	r4, fp
 8004036:	9004      	str	r0, [sp, #16]
 8004038:	4603      	mov	r3, r0
 800403a:	2a65      	cmp	r2, #101	; 0x65
 800403c:	d001      	beq.n	8004042 <_strtod_l+0x172>
 800403e:	2a45      	cmp	r2, #69	; 0x45
 8004040:	d114      	bne.n	800406c <_strtod_l+0x19c>
 8004042:	b91c      	cbnz	r4, 800404c <_strtod_l+0x17c>
 8004044:	9a07      	ldr	r2, [sp, #28]
 8004046:	4302      	orrs	r2, r0
 8004048:	d09f      	beq.n	8003f8a <_strtod_l+0xba>
 800404a:	2400      	movs	r4, #0
 800404c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800404e:	1c72      	adds	r2, r6, #1
 8004050:	9219      	str	r2, [sp, #100]	; 0x64
 8004052:	7872      	ldrb	r2, [r6, #1]
 8004054:	2a2b      	cmp	r2, #43	; 0x2b
 8004056:	d079      	beq.n	800414c <_strtod_l+0x27c>
 8004058:	2a2d      	cmp	r2, #45	; 0x2d
 800405a:	f000 8083 	beq.w	8004164 <_strtod_l+0x294>
 800405e:	2700      	movs	r7, #0
 8004060:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004064:	2909      	cmp	r1, #9
 8004066:	f240 8083 	bls.w	8004170 <_strtod_l+0x2a0>
 800406a:	9619      	str	r6, [sp, #100]	; 0x64
 800406c:	2500      	movs	r5, #0
 800406e:	e09f      	b.n	80041b0 <_strtod_l+0x2e0>
 8004070:	2300      	movs	r3, #0
 8004072:	e7c8      	b.n	8004006 <_strtod_l+0x136>
 8004074:	f1bb 0f08 	cmp.w	fp, #8
 8004078:	bfd5      	itete	le
 800407a:	9906      	ldrle	r1, [sp, #24]
 800407c:	9905      	ldrgt	r1, [sp, #20]
 800407e:	fb02 3301 	mlale	r3, r2, r1, r3
 8004082:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004086:	f100 0001 	add.w	r0, r0, #1
 800408a:	bfd4      	ite	le
 800408c:	9306      	strle	r3, [sp, #24]
 800408e:	9305      	strgt	r3, [sp, #20]
 8004090:	f10b 0b01 	add.w	fp, fp, #1
 8004094:	9019      	str	r0, [sp, #100]	; 0x64
 8004096:	e7be      	b.n	8004016 <_strtod_l+0x146>
 8004098:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800409a:	191a      	adds	r2, r3, r4
 800409c:	9219      	str	r2, [sp, #100]	; 0x64
 800409e:	5d1a      	ldrb	r2, [r3, r4]
 80040a0:	f1bb 0f00 	cmp.w	fp, #0
 80040a4:	d036      	beq.n	8004114 <_strtod_l+0x244>
 80040a6:	9004      	str	r0, [sp, #16]
 80040a8:	465c      	mov	r4, fp
 80040aa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80040ae:	2b09      	cmp	r3, #9
 80040b0:	d912      	bls.n	80040d8 <_strtod_l+0x208>
 80040b2:	2301      	movs	r3, #1
 80040b4:	e7c1      	b.n	800403a <_strtod_l+0x16a>
 80040b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	9219      	str	r2, [sp, #100]	; 0x64
 80040bc:	785a      	ldrb	r2, [r3, #1]
 80040be:	3001      	adds	r0, #1
 80040c0:	2a30      	cmp	r2, #48	; 0x30
 80040c2:	d0f8      	beq.n	80040b6 <_strtod_l+0x1e6>
 80040c4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	f200 84d5 	bhi.w	8004a78 <_strtod_l+0xba8>
 80040ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80040d0:	9004      	str	r0, [sp, #16]
 80040d2:	2000      	movs	r0, #0
 80040d4:	9308      	str	r3, [sp, #32]
 80040d6:	4604      	mov	r4, r0
 80040d8:	3a30      	subs	r2, #48	; 0x30
 80040da:	f100 0301 	add.w	r3, r0, #1
 80040de:	d013      	beq.n	8004108 <_strtod_l+0x238>
 80040e0:	9904      	ldr	r1, [sp, #16]
 80040e2:	4419      	add	r1, r3
 80040e4:	9104      	str	r1, [sp, #16]
 80040e6:	4623      	mov	r3, r4
 80040e8:	1905      	adds	r5, r0, r4
 80040ea:	210a      	movs	r1, #10
 80040ec:	42ab      	cmp	r3, r5
 80040ee:	d113      	bne.n	8004118 <_strtod_l+0x248>
 80040f0:	1823      	adds	r3, r4, r0
 80040f2:	2b08      	cmp	r3, #8
 80040f4:	f104 0401 	add.w	r4, r4, #1
 80040f8:	4404      	add	r4, r0
 80040fa:	dc1b      	bgt.n	8004134 <_strtod_l+0x264>
 80040fc:	9906      	ldr	r1, [sp, #24]
 80040fe:	230a      	movs	r3, #10
 8004100:	fb03 2301 	mla	r3, r3, r1, r2
 8004104:	9306      	str	r3, [sp, #24]
 8004106:	2300      	movs	r3, #0
 8004108:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800410a:	1c51      	adds	r1, r2, #1
 800410c:	9119      	str	r1, [sp, #100]	; 0x64
 800410e:	7852      	ldrb	r2, [r2, #1]
 8004110:	4618      	mov	r0, r3
 8004112:	e7ca      	b.n	80040aa <_strtod_l+0x1da>
 8004114:	4658      	mov	r0, fp
 8004116:	e7d3      	b.n	80040c0 <_strtod_l+0x1f0>
 8004118:	2b08      	cmp	r3, #8
 800411a:	dc04      	bgt.n	8004126 <_strtod_l+0x256>
 800411c:	9f06      	ldr	r7, [sp, #24]
 800411e:	434f      	muls	r7, r1
 8004120:	9706      	str	r7, [sp, #24]
 8004122:	3301      	adds	r3, #1
 8004124:	e7e2      	b.n	80040ec <_strtod_l+0x21c>
 8004126:	1c5f      	adds	r7, r3, #1
 8004128:	2f10      	cmp	r7, #16
 800412a:	bfde      	ittt	le
 800412c:	9f05      	ldrle	r7, [sp, #20]
 800412e:	434f      	mulle	r7, r1
 8004130:	9705      	strle	r7, [sp, #20]
 8004132:	e7f6      	b.n	8004122 <_strtod_l+0x252>
 8004134:	2c10      	cmp	r4, #16
 8004136:	bfdf      	itttt	le
 8004138:	9905      	ldrle	r1, [sp, #20]
 800413a:	230a      	movle	r3, #10
 800413c:	fb03 2301 	mlale	r3, r3, r1, r2
 8004140:	9305      	strle	r3, [sp, #20]
 8004142:	e7e0      	b.n	8004106 <_strtod_l+0x236>
 8004144:	2300      	movs	r3, #0
 8004146:	9304      	str	r3, [sp, #16]
 8004148:	2301      	movs	r3, #1
 800414a:	e77b      	b.n	8004044 <_strtod_l+0x174>
 800414c:	2700      	movs	r7, #0
 800414e:	1cb2      	adds	r2, r6, #2
 8004150:	9219      	str	r2, [sp, #100]	; 0x64
 8004152:	78b2      	ldrb	r2, [r6, #2]
 8004154:	e784      	b.n	8004060 <_strtod_l+0x190>
 8004156:	bf00      	nop
 8004158:	08007da8 	.word	0x08007da8
 800415c:	08007b60 	.word	0x08007b60
 8004160:	7ff00000 	.word	0x7ff00000
 8004164:	2701      	movs	r7, #1
 8004166:	e7f2      	b.n	800414e <_strtod_l+0x27e>
 8004168:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800416a:	1c51      	adds	r1, r2, #1
 800416c:	9119      	str	r1, [sp, #100]	; 0x64
 800416e:	7852      	ldrb	r2, [r2, #1]
 8004170:	2a30      	cmp	r2, #48	; 0x30
 8004172:	d0f9      	beq.n	8004168 <_strtod_l+0x298>
 8004174:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004178:	2908      	cmp	r1, #8
 800417a:	f63f af77 	bhi.w	800406c <_strtod_l+0x19c>
 800417e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8004182:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004184:	9209      	str	r2, [sp, #36]	; 0x24
 8004186:	f04f 0e0a 	mov.w	lr, #10
 800418a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800418c:	1c51      	adds	r1, r2, #1
 800418e:	9119      	str	r1, [sp, #100]	; 0x64
 8004190:	7852      	ldrb	r2, [r2, #1]
 8004192:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8004196:	2d09      	cmp	r5, #9
 8004198:	d935      	bls.n	8004206 <_strtod_l+0x336>
 800419a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800419c:	1b49      	subs	r1, r1, r5
 800419e:	2908      	cmp	r1, #8
 80041a0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80041a4:	dc02      	bgt.n	80041ac <_strtod_l+0x2dc>
 80041a6:	4565      	cmp	r5, ip
 80041a8:	bfa8      	it	ge
 80041aa:	4665      	movge	r5, ip
 80041ac:	b107      	cbz	r7, 80041b0 <_strtod_l+0x2e0>
 80041ae:	426d      	negs	r5, r5
 80041b0:	2c00      	cmp	r4, #0
 80041b2:	d14c      	bne.n	800424e <_strtod_l+0x37e>
 80041b4:	9907      	ldr	r1, [sp, #28]
 80041b6:	4301      	orrs	r1, r0
 80041b8:	f47f aecb 	bne.w	8003f52 <_strtod_l+0x82>
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f47f aee4 	bne.w	8003f8a <_strtod_l+0xba>
 80041c2:	2a69      	cmp	r2, #105	; 0x69
 80041c4:	d026      	beq.n	8004214 <_strtod_l+0x344>
 80041c6:	dc23      	bgt.n	8004210 <_strtod_l+0x340>
 80041c8:	2a49      	cmp	r2, #73	; 0x49
 80041ca:	d023      	beq.n	8004214 <_strtod_l+0x344>
 80041cc:	2a4e      	cmp	r2, #78	; 0x4e
 80041ce:	f47f aedc 	bne.w	8003f8a <_strtod_l+0xba>
 80041d2:	499d      	ldr	r1, [pc, #628]	; (8004448 <_strtod_l+0x578>)
 80041d4:	a819      	add	r0, sp, #100	; 0x64
 80041d6:	f001 fe19 	bl	8005e0c <__match>
 80041da:	2800      	cmp	r0, #0
 80041dc:	f43f aed5 	beq.w	8003f8a <_strtod_l+0xba>
 80041e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b28      	cmp	r3, #40	; 0x28
 80041e6:	d12c      	bne.n	8004242 <_strtod_l+0x372>
 80041e8:	4998      	ldr	r1, [pc, #608]	; (800444c <_strtod_l+0x57c>)
 80041ea:	aa1c      	add	r2, sp, #112	; 0x70
 80041ec:	a819      	add	r0, sp, #100	; 0x64
 80041ee:	f001 fe21 	bl	8005e34 <__hexnan>
 80041f2:	2805      	cmp	r0, #5
 80041f4:	d125      	bne.n	8004242 <_strtod_l+0x372>
 80041f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80041f8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80041fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004200:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004204:	e6a5      	b.n	8003f52 <_strtod_l+0x82>
 8004206:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800420a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800420e:	e7bc      	b.n	800418a <_strtod_l+0x2ba>
 8004210:	2a6e      	cmp	r2, #110	; 0x6e
 8004212:	e7dc      	b.n	80041ce <_strtod_l+0x2fe>
 8004214:	498e      	ldr	r1, [pc, #568]	; (8004450 <_strtod_l+0x580>)
 8004216:	a819      	add	r0, sp, #100	; 0x64
 8004218:	f001 fdf8 	bl	8005e0c <__match>
 800421c:	2800      	cmp	r0, #0
 800421e:	f43f aeb4 	beq.w	8003f8a <_strtod_l+0xba>
 8004222:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004224:	498b      	ldr	r1, [pc, #556]	; (8004454 <_strtod_l+0x584>)
 8004226:	3b01      	subs	r3, #1
 8004228:	a819      	add	r0, sp, #100	; 0x64
 800422a:	9319      	str	r3, [sp, #100]	; 0x64
 800422c:	f001 fdee 	bl	8005e0c <__match>
 8004230:	b910      	cbnz	r0, 8004238 <_strtod_l+0x368>
 8004232:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004234:	3301      	adds	r3, #1
 8004236:	9319      	str	r3, [sp, #100]	; 0x64
 8004238:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8004458 <_strtod_l+0x588>
 800423c:	f04f 0800 	mov.w	r8, #0
 8004240:	e687      	b.n	8003f52 <_strtod_l+0x82>
 8004242:	4886      	ldr	r0, [pc, #536]	; (800445c <_strtod_l+0x58c>)
 8004244:	f002 fdc0 	bl	8006dc8 <nan>
 8004248:	4680      	mov	r8, r0
 800424a:	4689      	mov	r9, r1
 800424c:	e681      	b.n	8003f52 <_strtod_l+0x82>
 800424e:	9b04      	ldr	r3, [sp, #16]
 8004250:	9806      	ldr	r0, [sp, #24]
 8004252:	1aeb      	subs	r3, r5, r3
 8004254:	f1bb 0f00 	cmp.w	fp, #0
 8004258:	bf08      	it	eq
 800425a:	46a3      	moveq	fp, r4
 800425c:	2c10      	cmp	r4, #16
 800425e:	9307      	str	r3, [sp, #28]
 8004260:	4626      	mov	r6, r4
 8004262:	bfa8      	it	ge
 8004264:	2610      	movge	r6, #16
 8004266:	f7fc f955 	bl	8000514 <__aeabi_ui2d>
 800426a:	2c09      	cmp	r4, #9
 800426c:	4680      	mov	r8, r0
 800426e:	4689      	mov	r9, r1
 8004270:	dd13      	ble.n	800429a <_strtod_l+0x3ca>
 8004272:	4b7b      	ldr	r3, [pc, #492]	; (8004460 <_strtod_l+0x590>)
 8004274:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004278:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800427c:	f7fc f9c4 	bl	8000608 <__aeabi_dmul>
 8004280:	4680      	mov	r8, r0
 8004282:	9805      	ldr	r0, [sp, #20]
 8004284:	4689      	mov	r9, r1
 8004286:	f7fc f945 	bl	8000514 <__aeabi_ui2d>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	4640      	mov	r0, r8
 8004290:	4649      	mov	r1, r9
 8004292:	f7fc f803 	bl	800029c <__adddf3>
 8004296:	4680      	mov	r8, r0
 8004298:	4689      	mov	r9, r1
 800429a:	2c0f      	cmp	r4, #15
 800429c:	dc36      	bgt.n	800430c <_strtod_l+0x43c>
 800429e:	9b07      	ldr	r3, [sp, #28]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f43f ae56 	beq.w	8003f52 <_strtod_l+0x82>
 80042a6:	dd22      	ble.n	80042ee <_strtod_l+0x41e>
 80042a8:	2b16      	cmp	r3, #22
 80042aa:	dc09      	bgt.n	80042c0 <_strtod_l+0x3f0>
 80042ac:	496c      	ldr	r1, [pc, #432]	; (8004460 <_strtod_l+0x590>)
 80042ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80042b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042b6:	4642      	mov	r2, r8
 80042b8:	464b      	mov	r3, r9
 80042ba:	f7fc f9a5 	bl	8000608 <__aeabi_dmul>
 80042be:	e7c3      	b.n	8004248 <_strtod_l+0x378>
 80042c0:	9a07      	ldr	r2, [sp, #28]
 80042c2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80042c6:	4293      	cmp	r3, r2
 80042c8:	db20      	blt.n	800430c <_strtod_l+0x43c>
 80042ca:	4d65      	ldr	r5, [pc, #404]	; (8004460 <_strtod_l+0x590>)
 80042cc:	f1c4 040f 	rsb	r4, r4, #15
 80042d0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80042d4:	4642      	mov	r2, r8
 80042d6:	464b      	mov	r3, r9
 80042d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042dc:	f7fc f994 	bl	8000608 <__aeabi_dmul>
 80042e0:	9b07      	ldr	r3, [sp, #28]
 80042e2:	1b1c      	subs	r4, r3, r4
 80042e4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80042e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80042ec:	e7e5      	b.n	80042ba <_strtod_l+0x3ea>
 80042ee:	9b07      	ldr	r3, [sp, #28]
 80042f0:	3316      	adds	r3, #22
 80042f2:	db0b      	blt.n	800430c <_strtod_l+0x43c>
 80042f4:	9b04      	ldr	r3, [sp, #16]
 80042f6:	1b5d      	subs	r5, r3, r5
 80042f8:	4b59      	ldr	r3, [pc, #356]	; (8004460 <_strtod_l+0x590>)
 80042fa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80042fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004302:	4640      	mov	r0, r8
 8004304:	4649      	mov	r1, r9
 8004306:	f7fc faa9 	bl	800085c <__aeabi_ddiv>
 800430a:	e79d      	b.n	8004248 <_strtod_l+0x378>
 800430c:	9b07      	ldr	r3, [sp, #28]
 800430e:	1ba6      	subs	r6, r4, r6
 8004310:	441e      	add	r6, r3
 8004312:	2e00      	cmp	r6, #0
 8004314:	dd74      	ble.n	8004400 <_strtod_l+0x530>
 8004316:	f016 030f 	ands.w	r3, r6, #15
 800431a:	d00a      	beq.n	8004332 <_strtod_l+0x462>
 800431c:	4950      	ldr	r1, [pc, #320]	; (8004460 <_strtod_l+0x590>)
 800431e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004322:	4642      	mov	r2, r8
 8004324:	464b      	mov	r3, r9
 8004326:	e9d1 0100 	ldrd	r0, r1, [r1]
 800432a:	f7fc f96d 	bl	8000608 <__aeabi_dmul>
 800432e:	4680      	mov	r8, r0
 8004330:	4689      	mov	r9, r1
 8004332:	f036 060f 	bics.w	r6, r6, #15
 8004336:	d052      	beq.n	80043de <_strtod_l+0x50e>
 8004338:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800433c:	dd27      	ble.n	800438e <_strtod_l+0x4be>
 800433e:	f04f 0b00 	mov.w	fp, #0
 8004342:	f8cd b010 	str.w	fp, [sp, #16]
 8004346:	f8cd b020 	str.w	fp, [sp, #32]
 800434a:	f8cd b018 	str.w	fp, [sp, #24]
 800434e:	2322      	movs	r3, #34	; 0x22
 8004350:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8004458 <_strtod_l+0x588>
 8004354:	f8ca 3000 	str.w	r3, [sl]
 8004358:	f04f 0800 	mov.w	r8, #0
 800435c:	9b08      	ldr	r3, [sp, #32]
 800435e:	2b00      	cmp	r3, #0
 8004360:	f43f adf7 	beq.w	8003f52 <_strtod_l+0x82>
 8004364:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004366:	4650      	mov	r0, sl
 8004368:	f001 fe6c 	bl	8006044 <_Bfree>
 800436c:	9906      	ldr	r1, [sp, #24]
 800436e:	4650      	mov	r0, sl
 8004370:	f001 fe68 	bl	8006044 <_Bfree>
 8004374:	9904      	ldr	r1, [sp, #16]
 8004376:	4650      	mov	r0, sl
 8004378:	f001 fe64 	bl	8006044 <_Bfree>
 800437c:	9908      	ldr	r1, [sp, #32]
 800437e:	4650      	mov	r0, sl
 8004380:	f001 fe60 	bl	8006044 <_Bfree>
 8004384:	4659      	mov	r1, fp
 8004386:	4650      	mov	r0, sl
 8004388:	f001 fe5c 	bl	8006044 <_Bfree>
 800438c:	e5e1      	b.n	8003f52 <_strtod_l+0x82>
 800438e:	4b35      	ldr	r3, [pc, #212]	; (8004464 <_strtod_l+0x594>)
 8004390:	9305      	str	r3, [sp, #20]
 8004392:	2300      	movs	r3, #0
 8004394:	1136      	asrs	r6, r6, #4
 8004396:	4640      	mov	r0, r8
 8004398:	4649      	mov	r1, r9
 800439a:	461f      	mov	r7, r3
 800439c:	2e01      	cmp	r6, #1
 800439e:	dc21      	bgt.n	80043e4 <_strtod_l+0x514>
 80043a0:	b10b      	cbz	r3, 80043a6 <_strtod_l+0x4d6>
 80043a2:	4680      	mov	r8, r0
 80043a4:	4689      	mov	r9, r1
 80043a6:	4b2f      	ldr	r3, [pc, #188]	; (8004464 <_strtod_l+0x594>)
 80043a8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80043ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80043b0:	4642      	mov	r2, r8
 80043b2:	464b      	mov	r3, r9
 80043b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043b8:	f7fc f926 	bl	8000608 <__aeabi_dmul>
 80043bc:	4b26      	ldr	r3, [pc, #152]	; (8004458 <_strtod_l+0x588>)
 80043be:	460a      	mov	r2, r1
 80043c0:	400b      	ands	r3, r1
 80043c2:	4929      	ldr	r1, [pc, #164]	; (8004468 <_strtod_l+0x598>)
 80043c4:	428b      	cmp	r3, r1
 80043c6:	4680      	mov	r8, r0
 80043c8:	d8b9      	bhi.n	800433e <_strtod_l+0x46e>
 80043ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80043ce:	428b      	cmp	r3, r1
 80043d0:	bf86      	itte	hi
 80043d2:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 800446c <_strtod_l+0x59c>
 80043d6:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80043da:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80043de:	2300      	movs	r3, #0
 80043e0:	9305      	str	r3, [sp, #20]
 80043e2:	e07f      	b.n	80044e4 <_strtod_l+0x614>
 80043e4:	07f2      	lsls	r2, r6, #31
 80043e6:	d505      	bpl.n	80043f4 <_strtod_l+0x524>
 80043e8:	9b05      	ldr	r3, [sp, #20]
 80043ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ee:	f7fc f90b 	bl	8000608 <__aeabi_dmul>
 80043f2:	2301      	movs	r3, #1
 80043f4:	9a05      	ldr	r2, [sp, #20]
 80043f6:	3208      	adds	r2, #8
 80043f8:	3701      	adds	r7, #1
 80043fa:	1076      	asrs	r6, r6, #1
 80043fc:	9205      	str	r2, [sp, #20]
 80043fe:	e7cd      	b.n	800439c <_strtod_l+0x4cc>
 8004400:	d0ed      	beq.n	80043de <_strtod_l+0x50e>
 8004402:	4276      	negs	r6, r6
 8004404:	f016 020f 	ands.w	r2, r6, #15
 8004408:	d00a      	beq.n	8004420 <_strtod_l+0x550>
 800440a:	4b15      	ldr	r3, [pc, #84]	; (8004460 <_strtod_l+0x590>)
 800440c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004410:	4640      	mov	r0, r8
 8004412:	4649      	mov	r1, r9
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	f7fc fa20 	bl	800085c <__aeabi_ddiv>
 800441c:	4680      	mov	r8, r0
 800441e:	4689      	mov	r9, r1
 8004420:	1136      	asrs	r6, r6, #4
 8004422:	d0dc      	beq.n	80043de <_strtod_l+0x50e>
 8004424:	2e1f      	cmp	r6, #31
 8004426:	dd23      	ble.n	8004470 <_strtod_l+0x5a0>
 8004428:	f04f 0b00 	mov.w	fp, #0
 800442c:	f8cd b010 	str.w	fp, [sp, #16]
 8004430:	f8cd b020 	str.w	fp, [sp, #32]
 8004434:	f8cd b018 	str.w	fp, [sp, #24]
 8004438:	2322      	movs	r3, #34	; 0x22
 800443a:	f04f 0800 	mov.w	r8, #0
 800443e:	f04f 0900 	mov.w	r9, #0
 8004442:	f8ca 3000 	str.w	r3, [sl]
 8004446:	e789      	b.n	800435c <_strtod_l+0x48c>
 8004448:	08007b31 	.word	0x08007b31
 800444c:	08007b74 	.word	0x08007b74
 8004450:	08007b29 	.word	0x08007b29
 8004454:	08007cb4 	.word	0x08007cb4
 8004458:	7ff00000 	.word	0x7ff00000
 800445c:	08007f60 	.word	0x08007f60
 8004460:	08007e40 	.word	0x08007e40
 8004464:	08007e18 	.word	0x08007e18
 8004468:	7ca00000 	.word	0x7ca00000
 800446c:	7fefffff 	.word	0x7fefffff
 8004470:	f016 0310 	ands.w	r3, r6, #16
 8004474:	bf18      	it	ne
 8004476:	236a      	movne	r3, #106	; 0x6a
 8004478:	4fb1      	ldr	r7, [pc, #708]	; (8004740 <_strtod_l+0x870>)
 800447a:	9305      	str	r3, [sp, #20]
 800447c:	4640      	mov	r0, r8
 800447e:	4649      	mov	r1, r9
 8004480:	2300      	movs	r3, #0
 8004482:	07f2      	lsls	r2, r6, #31
 8004484:	d504      	bpl.n	8004490 <_strtod_l+0x5c0>
 8004486:	e9d7 2300 	ldrd	r2, r3, [r7]
 800448a:	f7fc f8bd 	bl	8000608 <__aeabi_dmul>
 800448e:	2301      	movs	r3, #1
 8004490:	1076      	asrs	r6, r6, #1
 8004492:	f107 0708 	add.w	r7, r7, #8
 8004496:	d1f4      	bne.n	8004482 <_strtod_l+0x5b2>
 8004498:	b10b      	cbz	r3, 800449e <_strtod_l+0x5ce>
 800449a:	4680      	mov	r8, r0
 800449c:	4689      	mov	r9, r1
 800449e:	9b05      	ldr	r3, [sp, #20]
 80044a0:	b1c3      	cbz	r3, 80044d4 <_strtod_l+0x604>
 80044a2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80044a6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	4649      	mov	r1, r9
 80044ae:	dd11      	ble.n	80044d4 <_strtod_l+0x604>
 80044b0:	2b1f      	cmp	r3, #31
 80044b2:	f340 8124 	ble.w	80046fe <_strtod_l+0x82e>
 80044b6:	2b34      	cmp	r3, #52	; 0x34
 80044b8:	bfde      	ittt	le
 80044ba:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80044be:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80044c2:	fa03 f202 	lslle.w	r2, r3, r2
 80044c6:	f04f 0800 	mov.w	r8, #0
 80044ca:	bfcc      	ite	gt
 80044cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80044d0:	ea02 0901 	andle.w	r9, r2, r1
 80044d4:	2200      	movs	r2, #0
 80044d6:	2300      	movs	r3, #0
 80044d8:	4640      	mov	r0, r8
 80044da:	4649      	mov	r1, r9
 80044dc:	f7fc fafc 	bl	8000ad8 <__aeabi_dcmpeq>
 80044e0:	2800      	cmp	r0, #0
 80044e2:	d1a1      	bne.n	8004428 <_strtod_l+0x558>
 80044e4:	9b06      	ldr	r3, [sp, #24]
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	9908      	ldr	r1, [sp, #32]
 80044ea:	4623      	mov	r3, r4
 80044ec:	465a      	mov	r2, fp
 80044ee:	4650      	mov	r0, sl
 80044f0:	f001 fe10 	bl	8006114 <__s2b>
 80044f4:	9008      	str	r0, [sp, #32]
 80044f6:	2800      	cmp	r0, #0
 80044f8:	f43f af21 	beq.w	800433e <_strtod_l+0x46e>
 80044fc:	9b04      	ldr	r3, [sp, #16]
 80044fe:	1b5d      	subs	r5, r3, r5
 8004500:	9b07      	ldr	r3, [sp, #28]
 8004502:	2b00      	cmp	r3, #0
 8004504:	bfb4      	ite	lt
 8004506:	462b      	movlt	r3, r5
 8004508:	2300      	movge	r3, #0
 800450a:	930e      	str	r3, [sp, #56]	; 0x38
 800450c:	9b07      	ldr	r3, [sp, #28]
 800450e:	f04f 0b00 	mov.w	fp, #0
 8004512:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004516:	9314      	str	r3, [sp, #80]	; 0x50
 8004518:	f8cd b010 	str.w	fp, [sp, #16]
 800451c:	9b08      	ldr	r3, [sp, #32]
 800451e:	4650      	mov	r0, sl
 8004520:	6859      	ldr	r1, [r3, #4]
 8004522:	f001 fd4f 	bl	8005fc4 <_Balloc>
 8004526:	9006      	str	r0, [sp, #24]
 8004528:	2800      	cmp	r0, #0
 800452a:	f43f af10 	beq.w	800434e <_strtod_l+0x47e>
 800452e:	9b08      	ldr	r3, [sp, #32]
 8004530:	691a      	ldr	r2, [r3, #16]
 8004532:	3202      	adds	r2, #2
 8004534:	f103 010c 	add.w	r1, r3, #12
 8004538:	0092      	lsls	r2, r2, #2
 800453a:	300c      	adds	r0, #12
 800453c:	f001 fd34 	bl	8005fa8 <memcpy>
 8004540:	ab1c      	add	r3, sp, #112	; 0x70
 8004542:	9301      	str	r3, [sp, #4]
 8004544:	ab1b      	add	r3, sp, #108	; 0x6c
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	4642      	mov	r2, r8
 800454a:	464b      	mov	r3, r9
 800454c:	4650      	mov	r0, sl
 800454e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8004552:	f002 f91d 	bl	8006790 <__d2b>
 8004556:	901a      	str	r0, [sp, #104]	; 0x68
 8004558:	2800      	cmp	r0, #0
 800455a:	f43f aef8 	beq.w	800434e <_strtod_l+0x47e>
 800455e:	2101      	movs	r1, #1
 8004560:	4650      	mov	r0, sl
 8004562:	f001 fe6f 	bl	8006244 <__i2b>
 8004566:	9004      	str	r0, [sp, #16]
 8004568:	4603      	mov	r3, r0
 800456a:	2800      	cmp	r0, #0
 800456c:	f43f aeef 	beq.w	800434e <_strtod_l+0x47e>
 8004570:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004572:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004574:	2d00      	cmp	r5, #0
 8004576:	bfab      	itete	ge
 8004578:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800457a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800457c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800457e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004580:	bfac      	ite	ge
 8004582:	18ee      	addge	r6, r5, r3
 8004584:	1b5c      	sublt	r4, r3, r5
 8004586:	9b05      	ldr	r3, [sp, #20]
 8004588:	1aed      	subs	r5, r5, r3
 800458a:	4415      	add	r5, r2
 800458c:	4b6d      	ldr	r3, [pc, #436]	; (8004744 <_strtod_l+0x874>)
 800458e:	3d01      	subs	r5, #1
 8004590:	429d      	cmp	r5, r3
 8004592:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004596:	f280 80c4 	bge.w	8004722 <_strtod_l+0x852>
 800459a:	1b5b      	subs	r3, r3, r5
 800459c:	2b1f      	cmp	r3, #31
 800459e:	eba2 0203 	sub.w	r2, r2, r3
 80045a2:	f04f 0701 	mov.w	r7, #1
 80045a6:	f300 80b1 	bgt.w	800470c <_strtod_l+0x83c>
 80045aa:	fa07 f303 	lsl.w	r3, r7, r3
 80045ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80045b0:	2500      	movs	r5, #0
 80045b2:	18b7      	adds	r7, r6, r2
 80045b4:	9b05      	ldr	r3, [sp, #20]
 80045b6:	42be      	cmp	r6, r7
 80045b8:	4414      	add	r4, r2
 80045ba:	441c      	add	r4, r3
 80045bc:	4633      	mov	r3, r6
 80045be:	bfa8      	it	ge
 80045c0:	463b      	movge	r3, r7
 80045c2:	42a3      	cmp	r3, r4
 80045c4:	bfa8      	it	ge
 80045c6:	4623      	movge	r3, r4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bfc2      	ittt	gt
 80045cc:	1aff      	subgt	r7, r7, r3
 80045ce:	1ae4      	subgt	r4, r4, r3
 80045d0:	1af6      	subgt	r6, r6, r3
 80045d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	dd17      	ble.n	8004608 <_strtod_l+0x738>
 80045d8:	9904      	ldr	r1, [sp, #16]
 80045da:	461a      	mov	r2, r3
 80045dc:	4650      	mov	r0, sl
 80045de:	f001 feef 	bl	80063c0 <__pow5mult>
 80045e2:	9004      	str	r0, [sp, #16]
 80045e4:	2800      	cmp	r0, #0
 80045e6:	f43f aeb2 	beq.w	800434e <_strtod_l+0x47e>
 80045ea:	4601      	mov	r1, r0
 80045ec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80045ee:	4650      	mov	r0, sl
 80045f0:	f001 fe3e 	bl	8006270 <__multiply>
 80045f4:	9009      	str	r0, [sp, #36]	; 0x24
 80045f6:	2800      	cmp	r0, #0
 80045f8:	f43f aea9 	beq.w	800434e <_strtod_l+0x47e>
 80045fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80045fe:	4650      	mov	r0, sl
 8004600:	f001 fd20 	bl	8006044 <_Bfree>
 8004604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004606:	931a      	str	r3, [sp, #104]	; 0x68
 8004608:	2f00      	cmp	r7, #0
 800460a:	f300 808e 	bgt.w	800472a <_strtod_l+0x85a>
 800460e:	9b07      	ldr	r3, [sp, #28]
 8004610:	2b00      	cmp	r3, #0
 8004612:	dd08      	ble.n	8004626 <_strtod_l+0x756>
 8004614:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004616:	9906      	ldr	r1, [sp, #24]
 8004618:	4650      	mov	r0, sl
 800461a:	f001 fed1 	bl	80063c0 <__pow5mult>
 800461e:	9006      	str	r0, [sp, #24]
 8004620:	2800      	cmp	r0, #0
 8004622:	f43f ae94 	beq.w	800434e <_strtod_l+0x47e>
 8004626:	2c00      	cmp	r4, #0
 8004628:	dd08      	ble.n	800463c <_strtod_l+0x76c>
 800462a:	9906      	ldr	r1, [sp, #24]
 800462c:	4622      	mov	r2, r4
 800462e:	4650      	mov	r0, sl
 8004630:	f001 ff20 	bl	8006474 <__lshift>
 8004634:	9006      	str	r0, [sp, #24]
 8004636:	2800      	cmp	r0, #0
 8004638:	f43f ae89 	beq.w	800434e <_strtod_l+0x47e>
 800463c:	2e00      	cmp	r6, #0
 800463e:	dd08      	ble.n	8004652 <_strtod_l+0x782>
 8004640:	9904      	ldr	r1, [sp, #16]
 8004642:	4632      	mov	r2, r6
 8004644:	4650      	mov	r0, sl
 8004646:	f001 ff15 	bl	8006474 <__lshift>
 800464a:	9004      	str	r0, [sp, #16]
 800464c:	2800      	cmp	r0, #0
 800464e:	f43f ae7e 	beq.w	800434e <_strtod_l+0x47e>
 8004652:	9a06      	ldr	r2, [sp, #24]
 8004654:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004656:	4650      	mov	r0, sl
 8004658:	f001 ff98 	bl	800658c <__mdiff>
 800465c:	4683      	mov	fp, r0
 800465e:	2800      	cmp	r0, #0
 8004660:	f43f ae75 	beq.w	800434e <_strtod_l+0x47e>
 8004664:	2400      	movs	r4, #0
 8004666:	68c3      	ldr	r3, [r0, #12]
 8004668:	9904      	ldr	r1, [sp, #16]
 800466a:	60c4      	str	r4, [r0, #12]
 800466c:	930b      	str	r3, [sp, #44]	; 0x2c
 800466e:	f001 ff71 	bl	8006554 <__mcmp>
 8004672:	42a0      	cmp	r0, r4
 8004674:	da6c      	bge.n	8004750 <_strtod_l+0x880>
 8004676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004678:	ea53 0308 	orrs.w	r3, r3, r8
 800467c:	f040 8092 	bne.w	80047a4 <_strtod_l+0x8d4>
 8004680:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004684:	2b00      	cmp	r3, #0
 8004686:	f040 808d 	bne.w	80047a4 <_strtod_l+0x8d4>
 800468a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800468e:	0d1b      	lsrs	r3, r3, #20
 8004690:	051b      	lsls	r3, r3, #20
 8004692:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004696:	f240 8085 	bls.w	80047a4 <_strtod_l+0x8d4>
 800469a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800469e:	b91b      	cbnz	r3, 80046a8 <_strtod_l+0x7d8>
 80046a0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	dd7d      	ble.n	80047a4 <_strtod_l+0x8d4>
 80046a8:	4659      	mov	r1, fp
 80046aa:	2201      	movs	r2, #1
 80046ac:	4650      	mov	r0, sl
 80046ae:	f001 fee1 	bl	8006474 <__lshift>
 80046b2:	9904      	ldr	r1, [sp, #16]
 80046b4:	4683      	mov	fp, r0
 80046b6:	f001 ff4d 	bl	8006554 <__mcmp>
 80046ba:	2800      	cmp	r0, #0
 80046bc:	dd72      	ble.n	80047a4 <_strtod_l+0x8d4>
 80046be:	9905      	ldr	r1, [sp, #20]
 80046c0:	4a21      	ldr	r2, [pc, #132]	; (8004748 <_strtod_l+0x878>)
 80046c2:	464b      	mov	r3, r9
 80046c4:	2900      	cmp	r1, #0
 80046c6:	f000 808d 	beq.w	80047e4 <_strtod_l+0x914>
 80046ca:	ea02 0109 	and.w	r1, r2, r9
 80046ce:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80046d2:	f300 8087 	bgt.w	80047e4 <_strtod_l+0x914>
 80046d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80046da:	f77f aead 	ble.w	8004438 <_strtod_l+0x568>
 80046de:	4b1b      	ldr	r3, [pc, #108]	; (800474c <_strtod_l+0x87c>)
 80046e0:	4640      	mov	r0, r8
 80046e2:	4649      	mov	r1, r9
 80046e4:	2200      	movs	r2, #0
 80046e6:	f7fb ff8f 	bl	8000608 <__aeabi_dmul>
 80046ea:	460b      	mov	r3, r1
 80046ec:	4303      	orrs	r3, r0
 80046ee:	bf08      	it	eq
 80046f0:	2322      	moveq	r3, #34	; 0x22
 80046f2:	4680      	mov	r8, r0
 80046f4:	4689      	mov	r9, r1
 80046f6:	bf08      	it	eq
 80046f8:	f8ca 3000 	streq.w	r3, [sl]
 80046fc:	e632      	b.n	8004364 <_strtod_l+0x494>
 80046fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	ea03 0808 	and.w	r8, r3, r8
 800470a:	e6e3      	b.n	80044d4 <_strtod_l+0x604>
 800470c:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004710:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004714:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004718:	35e2      	adds	r5, #226	; 0xe2
 800471a:	fa07 f505 	lsl.w	r5, r7, r5
 800471e:	970f      	str	r7, [sp, #60]	; 0x3c
 8004720:	e747      	b.n	80045b2 <_strtod_l+0x6e2>
 8004722:	2301      	movs	r3, #1
 8004724:	2500      	movs	r5, #0
 8004726:	930f      	str	r3, [sp, #60]	; 0x3c
 8004728:	e743      	b.n	80045b2 <_strtod_l+0x6e2>
 800472a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800472c:	463a      	mov	r2, r7
 800472e:	4650      	mov	r0, sl
 8004730:	f001 fea0 	bl	8006474 <__lshift>
 8004734:	901a      	str	r0, [sp, #104]	; 0x68
 8004736:	2800      	cmp	r0, #0
 8004738:	f47f af69 	bne.w	800460e <_strtod_l+0x73e>
 800473c:	e607      	b.n	800434e <_strtod_l+0x47e>
 800473e:	bf00      	nop
 8004740:	08007b88 	.word	0x08007b88
 8004744:	fffffc02 	.word	0xfffffc02
 8004748:	7ff00000 	.word	0x7ff00000
 800474c:	39500000 	.word	0x39500000
 8004750:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004754:	d165      	bne.n	8004822 <_strtod_l+0x952>
 8004756:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004758:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800475c:	b35a      	cbz	r2, 80047b6 <_strtod_l+0x8e6>
 800475e:	4a9a      	ldr	r2, [pc, #616]	; (80049c8 <_strtod_l+0xaf8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d12b      	bne.n	80047bc <_strtod_l+0x8ec>
 8004764:	9b05      	ldr	r3, [sp, #20]
 8004766:	4641      	mov	r1, r8
 8004768:	b303      	cbz	r3, 80047ac <_strtod_l+0x8dc>
 800476a:	4b98      	ldr	r3, [pc, #608]	; (80049cc <_strtod_l+0xafc>)
 800476c:	464a      	mov	r2, r9
 800476e:	4013      	ands	r3, r2
 8004770:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004778:	d81b      	bhi.n	80047b2 <_strtod_l+0x8e2>
 800477a:	0d1b      	lsrs	r3, r3, #20
 800477c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	4299      	cmp	r1, r3
 8004786:	d119      	bne.n	80047bc <_strtod_l+0x8ec>
 8004788:	4b91      	ldr	r3, [pc, #580]	; (80049d0 <_strtod_l+0xb00>)
 800478a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800478c:	429a      	cmp	r2, r3
 800478e:	d102      	bne.n	8004796 <_strtod_l+0x8c6>
 8004790:	3101      	adds	r1, #1
 8004792:	f43f addc 	beq.w	800434e <_strtod_l+0x47e>
 8004796:	4b8d      	ldr	r3, [pc, #564]	; (80049cc <_strtod_l+0xafc>)
 8004798:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800479a:	401a      	ands	r2, r3
 800479c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80047a0:	f04f 0800 	mov.w	r8, #0
 80047a4:	9b05      	ldr	r3, [sp, #20]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d199      	bne.n	80046de <_strtod_l+0x80e>
 80047aa:	e5db      	b.n	8004364 <_strtod_l+0x494>
 80047ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047b0:	e7e8      	b.n	8004784 <_strtod_l+0x8b4>
 80047b2:	4613      	mov	r3, r2
 80047b4:	e7e6      	b.n	8004784 <_strtod_l+0x8b4>
 80047b6:	ea53 0308 	orrs.w	r3, r3, r8
 80047ba:	d080      	beq.n	80046be <_strtod_l+0x7ee>
 80047bc:	b1e5      	cbz	r5, 80047f8 <_strtod_l+0x928>
 80047be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047c0:	421d      	tst	r5, r3
 80047c2:	d0ef      	beq.n	80047a4 <_strtod_l+0x8d4>
 80047c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047c6:	9a05      	ldr	r2, [sp, #20]
 80047c8:	4640      	mov	r0, r8
 80047ca:	4649      	mov	r1, r9
 80047cc:	b1c3      	cbz	r3, 8004800 <_strtod_l+0x930>
 80047ce:	f7ff fb5b 	bl	8003e88 <sulp>
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80047da:	f7fb fd5f 	bl	800029c <__adddf3>
 80047de:	4680      	mov	r8, r0
 80047e0:	4689      	mov	r9, r1
 80047e2:	e7df      	b.n	80047a4 <_strtod_l+0x8d4>
 80047e4:	4013      	ands	r3, r2
 80047e6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80047ea:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80047ee:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80047f2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80047f6:	e7d5      	b.n	80047a4 <_strtod_l+0x8d4>
 80047f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80047fa:	ea13 0f08 	tst.w	r3, r8
 80047fe:	e7e0      	b.n	80047c2 <_strtod_l+0x8f2>
 8004800:	f7ff fb42 	bl	8003e88 <sulp>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800480c:	f7fb fd44 	bl	8000298 <__aeabi_dsub>
 8004810:	2200      	movs	r2, #0
 8004812:	2300      	movs	r3, #0
 8004814:	4680      	mov	r8, r0
 8004816:	4689      	mov	r9, r1
 8004818:	f7fc f95e 	bl	8000ad8 <__aeabi_dcmpeq>
 800481c:	2800      	cmp	r0, #0
 800481e:	d0c1      	beq.n	80047a4 <_strtod_l+0x8d4>
 8004820:	e60a      	b.n	8004438 <_strtod_l+0x568>
 8004822:	9904      	ldr	r1, [sp, #16]
 8004824:	4658      	mov	r0, fp
 8004826:	f002 f80f 	bl	8006848 <__ratio>
 800482a:	2200      	movs	r2, #0
 800482c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004830:	4606      	mov	r6, r0
 8004832:	460f      	mov	r7, r1
 8004834:	f7fc f964 	bl	8000b00 <__aeabi_dcmple>
 8004838:	2800      	cmp	r0, #0
 800483a:	d070      	beq.n	800491e <_strtod_l+0xa4e>
 800483c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800483e:	2b00      	cmp	r3, #0
 8004840:	d042      	beq.n	80048c8 <_strtod_l+0x9f8>
 8004842:	4f64      	ldr	r7, [pc, #400]	; (80049d4 <_strtod_l+0xb04>)
 8004844:	2600      	movs	r6, #0
 8004846:	4d63      	ldr	r5, [pc, #396]	; (80049d4 <_strtod_l+0xb04>)
 8004848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800484a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800484e:	0d1b      	lsrs	r3, r3, #20
 8004850:	051b      	lsls	r3, r3, #20
 8004852:	930f      	str	r3, [sp, #60]	; 0x3c
 8004854:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004856:	4b60      	ldr	r3, [pc, #384]	; (80049d8 <_strtod_l+0xb08>)
 8004858:	429a      	cmp	r2, r3
 800485a:	f040 80c5 	bne.w	80049e8 <_strtod_l+0xb18>
 800485e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004860:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004864:	4640      	mov	r0, r8
 8004866:	4649      	mov	r1, r9
 8004868:	f001 ff18 	bl	800669c <__ulp>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	4630      	mov	r0, r6
 8004872:	4639      	mov	r1, r7
 8004874:	f7fb fec8 	bl	8000608 <__aeabi_dmul>
 8004878:	4642      	mov	r2, r8
 800487a:	464b      	mov	r3, r9
 800487c:	f7fb fd0e 	bl	800029c <__adddf3>
 8004880:	460b      	mov	r3, r1
 8004882:	4952      	ldr	r1, [pc, #328]	; (80049cc <_strtod_l+0xafc>)
 8004884:	4a55      	ldr	r2, [pc, #340]	; (80049dc <_strtod_l+0xb0c>)
 8004886:	4019      	ands	r1, r3
 8004888:	4291      	cmp	r1, r2
 800488a:	4680      	mov	r8, r0
 800488c:	d95d      	bls.n	800494a <_strtod_l+0xa7a>
 800488e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004890:	4b4f      	ldr	r3, [pc, #316]	; (80049d0 <_strtod_l+0xb00>)
 8004892:	429a      	cmp	r2, r3
 8004894:	d103      	bne.n	800489e <_strtod_l+0x9ce>
 8004896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004898:	3301      	adds	r3, #1
 800489a:	f43f ad58 	beq.w	800434e <_strtod_l+0x47e>
 800489e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80049d0 <_strtod_l+0xb00>
 80048a2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80048a6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80048a8:	4650      	mov	r0, sl
 80048aa:	f001 fbcb 	bl	8006044 <_Bfree>
 80048ae:	9906      	ldr	r1, [sp, #24]
 80048b0:	4650      	mov	r0, sl
 80048b2:	f001 fbc7 	bl	8006044 <_Bfree>
 80048b6:	9904      	ldr	r1, [sp, #16]
 80048b8:	4650      	mov	r0, sl
 80048ba:	f001 fbc3 	bl	8006044 <_Bfree>
 80048be:	4659      	mov	r1, fp
 80048c0:	4650      	mov	r0, sl
 80048c2:	f001 fbbf 	bl	8006044 <_Bfree>
 80048c6:	e629      	b.n	800451c <_strtod_l+0x64c>
 80048c8:	f1b8 0f00 	cmp.w	r8, #0
 80048cc:	d119      	bne.n	8004902 <_strtod_l+0xa32>
 80048ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048d4:	b9e3      	cbnz	r3, 8004910 <_strtod_l+0xa40>
 80048d6:	4b3f      	ldr	r3, [pc, #252]	; (80049d4 <_strtod_l+0xb04>)
 80048d8:	2200      	movs	r2, #0
 80048da:	4630      	mov	r0, r6
 80048dc:	4639      	mov	r1, r7
 80048de:	f7fc f905 	bl	8000aec <__aeabi_dcmplt>
 80048e2:	b9c8      	cbnz	r0, 8004918 <_strtod_l+0xa48>
 80048e4:	4b3e      	ldr	r3, [pc, #248]	; (80049e0 <_strtod_l+0xb10>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	4630      	mov	r0, r6
 80048ea:	4639      	mov	r1, r7
 80048ec:	f7fb fe8c 	bl	8000608 <__aeabi_dmul>
 80048f0:	4604      	mov	r4, r0
 80048f2:	460d      	mov	r5, r1
 80048f4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80048f8:	9416      	str	r4, [sp, #88]	; 0x58
 80048fa:	9317      	str	r3, [sp, #92]	; 0x5c
 80048fc:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8004900:	e7a2      	b.n	8004848 <_strtod_l+0x978>
 8004902:	f1b8 0f01 	cmp.w	r8, #1
 8004906:	d103      	bne.n	8004910 <_strtod_l+0xa40>
 8004908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800490a:	2b00      	cmp	r3, #0
 800490c:	f43f ad94 	beq.w	8004438 <_strtod_l+0x568>
 8004910:	4f34      	ldr	r7, [pc, #208]	; (80049e4 <_strtod_l+0xb14>)
 8004912:	2600      	movs	r6, #0
 8004914:	2400      	movs	r4, #0
 8004916:	e796      	b.n	8004846 <_strtod_l+0x976>
 8004918:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800491a:	4d31      	ldr	r5, [pc, #196]	; (80049e0 <_strtod_l+0xb10>)
 800491c:	e7ea      	b.n	80048f4 <_strtod_l+0xa24>
 800491e:	4b30      	ldr	r3, [pc, #192]	; (80049e0 <_strtod_l+0xb10>)
 8004920:	2200      	movs	r2, #0
 8004922:	4630      	mov	r0, r6
 8004924:	4639      	mov	r1, r7
 8004926:	f7fb fe6f 	bl	8000608 <__aeabi_dmul>
 800492a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800492c:	4604      	mov	r4, r0
 800492e:	460d      	mov	r5, r1
 8004930:	b933      	cbnz	r3, 8004940 <_strtod_l+0xa70>
 8004932:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004936:	9010      	str	r0, [sp, #64]	; 0x40
 8004938:	9311      	str	r3, [sp, #68]	; 0x44
 800493a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800493e:	e783      	b.n	8004848 <_strtod_l+0x978>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004948:	e7f7      	b.n	800493a <_strtod_l+0xa6a>
 800494a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800494e:	9b05      	ldr	r3, [sp, #20]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1a8      	bne.n	80048a6 <_strtod_l+0x9d6>
 8004954:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004958:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800495a:	0d1b      	lsrs	r3, r3, #20
 800495c:	051b      	lsls	r3, r3, #20
 800495e:	429a      	cmp	r2, r3
 8004960:	d1a1      	bne.n	80048a6 <_strtod_l+0x9d6>
 8004962:	4620      	mov	r0, r4
 8004964:	4629      	mov	r1, r5
 8004966:	f7fc fc15 	bl	8001194 <__aeabi_d2lz>
 800496a:	f7fb fe1f 	bl	80005ac <__aeabi_l2d>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	4620      	mov	r0, r4
 8004974:	4629      	mov	r1, r5
 8004976:	f7fb fc8f 	bl	8000298 <__aeabi_dsub>
 800497a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800497c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004980:	ea43 0308 	orr.w	r3, r3, r8
 8004984:	4313      	orrs	r3, r2
 8004986:	4604      	mov	r4, r0
 8004988:	460d      	mov	r5, r1
 800498a:	d068      	beq.n	8004a5e <_strtod_l+0xb8e>
 800498c:	a30a      	add	r3, pc, #40	; (adr r3, 80049b8 <_strtod_l+0xae8>)
 800498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004992:	f7fc f8ab 	bl	8000aec <__aeabi_dcmplt>
 8004996:	2800      	cmp	r0, #0
 8004998:	f47f ace4 	bne.w	8004364 <_strtod_l+0x494>
 800499c:	a308      	add	r3, pc, #32	; (adr r3, 80049c0 <_strtod_l+0xaf0>)
 800499e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a2:	4620      	mov	r0, r4
 80049a4:	4629      	mov	r1, r5
 80049a6:	f7fc f8bf 	bl	8000b28 <__aeabi_dcmpgt>
 80049aa:	2800      	cmp	r0, #0
 80049ac:	f43f af7b 	beq.w	80048a6 <_strtod_l+0x9d6>
 80049b0:	e4d8      	b.n	8004364 <_strtod_l+0x494>
 80049b2:	bf00      	nop
 80049b4:	f3af 8000 	nop.w
 80049b8:	94a03595 	.word	0x94a03595
 80049bc:	3fdfffff 	.word	0x3fdfffff
 80049c0:	35afe535 	.word	0x35afe535
 80049c4:	3fe00000 	.word	0x3fe00000
 80049c8:	000fffff 	.word	0x000fffff
 80049cc:	7ff00000 	.word	0x7ff00000
 80049d0:	7fefffff 	.word	0x7fefffff
 80049d4:	3ff00000 	.word	0x3ff00000
 80049d8:	7fe00000 	.word	0x7fe00000
 80049dc:	7c9fffff 	.word	0x7c9fffff
 80049e0:	3fe00000 	.word	0x3fe00000
 80049e4:	bff00000 	.word	0xbff00000
 80049e8:	9b05      	ldr	r3, [sp, #20]
 80049ea:	b313      	cbz	r3, 8004a32 <_strtod_l+0xb62>
 80049ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80049ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80049f2:	d81e      	bhi.n	8004a32 <_strtod_l+0xb62>
 80049f4:	a326      	add	r3, pc, #152	; (adr r3, 8004a90 <_strtod_l+0xbc0>)
 80049f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fa:	4620      	mov	r0, r4
 80049fc:	4629      	mov	r1, r5
 80049fe:	f7fc f87f 	bl	8000b00 <__aeabi_dcmple>
 8004a02:	b190      	cbz	r0, 8004a2a <_strtod_l+0xb5a>
 8004a04:	4629      	mov	r1, r5
 8004a06:	4620      	mov	r0, r4
 8004a08:	f7fc f8d6 	bl	8000bb8 <__aeabi_d2uiz>
 8004a0c:	2801      	cmp	r0, #1
 8004a0e:	bf38      	it	cc
 8004a10:	2001      	movcc	r0, #1
 8004a12:	f7fb fd7f 	bl	8000514 <__aeabi_ui2d>
 8004a16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a18:	4604      	mov	r4, r0
 8004a1a:	460d      	mov	r5, r1
 8004a1c:	b9d3      	cbnz	r3, 8004a54 <_strtod_l+0xb84>
 8004a1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a22:	9012      	str	r0, [sp, #72]	; 0x48
 8004a24:	9313      	str	r3, [sp, #76]	; 0x4c
 8004a26:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004a2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a2c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004a30:	1a9f      	subs	r7, r3, r2
 8004a32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a36:	f001 fe31 	bl	800669c <__ulp>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4630      	mov	r0, r6
 8004a40:	4639      	mov	r1, r7
 8004a42:	f7fb fde1 	bl	8000608 <__aeabi_dmul>
 8004a46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004a4a:	f7fb fc27 	bl	800029c <__adddf3>
 8004a4e:	4680      	mov	r8, r0
 8004a50:	4689      	mov	r9, r1
 8004a52:	e77c      	b.n	800494e <_strtod_l+0xa7e>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004a5c:	e7e3      	b.n	8004a26 <_strtod_l+0xb56>
 8004a5e:	a30e      	add	r3, pc, #56	; (adr r3, 8004a98 <_strtod_l+0xbc8>)
 8004a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a64:	f7fc f842 	bl	8000aec <__aeabi_dcmplt>
 8004a68:	e79f      	b.n	80049aa <_strtod_l+0xada>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	930a      	str	r3, [sp, #40]	; 0x28
 8004a6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004a70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	f7ff ba71 	b.w	8003f5a <_strtod_l+0x8a>
 8004a78:	2a65      	cmp	r2, #101	; 0x65
 8004a7a:	f43f ab63 	beq.w	8004144 <_strtod_l+0x274>
 8004a7e:	2a45      	cmp	r2, #69	; 0x45
 8004a80:	f43f ab60 	beq.w	8004144 <_strtod_l+0x274>
 8004a84:	2301      	movs	r3, #1
 8004a86:	f7ff bb95 	b.w	80041b4 <_strtod_l+0x2e4>
 8004a8a:	bf00      	nop
 8004a8c:	f3af 8000 	nop.w
 8004a90:	ffc00000 	.word	0xffc00000
 8004a94:	41dfffff 	.word	0x41dfffff
 8004a98:	94a03595 	.word	0x94a03595
 8004a9c:	3fcfffff 	.word	0x3fcfffff

08004aa0 <_strtod_r>:
 8004aa0:	4b01      	ldr	r3, [pc, #4]	; (8004aa8 <_strtod_r+0x8>)
 8004aa2:	f7ff ba15 	b.w	8003ed0 <_strtod_l>
 8004aa6:	bf00      	nop
 8004aa8:	200000ac 	.word	0x200000ac

08004aac <_strtol_l.constprop.0>:
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab2:	4680      	mov	r8, r0
 8004ab4:	d001      	beq.n	8004aba <_strtol_l.constprop.0+0xe>
 8004ab6:	2b24      	cmp	r3, #36	; 0x24
 8004ab8:	d906      	bls.n	8004ac8 <_strtol_l.constprop.0+0x1c>
 8004aba:	f000 feeb 	bl	8005894 <__errno>
 8004abe:	2316      	movs	r3, #22
 8004ac0:	6003      	str	r3, [r0, #0]
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac8:	4f35      	ldr	r7, [pc, #212]	; (8004ba0 <_strtol_l.constprop.0+0xf4>)
 8004aca:	460d      	mov	r5, r1
 8004acc:	4628      	mov	r0, r5
 8004ace:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ad2:	5de6      	ldrb	r6, [r4, r7]
 8004ad4:	f016 0608 	ands.w	r6, r6, #8
 8004ad8:	d1f8      	bne.n	8004acc <_strtol_l.constprop.0+0x20>
 8004ada:	2c2d      	cmp	r4, #45	; 0x2d
 8004adc:	d12f      	bne.n	8004b3e <_strtol_l.constprop.0+0x92>
 8004ade:	782c      	ldrb	r4, [r5, #0]
 8004ae0:	2601      	movs	r6, #1
 8004ae2:	1c85      	adds	r5, r0, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d057      	beq.n	8004b98 <_strtol_l.constprop.0+0xec>
 8004ae8:	2b10      	cmp	r3, #16
 8004aea:	d109      	bne.n	8004b00 <_strtol_l.constprop.0+0x54>
 8004aec:	2c30      	cmp	r4, #48	; 0x30
 8004aee:	d107      	bne.n	8004b00 <_strtol_l.constprop.0+0x54>
 8004af0:	7828      	ldrb	r0, [r5, #0]
 8004af2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004af6:	2858      	cmp	r0, #88	; 0x58
 8004af8:	d149      	bne.n	8004b8e <_strtol_l.constprop.0+0xe2>
 8004afa:	786c      	ldrb	r4, [r5, #1]
 8004afc:	2310      	movs	r3, #16
 8004afe:	3502      	adds	r5, #2
 8004b00:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8004b04:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8004b08:	2700      	movs	r7, #0
 8004b0a:	fbbe f9f3 	udiv	r9, lr, r3
 8004b0e:	4638      	mov	r0, r7
 8004b10:	fb03 ea19 	mls	sl, r3, r9, lr
 8004b14:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004b18:	f1bc 0f09 	cmp.w	ip, #9
 8004b1c:	d814      	bhi.n	8004b48 <_strtol_l.constprop.0+0x9c>
 8004b1e:	4664      	mov	r4, ip
 8004b20:	42a3      	cmp	r3, r4
 8004b22:	dd22      	ble.n	8004b6a <_strtol_l.constprop.0+0xbe>
 8004b24:	2f00      	cmp	r7, #0
 8004b26:	db1d      	blt.n	8004b64 <_strtol_l.constprop.0+0xb8>
 8004b28:	4581      	cmp	r9, r0
 8004b2a:	d31b      	bcc.n	8004b64 <_strtol_l.constprop.0+0xb8>
 8004b2c:	d101      	bne.n	8004b32 <_strtol_l.constprop.0+0x86>
 8004b2e:	45a2      	cmp	sl, r4
 8004b30:	db18      	blt.n	8004b64 <_strtol_l.constprop.0+0xb8>
 8004b32:	fb00 4003 	mla	r0, r0, r3, r4
 8004b36:	2701      	movs	r7, #1
 8004b38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b3c:	e7ea      	b.n	8004b14 <_strtol_l.constprop.0+0x68>
 8004b3e:	2c2b      	cmp	r4, #43	; 0x2b
 8004b40:	bf04      	itt	eq
 8004b42:	782c      	ldrbeq	r4, [r5, #0]
 8004b44:	1c85      	addeq	r5, r0, #2
 8004b46:	e7cd      	b.n	8004ae4 <_strtol_l.constprop.0+0x38>
 8004b48:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004b4c:	f1bc 0f19 	cmp.w	ip, #25
 8004b50:	d801      	bhi.n	8004b56 <_strtol_l.constprop.0+0xaa>
 8004b52:	3c37      	subs	r4, #55	; 0x37
 8004b54:	e7e4      	b.n	8004b20 <_strtol_l.constprop.0+0x74>
 8004b56:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004b5a:	f1bc 0f19 	cmp.w	ip, #25
 8004b5e:	d804      	bhi.n	8004b6a <_strtol_l.constprop.0+0xbe>
 8004b60:	3c57      	subs	r4, #87	; 0x57
 8004b62:	e7dd      	b.n	8004b20 <_strtol_l.constprop.0+0x74>
 8004b64:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004b68:	e7e6      	b.n	8004b38 <_strtol_l.constprop.0+0x8c>
 8004b6a:	2f00      	cmp	r7, #0
 8004b6c:	da07      	bge.n	8004b7e <_strtol_l.constprop.0+0xd2>
 8004b6e:	2322      	movs	r3, #34	; 0x22
 8004b70:	f8c8 3000 	str.w	r3, [r8]
 8004b74:	4670      	mov	r0, lr
 8004b76:	2a00      	cmp	r2, #0
 8004b78:	d0a4      	beq.n	8004ac4 <_strtol_l.constprop.0+0x18>
 8004b7a:	1e69      	subs	r1, r5, #1
 8004b7c:	e005      	b.n	8004b8a <_strtol_l.constprop.0+0xde>
 8004b7e:	b106      	cbz	r6, 8004b82 <_strtol_l.constprop.0+0xd6>
 8004b80:	4240      	negs	r0, r0
 8004b82:	2a00      	cmp	r2, #0
 8004b84:	d09e      	beq.n	8004ac4 <_strtol_l.constprop.0+0x18>
 8004b86:	2f00      	cmp	r7, #0
 8004b88:	d1f7      	bne.n	8004b7a <_strtol_l.constprop.0+0xce>
 8004b8a:	6011      	str	r1, [r2, #0]
 8004b8c:	e79a      	b.n	8004ac4 <_strtol_l.constprop.0+0x18>
 8004b8e:	2430      	movs	r4, #48	; 0x30
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1b5      	bne.n	8004b00 <_strtol_l.constprop.0+0x54>
 8004b94:	2308      	movs	r3, #8
 8004b96:	e7b3      	b.n	8004b00 <_strtol_l.constprop.0+0x54>
 8004b98:	2c30      	cmp	r4, #48	; 0x30
 8004b9a:	d0a9      	beq.n	8004af0 <_strtol_l.constprop.0+0x44>
 8004b9c:	230a      	movs	r3, #10
 8004b9e:	e7af      	b.n	8004b00 <_strtol_l.constprop.0+0x54>
 8004ba0:	08007bb1 	.word	0x08007bb1

08004ba4 <_strtol_r>:
 8004ba4:	f7ff bf82 	b.w	8004aac <_strtol_l.constprop.0>

08004ba8 <quorem>:
 8004ba8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bac:	6903      	ldr	r3, [r0, #16]
 8004bae:	690c      	ldr	r4, [r1, #16]
 8004bb0:	42a3      	cmp	r3, r4
 8004bb2:	4607      	mov	r7, r0
 8004bb4:	db7d      	blt.n	8004cb2 <quorem+0x10a>
 8004bb6:	3c01      	subs	r4, #1
 8004bb8:	f101 0814 	add.w	r8, r1, #20
 8004bbc:	f100 0514 	add.w	r5, r0, #20
 8004bc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004bc4:	9301      	str	r3, [sp, #4]
 8004bc6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004bca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004bd6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004bda:	fbb2 f6f3 	udiv	r6, r2, r3
 8004bde:	d32e      	bcc.n	8004c3e <quorem+0x96>
 8004be0:	f04f 0e00 	mov.w	lr, #0
 8004be4:	4640      	mov	r0, r8
 8004be6:	46ac      	mov	ip, r5
 8004be8:	46f2      	mov	sl, lr
 8004bea:	f850 2b04 	ldr.w	r2, [r0], #4
 8004bee:	b293      	uxth	r3, r2
 8004bf0:	fb06 e303 	mla	r3, r6, r3, lr
 8004bf4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004bf8:	0c12      	lsrs	r2, r2, #16
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	fb06 e202 	mla	r2, r6, r2, lr
 8004c00:	ebaa 0303 	sub.w	r3, sl, r3
 8004c04:	f8dc a000 	ldr.w	sl, [ip]
 8004c08:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004c0c:	b292      	uxth	r2, r2
 8004c0e:	fa13 f38a 	uxtah	r3, r3, sl
 8004c12:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004c16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c20:	4581      	cmp	r9, r0
 8004c22:	f84c 3b04 	str.w	r3, [ip], #4
 8004c26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004c2a:	d2de      	bcs.n	8004bea <quorem+0x42>
 8004c2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004c30:	b92b      	cbnz	r3, 8004c3e <quorem+0x96>
 8004c32:	9b01      	ldr	r3, [sp, #4]
 8004c34:	3b04      	subs	r3, #4
 8004c36:	429d      	cmp	r5, r3
 8004c38:	461a      	mov	r2, r3
 8004c3a:	d32e      	bcc.n	8004c9a <quorem+0xf2>
 8004c3c:	613c      	str	r4, [r7, #16]
 8004c3e:	4638      	mov	r0, r7
 8004c40:	f001 fc88 	bl	8006554 <__mcmp>
 8004c44:	2800      	cmp	r0, #0
 8004c46:	db24      	blt.n	8004c92 <quorem+0xea>
 8004c48:	3601      	adds	r6, #1
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	f04f 0c00 	mov.w	ip, #0
 8004c50:	f858 2b04 	ldr.w	r2, [r8], #4
 8004c54:	f8d0 e000 	ldr.w	lr, [r0]
 8004c58:	b293      	uxth	r3, r2
 8004c5a:	ebac 0303 	sub.w	r3, ip, r3
 8004c5e:	0c12      	lsrs	r2, r2, #16
 8004c60:	fa13 f38e 	uxtah	r3, r3, lr
 8004c64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004c68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c72:	45c1      	cmp	r9, r8
 8004c74:	f840 3b04 	str.w	r3, [r0], #4
 8004c78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c7c:	d2e8      	bcs.n	8004c50 <quorem+0xa8>
 8004c7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c86:	b922      	cbnz	r2, 8004c92 <quorem+0xea>
 8004c88:	3b04      	subs	r3, #4
 8004c8a:	429d      	cmp	r5, r3
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	d30a      	bcc.n	8004ca6 <quorem+0xfe>
 8004c90:	613c      	str	r4, [r7, #16]
 8004c92:	4630      	mov	r0, r6
 8004c94:	b003      	add	sp, #12
 8004c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c9a:	6812      	ldr	r2, [r2, #0]
 8004c9c:	3b04      	subs	r3, #4
 8004c9e:	2a00      	cmp	r2, #0
 8004ca0:	d1cc      	bne.n	8004c3c <quorem+0x94>
 8004ca2:	3c01      	subs	r4, #1
 8004ca4:	e7c7      	b.n	8004c36 <quorem+0x8e>
 8004ca6:	6812      	ldr	r2, [r2, #0]
 8004ca8:	3b04      	subs	r3, #4
 8004caa:	2a00      	cmp	r2, #0
 8004cac:	d1f0      	bne.n	8004c90 <quorem+0xe8>
 8004cae:	3c01      	subs	r4, #1
 8004cb0:	e7eb      	b.n	8004c8a <quorem+0xe2>
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	e7ee      	b.n	8004c94 <quorem+0xec>
	...

08004cb8 <_dtoa_r>:
 8004cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cbc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004cbe:	b099      	sub	sp, #100	; 0x64
 8004cc0:	4616      	mov	r6, r2
 8004cc2:	461f      	mov	r7, r3
 8004cc4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004cc8:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004ccc:	4605      	mov	r5, r0
 8004cce:	b974      	cbnz	r4, 8004cee <_dtoa_r+0x36>
 8004cd0:	2010      	movs	r0, #16
 8004cd2:	f001 f94f 	bl	8005f74 <malloc>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	6268      	str	r0, [r5, #36]	; 0x24
 8004cda:	b920      	cbnz	r0, 8004ce6 <_dtoa_r+0x2e>
 8004cdc:	4ba8      	ldr	r3, [pc, #672]	; (8004f80 <_dtoa_r+0x2c8>)
 8004cde:	21ea      	movs	r1, #234	; 0xea
 8004ce0:	48a8      	ldr	r0, [pc, #672]	; (8004f84 <_dtoa_r+0x2cc>)
 8004ce2:	f002 f8a9 	bl	8006e38 <__assert_func>
 8004ce6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004cea:	6004      	str	r4, [r0, #0]
 8004cec:	60c4      	str	r4, [r0, #12]
 8004cee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004cf0:	6819      	ldr	r1, [r3, #0]
 8004cf2:	b151      	cbz	r1, 8004d0a <_dtoa_r+0x52>
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	604a      	str	r2, [r1, #4]
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	4093      	lsls	r3, r2
 8004cfc:	608b      	str	r3, [r1, #8]
 8004cfe:	4628      	mov	r0, r5
 8004d00:	f001 f9a0 	bl	8006044 <_Bfree>
 8004d04:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	1e3b      	subs	r3, r7, #0
 8004d0c:	bfb9      	ittee	lt
 8004d0e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004d12:	9305      	strlt	r3, [sp, #20]
 8004d14:	2300      	movge	r3, #0
 8004d16:	f8c8 3000 	strge.w	r3, [r8]
 8004d1a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004d1e:	4b9a      	ldr	r3, [pc, #616]	; (8004f88 <_dtoa_r+0x2d0>)
 8004d20:	bfbc      	itt	lt
 8004d22:	2201      	movlt	r2, #1
 8004d24:	f8c8 2000 	strlt.w	r2, [r8]
 8004d28:	ea33 0309 	bics.w	r3, r3, r9
 8004d2c:	d119      	bne.n	8004d62 <_dtoa_r+0xaa>
 8004d2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d30:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d3a:	4333      	orrs	r3, r6
 8004d3c:	f000 8580 	beq.w	8005840 <_dtoa_r+0xb88>
 8004d40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d42:	b953      	cbnz	r3, 8004d5a <_dtoa_r+0xa2>
 8004d44:	4b91      	ldr	r3, [pc, #580]	; (8004f8c <_dtoa_r+0x2d4>)
 8004d46:	e022      	b.n	8004d8e <_dtoa_r+0xd6>
 8004d48:	4b91      	ldr	r3, [pc, #580]	; (8004f90 <_dtoa_r+0x2d8>)
 8004d4a:	9303      	str	r3, [sp, #12]
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	9803      	ldr	r0, [sp, #12]
 8004d54:	b019      	add	sp, #100	; 0x64
 8004d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d5a:	4b8c      	ldr	r3, [pc, #560]	; (8004f8c <_dtoa_r+0x2d4>)
 8004d5c:	9303      	str	r3, [sp, #12]
 8004d5e:	3303      	adds	r3, #3
 8004d60:	e7f5      	b.n	8004d4e <_dtoa_r+0x96>
 8004d62:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004d66:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004d6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d6e:	2200      	movs	r2, #0
 8004d70:	2300      	movs	r3, #0
 8004d72:	f7fb feb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d76:	4680      	mov	r8, r0
 8004d78:	b158      	cbz	r0, 8004d92 <_dtoa_r+0xda>
 8004d7a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	6013      	str	r3, [r2, #0]
 8004d80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 8559 	beq.w	800583a <_dtoa_r+0xb82>
 8004d88:	4882      	ldr	r0, [pc, #520]	; (8004f94 <_dtoa_r+0x2dc>)
 8004d8a:	6018      	str	r0, [r3, #0]
 8004d8c:	1e43      	subs	r3, r0, #1
 8004d8e:	9303      	str	r3, [sp, #12]
 8004d90:	e7df      	b.n	8004d52 <_dtoa_r+0x9a>
 8004d92:	ab16      	add	r3, sp, #88	; 0x58
 8004d94:	9301      	str	r3, [sp, #4]
 8004d96:	ab17      	add	r3, sp, #92	; 0x5c
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004da0:	f001 fcf6 	bl	8006790 <__d2b>
 8004da4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004da8:	4683      	mov	fp, r0
 8004daa:	2c00      	cmp	r4, #0
 8004dac:	d07e      	beq.n	8004eac <_dtoa_r+0x1f4>
 8004dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004db0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004db4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004db8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004dbc:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004dc0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004dc4:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004dc8:	4b73      	ldr	r3, [pc, #460]	; (8004f98 <_dtoa_r+0x2e0>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f7fb fa64 	bl	8000298 <__aeabi_dsub>
 8004dd0:	a365      	add	r3, pc, #404	; (adr r3, 8004f68 <_dtoa_r+0x2b0>)
 8004dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd6:	f7fb fc17 	bl	8000608 <__aeabi_dmul>
 8004dda:	a365      	add	r3, pc, #404	; (adr r3, 8004f70 <_dtoa_r+0x2b8>)
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	f7fb fa5c 	bl	800029c <__adddf3>
 8004de4:	4606      	mov	r6, r0
 8004de6:	4620      	mov	r0, r4
 8004de8:	460f      	mov	r7, r1
 8004dea:	f7fb fba3 	bl	8000534 <__aeabi_i2d>
 8004dee:	a362      	add	r3, pc, #392	; (adr r3, 8004f78 <_dtoa_r+0x2c0>)
 8004df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df4:	f7fb fc08 	bl	8000608 <__aeabi_dmul>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	4639      	mov	r1, r7
 8004e00:	f7fb fa4c 	bl	800029c <__adddf3>
 8004e04:	4606      	mov	r6, r0
 8004e06:	460f      	mov	r7, r1
 8004e08:	f7fb feae 	bl	8000b68 <__aeabi_d2iz>
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	4682      	mov	sl, r0
 8004e10:	2300      	movs	r3, #0
 8004e12:	4630      	mov	r0, r6
 8004e14:	4639      	mov	r1, r7
 8004e16:	f7fb fe69 	bl	8000aec <__aeabi_dcmplt>
 8004e1a:	b148      	cbz	r0, 8004e30 <_dtoa_r+0x178>
 8004e1c:	4650      	mov	r0, sl
 8004e1e:	f7fb fb89 	bl	8000534 <__aeabi_i2d>
 8004e22:	4632      	mov	r2, r6
 8004e24:	463b      	mov	r3, r7
 8004e26:	f7fb fe57 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e2a:	b908      	cbnz	r0, 8004e30 <_dtoa_r+0x178>
 8004e2c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004e30:	f1ba 0f16 	cmp.w	sl, #22
 8004e34:	d857      	bhi.n	8004ee6 <_dtoa_r+0x22e>
 8004e36:	4b59      	ldr	r3, [pc, #356]	; (8004f9c <_dtoa_r+0x2e4>)
 8004e38:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e44:	f7fb fe52 	bl	8000aec <__aeabi_dcmplt>
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d04e      	beq.n	8004eea <_dtoa_r+0x232>
 8004e4c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004e50:	2300      	movs	r3, #0
 8004e52:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e54:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004e56:	1b1c      	subs	r4, r3, r4
 8004e58:	1e63      	subs	r3, r4, #1
 8004e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e5c:	bf45      	ittet	mi
 8004e5e:	f1c4 0301 	rsbmi	r3, r4, #1
 8004e62:	9306      	strmi	r3, [sp, #24]
 8004e64:	2300      	movpl	r3, #0
 8004e66:	2300      	movmi	r3, #0
 8004e68:	bf4c      	ite	mi
 8004e6a:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004e6c:	9306      	strpl	r3, [sp, #24]
 8004e6e:	f1ba 0f00 	cmp.w	sl, #0
 8004e72:	db3c      	blt.n	8004eee <_dtoa_r+0x236>
 8004e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e76:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004e7a:	4453      	add	r3, sl
 8004e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e7e:	2300      	movs	r3, #0
 8004e80:	930a      	str	r3, [sp, #40]	; 0x28
 8004e82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e84:	2b09      	cmp	r3, #9
 8004e86:	f200 808d 	bhi.w	8004fa4 <_dtoa_r+0x2ec>
 8004e8a:	2b05      	cmp	r3, #5
 8004e8c:	bfc4      	itt	gt
 8004e8e:	3b04      	subgt	r3, #4
 8004e90:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004e92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e94:	f1a3 0302 	sub.w	r3, r3, #2
 8004e98:	bfcc      	ite	gt
 8004e9a:	2400      	movgt	r4, #0
 8004e9c:	2401      	movle	r4, #1
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	f200 808c 	bhi.w	8004fbc <_dtoa_r+0x304>
 8004ea4:	e8df f003 	tbb	[pc, r3]
 8004ea8:	5b4d4f2d 	.word	0x5b4d4f2d
 8004eac:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004eb0:	441c      	add	r4, r3
 8004eb2:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004eb6:	2b20      	cmp	r3, #32
 8004eb8:	bfc3      	ittte	gt
 8004eba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004ebe:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004ec2:	fa09 f303 	lslgt.w	r3, r9, r3
 8004ec6:	f1c3 0320 	rsble	r3, r3, #32
 8004eca:	bfc6      	itte	gt
 8004ecc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004ed0:	4318      	orrgt	r0, r3
 8004ed2:	fa06 f003 	lslle.w	r0, r6, r3
 8004ed6:	f7fb fb1d 	bl	8000514 <__aeabi_ui2d>
 8004eda:	2301      	movs	r3, #1
 8004edc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004ee0:	3c01      	subs	r4, #1
 8004ee2:	9313      	str	r3, [sp, #76]	; 0x4c
 8004ee4:	e770      	b.n	8004dc8 <_dtoa_r+0x110>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e7b3      	b.n	8004e52 <_dtoa_r+0x19a>
 8004eea:	900f      	str	r0, [sp, #60]	; 0x3c
 8004eec:	e7b2      	b.n	8004e54 <_dtoa_r+0x19c>
 8004eee:	9b06      	ldr	r3, [sp, #24]
 8004ef0:	eba3 030a 	sub.w	r3, r3, sl
 8004ef4:	9306      	str	r3, [sp, #24]
 8004ef6:	f1ca 0300 	rsb	r3, sl, #0
 8004efa:	930a      	str	r3, [sp, #40]	; 0x28
 8004efc:	2300      	movs	r3, #0
 8004efe:	930e      	str	r3, [sp, #56]	; 0x38
 8004f00:	e7bf      	b.n	8004e82 <_dtoa_r+0x1ca>
 8004f02:	2300      	movs	r3, #0
 8004f04:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	dc5a      	bgt.n	8004fc2 <_dtoa_r+0x30a>
 8004f0c:	f04f 0901 	mov.w	r9, #1
 8004f10:	f8cd 9020 	str.w	r9, [sp, #32]
 8004f14:	464b      	mov	r3, r9
 8004f16:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004f1a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	6042      	str	r2, [r0, #4]
 8004f20:	2204      	movs	r2, #4
 8004f22:	f102 0614 	add.w	r6, r2, #20
 8004f26:	429e      	cmp	r6, r3
 8004f28:	6841      	ldr	r1, [r0, #4]
 8004f2a:	d950      	bls.n	8004fce <_dtoa_r+0x316>
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	f001 f849 	bl	8005fc4 <_Balloc>
 8004f32:	9003      	str	r0, [sp, #12]
 8004f34:	2800      	cmp	r0, #0
 8004f36:	d14e      	bne.n	8004fd6 <_dtoa_r+0x31e>
 8004f38:	4b19      	ldr	r3, [pc, #100]	; (8004fa0 <_dtoa_r+0x2e8>)
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004f40:	e6ce      	b.n	8004ce0 <_dtoa_r+0x28>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e7de      	b.n	8004f04 <_dtoa_r+0x24c>
 8004f46:	2300      	movs	r3, #0
 8004f48:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f4c:	eb0a 0903 	add.w	r9, sl, r3
 8004f50:	f109 0301 	add.w	r3, r9, #1
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	9308      	str	r3, [sp, #32]
 8004f58:	bfb8      	it	lt
 8004f5a:	2301      	movlt	r3, #1
 8004f5c:	e7dd      	b.n	8004f1a <_dtoa_r+0x262>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e7f2      	b.n	8004f48 <_dtoa_r+0x290>
 8004f62:	bf00      	nop
 8004f64:	f3af 8000 	nop.w
 8004f68:	636f4361 	.word	0x636f4361
 8004f6c:	3fd287a7 	.word	0x3fd287a7
 8004f70:	8b60c8b3 	.word	0x8b60c8b3
 8004f74:	3fc68a28 	.word	0x3fc68a28
 8004f78:	509f79fb 	.word	0x509f79fb
 8004f7c:	3fd34413 	.word	0x3fd34413
 8004f80:	08007cbe 	.word	0x08007cbe
 8004f84:	08007cd5 	.word	0x08007cd5
 8004f88:	7ff00000 	.word	0x7ff00000
 8004f8c:	08007cba 	.word	0x08007cba
 8004f90:	08007cb1 	.word	0x08007cb1
 8004f94:	08007b35 	.word	0x08007b35
 8004f98:	3ff80000 	.word	0x3ff80000
 8004f9c:	08007e40 	.word	0x08007e40
 8004fa0:	08007d30 	.word	0x08007d30
 8004fa4:	2401      	movs	r4, #1
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	9322      	str	r3, [sp, #136]	; 0x88
 8004faa:	940b      	str	r4, [sp, #44]	; 0x2c
 8004fac:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f8cd 9020 	str.w	r9, [sp, #32]
 8004fb6:	2312      	movs	r3, #18
 8004fb8:	9223      	str	r2, [sp, #140]	; 0x8c
 8004fba:	e7ae      	b.n	8004f1a <_dtoa_r+0x262>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fc0:	e7f4      	b.n	8004fac <_dtoa_r+0x2f4>
 8004fc2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004fc6:	f8cd 9020 	str.w	r9, [sp, #32]
 8004fca:	464b      	mov	r3, r9
 8004fcc:	e7a5      	b.n	8004f1a <_dtoa_r+0x262>
 8004fce:	3101      	adds	r1, #1
 8004fd0:	6041      	str	r1, [r0, #4]
 8004fd2:	0052      	lsls	r2, r2, #1
 8004fd4:	e7a5      	b.n	8004f22 <_dtoa_r+0x26a>
 8004fd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004fd8:	9a03      	ldr	r2, [sp, #12]
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	9b08      	ldr	r3, [sp, #32]
 8004fde:	2b0e      	cmp	r3, #14
 8004fe0:	f200 80a8 	bhi.w	8005134 <_dtoa_r+0x47c>
 8004fe4:	2c00      	cmp	r4, #0
 8004fe6:	f000 80a5 	beq.w	8005134 <_dtoa_r+0x47c>
 8004fea:	f1ba 0f00 	cmp.w	sl, #0
 8004fee:	dd34      	ble.n	800505a <_dtoa_r+0x3a2>
 8004ff0:	4a9a      	ldr	r2, [pc, #616]	; (800525c <_dtoa_r+0x5a4>)
 8004ff2:	f00a 030f 	and.w	r3, sl, #15
 8004ff6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004ffa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ffe:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005002:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005006:	ea4f 142a 	mov.w	r4, sl, asr #4
 800500a:	d016      	beq.n	800503a <_dtoa_r+0x382>
 800500c:	4b94      	ldr	r3, [pc, #592]	; (8005260 <_dtoa_r+0x5a8>)
 800500e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005012:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005016:	f7fb fc21 	bl	800085c <__aeabi_ddiv>
 800501a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800501e:	f004 040f 	and.w	r4, r4, #15
 8005022:	2703      	movs	r7, #3
 8005024:	4e8e      	ldr	r6, [pc, #568]	; (8005260 <_dtoa_r+0x5a8>)
 8005026:	b954      	cbnz	r4, 800503e <_dtoa_r+0x386>
 8005028:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800502c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005030:	f7fb fc14 	bl	800085c <__aeabi_ddiv>
 8005034:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005038:	e029      	b.n	800508e <_dtoa_r+0x3d6>
 800503a:	2702      	movs	r7, #2
 800503c:	e7f2      	b.n	8005024 <_dtoa_r+0x36c>
 800503e:	07e1      	lsls	r1, r4, #31
 8005040:	d508      	bpl.n	8005054 <_dtoa_r+0x39c>
 8005042:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005046:	e9d6 2300 	ldrd	r2, r3, [r6]
 800504a:	f7fb fadd 	bl	8000608 <__aeabi_dmul>
 800504e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005052:	3701      	adds	r7, #1
 8005054:	1064      	asrs	r4, r4, #1
 8005056:	3608      	adds	r6, #8
 8005058:	e7e5      	b.n	8005026 <_dtoa_r+0x36e>
 800505a:	f000 80a5 	beq.w	80051a8 <_dtoa_r+0x4f0>
 800505e:	f1ca 0400 	rsb	r4, sl, #0
 8005062:	4b7e      	ldr	r3, [pc, #504]	; (800525c <_dtoa_r+0x5a4>)
 8005064:	4e7e      	ldr	r6, [pc, #504]	; (8005260 <_dtoa_r+0x5a8>)
 8005066:	f004 020f 	and.w	r2, r4, #15
 800506a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800506e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005072:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005076:	f7fb fac7 	bl	8000608 <__aeabi_dmul>
 800507a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800507e:	1124      	asrs	r4, r4, #4
 8005080:	2300      	movs	r3, #0
 8005082:	2702      	movs	r7, #2
 8005084:	2c00      	cmp	r4, #0
 8005086:	f040 8084 	bne.w	8005192 <_dtoa_r+0x4da>
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1d2      	bne.n	8005034 <_dtoa_r+0x37c>
 800508e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 808b 	beq.w	80051ac <_dtoa_r+0x4f4>
 8005096:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800509a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800509e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050a2:	4b70      	ldr	r3, [pc, #448]	; (8005264 <_dtoa_r+0x5ac>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	f7fb fd21 	bl	8000aec <__aeabi_dcmplt>
 80050aa:	2800      	cmp	r0, #0
 80050ac:	d07e      	beq.n	80051ac <_dtoa_r+0x4f4>
 80050ae:	9b08      	ldr	r3, [sp, #32]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d07b      	beq.n	80051ac <_dtoa_r+0x4f4>
 80050b4:	f1b9 0f00 	cmp.w	r9, #0
 80050b8:	dd38      	ble.n	800512c <_dtoa_r+0x474>
 80050ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050be:	4b6a      	ldr	r3, [pc, #424]	; (8005268 <_dtoa_r+0x5b0>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	f7fb faa1 	bl	8000608 <__aeabi_dmul>
 80050c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050ca:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 80050ce:	3701      	adds	r7, #1
 80050d0:	464c      	mov	r4, r9
 80050d2:	4638      	mov	r0, r7
 80050d4:	f7fb fa2e 	bl	8000534 <__aeabi_i2d>
 80050d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050dc:	f7fb fa94 	bl	8000608 <__aeabi_dmul>
 80050e0:	4b62      	ldr	r3, [pc, #392]	; (800526c <_dtoa_r+0x5b4>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	f7fb f8da 	bl	800029c <__adddf3>
 80050e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80050ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050f0:	9611      	str	r6, [sp, #68]	; 0x44
 80050f2:	2c00      	cmp	r4, #0
 80050f4:	d15d      	bne.n	80051b2 <_dtoa_r+0x4fa>
 80050f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050fa:	4b5d      	ldr	r3, [pc, #372]	; (8005270 <_dtoa_r+0x5b8>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	f7fb f8cb 	bl	8000298 <__aeabi_dsub>
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800510a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800510c:	4633      	mov	r3, r6
 800510e:	f7fb fd0b 	bl	8000b28 <__aeabi_dcmpgt>
 8005112:	2800      	cmp	r0, #0
 8005114:	f040 829c 	bne.w	8005650 <_dtoa_r+0x998>
 8005118:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800511c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800511e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005122:	f7fb fce3 	bl	8000aec <__aeabi_dcmplt>
 8005126:	2800      	cmp	r0, #0
 8005128:	f040 8290 	bne.w	800564c <_dtoa_r+0x994>
 800512c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005130:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005134:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005136:	2b00      	cmp	r3, #0
 8005138:	f2c0 8152 	blt.w	80053e0 <_dtoa_r+0x728>
 800513c:	f1ba 0f0e 	cmp.w	sl, #14
 8005140:	f300 814e 	bgt.w	80053e0 <_dtoa_r+0x728>
 8005144:	4b45      	ldr	r3, [pc, #276]	; (800525c <_dtoa_r+0x5a4>)
 8005146:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800514a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800514e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005152:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005154:	2b00      	cmp	r3, #0
 8005156:	f280 80db 	bge.w	8005310 <_dtoa_r+0x658>
 800515a:	9b08      	ldr	r3, [sp, #32]
 800515c:	2b00      	cmp	r3, #0
 800515e:	f300 80d7 	bgt.w	8005310 <_dtoa_r+0x658>
 8005162:	f040 8272 	bne.w	800564a <_dtoa_r+0x992>
 8005166:	4b42      	ldr	r3, [pc, #264]	; (8005270 <_dtoa_r+0x5b8>)
 8005168:	2200      	movs	r2, #0
 800516a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800516e:	f7fb fa4b 	bl	8000608 <__aeabi_dmul>
 8005172:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005176:	f7fb fccd 	bl	8000b14 <__aeabi_dcmpge>
 800517a:	9c08      	ldr	r4, [sp, #32]
 800517c:	4626      	mov	r6, r4
 800517e:	2800      	cmp	r0, #0
 8005180:	f040 8248 	bne.w	8005614 <_dtoa_r+0x95c>
 8005184:	9f03      	ldr	r7, [sp, #12]
 8005186:	2331      	movs	r3, #49	; 0x31
 8005188:	f807 3b01 	strb.w	r3, [r7], #1
 800518c:	f10a 0a01 	add.w	sl, sl, #1
 8005190:	e244      	b.n	800561c <_dtoa_r+0x964>
 8005192:	07e2      	lsls	r2, r4, #31
 8005194:	d505      	bpl.n	80051a2 <_dtoa_r+0x4ea>
 8005196:	e9d6 2300 	ldrd	r2, r3, [r6]
 800519a:	f7fb fa35 	bl	8000608 <__aeabi_dmul>
 800519e:	3701      	adds	r7, #1
 80051a0:	2301      	movs	r3, #1
 80051a2:	1064      	asrs	r4, r4, #1
 80051a4:	3608      	adds	r6, #8
 80051a6:	e76d      	b.n	8005084 <_dtoa_r+0x3cc>
 80051a8:	2702      	movs	r7, #2
 80051aa:	e770      	b.n	800508e <_dtoa_r+0x3d6>
 80051ac:	9c08      	ldr	r4, [sp, #32]
 80051ae:	46d0      	mov	r8, sl
 80051b0:	e78f      	b.n	80050d2 <_dtoa_r+0x41a>
 80051b2:	9903      	ldr	r1, [sp, #12]
 80051b4:	4b29      	ldr	r3, [pc, #164]	; (800525c <_dtoa_r+0x5a4>)
 80051b6:	4421      	add	r1, r4
 80051b8:	9112      	str	r1, [sp, #72]	; 0x48
 80051ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80051c0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80051c4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80051c8:	2900      	cmp	r1, #0
 80051ca:	d055      	beq.n	8005278 <_dtoa_r+0x5c0>
 80051cc:	4929      	ldr	r1, [pc, #164]	; (8005274 <_dtoa_r+0x5bc>)
 80051ce:	2000      	movs	r0, #0
 80051d0:	f7fb fb44 	bl	800085c <__aeabi_ddiv>
 80051d4:	463b      	mov	r3, r7
 80051d6:	4632      	mov	r2, r6
 80051d8:	f7fb f85e 	bl	8000298 <__aeabi_dsub>
 80051dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051e0:	9f03      	ldr	r7, [sp, #12]
 80051e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051e6:	f7fb fcbf 	bl	8000b68 <__aeabi_d2iz>
 80051ea:	4604      	mov	r4, r0
 80051ec:	f7fb f9a2 	bl	8000534 <__aeabi_i2d>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051f8:	f7fb f84e 	bl	8000298 <__aeabi_dsub>
 80051fc:	3430      	adds	r4, #48	; 0x30
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005206:	f807 4b01 	strb.w	r4, [r7], #1
 800520a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800520e:	f7fb fc6d 	bl	8000aec <__aeabi_dcmplt>
 8005212:	2800      	cmp	r0, #0
 8005214:	d174      	bne.n	8005300 <_dtoa_r+0x648>
 8005216:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800521a:	4912      	ldr	r1, [pc, #72]	; (8005264 <_dtoa_r+0x5ac>)
 800521c:	2000      	movs	r0, #0
 800521e:	f7fb f83b 	bl	8000298 <__aeabi_dsub>
 8005222:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005226:	f7fb fc61 	bl	8000aec <__aeabi_dcmplt>
 800522a:	2800      	cmp	r0, #0
 800522c:	f040 80b7 	bne.w	800539e <_dtoa_r+0x6e6>
 8005230:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005232:	429f      	cmp	r7, r3
 8005234:	f43f af7a 	beq.w	800512c <_dtoa_r+0x474>
 8005238:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800523c:	4b0a      	ldr	r3, [pc, #40]	; (8005268 <_dtoa_r+0x5b0>)
 800523e:	2200      	movs	r2, #0
 8005240:	f7fb f9e2 	bl	8000608 <__aeabi_dmul>
 8005244:	4b08      	ldr	r3, [pc, #32]	; (8005268 <_dtoa_r+0x5b0>)
 8005246:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800524a:	2200      	movs	r2, #0
 800524c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005250:	f7fb f9da 	bl	8000608 <__aeabi_dmul>
 8005254:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005258:	e7c3      	b.n	80051e2 <_dtoa_r+0x52a>
 800525a:	bf00      	nop
 800525c:	08007e40 	.word	0x08007e40
 8005260:	08007e18 	.word	0x08007e18
 8005264:	3ff00000 	.word	0x3ff00000
 8005268:	40240000 	.word	0x40240000
 800526c:	401c0000 	.word	0x401c0000
 8005270:	40140000 	.word	0x40140000
 8005274:	3fe00000 	.word	0x3fe00000
 8005278:	4630      	mov	r0, r6
 800527a:	4639      	mov	r1, r7
 800527c:	f7fb f9c4 	bl	8000608 <__aeabi_dmul>
 8005280:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005284:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005286:	9c03      	ldr	r4, [sp, #12]
 8005288:	9314      	str	r3, [sp, #80]	; 0x50
 800528a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800528e:	f7fb fc6b 	bl	8000b68 <__aeabi_d2iz>
 8005292:	9015      	str	r0, [sp, #84]	; 0x54
 8005294:	f7fb f94e 	bl	8000534 <__aeabi_i2d>
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052a0:	f7fa fffa 	bl	8000298 <__aeabi_dsub>
 80052a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80052a6:	3330      	adds	r3, #48	; 0x30
 80052a8:	f804 3b01 	strb.w	r3, [r4], #1
 80052ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052ae:	429c      	cmp	r4, r3
 80052b0:	4606      	mov	r6, r0
 80052b2:	460f      	mov	r7, r1
 80052b4:	f04f 0200 	mov.w	r2, #0
 80052b8:	d124      	bne.n	8005304 <_dtoa_r+0x64c>
 80052ba:	4ba4      	ldr	r3, [pc, #656]	; (800554c <_dtoa_r+0x894>)
 80052bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80052c0:	f7fa ffec 	bl	800029c <__adddf3>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4630      	mov	r0, r6
 80052ca:	4639      	mov	r1, r7
 80052cc:	f7fb fc2c 	bl	8000b28 <__aeabi_dcmpgt>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	d163      	bne.n	800539c <_dtoa_r+0x6e4>
 80052d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80052d8:	499c      	ldr	r1, [pc, #624]	; (800554c <_dtoa_r+0x894>)
 80052da:	2000      	movs	r0, #0
 80052dc:	f7fa ffdc 	bl	8000298 <__aeabi_dsub>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4630      	mov	r0, r6
 80052e6:	4639      	mov	r1, r7
 80052e8:	f7fb fc00 	bl	8000aec <__aeabi_dcmplt>
 80052ec:	2800      	cmp	r0, #0
 80052ee:	f43f af1d 	beq.w	800512c <_dtoa_r+0x474>
 80052f2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80052f4:	1e7b      	subs	r3, r7, #1
 80052f6:	9314      	str	r3, [sp, #80]	; 0x50
 80052f8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80052fc:	2b30      	cmp	r3, #48	; 0x30
 80052fe:	d0f8      	beq.n	80052f2 <_dtoa_r+0x63a>
 8005300:	46c2      	mov	sl, r8
 8005302:	e03b      	b.n	800537c <_dtoa_r+0x6c4>
 8005304:	4b92      	ldr	r3, [pc, #584]	; (8005550 <_dtoa_r+0x898>)
 8005306:	f7fb f97f 	bl	8000608 <__aeabi_dmul>
 800530a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800530e:	e7bc      	b.n	800528a <_dtoa_r+0x5d2>
 8005310:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005314:	9f03      	ldr	r7, [sp, #12]
 8005316:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800531a:	4640      	mov	r0, r8
 800531c:	4649      	mov	r1, r9
 800531e:	f7fb fa9d 	bl	800085c <__aeabi_ddiv>
 8005322:	f7fb fc21 	bl	8000b68 <__aeabi_d2iz>
 8005326:	4604      	mov	r4, r0
 8005328:	f7fb f904 	bl	8000534 <__aeabi_i2d>
 800532c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005330:	f7fb f96a 	bl	8000608 <__aeabi_dmul>
 8005334:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	4640      	mov	r0, r8
 800533e:	4649      	mov	r1, r9
 8005340:	f7fa ffaa 	bl	8000298 <__aeabi_dsub>
 8005344:	f807 6b01 	strb.w	r6, [r7], #1
 8005348:	9e03      	ldr	r6, [sp, #12]
 800534a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800534e:	1bbe      	subs	r6, r7, r6
 8005350:	45b4      	cmp	ip, r6
 8005352:	4602      	mov	r2, r0
 8005354:	460b      	mov	r3, r1
 8005356:	d136      	bne.n	80053c6 <_dtoa_r+0x70e>
 8005358:	f7fa ffa0 	bl	800029c <__adddf3>
 800535c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005360:	4680      	mov	r8, r0
 8005362:	4689      	mov	r9, r1
 8005364:	f7fb fbe0 	bl	8000b28 <__aeabi_dcmpgt>
 8005368:	bb58      	cbnz	r0, 80053c2 <_dtoa_r+0x70a>
 800536a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800536e:	4640      	mov	r0, r8
 8005370:	4649      	mov	r1, r9
 8005372:	f7fb fbb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005376:	b108      	cbz	r0, 800537c <_dtoa_r+0x6c4>
 8005378:	07e1      	lsls	r1, r4, #31
 800537a:	d422      	bmi.n	80053c2 <_dtoa_r+0x70a>
 800537c:	4628      	mov	r0, r5
 800537e:	4659      	mov	r1, fp
 8005380:	f000 fe60 	bl	8006044 <_Bfree>
 8005384:	2300      	movs	r3, #0
 8005386:	703b      	strb	r3, [r7, #0]
 8005388:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800538a:	f10a 0001 	add.w	r0, sl, #1
 800538e:	6018      	str	r0, [r3, #0]
 8005390:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005392:	2b00      	cmp	r3, #0
 8005394:	f43f acdd 	beq.w	8004d52 <_dtoa_r+0x9a>
 8005398:	601f      	str	r7, [r3, #0]
 800539a:	e4da      	b.n	8004d52 <_dtoa_r+0x9a>
 800539c:	4627      	mov	r7, r4
 800539e:	463b      	mov	r3, r7
 80053a0:	461f      	mov	r7, r3
 80053a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80053a6:	2a39      	cmp	r2, #57	; 0x39
 80053a8:	d107      	bne.n	80053ba <_dtoa_r+0x702>
 80053aa:	9a03      	ldr	r2, [sp, #12]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d1f7      	bne.n	80053a0 <_dtoa_r+0x6e8>
 80053b0:	9903      	ldr	r1, [sp, #12]
 80053b2:	2230      	movs	r2, #48	; 0x30
 80053b4:	f108 0801 	add.w	r8, r8, #1
 80053b8:	700a      	strb	r2, [r1, #0]
 80053ba:	781a      	ldrb	r2, [r3, #0]
 80053bc:	3201      	adds	r2, #1
 80053be:	701a      	strb	r2, [r3, #0]
 80053c0:	e79e      	b.n	8005300 <_dtoa_r+0x648>
 80053c2:	46d0      	mov	r8, sl
 80053c4:	e7eb      	b.n	800539e <_dtoa_r+0x6e6>
 80053c6:	4b62      	ldr	r3, [pc, #392]	; (8005550 <_dtoa_r+0x898>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	f7fb f91d 	bl	8000608 <__aeabi_dmul>
 80053ce:	2200      	movs	r2, #0
 80053d0:	2300      	movs	r3, #0
 80053d2:	4680      	mov	r8, r0
 80053d4:	4689      	mov	r9, r1
 80053d6:	f7fb fb7f 	bl	8000ad8 <__aeabi_dcmpeq>
 80053da:	2800      	cmp	r0, #0
 80053dc:	d09b      	beq.n	8005316 <_dtoa_r+0x65e>
 80053de:	e7cd      	b.n	800537c <_dtoa_r+0x6c4>
 80053e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80053e2:	2a00      	cmp	r2, #0
 80053e4:	f000 80d0 	beq.w	8005588 <_dtoa_r+0x8d0>
 80053e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80053ea:	2a01      	cmp	r2, #1
 80053ec:	f300 80b2 	bgt.w	8005554 <_dtoa_r+0x89c>
 80053f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80053f2:	2a00      	cmp	r2, #0
 80053f4:	f000 80a6 	beq.w	8005544 <_dtoa_r+0x88c>
 80053f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80053fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80053fe:	9f06      	ldr	r7, [sp, #24]
 8005400:	9a06      	ldr	r2, [sp, #24]
 8005402:	441a      	add	r2, r3
 8005404:	9206      	str	r2, [sp, #24]
 8005406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005408:	2101      	movs	r1, #1
 800540a:	441a      	add	r2, r3
 800540c:	4628      	mov	r0, r5
 800540e:	9209      	str	r2, [sp, #36]	; 0x24
 8005410:	f000 ff18 	bl	8006244 <__i2b>
 8005414:	4606      	mov	r6, r0
 8005416:	2f00      	cmp	r7, #0
 8005418:	dd0c      	ble.n	8005434 <_dtoa_r+0x77c>
 800541a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800541c:	2b00      	cmp	r3, #0
 800541e:	dd09      	ble.n	8005434 <_dtoa_r+0x77c>
 8005420:	42bb      	cmp	r3, r7
 8005422:	9a06      	ldr	r2, [sp, #24]
 8005424:	bfa8      	it	ge
 8005426:	463b      	movge	r3, r7
 8005428:	1ad2      	subs	r2, r2, r3
 800542a:	9206      	str	r2, [sp, #24]
 800542c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800542e:	1aff      	subs	r7, r7, r3
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	9309      	str	r3, [sp, #36]	; 0x24
 8005434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005436:	b1f3      	cbz	r3, 8005476 <_dtoa_r+0x7be>
 8005438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 80a8 	beq.w	8005590 <_dtoa_r+0x8d8>
 8005440:	2c00      	cmp	r4, #0
 8005442:	dd10      	ble.n	8005466 <_dtoa_r+0x7ae>
 8005444:	4631      	mov	r1, r6
 8005446:	4622      	mov	r2, r4
 8005448:	4628      	mov	r0, r5
 800544a:	f000 ffb9 	bl	80063c0 <__pow5mult>
 800544e:	465a      	mov	r2, fp
 8005450:	4601      	mov	r1, r0
 8005452:	4606      	mov	r6, r0
 8005454:	4628      	mov	r0, r5
 8005456:	f000 ff0b 	bl	8006270 <__multiply>
 800545a:	4659      	mov	r1, fp
 800545c:	4680      	mov	r8, r0
 800545e:	4628      	mov	r0, r5
 8005460:	f000 fdf0 	bl	8006044 <_Bfree>
 8005464:	46c3      	mov	fp, r8
 8005466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005468:	1b1a      	subs	r2, r3, r4
 800546a:	d004      	beq.n	8005476 <_dtoa_r+0x7be>
 800546c:	4659      	mov	r1, fp
 800546e:	4628      	mov	r0, r5
 8005470:	f000 ffa6 	bl	80063c0 <__pow5mult>
 8005474:	4683      	mov	fp, r0
 8005476:	2101      	movs	r1, #1
 8005478:	4628      	mov	r0, r5
 800547a:	f000 fee3 	bl	8006244 <__i2b>
 800547e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005480:	2b00      	cmp	r3, #0
 8005482:	4604      	mov	r4, r0
 8005484:	f340 8086 	ble.w	8005594 <_dtoa_r+0x8dc>
 8005488:	461a      	mov	r2, r3
 800548a:	4601      	mov	r1, r0
 800548c:	4628      	mov	r0, r5
 800548e:	f000 ff97 	bl	80063c0 <__pow5mult>
 8005492:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005494:	2b01      	cmp	r3, #1
 8005496:	4604      	mov	r4, r0
 8005498:	dd7f      	ble.n	800559a <_dtoa_r+0x8e2>
 800549a:	f04f 0800 	mov.w	r8, #0
 800549e:	6923      	ldr	r3, [r4, #16]
 80054a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80054a4:	6918      	ldr	r0, [r3, #16]
 80054a6:	f000 fe7f 	bl	80061a8 <__hi0bits>
 80054aa:	f1c0 0020 	rsb	r0, r0, #32
 80054ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054b0:	4418      	add	r0, r3
 80054b2:	f010 001f 	ands.w	r0, r0, #31
 80054b6:	f000 8092 	beq.w	80055de <_dtoa_r+0x926>
 80054ba:	f1c0 0320 	rsb	r3, r0, #32
 80054be:	2b04      	cmp	r3, #4
 80054c0:	f340 808a 	ble.w	80055d8 <_dtoa_r+0x920>
 80054c4:	f1c0 001c 	rsb	r0, r0, #28
 80054c8:	9b06      	ldr	r3, [sp, #24]
 80054ca:	4403      	add	r3, r0
 80054cc:	9306      	str	r3, [sp, #24]
 80054ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054d0:	4403      	add	r3, r0
 80054d2:	4407      	add	r7, r0
 80054d4:	9309      	str	r3, [sp, #36]	; 0x24
 80054d6:	9b06      	ldr	r3, [sp, #24]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	dd05      	ble.n	80054e8 <_dtoa_r+0x830>
 80054dc:	4659      	mov	r1, fp
 80054de:	461a      	mov	r2, r3
 80054e0:	4628      	mov	r0, r5
 80054e2:	f000 ffc7 	bl	8006474 <__lshift>
 80054e6:	4683      	mov	fp, r0
 80054e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	dd05      	ble.n	80054fa <_dtoa_r+0x842>
 80054ee:	4621      	mov	r1, r4
 80054f0:	461a      	mov	r2, r3
 80054f2:	4628      	mov	r0, r5
 80054f4:	f000 ffbe 	bl	8006474 <__lshift>
 80054f8:	4604      	mov	r4, r0
 80054fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d070      	beq.n	80055e2 <_dtoa_r+0x92a>
 8005500:	4621      	mov	r1, r4
 8005502:	4658      	mov	r0, fp
 8005504:	f001 f826 	bl	8006554 <__mcmp>
 8005508:	2800      	cmp	r0, #0
 800550a:	da6a      	bge.n	80055e2 <_dtoa_r+0x92a>
 800550c:	2300      	movs	r3, #0
 800550e:	4659      	mov	r1, fp
 8005510:	220a      	movs	r2, #10
 8005512:	4628      	mov	r0, r5
 8005514:	f000 fdb8 	bl	8006088 <__multadd>
 8005518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800551a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800551e:	4683      	mov	fp, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 8194 	beq.w	800584e <_dtoa_r+0xb96>
 8005526:	4631      	mov	r1, r6
 8005528:	2300      	movs	r3, #0
 800552a:	220a      	movs	r2, #10
 800552c:	4628      	mov	r0, r5
 800552e:	f000 fdab 	bl	8006088 <__multadd>
 8005532:	f1b9 0f00 	cmp.w	r9, #0
 8005536:	4606      	mov	r6, r0
 8005538:	f300 8093 	bgt.w	8005662 <_dtoa_r+0x9aa>
 800553c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800553e:	2b02      	cmp	r3, #2
 8005540:	dc57      	bgt.n	80055f2 <_dtoa_r+0x93a>
 8005542:	e08e      	b.n	8005662 <_dtoa_r+0x9aa>
 8005544:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005546:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800554a:	e757      	b.n	80053fc <_dtoa_r+0x744>
 800554c:	3fe00000 	.word	0x3fe00000
 8005550:	40240000 	.word	0x40240000
 8005554:	9b08      	ldr	r3, [sp, #32]
 8005556:	1e5c      	subs	r4, r3, #1
 8005558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800555a:	42a3      	cmp	r3, r4
 800555c:	bfbf      	itttt	lt
 800555e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005560:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005562:	1ae2      	sublt	r2, r4, r3
 8005564:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005566:	bfb6      	itet	lt
 8005568:	189b      	addlt	r3, r3, r2
 800556a:	1b1c      	subge	r4, r3, r4
 800556c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800556e:	9b08      	ldr	r3, [sp, #32]
 8005570:	bfb8      	it	lt
 8005572:	2400      	movlt	r4, #0
 8005574:	2b00      	cmp	r3, #0
 8005576:	bfb9      	ittee	lt
 8005578:	9b06      	ldrlt	r3, [sp, #24]
 800557a:	9a08      	ldrlt	r2, [sp, #32]
 800557c:	9f06      	ldrge	r7, [sp, #24]
 800557e:	9b08      	ldrge	r3, [sp, #32]
 8005580:	bfbc      	itt	lt
 8005582:	1a9f      	sublt	r7, r3, r2
 8005584:	2300      	movlt	r3, #0
 8005586:	e73b      	b.n	8005400 <_dtoa_r+0x748>
 8005588:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800558a:	9f06      	ldr	r7, [sp, #24]
 800558c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800558e:	e742      	b.n	8005416 <_dtoa_r+0x75e>
 8005590:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005592:	e76b      	b.n	800546c <_dtoa_r+0x7b4>
 8005594:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005596:	2b01      	cmp	r3, #1
 8005598:	dc19      	bgt.n	80055ce <_dtoa_r+0x916>
 800559a:	9b04      	ldr	r3, [sp, #16]
 800559c:	b9bb      	cbnz	r3, 80055ce <_dtoa_r+0x916>
 800559e:	9b05      	ldr	r3, [sp, #20]
 80055a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055a4:	b99b      	cbnz	r3, 80055ce <_dtoa_r+0x916>
 80055a6:	9b05      	ldr	r3, [sp, #20]
 80055a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055ac:	0d1b      	lsrs	r3, r3, #20
 80055ae:	051b      	lsls	r3, r3, #20
 80055b0:	b183      	cbz	r3, 80055d4 <_dtoa_r+0x91c>
 80055b2:	9b06      	ldr	r3, [sp, #24]
 80055b4:	3301      	adds	r3, #1
 80055b6:	9306      	str	r3, [sp, #24]
 80055b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ba:	3301      	adds	r3, #1
 80055bc:	9309      	str	r3, [sp, #36]	; 0x24
 80055be:	f04f 0801 	mov.w	r8, #1
 80055c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f47f af6a 	bne.w	800549e <_dtoa_r+0x7e6>
 80055ca:	2001      	movs	r0, #1
 80055cc:	e76f      	b.n	80054ae <_dtoa_r+0x7f6>
 80055ce:	f04f 0800 	mov.w	r8, #0
 80055d2:	e7f6      	b.n	80055c2 <_dtoa_r+0x90a>
 80055d4:	4698      	mov	r8, r3
 80055d6:	e7f4      	b.n	80055c2 <_dtoa_r+0x90a>
 80055d8:	f43f af7d 	beq.w	80054d6 <_dtoa_r+0x81e>
 80055dc:	4618      	mov	r0, r3
 80055de:	301c      	adds	r0, #28
 80055e0:	e772      	b.n	80054c8 <_dtoa_r+0x810>
 80055e2:	9b08      	ldr	r3, [sp, #32]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	dc36      	bgt.n	8005656 <_dtoa_r+0x99e>
 80055e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	dd33      	ble.n	8005656 <_dtoa_r+0x99e>
 80055ee:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055f2:	f1b9 0f00 	cmp.w	r9, #0
 80055f6:	d10d      	bne.n	8005614 <_dtoa_r+0x95c>
 80055f8:	4621      	mov	r1, r4
 80055fa:	464b      	mov	r3, r9
 80055fc:	2205      	movs	r2, #5
 80055fe:	4628      	mov	r0, r5
 8005600:	f000 fd42 	bl	8006088 <__multadd>
 8005604:	4601      	mov	r1, r0
 8005606:	4604      	mov	r4, r0
 8005608:	4658      	mov	r0, fp
 800560a:	f000 ffa3 	bl	8006554 <__mcmp>
 800560e:	2800      	cmp	r0, #0
 8005610:	f73f adb8 	bgt.w	8005184 <_dtoa_r+0x4cc>
 8005614:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005616:	9f03      	ldr	r7, [sp, #12]
 8005618:	ea6f 0a03 	mvn.w	sl, r3
 800561c:	f04f 0800 	mov.w	r8, #0
 8005620:	4621      	mov	r1, r4
 8005622:	4628      	mov	r0, r5
 8005624:	f000 fd0e 	bl	8006044 <_Bfree>
 8005628:	2e00      	cmp	r6, #0
 800562a:	f43f aea7 	beq.w	800537c <_dtoa_r+0x6c4>
 800562e:	f1b8 0f00 	cmp.w	r8, #0
 8005632:	d005      	beq.n	8005640 <_dtoa_r+0x988>
 8005634:	45b0      	cmp	r8, r6
 8005636:	d003      	beq.n	8005640 <_dtoa_r+0x988>
 8005638:	4641      	mov	r1, r8
 800563a:	4628      	mov	r0, r5
 800563c:	f000 fd02 	bl	8006044 <_Bfree>
 8005640:	4631      	mov	r1, r6
 8005642:	4628      	mov	r0, r5
 8005644:	f000 fcfe 	bl	8006044 <_Bfree>
 8005648:	e698      	b.n	800537c <_dtoa_r+0x6c4>
 800564a:	2400      	movs	r4, #0
 800564c:	4626      	mov	r6, r4
 800564e:	e7e1      	b.n	8005614 <_dtoa_r+0x95c>
 8005650:	46c2      	mov	sl, r8
 8005652:	4626      	mov	r6, r4
 8005654:	e596      	b.n	8005184 <_dtoa_r+0x4cc>
 8005656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005658:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 80fd 	beq.w	800585c <_dtoa_r+0xba4>
 8005662:	2f00      	cmp	r7, #0
 8005664:	dd05      	ble.n	8005672 <_dtoa_r+0x9ba>
 8005666:	4631      	mov	r1, r6
 8005668:	463a      	mov	r2, r7
 800566a:	4628      	mov	r0, r5
 800566c:	f000 ff02 	bl	8006474 <__lshift>
 8005670:	4606      	mov	r6, r0
 8005672:	f1b8 0f00 	cmp.w	r8, #0
 8005676:	d05c      	beq.n	8005732 <_dtoa_r+0xa7a>
 8005678:	6871      	ldr	r1, [r6, #4]
 800567a:	4628      	mov	r0, r5
 800567c:	f000 fca2 	bl	8005fc4 <_Balloc>
 8005680:	4607      	mov	r7, r0
 8005682:	b928      	cbnz	r0, 8005690 <_dtoa_r+0x9d8>
 8005684:	4b80      	ldr	r3, [pc, #512]	; (8005888 <_dtoa_r+0xbd0>)
 8005686:	4602      	mov	r2, r0
 8005688:	f240 21ea 	movw	r1, #746	; 0x2ea
 800568c:	f7ff bb28 	b.w	8004ce0 <_dtoa_r+0x28>
 8005690:	6932      	ldr	r2, [r6, #16]
 8005692:	3202      	adds	r2, #2
 8005694:	0092      	lsls	r2, r2, #2
 8005696:	f106 010c 	add.w	r1, r6, #12
 800569a:	300c      	adds	r0, #12
 800569c:	f000 fc84 	bl	8005fa8 <memcpy>
 80056a0:	2201      	movs	r2, #1
 80056a2:	4639      	mov	r1, r7
 80056a4:	4628      	mov	r0, r5
 80056a6:	f000 fee5 	bl	8006474 <__lshift>
 80056aa:	9b03      	ldr	r3, [sp, #12]
 80056ac:	3301      	adds	r3, #1
 80056ae:	9308      	str	r3, [sp, #32]
 80056b0:	9b03      	ldr	r3, [sp, #12]
 80056b2:	444b      	add	r3, r9
 80056b4:	930a      	str	r3, [sp, #40]	; 0x28
 80056b6:	9b04      	ldr	r3, [sp, #16]
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	46b0      	mov	r8, r6
 80056be:	9309      	str	r3, [sp, #36]	; 0x24
 80056c0:	4606      	mov	r6, r0
 80056c2:	9b08      	ldr	r3, [sp, #32]
 80056c4:	4621      	mov	r1, r4
 80056c6:	3b01      	subs	r3, #1
 80056c8:	4658      	mov	r0, fp
 80056ca:	9304      	str	r3, [sp, #16]
 80056cc:	f7ff fa6c 	bl	8004ba8 <quorem>
 80056d0:	4603      	mov	r3, r0
 80056d2:	3330      	adds	r3, #48	; 0x30
 80056d4:	9006      	str	r0, [sp, #24]
 80056d6:	4641      	mov	r1, r8
 80056d8:	4658      	mov	r0, fp
 80056da:	930b      	str	r3, [sp, #44]	; 0x2c
 80056dc:	f000 ff3a 	bl	8006554 <__mcmp>
 80056e0:	4632      	mov	r2, r6
 80056e2:	4681      	mov	r9, r0
 80056e4:	4621      	mov	r1, r4
 80056e6:	4628      	mov	r0, r5
 80056e8:	f000 ff50 	bl	800658c <__mdiff>
 80056ec:	68c2      	ldr	r2, [r0, #12]
 80056ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056f0:	4607      	mov	r7, r0
 80056f2:	bb02      	cbnz	r2, 8005736 <_dtoa_r+0xa7e>
 80056f4:	4601      	mov	r1, r0
 80056f6:	4658      	mov	r0, fp
 80056f8:	f000 ff2c 	bl	8006554 <__mcmp>
 80056fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056fe:	4602      	mov	r2, r0
 8005700:	4639      	mov	r1, r7
 8005702:	4628      	mov	r0, r5
 8005704:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005708:	f000 fc9c 	bl	8006044 <_Bfree>
 800570c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800570e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005710:	9f08      	ldr	r7, [sp, #32]
 8005712:	ea43 0102 	orr.w	r1, r3, r2
 8005716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005718:	430b      	orrs	r3, r1
 800571a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800571c:	d10d      	bne.n	800573a <_dtoa_r+0xa82>
 800571e:	2b39      	cmp	r3, #57	; 0x39
 8005720:	d029      	beq.n	8005776 <_dtoa_r+0xabe>
 8005722:	f1b9 0f00 	cmp.w	r9, #0
 8005726:	dd01      	ble.n	800572c <_dtoa_r+0xa74>
 8005728:	9b06      	ldr	r3, [sp, #24]
 800572a:	3331      	adds	r3, #49	; 0x31
 800572c:	9a04      	ldr	r2, [sp, #16]
 800572e:	7013      	strb	r3, [r2, #0]
 8005730:	e776      	b.n	8005620 <_dtoa_r+0x968>
 8005732:	4630      	mov	r0, r6
 8005734:	e7b9      	b.n	80056aa <_dtoa_r+0x9f2>
 8005736:	2201      	movs	r2, #1
 8005738:	e7e2      	b.n	8005700 <_dtoa_r+0xa48>
 800573a:	f1b9 0f00 	cmp.w	r9, #0
 800573e:	db06      	blt.n	800574e <_dtoa_r+0xa96>
 8005740:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005742:	ea41 0909 	orr.w	r9, r1, r9
 8005746:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005748:	ea59 0101 	orrs.w	r1, r9, r1
 800574c:	d120      	bne.n	8005790 <_dtoa_r+0xad8>
 800574e:	2a00      	cmp	r2, #0
 8005750:	ddec      	ble.n	800572c <_dtoa_r+0xa74>
 8005752:	4659      	mov	r1, fp
 8005754:	2201      	movs	r2, #1
 8005756:	4628      	mov	r0, r5
 8005758:	9308      	str	r3, [sp, #32]
 800575a:	f000 fe8b 	bl	8006474 <__lshift>
 800575e:	4621      	mov	r1, r4
 8005760:	4683      	mov	fp, r0
 8005762:	f000 fef7 	bl	8006554 <__mcmp>
 8005766:	2800      	cmp	r0, #0
 8005768:	9b08      	ldr	r3, [sp, #32]
 800576a:	dc02      	bgt.n	8005772 <_dtoa_r+0xaba>
 800576c:	d1de      	bne.n	800572c <_dtoa_r+0xa74>
 800576e:	07da      	lsls	r2, r3, #31
 8005770:	d5dc      	bpl.n	800572c <_dtoa_r+0xa74>
 8005772:	2b39      	cmp	r3, #57	; 0x39
 8005774:	d1d8      	bne.n	8005728 <_dtoa_r+0xa70>
 8005776:	9a04      	ldr	r2, [sp, #16]
 8005778:	2339      	movs	r3, #57	; 0x39
 800577a:	7013      	strb	r3, [r2, #0]
 800577c:	463b      	mov	r3, r7
 800577e:	461f      	mov	r7, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005786:	2a39      	cmp	r2, #57	; 0x39
 8005788:	d050      	beq.n	800582c <_dtoa_r+0xb74>
 800578a:	3201      	adds	r2, #1
 800578c:	701a      	strb	r2, [r3, #0]
 800578e:	e747      	b.n	8005620 <_dtoa_r+0x968>
 8005790:	2a00      	cmp	r2, #0
 8005792:	dd03      	ble.n	800579c <_dtoa_r+0xae4>
 8005794:	2b39      	cmp	r3, #57	; 0x39
 8005796:	d0ee      	beq.n	8005776 <_dtoa_r+0xabe>
 8005798:	3301      	adds	r3, #1
 800579a:	e7c7      	b.n	800572c <_dtoa_r+0xa74>
 800579c:	9a08      	ldr	r2, [sp, #32]
 800579e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80057a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80057a4:	428a      	cmp	r2, r1
 80057a6:	d02a      	beq.n	80057fe <_dtoa_r+0xb46>
 80057a8:	4659      	mov	r1, fp
 80057aa:	2300      	movs	r3, #0
 80057ac:	220a      	movs	r2, #10
 80057ae:	4628      	mov	r0, r5
 80057b0:	f000 fc6a 	bl	8006088 <__multadd>
 80057b4:	45b0      	cmp	r8, r6
 80057b6:	4683      	mov	fp, r0
 80057b8:	f04f 0300 	mov.w	r3, #0
 80057bc:	f04f 020a 	mov.w	r2, #10
 80057c0:	4641      	mov	r1, r8
 80057c2:	4628      	mov	r0, r5
 80057c4:	d107      	bne.n	80057d6 <_dtoa_r+0xb1e>
 80057c6:	f000 fc5f 	bl	8006088 <__multadd>
 80057ca:	4680      	mov	r8, r0
 80057cc:	4606      	mov	r6, r0
 80057ce:	9b08      	ldr	r3, [sp, #32]
 80057d0:	3301      	adds	r3, #1
 80057d2:	9308      	str	r3, [sp, #32]
 80057d4:	e775      	b.n	80056c2 <_dtoa_r+0xa0a>
 80057d6:	f000 fc57 	bl	8006088 <__multadd>
 80057da:	4631      	mov	r1, r6
 80057dc:	4680      	mov	r8, r0
 80057de:	2300      	movs	r3, #0
 80057e0:	220a      	movs	r2, #10
 80057e2:	4628      	mov	r0, r5
 80057e4:	f000 fc50 	bl	8006088 <__multadd>
 80057e8:	4606      	mov	r6, r0
 80057ea:	e7f0      	b.n	80057ce <_dtoa_r+0xb16>
 80057ec:	f1b9 0f00 	cmp.w	r9, #0
 80057f0:	9a03      	ldr	r2, [sp, #12]
 80057f2:	bfcc      	ite	gt
 80057f4:	464f      	movgt	r7, r9
 80057f6:	2701      	movle	r7, #1
 80057f8:	4417      	add	r7, r2
 80057fa:	f04f 0800 	mov.w	r8, #0
 80057fe:	4659      	mov	r1, fp
 8005800:	2201      	movs	r2, #1
 8005802:	4628      	mov	r0, r5
 8005804:	9308      	str	r3, [sp, #32]
 8005806:	f000 fe35 	bl	8006474 <__lshift>
 800580a:	4621      	mov	r1, r4
 800580c:	4683      	mov	fp, r0
 800580e:	f000 fea1 	bl	8006554 <__mcmp>
 8005812:	2800      	cmp	r0, #0
 8005814:	dcb2      	bgt.n	800577c <_dtoa_r+0xac4>
 8005816:	d102      	bne.n	800581e <_dtoa_r+0xb66>
 8005818:	9b08      	ldr	r3, [sp, #32]
 800581a:	07db      	lsls	r3, r3, #31
 800581c:	d4ae      	bmi.n	800577c <_dtoa_r+0xac4>
 800581e:	463b      	mov	r3, r7
 8005820:	461f      	mov	r7, r3
 8005822:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005826:	2a30      	cmp	r2, #48	; 0x30
 8005828:	d0fa      	beq.n	8005820 <_dtoa_r+0xb68>
 800582a:	e6f9      	b.n	8005620 <_dtoa_r+0x968>
 800582c:	9a03      	ldr	r2, [sp, #12]
 800582e:	429a      	cmp	r2, r3
 8005830:	d1a5      	bne.n	800577e <_dtoa_r+0xac6>
 8005832:	f10a 0a01 	add.w	sl, sl, #1
 8005836:	2331      	movs	r3, #49	; 0x31
 8005838:	e779      	b.n	800572e <_dtoa_r+0xa76>
 800583a:	4b14      	ldr	r3, [pc, #80]	; (800588c <_dtoa_r+0xbd4>)
 800583c:	f7ff baa7 	b.w	8004d8e <_dtoa_r+0xd6>
 8005840:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005842:	2b00      	cmp	r3, #0
 8005844:	f47f aa80 	bne.w	8004d48 <_dtoa_r+0x90>
 8005848:	4b11      	ldr	r3, [pc, #68]	; (8005890 <_dtoa_r+0xbd8>)
 800584a:	f7ff baa0 	b.w	8004d8e <_dtoa_r+0xd6>
 800584e:	f1b9 0f00 	cmp.w	r9, #0
 8005852:	dc03      	bgt.n	800585c <_dtoa_r+0xba4>
 8005854:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005856:	2b02      	cmp	r3, #2
 8005858:	f73f aecb 	bgt.w	80055f2 <_dtoa_r+0x93a>
 800585c:	9f03      	ldr	r7, [sp, #12]
 800585e:	4621      	mov	r1, r4
 8005860:	4658      	mov	r0, fp
 8005862:	f7ff f9a1 	bl	8004ba8 <quorem>
 8005866:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800586a:	f807 3b01 	strb.w	r3, [r7], #1
 800586e:	9a03      	ldr	r2, [sp, #12]
 8005870:	1aba      	subs	r2, r7, r2
 8005872:	4591      	cmp	r9, r2
 8005874:	ddba      	ble.n	80057ec <_dtoa_r+0xb34>
 8005876:	4659      	mov	r1, fp
 8005878:	2300      	movs	r3, #0
 800587a:	220a      	movs	r2, #10
 800587c:	4628      	mov	r0, r5
 800587e:	f000 fc03 	bl	8006088 <__multadd>
 8005882:	4683      	mov	fp, r0
 8005884:	e7eb      	b.n	800585e <_dtoa_r+0xba6>
 8005886:	bf00      	nop
 8005888:	08007d30 	.word	0x08007d30
 800588c:	08007b34 	.word	0x08007b34
 8005890:	08007cb1 	.word	0x08007cb1

08005894 <__errno>:
 8005894:	4b01      	ldr	r3, [pc, #4]	; (800589c <__errno+0x8>)
 8005896:	6818      	ldr	r0, [r3, #0]
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	20000044 	.word	0x20000044

080058a0 <rshift>:
 80058a0:	6903      	ldr	r3, [r0, #16]
 80058a2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80058a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058aa:	ea4f 1261 	mov.w	r2, r1, asr #5
 80058ae:	f100 0414 	add.w	r4, r0, #20
 80058b2:	dd45      	ble.n	8005940 <rshift+0xa0>
 80058b4:	f011 011f 	ands.w	r1, r1, #31
 80058b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80058bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80058c0:	d10c      	bne.n	80058dc <rshift+0x3c>
 80058c2:	f100 0710 	add.w	r7, r0, #16
 80058c6:	4629      	mov	r1, r5
 80058c8:	42b1      	cmp	r1, r6
 80058ca:	d334      	bcc.n	8005936 <rshift+0x96>
 80058cc:	1a9b      	subs	r3, r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	1eea      	subs	r2, r5, #3
 80058d2:	4296      	cmp	r6, r2
 80058d4:	bf38      	it	cc
 80058d6:	2300      	movcc	r3, #0
 80058d8:	4423      	add	r3, r4
 80058da:	e015      	b.n	8005908 <rshift+0x68>
 80058dc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80058e0:	f1c1 0820 	rsb	r8, r1, #32
 80058e4:	40cf      	lsrs	r7, r1
 80058e6:	f105 0e04 	add.w	lr, r5, #4
 80058ea:	46a1      	mov	r9, r4
 80058ec:	4576      	cmp	r6, lr
 80058ee:	46f4      	mov	ip, lr
 80058f0:	d815      	bhi.n	800591e <rshift+0x7e>
 80058f2:	1a9a      	subs	r2, r3, r2
 80058f4:	0092      	lsls	r2, r2, #2
 80058f6:	3a04      	subs	r2, #4
 80058f8:	3501      	adds	r5, #1
 80058fa:	42ae      	cmp	r6, r5
 80058fc:	bf38      	it	cc
 80058fe:	2200      	movcc	r2, #0
 8005900:	18a3      	adds	r3, r4, r2
 8005902:	50a7      	str	r7, [r4, r2]
 8005904:	b107      	cbz	r7, 8005908 <rshift+0x68>
 8005906:	3304      	adds	r3, #4
 8005908:	1b1a      	subs	r2, r3, r4
 800590a:	42a3      	cmp	r3, r4
 800590c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005910:	bf08      	it	eq
 8005912:	2300      	moveq	r3, #0
 8005914:	6102      	str	r2, [r0, #16]
 8005916:	bf08      	it	eq
 8005918:	6143      	streq	r3, [r0, #20]
 800591a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800591e:	f8dc c000 	ldr.w	ip, [ip]
 8005922:	fa0c fc08 	lsl.w	ip, ip, r8
 8005926:	ea4c 0707 	orr.w	r7, ip, r7
 800592a:	f849 7b04 	str.w	r7, [r9], #4
 800592e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005932:	40cf      	lsrs	r7, r1
 8005934:	e7da      	b.n	80058ec <rshift+0x4c>
 8005936:	f851 cb04 	ldr.w	ip, [r1], #4
 800593a:	f847 cf04 	str.w	ip, [r7, #4]!
 800593e:	e7c3      	b.n	80058c8 <rshift+0x28>
 8005940:	4623      	mov	r3, r4
 8005942:	e7e1      	b.n	8005908 <rshift+0x68>

08005944 <__hexdig_fun>:
 8005944:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005948:	2b09      	cmp	r3, #9
 800594a:	d802      	bhi.n	8005952 <__hexdig_fun+0xe>
 800594c:	3820      	subs	r0, #32
 800594e:	b2c0      	uxtb	r0, r0
 8005950:	4770      	bx	lr
 8005952:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005956:	2b05      	cmp	r3, #5
 8005958:	d801      	bhi.n	800595e <__hexdig_fun+0x1a>
 800595a:	3847      	subs	r0, #71	; 0x47
 800595c:	e7f7      	b.n	800594e <__hexdig_fun+0xa>
 800595e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005962:	2b05      	cmp	r3, #5
 8005964:	d801      	bhi.n	800596a <__hexdig_fun+0x26>
 8005966:	3827      	subs	r0, #39	; 0x27
 8005968:	e7f1      	b.n	800594e <__hexdig_fun+0xa>
 800596a:	2000      	movs	r0, #0
 800596c:	4770      	bx	lr
	...

08005970 <__gethex>:
 8005970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005974:	b08b      	sub	sp, #44	; 0x2c
 8005976:	468b      	mov	fp, r1
 8005978:	9305      	str	r3, [sp, #20]
 800597a:	4bb2      	ldr	r3, [pc, #712]	; (8005c44 <__gethex+0x2d4>)
 800597c:	9002      	str	r0, [sp, #8]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	9303      	str	r3, [sp, #12]
 8005982:	4618      	mov	r0, r3
 8005984:	4690      	mov	r8, r2
 8005986:	f7fa fc2b 	bl	80001e0 <strlen>
 800598a:	9b03      	ldr	r3, [sp, #12]
 800598c:	f8db 2000 	ldr.w	r2, [fp]
 8005990:	4403      	add	r3, r0
 8005992:	4682      	mov	sl, r0
 8005994:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005998:	9306      	str	r3, [sp, #24]
 800599a:	1c93      	adds	r3, r2, #2
 800599c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80059a0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80059a4:	32fe      	adds	r2, #254	; 0xfe
 80059a6:	18d1      	adds	r1, r2, r3
 80059a8:	461f      	mov	r7, r3
 80059aa:	f813 0b01 	ldrb.w	r0, [r3], #1
 80059ae:	9101      	str	r1, [sp, #4]
 80059b0:	2830      	cmp	r0, #48	; 0x30
 80059b2:	d0f8      	beq.n	80059a6 <__gethex+0x36>
 80059b4:	f7ff ffc6 	bl	8005944 <__hexdig_fun>
 80059b8:	4604      	mov	r4, r0
 80059ba:	2800      	cmp	r0, #0
 80059bc:	d13a      	bne.n	8005a34 <__gethex+0xc4>
 80059be:	9903      	ldr	r1, [sp, #12]
 80059c0:	4652      	mov	r2, sl
 80059c2:	4638      	mov	r0, r7
 80059c4:	f001 fa16 	bl	8006df4 <strncmp>
 80059c8:	4605      	mov	r5, r0
 80059ca:	2800      	cmp	r0, #0
 80059cc:	d166      	bne.n	8005a9c <__gethex+0x12c>
 80059ce:	f817 000a 	ldrb.w	r0, [r7, sl]
 80059d2:	eb07 060a 	add.w	r6, r7, sl
 80059d6:	f7ff ffb5 	bl	8005944 <__hexdig_fun>
 80059da:	2800      	cmp	r0, #0
 80059dc:	d060      	beq.n	8005aa0 <__gethex+0x130>
 80059de:	4633      	mov	r3, r6
 80059e0:	7818      	ldrb	r0, [r3, #0]
 80059e2:	2830      	cmp	r0, #48	; 0x30
 80059e4:	461f      	mov	r7, r3
 80059e6:	f103 0301 	add.w	r3, r3, #1
 80059ea:	d0f9      	beq.n	80059e0 <__gethex+0x70>
 80059ec:	f7ff ffaa 	bl	8005944 <__hexdig_fun>
 80059f0:	2301      	movs	r3, #1
 80059f2:	fab0 f480 	clz	r4, r0
 80059f6:	0964      	lsrs	r4, r4, #5
 80059f8:	4635      	mov	r5, r6
 80059fa:	9301      	str	r3, [sp, #4]
 80059fc:	463a      	mov	r2, r7
 80059fe:	4616      	mov	r6, r2
 8005a00:	3201      	adds	r2, #1
 8005a02:	7830      	ldrb	r0, [r6, #0]
 8005a04:	f7ff ff9e 	bl	8005944 <__hexdig_fun>
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	d1f8      	bne.n	80059fe <__gethex+0x8e>
 8005a0c:	9903      	ldr	r1, [sp, #12]
 8005a0e:	4652      	mov	r2, sl
 8005a10:	4630      	mov	r0, r6
 8005a12:	f001 f9ef 	bl	8006df4 <strncmp>
 8005a16:	b980      	cbnz	r0, 8005a3a <__gethex+0xca>
 8005a18:	b94d      	cbnz	r5, 8005a2e <__gethex+0xbe>
 8005a1a:	eb06 050a 	add.w	r5, r6, sl
 8005a1e:	462a      	mov	r2, r5
 8005a20:	4616      	mov	r6, r2
 8005a22:	3201      	adds	r2, #1
 8005a24:	7830      	ldrb	r0, [r6, #0]
 8005a26:	f7ff ff8d 	bl	8005944 <__hexdig_fun>
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	d1f8      	bne.n	8005a20 <__gethex+0xb0>
 8005a2e:	1bad      	subs	r5, r5, r6
 8005a30:	00ad      	lsls	r5, r5, #2
 8005a32:	e004      	b.n	8005a3e <__gethex+0xce>
 8005a34:	2400      	movs	r4, #0
 8005a36:	4625      	mov	r5, r4
 8005a38:	e7e0      	b.n	80059fc <__gethex+0x8c>
 8005a3a:	2d00      	cmp	r5, #0
 8005a3c:	d1f7      	bne.n	8005a2e <__gethex+0xbe>
 8005a3e:	7833      	ldrb	r3, [r6, #0]
 8005a40:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005a44:	2b50      	cmp	r3, #80	; 0x50
 8005a46:	d139      	bne.n	8005abc <__gethex+0x14c>
 8005a48:	7873      	ldrb	r3, [r6, #1]
 8005a4a:	2b2b      	cmp	r3, #43	; 0x2b
 8005a4c:	d02a      	beq.n	8005aa4 <__gethex+0x134>
 8005a4e:	2b2d      	cmp	r3, #45	; 0x2d
 8005a50:	d02c      	beq.n	8005aac <__gethex+0x13c>
 8005a52:	1c71      	adds	r1, r6, #1
 8005a54:	f04f 0900 	mov.w	r9, #0
 8005a58:	7808      	ldrb	r0, [r1, #0]
 8005a5a:	f7ff ff73 	bl	8005944 <__hexdig_fun>
 8005a5e:	1e43      	subs	r3, r0, #1
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b18      	cmp	r3, #24
 8005a64:	d82a      	bhi.n	8005abc <__gethex+0x14c>
 8005a66:	f1a0 0210 	sub.w	r2, r0, #16
 8005a6a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005a6e:	f7ff ff69 	bl	8005944 <__hexdig_fun>
 8005a72:	1e43      	subs	r3, r0, #1
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b18      	cmp	r3, #24
 8005a78:	d91b      	bls.n	8005ab2 <__gethex+0x142>
 8005a7a:	f1b9 0f00 	cmp.w	r9, #0
 8005a7e:	d000      	beq.n	8005a82 <__gethex+0x112>
 8005a80:	4252      	negs	r2, r2
 8005a82:	4415      	add	r5, r2
 8005a84:	f8cb 1000 	str.w	r1, [fp]
 8005a88:	b1d4      	cbz	r4, 8005ac0 <__gethex+0x150>
 8005a8a:	9b01      	ldr	r3, [sp, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	bf14      	ite	ne
 8005a90:	2700      	movne	r7, #0
 8005a92:	2706      	moveq	r7, #6
 8005a94:	4638      	mov	r0, r7
 8005a96:	b00b      	add	sp, #44	; 0x2c
 8005a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a9c:	463e      	mov	r6, r7
 8005a9e:	4625      	mov	r5, r4
 8005aa0:	2401      	movs	r4, #1
 8005aa2:	e7cc      	b.n	8005a3e <__gethex+0xce>
 8005aa4:	f04f 0900 	mov.w	r9, #0
 8005aa8:	1cb1      	adds	r1, r6, #2
 8005aaa:	e7d5      	b.n	8005a58 <__gethex+0xe8>
 8005aac:	f04f 0901 	mov.w	r9, #1
 8005ab0:	e7fa      	b.n	8005aa8 <__gethex+0x138>
 8005ab2:	230a      	movs	r3, #10
 8005ab4:	fb03 0202 	mla	r2, r3, r2, r0
 8005ab8:	3a10      	subs	r2, #16
 8005aba:	e7d6      	b.n	8005a6a <__gethex+0xfa>
 8005abc:	4631      	mov	r1, r6
 8005abe:	e7e1      	b.n	8005a84 <__gethex+0x114>
 8005ac0:	1bf3      	subs	r3, r6, r7
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	2b07      	cmp	r3, #7
 8005ac8:	dc0a      	bgt.n	8005ae0 <__gethex+0x170>
 8005aca:	9802      	ldr	r0, [sp, #8]
 8005acc:	f000 fa7a 	bl	8005fc4 <_Balloc>
 8005ad0:	4604      	mov	r4, r0
 8005ad2:	b940      	cbnz	r0, 8005ae6 <__gethex+0x176>
 8005ad4:	4b5c      	ldr	r3, [pc, #368]	; (8005c48 <__gethex+0x2d8>)
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	21de      	movs	r1, #222	; 0xde
 8005ada:	485c      	ldr	r0, [pc, #368]	; (8005c4c <__gethex+0x2dc>)
 8005adc:	f001 f9ac 	bl	8006e38 <__assert_func>
 8005ae0:	3101      	adds	r1, #1
 8005ae2:	105b      	asrs	r3, r3, #1
 8005ae4:	e7ef      	b.n	8005ac6 <__gethex+0x156>
 8005ae6:	f100 0914 	add.w	r9, r0, #20
 8005aea:	f04f 0b00 	mov.w	fp, #0
 8005aee:	f1ca 0301 	rsb	r3, sl, #1
 8005af2:	f8cd 9010 	str.w	r9, [sp, #16]
 8005af6:	f8cd b004 	str.w	fp, [sp, #4]
 8005afa:	9308      	str	r3, [sp, #32]
 8005afc:	42b7      	cmp	r7, r6
 8005afe:	d33f      	bcc.n	8005b80 <__gethex+0x210>
 8005b00:	9f04      	ldr	r7, [sp, #16]
 8005b02:	9b01      	ldr	r3, [sp, #4]
 8005b04:	f847 3b04 	str.w	r3, [r7], #4
 8005b08:	eba7 0709 	sub.w	r7, r7, r9
 8005b0c:	10bf      	asrs	r7, r7, #2
 8005b0e:	6127      	str	r7, [r4, #16]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 fb49 	bl	80061a8 <__hi0bits>
 8005b16:	017f      	lsls	r7, r7, #5
 8005b18:	f8d8 6000 	ldr.w	r6, [r8]
 8005b1c:	1a3f      	subs	r7, r7, r0
 8005b1e:	42b7      	cmp	r7, r6
 8005b20:	dd62      	ble.n	8005be8 <__gethex+0x278>
 8005b22:	1bbf      	subs	r7, r7, r6
 8005b24:	4639      	mov	r1, r7
 8005b26:	4620      	mov	r0, r4
 8005b28:	f000 fedf 	bl	80068ea <__any_on>
 8005b2c:	4682      	mov	sl, r0
 8005b2e:	b1a8      	cbz	r0, 8005b5c <__gethex+0x1ec>
 8005b30:	1e7b      	subs	r3, r7, #1
 8005b32:	1159      	asrs	r1, r3, #5
 8005b34:	f003 021f 	and.w	r2, r3, #31
 8005b38:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005b3c:	f04f 0a01 	mov.w	sl, #1
 8005b40:	fa0a f202 	lsl.w	r2, sl, r2
 8005b44:	420a      	tst	r2, r1
 8005b46:	d009      	beq.n	8005b5c <__gethex+0x1ec>
 8005b48:	4553      	cmp	r3, sl
 8005b4a:	dd05      	ble.n	8005b58 <__gethex+0x1e8>
 8005b4c:	1eb9      	subs	r1, r7, #2
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f000 fecb 	bl	80068ea <__any_on>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	d144      	bne.n	8005be2 <__gethex+0x272>
 8005b58:	f04f 0a02 	mov.w	sl, #2
 8005b5c:	4639      	mov	r1, r7
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f7ff fe9e 	bl	80058a0 <rshift>
 8005b64:	443d      	add	r5, r7
 8005b66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005b6a:	42ab      	cmp	r3, r5
 8005b6c:	da4a      	bge.n	8005c04 <__gethex+0x294>
 8005b6e:	9802      	ldr	r0, [sp, #8]
 8005b70:	4621      	mov	r1, r4
 8005b72:	f000 fa67 	bl	8006044 <_Bfree>
 8005b76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005b78:	2300      	movs	r3, #0
 8005b7a:	6013      	str	r3, [r2, #0]
 8005b7c:	27a3      	movs	r7, #163	; 0xa3
 8005b7e:	e789      	b.n	8005a94 <__gethex+0x124>
 8005b80:	1e73      	subs	r3, r6, #1
 8005b82:	9a06      	ldr	r2, [sp, #24]
 8005b84:	9307      	str	r3, [sp, #28]
 8005b86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d019      	beq.n	8005bc2 <__gethex+0x252>
 8005b8e:	f1bb 0f20 	cmp.w	fp, #32
 8005b92:	d107      	bne.n	8005ba4 <__gethex+0x234>
 8005b94:	9b04      	ldr	r3, [sp, #16]
 8005b96:	9a01      	ldr	r2, [sp, #4]
 8005b98:	f843 2b04 	str.w	r2, [r3], #4
 8005b9c:	9304      	str	r3, [sp, #16]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	9301      	str	r3, [sp, #4]
 8005ba2:	469b      	mov	fp, r3
 8005ba4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005ba8:	f7ff fecc 	bl	8005944 <__hexdig_fun>
 8005bac:	9b01      	ldr	r3, [sp, #4]
 8005bae:	f000 000f 	and.w	r0, r0, #15
 8005bb2:	fa00 f00b 	lsl.w	r0, r0, fp
 8005bb6:	4303      	orrs	r3, r0
 8005bb8:	9301      	str	r3, [sp, #4]
 8005bba:	f10b 0b04 	add.w	fp, fp, #4
 8005bbe:	9b07      	ldr	r3, [sp, #28]
 8005bc0:	e00d      	b.n	8005bde <__gethex+0x26e>
 8005bc2:	9a08      	ldr	r2, [sp, #32]
 8005bc4:	1e73      	subs	r3, r6, #1
 8005bc6:	4413      	add	r3, r2
 8005bc8:	42bb      	cmp	r3, r7
 8005bca:	d3e0      	bcc.n	8005b8e <__gethex+0x21e>
 8005bcc:	4618      	mov	r0, r3
 8005bce:	9903      	ldr	r1, [sp, #12]
 8005bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8005bd2:	4652      	mov	r2, sl
 8005bd4:	f001 f90e 	bl	8006df4 <strncmp>
 8005bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	d1d7      	bne.n	8005b8e <__gethex+0x21e>
 8005bde:	461e      	mov	r6, r3
 8005be0:	e78c      	b.n	8005afc <__gethex+0x18c>
 8005be2:	f04f 0a03 	mov.w	sl, #3
 8005be6:	e7b9      	b.n	8005b5c <__gethex+0x1ec>
 8005be8:	da09      	bge.n	8005bfe <__gethex+0x28e>
 8005bea:	1bf7      	subs	r7, r6, r7
 8005bec:	4621      	mov	r1, r4
 8005bee:	9802      	ldr	r0, [sp, #8]
 8005bf0:	463a      	mov	r2, r7
 8005bf2:	f000 fc3f 	bl	8006474 <__lshift>
 8005bf6:	1bed      	subs	r5, r5, r7
 8005bf8:	4604      	mov	r4, r0
 8005bfa:	f100 0914 	add.w	r9, r0, #20
 8005bfe:	f04f 0a00 	mov.w	sl, #0
 8005c02:	e7b0      	b.n	8005b66 <__gethex+0x1f6>
 8005c04:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005c08:	42a8      	cmp	r0, r5
 8005c0a:	dd71      	ble.n	8005cf0 <__gethex+0x380>
 8005c0c:	1b45      	subs	r5, r0, r5
 8005c0e:	42ae      	cmp	r6, r5
 8005c10:	dc35      	bgt.n	8005c7e <__gethex+0x30e>
 8005c12:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d029      	beq.n	8005c6e <__gethex+0x2fe>
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d02b      	beq.n	8005c76 <__gethex+0x306>
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d11c      	bne.n	8005c5c <__gethex+0x2ec>
 8005c22:	42ae      	cmp	r6, r5
 8005c24:	d11a      	bne.n	8005c5c <__gethex+0x2ec>
 8005c26:	2e01      	cmp	r6, #1
 8005c28:	d112      	bne.n	8005c50 <__gethex+0x2e0>
 8005c2a:	9a05      	ldr	r2, [sp, #20]
 8005c2c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005c30:	6013      	str	r3, [r2, #0]
 8005c32:	2301      	movs	r3, #1
 8005c34:	6123      	str	r3, [r4, #16]
 8005c36:	f8c9 3000 	str.w	r3, [r9]
 8005c3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c3c:	2762      	movs	r7, #98	; 0x62
 8005c3e:	601c      	str	r4, [r3, #0]
 8005c40:	e728      	b.n	8005a94 <__gethex+0x124>
 8005c42:	bf00      	nop
 8005c44:	08007da8 	.word	0x08007da8
 8005c48:	08007d30 	.word	0x08007d30
 8005c4c:	08007d41 	.word	0x08007d41
 8005c50:	1e71      	subs	r1, r6, #1
 8005c52:	4620      	mov	r0, r4
 8005c54:	f000 fe49 	bl	80068ea <__any_on>
 8005c58:	2800      	cmp	r0, #0
 8005c5a:	d1e6      	bne.n	8005c2a <__gethex+0x2ba>
 8005c5c:	9802      	ldr	r0, [sp, #8]
 8005c5e:	4621      	mov	r1, r4
 8005c60:	f000 f9f0 	bl	8006044 <_Bfree>
 8005c64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005c66:	2300      	movs	r3, #0
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	2750      	movs	r7, #80	; 0x50
 8005c6c:	e712      	b.n	8005a94 <__gethex+0x124>
 8005c6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1f3      	bne.n	8005c5c <__gethex+0x2ec>
 8005c74:	e7d9      	b.n	8005c2a <__gethex+0x2ba>
 8005c76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1d6      	bne.n	8005c2a <__gethex+0x2ba>
 8005c7c:	e7ee      	b.n	8005c5c <__gethex+0x2ec>
 8005c7e:	1e6f      	subs	r7, r5, #1
 8005c80:	f1ba 0f00 	cmp.w	sl, #0
 8005c84:	d131      	bne.n	8005cea <__gethex+0x37a>
 8005c86:	b127      	cbz	r7, 8005c92 <__gethex+0x322>
 8005c88:	4639      	mov	r1, r7
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	f000 fe2d 	bl	80068ea <__any_on>
 8005c90:	4682      	mov	sl, r0
 8005c92:	117b      	asrs	r3, r7, #5
 8005c94:	2101      	movs	r1, #1
 8005c96:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005c9a:	f007 071f 	and.w	r7, r7, #31
 8005c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8005ca2:	421f      	tst	r7, r3
 8005ca4:	4629      	mov	r1, r5
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	bf18      	it	ne
 8005caa:	f04a 0a02 	orrne.w	sl, sl, #2
 8005cae:	1b76      	subs	r6, r6, r5
 8005cb0:	f7ff fdf6 	bl	80058a0 <rshift>
 8005cb4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005cb8:	2702      	movs	r7, #2
 8005cba:	f1ba 0f00 	cmp.w	sl, #0
 8005cbe:	d048      	beq.n	8005d52 <__gethex+0x3e2>
 8005cc0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d015      	beq.n	8005cf4 <__gethex+0x384>
 8005cc8:	2b03      	cmp	r3, #3
 8005cca:	d017      	beq.n	8005cfc <__gethex+0x38c>
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d109      	bne.n	8005ce4 <__gethex+0x374>
 8005cd0:	f01a 0f02 	tst.w	sl, #2
 8005cd4:	d006      	beq.n	8005ce4 <__gethex+0x374>
 8005cd6:	f8d9 0000 	ldr.w	r0, [r9]
 8005cda:	ea4a 0a00 	orr.w	sl, sl, r0
 8005cde:	f01a 0f01 	tst.w	sl, #1
 8005ce2:	d10e      	bne.n	8005d02 <__gethex+0x392>
 8005ce4:	f047 0710 	orr.w	r7, r7, #16
 8005ce8:	e033      	b.n	8005d52 <__gethex+0x3e2>
 8005cea:	f04f 0a01 	mov.w	sl, #1
 8005cee:	e7d0      	b.n	8005c92 <__gethex+0x322>
 8005cf0:	2701      	movs	r7, #1
 8005cf2:	e7e2      	b.n	8005cba <__gethex+0x34a>
 8005cf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005cf6:	f1c3 0301 	rsb	r3, r3, #1
 8005cfa:	9315      	str	r3, [sp, #84]	; 0x54
 8005cfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d0f0      	beq.n	8005ce4 <__gethex+0x374>
 8005d02:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005d06:	f104 0314 	add.w	r3, r4, #20
 8005d0a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005d0e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005d12:	f04f 0c00 	mov.w	ip, #0
 8005d16:	4618      	mov	r0, r3
 8005d18:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d1c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8005d20:	d01c      	beq.n	8005d5c <__gethex+0x3ec>
 8005d22:	3201      	adds	r2, #1
 8005d24:	6002      	str	r2, [r0, #0]
 8005d26:	2f02      	cmp	r7, #2
 8005d28:	f104 0314 	add.w	r3, r4, #20
 8005d2c:	d13d      	bne.n	8005daa <__gethex+0x43a>
 8005d2e:	f8d8 2000 	ldr.w	r2, [r8]
 8005d32:	3a01      	subs	r2, #1
 8005d34:	42b2      	cmp	r2, r6
 8005d36:	d10a      	bne.n	8005d4e <__gethex+0x3de>
 8005d38:	1171      	asrs	r1, r6, #5
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005d40:	f006 061f 	and.w	r6, r6, #31
 8005d44:	fa02 f606 	lsl.w	r6, r2, r6
 8005d48:	421e      	tst	r6, r3
 8005d4a:	bf18      	it	ne
 8005d4c:	4617      	movne	r7, r2
 8005d4e:	f047 0720 	orr.w	r7, r7, #32
 8005d52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d54:	601c      	str	r4, [r3, #0]
 8005d56:	9b05      	ldr	r3, [sp, #20]
 8005d58:	601d      	str	r5, [r3, #0]
 8005d5a:	e69b      	b.n	8005a94 <__gethex+0x124>
 8005d5c:	4299      	cmp	r1, r3
 8005d5e:	f843 cc04 	str.w	ip, [r3, #-4]
 8005d62:	d8d8      	bhi.n	8005d16 <__gethex+0x3a6>
 8005d64:	68a3      	ldr	r3, [r4, #8]
 8005d66:	459b      	cmp	fp, r3
 8005d68:	db17      	blt.n	8005d9a <__gethex+0x42a>
 8005d6a:	6861      	ldr	r1, [r4, #4]
 8005d6c:	9802      	ldr	r0, [sp, #8]
 8005d6e:	3101      	adds	r1, #1
 8005d70:	f000 f928 	bl	8005fc4 <_Balloc>
 8005d74:	4681      	mov	r9, r0
 8005d76:	b918      	cbnz	r0, 8005d80 <__gethex+0x410>
 8005d78:	4b1a      	ldr	r3, [pc, #104]	; (8005de4 <__gethex+0x474>)
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	2184      	movs	r1, #132	; 0x84
 8005d7e:	e6ac      	b.n	8005ada <__gethex+0x16a>
 8005d80:	6922      	ldr	r2, [r4, #16]
 8005d82:	3202      	adds	r2, #2
 8005d84:	f104 010c 	add.w	r1, r4, #12
 8005d88:	0092      	lsls	r2, r2, #2
 8005d8a:	300c      	adds	r0, #12
 8005d8c:	f000 f90c 	bl	8005fa8 <memcpy>
 8005d90:	4621      	mov	r1, r4
 8005d92:	9802      	ldr	r0, [sp, #8]
 8005d94:	f000 f956 	bl	8006044 <_Bfree>
 8005d98:	464c      	mov	r4, r9
 8005d9a:	6923      	ldr	r3, [r4, #16]
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005da2:	6122      	str	r2, [r4, #16]
 8005da4:	2201      	movs	r2, #1
 8005da6:	615a      	str	r2, [r3, #20]
 8005da8:	e7bd      	b.n	8005d26 <__gethex+0x3b6>
 8005daa:	6922      	ldr	r2, [r4, #16]
 8005dac:	455a      	cmp	r2, fp
 8005dae:	dd0b      	ble.n	8005dc8 <__gethex+0x458>
 8005db0:	2101      	movs	r1, #1
 8005db2:	4620      	mov	r0, r4
 8005db4:	f7ff fd74 	bl	80058a0 <rshift>
 8005db8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005dbc:	3501      	adds	r5, #1
 8005dbe:	42ab      	cmp	r3, r5
 8005dc0:	f6ff aed5 	blt.w	8005b6e <__gethex+0x1fe>
 8005dc4:	2701      	movs	r7, #1
 8005dc6:	e7c2      	b.n	8005d4e <__gethex+0x3de>
 8005dc8:	f016 061f 	ands.w	r6, r6, #31
 8005dcc:	d0fa      	beq.n	8005dc4 <__gethex+0x454>
 8005dce:	4453      	add	r3, sl
 8005dd0:	f1c6 0620 	rsb	r6, r6, #32
 8005dd4:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005dd8:	f000 f9e6 	bl	80061a8 <__hi0bits>
 8005ddc:	42b0      	cmp	r0, r6
 8005dde:	dbe7      	blt.n	8005db0 <__gethex+0x440>
 8005de0:	e7f0      	b.n	8005dc4 <__gethex+0x454>
 8005de2:	bf00      	nop
 8005de4:	08007d30 	.word	0x08007d30

08005de8 <L_shift>:
 8005de8:	f1c2 0208 	rsb	r2, r2, #8
 8005dec:	0092      	lsls	r2, r2, #2
 8005dee:	b570      	push	{r4, r5, r6, lr}
 8005df0:	f1c2 0620 	rsb	r6, r2, #32
 8005df4:	6843      	ldr	r3, [r0, #4]
 8005df6:	6804      	ldr	r4, [r0, #0]
 8005df8:	fa03 f506 	lsl.w	r5, r3, r6
 8005dfc:	432c      	orrs	r4, r5
 8005dfe:	40d3      	lsrs	r3, r2
 8005e00:	6004      	str	r4, [r0, #0]
 8005e02:	f840 3f04 	str.w	r3, [r0, #4]!
 8005e06:	4288      	cmp	r0, r1
 8005e08:	d3f4      	bcc.n	8005df4 <L_shift+0xc>
 8005e0a:	bd70      	pop	{r4, r5, r6, pc}

08005e0c <__match>:
 8005e0c:	b530      	push	{r4, r5, lr}
 8005e0e:	6803      	ldr	r3, [r0, #0]
 8005e10:	3301      	adds	r3, #1
 8005e12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e16:	b914      	cbnz	r4, 8005e1e <__match+0x12>
 8005e18:	6003      	str	r3, [r0, #0]
 8005e1a:	2001      	movs	r0, #1
 8005e1c:	bd30      	pop	{r4, r5, pc}
 8005e1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e22:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005e26:	2d19      	cmp	r5, #25
 8005e28:	bf98      	it	ls
 8005e2a:	3220      	addls	r2, #32
 8005e2c:	42a2      	cmp	r2, r4
 8005e2e:	d0f0      	beq.n	8005e12 <__match+0x6>
 8005e30:	2000      	movs	r0, #0
 8005e32:	e7f3      	b.n	8005e1c <__match+0x10>

08005e34 <__hexnan>:
 8005e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e38:	680b      	ldr	r3, [r1, #0]
 8005e3a:	115e      	asrs	r6, r3, #5
 8005e3c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005e40:	f013 031f 	ands.w	r3, r3, #31
 8005e44:	b087      	sub	sp, #28
 8005e46:	bf18      	it	ne
 8005e48:	3604      	addne	r6, #4
 8005e4a:	2500      	movs	r5, #0
 8005e4c:	1f37      	subs	r7, r6, #4
 8005e4e:	4690      	mov	r8, r2
 8005e50:	6802      	ldr	r2, [r0, #0]
 8005e52:	9301      	str	r3, [sp, #4]
 8005e54:	4682      	mov	sl, r0
 8005e56:	f846 5c04 	str.w	r5, [r6, #-4]
 8005e5a:	46b9      	mov	r9, r7
 8005e5c:	463c      	mov	r4, r7
 8005e5e:	9502      	str	r5, [sp, #8]
 8005e60:	46ab      	mov	fp, r5
 8005e62:	7851      	ldrb	r1, [r2, #1]
 8005e64:	1c53      	adds	r3, r2, #1
 8005e66:	9303      	str	r3, [sp, #12]
 8005e68:	b341      	cbz	r1, 8005ebc <__hexnan+0x88>
 8005e6a:	4608      	mov	r0, r1
 8005e6c:	9205      	str	r2, [sp, #20]
 8005e6e:	9104      	str	r1, [sp, #16]
 8005e70:	f7ff fd68 	bl	8005944 <__hexdig_fun>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	d14f      	bne.n	8005f18 <__hexnan+0xe4>
 8005e78:	9904      	ldr	r1, [sp, #16]
 8005e7a:	9a05      	ldr	r2, [sp, #20]
 8005e7c:	2920      	cmp	r1, #32
 8005e7e:	d818      	bhi.n	8005eb2 <__hexnan+0x7e>
 8005e80:	9b02      	ldr	r3, [sp, #8]
 8005e82:	459b      	cmp	fp, r3
 8005e84:	dd13      	ble.n	8005eae <__hexnan+0x7a>
 8005e86:	454c      	cmp	r4, r9
 8005e88:	d206      	bcs.n	8005e98 <__hexnan+0x64>
 8005e8a:	2d07      	cmp	r5, #7
 8005e8c:	dc04      	bgt.n	8005e98 <__hexnan+0x64>
 8005e8e:	462a      	mov	r2, r5
 8005e90:	4649      	mov	r1, r9
 8005e92:	4620      	mov	r0, r4
 8005e94:	f7ff ffa8 	bl	8005de8 <L_shift>
 8005e98:	4544      	cmp	r4, r8
 8005e9a:	d950      	bls.n	8005f3e <__hexnan+0x10a>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f1a4 0904 	sub.w	r9, r4, #4
 8005ea2:	f844 3c04 	str.w	r3, [r4, #-4]
 8005ea6:	f8cd b008 	str.w	fp, [sp, #8]
 8005eaa:	464c      	mov	r4, r9
 8005eac:	461d      	mov	r5, r3
 8005eae:	9a03      	ldr	r2, [sp, #12]
 8005eb0:	e7d7      	b.n	8005e62 <__hexnan+0x2e>
 8005eb2:	2929      	cmp	r1, #41	; 0x29
 8005eb4:	d156      	bne.n	8005f64 <__hexnan+0x130>
 8005eb6:	3202      	adds	r2, #2
 8005eb8:	f8ca 2000 	str.w	r2, [sl]
 8005ebc:	f1bb 0f00 	cmp.w	fp, #0
 8005ec0:	d050      	beq.n	8005f64 <__hexnan+0x130>
 8005ec2:	454c      	cmp	r4, r9
 8005ec4:	d206      	bcs.n	8005ed4 <__hexnan+0xa0>
 8005ec6:	2d07      	cmp	r5, #7
 8005ec8:	dc04      	bgt.n	8005ed4 <__hexnan+0xa0>
 8005eca:	462a      	mov	r2, r5
 8005ecc:	4649      	mov	r1, r9
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f7ff ff8a 	bl	8005de8 <L_shift>
 8005ed4:	4544      	cmp	r4, r8
 8005ed6:	d934      	bls.n	8005f42 <__hexnan+0x10e>
 8005ed8:	f1a8 0204 	sub.w	r2, r8, #4
 8005edc:	4623      	mov	r3, r4
 8005ede:	f853 1b04 	ldr.w	r1, [r3], #4
 8005ee2:	f842 1f04 	str.w	r1, [r2, #4]!
 8005ee6:	429f      	cmp	r7, r3
 8005ee8:	d2f9      	bcs.n	8005ede <__hexnan+0xaa>
 8005eea:	1b3b      	subs	r3, r7, r4
 8005eec:	f023 0303 	bic.w	r3, r3, #3
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	3401      	adds	r4, #1
 8005ef4:	3e03      	subs	r6, #3
 8005ef6:	42b4      	cmp	r4, r6
 8005ef8:	bf88      	it	hi
 8005efa:	2304      	movhi	r3, #4
 8005efc:	4443      	add	r3, r8
 8005efe:	2200      	movs	r2, #0
 8005f00:	f843 2b04 	str.w	r2, [r3], #4
 8005f04:	429f      	cmp	r7, r3
 8005f06:	d2fb      	bcs.n	8005f00 <__hexnan+0xcc>
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	b91b      	cbnz	r3, 8005f14 <__hexnan+0xe0>
 8005f0c:	4547      	cmp	r7, r8
 8005f0e:	d127      	bne.n	8005f60 <__hexnan+0x12c>
 8005f10:	2301      	movs	r3, #1
 8005f12:	603b      	str	r3, [r7, #0]
 8005f14:	2005      	movs	r0, #5
 8005f16:	e026      	b.n	8005f66 <__hexnan+0x132>
 8005f18:	3501      	adds	r5, #1
 8005f1a:	2d08      	cmp	r5, #8
 8005f1c:	f10b 0b01 	add.w	fp, fp, #1
 8005f20:	dd06      	ble.n	8005f30 <__hexnan+0xfc>
 8005f22:	4544      	cmp	r4, r8
 8005f24:	d9c3      	bls.n	8005eae <__hexnan+0x7a>
 8005f26:	2300      	movs	r3, #0
 8005f28:	f844 3c04 	str.w	r3, [r4, #-4]
 8005f2c:	2501      	movs	r5, #1
 8005f2e:	3c04      	subs	r4, #4
 8005f30:	6822      	ldr	r2, [r4, #0]
 8005f32:	f000 000f 	and.w	r0, r0, #15
 8005f36:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005f3a:	6022      	str	r2, [r4, #0]
 8005f3c:	e7b7      	b.n	8005eae <__hexnan+0x7a>
 8005f3e:	2508      	movs	r5, #8
 8005f40:	e7b5      	b.n	8005eae <__hexnan+0x7a>
 8005f42:	9b01      	ldr	r3, [sp, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d0df      	beq.n	8005f08 <__hexnan+0xd4>
 8005f48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f4c:	f1c3 0320 	rsb	r3, r3, #32
 8005f50:	fa22 f303 	lsr.w	r3, r2, r3
 8005f54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005f58:	401a      	ands	r2, r3
 8005f5a:	f846 2c04 	str.w	r2, [r6, #-4]
 8005f5e:	e7d3      	b.n	8005f08 <__hexnan+0xd4>
 8005f60:	3f04      	subs	r7, #4
 8005f62:	e7d1      	b.n	8005f08 <__hexnan+0xd4>
 8005f64:	2004      	movs	r0, #4
 8005f66:	b007      	add	sp, #28
 8005f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005f6c <_localeconv_r>:
 8005f6c:	4800      	ldr	r0, [pc, #0]	; (8005f70 <_localeconv_r+0x4>)
 8005f6e:	4770      	bx	lr
 8005f70:	2000019c 	.word	0x2000019c

08005f74 <malloc>:
 8005f74:	4b02      	ldr	r3, [pc, #8]	; (8005f80 <malloc+0xc>)
 8005f76:	4601      	mov	r1, r0
 8005f78:	6818      	ldr	r0, [r3, #0]
 8005f7a:	f000 bd55 	b.w	8006a28 <_malloc_r>
 8005f7e:	bf00      	nop
 8005f80:	20000044 	.word	0x20000044

08005f84 <__ascii_mbtowc>:
 8005f84:	b082      	sub	sp, #8
 8005f86:	b901      	cbnz	r1, 8005f8a <__ascii_mbtowc+0x6>
 8005f88:	a901      	add	r1, sp, #4
 8005f8a:	b142      	cbz	r2, 8005f9e <__ascii_mbtowc+0x1a>
 8005f8c:	b14b      	cbz	r3, 8005fa2 <__ascii_mbtowc+0x1e>
 8005f8e:	7813      	ldrb	r3, [r2, #0]
 8005f90:	600b      	str	r3, [r1, #0]
 8005f92:	7812      	ldrb	r2, [r2, #0]
 8005f94:	1e10      	subs	r0, r2, #0
 8005f96:	bf18      	it	ne
 8005f98:	2001      	movne	r0, #1
 8005f9a:	b002      	add	sp, #8
 8005f9c:	4770      	bx	lr
 8005f9e:	4610      	mov	r0, r2
 8005fa0:	e7fb      	b.n	8005f9a <__ascii_mbtowc+0x16>
 8005fa2:	f06f 0001 	mvn.w	r0, #1
 8005fa6:	e7f8      	b.n	8005f9a <__ascii_mbtowc+0x16>

08005fa8 <memcpy>:
 8005fa8:	440a      	add	r2, r1
 8005faa:	4291      	cmp	r1, r2
 8005fac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005fb0:	d100      	bne.n	8005fb4 <memcpy+0xc>
 8005fb2:	4770      	bx	lr
 8005fb4:	b510      	push	{r4, lr}
 8005fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fbe:	4291      	cmp	r1, r2
 8005fc0:	d1f9      	bne.n	8005fb6 <memcpy+0xe>
 8005fc2:	bd10      	pop	{r4, pc}

08005fc4 <_Balloc>:
 8005fc4:	b570      	push	{r4, r5, r6, lr}
 8005fc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005fc8:	4604      	mov	r4, r0
 8005fca:	460d      	mov	r5, r1
 8005fcc:	b976      	cbnz	r6, 8005fec <_Balloc+0x28>
 8005fce:	2010      	movs	r0, #16
 8005fd0:	f7ff ffd0 	bl	8005f74 <malloc>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	6260      	str	r0, [r4, #36]	; 0x24
 8005fd8:	b920      	cbnz	r0, 8005fe4 <_Balloc+0x20>
 8005fda:	4b18      	ldr	r3, [pc, #96]	; (800603c <_Balloc+0x78>)
 8005fdc:	4818      	ldr	r0, [pc, #96]	; (8006040 <_Balloc+0x7c>)
 8005fde:	2166      	movs	r1, #102	; 0x66
 8005fe0:	f000 ff2a 	bl	8006e38 <__assert_func>
 8005fe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fe8:	6006      	str	r6, [r0, #0]
 8005fea:	60c6      	str	r6, [r0, #12]
 8005fec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005fee:	68f3      	ldr	r3, [r6, #12]
 8005ff0:	b183      	cbz	r3, 8006014 <_Balloc+0x50>
 8005ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ffa:	b9b8      	cbnz	r0, 800602c <_Balloc+0x68>
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	fa01 f605 	lsl.w	r6, r1, r5
 8006002:	1d72      	adds	r2, r6, #5
 8006004:	0092      	lsls	r2, r2, #2
 8006006:	4620      	mov	r0, r4
 8006008:	f000 fc90 	bl	800692c <_calloc_r>
 800600c:	b160      	cbz	r0, 8006028 <_Balloc+0x64>
 800600e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006012:	e00e      	b.n	8006032 <_Balloc+0x6e>
 8006014:	2221      	movs	r2, #33	; 0x21
 8006016:	2104      	movs	r1, #4
 8006018:	4620      	mov	r0, r4
 800601a:	f000 fc87 	bl	800692c <_calloc_r>
 800601e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006020:	60f0      	str	r0, [r6, #12]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1e4      	bne.n	8005ff2 <_Balloc+0x2e>
 8006028:	2000      	movs	r0, #0
 800602a:	bd70      	pop	{r4, r5, r6, pc}
 800602c:	6802      	ldr	r2, [r0, #0]
 800602e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006032:	2300      	movs	r3, #0
 8006034:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006038:	e7f7      	b.n	800602a <_Balloc+0x66>
 800603a:	bf00      	nop
 800603c:	08007cbe 	.word	0x08007cbe
 8006040:	08007dbc 	.word	0x08007dbc

08006044 <_Bfree>:
 8006044:	b570      	push	{r4, r5, r6, lr}
 8006046:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006048:	4605      	mov	r5, r0
 800604a:	460c      	mov	r4, r1
 800604c:	b976      	cbnz	r6, 800606c <_Bfree+0x28>
 800604e:	2010      	movs	r0, #16
 8006050:	f7ff ff90 	bl	8005f74 <malloc>
 8006054:	4602      	mov	r2, r0
 8006056:	6268      	str	r0, [r5, #36]	; 0x24
 8006058:	b920      	cbnz	r0, 8006064 <_Bfree+0x20>
 800605a:	4b09      	ldr	r3, [pc, #36]	; (8006080 <_Bfree+0x3c>)
 800605c:	4809      	ldr	r0, [pc, #36]	; (8006084 <_Bfree+0x40>)
 800605e:	218a      	movs	r1, #138	; 0x8a
 8006060:	f000 feea 	bl	8006e38 <__assert_func>
 8006064:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006068:	6006      	str	r6, [r0, #0]
 800606a:	60c6      	str	r6, [r0, #12]
 800606c:	b13c      	cbz	r4, 800607e <_Bfree+0x3a>
 800606e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006070:	6862      	ldr	r2, [r4, #4]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006078:	6021      	str	r1, [r4, #0]
 800607a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800607e:	bd70      	pop	{r4, r5, r6, pc}
 8006080:	08007cbe 	.word	0x08007cbe
 8006084:	08007dbc 	.word	0x08007dbc

08006088 <__multadd>:
 8006088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800608c:	690d      	ldr	r5, [r1, #16]
 800608e:	4607      	mov	r7, r0
 8006090:	460c      	mov	r4, r1
 8006092:	461e      	mov	r6, r3
 8006094:	f101 0c14 	add.w	ip, r1, #20
 8006098:	2000      	movs	r0, #0
 800609a:	f8dc 3000 	ldr.w	r3, [ip]
 800609e:	b299      	uxth	r1, r3
 80060a0:	fb02 6101 	mla	r1, r2, r1, r6
 80060a4:	0c1e      	lsrs	r6, r3, #16
 80060a6:	0c0b      	lsrs	r3, r1, #16
 80060a8:	fb02 3306 	mla	r3, r2, r6, r3
 80060ac:	b289      	uxth	r1, r1
 80060ae:	3001      	adds	r0, #1
 80060b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80060b4:	4285      	cmp	r5, r0
 80060b6:	f84c 1b04 	str.w	r1, [ip], #4
 80060ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80060be:	dcec      	bgt.n	800609a <__multadd+0x12>
 80060c0:	b30e      	cbz	r6, 8006106 <__multadd+0x7e>
 80060c2:	68a3      	ldr	r3, [r4, #8]
 80060c4:	42ab      	cmp	r3, r5
 80060c6:	dc19      	bgt.n	80060fc <__multadd+0x74>
 80060c8:	6861      	ldr	r1, [r4, #4]
 80060ca:	4638      	mov	r0, r7
 80060cc:	3101      	adds	r1, #1
 80060ce:	f7ff ff79 	bl	8005fc4 <_Balloc>
 80060d2:	4680      	mov	r8, r0
 80060d4:	b928      	cbnz	r0, 80060e2 <__multadd+0x5a>
 80060d6:	4602      	mov	r2, r0
 80060d8:	4b0c      	ldr	r3, [pc, #48]	; (800610c <__multadd+0x84>)
 80060da:	480d      	ldr	r0, [pc, #52]	; (8006110 <__multadd+0x88>)
 80060dc:	21b5      	movs	r1, #181	; 0xb5
 80060de:	f000 feab 	bl	8006e38 <__assert_func>
 80060e2:	6922      	ldr	r2, [r4, #16]
 80060e4:	3202      	adds	r2, #2
 80060e6:	f104 010c 	add.w	r1, r4, #12
 80060ea:	0092      	lsls	r2, r2, #2
 80060ec:	300c      	adds	r0, #12
 80060ee:	f7ff ff5b 	bl	8005fa8 <memcpy>
 80060f2:	4621      	mov	r1, r4
 80060f4:	4638      	mov	r0, r7
 80060f6:	f7ff ffa5 	bl	8006044 <_Bfree>
 80060fa:	4644      	mov	r4, r8
 80060fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006100:	3501      	adds	r5, #1
 8006102:	615e      	str	r6, [r3, #20]
 8006104:	6125      	str	r5, [r4, #16]
 8006106:	4620      	mov	r0, r4
 8006108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800610c:	08007d30 	.word	0x08007d30
 8006110:	08007dbc 	.word	0x08007dbc

08006114 <__s2b>:
 8006114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006118:	460c      	mov	r4, r1
 800611a:	4615      	mov	r5, r2
 800611c:	461f      	mov	r7, r3
 800611e:	2209      	movs	r2, #9
 8006120:	3308      	adds	r3, #8
 8006122:	4606      	mov	r6, r0
 8006124:	fb93 f3f2 	sdiv	r3, r3, r2
 8006128:	2100      	movs	r1, #0
 800612a:	2201      	movs	r2, #1
 800612c:	429a      	cmp	r2, r3
 800612e:	db09      	blt.n	8006144 <__s2b+0x30>
 8006130:	4630      	mov	r0, r6
 8006132:	f7ff ff47 	bl	8005fc4 <_Balloc>
 8006136:	b940      	cbnz	r0, 800614a <__s2b+0x36>
 8006138:	4602      	mov	r2, r0
 800613a:	4b19      	ldr	r3, [pc, #100]	; (80061a0 <__s2b+0x8c>)
 800613c:	4819      	ldr	r0, [pc, #100]	; (80061a4 <__s2b+0x90>)
 800613e:	21ce      	movs	r1, #206	; 0xce
 8006140:	f000 fe7a 	bl	8006e38 <__assert_func>
 8006144:	0052      	lsls	r2, r2, #1
 8006146:	3101      	adds	r1, #1
 8006148:	e7f0      	b.n	800612c <__s2b+0x18>
 800614a:	9b08      	ldr	r3, [sp, #32]
 800614c:	6143      	str	r3, [r0, #20]
 800614e:	2d09      	cmp	r5, #9
 8006150:	f04f 0301 	mov.w	r3, #1
 8006154:	6103      	str	r3, [r0, #16]
 8006156:	dd16      	ble.n	8006186 <__s2b+0x72>
 8006158:	f104 0909 	add.w	r9, r4, #9
 800615c:	46c8      	mov	r8, r9
 800615e:	442c      	add	r4, r5
 8006160:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006164:	4601      	mov	r1, r0
 8006166:	3b30      	subs	r3, #48	; 0x30
 8006168:	220a      	movs	r2, #10
 800616a:	4630      	mov	r0, r6
 800616c:	f7ff ff8c 	bl	8006088 <__multadd>
 8006170:	45a0      	cmp	r8, r4
 8006172:	d1f5      	bne.n	8006160 <__s2b+0x4c>
 8006174:	f1a5 0408 	sub.w	r4, r5, #8
 8006178:	444c      	add	r4, r9
 800617a:	1b2d      	subs	r5, r5, r4
 800617c:	1963      	adds	r3, r4, r5
 800617e:	42bb      	cmp	r3, r7
 8006180:	db04      	blt.n	800618c <__s2b+0x78>
 8006182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006186:	340a      	adds	r4, #10
 8006188:	2509      	movs	r5, #9
 800618a:	e7f6      	b.n	800617a <__s2b+0x66>
 800618c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006190:	4601      	mov	r1, r0
 8006192:	3b30      	subs	r3, #48	; 0x30
 8006194:	220a      	movs	r2, #10
 8006196:	4630      	mov	r0, r6
 8006198:	f7ff ff76 	bl	8006088 <__multadd>
 800619c:	e7ee      	b.n	800617c <__s2b+0x68>
 800619e:	bf00      	nop
 80061a0:	08007d30 	.word	0x08007d30
 80061a4:	08007dbc 	.word	0x08007dbc

080061a8 <__hi0bits>:
 80061a8:	0c02      	lsrs	r2, r0, #16
 80061aa:	0412      	lsls	r2, r2, #16
 80061ac:	4603      	mov	r3, r0
 80061ae:	b9ca      	cbnz	r2, 80061e4 <__hi0bits+0x3c>
 80061b0:	0403      	lsls	r3, r0, #16
 80061b2:	2010      	movs	r0, #16
 80061b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80061b8:	bf04      	itt	eq
 80061ba:	021b      	lsleq	r3, r3, #8
 80061bc:	3008      	addeq	r0, #8
 80061be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80061c2:	bf04      	itt	eq
 80061c4:	011b      	lsleq	r3, r3, #4
 80061c6:	3004      	addeq	r0, #4
 80061c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80061cc:	bf04      	itt	eq
 80061ce:	009b      	lsleq	r3, r3, #2
 80061d0:	3002      	addeq	r0, #2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	db05      	blt.n	80061e2 <__hi0bits+0x3a>
 80061d6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80061da:	f100 0001 	add.w	r0, r0, #1
 80061de:	bf08      	it	eq
 80061e0:	2020      	moveq	r0, #32
 80061e2:	4770      	bx	lr
 80061e4:	2000      	movs	r0, #0
 80061e6:	e7e5      	b.n	80061b4 <__hi0bits+0xc>

080061e8 <__lo0bits>:
 80061e8:	6803      	ldr	r3, [r0, #0]
 80061ea:	4602      	mov	r2, r0
 80061ec:	f013 0007 	ands.w	r0, r3, #7
 80061f0:	d00b      	beq.n	800620a <__lo0bits+0x22>
 80061f2:	07d9      	lsls	r1, r3, #31
 80061f4:	d421      	bmi.n	800623a <__lo0bits+0x52>
 80061f6:	0798      	lsls	r0, r3, #30
 80061f8:	bf49      	itett	mi
 80061fa:	085b      	lsrmi	r3, r3, #1
 80061fc:	089b      	lsrpl	r3, r3, #2
 80061fe:	2001      	movmi	r0, #1
 8006200:	6013      	strmi	r3, [r2, #0]
 8006202:	bf5c      	itt	pl
 8006204:	6013      	strpl	r3, [r2, #0]
 8006206:	2002      	movpl	r0, #2
 8006208:	4770      	bx	lr
 800620a:	b299      	uxth	r1, r3
 800620c:	b909      	cbnz	r1, 8006212 <__lo0bits+0x2a>
 800620e:	0c1b      	lsrs	r3, r3, #16
 8006210:	2010      	movs	r0, #16
 8006212:	b2d9      	uxtb	r1, r3
 8006214:	b909      	cbnz	r1, 800621a <__lo0bits+0x32>
 8006216:	3008      	adds	r0, #8
 8006218:	0a1b      	lsrs	r3, r3, #8
 800621a:	0719      	lsls	r1, r3, #28
 800621c:	bf04      	itt	eq
 800621e:	091b      	lsreq	r3, r3, #4
 8006220:	3004      	addeq	r0, #4
 8006222:	0799      	lsls	r1, r3, #30
 8006224:	bf04      	itt	eq
 8006226:	089b      	lsreq	r3, r3, #2
 8006228:	3002      	addeq	r0, #2
 800622a:	07d9      	lsls	r1, r3, #31
 800622c:	d403      	bmi.n	8006236 <__lo0bits+0x4e>
 800622e:	085b      	lsrs	r3, r3, #1
 8006230:	f100 0001 	add.w	r0, r0, #1
 8006234:	d003      	beq.n	800623e <__lo0bits+0x56>
 8006236:	6013      	str	r3, [r2, #0]
 8006238:	4770      	bx	lr
 800623a:	2000      	movs	r0, #0
 800623c:	4770      	bx	lr
 800623e:	2020      	movs	r0, #32
 8006240:	4770      	bx	lr
	...

08006244 <__i2b>:
 8006244:	b510      	push	{r4, lr}
 8006246:	460c      	mov	r4, r1
 8006248:	2101      	movs	r1, #1
 800624a:	f7ff febb 	bl	8005fc4 <_Balloc>
 800624e:	4602      	mov	r2, r0
 8006250:	b928      	cbnz	r0, 800625e <__i2b+0x1a>
 8006252:	4b05      	ldr	r3, [pc, #20]	; (8006268 <__i2b+0x24>)
 8006254:	4805      	ldr	r0, [pc, #20]	; (800626c <__i2b+0x28>)
 8006256:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800625a:	f000 fded 	bl	8006e38 <__assert_func>
 800625e:	2301      	movs	r3, #1
 8006260:	6144      	str	r4, [r0, #20]
 8006262:	6103      	str	r3, [r0, #16]
 8006264:	bd10      	pop	{r4, pc}
 8006266:	bf00      	nop
 8006268:	08007d30 	.word	0x08007d30
 800626c:	08007dbc 	.word	0x08007dbc

08006270 <__multiply>:
 8006270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006274:	4691      	mov	r9, r2
 8006276:	690a      	ldr	r2, [r1, #16]
 8006278:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800627c:	429a      	cmp	r2, r3
 800627e:	bfb8      	it	lt
 8006280:	460b      	movlt	r3, r1
 8006282:	460c      	mov	r4, r1
 8006284:	bfbc      	itt	lt
 8006286:	464c      	movlt	r4, r9
 8006288:	4699      	movlt	r9, r3
 800628a:	6927      	ldr	r7, [r4, #16]
 800628c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006290:	68a3      	ldr	r3, [r4, #8]
 8006292:	6861      	ldr	r1, [r4, #4]
 8006294:	eb07 060a 	add.w	r6, r7, sl
 8006298:	42b3      	cmp	r3, r6
 800629a:	b085      	sub	sp, #20
 800629c:	bfb8      	it	lt
 800629e:	3101      	addlt	r1, #1
 80062a0:	f7ff fe90 	bl	8005fc4 <_Balloc>
 80062a4:	b930      	cbnz	r0, 80062b4 <__multiply+0x44>
 80062a6:	4602      	mov	r2, r0
 80062a8:	4b43      	ldr	r3, [pc, #268]	; (80063b8 <__multiply+0x148>)
 80062aa:	4844      	ldr	r0, [pc, #272]	; (80063bc <__multiply+0x14c>)
 80062ac:	f240 115d 	movw	r1, #349	; 0x15d
 80062b0:	f000 fdc2 	bl	8006e38 <__assert_func>
 80062b4:	f100 0514 	add.w	r5, r0, #20
 80062b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80062bc:	462b      	mov	r3, r5
 80062be:	2200      	movs	r2, #0
 80062c0:	4543      	cmp	r3, r8
 80062c2:	d321      	bcc.n	8006308 <__multiply+0x98>
 80062c4:	f104 0314 	add.w	r3, r4, #20
 80062c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80062cc:	f109 0314 	add.w	r3, r9, #20
 80062d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80062d4:	9202      	str	r2, [sp, #8]
 80062d6:	1b3a      	subs	r2, r7, r4
 80062d8:	3a15      	subs	r2, #21
 80062da:	f022 0203 	bic.w	r2, r2, #3
 80062de:	3204      	adds	r2, #4
 80062e0:	f104 0115 	add.w	r1, r4, #21
 80062e4:	428f      	cmp	r7, r1
 80062e6:	bf38      	it	cc
 80062e8:	2204      	movcc	r2, #4
 80062ea:	9201      	str	r2, [sp, #4]
 80062ec:	9a02      	ldr	r2, [sp, #8]
 80062ee:	9303      	str	r3, [sp, #12]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d80c      	bhi.n	800630e <__multiply+0x9e>
 80062f4:	2e00      	cmp	r6, #0
 80062f6:	dd03      	ble.n	8006300 <__multiply+0x90>
 80062f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d059      	beq.n	80063b4 <__multiply+0x144>
 8006300:	6106      	str	r6, [r0, #16]
 8006302:	b005      	add	sp, #20
 8006304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006308:	f843 2b04 	str.w	r2, [r3], #4
 800630c:	e7d8      	b.n	80062c0 <__multiply+0x50>
 800630e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006312:	f1ba 0f00 	cmp.w	sl, #0
 8006316:	d023      	beq.n	8006360 <__multiply+0xf0>
 8006318:	f104 0e14 	add.w	lr, r4, #20
 800631c:	46a9      	mov	r9, r5
 800631e:	f04f 0c00 	mov.w	ip, #0
 8006322:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006326:	f8d9 1000 	ldr.w	r1, [r9]
 800632a:	fa1f fb82 	uxth.w	fp, r2
 800632e:	b289      	uxth	r1, r1
 8006330:	fb0a 110b 	mla	r1, sl, fp, r1
 8006334:	4461      	add	r1, ip
 8006336:	f8d9 c000 	ldr.w	ip, [r9]
 800633a:	0c12      	lsrs	r2, r2, #16
 800633c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006340:	fb0a c202 	mla	r2, sl, r2, ip
 8006344:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006348:	b289      	uxth	r1, r1
 800634a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800634e:	4577      	cmp	r7, lr
 8006350:	f849 1b04 	str.w	r1, [r9], #4
 8006354:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006358:	d8e3      	bhi.n	8006322 <__multiply+0xb2>
 800635a:	9a01      	ldr	r2, [sp, #4]
 800635c:	f845 c002 	str.w	ip, [r5, r2]
 8006360:	9a03      	ldr	r2, [sp, #12]
 8006362:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006366:	3304      	adds	r3, #4
 8006368:	f1b9 0f00 	cmp.w	r9, #0
 800636c:	d020      	beq.n	80063b0 <__multiply+0x140>
 800636e:	6829      	ldr	r1, [r5, #0]
 8006370:	f104 0c14 	add.w	ip, r4, #20
 8006374:	46ae      	mov	lr, r5
 8006376:	f04f 0a00 	mov.w	sl, #0
 800637a:	f8bc b000 	ldrh.w	fp, [ip]
 800637e:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006382:	fb09 220b 	mla	r2, r9, fp, r2
 8006386:	4492      	add	sl, r2
 8006388:	b289      	uxth	r1, r1
 800638a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800638e:	f84e 1b04 	str.w	r1, [lr], #4
 8006392:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006396:	f8be 1000 	ldrh.w	r1, [lr]
 800639a:	0c12      	lsrs	r2, r2, #16
 800639c:	fb09 1102 	mla	r1, r9, r2, r1
 80063a0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80063a4:	4567      	cmp	r7, ip
 80063a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80063aa:	d8e6      	bhi.n	800637a <__multiply+0x10a>
 80063ac:	9a01      	ldr	r2, [sp, #4]
 80063ae:	50a9      	str	r1, [r5, r2]
 80063b0:	3504      	adds	r5, #4
 80063b2:	e79b      	b.n	80062ec <__multiply+0x7c>
 80063b4:	3e01      	subs	r6, #1
 80063b6:	e79d      	b.n	80062f4 <__multiply+0x84>
 80063b8:	08007d30 	.word	0x08007d30
 80063bc:	08007dbc 	.word	0x08007dbc

080063c0 <__pow5mult>:
 80063c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063c4:	4615      	mov	r5, r2
 80063c6:	f012 0203 	ands.w	r2, r2, #3
 80063ca:	4606      	mov	r6, r0
 80063cc:	460f      	mov	r7, r1
 80063ce:	d007      	beq.n	80063e0 <__pow5mult+0x20>
 80063d0:	4c25      	ldr	r4, [pc, #148]	; (8006468 <__pow5mult+0xa8>)
 80063d2:	3a01      	subs	r2, #1
 80063d4:	2300      	movs	r3, #0
 80063d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80063da:	f7ff fe55 	bl	8006088 <__multadd>
 80063de:	4607      	mov	r7, r0
 80063e0:	10ad      	asrs	r5, r5, #2
 80063e2:	d03d      	beq.n	8006460 <__pow5mult+0xa0>
 80063e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80063e6:	b97c      	cbnz	r4, 8006408 <__pow5mult+0x48>
 80063e8:	2010      	movs	r0, #16
 80063ea:	f7ff fdc3 	bl	8005f74 <malloc>
 80063ee:	4602      	mov	r2, r0
 80063f0:	6270      	str	r0, [r6, #36]	; 0x24
 80063f2:	b928      	cbnz	r0, 8006400 <__pow5mult+0x40>
 80063f4:	4b1d      	ldr	r3, [pc, #116]	; (800646c <__pow5mult+0xac>)
 80063f6:	481e      	ldr	r0, [pc, #120]	; (8006470 <__pow5mult+0xb0>)
 80063f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80063fc:	f000 fd1c 	bl	8006e38 <__assert_func>
 8006400:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006404:	6004      	str	r4, [r0, #0]
 8006406:	60c4      	str	r4, [r0, #12]
 8006408:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800640c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006410:	b94c      	cbnz	r4, 8006426 <__pow5mult+0x66>
 8006412:	f240 2171 	movw	r1, #625	; 0x271
 8006416:	4630      	mov	r0, r6
 8006418:	f7ff ff14 	bl	8006244 <__i2b>
 800641c:	2300      	movs	r3, #0
 800641e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006422:	4604      	mov	r4, r0
 8006424:	6003      	str	r3, [r0, #0]
 8006426:	f04f 0900 	mov.w	r9, #0
 800642a:	07eb      	lsls	r3, r5, #31
 800642c:	d50a      	bpl.n	8006444 <__pow5mult+0x84>
 800642e:	4639      	mov	r1, r7
 8006430:	4622      	mov	r2, r4
 8006432:	4630      	mov	r0, r6
 8006434:	f7ff ff1c 	bl	8006270 <__multiply>
 8006438:	4639      	mov	r1, r7
 800643a:	4680      	mov	r8, r0
 800643c:	4630      	mov	r0, r6
 800643e:	f7ff fe01 	bl	8006044 <_Bfree>
 8006442:	4647      	mov	r7, r8
 8006444:	106d      	asrs	r5, r5, #1
 8006446:	d00b      	beq.n	8006460 <__pow5mult+0xa0>
 8006448:	6820      	ldr	r0, [r4, #0]
 800644a:	b938      	cbnz	r0, 800645c <__pow5mult+0x9c>
 800644c:	4622      	mov	r2, r4
 800644e:	4621      	mov	r1, r4
 8006450:	4630      	mov	r0, r6
 8006452:	f7ff ff0d 	bl	8006270 <__multiply>
 8006456:	6020      	str	r0, [r4, #0]
 8006458:	f8c0 9000 	str.w	r9, [r0]
 800645c:	4604      	mov	r4, r0
 800645e:	e7e4      	b.n	800642a <__pow5mult+0x6a>
 8006460:	4638      	mov	r0, r7
 8006462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006466:	bf00      	nop
 8006468:	08007f08 	.word	0x08007f08
 800646c:	08007cbe 	.word	0x08007cbe
 8006470:	08007dbc 	.word	0x08007dbc

08006474 <__lshift>:
 8006474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006478:	460c      	mov	r4, r1
 800647a:	6849      	ldr	r1, [r1, #4]
 800647c:	6923      	ldr	r3, [r4, #16]
 800647e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006482:	68a3      	ldr	r3, [r4, #8]
 8006484:	4607      	mov	r7, r0
 8006486:	4691      	mov	r9, r2
 8006488:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800648c:	f108 0601 	add.w	r6, r8, #1
 8006490:	42b3      	cmp	r3, r6
 8006492:	db0b      	blt.n	80064ac <__lshift+0x38>
 8006494:	4638      	mov	r0, r7
 8006496:	f7ff fd95 	bl	8005fc4 <_Balloc>
 800649a:	4605      	mov	r5, r0
 800649c:	b948      	cbnz	r0, 80064b2 <__lshift+0x3e>
 800649e:	4602      	mov	r2, r0
 80064a0:	4b2a      	ldr	r3, [pc, #168]	; (800654c <__lshift+0xd8>)
 80064a2:	482b      	ldr	r0, [pc, #172]	; (8006550 <__lshift+0xdc>)
 80064a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80064a8:	f000 fcc6 	bl	8006e38 <__assert_func>
 80064ac:	3101      	adds	r1, #1
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	e7ee      	b.n	8006490 <__lshift+0x1c>
 80064b2:	2300      	movs	r3, #0
 80064b4:	f100 0114 	add.w	r1, r0, #20
 80064b8:	f100 0210 	add.w	r2, r0, #16
 80064bc:	4618      	mov	r0, r3
 80064be:	4553      	cmp	r3, sl
 80064c0:	db37      	blt.n	8006532 <__lshift+0xbe>
 80064c2:	6920      	ldr	r0, [r4, #16]
 80064c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80064c8:	f104 0314 	add.w	r3, r4, #20
 80064cc:	f019 091f 	ands.w	r9, r9, #31
 80064d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80064d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80064d8:	d02f      	beq.n	800653a <__lshift+0xc6>
 80064da:	f1c9 0e20 	rsb	lr, r9, #32
 80064de:	468a      	mov	sl, r1
 80064e0:	f04f 0c00 	mov.w	ip, #0
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	fa02 f209 	lsl.w	r2, r2, r9
 80064ea:	ea42 020c 	orr.w	r2, r2, ip
 80064ee:	f84a 2b04 	str.w	r2, [sl], #4
 80064f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80064f6:	4298      	cmp	r0, r3
 80064f8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80064fc:	d8f2      	bhi.n	80064e4 <__lshift+0x70>
 80064fe:	1b03      	subs	r3, r0, r4
 8006500:	3b15      	subs	r3, #21
 8006502:	f023 0303 	bic.w	r3, r3, #3
 8006506:	3304      	adds	r3, #4
 8006508:	f104 0215 	add.w	r2, r4, #21
 800650c:	4290      	cmp	r0, r2
 800650e:	bf38      	it	cc
 8006510:	2304      	movcc	r3, #4
 8006512:	f841 c003 	str.w	ip, [r1, r3]
 8006516:	f1bc 0f00 	cmp.w	ip, #0
 800651a:	d001      	beq.n	8006520 <__lshift+0xac>
 800651c:	f108 0602 	add.w	r6, r8, #2
 8006520:	3e01      	subs	r6, #1
 8006522:	4638      	mov	r0, r7
 8006524:	612e      	str	r6, [r5, #16]
 8006526:	4621      	mov	r1, r4
 8006528:	f7ff fd8c 	bl	8006044 <_Bfree>
 800652c:	4628      	mov	r0, r5
 800652e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006532:	f842 0f04 	str.w	r0, [r2, #4]!
 8006536:	3301      	adds	r3, #1
 8006538:	e7c1      	b.n	80064be <__lshift+0x4a>
 800653a:	3904      	subs	r1, #4
 800653c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006540:	f841 2f04 	str.w	r2, [r1, #4]!
 8006544:	4298      	cmp	r0, r3
 8006546:	d8f9      	bhi.n	800653c <__lshift+0xc8>
 8006548:	e7ea      	b.n	8006520 <__lshift+0xac>
 800654a:	bf00      	nop
 800654c:	08007d30 	.word	0x08007d30
 8006550:	08007dbc 	.word	0x08007dbc

08006554 <__mcmp>:
 8006554:	690a      	ldr	r2, [r1, #16]
 8006556:	4603      	mov	r3, r0
 8006558:	6900      	ldr	r0, [r0, #16]
 800655a:	1a80      	subs	r0, r0, r2
 800655c:	b530      	push	{r4, r5, lr}
 800655e:	d10d      	bne.n	800657c <__mcmp+0x28>
 8006560:	3314      	adds	r3, #20
 8006562:	3114      	adds	r1, #20
 8006564:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006568:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800656c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006570:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006574:	4295      	cmp	r5, r2
 8006576:	d002      	beq.n	800657e <__mcmp+0x2a>
 8006578:	d304      	bcc.n	8006584 <__mcmp+0x30>
 800657a:	2001      	movs	r0, #1
 800657c:	bd30      	pop	{r4, r5, pc}
 800657e:	42a3      	cmp	r3, r4
 8006580:	d3f4      	bcc.n	800656c <__mcmp+0x18>
 8006582:	e7fb      	b.n	800657c <__mcmp+0x28>
 8006584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006588:	e7f8      	b.n	800657c <__mcmp+0x28>
	...

0800658c <__mdiff>:
 800658c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006590:	460d      	mov	r5, r1
 8006592:	4607      	mov	r7, r0
 8006594:	4611      	mov	r1, r2
 8006596:	4628      	mov	r0, r5
 8006598:	4614      	mov	r4, r2
 800659a:	f7ff ffdb 	bl	8006554 <__mcmp>
 800659e:	1e06      	subs	r6, r0, #0
 80065a0:	d111      	bne.n	80065c6 <__mdiff+0x3a>
 80065a2:	4631      	mov	r1, r6
 80065a4:	4638      	mov	r0, r7
 80065a6:	f7ff fd0d 	bl	8005fc4 <_Balloc>
 80065aa:	4602      	mov	r2, r0
 80065ac:	b928      	cbnz	r0, 80065ba <__mdiff+0x2e>
 80065ae:	4b39      	ldr	r3, [pc, #228]	; (8006694 <__mdiff+0x108>)
 80065b0:	f240 2132 	movw	r1, #562	; 0x232
 80065b4:	4838      	ldr	r0, [pc, #224]	; (8006698 <__mdiff+0x10c>)
 80065b6:	f000 fc3f 	bl	8006e38 <__assert_func>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80065c0:	4610      	mov	r0, r2
 80065c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c6:	bfa4      	itt	ge
 80065c8:	4623      	movge	r3, r4
 80065ca:	462c      	movge	r4, r5
 80065cc:	4638      	mov	r0, r7
 80065ce:	6861      	ldr	r1, [r4, #4]
 80065d0:	bfa6      	itte	ge
 80065d2:	461d      	movge	r5, r3
 80065d4:	2600      	movge	r6, #0
 80065d6:	2601      	movlt	r6, #1
 80065d8:	f7ff fcf4 	bl	8005fc4 <_Balloc>
 80065dc:	4602      	mov	r2, r0
 80065de:	b918      	cbnz	r0, 80065e8 <__mdiff+0x5c>
 80065e0:	4b2c      	ldr	r3, [pc, #176]	; (8006694 <__mdiff+0x108>)
 80065e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80065e6:	e7e5      	b.n	80065b4 <__mdiff+0x28>
 80065e8:	6927      	ldr	r7, [r4, #16]
 80065ea:	60c6      	str	r6, [r0, #12]
 80065ec:	692e      	ldr	r6, [r5, #16]
 80065ee:	f104 0014 	add.w	r0, r4, #20
 80065f2:	f105 0914 	add.w	r9, r5, #20
 80065f6:	f102 0e14 	add.w	lr, r2, #20
 80065fa:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 80065fe:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006602:	3410      	adds	r4, #16
 8006604:	46f2      	mov	sl, lr
 8006606:	2100      	movs	r1, #0
 8006608:	f859 3b04 	ldr.w	r3, [r9], #4
 800660c:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006610:	fa1f f883 	uxth.w	r8, r3
 8006614:	fa11 f18b 	uxtah	r1, r1, fp
 8006618:	0c1b      	lsrs	r3, r3, #16
 800661a:	eba1 0808 	sub.w	r8, r1, r8
 800661e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006622:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006626:	fa1f f888 	uxth.w	r8, r8
 800662a:	1419      	asrs	r1, r3, #16
 800662c:	454e      	cmp	r6, r9
 800662e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006632:	f84a 3b04 	str.w	r3, [sl], #4
 8006636:	d8e7      	bhi.n	8006608 <__mdiff+0x7c>
 8006638:	1b73      	subs	r3, r6, r5
 800663a:	3b15      	subs	r3, #21
 800663c:	f023 0303 	bic.w	r3, r3, #3
 8006640:	3304      	adds	r3, #4
 8006642:	3515      	adds	r5, #21
 8006644:	42ae      	cmp	r6, r5
 8006646:	bf38      	it	cc
 8006648:	2304      	movcc	r3, #4
 800664a:	4418      	add	r0, r3
 800664c:	4473      	add	r3, lr
 800664e:	469e      	mov	lr, r3
 8006650:	4606      	mov	r6, r0
 8006652:	4566      	cmp	r6, ip
 8006654:	d30e      	bcc.n	8006674 <__mdiff+0xe8>
 8006656:	f10c 0103 	add.w	r1, ip, #3
 800665a:	1a09      	subs	r1, r1, r0
 800665c:	f021 0103 	bic.w	r1, r1, #3
 8006660:	3803      	subs	r0, #3
 8006662:	4584      	cmp	ip, r0
 8006664:	bf38      	it	cc
 8006666:	2100      	movcc	r1, #0
 8006668:	4419      	add	r1, r3
 800666a:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800666e:	b17b      	cbz	r3, 8006690 <__mdiff+0x104>
 8006670:	6117      	str	r7, [r2, #16]
 8006672:	e7a5      	b.n	80065c0 <__mdiff+0x34>
 8006674:	f856 8b04 	ldr.w	r8, [r6], #4
 8006678:	fa11 f488 	uxtah	r4, r1, r8
 800667c:	1425      	asrs	r5, r4, #16
 800667e:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 8006682:	b2a4      	uxth	r4, r4
 8006684:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8006688:	f84e 4b04 	str.w	r4, [lr], #4
 800668c:	1429      	asrs	r1, r5, #16
 800668e:	e7e0      	b.n	8006652 <__mdiff+0xc6>
 8006690:	3f01      	subs	r7, #1
 8006692:	e7ea      	b.n	800666a <__mdiff+0xde>
 8006694:	08007d30 	.word	0x08007d30
 8006698:	08007dbc 	.word	0x08007dbc

0800669c <__ulp>:
 800669c:	4b11      	ldr	r3, [pc, #68]	; (80066e4 <__ulp+0x48>)
 800669e:	400b      	ands	r3, r1
 80066a0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	dd02      	ble.n	80066ae <__ulp+0x12>
 80066a8:	2000      	movs	r0, #0
 80066aa:	4619      	mov	r1, r3
 80066ac:	4770      	bx	lr
 80066ae:	425b      	negs	r3, r3
 80066b0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80066b4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80066b8:	f04f 0000 	mov.w	r0, #0
 80066bc:	f04f 0100 	mov.w	r1, #0
 80066c0:	da04      	bge.n	80066cc <__ulp+0x30>
 80066c2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80066c6:	fa43 f102 	asr.w	r1, r3, r2
 80066ca:	4770      	bx	lr
 80066cc:	f1a2 0314 	sub.w	r3, r2, #20
 80066d0:	2b1e      	cmp	r3, #30
 80066d2:	bfda      	itte	le
 80066d4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80066d8:	fa22 f303 	lsrle.w	r3, r2, r3
 80066dc:	2301      	movgt	r3, #1
 80066de:	4618      	mov	r0, r3
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	7ff00000 	.word	0x7ff00000

080066e8 <__b2d>:
 80066e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066ec:	6907      	ldr	r7, [r0, #16]
 80066ee:	f100 0914 	add.w	r9, r0, #20
 80066f2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80066f6:	f1a7 0804 	sub.w	r8, r7, #4
 80066fa:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80066fe:	4630      	mov	r0, r6
 8006700:	f7ff fd52 	bl	80061a8 <__hi0bits>
 8006704:	f1c0 0320 	rsb	r3, r0, #32
 8006708:	280a      	cmp	r0, #10
 800670a:	600b      	str	r3, [r1, #0]
 800670c:	491f      	ldr	r1, [pc, #124]	; (800678c <__b2d+0xa4>)
 800670e:	dc17      	bgt.n	8006740 <__b2d+0x58>
 8006710:	f1c0 0c0b 	rsb	ip, r0, #11
 8006714:	45c1      	cmp	r9, r8
 8006716:	fa26 f30c 	lsr.w	r3, r6, ip
 800671a:	bf38      	it	cc
 800671c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006720:	ea43 0501 	orr.w	r5, r3, r1
 8006724:	bf28      	it	cs
 8006726:	2200      	movcs	r2, #0
 8006728:	f100 0315 	add.w	r3, r0, #21
 800672c:	fa06 f303 	lsl.w	r3, r6, r3
 8006730:	fa22 f20c 	lsr.w	r2, r2, ip
 8006734:	ea43 0402 	orr.w	r4, r3, r2
 8006738:	4620      	mov	r0, r4
 800673a:	4629      	mov	r1, r5
 800673c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006740:	45c1      	cmp	r9, r8
 8006742:	bf3a      	itte	cc
 8006744:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006748:	f1a7 0808 	subcc.w	r8, r7, #8
 800674c:	2200      	movcs	r2, #0
 800674e:	f1b0 030b 	subs.w	r3, r0, #11
 8006752:	d016      	beq.n	8006782 <__b2d+0x9a>
 8006754:	f1c3 0720 	rsb	r7, r3, #32
 8006758:	fa22 f107 	lsr.w	r1, r2, r7
 800675c:	45c8      	cmp	r8, r9
 800675e:	fa06 f603 	lsl.w	r6, r6, r3
 8006762:	ea46 0601 	orr.w	r6, r6, r1
 8006766:	bf8c      	ite	hi
 8006768:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800676c:	2100      	movls	r1, #0
 800676e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8006772:	fa02 f003 	lsl.w	r0, r2, r3
 8006776:	40f9      	lsrs	r1, r7
 8006778:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800677c:	ea40 0401 	orr.w	r4, r0, r1
 8006780:	e7da      	b.n	8006738 <__b2d+0x50>
 8006782:	ea46 0501 	orr.w	r5, r6, r1
 8006786:	4614      	mov	r4, r2
 8006788:	e7d6      	b.n	8006738 <__b2d+0x50>
 800678a:	bf00      	nop
 800678c:	3ff00000 	.word	0x3ff00000

08006790 <__d2b>:
 8006790:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006794:	2101      	movs	r1, #1
 8006796:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800679a:	4690      	mov	r8, r2
 800679c:	461d      	mov	r5, r3
 800679e:	f7ff fc11 	bl	8005fc4 <_Balloc>
 80067a2:	4604      	mov	r4, r0
 80067a4:	b930      	cbnz	r0, 80067b4 <__d2b+0x24>
 80067a6:	4602      	mov	r2, r0
 80067a8:	4b25      	ldr	r3, [pc, #148]	; (8006840 <__d2b+0xb0>)
 80067aa:	4826      	ldr	r0, [pc, #152]	; (8006844 <__d2b+0xb4>)
 80067ac:	f240 310a 	movw	r1, #778	; 0x30a
 80067b0:	f000 fb42 	bl	8006e38 <__assert_func>
 80067b4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80067b8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80067bc:	bb2d      	cbnz	r5, 800680a <__d2b+0x7a>
 80067be:	9301      	str	r3, [sp, #4]
 80067c0:	f1b8 0300 	subs.w	r3, r8, #0
 80067c4:	d026      	beq.n	8006814 <__d2b+0x84>
 80067c6:	4668      	mov	r0, sp
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	f7ff fd0d 	bl	80061e8 <__lo0bits>
 80067ce:	9900      	ldr	r1, [sp, #0]
 80067d0:	b1f0      	cbz	r0, 8006810 <__d2b+0x80>
 80067d2:	9a01      	ldr	r2, [sp, #4]
 80067d4:	f1c0 0320 	rsb	r3, r0, #32
 80067d8:	fa02 f303 	lsl.w	r3, r2, r3
 80067dc:	430b      	orrs	r3, r1
 80067de:	40c2      	lsrs	r2, r0
 80067e0:	6163      	str	r3, [r4, #20]
 80067e2:	9201      	str	r2, [sp, #4]
 80067e4:	9b01      	ldr	r3, [sp, #4]
 80067e6:	61a3      	str	r3, [r4, #24]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	bf14      	ite	ne
 80067ec:	2102      	movne	r1, #2
 80067ee:	2101      	moveq	r1, #1
 80067f0:	6121      	str	r1, [r4, #16]
 80067f2:	b1c5      	cbz	r5, 8006826 <__d2b+0x96>
 80067f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80067f8:	4405      	add	r5, r0
 80067fa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80067fe:	603d      	str	r5, [r7, #0]
 8006800:	6030      	str	r0, [r6, #0]
 8006802:	4620      	mov	r0, r4
 8006804:	b002      	add	sp, #8
 8006806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800680a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800680e:	e7d6      	b.n	80067be <__d2b+0x2e>
 8006810:	6161      	str	r1, [r4, #20]
 8006812:	e7e7      	b.n	80067e4 <__d2b+0x54>
 8006814:	a801      	add	r0, sp, #4
 8006816:	f7ff fce7 	bl	80061e8 <__lo0bits>
 800681a:	9b01      	ldr	r3, [sp, #4]
 800681c:	6163      	str	r3, [r4, #20]
 800681e:	2101      	movs	r1, #1
 8006820:	6121      	str	r1, [r4, #16]
 8006822:	3020      	adds	r0, #32
 8006824:	e7e5      	b.n	80067f2 <__d2b+0x62>
 8006826:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800682a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800682e:	6038      	str	r0, [r7, #0]
 8006830:	6918      	ldr	r0, [r3, #16]
 8006832:	f7ff fcb9 	bl	80061a8 <__hi0bits>
 8006836:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800683a:	6031      	str	r1, [r6, #0]
 800683c:	e7e1      	b.n	8006802 <__d2b+0x72>
 800683e:	bf00      	nop
 8006840:	08007d30 	.word	0x08007d30
 8006844:	08007dbc 	.word	0x08007dbc

08006848 <__ratio>:
 8006848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684c:	4688      	mov	r8, r1
 800684e:	4669      	mov	r1, sp
 8006850:	4681      	mov	r9, r0
 8006852:	f7ff ff49 	bl	80066e8 <__b2d>
 8006856:	460f      	mov	r7, r1
 8006858:	4604      	mov	r4, r0
 800685a:	460d      	mov	r5, r1
 800685c:	4640      	mov	r0, r8
 800685e:	a901      	add	r1, sp, #4
 8006860:	f7ff ff42 	bl	80066e8 <__b2d>
 8006864:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006868:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800686c:	eba3 0c02 	sub.w	ip, r3, r2
 8006870:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006874:	1a9b      	subs	r3, r3, r2
 8006876:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800687a:	2b00      	cmp	r3, #0
 800687c:	bfd5      	itete	le
 800687e:	460a      	movle	r2, r1
 8006880:	462a      	movgt	r2, r5
 8006882:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006886:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800688a:	468b      	mov	fp, r1
 800688c:	bfd8      	it	le
 800688e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006892:	465b      	mov	r3, fp
 8006894:	4602      	mov	r2, r0
 8006896:	4639      	mov	r1, r7
 8006898:	4620      	mov	r0, r4
 800689a:	f7f9 ffdf 	bl	800085c <__aeabi_ddiv>
 800689e:	b003      	add	sp, #12
 80068a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080068a4 <__copybits>:
 80068a4:	3901      	subs	r1, #1
 80068a6:	b570      	push	{r4, r5, r6, lr}
 80068a8:	1149      	asrs	r1, r1, #5
 80068aa:	6914      	ldr	r4, [r2, #16]
 80068ac:	3101      	adds	r1, #1
 80068ae:	f102 0314 	add.w	r3, r2, #20
 80068b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80068b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80068ba:	1f05      	subs	r5, r0, #4
 80068bc:	42a3      	cmp	r3, r4
 80068be:	d30c      	bcc.n	80068da <__copybits+0x36>
 80068c0:	1aa3      	subs	r3, r4, r2
 80068c2:	3b11      	subs	r3, #17
 80068c4:	f023 0303 	bic.w	r3, r3, #3
 80068c8:	3211      	adds	r2, #17
 80068ca:	42a2      	cmp	r2, r4
 80068cc:	bf88      	it	hi
 80068ce:	2300      	movhi	r3, #0
 80068d0:	4418      	add	r0, r3
 80068d2:	2300      	movs	r3, #0
 80068d4:	4288      	cmp	r0, r1
 80068d6:	d305      	bcc.n	80068e4 <__copybits+0x40>
 80068d8:	bd70      	pop	{r4, r5, r6, pc}
 80068da:	f853 6b04 	ldr.w	r6, [r3], #4
 80068de:	f845 6f04 	str.w	r6, [r5, #4]!
 80068e2:	e7eb      	b.n	80068bc <__copybits+0x18>
 80068e4:	f840 3b04 	str.w	r3, [r0], #4
 80068e8:	e7f4      	b.n	80068d4 <__copybits+0x30>

080068ea <__any_on>:
 80068ea:	f100 0214 	add.w	r2, r0, #20
 80068ee:	6900      	ldr	r0, [r0, #16]
 80068f0:	114b      	asrs	r3, r1, #5
 80068f2:	4298      	cmp	r0, r3
 80068f4:	b510      	push	{r4, lr}
 80068f6:	db11      	blt.n	800691c <__any_on+0x32>
 80068f8:	dd0a      	ble.n	8006910 <__any_on+0x26>
 80068fa:	f011 011f 	ands.w	r1, r1, #31
 80068fe:	d007      	beq.n	8006910 <__any_on+0x26>
 8006900:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006904:	fa24 f001 	lsr.w	r0, r4, r1
 8006908:	fa00 f101 	lsl.w	r1, r0, r1
 800690c:	428c      	cmp	r4, r1
 800690e:	d10b      	bne.n	8006928 <__any_on+0x3e>
 8006910:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006914:	4293      	cmp	r3, r2
 8006916:	d803      	bhi.n	8006920 <__any_on+0x36>
 8006918:	2000      	movs	r0, #0
 800691a:	bd10      	pop	{r4, pc}
 800691c:	4603      	mov	r3, r0
 800691e:	e7f7      	b.n	8006910 <__any_on+0x26>
 8006920:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006924:	2900      	cmp	r1, #0
 8006926:	d0f5      	beq.n	8006914 <__any_on+0x2a>
 8006928:	2001      	movs	r0, #1
 800692a:	e7f6      	b.n	800691a <__any_on+0x30>

0800692c <_calloc_r>:
 800692c:	b570      	push	{r4, r5, r6, lr}
 800692e:	fba1 5402 	umull	r5, r4, r1, r2
 8006932:	b934      	cbnz	r4, 8006942 <_calloc_r+0x16>
 8006934:	4629      	mov	r1, r5
 8006936:	f000 f877 	bl	8006a28 <_malloc_r>
 800693a:	4606      	mov	r6, r0
 800693c:	b928      	cbnz	r0, 800694a <_calloc_r+0x1e>
 800693e:	4630      	mov	r0, r6
 8006940:	bd70      	pop	{r4, r5, r6, pc}
 8006942:	220c      	movs	r2, #12
 8006944:	6002      	str	r2, [r0, #0]
 8006946:	2600      	movs	r6, #0
 8006948:	e7f9      	b.n	800693e <_calloc_r+0x12>
 800694a:	462a      	mov	r2, r5
 800694c:	4621      	mov	r1, r4
 800694e:	f7fc fc07 	bl	8003160 <memset>
 8006952:	e7f4      	b.n	800693e <_calloc_r+0x12>

08006954 <_free_r>:
 8006954:	b538      	push	{r3, r4, r5, lr}
 8006956:	4605      	mov	r5, r0
 8006958:	2900      	cmp	r1, #0
 800695a:	d041      	beq.n	80069e0 <_free_r+0x8c>
 800695c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006960:	1f0c      	subs	r4, r1, #4
 8006962:	2b00      	cmp	r3, #0
 8006964:	bfb8      	it	lt
 8006966:	18e4      	addlt	r4, r4, r3
 8006968:	f000 fab0 	bl	8006ecc <__malloc_lock>
 800696c:	4a1d      	ldr	r2, [pc, #116]	; (80069e4 <_free_r+0x90>)
 800696e:	6813      	ldr	r3, [r2, #0]
 8006970:	b933      	cbnz	r3, 8006980 <_free_r+0x2c>
 8006972:	6063      	str	r3, [r4, #4]
 8006974:	6014      	str	r4, [r2, #0]
 8006976:	4628      	mov	r0, r5
 8006978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800697c:	f000 baac 	b.w	8006ed8 <__malloc_unlock>
 8006980:	42a3      	cmp	r3, r4
 8006982:	d908      	bls.n	8006996 <_free_r+0x42>
 8006984:	6820      	ldr	r0, [r4, #0]
 8006986:	1821      	adds	r1, r4, r0
 8006988:	428b      	cmp	r3, r1
 800698a:	bf01      	itttt	eq
 800698c:	6819      	ldreq	r1, [r3, #0]
 800698e:	685b      	ldreq	r3, [r3, #4]
 8006990:	1809      	addeq	r1, r1, r0
 8006992:	6021      	streq	r1, [r4, #0]
 8006994:	e7ed      	b.n	8006972 <_free_r+0x1e>
 8006996:	461a      	mov	r2, r3
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	b10b      	cbz	r3, 80069a0 <_free_r+0x4c>
 800699c:	42a3      	cmp	r3, r4
 800699e:	d9fa      	bls.n	8006996 <_free_r+0x42>
 80069a0:	6811      	ldr	r1, [r2, #0]
 80069a2:	1850      	adds	r0, r2, r1
 80069a4:	42a0      	cmp	r0, r4
 80069a6:	d10b      	bne.n	80069c0 <_free_r+0x6c>
 80069a8:	6820      	ldr	r0, [r4, #0]
 80069aa:	4401      	add	r1, r0
 80069ac:	1850      	adds	r0, r2, r1
 80069ae:	4283      	cmp	r3, r0
 80069b0:	6011      	str	r1, [r2, #0]
 80069b2:	d1e0      	bne.n	8006976 <_free_r+0x22>
 80069b4:	6818      	ldr	r0, [r3, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	6053      	str	r3, [r2, #4]
 80069ba:	4401      	add	r1, r0
 80069bc:	6011      	str	r1, [r2, #0]
 80069be:	e7da      	b.n	8006976 <_free_r+0x22>
 80069c0:	d902      	bls.n	80069c8 <_free_r+0x74>
 80069c2:	230c      	movs	r3, #12
 80069c4:	602b      	str	r3, [r5, #0]
 80069c6:	e7d6      	b.n	8006976 <_free_r+0x22>
 80069c8:	6820      	ldr	r0, [r4, #0]
 80069ca:	1821      	adds	r1, r4, r0
 80069cc:	428b      	cmp	r3, r1
 80069ce:	bf04      	itt	eq
 80069d0:	6819      	ldreq	r1, [r3, #0]
 80069d2:	685b      	ldreq	r3, [r3, #4]
 80069d4:	6063      	str	r3, [r4, #4]
 80069d6:	bf04      	itt	eq
 80069d8:	1809      	addeq	r1, r1, r0
 80069da:	6021      	streq	r1, [r4, #0]
 80069dc:	6054      	str	r4, [r2, #4]
 80069de:	e7ca      	b.n	8006976 <_free_r+0x22>
 80069e0:	bd38      	pop	{r3, r4, r5, pc}
 80069e2:	bf00      	nop
 80069e4:	200003a8 	.word	0x200003a8

080069e8 <sbrk_aligned>:
 80069e8:	b570      	push	{r4, r5, r6, lr}
 80069ea:	4e0e      	ldr	r6, [pc, #56]	; (8006a24 <sbrk_aligned+0x3c>)
 80069ec:	460c      	mov	r4, r1
 80069ee:	6831      	ldr	r1, [r6, #0]
 80069f0:	4605      	mov	r5, r0
 80069f2:	b911      	cbnz	r1, 80069fa <sbrk_aligned+0x12>
 80069f4:	f000 f9ee 	bl	8006dd4 <_sbrk_r>
 80069f8:	6030      	str	r0, [r6, #0]
 80069fa:	4621      	mov	r1, r4
 80069fc:	4628      	mov	r0, r5
 80069fe:	f000 f9e9 	bl	8006dd4 <_sbrk_r>
 8006a02:	1c43      	adds	r3, r0, #1
 8006a04:	d00a      	beq.n	8006a1c <sbrk_aligned+0x34>
 8006a06:	1cc4      	adds	r4, r0, #3
 8006a08:	f024 0403 	bic.w	r4, r4, #3
 8006a0c:	42a0      	cmp	r0, r4
 8006a0e:	d007      	beq.n	8006a20 <sbrk_aligned+0x38>
 8006a10:	1a21      	subs	r1, r4, r0
 8006a12:	4628      	mov	r0, r5
 8006a14:	f000 f9de 	bl	8006dd4 <_sbrk_r>
 8006a18:	3001      	adds	r0, #1
 8006a1a:	d101      	bne.n	8006a20 <sbrk_aligned+0x38>
 8006a1c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006a20:	4620      	mov	r0, r4
 8006a22:	bd70      	pop	{r4, r5, r6, pc}
 8006a24:	200003ac 	.word	0x200003ac

08006a28 <_malloc_r>:
 8006a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a2c:	1ccd      	adds	r5, r1, #3
 8006a2e:	f025 0503 	bic.w	r5, r5, #3
 8006a32:	3508      	adds	r5, #8
 8006a34:	2d0c      	cmp	r5, #12
 8006a36:	bf38      	it	cc
 8006a38:	250c      	movcc	r5, #12
 8006a3a:	2d00      	cmp	r5, #0
 8006a3c:	4607      	mov	r7, r0
 8006a3e:	db01      	blt.n	8006a44 <_malloc_r+0x1c>
 8006a40:	42a9      	cmp	r1, r5
 8006a42:	d905      	bls.n	8006a50 <_malloc_r+0x28>
 8006a44:	230c      	movs	r3, #12
 8006a46:	603b      	str	r3, [r7, #0]
 8006a48:	2600      	movs	r6, #0
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a50:	4e2e      	ldr	r6, [pc, #184]	; (8006b0c <_malloc_r+0xe4>)
 8006a52:	f000 fa3b 	bl	8006ecc <__malloc_lock>
 8006a56:	6833      	ldr	r3, [r6, #0]
 8006a58:	461c      	mov	r4, r3
 8006a5a:	bb34      	cbnz	r4, 8006aaa <_malloc_r+0x82>
 8006a5c:	4629      	mov	r1, r5
 8006a5e:	4638      	mov	r0, r7
 8006a60:	f7ff ffc2 	bl	80069e8 <sbrk_aligned>
 8006a64:	1c43      	adds	r3, r0, #1
 8006a66:	4604      	mov	r4, r0
 8006a68:	d14d      	bne.n	8006b06 <_malloc_r+0xde>
 8006a6a:	6834      	ldr	r4, [r6, #0]
 8006a6c:	4626      	mov	r6, r4
 8006a6e:	2e00      	cmp	r6, #0
 8006a70:	d140      	bne.n	8006af4 <_malloc_r+0xcc>
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	4631      	mov	r1, r6
 8006a76:	4638      	mov	r0, r7
 8006a78:	eb04 0803 	add.w	r8, r4, r3
 8006a7c:	f000 f9aa 	bl	8006dd4 <_sbrk_r>
 8006a80:	4580      	cmp	r8, r0
 8006a82:	d13a      	bne.n	8006afa <_malloc_r+0xd2>
 8006a84:	6821      	ldr	r1, [r4, #0]
 8006a86:	3503      	adds	r5, #3
 8006a88:	1a6d      	subs	r5, r5, r1
 8006a8a:	f025 0503 	bic.w	r5, r5, #3
 8006a8e:	3508      	adds	r5, #8
 8006a90:	2d0c      	cmp	r5, #12
 8006a92:	bf38      	it	cc
 8006a94:	250c      	movcc	r5, #12
 8006a96:	4629      	mov	r1, r5
 8006a98:	4638      	mov	r0, r7
 8006a9a:	f7ff ffa5 	bl	80069e8 <sbrk_aligned>
 8006a9e:	3001      	adds	r0, #1
 8006aa0:	d02b      	beq.n	8006afa <_malloc_r+0xd2>
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	442b      	add	r3, r5
 8006aa6:	6023      	str	r3, [r4, #0]
 8006aa8:	e00e      	b.n	8006ac8 <_malloc_r+0xa0>
 8006aaa:	6822      	ldr	r2, [r4, #0]
 8006aac:	1b52      	subs	r2, r2, r5
 8006aae:	d41e      	bmi.n	8006aee <_malloc_r+0xc6>
 8006ab0:	2a0b      	cmp	r2, #11
 8006ab2:	d916      	bls.n	8006ae2 <_malloc_r+0xba>
 8006ab4:	1961      	adds	r1, r4, r5
 8006ab6:	42a3      	cmp	r3, r4
 8006ab8:	6025      	str	r5, [r4, #0]
 8006aba:	bf18      	it	ne
 8006abc:	6059      	strne	r1, [r3, #4]
 8006abe:	6863      	ldr	r3, [r4, #4]
 8006ac0:	bf08      	it	eq
 8006ac2:	6031      	streq	r1, [r6, #0]
 8006ac4:	5162      	str	r2, [r4, r5]
 8006ac6:	604b      	str	r3, [r1, #4]
 8006ac8:	4638      	mov	r0, r7
 8006aca:	f104 060b 	add.w	r6, r4, #11
 8006ace:	f000 fa03 	bl	8006ed8 <__malloc_unlock>
 8006ad2:	f026 0607 	bic.w	r6, r6, #7
 8006ad6:	1d23      	adds	r3, r4, #4
 8006ad8:	1af2      	subs	r2, r6, r3
 8006ada:	d0b6      	beq.n	8006a4a <_malloc_r+0x22>
 8006adc:	1b9b      	subs	r3, r3, r6
 8006ade:	50a3      	str	r3, [r4, r2]
 8006ae0:	e7b3      	b.n	8006a4a <_malloc_r+0x22>
 8006ae2:	6862      	ldr	r2, [r4, #4]
 8006ae4:	42a3      	cmp	r3, r4
 8006ae6:	bf0c      	ite	eq
 8006ae8:	6032      	streq	r2, [r6, #0]
 8006aea:	605a      	strne	r2, [r3, #4]
 8006aec:	e7ec      	b.n	8006ac8 <_malloc_r+0xa0>
 8006aee:	4623      	mov	r3, r4
 8006af0:	6864      	ldr	r4, [r4, #4]
 8006af2:	e7b2      	b.n	8006a5a <_malloc_r+0x32>
 8006af4:	4634      	mov	r4, r6
 8006af6:	6876      	ldr	r6, [r6, #4]
 8006af8:	e7b9      	b.n	8006a6e <_malloc_r+0x46>
 8006afa:	230c      	movs	r3, #12
 8006afc:	603b      	str	r3, [r7, #0]
 8006afe:	4638      	mov	r0, r7
 8006b00:	f000 f9ea 	bl	8006ed8 <__malloc_unlock>
 8006b04:	e7a1      	b.n	8006a4a <_malloc_r+0x22>
 8006b06:	6025      	str	r5, [r4, #0]
 8006b08:	e7de      	b.n	8006ac8 <_malloc_r+0xa0>
 8006b0a:	bf00      	nop
 8006b0c:	200003a8 	.word	0x200003a8

08006b10 <__ssputs_r>:
 8006b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b14:	688e      	ldr	r6, [r1, #8]
 8006b16:	429e      	cmp	r6, r3
 8006b18:	4682      	mov	sl, r0
 8006b1a:	460c      	mov	r4, r1
 8006b1c:	4690      	mov	r8, r2
 8006b1e:	461f      	mov	r7, r3
 8006b20:	d838      	bhi.n	8006b94 <__ssputs_r+0x84>
 8006b22:	898a      	ldrh	r2, [r1, #12]
 8006b24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b28:	d032      	beq.n	8006b90 <__ssputs_r+0x80>
 8006b2a:	6825      	ldr	r5, [r4, #0]
 8006b2c:	6909      	ldr	r1, [r1, #16]
 8006b2e:	eba5 0901 	sub.w	r9, r5, r1
 8006b32:	6965      	ldr	r5, [r4, #20]
 8006b34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	444b      	add	r3, r9
 8006b40:	106d      	asrs	r5, r5, #1
 8006b42:	429d      	cmp	r5, r3
 8006b44:	bf38      	it	cc
 8006b46:	461d      	movcc	r5, r3
 8006b48:	0553      	lsls	r3, r2, #21
 8006b4a:	d531      	bpl.n	8006bb0 <__ssputs_r+0xa0>
 8006b4c:	4629      	mov	r1, r5
 8006b4e:	f7ff ff6b 	bl	8006a28 <_malloc_r>
 8006b52:	4606      	mov	r6, r0
 8006b54:	b950      	cbnz	r0, 8006b6c <__ssputs_r+0x5c>
 8006b56:	230c      	movs	r3, #12
 8006b58:	f8ca 3000 	str.w	r3, [sl]
 8006b5c:	89a3      	ldrh	r3, [r4, #12]
 8006b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b62:	81a3      	strh	r3, [r4, #12]
 8006b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b6c:	6921      	ldr	r1, [r4, #16]
 8006b6e:	464a      	mov	r2, r9
 8006b70:	f7ff fa1a 	bl	8005fa8 <memcpy>
 8006b74:	89a3      	ldrh	r3, [r4, #12]
 8006b76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b7e:	81a3      	strh	r3, [r4, #12]
 8006b80:	6126      	str	r6, [r4, #16]
 8006b82:	6165      	str	r5, [r4, #20]
 8006b84:	444e      	add	r6, r9
 8006b86:	eba5 0509 	sub.w	r5, r5, r9
 8006b8a:	6026      	str	r6, [r4, #0]
 8006b8c:	60a5      	str	r5, [r4, #8]
 8006b8e:	463e      	mov	r6, r7
 8006b90:	42be      	cmp	r6, r7
 8006b92:	d900      	bls.n	8006b96 <__ssputs_r+0x86>
 8006b94:	463e      	mov	r6, r7
 8006b96:	6820      	ldr	r0, [r4, #0]
 8006b98:	4632      	mov	r2, r6
 8006b9a:	4641      	mov	r1, r8
 8006b9c:	f000 f97c 	bl	8006e98 <memmove>
 8006ba0:	68a3      	ldr	r3, [r4, #8]
 8006ba2:	1b9b      	subs	r3, r3, r6
 8006ba4:	60a3      	str	r3, [r4, #8]
 8006ba6:	6823      	ldr	r3, [r4, #0]
 8006ba8:	4433      	add	r3, r6
 8006baa:	6023      	str	r3, [r4, #0]
 8006bac:	2000      	movs	r0, #0
 8006bae:	e7db      	b.n	8006b68 <__ssputs_r+0x58>
 8006bb0:	462a      	mov	r2, r5
 8006bb2:	f000 f997 	bl	8006ee4 <_realloc_r>
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d1e1      	bne.n	8006b80 <__ssputs_r+0x70>
 8006bbc:	6921      	ldr	r1, [r4, #16]
 8006bbe:	4650      	mov	r0, sl
 8006bc0:	f7ff fec8 	bl	8006954 <_free_r>
 8006bc4:	e7c7      	b.n	8006b56 <__ssputs_r+0x46>
	...

08006bc8 <_svfiprintf_r>:
 8006bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bcc:	4698      	mov	r8, r3
 8006bce:	898b      	ldrh	r3, [r1, #12]
 8006bd0:	061b      	lsls	r3, r3, #24
 8006bd2:	b09d      	sub	sp, #116	; 0x74
 8006bd4:	4607      	mov	r7, r0
 8006bd6:	460d      	mov	r5, r1
 8006bd8:	4614      	mov	r4, r2
 8006bda:	d50e      	bpl.n	8006bfa <_svfiprintf_r+0x32>
 8006bdc:	690b      	ldr	r3, [r1, #16]
 8006bde:	b963      	cbnz	r3, 8006bfa <_svfiprintf_r+0x32>
 8006be0:	2140      	movs	r1, #64	; 0x40
 8006be2:	f7ff ff21 	bl	8006a28 <_malloc_r>
 8006be6:	6028      	str	r0, [r5, #0]
 8006be8:	6128      	str	r0, [r5, #16]
 8006bea:	b920      	cbnz	r0, 8006bf6 <_svfiprintf_r+0x2e>
 8006bec:	230c      	movs	r3, #12
 8006bee:	603b      	str	r3, [r7, #0]
 8006bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bf4:	e0d1      	b.n	8006d9a <_svfiprintf_r+0x1d2>
 8006bf6:	2340      	movs	r3, #64	; 0x40
 8006bf8:	616b      	str	r3, [r5, #20]
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8006bfe:	2320      	movs	r3, #32
 8006c00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c04:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c08:	2330      	movs	r3, #48	; 0x30
 8006c0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006db4 <_svfiprintf_r+0x1ec>
 8006c0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c12:	f04f 0901 	mov.w	r9, #1
 8006c16:	4623      	mov	r3, r4
 8006c18:	469a      	mov	sl, r3
 8006c1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c1e:	b10a      	cbz	r2, 8006c24 <_svfiprintf_r+0x5c>
 8006c20:	2a25      	cmp	r2, #37	; 0x25
 8006c22:	d1f9      	bne.n	8006c18 <_svfiprintf_r+0x50>
 8006c24:	ebba 0b04 	subs.w	fp, sl, r4
 8006c28:	d00b      	beq.n	8006c42 <_svfiprintf_r+0x7a>
 8006c2a:	465b      	mov	r3, fp
 8006c2c:	4622      	mov	r2, r4
 8006c2e:	4629      	mov	r1, r5
 8006c30:	4638      	mov	r0, r7
 8006c32:	f7ff ff6d 	bl	8006b10 <__ssputs_r>
 8006c36:	3001      	adds	r0, #1
 8006c38:	f000 80aa 	beq.w	8006d90 <_svfiprintf_r+0x1c8>
 8006c3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c3e:	445a      	add	r2, fp
 8006c40:	9209      	str	r2, [sp, #36]	; 0x24
 8006c42:	f89a 3000 	ldrb.w	r3, [sl]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f000 80a2 	beq.w	8006d90 <_svfiprintf_r+0x1c8>
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c56:	f10a 0a01 	add.w	sl, sl, #1
 8006c5a:	9304      	str	r3, [sp, #16]
 8006c5c:	9307      	str	r3, [sp, #28]
 8006c5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c62:	931a      	str	r3, [sp, #104]	; 0x68
 8006c64:	4654      	mov	r4, sl
 8006c66:	2205      	movs	r2, #5
 8006c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c6c:	4851      	ldr	r0, [pc, #324]	; (8006db4 <_svfiprintf_r+0x1ec>)
 8006c6e:	f7f9 fabf 	bl	80001f0 <memchr>
 8006c72:	9a04      	ldr	r2, [sp, #16]
 8006c74:	b9d8      	cbnz	r0, 8006cae <_svfiprintf_r+0xe6>
 8006c76:	06d0      	lsls	r0, r2, #27
 8006c78:	bf44      	itt	mi
 8006c7a:	2320      	movmi	r3, #32
 8006c7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c80:	0711      	lsls	r1, r2, #28
 8006c82:	bf44      	itt	mi
 8006c84:	232b      	movmi	r3, #43	; 0x2b
 8006c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c8e:	2b2a      	cmp	r3, #42	; 0x2a
 8006c90:	d015      	beq.n	8006cbe <_svfiprintf_r+0xf6>
 8006c92:	9a07      	ldr	r2, [sp, #28]
 8006c94:	4654      	mov	r4, sl
 8006c96:	2000      	movs	r0, #0
 8006c98:	f04f 0c0a 	mov.w	ip, #10
 8006c9c:	4621      	mov	r1, r4
 8006c9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ca2:	3b30      	subs	r3, #48	; 0x30
 8006ca4:	2b09      	cmp	r3, #9
 8006ca6:	d94e      	bls.n	8006d46 <_svfiprintf_r+0x17e>
 8006ca8:	b1b0      	cbz	r0, 8006cd8 <_svfiprintf_r+0x110>
 8006caa:	9207      	str	r2, [sp, #28]
 8006cac:	e014      	b.n	8006cd8 <_svfiprintf_r+0x110>
 8006cae:	eba0 0308 	sub.w	r3, r0, r8
 8006cb2:	fa09 f303 	lsl.w	r3, r9, r3
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	9304      	str	r3, [sp, #16]
 8006cba:	46a2      	mov	sl, r4
 8006cbc:	e7d2      	b.n	8006c64 <_svfiprintf_r+0x9c>
 8006cbe:	9b03      	ldr	r3, [sp, #12]
 8006cc0:	1d19      	adds	r1, r3, #4
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	9103      	str	r1, [sp, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	bfbb      	ittet	lt
 8006cca:	425b      	neglt	r3, r3
 8006ccc:	f042 0202 	orrlt.w	r2, r2, #2
 8006cd0:	9307      	strge	r3, [sp, #28]
 8006cd2:	9307      	strlt	r3, [sp, #28]
 8006cd4:	bfb8      	it	lt
 8006cd6:	9204      	strlt	r2, [sp, #16]
 8006cd8:	7823      	ldrb	r3, [r4, #0]
 8006cda:	2b2e      	cmp	r3, #46	; 0x2e
 8006cdc:	d10c      	bne.n	8006cf8 <_svfiprintf_r+0x130>
 8006cde:	7863      	ldrb	r3, [r4, #1]
 8006ce0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ce2:	d135      	bne.n	8006d50 <_svfiprintf_r+0x188>
 8006ce4:	9b03      	ldr	r3, [sp, #12]
 8006ce6:	1d1a      	adds	r2, r3, #4
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	9203      	str	r2, [sp, #12]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	bfb8      	it	lt
 8006cf0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006cf4:	3402      	adds	r4, #2
 8006cf6:	9305      	str	r3, [sp, #20]
 8006cf8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006db8 <_svfiprintf_r+0x1f0>
 8006cfc:	7821      	ldrb	r1, [r4, #0]
 8006cfe:	2203      	movs	r2, #3
 8006d00:	4650      	mov	r0, sl
 8006d02:	f7f9 fa75 	bl	80001f0 <memchr>
 8006d06:	b140      	cbz	r0, 8006d1a <_svfiprintf_r+0x152>
 8006d08:	2340      	movs	r3, #64	; 0x40
 8006d0a:	eba0 000a 	sub.w	r0, r0, sl
 8006d0e:	fa03 f000 	lsl.w	r0, r3, r0
 8006d12:	9b04      	ldr	r3, [sp, #16]
 8006d14:	4303      	orrs	r3, r0
 8006d16:	3401      	adds	r4, #1
 8006d18:	9304      	str	r3, [sp, #16]
 8006d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d1e:	4827      	ldr	r0, [pc, #156]	; (8006dbc <_svfiprintf_r+0x1f4>)
 8006d20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d24:	2206      	movs	r2, #6
 8006d26:	f7f9 fa63 	bl	80001f0 <memchr>
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	d038      	beq.n	8006da0 <_svfiprintf_r+0x1d8>
 8006d2e:	4b24      	ldr	r3, [pc, #144]	; (8006dc0 <_svfiprintf_r+0x1f8>)
 8006d30:	bb1b      	cbnz	r3, 8006d7a <_svfiprintf_r+0x1b2>
 8006d32:	9b03      	ldr	r3, [sp, #12]
 8006d34:	3307      	adds	r3, #7
 8006d36:	f023 0307 	bic.w	r3, r3, #7
 8006d3a:	3308      	adds	r3, #8
 8006d3c:	9303      	str	r3, [sp, #12]
 8006d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d40:	4433      	add	r3, r6
 8006d42:	9309      	str	r3, [sp, #36]	; 0x24
 8006d44:	e767      	b.n	8006c16 <_svfiprintf_r+0x4e>
 8006d46:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	2001      	movs	r0, #1
 8006d4e:	e7a5      	b.n	8006c9c <_svfiprintf_r+0xd4>
 8006d50:	2300      	movs	r3, #0
 8006d52:	3401      	adds	r4, #1
 8006d54:	9305      	str	r3, [sp, #20]
 8006d56:	4619      	mov	r1, r3
 8006d58:	f04f 0c0a 	mov.w	ip, #10
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d62:	3a30      	subs	r2, #48	; 0x30
 8006d64:	2a09      	cmp	r2, #9
 8006d66:	d903      	bls.n	8006d70 <_svfiprintf_r+0x1a8>
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0c5      	beq.n	8006cf8 <_svfiprintf_r+0x130>
 8006d6c:	9105      	str	r1, [sp, #20]
 8006d6e:	e7c3      	b.n	8006cf8 <_svfiprintf_r+0x130>
 8006d70:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d74:	4604      	mov	r4, r0
 8006d76:	2301      	movs	r3, #1
 8006d78:	e7f0      	b.n	8006d5c <_svfiprintf_r+0x194>
 8006d7a:	ab03      	add	r3, sp, #12
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	462a      	mov	r2, r5
 8006d80:	4b10      	ldr	r3, [pc, #64]	; (8006dc4 <_svfiprintf_r+0x1fc>)
 8006d82:	a904      	add	r1, sp, #16
 8006d84:	4638      	mov	r0, r7
 8006d86:	f7fc fa91 	bl	80032ac <_printf_float>
 8006d8a:	1c42      	adds	r2, r0, #1
 8006d8c:	4606      	mov	r6, r0
 8006d8e:	d1d6      	bne.n	8006d3e <_svfiprintf_r+0x176>
 8006d90:	89ab      	ldrh	r3, [r5, #12]
 8006d92:	065b      	lsls	r3, r3, #25
 8006d94:	f53f af2c 	bmi.w	8006bf0 <_svfiprintf_r+0x28>
 8006d98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d9a:	b01d      	add	sp, #116	; 0x74
 8006d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da0:	ab03      	add	r3, sp, #12
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	462a      	mov	r2, r5
 8006da6:	4b07      	ldr	r3, [pc, #28]	; (8006dc4 <_svfiprintf_r+0x1fc>)
 8006da8:	a904      	add	r1, sp, #16
 8006daa:	4638      	mov	r0, r7
 8006dac:	f7fc fd16 	bl	80037dc <_printf_i>
 8006db0:	e7eb      	b.n	8006d8a <_svfiprintf_r+0x1c2>
 8006db2:	bf00      	nop
 8006db4:	08007f14 	.word	0x08007f14
 8006db8:	08007f1a 	.word	0x08007f1a
 8006dbc:	08007f1e 	.word	0x08007f1e
 8006dc0:	080032ad 	.word	0x080032ad
 8006dc4:	08006b11 	.word	0x08006b11

08006dc8 <nan>:
 8006dc8:	4901      	ldr	r1, [pc, #4]	; (8006dd0 <nan+0x8>)
 8006dca:	2000      	movs	r0, #0
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	7ff80000 	.word	0x7ff80000

08006dd4 <_sbrk_r>:
 8006dd4:	b538      	push	{r3, r4, r5, lr}
 8006dd6:	4d06      	ldr	r5, [pc, #24]	; (8006df0 <_sbrk_r+0x1c>)
 8006dd8:	2300      	movs	r3, #0
 8006dda:	4604      	mov	r4, r0
 8006ddc:	4608      	mov	r0, r1
 8006dde:	602b      	str	r3, [r5, #0]
 8006de0:	f000 fe1a 	bl	8007a18 <_sbrk>
 8006de4:	1c43      	adds	r3, r0, #1
 8006de6:	d102      	bne.n	8006dee <_sbrk_r+0x1a>
 8006de8:	682b      	ldr	r3, [r5, #0]
 8006dea:	b103      	cbz	r3, 8006dee <_sbrk_r+0x1a>
 8006dec:	6023      	str	r3, [r4, #0]
 8006dee:	bd38      	pop	{r3, r4, r5, pc}
 8006df0:	200003b0 	.word	0x200003b0

08006df4 <strncmp>:
 8006df4:	b510      	push	{r4, lr}
 8006df6:	4603      	mov	r3, r0
 8006df8:	b172      	cbz	r2, 8006e18 <strncmp+0x24>
 8006dfa:	3901      	subs	r1, #1
 8006dfc:	1884      	adds	r4, r0, r2
 8006dfe:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006e02:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006e06:	4290      	cmp	r0, r2
 8006e08:	d101      	bne.n	8006e0e <strncmp+0x1a>
 8006e0a:	42a3      	cmp	r3, r4
 8006e0c:	d101      	bne.n	8006e12 <strncmp+0x1e>
 8006e0e:	1a80      	subs	r0, r0, r2
 8006e10:	bd10      	pop	{r4, pc}
 8006e12:	2800      	cmp	r0, #0
 8006e14:	d1f3      	bne.n	8006dfe <strncmp+0xa>
 8006e16:	e7fa      	b.n	8006e0e <strncmp+0x1a>
 8006e18:	4610      	mov	r0, r2
 8006e1a:	e7f9      	b.n	8006e10 <strncmp+0x1c>

08006e1c <__ascii_wctomb>:
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	4608      	mov	r0, r1
 8006e20:	b141      	cbz	r1, 8006e34 <__ascii_wctomb+0x18>
 8006e22:	2aff      	cmp	r2, #255	; 0xff
 8006e24:	d904      	bls.n	8006e30 <__ascii_wctomb+0x14>
 8006e26:	228a      	movs	r2, #138	; 0x8a
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e2e:	4770      	bx	lr
 8006e30:	700a      	strb	r2, [r1, #0]
 8006e32:	2001      	movs	r0, #1
 8006e34:	4770      	bx	lr
	...

08006e38 <__assert_func>:
 8006e38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e3a:	4614      	mov	r4, r2
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	4b09      	ldr	r3, [pc, #36]	; (8006e64 <__assert_func+0x2c>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4605      	mov	r5, r0
 8006e44:	68d8      	ldr	r0, [r3, #12]
 8006e46:	b14c      	cbz	r4, 8006e5c <__assert_func+0x24>
 8006e48:	4b07      	ldr	r3, [pc, #28]	; (8006e68 <__assert_func+0x30>)
 8006e4a:	9100      	str	r1, [sp, #0]
 8006e4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e50:	4906      	ldr	r1, [pc, #24]	; (8006e6c <__assert_func+0x34>)
 8006e52:	462b      	mov	r3, r5
 8006e54:	f000 f80e 	bl	8006e74 <fiprintf>
 8006e58:	f000 fa8a 	bl	8007370 <abort>
 8006e5c:	4b04      	ldr	r3, [pc, #16]	; (8006e70 <__assert_func+0x38>)
 8006e5e:	461c      	mov	r4, r3
 8006e60:	e7f3      	b.n	8006e4a <__assert_func+0x12>
 8006e62:	bf00      	nop
 8006e64:	20000044 	.word	0x20000044
 8006e68:	08007f25 	.word	0x08007f25
 8006e6c:	08007f32 	.word	0x08007f32
 8006e70:	08007f60 	.word	0x08007f60

08006e74 <fiprintf>:
 8006e74:	b40e      	push	{r1, r2, r3}
 8006e76:	b503      	push	{r0, r1, lr}
 8006e78:	4601      	mov	r1, r0
 8006e7a:	ab03      	add	r3, sp, #12
 8006e7c:	4805      	ldr	r0, [pc, #20]	; (8006e94 <fiprintf+0x20>)
 8006e7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e82:	6800      	ldr	r0, [r0, #0]
 8006e84:	9301      	str	r3, [sp, #4]
 8006e86:	f000 f883 	bl	8006f90 <_vfiprintf_r>
 8006e8a:	b002      	add	sp, #8
 8006e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e90:	b003      	add	sp, #12
 8006e92:	4770      	bx	lr
 8006e94:	20000044 	.word	0x20000044

08006e98 <memmove>:
 8006e98:	4288      	cmp	r0, r1
 8006e9a:	b510      	push	{r4, lr}
 8006e9c:	eb01 0402 	add.w	r4, r1, r2
 8006ea0:	d902      	bls.n	8006ea8 <memmove+0x10>
 8006ea2:	4284      	cmp	r4, r0
 8006ea4:	4623      	mov	r3, r4
 8006ea6:	d807      	bhi.n	8006eb8 <memmove+0x20>
 8006ea8:	1e43      	subs	r3, r0, #1
 8006eaa:	42a1      	cmp	r1, r4
 8006eac:	d008      	beq.n	8006ec0 <memmove+0x28>
 8006eae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006eb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006eb6:	e7f8      	b.n	8006eaa <memmove+0x12>
 8006eb8:	4402      	add	r2, r0
 8006eba:	4601      	mov	r1, r0
 8006ebc:	428a      	cmp	r2, r1
 8006ebe:	d100      	bne.n	8006ec2 <memmove+0x2a>
 8006ec0:	bd10      	pop	{r4, pc}
 8006ec2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ec6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006eca:	e7f7      	b.n	8006ebc <memmove+0x24>

08006ecc <__malloc_lock>:
 8006ecc:	4801      	ldr	r0, [pc, #4]	; (8006ed4 <__malloc_lock+0x8>)
 8006ece:	f000 bc0b 	b.w	80076e8 <__retarget_lock_acquire_recursive>
 8006ed2:	bf00      	nop
 8006ed4:	200003b4 	.word	0x200003b4

08006ed8 <__malloc_unlock>:
 8006ed8:	4801      	ldr	r0, [pc, #4]	; (8006ee0 <__malloc_unlock+0x8>)
 8006eda:	f000 bc06 	b.w	80076ea <__retarget_lock_release_recursive>
 8006ede:	bf00      	nop
 8006ee0:	200003b4 	.word	0x200003b4

08006ee4 <_realloc_r>:
 8006ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ee8:	4680      	mov	r8, r0
 8006eea:	4614      	mov	r4, r2
 8006eec:	460e      	mov	r6, r1
 8006eee:	b921      	cbnz	r1, 8006efa <_realloc_r+0x16>
 8006ef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef4:	4611      	mov	r1, r2
 8006ef6:	f7ff bd97 	b.w	8006a28 <_malloc_r>
 8006efa:	b92a      	cbnz	r2, 8006f08 <_realloc_r+0x24>
 8006efc:	f7ff fd2a 	bl	8006954 <_free_r>
 8006f00:	4625      	mov	r5, r4
 8006f02:	4628      	mov	r0, r5
 8006f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f08:	f000 fc56 	bl	80077b8 <_malloc_usable_size_r>
 8006f0c:	4284      	cmp	r4, r0
 8006f0e:	4607      	mov	r7, r0
 8006f10:	d802      	bhi.n	8006f18 <_realloc_r+0x34>
 8006f12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f16:	d812      	bhi.n	8006f3e <_realloc_r+0x5a>
 8006f18:	4621      	mov	r1, r4
 8006f1a:	4640      	mov	r0, r8
 8006f1c:	f7ff fd84 	bl	8006a28 <_malloc_r>
 8006f20:	4605      	mov	r5, r0
 8006f22:	2800      	cmp	r0, #0
 8006f24:	d0ed      	beq.n	8006f02 <_realloc_r+0x1e>
 8006f26:	42bc      	cmp	r4, r7
 8006f28:	4622      	mov	r2, r4
 8006f2a:	4631      	mov	r1, r6
 8006f2c:	bf28      	it	cs
 8006f2e:	463a      	movcs	r2, r7
 8006f30:	f7ff f83a 	bl	8005fa8 <memcpy>
 8006f34:	4631      	mov	r1, r6
 8006f36:	4640      	mov	r0, r8
 8006f38:	f7ff fd0c 	bl	8006954 <_free_r>
 8006f3c:	e7e1      	b.n	8006f02 <_realloc_r+0x1e>
 8006f3e:	4635      	mov	r5, r6
 8006f40:	e7df      	b.n	8006f02 <_realloc_r+0x1e>

08006f42 <__sfputc_r>:
 8006f42:	6893      	ldr	r3, [r2, #8]
 8006f44:	3b01      	subs	r3, #1
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	b410      	push	{r4}
 8006f4a:	6093      	str	r3, [r2, #8]
 8006f4c:	da07      	bge.n	8006f5e <__sfputc_r+0x1c>
 8006f4e:	6994      	ldr	r4, [r2, #24]
 8006f50:	42a3      	cmp	r3, r4
 8006f52:	db01      	blt.n	8006f58 <__sfputc_r+0x16>
 8006f54:	290a      	cmp	r1, #10
 8006f56:	d102      	bne.n	8006f5e <__sfputc_r+0x1c>
 8006f58:	bc10      	pop	{r4}
 8006f5a:	f000 b949 	b.w	80071f0 <__swbuf_r>
 8006f5e:	6813      	ldr	r3, [r2, #0]
 8006f60:	1c58      	adds	r0, r3, #1
 8006f62:	6010      	str	r0, [r2, #0]
 8006f64:	7019      	strb	r1, [r3, #0]
 8006f66:	4608      	mov	r0, r1
 8006f68:	bc10      	pop	{r4}
 8006f6a:	4770      	bx	lr

08006f6c <__sfputs_r>:
 8006f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6e:	4606      	mov	r6, r0
 8006f70:	460f      	mov	r7, r1
 8006f72:	4614      	mov	r4, r2
 8006f74:	18d5      	adds	r5, r2, r3
 8006f76:	42ac      	cmp	r4, r5
 8006f78:	d101      	bne.n	8006f7e <__sfputs_r+0x12>
 8006f7a:	2000      	movs	r0, #0
 8006f7c:	e007      	b.n	8006f8e <__sfputs_r+0x22>
 8006f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f82:	463a      	mov	r2, r7
 8006f84:	4630      	mov	r0, r6
 8006f86:	f7ff ffdc 	bl	8006f42 <__sfputc_r>
 8006f8a:	1c43      	adds	r3, r0, #1
 8006f8c:	d1f3      	bne.n	8006f76 <__sfputs_r+0xa>
 8006f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006f90 <_vfiprintf_r>:
 8006f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f94:	460d      	mov	r5, r1
 8006f96:	b09d      	sub	sp, #116	; 0x74
 8006f98:	4614      	mov	r4, r2
 8006f9a:	4698      	mov	r8, r3
 8006f9c:	4606      	mov	r6, r0
 8006f9e:	b118      	cbz	r0, 8006fa8 <_vfiprintf_r+0x18>
 8006fa0:	6983      	ldr	r3, [r0, #24]
 8006fa2:	b90b      	cbnz	r3, 8006fa8 <_vfiprintf_r+0x18>
 8006fa4:	f000 fb02 	bl	80075ac <__sinit>
 8006fa8:	4b89      	ldr	r3, [pc, #548]	; (80071d0 <_vfiprintf_r+0x240>)
 8006faa:	429d      	cmp	r5, r3
 8006fac:	d11b      	bne.n	8006fe6 <_vfiprintf_r+0x56>
 8006fae:	6875      	ldr	r5, [r6, #4]
 8006fb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fb2:	07d9      	lsls	r1, r3, #31
 8006fb4:	d405      	bmi.n	8006fc2 <_vfiprintf_r+0x32>
 8006fb6:	89ab      	ldrh	r3, [r5, #12]
 8006fb8:	059a      	lsls	r2, r3, #22
 8006fba:	d402      	bmi.n	8006fc2 <_vfiprintf_r+0x32>
 8006fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fbe:	f000 fb93 	bl	80076e8 <__retarget_lock_acquire_recursive>
 8006fc2:	89ab      	ldrh	r3, [r5, #12]
 8006fc4:	071b      	lsls	r3, r3, #28
 8006fc6:	d501      	bpl.n	8006fcc <_vfiprintf_r+0x3c>
 8006fc8:	692b      	ldr	r3, [r5, #16]
 8006fca:	b9eb      	cbnz	r3, 8007008 <_vfiprintf_r+0x78>
 8006fcc:	4629      	mov	r1, r5
 8006fce:	4630      	mov	r0, r6
 8006fd0:	f000 f960 	bl	8007294 <__swsetup_r>
 8006fd4:	b1c0      	cbz	r0, 8007008 <_vfiprintf_r+0x78>
 8006fd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fd8:	07dc      	lsls	r4, r3, #31
 8006fda:	d50e      	bpl.n	8006ffa <_vfiprintf_r+0x6a>
 8006fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fe0:	b01d      	add	sp, #116	; 0x74
 8006fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe6:	4b7b      	ldr	r3, [pc, #492]	; (80071d4 <_vfiprintf_r+0x244>)
 8006fe8:	429d      	cmp	r5, r3
 8006fea:	d101      	bne.n	8006ff0 <_vfiprintf_r+0x60>
 8006fec:	68b5      	ldr	r5, [r6, #8]
 8006fee:	e7df      	b.n	8006fb0 <_vfiprintf_r+0x20>
 8006ff0:	4b79      	ldr	r3, [pc, #484]	; (80071d8 <_vfiprintf_r+0x248>)
 8006ff2:	429d      	cmp	r5, r3
 8006ff4:	bf08      	it	eq
 8006ff6:	68f5      	ldreq	r5, [r6, #12]
 8006ff8:	e7da      	b.n	8006fb0 <_vfiprintf_r+0x20>
 8006ffa:	89ab      	ldrh	r3, [r5, #12]
 8006ffc:	0598      	lsls	r0, r3, #22
 8006ffe:	d4ed      	bmi.n	8006fdc <_vfiprintf_r+0x4c>
 8007000:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007002:	f000 fb72 	bl	80076ea <__retarget_lock_release_recursive>
 8007006:	e7e9      	b.n	8006fdc <_vfiprintf_r+0x4c>
 8007008:	2300      	movs	r3, #0
 800700a:	9309      	str	r3, [sp, #36]	; 0x24
 800700c:	2320      	movs	r3, #32
 800700e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007012:	f8cd 800c 	str.w	r8, [sp, #12]
 8007016:	2330      	movs	r3, #48	; 0x30
 8007018:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80071dc <_vfiprintf_r+0x24c>
 800701c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007020:	f04f 0901 	mov.w	r9, #1
 8007024:	4623      	mov	r3, r4
 8007026:	469a      	mov	sl, r3
 8007028:	f813 2b01 	ldrb.w	r2, [r3], #1
 800702c:	b10a      	cbz	r2, 8007032 <_vfiprintf_r+0xa2>
 800702e:	2a25      	cmp	r2, #37	; 0x25
 8007030:	d1f9      	bne.n	8007026 <_vfiprintf_r+0x96>
 8007032:	ebba 0b04 	subs.w	fp, sl, r4
 8007036:	d00b      	beq.n	8007050 <_vfiprintf_r+0xc0>
 8007038:	465b      	mov	r3, fp
 800703a:	4622      	mov	r2, r4
 800703c:	4629      	mov	r1, r5
 800703e:	4630      	mov	r0, r6
 8007040:	f7ff ff94 	bl	8006f6c <__sfputs_r>
 8007044:	3001      	adds	r0, #1
 8007046:	f000 80aa 	beq.w	800719e <_vfiprintf_r+0x20e>
 800704a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800704c:	445a      	add	r2, fp
 800704e:	9209      	str	r2, [sp, #36]	; 0x24
 8007050:	f89a 3000 	ldrb.w	r3, [sl]
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 80a2 	beq.w	800719e <_vfiprintf_r+0x20e>
 800705a:	2300      	movs	r3, #0
 800705c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007060:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007064:	f10a 0a01 	add.w	sl, sl, #1
 8007068:	9304      	str	r3, [sp, #16]
 800706a:	9307      	str	r3, [sp, #28]
 800706c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007070:	931a      	str	r3, [sp, #104]	; 0x68
 8007072:	4654      	mov	r4, sl
 8007074:	2205      	movs	r2, #5
 8007076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800707a:	4858      	ldr	r0, [pc, #352]	; (80071dc <_vfiprintf_r+0x24c>)
 800707c:	f7f9 f8b8 	bl	80001f0 <memchr>
 8007080:	9a04      	ldr	r2, [sp, #16]
 8007082:	b9d8      	cbnz	r0, 80070bc <_vfiprintf_r+0x12c>
 8007084:	06d1      	lsls	r1, r2, #27
 8007086:	bf44      	itt	mi
 8007088:	2320      	movmi	r3, #32
 800708a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800708e:	0713      	lsls	r3, r2, #28
 8007090:	bf44      	itt	mi
 8007092:	232b      	movmi	r3, #43	; 0x2b
 8007094:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007098:	f89a 3000 	ldrb.w	r3, [sl]
 800709c:	2b2a      	cmp	r3, #42	; 0x2a
 800709e:	d015      	beq.n	80070cc <_vfiprintf_r+0x13c>
 80070a0:	9a07      	ldr	r2, [sp, #28]
 80070a2:	4654      	mov	r4, sl
 80070a4:	2000      	movs	r0, #0
 80070a6:	f04f 0c0a 	mov.w	ip, #10
 80070aa:	4621      	mov	r1, r4
 80070ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070b0:	3b30      	subs	r3, #48	; 0x30
 80070b2:	2b09      	cmp	r3, #9
 80070b4:	d94e      	bls.n	8007154 <_vfiprintf_r+0x1c4>
 80070b6:	b1b0      	cbz	r0, 80070e6 <_vfiprintf_r+0x156>
 80070b8:	9207      	str	r2, [sp, #28]
 80070ba:	e014      	b.n	80070e6 <_vfiprintf_r+0x156>
 80070bc:	eba0 0308 	sub.w	r3, r0, r8
 80070c0:	fa09 f303 	lsl.w	r3, r9, r3
 80070c4:	4313      	orrs	r3, r2
 80070c6:	9304      	str	r3, [sp, #16]
 80070c8:	46a2      	mov	sl, r4
 80070ca:	e7d2      	b.n	8007072 <_vfiprintf_r+0xe2>
 80070cc:	9b03      	ldr	r3, [sp, #12]
 80070ce:	1d19      	adds	r1, r3, #4
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	9103      	str	r1, [sp, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	bfbb      	ittet	lt
 80070d8:	425b      	neglt	r3, r3
 80070da:	f042 0202 	orrlt.w	r2, r2, #2
 80070de:	9307      	strge	r3, [sp, #28]
 80070e0:	9307      	strlt	r3, [sp, #28]
 80070e2:	bfb8      	it	lt
 80070e4:	9204      	strlt	r2, [sp, #16]
 80070e6:	7823      	ldrb	r3, [r4, #0]
 80070e8:	2b2e      	cmp	r3, #46	; 0x2e
 80070ea:	d10c      	bne.n	8007106 <_vfiprintf_r+0x176>
 80070ec:	7863      	ldrb	r3, [r4, #1]
 80070ee:	2b2a      	cmp	r3, #42	; 0x2a
 80070f0:	d135      	bne.n	800715e <_vfiprintf_r+0x1ce>
 80070f2:	9b03      	ldr	r3, [sp, #12]
 80070f4:	1d1a      	adds	r2, r3, #4
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	9203      	str	r2, [sp, #12]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	bfb8      	it	lt
 80070fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007102:	3402      	adds	r4, #2
 8007104:	9305      	str	r3, [sp, #20]
 8007106:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80071e0 <_vfiprintf_r+0x250>
 800710a:	7821      	ldrb	r1, [r4, #0]
 800710c:	2203      	movs	r2, #3
 800710e:	4650      	mov	r0, sl
 8007110:	f7f9 f86e 	bl	80001f0 <memchr>
 8007114:	b140      	cbz	r0, 8007128 <_vfiprintf_r+0x198>
 8007116:	2340      	movs	r3, #64	; 0x40
 8007118:	eba0 000a 	sub.w	r0, r0, sl
 800711c:	fa03 f000 	lsl.w	r0, r3, r0
 8007120:	9b04      	ldr	r3, [sp, #16]
 8007122:	4303      	orrs	r3, r0
 8007124:	3401      	adds	r4, #1
 8007126:	9304      	str	r3, [sp, #16]
 8007128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800712c:	482d      	ldr	r0, [pc, #180]	; (80071e4 <_vfiprintf_r+0x254>)
 800712e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007132:	2206      	movs	r2, #6
 8007134:	f7f9 f85c 	bl	80001f0 <memchr>
 8007138:	2800      	cmp	r0, #0
 800713a:	d03f      	beq.n	80071bc <_vfiprintf_r+0x22c>
 800713c:	4b2a      	ldr	r3, [pc, #168]	; (80071e8 <_vfiprintf_r+0x258>)
 800713e:	bb1b      	cbnz	r3, 8007188 <_vfiprintf_r+0x1f8>
 8007140:	9b03      	ldr	r3, [sp, #12]
 8007142:	3307      	adds	r3, #7
 8007144:	f023 0307 	bic.w	r3, r3, #7
 8007148:	3308      	adds	r3, #8
 800714a:	9303      	str	r3, [sp, #12]
 800714c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800714e:	443b      	add	r3, r7
 8007150:	9309      	str	r3, [sp, #36]	; 0x24
 8007152:	e767      	b.n	8007024 <_vfiprintf_r+0x94>
 8007154:	fb0c 3202 	mla	r2, ip, r2, r3
 8007158:	460c      	mov	r4, r1
 800715a:	2001      	movs	r0, #1
 800715c:	e7a5      	b.n	80070aa <_vfiprintf_r+0x11a>
 800715e:	2300      	movs	r3, #0
 8007160:	3401      	adds	r4, #1
 8007162:	9305      	str	r3, [sp, #20]
 8007164:	4619      	mov	r1, r3
 8007166:	f04f 0c0a 	mov.w	ip, #10
 800716a:	4620      	mov	r0, r4
 800716c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007170:	3a30      	subs	r2, #48	; 0x30
 8007172:	2a09      	cmp	r2, #9
 8007174:	d903      	bls.n	800717e <_vfiprintf_r+0x1ee>
 8007176:	2b00      	cmp	r3, #0
 8007178:	d0c5      	beq.n	8007106 <_vfiprintf_r+0x176>
 800717a:	9105      	str	r1, [sp, #20]
 800717c:	e7c3      	b.n	8007106 <_vfiprintf_r+0x176>
 800717e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007182:	4604      	mov	r4, r0
 8007184:	2301      	movs	r3, #1
 8007186:	e7f0      	b.n	800716a <_vfiprintf_r+0x1da>
 8007188:	ab03      	add	r3, sp, #12
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	462a      	mov	r2, r5
 800718e:	4b17      	ldr	r3, [pc, #92]	; (80071ec <_vfiprintf_r+0x25c>)
 8007190:	a904      	add	r1, sp, #16
 8007192:	4630      	mov	r0, r6
 8007194:	f7fc f88a 	bl	80032ac <_printf_float>
 8007198:	4607      	mov	r7, r0
 800719a:	1c78      	adds	r0, r7, #1
 800719c:	d1d6      	bne.n	800714c <_vfiprintf_r+0x1bc>
 800719e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071a0:	07d9      	lsls	r1, r3, #31
 80071a2:	d405      	bmi.n	80071b0 <_vfiprintf_r+0x220>
 80071a4:	89ab      	ldrh	r3, [r5, #12]
 80071a6:	059a      	lsls	r2, r3, #22
 80071a8:	d402      	bmi.n	80071b0 <_vfiprintf_r+0x220>
 80071aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071ac:	f000 fa9d 	bl	80076ea <__retarget_lock_release_recursive>
 80071b0:	89ab      	ldrh	r3, [r5, #12]
 80071b2:	065b      	lsls	r3, r3, #25
 80071b4:	f53f af12 	bmi.w	8006fdc <_vfiprintf_r+0x4c>
 80071b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071ba:	e711      	b.n	8006fe0 <_vfiprintf_r+0x50>
 80071bc:	ab03      	add	r3, sp, #12
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	462a      	mov	r2, r5
 80071c2:	4b0a      	ldr	r3, [pc, #40]	; (80071ec <_vfiprintf_r+0x25c>)
 80071c4:	a904      	add	r1, sp, #16
 80071c6:	4630      	mov	r0, r6
 80071c8:	f7fc fb08 	bl	80037dc <_printf_i>
 80071cc:	e7e4      	b.n	8007198 <_vfiprintf_r+0x208>
 80071ce:	bf00      	nop
 80071d0:	08007f84 	.word	0x08007f84
 80071d4:	08007fa4 	.word	0x08007fa4
 80071d8:	08007f64 	.word	0x08007f64
 80071dc:	08007f14 	.word	0x08007f14
 80071e0:	08007f1a 	.word	0x08007f1a
 80071e4:	08007f1e 	.word	0x08007f1e
 80071e8:	080032ad 	.word	0x080032ad
 80071ec:	08006f6d 	.word	0x08006f6d

080071f0 <__swbuf_r>:
 80071f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f2:	460e      	mov	r6, r1
 80071f4:	4614      	mov	r4, r2
 80071f6:	4605      	mov	r5, r0
 80071f8:	b118      	cbz	r0, 8007202 <__swbuf_r+0x12>
 80071fa:	6983      	ldr	r3, [r0, #24]
 80071fc:	b90b      	cbnz	r3, 8007202 <__swbuf_r+0x12>
 80071fe:	f000 f9d5 	bl	80075ac <__sinit>
 8007202:	4b21      	ldr	r3, [pc, #132]	; (8007288 <__swbuf_r+0x98>)
 8007204:	429c      	cmp	r4, r3
 8007206:	d12b      	bne.n	8007260 <__swbuf_r+0x70>
 8007208:	686c      	ldr	r4, [r5, #4]
 800720a:	69a3      	ldr	r3, [r4, #24]
 800720c:	60a3      	str	r3, [r4, #8]
 800720e:	89a3      	ldrh	r3, [r4, #12]
 8007210:	071a      	lsls	r2, r3, #28
 8007212:	d52f      	bpl.n	8007274 <__swbuf_r+0x84>
 8007214:	6923      	ldr	r3, [r4, #16]
 8007216:	b36b      	cbz	r3, 8007274 <__swbuf_r+0x84>
 8007218:	6923      	ldr	r3, [r4, #16]
 800721a:	6820      	ldr	r0, [r4, #0]
 800721c:	1ac0      	subs	r0, r0, r3
 800721e:	6963      	ldr	r3, [r4, #20]
 8007220:	b2f6      	uxtb	r6, r6
 8007222:	4283      	cmp	r3, r0
 8007224:	4637      	mov	r7, r6
 8007226:	dc04      	bgt.n	8007232 <__swbuf_r+0x42>
 8007228:	4621      	mov	r1, r4
 800722a:	4628      	mov	r0, r5
 800722c:	f000 f92a 	bl	8007484 <_fflush_r>
 8007230:	bb30      	cbnz	r0, 8007280 <__swbuf_r+0x90>
 8007232:	68a3      	ldr	r3, [r4, #8]
 8007234:	3b01      	subs	r3, #1
 8007236:	60a3      	str	r3, [r4, #8]
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	6022      	str	r2, [r4, #0]
 800723e:	701e      	strb	r6, [r3, #0]
 8007240:	6963      	ldr	r3, [r4, #20]
 8007242:	3001      	adds	r0, #1
 8007244:	4283      	cmp	r3, r0
 8007246:	d004      	beq.n	8007252 <__swbuf_r+0x62>
 8007248:	89a3      	ldrh	r3, [r4, #12]
 800724a:	07db      	lsls	r3, r3, #31
 800724c:	d506      	bpl.n	800725c <__swbuf_r+0x6c>
 800724e:	2e0a      	cmp	r6, #10
 8007250:	d104      	bne.n	800725c <__swbuf_r+0x6c>
 8007252:	4621      	mov	r1, r4
 8007254:	4628      	mov	r0, r5
 8007256:	f000 f915 	bl	8007484 <_fflush_r>
 800725a:	b988      	cbnz	r0, 8007280 <__swbuf_r+0x90>
 800725c:	4638      	mov	r0, r7
 800725e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007260:	4b0a      	ldr	r3, [pc, #40]	; (800728c <__swbuf_r+0x9c>)
 8007262:	429c      	cmp	r4, r3
 8007264:	d101      	bne.n	800726a <__swbuf_r+0x7a>
 8007266:	68ac      	ldr	r4, [r5, #8]
 8007268:	e7cf      	b.n	800720a <__swbuf_r+0x1a>
 800726a:	4b09      	ldr	r3, [pc, #36]	; (8007290 <__swbuf_r+0xa0>)
 800726c:	429c      	cmp	r4, r3
 800726e:	bf08      	it	eq
 8007270:	68ec      	ldreq	r4, [r5, #12]
 8007272:	e7ca      	b.n	800720a <__swbuf_r+0x1a>
 8007274:	4621      	mov	r1, r4
 8007276:	4628      	mov	r0, r5
 8007278:	f000 f80c 	bl	8007294 <__swsetup_r>
 800727c:	2800      	cmp	r0, #0
 800727e:	d0cb      	beq.n	8007218 <__swbuf_r+0x28>
 8007280:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007284:	e7ea      	b.n	800725c <__swbuf_r+0x6c>
 8007286:	bf00      	nop
 8007288:	08007f84 	.word	0x08007f84
 800728c:	08007fa4 	.word	0x08007fa4
 8007290:	08007f64 	.word	0x08007f64

08007294 <__swsetup_r>:
 8007294:	4b32      	ldr	r3, [pc, #200]	; (8007360 <__swsetup_r+0xcc>)
 8007296:	b570      	push	{r4, r5, r6, lr}
 8007298:	681d      	ldr	r5, [r3, #0]
 800729a:	4606      	mov	r6, r0
 800729c:	460c      	mov	r4, r1
 800729e:	b125      	cbz	r5, 80072aa <__swsetup_r+0x16>
 80072a0:	69ab      	ldr	r3, [r5, #24]
 80072a2:	b913      	cbnz	r3, 80072aa <__swsetup_r+0x16>
 80072a4:	4628      	mov	r0, r5
 80072a6:	f000 f981 	bl	80075ac <__sinit>
 80072aa:	4b2e      	ldr	r3, [pc, #184]	; (8007364 <__swsetup_r+0xd0>)
 80072ac:	429c      	cmp	r4, r3
 80072ae:	d10f      	bne.n	80072d0 <__swsetup_r+0x3c>
 80072b0:	686c      	ldr	r4, [r5, #4]
 80072b2:	89a3      	ldrh	r3, [r4, #12]
 80072b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072b8:	0719      	lsls	r1, r3, #28
 80072ba:	d42c      	bmi.n	8007316 <__swsetup_r+0x82>
 80072bc:	06dd      	lsls	r5, r3, #27
 80072be:	d411      	bmi.n	80072e4 <__swsetup_r+0x50>
 80072c0:	2309      	movs	r3, #9
 80072c2:	6033      	str	r3, [r6, #0]
 80072c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80072c8:	81a3      	strh	r3, [r4, #12]
 80072ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072ce:	e03e      	b.n	800734e <__swsetup_r+0xba>
 80072d0:	4b25      	ldr	r3, [pc, #148]	; (8007368 <__swsetup_r+0xd4>)
 80072d2:	429c      	cmp	r4, r3
 80072d4:	d101      	bne.n	80072da <__swsetup_r+0x46>
 80072d6:	68ac      	ldr	r4, [r5, #8]
 80072d8:	e7eb      	b.n	80072b2 <__swsetup_r+0x1e>
 80072da:	4b24      	ldr	r3, [pc, #144]	; (800736c <__swsetup_r+0xd8>)
 80072dc:	429c      	cmp	r4, r3
 80072de:	bf08      	it	eq
 80072e0:	68ec      	ldreq	r4, [r5, #12]
 80072e2:	e7e6      	b.n	80072b2 <__swsetup_r+0x1e>
 80072e4:	0758      	lsls	r0, r3, #29
 80072e6:	d512      	bpl.n	800730e <__swsetup_r+0x7a>
 80072e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072ea:	b141      	cbz	r1, 80072fe <__swsetup_r+0x6a>
 80072ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072f0:	4299      	cmp	r1, r3
 80072f2:	d002      	beq.n	80072fa <__swsetup_r+0x66>
 80072f4:	4630      	mov	r0, r6
 80072f6:	f7ff fb2d 	bl	8006954 <_free_r>
 80072fa:	2300      	movs	r3, #0
 80072fc:	6363      	str	r3, [r4, #52]	; 0x34
 80072fe:	89a3      	ldrh	r3, [r4, #12]
 8007300:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007304:	81a3      	strh	r3, [r4, #12]
 8007306:	2300      	movs	r3, #0
 8007308:	6063      	str	r3, [r4, #4]
 800730a:	6923      	ldr	r3, [r4, #16]
 800730c:	6023      	str	r3, [r4, #0]
 800730e:	89a3      	ldrh	r3, [r4, #12]
 8007310:	f043 0308 	orr.w	r3, r3, #8
 8007314:	81a3      	strh	r3, [r4, #12]
 8007316:	6923      	ldr	r3, [r4, #16]
 8007318:	b94b      	cbnz	r3, 800732e <__swsetup_r+0x9a>
 800731a:	89a3      	ldrh	r3, [r4, #12]
 800731c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007324:	d003      	beq.n	800732e <__swsetup_r+0x9a>
 8007326:	4621      	mov	r1, r4
 8007328:	4630      	mov	r0, r6
 800732a:	f000 fa05 	bl	8007738 <__smakebuf_r>
 800732e:	89a0      	ldrh	r0, [r4, #12]
 8007330:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007334:	f010 0301 	ands.w	r3, r0, #1
 8007338:	d00a      	beq.n	8007350 <__swsetup_r+0xbc>
 800733a:	2300      	movs	r3, #0
 800733c:	60a3      	str	r3, [r4, #8]
 800733e:	6963      	ldr	r3, [r4, #20]
 8007340:	425b      	negs	r3, r3
 8007342:	61a3      	str	r3, [r4, #24]
 8007344:	6923      	ldr	r3, [r4, #16]
 8007346:	b943      	cbnz	r3, 800735a <__swsetup_r+0xc6>
 8007348:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800734c:	d1ba      	bne.n	80072c4 <__swsetup_r+0x30>
 800734e:	bd70      	pop	{r4, r5, r6, pc}
 8007350:	0781      	lsls	r1, r0, #30
 8007352:	bf58      	it	pl
 8007354:	6963      	ldrpl	r3, [r4, #20]
 8007356:	60a3      	str	r3, [r4, #8]
 8007358:	e7f4      	b.n	8007344 <__swsetup_r+0xb0>
 800735a:	2000      	movs	r0, #0
 800735c:	e7f7      	b.n	800734e <__swsetup_r+0xba>
 800735e:	bf00      	nop
 8007360:	20000044 	.word	0x20000044
 8007364:	08007f84 	.word	0x08007f84
 8007368:	08007fa4 	.word	0x08007fa4
 800736c:	08007f64 	.word	0x08007f64

08007370 <abort>:
 8007370:	b508      	push	{r3, lr}
 8007372:	2006      	movs	r0, #6
 8007374:	f000 fa50 	bl	8007818 <raise>
 8007378:	2001      	movs	r0, #1
 800737a:	f000 fb63 	bl	8007a44 <_exit>
	...

08007380 <__sflush_r>:
 8007380:	898a      	ldrh	r2, [r1, #12]
 8007382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007384:	4605      	mov	r5, r0
 8007386:	0710      	lsls	r0, r2, #28
 8007388:	460c      	mov	r4, r1
 800738a:	d457      	bmi.n	800743c <__sflush_r+0xbc>
 800738c:	684b      	ldr	r3, [r1, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	dc04      	bgt.n	800739c <__sflush_r+0x1c>
 8007392:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007394:	2b00      	cmp	r3, #0
 8007396:	dc01      	bgt.n	800739c <__sflush_r+0x1c>
 8007398:	2000      	movs	r0, #0
 800739a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800739c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800739e:	2e00      	cmp	r6, #0
 80073a0:	d0fa      	beq.n	8007398 <__sflush_r+0x18>
 80073a2:	2300      	movs	r3, #0
 80073a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80073a8:	682f      	ldr	r7, [r5, #0]
 80073aa:	602b      	str	r3, [r5, #0]
 80073ac:	d032      	beq.n	8007414 <__sflush_r+0x94>
 80073ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80073b0:	89a3      	ldrh	r3, [r4, #12]
 80073b2:	075a      	lsls	r2, r3, #29
 80073b4:	d505      	bpl.n	80073c2 <__sflush_r+0x42>
 80073b6:	6863      	ldr	r3, [r4, #4]
 80073b8:	1ac0      	subs	r0, r0, r3
 80073ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073bc:	b10b      	cbz	r3, 80073c2 <__sflush_r+0x42>
 80073be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073c0:	1ac0      	subs	r0, r0, r3
 80073c2:	2300      	movs	r3, #0
 80073c4:	4602      	mov	r2, r0
 80073c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073c8:	6a21      	ldr	r1, [r4, #32]
 80073ca:	4628      	mov	r0, r5
 80073cc:	47b0      	blx	r6
 80073ce:	1c43      	adds	r3, r0, #1
 80073d0:	89a3      	ldrh	r3, [r4, #12]
 80073d2:	d106      	bne.n	80073e2 <__sflush_r+0x62>
 80073d4:	6829      	ldr	r1, [r5, #0]
 80073d6:	291d      	cmp	r1, #29
 80073d8:	d82c      	bhi.n	8007434 <__sflush_r+0xb4>
 80073da:	4a29      	ldr	r2, [pc, #164]	; (8007480 <__sflush_r+0x100>)
 80073dc:	40ca      	lsrs	r2, r1
 80073de:	07d6      	lsls	r6, r2, #31
 80073e0:	d528      	bpl.n	8007434 <__sflush_r+0xb4>
 80073e2:	2200      	movs	r2, #0
 80073e4:	6062      	str	r2, [r4, #4]
 80073e6:	04d9      	lsls	r1, r3, #19
 80073e8:	6922      	ldr	r2, [r4, #16]
 80073ea:	6022      	str	r2, [r4, #0]
 80073ec:	d504      	bpl.n	80073f8 <__sflush_r+0x78>
 80073ee:	1c42      	adds	r2, r0, #1
 80073f0:	d101      	bne.n	80073f6 <__sflush_r+0x76>
 80073f2:	682b      	ldr	r3, [r5, #0]
 80073f4:	b903      	cbnz	r3, 80073f8 <__sflush_r+0x78>
 80073f6:	6560      	str	r0, [r4, #84]	; 0x54
 80073f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073fa:	602f      	str	r7, [r5, #0]
 80073fc:	2900      	cmp	r1, #0
 80073fe:	d0cb      	beq.n	8007398 <__sflush_r+0x18>
 8007400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007404:	4299      	cmp	r1, r3
 8007406:	d002      	beq.n	800740e <__sflush_r+0x8e>
 8007408:	4628      	mov	r0, r5
 800740a:	f7ff faa3 	bl	8006954 <_free_r>
 800740e:	2000      	movs	r0, #0
 8007410:	6360      	str	r0, [r4, #52]	; 0x34
 8007412:	e7c2      	b.n	800739a <__sflush_r+0x1a>
 8007414:	6a21      	ldr	r1, [r4, #32]
 8007416:	2301      	movs	r3, #1
 8007418:	4628      	mov	r0, r5
 800741a:	47b0      	blx	r6
 800741c:	1c41      	adds	r1, r0, #1
 800741e:	d1c7      	bne.n	80073b0 <__sflush_r+0x30>
 8007420:	682b      	ldr	r3, [r5, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d0c4      	beq.n	80073b0 <__sflush_r+0x30>
 8007426:	2b1d      	cmp	r3, #29
 8007428:	d001      	beq.n	800742e <__sflush_r+0xae>
 800742a:	2b16      	cmp	r3, #22
 800742c:	d101      	bne.n	8007432 <__sflush_r+0xb2>
 800742e:	602f      	str	r7, [r5, #0]
 8007430:	e7b2      	b.n	8007398 <__sflush_r+0x18>
 8007432:	89a3      	ldrh	r3, [r4, #12]
 8007434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007438:	81a3      	strh	r3, [r4, #12]
 800743a:	e7ae      	b.n	800739a <__sflush_r+0x1a>
 800743c:	690f      	ldr	r7, [r1, #16]
 800743e:	2f00      	cmp	r7, #0
 8007440:	d0aa      	beq.n	8007398 <__sflush_r+0x18>
 8007442:	0793      	lsls	r3, r2, #30
 8007444:	680e      	ldr	r6, [r1, #0]
 8007446:	bf08      	it	eq
 8007448:	694b      	ldreq	r3, [r1, #20]
 800744a:	600f      	str	r7, [r1, #0]
 800744c:	bf18      	it	ne
 800744e:	2300      	movne	r3, #0
 8007450:	1bf6      	subs	r6, r6, r7
 8007452:	608b      	str	r3, [r1, #8]
 8007454:	2e00      	cmp	r6, #0
 8007456:	dd9f      	ble.n	8007398 <__sflush_r+0x18>
 8007458:	6a21      	ldr	r1, [r4, #32]
 800745a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800745e:	4633      	mov	r3, r6
 8007460:	463a      	mov	r2, r7
 8007462:	4628      	mov	r0, r5
 8007464:	47e0      	blx	ip
 8007466:	2800      	cmp	r0, #0
 8007468:	dc06      	bgt.n	8007478 <__sflush_r+0xf8>
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007470:	81a3      	strh	r3, [r4, #12]
 8007472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007476:	e790      	b.n	800739a <__sflush_r+0x1a>
 8007478:	4407      	add	r7, r0
 800747a:	1a36      	subs	r6, r6, r0
 800747c:	e7ea      	b.n	8007454 <__sflush_r+0xd4>
 800747e:	bf00      	nop
 8007480:	20400001 	.word	0x20400001

08007484 <_fflush_r>:
 8007484:	b538      	push	{r3, r4, r5, lr}
 8007486:	690b      	ldr	r3, [r1, #16]
 8007488:	4605      	mov	r5, r0
 800748a:	460c      	mov	r4, r1
 800748c:	b913      	cbnz	r3, 8007494 <_fflush_r+0x10>
 800748e:	2500      	movs	r5, #0
 8007490:	4628      	mov	r0, r5
 8007492:	bd38      	pop	{r3, r4, r5, pc}
 8007494:	b118      	cbz	r0, 800749e <_fflush_r+0x1a>
 8007496:	6983      	ldr	r3, [r0, #24]
 8007498:	b90b      	cbnz	r3, 800749e <_fflush_r+0x1a>
 800749a:	f000 f887 	bl	80075ac <__sinit>
 800749e:	4b14      	ldr	r3, [pc, #80]	; (80074f0 <_fflush_r+0x6c>)
 80074a0:	429c      	cmp	r4, r3
 80074a2:	d11b      	bne.n	80074dc <_fflush_r+0x58>
 80074a4:	686c      	ldr	r4, [r5, #4]
 80074a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d0ef      	beq.n	800748e <_fflush_r+0xa>
 80074ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80074b0:	07d0      	lsls	r0, r2, #31
 80074b2:	d404      	bmi.n	80074be <_fflush_r+0x3a>
 80074b4:	0599      	lsls	r1, r3, #22
 80074b6:	d402      	bmi.n	80074be <_fflush_r+0x3a>
 80074b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074ba:	f000 f915 	bl	80076e8 <__retarget_lock_acquire_recursive>
 80074be:	4628      	mov	r0, r5
 80074c0:	4621      	mov	r1, r4
 80074c2:	f7ff ff5d 	bl	8007380 <__sflush_r>
 80074c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074c8:	07da      	lsls	r2, r3, #31
 80074ca:	4605      	mov	r5, r0
 80074cc:	d4e0      	bmi.n	8007490 <_fflush_r+0xc>
 80074ce:	89a3      	ldrh	r3, [r4, #12]
 80074d0:	059b      	lsls	r3, r3, #22
 80074d2:	d4dd      	bmi.n	8007490 <_fflush_r+0xc>
 80074d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074d6:	f000 f908 	bl	80076ea <__retarget_lock_release_recursive>
 80074da:	e7d9      	b.n	8007490 <_fflush_r+0xc>
 80074dc:	4b05      	ldr	r3, [pc, #20]	; (80074f4 <_fflush_r+0x70>)
 80074de:	429c      	cmp	r4, r3
 80074e0:	d101      	bne.n	80074e6 <_fflush_r+0x62>
 80074e2:	68ac      	ldr	r4, [r5, #8]
 80074e4:	e7df      	b.n	80074a6 <_fflush_r+0x22>
 80074e6:	4b04      	ldr	r3, [pc, #16]	; (80074f8 <_fflush_r+0x74>)
 80074e8:	429c      	cmp	r4, r3
 80074ea:	bf08      	it	eq
 80074ec:	68ec      	ldreq	r4, [r5, #12]
 80074ee:	e7da      	b.n	80074a6 <_fflush_r+0x22>
 80074f0:	08007f84 	.word	0x08007f84
 80074f4:	08007fa4 	.word	0x08007fa4
 80074f8:	08007f64 	.word	0x08007f64

080074fc <std>:
 80074fc:	2300      	movs	r3, #0
 80074fe:	b510      	push	{r4, lr}
 8007500:	4604      	mov	r4, r0
 8007502:	e9c0 3300 	strd	r3, r3, [r0]
 8007506:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800750a:	6083      	str	r3, [r0, #8]
 800750c:	8181      	strh	r1, [r0, #12]
 800750e:	6643      	str	r3, [r0, #100]	; 0x64
 8007510:	81c2      	strh	r2, [r0, #14]
 8007512:	6183      	str	r3, [r0, #24]
 8007514:	4619      	mov	r1, r3
 8007516:	2208      	movs	r2, #8
 8007518:	305c      	adds	r0, #92	; 0x5c
 800751a:	f7fb fe21 	bl	8003160 <memset>
 800751e:	4b05      	ldr	r3, [pc, #20]	; (8007534 <std+0x38>)
 8007520:	6263      	str	r3, [r4, #36]	; 0x24
 8007522:	4b05      	ldr	r3, [pc, #20]	; (8007538 <std+0x3c>)
 8007524:	62a3      	str	r3, [r4, #40]	; 0x28
 8007526:	4b05      	ldr	r3, [pc, #20]	; (800753c <std+0x40>)
 8007528:	62e3      	str	r3, [r4, #44]	; 0x2c
 800752a:	4b05      	ldr	r3, [pc, #20]	; (8007540 <std+0x44>)
 800752c:	6224      	str	r4, [r4, #32]
 800752e:	6323      	str	r3, [r4, #48]	; 0x30
 8007530:	bd10      	pop	{r4, pc}
 8007532:	bf00      	nop
 8007534:	08007851 	.word	0x08007851
 8007538:	08007873 	.word	0x08007873
 800753c:	080078ab 	.word	0x080078ab
 8007540:	080078cf 	.word	0x080078cf

08007544 <_cleanup_r>:
 8007544:	4901      	ldr	r1, [pc, #4]	; (800754c <_cleanup_r+0x8>)
 8007546:	f000 b8af 	b.w	80076a8 <_fwalk_reent>
 800754a:	bf00      	nop
 800754c:	08007485 	.word	0x08007485

08007550 <__sfmoreglue>:
 8007550:	b570      	push	{r4, r5, r6, lr}
 8007552:	2268      	movs	r2, #104	; 0x68
 8007554:	1e4d      	subs	r5, r1, #1
 8007556:	4355      	muls	r5, r2
 8007558:	460e      	mov	r6, r1
 800755a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800755e:	f7ff fa63 	bl	8006a28 <_malloc_r>
 8007562:	4604      	mov	r4, r0
 8007564:	b140      	cbz	r0, 8007578 <__sfmoreglue+0x28>
 8007566:	2100      	movs	r1, #0
 8007568:	e9c0 1600 	strd	r1, r6, [r0]
 800756c:	300c      	adds	r0, #12
 800756e:	60a0      	str	r0, [r4, #8]
 8007570:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007574:	f7fb fdf4 	bl	8003160 <memset>
 8007578:	4620      	mov	r0, r4
 800757a:	bd70      	pop	{r4, r5, r6, pc}

0800757c <__sfp_lock_acquire>:
 800757c:	4801      	ldr	r0, [pc, #4]	; (8007584 <__sfp_lock_acquire+0x8>)
 800757e:	f000 b8b3 	b.w	80076e8 <__retarget_lock_acquire_recursive>
 8007582:	bf00      	nop
 8007584:	200003b5 	.word	0x200003b5

08007588 <__sfp_lock_release>:
 8007588:	4801      	ldr	r0, [pc, #4]	; (8007590 <__sfp_lock_release+0x8>)
 800758a:	f000 b8ae 	b.w	80076ea <__retarget_lock_release_recursive>
 800758e:	bf00      	nop
 8007590:	200003b5 	.word	0x200003b5

08007594 <__sinit_lock_acquire>:
 8007594:	4801      	ldr	r0, [pc, #4]	; (800759c <__sinit_lock_acquire+0x8>)
 8007596:	f000 b8a7 	b.w	80076e8 <__retarget_lock_acquire_recursive>
 800759a:	bf00      	nop
 800759c:	200003b6 	.word	0x200003b6

080075a0 <__sinit_lock_release>:
 80075a0:	4801      	ldr	r0, [pc, #4]	; (80075a8 <__sinit_lock_release+0x8>)
 80075a2:	f000 b8a2 	b.w	80076ea <__retarget_lock_release_recursive>
 80075a6:	bf00      	nop
 80075a8:	200003b6 	.word	0x200003b6

080075ac <__sinit>:
 80075ac:	b510      	push	{r4, lr}
 80075ae:	4604      	mov	r4, r0
 80075b0:	f7ff fff0 	bl	8007594 <__sinit_lock_acquire>
 80075b4:	69a3      	ldr	r3, [r4, #24]
 80075b6:	b11b      	cbz	r3, 80075c0 <__sinit+0x14>
 80075b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075bc:	f7ff bff0 	b.w	80075a0 <__sinit_lock_release>
 80075c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80075c4:	6523      	str	r3, [r4, #80]	; 0x50
 80075c6:	4b13      	ldr	r3, [pc, #76]	; (8007614 <__sinit+0x68>)
 80075c8:	4a13      	ldr	r2, [pc, #76]	; (8007618 <__sinit+0x6c>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80075ce:	42a3      	cmp	r3, r4
 80075d0:	bf04      	itt	eq
 80075d2:	2301      	moveq	r3, #1
 80075d4:	61a3      	streq	r3, [r4, #24]
 80075d6:	4620      	mov	r0, r4
 80075d8:	f000 f820 	bl	800761c <__sfp>
 80075dc:	6060      	str	r0, [r4, #4]
 80075de:	4620      	mov	r0, r4
 80075e0:	f000 f81c 	bl	800761c <__sfp>
 80075e4:	60a0      	str	r0, [r4, #8]
 80075e6:	4620      	mov	r0, r4
 80075e8:	f000 f818 	bl	800761c <__sfp>
 80075ec:	2200      	movs	r2, #0
 80075ee:	60e0      	str	r0, [r4, #12]
 80075f0:	2104      	movs	r1, #4
 80075f2:	6860      	ldr	r0, [r4, #4]
 80075f4:	f7ff ff82 	bl	80074fc <std>
 80075f8:	68a0      	ldr	r0, [r4, #8]
 80075fa:	2201      	movs	r2, #1
 80075fc:	2109      	movs	r1, #9
 80075fe:	f7ff ff7d 	bl	80074fc <std>
 8007602:	68e0      	ldr	r0, [r4, #12]
 8007604:	2202      	movs	r2, #2
 8007606:	2112      	movs	r1, #18
 8007608:	f7ff ff78 	bl	80074fc <std>
 800760c:	2301      	movs	r3, #1
 800760e:	61a3      	str	r3, [r4, #24]
 8007610:	e7d2      	b.n	80075b8 <__sinit+0xc>
 8007612:	bf00      	nop
 8007614:	08007b20 	.word	0x08007b20
 8007618:	08007545 	.word	0x08007545

0800761c <__sfp>:
 800761c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761e:	4607      	mov	r7, r0
 8007620:	f7ff ffac 	bl	800757c <__sfp_lock_acquire>
 8007624:	4b1e      	ldr	r3, [pc, #120]	; (80076a0 <__sfp+0x84>)
 8007626:	681e      	ldr	r6, [r3, #0]
 8007628:	69b3      	ldr	r3, [r6, #24]
 800762a:	b913      	cbnz	r3, 8007632 <__sfp+0x16>
 800762c:	4630      	mov	r0, r6
 800762e:	f7ff ffbd 	bl	80075ac <__sinit>
 8007632:	3648      	adds	r6, #72	; 0x48
 8007634:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007638:	3b01      	subs	r3, #1
 800763a:	d503      	bpl.n	8007644 <__sfp+0x28>
 800763c:	6833      	ldr	r3, [r6, #0]
 800763e:	b30b      	cbz	r3, 8007684 <__sfp+0x68>
 8007640:	6836      	ldr	r6, [r6, #0]
 8007642:	e7f7      	b.n	8007634 <__sfp+0x18>
 8007644:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007648:	b9d5      	cbnz	r5, 8007680 <__sfp+0x64>
 800764a:	4b16      	ldr	r3, [pc, #88]	; (80076a4 <__sfp+0x88>)
 800764c:	60e3      	str	r3, [r4, #12]
 800764e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007652:	6665      	str	r5, [r4, #100]	; 0x64
 8007654:	f000 f847 	bl	80076e6 <__retarget_lock_init_recursive>
 8007658:	f7ff ff96 	bl	8007588 <__sfp_lock_release>
 800765c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007660:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007664:	6025      	str	r5, [r4, #0]
 8007666:	61a5      	str	r5, [r4, #24]
 8007668:	2208      	movs	r2, #8
 800766a:	4629      	mov	r1, r5
 800766c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007670:	f7fb fd76 	bl	8003160 <memset>
 8007674:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007678:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800767c:	4620      	mov	r0, r4
 800767e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007680:	3468      	adds	r4, #104	; 0x68
 8007682:	e7d9      	b.n	8007638 <__sfp+0x1c>
 8007684:	2104      	movs	r1, #4
 8007686:	4638      	mov	r0, r7
 8007688:	f7ff ff62 	bl	8007550 <__sfmoreglue>
 800768c:	4604      	mov	r4, r0
 800768e:	6030      	str	r0, [r6, #0]
 8007690:	2800      	cmp	r0, #0
 8007692:	d1d5      	bne.n	8007640 <__sfp+0x24>
 8007694:	f7ff ff78 	bl	8007588 <__sfp_lock_release>
 8007698:	230c      	movs	r3, #12
 800769a:	603b      	str	r3, [r7, #0]
 800769c:	e7ee      	b.n	800767c <__sfp+0x60>
 800769e:	bf00      	nop
 80076a0:	08007b20 	.word	0x08007b20
 80076a4:	ffff0001 	.word	0xffff0001

080076a8 <_fwalk_reent>:
 80076a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076ac:	4606      	mov	r6, r0
 80076ae:	4688      	mov	r8, r1
 80076b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80076b4:	2700      	movs	r7, #0
 80076b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076ba:	f1b9 0901 	subs.w	r9, r9, #1
 80076be:	d505      	bpl.n	80076cc <_fwalk_reent+0x24>
 80076c0:	6824      	ldr	r4, [r4, #0]
 80076c2:	2c00      	cmp	r4, #0
 80076c4:	d1f7      	bne.n	80076b6 <_fwalk_reent+0xe>
 80076c6:	4638      	mov	r0, r7
 80076c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076cc:	89ab      	ldrh	r3, [r5, #12]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d907      	bls.n	80076e2 <_fwalk_reent+0x3a>
 80076d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076d6:	3301      	adds	r3, #1
 80076d8:	d003      	beq.n	80076e2 <_fwalk_reent+0x3a>
 80076da:	4629      	mov	r1, r5
 80076dc:	4630      	mov	r0, r6
 80076de:	47c0      	blx	r8
 80076e0:	4307      	orrs	r7, r0
 80076e2:	3568      	adds	r5, #104	; 0x68
 80076e4:	e7e9      	b.n	80076ba <_fwalk_reent+0x12>

080076e6 <__retarget_lock_init_recursive>:
 80076e6:	4770      	bx	lr

080076e8 <__retarget_lock_acquire_recursive>:
 80076e8:	4770      	bx	lr

080076ea <__retarget_lock_release_recursive>:
 80076ea:	4770      	bx	lr

080076ec <__swhatbuf_r>:
 80076ec:	b570      	push	{r4, r5, r6, lr}
 80076ee:	460e      	mov	r6, r1
 80076f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076f4:	2900      	cmp	r1, #0
 80076f6:	b096      	sub	sp, #88	; 0x58
 80076f8:	4614      	mov	r4, r2
 80076fa:	461d      	mov	r5, r3
 80076fc:	da08      	bge.n	8007710 <__swhatbuf_r+0x24>
 80076fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	602a      	str	r2, [r5, #0]
 8007706:	061a      	lsls	r2, r3, #24
 8007708:	d410      	bmi.n	800772c <__swhatbuf_r+0x40>
 800770a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800770e:	e00e      	b.n	800772e <__swhatbuf_r+0x42>
 8007710:	466a      	mov	r2, sp
 8007712:	f000 f903 	bl	800791c <_fstat_r>
 8007716:	2800      	cmp	r0, #0
 8007718:	dbf1      	blt.n	80076fe <__swhatbuf_r+0x12>
 800771a:	9a01      	ldr	r2, [sp, #4]
 800771c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007720:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007724:	425a      	negs	r2, r3
 8007726:	415a      	adcs	r2, r3
 8007728:	602a      	str	r2, [r5, #0]
 800772a:	e7ee      	b.n	800770a <__swhatbuf_r+0x1e>
 800772c:	2340      	movs	r3, #64	; 0x40
 800772e:	2000      	movs	r0, #0
 8007730:	6023      	str	r3, [r4, #0]
 8007732:	b016      	add	sp, #88	; 0x58
 8007734:	bd70      	pop	{r4, r5, r6, pc}
	...

08007738 <__smakebuf_r>:
 8007738:	898b      	ldrh	r3, [r1, #12]
 800773a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800773c:	079d      	lsls	r5, r3, #30
 800773e:	4606      	mov	r6, r0
 8007740:	460c      	mov	r4, r1
 8007742:	d507      	bpl.n	8007754 <__smakebuf_r+0x1c>
 8007744:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007748:	6023      	str	r3, [r4, #0]
 800774a:	6123      	str	r3, [r4, #16]
 800774c:	2301      	movs	r3, #1
 800774e:	6163      	str	r3, [r4, #20]
 8007750:	b002      	add	sp, #8
 8007752:	bd70      	pop	{r4, r5, r6, pc}
 8007754:	ab01      	add	r3, sp, #4
 8007756:	466a      	mov	r2, sp
 8007758:	f7ff ffc8 	bl	80076ec <__swhatbuf_r>
 800775c:	9900      	ldr	r1, [sp, #0]
 800775e:	4605      	mov	r5, r0
 8007760:	4630      	mov	r0, r6
 8007762:	f7ff f961 	bl	8006a28 <_malloc_r>
 8007766:	b948      	cbnz	r0, 800777c <__smakebuf_r+0x44>
 8007768:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800776c:	059a      	lsls	r2, r3, #22
 800776e:	d4ef      	bmi.n	8007750 <__smakebuf_r+0x18>
 8007770:	f023 0303 	bic.w	r3, r3, #3
 8007774:	f043 0302 	orr.w	r3, r3, #2
 8007778:	81a3      	strh	r3, [r4, #12]
 800777a:	e7e3      	b.n	8007744 <__smakebuf_r+0xc>
 800777c:	4b0d      	ldr	r3, [pc, #52]	; (80077b4 <__smakebuf_r+0x7c>)
 800777e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007780:	89a3      	ldrh	r3, [r4, #12]
 8007782:	6020      	str	r0, [r4, #0]
 8007784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007788:	81a3      	strh	r3, [r4, #12]
 800778a:	9b00      	ldr	r3, [sp, #0]
 800778c:	6163      	str	r3, [r4, #20]
 800778e:	9b01      	ldr	r3, [sp, #4]
 8007790:	6120      	str	r0, [r4, #16]
 8007792:	b15b      	cbz	r3, 80077ac <__smakebuf_r+0x74>
 8007794:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007798:	4630      	mov	r0, r6
 800779a:	f000 f8d1 	bl	8007940 <_isatty_r>
 800779e:	b128      	cbz	r0, 80077ac <__smakebuf_r+0x74>
 80077a0:	89a3      	ldrh	r3, [r4, #12]
 80077a2:	f023 0303 	bic.w	r3, r3, #3
 80077a6:	f043 0301 	orr.w	r3, r3, #1
 80077aa:	81a3      	strh	r3, [r4, #12]
 80077ac:	89a0      	ldrh	r0, [r4, #12]
 80077ae:	4305      	orrs	r5, r0
 80077b0:	81a5      	strh	r5, [r4, #12]
 80077b2:	e7cd      	b.n	8007750 <__smakebuf_r+0x18>
 80077b4:	08007545 	.word	0x08007545

080077b8 <_malloc_usable_size_r>:
 80077b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077bc:	1f18      	subs	r0, r3, #4
 80077be:	2b00      	cmp	r3, #0
 80077c0:	bfbc      	itt	lt
 80077c2:	580b      	ldrlt	r3, [r1, r0]
 80077c4:	18c0      	addlt	r0, r0, r3
 80077c6:	4770      	bx	lr

080077c8 <_raise_r>:
 80077c8:	291f      	cmp	r1, #31
 80077ca:	b538      	push	{r3, r4, r5, lr}
 80077cc:	4604      	mov	r4, r0
 80077ce:	460d      	mov	r5, r1
 80077d0:	d904      	bls.n	80077dc <_raise_r+0x14>
 80077d2:	2316      	movs	r3, #22
 80077d4:	6003      	str	r3, [r0, #0]
 80077d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077da:	bd38      	pop	{r3, r4, r5, pc}
 80077dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80077de:	b112      	cbz	r2, 80077e6 <_raise_r+0x1e>
 80077e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80077e4:	b94b      	cbnz	r3, 80077fa <_raise_r+0x32>
 80077e6:	4620      	mov	r0, r4
 80077e8:	f000 f830 	bl	800784c <_getpid_r>
 80077ec:	462a      	mov	r2, r5
 80077ee:	4601      	mov	r1, r0
 80077f0:	4620      	mov	r0, r4
 80077f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077f6:	f000 b817 	b.w	8007828 <_kill_r>
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d00a      	beq.n	8007814 <_raise_r+0x4c>
 80077fe:	1c59      	adds	r1, r3, #1
 8007800:	d103      	bne.n	800780a <_raise_r+0x42>
 8007802:	2316      	movs	r3, #22
 8007804:	6003      	str	r3, [r0, #0]
 8007806:	2001      	movs	r0, #1
 8007808:	e7e7      	b.n	80077da <_raise_r+0x12>
 800780a:	2400      	movs	r4, #0
 800780c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007810:	4628      	mov	r0, r5
 8007812:	4798      	blx	r3
 8007814:	2000      	movs	r0, #0
 8007816:	e7e0      	b.n	80077da <_raise_r+0x12>

08007818 <raise>:
 8007818:	4b02      	ldr	r3, [pc, #8]	; (8007824 <raise+0xc>)
 800781a:	4601      	mov	r1, r0
 800781c:	6818      	ldr	r0, [r3, #0]
 800781e:	f7ff bfd3 	b.w	80077c8 <_raise_r>
 8007822:	bf00      	nop
 8007824:	20000044 	.word	0x20000044

08007828 <_kill_r>:
 8007828:	b538      	push	{r3, r4, r5, lr}
 800782a:	4d07      	ldr	r5, [pc, #28]	; (8007848 <_kill_r+0x20>)
 800782c:	2300      	movs	r3, #0
 800782e:	4604      	mov	r4, r0
 8007830:	4608      	mov	r0, r1
 8007832:	4611      	mov	r1, r2
 8007834:	602b      	str	r3, [r5, #0]
 8007836:	f000 f8d7 	bl	80079e8 <_kill>
 800783a:	1c43      	adds	r3, r0, #1
 800783c:	d102      	bne.n	8007844 <_kill_r+0x1c>
 800783e:	682b      	ldr	r3, [r5, #0]
 8007840:	b103      	cbz	r3, 8007844 <_kill_r+0x1c>
 8007842:	6023      	str	r3, [r4, #0]
 8007844:	bd38      	pop	{r3, r4, r5, pc}
 8007846:	bf00      	nop
 8007848:	200003b0 	.word	0x200003b0

0800784c <_getpid_r>:
 800784c:	f000 b8bc 	b.w	80079c8 <_getpid>

08007850 <__sread>:
 8007850:	b510      	push	{r4, lr}
 8007852:	460c      	mov	r4, r1
 8007854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007858:	f000 f894 	bl	8007984 <_read_r>
 800785c:	2800      	cmp	r0, #0
 800785e:	bfab      	itete	ge
 8007860:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007862:	89a3      	ldrhlt	r3, [r4, #12]
 8007864:	181b      	addge	r3, r3, r0
 8007866:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800786a:	bfac      	ite	ge
 800786c:	6563      	strge	r3, [r4, #84]	; 0x54
 800786e:	81a3      	strhlt	r3, [r4, #12]
 8007870:	bd10      	pop	{r4, pc}

08007872 <__swrite>:
 8007872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007876:	461f      	mov	r7, r3
 8007878:	898b      	ldrh	r3, [r1, #12]
 800787a:	05db      	lsls	r3, r3, #23
 800787c:	4605      	mov	r5, r0
 800787e:	460c      	mov	r4, r1
 8007880:	4616      	mov	r6, r2
 8007882:	d505      	bpl.n	8007890 <__swrite+0x1e>
 8007884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007888:	2302      	movs	r3, #2
 800788a:	2200      	movs	r2, #0
 800788c:	f000 f868 	bl	8007960 <_lseek_r>
 8007890:	89a3      	ldrh	r3, [r4, #12]
 8007892:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800789a:	81a3      	strh	r3, [r4, #12]
 800789c:	4632      	mov	r2, r6
 800789e:	463b      	mov	r3, r7
 80078a0:	4628      	mov	r0, r5
 80078a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078a6:	f000 b817 	b.w	80078d8 <_write_r>

080078aa <__sseek>:
 80078aa:	b510      	push	{r4, lr}
 80078ac:	460c      	mov	r4, r1
 80078ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078b2:	f000 f855 	bl	8007960 <_lseek_r>
 80078b6:	1c43      	adds	r3, r0, #1
 80078b8:	89a3      	ldrh	r3, [r4, #12]
 80078ba:	bf15      	itete	ne
 80078bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80078be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078c6:	81a3      	strheq	r3, [r4, #12]
 80078c8:	bf18      	it	ne
 80078ca:	81a3      	strhne	r3, [r4, #12]
 80078cc:	bd10      	pop	{r4, pc}

080078ce <__sclose>:
 80078ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078d2:	f000 b813 	b.w	80078fc <_close_r>
	...

080078d8 <_write_r>:
 80078d8:	b538      	push	{r3, r4, r5, lr}
 80078da:	4d07      	ldr	r5, [pc, #28]	; (80078f8 <_write_r+0x20>)
 80078dc:	4604      	mov	r4, r0
 80078de:	4608      	mov	r0, r1
 80078e0:	4611      	mov	r1, r2
 80078e2:	2200      	movs	r2, #0
 80078e4:	602a      	str	r2, [r5, #0]
 80078e6:	461a      	mov	r2, r3
 80078e8:	f000 f8a4 	bl	8007a34 <_write>
 80078ec:	1c43      	adds	r3, r0, #1
 80078ee:	d102      	bne.n	80078f6 <_write_r+0x1e>
 80078f0:	682b      	ldr	r3, [r5, #0]
 80078f2:	b103      	cbz	r3, 80078f6 <_write_r+0x1e>
 80078f4:	6023      	str	r3, [r4, #0]
 80078f6:	bd38      	pop	{r3, r4, r5, pc}
 80078f8:	200003b0 	.word	0x200003b0

080078fc <_close_r>:
 80078fc:	b538      	push	{r3, r4, r5, lr}
 80078fe:	4d06      	ldr	r5, [pc, #24]	; (8007918 <_close_r+0x1c>)
 8007900:	2300      	movs	r3, #0
 8007902:	4604      	mov	r4, r0
 8007904:	4608      	mov	r0, r1
 8007906:	602b      	str	r3, [r5, #0]
 8007908:	f000 f84e 	bl	80079a8 <_close>
 800790c:	1c43      	adds	r3, r0, #1
 800790e:	d102      	bne.n	8007916 <_close_r+0x1a>
 8007910:	682b      	ldr	r3, [r5, #0]
 8007912:	b103      	cbz	r3, 8007916 <_close_r+0x1a>
 8007914:	6023      	str	r3, [r4, #0]
 8007916:	bd38      	pop	{r3, r4, r5, pc}
 8007918:	200003b0 	.word	0x200003b0

0800791c <_fstat_r>:
 800791c:	b538      	push	{r3, r4, r5, lr}
 800791e:	4d07      	ldr	r5, [pc, #28]	; (800793c <_fstat_r+0x20>)
 8007920:	2300      	movs	r3, #0
 8007922:	4604      	mov	r4, r0
 8007924:	4608      	mov	r0, r1
 8007926:	4611      	mov	r1, r2
 8007928:	602b      	str	r3, [r5, #0]
 800792a:	f000 f845 	bl	80079b8 <_fstat>
 800792e:	1c43      	adds	r3, r0, #1
 8007930:	d102      	bne.n	8007938 <_fstat_r+0x1c>
 8007932:	682b      	ldr	r3, [r5, #0]
 8007934:	b103      	cbz	r3, 8007938 <_fstat_r+0x1c>
 8007936:	6023      	str	r3, [r4, #0]
 8007938:	bd38      	pop	{r3, r4, r5, pc}
 800793a:	bf00      	nop
 800793c:	200003b0 	.word	0x200003b0

08007940 <_isatty_r>:
 8007940:	b538      	push	{r3, r4, r5, lr}
 8007942:	4d06      	ldr	r5, [pc, #24]	; (800795c <_isatty_r+0x1c>)
 8007944:	2300      	movs	r3, #0
 8007946:	4604      	mov	r4, r0
 8007948:	4608      	mov	r0, r1
 800794a:	602b      	str	r3, [r5, #0]
 800794c:	f000 f844 	bl	80079d8 <_isatty>
 8007950:	1c43      	adds	r3, r0, #1
 8007952:	d102      	bne.n	800795a <_isatty_r+0x1a>
 8007954:	682b      	ldr	r3, [r5, #0]
 8007956:	b103      	cbz	r3, 800795a <_isatty_r+0x1a>
 8007958:	6023      	str	r3, [r4, #0]
 800795a:	bd38      	pop	{r3, r4, r5, pc}
 800795c:	200003b0 	.word	0x200003b0

08007960 <_lseek_r>:
 8007960:	b538      	push	{r3, r4, r5, lr}
 8007962:	4d07      	ldr	r5, [pc, #28]	; (8007980 <_lseek_r+0x20>)
 8007964:	4604      	mov	r4, r0
 8007966:	4608      	mov	r0, r1
 8007968:	4611      	mov	r1, r2
 800796a:	2200      	movs	r2, #0
 800796c:	602a      	str	r2, [r5, #0]
 800796e:	461a      	mov	r2, r3
 8007970:	f000 f842 	bl	80079f8 <_lseek>
 8007974:	1c43      	adds	r3, r0, #1
 8007976:	d102      	bne.n	800797e <_lseek_r+0x1e>
 8007978:	682b      	ldr	r3, [r5, #0]
 800797a:	b103      	cbz	r3, 800797e <_lseek_r+0x1e>
 800797c:	6023      	str	r3, [r4, #0]
 800797e:	bd38      	pop	{r3, r4, r5, pc}
 8007980:	200003b0 	.word	0x200003b0

08007984 <_read_r>:
 8007984:	b538      	push	{r3, r4, r5, lr}
 8007986:	4d07      	ldr	r5, [pc, #28]	; (80079a4 <_read_r+0x20>)
 8007988:	4604      	mov	r4, r0
 800798a:	4608      	mov	r0, r1
 800798c:	4611      	mov	r1, r2
 800798e:	2200      	movs	r2, #0
 8007990:	602a      	str	r2, [r5, #0]
 8007992:	461a      	mov	r2, r3
 8007994:	f000 f838 	bl	8007a08 <_read>
 8007998:	1c43      	adds	r3, r0, #1
 800799a:	d102      	bne.n	80079a2 <_read_r+0x1e>
 800799c:	682b      	ldr	r3, [r5, #0]
 800799e:	b103      	cbz	r3, 80079a2 <_read_r+0x1e>
 80079a0:	6023      	str	r3, [r4, #0]
 80079a2:	bd38      	pop	{r3, r4, r5, pc}
 80079a4:	200003b0 	.word	0x200003b0

080079a8 <_close>:
 80079a8:	4b02      	ldr	r3, [pc, #8]	; (80079b4 <_close+0xc>)
 80079aa:	2258      	movs	r2, #88	; 0x58
 80079ac:	601a      	str	r2, [r3, #0]
 80079ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079b2:	4770      	bx	lr
 80079b4:	200003b0 	.word	0x200003b0

080079b8 <_fstat>:
 80079b8:	4b02      	ldr	r3, [pc, #8]	; (80079c4 <_fstat+0xc>)
 80079ba:	2258      	movs	r2, #88	; 0x58
 80079bc:	601a      	str	r2, [r3, #0]
 80079be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079c2:	4770      	bx	lr
 80079c4:	200003b0 	.word	0x200003b0

080079c8 <_getpid>:
 80079c8:	4b02      	ldr	r3, [pc, #8]	; (80079d4 <_getpid+0xc>)
 80079ca:	2258      	movs	r2, #88	; 0x58
 80079cc:	601a      	str	r2, [r3, #0]
 80079ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079d2:	4770      	bx	lr
 80079d4:	200003b0 	.word	0x200003b0

080079d8 <_isatty>:
 80079d8:	4b02      	ldr	r3, [pc, #8]	; (80079e4 <_isatty+0xc>)
 80079da:	2258      	movs	r2, #88	; 0x58
 80079dc:	601a      	str	r2, [r3, #0]
 80079de:	2000      	movs	r0, #0
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	200003b0 	.word	0x200003b0

080079e8 <_kill>:
 80079e8:	4b02      	ldr	r3, [pc, #8]	; (80079f4 <_kill+0xc>)
 80079ea:	2258      	movs	r2, #88	; 0x58
 80079ec:	601a      	str	r2, [r3, #0]
 80079ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079f2:	4770      	bx	lr
 80079f4:	200003b0 	.word	0x200003b0

080079f8 <_lseek>:
 80079f8:	4b02      	ldr	r3, [pc, #8]	; (8007a04 <_lseek+0xc>)
 80079fa:	2258      	movs	r2, #88	; 0x58
 80079fc:	601a      	str	r2, [r3, #0]
 80079fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a02:	4770      	bx	lr
 8007a04:	200003b0 	.word	0x200003b0

08007a08 <_read>:
 8007a08:	4b02      	ldr	r3, [pc, #8]	; (8007a14 <_read+0xc>)
 8007a0a:	2258      	movs	r2, #88	; 0x58
 8007a0c:	601a      	str	r2, [r3, #0]
 8007a0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a12:	4770      	bx	lr
 8007a14:	200003b0 	.word	0x200003b0

08007a18 <_sbrk>:
 8007a18:	4a04      	ldr	r2, [pc, #16]	; (8007a2c <_sbrk+0x14>)
 8007a1a:	6811      	ldr	r1, [r2, #0]
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	b909      	cbnz	r1, 8007a24 <_sbrk+0xc>
 8007a20:	4903      	ldr	r1, [pc, #12]	; (8007a30 <_sbrk+0x18>)
 8007a22:	6011      	str	r1, [r2, #0]
 8007a24:	6810      	ldr	r0, [r2, #0]
 8007a26:	4403      	add	r3, r0
 8007a28:	6013      	str	r3, [r2, #0]
 8007a2a:	4770      	bx	lr
 8007a2c:	200003b8 	.word	0x200003b8
 8007a30:	200003c0 	.word	0x200003c0

08007a34 <_write>:
 8007a34:	4b02      	ldr	r3, [pc, #8]	; (8007a40 <_write+0xc>)
 8007a36:	2258      	movs	r2, #88	; 0x58
 8007a38:	601a      	str	r2, [r3, #0]
 8007a3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a3e:	4770      	bx	lr
 8007a40:	200003b0 	.word	0x200003b0

08007a44 <_exit>:
 8007a44:	e7fe      	b.n	8007a44 <_exit>
	...

08007a48 <_init>:
 8007a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4a:	bf00      	nop
 8007a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4e:	bc08      	pop	{r3}
 8007a50:	469e      	mov	lr, r3
 8007a52:	4770      	bx	lr

08007a54 <_fini>:
 8007a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a56:	bf00      	nop
 8007a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a5a:	bc08      	pop	{r3}
 8007a5c:	469e      	mov	lr, r3
 8007a5e:	4770      	bx	lr
