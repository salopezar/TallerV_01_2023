
examenParcialTallerV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008aac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c14  08008c50  08008c50  00018c50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a864  0800a864  00020218  2**0
                  CONTENTS
  4 .ARM          00000000  0800a864  0800a864  00020218  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a864  0800a864  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a864  0800a864  0001a864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a868  0800a868  0001a868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800a86c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000036e0  20000218  0800aa84  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200038f8  0800aa84  000238f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004b84  00000000  00000000  00020242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f26  00000000  00000000  00024dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000328  00000000  00000000  00025cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002a8  00000000  00000000  00026018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010033  00000000  00000000  000262c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004e1d  00000000  00000000  000362f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005678a  00000000  00000000  0003b110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009189a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002374  00000000  00000000  000918ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00093c60  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00093d2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008c34 	.word	0x08008c34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	08008c34 	.word	0x08008c34

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	4605      	mov	r5, r0
 8000cbc:	460c      	mov	r4, r1
 8000cbe:	4628      	mov	r0, r5
 8000cc0:	4621      	mov	r1, r4
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f7ff ff21 	bl	8000b0c <__aeabi_dcmplt>
 8000cca:	b928      	cbnz	r0, 8000cd8 <__aeabi_d2lz+0x20>
 8000ccc:	4628      	mov	r0, r5
 8000cce:	4621      	mov	r1, r4
 8000cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd4:	f000 b80a 	b.w	8000cec <__aeabi_d2ulz>
 8000cd8:	4628      	mov	r0, r5
 8000cda:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000cde:	f000 f805 	bl	8000cec <__aeabi_d2ulz>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	bd38      	pop	{r3, r4, r5, pc}
 8000cea:	bf00      	nop

08000cec <__aeabi_d2ulz>:
 8000cec:	b5d0      	push	{r4, r6, r7, lr}
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__aeabi_d2ulz+0x34>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4606      	mov	r6, r0
 8000cf4:	460f      	mov	r7, r1
 8000cf6:	f7ff fc97 	bl	8000628 <__aeabi_dmul>
 8000cfa:	f7ff ff6d 	bl	8000bd8 <__aeabi_d2uiz>
 8000cfe:	4604      	mov	r4, r0
 8000d00:	f7ff fc18 	bl	8000534 <__aeabi_ui2d>
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <__aeabi_d2ulz+0x38>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	f7ff fc8e 	bl	8000628 <__aeabi_dmul>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4630      	mov	r0, r6
 8000d12:	4639      	mov	r1, r7
 8000d14:	f7ff fad0 	bl	80002b8 <__aeabi_dsub>
 8000d18:	f7ff ff5e 	bl	8000bd8 <__aeabi_d2uiz>
 8000d1c:	4621      	mov	r1, r4
 8000d1e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d20:	3df00000 	.word	0x3df00000
 8000d24:	41f00000 	.word	0x41f00000

08000d28 <main>:
uint8_t *ptrTime;
uint8_t *ptrDate;
void nameMonth (uint8_t numberMonth);

/* Función principal del programa */
int main(void){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0

	/* inicialización de todos los elementos del sistema */
	initHardware();
 8000d2c:	f000 f838 	bl	8000da0 <initHardware>

	/* Loop infinito */
	while(1){

		if (rxData != '\0'){
 8000d30:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <main+0x68>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d01f      	beq.n	8000d78 <main+0x50>
			bufferReception[counterReception] = rxData;
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <main+0x6c>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <main+0x68>)
 8000d40:	7819      	ldrb	r1, [r3, #0]
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <main+0x70>)
 8000d44:	5499      	strb	r1, [r3, r2]
			counterReception++;
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <main+0x6c>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <main+0x6c>)
 8000d50:	701a      	strb	r2, [r3, #0]
			if(rxData == '@'){
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <main+0x68>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b40      	cmp	r3, #64	; 0x40
 8000d58:	d10b      	bne.n	8000d72 <main+0x4a>
				stringComplete = true;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <main+0x74>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	701a      	strb	r2, [r3, #0]
				bufferReception[counterReception] = '\0';
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <main+0x6c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <main+0x70>)
 8000d68:	2100      	movs	r1, #0
 8000d6a:	5499      	strb	r1, [r3, r2]
				counterReception = 0;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <main+0x6c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
			}
			rxData = '\0';
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <main+0x68>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
		}

		if(stringComplete){
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <main+0x74>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0d7      	beq.n	8000d30 <main+0x8>
			parseCommands(bufferReception);
 8000d80:	4805      	ldr	r0, [pc, #20]	; (8000d98 <main+0x70>)
 8000d82:	f000 f96d 	bl	8001060 <parseCommands>
			stringComplete = false;
 8000d86:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <main+0x74>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
		if (rxData != '\0'){
 8000d8c:	e7d0      	b.n	8000d30 <main+0x8>
 8000d8e:	bf00      	nop
 8000d90:	200007b0 	.word	0x200007b0
 8000d94:	200037c4 	.word	0x200037c4
 8000d98:	200037c8 	.word	0x200037c8
 8000d9c:	20003848 	.word	0x20003848

08000da0 <initHardware>:
	}
	return 0;
}

// Función donde se configuran los pines en general.
void initHardware(void){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0

	// Se desactiva el reloj HSE
	RCC->CR &= ~(RCC_CR_HSEON);
 8000da4:	4b96      	ldr	r3, [pc, #600]	; (8001000 <initHardware+0x260>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a95      	ldr	r2, [pc, #596]	; (8001000 <initHardware+0x260>)
 8000daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dae:	6013      	str	r3, [r2, #0]

	// Se configura el PLL con los parámetros dados.
	handlerPLL.PLL_Config.PLL_voltage		= VOLTAGE_100MHZ;
 8000db0:	4b94      	ldr	r3, [pc, #592]	; (8001004 <initHardware+0x264>)
 8000db2:	2202      	movs	r2, #2
 8000db4:	701a      	strb	r2, [r3, #0]
	handlerPLL.PLL_Config.PLL_frecuency		= FRECUENCY_100MHZ;
 8000db6:	4b93      	ldr	r3, [pc, #588]	; (8001004 <initHardware+0x264>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	705a      	strb	r2, [r3, #1]
	PLL_Config(&handlerPLL);
 8000dbc:	4891      	ldr	r0, [pc, #580]	; (8001004 <initHardware+0x264>)
 8000dbe:	f001 faed 	bl	800239c <PLL_Config>
	getConfigPLL();
 8000dc2:	f001 fc27 	bl	8002614 <getConfigPLL>

	/* Configuración del LED de estado */
	handlerStateLED.pGPIOx 									= GPIOH;
 8000dc6:	4b90      	ldr	r3, [pc, #576]	; (8001008 <initHardware+0x268>)
 8000dc8:	4a90      	ldr	r2, [pc, #576]	; (800100c <initHardware+0x26c>)
 8000dca:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber 			= PIN_1;
 8000dcc:	4b8e      	ldr	r3, [pc, #568]	; (8001008 <initHardware+0x268>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode 			= GPIO_MODE_OUT;
 8000dd2:	4b8d      	ldr	r3, [pc, #564]	; (8001008 <initHardware+0x268>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType 			= GPIO_OTYPE_PUSHPULL;
 8000dd8:	4b8b      	ldr	r3, [pc, #556]	; (8001008 <initHardware+0x268>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed 			= GPIO_OSPEED_FAST;
 8000dde:	4b8a      	ldr	r3, [pc, #552]	; (8001008 <initHardware+0x268>)
 8000de0:	2202      	movs	r2, #2
 8000de2:	719a      	strb	r2, [r3, #6]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl 		= GPIO_PUPDR_NOTHING;
 8000de4:	4b88      	ldr	r3, [pc, #544]	; (8001008 <initHardware+0x268>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	71da      	strb	r2, [r3, #7]
	GPIO_Config(&handlerStateLED);
 8000dea:	4887      	ldr	r0, [pc, #540]	; (8001008 <initHardware+0x268>)
 8000dec:	f000 ffd6 	bl	8001d9c <GPIO_Config>

	/* Configuración del TIM2 para que haga un blinky cada 250 ms */
	handlerBlinkyTimer.ptrTIMx 								= TIM2;
 8000df0:	4b87      	ldr	r3, [pc, #540]	; (8001010 <initHardware+0x270>)
 8000df2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000df6:	601a      	str	r2, [r3, #0]
	handlerBlinkyTimer.TIMx_Config.TIMx_mode 				= BTIMER_MODE_UP;
 8000df8:	4b85      	ldr	r3, [pc, #532]	; (8001010 <initHardware+0x270>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	711a      	strb	r2, [r3, #4]
	handlerBlinkyTimer.TIMx_Config.TIMx_speed				= BTIMER_SPEED_100MHz;
 8000dfe:	4b84      	ldr	r3, [pc, #528]	; (8001010 <initHardware+0x270>)
 8000e00:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e04:	609a      	str	r2, [r3, #8]
	handlerBlinkyTimer.TIMx_Config.TIMx_period 				= 2500;
 8000e06:	4b82      	ldr	r3, [pc, #520]	; (8001010 <initHardware+0x270>)
 8000e08:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000e0c:	60da      	str	r2, [r3, #12]
	handlerBlinkyTimer.TIMx_Config.TIMx_interruptEnable 	= BTIMER_INTERRUPT_ENABLE;
 8000e0e:	4b80      	ldr	r3, [pc, #512]	; (8001010 <initHardware+0x270>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	741a      	strb	r2, [r3, #16]
	BasicTimer_Config(&handlerBlinkyTimer);
 8000e14:	487e      	ldr	r0, [pc, #504]	; (8001010 <initHardware+0x270>)
 8000e16:	f000 fecd 	bl	8001bb4 <BasicTimer_Config>

	/* Timer para las banderas necesarias para el muestreo del acelerometro */
	handlerTimer4.ptrTIMx 								    = TIM4;
 8000e1a:	4b7e      	ldr	r3, [pc, #504]	; (8001014 <initHardware+0x274>)
 8000e1c:	4a7e      	ldr	r2, [pc, #504]	; (8001018 <initHardware+0x278>)
 8000e1e:	601a      	str	r2, [r3, #0]
	handlerTimer4.TIMx_Config.TIMx_mode 				    = BTIMER_MODE_UP;
 8000e20:	4b7c      	ldr	r3, [pc, #496]	; (8001014 <initHardware+0x274>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	711a      	strb	r2, [r3, #4]
	handlerTimer4.TIMx_Config.TIMx_speed				    = BTIMER_SPEED_100MHz;
 8000e26:	4b7b      	ldr	r3, [pc, #492]	; (8001014 <initHardware+0x274>)
 8000e28:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e2c:	609a      	str	r2, [r3, #8]
	handlerTimer4.TIMx_Config.TIMx_period 				    = 50;
 8000e2e:	4b79      	ldr	r3, [pc, #484]	; (8001014 <initHardware+0x274>)
 8000e30:	2232      	movs	r2, #50	; 0x32
 8000e32:	60da      	str	r2, [r3, #12]
	handlerTimer4.TIMx_Config.TIMx_interruptEnable 	        = BTIMER_INTERRUPT_ENABLE;
 8000e34:	4b77      	ldr	r3, [pc, #476]	; (8001014 <initHardware+0x274>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	741a      	strb	r2, [r3, #16]
	BasicTimer_Config(&handlerTimer4);
 8000e3a:	4876      	ldr	r0, [pc, #472]	; (8001014 <initHardware+0x274>)
 8000e3c:	f000 feba 	bl	8001bb4 <BasicTimer_Config>

	/* Configuración del USART */
	// Transmisión
	handlerUSARTPINTX.pGPIOx  							= GPIOA;
 8000e40:	4b76      	ldr	r3, [pc, #472]	; (800101c <initHardware+0x27c>)
 8000e42:	4a77      	ldr	r2, [pc, #476]	; (8001020 <initHardware+0x280>)
 8000e44:	601a      	str	r2, [r3, #0]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinNumber 	= PIN_11;
 8000e46:	4b75      	ldr	r3, [pc, #468]	; (800101c <initHardware+0x27c>)
 8000e48:	220b      	movs	r2, #11
 8000e4a:	711a      	strb	r2, [r3, #4]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFN;
 8000e4c:	4b73      	ldr	r3, [pc, #460]	; (800101c <initHardware+0x27c>)
 8000e4e:	2202      	movs	r2, #2
 8000e50:	715a      	strb	r2, [r3, #5]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinAltFunMode = AF8;
 8000e52:	4b72      	ldr	r3, [pc, #456]	; (800101c <initHardware+0x27c>)
 8000e54:	2208      	movs	r2, #8
 8000e56:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerUSARTPINTX);
 8000e58:	4870      	ldr	r0, [pc, #448]	; (800101c <initHardware+0x27c>)
 8000e5a:	f000 ff9f 	bl	8001d9c <GPIO_Config>

	// Recepción
	handlerUSARTPINRX.pGPIOx 						 	= GPIOA;
 8000e5e:	4b71      	ldr	r3, [pc, #452]	; (8001024 <initHardware+0x284>)
 8000e60:	4a6f      	ldr	r2, [pc, #444]	; (8001020 <initHardware+0x280>)
 8000e62:	601a      	str	r2, [r3, #0]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinNumber		= PIN_12;
 8000e64:	4b6f      	ldr	r3, [pc, #444]	; (8001024 <initHardware+0x284>)
 8000e66:	220c      	movs	r2, #12
 8000e68:	711a      	strb	r2, [r3, #4]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFN;
 8000e6a:	4b6e      	ldr	r3, [pc, #440]	; (8001024 <initHardware+0x284>)
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	715a      	strb	r2, [r3, #5]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinAltFunMode = AF8;
 8000e70:	4b6c      	ldr	r3, [pc, #432]	; (8001024 <initHardware+0x284>)
 8000e72:	2208      	movs	r2, #8
 8000e74:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerUSARTPINRX);
 8000e76:	486b      	ldr	r0, [pc, #428]	; (8001024 <initHardware+0x284>)
 8000e78:	f000 ff90 	bl	8001d9c <GPIO_Config>

	// Para el USART 6
	USART6Comm.ptrUSARTx 					= USART6;
 8000e7c:	4b6a      	ldr	r3, [pc, #424]	; (8001028 <initHardware+0x288>)
 8000e7e:	4a6b      	ldr	r2, [pc, #428]	; (800102c <initHardware+0x28c>)
 8000e80:	601a      	str	r2, [r3, #0]
	USART6Comm.USART_Config.USART_baudrate 	= USART_BAUDRATE_115200;
 8000e82:	4b69      	ldr	r3, [pc, #420]	; (8001028 <initHardware+0x288>)
 8000e84:	2202      	movs	r2, #2
 8000e86:	715a      	strb	r2, [r3, #5]
	USART6Comm.USART_Config.USART_datasize 	= USART_DATASIZE_8BIT;
 8000e88:	4b67      	ldr	r3, [pc, #412]	; (8001028 <initHardware+0x288>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	719a      	strb	r2, [r3, #6]
	USART6Comm.USART_Config.USART_parity 	= USART_PARITY_NONE;
 8000e8e:	4b66      	ldr	r3, [pc, #408]	; (8001028 <initHardware+0x288>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	71da      	strb	r2, [r3, #7]
	USART6Comm.USART_Config.USART_mode 		= USART_MODE_RXTX;
 8000e94:	4b64      	ldr	r3, [pc, #400]	; (8001028 <initHardware+0x288>)
 8000e96:	2202      	movs	r2, #2
 8000e98:	711a      	strb	r2, [r3, #4]
	USART6Comm.USART_Config.USART_stopbits 	= USART_STOPBIT_1;
 8000e9a:	4b63      	ldr	r3, [pc, #396]	; (8001028 <initHardware+0x288>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	721a      	strb	r2, [r3, #8]
	USART6Comm.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;
 8000ea0:	4b61      	ldr	r3, [pc, #388]	; (8001028 <initHardware+0x288>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	725a      	strb	r2, [r3, #9]

	// Se carga lo hecho sobre el USART
	USART_Config(&USART6Comm);
 8000ea6:	4860      	ldr	r0, [pc, #384]	; (8001028 <initHardware+0x288>)
 8000ea8:	f002 f86c 	bl	8002f84 <USART_Config>

	/* Configuración ADC */

	// Cargando la configuración para la conversación ADC
	adcConfig.dataAlignment			= ADC_ALIGNMENT_RIGHT;
 8000eac:	4b60      	ldr	r3, [pc, #384]	; (8001030 <initHardware+0x290>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	711a      	strb	r2, [r3, #4]
	adcConfig.resolution			= ADC_RESOLUTION_12_BIT;
 8000eb2:	4b5f      	ldr	r3, [pc, #380]	; (8001030 <initHardware+0x290>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	705a      	strb	r2, [r3, #1]
	adcConfig.samplingPeriod		= ADC_SAMPLING_PERIOD_28_CYCLES;
 8000eb8:	4b5d      	ldr	r3, [pc, #372]	; (8001030 <initHardware+0x290>)
 8000eba:	2202      	movs	r2, #2
 8000ebc:	805a      	strh	r2, [r3, #2]
	adcConfig.AdcEventType			= TIMER_ADC_EVENT;
 8000ebe:	4b5c      	ldr	r3, [pc, #368]	; (8001030 <initHardware+0x290>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	721a      	strb	r2, [r3, #8]
	adcConfig.AdcChannelEvent		= TIM5_CH3;
 8000ec4:	4b5a      	ldr	r3, [pc, #360]	; (8001030 <initHardware+0x290>)
 8000ec6:	220a      	movs	r2, #10
 8000ec8:	725a      	strb	r2, [r3, #9]
	adcConfig.adcMultiChannel[0] 	= ADC_CHANNEL_0;
 8000eca:	4b59      	ldr	r3, [pc, #356]	; (8001030 <initHardware+0x290>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	729a      	strb	r2, [r3, #10]
	adcConfig.adcMultiChannel[1]	= ADC_CHANNEL_1;
 8000ed0:	4b57      	ldr	r3, [pc, #348]	; (8001030 <initHardware+0x290>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	72da      	strb	r2, [r3, #11]
	adcMultiChannel(&adcConfig, 2);
 8000ed6:	2102      	movs	r1, #2
 8000ed8:	4855      	ldr	r0, [pc, #340]	; (8001030 <initHardware+0x290>)
 8000eda:	f002 fc6d 	bl	80037b8 <adcMultiChannel>
	adcConfigEvents(&adcConfig);
 8000ede:	4854      	ldr	r0, [pc, #336]	; (8001030 <initHardware+0x290>)
 8000ee0:	f002 fbde 	bl	80036a0 <adcConfigEvents>

	// El PWM para muestrear la señal a la frecuencias que se quiere.
	HandlerPWM_1.pGPIOx          					= GPIOC;
 8000ee4:	4b53      	ldr	r3, [pc, #332]	; (8001034 <initHardware+0x294>)
 8000ee6:	4a54      	ldr	r2, [pc, #336]	; (8001038 <initHardware+0x298>)
 8000ee8:	601a      	str	r2, [r3, #0]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinNumber  	= PIN_7;
 8000eea:	4b52      	ldr	r3, [pc, #328]	; (8001034 <initHardware+0x294>)
 8000eec:	2207      	movs	r2, #7
 8000eee:	711a      	strb	r2, [r3, #4]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8000ef0:	4b50      	ldr	r3, [pc, #320]	; (8001034 <initHardware+0x294>)
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	715a      	strb	r2, [r3, #5]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8000ef6:	4b4f      	ldr	r3, [pc, #316]	; (8001034 <initHardware+0x294>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	721a      	strb	r2, [r3, #8]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000efc:	4b4d      	ldr	r3, [pc, #308]	; (8001034 <initHardware+0x294>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	71da      	strb	r2, [r3, #7]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8000f02:	4b4c      	ldr	r3, [pc, #304]	; (8001034 <initHardware+0x294>)
 8000f04:	2202      	movs	r2, #2
 8000f06:	719a      	strb	r2, [r3, #6]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000f08:	4b4a      	ldr	r3, [pc, #296]	; (8001034 <initHardware+0x294>)
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	725a      	strb	r2, [r3, #9]
	// Se carga GPIO del PWM.
	GPIO_Config(&HandlerPWM_1);
 8000f0e:	4849      	ldr	r0, [pc, #292]	; (8001034 <initHardware+0x294>)
 8000f10:	f000 ff44 	bl	8001d9c <GPIO_Config>

	handlerTIM3PWM_1.ptrTIMx           	  =   TIM5;
 8000f14:	4b49      	ldr	r3, [pc, #292]	; (800103c <initHardware+0x29c>)
 8000f16:	4a4a      	ldr	r2, [pc, #296]	; (8001040 <initHardware+0x2a0>)
 8000f18:	601a      	str	r2, [r3, #0]
	handlerTIM3PWM_1.config.channel       =   PWM_CHANNEL_3;
 8000f1a:	4b48      	ldr	r3, [pc, #288]	; (800103c <initHardware+0x29c>)
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	711a      	strb	r2, [r3, #4]
	handlerTIM3PWM_1.config.duttyCicle    =   1500;
 8000f20:	4b46      	ldr	r3, [pc, #280]	; (800103c <initHardware+0x29c>)
 8000f22:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000f26:	81da      	strh	r2, [r3, #14]
	handlerTIM3PWM_1.config.periodo       =   20000;
 8000f28:	4b44      	ldr	r3, [pc, #272]	; (800103c <initHardware+0x29c>)
 8000f2a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000f2e:	819a      	strh	r2, [r3, #12]
	handlerTIM3PWM_1.config.prescaler     =   100;
 8000f30:	4b42      	ldr	r3, [pc, #264]	; (800103c <initHardware+0x29c>)
 8000f32:	2264      	movs	r2, #100	; 0x64
 8000f34:	609a      	str	r2, [r3, #8]
	// Se carga el PWM.
	pwm_Config(&handlerTIM3PWM_1);
 8000f36:	4841      	ldr	r0, [pc, #260]	; (800103c <initHardware+0x29c>)
 8000f38:	f001 fc4a 	bl	80027d0 <pwm_Config>
	// Se habilita la señal.
	enableOutput(&handlerTIM3PWM_1);
 8000f3c:	483f      	ldr	r0, [pc, #252]	; (800103c <initHardware+0x29c>)
 8000f3e:	f001 fd1d 	bl	800297c <enableOutput>
	startPwmSignal(&handlerTIM3PWM_1);
 8000f42:	483e      	ldr	r0, [pc, #248]	; (800103c <initHardware+0x29c>)
 8000f44:	f001 fd08 	bl	8002958 <startPwmSignal>

	handlerPinFrecuency.pGPIOx 									= GPIOA;
 8000f48:	4b3e      	ldr	r3, [pc, #248]	; (8001044 <initHardware+0x2a4>)
 8000f4a:	4a35      	ldr	r2, [pc, #212]	; (8001020 <initHardware+0x280>)
 8000f4c:	601a      	str	r2, [r3, #0]
	handlerPinFrecuency.GPIO_PinConfig.GPIO_PinNumber 			= PIN_8;
 8000f4e:	4b3d      	ldr	r3, [pc, #244]	; (8001044 <initHardware+0x2a4>)
 8000f50:	2208      	movs	r2, #8
 8000f52:	711a      	strb	r2, [r3, #4]
	handlerPinFrecuency.GPIO_PinConfig.GPIO_PinMode 			= GPIO_MODE_ALTFN;
 8000f54:	4b3b      	ldr	r3, [pc, #236]	; (8001044 <initHardware+0x2a4>)
 8000f56:	2202      	movs	r2, #2
 8000f58:	715a      	strb	r2, [r3, #5]
	handlerPinFrecuency.GPIO_PinConfig.GPIO_PinAltFunMode 		= AF0;
 8000f5a:	4b3a      	ldr	r3, [pc, #232]	; (8001044 <initHardware+0x2a4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerPinFrecuency);
 8000f60:	4838      	ldr	r0, [pc, #224]	; (8001044 <initHardware+0x2a4>)
 8000f62:	f000 ff1b 	bl	8001d9c <GPIO_Config>

	// Para el RTC.
	handlerRTC.RTC_Days = 1;
 8000f66:	4b38      	ldr	r3, [pc, #224]	; (8001048 <initHardware+0x2a8>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	70da      	strb	r2, [r3, #3]
	handlerRTC.RTC_Hours = 10;
 8000f6c:	4b36      	ldr	r3, [pc, #216]	; (8001048 <initHardware+0x2a8>)
 8000f6e:	220a      	movs	r2, #10
 8000f70:	701a      	strb	r2, [r3, #0]
	handlerRTC.RTC_Minutes = 30;
 8000f72:	4b35      	ldr	r3, [pc, #212]	; (8001048 <initHardware+0x2a8>)
 8000f74:	221e      	movs	r2, #30
 8000f76:	705a      	strb	r2, [r3, #1]
	handlerRTC.RTC_Seconds = 10;
 8000f78:	4b33      	ldr	r3, [pc, #204]	; (8001048 <initHardware+0x2a8>)
 8000f7a:	220a      	movs	r2, #10
 8000f7c:	709a      	strb	r2, [r3, #2]
	// Se carga la configuración sobre el RTC.
	rtc_Config(&handlerRTC);
 8000f7e:	4832      	ldr	r0, [pc, #200]	; (8001048 <initHardware+0x2a8>)
 8000f80:	f001 fd80 	bl	8002a84 <rtc_Config>

	//Configuración I2C
	// Para el acelerómetro ADXL-345
	SCL.pGPIOx                                    = GPIOB;
 8000f84:	4b31      	ldr	r3, [pc, #196]	; (800104c <initHardware+0x2ac>)
 8000f86:	4a32      	ldr	r2, [pc, #200]	; (8001050 <initHardware+0x2b0>)
 8000f88:	601a      	str	r2, [r3, #0]
	SCL.GPIO_PinConfig.GPIO_PinNumber             = PIN_8;
 8000f8a:	4b30      	ldr	r3, [pc, #192]	; (800104c <initHardware+0x2ac>)
 8000f8c:	2208      	movs	r2, #8
 8000f8e:	711a      	strb	r2, [r3, #4]
	SCL.GPIO_PinConfig.GPIO_PinMode               = GPIO_MODE_ALTFN;
 8000f90:	4b2e      	ldr	r3, [pc, #184]	; (800104c <initHardware+0x2ac>)
 8000f92:	2202      	movs	r2, #2
 8000f94:	715a      	strb	r2, [r3, #5]
	SCL.GPIO_PinConfig.GPIO_PinOPType             = GPIO_OTYPE_OPENDRAIN;
 8000f96:	4b2d      	ldr	r3, [pc, #180]	; (800104c <initHardware+0x2ac>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	721a      	strb	r2, [r3, #8]
	SCL.GPIO_PinConfig.GPIO_PinPuPdControl        = GPIO_PUPDR_NOTHING;
 8000f9c:	4b2b      	ldr	r3, [pc, #172]	; (800104c <initHardware+0x2ac>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	71da      	strb	r2, [r3, #7]
	SCL.GPIO_PinConfig.GPIO_PinSpeed              = GPIO_OSPEED_FAST;
 8000fa2:	4b2a      	ldr	r3, [pc, #168]	; (800104c <initHardware+0x2ac>)
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	719a      	strb	r2, [r3, #6]
	SCL.GPIO_PinConfig.GPIO_PinAltFunMode         = AF4;
 8000fa8:	4b28      	ldr	r3, [pc, #160]	; (800104c <initHardware+0x2ac>)
 8000faa:	2204      	movs	r2, #4
 8000fac:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&SCL);
 8000fae:	4827      	ldr	r0, [pc, #156]	; (800104c <initHardware+0x2ac>)
 8000fb0:	f000 fef4 	bl	8001d9c <GPIO_Config>
	// SDA pin del ADXL-345
	SDA.pGPIOx                                    = GPIOB;
 8000fb4:	4b27      	ldr	r3, [pc, #156]	; (8001054 <initHardware+0x2b4>)
 8000fb6:	4a26      	ldr	r2, [pc, #152]	; (8001050 <initHardware+0x2b0>)
 8000fb8:	601a      	str	r2, [r3, #0]
	SDA.GPIO_PinConfig.GPIO_PinNumber             = PIN_9;
 8000fba:	4b26      	ldr	r3, [pc, #152]	; (8001054 <initHardware+0x2b4>)
 8000fbc:	2209      	movs	r2, #9
 8000fbe:	711a      	strb	r2, [r3, #4]
	SDA.GPIO_PinConfig.GPIO_PinMode               = GPIO_MODE_ALTFN;
 8000fc0:	4b24      	ldr	r3, [pc, #144]	; (8001054 <initHardware+0x2b4>)
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	715a      	strb	r2, [r3, #5]
	SDA.GPIO_PinConfig.GPIO_PinOPType             = GPIO_OTYPE_OPENDRAIN;
 8000fc6:	4b23      	ldr	r3, [pc, #140]	; (8001054 <initHardware+0x2b4>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	721a      	strb	r2, [r3, #8]
	SDA.GPIO_PinConfig.GPIO_PinPuPdControl        = GPIO_PUPDR_NOTHING;
 8000fcc:	4b21      	ldr	r3, [pc, #132]	; (8001054 <initHardware+0x2b4>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	71da      	strb	r2, [r3, #7]
	SDA.GPIO_PinConfig.GPIO_PinSpeed              = GPIO_OSPEED_FAST;
 8000fd2:	4b20      	ldr	r3, [pc, #128]	; (8001054 <initHardware+0x2b4>)
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	719a      	strb	r2, [r3, #6]
	SDA.GPIO_PinConfig.GPIO_PinAltFunMode         = AF4;
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <initHardware+0x2b4>)
 8000fda:	2204      	movs	r2, #4
 8000fdc:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&SDA);
 8000fde:	481d      	ldr	r0, [pc, #116]	; (8001054 <initHardware+0x2b4>)
 8000fe0:	f000 fedc 	bl	8001d9c <GPIO_Config>
	// Se carga en el I2C.
	Acelerometer.ptrI2Cx                            = I2C1;
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <initHardware+0x2b8>)
 8000fe6:	4a1d      	ldr	r2, [pc, #116]	; (800105c <initHardware+0x2bc>)
 8000fe8:	601a      	str	r2, [r3, #0]
	Acelerometer.modeI2C                            = I2C_MODE_FM;
 8000fea:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <initHardware+0x2b8>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	715a      	strb	r2, [r3, #5]
	Acelerometer.slaveAddress                       = ACCEL_ADDRESS;
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <initHardware+0x2b8>)
 8000ff2:	221d      	movs	r2, #29
 8000ff4:	711a      	strb	r2, [r3, #4]
	i2c_config(&Acelerometer);
 8000ff6:	4818      	ldr	r0, [pc, #96]	; (8001058 <initHardware+0x2b8>)
 8000ff8:	f001 f80e 	bl	8002018 <i2c_config>


} // Fin initHardware
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40023800 	.word	0x40023800
 8001004:	2000078c 	.word	0x2000078c
 8001008:	20000234 	.word	0x20000234
 800100c:	40021c00 	.word	0x40021c00
 8001010:	20000264 	.word	0x20000264
 8001014:	20000278 	.word	0x20000278
 8001018:	40000800 	.word	0x40000800
 800101c:	20000240 	.word	0x20000240
 8001020:	40020000 	.word	0x40020000
 8001024:	2000024c 	.word	0x2000024c
 8001028:	20000298 	.word	0x20000298
 800102c:	40011400 	.word	0x40011400
 8001030:	2000028c 	.word	0x2000028c
 8001034:	20000770 	.word	0x20000770
 8001038:	40020800 	.word	0x40020800
 800103c:	2000077c 	.word	0x2000077c
 8001040:	40000c00 	.word	0x40000c00
 8001044:	20000258 	.word	0x20000258
 8001048:	20003898 	.word	0x20003898
 800104c:	2000079c 	.word	0x2000079c
 8001050:	40020400 	.word	0x40020400
 8001054:	20000790 	.word	0x20000790
 8001058:	200007a8 	.word	0x200007a8
 800105c:	40005400 	.word	0x40005400

08001060 <parseCommands>:

void parseCommands(char *ptrBufferReception){
 8001060:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001064:	b08c      	sub	sp, #48	; 0x30
 8001066:	af04      	add	r7, sp, #16
 8001068:	6078      	str	r0, [r7, #4]
	/* Esta funcion de C lee la cadena de caracteres a la que apunta el "ptr" y la divide
	 * y almacena en tres elementos diferentes : un string llamado "cmd", y dos numeros
	 * integer llamados "firstParameter" y "secondParameter".
	 * De esta forma, podemos introducir información al micro desde el puerto serial.
	 */
	sscanf(ptrBufferReception,"%s %u %u %u %s",cmd,&firstParameter,&secondParameter,&thirdparameter,userMsg);
 800106a:	4ba1      	ldr	r3, [pc, #644]	; (80012f0 <parseCommands+0x290>)
 800106c:	9302      	str	r3, [sp, #8]
 800106e:	4ba1      	ldr	r3, [pc, #644]	; (80012f4 <parseCommands+0x294>)
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	4ba1      	ldr	r3, [pc, #644]	; (80012f8 <parseCommands+0x298>)
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	4ba1      	ldr	r3, [pc, #644]	; (80012fc <parseCommands+0x29c>)
 8001078:	4aa1      	ldr	r2, [pc, #644]	; (8001300 <parseCommands+0x2a0>)
 800107a:	49a2      	ldr	r1, [pc, #648]	; (8001304 <parseCommands+0x2a4>)
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f003 fbc7 	bl	8004810 <siscanf>
	//Este primer comando imprime una lista con los otros comandos que tiene el equipo
	if (strcmp(cmd, "help") == 0){
 8001082:	49a1      	ldr	r1, [pc, #644]	; (8001308 <parseCommands+0x2a8>)
 8001084:	489e      	ldr	r0, [pc, #632]	; (8001300 <parseCommands+0x2a0>)
 8001086:	f7ff f8ab 	bl	80001e0 <strcmp>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	f040 80f5 	bne.w	800127c <parseCommands+0x21c>
		writeMsg(&USART6Comm, "QUE ESTE MENU DE AYUDA TE ACOMPANE\n");
 8001092:	499e      	ldr	r1, [pc, #632]	; (800130c <parseCommands+0x2ac>)
 8001094:	489e      	ldr	r0, [pc, #632]	; (8001310 <parseCommands+0x2b0>)
 8001096:	f002 f992 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "⠀⢀⣠⣄⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣴⣶⡾⠿⠿⠿⠿⢷⣶⣦⣤⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 800109a:	499e      	ldr	r1, [pc, #632]	; (8001314 <parseCommands+0x2b4>)
 800109c:	489c      	ldr	r0, [pc, #624]	; (8001310 <parseCommands+0x2b0>)
 800109e:	f002 f98e 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "⢰⣿⡟⠛⠛⠛⠻⠿⠿⢿⣶⣶⣦⣤⣤⣀⣀⡀⣀⣴⣾⡿⠟⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠻⢿⣷⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣀⣀⣀⣀⡀\n");
 80010a2:	499d      	ldr	r1, [pc, #628]	; (8001318 <parseCommands+0x2b8>)
 80010a4:	489a      	ldr	r0, [pc, #616]	; (8001310 <parseCommands+0x2b0>)
 80010a6:	f002 f98a 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "⠀⠻⣿⣦⡀⠀⠉⠓⠶⢦⣄⣀⠉⠉⠛⠛⠻⠿⠟⠋⠁⠀⠀⠀⣤⡀⠀⠀⢠⠀⠀⠀⣠⠀⠀⠀⠀⠈⠙⠻⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠟⠛⠛⢻⣿\n");
 80010aa:	499c      	ldr	r1, [pc, #624]	; (800131c <parseCommands+0x2bc>)
 80010ac:	4898      	ldr	r0, [pc, #608]	; (8001310 <parseCommands+0x2b0>)
 80010ae:	f002 f986 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠈⠻⣿⣦⠀⠀⠀⠀⠈⠙⠻⢷⣶⣤⡀⠀⠀⠀⠀⢀⣀⡀⠀⠙⢷⡀⠸⡇⠀⣰⠇⠀⢀⣀⣀⠀⠀⠀⠀⠀⠀⣀⣠⣤⣤⣶⡶⠶⠶⠒⠂⠀⠀⣠⣾⠟\n");
 80010b2:	499b      	ldr	r1, [pc, #620]	; (8001320 <parseCommands+0x2c0>)
 80010b4:	4896      	ldr	r0, [pc, #600]	; (8001310 <parseCommands+0x2b0>)
 80010b6:	f002 f982 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠈⢿⣷⡀⠀⠀⠀⠀⠀⠀⠈⢻⣿⡄⣠⣴⣿⣯⣭⣽⣷⣆⠀⠁⠀⠀⠀⠀⢠⣾⣿⣿⣿⣿⣦⡀⠀⣠⣾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠀⣠⣾⡟⠁⠀\n");
 80010ba:	499a      	ldr	r1, [pc, #616]	; (8001324 <parseCommands+0x2c4>)
 80010bc:	4894      	ldr	r0, [pc, #592]	; (8001310 <parseCommands+0x2b0>)
 80010be:	f002 f97e 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠈⢻⣷⣄⠀⠀⠀⠀⠀⠀⠀⣿⡗⢻⣿⣧⣽⣿⣿⣿⣧⠀⠀⣀⣀⠀⢠⣿⣧⣼⣿⣿⣿⣿⠗⠰⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⡿⠋⠀⠀⠀\n");
 80010c2:	4999      	ldr	r1, [pc, #612]	; (8001328 <parseCommands+0x2c8>)
 80010c4:	4892      	ldr	r0, [pc, #584]	; (8001310 <parseCommands+0x2b0>)
 80010c6:	f002 f97a 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠀⠀⠙⢿⣶⣄⡀⠀⠀⠀⠀⠸⠃⠈⠻⣿⣿⣿⣿⣿⡿⠃⠾⣥⡬⠗⠸⣿⣿⣿⣿⣿⡿⠛⠀⢀⡟⠀⠀⠀⠀⠀⠀⣀⣠⣾⡿⠋⠀⠀⠀⠀⠀\n");
 80010ca:	4998      	ldr	r1, [pc, #608]	; (800132c <parseCommands+0x2cc>)
 80010cc:	4890      	ldr	r0, [pc, #576]	; (8001310 <parseCommands+0x2b0>)
 80010ce:	f002 f976 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠿⣷⣶⣤⣤⣄⣰⣄⠀⠀⠉⠉⠉⠁⠀⢀⣀⣠⣄⣀⡀⠀⠉⠉⠉⠀⠀⢀⣠⣾⣥⣤⣤⣤⣶⣶⡿⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀\n");
 80010d2:	4997      	ldr	r1, [pc, #604]	; (8001330 <parseCommands+0x2d0>)
 80010d4:	488e      	ldr	r0, [pc, #568]	; (8001310 <parseCommands+0x2b0>)
 80010d6:	f002 f972 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⢻⣿⠛⢿⣷⣦⣤⣴⣶⣶⣦⣤⣤⣤⣤⣬⣥⡴⠶⠾⠿⠿⠿⠿⠛⢛⣿⣿⣿⣯⡉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 80010da:	4996      	ldr	r1, [pc, #600]	; (8001334 <parseCommands+0x2d4>)
 80010dc:	488c      	ldr	r0, [pc, #560]	; (8001310 <parseCommands+0x2b0>)
 80010de:	f002 f96e 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣧⡀⠈⠉⠀⠈⠁⣾⠛⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣿⠟⠉⣹⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 80010e2:	4995      	ldr	r1, [pc, #596]	; (8001338 <parseCommands+0x2d8>)
 80010e4:	488a      	ldr	r0, [pc, #552]	; (8001310 <parseCommands+0x2b0>)
 80010e6:	f002 f96a 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣸⣿⣿⣦⣀⠀⠀⠀⢻⡀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣶⣿⠋⣿⠛⠃⠀⣈⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 80010ea:	4994      	ldr	r1, [pc, #592]	; (800133c <parseCommands+0x2dc>)
 80010ec:	4888      	ldr	r0, [pc, #544]	; (8001310 <parseCommands+0x2b0>)
 80010ee:	f002 f966 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡿⢿⡀⠈⢹⡿⠶⣶⣼⡇⠀⢀⣀⣀⣤⣴⣾⠟⠋⣡⣿⡟⠀⢻⣶⠶⣿⣿⠛⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 80010f2:	4993      	ldr	r1, [pc, #588]	; (8001340 <parseCommands+0x2e0>)
 80010f4:	4886      	ldr	r0, [pc, #536]	; (8001310 <parseCommands+0x2b0>)
 80010f6:	f002 f962 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣷⡈⢿⣦⣸⠇⢀⡿⠿⠿⡿⠿⠿⣿⠛⠋⠁⠀⣴⠟⣿⣧⡀⠈⢁⣰⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 80010fa:	4992      	ldr	r1, [pc, #584]	; (8001344 <parseCommands+0x2e4>)
 80010fc:	4884      	ldr	r0, [pc, #528]	; (8001310 <parseCommands+0x2b0>)
 80010fe:	f002 f95e 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⢻⣦⣈⣽⣀⣾⠃⠀⢸⡇⠀⢸⡇⠀⢀⣠⡾⠋⢰⣿⣿⣿⣿⡿⠟⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 8001102:	4991      	ldr	r1, [pc, #580]	; (8001348 <parseCommands+0x2e8>)
 8001104:	4882      	ldr	r0, [pc, #520]	; (8001310 <parseCommands+0x2b0>)
 8001106:	f002 f95a 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠿⢿⣿⣿⡟⠛⠃⠀⠀⣾⠀⠀⢸⡇⠐⠿⠋⠀⠀⣿⢻⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 800110a:	4990      	ldr	r1, [pc, #576]	; (800134c <parseCommands+0x2ec>)
 800110c:	4880      	ldr	r0, [pc, #512]	; (8001310 <parseCommands+0x2b0>)
 800110e:	f002 f956 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠁⢀⡴⠋⠀⣿⠀⠀⢸⠇⠀⠀⠀⠀⠀⠁⢸⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 8001112:	498f      	ldr	r1, [pc, #572]	; (8001350 <parseCommands+0x2f0>)
 8001114:	487e      	ldr	r0, [pc, #504]	; (8001310 <parseCommands+0x2b0>)
 8001116:	f002 f952 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⡿⠟⠋⠀⠀⠀⣿⠀⠀⣸⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 800111a:	498e      	ldr	r1, [pc, #568]	; (8001354 <parseCommands+0x2f4>)
 800111c:	487c      	ldr	r0, [pc, #496]	; (8001310 <parseCommands+0x2b0>)
 800111e:	f002 f94e 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣁⣀⠀⠀⠀⠀⣿⡀⠀⣿⠀⠀⠀⠀⠀⠀⢀⣈⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 8001122:	498d      	ldr	r1, [pc, #564]	; (8001358 <parseCommands+0x2f8>)
 8001124:	487a      	ldr	r0, [pc, #488]	; (8001310 <parseCommands+0x2b0>)
 8001126:	f002 f94a 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠛⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠟⠛⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 800112a:	498c      	ldr	r1, [pc, #560]	; (800135c <parseCommands+0x2fc>)
 800112c:	4878      	ldr	r0, [pc, #480]	; (8001310 <parseCommands+0x2b0>)
 800112e:	f002 f946 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "Help Menu CMDs:\n");
 8001132:	498b      	ldr	r1, [pc, #556]	; (8001360 <parseCommands+0x300>)
 8001134:	4876      	ldr	r0, [pc, #472]	; (8001310 <parseCommands+0x2b0>)
 8001136:	f002 f942 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "Por favor ingrese el esquema |comando| (espacio) los datos requeridos en cada caso\n");
 800113a:	498a      	ldr	r1, [pc, #552]	; (8001364 <parseCommands+0x304>)
 800113c:	4874      	ldr	r0, [pc, #464]	; (8001310 <parseCommands+0x2b0>)
 800113e:	f002 f93e 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "Los siguientes comandos indican las diferentes funciones del sistema:\n");
 8001142:	4989      	ldr	r1, [pc, #548]	; (8001368 <parseCommands+0x308>)
 8001144:	4872      	ldr	r0, [pc, #456]	; (8001310 <parseCommands+0x2b0>)
 8001146:	f002 f93a 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "1)help                     Este comando despliega el menu de ayuda\n");
 800114a:	4988      	ldr	r1, [pc, #544]	; (800136c <parseCommands+0x30c>)
 800114c:	4870      	ldr	r0, [pc, #448]	; (8001310 <parseCommands+0x2b0>)
 800114e:	f002 f936 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "2)select_Clock_Signal***** Presione 1 para señal PLL, 2 para LSE y 3 para HSI\n");
 8001152:	4987      	ldr	r1, [pc, #540]	; (8001370 <parseCommands+0x310>)
 8001154:	486e      	ldr	r0, [pc, #440]	; (8001310 <parseCommands+0x2b0>)
 8001156:	f002 f932 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "************************** Comando + entero\n");
 800115a:	4986      	ldr	r1, [pc, #536]	; (8001374 <parseCommands+0x314>)
 800115c:	486c      	ldr	r0, [pc, #432]	; (8001310 <parseCommands+0x2b0>)
 800115e:	f002 f92e 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "3)select_Prescaler******** Indique valores enteros entre 1 y 5 para el prescaler\n");
 8001162:	4985      	ldr	r1, [pc, #532]	; (8001378 <parseCommands+0x318>)
 8001164:	486a      	ldr	r0, [pc, #424]	; (8001310 <parseCommands+0x2b0>)
 8001166:	f002 f92a 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "************************** Comando + entero\n");
 800116a:	4982      	ldr	r1, [pc, #520]	; (8001374 <parseCommands+0x314>)
 800116c:	4868      	ldr	r0, [pc, #416]	; (8001310 <parseCommands+0x2b0>)
 800116e:	f002 f926 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "4)set_Time**************** Usted configura su hora inicial: Horas: minutos: segundos\n");
 8001172:	4982      	ldr	r1, [pc, #520]	; (800137c <parseCommands+0x31c>)
 8001174:	4866      	ldr	r0, [pc, #408]	; (8001310 <parseCommands+0x2b0>)
 8001176:	f002 f922 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "************************** Comando + entero + entero + entero\n");
 800117a:	4981      	ldr	r1, [pc, #516]	; (8001380 <parseCommands+0x320>)
 800117c:	4864      	ldr	r0, [pc, #400]	; (8001310 <parseCommands+0x2b0>)
 800117e:	f002 f91e 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "5)current_time************ El sistema retorna la hora actual: Horas: minutos: segundos\n");
 8001182:	4980      	ldr	r1, [pc, #512]	; (8001384 <parseCommands+0x324>)
 8001184:	4862      	ldr	r0, [pc, #392]	; (8001310 <parseCommands+0x2b0>)
 8001186:	f002 f91a 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "************************** Comando + entero + entero + entero\n");
 800118a:	497d      	ldr	r1, [pc, #500]	; (8001380 <parseCommands+0x320>)
 800118c:	4860      	ldr	r0, [pc, #384]	; (8001310 <parseCommands+0x2b0>)
 800118e:	f002 f916 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "6)configFecha************* Usted configura su fecha inicial: Dias: meses: año\n");
 8001192:	497d      	ldr	r1, [pc, #500]	; (8001388 <parseCommands+0x328>)
 8001194:	485e      	ldr	r0, [pc, #376]	; (8001310 <parseCommands+0x2b0>)
 8001196:	f002 f912 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "************************** Comando + entero + entero + entero\n");
 800119a:	4979      	ldr	r1, [pc, #484]	; (8001380 <parseCommands+0x320>)
 800119c:	485c      	ldr	r0, [pc, #368]	; (8001310 <parseCommands+0x2b0>)
 800119e:	f002 f90e 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "7)Fecha******************* El sistema retorna la fecha actual: Dias: meses: año\n");
 80011a2:	497a      	ldr	r1, [pc, #488]	; (800138c <parseCommands+0x32c>)
 80011a4:	485a      	ldr	r0, [pc, #360]	; (8001310 <parseCommands+0x2b0>)
 80011a6:	f002 f90a 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "************************** Comando + entero + entero + entero\n");
 80011aa:	4975      	ldr	r1, [pc, #468]	; (8001380 <parseCommands+0x320>)
 80011ac:	4858      	ldr	r0, [pc, #352]	; (8001310 <parseCommands+0x2b0>)
 80011ae:	f002 f906 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "8)init_ADC**************** Se inicializa y muestra 256 datos de 2 canales de ADC\n");
 80011b2:	4977      	ldr	r1, [pc, #476]	; (8001390 <parseCommands+0x330>)
 80011b4:	4856      	ldr	r0, [pc, #344]	; (8001310 <parseCommands+0x2b0>)
 80011b6:	f002 f902 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "************************** Solo comando\n");
 80011ba:	4976      	ldr	r1, [pc, #472]	; (8001394 <parseCommands+0x334>)
 80011bc:	4854      	ldr	r0, [pc, #336]	; (8001310 <parseCommands+0x2b0>)
 80011be:	f002 f8fe 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "9)signal_Sampling********* Se ingresa el periodo de muestreo de la señal de PWM\n");
 80011c2:	4975      	ldr	r1, [pc, #468]	; (8001398 <parseCommands+0x338>)
 80011c4:	4852      	ldr	r0, [pc, #328]	; (8001310 <parseCommands+0x2b0>)
 80011c6:	f002 f8fa 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "************************** Comando + entero\n");
 80011ca:	496a      	ldr	r1, [pc, #424]	; (8001374 <parseCommands+0x314>)
 80011cc:	4850      	ldr	r0, [pc, #320]	; (8001310 <parseCommands+0x2b0>)
 80011ce:	f002 f8f6 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "10)muestreo*************** Se inicializa la toma de datos del acelerometro mostrando 256 datos\n");
 80011d2:	4972      	ldr	r1, [pc, #456]	; (800139c <parseCommands+0x33c>)
 80011d4:	484e      	ldr	r0, [pc, #312]	; (8001310 <parseCommands+0x2b0>)
 80011d6:	f002 f8f2 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "************************** Comando\n");
 80011da:	4971      	ldr	r1, [pc, #452]	; (80013a0 <parseCommands+0x340>)
 80011dc:	484c      	ldr	r0, [pc, #304]	; (8001310 <parseCommands+0x2b0>)
 80011de:	f002 f8ee 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "▒▒▒▒▒▒▒▓\n");
 80011e2:	4970      	ldr	r1, [pc, #448]	; (80013a4 <parseCommands+0x344>)
 80011e4:	484a      	ldr	r0, [pc, #296]	; (8001310 <parseCommands+0x2b0>)
 80011e6:	f002 f8ea 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "▒▒▒▒▒▒▒▓▓▓\n");
 80011ea:	496f      	ldr	r1, [pc, #444]	; (80013a8 <parseCommands+0x348>)
 80011ec:	4848      	ldr	r0, [pc, #288]	; (8001310 <parseCommands+0x2b0>)
 80011ee:	f002 f8e6 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "▒▓▓▓▓▓▓░░░▓\n");
 80011f2:	496e      	ldr	r1, [pc, #440]	; (80013ac <parseCommands+0x34c>)
 80011f4:	4846      	ldr	r0, [pc, #280]	; (8001310 <parseCommands+0x2b0>)
 80011f6:	f002 f8e2 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "▒▓░░░░▓░░░░▓\n");
 80011fa:	496d      	ldr	r1, [pc, #436]	; (80013b0 <parseCommands+0x350>)
 80011fc:	4844      	ldr	r0, [pc, #272]	; (8001310 <parseCommands+0x2b0>)
 80011fe:	f002 f8de 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "▓░░░░░░▓░▓░▓\n");
 8001202:	496c      	ldr	r1, [pc, #432]	; (80013b4 <parseCommands+0x354>)
 8001204:	4842      	ldr	r0, [pc, #264]	; (8001310 <parseCommands+0x2b0>)
 8001206:	f002 f8da 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "▓░░░░░░▓░░░▓\n");
 800120a:	496b      	ldr	r1, [pc, #428]	; (80013b8 <parseCommands+0x358>)
 800120c:	4840      	ldr	r0, [pc, #256]	; (8001310 <parseCommands+0x2b0>)
 800120e:	f002 f8d6 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "▓░░▓░░░▓▓▓▓\n");
 8001212:	496a      	ldr	r1, [pc, #424]	; (80013bc <parseCommands+0x35c>)
 8001214:	483e      	ldr	r0, [pc, #248]	; (8001310 <parseCommands+0x2b0>)
 8001216:	f002 f8d2 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "▒▓░░░░▓▒▒▒▒▓\n");
 800121a:	4969      	ldr	r1, [pc, #420]	; (80013c0 <parseCommands+0x360>)
 800121c:	483c      	ldr	r0, [pc, #240]	; (8001310 <parseCommands+0x2b0>)
 800121e:	f002 f8ce 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "▒▒▓▓▓▓▒▒▒▒▒▓\n");
 8001222:	4968      	ldr	r1, [pc, #416]	; (80013c4 <parseCommands+0x364>)
 8001224:	483a      	ldr	r0, [pc, #232]	; (8001310 <parseCommands+0x2b0>)
 8001226:	f002 f8ca 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "▒▒▒▒▒▒▒▒▓▓▓▓\n");
 800122a:	4967      	ldr	r1, [pc, #412]	; (80013c8 <parseCommands+0x368>)
 800122c:	4838      	ldr	r0, [pc, #224]	; (8001310 <parseCommands+0x2b0>)
 800122e:	f002 f8c6 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "▒▒▒▒▒▓▓▓▒▒▒▒▓\n");
 8001232:	4966      	ldr	r1, [pc, #408]	; (80013cc <parseCommands+0x36c>)
 8001234:	4836      	ldr	r0, [pc, #216]	; (8001310 <parseCommands+0x2b0>)
 8001236:	f002 f8c2 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "▒▒▒▒▓▒▒▒▒▒▒▒▒▓\n");
 800123a:	4965      	ldr	r1, [pc, #404]	; (80013d0 <parseCommands+0x370>)
 800123c:	4834      	ldr	r0, [pc, #208]	; (8001310 <parseCommands+0x2b0>)
 800123e:	f002 f8be 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "▒▒▒▓▒▒▒▒▒▒▒▒▒▓\n");
 8001242:	4964      	ldr	r1, [pc, #400]	; (80013d4 <parseCommands+0x374>)
 8001244:	4832      	ldr	r0, [pc, #200]	; (8001310 <parseCommands+0x2b0>)
 8001246:	f002 f8ba 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "▒▒▓▒▒▒▒▒▒▒▒▒▒▒▓\n");
 800124a:	4963      	ldr	r1, [pc, #396]	; (80013d8 <parseCommands+0x378>)
 800124c:	4830      	ldr	r0, [pc, #192]	; (8001310 <parseCommands+0x2b0>)
 800124e:	f002 f8b6 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "▒▓▒▓▒▒▒▒▒▒▒▒▒▓\n");
 8001252:	4962      	ldr	r1, [pc, #392]	; (80013dc <parseCommands+0x37c>)
 8001254:	482e      	ldr	r0, [pc, #184]	; (8001310 <parseCommands+0x2b0>)
 8001256:	f002 f8b2 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "▒▓▒▓▓▓▓▓▓▓▓▓▓\n");
 800125a:	4961      	ldr	r1, [pc, #388]	; (80013e0 <parseCommands+0x380>)
 800125c:	482c      	ldr	r0, [pc, #176]	; (8001310 <parseCommands+0x2b0>)
 800125e:	f002 f8ae 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "▒▓▒▒▒▒▒▒▒▓\n");
 8001262:	4960      	ldr	r1, [pc, #384]	; (80013e4 <parseCommands+0x384>)
 8001264:	482a      	ldr	r0, [pc, #168]	; (8001310 <parseCommands+0x2b0>)
 8001266:	f002 f8aa 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "▒▒▓▒▒▒▒▒▓\n");
 800126a:	495f      	ldr	r1, [pc, #380]	; (80013e8 <parseCommands+0x388>)
 800126c:	4828      	ldr	r0, [pc, #160]	; (8001310 <parseCommands+0x2b0>)
 800126e:	f002 f8a6 	bl	80033be <writeMsg>
		writeMsg(&USART6Comm, "ESPERO HABERTE AYUDADO\n");
 8001272:	495e      	ldr	r1, [pc, #376]	; (80013ec <parseCommands+0x38c>)
 8001274:	4826      	ldr	r0, [pc, #152]	; (8001310 <parseCommands+0x2b0>)
 8001276:	f002 f8a2 	bl	80033be <writeMsg>
			writeMsg(&USART6Comm, bufferData);
		}
		writeMsg(&USART6Comm, "Datos tomados correctamente \n");

	}
}
 800127a:	e3be      	b.n	80019fa <parseCommands+0x99a>
	}else if(strcmp(cmd, "select_Clock_Signal") == 0){
 800127c:	495c      	ldr	r1, [pc, #368]	; (80013f0 <parseCommands+0x390>)
 800127e:	4820      	ldr	r0, [pc, #128]	; (8001300 <parseCommands+0x2a0>)
 8001280:	f7fe ffae 	bl	80001e0 <strcmp>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	f040 80bc 	bne.w	8001404 <parseCommands+0x3a4>
		if(firstParameter == 1){
 800128c:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <parseCommands+0x29c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d10a      	bne.n	80012aa <parseCommands+0x24a>
		chooseCLK(firstParameter);
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <parseCommands+0x29c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f001 f9dc 	bl	8002658 <chooseCLK>
		writeMsg(&USART6Comm, "selected PLL\n");
 80012a0:	4954      	ldr	r1, [pc, #336]	; (80013f4 <parseCommands+0x394>)
 80012a2:	481b      	ldr	r0, [pc, #108]	; (8001310 <parseCommands+0x2b0>)
 80012a4:	f002 f88b 	bl	80033be <writeMsg>
}
 80012a8:	e3a7      	b.n	80019fa <parseCommands+0x99a>
		}else if(firstParameter == 2){
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <parseCommands+0x29c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d10a      	bne.n	80012c8 <parseCommands+0x268>
		chooseCLK(firstParameter);
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <parseCommands+0x29c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	f001 f9cd 	bl	8002658 <chooseCLK>
		writeMsg(&USART6Comm, "selected LSE\n");
 80012be:	494e      	ldr	r1, [pc, #312]	; (80013f8 <parseCommands+0x398>)
 80012c0:	4813      	ldr	r0, [pc, #76]	; (8001310 <parseCommands+0x2b0>)
 80012c2:	f002 f87c 	bl	80033be <writeMsg>
}
 80012c6:	e398      	b.n	80019fa <parseCommands+0x99a>
		}else if(firstParameter == 3){
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <parseCommands+0x29c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b03      	cmp	r3, #3
 80012ce:	d10a      	bne.n	80012e6 <parseCommands+0x286>
		chooseCLK(firstParameter);
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <parseCommands+0x29c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 f9be 	bl	8002658 <chooseCLK>
		writeMsg(&USART6Comm, "selected HSI\n");
 80012dc:	4947      	ldr	r1, [pc, #284]	; (80013fc <parseCommands+0x39c>)
 80012de:	480c      	ldr	r0, [pc, #48]	; (8001310 <parseCommands+0x2b0>)
 80012e0:	f002 f86d 	bl	80033be <writeMsg>
}
 80012e4:	e389      	b.n	80019fa <parseCommands+0x99a>
			writeMsg(&USART6Comm, "Invalid comand, please read the help menu\n");
 80012e6:	4946      	ldr	r1, [pc, #280]	; (8001400 <parseCommands+0x3a0>)
 80012e8:	4809      	ldr	r0, [pc, #36]	; (8001310 <parseCommands+0x2b0>)
 80012ea:	f002 f868 	bl	80033be <writeMsg>
}
 80012ee:	e384      	b.n	80019fa <parseCommands+0x99a>
 80012f0:	2000384c 	.word	0x2000384c
 80012f4:	20003894 	.word	0x20003894
 80012f8:	20003890 	.word	0x20003890
 80012fc:	2000388c 	.word	0x2000388c
 8001300:	20003808 	.word	0x20003808
 8001304:	08008c50 	.word	0x08008c50
 8001308:	08008c60 	.word	0x08008c60
 800130c:	08008c68 	.word	0x08008c68
 8001310:	20000298 	.word	0x20000298
 8001314:	08008c8c 	.word	0x08008c8c
 8001318:	08008d3c 	.word	0x08008d3c
 800131c:	08008dec 	.word	0x08008dec
 8001320:	08008e9c 	.word	0x08008e9c
 8001324:	08008f4c 	.word	0x08008f4c
 8001328:	08008ffc 	.word	0x08008ffc
 800132c:	080090ac 	.word	0x080090ac
 8001330:	0800915c 	.word	0x0800915c
 8001334:	0800920c 	.word	0x0800920c
 8001338:	080092bc 	.word	0x080092bc
 800133c:	0800936c 	.word	0x0800936c
 8001340:	0800941c 	.word	0x0800941c
 8001344:	080094cc 	.word	0x080094cc
 8001348:	0800957c 	.word	0x0800957c
 800134c:	0800962c 	.word	0x0800962c
 8001350:	080096dc 	.word	0x080096dc
 8001354:	0800978c 	.word	0x0800978c
 8001358:	0800983c 	.word	0x0800983c
 800135c:	080098ec 	.word	0x080098ec
 8001360:	0800999c 	.word	0x0800999c
 8001364:	080099b0 	.word	0x080099b0
 8001368:	08009a04 	.word	0x08009a04
 800136c:	08009a4c 	.word	0x08009a4c
 8001370:	08009a90 	.word	0x08009a90
 8001374:	08009ae0 	.word	0x08009ae0
 8001378:	08009b10 	.word	0x08009b10
 800137c:	08009b64 	.word	0x08009b64
 8001380:	08009bbc 	.word	0x08009bbc
 8001384:	08009bfc 	.word	0x08009bfc
 8001388:	08009c54 	.word	0x08009c54
 800138c:	08009ca4 	.word	0x08009ca4
 8001390:	08009cf8 	.word	0x08009cf8
 8001394:	08009d4c 	.word	0x08009d4c
 8001398:	08009d78 	.word	0x08009d78
 800139c:	08009dcc 	.word	0x08009dcc
 80013a0:	08009e2c 	.word	0x08009e2c
 80013a4:	08009e50 	.word	0x08009e50
 80013a8:	08009e6c 	.word	0x08009e6c
 80013ac:	08009e8c 	.word	0x08009e8c
 80013b0:	08009eb0 	.word	0x08009eb0
 80013b4:	08009ed8 	.word	0x08009ed8
 80013b8:	08009f00 	.word	0x08009f00
 80013bc:	08009f28 	.word	0x08009f28
 80013c0:	08009f4c 	.word	0x08009f4c
 80013c4:	08009f74 	.word	0x08009f74
 80013c8:	08009f9c 	.word	0x08009f9c
 80013cc:	08009fc4 	.word	0x08009fc4
 80013d0:	08009ff0 	.word	0x08009ff0
 80013d4:	0800a01c 	.word	0x0800a01c
 80013d8:	0800a048 	.word	0x0800a048
 80013dc:	0800a078 	.word	0x0800a078
 80013e0:	0800a0a4 	.word	0x0800a0a4
 80013e4:	0800a0d0 	.word	0x0800a0d0
 80013e8:	0800a0f0 	.word	0x0800a0f0
 80013ec:	0800a110 	.word	0x0800a110
 80013f0:	0800a128 	.word	0x0800a128
 80013f4:	0800a13c 	.word	0x0800a13c
 80013f8:	0800a14c 	.word	0x0800a14c
 80013fc:	0800a15c 	.word	0x0800a15c
 8001400:	0800a16c 	.word	0x0800a16c
	}else if(strcmp(cmd, "select_Prescaler") == 0){
 8001404:	4985      	ldr	r1, [pc, #532]	; (800161c <parseCommands+0x5bc>)
 8001406:	4886      	ldr	r0, [pc, #536]	; (8001620 <parseCommands+0x5c0>)
 8001408:	f7fe feea 	bl	80001e0 <strcmp>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d14f      	bne.n	80014b2 <parseCommands+0x452>
		if(firstParameter == 1){
 8001412:	4b84      	ldr	r3, [pc, #528]	; (8001624 <parseCommands+0x5c4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d10a      	bne.n	8001430 <parseCommands+0x3d0>
		prescalerNumber(firstParameter);
 800141a:	4b82      	ldr	r3, [pc, #520]	; (8001624 <parseCommands+0x5c4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	4618      	mov	r0, r3
 8001422:	f001 f957 	bl	80026d4 <prescalerNumber>
		writeMsg(&USART6Comm, "Prescaler null = 1\n");
 8001426:	4980      	ldr	r1, [pc, #512]	; (8001628 <parseCommands+0x5c8>)
 8001428:	4880      	ldr	r0, [pc, #512]	; (800162c <parseCommands+0x5cc>)
 800142a:	f001 ffc8 	bl	80033be <writeMsg>
}
 800142e:	e2e4      	b.n	80019fa <parseCommands+0x99a>
		}else if(firstParameter == 2){
 8001430:	4b7c      	ldr	r3, [pc, #496]	; (8001624 <parseCommands+0x5c4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d10a      	bne.n	800144e <parseCommands+0x3ee>
		prescalerNumber(firstParameter);
 8001438:	4b7a      	ldr	r3, [pc, #488]	; (8001624 <parseCommands+0x5c4>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	4618      	mov	r0, r3
 8001440:	f001 f948 	bl	80026d4 <prescalerNumber>
		writeMsg(&USART6Comm, "division in 2\n");
 8001444:	497a      	ldr	r1, [pc, #488]	; (8001630 <parseCommands+0x5d0>)
 8001446:	4879      	ldr	r0, [pc, #484]	; (800162c <parseCommands+0x5cc>)
 8001448:	f001 ffb9 	bl	80033be <writeMsg>
}
 800144c:	e2d5      	b.n	80019fa <parseCommands+0x99a>
		}else if(firstParameter == 3){
 800144e:	4b75      	ldr	r3, [pc, #468]	; (8001624 <parseCommands+0x5c4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b03      	cmp	r3, #3
 8001454:	d10a      	bne.n	800146c <parseCommands+0x40c>
		prescalerNumber(firstParameter);
 8001456:	4b73      	ldr	r3, [pc, #460]	; (8001624 <parseCommands+0x5c4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	4618      	mov	r0, r3
 800145e:	f001 f939 	bl	80026d4 <prescalerNumber>
		writeMsg(&USART6Comm, "division in 3\n");
 8001462:	4974      	ldr	r1, [pc, #464]	; (8001634 <parseCommands+0x5d4>)
 8001464:	4871      	ldr	r0, [pc, #452]	; (800162c <parseCommands+0x5cc>)
 8001466:	f001 ffaa 	bl	80033be <writeMsg>
}
 800146a:	e2c6      	b.n	80019fa <parseCommands+0x99a>
		}else if(firstParameter == 4){
 800146c:	4b6d      	ldr	r3, [pc, #436]	; (8001624 <parseCommands+0x5c4>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b04      	cmp	r3, #4
 8001472:	d10a      	bne.n	800148a <parseCommands+0x42a>
		prescalerNumber(firstParameter);
 8001474:	4b6b      	ldr	r3, [pc, #428]	; (8001624 <parseCommands+0x5c4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f001 f92a 	bl	80026d4 <prescalerNumber>
		writeMsg(&USART6Comm, "division in 4\n");
 8001480:	496d      	ldr	r1, [pc, #436]	; (8001638 <parseCommands+0x5d8>)
 8001482:	486a      	ldr	r0, [pc, #424]	; (800162c <parseCommands+0x5cc>)
 8001484:	f001 ff9b 	bl	80033be <writeMsg>
}
 8001488:	e2b7      	b.n	80019fa <parseCommands+0x99a>
		}else if(firstParameter == 5){
 800148a:	4b66      	ldr	r3, [pc, #408]	; (8001624 <parseCommands+0x5c4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b05      	cmp	r3, #5
 8001490:	d10a      	bne.n	80014a8 <parseCommands+0x448>
		prescalerNumber(firstParameter);
 8001492:	4b64      	ldr	r3, [pc, #400]	; (8001624 <parseCommands+0x5c4>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	4618      	mov	r0, r3
 800149a:	f001 f91b 	bl	80026d4 <prescalerNumber>
		writeMsg(&USART6Comm, "division in 5\n");
 800149e:	4967      	ldr	r1, [pc, #412]	; (800163c <parseCommands+0x5dc>)
 80014a0:	4862      	ldr	r0, [pc, #392]	; (800162c <parseCommands+0x5cc>)
 80014a2:	f001 ff8c 	bl	80033be <writeMsg>
}
 80014a6:	e2a8      	b.n	80019fa <parseCommands+0x99a>
			writeMsg(&USART6Comm, "Invalid comand, please read the help menu\n");
 80014a8:	4965      	ldr	r1, [pc, #404]	; (8001640 <parseCommands+0x5e0>)
 80014aa:	4860      	ldr	r0, [pc, #384]	; (800162c <parseCommands+0x5cc>)
 80014ac:	f001 ff87 	bl	80033be <writeMsg>
}
 80014b0:	e2a3      	b.n	80019fa <parseCommands+0x99a>
	}else if(strcmp(cmd,"set_Time") == 0){
 80014b2:	4964      	ldr	r1, [pc, #400]	; (8001644 <parseCommands+0x5e4>)
 80014b4:	485a      	ldr	r0, [pc, #360]	; (8001620 <parseCommands+0x5c0>)
 80014b6:	f7fe fe93 	bl	80001e0 <strcmp>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d137      	bne.n	8001530 <parseCommands+0x4d0>
		if(firstParameter > 23){
 80014c0:	4b58      	ldr	r3, [pc, #352]	; (8001624 <parseCommands+0x5c4>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b17      	cmp	r3, #23
 80014c6:	d902      	bls.n	80014ce <parseCommands+0x46e>
			firstParameter = 23;
 80014c8:	4b56      	ldr	r3, [pc, #344]	; (8001624 <parseCommands+0x5c4>)
 80014ca:	2217      	movs	r2, #23
 80014cc:	601a      	str	r2, [r3, #0]
		if(secondParameter > 59){
 80014ce:	4b5e      	ldr	r3, [pc, #376]	; (8001648 <parseCommands+0x5e8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b3b      	cmp	r3, #59	; 0x3b
 80014d4:	d902      	bls.n	80014dc <parseCommands+0x47c>
			secondParameter = 59;
 80014d6:	4b5c      	ldr	r3, [pc, #368]	; (8001648 <parseCommands+0x5e8>)
 80014d8:	223b      	movs	r2, #59	; 0x3b
 80014da:	601a      	str	r2, [r3, #0]
		if(thirdparameter > 59){
 80014dc:	4b5b      	ldr	r3, [pc, #364]	; (800164c <parseCommands+0x5ec>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b3b      	cmp	r3, #59	; 0x3b
 80014e2:	d902      	bls.n	80014ea <parseCommands+0x48a>
			thirdparameter = 59;
 80014e4:	4b59      	ldr	r3, [pc, #356]	; (800164c <parseCommands+0x5ec>)
 80014e6:	223b      	movs	r2, #59	; 0x3b
 80014e8:	601a      	str	r2, [r3, #0]
		handlerRTC.RTC_Hours = firstParameter;
 80014ea:	4b4e      	ldr	r3, [pc, #312]	; (8001624 <parseCommands+0x5c4>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	4b57      	ldr	r3, [pc, #348]	; (8001650 <parseCommands+0x5f0>)
 80014f2:	701a      	strb	r2, [r3, #0]
		handlerRTC.RTC_Minutes = secondParameter;
 80014f4:	4b54      	ldr	r3, [pc, #336]	; (8001648 <parseCommands+0x5e8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4b55      	ldr	r3, [pc, #340]	; (8001650 <parseCommands+0x5f0>)
 80014fc:	705a      	strb	r2, [r3, #1]
		handlerRTC.RTC_Seconds = thirdparameter;
 80014fe:	4b53      	ldr	r3, [pc, #332]	; (800164c <parseCommands+0x5ec>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b52      	ldr	r3, [pc, #328]	; (8001650 <parseCommands+0x5f0>)
 8001506:	709a      	strb	r2, [r3, #2]
		rtc_Config(&handlerRTC);
 8001508:	4851      	ldr	r0, [pc, #324]	; (8001650 <parseCommands+0x5f0>)
 800150a:	f001 fabb 	bl	8002a84 <rtc_Config>
		sprintf(buffer,"Hora %02u : %02u : %02u \n",firstParameter,secondParameter,thirdparameter);
 800150e:	4b45      	ldr	r3, [pc, #276]	; (8001624 <parseCommands+0x5c4>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4b4d      	ldr	r3, [pc, #308]	; (8001648 <parseCommands+0x5e8>)
 8001514:	6819      	ldr	r1, [r3, #0]
 8001516:	4b4d      	ldr	r3, [pc, #308]	; (800164c <parseCommands+0x5ec>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	460b      	mov	r3, r1
 800151e:	494d      	ldr	r1, [pc, #308]	; (8001654 <parseCommands+0x5f4>)
 8001520:	484d      	ldr	r0, [pc, #308]	; (8001658 <parseCommands+0x5f8>)
 8001522:	f003 f955 	bl	80047d0 <siprintf>
		writeMsg(&USART6Comm, buffer);
 8001526:	494c      	ldr	r1, [pc, #304]	; (8001658 <parseCommands+0x5f8>)
 8001528:	4840      	ldr	r0, [pc, #256]	; (800162c <parseCommands+0x5cc>)
 800152a:	f001 ff48 	bl	80033be <writeMsg>
}
 800152e:	e264      	b.n	80019fa <parseCommands+0x99a>
	}else if(strcmp(cmd,"current_time") == 0){
 8001530:	494a      	ldr	r1, [pc, #296]	; (800165c <parseCommands+0x5fc>)
 8001532:	483b      	ldr	r0, [pc, #236]	; (8001620 <parseCommands+0x5c0>)
 8001534:	f7fe fe54 	bl	80001e0 <strcmp>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d126      	bne.n	800158c <parseCommands+0x52c>
		ptrTime = read_Time();
 800153e:	f001 fbfd 	bl	8002d3c <read_Time>
 8001542:	4603      	mov	r3, r0
 8001544:	4a46      	ldr	r2, [pc, #280]	; (8001660 <parseCommands+0x600>)
 8001546:	6013      	str	r3, [r2, #0]
		segundos = ptrTime[0];
 8001548:	4b45      	ldr	r3, [pc, #276]	; (8001660 <parseCommands+0x600>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	781a      	ldrb	r2, [r3, #0]
 800154e:	4b45      	ldr	r3, [pc, #276]	; (8001664 <parseCommands+0x604>)
 8001550:	701a      	strb	r2, [r3, #0]
		minutos = ptrTime[1];
 8001552:	4b43      	ldr	r3, [pc, #268]	; (8001660 <parseCommands+0x600>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	785a      	ldrb	r2, [r3, #1]
 8001558:	4b43      	ldr	r3, [pc, #268]	; (8001668 <parseCommands+0x608>)
 800155a:	701a      	strb	r2, [r3, #0]
		horas	= ptrTime[2];
 800155c:	4b40      	ldr	r3, [pc, #256]	; (8001660 <parseCommands+0x600>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	789a      	ldrb	r2, [r3, #2]
 8001562:	4b42      	ldr	r3, [pc, #264]	; (800166c <parseCommands+0x60c>)
 8001564:	701a      	strb	r2, [r3, #0]
		sprintf(buffer,"Hora Actual %02u : %02u : %02u \n",horas,minutos,segundos);
 8001566:	4b41      	ldr	r3, [pc, #260]	; (800166c <parseCommands+0x60c>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	4b3e      	ldr	r3, [pc, #248]	; (8001668 <parseCommands+0x608>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	4b3c      	ldr	r3, [pc, #240]	; (8001664 <parseCommands+0x604>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	460b      	mov	r3, r1
 800157a:	493d      	ldr	r1, [pc, #244]	; (8001670 <parseCommands+0x610>)
 800157c:	4836      	ldr	r0, [pc, #216]	; (8001658 <parseCommands+0x5f8>)
 800157e:	f003 f927 	bl	80047d0 <siprintf>
		writeMsg(&USART6Comm, buffer);
 8001582:	4935      	ldr	r1, [pc, #212]	; (8001658 <parseCommands+0x5f8>)
 8001584:	4829      	ldr	r0, [pc, #164]	; (800162c <parseCommands+0x5cc>)
 8001586:	f001 ff1a 	bl	80033be <writeMsg>
}
 800158a:	e236      	b.n	80019fa <parseCommands+0x99a>
	}else if(strcmp(cmd,"configFecha") == 0){
 800158c:	4939      	ldr	r1, [pc, #228]	; (8001674 <parseCommands+0x614>)
 800158e:	4824      	ldr	r0, [pc, #144]	; (8001620 <parseCommands+0x5c0>)
 8001590:	f7fe fe26 	bl	80001e0 <strcmp>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d170      	bne.n	800167c <parseCommands+0x61c>
		if(firstParameter > 31){
 800159a:	4b22      	ldr	r3, [pc, #136]	; (8001624 <parseCommands+0x5c4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b1f      	cmp	r3, #31
 80015a0:	d902      	bls.n	80015a8 <parseCommands+0x548>
			firstParameter = 31;
 80015a2:	4b20      	ldr	r3, [pc, #128]	; (8001624 <parseCommands+0x5c4>)
 80015a4:	221f      	movs	r2, #31
 80015a6:	601a      	str	r2, [r3, #0]
		if(secondParameter > 12){
 80015a8:	4b27      	ldr	r3, [pc, #156]	; (8001648 <parseCommands+0x5e8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b0c      	cmp	r3, #12
 80015ae:	d902      	bls.n	80015b6 <parseCommands+0x556>
			secondParameter = 12;
 80015b0:	4b25      	ldr	r3, [pc, #148]	; (8001648 <parseCommands+0x5e8>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	601a      	str	r2, [r3, #0]
		if(thirdparameter < 2000 || thirdparameter > 2099){
 80015b6:	4b25      	ldr	r3, [pc, #148]	; (800164c <parseCommands+0x5ec>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80015be:	d305      	bcc.n	80015cc <parseCommands+0x56c>
 80015c0:	4b22      	ldr	r3, [pc, #136]	; (800164c <parseCommands+0x5ec>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f640 0233 	movw	r2, #2099	; 0x833
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d903      	bls.n	80015d4 <parseCommands+0x574>
			thirdparameter = 2099;
 80015cc:	4b1f      	ldr	r3, [pc, #124]	; (800164c <parseCommands+0x5ec>)
 80015ce:	f640 0233 	movw	r2, #2099	; 0x833
 80015d2:	601a      	str	r2, [r3, #0]
		handlerRTC.RTC_Days   = firstParameter;
 80015d4:	4b13      	ldr	r3, [pc, #76]	; (8001624 <parseCommands+0x5c4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <parseCommands+0x5f0>)
 80015dc:	70da      	strb	r2, [r3, #3]
		handlerRTC.RTC_Months = secondParameter;
 80015de:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <parseCommands+0x5e8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <parseCommands+0x5f0>)
 80015e6:	711a      	strb	r2, [r3, #4]
		handlerRTC.RTC_Years  = thirdparameter;
 80015e8:	4b18      	ldr	r3, [pc, #96]	; (800164c <parseCommands+0x5ec>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <parseCommands+0x5f0>)
 80015f0:	80da      	strh	r2, [r3, #6]
		rtc_Config(&handlerRTC);
 80015f2:	4817      	ldr	r0, [pc, #92]	; (8001650 <parseCommands+0x5f0>)
 80015f4:	f001 fa46 	bl	8002a84 <rtc_Config>
		sprintf(buffer,"Date %02u : %02u : %02u \n", firstParameter,secondParameter,thirdparameter);
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <parseCommands+0x5c4>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <parseCommands+0x5e8>)
 80015fe:	6819      	ldr	r1, [r3, #0]
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <parseCommands+0x5ec>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	460b      	mov	r3, r1
 8001608:	491b      	ldr	r1, [pc, #108]	; (8001678 <parseCommands+0x618>)
 800160a:	4813      	ldr	r0, [pc, #76]	; (8001658 <parseCommands+0x5f8>)
 800160c:	f003 f8e0 	bl	80047d0 <siprintf>
		writeMsg(&USART6Comm,buffer);
 8001610:	4911      	ldr	r1, [pc, #68]	; (8001658 <parseCommands+0x5f8>)
 8001612:	4806      	ldr	r0, [pc, #24]	; (800162c <parseCommands+0x5cc>)
 8001614:	f001 fed3 	bl	80033be <writeMsg>
}
 8001618:	e1ef      	b.n	80019fa <parseCommands+0x99a>
 800161a:	bf00      	nop
 800161c:	0800a198 	.word	0x0800a198
 8001620:	20003808 	.word	0x20003808
 8001624:	2000388c 	.word	0x2000388c
 8001628:	0800a1ac 	.word	0x0800a1ac
 800162c:	20000298 	.word	0x20000298
 8001630:	0800a1c0 	.word	0x0800a1c0
 8001634:	0800a1d0 	.word	0x0800a1d0
 8001638:	0800a1e0 	.word	0x0800a1e0
 800163c:	0800a1f0 	.word	0x0800a1f0
 8001640:	0800a16c 	.word	0x0800a16c
 8001644:	0800a200 	.word	0x0800a200
 8001648:	20003890 	.word	0x20003890
 800164c:	20003894 	.word	0x20003894
 8001650:	20003898 	.word	0x20003898
 8001654:	0800a20c 	.word	0x0800a20c
 8001658:	2000032c 	.word	0x2000032c
 800165c:	0800a228 	.word	0x0800a228
 8001660:	200038ac 	.word	0x200038ac
 8001664:	200038a2 	.word	0x200038a2
 8001668:	200038a3 	.word	0x200038a3
 800166c:	200038a4 	.word	0x200038a4
 8001670:	0800a238 	.word	0x0800a238
 8001674:	0800a25c 	.word	0x0800a25c
 8001678:	0800a268 	.word	0x0800a268
	}else if(strcmp(cmd,"Fecha") == 0){
 800167c:	494c      	ldr	r1, [pc, #304]	; (80017b0 <parseCommands+0x750>)
 800167e:	484d      	ldr	r0, [pc, #308]	; (80017b4 <parseCommands+0x754>)
 8001680:	f7fe fdae 	bl	80001e0 <strcmp>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d128      	bne.n	80016dc <parseCommands+0x67c>
		ptrDate = read_Date();
 800168a:	f001 fbd9 	bl	8002e40 <read_Date>
 800168e:	4603      	mov	r3, r0
 8001690:	4a49      	ldr	r2, [pc, #292]	; (80017b8 <parseCommands+0x758>)
 8001692:	6013      	str	r3, [r2, #0]
		dia  = ptrDate[0];
 8001694:	4b48      	ldr	r3, [pc, #288]	; (80017b8 <parseCommands+0x758>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	781a      	ldrb	r2, [r3, #0]
 800169a:	4b48      	ldr	r3, [pc, #288]	; (80017bc <parseCommands+0x75c>)
 800169c:	701a      	strb	r2, [r3, #0]
		mes  = ptrDate[1];
 800169e:	4b46      	ldr	r3, [pc, #280]	; (80017b8 <parseCommands+0x758>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	785a      	ldrb	r2, [r3, #1]
 80016a4:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <parseCommands+0x760>)
 80016a6:	701a      	strb	r2, [r3, #0]
		año  = ptrDate[2];
 80016a8:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <parseCommands+0x758>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	3302      	adds	r3, #2
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	4b44      	ldr	r3, [pc, #272]	; (80017c4 <parseCommands+0x764>)
 80016b4:	801a      	strh	r2, [r3, #0]
		sprintf(buffer,"Fecha actual %02u : %02u : %02u \n",dia ,mes,año);
 80016b6:	4b41      	ldr	r3, [pc, #260]	; (80017bc <parseCommands+0x75c>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	4b40      	ldr	r3, [pc, #256]	; (80017c0 <parseCommands+0x760>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	4b40      	ldr	r3, [pc, #256]	; (80017c4 <parseCommands+0x764>)
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	460b      	mov	r3, r1
 80016ca:	493f      	ldr	r1, [pc, #252]	; (80017c8 <parseCommands+0x768>)
 80016cc:	483f      	ldr	r0, [pc, #252]	; (80017cc <parseCommands+0x76c>)
 80016ce:	f003 f87f 	bl	80047d0 <siprintf>
		writeMsg(&USART6Comm,buffer);
 80016d2:	493e      	ldr	r1, [pc, #248]	; (80017cc <parseCommands+0x76c>)
 80016d4:	483e      	ldr	r0, [pc, #248]	; (80017d0 <parseCommands+0x770>)
 80016d6:	f001 fe72 	bl	80033be <writeMsg>
}
 80016da:	e18e      	b.n	80019fa <parseCommands+0x99a>
	}else if(strcmp(cmd,"init_ADC") == 0){
 80016dc:	493d      	ldr	r1, [pc, #244]	; (80017d4 <parseCommands+0x774>)
 80016de:	4835      	ldr	r0, [pc, #212]	; (80017b4 <parseCommands+0x754>)
 80016e0:	f7fe fd7e 	bl	80001e0 <strcmp>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d125      	bne.n	8001736 <parseCommands+0x6d6>
		if(adcIsComplete == 1){
 80016ea:	4b3b      	ldr	r3, [pc, #236]	; (80017d8 <parseCommands+0x778>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	f040 8183 	bne.w	80019fa <parseCommands+0x99a>
			for(uint16_t j = 0; j < 256; j++){
 80016f4:	2300      	movs	r3, #0
 80016f6:	83fb      	strh	r3, [r7, #30]
 80016f8:	e016      	b.n	8001728 <parseCommands+0x6c8>
				sprintf(buffer, "[#%d]: %u, %u\n",j, dataADCChannel0[j], dataADCChannel1[j]);
 80016fa:	8bfa      	ldrh	r2, [r7, #30]
 80016fc:	8bfb      	ldrh	r3, [r7, #30]
 80016fe:	4937      	ldr	r1, [pc, #220]	; (80017dc <parseCommands+0x77c>)
 8001700:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001704:	4618      	mov	r0, r3
 8001706:	8bfb      	ldrh	r3, [r7, #30]
 8001708:	4935      	ldr	r1, [pc, #212]	; (80017e0 <parseCommands+0x780>)
 800170a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	4603      	mov	r3, r0
 8001712:	4934      	ldr	r1, [pc, #208]	; (80017e4 <parseCommands+0x784>)
 8001714:	482d      	ldr	r0, [pc, #180]	; (80017cc <parseCommands+0x76c>)
 8001716:	f003 f85b 	bl	80047d0 <siprintf>
				writeMsg(&USART6Comm, buffer);
 800171a:	492c      	ldr	r1, [pc, #176]	; (80017cc <parseCommands+0x76c>)
 800171c:	482c      	ldr	r0, [pc, #176]	; (80017d0 <parseCommands+0x770>)
 800171e:	f001 fe4e 	bl	80033be <writeMsg>
			for(uint16_t j = 0; j < 256; j++){
 8001722:	8bfb      	ldrh	r3, [r7, #30]
 8001724:	3301      	adds	r3, #1
 8001726:	83fb      	strh	r3, [r7, #30]
 8001728:	8bfb      	ldrh	r3, [r7, #30]
 800172a:	2bff      	cmp	r3, #255	; 0xff
 800172c:	d9e5      	bls.n	80016fa <parseCommands+0x69a>
			adcIsComplete = 0;
 800172e:	4b2a      	ldr	r3, [pc, #168]	; (80017d8 <parseCommands+0x778>)
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
}
 8001734:	e161      	b.n	80019fa <parseCommands+0x99a>
	}else if(strcmp(cmd,"signal_Sampling") == 0){
 8001736:	492c      	ldr	r1, [pc, #176]	; (80017e8 <parseCommands+0x788>)
 8001738:	481e      	ldr	r0, [pc, #120]	; (80017b4 <parseCommands+0x754>)
 800173a:	f7fe fd51 	bl	80001e0 <strcmp>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d120      	bne.n	8001786 <parseCommands+0x726>
		handlerTIM3PWM_1.config.periodo = firstParameter;
 8001744:	4b29      	ldr	r3, [pc, #164]	; (80017ec <parseCommands+0x78c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	b29a      	uxth	r2, r3
 800174a:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <parseCommands+0x790>)
 800174c:	819a      	strh	r2, [r3, #12]
		if(firstParameter >= 66 && firstParameter <= 125){
 800174e:	4b27      	ldr	r3, [pc, #156]	; (80017ec <parseCommands+0x78c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b41      	cmp	r3, #65	; 0x41
 8001754:	d912      	bls.n	800177c <parseCommands+0x71c>
 8001756:	4b25      	ldr	r3, [pc, #148]	; (80017ec <parseCommands+0x78c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b7d      	cmp	r3, #125	; 0x7d
 800175c:	d80e      	bhi.n	800177c <parseCommands+0x71c>
			pwm_Config(&handlerTIM3PWM_1);
 800175e:	4824      	ldr	r0, [pc, #144]	; (80017f0 <parseCommands+0x790>)
 8001760:	f001 f836 	bl	80027d0 <pwm_Config>
			sprintf(buffer,"periodo de muestreo en microsegundos %u \n",firstParameter);
 8001764:	4b21      	ldr	r3, [pc, #132]	; (80017ec <parseCommands+0x78c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4922      	ldr	r1, [pc, #136]	; (80017f4 <parseCommands+0x794>)
 800176c:	4817      	ldr	r0, [pc, #92]	; (80017cc <parseCommands+0x76c>)
 800176e:	f003 f82f 	bl	80047d0 <siprintf>
			writeMsg(&USART6Comm, buffer);
 8001772:	4916      	ldr	r1, [pc, #88]	; (80017cc <parseCommands+0x76c>)
 8001774:	4816      	ldr	r0, [pc, #88]	; (80017d0 <parseCommands+0x770>)
 8001776:	f001 fe22 	bl	80033be <writeMsg>
}
 800177a:	e13e      	b.n	80019fa <parseCommands+0x99a>
			writeMsg(&USART6Comm, "Invalid signal_Sampling\n");
 800177c:	491e      	ldr	r1, [pc, #120]	; (80017f8 <parseCommands+0x798>)
 800177e:	4814      	ldr	r0, [pc, #80]	; (80017d0 <parseCommands+0x770>)
 8001780:	f001 fe1d 	bl	80033be <writeMsg>
}
 8001784:	e139      	b.n	80019fa <parseCommands+0x99a>
	}else if(strcmp(cmd,"muestreo") == 0){
 8001786:	491d      	ldr	r1, [pc, #116]	; (80017fc <parseCommands+0x79c>)
 8001788:	480a      	ldr	r0, [pc, #40]	; (80017b4 <parseCommands+0x754>)
 800178a:	f7fe fd29 	bl	80001e0 <strcmp>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	f040 8132 	bne.w	80019fa <parseCommands+0x99a>
		writeMsg(&USART6Comm, "Tomando muestreo.....\n");
 8001796:	491a      	ldr	r1, [pc, #104]	; (8001800 <parseCommands+0x7a0>)
 8001798:	480d      	ldr	r0, [pc, #52]	; (80017d0 <parseCommands+0x770>)
 800179a:	f001 fe10 	bl	80033be <writeMsg>
		flag = 1;
 800179e:	4b19      	ldr	r3, [pc, #100]	; (8001804 <parseCommands+0x7a4>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	701a      	strb	r2, [r3, #0]
		i2c_writeSingleRegister(&Acelerometer, POWER_CTL,45);
 80017a4:	222d      	movs	r2, #45	; 0x2d
 80017a6:	212d      	movs	r1, #45	; 0x2d
 80017a8:	4817      	ldr	r0, [pc, #92]	; (8001808 <parseCommands+0x7a8>)
 80017aa:	f000 fdd4 	bl	8002356 <i2c_writeSingleRegister>
		while(counter < 1024){
 80017ae:	e0e5      	b.n	800197c <parseCommands+0x91c>
 80017b0:	0800a284 	.word	0x0800a284
 80017b4:	20003808 	.word	0x20003808
 80017b8:	200038b0 	.word	0x200038b0
 80017bc:	200038a5 	.word	0x200038a5
 80017c0:	200038a6 	.word	0x200038a6
 80017c4:	200038a8 	.word	0x200038a8
 80017c8:	0800a28c 	.word	0x0800a28c
 80017cc:	2000032c 	.word	0x2000032c
 80017d0:	20000298 	.word	0x20000298
 80017d4:	0800a2b0 	.word	0x0800a2b0
 80017d8:	20000328 	.word	0x20000328
 80017dc:	20000370 	.word	0x20000370
 80017e0:	20000570 	.word	0x20000570
 80017e4:	0800a2bc 	.word	0x0800a2bc
 80017e8:	0800a2cc 	.word	0x0800a2cc
 80017ec:	2000388c 	.word	0x2000388c
 80017f0:	2000077c 	.word	0x2000077c
 80017f4:	0800a2dc 	.word	0x0800a2dc
 80017f8:	0800a308 	.word	0x0800a308
 80017fc:	0800a324 	.word	0x0800a324
 8001800:	0800a330 	.word	0x0800a330
 8001804:	200037b6 	.word	0x200037b6
 8001808:	200007a8 	.word	0x200007a8
			if(flag2){
 800180c:	4b82      	ldr	r3, [pc, #520]	; (8001a18 <parseCommands+0x9b8>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 80b3 	beq.w	800197c <parseCommands+0x91c>
				uint8_t AccelX_low =  i2c_readSingleRegister(&Acelerometer, ACCEL_X1_L);
 8001816:	2132      	movs	r1, #50	; 0x32
 8001818:	4880      	ldr	r0, [pc, #512]	; (8001a1c <parseCommands+0x9bc>)
 800181a:	f000 fd6b 	bl	80022f4 <i2c_readSingleRegister>
 800181e:	4603      	mov	r3, r0
 8001820:	75fb      	strb	r3, [r7, #23]
				uint8_t AccelX_high = i2c_readSingleRegister(&Acelerometer, ACCEL_X1_H);
 8001822:	2133      	movs	r1, #51	; 0x33
 8001824:	487d      	ldr	r0, [pc, #500]	; (8001a1c <parseCommands+0x9bc>)
 8001826:	f000 fd65 	bl	80022f4 <i2c_readSingleRegister>
 800182a:	4603      	mov	r3, r0
 800182c:	75bb      	strb	r3, [r7, #22]
				int16_t AccelX = AccelX_high << 8 | AccelX_low;
 800182e:	7dbb      	ldrb	r3, [r7, #22]
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	b21a      	sxth	r2, r3
 8001834:	7dfb      	ldrb	r3, [r7, #23]
 8001836:	b21b      	sxth	r3, r3
 8001838:	4313      	orrs	r3, r2
 800183a:	82bb      	strh	r3, [r7, #20]
				X_axis = AccelX * 0.0039 * 9.8;
 800183c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fe87 	bl	8000554 <__aeabi_i2d>
 8001846:	a370      	add	r3, pc, #448	; (adr r3, 8001a08 <parseCommands+0x9a8>)
 8001848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184c:	f7fe feec 	bl	8000628 <__aeabi_dmul>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	a36d      	add	r3, pc, #436	; (adr r3, 8001a10 <parseCommands+0x9b0>)
 800185a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185e:	f7fe fee3 	bl	8000628 <__aeabi_dmul>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	f7ff f9d5 	bl	8000c18 <__aeabi_d2f>
 800186e:	4603      	mov	r3, r0
 8001870:	4a6b      	ldr	r2, [pc, #428]	; (8001a20 <parseCommands+0x9c0>)
 8001872:	6013      	str	r3, [r2, #0]
				uint8_t AccelY_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Y1_L);
 8001874:	2134      	movs	r1, #52	; 0x34
 8001876:	4869      	ldr	r0, [pc, #420]	; (8001a1c <parseCommands+0x9bc>)
 8001878:	f000 fd3c 	bl	80022f4 <i2c_readSingleRegister>
 800187c:	4603      	mov	r3, r0
 800187e:	74fb      	strb	r3, [r7, #19]
				uint8_t AccelY_high = i2c_readSingleRegister(&Acelerometer,ACCEL_Y1_H);
 8001880:	2135      	movs	r1, #53	; 0x35
 8001882:	4866      	ldr	r0, [pc, #408]	; (8001a1c <parseCommands+0x9bc>)
 8001884:	f000 fd36 	bl	80022f4 <i2c_readSingleRegister>
 8001888:	4603      	mov	r3, r0
 800188a:	74bb      	strb	r3, [r7, #18]
				int16_t AccelY = AccelY_high << 8 | AccelY_low;
 800188c:	7cbb      	ldrb	r3, [r7, #18]
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	b21a      	sxth	r2, r3
 8001892:	7cfb      	ldrb	r3, [r7, #19]
 8001894:	b21b      	sxth	r3, r3
 8001896:	4313      	orrs	r3, r2
 8001898:	823b      	strh	r3, [r7, #16]
				Y_axis = AccelY * 0.0039 * 9.8;
 800189a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fe58 	bl	8000554 <__aeabi_i2d>
 80018a4:	a358      	add	r3, pc, #352	; (adr r3, 8001a08 <parseCommands+0x9a8>)
 80018a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018aa:	f7fe febd 	bl	8000628 <__aeabi_dmul>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	a356      	add	r3, pc, #344	; (adr r3, 8001a10 <parseCommands+0x9b0>)
 80018b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018bc:	f7fe feb4 	bl	8000628 <__aeabi_dmul>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	f7ff f9a6 	bl	8000c18 <__aeabi_d2f>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4a55      	ldr	r2, [pc, #340]	; (8001a24 <parseCommands+0x9c4>)
 80018d0:	6013      	str	r3, [r2, #0]
				uint8_t AccelZ_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_L);
 80018d2:	2136      	movs	r1, #54	; 0x36
 80018d4:	4851      	ldr	r0, [pc, #324]	; (8001a1c <parseCommands+0x9bc>)
 80018d6:	f000 fd0d 	bl	80022f4 <i2c_readSingleRegister>
 80018da:	4603      	mov	r3, r0
 80018dc:	73fb      	strb	r3, [r7, #15]
				uint8_t AccelZ_high = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_H);
 80018de:	2137      	movs	r1, #55	; 0x37
 80018e0:	484e      	ldr	r0, [pc, #312]	; (8001a1c <parseCommands+0x9bc>)
 80018e2:	f000 fd07 	bl	80022f4 <i2c_readSingleRegister>
 80018e6:	4603      	mov	r3, r0
 80018e8:	73bb      	strb	r3, [r7, #14]
				int16_t AccelZ = AccelZ_high << 8 | AccelZ_low;
 80018ea:	7bbb      	ldrb	r3, [r7, #14]
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	b21a      	sxth	r2, r3
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	4313      	orrs	r3, r2
 80018f6:	81bb      	strh	r3, [r7, #12]
				Z_axis = AccelZ * 0.0039 * 9.8;
 80018f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fe29 	bl	8000554 <__aeabi_i2d>
 8001902:	a341      	add	r3, pc, #260	; (adr r3, 8001a08 <parseCommands+0x9a8>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe fe8e 	bl	8000628 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	a33e      	add	r3, pc, #248	; (adr r3, 8001a10 <parseCommands+0x9b0>)
 8001916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191a:	f7fe fe85 	bl	8000628 <__aeabi_dmul>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4610      	mov	r0, r2
 8001924:	4619      	mov	r1, r3
 8001926:	f7ff f977 	bl	8000c18 <__aeabi_d2f>
 800192a:	4603      	mov	r3, r0
 800192c:	4a3e      	ldr	r2, [pc, #248]	; (8001a28 <parseCommands+0x9c8>)
 800192e:	6013      	str	r3, [r2, #0]
				X_1[counter] = X_axis;
 8001930:	4b3e      	ldr	r3, [pc, #248]	; (8001a2c <parseCommands+0x9cc>)
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	4619      	mov	r1, r3
 8001936:	4b3a      	ldr	r3, [pc, #232]	; (8001a20 <parseCommands+0x9c0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a3d      	ldr	r2, [pc, #244]	; (8001a30 <parseCommands+0x9d0>)
 800193c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			    Y_1[counter] = Y_axis;
 8001940:	4b3a      	ldr	r3, [pc, #232]	; (8001a2c <parseCommands+0x9cc>)
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	4619      	mov	r1, r3
 8001946:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <parseCommands+0x9c4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a3a      	ldr	r2, [pc, #232]	; (8001a34 <parseCommands+0x9d4>)
 800194c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				Z_1[counter] = Z_axis;
 8001950:	4b36      	ldr	r3, [pc, #216]	; (8001a2c <parseCommands+0x9cc>)
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	4619      	mov	r1, r3
 8001956:	4b34      	ldr	r3, [pc, #208]	; (8001a28 <parseCommands+0x9c8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a37      	ldr	r2, [pc, #220]	; (8001a38 <parseCommands+0x9d8>)
 800195c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				counter++;
 8001960:	4b32      	ldr	r3, [pc, #200]	; (8001a2c <parseCommands+0x9cc>)
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	3301      	adds	r3, #1
 8001966:	b29a      	uxth	r2, r3
 8001968:	4b30      	ldr	r3, [pc, #192]	; (8001a2c <parseCommands+0x9cc>)
 800196a:	801a      	strh	r2, [r3, #0]
				flag2 = 0;
 800196c:	4b2a      	ldr	r3, [pc, #168]	; (8001a18 <parseCommands+0x9b8>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
				if(counter == 1024){
 8001972:	4b2e      	ldr	r3, [pc, #184]	; (8001a2c <parseCommands+0x9cc>)
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800197a:	d006      	beq.n	800198a <parseCommands+0x92a>
		while(counter < 1024){
 800197c:	4b2b      	ldr	r3, [pc, #172]	; (8001a2c <parseCommands+0x9cc>)
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001984:	f4ff af42 	bcc.w	800180c <parseCommands+0x7ac>
 8001988:	e000      	b.n	800198c <parseCommands+0x92c>
					break;
 800198a:	bf00      	nop
		for( int i = 0 ; i < 1024; i++){
 800198c:	2300      	movs	r3, #0
 800198e:	61bb      	str	r3, [r7, #24]
 8001990:	e02b      	b.n	80019ea <parseCommands+0x98a>
			sprintf(bufferData, " AccelX = %.2f ; AccelY = %.2f ; AccelZ = %.2f \n",X_1[i],Y_1[i],Z_1[i]);
 8001992:	4a27      	ldr	r2, [pc, #156]	; (8001a30 <parseCommands+0x9d0>)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fdec 	bl	8000578 <__aeabi_f2d>
 80019a0:	4680      	mov	r8, r0
 80019a2:	4689      	mov	r9, r1
 80019a4:	4a23      	ldr	r2, [pc, #140]	; (8001a34 <parseCommands+0x9d4>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fde3 	bl	8000578 <__aeabi_f2d>
 80019b2:	4604      	mov	r4, r0
 80019b4:	460d      	mov	r5, r1
 80019b6:	4a20      	ldr	r2, [pc, #128]	; (8001a38 <parseCommands+0x9d8>)
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fdda 	bl	8000578 <__aeabi_f2d>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019cc:	e9cd 4500 	strd	r4, r5, [sp]
 80019d0:	4642      	mov	r2, r8
 80019d2:	464b      	mov	r3, r9
 80019d4:	4919      	ldr	r1, [pc, #100]	; (8001a3c <parseCommands+0x9dc>)
 80019d6:	481a      	ldr	r0, [pc, #104]	; (8001a40 <parseCommands+0x9e0>)
 80019d8:	f002 fefa 	bl	80047d0 <siprintf>
			writeMsg(&USART6Comm, bufferData);
 80019dc:	4918      	ldr	r1, [pc, #96]	; (8001a40 <parseCommands+0x9e0>)
 80019de:	4819      	ldr	r0, [pc, #100]	; (8001a44 <parseCommands+0x9e4>)
 80019e0:	f001 fced 	bl	80033be <writeMsg>
		for( int i = 0 ; i < 1024; i++){
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	3301      	adds	r3, #1
 80019e8:	61bb      	str	r3, [r7, #24]
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f0:	dbcf      	blt.n	8001992 <parseCommands+0x932>
		writeMsg(&USART6Comm, "Datos tomados correctamente \n");
 80019f2:	4915      	ldr	r1, [pc, #84]	; (8001a48 <parseCommands+0x9e8>)
 80019f4:	4813      	ldr	r0, [pc, #76]	; (8001a44 <parseCommands+0x9e4>)
 80019f6:	f001 fce2 	bl	80033be <writeMsg>
}
 80019fa:	bf00      	nop
 80019fc:	3720      	adds	r7, #32
 80019fe:	46bd      	mov	sp, r7
 8001a00:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a04:	f3af 8000 	nop.w
 8001a08:	8e8a71de 	.word	0x8e8a71de
 8001a0c:	3f6ff2e4 	.word	0x3f6ff2e4
 8001a10:	9999999a 	.word	0x9999999a
 8001a14:	40239999 	.word	0x40239999
 8001a18:	200037b7 	.word	0x200037b7
 8001a1c:	200007a8 	.word	0x200007a8
 8001a20:	200037b8 	.word	0x200037b8
 8001a24:	200037bc 	.word	0x200037bc
 8001a28:	200037c0 	.word	0x200037c0
 8001a2c:	200037b4 	.word	0x200037b4
 8001a30:	200007b4 	.word	0x200007b4
 8001a34:	200017b4 	.word	0x200017b4
 8001a38:	200027b4 	.word	0x200027b4
 8001a3c:	0800a348 	.word	0x0800a348
 8001a40:	20000000 	.word	0x20000000
 8001a44:	20000298 	.word	0x20000298
 8001a48:	0800a37c 	.word	0x0800a37c

08001a4c <BasicTimer2_Callback>:

/* Timer que gobierna el blinky del led de estado */
void BasicTimer2_Callback(void){
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
	GPIOxTooglePin (&handlerStateLED);
 8001a50:	4802      	ldr	r0, [pc, #8]	; (8001a5c <BasicTimer2_Callback+0x10>)
 8001a52:	f000 facb 	bl	8001fec <GPIOxTooglePin>
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000234 	.word	0x20000234

08001a60 <BasicTimer4_Callback>:
// Banderas para el muestreo del ADXL345.
void BasicTimer4_Callback(void){
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
if(flag){
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <BasicTimer4_Callback+0x1c>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <BasicTimer4_Callback+0x12>
	flag2 = 1;
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <BasicTimer4_Callback+0x20>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	701a      	strb	r2, [r3, #0]
}
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	200037b6 	.word	0x200037b6
 8001a80:	200037b7 	.word	0x200037b7

08001a84 <usart6Rx_Callback>:

// Callback para los comandos del USART.
void usart6Rx_Callback(void){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	rxData = getRxData();
 8001a88:	f001 fcb2 	bl	80033f0 <getRxData>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4b01      	ldr	r3, [pc, #4]	; (8001a98 <usart6Rx_Callback+0x14>)
 8001a92:	701a      	strb	r2, [r3, #0]
}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200007b0 	.word	0x200007b0

08001a9c <adcComplete_Callback>:

// Esta función controla el contador del ADC.(Hace las veces de callback)
void adcComplete_Callback(void){
 8001a9c:	b598      	push	{r3, r4, r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
	if(cont == 0){
 8001aa0:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <adcComplete_Callback+0x78>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10a      	bne.n	8001abe <adcComplete_Callback+0x22>
		dataADCChannel0[cont2] = getADC();
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <adcComplete_Callback+0x7c>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	461c      	mov	r4, r3
 8001aae:	f001 fd27 	bl	8003500 <getADC>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <adcComplete_Callback+0x80>)
 8001ab8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001abc:	e00f      	b.n	8001ade <adcComplete_Callback+0x42>
	}
	else{
		dataADCChannel1[cont2] = getADC();
 8001abe:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <adcComplete_Callback+0x7c>)
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	461c      	mov	r4, r3
 8001ac4:	f001 fd1c 	bl	8003500 <getADC>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	461a      	mov	r2, r3
 8001acc:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <adcComplete_Callback+0x84>)
 8001ace:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		cont2++;
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <adcComplete_Callback+0x7c>)
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <adcComplete_Callback+0x7c>)
 8001adc:	801a      	strh	r2, [r3, #0]
	}
	cont++;
 8001ade:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <adcComplete_Callback+0x78>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <adcComplete_Callback+0x78>)
 8001ae8:	701a      	strb	r2, [r3, #0]
	if(cont2 == 256){
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <adcComplete_Callback+0x7c>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001af2:	d105      	bne.n	8001b00 <adcComplete_Callback+0x64>
		cont2 = 0;
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <adcComplete_Callback+0x7c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	801a      	strh	r2, [r3, #0]
		adcIsComplete = 1;
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <adcComplete_Callback+0x88>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	701a      	strb	r2, [r3, #0]
	}
	if(cont == 2){
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <adcComplete_Callback+0x78>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d102      	bne.n	8001b0e <adcComplete_Callback+0x72>
		cont = 0;
 8001b08:	4b02      	ldr	r3, [pc, #8]	; (8001b14 <adcComplete_Callback+0x78>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
	}
}
 8001b0e:	bf00      	nop
 8001b10:	bd98      	pop	{r3, r4, r7, pc}
 8001b12:	bf00      	nop
 8001b14:	2000036c 	.word	0x2000036c
 8001b18:	2000036e 	.word	0x2000036e
 8001b1c:	20000370 	.word	0x20000370
 8001b20:	20000570 	.word	0x20000570
 8001b24:	20000328 	.word	0x20000328

08001b28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b28:	480d      	ldr	r0, [pc, #52]	; (8001b60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b2a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b2c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b30:	480c      	ldr	r0, [pc, #48]	; (8001b64 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b32:	490d      	ldr	r1, [pc, #52]	; (8001b68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b34:	4a0d      	ldr	r2, [pc, #52]	; (8001b6c <LoopForever+0xe>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b38:	e002      	b.n	8001b40 <LoopCopyDataInit>

08001b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3e:	3304      	adds	r3, #4

08001b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b44:	d3f9      	bcc.n	8001b3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b48:	4c0a      	ldr	r4, [pc, #40]	; (8001b74 <LoopForever+0x16>)
  movs r3, #0
 8001b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b4c:	e001      	b.n	8001b52 <LoopFillZerobss>

08001b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b50:	3204      	adds	r2, #4

08001b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b54:	d3fb      	bcc.n	8001b4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b56:	f001 ffa3 	bl	8003aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b5a:	f7ff f8e5 	bl	8000d28 <main>

08001b5e <LoopForever>:

LoopForever:
    b LoopForever
 8001b5e:	e7fe      	b.n	8001b5e <LoopForever>
  ldr   r0, =_estack
 8001b60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b68:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8001b6c:	0800a86c 	.word	0x0800a86c
  ldr r2, =_sbss
 8001b70:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8001b74:	200038f8 	.word	0x200038f8

08001b78 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b78:	e7fe      	b.n	8001b78 <BusFault_Handler>
	...

08001b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	db0b      	blt.n	8001ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	f003 021f 	and.w	r2, r3, #31
 8001b94:	4906      	ldr	r1, [pc, #24]	; (8001bb0 <__NVIC_EnableIRQ+0x34>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	095b      	lsrs	r3, r3, #5
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr
 8001bb0:	e000e100 	.word	0xe000e100

08001bb4 <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrBTimerHandler->ptrTIMx;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a4e      	ldr	r2, [pc, #312]	; (8001cfc <BasicTimer_Config+0x148>)
 8001bc2:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc4:	b672      	cpsid	i
}
 8001bc6:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();
	/* 1. Activar la señal de reloj del periférico requerido */
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd0:	d106      	bne.n	8001be0 <BasicTimer_Config+0x2c>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001bd2:	4b4b      	ldr	r3, [pc, #300]	; (8001d00 <BasicTimer_Config+0x14c>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	4a4a      	ldr	r2, [pc, #296]	; (8001d00 <BasicTimer_Config+0x14c>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bde:	e024      	b.n	8001c2a <BasicTimer_Config+0x76>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a47      	ldr	r2, [pc, #284]	; (8001d04 <BasicTimer_Config+0x150>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d106      	bne.n	8001bf8 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001bea:	4b45      	ldr	r3, [pc, #276]	; (8001d00 <BasicTimer_Config+0x14c>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	4a44      	ldr	r2, [pc, #272]	; (8001d00 <BasicTimer_Config+0x14c>)
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf6:	e018      	b.n	8001c2a <BasicTimer_Config+0x76>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a42      	ldr	r2, [pc, #264]	; (8001d08 <BasicTimer_Config+0x154>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d106      	bne.n	8001c10 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001c02:	4b3f      	ldr	r3, [pc, #252]	; (8001d00 <BasicTimer_Config+0x14c>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	4a3e      	ldr	r2, [pc, #248]	; (8001d00 <BasicTimer_Config+0x14c>)
 8001c08:	f043 0304 	orr.w	r3, r3, #4
 8001c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0e:	e00c      	b.n	8001c2a <BasicTimer_Config+0x76>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a3d      	ldr	r2, [pc, #244]	; (8001d0c <BasicTimer_Config+0x158>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d106      	bne.n	8001c28 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001c1a:	4b39      	ldr	r3, [pc, #228]	; (8001d00 <BasicTimer_Config+0x14c>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a38      	ldr	r2, [pc, #224]	; (8001d00 <BasicTimer_Config+0x14c>)
 8001c20:	f043 0308 	orr.w	r3, r3, #8
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	e000      	b.n	8001c2a <BasicTimer_Config+0x76>
	}

	else{
		__NOP();
 8001c28:	bf00      	nop
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */
	// -1 porque el contador empieza en 0
	ptrBTimerHandler->ptrTIMx-> PSC = ptrBTimerHandler ->TIMx_Config.TIMx_speed - 1;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	3a01      	subs	r2, #1
 8001c34:	629a      	str	r2, [r3, #40]	; 0x28

	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	791b      	ldrb	r3, [r3, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d112      	bne.n	8001c64 <BasicTimer_Config+0xb0>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Necesitamos poner la direccion en 0 para que cuente hacia arria TIM_CR1_DIR = 1, entonces
		// lo negamos y hacemos una AND con el valor actual.
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0210 	bic.w	r2, r2, #16
 8001c4c:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	3a01      	subs	r2, #1
 8001c58:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24
 8001c62:	e00d      	b.n	8001c80 <BasicTimer_Config+0xcc>

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		// Cuando CR1 = 1 es descendente
		ptrBTimerHandler->ptrTIMx->CR1 = TIM_CR1_DIR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2210      	movs	r2, #16
 8001c6a:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		ptrBTimerHandler-> ptrTIMx->ARR = 0;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2200      	movs	r2, #0
 8001c72:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	3a01      	subs	r2, #1
 8001c7e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	// El registro encargado de la interrupcion es el UIE

	// Modificar con el ciclo If
	ptrBTimerHandler->ptrTIMx->DIER |= ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable; //TIM_DIER_UIE
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	7c1b      	ldrb	r3, [r3, #16]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cac:	d103      	bne.n	8001cb6 <BasicTimer_Config+0x102>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8001cae:	201c      	movs	r0, #28
 8001cb0:	f7ff ff64 	bl	8001b7c <__NVIC_EnableIRQ>
 8001cb4:	e01b      	b.n	8001cee <BasicTimer_Config+0x13a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a12      	ldr	r2, [pc, #72]	; (8001d04 <BasicTimer_Config+0x150>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d103      	bne.n	8001cc8 <BasicTimer_Config+0x114>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8001cc0:	201d      	movs	r0, #29
 8001cc2:	f7ff ff5b 	bl	8001b7c <__NVIC_EnableIRQ>
 8001cc6:	e012      	b.n	8001cee <BasicTimer_Config+0x13a>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0e      	ldr	r2, [pc, #56]	; (8001d08 <BasicTimer_Config+0x154>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d103      	bne.n	8001cda <BasicTimer_Config+0x126>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8001cd2:	201e      	movs	r0, #30
 8001cd4:	f7ff ff52 	bl	8001b7c <__NVIC_EnableIRQ>
 8001cd8:	e009      	b.n	8001cee <BasicTimer_Config+0x13a>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <BasicTimer_Config+0x158>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d103      	bne.n	8001cec <BasicTimer_Config+0x138>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8001ce4:	2032      	movs	r0, #50	; 0x32
 8001ce6:	f7ff ff49 	bl	8001b7c <__NVIC_EnableIRQ>
 8001cea:	e000      	b.n	8001cee <BasicTimer_Config+0x13a>
	}

	else{
		__NOP();
 8001cec:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8001cee:	b662      	cpsie	i
}
 8001cf0:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200038b4 	.word	0x200038b4
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40000400 	.word	0x40000400
 8001d08:	40000800 	.word	0x40000800
 8001d0c:	40000c00 	.word	0x40000c00

08001d10 <BasicTimer3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer3_Callback(void){
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001d14:	bf00      	nop
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr

08001d1e <BasicTimer5_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer5_Callback(void){
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001d22:	bf00      	nop
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM2->SR &= ~TIM_SR_UIF;
 8001d30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d3a:	f023 0301 	bic.w	r3, r3, #1
 8001d3e:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer2_Callback();
 8001d40:	f7ff fe84 	bl	8001a4c <BasicTimer2_Callback>
}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM3->SR &= ~TIM_SR_UIF;
 8001d4c:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <TIM3_IRQHandler+0x18>)
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	4a03      	ldr	r2, [pc, #12]	; (8001d60 <TIM3_IRQHandler+0x18>)
 8001d52:	f023 0301 	bic.w	r3, r3, #1
 8001d56:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer3_Callback();
 8001d58:	f7ff ffda 	bl	8001d10 <BasicTimer3_Callback>
}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40000400 	.word	0x40000400

08001d64 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM4->SR &= ~TIM_SR_UIF;
 8001d68:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <TIM4_IRQHandler+0x18>)
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	4a03      	ldr	r2, [pc, #12]	; (8001d7c <TIM4_IRQHandler+0x18>)
 8001d6e:	f023 0301 	bic.w	r3, r3, #1
 8001d72:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer4_Callback();
 8001d74:	f7ff fe74 	bl	8001a60 <BasicTimer4_Callback>
}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40000800 	.word	0x40000800

08001d80 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM5->SR &= ~TIM_SR_UIF;
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <TIM5_IRQHandler+0x18>)
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	4a03      	ldr	r2, [pc, #12]	; (8001d98 <TIM5_IRQHandler+0x18>)
 8001d8a:	f023 0301 	bic.w	r3, r3, #1
 8001d8e:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer5_Callback();
 8001d90:	f7ff ffc5 	bl	8001d1e <BasicTimer5_Callback>
}
 8001d94:	bf00      	nop
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40000c00 	.word	0x40000c00

08001d9c <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemento "activar el periferico o activar la señal de reloj del periferico)
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60bb      	str	r3, [r7, #8]

	// 1)Activar el periferico
	//verificamos para GPIOA
	if(pGPIOHandler->pGPIOx == GPIOA){
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a87      	ldr	r2, [pc, #540]	; (8001fd0 <GPIO_Config+0x234>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d106      	bne.n	8001dc4 <GPIO_Config+0x28>
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 8001db6:	4b87      	ldr	r3, [pc, #540]	; (8001fd4 <GPIO_Config+0x238>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a86      	ldr	r2, [pc, #536]	; (8001fd4 <GPIO_Config+0x238>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	e03a      	b.n	8001e3a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx == GPIOB){
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a83      	ldr	r2, [pc, #524]	; (8001fd8 <GPIO_Config+0x23c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d106      	bne.n	8001ddc <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 8001dce:	4b81      	ldr	r3, [pc, #516]	; (8001fd4 <GPIO_Config+0x238>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a80      	ldr	r2, [pc, #512]	; (8001fd4 <GPIO_Config+0x238>)
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	e02e      	b.n	8001e3a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if(pGPIOHandler->pGPIOx == GPIOC){
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a7e      	ldr	r2, [pc, #504]	; (8001fdc <GPIO_Config+0x240>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d106      	bne.n	8001df4 <GPIO_Config+0x58>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 8001de6:	4b7b      	ldr	r3, [pc, #492]	; (8001fd4 <GPIO_Config+0x238>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a7a      	ldr	r2, [pc, #488]	; (8001fd4 <GPIO_Config+0x238>)
 8001dec:	f043 0304 	orr.w	r3, r3, #4
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	e022      	b.n	8001e3a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if(pGPIOHandler->pGPIOx == GPIOD){
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a79      	ldr	r2, [pc, #484]	; (8001fe0 <GPIO_Config+0x244>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d106      	bne.n	8001e0c <GPIO_Config+0x70>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 8001dfe:	4b75      	ldr	r3, [pc, #468]	; (8001fd4 <GPIO_Config+0x238>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a74      	ldr	r2, [pc, #464]	; (8001fd4 <GPIO_Config+0x238>)
 8001e04:	f043 0308 	orr.w	r3, r3, #8
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	e016      	b.n	8001e3a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if(pGPIOHandler->pGPIOx == GPIOE){
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a74      	ldr	r2, [pc, #464]	; (8001fe4 <GPIO_Config+0x248>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d106      	bne.n	8001e24 <GPIO_Config+0x88>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 8001e16:	4b6f      	ldr	r3, [pc, #444]	; (8001fd4 <GPIO_Config+0x238>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a6e      	ldr	r2, [pc, #440]	; (8001fd4 <GPIO_Config+0x238>)
 8001e1c:	f043 0310 	orr.w	r3, r3, #16
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	e00a      	b.n	8001e3a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOH
	else if(pGPIOHandler->pGPIOx == GPIOH){
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a6f      	ldr	r2, [pc, #444]	; (8001fe8 <GPIO_Config+0x24c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d105      	bne.n	8001e3a <GPIO_Config+0x9e>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 8001e2e:	4b69      	ldr	r3, [pc, #420]	; (8001fd4 <GPIO_Config+0x238>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a68      	ldr	r2, [pc, #416]	; (8001fd4 <GPIO_Config+0x238>)
 8001e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
	// Despues de activado, podemos comenzar a configurar.

	// 2) COnfigurando el registro GPIOx_MODER
	// Acá estamos leyendo config, moviendo "PinNumber" veces hacia la izquierda
	// ese valor (shift left) y todo eso lo cargamos en la variable auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	795b      	ldrb	r3, [r3, #5]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	791b      	ldrb	r3, [r3, #4]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	60fb      	str	r3, [r7, #12]
	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro
	 * (debemos escribir 0b00) para lo cual aplicamos una mascara y una operación de
	 * bitwise AND
	 */
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	791b      	ldrb	r3, [r3, #4]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	2103      	movs	r1, #3
 8001e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	4619      	mov	r1, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	400a      	ands	r2, r1
 8001e68:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6819      	ldr	r1, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	7a1b      	ldrb	r3, [r3, #8]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	791b      	ldrb	r3, [r3, #4]
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	791b      	ldrb	r3, [r3, #4]
 8001e94:	4619      	mov	r1, r3
 8001e96:	2301      	movs	r3, #1
 8001e98:	408b      	lsls	r3, r1
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	400a      	ands	r2, r1
 8001ea4:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6859      	ldr	r1, [r3, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	799b      	ldrb	r3, [r3, #6]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	791b      	ldrb	r3, [r3, #4]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0B11 << 2 *pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	791b      	ldrb	r3, [r3, #4]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	2103      	movs	r1, #3
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	4619      	mov	r1, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	400a      	ands	r2, r1
 8001ee4:	609a      	str	r2, [r3, #8]

	//cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6899      	ldr	r1, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull up pull down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	79db      	ldrb	r3, [r3, #7]
 8001efa:	461a      	mov	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	791b      	ldrb	r3, [r3, #4]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	791b      	ldrb	r3, [r3, #4]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	2103      	movs	r1, #3
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	400a      	ands	r2, r1
 8001f24:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68d9      	ldr	r1, [r3, #12]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas.. se vera luego
	if (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	795b      	ldrb	r3, [r3, #5]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d143      	bne.n	8001fc6 <GPIO_Config+0x22a>

		//Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	791b      	ldrb	r3, [r3, #4]
 8001f42:	2b07      	cmp	r3, #7
 8001f44:	d81f      	bhi.n	8001f86 <GPIO_Config+0x1ea>
			//Estamos en el registro AGRL, que controla los piner del pIN_0 AL PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	791b      	ldrb	r3, [r3, #4]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del tegistro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6a1a      	ldr	r2, [r3, #32]
 8001f54:	210f      	movs	r1, #15
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	4619      	mov	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	400a      	ands	r2, r1
 8001f66:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor confiurado en la posicon seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6a1a      	ldr	r2, [r3, #32]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	7a5b      	ldrb	r3, [r3, #9]
 8001f72:	4619      	mov	r1, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} //Fin del GPIO_Config
 8001f84:	e01f      	b.n	8001fc6 <GPIO_Config+0x22a>
			auxPosition = 4* (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber -8);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	791b      	ldrb	r3, [r3, #4]
 8001f8a:	3b08      	subs	r3, #8
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f96:	210f      	movs	r1, #15
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	400a      	ands	r2, r1
 8001fa8:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	7a5b      	ldrb	r3, [r3, #9]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	625a      	str	r2, [r3, #36]	; 0x24
} //Fin del GPIO_Config
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	40020000 	.word	0x40020000
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40020400 	.word	0x40020400
 8001fdc:	40020800 	.word	0x40020800
 8001fe0:	40020c00 	.word	0x40020c00
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40021c00 	.word	0x40021c00

08001fec <GPIOxTooglePin>:
	pinValue &= mask;

	return pinValue;
}

void GPIOxTooglePin(GPIO_Handler_t *pPinHandler){
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR ^= (SET <<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695a      	ldr	r2, [r3, #20]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	791b      	ldrb	r3, [r3, #4]
 8001ffe:	4619      	mov	r1, r3
 8002000:	2301      	movs	r3, #1
 8002002:	408b      	lsls	r3, r1
 8002004:	4619      	mov	r1, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	404a      	eors	r2, r1
 800200c:	615a      	str	r2, [r3, #20]
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <i2c_config>:
 *
 * Además, estos pines deben ser configurados como salidas open-drain y con las
 * resistencias en modo pull-up..
 */

void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	/* 1. Activamos la señal de reloj para el modulo I2C seleccionado */
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a45      	ldr	r2, [pc, #276]	; (800213c <i2c_config+0x124>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d106      	bne.n	8002038 <i2c_config+0x20>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800202a:	4b45      	ldr	r3, [pc, #276]	; (8002140 <i2c_config+0x128>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	4a44      	ldr	r2, [pc, #272]	; (8002140 <i2c_config+0x128>)
 8002030:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002034:	6413      	str	r3, [r2, #64]	; 0x40
 8002036:	e016      	b.n	8002066 <i2c_config+0x4e>
	}
	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a41      	ldr	r2, [pc, #260]	; (8002144 <i2c_config+0x12c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d106      	bne.n	8002050 <i2c_config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8002042:	4b3f      	ldr	r3, [pc, #252]	; (8002140 <i2c_config+0x128>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	4a3e      	ldr	r2, [pc, #248]	; (8002140 <i2c_config+0x128>)
 8002048:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800204c:	6413      	str	r3, [r2, #64]	; 0x40
 800204e:	e00a      	b.n	8002066 <i2c_config+0x4e>
	}
	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a3c      	ldr	r2, [pc, #240]	; (8002148 <i2c_config+0x130>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d105      	bne.n	8002066 <i2c_config+0x4e>
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 800205a:	4b39      	ldr	r3, [pc, #228]	; (8002140 <i2c_config+0x128>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	4a38      	ldr	r2, [pc, #224]	; (8002140 <i2c_config+0x128>)
 8002060:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002064:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002074:	601a      	str	r2, [r3, #0]
	__NOP();
 8002076:	bf00      	nop
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_SWRST;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002086:	601a      	str	r2, [r3, #0]

	/* 3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C
	 */
	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos); // Borramos la configuración previa
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002096:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_100_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);// Seleccionamos 80 MHz
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 80020a6:	605a      	str	r2, [r3, #4]
	/* 4. Configuramos el modo I2C en el que el sistema funciona
	 * En esta configuración se incluye también la configuración del reloj
	 * y el tiempo maximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los registros en 0
	 */
	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2200      	movs	r2, #0
 80020ae:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2200      	movs	r2, #0
 80020b6:	621a      	str	r2, [r3, #32]

	if (ptrHandlerI2C->modeI2C == I2C_MODE_SM){
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	795b      	ldrb	r3, [r3, #5]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d118      	bne.n	80020f2 <i2c_config+0xda>
		// Estamos en modo "standar" (SM mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~I2C_CCR_FS;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	69da      	ldr	r2, [r3, #28]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020ce:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que se encarga de generar la señal del reloj
		ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_SM_SPEED_100KHz << I2C_CCR_CCR_Pos);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	69da      	ldr	r2, [r3, #28]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
 80020de:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que controla el tiempo T-Rise maximo
		ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6a1a      	ldr	r2, [r3, #32]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 80020ee:	621a      	str	r2, [r3, #32]
 80020f0:	e017      	b.n	8002122 <i2c_config+0x10a>
	}
	else{
		// Estamos en modo "fast" (FM mode)
		// Seleccionamos el modo fast
		ptrHandlerI2C->ptrI2Cx->CCR &= I2C_CCR_FS;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	69da      	ldr	r2, [r3, #28]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002100:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que se encarga de generar la señal del reloj
		ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz << I2C_CCR_CCR_Pos);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	69da      	ldr	r2, [r3, #28]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 8002110:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que controla el tiempo T-Rise maximo
		ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6a1a      	ldr	r2, [r3, #32]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f042 020f 	orr.w	r2, r2, #15
 8002120:	621a      	str	r2, [r3, #32]
	}

	/* 5. Activamos el modulo I2C
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 0201 	orr.w	r2, r2, #1
 8002130:	601a      	str	r2, [r3, #0]
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr
 800213c:	40005400 	.word	0x40005400
 8002140:	40023800 	.word	0x40023800
 8002144:	40005800 	.word	0x40005800
 8002148:	40005c00 	.word	0x40005c00

0800214c <i2c_stopTransaction>:

/* 8. Generamos la condición de stop
 */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	/* 7. Generamos la condición de stop
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002162:	601a      	str	r2, [r3, #0]
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr

0800216e <i2c_startTransaction>:
/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_CR2
 * 2. Generamos la señal de "start"
 * 2a. Esperamos a que la bandera del evento "start" se levante.
 * Mientras esperamos, el valor de SB es 0, entonces la negación (!) es 1
 */
void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_CR2
	 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8002176:	e000      	b.n	800217a <i2c_startTransaction+0xc>
		__NOP();
 8002178:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1f7      	bne.n	8002178 <i2c_startTransaction+0xa>
	}

	/* 2. Generamos la señal de "start"
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002196:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante.
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8002198:	e000      	b.n	800219c <i2c_startTransaction+0x2e>
		__NOP();
 800219a:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f7      	beq.n	800219a <i2c_startTransaction+0x2c>
	}
}
 80021aa:	bf00      	nop
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr

080021b6 <i2c_reStartTransaction>:

/*
 */
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
	/* 2. Generamos la señal de "start"
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021cc:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante.
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80021ce:	e000      	b.n	80021d2 <i2c_reStartTransaction+0x1c>
		__NOP();
 80021d0:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f7      	beq.n	80021d0 <i2c_reStartTransaction+0x1a>
	}
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr

080021ec <i2c_sendNoAck>:

/* 7a. Activamos la indicación para no-ACK (indicación para el Slave de terminar)
 */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
	/* Debemos escribir cero en la posición ACK del registro de control 1
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_ACK;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002202:	601a      	str	r2, [r3, #0]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr

0800220e <i2c_sendSlaveAddressRW>:
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 800220e:	b480      	push	{r7}
 8002210:	b085      	sub	sp, #20
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	460b      	mov	r3, r1
 8002218:	70fb      	strb	r3, [r7, #3]
 800221a:	4613      	mov	r3, r2
 800221c:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar
	 */
	uint8_t auxByte = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la dirección del Slave y el bit que indica que deseamos escribir un (0)
	 * (en el siguiente paso se envía la dirección de memoria que se desea escribir)
	 */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	005a      	lsls	r2, r3, #1
 8002226:	78bb      	ldrb	r3, [r7, #2]
 8002228:	431a      	orrs	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bandera del evento "addr" se levante
	 * (esto nos indica que la dirección fue enviada satisfactoriamente)
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8002230:	e000      	b.n	8002234 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 8002232:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f7      	beq.n	8002232 <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepción de ACK de la "addr",
	 * para lo cual debemos leer en secuencia primero el I2C_SR1 y luego el I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	73fb      	strb	r3, [r7, #15]
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	70fb      	strb	r3, [r7, #3]
	/* 4. Enviamos la dirección de memoria que deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	611a      	str	r2, [r3, #16]

	/* 4.1 Esperamos hasta que el byte sea transmitido
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8002270:	e000      	b.n	8002274 <i2c_sendMemoryAddress+0x18>
		__NOP();
 8002272:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f7      	beq.n	8002272 <i2c_sendMemoryAddress+0x16>
	}
}
 8002282:	bf00      	nop
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr

0800228e <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	460b      	mov	r3, r1
 8002298:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	78fa      	ldrb	r2, [r7, #3]
 80022a0:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 80022a2:	e000      	b.n	80022a6 <i2c_sendDataByte+0x18>
		__NOP();
 80022a4:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f7      	beq.n	80022a4 <i2c_sendDataByte+0x16>
	}
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr

080022c0 <i2c_readDataByte>:

/**/
uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	/* 9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 80022c8:	e000      	b.n	80022cc <i2c_readDataByte+0xc>
		__NOP();
 80022ca:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f7      	beq.n	80022ca <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->dataI2C;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	799b      	ldrb	r3, [r3, #6]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr

080022f4 <i2c_readSingleRegister>:

/**/
uint8_t i2c_readSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead){
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	70fb      	strb	r3, [r7, #3]
	/* 0. Creamos una variable auxiliar para recibir el dato que leemos */
	uint8_t auxRead = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	73fb      	strb	r3, [r7, #15]

	/* 1. Generamos la condición de start */
	i2c_startTransaction(ptrHandlerI2C);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff ff32 	bl	800216e <i2c_startTransaction>

	/* 2. Enviamos la dirección del esclavo y la indicación de ESCRIBIR */
	i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	791b      	ldrb	r3, [r3, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	4619      	mov	r1, r3
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff ff7b 	bl	800220e <i2c_sendSlaveAddressRW>

	/* 3. Enviamos la dirección de memoria que deseamos leer */
	i2c_sendMemoryAddress(ptrHandlerI2C, regToRead);
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	4619      	mov	r1, r3
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff ff9d 	bl	800225c <i2c_sendMemoryAddress>

	/* 4. Creamos una condición de reStart */
	i2c_reStartTransaction(ptrHandlerI2C);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff ff47 	bl	80021b6 <i2c_reStartTransaction>

	/* 5. Enviamos la dirección del esclavo y la indicación de LEER */
	i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_READ_DATA);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	791b      	ldrb	r3, [r3, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	4619      	mov	r1, r3
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7ff ff6c 	bl	800220e <i2c_sendSlaveAddressRW>

	/* 6. Generamos la condición de NoACK, para que el master no funciona y el slave solo envie 1 byte */
	i2c_sendNoAck(ptrHandlerI2C);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ff58 	bl	80021ec <i2c_sendNoAck>

	/* 7. Generamos la señal de Stop, para que el slave se detenga después de 1 byte*/
	i2c_stopTransaction(ptrHandlerI2C);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff05 	bl	800214c <i2c_stopTransaction>

	/* 8. Leemos el dato que envia el esclavo */
	auxRead = i2c_readDataByte(ptrHandlerI2C);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff ffbc 	bl	80022c0 <i2c_readDataByte>
 8002348:	4603      	mov	r3, r0
 800234a:	73fb      	strb	r3, [r7, #15]

	return auxRead;
 800234c:	7bfb      	ldrb	r3, [r7, #15]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <i2c_writeSingleRegister>:

/**/
void i2c_writeSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead, uint8_t newValue){
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	460b      	mov	r3, r1
 8002360:	70fb      	strb	r3, [r7, #3]
 8002362:	4613      	mov	r3, r2
 8002364:	70bb      	strb	r3, [r7, #2]

	/* 1. Generamos la condición de Start*/
	i2c_startTransaction(ptrHandlerI2C);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff ff01 	bl	800216e <i2c_startTransaction>

	/* 2. Enviamos la diracción del esclavo y la indicación de ESCRIBIR */
	i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	791b      	ldrb	r3, [r3, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	4619      	mov	r1, r3
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff ff4a 	bl	800220e <i2c_sendSlaveAddressRW>

	/* 3. Enviamos la dirección de memoria que deseamos escribir*/
	i2c_sendMemoryAddress(ptrHandlerI2C, regToRead);
 800237a:	78fb      	ldrb	r3, [r7, #3]
 800237c:	4619      	mov	r1, r3
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff ff6c 	bl	800225c <i2c_sendMemoryAddress>

	/* 4. Enviamos el valor que deseamos escribir */
	i2c_sendDataByte(ptrHandlerI2C, newValue);
 8002384:	78bb      	ldrb	r3, [r7, #2]
 8002386:	4619      	mov	r1, r3
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ff80 	bl	800228e <i2c_sendDataByte>

	/* 5. Generamos la condición de Stop, para que el slave se detenga después de un byte */
	i2c_stopTransaction(ptrHandlerI2C);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff fedc 	bl	800214c <i2c_stopTransaction>
}
 8002394:	bf00      	nop
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <PLL_Config>:
#include "PLLDriver.h"

uint32_t HSI_VALUE = 16000000;


void PLL_Config(PLL_Handler_t *ptrPLLHandler){
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]

	// Se selecciona HSI como reloj interno del PLL en vez de un oscilador.
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC);
 80023a4:	4b64      	ldr	r3, [pc, #400]	; (8002538 <PLL_Config+0x19c>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	4a63      	ldr	r2, [pc, #396]	; (8002538 <PLL_Config+0x19c>)
 80023aa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80023ae:	6053      	str	r3, [r2, #4]

	// Se observa el valor del HSI RDY.
	while( !(RCC->CR & RCC_CR_HSIRDY) );
 80023b0:	bf00      	nop
 80023b2:	4b61      	ldr	r3, [pc, #388]	; (8002538 <PLL_Config+0x19c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f9      	beq.n	80023b2 <PLL_Config+0x16>

	// Se inicializa el power enable clock del APB1.
	RCC->APB1ENR |= RCC_APB1RSTR_PWRRST;
 80023be:	4b5e      	ldr	r3, [pc, #376]	; (8002538 <PLL_Config+0x19c>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	4a5d      	ldr	r2, [pc, #372]	; (8002538 <PLL_Config+0x19c>)
 80023c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c8:	6413      	str	r3, [r2, #64]	; 0x40


	// Estas líneas adecúan el acceso a la memoria del microcontrolador
	// para comenzar a ejecutar las instrucciones. Ver ACR.
	FLASH->ACR |= 1<<8;
 80023ca:	4b5c      	ldr	r3, [pc, #368]	; (800253c <PLL_Config+0x1a0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a5b      	ldr	r2, [pc, #364]	; (800253c <PLL_Config+0x1a0>)
 80023d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d4:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= 1<<9;
 80023d6:	4b59      	ldr	r3, [pc, #356]	; (800253c <PLL_Config+0x1a0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a58      	ldr	r2, [pc, #352]	; (800253c <PLL_Config+0x1a0>)
 80023dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023e0:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= 1<<10;
 80023e2:	4b56      	ldr	r3, [pc, #344]	; (800253c <PLL_Config+0x1a0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a55      	ldr	r2, [pc, #340]	; (800253c <PLL_Config+0x1a0>)
 80023e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ec:	6013      	str	r3, [r2, #0]
	 *  los voltajes de las distintas frecuencias que pueden llegar a configurarse.
	 *  Además, deben establecerse diferentes tiempos de espera para cada rango.
	 */

	// Voltajes para las frecuencias dentro de un rango máximo de 64 MHz.
	if(ptrPLLHandler->PLL_Config.PLL_voltage == VOLTAGE_64MHZ){
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10c      	bne.n	8002410 <PLL_Config+0x74>
		// Se toma 0 en el bit 15 y 1 en el bit 14 del PWR para la potencia.
		PWR->CR |= 01<<14;
 80023f6:	4b52      	ldr	r3, [pc, #328]	; (8002540 <PLL_Config+0x1a4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a51      	ldr	r2, [pc, #324]	; (8002540 <PLL_Config+0x1a4>)
 80023fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002400:	6013      	str	r3, [r2, #0]

		// Se configura el tiempo de espera.
		FLASH->ACR |= 1<<0;
 8002402:	4b4e      	ldr	r3, [pc, #312]	; (800253c <PLL_Config+0x1a0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a4d      	ldr	r2, [pc, #308]	; (800253c <PLL_Config+0x1a0>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e02d      	b.n	800246c <PLL_Config+0xd0>
	}
	else if(ptrPLLHandler->PLL_Config.PLL_voltage == VOLTAGE_84MHZ){
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d10c      	bne.n	8002432 <PLL_Config+0x96>
		// Se toma 1 en el bit 15 y 0 en el bit 14 del PWR para la potencia.
		PWR->CR |= 10<<14;
 8002418:	4b49      	ldr	r3, [pc, #292]	; (8002540 <PLL_Config+0x1a4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a48      	ldr	r2, [pc, #288]	; (8002540 <PLL_Config+0x1a4>)
 800241e:	f443 3320 	orr.w	r3, r3, #163840	; 0x28000
 8002422:	6013      	str	r3, [r2, #0]

		// Se configura el tiempo de espera.
		FLASH->ACR |= 3<<0;
 8002424:	4b45      	ldr	r3, [pc, #276]	; (800253c <PLL_Config+0x1a0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a44      	ldr	r2, [pc, #272]	; (800253c <PLL_Config+0x1a0>)
 800242a:	f043 0303 	orr.w	r3, r3, #3
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	e01c      	b.n	800246c <PLL_Config+0xd0>
	}
	else if(ptrPLLHandler->PLL_Config.PLL_voltage == VOLTAGE_100MHZ){
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d10c      	bne.n	8002454 <PLL_Config+0xb8>
		// Se toma 1 en el bit 15 y 1 en el bit 14 del PWR para la potencia.
		PWR->CR |= 11<<14;
 800243a:	4b41      	ldr	r3, [pc, #260]	; (8002540 <PLL_Config+0x1a4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a40      	ldr	r2, [pc, #256]	; (8002540 <PLL_Config+0x1a4>)
 8002440:	f443 3330 	orr.w	r3, r3, #180224	; 0x2c000
 8002444:	6013      	str	r3, [r2, #0]

		// Se configura el tiempo de espera.
		FLASH->ACR |= 5<<0;
 8002446:	4b3d      	ldr	r3, [pc, #244]	; (800253c <PLL_Config+0x1a0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a3c      	ldr	r2, [pc, #240]	; (800253c <PLL_Config+0x1a0>)
 800244c:	f043 0305 	orr.w	r3, r3, #5
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	e00b      	b.n	800246c <PLL_Config+0xd0>
	}
	else{
		// Implementamos la máxima frecuencia para el caso por defecto.
		PWR->CR |= 11<<14;
 8002454:	4b3a      	ldr	r3, [pc, #232]	; (8002540 <PLL_Config+0x1a4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a39      	ldr	r2, [pc, #228]	; (8002540 <PLL_Config+0x1a4>)
 800245a:	f443 3330 	orr.w	r3, r3, #180224	; 0x2c000
 800245e:	6013      	str	r3, [r2, #0]

		// Tiempo de espera.
		FLASH->ACR |= 5<<0;
 8002460:	4b36      	ldr	r3, [pc, #216]	; (800253c <PLL_Config+0x1a0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a35      	ldr	r2, [pc, #212]	; (800253c <PLL_Config+0x1a0>)
 8002466:	f043 0305 	orr.w	r3, r3, #5
 800246a:	6013      	str	r3, [r2, #0]
	}

	/*
	 * El preescaler null debe ser 1 para conseguir la máxima salida de frecuencia.
	 */
	RCC->CFGR |= 0001<<4;
 800246c:	4b32      	ldr	r3, [pc, #200]	; (8002538 <PLL_Config+0x19c>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4a31      	ldr	r2, [pc, #196]	; (8002538 <PLL_Config+0x19c>)
 8002472:	f043 0310 	orr.w	r3, r3, #16
 8002476:	6093      	str	r3, [r2, #8]
	 * a 80 MHz que se encuentra evidentemente en un intervalo superior a este valor,
	 * se decide no incluir el primer preescaler que divide en 1 la frecuencia que se
	 * quiere implementar, sino comenzar con la división en 2,4,8,16...
	 */
	// Se divide en 2 el bus 1.
	RCC->CFGR |= (RCC_CFGR_PPRE1_DIV2);
 8002478:	4b2f      	ldr	r3, [pc, #188]	; (8002538 <PLL_Config+0x19c>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	4a2e      	ldr	r2, [pc, #184]	; (8002538 <PLL_Config+0x19c>)
 800247e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002482:	6093      	str	r3, [r2, #8]
	 * a 80 MHz, esta frecuencia se encuentra cómodamente ubicada antes de la
	 * frecuencia máxima del bus de datos, por tanto, el preescaler 0 que mantiene
	 * la frecuencia original, puede implementarse, dividiendo en 1.
	 */
	// Se divide en 1 el bus 2.
	RCC->CFGR |= (RCC_CFGR_PPRE2_DIV1);
 8002484:	4b2c      	ldr	r3, [pc, #176]	; (8002538 <PLL_Config+0x19c>)
 8002486:	4a2c      	ldr	r2, [pc, #176]	; (8002538 <PLL_Config+0x19c>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	6093      	str	r3, [r2, #8]

// Se debe configurar el sistema de manera que cuando la entrada del HSI
// sean 80 MHz, se mantenga.
	// La fuente de reloj del micro se configura sobre el HSI,
	RCC->PLLCFGR |= (0 << 22);
 800248c:	4b2a      	ldr	r3, [pc, #168]	; (8002538 <PLL_Config+0x19c>)
 800248e:	4a2a      	ldr	r2, [pc, #168]	; (8002538 <PLL_Config+0x19c>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	6053      	str	r3, [r2, #4]

	// Se divide la entrada de frecuencia en 8, para obtener 2 MHz.
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM_4);
 8002494:	4b28      	ldr	r3, [pc, #160]	; (8002538 <PLL_Config+0x19c>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	4a27      	ldr	r2, [pc, #156]	; (8002538 <PLL_Config+0x19c>)
 800249a:	f023 0310 	bic.w	r3, r3, #16
 800249e:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLM_3);
 80024a0:	4b25      	ldr	r3, [pc, #148]	; (8002538 <PLL_Config+0x19c>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4a24      	ldr	r2, [pc, #144]	; (8002538 <PLL_Config+0x19c>)
 80024a6:	f043 0308 	orr.w	r3, r3, #8
 80024aa:	6053      	str	r3, [r2, #4]

	// Se aplica una máscara un poco rudimentaria para garantizar la limpieza del
	// del registro.
	RCC->PLLCFGR &= 0b1111111111111000000000111111;
 80024ac:	4b22      	ldr	r3, [pc, #136]	; (8002538 <PLL_Config+0x19c>)
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	4921      	ldr	r1, [pc, #132]	; (8002538 <PLL_Config+0x19c>)
 80024b2:	4b24      	ldr	r3, [pc, #144]	; (8002544 <PLL_Config+0x1a8>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	604b      	str	r3, [r1, #4]
	// Se ecriben los diferentes valores de las frecuencias que se quieren multiplicar.
	/* NOTE que aquí es donde se escriben cada una de las frecuencias dentro del
	 * registro de 9 bits que se tiene dentro del registro PLLCFGR del RCC qur se deciden
	 * aleatoriamente a gusto del usuario dentro del intervalo de voltaje escogido.
	 */
	if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_80MHZ){
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	785b      	ldrb	r3, [r3, #1]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d10c      	bne.n	80024da <PLL_Config+0x13e>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_4);
 80024c0:	4b1d      	ldr	r3, [pc, #116]	; (8002538 <PLL_Config+0x19c>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	4a1c      	ldr	r2, [pc, #112]	; (8002538 <PLL_Config+0x19c>)
 80024c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ca:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 80024cc:	4b1a      	ldr	r3, [pc, #104]	; (8002538 <PLL_Config+0x19c>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4a19      	ldr	r2, [pc, #100]	; (8002538 <PLL_Config+0x19c>)
 80024d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024d6:	6053      	str	r3, [r2, #4]
 80024d8:	e046      	b.n	8002568 <PLL_Config+0x1cc>
	}else if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_100MHZ){
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	785b      	ldrb	r3, [r3, #1]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d112      	bne.n	8002508 <PLL_Config+0x16c>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_2);
 80024e2:	4b15      	ldr	r3, [pc, #84]	; (8002538 <PLL_Config+0x19c>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	4a14      	ldr	r2, [pc, #80]	; (8002538 <PLL_Config+0x19c>)
 80024e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ec:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_5);
 80024ee:	4b12      	ldr	r3, [pc, #72]	; (8002538 <PLL_Config+0x19c>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	4a11      	ldr	r2, [pc, #68]	; (8002538 <PLL_Config+0x19c>)
 80024f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024f8:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 80024fa:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <PLL_Config+0x19c>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	4a0e      	ldr	r2, [pc, #56]	; (8002538 <PLL_Config+0x19c>)
 8002500:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002504:	6053      	str	r3, [r2, #4]
 8002506:	e02f      	b.n	8002568 <PLL_Config+0x1cc>
	}else if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_70MHZ){
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	785b      	ldrb	r3, [r3, #1]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d11b      	bne.n	8002548 <PLL_Config+0x1ac>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_1);
 8002510:	4b09      	ldr	r3, [pc, #36]	; (8002538 <PLL_Config+0x19c>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4a08      	ldr	r2, [pc, #32]	; (8002538 <PLL_Config+0x19c>)
 8002516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800251a:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_2);
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <PLL_Config+0x19c>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	4a05      	ldr	r2, [pc, #20]	; (8002538 <PLL_Config+0x19c>)
 8002522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002526:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 8002528:	4b03      	ldr	r3, [pc, #12]	; (8002538 <PLL_Config+0x19c>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4a02      	ldr	r2, [pc, #8]	; (8002538 <PLL_Config+0x19c>)
 800252e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002532:	6053      	str	r3, [r2, #4]
 8002534:	e018      	b.n	8002568 <PLL_Config+0x1cc>
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800
 800253c:	40023c00 	.word	0x40023c00
 8002540:	40007000 	.word	0x40007000
 8002544:	0fff803f 	.word	0x0fff803f
	}else if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_65MHZ){
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	785b      	ldrb	r3, [r3, #1]
 800254c:	2b03      	cmp	r3, #3
 800254e:	d10b      	bne.n	8002568 <PLL_Config+0x1cc>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_0);
 8002550:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <PLL_Config+0x274>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	4a2e      	ldr	r2, [pc, #184]	; (8002610 <PLL_Config+0x274>)
 8002556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800255a:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 800255c:	4b2c      	ldr	r3, [pc, #176]	; (8002610 <PLL_Config+0x274>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	4a2b      	ldr	r2, [pc, #172]	; (8002610 <PLL_Config+0x274>)
 8002562:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002566:	6053      	str	r3, [r2, #4]
	}
	// Se escoge como factor de reloj principal PLLP el número dos para obtener
	// la salida deseada en cada caso.
	RCC->PLLCFGR |= (00 << 16);
 8002568:	4b29      	ldr	r3, [pc, #164]	; (8002610 <PLL_Config+0x274>)
 800256a:	4a29      	ldr	r2, [pc, #164]	; (8002610 <PLL_Config+0x274>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	6053      	str	r3, [r2, #4]

	/*ACTIVACIÓN DEL PLL CON LOS PARÁMETROS ELEGIDOS ANTERIORMENTE. */
	// Se activa el PLL.
	RCC->CR |= (1<<24);
 8002570:	4b27      	ldr	r3, [pc, #156]	; (8002610 <PLL_Config+0x274>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a26      	ldr	r2, [pc, #152]	; (8002610 <PLL_Config+0x274>)
 8002576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800257a:	6013      	str	r3, [r2, #0]
	// Se da un retardo que indica la activación del PLL.
	while (!(RCC->CR & (1<<25)));
 800257c:	bf00      	nop
 800257e:	4b24      	ldr	r3, [pc, #144]	; (8002610 <PLL_Config+0x274>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f9      	beq.n	800257e <PLL_Config+0x1e2>
	// Se introduce un 2 dentro del clock source del PLL.
	RCC->CFGR |= (2<<0);
 800258a:	4b21      	ldr	r3, [pc, #132]	; (8002610 <PLL_Config+0x274>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	4a20      	ldr	r2, [pc, #128]	; (8002610 <PLL_Config+0x274>)
 8002590:	f043 0302 	orr.w	r3, r3, #2
 8002594:	6093      	str	r3, [r2, #8]

	// Aquí se espera a que el PLL esté listo como reloj principal de la configuracion.
	while (!(RCC->CFGR & (2<<2)));
 8002596:	bf00      	nop
 8002598:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <PLL_Config+0x274>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f9      	beq.n	8002598 <PLL_Config+0x1fc>

	// Se selecciona la señal del PLL.
	RCC->CFGR |= (RCC_CFGR_MCO1_0);
 80025a4:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <PLL_Config+0x274>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	4a19      	ldr	r2, [pc, #100]	; (8002610 <PLL_Config+0x274>)
 80025aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025ae:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (RCC_CFGR_MCO1_1);
 80025b0:	4b17      	ldr	r3, [pc, #92]	; (8002610 <PLL_Config+0x274>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	4a16      	ldr	r2, [pc, #88]	; (8002610 <PLL_Config+0x274>)
 80025b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025ba:	6093      	str	r3, [r2, #8]

	// Para un preescaler de 5 unidades.
	RCC->CFGR |=  (RCC_CFGR_MCO1PRE_0);
 80025bc:	4b14      	ldr	r3, [pc, #80]	; (8002610 <PLL_Config+0x274>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	4a13      	ldr	r2, [pc, #76]	; (8002610 <PLL_Config+0x274>)
 80025c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025c6:	6093      	str	r3, [r2, #8]
	RCC->CFGR |=  (RCC_CFGR_MCO1PRE_1);
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <PLL_Config+0x274>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	4a10      	ldr	r2, [pc, #64]	; (8002610 <PLL_Config+0x274>)
 80025ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025d2:	6093      	str	r3, [r2, #8]
	RCC->CFGR |=  (RCC_CFGR_MCO1PRE_2);
 80025d4:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <PLL_Config+0x274>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	4a0d      	ldr	r2, [pc, #52]	; (8002610 <PLL_Config+0x274>)
 80025da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025de:	6093      	str	r3, [r2, #8]

	// Limpiamos el registo clock control register -> HSITRIM
	RCC->CR &= ~(RCC_CR_HSITRIM);
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <PLL_Config+0x274>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <PLL_Config+0x274>)
 80025e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80025ea:	6013      	str	r3, [r2, #0]

	/* En control register se indica el resultado de la ecuación:
	 * (F_deseada - F_real)/48 kHz.
	 * Para ajustar el reloj interno del MCU, se escribe 12 en HSITRIM.
	 */
	RCC->CR |= RCC_CR_HSITRIM_2;
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <PLL_Config+0x274>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a07      	ldr	r2, [pc, #28]	; (8002610 <PLL_Config+0x274>)
 80025f2:	f043 0320 	orr.w	r3, r3, #32
 80025f6:	6013      	str	r3, [r2, #0]
	RCC->CR |= RCC_CR_HSITRIM_3;
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <PLL_Config+0x274>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a04      	ldr	r2, [pc, #16]	; (8002610 <PLL_Config+0x274>)
 80025fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002602:	6013      	str	r3, [r2, #0]

}// FIN DE LA FUNCIÓN DE CONFIGURACIÓN PARA DISTINTAS FRECUENCIAS.
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40023800 	.word	0x40023800

08002614 <getConfigPLL>:

// Función para saber el estado del PLL y así poder caracterizar lo demás.
uint32_t getConfigPLL(void){
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
	// Se buscan los valores que están definiendo los valores actuales del reloj PLL
	uint32_t PLLN = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <getConfigPLL+0x3c>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	099b      	lsrs	r3, r3, #6
 8002620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002624:	60fb      	str	r3, [r7, #12]
	uint32_t PLLM = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos;
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <getConfigPLL+0x3c>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800262e:	60bb      	str	r3, [r7, #8]
	// Se hace la operación para saber el valor actual del reloj. (Asume PLLP =2)
	uint32_t clockMicro = (HSI_VALUE / PLLM) * PLLN / 2;
 8002630:	4b08      	ldr	r3, [pc, #32]	; (8002654 <getConfigPLL+0x40>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	fbb2 f3f3 	udiv	r3, r2, r3
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	fb02 f303 	mul.w	r3, r2, r3
 8002640:	085b      	lsrs	r3, r3, #1
 8002642:	607b      	str	r3, [r7, #4]
	return clockMicro;
 8002644:	687b      	ldr	r3, [r7, #4]

}
 8002646:	4618      	mov	r0, r3
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	40023800 	.word	0x40023800
 8002654:	20000040 	.word	0x20000040

08002658 <chooseCLK>:

void chooseCLK(uint8_t clock){
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
	switch(clock){
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	2b03      	cmp	r3, #3
 8002666:	d020      	beq.n	80026aa <chooseCLK+0x52>
 8002668:	2b03      	cmp	r3, #3
 800266a:	dc2b      	bgt.n	80026c4 <chooseCLK+0x6c>
 800266c:	2b01      	cmp	r3, #1
 800266e:	d002      	beq.n	8002676 <chooseCLK+0x1e>
 8002670:	2b02      	cmp	r3, #2
 8002672:	d00d      	beq.n	8002690 <chooseCLK+0x38>
		RCC->CFGR &= ~(RCC_CFGR_MCO1_0);
		RCC->CFGR &= ~(RCC_CFGR_MCO1_1);
		break;
	}
	default:{
		break;
 8002674:	e026      	b.n	80026c4 <chooseCLK+0x6c>
		RCC->CFGR |= (RCC_CFGR_MCO1_0);
 8002676:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <chooseCLK+0x78>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	4a15      	ldr	r2, [pc, #84]	; (80026d0 <chooseCLK+0x78>)
 800267c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002680:	6093      	str	r3, [r2, #8]
		RCC->CFGR |= (RCC_CFGR_MCO1_1);
 8002682:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <chooseCLK+0x78>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <chooseCLK+0x78>)
 8002688:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800268c:	6093      	str	r3, [r2, #8]
		break;
 800268e:	e01a      	b.n	80026c6 <chooseCLK+0x6e>
		RCC->CFGR |=  (RCC_CFGR_MCO1_0);
 8002690:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <chooseCLK+0x78>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	4a0e      	ldr	r2, [pc, #56]	; (80026d0 <chooseCLK+0x78>)
 8002696:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800269a:	6093      	str	r3, [r2, #8]
		RCC->CFGR &= ~(RCC_CFGR_MCO1_1);
 800269c:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <chooseCLK+0x78>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	4a0b      	ldr	r2, [pc, #44]	; (80026d0 <chooseCLK+0x78>)
 80026a2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80026a6:	6093      	str	r3, [r2, #8]
		break;
 80026a8:	e00d      	b.n	80026c6 <chooseCLK+0x6e>
		RCC->CFGR &= ~(RCC_CFGR_MCO1_0);
 80026aa:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <chooseCLK+0x78>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	4a08      	ldr	r2, [pc, #32]	; (80026d0 <chooseCLK+0x78>)
 80026b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026b4:	6093      	str	r3, [r2, #8]
		RCC->CFGR &= ~(RCC_CFGR_MCO1_1);
 80026b6:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <chooseCLK+0x78>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	4a05      	ldr	r2, [pc, #20]	; (80026d0 <chooseCLK+0x78>)
 80026bc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80026c0:	6093      	str	r3, [r2, #8]
		break;
 80026c2:	e000      	b.n	80026c6 <chooseCLK+0x6e>
		break;
 80026c4:	bf00      	nop
		} //Fin caso por defecto
	}
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr
 80026d0:	40023800 	.word	0x40023800

080026d4 <prescalerNumber>:

// Función para el comando que selecciona el preescaler
void prescalerNumber(uint8_t prescaler){
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	71fb      	strb	r3, [r7, #7]
	switch(prescaler){
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	3b01      	subs	r3, #1
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d86b      	bhi.n	80027be <prescalerNumber+0xea>
 80026e6:	a201      	add	r2, pc, #4	; (adr r2, 80026ec <prescalerNumber+0x18>)
 80026e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ec:	08002701 	.word	0x08002701
 80026f0:	08002727 	.word	0x08002727
 80026f4:	0800274d 	.word	0x0800274d
 80026f8:	08002773 	.word	0x08002773
 80026fc:	08002799 	.word	0x08002799
	case 1:{
		// Sin prescaler
		RCC->CFGR &= ~(RCC_CFGR_MCO1PRE_0);
 8002700:	4b32      	ldr	r3, [pc, #200]	; (80027cc <prescalerNumber+0xf8>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	4a31      	ldr	r2, [pc, #196]	; (80027cc <prescalerNumber+0xf8>)
 8002706:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800270a:	6093      	str	r3, [r2, #8]
		RCC->CFGR &= ~(RCC_CFGR_MCO1PRE_1);
 800270c:	4b2f      	ldr	r3, [pc, #188]	; (80027cc <prescalerNumber+0xf8>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	4a2e      	ldr	r2, [pc, #184]	; (80027cc <prescalerNumber+0xf8>)
 8002712:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002716:	6093      	str	r3, [r2, #8]
		RCC->CFGR &= ~(RCC_CFGR_MCO1PRE_2);
 8002718:	4b2c      	ldr	r3, [pc, #176]	; (80027cc <prescalerNumber+0xf8>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	4a2b      	ldr	r2, [pc, #172]	; (80027cc <prescalerNumber+0xf8>)
 800271e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002722:	6093      	str	r3, [r2, #8]
		break;
 8002724:	e04c      	b.n	80027c0 <prescalerNumber+0xec>
	}
	case 2:{
		// prescaler de 2
		RCC->CFGR &= ~(RCC_CFGR_MCO1PRE_0);
 8002726:	4b29      	ldr	r3, [pc, #164]	; (80027cc <prescalerNumber+0xf8>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	4a28      	ldr	r2, [pc, #160]	; (80027cc <prescalerNumber+0xf8>)
 800272c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002730:	6093      	str	r3, [r2, #8]
		RCC->CFGR &= ~(RCC_CFGR_MCO1PRE_1);
 8002732:	4b26      	ldr	r3, [pc, #152]	; (80027cc <prescalerNumber+0xf8>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	4a25      	ldr	r2, [pc, #148]	; (80027cc <prescalerNumber+0xf8>)
 8002738:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800273c:	6093      	str	r3, [r2, #8]
		RCC->CFGR |=  (RCC_CFGR_MCO1PRE_2);
 800273e:	4b23      	ldr	r3, [pc, #140]	; (80027cc <prescalerNumber+0xf8>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	4a22      	ldr	r2, [pc, #136]	; (80027cc <prescalerNumber+0xf8>)
 8002744:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002748:	6093      	str	r3, [r2, #8]
		break;
 800274a:	e039      	b.n	80027c0 <prescalerNumber+0xec>
	}
	case 3:{
		// prescaler de 3
		RCC->CFGR |=  (RCC_CFGR_MCO1PRE_0);
 800274c:	4b1f      	ldr	r3, [pc, #124]	; (80027cc <prescalerNumber+0xf8>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4a1e      	ldr	r2, [pc, #120]	; (80027cc <prescalerNumber+0xf8>)
 8002752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002756:	6093      	str	r3, [r2, #8]
		RCC->CFGR &= ~(RCC_CFGR_MCO1PRE_1);
 8002758:	4b1c      	ldr	r3, [pc, #112]	; (80027cc <prescalerNumber+0xf8>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	4a1b      	ldr	r2, [pc, #108]	; (80027cc <prescalerNumber+0xf8>)
 800275e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002762:	6093      	str	r3, [r2, #8]
		RCC->CFGR |=  (RCC_CFGR_MCO1PRE_2);
 8002764:	4b19      	ldr	r3, [pc, #100]	; (80027cc <prescalerNumber+0xf8>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4a18      	ldr	r2, [pc, #96]	; (80027cc <prescalerNumber+0xf8>)
 800276a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800276e:	6093      	str	r3, [r2, #8]
		break;
 8002770:	e026      	b.n	80027c0 <prescalerNumber+0xec>
	}
	case 4:{
		//prescaler de 4
		RCC->CFGR &=  ~(RCC_CFGR_MCO1PRE_0);
 8002772:	4b16      	ldr	r3, [pc, #88]	; (80027cc <prescalerNumber+0xf8>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	4a15      	ldr	r2, [pc, #84]	; (80027cc <prescalerNumber+0xf8>)
 8002778:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800277c:	6093      	str	r3, [r2, #8]
		RCC->CFGR |=  (RCC_CFGR_MCO1PRE_1);
 800277e:	4b13      	ldr	r3, [pc, #76]	; (80027cc <prescalerNumber+0xf8>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	4a12      	ldr	r2, [pc, #72]	; (80027cc <prescalerNumber+0xf8>)
 8002784:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002788:	6093      	str	r3, [r2, #8]
		RCC->CFGR |=  (RCC_CFGR_MCO1PRE_2);
 800278a:	4b10      	ldr	r3, [pc, #64]	; (80027cc <prescalerNumber+0xf8>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	4a0f      	ldr	r2, [pc, #60]	; (80027cc <prescalerNumber+0xf8>)
 8002790:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002794:	6093      	str	r3, [r2, #8]
		break;
 8002796:	e013      	b.n	80027c0 <prescalerNumber+0xec>
	}
	case 5:{
		//prescaler de 5
		RCC->CFGR |=  (RCC_CFGR_MCO1PRE_0);
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <prescalerNumber+0xf8>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a0b      	ldr	r2, [pc, #44]	; (80027cc <prescalerNumber+0xf8>)
 800279e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027a2:	6093      	str	r3, [r2, #8]
		RCC->CFGR |=  (RCC_CFGR_MCO1PRE_1);
 80027a4:	4b09      	ldr	r3, [pc, #36]	; (80027cc <prescalerNumber+0xf8>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	4a08      	ldr	r2, [pc, #32]	; (80027cc <prescalerNumber+0xf8>)
 80027aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027ae:	6093      	str	r3, [r2, #8]
		RCC->CFGR |=  (RCC_CFGR_MCO1PRE_2);
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <prescalerNumber+0xf8>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	4a05      	ldr	r2, [pc, #20]	; (80027cc <prescalerNumber+0xf8>)
 80027b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027ba:	6093      	str	r3, [r2, #8]
		break;
 80027bc:	e000      	b.n	80027c0 <prescalerNumber+0xec>
	}
	default:{
		break;
 80027be:	bf00      	nop
		} //Fin caso por defecto
	}

}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800

080027d0 <pwm_Config>:
 */

#include "PwmDriver.h"

/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if(ptrPwmHandler->ptrTIMx == TIM2){
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e0:	d106      	bne.n	80027f0 <pwm_Config+0x20>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80027e2:	4b59      	ldr	r3, [pc, #356]	; (8002948 <pwm_Config+0x178>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	4a58      	ldr	r2, [pc, #352]	; (8002948 <pwm_Config+0x178>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6413      	str	r3, [r2, #64]	; 0x40
 80027ee:	e024      	b.n	800283a <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a55      	ldr	r2, [pc, #340]	; (800294c <pwm_Config+0x17c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d106      	bne.n	8002808 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80027fa:	4b53      	ldr	r3, [pc, #332]	; (8002948 <pwm_Config+0x178>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	4a52      	ldr	r2, [pc, #328]	; (8002948 <pwm_Config+0x178>)
 8002800:	f043 0302 	orr.w	r3, r3, #2
 8002804:	6413      	str	r3, [r2, #64]	; 0x40
 8002806:	e018      	b.n	800283a <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a50      	ldr	r2, [pc, #320]	; (8002950 <pwm_Config+0x180>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d106      	bne.n	8002820 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002812:	4b4d      	ldr	r3, [pc, #308]	; (8002948 <pwm_Config+0x178>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	4a4c      	ldr	r2, [pc, #304]	; (8002948 <pwm_Config+0x178>)
 8002818:	f043 0304 	orr.w	r3, r3, #4
 800281c:	6413      	str	r3, [r2, #64]	; 0x40
 800281e:	e00c      	b.n	800283a <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a4b      	ldr	r2, [pc, #300]	; (8002954 <pwm_Config+0x184>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d106      	bne.n	8002838 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800282a:	4b47      	ldr	r3, [pc, #284]	; (8002948 <pwm_Config+0x178>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	4a46      	ldr	r2, [pc, #280]	; (8002948 <pwm_Config+0x178>)
 8002830:	f043 0308 	orr.w	r3, r3, #8
 8002834:	6413      	str	r3, [r2, #64]	; 0x40
 8002836:	e000      	b.n	800283a <pwm_Config+0x6a>
	}
	else{
		__NOP();
 8002838:	bf00      	nop
	}

	/* 1. Cargamos la frecuencia deseada */
	setFrequency(ptrPwmHandler);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f8dc 	bl	80029f8 <setFrequency>

	/* 2. Cargamos el valor del dutty-Cycle*/
	setDuttyCycle(ptrPwmHandler);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f8ed 	bl	8002a20 <setDuttyCycle>

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0210 	bic.w	r2, r2, #16
 8002854:	601a      	str	r2, [r3, #0]
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	791b      	ldrb	r3, [r3, #4]
 800285a:	2b03      	cmp	r3, #3
 800285c:	d86e      	bhi.n	800293c <pwm_Config+0x16c>
 800285e:	a201      	add	r2, pc, #4	; (adr r2, 8002864 <pwm_Config+0x94>)
 8002860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002864:	08002875 	.word	0x08002875
 8002868:	080028a7 	.word	0x080028a7
 800286c:	080028d9 	.word	0x080028d9
 8002870:	0800290b 	.word	0x0800290b
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~(TIM_CCMR1_CC1S);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0203 	bic.w	r2, r2, #3
 8002882:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC1M_Pos);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699a      	ldr	r2, [r3, #24]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002892:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699a      	ldr	r2, [r3, #24]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0208 	orr.w	r2, r2, #8
 80028a2:	619a      	str	r2, [r3, #24]

		break;
 80028a4:	e04b      	b.n	800293e <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~(TIM_CCMR1_CC2S);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699a      	ldr	r2, [r3, #24]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80028b4:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC2M_Pos);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	699a      	ldr	r2, [r3, #24]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80028c4:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699a      	ldr	r2, [r3, #24]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028d4:	619a      	str	r2, [r3, #24]
		break;
 80028d6:	e032      	b.n	800293e <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_3:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~(TIM_CCMR2_CC3S);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	69da      	ldr	r2, [r3, #28]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0203 	bic.w	r2, r2, #3
 80028e6:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC3M_Pos);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	69da      	ldr	r2, [r3, #28]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80028f6:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	69da      	ldr	r2, [r3, #28]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0208 	orr.w	r2, r2, #8
 8002906:	61da      	str	r2, [r3, #28]
		break;
 8002908:	e019      	b.n	800293e <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_4:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~(TIM_CCMR2_CC4S);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	69da      	ldr	r2, [r3, #28]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002918:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC4M_Pos);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	69da      	ldr	r2, [r3, #28]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8002928:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	69da      	ldr	r2, [r3, #28]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002938:	61da      	str	r2, [r3, #28]
		break;
 800293a:	e000      	b.n	800293e <pwm_Config+0x16e>
	}

	default:{
		break;
 800293c:	bf00      	nop

	/* 6. Activamos la salida seleccionada */
	enableOutput(ptrPwmHandler);

	}// fin del switch-case
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40023800 	.word	0x40023800
 800294c:	40000400 	.word	0x40000400
 8002950:	40000800 	.word	0x40000800
 8002954:	40000c00 	.word	0x40000c00

08002958 <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0201 	orr.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
	...

0800297c <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
void enableOutput(PWM_Handler_t *ptrPwmHandler) {
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
	switch (ptrPwmHandler->config.channel) {
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	791b      	ldrb	r3, [r3, #4]
 8002988:	2b03      	cmp	r3, #3
 800298a:	d82f      	bhi.n	80029ec <enableOutput+0x70>
 800298c:	a201      	add	r2, pc, #4	; (adr r2, 8002994 <enableOutput+0x18>)
 800298e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002992:	bf00      	nop
 8002994:	080029a5 	.word	0x080029a5
 8002998:	080029b7 	.word	0x080029b7
 800299c:	080029c9 	.word	0x080029c9
 80029a0:	080029db 	.word	0x080029db
	case PWM_CHANNEL_1: {
		// Activamos la salida del canal 1
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6a1a      	ldr	r2, [r3, #32]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	621a      	str	r2, [r3, #32]
		break;
 80029b4:	e01b      	b.n	80029ee <enableOutput+0x72>
	}

	case PWM_CHANNEL_2: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6a1a      	ldr	r2, [r3, #32]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f042 0210 	orr.w	r2, r2, #16
 80029c4:	621a      	str	r2, [r3, #32]
		break;
 80029c6:	e012      	b.n	80029ee <enableOutput+0x72>
	}

	case PWM_CHANNEL_3: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6a1a      	ldr	r2, [r3, #32]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029d6:	621a      	str	r2, [r3, #32]

		break;
 80029d8:	e009      	b.n	80029ee <enableOutput+0x72>
	}

	case PWM_CHANNEL_4: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6a1a      	ldr	r2, [r3, #32]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029e8:	621a      	str	r2, [r3, #32]

		break;
 80029ea:	e000      	b.n	80029ee <enableOutput+0x72>
	}

	default: {
		break;
 80029ec:	bf00      	nop
	}
	}
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <setFrequency>:
/*
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler -1;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	3a01      	subs	r2, #1
 8002a0a:	629a      	str	r2, [r3, #40]	; 0x28

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.
	ptrPwmHandler->ptrTIMx->ARR = ptrPwmHandler->config.periodo;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	899a      	ldrh	r2, [r3, #12]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
    setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	791b      	ldrb	r3, [r3, #4]
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d823      	bhi.n	8002a78 <setDuttyCycle+0x58>
 8002a30:	a201      	add	r2, pc, #4	; (adr r2, 8002a38 <setDuttyCycle+0x18>)
 8002a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a36:	bf00      	nop
 8002a38:	08002a49 	.word	0x08002a49
 8002a3c:	08002a55 	.word	0x08002a55
 8002a40:	08002a61 	.word	0x08002a61
 8002a44:	08002a6d 	.word	0x08002a6d
	case PWM_CHANNEL_1:{
		ptrPwmHandler->ptrTIMx->CCR1 = ptrPwmHandler->config.duttyCicle;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	89da      	ldrh	r2, [r3, #14]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 8002a52:	e012      	b.n	8002a7a <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_2:{
		ptrPwmHandler->ptrTIMx->CCR2 = ptrPwmHandler->config.duttyCicle;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	89da      	ldrh	r2, [r3, #14]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8002a5e:	e00c      	b.n	8002a7a <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_3:{
		ptrPwmHandler->ptrTIMx->CCR3 = ptrPwmHandler->config.duttyCicle;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	89da      	ldrh	r2, [r3, #14]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8002a6a:	e006      	b.n	8002a7a <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_4:{
		ptrPwmHandler->ptrTIMx->CCR4 = ptrPwmHandler->config.duttyCicle;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	89da      	ldrh	r2, [r3, #14]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8002a76:	e000      	b.n	8002a7a <setDuttyCycle+0x5a>
	}

	default:{
		break;
 8002a78:	bf00      	nop
	}

	}// fin del switch-case

}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <rtc_Config>:
uint8_t RTC_añoUnidades	 	 = 0;
uint8_t RTC_añoDecenas 	     = 0;
uint8_t RTC_wdu              = 0;

// Funcion que configura el RTC con el cristal LSE
void rtc_Config(RTC_Handler_t *ptrRtcHandler){
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]

	/*Es necesario habilitar el reloj del APB1 donde se encuentra el periferico RTC. Además,
	 *se habilita el acceso de escritura porque el periferico se encuentra protegido
	 */
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002a8c:	4ba4      	ldr	r3, [pc, #656]	; (8002d20 <rtc_Config+0x29c>)
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	4aa3      	ldr	r2, [pc, #652]	; (8002d20 <rtc_Config+0x29c>)
 8002a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a96:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= PWR_CR_DBP;
 8002a98:	4ba2      	ldr	r3, [pc, #648]	; (8002d24 <rtc_Config+0x2a0>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4aa1      	ldr	r2, [pc, #644]	; (8002d24 <rtc_Config+0x2a0>)
 8002a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa2:	6013      	str	r3, [r2, #0]

	RCC->BDCR |= RCC_BDCR_RTCEN;    // Se activa la señal de reloj
 8002aa4:	4b9e      	ldr	r3, [pc, #632]	; (8002d20 <rtc_Config+0x29c>)
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa8:	4a9d      	ldr	r2, [pc, #628]	; (8002d20 <rtc_Config+0x29c>)
 8002aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aae:	6713      	str	r3, [r2, #112]	; 0x70
	RCC->BDCR |= RCC_BDCR_LSEON;    // Se activa el cristal LSE
 8002ab0:	4b9b      	ldr	r3, [pc, #620]	; (8002d20 <rtc_Config+0x29c>)
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab4:	4a9a      	ldr	r2, [pc, #616]	; (8002d20 <rtc_Config+0x29c>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	6713      	str	r3, [r2, #112]	; 0x70
	RCC->BDCR |= RCC_BDCR_RTCSEL_0; // Se selecciona el LSE como fuente del RTC
 8002abc:	4b98      	ldr	r3, [pc, #608]	; (8002d20 <rtc_Config+0x29c>)
 8002abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac0:	4a97      	ldr	r2, [pc, #604]	; (8002d20 <rtc_Config+0x29c>)
 8002ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac6:	6713      	str	r3, [r2, #112]	; 0x70

	// Se espera hasta que el LSE este listo
	while(!(RCC->BDCR & RCC_BDCR_LSERDY));
 8002ac8:	bf00      	nop
 8002aca:	4b95      	ldr	r3, [pc, #596]	; (8002d20 <rtc_Config+0x29c>)
 8002acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f9      	beq.n	8002aca <rtc_Config+0x46>

	 /* Se ingresan las claves dadas por el fabricante en el registro de proteccion contra
	 * escritura
	 */

    RTC->WPR |= 0xCA;
 8002ad6:	4b94      	ldr	r3, [pc, #592]	; (8002d28 <rtc_Config+0x2a4>)
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	4a93      	ldr	r2, [pc, #588]	; (8002d28 <rtc_Config+0x2a4>)
 8002adc:	f043 03ca 	orr.w	r3, r3, #202	; 0xca
 8002ae0:	6253      	str	r3, [r2, #36]	; 0x24
    RTC->WPR |= 0x53;
 8002ae2:	4b91      	ldr	r3, [pc, #580]	; (8002d28 <rtc_Config+0x2a4>)
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	4a90      	ldr	r2, [pc, #576]	; (8002d28 <rtc_Config+0x2a4>)
 8002ae8:	f043 0353 	orr.w	r3, r3, #83	; 0x53
 8002aec:	6253      	str	r3, [r2, #36]	; 0x24

    // Se entra en el modo de inicializacion
    RTC->ISR |= RTC_ISR_INIT;
 8002aee:	4b8e      	ldr	r3, [pc, #568]	; (8002d28 <rtc_Config+0x2a4>)
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	4a8d      	ldr	r2, [pc, #564]	; (8002d28 <rtc_Config+0x2a4>)
 8002af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af8:	60d3      	str	r3, [r2, #12]

    // Se espera a que se active este modo
    while(!(RTC->ISR & RTC_ISR_INITF));
 8002afa:	bf00      	nop
 8002afc:	4b8a      	ldr	r3, [pc, #552]	; (8002d28 <rtc_Config+0x2a4>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f9      	beq.n	8002afc <rtc_Config+0x78>

    //Se configuran los prescaler para obtener 1 Hz, 127 para el asincrono y 255 para el sincrono.
    //32768 Hz / (127 +1) = 256 Hz
    //256 Hz /(255 + 1) = 1 Hz

    RTC->PRER |= 127 << RTC_PRER_PREDIV_A_Pos;
 8002b08:	4b87      	ldr	r3, [pc, #540]	; (8002d28 <rtc_Config+0x2a4>)
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	4a86      	ldr	r2, [pc, #536]	; (8002d28 <rtc_Config+0x2a4>)
 8002b0e:	f443 03fe 	orr.w	r3, r3, #8323072	; 0x7f0000
 8002b12:	6113      	str	r3, [r2, #16]
    RTC->PRER |= 255 << RTC_PRER_PREDIV_S_Pos;
 8002b14:	4b84      	ldr	r3, [pc, #528]	; (8002d28 <rtc_Config+0x2a4>)
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	4a83      	ldr	r2, [pc, #524]	; (8002d28 <rtc_Config+0x2a4>)
 8002b1a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8002b1e:	6113      	str	r3, [r2, #16]


    //Se configura el RTC para que tome valores de los contadores del calendario

    RTC->CR |= RTC_CR_BYPSHAD;
 8002b20:	4b81      	ldr	r3, [pc, #516]	; (8002d28 <rtc_Config+0x2a4>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4a80      	ldr	r2, [pc, #512]	; (8002d28 <rtc_Config+0x2a4>)
 8002b26:	f043 0320 	orr.w	r3, r3, #32
 8002b2a:	6093      	str	r3, [r2, #8]

    // Se reinician los contadores del calendario
    RTC->TR = 0;
 8002b2c:	4b7e      	ldr	r3, [pc, #504]	; (8002d28 <rtc_Config+0x2a4>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
    RTC->DR = 0;
 8002b32:	4b7d      	ldr	r3, [pc, #500]	; (8002d28 <rtc_Config+0x2a4>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	605a      	str	r2, [r3, #4]

    // El formato está en 24 horas.
    RTC->CR &= ~RTC_CR_FMT;
 8002b38:	4b7b      	ldr	r3, [pc, #492]	; (8002d28 <rtc_Config+0x2a4>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4a7a      	ldr	r2, [pc, #488]	; (8002d28 <rtc_Config+0x2a4>)
 8002b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b42:	6093      	str	r3, [r2, #8]

    /* El registro time register esta en formato BCD. se realiza la division y el modulo para
     * obtener decenas y unidades.
     */

    RTC->TR |= ptrRtcHandler->RTC_Hours/10 << RTC_TR_HT_Pos;
 8002b44:	4b78      	ldr	r3, [pc, #480]	; (8002d28 <rtc_Config+0x2a4>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	7812      	ldrb	r2, [r2, #0]
 8002b4c:	4977      	ldr	r1, [pc, #476]	; (8002d2c <rtc_Config+0x2a8>)
 8002b4e:	fba1 1202 	umull	r1, r2, r1, r2
 8002b52:	08d2      	lsrs	r2, r2, #3
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	0512      	lsls	r2, r2, #20
 8002b58:	4611      	mov	r1, r2
 8002b5a:	4a73      	ldr	r2, [pc, #460]	; (8002d28 <rtc_Config+0x2a4>)
 8002b5c:	430b      	orrs	r3, r1
 8002b5e:	6013      	str	r3, [r2, #0]
    RTC->TR |= ptrRtcHandler->RTC_Hours%10 << RTC_TR_HU_Pos;
 8002b60:	4b71      	ldr	r3, [pc, #452]	; (8002d28 <rtc_Config+0x2a4>)
 8002b62:	6818      	ldr	r0, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	781a      	ldrb	r2, [r3, #0]
 8002b68:	4b70      	ldr	r3, [pc, #448]	; (8002d2c <rtc_Config+0x2a8>)
 8002b6a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b6e:	08d9      	lsrs	r1, r3, #3
 8002b70:	460b      	mov	r3, r1
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	041b      	lsls	r3, r3, #16
 8002b7e:	4a6a      	ldr	r2, [pc, #424]	; (8002d28 <rtc_Config+0x2a4>)
 8002b80:	4303      	orrs	r3, r0
 8002b82:	6013      	str	r3, [r2, #0]
    RTC->TR |= ptrRtcHandler->RTC_Minutes/10 << RTC_TR_MNT_Pos;
 8002b84:	4b68      	ldr	r3, [pc, #416]	; (8002d28 <rtc_Config+0x2a4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	7852      	ldrb	r2, [r2, #1]
 8002b8c:	4967      	ldr	r1, [pc, #412]	; (8002d2c <rtc_Config+0x2a8>)
 8002b8e:	fba1 1202 	umull	r1, r2, r1, r2
 8002b92:	08d2      	lsrs	r2, r2, #3
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	0312      	lsls	r2, r2, #12
 8002b98:	4611      	mov	r1, r2
 8002b9a:	4a63      	ldr	r2, [pc, #396]	; (8002d28 <rtc_Config+0x2a4>)
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	6013      	str	r3, [r2, #0]
    RTC->TR |= ptrRtcHandler->RTC_Minutes%10 << RTC_TR_MNU_Pos;
 8002ba0:	4b61      	ldr	r3, [pc, #388]	; (8002d28 <rtc_Config+0x2a4>)
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	785a      	ldrb	r2, [r3, #1]
 8002ba8:	4b60      	ldr	r3, [pc, #384]	; (8002d2c <rtc_Config+0x2a8>)
 8002baa:	fba3 1302 	umull	r1, r3, r3, r2
 8002bae:	08d9      	lsrs	r1, r3, #3
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	021b      	lsls	r3, r3, #8
 8002bbe:	4a5a      	ldr	r2, [pc, #360]	; (8002d28 <rtc_Config+0x2a4>)
 8002bc0:	4303      	orrs	r3, r0
 8002bc2:	6013      	str	r3, [r2, #0]
    RTC->TR |= ptrRtcHandler->RTC_Seconds/10  << RTC_TR_ST_Pos;
 8002bc4:	4b58      	ldr	r3, [pc, #352]	; (8002d28 <rtc_Config+0x2a4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	7892      	ldrb	r2, [r2, #2]
 8002bcc:	4957      	ldr	r1, [pc, #348]	; (8002d2c <rtc_Config+0x2a8>)
 8002bce:	fba1 1202 	umull	r1, r2, r1, r2
 8002bd2:	08d2      	lsrs	r2, r2, #3
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	0112      	lsls	r2, r2, #4
 8002bd8:	4611      	mov	r1, r2
 8002bda:	4a53      	ldr	r2, [pc, #332]	; (8002d28 <rtc_Config+0x2a4>)
 8002bdc:	430b      	orrs	r3, r1
 8002bde:	6013      	str	r3, [r2, #0]
    RTC->TR |= ptrRtcHandler->RTC_Seconds%10 << RTC_TR_SU_Pos;
 8002be0:	4b51      	ldr	r3, [pc, #324]	; (8002d28 <rtc_Config+0x2a4>)
 8002be2:	6818      	ldr	r0, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	789a      	ldrb	r2, [r3, #2]
 8002be8:	4b50      	ldr	r3, [pc, #320]	; (8002d2c <rtc_Config+0x2a8>)
 8002bea:	fba3 1302 	umull	r1, r3, r3, r2
 8002bee:	08d9      	lsrs	r1, r3, #3
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	4a4a      	ldr	r2, [pc, #296]	; (8002d28 <rtc_Config+0x2a4>)
 8002bfe:	4303      	orrs	r3, r0
 8002c00:	6013      	str	r3, [r2, #0]

    //Para el formato AM-PM
    RTC->TR |= ptrRtcHandler->RTC_AmPm << RTC_TR_PM_Pos;
 8002c02:	4b49      	ldr	r3, [pc, #292]	; (8002d28 <rtc_Config+0x2a4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	7a52      	ldrb	r2, [r2, #9]
 8002c0a:	0592      	lsls	r2, r2, #22
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	4a46      	ldr	r2, [pc, #280]	; (8002d28 <rtc_Config+0x2a4>)
 8002c10:	430b      	orrs	r3, r1
 8002c12:	6013      	str	r3, [r2, #0]

    /* El registro RTC date register se encuentra en formato BCD,se realiza la division y
     * el modulo para obtener decenas y unidades.
     */

    RTC->DR |= ptrRtcHandler->RTC_Months%10 << RTC_DR_MU_Pos;
 8002c14:	4b44      	ldr	r3, [pc, #272]	; (8002d28 <rtc_Config+0x2a4>)
 8002c16:	6858      	ldr	r0, [r3, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	791a      	ldrb	r2, [r3, #4]
 8002c1c:	4b43      	ldr	r3, [pc, #268]	; (8002d2c <rtc_Config+0x2a8>)
 8002c1e:	fba3 1302 	umull	r1, r3, r3, r2
 8002c22:	08d9      	lsrs	r1, r3, #3
 8002c24:	460b      	mov	r3, r1
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	4a3d      	ldr	r2, [pc, #244]	; (8002d28 <rtc_Config+0x2a4>)
 8002c34:	4303      	orrs	r3, r0
 8002c36:	6053      	str	r3, [r2, #4]
    RTC->DR |= ptrRtcHandler->RTC_Months/10 << RTC_DR_MT_Pos;
 8002c38:	4b3b      	ldr	r3, [pc, #236]	; (8002d28 <rtc_Config+0x2a4>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	7912      	ldrb	r2, [r2, #4]
 8002c40:	493a      	ldr	r1, [pc, #232]	; (8002d2c <rtc_Config+0x2a8>)
 8002c42:	fba1 1202 	umull	r1, r2, r1, r2
 8002c46:	08d2      	lsrs	r2, r2, #3
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	0312      	lsls	r2, r2, #12
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	4a36      	ldr	r2, [pc, #216]	; (8002d28 <rtc_Config+0x2a4>)
 8002c50:	430b      	orrs	r3, r1
 8002c52:	6053      	str	r3, [r2, #4]
    RTC->DR |= ptrRtcHandler->RTC_Days/10 << RTC_DR_DT_Pos;
 8002c54:	4b34      	ldr	r3, [pc, #208]	; (8002d28 <rtc_Config+0x2a4>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	78d2      	ldrb	r2, [r2, #3]
 8002c5c:	4933      	ldr	r1, [pc, #204]	; (8002d2c <rtc_Config+0x2a8>)
 8002c5e:	fba1 1202 	umull	r1, r2, r1, r2
 8002c62:	08d2      	lsrs	r2, r2, #3
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	0112      	lsls	r2, r2, #4
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4a2f      	ldr	r2, [pc, #188]	; (8002d28 <rtc_Config+0x2a4>)
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	6053      	str	r3, [r2, #4]
    RTC->DR |= ptrRtcHandler->RTC_Days%10 << RTC_DR_DU_Pos;
 8002c70:	4b2d      	ldr	r3, [pc, #180]	; (8002d28 <rtc_Config+0x2a4>)
 8002c72:	6858      	ldr	r0, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	78da      	ldrb	r2, [r3, #3]
 8002c78:	4b2c      	ldr	r3, [pc, #176]	; (8002d2c <rtc_Config+0x2a8>)
 8002c7a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c7e:	08d9      	lsrs	r1, r3, #3
 8002c80:	460b      	mov	r3, r1
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	4a26      	ldr	r2, [pc, #152]	; (8002d28 <rtc_Config+0x2a4>)
 8002c8e:	4303      	orrs	r3, r0
 8002c90:	6053      	str	r3, [r2, #4]
    RTC->DR |= ptrRtcHandler->RTC_Wdu<< RTC_DR_WDU_Pos;
 8002c92:	4b25      	ldr	r3, [pc, #148]	; (8002d28 <rtc_Config+0x2a4>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	7a12      	ldrb	r2, [r2, #8]
 8002c9a:	0352      	lsls	r2, r2, #13
 8002c9c:	4611      	mov	r1, r2
 8002c9e:	4a22      	ldr	r2, [pc, #136]	; (8002d28 <rtc_Config+0x2a4>)
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	6053      	str	r3, [r2, #4]

    /*El sistema por defecto tiene la fecha del año 2000, de este modo se resta 2000 al valor del handler
     * y se realiza la separacion de decenas y unidades porque los años se encuentran en formato BCD.
     */
    RTC->DR |= ((ptrRtcHandler->RTC_Years -2000)%10) << RTC_DR_YU_Pos;
 8002ca4:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <rtc_Config+0x2a4>)
 8002ca6:	6858      	ldr	r0, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	88db      	ldrh	r3, [r3, #6]
 8002cac:	f5a3 61fa 	sub.w	r1, r3, #2000	; 0x7d0
 8002cb0:	4b1f      	ldr	r3, [pc, #124]	; (8002d30 <rtc_Config+0x2ac>)
 8002cb2:	fb83 2301 	smull	r2, r3, r3, r1
 8002cb6:	109a      	asrs	r2, r3, #2
 8002cb8:	17cb      	asrs	r3, r1, #31
 8002cba:	1ad2      	subs	r2, r2, r3
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	1aca      	subs	r2, r1, r3
 8002cc6:	0413      	lsls	r3, r2, #16
 8002cc8:	4a17      	ldr	r2, [pc, #92]	; (8002d28 <rtc_Config+0x2a4>)
 8002cca:	4303      	orrs	r3, r0
 8002ccc:	6053      	str	r3, [r2, #4]
    RTC->DR |= (ptrRtcHandler->RTC_Years - 2000)/10 << RTC_DR_YT_Pos;
 8002cce:	4b16      	ldr	r3, [pc, #88]	; (8002d28 <rtc_Config+0x2a4>)
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	88db      	ldrh	r3, [r3, #6]
 8002cd6:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8002cda:	4915      	ldr	r1, [pc, #84]	; (8002d30 <rtc_Config+0x2ac>)
 8002cdc:	fb81 0103 	smull	r0, r1, r1, r3
 8002ce0:	1089      	asrs	r1, r1, #2
 8002ce2:	17db      	asrs	r3, r3, #31
 8002ce4:	1acb      	subs	r3, r1, r3
 8002ce6:	051b      	lsls	r3, r3, #20
 8002ce8:	490f      	ldr	r1, [pc, #60]	; (8002d28 <rtc_Config+0x2a4>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	604b      	str	r3, [r1, #4]

    // Activamos nuevamente el real time clock
    RCC->BDCR |= RCC_BDCR_RTCEN;
 8002cee:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <rtc_Config+0x29c>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf2:	4a0b      	ldr	r2, [pc, #44]	; (8002d20 <rtc_Config+0x29c>)
 8002cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cf8:	6713      	str	r3, [r2, #112]	; 0x70

    // Salimos del modo de inicializacion
    RTC->ISR &= ~RTC_ISR_INIT;
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <rtc_Config+0x2a4>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	4a0a      	ldr	r2, [pc, #40]	; (8002d28 <rtc_Config+0x2a4>)
 8002d00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d04:	60d3      	str	r3, [r2, #12]

    // Se habilita la proteccion de bits
    PWR->CR &= ~ PWR_CR_DBP;
 8002d06:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <rtc_Config+0x2a0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a06      	ldr	r2, [pc, #24]	; (8002d24 <rtc_Config+0x2a0>)
 8002d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d10:	6013      	str	r3, [r2, #0]

    // Se escribe una clave erronea para que write protection se bloquee
    RTC->WPR = (0xFF);
 8002d12:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <rtc_Config+0x2a4>)
 8002d14:	22ff      	movs	r2, #255	; 0xff
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24

}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	e00a      	b.n	8002d34 <rtc_Config+0x2b0>
 8002d1e:	bf00      	nop
 8002d20:	40023800 	.word	0x40023800
 8002d24:	40007000 	.word	0x40007000
 8002d28:	40002800 	.word	0x40002800
 8002d2c:	cccccccd 	.word	0xcccccccd
 8002d30:	66666667 	.word	0x66666667
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop

08002d3c <read_Time>:

// Funcion que entrega un puntero para almacenar los resultados en el arreglo Tiempo
uint8_t* read_Time(void){
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0

	//Extraemos el dato de los registros y los desplazamos a la primera posicion

	RTC_UnidadesHoras = ((RTC->TR & RTC_TR_HU_Msk)>>RTC_TR_HU_Pos);
 8002d40:	4b36      	ldr	r3, [pc, #216]	; (8002e1c <read_Time+0xe0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	0c1b      	lsrs	r3, r3, #16
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	f003 030f 	and.w	r3, r3, #15
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	4b34      	ldr	r3, [pc, #208]	; (8002e20 <read_Time+0xe4>)
 8002d50:	701a      	strb	r2, [r3, #0]
	RTC_DecenasHoras = ((RTC->TR & RTC_TR_HT_Msk)>> RTC_TR_HT_Pos);
 8002d52:	4b32      	ldr	r3, [pc, #200]	; (8002e1c <read_Time+0xe0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	0d1b      	lsrs	r3, r3, #20
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	4b30      	ldr	r3, [pc, #192]	; (8002e24 <read_Time+0xe8>)
 8002d62:	701a      	strb	r2, [r3, #0]
	RTC_UnidadesMinutos = ((RTC->TR & RTC_TR_MNU_Msk)>>RTC_TR_MNU_Pos);
 8002d64:	4b2d      	ldr	r3, [pc, #180]	; (8002e1c <read_Time+0xe0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	0a1b      	lsrs	r3, r3, #8
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	f003 030f 	and.w	r3, r3, #15
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	4b2d      	ldr	r3, [pc, #180]	; (8002e28 <read_Time+0xec>)
 8002d74:	701a      	strb	r2, [r3, #0]
	RTC_DecenasMinutos = ((RTC->TR & RTC_TR_MNT_Msk)>>RTC_TR_MNT_Pos);
 8002d76:	4b29      	ldr	r3, [pc, #164]	; (8002e1c <read_Time+0xe0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	0b1b      	lsrs	r3, r3, #12
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	4b29      	ldr	r3, [pc, #164]	; (8002e2c <read_Time+0xf0>)
 8002d86:	701a      	strb	r2, [r3, #0]
	RTC_UnidadesSegundos = ((RTC->TR & RTC_TR_SU_Msk)>>RTC_TR_SU_Pos);
 8002d88:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <read_Time+0xe0>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	4b26      	ldr	r3, [pc, #152]	; (8002e30 <read_Time+0xf4>)
 8002d96:	701a      	strb	r2, [r3, #0]
	RTC_DecenasSegundos = ((RTC->TR & RTC_TR_ST_Msk)>>RTC_TR_ST_Pos);
 8002d98:	4b20      	ldr	r3, [pc, #128]	; (8002e1c <read_Time+0xe0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	091b      	lsrs	r3, r3, #4
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	4b23      	ldr	r3, [pc, #140]	; (8002e34 <read_Time+0xf8>)
 8002da8:	701a      	strb	r2, [r3, #0]
    RTC_AmPm = ((RTC->TR & RTC_TR_PM_Msk)>>RTC_TR_PM_Pos);
 8002daa:	4b1c      	ldr	r3, [pc, #112]	; (8002e1c <read_Time+0xe0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	0d9b      	lsrs	r3, r3, #22
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	4b1f      	ldr	r3, [pc, #124]	; (8002e38 <read_Time+0xfc>)
 8002dba:	701a      	strb	r2, [r3, #0]

    //Se almacenan los datos en el arreglo
    time[0] = (RTC_DecenasSegundos * 10) + RTC_UnidadesSegundos ;
 8002dbc:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <read_Time+0xf8>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	0092      	lsls	r2, r2, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	4b19      	ldr	r3, [pc, #100]	; (8002e30 <read_Time+0xf4>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	4413      	add	r3, r2
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	4b1a      	ldr	r3, [pc, #104]	; (8002e3c <read_Time+0x100>)
 8002dd4:	701a      	strb	r2, [r3, #0]
    time[1] = (RTC_DecenasMinutos * 10) + RTC_UnidadesMinutos;
 8002dd6:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <read_Time+0xf0>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	0092      	lsls	r2, r2, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <read_Time+0xec>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	4413      	add	r3, r2
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	4b13      	ldr	r3, [pc, #76]	; (8002e3c <read_Time+0x100>)
 8002dee:	705a      	strb	r2, [r3, #1]
    time[2] = (RTC_DecenasHoras * 10) +  RTC_UnidadesHoras;
 8002df0:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <read_Time+0xe8>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	461a      	mov	r2, r3
 8002df6:	0092      	lsls	r2, r2, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <read_Time+0xe4>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	4413      	add	r3, r2
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	4b0d      	ldr	r3, [pc, #52]	; (8002e3c <read_Time+0x100>)
 8002e08:	709a      	strb	r2, [r3, #2]
    time[3] = RTC_AmPm;
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <read_Time+0xfc>)
 8002e0c:	781a      	ldrb	r2, [r3, #0]
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <read_Time+0x100>)
 8002e10:	70da      	strb	r2, [r3, #3]

     return time;
 8002e12:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <read_Time+0x100>)
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr
 8002e1c:	40002800 	.word	0x40002800
 8002e20:	200038c5 	.word	0x200038c5
 8002e24:	200038c6 	.word	0x200038c6
 8002e28:	200038c7 	.word	0x200038c7
 8002e2c:	200038c8 	.word	0x200038c8
 8002e30:	200038c9 	.word	0x200038c9
 8002e34:	200038ca 	.word	0x200038ca
 8002e38:	200038cb 	.word	0x200038cb
 8002e3c:	200038b8 	.word	0x200038b8

08002e40 <read_Date>:

// Funcion que entrega un puntero para almacenar los resultados en el arreglo Date
uint8_t* read_Date(void){
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0

	//Extraemos el dato de los registros y los desplazamos a la primera posicion

	RTC_diaDecenas = ((RTC->DR & RTC_DR_DT_Msk)>> RTC_DR_DT_Pos);
 8002e44:	4b38      	ldr	r3, [pc, #224]	; (8002f28 <read_Date+0xe8>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	091b      	lsrs	r3, r3, #4
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	4b36      	ldr	r3, [pc, #216]	; (8002f2c <read_Date+0xec>)
 8002e54:	701a      	strb	r2, [r3, #0]
    RTC_diaUnidades = ((RTC->DR & RTC_DR_DU_Msk)>>RTC_DR_DU_Pos);
 8002e56:	4b34      	ldr	r3, [pc, #208]	; (8002f28 <read_Date+0xe8>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f003 030f 	and.w	r3, r3, #15
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	4b33      	ldr	r3, [pc, #204]	; (8002f30 <read_Date+0xf0>)
 8002e64:	701a      	strb	r2, [r3, #0]
    RTC_añoUnidades = ((RTC->DR & RTC_DR_YU_Msk)>>RTC_DR_YU_Pos);
 8002e66:	4b30      	ldr	r3, [pc, #192]	; (8002f28 <read_Date+0xe8>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	0c1b      	lsrs	r3, r3, #16
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	4b2f      	ldr	r3, [pc, #188]	; (8002f34 <read_Date+0xf4>)
 8002e76:	701a      	strb	r2, [r3, #0]
    RTC_añoDecenas = ((RTC->DR & RTC_DR_YT_Msk)>>RTC_DR_YT_Pos);
 8002e78:	4b2b      	ldr	r3, [pc, #172]	; (8002f28 <read_Date+0xe8>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	0d1b      	lsrs	r3, r3, #20
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	4b2c      	ldr	r3, [pc, #176]	; (8002f38 <read_Date+0xf8>)
 8002e88:	701a      	strb	r2, [r3, #0]
    RTC_mes = (((RTC->DR & RTC_DR_MT_Msk)>>RTC_DR_MT_Pos)*10) + (((RTC->DR & RTC_DR_MU_Msk)>>RTC_DR_MU_Pos)%10);
 8002e8a:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <read_Date+0xe8>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	0b1b      	lsrs	r3, r3, #12
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	461a      	mov	r2, r3
 8002e9a:	0092      	lsls	r2, r2, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	b2d8      	uxtb	r0, r3
 8002ea2:	4b21      	ldr	r3, [pc, #132]	; (8002f28 <read_Date+0xe8>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	0a1b      	lsrs	r3, r3, #8
 8002ea8:	f003 010f 	and.w	r1, r3, #15
 8002eac:	4b23      	ldr	r3, [pc, #140]	; (8002f3c <read_Date+0xfc>)
 8002eae:	fba3 2301 	umull	r2, r3, r3, r1
 8002eb2:	08da      	lsrs	r2, r3, #3
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	1aca      	subs	r2, r1, r3
 8002ebe:	b2d3      	uxtb	r3, r2
 8002ec0:	4403      	add	r3, r0
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	4b1e      	ldr	r3, [pc, #120]	; (8002f40 <read_Date+0x100>)
 8002ec6:	701a      	strb	r2, [r3, #0]
    RTC_wdu = (RTC->DR & RTC_DR_WDU_Msk)>>RTC_DR_WDU_Pos;
 8002ec8:	4b17      	ldr	r3, [pc, #92]	; (8002f28 <read_Date+0xe8>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	0b5b      	lsrs	r3, r3, #13
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <read_Date+0x104>)
 8002ed8:	701a      	strb	r2, [r3, #0]

    // Se almacenan los datos en el arreglo
    date[0] = (RTC_diaDecenas * 10) + RTC_diaUnidades;
 8002eda:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <read_Date+0xec>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	0092      	lsls	r2, r2, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <read_Date+0xf0>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	4413      	add	r3, r2
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <read_Date+0x108>)
 8002ef2:	701a      	strb	r2, [r3, #0]
    date[1] = RTC_mes;
 8002ef4:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <read_Date+0x100>)
 8002ef6:	781a      	ldrb	r2, [r3, #0]
 8002ef8:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <read_Date+0x108>)
 8002efa:	705a      	strb	r2, [r3, #1]
    date[2] = (RTC_añoDecenas * 10) + RTC_añoUnidades;
 8002efc:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <read_Date+0xf8>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	0092      	lsls	r2, r2, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <read_Date+0xf4>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	4413      	add	r3, r2
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <read_Date+0x108>)
 8002f14:	709a      	strb	r2, [r3, #2]
    date[3] = RTC_wdu;
 8002f16:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <read_Date+0x104>)
 8002f18:	781a      	ldrb	r2, [r3, #0]
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <read_Date+0x108>)
 8002f1c:	70da      	strb	r2, [r3, #3]

    return date;
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <read_Date+0x108>)

}
 8002f20:	4618      	mov	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr
 8002f28:	40002800 	.word	0x40002800
 8002f2c:	200038cd 	.word	0x200038cd
 8002f30:	200038cc 	.word	0x200038cc
 8002f34:	200038cf 	.word	0x200038cf
 8002f38:	200038d0 	.word	0x200038d0
 8002f3c:	cccccccd 	.word	0xcccccccd
 8002f40:	200038ce 	.word	0x200038ce
 8002f44:	200038d1 	.word	0x200038d1
 8002f48:	200038c0 	.word	0x200038c0

08002f4c <__NVIC_EnableIRQ>:
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	db0b      	blt.n	8002f76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	f003 021f 	and.w	r2, r3, #31
 8002f64:	4906      	ldr	r1, [pc, #24]	; (8002f80 <__NVIC_EnableIRQ+0x34>)
 8002f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	2001      	movs	r0, #1
 8002f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr
 8002f80:	e000e100 	.word	0xe000e100

08002f84 <USART_Config>:
 */

// Esta variable es necesaria para las interrupciones del USART 2 y 6.
uint8_t auxRxData = 0;

void USART_Config(USART_Handler_t *ptrUsartHandler){
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f8c:	b672      	cpsid	i
}
 8002f8e:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a8c      	ldr	r2, [pc, #560]	; (80031c8 <USART_Config+0x244>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d106      	bne.n	8002fa8 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8002f9a:	4b8c      	ldr	r3, [pc, #560]	; (80031cc <USART_Config+0x248>)
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	4a8b      	ldr	r2, [pc, #556]	; (80031cc <USART_Config+0x248>)
 8002fa0:	f043 0310 	orr.w	r3, r3, #16
 8002fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fa6:	e016      	b.n	8002fd6 <USART_Config+0x52>
	}else if(ptrUsartHandler->ptrUSARTx == USART6){
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a88      	ldr	r2, [pc, #544]	; (80031d0 <USART_Config+0x24c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d106      	bne.n	8002fc0 <USART_Config+0x3c>
		/*Configuramos el USART 6 que está en el mismo bus del USART 1 */
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8002fb2:	4b86      	ldr	r3, [pc, #536]	; (80031cc <USART_Config+0x248>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	4a85      	ldr	r2, [pc, #532]	; (80031cc <USART_Config+0x248>)
 8002fb8:	f043 0320 	orr.w	r3, r3, #32
 8002fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fbe:	e00a      	b.n	8002fd6 <USART_Config+0x52>
		// Luego el USART 2 que está en el bus 1.
	}else if(ptrUsartHandler->ptrUSARTx == USART2){
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a83      	ldr	r2, [pc, #524]	; (80031d4 <USART_Config+0x250>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d105      	bne.n	8002fd6 <USART_Config+0x52>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8002fca:	4b80      	ldr	r3, [pc, #512]	; (80031cc <USART_Config+0x248>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	4a7f      	ldr	r2, [pc, #508]	; (80031cc <USART_Config+0x248>)
 8002fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd4:	6413      	str	r3, [r2, #64]	; 0x40
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	79db      	ldrb	r3, [r3, #7]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d025      	beq.n	800303a <USART_Config+0xb6>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	79db      	ldrb	r3, [r3, #7]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d110      	bne.n	8003018 <USART_Config+0x94>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003004:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003014:	60da      	str	r2, [r3, #12]
 8003016:	e018      	b.n	800304a <USART_Config+0xc6>

		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003026:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003036:	60da      	str	r2, [r3, #12]
 8003038:	e007      	b.n	800304a <USART_Config+0xc6>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003048:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize ==USART_DATASIZE_8BIT){
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	799b      	ldrb	r3, [r3, #6]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d115      	bne.n	800307e <USART_Config+0xfa>

	    	// Inicialmente debe corroborarse si se quiere o no la paridad.
	    	if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_NONE){
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	79db      	ldrb	r3, [r3, #7]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d108      	bne.n	800306c <USART_Config+0xe8>
	    		// Si se quieren datos de 8 bits.
	    		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003068:	60da      	str	r2, [r3, #12]
 800306a:	e010      	b.n	800308e <USART_Config+0x10a>
	    	}
	    	else{
	    		// Si la partidad esta activada, se agrega un BIT adicional.
	    		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800307a:	60da      	str	r2, [r3, #12]
 800307c:	e007      	b.n	800308e <USART_Config+0x10a>
	    	}
	    }
	    else{
	    	// Se configuran 9 bits para el tamaño.
	    	ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800308c:	60da      	str	r2, [r3, #12]
	    }

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	7a1b      	ldrb	r3, [r3, #8]
 8003092:	2b03      	cmp	r3, #3
 8003094:	d84e      	bhi.n	8003134 <USART_Config+0x1b0>
 8003096:	a201      	add	r2, pc, #4	; (adr r2, 800309c <USART_Config+0x118>)
 8003098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309c:	080030ad 	.word	0x080030ad
 80030a0:	080030cf 	.word	0x080030cf
 80030a4:	080030f1 	.word	0x080030f1
 80030a8:	08003113 	.word	0x08003113
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691a      	ldr	r2, [r3, #16]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030ba:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030ca:	611a      	str	r2, [r3, #16]
		break;
 80030cc:	e043      	b.n	8003156 <USART_Config+0x1d2>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030dc:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030ec:	611a      	str	r2, [r3, #16]
		break;
 80030ee:	e032      	b.n	8003156 <USART_Config+0x1d2>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691a      	ldr	r2, [r3, #16]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030fe:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800310e:	611a      	str	r2, [r3, #16]
		break;
 8003110:	e021      	b.n	8003156 <USART_Config+0x1d2>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003120:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003130:	611a      	str	r2, [r3, #16]
		break;
 8003132:	e010      	b.n	8003156 <USART_Config+0x1d2>
	}
	default: {
		// En el caso por defecto seleccionamos 1 bit de parada
		// Escriba acá su código
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691a      	ldr	r2, [r3, #16]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003142:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003152:	611a      	str	r2, [r3, #16]
		break;
 8003154:	bf00      	nop
	 * decida utilizar el usuario. La función getConfig() retorna esta
	 * frecuencia en que se encuentra actualmente el reloj del sistema PLL,
	 * por tanto, se considera un condicional que incluye los cálculos para
	 * la frecuencia de 100 MHz y por defecto recurre a la frecuencia natural.
	 */
	if(actualFrecuency == 100000000){
 8003156:	f7ff fa5d 	bl	8002614 <getConfigPLL>
 800315a:	4603      	mov	r3, r0
 800315c:	4a1e      	ldr	r2, [pc, #120]	; (80031d8 <USART_Config+0x254>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d11d      	bne.n	800319e <USART_Config+0x21a>
		// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
		if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	795b      	ldrb	r3, [r3, #5]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d105      	bne.n	8003176 <USART_Config+0x1f2>
			// El valor a cargar es 651.041 -> Mantiza = 651,fraction = 0.041
			// Mantiza = 651 = 0x28b, fraction = 16 * 0.041 = 1
			// Valor a cargar 0x28B1
			// Configurando el Baudrate generator para una velocidad de 9600bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x28B1;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f642 02b1 	movw	r2, #10417	; 0x28b1
 8003172:	609a      	str	r2, [r3, #8]
 8003174:	e03a      	b.n	80031ec <USART_Config+0x268>
		}

		else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	795b      	ldrb	r3, [r3, #5]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d105      	bne.n	800318a <USART_Config+0x206>
			// El valor a cargar es 325.520 -> Mantiza = 325,fraction = 0.520
			// Mantiza = 325 = 0x145, fraction = 16 * 0.520 = 8
			// Valor a cargar 0x1458
			ptrUsartHandler->ptrUSARTx->BRR = 0x1458;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f241 4258 	movw	r2, #5208	; 0x1458
 8003186:	609a      	str	r2, [r3, #8]
 8003188:	e030      	b.n	80031ec <USART_Config+0x268>
		}

		else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	795b      	ldrb	r3, [r3, #5]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d12c      	bne.n	80031ec <USART_Config+0x268>
			// El valor a cargar es 54.253 -> Mantiza = 54,fraction = 0.253
			// Mantiza = 54 = 0x36, fraction = 16 * 0.253 = 4.
			ptrUsartHandler->ptrUSARTx->BRR = 0x364;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f44f 7259 	mov.w	r2, #868	; 0x364
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	e026      	b.n	80031ec <USART_Config+0x268>
		}
	// Caso por defecto de 16 MHz.
	}else{
		// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
		if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	795b      	ldrb	r3, [r3, #5]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d105      	bne.n	80031b2 <USART_Config+0x22e>
			// El valor a cargar es 104.1875 -> Mantiza = 104,fraction = 0.1875
			// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
			// Valor a cargar 0x0683
			// Configurando el Baudrate generator para una velocidad de 9600bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f240 6283 	movw	r2, #1667	; 0x683
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	e01c      	b.n	80031ec <USART_Config+0x268>
		}

		else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	795b      	ldrb	r3, [r3, #5]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d110      	bne.n	80031dc <USART_Config+0x258>
			// El valor a cargar es 52.0625 -> Mantiza = 52,fraction = 0.0625
			// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
			// Escriba acá su código y los comentarios que faltan
			// Valor a cargar 0x0341
			ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f240 3241 	movw	r2, #833	; 0x341
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	e012      	b.n	80031ec <USART_Config+0x268>
 80031c6:	bf00      	nop
 80031c8:	40011000 	.word	0x40011000
 80031cc:	40023800 	.word	0x40023800
 80031d0:	40011400 	.word	0x40011400
 80031d4:	40004400 	.word	0x40004400
 80031d8:	05f5e100 	.word	0x05f5e100
		}

		else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	795b      	ldrb	r3, [r3, #5]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d103      	bne.n	80031ec <USART_Config+0x268>
			// Escriba acá su código y los comentarios que faltan
			// El valor a cargar es 8.6875 -> Mantiza = 8,fraction = 0.6875
			// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11 = B.
			ptrUsartHandler->ptrUSARTx->BRR = 0x008B;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	228b      	movs	r2, #139	; 0x8b
 80031ea:	609a      	str	r2, [r3, #8]
		}
	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	791b      	ldrb	r3, [r3, #4]
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d847      	bhi.n	8003284 <USART_Config+0x300>
 80031f4:	a201      	add	r2, pc, #4	; (adr r2, 80031fc <USART_Config+0x278>)
 80031f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fa:	bf00      	nop
 80031fc:	0800320d 	.word	0x0800320d
 8003200:	0800321f 	.word	0x0800321f
 8003204:	08003231 	.word	0x08003231
 8003208:	08003253 	.word	0x08003253
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_TE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0208 	orr.w	r2, r2, #8
 800321a:	60da      	str	r2, [r3, #12]
		break;
 800321c:	e04b      	b.n	80032b6 <USART_Config+0x332>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_RE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0204 	orr.w	r2, r2, #4
 800322c:	60da      	str	r2, [r3, #12]
		break;
 800322e:	e042      	b.n	80032b6 <USART_Config+0x332>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmision como recepcion
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_TE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0208 	orr.w	r2, r2, #8
 800323e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_RE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0204 	orr.w	r2, r2, #4
 800324e:	60da      	str	r2, [r3, #12]
		break;
 8003250:	e031      	b.n	80032b6 <USART_Config+0x332>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		// Escriba acá su código
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0204 	bic.w	r2, r2, #4
 8003260:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0208 	bic.w	r2, r2, #8
 8003270:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003280:	60da      	str	r2, [r3, #12]
		break;
 8003282:	e018      	b.n	80032b6 <USART_Config+0x332>
	}

	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0204 	bic.w	r2, r2, #4
 8003292:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0208 	bic.w	r2, r2, #8
 80032a2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032b2:	60da      	str	r2, [r3, #12]
		break;
 80032b4:	bf00      	nop
	}
	}

	// 2.7 Activamos el módulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	791b      	ldrb	r3, [r3, #4]
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d007      	beq.n	80032ce <USART_Config+0x34a>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032cc:	60da      	str	r2, [r3, #12]
	}
	// Se verifica la activación de la interrupcion Rx
	if (ptrUsartHandler->ptrUSARTx == USART1){
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a28      	ldr	r2, [pc, #160]	; (8003374 <USART_Config+0x3f0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d03a      	beq.n	800334e <USART_Config+0x3ca>
	}

	/* 1.2 Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2) {
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a26      	ldr	r2, [pc, #152]	; (8003378 <USART_Config+0x3f4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d118      	bne.n	8003314 <USART_Config+0x390>
		if (ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE) {
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	7a5b      	ldrb	r3, [r3, #9]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d10b      	bne.n	8003302 <USART_Config+0x37e>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0220 	orr.w	r2, r2, #32
 80032f8:	60da      	str	r2, [r3, #12]
			NVIC_EnableIRQ(USART2_IRQn);
 80032fa:	2026      	movs	r0, #38	; 0x26
 80032fc:	f7ff fe26 	bl	8002f4c <__NVIC_EnableIRQ>
 8003300:	e025      	b.n	800334e <USART_Config+0x3ca>
		} else {
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0220 	bic.w	r2, r2, #32
 8003310:	60da      	str	r2, [r3, #12]
 8003312:	e01c      	b.n	800334e <USART_Config+0x3ca>
		}
	}

	/* 1.3 Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6) {
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a18      	ldr	r2, [pc, #96]	; (800337c <USART_Config+0x3f8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d117      	bne.n	800334e <USART_Config+0x3ca>
		if (ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE) {
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	7a5b      	ldrb	r3, [r3, #9]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d10b      	bne.n	800333e <USART_Config+0x3ba>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0220 	orr.w	r2, r2, #32
 8003334:	60da      	str	r2, [r3, #12]
			NVIC_EnableIRQ(USART6_IRQn);
 8003336:	2047      	movs	r0, #71	; 0x47
 8003338:	f7ff fe08 	bl	8002f4c <__NVIC_EnableIRQ>
 800333c:	e007      	b.n	800334e <USART_Config+0x3ca>
		} else {
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0220 	bic.w	r2, r2, #32
 800334c:	60da      	str	r2, [r3, #12]
		}
	}

	// 2.8 Activamos el módulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	791b      	ldrb	r3, [r3, #4]
 8003352:	2b03      	cmp	r3, #3
 8003354:	d007      	beq.n	8003366 <USART_Config+0x3e2>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003364:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8003366:	b662      	cpsie	i
}
 8003368:	bf00      	nop
	}

	// Activamos las interrupciones globales
	__enable_irq();
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40011000 	.word	0x40011000
 8003378:	40004400 	.word	0x40004400
 800337c:	40011400 	.word	0x40011400

08003380 <usart2Rx_Callback>:

/* Similar a como se hizo con las EXTI, se crean los callbacks para los USART */

__attribute__((weak)) void usart2Rx_Callback(void){
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the usart2Rx_Callback could be implemented in the main file
	   */
	__NOP();
 8003384:	bf00      	nop
}
 8003386:	bf00      	nop
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr

0800338e <writeChar>:
	   */
	__NOP();
}

/* funcion para escribir un solo char */
int writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
 8003396:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8003398:	e000      	b.n	800339c <writeChar+0xe>
		__NOP();
 800339a:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f7      	beq.n	800339a <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	605a      	str	r2, [r3, #4]

	return dataToSend;
 80033b2:	683b      	ldr	r3, [r7, #0]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr

080033be <writeMsg>:

// función para escribir un mensaje
void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 80033be:	b580      	push	{r7, lr}
 80033c0:	b082      	sub	sp, #8
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	6039      	str	r1, [r7, #0]
	while(*msgToSend != '\0'){
 80033c8:	e008      	b.n	80033dc <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	4619      	mov	r1, r3
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff ffdc 	bl	800338e <writeChar>
		msgToSend++;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	3301      	adds	r3, #1
 80033da:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1f2      	bne.n	80033ca <writeMsg+0xc>
	}
}
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <getRxData>:

// función auxiliar
uint8_t getRxData(void){
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
	return auxRxData;
 80033f4:	4b02      	ldr	r3, [pc, #8]	; (8003400 <getRxData+0x10>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bc80      	pop	{r7}
 80033fe:	4770      	bx	lr
 8003400:	200038d2 	.word	0x200038d2

08003404 <USART2_IRQHandler>:

/* INTERRUPCIONES DEL USART */
// Se debe crear una variable auxiliar para la lectura que se declara al inicio.

/* Para el USART 2 */
void USART2_IRQHandler(void){
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
	// Se evalúa si la interrupción que se dio es por RX
	if(USART2->SR & USART_SR_RXNE){
 8003408:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <USART2_IRQHandler+0x30>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0320 	and.w	r3, r3, #32
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00c      	beq.n	800342e <USART2_IRQHandler+0x2a>
		USART2->SR &= ~USART_SR_RXNE;
 8003414:	4b07      	ldr	r3, [pc, #28]	; (8003434 <USART2_IRQHandler+0x30>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a06      	ldr	r2, [pc, #24]	; (8003434 <USART2_IRQHandler+0x30>)
 800341a:	f023 0320 	bic.w	r3, r3, #32
 800341e:	6013      	str	r3, [r2, #0]
		auxRxData = (uint8_t) USART2->DR;
 8003420:	4b04      	ldr	r3, [pc, #16]	; (8003434 <USART2_IRQHandler+0x30>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	b2da      	uxtb	r2, r3
 8003426:	4b04      	ldr	r3, [pc, #16]	; (8003438 <USART2_IRQHandler+0x34>)
 8003428:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 800342a:	f7ff ffa9 	bl	8003380 <usart2Rx_Callback>
	}
}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40004400 	.word	0x40004400
 8003438:	200038d2 	.word	0x200038d2

0800343c <USART6_IRQHandler>:

/* Para el USART 6 */
void USART6_IRQHandler(void){
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
	// Evaluamos que la interrupción que se dio es por RX
	if(USART6->SR & USART_SR_RXNE){
 8003440:	4b0a      	ldr	r3, [pc, #40]	; (800346c <USART6_IRQHandler+0x30>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00c      	beq.n	8003466 <USART6_IRQHandler+0x2a>
		USART6->SR &= ~USART_SR_RXNE;
 800344c:	4b07      	ldr	r3, [pc, #28]	; (800346c <USART6_IRQHandler+0x30>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a06      	ldr	r2, [pc, #24]	; (800346c <USART6_IRQHandler+0x30>)
 8003452:	f023 0320 	bic.w	r3, r3, #32
 8003456:	6013      	str	r3, [r2, #0]
		auxRxData = (uint8_t) USART6->DR;
 8003458:	4b04      	ldr	r3, [pc, #16]	; (800346c <USART6_IRQHandler+0x30>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	b2da      	uxtb	r2, r3
 800345e:	4b04      	ldr	r3, [pc, #16]	; (8003470 <USART6_IRQHandler+0x34>)
 8003460:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 8003462:	f7fe fb0f 	bl	8001a84 <usart6Rx_Callback>
	}
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40011400 	.word	0x40011400
 8003470:	200038d2 	.word	0x200038d2

08003474 <__NVIC_EnableIRQ>:
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800347e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003482:	2b00      	cmp	r3, #0
 8003484:	db0b      	blt.n	800349e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	f003 021f 	and.w	r2, r3, #31
 800348c:	4906      	ldr	r1, [pc, #24]	; (80034a8 <__NVIC_EnableIRQ+0x34>)
 800348e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	2001      	movs	r0, #1
 8003496:	fa00 f202 	lsl.w	r2, r0, r2
 800349a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr
 80034a8:	e000e100 	.word	0xe000e100

080034ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	4603      	mov	r3, r0
 80034b4:	6039      	str	r1, [r7, #0]
 80034b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	db0a      	blt.n	80034d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	490c      	ldr	r1, [pc, #48]	; (80034f8 <__NVIC_SetPriority+0x4c>)
 80034c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ca:	0112      	lsls	r2, r2, #4
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	440b      	add	r3, r1
 80034d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034d4:	e00a      	b.n	80034ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	4908      	ldr	r1, [pc, #32]	; (80034fc <__NVIC_SetPriority+0x50>)
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	3b04      	subs	r3, #4
 80034e4:	0112      	lsls	r2, r2, #4
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	440b      	add	r3, r1
 80034ea:	761a      	strb	r2, [r3, #24]
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	e000e100 	.word	0xe000e100
 80034fc:	e000ed00 	.word	0xe000ed00

08003500 <getADC>:
/*
 * Función que retorna el ultimo dato adquirido por la ADC
 * La idea es que esta función es llamada desde la función callback, de forma que
 * siempre se obtiene el valor mas actual de la conversión ADC.
 * */
uint16_t getADC(void){
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
	// Esta variable es actualizada en la ISR de la conversión, cada vez que se obtiene
	// un nuevo valor.
	return adcRawData;
 8003504:	4b02      	ldr	r3, [pc, #8]	; (8003510 <getADC+0x10>)
 8003506:	881b      	ldrh	r3, [r3, #0]
}
 8003508:	4618      	mov	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr
 8003510:	200038d4 	.word	0x200038d4

08003514 <ADC_IRQHandler>:

/*
 * Esta es la ISR de la interrupción por conversión ADC
 */
void ADC_IRQHandler(void){
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
	// Evaluamos que se dio la interrupción por conversión ADC
	if(ADC1->SR & ADC_SR_EOC){
 8003518:	4b07      	ldr	r3, [pc, #28]	; (8003538 <ADC_IRQHandler+0x24>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d006      	beq.n	8003532 <ADC_IRQHandler+0x1e>
		// Leemos el resultado de la conversión ADC y lo cargamos en una variale auxiliar
		// la cual es utilizada en la función getADC()
		adcRawData = ADC1->DR;
 8003524:	4b04      	ldr	r3, [pc, #16]	; (8003538 <ADC_IRQHandler+0x24>)
 8003526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003528:	b29a      	uxth	r2, r3
 800352a:	4b04      	ldr	r3, [pc, #16]	; (800353c <ADC_IRQHandler+0x28>)
 800352c:	801a      	strh	r2, [r3, #0]

		// Hacemos el llamado a la función que se ejecutará en el main
		adcComplete_Callback();
 800352e:	f7fe fab5 	bl	8001a9c <adcComplete_Callback>
	}

}
 8003532:	bf00      	nop
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40012000 	.word	0x40012000
 800353c:	200038d4 	.word	0x200038d4

08003540 <configAnalogPin>:
/*
 * Con esta función configuramos que pin deseamos que funcione como canal ADC
 * Esta funcion trabaja con el GPIOxDriver, por lo cual requiere que se incluya
 * dicho driver.
 */
void configAnalogPin(uint8_t adcChannel){
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	71fb      	strb	r3, [r7, #7]

	// Con este switch seleccionamos el canal y lo configuramos como análogo.
	switch (adcChannel) {
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	2b0f      	cmp	r3, #15
 800354e:	f200 8093 	bhi.w	8003678 <configAnalogPin+0x138>
 8003552:	a201      	add	r2, pc, #4	; (adr r2, 8003558 <configAnalogPin+0x18>)
 8003554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003558:	08003599 	.word	0x08003599
 800355c:	080035a7 	.word	0x080035a7
 8003560:	080035b5 	.word	0x080035b5
 8003564:	080035c3 	.word	0x080035c3
 8003568:	080035d1 	.word	0x080035d1
 800356c:	080035df 	.word	0x080035df
 8003570:	080035ed 	.word	0x080035ed
 8003574:	080035fb 	.word	0x080035fb
 8003578:	08003609 	.word	0x08003609
 800357c:	08003617 	.word	0x08003617
 8003580:	08003625 	.word	0x08003625
 8003584:	08003633 	.word	0x08003633
 8003588:	08003641 	.word	0x08003641
 800358c:	0800364f 	.word	0x0800364f
 8003590:	0800365d 	.word	0x0800365d
 8003594:	0800366b 	.word	0x0800366b
	 * asignar. (Esto está más o menos en la página 40 del datasheet del micro)
	 */

	case ADC_CHANNEL_0: {
		// Es el pin PA0
		handlerAdcPin.pGPIOx 						= GPIOA;
 8003598:	4b3d      	ldr	r3, [pc, #244]	; (8003690 <configAnalogPin+0x150>)
 800359a:	4a3e      	ldr	r2, [pc, #248]	; (8003694 <configAnalogPin+0x154>)
 800359c:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 800359e:	4b3c      	ldr	r3, [pc, #240]	; (8003690 <configAnalogPin+0x150>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	711a      	strb	r2, [r3, #4]
		// Nota: Para el ejercicio inicial solo se necesita este canal, los demas
		// se necesitan para trabajos posteriores.
		break;
 80035a4:	e069      	b.n	800367a <configAnalogPin+0x13a>
	}
		;

	case ADC_CHANNEL_1: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx						= GPIOA;
 80035a6:	4b3a      	ldr	r3, [pc, #232]	; (8003690 <configAnalogPin+0x150>)
 80035a8:	4a3a      	ldr	r2, [pc, #232]	; (8003694 <configAnalogPin+0x154>)
 80035aa:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 80035ac:	4b38      	ldr	r3, [pc, #224]	; (8003690 <configAnalogPin+0x150>)
 80035ae:	2201      	movs	r2, #1
 80035b0:	711a      	strb	r2, [r3, #4]

		break;
 80035b2:	e062      	b.n	800367a <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_2: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 80035b4:	4b36      	ldr	r3, [pc, #216]	; (8003690 <configAnalogPin+0x150>)
 80035b6:	4a37      	ldr	r2, [pc, #220]	; (8003694 <configAnalogPin+0x154>)
 80035b8:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 80035ba:	4b35      	ldr	r3, [pc, #212]	; (8003690 <configAnalogPin+0x150>)
 80035bc:	2202      	movs	r2, #2
 80035be:	711a      	strb	r2, [r3, #4]

		break;
 80035c0:	e05b      	b.n	800367a <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_3: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 80035c2:	4b33      	ldr	r3, [pc, #204]	; (8003690 <configAnalogPin+0x150>)
 80035c4:	4a33      	ldr	r2, [pc, #204]	; (8003694 <configAnalogPin+0x154>)
 80035c6:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 80035c8:	4b31      	ldr	r3, [pc, #196]	; (8003690 <configAnalogPin+0x150>)
 80035ca:	2203      	movs	r2, #3
 80035cc:	711a      	strb	r2, [r3, #4]

		break;
 80035ce:	e054      	b.n	800367a <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_4: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 80035d0:	4b2f      	ldr	r3, [pc, #188]	; (8003690 <configAnalogPin+0x150>)
 80035d2:	4a30      	ldr	r2, [pc, #192]	; (8003694 <configAnalogPin+0x154>)
 80035d4:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 80035d6:	4b2e      	ldr	r3, [pc, #184]	; (8003690 <configAnalogPin+0x150>)
 80035d8:	2204      	movs	r2, #4
 80035da:	711a      	strb	r2, [r3, #4]

		break;
 80035dc:	e04d      	b.n	800367a <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_5: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 80035de:	4b2c      	ldr	r3, [pc, #176]	; (8003690 <configAnalogPin+0x150>)
 80035e0:	4a2c      	ldr	r2, [pc, #176]	; (8003694 <configAnalogPin+0x154>)
 80035e2:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 80035e4:	4b2a      	ldr	r3, [pc, #168]	; (8003690 <configAnalogPin+0x150>)
 80035e6:	2205      	movs	r2, #5
 80035e8:	711a      	strb	r2, [r3, #4]

		break;
 80035ea:	e046      	b.n	800367a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_6: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 80035ec:	4b28      	ldr	r3, [pc, #160]	; (8003690 <configAnalogPin+0x150>)
 80035ee:	4a29      	ldr	r2, [pc, #164]	; (8003694 <configAnalogPin+0x154>)
 80035f0:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_6;
 80035f2:	4b27      	ldr	r3, [pc, #156]	; (8003690 <configAnalogPin+0x150>)
 80035f4:	2206      	movs	r2, #6
 80035f6:	711a      	strb	r2, [r3, #4]

		break;
 80035f8:	e03f      	b.n	800367a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_7: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 80035fa:	4b25      	ldr	r3, [pc, #148]	; (8003690 <configAnalogPin+0x150>)
 80035fc:	4a25      	ldr	r2, [pc, #148]	; (8003694 <configAnalogPin+0x154>)
 80035fe:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_7;
 8003600:	4b23      	ldr	r3, [pc, #140]	; (8003690 <configAnalogPin+0x150>)
 8003602:	2207      	movs	r2, #7
 8003604:	711a      	strb	r2, [r3, #4]

		break;
 8003606:	e038      	b.n	800367a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_8: {
		//Es el pin PB0
		handlerAdcPin.pGPIOx 						= GPIOB;
 8003608:	4b21      	ldr	r3, [pc, #132]	; (8003690 <configAnalogPin+0x150>)
 800360a:	4a23      	ldr	r2, [pc, #140]	; (8003698 <configAnalogPin+0x158>)
 800360c:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 800360e:	4b20      	ldr	r3, [pc, #128]	; (8003690 <configAnalogPin+0x150>)
 8003610:	2200      	movs	r2, #0
 8003612:	711a      	strb	r2, [r3, #4]
		break;
 8003614:	e031      	b.n	800367a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_9: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOB;
 8003616:	4b1e      	ldr	r3, [pc, #120]	; (8003690 <configAnalogPin+0x150>)
 8003618:	4a1f      	ldr	r2, [pc, #124]	; (8003698 <configAnalogPin+0x158>)
 800361a:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 800361c:	4b1c      	ldr	r3, [pc, #112]	; (8003690 <configAnalogPin+0x150>)
 800361e:	2201      	movs	r2, #1
 8003620:	711a      	strb	r2, [r3, #4]

		break;
 8003622:	e02a      	b.n	800367a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_10: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8003624:	4b1a      	ldr	r3, [pc, #104]	; (8003690 <configAnalogPin+0x150>)
 8003626:	4a1d      	ldr	r2, [pc, #116]	; (800369c <configAnalogPin+0x15c>)
 8003628:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 800362a:	4b19      	ldr	r3, [pc, #100]	; (8003690 <configAnalogPin+0x150>)
 800362c:	2200      	movs	r2, #0
 800362e:	711a      	strb	r2, [r3, #4]

		break;
 8003630:	e023      	b.n	800367a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_11: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8003632:	4b17      	ldr	r3, [pc, #92]	; (8003690 <configAnalogPin+0x150>)
 8003634:	4a19      	ldr	r2, [pc, #100]	; (800369c <configAnalogPin+0x15c>)
 8003636:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8003638:	4b15      	ldr	r3, [pc, #84]	; (8003690 <configAnalogPin+0x150>)
 800363a:	2201      	movs	r2, #1
 800363c:	711a      	strb	r2, [r3, #4]

		break;
 800363e:	e01c      	b.n	800367a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_12: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8003640:	4b13      	ldr	r3, [pc, #76]	; (8003690 <configAnalogPin+0x150>)
 8003642:	4a16      	ldr	r2, [pc, #88]	; (800369c <configAnalogPin+0x15c>)
 8003644:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8003646:	4b12      	ldr	r3, [pc, #72]	; (8003690 <configAnalogPin+0x150>)
 8003648:	2202      	movs	r2, #2
 800364a:	711a      	strb	r2, [r3, #4]

		break;
 800364c:	e015      	b.n	800367a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_13: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 800364e:	4b10      	ldr	r3, [pc, #64]	; (8003690 <configAnalogPin+0x150>)
 8003650:	4a12      	ldr	r2, [pc, #72]	; (800369c <configAnalogPin+0x15c>)
 8003652:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8003654:	4b0e      	ldr	r3, [pc, #56]	; (8003690 <configAnalogPin+0x150>)
 8003656:	2203      	movs	r2, #3
 8003658:	711a      	strb	r2, [r3, #4]

		break;
 800365a:	e00e      	b.n	800367a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_14: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 800365c:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <configAnalogPin+0x150>)
 800365e:	4a0f      	ldr	r2, [pc, #60]	; (800369c <configAnalogPin+0x15c>)
 8003660:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 8003662:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <configAnalogPin+0x150>)
 8003664:	2204      	movs	r2, #4
 8003666:	711a      	strb	r2, [r3, #4]

		break;
 8003668:	e007      	b.n	800367a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_15: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 800366a:	4b09      	ldr	r3, [pc, #36]	; (8003690 <configAnalogPin+0x150>)
 800366c:	4a0b      	ldr	r2, [pc, #44]	; (800369c <configAnalogPin+0x15c>)
 800366e:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8003670:	4b07      	ldr	r3, [pc, #28]	; (8003690 <configAnalogPin+0x150>)
 8003672:	2205      	movs	r2, #5
 8003674:	711a      	strb	r2, [r3, #4]

		break;
 8003676:	e000      	b.n	800367a <configAnalogPin+0x13a>
	}
	default: {
		break;
 8003678:	bf00      	nop

	}
	/*
	 * Se carga la información de cada pin configurado sobre el GPIO.
	 */
	handlerAdcPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 800367a:	4b05      	ldr	r3, [pc, #20]	; (8003690 <configAnalogPin+0x150>)
 800367c:	2203      	movs	r2, #3
 800367e:	715a      	strb	r2, [r3, #5]
	GPIO_Config(&handlerAdcPin);
 8003680:	4803      	ldr	r0, [pc, #12]	; (8003690 <configAnalogPin+0x150>)
 8003682:	f7fe fb8b 	bl	8001d9c <GPIO_Config>
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	200038d8 	.word	0x200038d8
 8003694:	40020000 	.word	0x40020000
 8003698:	40020400 	.word	0x40020400
 800369c:	40020800 	.word	0x40020800

080036a0 <adcConfigEvents>:
 * de la conversión adc. Los bits correspondientes a EXTSEL jerarquizan los
 * eventos externos dependiendo del canal que se quiera utilizar en cada uno
 * de los timmers disponibles para este propósito. Ver página 231 del reference
 * manual.
 */
void adcConfigEvents(ADC_Config_t *adcConfig) {
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]

	// Trigger detection on the rising edge, se toman los flancos
	// de bajada para los trigger externos
	ADC1->CR2 |= ADC_CR2_EXTEN_0;
 80036a8:	4b42      	ldr	r3, [pc, #264]	; (80037b4 <adcConfigEvents+0x114>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	4a41      	ldr	r2, [pc, #260]	; (80037b4 <adcConfigEvents+0x114>)
 80036ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b2:	6093      	str	r3, [r2, #8]

	if (adcConfig->AdcEventType == TIMER_ADC_EVENT) {
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	7a1b      	ldrb	r3, [r3, #8]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d16f      	bne.n	800379c <adcConfigEvents+0xfc>
		switch (adcConfig->AdcChannelEvent) {
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	7a5b      	ldrb	r3, [r3, #9]
 80036c0:	2b0a      	cmp	r3, #10
 80036c2:	d864      	bhi.n	800378e <adcConfigEvents+0xee>
 80036c4:	a201      	add	r2, pc, #4	; (adr r2, 80036cc <adcConfigEvents+0x2c>)
 80036c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ca:	bf00      	nop
 80036cc:	080036f9 	.word	0x080036f9
 80036d0:	08003703 	.word	0x08003703
 80036d4:	08003711 	.word	0x08003711
 80036d8:	0800371f 	.word	0x0800371f
 80036dc:	0800372d 	.word	0x0800372d
 80036e0:	0800373b 	.word	0x0800373b
 80036e4:	08003749 	.word	0x08003749
 80036e8:	08003757 	.word	0x08003757
 80036ec:	08003765 	.word	0x08003765
 80036f0:	08003773 	.word	0x08003773
 80036f4:	08003781 	.word	0x08003781

		case TIM1_CH1: {
			// Evento TIM1 CC1 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x0 << ADC_CR2_EXTSEL_Pos);
 80036f8:	4b2e      	ldr	r3, [pc, #184]	; (80037b4 <adcConfigEvents+0x114>)
 80036fa:	4a2e      	ldr	r2, [pc, #184]	; (80037b4 <adcConfigEvents+0x114>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	6093      	str	r3, [r2, #8]
			break;
 8003700:	e053      	b.n	80037aa <adcConfigEvents+0x10a>
		}

		case TIM1_CH2: {
			// Evento TIM1 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x1 << ADC_CR2_EXTSEL_Pos);
 8003702:	4b2c      	ldr	r3, [pc, #176]	; (80037b4 <adcConfigEvents+0x114>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	4a2b      	ldr	r2, [pc, #172]	; (80037b4 <adcConfigEvents+0x114>)
 8003708:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800370c:	6093      	str	r3, [r2, #8]
			break;
 800370e:	e04c      	b.n	80037aa <adcConfigEvents+0x10a>
		}

		case TIM1_CH3: {
			// Evento TIM1 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x2 << ADC_CR2_EXTSEL_Pos);
 8003710:	4b28      	ldr	r3, [pc, #160]	; (80037b4 <adcConfigEvents+0x114>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4a27      	ldr	r2, [pc, #156]	; (80037b4 <adcConfigEvents+0x114>)
 8003716:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800371a:	6093      	str	r3, [r2, #8]
			break;
 800371c:	e045      	b.n	80037aa <adcConfigEvents+0x10a>
		}

		case TIM2_CH2: {
			// Evento TIM2 CC2 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x3 << ADC_CR2_EXTSEL_Pos);
 800371e:	4b25      	ldr	r3, [pc, #148]	; (80037b4 <adcConfigEvents+0x114>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	4a24      	ldr	r2, [pc, #144]	; (80037b4 <adcConfigEvents+0x114>)
 8003724:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8003728:	6093      	str	r3, [r2, #8]
			break;
 800372a:	e03e      	b.n	80037aa <adcConfigEvents+0x10a>
		}

		case TIM2_CH3: {
			// Evento TIM2 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x4 << ADC_CR2_EXTSEL_Pos);
 800372c:	4b21      	ldr	r3, [pc, #132]	; (80037b4 <adcConfigEvents+0x114>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	4a20      	ldr	r2, [pc, #128]	; (80037b4 <adcConfigEvents+0x114>)
 8003732:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003736:	6093      	str	r3, [r2, #8]
			break;
 8003738:	e037      	b.n	80037aa <adcConfigEvents+0x10a>
		}

		case TIM2_CH4: {
			// Evento TIM2 CC4 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x5 << ADC_CR2_EXTSEL_Pos);
 800373a:	4b1e      	ldr	r3, [pc, #120]	; (80037b4 <adcConfigEvents+0x114>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	4a1d      	ldr	r2, [pc, #116]	; (80037b4 <adcConfigEvents+0x114>)
 8003740:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8003744:	6093      	str	r3, [r2, #8]
			break;
 8003746:	e030      	b.n	80037aa <adcConfigEvents+0x10a>
		}

		case TIM3_CH1: {
			// Evento TIM3 CC1 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x7 << ADC_CR2_EXTSEL_Pos);
 8003748:	4b1a      	ldr	r3, [pc, #104]	; (80037b4 <adcConfigEvents+0x114>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	4a19      	ldr	r2, [pc, #100]	; (80037b4 <adcConfigEvents+0x114>)
 800374e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003752:	6093      	str	r3, [r2, #8]
			break;
 8003754:	e029      	b.n	80037aa <adcConfigEvents+0x10a>
		}

		case TIM4_CH4: {
			// Evento TIM4 CC4 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x9 << ADC_CR2_EXTSEL_Pos);
 8003756:	4b17      	ldr	r3, [pc, #92]	; (80037b4 <adcConfigEvents+0x114>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	4a16      	ldr	r2, [pc, #88]	; (80037b4 <adcConfigEvents+0x114>)
 800375c:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
 8003760:	6093      	str	r3, [r2, #8]
			break;
 8003762:	e022      	b.n	80037aa <adcConfigEvents+0x10a>
		}

		case TIM5_CH1: {
			// Evento TIM5 CC1 event para lanzar la conversion ADC
			ADC1->CR2 |= (0xA << ADC_CR2_EXTSEL_Pos);
 8003764:	4b13      	ldr	r3, [pc, #76]	; (80037b4 <adcConfigEvents+0x114>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	4a12      	ldr	r2, [pc, #72]	; (80037b4 <adcConfigEvents+0x114>)
 800376a:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
 800376e:	6093      	str	r3, [r2, #8]
			break;
 8003770:	e01b      	b.n	80037aa <adcConfigEvents+0x10a>
		}

		case TIM5_CH2: {
			// Evento TIM5 CC2 event para lanzar la conversion ADC
			ADC1->CR2 |= (0xB << ADC_CR2_EXTSEL_Pos);
 8003772:	4b10      	ldr	r3, [pc, #64]	; (80037b4 <adcConfigEvents+0x114>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	4a0f      	ldr	r2, [pc, #60]	; (80037b4 <adcConfigEvents+0x114>)
 8003778:	f043 6330 	orr.w	r3, r3, #184549376	; 0xb000000
 800377c:	6093      	str	r3, [r2, #8]
			break;
 800377e:	e014      	b.n	80037aa <adcConfigEvents+0x10a>
		}

		case TIM5_CH3: {
			// Evento TIM5 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0xC << ADC_CR2_EXTSEL_Pos);
 8003780:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <adcConfigEvents+0x114>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	4a0b      	ldr	r2, [pc, #44]	; (80037b4 <adcConfigEvents+0x114>)
 8003786:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 800378a:	6093      	str	r3, [r2, #8]
			break;
 800378c:	e00d      	b.n	80037aa <adcConfigEvents+0x10a>
		}

		default: {
			// 1100: Timer 5 CC3 event
			ADC1->CR2 |= (0xC << ADC_CR2_EXTSEL_Pos);
 800378e:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <adcConfigEvents+0x114>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	4a08      	ldr	r2, [pc, #32]	; (80037b4 <adcConfigEvents+0x114>)
 8003794:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8003798:	6093      	str	r3, [r2, #8]
			break;
 800379a:	e006      	b.n	80037aa <adcConfigEvents+0x10a>

		}
	}

	else {
		ADC1->CR2 |= (0xF << ADC_CR2_EXTSEL_Pos);
 800379c:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <adcConfigEvents+0x114>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	4a04      	ldr	r2, [pc, #16]	; (80037b4 <adcConfigEvents+0x114>)
 80037a2:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80037a6:	6093      	str	r3, [r2, #8]
	}
}
 80037a8:	bf00      	nop
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr
 80037b4:	40012000 	.word	0x40012000

080037b8 <adcMultiChannel>:
 * para realizar varias conversiones ADC. La función recibe como parámetros
 * la configuración del ADC y el número de conversiones que se requieren,
 * que para efectos prácticos es el número de canales sobre los cuales
 * se van a hacer las conversiones.
 */
void adcMultiChannel(ADC_Config_t *adcConfig, uint8_t numberOfConversion){
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	460b      	mov	r3, r1
 80037c2:	70fb      	strb	r3, [r7, #3]
	for(counter5 = 0; counter5<numberOfConversion; counter5++){
 80037c4:	4b8b      	ldr	r3, [pc, #556]	; (80039f4 <adcMultiChannel+0x23c>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	701a      	strb	r2, [r3, #0]
 80037ca:	e00e      	b.n	80037ea <adcMultiChannel+0x32>
		/* 1. Configuramos el PinX para que cumpla la función de canal análogo deseado. */
		configAnalogPin(adcConfig->adcMultiChannel[counter5]);
 80037cc:	4b89      	ldr	r3, [pc, #548]	; (80039f4 <adcMultiChannel+0x23c>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	461a      	mov	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4413      	add	r3, r2
 80037d6:	7a9b      	ldrb	r3, [r3, #10]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff feb1 	bl	8003540 <configAnalogPin>
	for(counter5 = 0; counter5<numberOfConversion; counter5++){
 80037de:	4b85      	ldr	r3, [pc, #532]	; (80039f4 <adcMultiChannel+0x23c>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	3301      	adds	r3, #1
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	4b83      	ldr	r3, [pc, #524]	; (80039f4 <adcMultiChannel+0x23c>)
 80037e8:	701a      	strb	r2, [r3, #0]
 80037ea:	4b82      	ldr	r3, [pc, #520]	; (80039f4 <adcMultiChannel+0x23c>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	78fa      	ldrb	r2, [r7, #3]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d8eb      	bhi.n	80037cc <adcMultiChannel+0x14>
	}

	/* 2. Activamos la señal de reloj para el periférico ADC1 (bus APB2)*/
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80037f4:	4b80      	ldr	r3, [pc, #512]	; (80039f8 <adcMultiChannel+0x240>)
 80037f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f8:	4a7f      	ldr	r2, [pc, #508]	; (80039f8 <adcMultiChannel+0x240>)
 80037fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037fe:	6453      	str	r3, [r2, #68]	; 0x44

	// Limpiamos los registros antes de comenzar a configurar
	ADC1->CR1 = 0;
 8003800:	4b7e      	ldr	r3, [pc, #504]	; (80039fc <adcMultiChannel+0x244>)
 8003802:	2200      	movs	r2, #0
 8003804:	605a      	str	r2, [r3, #4]
	ADC1->CR2 = 0;
 8003806:	4b7d      	ldr	r3, [pc, #500]	; (80039fc <adcMultiChannel+0x244>)
 8003808:	2200      	movs	r2, #0
 800380a:	609a      	str	r2, [r3, #8]

	/* Comenzamos la configuración del ADC1 */
	/* 3. Resolución del ADC */
	// Preferible utilizar la conversión a 12 bits para usar
	// la máxima capacidad del microcontrolador.
	switch (adcConfig->resolution) {
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	785b      	ldrb	r3, [r3, #1]
 8003810:	2b03      	cmp	r3, #3
 8003812:	d83f      	bhi.n	8003894 <adcMultiChannel+0xdc>
 8003814:	a201      	add	r2, pc, #4	; (adr r2, 800381c <adcMultiChannel+0x64>)
 8003816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381a:	bf00      	nop
 800381c:	0800382d 	.word	0x0800382d
 8003820:	08003847 	.word	0x08003847
 8003824:	08003861 	.word	0x08003861
 8003828:	0800387b 	.word	0x0800387b
	case ADC_RESOLUTION_12_BIT: {

		ADC1->CR1 &= ~ADC_CR1_RES_0;
 800382c:	4b73      	ldr	r3, [pc, #460]	; (80039fc <adcMultiChannel+0x244>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	4a72      	ldr	r2, [pc, #456]	; (80039fc <adcMultiChannel+0x244>)
 8003832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003836:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_1;
 8003838:	4b70      	ldr	r3, [pc, #448]	; (80039fc <adcMultiChannel+0x244>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4a6f      	ldr	r2, [pc, #444]	; (80039fc <adcMultiChannel+0x244>)
 800383e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003842:	6053      	str	r3, [r2, #4]
		break;
 8003844:	e027      	b.n	8003896 <adcMultiChannel+0xde>
	}

	case ADC_RESOLUTION_10_BIT: {

		ADC1->CR1 |= ADC_CR1_RES_0;
 8003846:	4b6d      	ldr	r3, [pc, #436]	; (80039fc <adcMultiChannel+0x244>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	4a6c      	ldr	r2, [pc, #432]	; (80039fc <adcMultiChannel+0x244>)
 800384c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003850:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_1;
 8003852:	4b6a      	ldr	r3, [pc, #424]	; (80039fc <adcMultiChannel+0x244>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	4a69      	ldr	r2, [pc, #420]	; (80039fc <adcMultiChannel+0x244>)
 8003858:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800385c:	6053      	str	r3, [r2, #4]
		break;
 800385e:	e01a      	b.n	8003896 <adcMultiChannel+0xde>
	}

	case ADC_RESOLUTION_8_BIT: {

		ADC1->CR1 |= ADC_CR1_RES_1;
 8003860:	4b66      	ldr	r3, [pc, #408]	; (80039fc <adcMultiChannel+0x244>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	4a65      	ldr	r2, [pc, #404]	; (80039fc <adcMultiChannel+0x244>)
 8003866:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800386a:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_0;
 800386c:	4b63      	ldr	r3, [pc, #396]	; (80039fc <adcMultiChannel+0x244>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	4a62      	ldr	r2, [pc, #392]	; (80039fc <adcMultiChannel+0x244>)
 8003872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003876:	6053      	str	r3, [r2, #4]
		break;
 8003878:	e00d      	b.n	8003896 <adcMultiChannel+0xde>
	}

	case ADC_RESOLUTION_6_BIT: {
		ADC1->CR1 |= ADC_CR1_RES_0;
 800387a:	4b60      	ldr	r3, [pc, #384]	; (80039fc <adcMultiChannel+0x244>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	4a5f      	ldr	r2, [pc, #380]	; (80039fc <adcMultiChannel+0x244>)
 8003880:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003884:	6053      	str	r3, [r2, #4]
		ADC1->CR1 |= ADC_CR1_RES_1;
 8003886:	4b5d      	ldr	r3, [pc, #372]	; (80039fc <adcMultiChannel+0x244>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	4a5c      	ldr	r2, [pc, #368]	; (80039fc <adcMultiChannel+0x244>)
 800388c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003890:	6053      	str	r3, [r2, #4]
		break;
 8003892:	e000      	b.n	8003896 <adcMultiChannel+0xde>
	}

	default: {
		break;
 8003894:	bf00      	nop
	}
	}

	/* 4. Configuramos el modo Scan como ACTIVADO */
	ADC1->CR1 |= ADC_CR1_SCAN;
 8003896:	4b59      	ldr	r3, [pc, #356]	; (80039fc <adcMultiChannel+0x244>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	4a58      	ldr	r2, [pc, #352]	; (80039fc <adcMultiChannel+0x244>)
 800389c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a0:	6053      	str	r3, [r2, #4]
	// Se configura además el EOCS end of conversion.
	ADC1->CR2 |= ADC_CR2_EOCS;
 80038a2:	4b56      	ldr	r3, [pc, #344]	; (80039fc <adcMultiChannel+0x244>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	4a55      	ldr	r2, [pc, #340]	; (80039fc <adcMultiChannel+0x244>)
 80038a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038ac:	6093      	str	r3, [r2, #8]

	/* 5. Configuramos la alineación de los datos (derecha o izquierda) */
	if (adcConfig->dataAlignment == ADC_ALIGNMENT_RIGHT) {
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	791b      	ldrb	r3, [r3, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <adcMultiChannel+0x10c>
		// Alineación a la derecha (esta es la forma "natural")
		ADC1->CR2 &= ~ADC_CR2_ALIGN;
 80038b6:	4b51      	ldr	r3, [pc, #324]	; (80039fc <adcMultiChannel+0x244>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	4a50      	ldr	r2, [pc, #320]	; (80039fc <adcMultiChannel+0x244>)
 80038bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038c0:	6093      	str	r3, [r2, #8]
 80038c2:	e005      	b.n	80038d0 <adcMultiChannel+0x118>
	} else {
		// Alineación a la izquierda (para algunos cálculos matemáticos)
		ADC1->CR2 |= ADC_CR2_ALIGN;
 80038c4:	4b4d      	ldr	r3, [pc, #308]	; (80039fc <adcMultiChannel+0x244>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	4a4c      	ldr	r2, [pc, #304]	; (80039fc <adcMultiChannel+0x244>)
 80038ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038ce:	6093      	str	r3, [r2, #8]
	}

	/* 6. Desactivamos el "continuos mode" */
	ADC1->CR2 &= ~ADC_CR2_CONT;
 80038d0:	4b4a      	ldr	r3, [pc, #296]	; (80039fc <adcMultiChannel+0x244>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	4a49      	ldr	r2, [pc, #292]	; (80039fc <adcMultiChannel+0x244>)
 80038d6:	f023 0302 	bic.w	r3, r3, #2
 80038da:	6093      	str	r3, [r2, #8]

	/* 7. Acá se debería configurar el sampling...*/

	for(counter5 = 0; counter5 < numberOfConversion; counter5++){
 80038dc:	4b45      	ldr	r3, [pc, #276]	; (80039f4 <adcMultiChannel+0x23c>)
 80038de:	2200      	movs	r2, #0
 80038e0:	701a      	strb	r2, [r3, #0]
 80038e2:	e037      	b.n	8003954 <adcMultiChannel+0x19c>
		if (adcConfig->adcMultiChannel[counter5] <= ADC_CHANNEL_9) {
 80038e4:	4b43      	ldr	r3, [pc, #268]	; (80039f4 <adcMultiChannel+0x23c>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	461a      	mov	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4413      	add	r3, r2
 80038ee:	7a9b      	ldrb	r3, [r3, #10]
 80038f0:	2b09      	cmp	r3, #9
 80038f2:	d814      	bhi.n	800391e <adcMultiChannel+0x166>
			// Acá se establecen la cantidad de ciclos para cada canal (0 al 9)
			ADC1->SMPR2 |= (adcConfig->samplingPeriod << (3 * (adcConfig->adcMultiChannel[counter5])));
 80038f4:	4b41      	ldr	r3, [pc, #260]	; (80039fc <adcMultiChannel+0x244>)
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	885b      	ldrh	r3, [r3, #2]
 80038fc:	4618      	mov	r0, r3
 80038fe:	4b3d      	ldr	r3, [pc, #244]	; (80039f4 <adcMultiChannel+0x23c>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	4619      	mov	r1, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	440b      	add	r3, r1
 8003908:	7a9b      	ldrb	r3, [r3, #10]
 800390a:	4619      	mov	r1, r3
 800390c:	460b      	mov	r3, r1
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	440b      	add	r3, r1
 8003912:	fa00 f303 	lsl.w	r3, r0, r3
 8003916:	4939      	ldr	r1, [pc, #228]	; (80039fc <adcMultiChannel+0x244>)
 8003918:	4313      	orrs	r3, r2
 800391a:	610b      	str	r3, [r1, #16]
 800391c:	e014      	b.n	8003948 <adcMultiChannel+0x190>

		} else {
			// Acá se establecen la cantidad de ciclos para cada canal (10 al 18)
			ADC1->SMPR1 |= (adcConfig->samplingPeriod << (3 * (adcConfig->adcMultiChannel[counter5] - 10)));
 800391e:	4b37      	ldr	r3, [pc, #220]	; (80039fc <adcMultiChannel+0x244>)
 8003920:	68d9      	ldr	r1, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	885b      	ldrh	r3, [r3, #2]
 8003926:	4618      	mov	r0, r3
 8003928:	4b32      	ldr	r3, [pc, #200]	; (80039f4 <adcMultiChannel+0x23c>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4413      	add	r3, r2
 8003932:	7a9b      	ldrb	r3, [r3, #10]
 8003934:	f1a3 020a 	sub.w	r2, r3, #10
 8003938:	4613      	mov	r3, r2
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	4413      	add	r3, r2
 800393e:	fa00 f303 	lsl.w	r3, r0, r3
 8003942:	4a2e      	ldr	r2, [pc, #184]	; (80039fc <adcMultiChannel+0x244>)
 8003944:	430b      	orrs	r3, r1
 8003946:	60d3      	str	r3, [r2, #12]
	for(counter5 = 0; counter5 < numberOfConversion; counter5++){
 8003948:	4b2a      	ldr	r3, [pc, #168]	; (80039f4 <adcMultiChannel+0x23c>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	3301      	adds	r3, #1
 800394e:	b2da      	uxtb	r2, r3
 8003950:	4b28      	ldr	r3, [pc, #160]	; (80039f4 <adcMultiChannel+0x23c>)
 8003952:	701a      	strb	r2, [r3, #0]
 8003954:	4b27      	ldr	r3, [pc, #156]	; (80039f4 <adcMultiChannel+0x23c>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	78fa      	ldrb	r2, [r7, #3]
 800395a:	429a      	cmp	r2, r3
 800395c:	d8c2      	bhi.n	80038e4 <adcMultiChannel+0x12c>
		}
	}

	/* 8. Configuramos la secuencia y cuantos elementos hay en la secuencia */
	// Al hacerlo todo 0, estamos seleccionando solo 1 elemento en el conteo de la secuencia
	ADC1->SQR1 = (numberOfConversion - 1) << ADC_SQR1_L_Pos;
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	3b01      	subs	r3, #1
 8003962:	051a      	lsls	r2, r3, #20
 8003964:	4b25      	ldr	r3, [pc, #148]	; (80039fc <adcMultiChannel+0x244>)
 8003966:	62da      	str	r2, [r3, #44]	; 0x2c

	// Asignamos el orden de la conversión dependiendo del canal en que
	// se esté haciendo, de allí la variación en la agrupación de los
	// registros.
	for(counter5 = 0; counter5 < numberOfConversion; counter5++){
 8003968:	4b22      	ldr	r3, [pc, #136]	; (80039f4 <adcMultiChannel+0x23c>)
 800396a:	2200      	movs	r2, #0
 800396c:	701a      	strb	r2, [r3, #0]
 800396e:	e06a      	b.n	8003a46 <adcMultiChannel+0x28e>
		if(adcConfig->adcMultiChannel[counter5] <= 6){
 8003970:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <adcMultiChannel+0x23c>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	461a      	mov	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4413      	add	r3, r2
 800397a:	7a9b      	ldrb	r3, [r3, #10]
 800397c:	2b06      	cmp	r3, #6
 800397e:	d814      	bhi.n	80039aa <adcMultiChannel+0x1f2>
			ADC1->SQR3 |= (adcConfig->adcMultiChannel[counter5] << (5 * counter5));
 8003980:	4b1e      	ldr	r3, [pc, #120]	; (80039fc <adcMultiChannel+0x244>)
 8003982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003984:	4b1b      	ldr	r3, [pc, #108]	; (80039f4 <adcMultiChannel+0x23c>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	4619      	mov	r1, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	440b      	add	r3, r1
 800398e:	7a9b      	ldrb	r3, [r3, #10]
 8003990:	4618      	mov	r0, r3
 8003992:	4b18      	ldr	r3, [pc, #96]	; (80039f4 <adcMultiChannel+0x23c>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	4619      	mov	r1, r3
 8003998:	460b      	mov	r3, r1
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	fa00 f303 	lsl.w	r3, r0, r3
 80039a2:	4916      	ldr	r1, [pc, #88]	; (80039fc <adcMultiChannel+0x244>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	634b      	str	r3, [r1, #52]	; 0x34
 80039a8:	e047      	b.n	8003a3a <adcMultiChannel+0x282>
		}
		else if(adcConfig->adcMultiChannel[counter5] > 6 && adcConfig->adcMultiChannel[counter5] <= 12){
 80039aa:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <adcMultiChannel+0x23c>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4413      	add	r3, r2
 80039b4:	7a9b      	ldrb	r3, [r3, #10]
 80039b6:	2b06      	cmp	r3, #6
 80039b8:	d922      	bls.n	8003a00 <adcMultiChannel+0x248>
 80039ba:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <adcMultiChannel+0x23c>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4413      	add	r3, r2
 80039c4:	7a9b      	ldrb	r3, [r3, #10]
 80039c6:	2b0c      	cmp	r3, #12
 80039c8:	d81a      	bhi.n	8003a00 <adcMultiChannel+0x248>
			ADC1->SQR2 |= (adcConfig->adcMultiChannel[counter5] << (5 * (counter5 - 7)));
 80039ca:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <adcMultiChannel+0x244>)
 80039cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039ce:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <adcMultiChannel+0x23c>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4413      	add	r3, r2
 80039d8:	7a9b      	ldrb	r3, [r3, #10]
 80039da:	4618      	mov	r0, r3
 80039dc:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <adcMultiChannel+0x23c>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	1fda      	subs	r2, r3, #7
 80039e2:	4613      	mov	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	fa00 f303 	lsl.w	r3, r0, r3
 80039ec:	4a03      	ldr	r2, [pc, #12]	; (80039fc <adcMultiChannel+0x244>)
 80039ee:	430b      	orrs	r3, r1
 80039f0:	6313      	str	r3, [r2, #48]	; 0x30
 80039f2:	e022      	b.n	8003a3a <adcMultiChannel+0x282>
 80039f4:	200038d6 	.word	0x200038d6
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40012000 	.word	0x40012000
		}
		else if(adcConfig->adcMultiChannel[counter5] > 12){
 8003a00:	4b24      	ldr	r3, [pc, #144]	; (8003a94 <adcMultiChannel+0x2dc>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4413      	add	r3, r2
 8003a0a:	7a9b      	ldrb	r3, [r3, #10]
 8003a0c:	2b0c      	cmp	r3, #12
 8003a0e:	d914      	bls.n	8003a3a <adcMultiChannel+0x282>
			ADC1->SQR1 |= (adcConfig->adcMultiChannel[counter5] << (5 * (counter5 - 13)));
 8003a10:	4b21      	ldr	r3, [pc, #132]	; (8003a98 <adcMultiChannel+0x2e0>)
 8003a12:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a14:	4b1f      	ldr	r3, [pc, #124]	; (8003a94 <adcMultiChannel+0x2dc>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	7a9b      	ldrb	r3, [r3, #10]
 8003a20:	4618      	mov	r0, r3
 8003a22:	4b1c      	ldr	r3, [pc, #112]	; (8003a94 <adcMultiChannel+0x2dc>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	f1a3 020d 	sub.w	r2, r3, #13
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	fa00 f303 	lsl.w	r3, r0, r3
 8003a34:	4a18      	ldr	r2, [pc, #96]	; (8003a98 <adcMultiChannel+0x2e0>)
 8003a36:	430b      	orrs	r3, r1
 8003a38:	62d3      	str	r3, [r2, #44]	; 0x2c
	for(counter5 = 0; counter5 < numberOfConversion; counter5++){
 8003a3a:	4b16      	ldr	r3, [pc, #88]	; (8003a94 <adcMultiChannel+0x2dc>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <adcMultiChannel+0x2dc>)
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	4b13      	ldr	r3, [pc, #76]	; (8003a94 <adcMultiChannel+0x2dc>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	78fa      	ldrb	r2, [r7, #3]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d88f      	bhi.n	8003970 <adcMultiChannel+0x1b8>
		}
	}

	/* 9. Configuramos el preescaler del ADC en 2:1 (el mas rápido que se puede tener */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 8003a50:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <adcMultiChannel+0x2e4>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	4a11      	ldr	r2, [pc, #68]	; (8003a9c <adcMultiChannel+0x2e4>)
 8003a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a5a:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a5c:	b672      	cpsid	i
}
 8003a5e:	bf00      	nop

	/* 10. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 11. Activamos la interrupción debida a la finalización de una conversión EOC (CR1)*/
	ADC1->CR1 |= ADC_CR1_EOCIE;
 8003a60:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <adcMultiChannel+0x2e0>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	4a0c      	ldr	r2, [pc, #48]	; (8003a98 <adcMultiChannel+0x2e0>)
 8003a66:	f043 0320 	orr.w	r3, r3, #32
 8003a6a:	6053      	str	r3, [r2, #4]

	/* 11a. Matriculamos la interrupción en el NVIC*/
	__NVIC_EnableIRQ(ADC_IRQn);
 8003a6c:	2012      	movs	r0, #18
 8003a6e:	f7ff fd01 	bl	8003474 <__NVIC_EnableIRQ>

	/* 11b. Configuramos la prioridad para la interrupción ADC */
	__NVIC_SetPriority(ADC_IRQn, 1);
 8003a72:	2101      	movs	r1, #1
 8003a74:	2012      	movs	r0, #18
 8003a76:	f7ff fd19 	bl	80034ac <__NVIC_SetPriority>

	/* 12. Activamos el modulo ADC */
	ADC1->CR2 |= ADC_CR2_ADON;
 8003a7a:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <adcMultiChannel+0x2e0>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	4a06      	ldr	r2, [pc, #24]	; (8003a98 <adcMultiChannel+0x2e0>)
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a86:	b662      	cpsie	i
}
 8003a88:	bf00      	nop

	/* 13. Activamos las interrupciones globales */
	__enable_irq();

}
 8003a8a:	bf00      	nop
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	200038d6 	.word	0x200038d6
 8003a98:	40012000 	.word	0x40012000
 8003a9c:	40012300 	.word	0x40012300

08003aa0 <__libc_init_array>:
 8003aa0:	b570      	push	{r4, r5, r6, lr}
 8003aa2:	4d0d      	ldr	r5, [pc, #52]	; (8003ad8 <__libc_init_array+0x38>)
 8003aa4:	4c0d      	ldr	r4, [pc, #52]	; (8003adc <__libc_init_array+0x3c>)
 8003aa6:	1b64      	subs	r4, r4, r5
 8003aa8:	10a4      	asrs	r4, r4, #2
 8003aaa:	2600      	movs	r6, #0
 8003aac:	42a6      	cmp	r6, r4
 8003aae:	d109      	bne.n	8003ac4 <__libc_init_array+0x24>
 8003ab0:	4d0b      	ldr	r5, [pc, #44]	; (8003ae0 <__libc_init_array+0x40>)
 8003ab2:	4c0c      	ldr	r4, [pc, #48]	; (8003ae4 <__libc_init_array+0x44>)
 8003ab4:	f005 f8be 	bl	8008c34 <_init>
 8003ab8:	1b64      	subs	r4, r4, r5
 8003aba:	10a4      	asrs	r4, r4, #2
 8003abc:	2600      	movs	r6, #0
 8003abe:	42a6      	cmp	r6, r4
 8003ac0:	d105      	bne.n	8003ace <__libc_init_array+0x2e>
 8003ac2:	bd70      	pop	{r4, r5, r6, pc}
 8003ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ac8:	4798      	blx	r3
 8003aca:	3601      	adds	r6, #1
 8003acc:	e7ee      	b.n	8003aac <__libc_init_array+0xc>
 8003ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad2:	4798      	blx	r3
 8003ad4:	3601      	adds	r6, #1
 8003ad6:	e7f2      	b.n	8003abe <__libc_init_array+0x1e>
 8003ad8:	0800a864 	.word	0x0800a864
 8003adc:	0800a864 	.word	0x0800a864
 8003ae0:	0800a864 	.word	0x0800a864
 8003ae4:	0800a868 	.word	0x0800a868

08003ae8 <memset>:
 8003ae8:	4402      	add	r2, r0
 8003aea:	4603      	mov	r3, r0
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d100      	bne.n	8003af2 <memset+0xa>
 8003af0:	4770      	bx	lr
 8003af2:	f803 1b01 	strb.w	r1, [r3], #1
 8003af6:	e7f9      	b.n	8003aec <memset+0x4>

08003af8 <__cvt>:
 8003af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003afc:	b088      	sub	sp, #32
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	461f      	mov	r7, r3
 8003b02:	4614      	mov	r4, r2
 8003b04:	bfb8      	it	lt
 8003b06:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003b0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003b0c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003b0e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003b12:	bfb6      	itet	lt
 8003b14:	461f      	movlt	r7, r3
 8003b16:	2300      	movge	r3, #0
 8003b18:	232d      	movlt	r3, #45	; 0x2d
 8003b1a:	7013      	strb	r3, [r2, #0]
 8003b1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003b1e:	f023 0820 	bic.w	r8, r3, #32
 8003b22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b26:	d005      	beq.n	8003b34 <__cvt+0x3c>
 8003b28:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003b2c:	d100      	bne.n	8003b30 <__cvt+0x38>
 8003b2e:	3501      	adds	r5, #1
 8003b30:	2302      	movs	r3, #2
 8003b32:	e000      	b.n	8003b36 <__cvt+0x3e>
 8003b34:	2303      	movs	r3, #3
 8003b36:	aa07      	add	r2, sp, #28
 8003b38:	9204      	str	r2, [sp, #16]
 8003b3a:	aa06      	add	r2, sp, #24
 8003b3c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003b40:	e9cd 3500 	strd	r3, r5, [sp]
 8003b44:	4622      	mov	r2, r4
 8003b46:	463b      	mov	r3, r7
 8003b48:	f001 fe0a 	bl	8005760 <_dtoa_r>
 8003b4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003b50:	4606      	mov	r6, r0
 8003b52:	d102      	bne.n	8003b5a <__cvt+0x62>
 8003b54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003b56:	07db      	lsls	r3, r3, #31
 8003b58:	d522      	bpl.n	8003ba0 <__cvt+0xa8>
 8003b5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b5e:	eb06 0905 	add.w	r9, r6, r5
 8003b62:	d110      	bne.n	8003b86 <__cvt+0x8e>
 8003b64:	7833      	ldrb	r3, [r6, #0]
 8003b66:	2b30      	cmp	r3, #48	; 0x30
 8003b68:	d10a      	bne.n	8003b80 <__cvt+0x88>
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	4620      	mov	r0, r4
 8003b70:	4639      	mov	r1, r7
 8003b72:	f7fc ffc1 	bl	8000af8 <__aeabi_dcmpeq>
 8003b76:	b918      	cbnz	r0, 8003b80 <__cvt+0x88>
 8003b78:	f1c5 0501 	rsb	r5, r5, #1
 8003b7c:	f8ca 5000 	str.w	r5, [sl]
 8003b80:	f8da 3000 	ldr.w	r3, [sl]
 8003b84:	4499      	add	r9, r3
 8003b86:	2200      	movs	r2, #0
 8003b88:	2300      	movs	r3, #0
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	4639      	mov	r1, r7
 8003b8e:	f7fc ffb3 	bl	8000af8 <__aeabi_dcmpeq>
 8003b92:	b108      	cbz	r0, 8003b98 <__cvt+0xa0>
 8003b94:	f8cd 901c 	str.w	r9, [sp, #28]
 8003b98:	2230      	movs	r2, #48	; 0x30
 8003b9a:	9b07      	ldr	r3, [sp, #28]
 8003b9c:	454b      	cmp	r3, r9
 8003b9e:	d307      	bcc.n	8003bb0 <__cvt+0xb8>
 8003ba0:	9b07      	ldr	r3, [sp, #28]
 8003ba2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003ba4:	1b9b      	subs	r3, r3, r6
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	b008      	add	sp, #32
 8003bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bb0:	1c59      	adds	r1, r3, #1
 8003bb2:	9107      	str	r1, [sp, #28]
 8003bb4:	701a      	strb	r2, [r3, #0]
 8003bb6:	e7f0      	b.n	8003b9a <__cvt+0xa2>

08003bb8 <__exponent>:
 8003bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2900      	cmp	r1, #0
 8003bbe:	bfb8      	it	lt
 8003bc0:	4249      	neglt	r1, r1
 8003bc2:	f803 2b02 	strb.w	r2, [r3], #2
 8003bc6:	bfb4      	ite	lt
 8003bc8:	222d      	movlt	r2, #45	; 0x2d
 8003bca:	222b      	movge	r2, #43	; 0x2b
 8003bcc:	2909      	cmp	r1, #9
 8003bce:	7042      	strb	r2, [r0, #1]
 8003bd0:	dd2a      	ble.n	8003c28 <__exponent+0x70>
 8003bd2:	f10d 0407 	add.w	r4, sp, #7
 8003bd6:	46a4      	mov	ip, r4
 8003bd8:	270a      	movs	r7, #10
 8003bda:	46a6      	mov	lr, r4
 8003bdc:	460a      	mov	r2, r1
 8003bde:	fb91 f6f7 	sdiv	r6, r1, r7
 8003be2:	fb07 1516 	mls	r5, r7, r6, r1
 8003be6:	3530      	adds	r5, #48	; 0x30
 8003be8:	2a63      	cmp	r2, #99	; 0x63
 8003bea:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003bee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003bf2:	4631      	mov	r1, r6
 8003bf4:	dcf1      	bgt.n	8003bda <__exponent+0x22>
 8003bf6:	3130      	adds	r1, #48	; 0x30
 8003bf8:	f1ae 0502 	sub.w	r5, lr, #2
 8003bfc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003c00:	1c44      	adds	r4, r0, #1
 8003c02:	4629      	mov	r1, r5
 8003c04:	4561      	cmp	r1, ip
 8003c06:	d30a      	bcc.n	8003c1e <__exponent+0x66>
 8003c08:	f10d 0209 	add.w	r2, sp, #9
 8003c0c:	eba2 020e 	sub.w	r2, r2, lr
 8003c10:	4565      	cmp	r5, ip
 8003c12:	bf88      	it	hi
 8003c14:	2200      	movhi	r2, #0
 8003c16:	4413      	add	r3, r2
 8003c18:	1a18      	subs	r0, r3, r0
 8003c1a:	b003      	add	sp, #12
 8003c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c22:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003c26:	e7ed      	b.n	8003c04 <__exponent+0x4c>
 8003c28:	2330      	movs	r3, #48	; 0x30
 8003c2a:	3130      	adds	r1, #48	; 0x30
 8003c2c:	7083      	strb	r3, [r0, #2]
 8003c2e:	70c1      	strb	r1, [r0, #3]
 8003c30:	1d03      	adds	r3, r0, #4
 8003c32:	e7f1      	b.n	8003c18 <__exponent+0x60>

08003c34 <_printf_float>:
 8003c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c38:	b091      	sub	sp, #68	; 0x44
 8003c3a:	460c      	mov	r4, r1
 8003c3c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003c40:	4616      	mov	r6, r2
 8003c42:	461f      	mov	r7, r3
 8003c44:	4605      	mov	r5, r0
 8003c46:	f002 fee5 	bl	8006a14 <_localeconv_r>
 8003c4a:	6803      	ldr	r3, [r0, #0]
 8003c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fc fad0 	bl	80001f4 <strlen>
 8003c54:	2300      	movs	r3, #0
 8003c56:	930e      	str	r3, [sp, #56]	; 0x38
 8003c58:	f8d8 3000 	ldr.w	r3, [r8]
 8003c5c:	900a      	str	r0, [sp, #40]	; 0x28
 8003c5e:	3307      	adds	r3, #7
 8003c60:	f023 0307 	bic.w	r3, r3, #7
 8003c64:	f103 0208 	add.w	r2, r3, #8
 8003c68:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003c6c:	f8d4 b000 	ldr.w	fp, [r4]
 8003c70:	f8c8 2000 	str.w	r2, [r8]
 8003c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c78:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003c7c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003c80:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003c84:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003c88:	4b9c      	ldr	r3, [pc, #624]	; (8003efc <_printf_float+0x2c8>)
 8003c8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c8e:	4640      	mov	r0, r8
 8003c90:	f7fc ff64 	bl	8000b5c <__aeabi_dcmpun>
 8003c94:	bb70      	cbnz	r0, 8003cf4 <_printf_float+0xc0>
 8003c96:	4b99      	ldr	r3, [pc, #612]	; (8003efc <_printf_float+0x2c8>)
 8003c98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003c9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c9e:	4640      	mov	r0, r8
 8003ca0:	f7fc ff3e 	bl	8000b20 <__aeabi_dcmple>
 8003ca4:	bb30      	cbnz	r0, 8003cf4 <_printf_float+0xc0>
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	2300      	movs	r3, #0
 8003caa:	4640      	mov	r0, r8
 8003cac:	4651      	mov	r1, sl
 8003cae:	f7fc ff2d 	bl	8000b0c <__aeabi_dcmplt>
 8003cb2:	b110      	cbz	r0, 8003cba <_printf_float+0x86>
 8003cb4:	232d      	movs	r3, #45	; 0x2d
 8003cb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cba:	4b91      	ldr	r3, [pc, #580]	; (8003f00 <_printf_float+0x2cc>)
 8003cbc:	4891      	ldr	r0, [pc, #580]	; (8003f04 <_printf_float+0x2d0>)
 8003cbe:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003cc2:	bf94      	ite	ls
 8003cc4:	4698      	movls	r8, r3
 8003cc6:	4680      	movhi	r8, r0
 8003cc8:	2303      	movs	r3, #3
 8003cca:	6123      	str	r3, [r4, #16]
 8003ccc:	f02b 0304 	bic.w	r3, fp, #4
 8003cd0:	6023      	str	r3, [r4, #0]
 8003cd2:	f04f 0a00 	mov.w	sl, #0
 8003cd6:	9700      	str	r7, [sp, #0]
 8003cd8:	4633      	mov	r3, r6
 8003cda:	aa0f      	add	r2, sp, #60	; 0x3c
 8003cdc:	4621      	mov	r1, r4
 8003cde:	4628      	mov	r0, r5
 8003ce0:	f000 f9d2 	bl	8004088 <_printf_common>
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	f040 808f 	bne.w	8003e08 <_printf_float+0x1d4>
 8003cea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cee:	b011      	add	sp, #68	; 0x44
 8003cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cf4:	4642      	mov	r2, r8
 8003cf6:	4653      	mov	r3, sl
 8003cf8:	4640      	mov	r0, r8
 8003cfa:	4651      	mov	r1, sl
 8003cfc:	f7fc ff2e 	bl	8000b5c <__aeabi_dcmpun>
 8003d00:	b140      	cbz	r0, 8003d14 <_printf_float+0xe0>
 8003d02:	f1ba 0f00 	cmp.w	sl, #0
 8003d06:	bfbc      	itt	lt
 8003d08:	232d      	movlt	r3, #45	; 0x2d
 8003d0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003d0e:	487e      	ldr	r0, [pc, #504]	; (8003f08 <_printf_float+0x2d4>)
 8003d10:	4b7e      	ldr	r3, [pc, #504]	; (8003f0c <_printf_float+0x2d8>)
 8003d12:	e7d4      	b.n	8003cbe <_printf_float+0x8a>
 8003d14:	6863      	ldr	r3, [r4, #4]
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003d1c:	d142      	bne.n	8003da4 <_printf_float+0x170>
 8003d1e:	2306      	movs	r3, #6
 8003d20:	6063      	str	r3, [r4, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	9206      	str	r2, [sp, #24]
 8003d26:	aa0e      	add	r2, sp, #56	; 0x38
 8003d28:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003d2c:	aa0d      	add	r2, sp, #52	; 0x34
 8003d2e:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003d32:	9203      	str	r2, [sp, #12]
 8003d34:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003d38:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003d3c:	6023      	str	r3, [r4, #0]
 8003d3e:	6863      	ldr	r3, [r4, #4]
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	4642      	mov	r2, r8
 8003d44:	4653      	mov	r3, sl
 8003d46:	4628      	mov	r0, r5
 8003d48:	910b      	str	r1, [sp, #44]	; 0x2c
 8003d4a:	f7ff fed5 	bl	8003af8 <__cvt>
 8003d4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d50:	2947      	cmp	r1, #71	; 0x47
 8003d52:	4680      	mov	r8, r0
 8003d54:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003d56:	d108      	bne.n	8003d6a <_printf_float+0x136>
 8003d58:	1cc8      	adds	r0, r1, #3
 8003d5a:	db02      	blt.n	8003d62 <_printf_float+0x12e>
 8003d5c:	6863      	ldr	r3, [r4, #4]
 8003d5e:	4299      	cmp	r1, r3
 8003d60:	dd40      	ble.n	8003de4 <_printf_float+0x1b0>
 8003d62:	f1a9 0902 	sub.w	r9, r9, #2
 8003d66:	fa5f f989 	uxtb.w	r9, r9
 8003d6a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003d6e:	d81f      	bhi.n	8003db0 <_printf_float+0x17c>
 8003d70:	3901      	subs	r1, #1
 8003d72:	464a      	mov	r2, r9
 8003d74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003d78:	910d      	str	r1, [sp, #52]	; 0x34
 8003d7a:	f7ff ff1d 	bl	8003bb8 <__exponent>
 8003d7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d80:	1813      	adds	r3, r2, r0
 8003d82:	2a01      	cmp	r2, #1
 8003d84:	4682      	mov	sl, r0
 8003d86:	6123      	str	r3, [r4, #16]
 8003d88:	dc02      	bgt.n	8003d90 <_printf_float+0x15c>
 8003d8a:	6822      	ldr	r2, [r4, #0]
 8003d8c:	07d2      	lsls	r2, r2, #31
 8003d8e:	d501      	bpl.n	8003d94 <_printf_float+0x160>
 8003d90:	3301      	adds	r3, #1
 8003d92:	6123      	str	r3, [r4, #16]
 8003d94:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d09c      	beq.n	8003cd6 <_printf_float+0xa2>
 8003d9c:	232d      	movs	r3, #45	; 0x2d
 8003d9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003da2:	e798      	b.n	8003cd6 <_printf_float+0xa2>
 8003da4:	2947      	cmp	r1, #71	; 0x47
 8003da6:	d1bc      	bne.n	8003d22 <_printf_float+0xee>
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1ba      	bne.n	8003d22 <_printf_float+0xee>
 8003dac:	2301      	movs	r3, #1
 8003dae:	e7b7      	b.n	8003d20 <_printf_float+0xec>
 8003db0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003db4:	d118      	bne.n	8003de8 <_printf_float+0x1b4>
 8003db6:	2900      	cmp	r1, #0
 8003db8:	6863      	ldr	r3, [r4, #4]
 8003dba:	dd0b      	ble.n	8003dd4 <_printf_float+0x1a0>
 8003dbc:	6121      	str	r1, [r4, #16]
 8003dbe:	b913      	cbnz	r3, 8003dc6 <_printf_float+0x192>
 8003dc0:	6822      	ldr	r2, [r4, #0]
 8003dc2:	07d0      	lsls	r0, r2, #31
 8003dc4:	d502      	bpl.n	8003dcc <_printf_float+0x198>
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	440b      	add	r3, r1
 8003dca:	6123      	str	r3, [r4, #16]
 8003dcc:	65a1      	str	r1, [r4, #88]	; 0x58
 8003dce:	f04f 0a00 	mov.w	sl, #0
 8003dd2:	e7df      	b.n	8003d94 <_printf_float+0x160>
 8003dd4:	b913      	cbnz	r3, 8003ddc <_printf_float+0x1a8>
 8003dd6:	6822      	ldr	r2, [r4, #0]
 8003dd8:	07d2      	lsls	r2, r2, #31
 8003dda:	d501      	bpl.n	8003de0 <_printf_float+0x1ac>
 8003ddc:	3302      	adds	r3, #2
 8003dde:	e7f4      	b.n	8003dca <_printf_float+0x196>
 8003de0:	2301      	movs	r3, #1
 8003de2:	e7f2      	b.n	8003dca <_printf_float+0x196>
 8003de4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003de8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003dea:	4299      	cmp	r1, r3
 8003dec:	db05      	blt.n	8003dfa <_printf_float+0x1c6>
 8003dee:	6823      	ldr	r3, [r4, #0]
 8003df0:	6121      	str	r1, [r4, #16]
 8003df2:	07d8      	lsls	r0, r3, #31
 8003df4:	d5ea      	bpl.n	8003dcc <_printf_float+0x198>
 8003df6:	1c4b      	adds	r3, r1, #1
 8003df8:	e7e7      	b.n	8003dca <_printf_float+0x196>
 8003dfa:	2900      	cmp	r1, #0
 8003dfc:	bfd4      	ite	le
 8003dfe:	f1c1 0202 	rsble	r2, r1, #2
 8003e02:	2201      	movgt	r2, #1
 8003e04:	4413      	add	r3, r2
 8003e06:	e7e0      	b.n	8003dca <_printf_float+0x196>
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	055a      	lsls	r2, r3, #21
 8003e0c:	d407      	bmi.n	8003e1e <_printf_float+0x1ea>
 8003e0e:	6923      	ldr	r3, [r4, #16]
 8003e10:	4642      	mov	r2, r8
 8003e12:	4631      	mov	r1, r6
 8003e14:	4628      	mov	r0, r5
 8003e16:	47b8      	blx	r7
 8003e18:	3001      	adds	r0, #1
 8003e1a:	d12b      	bne.n	8003e74 <_printf_float+0x240>
 8003e1c:	e765      	b.n	8003cea <_printf_float+0xb6>
 8003e1e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003e22:	f240 80dc 	bls.w	8003fde <_printf_float+0x3aa>
 8003e26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f7fc fe63 	bl	8000af8 <__aeabi_dcmpeq>
 8003e32:	2800      	cmp	r0, #0
 8003e34:	d033      	beq.n	8003e9e <_printf_float+0x26a>
 8003e36:	4a36      	ldr	r2, [pc, #216]	; (8003f10 <_printf_float+0x2dc>)
 8003e38:	2301      	movs	r3, #1
 8003e3a:	4631      	mov	r1, r6
 8003e3c:	4628      	mov	r0, r5
 8003e3e:	47b8      	blx	r7
 8003e40:	3001      	adds	r0, #1
 8003e42:	f43f af52 	beq.w	8003cea <_printf_float+0xb6>
 8003e46:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	db02      	blt.n	8003e54 <_printf_float+0x220>
 8003e4e:	6823      	ldr	r3, [r4, #0]
 8003e50:	07d8      	lsls	r0, r3, #31
 8003e52:	d50f      	bpl.n	8003e74 <_printf_float+0x240>
 8003e54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e58:	4631      	mov	r1, r6
 8003e5a:	4628      	mov	r0, r5
 8003e5c:	47b8      	blx	r7
 8003e5e:	3001      	adds	r0, #1
 8003e60:	f43f af43 	beq.w	8003cea <_printf_float+0xb6>
 8003e64:	f04f 0800 	mov.w	r8, #0
 8003e68:	f104 091a 	add.w	r9, r4, #26
 8003e6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	4543      	cmp	r3, r8
 8003e72:	dc09      	bgt.n	8003e88 <_printf_float+0x254>
 8003e74:	6823      	ldr	r3, [r4, #0]
 8003e76:	079b      	lsls	r3, r3, #30
 8003e78:	f100 8101 	bmi.w	800407e <_printf_float+0x44a>
 8003e7c:	68e0      	ldr	r0, [r4, #12]
 8003e7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003e80:	4298      	cmp	r0, r3
 8003e82:	bfb8      	it	lt
 8003e84:	4618      	movlt	r0, r3
 8003e86:	e732      	b.n	8003cee <_printf_float+0xba>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	464a      	mov	r2, r9
 8003e8c:	4631      	mov	r1, r6
 8003e8e:	4628      	mov	r0, r5
 8003e90:	47b8      	blx	r7
 8003e92:	3001      	adds	r0, #1
 8003e94:	f43f af29 	beq.w	8003cea <_printf_float+0xb6>
 8003e98:	f108 0801 	add.w	r8, r8, #1
 8003e9c:	e7e6      	b.n	8003e6c <_printf_float+0x238>
 8003e9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	dc37      	bgt.n	8003f14 <_printf_float+0x2e0>
 8003ea4:	4a1a      	ldr	r2, [pc, #104]	; (8003f10 <_printf_float+0x2dc>)
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	4631      	mov	r1, r6
 8003eaa:	4628      	mov	r0, r5
 8003eac:	47b8      	blx	r7
 8003eae:	3001      	adds	r0, #1
 8003eb0:	f43f af1b 	beq.w	8003cea <_printf_float+0xb6>
 8003eb4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	d102      	bne.n	8003ec2 <_printf_float+0x28e>
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	07d9      	lsls	r1, r3, #31
 8003ec0:	d5d8      	bpl.n	8003e74 <_printf_float+0x240>
 8003ec2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ec6:	4631      	mov	r1, r6
 8003ec8:	4628      	mov	r0, r5
 8003eca:	47b8      	blx	r7
 8003ecc:	3001      	adds	r0, #1
 8003ece:	f43f af0c 	beq.w	8003cea <_printf_float+0xb6>
 8003ed2:	f04f 0900 	mov.w	r9, #0
 8003ed6:	f104 0a1a 	add.w	sl, r4, #26
 8003eda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003edc:	425b      	negs	r3, r3
 8003ede:	454b      	cmp	r3, r9
 8003ee0:	dc01      	bgt.n	8003ee6 <_printf_float+0x2b2>
 8003ee2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ee4:	e794      	b.n	8003e10 <_printf_float+0x1dc>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	4652      	mov	r2, sl
 8003eea:	4631      	mov	r1, r6
 8003eec:	4628      	mov	r0, r5
 8003eee:	47b8      	blx	r7
 8003ef0:	3001      	adds	r0, #1
 8003ef2:	f43f aefa 	beq.w	8003cea <_printf_float+0xb6>
 8003ef6:	f109 0901 	add.w	r9, r9, #1
 8003efa:	e7ee      	b.n	8003eda <_printf_float+0x2a6>
 8003efc:	7fefffff 	.word	0x7fefffff
 8003f00:	0800a3ac 	.word	0x0800a3ac
 8003f04:	0800a3b0 	.word	0x0800a3b0
 8003f08:	0800a3b8 	.word	0x0800a3b8
 8003f0c:	0800a3b4 	.word	0x0800a3b4
 8003f10:	0800a7b1 	.word	0x0800a7b1
 8003f14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	bfa8      	it	ge
 8003f1c:	461a      	movge	r2, r3
 8003f1e:	2a00      	cmp	r2, #0
 8003f20:	4691      	mov	r9, r2
 8003f22:	dc37      	bgt.n	8003f94 <_printf_float+0x360>
 8003f24:	f04f 0b00 	mov.w	fp, #0
 8003f28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f2c:	f104 021a 	add.w	r2, r4, #26
 8003f30:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003f34:	ebaa 0309 	sub.w	r3, sl, r9
 8003f38:	455b      	cmp	r3, fp
 8003f3a:	dc33      	bgt.n	8003fa4 <_printf_float+0x370>
 8003f3c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003f40:	429a      	cmp	r2, r3
 8003f42:	db3b      	blt.n	8003fbc <_printf_float+0x388>
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	07da      	lsls	r2, r3, #31
 8003f48:	d438      	bmi.n	8003fbc <_printf_float+0x388>
 8003f4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f4c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003f4e:	eba3 020a 	sub.w	r2, r3, sl
 8003f52:	eba3 0901 	sub.w	r9, r3, r1
 8003f56:	4591      	cmp	r9, r2
 8003f58:	bfa8      	it	ge
 8003f5a:	4691      	movge	r9, r2
 8003f5c:	f1b9 0f00 	cmp.w	r9, #0
 8003f60:	dc34      	bgt.n	8003fcc <_printf_float+0x398>
 8003f62:	f04f 0800 	mov.w	r8, #0
 8003f66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f6a:	f104 0a1a 	add.w	sl, r4, #26
 8003f6e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003f72:	1a9b      	subs	r3, r3, r2
 8003f74:	eba3 0309 	sub.w	r3, r3, r9
 8003f78:	4543      	cmp	r3, r8
 8003f7a:	f77f af7b 	ble.w	8003e74 <_printf_float+0x240>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	4652      	mov	r2, sl
 8003f82:	4631      	mov	r1, r6
 8003f84:	4628      	mov	r0, r5
 8003f86:	47b8      	blx	r7
 8003f88:	3001      	adds	r0, #1
 8003f8a:	f43f aeae 	beq.w	8003cea <_printf_float+0xb6>
 8003f8e:	f108 0801 	add.w	r8, r8, #1
 8003f92:	e7ec      	b.n	8003f6e <_printf_float+0x33a>
 8003f94:	4613      	mov	r3, r2
 8003f96:	4631      	mov	r1, r6
 8003f98:	4642      	mov	r2, r8
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	47b8      	blx	r7
 8003f9e:	3001      	adds	r0, #1
 8003fa0:	d1c0      	bne.n	8003f24 <_printf_float+0x2f0>
 8003fa2:	e6a2      	b.n	8003cea <_printf_float+0xb6>
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	4631      	mov	r1, r6
 8003fa8:	4628      	mov	r0, r5
 8003faa:	920b      	str	r2, [sp, #44]	; 0x2c
 8003fac:	47b8      	blx	r7
 8003fae:	3001      	adds	r0, #1
 8003fb0:	f43f ae9b 	beq.w	8003cea <_printf_float+0xb6>
 8003fb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003fb6:	f10b 0b01 	add.w	fp, fp, #1
 8003fba:	e7b9      	b.n	8003f30 <_printf_float+0x2fc>
 8003fbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fc0:	4631      	mov	r1, r6
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	47b8      	blx	r7
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	d1bf      	bne.n	8003f4a <_printf_float+0x316>
 8003fca:	e68e      	b.n	8003cea <_printf_float+0xb6>
 8003fcc:	464b      	mov	r3, r9
 8003fce:	eb08 020a 	add.w	r2, r8, sl
 8003fd2:	4631      	mov	r1, r6
 8003fd4:	4628      	mov	r0, r5
 8003fd6:	47b8      	blx	r7
 8003fd8:	3001      	adds	r0, #1
 8003fda:	d1c2      	bne.n	8003f62 <_printf_float+0x32e>
 8003fdc:	e685      	b.n	8003cea <_printf_float+0xb6>
 8003fde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003fe0:	2a01      	cmp	r2, #1
 8003fe2:	dc01      	bgt.n	8003fe8 <_printf_float+0x3b4>
 8003fe4:	07db      	lsls	r3, r3, #31
 8003fe6:	d537      	bpl.n	8004058 <_printf_float+0x424>
 8003fe8:	2301      	movs	r3, #1
 8003fea:	4642      	mov	r2, r8
 8003fec:	4631      	mov	r1, r6
 8003fee:	4628      	mov	r0, r5
 8003ff0:	47b8      	blx	r7
 8003ff2:	3001      	adds	r0, #1
 8003ff4:	f43f ae79 	beq.w	8003cea <_printf_float+0xb6>
 8003ff8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ffc:	4631      	mov	r1, r6
 8003ffe:	4628      	mov	r0, r5
 8004000:	47b8      	blx	r7
 8004002:	3001      	adds	r0, #1
 8004004:	f43f ae71 	beq.w	8003cea <_printf_float+0xb6>
 8004008:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800400c:	2200      	movs	r2, #0
 800400e:	2300      	movs	r3, #0
 8004010:	f7fc fd72 	bl	8000af8 <__aeabi_dcmpeq>
 8004014:	b9d8      	cbnz	r0, 800404e <_printf_float+0x41a>
 8004016:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004018:	f108 0201 	add.w	r2, r8, #1
 800401c:	3b01      	subs	r3, #1
 800401e:	4631      	mov	r1, r6
 8004020:	4628      	mov	r0, r5
 8004022:	47b8      	blx	r7
 8004024:	3001      	adds	r0, #1
 8004026:	d10e      	bne.n	8004046 <_printf_float+0x412>
 8004028:	e65f      	b.n	8003cea <_printf_float+0xb6>
 800402a:	2301      	movs	r3, #1
 800402c:	464a      	mov	r2, r9
 800402e:	4631      	mov	r1, r6
 8004030:	4628      	mov	r0, r5
 8004032:	47b8      	blx	r7
 8004034:	3001      	adds	r0, #1
 8004036:	f43f ae58 	beq.w	8003cea <_printf_float+0xb6>
 800403a:	f108 0801 	add.w	r8, r8, #1
 800403e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004040:	3b01      	subs	r3, #1
 8004042:	4543      	cmp	r3, r8
 8004044:	dcf1      	bgt.n	800402a <_printf_float+0x3f6>
 8004046:	4653      	mov	r3, sl
 8004048:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800404c:	e6e1      	b.n	8003e12 <_printf_float+0x1de>
 800404e:	f04f 0800 	mov.w	r8, #0
 8004052:	f104 091a 	add.w	r9, r4, #26
 8004056:	e7f2      	b.n	800403e <_printf_float+0x40a>
 8004058:	2301      	movs	r3, #1
 800405a:	4642      	mov	r2, r8
 800405c:	e7df      	b.n	800401e <_printf_float+0x3ea>
 800405e:	2301      	movs	r3, #1
 8004060:	464a      	mov	r2, r9
 8004062:	4631      	mov	r1, r6
 8004064:	4628      	mov	r0, r5
 8004066:	47b8      	blx	r7
 8004068:	3001      	adds	r0, #1
 800406a:	f43f ae3e 	beq.w	8003cea <_printf_float+0xb6>
 800406e:	f108 0801 	add.w	r8, r8, #1
 8004072:	68e3      	ldr	r3, [r4, #12]
 8004074:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004076:	1a5b      	subs	r3, r3, r1
 8004078:	4543      	cmp	r3, r8
 800407a:	dcf0      	bgt.n	800405e <_printf_float+0x42a>
 800407c:	e6fe      	b.n	8003e7c <_printf_float+0x248>
 800407e:	f04f 0800 	mov.w	r8, #0
 8004082:	f104 0919 	add.w	r9, r4, #25
 8004086:	e7f4      	b.n	8004072 <_printf_float+0x43e>

08004088 <_printf_common>:
 8004088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800408c:	4616      	mov	r6, r2
 800408e:	4699      	mov	r9, r3
 8004090:	688a      	ldr	r2, [r1, #8]
 8004092:	690b      	ldr	r3, [r1, #16]
 8004094:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004098:	4293      	cmp	r3, r2
 800409a:	bfb8      	it	lt
 800409c:	4613      	movlt	r3, r2
 800409e:	6033      	str	r3, [r6, #0]
 80040a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040a4:	4607      	mov	r7, r0
 80040a6:	460c      	mov	r4, r1
 80040a8:	b10a      	cbz	r2, 80040ae <_printf_common+0x26>
 80040aa:	3301      	adds	r3, #1
 80040ac:	6033      	str	r3, [r6, #0]
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	0699      	lsls	r1, r3, #26
 80040b2:	bf42      	ittt	mi
 80040b4:	6833      	ldrmi	r3, [r6, #0]
 80040b6:	3302      	addmi	r3, #2
 80040b8:	6033      	strmi	r3, [r6, #0]
 80040ba:	6825      	ldr	r5, [r4, #0]
 80040bc:	f015 0506 	ands.w	r5, r5, #6
 80040c0:	d106      	bne.n	80040d0 <_printf_common+0x48>
 80040c2:	f104 0a19 	add.w	sl, r4, #25
 80040c6:	68e3      	ldr	r3, [r4, #12]
 80040c8:	6832      	ldr	r2, [r6, #0]
 80040ca:	1a9b      	subs	r3, r3, r2
 80040cc:	42ab      	cmp	r3, r5
 80040ce:	dc26      	bgt.n	800411e <_printf_common+0x96>
 80040d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040d4:	1e13      	subs	r3, r2, #0
 80040d6:	6822      	ldr	r2, [r4, #0]
 80040d8:	bf18      	it	ne
 80040da:	2301      	movne	r3, #1
 80040dc:	0692      	lsls	r2, r2, #26
 80040de:	d42b      	bmi.n	8004138 <_printf_common+0xb0>
 80040e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040e4:	4649      	mov	r1, r9
 80040e6:	4638      	mov	r0, r7
 80040e8:	47c0      	blx	r8
 80040ea:	3001      	adds	r0, #1
 80040ec:	d01e      	beq.n	800412c <_printf_common+0xa4>
 80040ee:	6823      	ldr	r3, [r4, #0]
 80040f0:	68e5      	ldr	r5, [r4, #12]
 80040f2:	6832      	ldr	r2, [r6, #0]
 80040f4:	f003 0306 	and.w	r3, r3, #6
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	bf08      	it	eq
 80040fc:	1aad      	subeq	r5, r5, r2
 80040fe:	68a3      	ldr	r3, [r4, #8]
 8004100:	6922      	ldr	r2, [r4, #16]
 8004102:	bf0c      	ite	eq
 8004104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004108:	2500      	movne	r5, #0
 800410a:	4293      	cmp	r3, r2
 800410c:	bfc4      	itt	gt
 800410e:	1a9b      	subgt	r3, r3, r2
 8004110:	18ed      	addgt	r5, r5, r3
 8004112:	2600      	movs	r6, #0
 8004114:	341a      	adds	r4, #26
 8004116:	42b5      	cmp	r5, r6
 8004118:	d11a      	bne.n	8004150 <_printf_common+0xc8>
 800411a:	2000      	movs	r0, #0
 800411c:	e008      	b.n	8004130 <_printf_common+0xa8>
 800411e:	2301      	movs	r3, #1
 8004120:	4652      	mov	r2, sl
 8004122:	4649      	mov	r1, r9
 8004124:	4638      	mov	r0, r7
 8004126:	47c0      	blx	r8
 8004128:	3001      	adds	r0, #1
 800412a:	d103      	bne.n	8004134 <_printf_common+0xac>
 800412c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004134:	3501      	adds	r5, #1
 8004136:	e7c6      	b.n	80040c6 <_printf_common+0x3e>
 8004138:	18e1      	adds	r1, r4, r3
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	2030      	movs	r0, #48	; 0x30
 800413e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004142:	4422      	add	r2, r4
 8004144:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004148:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800414c:	3302      	adds	r3, #2
 800414e:	e7c7      	b.n	80040e0 <_printf_common+0x58>
 8004150:	2301      	movs	r3, #1
 8004152:	4622      	mov	r2, r4
 8004154:	4649      	mov	r1, r9
 8004156:	4638      	mov	r0, r7
 8004158:	47c0      	blx	r8
 800415a:	3001      	adds	r0, #1
 800415c:	d0e6      	beq.n	800412c <_printf_common+0xa4>
 800415e:	3601      	adds	r6, #1
 8004160:	e7d9      	b.n	8004116 <_printf_common+0x8e>
	...

08004164 <_printf_i>:
 8004164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004168:	7e0f      	ldrb	r7, [r1, #24]
 800416a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800416c:	2f78      	cmp	r7, #120	; 0x78
 800416e:	4691      	mov	r9, r2
 8004170:	4680      	mov	r8, r0
 8004172:	460c      	mov	r4, r1
 8004174:	469a      	mov	sl, r3
 8004176:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800417a:	d807      	bhi.n	800418c <_printf_i+0x28>
 800417c:	2f62      	cmp	r7, #98	; 0x62
 800417e:	d80a      	bhi.n	8004196 <_printf_i+0x32>
 8004180:	2f00      	cmp	r7, #0
 8004182:	f000 80d8 	beq.w	8004336 <_printf_i+0x1d2>
 8004186:	2f58      	cmp	r7, #88	; 0x58
 8004188:	f000 80a3 	beq.w	80042d2 <_printf_i+0x16e>
 800418c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004190:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004194:	e03a      	b.n	800420c <_printf_i+0xa8>
 8004196:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800419a:	2b15      	cmp	r3, #21
 800419c:	d8f6      	bhi.n	800418c <_printf_i+0x28>
 800419e:	a101      	add	r1, pc, #4	; (adr r1, 80041a4 <_printf_i+0x40>)
 80041a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041a4:	080041fd 	.word	0x080041fd
 80041a8:	08004211 	.word	0x08004211
 80041ac:	0800418d 	.word	0x0800418d
 80041b0:	0800418d 	.word	0x0800418d
 80041b4:	0800418d 	.word	0x0800418d
 80041b8:	0800418d 	.word	0x0800418d
 80041bc:	08004211 	.word	0x08004211
 80041c0:	0800418d 	.word	0x0800418d
 80041c4:	0800418d 	.word	0x0800418d
 80041c8:	0800418d 	.word	0x0800418d
 80041cc:	0800418d 	.word	0x0800418d
 80041d0:	0800431d 	.word	0x0800431d
 80041d4:	08004241 	.word	0x08004241
 80041d8:	080042ff 	.word	0x080042ff
 80041dc:	0800418d 	.word	0x0800418d
 80041e0:	0800418d 	.word	0x0800418d
 80041e4:	0800433f 	.word	0x0800433f
 80041e8:	0800418d 	.word	0x0800418d
 80041ec:	08004241 	.word	0x08004241
 80041f0:	0800418d 	.word	0x0800418d
 80041f4:	0800418d 	.word	0x0800418d
 80041f8:	08004307 	.word	0x08004307
 80041fc:	682b      	ldr	r3, [r5, #0]
 80041fe:	1d1a      	adds	r2, r3, #4
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	602a      	str	r2, [r5, #0]
 8004204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004208:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800420c:	2301      	movs	r3, #1
 800420e:	e0a3      	b.n	8004358 <_printf_i+0x1f4>
 8004210:	6820      	ldr	r0, [r4, #0]
 8004212:	6829      	ldr	r1, [r5, #0]
 8004214:	0606      	lsls	r6, r0, #24
 8004216:	f101 0304 	add.w	r3, r1, #4
 800421a:	d50a      	bpl.n	8004232 <_printf_i+0xce>
 800421c:	680e      	ldr	r6, [r1, #0]
 800421e:	602b      	str	r3, [r5, #0]
 8004220:	2e00      	cmp	r6, #0
 8004222:	da03      	bge.n	800422c <_printf_i+0xc8>
 8004224:	232d      	movs	r3, #45	; 0x2d
 8004226:	4276      	negs	r6, r6
 8004228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800422c:	485e      	ldr	r0, [pc, #376]	; (80043a8 <_printf_i+0x244>)
 800422e:	230a      	movs	r3, #10
 8004230:	e019      	b.n	8004266 <_printf_i+0x102>
 8004232:	680e      	ldr	r6, [r1, #0]
 8004234:	602b      	str	r3, [r5, #0]
 8004236:	f010 0f40 	tst.w	r0, #64	; 0x40
 800423a:	bf18      	it	ne
 800423c:	b236      	sxthne	r6, r6
 800423e:	e7ef      	b.n	8004220 <_printf_i+0xbc>
 8004240:	682b      	ldr	r3, [r5, #0]
 8004242:	6820      	ldr	r0, [r4, #0]
 8004244:	1d19      	adds	r1, r3, #4
 8004246:	6029      	str	r1, [r5, #0]
 8004248:	0601      	lsls	r1, r0, #24
 800424a:	d501      	bpl.n	8004250 <_printf_i+0xec>
 800424c:	681e      	ldr	r6, [r3, #0]
 800424e:	e002      	b.n	8004256 <_printf_i+0xf2>
 8004250:	0646      	lsls	r6, r0, #25
 8004252:	d5fb      	bpl.n	800424c <_printf_i+0xe8>
 8004254:	881e      	ldrh	r6, [r3, #0]
 8004256:	4854      	ldr	r0, [pc, #336]	; (80043a8 <_printf_i+0x244>)
 8004258:	2f6f      	cmp	r7, #111	; 0x6f
 800425a:	bf0c      	ite	eq
 800425c:	2308      	moveq	r3, #8
 800425e:	230a      	movne	r3, #10
 8004260:	2100      	movs	r1, #0
 8004262:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004266:	6865      	ldr	r5, [r4, #4]
 8004268:	60a5      	str	r5, [r4, #8]
 800426a:	2d00      	cmp	r5, #0
 800426c:	bfa2      	ittt	ge
 800426e:	6821      	ldrge	r1, [r4, #0]
 8004270:	f021 0104 	bicge.w	r1, r1, #4
 8004274:	6021      	strge	r1, [r4, #0]
 8004276:	b90e      	cbnz	r6, 800427c <_printf_i+0x118>
 8004278:	2d00      	cmp	r5, #0
 800427a:	d04d      	beq.n	8004318 <_printf_i+0x1b4>
 800427c:	4615      	mov	r5, r2
 800427e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004282:	fb03 6711 	mls	r7, r3, r1, r6
 8004286:	5dc7      	ldrb	r7, [r0, r7]
 8004288:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800428c:	4637      	mov	r7, r6
 800428e:	42bb      	cmp	r3, r7
 8004290:	460e      	mov	r6, r1
 8004292:	d9f4      	bls.n	800427e <_printf_i+0x11a>
 8004294:	2b08      	cmp	r3, #8
 8004296:	d10b      	bne.n	80042b0 <_printf_i+0x14c>
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	07de      	lsls	r6, r3, #31
 800429c:	d508      	bpl.n	80042b0 <_printf_i+0x14c>
 800429e:	6923      	ldr	r3, [r4, #16]
 80042a0:	6861      	ldr	r1, [r4, #4]
 80042a2:	4299      	cmp	r1, r3
 80042a4:	bfde      	ittt	le
 80042a6:	2330      	movle	r3, #48	; 0x30
 80042a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80042b0:	1b52      	subs	r2, r2, r5
 80042b2:	6122      	str	r2, [r4, #16]
 80042b4:	f8cd a000 	str.w	sl, [sp]
 80042b8:	464b      	mov	r3, r9
 80042ba:	aa03      	add	r2, sp, #12
 80042bc:	4621      	mov	r1, r4
 80042be:	4640      	mov	r0, r8
 80042c0:	f7ff fee2 	bl	8004088 <_printf_common>
 80042c4:	3001      	adds	r0, #1
 80042c6:	d14c      	bne.n	8004362 <_printf_i+0x1fe>
 80042c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042cc:	b004      	add	sp, #16
 80042ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d2:	4835      	ldr	r0, [pc, #212]	; (80043a8 <_printf_i+0x244>)
 80042d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80042d8:	6829      	ldr	r1, [r5, #0]
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80042e0:	6029      	str	r1, [r5, #0]
 80042e2:	061d      	lsls	r5, r3, #24
 80042e4:	d514      	bpl.n	8004310 <_printf_i+0x1ac>
 80042e6:	07df      	lsls	r7, r3, #31
 80042e8:	bf44      	itt	mi
 80042ea:	f043 0320 	orrmi.w	r3, r3, #32
 80042ee:	6023      	strmi	r3, [r4, #0]
 80042f0:	b91e      	cbnz	r6, 80042fa <_printf_i+0x196>
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	f023 0320 	bic.w	r3, r3, #32
 80042f8:	6023      	str	r3, [r4, #0]
 80042fa:	2310      	movs	r3, #16
 80042fc:	e7b0      	b.n	8004260 <_printf_i+0xfc>
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	f043 0320 	orr.w	r3, r3, #32
 8004304:	6023      	str	r3, [r4, #0]
 8004306:	2378      	movs	r3, #120	; 0x78
 8004308:	4828      	ldr	r0, [pc, #160]	; (80043ac <_printf_i+0x248>)
 800430a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800430e:	e7e3      	b.n	80042d8 <_printf_i+0x174>
 8004310:	0659      	lsls	r1, r3, #25
 8004312:	bf48      	it	mi
 8004314:	b2b6      	uxthmi	r6, r6
 8004316:	e7e6      	b.n	80042e6 <_printf_i+0x182>
 8004318:	4615      	mov	r5, r2
 800431a:	e7bb      	b.n	8004294 <_printf_i+0x130>
 800431c:	682b      	ldr	r3, [r5, #0]
 800431e:	6826      	ldr	r6, [r4, #0]
 8004320:	6961      	ldr	r1, [r4, #20]
 8004322:	1d18      	adds	r0, r3, #4
 8004324:	6028      	str	r0, [r5, #0]
 8004326:	0635      	lsls	r5, r6, #24
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	d501      	bpl.n	8004330 <_printf_i+0x1cc>
 800432c:	6019      	str	r1, [r3, #0]
 800432e:	e002      	b.n	8004336 <_printf_i+0x1d2>
 8004330:	0670      	lsls	r0, r6, #25
 8004332:	d5fb      	bpl.n	800432c <_printf_i+0x1c8>
 8004334:	8019      	strh	r1, [r3, #0]
 8004336:	2300      	movs	r3, #0
 8004338:	6123      	str	r3, [r4, #16]
 800433a:	4615      	mov	r5, r2
 800433c:	e7ba      	b.n	80042b4 <_printf_i+0x150>
 800433e:	682b      	ldr	r3, [r5, #0]
 8004340:	1d1a      	adds	r2, r3, #4
 8004342:	602a      	str	r2, [r5, #0]
 8004344:	681d      	ldr	r5, [r3, #0]
 8004346:	6862      	ldr	r2, [r4, #4]
 8004348:	2100      	movs	r1, #0
 800434a:	4628      	mov	r0, r5
 800434c:	f7fb ff60 	bl	8000210 <memchr>
 8004350:	b108      	cbz	r0, 8004356 <_printf_i+0x1f2>
 8004352:	1b40      	subs	r0, r0, r5
 8004354:	6060      	str	r0, [r4, #4]
 8004356:	6863      	ldr	r3, [r4, #4]
 8004358:	6123      	str	r3, [r4, #16]
 800435a:	2300      	movs	r3, #0
 800435c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004360:	e7a8      	b.n	80042b4 <_printf_i+0x150>
 8004362:	6923      	ldr	r3, [r4, #16]
 8004364:	462a      	mov	r2, r5
 8004366:	4649      	mov	r1, r9
 8004368:	4640      	mov	r0, r8
 800436a:	47d0      	blx	sl
 800436c:	3001      	adds	r0, #1
 800436e:	d0ab      	beq.n	80042c8 <_printf_i+0x164>
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	079b      	lsls	r3, r3, #30
 8004374:	d413      	bmi.n	800439e <_printf_i+0x23a>
 8004376:	68e0      	ldr	r0, [r4, #12]
 8004378:	9b03      	ldr	r3, [sp, #12]
 800437a:	4298      	cmp	r0, r3
 800437c:	bfb8      	it	lt
 800437e:	4618      	movlt	r0, r3
 8004380:	e7a4      	b.n	80042cc <_printf_i+0x168>
 8004382:	2301      	movs	r3, #1
 8004384:	4632      	mov	r2, r6
 8004386:	4649      	mov	r1, r9
 8004388:	4640      	mov	r0, r8
 800438a:	47d0      	blx	sl
 800438c:	3001      	adds	r0, #1
 800438e:	d09b      	beq.n	80042c8 <_printf_i+0x164>
 8004390:	3501      	adds	r5, #1
 8004392:	68e3      	ldr	r3, [r4, #12]
 8004394:	9903      	ldr	r1, [sp, #12]
 8004396:	1a5b      	subs	r3, r3, r1
 8004398:	42ab      	cmp	r3, r5
 800439a:	dcf2      	bgt.n	8004382 <_printf_i+0x21e>
 800439c:	e7eb      	b.n	8004376 <_printf_i+0x212>
 800439e:	2500      	movs	r5, #0
 80043a0:	f104 0619 	add.w	r6, r4, #25
 80043a4:	e7f5      	b.n	8004392 <_printf_i+0x22e>
 80043a6:	bf00      	nop
 80043a8:	0800a3bc 	.word	0x0800a3bc
 80043ac:	0800a3cd 	.word	0x0800a3cd

080043b0 <_scanf_float>:
 80043b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043b4:	b087      	sub	sp, #28
 80043b6:	4617      	mov	r7, r2
 80043b8:	9303      	str	r3, [sp, #12]
 80043ba:	688b      	ldr	r3, [r1, #8]
 80043bc:	1e5a      	subs	r2, r3, #1
 80043be:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80043c2:	bf83      	ittte	hi
 80043c4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80043c8:	195b      	addhi	r3, r3, r5
 80043ca:	9302      	strhi	r3, [sp, #8]
 80043cc:	2300      	movls	r3, #0
 80043ce:	bf86      	itte	hi
 80043d0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80043d4:	608b      	strhi	r3, [r1, #8]
 80043d6:	9302      	strls	r3, [sp, #8]
 80043d8:	680b      	ldr	r3, [r1, #0]
 80043da:	468b      	mov	fp, r1
 80043dc:	2500      	movs	r5, #0
 80043de:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80043e2:	f84b 3b1c 	str.w	r3, [fp], #28
 80043e6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80043ea:	4680      	mov	r8, r0
 80043ec:	460c      	mov	r4, r1
 80043ee:	465e      	mov	r6, fp
 80043f0:	46aa      	mov	sl, r5
 80043f2:	46a9      	mov	r9, r5
 80043f4:	9501      	str	r5, [sp, #4]
 80043f6:	68a2      	ldr	r2, [r4, #8]
 80043f8:	b152      	cbz	r2, 8004410 <_scanf_float+0x60>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	2b4e      	cmp	r3, #78	; 0x4e
 8004400:	d864      	bhi.n	80044cc <_scanf_float+0x11c>
 8004402:	2b40      	cmp	r3, #64	; 0x40
 8004404:	d83c      	bhi.n	8004480 <_scanf_float+0xd0>
 8004406:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800440a:	b2c8      	uxtb	r0, r1
 800440c:	280e      	cmp	r0, #14
 800440e:	d93a      	bls.n	8004486 <_scanf_float+0xd6>
 8004410:	f1b9 0f00 	cmp.w	r9, #0
 8004414:	d003      	beq.n	800441e <_scanf_float+0x6e>
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800441c:	6023      	str	r3, [r4, #0]
 800441e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004422:	f1ba 0f01 	cmp.w	sl, #1
 8004426:	f200 8113 	bhi.w	8004650 <_scanf_float+0x2a0>
 800442a:	455e      	cmp	r6, fp
 800442c:	f200 8105 	bhi.w	800463a <_scanf_float+0x28a>
 8004430:	2501      	movs	r5, #1
 8004432:	4628      	mov	r0, r5
 8004434:	b007      	add	sp, #28
 8004436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800443a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800443e:	2a0d      	cmp	r2, #13
 8004440:	d8e6      	bhi.n	8004410 <_scanf_float+0x60>
 8004442:	a101      	add	r1, pc, #4	; (adr r1, 8004448 <_scanf_float+0x98>)
 8004444:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004448:	08004587 	.word	0x08004587
 800444c:	08004411 	.word	0x08004411
 8004450:	08004411 	.word	0x08004411
 8004454:	08004411 	.word	0x08004411
 8004458:	080045e7 	.word	0x080045e7
 800445c:	080045bf 	.word	0x080045bf
 8004460:	08004411 	.word	0x08004411
 8004464:	08004411 	.word	0x08004411
 8004468:	08004595 	.word	0x08004595
 800446c:	08004411 	.word	0x08004411
 8004470:	08004411 	.word	0x08004411
 8004474:	08004411 	.word	0x08004411
 8004478:	08004411 	.word	0x08004411
 800447c:	0800454d 	.word	0x0800454d
 8004480:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004484:	e7db      	b.n	800443e <_scanf_float+0x8e>
 8004486:	290e      	cmp	r1, #14
 8004488:	d8c2      	bhi.n	8004410 <_scanf_float+0x60>
 800448a:	a001      	add	r0, pc, #4	; (adr r0, 8004490 <_scanf_float+0xe0>)
 800448c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004490:	0800453f 	.word	0x0800453f
 8004494:	08004411 	.word	0x08004411
 8004498:	0800453f 	.word	0x0800453f
 800449c:	080045d3 	.word	0x080045d3
 80044a0:	08004411 	.word	0x08004411
 80044a4:	080044ed 	.word	0x080044ed
 80044a8:	08004529 	.word	0x08004529
 80044ac:	08004529 	.word	0x08004529
 80044b0:	08004529 	.word	0x08004529
 80044b4:	08004529 	.word	0x08004529
 80044b8:	08004529 	.word	0x08004529
 80044bc:	08004529 	.word	0x08004529
 80044c0:	08004529 	.word	0x08004529
 80044c4:	08004529 	.word	0x08004529
 80044c8:	08004529 	.word	0x08004529
 80044cc:	2b6e      	cmp	r3, #110	; 0x6e
 80044ce:	d809      	bhi.n	80044e4 <_scanf_float+0x134>
 80044d0:	2b60      	cmp	r3, #96	; 0x60
 80044d2:	d8b2      	bhi.n	800443a <_scanf_float+0x8a>
 80044d4:	2b54      	cmp	r3, #84	; 0x54
 80044d6:	d077      	beq.n	80045c8 <_scanf_float+0x218>
 80044d8:	2b59      	cmp	r3, #89	; 0x59
 80044da:	d199      	bne.n	8004410 <_scanf_float+0x60>
 80044dc:	2d07      	cmp	r5, #7
 80044de:	d197      	bne.n	8004410 <_scanf_float+0x60>
 80044e0:	2508      	movs	r5, #8
 80044e2:	e029      	b.n	8004538 <_scanf_float+0x188>
 80044e4:	2b74      	cmp	r3, #116	; 0x74
 80044e6:	d06f      	beq.n	80045c8 <_scanf_float+0x218>
 80044e8:	2b79      	cmp	r3, #121	; 0x79
 80044ea:	e7f6      	b.n	80044da <_scanf_float+0x12a>
 80044ec:	6821      	ldr	r1, [r4, #0]
 80044ee:	05c8      	lsls	r0, r1, #23
 80044f0:	d51a      	bpl.n	8004528 <_scanf_float+0x178>
 80044f2:	9b02      	ldr	r3, [sp, #8]
 80044f4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80044f8:	6021      	str	r1, [r4, #0]
 80044fa:	f109 0901 	add.w	r9, r9, #1
 80044fe:	b11b      	cbz	r3, 8004508 <_scanf_float+0x158>
 8004500:	3b01      	subs	r3, #1
 8004502:	3201      	adds	r2, #1
 8004504:	9302      	str	r3, [sp, #8]
 8004506:	60a2      	str	r2, [r4, #8]
 8004508:	68a3      	ldr	r3, [r4, #8]
 800450a:	3b01      	subs	r3, #1
 800450c:	60a3      	str	r3, [r4, #8]
 800450e:	6923      	ldr	r3, [r4, #16]
 8004510:	3301      	adds	r3, #1
 8004512:	6123      	str	r3, [r4, #16]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3b01      	subs	r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	607b      	str	r3, [r7, #4]
 800451c:	f340 8084 	ble.w	8004628 <_scanf_float+0x278>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	3301      	adds	r3, #1
 8004524:	603b      	str	r3, [r7, #0]
 8004526:	e766      	b.n	80043f6 <_scanf_float+0x46>
 8004528:	eb1a 0f05 	cmn.w	sl, r5
 800452c:	f47f af70 	bne.w	8004410 <_scanf_float+0x60>
 8004530:	6822      	ldr	r2, [r4, #0]
 8004532:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004536:	6022      	str	r2, [r4, #0]
 8004538:	f806 3b01 	strb.w	r3, [r6], #1
 800453c:	e7e4      	b.n	8004508 <_scanf_float+0x158>
 800453e:	6822      	ldr	r2, [r4, #0]
 8004540:	0610      	lsls	r0, r2, #24
 8004542:	f57f af65 	bpl.w	8004410 <_scanf_float+0x60>
 8004546:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800454a:	e7f4      	b.n	8004536 <_scanf_float+0x186>
 800454c:	f1ba 0f00 	cmp.w	sl, #0
 8004550:	d10e      	bne.n	8004570 <_scanf_float+0x1c0>
 8004552:	f1b9 0f00 	cmp.w	r9, #0
 8004556:	d10e      	bne.n	8004576 <_scanf_float+0x1c6>
 8004558:	6822      	ldr	r2, [r4, #0]
 800455a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800455e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004562:	d108      	bne.n	8004576 <_scanf_float+0x1c6>
 8004564:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004568:	6022      	str	r2, [r4, #0]
 800456a:	f04f 0a01 	mov.w	sl, #1
 800456e:	e7e3      	b.n	8004538 <_scanf_float+0x188>
 8004570:	f1ba 0f02 	cmp.w	sl, #2
 8004574:	d055      	beq.n	8004622 <_scanf_float+0x272>
 8004576:	2d01      	cmp	r5, #1
 8004578:	d002      	beq.n	8004580 <_scanf_float+0x1d0>
 800457a:	2d04      	cmp	r5, #4
 800457c:	f47f af48 	bne.w	8004410 <_scanf_float+0x60>
 8004580:	3501      	adds	r5, #1
 8004582:	b2ed      	uxtb	r5, r5
 8004584:	e7d8      	b.n	8004538 <_scanf_float+0x188>
 8004586:	f1ba 0f01 	cmp.w	sl, #1
 800458a:	f47f af41 	bne.w	8004410 <_scanf_float+0x60>
 800458e:	f04f 0a02 	mov.w	sl, #2
 8004592:	e7d1      	b.n	8004538 <_scanf_float+0x188>
 8004594:	b97d      	cbnz	r5, 80045b6 <_scanf_float+0x206>
 8004596:	f1b9 0f00 	cmp.w	r9, #0
 800459a:	f47f af3c 	bne.w	8004416 <_scanf_float+0x66>
 800459e:	6822      	ldr	r2, [r4, #0]
 80045a0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80045a4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80045a8:	f47f af39 	bne.w	800441e <_scanf_float+0x6e>
 80045ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80045b0:	6022      	str	r2, [r4, #0]
 80045b2:	2501      	movs	r5, #1
 80045b4:	e7c0      	b.n	8004538 <_scanf_float+0x188>
 80045b6:	2d03      	cmp	r5, #3
 80045b8:	d0e2      	beq.n	8004580 <_scanf_float+0x1d0>
 80045ba:	2d05      	cmp	r5, #5
 80045bc:	e7de      	b.n	800457c <_scanf_float+0x1cc>
 80045be:	2d02      	cmp	r5, #2
 80045c0:	f47f af26 	bne.w	8004410 <_scanf_float+0x60>
 80045c4:	2503      	movs	r5, #3
 80045c6:	e7b7      	b.n	8004538 <_scanf_float+0x188>
 80045c8:	2d06      	cmp	r5, #6
 80045ca:	f47f af21 	bne.w	8004410 <_scanf_float+0x60>
 80045ce:	2507      	movs	r5, #7
 80045d0:	e7b2      	b.n	8004538 <_scanf_float+0x188>
 80045d2:	6822      	ldr	r2, [r4, #0]
 80045d4:	0591      	lsls	r1, r2, #22
 80045d6:	f57f af1b 	bpl.w	8004410 <_scanf_float+0x60>
 80045da:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80045de:	6022      	str	r2, [r4, #0]
 80045e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80045e4:	e7a8      	b.n	8004538 <_scanf_float+0x188>
 80045e6:	6822      	ldr	r2, [r4, #0]
 80045e8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80045ec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80045f0:	d006      	beq.n	8004600 <_scanf_float+0x250>
 80045f2:	0550      	lsls	r0, r2, #21
 80045f4:	f57f af0c 	bpl.w	8004410 <_scanf_float+0x60>
 80045f8:	f1b9 0f00 	cmp.w	r9, #0
 80045fc:	f43f af0f 	beq.w	800441e <_scanf_float+0x6e>
 8004600:	0591      	lsls	r1, r2, #22
 8004602:	bf58      	it	pl
 8004604:	9901      	ldrpl	r1, [sp, #4]
 8004606:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800460a:	bf58      	it	pl
 800460c:	eba9 0101 	subpl.w	r1, r9, r1
 8004610:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004614:	bf58      	it	pl
 8004616:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800461a:	6022      	str	r2, [r4, #0]
 800461c:	f04f 0900 	mov.w	r9, #0
 8004620:	e78a      	b.n	8004538 <_scanf_float+0x188>
 8004622:	f04f 0a03 	mov.w	sl, #3
 8004626:	e787      	b.n	8004538 <_scanf_float+0x188>
 8004628:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800462c:	4639      	mov	r1, r7
 800462e:	4640      	mov	r0, r8
 8004630:	4798      	blx	r3
 8004632:	2800      	cmp	r0, #0
 8004634:	f43f aedf 	beq.w	80043f6 <_scanf_float+0x46>
 8004638:	e6ea      	b.n	8004410 <_scanf_float+0x60>
 800463a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800463e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004642:	463a      	mov	r2, r7
 8004644:	4640      	mov	r0, r8
 8004646:	4798      	blx	r3
 8004648:	6923      	ldr	r3, [r4, #16]
 800464a:	3b01      	subs	r3, #1
 800464c:	6123      	str	r3, [r4, #16]
 800464e:	e6ec      	b.n	800442a <_scanf_float+0x7a>
 8004650:	1e6b      	subs	r3, r5, #1
 8004652:	2b06      	cmp	r3, #6
 8004654:	d825      	bhi.n	80046a2 <_scanf_float+0x2f2>
 8004656:	2d02      	cmp	r5, #2
 8004658:	d836      	bhi.n	80046c8 <_scanf_float+0x318>
 800465a:	455e      	cmp	r6, fp
 800465c:	f67f aee8 	bls.w	8004430 <_scanf_float+0x80>
 8004660:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004664:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004668:	463a      	mov	r2, r7
 800466a:	4640      	mov	r0, r8
 800466c:	4798      	blx	r3
 800466e:	6923      	ldr	r3, [r4, #16]
 8004670:	3b01      	subs	r3, #1
 8004672:	6123      	str	r3, [r4, #16]
 8004674:	e7f1      	b.n	800465a <_scanf_float+0x2aa>
 8004676:	9802      	ldr	r0, [sp, #8]
 8004678:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800467c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004680:	9002      	str	r0, [sp, #8]
 8004682:	463a      	mov	r2, r7
 8004684:	4640      	mov	r0, r8
 8004686:	4798      	blx	r3
 8004688:	6923      	ldr	r3, [r4, #16]
 800468a:	3b01      	subs	r3, #1
 800468c:	6123      	str	r3, [r4, #16]
 800468e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004692:	fa5f fa8a 	uxtb.w	sl, sl
 8004696:	f1ba 0f02 	cmp.w	sl, #2
 800469a:	d1ec      	bne.n	8004676 <_scanf_float+0x2c6>
 800469c:	3d03      	subs	r5, #3
 800469e:	b2ed      	uxtb	r5, r5
 80046a0:	1b76      	subs	r6, r6, r5
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	05da      	lsls	r2, r3, #23
 80046a6:	d52f      	bpl.n	8004708 <_scanf_float+0x358>
 80046a8:	055b      	lsls	r3, r3, #21
 80046aa:	d510      	bpl.n	80046ce <_scanf_float+0x31e>
 80046ac:	455e      	cmp	r6, fp
 80046ae:	f67f aebf 	bls.w	8004430 <_scanf_float+0x80>
 80046b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80046b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80046ba:	463a      	mov	r2, r7
 80046bc:	4640      	mov	r0, r8
 80046be:	4798      	blx	r3
 80046c0:	6923      	ldr	r3, [r4, #16]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	6123      	str	r3, [r4, #16]
 80046c6:	e7f1      	b.n	80046ac <_scanf_float+0x2fc>
 80046c8:	46aa      	mov	sl, r5
 80046ca:	9602      	str	r6, [sp, #8]
 80046cc:	e7df      	b.n	800468e <_scanf_float+0x2de>
 80046ce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80046d2:	6923      	ldr	r3, [r4, #16]
 80046d4:	2965      	cmp	r1, #101	; 0x65
 80046d6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80046da:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80046de:	6123      	str	r3, [r4, #16]
 80046e0:	d00c      	beq.n	80046fc <_scanf_float+0x34c>
 80046e2:	2945      	cmp	r1, #69	; 0x45
 80046e4:	d00a      	beq.n	80046fc <_scanf_float+0x34c>
 80046e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80046ea:	463a      	mov	r2, r7
 80046ec:	4640      	mov	r0, r8
 80046ee:	4798      	blx	r3
 80046f0:	6923      	ldr	r3, [r4, #16]
 80046f2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	1eb5      	subs	r5, r6, #2
 80046fa:	6123      	str	r3, [r4, #16]
 80046fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004700:	463a      	mov	r2, r7
 8004702:	4640      	mov	r0, r8
 8004704:	4798      	blx	r3
 8004706:	462e      	mov	r6, r5
 8004708:	6825      	ldr	r5, [r4, #0]
 800470a:	f015 0510 	ands.w	r5, r5, #16
 800470e:	d155      	bne.n	80047bc <_scanf_float+0x40c>
 8004710:	7035      	strb	r5, [r6, #0]
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800471c:	d11b      	bne.n	8004756 <_scanf_float+0x3a6>
 800471e:	9b01      	ldr	r3, [sp, #4]
 8004720:	454b      	cmp	r3, r9
 8004722:	eba3 0209 	sub.w	r2, r3, r9
 8004726:	d123      	bne.n	8004770 <_scanf_float+0x3c0>
 8004728:	2200      	movs	r2, #0
 800472a:	4659      	mov	r1, fp
 800472c:	4640      	mov	r0, r8
 800472e:	f000 fee7 	bl	8005500 <_strtod_r>
 8004732:	6822      	ldr	r2, [r4, #0]
 8004734:	9b03      	ldr	r3, [sp, #12]
 8004736:	f012 0f02 	tst.w	r2, #2
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4606      	mov	r6, r0
 800473e:	460f      	mov	r7, r1
 8004740:	d021      	beq.n	8004786 <_scanf_float+0x3d6>
 8004742:	1d1a      	adds	r2, r3, #4
 8004744:	9903      	ldr	r1, [sp, #12]
 8004746:	600a      	str	r2, [r1, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	e9c3 6700 	strd	r6, r7, [r3]
 800474e:	68e3      	ldr	r3, [r4, #12]
 8004750:	3301      	adds	r3, #1
 8004752:	60e3      	str	r3, [r4, #12]
 8004754:	e66d      	b.n	8004432 <_scanf_float+0x82>
 8004756:	9b04      	ldr	r3, [sp, #16]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0e5      	beq.n	8004728 <_scanf_float+0x378>
 800475c:	9905      	ldr	r1, [sp, #20]
 800475e:	230a      	movs	r3, #10
 8004760:	462a      	mov	r2, r5
 8004762:	3101      	adds	r1, #1
 8004764:	4640      	mov	r0, r8
 8004766:	f000 ff4d 	bl	8005604 <_strtol_r>
 800476a:	9b04      	ldr	r3, [sp, #16]
 800476c:	9e05      	ldr	r6, [sp, #20]
 800476e:	1ac2      	subs	r2, r0, r3
 8004770:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004774:	429e      	cmp	r6, r3
 8004776:	bf28      	it	cs
 8004778:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800477c:	4910      	ldr	r1, [pc, #64]	; (80047c0 <_scanf_float+0x410>)
 800477e:	4630      	mov	r0, r6
 8004780:	f000 f826 	bl	80047d0 <siprintf>
 8004784:	e7d0      	b.n	8004728 <_scanf_float+0x378>
 8004786:	f012 0f04 	tst.w	r2, #4
 800478a:	f103 0204 	add.w	r2, r3, #4
 800478e:	d1d9      	bne.n	8004744 <_scanf_float+0x394>
 8004790:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004794:	f8cc 2000 	str.w	r2, [ip]
 8004798:	f8d3 8000 	ldr.w	r8, [r3]
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	f7fc f9dc 	bl	8000b5c <__aeabi_dcmpun>
 80047a4:	b128      	cbz	r0, 80047b2 <_scanf_float+0x402>
 80047a6:	4807      	ldr	r0, [pc, #28]	; (80047c4 <_scanf_float+0x414>)
 80047a8:	f000 f80e 	bl	80047c8 <nanf>
 80047ac:	f8c8 0000 	str.w	r0, [r8]
 80047b0:	e7cd      	b.n	800474e <_scanf_float+0x39e>
 80047b2:	4630      	mov	r0, r6
 80047b4:	4639      	mov	r1, r7
 80047b6:	f7fc fa2f 	bl	8000c18 <__aeabi_d2f>
 80047ba:	e7f7      	b.n	80047ac <_scanf_float+0x3fc>
 80047bc:	2500      	movs	r5, #0
 80047be:	e638      	b.n	8004432 <_scanf_float+0x82>
 80047c0:	0800a3de 	.word	0x0800a3de
 80047c4:	0800a803 	.word	0x0800a803

080047c8 <nanf>:
 80047c8:	4800      	ldr	r0, [pc, #0]	; (80047cc <nanf+0x4>)
 80047ca:	4770      	bx	lr
 80047cc:	7fc00000 	.word	0x7fc00000

080047d0 <siprintf>:
 80047d0:	b40e      	push	{r1, r2, r3}
 80047d2:	b500      	push	{lr}
 80047d4:	b09c      	sub	sp, #112	; 0x70
 80047d6:	ab1d      	add	r3, sp, #116	; 0x74
 80047d8:	9002      	str	r0, [sp, #8]
 80047da:	9006      	str	r0, [sp, #24]
 80047dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047e0:	4809      	ldr	r0, [pc, #36]	; (8004808 <siprintf+0x38>)
 80047e2:	9107      	str	r1, [sp, #28]
 80047e4:	9104      	str	r1, [sp, #16]
 80047e6:	4909      	ldr	r1, [pc, #36]	; (800480c <siprintf+0x3c>)
 80047e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80047ec:	9105      	str	r1, [sp, #20]
 80047ee:	6800      	ldr	r0, [r0, #0]
 80047f0:	9301      	str	r3, [sp, #4]
 80047f2:	a902      	add	r1, sp, #8
 80047f4:	f002 ff4e 	bl	8007694 <_svfiprintf_r>
 80047f8:	9b02      	ldr	r3, [sp, #8]
 80047fa:	2200      	movs	r2, #0
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	b01c      	add	sp, #112	; 0x70
 8004800:	f85d eb04 	ldr.w	lr, [sp], #4
 8004804:	b003      	add	sp, #12
 8004806:	4770      	bx	lr
 8004808:	20000044 	.word	0x20000044
 800480c:	ffff0208 	.word	0xffff0208

08004810 <siscanf>:
 8004810:	b40e      	push	{r1, r2, r3}
 8004812:	b530      	push	{r4, r5, lr}
 8004814:	b09c      	sub	sp, #112	; 0x70
 8004816:	ac1f      	add	r4, sp, #124	; 0x7c
 8004818:	f44f 7201 	mov.w	r2, #516	; 0x204
 800481c:	f854 5b04 	ldr.w	r5, [r4], #4
 8004820:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004824:	9002      	str	r0, [sp, #8]
 8004826:	9006      	str	r0, [sp, #24]
 8004828:	f7fb fce4 	bl	80001f4 <strlen>
 800482c:	4b0b      	ldr	r3, [pc, #44]	; (800485c <siscanf+0x4c>)
 800482e:	9003      	str	r0, [sp, #12]
 8004830:	9007      	str	r0, [sp, #28]
 8004832:	930b      	str	r3, [sp, #44]	; 0x2c
 8004834:	480a      	ldr	r0, [pc, #40]	; (8004860 <siscanf+0x50>)
 8004836:	9401      	str	r4, [sp, #4]
 8004838:	2300      	movs	r3, #0
 800483a:	930f      	str	r3, [sp, #60]	; 0x3c
 800483c:	9314      	str	r3, [sp, #80]	; 0x50
 800483e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004842:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004846:	462a      	mov	r2, r5
 8004848:	4623      	mov	r3, r4
 800484a:	a902      	add	r1, sp, #8
 800484c:	6800      	ldr	r0, [r0, #0]
 800484e:	f003 f87b 	bl	8007948 <__ssvfiscanf_r>
 8004852:	b01c      	add	sp, #112	; 0x70
 8004854:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004858:	b003      	add	sp, #12
 800485a:	4770      	bx	lr
 800485c:	08004887 	.word	0x08004887
 8004860:	20000044 	.word	0x20000044

08004864 <__sread>:
 8004864:	b510      	push	{r4, lr}
 8004866:	460c      	mov	r4, r1
 8004868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800486c:	f003 fb36 	bl	8007edc <_read_r>
 8004870:	2800      	cmp	r0, #0
 8004872:	bfab      	itete	ge
 8004874:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004876:	89a3      	ldrhlt	r3, [r4, #12]
 8004878:	181b      	addge	r3, r3, r0
 800487a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800487e:	bfac      	ite	ge
 8004880:	6563      	strge	r3, [r4, #84]	; 0x54
 8004882:	81a3      	strhlt	r3, [r4, #12]
 8004884:	bd10      	pop	{r4, pc}

08004886 <__seofread>:
 8004886:	2000      	movs	r0, #0
 8004888:	4770      	bx	lr

0800488a <__swrite>:
 800488a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800488e:	461f      	mov	r7, r3
 8004890:	898b      	ldrh	r3, [r1, #12]
 8004892:	05db      	lsls	r3, r3, #23
 8004894:	4605      	mov	r5, r0
 8004896:	460c      	mov	r4, r1
 8004898:	4616      	mov	r6, r2
 800489a:	d505      	bpl.n	80048a8 <__swrite+0x1e>
 800489c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048a0:	2302      	movs	r3, #2
 80048a2:	2200      	movs	r2, #0
 80048a4:	f002 f8ba 	bl	8006a1c <_lseek_r>
 80048a8:	89a3      	ldrh	r3, [r4, #12]
 80048aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048b2:	81a3      	strh	r3, [r4, #12]
 80048b4:	4632      	mov	r2, r6
 80048b6:	463b      	mov	r3, r7
 80048b8:	4628      	mov	r0, r5
 80048ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048be:	f000 bea3 	b.w	8005608 <_write_r>

080048c2 <__sseek>:
 80048c2:	b510      	push	{r4, lr}
 80048c4:	460c      	mov	r4, r1
 80048c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ca:	f002 f8a7 	bl	8006a1c <_lseek_r>
 80048ce:	1c43      	adds	r3, r0, #1
 80048d0:	89a3      	ldrh	r3, [r4, #12]
 80048d2:	bf15      	itete	ne
 80048d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80048d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80048da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80048de:	81a3      	strheq	r3, [r4, #12]
 80048e0:	bf18      	it	ne
 80048e2:	81a3      	strhne	r3, [r4, #12]
 80048e4:	bd10      	pop	{r4, pc}

080048e6 <__sclose>:
 80048e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ea:	f000 be9f 	b.w	800562c <_close_r>

080048ee <sulp>:
 80048ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048f2:	460f      	mov	r7, r1
 80048f4:	4690      	mov	r8, r2
 80048f6:	f002 fc37 	bl	8007168 <__ulp>
 80048fa:	4604      	mov	r4, r0
 80048fc:	460d      	mov	r5, r1
 80048fe:	f1b8 0f00 	cmp.w	r8, #0
 8004902:	d011      	beq.n	8004928 <sulp+0x3a>
 8004904:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004908:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800490c:	2b00      	cmp	r3, #0
 800490e:	dd0b      	ble.n	8004928 <sulp+0x3a>
 8004910:	051b      	lsls	r3, r3, #20
 8004912:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004916:	2400      	movs	r4, #0
 8004918:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800491c:	4622      	mov	r2, r4
 800491e:	462b      	mov	r3, r5
 8004920:	f7fb fe82 	bl	8000628 <__aeabi_dmul>
 8004924:	4604      	mov	r4, r0
 8004926:	460d      	mov	r5, r1
 8004928:	4620      	mov	r0, r4
 800492a:	4629      	mov	r1, r5
 800492c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004930 <_strtod_l>:
 8004930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004934:	b09f      	sub	sp, #124	; 0x7c
 8004936:	469b      	mov	fp, r3
 8004938:	2300      	movs	r3, #0
 800493a:	931a      	str	r3, [sp, #104]	; 0x68
 800493c:	4b9e      	ldr	r3, [pc, #632]	; (8004bb8 <_strtod_l+0x288>)
 800493e:	9215      	str	r2, [sp, #84]	; 0x54
 8004940:	681f      	ldr	r7, [r3, #0]
 8004942:	4682      	mov	sl, r0
 8004944:	4638      	mov	r0, r7
 8004946:	460e      	mov	r6, r1
 8004948:	f7fb fc54 	bl	80001f4 <strlen>
 800494c:	f04f 0800 	mov.w	r8, #0
 8004950:	4604      	mov	r4, r0
 8004952:	f04f 0900 	mov.w	r9, #0
 8004956:	9619      	str	r6, [sp, #100]	; 0x64
 8004958:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800495a:	781a      	ldrb	r2, [r3, #0]
 800495c:	2a2b      	cmp	r2, #43	; 0x2b
 800495e:	d04c      	beq.n	80049fa <_strtod_l+0xca>
 8004960:	d83a      	bhi.n	80049d8 <_strtod_l+0xa8>
 8004962:	2a0d      	cmp	r2, #13
 8004964:	d833      	bhi.n	80049ce <_strtod_l+0x9e>
 8004966:	2a08      	cmp	r2, #8
 8004968:	d833      	bhi.n	80049d2 <_strtod_l+0xa2>
 800496a:	2a00      	cmp	r2, #0
 800496c:	d03d      	beq.n	80049ea <_strtod_l+0xba>
 800496e:	2300      	movs	r3, #0
 8004970:	930a      	str	r3, [sp, #40]	; 0x28
 8004972:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004974:	782b      	ldrb	r3, [r5, #0]
 8004976:	2b30      	cmp	r3, #48	; 0x30
 8004978:	f040 80aa 	bne.w	8004ad0 <_strtod_l+0x1a0>
 800497c:	786b      	ldrb	r3, [r5, #1]
 800497e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004982:	2b58      	cmp	r3, #88	; 0x58
 8004984:	d166      	bne.n	8004a54 <_strtod_l+0x124>
 8004986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004988:	9301      	str	r3, [sp, #4]
 800498a:	ab1a      	add	r3, sp, #104	; 0x68
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	4a8b      	ldr	r2, [pc, #556]	; (8004bbc <_strtod_l+0x28c>)
 8004990:	f8cd b008 	str.w	fp, [sp, #8]
 8004994:	ab1b      	add	r3, sp, #108	; 0x6c
 8004996:	a919      	add	r1, sp, #100	; 0x64
 8004998:	4650      	mov	r0, sl
 800499a:	f001 fd3d 	bl	8006418 <__gethex>
 800499e:	f010 0607 	ands.w	r6, r0, #7
 80049a2:	4604      	mov	r4, r0
 80049a4:	d005      	beq.n	80049b2 <_strtod_l+0x82>
 80049a6:	2e06      	cmp	r6, #6
 80049a8:	d129      	bne.n	80049fe <_strtod_l+0xce>
 80049aa:	3501      	adds	r5, #1
 80049ac:	2300      	movs	r3, #0
 80049ae:	9519      	str	r5, [sp, #100]	; 0x64
 80049b0:	930a      	str	r3, [sp, #40]	; 0x28
 80049b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f040 858a 	bne.w	80054ce <_strtod_l+0xb9e>
 80049ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049bc:	b1d3      	cbz	r3, 80049f4 <_strtod_l+0xc4>
 80049be:	4642      	mov	r2, r8
 80049c0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80049c4:	4610      	mov	r0, r2
 80049c6:	4619      	mov	r1, r3
 80049c8:	b01f      	add	sp, #124	; 0x7c
 80049ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ce:	2a20      	cmp	r2, #32
 80049d0:	d1cd      	bne.n	800496e <_strtod_l+0x3e>
 80049d2:	3301      	adds	r3, #1
 80049d4:	9319      	str	r3, [sp, #100]	; 0x64
 80049d6:	e7bf      	b.n	8004958 <_strtod_l+0x28>
 80049d8:	2a2d      	cmp	r2, #45	; 0x2d
 80049da:	d1c8      	bne.n	800496e <_strtod_l+0x3e>
 80049dc:	2201      	movs	r2, #1
 80049de:	920a      	str	r2, [sp, #40]	; 0x28
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	9219      	str	r2, [sp, #100]	; 0x64
 80049e4:	785b      	ldrb	r3, [r3, #1]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1c3      	bne.n	8004972 <_strtod_l+0x42>
 80049ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80049ec:	9619      	str	r6, [sp, #100]	; 0x64
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f040 856b 	bne.w	80054ca <_strtod_l+0xb9a>
 80049f4:	4642      	mov	r2, r8
 80049f6:	464b      	mov	r3, r9
 80049f8:	e7e4      	b.n	80049c4 <_strtod_l+0x94>
 80049fa:	2200      	movs	r2, #0
 80049fc:	e7ef      	b.n	80049de <_strtod_l+0xae>
 80049fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004a00:	b13a      	cbz	r2, 8004a12 <_strtod_l+0xe2>
 8004a02:	2135      	movs	r1, #53	; 0x35
 8004a04:	a81c      	add	r0, sp, #112	; 0x70
 8004a06:	f002 fcb3 	bl	8007370 <__copybits>
 8004a0a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004a0c:	4650      	mov	r0, sl
 8004a0e:	f002 f87f 	bl	8006b10 <_Bfree>
 8004a12:	3e01      	subs	r6, #1
 8004a14:	2e04      	cmp	r6, #4
 8004a16:	d806      	bhi.n	8004a26 <_strtod_l+0xf6>
 8004a18:	e8df f006 	tbb	[pc, r6]
 8004a1c:	1714030a 	.word	0x1714030a
 8004a20:	0a          	.byte	0x0a
 8004a21:	00          	.byte	0x00
 8004a22:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8004a26:	0721      	lsls	r1, r4, #28
 8004a28:	d5c3      	bpl.n	80049b2 <_strtod_l+0x82>
 8004a2a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004a2e:	e7c0      	b.n	80049b2 <_strtod_l+0x82>
 8004a30:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8004a34:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004a36:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004a3a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004a3e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004a42:	e7f0      	b.n	8004a26 <_strtod_l+0xf6>
 8004a44:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004bc0 <_strtod_l+0x290>
 8004a48:	e7ed      	b.n	8004a26 <_strtod_l+0xf6>
 8004a4a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004a4e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004a52:	e7e8      	b.n	8004a26 <_strtod_l+0xf6>
 8004a54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004a56:	1c5a      	adds	r2, r3, #1
 8004a58:	9219      	str	r2, [sp, #100]	; 0x64
 8004a5a:	785b      	ldrb	r3, [r3, #1]
 8004a5c:	2b30      	cmp	r3, #48	; 0x30
 8004a5e:	d0f9      	beq.n	8004a54 <_strtod_l+0x124>
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0a6      	beq.n	80049b2 <_strtod_l+0x82>
 8004a64:	2301      	movs	r3, #1
 8004a66:	9307      	str	r3, [sp, #28]
 8004a68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004a6a:	9308      	str	r3, [sp, #32]
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004a72:	469b      	mov	fp, r3
 8004a74:	220a      	movs	r2, #10
 8004a76:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004a78:	7805      	ldrb	r5, [r0, #0]
 8004a7a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004a7e:	b2d9      	uxtb	r1, r3
 8004a80:	2909      	cmp	r1, #9
 8004a82:	d927      	bls.n	8004ad4 <_strtod_l+0x1a4>
 8004a84:	4622      	mov	r2, r4
 8004a86:	4639      	mov	r1, r7
 8004a88:	f003 fa88 	bl	8007f9c <strncmp>
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	d033      	beq.n	8004af8 <_strtod_l+0x1c8>
 8004a90:	2000      	movs	r0, #0
 8004a92:	462a      	mov	r2, r5
 8004a94:	465c      	mov	r4, fp
 8004a96:	9004      	str	r0, [sp, #16]
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2a65      	cmp	r2, #101	; 0x65
 8004a9c:	d001      	beq.n	8004aa2 <_strtod_l+0x172>
 8004a9e:	2a45      	cmp	r2, #69	; 0x45
 8004aa0:	d114      	bne.n	8004acc <_strtod_l+0x19c>
 8004aa2:	b91c      	cbnz	r4, 8004aac <_strtod_l+0x17c>
 8004aa4:	9a07      	ldr	r2, [sp, #28]
 8004aa6:	4302      	orrs	r2, r0
 8004aa8:	d09f      	beq.n	80049ea <_strtod_l+0xba>
 8004aaa:	2400      	movs	r4, #0
 8004aac:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004aae:	1c72      	adds	r2, r6, #1
 8004ab0:	9219      	str	r2, [sp, #100]	; 0x64
 8004ab2:	7872      	ldrb	r2, [r6, #1]
 8004ab4:	2a2b      	cmp	r2, #43	; 0x2b
 8004ab6:	d079      	beq.n	8004bac <_strtod_l+0x27c>
 8004ab8:	2a2d      	cmp	r2, #45	; 0x2d
 8004aba:	f000 8083 	beq.w	8004bc4 <_strtod_l+0x294>
 8004abe:	2700      	movs	r7, #0
 8004ac0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004ac4:	2909      	cmp	r1, #9
 8004ac6:	f240 8083 	bls.w	8004bd0 <_strtod_l+0x2a0>
 8004aca:	9619      	str	r6, [sp, #100]	; 0x64
 8004acc:	2500      	movs	r5, #0
 8004ace:	e09f      	b.n	8004c10 <_strtod_l+0x2e0>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	e7c8      	b.n	8004a66 <_strtod_l+0x136>
 8004ad4:	f1bb 0f08 	cmp.w	fp, #8
 8004ad8:	bfd5      	itete	le
 8004ada:	9906      	ldrle	r1, [sp, #24]
 8004adc:	9905      	ldrgt	r1, [sp, #20]
 8004ade:	fb02 3301 	mlale	r3, r2, r1, r3
 8004ae2:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004ae6:	f100 0001 	add.w	r0, r0, #1
 8004aea:	bfd4      	ite	le
 8004aec:	9306      	strle	r3, [sp, #24]
 8004aee:	9305      	strgt	r3, [sp, #20]
 8004af0:	f10b 0b01 	add.w	fp, fp, #1
 8004af4:	9019      	str	r0, [sp, #100]	; 0x64
 8004af6:	e7be      	b.n	8004a76 <_strtod_l+0x146>
 8004af8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004afa:	191a      	adds	r2, r3, r4
 8004afc:	9219      	str	r2, [sp, #100]	; 0x64
 8004afe:	5d1a      	ldrb	r2, [r3, r4]
 8004b00:	f1bb 0f00 	cmp.w	fp, #0
 8004b04:	d036      	beq.n	8004b74 <_strtod_l+0x244>
 8004b06:	9004      	str	r0, [sp, #16]
 8004b08:	465c      	mov	r4, fp
 8004b0a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004b0e:	2b09      	cmp	r3, #9
 8004b10:	d912      	bls.n	8004b38 <_strtod_l+0x208>
 8004b12:	2301      	movs	r3, #1
 8004b14:	e7c1      	b.n	8004a9a <_strtod_l+0x16a>
 8004b16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	9219      	str	r2, [sp, #100]	; 0x64
 8004b1c:	785a      	ldrb	r2, [r3, #1]
 8004b1e:	3001      	adds	r0, #1
 8004b20:	2a30      	cmp	r2, #48	; 0x30
 8004b22:	d0f8      	beq.n	8004b16 <_strtod_l+0x1e6>
 8004b24:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	f200 84d5 	bhi.w	80054d8 <_strtod_l+0xba8>
 8004b2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004b30:	9004      	str	r0, [sp, #16]
 8004b32:	2000      	movs	r0, #0
 8004b34:	9308      	str	r3, [sp, #32]
 8004b36:	4604      	mov	r4, r0
 8004b38:	3a30      	subs	r2, #48	; 0x30
 8004b3a:	f100 0301 	add.w	r3, r0, #1
 8004b3e:	d013      	beq.n	8004b68 <_strtod_l+0x238>
 8004b40:	9904      	ldr	r1, [sp, #16]
 8004b42:	4419      	add	r1, r3
 8004b44:	9104      	str	r1, [sp, #16]
 8004b46:	4623      	mov	r3, r4
 8004b48:	1905      	adds	r5, r0, r4
 8004b4a:	210a      	movs	r1, #10
 8004b4c:	42ab      	cmp	r3, r5
 8004b4e:	d113      	bne.n	8004b78 <_strtod_l+0x248>
 8004b50:	1823      	adds	r3, r4, r0
 8004b52:	2b08      	cmp	r3, #8
 8004b54:	f104 0401 	add.w	r4, r4, #1
 8004b58:	4404      	add	r4, r0
 8004b5a:	dc1b      	bgt.n	8004b94 <_strtod_l+0x264>
 8004b5c:	9906      	ldr	r1, [sp, #24]
 8004b5e:	230a      	movs	r3, #10
 8004b60:	fb03 2301 	mla	r3, r3, r1, r2
 8004b64:	9306      	str	r3, [sp, #24]
 8004b66:	2300      	movs	r3, #0
 8004b68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004b6a:	1c51      	adds	r1, r2, #1
 8004b6c:	9119      	str	r1, [sp, #100]	; 0x64
 8004b6e:	7852      	ldrb	r2, [r2, #1]
 8004b70:	4618      	mov	r0, r3
 8004b72:	e7ca      	b.n	8004b0a <_strtod_l+0x1da>
 8004b74:	4658      	mov	r0, fp
 8004b76:	e7d3      	b.n	8004b20 <_strtod_l+0x1f0>
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	dc04      	bgt.n	8004b86 <_strtod_l+0x256>
 8004b7c:	9f06      	ldr	r7, [sp, #24]
 8004b7e:	434f      	muls	r7, r1
 8004b80:	9706      	str	r7, [sp, #24]
 8004b82:	3301      	adds	r3, #1
 8004b84:	e7e2      	b.n	8004b4c <_strtod_l+0x21c>
 8004b86:	1c5f      	adds	r7, r3, #1
 8004b88:	2f10      	cmp	r7, #16
 8004b8a:	bfde      	ittt	le
 8004b8c:	9f05      	ldrle	r7, [sp, #20]
 8004b8e:	434f      	mulle	r7, r1
 8004b90:	9705      	strle	r7, [sp, #20]
 8004b92:	e7f6      	b.n	8004b82 <_strtod_l+0x252>
 8004b94:	2c10      	cmp	r4, #16
 8004b96:	bfdf      	itttt	le
 8004b98:	9905      	ldrle	r1, [sp, #20]
 8004b9a:	230a      	movle	r3, #10
 8004b9c:	fb03 2301 	mlale	r3, r3, r1, r2
 8004ba0:	9305      	strle	r3, [sp, #20]
 8004ba2:	e7e0      	b.n	8004b66 <_strtod_l+0x236>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	9304      	str	r3, [sp, #16]
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e77b      	b.n	8004aa4 <_strtod_l+0x174>
 8004bac:	2700      	movs	r7, #0
 8004bae:	1cb2      	adds	r2, r6, #2
 8004bb0:	9219      	str	r2, [sp, #100]	; 0x64
 8004bb2:	78b2      	ldrb	r2, [r6, #2]
 8004bb4:	e784      	b.n	8004ac0 <_strtod_l+0x190>
 8004bb6:	bf00      	nop
 8004bb8:	0800a630 	.word	0x0800a630
 8004bbc:	0800a3e4 	.word	0x0800a3e4
 8004bc0:	7ff00000 	.word	0x7ff00000
 8004bc4:	2701      	movs	r7, #1
 8004bc6:	e7f2      	b.n	8004bae <_strtod_l+0x27e>
 8004bc8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004bca:	1c51      	adds	r1, r2, #1
 8004bcc:	9119      	str	r1, [sp, #100]	; 0x64
 8004bce:	7852      	ldrb	r2, [r2, #1]
 8004bd0:	2a30      	cmp	r2, #48	; 0x30
 8004bd2:	d0f9      	beq.n	8004bc8 <_strtod_l+0x298>
 8004bd4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004bd8:	2908      	cmp	r1, #8
 8004bda:	f63f af77 	bhi.w	8004acc <_strtod_l+0x19c>
 8004bde:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8004be2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004be4:	9209      	str	r2, [sp, #36]	; 0x24
 8004be6:	f04f 0e0a 	mov.w	lr, #10
 8004bea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004bec:	1c51      	adds	r1, r2, #1
 8004bee:	9119      	str	r1, [sp, #100]	; 0x64
 8004bf0:	7852      	ldrb	r2, [r2, #1]
 8004bf2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8004bf6:	2d09      	cmp	r5, #9
 8004bf8:	d935      	bls.n	8004c66 <_strtod_l+0x336>
 8004bfa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004bfc:	1b49      	subs	r1, r1, r5
 8004bfe:	2908      	cmp	r1, #8
 8004c00:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8004c04:	dc02      	bgt.n	8004c0c <_strtod_l+0x2dc>
 8004c06:	4565      	cmp	r5, ip
 8004c08:	bfa8      	it	ge
 8004c0a:	4665      	movge	r5, ip
 8004c0c:	b107      	cbz	r7, 8004c10 <_strtod_l+0x2e0>
 8004c0e:	426d      	negs	r5, r5
 8004c10:	2c00      	cmp	r4, #0
 8004c12:	d14c      	bne.n	8004cae <_strtod_l+0x37e>
 8004c14:	9907      	ldr	r1, [sp, #28]
 8004c16:	4301      	orrs	r1, r0
 8004c18:	f47f aecb 	bne.w	80049b2 <_strtod_l+0x82>
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f47f aee4 	bne.w	80049ea <_strtod_l+0xba>
 8004c22:	2a69      	cmp	r2, #105	; 0x69
 8004c24:	d026      	beq.n	8004c74 <_strtod_l+0x344>
 8004c26:	dc23      	bgt.n	8004c70 <_strtod_l+0x340>
 8004c28:	2a49      	cmp	r2, #73	; 0x49
 8004c2a:	d023      	beq.n	8004c74 <_strtod_l+0x344>
 8004c2c:	2a4e      	cmp	r2, #78	; 0x4e
 8004c2e:	f47f aedc 	bne.w	80049ea <_strtod_l+0xba>
 8004c32:	499d      	ldr	r1, [pc, #628]	; (8004ea8 <_strtod_l+0x578>)
 8004c34:	a819      	add	r0, sp, #100	; 0x64
 8004c36:	f001 fe3d 	bl	80068b4 <__match>
 8004c3a:	2800      	cmp	r0, #0
 8004c3c:	f43f aed5 	beq.w	80049ea <_strtod_l+0xba>
 8004c40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	2b28      	cmp	r3, #40	; 0x28
 8004c46:	d12c      	bne.n	8004ca2 <_strtod_l+0x372>
 8004c48:	4998      	ldr	r1, [pc, #608]	; (8004eac <_strtod_l+0x57c>)
 8004c4a:	aa1c      	add	r2, sp, #112	; 0x70
 8004c4c:	a819      	add	r0, sp, #100	; 0x64
 8004c4e:	f001 fe45 	bl	80068dc <__hexnan>
 8004c52:	2805      	cmp	r0, #5
 8004c54:	d125      	bne.n	8004ca2 <_strtod_l+0x372>
 8004c56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004c58:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004c5c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004c60:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004c64:	e6a5      	b.n	80049b2 <_strtod_l+0x82>
 8004c66:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8004c6a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004c6e:	e7bc      	b.n	8004bea <_strtod_l+0x2ba>
 8004c70:	2a6e      	cmp	r2, #110	; 0x6e
 8004c72:	e7dc      	b.n	8004c2e <_strtod_l+0x2fe>
 8004c74:	498e      	ldr	r1, [pc, #568]	; (8004eb0 <_strtod_l+0x580>)
 8004c76:	a819      	add	r0, sp, #100	; 0x64
 8004c78:	f001 fe1c 	bl	80068b4 <__match>
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	f43f aeb4 	beq.w	80049ea <_strtod_l+0xba>
 8004c82:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004c84:	498b      	ldr	r1, [pc, #556]	; (8004eb4 <_strtod_l+0x584>)
 8004c86:	3b01      	subs	r3, #1
 8004c88:	a819      	add	r0, sp, #100	; 0x64
 8004c8a:	9319      	str	r3, [sp, #100]	; 0x64
 8004c8c:	f001 fe12 	bl	80068b4 <__match>
 8004c90:	b910      	cbnz	r0, 8004c98 <_strtod_l+0x368>
 8004c92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004c94:	3301      	adds	r3, #1
 8004c96:	9319      	str	r3, [sp, #100]	; 0x64
 8004c98:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8004eb8 <_strtod_l+0x588>
 8004c9c:	f04f 0800 	mov.w	r8, #0
 8004ca0:	e687      	b.n	80049b2 <_strtod_l+0x82>
 8004ca2:	4886      	ldr	r0, [pc, #536]	; (8004ebc <_strtod_l+0x58c>)
 8004ca4:	f003 f92c 	bl	8007f00 <nan>
 8004ca8:	4680      	mov	r8, r0
 8004caa:	4689      	mov	r9, r1
 8004cac:	e681      	b.n	80049b2 <_strtod_l+0x82>
 8004cae:	9b04      	ldr	r3, [sp, #16]
 8004cb0:	9806      	ldr	r0, [sp, #24]
 8004cb2:	1aeb      	subs	r3, r5, r3
 8004cb4:	f1bb 0f00 	cmp.w	fp, #0
 8004cb8:	bf08      	it	eq
 8004cba:	46a3      	moveq	fp, r4
 8004cbc:	2c10      	cmp	r4, #16
 8004cbe:	9307      	str	r3, [sp, #28]
 8004cc0:	4626      	mov	r6, r4
 8004cc2:	bfa8      	it	ge
 8004cc4:	2610      	movge	r6, #16
 8004cc6:	f7fb fc35 	bl	8000534 <__aeabi_ui2d>
 8004cca:	2c09      	cmp	r4, #9
 8004ccc:	4680      	mov	r8, r0
 8004cce:	4689      	mov	r9, r1
 8004cd0:	dd13      	ble.n	8004cfa <_strtod_l+0x3ca>
 8004cd2:	4b7b      	ldr	r3, [pc, #492]	; (8004ec0 <_strtod_l+0x590>)
 8004cd4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004cd8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004cdc:	f7fb fca4 	bl	8000628 <__aeabi_dmul>
 8004ce0:	4680      	mov	r8, r0
 8004ce2:	9805      	ldr	r0, [sp, #20]
 8004ce4:	4689      	mov	r9, r1
 8004ce6:	f7fb fc25 	bl	8000534 <__aeabi_ui2d>
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	4640      	mov	r0, r8
 8004cf0:	4649      	mov	r1, r9
 8004cf2:	f7fb fae3 	bl	80002bc <__adddf3>
 8004cf6:	4680      	mov	r8, r0
 8004cf8:	4689      	mov	r9, r1
 8004cfa:	2c0f      	cmp	r4, #15
 8004cfc:	dc36      	bgt.n	8004d6c <_strtod_l+0x43c>
 8004cfe:	9b07      	ldr	r3, [sp, #28]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f43f ae56 	beq.w	80049b2 <_strtod_l+0x82>
 8004d06:	dd22      	ble.n	8004d4e <_strtod_l+0x41e>
 8004d08:	2b16      	cmp	r3, #22
 8004d0a:	dc09      	bgt.n	8004d20 <_strtod_l+0x3f0>
 8004d0c:	496c      	ldr	r1, [pc, #432]	; (8004ec0 <_strtod_l+0x590>)
 8004d0e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004d12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d16:	4642      	mov	r2, r8
 8004d18:	464b      	mov	r3, r9
 8004d1a:	f7fb fc85 	bl	8000628 <__aeabi_dmul>
 8004d1e:	e7c3      	b.n	8004ca8 <_strtod_l+0x378>
 8004d20:	9a07      	ldr	r2, [sp, #28]
 8004d22:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004d26:	4293      	cmp	r3, r2
 8004d28:	db20      	blt.n	8004d6c <_strtod_l+0x43c>
 8004d2a:	4d65      	ldr	r5, [pc, #404]	; (8004ec0 <_strtod_l+0x590>)
 8004d2c:	f1c4 040f 	rsb	r4, r4, #15
 8004d30:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004d34:	4642      	mov	r2, r8
 8004d36:	464b      	mov	r3, r9
 8004d38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d3c:	f7fb fc74 	bl	8000628 <__aeabi_dmul>
 8004d40:	9b07      	ldr	r3, [sp, #28]
 8004d42:	1b1c      	subs	r4, r3, r4
 8004d44:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004d48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004d4c:	e7e5      	b.n	8004d1a <_strtod_l+0x3ea>
 8004d4e:	9b07      	ldr	r3, [sp, #28]
 8004d50:	3316      	adds	r3, #22
 8004d52:	db0b      	blt.n	8004d6c <_strtod_l+0x43c>
 8004d54:	9b04      	ldr	r3, [sp, #16]
 8004d56:	1b5d      	subs	r5, r3, r5
 8004d58:	4b59      	ldr	r3, [pc, #356]	; (8004ec0 <_strtod_l+0x590>)
 8004d5a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004d5e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004d62:	4640      	mov	r0, r8
 8004d64:	4649      	mov	r1, r9
 8004d66:	f7fb fd89 	bl	800087c <__aeabi_ddiv>
 8004d6a:	e79d      	b.n	8004ca8 <_strtod_l+0x378>
 8004d6c:	9b07      	ldr	r3, [sp, #28]
 8004d6e:	1ba6      	subs	r6, r4, r6
 8004d70:	441e      	add	r6, r3
 8004d72:	2e00      	cmp	r6, #0
 8004d74:	dd74      	ble.n	8004e60 <_strtod_l+0x530>
 8004d76:	f016 030f 	ands.w	r3, r6, #15
 8004d7a:	d00a      	beq.n	8004d92 <_strtod_l+0x462>
 8004d7c:	4950      	ldr	r1, [pc, #320]	; (8004ec0 <_strtod_l+0x590>)
 8004d7e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004d82:	4642      	mov	r2, r8
 8004d84:	464b      	mov	r3, r9
 8004d86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d8a:	f7fb fc4d 	bl	8000628 <__aeabi_dmul>
 8004d8e:	4680      	mov	r8, r0
 8004d90:	4689      	mov	r9, r1
 8004d92:	f036 060f 	bics.w	r6, r6, #15
 8004d96:	d052      	beq.n	8004e3e <_strtod_l+0x50e>
 8004d98:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8004d9c:	dd27      	ble.n	8004dee <_strtod_l+0x4be>
 8004d9e:	f04f 0b00 	mov.w	fp, #0
 8004da2:	f8cd b010 	str.w	fp, [sp, #16]
 8004da6:	f8cd b020 	str.w	fp, [sp, #32]
 8004daa:	f8cd b018 	str.w	fp, [sp, #24]
 8004dae:	2322      	movs	r3, #34	; 0x22
 8004db0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8004eb8 <_strtod_l+0x588>
 8004db4:	f8ca 3000 	str.w	r3, [sl]
 8004db8:	f04f 0800 	mov.w	r8, #0
 8004dbc:	9b08      	ldr	r3, [sp, #32]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f43f adf7 	beq.w	80049b2 <_strtod_l+0x82>
 8004dc4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004dc6:	4650      	mov	r0, sl
 8004dc8:	f001 fea2 	bl	8006b10 <_Bfree>
 8004dcc:	9906      	ldr	r1, [sp, #24]
 8004dce:	4650      	mov	r0, sl
 8004dd0:	f001 fe9e 	bl	8006b10 <_Bfree>
 8004dd4:	9904      	ldr	r1, [sp, #16]
 8004dd6:	4650      	mov	r0, sl
 8004dd8:	f001 fe9a 	bl	8006b10 <_Bfree>
 8004ddc:	9908      	ldr	r1, [sp, #32]
 8004dde:	4650      	mov	r0, sl
 8004de0:	f001 fe96 	bl	8006b10 <_Bfree>
 8004de4:	4659      	mov	r1, fp
 8004de6:	4650      	mov	r0, sl
 8004de8:	f001 fe92 	bl	8006b10 <_Bfree>
 8004dec:	e5e1      	b.n	80049b2 <_strtod_l+0x82>
 8004dee:	4b35      	ldr	r3, [pc, #212]	; (8004ec4 <_strtod_l+0x594>)
 8004df0:	9305      	str	r3, [sp, #20]
 8004df2:	2300      	movs	r3, #0
 8004df4:	1136      	asrs	r6, r6, #4
 8004df6:	4640      	mov	r0, r8
 8004df8:	4649      	mov	r1, r9
 8004dfa:	461f      	mov	r7, r3
 8004dfc:	2e01      	cmp	r6, #1
 8004dfe:	dc21      	bgt.n	8004e44 <_strtod_l+0x514>
 8004e00:	b10b      	cbz	r3, 8004e06 <_strtod_l+0x4d6>
 8004e02:	4680      	mov	r8, r0
 8004e04:	4689      	mov	r9, r1
 8004e06:	4b2f      	ldr	r3, [pc, #188]	; (8004ec4 <_strtod_l+0x594>)
 8004e08:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004e0c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004e10:	4642      	mov	r2, r8
 8004e12:	464b      	mov	r3, r9
 8004e14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e18:	f7fb fc06 	bl	8000628 <__aeabi_dmul>
 8004e1c:	4b26      	ldr	r3, [pc, #152]	; (8004eb8 <_strtod_l+0x588>)
 8004e1e:	460a      	mov	r2, r1
 8004e20:	400b      	ands	r3, r1
 8004e22:	4929      	ldr	r1, [pc, #164]	; (8004ec8 <_strtod_l+0x598>)
 8004e24:	428b      	cmp	r3, r1
 8004e26:	4680      	mov	r8, r0
 8004e28:	d8b9      	bhi.n	8004d9e <_strtod_l+0x46e>
 8004e2a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004e2e:	428b      	cmp	r3, r1
 8004e30:	bf86      	itte	hi
 8004e32:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 8004ecc <_strtod_l+0x59c>
 8004e36:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8004e3a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8004e3e:	2300      	movs	r3, #0
 8004e40:	9305      	str	r3, [sp, #20]
 8004e42:	e07f      	b.n	8004f44 <_strtod_l+0x614>
 8004e44:	07f2      	lsls	r2, r6, #31
 8004e46:	d505      	bpl.n	8004e54 <_strtod_l+0x524>
 8004e48:	9b05      	ldr	r3, [sp, #20]
 8004e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4e:	f7fb fbeb 	bl	8000628 <__aeabi_dmul>
 8004e52:	2301      	movs	r3, #1
 8004e54:	9a05      	ldr	r2, [sp, #20]
 8004e56:	3208      	adds	r2, #8
 8004e58:	3701      	adds	r7, #1
 8004e5a:	1076      	asrs	r6, r6, #1
 8004e5c:	9205      	str	r2, [sp, #20]
 8004e5e:	e7cd      	b.n	8004dfc <_strtod_l+0x4cc>
 8004e60:	d0ed      	beq.n	8004e3e <_strtod_l+0x50e>
 8004e62:	4276      	negs	r6, r6
 8004e64:	f016 020f 	ands.w	r2, r6, #15
 8004e68:	d00a      	beq.n	8004e80 <_strtod_l+0x550>
 8004e6a:	4b15      	ldr	r3, [pc, #84]	; (8004ec0 <_strtod_l+0x590>)
 8004e6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e70:	4640      	mov	r0, r8
 8004e72:	4649      	mov	r1, r9
 8004e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e78:	f7fb fd00 	bl	800087c <__aeabi_ddiv>
 8004e7c:	4680      	mov	r8, r0
 8004e7e:	4689      	mov	r9, r1
 8004e80:	1136      	asrs	r6, r6, #4
 8004e82:	d0dc      	beq.n	8004e3e <_strtod_l+0x50e>
 8004e84:	2e1f      	cmp	r6, #31
 8004e86:	dd23      	ble.n	8004ed0 <_strtod_l+0x5a0>
 8004e88:	f04f 0b00 	mov.w	fp, #0
 8004e8c:	f8cd b010 	str.w	fp, [sp, #16]
 8004e90:	f8cd b020 	str.w	fp, [sp, #32]
 8004e94:	f8cd b018 	str.w	fp, [sp, #24]
 8004e98:	2322      	movs	r3, #34	; 0x22
 8004e9a:	f04f 0800 	mov.w	r8, #0
 8004e9e:	f04f 0900 	mov.w	r9, #0
 8004ea2:	f8ca 3000 	str.w	r3, [sl]
 8004ea6:	e789      	b.n	8004dbc <_strtod_l+0x48c>
 8004ea8:	0800a3b9 	.word	0x0800a3b9
 8004eac:	0800a3f8 	.word	0x0800a3f8
 8004eb0:	0800a3b1 	.word	0x0800a3b1
 8004eb4:	0800a53c 	.word	0x0800a53c
 8004eb8:	7ff00000 	.word	0x7ff00000
 8004ebc:	0800a803 	.word	0x0800a803
 8004ec0:	0800a6c8 	.word	0x0800a6c8
 8004ec4:	0800a6a0 	.word	0x0800a6a0
 8004ec8:	7ca00000 	.word	0x7ca00000
 8004ecc:	7fefffff 	.word	0x7fefffff
 8004ed0:	f016 0310 	ands.w	r3, r6, #16
 8004ed4:	bf18      	it	ne
 8004ed6:	236a      	movne	r3, #106	; 0x6a
 8004ed8:	4fb1      	ldr	r7, [pc, #708]	; (80051a0 <_strtod_l+0x870>)
 8004eda:	9305      	str	r3, [sp, #20]
 8004edc:	4640      	mov	r0, r8
 8004ede:	4649      	mov	r1, r9
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	07f2      	lsls	r2, r6, #31
 8004ee4:	d504      	bpl.n	8004ef0 <_strtod_l+0x5c0>
 8004ee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eea:	f7fb fb9d 	bl	8000628 <__aeabi_dmul>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	1076      	asrs	r6, r6, #1
 8004ef2:	f107 0708 	add.w	r7, r7, #8
 8004ef6:	d1f4      	bne.n	8004ee2 <_strtod_l+0x5b2>
 8004ef8:	b10b      	cbz	r3, 8004efe <_strtod_l+0x5ce>
 8004efa:	4680      	mov	r8, r0
 8004efc:	4689      	mov	r9, r1
 8004efe:	9b05      	ldr	r3, [sp, #20]
 8004f00:	b1c3      	cbz	r3, 8004f34 <_strtod_l+0x604>
 8004f02:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8004f06:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	4649      	mov	r1, r9
 8004f0e:	dd11      	ble.n	8004f34 <_strtod_l+0x604>
 8004f10:	2b1f      	cmp	r3, #31
 8004f12:	f340 8124 	ble.w	800515e <_strtod_l+0x82e>
 8004f16:	2b34      	cmp	r3, #52	; 0x34
 8004f18:	bfde      	ittt	le
 8004f1a:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004f1e:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8004f22:	fa03 f202 	lslle.w	r2, r3, r2
 8004f26:	f04f 0800 	mov.w	r8, #0
 8004f2a:	bfcc      	ite	gt
 8004f2c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004f30:	ea02 0901 	andle.w	r9, r2, r1
 8004f34:	2200      	movs	r2, #0
 8004f36:	2300      	movs	r3, #0
 8004f38:	4640      	mov	r0, r8
 8004f3a:	4649      	mov	r1, r9
 8004f3c:	f7fb fddc 	bl	8000af8 <__aeabi_dcmpeq>
 8004f40:	2800      	cmp	r0, #0
 8004f42:	d1a1      	bne.n	8004e88 <_strtod_l+0x558>
 8004f44:	9b06      	ldr	r3, [sp, #24]
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	9908      	ldr	r1, [sp, #32]
 8004f4a:	4623      	mov	r3, r4
 8004f4c:	465a      	mov	r2, fp
 8004f4e:	4650      	mov	r0, sl
 8004f50:	f001 fe46 	bl	8006be0 <__s2b>
 8004f54:	9008      	str	r0, [sp, #32]
 8004f56:	2800      	cmp	r0, #0
 8004f58:	f43f af21 	beq.w	8004d9e <_strtod_l+0x46e>
 8004f5c:	9b04      	ldr	r3, [sp, #16]
 8004f5e:	1b5d      	subs	r5, r3, r5
 8004f60:	9b07      	ldr	r3, [sp, #28]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	bfb4      	ite	lt
 8004f66:	462b      	movlt	r3, r5
 8004f68:	2300      	movge	r3, #0
 8004f6a:	930e      	str	r3, [sp, #56]	; 0x38
 8004f6c:	9b07      	ldr	r3, [sp, #28]
 8004f6e:	f04f 0b00 	mov.w	fp, #0
 8004f72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004f76:	9314      	str	r3, [sp, #80]	; 0x50
 8004f78:	f8cd b010 	str.w	fp, [sp, #16]
 8004f7c:	9b08      	ldr	r3, [sp, #32]
 8004f7e:	4650      	mov	r0, sl
 8004f80:	6859      	ldr	r1, [r3, #4]
 8004f82:	f001 fd85 	bl	8006a90 <_Balloc>
 8004f86:	9006      	str	r0, [sp, #24]
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	f43f af10 	beq.w	8004dae <_strtod_l+0x47e>
 8004f8e:	9b08      	ldr	r3, [sp, #32]
 8004f90:	691a      	ldr	r2, [r3, #16]
 8004f92:	3202      	adds	r2, #2
 8004f94:	f103 010c 	add.w	r1, r3, #12
 8004f98:	0092      	lsls	r2, r2, #2
 8004f9a:	300c      	adds	r0, #12
 8004f9c:	f001 fd6a 	bl	8006a74 <memcpy>
 8004fa0:	ab1c      	add	r3, sp, #112	; 0x70
 8004fa2:	9301      	str	r3, [sp, #4]
 8004fa4:	ab1b      	add	r3, sp, #108	; 0x6c
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	4642      	mov	r2, r8
 8004faa:	464b      	mov	r3, r9
 8004fac:	4650      	mov	r0, sl
 8004fae:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8004fb2:	f002 f953 	bl	800725c <__d2b>
 8004fb6:	901a      	str	r0, [sp, #104]	; 0x68
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	f43f aef8 	beq.w	8004dae <_strtod_l+0x47e>
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	4650      	mov	r0, sl
 8004fc2:	f001 fea5 	bl	8006d10 <__i2b>
 8004fc6:	9004      	str	r0, [sp, #16]
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	f43f aeef 	beq.w	8004dae <_strtod_l+0x47e>
 8004fd0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004fd2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004fd4:	2d00      	cmp	r5, #0
 8004fd6:	bfab      	itete	ge
 8004fd8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004fda:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8004fdc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8004fde:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004fe0:	bfac      	ite	ge
 8004fe2:	18ee      	addge	r6, r5, r3
 8004fe4:	1b5c      	sublt	r4, r3, r5
 8004fe6:	9b05      	ldr	r3, [sp, #20]
 8004fe8:	1aed      	subs	r5, r5, r3
 8004fea:	4415      	add	r5, r2
 8004fec:	4b6d      	ldr	r3, [pc, #436]	; (80051a4 <_strtod_l+0x874>)
 8004fee:	3d01      	subs	r5, #1
 8004ff0:	429d      	cmp	r5, r3
 8004ff2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004ff6:	f280 80c4 	bge.w	8005182 <_strtod_l+0x852>
 8004ffa:	1b5b      	subs	r3, r3, r5
 8004ffc:	2b1f      	cmp	r3, #31
 8004ffe:	eba2 0203 	sub.w	r2, r2, r3
 8005002:	f04f 0701 	mov.w	r7, #1
 8005006:	f300 80b1 	bgt.w	800516c <_strtod_l+0x83c>
 800500a:	fa07 f303 	lsl.w	r3, r7, r3
 800500e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005010:	2500      	movs	r5, #0
 8005012:	18b7      	adds	r7, r6, r2
 8005014:	9b05      	ldr	r3, [sp, #20]
 8005016:	42be      	cmp	r6, r7
 8005018:	4414      	add	r4, r2
 800501a:	441c      	add	r4, r3
 800501c:	4633      	mov	r3, r6
 800501e:	bfa8      	it	ge
 8005020:	463b      	movge	r3, r7
 8005022:	42a3      	cmp	r3, r4
 8005024:	bfa8      	it	ge
 8005026:	4623      	movge	r3, r4
 8005028:	2b00      	cmp	r3, #0
 800502a:	bfc2      	ittt	gt
 800502c:	1aff      	subgt	r7, r7, r3
 800502e:	1ae4      	subgt	r4, r4, r3
 8005030:	1af6      	subgt	r6, r6, r3
 8005032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005034:	2b00      	cmp	r3, #0
 8005036:	dd17      	ble.n	8005068 <_strtod_l+0x738>
 8005038:	9904      	ldr	r1, [sp, #16]
 800503a:	461a      	mov	r2, r3
 800503c:	4650      	mov	r0, sl
 800503e:	f001 ff25 	bl	8006e8c <__pow5mult>
 8005042:	9004      	str	r0, [sp, #16]
 8005044:	2800      	cmp	r0, #0
 8005046:	f43f aeb2 	beq.w	8004dae <_strtod_l+0x47e>
 800504a:	4601      	mov	r1, r0
 800504c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800504e:	4650      	mov	r0, sl
 8005050:	f001 fe74 	bl	8006d3c <__multiply>
 8005054:	9009      	str	r0, [sp, #36]	; 0x24
 8005056:	2800      	cmp	r0, #0
 8005058:	f43f aea9 	beq.w	8004dae <_strtod_l+0x47e>
 800505c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800505e:	4650      	mov	r0, sl
 8005060:	f001 fd56 	bl	8006b10 <_Bfree>
 8005064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005066:	931a      	str	r3, [sp, #104]	; 0x68
 8005068:	2f00      	cmp	r7, #0
 800506a:	f300 808e 	bgt.w	800518a <_strtod_l+0x85a>
 800506e:	9b07      	ldr	r3, [sp, #28]
 8005070:	2b00      	cmp	r3, #0
 8005072:	dd08      	ble.n	8005086 <_strtod_l+0x756>
 8005074:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005076:	9906      	ldr	r1, [sp, #24]
 8005078:	4650      	mov	r0, sl
 800507a:	f001 ff07 	bl	8006e8c <__pow5mult>
 800507e:	9006      	str	r0, [sp, #24]
 8005080:	2800      	cmp	r0, #0
 8005082:	f43f ae94 	beq.w	8004dae <_strtod_l+0x47e>
 8005086:	2c00      	cmp	r4, #0
 8005088:	dd08      	ble.n	800509c <_strtod_l+0x76c>
 800508a:	9906      	ldr	r1, [sp, #24]
 800508c:	4622      	mov	r2, r4
 800508e:	4650      	mov	r0, sl
 8005090:	f001 ff56 	bl	8006f40 <__lshift>
 8005094:	9006      	str	r0, [sp, #24]
 8005096:	2800      	cmp	r0, #0
 8005098:	f43f ae89 	beq.w	8004dae <_strtod_l+0x47e>
 800509c:	2e00      	cmp	r6, #0
 800509e:	dd08      	ble.n	80050b2 <_strtod_l+0x782>
 80050a0:	9904      	ldr	r1, [sp, #16]
 80050a2:	4632      	mov	r2, r6
 80050a4:	4650      	mov	r0, sl
 80050a6:	f001 ff4b 	bl	8006f40 <__lshift>
 80050aa:	9004      	str	r0, [sp, #16]
 80050ac:	2800      	cmp	r0, #0
 80050ae:	f43f ae7e 	beq.w	8004dae <_strtod_l+0x47e>
 80050b2:	9a06      	ldr	r2, [sp, #24]
 80050b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80050b6:	4650      	mov	r0, sl
 80050b8:	f001 ffce 	bl	8007058 <__mdiff>
 80050bc:	4683      	mov	fp, r0
 80050be:	2800      	cmp	r0, #0
 80050c0:	f43f ae75 	beq.w	8004dae <_strtod_l+0x47e>
 80050c4:	2400      	movs	r4, #0
 80050c6:	68c3      	ldr	r3, [r0, #12]
 80050c8:	9904      	ldr	r1, [sp, #16]
 80050ca:	60c4      	str	r4, [r0, #12]
 80050cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80050ce:	f001 ffa7 	bl	8007020 <__mcmp>
 80050d2:	42a0      	cmp	r0, r4
 80050d4:	da6c      	bge.n	80051b0 <_strtod_l+0x880>
 80050d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050d8:	ea53 0308 	orrs.w	r3, r3, r8
 80050dc:	f040 8092 	bne.w	8005204 <_strtod_l+0x8d4>
 80050e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f040 808d 	bne.w	8005204 <_strtod_l+0x8d4>
 80050ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80050ee:	0d1b      	lsrs	r3, r3, #20
 80050f0:	051b      	lsls	r3, r3, #20
 80050f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80050f6:	f240 8085 	bls.w	8005204 <_strtod_l+0x8d4>
 80050fa:	f8db 3014 	ldr.w	r3, [fp, #20]
 80050fe:	b91b      	cbnz	r3, 8005108 <_strtod_l+0x7d8>
 8005100:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005104:	2b01      	cmp	r3, #1
 8005106:	dd7d      	ble.n	8005204 <_strtod_l+0x8d4>
 8005108:	4659      	mov	r1, fp
 800510a:	2201      	movs	r2, #1
 800510c:	4650      	mov	r0, sl
 800510e:	f001 ff17 	bl	8006f40 <__lshift>
 8005112:	9904      	ldr	r1, [sp, #16]
 8005114:	4683      	mov	fp, r0
 8005116:	f001 ff83 	bl	8007020 <__mcmp>
 800511a:	2800      	cmp	r0, #0
 800511c:	dd72      	ble.n	8005204 <_strtod_l+0x8d4>
 800511e:	9905      	ldr	r1, [sp, #20]
 8005120:	4a21      	ldr	r2, [pc, #132]	; (80051a8 <_strtod_l+0x878>)
 8005122:	464b      	mov	r3, r9
 8005124:	2900      	cmp	r1, #0
 8005126:	f000 808d 	beq.w	8005244 <_strtod_l+0x914>
 800512a:	ea02 0109 	and.w	r1, r2, r9
 800512e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005132:	f300 8087 	bgt.w	8005244 <_strtod_l+0x914>
 8005136:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800513a:	f77f aead 	ble.w	8004e98 <_strtod_l+0x568>
 800513e:	4b1b      	ldr	r3, [pc, #108]	; (80051ac <_strtod_l+0x87c>)
 8005140:	4640      	mov	r0, r8
 8005142:	4649      	mov	r1, r9
 8005144:	2200      	movs	r2, #0
 8005146:	f7fb fa6f 	bl	8000628 <__aeabi_dmul>
 800514a:	460b      	mov	r3, r1
 800514c:	4303      	orrs	r3, r0
 800514e:	bf08      	it	eq
 8005150:	2322      	moveq	r3, #34	; 0x22
 8005152:	4680      	mov	r8, r0
 8005154:	4689      	mov	r9, r1
 8005156:	bf08      	it	eq
 8005158:	f8ca 3000 	streq.w	r3, [sl]
 800515c:	e632      	b.n	8004dc4 <_strtod_l+0x494>
 800515e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	ea03 0808 	and.w	r8, r3, r8
 800516a:	e6e3      	b.n	8004f34 <_strtod_l+0x604>
 800516c:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005170:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005174:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005178:	35e2      	adds	r5, #226	; 0xe2
 800517a:	fa07 f505 	lsl.w	r5, r7, r5
 800517e:	970f      	str	r7, [sp, #60]	; 0x3c
 8005180:	e747      	b.n	8005012 <_strtod_l+0x6e2>
 8005182:	2301      	movs	r3, #1
 8005184:	2500      	movs	r5, #0
 8005186:	930f      	str	r3, [sp, #60]	; 0x3c
 8005188:	e743      	b.n	8005012 <_strtod_l+0x6e2>
 800518a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800518c:	463a      	mov	r2, r7
 800518e:	4650      	mov	r0, sl
 8005190:	f001 fed6 	bl	8006f40 <__lshift>
 8005194:	901a      	str	r0, [sp, #104]	; 0x68
 8005196:	2800      	cmp	r0, #0
 8005198:	f47f af69 	bne.w	800506e <_strtod_l+0x73e>
 800519c:	e607      	b.n	8004dae <_strtod_l+0x47e>
 800519e:	bf00      	nop
 80051a0:	0800a410 	.word	0x0800a410
 80051a4:	fffffc02 	.word	0xfffffc02
 80051a8:	7ff00000 	.word	0x7ff00000
 80051ac:	39500000 	.word	0x39500000
 80051b0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80051b4:	d165      	bne.n	8005282 <_strtod_l+0x952>
 80051b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80051b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80051bc:	b35a      	cbz	r2, 8005216 <_strtod_l+0x8e6>
 80051be:	4a9a      	ldr	r2, [pc, #616]	; (8005428 <_strtod_l+0xaf8>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d12b      	bne.n	800521c <_strtod_l+0x8ec>
 80051c4:	9b05      	ldr	r3, [sp, #20]
 80051c6:	4641      	mov	r1, r8
 80051c8:	b303      	cbz	r3, 800520c <_strtod_l+0x8dc>
 80051ca:	4b98      	ldr	r3, [pc, #608]	; (800542c <_strtod_l+0xafc>)
 80051cc:	464a      	mov	r2, r9
 80051ce:	4013      	ands	r3, r2
 80051d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80051d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051d8:	d81b      	bhi.n	8005212 <_strtod_l+0x8e2>
 80051da:	0d1b      	lsrs	r3, r3, #20
 80051dc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	4299      	cmp	r1, r3
 80051e6:	d119      	bne.n	800521c <_strtod_l+0x8ec>
 80051e8:	4b91      	ldr	r3, [pc, #580]	; (8005430 <_strtod_l+0xb00>)
 80051ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d102      	bne.n	80051f6 <_strtod_l+0x8c6>
 80051f0:	3101      	adds	r1, #1
 80051f2:	f43f addc 	beq.w	8004dae <_strtod_l+0x47e>
 80051f6:	4b8d      	ldr	r3, [pc, #564]	; (800542c <_strtod_l+0xafc>)
 80051f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051fa:	401a      	ands	r2, r3
 80051fc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005200:	f04f 0800 	mov.w	r8, #0
 8005204:	9b05      	ldr	r3, [sp, #20]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d199      	bne.n	800513e <_strtod_l+0x80e>
 800520a:	e5db      	b.n	8004dc4 <_strtod_l+0x494>
 800520c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005210:	e7e8      	b.n	80051e4 <_strtod_l+0x8b4>
 8005212:	4613      	mov	r3, r2
 8005214:	e7e6      	b.n	80051e4 <_strtod_l+0x8b4>
 8005216:	ea53 0308 	orrs.w	r3, r3, r8
 800521a:	d080      	beq.n	800511e <_strtod_l+0x7ee>
 800521c:	b1e5      	cbz	r5, 8005258 <_strtod_l+0x928>
 800521e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005220:	421d      	tst	r5, r3
 8005222:	d0ef      	beq.n	8005204 <_strtod_l+0x8d4>
 8005224:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005226:	9a05      	ldr	r2, [sp, #20]
 8005228:	4640      	mov	r0, r8
 800522a:	4649      	mov	r1, r9
 800522c:	b1c3      	cbz	r3, 8005260 <_strtod_l+0x930>
 800522e:	f7ff fb5e 	bl	80048ee <sulp>
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800523a:	f7fb f83f 	bl	80002bc <__adddf3>
 800523e:	4680      	mov	r8, r0
 8005240:	4689      	mov	r9, r1
 8005242:	e7df      	b.n	8005204 <_strtod_l+0x8d4>
 8005244:	4013      	ands	r3, r2
 8005246:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800524a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800524e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005252:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005256:	e7d5      	b.n	8005204 <_strtod_l+0x8d4>
 8005258:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800525a:	ea13 0f08 	tst.w	r3, r8
 800525e:	e7e0      	b.n	8005222 <_strtod_l+0x8f2>
 8005260:	f7ff fb45 	bl	80048ee <sulp>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800526c:	f7fb f824 	bl	80002b8 <__aeabi_dsub>
 8005270:	2200      	movs	r2, #0
 8005272:	2300      	movs	r3, #0
 8005274:	4680      	mov	r8, r0
 8005276:	4689      	mov	r9, r1
 8005278:	f7fb fc3e 	bl	8000af8 <__aeabi_dcmpeq>
 800527c:	2800      	cmp	r0, #0
 800527e:	d0c1      	beq.n	8005204 <_strtod_l+0x8d4>
 8005280:	e60a      	b.n	8004e98 <_strtod_l+0x568>
 8005282:	9904      	ldr	r1, [sp, #16]
 8005284:	4658      	mov	r0, fp
 8005286:	f002 f845 	bl	8007314 <__ratio>
 800528a:	2200      	movs	r2, #0
 800528c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005290:	4606      	mov	r6, r0
 8005292:	460f      	mov	r7, r1
 8005294:	f7fb fc44 	bl	8000b20 <__aeabi_dcmple>
 8005298:	2800      	cmp	r0, #0
 800529a:	d070      	beq.n	800537e <_strtod_l+0xa4e>
 800529c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d042      	beq.n	8005328 <_strtod_l+0x9f8>
 80052a2:	4f64      	ldr	r7, [pc, #400]	; (8005434 <_strtod_l+0xb04>)
 80052a4:	2600      	movs	r6, #0
 80052a6:	4d63      	ldr	r5, [pc, #396]	; (8005434 <_strtod_l+0xb04>)
 80052a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052ae:	0d1b      	lsrs	r3, r3, #20
 80052b0:	051b      	lsls	r3, r3, #20
 80052b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80052b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80052b6:	4b60      	ldr	r3, [pc, #384]	; (8005438 <_strtod_l+0xb08>)
 80052b8:	429a      	cmp	r2, r3
 80052ba:	f040 80c5 	bne.w	8005448 <_strtod_l+0xb18>
 80052be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052c0:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80052c4:	4640      	mov	r0, r8
 80052c6:	4649      	mov	r1, r9
 80052c8:	f001 ff4e 	bl	8007168 <__ulp>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4630      	mov	r0, r6
 80052d2:	4639      	mov	r1, r7
 80052d4:	f7fb f9a8 	bl	8000628 <__aeabi_dmul>
 80052d8:	4642      	mov	r2, r8
 80052da:	464b      	mov	r3, r9
 80052dc:	f7fa ffee 	bl	80002bc <__adddf3>
 80052e0:	460b      	mov	r3, r1
 80052e2:	4952      	ldr	r1, [pc, #328]	; (800542c <_strtod_l+0xafc>)
 80052e4:	4a55      	ldr	r2, [pc, #340]	; (800543c <_strtod_l+0xb0c>)
 80052e6:	4019      	ands	r1, r3
 80052e8:	4291      	cmp	r1, r2
 80052ea:	4680      	mov	r8, r0
 80052ec:	d95d      	bls.n	80053aa <_strtod_l+0xa7a>
 80052ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80052f0:	4b4f      	ldr	r3, [pc, #316]	; (8005430 <_strtod_l+0xb00>)
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d103      	bne.n	80052fe <_strtod_l+0x9ce>
 80052f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052f8:	3301      	adds	r3, #1
 80052fa:	f43f ad58 	beq.w	8004dae <_strtod_l+0x47e>
 80052fe:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8005430 <_strtod_l+0xb00>
 8005302:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005306:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005308:	4650      	mov	r0, sl
 800530a:	f001 fc01 	bl	8006b10 <_Bfree>
 800530e:	9906      	ldr	r1, [sp, #24]
 8005310:	4650      	mov	r0, sl
 8005312:	f001 fbfd 	bl	8006b10 <_Bfree>
 8005316:	9904      	ldr	r1, [sp, #16]
 8005318:	4650      	mov	r0, sl
 800531a:	f001 fbf9 	bl	8006b10 <_Bfree>
 800531e:	4659      	mov	r1, fp
 8005320:	4650      	mov	r0, sl
 8005322:	f001 fbf5 	bl	8006b10 <_Bfree>
 8005326:	e629      	b.n	8004f7c <_strtod_l+0x64c>
 8005328:	f1b8 0f00 	cmp.w	r8, #0
 800532c:	d119      	bne.n	8005362 <_strtod_l+0xa32>
 800532e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005334:	b9e3      	cbnz	r3, 8005370 <_strtod_l+0xa40>
 8005336:	4b3f      	ldr	r3, [pc, #252]	; (8005434 <_strtod_l+0xb04>)
 8005338:	2200      	movs	r2, #0
 800533a:	4630      	mov	r0, r6
 800533c:	4639      	mov	r1, r7
 800533e:	f7fb fbe5 	bl	8000b0c <__aeabi_dcmplt>
 8005342:	b9c8      	cbnz	r0, 8005378 <_strtod_l+0xa48>
 8005344:	4b3e      	ldr	r3, [pc, #248]	; (8005440 <_strtod_l+0xb10>)
 8005346:	2200      	movs	r2, #0
 8005348:	4630      	mov	r0, r6
 800534a:	4639      	mov	r1, r7
 800534c:	f7fb f96c 	bl	8000628 <__aeabi_dmul>
 8005350:	4604      	mov	r4, r0
 8005352:	460d      	mov	r5, r1
 8005354:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005358:	9416      	str	r4, [sp, #88]	; 0x58
 800535a:	9317      	str	r3, [sp, #92]	; 0x5c
 800535c:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8005360:	e7a2      	b.n	80052a8 <_strtod_l+0x978>
 8005362:	f1b8 0f01 	cmp.w	r8, #1
 8005366:	d103      	bne.n	8005370 <_strtod_l+0xa40>
 8005368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800536a:	2b00      	cmp	r3, #0
 800536c:	f43f ad94 	beq.w	8004e98 <_strtod_l+0x568>
 8005370:	4f34      	ldr	r7, [pc, #208]	; (8005444 <_strtod_l+0xb14>)
 8005372:	2600      	movs	r6, #0
 8005374:	2400      	movs	r4, #0
 8005376:	e796      	b.n	80052a6 <_strtod_l+0x976>
 8005378:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800537a:	4d31      	ldr	r5, [pc, #196]	; (8005440 <_strtod_l+0xb10>)
 800537c:	e7ea      	b.n	8005354 <_strtod_l+0xa24>
 800537e:	4b30      	ldr	r3, [pc, #192]	; (8005440 <_strtod_l+0xb10>)
 8005380:	2200      	movs	r2, #0
 8005382:	4630      	mov	r0, r6
 8005384:	4639      	mov	r1, r7
 8005386:	f7fb f94f 	bl	8000628 <__aeabi_dmul>
 800538a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800538c:	4604      	mov	r4, r0
 800538e:	460d      	mov	r5, r1
 8005390:	b933      	cbnz	r3, 80053a0 <_strtod_l+0xa70>
 8005392:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005396:	9010      	str	r0, [sp, #64]	; 0x40
 8005398:	9311      	str	r3, [sp, #68]	; 0x44
 800539a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800539e:	e783      	b.n	80052a8 <_strtod_l+0x978>
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80053a8:	e7f7      	b.n	800539a <_strtod_l+0xa6a>
 80053aa:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80053ae:	9b05      	ldr	r3, [sp, #20]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1a8      	bne.n	8005306 <_strtod_l+0x9d6>
 80053b4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80053b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80053ba:	0d1b      	lsrs	r3, r3, #20
 80053bc:	051b      	lsls	r3, r3, #20
 80053be:	429a      	cmp	r2, r3
 80053c0:	d1a1      	bne.n	8005306 <_strtod_l+0x9d6>
 80053c2:	4620      	mov	r0, r4
 80053c4:	4629      	mov	r1, r5
 80053c6:	f7fb fc77 	bl	8000cb8 <__aeabi_d2lz>
 80053ca:	f7fb f8ff 	bl	80005cc <__aeabi_l2d>
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	4620      	mov	r0, r4
 80053d4:	4629      	mov	r1, r5
 80053d6:	f7fa ff6f 	bl	80002b8 <__aeabi_dsub>
 80053da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80053dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80053e0:	ea43 0308 	orr.w	r3, r3, r8
 80053e4:	4313      	orrs	r3, r2
 80053e6:	4604      	mov	r4, r0
 80053e8:	460d      	mov	r5, r1
 80053ea:	d068      	beq.n	80054be <_strtod_l+0xb8e>
 80053ec:	a30a      	add	r3, pc, #40	; (adr r3, 8005418 <_strtod_l+0xae8>)
 80053ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f2:	f7fb fb8b 	bl	8000b0c <__aeabi_dcmplt>
 80053f6:	2800      	cmp	r0, #0
 80053f8:	f47f ace4 	bne.w	8004dc4 <_strtod_l+0x494>
 80053fc:	a308      	add	r3, pc, #32	; (adr r3, 8005420 <_strtod_l+0xaf0>)
 80053fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005402:	4620      	mov	r0, r4
 8005404:	4629      	mov	r1, r5
 8005406:	f7fb fb9f 	bl	8000b48 <__aeabi_dcmpgt>
 800540a:	2800      	cmp	r0, #0
 800540c:	f43f af7b 	beq.w	8005306 <_strtod_l+0x9d6>
 8005410:	e4d8      	b.n	8004dc4 <_strtod_l+0x494>
 8005412:	bf00      	nop
 8005414:	f3af 8000 	nop.w
 8005418:	94a03595 	.word	0x94a03595
 800541c:	3fdfffff 	.word	0x3fdfffff
 8005420:	35afe535 	.word	0x35afe535
 8005424:	3fe00000 	.word	0x3fe00000
 8005428:	000fffff 	.word	0x000fffff
 800542c:	7ff00000 	.word	0x7ff00000
 8005430:	7fefffff 	.word	0x7fefffff
 8005434:	3ff00000 	.word	0x3ff00000
 8005438:	7fe00000 	.word	0x7fe00000
 800543c:	7c9fffff 	.word	0x7c9fffff
 8005440:	3fe00000 	.word	0x3fe00000
 8005444:	bff00000 	.word	0xbff00000
 8005448:	9b05      	ldr	r3, [sp, #20]
 800544a:	b313      	cbz	r3, 8005492 <_strtod_l+0xb62>
 800544c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800544e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005452:	d81e      	bhi.n	8005492 <_strtod_l+0xb62>
 8005454:	a326      	add	r3, pc, #152	; (adr r3, 80054f0 <_strtod_l+0xbc0>)
 8005456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545a:	4620      	mov	r0, r4
 800545c:	4629      	mov	r1, r5
 800545e:	f7fb fb5f 	bl	8000b20 <__aeabi_dcmple>
 8005462:	b190      	cbz	r0, 800548a <_strtod_l+0xb5a>
 8005464:	4629      	mov	r1, r5
 8005466:	4620      	mov	r0, r4
 8005468:	f7fb fbb6 	bl	8000bd8 <__aeabi_d2uiz>
 800546c:	2801      	cmp	r0, #1
 800546e:	bf38      	it	cc
 8005470:	2001      	movcc	r0, #1
 8005472:	f7fb f85f 	bl	8000534 <__aeabi_ui2d>
 8005476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005478:	4604      	mov	r4, r0
 800547a:	460d      	mov	r5, r1
 800547c:	b9d3      	cbnz	r3, 80054b4 <_strtod_l+0xb84>
 800547e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005482:	9012      	str	r0, [sp, #72]	; 0x48
 8005484:	9313      	str	r3, [sp, #76]	; 0x4c
 8005486:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800548a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800548c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005490:	1a9f      	subs	r7, r3, r2
 8005492:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005496:	f001 fe67 	bl	8007168 <__ulp>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4630      	mov	r0, r6
 80054a0:	4639      	mov	r1, r7
 80054a2:	f7fb f8c1 	bl	8000628 <__aeabi_dmul>
 80054a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80054aa:	f7fa ff07 	bl	80002bc <__adddf3>
 80054ae:	4680      	mov	r8, r0
 80054b0:	4689      	mov	r9, r1
 80054b2:	e77c      	b.n	80053ae <_strtod_l+0xa7e>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80054bc:	e7e3      	b.n	8005486 <_strtod_l+0xb56>
 80054be:	a30e      	add	r3, pc, #56	; (adr r3, 80054f8 <_strtod_l+0xbc8>)
 80054c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c4:	f7fb fb22 	bl	8000b0c <__aeabi_dcmplt>
 80054c8:	e79f      	b.n	800540a <_strtod_l+0xada>
 80054ca:	2300      	movs	r3, #0
 80054cc:	930a      	str	r3, [sp, #40]	; 0x28
 80054ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80054d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80054d2:	6013      	str	r3, [r2, #0]
 80054d4:	f7ff ba71 	b.w	80049ba <_strtod_l+0x8a>
 80054d8:	2a65      	cmp	r2, #101	; 0x65
 80054da:	f43f ab63 	beq.w	8004ba4 <_strtod_l+0x274>
 80054de:	2a45      	cmp	r2, #69	; 0x45
 80054e0:	f43f ab60 	beq.w	8004ba4 <_strtod_l+0x274>
 80054e4:	2301      	movs	r3, #1
 80054e6:	f7ff bb95 	b.w	8004c14 <_strtod_l+0x2e4>
 80054ea:	bf00      	nop
 80054ec:	f3af 8000 	nop.w
 80054f0:	ffc00000 	.word	0xffc00000
 80054f4:	41dfffff 	.word	0x41dfffff
 80054f8:	94a03595 	.word	0x94a03595
 80054fc:	3fcfffff 	.word	0x3fcfffff

08005500 <_strtod_r>:
 8005500:	4b01      	ldr	r3, [pc, #4]	; (8005508 <_strtod_r+0x8>)
 8005502:	f7ff ba15 	b.w	8004930 <_strtod_l>
 8005506:	bf00      	nop
 8005508:	200000ac 	.word	0x200000ac

0800550c <_strtol_l.constprop.0>:
 800550c:	2b01      	cmp	r3, #1
 800550e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005512:	4680      	mov	r8, r0
 8005514:	d001      	beq.n	800551a <_strtol_l.constprop.0+0xe>
 8005516:	2b24      	cmp	r3, #36	; 0x24
 8005518:	d906      	bls.n	8005528 <_strtol_l.constprop.0+0x1c>
 800551a:	f000 ff0f 	bl	800633c <__errno>
 800551e:	2316      	movs	r3, #22
 8005520:	6003      	str	r3, [r0, #0]
 8005522:	2000      	movs	r0, #0
 8005524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005528:	4f35      	ldr	r7, [pc, #212]	; (8005600 <_strtol_l.constprop.0+0xf4>)
 800552a:	460d      	mov	r5, r1
 800552c:	4628      	mov	r0, r5
 800552e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005532:	5de6      	ldrb	r6, [r4, r7]
 8005534:	f016 0608 	ands.w	r6, r6, #8
 8005538:	d1f8      	bne.n	800552c <_strtol_l.constprop.0+0x20>
 800553a:	2c2d      	cmp	r4, #45	; 0x2d
 800553c:	d12f      	bne.n	800559e <_strtol_l.constprop.0+0x92>
 800553e:	782c      	ldrb	r4, [r5, #0]
 8005540:	2601      	movs	r6, #1
 8005542:	1c85      	adds	r5, r0, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d057      	beq.n	80055f8 <_strtol_l.constprop.0+0xec>
 8005548:	2b10      	cmp	r3, #16
 800554a:	d109      	bne.n	8005560 <_strtol_l.constprop.0+0x54>
 800554c:	2c30      	cmp	r4, #48	; 0x30
 800554e:	d107      	bne.n	8005560 <_strtol_l.constprop.0+0x54>
 8005550:	7828      	ldrb	r0, [r5, #0]
 8005552:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005556:	2858      	cmp	r0, #88	; 0x58
 8005558:	d149      	bne.n	80055ee <_strtol_l.constprop.0+0xe2>
 800555a:	786c      	ldrb	r4, [r5, #1]
 800555c:	2310      	movs	r3, #16
 800555e:	3502      	adds	r5, #2
 8005560:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005564:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8005568:	2700      	movs	r7, #0
 800556a:	fbbe f9f3 	udiv	r9, lr, r3
 800556e:	4638      	mov	r0, r7
 8005570:	fb03 ea19 	mls	sl, r3, r9, lr
 8005574:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005578:	f1bc 0f09 	cmp.w	ip, #9
 800557c:	d814      	bhi.n	80055a8 <_strtol_l.constprop.0+0x9c>
 800557e:	4664      	mov	r4, ip
 8005580:	42a3      	cmp	r3, r4
 8005582:	dd22      	ble.n	80055ca <_strtol_l.constprop.0+0xbe>
 8005584:	2f00      	cmp	r7, #0
 8005586:	db1d      	blt.n	80055c4 <_strtol_l.constprop.0+0xb8>
 8005588:	4581      	cmp	r9, r0
 800558a:	d31b      	bcc.n	80055c4 <_strtol_l.constprop.0+0xb8>
 800558c:	d101      	bne.n	8005592 <_strtol_l.constprop.0+0x86>
 800558e:	45a2      	cmp	sl, r4
 8005590:	db18      	blt.n	80055c4 <_strtol_l.constprop.0+0xb8>
 8005592:	fb00 4003 	mla	r0, r0, r3, r4
 8005596:	2701      	movs	r7, #1
 8005598:	f815 4b01 	ldrb.w	r4, [r5], #1
 800559c:	e7ea      	b.n	8005574 <_strtol_l.constprop.0+0x68>
 800559e:	2c2b      	cmp	r4, #43	; 0x2b
 80055a0:	bf04      	itt	eq
 80055a2:	782c      	ldrbeq	r4, [r5, #0]
 80055a4:	1c85      	addeq	r5, r0, #2
 80055a6:	e7cd      	b.n	8005544 <_strtol_l.constprop.0+0x38>
 80055a8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80055ac:	f1bc 0f19 	cmp.w	ip, #25
 80055b0:	d801      	bhi.n	80055b6 <_strtol_l.constprop.0+0xaa>
 80055b2:	3c37      	subs	r4, #55	; 0x37
 80055b4:	e7e4      	b.n	8005580 <_strtol_l.constprop.0+0x74>
 80055b6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80055ba:	f1bc 0f19 	cmp.w	ip, #25
 80055be:	d804      	bhi.n	80055ca <_strtol_l.constprop.0+0xbe>
 80055c0:	3c57      	subs	r4, #87	; 0x57
 80055c2:	e7dd      	b.n	8005580 <_strtol_l.constprop.0+0x74>
 80055c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80055c8:	e7e6      	b.n	8005598 <_strtol_l.constprop.0+0x8c>
 80055ca:	2f00      	cmp	r7, #0
 80055cc:	da07      	bge.n	80055de <_strtol_l.constprop.0+0xd2>
 80055ce:	2322      	movs	r3, #34	; 0x22
 80055d0:	f8c8 3000 	str.w	r3, [r8]
 80055d4:	4670      	mov	r0, lr
 80055d6:	2a00      	cmp	r2, #0
 80055d8:	d0a4      	beq.n	8005524 <_strtol_l.constprop.0+0x18>
 80055da:	1e69      	subs	r1, r5, #1
 80055dc:	e005      	b.n	80055ea <_strtol_l.constprop.0+0xde>
 80055de:	b106      	cbz	r6, 80055e2 <_strtol_l.constprop.0+0xd6>
 80055e0:	4240      	negs	r0, r0
 80055e2:	2a00      	cmp	r2, #0
 80055e4:	d09e      	beq.n	8005524 <_strtol_l.constprop.0+0x18>
 80055e6:	2f00      	cmp	r7, #0
 80055e8:	d1f7      	bne.n	80055da <_strtol_l.constprop.0+0xce>
 80055ea:	6011      	str	r1, [r2, #0]
 80055ec:	e79a      	b.n	8005524 <_strtol_l.constprop.0+0x18>
 80055ee:	2430      	movs	r4, #48	; 0x30
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1b5      	bne.n	8005560 <_strtol_l.constprop.0+0x54>
 80055f4:	2308      	movs	r3, #8
 80055f6:	e7b3      	b.n	8005560 <_strtol_l.constprop.0+0x54>
 80055f8:	2c30      	cmp	r4, #48	; 0x30
 80055fa:	d0a9      	beq.n	8005550 <_strtol_l.constprop.0+0x44>
 80055fc:	230a      	movs	r3, #10
 80055fe:	e7af      	b.n	8005560 <_strtol_l.constprop.0+0x54>
 8005600:	0800a439 	.word	0x0800a439

08005604 <_strtol_r>:
 8005604:	f7ff bf82 	b.w	800550c <_strtol_l.constprop.0>

08005608 <_write_r>:
 8005608:	b538      	push	{r3, r4, r5, lr}
 800560a:	4d07      	ldr	r5, [pc, #28]	; (8005628 <_write_r+0x20>)
 800560c:	4604      	mov	r4, r0
 800560e:	4608      	mov	r0, r1
 8005610:	4611      	mov	r1, r2
 8005612:	2200      	movs	r2, #0
 8005614:	602a      	str	r2, [r5, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	f003 fb02 	bl	8008c20 <_write>
 800561c:	1c43      	adds	r3, r0, #1
 800561e:	d102      	bne.n	8005626 <_write_r+0x1e>
 8005620:	682b      	ldr	r3, [r5, #0]
 8005622:	b103      	cbz	r3, 8005626 <_write_r+0x1e>
 8005624:	6023      	str	r3, [r4, #0]
 8005626:	bd38      	pop	{r3, r4, r5, pc}
 8005628:	200038ec 	.word	0x200038ec

0800562c <_close_r>:
 800562c:	b538      	push	{r3, r4, r5, lr}
 800562e:	4d06      	ldr	r5, [pc, #24]	; (8005648 <_close_r+0x1c>)
 8005630:	2300      	movs	r3, #0
 8005632:	4604      	mov	r4, r0
 8005634:	4608      	mov	r0, r1
 8005636:	602b      	str	r3, [r5, #0]
 8005638:	f003 faac 	bl	8008b94 <_close>
 800563c:	1c43      	adds	r3, r0, #1
 800563e:	d102      	bne.n	8005646 <_close_r+0x1a>
 8005640:	682b      	ldr	r3, [r5, #0]
 8005642:	b103      	cbz	r3, 8005646 <_close_r+0x1a>
 8005644:	6023      	str	r3, [r4, #0]
 8005646:	bd38      	pop	{r3, r4, r5, pc}
 8005648:	200038ec 	.word	0x200038ec

0800564c <quorem>:
 800564c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005650:	6903      	ldr	r3, [r0, #16]
 8005652:	690c      	ldr	r4, [r1, #16]
 8005654:	42a3      	cmp	r3, r4
 8005656:	4607      	mov	r7, r0
 8005658:	db7d      	blt.n	8005756 <quorem+0x10a>
 800565a:	3c01      	subs	r4, #1
 800565c:	f101 0814 	add.w	r8, r1, #20
 8005660:	f100 0514 	add.w	r5, r0, #20
 8005664:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005668:	9301      	str	r3, [sp, #4]
 800566a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800566e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005672:	3301      	adds	r3, #1
 8005674:	429a      	cmp	r2, r3
 8005676:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800567a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800567e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005682:	d32e      	bcc.n	80056e2 <quorem+0x96>
 8005684:	f04f 0e00 	mov.w	lr, #0
 8005688:	4640      	mov	r0, r8
 800568a:	46ac      	mov	ip, r5
 800568c:	46f2      	mov	sl, lr
 800568e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005692:	b293      	uxth	r3, r2
 8005694:	fb06 e303 	mla	r3, r6, r3, lr
 8005698:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800569c:	0c12      	lsrs	r2, r2, #16
 800569e:	b29b      	uxth	r3, r3
 80056a0:	fb06 e202 	mla	r2, r6, r2, lr
 80056a4:	ebaa 0303 	sub.w	r3, sl, r3
 80056a8:	f8dc a000 	ldr.w	sl, [ip]
 80056ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80056b0:	b292      	uxth	r2, r2
 80056b2:	fa13 f38a 	uxtah	r3, r3, sl
 80056b6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80056ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056be:	b29b      	uxth	r3, r3
 80056c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056c4:	4581      	cmp	r9, r0
 80056c6:	f84c 3b04 	str.w	r3, [ip], #4
 80056ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80056ce:	d2de      	bcs.n	800568e <quorem+0x42>
 80056d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80056d4:	b92b      	cbnz	r3, 80056e2 <quorem+0x96>
 80056d6:	9b01      	ldr	r3, [sp, #4]
 80056d8:	3b04      	subs	r3, #4
 80056da:	429d      	cmp	r5, r3
 80056dc:	461a      	mov	r2, r3
 80056de:	d32e      	bcc.n	800573e <quorem+0xf2>
 80056e0:	613c      	str	r4, [r7, #16]
 80056e2:	4638      	mov	r0, r7
 80056e4:	f001 fc9c 	bl	8007020 <__mcmp>
 80056e8:	2800      	cmp	r0, #0
 80056ea:	db24      	blt.n	8005736 <quorem+0xea>
 80056ec:	3601      	adds	r6, #1
 80056ee:	4628      	mov	r0, r5
 80056f0:	f04f 0c00 	mov.w	ip, #0
 80056f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80056f8:	f8d0 e000 	ldr.w	lr, [r0]
 80056fc:	b293      	uxth	r3, r2
 80056fe:	ebac 0303 	sub.w	r3, ip, r3
 8005702:	0c12      	lsrs	r2, r2, #16
 8005704:	fa13 f38e 	uxtah	r3, r3, lr
 8005708:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800570c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005710:	b29b      	uxth	r3, r3
 8005712:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005716:	45c1      	cmp	r9, r8
 8005718:	f840 3b04 	str.w	r3, [r0], #4
 800571c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005720:	d2e8      	bcs.n	80056f4 <quorem+0xa8>
 8005722:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005726:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800572a:	b922      	cbnz	r2, 8005736 <quorem+0xea>
 800572c:	3b04      	subs	r3, #4
 800572e:	429d      	cmp	r5, r3
 8005730:	461a      	mov	r2, r3
 8005732:	d30a      	bcc.n	800574a <quorem+0xfe>
 8005734:	613c      	str	r4, [r7, #16]
 8005736:	4630      	mov	r0, r6
 8005738:	b003      	add	sp, #12
 800573a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800573e:	6812      	ldr	r2, [r2, #0]
 8005740:	3b04      	subs	r3, #4
 8005742:	2a00      	cmp	r2, #0
 8005744:	d1cc      	bne.n	80056e0 <quorem+0x94>
 8005746:	3c01      	subs	r4, #1
 8005748:	e7c7      	b.n	80056da <quorem+0x8e>
 800574a:	6812      	ldr	r2, [r2, #0]
 800574c:	3b04      	subs	r3, #4
 800574e:	2a00      	cmp	r2, #0
 8005750:	d1f0      	bne.n	8005734 <quorem+0xe8>
 8005752:	3c01      	subs	r4, #1
 8005754:	e7eb      	b.n	800572e <quorem+0xe2>
 8005756:	2000      	movs	r0, #0
 8005758:	e7ee      	b.n	8005738 <quorem+0xec>
 800575a:	0000      	movs	r0, r0
 800575c:	0000      	movs	r0, r0
	...

08005760 <_dtoa_r>:
 8005760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005764:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005766:	b099      	sub	sp, #100	; 0x64
 8005768:	4616      	mov	r6, r2
 800576a:	461f      	mov	r7, r3
 800576c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005770:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005774:	4605      	mov	r5, r0
 8005776:	b974      	cbnz	r4, 8005796 <_dtoa_r+0x36>
 8005778:	2010      	movs	r0, #16
 800577a:	f001 f961 	bl	8006a40 <malloc>
 800577e:	4602      	mov	r2, r0
 8005780:	6268      	str	r0, [r5, #36]	; 0x24
 8005782:	b920      	cbnz	r0, 800578e <_dtoa_r+0x2e>
 8005784:	4ba8      	ldr	r3, [pc, #672]	; (8005a28 <_dtoa_r+0x2c8>)
 8005786:	21ea      	movs	r1, #234	; 0xea
 8005788:	48a8      	ldr	r0, [pc, #672]	; (8005a2c <_dtoa_r+0x2cc>)
 800578a:	f002 fcd7 	bl	800813c <__assert_func>
 800578e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005792:	6004      	str	r4, [r0, #0]
 8005794:	60c4      	str	r4, [r0, #12]
 8005796:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005798:	6819      	ldr	r1, [r3, #0]
 800579a:	b151      	cbz	r1, 80057b2 <_dtoa_r+0x52>
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	604a      	str	r2, [r1, #4]
 80057a0:	2301      	movs	r3, #1
 80057a2:	4093      	lsls	r3, r2
 80057a4:	608b      	str	r3, [r1, #8]
 80057a6:	4628      	mov	r0, r5
 80057a8:	f001 f9b2 	bl	8006b10 <_Bfree>
 80057ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80057ae:	2200      	movs	r2, #0
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	1e3b      	subs	r3, r7, #0
 80057b4:	bfb9      	ittee	lt
 80057b6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80057ba:	9305      	strlt	r3, [sp, #20]
 80057bc:	2300      	movge	r3, #0
 80057be:	f8c8 3000 	strge.w	r3, [r8]
 80057c2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80057c6:	4b9a      	ldr	r3, [pc, #616]	; (8005a30 <_dtoa_r+0x2d0>)
 80057c8:	bfbc      	itt	lt
 80057ca:	2201      	movlt	r2, #1
 80057cc:	f8c8 2000 	strlt.w	r2, [r8]
 80057d0:	ea33 0309 	bics.w	r3, r3, r9
 80057d4:	d119      	bne.n	800580a <_dtoa_r+0xaa>
 80057d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80057d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80057e2:	4333      	orrs	r3, r6
 80057e4:	f000 8580 	beq.w	80062e8 <_dtoa_r+0xb88>
 80057e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80057ea:	b953      	cbnz	r3, 8005802 <_dtoa_r+0xa2>
 80057ec:	4b91      	ldr	r3, [pc, #580]	; (8005a34 <_dtoa_r+0x2d4>)
 80057ee:	e022      	b.n	8005836 <_dtoa_r+0xd6>
 80057f0:	4b91      	ldr	r3, [pc, #580]	; (8005a38 <_dtoa_r+0x2d8>)
 80057f2:	9303      	str	r3, [sp, #12]
 80057f4:	3308      	adds	r3, #8
 80057f6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	9803      	ldr	r0, [sp, #12]
 80057fc:	b019      	add	sp, #100	; 0x64
 80057fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005802:	4b8c      	ldr	r3, [pc, #560]	; (8005a34 <_dtoa_r+0x2d4>)
 8005804:	9303      	str	r3, [sp, #12]
 8005806:	3303      	adds	r3, #3
 8005808:	e7f5      	b.n	80057f6 <_dtoa_r+0x96>
 800580a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800580e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005812:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005816:	2200      	movs	r2, #0
 8005818:	2300      	movs	r3, #0
 800581a:	f7fb f96d 	bl	8000af8 <__aeabi_dcmpeq>
 800581e:	4680      	mov	r8, r0
 8005820:	b158      	cbz	r0, 800583a <_dtoa_r+0xda>
 8005822:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005824:	2301      	movs	r3, #1
 8005826:	6013      	str	r3, [r2, #0]
 8005828:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 8559 	beq.w	80062e2 <_dtoa_r+0xb82>
 8005830:	4882      	ldr	r0, [pc, #520]	; (8005a3c <_dtoa_r+0x2dc>)
 8005832:	6018      	str	r0, [r3, #0]
 8005834:	1e43      	subs	r3, r0, #1
 8005836:	9303      	str	r3, [sp, #12]
 8005838:	e7df      	b.n	80057fa <_dtoa_r+0x9a>
 800583a:	ab16      	add	r3, sp, #88	; 0x58
 800583c:	9301      	str	r3, [sp, #4]
 800583e:	ab17      	add	r3, sp, #92	; 0x5c
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	4628      	mov	r0, r5
 8005844:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005848:	f001 fd08 	bl	800725c <__d2b>
 800584c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005850:	4683      	mov	fp, r0
 8005852:	2c00      	cmp	r4, #0
 8005854:	d07e      	beq.n	8005954 <_dtoa_r+0x1f4>
 8005856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005858:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800585c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005860:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005864:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005868:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800586c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005870:	4b73      	ldr	r3, [pc, #460]	; (8005a40 <_dtoa_r+0x2e0>)
 8005872:	2200      	movs	r2, #0
 8005874:	f7fa fd20 	bl	80002b8 <__aeabi_dsub>
 8005878:	a365      	add	r3, pc, #404	; (adr r3, 8005a10 <_dtoa_r+0x2b0>)
 800587a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587e:	f7fa fed3 	bl	8000628 <__aeabi_dmul>
 8005882:	a365      	add	r3, pc, #404	; (adr r3, 8005a18 <_dtoa_r+0x2b8>)
 8005884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005888:	f7fa fd18 	bl	80002bc <__adddf3>
 800588c:	4606      	mov	r6, r0
 800588e:	4620      	mov	r0, r4
 8005890:	460f      	mov	r7, r1
 8005892:	f7fa fe5f 	bl	8000554 <__aeabi_i2d>
 8005896:	a362      	add	r3, pc, #392	; (adr r3, 8005a20 <_dtoa_r+0x2c0>)
 8005898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589c:	f7fa fec4 	bl	8000628 <__aeabi_dmul>
 80058a0:	4602      	mov	r2, r0
 80058a2:	460b      	mov	r3, r1
 80058a4:	4630      	mov	r0, r6
 80058a6:	4639      	mov	r1, r7
 80058a8:	f7fa fd08 	bl	80002bc <__adddf3>
 80058ac:	4606      	mov	r6, r0
 80058ae:	460f      	mov	r7, r1
 80058b0:	f7fb f96a 	bl	8000b88 <__aeabi_d2iz>
 80058b4:	2200      	movs	r2, #0
 80058b6:	4682      	mov	sl, r0
 80058b8:	2300      	movs	r3, #0
 80058ba:	4630      	mov	r0, r6
 80058bc:	4639      	mov	r1, r7
 80058be:	f7fb f925 	bl	8000b0c <__aeabi_dcmplt>
 80058c2:	b148      	cbz	r0, 80058d8 <_dtoa_r+0x178>
 80058c4:	4650      	mov	r0, sl
 80058c6:	f7fa fe45 	bl	8000554 <__aeabi_i2d>
 80058ca:	4632      	mov	r2, r6
 80058cc:	463b      	mov	r3, r7
 80058ce:	f7fb f913 	bl	8000af8 <__aeabi_dcmpeq>
 80058d2:	b908      	cbnz	r0, 80058d8 <_dtoa_r+0x178>
 80058d4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80058d8:	f1ba 0f16 	cmp.w	sl, #22
 80058dc:	d857      	bhi.n	800598e <_dtoa_r+0x22e>
 80058de:	4b59      	ldr	r3, [pc, #356]	; (8005a44 <_dtoa_r+0x2e4>)
 80058e0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80058e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058ec:	f7fb f90e 	bl	8000b0c <__aeabi_dcmplt>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	d04e      	beq.n	8005992 <_dtoa_r+0x232>
 80058f4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80058f8:	2300      	movs	r3, #0
 80058fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80058fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80058fe:	1b1c      	subs	r4, r3, r4
 8005900:	1e63      	subs	r3, r4, #1
 8005902:	9309      	str	r3, [sp, #36]	; 0x24
 8005904:	bf45      	ittet	mi
 8005906:	f1c4 0301 	rsbmi	r3, r4, #1
 800590a:	9306      	strmi	r3, [sp, #24]
 800590c:	2300      	movpl	r3, #0
 800590e:	2300      	movmi	r3, #0
 8005910:	bf4c      	ite	mi
 8005912:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005914:	9306      	strpl	r3, [sp, #24]
 8005916:	f1ba 0f00 	cmp.w	sl, #0
 800591a:	db3c      	blt.n	8005996 <_dtoa_r+0x236>
 800591c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800591e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005922:	4453      	add	r3, sl
 8005924:	9309      	str	r3, [sp, #36]	; 0x24
 8005926:	2300      	movs	r3, #0
 8005928:	930a      	str	r3, [sp, #40]	; 0x28
 800592a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800592c:	2b09      	cmp	r3, #9
 800592e:	f200 808d 	bhi.w	8005a4c <_dtoa_r+0x2ec>
 8005932:	2b05      	cmp	r3, #5
 8005934:	bfc4      	itt	gt
 8005936:	3b04      	subgt	r3, #4
 8005938:	9322      	strgt	r3, [sp, #136]	; 0x88
 800593a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800593c:	f1a3 0302 	sub.w	r3, r3, #2
 8005940:	bfcc      	ite	gt
 8005942:	2400      	movgt	r4, #0
 8005944:	2401      	movle	r4, #1
 8005946:	2b03      	cmp	r3, #3
 8005948:	f200 808c 	bhi.w	8005a64 <_dtoa_r+0x304>
 800594c:	e8df f003 	tbb	[pc, r3]
 8005950:	5b4d4f2d 	.word	0x5b4d4f2d
 8005954:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005958:	441c      	add	r4, r3
 800595a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800595e:	2b20      	cmp	r3, #32
 8005960:	bfc3      	ittte	gt
 8005962:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005966:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800596a:	fa09 f303 	lslgt.w	r3, r9, r3
 800596e:	f1c3 0320 	rsble	r3, r3, #32
 8005972:	bfc6      	itte	gt
 8005974:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005978:	4318      	orrgt	r0, r3
 800597a:	fa06 f003 	lslle.w	r0, r6, r3
 800597e:	f7fa fdd9 	bl	8000534 <__aeabi_ui2d>
 8005982:	2301      	movs	r3, #1
 8005984:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005988:	3c01      	subs	r4, #1
 800598a:	9313      	str	r3, [sp, #76]	; 0x4c
 800598c:	e770      	b.n	8005870 <_dtoa_r+0x110>
 800598e:	2301      	movs	r3, #1
 8005990:	e7b3      	b.n	80058fa <_dtoa_r+0x19a>
 8005992:	900f      	str	r0, [sp, #60]	; 0x3c
 8005994:	e7b2      	b.n	80058fc <_dtoa_r+0x19c>
 8005996:	9b06      	ldr	r3, [sp, #24]
 8005998:	eba3 030a 	sub.w	r3, r3, sl
 800599c:	9306      	str	r3, [sp, #24]
 800599e:	f1ca 0300 	rsb	r3, sl, #0
 80059a2:	930a      	str	r3, [sp, #40]	; 0x28
 80059a4:	2300      	movs	r3, #0
 80059a6:	930e      	str	r3, [sp, #56]	; 0x38
 80059a8:	e7bf      	b.n	800592a <_dtoa_r+0x1ca>
 80059aa:	2300      	movs	r3, #0
 80059ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80059ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	dc5a      	bgt.n	8005a6a <_dtoa_r+0x30a>
 80059b4:	f04f 0901 	mov.w	r9, #1
 80059b8:	f8cd 9020 	str.w	r9, [sp, #32]
 80059bc:	464b      	mov	r3, r9
 80059be:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80059c2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80059c4:	2200      	movs	r2, #0
 80059c6:	6042      	str	r2, [r0, #4]
 80059c8:	2204      	movs	r2, #4
 80059ca:	f102 0614 	add.w	r6, r2, #20
 80059ce:	429e      	cmp	r6, r3
 80059d0:	6841      	ldr	r1, [r0, #4]
 80059d2:	d950      	bls.n	8005a76 <_dtoa_r+0x316>
 80059d4:	4628      	mov	r0, r5
 80059d6:	f001 f85b 	bl	8006a90 <_Balloc>
 80059da:	9003      	str	r0, [sp, #12]
 80059dc:	2800      	cmp	r0, #0
 80059de:	d14e      	bne.n	8005a7e <_dtoa_r+0x31e>
 80059e0:	4b19      	ldr	r3, [pc, #100]	; (8005a48 <_dtoa_r+0x2e8>)
 80059e2:	4602      	mov	r2, r0
 80059e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80059e8:	e6ce      	b.n	8005788 <_dtoa_r+0x28>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e7de      	b.n	80059ac <_dtoa_r+0x24c>
 80059ee:	2300      	movs	r3, #0
 80059f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80059f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80059f4:	eb0a 0903 	add.w	r9, sl, r3
 80059f8:	f109 0301 	add.w	r3, r9, #1
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	9308      	str	r3, [sp, #32]
 8005a00:	bfb8      	it	lt
 8005a02:	2301      	movlt	r3, #1
 8005a04:	e7dd      	b.n	80059c2 <_dtoa_r+0x262>
 8005a06:	2301      	movs	r3, #1
 8005a08:	e7f2      	b.n	80059f0 <_dtoa_r+0x290>
 8005a0a:	bf00      	nop
 8005a0c:	f3af 8000 	nop.w
 8005a10:	636f4361 	.word	0x636f4361
 8005a14:	3fd287a7 	.word	0x3fd287a7
 8005a18:	8b60c8b3 	.word	0x8b60c8b3
 8005a1c:	3fc68a28 	.word	0x3fc68a28
 8005a20:	509f79fb 	.word	0x509f79fb
 8005a24:	3fd34413 	.word	0x3fd34413
 8005a28:	0800a546 	.word	0x0800a546
 8005a2c:	0800a55d 	.word	0x0800a55d
 8005a30:	7ff00000 	.word	0x7ff00000
 8005a34:	0800a542 	.word	0x0800a542
 8005a38:	0800a539 	.word	0x0800a539
 8005a3c:	0800a7b2 	.word	0x0800a7b2
 8005a40:	3ff80000 	.word	0x3ff80000
 8005a44:	0800a6c8 	.word	0x0800a6c8
 8005a48:	0800a5b8 	.word	0x0800a5b8
 8005a4c:	2401      	movs	r4, #1
 8005a4e:	2300      	movs	r3, #0
 8005a50:	9322      	str	r3, [sp, #136]	; 0x88
 8005a52:	940b      	str	r4, [sp, #44]	; 0x2c
 8005a54:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f8cd 9020 	str.w	r9, [sp, #32]
 8005a5e:	2312      	movs	r3, #18
 8005a60:	9223      	str	r2, [sp, #140]	; 0x8c
 8005a62:	e7ae      	b.n	80059c2 <_dtoa_r+0x262>
 8005a64:	2301      	movs	r3, #1
 8005a66:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a68:	e7f4      	b.n	8005a54 <_dtoa_r+0x2f4>
 8005a6a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005a6e:	f8cd 9020 	str.w	r9, [sp, #32]
 8005a72:	464b      	mov	r3, r9
 8005a74:	e7a5      	b.n	80059c2 <_dtoa_r+0x262>
 8005a76:	3101      	adds	r1, #1
 8005a78:	6041      	str	r1, [r0, #4]
 8005a7a:	0052      	lsls	r2, r2, #1
 8005a7c:	e7a5      	b.n	80059ca <_dtoa_r+0x26a>
 8005a7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a80:	9a03      	ldr	r2, [sp, #12]
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	9b08      	ldr	r3, [sp, #32]
 8005a86:	2b0e      	cmp	r3, #14
 8005a88:	f200 80a8 	bhi.w	8005bdc <_dtoa_r+0x47c>
 8005a8c:	2c00      	cmp	r4, #0
 8005a8e:	f000 80a5 	beq.w	8005bdc <_dtoa_r+0x47c>
 8005a92:	f1ba 0f00 	cmp.w	sl, #0
 8005a96:	dd34      	ble.n	8005b02 <_dtoa_r+0x3a2>
 8005a98:	4a9a      	ldr	r2, [pc, #616]	; (8005d04 <_dtoa_r+0x5a4>)
 8005a9a:	f00a 030f 	and.w	r3, sl, #15
 8005a9e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005aa2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005aa6:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005aaa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005aae:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005ab2:	d016      	beq.n	8005ae2 <_dtoa_r+0x382>
 8005ab4:	4b94      	ldr	r3, [pc, #592]	; (8005d08 <_dtoa_r+0x5a8>)
 8005ab6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005aba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005abe:	f7fa fedd 	bl	800087c <__aeabi_ddiv>
 8005ac2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ac6:	f004 040f 	and.w	r4, r4, #15
 8005aca:	2703      	movs	r7, #3
 8005acc:	4e8e      	ldr	r6, [pc, #568]	; (8005d08 <_dtoa_r+0x5a8>)
 8005ace:	b954      	cbnz	r4, 8005ae6 <_dtoa_r+0x386>
 8005ad0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ad4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ad8:	f7fa fed0 	bl	800087c <__aeabi_ddiv>
 8005adc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ae0:	e029      	b.n	8005b36 <_dtoa_r+0x3d6>
 8005ae2:	2702      	movs	r7, #2
 8005ae4:	e7f2      	b.n	8005acc <_dtoa_r+0x36c>
 8005ae6:	07e1      	lsls	r1, r4, #31
 8005ae8:	d508      	bpl.n	8005afc <_dtoa_r+0x39c>
 8005aea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005aee:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005af2:	f7fa fd99 	bl	8000628 <__aeabi_dmul>
 8005af6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005afa:	3701      	adds	r7, #1
 8005afc:	1064      	asrs	r4, r4, #1
 8005afe:	3608      	adds	r6, #8
 8005b00:	e7e5      	b.n	8005ace <_dtoa_r+0x36e>
 8005b02:	f000 80a5 	beq.w	8005c50 <_dtoa_r+0x4f0>
 8005b06:	f1ca 0400 	rsb	r4, sl, #0
 8005b0a:	4b7e      	ldr	r3, [pc, #504]	; (8005d04 <_dtoa_r+0x5a4>)
 8005b0c:	4e7e      	ldr	r6, [pc, #504]	; (8005d08 <_dtoa_r+0x5a8>)
 8005b0e:	f004 020f 	and.w	r2, r4, #15
 8005b12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b1e:	f7fa fd83 	bl	8000628 <__aeabi_dmul>
 8005b22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b26:	1124      	asrs	r4, r4, #4
 8005b28:	2300      	movs	r3, #0
 8005b2a:	2702      	movs	r7, #2
 8005b2c:	2c00      	cmp	r4, #0
 8005b2e:	f040 8084 	bne.w	8005c3a <_dtoa_r+0x4da>
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1d2      	bne.n	8005adc <_dtoa_r+0x37c>
 8005b36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 808b 	beq.w	8005c54 <_dtoa_r+0x4f4>
 8005b3e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005b42:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005b46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b4a:	4b70      	ldr	r3, [pc, #448]	; (8005d0c <_dtoa_r+0x5ac>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f7fa ffdd 	bl	8000b0c <__aeabi_dcmplt>
 8005b52:	2800      	cmp	r0, #0
 8005b54:	d07e      	beq.n	8005c54 <_dtoa_r+0x4f4>
 8005b56:	9b08      	ldr	r3, [sp, #32]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d07b      	beq.n	8005c54 <_dtoa_r+0x4f4>
 8005b5c:	f1b9 0f00 	cmp.w	r9, #0
 8005b60:	dd38      	ble.n	8005bd4 <_dtoa_r+0x474>
 8005b62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b66:	4b6a      	ldr	r3, [pc, #424]	; (8005d10 <_dtoa_r+0x5b0>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f7fa fd5d 	bl	8000628 <__aeabi_dmul>
 8005b6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b72:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8005b76:	3701      	adds	r7, #1
 8005b78:	464c      	mov	r4, r9
 8005b7a:	4638      	mov	r0, r7
 8005b7c:	f7fa fcea 	bl	8000554 <__aeabi_i2d>
 8005b80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b84:	f7fa fd50 	bl	8000628 <__aeabi_dmul>
 8005b88:	4b62      	ldr	r3, [pc, #392]	; (8005d14 <_dtoa_r+0x5b4>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f7fa fb96 	bl	80002bc <__adddf3>
 8005b90:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005b94:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b98:	9611      	str	r6, [sp, #68]	; 0x44
 8005b9a:	2c00      	cmp	r4, #0
 8005b9c:	d15d      	bne.n	8005c5a <_dtoa_r+0x4fa>
 8005b9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ba2:	4b5d      	ldr	r3, [pc, #372]	; (8005d18 <_dtoa_r+0x5b8>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f7fa fb87 	bl	80002b8 <__aeabi_dsub>
 8005baa:	4602      	mov	r2, r0
 8005bac:	460b      	mov	r3, r1
 8005bae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005bb2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005bb4:	4633      	mov	r3, r6
 8005bb6:	f7fa ffc7 	bl	8000b48 <__aeabi_dcmpgt>
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	f040 829c 	bne.w	80060f8 <_dtoa_r+0x998>
 8005bc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005bc6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005bca:	f7fa ff9f 	bl	8000b0c <__aeabi_dcmplt>
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	f040 8290 	bne.w	80060f4 <_dtoa_r+0x994>
 8005bd4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005bd8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005bdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f2c0 8152 	blt.w	8005e88 <_dtoa_r+0x728>
 8005be4:	f1ba 0f0e 	cmp.w	sl, #14
 8005be8:	f300 814e 	bgt.w	8005e88 <_dtoa_r+0x728>
 8005bec:	4b45      	ldr	r3, [pc, #276]	; (8005d04 <_dtoa_r+0x5a4>)
 8005bee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005bf2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005bf6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005bfa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f280 80db 	bge.w	8005db8 <_dtoa_r+0x658>
 8005c02:	9b08      	ldr	r3, [sp, #32]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f300 80d7 	bgt.w	8005db8 <_dtoa_r+0x658>
 8005c0a:	f040 8272 	bne.w	80060f2 <_dtoa_r+0x992>
 8005c0e:	4b42      	ldr	r3, [pc, #264]	; (8005d18 <_dtoa_r+0x5b8>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c16:	f7fa fd07 	bl	8000628 <__aeabi_dmul>
 8005c1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c1e:	f7fa ff89 	bl	8000b34 <__aeabi_dcmpge>
 8005c22:	9c08      	ldr	r4, [sp, #32]
 8005c24:	4626      	mov	r6, r4
 8005c26:	2800      	cmp	r0, #0
 8005c28:	f040 8248 	bne.w	80060bc <_dtoa_r+0x95c>
 8005c2c:	9f03      	ldr	r7, [sp, #12]
 8005c2e:	2331      	movs	r3, #49	; 0x31
 8005c30:	f807 3b01 	strb.w	r3, [r7], #1
 8005c34:	f10a 0a01 	add.w	sl, sl, #1
 8005c38:	e244      	b.n	80060c4 <_dtoa_r+0x964>
 8005c3a:	07e2      	lsls	r2, r4, #31
 8005c3c:	d505      	bpl.n	8005c4a <_dtoa_r+0x4ea>
 8005c3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c42:	f7fa fcf1 	bl	8000628 <__aeabi_dmul>
 8005c46:	3701      	adds	r7, #1
 8005c48:	2301      	movs	r3, #1
 8005c4a:	1064      	asrs	r4, r4, #1
 8005c4c:	3608      	adds	r6, #8
 8005c4e:	e76d      	b.n	8005b2c <_dtoa_r+0x3cc>
 8005c50:	2702      	movs	r7, #2
 8005c52:	e770      	b.n	8005b36 <_dtoa_r+0x3d6>
 8005c54:	9c08      	ldr	r4, [sp, #32]
 8005c56:	46d0      	mov	r8, sl
 8005c58:	e78f      	b.n	8005b7a <_dtoa_r+0x41a>
 8005c5a:	9903      	ldr	r1, [sp, #12]
 8005c5c:	4b29      	ldr	r3, [pc, #164]	; (8005d04 <_dtoa_r+0x5a4>)
 8005c5e:	4421      	add	r1, r4
 8005c60:	9112      	str	r1, [sp, #72]	; 0x48
 8005c62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c68:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005c6c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c70:	2900      	cmp	r1, #0
 8005c72:	d055      	beq.n	8005d20 <_dtoa_r+0x5c0>
 8005c74:	4929      	ldr	r1, [pc, #164]	; (8005d1c <_dtoa_r+0x5bc>)
 8005c76:	2000      	movs	r0, #0
 8005c78:	f7fa fe00 	bl	800087c <__aeabi_ddiv>
 8005c7c:	463b      	mov	r3, r7
 8005c7e:	4632      	mov	r2, r6
 8005c80:	f7fa fb1a 	bl	80002b8 <__aeabi_dsub>
 8005c84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005c88:	9f03      	ldr	r7, [sp, #12]
 8005c8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c8e:	f7fa ff7b 	bl	8000b88 <__aeabi_d2iz>
 8005c92:	4604      	mov	r4, r0
 8005c94:	f7fa fc5e 	bl	8000554 <__aeabi_i2d>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ca0:	f7fa fb0a 	bl	80002b8 <__aeabi_dsub>
 8005ca4:	3430      	adds	r4, #48	; 0x30
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	460b      	mov	r3, r1
 8005caa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005cae:	f807 4b01 	strb.w	r4, [r7], #1
 8005cb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005cb6:	f7fa ff29 	bl	8000b0c <__aeabi_dcmplt>
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	d174      	bne.n	8005da8 <_dtoa_r+0x648>
 8005cbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cc2:	4912      	ldr	r1, [pc, #72]	; (8005d0c <_dtoa_r+0x5ac>)
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	f7fa faf7 	bl	80002b8 <__aeabi_dsub>
 8005cca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005cce:	f7fa ff1d 	bl	8000b0c <__aeabi_dcmplt>
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	f040 80b7 	bne.w	8005e46 <_dtoa_r+0x6e6>
 8005cd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005cda:	429f      	cmp	r7, r3
 8005cdc:	f43f af7a 	beq.w	8005bd4 <_dtoa_r+0x474>
 8005ce0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ce4:	4b0a      	ldr	r3, [pc, #40]	; (8005d10 <_dtoa_r+0x5b0>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f7fa fc9e 	bl	8000628 <__aeabi_dmul>
 8005cec:	4b08      	ldr	r3, [pc, #32]	; (8005d10 <_dtoa_r+0x5b0>)
 8005cee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cf8:	f7fa fc96 	bl	8000628 <__aeabi_dmul>
 8005cfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d00:	e7c3      	b.n	8005c8a <_dtoa_r+0x52a>
 8005d02:	bf00      	nop
 8005d04:	0800a6c8 	.word	0x0800a6c8
 8005d08:	0800a6a0 	.word	0x0800a6a0
 8005d0c:	3ff00000 	.word	0x3ff00000
 8005d10:	40240000 	.word	0x40240000
 8005d14:	401c0000 	.word	0x401c0000
 8005d18:	40140000 	.word	0x40140000
 8005d1c:	3fe00000 	.word	0x3fe00000
 8005d20:	4630      	mov	r0, r6
 8005d22:	4639      	mov	r1, r7
 8005d24:	f7fa fc80 	bl	8000628 <__aeabi_dmul>
 8005d28:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d2e:	9c03      	ldr	r4, [sp, #12]
 8005d30:	9314      	str	r3, [sp, #80]	; 0x50
 8005d32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d36:	f7fa ff27 	bl	8000b88 <__aeabi_d2iz>
 8005d3a:	9015      	str	r0, [sp, #84]	; 0x54
 8005d3c:	f7fa fc0a 	bl	8000554 <__aeabi_i2d>
 8005d40:	4602      	mov	r2, r0
 8005d42:	460b      	mov	r3, r1
 8005d44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d48:	f7fa fab6 	bl	80002b8 <__aeabi_dsub>
 8005d4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d4e:	3330      	adds	r3, #48	; 0x30
 8005d50:	f804 3b01 	strb.w	r3, [r4], #1
 8005d54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d56:	429c      	cmp	r4, r3
 8005d58:	4606      	mov	r6, r0
 8005d5a:	460f      	mov	r7, r1
 8005d5c:	f04f 0200 	mov.w	r2, #0
 8005d60:	d124      	bne.n	8005dac <_dtoa_r+0x64c>
 8005d62:	4ba4      	ldr	r3, [pc, #656]	; (8005ff4 <_dtoa_r+0x894>)
 8005d64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d68:	f7fa faa8 	bl	80002bc <__adddf3>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4630      	mov	r0, r6
 8005d72:	4639      	mov	r1, r7
 8005d74:	f7fa fee8 	bl	8000b48 <__aeabi_dcmpgt>
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	d163      	bne.n	8005e44 <_dtoa_r+0x6e4>
 8005d7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d80:	499c      	ldr	r1, [pc, #624]	; (8005ff4 <_dtoa_r+0x894>)
 8005d82:	2000      	movs	r0, #0
 8005d84:	f7fa fa98 	bl	80002b8 <__aeabi_dsub>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	4639      	mov	r1, r7
 8005d90:	f7fa febc 	bl	8000b0c <__aeabi_dcmplt>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	f43f af1d 	beq.w	8005bd4 <_dtoa_r+0x474>
 8005d9a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005d9c:	1e7b      	subs	r3, r7, #1
 8005d9e:	9314      	str	r3, [sp, #80]	; 0x50
 8005da0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005da4:	2b30      	cmp	r3, #48	; 0x30
 8005da6:	d0f8      	beq.n	8005d9a <_dtoa_r+0x63a>
 8005da8:	46c2      	mov	sl, r8
 8005daa:	e03b      	b.n	8005e24 <_dtoa_r+0x6c4>
 8005dac:	4b92      	ldr	r3, [pc, #584]	; (8005ff8 <_dtoa_r+0x898>)
 8005dae:	f7fa fc3b 	bl	8000628 <__aeabi_dmul>
 8005db2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005db6:	e7bc      	b.n	8005d32 <_dtoa_r+0x5d2>
 8005db8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005dbc:	9f03      	ldr	r7, [sp, #12]
 8005dbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005dc2:	4640      	mov	r0, r8
 8005dc4:	4649      	mov	r1, r9
 8005dc6:	f7fa fd59 	bl	800087c <__aeabi_ddiv>
 8005dca:	f7fa fedd 	bl	8000b88 <__aeabi_d2iz>
 8005dce:	4604      	mov	r4, r0
 8005dd0:	f7fa fbc0 	bl	8000554 <__aeabi_i2d>
 8005dd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005dd8:	f7fa fc26 	bl	8000628 <__aeabi_dmul>
 8005ddc:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005de0:	4602      	mov	r2, r0
 8005de2:	460b      	mov	r3, r1
 8005de4:	4640      	mov	r0, r8
 8005de6:	4649      	mov	r1, r9
 8005de8:	f7fa fa66 	bl	80002b8 <__aeabi_dsub>
 8005dec:	f807 6b01 	strb.w	r6, [r7], #1
 8005df0:	9e03      	ldr	r6, [sp, #12]
 8005df2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005df6:	1bbe      	subs	r6, r7, r6
 8005df8:	45b4      	cmp	ip, r6
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	d136      	bne.n	8005e6e <_dtoa_r+0x70e>
 8005e00:	f7fa fa5c 	bl	80002bc <__adddf3>
 8005e04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e08:	4680      	mov	r8, r0
 8005e0a:	4689      	mov	r9, r1
 8005e0c:	f7fa fe9c 	bl	8000b48 <__aeabi_dcmpgt>
 8005e10:	bb58      	cbnz	r0, 8005e6a <_dtoa_r+0x70a>
 8005e12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e16:	4640      	mov	r0, r8
 8005e18:	4649      	mov	r1, r9
 8005e1a:	f7fa fe6d 	bl	8000af8 <__aeabi_dcmpeq>
 8005e1e:	b108      	cbz	r0, 8005e24 <_dtoa_r+0x6c4>
 8005e20:	07e1      	lsls	r1, r4, #31
 8005e22:	d422      	bmi.n	8005e6a <_dtoa_r+0x70a>
 8005e24:	4628      	mov	r0, r5
 8005e26:	4659      	mov	r1, fp
 8005e28:	f000 fe72 	bl	8006b10 <_Bfree>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	703b      	strb	r3, [r7, #0]
 8005e30:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005e32:	f10a 0001 	add.w	r0, sl, #1
 8005e36:	6018      	str	r0, [r3, #0]
 8005e38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f43f acdd 	beq.w	80057fa <_dtoa_r+0x9a>
 8005e40:	601f      	str	r7, [r3, #0]
 8005e42:	e4da      	b.n	80057fa <_dtoa_r+0x9a>
 8005e44:	4627      	mov	r7, r4
 8005e46:	463b      	mov	r3, r7
 8005e48:	461f      	mov	r7, r3
 8005e4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e4e:	2a39      	cmp	r2, #57	; 0x39
 8005e50:	d107      	bne.n	8005e62 <_dtoa_r+0x702>
 8005e52:	9a03      	ldr	r2, [sp, #12]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d1f7      	bne.n	8005e48 <_dtoa_r+0x6e8>
 8005e58:	9903      	ldr	r1, [sp, #12]
 8005e5a:	2230      	movs	r2, #48	; 0x30
 8005e5c:	f108 0801 	add.w	r8, r8, #1
 8005e60:	700a      	strb	r2, [r1, #0]
 8005e62:	781a      	ldrb	r2, [r3, #0]
 8005e64:	3201      	adds	r2, #1
 8005e66:	701a      	strb	r2, [r3, #0]
 8005e68:	e79e      	b.n	8005da8 <_dtoa_r+0x648>
 8005e6a:	46d0      	mov	r8, sl
 8005e6c:	e7eb      	b.n	8005e46 <_dtoa_r+0x6e6>
 8005e6e:	4b62      	ldr	r3, [pc, #392]	; (8005ff8 <_dtoa_r+0x898>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	f7fa fbd9 	bl	8000628 <__aeabi_dmul>
 8005e76:	2200      	movs	r2, #0
 8005e78:	2300      	movs	r3, #0
 8005e7a:	4680      	mov	r8, r0
 8005e7c:	4689      	mov	r9, r1
 8005e7e:	f7fa fe3b 	bl	8000af8 <__aeabi_dcmpeq>
 8005e82:	2800      	cmp	r0, #0
 8005e84:	d09b      	beq.n	8005dbe <_dtoa_r+0x65e>
 8005e86:	e7cd      	b.n	8005e24 <_dtoa_r+0x6c4>
 8005e88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e8a:	2a00      	cmp	r2, #0
 8005e8c:	f000 80d0 	beq.w	8006030 <_dtoa_r+0x8d0>
 8005e90:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005e92:	2a01      	cmp	r2, #1
 8005e94:	f300 80b2 	bgt.w	8005ffc <_dtoa_r+0x89c>
 8005e98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005e9a:	2a00      	cmp	r2, #0
 8005e9c:	f000 80a6 	beq.w	8005fec <_dtoa_r+0x88c>
 8005ea0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ea4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005ea6:	9f06      	ldr	r7, [sp, #24]
 8005ea8:	9a06      	ldr	r2, [sp, #24]
 8005eaa:	441a      	add	r2, r3
 8005eac:	9206      	str	r2, [sp, #24]
 8005eae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	441a      	add	r2, r3
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	9209      	str	r2, [sp, #36]	; 0x24
 8005eb8:	f000 ff2a 	bl	8006d10 <__i2b>
 8005ebc:	4606      	mov	r6, r0
 8005ebe:	2f00      	cmp	r7, #0
 8005ec0:	dd0c      	ble.n	8005edc <_dtoa_r+0x77c>
 8005ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	dd09      	ble.n	8005edc <_dtoa_r+0x77c>
 8005ec8:	42bb      	cmp	r3, r7
 8005eca:	9a06      	ldr	r2, [sp, #24]
 8005ecc:	bfa8      	it	ge
 8005ece:	463b      	movge	r3, r7
 8005ed0:	1ad2      	subs	r2, r2, r3
 8005ed2:	9206      	str	r2, [sp, #24]
 8005ed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ed6:	1aff      	subs	r7, r7, r3
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	9309      	str	r3, [sp, #36]	; 0x24
 8005edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ede:	b1f3      	cbz	r3, 8005f1e <_dtoa_r+0x7be>
 8005ee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 80a8 	beq.w	8006038 <_dtoa_r+0x8d8>
 8005ee8:	2c00      	cmp	r4, #0
 8005eea:	dd10      	ble.n	8005f0e <_dtoa_r+0x7ae>
 8005eec:	4631      	mov	r1, r6
 8005eee:	4622      	mov	r2, r4
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	f000 ffcb 	bl	8006e8c <__pow5mult>
 8005ef6:	465a      	mov	r2, fp
 8005ef8:	4601      	mov	r1, r0
 8005efa:	4606      	mov	r6, r0
 8005efc:	4628      	mov	r0, r5
 8005efe:	f000 ff1d 	bl	8006d3c <__multiply>
 8005f02:	4659      	mov	r1, fp
 8005f04:	4680      	mov	r8, r0
 8005f06:	4628      	mov	r0, r5
 8005f08:	f000 fe02 	bl	8006b10 <_Bfree>
 8005f0c:	46c3      	mov	fp, r8
 8005f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f10:	1b1a      	subs	r2, r3, r4
 8005f12:	d004      	beq.n	8005f1e <_dtoa_r+0x7be>
 8005f14:	4659      	mov	r1, fp
 8005f16:	4628      	mov	r0, r5
 8005f18:	f000 ffb8 	bl	8006e8c <__pow5mult>
 8005f1c:	4683      	mov	fp, r0
 8005f1e:	2101      	movs	r1, #1
 8005f20:	4628      	mov	r0, r5
 8005f22:	f000 fef5 	bl	8006d10 <__i2b>
 8005f26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	f340 8086 	ble.w	800603c <_dtoa_r+0x8dc>
 8005f30:	461a      	mov	r2, r3
 8005f32:	4601      	mov	r1, r0
 8005f34:	4628      	mov	r0, r5
 8005f36:	f000 ffa9 	bl	8006e8c <__pow5mult>
 8005f3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	4604      	mov	r4, r0
 8005f40:	dd7f      	ble.n	8006042 <_dtoa_r+0x8e2>
 8005f42:	f04f 0800 	mov.w	r8, #0
 8005f46:	6923      	ldr	r3, [r4, #16]
 8005f48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f4c:	6918      	ldr	r0, [r3, #16]
 8005f4e:	f000 fe91 	bl	8006c74 <__hi0bits>
 8005f52:	f1c0 0020 	rsb	r0, r0, #32
 8005f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f58:	4418      	add	r0, r3
 8005f5a:	f010 001f 	ands.w	r0, r0, #31
 8005f5e:	f000 8092 	beq.w	8006086 <_dtoa_r+0x926>
 8005f62:	f1c0 0320 	rsb	r3, r0, #32
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	f340 808a 	ble.w	8006080 <_dtoa_r+0x920>
 8005f6c:	f1c0 001c 	rsb	r0, r0, #28
 8005f70:	9b06      	ldr	r3, [sp, #24]
 8005f72:	4403      	add	r3, r0
 8005f74:	9306      	str	r3, [sp, #24]
 8005f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f78:	4403      	add	r3, r0
 8005f7a:	4407      	add	r7, r0
 8005f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f7e:	9b06      	ldr	r3, [sp, #24]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	dd05      	ble.n	8005f90 <_dtoa_r+0x830>
 8005f84:	4659      	mov	r1, fp
 8005f86:	461a      	mov	r2, r3
 8005f88:	4628      	mov	r0, r5
 8005f8a:	f000 ffd9 	bl	8006f40 <__lshift>
 8005f8e:	4683      	mov	fp, r0
 8005f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	dd05      	ble.n	8005fa2 <_dtoa_r+0x842>
 8005f96:	4621      	mov	r1, r4
 8005f98:	461a      	mov	r2, r3
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	f000 ffd0 	bl	8006f40 <__lshift>
 8005fa0:	4604      	mov	r4, r0
 8005fa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d070      	beq.n	800608a <_dtoa_r+0x92a>
 8005fa8:	4621      	mov	r1, r4
 8005faa:	4658      	mov	r0, fp
 8005fac:	f001 f838 	bl	8007020 <__mcmp>
 8005fb0:	2800      	cmp	r0, #0
 8005fb2:	da6a      	bge.n	800608a <_dtoa_r+0x92a>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	4659      	mov	r1, fp
 8005fb8:	220a      	movs	r2, #10
 8005fba:	4628      	mov	r0, r5
 8005fbc:	f000 fdca 	bl	8006b54 <__multadd>
 8005fc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fc2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005fc6:	4683      	mov	fp, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 8194 	beq.w	80062f6 <_dtoa_r+0xb96>
 8005fce:	4631      	mov	r1, r6
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	220a      	movs	r2, #10
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	f000 fdbd 	bl	8006b54 <__multadd>
 8005fda:	f1b9 0f00 	cmp.w	r9, #0
 8005fde:	4606      	mov	r6, r0
 8005fe0:	f300 8093 	bgt.w	800610a <_dtoa_r+0x9aa>
 8005fe4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	dc57      	bgt.n	800609a <_dtoa_r+0x93a>
 8005fea:	e08e      	b.n	800610a <_dtoa_r+0x9aa>
 8005fec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005fee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005ff2:	e757      	b.n	8005ea4 <_dtoa_r+0x744>
 8005ff4:	3fe00000 	.word	0x3fe00000
 8005ff8:	40240000 	.word	0x40240000
 8005ffc:	9b08      	ldr	r3, [sp, #32]
 8005ffe:	1e5c      	subs	r4, r3, #1
 8006000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006002:	42a3      	cmp	r3, r4
 8006004:	bfbf      	itttt	lt
 8006006:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006008:	940a      	strlt	r4, [sp, #40]	; 0x28
 800600a:	1ae2      	sublt	r2, r4, r3
 800600c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800600e:	bfb6      	itet	lt
 8006010:	189b      	addlt	r3, r3, r2
 8006012:	1b1c      	subge	r4, r3, r4
 8006014:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006016:	9b08      	ldr	r3, [sp, #32]
 8006018:	bfb8      	it	lt
 800601a:	2400      	movlt	r4, #0
 800601c:	2b00      	cmp	r3, #0
 800601e:	bfb9      	ittee	lt
 8006020:	9b06      	ldrlt	r3, [sp, #24]
 8006022:	9a08      	ldrlt	r2, [sp, #32]
 8006024:	9f06      	ldrge	r7, [sp, #24]
 8006026:	9b08      	ldrge	r3, [sp, #32]
 8006028:	bfbc      	itt	lt
 800602a:	1a9f      	sublt	r7, r3, r2
 800602c:	2300      	movlt	r3, #0
 800602e:	e73b      	b.n	8005ea8 <_dtoa_r+0x748>
 8006030:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006032:	9f06      	ldr	r7, [sp, #24]
 8006034:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006036:	e742      	b.n	8005ebe <_dtoa_r+0x75e>
 8006038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800603a:	e76b      	b.n	8005f14 <_dtoa_r+0x7b4>
 800603c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800603e:	2b01      	cmp	r3, #1
 8006040:	dc19      	bgt.n	8006076 <_dtoa_r+0x916>
 8006042:	9b04      	ldr	r3, [sp, #16]
 8006044:	b9bb      	cbnz	r3, 8006076 <_dtoa_r+0x916>
 8006046:	9b05      	ldr	r3, [sp, #20]
 8006048:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800604c:	b99b      	cbnz	r3, 8006076 <_dtoa_r+0x916>
 800604e:	9b05      	ldr	r3, [sp, #20]
 8006050:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006054:	0d1b      	lsrs	r3, r3, #20
 8006056:	051b      	lsls	r3, r3, #20
 8006058:	b183      	cbz	r3, 800607c <_dtoa_r+0x91c>
 800605a:	9b06      	ldr	r3, [sp, #24]
 800605c:	3301      	adds	r3, #1
 800605e:	9306      	str	r3, [sp, #24]
 8006060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006062:	3301      	adds	r3, #1
 8006064:	9309      	str	r3, [sp, #36]	; 0x24
 8006066:	f04f 0801 	mov.w	r8, #1
 800606a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800606c:	2b00      	cmp	r3, #0
 800606e:	f47f af6a 	bne.w	8005f46 <_dtoa_r+0x7e6>
 8006072:	2001      	movs	r0, #1
 8006074:	e76f      	b.n	8005f56 <_dtoa_r+0x7f6>
 8006076:	f04f 0800 	mov.w	r8, #0
 800607a:	e7f6      	b.n	800606a <_dtoa_r+0x90a>
 800607c:	4698      	mov	r8, r3
 800607e:	e7f4      	b.n	800606a <_dtoa_r+0x90a>
 8006080:	f43f af7d 	beq.w	8005f7e <_dtoa_r+0x81e>
 8006084:	4618      	mov	r0, r3
 8006086:	301c      	adds	r0, #28
 8006088:	e772      	b.n	8005f70 <_dtoa_r+0x810>
 800608a:	9b08      	ldr	r3, [sp, #32]
 800608c:	2b00      	cmp	r3, #0
 800608e:	dc36      	bgt.n	80060fe <_dtoa_r+0x99e>
 8006090:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006092:	2b02      	cmp	r3, #2
 8006094:	dd33      	ble.n	80060fe <_dtoa_r+0x99e>
 8006096:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800609a:	f1b9 0f00 	cmp.w	r9, #0
 800609e:	d10d      	bne.n	80060bc <_dtoa_r+0x95c>
 80060a0:	4621      	mov	r1, r4
 80060a2:	464b      	mov	r3, r9
 80060a4:	2205      	movs	r2, #5
 80060a6:	4628      	mov	r0, r5
 80060a8:	f000 fd54 	bl	8006b54 <__multadd>
 80060ac:	4601      	mov	r1, r0
 80060ae:	4604      	mov	r4, r0
 80060b0:	4658      	mov	r0, fp
 80060b2:	f000 ffb5 	bl	8007020 <__mcmp>
 80060b6:	2800      	cmp	r0, #0
 80060b8:	f73f adb8 	bgt.w	8005c2c <_dtoa_r+0x4cc>
 80060bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80060be:	9f03      	ldr	r7, [sp, #12]
 80060c0:	ea6f 0a03 	mvn.w	sl, r3
 80060c4:	f04f 0800 	mov.w	r8, #0
 80060c8:	4621      	mov	r1, r4
 80060ca:	4628      	mov	r0, r5
 80060cc:	f000 fd20 	bl	8006b10 <_Bfree>
 80060d0:	2e00      	cmp	r6, #0
 80060d2:	f43f aea7 	beq.w	8005e24 <_dtoa_r+0x6c4>
 80060d6:	f1b8 0f00 	cmp.w	r8, #0
 80060da:	d005      	beq.n	80060e8 <_dtoa_r+0x988>
 80060dc:	45b0      	cmp	r8, r6
 80060de:	d003      	beq.n	80060e8 <_dtoa_r+0x988>
 80060e0:	4641      	mov	r1, r8
 80060e2:	4628      	mov	r0, r5
 80060e4:	f000 fd14 	bl	8006b10 <_Bfree>
 80060e8:	4631      	mov	r1, r6
 80060ea:	4628      	mov	r0, r5
 80060ec:	f000 fd10 	bl	8006b10 <_Bfree>
 80060f0:	e698      	b.n	8005e24 <_dtoa_r+0x6c4>
 80060f2:	2400      	movs	r4, #0
 80060f4:	4626      	mov	r6, r4
 80060f6:	e7e1      	b.n	80060bc <_dtoa_r+0x95c>
 80060f8:	46c2      	mov	sl, r8
 80060fa:	4626      	mov	r6, r4
 80060fc:	e596      	b.n	8005c2c <_dtoa_r+0x4cc>
 80060fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006100:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 80fd 	beq.w	8006304 <_dtoa_r+0xba4>
 800610a:	2f00      	cmp	r7, #0
 800610c:	dd05      	ble.n	800611a <_dtoa_r+0x9ba>
 800610e:	4631      	mov	r1, r6
 8006110:	463a      	mov	r2, r7
 8006112:	4628      	mov	r0, r5
 8006114:	f000 ff14 	bl	8006f40 <__lshift>
 8006118:	4606      	mov	r6, r0
 800611a:	f1b8 0f00 	cmp.w	r8, #0
 800611e:	d05c      	beq.n	80061da <_dtoa_r+0xa7a>
 8006120:	6871      	ldr	r1, [r6, #4]
 8006122:	4628      	mov	r0, r5
 8006124:	f000 fcb4 	bl	8006a90 <_Balloc>
 8006128:	4607      	mov	r7, r0
 800612a:	b928      	cbnz	r0, 8006138 <_dtoa_r+0x9d8>
 800612c:	4b80      	ldr	r3, [pc, #512]	; (8006330 <_dtoa_r+0xbd0>)
 800612e:	4602      	mov	r2, r0
 8006130:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006134:	f7ff bb28 	b.w	8005788 <_dtoa_r+0x28>
 8006138:	6932      	ldr	r2, [r6, #16]
 800613a:	3202      	adds	r2, #2
 800613c:	0092      	lsls	r2, r2, #2
 800613e:	f106 010c 	add.w	r1, r6, #12
 8006142:	300c      	adds	r0, #12
 8006144:	f000 fc96 	bl	8006a74 <memcpy>
 8006148:	2201      	movs	r2, #1
 800614a:	4639      	mov	r1, r7
 800614c:	4628      	mov	r0, r5
 800614e:	f000 fef7 	bl	8006f40 <__lshift>
 8006152:	9b03      	ldr	r3, [sp, #12]
 8006154:	3301      	adds	r3, #1
 8006156:	9308      	str	r3, [sp, #32]
 8006158:	9b03      	ldr	r3, [sp, #12]
 800615a:	444b      	add	r3, r9
 800615c:	930a      	str	r3, [sp, #40]	; 0x28
 800615e:	9b04      	ldr	r3, [sp, #16]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	46b0      	mov	r8, r6
 8006166:	9309      	str	r3, [sp, #36]	; 0x24
 8006168:	4606      	mov	r6, r0
 800616a:	9b08      	ldr	r3, [sp, #32]
 800616c:	4621      	mov	r1, r4
 800616e:	3b01      	subs	r3, #1
 8006170:	4658      	mov	r0, fp
 8006172:	9304      	str	r3, [sp, #16]
 8006174:	f7ff fa6a 	bl	800564c <quorem>
 8006178:	4603      	mov	r3, r0
 800617a:	3330      	adds	r3, #48	; 0x30
 800617c:	9006      	str	r0, [sp, #24]
 800617e:	4641      	mov	r1, r8
 8006180:	4658      	mov	r0, fp
 8006182:	930b      	str	r3, [sp, #44]	; 0x2c
 8006184:	f000 ff4c 	bl	8007020 <__mcmp>
 8006188:	4632      	mov	r2, r6
 800618a:	4681      	mov	r9, r0
 800618c:	4621      	mov	r1, r4
 800618e:	4628      	mov	r0, r5
 8006190:	f000 ff62 	bl	8007058 <__mdiff>
 8006194:	68c2      	ldr	r2, [r0, #12]
 8006196:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006198:	4607      	mov	r7, r0
 800619a:	bb02      	cbnz	r2, 80061de <_dtoa_r+0xa7e>
 800619c:	4601      	mov	r1, r0
 800619e:	4658      	mov	r0, fp
 80061a0:	f000 ff3e 	bl	8007020 <__mcmp>
 80061a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061a6:	4602      	mov	r2, r0
 80061a8:	4639      	mov	r1, r7
 80061aa:	4628      	mov	r0, r5
 80061ac:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80061b0:	f000 fcae 	bl	8006b10 <_Bfree>
 80061b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061b8:	9f08      	ldr	r7, [sp, #32]
 80061ba:	ea43 0102 	orr.w	r1, r3, r2
 80061be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061c0:	430b      	orrs	r3, r1
 80061c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061c4:	d10d      	bne.n	80061e2 <_dtoa_r+0xa82>
 80061c6:	2b39      	cmp	r3, #57	; 0x39
 80061c8:	d029      	beq.n	800621e <_dtoa_r+0xabe>
 80061ca:	f1b9 0f00 	cmp.w	r9, #0
 80061ce:	dd01      	ble.n	80061d4 <_dtoa_r+0xa74>
 80061d0:	9b06      	ldr	r3, [sp, #24]
 80061d2:	3331      	adds	r3, #49	; 0x31
 80061d4:	9a04      	ldr	r2, [sp, #16]
 80061d6:	7013      	strb	r3, [r2, #0]
 80061d8:	e776      	b.n	80060c8 <_dtoa_r+0x968>
 80061da:	4630      	mov	r0, r6
 80061dc:	e7b9      	b.n	8006152 <_dtoa_r+0x9f2>
 80061de:	2201      	movs	r2, #1
 80061e0:	e7e2      	b.n	80061a8 <_dtoa_r+0xa48>
 80061e2:	f1b9 0f00 	cmp.w	r9, #0
 80061e6:	db06      	blt.n	80061f6 <_dtoa_r+0xa96>
 80061e8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80061ea:	ea41 0909 	orr.w	r9, r1, r9
 80061ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061f0:	ea59 0101 	orrs.w	r1, r9, r1
 80061f4:	d120      	bne.n	8006238 <_dtoa_r+0xad8>
 80061f6:	2a00      	cmp	r2, #0
 80061f8:	ddec      	ble.n	80061d4 <_dtoa_r+0xa74>
 80061fa:	4659      	mov	r1, fp
 80061fc:	2201      	movs	r2, #1
 80061fe:	4628      	mov	r0, r5
 8006200:	9308      	str	r3, [sp, #32]
 8006202:	f000 fe9d 	bl	8006f40 <__lshift>
 8006206:	4621      	mov	r1, r4
 8006208:	4683      	mov	fp, r0
 800620a:	f000 ff09 	bl	8007020 <__mcmp>
 800620e:	2800      	cmp	r0, #0
 8006210:	9b08      	ldr	r3, [sp, #32]
 8006212:	dc02      	bgt.n	800621a <_dtoa_r+0xaba>
 8006214:	d1de      	bne.n	80061d4 <_dtoa_r+0xa74>
 8006216:	07da      	lsls	r2, r3, #31
 8006218:	d5dc      	bpl.n	80061d4 <_dtoa_r+0xa74>
 800621a:	2b39      	cmp	r3, #57	; 0x39
 800621c:	d1d8      	bne.n	80061d0 <_dtoa_r+0xa70>
 800621e:	9a04      	ldr	r2, [sp, #16]
 8006220:	2339      	movs	r3, #57	; 0x39
 8006222:	7013      	strb	r3, [r2, #0]
 8006224:	463b      	mov	r3, r7
 8006226:	461f      	mov	r7, r3
 8006228:	3b01      	subs	r3, #1
 800622a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800622e:	2a39      	cmp	r2, #57	; 0x39
 8006230:	d050      	beq.n	80062d4 <_dtoa_r+0xb74>
 8006232:	3201      	adds	r2, #1
 8006234:	701a      	strb	r2, [r3, #0]
 8006236:	e747      	b.n	80060c8 <_dtoa_r+0x968>
 8006238:	2a00      	cmp	r2, #0
 800623a:	dd03      	ble.n	8006244 <_dtoa_r+0xae4>
 800623c:	2b39      	cmp	r3, #57	; 0x39
 800623e:	d0ee      	beq.n	800621e <_dtoa_r+0xabe>
 8006240:	3301      	adds	r3, #1
 8006242:	e7c7      	b.n	80061d4 <_dtoa_r+0xa74>
 8006244:	9a08      	ldr	r2, [sp, #32]
 8006246:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006248:	f802 3c01 	strb.w	r3, [r2, #-1]
 800624c:	428a      	cmp	r2, r1
 800624e:	d02a      	beq.n	80062a6 <_dtoa_r+0xb46>
 8006250:	4659      	mov	r1, fp
 8006252:	2300      	movs	r3, #0
 8006254:	220a      	movs	r2, #10
 8006256:	4628      	mov	r0, r5
 8006258:	f000 fc7c 	bl	8006b54 <__multadd>
 800625c:	45b0      	cmp	r8, r6
 800625e:	4683      	mov	fp, r0
 8006260:	f04f 0300 	mov.w	r3, #0
 8006264:	f04f 020a 	mov.w	r2, #10
 8006268:	4641      	mov	r1, r8
 800626a:	4628      	mov	r0, r5
 800626c:	d107      	bne.n	800627e <_dtoa_r+0xb1e>
 800626e:	f000 fc71 	bl	8006b54 <__multadd>
 8006272:	4680      	mov	r8, r0
 8006274:	4606      	mov	r6, r0
 8006276:	9b08      	ldr	r3, [sp, #32]
 8006278:	3301      	adds	r3, #1
 800627a:	9308      	str	r3, [sp, #32]
 800627c:	e775      	b.n	800616a <_dtoa_r+0xa0a>
 800627e:	f000 fc69 	bl	8006b54 <__multadd>
 8006282:	4631      	mov	r1, r6
 8006284:	4680      	mov	r8, r0
 8006286:	2300      	movs	r3, #0
 8006288:	220a      	movs	r2, #10
 800628a:	4628      	mov	r0, r5
 800628c:	f000 fc62 	bl	8006b54 <__multadd>
 8006290:	4606      	mov	r6, r0
 8006292:	e7f0      	b.n	8006276 <_dtoa_r+0xb16>
 8006294:	f1b9 0f00 	cmp.w	r9, #0
 8006298:	9a03      	ldr	r2, [sp, #12]
 800629a:	bfcc      	ite	gt
 800629c:	464f      	movgt	r7, r9
 800629e:	2701      	movle	r7, #1
 80062a0:	4417      	add	r7, r2
 80062a2:	f04f 0800 	mov.w	r8, #0
 80062a6:	4659      	mov	r1, fp
 80062a8:	2201      	movs	r2, #1
 80062aa:	4628      	mov	r0, r5
 80062ac:	9308      	str	r3, [sp, #32]
 80062ae:	f000 fe47 	bl	8006f40 <__lshift>
 80062b2:	4621      	mov	r1, r4
 80062b4:	4683      	mov	fp, r0
 80062b6:	f000 feb3 	bl	8007020 <__mcmp>
 80062ba:	2800      	cmp	r0, #0
 80062bc:	dcb2      	bgt.n	8006224 <_dtoa_r+0xac4>
 80062be:	d102      	bne.n	80062c6 <_dtoa_r+0xb66>
 80062c0:	9b08      	ldr	r3, [sp, #32]
 80062c2:	07db      	lsls	r3, r3, #31
 80062c4:	d4ae      	bmi.n	8006224 <_dtoa_r+0xac4>
 80062c6:	463b      	mov	r3, r7
 80062c8:	461f      	mov	r7, r3
 80062ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062ce:	2a30      	cmp	r2, #48	; 0x30
 80062d0:	d0fa      	beq.n	80062c8 <_dtoa_r+0xb68>
 80062d2:	e6f9      	b.n	80060c8 <_dtoa_r+0x968>
 80062d4:	9a03      	ldr	r2, [sp, #12]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d1a5      	bne.n	8006226 <_dtoa_r+0xac6>
 80062da:	f10a 0a01 	add.w	sl, sl, #1
 80062de:	2331      	movs	r3, #49	; 0x31
 80062e0:	e779      	b.n	80061d6 <_dtoa_r+0xa76>
 80062e2:	4b14      	ldr	r3, [pc, #80]	; (8006334 <_dtoa_r+0xbd4>)
 80062e4:	f7ff baa7 	b.w	8005836 <_dtoa_r+0xd6>
 80062e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f47f aa80 	bne.w	80057f0 <_dtoa_r+0x90>
 80062f0:	4b11      	ldr	r3, [pc, #68]	; (8006338 <_dtoa_r+0xbd8>)
 80062f2:	f7ff baa0 	b.w	8005836 <_dtoa_r+0xd6>
 80062f6:	f1b9 0f00 	cmp.w	r9, #0
 80062fa:	dc03      	bgt.n	8006304 <_dtoa_r+0xba4>
 80062fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062fe:	2b02      	cmp	r3, #2
 8006300:	f73f aecb 	bgt.w	800609a <_dtoa_r+0x93a>
 8006304:	9f03      	ldr	r7, [sp, #12]
 8006306:	4621      	mov	r1, r4
 8006308:	4658      	mov	r0, fp
 800630a:	f7ff f99f 	bl	800564c <quorem>
 800630e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006312:	f807 3b01 	strb.w	r3, [r7], #1
 8006316:	9a03      	ldr	r2, [sp, #12]
 8006318:	1aba      	subs	r2, r7, r2
 800631a:	4591      	cmp	r9, r2
 800631c:	ddba      	ble.n	8006294 <_dtoa_r+0xb34>
 800631e:	4659      	mov	r1, fp
 8006320:	2300      	movs	r3, #0
 8006322:	220a      	movs	r2, #10
 8006324:	4628      	mov	r0, r5
 8006326:	f000 fc15 	bl	8006b54 <__multadd>
 800632a:	4683      	mov	fp, r0
 800632c:	e7eb      	b.n	8006306 <_dtoa_r+0xba6>
 800632e:	bf00      	nop
 8006330:	0800a5b8 	.word	0x0800a5b8
 8006334:	0800a7b1 	.word	0x0800a7b1
 8006338:	0800a539 	.word	0x0800a539

0800633c <__errno>:
 800633c:	4b01      	ldr	r3, [pc, #4]	; (8006344 <__errno+0x8>)
 800633e:	6818      	ldr	r0, [r3, #0]
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	20000044 	.word	0x20000044

08006348 <rshift>:
 8006348:	6903      	ldr	r3, [r0, #16]
 800634a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800634e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006352:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006356:	f100 0414 	add.w	r4, r0, #20
 800635a:	dd45      	ble.n	80063e8 <rshift+0xa0>
 800635c:	f011 011f 	ands.w	r1, r1, #31
 8006360:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006364:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006368:	d10c      	bne.n	8006384 <rshift+0x3c>
 800636a:	f100 0710 	add.w	r7, r0, #16
 800636e:	4629      	mov	r1, r5
 8006370:	42b1      	cmp	r1, r6
 8006372:	d334      	bcc.n	80063de <rshift+0x96>
 8006374:	1a9b      	subs	r3, r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	1eea      	subs	r2, r5, #3
 800637a:	4296      	cmp	r6, r2
 800637c:	bf38      	it	cc
 800637e:	2300      	movcc	r3, #0
 8006380:	4423      	add	r3, r4
 8006382:	e015      	b.n	80063b0 <rshift+0x68>
 8006384:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006388:	f1c1 0820 	rsb	r8, r1, #32
 800638c:	40cf      	lsrs	r7, r1
 800638e:	f105 0e04 	add.w	lr, r5, #4
 8006392:	46a1      	mov	r9, r4
 8006394:	4576      	cmp	r6, lr
 8006396:	46f4      	mov	ip, lr
 8006398:	d815      	bhi.n	80063c6 <rshift+0x7e>
 800639a:	1a9a      	subs	r2, r3, r2
 800639c:	0092      	lsls	r2, r2, #2
 800639e:	3a04      	subs	r2, #4
 80063a0:	3501      	adds	r5, #1
 80063a2:	42ae      	cmp	r6, r5
 80063a4:	bf38      	it	cc
 80063a6:	2200      	movcc	r2, #0
 80063a8:	18a3      	adds	r3, r4, r2
 80063aa:	50a7      	str	r7, [r4, r2]
 80063ac:	b107      	cbz	r7, 80063b0 <rshift+0x68>
 80063ae:	3304      	adds	r3, #4
 80063b0:	1b1a      	subs	r2, r3, r4
 80063b2:	42a3      	cmp	r3, r4
 80063b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80063b8:	bf08      	it	eq
 80063ba:	2300      	moveq	r3, #0
 80063bc:	6102      	str	r2, [r0, #16]
 80063be:	bf08      	it	eq
 80063c0:	6143      	streq	r3, [r0, #20]
 80063c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063c6:	f8dc c000 	ldr.w	ip, [ip]
 80063ca:	fa0c fc08 	lsl.w	ip, ip, r8
 80063ce:	ea4c 0707 	orr.w	r7, ip, r7
 80063d2:	f849 7b04 	str.w	r7, [r9], #4
 80063d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80063da:	40cf      	lsrs	r7, r1
 80063dc:	e7da      	b.n	8006394 <rshift+0x4c>
 80063de:	f851 cb04 	ldr.w	ip, [r1], #4
 80063e2:	f847 cf04 	str.w	ip, [r7, #4]!
 80063e6:	e7c3      	b.n	8006370 <rshift+0x28>
 80063e8:	4623      	mov	r3, r4
 80063ea:	e7e1      	b.n	80063b0 <rshift+0x68>

080063ec <__hexdig_fun>:
 80063ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80063f0:	2b09      	cmp	r3, #9
 80063f2:	d802      	bhi.n	80063fa <__hexdig_fun+0xe>
 80063f4:	3820      	subs	r0, #32
 80063f6:	b2c0      	uxtb	r0, r0
 80063f8:	4770      	bx	lr
 80063fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80063fe:	2b05      	cmp	r3, #5
 8006400:	d801      	bhi.n	8006406 <__hexdig_fun+0x1a>
 8006402:	3847      	subs	r0, #71	; 0x47
 8006404:	e7f7      	b.n	80063f6 <__hexdig_fun+0xa>
 8006406:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800640a:	2b05      	cmp	r3, #5
 800640c:	d801      	bhi.n	8006412 <__hexdig_fun+0x26>
 800640e:	3827      	subs	r0, #39	; 0x27
 8006410:	e7f1      	b.n	80063f6 <__hexdig_fun+0xa>
 8006412:	2000      	movs	r0, #0
 8006414:	4770      	bx	lr
	...

08006418 <__gethex>:
 8006418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641c:	b08b      	sub	sp, #44	; 0x2c
 800641e:	468b      	mov	fp, r1
 8006420:	9305      	str	r3, [sp, #20]
 8006422:	4bb2      	ldr	r3, [pc, #712]	; (80066ec <__gethex+0x2d4>)
 8006424:	9002      	str	r0, [sp, #8]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	9303      	str	r3, [sp, #12]
 800642a:	4618      	mov	r0, r3
 800642c:	4690      	mov	r8, r2
 800642e:	f7f9 fee1 	bl	80001f4 <strlen>
 8006432:	9b03      	ldr	r3, [sp, #12]
 8006434:	f8db 2000 	ldr.w	r2, [fp]
 8006438:	4403      	add	r3, r0
 800643a:	4682      	mov	sl, r0
 800643c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006440:	9306      	str	r3, [sp, #24]
 8006442:	1c93      	adds	r3, r2, #2
 8006444:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006448:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800644c:	32fe      	adds	r2, #254	; 0xfe
 800644e:	18d1      	adds	r1, r2, r3
 8006450:	461f      	mov	r7, r3
 8006452:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006456:	9101      	str	r1, [sp, #4]
 8006458:	2830      	cmp	r0, #48	; 0x30
 800645a:	d0f8      	beq.n	800644e <__gethex+0x36>
 800645c:	f7ff ffc6 	bl	80063ec <__hexdig_fun>
 8006460:	4604      	mov	r4, r0
 8006462:	2800      	cmp	r0, #0
 8006464:	d13a      	bne.n	80064dc <__gethex+0xc4>
 8006466:	9903      	ldr	r1, [sp, #12]
 8006468:	4652      	mov	r2, sl
 800646a:	4638      	mov	r0, r7
 800646c:	f001 fd96 	bl	8007f9c <strncmp>
 8006470:	4605      	mov	r5, r0
 8006472:	2800      	cmp	r0, #0
 8006474:	d166      	bne.n	8006544 <__gethex+0x12c>
 8006476:	f817 000a 	ldrb.w	r0, [r7, sl]
 800647a:	eb07 060a 	add.w	r6, r7, sl
 800647e:	f7ff ffb5 	bl	80063ec <__hexdig_fun>
 8006482:	2800      	cmp	r0, #0
 8006484:	d060      	beq.n	8006548 <__gethex+0x130>
 8006486:	4633      	mov	r3, r6
 8006488:	7818      	ldrb	r0, [r3, #0]
 800648a:	2830      	cmp	r0, #48	; 0x30
 800648c:	461f      	mov	r7, r3
 800648e:	f103 0301 	add.w	r3, r3, #1
 8006492:	d0f9      	beq.n	8006488 <__gethex+0x70>
 8006494:	f7ff ffaa 	bl	80063ec <__hexdig_fun>
 8006498:	2301      	movs	r3, #1
 800649a:	fab0 f480 	clz	r4, r0
 800649e:	0964      	lsrs	r4, r4, #5
 80064a0:	4635      	mov	r5, r6
 80064a2:	9301      	str	r3, [sp, #4]
 80064a4:	463a      	mov	r2, r7
 80064a6:	4616      	mov	r6, r2
 80064a8:	3201      	adds	r2, #1
 80064aa:	7830      	ldrb	r0, [r6, #0]
 80064ac:	f7ff ff9e 	bl	80063ec <__hexdig_fun>
 80064b0:	2800      	cmp	r0, #0
 80064b2:	d1f8      	bne.n	80064a6 <__gethex+0x8e>
 80064b4:	9903      	ldr	r1, [sp, #12]
 80064b6:	4652      	mov	r2, sl
 80064b8:	4630      	mov	r0, r6
 80064ba:	f001 fd6f 	bl	8007f9c <strncmp>
 80064be:	b980      	cbnz	r0, 80064e2 <__gethex+0xca>
 80064c0:	b94d      	cbnz	r5, 80064d6 <__gethex+0xbe>
 80064c2:	eb06 050a 	add.w	r5, r6, sl
 80064c6:	462a      	mov	r2, r5
 80064c8:	4616      	mov	r6, r2
 80064ca:	3201      	adds	r2, #1
 80064cc:	7830      	ldrb	r0, [r6, #0]
 80064ce:	f7ff ff8d 	bl	80063ec <__hexdig_fun>
 80064d2:	2800      	cmp	r0, #0
 80064d4:	d1f8      	bne.n	80064c8 <__gethex+0xb0>
 80064d6:	1bad      	subs	r5, r5, r6
 80064d8:	00ad      	lsls	r5, r5, #2
 80064da:	e004      	b.n	80064e6 <__gethex+0xce>
 80064dc:	2400      	movs	r4, #0
 80064de:	4625      	mov	r5, r4
 80064e0:	e7e0      	b.n	80064a4 <__gethex+0x8c>
 80064e2:	2d00      	cmp	r5, #0
 80064e4:	d1f7      	bne.n	80064d6 <__gethex+0xbe>
 80064e6:	7833      	ldrb	r3, [r6, #0]
 80064e8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80064ec:	2b50      	cmp	r3, #80	; 0x50
 80064ee:	d139      	bne.n	8006564 <__gethex+0x14c>
 80064f0:	7873      	ldrb	r3, [r6, #1]
 80064f2:	2b2b      	cmp	r3, #43	; 0x2b
 80064f4:	d02a      	beq.n	800654c <__gethex+0x134>
 80064f6:	2b2d      	cmp	r3, #45	; 0x2d
 80064f8:	d02c      	beq.n	8006554 <__gethex+0x13c>
 80064fa:	1c71      	adds	r1, r6, #1
 80064fc:	f04f 0900 	mov.w	r9, #0
 8006500:	7808      	ldrb	r0, [r1, #0]
 8006502:	f7ff ff73 	bl	80063ec <__hexdig_fun>
 8006506:	1e43      	subs	r3, r0, #1
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b18      	cmp	r3, #24
 800650c:	d82a      	bhi.n	8006564 <__gethex+0x14c>
 800650e:	f1a0 0210 	sub.w	r2, r0, #16
 8006512:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006516:	f7ff ff69 	bl	80063ec <__hexdig_fun>
 800651a:	1e43      	subs	r3, r0, #1
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b18      	cmp	r3, #24
 8006520:	d91b      	bls.n	800655a <__gethex+0x142>
 8006522:	f1b9 0f00 	cmp.w	r9, #0
 8006526:	d000      	beq.n	800652a <__gethex+0x112>
 8006528:	4252      	negs	r2, r2
 800652a:	4415      	add	r5, r2
 800652c:	f8cb 1000 	str.w	r1, [fp]
 8006530:	b1d4      	cbz	r4, 8006568 <__gethex+0x150>
 8006532:	9b01      	ldr	r3, [sp, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	bf14      	ite	ne
 8006538:	2700      	movne	r7, #0
 800653a:	2706      	moveq	r7, #6
 800653c:	4638      	mov	r0, r7
 800653e:	b00b      	add	sp, #44	; 0x2c
 8006540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006544:	463e      	mov	r6, r7
 8006546:	4625      	mov	r5, r4
 8006548:	2401      	movs	r4, #1
 800654a:	e7cc      	b.n	80064e6 <__gethex+0xce>
 800654c:	f04f 0900 	mov.w	r9, #0
 8006550:	1cb1      	adds	r1, r6, #2
 8006552:	e7d5      	b.n	8006500 <__gethex+0xe8>
 8006554:	f04f 0901 	mov.w	r9, #1
 8006558:	e7fa      	b.n	8006550 <__gethex+0x138>
 800655a:	230a      	movs	r3, #10
 800655c:	fb03 0202 	mla	r2, r3, r2, r0
 8006560:	3a10      	subs	r2, #16
 8006562:	e7d6      	b.n	8006512 <__gethex+0xfa>
 8006564:	4631      	mov	r1, r6
 8006566:	e7e1      	b.n	800652c <__gethex+0x114>
 8006568:	1bf3      	subs	r3, r6, r7
 800656a:	3b01      	subs	r3, #1
 800656c:	4621      	mov	r1, r4
 800656e:	2b07      	cmp	r3, #7
 8006570:	dc0a      	bgt.n	8006588 <__gethex+0x170>
 8006572:	9802      	ldr	r0, [sp, #8]
 8006574:	f000 fa8c 	bl	8006a90 <_Balloc>
 8006578:	4604      	mov	r4, r0
 800657a:	b940      	cbnz	r0, 800658e <__gethex+0x176>
 800657c:	4b5c      	ldr	r3, [pc, #368]	; (80066f0 <__gethex+0x2d8>)
 800657e:	4602      	mov	r2, r0
 8006580:	21de      	movs	r1, #222	; 0xde
 8006582:	485c      	ldr	r0, [pc, #368]	; (80066f4 <__gethex+0x2dc>)
 8006584:	f001 fdda 	bl	800813c <__assert_func>
 8006588:	3101      	adds	r1, #1
 800658a:	105b      	asrs	r3, r3, #1
 800658c:	e7ef      	b.n	800656e <__gethex+0x156>
 800658e:	f100 0914 	add.w	r9, r0, #20
 8006592:	f04f 0b00 	mov.w	fp, #0
 8006596:	f1ca 0301 	rsb	r3, sl, #1
 800659a:	f8cd 9010 	str.w	r9, [sp, #16]
 800659e:	f8cd b004 	str.w	fp, [sp, #4]
 80065a2:	9308      	str	r3, [sp, #32]
 80065a4:	42b7      	cmp	r7, r6
 80065a6:	d33f      	bcc.n	8006628 <__gethex+0x210>
 80065a8:	9f04      	ldr	r7, [sp, #16]
 80065aa:	9b01      	ldr	r3, [sp, #4]
 80065ac:	f847 3b04 	str.w	r3, [r7], #4
 80065b0:	eba7 0709 	sub.w	r7, r7, r9
 80065b4:	10bf      	asrs	r7, r7, #2
 80065b6:	6127      	str	r7, [r4, #16]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 fb5b 	bl	8006c74 <__hi0bits>
 80065be:	017f      	lsls	r7, r7, #5
 80065c0:	f8d8 6000 	ldr.w	r6, [r8]
 80065c4:	1a3f      	subs	r7, r7, r0
 80065c6:	42b7      	cmp	r7, r6
 80065c8:	dd62      	ble.n	8006690 <__gethex+0x278>
 80065ca:	1bbf      	subs	r7, r7, r6
 80065cc:	4639      	mov	r1, r7
 80065ce:	4620      	mov	r0, r4
 80065d0:	f000 fef1 	bl	80073b6 <__any_on>
 80065d4:	4682      	mov	sl, r0
 80065d6:	b1a8      	cbz	r0, 8006604 <__gethex+0x1ec>
 80065d8:	1e7b      	subs	r3, r7, #1
 80065da:	1159      	asrs	r1, r3, #5
 80065dc:	f003 021f 	and.w	r2, r3, #31
 80065e0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80065e4:	f04f 0a01 	mov.w	sl, #1
 80065e8:	fa0a f202 	lsl.w	r2, sl, r2
 80065ec:	420a      	tst	r2, r1
 80065ee:	d009      	beq.n	8006604 <__gethex+0x1ec>
 80065f0:	4553      	cmp	r3, sl
 80065f2:	dd05      	ble.n	8006600 <__gethex+0x1e8>
 80065f4:	1eb9      	subs	r1, r7, #2
 80065f6:	4620      	mov	r0, r4
 80065f8:	f000 fedd 	bl	80073b6 <__any_on>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d144      	bne.n	800668a <__gethex+0x272>
 8006600:	f04f 0a02 	mov.w	sl, #2
 8006604:	4639      	mov	r1, r7
 8006606:	4620      	mov	r0, r4
 8006608:	f7ff fe9e 	bl	8006348 <rshift>
 800660c:	443d      	add	r5, r7
 800660e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006612:	42ab      	cmp	r3, r5
 8006614:	da4a      	bge.n	80066ac <__gethex+0x294>
 8006616:	9802      	ldr	r0, [sp, #8]
 8006618:	4621      	mov	r1, r4
 800661a:	f000 fa79 	bl	8006b10 <_Bfree>
 800661e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006620:	2300      	movs	r3, #0
 8006622:	6013      	str	r3, [r2, #0]
 8006624:	27a3      	movs	r7, #163	; 0xa3
 8006626:	e789      	b.n	800653c <__gethex+0x124>
 8006628:	1e73      	subs	r3, r6, #1
 800662a:	9a06      	ldr	r2, [sp, #24]
 800662c:	9307      	str	r3, [sp, #28]
 800662e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006632:	4293      	cmp	r3, r2
 8006634:	d019      	beq.n	800666a <__gethex+0x252>
 8006636:	f1bb 0f20 	cmp.w	fp, #32
 800663a:	d107      	bne.n	800664c <__gethex+0x234>
 800663c:	9b04      	ldr	r3, [sp, #16]
 800663e:	9a01      	ldr	r2, [sp, #4]
 8006640:	f843 2b04 	str.w	r2, [r3], #4
 8006644:	9304      	str	r3, [sp, #16]
 8006646:	2300      	movs	r3, #0
 8006648:	9301      	str	r3, [sp, #4]
 800664a:	469b      	mov	fp, r3
 800664c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006650:	f7ff fecc 	bl	80063ec <__hexdig_fun>
 8006654:	9b01      	ldr	r3, [sp, #4]
 8006656:	f000 000f 	and.w	r0, r0, #15
 800665a:	fa00 f00b 	lsl.w	r0, r0, fp
 800665e:	4303      	orrs	r3, r0
 8006660:	9301      	str	r3, [sp, #4]
 8006662:	f10b 0b04 	add.w	fp, fp, #4
 8006666:	9b07      	ldr	r3, [sp, #28]
 8006668:	e00d      	b.n	8006686 <__gethex+0x26e>
 800666a:	9a08      	ldr	r2, [sp, #32]
 800666c:	1e73      	subs	r3, r6, #1
 800666e:	4413      	add	r3, r2
 8006670:	42bb      	cmp	r3, r7
 8006672:	d3e0      	bcc.n	8006636 <__gethex+0x21e>
 8006674:	4618      	mov	r0, r3
 8006676:	9903      	ldr	r1, [sp, #12]
 8006678:	9309      	str	r3, [sp, #36]	; 0x24
 800667a:	4652      	mov	r2, sl
 800667c:	f001 fc8e 	bl	8007f9c <strncmp>
 8006680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006682:	2800      	cmp	r0, #0
 8006684:	d1d7      	bne.n	8006636 <__gethex+0x21e>
 8006686:	461e      	mov	r6, r3
 8006688:	e78c      	b.n	80065a4 <__gethex+0x18c>
 800668a:	f04f 0a03 	mov.w	sl, #3
 800668e:	e7b9      	b.n	8006604 <__gethex+0x1ec>
 8006690:	da09      	bge.n	80066a6 <__gethex+0x28e>
 8006692:	1bf7      	subs	r7, r6, r7
 8006694:	4621      	mov	r1, r4
 8006696:	9802      	ldr	r0, [sp, #8]
 8006698:	463a      	mov	r2, r7
 800669a:	f000 fc51 	bl	8006f40 <__lshift>
 800669e:	1bed      	subs	r5, r5, r7
 80066a0:	4604      	mov	r4, r0
 80066a2:	f100 0914 	add.w	r9, r0, #20
 80066a6:	f04f 0a00 	mov.w	sl, #0
 80066aa:	e7b0      	b.n	800660e <__gethex+0x1f6>
 80066ac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80066b0:	42a8      	cmp	r0, r5
 80066b2:	dd71      	ble.n	8006798 <__gethex+0x380>
 80066b4:	1b45      	subs	r5, r0, r5
 80066b6:	42ae      	cmp	r6, r5
 80066b8:	dc35      	bgt.n	8006726 <__gethex+0x30e>
 80066ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d029      	beq.n	8006716 <__gethex+0x2fe>
 80066c2:	2b03      	cmp	r3, #3
 80066c4:	d02b      	beq.n	800671e <__gethex+0x306>
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d11c      	bne.n	8006704 <__gethex+0x2ec>
 80066ca:	42ae      	cmp	r6, r5
 80066cc:	d11a      	bne.n	8006704 <__gethex+0x2ec>
 80066ce:	2e01      	cmp	r6, #1
 80066d0:	d112      	bne.n	80066f8 <__gethex+0x2e0>
 80066d2:	9a05      	ldr	r2, [sp, #20]
 80066d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80066d8:	6013      	str	r3, [r2, #0]
 80066da:	2301      	movs	r3, #1
 80066dc:	6123      	str	r3, [r4, #16]
 80066de:	f8c9 3000 	str.w	r3, [r9]
 80066e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80066e4:	2762      	movs	r7, #98	; 0x62
 80066e6:	601c      	str	r4, [r3, #0]
 80066e8:	e728      	b.n	800653c <__gethex+0x124>
 80066ea:	bf00      	nop
 80066ec:	0800a630 	.word	0x0800a630
 80066f0:	0800a5b8 	.word	0x0800a5b8
 80066f4:	0800a5c9 	.word	0x0800a5c9
 80066f8:	1e71      	subs	r1, r6, #1
 80066fa:	4620      	mov	r0, r4
 80066fc:	f000 fe5b 	bl	80073b6 <__any_on>
 8006700:	2800      	cmp	r0, #0
 8006702:	d1e6      	bne.n	80066d2 <__gethex+0x2ba>
 8006704:	9802      	ldr	r0, [sp, #8]
 8006706:	4621      	mov	r1, r4
 8006708:	f000 fa02 	bl	8006b10 <_Bfree>
 800670c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800670e:	2300      	movs	r3, #0
 8006710:	6013      	str	r3, [r2, #0]
 8006712:	2750      	movs	r7, #80	; 0x50
 8006714:	e712      	b.n	800653c <__gethex+0x124>
 8006716:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1f3      	bne.n	8006704 <__gethex+0x2ec>
 800671c:	e7d9      	b.n	80066d2 <__gethex+0x2ba>
 800671e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1d6      	bne.n	80066d2 <__gethex+0x2ba>
 8006724:	e7ee      	b.n	8006704 <__gethex+0x2ec>
 8006726:	1e6f      	subs	r7, r5, #1
 8006728:	f1ba 0f00 	cmp.w	sl, #0
 800672c:	d131      	bne.n	8006792 <__gethex+0x37a>
 800672e:	b127      	cbz	r7, 800673a <__gethex+0x322>
 8006730:	4639      	mov	r1, r7
 8006732:	4620      	mov	r0, r4
 8006734:	f000 fe3f 	bl	80073b6 <__any_on>
 8006738:	4682      	mov	sl, r0
 800673a:	117b      	asrs	r3, r7, #5
 800673c:	2101      	movs	r1, #1
 800673e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006742:	f007 071f 	and.w	r7, r7, #31
 8006746:	fa01 f707 	lsl.w	r7, r1, r7
 800674a:	421f      	tst	r7, r3
 800674c:	4629      	mov	r1, r5
 800674e:	4620      	mov	r0, r4
 8006750:	bf18      	it	ne
 8006752:	f04a 0a02 	orrne.w	sl, sl, #2
 8006756:	1b76      	subs	r6, r6, r5
 8006758:	f7ff fdf6 	bl	8006348 <rshift>
 800675c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006760:	2702      	movs	r7, #2
 8006762:	f1ba 0f00 	cmp.w	sl, #0
 8006766:	d048      	beq.n	80067fa <__gethex+0x3e2>
 8006768:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800676c:	2b02      	cmp	r3, #2
 800676e:	d015      	beq.n	800679c <__gethex+0x384>
 8006770:	2b03      	cmp	r3, #3
 8006772:	d017      	beq.n	80067a4 <__gethex+0x38c>
 8006774:	2b01      	cmp	r3, #1
 8006776:	d109      	bne.n	800678c <__gethex+0x374>
 8006778:	f01a 0f02 	tst.w	sl, #2
 800677c:	d006      	beq.n	800678c <__gethex+0x374>
 800677e:	f8d9 0000 	ldr.w	r0, [r9]
 8006782:	ea4a 0a00 	orr.w	sl, sl, r0
 8006786:	f01a 0f01 	tst.w	sl, #1
 800678a:	d10e      	bne.n	80067aa <__gethex+0x392>
 800678c:	f047 0710 	orr.w	r7, r7, #16
 8006790:	e033      	b.n	80067fa <__gethex+0x3e2>
 8006792:	f04f 0a01 	mov.w	sl, #1
 8006796:	e7d0      	b.n	800673a <__gethex+0x322>
 8006798:	2701      	movs	r7, #1
 800679a:	e7e2      	b.n	8006762 <__gethex+0x34a>
 800679c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800679e:	f1c3 0301 	rsb	r3, r3, #1
 80067a2:	9315      	str	r3, [sp, #84]	; 0x54
 80067a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d0f0      	beq.n	800678c <__gethex+0x374>
 80067aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80067ae:	f104 0314 	add.w	r3, r4, #20
 80067b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80067b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80067ba:	f04f 0c00 	mov.w	ip, #0
 80067be:	4618      	mov	r0, r3
 80067c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80067c4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80067c8:	d01c      	beq.n	8006804 <__gethex+0x3ec>
 80067ca:	3201      	adds	r2, #1
 80067cc:	6002      	str	r2, [r0, #0]
 80067ce:	2f02      	cmp	r7, #2
 80067d0:	f104 0314 	add.w	r3, r4, #20
 80067d4:	d13d      	bne.n	8006852 <__gethex+0x43a>
 80067d6:	f8d8 2000 	ldr.w	r2, [r8]
 80067da:	3a01      	subs	r2, #1
 80067dc:	42b2      	cmp	r2, r6
 80067de:	d10a      	bne.n	80067f6 <__gethex+0x3de>
 80067e0:	1171      	asrs	r1, r6, #5
 80067e2:	2201      	movs	r2, #1
 80067e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80067e8:	f006 061f 	and.w	r6, r6, #31
 80067ec:	fa02 f606 	lsl.w	r6, r2, r6
 80067f0:	421e      	tst	r6, r3
 80067f2:	bf18      	it	ne
 80067f4:	4617      	movne	r7, r2
 80067f6:	f047 0720 	orr.w	r7, r7, #32
 80067fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80067fc:	601c      	str	r4, [r3, #0]
 80067fe:	9b05      	ldr	r3, [sp, #20]
 8006800:	601d      	str	r5, [r3, #0]
 8006802:	e69b      	b.n	800653c <__gethex+0x124>
 8006804:	4299      	cmp	r1, r3
 8006806:	f843 cc04 	str.w	ip, [r3, #-4]
 800680a:	d8d8      	bhi.n	80067be <__gethex+0x3a6>
 800680c:	68a3      	ldr	r3, [r4, #8]
 800680e:	459b      	cmp	fp, r3
 8006810:	db17      	blt.n	8006842 <__gethex+0x42a>
 8006812:	6861      	ldr	r1, [r4, #4]
 8006814:	9802      	ldr	r0, [sp, #8]
 8006816:	3101      	adds	r1, #1
 8006818:	f000 f93a 	bl	8006a90 <_Balloc>
 800681c:	4681      	mov	r9, r0
 800681e:	b918      	cbnz	r0, 8006828 <__gethex+0x410>
 8006820:	4b1a      	ldr	r3, [pc, #104]	; (800688c <__gethex+0x474>)
 8006822:	4602      	mov	r2, r0
 8006824:	2184      	movs	r1, #132	; 0x84
 8006826:	e6ac      	b.n	8006582 <__gethex+0x16a>
 8006828:	6922      	ldr	r2, [r4, #16]
 800682a:	3202      	adds	r2, #2
 800682c:	f104 010c 	add.w	r1, r4, #12
 8006830:	0092      	lsls	r2, r2, #2
 8006832:	300c      	adds	r0, #12
 8006834:	f000 f91e 	bl	8006a74 <memcpy>
 8006838:	4621      	mov	r1, r4
 800683a:	9802      	ldr	r0, [sp, #8]
 800683c:	f000 f968 	bl	8006b10 <_Bfree>
 8006840:	464c      	mov	r4, r9
 8006842:	6923      	ldr	r3, [r4, #16]
 8006844:	1c5a      	adds	r2, r3, #1
 8006846:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800684a:	6122      	str	r2, [r4, #16]
 800684c:	2201      	movs	r2, #1
 800684e:	615a      	str	r2, [r3, #20]
 8006850:	e7bd      	b.n	80067ce <__gethex+0x3b6>
 8006852:	6922      	ldr	r2, [r4, #16]
 8006854:	455a      	cmp	r2, fp
 8006856:	dd0b      	ble.n	8006870 <__gethex+0x458>
 8006858:	2101      	movs	r1, #1
 800685a:	4620      	mov	r0, r4
 800685c:	f7ff fd74 	bl	8006348 <rshift>
 8006860:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006864:	3501      	adds	r5, #1
 8006866:	42ab      	cmp	r3, r5
 8006868:	f6ff aed5 	blt.w	8006616 <__gethex+0x1fe>
 800686c:	2701      	movs	r7, #1
 800686e:	e7c2      	b.n	80067f6 <__gethex+0x3de>
 8006870:	f016 061f 	ands.w	r6, r6, #31
 8006874:	d0fa      	beq.n	800686c <__gethex+0x454>
 8006876:	4453      	add	r3, sl
 8006878:	f1c6 0620 	rsb	r6, r6, #32
 800687c:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006880:	f000 f9f8 	bl	8006c74 <__hi0bits>
 8006884:	42b0      	cmp	r0, r6
 8006886:	dbe7      	blt.n	8006858 <__gethex+0x440>
 8006888:	e7f0      	b.n	800686c <__gethex+0x454>
 800688a:	bf00      	nop
 800688c:	0800a5b8 	.word	0x0800a5b8

08006890 <L_shift>:
 8006890:	f1c2 0208 	rsb	r2, r2, #8
 8006894:	0092      	lsls	r2, r2, #2
 8006896:	b570      	push	{r4, r5, r6, lr}
 8006898:	f1c2 0620 	rsb	r6, r2, #32
 800689c:	6843      	ldr	r3, [r0, #4]
 800689e:	6804      	ldr	r4, [r0, #0]
 80068a0:	fa03 f506 	lsl.w	r5, r3, r6
 80068a4:	432c      	orrs	r4, r5
 80068a6:	40d3      	lsrs	r3, r2
 80068a8:	6004      	str	r4, [r0, #0]
 80068aa:	f840 3f04 	str.w	r3, [r0, #4]!
 80068ae:	4288      	cmp	r0, r1
 80068b0:	d3f4      	bcc.n	800689c <L_shift+0xc>
 80068b2:	bd70      	pop	{r4, r5, r6, pc}

080068b4 <__match>:
 80068b4:	b530      	push	{r4, r5, lr}
 80068b6:	6803      	ldr	r3, [r0, #0]
 80068b8:	3301      	adds	r3, #1
 80068ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068be:	b914      	cbnz	r4, 80068c6 <__match+0x12>
 80068c0:	6003      	str	r3, [r0, #0]
 80068c2:	2001      	movs	r0, #1
 80068c4:	bd30      	pop	{r4, r5, pc}
 80068c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068ca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80068ce:	2d19      	cmp	r5, #25
 80068d0:	bf98      	it	ls
 80068d2:	3220      	addls	r2, #32
 80068d4:	42a2      	cmp	r2, r4
 80068d6:	d0f0      	beq.n	80068ba <__match+0x6>
 80068d8:	2000      	movs	r0, #0
 80068da:	e7f3      	b.n	80068c4 <__match+0x10>

080068dc <__hexnan>:
 80068dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e0:	680b      	ldr	r3, [r1, #0]
 80068e2:	115e      	asrs	r6, r3, #5
 80068e4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80068e8:	f013 031f 	ands.w	r3, r3, #31
 80068ec:	b087      	sub	sp, #28
 80068ee:	bf18      	it	ne
 80068f0:	3604      	addne	r6, #4
 80068f2:	2500      	movs	r5, #0
 80068f4:	1f37      	subs	r7, r6, #4
 80068f6:	4690      	mov	r8, r2
 80068f8:	6802      	ldr	r2, [r0, #0]
 80068fa:	9301      	str	r3, [sp, #4]
 80068fc:	4682      	mov	sl, r0
 80068fe:	f846 5c04 	str.w	r5, [r6, #-4]
 8006902:	46b9      	mov	r9, r7
 8006904:	463c      	mov	r4, r7
 8006906:	9502      	str	r5, [sp, #8]
 8006908:	46ab      	mov	fp, r5
 800690a:	7851      	ldrb	r1, [r2, #1]
 800690c:	1c53      	adds	r3, r2, #1
 800690e:	9303      	str	r3, [sp, #12]
 8006910:	b341      	cbz	r1, 8006964 <__hexnan+0x88>
 8006912:	4608      	mov	r0, r1
 8006914:	9205      	str	r2, [sp, #20]
 8006916:	9104      	str	r1, [sp, #16]
 8006918:	f7ff fd68 	bl	80063ec <__hexdig_fun>
 800691c:	2800      	cmp	r0, #0
 800691e:	d14f      	bne.n	80069c0 <__hexnan+0xe4>
 8006920:	9904      	ldr	r1, [sp, #16]
 8006922:	9a05      	ldr	r2, [sp, #20]
 8006924:	2920      	cmp	r1, #32
 8006926:	d818      	bhi.n	800695a <__hexnan+0x7e>
 8006928:	9b02      	ldr	r3, [sp, #8]
 800692a:	459b      	cmp	fp, r3
 800692c:	dd13      	ble.n	8006956 <__hexnan+0x7a>
 800692e:	454c      	cmp	r4, r9
 8006930:	d206      	bcs.n	8006940 <__hexnan+0x64>
 8006932:	2d07      	cmp	r5, #7
 8006934:	dc04      	bgt.n	8006940 <__hexnan+0x64>
 8006936:	462a      	mov	r2, r5
 8006938:	4649      	mov	r1, r9
 800693a:	4620      	mov	r0, r4
 800693c:	f7ff ffa8 	bl	8006890 <L_shift>
 8006940:	4544      	cmp	r4, r8
 8006942:	d950      	bls.n	80069e6 <__hexnan+0x10a>
 8006944:	2300      	movs	r3, #0
 8006946:	f1a4 0904 	sub.w	r9, r4, #4
 800694a:	f844 3c04 	str.w	r3, [r4, #-4]
 800694e:	f8cd b008 	str.w	fp, [sp, #8]
 8006952:	464c      	mov	r4, r9
 8006954:	461d      	mov	r5, r3
 8006956:	9a03      	ldr	r2, [sp, #12]
 8006958:	e7d7      	b.n	800690a <__hexnan+0x2e>
 800695a:	2929      	cmp	r1, #41	; 0x29
 800695c:	d156      	bne.n	8006a0c <__hexnan+0x130>
 800695e:	3202      	adds	r2, #2
 8006960:	f8ca 2000 	str.w	r2, [sl]
 8006964:	f1bb 0f00 	cmp.w	fp, #0
 8006968:	d050      	beq.n	8006a0c <__hexnan+0x130>
 800696a:	454c      	cmp	r4, r9
 800696c:	d206      	bcs.n	800697c <__hexnan+0xa0>
 800696e:	2d07      	cmp	r5, #7
 8006970:	dc04      	bgt.n	800697c <__hexnan+0xa0>
 8006972:	462a      	mov	r2, r5
 8006974:	4649      	mov	r1, r9
 8006976:	4620      	mov	r0, r4
 8006978:	f7ff ff8a 	bl	8006890 <L_shift>
 800697c:	4544      	cmp	r4, r8
 800697e:	d934      	bls.n	80069ea <__hexnan+0x10e>
 8006980:	f1a8 0204 	sub.w	r2, r8, #4
 8006984:	4623      	mov	r3, r4
 8006986:	f853 1b04 	ldr.w	r1, [r3], #4
 800698a:	f842 1f04 	str.w	r1, [r2, #4]!
 800698e:	429f      	cmp	r7, r3
 8006990:	d2f9      	bcs.n	8006986 <__hexnan+0xaa>
 8006992:	1b3b      	subs	r3, r7, r4
 8006994:	f023 0303 	bic.w	r3, r3, #3
 8006998:	3304      	adds	r3, #4
 800699a:	3401      	adds	r4, #1
 800699c:	3e03      	subs	r6, #3
 800699e:	42b4      	cmp	r4, r6
 80069a0:	bf88      	it	hi
 80069a2:	2304      	movhi	r3, #4
 80069a4:	4443      	add	r3, r8
 80069a6:	2200      	movs	r2, #0
 80069a8:	f843 2b04 	str.w	r2, [r3], #4
 80069ac:	429f      	cmp	r7, r3
 80069ae:	d2fb      	bcs.n	80069a8 <__hexnan+0xcc>
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	b91b      	cbnz	r3, 80069bc <__hexnan+0xe0>
 80069b4:	4547      	cmp	r7, r8
 80069b6:	d127      	bne.n	8006a08 <__hexnan+0x12c>
 80069b8:	2301      	movs	r3, #1
 80069ba:	603b      	str	r3, [r7, #0]
 80069bc:	2005      	movs	r0, #5
 80069be:	e026      	b.n	8006a0e <__hexnan+0x132>
 80069c0:	3501      	adds	r5, #1
 80069c2:	2d08      	cmp	r5, #8
 80069c4:	f10b 0b01 	add.w	fp, fp, #1
 80069c8:	dd06      	ble.n	80069d8 <__hexnan+0xfc>
 80069ca:	4544      	cmp	r4, r8
 80069cc:	d9c3      	bls.n	8006956 <__hexnan+0x7a>
 80069ce:	2300      	movs	r3, #0
 80069d0:	f844 3c04 	str.w	r3, [r4, #-4]
 80069d4:	2501      	movs	r5, #1
 80069d6:	3c04      	subs	r4, #4
 80069d8:	6822      	ldr	r2, [r4, #0]
 80069da:	f000 000f 	and.w	r0, r0, #15
 80069de:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80069e2:	6022      	str	r2, [r4, #0]
 80069e4:	e7b7      	b.n	8006956 <__hexnan+0x7a>
 80069e6:	2508      	movs	r5, #8
 80069e8:	e7b5      	b.n	8006956 <__hexnan+0x7a>
 80069ea:	9b01      	ldr	r3, [sp, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0df      	beq.n	80069b0 <__hexnan+0xd4>
 80069f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069f4:	f1c3 0320 	rsb	r3, r3, #32
 80069f8:	fa22 f303 	lsr.w	r3, r2, r3
 80069fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006a00:	401a      	ands	r2, r3
 8006a02:	f846 2c04 	str.w	r2, [r6, #-4]
 8006a06:	e7d3      	b.n	80069b0 <__hexnan+0xd4>
 8006a08:	3f04      	subs	r7, #4
 8006a0a:	e7d1      	b.n	80069b0 <__hexnan+0xd4>
 8006a0c:	2004      	movs	r0, #4
 8006a0e:	b007      	add	sp, #28
 8006a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006a14 <_localeconv_r>:
 8006a14:	4800      	ldr	r0, [pc, #0]	; (8006a18 <_localeconv_r+0x4>)
 8006a16:	4770      	bx	lr
 8006a18:	2000019c 	.word	0x2000019c

08006a1c <_lseek_r>:
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	4d07      	ldr	r5, [pc, #28]	; (8006a3c <_lseek_r+0x20>)
 8006a20:	4604      	mov	r4, r0
 8006a22:	4608      	mov	r0, r1
 8006a24:	4611      	mov	r1, r2
 8006a26:	2200      	movs	r2, #0
 8006a28:	602a      	str	r2, [r5, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	f002 f8da 	bl	8008be4 <_lseek>
 8006a30:	1c43      	adds	r3, r0, #1
 8006a32:	d102      	bne.n	8006a3a <_lseek_r+0x1e>
 8006a34:	682b      	ldr	r3, [r5, #0]
 8006a36:	b103      	cbz	r3, 8006a3a <_lseek_r+0x1e>
 8006a38:	6023      	str	r3, [r4, #0]
 8006a3a:	bd38      	pop	{r3, r4, r5, pc}
 8006a3c:	200038ec 	.word	0x200038ec

08006a40 <malloc>:
 8006a40:	4b02      	ldr	r3, [pc, #8]	; (8006a4c <malloc+0xc>)
 8006a42:	4601      	mov	r1, r0
 8006a44:	6818      	ldr	r0, [r3, #0]
 8006a46:	f000 bd55 	b.w	80074f4 <_malloc_r>
 8006a4a:	bf00      	nop
 8006a4c:	20000044 	.word	0x20000044

08006a50 <__ascii_mbtowc>:
 8006a50:	b082      	sub	sp, #8
 8006a52:	b901      	cbnz	r1, 8006a56 <__ascii_mbtowc+0x6>
 8006a54:	a901      	add	r1, sp, #4
 8006a56:	b142      	cbz	r2, 8006a6a <__ascii_mbtowc+0x1a>
 8006a58:	b14b      	cbz	r3, 8006a6e <__ascii_mbtowc+0x1e>
 8006a5a:	7813      	ldrb	r3, [r2, #0]
 8006a5c:	600b      	str	r3, [r1, #0]
 8006a5e:	7812      	ldrb	r2, [r2, #0]
 8006a60:	1e10      	subs	r0, r2, #0
 8006a62:	bf18      	it	ne
 8006a64:	2001      	movne	r0, #1
 8006a66:	b002      	add	sp, #8
 8006a68:	4770      	bx	lr
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	e7fb      	b.n	8006a66 <__ascii_mbtowc+0x16>
 8006a6e:	f06f 0001 	mvn.w	r0, #1
 8006a72:	e7f8      	b.n	8006a66 <__ascii_mbtowc+0x16>

08006a74 <memcpy>:
 8006a74:	440a      	add	r2, r1
 8006a76:	4291      	cmp	r1, r2
 8006a78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006a7c:	d100      	bne.n	8006a80 <memcpy+0xc>
 8006a7e:	4770      	bx	lr
 8006a80:	b510      	push	{r4, lr}
 8006a82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a8a:	4291      	cmp	r1, r2
 8006a8c:	d1f9      	bne.n	8006a82 <memcpy+0xe>
 8006a8e:	bd10      	pop	{r4, pc}

08006a90 <_Balloc>:
 8006a90:	b570      	push	{r4, r5, r6, lr}
 8006a92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006a94:	4604      	mov	r4, r0
 8006a96:	460d      	mov	r5, r1
 8006a98:	b976      	cbnz	r6, 8006ab8 <_Balloc+0x28>
 8006a9a:	2010      	movs	r0, #16
 8006a9c:	f7ff ffd0 	bl	8006a40 <malloc>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	6260      	str	r0, [r4, #36]	; 0x24
 8006aa4:	b920      	cbnz	r0, 8006ab0 <_Balloc+0x20>
 8006aa6:	4b18      	ldr	r3, [pc, #96]	; (8006b08 <_Balloc+0x78>)
 8006aa8:	4818      	ldr	r0, [pc, #96]	; (8006b0c <_Balloc+0x7c>)
 8006aaa:	2166      	movs	r1, #102	; 0x66
 8006aac:	f001 fb46 	bl	800813c <__assert_func>
 8006ab0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ab4:	6006      	str	r6, [r0, #0]
 8006ab6:	60c6      	str	r6, [r0, #12]
 8006ab8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006aba:	68f3      	ldr	r3, [r6, #12]
 8006abc:	b183      	cbz	r3, 8006ae0 <_Balloc+0x50>
 8006abe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ac6:	b9b8      	cbnz	r0, 8006af8 <_Balloc+0x68>
 8006ac8:	2101      	movs	r1, #1
 8006aca:	fa01 f605 	lsl.w	r6, r1, r5
 8006ace:	1d72      	adds	r2, r6, #5
 8006ad0:	0092      	lsls	r2, r2, #2
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f000 fc90 	bl	80073f8 <_calloc_r>
 8006ad8:	b160      	cbz	r0, 8006af4 <_Balloc+0x64>
 8006ada:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ade:	e00e      	b.n	8006afe <_Balloc+0x6e>
 8006ae0:	2221      	movs	r2, #33	; 0x21
 8006ae2:	2104      	movs	r1, #4
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	f000 fc87 	bl	80073f8 <_calloc_r>
 8006aea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006aec:	60f0      	str	r0, [r6, #12]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e4      	bne.n	8006abe <_Balloc+0x2e>
 8006af4:	2000      	movs	r0, #0
 8006af6:	bd70      	pop	{r4, r5, r6, pc}
 8006af8:	6802      	ldr	r2, [r0, #0]
 8006afa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006afe:	2300      	movs	r3, #0
 8006b00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b04:	e7f7      	b.n	8006af6 <_Balloc+0x66>
 8006b06:	bf00      	nop
 8006b08:	0800a546 	.word	0x0800a546
 8006b0c:	0800a644 	.word	0x0800a644

08006b10 <_Bfree>:
 8006b10:	b570      	push	{r4, r5, r6, lr}
 8006b12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b14:	4605      	mov	r5, r0
 8006b16:	460c      	mov	r4, r1
 8006b18:	b976      	cbnz	r6, 8006b38 <_Bfree+0x28>
 8006b1a:	2010      	movs	r0, #16
 8006b1c:	f7ff ff90 	bl	8006a40 <malloc>
 8006b20:	4602      	mov	r2, r0
 8006b22:	6268      	str	r0, [r5, #36]	; 0x24
 8006b24:	b920      	cbnz	r0, 8006b30 <_Bfree+0x20>
 8006b26:	4b09      	ldr	r3, [pc, #36]	; (8006b4c <_Bfree+0x3c>)
 8006b28:	4809      	ldr	r0, [pc, #36]	; (8006b50 <_Bfree+0x40>)
 8006b2a:	218a      	movs	r1, #138	; 0x8a
 8006b2c:	f001 fb06 	bl	800813c <__assert_func>
 8006b30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b34:	6006      	str	r6, [r0, #0]
 8006b36:	60c6      	str	r6, [r0, #12]
 8006b38:	b13c      	cbz	r4, 8006b4a <_Bfree+0x3a>
 8006b3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b3c:	6862      	ldr	r2, [r4, #4]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b44:	6021      	str	r1, [r4, #0]
 8006b46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b4a:	bd70      	pop	{r4, r5, r6, pc}
 8006b4c:	0800a546 	.word	0x0800a546
 8006b50:	0800a644 	.word	0x0800a644

08006b54 <__multadd>:
 8006b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b58:	690d      	ldr	r5, [r1, #16]
 8006b5a:	4607      	mov	r7, r0
 8006b5c:	460c      	mov	r4, r1
 8006b5e:	461e      	mov	r6, r3
 8006b60:	f101 0c14 	add.w	ip, r1, #20
 8006b64:	2000      	movs	r0, #0
 8006b66:	f8dc 3000 	ldr.w	r3, [ip]
 8006b6a:	b299      	uxth	r1, r3
 8006b6c:	fb02 6101 	mla	r1, r2, r1, r6
 8006b70:	0c1e      	lsrs	r6, r3, #16
 8006b72:	0c0b      	lsrs	r3, r1, #16
 8006b74:	fb02 3306 	mla	r3, r2, r6, r3
 8006b78:	b289      	uxth	r1, r1
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b80:	4285      	cmp	r5, r0
 8006b82:	f84c 1b04 	str.w	r1, [ip], #4
 8006b86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b8a:	dcec      	bgt.n	8006b66 <__multadd+0x12>
 8006b8c:	b30e      	cbz	r6, 8006bd2 <__multadd+0x7e>
 8006b8e:	68a3      	ldr	r3, [r4, #8]
 8006b90:	42ab      	cmp	r3, r5
 8006b92:	dc19      	bgt.n	8006bc8 <__multadd+0x74>
 8006b94:	6861      	ldr	r1, [r4, #4]
 8006b96:	4638      	mov	r0, r7
 8006b98:	3101      	adds	r1, #1
 8006b9a:	f7ff ff79 	bl	8006a90 <_Balloc>
 8006b9e:	4680      	mov	r8, r0
 8006ba0:	b928      	cbnz	r0, 8006bae <__multadd+0x5a>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	4b0c      	ldr	r3, [pc, #48]	; (8006bd8 <__multadd+0x84>)
 8006ba6:	480d      	ldr	r0, [pc, #52]	; (8006bdc <__multadd+0x88>)
 8006ba8:	21b5      	movs	r1, #181	; 0xb5
 8006baa:	f001 fac7 	bl	800813c <__assert_func>
 8006bae:	6922      	ldr	r2, [r4, #16]
 8006bb0:	3202      	adds	r2, #2
 8006bb2:	f104 010c 	add.w	r1, r4, #12
 8006bb6:	0092      	lsls	r2, r2, #2
 8006bb8:	300c      	adds	r0, #12
 8006bba:	f7ff ff5b 	bl	8006a74 <memcpy>
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	4638      	mov	r0, r7
 8006bc2:	f7ff ffa5 	bl	8006b10 <_Bfree>
 8006bc6:	4644      	mov	r4, r8
 8006bc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006bcc:	3501      	adds	r5, #1
 8006bce:	615e      	str	r6, [r3, #20]
 8006bd0:	6125      	str	r5, [r4, #16]
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bd8:	0800a5b8 	.word	0x0800a5b8
 8006bdc:	0800a644 	.word	0x0800a644

08006be0 <__s2b>:
 8006be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006be4:	460c      	mov	r4, r1
 8006be6:	4615      	mov	r5, r2
 8006be8:	461f      	mov	r7, r3
 8006bea:	2209      	movs	r2, #9
 8006bec:	3308      	adds	r3, #8
 8006bee:	4606      	mov	r6, r0
 8006bf0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	db09      	blt.n	8006c10 <__s2b+0x30>
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	f7ff ff47 	bl	8006a90 <_Balloc>
 8006c02:	b940      	cbnz	r0, 8006c16 <__s2b+0x36>
 8006c04:	4602      	mov	r2, r0
 8006c06:	4b19      	ldr	r3, [pc, #100]	; (8006c6c <__s2b+0x8c>)
 8006c08:	4819      	ldr	r0, [pc, #100]	; (8006c70 <__s2b+0x90>)
 8006c0a:	21ce      	movs	r1, #206	; 0xce
 8006c0c:	f001 fa96 	bl	800813c <__assert_func>
 8006c10:	0052      	lsls	r2, r2, #1
 8006c12:	3101      	adds	r1, #1
 8006c14:	e7f0      	b.n	8006bf8 <__s2b+0x18>
 8006c16:	9b08      	ldr	r3, [sp, #32]
 8006c18:	6143      	str	r3, [r0, #20]
 8006c1a:	2d09      	cmp	r5, #9
 8006c1c:	f04f 0301 	mov.w	r3, #1
 8006c20:	6103      	str	r3, [r0, #16]
 8006c22:	dd16      	ble.n	8006c52 <__s2b+0x72>
 8006c24:	f104 0909 	add.w	r9, r4, #9
 8006c28:	46c8      	mov	r8, r9
 8006c2a:	442c      	add	r4, r5
 8006c2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006c30:	4601      	mov	r1, r0
 8006c32:	3b30      	subs	r3, #48	; 0x30
 8006c34:	220a      	movs	r2, #10
 8006c36:	4630      	mov	r0, r6
 8006c38:	f7ff ff8c 	bl	8006b54 <__multadd>
 8006c3c:	45a0      	cmp	r8, r4
 8006c3e:	d1f5      	bne.n	8006c2c <__s2b+0x4c>
 8006c40:	f1a5 0408 	sub.w	r4, r5, #8
 8006c44:	444c      	add	r4, r9
 8006c46:	1b2d      	subs	r5, r5, r4
 8006c48:	1963      	adds	r3, r4, r5
 8006c4a:	42bb      	cmp	r3, r7
 8006c4c:	db04      	blt.n	8006c58 <__s2b+0x78>
 8006c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c52:	340a      	adds	r4, #10
 8006c54:	2509      	movs	r5, #9
 8006c56:	e7f6      	b.n	8006c46 <__s2b+0x66>
 8006c58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006c5c:	4601      	mov	r1, r0
 8006c5e:	3b30      	subs	r3, #48	; 0x30
 8006c60:	220a      	movs	r2, #10
 8006c62:	4630      	mov	r0, r6
 8006c64:	f7ff ff76 	bl	8006b54 <__multadd>
 8006c68:	e7ee      	b.n	8006c48 <__s2b+0x68>
 8006c6a:	bf00      	nop
 8006c6c:	0800a5b8 	.word	0x0800a5b8
 8006c70:	0800a644 	.word	0x0800a644

08006c74 <__hi0bits>:
 8006c74:	0c02      	lsrs	r2, r0, #16
 8006c76:	0412      	lsls	r2, r2, #16
 8006c78:	4603      	mov	r3, r0
 8006c7a:	b9ca      	cbnz	r2, 8006cb0 <__hi0bits+0x3c>
 8006c7c:	0403      	lsls	r3, r0, #16
 8006c7e:	2010      	movs	r0, #16
 8006c80:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006c84:	bf04      	itt	eq
 8006c86:	021b      	lsleq	r3, r3, #8
 8006c88:	3008      	addeq	r0, #8
 8006c8a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006c8e:	bf04      	itt	eq
 8006c90:	011b      	lsleq	r3, r3, #4
 8006c92:	3004      	addeq	r0, #4
 8006c94:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006c98:	bf04      	itt	eq
 8006c9a:	009b      	lsleq	r3, r3, #2
 8006c9c:	3002      	addeq	r0, #2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	db05      	blt.n	8006cae <__hi0bits+0x3a>
 8006ca2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006ca6:	f100 0001 	add.w	r0, r0, #1
 8006caa:	bf08      	it	eq
 8006cac:	2020      	moveq	r0, #32
 8006cae:	4770      	bx	lr
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	e7e5      	b.n	8006c80 <__hi0bits+0xc>

08006cb4 <__lo0bits>:
 8006cb4:	6803      	ldr	r3, [r0, #0]
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	f013 0007 	ands.w	r0, r3, #7
 8006cbc:	d00b      	beq.n	8006cd6 <__lo0bits+0x22>
 8006cbe:	07d9      	lsls	r1, r3, #31
 8006cc0:	d421      	bmi.n	8006d06 <__lo0bits+0x52>
 8006cc2:	0798      	lsls	r0, r3, #30
 8006cc4:	bf49      	itett	mi
 8006cc6:	085b      	lsrmi	r3, r3, #1
 8006cc8:	089b      	lsrpl	r3, r3, #2
 8006cca:	2001      	movmi	r0, #1
 8006ccc:	6013      	strmi	r3, [r2, #0]
 8006cce:	bf5c      	itt	pl
 8006cd0:	6013      	strpl	r3, [r2, #0]
 8006cd2:	2002      	movpl	r0, #2
 8006cd4:	4770      	bx	lr
 8006cd6:	b299      	uxth	r1, r3
 8006cd8:	b909      	cbnz	r1, 8006cde <__lo0bits+0x2a>
 8006cda:	0c1b      	lsrs	r3, r3, #16
 8006cdc:	2010      	movs	r0, #16
 8006cde:	b2d9      	uxtb	r1, r3
 8006ce0:	b909      	cbnz	r1, 8006ce6 <__lo0bits+0x32>
 8006ce2:	3008      	adds	r0, #8
 8006ce4:	0a1b      	lsrs	r3, r3, #8
 8006ce6:	0719      	lsls	r1, r3, #28
 8006ce8:	bf04      	itt	eq
 8006cea:	091b      	lsreq	r3, r3, #4
 8006cec:	3004      	addeq	r0, #4
 8006cee:	0799      	lsls	r1, r3, #30
 8006cf0:	bf04      	itt	eq
 8006cf2:	089b      	lsreq	r3, r3, #2
 8006cf4:	3002      	addeq	r0, #2
 8006cf6:	07d9      	lsls	r1, r3, #31
 8006cf8:	d403      	bmi.n	8006d02 <__lo0bits+0x4e>
 8006cfa:	085b      	lsrs	r3, r3, #1
 8006cfc:	f100 0001 	add.w	r0, r0, #1
 8006d00:	d003      	beq.n	8006d0a <__lo0bits+0x56>
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	4770      	bx	lr
 8006d06:	2000      	movs	r0, #0
 8006d08:	4770      	bx	lr
 8006d0a:	2020      	movs	r0, #32
 8006d0c:	4770      	bx	lr
	...

08006d10 <__i2b>:
 8006d10:	b510      	push	{r4, lr}
 8006d12:	460c      	mov	r4, r1
 8006d14:	2101      	movs	r1, #1
 8006d16:	f7ff febb 	bl	8006a90 <_Balloc>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	b928      	cbnz	r0, 8006d2a <__i2b+0x1a>
 8006d1e:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <__i2b+0x24>)
 8006d20:	4805      	ldr	r0, [pc, #20]	; (8006d38 <__i2b+0x28>)
 8006d22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006d26:	f001 fa09 	bl	800813c <__assert_func>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	6144      	str	r4, [r0, #20]
 8006d2e:	6103      	str	r3, [r0, #16]
 8006d30:	bd10      	pop	{r4, pc}
 8006d32:	bf00      	nop
 8006d34:	0800a5b8 	.word	0x0800a5b8
 8006d38:	0800a644 	.word	0x0800a644

08006d3c <__multiply>:
 8006d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d40:	4691      	mov	r9, r2
 8006d42:	690a      	ldr	r2, [r1, #16]
 8006d44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	bfb8      	it	lt
 8006d4c:	460b      	movlt	r3, r1
 8006d4e:	460c      	mov	r4, r1
 8006d50:	bfbc      	itt	lt
 8006d52:	464c      	movlt	r4, r9
 8006d54:	4699      	movlt	r9, r3
 8006d56:	6927      	ldr	r7, [r4, #16]
 8006d58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006d5c:	68a3      	ldr	r3, [r4, #8]
 8006d5e:	6861      	ldr	r1, [r4, #4]
 8006d60:	eb07 060a 	add.w	r6, r7, sl
 8006d64:	42b3      	cmp	r3, r6
 8006d66:	b085      	sub	sp, #20
 8006d68:	bfb8      	it	lt
 8006d6a:	3101      	addlt	r1, #1
 8006d6c:	f7ff fe90 	bl	8006a90 <_Balloc>
 8006d70:	b930      	cbnz	r0, 8006d80 <__multiply+0x44>
 8006d72:	4602      	mov	r2, r0
 8006d74:	4b43      	ldr	r3, [pc, #268]	; (8006e84 <__multiply+0x148>)
 8006d76:	4844      	ldr	r0, [pc, #272]	; (8006e88 <__multiply+0x14c>)
 8006d78:	f240 115d 	movw	r1, #349	; 0x15d
 8006d7c:	f001 f9de 	bl	800813c <__assert_func>
 8006d80:	f100 0514 	add.w	r5, r0, #20
 8006d84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006d88:	462b      	mov	r3, r5
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	4543      	cmp	r3, r8
 8006d8e:	d321      	bcc.n	8006dd4 <__multiply+0x98>
 8006d90:	f104 0314 	add.w	r3, r4, #20
 8006d94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006d98:	f109 0314 	add.w	r3, r9, #20
 8006d9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006da0:	9202      	str	r2, [sp, #8]
 8006da2:	1b3a      	subs	r2, r7, r4
 8006da4:	3a15      	subs	r2, #21
 8006da6:	f022 0203 	bic.w	r2, r2, #3
 8006daa:	3204      	adds	r2, #4
 8006dac:	f104 0115 	add.w	r1, r4, #21
 8006db0:	428f      	cmp	r7, r1
 8006db2:	bf38      	it	cc
 8006db4:	2204      	movcc	r2, #4
 8006db6:	9201      	str	r2, [sp, #4]
 8006db8:	9a02      	ldr	r2, [sp, #8]
 8006dba:	9303      	str	r3, [sp, #12]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d80c      	bhi.n	8006dda <__multiply+0x9e>
 8006dc0:	2e00      	cmp	r6, #0
 8006dc2:	dd03      	ble.n	8006dcc <__multiply+0x90>
 8006dc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d059      	beq.n	8006e80 <__multiply+0x144>
 8006dcc:	6106      	str	r6, [r0, #16]
 8006dce:	b005      	add	sp, #20
 8006dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd4:	f843 2b04 	str.w	r2, [r3], #4
 8006dd8:	e7d8      	b.n	8006d8c <__multiply+0x50>
 8006dda:	f8b3 a000 	ldrh.w	sl, [r3]
 8006dde:	f1ba 0f00 	cmp.w	sl, #0
 8006de2:	d023      	beq.n	8006e2c <__multiply+0xf0>
 8006de4:	f104 0e14 	add.w	lr, r4, #20
 8006de8:	46a9      	mov	r9, r5
 8006dea:	f04f 0c00 	mov.w	ip, #0
 8006dee:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006df2:	f8d9 1000 	ldr.w	r1, [r9]
 8006df6:	fa1f fb82 	uxth.w	fp, r2
 8006dfa:	b289      	uxth	r1, r1
 8006dfc:	fb0a 110b 	mla	r1, sl, fp, r1
 8006e00:	4461      	add	r1, ip
 8006e02:	f8d9 c000 	ldr.w	ip, [r9]
 8006e06:	0c12      	lsrs	r2, r2, #16
 8006e08:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006e0c:	fb0a c202 	mla	r2, sl, r2, ip
 8006e10:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006e14:	b289      	uxth	r1, r1
 8006e16:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006e1a:	4577      	cmp	r7, lr
 8006e1c:	f849 1b04 	str.w	r1, [r9], #4
 8006e20:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e24:	d8e3      	bhi.n	8006dee <__multiply+0xb2>
 8006e26:	9a01      	ldr	r2, [sp, #4]
 8006e28:	f845 c002 	str.w	ip, [r5, r2]
 8006e2c:	9a03      	ldr	r2, [sp, #12]
 8006e2e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006e32:	3304      	adds	r3, #4
 8006e34:	f1b9 0f00 	cmp.w	r9, #0
 8006e38:	d020      	beq.n	8006e7c <__multiply+0x140>
 8006e3a:	6829      	ldr	r1, [r5, #0]
 8006e3c:	f104 0c14 	add.w	ip, r4, #20
 8006e40:	46ae      	mov	lr, r5
 8006e42:	f04f 0a00 	mov.w	sl, #0
 8006e46:	f8bc b000 	ldrh.w	fp, [ip]
 8006e4a:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006e4e:	fb09 220b 	mla	r2, r9, fp, r2
 8006e52:	4492      	add	sl, r2
 8006e54:	b289      	uxth	r1, r1
 8006e56:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006e5a:	f84e 1b04 	str.w	r1, [lr], #4
 8006e5e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006e62:	f8be 1000 	ldrh.w	r1, [lr]
 8006e66:	0c12      	lsrs	r2, r2, #16
 8006e68:	fb09 1102 	mla	r1, r9, r2, r1
 8006e6c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006e70:	4567      	cmp	r7, ip
 8006e72:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006e76:	d8e6      	bhi.n	8006e46 <__multiply+0x10a>
 8006e78:	9a01      	ldr	r2, [sp, #4]
 8006e7a:	50a9      	str	r1, [r5, r2]
 8006e7c:	3504      	adds	r5, #4
 8006e7e:	e79b      	b.n	8006db8 <__multiply+0x7c>
 8006e80:	3e01      	subs	r6, #1
 8006e82:	e79d      	b.n	8006dc0 <__multiply+0x84>
 8006e84:	0800a5b8 	.word	0x0800a5b8
 8006e88:	0800a644 	.word	0x0800a644

08006e8c <__pow5mult>:
 8006e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e90:	4615      	mov	r5, r2
 8006e92:	f012 0203 	ands.w	r2, r2, #3
 8006e96:	4606      	mov	r6, r0
 8006e98:	460f      	mov	r7, r1
 8006e9a:	d007      	beq.n	8006eac <__pow5mult+0x20>
 8006e9c:	4c25      	ldr	r4, [pc, #148]	; (8006f34 <__pow5mult+0xa8>)
 8006e9e:	3a01      	subs	r2, #1
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ea6:	f7ff fe55 	bl	8006b54 <__multadd>
 8006eaa:	4607      	mov	r7, r0
 8006eac:	10ad      	asrs	r5, r5, #2
 8006eae:	d03d      	beq.n	8006f2c <__pow5mult+0xa0>
 8006eb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006eb2:	b97c      	cbnz	r4, 8006ed4 <__pow5mult+0x48>
 8006eb4:	2010      	movs	r0, #16
 8006eb6:	f7ff fdc3 	bl	8006a40 <malloc>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	6270      	str	r0, [r6, #36]	; 0x24
 8006ebe:	b928      	cbnz	r0, 8006ecc <__pow5mult+0x40>
 8006ec0:	4b1d      	ldr	r3, [pc, #116]	; (8006f38 <__pow5mult+0xac>)
 8006ec2:	481e      	ldr	r0, [pc, #120]	; (8006f3c <__pow5mult+0xb0>)
 8006ec4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006ec8:	f001 f938 	bl	800813c <__assert_func>
 8006ecc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ed0:	6004      	str	r4, [r0, #0]
 8006ed2:	60c4      	str	r4, [r0, #12]
 8006ed4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006ed8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006edc:	b94c      	cbnz	r4, 8006ef2 <__pow5mult+0x66>
 8006ede:	f240 2171 	movw	r1, #625	; 0x271
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	f7ff ff14 	bl	8006d10 <__i2b>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	f8c8 0008 	str.w	r0, [r8, #8]
 8006eee:	4604      	mov	r4, r0
 8006ef0:	6003      	str	r3, [r0, #0]
 8006ef2:	f04f 0900 	mov.w	r9, #0
 8006ef6:	07eb      	lsls	r3, r5, #31
 8006ef8:	d50a      	bpl.n	8006f10 <__pow5mult+0x84>
 8006efa:	4639      	mov	r1, r7
 8006efc:	4622      	mov	r2, r4
 8006efe:	4630      	mov	r0, r6
 8006f00:	f7ff ff1c 	bl	8006d3c <__multiply>
 8006f04:	4639      	mov	r1, r7
 8006f06:	4680      	mov	r8, r0
 8006f08:	4630      	mov	r0, r6
 8006f0a:	f7ff fe01 	bl	8006b10 <_Bfree>
 8006f0e:	4647      	mov	r7, r8
 8006f10:	106d      	asrs	r5, r5, #1
 8006f12:	d00b      	beq.n	8006f2c <__pow5mult+0xa0>
 8006f14:	6820      	ldr	r0, [r4, #0]
 8006f16:	b938      	cbnz	r0, 8006f28 <__pow5mult+0x9c>
 8006f18:	4622      	mov	r2, r4
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	f7ff ff0d 	bl	8006d3c <__multiply>
 8006f22:	6020      	str	r0, [r4, #0]
 8006f24:	f8c0 9000 	str.w	r9, [r0]
 8006f28:	4604      	mov	r4, r0
 8006f2a:	e7e4      	b.n	8006ef6 <__pow5mult+0x6a>
 8006f2c:	4638      	mov	r0, r7
 8006f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f32:	bf00      	nop
 8006f34:	0800a790 	.word	0x0800a790
 8006f38:	0800a546 	.word	0x0800a546
 8006f3c:	0800a644 	.word	0x0800a644

08006f40 <__lshift>:
 8006f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f44:	460c      	mov	r4, r1
 8006f46:	6849      	ldr	r1, [r1, #4]
 8006f48:	6923      	ldr	r3, [r4, #16]
 8006f4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f4e:	68a3      	ldr	r3, [r4, #8]
 8006f50:	4607      	mov	r7, r0
 8006f52:	4691      	mov	r9, r2
 8006f54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f58:	f108 0601 	add.w	r6, r8, #1
 8006f5c:	42b3      	cmp	r3, r6
 8006f5e:	db0b      	blt.n	8006f78 <__lshift+0x38>
 8006f60:	4638      	mov	r0, r7
 8006f62:	f7ff fd95 	bl	8006a90 <_Balloc>
 8006f66:	4605      	mov	r5, r0
 8006f68:	b948      	cbnz	r0, 8006f7e <__lshift+0x3e>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	4b2a      	ldr	r3, [pc, #168]	; (8007018 <__lshift+0xd8>)
 8006f6e:	482b      	ldr	r0, [pc, #172]	; (800701c <__lshift+0xdc>)
 8006f70:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006f74:	f001 f8e2 	bl	800813c <__assert_func>
 8006f78:	3101      	adds	r1, #1
 8006f7a:	005b      	lsls	r3, r3, #1
 8006f7c:	e7ee      	b.n	8006f5c <__lshift+0x1c>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	f100 0114 	add.w	r1, r0, #20
 8006f84:	f100 0210 	add.w	r2, r0, #16
 8006f88:	4618      	mov	r0, r3
 8006f8a:	4553      	cmp	r3, sl
 8006f8c:	db37      	blt.n	8006ffe <__lshift+0xbe>
 8006f8e:	6920      	ldr	r0, [r4, #16]
 8006f90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f94:	f104 0314 	add.w	r3, r4, #20
 8006f98:	f019 091f 	ands.w	r9, r9, #31
 8006f9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006fa0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006fa4:	d02f      	beq.n	8007006 <__lshift+0xc6>
 8006fa6:	f1c9 0e20 	rsb	lr, r9, #32
 8006faa:	468a      	mov	sl, r1
 8006fac:	f04f 0c00 	mov.w	ip, #0
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	fa02 f209 	lsl.w	r2, r2, r9
 8006fb6:	ea42 020c 	orr.w	r2, r2, ip
 8006fba:	f84a 2b04 	str.w	r2, [sl], #4
 8006fbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fc2:	4298      	cmp	r0, r3
 8006fc4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006fc8:	d8f2      	bhi.n	8006fb0 <__lshift+0x70>
 8006fca:	1b03      	subs	r3, r0, r4
 8006fcc:	3b15      	subs	r3, #21
 8006fce:	f023 0303 	bic.w	r3, r3, #3
 8006fd2:	3304      	adds	r3, #4
 8006fd4:	f104 0215 	add.w	r2, r4, #21
 8006fd8:	4290      	cmp	r0, r2
 8006fda:	bf38      	it	cc
 8006fdc:	2304      	movcc	r3, #4
 8006fde:	f841 c003 	str.w	ip, [r1, r3]
 8006fe2:	f1bc 0f00 	cmp.w	ip, #0
 8006fe6:	d001      	beq.n	8006fec <__lshift+0xac>
 8006fe8:	f108 0602 	add.w	r6, r8, #2
 8006fec:	3e01      	subs	r6, #1
 8006fee:	4638      	mov	r0, r7
 8006ff0:	612e      	str	r6, [r5, #16]
 8006ff2:	4621      	mov	r1, r4
 8006ff4:	f7ff fd8c 	bl	8006b10 <_Bfree>
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ffe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007002:	3301      	adds	r3, #1
 8007004:	e7c1      	b.n	8006f8a <__lshift+0x4a>
 8007006:	3904      	subs	r1, #4
 8007008:	f853 2b04 	ldr.w	r2, [r3], #4
 800700c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007010:	4298      	cmp	r0, r3
 8007012:	d8f9      	bhi.n	8007008 <__lshift+0xc8>
 8007014:	e7ea      	b.n	8006fec <__lshift+0xac>
 8007016:	bf00      	nop
 8007018:	0800a5b8 	.word	0x0800a5b8
 800701c:	0800a644 	.word	0x0800a644

08007020 <__mcmp>:
 8007020:	690a      	ldr	r2, [r1, #16]
 8007022:	4603      	mov	r3, r0
 8007024:	6900      	ldr	r0, [r0, #16]
 8007026:	1a80      	subs	r0, r0, r2
 8007028:	b530      	push	{r4, r5, lr}
 800702a:	d10d      	bne.n	8007048 <__mcmp+0x28>
 800702c:	3314      	adds	r3, #20
 800702e:	3114      	adds	r1, #20
 8007030:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007034:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007038:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800703c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007040:	4295      	cmp	r5, r2
 8007042:	d002      	beq.n	800704a <__mcmp+0x2a>
 8007044:	d304      	bcc.n	8007050 <__mcmp+0x30>
 8007046:	2001      	movs	r0, #1
 8007048:	bd30      	pop	{r4, r5, pc}
 800704a:	42a3      	cmp	r3, r4
 800704c:	d3f4      	bcc.n	8007038 <__mcmp+0x18>
 800704e:	e7fb      	b.n	8007048 <__mcmp+0x28>
 8007050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007054:	e7f8      	b.n	8007048 <__mcmp+0x28>
	...

08007058 <__mdiff>:
 8007058:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800705c:	460d      	mov	r5, r1
 800705e:	4607      	mov	r7, r0
 8007060:	4611      	mov	r1, r2
 8007062:	4628      	mov	r0, r5
 8007064:	4614      	mov	r4, r2
 8007066:	f7ff ffdb 	bl	8007020 <__mcmp>
 800706a:	1e06      	subs	r6, r0, #0
 800706c:	d111      	bne.n	8007092 <__mdiff+0x3a>
 800706e:	4631      	mov	r1, r6
 8007070:	4638      	mov	r0, r7
 8007072:	f7ff fd0d 	bl	8006a90 <_Balloc>
 8007076:	4602      	mov	r2, r0
 8007078:	b928      	cbnz	r0, 8007086 <__mdiff+0x2e>
 800707a:	4b39      	ldr	r3, [pc, #228]	; (8007160 <__mdiff+0x108>)
 800707c:	f240 2132 	movw	r1, #562	; 0x232
 8007080:	4838      	ldr	r0, [pc, #224]	; (8007164 <__mdiff+0x10c>)
 8007082:	f001 f85b 	bl	800813c <__assert_func>
 8007086:	2301      	movs	r3, #1
 8007088:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800708c:	4610      	mov	r0, r2
 800708e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007092:	bfa4      	itt	ge
 8007094:	4623      	movge	r3, r4
 8007096:	462c      	movge	r4, r5
 8007098:	4638      	mov	r0, r7
 800709a:	6861      	ldr	r1, [r4, #4]
 800709c:	bfa6      	itte	ge
 800709e:	461d      	movge	r5, r3
 80070a0:	2600      	movge	r6, #0
 80070a2:	2601      	movlt	r6, #1
 80070a4:	f7ff fcf4 	bl	8006a90 <_Balloc>
 80070a8:	4602      	mov	r2, r0
 80070aa:	b918      	cbnz	r0, 80070b4 <__mdiff+0x5c>
 80070ac:	4b2c      	ldr	r3, [pc, #176]	; (8007160 <__mdiff+0x108>)
 80070ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 80070b2:	e7e5      	b.n	8007080 <__mdiff+0x28>
 80070b4:	6927      	ldr	r7, [r4, #16]
 80070b6:	60c6      	str	r6, [r0, #12]
 80070b8:	692e      	ldr	r6, [r5, #16]
 80070ba:	f104 0014 	add.w	r0, r4, #20
 80070be:	f105 0914 	add.w	r9, r5, #20
 80070c2:	f102 0e14 	add.w	lr, r2, #20
 80070c6:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 80070ca:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80070ce:	3410      	adds	r4, #16
 80070d0:	46f2      	mov	sl, lr
 80070d2:	2100      	movs	r1, #0
 80070d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80070d8:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80070dc:	fa1f f883 	uxth.w	r8, r3
 80070e0:	fa11 f18b 	uxtah	r1, r1, fp
 80070e4:	0c1b      	lsrs	r3, r3, #16
 80070e6:	eba1 0808 	sub.w	r8, r1, r8
 80070ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80070ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80070f2:	fa1f f888 	uxth.w	r8, r8
 80070f6:	1419      	asrs	r1, r3, #16
 80070f8:	454e      	cmp	r6, r9
 80070fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80070fe:	f84a 3b04 	str.w	r3, [sl], #4
 8007102:	d8e7      	bhi.n	80070d4 <__mdiff+0x7c>
 8007104:	1b73      	subs	r3, r6, r5
 8007106:	3b15      	subs	r3, #21
 8007108:	f023 0303 	bic.w	r3, r3, #3
 800710c:	3304      	adds	r3, #4
 800710e:	3515      	adds	r5, #21
 8007110:	42ae      	cmp	r6, r5
 8007112:	bf38      	it	cc
 8007114:	2304      	movcc	r3, #4
 8007116:	4418      	add	r0, r3
 8007118:	4473      	add	r3, lr
 800711a:	469e      	mov	lr, r3
 800711c:	4606      	mov	r6, r0
 800711e:	4566      	cmp	r6, ip
 8007120:	d30e      	bcc.n	8007140 <__mdiff+0xe8>
 8007122:	f10c 0103 	add.w	r1, ip, #3
 8007126:	1a09      	subs	r1, r1, r0
 8007128:	f021 0103 	bic.w	r1, r1, #3
 800712c:	3803      	subs	r0, #3
 800712e:	4584      	cmp	ip, r0
 8007130:	bf38      	it	cc
 8007132:	2100      	movcc	r1, #0
 8007134:	4419      	add	r1, r3
 8007136:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800713a:	b17b      	cbz	r3, 800715c <__mdiff+0x104>
 800713c:	6117      	str	r7, [r2, #16]
 800713e:	e7a5      	b.n	800708c <__mdiff+0x34>
 8007140:	f856 8b04 	ldr.w	r8, [r6], #4
 8007144:	fa11 f488 	uxtah	r4, r1, r8
 8007148:	1425      	asrs	r5, r4, #16
 800714a:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800714e:	b2a4      	uxth	r4, r4
 8007150:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8007154:	f84e 4b04 	str.w	r4, [lr], #4
 8007158:	1429      	asrs	r1, r5, #16
 800715a:	e7e0      	b.n	800711e <__mdiff+0xc6>
 800715c:	3f01      	subs	r7, #1
 800715e:	e7ea      	b.n	8007136 <__mdiff+0xde>
 8007160:	0800a5b8 	.word	0x0800a5b8
 8007164:	0800a644 	.word	0x0800a644

08007168 <__ulp>:
 8007168:	4b11      	ldr	r3, [pc, #68]	; (80071b0 <__ulp+0x48>)
 800716a:	400b      	ands	r3, r1
 800716c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007170:	2b00      	cmp	r3, #0
 8007172:	dd02      	ble.n	800717a <__ulp+0x12>
 8007174:	2000      	movs	r0, #0
 8007176:	4619      	mov	r1, r3
 8007178:	4770      	bx	lr
 800717a:	425b      	negs	r3, r3
 800717c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007180:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007184:	f04f 0000 	mov.w	r0, #0
 8007188:	f04f 0100 	mov.w	r1, #0
 800718c:	da04      	bge.n	8007198 <__ulp+0x30>
 800718e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007192:	fa43 f102 	asr.w	r1, r3, r2
 8007196:	4770      	bx	lr
 8007198:	f1a2 0314 	sub.w	r3, r2, #20
 800719c:	2b1e      	cmp	r3, #30
 800719e:	bfda      	itte	le
 80071a0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80071a4:	fa22 f303 	lsrle.w	r3, r2, r3
 80071a8:	2301      	movgt	r3, #1
 80071aa:	4618      	mov	r0, r3
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	7ff00000 	.word	0x7ff00000

080071b4 <__b2d>:
 80071b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071b8:	6907      	ldr	r7, [r0, #16]
 80071ba:	f100 0914 	add.w	r9, r0, #20
 80071be:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80071c2:	f1a7 0804 	sub.w	r8, r7, #4
 80071c6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80071ca:	4630      	mov	r0, r6
 80071cc:	f7ff fd52 	bl	8006c74 <__hi0bits>
 80071d0:	f1c0 0320 	rsb	r3, r0, #32
 80071d4:	280a      	cmp	r0, #10
 80071d6:	600b      	str	r3, [r1, #0]
 80071d8:	491f      	ldr	r1, [pc, #124]	; (8007258 <__b2d+0xa4>)
 80071da:	dc17      	bgt.n	800720c <__b2d+0x58>
 80071dc:	f1c0 0c0b 	rsb	ip, r0, #11
 80071e0:	45c1      	cmp	r9, r8
 80071e2:	fa26 f30c 	lsr.w	r3, r6, ip
 80071e6:	bf38      	it	cc
 80071e8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80071ec:	ea43 0501 	orr.w	r5, r3, r1
 80071f0:	bf28      	it	cs
 80071f2:	2200      	movcs	r2, #0
 80071f4:	f100 0315 	add.w	r3, r0, #21
 80071f8:	fa06 f303 	lsl.w	r3, r6, r3
 80071fc:	fa22 f20c 	lsr.w	r2, r2, ip
 8007200:	ea43 0402 	orr.w	r4, r3, r2
 8007204:	4620      	mov	r0, r4
 8007206:	4629      	mov	r1, r5
 8007208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800720c:	45c1      	cmp	r9, r8
 800720e:	bf3a      	itte	cc
 8007210:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007214:	f1a7 0808 	subcc.w	r8, r7, #8
 8007218:	2200      	movcs	r2, #0
 800721a:	f1b0 030b 	subs.w	r3, r0, #11
 800721e:	d016      	beq.n	800724e <__b2d+0x9a>
 8007220:	f1c3 0720 	rsb	r7, r3, #32
 8007224:	fa22 f107 	lsr.w	r1, r2, r7
 8007228:	45c8      	cmp	r8, r9
 800722a:	fa06 f603 	lsl.w	r6, r6, r3
 800722e:	ea46 0601 	orr.w	r6, r6, r1
 8007232:	bf8c      	ite	hi
 8007234:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007238:	2100      	movls	r1, #0
 800723a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800723e:	fa02 f003 	lsl.w	r0, r2, r3
 8007242:	40f9      	lsrs	r1, r7
 8007244:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007248:	ea40 0401 	orr.w	r4, r0, r1
 800724c:	e7da      	b.n	8007204 <__b2d+0x50>
 800724e:	ea46 0501 	orr.w	r5, r6, r1
 8007252:	4614      	mov	r4, r2
 8007254:	e7d6      	b.n	8007204 <__b2d+0x50>
 8007256:	bf00      	nop
 8007258:	3ff00000 	.word	0x3ff00000

0800725c <__d2b>:
 800725c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007260:	2101      	movs	r1, #1
 8007262:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007266:	4690      	mov	r8, r2
 8007268:	461d      	mov	r5, r3
 800726a:	f7ff fc11 	bl	8006a90 <_Balloc>
 800726e:	4604      	mov	r4, r0
 8007270:	b930      	cbnz	r0, 8007280 <__d2b+0x24>
 8007272:	4602      	mov	r2, r0
 8007274:	4b25      	ldr	r3, [pc, #148]	; (800730c <__d2b+0xb0>)
 8007276:	4826      	ldr	r0, [pc, #152]	; (8007310 <__d2b+0xb4>)
 8007278:	f240 310a 	movw	r1, #778	; 0x30a
 800727c:	f000 ff5e 	bl	800813c <__assert_func>
 8007280:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007284:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007288:	bb2d      	cbnz	r5, 80072d6 <__d2b+0x7a>
 800728a:	9301      	str	r3, [sp, #4]
 800728c:	f1b8 0300 	subs.w	r3, r8, #0
 8007290:	d026      	beq.n	80072e0 <__d2b+0x84>
 8007292:	4668      	mov	r0, sp
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	f7ff fd0d 	bl	8006cb4 <__lo0bits>
 800729a:	9900      	ldr	r1, [sp, #0]
 800729c:	b1f0      	cbz	r0, 80072dc <__d2b+0x80>
 800729e:	9a01      	ldr	r2, [sp, #4]
 80072a0:	f1c0 0320 	rsb	r3, r0, #32
 80072a4:	fa02 f303 	lsl.w	r3, r2, r3
 80072a8:	430b      	orrs	r3, r1
 80072aa:	40c2      	lsrs	r2, r0
 80072ac:	6163      	str	r3, [r4, #20]
 80072ae:	9201      	str	r2, [sp, #4]
 80072b0:	9b01      	ldr	r3, [sp, #4]
 80072b2:	61a3      	str	r3, [r4, #24]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	bf14      	ite	ne
 80072b8:	2102      	movne	r1, #2
 80072ba:	2101      	moveq	r1, #1
 80072bc:	6121      	str	r1, [r4, #16]
 80072be:	b1c5      	cbz	r5, 80072f2 <__d2b+0x96>
 80072c0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80072c4:	4405      	add	r5, r0
 80072c6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80072ca:	603d      	str	r5, [r7, #0]
 80072cc:	6030      	str	r0, [r6, #0]
 80072ce:	4620      	mov	r0, r4
 80072d0:	b002      	add	sp, #8
 80072d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072da:	e7d6      	b.n	800728a <__d2b+0x2e>
 80072dc:	6161      	str	r1, [r4, #20]
 80072de:	e7e7      	b.n	80072b0 <__d2b+0x54>
 80072e0:	a801      	add	r0, sp, #4
 80072e2:	f7ff fce7 	bl	8006cb4 <__lo0bits>
 80072e6:	9b01      	ldr	r3, [sp, #4]
 80072e8:	6163      	str	r3, [r4, #20]
 80072ea:	2101      	movs	r1, #1
 80072ec:	6121      	str	r1, [r4, #16]
 80072ee:	3020      	adds	r0, #32
 80072f0:	e7e5      	b.n	80072be <__d2b+0x62>
 80072f2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80072f6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80072fa:	6038      	str	r0, [r7, #0]
 80072fc:	6918      	ldr	r0, [r3, #16]
 80072fe:	f7ff fcb9 	bl	8006c74 <__hi0bits>
 8007302:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007306:	6031      	str	r1, [r6, #0]
 8007308:	e7e1      	b.n	80072ce <__d2b+0x72>
 800730a:	bf00      	nop
 800730c:	0800a5b8 	.word	0x0800a5b8
 8007310:	0800a644 	.word	0x0800a644

08007314 <__ratio>:
 8007314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007318:	4688      	mov	r8, r1
 800731a:	4669      	mov	r1, sp
 800731c:	4681      	mov	r9, r0
 800731e:	f7ff ff49 	bl	80071b4 <__b2d>
 8007322:	460f      	mov	r7, r1
 8007324:	4604      	mov	r4, r0
 8007326:	460d      	mov	r5, r1
 8007328:	4640      	mov	r0, r8
 800732a:	a901      	add	r1, sp, #4
 800732c:	f7ff ff42 	bl	80071b4 <__b2d>
 8007330:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007334:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007338:	eba3 0c02 	sub.w	ip, r3, r2
 800733c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007340:	1a9b      	subs	r3, r3, r2
 8007342:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007346:	2b00      	cmp	r3, #0
 8007348:	bfd5      	itete	le
 800734a:	460a      	movle	r2, r1
 800734c:	462a      	movgt	r2, r5
 800734e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007352:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007356:	468b      	mov	fp, r1
 8007358:	bfd8      	it	le
 800735a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800735e:	465b      	mov	r3, fp
 8007360:	4602      	mov	r2, r0
 8007362:	4639      	mov	r1, r7
 8007364:	4620      	mov	r0, r4
 8007366:	f7f9 fa89 	bl	800087c <__aeabi_ddiv>
 800736a:	b003      	add	sp, #12
 800736c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007370 <__copybits>:
 8007370:	3901      	subs	r1, #1
 8007372:	b570      	push	{r4, r5, r6, lr}
 8007374:	1149      	asrs	r1, r1, #5
 8007376:	6914      	ldr	r4, [r2, #16]
 8007378:	3101      	adds	r1, #1
 800737a:	f102 0314 	add.w	r3, r2, #20
 800737e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007382:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007386:	1f05      	subs	r5, r0, #4
 8007388:	42a3      	cmp	r3, r4
 800738a:	d30c      	bcc.n	80073a6 <__copybits+0x36>
 800738c:	1aa3      	subs	r3, r4, r2
 800738e:	3b11      	subs	r3, #17
 8007390:	f023 0303 	bic.w	r3, r3, #3
 8007394:	3211      	adds	r2, #17
 8007396:	42a2      	cmp	r2, r4
 8007398:	bf88      	it	hi
 800739a:	2300      	movhi	r3, #0
 800739c:	4418      	add	r0, r3
 800739e:	2300      	movs	r3, #0
 80073a0:	4288      	cmp	r0, r1
 80073a2:	d305      	bcc.n	80073b0 <__copybits+0x40>
 80073a4:	bd70      	pop	{r4, r5, r6, pc}
 80073a6:	f853 6b04 	ldr.w	r6, [r3], #4
 80073aa:	f845 6f04 	str.w	r6, [r5, #4]!
 80073ae:	e7eb      	b.n	8007388 <__copybits+0x18>
 80073b0:	f840 3b04 	str.w	r3, [r0], #4
 80073b4:	e7f4      	b.n	80073a0 <__copybits+0x30>

080073b6 <__any_on>:
 80073b6:	f100 0214 	add.w	r2, r0, #20
 80073ba:	6900      	ldr	r0, [r0, #16]
 80073bc:	114b      	asrs	r3, r1, #5
 80073be:	4298      	cmp	r0, r3
 80073c0:	b510      	push	{r4, lr}
 80073c2:	db11      	blt.n	80073e8 <__any_on+0x32>
 80073c4:	dd0a      	ble.n	80073dc <__any_on+0x26>
 80073c6:	f011 011f 	ands.w	r1, r1, #31
 80073ca:	d007      	beq.n	80073dc <__any_on+0x26>
 80073cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80073d0:	fa24 f001 	lsr.w	r0, r4, r1
 80073d4:	fa00 f101 	lsl.w	r1, r0, r1
 80073d8:	428c      	cmp	r4, r1
 80073da:	d10b      	bne.n	80073f4 <__any_on+0x3e>
 80073dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d803      	bhi.n	80073ec <__any_on+0x36>
 80073e4:	2000      	movs	r0, #0
 80073e6:	bd10      	pop	{r4, pc}
 80073e8:	4603      	mov	r3, r0
 80073ea:	e7f7      	b.n	80073dc <__any_on+0x26>
 80073ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80073f0:	2900      	cmp	r1, #0
 80073f2:	d0f5      	beq.n	80073e0 <__any_on+0x2a>
 80073f4:	2001      	movs	r0, #1
 80073f6:	e7f6      	b.n	80073e6 <__any_on+0x30>

080073f8 <_calloc_r>:
 80073f8:	b570      	push	{r4, r5, r6, lr}
 80073fa:	fba1 5402 	umull	r5, r4, r1, r2
 80073fe:	b934      	cbnz	r4, 800740e <_calloc_r+0x16>
 8007400:	4629      	mov	r1, r5
 8007402:	f000 f877 	bl	80074f4 <_malloc_r>
 8007406:	4606      	mov	r6, r0
 8007408:	b928      	cbnz	r0, 8007416 <_calloc_r+0x1e>
 800740a:	4630      	mov	r0, r6
 800740c:	bd70      	pop	{r4, r5, r6, pc}
 800740e:	220c      	movs	r2, #12
 8007410:	6002      	str	r2, [r0, #0]
 8007412:	2600      	movs	r6, #0
 8007414:	e7f9      	b.n	800740a <_calloc_r+0x12>
 8007416:	462a      	mov	r2, r5
 8007418:	4621      	mov	r1, r4
 800741a:	f7fc fb65 	bl	8003ae8 <memset>
 800741e:	e7f4      	b.n	800740a <_calloc_r+0x12>

08007420 <_free_r>:
 8007420:	b538      	push	{r3, r4, r5, lr}
 8007422:	4605      	mov	r5, r0
 8007424:	2900      	cmp	r1, #0
 8007426:	d041      	beq.n	80074ac <_free_r+0x8c>
 8007428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800742c:	1f0c      	subs	r4, r1, #4
 800742e:	2b00      	cmp	r3, #0
 8007430:	bfb8      	it	lt
 8007432:	18e4      	addlt	r4, r4, r3
 8007434:	f001 f882 	bl	800853c <__malloc_lock>
 8007438:	4a1d      	ldr	r2, [pc, #116]	; (80074b0 <_free_r+0x90>)
 800743a:	6813      	ldr	r3, [r2, #0]
 800743c:	b933      	cbnz	r3, 800744c <_free_r+0x2c>
 800743e:	6063      	str	r3, [r4, #4]
 8007440:	6014      	str	r4, [r2, #0]
 8007442:	4628      	mov	r0, r5
 8007444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007448:	f001 b87e 	b.w	8008548 <__malloc_unlock>
 800744c:	42a3      	cmp	r3, r4
 800744e:	d908      	bls.n	8007462 <_free_r+0x42>
 8007450:	6820      	ldr	r0, [r4, #0]
 8007452:	1821      	adds	r1, r4, r0
 8007454:	428b      	cmp	r3, r1
 8007456:	bf01      	itttt	eq
 8007458:	6819      	ldreq	r1, [r3, #0]
 800745a:	685b      	ldreq	r3, [r3, #4]
 800745c:	1809      	addeq	r1, r1, r0
 800745e:	6021      	streq	r1, [r4, #0]
 8007460:	e7ed      	b.n	800743e <_free_r+0x1e>
 8007462:	461a      	mov	r2, r3
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	b10b      	cbz	r3, 800746c <_free_r+0x4c>
 8007468:	42a3      	cmp	r3, r4
 800746a:	d9fa      	bls.n	8007462 <_free_r+0x42>
 800746c:	6811      	ldr	r1, [r2, #0]
 800746e:	1850      	adds	r0, r2, r1
 8007470:	42a0      	cmp	r0, r4
 8007472:	d10b      	bne.n	800748c <_free_r+0x6c>
 8007474:	6820      	ldr	r0, [r4, #0]
 8007476:	4401      	add	r1, r0
 8007478:	1850      	adds	r0, r2, r1
 800747a:	4283      	cmp	r3, r0
 800747c:	6011      	str	r1, [r2, #0]
 800747e:	d1e0      	bne.n	8007442 <_free_r+0x22>
 8007480:	6818      	ldr	r0, [r3, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	6053      	str	r3, [r2, #4]
 8007486:	4401      	add	r1, r0
 8007488:	6011      	str	r1, [r2, #0]
 800748a:	e7da      	b.n	8007442 <_free_r+0x22>
 800748c:	d902      	bls.n	8007494 <_free_r+0x74>
 800748e:	230c      	movs	r3, #12
 8007490:	602b      	str	r3, [r5, #0]
 8007492:	e7d6      	b.n	8007442 <_free_r+0x22>
 8007494:	6820      	ldr	r0, [r4, #0]
 8007496:	1821      	adds	r1, r4, r0
 8007498:	428b      	cmp	r3, r1
 800749a:	bf04      	itt	eq
 800749c:	6819      	ldreq	r1, [r3, #0]
 800749e:	685b      	ldreq	r3, [r3, #4]
 80074a0:	6063      	str	r3, [r4, #4]
 80074a2:	bf04      	itt	eq
 80074a4:	1809      	addeq	r1, r1, r0
 80074a6:	6021      	streq	r1, [r4, #0]
 80074a8:	6054      	str	r4, [r2, #4]
 80074aa:	e7ca      	b.n	8007442 <_free_r+0x22>
 80074ac:	bd38      	pop	{r3, r4, r5, pc}
 80074ae:	bf00      	nop
 80074b0:	200038e4 	.word	0x200038e4

080074b4 <sbrk_aligned>:
 80074b4:	b570      	push	{r4, r5, r6, lr}
 80074b6:	4e0e      	ldr	r6, [pc, #56]	; (80074f0 <sbrk_aligned+0x3c>)
 80074b8:	460c      	mov	r4, r1
 80074ba:	6831      	ldr	r1, [r6, #0]
 80074bc:	4605      	mov	r5, r0
 80074be:	b911      	cbnz	r1, 80074c6 <sbrk_aligned+0x12>
 80074c0:	f000 fd24 	bl	8007f0c <_sbrk_r>
 80074c4:	6030      	str	r0, [r6, #0]
 80074c6:	4621      	mov	r1, r4
 80074c8:	4628      	mov	r0, r5
 80074ca:	f000 fd1f 	bl	8007f0c <_sbrk_r>
 80074ce:	1c43      	adds	r3, r0, #1
 80074d0:	d00a      	beq.n	80074e8 <sbrk_aligned+0x34>
 80074d2:	1cc4      	adds	r4, r0, #3
 80074d4:	f024 0403 	bic.w	r4, r4, #3
 80074d8:	42a0      	cmp	r0, r4
 80074da:	d007      	beq.n	80074ec <sbrk_aligned+0x38>
 80074dc:	1a21      	subs	r1, r4, r0
 80074de:	4628      	mov	r0, r5
 80074e0:	f000 fd14 	bl	8007f0c <_sbrk_r>
 80074e4:	3001      	adds	r0, #1
 80074e6:	d101      	bne.n	80074ec <sbrk_aligned+0x38>
 80074e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80074ec:	4620      	mov	r0, r4
 80074ee:	bd70      	pop	{r4, r5, r6, pc}
 80074f0:	200038e8 	.word	0x200038e8

080074f4 <_malloc_r>:
 80074f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074f8:	1ccd      	adds	r5, r1, #3
 80074fa:	f025 0503 	bic.w	r5, r5, #3
 80074fe:	3508      	adds	r5, #8
 8007500:	2d0c      	cmp	r5, #12
 8007502:	bf38      	it	cc
 8007504:	250c      	movcc	r5, #12
 8007506:	2d00      	cmp	r5, #0
 8007508:	4607      	mov	r7, r0
 800750a:	db01      	blt.n	8007510 <_malloc_r+0x1c>
 800750c:	42a9      	cmp	r1, r5
 800750e:	d905      	bls.n	800751c <_malloc_r+0x28>
 8007510:	230c      	movs	r3, #12
 8007512:	603b      	str	r3, [r7, #0]
 8007514:	2600      	movs	r6, #0
 8007516:	4630      	mov	r0, r6
 8007518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800751c:	4e2e      	ldr	r6, [pc, #184]	; (80075d8 <_malloc_r+0xe4>)
 800751e:	f001 f80d 	bl	800853c <__malloc_lock>
 8007522:	6833      	ldr	r3, [r6, #0]
 8007524:	461c      	mov	r4, r3
 8007526:	bb34      	cbnz	r4, 8007576 <_malloc_r+0x82>
 8007528:	4629      	mov	r1, r5
 800752a:	4638      	mov	r0, r7
 800752c:	f7ff ffc2 	bl	80074b4 <sbrk_aligned>
 8007530:	1c43      	adds	r3, r0, #1
 8007532:	4604      	mov	r4, r0
 8007534:	d14d      	bne.n	80075d2 <_malloc_r+0xde>
 8007536:	6834      	ldr	r4, [r6, #0]
 8007538:	4626      	mov	r6, r4
 800753a:	2e00      	cmp	r6, #0
 800753c:	d140      	bne.n	80075c0 <_malloc_r+0xcc>
 800753e:	6823      	ldr	r3, [r4, #0]
 8007540:	4631      	mov	r1, r6
 8007542:	4638      	mov	r0, r7
 8007544:	eb04 0803 	add.w	r8, r4, r3
 8007548:	f000 fce0 	bl	8007f0c <_sbrk_r>
 800754c:	4580      	cmp	r8, r0
 800754e:	d13a      	bne.n	80075c6 <_malloc_r+0xd2>
 8007550:	6821      	ldr	r1, [r4, #0]
 8007552:	3503      	adds	r5, #3
 8007554:	1a6d      	subs	r5, r5, r1
 8007556:	f025 0503 	bic.w	r5, r5, #3
 800755a:	3508      	adds	r5, #8
 800755c:	2d0c      	cmp	r5, #12
 800755e:	bf38      	it	cc
 8007560:	250c      	movcc	r5, #12
 8007562:	4629      	mov	r1, r5
 8007564:	4638      	mov	r0, r7
 8007566:	f7ff ffa5 	bl	80074b4 <sbrk_aligned>
 800756a:	3001      	adds	r0, #1
 800756c:	d02b      	beq.n	80075c6 <_malloc_r+0xd2>
 800756e:	6823      	ldr	r3, [r4, #0]
 8007570:	442b      	add	r3, r5
 8007572:	6023      	str	r3, [r4, #0]
 8007574:	e00e      	b.n	8007594 <_malloc_r+0xa0>
 8007576:	6822      	ldr	r2, [r4, #0]
 8007578:	1b52      	subs	r2, r2, r5
 800757a:	d41e      	bmi.n	80075ba <_malloc_r+0xc6>
 800757c:	2a0b      	cmp	r2, #11
 800757e:	d916      	bls.n	80075ae <_malloc_r+0xba>
 8007580:	1961      	adds	r1, r4, r5
 8007582:	42a3      	cmp	r3, r4
 8007584:	6025      	str	r5, [r4, #0]
 8007586:	bf18      	it	ne
 8007588:	6059      	strne	r1, [r3, #4]
 800758a:	6863      	ldr	r3, [r4, #4]
 800758c:	bf08      	it	eq
 800758e:	6031      	streq	r1, [r6, #0]
 8007590:	5162      	str	r2, [r4, r5]
 8007592:	604b      	str	r3, [r1, #4]
 8007594:	4638      	mov	r0, r7
 8007596:	f104 060b 	add.w	r6, r4, #11
 800759a:	f000 ffd5 	bl	8008548 <__malloc_unlock>
 800759e:	f026 0607 	bic.w	r6, r6, #7
 80075a2:	1d23      	adds	r3, r4, #4
 80075a4:	1af2      	subs	r2, r6, r3
 80075a6:	d0b6      	beq.n	8007516 <_malloc_r+0x22>
 80075a8:	1b9b      	subs	r3, r3, r6
 80075aa:	50a3      	str	r3, [r4, r2]
 80075ac:	e7b3      	b.n	8007516 <_malloc_r+0x22>
 80075ae:	6862      	ldr	r2, [r4, #4]
 80075b0:	42a3      	cmp	r3, r4
 80075b2:	bf0c      	ite	eq
 80075b4:	6032      	streq	r2, [r6, #0]
 80075b6:	605a      	strne	r2, [r3, #4]
 80075b8:	e7ec      	b.n	8007594 <_malloc_r+0xa0>
 80075ba:	4623      	mov	r3, r4
 80075bc:	6864      	ldr	r4, [r4, #4]
 80075be:	e7b2      	b.n	8007526 <_malloc_r+0x32>
 80075c0:	4634      	mov	r4, r6
 80075c2:	6876      	ldr	r6, [r6, #4]
 80075c4:	e7b9      	b.n	800753a <_malloc_r+0x46>
 80075c6:	230c      	movs	r3, #12
 80075c8:	603b      	str	r3, [r7, #0]
 80075ca:	4638      	mov	r0, r7
 80075cc:	f000 ffbc 	bl	8008548 <__malloc_unlock>
 80075d0:	e7a1      	b.n	8007516 <_malloc_r+0x22>
 80075d2:	6025      	str	r5, [r4, #0]
 80075d4:	e7de      	b.n	8007594 <_malloc_r+0xa0>
 80075d6:	bf00      	nop
 80075d8:	200038e4 	.word	0x200038e4

080075dc <__ssputs_r>:
 80075dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e0:	688e      	ldr	r6, [r1, #8]
 80075e2:	429e      	cmp	r6, r3
 80075e4:	4682      	mov	sl, r0
 80075e6:	460c      	mov	r4, r1
 80075e8:	4690      	mov	r8, r2
 80075ea:	461f      	mov	r7, r3
 80075ec:	d838      	bhi.n	8007660 <__ssputs_r+0x84>
 80075ee:	898a      	ldrh	r2, [r1, #12]
 80075f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80075f4:	d032      	beq.n	800765c <__ssputs_r+0x80>
 80075f6:	6825      	ldr	r5, [r4, #0]
 80075f8:	6909      	ldr	r1, [r1, #16]
 80075fa:	eba5 0901 	sub.w	r9, r5, r1
 80075fe:	6965      	ldr	r5, [r4, #20]
 8007600:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007604:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007608:	3301      	adds	r3, #1
 800760a:	444b      	add	r3, r9
 800760c:	106d      	asrs	r5, r5, #1
 800760e:	429d      	cmp	r5, r3
 8007610:	bf38      	it	cc
 8007612:	461d      	movcc	r5, r3
 8007614:	0553      	lsls	r3, r2, #21
 8007616:	d531      	bpl.n	800767c <__ssputs_r+0xa0>
 8007618:	4629      	mov	r1, r5
 800761a:	f7ff ff6b 	bl	80074f4 <_malloc_r>
 800761e:	4606      	mov	r6, r0
 8007620:	b950      	cbnz	r0, 8007638 <__ssputs_r+0x5c>
 8007622:	230c      	movs	r3, #12
 8007624:	f8ca 3000 	str.w	r3, [sl]
 8007628:	89a3      	ldrh	r3, [r4, #12]
 800762a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800762e:	81a3      	strh	r3, [r4, #12]
 8007630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007638:	6921      	ldr	r1, [r4, #16]
 800763a:	464a      	mov	r2, r9
 800763c:	f7ff fa1a 	bl	8006a74 <memcpy>
 8007640:	89a3      	ldrh	r3, [r4, #12]
 8007642:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800764a:	81a3      	strh	r3, [r4, #12]
 800764c:	6126      	str	r6, [r4, #16]
 800764e:	6165      	str	r5, [r4, #20]
 8007650:	444e      	add	r6, r9
 8007652:	eba5 0509 	sub.w	r5, r5, r9
 8007656:	6026      	str	r6, [r4, #0]
 8007658:	60a5      	str	r5, [r4, #8]
 800765a:	463e      	mov	r6, r7
 800765c:	42be      	cmp	r6, r7
 800765e:	d900      	bls.n	8007662 <__ssputs_r+0x86>
 8007660:	463e      	mov	r6, r7
 8007662:	6820      	ldr	r0, [r4, #0]
 8007664:	4632      	mov	r2, r6
 8007666:	4641      	mov	r1, r8
 8007668:	f000 ff4e 	bl	8008508 <memmove>
 800766c:	68a3      	ldr	r3, [r4, #8]
 800766e:	1b9b      	subs	r3, r3, r6
 8007670:	60a3      	str	r3, [r4, #8]
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	4433      	add	r3, r6
 8007676:	6023      	str	r3, [r4, #0]
 8007678:	2000      	movs	r0, #0
 800767a:	e7db      	b.n	8007634 <__ssputs_r+0x58>
 800767c:	462a      	mov	r2, r5
 800767e:	f000 ff69 	bl	8008554 <_realloc_r>
 8007682:	4606      	mov	r6, r0
 8007684:	2800      	cmp	r0, #0
 8007686:	d1e1      	bne.n	800764c <__ssputs_r+0x70>
 8007688:	6921      	ldr	r1, [r4, #16]
 800768a:	4650      	mov	r0, sl
 800768c:	f7ff fec8 	bl	8007420 <_free_r>
 8007690:	e7c7      	b.n	8007622 <__ssputs_r+0x46>
	...

08007694 <_svfiprintf_r>:
 8007694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007698:	4698      	mov	r8, r3
 800769a:	898b      	ldrh	r3, [r1, #12]
 800769c:	061b      	lsls	r3, r3, #24
 800769e:	b09d      	sub	sp, #116	; 0x74
 80076a0:	4607      	mov	r7, r0
 80076a2:	460d      	mov	r5, r1
 80076a4:	4614      	mov	r4, r2
 80076a6:	d50e      	bpl.n	80076c6 <_svfiprintf_r+0x32>
 80076a8:	690b      	ldr	r3, [r1, #16]
 80076aa:	b963      	cbnz	r3, 80076c6 <_svfiprintf_r+0x32>
 80076ac:	2140      	movs	r1, #64	; 0x40
 80076ae:	f7ff ff21 	bl	80074f4 <_malloc_r>
 80076b2:	6028      	str	r0, [r5, #0]
 80076b4:	6128      	str	r0, [r5, #16]
 80076b6:	b920      	cbnz	r0, 80076c2 <_svfiprintf_r+0x2e>
 80076b8:	230c      	movs	r3, #12
 80076ba:	603b      	str	r3, [r7, #0]
 80076bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076c0:	e0d1      	b.n	8007866 <_svfiprintf_r+0x1d2>
 80076c2:	2340      	movs	r3, #64	; 0x40
 80076c4:	616b      	str	r3, [r5, #20]
 80076c6:	2300      	movs	r3, #0
 80076c8:	9309      	str	r3, [sp, #36]	; 0x24
 80076ca:	2320      	movs	r3, #32
 80076cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80076d4:	2330      	movs	r3, #48	; 0x30
 80076d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007880 <_svfiprintf_r+0x1ec>
 80076da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076de:	f04f 0901 	mov.w	r9, #1
 80076e2:	4623      	mov	r3, r4
 80076e4:	469a      	mov	sl, r3
 80076e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076ea:	b10a      	cbz	r2, 80076f0 <_svfiprintf_r+0x5c>
 80076ec:	2a25      	cmp	r2, #37	; 0x25
 80076ee:	d1f9      	bne.n	80076e4 <_svfiprintf_r+0x50>
 80076f0:	ebba 0b04 	subs.w	fp, sl, r4
 80076f4:	d00b      	beq.n	800770e <_svfiprintf_r+0x7a>
 80076f6:	465b      	mov	r3, fp
 80076f8:	4622      	mov	r2, r4
 80076fa:	4629      	mov	r1, r5
 80076fc:	4638      	mov	r0, r7
 80076fe:	f7ff ff6d 	bl	80075dc <__ssputs_r>
 8007702:	3001      	adds	r0, #1
 8007704:	f000 80aa 	beq.w	800785c <_svfiprintf_r+0x1c8>
 8007708:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800770a:	445a      	add	r2, fp
 800770c:	9209      	str	r2, [sp, #36]	; 0x24
 800770e:	f89a 3000 	ldrb.w	r3, [sl]
 8007712:	2b00      	cmp	r3, #0
 8007714:	f000 80a2 	beq.w	800785c <_svfiprintf_r+0x1c8>
 8007718:	2300      	movs	r3, #0
 800771a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800771e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007722:	f10a 0a01 	add.w	sl, sl, #1
 8007726:	9304      	str	r3, [sp, #16]
 8007728:	9307      	str	r3, [sp, #28]
 800772a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800772e:	931a      	str	r3, [sp, #104]	; 0x68
 8007730:	4654      	mov	r4, sl
 8007732:	2205      	movs	r2, #5
 8007734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007738:	4851      	ldr	r0, [pc, #324]	; (8007880 <_svfiprintf_r+0x1ec>)
 800773a:	f7f8 fd69 	bl	8000210 <memchr>
 800773e:	9a04      	ldr	r2, [sp, #16]
 8007740:	b9d8      	cbnz	r0, 800777a <_svfiprintf_r+0xe6>
 8007742:	06d0      	lsls	r0, r2, #27
 8007744:	bf44      	itt	mi
 8007746:	2320      	movmi	r3, #32
 8007748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800774c:	0711      	lsls	r1, r2, #28
 800774e:	bf44      	itt	mi
 8007750:	232b      	movmi	r3, #43	; 0x2b
 8007752:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007756:	f89a 3000 	ldrb.w	r3, [sl]
 800775a:	2b2a      	cmp	r3, #42	; 0x2a
 800775c:	d015      	beq.n	800778a <_svfiprintf_r+0xf6>
 800775e:	9a07      	ldr	r2, [sp, #28]
 8007760:	4654      	mov	r4, sl
 8007762:	2000      	movs	r0, #0
 8007764:	f04f 0c0a 	mov.w	ip, #10
 8007768:	4621      	mov	r1, r4
 800776a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800776e:	3b30      	subs	r3, #48	; 0x30
 8007770:	2b09      	cmp	r3, #9
 8007772:	d94e      	bls.n	8007812 <_svfiprintf_r+0x17e>
 8007774:	b1b0      	cbz	r0, 80077a4 <_svfiprintf_r+0x110>
 8007776:	9207      	str	r2, [sp, #28]
 8007778:	e014      	b.n	80077a4 <_svfiprintf_r+0x110>
 800777a:	eba0 0308 	sub.w	r3, r0, r8
 800777e:	fa09 f303 	lsl.w	r3, r9, r3
 8007782:	4313      	orrs	r3, r2
 8007784:	9304      	str	r3, [sp, #16]
 8007786:	46a2      	mov	sl, r4
 8007788:	e7d2      	b.n	8007730 <_svfiprintf_r+0x9c>
 800778a:	9b03      	ldr	r3, [sp, #12]
 800778c:	1d19      	adds	r1, r3, #4
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	9103      	str	r1, [sp, #12]
 8007792:	2b00      	cmp	r3, #0
 8007794:	bfbb      	ittet	lt
 8007796:	425b      	neglt	r3, r3
 8007798:	f042 0202 	orrlt.w	r2, r2, #2
 800779c:	9307      	strge	r3, [sp, #28]
 800779e:	9307      	strlt	r3, [sp, #28]
 80077a0:	bfb8      	it	lt
 80077a2:	9204      	strlt	r2, [sp, #16]
 80077a4:	7823      	ldrb	r3, [r4, #0]
 80077a6:	2b2e      	cmp	r3, #46	; 0x2e
 80077a8:	d10c      	bne.n	80077c4 <_svfiprintf_r+0x130>
 80077aa:	7863      	ldrb	r3, [r4, #1]
 80077ac:	2b2a      	cmp	r3, #42	; 0x2a
 80077ae:	d135      	bne.n	800781c <_svfiprintf_r+0x188>
 80077b0:	9b03      	ldr	r3, [sp, #12]
 80077b2:	1d1a      	adds	r2, r3, #4
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	9203      	str	r2, [sp, #12]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	bfb8      	it	lt
 80077bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80077c0:	3402      	adds	r4, #2
 80077c2:	9305      	str	r3, [sp, #20]
 80077c4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007884 <_svfiprintf_r+0x1f0>
 80077c8:	7821      	ldrb	r1, [r4, #0]
 80077ca:	2203      	movs	r2, #3
 80077cc:	4650      	mov	r0, sl
 80077ce:	f7f8 fd1f 	bl	8000210 <memchr>
 80077d2:	b140      	cbz	r0, 80077e6 <_svfiprintf_r+0x152>
 80077d4:	2340      	movs	r3, #64	; 0x40
 80077d6:	eba0 000a 	sub.w	r0, r0, sl
 80077da:	fa03 f000 	lsl.w	r0, r3, r0
 80077de:	9b04      	ldr	r3, [sp, #16]
 80077e0:	4303      	orrs	r3, r0
 80077e2:	3401      	adds	r4, #1
 80077e4:	9304      	str	r3, [sp, #16]
 80077e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077ea:	4827      	ldr	r0, [pc, #156]	; (8007888 <_svfiprintf_r+0x1f4>)
 80077ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077f0:	2206      	movs	r2, #6
 80077f2:	f7f8 fd0d 	bl	8000210 <memchr>
 80077f6:	2800      	cmp	r0, #0
 80077f8:	d038      	beq.n	800786c <_svfiprintf_r+0x1d8>
 80077fa:	4b24      	ldr	r3, [pc, #144]	; (800788c <_svfiprintf_r+0x1f8>)
 80077fc:	bb1b      	cbnz	r3, 8007846 <_svfiprintf_r+0x1b2>
 80077fe:	9b03      	ldr	r3, [sp, #12]
 8007800:	3307      	adds	r3, #7
 8007802:	f023 0307 	bic.w	r3, r3, #7
 8007806:	3308      	adds	r3, #8
 8007808:	9303      	str	r3, [sp, #12]
 800780a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800780c:	4433      	add	r3, r6
 800780e:	9309      	str	r3, [sp, #36]	; 0x24
 8007810:	e767      	b.n	80076e2 <_svfiprintf_r+0x4e>
 8007812:	fb0c 3202 	mla	r2, ip, r2, r3
 8007816:	460c      	mov	r4, r1
 8007818:	2001      	movs	r0, #1
 800781a:	e7a5      	b.n	8007768 <_svfiprintf_r+0xd4>
 800781c:	2300      	movs	r3, #0
 800781e:	3401      	adds	r4, #1
 8007820:	9305      	str	r3, [sp, #20]
 8007822:	4619      	mov	r1, r3
 8007824:	f04f 0c0a 	mov.w	ip, #10
 8007828:	4620      	mov	r0, r4
 800782a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800782e:	3a30      	subs	r2, #48	; 0x30
 8007830:	2a09      	cmp	r2, #9
 8007832:	d903      	bls.n	800783c <_svfiprintf_r+0x1a8>
 8007834:	2b00      	cmp	r3, #0
 8007836:	d0c5      	beq.n	80077c4 <_svfiprintf_r+0x130>
 8007838:	9105      	str	r1, [sp, #20]
 800783a:	e7c3      	b.n	80077c4 <_svfiprintf_r+0x130>
 800783c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007840:	4604      	mov	r4, r0
 8007842:	2301      	movs	r3, #1
 8007844:	e7f0      	b.n	8007828 <_svfiprintf_r+0x194>
 8007846:	ab03      	add	r3, sp, #12
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	462a      	mov	r2, r5
 800784c:	4b10      	ldr	r3, [pc, #64]	; (8007890 <_svfiprintf_r+0x1fc>)
 800784e:	a904      	add	r1, sp, #16
 8007850:	4638      	mov	r0, r7
 8007852:	f7fc f9ef 	bl	8003c34 <_printf_float>
 8007856:	1c42      	adds	r2, r0, #1
 8007858:	4606      	mov	r6, r0
 800785a:	d1d6      	bne.n	800780a <_svfiprintf_r+0x176>
 800785c:	89ab      	ldrh	r3, [r5, #12]
 800785e:	065b      	lsls	r3, r3, #25
 8007860:	f53f af2c 	bmi.w	80076bc <_svfiprintf_r+0x28>
 8007864:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007866:	b01d      	add	sp, #116	; 0x74
 8007868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800786c:	ab03      	add	r3, sp, #12
 800786e:	9300      	str	r3, [sp, #0]
 8007870:	462a      	mov	r2, r5
 8007872:	4b07      	ldr	r3, [pc, #28]	; (8007890 <_svfiprintf_r+0x1fc>)
 8007874:	a904      	add	r1, sp, #16
 8007876:	4638      	mov	r0, r7
 8007878:	f7fc fc74 	bl	8004164 <_printf_i>
 800787c:	e7eb      	b.n	8007856 <_svfiprintf_r+0x1c2>
 800787e:	bf00      	nop
 8007880:	0800a79c 	.word	0x0800a79c
 8007884:	0800a7a2 	.word	0x0800a7a2
 8007888:	0800a7a6 	.word	0x0800a7a6
 800788c:	08003c35 	.word	0x08003c35
 8007890:	080075dd 	.word	0x080075dd

08007894 <_sungetc_r>:
 8007894:	b538      	push	{r3, r4, r5, lr}
 8007896:	1c4b      	adds	r3, r1, #1
 8007898:	4614      	mov	r4, r2
 800789a:	d103      	bne.n	80078a4 <_sungetc_r+0x10>
 800789c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80078a0:	4628      	mov	r0, r5
 80078a2:	bd38      	pop	{r3, r4, r5, pc}
 80078a4:	8993      	ldrh	r3, [r2, #12]
 80078a6:	f023 0320 	bic.w	r3, r3, #32
 80078aa:	8193      	strh	r3, [r2, #12]
 80078ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078ae:	6852      	ldr	r2, [r2, #4]
 80078b0:	b2cd      	uxtb	r5, r1
 80078b2:	b18b      	cbz	r3, 80078d8 <_sungetc_r+0x44>
 80078b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80078b6:	4293      	cmp	r3, r2
 80078b8:	dd08      	ble.n	80078cc <_sungetc_r+0x38>
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	1e5a      	subs	r2, r3, #1
 80078be:	6022      	str	r2, [r4, #0]
 80078c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80078c4:	6863      	ldr	r3, [r4, #4]
 80078c6:	3301      	adds	r3, #1
 80078c8:	6063      	str	r3, [r4, #4]
 80078ca:	e7e9      	b.n	80078a0 <_sungetc_r+0xc>
 80078cc:	4621      	mov	r1, r4
 80078ce:	f000 fbed 	bl	80080ac <__submore>
 80078d2:	2800      	cmp	r0, #0
 80078d4:	d0f1      	beq.n	80078ba <_sungetc_r+0x26>
 80078d6:	e7e1      	b.n	800789c <_sungetc_r+0x8>
 80078d8:	6921      	ldr	r1, [r4, #16]
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	b151      	cbz	r1, 80078f4 <_sungetc_r+0x60>
 80078de:	4299      	cmp	r1, r3
 80078e0:	d208      	bcs.n	80078f4 <_sungetc_r+0x60>
 80078e2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80078e6:	42a9      	cmp	r1, r5
 80078e8:	d104      	bne.n	80078f4 <_sungetc_r+0x60>
 80078ea:	3b01      	subs	r3, #1
 80078ec:	3201      	adds	r2, #1
 80078ee:	6023      	str	r3, [r4, #0]
 80078f0:	6062      	str	r2, [r4, #4]
 80078f2:	e7d5      	b.n	80078a0 <_sungetc_r+0xc>
 80078f4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80078f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078fc:	6363      	str	r3, [r4, #52]	; 0x34
 80078fe:	2303      	movs	r3, #3
 8007900:	63a3      	str	r3, [r4, #56]	; 0x38
 8007902:	4623      	mov	r3, r4
 8007904:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	2301      	movs	r3, #1
 800790c:	e7dc      	b.n	80078c8 <_sungetc_r+0x34>

0800790e <__ssrefill_r>:
 800790e:	b510      	push	{r4, lr}
 8007910:	460c      	mov	r4, r1
 8007912:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007914:	b169      	cbz	r1, 8007932 <__ssrefill_r+0x24>
 8007916:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800791a:	4299      	cmp	r1, r3
 800791c:	d001      	beq.n	8007922 <__ssrefill_r+0x14>
 800791e:	f7ff fd7f 	bl	8007420 <_free_r>
 8007922:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007924:	6063      	str	r3, [r4, #4]
 8007926:	2000      	movs	r0, #0
 8007928:	6360      	str	r0, [r4, #52]	; 0x34
 800792a:	b113      	cbz	r3, 8007932 <__ssrefill_r+0x24>
 800792c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800792e:	6023      	str	r3, [r4, #0]
 8007930:	bd10      	pop	{r4, pc}
 8007932:	6923      	ldr	r3, [r4, #16]
 8007934:	6023      	str	r3, [r4, #0]
 8007936:	2300      	movs	r3, #0
 8007938:	6063      	str	r3, [r4, #4]
 800793a:	89a3      	ldrh	r3, [r4, #12]
 800793c:	f043 0320 	orr.w	r3, r3, #32
 8007940:	81a3      	strh	r3, [r4, #12]
 8007942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007946:	e7f3      	b.n	8007930 <__ssrefill_r+0x22>

08007948 <__ssvfiscanf_r>:
 8007948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800794c:	460c      	mov	r4, r1
 800794e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8007952:	2100      	movs	r1, #0
 8007954:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007958:	49a6      	ldr	r1, [pc, #664]	; (8007bf4 <__ssvfiscanf_r+0x2ac>)
 800795a:	91a0      	str	r1, [sp, #640]	; 0x280
 800795c:	f10d 0804 	add.w	r8, sp, #4
 8007960:	49a5      	ldr	r1, [pc, #660]	; (8007bf8 <__ssvfiscanf_r+0x2b0>)
 8007962:	4fa6      	ldr	r7, [pc, #664]	; (8007bfc <__ssvfiscanf_r+0x2b4>)
 8007964:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8007c00 <__ssvfiscanf_r+0x2b8>
 8007968:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800796c:	4606      	mov	r6, r0
 800796e:	91a1      	str	r1, [sp, #644]	; 0x284
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	7813      	ldrb	r3, [r2, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	f000 815a 	beq.w	8007c2e <__ssvfiscanf_r+0x2e6>
 800797a:	5dd9      	ldrb	r1, [r3, r7]
 800797c:	f011 0108 	ands.w	r1, r1, #8
 8007980:	f102 0501 	add.w	r5, r2, #1
 8007984:	d019      	beq.n	80079ba <__ssvfiscanf_r+0x72>
 8007986:	6863      	ldr	r3, [r4, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	dd0f      	ble.n	80079ac <__ssvfiscanf_r+0x64>
 800798c:	6823      	ldr	r3, [r4, #0]
 800798e:	781a      	ldrb	r2, [r3, #0]
 8007990:	5cba      	ldrb	r2, [r7, r2]
 8007992:	0712      	lsls	r2, r2, #28
 8007994:	d401      	bmi.n	800799a <__ssvfiscanf_r+0x52>
 8007996:	462a      	mov	r2, r5
 8007998:	e7eb      	b.n	8007972 <__ssvfiscanf_r+0x2a>
 800799a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800799c:	3201      	adds	r2, #1
 800799e:	9245      	str	r2, [sp, #276]	; 0x114
 80079a0:	6862      	ldr	r2, [r4, #4]
 80079a2:	3301      	adds	r3, #1
 80079a4:	3a01      	subs	r2, #1
 80079a6:	6062      	str	r2, [r4, #4]
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	e7ec      	b.n	8007986 <__ssvfiscanf_r+0x3e>
 80079ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80079ae:	4621      	mov	r1, r4
 80079b0:	4630      	mov	r0, r6
 80079b2:	4798      	blx	r3
 80079b4:	2800      	cmp	r0, #0
 80079b6:	d0e9      	beq.n	800798c <__ssvfiscanf_r+0x44>
 80079b8:	e7ed      	b.n	8007996 <__ssvfiscanf_r+0x4e>
 80079ba:	2b25      	cmp	r3, #37	; 0x25
 80079bc:	d012      	beq.n	80079e4 <__ssvfiscanf_r+0x9c>
 80079be:	469a      	mov	sl, r3
 80079c0:	6863      	ldr	r3, [r4, #4]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f340 8091 	ble.w	8007aea <__ssvfiscanf_r+0x1a2>
 80079c8:	6822      	ldr	r2, [r4, #0]
 80079ca:	7813      	ldrb	r3, [r2, #0]
 80079cc:	4553      	cmp	r3, sl
 80079ce:	f040 812e 	bne.w	8007c2e <__ssvfiscanf_r+0x2e6>
 80079d2:	6863      	ldr	r3, [r4, #4]
 80079d4:	3b01      	subs	r3, #1
 80079d6:	6063      	str	r3, [r4, #4]
 80079d8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80079da:	3201      	adds	r2, #1
 80079dc:	3301      	adds	r3, #1
 80079de:	6022      	str	r2, [r4, #0]
 80079e0:	9345      	str	r3, [sp, #276]	; 0x114
 80079e2:	e7d8      	b.n	8007996 <__ssvfiscanf_r+0x4e>
 80079e4:	9141      	str	r1, [sp, #260]	; 0x104
 80079e6:	9143      	str	r1, [sp, #268]	; 0x10c
 80079e8:	7853      	ldrb	r3, [r2, #1]
 80079ea:	2b2a      	cmp	r3, #42	; 0x2a
 80079ec:	bf02      	ittt	eq
 80079ee:	2310      	moveq	r3, #16
 80079f0:	1c95      	addeq	r5, r2, #2
 80079f2:	9341      	streq	r3, [sp, #260]	; 0x104
 80079f4:	220a      	movs	r2, #10
 80079f6:	46aa      	mov	sl, r5
 80079f8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80079fc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007a00:	2b09      	cmp	r3, #9
 8007a02:	d91d      	bls.n	8007a40 <__ssvfiscanf_r+0xf8>
 8007a04:	487e      	ldr	r0, [pc, #504]	; (8007c00 <__ssvfiscanf_r+0x2b8>)
 8007a06:	2203      	movs	r2, #3
 8007a08:	f7f8 fc02 	bl	8000210 <memchr>
 8007a0c:	b140      	cbz	r0, 8007a20 <__ssvfiscanf_r+0xd8>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	eba0 0009 	sub.w	r0, r0, r9
 8007a14:	fa03 f000 	lsl.w	r0, r3, r0
 8007a18:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007a1a:	4318      	orrs	r0, r3
 8007a1c:	9041      	str	r0, [sp, #260]	; 0x104
 8007a1e:	4655      	mov	r5, sl
 8007a20:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007a24:	2b78      	cmp	r3, #120	; 0x78
 8007a26:	d806      	bhi.n	8007a36 <__ssvfiscanf_r+0xee>
 8007a28:	2b57      	cmp	r3, #87	; 0x57
 8007a2a:	d810      	bhi.n	8007a4e <__ssvfiscanf_r+0x106>
 8007a2c:	2b25      	cmp	r3, #37	; 0x25
 8007a2e:	d0c6      	beq.n	80079be <__ssvfiscanf_r+0x76>
 8007a30:	d856      	bhi.n	8007ae0 <__ssvfiscanf_r+0x198>
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d064      	beq.n	8007b00 <__ssvfiscanf_r+0x1b8>
 8007a36:	2303      	movs	r3, #3
 8007a38:	9347      	str	r3, [sp, #284]	; 0x11c
 8007a3a:	230a      	movs	r3, #10
 8007a3c:	9342      	str	r3, [sp, #264]	; 0x108
 8007a3e:	e071      	b.n	8007b24 <__ssvfiscanf_r+0x1dc>
 8007a40:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007a42:	fb02 1103 	mla	r1, r2, r3, r1
 8007a46:	3930      	subs	r1, #48	; 0x30
 8007a48:	9143      	str	r1, [sp, #268]	; 0x10c
 8007a4a:	4655      	mov	r5, sl
 8007a4c:	e7d3      	b.n	80079f6 <__ssvfiscanf_r+0xae>
 8007a4e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8007a52:	2a20      	cmp	r2, #32
 8007a54:	d8ef      	bhi.n	8007a36 <__ssvfiscanf_r+0xee>
 8007a56:	a101      	add	r1, pc, #4	; (adr r1, 8007a5c <__ssvfiscanf_r+0x114>)
 8007a58:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007a5c:	08007b0f 	.word	0x08007b0f
 8007a60:	08007a37 	.word	0x08007a37
 8007a64:	08007a37 	.word	0x08007a37
 8007a68:	08007b6d 	.word	0x08007b6d
 8007a6c:	08007a37 	.word	0x08007a37
 8007a70:	08007a37 	.word	0x08007a37
 8007a74:	08007a37 	.word	0x08007a37
 8007a78:	08007a37 	.word	0x08007a37
 8007a7c:	08007a37 	.word	0x08007a37
 8007a80:	08007a37 	.word	0x08007a37
 8007a84:	08007a37 	.word	0x08007a37
 8007a88:	08007b83 	.word	0x08007b83
 8007a8c:	08007b59 	.word	0x08007b59
 8007a90:	08007ae7 	.word	0x08007ae7
 8007a94:	08007ae7 	.word	0x08007ae7
 8007a98:	08007ae7 	.word	0x08007ae7
 8007a9c:	08007a37 	.word	0x08007a37
 8007aa0:	08007b5d 	.word	0x08007b5d
 8007aa4:	08007a37 	.word	0x08007a37
 8007aa8:	08007a37 	.word	0x08007a37
 8007aac:	08007a37 	.word	0x08007a37
 8007ab0:	08007a37 	.word	0x08007a37
 8007ab4:	08007b93 	.word	0x08007b93
 8007ab8:	08007b65 	.word	0x08007b65
 8007abc:	08007b07 	.word	0x08007b07
 8007ac0:	08007a37 	.word	0x08007a37
 8007ac4:	08007a37 	.word	0x08007a37
 8007ac8:	08007b8f 	.word	0x08007b8f
 8007acc:	08007a37 	.word	0x08007a37
 8007ad0:	08007b59 	.word	0x08007b59
 8007ad4:	08007a37 	.word	0x08007a37
 8007ad8:	08007a37 	.word	0x08007a37
 8007adc:	08007b0f 	.word	0x08007b0f
 8007ae0:	3b45      	subs	r3, #69	; 0x45
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d8a7      	bhi.n	8007a36 <__ssvfiscanf_r+0xee>
 8007ae6:	2305      	movs	r3, #5
 8007ae8:	e01b      	b.n	8007b22 <__ssvfiscanf_r+0x1da>
 8007aea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007aec:	4621      	mov	r1, r4
 8007aee:	4630      	mov	r0, r6
 8007af0:	4798      	blx	r3
 8007af2:	2800      	cmp	r0, #0
 8007af4:	f43f af68 	beq.w	80079c8 <__ssvfiscanf_r+0x80>
 8007af8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007afa:	2800      	cmp	r0, #0
 8007afc:	f040 808d 	bne.w	8007c1a <__ssvfiscanf_r+0x2d2>
 8007b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b04:	e08f      	b.n	8007c26 <__ssvfiscanf_r+0x2de>
 8007b06:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007b08:	f042 0220 	orr.w	r2, r2, #32
 8007b0c:	9241      	str	r2, [sp, #260]	; 0x104
 8007b0e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b14:	9241      	str	r2, [sp, #260]	; 0x104
 8007b16:	2210      	movs	r2, #16
 8007b18:	2b6f      	cmp	r3, #111	; 0x6f
 8007b1a:	9242      	str	r2, [sp, #264]	; 0x108
 8007b1c:	bf34      	ite	cc
 8007b1e:	2303      	movcc	r3, #3
 8007b20:	2304      	movcs	r3, #4
 8007b22:	9347      	str	r3, [sp, #284]	; 0x11c
 8007b24:	6863      	ldr	r3, [r4, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	dd42      	ble.n	8007bb0 <__ssvfiscanf_r+0x268>
 8007b2a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007b2c:	0659      	lsls	r1, r3, #25
 8007b2e:	d404      	bmi.n	8007b3a <__ssvfiscanf_r+0x1f2>
 8007b30:	6823      	ldr	r3, [r4, #0]
 8007b32:	781a      	ldrb	r2, [r3, #0]
 8007b34:	5cba      	ldrb	r2, [r7, r2]
 8007b36:	0712      	lsls	r2, r2, #28
 8007b38:	d441      	bmi.n	8007bbe <__ssvfiscanf_r+0x276>
 8007b3a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	dc50      	bgt.n	8007be2 <__ssvfiscanf_r+0x29a>
 8007b40:	466b      	mov	r3, sp
 8007b42:	4622      	mov	r2, r4
 8007b44:	a941      	add	r1, sp, #260	; 0x104
 8007b46:	4630      	mov	r0, r6
 8007b48:	f000 f876 	bl	8007c38 <_scanf_chars>
 8007b4c:	2801      	cmp	r0, #1
 8007b4e:	d06e      	beq.n	8007c2e <__ssvfiscanf_r+0x2e6>
 8007b50:	2802      	cmp	r0, #2
 8007b52:	f47f af20 	bne.w	8007996 <__ssvfiscanf_r+0x4e>
 8007b56:	e7cf      	b.n	8007af8 <__ssvfiscanf_r+0x1b0>
 8007b58:	220a      	movs	r2, #10
 8007b5a:	e7dd      	b.n	8007b18 <__ssvfiscanf_r+0x1d0>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	9342      	str	r3, [sp, #264]	; 0x108
 8007b60:	2303      	movs	r3, #3
 8007b62:	e7de      	b.n	8007b22 <__ssvfiscanf_r+0x1da>
 8007b64:	2308      	movs	r3, #8
 8007b66:	9342      	str	r3, [sp, #264]	; 0x108
 8007b68:	2304      	movs	r3, #4
 8007b6a:	e7da      	b.n	8007b22 <__ssvfiscanf_r+0x1da>
 8007b6c:	4629      	mov	r1, r5
 8007b6e:	4640      	mov	r0, r8
 8007b70:	f000 f9dc 	bl	8007f2c <__sccl>
 8007b74:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b7a:	9341      	str	r3, [sp, #260]	; 0x104
 8007b7c:	4605      	mov	r5, r0
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e7cf      	b.n	8007b22 <__ssvfiscanf_r+0x1da>
 8007b82:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b88:	9341      	str	r3, [sp, #260]	; 0x104
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	e7c9      	b.n	8007b22 <__ssvfiscanf_r+0x1da>
 8007b8e:	2302      	movs	r3, #2
 8007b90:	e7c7      	b.n	8007b22 <__ssvfiscanf_r+0x1da>
 8007b92:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007b94:	06c3      	lsls	r3, r0, #27
 8007b96:	f53f aefe 	bmi.w	8007996 <__ssvfiscanf_r+0x4e>
 8007b9a:	9b00      	ldr	r3, [sp, #0]
 8007b9c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007b9e:	1d19      	adds	r1, r3, #4
 8007ba0:	9100      	str	r1, [sp, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f010 0f01 	tst.w	r0, #1
 8007ba8:	bf14      	ite	ne
 8007baa:	801a      	strhne	r2, [r3, #0]
 8007bac:	601a      	streq	r2, [r3, #0]
 8007bae:	e6f2      	b.n	8007996 <__ssvfiscanf_r+0x4e>
 8007bb0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007bb2:	4621      	mov	r1, r4
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	4798      	blx	r3
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	d0b6      	beq.n	8007b2a <__ssvfiscanf_r+0x1e2>
 8007bbc:	e79c      	b.n	8007af8 <__ssvfiscanf_r+0x1b0>
 8007bbe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007bc0:	3201      	adds	r2, #1
 8007bc2:	9245      	str	r2, [sp, #276]	; 0x114
 8007bc4:	6862      	ldr	r2, [r4, #4]
 8007bc6:	3a01      	subs	r2, #1
 8007bc8:	2a00      	cmp	r2, #0
 8007bca:	6062      	str	r2, [r4, #4]
 8007bcc:	dd02      	ble.n	8007bd4 <__ssvfiscanf_r+0x28c>
 8007bce:	3301      	adds	r3, #1
 8007bd0:	6023      	str	r3, [r4, #0]
 8007bd2:	e7ad      	b.n	8007b30 <__ssvfiscanf_r+0x1e8>
 8007bd4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	4630      	mov	r0, r6
 8007bda:	4798      	blx	r3
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	d0a7      	beq.n	8007b30 <__ssvfiscanf_r+0x1e8>
 8007be0:	e78a      	b.n	8007af8 <__ssvfiscanf_r+0x1b0>
 8007be2:	2b04      	cmp	r3, #4
 8007be4:	dc0e      	bgt.n	8007c04 <__ssvfiscanf_r+0x2bc>
 8007be6:	466b      	mov	r3, sp
 8007be8:	4622      	mov	r2, r4
 8007bea:	a941      	add	r1, sp, #260	; 0x104
 8007bec:	4630      	mov	r0, r6
 8007bee:	f000 f87d 	bl	8007cec <_scanf_i>
 8007bf2:	e7ab      	b.n	8007b4c <__ssvfiscanf_r+0x204>
 8007bf4:	08007895 	.word	0x08007895
 8007bf8:	0800790f 	.word	0x0800790f
 8007bfc:	0800a439 	.word	0x0800a439
 8007c00:	0800a7a2 	.word	0x0800a7a2
 8007c04:	4b0b      	ldr	r3, [pc, #44]	; (8007c34 <__ssvfiscanf_r+0x2ec>)
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f43f aec5 	beq.w	8007996 <__ssvfiscanf_r+0x4e>
 8007c0c:	466b      	mov	r3, sp
 8007c0e:	4622      	mov	r2, r4
 8007c10:	a941      	add	r1, sp, #260	; 0x104
 8007c12:	4630      	mov	r0, r6
 8007c14:	f7fc fbcc 	bl	80043b0 <_scanf_float>
 8007c18:	e798      	b.n	8007b4c <__ssvfiscanf_r+0x204>
 8007c1a:	89a3      	ldrh	r3, [r4, #12]
 8007c1c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007c20:	bf18      	it	ne
 8007c22:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007c26:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8007c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c2e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007c30:	e7f9      	b.n	8007c26 <__ssvfiscanf_r+0x2de>
 8007c32:	bf00      	nop
 8007c34:	080043b1 	.word	0x080043b1

08007c38 <_scanf_chars>:
 8007c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c3c:	4615      	mov	r5, r2
 8007c3e:	688a      	ldr	r2, [r1, #8]
 8007c40:	4680      	mov	r8, r0
 8007c42:	460c      	mov	r4, r1
 8007c44:	b932      	cbnz	r2, 8007c54 <_scanf_chars+0x1c>
 8007c46:	698a      	ldr	r2, [r1, #24]
 8007c48:	2a00      	cmp	r2, #0
 8007c4a:	bf0c      	ite	eq
 8007c4c:	2201      	moveq	r2, #1
 8007c4e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8007c52:	608a      	str	r2, [r1, #8]
 8007c54:	6822      	ldr	r2, [r4, #0]
 8007c56:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007ce8 <_scanf_chars+0xb0>
 8007c5a:	06d1      	lsls	r1, r2, #27
 8007c5c:	bf5f      	itttt	pl
 8007c5e:	681a      	ldrpl	r2, [r3, #0]
 8007c60:	1d11      	addpl	r1, r2, #4
 8007c62:	6019      	strpl	r1, [r3, #0]
 8007c64:	6816      	ldrpl	r6, [r2, #0]
 8007c66:	2700      	movs	r7, #0
 8007c68:	69a0      	ldr	r0, [r4, #24]
 8007c6a:	b188      	cbz	r0, 8007c90 <_scanf_chars+0x58>
 8007c6c:	2801      	cmp	r0, #1
 8007c6e:	d107      	bne.n	8007c80 <_scanf_chars+0x48>
 8007c70:	682b      	ldr	r3, [r5, #0]
 8007c72:	781a      	ldrb	r2, [r3, #0]
 8007c74:	6963      	ldr	r3, [r4, #20]
 8007c76:	5c9b      	ldrb	r3, [r3, r2]
 8007c78:	b953      	cbnz	r3, 8007c90 <_scanf_chars+0x58>
 8007c7a:	2f00      	cmp	r7, #0
 8007c7c:	d031      	beq.n	8007ce2 <_scanf_chars+0xaa>
 8007c7e:	e022      	b.n	8007cc6 <_scanf_chars+0x8e>
 8007c80:	2802      	cmp	r0, #2
 8007c82:	d120      	bne.n	8007cc6 <_scanf_chars+0x8e>
 8007c84:	682b      	ldr	r3, [r5, #0]
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	f813 3009 	ldrb.w	r3, [r3, r9]
 8007c8c:	071b      	lsls	r3, r3, #28
 8007c8e:	d41a      	bmi.n	8007cc6 <_scanf_chars+0x8e>
 8007c90:	6823      	ldr	r3, [r4, #0]
 8007c92:	06da      	lsls	r2, r3, #27
 8007c94:	bf5e      	ittt	pl
 8007c96:	682b      	ldrpl	r3, [r5, #0]
 8007c98:	781b      	ldrbpl	r3, [r3, #0]
 8007c9a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007c9e:	682a      	ldr	r2, [r5, #0]
 8007ca0:	686b      	ldr	r3, [r5, #4]
 8007ca2:	3201      	adds	r2, #1
 8007ca4:	602a      	str	r2, [r5, #0]
 8007ca6:	68a2      	ldr	r2, [r4, #8]
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	3a01      	subs	r2, #1
 8007cac:	606b      	str	r3, [r5, #4]
 8007cae:	3701      	adds	r7, #1
 8007cb0:	60a2      	str	r2, [r4, #8]
 8007cb2:	b142      	cbz	r2, 8007cc6 <_scanf_chars+0x8e>
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	dcd7      	bgt.n	8007c68 <_scanf_chars+0x30>
 8007cb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007cbc:	4629      	mov	r1, r5
 8007cbe:	4640      	mov	r0, r8
 8007cc0:	4798      	blx	r3
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	d0d0      	beq.n	8007c68 <_scanf_chars+0x30>
 8007cc6:	6823      	ldr	r3, [r4, #0]
 8007cc8:	f013 0310 	ands.w	r3, r3, #16
 8007ccc:	d105      	bne.n	8007cda <_scanf_chars+0xa2>
 8007cce:	68e2      	ldr	r2, [r4, #12]
 8007cd0:	3201      	adds	r2, #1
 8007cd2:	60e2      	str	r2, [r4, #12]
 8007cd4:	69a2      	ldr	r2, [r4, #24]
 8007cd6:	b102      	cbz	r2, 8007cda <_scanf_chars+0xa2>
 8007cd8:	7033      	strb	r3, [r6, #0]
 8007cda:	6923      	ldr	r3, [r4, #16]
 8007cdc:	443b      	add	r3, r7
 8007cde:	6123      	str	r3, [r4, #16]
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ce6:	bf00      	nop
 8007ce8:	0800a439 	.word	0x0800a439

08007cec <_scanf_i>:
 8007cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf0:	4698      	mov	r8, r3
 8007cf2:	4b76      	ldr	r3, [pc, #472]	; (8007ecc <_scanf_i+0x1e0>)
 8007cf4:	460c      	mov	r4, r1
 8007cf6:	4682      	mov	sl, r0
 8007cf8:	4616      	mov	r6, r2
 8007cfa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	ab03      	add	r3, sp, #12
 8007d02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007d06:	4b72      	ldr	r3, [pc, #456]	; (8007ed0 <_scanf_i+0x1e4>)
 8007d08:	69a1      	ldr	r1, [r4, #24]
 8007d0a:	4a72      	ldr	r2, [pc, #456]	; (8007ed4 <_scanf_i+0x1e8>)
 8007d0c:	2903      	cmp	r1, #3
 8007d0e:	bf18      	it	ne
 8007d10:	461a      	movne	r2, r3
 8007d12:	68a3      	ldr	r3, [r4, #8]
 8007d14:	9201      	str	r2, [sp, #4]
 8007d16:	1e5a      	subs	r2, r3, #1
 8007d18:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007d1c:	bf88      	it	hi
 8007d1e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007d22:	4627      	mov	r7, r4
 8007d24:	bf82      	ittt	hi
 8007d26:	eb03 0905 	addhi.w	r9, r3, r5
 8007d2a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007d2e:	60a3      	strhi	r3, [r4, #8]
 8007d30:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007d34:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007d38:	bf98      	it	ls
 8007d3a:	f04f 0900 	movls.w	r9, #0
 8007d3e:	6023      	str	r3, [r4, #0]
 8007d40:	463d      	mov	r5, r7
 8007d42:	f04f 0b00 	mov.w	fp, #0
 8007d46:	6831      	ldr	r1, [r6, #0]
 8007d48:	ab03      	add	r3, sp, #12
 8007d4a:	7809      	ldrb	r1, [r1, #0]
 8007d4c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007d50:	2202      	movs	r2, #2
 8007d52:	f7f8 fa5d 	bl	8000210 <memchr>
 8007d56:	b328      	cbz	r0, 8007da4 <_scanf_i+0xb8>
 8007d58:	f1bb 0f01 	cmp.w	fp, #1
 8007d5c:	d159      	bne.n	8007e12 <_scanf_i+0x126>
 8007d5e:	6862      	ldr	r2, [r4, #4]
 8007d60:	b92a      	cbnz	r2, 8007d6e <_scanf_i+0x82>
 8007d62:	6822      	ldr	r2, [r4, #0]
 8007d64:	2308      	movs	r3, #8
 8007d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d6a:	6063      	str	r3, [r4, #4]
 8007d6c:	6022      	str	r2, [r4, #0]
 8007d6e:	6822      	ldr	r2, [r4, #0]
 8007d70:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007d74:	6022      	str	r2, [r4, #0]
 8007d76:	68a2      	ldr	r2, [r4, #8]
 8007d78:	1e51      	subs	r1, r2, #1
 8007d7a:	60a1      	str	r1, [r4, #8]
 8007d7c:	b192      	cbz	r2, 8007da4 <_scanf_i+0xb8>
 8007d7e:	6832      	ldr	r2, [r6, #0]
 8007d80:	1c51      	adds	r1, r2, #1
 8007d82:	6031      	str	r1, [r6, #0]
 8007d84:	7812      	ldrb	r2, [r2, #0]
 8007d86:	f805 2b01 	strb.w	r2, [r5], #1
 8007d8a:	6872      	ldr	r2, [r6, #4]
 8007d8c:	3a01      	subs	r2, #1
 8007d8e:	2a00      	cmp	r2, #0
 8007d90:	6072      	str	r2, [r6, #4]
 8007d92:	dc07      	bgt.n	8007da4 <_scanf_i+0xb8>
 8007d94:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8007d98:	4631      	mov	r1, r6
 8007d9a:	4650      	mov	r0, sl
 8007d9c:	4790      	blx	r2
 8007d9e:	2800      	cmp	r0, #0
 8007da0:	f040 8085 	bne.w	8007eae <_scanf_i+0x1c2>
 8007da4:	f10b 0b01 	add.w	fp, fp, #1
 8007da8:	f1bb 0f03 	cmp.w	fp, #3
 8007dac:	d1cb      	bne.n	8007d46 <_scanf_i+0x5a>
 8007dae:	6863      	ldr	r3, [r4, #4]
 8007db0:	b90b      	cbnz	r3, 8007db6 <_scanf_i+0xca>
 8007db2:	230a      	movs	r3, #10
 8007db4:	6063      	str	r3, [r4, #4]
 8007db6:	6863      	ldr	r3, [r4, #4]
 8007db8:	4947      	ldr	r1, [pc, #284]	; (8007ed8 <_scanf_i+0x1ec>)
 8007dba:	6960      	ldr	r0, [r4, #20]
 8007dbc:	1ac9      	subs	r1, r1, r3
 8007dbe:	f000 f8b5 	bl	8007f2c <__sccl>
 8007dc2:	f04f 0b00 	mov.w	fp, #0
 8007dc6:	68a3      	ldr	r3, [r4, #8]
 8007dc8:	6822      	ldr	r2, [r4, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d03d      	beq.n	8007e4a <_scanf_i+0x15e>
 8007dce:	6831      	ldr	r1, [r6, #0]
 8007dd0:	6960      	ldr	r0, [r4, #20]
 8007dd2:	f891 c000 	ldrb.w	ip, [r1]
 8007dd6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	d035      	beq.n	8007e4a <_scanf_i+0x15e>
 8007dde:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007de2:	d124      	bne.n	8007e2e <_scanf_i+0x142>
 8007de4:	0510      	lsls	r0, r2, #20
 8007de6:	d522      	bpl.n	8007e2e <_scanf_i+0x142>
 8007de8:	f10b 0b01 	add.w	fp, fp, #1
 8007dec:	f1b9 0f00 	cmp.w	r9, #0
 8007df0:	d003      	beq.n	8007dfa <_scanf_i+0x10e>
 8007df2:	3301      	adds	r3, #1
 8007df4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8007df8:	60a3      	str	r3, [r4, #8]
 8007dfa:	6873      	ldr	r3, [r6, #4]
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	6073      	str	r3, [r6, #4]
 8007e02:	dd1b      	ble.n	8007e3c <_scanf_i+0x150>
 8007e04:	6833      	ldr	r3, [r6, #0]
 8007e06:	3301      	adds	r3, #1
 8007e08:	6033      	str	r3, [r6, #0]
 8007e0a:	68a3      	ldr	r3, [r4, #8]
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	60a3      	str	r3, [r4, #8]
 8007e10:	e7d9      	b.n	8007dc6 <_scanf_i+0xda>
 8007e12:	f1bb 0f02 	cmp.w	fp, #2
 8007e16:	d1ae      	bne.n	8007d76 <_scanf_i+0x8a>
 8007e18:	6822      	ldr	r2, [r4, #0]
 8007e1a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007e1e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007e22:	d1bf      	bne.n	8007da4 <_scanf_i+0xb8>
 8007e24:	2310      	movs	r3, #16
 8007e26:	6063      	str	r3, [r4, #4]
 8007e28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e2c:	e7a2      	b.n	8007d74 <_scanf_i+0x88>
 8007e2e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007e32:	6022      	str	r2, [r4, #0]
 8007e34:	780b      	ldrb	r3, [r1, #0]
 8007e36:	f805 3b01 	strb.w	r3, [r5], #1
 8007e3a:	e7de      	b.n	8007dfa <_scanf_i+0x10e>
 8007e3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007e40:	4631      	mov	r1, r6
 8007e42:	4650      	mov	r0, sl
 8007e44:	4798      	blx	r3
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d0df      	beq.n	8007e0a <_scanf_i+0x11e>
 8007e4a:	6823      	ldr	r3, [r4, #0]
 8007e4c:	05db      	lsls	r3, r3, #23
 8007e4e:	d50d      	bpl.n	8007e6c <_scanf_i+0x180>
 8007e50:	42bd      	cmp	r5, r7
 8007e52:	d909      	bls.n	8007e68 <_scanf_i+0x17c>
 8007e54:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007e58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e5c:	4632      	mov	r2, r6
 8007e5e:	4650      	mov	r0, sl
 8007e60:	4798      	blx	r3
 8007e62:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8007e66:	464d      	mov	r5, r9
 8007e68:	42bd      	cmp	r5, r7
 8007e6a:	d02d      	beq.n	8007ec8 <_scanf_i+0x1dc>
 8007e6c:	6822      	ldr	r2, [r4, #0]
 8007e6e:	f012 0210 	ands.w	r2, r2, #16
 8007e72:	d113      	bne.n	8007e9c <_scanf_i+0x1b0>
 8007e74:	702a      	strb	r2, [r5, #0]
 8007e76:	6863      	ldr	r3, [r4, #4]
 8007e78:	9e01      	ldr	r6, [sp, #4]
 8007e7a:	4639      	mov	r1, r7
 8007e7c:	4650      	mov	r0, sl
 8007e7e:	47b0      	blx	r6
 8007e80:	6821      	ldr	r1, [r4, #0]
 8007e82:	f8d8 3000 	ldr.w	r3, [r8]
 8007e86:	f011 0f20 	tst.w	r1, #32
 8007e8a:	d013      	beq.n	8007eb4 <_scanf_i+0x1c8>
 8007e8c:	1d1a      	adds	r2, r3, #4
 8007e8e:	f8c8 2000 	str.w	r2, [r8]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6018      	str	r0, [r3, #0]
 8007e96:	68e3      	ldr	r3, [r4, #12]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	60e3      	str	r3, [r4, #12]
 8007e9c:	1bed      	subs	r5, r5, r7
 8007e9e:	44ab      	add	fp, r5
 8007ea0:	6925      	ldr	r5, [r4, #16]
 8007ea2:	445d      	add	r5, fp
 8007ea4:	6125      	str	r5, [r4, #16]
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	b007      	add	sp, #28
 8007eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eae:	f04f 0b00 	mov.w	fp, #0
 8007eb2:	e7ca      	b.n	8007e4a <_scanf_i+0x15e>
 8007eb4:	1d1a      	adds	r2, r3, #4
 8007eb6:	f8c8 2000 	str.w	r2, [r8]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f011 0f01 	tst.w	r1, #1
 8007ec0:	bf14      	ite	ne
 8007ec2:	8018      	strhne	r0, [r3, #0]
 8007ec4:	6018      	streq	r0, [r3, #0]
 8007ec6:	e7e6      	b.n	8007e96 <_scanf_i+0x1aa>
 8007ec8:	2001      	movs	r0, #1
 8007eca:	e7ed      	b.n	8007ea8 <_scanf_i+0x1bc>
 8007ecc:	0800a39c 	.word	0x0800a39c
 8007ed0:	080080a9 	.word	0x080080a9
 8007ed4:	08005605 	.word	0x08005605
 8007ed8:	0800a7c6 	.word	0x0800a7c6

08007edc <_read_r>:
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	4d07      	ldr	r5, [pc, #28]	; (8007efc <_read_r+0x20>)
 8007ee0:	4604      	mov	r4, r0
 8007ee2:	4608      	mov	r0, r1
 8007ee4:	4611      	mov	r1, r2
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	602a      	str	r2, [r5, #0]
 8007eea:	461a      	mov	r2, r3
 8007eec:	f000 fe82 	bl	8008bf4 <_read>
 8007ef0:	1c43      	adds	r3, r0, #1
 8007ef2:	d102      	bne.n	8007efa <_read_r+0x1e>
 8007ef4:	682b      	ldr	r3, [r5, #0]
 8007ef6:	b103      	cbz	r3, 8007efa <_read_r+0x1e>
 8007ef8:	6023      	str	r3, [r4, #0]
 8007efa:	bd38      	pop	{r3, r4, r5, pc}
 8007efc:	200038ec 	.word	0x200038ec

08007f00 <nan>:
 8007f00:	4901      	ldr	r1, [pc, #4]	; (8007f08 <nan+0x8>)
 8007f02:	2000      	movs	r0, #0
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	7ff80000 	.word	0x7ff80000

08007f0c <_sbrk_r>:
 8007f0c:	b538      	push	{r3, r4, r5, lr}
 8007f0e:	4d06      	ldr	r5, [pc, #24]	; (8007f28 <_sbrk_r+0x1c>)
 8007f10:	2300      	movs	r3, #0
 8007f12:	4604      	mov	r4, r0
 8007f14:	4608      	mov	r0, r1
 8007f16:	602b      	str	r3, [r5, #0]
 8007f18:	f000 fe74 	bl	8008c04 <_sbrk>
 8007f1c:	1c43      	adds	r3, r0, #1
 8007f1e:	d102      	bne.n	8007f26 <_sbrk_r+0x1a>
 8007f20:	682b      	ldr	r3, [r5, #0]
 8007f22:	b103      	cbz	r3, 8007f26 <_sbrk_r+0x1a>
 8007f24:	6023      	str	r3, [r4, #0]
 8007f26:	bd38      	pop	{r3, r4, r5, pc}
 8007f28:	200038ec 	.word	0x200038ec

08007f2c <__sccl>:
 8007f2c:	b570      	push	{r4, r5, r6, lr}
 8007f2e:	780b      	ldrb	r3, [r1, #0]
 8007f30:	4604      	mov	r4, r0
 8007f32:	2b5e      	cmp	r3, #94	; 0x5e
 8007f34:	bf0b      	itete	eq
 8007f36:	784b      	ldrbeq	r3, [r1, #1]
 8007f38:	1c48      	addne	r0, r1, #1
 8007f3a:	1c88      	addeq	r0, r1, #2
 8007f3c:	2200      	movne	r2, #0
 8007f3e:	bf08      	it	eq
 8007f40:	2201      	moveq	r2, #1
 8007f42:	1e61      	subs	r1, r4, #1
 8007f44:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007f48:	f801 2f01 	strb.w	r2, [r1, #1]!
 8007f4c:	42a9      	cmp	r1, r5
 8007f4e:	d1fb      	bne.n	8007f48 <__sccl+0x1c>
 8007f50:	b90b      	cbnz	r3, 8007f56 <__sccl+0x2a>
 8007f52:	3801      	subs	r0, #1
 8007f54:	bd70      	pop	{r4, r5, r6, pc}
 8007f56:	f082 0201 	eor.w	r2, r2, #1
 8007f5a:	54e2      	strb	r2, [r4, r3]
 8007f5c:	4605      	mov	r5, r0
 8007f5e:	4628      	mov	r0, r5
 8007f60:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007f64:	292d      	cmp	r1, #45	; 0x2d
 8007f66:	d006      	beq.n	8007f76 <__sccl+0x4a>
 8007f68:	295d      	cmp	r1, #93	; 0x5d
 8007f6a:	d0f3      	beq.n	8007f54 <__sccl+0x28>
 8007f6c:	b909      	cbnz	r1, 8007f72 <__sccl+0x46>
 8007f6e:	4628      	mov	r0, r5
 8007f70:	e7f0      	b.n	8007f54 <__sccl+0x28>
 8007f72:	460b      	mov	r3, r1
 8007f74:	e7f1      	b.n	8007f5a <__sccl+0x2e>
 8007f76:	786e      	ldrb	r6, [r5, #1]
 8007f78:	2e5d      	cmp	r6, #93	; 0x5d
 8007f7a:	d0fa      	beq.n	8007f72 <__sccl+0x46>
 8007f7c:	42b3      	cmp	r3, r6
 8007f7e:	dcf8      	bgt.n	8007f72 <__sccl+0x46>
 8007f80:	3502      	adds	r5, #2
 8007f82:	4619      	mov	r1, r3
 8007f84:	3101      	adds	r1, #1
 8007f86:	428e      	cmp	r6, r1
 8007f88:	5462      	strb	r2, [r4, r1]
 8007f8a:	dcfb      	bgt.n	8007f84 <__sccl+0x58>
 8007f8c:	1af1      	subs	r1, r6, r3
 8007f8e:	3901      	subs	r1, #1
 8007f90:	1c58      	adds	r0, r3, #1
 8007f92:	42b3      	cmp	r3, r6
 8007f94:	bfa8      	it	ge
 8007f96:	2100      	movge	r1, #0
 8007f98:	1843      	adds	r3, r0, r1
 8007f9a:	e7e0      	b.n	8007f5e <__sccl+0x32>

08007f9c <strncmp>:
 8007f9c:	b510      	push	{r4, lr}
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	b172      	cbz	r2, 8007fc0 <strncmp+0x24>
 8007fa2:	3901      	subs	r1, #1
 8007fa4:	1884      	adds	r4, r0, r2
 8007fa6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007faa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007fae:	4290      	cmp	r0, r2
 8007fb0:	d101      	bne.n	8007fb6 <strncmp+0x1a>
 8007fb2:	42a3      	cmp	r3, r4
 8007fb4:	d101      	bne.n	8007fba <strncmp+0x1e>
 8007fb6:	1a80      	subs	r0, r0, r2
 8007fb8:	bd10      	pop	{r4, pc}
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	d1f3      	bne.n	8007fa6 <strncmp+0xa>
 8007fbe:	e7fa      	b.n	8007fb6 <strncmp+0x1a>
 8007fc0:	4610      	mov	r0, r2
 8007fc2:	e7f9      	b.n	8007fb8 <strncmp+0x1c>

08007fc4 <_strtoul_l.constprop.0>:
 8007fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007fc8:	4f36      	ldr	r7, [pc, #216]	; (80080a4 <_strtoul_l.constprop.0+0xe0>)
 8007fca:	4686      	mov	lr, r0
 8007fcc:	460d      	mov	r5, r1
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fd4:	5de6      	ldrb	r6, [r4, r7]
 8007fd6:	f016 0608 	ands.w	r6, r6, #8
 8007fda:	d1f8      	bne.n	8007fce <_strtoul_l.constprop.0+0xa>
 8007fdc:	2c2d      	cmp	r4, #45	; 0x2d
 8007fde:	d12f      	bne.n	8008040 <_strtoul_l.constprop.0+0x7c>
 8007fe0:	782c      	ldrb	r4, [r5, #0]
 8007fe2:	2601      	movs	r6, #1
 8007fe4:	1c85      	adds	r5, r0, #2
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d057      	beq.n	800809a <_strtoul_l.constprop.0+0xd6>
 8007fea:	2b10      	cmp	r3, #16
 8007fec:	d109      	bne.n	8008002 <_strtoul_l.constprop.0+0x3e>
 8007fee:	2c30      	cmp	r4, #48	; 0x30
 8007ff0:	d107      	bne.n	8008002 <_strtoul_l.constprop.0+0x3e>
 8007ff2:	7828      	ldrb	r0, [r5, #0]
 8007ff4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007ff8:	2858      	cmp	r0, #88	; 0x58
 8007ffa:	d149      	bne.n	8008090 <_strtoul_l.constprop.0+0xcc>
 8007ffc:	786c      	ldrb	r4, [r5, #1]
 8007ffe:	2310      	movs	r3, #16
 8008000:	3502      	adds	r5, #2
 8008002:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008006:	2700      	movs	r7, #0
 8008008:	fbb8 f8f3 	udiv	r8, r8, r3
 800800c:	fb03 f908 	mul.w	r9, r3, r8
 8008010:	ea6f 0909 	mvn.w	r9, r9
 8008014:	4638      	mov	r0, r7
 8008016:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800801a:	f1bc 0f09 	cmp.w	ip, #9
 800801e:	d814      	bhi.n	800804a <_strtoul_l.constprop.0+0x86>
 8008020:	4664      	mov	r4, ip
 8008022:	42a3      	cmp	r3, r4
 8008024:	dd22      	ble.n	800806c <_strtoul_l.constprop.0+0xa8>
 8008026:	2f00      	cmp	r7, #0
 8008028:	db1d      	blt.n	8008066 <_strtoul_l.constprop.0+0xa2>
 800802a:	4580      	cmp	r8, r0
 800802c:	d31b      	bcc.n	8008066 <_strtoul_l.constprop.0+0xa2>
 800802e:	d101      	bne.n	8008034 <_strtoul_l.constprop.0+0x70>
 8008030:	45a1      	cmp	r9, r4
 8008032:	db18      	blt.n	8008066 <_strtoul_l.constprop.0+0xa2>
 8008034:	fb00 4003 	mla	r0, r0, r3, r4
 8008038:	2701      	movs	r7, #1
 800803a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800803e:	e7ea      	b.n	8008016 <_strtoul_l.constprop.0+0x52>
 8008040:	2c2b      	cmp	r4, #43	; 0x2b
 8008042:	bf04      	itt	eq
 8008044:	782c      	ldrbeq	r4, [r5, #0]
 8008046:	1c85      	addeq	r5, r0, #2
 8008048:	e7cd      	b.n	8007fe6 <_strtoul_l.constprop.0+0x22>
 800804a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800804e:	f1bc 0f19 	cmp.w	ip, #25
 8008052:	d801      	bhi.n	8008058 <_strtoul_l.constprop.0+0x94>
 8008054:	3c37      	subs	r4, #55	; 0x37
 8008056:	e7e4      	b.n	8008022 <_strtoul_l.constprop.0+0x5e>
 8008058:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800805c:	f1bc 0f19 	cmp.w	ip, #25
 8008060:	d804      	bhi.n	800806c <_strtoul_l.constprop.0+0xa8>
 8008062:	3c57      	subs	r4, #87	; 0x57
 8008064:	e7dd      	b.n	8008022 <_strtoul_l.constprop.0+0x5e>
 8008066:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800806a:	e7e6      	b.n	800803a <_strtoul_l.constprop.0+0x76>
 800806c:	2f00      	cmp	r7, #0
 800806e:	da07      	bge.n	8008080 <_strtoul_l.constprop.0+0xbc>
 8008070:	2322      	movs	r3, #34	; 0x22
 8008072:	f8ce 3000 	str.w	r3, [lr]
 8008076:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800807a:	b932      	cbnz	r2, 800808a <_strtoul_l.constprop.0+0xc6>
 800807c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008080:	b106      	cbz	r6, 8008084 <_strtoul_l.constprop.0+0xc0>
 8008082:	4240      	negs	r0, r0
 8008084:	2a00      	cmp	r2, #0
 8008086:	d0f9      	beq.n	800807c <_strtoul_l.constprop.0+0xb8>
 8008088:	b107      	cbz	r7, 800808c <_strtoul_l.constprop.0+0xc8>
 800808a:	1e69      	subs	r1, r5, #1
 800808c:	6011      	str	r1, [r2, #0]
 800808e:	e7f5      	b.n	800807c <_strtoul_l.constprop.0+0xb8>
 8008090:	2430      	movs	r4, #48	; 0x30
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1b5      	bne.n	8008002 <_strtoul_l.constprop.0+0x3e>
 8008096:	2308      	movs	r3, #8
 8008098:	e7b3      	b.n	8008002 <_strtoul_l.constprop.0+0x3e>
 800809a:	2c30      	cmp	r4, #48	; 0x30
 800809c:	d0a9      	beq.n	8007ff2 <_strtoul_l.constprop.0+0x2e>
 800809e:	230a      	movs	r3, #10
 80080a0:	e7af      	b.n	8008002 <_strtoul_l.constprop.0+0x3e>
 80080a2:	bf00      	nop
 80080a4:	0800a439 	.word	0x0800a439

080080a8 <_strtoul_r>:
 80080a8:	f7ff bf8c 	b.w	8007fc4 <_strtoul_l.constprop.0>

080080ac <__submore>:
 80080ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080b0:	460c      	mov	r4, r1
 80080b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80080b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080b8:	4299      	cmp	r1, r3
 80080ba:	d11d      	bne.n	80080f8 <__submore+0x4c>
 80080bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80080c0:	f7ff fa18 	bl	80074f4 <_malloc_r>
 80080c4:	b918      	cbnz	r0, 80080ce <__submore+0x22>
 80080c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080d2:	63a3      	str	r3, [r4, #56]	; 0x38
 80080d4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80080d8:	6360      	str	r0, [r4, #52]	; 0x34
 80080da:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80080de:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80080e2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80080e6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80080ea:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80080ee:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80080f2:	6020      	str	r0, [r4, #0]
 80080f4:	2000      	movs	r0, #0
 80080f6:	e7e8      	b.n	80080ca <__submore+0x1e>
 80080f8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80080fa:	0077      	lsls	r7, r6, #1
 80080fc:	463a      	mov	r2, r7
 80080fe:	f000 fa29 	bl	8008554 <_realloc_r>
 8008102:	4605      	mov	r5, r0
 8008104:	2800      	cmp	r0, #0
 8008106:	d0de      	beq.n	80080c6 <__submore+0x1a>
 8008108:	eb00 0806 	add.w	r8, r0, r6
 800810c:	4601      	mov	r1, r0
 800810e:	4632      	mov	r2, r6
 8008110:	4640      	mov	r0, r8
 8008112:	f7fe fcaf 	bl	8006a74 <memcpy>
 8008116:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800811a:	f8c4 8000 	str.w	r8, [r4]
 800811e:	e7e9      	b.n	80080f4 <__submore+0x48>

08008120 <__ascii_wctomb>:
 8008120:	4603      	mov	r3, r0
 8008122:	4608      	mov	r0, r1
 8008124:	b141      	cbz	r1, 8008138 <__ascii_wctomb+0x18>
 8008126:	2aff      	cmp	r2, #255	; 0xff
 8008128:	d904      	bls.n	8008134 <__ascii_wctomb+0x14>
 800812a:	228a      	movs	r2, #138	; 0x8a
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008132:	4770      	bx	lr
 8008134:	700a      	strb	r2, [r1, #0]
 8008136:	2001      	movs	r0, #1
 8008138:	4770      	bx	lr
	...

0800813c <__assert_func>:
 800813c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800813e:	4614      	mov	r4, r2
 8008140:	461a      	mov	r2, r3
 8008142:	4b09      	ldr	r3, [pc, #36]	; (8008168 <__assert_func+0x2c>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4605      	mov	r5, r0
 8008148:	68d8      	ldr	r0, [r3, #12]
 800814a:	b14c      	cbz	r4, 8008160 <__assert_func+0x24>
 800814c:	4b07      	ldr	r3, [pc, #28]	; (800816c <__assert_func+0x30>)
 800814e:	9100      	str	r1, [sp, #0]
 8008150:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008154:	4906      	ldr	r1, [pc, #24]	; (8008170 <__assert_func+0x34>)
 8008156:	462b      	mov	r3, r5
 8008158:	f000 f9a2 	bl	80084a0 <fiprintf>
 800815c:	f000 fc40 	bl	80089e0 <abort>
 8008160:	4b04      	ldr	r3, [pc, #16]	; (8008174 <__assert_func+0x38>)
 8008162:	461c      	mov	r4, r3
 8008164:	e7f3      	b.n	800814e <__assert_func+0x12>
 8008166:	bf00      	nop
 8008168:	20000044 	.word	0x20000044
 800816c:	0800a7c8 	.word	0x0800a7c8
 8008170:	0800a7d5 	.word	0x0800a7d5
 8008174:	0800a803 	.word	0x0800a803

08008178 <__sflush_r>:
 8008178:	898a      	ldrh	r2, [r1, #12]
 800817a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817c:	4605      	mov	r5, r0
 800817e:	0710      	lsls	r0, r2, #28
 8008180:	460c      	mov	r4, r1
 8008182:	d457      	bmi.n	8008234 <__sflush_r+0xbc>
 8008184:	684b      	ldr	r3, [r1, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	dc04      	bgt.n	8008194 <__sflush_r+0x1c>
 800818a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800818c:	2b00      	cmp	r3, #0
 800818e:	dc01      	bgt.n	8008194 <__sflush_r+0x1c>
 8008190:	2000      	movs	r0, #0
 8008192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008194:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008196:	2e00      	cmp	r6, #0
 8008198:	d0fa      	beq.n	8008190 <__sflush_r+0x18>
 800819a:	2300      	movs	r3, #0
 800819c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081a0:	682f      	ldr	r7, [r5, #0]
 80081a2:	602b      	str	r3, [r5, #0]
 80081a4:	d032      	beq.n	800820c <__sflush_r+0x94>
 80081a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081a8:	89a3      	ldrh	r3, [r4, #12]
 80081aa:	075a      	lsls	r2, r3, #29
 80081ac:	d505      	bpl.n	80081ba <__sflush_r+0x42>
 80081ae:	6863      	ldr	r3, [r4, #4]
 80081b0:	1ac0      	subs	r0, r0, r3
 80081b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081b4:	b10b      	cbz	r3, 80081ba <__sflush_r+0x42>
 80081b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081b8:	1ac0      	subs	r0, r0, r3
 80081ba:	2300      	movs	r3, #0
 80081bc:	4602      	mov	r2, r0
 80081be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081c0:	6a21      	ldr	r1, [r4, #32]
 80081c2:	4628      	mov	r0, r5
 80081c4:	47b0      	blx	r6
 80081c6:	1c43      	adds	r3, r0, #1
 80081c8:	89a3      	ldrh	r3, [r4, #12]
 80081ca:	d106      	bne.n	80081da <__sflush_r+0x62>
 80081cc:	6829      	ldr	r1, [r5, #0]
 80081ce:	291d      	cmp	r1, #29
 80081d0:	d82c      	bhi.n	800822c <__sflush_r+0xb4>
 80081d2:	4a29      	ldr	r2, [pc, #164]	; (8008278 <__sflush_r+0x100>)
 80081d4:	40ca      	lsrs	r2, r1
 80081d6:	07d6      	lsls	r6, r2, #31
 80081d8:	d528      	bpl.n	800822c <__sflush_r+0xb4>
 80081da:	2200      	movs	r2, #0
 80081dc:	6062      	str	r2, [r4, #4]
 80081de:	04d9      	lsls	r1, r3, #19
 80081e0:	6922      	ldr	r2, [r4, #16]
 80081e2:	6022      	str	r2, [r4, #0]
 80081e4:	d504      	bpl.n	80081f0 <__sflush_r+0x78>
 80081e6:	1c42      	adds	r2, r0, #1
 80081e8:	d101      	bne.n	80081ee <__sflush_r+0x76>
 80081ea:	682b      	ldr	r3, [r5, #0]
 80081ec:	b903      	cbnz	r3, 80081f0 <__sflush_r+0x78>
 80081ee:	6560      	str	r0, [r4, #84]	; 0x54
 80081f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081f2:	602f      	str	r7, [r5, #0]
 80081f4:	2900      	cmp	r1, #0
 80081f6:	d0cb      	beq.n	8008190 <__sflush_r+0x18>
 80081f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081fc:	4299      	cmp	r1, r3
 80081fe:	d002      	beq.n	8008206 <__sflush_r+0x8e>
 8008200:	4628      	mov	r0, r5
 8008202:	f7ff f90d 	bl	8007420 <_free_r>
 8008206:	2000      	movs	r0, #0
 8008208:	6360      	str	r0, [r4, #52]	; 0x34
 800820a:	e7c2      	b.n	8008192 <__sflush_r+0x1a>
 800820c:	6a21      	ldr	r1, [r4, #32]
 800820e:	2301      	movs	r3, #1
 8008210:	4628      	mov	r0, r5
 8008212:	47b0      	blx	r6
 8008214:	1c41      	adds	r1, r0, #1
 8008216:	d1c7      	bne.n	80081a8 <__sflush_r+0x30>
 8008218:	682b      	ldr	r3, [r5, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d0c4      	beq.n	80081a8 <__sflush_r+0x30>
 800821e:	2b1d      	cmp	r3, #29
 8008220:	d001      	beq.n	8008226 <__sflush_r+0xae>
 8008222:	2b16      	cmp	r3, #22
 8008224:	d101      	bne.n	800822a <__sflush_r+0xb2>
 8008226:	602f      	str	r7, [r5, #0]
 8008228:	e7b2      	b.n	8008190 <__sflush_r+0x18>
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008230:	81a3      	strh	r3, [r4, #12]
 8008232:	e7ae      	b.n	8008192 <__sflush_r+0x1a>
 8008234:	690f      	ldr	r7, [r1, #16]
 8008236:	2f00      	cmp	r7, #0
 8008238:	d0aa      	beq.n	8008190 <__sflush_r+0x18>
 800823a:	0793      	lsls	r3, r2, #30
 800823c:	680e      	ldr	r6, [r1, #0]
 800823e:	bf08      	it	eq
 8008240:	694b      	ldreq	r3, [r1, #20]
 8008242:	600f      	str	r7, [r1, #0]
 8008244:	bf18      	it	ne
 8008246:	2300      	movne	r3, #0
 8008248:	1bf6      	subs	r6, r6, r7
 800824a:	608b      	str	r3, [r1, #8]
 800824c:	2e00      	cmp	r6, #0
 800824e:	dd9f      	ble.n	8008190 <__sflush_r+0x18>
 8008250:	6a21      	ldr	r1, [r4, #32]
 8008252:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008256:	4633      	mov	r3, r6
 8008258:	463a      	mov	r2, r7
 800825a:	4628      	mov	r0, r5
 800825c:	47e0      	blx	ip
 800825e:	2800      	cmp	r0, #0
 8008260:	dc06      	bgt.n	8008270 <__sflush_r+0xf8>
 8008262:	89a3      	ldrh	r3, [r4, #12]
 8008264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008268:	81a3      	strh	r3, [r4, #12]
 800826a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800826e:	e790      	b.n	8008192 <__sflush_r+0x1a>
 8008270:	4407      	add	r7, r0
 8008272:	1a36      	subs	r6, r6, r0
 8008274:	e7ea      	b.n	800824c <__sflush_r+0xd4>
 8008276:	bf00      	nop
 8008278:	20400001 	.word	0x20400001

0800827c <_fflush_r>:
 800827c:	b538      	push	{r3, r4, r5, lr}
 800827e:	690b      	ldr	r3, [r1, #16]
 8008280:	4605      	mov	r5, r0
 8008282:	460c      	mov	r4, r1
 8008284:	b913      	cbnz	r3, 800828c <_fflush_r+0x10>
 8008286:	2500      	movs	r5, #0
 8008288:	4628      	mov	r0, r5
 800828a:	bd38      	pop	{r3, r4, r5, pc}
 800828c:	b118      	cbz	r0, 8008296 <_fflush_r+0x1a>
 800828e:	6983      	ldr	r3, [r0, #24]
 8008290:	b90b      	cbnz	r3, 8008296 <_fflush_r+0x1a>
 8008292:	f000 f887 	bl	80083a4 <__sinit>
 8008296:	4b14      	ldr	r3, [pc, #80]	; (80082e8 <_fflush_r+0x6c>)
 8008298:	429c      	cmp	r4, r3
 800829a:	d11b      	bne.n	80082d4 <_fflush_r+0x58>
 800829c:	686c      	ldr	r4, [r5, #4]
 800829e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d0ef      	beq.n	8008286 <_fflush_r+0xa>
 80082a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082a8:	07d0      	lsls	r0, r2, #31
 80082aa:	d404      	bmi.n	80082b6 <_fflush_r+0x3a>
 80082ac:	0599      	lsls	r1, r3, #22
 80082ae:	d402      	bmi.n	80082b6 <_fflush_r+0x3a>
 80082b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082b2:	f000 f927 	bl	8008504 <__retarget_lock_acquire_recursive>
 80082b6:	4628      	mov	r0, r5
 80082b8:	4621      	mov	r1, r4
 80082ba:	f7ff ff5d 	bl	8008178 <__sflush_r>
 80082be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082c0:	07da      	lsls	r2, r3, #31
 80082c2:	4605      	mov	r5, r0
 80082c4:	d4e0      	bmi.n	8008288 <_fflush_r+0xc>
 80082c6:	89a3      	ldrh	r3, [r4, #12]
 80082c8:	059b      	lsls	r3, r3, #22
 80082ca:	d4dd      	bmi.n	8008288 <_fflush_r+0xc>
 80082cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082ce:	f000 f91a 	bl	8008506 <__retarget_lock_release_recursive>
 80082d2:	e7d9      	b.n	8008288 <_fflush_r+0xc>
 80082d4:	4b05      	ldr	r3, [pc, #20]	; (80082ec <_fflush_r+0x70>)
 80082d6:	429c      	cmp	r4, r3
 80082d8:	d101      	bne.n	80082de <_fflush_r+0x62>
 80082da:	68ac      	ldr	r4, [r5, #8]
 80082dc:	e7df      	b.n	800829e <_fflush_r+0x22>
 80082de:	4b04      	ldr	r3, [pc, #16]	; (80082f0 <_fflush_r+0x74>)
 80082e0:	429c      	cmp	r4, r3
 80082e2:	bf08      	it	eq
 80082e4:	68ec      	ldreq	r4, [r5, #12]
 80082e6:	e7da      	b.n	800829e <_fflush_r+0x22>
 80082e8:	0800a824 	.word	0x0800a824
 80082ec:	0800a844 	.word	0x0800a844
 80082f0:	0800a804 	.word	0x0800a804

080082f4 <std>:
 80082f4:	2300      	movs	r3, #0
 80082f6:	b510      	push	{r4, lr}
 80082f8:	4604      	mov	r4, r0
 80082fa:	e9c0 3300 	strd	r3, r3, [r0]
 80082fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008302:	6083      	str	r3, [r0, #8]
 8008304:	8181      	strh	r1, [r0, #12]
 8008306:	6643      	str	r3, [r0, #100]	; 0x64
 8008308:	81c2      	strh	r2, [r0, #14]
 800830a:	6183      	str	r3, [r0, #24]
 800830c:	4619      	mov	r1, r3
 800830e:	2208      	movs	r2, #8
 8008310:	305c      	adds	r0, #92	; 0x5c
 8008312:	f7fb fbe9 	bl	8003ae8 <memset>
 8008316:	4b05      	ldr	r3, [pc, #20]	; (800832c <std+0x38>)
 8008318:	6263      	str	r3, [r4, #36]	; 0x24
 800831a:	4b05      	ldr	r3, [pc, #20]	; (8008330 <std+0x3c>)
 800831c:	62a3      	str	r3, [r4, #40]	; 0x28
 800831e:	4b05      	ldr	r3, [pc, #20]	; (8008334 <std+0x40>)
 8008320:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008322:	4b05      	ldr	r3, [pc, #20]	; (8008338 <std+0x44>)
 8008324:	6224      	str	r4, [r4, #32]
 8008326:	6323      	str	r3, [r4, #48]	; 0x30
 8008328:	bd10      	pop	{r4, pc}
 800832a:	bf00      	nop
 800832c:	08004865 	.word	0x08004865
 8008330:	0800488b 	.word	0x0800488b
 8008334:	080048c3 	.word	0x080048c3
 8008338:	080048e7 	.word	0x080048e7

0800833c <_cleanup_r>:
 800833c:	4901      	ldr	r1, [pc, #4]	; (8008344 <_cleanup_r+0x8>)
 800833e:	f000 b8c1 	b.w	80084c4 <_fwalk_reent>
 8008342:	bf00      	nop
 8008344:	0800827d 	.word	0x0800827d

08008348 <__sfmoreglue>:
 8008348:	b570      	push	{r4, r5, r6, lr}
 800834a:	2268      	movs	r2, #104	; 0x68
 800834c:	1e4d      	subs	r5, r1, #1
 800834e:	4355      	muls	r5, r2
 8008350:	460e      	mov	r6, r1
 8008352:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008356:	f7ff f8cd 	bl	80074f4 <_malloc_r>
 800835a:	4604      	mov	r4, r0
 800835c:	b140      	cbz	r0, 8008370 <__sfmoreglue+0x28>
 800835e:	2100      	movs	r1, #0
 8008360:	e9c0 1600 	strd	r1, r6, [r0]
 8008364:	300c      	adds	r0, #12
 8008366:	60a0      	str	r0, [r4, #8]
 8008368:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800836c:	f7fb fbbc 	bl	8003ae8 <memset>
 8008370:	4620      	mov	r0, r4
 8008372:	bd70      	pop	{r4, r5, r6, pc}

08008374 <__sfp_lock_acquire>:
 8008374:	4801      	ldr	r0, [pc, #4]	; (800837c <__sfp_lock_acquire+0x8>)
 8008376:	f000 b8c5 	b.w	8008504 <__retarget_lock_acquire_recursive>
 800837a:	bf00      	nop
 800837c:	200038f1 	.word	0x200038f1

08008380 <__sfp_lock_release>:
 8008380:	4801      	ldr	r0, [pc, #4]	; (8008388 <__sfp_lock_release+0x8>)
 8008382:	f000 b8c0 	b.w	8008506 <__retarget_lock_release_recursive>
 8008386:	bf00      	nop
 8008388:	200038f1 	.word	0x200038f1

0800838c <__sinit_lock_acquire>:
 800838c:	4801      	ldr	r0, [pc, #4]	; (8008394 <__sinit_lock_acquire+0x8>)
 800838e:	f000 b8b9 	b.w	8008504 <__retarget_lock_acquire_recursive>
 8008392:	bf00      	nop
 8008394:	200038f2 	.word	0x200038f2

08008398 <__sinit_lock_release>:
 8008398:	4801      	ldr	r0, [pc, #4]	; (80083a0 <__sinit_lock_release+0x8>)
 800839a:	f000 b8b4 	b.w	8008506 <__retarget_lock_release_recursive>
 800839e:	bf00      	nop
 80083a0:	200038f2 	.word	0x200038f2

080083a4 <__sinit>:
 80083a4:	b510      	push	{r4, lr}
 80083a6:	4604      	mov	r4, r0
 80083a8:	f7ff fff0 	bl	800838c <__sinit_lock_acquire>
 80083ac:	69a3      	ldr	r3, [r4, #24]
 80083ae:	b11b      	cbz	r3, 80083b8 <__sinit+0x14>
 80083b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083b4:	f7ff bff0 	b.w	8008398 <__sinit_lock_release>
 80083b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80083bc:	6523      	str	r3, [r4, #80]	; 0x50
 80083be:	4b13      	ldr	r3, [pc, #76]	; (800840c <__sinit+0x68>)
 80083c0:	4a13      	ldr	r2, [pc, #76]	; (8008410 <__sinit+0x6c>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80083c6:	42a3      	cmp	r3, r4
 80083c8:	bf04      	itt	eq
 80083ca:	2301      	moveq	r3, #1
 80083cc:	61a3      	streq	r3, [r4, #24]
 80083ce:	4620      	mov	r0, r4
 80083d0:	f000 f820 	bl	8008414 <__sfp>
 80083d4:	6060      	str	r0, [r4, #4]
 80083d6:	4620      	mov	r0, r4
 80083d8:	f000 f81c 	bl	8008414 <__sfp>
 80083dc:	60a0      	str	r0, [r4, #8]
 80083de:	4620      	mov	r0, r4
 80083e0:	f000 f818 	bl	8008414 <__sfp>
 80083e4:	2200      	movs	r2, #0
 80083e6:	60e0      	str	r0, [r4, #12]
 80083e8:	2104      	movs	r1, #4
 80083ea:	6860      	ldr	r0, [r4, #4]
 80083ec:	f7ff ff82 	bl	80082f4 <std>
 80083f0:	68a0      	ldr	r0, [r4, #8]
 80083f2:	2201      	movs	r2, #1
 80083f4:	2109      	movs	r1, #9
 80083f6:	f7ff ff7d 	bl	80082f4 <std>
 80083fa:	68e0      	ldr	r0, [r4, #12]
 80083fc:	2202      	movs	r2, #2
 80083fe:	2112      	movs	r1, #18
 8008400:	f7ff ff78 	bl	80082f4 <std>
 8008404:	2301      	movs	r3, #1
 8008406:	61a3      	str	r3, [r4, #24]
 8008408:	e7d2      	b.n	80083b0 <__sinit+0xc>
 800840a:	bf00      	nop
 800840c:	0800a3a8 	.word	0x0800a3a8
 8008410:	0800833d 	.word	0x0800833d

08008414 <__sfp>:
 8008414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008416:	4607      	mov	r7, r0
 8008418:	f7ff ffac 	bl	8008374 <__sfp_lock_acquire>
 800841c:	4b1e      	ldr	r3, [pc, #120]	; (8008498 <__sfp+0x84>)
 800841e:	681e      	ldr	r6, [r3, #0]
 8008420:	69b3      	ldr	r3, [r6, #24]
 8008422:	b913      	cbnz	r3, 800842a <__sfp+0x16>
 8008424:	4630      	mov	r0, r6
 8008426:	f7ff ffbd 	bl	80083a4 <__sinit>
 800842a:	3648      	adds	r6, #72	; 0x48
 800842c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008430:	3b01      	subs	r3, #1
 8008432:	d503      	bpl.n	800843c <__sfp+0x28>
 8008434:	6833      	ldr	r3, [r6, #0]
 8008436:	b30b      	cbz	r3, 800847c <__sfp+0x68>
 8008438:	6836      	ldr	r6, [r6, #0]
 800843a:	e7f7      	b.n	800842c <__sfp+0x18>
 800843c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008440:	b9d5      	cbnz	r5, 8008478 <__sfp+0x64>
 8008442:	4b16      	ldr	r3, [pc, #88]	; (800849c <__sfp+0x88>)
 8008444:	60e3      	str	r3, [r4, #12]
 8008446:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800844a:	6665      	str	r5, [r4, #100]	; 0x64
 800844c:	f000 f859 	bl	8008502 <__retarget_lock_init_recursive>
 8008450:	f7ff ff96 	bl	8008380 <__sfp_lock_release>
 8008454:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008458:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800845c:	6025      	str	r5, [r4, #0]
 800845e:	61a5      	str	r5, [r4, #24]
 8008460:	2208      	movs	r2, #8
 8008462:	4629      	mov	r1, r5
 8008464:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008468:	f7fb fb3e 	bl	8003ae8 <memset>
 800846c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008470:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008474:	4620      	mov	r0, r4
 8008476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008478:	3468      	adds	r4, #104	; 0x68
 800847a:	e7d9      	b.n	8008430 <__sfp+0x1c>
 800847c:	2104      	movs	r1, #4
 800847e:	4638      	mov	r0, r7
 8008480:	f7ff ff62 	bl	8008348 <__sfmoreglue>
 8008484:	4604      	mov	r4, r0
 8008486:	6030      	str	r0, [r6, #0]
 8008488:	2800      	cmp	r0, #0
 800848a:	d1d5      	bne.n	8008438 <__sfp+0x24>
 800848c:	f7ff ff78 	bl	8008380 <__sfp_lock_release>
 8008490:	230c      	movs	r3, #12
 8008492:	603b      	str	r3, [r7, #0]
 8008494:	e7ee      	b.n	8008474 <__sfp+0x60>
 8008496:	bf00      	nop
 8008498:	0800a3a8 	.word	0x0800a3a8
 800849c:	ffff0001 	.word	0xffff0001

080084a0 <fiprintf>:
 80084a0:	b40e      	push	{r1, r2, r3}
 80084a2:	b503      	push	{r0, r1, lr}
 80084a4:	4601      	mov	r1, r0
 80084a6:	ab03      	add	r3, sp, #12
 80084a8:	4805      	ldr	r0, [pc, #20]	; (80084c0 <fiprintf+0x20>)
 80084aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80084ae:	6800      	ldr	r0, [r0, #0]
 80084b0:	9301      	str	r3, [sp, #4]
 80084b2:	f000 f8a5 	bl	8008600 <_vfiprintf_r>
 80084b6:	b002      	add	sp, #8
 80084b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80084bc:	b003      	add	sp, #12
 80084be:	4770      	bx	lr
 80084c0:	20000044 	.word	0x20000044

080084c4 <_fwalk_reent>:
 80084c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084c8:	4606      	mov	r6, r0
 80084ca:	4688      	mov	r8, r1
 80084cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80084d0:	2700      	movs	r7, #0
 80084d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084d6:	f1b9 0901 	subs.w	r9, r9, #1
 80084da:	d505      	bpl.n	80084e8 <_fwalk_reent+0x24>
 80084dc:	6824      	ldr	r4, [r4, #0]
 80084de:	2c00      	cmp	r4, #0
 80084e0:	d1f7      	bne.n	80084d2 <_fwalk_reent+0xe>
 80084e2:	4638      	mov	r0, r7
 80084e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084e8:	89ab      	ldrh	r3, [r5, #12]
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d907      	bls.n	80084fe <_fwalk_reent+0x3a>
 80084ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084f2:	3301      	adds	r3, #1
 80084f4:	d003      	beq.n	80084fe <_fwalk_reent+0x3a>
 80084f6:	4629      	mov	r1, r5
 80084f8:	4630      	mov	r0, r6
 80084fa:	47c0      	blx	r8
 80084fc:	4307      	orrs	r7, r0
 80084fe:	3568      	adds	r5, #104	; 0x68
 8008500:	e7e9      	b.n	80084d6 <_fwalk_reent+0x12>

08008502 <__retarget_lock_init_recursive>:
 8008502:	4770      	bx	lr

08008504 <__retarget_lock_acquire_recursive>:
 8008504:	4770      	bx	lr

08008506 <__retarget_lock_release_recursive>:
 8008506:	4770      	bx	lr

08008508 <memmove>:
 8008508:	4288      	cmp	r0, r1
 800850a:	b510      	push	{r4, lr}
 800850c:	eb01 0402 	add.w	r4, r1, r2
 8008510:	d902      	bls.n	8008518 <memmove+0x10>
 8008512:	4284      	cmp	r4, r0
 8008514:	4623      	mov	r3, r4
 8008516:	d807      	bhi.n	8008528 <memmove+0x20>
 8008518:	1e43      	subs	r3, r0, #1
 800851a:	42a1      	cmp	r1, r4
 800851c:	d008      	beq.n	8008530 <memmove+0x28>
 800851e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008522:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008526:	e7f8      	b.n	800851a <memmove+0x12>
 8008528:	4402      	add	r2, r0
 800852a:	4601      	mov	r1, r0
 800852c:	428a      	cmp	r2, r1
 800852e:	d100      	bne.n	8008532 <memmove+0x2a>
 8008530:	bd10      	pop	{r4, pc}
 8008532:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008536:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800853a:	e7f7      	b.n	800852c <memmove+0x24>

0800853c <__malloc_lock>:
 800853c:	4801      	ldr	r0, [pc, #4]	; (8008544 <__malloc_lock+0x8>)
 800853e:	f7ff bfe1 	b.w	8008504 <__retarget_lock_acquire_recursive>
 8008542:	bf00      	nop
 8008544:	200038f0 	.word	0x200038f0

08008548 <__malloc_unlock>:
 8008548:	4801      	ldr	r0, [pc, #4]	; (8008550 <__malloc_unlock+0x8>)
 800854a:	f7ff bfdc 	b.w	8008506 <__retarget_lock_release_recursive>
 800854e:	bf00      	nop
 8008550:	200038f0 	.word	0x200038f0

08008554 <_realloc_r>:
 8008554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008558:	4680      	mov	r8, r0
 800855a:	4614      	mov	r4, r2
 800855c:	460e      	mov	r6, r1
 800855e:	b921      	cbnz	r1, 800856a <_realloc_r+0x16>
 8008560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008564:	4611      	mov	r1, r2
 8008566:	f7fe bfc5 	b.w	80074f4 <_malloc_r>
 800856a:	b92a      	cbnz	r2, 8008578 <_realloc_r+0x24>
 800856c:	f7fe ff58 	bl	8007420 <_free_r>
 8008570:	4625      	mov	r5, r4
 8008572:	4628      	mov	r0, r5
 8008574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008578:	f000 fa9e 	bl	8008ab8 <_malloc_usable_size_r>
 800857c:	4284      	cmp	r4, r0
 800857e:	4607      	mov	r7, r0
 8008580:	d802      	bhi.n	8008588 <_realloc_r+0x34>
 8008582:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008586:	d812      	bhi.n	80085ae <_realloc_r+0x5a>
 8008588:	4621      	mov	r1, r4
 800858a:	4640      	mov	r0, r8
 800858c:	f7fe ffb2 	bl	80074f4 <_malloc_r>
 8008590:	4605      	mov	r5, r0
 8008592:	2800      	cmp	r0, #0
 8008594:	d0ed      	beq.n	8008572 <_realloc_r+0x1e>
 8008596:	42bc      	cmp	r4, r7
 8008598:	4622      	mov	r2, r4
 800859a:	4631      	mov	r1, r6
 800859c:	bf28      	it	cs
 800859e:	463a      	movcs	r2, r7
 80085a0:	f7fe fa68 	bl	8006a74 <memcpy>
 80085a4:	4631      	mov	r1, r6
 80085a6:	4640      	mov	r0, r8
 80085a8:	f7fe ff3a 	bl	8007420 <_free_r>
 80085ac:	e7e1      	b.n	8008572 <_realloc_r+0x1e>
 80085ae:	4635      	mov	r5, r6
 80085b0:	e7df      	b.n	8008572 <_realloc_r+0x1e>

080085b2 <__sfputc_r>:
 80085b2:	6893      	ldr	r3, [r2, #8]
 80085b4:	3b01      	subs	r3, #1
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	b410      	push	{r4}
 80085ba:	6093      	str	r3, [r2, #8]
 80085bc:	da07      	bge.n	80085ce <__sfputc_r+0x1c>
 80085be:	6994      	ldr	r4, [r2, #24]
 80085c0:	42a3      	cmp	r3, r4
 80085c2:	db01      	blt.n	80085c8 <__sfputc_r+0x16>
 80085c4:	290a      	cmp	r1, #10
 80085c6:	d102      	bne.n	80085ce <__sfputc_r+0x1c>
 80085c8:	bc10      	pop	{r4}
 80085ca:	f000 b949 	b.w	8008860 <__swbuf_r>
 80085ce:	6813      	ldr	r3, [r2, #0]
 80085d0:	1c58      	adds	r0, r3, #1
 80085d2:	6010      	str	r0, [r2, #0]
 80085d4:	7019      	strb	r1, [r3, #0]
 80085d6:	4608      	mov	r0, r1
 80085d8:	bc10      	pop	{r4}
 80085da:	4770      	bx	lr

080085dc <__sfputs_r>:
 80085dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085de:	4606      	mov	r6, r0
 80085e0:	460f      	mov	r7, r1
 80085e2:	4614      	mov	r4, r2
 80085e4:	18d5      	adds	r5, r2, r3
 80085e6:	42ac      	cmp	r4, r5
 80085e8:	d101      	bne.n	80085ee <__sfputs_r+0x12>
 80085ea:	2000      	movs	r0, #0
 80085ec:	e007      	b.n	80085fe <__sfputs_r+0x22>
 80085ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085f2:	463a      	mov	r2, r7
 80085f4:	4630      	mov	r0, r6
 80085f6:	f7ff ffdc 	bl	80085b2 <__sfputc_r>
 80085fa:	1c43      	adds	r3, r0, #1
 80085fc:	d1f3      	bne.n	80085e6 <__sfputs_r+0xa>
 80085fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008600 <_vfiprintf_r>:
 8008600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008604:	460d      	mov	r5, r1
 8008606:	b09d      	sub	sp, #116	; 0x74
 8008608:	4614      	mov	r4, r2
 800860a:	4698      	mov	r8, r3
 800860c:	4606      	mov	r6, r0
 800860e:	b118      	cbz	r0, 8008618 <_vfiprintf_r+0x18>
 8008610:	6983      	ldr	r3, [r0, #24]
 8008612:	b90b      	cbnz	r3, 8008618 <_vfiprintf_r+0x18>
 8008614:	f7ff fec6 	bl	80083a4 <__sinit>
 8008618:	4b89      	ldr	r3, [pc, #548]	; (8008840 <_vfiprintf_r+0x240>)
 800861a:	429d      	cmp	r5, r3
 800861c:	d11b      	bne.n	8008656 <_vfiprintf_r+0x56>
 800861e:	6875      	ldr	r5, [r6, #4]
 8008620:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008622:	07d9      	lsls	r1, r3, #31
 8008624:	d405      	bmi.n	8008632 <_vfiprintf_r+0x32>
 8008626:	89ab      	ldrh	r3, [r5, #12]
 8008628:	059a      	lsls	r2, r3, #22
 800862a:	d402      	bmi.n	8008632 <_vfiprintf_r+0x32>
 800862c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800862e:	f7ff ff69 	bl	8008504 <__retarget_lock_acquire_recursive>
 8008632:	89ab      	ldrh	r3, [r5, #12]
 8008634:	071b      	lsls	r3, r3, #28
 8008636:	d501      	bpl.n	800863c <_vfiprintf_r+0x3c>
 8008638:	692b      	ldr	r3, [r5, #16]
 800863a:	b9eb      	cbnz	r3, 8008678 <_vfiprintf_r+0x78>
 800863c:	4629      	mov	r1, r5
 800863e:	4630      	mov	r0, r6
 8008640:	f000 f960 	bl	8008904 <__swsetup_r>
 8008644:	b1c0      	cbz	r0, 8008678 <_vfiprintf_r+0x78>
 8008646:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008648:	07dc      	lsls	r4, r3, #31
 800864a:	d50e      	bpl.n	800866a <_vfiprintf_r+0x6a>
 800864c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008650:	b01d      	add	sp, #116	; 0x74
 8008652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008656:	4b7b      	ldr	r3, [pc, #492]	; (8008844 <_vfiprintf_r+0x244>)
 8008658:	429d      	cmp	r5, r3
 800865a:	d101      	bne.n	8008660 <_vfiprintf_r+0x60>
 800865c:	68b5      	ldr	r5, [r6, #8]
 800865e:	e7df      	b.n	8008620 <_vfiprintf_r+0x20>
 8008660:	4b79      	ldr	r3, [pc, #484]	; (8008848 <_vfiprintf_r+0x248>)
 8008662:	429d      	cmp	r5, r3
 8008664:	bf08      	it	eq
 8008666:	68f5      	ldreq	r5, [r6, #12]
 8008668:	e7da      	b.n	8008620 <_vfiprintf_r+0x20>
 800866a:	89ab      	ldrh	r3, [r5, #12]
 800866c:	0598      	lsls	r0, r3, #22
 800866e:	d4ed      	bmi.n	800864c <_vfiprintf_r+0x4c>
 8008670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008672:	f7ff ff48 	bl	8008506 <__retarget_lock_release_recursive>
 8008676:	e7e9      	b.n	800864c <_vfiprintf_r+0x4c>
 8008678:	2300      	movs	r3, #0
 800867a:	9309      	str	r3, [sp, #36]	; 0x24
 800867c:	2320      	movs	r3, #32
 800867e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008682:	f8cd 800c 	str.w	r8, [sp, #12]
 8008686:	2330      	movs	r3, #48	; 0x30
 8008688:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800884c <_vfiprintf_r+0x24c>
 800868c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008690:	f04f 0901 	mov.w	r9, #1
 8008694:	4623      	mov	r3, r4
 8008696:	469a      	mov	sl, r3
 8008698:	f813 2b01 	ldrb.w	r2, [r3], #1
 800869c:	b10a      	cbz	r2, 80086a2 <_vfiprintf_r+0xa2>
 800869e:	2a25      	cmp	r2, #37	; 0x25
 80086a0:	d1f9      	bne.n	8008696 <_vfiprintf_r+0x96>
 80086a2:	ebba 0b04 	subs.w	fp, sl, r4
 80086a6:	d00b      	beq.n	80086c0 <_vfiprintf_r+0xc0>
 80086a8:	465b      	mov	r3, fp
 80086aa:	4622      	mov	r2, r4
 80086ac:	4629      	mov	r1, r5
 80086ae:	4630      	mov	r0, r6
 80086b0:	f7ff ff94 	bl	80085dc <__sfputs_r>
 80086b4:	3001      	adds	r0, #1
 80086b6:	f000 80aa 	beq.w	800880e <_vfiprintf_r+0x20e>
 80086ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086bc:	445a      	add	r2, fp
 80086be:	9209      	str	r2, [sp, #36]	; 0x24
 80086c0:	f89a 3000 	ldrb.w	r3, [sl]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f000 80a2 	beq.w	800880e <_vfiprintf_r+0x20e>
 80086ca:	2300      	movs	r3, #0
 80086cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086d4:	f10a 0a01 	add.w	sl, sl, #1
 80086d8:	9304      	str	r3, [sp, #16]
 80086da:	9307      	str	r3, [sp, #28]
 80086dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086e0:	931a      	str	r3, [sp, #104]	; 0x68
 80086e2:	4654      	mov	r4, sl
 80086e4:	2205      	movs	r2, #5
 80086e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ea:	4858      	ldr	r0, [pc, #352]	; (800884c <_vfiprintf_r+0x24c>)
 80086ec:	f7f7 fd90 	bl	8000210 <memchr>
 80086f0:	9a04      	ldr	r2, [sp, #16]
 80086f2:	b9d8      	cbnz	r0, 800872c <_vfiprintf_r+0x12c>
 80086f4:	06d1      	lsls	r1, r2, #27
 80086f6:	bf44      	itt	mi
 80086f8:	2320      	movmi	r3, #32
 80086fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086fe:	0713      	lsls	r3, r2, #28
 8008700:	bf44      	itt	mi
 8008702:	232b      	movmi	r3, #43	; 0x2b
 8008704:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008708:	f89a 3000 	ldrb.w	r3, [sl]
 800870c:	2b2a      	cmp	r3, #42	; 0x2a
 800870e:	d015      	beq.n	800873c <_vfiprintf_r+0x13c>
 8008710:	9a07      	ldr	r2, [sp, #28]
 8008712:	4654      	mov	r4, sl
 8008714:	2000      	movs	r0, #0
 8008716:	f04f 0c0a 	mov.w	ip, #10
 800871a:	4621      	mov	r1, r4
 800871c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008720:	3b30      	subs	r3, #48	; 0x30
 8008722:	2b09      	cmp	r3, #9
 8008724:	d94e      	bls.n	80087c4 <_vfiprintf_r+0x1c4>
 8008726:	b1b0      	cbz	r0, 8008756 <_vfiprintf_r+0x156>
 8008728:	9207      	str	r2, [sp, #28]
 800872a:	e014      	b.n	8008756 <_vfiprintf_r+0x156>
 800872c:	eba0 0308 	sub.w	r3, r0, r8
 8008730:	fa09 f303 	lsl.w	r3, r9, r3
 8008734:	4313      	orrs	r3, r2
 8008736:	9304      	str	r3, [sp, #16]
 8008738:	46a2      	mov	sl, r4
 800873a:	e7d2      	b.n	80086e2 <_vfiprintf_r+0xe2>
 800873c:	9b03      	ldr	r3, [sp, #12]
 800873e:	1d19      	adds	r1, r3, #4
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	9103      	str	r1, [sp, #12]
 8008744:	2b00      	cmp	r3, #0
 8008746:	bfbb      	ittet	lt
 8008748:	425b      	neglt	r3, r3
 800874a:	f042 0202 	orrlt.w	r2, r2, #2
 800874e:	9307      	strge	r3, [sp, #28]
 8008750:	9307      	strlt	r3, [sp, #28]
 8008752:	bfb8      	it	lt
 8008754:	9204      	strlt	r2, [sp, #16]
 8008756:	7823      	ldrb	r3, [r4, #0]
 8008758:	2b2e      	cmp	r3, #46	; 0x2e
 800875a:	d10c      	bne.n	8008776 <_vfiprintf_r+0x176>
 800875c:	7863      	ldrb	r3, [r4, #1]
 800875e:	2b2a      	cmp	r3, #42	; 0x2a
 8008760:	d135      	bne.n	80087ce <_vfiprintf_r+0x1ce>
 8008762:	9b03      	ldr	r3, [sp, #12]
 8008764:	1d1a      	adds	r2, r3, #4
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	9203      	str	r2, [sp, #12]
 800876a:	2b00      	cmp	r3, #0
 800876c:	bfb8      	it	lt
 800876e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008772:	3402      	adds	r4, #2
 8008774:	9305      	str	r3, [sp, #20]
 8008776:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008850 <_vfiprintf_r+0x250>
 800877a:	7821      	ldrb	r1, [r4, #0]
 800877c:	2203      	movs	r2, #3
 800877e:	4650      	mov	r0, sl
 8008780:	f7f7 fd46 	bl	8000210 <memchr>
 8008784:	b140      	cbz	r0, 8008798 <_vfiprintf_r+0x198>
 8008786:	2340      	movs	r3, #64	; 0x40
 8008788:	eba0 000a 	sub.w	r0, r0, sl
 800878c:	fa03 f000 	lsl.w	r0, r3, r0
 8008790:	9b04      	ldr	r3, [sp, #16]
 8008792:	4303      	orrs	r3, r0
 8008794:	3401      	adds	r4, #1
 8008796:	9304      	str	r3, [sp, #16]
 8008798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800879c:	482d      	ldr	r0, [pc, #180]	; (8008854 <_vfiprintf_r+0x254>)
 800879e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087a2:	2206      	movs	r2, #6
 80087a4:	f7f7 fd34 	bl	8000210 <memchr>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	d03f      	beq.n	800882c <_vfiprintf_r+0x22c>
 80087ac:	4b2a      	ldr	r3, [pc, #168]	; (8008858 <_vfiprintf_r+0x258>)
 80087ae:	bb1b      	cbnz	r3, 80087f8 <_vfiprintf_r+0x1f8>
 80087b0:	9b03      	ldr	r3, [sp, #12]
 80087b2:	3307      	adds	r3, #7
 80087b4:	f023 0307 	bic.w	r3, r3, #7
 80087b8:	3308      	adds	r3, #8
 80087ba:	9303      	str	r3, [sp, #12]
 80087bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087be:	443b      	add	r3, r7
 80087c0:	9309      	str	r3, [sp, #36]	; 0x24
 80087c2:	e767      	b.n	8008694 <_vfiprintf_r+0x94>
 80087c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80087c8:	460c      	mov	r4, r1
 80087ca:	2001      	movs	r0, #1
 80087cc:	e7a5      	b.n	800871a <_vfiprintf_r+0x11a>
 80087ce:	2300      	movs	r3, #0
 80087d0:	3401      	adds	r4, #1
 80087d2:	9305      	str	r3, [sp, #20]
 80087d4:	4619      	mov	r1, r3
 80087d6:	f04f 0c0a 	mov.w	ip, #10
 80087da:	4620      	mov	r0, r4
 80087dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087e0:	3a30      	subs	r2, #48	; 0x30
 80087e2:	2a09      	cmp	r2, #9
 80087e4:	d903      	bls.n	80087ee <_vfiprintf_r+0x1ee>
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d0c5      	beq.n	8008776 <_vfiprintf_r+0x176>
 80087ea:	9105      	str	r1, [sp, #20]
 80087ec:	e7c3      	b.n	8008776 <_vfiprintf_r+0x176>
 80087ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80087f2:	4604      	mov	r4, r0
 80087f4:	2301      	movs	r3, #1
 80087f6:	e7f0      	b.n	80087da <_vfiprintf_r+0x1da>
 80087f8:	ab03      	add	r3, sp, #12
 80087fa:	9300      	str	r3, [sp, #0]
 80087fc:	462a      	mov	r2, r5
 80087fe:	4b17      	ldr	r3, [pc, #92]	; (800885c <_vfiprintf_r+0x25c>)
 8008800:	a904      	add	r1, sp, #16
 8008802:	4630      	mov	r0, r6
 8008804:	f7fb fa16 	bl	8003c34 <_printf_float>
 8008808:	4607      	mov	r7, r0
 800880a:	1c78      	adds	r0, r7, #1
 800880c:	d1d6      	bne.n	80087bc <_vfiprintf_r+0x1bc>
 800880e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008810:	07d9      	lsls	r1, r3, #31
 8008812:	d405      	bmi.n	8008820 <_vfiprintf_r+0x220>
 8008814:	89ab      	ldrh	r3, [r5, #12]
 8008816:	059a      	lsls	r2, r3, #22
 8008818:	d402      	bmi.n	8008820 <_vfiprintf_r+0x220>
 800881a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800881c:	f7ff fe73 	bl	8008506 <__retarget_lock_release_recursive>
 8008820:	89ab      	ldrh	r3, [r5, #12]
 8008822:	065b      	lsls	r3, r3, #25
 8008824:	f53f af12 	bmi.w	800864c <_vfiprintf_r+0x4c>
 8008828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800882a:	e711      	b.n	8008650 <_vfiprintf_r+0x50>
 800882c:	ab03      	add	r3, sp, #12
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	462a      	mov	r2, r5
 8008832:	4b0a      	ldr	r3, [pc, #40]	; (800885c <_vfiprintf_r+0x25c>)
 8008834:	a904      	add	r1, sp, #16
 8008836:	4630      	mov	r0, r6
 8008838:	f7fb fc94 	bl	8004164 <_printf_i>
 800883c:	e7e4      	b.n	8008808 <_vfiprintf_r+0x208>
 800883e:	bf00      	nop
 8008840:	0800a824 	.word	0x0800a824
 8008844:	0800a844 	.word	0x0800a844
 8008848:	0800a804 	.word	0x0800a804
 800884c:	0800a79c 	.word	0x0800a79c
 8008850:	0800a7a2 	.word	0x0800a7a2
 8008854:	0800a7a6 	.word	0x0800a7a6
 8008858:	08003c35 	.word	0x08003c35
 800885c:	080085dd 	.word	0x080085dd

08008860 <__swbuf_r>:
 8008860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008862:	460e      	mov	r6, r1
 8008864:	4614      	mov	r4, r2
 8008866:	4605      	mov	r5, r0
 8008868:	b118      	cbz	r0, 8008872 <__swbuf_r+0x12>
 800886a:	6983      	ldr	r3, [r0, #24]
 800886c:	b90b      	cbnz	r3, 8008872 <__swbuf_r+0x12>
 800886e:	f7ff fd99 	bl	80083a4 <__sinit>
 8008872:	4b21      	ldr	r3, [pc, #132]	; (80088f8 <__swbuf_r+0x98>)
 8008874:	429c      	cmp	r4, r3
 8008876:	d12b      	bne.n	80088d0 <__swbuf_r+0x70>
 8008878:	686c      	ldr	r4, [r5, #4]
 800887a:	69a3      	ldr	r3, [r4, #24]
 800887c:	60a3      	str	r3, [r4, #8]
 800887e:	89a3      	ldrh	r3, [r4, #12]
 8008880:	071a      	lsls	r2, r3, #28
 8008882:	d52f      	bpl.n	80088e4 <__swbuf_r+0x84>
 8008884:	6923      	ldr	r3, [r4, #16]
 8008886:	b36b      	cbz	r3, 80088e4 <__swbuf_r+0x84>
 8008888:	6923      	ldr	r3, [r4, #16]
 800888a:	6820      	ldr	r0, [r4, #0]
 800888c:	1ac0      	subs	r0, r0, r3
 800888e:	6963      	ldr	r3, [r4, #20]
 8008890:	b2f6      	uxtb	r6, r6
 8008892:	4283      	cmp	r3, r0
 8008894:	4637      	mov	r7, r6
 8008896:	dc04      	bgt.n	80088a2 <__swbuf_r+0x42>
 8008898:	4621      	mov	r1, r4
 800889a:	4628      	mov	r0, r5
 800889c:	f7ff fcee 	bl	800827c <_fflush_r>
 80088a0:	bb30      	cbnz	r0, 80088f0 <__swbuf_r+0x90>
 80088a2:	68a3      	ldr	r3, [r4, #8]
 80088a4:	3b01      	subs	r3, #1
 80088a6:	60a3      	str	r3, [r4, #8]
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	1c5a      	adds	r2, r3, #1
 80088ac:	6022      	str	r2, [r4, #0]
 80088ae:	701e      	strb	r6, [r3, #0]
 80088b0:	6963      	ldr	r3, [r4, #20]
 80088b2:	3001      	adds	r0, #1
 80088b4:	4283      	cmp	r3, r0
 80088b6:	d004      	beq.n	80088c2 <__swbuf_r+0x62>
 80088b8:	89a3      	ldrh	r3, [r4, #12]
 80088ba:	07db      	lsls	r3, r3, #31
 80088bc:	d506      	bpl.n	80088cc <__swbuf_r+0x6c>
 80088be:	2e0a      	cmp	r6, #10
 80088c0:	d104      	bne.n	80088cc <__swbuf_r+0x6c>
 80088c2:	4621      	mov	r1, r4
 80088c4:	4628      	mov	r0, r5
 80088c6:	f7ff fcd9 	bl	800827c <_fflush_r>
 80088ca:	b988      	cbnz	r0, 80088f0 <__swbuf_r+0x90>
 80088cc:	4638      	mov	r0, r7
 80088ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088d0:	4b0a      	ldr	r3, [pc, #40]	; (80088fc <__swbuf_r+0x9c>)
 80088d2:	429c      	cmp	r4, r3
 80088d4:	d101      	bne.n	80088da <__swbuf_r+0x7a>
 80088d6:	68ac      	ldr	r4, [r5, #8]
 80088d8:	e7cf      	b.n	800887a <__swbuf_r+0x1a>
 80088da:	4b09      	ldr	r3, [pc, #36]	; (8008900 <__swbuf_r+0xa0>)
 80088dc:	429c      	cmp	r4, r3
 80088de:	bf08      	it	eq
 80088e0:	68ec      	ldreq	r4, [r5, #12]
 80088e2:	e7ca      	b.n	800887a <__swbuf_r+0x1a>
 80088e4:	4621      	mov	r1, r4
 80088e6:	4628      	mov	r0, r5
 80088e8:	f000 f80c 	bl	8008904 <__swsetup_r>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	d0cb      	beq.n	8008888 <__swbuf_r+0x28>
 80088f0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80088f4:	e7ea      	b.n	80088cc <__swbuf_r+0x6c>
 80088f6:	bf00      	nop
 80088f8:	0800a824 	.word	0x0800a824
 80088fc:	0800a844 	.word	0x0800a844
 8008900:	0800a804 	.word	0x0800a804

08008904 <__swsetup_r>:
 8008904:	4b32      	ldr	r3, [pc, #200]	; (80089d0 <__swsetup_r+0xcc>)
 8008906:	b570      	push	{r4, r5, r6, lr}
 8008908:	681d      	ldr	r5, [r3, #0]
 800890a:	4606      	mov	r6, r0
 800890c:	460c      	mov	r4, r1
 800890e:	b125      	cbz	r5, 800891a <__swsetup_r+0x16>
 8008910:	69ab      	ldr	r3, [r5, #24]
 8008912:	b913      	cbnz	r3, 800891a <__swsetup_r+0x16>
 8008914:	4628      	mov	r0, r5
 8008916:	f7ff fd45 	bl	80083a4 <__sinit>
 800891a:	4b2e      	ldr	r3, [pc, #184]	; (80089d4 <__swsetup_r+0xd0>)
 800891c:	429c      	cmp	r4, r3
 800891e:	d10f      	bne.n	8008940 <__swsetup_r+0x3c>
 8008920:	686c      	ldr	r4, [r5, #4]
 8008922:	89a3      	ldrh	r3, [r4, #12]
 8008924:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008928:	0719      	lsls	r1, r3, #28
 800892a:	d42c      	bmi.n	8008986 <__swsetup_r+0x82>
 800892c:	06dd      	lsls	r5, r3, #27
 800892e:	d411      	bmi.n	8008954 <__swsetup_r+0x50>
 8008930:	2309      	movs	r3, #9
 8008932:	6033      	str	r3, [r6, #0]
 8008934:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008938:	81a3      	strh	r3, [r4, #12]
 800893a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800893e:	e03e      	b.n	80089be <__swsetup_r+0xba>
 8008940:	4b25      	ldr	r3, [pc, #148]	; (80089d8 <__swsetup_r+0xd4>)
 8008942:	429c      	cmp	r4, r3
 8008944:	d101      	bne.n	800894a <__swsetup_r+0x46>
 8008946:	68ac      	ldr	r4, [r5, #8]
 8008948:	e7eb      	b.n	8008922 <__swsetup_r+0x1e>
 800894a:	4b24      	ldr	r3, [pc, #144]	; (80089dc <__swsetup_r+0xd8>)
 800894c:	429c      	cmp	r4, r3
 800894e:	bf08      	it	eq
 8008950:	68ec      	ldreq	r4, [r5, #12]
 8008952:	e7e6      	b.n	8008922 <__swsetup_r+0x1e>
 8008954:	0758      	lsls	r0, r3, #29
 8008956:	d512      	bpl.n	800897e <__swsetup_r+0x7a>
 8008958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800895a:	b141      	cbz	r1, 800896e <__swsetup_r+0x6a>
 800895c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008960:	4299      	cmp	r1, r3
 8008962:	d002      	beq.n	800896a <__swsetup_r+0x66>
 8008964:	4630      	mov	r0, r6
 8008966:	f7fe fd5b 	bl	8007420 <_free_r>
 800896a:	2300      	movs	r3, #0
 800896c:	6363      	str	r3, [r4, #52]	; 0x34
 800896e:	89a3      	ldrh	r3, [r4, #12]
 8008970:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008974:	81a3      	strh	r3, [r4, #12]
 8008976:	2300      	movs	r3, #0
 8008978:	6063      	str	r3, [r4, #4]
 800897a:	6923      	ldr	r3, [r4, #16]
 800897c:	6023      	str	r3, [r4, #0]
 800897e:	89a3      	ldrh	r3, [r4, #12]
 8008980:	f043 0308 	orr.w	r3, r3, #8
 8008984:	81a3      	strh	r3, [r4, #12]
 8008986:	6923      	ldr	r3, [r4, #16]
 8008988:	b94b      	cbnz	r3, 800899e <__swsetup_r+0x9a>
 800898a:	89a3      	ldrh	r3, [r4, #12]
 800898c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008994:	d003      	beq.n	800899e <__swsetup_r+0x9a>
 8008996:	4621      	mov	r1, r4
 8008998:	4630      	mov	r0, r6
 800899a:	f000 f84d 	bl	8008a38 <__smakebuf_r>
 800899e:	89a0      	ldrh	r0, [r4, #12]
 80089a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089a4:	f010 0301 	ands.w	r3, r0, #1
 80089a8:	d00a      	beq.n	80089c0 <__swsetup_r+0xbc>
 80089aa:	2300      	movs	r3, #0
 80089ac:	60a3      	str	r3, [r4, #8]
 80089ae:	6963      	ldr	r3, [r4, #20]
 80089b0:	425b      	negs	r3, r3
 80089b2:	61a3      	str	r3, [r4, #24]
 80089b4:	6923      	ldr	r3, [r4, #16]
 80089b6:	b943      	cbnz	r3, 80089ca <__swsetup_r+0xc6>
 80089b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089bc:	d1ba      	bne.n	8008934 <__swsetup_r+0x30>
 80089be:	bd70      	pop	{r4, r5, r6, pc}
 80089c0:	0781      	lsls	r1, r0, #30
 80089c2:	bf58      	it	pl
 80089c4:	6963      	ldrpl	r3, [r4, #20]
 80089c6:	60a3      	str	r3, [r4, #8]
 80089c8:	e7f4      	b.n	80089b4 <__swsetup_r+0xb0>
 80089ca:	2000      	movs	r0, #0
 80089cc:	e7f7      	b.n	80089be <__swsetup_r+0xba>
 80089ce:	bf00      	nop
 80089d0:	20000044 	.word	0x20000044
 80089d4:	0800a824 	.word	0x0800a824
 80089d8:	0800a844 	.word	0x0800a844
 80089dc:	0800a804 	.word	0x0800a804

080089e0 <abort>:
 80089e0:	b508      	push	{r3, lr}
 80089e2:	2006      	movs	r0, #6
 80089e4:	f000 f898 	bl	8008b18 <raise>
 80089e8:	2001      	movs	r0, #1
 80089ea:	f000 f921 	bl	8008c30 <_exit>

080089ee <__swhatbuf_r>:
 80089ee:	b570      	push	{r4, r5, r6, lr}
 80089f0:	460e      	mov	r6, r1
 80089f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089f6:	2900      	cmp	r1, #0
 80089f8:	b096      	sub	sp, #88	; 0x58
 80089fa:	4614      	mov	r4, r2
 80089fc:	461d      	mov	r5, r3
 80089fe:	da08      	bge.n	8008a12 <__swhatbuf_r+0x24>
 8008a00:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	602a      	str	r2, [r5, #0]
 8008a08:	061a      	lsls	r2, r3, #24
 8008a0a:	d410      	bmi.n	8008a2e <__swhatbuf_r+0x40>
 8008a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a10:	e00e      	b.n	8008a30 <__swhatbuf_r+0x42>
 8008a12:	466a      	mov	r2, sp
 8008a14:	f000 f89c 	bl	8008b50 <_fstat_r>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	dbf1      	blt.n	8008a00 <__swhatbuf_r+0x12>
 8008a1c:	9a01      	ldr	r2, [sp, #4]
 8008a1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a26:	425a      	negs	r2, r3
 8008a28:	415a      	adcs	r2, r3
 8008a2a:	602a      	str	r2, [r5, #0]
 8008a2c:	e7ee      	b.n	8008a0c <__swhatbuf_r+0x1e>
 8008a2e:	2340      	movs	r3, #64	; 0x40
 8008a30:	2000      	movs	r0, #0
 8008a32:	6023      	str	r3, [r4, #0]
 8008a34:	b016      	add	sp, #88	; 0x58
 8008a36:	bd70      	pop	{r4, r5, r6, pc}

08008a38 <__smakebuf_r>:
 8008a38:	898b      	ldrh	r3, [r1, #12]
 8008a3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a3c:	079d      	lsls	r5, r3, #30
 8008a3e:	4606      	mov	r6, r0
 8008a40:	460c      	mov	r4, r1
 8008a42:	d507      	bpl.n	8008a54 <__smakebuf_r+0x1c>
 8008a44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a48:	6023      	str	r3, [r4, #0]
 8008a4a:	6123      	str	r3, [r4, #16]
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	6163      	str	r3, [r4, #20]
 8008a50:	b002      	add	sp, #8
 8008a52:	bd70      	pop	{r4, r5, r6, pc}
 8008a54:	ab01      	add	r3, sp, #4
 8008a56:	466a      	mov	r2, sp
 8008a58:	f7ff ffc9 	bl	80089ee <__swhatbuf_r>
 8008a5c:	9900      	ldr	r1, [sp, #0]
 8008a5e:	4605      	mov	r5, r0
 8008a60:	4630      	mov	r0, r6
 8008a62:	f7fe fd47 	bl	80074f4 <_malloc_r>
 8008a66:	b948      	cbnz	r0, 8008a7c <__smakebuf_r+0x44>
 8008a68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a6c:	059a      	lsls	r2, r3, #22
 8008a6e:	d4ef      	bmi.n	8008a50 <__smakebuf_r+0x18>
 8008a70:	f023 0303 	bic.w	r3, r3, #3
 8008a74:	f043 0302 	orr.w	r3, r3, #2
 8008a78:	81a3      	strh	r3, [r4, #12]
 8008a7a:	e7e3      	b.n	8008a44 <__smakebuf_r+0xc>
 8008a7c:	4b0d      	ldr	r3, [pc, #52]	; (8008ab4 <__smakebuf_r+0x7c>)
 8008a7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a80:	89a3      	ldrh	r3, [r4, #12]
 8008a82:	6020      	str	r0, [r4, #0]
 8008a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a88:	81a3      	strh	r3, [r4, #12]
 8008a8a:	9b00      	ldr	r3, [sp, #0]
 8008a8c:	6163      	str	r3, [r4, #20]
 8008a8e:	9b01      	ldr	r3, [sp, #4]
 8008a90:	6120      	str	r0, [r4, #16]
 8008a92:	b15b      	cbz	r3, 8008aac <__smakebuf_r+0x74>
 8008a94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a98:	4630      	mov	r0, r6
 8008a9a:	f000 f86b 	bl	8008b74 <_isatty_r>
 8008a9e:	b128      	cbz	r0, 8008aac <__smakebuf_r+0x74>
 8008aa0:	89a3      	ldrh	r3, [r4, #12]
 8008aa2:	f023 0303 	bic.w	r3, r3, #3
 8008aa6:	f043 0301 	orr.w	r3, r3, #1
 8008aaa:	81a3      	strh	r3, [r4, #12]
 8008aac:	89a0      	ldrh	r0, [r4, #12]
 8008aae:	4305      	orrs	r5, r0
 8008ab0:	81a5      	strh	r5, [r4, #12]
 8008ab2:	e7cd      	b.n	8008a50 <__smakebuf_r+0x18>
 8008ab4:	0800833d 	.word	0x0800833d

08008ab8 <_malloc_usable_size_r>:
 8008ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008abc:	1f18      	subs	r0, r3, #4
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	bfbc      	itt	lt
 8008ac2:	580b      	ldrlt	r3, [r1, r0]
 8008ac4:	18c0      	addlt	r0, r0, r3
 8008ac6:	4770      	bx	lr

08008ac8 <_raise_r>:
 8008ac8:	291f      	cmp	r1, #31
 8008aca:	b538      	push	{r3, r4, r5, lr}
 8008acc:	4604      	mov	r4, r0
 8008ace:	460d      	mov	r5, r1
 8008ad0:	d904      	bls.n	8008adc <_raise_r+0x14>
 8008ad2:	2316      	movs	r3, #22
 8008ad4:	6003      	str	r3, [r0, #0]
 8008ad6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ada:	bd38      	pop	{r3, r4, r5, pc}
 8008adc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008ade:	b112      	cbz	r2, 8008ae6 <_raise_r+0x1e>
 8008ae0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ae4:	b94b      	cbnz	r3, 8008afa <_raise_r+0x32>
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	f000 f830 	bl	8008b4c <_getpid_r>
 8008aec:	462a      	mov	r2, r5
 8008aee:	4601      	mov	r1, r0
 8008af0:	4620      	mov	r0, r4
 8008af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008af6:	f000 b817 	b.w	8008b28 <_kill_r>
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d00a      	beq.n	8008b14 <_raise_r+0x4c>
 8008afe:	1c59      	adds	r1, r3, #1
 8008b00:	d103      	bne.n	8008b0a <_raise_r+0x42>
 8008b02:	2316      	movs	r3, #22
 8008b04:	6003      	str	r3, [r0, #0]
 8008b06:	2001      	movs	r0, #1
 8008b08:	e7e7      	b.n	8008ada <_raise_r+0x12>
 8008b0a:	2400      	movs	r4, #0
 8008b0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008b10:	4628      	mov	r0, r5
 8008b12:	4798      	blx	r3
 8008b14:	2000      	movs	r0, #0
 8008b16:	e7e0      	b.n	8008ada <_raise_r+0x12>

08008b18 <raise>:
 8008b18:	4b02      	ldr	r3, [pc, #8]	; (8008b24 <raise+0xc>)
 8008b1a:	4601      	mov	r1, r0
 8008b1c:	6818      	ldr	r0, [r3, #0]
 8008b1e:	f7ff bfd3 	b.w	8008ac8 <_raise_r>
 8008b22:	bf00      	nop
 8008b24:	20000044 	.word	0x20000044

08008b28 <_kill_r>:
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	4d07      	ldr	r5, [pc, #28]	; (8008b48 <_kill_r+0x20>)
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4608      	mov	r0, r1
 8008b32:	4611      	mov	r1, r2
 8008b34:	602b      	str	r3, [r5, #0]
 8008b36:	f000 f84d 	bl	8008bd4 <_kill>
 8008b3a:	1c43      	adds	r3, r0, #1
 8008b3c:	d102      	bne.n	8008b44 <_kill_r+0x1c>
 8008b3e:	682b      	ldr	r3, [r5, #0]
 8008b40:	b103      	cbz	r3, 8008b44 <_kill_r+0x1c>
 8008b42:	6023      	str	r3, [r4, #0]
 8008b44:	bd38      	pop	{r3, r4, r5, pc}
 8008b46:	bf00      	nop
 8008b48:	200038ec 	.word	0x200038ec

08008b4c <_getpid_r>:
 8008b4c:	f000 b832 	b.w	8008bb4 <_getpid>

08008b50 <_fstat_r>:
 8008b50:	b538      	push	{r3, r4, r5, lr}
 8008b52:	4d07      	ldr	r5, [pc, #28]	; (8008b70 <_fstat_r+0x20>)
 8008b54:	2300      	movs	r3, #0
 8008b56:	4604      	mov	r4, r0
 8008b58:	4608      	mov	r0, r1
 8008b5a:	4611      	mov	r1, r2
 8008b5c:	602b      	str	r3, [r5, #0]
 8008b5e:	f000 f821 	bl	8008ba4 <_fstat>
 8008b62:	1c43      	adds	r3, r0, #1
 8008b64:	d102      	bne.n	8008b6c <_fstat_r+0x1c>
 8008b66:	682b      	ldr	r3, [r5, #0]
 8008b68:	b103      	cbz	r3, 8008b6c <_fstat_r+0x1c>
 8008b6a:	6023      	str	r3, [r4, #0]
 8008b6c:	bd38      	pop	{r3, r4, r5, pc}
 8008b6e:	bf00      	nop
 8008b70:	200038ec 	.word	0x200038ec

08008b74 <_isatty_r>:
 8008b74:	b538      	push	{r3, r4, r5, lr}
 8008b76:	4d06      	ldr	r5, [pc, #24]	; (8008b90 <_isatty_r+0x1c>)
 8008b78:	2300      	movs	r3, #0
 8008b7a:	4604      	mov	r4, r0
 8008b7c:	4608      	mov	r0, r1
 8008b7e:	602b      	str	r3, [r5, #0]
 8008b80:	f000 f820 	bl	8008bc4 <_isatty>
 8008b84:	1c43      	adds	r3, r0, #1
 8008b86:	d102      	bne.n	8008b8e <_isatty_r+0x1a>
 8008b88:	682b      	ldr	r3, [r5, #0]
 8008b8a:	b103      	cbz	r3, 8008b8e <_isatty_r+0x1a>
 8008b8c:	6023      	str	r3, [r4, #0]
 8008b8e:	bd38      	pop	{r3, r4, r5, pc}
 8008b90:	200038ec 	.word	0x200038ec

08008b94 <_close>:
 8008b94:	4b02      	ldr	r3, [pc, #8]	; (8008ba0 <_close+0xc>)
 8008b96:	2258      	movs	r2, #88	; 0x58
 8008b98:	601a      	str	r2, [r3, #0]
 8008b9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b9e:	4770      	bx	lr
 8008ba0:	200038ec 	.word	0x200038ec

08008ba4 <_fstat>:
 8008ba4:	4b02      	ldr	r3, [pc, #8]	; (8008bb0 <_fstat+0xc>)
 8008ba6:	2258      	movs	r2, #88	; 0x58
 8008ba8:	601a      	str	r2, [r3, #0]
 8008baa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bae:	4770      	bx	lr
 8008bb0:	200038ec 	.word	0x200038ec

08008bb4 <_getpid>:
 8008bb4:	4b02      	ldr	r3, [pc, #8]	; (8008bc0 <_getpid+0xc>)
 8008bb6:	2258      	movs	r2, #88	; 0x58
 8008bb8:	601a      	str	r2, [r3, #0]
 8008bba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bbe:	4770      	bx	lr
 8008bc0:	200038ec 	.word	0x200038ec

08008bc4 <_isatty>:
 8008bc4:	4b02      	ldr	r3, [pc, #8]	; (8008bd0 <_isatty+0xc>)
 8008bc6:	2258      	movs	r2, #88	; 0x58
 8008bc8:	601a      	str	r2, [r3, #0]
 8008bca:	2000      	movs	r0, #0
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	200038ec 	.word	0x200038ec

08008bd4 <_kill>:
 8008bd4:	4b02      	ldr	r3, [pc, #8]	; (8008be0 <_kill+0xc>)
 8008bd6:	2258      	movs	r2, #88	; 0x58
 8008bd8:	601a      	str	r2, [r3, #0]
 8008bda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bde:	4770      	bx	lr
 8008be0:	200038ec 	.word	0x200038ec

08008be4 <_lseek>:
 8008be4:	4b02      	ldr	r3, [pc, #8]	; (8008bf0 <_lseek+0xc>)
 8008be6:	2258      	movs	r2, #88	; 0x58
 8008be8:	601a      	str	r2, [r3, #0]
 8008bea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bee:	4770      	bx	lr
 8008bf0:	200038ec 	.word	0x200038ec

08008bf4 <_read>:
 8008bf4:	4b02      	ldr	r3, [pc, #8]	; (8008c00 <_read+0xc>)
 8008bf6:	2258      	movs	r2, #88	; 0x58
 8008bf8:	601a      	str	r2, [r3, #0]
 8008bfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bfe:	4770      	bx	lr
 8008c00:	200038ec 	.word	0x200038ec

08008c04 <_sbrk>:
 8008c04:	4a04      	ldr	r2, [pc, #16]	; (8008c18 <_sbrk+0x14>)
 8008c06:	6811      	ldr	r1, [r2, #0]
 8008c08:	4603      	mov	r3, r0
 8008c0a:	b909      	cbnz	r1, 8008c10 <_sbrk+0xc>
 8008c0c:	4903      	ldr	r1, [pc, #12]	; (8008c1c <_sbrk+0x18>)
 8008c0e:	6011      	str	r1, [r2, #0]
 8008c10:	6810      	ldr	r0, [r2, #0]
 8008c12:	4403      	add	r3, r0
 8008c14:	6013      	str	r3, [r2, #0]
 8008c16:	4770      	bx	lr
 8008c18:	200038f4 	.word	0x200038f4
 8008c1c:	200038f8 	.word	0x200038f8

08008c20 <_write>:
 8008c20:	4b02      	ldr	r3, [pc, #8]	; (8008c2c <_write+0xc>)
 8008c22:	2258      	movs	r2, #88	; 0x58
 8008c24:	601a      	str	r2, [r3, #0]
 8008c26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c2a:	4770      	bx	lr
 8008c2c:	200038ec 	.word	0x200038ec

08008c30 <_exit>:
 8008c30:	e7fe      	b.n	8008c30 <_exit>
	...

08008c34 <_init>:
 8008c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c36:	bf00      	nop
 8008c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c3a:	bc08      	pop	{r3}
 8008c3c:	469e      	mov	lr, r3
 8008c3e:	4770      	bx	lr

08008c40 <_fini>:
 8008c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c42:	bf00      	nop
 8008c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c46:	bc08      	pop	{r3}
 8008c48:	469e      	mov	lr, r3
 8008c4a:	4770      	bx	lr
