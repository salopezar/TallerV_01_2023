
examenParcialTallerV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009024  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cac  080091c8  080091c8  000191c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae74  0800ae74  00020218  2**0
                  CONTENTS
  4 .ARM          00000000  0800ae74  0800ae74  00020218  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ae74  0800ae74  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae74  0800ae74  0001ae74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae78  0800ae78  0001ae78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800ae7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ae0  20000218  0800b094  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003cf8  0800b094  00023cf8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004bb2  00000000  00000000  00020242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f26  00000000  00000000  00024df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000328  00000000  00000000  00025d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002a8  00000000  00000000  00026048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010033  00000000  00000000  000262f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004e42  00000000  00000000  00036323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005678a  00000000  00000000  0003b165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000918ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023f8  00000000  00000000  00091940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00093d38  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00093e04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080091ac 	.word	0x080091ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	080091ac 	.word	0x080091ac

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_frsub>:
 8000cb8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cbc:	e002      	b.n	8000cc4 <__addsf3>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_fsub>:
 8000cc0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cc4 <__addsf3>:
 8000cc4:	0042      	lsls	r2, r0, #1
 8000cc6:	bf1f      	itttt	ne
 8000cc8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ccc:	ea92 0f03 	teqne	r2, r3
 8000cd0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cd4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd8:	d06a      	beq.n	8000db0 <__addsf3+0xec>
 8000cda:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cde:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ce2:	bfc1      	itttt	gt
 8000ce4:	18d2      	addgt	r2, r2, r3
 8000ce6:	4041      	eorgt	r1, r0
 8000ce8:	4048      	eorgt	r0, r1
 8000cea:	4041      	eorgt	r1, r0
 8000cec:	bfb8      	it	lt
 8000cee:	425b      	neglt	r3, r3
 8000cf0:	2b19      	cmp	r3, #25
 8000cf2:	bf88      	it	hi
 8000cf4:	4770      	bxhi	lr
 8000cf6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cfa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cfe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d02:	bf18      	it	ne
 8000d04:	4240      	negne	r0, r0
 8000d06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4249      	negne	r1, r1
 8000d16:	ea92 0f03 	teq	r2, r3
 8000d1a:	d03f      	beq.n	8000d9c <__addsf3+0xd8>
 8000d1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d20:	fa41 fc03 	asr.w	ip, r1, r3
 8000d24:	eb10 000c 	adds.w	r0, r0, ip
 8000d28:	f1c3 0320 	rsb	r3, r3, #32
 8000d2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d34:	d502      	bpl.n	8000d3c <__addsf3+0x78>
 8000d36:	4249      	negs	r1, r1
 8000d38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d40:	d313      	bcc.n	8000d6a <__addsf3+0xa6>
 8000d42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d46:	d306      	bcc.n	8000d56 <__addsf3+0x92>
 8000d48:	0840      	lsrs	r0, r0, #1
 8000d4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d4e:	f102 0201 	add.w	r2, r2, #1
 8000d52:	2afe      	cmp	r2, #254	; 0xfe
 8000d54:	d251      	bcs.n	8000dfa <__addsf3+0x136>
 8000d56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d5e:	bf08      	it	eq
 8000d60:	f020 0001 	biceq.w	r0, r0, #1
 8000d64:	ea40 0003 	orr.w	r0, r0, r3
 8000d68:	4770      	bx	lr
 8000d6a:	0049      	lsls	r1, r1, #1
 8000d6c:	eb40 0000 	adc.w	r0, r0, r0
 8000d70:	3a01      	subs	r2, #1
 8000d72:	bf28      	it	cs
 8000d74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d78:	d2ed      	bcs.n	8000d56 <__addsf3+0x92>
 8000d7a:	fab0 fc80 	clz	ip, r0
 8000d7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d82:	ebb2 020c 	subs.w	r2, r2, ip
 8000d86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d8a:	bfaa      	itet	ge
 8000d8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d90:	4252      	neglt	r2, r2
 8000d92:	4318      	orrge	r0, r3
 8000d94:	bfbc      	itt	lt
 8000d96:	40d0      	lsrlt	r0, r2
 8000d98:	4318      	orrlt	r0, r3
 8000d9a:	4770      	bx	lr
 8000d9c:	f092 0f00 	teq	r2, #0
 8000da0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000da4:	bf06      	itte	eq
 8000da6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000daa:	3201      	addeq	r2, #1
 8000dac:	3b01      	subne	r3, #1
 8000dae:	e7b5      	b.n	8000d1c <__addsf3+0x58>
 8000db0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000db4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000db8:	bf18      	it	ne
 8000dba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dbe:	d021      	beq.n	8000e04 <__addsf3+0x140>
 8000dc0:	ea92 0f03 	teq	r2, r3
 8000dc4:	d004      	beq.n	8000dd0 <__addsf3+0x10c>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	bf08      	it	eq
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	4770      	bx	lr
 8000dd0:	ea90 0f01 	teq	r0, r1
 8000dd4:	bf1c      	itt	ne
 8000dd6:	2000      	movne	r0, #0
 8000dd8:	4770      	bxne	lr
 8000dda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dde:	d104      	bne.n	8000dea <__addsf3+0x126>
 8000de0:	0040      	lsls	r0, r0, #1
 8000de2:	bf28      	it	cs
 8000de4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000de8:	4770      	bx	lr
 8000dea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dee:	bf3c      	itt	cc
 8000df0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000df4:	4770      	bxcc	lr
 8000df6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	4770      	bx	lr
 8000e04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e08:	bf16      	itet	ne
 8000e0a:	4608      	movne	r0, r1
 8000e0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e10:	4601      	movne	r1, r0
 8000e12:	0242      	lsls	r2, r0, #9
 8000e14:	bf06      	itte	eq
 8000e16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e1a:	ea90 0f01 	teqeq	r0, r1
 8000e1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e22:	4770      	bx	lr

08000e24 <__aeabi_ui2f>:
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	e004      	b.n	8000e34 <__aeabi_i2f+0x8>
 8000e2a:	bf00      	nop

08000e2c <__aeabi_i2f>:
 8000e2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e30:	bf48      	it	mi
 8000e32:	4240      	negmi	r0, r0
 8000e34:	ea5f 0c00 	movs.w	ip, r0
 8000e38:	bf08      	it	eq
 8000e3a:	4770      	bxeq	lr
 8000e3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e40:	4601      	mov	r1, r0
 8000e42:	f04f 0000 	mov.w	r0, #0
 8000e46:	e01c      	b.n	8000e82 <__aeabi_l2f+0x2a>

08000e48 <__aeabi_ul2f>:
 8000e48:	ea50 0201 	orrs.w	r2, r0, r1
 8000e4c:	bf08      	it	eq
 8000e4e:	4770      	bxeq	lr
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	e00a      	b.n	8000e6c <__aeabi_l2f+0x14>
 8000e56:	bf00      	nop

08000e58 <__aeabi_l2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e64:	d502      	bpl.n	8000e6c <__aeabi_l2f+0x14>
 8000e66:	4240      	negs	r0, r0
 8000e68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e6c:	ea5f 0c01 	movs.w	ip, r1
 8000e70:	bf02      	ittt	eq
 8000e72:	4684      	moveq	ip, r0
 8000e74:	4601      	moveq	r1, r0
 8000e76:	2000      	moveq	r0, #0
 8000e78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e7c:	bf08      	it	eq
 8000e7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e86:	fabc f28c 	clz	r2, ip
 8000e8a:	3a08      	subs	r2, #8
 8000e8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e90:	db10      	blt.n	8000eb4 <__aeabi_l2f+0x5c>
 8000e92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e96:	4463      	add	r3, ip
 8000e98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ea4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	f020 0001 	biceq.w	r0, r0, #1
 8000eb2:	4770      	bx	lr
 8000eb4:	f102 0220 	add.w	r2, r2, #32
 8000eb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ebc:	f1c2 0220 	rsb	r2, r2, #32
 8000ec0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ec4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ec8:	eb43 0002 	adc.w	r0, r3, r2
 8000ecc:	bf08      	it	eq
 8000ece:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_fmul>:
 8000ed4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ed8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000edc:	bf1e      	ittt	ne
 8000ede:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ee2:	ea92 0f0c 	teqne	r2, ip
 8000ee6:	ea93 0f0c 	teqne	r3, ip
 8000eea:	d06f      	beq.n	8000fcc <__aeabi_fmul+0xf8>
 8000eec:	441a      	add	r2, r3
 8000eee:	ea80 0c01 	eor.w	ip, r0, r1
 8000ef2:	0240      	lsls	r0, r0, #9
 8000ef4:	bf18      	it	ne
 8000ef6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000efa:	d01e      	beq.n	8000f3a <__aeabi_fmul+0x66>
 8000efc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000f00:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000f04:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000f08:	fba0 3101 	umull	r3, r1, r0, r1
 8000f0c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f10:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000f14:	bf3e      	ittt	cc
 8000f16:	0049      	lslcc	r1, r1, #1
 8000f18:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000f1c:	005b      	lslcc	r3, r3, #1
 8000f1e:	ea40 0001 	orr.w	r0, r0, r1
 8000f22:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000f26:	2afd      	cmp	r2, #253	; 0xfd
 8000f28:	d81d      	bhi.n	8000f66 <__aeabi_fmul+0x92>
 8000f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f32:	bf08      	it	eq
 8000f34:	f020 0001 	biceq.w	r0, r0, #1
 8000f38:	4770      	bx	lr
 8000f3a:	f090 0f00 	teq	r0, #0
 8000f3e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f42:	bf08      	it	eq
 8000f44:	0249      	lsleq	r1, r1, #9
 8000f46:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000f4e:	3a7f      	subs	r2, #127	; 0x7f
 8000f50:	bfc2      	ittt	gt
 8000f52:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f56:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f5a:	4770      	bxgt	lr
 8000f5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f60:	f04f 0300 	mov.w	r3, #0
 8000f64:	3a01      	subs	r2, #1
 8000f66:	dc5d      	bgt.n	8001024 <__aeabi_fmul+0x150>
 8000f68:	f112 0f19 	cmn.w	r2, #25
 8000f6c:	bfdc      	itt	le
 8000f6e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000f72:	4770      	bxle	lr
 8000f74:	f1c2 0200 	rsb	r2, r2, #0
 8000f78:	0041      	lsls	r1, r0, #1
 8000f7a:	fa21 f102 	lsr.w	r1, r1, r2
 8000f7e:	f1c2 0220 	rsb	r2, r2, #32
 8000f82:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f86:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f8a:	f140 0000 	adc.w	r0, r0, #0
 8000f8e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f92:	bf08      	it	eq
 8000f94:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f98:	4770      	bx	lr
 8000f9a:	f092 0f00 	teq	r2, #0
 8000f9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa2:	bf02      	ittt	eq
 8000fa4:	0040      	lsleq	r0, r0, #1
 8000fa6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000faa:	3a01      	subeq	r2, #1
 8000fac:	d0f9      	beq.n	8000fa2 <__aeabi_fmul+0xce>
 8000fae:	ea40 000c 	orr.w	r0, r0, ip
 8000fb2:	f093 0f00 	teq	r3, #0
 8000fb6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fba:	bf02      	ittt	eq
 8000fbc:	0049      	lsleq	r1, r1, #1
 8000fbe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc2:	3b01      	subeq	r3, #1
 8000fc4:	d0f9      	beq.n	8000fba <__aeabi_fmul+0xe6>
 8000fc6:	ea41 010c 	orr.w	r1, r1, ip
 8000fca:	e78f      	b.n	8000eec <__aeabi_fmul+0x18>
 8000fcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd0:	ea92 0f0c 	teq	r2, ip
 8000fd4:	bf18      	it	ne
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d00a      	beq.n	8000ff2 <__aeabi_fmul+0x11e>
 8000fdc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fe0:	bf18      	it	ne
 8000fe2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fe6:	d1d8      	bne.n	8000f9a <__aeabi_fmul+0xc6>
 8000fe8:	ea80 0001 	eor.w	r0, r0, r1
 8000fec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ff0:	4770      	bx	lr
 8000ff2:	f090 0f00 	teq	r0, #0
 8000ff6:	bf17      	itett	ne
 8000ff8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ffc:	4608      	moveq	r0, r1
 8000ffe:	f091 0f00 	teqne	r1, #0
 8001002:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8001006:	d014      	beq.n	8001032 <__aeabi_fmul+0x15e>
 8001008:	ea92 0f0c 	teq	r2, ip
 800100c:	d101      	bne.n	8001012 <__aeabi_fmul+0x13e>
 800100e:	0242      	lsls	r2, r0, #9
 8001010:	d10f      	bne.n	8001032 <__aeabi_fmul+0x15e>
 8001012:	ea93 0f0c 	teq	r3, ip
 8001016:	d103      	bne.n	8001020 <__aeabi_fmul+0x14c>
 8001018:	024b      	lsls	r3, r1, #9
 800101a:	bf18      	it	ne
 800101c:	4608      	movne	r0, r1
 800101e:	d108      	bne.n	8001032 <__aeabi_fmul+0x15e>
 8001020:	ea80 0001 	eor.w	r0, r0, r1
 8001024:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8001028:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800102c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001030:	4770      	bx	lr
 8001032:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001036:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800103a:	4770      	bx	lr

0800103c <__aeabi_fdiv>:
 800103c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001040:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001044:	bf1e      	ittt	ne
 8001046:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800104a:	ea92 0f0c 	teqne	r2, ip
 800104e:	ea93 0f0c 	teqne	r3, ip
 8001052:	d069      	beq.n	8001128 <__aeabi_fdiv+0xec>
 8001054:	eba2 0203 	sub.w	r2, r2, r3
 8001058:	ea80 0c01 	eor.w	ip, r0, r1
 800105c:	0249      	lsls	r1, r1, #9
 800105e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001062:	d037      	beq.n	80010d4 <__aeabi_fdiv+0x98>
 8001064:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001068:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800106c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001070:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001074:	428b      	cmp	r3, r1
 8001076:	bf38      	it	cc
 8001078:	005b      	lslcc	r3, r3, #1
 800107a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800107e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001082:	428b      	cmp	r3, r1
 8001084:	bf24      	itt	cs
 8001086:	1a5b      	subcs	r3, r3, r1
 8001088:	ea40 000c 	orrcs.w	r0, r0, ip
 800108c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001090:	bf24      	itt	cs
 8001092:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001096:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800109a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800109e:	bf24      	itt	cs
 80010a0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80010a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80010a8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80010ac:	bf24      	itt	cs
 80010ae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80010b2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80010b6:	011b      	lsls	r3, r3, #4
 80010b8:	bf18      	it	ne
 80010ba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80010be:	d1e0      	bne.n	8001082 <__aeabi_fdiv+0x46>
 80010c0:	2afd      	cmp	r2, #253	; 0xfd
 80010c2:	f63f af50 	bhi.w	8000f66 <__aeabi_fmul+0x92>
 80010c6:	428b      	cmp	r3, r1
 80010c8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80010cc:	bf08      	it	eq
 80010ce:	f020 0001 	biceq.w	r0, r0, #1
 80010d2:	4770      	bx	lr
 80010d4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80010d8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80010dc:	327f      	adds	r2, #127	; 0x7f
 80010de:	bfc2      	ittt	gt
 80010e0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80010e4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80010e8:	4770      	bxgt	lr
 80010ea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80010ee:	f04f 0300 	mov.w	r3, #0
 80010f2:	3a01      	subs	r2, #1
 80010f4:	e737      	b.n	8000f66 <__aeabi_fmul+0x92>
 80010f6:	f092 0f00 	teq	r2, #0
 80010fa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80010fe:	bf02      	ittt	eq
 8001100:	0040      	lsleq	r0, r0, #1
 8001102:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001106:	3a01      	subeq	r2, #1
 8001108:	d0f9      	beq.n	80010fe <__aeabi_fdiv+0xc2>
 800110a:	ea40 000c 	orr.w	r0, r0, ip
 800110e:	f093 0f00 	teq	r3, #0
 8001112:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001116:	bf02      	ittt	eq
 8001118:	0049      	lsleq	r1, r1, #1
 800111a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800111e:	3b01      	subeq	r3, #1
 8001120:	d0f9      	beq.n	8001116 <__aeabi_fdiv+0xda>
 8001122:	ea41 010c 	orr.w	r1, r1, ip
 8001126:	e795      	b.n	8001054 <__aeabi_fdiv+0x18>
 8001128:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800112c:	ea92 0f0c 	teq	r2, ip
 8001130:	d108      	bne.n	8001144 <__aeabi_fdiv+0x108>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	f47f af7d 	bne.w	8001032 <__aeabi_fmul+0x15e>
 8001138:	ea93 0f0c 	teq	r3, ip
 800113c:	f47f af70 	bne.w	8001020 <__aeabi_fmul+0x14c>
 8001140:	4608      	mov	r0, r1
 8001142:	e776      	b.n	8001032 <__aeabi_fmul+0x15e>
 8001144:	ea93 0f0c 	teq	r3, ip
 8001148:	d104      	bne.n	8001154 <__aeabi_fdiv+0x118>
 800114a:	024b      	lsls	r3, r1, #9
 800114c:	f43f af4c 	beq.w	8000fe8 <__aeabi_fmul+0x114>
 8001150:	4608      	mov	r0, r1
 8001152:	e76e      	b.n	8001032 <__aeabi_fmul+0x15e>
 8001154:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001158:	bf18      	it	ne
 800115a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800115e:	d1ca      	bne.n	80010f6 <__aeabi_fdiv+0xba>
 8001160:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001164:	f47f af5c 	bne.w	8001020 <__aeabi_fmul+0x14c>
 8001168:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800116c:	f47f af3c 	bne.w	8000fe8 <__aeabi_fmul+0x114>
 8001170:	e75f      	b.n	8001032 <__aeabi_fmul+0x15e>
 8001172:	bf00      	nop

08001174 <__aeabi_d2lz>:
 8001174:	b538      	push	{r3, r4, r5, lr}
 8001176:	4605      	mov	r5, r0
 8001178:	460c      	mov	r4, r1
 800117a:	4628      	mov	r0, r5
 800117c:	4621      	mov	r1, r4
 800117e:	2200      	movs	r2, #0
 8001180:	2300      	movs	r3, #0
 8001182:	f7ff fcc3 	bl	8000b0c <__aeabi_dcmplt>
 8001186:	b928      	cbnz	r0, 8001194 <__aeabi_d2lz+0x20>
 8001188:	4628      	mov	r0, r5
 800118a:	4621      	mov	r1, r4
 800118c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001190:	f000 b80a 	b.w	80011a8 <__aeabi_d2ulz>
 8001194:	4628      	mov	r0, r5
 8001196:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800119a:	f000 f805 	bl	80011a8 <__aeabi_d2ulz>
 800119e:	4240      	negs	r0, r0
 80011a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a4:	bd38      	pop	{r3, r4, r5, pc}
 80011a6:	bf00      	nop

080011a8 <__aeabi_d2ulz>:
 80011a8:	b5d0      	push	{r4, r6, r7, lr}
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <__aeabi_d2ulz+0x34>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	4606      	mov	r6, r0
 80011b0:	460f      	mov	r7, r1
 80011b2:	f7ff fa39 	bl	8000628 <__aeabi_dmul>
 80011b6:	f7ff fd0f 	bl	8000bd8 <__aeabi_d2uiz>
 80011ba:	4604      	mov	r4, r0
 80011bc:	f7ff f9ba 	bl	8000534 <__aeabi_ui2d>
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <__aeabi_d2ulz+0x38>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	f7ff fa30 	bl	8000628 <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4630      	mov	r0, r6
 80011ce:	4639      	mov	r1, r7
 80011d0:	f7ff f872 	bl	80002b8 <__aeabi_dsub>
 80011d4:	f7ff fd00 	bl	8000bd8 <__aeabi_d2uiz>
 80011d8:	4621      	mov	r1, r4
 80011da:	bdd0      	pop	{r4, r6, r7, pc}
 80011dc:	3df00000 	.word	0x3df00000
 80011e0:	41f00000 	.word	0x41f00000

080011e4 <main>:
uint8_t *ptrTime;
uint8_t *ptrDate;
void nameMonth (uint8_t numberMonth);

/* Función principal del programa */
int main(void){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0

	/* inicialización de todos los elementos del sistema */
	initHardware();
 80011e8:	f000 f838 	bl	800125c <initHardware>

	/* Loop infinito */
	while(1){
		// Comunicacion para los comandos.
		if (rxData != '\0'){
 80011ec:	4b17      	ldr	r3, [pc, #92]	; (800124c <main+0x68>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d01f      	beq.n	8001234 <main+0x50>
			bufferReception[counterReception] = rxData;
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <main+0x6c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b14      	ldr	r3, [pc, #80]	; (800124c <main+0x68>)
 80011fc:	7819      	ldrb	r1, [r3, #0]
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <main+0x70>)
 8001200:	5499      	strb	r1, [r3, r2]
			counterReception++;
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <main+0x6c>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <main+0x6c>)
 800120c:	701a      	strb	r2, [r3, #0]
			if(rxData == '@'){
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <main+0x68>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b40      	cmp	r3, #64	; 0x40
 8001214:	d10b      	bne.n	800122e <main+0x4a>
				stringComplete = true;
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <main+0x74>)
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
				bufferReception[counterReception] = '\0';
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <main+0x6c>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <main+0x70>)
 8001224:	2100      	movs	r1, #0
 8001226:	5499      	strb	r1, [r3, r2]
				counterReception = 0;
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <main+0x6c>)
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]
			}
			rxData = '\0';
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <main+0x68>)
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
		}
		// Envio de los strings
		if(stringComplete){
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <main+0x74>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0d7      	beq.n	80011ec <main+0x8>
			parseCommands(bufferReception);
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <main+0x70>)
 800123e:	f000 f96f 	bl	8001520 <parseCommands>
			stringComplete = false;
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <main+0x74>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
		if (rxData != '\0'){
 8001248:	e7d0      	b.n	80011ec <main+0x8>
 800124a:	bf00      	nop
 800124c:	20000bb0 	.word	0x20000bb0
 8001250:	20003bc4 	.word	0x20003bc4
 8001254:	20003bc8 	.word	0x20003bc8
 8001258:	20003c48 	.word	0x20003c48

0800125c <initHardware>:
	}
	return 0;
}// Final del main

// Función donde se configuran los pines en general.
void initHardware(void){
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0

	// Se desactiva el reloj HSE porque PH0 está conectado a un oscilador HSE.
	RCC->CR &= ~(RCC_CR_HSEON);
 8001260:	4b96      	ldr	r3, [pc, #600]	; (80014bc <initHardware+0x260>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a95      	ldr	r2, [pc, #596]	; (80014bc <initHardware+0x260>)
 8001266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126a:	6013      	str	r3, [r2, #0]

	// Se configura el PLL con los parámetros dados.
	handlerPLL.PLL_Config.PLL_voltage		= VOLTAGE_100MHZ;
 800126c:	4b94      	ldr	r3, [pc, #592]	; (80014c0 <initHardware+0x264>)
 800126e:	2202      	movs	r2, #2
 8001270:	701a      	strb	r2, [r3, #0]
	handlerPLL.PLL_Config.PLL_frecuency		= FRECUENCY_100MHZ;
 8001272:	4b93      	ldr	r3, [pc, #588]	; (80014c0 <initHardware+0x264>)
 8001274:	2200      	movs	r2, #0
 8001276:	705a      	strb	r2, [r3, #1]
	PLL_Config(&handlerPLL);
 8001278:	4891      	ldr	r0, [pc, #580]	; (80014c0 <initHardware+0x264>)
 800127a:	f001 fb29 	bl	80028d0 <PLL_Config>
	getConfigPLL();
 800127e:	f001 fc63 	bl	8002b48 <getConfigPLL>

	/* Configuración del LED de estado */
	handlerStateLED.pGPIOx 									= GPIOH;
 8001282:	4b90      	ldr	r3, [pc, #576]	; (80014c4 <initHardware+0x268>)
 8001284:	4a90      	ldr	r2, [pc, #576]	; (80014c8 <initHardware+0x26c>)
 8001286:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber 			= PIN_1;
 8001288:	4b8e      	ldr	r3, [pc, #568]	; (80014c4 <initHardware+0x268>)
 800128a:	2201      	movs	r2, #1
 800128c:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode 			= GPIO_MODE_OUT;
 800128e:	4b8d      	ldr	r3, [pc, #564]	; (80014c4 <initHardware+0x268>)
 8001290:	2201      	movs	r2, #1
 8001292:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType 			= GPIO_OTYPE_PUSHPULL;
 8001294:	4b8b      	ldr	r3, [pc, #556]	; (80014c4 <initHardware+0x268>)
 8001296:	2200      	movs	r2, #0
 8001298:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed 			= GPIO_OSPEED_FAST;
 800129a:	4b8a      	ldr	r3, [pc, #552]	; (80014c4 <initHardware+0x268>)
 800129c:	2202      	movs	r2, #2
 800129e:	719a      	strb	r2, [r3, #6]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl 		= GPIO_PUPDR_NOTHING;
 80012a0:	4b88      	ldr	r3, [pc, #544]	; (80014c4 <initHardware+0x268>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	71da      	strb	r2, [r3, #7]
	GPIO_Config(&handlerStateLED);
 80012a6:	4887      	ldr	r0, [pc, #540]	; (80014c4 <initHardware+0x268>)
 80012a8:	f001 f812 	bl	80022d0 <GPIO_Config>

	/* Configuración del TIM2 para que haga un blinky cada 250 ms */
	handlerBlinkyTimer.ptrTIMx 								= TIM2;
 80012ac:	4b87      	ldr	r3, [pc, #540]	; (80014cc <initHardware+0x270>)
 80012ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012b2:	601a      	str	r2, [r3, #0]
	handlerBlinkyTimer.TIMx_Config.TIMx_mode 				= BTIMER_MODE_UP;
 80012b4:	4b85      	ldr	r3, [pc, #532]	; (80014cc <initHardware+0x270>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	711a      	strb	r2, [r3, #4]
	handlerBlinkyTimer.TIMx_Config.TIMx_speed				= BTIMER_SPEED_100MHz;
 80012ba:	4b84      	ldr	r3, [pc, #528]	; (80014cc <initHardware+0x270>)
 80012bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80012c0:	609a      	str	r2, [r3, #8]
	handlerBlinkyTimer.TIMx_Config.TIMx_period 				= 2500;
 80012c2:	4b82      	ldr	r3, [pc, #520]	; (80014cc <initHardware+0x270>)
 80012c4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80012c8:	60da      	str	r2, [r3, #12]
	handlerBlinkyTimer.TIMx_Config.TIMx_interruptEnable 	= BTIMER_INTERRUPT_ENABLE;
 80012ca:	4b80      	ldr	r3, [pc, #512]	; (80014cc <initHardware+0x270>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	741a      	strb	r2, [r3, #16]
	BasicTimer_Config(&handlerBlinkyTimer);
 80012d0:	487e      	ldr	r0, [pc, #504]	; (80014cc <initHardware+0x270>)
 80012d2:	f000 ff09 	bl	80020e8 <BasicTimer_Config>

	/* Timer para las banderas necesarias para el muestreo del acelerometro */
	handlerTimer4.ptrTIMx 								    = TIM4;
 80012d6:	4b7e      	ldr	r3, [pc, #504]	; (80014d0 <initHardware+0x274>)
 80012d8:	4a7e      	ldr	r2, [pc, #504]	; (80014d4 <initHardware+0x278>)
 80012da:	601a      	str	r2, [r3, #0]
	handlerTimer4.TIMx_Config.TIMx_mode 				    = BTIMER_MODE_UP;
 80012dc:	4b7c      	ldr	r3, [pc, #496]	; (80014d0 <initHardware+0x274>)
 80012de:	2200      	movs	r2, #0
 80012e0:	711a      	strb	r2, [r3, #4]
	handlerTimer4.TIMx_Config.TIMx_speed				    = BTIMER_SPEED_100MHz;
 80012e2:	4b7b      	ldr	r3, [pc, #492]	; (80014d0 <initHardware+0x274>)
 80012e4:	f242 7210 	movw	r2, #10000	; 0x2710
 80012e8:	609a      	str	r2, [r3, #8]
	handlerTimer4.TIMx_Config.TIMx_period 				    = 50;
 80012ea:	4b79      	ldr	r3, [pc, #484]	; (80014d0 <initHardware+0x274>)
 80012ec:	2232      	movs	r2, #50	; 0x32
 80012ee:	60da      	str	r2, [r3, #12]
	handlerTimer4.TIMx_Config.TIMx_interruptEnable 	        = BTIMER_INTERRUPT_ENABLE;
 80012f0:	4b77      	ldr	r3, [pc, #476]	; (80014d0 <initHardware+0x274>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	741a      	strb	r2, [r3, #16]
	BasicTimer_Config(&handlerTimer4);
 80012f6:	4876      	ldr	r0, [pc, #472]	; (80014d0 <initHardware+0x274>)
 80012f8:	f000 fef6 	bl	80020e8 <BasicTimer_Config>

	/* Configuración del USART */
	// Transmisión
	handlerUSARTPINTX.pGPIOx  							= GPIOA;
 80012fc:	4b76      	ldr	r3, [pc, #472]	; (80014d8 <initHardware+0x27c>)
 80012fe:	4a77      	ldr	r2, [pc, #476]	; (80014dc <initHardware+0x280>)
 8001300:	601a      	str	r2, [r3, #0]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinNumber 	= PIN_11;
 8001302:	4b75      	ldr	r3, [pc, #468]	; (80014d8 <initHardware+0x27c>)
 8001304:	220b      	movs	r2, #11
 8001306:	711a      	strb	r2, [r3, #4]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFN;
 8001308:	4b73      	ldr	r3, [pc, #460]	; (80014d8 <initHardware+0x27c>)
 800130a:	2202      	movs	r2, #2
 800130c:	715a      	strb	r2, [r3, #5]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinAltFunMode = AF8;
 800130e:	4b72      	ldr	r3, [pc, #456]	; (80014d8 <initHardware+0x27c>)
 8001310:	2208      	movs	r2, #8
 8001312:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerUSARTPINTX);
 8001314:	4870      	ldr	r0, [pc, #448]	; (80014d8 <initHardware+0x27c>)
 8001316:	f000 ffdb 	bl	80022d0 <GPIO_Config>

	// Recepción
	handlerUSARTPINRX.pGPIOx 						 	= GPIOA;
 800131a:	4b71      	ldr	r3, [pc, #452]	; (80014e0 <initHardware+0x284>)
 800131c:	4a6f      	ldr	r2, [pc, #444]	; (80014dc <initHardware+0x280>)
 800131e:	601a      	str	r2, [r3, #0]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinNumber		= PIN_12;
 8001320:	4b6f      	ldr	r3, [pc, #444]	; (80014e0 <initHardware+0x284>)
 8001322:	220c      	movs	r2, #12
 8001324:	711a      	strb	r2, [r3, #4]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFN;
 8001326:	4b6e      	ldr	r3, [pc, #440]	; (80014e0 <initHardware+0x284>)
 8001328:	2202      	movs	r2, #2
 800132a:	715a      	strb	r2, [r3, #5]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinAltFunMode = AF8;
 800132c:	4b6c      	ldr	r3, [pc, #432]	; (80014e0 <initHardware+0x284>)
 800132e:	2208      	movs	r2, #8
 8001330:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerUSARTPINRX);
 8001332:	486b      	ldr	r0, [pc, #428]	; (80014e0 <initHardware+0x284>)
 8001334:	f000 ffcc 	bl	80022d0 <GPIO_Config>

	// Para el USART 6
	USART6Comm.ptrUSARTx 					= USART6;
 8001338:	4b6a      	ldr	r3, [pc, #424]	; (80014e4 <initHardware+0x288>)
 800133a:	4a6b      	ldr	r2, [pc, #428]	; (80014e8 <initHardware+0x28c>)
 800133c:	601a      	str	r2, [r3, #0]
	USART6Comm.USART_Config.USART_baudrate 	= USART_BAUDRATE_115200;
 800133e:	4b69      	ldr	r3, [pc, #420]	; (80014e4 <initHardware+0x288>)
 8001340:	2202      	movs	r2, #2
 8001342:	715a      	strb	r2, [r3, #5]
	USART6Comm.USART_Config.USART_datasize 	= USART_DATASIZE_8BIT;
 8001344:	4b67      	ldr	r3, [pc, #412]	; (80014e4 <initHardware+0x288>)
 8001346:	2200      	movs	r2, #0
 8001348:	719a      	strb	r2, [r3, #6]
	USART6Comm.USART_Config.USART_parity 	= USART_PARITY_NONE;
 800134a:	4b66      	ldr	r3, [pc, #408]	; (80014e4 <initHardware+0x288>)
 800134c:	2200      	movs	r2, #0
 800134e:	71da      	strb	r2, [r3, #7]
	USART6Comm.USART_Config.USART_mode 		= USART_MODE_RXTX;
 8001350:	4b64      	ldr	r3, [pc, #400]	; (80014e4 <initHardware+0x288>)
 8001352:	2202      	movs	r2, #2
 8001354:	711a      	strb	r2, [r3, #4]
	USART6Comm.USART_Config.USART_stopbits 	= USART_STOPBIT_1;
 8001356:	4b63      	ldr	r3, [pc, #396]	; (80014e4 <initHardware+0x288>)
 8001358:	2200      	movs	r2, #0
 800135a:	721a      	strb	r2, [r3, #8]
	USART6Comm.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;
 800135c:	4b61      	ldr	r3, [pc, #388]	; (80014e4 <initHardware+0x288>)
 800135e:	2201      	movs	r2, #1
 8001360:	725a      	strb	r2, [r3, #9]

	// Se carga lo hecho sobre el USART
	USART_Config(&USART6Comm);
 8001362:	4860      	ldr	r0, [pc, #384]	; (80014e4 <initHardware+0x288>)
 8001364:	f002 f8c8 	bl	80034f8 <USART_Config>

	/* Configuración ADC */
	// Cargando la configuración para la conversación ADC
	adcConfig.dataAlignment			= ADC_ALIGNMENT_RIGHT;
 8001368:	4b60      	ldr	r3, [pc, #384]	; (80014ec <initHardware+0x290>)
 800136a:	2200      	movs	r2, #0
 800136c:	711a      	strb	r2, [r3, #4]
	adcConfig.resolution			= ADC_RESOLUTION_12_BIT;
 800136e:	4b5f      	ldr	r3, [pc, #380]	; (80014ec <initHardware+0x290>)
 8001370:	2200      	movs	r2, #0
 8001372:	705a      	strb	r2, [r3, #1]
	adcConfig.samplingPeriod		= ADC_SAMPLING_PERIOD_28_CYCLES;
 8001374:	4b5d      	ldr	r3, [pc, #372]	; (80014ec <initHardware+0x290>)
 8001376:	2202      	movs	r2, #2
 8001378:	805a      	strh	r2, [r3, #2]
	adcConfig.AdcEventType			= TIMER_ADC_EVENT;
 800137a:	4b5c      	ldr	r3, [pc, #368]	; (80014ec <initHardware+0x290>)
 800137c:	2201      	movs	r2, #1
 800137e:	721a      	strb	r2, [r3, #8]
	adcConfig.AdcChannelEvent		= TIM5_CH3;
 8001380:	4b5a      	ldr	r3, [pc, #360]	; (80014ec <initHardware+0x290>)
 8001382:	220a      	movs	r2, #10
 8001384:	725a      	strb	r2, [r3, #9]
	adcConfig.adcMultiChannel[0] 	= ADC_CHANNEL_0;
 8001386:	4b59      	ldr	r3, [pc, #356]	; (80014ec <initHardware+0x290>)
 8001388:	2200      	movs	r2, #0
 800138a:	729a      	strb	r2, [r3, #10]
	adcConfig.adcMultiChannel[1]	= ADC_CHANNEL_1;
 800138c:	4b57      	ldr	r3, [pc, #348]	; (80014ec <initHardware+0x290>)
 800138e:	2201      	movs	r2, #1
 8001390:	72da      	strb	r2, [r3, #11]
	adcMultiChannel(&adcConfig, 2);
 8001392:	2102      	movs	r1, #2
 8001394:	4855      	ldr	r0, [pc, #340]	; (80014ec <initHardware+0x290>)
 8001396:	f002 fcc9 	bl	8003d2c <adcMultiChannel>
	adcConfigEvents(&adcConfig);
 800139a:	4854      	ldr	r0, [pc, #336]	; (80014ec <initHardware+0x290>)
 800139c:	f002 fc3a 	bl	8003c14 <adcConfigEvents>

	// El PWM para muestrear la señal a la frecuencias que se quiere.
	HandlerPWM_1.pGPIOx          					= GPIOC;
 80013a0:	4b53      	ldr	r3, [pc, #332]	; (80014f0 <initHardware+0x294>)
 80013a2:	4a54      	ldr	r2, [pc, #336]	; (80014f4 <initHardware+0x298>)
 80013a4:	601a      	str	r2, [r3, #0]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinNumber  	= PIN_7;
 80013a6:	4b52      	ldr	r3, [pc, #328]	; (80014f0 <initHardware+0x294>)
 80013a8:	2207      	movs	r2, #7
 80013aa:	711a      	strb	r2, [r3, #4]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 80013ac:	4b50      	ldr	r3, [pc, #320]	; (80014f0 <initHardware+0x294>)
 80013ae:	2202      	movs	r2, #2
 80013b0:	715a      	strb	r2, [r3, #5]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 80013b2:	4b4f      	ldr	r3, [pc, #316]	; (80014f0 <initHardware+0x294>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	721a      	strb	r2, [r3, #8]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80013b8:	4b4d      	ldr	r3, [pc, #308]	; (80014f0 <initHardware+0x294>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	71da      	strb	r2, [r3, #7]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 80013be:	4b4c      	ldr	r3, [pc, #304]	; (80014f0 <initHardware+0x294>)
 80013c0:	2202      	movs	r2, #2
 80013c2:	719a      	strb	r2, [r3, #6]
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 80013c4:	4b4a      	ldr	r3, [pc, #296]	; (80014f0 <initHardware+0x294>)
 80013c6:	2202      	movs	r2, #2
 80013c8:	725a      	strb	r2, [r3, #9]
	// Se carga GPIO del PWM.
	GPIO_Config(&HandlerPWM_1);
 80013ca:	4849      	ldr	r0, [pc, #292]	; (80014f0 <initHardware+0x294>)
 80013cc:	f000 ff80 	bl	80022d0 <GPIO_Config>

	handlerTIM3PWM_1.ptrTIMx           	  =   TIM5;
 80013d0:	4b49      	ldr	r3, [pc, #292]	; (80014f8 <initHardware+0x29c>)
 80013d2:	4a4a      	ldr	r2, [pc, #296]	; (80014fc <initHardware+0x2a0>)
 80013d4:	601a      	str	r2, [r3, #0]
	handlerTIM3PWM_1.config.channel       =   PWM_CHANNEL_3;
 80013d6:	4b48      	ldr	r3, [pc, #288]	; (80014f8 <initHardware+0x29c>)
 80013d8:	2202      	movs	r2, #2
 80013da:	711a      	strb	r2, [r3, #4]
	handlerTIM3PWM_1.config.duttyCicle    =   1500;
 80013dc:	4b46      	ldr	r3, [pc, #280]	; (80014f8 <initHardware+0x29c>)
 80013de:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80013e2:	81da      	strh	r2, [r3, #14]
	handlerTIM3PWM_1.config.periodo       =   20000;
 80013e4:	4b44      	ldr	r3, [pc, #272]	; (80014f8 <initHardware+0x29c>)
 80013e6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80013ea:	819a      	strh	r2, [r3, #12]
	handlerTIM3PWM_1.config.prescaler     =   100;
 80013ec:	4b42      	ldr	r3, [pc, #264]	; (80014f8 <initHardware+0x29c>)
 80013ee:	2264      	movs	r2, #100	; 0x64
 80013f0:	609a      	str	r2, [r3, #8]
	// Se carga el PWM.
	pwm_Config(&handlerTIM3PWM_1);
 80013f2:	4841      	ldr	r0, [pc, #260]	; (80014f8 <initHardware+0x29c>)
 80013f4:	f001 fc86 	bl	8002d04 <pwm_Config>
	// Se habilita la señal.
	enableOutput(&handlerTIM3PWM_1);
 80013f8:	483f      	ldr	r0, [pc, #252]	; (80014f8 <initHardware+0x29c>)
 80013fa:	f001 fd59 	bl	8002eb0 <enableOutput>
	startPwmSignal(&handlerTIM3PWM_1);
 80013fe:	483e      	ldr	r0, [pc, #248]	; (80014f8 <initHardware+0x29c>)
 8001400:	f001 fd44 	bl	8002e8c <startPwmSignal>

	/* Salidas de las frecuencias de los relojes por comando */
	handlerPinFrecuency.pGPIOx 									= GPIOA;
 8001404:	4b3e      	ldr	r3, [pc, #248]	; (8001500 <initHardware+0x2a4>)
 8001406:	4a35      	ldr	r2, [pc, #212]	; (80014dc <initHardware+0x280>)
 8001408:	601a      	str	r2, [r3, #0]
	handlerPinFrecuency.GPIO_PinConfig.GPIO_PinNumber 			= PIN_8;
 800140a:	4b3d      	ldr	r3, [pc, #244]	; (8001500 <initHardware+0x2a4>)
 800140c:	2208      	movs	r2, #8
 800140e:	711a      	strb	r2, [r3, #4]
	handlerPinFrecuency.GPIO_PinConfig.GPIO_PinMode 			= GPIO_MODE_ALTFN;
 8001410:	4b3b      	ldr	r3, [pc, #236]	; (8001500 <initHardware+0x2a4>)
 8001412:	2202      	movs	r2, #2
 8001414:	715a      	strb	r2, [r3, #5]
	handlerPinFrecuency.GPIO_PinConfig.GPIO_PinAltFunMode 		= AF0;
 8001416:	4b3a      	ldr	r3, [pc, #232]	; (8001500 <initHardware+0x2a4>)
 8001418:	2200      	movs	r2, #0
 800141a:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerPinFrecuency);
 800141c:	4838      	ldr	r0, [pc, #224]	; (8001500 <initHardware+0x2a4>)
 800141e:	f000 ff57 	bl	80022d0 <GPIO_Config>

	// Para el RTC.
	handlerRTC.RTC_Days = 1;
 8001422:	4b38      	ldr	r3, [pc, #224]	; (8001504 <initHardware+0x2a8>)
 8001424:	2201      	movs	r2, #1
 8001426:	70da      	strb	r2, [r3, #3]
	handlerRTC.RTC_Hours = 10;
 8001428:	4b36      	ldr	r3, [pc, #216]	; (8001504 <initHardware+0x2a8>)
 800142a:	220a      	movs	r2, #10
 800142c:	701a      	strb	r2, [r3, #0]
	handlerRTC.RTC_Minutes = 30;
 800142e:	4b35      	ldr	r3, [pc, #212]	; (8001504 <initHardware+0x2a8>)
 8001430:	221e      	movs	r2, #30
 8001432:	705a      	strb	r2, [r3, #1]
	handlerRTC.RTC_Seconds = 10;
 8001434:	4b33      	ldr	r3, [pc, #204]	; (8001504 <initHardware+0x2a8>)
 8001436:	220a      	movs	r2, #10
 8001438:	709a      	strb	r2, [r3, #2]
	// Se carga la configuración sobre el RTC.
	rtc_Config(&handlerRTC);
 800143a:	4832      	ldr	r0, [pc, #200]	; (8001504 <initHardware+0x2a8>)
 800143c:	f001 fddc 	bl	8002ff8 <rtc_Config>

	//Configuración I2C
	// Para el acelerómetro ADXL-345
	SCL.pGPIOx                                    = GPIOB;
 8001440:	4b31      	ldr	r3, [pc, #196]	; (8001508 <initHardware+0x2ac>)
 8001442:	4a32      	ldr	r2, [pc, #200]	; (800150c <initHardware+0x2b0>)
 8001444:	601a      	str	r2, [r3, #0]
	SCL.GPIO_PinConfig.GPIO_PinNumber             = PIN_8;
 8001446:	4b30      	ldr	r3, [pc, #192]	; (8001508 <initHardware+0x2ac>)
 8001448:	2208      	movs	r2, #8
 800144a:	711a      	strb	r2, [r3, #4]
	SCL.GPIO_PinConfig.GPIO_PinMode               = GPIO_MODE_ALTFN;
 800144c:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <initHardware+0x2ac>)
 800144e:	2202      	movs	r2, #2
 8001450:	715a      	strb	r2, [r3, #5]
	SCL.GPIO_PinConfig.GPIO_PinOPType             = GPIO_OTYPE_OPENDRAIN;
 8001452:	4b2d      	ldr	r3, [pc, #180]	; (8001508 <initHardware+0x2ac>)
 8001454:	2201      	movs	r2, #1
 8001456:	721a      	strb	r2, [r3, #8]
	SCL.GPIO_PinConfig.GPIO_PinPuPdControl        = GPIO_PUPDR_NOTHING;
 8001458:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <initHardware+0x2ac>)
 800145a:	2200      	movs	r2, #0
 800145c:	71da      	strb	r2, [r3, #7]
	SCL.GPIO_PinConfig.GPIO_PinSpeed              = GPIO_OSPEED_FAST;
 800145e:	4b2a      	ldr	r3, [pc, #168]	; (8001508 <initHardware+0x2ac>)
 8001460:	2202      	movs	r2, #2
 8001462:	719a      	strb	r2, [r3, #6]
	SCL.GPIO_PinConfig.GPIO_PinAltFunMode         = AF4;
 8001464:	4b28      	ldr	r3, [pc, #160]	; (8001508 <initHardware+0x2ac>)
 8001466:	2204      	movs	r2, #4
 8001468:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&SCL);
 800146a:	4827      	ldr	r0, [pc, #156]	; (8001508 <initHardware+0x2ac>)
 800146c:	f000 ff30 	bl	80022d0 <GPIO_Config>
	// SDA pin del ADXL-345
	SDA.pGPIOx                                    = GPIOB;
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <initHardware+0x2b4>)
 8001472:	4a26      	ldr	r2, [pc, #152]	; (800150c <initHardware+0x2b0>)
 8001474:	601a      	str	r2, [r3, #0]
	SDA.GPIO_PinConfig.GPIO_PinNumber             = PIN_9;
 8001476:	4b26      	ldr	r3, [pc, #152]	; (8001510 <initHardware+0x2b4>)
 8001478:	2209      	movs	r2, #9
 800147a:	711a      	strb	r2, [r3, #4]
	SDA.GPIO_PinConfig.GPIO_PinMode               = GPIO_MODE_ALTFN;
 800147c:	4b24      	ldr	r3, [pc, #144]	; (8001510 <initHardware+0x2b4>)
 800147e:	2202      	movs	r2, #2
 8001480:	715a      	strb	r2, [r3, #5]
	SDA.GPIO_PinConfig.GPIO_PinOPType             = GPIO_OTYPE_OPENDRAIN;
 8001482:	4b23      	ldr	r3, [pc, #140]	; (8001510 <initHardware+0x2b4>)
 8001484:	2201      	movs	r2, #1
 8001486:	721a      	strb	r2, [r3, #8]
	SDA.GPIO_PinConfig.GPIO_PinPuPdControl        = GPIO_PUPDR_NOTHING;
 8001488:	4b21      	ldr	r3, [pc, #132]	; (8001510 <initHardware+0x2b4>)
 800148a:	2200      	movs	r2, #0
 800148c:	71da      	strb	r2, [r3, #7]
	SDA.GPIO_PinConfig.GPIO_PinSpeed              = GPIO_OSPEED_FAST;
 800148e:	4b20      	ldr	r3, [pc, #128]	; (8001510 <initHardware+0x2b4>)
 8001490:	2202      	movs	r2, #2
 8001492:	719a      	strb	r2, [r3, #6]
	SDA.GPIO_PinConfig.GPIO_PinAltFunMode         = AF4;
 8001494:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <initHardware+0x2b4>)
 8001496:	2204      	movs	r2, #4
 8001498:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&SDA);
 800149a:	481d      	ldr	r0, [pc, #116]	; (8001510 <initHardware+0x2b4>)
 800149c:	f000 ff18 	bl	80022d0 <GPIO_Config>
	// Se carga en el I2C.
	Acelerometer.ptrI2Cx                            = I2C1;
 80014a0:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <initHardware+0x2b8>)
 80014a2:	4a1d      	ldr	r2, [pc, #116]	; (8001518 <initHardware+0x2bc>)
 80014a4:	601a      	str	r2, [r3, #0]
	Acelerometer.modeI2C                            = I2C_MODE_FM;
 80014a6:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <initHardware+0x2b8>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	715a      	strb	r2, [r3, #5]
	Acelerometer.slaveAddress                       = ACCEL_ADDRESS;
 80014ac:	4b19      	ldr	r3, [pc, #100]	; (8001514 <initHardware+0x2b8>)
 80014ae:	221d      	movs	r2, #29
 80014b0:	711a      	strb	r2, [r3, #4]
	i2c_config(&Acelerometer);
 80014b2:	4818      	ldr	r0, [pc, #96]	; (8001514 <initHardware+0x2b8>)
 80014b4:	f001 f84a 	bl	800254c <i2c_config>


} // Fin initHardware
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40023800 	.word	0x40023800
 80014c0:	20000b8c 	.word	0x20000b8c
 80014c4:	20000234 	.word	0x20000234
 80014c8:	40021c00 	.word	0x40021c00
 80014cc:	20000264 	.word	0x20000264
 80014d0:	20000278 	.word	0x20000278
 80014d4:	40000800 	.word	0x40000800
 80014d8:	20000240 	.word	0x20000240
 80014dc:	40020000 	.word	0x40020000
 80014e0:	2000024c 	.word	0x2000024c
 80014e4:	20000298 	.word	0x20000298
 80014e8:	40011400 	.word	0x40011400
 80014ec:	2000028c 	.word	0x2000028c
 80014f0:	20000b70 	.word	0x20000b70
 80014f4:	40020800 	.word	0x40020800
 80014f8:	20000b7c 	.word	0x20000b7c
 80014fc:	40000c00 	.word	0x40000c00
 8001500:	20000258 	.word	0x20000258
 8001504:	20003c98 	.word	0x20003c98
 8001508:	20000b9c 	.word	0x20000b9c
 800150c:	40020400 	.word	0x40020400
 8001510:	20000b90 	.word	0x20000b90
 8001514:	20000ba8 	.word	0x20000ba8
 8001518:	40005400 	.word	0x40005400
 800151c:	00000000 	.word	0x00000000

08001520 <parseCommands>:

void parseCommands(char *ptrBufferReception){
 8001520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001524:	b08d      	sub	sp, #52	; 0x34
 8001526:	af04      	add	r7, sp, #16
 8001528:	6078      	str	r0, [r7, #4]
	 * en cuenta la funcion que cumple coolterm para enviar strings de acuerdo a la función
	 * que necesita que realice el sistema. Debe informarse al usuario que la recomendacion
	 * inicial es que use el comando "help" que despliega un menu de ayuda que le dice cuales
	 * son los comandos y la forma de introducirlos de acuerdo con la función que se requiere.
	 */
	sscanf(ptrBufferReception,"%s %u %u %u %s",cmd,&firstParameter,&secondParameter,&thirdparameter,userMsg);
 800152a:	4ba1      	ldr	r3, [pc, #644]	; (80017b0 <parseCommands+0x290>)
 800152c:	9302      	str	r3, [sp, #8]
 800152e:	4ba1      	ldr	r3, [pc, #644]	; (80017b4 <parseCommands+0x294>)
 8001530:	9301      	str	r3, [sp, #4]
 8001532:	4ba1      	ldr	r3, [pc, #644]	; (80017b8 <parseCommands+0x298>)
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	4ba1      	ldr	r3, [pc, #644]	; (80017bc <parseCommands+0x29c>)
 8001538:	4aa1      	ldr	r2, [pc, #644]	; (80017c0 <parseCommands+0x2a0>)
 800153a:	49a2      	ldr	r1, [pc, #648]	; (80017c4 <parseCommands+0x2a4>)
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f003 fc21 	bl	8004d84 <siscanf>
	//Este primer comando imprime una lista con los otros comandos que tiene el equipo
	if (strcmp(cmd, "help") == 0){
 8001542:	49a1      	ldr	r1, [pc, #644]	; (80017c8 <parseCommands+0x2a8>)
 8001544:	489e      	ldr	r0, [pc, #632]	; (80017c0 <parseCommands+0x2a0>)
 8001546:	f7fe fe4b 	bl	80001e0 <strcmp>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	f040 80f5 	bne.w	800173c <parseCommands+0x21c>
		writeMsg(&USART6Comm, "QUE ESTE MENU DE AYUDA TE ACOMPANE\n");
 8001552:	499e      	ldr	r1, [pc, #632]	; (80017cc <parseCommands+0x2ac>)
 8001554:	489e      	ldr	r0, [pc, #632]	; (80017d0 <parseCommands+0x2b0>)
 8001556:	f002 f9ec 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "⠀⢀⣠⣄⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣴⣶⡾⠿⠿⠿⠿⢷⣶⣦⣤⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 800155a:	499e      	ldr	r1, [pc, #632]	; (80017d4 <parseCommands+0x2b4>)
 800155c:	489c      	ldr	r0, [pc, #624]	; (80017d0 <parseCommands+0x2b0>)
 800155e:	f002 f9e8 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "⢰⣿⡟⠛⠛⠛⠻⠿⠿⢿⣶⣶⣦⣤⣤⣀⣀⡀⣀⣴⣾⡿⠟⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠻⢿⣷⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣀⣀⣀⣀⡀\n");
 8001562:	499d      	ldr	r1, [pc, #628]	; (80017d8 <parseCommands+0x2b8>)
 8001564:	489a      	ldr	r0, [pc, #616]	; (80017d0 <parseCommands+0x2b0>)
 8001566:	f002 f9e4 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "⠀⠻⣿⣦⡀⠀⠉⠓⠶⢦⣄⣀⠉⠉⠛⠛⠻⠿⠟⠋⠁⠀⠀⠀⣤⡀⠀⠀⢠⠀⠀⠀⣠⠀⠀⠀⠀⠈⠙⠻⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠟⠛⠛⢻⣿\n");
 800156a:	499c      	ldr	r1, [pc, #624]	; (80017dc <parseCommands+0x2bc>)
 800156c:	4898      	ldr	r0, [pc, #608]	; (80017d0 <parseCommands+0x2b0>)
 800156e:	f002 f9e0 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠈⠻⣿⣦⠀⠀⠀⠀⠈⠙⠻⢷⣶⣤⡀⠀⠀⠀⠀⢀⣀⡀⠀⠙⢷⡀⠸⡇⠀⣰⠇⠀⢀⣀⣀⠀⠀⠀⠀⠀⠀⣀⣠⣤⣤⣶⡶⠶⠶⠒⠂⠀⠀⣠⣾⠟\n");
 8001572:	499b      	ldr	r1, [pc, #620]	; (80017e0 <parseCommands+0x2c0>)
 8001574:	4896      	ldr	r0, [pc, #600]	; (80017d0 <parseCommands+0x2b0>)
 8001576:	f002 f9dc 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠈⢿⣷⡀⠀⠀⠀⠀⠀⠀⠈⢻⣿⡄⣠⣴⣿⣯⣭⣽⣷⣆⠀⠁⠀⠀⠀⠀⢠⣾⣿⣿⣿⣿⣦⡀⠀⣠⣾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠀⣠⣾⡟⠁⠀\n");
 800157a:	499a      	ldr	r1, [pc, #616]	; (80017e4 <parseCommands+0x2c4>)
 800157c:	4894      	ldr	r0, [pc, #592]	; (80017d0 <parseCommands+0x2b0>)
 800157e:	f002 f9d8 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠈⢻⣷⣄⠀⠀⠀⠀⠀⠀⠀⣿⡗⢻⣿⣧⣽⣿⣿⣿⣧⠀⠀⣀⣀⠀⢠⣿⣧⣼⣿⣿⣿⣿⠗⠰⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⡿⠋⠀⠀⠀\n");
 8001582:	4999      	ldr	r1, [pc, #612]	; (80017e8 <parseCommands+0x2c8>)
 8001584:	4892      	ldr	r0, [pc, #584]	; (80017d0 <parseCommands+0x2b0>)
 8001586:	f002 f9d4 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠀⠀⠙⢿⣶⣄⡀⠀⠀⠀⠀⠸⠃⠈⠻⣿⣿⣿⣿⣿⡿⠃⠾⣥⡬⠗⠸⣿⣿⣿⣿⣿⡿⠛⠀⢀⡟⠀⠀⠀⠀⠀⠀⣀⣠⣾⡿⠋⠀⠀⠀⠀⠀\n");
 800158a:	4998      	ldr	r1, [pc, #608]	; (80017ec <parseCommands+0x2cc>)
 800158c:	4890      	ldr	r0, [pc, #576]	; (80017d0 <parseCommands+0x2b0>)
 800158e:	f002 f9d0 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠿⣷⣶⣤⣤⣄⣰⣄⠀⠀⠉⠉⠉⠁⠀⢀⣀⣠⣄⣀⡀⠀⠉⠉⠉⠀⠀⢀⣠⣾⣥⣤⣤⣤⣶⣶⡿⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀\n");
 8001592:	4997      	ldr	r1, [pc, #604]	; (80017f0 <parseCommands+0x2d0>)
 8001594:	488e      	ldr	r0, [pc, #568]	; (80017d0 <parseCommands+0x2b0>)
 8001596:	f002 f9cc 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⢻⣿⠛⢿⣷⣦⣤⣴⣶⣶⣦⣤⣤⣤⣤⣬⣥⡴⠶⠾⠿⠿⠿⠿⠛⢛⣿⣿⣿⣯⡉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 800159a:	4996      	ldr	r1, [pc, #600]	; (80017f4 <parseCommands+0x2d4>)
 800159c:	488c      	ldr	r0, [pc, #560]	; (80017d0 <parseCommands+0x2b0>)
 800159e:	f002 f9c8 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣧⡀⠈⠉⠀⠈⠁⣾⠛⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣿⠟⠉⣹⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 80015a2:	4995      	ldr	r1, [pc, #596]	; (80017f8 <parseCommands+0x2d8>)
 80015a4:	488a      	ldr	r0, [pc, #552]	; (80017d0 <parseCommands+0x2b0>)
 80015a6:	f002 f9c4 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣸⣿⣿⣦⣀⠀⠀⠀⢻⡀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣶⣿⠋⣿⠛⠃⠀⣈⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 80015aa:	4994      	ldr	r1, [pc, #592]	; (80017fc <parseCommands+0x2dc>)
 80015ac:	4888      	ldr	r0, [pc, #544]	; (80017d0 <parseCommands+0x2b0>)
 80015ae:	f002 f9c0 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡿⢿⡀⠈⢹⡿⠶⣶⣼⡇⠀⢀⣀⣀⣤⣴⣾⠟⠋⣡⣿⡟⠀⢻⣶⠶⣿⣿⠛⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 80015b2:	4993      	ldr	r1, [pc, #588]	; (8001800 <parseCommands+0x2e0>)
 80015b4:	4886      	ldr	r0, [pc, #536]	; (80017d0 <parseCommands+0x2b0>)
 80015b6:	f002 f9bc 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣷⡈⢿⣦⣸⠇⢀⡿⠿⠿⡿⠿⠿⣿⠛⠋⠁⠀⣴⠟⣿⣧⡀⠈⢁⣰⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 80015ba:	4992      	ldr	r1, [pc, #584]	; (8001804 <parseCommands+0x2e4>)
 80015bc:	4884      	ldr	r0, [pc, #528]	; (80017d0 <parseCommands+0x2b0>)
 80015be:	f002 f9b8 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⢻⣦⣈⣽⣀⣾⠃⠀⢸⡇⠀⢸⡇⠀⢀⣠⡾⠋⢰⣿⣿⣿⣿⡿⠟⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 80015c2:	4991      	ldr	r1, [pc, #580]	; (8001808 <parseCommands+0x2e8>)
 80015c4:	4882      	ldr	r0, [pc, #520]	; (80017d0 <parseCommands+0x2b0>)
 80015c6:	f002 f9b4 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠿⢿⣿⣿⡟⠛⠃⠀⠀⣾⠀⠀⢸⡇⠐⠿⠋⠀⠀⣿⢻⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 80015ca:	4990      	ldr	r1, [pc, #576]	; (800180c <parseCommands+0x2ec>)
 80015cc:	4880      	ldr	r0, [pc, #512]	; (80017d0 <parseCommands+0x2b0>)
 80015ce:	f002 f9b0 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠁⢀⡴⠋⠀⣿⠀⠀⢸⠇⠀⠀⠀⠀⠀⠁⢸⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 80015d2:	498f      	ldr	r1, [pc, #572]	; (8001810 <parseCommands+0x2f0>)
 80015d4:	487e      	ldr	r0, [pc, #504]	; (80017d0 <parseCommands+0x2b0>)
 80015d6:	f002 f9ac 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⡿⠟⠋⠀⠀⠀⣿⠀⠀⣸⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 80015da:	498e      	ldr	r1, [pc, #568]	; (8001814 <parseCommands+0x2f4>)
 80015dc:	487c      	ldr	r0, [pc, #496]	; (80017d0 <parseCommands+0x2b0>)
 80015de:	f002 f9a8 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣁⣀⠀⠀⠀⠀⣿⡀⠀⣿⠀⠀⠀⠀⠀⠀⢀⣈⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 80015e2:	498d      	ldr	r1, [pc, #564]	; (8001818 <parseCommands+0x2f8>)
 80015e4:	487a      	ldr	r0, [pc, #488]	; (80017d0 <parseCommands+0x2b0>)
 80015e6:	f002 f9a4 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠛⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠟⠛⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n");
 80015ea:	498c      	ldr	r1, [pc, #560]	; (800181c <parseCommands+0x2fc>)
 80015ec:	4878      	ldr	r0, [pc, #480]	; (80017d0 <parseCommands+0x2b0>)
 80015ee:	f002 f9a0 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "Help Menu CMDs:\n");
 80015f2:	498b      	ldr	r1, [pc, #556]	; (8001820 <parseCommands+0x300>)
 80015f4:	4876      	ldr	r0, [pc, #472]	; (80017d0 <parseCommands+0x2b0>)
 80015f6:	f002 f99c 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "Por favor ingrese el esquema |comando| (espacio) los datos requeridos en cada caso\n");
 80015fa:	498a      	ldr	r1, [pc, #552]	; (8001824 <parseCommands+0x304>)
 80015fc:	4874      	ldr	r0, [pc, #464]	; (80017d0 <parseCommands+0x2b0>)
 80015fe:	f002 f998 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "Los siguientes comandos indican las diferentes funciones del sistema:\n");
 8001602:	4989      	ldr	r1, [pc, #548]	; (8001828 <parseCommands+0x308>)
 8001604:	4872      	ldr	r0, [pc, #456]	; (80017d0 <parseCommands+0x2b0>)
 8001606:	f002 f994 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "1)help                     Este comando despliega el menu de ayuda\n");
 800160a:	4988      	ldr	r1, [pc, #544]	; (800182c <parseCommands+0x30c>)
 800160c:	4870      	ldr	r0, [pc, #448]	; (80017d0 <parseCommands+0x2b0>)
 800160e:	f002 f990 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "2)select_Clock_Signal***** Presione 1 para señal PLL, 2 para LSE y 3 para HSI\n");
 8001612:	4987      	ldr	r1, [pc, #540]	; (8001830 <parseCommands+0x310>)
 8001614:	486e      	ldr	r0, [pc, #440]	; (80017d0 <parseCommands+0x2b0>)
 8001616:	f002 f98c 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "************************** Comando + entero\n");
 800161a:	4986      	ldr	r1, [pc, #536]	; (8001834 <parseCommands+0x314>)
 800161c:	486c      	ldr	r0, [pc, #432]	; (80017d0 <parseCommands+0x2b0>)
 800161e:	f002 f988 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "3)select_Prescaler******** Indique valores enteros entre 1 y 5 para el prescaler\n");
 8001622:	4985      	ldr	r1, [pc, #532]	; (8001838 <parseCommands+0x318>)
 8001624:	486a      	ldr	r0, [pc, #424]	; (80017d0 <parseCommands+0x2b0>)
 8001626:	f002 f984 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "************************** Comando + entero\n");
 800162a:	4982      	ldr	r1, [pc, #520]	; (8001834 <parseCommands+0x314>)
 800162c:	4868      	ldr	r0, [pc, #416]	; (80017d0 <parseCommands+0x2b0>)
 800162e:	f002 f980 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "4)set_Time**************** Usted configura su hora inicial: Horas: minutos: segundos\n");
 8001632:	4982      	ldr	r1, [pc, #520]	; (800183c <parseCommands+0x31c>)
 8001634:	4866      	ldr	r0, [pc, #408]	; (80017d0 <parseCommands+0x2b0>)
 8001636:	f002 f97c 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "************************** Comando + entero + entero + entero\n");
 800163a:	4981      	ldr	r1, [pc, #516]	; (8001840 <parseCommands+0x320>)
 800163c:	4864      	ldr	r0, [pc, #400]	; (80017d0 <parseCommands+0x2b0>)
 800163e:	f002 f978 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "5)current_time************ El sistema retorna la hora actual: Horas: minutos: segundos\n");
 8001642:	4980      	ldr	r1, [pc, #512]	; (8001844 <parseCommands+0x324>)
 8001644:	4862      	ldr	r0, [pc, #392]	; (80017d0 <parseCommands+0x2b0>)
 8001646:	f002 f974 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "************************** Comando + entero + entero + entero\n");
 800164a:	497d      	ldr	r1, [pc, #500]	; (8001840 <parseCommands+0x320>)
 800164c:	4860      	ldr	r0, [pc, #384]	; (80017d0 <parseCommands+0x2b0>)
 800164e:	f002 f970 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "6)configFecha************* Usted configura su fecha inicial: Dias: meses: año\n");
 8001652:	497d      	ldr	r1, [pc, #500]	; (8001848 <parseCommands+0x328>)
 8001654:	485e      	ldr	r0, [pc, #376]	; (80017d0 <parseCommands+0x2b0>)
 8001656:	f002 f96c 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "************************** Comando + entero + entero + entero\n");
 800165a:	4979      	ldr	r1, [pc, #484]	; (8001840 <parseCommands+0x320>)
 800165c:	485c      	ldr	r0, [pc, #368]	; (80017d0 <parseCommands+0x2b0>)
 800165e:	f002 f968 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "7)Fecha******************* El sistema retorna la fecha actual: Dias: meses: año\n");
 8001662:	497a      	ldr	r1, [pc, #488]	; (800184c <parseCommands+0x32c>)
 8001664:	485a      	ldr	r0, [pc, #360]	; (80017d0 <parseCommands+0x2b0>)
 8001666:	f002 f964 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "************************** Comando + entero + entero + entero\n");
 800166a:	4975      	ldr	r1, [pc, #468]	; (8001840 <parseCommands+0x320>)
 800166c:	4858      	ldr	r0, [pc, #352]	; (80017d0 <parseCommands+0x2b0>)
 800166e:	f002 f960 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "8)init_ADC**************** Se inicializa y muestra 256 datos de 2 canales de ADC\n");
 8001672:	4977      	ldr	r1, [pc, #476]	; (8001850 <parseCommands+0x330>)
 8001674:	4856      	ldr	r0, [pc, #344]	; (80017d0 <parseCommands+0x2b0>)
 8001676:	f002 f95c 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "************************** Solo comando\n");
 800167a:	4976      	ldr	r1, [pc, #472]	; (8001854 <parseCommands+0x334>)
 800167c:	4854      	ldr	r0, [pc, #336]	; (80017d0 <parseCommands+0x2b0>)
 800167e:	f002 f958 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "9)signal_Sampling********* Se ingresa el periodo de muestreo de la señal de PWM en microsegundos\n");
 8001682:	4975      	ldr	r1, [pc, #468]	; (8001858 <parseCommands+0x338>)
 8001684:	4852      	ldr	r0, [pc, #328]	; (80017d0 <parseCommands+0x2b0>)
 8001686:	f002 f954 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "************************** Comando + entero\n");
 800168a:	496a      	ldr	r1, [pc, #424]	; (8001834 <parseCommands+0x314>)
 800168c:	4850      	ldr	r0, [pc, #320]	; (80017d0 <parseCommands+0x2b0>)
 800168e:	f002 f950 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "10)muestreo*************** Se inicializa la toma de datos del acelerometro mostrando 256 datos\n");
 8001692:	4972      	ldr	r1, [pc, #456]	; (800185c <parseCommands+0x33c>)
 8001694:	484e      	ldr	r0, [pc, #312]	; (80017d0 <parseCommands+0x2b0>)
 8001696:	f002 f94c 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "************************** Comando\n");
 800169a:	4971      	ldr	r1, [pc, #452]	; (8001860 <parseCommands+0x340>)
 800169c:	484c      	ldr	r0, [pc, #304]	; (80017d0 <parseCommands+0x2b0>)
 800169e:	f002 f948 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "▒▒▒▒▒▒▒▓\n");
 80016a2:	4970      	ldr	r1, [pc, #448]	; (8001864 <parseCommands+0x344>)
 80016a4:	484a      	ldr	r0, [pc, #296]	; (80017d0 <parseCommands+0x2b0>)
 80016a6:	f002 f944 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "▒▒▒▒▒▒▒▓▓▓\n");
 80016aa:	496f      	ldr	r1, [pc, #444]	; (8001868 <parseCommands+0x348>)
 80016ac:	4848      	ldr	r0, [pc, #288]	; (80017d0 <parseCommands+0x2b0>)
 80016ae:	f002 f940 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "▒▓▓▓▓▓▓░░░▓\n");
 80016b2:	496e      	ldr	r1, [pc, #440]	; (800186c <parseCommands+0x34c>)
 80016b4:	4846      	ldr	r0, [pc, #280]	; (80017d0 <parseCommands+0x2b0>)
 80016b6:	f002 f93c 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "▒▓░░░░▓░░░░▓\n");
 80016ba:	496d      	ldr	r1, [pc, #436]	; (8001870 <parseCommands+0x350>)
 80016bc:	4844      	ldr	r0, [pc, #272]	; (80017d0 <parseCommands+0x2b0>)
 80016be:	f002 f938 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "▓░░░░░░▓░▓░▓\n");
 80016c2:	496c      	ldr	r1, [pc, #432]	; (8001874 <parseCommands+0x354>)
 80016c4:	4842      	ldr	r0, [pc, #264]	; (80017d0 <parseCommands+0x2b0>)
 80016c6:	f002 f934 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "▓░░░░░░▓░░░▓\n");
 80016ca:	496b      	ldr	r1, [pc, #428]	; (8001878 <parseCommands+0x358>)
 80016cc:	4840      	ldr	r0, [pc, #256]	; (80017d0 <parseCommands+0x2b0>)
 80016ce:	f002 f930 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "▓░░▓░░░▓▓▓▓\n");
 80016d2:	496a      	ldr	r1, [pc, #424]	; (800187c <parseCommands+0x35c>)
 80016d4:	483e      	ldr	r0, [pc, #248]	; (80017d0 <parseCommands+0x2b0>)
 80016d6:	f002 f92c 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "▒▓░░░░▓▒▒▒▒▓\n");
 80016da:	4969      	ldr	r1, [pc, #420]	; (8001880 <parseCommands+0x360>)
 80016dc:	483c      	ldr	r0, [pc, #240]	; (80017d0 <parseCommands+0x2b0>)
 80016de:	f002 f928 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "▒▒▓▓▓▓▒▒▒▒▒▓\n");
 80016e2:	4968      	ldr	r1, [pc, #416]	; (8001884 <parseCommands+0x364>)
 80016e4:	483a      	ldr	r0, [pc, #232]	; (80017d0 <parseCommands+0x2b0>)
 80016e6:	f002 f924 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "▒▒▒▒▒▒▒▒▓▓▓▓\n");
 80016ea:	4967      	ldr	r1, [pc, #412]	; (8001888 <parseCommands+0x368>)
 80016ec:	4838      	ldr	r0, [pc, #224]	; (80017d0 <parseCommands+0x2b0>)
 80016ee:	f002 f920 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "▒▒▒▒▒▓▓▓▒▒▒▒▓\n");
 80016f2:	4966      	ldr	r1, [pc, #408]	; (800188c <parseCommands+0x36c>)
 80016f4:	4836      	ldr	r0, [pc, #216]	; (80017d0 <parseCommands+0x2b0>)
 80016f6:	f002 f91c 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "▒▒▒▒▓▒▒▒▒▒▒▒▒▓\n");
 80016fa:	4965      	ldr	r1, [pc, #404]	; (8001890 <parseCommands+0x370>)
 80016fc:	4834      	ldr	r0, [pc, #208]	; (80017d0 <parseCommands+0x2b0>)
 80016fe:	f002 f918 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "▒▒▒▓▒▒▒▒▒▒▒▒▒▓\n");
 8001702:	4964      	ldr	r1, [pc, #400]	; (8001894 <parseCommands+0x374>)
 8001704:	4832      	ldr	r0, [pc, #200]	; (80017d0 <parseCommands+0x2b0>)
 8001706:	f002 f914 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "▒▒▓▒▒▒▒▒▒▒▒▒▒▒▓\n");
 800170a:	4963      	ldr	r1, [pc, #396]	; (8001898 <parseCommands+0x378>)
 800170c:	4830      	ldr	r0, [pc, #192]	; (80017d0 <parseCommands+0x2b0>)
 800170e:	f002 f910 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "▒▓▒▓▒▒▒▒▒▒▒▒▒▓\n");
 8001712:	4962      	ldr	r1, [pc, #392]	; (800189c <parseCommands+0x37c>)
 8001714:	482e      	ldr	r0, [pc, #184]	; (80017d0 <parseCommands+0x2b0>)
 8001716:	f002 f90c 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "▒▓▒▓▓▓▓▓▓▓▓▓▓\n");
 800171a:	4961      	ldr	r1, [pc, #388]	; (80018a0 <parseCommands+0x380>)
 800171c:	482c      	ldr	r0, [pc, #176]	; (80017d0 <parseCommands+0x2b0>)
 800171e:	f002 f908 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "▒▓▒▒▒▒▒▒▒▓\n");
 8001722:	4960      	ldr	r1, [pc, #384]	; (80018a4 <parseCommands+0x384>)
 8001724:	482a      	ldr	r0, [pc, #168]	; (80017d0 <parseCommands+0x2b0>)
 8001726:	f002 f904 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "▒▒▓▒▒▒▒▒▓\n");
 800172a:	495f      	ldr	r1, [pc, #380]	; (80018a8 <parseCommands+0x388>)
 800172c:	4828      	ldr	r0, [pc, #160]	; (80017d0 <parseCommands+0x2b0>)
 800172e:	f002 f900 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "ESPERO HABERTE AYUDADO\n");
 8001732:	495e      	ldr	r1, [pc, #376]	; (80018ac <parseCommands+0x38c>)
 8001734:	4826      	ldr	r0, [pc, #152]	; (80017d0 <parseCommands+0x2b0>)
 8001736:	f002 f8fc 	bl	8003932 <writeMsg>
		writeMsg(&USART6Comm, "Datos tomados correctamente \n");

	}else{
		writeMsg(&USART6Comm, "invalid comand, please check the help menu\n");
	}
}
 800173a:	e3ed      	b.n	8001f18 <parseCommands+0x9f8>
	}else if(strcmp(cmd, "select_Clock_Signal") == 0){
 800173c:	495c      	ldr	r1, [pc, #368]	; (80018b0 <parseCommands+0x390>)
 800173e:	4820      	ldr	r0, [pc, #128]	; (80017c0 <parseCommands+0x2a0>)
 8001740:	f7fe fd4e 	bl	80001e0 <strcmp>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	f040 80bc 	bne.w	80018c4 <parseCommands+0x3a4>
		if(firstParameter == 1){
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <parseCommands+0x29c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d10a      	bne.n	800176a <parseCommands+0x24a>
		chooseCLK(firstParameter);
 8001754:	4b19      	ldr	r3, [pc, #100]	; (80017bc <parseCommands+0x29c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	4618      	mov	r0, r3
 800175c:	f001 fa16 	bl	8002b8c <chooseCLK>
		writeMsg(&USART6Comm, "selected PLL\n");
 8001760:	4954      	ldr	r1, [pc, #336]	; (80018b4 <parseCommands+0x394>)
 8001762:	481b      	ldr	r0, [pc, #108]	; (80017d0 <parseCommands+0x2b0>)
 8001764:	f002 f8e5 	bl	8003932 <writeMsg>
}
 8001768:	e3d6      	b.n	8001f18 <parseCommands+0x9f8>
		}else if(firstParameter == 2){
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <parseCommands+0x29c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b02      	cmp	r3, #2
 8001770:	d10a      	bne.n	8001788 <parseCommands+0x268>
		chooseCLK(firstParameter);
 8001772:	4b12      	ldr	r3, [pc, #72]	; (80017bc <parseCommands+0x29c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	4618      	mov	r0, r3
 800177a:	f001 fa07 	bl	8002b8c <chooseCLK>
		writeMsg(&USART6Comm, "selected LSE\n");
 800177e:	494e      	ldr	r1, [pc, #312]	; (80018b8 <parseCommands+0x398>)
 8001780:	4813      	ldr	r0, [pc, #76]	; (80017d0 <parseCommands+0x2b0>)
 8001782:	f002 f8d6 	bl	8003932 <writeMsg>
}
 8001786:	e3c7      	b.n	8001f18 <parseCommands+0x9f8>
		}else if(firstParameter == 3){
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <parseCommands+0x29c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b03      	cmp	r3, #3
 800178e:	d10a      	bne.n	80017a6 <parseCommands+0x286>
		chooseCLK(firstParameter);
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <parseCommands+0x29c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	4618      	mov	r0, r3
 8001798:	f001 f9f8 	bl	8002b8c <chooseCLK>
		writeMsg(&USART6Comm, "selected HSI\n");
 800179c:	4947      	ldr	r1, [pc, #284]	; (80018bc <parseCommands+0x39c>)
 800179e:	480c      	ldr	r0, [pc, #48]	; (80017d0 <parseCommands+0x2b0>)
 80017a0:	f002 f8c7 	bl	8003932 <writeMsg>
}
 80017a4:	e3b8      	b.n	8001f18 <parseCommands+0x9f8>
			writeMsg(&USART6Comm, "Invalid comand, please read the help menu\n");
 80017a6:	4946      	ldr	r1, [pc, #280]	; (80018c0 <parseCommands+0x3a0>)
 80017a8:	4809      	ldr	r0, [pc, #36]	; (80017d0 <parseCommands+0x2b0>)
 80017aa:	f002 f8c2 	bl	8003932 <writeMsg>
}
 80017ae:	e3b3      	b.n	8001f18 <parseCommands+0x9f8>
 80017b0:	20003c4c 	.word	0x20003c4c
 80017b4:	20003c94 	.word	0x20003c94
 80017b8:	20003c90 	.word	0x20003c90
 80017bc:	20003c8c 	.word	0x20003c8c
 80017c0:	20003c08 	.word	0x20003c08
 80017c4:	080091c8 	.word	0x080091c8
 80017c8:	080091d8 	.word	0x080091d8
 80017cc:	080091e0 	.word	0x080091e0
 80017d0:	20000298 	.word	0x20000298
 80017d4:	08009204 	.word	0x08009204
 80017d8:	080092b4 	.word	0x080092b4
 80017dc:	08009364 	.word	0x08009364
 80017e0:	08009414 	.word	0x08009414
 80017e4:	080094c4 	.word	0x080094c4
 80017e8:	08009574 	.word	0x08009574
 80017ec:	08009624 	.word	0x08009624
 80017f0:	080096d4 	.word	0x080096d4
 80017f4:	08009784 	.word	0x08009784
 80017f8:	08009834 	.word	0x08009834
 80017fc:	080098e4 	.word	0x080098e4
 8001800:	08009994 	.word	0x08009994
 8001804:	08009a44 	.word	0x08009a44
 8001808:	08009af4 	.word	0x08009af4
 800180c:	08009ba4 	.word	0x08009ba4
 8001810:	08009c54 	.word	0x08009c54
 8001814:	08009d04 	.word	0x08009d04
 8001818:	08009db4 	.word	0x08009db4
 800181c:	08009e64 	.word	0x08009e64
 8001820:	08009f14 	.word	0x08009f14
 8001824:	08009f28 	.word	0x08009f28
 8001828:	08009f7c 	.word	0x08009f7c
 800182c:	08009fc4 	.word	0x08009fc4
 8001830:	0800a008 	.word	0x0800a008
 8001834:	0800a058 	.word	0x0800a058
 8001838:	0800a088 	.word	0x0800a088
 800183c:	0800a0dc 	.word	0x0800a0dc
 8001840:	0800a134 	.word	0x0800a134
 8001844:	0800a174 	.word	0x0800a174
 8001848:	0800a1cc 	.word	0x0800a1cc
 800184c:	0800a21c 	.word	0x0800a21c
 8001850:	0800a270 	.word	0x0800a270
 8001854:	0800a2c4 	.word	0x0800a2c4
 8001858:	0800a2f0 	.word	0x0800a2f0
 800185c:	0800a354 	.word	0x0800a354
 8001860:	0800a3b4 	.word	0x0800a3b4
 8001864:	0800a3d8 	.word	0x0800a3d8
 8001868:	0800a3f4 	.word	0x0800a3f4
 800186c:	0800a414 	.word	0x0800a414
 8001870:	0800a438 	.word	0x0800a438
 8001874:	0800a460 	.word	0x0800a460
 8001878:	0800a488 	.word	0x0800a488
 800187c:	0800a4b0 	.word	0x0800a4b0
 8001880:	0800a4d4 	.word	0x0800a4d4
 8001884:	0800a4fc 	.word	0x0800a4fc
 8001888:	0800a524 	.word	0x0800a524
 800188c:	0800a54c 	.word	0x0800a54c
 8001890:	0800a578 	.word	0x0800a578
 8001894:	0800a5a4 	.word	0x0800a5a4
 8001898:	0800a5d0 	.word	0x0800a5d0
 800189c:	0800a600 	.word	0x0800a600
 80018a0:	0800a62c 	.word	0x0800a62c
 80018a4:	0800a658 	.word	0x0800a658
 80018a8:	0800a678 	.word	0x0800a678
 80018ac:	0800a698 	.word	0x0800a698
 80018b0:	0800a6b0 	.word	0x0800a6b0
 80018b4:	0800a6c4 	.word	0x0800a6c4
 80018b8:	0800a6d4 	.word	0x0800a6d4
 80018bc:	0800a6e4 	.word	0x0800a6e4
 80018c0:	0800a6f4 	.word	0x0800a6f4
	}else if(strcmp(cmd, "select_Prescaler") == 0){
 80018c4:	4985      	ldr	r1, [pc, #532]	; (8001adc <parseCommands+0x5bc>)
 80018c6:	4886      	ldr	r0, [pc, #536]	; (8001ae0 <parseCommands+0x5c0>)
 80018c8:	f7fe fc8a 	bl	80001e0 <strcmp>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d14f      	bne.n	8001972 <parseCommands+0x452>
		if(firstParameter == 1){
 80018d2:	4b84      	ldr	r3, [pc, #528]	; (8001ae4 <parseCommands+0x5c4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d10a      	bne.n	80018f0 <parseCommands+0x3d0>
		prescalerNumber(firstParameter);
 80018da:	4b82      	ldr	r3, [pc, #520]	; (8001ae4 <parseCommands+0x5c4>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	4618      	mov	r0, r3
 80018e2:	f001 f991 	bl	8002c08 <prescalerNumber>
		writeMsg(&USART6Comm, "Prescaler null = 1\n");
 80018e6:	4980      	ldr	r1, [pc, #512]	; (8001ae8 <parseCommands+0x5c8>)
 80018e8:	4880      	ldr	r0, [pc, #512]	; (8001aec <parseCommands+0x5cc>)
 80018ea:	f002 f822 	bl	8003932 <writeMsg>
}
 80018ee:	e313      	b.n	8001f18 <parseCommands+0x9f8>
		}else if(firstParameter == 2){
 80018f0:	4b7c      	ldr	r3, [pc, #496]	; (8001ae4 <parseCommands+0x5c4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d10a      	bne.n	800190e <parseCommands+0x3ee>
		prescalerNumber(firstParameter);
 80018f8:	4b7a      	ldr	r3, [pc, #488]	; (8001ae4 <parseCommands+0x5c4>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	f001 f982 	bl	8002c08 <prescalerNumber>
		writeMsg(&USART6Comm, "division in 2\n");
 8001904:	497a      	ldr	r1, [pc, #488]	; (8001af0 <parseCommands+0x5d0>)
 8001906:	4879      	ldr	r0, [pc, #484]	; (8001aec <parseCommands+0x5cc>)
 8001908:	f002 f813 	bl	8003932 <writeMsg>
}
 800190c:	e304      	b.n	8001f18 <parseCommands+0x9f8>
		}else if(firstParameter == 3){
 800190e:	4b75      	ldr	r3, [pc, #468]	; (8001ae4 <parseCommands+0x5c4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b03      	cmp	r3, #3
 8001914:	d10a      	bne.n	800192c <parseCommands+0x40c>
		prescalerNumber(firstParameter);
 8001916:	4b73      	ldr	r3, [pc, #460]	; (8001ae4 <parseCommands+0x5c4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	4618      	mov	r0, r3
 800191e:	f001 f973 	bl	8002c08 <prescalerNumber>
		writeMsg(&USART6Comm, "division in 3\n");
 8001922:	4974      	ldr	r1, [pc, #464]	; (8001af4 <parseCommands+0x5d4>)
 8001924:	4871      	ldr	r0, [pc, #452]	; (8001aec <parseCommands+0x5cc>)
 8001926:	f002 f804 	bl	8003932 <writeMsg>
}
 800192a:	e2f5      	b.n	8001f18 <parseCommands+0x9f8>
		}else if(firstParameter == 4){
 800192c:	4b6d      	ldr	r3, [pc, #436]	; (8001ae4 <parseCommands+0x5c4>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b04      	cmp	r3, #4
 8001932:	d10a      	bne.n	800194a <parseCommands+0x42a>
		prescalerNumber(firstParameter);
 8001934:	4b6b      	ldr	r3, [pc, #428]	; (8001ae4 <parseCommands+0x5c4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	4618      	mov	r0, r3
 800193c:	f001 f964 	bl	8002c08 <prescalerNumber>
		writeMsg(&USART6Comm, "division in 4\n");
 8001940:	496d      	ldr	r1, [pc, #436]	; (8001af8 <parseCommands+0x5d8>)
 8001942:	486a      	ldr	r0, [pc, #424]	; (8001aec <parseCommands+0x5cc>)
 8001944:	f001 fff5 	bl	8003932 <writeMsg>
}
 8001948:	e2e6      	b.n	8001f18 <parseCommands+0x9f8>
		}else if(firstParameter == 5){
 800194a:	4b66      	ldr	r3, [pc, #408]	; (8001ae4 <parseCommands+0x5c4>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b05      	cmp	r3, #5
 8001950:	d10a      	bne.n	8001968 <parseCommands+0x448>
		prescalerNumber(firstParameter);
 8001952:	4b64      	ldr	r3, [pc, #400]	; (8001ae4 <parseCommands+0x5c4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	4618      	mov	r0, r3
 800195a:	f001 f955 	bl	8002c08 <prescalerNumber>
		writeMsg(&USART6Comm, "division in 5\n");
 800195e:	4967      	ldr	r1, [pc, #412]	; (8001afc <parseCommands+0x5dc>)
 8001960:	4862      	ldr	r0, [pc, #392]	; (8001aec <parseCommands+0x5cc>)
 8001962:	f001 ffe6 	bl	8003932 <writeMsg>
}
 8001966:	e2d7      	b.n	8001f18 <parseCommands+0x9f8>
			writeMsg(&USART6Comm, "Invalid comand, please read the help menu\n");
 8001968:	4965      	ldr	r1, [pc, #404]	; (8001b00 <parseCommands+0x5e0>)
 800196a:	4860      	ldr	r0, [pc, #384]	; (8001aec <parseCommands+0x5cc>)
 800196c:	f001 ffe1 	bl	8003932 <writeMsg>
}
 8001970:	e2d2      	b.n	8001f18 <parseCommands+0x9f8>
	}else if(strcmp(cmd,"set_Time") == 0){
 8001972:	4964      	ldr	r1, [pc, #400]	; (8001b04 <parseCommands+0x5e4>)
 8001974:	485a      	ldr	r0, [pc, #360]	; (8001ae0 <parseCommands+0x5c0>)
 8001976:	f7fe fc33 	bl	80001e0 <strcmp>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d137      	bne.n	80019f0 <parseCommands+0x4d0>
		if(firstParameter > 23){
 8001980:	4b58      	ldr	r3, [pc, #352]	; (8001ae4 <parseCommands+0x5c4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b17      	cmp	r3, #23
 8001986:	d902      	bls.n	800198e <parseCommands+0x46e>
			firstParameter = 23;
 8001988:	4b56      	ldr	r3, [pc, #344]	; (8001ae4 <parseCommands+0x5c4>)
 800198a:	2217      	movs	r2, #23
 800198c:	601a      	str	r2, [r3, #0]
		if(secondParameter > 59){
 800198e:	4b5e      	ldr	r3, [pc, #376]	; (8001b08 <parseCommands+0x5e8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b3b      	cmp	r3, #59	; 0x3b
 8001994:	d902      	bls.n	800199c <parseCommands+0x47c>
			secondParameter = 59;
 8001996:	4b5c      	ldr	r3, [pc, #368]	; (8001b08 <parseCommands+0x5e8>)
 8001998:	223b      	movs	r2, #59	; 0x3b
 800199a:	601a      	str	r2, [r3, #0]
		if(thirdparameter > 59){
 800199c:	4b5b      	ldr	r3, [pc, #364]	; (8001b0c <parseCommands+0x5ec>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b3b      	cmp	r3, #59	; 0x3b
 80019a2:	d902      	bls.n	80019aa <parseCommands+0x48a>
			thirdparameter = 59;
 80019a4:	4b59      	ldr	r3, [pc, #356]	; (8001b0c <parseCommands+0x5ec>)
 80019a6:	223b      	movs	r2, #59	; 0x3b
 80019a8:	601a      	str	r2, [r3, #0]
		handlerRTC.RTC_Hours = firstParameter;
 80019aa:	4b4e      	ldr	r3, [pc, #312]	; (8001ae4 <parseCommands+0x5c4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	4b57      	ldr	r3, [pc, #348]	; (8001b10 <parseCommands+0x5f0>)
 80019b2:	701a      	strb	r2, [r3, #0]
		handlerRTC.RTC_Minutes = secondParameter;
 80019b4:	4b54      	ldr	r3, [pc, #336]	; (8001b08 <parseCommands+0x5e8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4b55      	ldr	r3, [pc, #340]	; (8001b10 <parseCommands+0x5f0>)
 80019bc:	705a      	strb	r2, [r3, #1]
		handlerRTC.RTC_Seconds = thirdparameter;
 80019be:	4b53      	ldr	r3, [pc, #332]	; (8001b0c <parseCommands+0x5ec>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	4b52      	ldr	r3, [pc, #328]	; (8001b10 <parseCommands+0x5f0>)
 80019c6:	709a      	strb	r2, [r3, #2]
		rtc_Config(&handlerRTC);
 80019c8:	4851      	ldr	r0, [pc, #324]	; (8001b10 <parseCommands+0x5f0>)
 80019ca:	f001 fb15 	bl	8002ff8 <rtc_Config>
		sprintf(buffer,"Hora %02u : %02u : %02u \n",firstParameter,secondParameter,thirdparameter);
 80019ce:	4b45      	ldr	r3, [pc, #276]	; (8001ae4 <parseCommands+0x5c4>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4b4d      	ldr	r3, [pc, #308]	; (8001b08 <parseCommands+0x5e8>)
 80019d4:	6819      	ldr	r1, [r3, #0]
 80019d6:	4b4d      	ldr	r3, [pc, #308]	; (8001b0c <parseCommands+0x5ec>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	460b      	mov	r3, r1
 80019de:	494d      	ldr	r1, [pc, #308]	; (8001b14 <parseCommands+0x5f4>)
 80019e0:	484d      	ldr	r0, [pc, #308]	; (8001b18 <parseCommands+0x5f8>)
 80019e2:	f003 f9af 	bl	8004d44 <siprintf>
		writeMsg(&USART6Comm, buffer);
 80019e6:	494c      	ldr	r1, [pc, #304]	; (8001b18 <parseCommands+0x5f8>)
 80019e8:	4840      	ldr	r0, [pc, #256]	; (8001aec <parseCommands+0x5cc>)
 80019ea:	f001 ffa2 	bl	8003932 <writeMsg>
}
 80019ee:	e293      	b.n	8001f18 <parseCommands+0x9f8>
	}else if(strcmp(cmd,"current_time") == 0){
 80019f0:	494a      	ldr	r1, [pc, #296]	; (8001b1c <parseCommands+0x5fc>)
 80019f2:	483b      	ldr	r0, [pc, #236]	; (8001ae0 <parseCommands+0x5c0>)
 80019f4:	f7fe fbf4 	bl	80001e0 <strcmp>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d126      	bne.n	8001a4c <parseCommands+0x52c>
		ptrTime = read_Time();
 80019fe:	f001 fc57 	bl	80032b0 <read_Time>
 8001a02:	4603      	mov	r3, r0
 8001a04:	4a46      	ldr	r2, [pc, #280]	; (8001b20 <parseCommands+0x600>)
 8001a06:	6013      	str	r3, [r2, #0]
		segundos = ptrTime[0];
 8001a08:	4b45      	ldr	r3, [pc, #276]	; (8001b20 <parseCommands+0x600>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	781a      	ldrb	r2, [r3, #0]
 8001a0e:	4b45      	ldr	r3, [pc, #276]	; (8001b24 <parseCommands+0x604>)
 8001a10:	701a      	strb	r2, [r3, #0]
		minutos = ptrTime[1];
 8001a12:	4b43      	ldr	r3, [pc, #268]	; (8001b20 <parseCommands+0x600>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	785a      	ldrb	r2, [r3, #1]
 8001a18:	4b43      	ldr	r3, [pc, #268]	; (8001b28 <parseCommands+0x608>)
 8001a1a:	701a      	strb	r2, [r3, #0]
		horas	= ptrTime[2];
 8001a1c:	4b40      	ldr	r3, [pc, #256]	; (8001b20 <parseCommands+0x600>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	789a      	ldrb	r2, [r3, #2]
 8001a22:	4b42      	ldr	r3, [pc, #264]	; (8001b2c <parseCommands+0x60c>)
 8001a24:	701a      	strb	r2, [r3, #0]
		sprintf(buffer,"Hora Actual %02u : %02u : %02u \n",horas,minutos,segundos);
 8001a26:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <parseCommands+0x60c>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4b3e      	ldr	r3, [pc, #248]	; (8001b28 <parseCommands+0x608>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	4619      	mov	r1, r3
 8001a32:	4b3c      	ldr	r3, [pc, #240]	; (8001b24 <parseCommands+0x604>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	493d      	ldr	r1, [pc, #244]	; (8001b30 <parseCommands+0x610>)
 8001a3c:	4836      	ldr	r0, [pc, #216]	; (8001b18 <parseCommands+0x5f8>)
 8001a3e:	f003 f981 	bl	8004d44 <siprintf>
		writeMsg(&USART6Comm, buffer);
 8001a42:	4935      	ldr	r1, [pc, #212]	; (8001b18 <parseCommands+0x5f8>)
 8001a44:	4829      	ldr	r0, [pc, #164]	; (8001aec <parseCommands+0x5cc>)
 8001a46:	f001 ff74 	bl	8003932 <writeMsg>
}
 8001a4a:	e265      	b.n	8001f18 <parseCommands+0x9f8>
	}else if(strcmp(cmd,"configFecha") == 0){
 8001a4c:	4939      	ldr	r1, [pc, #228]	; (8001b34 <parseCommands+0x614>)
 8001a4e:	4824      	ldr	r0, [pc, #144]	; (8001ae0 <parseCommands+0x5c0>)
 8001a50:	f7fe fbc6 	bl	80001e0 <strcmp>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d170      	bne.n	8001b3c <parseCommands+0x61c>
		if(firstParameter > 31){
 8001a5a:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <parseCommands+0x5c4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b1f      	cmp	r3, #31
 8001a60:	d902      	bls.n	8001a68 <parseCommands+0x548>
			firstParameter = 31;
 8001a62:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <parseCommands+0x5c4>)
 8001a64:	221f      	movs	r2, #31
 8001a66:	601a      	str	r2, [r3, #0]
		if(secondParameter > 12){
 8001a68:	4b27      	ldr	r3, [pc, #156]	; (8001b08 <parseCommands+0x5e8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b0c      	cmp	r3, #12
 8001a6e:	d902      	bls.n	8001a76 <parseCommands+0x556>
			secondParameter = 12;
 8001a70:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <parseCommands+0x5e8>)
 8001a72:	220c      	movs	r2, #12
 8001a74:	601a      	str	r2, [r3, #0]
		if(thirdparameter < 2000 || thirdparameter > 2099){
 8001a76:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <parseCommands+0x5ec>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001a7e:	d305      	bcc.n	8001a8c <parseCommands+0x56c>
 8001a80:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <parseCommands+0x5ec>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f640 0233 	movw	r2, #2099	; 0x833
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d903      	bls.n	8001a94 <parseCommands+0x574>
			thirdparameter = 2099;
 8001a8c:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <parseCommands+0x5ec>)
 8001a8e:	f640 0233 	movw	r2, #2099	; 0x833
 8001a92:	601a      	str	r2, [r3, #0]
		handlerRTC.RTC_Days   = firstParameter;
 8001a94:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <parseCommands+0x5c4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <parseCommands+0x5f0>)
 8001a9c:	70da      	strb	r2, [r3, #3]
		handlerRTC.RTC_Months = secondParameter;
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <parseCommands+0x5e8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <parseCommands+0x5f0>)
 8001aa6:	711a      	strb	r2, [r3, #4]
		handlerRTC.RTC_Years  = thirdparameter;
 8001aa8:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <parseCommands+0x5ec>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <parseCommands+0x5f0>)
 8001ab0:	80da      	strh	r2, [r3, #6]
		rtc_Config(&handlerRTC);
 8001ab2:	4817      	ldr	r0, [pc, #92]	; (8001b10 <parseCommands+0x5f0>)
 8001ab4:	f001 faa0 	bl	8002ff8 <rtc_Config>
		sprintf(buffer,"Date %02u : %02u : %02u \n", firstParameter,secondParameter,thirdparameter);
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <parseCommands+0x5c4>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <parseCommands+0x5e8>)
 8001abe:	6819      	ldr	r1, [r3, #0]
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <parseCommands+0x5ec>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	491b      	ldr	r1, [pc, #108]	; (8001b38 <parseCommands+0x618>)
 8001aca:	4813      	ldr	r0, [pc, #76]	; (8001b18 <parseCommands+0x5f8>)
 8001acc:	f003 f93a 	bl	8004d44 <siprintf>
		writeMsg(&USART6Comm,buffer);
 8001ad0:	4911      	ldr	r1, [pc, #68]	; (8001b18 <parseCommands+0x5f8>)
 8001ad2:	4806      	ldr	r0, [pc, #24]	; (8001aec <parseCommands+0x5cc>)
 8001ad4:	f001 ff2d 	bl	8003932 <writeMsg>
}
 8001ad8:	e21e      	b.n	8001f18 <parseCommands+0x9f8>
 8001ada:	bf00      	nop
 8001adc:	0800a720 	.word	0x0800a720
 8001ae0:	20003c08 	.word	0x20003c08
 8001ae4:	20003c8c 	.word	0x20003c8c
 8001ae8:	0800a734 	.word	0x0800a734
 8001aec:	20000298 	.word	0x20000298
 8001af0:	0800a748 	.word	0x0800a748
 8001af4:	0800a758 	.word	0x0800a758
 8001af8:	0800a768 	.word	0x0800a768
 8001afc:	0800a778 	.word	0x0800a778
 8001b00:	0800a6f4 	.word	0x0800a6f4
 8001b04:	0800a788 	.word	0x0800a788
 8001b08:	20003c90 	.word	0x20003c90
 8001b0c:	20003c94 	.word	0x20003c94
 8001b10:	20003c98 	.word	0x20003c98
 8001b14:	0800a794 	.word	0x0800a794
 8001b18:	2000032c 	.word	0x2000032c
 8001b1c:	0800a7b0 	.word	0x0800a7b0
 8001b20:	20003cac 	.word	0x20003cac
 8001b24:	20003ca2 	.word	0x20003ca2
 8001b28:	20003ca3 	.word	0x20003ca3
 8001b2c:	20003ca4 	.word	0x20003ca4
 8001b30:	0800a7c0 	.word	0x0800a7c0
 8001b34:	0800a7e4 	.word	0x0800a7e4
 8001b38:	0800a7f0 	.word	0x0800a7f0
	}else if(strcmp(cmd,"Fecha") == 0){
 8001b3c:	495e      	ldr	r1, [pc, #376]	; (8001cb8 <parseCommands+0x798>)
 8001b3e:	485f      	ldr	r0, [pc, #380]	; (8001cbc <parseCommands+0x79c>)
 8001b40:	f7fe fb4e 	bl	80001e0 <strcmp>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d128      	bne.n	8001b9c <parseCommands+0x67c>
		ptrDate = read_Date();
 8001b4a:	f001 fc33 	bl	80033b4 <read_Date>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4a5b      	ldr	r2, [pc, #364]	; (8001cc0 <parseCommands+0x7a0>)
 8001b52:	6013      	str	r3, [r2, #0]
		dia  = ptrDate[0];
 8001b54:	4b5a      	ldr	r3, [pc, #360]	; (8001cc0 <parseCommands+0x7a0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	781a      	ldrb	r2, [r3, #0]
 8001b5a:	4b5a      	ldr	r3, [pc, #360]	; (8001cc4 <parseCommands+0x7a4>)
 8001b5c:	701a      	strb	r2, [r3, #0]
		mes  = ptrDate[1];
 8001b5e:	4b58      	ldr	r3, [pc, #352]	; (8001cc0 <parseCommands+0x7a0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	785a      	ldrb	r2, [r3, #1]
 8001b64:	4b58      	ldr	r3, [pc, #352]	; (8001cc8 <parseCommands+0x7a8>)
 8001b66:	701a      	strb	r2, [r3, #0]
		año  = ptrDate[2];
 8001b68:	4b55      	ldr	r3, [pc, #340]	; (8001cc0 <parseCommands+0x7a0>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	3302      	adds	r3, #2
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	4b56      	ldr	r3, [pc, #344]	; (8001ccc <parseCommands+0x7ac>)
 8001b74:	801a      	strh	r2, [r3, #0]
		sprintf(buffer,"Fecha actual %02u : %02u : %02u \n",dia ,mes,año);
 8001b76:	4b53      	ldr	r3, [pc, #332]	; (8001cc4 <parseCommands+0x7a4>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b52      	ldr	r3, [pc, #328]	; (8001cc8 <parseCommands+0x7a8>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	4619      	mov	r1, r3
 8001b82:	4b52      	ldr	r3, [pc, #328]	; (8001ccc <parseCommands+0x7ac>)
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4951      	ldr	r1, [pc, #324]	; (8001cd0 <parseCommands+0x7b0>)
 8001b8c:	4851      	ldr	r0, [pc, #324]	; (8001cd4 <parseCommands+0x7b4>)
 8001b8e:	f003 f8d9 	bl	8004d44 <siprintf>
		writeMsg(&USART6Comm,buffer);
 8001b92:	4950      	ldr	r1, [pc, #320]	; (8001cd4 <parseCommands+0x7b4>)
 8001b94:	4850      	ldr	r0, [pc, #320]	; (8001cd8 <parseCommands+0x7b8>)
 8001b96:	f001 fecc 	bl	8003932 <writeMsg>
}
 8001b9a:	e1bd      	b.n	8001f18 <parseCommands+0x9f8>
	}else if(strcmp(cmd,"init_ADC") == 0){
 8001b9c:	494f      	ldr	r1, [pc, #316]	; (8001cdc <parseCommands+0x7bc>)
 8001b9e:	4847      	ldr	r0, [pc, #284]	; (8001cbc <parseCommands+0x79c>)
 8001ba0:	f7fe fb1e 	bl	80001e0 <strcmp>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d145      	bne.n	8001c36 <parseCommands+0x716>
		if(adcIsComplete == 1){
 8001baa:	4b4d      	ldr	r3, [pc, #308]	; (8001ce0 <parseCommands+0x7c0>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	f040 81b2 	bne.w	8001f18 <parseCommands+0x9f8>
			for(uint16_t j = 0; j < 256; j++){
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	83fb      	strh	r3, [r7, #30]
 8001bb8:	e036      	b.n	8001c28 <parseCommands+0x708>
				sprintf(buffer, "[#%d]: %.2f, %.2f\n",j, dataADCChannel0[j]*3.3f/4095.f, dataADCChannel1[j]*3.3f/4095.f);
 8001bba:	8bfe      	ldrh	r6, [r7, #30]
 8001bbc:	8bfb      	ldrh	r3, [r7, #30]
 8001bbe:	4a49      	ldr	r2, [pc, #292]	; (8001ce4 <parseCommands+0x7c4>)
 8001bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc4:	4948      	ldr	r1, [pc, #288]	; (8001ce8 <parseCommands+0x7c8>)
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff f984 	bl	8000ed4 <__aeabi_fmul>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4947      	ldr	r1, [pc, #284]	; (8001cec <parseCommands+0x7cc>)
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fa33 	bl	800103c <__aeabi_fdiv>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fccd 	bl	8000578 <__aeabi_f2d>
 8001bde:	4604      	mov	r4, r0
 8001be0:	460d      	mov	r5, r1
 8001be2:	8bfb      	ldrh	r3, [r7, #30]
 8001be4:	4a42      	ldr	r2, [pc, #264]	; (8001cf0 <parseCommands+0x7d0>)
 8001be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bea:	493f      	ldr	r1, [pc, #252]	; (8001ce8 <parseCommands+0x7c8>)
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff f971 	bl	8000ed4 <__aeabi_fmul>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	493d      	ldr	r1, [pc, #244]	; (8001cec <parseCommands+0x7cc>)
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fa20 	bl	800103c <__aeabi_fdiv>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fcba 	bl	8000578 <__aeabi_f2d>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c0c:	e9cd 4500 	strd	r4, r5, [sp]
 8001c10:	4632      	mov	r2, r6
 8001c12:	4938      	ldr	r1, [pc, #224]	; (8001cf4 <parseCommands+0x7d4>)
 8001c14:	482f      	ldr	r0, [pc, #188]	; (8001cd4 <parseCommands+0x7b4>)
 8001c16:	f003 f895 	bl	8004d44 <siprintf>
				writeMsg(&USART6Comm, buffer);
 8001c1a:	492e      	ldr	r1, [pc, #184]	; (8001cd4 <parseCommands+0x7b4>)
 8001c1c:	482e      	ldr	r0, [pc, #184]	; (8001cd8 <parseCommands+0x7b8>)
 8001c1e:	f001 fe88 	bl	8003932 <writeMsg>
			for(uint16_t j = 0; j < 256; j++){
 8001c22:	8bfb      	ldrh	r3, [r7, #30]
 8001c24:	3301      	adds	r3, #1
 8001c26:	83fb      	strh	r3, [r7, #30]
 8001c28:	8bfb      	ldrh	r3, [r7, #30]
 8001c2a:	2bff      	cmp	r3, #255	; 0xff
 8001c2c:	d9c5      	bls.n	8001bba <parseCommands+0x69a>
			adcIsComplete = 0;
 8001c2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ce0 <parseCommands+0x7c0>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
}
 8001c34:	e170      	b.n	8001f18 <parseCommands+0x9f8>
	}else if(strcmp(cmd,"signal_Sampling") == 0){
 8001c36:	4930      	ldr	r1, [pc, #192]	; (8001cf8 <parseCommands+0x7d8>)
 8001c38:	4820      	ldr	r0, [pc, #128]	; (8001cbc <parseCommands+0x79c>)
 8001c3a:	f7fe fad1 	bl	80001e0 <strcmp>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d124      	bne.n	8001c8e <parseCommands+0x76e>
		if((33 <= firstParameter) && (firstParameter <= 62)){
 8001c44:	4b2d      	ldr	r3, [pc, #180]	; (8001cfc <parseCommands+0x7dc>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b20      	cmp	r3, #32
 8001c4a:	d91b      	bls.n	8001c84 <parseCommands+0x764>
 8001c4c:	4b2b      	ldr	r3, [pc, #172]	; (8001cfc <parseCommands+0x7dc>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b3e      	cmp	r3, #62	; 0x3e
 8001c52:	d817      	bhi.n	8001c84 <parseCommands+0x764>
			updateFrequency(&handlerTIM3PWM_1, firstParameter);
 8001c54:	4b29      	ldr	r3, [pc, #164]	; (8001cfc <parseCommands+0x7dc>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4828      	ldr	r0, [pc, #160]	; (8001d00 <parseCommands+0x7e0>)
 8001c5e:	f001 f979 	bl	8002f54 <updateFrequency>
			updateDuttyCycle(&handlerTIM3PWM_1, firstParameter/2);
 8001c62:	4b26      	ldr	r3, [pc, #152]	; (8001cfc <parseCommands+0x7dc>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	085b      	lsrs	r3, r3, #1
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4824      	ldr	r0, [pc, #144]	; (8001d00 <parseCommands+0x7e0>)
 8001c6e:	f001 f9b3 	bl	8002fd8 <updateDuttyCycle>
			writeMsg(&USART6Comm, "El periodo de la señal de muestreo fue actualizado en microsegundos\n");
 8001c72:	4924      	ldr	r1, [pc, #144]	; (8001d04 <parseCommands+0x7e4>)
 8001c74:	4818      	ldr	r0, [pc, #96]	; (8001cd8 <parseCommands+0x7b8>)
 8001c76:	f001 fe5c 	bl	8003932 <writeMsg>
			writeMsg(&USART6Comm, "Recuerde que los datos de la conversion se dan en voltios\n");
 8001c7a:	4923      	ldr	r1, [pc, #140]	; (8001d08 <parseCommands+0x7e8>)
 8001c7c:	4816      	ldr	r0, [pc, #88]	; (8001cd8 <parseCommands+0x7b8>)
 8001c7e:	f001 fe58 	bl	8003932 <writeMsg>
}
 8001c82:	e149      	b.n	8001f18 <parseCommands+0x9f8>
			writeMsg(&USART6Comm, "Invalid signal_Sampling\n");
 8001c84:	4921      	ldr	r1, [pc, #132]	; (8001d0c <parseCommands+0x7ec>)
 8001c86:	4814      	ldr	r0, [pc, #80]	; (8001cd8 <parseCommands+0x7b8>)
 8001c88:	f001 fe53 	bl	8003932 <writeMsg>
}
 8001c8c:	e144      	b.n	8001f18 <parseCommands+0x9f8>
	}else if(strcmp(cmd,"muestreo") == 0){
 8001c8e:	4920      	ldr	r1, [pc, #128]	; (8001d10 <parseCommands+0x7f0>)
 8001c90:	480a      	ldr	r0, [pc, #40]	; (8001cbc <parseCommands+0x79c>)
 8001c92:	f7fe faa5 	bl	80001e0 <strcmp>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f040 8139 	bne.w	8001f10 <parseCommands+0x9f0>
		writeMsg(&USART6Comm, "Tomando muestreo.....\n");
 8001c9e:	491d      	ldr	r1, [pc, #116]	; (8001d14 <parseCommands+0x7f4>)
 8001ca0:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <parseCommands+0x7b8>)
 8001ca2:	f001 fe46 	bl	8003932 <writeMsg>
		flag = 1;
 8001ca6:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <parseCommands+0x7f8>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	701a      	strb	r2, [r3, #0]
		i2c_writeSingleRegister(&Acelerometer, POWER_CTL,45);
 8001cac:	222d      	movs	r2, #45	; 0x2d
 8001cae:	212d      	movs	r1, #45	; 0x2d
 8001cb0:	481a      	ldr	r0, [pc, #104]	; (8001d1c <parseCommands+0x7fc>)
 8001cb2:	f000 fdea 	bl	800288a <i2c_writeSingleRegister>
		while(counter < 1024){
 8001cb6:	e0eb      	b.n	8001e90 <parseCommands+0x970>
 8001cb8:	0800a80c 	.word	0x0800a80c
 8001cbc:	20003c08 	.word	0x20003c08
 8001cc0:	20003cb0 	.word	0x20003cb0
 8001cc4:	20003ca5 	.word	0x20003ca5
 8001cc8:	20003ca6 	.word	0x20003ca6
 8001ccc:	20003ca8 	.word	0x20003ca8
 8001cd0:	0800a814 	.word	0x0800a814
 8001cd4:	2000032c 	.word	0x2000032c
 8001cd8:	20000298 	.word	0x20000298
 8001cdc:	0800a838 	.word	0x0800a838
 8001ce0:	20000328 	.word	0x20000328
 8001ce4:	20000370 	.word	0x20000370
 8001ce8:	40533333 	.word	0x40533333
 8001cec:	457ff000 	.word	0x457ff000
 8001cf0:	20000770 	.word	0x20000770
 8001cf4:	0800a844 	.word	0x0800a844
 8001cf8:	0800a858 	.word	0x0800a858
 8001cfc:	20003c8c 	.word	0x20003c8c
 8001d00:	20000b7c 	.word	0x20000b7c
 8001d04:	0800a868 	.word	0x0800a868
 8001d08:	0800a8b0 	.word	0x0800a8b0
 8001d0c:	0800a8ec 	.word	0x0800a8ec
 8001d10:	0800a908 	.word	0x0800a908
 8001d14:	0800a914 	.word	0x0800a914
 8001d18:	20003bb6 	.word	0x20003bb6
 8001d1c:	20000ba8 	.word	0x20000ba8
			if(flag2){
 8001d20:	4b85      	ldr	r3, [pc, #532]	; (8001f38 <parseCommands+0xa18>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 80b3 	beq.w	8001e90 <parseCommands+0x970>
				uint8_t AccelX_low =  i2c_readSingleRegister(&Acelerometer, ACCEL_X1_L);
 8001d2a:	2132      	movs	r1, #50	; 0x32
 8001d2c:	4883      	ldr	r0, [pc, #524]	; (8001f3c <parseCommands+0xa1c>)
 8001d2e:	f000 fd7b 	bl	8002828 <i2c_readSingleRegister>
 8001d32:	4603      	mov	r3, r0
 8001d34:	75fb      	strb	r3, [r7, #23]
				uint8_t AccelX_high = i2c_readSingleRegister(&Acelerometer, ACCEL_X1_H);
 8001d36:	2133      	movs	r1, #51	; 0x33
 8001d38:	4880      	ldr	r0, [pc, #512]	; (8001f3c <parseCommands+0xa1c>)
 8001d3a:	f000 fd75 	bl	8002828 <i2c_readSingleRegister>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	75bb      	strb	r3, [r7, #22]
				int16_t AccelX = AccelX_high << 8 | AccelX_low;
 8001d42:	7dbb      	ldrb	r3, [r7, #22]
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	b21a      	sxth	r2, r3
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
 8001d4a:	b21b      	sxth	r3, r3
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	82bb      	strh	r3, [r7, #20]
				X_axis = AccelX * 0.0039 * 9.8;
 8001d50:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fbfd 	bl	8000554 <__aeabi_i2d>
 8001d5a:	a373      	add	r3, pc, #460	; (adr r3, 8001f28 <parseCommands+0xa08>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	f7fe fc62 	bl	8000628 <__aeabi_dmul>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	a370      	add	r3, pc, #448	; (adr r3, 8001f30 <parseCommands+0xa10>)
 8001d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d72:	f7fe fc59 	bl	8000628 <__aeabi_dmul>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f7fe ff4b 	bl	8000c18 <__aeabi_d2f>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4a6e      	ldr	r2, [pc, #440]	; (8001f40 <parseCommands+0xa20>)
 8001d86:	6013      	str	r3, [r2, #0]
				uint8_t AccelY_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Y1_L);
 8001d88:	2134      	movs	r1, #52	; 0x34
 8001d8a:	486c      	ldr	r0, [pc, #432]	; (8001f3c <parseCommands+0xa1c>)
 8001d8c:	f000 fd4c 	bl	8002828 <i2c_readSingleRegister>
 8001d90:	4603      	mov	r3, r0
 8001d92:	74fb      	strb	r3, [r7, #19]
				uint8_t AccelY_high = i2c_readSingleRegister(&Acelerometer,ACCEL_Y1_H);
 8001d94:	2135      	movs	r1, #53	; 0x35
 8001d96:	4869      	ldr	r0, [pc, #420]	; (8001f3c <parseCommands+0xa1c>)
 8001d98:	f000 fd46 	bl	8002828 <i2c_readSingleRegister>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	74bb      	strb	r3, [r7, #18]
				int16_t AccelY = AccelY_high << 8 | AccelY_low;
 8001da0:	7cbb      	ldrb	r3, [r7, #18]
 8001da2:	021b      	lsls	r3, r3, #8
 8001da4:	b21a      	sxth	r2, r3
 8001da6:	7cfb      	ldrb	r3, [r7, #19]
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	4313      	orrs	r3, r2
 8001dac:	823b      	strh	r3, [r7, #16]
				Y_axis = AccelY * 0.0039 * 9.8;
 8001dae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fbce 	bl	8000554 <__aeabi_i2d>
 8001db8:	a35b      	add	r3, pc, #364	; (adr r3, 8001f28 <parseCommands+0xa08>)
 8001dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbe:	f7fe fc33 	bl	8000628 <__aeabi_dmul>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	a359      	add	r3, pc, #356	; (adr r3, 8001f30 <parseCommands+0xa10>)
 8001dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd0:	f7fe fc2a 	bl	8000628 <__aeabi_dmul>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f7fe ff1c 	bl	8000c18 <__aeabi_d2f>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4a58      	ldr	r2, [pc, #352]	; (8001f44 <parseCommands+0xa24>)
 8001de4:	6013      	str	r3, [r2, #0]
				uint8_t AccelZ_low = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_L);
 8001de6:	2136      	movs	r1, #54	; 0x36
 8001de8:	4854      	ldr	r0, [pc, #336]	; (8001f3c <parseCommands+0xa1c>)
 8001dea:	f000 fd1d 	bl	8002828 <i2c_readSingleRegister>
 8001dee:	4603      	mov	r3, r0
 8001df0:	73fb      	strb	r3, [r7, #15]
				uint8_t AccelZ_high = i2c_readSingleRegister(&Acelerometer, ACCEL_Z1_H);
 8001df2:	2137      	movs	r1, #55	; 0x37
 8001df4:	4851      	ldr	r0, [pc, #324]	; (8001f3c <parseCommands+0xa1c>)
 8001df6:	f000 fd17 	bl	8002828 <i2c_readSingleRegister>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	73bb      	strb	r3, [r7, #14]
				int16_t AccelZ = AccelZ_high << 8 | AccelZ_low;
 8001dfe:	7bbb      	ldrb	r3, [r7, #14]
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	b21a      	sxth	r2, r3
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	b21b      	sxth	r3, r3
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	81bb      	strh	r3, [r7, #12]
				Z_axis = AccelZ * 0.0039 * 9.8;
 8001e0c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fb9f 	bl	8000554 <__aeabi_i2d>
 8001e16:	a344      	add	r3, pc, #272	; (adr r3, 8001f28 <parseCommands+0xa08>)
 8001e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1c:	f7fe fc04 	bl	8000628 <__aeabi_dmul>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	a341      	add	r3, pc, #260	; (adr r3, 8001f30 <parseCommands+0xa10>)
 8001e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2e:	f7fe fbfb 	bl	8000628 <__aeabi_dmul>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4610      	mov	r0, r2
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f7fe feed 	bl	8000c18 <__aeabi_d2f>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4a41      	ldr	r2, [pc, #260]	; (8001f48 <parseCommands+0xa28>)
 8001e42:	6013      	str	r3, [r2, #0]
				X_1[counter] = X_axis;
 8001e44:	4b41      	ldr	r3, [pc, #260]	; (8001f4c <parseCommands+0xa2c>)
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4b3d      	ldr	r3, [pc, #244]	; (8001f40 <parseCommands+0xa20>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a40      	ldr	r2, [pc, #256]	; (8001f50 <parseCommands+0xa30>)
 8001e50:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			    Y_1[counter] = Y_axis;
 8001e54:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <parseCommands+0xa2c>)
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4b3a      	ldr	r3, [pc, #232]	; (8001f44 <parseCommands+0xa24>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a3d      	ldr	r2, [pc, #244]	; (8001f54 <parseCommands+0xa34>)
 8001e60:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				Z_1[counter] = Z_axis;
 8001e64:	4b39      	ldr	r3, [pc, #228]	; (8001f4c <parseCommands+0xa2c>)
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4b37      	ldr	r3, [pc, #220]	; (8001f48 <parseCommands+0xa28>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a3a      	ldr	r2, [pc, #232]	; (8001f58 <parseCommands+0xa38>)
 8001e70:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				counter++;
 8001e74:	4b35      	ldr	r3, [pc, #212]	; (8001f4c <parseCommands+0xa2c>)
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	4b33      	ldr	r3, [pc, #204]	; (8001f4c <parseCommands+0xa2c>)
 8001e7e:	801a      	strh	r2, [r3, #0]
				flag2 = 0;
 8001e80:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <parseCommands+0xa18>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
				if(counter == 1024){
 8001e86:	4b31      	ldr	r3, [pc, #196]	; (8001f4c <parseCommands+0xa2c>)
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e8e:	d006      	beq.n	8001e9e <parseCommands+0x97e>
		while(counter < 1024){
 8001e90:	4b2e      	ldr	r3, [pc, #184]	; (8001f4c <parseCommands+0xa2c>)
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e98:	f4ff af42 	bcc.w	8001d20 <parseCommands+0x800>
 8001e9c:	e000      	b.n	8001ea0 <parseCommands+0x980>
					break;
 8001e9e:	bf00      	nop
		for( int i = 0 ; i < 1024; i++){
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61bb      	str	r3, [r7, #24]
 8001ea4:	e02b      	b.n	8001efe <parseCommands+0x9de>
			sprintf(bufferData, " AccelX = %.2f ; AccelY = %.2f ; AccelZ = %.2f \n",X_1[i],Y_1[i],Z_1[i]);
 8001ea6:	4a2a      	ldr	r2, [pc, #168]	; (8001f50 <parseCommands+0xa30>)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe fb62 	bl	8000578 <__aeabi_f2d>
 8001eb4:	4680      	mov	r8, r0
 8001eb6:	4689      	mov	r9, r1
 8001eb8:	4a26      	ldr	r2, [pc, #152]	; (8001f54 <parseCommands+0xa34>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fb59 	bl	8000578 <__aeabi_f2d>
 8001ec6:	4604      	mov	r4, r0
 8001ec8:	460d      	mov	r5, r1
 8001eca:	4a23      	ldr	r2, [pc, #140]	; (8001f58 <parseCommands+0xa38>)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fb50 	bl	8000578 <__aeabi_f2d>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ee0:	e9cd 4500 	strd	r4, r5, [sp]
 8001ee4:	4642      	mov	r2, r8
 8001ee6:	464b      	mov	r3, r9
 8001ee8:	491c      	ldr	r1, [pc, #112]	; (8001f5c <parseCommands+0xa3c>)
 8001eea:	481d      	ldr	r0, [pc, #116]	; (8001f60 <parseCommands+0xa40>)
 8001eec:	f002 ff2a 	bl	8004d44 <siprintf>
			writeMsg(&USART6Comm, bufferData);
 8001ef0:	491b      	ldr	r1, [pc, #108]	; (8001f60 <parseCommands+0xa40>)
 8001ef2:	481c      	ldr	r0, [pc, #112]	; (8001f64 <parseCommands+0xa44>)
 8001ef4:	f001 fd1d 	bl	8003932 <writeMsg>
		for( int i = 0 ; i < 1024; i++){
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	3301      	adds	r3, #1
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f04:	dbcf      	blt.n	8001ea6 <parseCommands+0x986>
		writeMsg(&USART6Comm, "Datos tomados correctamente \n");
 8001f06:	4918      	ldr	r1, [pc, #96]	; (8001f68 <parseCommands+0xa48>)
 8001f08:	4816      	ldr	r0, [pc, #88]	; (8001f64 <parseCommands+0xa44>)
 8001f0a:	f001 fd12 	bl	8003932 <writeMsg>
}
 8001f0e:	e003      	b.n	8001f18 <parseCommands+0x9f8>
		writeMsg(&USART6Comm, "invalid comand, please check the help menu\n");
 8001f10:	4916      	ldr	r1, [pc, #88]	; (8001f6c <parseCommands+0xa4c>)
 8001f12:	4814      	ldr	r0, [pc, #80]	; (8001f64 <parseCommands+0xa44>)
 8001f14:	f001 fd0d 	bl	8003932 <writeMsg>
}
 8001f18:	bf00      	nop
 8001f1a:	3724      	adds	r7, #36	; 0x24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f22:	bf00      	nop
 8001f24:	f3af 8000 	nop.w
 8001f28:	8e8a71de 	.word	0x8e8a71de
 8001f2c:	3f6ff2e4 	.word	0x3f6ff2e4
 8001f30:	9999999a 	.word	0x9999999a
 8001f34:	40239999 	.word	0x40239999
 8001f38:	20003bb7 	.word	0x20003bb7
 8001f3c:	20000ba8 	.word	0x20000ba8
 8001f40:	20003bb8 	.word	0x20003bb8
 8001f44:	20003bbc 	.word	0x20003bbc
 8001f48:	20003bc0 	.word	0x20003bc0
 8001f4c:	20003bb4 	.word	0x20003bb4
 8001f50:	20000bb4 	.word	0x20000bb4
 8001f54:	20001bb4 	.word	0x20001bb4
 8001f58:	20002bb4 	.word	0x20002bb4
 8001f5c:	0800a92c 	.word	0x0800a92c
 8001f60:	20000000 	.word	0x20000000
 8001f64:	20000298 	.word	0x20000298
 8001f68:	0800a960 	.word	0x0800a960
 8001f6c:	0800a980 	.word	0x0800a980

08001f70 <BasicTimer2_Callback>:

/* Timer que gobierna el blinky del led de estado */
void BasicTimer2_Callback(void){
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
	GPIOxTooglePin (&handlerStateLED);
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <BasicTimer2_Callback+0x10>)
 8001f76:	f000 fad3 	bl	8002520 <GPIOxTooglePin>
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000234 	.word	0x20000234

08001f84 <BasicTimer4_Callback>:
// Banderas para el muestreo del ADXL345.
void BasicTimer4_Callback(void){
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
if(flag){
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <BasicTimer4_Callback+0x1c>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <BasicTimer4_Callback+0x12>
	flag2 = 1;
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <BasicTimer4_Callback+0x20>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
}
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20003bb6 	.word	0x20003bb6
 8001fa4:	20003bb7 	.word	0x20003bb7

08001fa8 <usart6Rx_Callback>:

// Callback para los comandos del USART.
void usart6Rx_Callback(void){
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
	rxData = getRxData();
 8001fac:	f001 fcda 	bl	8003964 <getRxData>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	4b01      	ldr	r3, [pc, #4]	; (8001fbc <usart6Rx_Callback+0x14>)
 8001fb6:	701a      	strb	r2, [r3, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000bb0 	.word	0x20000bb0

08001fc0 <adcComplete_Callback>:

// Esta función controla el contador del ADC.(Hace las veces de callback)
void adcComplete_Callback(void){
 8001fc0:	b598      	push	{r3, r4, r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
	if(cont == 0){
 8001fc4:	4b20      	ldr	r3, [pc, #128]	; (8002048 <adcComplete_Callback+0x88>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10e      	bne.n	8001fea <adcComplete_Callback+0x2a>
		dataADCChannel0[cont2] = getADC();
 8001fcc:	f001 fd52 	bl	8003a74 <getADC>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4b1d      	ldr	r3, [pc, #116]	; (800204c <adcComplete_Callback+0x8c>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	461c      	mov	r4, r3
 8001fda:	4610      	mov	r0, r2
 8001fdc:	f7fe ff22 	bl	8000e24 <__aeabi_ui2f>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4a1b      	ldr	r2, [pc, #108]	; (8002050 <adcComplete_Callback+0x90>)
 8001fe4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8001fe8:	e013      	b.n	8002012 <adcComplete_Callback+0x52>
	}
	else{
		dataADCChannel1[cont2] = getADC();
 8001fea:	f001 fd43 	bl	8003a74 <getADC>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <adcComplete_Callback+0x8c>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	461c      	mov	r4, r3
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	f7fe ff13 	bl	8000e24 <__aeabi_ui2f>
 8001ffe:	4603      	mov	r3, r0
 8002000:	4a14      	ldr	r2, [pc, #80]	; (8002054 <adcComplete_Callback+0x94>)
 8002002:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		cont2++;
 8002006:	4b11      	ldr	r3, [pc, #68]	; (800204c <adcComplete_Callback+0x8c>)
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	3301      	adds	r3, #1
 800200c:	b29a      	uxth	r2, r3
 800200e:	4b0f      	ldr	r3, [pc, #60]	; (800204c <adcComplete_Callback+0x8c>)
 8002010:	801a      	strh	r2, [r3, #0]
	}
	cont++;
 8002012:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <adcComplete_Callback+0x88>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	3301      	adds	r3, #1
 8002018:	b2da      	uxtb	r2, r3
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <adcComplete_Callback+0x88>)
 800201c:	701a      	strb	r2, [r3, #0]
	if(cont2 == 256){
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <adcComplete_Callback+0x8c>)
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002026:	d105      	bne.n	8002034 <adcComplete_Callback+0x74>
		cont2 = 0;
 8002028:	4b08      	ldr	r3, [pc, #32]	; (800204c <adcComplete_Callback+0x8c>)
 800202a:	2200      	movs	r2, #0
 800202c:	801a      	strh	r2, [r3, #0]
		adcIsComplete = 1;
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <adcComplete_Callback+0x98>)
 8002030:	2201      	movs	r2, #1
 8002032:	701a      	strb	r2, [r3, #0]
	}
	if(cont == 2){
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <adcComplete_Callback+0x88>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d102      	bne.n	8002042 <adcComplete_Callback+0x82>
		cont = 0;
 800203c:	4b02      	ldr	r3, [pc, #8]	; (8002048 <adcComplete_Callback+0x88>)
 800203e:	2200      	movs	r2, #0
 8002040:	701a      	strb	r2, [r3, #0]
	}
}
 8002042:	bf00      	nop
 8002044:	bd98      	pop	{r3, r4, r7, pc}
 8002046:	bf00      	nop
 8002048:	2000036c 	.word	0x2000036c
 800204c:	2000036e 	.word	0x2000036e
 8002050:	20000370 	.word	0x20000370
 8002054:	20000770 	.word	0x20000770
 8002058:	20000328 	.word	0x20000328

0800205c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800205c:	480d      	ldr	r0, [pc, #52]	; (8002094 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800205e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002060:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002064:	480c      	ldr	r0, [pc, #48]	; (8002098 <LoopForever+0x6>)
  ldr r1, =_edata
 8002066:	490d      	ldr	r1, [pc, #52]	; (800209c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002068:	4a0d      	ldr	r2, [pc, #52]	; (80020a0 <LoopForever+0xe>)
  movs r3, #0
 800206a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800206c:	e002      	b.n	8002074 <LoopCopyDataInit>

0800206e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800206e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002072:	3304      	adds	r3, #4

08002074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002078:	d3f9      	bcc.n	800206e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800207c:	4c0a      	ldr	r4, [pc, #40]	; (80020a8 <LoopForever+0x16>)
  movs r3, #0
 800207e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002080:	e001      	b.n	8002086 <LoopFillZerobss>

08002082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002084:	3204      	adds	r2, #4

08002086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002088:	d3fb      	bcc.n	8002082 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800208a:	f001 ffc3 	bl	8004014 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800208e:	f7ff f8a9 	bl	80011e4 <main>

08002092 <LoopForever>:

LoopForever:
    b LoopForever
 8002092:	e7fe      	b.n	8002092 <LoopForever>
  ldr   r0, =_estack
 8002094:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800209c:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80020a0:	0800ae7c 	.word	0x0800ae7c
  ldr r2, =_sbss
 80020a4:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80020a8:	20003cf8 	.word	0x20003cf8

080020ac <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020ac:	e7fe      	b.n	80020ac <BusFault_Handler>
	...

080020b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	db0b      	blt.n	80020da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	f003 021f 	and.w	r2, r3, #31
 80020c8:	4906      	ldr	r1, [pc, #24]	; (80020e4 <__NVIC_EnableIRQ+0x34>)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	2001      	movs	r0, #1
 80020d2:	fa00 f202 	lsl.w	r2, r0, r2
 80020d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	e000e100 	.word	0xe000e100

080020e8 <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrBTimerHandler->ptrTIMx;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a4e      	ldr	r2, [pc, #312]	; (8002230 <BasicTimer_Config+0x148>)
 80020f6:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020f8:	b672      	cpsid	i
}
 80020fa:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();
	/* 1. Activar la señal de reloj del periférico requerido */
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002104:	d106      	bne.n	8002114 <BasicTimer_Config+0x2c>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002106:	4b4b      	ldr	r3, [pc, #300]	; (8002234 <BasicTimer_Config+0x14c>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	4a4a      	ldr	r2, [pc, #296]	; (8002234 <BasicTimer_Config+0x14c>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6413      	str	r3, [r2, #64]	; 0x40
 8002112:	e024      	b.n	800215e <BasicTimer_Config+0x76>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a47      	ldr	r2, [pc, #284]	; (8002238 <BasicTimer_Config+0x150>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d106      	bne.n	800212c <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 800211e:	4b45      	ldr	r3, [pc, #276]	; (8002234 <BasicTimer_Config+0x14c>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	4a44      	ldr	r2, [pc, #272]	; (8002234 <BasicTimer_Config+0x14c>)
 8002124:	f043 0302 	orr.w	r3, r3, #2
 8002128:	6413      	str	r3, [r2, #64]	; 0x40
 800212a:	e018      	b.n	800215e <BasicTimer_Config+0x76>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a42      	ldr	r2, [pc, #264]	; (800223c <BasicTimer_Config+0x154>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d106      	bne.n	8002144 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002136:	4b3f      	ldr	r3, [pc, #252]	; (8002234 <BasicTimer_Config+0x14c>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	4a3e      	ldr	r2, [pc, #248]	; (8002234 <BasicTimer_Config+0x14c>)
 800213c:	f043 0304 	orr.w	r3, r3, #4
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
 8002142:	e00c      	b.n	800215e <BasicTimer_Config+0x76>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a3d      	ldr	r2, [pc, #244]	; (8002240 <BasicTimer_Config+0x158>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d106      	bne.n	800215c <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 800214e:	4b39      	ldr	r3, [pc, #228]	; (8002234 <BasicTimer_Config+0x14c>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	4a38      	ldr	r2, [pc, #224]	; (8002234 <BasicTimer_Config+0x14c>)
 8002154:	f043 0308 	orr.w	r3, r3, #8
 8002158:	6413      	str	r3, [r2, #64]	; 0x40
 800215a:	e000      	b.n	800215e <BasicTimer_Config+0x76>
	}

	else{
		__NOP();
 800215c:	bf00      	nop
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */
	// -1 porque el contador empieza en 0
	ptrBTimerHandler->ptrTIMx-> PSC = ptrBTimerHandler ->TIMx_Config.TIMx_speed - 1;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	3a01      	subs	r2, #1
 8002168:	629a      	str	r2, [r3, #40]	; 0x28

	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	791b      	ldrb	r3, [r3, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d112      	bne.n	8002198 <BasicTimer_Config+0xb0>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Necesitamos poner la direccion en 0 para que cuente hacia arria TIM_CR1_DIR = 1, entonces
		// lo negamos y hacemos una AND con el valor actual.
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0210 	bic.w	r2, r2, #16
 8002180:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	3a01      	subs	r2, #1
 800218c:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2200      	movs	r2, #0
 8002194:	625a      	str	r2, [r3, #36]	; 0x24
 8002196:	e00d      	b.n	80021b4 <BasicTimer_Config+0xcc>

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		// Cuando CR1 = 1 es descendente
		ptrBTimerHandler->ptrTIMx->CR1 = TIM_CR1_DIR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2210      	movs	r2, #16
 800219e:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		ptrBTimerHandler-> ptrTIMx->ARR = 0;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2200      	movs	r2, #0
 80021a6:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	3a01      	subs	r2, #1
 80021b2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	// El registro encargado de la interrupcion es el UIE

	// Modificar con el ciclo If
	ptrBTimerHandler->ptrTIMx->DIER |= ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable; //TIM_DIER_UIE
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	7c1b      	ldrb	r3, [r3, #16]
 80021ce:	4619      	mov	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e0:	d103      	bne.n	80021ea <BasicTimer_Config+0x102>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 80021e2:	201c      	movs	r0, #28
 80021e4:	f7ff ff64 	bl	80020b0 <__NVIC_EnableIRQ>
 80021e8:	e01b      	b.n	8002222 <BasicTimer_Config+0x13a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a12      	ldr	r2, [pc, #72]	; (8002238 <BasicTimer_Config+0x150>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d103      	bne.n	80021fc <BasicTimer_Config+0x114>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 80021f4:	201d      	movs	r0, #29
 80021f6:	f7ff ff5b 	bl	80020b0 <__NVIC_EnableIRQ>
 80021fa:	e012      	b.n	8002222 <BasicTimer_Config+0x13a>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0e      	ldr	r2, [pc, #56]	; (800223c <BasicTimer_Config+0x154>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d103      	bne.n	800220e <BasicTimer_Config+0x126>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8002206:	201e      	movs	r0, #30
 8002208:	f7ff ff52 	bl	80020b0 <__NVIC_EnableIRQ>
 800220c:	e009      	b.n	8002222 <BasicTimer_Config+0x13a>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a0b      	ldr	r2, [pc, #44]	; (8002240 <BasicTimer_Config+0x158>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d103      	bne.n	8002220 <BasicTimer_Config+0x138>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8002218:	2032      	movs	r0, #50	; 0x32
 800221a:	f7ff ff49 	bl	80020b0 <__NVIC_EnableIRQ>
 800221e:	e000      	b.n	8002222 <BasicTimer_Config+0x13a>
	}

	else{
		__NOP();
 8002220:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8002222:	b662      	cpsie	i
}
 8002224:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20003cb4 	.word	0x20003cb4
 8002234:	40023800 	.word	0x40023800
 8002238:	40000400 	.word	0x40000400
 800223c:	40000800 	.word	0x40000800
 8002240:	40000c00 	.word	0x40000c00

08002244 <BasicTimer3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer3_Callback(void){
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002248:	bf00      	nop
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr

08002252 <BasicTimer5_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer5_Callback(void){
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002256:	bf00      	nop
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM2->SR &= ~TIM_SR_UIF;
 8002264:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800226e:	f023 0301 	bic.w	r3, r3, #1
 8002272:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer2_Callback();
 8002274:	f7ff fe7c 	bl	8001f70 <BasicTimer2_Callback>
}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}

0800227c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM3->SR &= ~TIM_SR_UIF;
 8002280:	4b04      	ldr	r3, [pc, #16]	; (8002294 <TIM3_IRQHandler+0x18>)
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	4a03      	ldr	r2, [pc, #12]	; (8002294 <TIM3_IRQHandler+0x18>)
 8002286:	f023 0301 	bic.w	r3, r3, #1
 800228a:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer3_Callback();
 800228c:	f7ff ffda 	bl	8002244 <BasicTimer3_Callback>
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40000400 	.word	0x40000400

08002298 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM4->SR &= ~TIM_SR_UIF;
 800229c:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <TIM4_IRQHandler+0x18>)
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	4a03      	ldr	r2, [pc, #12]	; (80022b0 <TIM4_IRQHandler+0x18>)
 80022a2:	f023 0301 	bic.w	r3, r3, #1
 80022a6:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer4_Callback();
 80022a8:	f7ff fe6c 	bl	8001f84 <BasicTimer4_Callback>
}
 80022ac:	bf00      	nop
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40000800 	.word	0x40000800

080022b4 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM5->SR &= ~TIM_SR_UIF;
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <TIM5_IRQHandler+0x18>)
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	4a03      	ldr	r2, [pc, #12]	; (80022cc <TIM5_IRQHandler+0x18>)
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer5_Callback();
 80022c4:	f7ff ffc5 	bl	8002252 <BasicTimer5_Callback>
}
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40000c00 	.word	0x40000c00

080022d0 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemento "activar el periferico o activar la señal de reloj del periferico)
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	60bb      	str	r3, [r7, #8]

	// 1)Activar el periferico
	//verificamos para GPIOA
	if(pGPIOHandler->pGPIOx == GPIOA){
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a87      	ldr	r2, [pc, #540]	; (8002504 <GPIO_Config+0x234>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d106      	bne.n	80022f8 <GPIO_Config+0x28>
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 80022ea:	4b87      	ldr	r3, [pc, #540]	; (8002508 <GPIO_Config+0x238>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a86      	ldr	r2, [pc, #536]	; (8002508 <GPIO_Config+0x238>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	e03a      	b.n	800236e <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx == GPIOB){
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a83      	ldr	r2, [pc, #524]	; (800250c <GPIO_Config+0x23c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d106      	bne.n	8002310 <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 8002302:	4b81      	ldr	r3, [pc, #516]	; (8002508 <GPIO_Config+0x238>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a80      	ldr	r2, [pc, #512]	; (8002508 <GPIO_Config+0x238>)
 8002308:	f043 0302 	orr.w	r3, r3, #2
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	e02e      	b.n	800236e <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if(pGPIOHandler->pGPIOx == GPIOC){
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a7e      	ldr	r2, [pc, #504]	; (8002510 <GPIO_Config+0x240>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d106      	bne.n	8002328 <GPIO_Config+0x58>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 800231a:	4b7b      	ldr	r3, [pc, #492]	; (8002508 <GPIO_Config+0x238>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a7a      	ldr	r2, [pc, #488]	; (8002508 <GPIO_Config+0x238>)
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	e022      	b.n	800236e <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if(pGPIOHandler->pGPIOx == GPIOD){
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a79      	ldr	r2, [pc, #484]	; (8002514 <GPIO_Config+0x244>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d106      	bne.n	8002340 <GPIO_Config+0x70>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 8002332:	4b75      	ldr	r3, [pc, #468]	; (8002508 <GPIO_Config+0x238>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a74      	ldr	r2, [pc, #464]	; (8002508 <GPIO_Config+0x238>)
 8002338:	f043 0308 	orr.w	r3, r3, #8
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	e016      	b.n	800236e <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if(pGPIOHandler->pGPIOx == GPIOE){
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a74      	ldr	r2, [pc, #464]	; (8002518 <GPIO_Config+0x248>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d106      	bne.n	8002358 <GPIO_Config+0x88>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 800234a:	4b6f      	ldr	r3, [pc, #444]	; (8002508 <GPIO_Config+0x238>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a6e      	ldr	r2, [pc, #440]	; (8002508 <GPIO_Config+0x238>)
 8002350:	f043 0310 	orr.w	r3, r3, #16
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	e00a      	b.n	800236e <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOH
	else if(pGPIOHandler->pGPIOx == GPIOH){
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a6f      	ldr	r2, [pc, #444]	; (800251c <GPIO_Config+0x24c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d105      	bne.n	800236e <GPIO_Config+0x9e>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 8002362:	4b69      	ldr	r3, [pc, #420]	; (8002508 <GPIO_Config+0x238>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a68      	ldr	r2, [pc, #416]	; (8002508 <GPIO_Config+0x238>)
 8002368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
	// Despues de activado, podemos comenzar a configurar.

	// 2) COnfigurando el registro GPIOx_MODER
	// Acá estamos leyendo config, moviendo "PinNumber" veces hacia la izquierda
	// ese valor (shift left) y todo eso lo cargamos en la variable auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	795b      	ldrb	r3, [r3, #5]
 8002372:	461a      	mov	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	791b      	ldrb	r3, [r3, #4]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	60fb      	str	r3, [r7, #12]
	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro
	 * (debemos escribir 0b00) para lo cual aplicamos una mascara y una operación de
	 * bitwise AND
	 */
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	791b      	ldrb	r3, [r3, #4]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	2103      	movs	r1, #3
 800238e:	fa01 f303 	lsl.w	r3, r1, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	4619      	mov	r1, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	400a      	ands	r2, r1
 800239c:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6819      	ldr	r1, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	7a1b      	ldrb	r3, [r3, #8]
 80023b2:	461a      	mov	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	791b      	ldrb	r3, [r3, #4]
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	791b      	ldrb	r3, [r3, #4]
 80023c8:	4619      	mov	r1, r3
 80023ca:	2301      	movs	r3, #1
 80023cc:	408b      	lsls	r3, r1
 80023ce:	43db      	mvns	r3, r3
 80023d0:	4619      	mov	r1, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	400a      	ands	r2, r1
 80023d8:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6859      	ldr	r1, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	799b      	ldrb	r3, [r3, #6]
 80023ee:	461a      	mov	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	791b      	ldrb	r3, [r3, #4]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0B11 << 2 *pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	791b      	ldrb	r3, [r3, #4]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	2103      	movs	r1, #3
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	4619      	mov	r1, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	400a      	ands	r2, r1
 8002418:	609a      	str	r2, [r3, #8]

	//cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6899      	ldr	r1, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	430a      	orrs	r2, r1
 8002428:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull up pull down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	79db      	ldrb	r3, [r3, #7]
 800242e:	461a      	mov	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	791b      	ldrb	r3, [r3, #4]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	791b      	ldrb	r3, [r3, #4]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	2103      	movs	r1, #3
 800244a:	fa01 f303 	lsl.w	r3, r1, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	4619      	mov	r1, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	400a      	ands	r2, r1
 8002458:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68d9      	ldr	r1, [r3, #12]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	430a      	orrs	r2, r1
 8002468:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas.. se vera luego
	if (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	795b      	ldrb	r3, [r3, #5]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d143      	bne.n	80024fa <GPIO_Config+0x22a>

		//Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	791b      	ldrb	r3, [r3, #4]
 8002476:	2b07      	cmp	r3, #7
 8002478:	d81f      	bhi.n	80024ba <GPIO_Config+0x1ea>
			//Estamos en el registro AGRL, que controla los piner del pIN_0 AL PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	791b      	ldrb	r3, [r3, #4]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del tegistro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6a1a      	ldr	r2, [r3, #32]
 8002488:	210f      	movs	r1, #15
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	fa01 f303 	lsl.w	r3, r1, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	4619      	mov	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	400a      	ands	r2, r1
 800249a:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor confiurado en la posicon seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6a1a      	ldr	r2, [r3, #32]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	7a5b      	ldrb	r3, [r3, #9]
 80024a6:	4619      	mov	r1, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	fa01 f303 	lsl.w	r3, r1, r3
 80024ae:	4619      	mov	r1, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} //Fin del GPIO_Config
 80024b8:	e01f      	b.n	80024fa <GPIO_Config+0x22a>
			auxPosition = 4* (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber -8);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	791b      	ldrb	r3, [r3, #4]
 80024be:	3b08      	subs	r3, #8
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ca:	210f      	movs	r1, #15
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	4619      	mov	r1, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	400a      	ands	r2, r1
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	7a5b      	ldrb	r3, [r3, #9]
 80024e8:	4619      	mov	r1, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	fa01 f303 	lsl.w	r3, r1, r3
 80024f0:	4619      	mov	r1, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	625a      	str	r2, [r3, #36]	; 0x24
} //Fin del GPIO_Config
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	40020000 	.word	0x40020000
 8002508:	40023800 	.word	0x40023800
 800250c:	40020400 	.word	0x40020400
 8002510:	40020800 	.word	0x40020800
 8002514:	40020c00 	.word	0x40020c00
 8002518:	40021000 	.word	0x40021000
 800251c:	40021c00 	.word	0x40021c00

08002520 <GPIOxTooglePin>:
	pinValue &= mask;

	return pinValue;
}

void GPIOxTooglePin(GPIO_Handler_t *pPinHandler){
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR ^= (SET <<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695a      	ldr	r2, [r3, #20]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	791b      	ldrb	r3, [r3, #4]
 8002532:	4619      	mov	r1, r3
 8002534:	2301      	movs	r3, #1
 8002536:	408b      	lsls	r3, r1
 8002538:	4619      	mov	r1, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	404a      	eors	r2, r1
 8002540:	615a      	str	r2, [r3, #20]
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <i2c_config>:
 *
 * Además, estos pines deben ser configurados como salidas open-drain y con las
 * resistencias en modo pull-up..
 */

void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
	/* 1. Activamos la señal de reloj para el modulo I2C seleccionado */
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a45      	ldr	r2, [pc, #276]	; (8002670 <i2c_config+0x124>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d106      	bne.n	800256c <i2c_config+0x20>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800255e:	4b45      	ldr	r3, [pc, #276]	; (8002674 <i2c_config+0x128>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	4a44      	ldr	r2, [pc, #272]	; (8002674 <i2c_config+0x128>)
 8002564:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002568:	6413      	str	r3, [r2, #64]	; 0x40
 800256a:	e016      	b.n	800259a <i2c_config+0x4e>
	}
	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a41      	ldr	r2, [pc, #260]	; (8002678 <i2c_config+0x12c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d106      	bne.n	8002584 <i2c_config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8002576:	4b3f      	ldr	r3, [pc, #252]	; (8002674 <i2c_config+0x128>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	4a3e      	ldr	r2, [pc, #248]	; (8002674 <i2c_config+0x128>)
 800257c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002580:	6413      	str	r3, [r2, #64]	; 0x40
 8002582:	e00a      	b.n	800259a <i2c_config+0x4e>
	}
	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a3c      	ldr	r2, [pc, #240]	; (800267c <i2c_config+0x130>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d105      	bne.n	800259a <i2c_config+0x4e>
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 800258e:	4b39      	ldr	r3, [pc, #228]	; (8002674 <i2c_config+0x128>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	4a38      	ldr	r2, [pc, #224]	; (8002674 <i2c_config+0x128>)
 8002594:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002598:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025a8:	601a      	str	r2, [r3, #0]
	__NOP();
 80025aa:	bf00      	nop
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_SWRST;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025ba:	601a      	str	r2, [r3, #0]

	/* 3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C
	 */
	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos); // Borramos la configuración previa
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80025ca:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_100_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);// Seleccionamos 80 MHz
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 80025da:	605a      	str	r2, [r3, #4]
	/* 4. Configuramos el modo I2C en el que el sistema funciona
	 * En esta configuración se incluye también la configuración del reloj
	 * y el tiempo maximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los registros en 0
	 */
	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2200      	movs	r2, #0
 80025e2:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2200      	movs	r2, #0
 80025ea:	621a      	str	r2, [r3, #32]

	if (ptrHandlerI2C->modeI2C == I2C_MODE_SM){
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	795b      	ldrb	r3, [r3, #5]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d118      	bne.n	8002626 <i2c_config+0xda>
		// Estamos en modo "standar" (SM mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~I2C_CCR_FS;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	69da      	ldr	r2, [r3, #28]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002602:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que se encarga de generar la señal del reloj
		ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_SM_SPEED_100KHz << I2C_CCR_CCR_Pos);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	69da      	ldr	r2, [r3, #28]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
 8002612:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que controla el tiempo T-Rise maximo
		ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6a1a      	ldr	r2, [r3, #32]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 8002622:	621a      	str	r2, [r3, #32]
 8002624:	e017      	b.n	8002656 <i2c_config+0x10a>
	}
	else{
		// Estamos en modo "fast" (FM mode)
		// Seleccionamos el modo fast
		ptrHandlerI2C->ptrI2Cx->CCR &= I2C_CCR_FS;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	69da      	ldr	r2, [r3, #28]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002634:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que se encarga de generar la señal del reloj
		ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz << I2C_CCR_CCR_Pos);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	69da      	ldr	r2, [r3, #28]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 8002644:	61da      	str	r2, [r3, #28]

		// Configuramos el registro que controla el tiempo T-Rise maximo
		ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6a1a      	ldr	r2, [r3, #32]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 020f 	orr.w	r2, r2, #15
 8002654:	621a      	str	r2, [r3, #32]
	}

	/* 5. Activamos el modulo I2C
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0201 	orr.w	r2, r2, #1
 8002664:	601a      	str	r2, [r3, #0]
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr
 8002670:	40005400 	.word	0x40005400
 8002674:	40023800 	.word	0x40023800
 8002678:	40005800 	.word	0x40005800
 800267c:	40005c00 	.word	0x40005c00

08002680 <i2c_stopTransaction>:

/* 8. Generamos la condición de stop
 */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
	/* 7. Generamos la condición de stop
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002696:	601a      	str	r2, [r3, #0]
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <i2c_startTransaction>:
/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_CR2
 * 2. Generamos la señal de "start"
 * 2a. Esperamos a que la bandera del evento "start" se levante.
 * Mientras esperamos, el valor de SB es 0, entonces la negación (!) es 1
 */
void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_CR2
	 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80026aa:	e000      	b.n	80026ae <i2c_startTransaction+0xc>
		__NOP();
 80026ac:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f7      	bne.n	80026ac <i2c_startTransaction+0xa>
	}

	/* 2. Generamos la señal de "start"
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ca:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante.
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80026cc:	e000      	b.n	80026d0 <i2c_startTransaction+0x2e>
		__NOP();
 80026ce:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f7      	beq.n	80026ce <i2c_startTransaction+0x2c>
	}
}
 80026de:	bf00      	nop
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr

080026ea <i2c_reStartTransaction>:

/*
 */
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
	/* 2. Generamos la señal de "start"
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002700:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante.
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8002702:	e000      	b.n	8002706 <i2c_reStartTransaction+0x1c>
		__NOP();
 8002704:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f7      	beq.n	8002704 <i2c_reStartTransaction+0x1a>
	}
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr

08002720 <i2c_sendNoAck>:

/* 7a. Activamos la indicación para no-ACK (indicación para el Slave de terminar)
 */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
	/* Debemos escribir cero en la posición ACK del registro de control 1
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_ACK;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002736:	601a      	str	r2, [r3, #0]
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <i2c_sendSlaveAddressRW>:
	 */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 8002742:	b480      	push	{r7}
 8002744:	b085      	sub	sp, #20
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	460b      	mov	r3, r1
 800274c:	70fb      	strb	r3, [r7, #3]
 800274e:	4613      	mov	r3, r2
 8002750:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar
	 */
	uint8_t auxByte = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la dirección del Slave y el bit que indica que deseamos escribir un (0)
	 * (en el siguiente paso se envía la dirección de memoria que se desea escribir)
	 */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 8002756:	78fb      	ldrb	r3, [r7, #3]
 8002758:	005a      	lsls	r2, r3, #1
 800275a:	78bb      	ldrb	r3, [r7, #2]
 800275c:	431a      	orrs	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bandera del evento "addr" se levante
	 * (esto nos indica que la dirección fue enviada satisfactoriamente)
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8002764:	e000      	b.n	8002768 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 8002766:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f7      	beq.n	8002766 <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepción de ACK de la "addr",
	 * para lo cual debemos leer en secuencia primero el I2C_SR1 y luego el I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	73fb      	strb	r3, [r7, #15]
}
 8002786:	bf00      	nop
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	70fb      	strb	r3, [r7, #3]
	/* 4. Enviamos la dirección de memoria que deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	78fa      	ldrb	r2, [r7, #3]
 80027a2:	611a      	str	r2, [r3, #16]

	/* 4.1 Esperamos hasta que el byte sea transmitido
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 80027a4:	e000      	b.n	80027a8 <i2c_sendMemoryAddress+0x18>
		__NOP();
 80027a6:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f7      	beq.n	80027a6 <i2c_sendMemoryAddress+0x16>
	}
}
 80027b6:	bf00      	nop
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr

080027c2 <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	460b      	mov	r3, r1
 80027cc:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	78fa      	ldrb	r2, [r7, #3]
 80027d4:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 80027d6:	e000      	b.n	80027da <i2c_sendDataByte+0x18>
		__NOP();
 80027d8:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0f7      	beq.n	80027d8 <i2c_sendDataByte+0x16>
	}
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <i2c_readDataByte>:

/**/
uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
	/* 9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 80027fc:	e000      	b.n	8002800 <i2c_readDataByte+0xc>
		__NOP();
 80027fe:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f7      	beq.n	80027fe <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	b2da      	uxtb	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->dataI2C;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	799b      	ldrb	r3, [r3, #6]
}
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <i2c_readSingleRegister>:

/**/
uint8_t i2c_readSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead){
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	70fb      	strb	r3, [r7, #3]
	/* 0. Creamos una variable auxiliar para recibir el dato que leemos */
	uint8_t auxRead = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	73fb      	strb	r3, [r7, #15]

	/* 1. Generamos la condición de start */
	i2c_startTransaction(ptrHandlerI2C);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff ff32 	bl	80026a2 <i2c_startTransaction>

	/* 2. Enviamos la dirección del esclavo y la indicación de ESCRIBIR */
	i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	791b      	ldrb	r3, [r3, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	4619      	mov	r1, r3
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff ff7b 	bl	8002742 <i2c_sendSlaveAddressRW>

	/* 3. Enviamos la dirección de memoria que deseamos leer */
	i2c_sendMemoryAddress(ptrHandlerI2C, regToRead);
 800284c:	78fb      	ldrb	r3, [r7, #3]
 800284e:	4619      	mov	r1, r3
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7ff ff9d 	bl	8002790 <i2c_sendMemoryAddress>

	/* 4. Creamos una condición de reStart */
	i2c_reStartTransaction(ptrHandlerI2C);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff ff47 	bl	80026ea <i2c_reStartTransaction>

	/* 5. Enviamos la dirección del esclavo y la indicación de LEER */
	i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_READ_DATA);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	791b      	ldrb	r3, [r3, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	4619      	mov	r1, r3
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff ff6c 	bl	8002742 <i2c_sendSlaveAddressRW>

	/* 6. Generamos la condición de NoACK, para que el master no funciona y el slave solo envie 1 byte */
	i2c_sendNoAck(ptrHandlerI2C);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff ff58 	bl	8002720 <i2c_sendNoAck>

	/* 7. Generamos la señal de Stop, para que el slave se detenga después de 1 byte*/
	i2c_stopTransaction(ptrHandlerI2C);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff ff05 	bl	8002680 <i2c_stopTransaction>

	/* 8. Leemos el dato que envia el esclavo */
	auxRead = i2c_readDataByte(ptrHandlerI2C);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ffbc 	bl	80027f4 <i2c_readDataByte>
 800287c:	4603      	mov	r3, r0
 800287e:	73fb      	strb	r3, [r7, #15]

	return auxRead;
 8002880:	7bfb      	ldrb	r3, [r7, #15]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <i2c_writeSingleRegister>:

/**/
void i2c_writeSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead, uint8_t newValue){
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	460b      	mov	r3, r1
 8002894:	70fb      	strb	r3, [r7, #3]
 8002896:	4613      	mov	r3, r2
 8002898:	70bb      	strb	r3, [r7, #2]

	/* 1. Generamos la condición de Start*/
	i2c_startTransaction(ptrHandlerI2C);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff ff01 	bl	80026a2 <i2c_startTransaction>

	/* 2. Enviamos la diracción del esclavo y la indicación de ESCRIBIR */
	i2c_sendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	791b      	ldrb	r3, [r3, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	4619      	mov	r1, r3
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7ff ff4a 	bl	8002742 <i2c_sendSlaveAddressRW>

	/* 3. Enviamos la dirección de memoria que deseamos escribir*/
	i2c_sendMemoryAddress(ptrHandlerI2C, regToRead);
 80028ae:	78fb      	ldrb	r3, [r7, #3]
 80028b0:	4619      	mov	r1, r3
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff ff6c 	bl	8002790 <i2c_sendMemoryAddress>

	/* 4. Enviamos el valor que deseamos escribir */
	i2c_sendDataByte(ptrHandlerI2C, newValue);
 80028b8:	78bb      	ldrb	r3, [r7, #2]
 80028ba:	4619      	mov	r1, r3
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff ff80 	bl	80027c2 <i2c_sendDataByte>

	/* 5. Generamos la condición de Stop, para que el slave se detenga después de un byte */
	i2c_stopTransaction(ptrHandlerI2C);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff fedc 	bl	8002680 <i2c_stopTransaction>
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <PLL_Config>:
#include "PLLDriver.h"

uint32_t HSI_VALUE = 16000000;


void PLL_Config(PLL_Handler_t *ptrPLLHandler){
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]

	// Se selecciona HSI como reloj interno del PLL en vez de un oscilador.
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC);
 80028d8:	4b64      	ldr	r3, [pc, #400]	; (8002a6c <PLL_Config+0x19c>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	4a63      	ldr	r2, [pc, #396]	; (8002a6c <PLL_Config+0x19c>)
 80028de:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80028e2:	6053      	str	r3, [r2, #4]

	// Se observa el valor del HSI RDY.
	while( !(RCC->CR & RCC_CR_HSIRDY) );
 80028e4:	bf00      	nop
 80028e6:	4b61      	ldr	r3, [pc, #388]	; (8002a6c <PLL_Config+0x19c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f9      	beq.n	80028e6 <PLL_Config+0x16>

	// Se inicializa el power enable clock del APB1.
	RCC->APB1ENR |= RCC_APB1RSTR_PWRRST;
 80028f2:	4b5e      	ldr	r3, [pc, #376]	; (8002a6c <PLL_Config+0x19c>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	4a5d      	ldr	r2, [pc, #372]	; (8002a6c <PLL_Config+0x19c>)
 80028f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fc:	6413      	str	r3, [r2, #64]	; 0x40


	// Estas líneas adecúan el acceso a la memoria del microcontrolador
	// para comenzar a ejecutar las instrucciones. Ver ACR.
	FLASH->ACR |= 1<<8;
 80028fe:	4b5c      	ldr	r3, [pc, #368]	; (8002a70 <PLL_Config+0x1a0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a5b      	ldr	r2, [pc, #364]	; (8002a70 <PLL_Config+0x1a0>)
 8002904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002908:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= 1<<9;
 800290a:	4b59      	ldr	r3, [pc, #356]	; (8002a70 <PLL_Config+0x1a0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a58      	ldr	r2, [pc, #352]	; (8002a70 <PLL_Config+0x1a0>)
 8002910:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002914:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= 1<<10;
 8002916:	4b56      	ldr	r3, [pc, #344]	; (8002a70 <PLL_Config+0x1a0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a55      	ldr	r2, [pc, #340]	; (8002a70 <PLL_Config+0x1a0>)
 800291c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002920:	6013      	str	r3, [r2, #0]
	 *  los voltajes de las distintas frecuencias que pueden llegar a configurarse.
	 *  Además, deben establecerse diferentes tiempos de espera para cada rango.
	 */

	// Voltajes para las frecuencias dentro de un rango máximo de 64 MHz.
	if(ptrPLLHandler->PLL_Config.PLL_voltage == VOLTAGE_64MHZ){
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10c      	bne.n	8002944 <PLL_Config+0x74>
		// Se toma 0 en el bit 15 y 1 en el bit 14 del PWR para la potencia.
		PWR->CR |= 01<<14;
 800292a:	4b52      	ldr	r3, [pc, #328]	; (8002a74 <PLL_Config+0x1a4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a51      	ldr	r2, [pc, #324]	; (8002a74 <PLL_Config+0x1a4>)
 8002930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002934:	6013      	str	r3, [r2, #0]

		// Se configura el tiempo de espera.
		FLASH->ACR |= 1<<0;
 8002936:	4b4e      	ldr	r3, [pc, #312]	; (8002a70 <PLL_Config+0x1a0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a4d      	ldr	r2, [pc, #308]	; (8002a70 <PLL_Config+0x1a0>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	e02d      	b.n	80029a0 <PLL_Config+0xd0>
	}
	else if(ptrPLLHandler->PLL_Config.PLL_voltage == VOLTAGE_84MHZ){
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d10c      	bne.n	8002966 <PLL_Config+0x96>
		// Se toma 1 en el bit 15 y 0 en el bit 14 del PWR para la potencia.
		PWR->CR |= 10<<14;
 800294c:	4b49      	ldr	r3, [pc, #292]	; (8002a74 <PLL_Config+0x1a4>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a48      	ldr	r2, [pc, #288]	; (8002a74 <PLL_Config+0x1a4>)
 8002952:	f443 3320 	orr.w	r3, r3, #163840	; 0x28000
 8002956:	6013      	str	r3, [r2, #0]

		// Se configura el tiempo de espera.
		FLASH->ACR |= 3<<0;
 8002958:	4b45      	ldr	r3, [pc, #276]	; (8002a70 <PLL_Config+0x1a0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a44      	ldr	r2, [pc, #272]	; (8002a70 <PLL_Config+0x1a0>)
 800295e:	f043 0303 	orr.w	r3, r3, #3
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	e01c      	b.n	80029a0 <PLL_Config+0xd0>
	}
	else if(ptrPLLHandler->PLL_Config.PLL_voltage == VOLTAGE_100MHZ){
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d10c      	bne.n	8002988 <PLL_Config+0xb8>
		// Se toma 1 en el bit 15 y 1 en el bit 14 del PWR para la potencia.
		PWR->CR |= 11<<14;
 800296e:	4b41      	ldr	r3, [pc, #260]	; (8002a74 <PLL_Config+0x1a4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a40      	ldr	r2, [pc, #256]	; (8002a74 <PLL_Config+0x1a4>)
 8002974:	f443 3330 	orr.w	r3, r3, #180224	; 0x2c000
 8002978:	6013      	str	r3, [r2, #0]

		// Se configura el tiempo de espera.
		FLASH->ACR |= 5<<0;
 800297a:	4b3d      	ldr	r3, [pc, #244]	; (8002a70 <PLL_Config+0x1a0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a3c      	ldr	r2, [pc, #240]	; (8002a70 <PLL_Config+0x1a0>)
 8002980:	f043 0305 	orr.w	r3, r3, #5
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	e00b      	b.n	80029a0 <PLL_Config+0xd0>
	}
	else{
		// Implementamos la máxima frecuencia para el caso por defecto.
		PWR->CR |= 11<<14;
 8002988:	4b3a      	ldr	r3, [pc, #232]	; (8002a74 <PLL_Config+0x1a4>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a39      	ldr	r2, [pc, #228]	; (8002a74 <PLL_Config+0x1a4>)
 800298e:	f443 3330 	orr.w	r3, r3, #180224	; 0x2c000
 8002992:	6013      	str	r3, [r2, #0]

		// Tiempo de espera.
		FLASH->ACR |= 5<<0;
 8002994:	4b36      	ldr	r3, [pc, #216]	; (8002a70 <PLL_Config+0x1a0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a35      	ldr	r2, [pc, #212]	; (8002a70 <PLL_Config+0x1a0>)
 800299a:	f043 0305 	orr.w	r3, r3, #5
 800299e:	6013      	str	r3, [r2, #0]
	}

	/*
	 * El preescaler null debe ser 1 para conseguir la máxima salida de frecuencia.
	 */
	RCC->CFGR |= 0001<<4;
 80029a0:	4b32      	ldr	r3, [pc, #200]	; (8002a6c <PLL_Config+0x19c>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	4a31      	ldr	r2, [pc, #196]	; (8002a6c <PLL_Config+0x19c>)
 80029a6:	f043 0310 	orr.w	r3, r3, #16
 80029aa:	6093      	str	r3, [r2, #8]
	 * a 80 MHz que se encuentra evidentemente en un intervalo superior a este valor,
	 * se decide no incluir el primer preescaler que divide en 1 la frecuencia que se
	 * quiere implementar, sino comenzar con la división en 2,4,8,16...
	 */
	// Se divide en 2 el bus 1.
	RCC->CFGR |= (RCC_CFGR_PPRE1_DIV2);
 80029ac:	4b2f      	ldr	r3, [pc, #188]	; (8002a6c <PLL_Config+0x19c>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4a2e      	ldr	r2, [pc, #184]	; (8002a6c <PLL_Config+0x19c>)
 80029b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029b6:	6093      	str	r3, [r2, #8]
	 * a 80 MHz, esta frecuencia se encuentra cómodamente ubicada antes de la
	 * frecuencia máxima del bus de datos, por tanto, el preescaler 0 que mantiene
	 * la frecuencia original, puede implementarse, dividiendo en 1.
	 */
	// Se divide en 1 el bus 2.
	RCC->CFGR |= (RCC_CFGR_PPRE2_DIV1);
 80029b8:	4b2c      	ldr	r3, [pc, #176]	; (8002a6c <PLL_Config+0x19c>)
 80029ba:	4a2c      	ldr	r2, [pc, #176]	; (8002a6c <PLL_Config+0x19c>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	6093      	str	r3, [r2, #8]

// Se debe configurar el sistema de manera que cuando la entrada del HSI
// sean 80 MHz, se mantenga.
	// La fuente de reloj del micro se configura sobre el HSI,
	RCC->PLLCFGR |= (0 << 22);
 80029c0:	4b2a      	ldr	r3, [pc, #168]	; (8002a6c <PLL_Config+0x19c>)
 80029c2:	4a2a      	ldr	r2, [pc, #168]	; (8002a6c <PLL_Config+0x19c>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	6053      	str	r3, [r2, #4]

	// Se divide la entrada de frecuencia en 8, para obtener 2 MHz.
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM_4);
 80029c8:	4b28      	ldr	r3, [pc, #160]	; (8002a6c <PLL_Config+0x19c>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	4a27      	ldr	r2, [pc, #156]	; (8002a6c <PLL_Config+0x19c>)
 80029ce:	f023 0310 	bic.w	r3, r3, #16
 80029d2:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLM_3);
 80029d4:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <PLL_Config+0x19c>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	4a24      	ldr	r2, [pc, #144]	; (8002a6c <PLL_Config+0x19c>)
 80029da:	f043 0308 	orr.w	r3, r3, #8
 80029de:	6053      	str	r3, [r2, #4]

	// Se aplica una máscara un poco rudimentaria para garantizar la limpieza del
	// del registro.
	RCC->PLLCFGR &= 0b1111111111111000000000111111;
 80029e0:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <PLL_Config+0x19c>)
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	4921      	ldr	r1, [pc, #132]	; (8002a6c <PLL_Config+0x19c>)
 80029e6:	4b24      	ldr	r3, [pc, #144]	; (8002a78 <PLL_Config+0x1a8>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	604b      	str	r3, [r1, #4]
	// Se ecriben los diferentes valores de las frecuencias que se quieren multiplicar.
	/* NOTE que aquí es donde se escriben cada una de las frecuencias dentro del
	 * registro de 9 bits que se tiene dentro del registro PLLCFGR del RCC qur se deciden
	 * aleatoriamente a gusto del usuario dentro del intervalo de voltaje escogido.
	 */
	if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_80MHZ){
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	785b      	ldrb	r3, [r3, #1]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d10c      	bne.n	8002a0e <PLL_Config+0x13e>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_4);
 80029f4:	4b1d      	ldr	r3, [pc, #116]	; (8002a6c <PLL_Config+0x19c>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4a1c      	ldr	r2, [pc, #112]	; (8002a6c <PLL_Config+0x19c>)
 80029fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029fe:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 8002a00:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <PLL_Config+0x19c>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	4a19      	ldr	r2, [pc, #100]	; (8002a6c <PLL_Config+0x19c>)
 8002a06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a0a:	6053      	str	r3, [r2, #4]
 8002a0c:	e046      	b.n	8002a9c <PLL_Config+0x1cc>
	}else if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_100MHZ){
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	785b      	ldrb	r3, [r3, #1]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d112      	bne.n	8002a3c <PLL_Config+0x16c>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_2);
 8002a16:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <PLL_Config+0x19c>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	4a14      	ldr	r2, [pc, #80]	; (8002a6c <PLL_Config+0x19c>)
 8002a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a20:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_5);
 8002a22:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <PLL_Config+0x19c>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	4a11      	ldr	r2, [pc, #68]	; (8002a6c <PLL_Config+0x19c>)
 8002a28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a2c:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 8002a2e:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <PLL_Config+0x19c>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	4a0e      	ldr	r2, [pc, #56]	; (8002a6c <PLL_Config+0x19c>)
 8002a34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a38:	6053      	str	r3, [r2, #4]
 8002a3a:	e02f      	b.n	8002a9c <PLL_Config+0x1cc>
	}else if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_70MHZ){
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	785b      	ldrb	r3, [r3, #1]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d11b      	bne.n	8002a7c <PLL_Config+0x1ac>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_1);
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <PLL_Config+0x19c>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	4a08      	ldr	r2, [pc, #32]	; (8002a6c <PLL_Config+0x19c>)
 8002a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a4e:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_2);
 8002a50:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <PLL_Config+0x19c>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4a05      	ldr	r2, [pc, #20]	; (8002a6c <PLL_Config+0x19c>)
 8002a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5a:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 8002a5c:	4b03      	ldr	r3, [pc, #12]	; (8002a6c <PLL_Config+0x19c>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	4a02      	ldr	r2, [pc, #8]	; (8002a6c <PLL_Config+0x19c>)
 8002a62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a66:	6053      	str	r3, [r2, #4]
 8002a68:	e018      	b.n	8002a9c <PLL_Config+0x1cc>
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40023c00 	.word	0x40023c00
 8002a74:	40007000 	.word	0x40007000
 8002a78:	0fff803f 	.word	0x0fff803f
	}else if(ptrPLLHandler->PLL_Config.PLL_frecuency == FRECUENCY_65MHZ){
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	785b      	ldrb	r3, [r3, #1]
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d10b      	bne.n	8002a9c <PLL_Config+0x1cc>
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_0);
 8002a84:	4b2f      	ldr	r3, [pc, #188]	; (8002b44 <PLL_Config+0x274>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	4a2e      	ldr	r2, [pc, #184]	; (8002b44 <PLL_Config+0x274>)
 8002a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a8e:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);
 8002a90:	4b2c      	ldr	r3, [pc, #176]	; (8002b44 <PLL_Config+0x274>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	4a2b      	ldr	r2, [pc, #172]	; (8002b44 <PLL_Config+0x274>)
 8002a96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a9a:	6053      	str	r3, [r2, #4]
	}
	// Se escoge como factor de reloj principal PLLP el número dos para obtener
	// la salida deseada en cada caso.
	RCC->PLLCFGR |= (00 << 16);
 8002a9c:	4b29      	ldr	r3, [pc, #164]	; (8002b44 <PLL_Config+0x274>)
 8002a9e:	4a29      	ldr	r2, [pc, #164]	; (8002b44 <PLL_Config+0x274>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	6053      	str	r3, [r2, #4]

	/*ACTIVACIÓN DEL PLL CON LOS PARÁMETROS ELEGIDOS ANTERIORMENTE. */
	// Se activa el PLL.
	RCC->CR |= (1<<24);
 8002aa4:	4b27      	ldr	r3, [pc, #156]	; (8002b44 <PLL_Config+0x274>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a26      	ldr	r2, [pc, #152]	; (8002b44 <PLL_Config+0x274>)
 8002aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aae:	6013      	str	r3, [r2, #0]
	// Se da un retardo que indica la activación del PLL.
	while (!(RCC->CR & (1<<25)));
 8002ab0:	bf00      	nop
 8002ab2:	4b24      	ldr	r3, [pc, #144]	; (8002b44 <PLL_Config+0x274>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f9      	beq.n	8002ab2 <PLL_Config+0x1e2>
	// Se introduce un 2 dentro del clock source del PLL.
	RCC->CFGR |= (2<<0);
 8002abe:	4b21      	ldr	r3, [pc, #132]	; (8002b44 <PLL_Config+0x274>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	4a20      	ldr	r2, [pc, #128]	; (8002b44 <PLL_Config+0x274>)
 8002ac4:	f043 0302 	orr.w	r3, r3, #2
 8002ac8:	6093      	str	r3, [r2, #8]

	// Aquí se espera a que el PLL esté listo como reloj principal de la configuracion.
	while (!(RCC->CFGR & (2<<2)));
 8002aca:	bf00      	nop
 8002acc:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <PLL_Config+0x274>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0f9      	beq.n	8002acc <PLL_Config+0x1fc>

	// Se selecciona la señal del PLL.
	RCC->CFGR |= (RCC_CFGR_MCO1_0);
 8002ad8:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <PLL_Config+0x274>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4a19      	ldr	r2, [pc, #100]	; (8002b44 <PLL_Config+0x274>)
 8002ade:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ae2:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (RCC_CFGR_MCO1_1);
 8002ae4:	4b17      	ldr	r3, [pc, #92]	; (8002b44 <PLL_Config+0x274>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4a16      	ldr	r2, [pc, #88]	; (8002b44 <PLL_Config+0x274>)
 8002aea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002aee:	6093      	str	r3, [r2, #8]

	// Para un preescaler de 5 unidades.
	RCC->CFGR |=  (RCC_CFGR_MCO1PRE_0);
 8002af0:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <PLL_Config+0x274>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	4a13      	ldr	r2, [pc, #76]	; (8002b44 <PLL_Config+0x274>)
 8002af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002afa:	6093      	str	r3, [r2, #8]
	RCC->CFGR |=  (RCC_CFGR_MCO1PRE_1);
 8002afc:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <PLL_Config+0x274>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	4a10      	ldr	r2, [pc, #64]	; (8002b44 <PLL_Config+0x274>)
 8002b02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b06:	6093      	str	r3, [r2, #8]
	RCC->CFGR |=  (RCC_CFGR_MCO1PRE_2);
 8002b08:	4b0e      	ldr	r3, [pc, #56]	; (8002b44 <PLL_Config+0x274>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	4a0d      	ldr	r2, [pc, #52]	; (8002b44 <PLL_Config+0x274>)
 8002b0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b12:	6093      	str	r3, [r2, #8]

	// Limpiamos el registo clock control register -> HSITRIM
	RCC->CR &= ~(RCC_CR_HSITRIM);
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <PLL_Config+0x274>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a0a      	ldr	r2, [pc, #40]	; (8002b44 <PLL_Config+0x274>)
 8002b1a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002b1e:	6013      	str	r3, [r2, #0]

	/* En control register se indica el resultado de la ecuación:
	 * (F_deseada - F_real)/48 kHz.
	 * Para ajustar el reloj interno del MCU, se escribe 12 en HSITRIM.
	 */
	RCC->CR |= RCC_CR_HSITRIM_2;
 8002b20:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <PLL_Config+0x274>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <PLL_Config+0x274>)
 8002b26:	f043 0320 	orr.w	r3, r3, #32
 8002b2a:	6013      	str	r3, [r2, #0]
	RCC->CR |= RCC_CR_HSITRIM_3;
 8002b2c:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <PLL_Config+0x274>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <PLL_Config+0x274>)
 8002b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b36:	6013      	str	r3, [r2, #0]

}// FIN DE LA FUNCIÓN DE CONFIGURACIÓN PARA DISTINTAS FRECUENCIAS.
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40023800 	.word	0x40023800

08002b48 <getConfigPLL>:

// Función para saber el estado del PLL y así poder caracterizar lo demás.
uint32_t getConfigPLL(void){
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
	// Se buscan los valores que están definiendo los valores actuales del reloj PLL
	uint32_t PLLN = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <getConfigPLL+0x3c>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	099b      	lsrs	r3, r3, #6
 8002b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b58:	60fb      	str	r3, [r7, #12]
	uint32_t PLLM = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos;
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <getConfigPLL+0x3c>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b62:	60bb      	str	r3, [r7, #8]
	// Se hace la operación para saber el valor actual del reloj. (Asume PLLP =2)
	uint32_t clockMicro = (HSI_VALUE / PLLM) * PLLN / 2;
 8002b64:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <getConfigPLL+0x40>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	fb02 f303 	mul.w	r3, r2, r3
 8002b74:	085b      	lsrs	r3, r3, #1
 8002b76:	607b      	str	r3, [r7, #4]
	return clockMicro;
 8002b78:	687b      	ldr	r3, [r7, #4]

}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr
 8002b84:	40023800 	.word	0x40023800
 8002b88:	20000040 	.word	0x20000040

08002b8c <chooseCLK>:

void chooseCLK(uint8_t clock){
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	71fb      	strb	r3, [r7, #7]
	switch(clock){
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d020      	beq.n	8002bde <chooseCLK+0x52>
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	dc2b      	bgt.n	8002bf8 <chooseCLK+0x6c>
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d002      	beq.n	8002baa <chooseCLK+0x1e>
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d00d      	beq.n	8002bc4 <chooseCLK+0x38>
		RCC->CFGR &= ~(RCC_CFGR_MCO1_0);
		RCC->CFGR &= ~(RCC_CFGR_MCO1_1);
		break;
	}
	default:{
		break;
 8002ba8:	e026      	b.n	8002bf8 <chooseCLK+0x6c>
		RCC->CFGR |= (RCC_CFGR_MCO1_0);
 8002baa:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <chooseCLK+0x78>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	4a15      	ldr	r2, [pc, #84]	; (8002c04 <chooseCLK+0x78>)
 8002bb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bb4:	6093      	str	r3, [r2, #8]
		RCC->CFGR |= (RCC_CFGR_MCO1_1);
 8002bb6:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <chooseCLK+0x78>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	4a12      	ldr	r2, [pc, #72]	; (8002c04 <chooseCLK+0x78>)
 8002bbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bc0:	6093      	str	r3, [r2, #8]
		break;
 8002bc2:	e01a      	b.n	8002bfa <chooseCLK+0x6e>
		RCC->CFGR |=  (RCC_CFGR_MCO1_0);
 8002bc4:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <chooseCLK+0x78>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	4a0e      	ldr	r2, [pc, #56]	; (8002c04 <chooseCLK+0x78>)
 8002bca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bce:	6093      	str	r3, [r2, #8]
		RCC->CFGR &= ~(RCC_CFGR_MCO1_1);
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <chooseCLK+0x78>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4a0b      	ldr	r2, [pc, #44]	; (8002c04 <chooseCLK+0x78>)
 8002bd6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002bda:	6093      	str	r3, [r2, #8]
		break;
 8002bdc:	e00d      	b.n	8002bfa <chooseCLK+0x6e>
		RCC->CFGR &= ~(RCC_CFGR_MCO1_0);
 8002bde:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <chooseCLK+0x78>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	4a08      	ldr	r2, [pc, #32]	; (8002c04 <chooseCLK+0x78>)
 8002be4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002be8:	6093      	str	r3, [r2, #8]
		RCC->CFGR &= ~(RCC_CFGR_MCO1_1);
 8002bea:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <chooseCLK+0x78>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	4a05      	ldr	r2, [pc, #20]	; (8002c04 <chooseCLK+0x78>)
 8002bf0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002bf4:	6093      	str	r3, [r2, #8]
		break;
 8002bf6:	e000      	b.n	8002bfa <chooseCLK+0x6e>
		break;
 8002bf8:	bf00      	nop
		} //Fin caso por defecto
	}
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr
 8002c04:	40023800 	.word	0x40023800

08002c08 <prescalerNumber>:

// Función para el comando que selecciona el preescaler
void prescalerNumber(uint8_t prescaler){
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	71fb      	strb	r3, [r7, #7]
	switch(prescaler){
 8002c12:	79fb      	ldrb	r3, [r7, #7]
 8002c14:	3b01      	subs	r3, #1
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d86b      	bhi.n	8002cf2 <prescalerNumber+0xea>
 8002c1a:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <prescalerNumber+0x18>)
 8002c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c20:	08002c35 	.word	0x08002c35
 8002c24:	08002c5b 	.word	0x08002c5b
 8002c28:	08002c81 	.word	0x08002c81
 8002c2c:	08002ca7 	.word	0x08002ca7
 8002c30:	08002ccd 	.word	0x08002ccd
	case 1:{
		// Sin prescaler
		RCC->CFGR &= ~(RCC_CFGR_MCO1PRE_0);
 8002c34:	4b32      	ldr	r3, [pc, #200]	; (8002d00 <prescalerNumber+0xf8>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	4a31      	ldr	r2, [pc, #196]	; (8002d00 <prescalerNumber+0xf8>)
 8002c3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c3e:	6093      	str	r3, [r2, #8]
		RCC->CFGR &= ~(RCC_CFGR_MCO1PRE_1);
 8002c40:	4b2f      	ldr	r3, [pc, #188]	; (8002d00 <prescalerNumber+0xf8>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	4a2e      	ldr	r2, [pc, #184]	; (8002d00 <prescalerNumber+0xf8>)
 8002c46:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002c4a:	6093      	str	r3, [r2, #8]
		RCC->CFGR &= ~(RCC_CFGR_MCO1PRE_2);
 8002c4c:	4b2c      	ldr	r3, [pc, #176]	; (8002d00 <prescalerNumber+0xf8>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	4a2b      	ldr	r2, [pc, #172]	; (8002d00 <prescalerNumber+0xf8>)
 8002c52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c56:	6093      	str	r3, [r2, #8]
		break;
 8002c58:	e04c      	b.n	8002cf4 <prescalerNumber+0xec>
	}
	case 2:{
		// prescaler de 2
		RCC->CFGR &= ~(RCC_CFGR_MCO1PRE_0);
 8002c5a:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <prescalerNumber+0xf8>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	4a28      	ldr	r2, [pc, #160]	; (8002d00 <prescalerNumber+0xf8>)
 8002c60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c64:	6093      	str	r3, [r2, #8]
		RCC->CFGR &= ~(RCC_CFGR_MCO1PRE_1);
 8002c66:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <prescalerNumber+0xf8>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	4a25      	ldr	r2, [pc, #148]	; (8002d00 <prescalerNumber+0xf8>)
 8002c6c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002c70:	6093      	str	r3, [r2, #8]
		RCC->CFGR |=  (RCC_CFGR_MCO1PRE_2);
 8002c72:	4b23      	ldr	r3, [pc, #140]	; (8002d00 <prescalerNumber+0xf8>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	4a22      	ldr	r2, [pc, #136]	; (8002d00 <prescalerNumber+0xf8>)
 8002c78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c7c:	6093      	str	r3, [r2, #8]
		break;
 8002c7e:	e039      	b.n	8002cf4 <prescalerNumber+0xec>
	}
	case 3:{
		// prescaler de 3
		RCC->CFGR |=  (RCC_CFGR_MCO1PRE_0);
 8002c80:	4b1f      	ldr	r3, [pc, #124]	; (8002d00 <prescalerNumber+0xf8>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	4a1e      	ldr	r2, [pc, #120]	; (8002d00 <prescalerNumber+0xf8>)
 8002c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c8a:	6093      	str	r3, [r2, #8]
		RCC->CFGR &= ~(RCC_CFGR_MCO1PRE_1);
 8002c8c:	4b1c      	ldr	r3, [pc, #112]	; (8002d00 <prescalerNumber+0xf8>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	4a1b      	ldr	r2, [pc, #108]	; (8002d00 <prescalerNumber+0xf8>)
 8002c92:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002c96:	6093      	str	r3, [r2, #8]
		RCC->CFGR |=  (RCC_CFGR_MCO1PRE_2);
 8002c98:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <prescalerNumber+0xf8>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	4a18      	ldr	r2, [pc, #96]	; (8002d00 <prescalerNumber+0xf8>)
 8002c9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ca2:	6093      	str	r3, [r2, #8]
		break;
 8002ca4:	e026      	b.n	8002cf4 <prescalerNumber+0xec>
	}
	case 4:{
		//prescaler de 4
		RCC->CFGR &=  ~(RCC_CFGR_MCO1PRE_0);
 8002ca6:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <prescalerNumber+0xf8>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	4a15      	ldr	r2, [pc, #84]	; (8002d00 <prescalerNumber+0xf8>)
 8002cac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cb0:	6093      	str	r3, [r2, #8]
		RCC->CFGR |=  (RCC_CFGR_MCO1PRE_1);
 8002cb2:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <prescalerNumber+0xf8>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <prescalerNumber+0xf8>)
 8002cb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cbc:	6093      	str	r3, [r2, #8]
		RCC->CFGR |=  (RCC_CFGR_MCO1PRE_2);
 8002cbe:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <prescalerNumber+0xf8>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	4a0f      	ldr	r2, [pc, #60]	; (8002d00 <prescalerNumber+0xf8>)
 8002cc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cc8:	6093      	str	r3, [r2, #8]
		break;
 8002cca:	e013      	b.n	8002cf4 <prescalerNumber+0xec>
	}
	case 5:{
		//prescaler de 5
		RCC->CFGR |=  (RCC_CFGR_MCO1PRE_0);
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <prescalerNumber+0xf8>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	4a0b      	ldr	r2, [pc, #44]	; (8002d00 <prescalerNumber+0xf8>)
 8002cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cd6:	6093      	str	r3, [r2, #8]
		RCC->CFGR |=  (RCC_CFGR_MCO1PRE_1);
 8002cd8:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <prescalerNumber+0xf8>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4a08      	ldr	r2, [pc, #32]	; (8002d00 <prescalerNumber+0xf8>)
 8002cde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	6093      	str	r3, [r2, #8]
		RCC->CFGR |=  (RCC_CFGR_MCO1PRE_2);
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <prescalerNumber+0xf8>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	4a05      	ldr	r2, [pc, #20]	; (8002d00 <prescalerNumber+0xf8>)
 8002cea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cee:	6093      	str	r3, [r2, #8]
		break;
 8002cf0:	e000      	b.n	8002cf4 <prescalerNumber+0xec>
	}
	default:{
		break;
 8002cf2:	bf00      	nop
		} //Fin caso por defecto
	}

}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800

08002d04 <pwm_Config>:
 */

#include "PwmDriver.h"

/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if(ptrPwmHandler->ptrTIMx == TIM2){
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d14:	d106      	bne.n	8002d24 <pwm_Config+0x20>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002d16:	4b59      	ldr	r3, [pc, #356]	; (8002e7c <pwm_Config+0x178>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	4a58      	ldr	r2, [pc, #352]	; (8002e7c <pwm_Config+0x178>)
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	6413      	str	r3, [r2, #64]	; 0x40
 8002d22:	e024      	b.n	8002d6e <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a55      	ldr	r2, [pc, #340]	; (8002e80 <pwm_Config+0x17c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d106      	bne.n	8002d3c <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002d2e:	4b53      	ldr	r3, [pc, #332]	; (8002e7c <pwm_Config+0x178>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	4a52      	ldr	r2, [pc, #328]	; (8002e7c <pwm_Config+0x178>)
 8002d34:	f043 0302 	orr.w	r3, r3, #2
 8002d38:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3a:	e018      	b.n	8002d6e <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a50      	ldr	r2, [pc, #320]	; (8002e84 <pwm_Config+0x180>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d106      	bne.n	8002d54 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002d46:	4b4d      	ldr	r3, [pc, #308]	; (8002e7c <pwm_Config+0x178>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	4a4c      	ldr	r2, [pc, #304]	; (8002e7c <pwm_Config+0x178>)
 8002d4c:	f043 0304 	orr.w	r3, r3, #4
 8002d50:	6413      	str	r3, [r2, #64]	; 0x40
 8002d52:	e00c      	b.n	8002d6e <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a4b      	ldr	r2, [pc, #300]	; (8002e88 <pwm_Config+0x184>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d106      	bne.n	8002d6c <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8002d5e:	4b47      	ldr	r3, [pc, #284]	; (8002e7c <pwm_Config+0x178>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	4a46      	ldr	r2, [pc, #280]	; (8002e7c <pwm_Config+0x178>)
 8002d64:	f043 0308 	orr.w	r3, r3, #8
 8002d68:	6413      	str	r3, [r2, #64]	; 0x40
 8002d6a:	e000      	b.n	8002d6e <pwm_Config+0x6a>
	}
	else{
		__NOP();
 8002d6c:	bf00      	nop
	}

	/* 1. Cargamos la frecuencia deseada */
	setFrequency(ptrPwmHandler);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f8dc 	bl	8002f2c <setFrequency>

	/* 2. Cargamos el valor del dutty-Cycle*/
	setDuttyCycle(ptrPwmHandler);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f8fd 	bl	8002f74 <setDuttyCycle>

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0210 	bic.w	r2, r2, #16
 8002d88:	601a      	str	r2, [r3, #0]
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	791b      	ldrb	r3, [r3, #4]
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d86e      	bhi.n	8002e70 <pwm_Config+0x16c>
 8002d92:	a201      	add	r2, pc, #4	; (adr r2, 8002d98 <pwm_Config+0x94>)
 8002d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d98:	08002da9 	.word	0x08002da9
 8002d9c:	08002ddb 	.word	0x08002ddb
 8002da0:	08002e0d 	.word	0x08002e0d
 8002da4:	08002e3f 	.word	0x08002e3f
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~(TIM_CCMR1_CC1S);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699a      	ldr	r2, [r3, #24]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0203 	bic.w	r2, r2, #3
 8002db6:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC1M_Pos);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699a      	ldr	r2, [r3, #24]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002dc6:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0208 	orr.w	r2, r2, #8
 8002dd6:	619a      	str	r2, [r3, #24]

		break;
 8002dd8:	e04b      	b.n	8002e72 <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~(TIM_CCMR1_CC2S);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	699a      	ldr	r2, [r3, #24]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002de8:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC2M_Pos);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	699a      	ldr	r2, [r3, #24]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8002df8:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	699a      	ldr	r2, [r3, #24]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e08:	619a      	str	r2, [r3, #24]
		break;
 8002e0a:	e032      	b.n	8002e72 <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_3:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~(TIM_CCMR2_CC3S);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	69da      	ldr	r2, [r3, #28]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0203 	bic.w	r2, r2, #3
 8002e1a:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC3M_Pos);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	69da      	ldr	r2, [r3, #28]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002e2a:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0208 	orr.w	r2, r2, #8
 8002e3a:	61da      	str	r2, [r3, #28]
		break;
 8002e3c:	e019      	b.n	8002e72 <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_4:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~(TIM_CCMR2_CC4S);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69da      	ldr	r2, [r3, #28]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002e4c:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC4M_Pos);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69da      	ldr	r2, [r3, #28]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8002e5c:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	69da      	ldr	r2, [r3, #28]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e6c:	61da      	str	r2, [r3, #28]
		break;
 8002e6e:	e000      	b.n	8002e72 <pwm_Config+0x16e>
	}

	default:{
		break;
 8002e70:	bf00      	nop

	/* 6. Activamos la salida seleccionada */
	enableOutput(ptrPwmHandler);

	}// fin del switch-case
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	40000400 	.word	0x40000400
 8002e84:	40000800 	.word	0x40000800
 8002e88:	40000c00 	.word	0x40000c00

08002e8c <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr
	...

08002eb0 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
void enableOutput(PWM_Handler_t *ptrPwmHandler) {
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
	switch (ptrPwmHandler->config.channel) {
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	791b      	ldrb	r3, [r3, #4]
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d82f      	bhi.n	8002f20 <enableOutput+0x70>
 8002ec0:	a201      	add	r2, pc, #4	; (adr r2, 8002ec8 <enableOutput+0x18>)
 8002ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec6:	bf00      	nop
 8002ec8:	08002ed9 	.word	0x08002ed9
 8002ecc:	08002eeb 	.word	0x08002eeb
 8002ed0:	08002efd 	.word	0x08002efd
 8002ed4:	08002f0f 	.word	0x08002f0f
	case PWM_CHANNEL_1: {
		// Activamos la salida del canal 1
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6a1a      	ldr	r2, [r3, #32]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	621a      	str	r2, [r3, #32]
		break;
 8002ee8:	e01b      	b.n	8002f22 <enableOutput+0x72>
	}

	case PWM_CHANNEL_2: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6a1a      	ldr	r2, [r3, #32]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0210 	orr.w	r2, r2, #16
 8002ef8:	621a      	str	r2, [r3, #32]
		break;
 8002efa:	e012      	b.n	8002f22 <enableOutput+0x72>
	}

	case PWM_CHANNEL_3: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6a1a      	ldr	r2, [r3, #32]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f0a:	621a      	str	r2, [r3, #32]

		break;
 8002f0c:	e009      	b.n	8002f22 <enableOutput+0x72>
	}

	case PWM_CHANNEL_4: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6a1a      	ldr	r2, [r3, #32]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f1c:	621a      	str	r2, [r3, #32]

		break;
 8002f1e:	e000      	b.n	8002f22 <enableOutput+0x72>
	}

	default: {
		break;
 8002f20:	bf00      	nop
	}
	}
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <setFrequency>:
/*
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler -1;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3a01      	subs	r2, #1
 8002f3e:	629a      	str	r2, [r3, #40]	; 0x28

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.
	ptrPwmHandler->ptrTIMx->ARR = ptrPwmHandler->config.periodo;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	899a      	ldrh	r2, [r3, #12]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <updateFrequency>:


/* Función para actualizar la frecuencia, funciona de la mano con setFrequency */
void updateFrequency(PWM_Handler_t *ptrPwmHandler, uint16_t newFreq){
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	807b      	strh	r3, [r7, #2]
	// Actualizamos el registro que manipula el periodo
    ptrPwmHandler->config.periodo = newFreq;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	887a      	ldrh	r2, [r7, #2]
 8002f64:	819a      	strh	r2, [r3, #12]

	// Llamamos a la fucnión que cambia la frecuencia
    setFrequency(ptrPwmHandler);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff ffe0 	bl	8002f2c <setFrequency>
}
 8002f6c:	bf00      	nop
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <setDuttyCycle>:

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	791b      	ldrb	r3, [r3, #4]
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d823      	bhi.n	8002fcc <setDuttyCycle+0x58>
 8002f84:	a201      	add	r2, pc, #4	; (adr r2, 8002f8c <setDuttyCycle+0x18>)
 8002f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8a:	bf00      	nop
 8002f8c:	08002f9d 	.word	0x08002f9d
 8002f90:	08002fa9 	.word	0x08002fa9
 8002f94:	08002fb5 	.word	0x08002fb5
 8002f98:	08002fc1 	.word	0x08002fc1
	case PWM_CHANNEL_1:{
		ptrPwmHandler->ptrTIMx->CCR1 = ptrPwmHandler->config.duttyCicle;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	89da      	ldrh	r2, [r3, #14]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 8002fa6:	e012      	b.n	8002fce <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_2:{
		ptrPwmHandler->ptrTIMx->CCR2 = ptrPwmHandler->config.duttyCicle;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	89da      	ldrh	r2, [r3, #14]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8002fb2:	e00c      	b.n	8002fce <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_3:{
		ptrPwmHandler->ptrTIMx->CCR3 = ptrPwmHandler->config.duttyCicle;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	89da      	ldrh	r2, [r3, #14]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8002fbe:	e006      	b.n	8002fce <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_4:{
		ptrPwmHandler->ptrTIMx->CCR4 = ptrPwmHandler->config.duttyCicle;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	89da      	ldrh	r2, [r3, #14]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8002fca:	e000      	b.n	8002fce <setDuttyCycle+0x5a>
	}

	default:{
		break;
 8002fcc:	bf00      	nop
	}

	}// fin del switch-case

}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr

08002fd8 <updateDuttyCycle>:


/* Función para actualizar el Dutty, funciona de la mano con setDuttyCycle */
void updateDuttyCycle(PWM_Handler_t *ptrPwmHandler, uint16_t newDutty){
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	807b      	strh	r3, [r7, #2]
	// Actualizamos el registro que manipula el dutty
	ptrPwmHandler->config.duttyCicle = newDutty;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	887a      	ldrh	r2, [r7, #2]
 8002fe8:	81da      	strh	r2, [r3, #14]

	// Llamamos a la fucnión que cambia el dutty y cargamos el nuevo valor
	setDuttyCycle(ptrPwmHandler);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff ffc2 	bl	8002f74 <setDuttyCycle>
}
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <rtc_Config>:
uint8_t RTC_añoUnidades	 	 = 0;
uint8_t RTC_añoDecenas 	     = 0;
uint8_t RTC_wdu              = 0;

// Funcion que configura el RTC con el cristal LSE
void rtc_Config(RTC_Handler_t *ptrRtcHandler){
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]

	/*Es necesario habilitar el reloj del APB1 donde se encuentra el periferico RTC. Además,
	 *se habilita el acceso de escritura porque el periferico se encuentra protegido
	 */
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003000:	4ba4      	ldr	r3, [pc, #656]	; (8003294 <rtc_Config+0x29c>)
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	4aa3      	ldr	r2, [pc, #652]	; (8003294 <rtc_Config+0x29c>)
 8003006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300a:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= PWR_CR_DBP;
 800300c:	4ba2      	ldr	r3, [pc, #648]	; (8003298 <rtc_Config+0x2a0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4aa1      	ldr	r2, [pc, #644]	; (8003298 <rtc_Config+0x2a0>)
 8003012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003016:	6013      	str	r3, [r2, #0]

	RCC->BDCR |= RCC_BDCR_RTCEN;    // Se activa la señal de reloj
 8003018:	4b9e      	ldr	r3, [pc, #632]	; (8003294 <rtc_Config+0x29c>)
 800301a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301c:	4a9d      	ldr	r2, [pc, #628]	; (8003294 <rtc_Config+0x29c>)
 800301e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003022:	6713      	str	r3, [r2, #112]	; 0x70
	RCC->BDCR |= RCC_BDCR_LSEON;    // Se activa el cristal LSE
 8003024:	4b9b      	ldr	r3, [pc, #620]	; (8003294 <rtc_Config+0x29c>)
 8003026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003028:	4a9a      	ldr	r2, [pc, #616]	; (8003294 <rtc_Config+0x29c>)
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	6713      	str	r3, [r2, #112]	; 0x70
	RCC->BDCR |= RCC_BDCR_RTCSEL_0; // Se selecciona el LSE como fuente del RTC
 8003030:	4b98      	ldr	r3, [pc, #608]	; (8003294 <rtc_Config+0x29c>)
 8003032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003034:	4a97      	ldr	r2, [pc, #604]	; (8003294 <rtc_Config+0x29c>)
 8003036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303a:	6713      	str	r3, [r2, #112]	; 0x70

	// Se espera hasta que el LSE este listo
	while(!(RCC->BDCR & RCC_BDCR_LSERDY));
 800303c:	bf00      	nop
 800303e:	4b95      	ldr	r3, [pc, #596]	; (8003294 <rtc_Config+0x29c>)
 8003040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f9      	beq.n	800303e <rtc_Config+0x46>

	 /* Se ingresan las claves dadas por el fabricante en el registro de proteccion contra
	 * escritura (Para más detalles, ver página 438 del reference manual)
	 */

    RTC->WPR |= 0xCA;
 800304a:	4b94      	ldr	r3, [pc, #592]	; (800329c <rtc_Config+0x2a4>)
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	4a93      	ldr	r2, [pc, #588]	; (800329c <rtc_Config+0x2a4>)
 8003050:	f043 03ca 	orr.w	r3, r3, #202	; 0xca
 8003054:	6253      	str	r3, [r2, #36]	; 0x24
    RTC->WPR |= 0x53;
 8003056:	4b91      	ldr	r3, [pc, #580]	; (800329c <rtc_Config+0x2a4>)
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	4a90      	ldr	r2, [pc, #576]	; (800329c <rtc_Config+0x2a4>)
 800305c:	f043 0353 	orr.w	r3, r3, #83	; 0x53
 8003060:	6253      	str	r3, [r2, #36]	; 0x24

    // Se entra en el modo de inicializacion (Se habilita que el usuario pueda cambiar valores)
    RTC->ISR |= RTC_ISR_INIT;
 8003062:	4b8e      	ldr	r3, [pc, #568]	; (800329c <rtc_Config+0x2a4>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	4a8d      	ldr	r2, [pc, #564]	; (800329c <rtc_Config+0x2a4>)
 8003068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800306c:	60d3      	str	r3, [r2, #12]

    // Se espera a que se active este modo
    while(!(RTC->ISR & RTC_ISR_INITF));
 800306e:	bf00      	nop
 8003070:	4b8a      	ldr	r3, [pc, #552]	; (800329c <rtc_Config+0x2a4>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0f9      	beq.n	8003070 <rtc_Config+0x78>
    //Se configuran los prescaler para obtener 1 Hz, 127 para el asincrono y 255 para el sincrono.
    //32768 Hz / (127 +1) = 256 Hz
    //256 Hz /(255 + 1) = 1 Hz
    /* Las ecuaciones y la explicacion estan en la pagina 457 del reference manual */

    RTC->PRER |= 127 << RTC_PRER_PREDIV_A_Pos;
 800307c:	4b87      	ldr	r3, [pc, #540]	; (800329c <rtc_Config+0x2a4>)
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	4a86      	ldr	r2, [pc, #536]	; (800329c <rtc_Config+0x2a4>)
 8003082:	f443 03fe 	orr.w	r3, r3, #8323072	; 0x7f0000
 8003086:	6113      	str	r3, [r2, #16]
    RTC->PRER |= 255 << RTC_PRER_PREDIV_S_Pos;
 8003088:	4b84      	ldr	r3, [pc, #528]	; (800329c <rtc_Config+0x2a4>)
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	4a83      	ldr	r2, [pc, #524]	; (800329c <rtc_Config+0x2a4>)
 800308e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8003092:	6113      	str	r3, [r2, #16]


    //Se configura el RTC para que tomen directamente valores de los contadores del calendario

    RTC->CR |= RTC_CR_BYPSHAD;
 8003094:	4b81      	ldr	r3, [pc, #516]	; (800329c <rtc_Config+0x2a4>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	4a80      	ldr	r2, [pc, #512]	; (800329c <rtc_Config+0x2a4>)
 800309a:	f043 0320 	orr.w	r3, r3, #32
 800309e:	6093      	str	r3, [r2, #8]

    // Se reinician los contadores del calendario
    RTC->TR = 0;
 80030a0:	4b7e      	ldr	r3, [pc, #504]	; (800329c <rtc_Config+0x2a4>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
    RTC->DR = 0;
 80030a6:	4b7d      	ldr	r3, [pc, #500]	; (800329c <rtc_Config+0x2a4>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	605a      	str	r2, [r3, #4]

    // El formato está en 24 horas.
    RTC->CR &= ~RTC_CR_FMT;
 80030ac:	4b7b      	ldr	r3, [pc, #492]	; (800329c <rtc_Config+0x2a4>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	4a7a      	ldr	r2, [pc, #488]	; (800329c <rtc_Config+0x2a4>)
 80030b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030b6:	6093      	str	r3, [r2, #8]

    /* El registro time register esta en formato BCD. se realiza la division y el modulo para
     * obtener decenas y unidades.
     */

    RTC->TR |= ptrRtcHandler->RTC_Hours/10 << RTC_TR_HT_Pos;
 80030b8:	4b78      	ldr	r3, [pc, #480]	; (800329c <rtc_Config+0x2a4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	7812      	ldrb	r2, [r2, #0]
 80030c0:	4977      	ldr	r1, [pc, #476]	; (80032a0 <rtc_Config+0x2a8>)
 80030c2:	fba1 1202 	umull	r1, r2, r1, r2
 80030c6:	08d2      	lsrs	r2, r2, #3
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	0512      	lsls	r2, r2, #20
 80030cc:	4611      	mov	r1, r2
 80030ce:	4a73      	ldr	r2, [pc, #460]	; (800329c <rtc_Config+0x2a4>)
 80030d0:	430b      	orrs	r3, r1
 80030d2:	6013      	str	r3, [r2, #0]
    RTC->TR |= ptrRtcHandler->RTC_Hours%10 << RTC_TR_HU_Pos;
 80030d4:	4b71      	ldr	r3, [pc, #452]	; (800329c <rtc_Config+0x2a4>)
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	781a      	ldrb	r2, [r3, #0]
 80030dc:	4b70      	ldr	r3, [pc, #448]	; (80032a0 <rtc_Config+0x2a8>)
 80030de:	fba3 1302 	umull	r1, r3, r3, r2
 80030e2:	08d9      	lsrs	r1, r3, #3
 80030e4:	460b      	mov	r3, r1
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	041b      	lsls	r3, r3, #16
 80030f2:	4a6a      	ldr	r2, [pc, #424]	; (800329c <rtc_Config+0x2a4>)
 80030f4:	4303      	orrs	r3, r0
 80030f6:	6013      	str	r3, [r2, #0]
    RTC->TR |= ptrRtcHandler->RTC_Minutes/10 << RTC_TR_MNT_Pos;
 80030f8:	4b68      	ldr	r3, [pc, #416]	; (800329c <rtc_Config+0x2a4>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	7852      	ldrb	r2, [r2, #1]
 8003100:	4967      	ldr	r1, [pc, #412]	; (80032a0 <rtc_Config+0x2a8>)
 8003102:	fba1 1202 	umull	r1, r2, r1, r2
 8003106:	08d2      	lsrs	r2, r2, #3
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	0312      	lsls	r2, r2, #12
 800310c:	4611      	mov	r1, r2
 800310e:	4a63      	ldr	r2, [pc, #396]	; (800329c <rtc_Config+0x2a4>)
 8003110:	430b      	orrs	r3, r1
 8003112:	6013      	str	r3, [r2, #0]
    RTC->TR |= ptrRtcHandler->RTC_Minutes%10 << RTC_TR_MNU_Pos;
 8003114:	4b61      	ldr	r3, [pc, #388]	; (800329c <rtc_Config+0x2a4>)
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	785a      	ldrb	r2, [r3, #1]
 800311c:	4b60      	ldr	r3, [pc, #384]	; (80032a0 <rtc_Config+0x2a8>)
 800311e:	fba3 1302 	umull	r1, r3, r3, r2
 8003122:	08d9      	lsrs	r1, r3, #3
 8003124:	460b      	mov	r3, r1
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	b2db      	uxtb	r3, r3
 8003130:	021b      	lsls	r3, r3, #8
 8003132:	4a5a      	ldr	r2, [pc, #360]	; (800329c <rtc_Config+0x2a4>)
 8003134:	4303      	orrs	r3, r0
 8003136:	6013      	str	r3, [r2, #0]
    RTC->TR |= ptrRtcHandler->RTC_Seconds/10  << RTC_TR_ST_Pos;
 8003138:	4b58      	ldr	r3, [pc, #352]	; (800329c <rtc_Config+0x2a4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	7892      	ldrb	r2, [r2, #2]
 8003140:	4957      	ldr	r1, [pc, #348]	; (80032a0 <rtc_Config+0x2a8>)
 8003142:	fba1 1202 	umull	r1, r2, r1, r2
 8003146:	08d2      	lsrs	r2, r2, #3
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	0112      	lsls	r2, r2, #4
 800314c:	4611      	mov	r1, r2
 800314e:	4a53      	ldr	r2, [pc, #332]	; (800329c <rtc_Config+0x2a4>)
 8003150:	430b      	orrs	r3, r1
 8003152:	6013      	str	r3, [r2, #0]
    RTC->TR |= ptrRtcHandler->RTC_Seconds%10 << RTC_TR_SU_Pos;
 8003154:	4b51      	ldr	r3, [pc, #324]	; (800329c <rtc_Config+0x2a4>)
 8003156:	6818      	ldr	r0, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	789a      	ldrb	r2, [r3, #2]
 800315c:	4b50      	ldr	r3, [pc, #320]	; (80032a0 <rtc_Config+0x2a8>)
 800315e:	fba3 1302 	umull	r1, r3, r3, r2
 8003162:	08d9      	lsrs	r1, r3, #3
 8003164:	460b      	mov	r3, r1
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	b2db      	uxtb	r3, r3
 8003170:	4a4a      	ldr	r2, [pc, #296]	; (800329c <rtc_Config+0x2a4>)
 8003172:	4303      	orrs	r3, r0
 8003174:	6013      	str	r3, [r2, #0]

    //Para el formato AM-PM
    RTC->TR |= ptrRtcHandler->RTC_AmPm << RTC_TR_PM_Pos;
 8003176:	4b49      	ldr	r3, [pc, #292]	; (800329c <rtc_Config+0x2a4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	7a52      	ldrb	r2, [r2, #9]
 800317e:	0592      	lsls	r2, r2, #22
 8003180:	4611      	mov	r1, r2
 8003182:	4a46      	ldr	r2, [pc, #280]	; (800329c <rtc_Config+0x2a4>)
 8003184:	430b      	orrs	r3, r1
 8003186:	6013      	str	r3, [r2, #0]

    /* El registro RTC data register se encuentra en formato BCD,se realiza la division y
     * el modulo para obtener decenas y unidades.
     */

    RTC->DR |= ptrRtcHandler->RTC_Months%10 << RTC_DR_MU_Pos;
 8003188:	4b44      	ldr	r3, [pc, #272]	; (800329c <rtc_Config+0x2a4>)
 800318a:	6858      	ldr	r0, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	791a      	ldrb	r2, [r3, #4]
 8003190:	4b43      	ldr	r3, [pc, #268]	; (80032a0 <rtc_Config+0x2a8>)
 8003192:	fba3 1302 	umull	r1, r3, r3, r2
 8003196:	08d9      	lsrs	r1, r3, #3
 8003198:	460b      	mov	r3, r1
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	4a3d      	ldr	r2, [pc, #244]	; (800329c <rtc_Config+0x2a4>)
 80031a8:	4303      	orrs	r3, r0
 80031aa:	6053      	str	r3, [r2, #4]
    RTC->DR |= ptrRtcHandler->RTC_Months/10 << RTC_DR_MT_Pos;
 80031ac:	4b3b      	ldr	r3, [pc, #236]	; (800329c <rtc_Config+0x2a4>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	7912      	ldrb	r2, [r2, #4]
 80031b4:	493a      	ldr	r1, [pc, #232]	; (80032a0 <rtc_Config+0x2a8>)
 80031b6:	fba1 1202 	umull	r1, r2, r1, r2
 80031ba:	08d2      	lsrs	r2, r2, #3
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	0312      	lsls	r2, r2, #12
 80031c0:	4611      	mov	r1, r2
 80031c2:	4a36      	ldr	r2, [pc, #216]	; (800329c <rtc_Config+0x2a4>)
 80031c4:	430b      	orrs	r3, r1
 80031c6:	6053      	str	r3, [r2, #4]
    RTC->DR |= ptrRtcHandler->RTC_Days/10 << RTC_DR_DT_Pos;
 80031c8:	4b34      	ldr	r3, [pc, #208]	; (800329c <rtc_Config+0x2a4>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	78d2      	ldrb	r2, [r2, #3]
 80031d0:	4933      	ldr	r1, [pc, #204]	; (80032a0 <rtc_Config+0x2a8>)
 80031d2:	fba1 1202 	umull	r1, r2, r1, r2
 80031d6:	08d2      	lsrs	r2, r2, #3
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	0112      	lsls	r2, r2, #4
 80031dc:	4611      	mov	r1, r2
 80031de:	4a2f      	ldr	r2, [pc, #188]	; (800329c <rtc_Config+0x2a4>)
 80031e0:	430b      	orrs	r3, r1
 80031e2:	6053      	str	r3, [r2, #4]
    RTC->DR |= ptrRtcHandler->RTC_Days%10 << RTC_DR_DU_Pos;
 80031e4:	4b2d      	ldr	r3, [pc, #180]	; (800329c <rtc_Config+0x2a4>)
 80031e6:	6858      	ldr	r0, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	78da      	ldrb	r2, [r3, #3]
 80031ec:	4b2c      	ldr	r3, [pc, #176]	; (80032a0 <rtc_Config+0x2a8>)
 80031ee:	fba3 1302 	umull	r1, r3, r3, r2
 80031f2:	08d9      	lsrs	r1, r3, #3
 80031f4:	460b      	mov	r3, r1
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	4a26      	ldr	r2, [pc, #152]	; (800329c <rtc_Config+0x2a4>)
 8003202:	4303      	orrs	r3, r0
 8003204:	6053      	str	r3, [r2, #4]
    RTC->DR |= ptrRtcHandler->RTC_Wdu<< RTC_DR_WDU_Pos;
 8003206:	4b25      	ldr	r3, [pc, #148]	; (800329c <rtc_Config+0x2a4>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	7a12      	ldrb	r2, [r2, #8]
 800320e:	0352      	lsls	r2, r2, #13
 8003210:	4611      	mov	r1, r2
 8003212:	4a22      	ldr	r2, [pc, #136]	; (800329c <rtc_Config+0x2a4>)
 8003214:	430b      	orrs	r3, r1
 8003216:	6053      	str	r3, [r2, #4]

    /*El sistema por defecto tiene la fecha del año 2000, de este modo se resta 2000 al valor del handler
     * y se realiza la separacion de decenas y unidades porque los años se encuentran en formato BCD.
     */
    RTC->DR |= ((ptrRtcHandler->RTC_Years -2000)%10) << RTC_DR_YU_Pos;
 8003218:	4b20      	ldr	r3, [pc, #128]	; (800329c <rtc_Config+0x2a4>)
 800321a:	6858      	ldr	r0, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	88db      	ldrh	r3, [r3, #6]
 8003220:	f5a3 61fa 	sub.w	r1, r3, #2000	; 0x7d0
 8003224:	4b1f      	ldr	r3, [pc, #124]	; (80032a4 <rtc_Config+0x2ac>)
 8003226:	fb83 2301 	smull	r2, r3, r3, r1
 800322a:	109a      	asrs	r2, r3, #2
 800322c:	17cb      	asrs	r3, r1, #31
 800322e:	1ad2      	subs	r2, r2, r3
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	1aca      	subs	r2, r1, r3
 800323a:	0413      	lsls	r3, r2, #16
 800323c:	4a17      	ldr	r2, [pc, #92]	; (800329c <rtc_Config+0x2a4>)
 800323e:	4303      	orrs	r3, r0
 8003240:	6053      	str	r3, [r2, #4]
    RTC->DR |= (ptrRtcHandler->RTC_Years - 2000)/10 << RTC_DR_YT_Pos;
 8003242:	4b16      	ldr	r3, [pc, #88]	; (800329c <rtc_Config+0x2a4>)
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	88db      	ldrh	r3, [r3, #6]
 800324a:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800324e:	4915      	ldr	r1, [pc, #84]	; (80032a4 <rtc_Config+0x2ac>)
 8003250:	fb81 0103 	smull	r0, r1, r1, r3
 8003254:	1089      	asrs	r1, r1, #2
 8003256:	17db      	asrs	r3, r3, #31
 8003258:	1acb      	subs	r3, r1, r3
 800325a:	051b      	lsls	r3, r3, #20
 800325c:	490f      	ldr	r1, [pc, #60]	; (800329c <rtc_Config+0x2a4>)
 800325e:	4313      	orrs	r3, r2
 8003260:	604b      	str	r3, [r1, #4]

    // Activamos nuevamente el real time clock
    RCC->BDCR |= RCC_BDCR_RTCEN;
 8003262:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <rtc_Config+0x29c>)
 8003264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003266:	4a0b      	ldr	r2, [pc, #44]	; (8003294 <rtc_Config+0x29c>)
 8003268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800326c:	6713      	str	r3, [r2, #112]	; 0x70

    // Salimos del modo de inicializacion
    RTC->ISR &= ~RTC_ISR_INIT;
 800326e:	4b0b      	ldr	r3, [pc, #44]	; (800329c <rtc_Config+0x2a4>)
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	4a0a      	ldr	r2, [pc, #40]	; (800329c <rtc_Config+0x2a4>)
 8003274:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003278:	60d3      	str	r3, [r2, #12]

    // Se habilita la proteccion de bits
    PWR->CR &= ~ PWR_CR_DBP;
 800327a:	4b07      	ldr	r3, [pc, #28]	; (8003298 <rtc_Config+0x2a0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a06      	ldr	r2, [pc, #24]	; (8003298 <rtc_Config+0x2a0>)
 8003280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003284:	6013      	str	r3, [r2, #0]

    // Se escribe una clave erronea para que write protection se bloquee
    RTC->WPR = (0xFF);
 8003286:	4b05      	ldr	r3, [pc, #20]	; (800329c <rtc_Config+0x2a4>)
 8003288:	22ff      	movs	r2, #255	; 0xff
 800328a:	625a      	str	r2, [r3, #36]	; 0x24

}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	e00a      	b.n	80032a8 <rtc_Config+0x2b0>
 8003292:	bf00      	nop
 8003294:	40023800 	.word	0x40023800
 8003298:	40007000 	.word	0x40007000
 800329c:	40002800 	.word	0x40002800
 80032a0:	cccccccd 	.word	0xcccccccd
 80032a4:	66666667 	.word	0x66666667
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop

080032b0 <read_Time>:

// Funcion que entrega un puntero para almacenar los resultados en el arreglo Tiempo
uint8_t* read_Time(void){
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0

	//Extraemos el dato de los registros y los desplazamos a la primera posicion

	RTC_UnidadesHoras = ((RTC->TR & RTC_TR_HU_Msk)>>RTC_TR_HU_Pos);
 80032b4:	4b36      	ldr	r3, [pc, #216]	; (8003390 <read_Time+0xe0>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	0c1b      	lsrs	r3, r3, #16
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	4b34      	ldr	r3, [pc, #208]	; (8003394 <read_Time+0xe4>)
 80032c4:	701a      	strb	r2, [r3, #0]
	RTC_DecenasHoras = ((RTC->TR & RTC_TR_HT_Msk)>> RTC_TR_HT_Pos);
 80032c6:	4b32      	ldr	r3, [pc, #200]	; (8003390 <read_Time+0xe0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	0d1b      	lsrs	r3, r3, #20
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	4b30      	ldr	r3, [pc, #192]	; (8003398 <read_Time+0xe8>)
 80032d6:	701a      	strb	r2, [r3, #0]
	RTC_UnidadesMinutos = ((RTC->TR & RTC_TR_MNU_Msk)>>RTC_TR_MNU_Pos);
 80032d8:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <read_Time+0xe0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	0a1b      	lsrs	r3, r3, #8
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	f003 030f 	and.w	r3, r3, #15
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	4b2d      	ldr	r3, [pc, #180]	; (800339c <read_Time+0xec>)
 80032e8:	701a      	strb	r2, [r3, #0]
	RTC_DecenasMinutos = ((RTC->TR & RTC_TR_MNT_Msk)>>RTC_TR_MNT_Pos);
 80032ea:	4b29      	ldr	r3, [pc, #164]	; (8003390 <read_Time+0xe0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	0b1b      	lsrs	r3, r3, #12
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	4b29      	ldr	r3, [pc, #164]	; (80033a0 <read_Time+0xf0>)
 80032fa:	701a      	strb	r2, [r3, #0]
	RTC_UnidadesSegundos = ((RTC->TR & RTC_TR_SU_Msk)>>RTC_TR_SU_Pos);
 80032fc:	4b24      	ldr	r3, [pc, #144]	; (8003390 <read_Time+0xe0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	b2da      	uxtb	r2, r3
 8003308:	4b26      	ldr	r3, [pc, #152]	; (80033a4 <read_Time+0xf4>)
 800330a:	701a      	strb	r2, [r3, #0]
	RTC_DecenasSegundos = ((RTC->TR & RTC_TR_ST_Msk)>>RTC_TR_ST_Pos);
 800330c:	4b20      	ldr	r3, [pc, #128]	; (8003390 <read_Time+0xe0>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	091b      	lsrs	r3, r3, #4
 8003312:	b2db      	uxtb	r3, r3
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	b2da      	uxtb	r2, r3
 800331a:	4b23      	ldr	r3, [pc, #140]	; (80033a8 <read_Time+0xf8>)
 800331c:	701a      	strb	r2, [r3, #0]
    RTC_AmPm = ((RTC->TR & RTC_TR_PM_Msk)>>RTC_TR_PM_Pos);
 800331e:	4b1c      	ldr	r3, [pc, #112]	; (8003390 <read_Time+0xe0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	0d9b      	lsrs	r3, r3, #22
 8003324:	b2db      	uxtb	r3, r3
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	b2da      	uxtb	r2, r3
 800332c:	4b1f      	ldr	r3, [pc, #124]	; (80033ac <read_Time+0xfc>)
 800332e:	701a      	strb	r2, [r3, #0]

    //Se almacenan los datos en el arreglo
    time[0] = (RTC_DecenasSegundos * 10) + RTC_UnidadesSegundos ;
 8003330:	4b1d      	ldr	r3, [pc, #116]	; (80033a8 <read_Time+0xf8>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	0092      	lsls	r2, r2, #2
 8003338:	4413      	add	r3, r2
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	b2da      	uxtb	r2, r3
 800333e:	4b19      	ldr	r3, [pc, #100]	; (80033a4 <read_Time+0xf4>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	4413      	add	r3, r2
 8003344:	b2da      	uxtb	r2, r3
 8003346:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <read_Time+0x100>)
 8003348:	701a      	strb	r2, [r3, #0]
    time[1] = (RTC_DecenasMinutos * 10) + RTC_UnidadesMinutos;
 800334a:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <read_Time+0xf0>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	0092      	lsls	r2, r2, #2
 8003352:	4413      	add	r3, r2
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	b2da      	uxtb	r2, r3
 8003358:	4b10      	ldr	r3, [pc, #64]	; (800339c <read_Time+0xec>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	4413      	add	r3, r2
 800335e:	b2da      	uxtb	r2, r3
 8003360:	4b13      	ldr	r3, [pc, #76]	; (80033b0 <read_Time+0x100>)
 8003362:	705a      	strb	r2, [r3, #1]
    time[2] = (RTC_DecenasHoras * 10) +  RTC_UnidadesHoras;
 8003364:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <read_Time+0xe8>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	0092      	lsls	r2, r2, #2
 800336c:	4413      	add	r3, r2
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	b2da      	uxtb	r2, r3
 8003372:	4b08      	ldr	r3, [pc, #32]	; (8003394 <read_Time+0xe4>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	4413      	add	r3, r2
 8003378:	b2da      	uxtb	r2, r3
 800337a:	4b0d      	ldr	r3, [pc, #52]	; (80033b0 <read_Time+0x100>)
 800337c:	709a      	strb	r2, [r3, #2]
    time[3] = RTC_AmPm;
 800337e:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <read_Time+0xfc>)
 8003380:	781a      	ldrb	r2, [r3, #0]
 8003382:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <read_Time+0x100>)
 8003384:	70da      	strb	r2, [r3, #3]

     return time;
 8003386:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <read_Time+0x100>)
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr
 8003390:	40002800 	.word	0x40002800
 8003394:	20003cc5 	.word	0x20003cc5
 8003398:	20003cc6 	.word	0x20003cc6
 800339c:	20003cc7 	.word	0x20003cc7
 80033a0:	20003cc8 	.word	0x20003cc8
 80033a4:	20003cc9 	.word	0x20003cc9
 80033a8:	20003cca 	.word	0x20003cca
 80033ac:	20003ccb 	.word	0x20003ccb
 80033b0:	20003cb8 	.word	0x20003cb8

080033b4 <read_Date>:

// Funcion que entrega un puntero para almacenar los resultados en el arreglo Date
uint8_t* read_Date(void){
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0

	//Extraemos el dato de los registros y los desplazamos a la primera posicion

	RTC_diaDecenas = ((RTC->DR & RTC_DR_DT_Msk)>> RTC_DR_DT_Pos);
 80033b8:	4b38      	ldr	r3, [pc, #224]	; (800349c <read_Date+0xe8>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	4b36      	ldr	r3, [pc, #216]	; (80034a0 <read_Date+0xec>)
 80033c8:	701a      	strb	r2, [r3, #0]
    RTC_diaUnidades = ((RTC->DR & RTC_DR_DU_Msk)>>RTC_DR_DU_Pos);
 80033ca:	4b34      	ldr	r3, [pc, #208]	; (800349c <read_Date+0xe8>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	4b33      	ldr	r3, [pc, #204]	; (80034a4 <read_Date+0xf0>)
 80033d8:	701a      	strb	r2, [r3, #0]
    RTC_añoUnidades = ((RTC->DR & RTC_DR_YU_Msk)>>RTC_DR_YU_Pos);
 80033da:	4b30      	ldr	r3, [pc, #192]	; (800349c <read_Date+0xe8>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	0c1b      	lsrs	r3, r3, #16
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	4b2f      	ldr	r3, [pc, #188]	; (80034a8 <read_Date+0xf4>)
 80033ea:	701a      	strb	r2, [r3, #0]
    RTC_añoDecenas = ((RTC->DR & RTC_DR_YT_Msk)>>RTC_DR_YT_Pos);
 80033ec:	4b2b      	ldr	r3, [pc, #172]	; (800349c <read_Date+0xe8>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	0d1b      	lsrs	r3, r3, #20
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	f003 030f 	and.w	r3, r3, #15
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	4b2c      	ldr	r3, [pc, #176]	; (80034ac <read_Date+0xf8>)
 80033fc:	701a      	strb	r2, [r3, #0]
    RTC_mes = (((RTC->DR & RTC_DR_MT_Msk)>>RTC_DR_MT_Pos)*10) + (((RTC->DR & RTC_DR_MU_Msk)>>RTC_DR_MU_Pos)%10);
 80033fe:	4b27      	ldr	r3, [pc, #156]	; (800349c <read_Date+0xe8>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	0b1b      	lsrs	r3, r3, #12
 8003404:	b2db      	uxtb	r3, r3
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	b2db      	uxtb	r3, r3
 800340c:	461a      	mov	r2, r3
 800340e:	0092      	lsls	r2, r2, #2
 8003410:	4413      	add	r3, r2
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	b2d8      	uxtb	r0, r3
 8003416:	4b21      	ldr	r3, [pc, #132]	; (800349c <read_Date+0xe8>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	0a1b      	lsrs	r3, r3, #8
 800341c:	f003 010f 	and.w	r1, r3, #15
 8003420:	4b23      	ldr	r3, [pc, #140]	; (80034b0 <read_Date+0xfc>)
 8003422:	fba3 2301 	umull	r2, r3, r3, r1
 8003426:	08da      	lsrs	r2, r3, #3
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	1aca      	subs	r2, r1, r3
 8003432:	b2d3      	uxtb	r3, r2
 8003434:	4403      	add	r3, r0
 8003436:	b2da      	uxtb	r2, r3
 8003438:	4b1e      	ldr	r3, [pc, #120]	; (80034b4 <read_Date+0x100>)
 800343a:	701a      	strb	r2, [r3, #0]
    RTC_wdu = (RTC->DR & RTC_DR_WDU_Msk)>>RTC_DR_WDU_Pos;
 800343c:	4b17      	ldr	r3, [pc, #92]	; (800349c <read_Date+0xe8>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	0b5b      	lsrs	r3, r3, #13
 8003442:	b2db      	uxtb	r3, r3
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	b2da      	uxtb	r2, r3
 800344a:	4b1b      	ldr	r3, [pc, #108]	; (80034b8 <read_Date+0x104>)
 800344c:	701a      	strb	r2, [r3, #0]

    // Se almacenan los datos en el arreglo
    date[0] = (RTC_diaDecenas * 10) + RTC_diaUnidades;
 800344e:	4b14      	ldr	r3, [pc, #80]	; (80034a0 <read_Date+0xec>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	0092      	lsls	r2, r2, #2
 8003456:	4413      	add	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	b2da      	uxtb	r2, r3
 800345c:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <read_Date+0xf0>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	4413      	add	r3, r2
 8003462:	b2da      	uxtb	r2, r3
 8003464:	4b15      	ldr	r3, [pc, #84]	; (80034bc <read_Date+0x108>)
 8003466:	701a      	strb	r2, [r3, #0]
    date[1] = RTC_mes;
 8003468:	4b12      	ldr	r3, [pc, #72]	; (80034b4 <read_Date+0x100>)
 800346a:	781a      	ldrb	r2, [r3, #0]
 800346c:	4b13      	ldr	r3, [pc, #76]	; (80034bc <read_Date+0x108>)
 800346e:	705a      	strb	r2, [r3, #1]
    date[2] = (RTC_añoDecenas * 10) + RTC_añoUnidades;
 8003470:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <read_Date+0xf8>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	0092      	lsls	r2, r2, #2
 8003478:	4413      	add	r3, r2
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	b2da      	uxtb	r2, r3
 800347e:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <read_Date+0xf4>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	4413      	add	r3, r2
 8003484:	b2da      	uxtb	r2, r3
 8003486:	4b0d      	ldr	r3, [pc, #52]	; (80034bc <read_Date+0x108>)
 8003488:	709a      	strb	r2, [r3, #2]
    date[3] = RTC_wdu;
 800348a:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <read_Date+0x104>)
 800348c:	781a      	ldrb	r2, [r3, #0]
 800348e:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <read_Date+0x108>)
 8003490:	70da      	strb	r2, [r3, #3]

    return date;
 8003492:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <read_Date+0x108>)

}
 8003494:	4618      	mov	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr
 800349c:	40002800 	.word	0x40002800
 80034a0:	20003ccd 	.word	0x20003ccd
 80034a4:	20003ccc 	.word	0x20003ccc
 80034a8:	20003ccf 	.word	0x20003ccf
 80034ac:	20003cd0 	.word	0x20003cd0
 80034b0:	cccccccd 	.word	0xcccccccd
 80034b4:	20003cce 	.word	0x20003cce
 80034b8:	20003cd1 	.word	0x20003cd1
 80034bc:	20003cc0 	.word	0x20003cc0

080034c0 <__NVIC_EnableIRQ>:
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	db0b      	blt.n	80034ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	f003 021f 	and.w	r2, r3, #31
 80034d8:	4906      	ldr	r1, [pc, #24]	; (80034f4 <__NVIC_EnableIRQ+0x34>)
 80034da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	2001      	movs	r0, #1
 80034e2:	fa00 f202 	lsl.w	r2, r0, r2
 80034e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr
 80034f4:	e000e100 	.word	0xe000e100

080034f8 <USART_Config>:
 */

// Esta variable es necesaria para las interrupciones del USART 2 y 6.
uint8_t auxRxData = 0;

void USART_Config(USART_Handler_t *ptrUsartHandler){
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8003500:	b672      	cpsid	i
}
 8003502:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a8c      	ldr	r2, [pc, #560]	; (800373c <USART_Config+0x244>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d106      	bne.n	800351c <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800350e:	4b8c      	ldr	r3, [pc, #560]	; (8003740 <USART_Config+0x248>)
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	4a8b      	ldr	r2, [pc, #556]	; (8003740 <USART_Config+0x248>)
 8003514:	f043 0310 	orr.w	r3, r3, #16
 8003518:	6453      	str	r3, [r2, #68]	; 0x44
 800351a:	e016      	b.n	800354a <USART_Config+0x52>
	}else if(ptrUsartHandler->ptrUSARTx == USART6){
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a88      	ldr	r2, [pc, #544]	; (8003744 <USART_Config+0x24c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d106      	bne.n	8003534 <USART_Config+0x3c>
		/*Configuramos el USART 6 que está en el mismo bus del USART 1 */
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8003526:	4b86      	ldr	r3, [pc, #536]	; (8003740 <USART_Config+0x248>)
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	4a85      	ldr	r2, [pc, #532]	; (8003740 <USART_Config+0x248>)
 800352c:	f043 0320 	orr.w	r3, r3, #32
 8003530:	6453      	str	r3, [r2, #68]	; 0x44
 8003532:	e00a      	b.n	800354a <USART_Config+0x52>
		// Luego el USART 2 que está en el bus 1.
	}else if(ptrUsartHandler->ptrUSARTx == USART2){
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a83      	ldr	r2, [pc, #524]	; (8003748 <USART_Config+0x250>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d105      	bne.n	800354a <USART_Config+0x52>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800353e:	4b80      	ldr	r3, [pc, #512]	; (8003740 <USART_Config+0x248>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	4a7f      	ldr	r2, [pc, #508]	; (8003740 <USART_Config+0x248>)
 8003544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003548:	6413      	str	r3, [r2, #64]	; 0x40
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2200      	movs	r2, #0
 8003550:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2200      	movs	r2, #0
 8003558:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	79db      	ldrb	r3, [r3, #7]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d025      	beq.n	80035ae <USART_Config+0xb6>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	79db      	ldrb	r3, [r3, #7]
 8003566:	2b02      	cmp	r3, #2
 8003568:	d110      	bne.n	800358c <USART_Config+0x94>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003578:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003588:	60da      	str	r2, [r3, #12]
 800358a:	e018      	b.n	80035be <USART_Config+0xc6>

		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68da      	ldr	r2, [r3, #12]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800359a:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035aa:	60da      	str	r2, [r3, #12]
 80035ac:	e007      	b.n	80035be <USART_Config+0xc6>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035bc:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize ==USART_DATASIZE_8BIT){
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	799b      	ldrb	r3, [r3, #6]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d115      	bne.n	80035f2 <USART_Config+0xfa>

	    	// Inicialmente debe corroborarse si se quiere o no la paridad.
	    	if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_NONE){
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	79db      	ldrb	r3, [r3, #7]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d108      	bne.n	80035e0 <USART_Config+0xe8>
	    		// Si se quieren datos de 8 bits.
	    		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035dc:	60da      	str	r2, [r3, #12]
 80035de:	e010      	b.n	8003602 <USART_Config+0x10a>
	    	}
	    	else{
	    		// Si la partidad esta activada, se agrega un BIT adicional.
	    		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035ee:	60da      	str	r2, [r3, #12]
 80035f0:	e007      	b.n	8003602 <USART_Config+0x10a>
	    	}
	    }
	    else{
	    	// Se configuran 9 bits para el tamaño.
	    	ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003600:	60da      	str	r2, [r3, #12]
	    }

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	7a1b      	ldrb	r3, [r3, #8]
 8003606:	2b03      	cmp	r3, #3
 8003608:	d84e      	bhi.n	80036a8 <USART_Config+0x1b0>
 800360a:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <USART_Config+0x118>)
 800360c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003610:	08003621 	.word	0x08003621
 8003614:	08003643 	.word	0x08003643
 8003618:	08003665 	.word	0x08003665
 800361c:	08003687 	.word	0x08003687
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691a      	ldr	r2, [r3, #16]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800362e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800363e:	611a      	str	r2, [r3, #16]
		break;
 8003640:	e043      	b.n	80036ca <USART_Config+0x1d2>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003650:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003660:	611a      	str	r2, [r3, #16]
		break;
 8003662:	e032      	b.n	80036ca <USART_Config+0x1d2>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691a      	ldr	r2, [r3, #16]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003672:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003682:	611a      	str	r2, [r3, #16]
		break;
 8003684:	e021      	b.n	80036ca <USART_Config+0x1d2>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003694:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036a4:	611a      	str	r2, [r3, #16]
		break;
 80036a6:	e010      	b.n	80036ca <USART_Config+0x1d2>
	}
	default: {
		// En el caso por defecto seleccionamos 1 bit de parada
		// Escriba acá su código
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036b6:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691a      	ldr	r2, [r3, #16]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036c6:	611a      	str	r2, [r3, #16]
		break;
 80036c8:	bf00      	nop
	 * decida utilizar el usuario. La función getConfig() retorna esta
	 * frecuencia en que se encuentra actualmente el reloj del sistema PLL,
	 * por tanto, se considera un condicional que incluye los cálculos para
	 * la frecuencia de 100 MHz y por defecto recurre a la frecuencia natural.
	 */
	if(actualFrecuency == 100000000){
 80036ca:	f7ff fa3d 	bl	8002b48 <getConfigPLL>
 80036ce:	4603      	mov	r3, r0
 80036d0:	4a1e      	ldr	r2, [pc, #120]	; (800374c <USART_Config+0x254>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d11d      	bne.n	8003712 <USART_Config+0x21a>
		// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
		if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	795b      	ldrb	r3, [r3, #5]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d105      	bne.n	80036ea <USART_Config+0x1f2>
			// El valor a cargar es 651.041 -> Mantiza = 651,fraction = 0.041
			// Mantiza = 651 = 0x28b, fraction = 16 * 0.041 = 1
			// Valor a cargar 0x28B1
			// Configurando el Baudrate generator para una velocidad de 9600bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x28B1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f642 02b1 	movw	r2, #10417	; 0x28b1
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	e03a      	b.n	8003760 <USART_Config+0x268>
		}

		else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	795b      	ldrb	r3, [r3, #5]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d105      	bne.n	80036fe <USART_Config+0x206>
			// El valor a cargar es 325.520 -> Mantiza = 325,fraction = 0.520
			// Mantiza = 325 = 0x145, fraction = 16 * 0.520 = 8
			// Valor a cargar 0x1458
			ptrUsartHandler->ptrUSARTx->BRR = 0x1458;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f241 4258 	movw	r2, #5208	; 0x1458
 80036fa:	609a      	str	r2, [r3, #8]
 80036fc:	e030      	b.n	8003760 <USART_Config+0x268>
		}

		else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	795b      	ldrb	r3, [r3, #5]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d12c      	bne.n	8003760 <USART_Config+0x268>
			// El valor a cargar es 54.253 -> Mantiza = 54,fraction = 0.253
			// Mantiza = 54 = 0x36, fraction = 16 * 0.253 = 4.
			ptrUsartHandler->ptrUSARTx->BRR = 0x364;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f44f 7259 	mov.w	r2, #868	; 0x364
 800370e:	609a      	str	r2, [r3, #8]
 8003710:	e026      	b.n	8003760 <USART_Config+0x268>
		}
	// Caso por defecto de 16 MHz.
	}else{
		// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
		if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	795b      	ldrb	r3, [r3, #5]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d105      	bne.n	8003726 <USART_Config+0x22e>
			// El valor a cargar es 104.1875 -> Mantiza = 104,fraction = 0.1875
			// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
			// Valor a cargar 0x0683
			// Configurando el Baudrate generator para una velocidad de 9600bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f240 6283 	movw	r2, #1667	; 0x683
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	e01c      	b.n	8003760 <USART_Config+0x268>
		}

		else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	795b      	ldrb	r3, [r3, #5]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d110      	bne.n	8003750 <USART_Config+0x258>
			// El valor a cargar es 52.0625 -> Mantiza = 52,fraction = 0.0625
			// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
			// Escriba acá su código y los comentarios que faltan
			// Valor a cargar 0x0341
			ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f240 3241 	movw	r2, #833	; 0x341
 8003736:	609a      	str	r2, [r3, #8]
 8003738:	e012      	b.n	8003760 <USART_Config+0x268>
 800373a:	bf00      	nop
 800373c:	40011000 	.word	0x40011000
 8003740:	40023800 	.word	0x40023800
 8003744:	40011400 	.word	0x40011400
 8003748:	40004400 	.word	0x40004400
 800374c:	05f5e100 	.word	0x05f5e100
		}

		else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	795b      	ldrb	r3, [r3, #5]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d103      	bne.n	8003760 <USART_Config+0x268>
			// Escriba acá su código y los comentarios que faltan
			// El valor a cargar es 8.6875 -> Mantiza = 8,fraction = 0.6875
			// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11 = B.
			ptrUsartHandler->ptrUSARTx->BRR = 0x008B;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	228b      	movs	r2, #139	; 0x8b
 800375e:	609a      	str	r2, [r3, #8]
		}
	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	791b      	ldrb	r3, [r3, #4]
 8003764:	2b03      	cmp	r3, #3
 8003766:	d847      	bhi.n	80037f8 <USART_Config+0x300>
 8003768:	a201      	add	r2, pc, #4	; (adr r2, 8003770 <USART_Config+0x278>)
 800376a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376e:	bf00      	nop
 8003770:	08003781 	.word	0x08003781
 8003774:	08003793 	.word	0x08003793
 8003778:	080037a5 	.word	0x080037a5
 800377c:	080037c7 	.word	0x080037c7
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_TE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0208 	orr.w	r2, r2, #8
 800378e:	60da      	str	r2, [r3, #12]
		break;
 8003790:	e04b      	b.n	800382a <USART_Config+0x332>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_RE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0204 	orr.w	r2, r2, #4
 80037a0:	60da      	str	r2, [r3, #12]
		break;
 80037a2:	e042      	b.n	800382a <USART_Config+0x332>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmision como recepcion
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_TE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0208 	orr.w	r2, r2, #8
 80037b2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_RE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0204 	orr.w	r2, r2, #4
 80037c2:	60da      	str	r2, [r3, #12]
		break;
 80037c4:	e031      	b.n	800382a <USART_Config+0x332>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		// Escriba acá su código
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0204 	bic.w	r2, r2, #4
 80037d4:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0208 	bic.w	r2, r2, #8
 80037e4:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037f4:	60da      	str	r2, [r3, #12]
		break;
 80037f6:	e018      	b.n	800382a <USART_Config+0x332>
	}

	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0204 	bic.w	r2, r2, #4
 8003806:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0208 	bic.w	r2, r2, #8
 8003816:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003826:	60da      	str	r2, [r3, #12]
		break;
 8003828:	bf00      	nop
	}
	}

	// 2.7 Activamos el módulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	791b      	ldrb	r3, [r3, #4]
 800382e:	2b03      	cmp	r3, #3
 8003830:	d007      	beq.n	8003842 <USART_Config+0x34a>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003840:	60da      	str	r2, [r3, #12]
	}
	// Se verifica la activación de la interrupcion Rx
	if (ptrUsartHandler->ptrUSARTx == USART1){
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a28      	ldr	r2, [pc, #160]	; (80038e8 <USART_Config+0x3f0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d03a      	beq.n	80038c2 <USART_Config+0x3ca>
	}

	/* 1.2 Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2) {
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a26      	ldr	r2, [pc, #152]	; (80038ec <USART_Config+0x3f4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d118      	bne.n	8003888 <USART_Config+0x390>
		if (ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE) {
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	7a5b      	ldrb	r3, [r3, #9]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d10b      	bne.n	8003876 <USART_Config+0x37e>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0220 	orr.w	r2, r2, #32
 800386c:	60da      	str	r2, [r3, #12]
			NVIC_EnableIRQ(USART2_IRQn);
 800386e:	2026      	movs	r0, #38	; 0x26
 8003870:	f7ff fe26 	bl	80034c0 <__NVIC_EnableIRQ>
 8003874:	e025      	b.n	80038c2 <USART_Config+0x3ca>
		} else {
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0220 	bic.w	r2, r2, #32
 8003884:	60da      	str	r2, [r3, #12]
 8003886:	e01c      	b.n	80038c2 <USART_Config+0x3ca>
		}
	}

	/* 1.3 Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6) {
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a18      	ldr	r2, [pc, #96]	; (80038f0 <USART_Config+0x3f8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d117      	bne.n	80038c2 <USART_Config+0x3ca>
		if (ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE) {
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	7a5b      	ldrb	r3, [r3, #9]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d10b      	bne.n	80038b2 <USART_Config+0x3ba>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f042 0220 	orr.w	r2, r2, #32
 80038a8:	60da      	str	r2, [r3, #12]
			NVIC_EnableIRQ(USART6_IRQn);
 80038aa:	2047      	movs	r0, #71	; 0x47
 80038ac:	f7ff fe08 	bl	80034c0 <__NVIC_EnableIRQ>
 80038b0:	e007      	b.n	80038c2 <USART_Config+0x3ca>
		} else {
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0220 	bic.w	r2, r2, #32
 80038c0:	60da      	str	r2, [r3, #12]
		}
	}

	// 2.8 Activamos el módulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	791b      	ldrb	r3, [r3, #4]
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d007      	beq.n	80038da <USART_Config+0x3e2>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038d8:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80038da:	b662      	cpsie	i
}
 80038dc:	bf00      	nop
	}

	// Activamos las interrupciones globales
	__enable_irq();
}
 80038de:	bf00      	nop
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40011000 	.word	0x40011000
 80038ec:	40004400 	.word	0x40004400
 80038f0:	40011400 	.word	0x40011400

080038f4 <usart2Rx_Callback>:

/* Similar a como se hizo con las EXTI, se crean los callbacks para los USART */

__attribute__((weak)) void usart2Rx_Callback(void){
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the usart2Rx_Callback could be implemented in the main file
	   */
	__NOP();
 80038f8:	bf00      	nop
}
 80038fa:	bf00      	nop
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr

08003902 <writeChar>:
	   */
	__NOP();
}

/* funcion para escribir un solo char */
int writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800390c:	e000      	b.n	8003910 <writeChar+0xe>
		__NOP();
 800390e:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f7      	beq.n	800390e <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	605a      	str	r2, [r3, #4]

	return dataToSend;
 8003926:	683b      	ldr	r3, [r7, #0]
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr

08003932 <writeMsg>:

// función para escribir un mensaje
void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	6039      	str	r1, [r7, #0]
	while(*msgToSend != '\0'){
 800393c:	e008      	b.n	8003950 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	4619      	mov	r1, r3
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff ffdc 	bl	8003902 <writeChar>
		msgToSend++;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	3301      	adds	r3, #1
 800394e:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1f2      	bne.n	800393e <writeMsg+0xc>
	}
}
 8003958:	bf00      	nop
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <getRxData>:

// función auxiliar
uint8_t getRxData(void){
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
	return auxRxData;
 8003968:	4b02      	ldr	r3, [pc, #8]	; (8003974 <getRxData+0x10>)
 800396a:	781b      	ldrb	r3, [r3, #0]
}
 800396c:	4618      	mov	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr
 8003974:	20003cd2 	.word	0x20003cd2

08003978 <USART2_IRQHandler>:

/* INTERRUPCIONES DEL USART */
// Se debe crear una variable auxiliar para la lectura que se declara al inicio.

/* Para el USART 2 */
void USART2_IRQHandler(void){
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
	// Se evalúa si la interrupción que se dio es por RX
	if(USART2->SR & USART_SR_RXNE){
 800397c:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <USART2_IRQHandler+0x30>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00c      	beq.n	80039a2 <USART2_IRQHandler+0x2a>
		USART2->SR &= ~USART_SR_RXNE;
 8003988:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <USART2_IRQHandler+0x30>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a06      	ldr	r2, [pc, #24]	; (80039a8 <USART2_IRQHandler+0x30>)
 800398e:	f023 0320 	bic.w	r3, r3, #32
 8003992:	6013      	str	r3, [r2, #0]
		auxRxData = (uint8_t) USART2->DR;
 8003994:	4b04      	ldr	r3, [pc, #16]	; (80039a8 <USART2_IRQHandler+0x30>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	b2da      	uxtb	r2, r3
 800399a:	4b04      	ldr	r3, [pc, #16]	; (80039ac <USART2_IRQHandler+0x34>)
 800399c:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 800399e:	f7ff ffa9 	bl	80038f4 <usart2Rx_Callback>
	}
}
 80039a2:	bf00      	nop
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40004400 	.word	0x40004400
 80039ac:	20003cd2 	.word	0x20003cd2

080039b0 <USART6_IRQHandler>:

/* Para el USART 6 */
void USART6_IRQHandler(void){
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
	// Evaluamos que la interrupción que se dio es por RX
	if(USART6->SR & USART_SR_RXNE){
 80039b4:	4b0a      	ldr	r3, [pc, #40]	; (80039e0 <USART6_IRQHandler+0x30>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0320 	and.w	r3, r3, #32
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00c      	beq.n	80039da <USART6_IRQHandler+0x2a>
		USART6->SR &= ~USART_SR_RXNE;
 80039c0:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <USART6_IRQHandler+0x30>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a06      	ldr	r2, [pc, #24]	; (80039e0 <USART6_IRQHandler+0x30>)
 80039c6:	f023 0320 	bic.w	r3, r3, #32
 80039ca:	6013      	str	r3, [r2, #0]
		auxRxData = (uint8_t) USART6->DR;
 80039cc:	4b04      	ldr	r3, [pc, #16]	; (80039e0 <USART6_IRQHandler+0x30>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	4b04      	ldr	r3, [pc, #16]	; (80039e4 <USART6_IRQHandler+0x34>)
 80039d4:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 80039d6:	f7fe fae7 	bl	8001fa8 <usart6Rx_Callback>
	}
}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40011400 	.word	0x40011400
 80039e4:	20003cd2 	.word	0x20003cd2

080039e8 <__NVIC_EnableIRQ>:
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	db0b      	blt.n	8003a12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	f003 021f 	and.w	r2, r3, #31
 8003a00:	4906      	ldr	r1, [pc, #24]	; (8003a1c <__NVIC_EnableIRQ+0x34>)
 8003a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	2001      	movs	r0, #1
 8003a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr
 8003a1c:	e000e100 	.word	0xe000e100

08003a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	6039      	str	r1, [r7, #0]
 8003a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	db0a      	blt.n	8003a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	490c      	ldr	r1, [pc, #48]	; (8003a6c <__NVIC_SetPriority+0x4c>)
 8003a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3e:	0112      	lsls	r2, r2, #4
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	440b      	add	r3, r1
 8003a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a48:	e00a      	b.n	8003a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	4908      	ldr	r1, [pc, #32]	; (8003a70 <__NVIC_SetPriority+0x50>)
 8003a50:	79fb      	ldrb	r3, [r7, #7]
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	3b04      	subs	r3, #4
 8003a58:	0112      	lsls	r2, r2, #4
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	761a      	strb	r2, [r3, #24]
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	e000e100 	.word	0xe000e100
 8003a70:	e000ed00 	.word	0xe000ed00

08003a74 <getADC>:
/*
 * Función que retorna el ultimo dato adquirido por la ADC
 * La idea es que esta función es llamada desde la función callback, de forma que
 * siempre se obtiene el valor mas actual de la conversión ADC.
 * */
uint16_t getADC(void){
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
	// Esta variable es actualizada en la ISR de la conversión, cada vez que se obtiene
	// un nuevo valor.
	return adcRawData;
 8003a78:	4b02      	ldr	r3, [pc, #8]	; (8003a84 <getADC+0x10>)
 8003a7a:	881b      	ldrh	r3, [r3, #0]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr
 8003a84:	20003cd4 	.word	0x20003cd4

08003a88 <ADC_IRQHandler>:

/*
 * Esta es la ISR de la interrupción por conversión ADC
 */
void ADC_IRQHandler(void){
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
	// Evaluamos que se dio la interrupción por conversión ADC
	if(ADC1->SR & ADC_SR_EOC){
 8003a8c:	4b07      	ldr	r3, [pc, #28]	; (8003aac <ADC_IRQHandler+0x24>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d006      	beq.n	8003aa6 <ADC_IRQHandler+0x1e>
		// Leemos el resultado de la conversión ADC y lo cargamos en una variale auxiliar
		// la cual es utilizada en la función getADC()
		adcRawData = ADC1->DR;
 8003a98:	4b04      	ldr	r3, [pc, #16]	; (8003aac <ADC_IRQHandler+0x24>)
 8003a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <ADC_IRQHandler+0x28>)
 8003aa0:	801a      	strh	r2, [r3, #0]

		// Hacemos el llamado a la función que se ejecutará en el main
		adcComplete_Callback();
 8003aa2:	f7fe fa8d 	bl	8001fc0 <adcComplete_Callback>
	}

}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40012000 	.word	0x40012000
 8003ab0:	20003cd4 	.word	0x20003cd4

08003ab4 <configAnalogPin>:
/*
 * Con esta función configuramos que pin deseamos que funcione como canal ADC
 * Esta funcion trabaja con el GPIOxDriver, por lo cual requiere que se incluya
 * dicho driver.
 */
void configAnalogPin(uint8_t adcChannel){
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	71fb      	strb	r3, [r7, #7]

	// Con este switch seleccionamos el canal y lo configuramos como análogo.
	switch (adcChannel) {
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	2b0f      	cmp	r3, #15
 8003ac2:	f200 8093 	bhi.w	8003bec <configAnalogPin+0x138>
 8003ac6:	a201      	add	r2, pc, #4	; (adr r2, 8003acc <configAnalogPin+0x18>)
 8003ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003acc:	08003b0d 	.word	0x08003b0d
 8003ad0:	08003b1b 	.word	0x08003b1b
 8003ad4:	08003b29 	.word	0x08003b29
 8003ad8:	08003b37 	.word	0x08003b37
 8003adc:	08003b45 	.word	0x08003b45
 8003ae0:	08003b53 	.word	0x08003b53
 8003ae4:	08003b61 	.word	0x08003b61
 8003ae8:	08003b6f 	.word	0x08003b6f
 8003aec:	08003b7d 	.word	0x08003b7d
 8003af0:	08003b8b 	.word	0x08003b8b
 8003af4:	08003b99 	.word	0x08003b99
 8003af8:	08003ba7 	.word	0x08003ba7
 8003afc:	08003bb5 	.word	0x08003bb5
 8003b00:	08003bc3 	.word	0x08003bc3
 8003b04:	08003bd1 	.word	0x08003bd1
 8003b08:	08003bdf 	.word	0x08003bdf
	 * asignar. (Esto está más o menos en la página 40 del datasheet del micro)
	 */

	case ADC_CHANNEL_0: {
		// Es el pin PA0
		handlerAdcPin.pGPIOx 						= GPIOA;
 8003b0c:	4b3d      	ldr	r3, [pc, #244]	; (8003c04 <configAnalogPin+0x150>)
 8003b0e:	4a3e      	ldr	r2, [pc, #248]	; (8003c08 <configAnalogPin+0x154>)
 8003b10:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8003b12:	4b3c      	ldr	r3, [pc, #240]	; (8003c04 <configAnalogPin+0x150>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	711a      	strb	r2, [r3, #4]
		// Nota: Para el ejercicio inicial solo se necesita este canal, los demas
		// se necesitan para trabajos posteriores.
		break;
 8003b18:	e069      	b.n	8003bee <configAnalogPin+0x13a>
	}
		;

	case ADC_CHANNEL_1: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx						= GPIOA;
 8003b1a:	4b3a      	ldr	r3, [pc, #232]	; (8003c04 <configAnalogPin+0x150>)
 8003b1c:	4a3a      	ldr	r2, [pc, #232]	; (8003c08 <configAnalogPin+0x154>)
 8003b1e:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8003b20:	4b38      	ldr	r3, [pc, #224]	; (8003c04 <configAnalogPin+0x150>)
 8003b22:	2201      	movs	r2, #1
 8003b24:	711a      	strb	r2, [r3, #4]

		break;
 8003b26:	e062      	b.n	8003bee <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_2: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 8003b28:	4b36      	ldr	r3, [pc, #216]	; (8003c04 <configAnalogPin+0x150>)
 8003b2a:	4a37      	ldr	r2, [pc, #220]	; (8003c08 <configAnalogPin+0x154>)
 8003b2c:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8003b2e:	4b35      	ldr	r3, [pc, #212]	; (8003c04 <configAnalogPin+0x150>)
 8003b30:	2202      	movs	r2, #2
 8003b32:	711a      	strb	r2, [r3, #4]

		break;
 8003b34:	e05b      	b.n	8003bee <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_3: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 8003b36:	4b33      	ldr	r3, [pc, #204]	; (8003c04 <configAnalogPin+0x150>)
 8003b38:	4a33      	ldr	r2, [pc, #204]	; (8003c08 <configAnalogPin+0x154>)
 8003b3a:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8003b3c:	4b31      	ldr	r3, [pc, #196]	; (8003c04 <configAnalogPin+0x150>)
 8003b3e:	2203      	movs	r2, #3
 8003b40:	711a      	strb	r2, [r3, #4]

		break;
 8003b42:	e054      	b.n	8003bee <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_4: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 8003b44:	4b2f      	ldr	r3, [pc, #188]	; (8003c04 <configAnalogPin+0x150>)
 8003b46:	4a30      	ldr	r2, [pc, #192]	; (8003c08 <configAnalogPin+0x154>)
 8003b48:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 8003b4a:	4b2e      	ldr	r3, [pc, #184]	; (8003c04 <configAnalogPin+0x150>)
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	711a      	strb	r2, [r3, #4]

		break;
 8003b50:	e04d      	b.n	8003bee <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_5: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 8003b52:	4b2c      	ldr	r3, [pc, #176]	; (8003c04 <configAnalogPin+0x150>)
 8003b54:	4a2c      	ldr	r2, [pc, #176]	; (8003c08 <configAnalogPin+0x154>)
 8003b56:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8003b58:	4b2a      	ldr	r3, [pc, #168]	; (8003c04 <configAnalogPin+0x150>)
 8003b5a:	2205      	movs	r2, #5
 8003b5c:	711a      	strb	r2, [r3, #4]

		break;
 8003b5e:	e046      	b.n	8003bee <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_6: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 8003b60:	4b28      	ldr	r3, [pc, #160]	; (8003c04 <configAnalogPin+0x150>)
 8003b62:	4a29      	ldr	r2, [pc, #164]	; (8003c08 <configAnalogPin+0x154>)
 8003b64:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_6;
 8003b66:	4b27      	ldr	r3, [pc, #156]	; (8003c04 <configAnalogPin+0x150>)
 8003b68:	2206      	movs	r2, #6
 8003b6a:	711a      	strb	r2, [r3, #4]

		break;
 8003b6c:	e03f      	b.n	8003bee <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_7: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 8003b6e:	4b25      	ldr	r3, [pc, #148]	; (8003c04 <configAnalogPin+0x150>)
 8003b70:	4a25      	ldr	r2, [pc, #148]	; (8003c08 <configAnalogPin+0x154>)
 8003b72:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_7;
 8003b74:	4b23      	ldr	r3, [pc, #140]	; (8003c04 <configAnalogPin+0x150>)
 8003b76:	2207      	movs	r2, #7
 8003b78:	711a      	strb	r2, [r3, #4]

		break;
 8003b7a:	e038      	b.n	8003bee <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_8: {
		//Es el pin PB0
		handlerAdcPin.pGPIOx 						= GPIOB;
 8003b7c:	4b21      	ldr	r3, [pc, #132]	; (8003c04 <configAnalogPin+0x150>)
 8003b7e:	4a23      	ldr	r2, [pc, #140]	; (8003c0c <configAnalogPin+0x158>)
 8003b80:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8003b82:	4b20      	ldr	r3, [pc, #128]	; (8003c04 <configAnalogPin+0x150>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	711a      	strb	r2, [r3, #4]
		break;
 8003b88:	e031      	b.n	8003bee <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_9: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOB;
 8003b8a:	4b1e      	ldr	r3, [pc, #120]	; (8003c04 <configAnalogPin+0x150>)
 8003b8c:	4a1f      	ldr	r2, [pc, #124]	; (8003c0c <configAnalogPin+0x158>)
 8003b8e:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8003b90:	4b1c      	ldr	r3, [pc, #112]	; (8003c04 <configAnalogPin+0x150>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	711a      	strb	r2, [r3, #4]

		break;
 8003b96:	e02a      	b.n	8003bee <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_10: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8003b98:	4b1a      	ldr	r3, [pc, #104]	; (8003c04 <configAnalogPin+0x150>)
 8003b9a:	4a1d      	ldr	r2, [pc, #116]	; (8003c10 <configAnalogPin+0x15c>)
 8003b9c:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8003b9e:	4b19      	ldr	r3, [pc, #100]	; (8003c04 <configAnalogPin+0x150>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	711a      	strb	r2, [r3, #4]

		break;
 8003ba4:	e023      	b.n	8003bee <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_11: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8003ba6:	4b17      	ldr	r3, [pc, #92]	; (8003c04 <configAnalogPin+0x150>)
 8003ba8:	4a19      	ldr	r2, [pc, #100]	; (8003c10 <configAnalogPin+0x15c>)
 8003baa:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8003bac:	4b15      	ldr	r3, [pc, #84]	; (8003c04 <configAnalogPin+0x150>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	711a      	strb	r2, [r3, #4]

		break;
 8003bb2:	e01c      	b.n	8003bee <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_12: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8003bb4:	4b13      	ldr	r3, [pc, #76]	; (8003c04 <configAnalogPin+0x150>)
 8003bb6:	4a16      	ldr	r2, [pc, #88]	; (8003c10 <configAnalogPin+0x15c>)
 8003bb8:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8003bba:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <configAnalogPin+0x150>)
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	711a      	strb	r2, [r3, #4]

		break;
 8003bc0:	e015      	b.n	8003bee <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_13: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8003bc2:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <configAnalogPin+0x150>)
 8003bc4:	4a12      	ldr	r2, [pc, #72]	; (8003c10 <configAnalogPin+0x15c>)
 8003bc6:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8003bc8:	4b0e      	ldr	r3, [pc, #56]	; (8003c04 <configAnalogPin+0x150>)
 8003bca:	2203      	movs	r2, #3
 8003bcc:	711a      	strb	r2, [r3, #4]

		break;
 8003bce:	e00e      	b.n	8003bee <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_14: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <configAnalogPin+0x150>)
 8003bd2:	4a0f      	ldr	r2, [pc, #60]	; (8003c10 <configAnalogPin+0x15c>)
 8003bd4:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 8003bd6:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <configAnalogPin+0x150>)
 8003bd8:	2204      	movs	r2, #4
 8003bda:	711a      	strb	r2, [r3, #4]

		break;
 8003bdc:	e007      	b.n	8003bee <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_15: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8003bde:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <configAnalogPin+0x150>)
 8003be0:	4a0b      	ldr	r2, [pc, #44]	; (8003c10 <configAnalogPin+0x15c>)
 8003be2:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8003be4:	4b07      	ldr	r3, [pc, #28]	; (8003c04 <configAnalogPin+0x150>)
 8003be6:	2205      	movs	r2, #5
 8003be8:	711a      	strb	r2, [r3, #4]

		break;
 8003bea:	e000      	b.n	8003bee <configAnalogPin+0x13a>
	}
	default: {
		break;
 8003bec:	bf00      	nop

	}
	/*
	 * Se carga la información de cada pin configurado sobre el GPIO.
	 */
	handlerAdcPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 8003bee:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <configAnalogPin+0x150>)
 8003bf0:	2203      	movs	r2, #3
 8003bf2:	715a      	strb	r2, [r3, #5]
	GPIO_Config(&handlerAdcPin);
 8003bf4:	4803      	ldr	r0, [pc, #12]	; (8003c04 <configAnalogPin+0x150>)
 8003bf6:	f7fe fb6b 	bl	80022d0 <GPIO_Config>
}
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20003cd8 	.word	0x20003cd8
 8003c08:	40020000 	.word	0x40020000
 8003c0c:	40020400 	.word	0x40020400
 8003c10:	40020800 	.word	0x40020800

08003c14 <adcConfigEvents>:
 * de la conversión adc. Los bits correspondientes a EXTSEL jerarquizan los
 * eventos externos dependiendo del canal que se quiera utilizar en cada uno
 * de los timmers disponibles para este propósito. Ver página 231 del reference
 * manual.
 */
void adcConfigEvents(ADC_Config_t *adcConfig) {
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]

	// Trigger detection on the rising edge, se toman los flancos
	// de bajada para los trigger externos
	ADC1->CR2 |= ADC_CR2_EXTEN_0;
 8003c1c:	4b42      	ldr	r3, [pc, #264]	; (8003d28 <adcConfigEvents+0x114>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	4a41      	ldr	r2, [pc, #260]	; (8003d28 <adcConfigEvents+0x114>)
 8003c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c26:	6093      	str	r3, [r2, #8]

	if (adcConfig->AdcEventType == TIMER_ADC_EVENT) {
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	7a1b      	ldrb	r3, [r3, #8]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d16f      	bne.n	8003d10 <adcConfigEvents+0xfc>
		switch (adcConfig->AdcChannelEvent) {
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	7a5b      	ldrb	r3, [r3, #9]
 8003c34:	2b0a      	cmp	r3, #10
 8003c36:	d864      	bhi.n	8003d02 <adcConfigEvents+0xee>
 8003c38:	a201      	add	r2, pc, #4	; (adr r2, 8003c40 <adcConfigEvents+0x2c>)
 8003c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3e:	bf00      	nop
 8003c40:	08003c6d 	.word	0x08003c6d
 8003c44:	08003c77 	.word	0x08003c77
 8003c48:	08003c85 	.word	0x08003c85
 8003c4c:	08003c93 	.word	0x08003c93
 8003c50:	08003ca1 	.word	0x08003ca1
 8003c54:	08003caf 	.word	0x08003caf
 8003c58:	08003cbd 	.word	0x08003cbd
 8003c5c:	08003ccb 	.word	0x08003ccb
 8003c60:	08003cd9 	.word	0x08003cd9
 8003c64:	08003ce7 	.word	0x08003ce7
 8003c68:	08003cf5 	.word	0x08003cf5

		case TIM1_CH1: {
			// Evento TIM1 CC1 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x0 << ADC_CR2_EXTSEL_Pos);
 8003c6c:	4b2e      	ldr	r3, [pc, #184]	; (8003d28 <adcConfigEvents+0x114>)
 8003c6e:	4a2e      	ldr	r2, [pc, #184]	; (8003d28 <adcConfigEvents+0x114>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	6093      	str	r3, [r2, #8]
			break;
 8003c74:	e053      	b.n	8003d1e <adcConfigEvents+0x10a>
		}

		case TIM1_CH2: {
			// Evento TIM1 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x1 << ADC_CR2_EXTSEL_Pos);
 8003c76:	4b2c      	ldr	r3, [pc, #176]	; (8003d28 <adcConfigEvents+0x114>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	4a2b      	ldr	r2, [pc, #172]	; (8003d28 <adcConfigEvents+0x114>)
 8003c7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c80:	6093      	str	r3, [r2, #8]
			break;
 8003c82:	e04c      	b.n	8003d1e <adcConfigEvents+0x10a>
		}

		case TIM1_CH3: {
			// Evento TIM1 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x2 << ADC_CR2_EXTSEL_Pos);
 8003c84:	4b28      	ldr	r3, [pc, #160]	; (8003d28 <adcConfigEvents+0x114>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	4a27      	ldr	r2, [pc, #156]	; (8003d28 <adcConfigEvents+0x114>)
 8003c8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c8e:	6093      	str	r3, [r2, #8]
			break;
 8003c90:	e045      	b.n	8003d1e <adcConfigEvents+0x10a>
		}

		case TIM2_CH2: {
			// Evento TIM2 CC2 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x3 << ADC_CR2_EXTSEL_Pos);
 8003c92:	4b25      	ldr	r3, [pc, #148]	; (8003d28 <adcConfigEvents+0x114>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	4a24      	ldr	r2, [pc, #144]	; (8003d28 <adcConfigEvents+0x114>)
 8003c98:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8003c9c:	6093      	str	r3, [r2, #8]
			break;
 8003c9e:	e03e      	b.n	8003d1e <adcConfigEvents+0x10a>
		}

		case TIM2_CH3: {
			// Evento TIM2 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x4 << ADC_CR2_EXTSEL_Pos);
 8003ca0:	4b21      	ldr	r3, [pc, #132]	; (8003d28 <adcConfigEvents+0x114>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	4a20      	ldr	r2, [pc, #128]	; (8003d28 <adcConfigEvents+0x114>)
 8003ca6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003caa:	6093      	str	r3, [r2, #8]
			break;
 8003cac:	e037      	b.n	8003d1e <adcConfigEvents+0x10a>
		}

		case TIM2_CH4: {
			// Evento TIM2 CC4 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x5 << ADC_CR2_EXTSEL_Pos);
 8003cae:	4b1e      	ldr	r3, [pc, #120]	; (8003d28 <adcConfigEvents+0x114>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	4a1d      	ldr	r2, [pc, #116]	; (8003d28 <adcConfigEvents+0x114>)
 8003cb4:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8003cb8:	6093      	str	r3, [r2, #8]
			break;
 8003cba:	e030      	b.n	8003d1e <adcConfigEvents+0x10a>
		}

		case TIM3_CH1: {
			// Evento TIM3 CC1 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x7 << ADC_CR2_EXTSEL_Pos);
 8003cbc:	4b1a      	ldr	r3, [pc, #104]	; (8003d28 <adcConfigEvents+0x114>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	4a19      	ldr	r2, [pc, #100]	; (8003d28 <adcConfigEvents+0x114>)
 8003cc2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003cc6:	6093      	str	r3, [r2, #8]
			break;
 8003cc8:	e029      	b.n	8003d1e <adcConfigEvents+0x10a>
		}

		case TIM4_CH4: {
			// Evento TIM4 CC4 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x9 << ADC_CR2_EXTSEL_Pos);
 8003cca:	4b17      	ldr	r3, [pc, #92]	; (8003d28 <adcConfigEvents+0x114>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	4a16      	ldr	r2, [pc, #88]	; (8003d28 <adcConfigEvents+0x114>)
 8003cd0:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
 8003cd4:	6093      	str	r3, [r2, #8]
			break;
 8003cd6:	e022      	b.n	8003d1e <adcConfigEvents+0x10a>
		}

		case TIM5_CH1: {
			// Evento TIM5 CC1 event para lanzar la conversion ADC
			ADC1->CR2 |= (0xA << ADC_CR2_EXTSEL_Pos);
 8003cd8:	4b13      	ldr	r3, [pc, #76]	; (8003d28 <adcConfigEvents+0x114>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	4a12      	ldr	r2, [pc, #72]	; (8003d28 <adcConfigEvents+0x114>)
 8003cde:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
 8003ce2:	6093      	str	r3, [r2, #8]
			break;
 8003ce4:	e01b      	b.n	8003d1e <adcConfigEvents+0x10a>
		}

		case TIM5_CH2: {
			// Evento TIM5 CC2 event para lanzar la conversion ADC
			ADC1->CR2 |= (0xB << ADC_CR2_EXTSEL_Pos);
 8003ce6:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <adcConfigEvents+0x114>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	4a0f      	ldr	r2, [pc, #60]	; (8003d28 <adcConfigEvents+0x114>)
 8003cec:	f043 6330 	orr.w	r3, r3, #184549376	; 0xb000000
 8003cf0:	6093      	str	r3, [r2, #8]
			break;
 8003cf2:	e014      	b.n	8003d1e <adcConfigEvents+0x10a>
		}

		case TIM5_CH3: {
			// Evento TIM5 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0xC << ADC_CR2_EXTSEL_Pos);
 8003cf4:	4b0c      	ldr	r3, [pc, #48]	; (8003d28 <adcConfigEvents+0x114>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	4a0b      	ldr	r2, [pc, #44]	; (8003d28 <adcConfigEvents+0x114>)
 8003cfa:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8003cfe:	6093      	str	r3, [r2, #8]
			break;
 8003d00:	e00d      	b.n	8003d1e <adcConfigEvents+0x10a>
		}

		default: {
			// 1100: Timer 5 CC3 event
			ADC1->CR2 |= (0xC << ADC_CR2_EXTSEL_Pos);
 8003d02:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <adcConfigEvents+0x114>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	4a08      	ldr	r2, [pc, #32]	; (8003d28 <adcConfigEvents+0x114>)
 8003d08:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8003d0c:	6093      	str	r3, [r2, #8]
			break;
 8003d0e:	e006      	b.n	8003d1e <adcConfigEvents+0x10a>

		}
	}

	else {
		ADC1->CR2 |= (0xF << ADC_CR2_EXTSEL_Pos);
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <adcConfigEvents+0x114>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	4a04      	ldr	r2, [pc, #16]	; (8003d28 <adcConfigEvents+0x114>)
 8003d16:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8003d1a:	6093      	str	r3, [r2, #8]
	}
}
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr
 8003d28:	40012000 	.word	0x40012000

08003d2c <adcMultiChannel>:
 * para realizar varias conversiones ADC. La función recibe como parámetros
 * la configuración del ADC y el número de conversiones que se requieren,
 * que para efectos prácticos es el número de canales sobre los cuales
 * se van a hacer las conversiones.
 */
void adcMultiChannel(ADC_Config_t *adcConfig, uint8_t numberOfConversion){
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	70fb      	strb	r3, [r7, #3]
	for(counter5 = 0; counter5<numberOfConversion; counter5++){
 8003d38:	4b8b      	ldr	r3, [pc, #556]	; (8003f68 <adcMultiChannel+0x23c>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	701a      	strb	r2, [r3, #0]
 8003d3e:	e00e      	b.n	8003d5e <adcMultiChannel+0x32>
		/* 1. Configuramos el PinX para que cumpla la función de canal análogo deseado. */
		configAnalogPin(adcConfig->adcMultiChannel[counter5]);
 8003d40:	4b89      	ldr	r3, [pc, #548]	; (8003f68 <adcMultiChannel+0x23c>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4413      	add	r3, r2
 8003d4a:	7a9b      	ldrb	r3, [r3, #10]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff feb1 	bl	8003ab4 <configAnalogPin>
	for(counter5 = 0; counter5<numberOfConversion; counter5++){
 8003d52:	4b85      	ldr	r3, [pc, #532]	; (8003f68 <adcMultiChannel+0x23c>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	3301      	adds	r3, #1
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	4b83      	ldr	r3, [pc, #524]	; (8003f68 <adcMultiChannel+0x23c>)
 8003d5c:	701a      	strb	r2, [r3, #0]
 8003d5e:	4b82      	ldr	r3, [pc, #520]	; (8003f68 <adcMultiChannel+0x23c>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	78fa      	ldrb	r2, [r7, #3]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d8eb      	bhi.n	8003d40 <adcMultiChannel+0x14>
	}

	/* 2. Activamos la señal de reloj para el periférico ADC1 (bus APB2)*/
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8003d68:	4b80      	ldr	r3, [pc, #512]	; (8003f6c <adcMultiChannel+0x240>)
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6c:	4a7f      	ldr	r2, [pc, #508]	; (8003f6c <adcMultiChannel+0x240>)
 8003d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d72:	6453      	str	r3, [r2, #68]	; 0x44

	// Limpiamos los registros antes de comenzar a configurar
	ADC1->CR1 = 0;
 8003d74:	4b7e      	ldr	r3, [pc, #504]	; (8003f70 <adcMultiChannel+0x244>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	605a      	str	r2, [r3, #4]
	ADC1->CR2 = 0;
 8003d7a:	4b7d      	ldr	r3, [pc, #500]	; (8003f70 <adcMultiChannel+0x244>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	609a      	str	r2, [r3, #8]

	/* Comenzamos la configuración del ADC1 */
	/* 3. Resolución del ADC */
	// Preferible utilizar la conversión a 12 bits para usar
	// la máxima capacidad del microcontrolador.
	switch (adcConfig->resolution) {
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	785b      	ldrb	r3, [r3, #1]
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d83f      	bhi.n	8003e08 <adcMultiChannel+0xdc>
 8003d88:	a201      	add	r2, pc, #4	; (adr r2, 8003d90 <adcMultiChannel+0x64>)
 8003d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8e:	bf00      	nop
 8003d90:	08003da1 	.word	0x08003da1
 8003d94:	08003dbb 	.word	0x08003dbb
 8003d98:	08003dd5 	.word	0x08003dd5
 8003d9c:	08003def 	.word	0x08003def
	case ADC_RESOLUTION_12_BIT: {

		ADC1->CR1 &= ~ADC_CR1_RES_0;
 8003da0:	4b73      	ldr	r3, [pc, #460]	; (8003f70 <adcMultiChannel+0x244>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	4a72      	ldr	r2, [pc, #456]	; (8003f70 <adcMultiChannel+0x244>)
 8003da6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003daa:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_1;
 8003dac:	4b70      	ldr	r3, [pc, #448]	; (8003f70 <adcMultiChannel+0x244>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	4a6f      	ldr	r2, [pc, #444]	; (8003f70 <adcMultiChannel+0x244>)
 8003db2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003db6:	6053      	str	r3, [r2, #4]
		break;
 8003db8:	e027      	b.n	8003e0a <adcMultiChannel+0xde>
	}

	case ADC_RESOLUTION_10_BIT: {

		ADC1->CR1 |= ADC_CR1_RES_0;
 8003dba:	4b6d      	ldr	r3, [pc, #436]	; (8003f70 <adcMultiChannel+0x244>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	4a6c      	ldr	r2, [pc, #432]	; (8003f70 <adcMultiChannel+0x244>)
 8003dc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dc4:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_1;
 8003dc6:	4b6a      	ldr	r3, [pc, #424]	; (8003f70 <adcMultiChannel+0x244>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	4a69      	ldr	r2, [pc, #420]	; (8003f70 <adcMultiChannel+0x244>)
 8003dcc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003dd0:	6053      	str	r3, [r2, #4]
		break;
 8003dd2:	e01a      	b.n	8003e0a <adcMultiChannel+0xde>
	}

	case ADC_RESOLUTION_8_BIT: {

		ADC1->CR1 |= ADC_CR1_RES_1;
 8003dd4:	4b66      	ldr	r3, [pc, #408]	; (8003f70 <adcMultiChannel+0x244>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	4a65      	ldr	r2, [pc, #404]	; (8003f70 <adcMultiChannel+0x244>)
 8003dda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dde:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_0;
 8003de0:	4b63      	ldr	r3, [pc, #396]	; (8003f70 <adcMultiChannel+0x244>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	4a62      	ldr	r2, [pc, #392]	; (8003f70 <adcMultiChannel+0x244>)
 8003de6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dea:	6053      	str	r3, [r2, #4]
		break;
 8003dec:	e00d      	b.n	8003e0a <adcMultiChannel+0xde>
	}

	case ADC_RESOLUTION_6_BIT: {
		ADC1->CR1 |= ADC_CR1_RES_0;
 8003dee:	4b60      	ldr	r3, [pc, #384]	; (8003f70 <adcMultiChannel+0x244>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	4a5f      	ldr	r2, [pc, #380]	; (8003f70 <adcMultiChannel+0x244>)
 8003df4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003df8:	6053      	str	r3, [r2, #4]
		ADC1->CR1 |= ADC_CR1_RES_1;
 8003dfa:	4b5d      	ldr	r3, [pc, #372]	; (8003f70 <adcMultiChannel+0x244>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	4a5c      	ldr	r2, [pc, #368]	; (8003f70 <adcMultiChannel+0x244>)
 8003e00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e04:	6053      	str	r3, [r2, #4]
		break;
 8003e06:	e000      	b.n	8003e0a <adcMultiChannel+0xde>
	}

	default: {
		break;
 8003e08:	bf00      	nop
	}
	}

	/* 4. Configuramos el modo Scan como ACTIVADO */
	ADC1->CR1 |= ADC_CR1_SCAN;
 8003e0a:	4b59      	ldr	r3, [pc, #356]	; (8003f70 <adcMultiChannel+0x244>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	4a58      	ldr	r2, [pc, #352]	; (8003f70 <adcMultiChannel+0x244>)
 8003e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e14:	6053      	str	r3, [r2, #4]
	// Se configura además el EOCS end of conversion.
	ADC1->CR2 |= ADC_CR2_EOCS;
 8003e16:	4b56      	ldr	r3, [pc, #344]	; (8003f70 <adcMultiChannel+0x244>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	4a55      	ldr	r2, [pc, #340]	; (8003f70 <adcMultiChannel+0x244>)
 8003e1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e20:	6093      	str	r3, [r2, #8]

	/* 5. Configuramos la alineación de los datos (derecha o izquierda) */
	if (adcConfig->dataAlignment == ADC_ALIGNMENT_RIGHT) {
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	791b      	ldrb	r3, [r3, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <adcMultiChannel+0x10c>
		// Alineación a la derecha (esta es la forma "natural")
		ADC1->CR2 &= ~ADC_CR2_ALIGN;
 8003e2a:	4b51      	ldr	r3, [pc, #324]	; (8003f70 <adcMultiChannel+0x244>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	4a50      	ldr	r2, [pc, #320]	; (8003f70 <adcMultiChannel+0x244>)
 8003e30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e34:	6093      	str	r3, [r2, #8]
 8003e36:	e005      	b.n	8003e44 <adcMultiChannel+0x118>
	} else {
		// Alineación a la izquierda (para algunos cálculos matemáticos)
		ADC1->CR2 |= ADC_CR2_ALIGN;
 8003e38:	4b4d      	ldr	r3, [pc, #308]	; (8003f70 <adcMultiChannel+0x244>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	4a4c      	ldr	r2, [pc, #304]	; (8003f70 <adcMultiChannel+0x244>)
 8003e3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e42:	6093      	str	r3, [r2, #8]
	}

	/* 6. Desactivamos el "continuos mode" */
	ADC1->CR2 &= ~ADC_CR2_CONT;
 8003e44:	4b4a      	ldr	r3, [pc, #296]	; (8003f70 <adcMultiChannel+0x244>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	4a49      	ldr	r2, [pc, #292]	; (8003f70 <adcMultiChannel+0x244>)
 8003e4a:	f023 0302 	bic.w	r3, r3, #2
 8003e4e:	6093      	str	r3, [r2, #8]

	/* 7. Acá se debería configurar el sampling...*/

	for(counter5 = 0; counter5 < numberOfConversion; counter5++){
 8003e50:	4b45      	ldr	r3, [pc, #276]	; (8003f68 <adcMultiChannel+0x23c>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	701a      	strb	r2, [r3, #0]
 8003e56:	e037      	b.n	8003ec8 <adcMultiChannel+0x19c>
		if (adcConfig->adcMultiChannel[counter5] <= ADC_CHANNEL_9) {
 8003e58:	4b43      	ldr	r3, [pc, #268]	; (8003f68 <adcMultiChannel+0x23c>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4413      	add	r3, r2
 8003e62:	7a9b      	ldrb	r3, [r3, #10]
 8003e64:	2b09      	cmp	r3, #9
 8003e66:	d814      	bhi.n	8003e92 <adcMultiChannel+0x166>
			// Acá se establecen la cantidad de ciclos para cada canal (0 al 9)
			ADC1->SMPR2 |= (adcConfig->samplingPeriod << (3 * (adcConfig->adcMultiChannel[counter5])));
 8003e68:	4b41      	ldr	r3, [pc, #260]	; (8003f70 <adcMultiChannel+0x244>)
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	885b      	ldrh	r3, [r3, #2]
 8003e70:	4618      	mov	r0, r3
 8003e72:	4b3d      	ldr	r3, [pc, #244]	; (8003f68 <adcMultiChannel+0x23c>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	4619      	mov	r1, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	440b      	add	r3, r1
 8003e7c:	7a9b      	ldrb	r3, [r3, #10]
 8003e7e:	4619      	mov	r1, r3
 8003e80:	460b      	mov	r3, r1
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	440b      	add	r3, r1
 8003e86:	fa00 f303 	lsl.w	r3, r0, r3
 8003e8a:	4939      	ldr	r1, [pc, #228]	; (8003f70 <adcMultiChannel+0x244>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	610b      	str	r3, [r1, #16]
 8003e90:	e014      	b.n	8003ebc <adcMultiChannel+0x190>

		} else {
			// Acá se establecen la cantidad de ciclos para cada canal (10 al 18)
			ADC1->SMPR1 |= (adcConfig->samplingPeriod << (3 * (adcConfig->adcMultiChannel[counter5] - 10)));
 8003e92:	4b37      	ldr	r3, [pc, #220]	; (8003f70 <adcMultiChannel+0x244>)
 8003e94:	68d9      	ldr	r1, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	885b      	ldrh	r3, [r3, #2]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	4b32      	ldr	r3, [pc, #200]	; (8003f68 <adcMultiChannel+0x23c>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	7a9b      	ldrb	r3, [r3, #10]
 8003ea8:	f1a3 020a 	sub.w	r2, r3, #10
 8003eac:	4613      	mov	r3, r2
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	4413      	add	r3, r2
 8003eb2:	fa00 f303 	lsl.w	r3, r0, r3
 8003eb6:	4a2e      	ldr	r2, [pc, #184]	; (8003f70 <adcMultiChannel+0x244>)
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	60d3      	str	r3, [r2, #12]
	for(counter5 = 0; counter5 < numberOfConversion; counter5++){
 8003ebc:	4b2a      	ldr	r3, [pc, #168]	; (8003f68 <adcMultiChannel+0x23c>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	4b28      	ldr	r3, [pc, #160]	; (8003f68 <adcMultiChannel+0x23c>)
 8003ec6:	701a      	strb	r2, [r3, #0]
 8003ec8:	4b27      	ldr	r3, [pc, #156]	; (8003f68 <adcMultiChannel+0x23c>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	78fa      	ldrb	r2, [r7, #3]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d8c2      	bhi.n	8003e58 <adcMultiChannel+0x12c>
		}
	}

	/* 8. Configuramos la secuencia y cuantos elementos hay en la secuencia */
	// Al hacerlo todo 0, estamos seleccionando solo 1 elemento en el conteo de la secuencia
	ADC1->SQR1 = (numberOfConversion - 1) << ADC_SQR1_L_Pos;
 8003ed2:	78fb      	ldrb	r3, [r7, #3]
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	051a      	lsls	r2, r3, #20
 8003ed8:	4b25      	ldr	r3, [pc, #148]	; (8003f70 <adcMultiChannel+0x244>)
 8003eda:	62da      	str	r2, [r3, #44]	; 0x2c

	// Asignamos el orden de la conversión dependiendo del canal en que
	// se esté haciendo, de allí la variación en la agrupación de los
	// registros.
	for(counter5 = 0; counter5 < numberOfConversion; counter5++){
 8003edc:	4b22      	ldr	r3, [pc, #136]	; (8003f68 <adcMultiChannel+0x23c>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	701a      	strb	r2, [r3, #0]
 8003ee2:	e06a      	b.n	8003fba <adcMultiChannel+0x28e>
		if(adcConfig->adcMultiChannel[counter5] <= 6){
 8003ee4:	4b20      	ldr	r3, [pc, #128]	; (8003f68 <adcMultiChannel+0x23c>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4413      	add	r3, r2
 8003eee:	7a9b      	ldrb	r3, [r3, #10]
 8003ef0:	2b06      	cmp	r3, #6
 8003ef2:	d814      	bhi.n	8003f1e <adcMultiChannel+0x1f2>
			ADC1->SQR3 |= (adcConfig->adcMultiChannel[counter5] << (5 * counter5));
 8003ef4:	4b1e      	ldr	r3, [pc, #120]	; (8003f70 <adcMultiChannel+0x244>)
 8003ef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ef8:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <adcMultiChannel+0x23c>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	4619      	mov	r1, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	440b      	add	r3, r1
 8003f02:	7a9b      	ldrb	r3, [r3, #10]
 8003f04:	4618      	mov	r0, r3
 8003f06:	4b18      	ldr	r3, [pc, #96]	; (8003f68 <adcMultiChannel+0x23c>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	fa00 f303 	lsl.w	r3, r0, r3
 8003f16:	4916      	ldr	r1, [pc, #88]	; (8003f70 <adcMultiChannel+0x244>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	634b      	str	r3, [r1, #52]	; 0x34
 8003f1c:	e047      	b.n	8003fae <adcMultiChannel+0x282>
		}
		else if(adcConfig->adcMultiChannel[counter5] > 6 && adcConfig->adcMultiChannel[counter5] <= 12){
 8003f1e:	4b12      	ldr	r3, [pc, #72]	; (8003f68 <adcMultiChannel+0x23c>)
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4413      	add	r3, r2
 8003f28:	7a9b      	ldrb	r3, [r3, #10]
 8003f2a:	2b06      	cmp	r3, #6
 8003f2c:	d922      	bls.n	8003f74 <adcMultiChannel+0x248>
 8003f2e:	4b0e      	ldr	r3, [pc, #56]	; (8003f68 <adcMultiChannel+0x23c>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4413      	add	r3, r2
 8003f38:	7a9b      	ldrb	r3, [r3, #10]
 8003f3a:	2b0c      	cmp	r3, #12
 8003f3c:	d81a      	bhi.n	8003f74 <adcMultiChannel+0x248>
			ADC1->SQR2 |= (adcConfig->adcMultiChannel[counter5] << (5 * (counter5 - 7)));
 8003f3e:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <adcMultiChannel+0x244>)
 8003f40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f42:	4b09      	ldr	r3, [pc, #36]	; (8003f68 <adcMultiChannel+0x23c>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	7a9b      	ldrb	r3, [r3, #10]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <adcMultiChannel+0x23c>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	1fda      	subs	r2, r3, #7
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	fa00 f303 	lsl.w	r3, r0, r3
 8003f60:	4a03      	ldr	r2, [pc, #12]	; (8003f70 <adcMultiChannel+0x244>)
 8003f62:	430b      	orrs	r3, r1
 8003f64:	6313      	str	r3, [r2, #48]	; 0x30
 8003f66:	e022      	b.n	8003fae <adcMultiChannel+0x282>
 8003f68:	20003cd6 	.word	0x20003cd6
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	40012000 	.word	0x40012000
		}
		else if(adcConfig->adcMultiChannel[counter5] > 12){
 8003f74:	4b24      	ldr	r3, [pc, #144]	; (8004008 <adcMultiChannel+0x2dc>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	7a9b      	ldrb	r3, [r3, #10]
 8003f80:	2b0c      	cmp	r3, #12
 8003f82:	d914      	bls.n	8003fae <adcMultiChannel+0x282>
			ADC1->SQR1 |= (adcConfig->adcMultiChannel[counter5] << (5 * (counter5 - 13)));
 8003f84:	4b21      	ldr	r3, [pc, #132]	; (800400c <adcMultiChannel+0x2e0>)
 8003f86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f88:	4b1f      	ldr	r3, [pc, #124]	; (8004008 <adcMultiChannel+0x2dc>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4413      	add	r3, r2
 8003f92:	7a9b      	ldrb	r3, [r3, #10]
 8003f94:	4618      	mov	r0, r3
 8003f96:	4b1c      	ldr	r3, [pc, #112]	; (8004008 <adcMultiChannel+0x2dc>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	f1a3 020d 	sub.w	r2, r3, #13
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	fa00 f303 	lsl.w	r3, r0, r3
 8003fa8:	4a18      	ldr	r2, [pc, #96]	; (800400c <adcMultiChannel+0x2e0>)
 8003faa:	430b      	orrs	r3, r1
 8003fac:	62d3      	str	r3, [r2, #44]	; 0x2c
	for(counter5 = 0; counter5 < numberOfConversion; counter5++){
 8003fae:	4b16      	ldr	r3, [pc, #88]	; (8004008 <adcMultiChannel+0x2dc>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	4b14      	ldr	r3, [pc, #80]	; (8004008 <adcMultiChannel+0x2dc>)
 8003fb8:	701a      	strb	r2, [r3, #0]
 8003fba:	4b13      	ldr	r3, [pc, #76]	; (8004008 <adcMultiChannel+0x2dc>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	78fa      	ldrb	r2, [r7, #3]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d88f      	bhi.n	8003ee4 <adcMultiChannel+0x1b8>
		}
	}

	/* 9. Configuramos el preescaler del ADC en 2:1 (el mas rápido que se puede tener */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 8003fc4:	4b12      	ldr	r3, [pc, #72]	; (8004010 <adcMultiChannel+0x2e4>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	4a11      	ldr	r2, [pc, #68]	; (8004010 <adcMultiChannel+0x2e4>)
 8003fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fce:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fd0:	b672      	cpsid	i
}
 8003fd2:	bf00      	nop

	/* 10. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 11. Activamos la interrupción debida a la finalización de una conversión EOC (CR1)*/
	ADC1->CR1 |= ADC_CR1_EOCIE;
 8003fd4:	4b0d      	ldr	r3, [pc, #52]	; (800400c <adcMultiChannel+0x2e0>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	4a0c      	ldr	r2, [pc, #48]	; (800400c <adcMultiChannel+0x2e0>)
 8003fda:	f043 0320 	orr.w	r3, r3, #32
 8003fde:	6053      	str	r3, [r2, #4]

	/* 11a. Matriculamos la interrupción en el NVIC*/
	__NVIC_EnableIRQ(ADC_IRQn);
 8003fe0:	2012      	movs	r0, #18
 8003fe2:	f7ff fd01 	bl	80039e8 <__NVIC_EnableIRQ>

	/* 11b. Configuramos la prioridad para la interrupción ADC */
	__NVIC_SetPriority(ADC_IRQn, 1);
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	2012      	movs	r0, #18
 8003fea:	f7ff fd19 	bl	8003a20 <__NVIC_SetPriority>

	/* 12. Activamos el modulo ADC */
	ADC1->CR2 |= ADC_CR2_ADON;
 8003fee:	4b07      	ldr	r3, [pc, #28]	; (800400c <adcMultiChannel+0x2e0>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	4a06      	ldr	r2, [pc, #24]	; (800400c <adcMultiChannel+0x2e0>)
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ffa:	b662      	cpsie	i
}
 8003ffc:	bf00      	nop

	/* 13. Activamos las interrupciones globales */
	__enable_irq();

}
 8003ffe:	bf00      	nop
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	20003cd6 	.word	0x20003cd6
 800400c:	40012000 	.word	0x40012000
 8004010:	40012300 	.word	0x40012300

08004014 <__libc_init_array>:
 8004014:	b570      	push	{r4, r5, r6, lr}
 8004016:	4d0d      	ldr	r5, [pc, #52]	; (800404c <__libc_init_array+0x38>)
 8004018:	4c0d      	ldr	r4, [pc, #52]	; (8004050 <__libc_init_array+0x3c>)
 800401a:	1b64      	subs	r4, r4, r5
 800401c:	10a4      	asrs	r4, r4, #2
 800401e:	2600      	movs	r6, #0
 8004020:	42a6      	cmp	r6, r4
 8004022:	d109      	bne.n	8004038 <__libc_init_array+0x24>
 8004024:	4d0b      	ldr	r5, [pc, #44]	; (8004054 <__libc_init_array+0x40>)
 8004026:	4c0c      	ldr	r4, [pc, #48]	; (8004058 <__libc_init_array+0x44>)
 8004028:	f005 f8c0 	bl	80091ac <_init>
 800402c:	1b64      	subs	r4, r4, r5
 800402e:	10a4      	asrs	r4, r4, #2
 8004030:	2600      	movs	r6, #0
 8004032:	42a6      	cmp	r6, r4
 8004034:	d105      	bne.n	8004042 <__libc_init_array+0x2e>
 8004036:	bd70      	pop	{r4, r5, r6, pc}
 8004038:	f855 3b04 	ldr.w	r3, [r5], #4
 800403c:	4798      	blx	r3
 800403e:	3601      	adds	r6, #1
 8004040:	e7ee      	b.n	8004020 <__libc_init_array+0xc>
 8004042:	f855 3b04 	ldr.w	r3, [r5], #4
 8004046:	4798      	blx	r3
 8004048:	3601      	adds	r6, #1
 800404a:	e7f2      	b.n	8004032 <__libc_init_array+0x1e>
 800404c:	0800ae74 	.word	0x0800ae74
 8004050:	0800ae74 	.word	0x0800ae74
 8004054:	0800ae74 	.word	0x0800ae74
 8004058:	0800ae78 	.word	0x0800ae78

0800405c <memset>:
 800405c:	4402      	add	r2, r0
 800405e:	4603      	mov	r3, r0
 8004060:	4293      	cmp	r3, r2
 8004062:	d100      	bne.n	8004066 <memset+0xa>
 8004064:	4770      	bx	lr
 8004066:	f803 1b01 	strb.w	r1, [r3], #1
 800406a:	e7f9      	b.n	8004060 <memset+0x4>

0800406c <__cvt>:
 800406c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004070:	b088      	sub	sp, #32
 8004072:	2b00      	cmp	r3, #0
 8004074:	461f      	mov	r7, r3
 8004076:	4614      	mov	r4, r2
 8004078:	bfb8      	it	lt
 800407a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800407e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004080:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004082:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004086:	bfb6      	itet	lt
 8004088:	461f      	movlt	r7, r3
 800408a:	2300      	movge	r3, #0
 800408c:	232d      	movlt	r3, #45	; 0x2d
 800408e:	7013      	strb	r3, [r2, #0]
 8004090:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004092:	f023 0820 	bic.w	r8, r3, #32
 8004096:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800409a:	d005      	beq.n	80040a8 <__cvt+0x3c>
 800409c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80040a0:	d100      	bne.n	80040a4 <__cvt+0x38>
 80040a2:	3501      	adds	r5, #1
 80040a4:	2302      	movs	r3, #2
 80040a6:	e000      	b.n	80040aa <__cvt+0x3e>
 80040a8:	2303      	movs	r3, #3
 80040aa:	aa07      	add	r2, sp, #28
 80040ac:	9204      	str	r2, [sp, #16]
 80040ae:	aa06      	add	r2, sp, #24
 80040b0:	e9cd a202 	strd	sl, r2, [sp, #8]
 80040b4:	e9cd 3500 	strd	r3, r5, [sp]
 80040b8:	4622      	mov	r2, r4
 80040ba:	463b      	mov	r3, r7
 80040bc:	f001 fe0c 	bl	8005cd8 <_dtoa_r>
 80040c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80040c4:	4606      	mov	r6, r0
 80040c6:	d102      	bne.n	80040ce <__cvt+0x62>
 80040c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80040ca:	07db      	lsls	r3, r3, #31
 80040cc:	d522      	bpl.n	8004114 <__cvt+0xa8>
 80040ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040d2:	eb06 0905 	add.w	r9, r6, r5
 80040d6:	d110      	bne.n	80040fa <__cvt+0x8e>
 80040d8:	7833      	ldrb	r3, [r6, #0]
 80040da:	2b30      	cmp	r3, #48	; 0x30
 80040dc:	d10a      	bne.n	80040f4 <__cvt+0x88>
 80040de:	2200      	movs	r2, #0
 80040e0:	2300      	movs	r3, #0
 80040e2:	4620      	mov	r0, r4
 80040e4:	4639      	mov	r1, r7
 80040e6:	f7fc fd07 	bl	8000af8 <__aeabi_dcmpeq>
 80040ea:	b918      	cbnz	r0, 80040f4 <__cvt+0x88>
 80040ec:	f1c5 0501 	rsb	r5, r5, #1
 80040f0:	f8ca 5000 	str.w	r5, [sl]
 80040f4:	f8da 3000 	ldr.w	r3, [sl]
 80040f8:	4499      	add	r9, r3
 80040fa:	2200      	movs	r2, #0
 80040fc:	2300      	movs	r3, #0
 80040fe:	4620      	mov	r0, r4
 8004100:	4639      	mov	r1, r7
 8004102:	f7fc fcf9 	bl	8000af8 <__aeabi_dcmpeq>
 8004106:	b108      	cbz	r0, 800410c <__cvt+0xa0>
 8004108:	f8cd 901c 	str.w	r9, [sp, #28]
 800410c:	2230      	movs	r2, #48	; 0x30
 800410e:	9b07      	ldr	r3, [sp, #28]
 8004110:	454b      	cmp	r3, r9
 8004112:	d307      	bcc.n	8004124 <__cvt+0xb8>
 8004114:	9b07      	ldr	r3, [sp, #28]
 8004116:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004118:	1b9b      	subs	r3, r3, r6
 800411a:	4630      	mov	r0, r6
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	b008      	add	sp, #32
 8004120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004124:	1c59      	adds	r1, r3, #1
 8004126:	9107      	str	r1, [sp, #28]
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	e7f0      	b.n	800410e <__cvt+0xa2>

0800412c <__exponent>:
 800412c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800412e:	4603      	mov	r3, r0
 8004130:	2900      	cmp	r1, #0
 8004132:	bfb8      	it	lt
 8004134:	4249      	neglt	r1, r1
 8004136:	f803 2b02 	strb.w	r2, [r3], #2
 800413a:	bfb4      	ite	lt
 800413c:	222d      	movlt	r2, #45	; 0x2d
 800413e:	222b      	movge	r2, #43	; 0x2b
 8004140:	2909      	cmp	r1, #9
 8004142:	7042      	strb	r2, [r0, #1]
 8004144:	dd2a      	ble.n	800419c <__exponent+0x70>
 8004146:	f10d 0407 	add.w	r4, sp, #7
 800414a:	46a4      	mov	ip, r4
 800414c:	270a      	movs	r7, #10
 800414e:	46a6      	mov	lr, r4
 8004150:	460a      	mov	r2, r1
 8004152:	fb91 f6f7 	sdiv	r6, r1, r7
 8004156:	fb07 1516 	mls	r5, r7, r6, r1
 800415a:	3530      	adds	r5, #48	; 0x30
 800415c:	2a63      	cmp	r2, #99	; 0x63
 800415e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004162:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004166:	4631      	mov	r1, r6
 8004168:	dcf1      	bgt.n	800414e <__exponent+0x22>
 800416a:	3130      	adds	r1, #48	; 0x30
 800416c:	f1ae 0502 	sub.w	r5, lr, #2
 8004170:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004174:	1c44      	adds	r4, r0, #1
 8004176:	4629      	mov	r1, r5
 8004178:	4561      	cmp	r1, ip
 800417a:	d30a      	bcc.n	8004192 <__exponent+0x66>
 800417c:	f10d 0209 	add.w	r2, sp, #9
 8004180:	eba2 020e 	sub.w	r2, r2, lr
 8004184:	4565      	cmp	r5, ip
 8004186:	bf88      	it	hi
 8004188:	2200      	movhi	r2, #0
 800418a:	4413      	add	r3, r2
 800418c:	1a18      	subs	r0, r3, r0
 800418e:	b003      	add	sp, #12
 8004190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004192:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004196:	f804 2f01 	strb.w	r2, [r4, #1]!
 800419a:	e7ed      	b.n	8004178 <__exponent+0x4c>
 800419c:	2330      	movs	r3, #48	; 0x30
 800419e:	3130      	adds	r1, #48	; 0x30
 80041a0:	7083      	strb	r3, [r0, #2]
 80041a2:	70c1      	strb	r1, [r0, #3]
 80041a4:	1d03      	adds	r3, r0, #4
 80041a6:	e7f1      	b.n	800418c <__exponent+0x60>

080041a8 <_printf_float>:
 80041a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ac:	b091      	sub	sp, #68	; 0x44
 80041ae:	460c      	mov	r4, r1
 80041b0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80041b4:	4616      	mov	r6, r2
 80041b6:	461f      	mov	r7, r3
 80041b8:	4605      	mov	r5, r0
 80041ba:	f002 fee7 	bl	8006f8c <_localeconv_r>
 80041be:	6803      	ldr	r3, [r0, #0]
 80041c0:	9309      	str	r3, [sp, #36]	; 0x24
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fc f816 	bl	80001f4 <strlen>
 80041c8:	2300      	movs	r3, #0
 80041ca:	930e      	str	r3, [sp, #56]	; 0x38
 80041cc:	f8d8 3000 	ldr.w	r3, [r8]
 80041d0:	900a      	str	r0, [sp, #40]	; 0x28
 80041d2:	3307      	adds	r3, #7
 80041d4:	f023 0307 	bic.w	r3, r3, #7
 80041d8:	f103 0208 	add.w	r2, r3, #8
 80041dc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80041e0:	f8d4 b000 	ldr.w	fp, [r4]
 80041e4:	f8c8 2000 	str.w	r2, [r8]
 80041e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80041f0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80041f4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80041f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80041fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80041fc:	4b9c      	ldr	r3, [pc, #624]	; (8004470 <_printf_float+0x2c8>)
 80041fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004202:	4640      	mov	r0, r8
 8004204:	f7fc fcaa 	bl	8000b5c <__aeabi_dcmpun>
 8004208:	bb70      	cbnz	r0, 8004268 <_printf_float+0xc0>
 800420a:	4b99      	ldr	r3, [pc, #612]	; (8004470 <_printf_float+0x2c8>)
 800420c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800420e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004212:	4640      	mov	r0, r8
 8004214:	f7fc fc84 	bl	8000b20 <__aeabi_dcmple>
 8004218:	bb30      	cbnz	r0, 8004268 <_printf_float+0xc0>
 800421a:	2200      	movs	r2, #0
 800421c:	2300      	movs	r3, #0
 800421e:	4640      	mov	r0, r8
 8004220:	4651      	mov	r1, sl
 8004222:	f7fc fc73 	bl	8000b0c <__aeabi_dcmplt>
 8004226:	b110      	cbz	r0, 800422e <_printf_float+0x86>
 8004228:	232d      	movs	r3, #45	; 0x2d
 800422a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800422e:	4b91      	ldr	r3, [pc, #580]	; (8004474 <_printf_float+0x2cc>)
 8004230:	4891      	ldr	r0, [pc, #580]	; (8004478 <_printf_float+0x2d0>)
 8004232:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004236:	bf94      	ite	ls
 8004238:	4698      	movls	r8, r3
 800423a:	4680      	movhi	r8, r0
 800423c:	2303      	movs	r3, #3
 800423e:	6123      	str	r3, [r4, #16]
 8004240:	f02b 0304 	bic.w	r3, fp, #4
 8004244:	6023      	str	r3, [r4, #0]
 8004246:	f04f 0a00 	mov.w	sl, #0
 800424a:	9700      	str	r7, [sp, #0]
 800424c:	4633      	mov	r3, r6
 800424e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004250:	4621      	mov	r1, r4
 8004252:	4628      	mov	r0, r5
 8004254:	f000 f9d2 	bl	80045fc <_printf_common>
 8004258:	3001      	adds	r0, #1
 800425a:	f040 808f 	bne.w	800437c <_printf_float+0x1d4>
 800425e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004262:	b011      	add	sp, #68	; 0x44
 8004264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004268:	4642      	mov	r2, r8
 800426a:	4653      	mov	r3, sl
 800426c:	4640      	mov	r0, r8
 800426e:	4651      	mov	r1, sl
 8004270:	f7fc fc74 	bl	8000b5c <__aeabi_dcmpun>
 8004274:	b140      	cbz	r0, 8004288 <_printf_float+0xe0>
 8004276:	f1ba 0f00 	cmp.w	sl, #0
 800427a:	bfbc      	itt	lt
 800427c:	232d      	movlt	r3, #45	; 0x2d
 800427e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004282:	487e      	ldr	r0, [pc, #504]	; (800447c <_printf_float+0x2d4>)
 8004284:	4b7e      	ldr	r3, [pc, #504]	; (8004480 <_printf_float+0x2d8>)
 8004286:	e7d4      	b.n	8004232 <_printf_float+0x8a>
 8004288:	6863      	ldr	r3, [r4, #4]
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004290:	d142      	bne.n	8004318 <_printf_float+0x170>
 8004292:	2306      	movs	r3, #6
 8004294:	6063      	str	r3, [r4, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	9206      	str	r2, [sp, #24]
 800429a:	aa0e      	add	r2, sp, #56	; 0x38
 800429c:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80042a0:	aa0d      	add	r2, sp, #52	; 0x34
 80042a2:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80042a6:	9203      	str	r2, [sp, #12]
 80042a8:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80042ac:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80042b0:	6023      	str	r3, [r4, #0]
 80042b2:	6863      	ldr	r3, [r4, #4]
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	4642      	mov	r2, r8
 80042b8:	4653      	mov	r3, sl
 80042ba:	4628      	mov	r0, r5
 80042bc:	910b      	str	r1, [sp, #44]	; 0x2c
 80042be:	f7ff fed5 	bl	800406c <__cvt>
 80042c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042c4:	2947      	cmp	r1, #71	; 0x47
 80042c6:	4680      	mov	r8, r0
 80042c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80042ca:	d108      	bne.n	80042de <_printf_float+0x136>
 80042cc:	1cc8      	adds	r0, r1, #3
 80042ce:	db02      	blt.n	80042d6 <_printf_float+0x12e>
 80042d0:	6863      	ldr	r3, [r4, #4]
 80042d2:	4299      	cmp	r1, r3
 80042d4:	dd40      	ble.n	8004358 <_printf_float+0x1b0>
 80042d6:	f1a9 0902 	sub.w	r9, r9, #2
 80042da:	fa5f f989 	uxtb.w	r9, r9
 80042de:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80042e2:	d81f      	bhi.n	8004324 <_printf_float+0x17c>
 80042e4:	3901      	subs	r1, #1
 80042e6:	464a      	mov	r2, r9
 80042e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80042ec:	910d      	str	r1, [sp, #52]	; 0x34
 80042ee:	f7ff ff1d 	bl	800412c <__exponent>
 80042f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042f4:	1813      	adds	r3, r2, r0
 80042f6:	2a01      	cmp	r2, #1
 80042f8:	4682      	mov	sl, r0
 80042fa:	6123      	str	r3, [r4, #16]
 80042fc:	dc02      	bgt.n	8004304 <_printf_float+0x15c>
 80042fe:	6822      	ldr	r2, [r4, #0]
 8004300:	07d2      	lsls	r2, r2, #31
 8004302:	d501      	bpl.n	8004308 <_printf_float+0x160>
 8004304:	3301      	adds	r3, #1
 8004306:	6123      	str	r3, [r4, #16]
 8004308:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800430c:	2b00      	cmp	r3, #0
 800430e:	d09c      	beq.n	800424a <_printf_float+0xa2>
 8004310:	232d      	movs	r3, #45	; 0x2d
 8004312:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004316:	e798      	b.n	800424a <_printf_float+0xa2>
 8004318:	2947      	cmp	r1, #71	; 0x47
 800431a:	d1bc      	bne.n	8004296 <_printf_float+0xee>
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1ba      	bne.n	8004296 <_printf_float+0xee>
 8004320:	2301      	movs	r3, #1
 8004322:	e7b7      	b.n	8004294 <_printf_float+0xec>
 8004324:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004328:	d118      	bne.n	800435c <_printf_float+0x1b4>
 800432a:	2900      	cmp	r1, #0
 800432c:	6863      	ldr	r3, [r4, #4]
 800432e:	dd0b      	ble.n	8004348 <_printf_float+0x1a0>
 8004330:	6121      	str	r1, [r4, #16]
 8004332:	b913      	cbnz	r3, 800433a <_printf_float+0x192>
 8004334:	6822      	ldr	r2, [r4, #0]
 8004336:	07d0      	lsls	r0, r2, #31
 8004338:	d502      	bpl.n	8004340 <_printf_float+0x198>
 800433a:	3301      	adds	r3, #1
 800433c:	440b      	add	r3, r1
 800433e:	6123      	str	r3, [r4, #16]
 8004340:	65a1      	str	r1, [r4, #88]	; 0x58
 8004342:	f04f 0a00 	mov.w	sl, #0
 8004346:	e7df      	b.n	8004308 <_printf_float+0x160>
 8004348:	b913      	cbnz	r3, 8004350 <_printf_float+0x1a8>
 800434a:	6822      	ldr	r2, [r4, #0]
 800434c:	07d2      	lsls	r2, r2, #31
 800434e:	d501      	bpl.n	8004354 <_printf_float+0x1ac>
 8004350:	3302      	adds	r3, #2
 8004352:	e7f4      	b.n	800433e <_printf_float+0x196>
 8004354:	2301      	movs	r3, #1
 8004356:	e7f2      	b.n	800433e <_printf_float+0x196>
 8004358:	f04f 0967 	mov.w	r9, #103	; 0x67
 800435c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800435e:	4299      	cmp	r1, r3
 8004360:	db05      	blt.n	800436e <_printf_float+0x1c6>
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	6121      	str	r1, [r4, #16]
 8004366:	07d8      	lsls	r0, r3, #31
 8004368:	d5ea      	bpl.n	8004340 <_printf_float+0x198>
 800436a:	1c4b      	adds	r3, r1, #1
 800436c:	e7e7      	b.n	800433e <_printf_float+0x196>
 800436e:	2900      	cmp	r1, #0
 8004370:	bfd4      	ite	le
 8004372:	f1c1 0202 	rsble	r2, r1, #2
 8004376:	2201      	movgt	r2, #1
 8004378:	4413      	add	r3, r2
 800437a:	e7e0      	b.n	800433e <_printf_float+0x196>
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	055a      	lsls	r2, r3, #21
 8004380:	d407      	bmi.n	8004392 <_printf_float+0x1ea>
 8004382:	6923      	ldr	r3, [r4, #16]
 8004384:	4642      	mov	r2, r8
 8004386:	4631      	mov	r1, r6
 8004388:	4628      	mov	r0, r5
 800438a:	47b8      	blx	r7
 800438c:	3001      	adds	r0, #1
 800438e:	d12b      	bne.n	80043e8 <_printf_float+0x240>
 8004390:	e765      	b.n	800425e <_printf_float+0xb6>
 8004392:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004396:	f240 80dc 	bls.w	8004552 <_printf_float+0x3aa>
 800439a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800439e:	2200      	movs	r2, #0
 80043a0:	2300      	movs	r3, #0
 80043a2:	f7fc fba9 	bl	8000af8 <__aeabi_dcmpeq>
 80043a6:	2800      	cmp	r0, #0
 80043a8:	d033      	beq.n	8004412 <_printf_float+0x26a>
 80043aa:	4a36      	ldr	r2, [pc, #216]	; (8004484 <_printf_float+0x2dc>)
 80043ac:	2301      	movs	r3, #1
 80043ae:	4631      	mov	r1, r6
 80043b0:	4628      	mov	r0, r5
 80043b2:	47b8      	blx	r7
 80043b4:	3001      	adds	r0, #1
 80043b6:	f43f af52 	beq.w	800425e <_printf_float+0xb6>
 80043ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043be:	429a      	cmp	r2, r3
 80043c0:	db02      	blt.n	80043c8 <_printf_float+0x220>
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	07d8      	lsls	r0, r3, #31
 80043c6:	d50f      	bpl.n	80043e8 <_printf_float+0x240>
 80043c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043cc:	4631      	mov	r1, r6
 80043ce:	4628      	mov	r0, r5
 80043d0:	47b8      	blx	r7
 80043d2:	3001      	adds	r0, #1
 80043d4:	f43f af43 	beq.w	800425e <_printf_float+0xb6>
 80043d8:	f04f 0800 	mov.w	r8, #0
 80043dc:	f104 091a 	add.w	r9, r4, #26
 80043e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043e2:	3b01      	subs	r3, #1
 80043e4:	4543      	cmp	r3, r8
 80043e6:	dc09      	bgt.n	80043fc <_printf_float+0x254>
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	079b      	lsls	r3, r3, #30
 80043ec:	f100 8101 	bmi.w	80045f2 <_printf_float+0x44a>
 80043f0:	68e0      	ldr	r0, [r4, #12]
 80043f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043f4:	4298      	cmp	r0, r3
 80043f6:	bfb8      	it	lt
 80043f8:	4618      	movlt	r0, r3
 80043fa:	e732      	b.n	8004262 <_printf_float+0xba>
 80043fc:	2301      	movs	r3, #1
 80043fe:	464a      	mov	r2, r9
 8004400:	4631      	mov	r1, r6
 8004402:	4628      	mov	r0, r5
 8004404:	47b8      	blx	r7
 8004406:	3001      	adds	r0, #1
 8004408:	f43f af29 	beq.w	800425e <_printf_float+0xb6>
 800440c:	f108 0801 	add.w	r8, r8, #1
 8004410:	e7e6      	b.n	80043e0 <_printf_float+0x238>
 8004412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004414:	2b00      	cmp	r3, #0
 8004416:	dc37      	bgt.n	8004488 <_printf_float+0x2e0>
 8004418:	4a1a      	ldr	r2, [pc, #104]	; (8004484 <_printf_float+0x2dc>)
 800441a:	2301      	movs	r3, #1
 800441c:	4631      	mov	r1, r6
 800441e:	4628      	mov	r0, r5
 8004420:	47b8      	blx	r7
 8004422:	3001      	adds	r0, #1
 8004424:	f43f af1b 	beq.w	800425e <_printf_float+0xb6>
 8004428:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800442c:	4313      	orrs	r3, r2
 800442e:	d102      	bne.n	8004436 <_printf_float+0x28e>
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	07d9      	lsls	r1, r3, #31
 8004434:	d5d8      	bpl.n	80043e8 <_printf_float+0x240>
 8004436:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800443a:	4631      	mov	r1, r6
 800443c:	4628      	mov	r0, r5
 800443e:	47b8      	blx	r7
 8004440:	3001      	adds	r0, #1
 8004442:	f43f af0c 	beq.w	800425e <_printf_float+0xb6>
 8004446:	f04f 0900 	mov.w	r9, #0
 800444a:	f104 0a1a 	add.w	sl, r4, #26
 800444e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004450:	425b      	negs	r3, r3
 8004452:	454b      	cmp	r3, r9
 8004454:	dc01      	bgt.n	800445a <_printf_float+0x2b2>
 8004456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004458:	e794      	b.n	8004384 <_printf_float+0x1dc>
 800445a:	2301      	movs	r3, #1
 800445c:	4652      	mov	r2, sl
 800445e:	4631      	mov	r1, r6
 8004460:	4628      	mov	r0, r5
 8004462:	47b8      	blx	r7
 8004464:	3001      	adds	r0, #1
 8004466:	f43f aefa 	beq.w	800425e <_printf_float+0xb6>
 800446a:	f109 0901 	add.w	r9, r9, #1
 800446e:	e7ee      	b.n	800444e <_printf_float+0x2a6>
 8004470:	7fefffff 	.word	0x7fefffff
 8004474:	0800a9bc 	.word	0x0800a9bc
 8004478:	0800a9c0 	.word	0x0800a9c0
 800447c:	0800a9c8 	.word	0x0800a9c8
 8004480:	0800a9c4 	.word	0x0800a9c4
 8004484:	0800adc1 	.word	0x0800adc1
 8004488:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800448a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800448c:	429a      	cmp	r2, r3
 800448e:	bfa8      	it	ge
 8004490:	461a      	movge	r2, r3
 8004492:	2a00      	cmp	r2, #0
 8004494:	4691      	mov	r9, r2
 8004496:	dc37      	bgt.n	8004508 <_printf_float+0x360>
 8004498:	f04f 0b00 	mov.w	fp, #0
 800449c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044a0:	f104 021a 	add.w	r2, r4, #26
 80044a4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80044a8:	ebaa 0309 	sub.w	r3, sl, r9
 80044ac:	455b      	cmp	r3, fp
 80044ae:	dc33      	bgt.n	8004518 <_printf_float+0x370>
 80044b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80044b4:	429a      	cmp	r2, r3
 80044b6:	db3b      	blt.n	8004530 <_printf_float+0x388>
 80044b8:	6823      	ldr	r3, [r4, #0]
 80044ba:	07da      	lsls	r2, r3, #31
 80044bc:	d438      	bmi.n	8004530 <_printf_float+0x388>
 80044be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80044c2:	eba3 020a 	sub.w	r2, r3, sl
 80044c6:	eba3 0901 	sub.w	r9, r3, r1
 80044ca:	4591      	cmp	r9, r2
 80044cc:	bfa8      	it	ge
 80044ce:	4691      	movge	r9, r2
 80044d0:	f1b9 0f00 	cmp.w	r9, #0
 80044d4:	dc34      	bgt.n	8004540 <_printf_float+0x398>
 80044d6:	f04f 0800 	mov.w	r8, #0
 80044da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044de:	f104 0a1a 	add.w	sl, r4, #26
 80044e2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80044e6:	1a9b      	subs	r3, r3, r2
 80044e8:	eba3 0309 	sub.w	r3, r3, r9
 80044ec:	4543      	cmp	r3, r8
 80044ee:	f77f af7b 	ble.w	80043e8 <_printf_float+0x240>
 80044f2:	2301      	movs	r3, #1
 80044f4:	4652      	mov	r2, sl
 80044f6:	4631      	mov	r1, r6
 80044f8:	4628      	mov	r0, r5
 80044fa:	47b8      	blx	r7
 80044fc:	3001      	adds	r0, #1
 80044fe:	f43f aeae 	beq.w	800425e <_printf_float+0xb6>
 8004502:	f108 0801 	add.w	r8, r8, #1
 8004506:	e7ec      	b.n	80044e2 <_printf_float+0x33a>
 8004508:	4613      	mov	r3, r2
 800450a:	4631      	mov	r1, r6
 800450c:	4642      	mov	r2, r8
 800450e:	4628      	mov	r0, r5
 8004510:	47b8      	blx	r7
 8004512:	3001      	adds	r0, #1
 8004514:	d1c0      	bne.n	8004498 <_printf_float+0x2f0>
 8004516:	e6a2      	b.n	800425e <_printf_float+0xb6>
 8004518:	2301      	movs	r3, #1
 800451a:	4631      	mov	r1, r6
 800451c:	4628      	mov	r0, r5
 800451e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004520:	47b8      	blx	r7
 8004522:	3001      	adds	r0, #1
 8004524:	f43f ae9b 	beq.w	800425e <_printf_float+0xb6>
 8004528:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800452a:	f10b 0b01 	add.w	fp, fp, #1
 800452e:	e7b9      	b.n	80044a4 <_printf_float+0x2fc>
 8004530:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004534:	4631      	mov	r1, r6
 8004536:	4628      	mov	r0, r5
 8004538:	47b8      	blx	r7
 800453a:	3001      	adds	r0, #1
 800453c:	d1bf      	bne.n	80044be <_printf_float+0x316>
 800453e:	e68e      	b.n	800425e <_printf_float+0xb6>
 8004540:	464b      	mov	r3, r9
 8004542:	eb08 020a 	add.w	r2, r8, sl
 8004546:	4631      	mov	r1, r6
 8004548:	4628      	mov	r0, r5
 800454a:	47b8      	blx	r7
 800454c:	3001      	adds	r0, #1
 800454e:	d1c2      	bne.n	80044d6 <_printf_float+0x32e>
 8004550:	e685      	b.n	800425e <_printf_float+0xb6>
 8004552:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004554:	2a01      	cmp	r2, #1
 8004556:	dc01      	bgt.n	800455c <_printf_float+0x3b4>
 8004558:	07db      	lsls	r3, r3, #31
 800455a:	d537      	bpl.n	80045cc <_printf_float+0x424>
 800455c:	2301      	movs	r3, #1
 800455e:	4642      	mov	r2, r8
 8004560:	4631      	mov	r1, r6
 8004562:	4628      	mov	r0, r5
 8004564:	47b8      	blx	r7
 8004566:	3001      	adds	r0, #1
 8004568:	f43f ae79 	beq.w	800425e <_printf_float+0xb6>
 800456c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004570:	4631      	mov	r1, r6
 8004572:	4628      	mov	r0, r5
 8004574:	47b8      	blx	r7
 8004576:	3001      	adds	r0, #1
 8004578:	f43f ae71 	beq.w	800425e <_printf_float+0xb6>
 800457c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004580:	2200      	movs	r2, #0
 8004582:	2300      	movs	r3, #0
 8004584:	f7fc fab8 	bl	8000af8 <__aeabi_dcmpeq>
 8004588:	b9d8      	cbnz	r0, 80045c2 <_printf_float+0x41a>
 800458a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800458c:	f108 0201 	add.w	r2, r8, #1
 8004590:	3b01      	subs	r3, #1
 8004592:	4631      	mov	r1, r6
 8004594:	4628      	mov	r0, r5
 8004596:	47b8      	blx	r7
 8004598:	3001      	adds	r0, #1
 800459a:	d10e      	bne.n	80045ba <_printf_float+0x412>
 800459c:	e65f      	b.n	800425e <_printf_float+0xb6>
 800459e:	2301      	movs	r3, #1
 80045a0:	464a      	mov	r2, r9
 80045a2:	4631      	mov	r1, r6
 80045a4:	4628      	mov	r0, r5
 80045a6:	47b8      	blx	r7
 80045a8:	3001      	adds	r0, #1
 80045aa:	f43f ae58 	beq.w	800425e <_printf_float+0xb6>
 80045ae:	f108 0801 	add.w	r8, r8, #1
 80045b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045b4:	3b01      	subs	r3, #1
 80045b6:	4543      	cmp	r3, r8
 80045b8:	dcf1      	bgt.n	800459e <_printf_float+0x3f6>
 80045ba:	4653      	mov	r3, sl
 80045bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80045c0:	e6e1      	b.n	8004386 <_printf_float+0x1de>
 80045c2:	f04f 0800 	mov.w	r8, #0
 80045c6:	f104 091a 	add.w	r9, r4, #26
 80045ca:	e7f2      	b.n	80045b2 <_printf_float+0x40a>
 80045cc:	2301      	movs	r3, #1
 80045ce:	4642      	mov	r2, r8
 80045d0:	e7df      	b.n	8004592 <_printf_float+0x3ea>
 80045d2:	2301      	movs	r3, #1
 80045d4:	464a      	mov	r2, r9
 80045d6:	4631      	mov	r1, r6
 80045d8:	4628      	mov	r0, r5
 80045da:	47b8      	blx	r7
 80045dc:	3001      	adds	r0, #1
 80045de:	f43f ae3e 	beq.w	800425e <_printf_float+0xb6>
 80045e2:	f108 0801 	add.w	r8, r8, #1
 80045e6:	68e3      	ldr	r3, [r4, #12]
 80045e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80045ea:	1a5b      	subs	r3, r3, r1
 80045ec:	4543      	cmp	r3, r8
 80045ee:	dcf0      	bgt.n	80045d2 <_printf_float+0x42a>
 80045f0:	e6fe      	b.n	80043f0 <_printf_float+0x248>
 80045f2:	f04f 0800 	mov.w	r8, #0
 80045f6:	f104 0919 	add.w	r9, r4, #25
 80045fa:	e7f4      	b.n	80045e6 <_printf_float+0x43e>

080045fc <_printf_common>:
 80045fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004600:	4616      	mov	r6, r2
 8004602:	4699      	mov	r9, r3
 8004604:	688a      	ldr	r2, [r1, #8]
 8004606:	690b      	ldr	r3, [r1, #16]
 8004608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800460c:	4293      	cmp	r3, r2
 800460e:	bfb8      	it	lt
 8004610:	4613      	movlt	r3, r2
 8004612:	6033      	str	r3, [r6, #0]
 8004614:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004618:	4607      	mov	r7, r0
 800461a:	460c      	mov	r4, r1
 800461c:	b10a      	cbz	r2, 8004622 <_printf_common+0x26>
 800461e:	3301      	adds	r3, #1
 8004620:	6033      	str	r3, [r6, #0]
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	0699      	lsls	r1, r3, #26
 8004626:	bf42      	ittt	mi
 8004628:	6833      	ldrmi	r3, [r6, #0]
 800462a:	3302      	addmi	r3, #2
 800462c:	6033      	strmi	r3, [r6, #0]
 800462e:	6825      	ldr	r5, [r4, #0]
 8004630:	f015 0506 	ands.w	r5, r5, #6
 8004634:	d106      	bne.n	8004644 <_printf_common+0x48>
 8004636:	f104 0a19 	add.w	sl, r4, #25
 800463a:	68e3      	ldr	r3, [r4, #12]
 800463c:	6832      	ldr	r2, [r6, #0]
 800463e:	1a9b      	subs	r3, r3, r2
 8004640:	42ab      	cmp	r3, r5
 8004642:	dc26      	bgt.n	8004692 <_printf_common+0x96>
 8004644:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004648:	1e13      	subs	r3, r2, #0
 800464a:	6822      	ldr	r2, [r4, #0]
 800464c:	bf18      	it	ne
 800464e:	2301      	movne	r3, #1
 8004650:	0692      	lsls	r2, r2, #26
 8004652:	d42b      	bmi.n	80046ac <_printf_common+0xb0>
 8004654:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004658:	4649      	mov	r1, r9
 800465a:	4638      	mov	r0, r7
 800465c:	47c0      	blx	r8
 800465e:	3001      	adds	r0, #1
 8004660:	d01e      	beq.n	80046a0 <_printf_common+0xa4>
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	68e5      	ldr	r5, [r4, #12]
 8004666:	6832      	ldr	r2, [r6, #0]
 8004668:	f003 0306 	and.w	r3, r3, #6
 800466c:	2b04      	cmp	r3, #4
 800466e:	bf08      	it	eq
 8004670:	1aad      	subeq	r5, r5, r2
 8004672:	68a3      	ldr	r3, [r4, #8]
 8004674:	6922      	ldr	r2, [r4, #16]
 8004676:	bf0c      	ite	eq
 8004678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800467c:	2500      	movne	r5, #0
 800467e:	4293      	cmp	r3, r2
 8004680:	bfc4      	itt	gt
 8004682:	1a9b      	subgt	r3, r3, r2
 8004684:	18ed      	addgt	r5, r5, r3
 8004686:	2600      	movs	r6, #0
 8004688:	341a      	adds	r4, #26
 800468a:	42b5      	cmp	r5, r6
 800468c:	d11a      	bne.n	80046c4 <_printf_common+0xc8>
 800468e:	2000      	movs	r0, #0
 8004690:	e008      	b.n	80046a4 <_printf_common+0xa8>
 8004692:	2301      	movs	r3, #1
 8004694:	4652      	mov	r2, sl
 8004696:	4649      	mov	r1, r9
 8004698:	4638      	mov	r0, r7
 800469a:	47c0      	blx	r8
 800469c:	3001      	adds	r0, #1
 800469e:	d103      	bne.n	80046a8 <_printf_common+0xac>
 80046a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046a8:	3501      	adds	r5, #1
 80046aa:	e7c6      	b.n	800463a <_printf_common+0x3e>
 80046ac:	18e1      	adds	r1, r4, r3
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	2030      	movs	r0, #48	; 0x30
 80046b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046b6:	4422      	add	r2, r4
 80046b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046c0:	3302      	adds	r3, #2
 80046c2:	e7c7      	b.n	8004654 <_printf_common+0x58>
 80046c4:	2301      	movs	r3, #1
 80046c6:	4622      	mov	r2, r4
 80046c8:	4649      	mov	r1, r9
 80046ca:	4638      	mov	r0, r7
 80046cc:	47c0      	blx	r8
 80046ce:	3001      	adds	r0, #1
 80046d0:	d0e6      	beq.n	80046a0 <_printf_common+0xa4>
 80046d2:	3601      	adds	r6, #1
 80046d4:	e7d9      	b.n	800468a <_printf_common+0x8e>
	...

080046d8 <_printf_i>:
 80046d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046dc:	7e0f      	ldrb	r7, [r1, #24]
 80046de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046e0:	2f78      	cmp	r7, #120	; 0x78
 80046e2:	4691      	mov	r9, r2
 80046e4:	4680      	mov	r8, r0
 80046e6:	460c      	mov	r4, r1
 80046e8:	469a      	mov	sl, r3
 80046ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046ee:	d807      	bhi.n	8004700 <_printf_i+0x28>
 80046f0:	2f62      	cmp	r7, #98	; 0x62
 80046f2:	d80a      	bhi.n	800470a <_printf_i+0x32>
 80046f4:	2f00      	cmp	r7, #0
 80046f6:	f000 80d8 	beq.w	80048aa <_printf_i+0x1d2>
 80046fa:	2f58      	cmp	r7, #88	; 0x58
 80046fc:	f000 80a3 	beq.w	8004846 <_printf_i+0x16e>
 8004700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004704:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004708:	e03a      	b.n	8004780 <_printf_i+0xa8>
 800470a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800470e:	2b15      	cmp	r3, #21
 8004710:	d8f6      	bhi.n	8004700 <_printf_i+0x28>
 8004712:	a101      	add	r1, pc, #4	; (adr r1, 8004718 <_printf_i+0x40>)
 8004714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004718:	08004771 	.word	0x08004771
 800471c:	08004785 	.word	0x08004785
 8004720:	08004701 	.word	0x08004701
 8004724:	08004701 	.word	0x08004701
 8004728:	08004701 	.word	0x08004701
 800472c:	08004701 	.word	0x08004701
 8004730:	08004785 	.word	0x08004785
 8004734:	08004701 	.word	0x08004701
 8004738:	08004701 	.word	0x08004701
 800473c:	08004701 	.word	0x08004701
 8004740:	08004701 	.word	0x08004701
 8004744:	08004891 	.word	0x08004891
 8004748:	080047b5 	.word	0x080047b5
 800474c:	08004873 	.word	0x08004873
 8004750:	08004701 	.word	0x08004701
 8004754:	08004701 	.word	0x08004701
 8004758:	080048b3 	.word	0x080048b3
 800475c:	08004701 	.word	0x08004701
 8004760:	080047b5 	.word	0x080047b5
 8004764:	08004701 	.word	0x08004701
 8004768:	08004701 	.word	0x08004701
 800476c:	0800487b 	.word	0x0800487b
 8004770:	682b      	ldr	r3, [r5, #0]
 8004772:	1d1a      	adds	r2, r3, #4
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	602a      	str	r2, [r5, #0]
 8004778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800477c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004780:	2301      	movs	r3, #1
 8004782:	e0a3      	b.n	80048cc <_printf_i+0x1f4>
 8004784:	6820      	ldr	r0, [r4, #0]
 8004786:	6829      	ldr	r1, [r5, #0]
 8004788:	0606      	lsls	r6, r0, #24
 800478a:	f101 0304 	add.w	r3, r1, #4
 800478e:	d50a      	bpl.n	80047a6 <_printf_i+0xce>
 8004790:	680e      	ldr	r6, [r1, #0]
 8004792:	602b      	str	r3, [r5, #0]
 8004794:	2e00      	cmp	r6, #0
 8004796:	da03      	bge.n	80047a0 <_printf_i+0xc8>
 8004798:	232d      	movs	r3, #45	; 0x2d
 800479a:	4276      	negs	r6, r6
 800479c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047a0:	485e      	ldr	r0, [pc, #376]	; (800491c <_printf_i+0x244>)
 80047a2:	230a      	movs	r3, #10
 80047a4:	e019      	b.n	80047da <_printf_i+0x102>
 80047a6:	680e      	ldr	r6, [r1, #0]
 80047a8:	602b      	str	r3, [r5, #0]
 80047aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047ae:	bf18      	it	ne
 80047b0:	b236      	sxthne	r6, r6
 80047b2:	e7ef      	b.n	8004794 <_printf_i+0xbc>
 80047b4:	682b      	ldr	r3, [r5, #0]
 80047b6:	6820      	ldr	r0, [r4, #0]
 80047b8:	1d19      	adds	r1, r3, #4
 80047ba:	6029      	str	r1, [r5, #0]
 80047bc:	0601      	lsls	r1, r0, #24
 80047be:	d501      	bpl.n	80047c4 <_printf_i+0xec>
 80047c0:	681e      	ldr	r6, [r3, #0]
 80047c2:	e002      	b.n	80047ca <_printf_i+0xf2>
 80047c4:	0646      	lsls	r6, r0, #25
 80047c6:	d5fb      	bpl.n	80047c0 <_printf_i+0xe8>
 80047c8:	881e      	ldrh	r6, [r3, #0]
 80047ca:	4854      	ldr	r0, [pc, #336]	; (800491c <_printf_i+0x244>)
 80047cc:	2f6f      	cmp	r7, #111	; 0x6f
 80047ce:	bf0c      	ite	eq
 80047d0:	2308      	moveq	r3, #8
 80047d2:	230a      	movne	r3, #10
 80047d4:	2100      	movs	r1, #0
 80047d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047da:	6865      	ldr	r5, [r4, #4]
 80047dc:	60a5      	str	r5, [r4, #8]
 80047de:	2d00      	cmp	r5, #0
 80047e0:	bfa2      	ittt	ge
 80047e2:	6821      	ldrge	r1, [r4, #0]
 80047e4:	f021 0104 	bicge.w	r1, r1, #4
 80047e8:	6021      	strge	r1, [r4, #0]
 80047ea:	b90e      	cbnz	r6, 80047f0 <_printf_i+0x118>
 80047ec:	2d00      	cmp	r5, #0
 80047ee:	d04d      	beq.n	800488c <_printf_i+0x1b4>
 80047f0:	4615      	mov	r5, r2
 80047f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80047f6:	fb03 6711 	mls	r7, r3, r1, r6
 80047fa:	5dc7      	ldrb	r7, [r0, r7]
 80047fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004800:	4637      	mov	r7, r6
 8004802:	42bb      	cmp	r3, r7
 8004804:	460e      	mov	r6, r1
 8004806:	d9f4      	bls.n	80047f2 <_printf_i+0x11a>
 8004808:	2b08      	cmp	r3, #8
 800480a:	d10b      	bne.n	8004824 <_printf_i+0x14c>
 800480c:	6823      	ldr	r3, [r4, #0]
 800480e:	07de      	lsls	r6, r3, #31
 8004810:	d508      	bpl.n	8004824 <_printf_i+0x14c>
 8004812:	6923      	ldr	r3, [r4, #16]
 8004814:	6861      	ldr	r1, [r4, #4]
 8004816:	4299      	cmp	r1, r3
 8004818:	bfde      	ittt	le
 800481a:	2330      	movle	r3, #48	; 0x30
 800481c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004820:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004824:	1b52      	subs	r2, r2, r5
 8004826:	6122      	str	r2, [r4, #16]
 8004828:	f8cd a000 	str.w	sl, [sp]
 800482c:	464b      	mov	r3, r9
 800482e:	aa03      	add	r2, sp, #12
 8004830:	4621      	mov	r1, r4
 8004832:	4640      	mov	r0, r8
 8004834:	f7ff fee2 	bl	80045fc <_printf_common>
 8004838:	3001      	adds	r0, #1
 800483a:	d14c      	bne.n	80048d6 <_printf_i+0x1fe>
 800483c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004840:	b004      	add	sp, #16
 8004842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004846:	4835      	ldr	r0, [pc, #212]	; (800491c <_printf_i+0x244>)
 8004848:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800484c:	6829      	ldr	r1, [r5, #0]
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	f851 6b04 	ldr.w	r6, [r1], #4
 8004854:	6029      	str	r1, [r5, #0]
 8004856:	061d      	lsls	r5, r3, #24
 8004858:	d514      	bpl.n	8004884 <_printf_i+0x1ac>
 800485a:	07df      	lsls	r7, r3, #31
 800485c:	bf44      	itt	mi
 800485e:	f043 0320 	orrmi.w	r3, r3, #32
 8004862:	6023      	strmi	r3, [r4, #0]
 8004864:	b91e      	cbnz	r6, 800486e <_printf_i+0x196>
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	f023 0320 	bic.w	r3, r3, #32
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	2310      	movs	r3, #16
 8004870:	e7b0      	b.n	80047d4 <_printf_i+0xfc>
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	f043 0320 	orr.w	r3, r3, #32
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	2378      	movs	r3, #120	; 0x78
 800487c:	4828      	ldr	r0, [pc, #160]	; (8004920 <_printf_i+0x248>)
 800487e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004882:	e7e3      	b.n	800484c <_printf_i+0x174>
 8004884:	0659      	lsls	r1, r3, #25
 8004886:	bf48      	it	mi
 8004888:	b2b6      	uxthmi	r6, r6
 800488a:	e7e6      	b.n	800485a <_printf_i+0x182>
 800488c:	4615      	mov	r5, r2
 800488e:	e7bb      	b.n	8004808 <_printf_i+0x130>
 8004890:	682b      	ldr	r3, [r5, #0]
 8004892:	6826      	ldr	r6, [r4, #0]
 8004894:	6961      	ldr	r1, [r4, #20]
 8004896:	1d18      	adds	r0, r3, #4
 8004898:	6028      	str	r0, [r5, #0]
 800489a:	0635      	lsls	r5, r6, #24
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	d501      	bpl.n	80048a4 <_printf_i+0x1cc>
 80048a0:	6019      	str	r1, [r3, #0]
 80048a2:	e002      	b.n	80048aa <_printf_i+0x1d2>
 80048a4:	0670      	lsls	r0, r6, #25
 80048a6:	d5fb      	bpl.n	80048a0 <_printf_i+0x1c8>
 80048a8:	8019      	strh	r1, [r3, #0]
 80048aa:	2300      	movs	r3, #0
 80048ac:	6123      	str	r3, [r4, #16]
 80048ae:	4615      	mov	r5, r2
 80048b0:	e7ba      	b.n	8004828 <_printf_i+0x150>
 80048b2:	682b      	ldr	r3, [r5, #0]
 80048b4:	1d1a      	adds	r2, r3, #4
 80048b6:	602a      	str	r2, [r5, #0]
 80048b8:	681d      	ldr	r5, [r3, #0]
 80048ba:	6862      	ldr	r2, [r4, #4]
 80048bc:	2100      	movs	r1, #0
 80048be:	4628      	mov	r0, r5
 80048c0:	f7fb fca6 	bl	8000210 <memchr>
 80048c4:	b108      	cbz	r0, 80048ca <_printf_i+0x1f2>
 80048c6:	1b40      	subs	r0, r0, r5
 80048c8:	6060      	str	r0, [r4, #4]
 80048ca:	6863      	ldr	r3, [r4, #4]
 80048cc:	6123      	str	r3, [r4, #16]
 80048ce:	2300      	movs	r3, #0
 80048d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048d4:	e7a8      	b.n	8004828 <_printf_i+0x150>
 80048d6:	6923      	ldr	r3, [r4, #16]
 80048d8:	462a      	mov	r2, r5
 80048da:	4649      	mov	r1, r9
 80048dc:	4640      	mov	r0, r8
 80048de:	47d0      	blx	sl
 80048e0:	3001      	adds	r0, #1
 80048e2:	d0ab      	beq.n	800483c <_printf_i+0x164>
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	079b      	lsls	r3, r3, #30
 80048e8:	d413      	bmi.n	8004912 <_printf_i+0x23a>
 80048ea:	68e0      	ldr	r0, [r4, #12]
 80048ec:	9b03      	ldr	r3, [sp, #12]
 80048ee:	4298      	cmp	r0, r3
 80048f0:	bfb8      	it	lt
 80048f2:	4618      	movlt	r0, r3
 80048f4:	e7a4      	b.n	8004840 <_printf_i+0x168>
 80048f6:	2301      	movs	r3, #1
 80048f8:	4632      	mov	r2, r6
 80048fa:	4649      	mov	r1, r9
 80048fc:	4640      	mov	r0, r8
 80048fe:	47d0      	blx	sl
 8004900:	3001      	adds	r0, #1
 8004902:	d09b      	beq.n	800483c <_printf_i+0x164>
 8004904:	3501      	adds	r5, #1
 8004906:	68e3      	ldr	r3, [r4, #12]
 8004908:	9903      	ldr	r1, [sp, #12]
 800490a:	1a5b      	subs	r3, r3, r1
 800490c:	42ab      	cmp	r3, r5
 800490e:	dcf2      	bgt.n	80048f6 <_printf_i+0x21e>
 8004910:	e7eb      	b.n	80048ea <_printf_i+0x212>
 8004912:	2500      	movs	r5, #0
 8004914:	f104 0619 	add.w	r6, r4, #25
 8004918:	e7f5      	b.n	8004906 <_printf_i+0x22e>
 800491a:	bf00      	nop
 800491c:	0800a9cc 	.word	0x0800a9cc
 8004920:	0800a9dd 	.word	0x0800a9dd

08004924 <_scanf_float>:
 8004924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004928:	b087      	sub	sp, #28
 800492a:	4617      	mov	r7, r2
 800492c:	9303      	str	r3, [sp, #12]
 800492e:	688b      	ldr	r3, [r1, #8]
 8004930:	1e5a      	subs	r2, r3, #1
 8004932:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004936:	bf83      	ittte	hi
 8004938:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800493c:	195b      	addhi	r3, r3, r5
 800493e:	9302      	strhi	r3, [sp, #8]
 8004940:	2300      	movls	r3, #0
 8004942:	bf86      	itte	hi
 8004944:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004948:	608b      	strhi	r3, [r1, #8]
 800494a:	9302      	strls	r3, [sp, #8]
 800494c:	680b      	ldr	r3, [r1, #0]
 800494e:	468b      	mov	fp, r1
 8004950:	2500      	movs	r5, #0
 8004952:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004956:	f84b 3b1c 	str.w	r3, [fp], #28
 800495a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800495e:	4680      	mov	r8, r0
 8004960:	460c      	mov	r4, r1
 8004962:	465e      	mov	r6, fp
 8004964:	46aa      	mov	sl, r5
 8004966:	46a9      	mov	r9, r5
 8004968:	9501      	str	r5, [sp, #4]
 800496a:	68a2      	ldr	r2, [r4, #8]
 800496c:	b152      	cbz	r2, 8004984 <_scanf_float+0x60>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b4e      	cmp	r3, #78	; 0x4e
 8004974:	d864      	bhi.n	8004a40 <_scanf_float+0x11c>
 8004976:	2b40      	cmp	r3, #64	; 0x40
 8004978:	d83c      	bhi.n	80049f4 <_scanf_float+0xd0>
 800497a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800497e:	b2c8      	uxtb	r0, r1
 8004980:	280e      	cmp	r0, #14
 8004982:	d93a      	bls.n	80049fa <_scanf_float+0xd6>
 8004984:	f1b9 0f00 	cmp.w	r9, #0
 8004988:	d003      	beq.n	8004992 <_scanf_float+0x6e>
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004990:	6023      	str	r3, [r4, #0]
 8004992:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004996:	f1ba 0f01 	cmp.w	sl, #1
 800499a:	f200 8113 	bhi.w	8004bc4 <_scanf_float+0x2a0>
 800499e:	455e      	cmp	r6, fp
 80049a0:	f200 8105 	bhi.w	8004bae <_scanf_float+0x28a>
 80049a4:	2501      	movs	r5, #1
 80049a6:	4628      	mov	r0, r5
 80049a8:	b007      	add	sp, #28
 80049aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80049b2:	2a0d      	cmp	r2, #13
 80049b4:	d8e6      	bhi.n	8004984 <_scanf_float+0x60>
 80049b6:	a101      	add	r1, pc, #4	; (adr r1, 80049bc <_scanf_float+0x98>)
 80049b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80049bc:	08004afb 	.word	0x08004afb
 80049c0:	08004985 	.word	0x08004985
 80049c4:	08004985 	.word	0x08004985
 80049c8:	08004985 	.word	0x08004985
 80049cc:	08004b5b 	.word	0x08004b5b
 80049d0:	08004b33 	.word	0x08004b33
 80049d4:	08004985 	.word	0x08004985
 80049d8:	08004985 	.word	0x08004985
 80049dc:	08004b09 	.word	0x08004b09
 80049e0:	08004985 	.word	0x08004985
 80049e4:	08004985 	.word	0x08004985
 80049e8:	08004985 	.word	0x08004985
 80049ec:	08004985 	.word	0x08004985
 80049f0:	08004ac1 	.word	0x08004ac1
 80049f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80049f8:	e7db      	b.n	80049b2 <_scanf_float+0x8e>
 80049fa:	290e      	cmp	r1, #14
 80049fc:	d8c2      	bhi.n	8004984 <_scanf_float+0x60>
 80049fe:	a001      	add	r0, pc, #4	; (adr r0, 8004a04 <_scanf_float+0xe0>)
 8004a00:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004a04:	08004ab3 	.word	0x08004ab3
 8004a08:	08004985 	.word	0x08004985
 8004a0c:	08004ab3 	.word	0x08004ab3
 8004a10:	08004b47 	.word	0x08004b47
 8004a14:	08004985 	.word	0x08004985
 8004a18:	08004a61 	.word	0x08004a61
 8004a1c:	08004a9d 	.word	0x08004a9d
 8004a20:	08004a9d 	.word	0x08004a9d
 8004a24:	08004a9d 	.word	0x08004a9d
 8004a28:	08004a9d 	.word	0x08004a9d
 8004a2c:	08004a9d 	.word	0x08004a9d
 8004a30:	08004a9d 	.word	0x08004a9d
 8004a34:	08004a9d 	.word	0x08004a9d
 8004a38:	08004a9d 	.word	0x08004a9d
 8004a3c:	08004a9d 	.word	0x08004a9d
 8004a40:	2b6e      	cmp	r3, #110	; 0x6e
 8004a42:	d809      	bhi.n	8004a58 <_scanf_float+0x134>
 8004a44:	2b60      	cmp	r3, #96	; 0x60
 8004a46:	d8b2      	bhi.n	80049ae <_scanf_float+0x8a>
 8004a48:	2b54      	cmp	r3, #84	; 0x54
 8004a4a:	d077      	beq.n	8004b3c <_scanf_float+0x218>
 8004a4c:	2b59      	cmp	r3, #89	; 0x59
 8004a4e:	d199      	bne.n	8004984 <_scanf_float+0x60>
 8004a50:	2d07      	cmp	r5, #7
 8004a52:	d197      	bne.n	8004984 <_scanf_float+0x60>
 8004a54:	2508      	movs	r5, #8
 8004a56:	e029      	b.n	8004aac <_scanf_float+0x188>
 8004a58:	2b74      	cmp	r3, #116	; 0x74
 8004a5a:	d06f      	beq.n	8004b3c <_scanf_float+0x218>
 8004a5c:	2b79      	cmp	r3, #121	; 0x79
 8004a5e:	e7f6      	b.n	8004a4e <_scanf_float+0x12a>
 8004a60:	6821      	ldr	r1, [r4, #0]
 8004a62:	05c8      	lsls	r0, r1, #23
 8004a64:	d51a      	bpl.n	8004a9c <_scanf_float+0x178>
 8004a66:	9b02      	ldr	r3, [sp, #8]
 8004a68:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004a6c:	6021      	str	r1, [r4, #0]
 8004a6e:	f109 0901 	add.w	r9, r9, #1
 8004a72:	b11b      	cbz	r3, 8004a7c <_scanf_float+0x158>
 8004a74:	3b01      	subs	r3, #1
 8004a76:	3201      	adds	r2, #1
 8004a78:	9302      	str	r3, [sp, #8]
 8004a7a:	60a2      	str	r2, [r4, #8]
 8004a7c:	68a3      	ldr	r3, [r4, #8]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	60a3      	str	r3, [r4, #8]
 8004a82:	6923      	ldr	r3, [r4, #16]
 8004a84:	3301      	adds	r3, #1
 8004a86:	6123      	str	r3, [r4, #16]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	607b      	str	r3, [r7, #4]
 8004a90:	f340 8084 	ble.w	8004b9c <_scanf_float+0x278>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	3301      	adds	r3, #1
 8004a98:	603b      	str	r3, [r7, #0]
 8004a9a:	e766      	b.n	800496a <_scanf_float+0x46>
 8004a9c:	eb1a 0f05 	cmn.w	sl, r5
 8004aa0:	f47f af70 	bne.w	8004984 <_scanf_float+0x60>
 8004aa4:	6822      	ldr	r2, [r4, #0]
 8004aa6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004aaa:	6022      	str	r2, [r4, #0]
 8004aac:	f806 3b01 	strb.w	r3, [r6], #1
 8004ab0:	e7e4      	b.n	8004a7c <_scanf_float+0x158>
 8004ab2:	6822      	ldr	r2, [r4, #0]
 8004ab4:	0610      	lsls	r0, r2, #24
 8004ab6:	f57f af65 	bpl.w	8004984 <_scanf_float+0x60>
 8004aba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004abe:	e7f4      	b.n	8004aaa <_scanf_float+0x186>
 8004ac0:	f1ba 0f00 	cmp.w	sl, #0
 8004ac4:	d10e      	bne.n	8004ae4 <_scanf_float+0x1c0>
 8004ac6:	f1b9 0f00 	cmp.w	r9, #0
 8004aca:	d10e      	bne.n	8004aea <_scanf_float+0x1c6>
 8004acc:	6822      	ldr	r2, [r4, #0]
 8004ace:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004ad2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004ad6:	d108      	bne.n	8004aea <_scanf_float+0x1c6>
 8004ad8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004adc:	6022      	str	r2, [r4, #0]
 8004ade:	f04f 0a01 	mov.w	sl, #1
 8004ae2:	e7e3      	b.n	8004aac <_scanf_float+0x188>
 8004ae4:	f1ba 0f02 	cmp.w	sl, #2
 8004ae8:	d055      	beq.n	8004b96 <_scanf_float+0x272>
 8004aea:	2d01      	cmp	r5, #1
 8004aec:	d002      	beq.n	8004af4 <_scanf_float+0x1d0>
 8004aee:	2d04      	cmp	r5, #4
 8004af0:	f47f af48 	bne.w	8004984 <_scanf_float+0x60>
 8004af4:	3501      	adds	r5, #1
 8004af6:	b2ed      	uxtb	r5, r5
 8004af8:	e7d8      	b.n	8004aac <_scanf_float+0x188>
 8004afa:	f1ba 0f01 	cmp.w	sl, #1
 8004afe:	f47f af41 	bne.w	8004984 <_scanf_float+0x60>
 8004b02:	f04f 0a02 	mov.w	sl, #2
 8004b06:	e7d1      	b.n	8004aac <_scanf_float+0x188>
 8004b08:	b97d      	cbnz	r5, 8004b2a <_scanf_float+0x206>
 8004b0a:	f1b9 0f00 	cmp.w	r9, #0
 8004b0e:	f47f af3c 	bne.w	800498a <_scanf_float+0x66>
 8004b12:	6822      	ldr	r2, [r4, #0]
 8004b14:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004b18:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004b1c:	f47f af39 	bne.w	8004992 <_scanf_float+0x6e>
 8004b20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004b24:	6022      	str	r2, [r4, #0]
 8004b26:	2501      	movs	r5, #1
 8004b28:	e7c0      	b.n	8004aac <_scanf_float+0x188>
 8004b2a:	2d03      	cmp	r5, #3
 8004b2c:	d0e2      	beq.n	8004af4 <_scanf_float+0x1d0>
 8004b2e:	2d05      	cmp	r5, #5
 8004b30:	e7de      	b.n	8004af0 <_scanf_float+0x1cc>
 8004b32:	2d02      	cmp	r5, #2
 8004b34:	f47f af26 	bne.w	8004984 <_scanf_float+0x60>
 8004b38:	2503      	movs	r5, #3
 8004b3a:	e7b7      	b.n	8004aac <_scanf_float+0x188>
 8004b3c:	2d06      	cmp	r5, #6
 8004b3e:	f47f af21 	bne.w	8004984 <_scanf_float+0x60>
 8004b42:	2507      	movs	r5, #7
 8004b44:	e7b2      	b.n	8004aac <_scanf_float+0x188>
 8004b46:	6822      	ldr	r2, [r4, #0]
 8004b48:	0591      	lsls	r1, r2, #22
 8004b4a:	f57f af1b 	bpl.w	8004984 <_scanf_float+0x60>
 8004b4e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004b52:	6022      	str	r2, [r4, #0]
 8004b54:	f8cd 9004 	str.w	r9, [sp, #4]
 8004b58:	e7a8      	b.n	8004aac <_scanf_float+0x188>
 8004b5a:	6822      	ldr	r2, [r4, #0]
 8004b5c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004b60:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004b64:	d006      	beq.n	8004b74 <_scanf_float+0x250>
 8004b66:	0550      	lsls	r0, r2, #21
 8004b68:	f57f af0c 	bpl.w	8004984 <_scanf_float+0x60>
 8004b6c:	f1b9 0f00 	cmp.w	r9, #0
 8004b70:	f43f af0f 	beq.w	8004992 <_scanf_float+0x6e>
 8004b74:	0591      	lsls	r1, r2, #22
 8004b76:	bf58      	it	pl
 8004b78:	9901      	ldrpl	r1, [sp, #4]
 8004b7a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004b7e:	bf58      	it	pl
 8004b80:	eba9 0101 	subpl.w	r1, r9, r1
 8004b84:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004b88:	bf58      	it	pl
 8004b8a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004b8e:	6022      	str	r2, [r4, #0]
 8004b90:	f04f 0900 	mov.w	r9, #0
 8004b94:	e78a      	b.n	8004aac <_scanf_float+0x188>
 8004b96:	f04f 0a03 	mov.w	sl, #3
 8004b9a:	e787      	b.n	8004aac <_scanf_float+0x188>
 8004b9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004ba0:	4639      	mov	r1, r7
 8004ba2:	4640      	mov	r0, r8
 8004ba4:	4798      	blx	r3
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	f43f aedf 	beq.w	800496a <_scanf_float+0x46>
 8004bac:	e6ea      	b.n	8004984 <_scanf_float+0x60>
 8004bae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004bb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004bb6:	463a      	mov	r2, r7
 8004bb8:	4640      	mov	r0, r8
 8004bba:	4798      	blx	r3
 8004bbc:	6923      	ldr	r3, [r4, #16]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	6123      	str	r3, [r4, #16]
 8004bc2:	e6ec      	b.n	800499e <_scanf_float+0x7a>
 8004bc4:	1e6b      	subs	r3, r5, #1
 8004bc6:	2b06      	cmp	r3, #6
 8004bc8:	d825      	bhi.n	8004c16 <_scanf_float+0x2f2>
 8004bca:	2d02      	cmp	r5, #2
 8004bcc:	d836      	bhi.n	8004c3c <_scanf_float+0x318>
 8004bce:	455e      	cmp	r6, fp
 8004bd0:	f67f aee8 	bls.w	80049a4 <_scanf_float+0x80>
 8004bd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004bd8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004bdc:	463a      	mov	r2, r7
 8004bde:	4640      	mov	r0, r8
 8004be0:	4798      	blx	r3
 8004be2:	6923      	ldr	r3, [r4, #16]
 8004be4:	3b01      	subs	r3, #1
 8004be6:	6123      	str	r3, [r4, #16]
 8004be8:	e7f1      	b.n	8004bce <_scanf_float+0x2aa>
 8004bea:	9802      	ldr	r0, [sp, #8]
 8004bec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004bf0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004bf4:	9002      	str	r0, [sp, #8]
 8004bf6:	463a      	mov	r2, r7
 8004bf8:	4640      	mov	r0, r8
 8004bfa:	4798      	blx	r3
 8004bfc:	6923      	ldr	r3, [r4, #16]
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	6123      	str	r3, [r4, #16]
 8004c02:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004c06:	fa5f fa8a 	uxtb.w	sl, sl
 8004c0a:	f1ba 0f02 	cmp.w	sl, #2
 8004c0e:	d1ec      	bne.n	8004bea <_scanf_float+0x2c6>
 8004c10:	3d03      	subs	r5, #3
 8004c12:	b2ed      	uxtb	r5, r5
 8004c14:	1b76      	subs	r6, r6, r5
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	05da      	lsls	r2, r3, #23
 8004c1a:	d52f      	bpl.n	8004c7c <_scanf_float+0x358>
 8004c1c:	055b      	lsls	r3, r3, #21
 8004c1e:	d510      	bpl.n	8004c42 <_scanf_float+0x31e>
 8004c20:	455e      	cmp	r6, fp
 8004c22:	f67f aebf 	bls.w	80049a4 <_scanf_float+0x80>
 8004c26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c2e:	463a      	mov	r2, r7
 8004c30:	4640      	mov	r0, r8
 8004c32:	4798      	blx	r3
 8004c34:	6923      	ldr	r3, [r4, #16]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	6123      	str	r3, [r4, #16]
 8004c3a:	e7f1      	b.n	8004c20 <_scanf_float+0x2fc>
 8004c3c:	46aa      	mov	sl, r5
 8004c3e:	9602      	str	r6, [sp, #8]
 8004c40:	e7df      	b.n	8004c02 <_scanf_float+0x2de>
 8004c42:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004c46:	6923      	ldr	r3, [r4, #16]
 8004c48:	2965      	cmp	r1, #101	; 0x65
 8004c4a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004c4e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8004c52:	6123      	str	r3, [r4, #16]
 8004c54:	d00c      	beq.n	8004c70 <_scanf_float+0x34c>
 8004c56:	2945      	cmp	r1, #69	; 0x45
 8004c58:	d00a      	beq.n	8004c70 <_scanf_float+0x34c>
 8004c5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c5e:	463a      	mov	r2, r7
 8004c60:	4640      	mov	r0, r8
 8004c62:	4798      	blx	r3
 8004c64:	6923      	ldr	r3, [r4, #16]
 8004c66:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	1eb5      	subs	r5, r6, #2
 8004c6e:	6123      	str	r3, [r4, #16]
 8004c70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c74:	463a      	mov	r2, r7
 8004c76:	4640      	mov	r0, r8
 8004c78:	4798      	blx	r3
 8004c7a:	462e      	mov	r6, r5
 8004c7c:	6825      	ldr	r5, [r4, #0]
 8004c7e:	f015 0510 	ands.w	r5, r5, #16
 8004c82:	d155      	bne.n	8004d30 <_scanf_float+0x40c>
 8004c84:	7035      	strb	r5, [r6, #0]
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c90:	d11b      	bne.n	8004cca <_scanf_float+0x3a6>
 8004c92:	9b01      	ldr	r3, [sp, #4]
 8004c94:	454b      	cmp	r3, r9
 8004c96:	eba3 0209 	sub.w	r2, r3, r9
 8004c9a:	d123      	bne.n	8004ce4 <_scanf_float+0x3c0>
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	4659      	mov	r1, fp
 8004ca0:	4640      	mov	r0, r8
 8004ca2:	f000 fee9 	bl	8005a78 <_strtod_r>
 8004ca6:	6822      	ldr	r2, [r4, #0]
 8004ca8:	9b03      	ldr	r3, [sp, #12]
 8004caa:	f012 0f02 	tst.w	r2, #2
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4606      	mov	r6, r0
 8004cb2:	460f      	mov	r7, r1
 8004cb4:	d021      	beq.n	8004cfa <_scanf_float+0x3d6>
 8004cb6:	1d1a      	adds	r2, r3, #4
 8004cb8:	9903      	ldr	r1, [sp, #12]
 8004cba:	600a      	str	r2, [r1, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	e9c3 6700 	strd	r6, r7, [r3]
 8004cc2:	68e3      	ldr	r3, [r4, #12]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	60e3      	str	r3, [r4, #12]
 8004cc8:	e66d      	b.n	80049a6 <_scanf_float+0x82>
 8004cca:	9b04      	ldr	r3, [sp, #16]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0e5      	beq.n	8004c9c <_scanf_float+0x378>
 8004cd0:	9905      	ldr	r1, [sp, #20]
 8004cd2:	230a      	movs	r3, #10
 8004cd4:	462a      	mov	r2, r5
 8004cd6:	3101      	adds	r1, #1
 8004cd8:	4640      	mov	r0, r8
 8004cda:	f000 ff4f 	bl	8005b7c <_strtol_r>
 8004cde:	9b04      	ldr	r3, [sp, #16]
 8004ce0:	9e05      	ldr	r6, [sp, #20]
 8004ce2:	1ac2      	subs	r2, r0, r3
 8004ce4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004ce8:	429e      	cmp	r6, r3
 8004cea:	bf28      	it	cs
 8004cec:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004cf0:	4910      	ldr	r1, [pc, #64]	; (8004d34 <_scanf_float+0x410>)
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	f000 f826 	bl	8004d44 <siprintf>
 8004cf8:	e7d0      	b.n	8004c9c <_scanf_float+0x378>
 8004cfa:	f012 0f04 	tst.w	r2, #4
 8004cfe:	f103 0204 	add.w	r2, r3, #4
 8004d02:	d1d9      	bne.n	8004cb8 <_scanf_float+0x394>
 8004d04:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004d08:	f8cc 2000 	str.w	r2, [ip]
 8004d0c:	f8d3 8000 	ldr.w	r8, [r3]
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	f7fb ff22 	bl	8000b5c <__aeabi_dcmpun>
 8004d18:	b128      	cbz	r0, 8004d26 <_scanf_float+0x402>
 8004d1a:	4807      	ldr	r0, [pc, #28]	; (8004d38 <_scanf_float+0x414>)
 8004d1c:	f000 f80e 	bl	8004d3c <nanf>
 8004d20:	f8c8 0000 	str.w	r0, [r8]
 8004d24:	e7cd      	b.n	8004cc2 <_scanf_float+0x39e>
 8004d26:	4630      	mov	r0, r6
 8004d28:	4639      	mov	r1, r7
 8004d2a:	f7fb ff75 	bl	8000c18 <__aeabi_d2f>
 8004d2e:	e7f7      	b.n	8004d20 <_scanf_float+0x3fc>
 8004d30:	2500      	movs	r5, #0
 8004d32:	e638      	b.n	80049a6 <_scanf_float+0x82>
 8004d34:	0800a9ee 	.word	0x0800a9ee
 8004d38:	0800ae13 	.word	0x0800ae13

08004d3c <nanf>:
 8004d3c:	4800      	ldr	r0, [pc, #0]	; (8004d40 <nanf+0x4>)
 8004d3e:	4770      	bx	lr
 8004d40:	7fc00000 	.word	0x7fc00000

08004d44 <siprintf>:
 8004d44:	b40e      	push	{r1, r2, r3}
 8004d46:	b500      	push	{lr}
 8004d48:	b09c      	sub	sp, #112	; 0x70
 8004d4a:	ab1d      	add	r3, sp, #116	; 0x74
 8004d4c:	9002      	str	r0, [sp, #8]
 8004d4e:	9006      	str	r0, [sp, #24]
 8004d50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d54:	4809      	ldr	r0, [pc, #36]	; (8004d7c <siprintf+0x38>)
 8004d56:	9107      	str	r1, [sp, #28]
 8004d58:	9104      	str	r1, [sp, #16]
 8004d5a:	4909      	ldr	r1, [pc, #36]	; (8004d80 <siprintf+0x3c>)
 8004d5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d60:	9105      	str	r1, [sp, #20]
 8004d62:	6800      	ldr	r0, [r0, #0]
 8004d64:	9301      	str	r3, [sp, #4]
 8004d66:	a902      	add	r1, sp, #8
 8004d68:	f002 ff50 	bl	8007c0c <_svfiprintf_r>
 8004d6c:	9b02      	ldr	r3, [sp, #8]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	701a      	strb	r2, [r3, #0]
 8004d72:	b01c      	add	sp, #112	; 0x70
 8004d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d78:	b003      	add	sp, #12
 8004d7a:	4770      	bx	lr
 8004d7c:	20000044 	.word	0x20000044
 8004d80:	ffff0208 	.word	0xffff0208

08004d84 <siscanf>:
 8004d84:	b40e      	push	{r1, r2, r3}
 8004d86:	b530      	push	{r4, r5, lr}
 8004d88:	b09c      	sub	sp, #112	; 0x70
 8004d8a:	ac1f      	add	r4, sp, #124	; 0x7c
 8004d8c:	f44f 7201 	mov.w	r2, #516	; 0x204
 8004d90:	f854 5b04 	ldr.w	r5, [r4], #4
 8004d94:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004d98:	9002      	str	r0, [sp, #8]
 8004d9a:	9006      	str	r0, [sp, #24]
 8004d9c:	f7fb fa2a 	bl	80001f4 <strlen>
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <siscanf+0x4c>)
 8004da2:	9003      	str	r0, [sp, #12]
 8004da4:	9007      	str	r0, [sp, #28]
 8004da6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004da8:	480a      	ldr	r0, [pc, #40]	; (8004dd4 <siscanf+0x50>)
 8004daa:	9401      	str	r4, [sp, #4]
 8004dac:	2300      	movs	r3, #0
 8004dae:	930f      	str	r3, [sp, #60]	; 0x3c
 8004db0:	9314      	str	r3, [sp, #80]	; 0x50
 8004db2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004db6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004dba:	462a      	mov	r2, r5
 8004dbc:	4623      	mov	r3, r4
 8004dbe:	a902      	add	r1, sp, #8
 8004dc0:	6800      	ldr	r0, [r0, #0]
 8004dc2:	f003 f87d 	bl	8007ec0 <__ssvfiscanf_r>
 8004dc6:	b01c      	add	sp, #112	; 0x70
 8004dc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004dcc:	b003      	add	sp, #12
 8004dce:	4770      	bx	lr
 8004dd0:	08004dfb 	.word	0x08004dfb
 8004dd4:	20000044 	.word	0x20000044

08004dd8 <__sread>:
 8004dd8:	b510      	push	{r4, lr}
 8004dda:	460c      	mov	r4, r1
 8004ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de0:	f003 fb38 	bl	8008454 <_read_r>
 8004de4:	2800      	cmp	r0, #0
 8004de6:	bfab      	itete	ge
 8004de8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004dea:	89a3      	ldrhlt	r3, [r4, #12]
 8004dec:	181b      	addge	r3, r3, r0
 8004dee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004df2:	bfac      	ite	ge
 8004df4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004df6:	81a3      	strhlt	r3, [r4, #12]
 8004df8:	bd10      	pop	{r4, pc}

08004dfa <__seofread>:
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	4770      	bx	lr

08004dfe <__swrite>:
 8004dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e02:	461f      	mov	r7, r3
 8004e04:	898b      	ldrh	r3, [r1, #12]
 8004e06:	05db      	lsls	r3, r3, #23
 8004e08:	4605      	mov	r5, r0
 8004e0a:	460c      	mov	r4, r1
 8004e0c:	4616      	mov	r6, r2
 8004e0e:	d505      	bpl.n	8004e1c <__swrite+0x1e>
 8004e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e14:	2302      	movs	r3, #2
 8004e16:	2200      	movs	r2, #0
 8004e18:	f002 f8bc 	bl	8006f94 <_lseek_r>
 8004e1c:	89a3      	ldrh	r3, [r4, #12]
 8004e1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e26:	81a3      	strh	r3, [r4, #12]
 8004e28:	4632      	mov	r2, r6
 8004e2a:	463b      	mov	r3, r7
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e32:	f000 bea5 	b.w	8005b80 <_write_r>

08004e36 <__sseek>:
 8004e36:	b510      	push	{r4, lr}
 8004e38:	460c      	mov	r4, r1
 8004e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e3e:	f002 f8a9 	bl	8006f94 <_lseek_r>
 8004e42:	1c43      	adds	r3, r0, #1
 8004e44:	89a3      	ldrh	r3, [r4, #12]
 8004e46:	bf15      	itete	ne
 8004e48:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e52:	81a3      	strheq	r3, [r4, #12]
 8004e54:	bf18      	it	ne
 8004e56:	81a3      	strhne	r3, [r4, #12]
 8004e58:	bd10      	pop	{r4, pc}

08004e5a <__sclose>:
 8004e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e5e:	f000 bea1 	b.w	8005ba4 <_close_r>

08004e62 <sulp>:
 8004e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e66:	460f      	mov	r7, r1
 8004e68:	4690      	mov	r8, r2
 8004e6a:	f002 fc39 	bl	80076e0 <__ulp>
 8004e6e:	4604      	mov	r4, r0
 8004e70:	460d      	mov	r5, r1
 8004e72:	f1b8 0f00 	cmp.w	r8, #0
 8004e76:	d011      	beq.n	8004e9c <sulp+0x3a>
 8004e78:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004e7c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	dd0b      	ble.n	8004e9c <sulp+0x3a>
 8004e84:	051b      	lsls	r3, r3, #20
 8004e86:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004e8a:	2400      	movs	r4, #0
 8004e8c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004e90:	4622      	mov	r2, r4
 8004e92:	462b      	mov	r3, r5
 8004e94:	f7fb fbc8 	bl	8000628 <__aeabi_dmul>
 8004e98:	4604      	mov	r4, r0
 8004e9a:	460d      	mov	r5, r1
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	4629      	mov	r1, r5
 8004ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ea4:	0000      	movs	r0, r0
	...

08004ea8 <_strtod_l>:
 8004ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eac:	b09f      	sub	sp, #124	; 0x7c
 8004eae:	469b      	mov	fp, r3
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	931a      	str	r3, [sp, #104]	; 0x68
 8004eb4:	4b9e      	ldr	r3, [pc, #632]	; (8005130 <_strtod_l+0x288>)
 8004eb6:	9215      	str	r2, [sp, #84]	; 0x54
 8004eb8:	681f      	ldr	r7, [r3, #0]
 8004eba:	4682      	mov	sl, r0
 8004ebc:	4638      	mov	r0, r7
 8004ebe:	460e      	mov	r6, r1
 8004ec0:	f7fb f998 	bl	80001f4 <strlen>
 8004ec4:	f04f 0800 	mov.w	r8, #0
 8004ec8:	4604      	mov	r4, r0
 8004eca:	f04f 0900 	mov.w	r9, #0
 8004ece:	9619      	str	r6, [sp, #100]	; 0x64
 8004ed0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ed2:	781a      	ldrb	r2, [r3, #0]
 8004ed4:	2a2b      	cmp	r2, #43	; 0x2b
 8004ed6:	d04c      	beq.n	8004f72 <_strtod_l+0xca>
 8004ed8:	d83a      	bhi.n	8004f50 <_strtod_l+0xa8>
 8004eda:	2a0d      	cmp	r2, #13
 8004edc:	d833      	bhi.n	8004f46 <_strtod_l+0x9e>
 8004ede:	2a08      	cmp	r2, #8
 8004ee0:	d833      	bhi.n	8004f4a <_strtod_l+0xa2>
 8004ee2:	2a00      	cmp	r2, #0
 8004ee4:	d03d      	beq.n	8004f62 <_strtod_l+0xba>
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	930a      	str	r3, [sp, #40]	; 0x28
 8004eea:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004eec:	782b      	ldrb	r3, [r5, #0]
 8004eee:	2b30      	cmp	r3, #48	; 0x30
 8004ef0:	f040 80aa 	bne.w	8005048 <_strtod_l+0x1a0>
 8004ef4:	786b      	ldrb	r3, [r5, #1]
 8004ef6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004efa:	2b58      	cmp	r3, #88	; 0x58
 8004efc:	d166      	bne.n	8004fcc <_strtod_l+0x124>
 8004efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f00:	9301      	str	r3, [sp, #4]
 8004f02:	ab1a      	add	r3, sp, #104	; 0x68
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	4a8b      	ldr	r2, [pc, #556]	; (8005134 <_strtod_l+0x28c>)
 8004f08:	f8cd b008 	str.w	fp, [sp, #8]
 8004f0c:	ab1b      	add	r3, sp, #108	; 0x6c
 8004f0e:	a919      	add	r1, sp, #100	; 0x64
 8004f10:	4650      	mov	r0, sl
 8004f12:	f001 fd3d 	bl	8006990 <__gethex>
 8004f16:	f010 0607 	ands.w	r6, r0, #7
 8004f1a:	4604      	mov	r4, r0
 8004f1c:	d005      	beq.n	8004f2a <_strtod_l+0x82>
 8004f1e:	2e06      	cmp	r6, #6
 8004f20:	d129      	bne.n	8004f76 <_strtod_l+0xce>
 8004f22:	3501      	adds	r5, #1
 8004f24:	2300      	movs	r3, #0
 8004f26:	9519      	str	r5, [sp, #100]	; 0x64
 8004f28:	930a      	str	r3, [sp, #40]	; 0x28
 8004f2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f040 858a 	bne.w	8005a46 <_strtod_l+0xb9e>
 8004f32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f34:	b1d3      	cbz	r3, 8004f6c <_strtod_l+0xc4>
 8004f36:	4642      	mov	r2, r8
 8004f38:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	4619      	mov	r1, r3
 8004f40:	b01f      	add	sp, #124	; 0x7c
 8004f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f46:	2a20      	cmp	r2, #32
 8004f48:	d1cd      	bne.n	8004ee6 <_strtod_l+0x3e>
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	9319      	str	r3, [sp, #100]	; 0x64
 8004f4e:	e7bf      	b.n	8004ed0 <_strtod_l+0x28>
 8004f50:	2a2d      	cmp	r2, #45	; 0x2d
 8004f52:	d1c8      	bne.n	8004ee6 <_strtod_l+0x3e>
 8004f54:	2201      	movs	r2, #1
 8004f56:	920a      	str	r2, [sp, #40]	; 0x28
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	9219      	str	r2, [sp, #100]	; 0x64
 8004f5c:	785b      	ldrb	r3, [r3, #1]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1c3      	bne.n	8004eea <_strtod_l+0x42>
 8004f62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f64:	9619      	str	r6, [sp, #100]	; 0x64
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f040 856b 	bne.w	8005a42 <_strtod_l+0xb9a>
 8004f6c:	4642      	mov	r2, r8
 8004f6e:	464b      	mov	r3, r9
 8004f70:	e7e4      	b.n	8004f3c <_strtod_l+0x94>
 8004f72:	2200      	movs	r2, #0
 8004f74:	e7ef      	b.n	8004f56 <_strtod_l+0xae>
 8004f76:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004f78:	b13a      	cbz	r2, 8004f8a <_strtod_l+0xe2>
 8004f7a:	2135      	movs	r1, #53	; 0x35
 8004f7c:	a81c      	add	r0, sp, #112	; 0x70
 8004f7e:	f002 fcb3 	bl	80078e8 <__copybits>
 8004f82:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004f84:	4650      	mov	r0, sl
 8004f86:	f002 f87f 	bl	8007088 <_Bfree>
 8004f8a:	3e01      	subs	r6, #1
 8004f8c:	2e04      	cmp	r6, #4
 8004f8e:	d806      	bhi.n	8004f9e <_strtod_l+0xf6>
 8004f90:	e8df f006 	tbb	[pc, r6]
 8004f94:	1714030a 	.word	0x1714030a
 8004f98:	0a          	.byte	0x0a
 8004f99:	00          	.byte	0x00
 8004f9a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8004f9e:	0721      	lsls	r1, r4, #28
 8004fa0:	d5c3      	bpl.n	8004f2a <_strtod_l+0x82>
 8004fa2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004fa6:	e7c0      	b.n	8004f2a <_strtod_l+0x82>
 8004fa8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8004fac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004fae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004fb2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004fb6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004fba:	e7f0      	b.n	8004f9e <_strtod_l+0xf6>
 8004fbc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005138 <_strtod_l+0x290>
 8004fc0:	e7ed      	b.n	8004f9e <_strtod_l+0xf6>
 8004fc2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004fc6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004fca:	e7e8      	b.n	8004f9e <_strtod_l+0xf6>
 8004fcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	9219      	str	r2, [sp, #100]	; 0x64
 8004fd2:	785b      	ldrb	r3, [r3, #1]
 8004fd4:	2b30      	cmp	r3, #48	; 0x30
 8004fd6:	d0f9      	beq.n	8004fcc <_strtod_l+0x124>
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0a6      	beq.n	8004f2a <_strtod_l+0x82>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	9307      	str	r3, [sp, #28]
 8004fe0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004fe2:	9308      	str	r3, [sp, #32]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004fea:	469b      	mov	fp, r3
 8004fec:	220a      	movs	r2, #10
 8004fee:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004ff0:	7805      	ldrb	r5, [r0, #0]
 8004ff2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004ff6:	b2d9      	uxtb	r1, r3
 8004ff8:	2909      	cmp	r1, #9
 8004ffa:	d927      	bls.n	800504c <_strtod_l+0x1a4>
 8004ffc:	4622      	mov	r2, r4
 8004ffe:	4639      	mov	r1, r7
 8005000:	f003 fa88 	bl	8008514 <strncmp>
 8005004:	2800      	cmp	r0, #0
 8005006:	d033      	beq.n	8005070 <_strtod_l+0x1c8>
 8005008:	2000      	movs	r0, #0
 800500a:	462a      	mov	r2, r5
 800500c:	465c      	mov	r4, fp
 800500e:	9004      	str	r0, [sp, #16]
 8005010:	4603      	mov	r3, r0
 8005012:	2a65      	cmp	r2, #101	; 0x65
 8005014:	d001      	beq.n	800501a <_strtod_l+0x172>
 8005016:	2a45      	cmp	r2, #69	; 0x45
 8005018:	d114      	bne.n	8005044 <_strtod_l+0x19c>
 800501a:	b91c      	cbnz	r4, 8005024 <_strtod_l+0x17c>
 800501c:	9a07      	ldr	r2, [sp, #28]
 800501e:	4302      	orrs	r2, r0
 8005020:	d09f      	beq.n	8004f62 <_strtod_l+0xba>
 8005022:	2400      	movs	r4, #0
 8005024:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005026:	1c72      	adds	r2, r6, #1
 8005028:	9219      	str	r2, [sp, #100]	; 0x64
 800502a:	7872      	ldrb	r2, [r6, #1]
 800502c:	2a2b      	cmp	r2, #43	; 0x2b
 800502e:	d079      	beq.n	8005124 <_strtod_l+0x27c>
 8005030:	2a2d      	cmp	r2, #45	; 0x2d
 8005032:	f000 8083 	beq.w	800513c <_strtod_l+0x294>
 8005036:	2700      	movs	r7, #0
 8005038:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800503c:	2909      	cmp	r1, #9
 800503e:	f240 8083 	bls.w	8005148 <_strtod_l+0x2a0>
 8005042:	9619      	str	r6, [sp, #100]	; 0x64
 8005044:	2500      	movs	r5, #0
 8005046:	e09f      	b.n	8005188 <_strtod_l+0x2e0>
 8005048:	2300      	movs	r3, #0
 800504a:	e7c8      	b.n	8004fde <_strtod_l+0x136>
 800504c:	f1bb 0f08 	cmp.w	fp, #8
 8005050:	bfd5      	itete	le
 8005052:	9906      	ldrle	r1, [sp, #24]
 8005054:	9905      	ldrgt	r1, [sp, #20]
 8005056:	fb02 3301 	mlale	r3, r2, r1, r3
 800505a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800505e:	f100 0001 	add.w	r0, r0, #1
 8005062:	bfd4      	ite	le
 8005064:	9306      	strle	r3, [sp, #24]
 8005066:	9305      	strgt	r3, [sp, #20]
 8005068:	f10b 0b01 	add.w	fp, fp, #1
 800506c:	9019      	str	r0, [sp, #100]	; 0x64
 800506e:	e7be      	b.n	8004fee <_strtod_l+0x146>
 8005070:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005072:	191a      	adds	r2, r3, r4
 8005074:	9219      	str	r2, [sp, #100]	; 0x64
 8005076:	5d1a      	ldrb	r2, [r3, r4]
 8005078:	f1bb 0f00 	cmp.w	fp, #0
 800507c:	d036      	beq.n	80050ec <_strtod_l+0x244>
 800507e:	9004      	str	r0, [sp, #16]
 8005080:	465c      	mov	r4, fp
 8005082:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005086:	2b09      	cmp	r3, #9
 8005088:	d912      	bls.n	80050b0 <_strtod_l+0x208>
 800508a:	2301      	movs	r3, #1
 800508c:	e7c1      	b.n	8005012 <_strtod_l+0x16a>
 800508e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	9219      	str	r2, [sp, #100]	; 0x64
 8005094:	785a      	ldrb	r2, [r3, #1]
 8005096:	3001      	adds	r0, #1
 8005098:	2a30      	cmp	r2, #48	; 0x30
 800509a:	d0f8      	beq.n	800508e <_strtod_l+0x1e6>
 800509c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	f200 84d5 	bhi.w	8005a50 <_strtod_l+0xba8>
 80050a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80050a8:	9004      	str	r0, [sp, #16]
 80050aa:	2000      	movs	r0, #0
 80050ac:	9308      	str	r3, [sp, #32]
 80050ae:	4604      	mov	r4, r0
 80050b0:	3a30      	subs	r2, #48	; 0x30
 80050b2:	f100 0301 	add.w	r3, r0, #1
 80050b6:	d013      	beq.n	80050e0 <_strtod_l+0x238>
 80050b8:	9904      	ldr	r1, [sp, #16]
 80050ba:	4419      	add	r1, r3
 80050bc:	9104      	str	r1, [sp, #16]
 80050be:	4623      	mov	r3, r4
 80050c0:	1905      	adds	r5, r0, r4
 80050c2:	210a      	movs	r1, #10
 80050c4:	42ab      	cmp	r3, r5
 80050c6:	d113      	bne.n	80050f0 <_strtod_l+0x248>
 80050c8:	1823      	adds	r3, r4, r0
 80050ca:	2b08      	cmp	r3, #8
 80050cc:	f104 0401 	add.w	r4, r4, #1
 80050d0:	4404      	add	r4, r0
 80050d2:	dc1b      	bgt.n	800510c <_strtod_l+0x264>
 80050d4:	9906      	ldr	r1, [sp, #24]
 80050d6:	230a      	movs	r3, #10
 80050d8:	fb03 2301 	mla	r3, r3, r1, r2
 80050dc:	9306      	str	r3, [sp, #24]
 80050de:	2300      	movs	r3, #0
 80050e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80050e2:	1c51      	adds	r1, r2, #1
 80050e4:	9119      	str	r1, [sp, #100]	; 0x64
 80050e6:	7852      	ldrb	r2, [r2, #1]
 80050e8:	4618      	mov	r0, r3
 80050ea:	e7ca      	b.n	8005082 <_strtod_l+0x1da>
 80050ec:	4658      	mov	r0, fp
 80050ee:	e7d3      	b.n	8005098 <_strtod_l+0x1f0>
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	dc04      	bgt.n	80050fe <_strtod_l+0x256>
 80050f4:	9f06      	ldr	r7, [sp, #24]
 80050f6:	434f      	muls	r7, r1
 80050f8:	9706      	str	r7, [sp, #24]
 80050fa:	3301      	adds	r3, #1
 80050fc:	e7e2      	b.n	80050c4 <_strtod_l+0x21c>
 80050fe:	1c5f      	adds	r7, r3, #1
 8005100:	2f10      	cmp	r7, #16
 8005102:	bfde      	ittt	le
 8005104:	9f05      	ldrle	r7, [sp, #20]
 8005106:	434f      	mulle	r7, r1
 8005108:	9705      	strle	r7, [sp, #20]
 800510a:	e7f6      	b.n	80050fa <_strtod_l+0x252>
 800510c:	2c10      	cmp	r4, #16
 800510e:	bfdf      	itttt	le
 8005110:	9905      	ldrle	r1, [sp, #20]
 8005112:	230a      	movle	r3, #10
 8005114:	fb03 2301 	mlale	r3, r3, r1, r2
 8005118:	9305      	strle	r3, [sp, #20]
 800511a:	e7e0      	b.n	80050de <_strtod_l+0x236>
 800511c:	2300      	movs	r3, #0
 800511e:	9304      	str	r3, [sp, #16]
 8005120:	2301      	movs	r3, #1
 8005122:	e77b      	b.n	800501c <_strtod_l+0x174>
 8005124:	2700      	movs	r7, #0
 8005126:	1cb2      	adds	r2, r6, #2
 8005128:	9219      	str	r2, [sp, #100]	; 0x64
 800512a:	78b2      	ldrb	r2, [r6, #2]
 800512c:	e784      	b.n	8005038 <_strtod_l+0x190>
 800512e:	bf00      	nop
 8005130:	0800ac40 	.word	0x0800ac40
 8005134:	0800a9f4 	.word	0x0800a9f4
 8005138:	7ff00000 	.word	0x7ff00000
 800513c:	2701      	movs	r7, #1
 800513e:	e7f2      	b.n	8005126 <_strtod_l+0x27e>
 8005140:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005142:	1c51      	adds	r1, r2, #1
 8005144:	9119      	str	r1, [sp, #100]	; 0x64
 8005146:	7852      	ldrb	r2, [r2, #1]
 8005148:	2a30      	cmp	r2, #48	; 0x30
 800514a:	d0f9      	beq.n	8005140 <_strtod_l+0x298>
 800514c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005150:	2908      	cmp	r1, #8
 8005152:	f63f af77 	bhi.w	8005044 <_strtod_l+0x19c>
 8005156:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800515a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800515c:	9209      	str	r2, [sp, #36]	; 0x24
 800515e:	f04f 0e0a 	mov.w	lr, #10
 8005162:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005164:	1c51      	adds	r1, r2, #1
 8005166:	9119      	str	r1, [sp, #100]	; 0x64
 8005168:	7852      	ldrb	r2, [r2, #1]
 800516a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800516e:	2d09      	cmp	r5, #9
 8005170:	d935      	bls.n	80051de <_strtod_l+0x336>
 8005172:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005174:	1b49      	subs	r1, r1, r5
 8005176:	2908      	cmp	r1, #8
 8005178:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800517c:	dc02      	bgt.n	8005184 <_strtod_l+0x2dc>
 800517e:	4565      	cmp	r5, ip
 8005180:	bfa8      	it	ge
 8005182:	4665      	movge	r5, ip
 8005184:	b107      	cbz	r7, 8005188 <_strtod_l+0x2e0>
 8005186:	426d      	negs	r5, r5
 8005188:	2c00      	cmp	r4, #0
 800518a:	d14c      	bne.n	8005226 <_strtod_l+0x37e>
 800518c:	9907      	ldr	r1, [sp, #28]
 800518e:	4301      	orrs	r1, r0
 8005190:	f47f aecb 	bne.w	8004f2a <_strtod_l+0x82>
 8005194:	2b00      	cmp	r3, #0
 8005196:	f47f aee4 	bne.w	8004f62 <_strtod_l+0xba>
 800519a:	2a69      	cmp	r2, #105	; 0x69
 800519c:	d026      	beq.n	80051ec <_strtod_l+0x344>
 800519e:	dc23      	bgt.n	80051e8 <_strtod_l+0x340>
 80051a0:	2a49      	cmp	r2, #73	; 0x49
 80051a2:	d023      	beq.n	80051ec <_strtod_l+0x344>
 80051a4:	2a4e      	cmp	r2, #78	; 0x4e
 80051a6:	f47f aedc 	bne.w	8004f62 <_strtod_l+0xba>
 80051aa:	499d      	ldr	r1, [pc, #628]	; (8005420 <_strtod_l+0x578>)
 80051ac:	a819      	add	r0, sp, #100	; 0x64
 80051ae:	f001 fe3d 	bl	8006e2c <__match>
 80051b2:	2800      	cmp	r0, #0
 80051b4:	f43f aed5 	beq.w	8004f62 <_strtod_l+0xba>
 80051b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b28      	cmp	r3, #40	; 0x28
 80051be:	d12c      	bne.n	800521a <_strtod_l+0x372>
 80051c0:	4998      	ldr	r1, [pc, #608]	; (8005424 <_strtod_l+0x57c>)
 80051c2:	aa1c      	add	r2, sp, #112	; 0x70
 80051c4:	a819      	add	r0, sp, #100	; 0x64
 80051c6:	f001 fe45 	bl	8006e54 <__hexnan>
 80051ca:	2805      	cmp	r0, #5
 80051cc:	d125      	bne.n	800521a <_strtod_l+0x372>
 80051ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80051d0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80051d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80051d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80051dc:	e6a5      	b.n	8004f2a <_strtod_l+0x82>
 80051de:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80051e2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80051e6:	e7bc      	b.n	8005162 <_strtod_l+0x2ba>
 80051e8:	2a6e      	cmp	r2, #110	; 0x6e
 80051ea:	e7dc      	b.n	80051a6 <_strtod_l+0x2fe>
 80051ec:	498e      	ldr	r1, [pc, #568]	; (8005428 <_strtod_l+0x580>)
 80051ee:	a819      	add	r0, sp, #100	; 0x64
 80051f0:	f001 fe1c 	bl	8006e2c <__match>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	f43f aeb4 	beq.w	8004f62 <_strtod_l+0xba>
 80051fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051fc:	498b      	ldr	r1, [pc, #556]	; (800542c <_strtod_l+0x584>)
 80051fe:	3b01      	subs	r3, #1
 8005200:	a819      	add	r0, sp, #100	; 0x64
 8005202:	9319      	str	r3, [sp, #100]	; 0x64
 8005204:	f001 fe12 	bl	8006e2c <__match>
 8005208:	b910      	cbnz	r0, 8005210 <_strtod_l+0x368>
 800520a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800520c:	3301      	adds	r3, #1
 800520e:	9319      	str	r3, [sp, #100]	; 0x64
 8005210:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8005430 <_strtod_l+0x588>
 8005214:	f04f 0800 	mov.w	r8, #0
 8005218:	e687      	b.n	8004f2a <_strtod_l+0x82>
 800521a:	4886      	ldr	r0, [pc, #536]	; (8005434 <_strtod_l+0x58c>)
 800521c:	f003 f92c 	bl	8008478 <nan>
 8005220:	4680      	mov	r8, r0
 8005222:	4689      	mov	r9, r1
 8005224:	e681      	b.n	8004f2a <_strtod_l+0x82>
 8005226:	9b04      	ldr	r3, [sp, #16]
 8005228:	9806      	ldr	r0, [sp, #24]
 800522a:	1aeb      	subs	r3, r5, r3
 800522c:	f1bb 0f00 	cmp.w	fp, #0
 8005230:	bf08      	it	eq
 8005232:	46a3      	moveq	fp, r4
 8005234:	2c10      	cmp	r4, #16
 8005236:	9307      	str	r3, [sp, #28]
 8005238:	4626      	mov	r6, r4
 800523a:	bfa8      	it	ge
 800523c:	2610      	movge	r6, #16
 800523e:	f7fb f979 	bl	8000534 <__aeabi_ui2d>
 8005242:	2c09      	cmp	r4, #9
 8005244:	4680      	mov	r8, r0
 8005246:	4689      	mov	r9, r1
 8005248:	dd13      	ble.n	8005272 <_strtod_l+0x3ca>
 800524a:	4b7b      	ldr	r3, [pc, #492]	; (8005438 <_strtod_l+0x590>)
 800524c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005250:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005254:	f7fb f9e8 	bl	8000628 <__aeabi_dmul>
 8005258:	4680      	mov	r8, r0
 800525a:	9805      	ldr	r0, [sp, #20]
 800525c:	4689      	mov	r9, r1
 800525e:	f7fb f969 	bl	8000534 <__aeabi_ui2d>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4640      	mov	r0, r8
 8005268:	4649      	mov	r1, r9
 800526a:	f7fb f827 	bl	80002bc <__adddf3>
 800526e:	4680      	mov	r8, r0
 8005270:	4689      	mov	r9, r1
 8005272:	2c0f      	cmp	r4, #15
 8005274:	dc36      	bgt.n	80052e4 <_strtod_l+0x43c>
 8005276:	9b07      	ldr	r3, [sp, #28]
 8005278:	2b00      	cmp	r3, #0
 800527a:	f43f ae56 	beq.w	8004f2a <_strtod_l+0x82>
 800527e:	dd22      	ble.n	80052c6 <_strtod_l+0x41e>
 8005280:	2b16      	cmp	r3, #22
 8005282:	dc09      	bgt.n	8005298 <_strtod_l+0x3f0>
 8005284:	496c      	ldr	r1, [pc, #432]	; (8005438 <_strtod_l+0x590>)
 8005286:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800528a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800528e:	4642      	mov	r2, r8
 8005290:	464b      	mov	r3, r9
 8005292:	f7fb f9c9 	bl	8000628 <__aeabi_dmul>
 8005296:	e7c3      	b.n	8005220 <_strtod_l+0x378>
 8005298:	9a07      	ldr	r2, [sp, #28]
 800529a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800529e:	4293      	cmp	r3, r2
 80052a0:	db20      	blt.n	80052e4 <_strtod_l+0x43c>
 80052a2:	4d65      	ldr	r5, [pc, #404]	; (8005438 <_strtod_l+0x590>)
 80052a4:	f1c4 040f 	rsb	r4, r4, #15
 80052a8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80052ac:	4642      	mov	r2, r8
 80052ae:	464b      	mov	r3, r9
 80052b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052b4:	f7fb f9b8 	bl	8000628 <__aeabi_dmul>
 80052b8:	9b07      	ldr	r3, [sp, #28]
 80052ba:	1b1c      	subs	r4, r3, r4
 80052bc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80052c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80052c4:	e7e5      	b.n	8005292 <_strtod_l+0x3ea>
 80052c6:	9b07      	ldr	r3, [sp, #28]
 80052c8:	3316      	adds	r3, #22
 80052ca:	db0b      	blt.n	80052e4 <_strtod_l+0x43c>
 80052cc:	9b04      	ldr	r3, [sp, #16]
 80052ce:	1b5d      	subs	r5, r3, r5
 80052d0:	4b59      	ldr	r3, [pc, #356]	; (8005438 <_strtod_l+0x590>)
 80052d2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80052d6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80052da:	4640      	mov	r0, r8
 80052dc:	4649      	mov	r1, r9
 80052de:	f7fb facd 	bl	800087c <__aeabi_ddiv>
 80052e2:	e79d      	b.n	8005220 <_strtod_l+0x378>
 80052e4:	9b07      	ldr	r3, [sp, #28]
 80052e6:	1ba6      	subs	r6, r4, r6
 80052e8:	441e      	add	r6, r3
 80052ea:	2e00      	cmp	r6, #0
 80052ec:	dd74      	ble.n	80053d8 <_strtod_l+0x530>
 80052ee:	f016 030f 	ands.w	r3, r6, #15
 80052f2:	d00a      	beq.n	800530a <_strtod_l+0x462>
 80052f4:	4950      	ldr	r1, [pc, #320]	; (8005438 <_strtod_l+0x590>)
 80052f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80052fa:	4642      	mov	r2, r8
 80052fc:	464b      	mov	r3, r9
 80052fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005302:	f7fb f991 	bl	8000628 <__aeabi_dmul>
 8005306:	4680      	mov	r8, r0
 8005308:	4689      	mov	r9, r1
 800530a:	f036 060f 	bics.w	r6, r6, #15
 800530e:	d052      	beq.n	80053b6 <_strtod_l+0x50e>
 8005310:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005314:	dd27      	ble.n	8005366 <_strtod_l+0x4be>
 8005316:	f04f 0b00 	mov.w	fp, #0
 800531a:	f8cd b010 	str.w	fp, [sp, #16]
 800531e:	f8cd b020 	str.w	fp, [sp, #32]
 8005322:	f8cd b018 	str.w	fp, [sp, #24]
 8005326:	2322      	movs	r3, #34	; 0x22
 8005328:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8005430 <_strtod_l+0x588>
 800532c:	f8ca 3000 	str.w	r3, [sl]
 8005330:	f04f 0800 	mov.w	r8, #0
 8005334:	9b08      	ldr	r3, [sp, #32]
 8005336:	2b00      	cmp	r3, #0
 8005338:	f43f adf7 	beq.w	8004f2a <_strtod_l+0x82>
 800533c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800533e:	4650      	mov	r0, sl
 8005340:	f001 fea2 	bl	8007088 <_Bfree>
 8005344:	9906      	ldr	r1, [sp, #24]
 8005346:	4650      	mov	r0, sl
 8005348:	f001 fe9e 	bl	8007088 <_Bfree>
 800534c:	9904      	ldr	r1, [sp, #16]
 800534e:	4650      	mov	r0, sl
 8005350:	f001 fe9a 	bl	8007088 <_Bfree>
 8005354:	9908      	ldr	r1, [sp, #32]
 8005356:	4650      	mov	r0, sl
 8005358:	f001 fe96 	bl	8007088 <_Bfree>
 800535c:	4659      	mov	r1, fp
 800535e:	4650      	mov	r0, sl
 8005360:	f001 fe92 	bl	8007088 <_Bfree>
 8005364:	e5e1      	b.n	8004f2a <_strtod_l+0x82>
 8005366:	4b35      	ldr	r3, [pc, #212]	; (800543c <_strtod_l+0x594>)
 8005368:	9305      	str	r3, [sp, #20]
 800536a:	2300      	movs	r3, #0
 800536c:	1136      	asrs	r6, r6, #4
 800536e:	4640      	mov	r0, r8
 8005370:	4649      	mov	r1, r9
 8005372:	461f      	mov	r7, r3
 8005374:	2e01      	cmp	r6, #1
 8005376:	dc21      	bgt.n	80053bc <_strtod_l+0x514>
 8005378:	b10b      	cbz	r3, 800537e <_strtod_l+0x4d6>
 800537a:	4680      	mov	r8, r0
 800537c:	4689      	mov	r9, r1
 800537e:	4b2f      	ldr	r3, [pc, #188]	; (800543c <_strtod_l+0x594>)
 8005380:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005384:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005388:	4642      	mov	r2, r8
 800538a:	464b      	mov	r3, r9
 800538c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005390:	f7fb f94a 	bl	8000628 <__aeabi_dmul>
 8005394:	4b26      	ldr	r3, [pc, #152]	; (8005430 <_strtod_l+0x588>)
 8005396:	460a      	mov	r2, r1
 8005398:	400b      	ands	r3, r1
 800539a:	4929      	ldr	r1, [pc, #164]	; (8005440 <_strtod_l+0x598>)
 800539c:	428b      	cmp	r3, r1
 800539e:	4680      	mov	r8, r0
 80053a0:	d8b9      	bhi.n	8005316 <_strtod_l+0x46e>
 80053a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80053a6:	428b      	cmp	r3, r1
 80053a8:	bf86      	itte	hi
 80053aa:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 8005444 <_strtod_l+0x59c>
 80053ae:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80053b2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80053b6:	2300      	movs	r3, #0
 80053b8:	9305      	str	r3, [sp, #20]
 80053ba:	e07f      	b.n	80054bc <_strtod_l+0x614>
 80053bc:	07f2      	lsls	r2, r6, #31
 80053be:	d505      	bpl.n	80053cc <_strtod_l+0x524>
 80053c0:	9b05      	ldr	r3, [sp, #20]
 80053c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c6:	f7fb f92f 	bl	8000628 <__aeabi_dmul>
 80053ca:	2301      	movs	r3, #1
 80053cc:	9a05      	ldr	r2, [sp, #20]
 80053ce:	3208      	adds	r2, #8
 80053d0:	3701      	adds	r7, #1
 80053d2:	1076      	asrs	r6, r6, #1
 80053d4:	9205      	str	r2, [sp, #20]
 80053d6:	e7cd      	b.n	8005374 <_strtod_l+0x4cc>
 80053d8:	d0ed      	beq.n	80053b6 <_strtod_l+0x50e>
 80053da:	4276      	negs	r6, r6
 80053dc:	f016 020f 	ands.w	r2, r6, #15
 80053e0:	d00a      	beq.n	80053f8 <_strtod_l+0x550>
 80053e2:	4b15      	ldr	r3, [pc, #84]	; (8005438 <_strtod_l+0x590>)
 80053e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053e8:	4640      	mov	r0, r8
 80053ea:	4649      	mov	r1, r9
 80053ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f0:	f7fb fa44 	bl	800087c <__aeabi_ddiv>
 80053f4:	4680      	mov	r8, r0
 80053f6:	4689      	mov	r9, r1
 80053f8:	1136      	asrs	r6, r6, #4
 80053fa:	d0dc      	beq.n	80053b6 <_strtod_l+0x50e>
 80053fc:	2e1f      	cmp	r6, #31
 80053fe:	dd23      	ble.n	8005448 <_strtod_l+0x5a0>
 8005400:	f04f 0b00 	mov.w	fp, #0
 8005404:	f8cd b010 	str.w	fp, [sp, #16]
 8005408:	f8cd b020 	str.w	fp, [sp, #32]
 800540c:	f8cd b018 	str.w	fp, [sp, #24]
 8005410:	2322      	movs	r3, #34	; 0x22
 8005412:	f04f 0800 	mov.w	r8, #0
 8005416:	f04f 0900 	mov.w	r9, #0
 800541a:	f8ca 3000 	str.w	r3, [sl]
 800541e:	e789      	b.n	8005334 <_strtod_l+0x48c>
 8005420:	0800a9c9 	.word	0x0800a9c9
 8005424:	0800aa08 	.word	0x0800aa08
 8005428:	0800a9c1 	.word	0x0800a9c1
 800542c:	0800ab4c 	.word	0x0800ab4c
 8005430:	7ff00000 	.word	0x7ff00000
 8005434:	0800ae13 	.word	0x0800ae13
 8005438:	0800acd8 	.word	0x0800acd8
 800543c:	0800acb0 	.word	0x0800acb0
 8005440:	7ca00000 	.word	0x7ca00000
 8005444:	7fefffff 	.word	0x7fefffff
 8005448:	f016 0310 	ands.w	r3, r6, #16
 800544c:	bf18      	it	ne
 800544e:	236a      	movne	r3, #106	; 0x6a
 8005450:	4fb1      	ldr	r7, [pc, #708]	; (8005718 <_strtod_l+0x870>)
 8005452:	9305      	str	r3, [sp, #20]
 8005454:	4640      	mov	r0, r8
 8005456:	4649      	mov	r1, r9
 8005458:	2300      	movs	r3, #0
 800545a:	07f2      	lsls	r2, r6, #31
 800545c:	d504      	bpl.n	8005468 <_strtod_l+0x5c0>
 800545e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005462:	f7fb f8e1 	bl	8000628 <__aeabi_dmul>
 8005466:	2301      	movs	r3, #1
 8005468:	1076      	asrs	r6, r6, #1
 800546a:	f107 0708 	add.w	r7, r7, #8
 800546e:	d1f4      	bne.n	800545a <_strtod_l+0x5b2>
 8005470:	b10b      	cbz	r3, 8005476 <_strtod_l+0x5ce>
 8005472:	4680      	mov	r8, r0
 8005474:	4689      	mov	r9, r1
 8005476:	9b05      	ldr	r3, [sp, #20]
 8005478:	b1c3      	cbz	r3, 80054ac <_strtod_l+0x604>
 800547a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800547e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005482:	2b00      	cmp	r3, #0
 8005484:	4649      	mov	r1, r9
 8005486:	dd11      	ble.n	80054ac <_strtod_l+0x604>
 8005488:	2b1f      	cmp	r3, #31
 800548a:	f340 8124 	ble.w	80056d6 <_strtod_l+0x82e>
 800548e:	2b34      	cmp	r3, #52	; 0x34
 8005490:	bfde      	ittt	le
 8005492:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005496:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800549a:	fa03 f202 	lslle.w	r2, r3, r2
 800549e:	f04f 0800 	mov.w	r8, #0
 80054a2:	bfcc      	ite	gt
 80054a4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80054a8:	ea02 0901 	andle.w	r9, r2, r1
 80054ac:	2200      	movs	r2, #0
 80054ae:	2300      	movs	r3, #0
 80054b0:	4640      	mov	r0, r8
 80054b2:	4649      	mov	r1, r9
 80054b4:	f7fb fb20 	bl	8000af8 <__aeabi_dcmpeq>
 80054b8:	2800      	cmp	r0, #0
 80054ba:	d1a1      	bne.n	8005400 <_strtod_l+0x558>
 80054bc:	9b06      	ldr	r3, [sp, #24]
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	9908      	ldr	r1, [sp, #32]
 80054c2:	4623      	mov	r3, r4
 80054c4:	465a      	mov	r2, fp
 80054c6:	4650      	mov	r0, sl
 80054c8:	f001 fe46 	bl	8007158 <__s2b>
 80054cc:	9008      	str	r0, [sp, #32]
 80054ce:	2800      	cmp	r0, #0
 80054d0:	f43f af21 	beq.w	8005316 <_strtod_l+0x46e>
 80054d4:	9b04      	ldr	r3, [sp, #16]
 80054d6:	1b5d      	subs	r5, r3, r5
 80054d8:	9b07      	ldr	r3, [sp, #28]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	bfb4      	ite	lt
 80054de:	462b      	movlt	r3, r5
 80054e0:	2300      	movge	r3, #0
 80054e2:	930e      	str	r3, [sp, #56]	; 0x38
 80054e4:	9b07      	ldr	r3, [sp, #28]
 80054e6:	f04f 0b00 	mov.w	fp, #0
 80054ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80054ee:	9314      	str	r3, [sp, #80]	; 0x50
 80054f0:	f8cd b010 	str.w	fp, [sp, #16]
 80054f4:	9b08      	ldr	r3, [sp, #32]
 80054f6:	4650      	mov	r0, sl
 80054f8:	6859      	ldr	r1, [r3, #4]
 80054fa:	f001 fd85 	bl	8007008 <_Balloc>
 80054fe:	9006      	str	r0, [sp, #24]
 8005500:	2800      	cmp	r0, #0
 8005502:	f43f af10 	beq.w	8005326 <_strtod_l+0x47e>
 8005506:	9b08      	ldr	r3, [sp, #32]
 8005508:	691a      	ldr	r2, [r3, #16]
 800550a:	3202      	adds	r2, #2
 800550c:	f103 010c 	add.w	r1, r3, #12
 8005510:	0092      	lsls	r2, r2, #2
 8005512:	300c      	adds	r0, #12
 8005514:	f001 fd6a 	bl	8006fec <memcpy>
 8005518:	ab1c      	add	r3, sp, #112	; 0x70
 800551a:	9301      	str	r3, [sp, #4]
 800551c:	ab1b      	add	r3, sp, #108	; 0x6c
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	4642      	mov	r2, r8
 8005522:	464b      	mov	r3, r9
 8005524:	4650      	mov	r0, sl
 8005526:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800552a:	f002 f953 	bl	80077d4 <__d2b>
 800552e:	901a      	str	r0, [sp, #104]	; 0x68
 8005530:	2800      	cmp	r0, #0
 8005532:	f43f aef8 	beq.w	8005326 <_strtod_l+0x47e>
 8005536:	2101      	movs	r1, #1
 8005538:	4650      	mov	r0, sl
 800553a:	f001 fea5 	bl	8007288 <__i2b>
 800553e:	9004      	str	r0, [sp, #16]
 8005540:	4603      	mov	r3, r0
 8005542:	2800      	cmp	r0, #0
 8005544:	f43f aeef 	beq.w	8005326 <_strtod_l+0x47e>
 8005548:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800554a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800554c:	2d00      	cmp	r5, #0
 800554e:	bfab      	itete	ge
 8005550:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005552:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8005554:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8005556:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005558:	bfac      	ite	ge
 800555a:	18ee      	addge	r6, r5, r3
 800555c:	1b5c      	sublt	r4, r3, r5
 800555e:	9b05      	ldr	r3, [sp, #20]
 8005560:	1aed      	subs	r5, r5, r3
 8005562:	4415      	add	r5, r2
 8005564:	4b6d      	ldr	r3, [pc, #436]	; (800571c <_strtod_l+0x874>)
 8005566:	3d01      	subs	r5, #1
 8005568:	429d      	cmp	r5, r3
 800556a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800556e:	f280 80c4 	bge.w	80056fa <_strtod_l+0x852>
 8005572:	1b5b      	subs	r3, r3, r5
 8005574:	2b1f      	cmp	r3, #31
 8005576:	eba2 0203 	sub.w	r2, r2, r3
 800557a:	f04f 0701 	mov.w	r7, #1
 800557e:	f300 80b1 	bgt.w	80056e4 <_strtod_l+0x83c>
 8005582:	fa07 f303 	lsl.w	r3, r7, r3
 8005586:	930f      	str	r3, [sp, #60]	; 0x3c
 8005588:	2500      	movs	r5, #0
 800558a:	18b7      	adds	r7, r6, r2
 800558c:	9b05      	ldr	r3, [sp, #20]
 800558e:	42be      	cmp	r6, r7
 8005590:	4414      	add	r4, r2
 8005592:	441c      	add	r4, r3
 8005594:	4633      	mov	r3, r6
 8005596:	bfa8      	it	ge
 8005598:	463b      	movge	r3, r7
 800559a:	42a3      	cmp	r3, r4
 800559c:	bfa8      	it	ge
 800559e:	4623      	movge	r3, r4
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	bfc2      	ittt	gt
 80055a4:	1aff      	subgt	r7, r7, r3
 80055a6:	1ae4      	subgt	r4, r4, r3
 80055a8:	1af6      	subgt	r6, r6, r3
 80055aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	dd17      	ble.n	80055e0 <_strtod_l+0x738>
 80055b0:	9904      	ldr	r1, [sp, #16]
 80055b2:	461a      	mov	r2, r3
 80055b4:	4650      	mov	r0, sl
 80055b6:	f001 ff25 	bl	8007404 <__pow5mult>
 80055ba:	9004      	str	r0, [sp, #16]
 80055bc:	2800      	cmp	r0, #0
 80055be:	f43f aeb2 	beq.w	8005326 <_strtod_l+0x47e>
 80055c2:	4601      	mov	r1, r0
 80055c4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80055c6:	4650      	mov	r0, sl
 80055c8:	f001 fe74 	bl	80072b4 <__multiply>
 80055cc:	9009      	str	r0, [sp, #36]	; 0x24
 80055ce:	2800      	cmp	r0, #0
 80055d0:	f43f aea9 	beq.w	8005326 <_strtod_l+0x47e>
 80055d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80055d6:	4650      	mov	r0, sl
 80055d8:	f001 fd56 	bl	8007088 <_Bfree>
 80055dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055de:	931a      	str	r3, [sp, #104]	; 0x68
 80055e0:	2f00      	cmp	r7, #0
 80055e2:	f300 808e 	bgt.w	8005702 <_strtod_l+0x85a>
 80055e6:	9b07      	ldr	r3, [sp, #28]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	dd08      	ble.n	80055fe <_strtod_l+0x756>
 80055ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80055ee:	9906      	ldr	r1, [sp, #24]
 80055f0:	4650      	mov	r0, sl
 80055f2:	f001 ff07 	bl	8007404 <__pow5mult>
 80055f6:	9006      	str	r0, [sp, #24]
 80055f8:	2800      	cmp	r0, #0
 80055fa:	f43f ae94 	beq.w	8005326 <_strtod_l+0x47e>
 80055fe:	2c00      	cmp	r4, #0
 8005600:	dd08      	ble.n	8005614 <_strtod_l+0x76c>
 8005602:	9906      	ldr	r1, [sp, #24]
 8005604:	4622      	mov	r2, r4
 8005606:	4650      	mov	r0, sl
 8005608:	f001 ff56 	bl	80074b8 <__lshift>
 800560c:	9006      	str	r0, [sp, #24]
 800560e:	2800      	cmp	r0, #0
 8005610:	f43f ae89 	beq.w	8005326 <_strtod_l+0x47e>
 8005614:	2e00      	cmp	r6, #0
 8005616:	dd08      	ble.n	800562a <_strtod_l+0x782>
 8005618:	9904      	ldr	r1, [sp, #16]
 800561a:	4632      	mov	r2, r6
 800561c:	4650      	mov	r0, sl
 800561e:	f001 ff4b 	bl	80074b8 <__lshift>
 8005622:	9004      	str	r0, [sp, #16]
 8005624:	2800      	cmp	r0, #0
 8005626:	f43f ae7e 	beq.w	8005326 <_strtod_l+0x47e>
 800562a:	9a06      	ldr	r2, [sp, #24]
 800562c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800562e:	4650      	mov	r0, sl
 8005630:	f001 ffce 	bl	80075d0 <__mdiff>
 8005634:	4683      	mov	fp, r0
 8005636:	2800      	cmp	r0, #0
 8005638:	f43f ae75 	beq.w	8005326 <_strtod_l+0x47e>
 800563c:	2400      	movs	r4, #0
 800563e:	68c3      	ldr	r3, [r0, #12]
 8005640:	9904      	ldr	r1, [sp, #16]
 8005642:	60c4      	str	r4, [r0, #12]
 8005644:	930b      	str	r3, [sp, #44]	; 0x2c
 8005646:	f001 ffa7 	bl	8007598 <__mcmp>
 800564a:	42a0      	cmp	r0, r4
 800564c:	da6c      	bge.n	8005728 <_strtod_l+0x880>
 800564e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005650:	ea53 0308 	orrs.w	r3, r3, r8
 8005654:	f040 8092 	bne.w	800577c <_strtod_l+0x8d4>
 8005658:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800565c:	2b00      	cmp	r3, #0
 800565e:	f040 808d 	bne.w	800577c <_strtod_l+0x8d4>
 8005662:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005666:	0d1b      	lsrs	r3, r3, #20
 8005668:	051b      	lsls	r3, r3, #20
 800566a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800566e:	f240 8085 	bls.w	800577c <_strtod_l+0x8d4>
 8005672:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005676:	b91b      	cbnz	r3, 8005680 <_strtod_l+0x7d8>
 8005678:	f8db 3010 	ldr.w	r3, [fp, #16]
 800567c:	2b01      	cmp	r3, #1
 800567e:	dd7d      	ble.n	800577c <_strtod_l+0x8d4>
 8005680:	4659      	mov	r1, fp
 8005682:	2201      	movs	r2, #1
 8005684:	4650      	mov	r0, sl
 8005686:	f001 ff17 	bl	80074b8 <__lshift>
 800568a:	9904      	ldr	r1, [sp, #16]
 800568c:	4683      	mov	fp, r0
 800568e:	f001 ff83 	bl	8007598 <__mcmp>
 8005692:	2800      	cmp	r0, #0
 8005694:	dd72      	ble.n	800577c <_strtod_l+0x8d4>
 8005696:	9905      	ldr	r1, [sp, #20]
 8005698:	4a21      	ldr	r2, [pc, #132]	; (8005720 <_strtod_l+0x878>)
 800569a:	464b      	mov	r3, r9
 800569c:	2900      	cmp	r1, #0
 800569e:	f000 808d 	beq.w	80057bc <_strtod_l+0x914>
 80056a2:	ea02 0109 	and.w	r1, r2, r9
 80056a6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80056aa:	f300 8087 	bgt.w	80057bc <_strtod_l+0x914>
 80056ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80056b2:	f77f aead 	ble.w	8005410 <_strtod_l+0x568>
 80056b6:	4b1b      	ldr	r3, [pc, #108]	; (8005724 <_strtod_l+0x87c>)
 80056b8:	4640      	mov	r0, r8
 80056ba:	4649      	mov	r1, r9
 80056bc:	2200      	movs	r2, #0
 80056be:	f7fa ffb3 	bl	8000628 <__aeabi_dmul>
 80056c2:	460b      	mov	r3, r1
 80056c4:	4303      	orrs	r3, r0
 80056c6:	bf08      	it	eq
 80056c8:	2322      	moveq	r3, #34	; 0x22
 80056ca:	4680      	mov	r8, r0
 80056cc:	4689      	mov	r9, r1
 80056ce:	bf08      	it	eq
 80056d0:	f8ca 3000 	streq.w	r3, [sl]
 80056d4:	e632      	b.n	800533c <_strtod_l+0x494>
 80056d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	ea03 0808 	and.w	r8, r3, r8
 80056e2:	e6e3      	b.n	80054ac <_strtod_l+0x604>
 80056e4:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80056e8:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80056ec:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80056f0:	35e2      	adds	r5, #226	; 0xe2
 80056f2:	fa07 f505 	lsl.w	r5, r7, r5
 80056f6:	970f      	str	r7, [sp, #60]	; 0x3c
 80056f8:	e747      	b.n	800558a <_strtod_l+0x6e2>
 80056fa:	2301      	movs	r3, #1
 80056fc:	2500      	movs	r5, #0
 80056fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005700:	e743      	b.n	800558a <_strtod_l+0x6e2>
 8005702:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005704:	463a      	mov	r2, r7
 8005706:	4650      	mov	r0, sl
 8005708:	f001 fed6 	bl	80074b8 <__lshift>
 800570c:	901a      	str	r0, [sp, #104]	; 0x68
 800570e:	2800      	cmp	r0, #0
 8005710:	f47f af69 	bne.w	80055e6 <_strtod_l+0x73e>
 8005714:	e607      	b.n	8005326 <_strtod_l+0x47e>
 8005716:	bf00      	nop
 8005718:	0800aa20 	.word	0x0800aa20
 800571c:	fffffc02 	.word	0xfffffc02
 8005720:	7ff00000 	.word	0x7ff00000
 8005724:	39500000 	.word	0x39500000
 8005728:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800572c:	d165      	bne.n	80057fa <_strtod_l+0x952>
 800572e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005730:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005734:	b35a      	cbz	r2, 800578e <_strtod_l+0x8e6>
 8005736:	4a9a      	ldr	r2, [pc, #616]	; (80059a0 <_strtod_l+0xaf8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d12b      	bne.n	8005794 <_strtod_l+0x8ec>
 800573c:	9b05      	ldr	r3, [sp, #20]
 800573e:	4641      	mov	r1, r8
 8005740:	b303      	cbz	r3, 8005784 <_strtod_l+0x8dc>
 8005742:	4b98      	ldr	r3, [pc, #608]	; (80059a4 <_strtod_l+0xafc>)
 8005744:	464a      	mov	r2, r9
 8005746:	4013      	ands	r3, r2
 8005748:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800574c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005750:	d81b      	bhi.n	800578a <_strtod_l+0x8e2>
 8005752:	0d1b      	lsrs	r3, r3, #20
 8005754:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005758:	fa02 f303 	lsl.w	r3, r2, r3
 800575c:	4299      	cmp	r1, r3
 800575e:	d119      	bne.n	8005794 <_strtod_l+0x8ec>
 8005760:	4b91      	ldr	r3, [pc, #580]	; (80059a8 <_strtod_l+0xb00>)
 8005762:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005764:	429a      	cmp	r2, r3
 8005766:	d102      	bne.n	800576e <_strtod_l+0x8c6>
 8005768:	3101      	adds	r1, #1
 800576a:	f43f addc 	beq.w	8005326 <_strtod_l+0x47e>
 800576e:	4b8d      	ldr	r3, [pc, #564]	; (80059a4 <_strtod_l+0xafc>)
 8005770:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005772:	401a      	ands	r2, r3
 8005774:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005778:	f04f 0800 	mov.w	r8, #0
 800577c:	9b05      	ldr	r3, [sp, #20]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d199      	bne.n	80056b6 <_strtod_l+0x80e>
 8005782:	e5db      	b.n	800533c <_strtod_l+0x494>
 8005784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005788:	e7e8      	b.n	800575c <_strtod_l+0x8b4>
 800578a:	4613      	mov	r3, r2
 800578c:	e7e6      	b.n	800575c <_strtod_l+0x8b4>
 800578e:	ea53 0308 	orrs.w	r3, r3, r8
 8005792:	d080      	beq.n	8005696 <_strtod_l+0x7ee>
 8005794:	b1e5      	cbz	r5, 80057d0 <_strtod_l+0x928>
 8005796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005798:	421d      	tst	r5, r3
 800579a:	d0ef      	beq.n	800577c <_strtod_l+0x8d4>
 800579c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800579e:	9a05      	ldr	r2, [sp, #20]
 80057a0:	4640      	mov	r0, r8
 80057a2:	4649      	mov	r1, r9
 80057a4:	b1c3      	cbz	r3, 80057d8 <_strtod_l+0x930>
 80057a6:	f7ff fb5c 	bl	8004e62 <sulp>
 80057aa:	4602      	mov	r2, r0
 80057ac:	460b      	mov	r3, r1
 80057ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057b2:	f7fa fd83 	bl	80002bc <__adddf3>
 80057b6:	4680      	mov	r8, r0
 80057b8:	4689      	mov	r9, r1
 80057ba:	e7df      	b.n	800577c <_strtod_l+0x8d4>
 80057bc:	4013      	ands	r3, r2
 80057be:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80057c2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80057c6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80057ca:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80057ce:	e7d5      	b.n	800577c <_strtod_l+0x8d4>
 80057d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057d2:	ea13 0f08 	tst.w	r3, r8
 80057d6:	e7e0      	b.n	800579a <_strtod_l+0x8f2>
 80057d8:	f7ff fb43 	bl	8004e62 <sulp>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057e4:	f7fa fd68 	bl	80002b8 <__aeabi_dsub>
 80057e8:	2200      	movs	r2, #0
 80057ea:	2300      	movs	r3, #0
 80057ec:	4680      	mov	r8, r0
 80057ee:	4689      	mov	r9, r1
 80057f0:	f7fb f982 	bl	8000af8 <__aeabi_dcmpeq>
 80057f4:	2800      	cmp	r0, #0
 80057f6:	d0c1      	beq.n	800577c <_strtod_l+0x8d4>
 80057f8:	e60a      	b.n	8005410 <_strtod_l+0x568>
 80057fa:	9904      	ldr	r1, [sp, #16]
 80057fc:	4658      	mov	r0, fp
 80057fe:	f002 f845 	bl	800788c <__ratio>
 8005802:	2200      	movs	r2, #0
 8005804:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005808:	4606      	mov	r6, r0
 800580a:	460f      	mov	r7, r1
 800580c:	f7fb f988 	bl	8000b20 <__aeabi_dcmple>
 8005810:	2800      	cmp	r0, #0
 8005812:	d070      	beq.n	80058f6 <_strtod_l+0xa4e>
 8005814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005816:	2b00      	cmp	r3, #0
 8005818:	d042      	beq.n	80058a0 <_strtod_l+0x9f8>
 800581a:	4f64      	ldr	r7, [pc, #400]	; (80059ac <_strtod_l+0xb04>)
 800581c:	2600      	movs	r6, #0
 800581e:	4d63      	ldr	r5, [pc, #396]	; (80059ac <_strtod_l+0xb04>)
 8005820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005822:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005826:	0d1b      	lsrs	r3, r3, #20
 8005828:	051b      	lsls	r3, r3, #20
 800582a:	930f      	str	r3, [sp, #60]	; 0x3c
 800582c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800582e:	4b60      	ldr	r3, [pc, #384]	; (80059b0 <_strtod_l+0xb08>)
 8005830:	429a      	cmp	r2, r3
 8005832:	f040 80c5 	bne.w	80059c0 <_strtod_l+0xb18>
 8005836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005838:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800583c:	4640      	mov	r0, r8
 800583e:	4649      	mov	r1, r9
 8005840:	f001 ff4e 	bl	80076e0 <__ulp>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	4630      	mov	r0, r6
 800584a:	4639      	mov	r1, r7
 800584c:	f7fa feec 	bl	8000628 <__aeabi_dmul>
 8005850:	4642      	mov	r2, r8
 8005852:	464b      	mov	r3, r9
 8005854:	f7fa fd32 	bl	80002bc <__adddf3>
 8005858:	460b      	mov	r3, r1
 800585a:	4952      	ldr	r1, [pc, #328]	; (80059a4 <_strtod_l+0xafc>)
 800585c:	4a55      	ldr	r2, [pc, #340]	; (80059b4 <_strtod_l+0xb0c>)
 800585e:	4019      	ands	r1, r3
 8005860:	4291      	cmp	r1, r2
 8005862:	4680      	mov	r8, r0
 8005864:	d95d      	bls.n	8005922 <_strtod_l+0xa7a>
 8005866:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005868:	4b4f      	ldr	r3, [pc, #316]	; (80059a8 <_strtod_l+0xb00>)
 800586a:	429a      	cmp	r2, r3
 800586c:	d103      	bne.n	8005876 <_strtod_l+0x9ce>
 800586e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005870:	3301      	adds	r3, #1
 8005872:	f43f ad58 	beq.w	8005326 <_strtod_l+0x47e>
 8005876:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80059a8 <_strtod_l+0xb00>
 800587a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800587e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005880:	4650      	mov	r0, sl
 8005882:	f001 fc01 	bl	8007088 <_Bfree>
 8005886:	9906      	ldr	r1, [sp, #24]
 8005888:	4650      	mov	r0, sl
 800588a:	f001 fbfd 	bl	8007088 <_Bfree>
 800588e:	9904      	ldr	r1, [sp, #16]
 8005890:	4650      	mov	r0, sl
 8005892:	f001 fbf9 	bl	8007088 <_Bfree>
 8005896:	4659      	mov	r1, fp
 8005898:	4650      	mov	r0, sl
 800589a:	f001 fbf5 	bl	8007088 <_Bfree>
 800589e:	e629      	b.n	80054f4 <_strtod_l+0x64c>
 80058a0:	f1b8 0f00 	cmp.w	r8, #0
 80058a4:	d119      	bne.n	80058da <_strtod_l+0xa32>
 80058a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058ac:	b9e3      	cbnz	r3, 80058e8 <_strtod_l+0xa40>
 80058ae:	4b3f      	ldr	r3, [pc, #252]	; (80059ac <_strtod_l+0xb04>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	4630      	mov	r0, r6
 80058b4:	4639      	mov	r1, r7
 80058b6:	f7fb f929 	bl	8000b0c <__aeabi_dcmplt>
 80058ba:	b9c8      	cbnz	r0, 80058f0 <_strtod_l+0xa48>
 80058bc:	4b3e      	ldr	r3, [pc, #248]	; (80059b8 <_strtod_l+0xb10>)
 80058be:	2200      	movs	r2, #0
 80058c0:	4630      	mov	r0, r6
 80058c2:	4639      	mov	r1, r7
 80058c4:	f7fa feb0 	bl	8000628 <__aeabi_dmul>
 80058c8:	4604      	mov	r4, r0
 80058ca:	460d      	mov	r5, r1
 80058cc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80058d0:	9416      	str	r4, [sp, #88]	; 0x58
 80058d2:	9317      	str	r3, [sp, #92]	; 0x5c
 80058d4:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80058d8:	e7a2      	b.n	8005820 <_strtod_l+0x978>
 80058da:	f1b8 0f01 	cmp.w	r8, #1
 80058de:	d103      	bne.n	80058e8 <_strtod_l+0xa40>
 80058e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f43f ad94 	beq.w	8005410 <_strtod_l+0x568>
 80058e8:	4f34      	ldr	r7, [pc, #208]	; (80059bc <_strtod_l+0xb14>)
 80058ea:	2600      	movs	r6, #0
 80058ec:	2400      	movs	r4, #0
 80058ee:	e796      	b.n	800581e <_strtod_l+0x976>
 80058f0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80058f2:	4d31      	ldr	r5, [pc, #196]	; (80059b8 <_strtod_l+0xb10>)
 80058f4:	e7ea      	b.n	80058cc <_strtod_l+0xa24>
 80058f6:	4b30      	ldr	r3, [pc, #192]	; (80059b8 <_strtod_l+0xb10>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	4630      	mov	r0, r6
 80058fc:	4639      	mov	r1, r7
 80058fe:	f7fa fe93 	bl	8000628 <__aeabi_dmul>
 8005902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005904:	4604      	mov	r4, r0
 8005906:	460d      	mov	r5, r1
 8005908:	b933      	cbnz	r3, 8005918 <_strtod_l+0xa70>
 800590a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800590e:	9010      	str	r0, [sp, #64]	; 0x40
 8005910:	9311      	str	r3, [sp, #68]	; 0x44
 8005912:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005916:	e783      	b.n	8005820 <_strtod_l+0x978>
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005920:	e7f7      	b.n	8005912 <_strtod_l+0xa6a>
 8005922:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005926:	9b05      	ldr	r3, [sp, #20]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1a8      	bne.n	800587e <_strtod_l+0x9d6>
 800592c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005930:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005932:	0d1b      	lsrs	r3, r3, #20
 8005934:	051b      	lsls	r3, r3, #20
 8005936:	429a      	cmp	r2, r3
 8005938:	d1a1      	bne.n	800587e <_strtod_l+0x9d6>
 800593a:	4620      	mov	r0, r4
 800593c:	4629      	mov	r1, r5
 800593e:	f7fb fc19 	bl	8001174 <__aeabi_d2lz>
 8005942:	f7fa fe43 	bl	80005cc <__aeabi_l2d>
 8005946:	4602      	mov	r2, r0
 8005948:	460b      	mov	r3, r1
 800594a:	4620      	mov	r0, r4
 800594c:	4629      	mov	r1, r5
 800594e:	f7fa fcb3 	bl	80002b8 <__aeabi_dsub>
 8005952:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005954:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005958:	ea43 0308 	orr.w	r3, r3, r8
 800595c:	4313      	orrs	r3, r2
 800595e:	4604      	mov	r4, r0
 8005960:	460d      	mov	r5, r1
 8005962:	d068      	beq.n	8005a36 <_strtod_l+0xb8e>
 8005964:	a30a      	add	r3, pc, #40	; (adr r3, 8005990 <_strtod_l+0xae8>)
 8005966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596a:	f7fb f8cf 	bl	8000b0c <__aeabi_dcmplt>
 800596e:	2800      	cmp	r0, #0
 8005970:	f47f ace4 	bne.w	800533c <_strtod_l+0x494>
 8005974:	a308      	add	r3, pc, #32	; (adr r3, 8005998 <_strtod_l+0xaf0>)
 8005976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597a:	4620      	mov	r0, r4
 800597c:	4629      	mov	r1, r5
 800597e:	f7fb f8e3 	bl	8000b48 <__aeabi_dcmpgt>
 8005982:	2800      	cmp	r0, #0
 8005984:	f43f af7b 	beq.w	800587e <_strtod_l+0x9d6>
 8005988:	e4d8      	b.n	800533c <_strtod_l+0x494>
 800598a:	bf00      	nop
 800598c:	f3af 8000 	nop.w
 8005990:	94a03595 	.word	0x94a03595
 8005994:	3fdfffff 	.word	0x3fdfffff
 8005998:	35afe535 	.word	0x35afe535
 800599c:	3fe00000 	.word	0x3fe00000
 80059a0:	000fffff 	.word	0x000fffff
 80059a4:	7ff00000 	.word	0x7ff00000
 80059a8:	7fefffff 	.word	0x7fefffff
 80059ac:	3ff00000 	.word	0x3ff00000
 80059b0:	7fe00000 	.word	0x7fe00000
 80059b4:	7c9fffff 	.word	0x7c9fffff
 80059b8:	3fe00000 	.word	0x3fe00000
 80059bc:	bff00000 	.word	0xbff00000
 80059c0:	9b05      	ldr	r3, [sp, #20]
 80059c2:	b313      	cbz	r3, 8005a0a <_strtod_l+0xb62>
 80059c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80059ca:	d81e      	bhi.n	8005a0a <_strtod_l+0xb62>
 80059cc:	a326      	add	r3, pc, #152	; (adr r3, 8005a68 <_strtod_l+0xbc0>)
 80059ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d2:	4620      	mov	r0, r4
 80059d4:	4629      	mov	r1, r5
 80059d6:	f7fb f8a3 	bl	8000b20 <__aeabi_dcmple>
 80059da:	b190      	cbz	r0, 8005a02 <_strtod_l+0xb5a>
 80059dc:	4629      	mov	r1, r5
 80059de:	4620      	mov	r0, r4
 80059e0:	f7fb f8fa 	bl	8000bd8 <__aeabi_d2uiz>
 80059e4:	2801      	cmp	r0, #1
 80059e6:	bf38      	it	cc
 80059e8:	2001      	movcc	r0, #1
 80059ea:	f7fa fda3 	bl	8000534 <__aeabi_ui2d>
 80059ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059f0:	4604      	mov	r4, r0
 80059f2:	460d      	mov	r5, r1
 80059f4:	b9d3      	cbnz	r3, 8005a2c <_strtod_l+0xb84>
 80059f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059fa:	9012      	str	r0, [sp, #72]	; 0x48
 80059fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80059fe:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005a02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a04:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005a08:	1a9f      	subs	r7, r3, r2
 8005a0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a0e:	f001 fe67 	bl	80076e0 <__ulp>
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	4630      	mov	r0, r6
 8005a18:	4639      	mov	r1, r7
 8005a1a:	f7fa fe05 	bl	8000628 <__aeabi_dmul>
 8005a1e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005a22:	f7fa fc4b 	bl	80002bc <__adddf3>
 8005a26:	4680      	mov	r8, r0
 8005a28:	4689      	mov	r9, r1
 8005a2a:	e77c      	b.n	8005926 <_strtod_l+0xa7e>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005a34:	e7e3      	b.n	80059fe <_strtod_l+0xb56>
 8005a36:	a30e      	add	r3, pc, #56	; (adr r3, 8005a70 <_strtod_l+0xbc8>)
 8005a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3c:	f7fb f866 	bl	8000b0c <__aeabi_dcmplt>
 8005a40:	e79f      	b.n	8005982 <_strtod_l+0xada>
 8005a42:	2300      	movs	r3, #0
 8005a44:	930a      	str	r3, [sp, #40]	; 0x28
 8005a46:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005a48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a4a:	6013      	str	r3, [r2, #0]
 8005a4c:	f7ff ba71 	b.w	8004f32 <_strtod_l+0x8a>
 8005a50:	2a65      	cmp	r2, #101	; 0x65
 8005a52:	f43f ab63 	beq.w	800511c <_strtod_l+0x274>
 8005a56:	2a45      	cmp	r2, #69	; 0x45
 8005a58:	f43f ab60 	beq.w	800511c <_strtod_l+0x274>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	f7ff bb95 	b.w	800518c <_strtod_l+0x2e4>
 8005a62:	bf00      	nop
 8005a64:	f3af 8000 	nop.w
 8005a68:	ffc00000 	.word	0xffc00000
 8005a6c:	41dfffff 	.word	0x41dfffff
 8005a70:	94a03595 	.word	0x94a03595
 8005a74:	3fcfffff 	.word	0x3fcfffff

08005a78 <_strtod_r>:
 8005a78:	4b01      	ldr	r3, [pc, #4]	; (8005a80 <_strtod_r+0x8>)
 8005a7a:	f7ff ba15 	b.w	8004ea8 <_strtod_l>
 8005a7e:	bf00      	nop
 8005a80:	200000ac 	.word	0x200000ac

08005a84 <_strtol_l.constprop.0>:
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a8a:	4680      	mov	r8, r0
 8005a8c:	d001      	beq.n	8005a92 <_strtol_l.constprop.0+0xe>
 8005a8e:	2b24      	cmp	r3, #36	; 0x24
 8005a90:	d906      	bls.n	8005aa0 <_strtol_l.constprop.0+0x1c>
 8005a92:	f000 ff0f 	bl	80068b4 <__errno>
 8005a96:	2316      	movs	r3, #22
 8005a98:	6003      	str	r3, [r0, #0]
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa0:	4f35      	ldr	r7, [pc, #212]	; (8005b78 <_strtol_l.constprop.0+0xf4>)
 8005aa2:	460d      	mov	r5, r1
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005aaa:	5de6      	ldrb	r6, [r4, r7]
 8005aac:	f016 0608 	ands.w	r6, r6, #8
 8005ab0:	d1f8      	bne.n	8005aa4 <_strtol_l.constprop.0+0x20>
 8005ab2:	2c2d      	cmp	r4, #45	; 0x2d
 8005ab4:	d12f      	bne.n	8005b16 <_strtol_l.constprop.0+0x92>
 8005ab6:	782c      	ldrb	r4, [r5, #0]
 8005ab8:	2601      	movs	r6, #1
 8005aba:	1c85      	adds	r5, r0, #2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d057      	beq.n	8005b70 <_strtol_l.constprop.0+0xec>
 8005ac0:	2b10      	cmp	r3, #16
 8005ac2:	d109      	bne.n	8005ad8 <_strtol_l.constprop.0+0x54>
 8005ac4:	2c30      	cmp	r4, #48	; 0x30
 8005ac6:	d107      	bne.n	8005ad8 <_strtol_l.constprop.0+0x54>
 8005ac8:	7828      	ldrb	r0, [r5, #0]
 8005aca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005ace:	2858      	cmp	r0, #88	; 0x58
 8005ad0:	d149      	bne.n	8005b66 <_strtol_l.constprop.0+0xe2>
 8005ad2:	786c      	ldrb	r4, [r5, #1]
 8005ad4:	2310      	movs	r3, #16
 8005ad6:	3502      	adds	r5, #2
 8005ad8:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005adc:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8005ae0:	2700      	movs	r7, #0
 8005ae2:	fbbe f9f3 	udiv	r9, lr, r3
 8005ae6:	4638      	mov	r0, r7
 8005ae8:	fb03 ea19 	mls	sl, r3, r9, lr
 8005aec:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005af0:	f1bc 0f09 	cmp.w	ip, #9
 8005af4:	d814      	bhi.n	8005b20 <_strtol_l.constprop.0+0x9c>
 8005af6:	4664      	mov	r4, ip
 8005af8:	42a3      	cmp	r3, r4
 8005afa:	dd22      	ble.n	8005b42 <_strtol_l.constprop.0+0xbe>
 8005afc:	2f00      	cmp	r7, #0
 8005afe:	db1d      	blt.n	8005b3c <_strtol_l.constprop.0+0xb8>
 8005b00:	4581      	cmp	r9, r0
 8005b02:	d31b      	bcc.n	8005b3c <_strtol_l.constprop.0+0xb8>
 8005b04:	d101      	bne.n	8005b0a <_strtol_l.constprop.0+0x86>
 8005b06:	45a2      	cmp	sl, r4
 8005b08:	db18      	blt.n	8005b3c <_strtol_l.constprop.0+0xb8>
 8005b0a:	fb00 4003 	mla	r0, r0, r3, r4
 8005b0e:	2701      	movs	r7, #1
 8005b10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b14:	e7ea      	b.n	8005aec <_strtol_l.constprop.0+0x68>
 8005b16:	2c2b      	cmp	r4, #43	; 0x2b
 8005b18:	bf04      	itt	eq
 8005b1a:	782c      	ldrbeq	r4, [r5, #0]
 8005b1c:	1c85      	addeq	r5, r0, #2
 8005b1e:	e7cd      	b.n	8005abc <_strtol_l.constprop.0+0x38>
 8005b20:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005b24:	f1bc 0f19 	cmp.w	ip, #25
 8005b28:	d801      	bhi.n	8005b2e <_strtol_l.constprop.0+0xaa>
 8005b2a:	3c37      	subs	r4, #55	; 0x37
 8005b2c:	e7e4      	b.n	8005af8 <_strtol_l.constprop.0+0x74>
 8005b2e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005b32:	f1bc 0f19 	cmp.w	ip, #25
 8005b36:	d804      	bhi.n	8005b42 <_strtol_l.constprop.0+0xbe>
 8005b38:	3c57      	subs	r4, #87	; 0x57
 8005b3a:	e7dd      	b.n	8005af8 <_strtol_l.constprop.0+0x74>
 8005b3c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005b40:	e7e6      	b.n	8005b10 <_strtol_l.constprop.0+0x8c>
 8005b42:	2f00      	cmp	r7, #0
 8005b44:	da07      	bge.n	8005b56 <_strtol_l.constprop.0+0xd2>
 8005b46:	2322      	movs	r3, #34	; 0x22
 8005b48:	f8c8 3000 	str.w	r3, [r8]
 8005b4c:	4670      	mov	r0, lr
 8005b4e:	2a00      	cmp	r2, #0
 8005b50:	d0a4      	beq.n	8005a9c <_strtol_l.constprop.0+0x18>
 8005b52:	1e69      	subs	r1, r5, #1
 8005b54:	e005      	b.n	8005b62 <_strtol_l.constprop.0+0xde>
 8005b56:	b106      	cbz	r6, 8005b5a <_strtol_l.constprop.0+0xd6>
 8005b58:	4240      	negs	r0, r0
 8005b5a:	2a00      	cmp	r2, #0
 8005b5c:	d09e      	beq.n	8005a9c <_strtol_l.constprop.0+0x18>
 8005b5e:	2f00      	cmp	r7, #0
 8005b60:	d1f7      	bne.n	8005b52 <_strtol_l.constprop.0+0xce>
 8005b62:	6011      	str	r1, [r2, #0]
 8005b64:	e79a      	b.n	8005a9c <_strtol_l.constprop.0+0x18>
 8005b66:	2430      	movs	r4, #48	; 0x30
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1b5      	bne.n	8005ad8 <_strtol_l.constprop.0+0x54>
 8005b6c:	2308      	movs	r3, #8
 8005b6e:	e7b3      	b.n	8005ad8 <_strtol_l.constprop.0+0x54>
 8005b70:	2c30      	cmp	r4, #48	; 0x30
 8005b72:	d0a9      	beq.n	8005ac8 <_strtol_l.constprop.0+0x44>
 8005b74:	230a      	movs	r3, #10
 8005b76:	e7af      	b.n	8005ad8 <_strtol_l.constprop.0+0x54>
 8005b78:	0800aa49 	.word	0x0800aa49

08005b7c <_strtol_r>:
 8005b7c:	f7ff bf82 	b.w	8005a84 <_strtol_l.constprop.0>

08005b80 <_write_r>:
 8005b80:	b538      	push	{r3, r4, r5, lr}
 8005b82:	4d07      	ldr	r5, [pc, #28]	; (8005ba0 <_write_r+0x20>)
 8005b84:	4604      	mov	r4, r0
 8005b86:	4608      	mov	r0, r1
 8005b88:	4611      	mov	r1, r2
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	602a      	str	r2, [r5, #0]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	f003 fb02 	bl	8009198 <_write>
 8005b94:	1c43      	adds	r3, r0, #1
 8005b96:	d102      	bne.n	8005b9e <_write_r+0x1e>
 8005b98:	682b      	ldr	r3, [r5, #0]
 8005b9a:	b103      	cbz	r3, 8005b9e <_write_r+0x1e>
 8005b9c:	6023      	str	r3, [r4, #0]
 8005b9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ba0:	20003cec 	.word	0x20003cec

08005ba4 <_close_r>:
 8005ba4:	b538      	push	{r3, r4, r5, lr}
 8005ba6:	4d06      	ldr	r5, [pc, #24]	; (8005bc0 <_close_r+0x1c>)
 8005ba8:	2300      	movs	r3, #0
 8005baa:	4604      	mov	r4, r0
 8005bac:	4608      	mov	r0, r1
 8005bae:	602b      	str	r3, [r5, #0]
 8005bb0:	f003 faac 	bl	800910c <_close>
 8005bb4:	1c43      	adds	r3, r0, #1
 8005bb6:	d102      	bne.n	8005bbe <_close_r+0x1a>
 8005bb8:	682b      	ldr	r3, [r5, #0]
 8005bba:	b103      	cbz	r3, 8005bbe <_close_r+0x1a>
 8005bbc:	6023      	str	r3, [r4, #0]
 8005bbe:	bd38      	pop	{r3, r4, r5, pc}
 8005bc0:	20003cec 	.word	0x20003cec

08005bc4 <quorem>:
 8005bc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc8:	6903      	ldr	r3, [r0, #16]
 8005bca:	690c      	ldr	r4, [r1, #16]
 8005bcc:	42a3      	cmp	r3, r4
 8005bce:	4607      	mov	r7, r0
 8005bd0:	db7d      	blt.n	8005cce <quorem+0x10a>
 8005bd2:	3c01      	subs	r4, #1
 8005bd4:	f101 0814 	add.w	r8, r1, #20
 8005bd8:	f100 0514 	add.w	r5, r0, #20
 8005bdc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005be0:	9301      	str	r3, [sp, #4]
 8005be2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005be6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bea:	3301      	adds	r3, #1
 8005bec:	429a      	cmp	r2, r3
 8005bee:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005bf2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005bf6:	fbb2 f6f3 	udiv	r6, r2, r3
 8005bfa:	d32e      	bcc.n	8005c5a <quorem+0x96>
 8005bfc:	f04f 0e00 	mov.w	lr, #0
 8005c00:	4640      	mov	r0, r8
 8005c02:	46ac      	mov	ip, r5
 8005c04:	46f2      	mov	sl, lr
 8005c06:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c0a:	b293      	uxth	r3, r2
 8005c0c:	fb06 e303 	mla	r3, r6, r3, lr
 8005c10:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005c14:	0c12      	lsrs	r2, r2, #16
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	fb06 e202 	mla	r2, r6, r2, lr
 8005c1c:	ebaa 0303 	sub.w	r3, sl, r3
 8005c20:	f8dc a000 	ldr.w	sl, [ip]
 8005c24:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c28:	b292      	uxth	r2, r2
 8005c2a:	fa13 f38a 	uxtah	r3, r3, sl
 8005c2e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005c32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c3c:	4581      	cmp	r9, r0
 8005c3e:	f84c 3b04 	str.w	r3, [ip], #4
 8005c42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c46:	d2de      	bcs.n	8005c06 <quorem+0x42>
 8005c48:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c4c:	b92b      	cbnz	r3, 8005c5a <quorem+0x96>
 8005c4e:	9b01      	ldr	r3, [sp, #4]
 8005c50:	3b04      	subs	r3, #4
 8005c52:	429d      	cmp	r5, r3
 8005c54:	461a      	mov	r2, r3
 8005c56:	d32e      	bcc.n	8005cb6 <quorem+0xf2>
 8005c58:	613c      	str	r4, [r7, #16]
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	f001 fc9c 	bl	8007598 <__mcmp>
 8005c60:	2800      	cmp	r0, #0
 8005c62:	db24      	blt.n	8005cae <quorem+0xea>
 8005c64:	3601      	adds	r6, #1
 8005c66:	4628      	mov	r0, r5
 8005c68:	f04f 0c00 	mov.w	ip, #0
 8005c6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c70:	f8d0 e000 	ldr.w	lr, [r0]
 8005c74:	b293      	uxth	r3, r2
 8005c76:	ebac 0303 	sub.w	r3, ip, r3
 8005c7a:	0c12      	lsrs	r2, r2, #16
 8005c7c:	fa13 f38e 	uxtah	r3, r3, lr
 8005c80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005c84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c8e:	45c1      	cmp	r9, r8
 8005c90:	f840 3b04 	str.w	r3, [r0], #4
 8005c94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005c98:	d2e8      	bcs.n	8005c6c <quorem+0xa8>
 8005c9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ca2:	b922      	cbnz	r2, 8005cae <quorem+0xea>
 8005ca4:	3b04      	subs	r3, #4
 8005ca6:	429d      	cmp	r5, r3
 8005ca8:	461a      	mov	r2, r3
 8005caa:	d30a      	bcc.n	8005cc2 <quorem+0xfe>
 8005cac:	613c      	str	r4, [r7, #16]
 8005cae:	4630      	mov	r0, r6
 8005cb0:	b003      	add	sp, #12
 8005cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb6:	6812      	ldr	r2, [r2, #0]
 8005cb8:	3b04      	subs	r3, #4
 8005cba:	2a00      	cmp	r2, #0
 8005cbc:	d1cc      	bne.n	8005c58 <quorem+0x94>
 8005cbe:	3c01      	subs	r4, #1
 8005cc0:	e7c7      	b.n	8005c52 <quorem+0x8e>
 8005cc2:	6812      	ldr	r2, [r2, #0]
 8005cc4:	3b04      	subs	r3, #4
 8005cc6:	2a00      	cmp	r2, #0
 8005cc8:	d1f0      	bne.n	8005cac <quorem+0xe8>
 8005cca:	3c01      	subs	r4, #1
 8005ccc:	e7eb      	b.n	8005ca6 <quorem+0xe2>
 8005cce:	2000      	movs	r0, #0
 8005cd0:	e7ee      	b.n	8005cb0 <quorem+0xec>
 8005cd2:	0000      	movs	r0, r0
 8005cd4:	0000      	movs	r0, r0
	...

08005cd8 <_dtoa_r>:
 8005cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cdc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005cde:	b099      	sub	sp, #100	; 0x64
 8005ce0:	4616      	mov	r6, r2
 8005ce2:	461f      	mov	r7, r3
 8005ce4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005ce8:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005cec:	4605      	mov	r5, r0
 8005cee:	b974      	cbnz	r4, 8005d0e <_dtoa_r+0x36>
 8005cf0:	2010      	movs	r0, #16
 8005cf2:	f001 f961 	bl	8006fb8 <malloc>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	6268      	str	r0, [r5, #36]	; 0x24
 8005cfa:	b920      	cbnz	r0, 8005d06 <_dtoa_r+0x2e>
 8005cfc:	4ba8      	ldr	r3, [pc, #672]	; (8005fa0 <_dtoa_r+0x2c8>)
 8005cfe:	21ea      	movs	r1, #234	; 0xea
 8005d00:	48a8      	ldr	r0, [pc, #672]	; (8005fa4 <_dtoa_r+0x2cc>)
 8005d02:	f002 fcd7 	bl	80086b4 <__assert_func>
 8005d06:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d0a:	6004      	str	r4, [r0, #0]
 8005d0c:	60c4      	str	r4, [r0, #12]
 8005d0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d10:	6819      	ldr	r1, [r3, #0]
 8005d12:	b151      	cbz	r1, 8005d2a <_dtoa_r+0x52>
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	604a      	str	r2, [r1, #4]
 8005d18:	2301      	movs	r3, #1
 8005d1a:	4093      	lsls	r3, r2
 8005d1c:	608b      	str	r3, [r1, #8]
 8005d1e:	4628      	mov	r0, r5
 8005d20:	f001 f9b2 	bl	8007088 <_Bfree>
 8005d24:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d26:	2200      	movs	r2, #0
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	1e3b      	subs	r3, r7, #0
 8005d2c:	bfb9      	ittee	lt
 8005d2e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005d32:	9305      	strlt	r3, [sp, #20]
 8005d34:	2300      	movge	r3, #0
 8005d36:	f8c8 3000 	strge.w	r3, [r8]
 8005d3a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005d3e:	4b9a      	ldr	r3, [pc, #616]	; (8005fa8 <_dtoa_r+0x2d0>)
 8005d40:	bfbc      	itt	lt
 8005d42:	2201      	movlt	r2, #1
 8005d44:	f8c8 2000 	strlt.w	r2, [r8]
 8005d48:	ea33 0309 	bics.w	r3, r3, r9
 8005d4c:	d119      	bne.n	8005d82 <_dtoa_r+0xaa>
 8005d4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005d50:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d54:	6013      	str	r3, [r2, #0]
 8005d56:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d5a:	4333      	orrs	r3, r6
 8005d5c:	f000 8580 	beq.w	8006860 <_dtoa_r+0xb88>
 8005d60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d62:	b953      	cbnz	r3, 8005d7a <_dtoa_r+0xa2>
 8005d64:	4b91      	ldr	r3, [pc, #580]	; (8005fac <_dtoa_r+0x2d4>)
 8005d66:	e022      	b.n	8005dae <_dtoa_r+0xd6>
 8005d68:	4b91      	ldr	r3, [pc, #580]	; (8005fb0 <_dtoa_r+0x2d8>)
 8005d6a:	9303      	str	r3, [sp, #12]
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	9803      	ldr	r0, [sp, #12]
 8005d74:	b019      	add	sp, #100	; 0x64
 8005d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d7a:	4b8c      	ldr	r3, [pc, #560]	; (8005fac <_dtoa_r+0x2d4>)
 8005d7c:	9303      	str	r3, [sp, #12]
 8005d7e:	3303      	adds	r3, #3
 8005d80:	e7f5      	b.n	8005d6e <_dtoa_r+0x96>
 8005d82:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005d86:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005d8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d8e:	2200      	movs	r2, #0
 8005d90:	2300      	movs	r3, #0
 8005d92:	f7fa feb1 	bl	8000af8 <__aeabi_dcmpeq>
 8005d96:	4680      	mov	r8, r0
 8005d98:	b158      	cbz	r0, 8005db2 <_dtoa_r+0xda>
 8005d9a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	6013      	str	r3, [r2, #0]
 8005da0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 8559 	beq.w	800685a <_dtoa_r+0xb82>
 8005da8:	4882      	ldr	r0, [pc, #520]	; (8005fb4 <_dtoa_r+0x2dc>)
 8005daa:	6018      	str	r0, [r3, #0]
 8005dac:	1e43      	subs	r3, r0, #1
 8005dae:	9303      	str	r3, [sp, #12]
 8005db0:	e7df      	b.n	8005d72 <_dtoa_r+0x9a>
 8005db2:	ab16      	add	r3, sp, #88	; 0x58
 8005db4:	9301      	str	r3, [sp, #4]
 8005db6:	ab17      	add	r3, sp, #92	; 0x5c
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	4628      	mov	r0, r5
 8005dbc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005dc0:	f001 fd08 	bl	80077d4 <__d2b>
 8005dc4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005dc8:	4683      	mov	fp, r0
 8005dca:	2c00      	cmp	r4, #0
 8005dcc:	d07e      	beq.n	8005ecc <_dtoa_r+0x1f4>
 8005dce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dd0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ddc:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005de0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005de4:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005de8:	4b73      	ldr	r3, [pc, #460]	; (8005fb8 <_dtoa_r+0x2e0>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	f7fa fa64 	bl	80002b8 <__aeabi_dsub>
 8005df0:	a365      	add	r3, pc, #404	; (adr r3, 8005f88 <_dtoa_r+0x2b0>)
 8005df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df6:	f7fa fc17 	bl	8000628 <__aeabi_dmul>
 8005dfa:	a365      	add	r3, pc, #404	; (adr r3, 8005f90 <_dtoa_r+0x2b8>)
 8005dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e00:	f7fa fa5c 	bl	80002bc <__adddf3>
 8005e04:	4606      	mov	r6, r0
 8005e06:	4620      	mov	r0, r4
 8005e08:	460f      	mov	r7, r1
 8005e0a:	f7fa fba3 	bl	8000554 <__aeabi_i2d>
 8005e0e:	a362      	add	r3, pc, #392	; (adr r3, 8005f98 <_dtoa_r+0x2c0>)
 8005e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e14:	f7fa fc08 	bl	8000628 <__aeabi_dmul>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	4639      	mov	r1, r7
 8005e20:	f7fa fa4c 	bl	80002bc <__adddf3>
 8005e24:	4606      	mov	r6, r0
 8005e26:	460f      	mov	r7, r1
 8005e28:	f7fa feae 	bl	8000b88 <__aeabi_d2iz>
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	4682      	mov	sl, r0
 8005e30:	2300      	movs	r3, #0
 8005e32:	4630      	mov	r0, r6
 8005e34:	4639      	mov	r1, r7
 8005e36:	f7fa fe69 	bl	8000b0c <__aeabi_dcmplt>
 8005e3a:	b148      	cbz	r0, 8005e50 <_dtoa_r+0x178>
 8005e3c:	4650      	mov	r0, sl
 8005e3e:	f7fa fb89 	bl	8000554 <__aeabi_i2d>
 8005e42:	4632      	mov	r2, r6
 8005e44:	463b      	mov	r3, r7
 8005e46:	f7fa fe57 	bl	8000af8 <__aeabi_dcmpeq>
 8005e4a:	b908      	cbnz	r0, 8005e50 <_dtoa_r+0x178>
 8005e4c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005e50:	f1ba 0f16 	cmp.w	sl, #22
 8005e54:	d857      	bhi.n	8005f06 <_dtoa_r+0x22e>
 8005e56:	4b59      	ldr	r3, [pc, #356]	; (8005fbc <_dtoa_r+0x2e4>)
 8005e58:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e64:	f7fa fe52 	bl	8000b0c <__aeabi_dcmplt>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	d04e      	beq.n	8005f0a <_dtoa_r+0x232>
 8005e6c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005e70:	2300      	movs	r3, #0
 8005e72:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005e76:	1b1c      	subs	r4, r3, r4
 8005e78:	1e63      	subs	r3, r4, #1
 8005e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8005e7c:	bf45      	ittet	mi
 8005e7e:	f1c4 0301 	rsbmi	r3, r4, #1
 8005e82:	9306      	strmi	r3, [sp, #24]
 8005e84:	2300      	movpl	r3, #0
 8005e86:	2300      	movmi	r3, #0
 8005e88:	bf4c      	ite	mi
 8005e8a:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005e8c:	9306      	strpl	r3, [sp, #24]
 8005e8e:	f1ba 0f00 	cmp.w	sl, #0
 8005e92:	db3c      	blt.n	8005f0e <_dtoa_r+0x236>
 8005e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e96:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005e9a:	4453      	add	r3, sl
 8005e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	930a      	str	r3, [sp, #40]	; 0x28
 8005ea2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ea4:	2b09      	cmp	r3, #9
 8005ea6:	f200 808d 	bhi.w	8005fc4 <_dtoa_r+0x2ec>
 8005eaa:	2b05      	cmp	r3, #5
 8005eac:	bfc4      	itt	gt
 8005eae:	3b04      	subgt	r3, #4
 8005eb0:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005eb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005eb4:	f1a3 0302 	sub.w	r3, r3, #2
 8005eb8:	bfcc      	ite	gt
 8005eba:	2400      	movgt	r4, #0
 8005ebc:	2401      	movle	r4, #1
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	f200 808c 	bhi.w	8005fdc <_dtoa_r+0x304>
 8005ec4:	e8df f003 	tbb	[pc, r3]
 8005ec8:	5b4d4f2d 	.word	0x5b4d4f2d
 8005ecc:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005ed0:	441c      	add	r4, r3
 8005ed2:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005ed6:	2b20      	cmp	r3, #32
 8005ed8:	bfc3      	ittte	gt
 8005eda:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005ede:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005ee2:	fa09 f303 	lslgt.w	r3, r9, r3
 8005ee6:	f1c3 0320 	rsble	r3, r3, #32
 8005eea:	bfc6      	itte	gt
 8005eec:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005ef0:	4318      	orrgt	r0, r3
 8005ef2:	fa06 f003 	lslle.w	r0, r6, r3
 8005ef6:	f7fa fb1d 	bl	8000534 <__aeabi_ui2d>
 8005efa:	2301      	movs	r3, #1
 8005efc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005f00:	3c01      	subs	r4, #1
 8005f02:	9313      	str	r3, [sp, #76]	; 0x4c
 8005f04:	e770      	b.n	8005de8 <_dtoa_r+0x110>
 8005f06:	2301      	movs	r3, #1
 8005f08:	e7b3      	b.n	8005e72 <_dtoa_r+0x19a>
 8005f0a:	900f      	str	r0, [sp, #60]	; 0x3c
 8005f0c:	e7b2      	b.n	8005e74 <_dtoa_r+0x19c>
 8005f0e:	9b06      	ldr	r3, [sp, #24]
 8005f10:	eba3 030a 	sub.w	r3, r3, sl
 8005f14:	9306      	str	r3, [sp, #24]
 8005f16:	f1ca 0300 	rsb	r3, sl, #0
 8005f1a:	930a      	str	r3, [sp, #40]	; 0x28
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	930e      	str	r3, [sp, #56]	; 0x38
 8005f20:	e7bf      	b.n	8005ea2 <_dtoa_r+0x1ca>
 8005f22:	2300      	movs	r3, #0
 8005f24:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f26:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	dc5a      	bgt.n	8005fe2 <_dtoa_r+0x30a>
 8005f2c:	f04f 0901 	mov.w	r9, #1
 8005f30:	f8cd 9020 	str.w	r9, [sp, #32]
 8005f34:	464b      	mov	r3, r9
 8005f36:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005f3a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	6042      	str	r2, [r0, #4]
 8005f40:	2204      	movs	r2, #4
 8005f42:	f102 0614 	add.w	r6, r2, #20
 8005f46:	429e      	cmp	r6, r3
 8005f48:	6841      	ldr	r1, [r0, #4]
 8005f4a:	d950      	bls.n	8005fee <_dtoa_r+0x316>
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	f001 f85b 	bl	8007008 <_Balloc>
 8005f52:	9003      	str	r0, [sp, #12]
 8005f54:	2800      	cmp	r0, #0
 8005f56:	d14e      	bne.n	8005ff6 <_dtoa_r+0x31e>
 8005f58:	4b19      	ldr	r3, [pc, #100]	; (8005fc0 <_dtoa_r+0x2e8>)
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005f60:	e6ce      	b.n	8005d00 <_dtoa_r+0x28>
 8005f62:	2301      	movs	r3, #1
 8005f64:	e7de      	b.n	8005f24 <_dtoa_r+0x24c>
 8005f66:	2300      	movs	r3, #0
 8005f68:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f6c:	eb0a 0903 	add.w	r9, sl, r3
 8005f70:	f109 0301 	add.w	r3, r9, #1
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	9308      	str	r3, [sp, #32]
 8005f78:	bfb8      	it	lt
 8005f7a:	2301      	movlt	r3, #1
 8005f7c:	e7dd      	b.n	8005f3a <_dtoa_r+0x262>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e7f2      	b.n	8005f68 <_dtoa_r+0x290>
 8005f82:	bf00      	nop
 8005f84:	f3af 8000 	nop.w
 8005f88:	636f4361 	.word	0x636f4361
 8005f8c:	3fd287a7 	.word	0x3fd287a7
 8005f90:	8b60c8b3 	.word	0x8b60c8b3
 8005f94:	3fc68a28 	.word	0x3fc68a28
 8005f98:	509f79fb 	.word	0x509f79fb
 8005f9c:	3fd34413 	.word	0x3fd34413
 8005fa0:	0800ab56 	.word	0x0800ab56
 8005fa4:	0800ab6d 	.word	0x0800ab6d
 8005fa8:	7ff00000 	.word	0x7ff00000
 8005fac:	0800ab52 	.word	0x0800ab52
 8005fb0:	0800ab49 	.word	0x0800ab49
 8005fb4:	0800adc2 	.word	0x0800adc2
 8005fb8:	3ff80000 	.word	0x3ff80000
 8005fbc:	0800acd8 	.word	0x0800acd8
 8005fc0:	0800abc8 	.word	0x0800abc8
 8005fc4:	2401      	movs	r4, #1
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	9322      	str	r3, [sp, #136]	; 0x88
 8005fca:	940b      	str	r4, [sp, #44]	; 0x2c
 8005fcc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f8cd 9020 	str.w	r9, [sp, #32]
 8005fd6:	2312      	movs	r3, #18
 8005fd8:	9223      	str	r2, [sp, #140]	; 0x8c
 8005fda:	e7ae      	b.n	8005f3a <_dtoa_r+0x262>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fe0:	e7f4      	b.n	8005fcc <_dtoa_r+0x2f4>
 8005fe2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005fe6:	f8cd 9020 	str.w	r9, [sp, #32]
 8005fea:	464b      	mov	r3, r9
 8005fec:	e7a5      	b.n	8005f3a <_dtoa_r+0x262>
 8005fee:	3101      	adds	r1, #1
 8005ff0:	6041      	str	r1, [r0, #4]
 8005ff2:	0052      	lsls	r2, r2, #1
 8005ff4:	e7a5      	b.n	8005f42 <_dtoa_r+0x26a>
 8005ff6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ff8:	9a03      	ldr	r2, [sp, #12]
 8005ffa:	601a      	str	r2, [r3, #0]
 8005ffc:	9b08      	ldr	r3, [sp, #32]
 8005ffe:	2b0e      	cmp	r3, #14
 8006000:	f200 80a8 	bhi.w	8006154 <_dtoa_r+0x47c>
 8006004:	2c00      	cmp	r4, #0
 8006006:	f000 80a5 	beq.w	8006154 <_dtoa_r+0x47c>
 800600a:	f1ba 0f00 	cmp.w	sl, #0
 800600e:	dd34      	ble.n	800607a <_dtoa_r+0x3a2>
 8006010:	4a9a      	ldr	r2, [pc, #616]	; (800627c <_dtoa_r+0x5a4>)
 8006012:	f00a 030f 	and.w	r3, sl, #15
 8006016:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800601a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800601e:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006022:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006026:	ea4f 142a 	mov.w	r4, sl, asr #4
 800602a:	d016      	beq.n	800605a <_dtoa_r+0x382>
 800602c:	4b94      	ldr	r3, [pc, #592]	; (8006280 <_dtoa_r+0x5a8>)
 800602e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006032:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006036:	f7fa fc21 	bl	800087c <__aeabi_ddiv>
 800603a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800603e:	f004 040f 	and.w	r4, r4, #15
 8006042:	2703      	movs	r7, #3
 8006044:	4e8e      	ldr	r6, [pc, #568]	; (8006280 <_dtoa_r+0x5a8>)
 8006046:	b954      	cbnz	r4, 800605e <_dtoa_r+0x386>
 8006048:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800604c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006050:	f7fa fc14 	bl	800087c <__aeabi_ddiv>
 8006054:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006058:	e029      	b.n	80060ae <_dtoa_r+0x3d6>
 800605a:	2702      	movs	r7, #2
 800605c:	e7f2      	b.n	8006044 <_dtoa_r+0x36c>
 800605e:	07e1      	lsls	r1, r4, #31
 8006060:	d508      	bpl.n	8006074 <_dtoa_r+0x39c>
 8006062:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006066:	e9d6 2300 	ldrd	r2, r3, [r6]
 800606a:	f7fa fadd 	bl	8000628 <__aeabi_dmul>
 800606e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006072:	3701      	adds	r7, #1
 8006074:	1064      	asrs	r4, r4, #1
 8006076:	3608      	adds	r6, #8
 8006078:	e7e5      	b.n	8006046 <_dtoa_r+0x36e>
 800607a:	f000 80a5 	beq.w	80061c8 <_dtoa_r+0x4f0>
 800607e:	f1ca 0400 	rsb	r4, sl, #0
 8006082:	4b7e      	ldr	r3, [pc, #504]	; (800627c <_dtoa_r+0x5a4>)
 8006084:	4e7e      	ldr	r6, [pc, #504]	; (8006280 <_dtoa_r+0x5a8>)
 8006086:	f004 020f 	and.w	r2, r4, #15
 800608a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800608e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006092:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006096:	f7fa fac7 	bl	8000628 <__aeabi_dmul>
 800609a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800609e:	1124      	asrs	r4, r4, #4
 80060a0:	2300      	movs	r3, #0
 80060a2:	2702      	movs	r7, #2
 80060a4:	2c00      	cmp	r4, #0
 80060a6:	f040 8084 	bne.w	80061b2 <_dtoa_r+0x4da>
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1d2      	bne.n	8006054 <_dtoa_r+0x37c>
 80060ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 808b 	beq.w	80061cc <_dtoa_r+0x4f4>
 80060b6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80060ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80060be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060c2:	4b70      	ldr	r3, [pc, #448]	; (8006284 <_dtoa_r+0x5ac>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	f7fa fd21 	bl	8000b0c <__aeabi_dcmplt>
 80060ca:	2800      	cmp	r0, #0
 80060cc:	d07e      	beq.n	80061cc <_dtoa_r+0x4f4>
 80060ce:	9b08      	ldr	r3, [sp, #32]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d07b      	beq.n	80061cc <_dtoa_r+0x4f4>
 80060d4:	f1b9 0f00 	cmp.w	r9, #0
 80060d8:	dd38      	ble.n	800614c <_dtoa_r+0x474>
 80060da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060de:	4b6a      	ldr	r3, [pc, #424]	; (8006288 <_dtoa_r+0x5b0>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	f7fa faa1 	bl	8000628 <__aeabi_dmul>
 80060e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060ea:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 80060ee:	3701      	adds	r7, #1
 80060f0:	464c      	mov	r4, r9
 80060f2:	4638      	mov	r0, r7
 80060f4:	f7fa fa2e 	bl	8000554 <__aeabi_i2d>
 80060f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060fc:	f7fa fa94 	bl	8000628 <__aeabi_dmul>
 8006100:	4b62      	ldr	r3, [pc, #392]	; (800628c <_dtoa_r+0x5b4>)
 8006102:	2200      	movs	r2, #0
 8006104:	f7fa f8da 	bl	80002bc <__adddf3>
 8006108:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800610c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006110:	9611      	str	r6, [sp, #68]	; 0x44
 8006112:	2c00      	cmp	r4, #0
 8006114:	d15d      	bne.n	80061d2 <_dtoa_r+0x4fa>
 8006116:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800611a:	4b5d      	ldr	r3, [pc, #372]	; (8006290 <_dtoa_r+0x5b8>)
 800611c:	2200      	movs	r2, #0
 800611e:	f7fa f8cb 	bl	80002b8 <__aeabi_dsub>
 8006122:	4602      	mov	r2, r0
 8006124:	460b      	mov	r3, r1
 8006126:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800612a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800612c:	4633      	mov	r3, r6
 800612e:	f7fa fd0b 	bl	8000b48 <__aeabi_dcmpgt>
 8006132:	2800      	cmp	r0, #0
 8006134:	f040 829c 	bne.w	8006670 <_dtoa_r+0x998>
 8006138:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800613c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800613e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006142:	f7fa fce3 	bl	8000b0c <__aeabi_dcmplt>
 8006146:	2800      	cmp	r0, #0
 8006148:	f040 8290 	bne.w	800666c <_dtoa_r+0x994>
 800614c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006150:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006154:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006156:	2b00      	cmp	r3, #0
 8006158:	f2c0 8152 	blt.w	8006400 <_dtoa_r+0x728>
 800615c:	f1ba 0f0e 	cmp.w	sl, #14
 8006160:	f300 814e 	bgt.w	8006400 <_dtoa_r+0x728>
 8006164:	4b45      	ldr	r3, [pc, #276]	; (800627c <_dtoa_r+0x5a4>)
 8006166:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800616a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800616e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006172:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006174:	2b00      	cmp	r3, #0
 8006176:	f280 80db 	bge.w	8006330 <_dtoa_r+0x658>
 800617a:	9b08      	ldr	r3, [sp, #32]
 800617c:	2b00      	cmp	r3, #0
 800617e:	f300 80d7 	bgt.w	8006330 <_dtoa_r+0x658>
 8006182:	f040 8272 	bne.w	800666a <_dtoa_r+0x992>
 8006186:	4b42      	ldr	r3, [pc, #264]	; (8006290 <_dtoa_r+0x5b8>)
 8006188:	2200      	movs	r2, #0
 800618a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800618e:	f7fa fa4b 	bl	8000628 <__aeabi_dmul>
 8006192:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006196:	f7fa fccd 	bl	8000b34 <__aeabi_dcmpge>
 800619a:	9c08      	ldr	r4, [sp, #32]
 800619c:	4626      	mov	r6, r4
 800619e:	2800      	cmp	r0, #0
 80061a0:	f040 8248 	bne.w	8006634 <_dtoa_r+0x95c>
 80061a4:	9f03      	ldr	r7, [sp, #12]
 80061a6:	2331      	movs	r3, #49	; 0x31
 80061a8:	f807 3b01 	strb.w	r3, [r7], #1
 80061ac:	f10a 0a01 	add.w	sl, sl, #1
 80061b0:	e244      	b.n	800663c <_dtoa_r+0x964>
 80061b2:	07e2      	lsls	r2, r4, #31
 80061b4:	d505      	bpl.n	80061c2 <_dtoa_r+0x4ea>
 80061b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80061ba:	f7fa fa35 	bl	8000628 <__aeabi_dmul>
 80061be:	3701      	adds	r7, #1
 80061c0:	2301      	movs	r3, #1
 80061c2:	1064      	asrs	r4, r4, #1
 80061c4:	3608      	adds	r6, #8
 80061c6:	e76d      	b.n	80060a4 <_dtoa_r+0x3cc>
 80061c8:	2702      	movs	r7, #2
 80061ca:	e770      	b.n	80060ae <_dtoa_r+0x3d6>
 80061cc:	9c08      	ldr	r4, [sp, #32]
 80061ce:	46d0      	mov	r8, sl
 80061d0:	e78f      	b.n	80060f2 <_dtoa_r+0x41a>
 80061d2:	9903      	ldr	r1, [sp, #12]
 80061d4:	4b29      	ldr	r3, [pc, #164]	; (800627c <_dtoa_r+0x5a4>)
 80061d6:	4421      	add	r1, r4
 80061d8:	9112      	str	r1, [sp, #72]	; 0x48
 80061da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80061e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80061e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80061e8:	2900      	cmp	r1, #0
 80061ea:	d055      	beq.n	8006298 <_dtoa_r+0x5c0>
 80061ec:	4929      	ldr	r1, [pc, #164]	; (8006294 <_dtoa_r+0x5bc>)
 80061ee:	2000      	movs	r0, #0
 80061f0:	f7fa fb44 	bl	800087c <__aeabi_ddiv>
 80061f4:	463b      	mov	r3, r7
 80061f6:	4632      	mov	r2, r6
 80061f8:	f7fa f85e 	bl	80002b8 <__aeabi_dsub>
 80061fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006200:	9f03      	ldr	r7, [sp, #12]
 8006202:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006206:	f7fa fcbf 	bl	8000b88 <__aeabi_d2iz>
 800620a:	4604      	mov	r4, r0
 800620c:	f7fa f9a2 	bl	8000554 <__aeabi_i2d>
 8006210:	4602      	mov	r2, r0
 8006212:	460b      	mov	r3, r1
 8006214:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006218:	f7fa f84e 	bl	80002b8 <__aeabi_dsub>
 800621c:	3430      	adds	r4, #48	; 0x30
 800621e:	4602      	mov	r2, r0
 8006220:	460b      	mov	r3, r1
 8006222:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006226:	f807 4b01 	strb.w	r4, [r7], #1
 800622a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800622e:	f7fa fc6d 	bl	8000b0c <__aeabi_dcmplt>
 8006232:	2800      	cmp	r0, #0
 8006234:	d174      	bne.n	8006320 <_dtoa_r+0x648>
 8006236:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800623a:	4912      	ldr	r1, [pc, #72]	; (8006284 <_dtoa_r+0x5ac>)
 800623c:	2000      	movs	r0, #0
 800623e:	f7fa f83b 	bl	80002b8 <__aeabi_dsub>
 8006242:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006246:	f7fa fc61 	bl	8000b0c <__aeabi_dcmplt>
 800624a:	2800      	cmp	r0, #0
 800624c:	f040 80b7 	bne.w	80063be <_dtoa_r+0x6e6>
 8006250:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006252:	429f      	cmp	r7, r3
 8006254:	f43f af7a 	beq.w	800614c <_dtoa_r+0x474>
 8006258:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800625c:	4b0a      	ldr	r3, [pc, #40]	; (8006288 <_dtoa_r+0x5b0>)
 800625e:	2200      	movs	r2, #0
 8006260:	f7fa f9e2 	bl	8000628 <__aeabi_dmul>
 8006264:	4b08      	ldr	r3, [pc, #32]	; (8006288 <_dtoa_r+0x5b0>)
 8006266:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800626a:	2200      	movs	r2, #0
 800626c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006270:	f7fa f9da 	bl	8000628 <__aeabi_dmul>
 8006274:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006278:	e7c3      	b.n	8006202 <_dtoa_r+0x52a>
 800627a:	bf00      	nop
 800627c:	0800acd8 	.word	0x0800acd8
 8006280:	0800acb0 	.word	0x0800acb0
 8006284:	3ff00000 	.word	0x3ff00000
 8006288:	40240000 	.word	0x40240000
 800628c:	401c0000 	.word	0x401c0000
 8006290:	40140000 	.word	0x40140000
 8006294:	3fe00000 	.word	0x3fe00000
 8006298:	4630      	mov	r0, r6
 800629a:	4639      	mov	r1, r7
 800629c:	f7fa f9c4 	bl	8000628 <__aeabi_dmul>
 80062a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80062a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062a6:	9c03      	ldr	r4, [sp, #12]
 80062a8:	9314      	str	r3, [sp, #80]	; 0x50
 80062aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062ae:	f7fa fc6b 	bl	8000b88 <__aeabi_d2iz>
 80062b2:	9015      	str	r0, [sp, #84]	; 0x54
 80062b4:	f7fa f94e 	bl	8000554 <__aeabi_i2d>
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062c0:	f7f9 fffa 	bl	80002b8 <__aeabi_dsub>
 80062c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062c6:	3330      	adds	r3, #48	; 0x30
 80062c8:	f804 3b01 	strb.w	r3, [r4], #1
 80062cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062ce:	429c      	cmp	r4, r3
 80062d0:	4606      	mov	r6, r0
 80062d2:	460f      	mov	r7, r1
 80062d4:	f04f 0200 	mov.w	r2, #0
 80062d8:	d124      	bne.n	8006324 <_dtoa_r+0x64c>
 80062da:	4ba4      	ldr	r3, [pc, #656]	; (800656c <_dtoa_r+0x894>)
 80062dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80062e0:	f7f9 ffec 	bl	80002bc <__adddf3>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	4630      	mov	r0, r6
 80062ea:	4639      	mov	r1, r7
 80062ec:	f7fa fc2c 	bl	8000b48 <__aeabi_dcmpgt>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	d163      	bne.n	80063bc <_dtoa_r+0x6e4>
 80062f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80062f8:	499c      	ldr	r1, [pc, #624]	; (800656c <_dtoa_r+0x894>)
 80062fa:	2000      	movs	r0, #0
 80062fc:	f7f9 ffdc 	bl	80002b8 <__aeabi_dsub>
 8006300:	4602      	mov	r2, r0
 8006302:	460b      	mov	r3, r1
 8006304:	4630      	mov	r0, r6
 8006306:	4639      	mov	r1, r7
 8006308:	f7fa fc00 	bl	8000b0c <__aeabi_dcmplt>
 800630c:	2800      	cmp	r0, #0
 800630e:	f43f af1d 	beq.w	800614c <_dtoa_r+0x474>
 8006312:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006314:	1e7b      	subs	r3, r7, #1
 8006316:	9314      	str	r3, [sp, #80]	; 0x50
 8006318:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800631c:	2b30      	cmp	r3, #48	; 0x30
 800631e:	d0f8      	beq.n	8006312 <_dtoa_r+0x63a>
 8006320:	46c2      	mov	sl, r8
 8006322:	e03b      	b.n	800639c <_dtoa_r+0x6c4>
 8006324:	4b92      	ldr	r3, [pc, #584]	; (8006570 <_dtoa_r+0x898>)
 8006326:	f7fa f97f 	bl	8000628 <__aeabi_dmul>
 800632a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800632e:	e7bc      	b.n	80062aa <_dtoa_r+0x5d2>
 8006330:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006334:	9f03      	ldr	r7, [sp, #12]
 8006336:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800633a:	4640      	mov	r0, r8
 800633c:	4649      	mov	r1, r9
 800633e:	f7fa fa9d 	bl	800087c <__aeabi_ddiv>
 8006342:	f7fa fc21 	bl	8000b88 <__aeabi_d2iz>
 8006346:	4604      	mov	r4, r0
 8006348:	f7fa f904 	bl	8000554 <__aeabi_i2d>
 800634c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006350:	f7fa f96a 	bl	8000628 <__aeabi_dmul>
 8006354:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006358:	4602      	mov	r2, r0
 800635a:	460b      	mov	r3, r1
 800635c:	4640      	mov	r0, r8
 800635e:	4649      	mov	r1, r9
 8006360:	f7f9 ffaa 	bl	80002b8 <__aeabi_dsub>
 8006364:	f807 6b01 	strb.w	r6, [r7], #1
 8006368:	9e03      	ldr	r6, [sp, #12]
 800636a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800636e:	1bbe      	subs	r6, r7, r6
 8006370:	45b4      	cmp	ip, r6
 8006372:	4602      	mov	r2, r0
 8006374:	460b      	mov	r3, r1
 8006376:	d136      	bne.n	80063e6 <_dtoa_r+0x70e>
 8006378:	f7f9 ffa0 	bl	80002bc <__adddf3>
 800637c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006380:	4680      	mov	r8, r0
 8006382:	4689      	mov	r9, r1
 8006384:	f7fa fbe0 	bl	8000b48 <__aeabi_dcmpgt>
 8006388:	bb58      	cbnz	r0, 80063e2 <_dtoa_r+0x70a>
 800638a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800638e:	4640      	mov	r0, r8
 8006390:	4649      	mov	r1, r9
 8006392:	f7fa fbb1 	bl	8000af8 <__aeabi_dcmpeq>
 8006396:	b108      	cbz	r0, 800639c <_dtoa_r+0x6c4>
 8006398:	07e1      	lsls	r1, r4, #31
 800639a:	d422      	bmi.n	80063e2 <_dtoa_r+0x70a>
 800639c:	4628      	mov	r0, r5
 800639e:	4659      	mov	r1, fp
 80063a0:	f000 fe72 	bl	8007088 <_Bfree>
 80063a4:	2300      	movs	r3, #0
 80063a6:	703b      	strb	r3, [r7, #0]
 80063a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80063aa:	f10a 0001 	add.w	r0, sl, #1
 80063ae:	6018      	str	r0, [r3, #0]
 80063b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f43f acdd 	beq.w	8005d72 <_dtoa_r+0x9a>
 80063b8:	601f      	str	r7, [r3, #0]
 80063ba:	e4da      	b.n	8005d72 <_dtoa_r+0x9a>
 80063bc:	4627      	mov	r7, r4
 80063be:	463b      	mov	r3, r7
 80063c0:	461f      	mov	r7, r3
 80063c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063c6:	2a39      	cmp	r2, #57	; 0x39
 80063c8:	d107      	bne.n	80063da <_dtoa_r+0x702>
 80063ca:	9a03      	ldr	r2, [sp, #12]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d1f7      	bne.n	80063c0 <_dtoa_r+0x6e8>
 80063d0:	9903      	ldr	r1, [sp, #12]
 80063d2:	2230      	movs	r2, #48	; 0x30
 80063d4:	f108 0801 	add.w	r8, r8, #1
 80063d8:	700a      	strb	r2, [r1, #0]
 80063da:	781a      	ldrb	r2, [r3, #0]
 80063dc:	3201      	adds	r2, #1
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	e79e      	b.n	8006320 <_dtoa_r+0x648>
 80063e2:	46d0      	mov	r8, sl
 80063e4:	e7eb      	b.n	80063be <_dtoa_r+0x6e6>
 80063e6:	4b62      	ldr	r3, [pc, #392]	; (8006570 <_dtoa_r+0x898>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	f7fa f91d 	bl	8000628 <__aeabi_dmul>
 80063ee:	2200      	movs	r2, #0
 80063f0:	2300      	movs	r3, #0
 80063f2:	4680      	mov	r8, r0
 80063f4:	4689      	mov	r9, r1
 80063f6:	f7fa fb7f 	bl	8000af8 <__aeabi_dcmpeq>
 80063fa:	2800      	cmp	r0, #0
 80063fc:	d09b      	beq.n	8006336 <_dtoa_r+0x65e>
 80063fe:	e7cd      	b.n	800639c <_dtoa_r+0x6c4>
 8006400:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006402:	2a00      	cmp	r2, #0
 8006404:	f000 80d0 	beq.w	80065a8 <_dtoa_r+0x8d0>
 8006408:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800640a:	2a01      	cmp	r2, #1
 800640c:	f300 80b2 	bgt.w	8006574 <_dtoa_r+0x89c>
 8006410:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006412:	2a00      	cmp	r2, #0
 8006414:	f000 80a6 	beq.w	8006564 <_dtoa_r+0x88c>
 8006418:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800641c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800641e:	9f06      	ldr	r7, [sp, #24]
 8006420:	9a06      	ldr	r2, [sp, #24]
 8006422:	441a      	add	r2, r3
 8006424:	9206      	str	r2, [sp, #24]
 8006426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006428:	2101      	movs	r1, #1
 800642a:	441a      	add	r2, r3
 800642c:	4628      	mov	r0, r5
 800642e:	9209      	str	r2, [sp, #36]	; 0x24
 8006430:	f000 ff2a 	bl	8007288 <__i2b>
 8006434:	4606      	mov	r6, r0
 8006436:	2f00      	cmp	r7, #0
 8006438:	dd0c      	ble.n	8006454 <_dtoa_r+0x77c>
 800643a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800643c:	2b00      	cmp	r3, #0
 800643e:	dd09      	ble.n	8006454 <_dtoa_r+0x77c>
 8006440:	42bb      	cmp	r3, r7
 8006442:	9a06      	ldr	r2, [sp, #24]
 8006444:	bfa8      	it	ge
 8006446:	463b      	movge	r3, r7
 8006448:	1ad2      	subs	r2, r2, r3
 800644a:	9206      	str	r2, [sp, #24]
 800644c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800644e:	1aff      	subs	r7, r7, r3
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	9309      	str	r3, [sp, #36]	; 0x24
 8006454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006456:	b1f3      	cbz	r3, 8006496 <_dtoa_r+0x7be>
 8006458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 80a8 	beq.w	80065b0 <_dtoa_r+0x8d8>
 8006460:	2c00      	cmp	r4, #0
 8006462:	dd10      	ble.n	8006486 <_dtoa_r+0x7ae>
 8006464:	4631      	mov	r1, r6
 8006466:	4622      	mov	r2, r4
 8006468:	4628      	mov	r0, r5
 800646a:	f000 ffcb 	bl	8007404 <__pow5mult>
 800646e:	465a      	mov	r2, fp
 8006470:	4601      	mov	r1, r0
 8006472:	4606      	mov	r6, r0
 8006474:	4628      	mov	r0, r5
 8006476:	f000 ff1d 	bl	80072b4 <__multiply>
 800647a:	4659      	mov	r1, fp
 800647c:	4680      	mov	r8, r0
 800647e:	4628      	mov	r0, r5
 8006480:	f000 fe02 	bl	8007088 <_Bfree>
 8006484:	46c3      	mov	fp, r8
 8006486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006488:	1b1a      	subs	r2, r3, r4
 800648a:	d004      	beq.n	8006496 <_dtoa_r+0x7be>
 800648c:	4659      	mov	r1, fp
 800648e:	4628      	mov	r0, r5
 8006490:	f000 ffb8 	bl	8007404 <__pow5mult>
 8006494:	4683      	mov	fp, r0
 8006496:	2101      	movs	r1, #1
 8006498:	4628      	mov	r0, r5
 800649a:	f000 fef5 	bl	8007288 <__i2b>
 800649e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	4604      	mov	r4, r0
 80064a4:	f340 8086 	ble.w	80065b4 <_dtoa_r+0x8dc>
 80064a8:	461a      	mov	r2, r3
 80064aa:	4601      	mov	r1, r0
 80064ac:	4628      	mov	r0, r5
 80064ae:	f000 ffa9 	bl	8007404 <__pow5mult>
 80064b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	4604      	mov	r4, r0
 80064b8:	dd7f      	ble.n	80065ba <_dtoa_r+0x8e2>
 80064ba:	f04f 0800 	mov.w	r8, #0
 80064be:	6923      	ldr	r3, [r4, #16]
 80064c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80064c4:	6918      	ldr	r0, [r3, #16]
 80064c6:	f000 fe91 	bl	80071ec <__hi0bits>
 80064ca:	f1c0 0020 	rsb	r0, r0, #32
 80064ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064d0:	4418      	add	r0, r3
 80064d2:	f010 001f 	ands.w	r0, r0, #31
 80064d6:	f000 8092 	beq.w	80065fe <_dtoa_r+0x926>
 80064da:	f1c0 0320 	rsb	r3, r0, #32
 80064de:	2b04      	cmp	r3, #4
 80064e0:	f340 808a 	ble.w	80065f8 <_dtoa_r+0x920>
 80064e4:	f1c0 001c 	rsb	r0, r0, #28
 80064e8:	9b06      	ldr	r3, [sp, #24]
 80064ea:	4403      	add	r3, r0
 80064ec:	9306      	str	r3, [sp, #24]
 80064ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064f0:	4403      	add	r3, r0
 80064f2:	4407      	add	r7, r0
 80064f4:	9309      	str	r3, [sp, #36]	; 0x24
 80064f6:	9b06      	ldr	r3, [sp, #24]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	dd05      	ble.n	8006508 <_dtoa_r+0x830>
 80064fc:	4659      	mov	r1, fp
 80064fe:	461a      	mov	r2, r3
 8006500:	4628      	mov	r0, r5
 8006502:	f000 ffd9 	bl	80074b8 <__lshift>
 8006506:	4683      	mov	fp, r0
 8006508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800650a:	2b00      	cmp	r3, #0
 800650c:	dd05      	ble.n	800651a <_dtoa_r+0x842>
 800650e:	4621      	mov	r1, r4
 8006510:	461a      	mov	r2, r3
 8006512:	4628      	mov	r0, r5
 8006514:	f000 ffd0 	bl	80074b8 <__lshift>
 8006518:	4604      	mov	r4, r0
 800651a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800651c:	2b00      	cmp	r3, #0
 800651e:	d070      	beq.n	8006602 <_dtoa_r+0x92a>
 8006520:	4621      	mov	r1, r4
 8006522:	4658      	mov	r0, fp
 8006524:	f001 f838 	bl	8007598 <__mcmp>
 8006528:	2800      	cmp	r0, #0
 800652a:	da6a      	bge.n	8006602 <_dtoa_r+0x92a>
 800652c:	2300      	movs	r3, #0
 800652e:	4659      	mov	r1, fp
 8006530:	220a      	movs	r2, #10
 8006532:	4628      	mov	r0, r5
 8006534:	f000 fdca 	bl	80070cc <__multadd>
 8006538:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800653a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800653e:	4683      	mov	fp, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 8194 	beq.w	800686e <_dtoa_r+0xb96>
 8006546:	4631      	mov	r1, r6
 8006548:	2300      	movs	r3, #0
 800654a:	220a      	movs	r2, #10
 800654c:	4628      	mov	r0, r5
 800654e:	f000 fdbd 	bl	80070cc <__multadd>
 8006552:	f1b9 0f00 	cmp.w	r9, #0
 8006556:	4606      	mov	r6, r0
 8006558:	f300 8093 	bgt.w	8006682 <_dtoa_r+0x9aa>
 800655c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800655e:	2b02      	cmp	r3, #2
 8006560:	dc57      	bgt.n	8006612 <_dtoa_r+0x93a>
 8006562:	e08e      	b.n	8006682 <_dtoa_r+0x9aa>
 8006564:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006566:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800656a:	e757      	b.n	800641c <_dtoa_r+0x744>
 800656c:	3fe00000 	.word	0x3fe00000
 8006570:	40240000 	.word	0x40240000
 8006574:	9b08      	ldr	r3, [sp, #32]
 8006576:	1e5c      	subs	r4, r3, #1
 8006578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800657a:	42a3      	cmp	r3, r4
 800657c:	bfbf      	itttt	lt
 800657e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006580:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006582:	1ae2      	sublt	r2, r4, r3
 8006584:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006586:	bfb6      	itet	lt
 8006588:	189b      	addlt	r3, r3, r2
 800658a:	1b1c      	subge	r4, r3, r4
 800658c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800658e:	9b08      	ldr	r3, [sp, #32]
 8006590:	bfb8      	it	lt
 8006592:	2400      	movlt	r4, #0
 8006594:	2b00      	cmp	r3, #0
 8006596:	bfb9      	ittee	lt
 8006598:	9b06      	ldrlt	r3, [sp, #24]
 800659a:	9a08      	ldrlt	r2, [sp, #32]
 800659c:	9f06      	ldrge	r7, [sp, #24]
 800659e:	9b08      	ldrge	r3, [sp, #32]
 80065a0:	bfbc      	itt	lt
 80065a2:	1a9f      	sublt	r7, r3, r2
 80065a4:	2300      	movlt	r3, #0
 80065a6:	e73b      	b.n	8006420 <_dtoa_r+0x748>
 80065a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80065aa:	9f06      	ldr	r7, [sp, #24]
 80065ac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80065ae:	e742      	b.n	8006436 <_dtoa_r+0x75e>
 80065b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065b2:	e76b      	b.n	800648c <_dtoa_r+0x7b4>
 80065b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	dc19      	bgt.n	80065ee <_dtoa_r+0x916>
 80065ba:	9b04      	ldr	r3, [sp, #16]
 80065bc:	b9bb      	cbnz	r3, 80065ee <_dtoa_r+0x916>
 80065be:	9b05      	ldr	r3, [sp, #20]
 80065c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065c4:	b99b      	cbnz	r3, 80065ee <_dtoa_r+0x916>
 80065c6:	9b05      	ldr	r3, [sp, #20]
 80065c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065cc:	0d1b      	lsrs	r3, r3, #20
 80065ce:	051b      	lsls	r3, r3, #20
 80065d0:	b183      	cbz	r3, 80065f4 <_dtoa_r+0x91c>
 80065d2:	9b06      	ldr	r3, [sp, #24]
 80065d4:	3301      	adds	r3, #1
 80065d6:	9306      	str	r3, [sp, #24]
 80065d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065da:	3301      	adds	r3, #1
 80065dc:	9309      	str	r3, [sp, #36]	; 0x24
 80065de:	f04f 0801 	mov.w	r8, #1
 80065e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f47f af6a 	bne.w	80064be <_dtoa_r+0x7e6>
 80065ea:	2001      	movs	r0, #1
 80065ec:	e76f      	b.n	80064ce <_dtoa_r+0x7f6>
 80065ee:	f04f 0800 	mov.w	r8, #0
 80065f2:	e7f6      	b.n	80065e2 <_dtoa_r+0x90a>
 80065f4:	4698      	mov	r8, r3
 80065f6:	e7f4      	b.n	80065e2 <_dtoa_r+0x90a>
 80065f8:	f43f af7d 	beq.w	80064f6 <_dtoa_r+0x81e>
 80065fc:	4618      	mov	r0, r3
 80065fe:	301c      	adds	r0, #28
 8006600:	e772      	b.n	80064e8 <_dtoa_r+0x810>
 8006602:	9b08      	ldr	r3, [sp, #32]
 8006604:	2b00      	cmp	r3, #0
 8006606:	dc36      	bgt.n	8006676 <_dtoa_r+0x99e>
 8006608:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800660a:	2b02      	cmp	r3, #2
 800660c:	dd33      	ble.n	8006676 <_dtoa_r+0x99e>
 800660e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006612:	f1b9 0f00 	cmp.w	r9, #0
 8006616:	d10d      	bne.n	8006634 <_dtoa_r+0x95c>
 8006618:	4621      	mov	r1, r4
 800661a:	464b      	mov	r3, r9
 800661c:	2205      	movs	r2, #5
 800661e:	4628      	mov	r0, r5
 8006620:	f000 fd54 	bl	80070cc <__multadd>
 8006624:	4601      	mov	r1, r0
 8006626:	4604      	mov	r4, r0
 8006628:	4658      	mov	r0, fp
 800662a:	f000 ffb5 	bl	8007598 <__mcmp>
 800662e:	2800      	cmp	r0, #0
 8006630:	f73f adb8 	bgt.w	80061a4 <_dtoa_r+0x4cc>
 8006634:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006636:	9f03      	ldr	r7, [sp, #12]
 8006638:	ea6f 0a03 	mvn.w	sl, r3
 800663c:	f04f 0800 	mov.w	r8, #0
 8006640:	4621      	mov	r1, r4
 8006642:	4628      	mov	r0, r5
 8006644:	f000 fd20 	bl	8007088 <_Bfree>
 8006648:	2e00      	cmp	r6, #0
 800664a:	f43f aea7 	beq.w	800639c <_dtoa_r+0x6c4>
 800664e:	f1b8 0f00 	cmp.w	r8, #0
 8006652:	d005      	beq.n	8006660 <_dtoa_r+0x988>
 8006654:	45b0      	cmp	r8, r6
 8006656:	d003      	beq.n	8006660 <_dtoa_r+0x988>
 8006658:	4641      	mov	r1, r8
 800665a:	4628      	mov	r0, r5
 800665c:	f000 fd14 	bl	8007088 <_Bfree>
 8006660:	4631      	mov	r1, r6
 8006662:	4628      	mov	r0, r5
 8006664:	f000 fd10 	bl	8007088 <_Bfree>
 8006668:	e698      	b.n	800639c <_dtoa_r+0x6c4>
 800666a:	2400      	movs	r4, #0
 800666c:	4626      	mov	r6, r4
 800666e:	e7e1      	b.n	8006634 <_dtoa_r+0x95c>
 8006670:	46c2      	mov	sl, r8
 8006672:	4626      	mov	r6, r4
 8006674:	e596      	b.n	80061a4 <_dtoa_r+0x4cc>
 8006676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006678:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800667c:	2b00      	cmp	r3, #0
 800667e:	f000 80fd 	beq.w	800687c <_dtoa_r+0xba4>
 8006682:	2f00      	cmp	r7, #0
 8006684:	dd05      	ble.n	8006692 <_dtoa_r+0x9ba>
 8006686:	4631      	mov	r1, r6
 8006688:	463a      	mov	r2, r7
 800668a:	4628      	mov	r0, r5
 800668c:	f000 ff14 	bl	80074b8 <__lshift>
 8006690:	4606      	mov	r6, r0
 8006692:	f1b8 0f00 	cmp.w	r8, #0
 8006696:	d05c      	beq.n	8006752 <_dtoa_r+0xa7a>
 8006698:	6871      	ldr	r1, [r6, #4]
 800669a:	4628      	mov	r0, r5
 800669c:	f000 fcb4 	bl	8007008 <_Balloc>
 80066a0:	4607      	mov	r7, r0
 80066a2:	b928      	cbnz	r0, 80066b0 <_dtoa_r+0x9d8>
 80066a4:	4b80      	ldr	r3, [pc, #512]	; (80068a8 <_dtoa_r+0xbd0>)
 80066a6:	4602      	mov	r2, r0
 80066a8:	f240 21ea 	movw	r1, #746	; 0x2ea
 80066ac:	f7ff bb28 	b.w	8005d00 <_dtoa_r+0x28>
 80066b0:	6932      	ldr	r2, [r6, #16]
 80066b2:	3202      	adds	r2, #2
 80066b4:	0092      	lsls	r2, r2, #2
 80066b6:	f106 010c 	add.w	r1, r6, #12
 80066ba:	300c      	adds	r0, #12
 80066bc:	f000 fc96 	bl	8006fec <memcpy>
 80066c0:	2201      	movs	r2, #1
 80066c2:	4639      	mov	r1, r7
 80066c4:	4628      	mov	r0, r5
 80066c6:	f000 fef7 	bl	80074b8 <__lshift>
 80066ca:	9b03      	ldr	r3, [sp, #12]
 80066cc:	3301      	adds	r3, #1
 80066ce:	9308      	str	r3, [sp, #32]
 80066d0:	9b03      	ldr	r3, [sp, #12]
 80066d2:	444b      	add	r3, r9
 80066d4:	930a      	str	r3, [sp, #40]	; 0x28
 80066d6:	9b04      	ldr	r3, [sp, #16]
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	46b0      	mov	r8, r6
 80066de:	9309      	str	r3, [sp, #36]	; 0x24
 80066e0:	4606      	mov	r6, r0
 80066e2:	9b08      	ldr	r3, [sp, #32]
 80066e4:	4621      	mov	r1, r4
 80066e6:	3b01      	subs	r3, #1
 80066e8:	4658      	mov	r0, fp
 80066ea:	9304      	str	r3, [sp, #16]
 80066ec:	f7ff fa6a 	bl	8005bc4 <quorem>
 80066f0:	4603      	mov	r3, r0
 80066f2:	3330      	adds	r3, #48	; 0x30
 80066f4:	9006      	str	r0, [sp, #24]
 80066f6:	4641      	mov	r1, r8
 80066f8:	4658      	mov	r0, fp
 80066fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80066fc:	f000 ff4c 	bl	8007598 <__mcmp>
 8006700:	4632      	mov	r2, r6
 8006702:	4681      	mov	r9, r0
 8006704:	4621      	mov	r1, r4
 8006706:	4628      	mov	r0, r5
 8006708:	f000 ff62 	bl	80075d0 <__mdiff>
 800670c:	68c2      	ldr	r2, [r0, #12]
 800670e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006710:	4607      	mov	r7, r0
 8006712:	bb02      	cbnz	r2, 8006756 <_dtoa_r+0xa7e>
 8006714:	4601      	mov	r1, r0
 8006716:	4658      	mov	r0, fp
 8006718:	f000 ff3e 	bl	8007598 <__mcmp>
 800671c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800671e:	4602      	mov	r2, r0
 8006720:	4639      	mov	r1, r7
 8006722:	4628      	mov	r0, r5
 8006724:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006728:	f000 fcae 	bl	8007088 <_Bfree>
 800672c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800672e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006730:	9f08      	ldr	r7, [sp, #32]
 8006732:	ea43 0102 	orr.w	r1, r3, r2
 8006736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006738:	430b      	orrs	r3, r1
 800673a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800673c:	d10d      	bne.n	800675a <_dtoa_r+0xa82>
 800673e:	2b39      	cmp	r3, #57	; 0x39
 8006740:	d029      	beq.n	8006796 <_dtoa_r+0xabe>
 8006742:	f1b9 0f00 	cmp.w	r9, #0
 8006746:	dd01      	ble.n	800674c <_dtoa_r+0xa74>
 8006748:	9b06      	ldr	r3, [sp, #24]
 800674a:	3331      	adds	r3, #49	; 0x31
 800674c:	9a04      	ldr	r2, [sp, #16]
 800674e:	7013      	strb	r3, [r2, #0]
 8006750:	e776      	b.n	8006640 <_dtoa_r+0x968>
 8006752:	4630      	mov	r0, r6
 8006754:	e7b9      	b.n	80066ca <_dtoa_r+0x9f2>
 8006756:	2201      	movs	r2, #1
 8006758:	e7e2      	b.n	8006720 <_dtoa_r+0xa48>
 800675a:	f1b9 0f00 	cmp.w	r9, #0
 800675e:	db06      	blt.n	800676e <_dtoa_r+0xa96>
 8006760:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006762:	ea41 0909 	orr.w	r9, r1, r9
 8006766:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006768:	ea59 0101 	orrs.w	r1, r9, r1
 800676c:	d120      	bne.n	80067b0 <_dtoa_r+0xad8>
 800676e:	2a00      	cmp	r2, #0
 8006770:	ddec      	ble.n	800674c <_dtoa_r+0xa74>
 8006772:	4659      	mov	r1, fp
 8006774:	2201      	movs	r2, #1
 8006776:	4628      	mov	r0, r5
 8006778:	9308      	str	r3, [sp, #32]
 800677a:	f000 fe9d 	bl	80074b8 <__lshift>
 800677e:	4621      	mov	r1, r4
 8006780:	4683      	mov	fp, r0
 8006782:	f000 ff09 	bl	8007598 <__mcmp>
 8006786:	2800      	cmp	r0, #0
 8006788:	9b08      	ldr	r3, [sp, #32]
 800678a:	dc02      	bgt.n	8006792 <_dtoa_r+0xaba>
 800678c:	d1de      	bne.n	800674c <_dtoa_r+0xa74>
 800678e:	07da      	lsls	r2, r3, #31
 8006790:	d5dc      	bpl.n	800674c <_dtoa_r+0xa74>
 8006792:	2b39      	cmp	r3, #57	; 0x39
 8006794:	d1d8      	bne.n	8006748 <_dtoa_r+0xa70>
 8006796:	9a04      	ldr	r2, [sp, #16]
 8006798:	2339      	movs	r3, #57	; 0x39
 800679a:	7013      	strb	r3, [r2, #0]
 800679c:	463b      	mov	r3, r7
 800679e:	461f      	mov	r7, r3
 80067a0:	3b01      	subs	r3, #1
 80067a2:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80067a6:	2a39      	cmp	r2, #57	; 0x39
 80067a8:	d050      	beq.n	800684c <_dtoa_r+0xb74>
 80067aa:	3201      	adds	r2, #1
 80067ac:	701a      	strb	r2, [r3, #0]
 80067ae:	e747      	b.n	8006640 <_dtoa_r+0x968>
 80067b0:	2a00      	cmp	r2, #0
 80067b2:	dd03      	ble.n	80067bc <_dtoa_r+0xae4>
 80067b4:	2b39      	cmp	r3, #57	; 0x39
 80067b6:	d0ee      	beq.n	8006796 <_dtoa_r+0xabe>
 80067b8:	3301      	adds	r3, #1
 80067ba:	e7c7      	b.n	800674c <_dtoa_r+0xa74>
 80067bc:	9a08      	ldr	r2, [sp, #32]
 80067be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80067c0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80067c4:	428a      	cmp	r2, r1
 80067c6:	d02a      	beq.n	800681e <_dtoa_r+0xb46>
 80067c8:	4659      	mov	r1, fp
 80067ca:	2300      	movs	r3, #0
 80067cc:	220a      	movs	r2, #10
 80067ce:	4628      	mov	r0, r5
 80067d0:	f000 fc7c 	bl	80070cc <__multadd>
 80067d4:	45b0      	cmp	r8, r6
 80067d6:	4683      	mov	fp, r0
 80067d8:	f04f 0300 	mov.w	r3, #0
 80067dc:	f04f 020a 	mov.w	r2, #10
 80067e0:	4641      	mov	r1, r8
 80067e2:	4628      	mov	r0, r5
 80067e4:	d107      	bne.n	80067f6 <_dtoa_r+0xb1e>
 80067e6:	f000 fc71 	bl	80070cc <__multadd>
 80067ea:	4680      	mov	r8, r0
 80067ec:	4606      	mov	r6, r0
 80067ee:	9b08      	ldr	r3, [sp, #32]
 80067f0:	3301      	adds	r3, #1
 80067f2:	9308      	str	r3, [sp, #32]
 80067f4:	e775      	b.n	80066e2 <_dtoa_r+0xa0a>
 80067f6:	f000 fc69 	bl	80070cc <__multadd>
 80067fa:	4631      	mov	r1, r6
 80067fc:	4680      	mov	r8, r0
 80067fe:	2300      	movs	r3, #0
 8006800:	220a      	movs	r2, #10
 8006802:	4628      	mov	r0, r5
 8006804:	f000 fc62 	bl	80070cc <__multadd>
 8006808:	4606      	mov	r6, r0
 800680a:	e7f0      	b.n	80067ee <_dtoa_r+0xb16>
 800680c:	f1b9 0f00 	cmp.w	r9, #0
 8006810:	9a03      	ldr	r2, [sp, #12]
 8006812:	bfcc      	ite	gt
 8006814:	464f      	movgt	r7, r9
 8006816:	2701      	movle	r7, #1
 8006818:	4417      	add	r7, r2
 800681a:	f04f 0800 	mov.w	r8, #0
 800681e:	4659      	mov	r1, fp
 8006820:	2201      	movs	r2, #1
 8006822:	4628      	mov	r0, r5
 8006824:	9308      	str	r3, [sp, #32]
 8006826:	f000 fe47 	bl	80074b8 <__lshift>
 800682a:	4621      	mov	r1, r4
 800682c:	4683      	mov	fp, r0
 800682e:	f000 feb3 	bl	8007598 <__mcmp>
 8006832:	2800      	cmp	r0, #0
 8006834:	dcb2      	bgt.n	800679c <_dtoa_r+0xac4>
 8006836:	d102      	bne.n	800683e <_dtoa_r+0xb66>
 8006838:	9b08      	ldr	r3, [sp, #32]
 800683a:	07db      	lsls	r3, r3, #31
 800683c:	d4ae      	bmi.n	800679c <_dtoa_r+0xac4>
 800683e:	463b      	mov	r3, r7
 8006840:	461f      	mov	r7, r3
 8006842:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006846:	2a30      	cmp	r2, #48	; 0x30
 8006848:	d0fa      	beq.n	8006840 <_dtoa_r+0xb68>
 800684a:	e6f9      	b.n	8006640 <_dtoa_r+0x968>
 800684c:	9a03      	ldr	r2, [sp, #12]
 800684e:	429a      	cmp	r2, r3
 8006850:	d1a5      	bne.n	800679e <_dtoa_r+0xac6>
 8006852:	f10a 0a01 	add.w	sl, sl, #1
 8006856:	2331      	movs	r3, #49	; 0x31
 8006858:	e779      	b.n	800674e <_dtoa_r+0xa76>
 800685a:	4b14      	ldr	r3, [pc, #80]	; (80068ac <_dtoa_r+0xbd4>)
 800685c:	f7ff baa7 	b.w	8005dae <_dtoa_r+0xd6>
 8006860:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006862:	2b00      	cmp	r3, #0
 8006864:	f47f aa80 	bne.w	8005d68 <_dtoa_r+0x90>
 8006868:	4b11      	ldr	r3, [pc, #68]	; (80068b0 <_dtoa_r+0xbd8>)
 800686a:	f7ff baa0 	b.w	8005dae <_dtoa_r+0xd6>
 800686e:	f1b9 0f00 	cmp.w	r9, #0
 8006872:	dc03      	bgt.n	800687c <_dtoa_r+0xba4>
 8006874:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006876:	2b02      	cmp	r3, #2
 8006878:	f73f aecb 	bgt.w	8006612 <_dtoa_r+0x93a>
 800687c:	9f03      	ldr	r7, [sp, #12]
 800687e:	4621      	mov	r1, r4
 8006880:	4658      	mov	r0, fp
 8006882:	f7ff f99f 	bl	8005bc4 <quorem>
 8006886:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800688a:	f807 3b01 	strb.w	r3, [r7], #1
 800688e:	9a03      	ldr	r2, [sp, #12]
 8006890:	1aba      	subs	r2, r7, r2
 8006892:	4591      	cmp	r9, r2
 8006894:	ddba      	ble.n	800680c <_dtoa_r+0xb34>
 8006896:	4659      	mov	r1, fp
 8006898:	2300      	movs	r3, #0
 800689a:	220a      	movs	r2, #10
 800689c:	4628      	mov	r0, r5
 800689e:	f000 fc15 	bl	80070cc <__multadd>
 80068a2:	4683      	mov	fp, r0
 80068a4:	e7eb      	b.n	800687e <_dtoa_r+0xba6>
 80068a6:	bf00      	nop
 80068a8:	0800abc8 	.word	0x0800abc8
 80068ac:	0800adc1 	.word	0x0800adc1
 80068b0:	0800ab49 	.word	0x0800ab49

080068b4 <__errno>:
 80068b4:	4b01      	ldr	r3, [pc, #4]	; (80068bc <__errno+0x8>)
 80068b6:	6818      	ldr	r0, [r3, #0]
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	20000044 	.word	0x20000044

080068c0 <rshift>:
 80068c0:	6903      	ldr	r3, [r0, #16]
 80068c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80068c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 80068ce:	f100 0414 	add.w	r4, r0, #20
 80068d2:	dd45      	ble.n	8006960 <rshift+0xa0>
 80068d4:	f011 011f 	ands.w	r1, r1, #31
 80068d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80068dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80068e0:	d10c      	bne.n	80068fc <rshift+0x3c>
 80068e2:	f100 0710 	add.w	r7, r0, #16
 80068e6:	4629      	mov	r1, r5
 80068e8:	42b1      	cmp	r1, r6
 80068ea:	d334      	bcc.n	8006956 <rshift+0x96>
 80068ec:	1a9b      	subs	r3, r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	1eea      	subs	r2, r5, #3
 80068f2:	4296      	cmp	r6, r2
 80068f4:	bf38      	it	cc
 80068f6:	2300      	movcc	r3, #0
 80068f8:	4423      	add	r3, r4
 80068fa:	e015      	b.n	8006928 <rshift+0x68>
 80068fc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006900:	f1c1 0820 	rsb	r8, r1, #32
 8006904:	40cf      	lsrs	r7, r1
 8006906:	f105 0e04 	add.w	lr, r5, #4
 800690a:	46a1      	mov	r9, r4
 800690c:	4576      	cmp	r6, lr
 800690e:	46f4      	mov	ip, lr
 8006910:	d815      	bhi.n	800693e <rshift+0x7e>
 8006912:	1a9a      	subs	r2, r3, r2
 8006914:	0092      	lsls	r2, r2, #2
 8006916:	3a04      	subs	r2, #4
 8006918:	3501      	adds	r5, #1
 800691a:	42ae      	cmp	r6, r5
 800691c:	bf38      	it	cc
 800691e:	2200      	movcc	r2, #0
 8006920:	18a3      	adds	r3, r4, r2
 8006922:	50a7      	str	r7, [r4, r2]
 8006924:	b107      	cbz	r7, 8006928 <rshift+0x68>
 8006926:	3304      	adds	r3, #4
 8006928:	1b1a      	subs	r2, r3, r4
 800692a:	42a3      	cmp	r3, r4
 800692c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006930:	bf08      	it	eq
 8006932:	2300      	moveq	r3, #0
 8006934:	6102      	str	r2, [r0, #16]
 8006936:	bf08      	it	eq
 8006938:	6143      	streq	r3, [r0, #20]
 800693a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800693e:	f8dc c000 	ldr.w	ip, [ip]
 8006942:	fa0c fc08 	lsl.w	ip, ip, r8
 8006946:	ea4c 0707 	orr.w	r7, ip, r7
 800694a:	f849 7b04 	str.w	r7, [r9], #4
 800694e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006952:	40cf      	lsrs	r7, r1
 8006954:	e7da      	b.n	800690c <rshift+0x4c>
 8006956:	f851 cb04 	ldr.w	ip, [r1], #4
 800695a:	f847 cf04 	str.w	ip, [r7, #4]!
 800695e:	e7c3      	b.n	80068e8 <rshift+0x28>
 8006960:	4623      	mov	r3, r4
 8006962:	e7e1      	b.n	8006928 <rshift+0x68>

08006964 <__hexdig_fun>:
 8006964:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006968:	2b09      	cmp	r3, #9
 800696a:	d802      	bhi.n	8006972 <__hexdig_fun+0xe>
 800696c:	3820      	subs	r0, #32
 800696e:	b2c0      	uxtb	r0, r0
 8006970:	4770      	bx	lr
 8006972:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006976:	2b05      	cmp	r3, #5
 8006978:	d801      	bhi.n	800697e <__hexdig_fun+0x1a>
 800697a:	3847      	subs	r0, #71	; 0x47
 800697c:	e7f7      	b.n	800696e <__hexdig_fun+0xa>
 800697e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006982:	2b05      	cmp	r3, #5
 8006984:	d801      	bhi.n	800698a <__hexdig_fun+0x26>
 8006986:	3827      	subs	r0, #39	; 0x27
 8006988:	e7f1      	b.n	800696e <__hexdig_fun+0xa>
 800698a:	2000      	movs	r0, #0
 800698c:	4770      	bx	lr
	...

08006990 <__gethex>:
 8006990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006994:	b08b      	sub	sp, #44	; 0x2c
 8006996:	468b      	mov	fp, r1
 8006998:	9305      	str	r3, [sp, #20]
 800699a:	4bb2      	ldr	r3, [pc, #712]	; (8006c64 <__gethex+0x2d4>)
 800699c:	9002      	str	r0, [sp, #8]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	9303      	str	r3, [sp, #12]
 80069a2:	4618      	mov	r0, r3
 80069a4:	4690      	mov	r8, r2
 80069a6:	f7f9 fc25 	bl	80001f4 <strlen>
 80069aa:	9b03      	ldr	r3, [sp, #12]
 80069ac:	f8db 2000 	ldr.w	r2, [fp]
 80069b0:	4403      	add	r3, r0
 80069b2:	4682      	mov	sl, r0
 80069b4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80069b8:	9306      	str	r3, [sp, #24]
 80069ba:	1c93      	adds	r3, r2, #2
 80069bc:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80069c0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80069c4:	32fe      	adds	r2, #254	; 0xfe
 80069c6:	18d1      	adds	r1, r2, r3
 80069c8:	461f      	mov	r7, r3
 80069ca:	f813 0b01 	ldrb.w	r0, [r3], #1
 80069ce:	9101      	str	r1, [sp, #4]
 80069d0:	2830      	cmp	r0, #48	; 0x30
 80069d2:	d0f8      	beq.n	80069c6 <__gethex+0x36>
 80069d4:	f7ff ffc6 	bl	8006964 <__hexdig_fun>
 80069d8:	4604      	mov	r4, r0
 80069da:	2800      	cmp	r0, #0
 80069dc:	d13a      	bne.n	8006a54 <__gethex+0xc4>
 80069de:	9903      	ldr	r1, [sp, #12]
 80069e0:	4652      	mov	r2, sl
 80069e2:	4638      	mov	r0, r7
 80069e4:	f001 fd96 	bl	8008514 <strncmp>
 80069e8:	4605      	mov	r5, r0
 80069ea:	2800      	cmp	r0, #0
 80069ec:	d166      	bne.n	8006abc <__gethex+0x12c>
 80069ee:	f817 000a 	ldrb.w	r0, [r7, sl]
 80069f2:	eb07 060a 	add.w	r6, r7, sl
 80069f6:	f7ff ffb5 	bl	8006964 <__hexdig_fun>
 80069fa:	2800      	cmp	r0, #0
 80069fc:	d060      	beq.n	8006ac0 <__gethex+0x130>
 80069fe:	4633      	mov	r3, r6
 8006a00:	7818      	ldrb	r0, [r3, #0]
 8006a02:	2830      	cmp	r0, #48	; 0x30
 8006a04:	461f      	mov	r7, r3
 8006a06:	f103 0301 	add.w	r3, r3, #1
 8006a0a:	d0f9      	beq.n	8006a00 <__gethex+0x70>
 8006a0c:	f7ff ffaa 	bl	8006964 <__hexdig_fun>
 8006a10:	2301      	movs	r3, #1
 8006a12:	fab0 f480 	clz	r4, r0
 8006a16:	0964      	lsrs	r4, r4, #5
 8006a18:	4635      	mov	r5, r6
 8006a1a:	9301      	str	r3, [sp, #4]
 8006a1c:	463a      	mov	r2, r7
 8006a1e:	4616      	mov	r6, r2
 8006a20:	3201      	adds	r2, #1
 8006a22:	7830      	ldrb	r0, [r6, #0]
 8006a24:	f7ff ff9e 	bl	8006964 <__hexdig_fun>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d1f8      	bne.n	8006a1e <__gethex+0x8e>
 8006a2c:	9903      	ldr	r1, [sp, #12]
 8006a2e:	4652      	mov	r2, sl
 8006a30:	4630      	mov	r0, r6
 8006a32:	f001 fd6f 	bl	8008514 <strncmp>
 8006a36:	b980      	cbnz	r0, 8006a5a <__gethex+0xca>
 8006a38:	b94d      	cbnz	r5, 8006a4e <__gethex+0xbe>
 8006a3a:	eb06 050a 	add.w	r5, r6, sl
 8006a3e:	462a      	mov	r2, r5
 8006a40:	4616      	mov	r6, r2
 8006a42:	3201      	adds	r2, #1
 8006a44:	7830      	ldrb	r0, [r6, #0]
 8006a46:	f7ff ff8d 	bl	8006964 <__hexdig_fun>
 8006a4a:	2800      	cmp	r0, #0
 8006a4c:	d1f8      	bne.n	8006a40 <__gethex+0xb0>
 8006a4e:	1bad      	subs	r5, r5, r6
 8006a50:	00ad      	lsls	r5, r5, #2
 8006a52:	e004      	b.n	8006a5e <__gethex+0xce>
 8006a54:	2400      	movs	r4, #0
 8006a56:	4625      	mov	r5, r4
 8006a58:	e7e0      	b.n	8006a1c <__gethex+0x8c>
 8006a5a:	2d00      	cmp	r5, #0
 8006a5c:	d1f7      	bne.n	8006a4e <__gethex+0xbe>
 8006a5e:	7833      	ldrb	r3, [r6, #0]
 8006a60:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006a64:	2b50      	cmp	r3, #80	; 0x50
 8006a66:	d139      	bne.n	8006adc <__gethex+0x14c>
 8006a68:	7873      	ldrb	r3, [r6, #1]
 8006a6a:	2b2b      	cmp	r3, #43	; 0x2b
 8006a6c:	d02a      	beq.n	8006ac4 <__gethex+0x134>
 8006a6e:	2b2d      	cmp	r3, #45	; 0x2d
 8006a70:	d02c      	beq.n	8006acc <__gethex+0x13c>
 8006a72:	1c71      	adds	r1, r6, #1
 8006a74:	f04f 0900 	mov.w	r9, #0
 8006a78:	7808      	ldrb	r0, [r1, #0]
 8006a7a:	f7ff ff73 	bl	8006964 <__hexdig_fun>
 8006a7e:	1e43      	subs	r3, r0, #1
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b18      	cmp	r3, #24
 8006a84:	d82a      	bhi.n	8006adc <__gethex+0x14c>
 8006a86:	f1a0 0210 	sub.w	r2, r0, #16
 8006a8a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006a8e:	f7ff ff69 	bl	8006964 <__hexdig_fun>
 8006a92:	1e43      	subs	r3, r0, #1
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b18      	cmp	r3, #24
 8006a98:	d91b      	bls.n	8006ad2 <__gethex+0x142>
 8006a9a:	f1b9 0f00 	cmp.w	r9, #0
 8006a9e:	d000      	beq.n	8006aa2 <__gethex+0x112>
 8006aa0:	4252      	negs	r2, r2
 8006aa2:	4415      	add	r5, r2
 8006aa4:	f8cb 1000 	str.w	r1, [fp]
 8006aa8:	b1d4      	cbz	r4, 8006ae0 <__gethex+0x150>
 8006aaa:	9b01      	ldr	r3, [sp, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	bf14      	ite	ne
 8006ab0:	2700      	movne	r7, #0
 8006ab2:	2706      	moveq	r7, #6
 8006ab4:	4638      	mov	r0, r7
 8006ab6:	b00b      	add	sp, #44	; 0x2c
 8006ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006abc:	463e      	mov	r6, r7
 8006abe:	4625      	mov	r5, r4
 8006ac0:	2401      	movs	r4, #1
 8006ac2:	e7cc      	b.n	8006a5e <__gethex+0xce>
 8006ac4:	f04f 0900 	mov.w	r9, #0
 8006ac8:	1cb1      	adds	r1, r6, #2
 8006aca:	e7d5      	b.n	8006a78 <__gethex+0xe8>
 8006acc:	f04f 0901 	mov.w	r9, #1
 8006ad0:	e7fa      	b.n	8006ac8 <__gethex+0x138>
 8006ad2:	230a      	movs	r3, #10
 8006ad4:	fb03 0202 	mla	r2, r3, r2, r0
 8006ad8:	3a10      	subs	r2, #16
 8006ada:	e7d6      	b.n	8006a8a <__gethex+0xfa>
 8006adc:	4631      	mov	r1, r6
 8006ade:	e7e1      	b.n	8006aa4 <__gethex+0x114>
 8006ae0:	1bf3      	subs	r3, r6, r7
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	4621      	mov	r1, r4
 8006ae6:	2b07      	cmp	r3, #7
 8006ae8:	dc0a      	bgt.n	8006b00 <__gethex+0x170>
 8006aea:	9802      	ldr	r0, [sp, #8]
 8006aec:	f000 fa8c 	bl	8007008 <_Balloc>
 8006af0:	4604      	mov	r4, r0
 8006af2:	b940      	cbnz	r0, 8006b06 <__gethex+0x176>
 8006af4:	4b5c      	ldr	r3, [pc, #368]	; (8006c68 <__gethex+0x2d8>)
 8006af6:	4602      	mov	r2, r0
 8006af8:	21de      	movs	r1, #222	; 0xde
 8006afa:	485c      	ldr	r0, [pc, #368]	; (8006c6c <__gethex+0x2dc>)
 8006afc:	f001 fdda 	bl	80086b4 <__assert_func>
 8006b00:	3101      	adds	r1, #1
 8006b02:	105b      	asrs	r3, r3, #1
 8006b04:	e7ef      	b.n	8006ae6 <__gethex+0x156>
 8006b06:	f100 0914 	add.w	r9, r0, #20
 8006b0a:	f04f 0b00 	mov.w	fp, #0
 8006b0e:	f1ca 0301 	rsb	r3, sl, #1
 8006b12:	f8cd 9010 	str.w	r9, [sp, #16]
 8006b16:	f8cd b004 	str.w	fp, [sp, #4]
 8006b1a:	9308      	str	r3, [sp, #32]
 8006b1c:	42b7      	cmp	r7, r6
 8006b1e:	d33f      	bcc.n	8006ba0 <__gethex+0x210>
 8006b20:	9f04      	ldr	r7, [sp, #16]
 8006b22:	9b01      	ldr	r3, [sp, #4]
 8006b24:	f847 3b04 	str.w	r3, [r7], #4
 8006b28:	eba7 0709 	sub.w	r7, r7, r9
 8006b2c:	10bf      	asrs	r7, r7, #2
 8006b2e:	6127      	str	r7, [r4, #16]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 fb5b 	bl	80071ec <__hi0bits>
 8006b36:	017f      	lsls	r7, r7, #5
 8006b38:	f8d8 6000 	ldr.w	r6, [r8]
 8006b3c:	1a3f      	subs	r7, r7, r0
 8006b3e:	42b7      	cmp	r7, r6
 8006b40:	dd62      	ble.n	8006c08 <__gethex+0x278>
 8006b42:	1bbf      	subs	r7, r7, r6
 8006b44:	4639      	mov	r1, r7
 8006b46:	4620      	mov	r0, r4
 8006b48:	f000 fef1 	bl	800792e <__any_on>
 8006b4c:	4682      	mov	sl, r0
 8006b4e:	b1a8      	cbz	r0, 8006b7c <__gethex+0x1ec>
 8006b50:	1e7b      	subs	r3, r7, #1
 8006b52:	1159      	asrs	r1, r3, #5
 8006b54:	f003 021f 	and.w	r2, r3, #31
 8006b58:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006b5c:	f04f 0a01 	mov.w	sl, #1
 8006b60:	fa0a f202 	lsl.w	r2, sl, r2
 8006b64:	420a      	tst	r2, r1
 8006b66:	d009      	beq.n	8006b7c <__gethex+0x1ec>
 8006b68:	4553      	cmp	r3, sl
 8006b6a:	dd05      	ble.n	8006b78 <__gethex+0x1e8>
 8006b6c:	1eb9      	subs	r1, r7, #2
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f000 fedd 	bl	800792e <__any_on>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	d144      	bne.n	8006c02 <__gethex+0x272>
 8006b78:	f04f 0a02 	mov.w	sl, #2
 8006b7c:	4639      	mov	r1, r7
 8006b7e:	4620      	mov	r0, r4
 8006b80:	f7ff fe9e 	bl	80068c0 <rshift>
 8006b84:	443d      	add	r5, r7
 8006b86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b8a:	42ab      	cmp	r3, r5
 8006b8c:	da4a      	bge.n	8006c24 <__gethex+0x294>
 8006b8e:	9802      	ldr	r0, [sp, #8]
 8006b90:	4621      	mov	r1, r4
 8006b92:	f000 fa79 	bl	8007088 <_Bfree>
 8006b96:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006b98:	2300      	movs	r3, #0
 8006b9a:	6013      	str	r3, [r2, #0]
 8006b9c:	27a3      	movs	r7, #163	; 0xa3
 8006b9e:	e789      	b.n	8006ab4 <__gethex+0x124>
 8006ba0:	1e73      	subs	r3, r6, #1
 8006ba2:	9a06      	ldr	r2, [sp, #24]
 8006ba4:	9307      	str	r3, [sp, #28]
 8006ba6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d019      	beq.n	8006be2 <__gethex+0x252>
 8006bae:	f1bb 0f20 	cmp.w	fp, #32
 8006bb2:	d107      	bne.n	8006bc4 <__gethex+0x234>
 8006bb4:	9b04      	ldr	r3, [sp, #16]
 8006bb6:	9a01      	ldr	r2, [sp, #4]
 8006bb8:	f843 2b04 	str.w	r2, [r3], #4
 8006bbc:	9304      	str	r3, [sp, #16]
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	9301      	str	r3, [sp, #4]
 8006bc2:	469b      	mov	fp, r3
 8006bc4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006bc8:	f7ff fecc 	bl	8006964 <__hexdig_fun>
 8006bcc:	9b01      	ldr	r3, [sp, #4]
 8006bce:	f000 000f 	and.w	r0, r0, #15
 8006bd2:	fa00 f00b 	lsl.w	r0, r0, fp
 8006bd6:	4303      	orrs	r3, r0
 8006bd8:	9301      	str	r3, [sp, #4]
 8006bda:	f10b 0b04 	add.w	fp, fp, #4
 8006bde:	9b07      	ldr	r3, [sp, #28]
 8006be0:	e00d      	b.n	8006bfe <__gethex+0x26e>
 8006be2:	9a08      	ldr	r2, [sp, #32]
 8006be4:	1e73      	subs	r3, r6, #1
 8006be6:	4413      	add	r3, r2
 8006be8:	42bb      	cmp	r3, r7
 8006bea:	d3e0      	bcc.n	8006bae <__gethex+0x21e>
 8006bec:	4618      	mov	r0, r3
 8006bee:	9903      	ldr	r1, [sp, #12]
 8006bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8006bf2:	4652      	mov	r2, sl
 8006bf4:	f001 fc8e 	bl	8008514 <strncmp>
 8006bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	d1d7      	bne.n	8006bae <__gethex+0x21e>
 8006bfe:	461e      	mov	r6, r3
 8006c00:	e78c      	b.n	8006b1c <__gethex+0x18c>
 8006c02:	f04f 0a03 	mov.w	sl, #3
 8006c06:	e7b9      	b.n	8006b7c <__gethex+0x1ec>
 8006c08:	da09      	bge.n	8006c1e <__gethex+0x28e>
 8006c0a:	1bf7      	subs	r7, r6, r7
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	9802      	ldr	r0, [sp, #8]
 8006c10:	463a      	mov	r2, r7
 8006c12:	f000 fc51 	bl	80074b8 <__lshift>
 8006c16:	1bed      	subs	r5, r5, r7
 8006c18:	4604      	mov	r4, r0
 8006c1a:	f100 0914 	add.w	r9, r0, #20
 8006c1e:	f04f 0a00 	mov.w	sl, #0
 8006c22:	e7b0      	b.n	8006b86 <__gethex+0x1f6>
 8006c24:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006c28:	42a8      	cmp	r0, r5
 8006c2a:	dd71      	ble.n	8006d10 <__gethex+0x380>
 8006c2c:	1b45      	subs	r5, r0, r5
 8006c2e:	42ae      	cmp	r6, r5
 8006c30:	dc35      	bgt.n	8006c9e <__gethex+0x30e>
 8006c32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d029      	beq.n	8006c8e <__gethex+0x2fe>
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d02b      	beq.n	8006c96 <__gethex+0x306>
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d11c      	bne.n	8006c7c <__gethex+0x2ec>
 8006c42:	42ae      	cmp	r6, r5
 8006c44:	d11a      	bne.n	8006c7c <__gethex+0x2ec>
 8006c46:	2e01      	cmp	r6, #1
 8006c48:	d112      	bne.n	8006c70 <__gethex+0x2e0>
 8006c4a:	9a05      	ldr	r2, [sp, #20]
 8006c4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006c50:	6013      	str	r3, [r2, #0]
 8006c52:	2301      	movs	r3, #1
 8006c54:	6123      	str	r3, [r4, #16]
 8006c56:	f8c9 3000 	str.w	r3, [r9]
 8006c5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c5c:	2762      	movs	r7, #98	; 0x62
 8006c5e:	601c      	str	r4, [r3, #0]
 8006c60:	e728      	b.n	8006ab4 <__gethex+0x124>
 8006c62:	bf00      	nop
 8006c64:	0800ac40 	.word	0x0800ac40
 8006c68:	0800abc8 	.word	0x0800abc8
 8006c6c:	0800abd9 	.word	0x0800abd9
 8006c70:	1e71      	subs	r1, r6, #1
 8006c72:	4620      	mov	r0, r4
 8006c74:	f000 fe5b 	bl	800792e <__any_on>
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	d1e6      	bne.n	8006c4a <__gethex+0x2ba>
 8006c7c:	9802      	ldr	r0, [sp, #8]
 8006c7e:	4621      	mov	r1, r4
 8006c80:	f000 fa02 	bl	8007088 <_Bfree>
 8006c84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006c86:	2300      	movs	r3, #0
 8006c88:	6013      	str	r3, [r2, #0]
 8006c8a:	2750      	movs	r7, #80	; 0x50
 8006c8c:	e712      	b.n	8006ab4 <__gethex+0x124>
 8006c8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1f3      	bne.n	8006c7c <__gethex+0x2ec>
 8006c94:	e7d9      	b.n	8006c4a <__gethex+0x2ba>
 8006c96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1d6      	bne.n	8006c4a <__gethex+0x2ba>
 8006c9c:	e7ee      	b.n	8006c7c <__gethex+0x2ec>
 8006c9e:	1e6f      	subs	r7, r5, #1
 8006ca0:	f1ba 0f00 	cmp.w	sl, #0
 8006ca4:	d131      	bne.n	8006d0a <__gethex+0x37a>
 8006ca6:	b127      	cbz	r7, 8006cb2 <__gethex+0x322>
 8006ca8:	4639      	mov	r1, r7
 8006caa:	4620      	mov	r0, r4
 8006cac:	f000 fe3f 	bl	800792e <__any_on>
 8006cb0:	4682      	mov	sl, r0
 8006cb2:	117b      	asrs	r3, r7, #5
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006cba:	f007 071f 	and.w	r7, r7, #31
 8006cbe:	fa01 f707 	lsl.w	r7, r1, r7
 8006cc2:	421f      	tst	r7, r3
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	bf18      	it	ne
 8006cca:	f04a 0a02 	orrne.w	sl, sl, #2
 8006cce:	1b76      	subs	r6, r6, r5
 8006cd0:	f7ff fdf6 	bl	80068c0 <rshift>
 8006cd4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006cd8:	2702      	movs	r7, #2
 8006cda:	f1ba 0f00 	cmp.w	sl, #0
 8006cde:	d048      	beq.n	8006d72 <__gethex+0x3e2>
 8006ce0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d015      	beq.n	8006d14 <__gethex+0x384>
 8006ce8:	2b03      	cmp	r3, #3
 8006cea:	d017      	beq.n	8006d1c <__gethex+0x38c>
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d109      	bne.n	8006d04 <__gethex+0x374>
 8006cf0:	f01a 0f02 	tst.w	sl, #2
 8006cf4:	d006      	beq.n	8006d04 <__gethex+0x374>
 8006cf6:	f8d9 0000 	ldr.w	r0, [r9]
 8006cfa:	ea4a 0a00 	orr.w	sl, sl, r0
 8006cfe:	f01a 0f01 	tst.w	sl, #1
 8006d02:	d10e      	bne.n	8006d22 <__gethex+0x392>
 8006d04:	f047 0710 	orr.w	r7, r7, #16
 8006d08:	e033      	b.n	8006d72 <__gethex+0x3e2>
 8006d0a:	f04f 0a01 	mov.w	sl, #1
 8006d0e:	e7d0      	b.n	8006cb2 <__gethex+0x322>
 8006d10:	2701      	movs	r7, #1
 8006d12:	e7e2      	b.n	8006cda <__gethex+0x34a>
 8006d14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d16:	f1c3 0301 	rsb	r3, r3, #1
 8006d1a:	9315      	str	r3, [sp, #84]	; 0x54
 8006d1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d0f0      	beq.n	8006d04 <__gethex+0x374>
 8006d22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006d26:	f104 0314 	add.w	r3, r4, #20
 8006d2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006d2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006d32:	f04f 0c00 	mov.w	ip, #0
 8006d36:	4618      	mov	r0, r3
 8006d38:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d3c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8006d40:	d01c      	beq.n	8006d7c <__gethex+0x3ec>
 8006d42:	3201      	adds	r2, #1
 8006d44:	6002      	str	r2, [r0, #0]
 8006d46:	2f02      	cmp	r7, #2
 8006d48:	f104 0314 	add.w	r3, r4, #20
 8006d4c:	d13d      	bne.n	8006dca <__gethex+0x43a>
 8006d4e:	f8d8 2000 	ldr.w	r2, [r8]
 8006d52:	3a01      	subs	r2, #1
 8006d54:	42b2      	cmp	r2, r6
 8006d56:	d10a      	bne.n	8006d6e <__gethex+0x3de>
 8006d58:	1171      	asrs	r1, r6, #5
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d60:	f006 061f 	and.w	r6, r6, #31
 8006d64:	fa02 f606 	lsl.w	r6, r2, r6
 8006d68:	421e      	tst	r6, r3
 8006d6a:	bf18      	it	ne
 8006d6c:	4617      	movne	r7, r2
 8006d6e:	f047 0720 	orr.w	r7, r7, #32
 8006d72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d74:	601c      	str	r4, [r3, #0]
 8006d76:	9b05      	ldr	r3, [sp, #20]
 8006d78:	601d      	str	r5, [r3, #0]
 8006d7a:	e69b      	b.n	8006ab4 <__gethex+0x124>
 8006d7c:	4299      	cmp	r1, r3
 8006d7e:	f843 cc04 	str.w	ip, [r3, #-4]
 8006d82:	d8d8      	bhi.n	8006d36 <__gethex+0x3a6>
 8006d84:	68a3      	ldr	r3, [r4, #8]
 8006d86:	459b      	cmp	fp, r3
 8006d88:	db17      	blt.n	8006dba <__gethex+0x42a>
 8006d8a:	6861      	ldr	r1, [r4, #4]
 8006d8c:	9802      	ldr	r0, [sp, #8]
 8006d8e:	3101      	adds	r1, #1
 8006d90:	f000 f93a 	bl	8007008 <_Balloc>
 8006d94:	4681      	mov	r9, r0
 8006d96:	b918      	cbnz	r0, 8006da0 <__gethex+0x410>
 8006d98:	4b1a      	ldr	r3, [pc, #104]	; (8006e04 <__gethex+0x474>)
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	2184      	movs	r1, #132	; 0x84
 8006d9e:	e6ac      	b.n	8006afa <__gethex+0x16a>
 8006da0:	6922      	ldr	r2, [r4, #16]
 8006da2:	3202      	adds	r2, #2
 8006da4:	f104 010c 	add.w	r1, r4, #12
 8006da8:	0092      	lsls	r2, r2, #2
 8006daa:	300c      	adds	r0, #12
 8006dac:	f000 f91e 	bl	8006fec <memcpy>
 8006db0:	4621      	mov	r1, r4
 8006db2:	9802      	ldr	r0, [sp, #8]
 8006db4:	f000 f968 	bl	8007088 <_Bfree>
 8006db8:	464c      	mov	r4, r9
 8006dba:	6923      	ldr	r3, [r4, #16]
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006dc2:	6122      	str	r2, [r4, #16]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	615a      	str	r2, [r3, #20]
 8006dc8:	e7bd      	b.n	8006d46 <__gethex+0x3b6>
 8006dca:	6922      	ldr	r2, [r4, #16]
 8006dcc:	455a      	cmp	r2, fp
 8006dce:	dd0b      	ble.n	8006de8 <__gethex+0x458>
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f7ff fd74 	bl	80068c0 <rshift>
 8006dd8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006ddc:	3501      	adds	r5, #1
 8006dde:	42ab      	cmp	r3, r5
 8006de0:	f6ff aed5 	blt.w	8006b8e <__gethex+0x1fe>
 8006de4:	2701      	movs	r7, #1
 8006de6:	e7c2      	b.n	8006d6e <__gethex+0x3de>
 8006de8:	f016 061f 	ands.w	r6, r6, #31
 8006dec:	d0fa      	beq.n	8006de4 <__gethex+0x454>
 8006dee:	4453      	add	r3, sl
 8006df0:	f1c6 0620 	rsb	r6, r6, #32
 8006df4:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006df8:	f000 f9f8 	bl	80071ec <__hi0bits>
 8006dfc:	42b0      	cmp	r0, r6
 8006dfe:	dbe7      	blt.n	8006dd0 <__gethex+0x440>
 8006e00:	e7f0      	b.n	8006de4 <__gethex+0x454>
 8006e02:	bf00      	nop
 8006e04:	0800abc8 	.word	0x0800abc8

08006e08 <L_shift>:
 8006e08:	f1c2 0208 	rsb	r2, r2, #8
 8006e0c:	0092      	lsls	r2, r2, #2
 8006e0e:	b570      	push	{r4, r5, r6, lr}
 8006e10:	f1c2 0620 	rsb	r6, r2, #32
 8006e14:	6843      	ldr	r3, [r0, #4]
 8006e16:	6804      	ldr	r4, [r0, #0]
 8006e18:	fa03 f506 	lsl.w	r5, r3, r6
 8006e1c:	432c      	orrs	r4, r5
 8006e1e:	40d3      	lsrs	r3, r2
 8006e20:	6004      	str	r4, [r0, #0]
 8006e22:	f840 3f04 	str.w	r3, [r0, #4]!
 8006e26:	4288      	cmp	r0, r1
 8006e28:	d3f4      	bcc.n	8006e14 <L_shift+0xc>
 8006e2a:	bd70      	pop	{r4, r5, r6, pc}

08006e2c <__match>:
 8006e2c:	b530      	push	{r4, r5, lr}
 8006e2e:	6803      	ldr	r3, [r0, #0]
 8006e30:	3301      	adds	r3, #1
 8006e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e36:	b914      	cbnz	r4, 8006e3e <__match+0x12>
 8006e38:	6003      	str	r3, [r0, #0]
 8006e3a:	2001      	movs	r0, #1
 8006e3c:	bd30      	pop	{r4, r5, pc}
 8006e3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e42:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006e46:	2d19      	cmp	r5, #25
 8006e48:	bf98      	it	ls
 8006e4a:	3220      	addls	r2, #32
 8006e4c:	42a2      	cmp	r2, r4
 8006e4e:	d0f0      	beq.n	8006e32 <__match+0x6>
 8006e50:	2000      	movs	r0, #0
 8006e52:	e7f3      	b.n	8006e3c <__match+0x10>

08006e54 <__hexnan>:
 8006e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e58:	680b      	ldr	r3, [r1, #0]
 8006e5a:	115e      	asrs	r6, r3, #5
 8006e5c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006e60:	f013 031f 	ands.w	r3, r3, #31
 8006e64:	b087      	sub	sp, #28
 8006e66:	bf18      	it	ne
 8006e68:	3604      	addne	r6, #4
 8006e6a:	2500      	movs	r5, #0
 8006e6c:	1f37      	subs	r7, r6, #4
 8006e6e:	4690      	mov	r8, r2
 8006e70:	6802      	ldr	r2, [r0, #0]
 8006e72:	9301      	str	r3, [sp, #4]
 8006e74:	4682      	mov	sl, r0
 8006e76:	f846 5c04 	str.w	r5, [r6, #-4]
 8006e7a:	46b9      	mov	r9, r7
 8006e7c:	463c      	mov	r4, r7
 8006e7e:	9502      	str	r5, [sp, #8]
 8006e80:	46ab      	mov	fp, r5
 8006e82:	7851      	ldrb	r1, [r2, #1]
 8006e84:	1c53      	adds	r3, r2, #1
 8006e86:	9303      	str	r3, [sp, #12]
 8006e88:	b341      	cbz	r1, 8006edc <__hexnan+0x88>
 8006e8a:	4608      	mov	r0, r1
 8006e8c:	9205      	str	r2, [sp, #20]
 8006e8e:	9104      	str	r1, [sp, #16]
 8006e90:	f7ff fd68 	bl	8006964 <__hexdig_fun>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	d14f      	bne.n	8006f38 <__hexnan+0xe4>
 8006e98:	9904      	ldr	r1, [sp, #16]
 8006e9a:	9a05      	ldr	r2, [sp, #20]
 8006e9c:	2920      	cmp	r1, #32
 8006e9e:	d818      	bhi.n	8006ed2 <__hexnan+0x7e>
 8006ea0:	9b02      	ldr	r3, [sp, #8]
 8006ea2:	459b      	cmp	fp, r3
 8006ea4:	dd13      	ble.n	8006ece <__hexnan+0x7a>
 8006ea6:	454c      	cmp	r4, r9
 8006ea8:	d206      	bcs.n	8006eb8 <__hexnan+0x64>
 8006eaa:	2d07      	cmp	r5, #7
 8006eac:	dc04      	bgt.n	8006eb8 <__hexnan+0x64>
 8006eae:	462a      	mov	r2, r5
 8006eb0:	4649      	mov	r1, r9
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	f7ff ffa8 	bl	8006e08 <L_shift>
 8006eb8:	4544      	cmp	r4, r8
 8006eba:	d950      	bls.n	8006f5e <__hexnan+0x10a>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	f1a4 0904 	sub.w	r9, r4, #4
 8006ec2:	f844 3c04 	str.w	r3, [r4, #-4]
 8006ec6:	f8cd b008 	str.w	fp, [sp, #8]
 8006eca:	464c      	mov	r4, r9
 8006ecc:	461d      	mov	r5, r3
 8006ece:	9a03      	ldr	r2, [sp, #12]
 8006ed0:	e7d7      	b.n	8006e82 <__hexnan+0x2e>
 8006ed2:	2929      	cmp	r1, #41	; 0x29
 8006ed4:	d156      	bne.n	8006f84 <__hexnan+0x130>
 8006ed6:	3202      	adds	r2, #2
 8006ed8:	f8ca 2000 	str.w	r2, [sl]
 8006edc:	f1bb 0f00 	cmp.w	fp, #0
 8006ee0:	d050      	beq.n	8006f84 <__hexnan+0x130>
 8006ee2:	454c      	cmp	r4, r9
 8006ee4:	d206      	bcs.n	8006ef4 <__hexnan+0xa0>
 8006ee6:	2d07      	cmp	r5, #7
 8006ee8:	dc04      	bgt.n	8006ef4 <__hexnan+0xa0>
 8006eea:	462a      	mov	r2, r5
 8006eec:	4649      	mov	r1, r9
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f7ff ff8a 	bl	8006e08 <L_shift>
 8006ef4:	4544      	cmp	r4, r8
 8006ef6:	d934      	bls.n	8006f62 <__hexnan+0x10e>
 8006ef8:	f1a8 0204 	sub.w	r2, r8, #4
 8006efc:	4623      	mov	r3, r4
 8006efe:	f853 1b04 	ldr.w	r1, [r3], #4
 8006f02:	f842 1f04 	str.w	r1, [r2, #4]!
 8006f06:	429f      	cmp	r7, r3
 8006f08:	d2f9      	bcs.n	8006efe <__hexnan+0xaa>
 8006f0a:	1b3b      	subs	r3, r7, r4
 8006f0c:	f023 0303 	bic.w	r3, r3, #3
 8006f10:	3304      	adds	r3, #4
 8006f12:	3401      	adds	r4, #1
 8006f14:	3e03      	subs	r6, #3
 8006f16:	42b4      	cmp	r4, r6
 8006f18:	bf88      	it	hi
 8006f1a:	2304      	movhi	r3, #4
 8006f1c:	4443      	add	r3, r8
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f843 2b04 	str.w	r2, [r3], #4
 8006f24:	429f      	cmp	r7, r3
 8006f26:	d2fb      	bcs.n	8006f20 <__hexnan+0xcc>
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	b91b      	cbnz	r3, 8006f34 <__hexnan+0xe0>
 8006f2c:	4547      	cmp	r7, r8
 8006f2e:	d127      	bne.n	8006f80 <__hexnan+0x12c>
 8006f30:	2301      	movs	r3, #1
 8006f32:	603b      	str	r3, [r7, #0]
 8006f34:	2005      	movs	r0, #5
 8006f36:	e026      	b.n	8006f86 <__hexnan+0x132>
 8006f38:	3501      	adds	r5, #1
 8006f3a:	2d08      	cmp	r5, #8
 8006f3c:	f10b 0b01 	add.w	fp, fp, #1
 8006f40:	dd06      	ble.n	8006f50 <__hexnan+0xfc>
 8006f42:	4544      	cmp	r4, r8
 8006f44:	d9c3      	bls.n	8006ece <__hexnan+0x7a>
 8006f46:	2300      	movs	r3, #0
 8006f48:	f844 3c04 	str.w	r3, [r4, #-4]
 8006f4c:	2501      	movs	r5, #1
 8006f4e:	3c04      	subs	r4, #4
 8006f50:	6822      	ldr	r2, [r4, #0]
 8006f52:	f000 000f 	and.w	r0, r0, #15
 8006f56:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006f5a:	6022      	str	r2, [r4, #0]
 8006f5c:	e7b7      	b.n	8006ece <__hexnan+0x7a>
 8006f5e:	2508      	movs	r5, #8
 8006f60:	e7b5      	b.n	8006ece <__hexnan+0x7a>
 8006f62:	9b01      	ldr	r3, [sp, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d0df      	beq.n	8006f28 <__hexnan+0xd4>
 8006f68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f6c:	f1c3 0320 	rsb	r3, r3, #32
 8006f70:	fa22 f303 	lsr.w	r3, r2, r3
 8006f74:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006f78:	401a      	ands	r2, r3
 8006f7a:	f846 2c04 	str.w	r2, [r6, #-4]
 8006f7e:	e7d3      	b.n	8006f28 <__hexnan+0xd4>
 8006f80:	3f04      	subs	r7, #4
 8006f82:	e7d1      	b.n	8006f28 <__hexnan+0xd4>
 8006f84:	2004      	movs	r0, #4
 8006f86:	b007      	add	sp, #28
 8006f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f8c <_localeconv_r>:
 8006f8c:	4800      	ldr	r0, [pc, #0]	; (8006f90 <_localeconv_r+0x4>)
 8006f8e:	4770      	bx	lr
 8006f90:	2000019c 	.word	0x2000019c

08006f94 <_lseek_r>:
 8006f94:	b538      	push	{r3, r4, r5, lr}
 8006f96:	4d07      	ldr	r5, [pc, #28]	; (8006fb4 <_lseek_r+0x20>)
 8006f98:	4604      	mov	r4, r0
 8006f9a:	4608      	mov	r0, r1
 8006f9c:	4611      	mov	r1, r2
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	602a      	str	r2, [r5, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	f002 f8da 	bl	800915c <_lseek>
 8006fa8:	1c43      	adds	r3, r0, #1
 8006faa:	d102      	bne.n	8006fb2 <_lseek_r+0x1e>
 8006fac:	682b      	ldr	r3, [r5, #0]
 8006fae:	b103      	cbz	r3, 8006fb2 <_lseek_r+0x1e>
 8006fb0:	6023      	str	r3, [r4, #0]
 8006fb2:	bd38      	pop	{r3, r4, r5, pc}
 8006fb4:	20003cec 	.word	0x20003cec

08006fb8 <malloc>:
 8006fb8:	4b02      	ldr	r3, [pc, #8]	; (8006fc4 <malloc+0xc>)
 8006fba:	4601      	mov	r1, r0
 8006fbc:	6818      	ldr	r0, [r3, #0]
 8006fbe:	f000 bd55 	b.w	8007a6c <_malloc_r>
 8006fc2:	bf00      	nop
 8006fc4:	20000044 	.word	0x20000044

08006fc8 <__ascii_mbtowc>:
 8006fc8:	b082      	sub	sp, #8
 8006fca:	b901      	cbnz	r1, 8006fce <__ascii_mbtowc+0x6>
 8006fcc:	a901      	add	r1, sp, #4
 8006fce:	b142      	cbz	r2, 8006fe2 <__ascii_mbtowc+0x1a>
 8006fd0:	b14b      	cbz	r3, 8006fe6 <__ascii_mbtowc+0x1e>
 8006fd2:	7813      	ldrb	r3, [r2, #0]
 8006fd4:	600b      	str	r3, [r1, #0]
 8006fd6:	7812      	ldrb	r2, [r2, #0]
 8006fd8:	1e10      	subs	r0, r2, #0
 8006fda:	bf18      	it	ne
 8006fdc:	2001      	movne	r0, #1
 8006fde:	b002      	add	sp, #8
 8006fe0:	4770      	bx	lr
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	e7fb      	b.n	8006fde <__ascii_mbtowc+0x16>
 8006fe6:	f06f 0001 	mvn.w	r0, #1
 8006fea:	e7f8      	b.n	8006fde <__ascii_mbtowc+0x16>

08006fec <memcpy>:
 8006fec:	440a      	add	r2, r1
 8006fee:	4291      	cmp	r1, r2
 8006ff0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006ff4:	d100      	bne.n	8006ff8 <memcpy+0xc>
 8006ff6:	4770      	bx	lr
 8006ff8:	b510      	push	{r4, lr}
 8006ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ffe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007002:	4291      	cmp	r1, r2
 8007004:	d1f9      	bne.n	8006ffa <memcpy+0xe>
 8007006:	bd10      	pop	{r4, pc}

08007008 <_Balloc>:
 8007008:	b570      	push	{r4, r5, r6, lr}
 800700a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800700c:	4604      	mov	r4, r0
 800700e:	460d      	mov	r5, r1
 8007010:	b976      	cbnz	r6, 8007030 <_Balloc+0x28>
 8007012:	2010      	movs	r0, #16
 8007014:	f7ff ffd0 	bl	8006fb8 <malloc>
 8007018:	4602      	mov	r2, r0
 800701a:	6260      	str	r0, [r4, #36]	; 0x24
 800701c:	b920      	cbnz	r0, 8007028 <_Balloc+0x20>
 800701e:	4b18      	ldr	r3, [pc, #96]	; (8007080 <_Balloc+0x78>)
 8007020:	4818      	ldr	r0, [pc, #96]	; (8007084 <_Balloc+0x7c>)
 8007022:	2166      	movs	r1, #102	; 0x66
 8007024:	f001 fb46 	bl	80086b4 <__assert_func>
 8007028:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800702c:	6006      	str	r6, [r0, #0]
 800702e:	60c6      	str	r6, [r0, #12]
 8007030:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007032:	68f3      	ldr	r3, [r6, #12]
 8007034:	b183      	cbz	r3, 8007058 <_Balloc+0x50>
 8007036:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800703e:	b9b8      	cbnz	r0, 8007070 <_Balloc+0x68>
 8007040:	2101      	movs	r1, #1
 8007042:	fa01 f605 	lsl.w	r6, r1, r5
 8007046:	1d72      	adds	r2, r6, #5
 8007048:	0092      	lsls	r2, r2, #2
 800704a:	4620      	mov	r0, r4
 800704c:	f000 fc90 	bl	8007970 <_calloc_r>
 8007050:	b160      	cbz	r0, 800706c <_Balloc+0x64>
 8007052:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007056:	e00e      	b.n	8007076 <_Balloc+0x6e>
 8007058:	2221      	movs	r2, #33	; 0x21
 800705a:	2104      	movs	r1, #4
 800705c:	4620      	mov	r0, r4
 800705e:	f000 fc87 	bl	8007970 <_calloc_r>
 8007062:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007064:	60f0      	str	r0, [r6, #12]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1e4      	bne.n	8007036 <_Balloc+0x2e>
 800706c:	2000      	movs	r0, #0
 800706e:	bd70      	pop	{r4, r5, r6, pc}
 8007070:	6802      	ldr	r2, [r0, #0]
 8007072:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007076:	2300      	movs	r3, #0
 8007078:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800707c:	e7f7      	b.n	800706e <_Balloc+0x66>
 800707e:	bf00      	nop
 8007080:	0800ab56 	.word	0x0800ab56
 8007084:	0800ac54 	.word	0x0800ac54

08007088 <_Bfree>:
 8007088:	b570      	push	{r4, r5, r6, lr}
 800708a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800708c:	4605      	mov	r5, r0
 800708e:	460c      	mov	r4, r1
 8007090:	b976      	cbnz	r6, 80070b0 <_Bfree+0x28>
 8007092:	2010      	movs	r0, #16
 8007094:	f7ff ff90 	bl	8006fb8 <malloc>
 8007098:	4602      	mov	r2, r0
 800709a:	6268      	str	r0, [r5, #36]	; 0x24
 800709c:	b920      	cbnz	r0, 80070a8 <_Bfree+0x20>
 800709e:	4b09      	ldr	r3, [pc, #36]	; (80070c4 <_Bfree+0x3c>)
 80070a0:	4809      	ldr	r0, [pc, #36]	; (80070c8 <_Bfree+0x40>)
 80070a2:	218a      	movs	r1, #138	; 0x8a
 80070a4:	f001 fb06 	bl	80086b4 <__assert_func>
 80070a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070ac:	6006      	str	r6, [r0, #0]
 80070ae:	60c6      	str	r6, [r0, #12]
 80070b0:	b13c      	cbz	r4, 80070c2 <_Bfree+0x3a>
 80070b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80070b4:	6862      	ldr	r2, [r4, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070bc:	6021      	str	r1, [r4, #0]
 80070be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80070c2:	bd70      	pop	{r4, r5, r6, pc}
 80070c4:	0800ab56 	.word	0x0800ab56
 80070c8:	0800ac54 	.word	0x0800ac54

080070cc <__multadd>:
 80070cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070d0:	690d      	ldr	r5, [r1, #16]
 80070d2:	4607      	mov	r7, r0
 80070d4:	460c      	mov	r4, r1
 80070d6:	461e      	mov	r6, r3
 80070d8:	f101 0c14 	add.w	ip, r1, #20
 80070dc:	2000      	movs	r0, #0
 80070de:	f8dc 3000 	ldr.w	r3, [ip]
 80070e2:	b299      	uxth	r1, r3
 80070e4:	fb02 6101 	mla	r1, r2, r1, r6
 80070e8:	0c1e      	lsrs	r6, r3, #16
 80070ea:	0c0b      	lsrs	r3, r1, #16
 80070ec:	fb02 3306 	mla	r3, r2, r6, r3
 80070f0:	b289      	uxth	r1, r1
 80070f2:	3001      	adds	r0, #1
 80070f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80070f8:	4285      	cmp	r5, r0
 80070fa:	f84c 1b04 	str.w	r1, [ip], #4
 80070fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007102:	dcec      	bgt.n	80070de <__multadd+0x12>
 8007104:	b30e      	cbz	r6, 800714a <__multadd+0x7e>
 8007106:	68a3      	ldr	r3, [r4, #8]
 8007108:	42ab      	cmp	r3, r5
 800710a:	dc19      	bgt.n	8007140 <__multadd+0x74>
 800710c:	6861      	ldr	r1, [r4, #4]
 800710e:	4638      	mov	r0, r7
 8007110:	3101      	adds	r1, #1
 8007112:	f7ff ff79 	bl	8007008 <_Balloc>
 8007116:	4680      	mov	r8, r0
 8007118:	b928      	cbnz	r0, 8007126 <__multadd+0x5a>
 800711a:	4602      	mov	r2, r0
 800711c:	4b0c      	ldr	r3, [pc, #48]	; (8007150 <__multadd+0x84>)
 800711e:	480d      	ldr	r0, [pc, #52]	; (8007154 <__multadd+0x88>)
 8007120:	21b5      	movs	r1, #181	; 0xb5
 8007122:	f001 fac7 	bl	80086b4 <__assert_func>
 8007126:	6922      	ldr	r2, [r4, #16]
 8007128:	3202      	adds	r2, #2
 800712a:	f104 010c 	add.w	r1, r4, #12
 800712e:	0092      	lsls	r2, r2, #2
 8007130:	300c      	adds	r0, #12
 8007132:	f7ff ff5b 	bl	8006fec <memcpy>
 8007136:	4621      	mov	r1, r4
 8007138:	4638      	mov	r0, r7
 800713a:	f7ff ffa5 	bl	8007088 <_Bfree>
 800713e:	4644      	mov	r4, r8
 8007140:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007144:	3501      	adds	r5, #1
 8007146:	615e      	str	r6, [r3, #20]
 8007148:	6125      	str	r5, [r4, #16]
 800714a:	4620      	mov	r0, r4
 800714c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007150:	0800abc8 	.word	0x0800abc8
 8007154:	0800ac54 	.word	0x0800ac54

08007158 <__s2b>:
 8007158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800715c:	460c      	mov	r4, r1
 800715e:	4615      	mov	r5, r2
 8007160:	461f      	mov	r7, r3
 8007162:	2209      	movs	r2, #9
 8007164:	3308      	adds	r3, #8
 8007166:	4606      	mov	r6, r0
 8007168:	fb93 f3f2 	sdiv	r3, r3, r2
 800716c:	2100      	movs	r1, #0
 800716e:	2201      	movs	r2, #1
 8007170:	429a      	cmp	r2, r3
 8007172:	db09      	blt.n	8007188 <__s2b+0x30>
 8007174:	4630      	mov	r0, r6
 8007176:	f7ff ff47 	bl	8007008 <_Balloc>
 800717a:	b940      	cbnz	r0, 800718e <__s2b+0x36>
 800717c:	4602      	mov	r2, r0
 800717e:	4b19      	ldr	r3, [pc, #100]	; (80071e4 <__s2b+0x8c>)
 8007180:	4819      	ldr	r0, [pc, #100]	; (80071e8 <__s2b+0x90>)
 8007182:	21ce      	movs	r1, #206	; 0xce
 8007184:	f001 fa96 	bl	80086b4 <__assert_func>
 8007188:	0052      	lsls	r2, r2, #1
 800718a:	3101      	adds	r1, #1
 800718c:	e7f0      	b.n	8007170 <__s2b+0x18>
 800718e:	9b08      	ldr	r3, [sp, #32]
 8007190:	6143      	str	r3, [r0, #20]
 8007192:	2d09      	cmp	r5, #9
 8007194:	f04f 0301 	mov.w	r3, #1
 8007198:	6103      	str	r3, [r0, #16]
 800719a:	dd16      	ble.n	80071ca <__s2b+0x72>
 800719c:	f104 0909 	add.w	r9, r4, #9
 80071a0:	46c8      	mov	r8, r9
 80071a2:	442c      	add	r4, r5
 80071a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80071a8:	4601      	mov	r1, r0
 80071aa:	3b30      	subs	r3, #48	; 0x30
 80071ac:	220a      	movs	r2, #10
 80071ae:	4630      	mov	r0, r6
 80071b0:	f7ff ff8c 	bl	80070cc <__multadd>
 80071b4:	45a0      	cmp	r8, r4
 80071b6:	d1f5      	bne.n	80071a4 <__s2b+0x4c>
 80071b8:	f1a5 0408 	sub.w	r4, r5, #8
 80071bc:	444c      	add	r4, r9
 80071be:	1b2d      	subs	r5, r5, r4
 80071c0:	1963      	adds	r3, r4, r5
 80071c2:	42bb      	cmp	r3, r7
 80071c4:	db04      	blt.n	80071d0 <__s2b+0x78>
 80071c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ca:	340a      	adds	r4, #10
 80071cc:	2509      	movs	r5, #9
 80071ce:	e7f6      	b.n	80071be <__s2b+0x66>
 80071d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80071d4:	4601      	mov	r1, r0
 80071d6:	3b30      	subs	r3, #48	; 0x30
 80071d8:	220a      	movs	r2, #10
 80071da:	4630      	mov	r0, r6
 80071dc:	f7ff ff76 	bl	80070cc <__multadd>
 80071e0:	e7ee      	b.n	80071c0 <__s2b+0x68>
 80071e2:	bf00      	nop
 80071e4:	0800abc8 	.word	0x0800abc8
 80071e8:	0800ac54 	.word	0x0800ac54

080071ec <__hi0bits>:
 80071ec:	0c02      	lsrs	r2, r0, #16
 80071ee:	0412      	lsls	r2, r2, #16
 80071f0:	4603      	mov	r3, r0
 80071f2:	b9ca      	cbnz	r2, 8007228 <__hi0bits+0x3c>
 80071f4:	0403      	lsls	r3, r0, #16
 80071f6:	2010      	movs	r0, #16
 80071f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80071fc:	bf04      	itt	eq
 80071fe:	021b      	lsleq	r3, r3, #8
 8007200:	3008      	addeq	r0, #8
 8007202:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007206:	bf04      	itt	eq
 8007208:	011b      	lsleq	r3, r3, #4
 800720a:	3004      	addeq	r0, #4
 800720c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007210:	bf04      	itt	eq
 8007212:	009b      	lsleq	r3, r3, #2
 8007214:	3002      	addeq	r0, #2
 8007216:	2b00      	cmp	r3, #0
 8007218:	db05      	blt.n	8007226 <__hi0bits+0x3a>
 800721a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800721e:	f100 0001 	add.w	r0, r0, #1
 8007222:	bf08      	it	eq
 8007224:	2020      	moveq	r0, #32
 8007226:	4770      	bx	lr
 8007228:	2000      	movs	r0, #0
 800722a:	e7e5      	b.n	80071f8 <__hi0bits+0xc>

0800722c <__lo0bits>:
 800722c:	6803      	ldr	r3, [r0, #0]
 800722e:	4602      	mov	r2, r0
 8007230:	f013 0007 	ands.w	r0, r3, #7
 8007234:	d00b      	beq.n	800724e <__lo0bits+0x22>
 8007236:	07d9      	lsls	r1, r3, #31
 8007238:	d421      	bmi.n	800727e <__lo0bits+0x52>
 800723a:	0798      	lsls	r0, r3, #30
 800723c:	bf49      	itett	mi
 800723e:	085b      	lsrmi	r3, r3, #1
 8007240:	089b      	lsrpl	r3, r3, #2
 8007242:	2001      	movmi	r0, #1
 8007244:	6013      	strmi	r3, [r2, #0]
 8007246:	bf5c      	itt	pl
 8007248:	6013      	strpl	r3, [r2, #0]
 800724a:	2002      	movpl	r0, #2
 800724c:	4770      	bx	lr
 800724e:	b299      	uxth	r1, r3
 8007250:	b909      	cbnz	r1, 8007256 <__lo0bits+0x2a>
 8007252:	0c1b      	lsrs	r3, r3, #16
 8007254:	2010      	movs	r0, #16
 8007256:	b2d9      	uxtb	r1, r3
 8007258:	b909      	cbnz	r1, 800725e <__lo0bits+0x32>
 800725a:	3008      	adds	r0, #8
 800725c:	0a1b      	lsrs	r3, r3, #8
 800725e:	0719      	lsls	r1, r3, #28
 8007260:	bf04      	itt	eq
 8007262:	091b      	lsreq	r3, r3, #4
 8007264:	3004      	addeq	r0, #4
 8007266:	0799      	lsls	r1, r3, #30
 8007268:	bf04      	itt	eq
 800726a:	089b      	lsreq	r3, r3, #2
 800726c:	3002      	addeq	r0, #2
 800726e:	07d9      	lsls	r1, r3, #31
 8007270:	d403      	bmi.n	800727a <__lo0bits+0x4e>
 8007272:	085b      	lsrs	r3, r3, #1
 8007274:	f100 0001 	add.w	r0, r0, #1
 8007278:	d003      	beq.n	8007282 <__lo0bits+0x56>
 800727a:	6013      	str	r3, [r2, #0]
 800727c:	4770      	bx	lr
 800727e:	2000      	movs	r0, #0
 8007280:	4770      	bx	lr
 8007282:	2020      	movs	r0, #32
 8007284:	4770      	bx	lr
	...

08007288 <__i2b>:
 8007288:	b510      	push	{r4, lr}
 800728a:	460c      	mov	r4, r1
 800728c:	2101      	movs	r1, #1
 800728e:	f7ff febb 	bl	8007008 <_Balloc>
 8007292:	4602      	mov	r2, r0
 8007294:	b928      	cbnz	r0, 80072a2 <__i2b+0x1a>
 8007296:	4b05      	ldr	r3, [pc, #20]	; (80072ac <__i2b+0x24>)
 8007298:	4805      	ldr	r0, [pc, #20]	; (80072b0 <__i2b+0x28>)
 800729a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800729e:	f001 fa09 	bl	80086b4 <__assert_func>
 80072a2:	2301      	movs	r3, #1
 80072a4:	6144      	str	r4, [r0, #20]
 80072a6:	6103      	str	r3, [r0, #16]
 80072a8:	bd10      	pop	{r4, pc}
 80072aa:	bf00      	nop
 80072ac:	0800abc8 	.word	0x0800abc8
 80072b0:	0800ac54 	.word	0x0800ac54

080072b4 <__multiply>:
 80072b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b8:	4691      	mov	r9, r2
 80072ba:	690a      	ldr	r2, [r1, #16]
 80072bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	bfb8      	it	lt
 80072c4:	460b      	movlt	r3, r1
 80072c6:	460c      	mov	r4, r1
 80072c8:	bfbc      	itt	lt
 80072ca:	464c      	movlt	r4, r9
 80072cc:	4699      	movlt	r9, r3
 80072ce:	6927      	ldr	r7, [r4, #16]
 80072d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80072d4:	68a3      	ldr	r3, [r4, #8]
 80072d6:	6861      	ldr	r1, [r4, #4]
 80072d8:	eb07 060a 	add.w	r6, r7, sl
 80072dc:	42b3      	cmp	r3, r6
 80072de:	b085      	sub	sp, #20
 80072e0:	bfb8      	it	lt
 80072e2:	3101      	addlt	r1, #1
 80072e4:	f7ff fe90 	bl	8007008 <_Balloc>
 80072e8:	b930      	cbnz	r0, 80072f8 <__multiply+0x44>
 80072ea:	4602      	mov	r2, r0
 80072ec:	4b43      	ldr	r3, [pc, #268]	; (80073fc <__multiply+0x148>)
 80072ee:	4844      	ldr	r0, [pc, #272]	; (8007400 <__multiply+0x14c>)
 80072f0:	f240 115d 	movw	r1, #349	; 0x15d
 80072f4:	f001 f9de 	bl	80086b4 <__assert_func>
 80072f8:	f100 0514 	add.w	r5, r0, #20
 80072fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007300:	462b      	mov	r3, r5
 8007302:	2200      	movs	r2, #0
 8007304:	4543      	cmp	r3, r8
 8007306:	d321      	bcc.n	800734c <__multiply+0x98>
 8007308:	f104 0314 	add.w	r3, r4, #20
 800730c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007310:	f109 0314 	add.w	r3, r9, #20
 8007314:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007318:	9202      	str	r2, [sp, #8]
 800731a:	1b3a      	subs	r2, r7, r4
 800731c:	3a15      	subs	r2, #21
 800731e:	f022 0203 	bic.w	r2, r2, #3
 8007322:	3204      	adds	r2, #4
 8007324:	f104 0115 	add.w	r1, r4, #21
 8007328:	428f      	cmp	r7, r1
 800732a:	bf38      	it	cc
 800732c:	2204      	movcc	r2, #4
 800732e:	9201      	str	r2, [sp, #4]
 8007330:	9a02      	ldr	r2, [sp, #8]
 8007332:	9303      	str	r3, [sp, #12]
 8007334:	429a      	cmp	r2, r3
 8007336:	d80c      	bhi.n	8007352 <__multiply+0x9e>
 8007338:	2e00      	cmp	r6, #0
 800733a:	dd03      	ble.n	8007344 <__multiply+0x90>
 800733c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007340:	2b00      	cmp	r3, #0
 8007342:	d059      	beq.n	80073f8 <__multiply+0x144>
 8007344:	6106      	str	r6, [r0, #16]
 8007346:	b005      	add	sp, #20
 8007348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800734c:	f843 2b04 	str.w	r2, [r3], #4
 8007350:	e7d8      	b.n	8007304 <__multiply+0x50>
 8007352:	f8b3 a000 	ldrh.w	sl, [r3]
 8007356:	f1ba 0f00 	cmp.w	sl, #0
 800735a:	d023      	beq.n	80073a4 <__multiply+0xf0>
 800735c:	f104 0e14 	add.w	lr, r4, #20
 8007360:	46a9      	mov	r9, r5
 8007362:	f04f 0c00 	mov.w	ip, #0
 8007366:	f85e 2b04 	ldr.w	r2, [lr], #4
 800736a:	f8d9 1000 	ldr.w	r1, [r9]
 800736e:	fa1f fb82 	uxth.w	fp, r2
 8007372:	b289      	uxth	r1, r1
 8007374:	fb0a 110b 	mla	r1, sl, fp, r1
 8007378:	4461      	add	r1, ip
 800737a:	f8d9 c000 	ldr.w	ip, [r9]
 800737e:	0c12      	lsrs	r2, r2, #16
 8007380:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007384:	fb0a c202 	mla	r2, sl, r2, ip
 8007388:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800738c:	b289      	uxth	r1, r1
 800738e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007392:	4577      	cmp	r7, lr
 8007394:	f849 1b04 	str.w	r1, [r9], #4
 8007398:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800739c:	d8e3      	bhi.n	8007366 <__multiply+0xb2>
 800739e:	9a01      	ldr	r2, [sp, #4]
 80073a0:	f845 c002 	str.w	ip, [r5, r2]
 80073a4:	9a03      	ldr	r2, [sp, #12]
 80073a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80073aa:	3304      	adds	r3, #4
 80073ac:	f1b9 0f00 	cmp.w	r9, #0
 80073b0:	d020      	beq.n	80073f4 <__multiply+0x140>
 80073b2:	6829      	ldr	r1, [r5, #0]
 80073b4:	f104 0c14 	add.w	ip, r4, #20
 80073b8:	46ae      	mov	lr, r5
 80073ba:	f04f 0a00 	mov.w	sl, #0
 80073be:	f8bc b000 	ldrh.w	fp, [ip]
 80073c2:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80073c6:	fb09 220b 	mla	r2, r9, fp, r2
 80073ca:	4492      	add	sl, r2
 80073cc:	b289      	uxth	r1, r1
 80073ce:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80073d2:	f84e 1b04 	str.w	r1, [lr], #4
 80073d6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80073da:	f8be 1000 	ldrh.w	r1, [lr]
 80073de:	0c12      	lsrs	r2, r2, #16
 80073e0:	fb09 1102 	mla	r1, r9, r2, r1
 80073e4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80073e8:	4567      	cmp	r7, ip
 80073ea:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80073ee:	d8e6      	bhi.n	80073be <__multiply+0x10a>
 80073f0:	9a01      	ldr	r2, [sp, #4]
 80073f2:	50a9      	str	r1, [r5, r2]
 80073f4:	3504      	adds	r5, #4
 80073f6:	e79b      	b.n	8007330 <__multiply+0x7c>
 80073f8:	3e01      	subs	r6, #1
 80073fa:	e79d      	b.n	8007338 <__multiply+0x84>
 80073fc:	0800abc8 	.word	0x0800abc8
 8007400:	0800ac54 	.word	0x0800ac54

08007404 <__pow5mult>:
 8007404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007408:	4615      	mov	r5, r2
 800740a:	f012 0203 	ands.w	r2, r2, #3
 800740e:	4606      	mov	r6, r0
 8007410:	460f      	mov	r7, r1
 8007412:	d007      	beq.n	8007424 <__pow5mult+0x20>
 8007414:	4c25      	ldr	r4, [pc, #148]	; (80074ac <__pow5mult+0xa8>)
 8007416:	3a01      	subs	r2, #1
 8007418:	2300      	movs	r3, #0
 800741a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800741e:	f7ff fe55 	bl	80070cc <__multadd>
 8007422:	4607      	mov	r7, r0
 8007424:	10ad      	asrs	r5, r5, #2
 8007426:	d03d      	beq.n	80074a4 <__pow5mult+0xa0>
 8007428:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800742a:	b97c      	cbnz	r4, 800744c <__pow5mult+0x48>
 800742c:	2010      	movs	r0, #16
 800742e:	f7ff fdc3 	bl	8006fb8 <malloc>
 8007432:	4602      	mov	r2, r0
 8007434:	6270      	str	r0, [r6, #36]	; 0x24
 8007436:	b928      	cbnz	r0, 8007444 <__pow5mult+0x40>
 8007438:	4b1d      	ldr	r3, [pc, #116]	; (80074b0 <__pow5mult+0xac>)
 800743a:	481e      	ldr	r0, [pc, #120]	; (80074b4 <__pow5mult+0xb0>)
 800743c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007440:	f001 f938 	bl	80086b4 <__assert_func>
 8007444:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007448:	6004      	str	r4, [r0, #0]
 800744a:	60c4      	str	r4, [r0, #12]
 800744c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007450:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007454:	b94c      	cbnz	r4, 800746a <__pow5mult+0x66>
 8007456:	f240 2171 	movw	r1, #625	; 0x271
 800745a:	4630      	mov	r0, r6
 800745c:	f7ff ff14 	bl	8007288 <__i2b>
 8007460:	2300      	movs	r3, #0
 8007462:	f8c8 0008 	str.w	r0, [r8, #8]
 8007466:	4604      	mov	r4, r0
 8007468:	6003      	str	r3, [r0, #0]
 800746a:	f04f 0900 	mov.w	r9, #0
 800746e:	07eb      	lsls	r3, r5, #31
 8007470:	d50a      	bpl.n	8007488 <__pow5mult+0x84>
 8007472:	4639      	mov	r1, r7
 8007474:	4622      	mov	r2, r4
 8007476:	4630      	mov	r0, r6
 8007478:	f7ff ff1c 	bl	80072b4 <__multiply>
 800747c:	4639      	mov	r1, r7
 800747e:	4680      	mov	r8, r0
 8007480:	4630      	mov	r0, r6
 8007482:	f7ff fe01 	bl	8007088 <_Bfree>
 8007486:	4647      	mov	r7, r8
 8007488:	106d      	asrs	r5, r5, #1
 800748a:	d00b      	beq.n	80074a4 <__pow5mult+0xa0>
 800748c:	6820      	ldr	r0, [r4, #0]
 800748e:	b938      	cbnz	r0, 80074a0 <__pow5mult+0x9c>
 8007490:	4622      	mov	r2, r4
 8007492:	4621      	mov	r1, r4
 8007494:	4630      	mov	r0, r6
 8007496:	f7ff ff0d 	bl	80072b4 <__multiply>
 800749a:	6020      	str	r0, [r4, #0]
 800749c:	f8c0 9000 	str.w	r9, [r0]
 80074a0:	4604      	mov	r4, r0
 80074a2:	e7e4      	b.n	800746e <__pow5mult+0x6a>
 80074a4:	4638      	mov	r0, r7
 80074a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074aa:	bf00      	nop
 80074ac:	0800ada0 	.word	0x0800ada0
 80074b0:	0800ab56 	.word	0x0800ab56
 80074b4:	0800ac54 	.word	0x0800ac54

080074b8 <__lshift>:
 80074b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074bc:	460c      	mov	r4, r1
 80074be:	6849      	ldr	r1, [r1, #4]
 80074c0:	6923      	ldr	r3, [r4, #16]
 80074c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074c6:	68a3      	ldr	r3, [r4, #8]
 80074c8:	4607      	mov	r7, r0
 80074ca:	4691      	mov	r9, r2
 80074cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074d0:	f108 0601 	add.w	r6, r8, #1
 80074d4:	42b3      	cmp	r3, r6
 80074d6:	db0b      	blt.n	80074f0 <__lshift+0x38>
 80074d8:	4638      	mov	r0, r7
 80074da:	f7ff fd95 	bl	8007008 <_Balloc>
 80074de:	4605      	mov	r5, r0
 80074e0:	b948      	cbnz	r0, 80074f6 <__lshift+0x3e>
 80074e2:	4602      	mov	r2, r0
 80074e4:	4b2a      	ldr	r3, [pc, #168]	; (8007590 <__lshift+0xd8>)
 80074e6:	482b      	ldr	r0, [pc, #172]	; (8007594 <__lshift+0xdc>)
 80074e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80074ec:	f001 f8e2 	bl	80086b4 <__assert_func>
 80074f0:	3101      	adds	r1, #1
 80074f2:	005b      	lsls	r3, r3, #1
 80074f4:	e7ee      	b.n	80074d4 <__lshift+0x1c>
 80074f6:	2300      	movs	r3, #0
 80074f8:	f100 0114 	add.w	r1, r0, #20
 80074fc:	f100 0210 	add.w	r2, r0, #16
 8007500:	4618      	mov	r0, r3
 8007502:	4553      	cmp	r3, sl
 8007504:	db37      	blt.n	8007576 <__lshift+0xbe>
 8007506:	6920      	ldr	r0, [r4, #16]
 8007508:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800750c:	f104 0314 	add.w	r3, r4, #20
 8007510:	f019 091f 	ands.w	r9, r9, #31
 8007514:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007518:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800751c:	d02f      	beq.n	800757e <__lshift+0xc6>
 800751e:	f1c9 0e20 	rsb	lr, r9, #32
 8007522:	468a      	mov	sl, r1
 8007524:	f04f 0c00 	mov.w	ip, #0
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	fa02 f209 	lsl.w	r2, r2, r9
 800752e:	ea42 020c 	orr.w	r2, r2, ip
 8007532:	f84a 2b04 	str.w	r2, [sl], #4
 8007536:	f853 2b04 	ldr.w	r2, [r3], #4
 800753a:	4298      	cmp	r0, r3
 800753c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007540:	d8f2      	bhi.n	8007528 <__lshift+0x70>
 8007542:	1b03      	subs	r3, r0, r4
 8007544:	3b15      	subs	r3, #21
 8007546:	f023 0303 	bic.w	r3, r3, #3
 800754a:	3304      	adds	r3, #4
 800754c:	f104 0215 	add.w	r2, r4, #21
 8007550:	4290      	cmp	r0, r2
 8007552:	bf38      	it	cc
 8007554:	2304      	movcc	r3, #4
 8007556:	f841 c003 	str.w	ip, [r1, r3]
 800755a:	f1bc 0f00 	cmp.w	ip, #0
 800755e:	d001      	beq.n	8007564 <__lshift+0xac>
 8007560:	f108 0602 	add.w	r6, r8, #2
 8007564:	3e01      	subs	r6, #1
 8007566:	4638      	mov	r0, r7
 8007568:	612e      	str	r6, [r5, #16]
 800756a:	4621      	mov	r1, r4
 800756c:	f7ff fd8c 	bl	8007088 <_Bfree>
 8007570:	4628      	mov	r0, r5
 8007572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007576:	f842 0f04 	str.w	r0, [r2, #4]!
 800757a:	3301      	adds	r3, #1
 800757c:	e7c1      	b.n	8007502 <__lshift+0x4a>
 800757e:	3904      	subs	r1, #4
 8007580:	f853 2b04 	ldr.w	r2, [r3], #4
 8007584:	f841 2f04 	str.w	r2, [r1, #4]!
 8007588:	4298      	cmp	r0, r3
 800758a:	d8f9      	bhi.n	8007580 <__lshift+0xc8>
 800758c:	e7ea      	b.n	8007564 <__lshift+0xac>
 800758e:	bf00      	nop
 8007590:	0800abc8 	.word	0x0800abc8
 8007594:	0800ac54 	.word	0x0800ac54

08007598 <__mcmp>:
 8007598:	690a      	ldr	r2, [r1, #16]
 800759a:	4603      	mov	r3, r0
 800759c:	6900      	ldr	r0, [r0, #16]
 800759e:	1a80      	subs	r0, r0, r2
 80075a0:	b530      	push	{r4, r5, lr}
 80075a2:	d10d      	bne.n	80075c0 <__mcmp+0x28>
 80075a4:	3314      	adds	r3, #20
 80075a6:	3114      	adds	r1, #20
 80075a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80075ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80075b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80075b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80075b8:	4295      	cmp	r5, r2
 80075ba:	d002      	beq.n	80075c2 <__mcmp+0x2a>
 80075bc:	d304      	bcc.n	80075c8 <__mcmp+0x30>
 80075be:	2001      	movs	r0, #1
 80075c0:	bd30      	pop	{r4, r5, pc}
 80075c2:	42a3      	cmp	r3, r4
 80075c4:	d3f4      	bcc.n	80075b0 <__mcmp+0x18>
 80075c6:	e7fb      	b.n	80075c0 <__mcmp+0x28>
 80075c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075cc:	e7f8      	b.n	80075c0 <__mcmp+0x28>
	...

080075d0 <__mdiff>:
 80075d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d4:	460d      	mov	r5, r1
 80075d6:	4607      	mov	r7, r0
 80075d8:	4611      	mov	r1, r2
 80075da:	4628      	mov	r0, r5
 80075dc:	4614      	mov	r4, r2
 80075de:	f7ff ffdb 	bl	8007598 <__mcmp>
 80075e2:	1e06      	subs	r6, r0, #0
 80075e4:	d111      	bne.n	800760a <__mdiff+0x3a>
 80075e6:	4631      	mov	r1, r6
 80075e8:	4638      	mov	r0, r7
 80075ea:	f7ff fd0d 	bl	8007008 <_Balloc>
 80075ee:	4602      	mov	r2, r0
 80075f0:	b928      	cbnz	r0, 80075fe <__mdiff+0x2e>
 80075f2:	4b39      	ldr	r3, [pc, #228]	; (80076d8 <__mdiff+0x108>)
 80075f4:	f240 2132 	movw	r1, #562	; 0x232
 80075f8:	4838      	ldr	r0, [pc, #224]	; (80076dc <__mdiff+0x10c>)
 80075fa:	f001 f85b 	bl	80086b4 <__assert_func>
 80075fe:	2301      	movs	r3, #1
 8007600:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007604:	4610      	mov	r0, r2
 8007606:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800760a:	bfa4      	itt	ge
 800760c:	4623      	movge	r3, r4
 800760e:	462c      	movge	r4, r5
 8007610:	4638      	mov	r0, r7
 8007612:	6861      	ldr	r1, [r4, #4]
 8007614:	bfa6      	itte	ge
 8007616:	461d      	movge	r5, r3
 8007618:	2600      	movge	r6, #0
 800761a:	2601      	movlt	r6, #1
 800761c:	f7ff fcf4 	bl	8007008 <_Balloc>
 8007620:	4602      	mov	r2, r0
 8007622:	b918      	cbnz	r0, 800762c <__mdiff+0x5c>
 8007624:	4b2c      	ldr	r3, [pc, #176]	; (80076d8 <__mdiff+0x108>)
 8007626:	f44f 7110 	mov.w	r1, #576	; 0x240
 800762a:	e7e5      	b.n	80075f8 <__mdiff+0x28>
 800762c:	6927      	ldr	r7, [r4, #16]
 800762e:	60c6      	str	r6, [r0, #12]
 8007630:	692e      	ldr	r6, [r5, #16]
 8007632:	f104 0014 	add.w	r0, r4, #20
 8007636:	f105 0914 	add.w	r9, r5, #20
 800763a:	f102 0e14 	add.w	lr, r2, #20
 800763e:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8007642:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007646:	3410      	adds	r4, #16
 8007648:	46f2      	mov	sl, lr
 800764a:	2100      	movs	r1, #0
 800764c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007650:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007654:	fa1f f883 	uxth.w	r8, r3
 8007658:	fa11 f18b 	uxtah	r1, r1, fp
 800765c:	0c1b      	lsrs	r3, r3, #16
 800765e:	eba1 0808 	sub.w	r8, r1, r8
 8007662:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007666:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800766a:	fa1f f888 	uxth.w	r8, r8
 800766e:	1419      	asrs	r1, r3, #16
 8007670:	454e      	cmp	r6, r9
 8007672:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007676:	f84a 3b04 	str.w	r3, [sl], #4
 800767a:	d8e7      	bhi.n	800764c <__mdiff+0x7c>
 800767c:	1b73      	subs	r3, r6, r5
 800767e:	3b15      	subs	r3, #21
 8007680:	f023 0303 	bic.w	r3, r3, #3
 8007684:	3304      	adds	r3, #4
 8007686:	3515      	adds	r5, #21
 8007688:	42ae      	cmp	r6, r5
 800768a:	bf38      	it	cc
 800768c:	2304      	movcc	r3, #4
 800768e:	4418      	add	r0, r3
 8007690:	4473      	add	r3, lr
 8007692:	469e      	mov	lr, r3
 8007694:	4606      	mov	r6, r0
 8007696:	4566      	cmp	r6, ip
 8007698:	d30e      	bcc.n	80076b8 <__mdiff+0xe8>
 800769a:	f10c 0103 	add.w	r1, ip, #3
 800769e:	1a09      	subs	r1, r1, r0
 80076a0:	f021 0103 	bic.w	r1, r1, #3
 80076a4:	3803      	subs	r0, #3
 80076a6:	4584      	cmp	ip, r0
 80076a8:	bf38      	it	cc
 80076aa:	2100      	movcc	r1, #0
 80076ac:	4419      	add	r1, r3
 80076ae:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80076b2:	b17b      	cbz	r3, 80076d4 <__mdiff+0x104>
 80076b4:	6117      	str	r7, [r2, #16]
 80076b6:	e7a5      	b.n	8007604 <__mdiff+0x34>
 80076b8:	f856 8b04 	ldr.w	r8, [r6], #4
 80076bc:	fa11 f488 	uxtah	r4, r1, r8
 80076c0:	1425      	asrs	r5, r4, #16
 80076c2:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 80076c6:	b2a4      	uxth	r4, r4
 80076c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80076cc:	f84e 4b04 	str.w	r4, [lr], #4
 80076d0:	1429      	asrs	r1, r5, #16
 80076d2:	e7e0      	b.n	8007696 <__mdiff+0xc6>
 80076d4:	3f01      	subs	r7, #1
 80076d6:	e7ea      	b.n	80076ae <__mdiff+0xde>
 80076d8:	0800abc8 	.word	0x0800abc8
 80076dc:	0800ac54 	.word	0x0800ac54

080076e0 <__ulp>:
 80076e0:	4b11      	ldr	r3, [pc, #68]	; (8007728 <__ulp+0x48>)
 80076e2:	400b      	ands	r3, r1
 80076e4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	dd02      	ble.n	80076f2 <__ulp+0x12>
 80076ec:	2000      	movs	r0, #0
 80076ee:	4619      	mov	r1, r3
 80076f0:	4770      	bx	lr
 80076f2:	425b      	negs	r3, r3
 80076f4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80076f8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80076fc:	f04f 0000 	mov.w	r0, #0
 8007700:	f04f 0100 	mov.w	r1, #0
 8007704:	da04      	bge.n	8007710 <__ulp+0x30>
 8007706:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800770a:	fa43 f102 	asr.w	r1, r3, r2
 800770e:	4770      	bx	lr
 8007710:	f1a2 0314 	sub.w	r3, r2, #20
 8007714:	2b1e      	cmp	r3, #30
 8007716:	bfda      	itte	le
 8007718:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800771c:	fa22 f303 	lsrle.w	r3, r2, r3
 8007720:	2301      	movgt	r3, #1
 8007722:	4618      	mov	r0, r3
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	7ff00000 	.word	0x7ff00000

0800772c <__b2d>:
 800772c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007730:	6907      	ldr	r7, [r0, #16]
 8007732:	f100 0914 	add.w	r9, r0, #20
 8007736:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800773a:	f1a7 0804 	sub.w	r8, r7, #4
 800773e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007742:	4630      	mov	r0, r6
 8007744:	f7ff fd52 	bl	80071ec <__hi0bits>
 8007748:	f1c0 0320 	rsb	r3, r0, #32
 800774c:	280a      	cmp	r0, #10
 800774e:	600b      	str	r3, [r1, #0]
 8007750:	491f      	ldr	r1, [pc, #124]	; (80077d0 <__b2d+0xa4>)
 8007752:	dc17      	bgt.n	8007784 <__b2d+0x58>
 8007754:	f1c0 0c0b 	rsb	ip, r0, #11
 8007758:	45c1      	cmp	r9, r8
 800775a:	fa26 f30c 	lsr.w	r3, r6, ip
 800775e:	bf38      	it	cc
 8007760:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007764:	ea43 0501 	orr.w	r5, r3, r1
 8007768:	bf28      	it	cs
 800776a:	2200      	movcs	r2, #0
 800776c:	f100 0315 	add.w	r3, r0, #21
 8007770:	fa06 f303 	lsl.w	r3, r6, r3
 8007774:	fa22 f20c 	lsr.w	r2, r2, ip
 8007778:	ea43 0402 	orr.w	r4, r3, r2
 800777c:	4620      	mov	r0, r4
 800777e:	4629      	mov	r1, r5
 8007780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007784:	45c1      	cmp	r9, r8
 8007786:	bf3a      	itte	cc
 8007788:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800778c:	f1a7 0808 	subcc.w	r8, r7, #8
 8007790:	2200      	movcs	r2, #0
 8007792:	f1b0 030b 	subs.w	r3, r0, #11
 8007796:	d016      	beq.n	80077c6 <__b2d+0x9a>
 8007798:	f1c3 0720 	rsb	r7, r3, #32
 800779c:	fa22 f107 	lsr.w	r1, r2, r7
 80077a0:	45c8      	cmp	r8, r9
 80077a2:	fa06 f603 	lsl.w	r6, r6, r3
 80077a6:	ea46 0601 	orr.w	r6, r6, r1
 80077aa:	bf8c      	ite	hi
 80077ac:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80077b0:	2100      	movls	r1, #0
 80077b2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80077b6:	fa02 f003 	lsl.w	r0, r2, r3
 80077ba:	40f9      	lsrs	r1, r7
 80077bc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80077c0:	ea40 0401 	orr.w	r4, r0, r1
 80077c4:	e7da      	b.n	800777c <__b2d+0x50>
 80077c6:	ea46 0501 	orr.w	r5, r6, r1
 80077ca:	4614      	mov	r4, r2
 80077cc:	e7d6      	b.n	800777c <__b2d+0x50>
 80077ce:	bf00      	nop
 80077d0:	3ff00000 	.word	0x3ff00000

080077d4 <__d2b>:
 80077d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80077d8:	2101      	movs	r1, #1
 80077da:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80077de:	4690      	mov	r8, r2
 80077e0:	461d      	mov	r5, r3
 80077e2:	f7ff fc11 	bl	8007008 <_Balloc>
 80077e6:	4604      	mov	r4, r0
 80077e8:	b930      	cbnz	r0, 80077f8 <__d2b+0x24>
 80077ea:	4602      	mov	r2, r0
 80077ec:	4b25      	ldr	r3, [pc, #148]	; (8007884 <__d2b+0xb0>)
 80077ee:	4826      	ldr	r0, [pc, #152]	; (8007888 <__d2b+0xb4>)
 80077f0:	f240 310a 	movw	r1, #778	; 0x30a
 80077f4:	f000 ff5e 	bl	80086b4 <__assert_func>
 80077f8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80077fc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007800:	bb2d      	cbnz	r5, 800784e <__d2b+0x7a>
 8007802:	9301      	str	r3, [sp, #4]
 8007804:	f1b8 0300 	subs.w	r3, r8, #0
 8007808:	d026      	beq.n	8007858 <__d2b+0x84>
 800780a:	4668      	mov	r0, sp
 800780c:	9300      	str	r3, [sp, #0]
 800780e:	f7ff fd0d 	bl	800722c <__lo0bits>
 8007812:	9900      	ldr	r1, [sp, #0]
 8007814:	b1f0      	cbz	r0, 8007854 <__d2b+0x80>
 8007816:	9a01      	ldr	r2, [sp, #4]
 8007818:	f1c0 0320 	rsb	r3, r0, #32
 800781c:	fa02 f303 	lsl.w	r3, r2, r3
 8007820:	430b      	orrs	r3, r1
 8007822:	40c2      	lsrs	r2, r0
 8007824:	6163      	str	r3, [r4, #20]
 8007826:	9201      	str	r2, [sp, #4]
 8007828:	9b01      	ldr	r3, [sp, #4]
 800782a:	61a3      	str	r3, [r4, #24]
 800782c:	2b00      	cmp	r3, #0
 800782e:	bf14      	ite	ne
 8007830:	2102      	movne	r1, #2
 8007832:	2101      	moveq	r1, #1
 8007834:	6121      	str	r1, [r4, #16]
 8007836:	b1c5      	cbz	r5, 800786a <__d2b+0x96>
 8007838:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800783c:	4405      	add	r5, r0
 800783e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007842:	603d      	str	r5, [r7, #0]
 8007844:	6030      	str	r0, [r6, #0]
 8007846:	4620      	mov	r0, r4
 8007848:	b002      	add	sp, #8
 800784a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800784e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007852:	e7d6      	b.n	8007802 <__d2b+0x2e>
 8007854:	6161      	str	r1, [r4, #20]
 8007856:	e7e7      	b.n	8007828 <__d2b+0x54>
 8007858:	a801      	add	r0, sp, #4
 800785a:	f7ff fce7 	bl	800722c <__lo0bits>
 800785e:	9b01      	ldr	r3, [sp, #4]
 8007860:	6163      	str	r3, [r4, #20]
 8007862:	2101      	movs	r1, #1
 8007864:	6121      	str	r1, [r4, #16]
 8007866:	3020      	adds	r0, #32
 8007868:	e7e5      	b.n	8007836 <__d2b+0x62>
 800786a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800786e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007872:	6038      	str	r0, [r7, #0]
 8007874:	6918      	ldr	r0, [r3, #16]
 8007876:	f7ff fcb9 	bl	80071ec <__hi0bits>
 800787a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800787e:	6031      	str	r1, [r6, #0]
 8007880:	e7e1      	b.n	8007846 <__d2b+0x72>
 8007882:	bf00      	nop
 8007884:	0800abc8 	.word	0x0800abc8
 8007888:	0800ac54 	.word	0x0800ac54

0800788c <__ratio>:
 800788c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007890:	4688      	mov	r8, r1
 8007892:	4669      	mov	r1, sp
 8007894:	4681      	mov	r9, r0
 8007896:	f7ff ff49 	bl	800772c <__b2d>
 800789a:	460f      	mov	r7, r1
 800789c:	4604      	mov	r4, r0
 800789e:	460d      	mov	r5, r1
 80078a0:	4640      	mov	r0, r8
 80078a2:	a901      	add	r1, sp, #4
 80078a4:	f7ff ff42 	bl	800772c <__b2d>
 80078a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80078ac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80078b0:	eba3 0c02 	sub.w	ip, r3, r2
 80078b4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80078b8:	1a9b      	subs	r3, r3, r2
 80078ba:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80078be:	2b00      	cmp	r3, #0
 80078c0:	bfd5      	itete	le
 80078c2:	460a      	movle	r2, r1
 80078c4:	462a      	movgt	r2, r5
 80078c6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80078ca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80078ce:	468b      	mov	fp, r1
 80078d0:	bfd8      	it	le
 80078d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80078d6:	465b      	mov	r3, fp
 80078d8:	4602      	mov	r2, r0
 80078da:	4639      	mov	r1, r7
 80078dc:	4620      	mov	r0, r4
 80078de:	f7f8 ffcd 	bl	800087c <__aeabi_ddiv>
 80078e2:	b003      	add	sp, #12
 80078e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080078e8 <__copybits>:
 80078e8:	3901      	subs	r1, #1
 80078ea:	b570      	push	{r4, r5, r6, lr}
 80078ec:	1149      	asrs	r1, r1, #5
 80078ee:	6914      	ldr	r4, [r2, #16]
 80078f0:	3101      	adds	r1, #1
 80078f2:	f102 0314 	add.w	r3, r2, #20
 80078f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80078fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80078fe:	1f05      	subs	r5, r0, #4
 8007900:	42a3      	cmp	r3, r4
 8007902:	d30c      	bcc.n	800791e <__copybits+0x36>
 8007904:	1aa3      	subs	r3, r4, r2
 8007906:	3b11      	subs	r3, #17
 8007908:	f023 0303 	bic.w	r3, r3, #3
 800790c:	3211      	adds	r2, #17
 800790e:	42a2      	cmp	r2, r4
 8007910:	bf88      	it	hi
 8007912:	2300      	movhi	r3, #0
 8007914:	4418      	add	r0, r3
 8007916:	2300      	movs	r3, #0
 8007918:	4288      	cmp	r0, r1
 800791a:	d305      	bcc.n	8007928 <__copybits+0x40>
 800791c:	bd70      	pop	{r4, r5, r6, pc}
 800791e:	f853 6b04 	ldr.w	r6, [r3], #4
 8007922:	f845 6f04 	str.w	r6, [r5, #4]!
 8007926:	e7eb      	b.n	8007900 <__copybits+0x18>
 8007928:	f840 3b04 	str.w	r3, [r0], #4
 800792c:	e7f4      	b.n	8007918 <__copybits+0x30>

0800792e <__any_on>:
 800792e:	f100 0214 	add.w	r2, r0, #20
 8007932:	6900      	ldr	r0, [r0, #16]
 8007934:	114b      	asrs	r3, r1, #5
 8007936:	4298      	cmp	r0, r3
 8007938:	b510      	push	{r4, lr}
 800793a:	db11      	blt.n	8007960 <__any_on+0x32>
 800793c:	dd0a      	ble.n	8007954 <__any_on+0x26>
 800793e:	f011 011f 	ands.w	r1, r1, #31
 8007942:	d007      	beq.n	8007954 <__any_on+0x26>
 8007944:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007948:	fa24 f001 	lsr.w	r0, r4, r1
 800794c:	fa00 f101 	lsl.w	r1, r0, r1
 8007950:	428c      	cmp	r4, r1
 8007952:	d10b      	bne.n	800796c <__any_on+0x3e>
 8007954:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007958:	4293      	cmp	r3, r2
 800795a:	d803      	bhi.n	8007964 <__any_on+0x36>
 800795c:	2000      	movs	r0, #0
 800795e:	bd10      	pop	{r4, pc}
 8007960:	4603      	mov	r3, r0
 8007962:	e7f7      	b.n	8007954 <__any_on+0x26>
 8007964:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007968:	2900      	cmp	r1, #0
 800796a:	d0f5      	beq.n	8007958 <__any_on+0x2a>
 800796c:	2001      	movs	r0, #1
 800796e:	e7f6      	b.n	800795e <__any_on+0x30>

08007970 <_calloc_r>:
 8007970:	b570      	push	{r4, r5, r6, lr}
 8007972:	fba1 5402 	umull	r5, r4, r1, r2
 8007976:	b934      	cbnz	r4, 8007986 <_calloc_r+0x16>
 8007978:	4629      	mov	r1, r5
 800797a:	f000 f877 	bl	8007a6c <_malloc_r>
 800797e:	4606      	mov	r6, r0
 8007980:	b928      	cbnz	r0, 800798e <_calloc_r+0x1e>
 8007982:	4630      	mov	r0, r6
 8007984:	bd70      	pop	{r4, r5, r6, pc}
 8007986:	220c      	movs	r2, #12
 8007988:	6002      	str	r2, [r0, #0]
 800798a:	2600      	movs	r6, #0
 800798c:	e7f9      	b.n	8007982 <_calloc_r+0x12>
 800798e:	462a      	mov	r2, r5
 8007990:	4621      	mov	r1, r4
 8007992:	f7fc fb63 	bl	800405c <memset>
 8007996:	e7f4      	b.n	8007982 <_calloc_r+0x12>

08007998 <_free_r>:
 8007998:	b538      	push	{r3, r4, r5, lr}
 800799a:	4605      	mov	r5, r0
 800799c:	2900      	cmp	r1, #0
 800799e:	d041      	beq.n	8007a24 <_free_r+0x8c>
 80079a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079a4:	1f0c      	subs	r4, r1, #4
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	bfb8      	it	lt
 80079aa:	18e4      	addlt	r4, r4, r3
 80079ac:	f001 f882 	bl	8008ab4 <__malloc_lock>
 80079b0:	4a1d      	ldr	r2, [pc, #116]	; (8007a28 <_free_r+0x90>)
 80079b2:	6813      	ldr	r3, [r2, #0]
 80079b4:	b933      	cbnz	r3, 80079c4 <_free_r+0x2c>
 80079b6:	6063      	str	r3, [r4, #4]
 80079b8:	6014      	str	r4, [r2, #0]
 80079ba:	4628      	mov	r0, r5
 80079bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079c0:	f001 b87e 	b.w	8008ac0 <__malloc_unlock>
 80079c4:	42a3      	cmp	r3, r4
 80079c6:	d908      	bls.n	80079da <_free_r+0x42>
 80079c8:	6820      	ldr	r0, [r4, #0]
 80079ca:	1821      	adds	r1, r4, r0
 80079cc:	428b      	cmp	r3, r1
 80079ce:	bf01      	itttt	eq
 80079d0:	6819      	ldreq	r1, [r3, #0]
 80079d2:	685b      	ldreq	r3, [r3, #4]
 80079d4:	1809      	addeq	r1, r1, r0
 80079d6:	6021      	streq	r1, [r4, #0]
 80079d8:	e7ed      	b.n	80079b6 <_free_r+0x1e>
 80079da:	461a      	mov	r2, r3
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	b10b      	cbz	r3, 80079e4 <_free_r+0x4c>
 80079e0:	42a3      	cmp	r3, r4
 80079e2:	d9fa      	bls.n	80079da <_free_r+0x42>
 80079e4:	6811      	ldr	r1, [r2, #0]
 80079e6:	1850      	adds	r0, r2, r1
 80079e8:	42a0      	cmp	r0, r4
 80079ea:	d10b      	bne.n	8007a04 <_free_r+0x6c>
 80079ec:	6820      	ldr	r0, [r4, #0]
 80079ee:	4401      	add	r1, r0
 80079f0:	1850      	adds	r0, r2, r1
 80079f2:	4283      	cmp	r3, r0
 80079f4:	6011      	str	r1, [r2, #0]
 80079f6:	d1e0      	bne.n	80079ba <_free_r+0x22>
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	6053      	str	r3, [r2, #4]
 80079fe:	4401      	add	r1, r0
 8007a00:	6011      	str	r1, [r2, #0]
 8007a02:	e7da      	b.n	80079ba <_free_r+0x22>
 8007a04:	d902      	bls.n	8007a0c <_free_r+0x74>
 8007a06:	230c      	movs	r3, #12
 8007a08:	602b      	str	r3, [r5, #0]
 8007a0a:	e7d6      	b.n	80079ba <_free_r+0x22>
 8007a0c:	6820      	ldr	r0, [r4, #0]
 8007a0e:	1821      	adds	r1, r4, r0
 8007a10:	428b      	cmp	r3, r1
 8007a12:	bf04      	itt	eq
 8007a14:	6819      	ldreq	r1, [r3, #0]
 8007a16:	685b      	ldreq	r3, [r3, #4]
 8007a18:	6063      	str	r3, [r4, #4]
 8007a1a:	bf04      	itt	eq
 8007a1c:	1809      	addeq	r1, r1, r0
 8007a1e:	6021      	streq	r1, [r4, #0]
 8007a20:	6054      	str	r4, [r2, #4]
 8007a22:	e7ca      	b.n	80079ba <_free_r+0x22>
 8007a24:	bd38      	pop	{r3, r4, r5, pc}
 8007a26:	bf00      	nop
 8007a28:	20003ce4 	.word	0x20003ce4

08007a2c <sbrk_aligned>:
 8007a2c:	b570      	push	{r4, r5, r6, lr}
 8007a2e:	4e0e      	ldr	r6, [pc, #56]	; (8007a68 <sbrk_aligned+0x3c>)
 8007a30:	460c      	mov	r4, r1
 8007a32:	6831      	ldr	r1, [r6, #0]
 8007a34:	4605      	mov	r5, r0
 8007a36:	b911      	cbnz	r1, 8007a3e <sbrk_aligned+0x12>
 8007a38:	f000 fd24 	bl	8008484 <_sbrk_r>
 8007a3c:	6030      	str	r0, [r6, #0]
 8007a3e:	4621      	mov	r1, r4
 8007a40:	4628      	mov	r0, r5
 8007a42:	f000 fd1f 	bl	8008484 <_sbrk_r>
 8007a46:	1c43      	adds	r3, r0, #1
 8007a48:	d00a      	beq.n	8007a60 <sbrk_aligned+0x34>
 8007a4a:	1cc4      	adds	r4, r0, #3
 8007a4c:	f024 0403 	bic.w	r4, r4, #3
 8007a50:	42a0      	cmp	r0, r4
 8007a52:	d007      	beq.n	8007a64 <sbrk_aligned+0x38>
 8007a54:	1a21      	subs	r1, r4, r0
 8007a56:	4628      	mov	r0, r5
 8007a58:	f000 fd14 	bl	8008484 <_sbrk_r>
 8007a5c:	3001      	adds	r0, #1
 8007a5e:	d101      	bne.n	8007a64 <sbrk_aligned+0x38>
 8007a60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007a64:	4620      	mov	r0, r4
 8007a66:	bd70      	pop	{r4, r5, r6, pc}
 8007a68:	20003ce8 	.word	0x20003ce8

08007a6c <_malloc_r>:
 8007a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a70:	1ccd      	adds	r5, r1, #3
 8007a72:	f025 0503 	bic.w	r5, r5, #3
 8007a76:	3508      	adds	r5, #8
 8007a78:	2d0c      	cmp	r5, #12
 8007a7a:	bf38      	it	cc
 8007a7c:	250c      	movcc	r5, #12
 8007a7e:	2d00      	cmp	r5, #0
 8007a80:	4607      	mov	r7, r0
 8007a82:	db01      	blt.n	8007a88 <_malloc_r+0x1c>
 8007a84:	42a9      	cmp	r1, r5
 8007a86:	d905      	bls.n	8007a94 <_malloc_r+0x28>
 8007a88:	230c      	movs	r3, #12
 8007a8a:	603b      	str	r3, [r7, #0]
 8007a8c:	2600      	movs	r6, #0
 8007a8e:	4630      	mov	r0, r6
 8007a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a94:	4e2e      	ldr	r6, [pc, #184]	; (8007b50 <_malloc_r+0xe4>)
 8007a96:	f001 f80d 	bl	8008ab4 <__malloc_lock>
 8007a9a:	6833      	ldr	r3, [r6, #0]
 8007a9c:	461c      	mov	r4, r3
 8007a9e:	bb34      	cbnz	r4, 8007aee <_malloc_r+0x82>
 8007aa0:	4629      	mov	r1, r5
 8007aa2:	4638      	mov	r0, r7
 8007aa4:	f7ff ffc2 	bl	8007a2c <sbrk_aligned>
 8007aa8:	1c43      	adds	r3, r0, #1
 8007aaa:	4604      	mov	r4, r0
 8007aac:	d14d      	bne.n	8007b4a <_malloc_r+0xde>
 8007aae:	6834      	ldr	r4, [r6, #0]
 8007ab0:	4626      	mov	r6, r4
 8007ab2:	2e00      	cmp	r6, #0
 8007ab4:	d140      	bne.n	8007b38 <_malloc_r+0xcc>
 8007ab6:	6823      	ldr	r3, [r4, #0]
 8007ab8:	4631      	mov	r1, r6
 8007aba:	4638      	mov	r0, r7
 8007abc:	eb04 0803 	add.w	r8, r4, r3
 8007ac0:	f000 fce0 	bl	8008484 <_sbrk_r>
 8007ac4:	4580      	cmp	r8, r0
 8007ac6:	d13a      	bne.n	8007b3e <_malloc_r+0xd2>
 8007ac8:	6821      	ldr	r1, [r4, #0]
 8007aca:	3503      	adds	r5, #3
 8007acc:	1a6d      	subs	r5, r5, r1
 8007ace:	f025 0503 	bic.w	r5, r5, #3
 8007ad2:	3508      	adds	r5, #8
 8007ad4:	2d0c      	cmp	r5, #12
 8007ad6:	bf38      	it	cc
 8007ad8:	250c      	movcc	r5, #12
 8007ada:	4629      	mov	r1, r5
 8007adc:	4638      	mov	r0, r7
 8007ade:	f7ff ffa5 	bl	8007a2c <sbrk_aligned>
 8007ae2:	3001      	adds	r0, #1
 8007ae4:	d02b      	beq.n	8007b3e <_malloc_r+0xd2>
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	442b      	add	r3, r5
 8007aea:	6023      	str	r3, [r4, #0]
 8007aec:	e00e      	b.n	8007b0c <_malloc_r+0xa0>
 8007aee:	6822      	ldr	r2, [r4, #0]
 8007af0:	1b52      	subs	r2, r2, r5
 8007af2:	d41e      	bmi.n	8007b32 <_malloc_r+0xc6>
 8007af4:	2a0b      	cmp	r2, #11
 8007af6:	d916      	bls.n	8007b26 <_malloc_r+0xba>
 8007af8:	1961      	adds	r1, r4, r5
 8007afa:	42a3      	cmp	r3, r4
 8007afc:	6025      	str	r5, [r4, #0]
 8007afe:	bf18      	it	ne
 8007b00:	6059      	strne	r1, [r3, #4]
 8007b02:	6863      	ldr	r3, [r4, #4]
 8007b04:	bf08      	it	eq
 8007b06:	6031      	streq	r1, [r6, #0]
 8007b08:	5162      	str	r2, [r4, r5]
 8007b0a:	604b      	str	r3, [r1, #4]
 8007b0c:	4638      	mov	r0, r7
 8007b0e:	f104 060b 	add.w	r6, r4, #11
 8007b12:	f000 ffd5 	bl	8008ac0 <__malloc_unlock>
 8007b16:	f026 0607 	bic.w	r6, r6, #7
 8007b1a:	1d23      	adds	r3, r4, #4
 8007b1c:	1af2      	subs	r2, r6, r3
 8007b1e:	d0b6      	beq.n	8007a8e <_malloc_r+0x22>
 8007b20:	1b9b      	subs	r3, r3, r6
 8007b22:	50a3      	str	r3, [r4, r2]
 8007b24:	e7b3      	b.n	8007a8e <_malloc_r+0x22>
 8007b26:	6862      	ldr	r2, [r4, #4]
 8007b28:	42a3      	cmp	r3, r4
 8007b2a:	bf0c      	ite	eq
 8007b2c:	6032      	streq	r2, [r6, #0]
 8007b2e:	605a      	strne	r2, [r3, #4]
 8007b30:	e7ec      	b.n	8007b0c <_malloc_r+0xa0>
 8007b32:	4623      	mov	r3, r4
 8007b34:	6864      	ldr	r4, [r4, #4]
 8007b36:	e7b2      	b.n	8007a9e <_malloc_r+0x32>
 8007b38:	4634      	mov	r4, r6
 8007b3a:	6876      	ldr	r6, [r6, #4]
 8007b3c:	e7b9      	b.n	8007ab2 <_malloc_r+0x46>
 8007b3e:	230c      	movs	r3, #12
 8007b40:	603b      	str	r3, [r7, #0]
 8007b42:	4638      	mov	r0, r7
 8007b44:	f000 ffbc 	bl	8008ac0 <__malloc_unlock>
 8007b48:	e7a1      	b.n	8007a8e <_malloc_r+0x22>
 8007b4a:	6025      	str	r5, [r4, #0]
 8007b4c:	e7de      	b.n	8007b0c <_malloc_r+0xa0>
 8007b4e:	bf00      	nop
 8007b50:	20003ce4 	.word	0x20003ce4

08007b54 <__ssputs_r>:
 8007b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b58:	688e      	ldr	r6, [r1, #8]
 8007b5a:	429e      	cmp	r6, r3
 8007b5c:	4682      	mov	sl, r0
 8007b5e:	460c      	mov	r4, r1
 8007b60:	4690      	mov	r8, r2
 8007b62:	461f      	mov	r7, r3
 8007b64:	d838      	bhi.n	8007bd8 <__ssputs_r+0x84>
 8007b66:	898a      	ldrh	r2, [r1, #12]
 8007b68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b6c:	d032      	beq.n	8007bd4 <__ssputs_r+0x80>
 8007b6e:	6825      	ldr	r5, [r4, #0]
 8007b70:	6909      	ldr	r1, [r1, #16]
 8007b72:	eba5 0901 	sub.w	r9, r5, r1
 8007b76:	6965      	ldr	r5, [r4, #20]
 8007b78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b80:	3301      	adds	r3, #1
 8007b82:	444b      	add	r3, r9
 8007b84:	106d      	asrs	r5, r5, #1
 8007b86:	429d      	cmp	r5, r3
 8007b88:	bf38      	it	cc
 8007b8a:	461d      	movcc	r5, r3
 8007b8c:	0553      	lsls	r3, r2, #21
 8007b8e:	d531      	bpl.n	8007bf4 <__ssputs_r+0xa0>
 8007b90:	4629      	mov	r1, r5
 8007b92:	f7ff ff6b 	bl	8007a6c <_malloc_r>
 8007b96:	4606      	mov	r6, r0
 8007b98:	b950      	cbnz	r0, 8007bb0 <__ssputs_r+0x5c>
 8007b9a:	230c      	movs	r3, #12
 8007b9c:	f8ca 3000 	str.w	r3, [sl]
 8007ba0:	89a3      	ldrh	r3, [r4, #12]
 8007ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ba6:	81a3      	strh	r3, [r4, #12]
 8007ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bb0:	6921      	ldr	r1, [r4, #16]
 8007bb2:	464a      	mov	r2, r9
 8007bb4:	f7ff fa1a 	bl	8006fec <memcpy>
 8007bb8:	89a3      	ldrh	r3, [r4, #12]
 8007bba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bc2:	81a3      	strh	r3, [r4, #12]
 8007bc4:	6126      	str	r6, [r4, #16]
 8007bc6:	6165      	str	r5, [r4, #20]
 8007bc8:	444e      	add	r6, r9
 8007bca:	eba5 0509 	sub.w	r5, r5, r9
 8007bce:	6026      	str	r6, [r4, #0]
 8007bd0:	60a5      	str	r5, [r4, #8]
 8007bd2:	463e      	mov	r6, r7
 8007bd4:	42be      	cmp	r6, r7
 8007bd6:	d900      	bls.n	8007bda <__ssputs_r+0x86>
 8007bd8:	463e      	mov	r6, r7
 8007bda:	6820      	ldr	r0, [r4, #0]
 8007bdc:	4632      	mov	r2, r6
 8007bde:	4641      	mov	r1, r8
 8007be0:	f000 ff4e 	bl	8008a80 <memmove>
 8007be4:	68a3      	ldr	r3, [r4, #8]
 8007be6:	1b9b      	subs	r3, r3, r6
 8007be8:	60a3      	str	r3, [r4, #8]
 8007bea:	6823      	ldr	r3, [r4, #0]
 8007bec:	4433      	add	r3, r6
 8007bee:	6023      	str	r3, [r4, #0]
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	e7db      	b.n	8007bac <__ssputs_r+0x58>
 8007bf4:	462a      	mov	r2, r5
 8007bf6:	f000 ff69 	bl	8008acc <_realloc_r>
 8007bfa:	4606      	mov	r6, r0
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	d1e1      	bne.n	8007bc4 <__ssputs_r+0x70>
 8007c00:	6921      	ldr	r1, [r4, #16]
 8007c02:	4650      	mov	r0, sl
 8007c04:	f7ff fec8 	bl	8007998 <_free_r>
 8007c08:	e7c7      	b.n	8007b9a <__ssputs_r+0x46>
	...

08007c0c <_svfiprintf_r>:
 8007c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c10:	4698      	mov	r8, r3
 8007c12:	898b      	ldrh	r3, [r1, #12]
 8007c14:	061b      	lsls	r3, r3, #24
 8007c16:	b09d      	sub	sp, #116	; 0x74
 8007c18:	4607      	mov	r7, r0
 8007c1a:	460d      	mov	r5, r1
 8007c1c:	4614      	mov	r4, r2
 8007c1e:	d50e      	bpl.n	8007c3e <_svfiprintf_r+0x32>
 8007c20:	690b      	ldr	r3, [r1, #16]
 8007c22:	b963      	cbnz	r3, 8007c3e <_svfiprintf_r+0x32>
 8007c24:	2140      	movs	r1, #64	; 0x40
 8007c26:	f7ff ff21 	bl	8007a6c <_malloc_r>
 8007c2a:	6028      	str	r0, [r5, #0]
 8007c2c:	6128      	str	r0, [r5, #16]
 8007c2e:	b920      	cbnz	r0, 8007c3a <_svfiprintf_r+0x2e>
 8007c30:	230c      	movs	r3, #12
 8007c32:	603b      	str	r3, [r7, #0]
 8007c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c38:	e0d1      	b.n	8007dde <_svfiprintf_r+0x1d2>
 8007c3a:	2340      	movs	r3, #64	; 0x40
 8007c3c:	616b      	str	r3, [r5, #20]
 8007c3e:	2300      	movs	r3, #0
 8007c40:	9309      	str	r3, [sp, #36]	; 0x24
 8007c42:	2320      	movs	r3, #32
 8007c44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c48:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c4c:	2330      	movs	r3, #48	; 0x30
 8007c4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007df8 <_svfiprintf_r+0x1ec>
 8007c52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c56:	f04f 0901 	mov.w	r9, #1
 8007c5a:	4623      	mov	r3, r4
 8007c5c:	469a      	mov	sl, r3
 8007c5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c62:	b10a      	cbz	r2, 8007c68 <_svfiprintf_r+0x5c>
 8007c64:	2a25      	cmp	r2, #37	; 0x25
 8007c66:	d1f9      	bne.n	8007c5c <_svfiprintf_r+0x50>
 8007c68:	ebba 0b04 	subs.w	fp, sl, r4
 8007c6c:	d00b      	beq.n	8007c86 <_svfiprintf_r+0x7a>
 8007c6e:	465b      	mov	r3, fp
 8007c70:	4622      	mov	r2, r4
 8007c72:	4629      	mov	r1, r5
 8007c74:	4638      	mov	r0, r7
 8007c76:	f7ff ff6d 	bl	8007b54 <__ssputs_r>
 8007c7a:	3001      	adds	r0, #1
 8007c7c:	f000 80aa 	beq.w	8007dd4 <_svfiprintf_r+0x1c8>
 8007c80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c82:	445a      	add	r2, fp
 8007c84:	9209      	str	r2, [sp, #36]	; 0x24
 8007c86:	f89a 3000 	ldrb.w	r3, [sl]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 80a2 	beq.w	8007dd4 <_svfiprintf_r+0x1c8>
 8007c90:	2300      	movs	r3, #0
 8007c92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c9a:	f10a 0a01 	add.w	sl, sl, #1
 8007c9e:	9304      	str	r3, [sp, #16]
 8007ca0:	9307      	str	r3, [sp, #28]
 8007ca2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ca6:	931a      	str	r3, [sp, #104]	; 0x68
 8007ca8:	4654      	mov	r4, sl
 8007caa:	2205      	movs	r2, #5
 8007cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cb0:	4851      	ldr	r0, [pc, #324]	; (8007df8 <_svfiprintf_r+0x1ec>)
 8007cb2:	f7f8 faad 	bl	8000210 <memchr>
 8007cb6:	9a04      	ldr	r2, [sp, #16]
 8007cb8:	b9d8      	cbnz	r0, 8007cf2 <_svfiprintf_r+0xe6>
 8007cba:	06d0      	lsls	r0, r2, #27
 8007cbc:	bf44      	itt	mi
 8007cbe:	2320      	movmi	r3, #32
 8007cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cc4:	0711      	lsls	r1, r2, #28
 8007cc6:	bf44      	itt	mi
 8007cc8:	232b      	movmi	r3, #43	; 0x2b
 8007cca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cce:	f89a 3000 	ldrb.w	r3, [sl]
 8007cd2:	2b2a      	cmp	r3, #42	; 0x2a
 8007cd4:	d015      	beq.n	8007d02 <_svfiprintf_r+0xf6>
 8007cd6:	9a07      	ldr	r2, [sp, #28]
 8007cd8:	4654      	mov	r4, sl
 8007cda:	2000      	movs	r0, #0
 8007cdc:	f04f 0c0a 	mov.w	ip, #10
 8007ce0:	4621      	mov	r1, r4
 8007ce2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ce6:	3b30      	subs	r3, #48	; 0x30
 8007ce8:	2b09      	cmp	r3, #9
 8007cea:	d94e      	bls.n	8007d8a <_svfiprintf_r+0x17e>
 8007cec:	b1b0      	cbz	r0, 8007d1c <_svfiprintf_r+0x110>
 8007cee:	9207      	str	r2, [sp, #28]
 8007cf0:	e014      	b.n	8007d1c <_svfiprintf_r+0x110>
 8007cf2:	eba0 0308 	sub.w	r3, r0, r8
 8007cf6:	fa09 f303 	lsl.w	r3, r9, r3
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	9304      	str	r3, [sp, #16]
 8007cfe:	46a2      	mov	sl, r4
 8007d00:	e7d2      	b.n	8007ca8 <_svfiprintf_r+0x9c>
 8007d02:	9b03      	ldr	r3, [sp, #12]
 8007d04:	1d19      	adds	r1, r3, #4
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	9103      	str	r1, [sp, #12]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	bfbb      	ittet	lt
 8007d0e:	425b      	neglt	r3, r3
 8007d10:	f042 0202 	orrlt.w	r2, r2, #2
 8007d14:	9307      	strge	r3, [sp, #28]
 8007d16:	9307      	strlt	r3, [sp, #28]
 8007d18:	bfb8      	it	lt
 8007d1a:	9204      	strlt	r2, [sp, #16]
 8007d1c:	7823      	ldrb	r3, [r4, #0]
 8007d1e:	2b2e      	cmp	r3, #46	; 0x2e
 8007d20:	d10c      	bne.n	8007d3c <_svfiprintf_r+0x130>
 8007d22:	7863      	ldrb	r3, [r4, #1]
 8007d24:	2b2a      	cmp	r3, #42	; 0x2a
 8007d26:	d135      	bne.n	8007d94 <_svfiprintf_r+0x188>
 8007d28:	9b03      	ldr	r3, [sp, #12]
 8007d2a:	1d1a      	adds	r2, r3, #4
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	9203      	str	r2, [sp, #12]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	bfb8      	it	lt
 8007d34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007d38:	3402      	adds	r4, #2
 8007d3a:	9305      	str	r3, [sp, #20]
 8007d3c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007dfc <_svfiprintf_r+0x1f0>
 8007d40:	7821      	ldrb	r1, [r4, #0]
 8007d42:	2203      	movs	r2, #3
 8007d44:	4650      	mov	r0, sl
 8007d46:	f7f8 fa63 	bl	8000210 <memchr>
 8007d4a:	b140      	cbz	r0, 8007d5e <_svfiprintf_r+0x152>
 8007d4c:	2340      	movs	r3, #64	; 0x40
 8007d4e:	eba0 000a 	sub.w	r0, r0, sl
 8007d52:	fa03 f000 	lsl.w	r0, r3, r0
 8007d56:	9b04      	ldr	r3, [sp, #16]
 8007d58:	4303      	orrs	r3, r0
 8007d5a:	3401      	adds	r4, #1
 8007d5c:	9304      	str	r3, [sp, #16]
 8007d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d62:	4827      	ldr	r0, [pc, #156]	; (8007e00 <_svfiprintf_r+0x1f4>)
 8007d64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d68:	2206      	movs	r2, #6
 8007d6a:	f7f8 fa51 	bl	8000210 <memchr>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	d038      	beq.n	8007de4 <_svfiprintf_r+0x1d8>
 8007d72:	4b24      	ldr	r3, [pc, #144]	; (8007e04 <_svfiprintf_r+0x1f8>)
 8007d74:	bb1b      	cbnz	r3, 8007dbe <_svfiprintf_r+0x1b2>
 8007d76:	9b03      	ldr	r3, [sp, #12]
 8007d78:	3307      	adds	r3, #7
 8007d7a:	f023 0307 	bic.w	r3, r3, #7
 8007d7e:	3308      	adds	r3, #8
 8007d80:	9303      	str	r3, [sp, #12]
 8007d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d84:	4433      	add	r3, r6
 8007d86:	9309      	str	r3, [sp, #36]	; 0x24
 8007d88:	e767      	b.n	8007c5a <_svfiprintf_r+0x4e>
 8007d8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d8e:	460c      	mov	r4, r1
 8007d90:	2001      	movs	r0, #1
 8007d92:	e7a5      	b.n	8007ce0 <_svfiprintf_r+0xd4>
 8007d94:	2300      	movs	r3, #0
 8007d96:	3401      	adds	r4, #1
 8007d98:	9305      	str	r3, [sp, #20]
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	f04f 0c0a 	mov.w	ip, #10
 8007da0:	4620      	mov	r0, r4
 8007da2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007da6:	3a30      	subs	r2, #48	; 0x30
 8007da8:	2a09      	cmp	r2, #9
 8007daa:	d903      	bls.n	8007db4 <_svfiprintf_r+0x1a8>
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d0c5      	beq.n	8007d3c <_svfiprintf_r+0x130>
 8007db0:	9105      	str	r1, [sp, #20]
 8007db2:	e7c3      	b.n	8007d3c <_svfiprintf_r+0x130>
 8007db4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007db8:	4604      	mov	r4, r0
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e7f0      	b.n	8007da0 <_svfiprintf_r+0x194>
 8007dbe:	ab03      	add	r3, sp, #12
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	462a      	mov	r2, r5
 8007dc4:	4b10      	ldr	r3, [pc, #64]	; (8007e08 <_svfiprintf_r+0x1fc>)
 8007dc6:	a904      	add	r1, sp, #16
 8007dc8:	4638      	mov	r0, r7
 8007dca:	f7fc f9ed 	bl	80041a8 <_printf_float>
 8007dce:	1c42      	adds	r2, r0, #1
 8007dd0:	4606      	mov	r6, r0
 8007dd2:	d1d6      	bne.n	8007d82 <_svfiprintf_r+0x176>
 8007dd4:	89ab      	ldrh	r3, [r5, #12]
 8007dd6:	065b      	lsls	r3, r3, #25
 8007dd8:	f53f af2c 	bmi.w	8007c34 <_svfiprintf_r+0x28>
 8007ddc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dde:	b01d      	add	sp, #116	; 0x74
 8007de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de4:	ab03      	add	r3, sp, #12
 8007de6:	9300      	str	r3, [sp, #0]
 8007de8:	462a      	mov	r2, r5
 8007dea:	4b07      	ldr	r3, [pc, #28]	; (8007e08 <_svfiprintf_r+0x1fc>)
 8007dec:	a904      	add	r1, sp, #16
 8007dee:	4638      	mov	r0, r7
 8007df0:	f7fc fc72 	bl	80046d8 <_printf_i>
 8007df4:	e7eb      	b.n	8007dce <_svfiprintf_r+0x1c2>
 8007df6:	bf00      	nop
 8007df8:	0800adac 	.word	0x0800adac
 8007dfc:	0800adb2 	.word	0x0800adb2
 8007e00:	0800adb6 	.word	0x0800adb6
 8007e04:	080041a9 	.word	0x080041a9
 8007e08:	08007b55 	.word	0x08007b55

08007e0c <_sungetc_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	1c4b      	adds	r3, r1, #1
 8007e10:	4614      	mov	r4, r2
 8007e12:	d103      	bne.n	8007e1c <_sungetc_r+0x10>
 8007e14:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007e18:	4628      	mov	r0, r5
 8007e1a:	bd38      	pop	{r3, r4, r5, pc}
 8007e1c:	8993      	ldrh	r3, [r2, #12]
 8007e1e:	f023 0320 	bic.w	r3, r3, #32
 8007e22:	8193      	strh	r3, [r2, #12]
 8007e24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e26:	6852      	ldr	r2, [r2, #4]
 8007e28:	b2cd      	uxtb	r5, r1
 8007e2a:	b18b      	cbz	r3, 8007e50 <_sungetc_r+0x44>
 8007e2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	dd08      	ble.n	8007e44 <_sungetc_r+0x38>
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	1e5a      	subs	r2, r3, #1
 8007e36:	6022      	str	r2, [r4, #0]
 8007e38:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007e3c:	6863      	ldr	r3, [r4, #4]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	6063      	str	r3, [r4, #4]
 8007e42:	e7e9      	b.n	8007e18 <_sungetc_r+0xc>
 8007e44:	4621      	mov	r1, r4
 8007e46:	f000 fbed 	bl	8008624 <__submore>
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	d0f1      	beq.n	8007e32 <_sungetc_r+0x26>
 8007e4e:	e7e1      	b.n	8007e14 <_sungetc_r+0x8>
 8007e50:	6921      	ldr	r1, [r4, #16]
 8007e52:	6823      	ldr	r3, [r4, #0]
 8007e54:	b151      	cbz	r1, 8007e6c <_sungetc_r+0x60>
 8007e56:	4299      	cmp	r1, r3
 8007e58:	d208      	bcs.n	8007e6c <_sungetc_r+0x60>
 8007e5a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007e5e:	42a9      	cmp	r1, r5
 8007e60:	d104      	bne.n	8007e6c <_sungetc_r+0x60>
 8007e62:	3b01      	subs	r3, #1
 8007e64:	3201      	adds	r2, #1
 8007e66:	6023      	str	r3, [r4, #0]
 8007e68:	6062      	str	r2, [r4, #4]
 8007e6a:	e7d5      	b.n	8007e18 <_sungetc_r+0xc>
 8007e6c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007e70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e74:	6363      	str	r3, [r4, #52]	; 0x34
 8007e76:	2303      	movs	r3, #3
 8007e78:	63a3      	str	r3, [r4, #56]	; 0x38
 8007e7a:	4623      	mov	r3, r4
 8007e7c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	2301      	movs	r3, #1
 8007e84:	e7dc      	b.n	8007e40 <_sungetc_r+0x34>

08007e86 <__ssrefill_r>:
 8007e86:	b510      	push	{r4, lr}
 8007e88:	460c      	mov	r4, r1
 8007e8a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007e8c:	b169      	cbz	r1, 8007eaa <__ssrefill_r+0x24>
 8007e8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e92:	4299      	cmp	r1, r3
 8007e94:	d001      	beq.n	8007e9a <__ssrefill_r+0x14>
 8007e96:	f7ff fd7f 	bl	8007998 <_free_r>
 8007e9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e9c:	6063      	str	r3, [r4, #4]
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	6360      	str	r0, [r4, #52]	; 0x34
 8007ea2:	b113      	cbz	r3, 8007eaa <__ssrefill_r+0x24>
 8007ea4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007ea6:	6023      	str	r3, [r4, #0]
 8007ea8:	bd10      	pop	{r4, pc}
 8007eaa:	6923      	ldr	r3, [r4, #16]
 8007eac:	6023      	str	r3, [r4, #0]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	6063      	str	r3, [r4, #4]
 8007eb2:	89a3      	ldrh	r3, [r4, #12]
 8007eb4:	f043 0320 	orr.w	r3, r3, #32
 8007eb8:	81a3      	strh	r3, [r4, #12]
 8007eba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ebe:	e7f3      	b.n	8007ea8 <__ssrefill_r+0x22>

08007ec0 <__ssvfiscanf_r>:
 8007ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec4:	460c      	mov	r4, r1
 8007ec6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8007eca:	2100      	movs	r1, #0
 8007ecc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007ed0:	49a6      	ldr	r1, [pc, #664]	; (800816c <__ssvfiscanf_r+0x2ac>)
 8007ed2:	91a0      	str	r1, [sp, #640]	; 0x280
 8007ed4:	f10d 0804 	add.w	r8, sp, #4
 8007ed8:	49a5      	ldr	r1, [pc, #660]	; (8008170 <__ssvfiscanf_r+0x2b0>)
 8007eda:	4fa6      	ldr	r7, [pc, #664]	; (8008174 <__ssvfiscanf_r+0x2b4>)
 8007edc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008178 <__ssvfiscanf_r+0x2b8>
 8007ee0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007ee4:	4606      	mov	r6, r0
 8007ee6:	91a1      	str	r1, [sp, #644]	; 0x284
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	7813      	ldrb	r3, [r2, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f000 815a 	beq.w	80081a6 <__ssvfiscanf_r+0x2e6>
 8007ef2:	5dd9      	ldrb	r1, [r3, r7]
 8007ef4:	f011 0108 	ands.w	r1, r1, #8
 8007ef8:	f102 0501 	add.w	r5, r2, #1
 8007efc:	d019      	beq.n	8007f32 <__ssvfiscanf_r+0x72>
 8007efe:	6863      	ldr	r3, [r4, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	dd0f      	ble.n	8007f24 <__ssvfiscanf_r+0x64>
 8007f04:	6823      	ldr	r3, [r4, #0]
 8007f06:	781a      	ldrb	r2, [r3, #0]
 8007f08:	5cba      	ldrb	r2, [r7, r2]
 8007f0a:	0712      	lsls	r2, r2, #28
 8007f0c:	d401      	bmi.n	8007f12 <__ssvfiscanf_r+0x52>
 8007f0e:	462a      	mov	r2, r5
 8007f10:	e7eb      	b.n	8007eea <__ssvfiscanf_r+0x2a>
 8007f12:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007f14:	3201      	adds	r2, #1
 8007f16:	9245      	str	r2, [sp, #276]	; 0x114
 8007f18:	6862      	ldr	r2, [r4, #4]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	3a01      	subs	r2, #1
 8007f1e:	6062      	str	r2, [r4, #4]
 8007f20:	6023      	str	r3, [r4, #0]
 8007f22:	e7ec      	b.n	8007efe <__ssvfiscanf_r+0x3e>
 8007f24:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007f26:	4621      	mov	r1, r4
 8007f28:	4630      	mov	r0, r6
 8007f2a:	4798      	blx	r3
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	d0e9      	beq.n	8007f04 <__ssvfiscanf_r+0x44>
 8007f30:	e7ed      	b.n	8007f0e <__ssvfiscanf_r+0x4e>
 8007f32:	2b25      	cmp	r3, #37	; 0x25
 8007f34:	d012      	beq.n	8007f5c <__ssvfiscanf_r+0x9c>
 8007f36:	469a      	mov	sl, r3
 8007f38:	6863      	ldr	r3, [r4, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f340 8091 	ble.w	8008062 <__ssvfiscanf_r+0x1a2>
 8007f40:	6822      	ldr	r2, [r4, #0]
 8007f42:	7813      	ldrb	r3, [r2, #0]
 8007f44:	4553      	cmp	r3, sl
 8007f46:	f040 812e 	bne.w	80081a6 <__ssvfiscanf_r+0x2e6>
 8007f4a:	6863      	ldr	r3, [r4, #4]
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	6063      	str	r3, [r4, #4]
 8007f50:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007f52:	3201      	adds	r2, #1
 8007f54:	3301      	adds	r3, #1
 8007f56:	6022      	str	r2, [r4, #0]
 8007f58:	9345      	str	r3, [sp, #276]	; 0x114
 8007f5a:	e7d8      	b.n	8007f0e <__ssvfiscanf_r+0x4e>
 8007f5c:	9141      	str	r1, [sp, #260]	; 0x104
 8007f5e:	9143      	str	r1, [sp, #268]	; 0x10c
 8007f60:	7853      	ldrb	r3, [r2, #1]
 8007f62:	2b2a      	cmp	r3, #42	; 0x2a
 8007f64:	bf02      	ittt	eq
 8007f66:	2310      	moveq	r3, #16
 8007f68:	1c95      	addeq	r5, r2, #2
 8007f6a:	9341      	streq	r3, [sp, #260]	; 0x104
 8007f6c:	220a      	movs	r2, #10
 8007f6e:	46aa      	mov	sl, r5
 8007f70:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007f74:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007f78:	2b09      	cmp	r3, #9
 8007f7a:	d91d      	bls.n	8007fb8 <__ssvfiscanf_r+0xf8>
 8007f7c:	487e      	ldr	r0, [pc, #504]	; (8008178 <__ssvfiscanf_r+0x2b8>)
 8007f7e:	2203      	movs	r2, #3
 8007f80:	f7f8 f946 	bl	8000210 <memchr>
 8007f84:	b140      	cbz	r0, 8007f98 <__ssvfiscanf_r+0xd8>
 8007f86:	2301      	movs	r3, #1
 8007f88:	eba0 0009 	sub.w	r0, r0, r9
 8007f8c:	fa03 f000 	lsl.w	r0, r3, r0
 8007f90:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007f92:	4318      	orrs	r0, r3
 8007f94:	9041      	str	r0, [sp, #260]	; 0x104
 8007f96:	4655      	mov	r5, sl
 8007f98:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007f9c:	2b78      	cmp	r3, #120	; 0x78
 8007f9e:	d806      	bhi.n	8007fae <__ssvfiscanf_r+0xee>
 8007fa0:	2b57      	cmp	r3, #87	; 0x57
 8007fa2:	d810      	bhi.n	8007fc6 <__ssvfiscanf_r+0x106>
 8007fa4:	2b25      	cmp	r3, #37	; 0x25
 8007fa6:	d0c6      	beq.n	8007f36 <__ssvfiscanf_r+0x76>
 8007fa8:	d856      	bhi.n	8008058 <__ssvfiscanf_r+0x198>
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d064      	beq.n	8008078 <__ssvfiscanf_r+0x1b8>
 8007fae:	2303      	movs	r3, #3
 8007fb0:	9347      	str	r3, [sp, #284]	; 0x11c
 8007fb2:	230a      	movs	r3, #10
 8007fb4:	9342      	str	r3, [sp, #264]	; 0x108
 8007fb6:	e071      	b.n	800809c <__ssvfiscanf_r+0x1dc>
 8007fb8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007fba:	fb02 1103 	mla	r1, r2, r3, r1
 8007fbe:	3930      	subs	r1, #48	; 0x30
 8007fc0:	9143      	str	r1, [sp, #268]	; 0x10c
 8007fc2:	4655      	mov	r5, sl
 8007fc4:	e7d3      	b.n	8007f6e <__ssvfiscanf_r+0xae>
 8007fc6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8007fca:	2a20      	cmp	r2, #32
 8007fcc:	d8ef      	bhi.n	8007fae <__ssvfiscanf_r+0xee>
 8007fce:	a101      	add	r1, pc, #4	; (adr r1, 8007fd4 <__ssvfiscanf_r+0x114>)
 8007fd0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007fd4:	08008087 	.word	0x08008087
 8007fd8:	08007faf 	.word	0x08007faf
 8007fdc:	08007faf 	.word	0x08007faf
 8007fe0:	080080e5 	.word	0x080080e5
 8007fe4:	08007faf 	.word	0x08007faf
 8007fe8:	08007faf 	.word	0x08007faf
 8007fec:	08007faf 	.word	0x08007faf
 8007ff0:	08007faf 	.word	0x08007faf
 8007ff4:	08007faf 	.word	0x08007faf
 8007ff8:	08007faf 	.word	0x08007faf
 8007ffc:	08007faf 	.word	0x08007faf
 8008000:	080080fb 	.word	0x080080fb
 8008004:	080080d1 	.word	0x080080d1
 8008008:	0800805f 	.word	0x0800805f
 800800c:	0800805f 	.word	0x0800805f
 8008010:	0800805f 	.word	0x0800805f
 8008014:	08007faf 	.word	0x08007faf
 8008018:	080080d5 	.word	0x080080d5
 800801c:	08007faf 	.word	0x08007faf
 8008020:	08007faf 	.word	0x08007faf
 8008024:	08007faf 	.word	0x08007faf
 8008028:	08007faf 	.word	0x08007faf
 800802c:	0800810b 	.word	0x0800810b
 8008030:	080080dd 	.word	0x080080dd
 8008034:	0800807f 	.word	0x0800807f
 8008038:	08007faf 	.word	0x08007faf
 800803c:	08007faf 	.word	0x08007faf
 8008040:	08008107 	.word	0x08008107
 8008044:	08007faf 	.word	0x08007faf
 8008048:	080080d1 	.word	0x080080d1
 800804c:	08007faf 	.word	0x08007faf
 8008050:	08007faf 	.word	0x08007faf
 8008054:	08008087 	.word	0x08008087
 8008058:	3b45      	subs	r3, #69	; 0x45
 800805a:	2b02      	cmp	r3, #2
 800805c:	d8a7      	bhi.n	8007fae <__ssvfiscanf_r+0xee>
 800805e:	2305      	movs	r3, #5
 8008060:	e01b      	b.n	800809a <__ssvfiscanf_r+0x1da>
 8008062:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008064:	4621      	mov	r1, r4
 8008066:	4630      	mov	r0, r6
 8008068:	4798      	blx	r3
 800806a:	2800      	cmp	r0, #0
 800806c:	f43f af68 	beq.w	8007f40 <__ssvfiscanf_r+0x80>
 8008070:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008072:	2800      	cmp	r0, #0
 8008074:	f040 808d 	bne.w	8008192 <__ssvfiscanf_r+0x2d2>
 8008078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800807c:	e08f      	b.n	800819e <__ssvfiscanf_r+0x2de>
 800807e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008080:	f042 0220 	orr.w	r2, r2, #32
 8008084:	9241      	str	r2, [sp, #260]	; 0x104
 8008086:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800808c:	9241      	str	r2, [sp, #260]	; 0x104
 800808e:	2210      	movs	r2, #16
 8008090:	2b6f      	cmp	r3, #111	; 0x6f
 8008092:	9242      	str	r2, [sp, #264]	; 0x108
 8008094:	bf34      	ite	cc
 8008096:	2303      	movcc	r3, #3
 8008098:	2304      	movcs	r3, #4
 800809a:	9347      	str	r3, [sp, #284]	; 0x11c
 800809c:	6863      	ldr	r3, [r4, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	dd42      	ble.n	8008128 <__ssvfiscanf_r+0x268>
 80080a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80080a4:	0659      	lsls	r1, r3, #25
 80080a6:	d404      	bmi.n	80080b2 <__ssvfiscanf_r+0x1f2>
 80080a8:	6823      	ldr	r3, [r4, #0]
 80080aa:	781a      	ldrb	r2, [r3, #0]
 80080ac:	5cba      	ldrb	r2, [r7, r2]
 80080ae:	0712      	lsls	r2, r2, #28
 80080b0:	d441      	bmi.n	8008136 <__ssvfiscanf_r+0x276>
 80080b2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	dc50      	bgt.n	800815a <__ssvfiscanf_r+0x29a>
 80080b8:	466b      	mov	r3, sp
 80080ba:	4622      	mov	r2, r4
 80080bc:	a941      	add	r1, sp, #260	; 0x104
 80080be:	4630      	mov	r0, r6
 80080c0:	f000 f876 	bl	80081b0 <_scanf_chars>
 80080c4:	2801      	cmp	r0, #1
 80080c6:	d06e      	beq.n	80081a6 <__ssvfiscanf_r+0x2e6>
 80080c8:	2802      	cmp	r0, #2
 80080ca:	f47f af20 	bne.w	8007f0e <__ssvfiscanf_r+0x4e>
 80080ce:	e7cf      	b.n	8008070 <__ssvfiscanf_r+0x1b0>
 80080d0:	220a      	movs	r2, #10
 80080d2:	e7dd      	b.n	8008090 <__ssvfiscanf_r+0x1d0>
 80080d4:	2300      	movs	r3, #0
 80080d6:	9342      	str	r3, [sp, #264]	; 0x108
 80080d8:	2303      	movs	r3, #3
 80080da:	e7de      	b.n	800809a <__ssvfiscanf_r+0x1da>
 80080dc:	2308      	movs	r3, #8
 80080de:	9342      	str	r3, [sp, #264]	; 0x108
 80080e0:	2304      	movs	r3, #4
 80080e2:	e7da      	b.n	800809a <__ssvfiscanf_r+0x1da>
 80080e4:	4629      	mov	r1, r5
 80080e6:	4640      	mov	r0, r8
 80080e8:	f000 f9dc 	bl	80084a4 <__sccl>
 80080ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80080ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080f2:	9341      	str	r3, [sp, #260]	; 0x104
 80080f4:	4605      	mov	r5, r0
 80080f6:	2301      	movs	r3, #1
 80080f8:	e7cf      	b.n	800809a <__ssvfiscanf_r+0x1da>
 80080fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80080fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008100:	9341      	str	r3, [sp, #260]	; 0x104
 8008102:	2300      	movs	r3, #0
 8008104:	e7c9      	b.n	800809a <__ssvfiscanf_r+0x1da>
 8008106:	2302      	movs	r3, #2
 8008108:	e7c7      	b.n	800809a <__ssvfiscanf_r+0x1da>
 800810a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800810c:	06c3      	lsls	r3, r0, #27
 800810e:	f53f aefe 	bmi.w	8007f0e <__ssvfiscanf_r+0x4e>
 8008112:	9b00      	ldr	r3, [sp, #0]
 8008114:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008116:	1d19      	adds	r1, r3, #4
 8008118:	9100      	str	r1, [sp, #0]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f010 0f01 	tst.w	r0, #1
 8008120:	bf14      	ite	ne
 8008122:	801a      	strhne	r2, [r3, #0]
 8008124:	601a      	streq	r2, [r3, #0]
 8008126:	e6f2      	b.n	8007f0e <__ssvfiscanf_r+0x4e>
 8008128:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800812a:	4621      	mov	r1, r4
 800812c:	4630      	mov	r0, r6
 800812e:	4798      	blx	r3
 8008130:	2800      	cmp	r0, #0
 8008132:	d0b6      	beq.n	80080a2 <__ssvfiscanf_r+0x1e2>
 8008134:	e79c      	b.n	8008070 <__ssvfiscanf_r+0x1b0>
 8008136:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008138:	3201      	adds	r2, #1
 800813a:	9245      	str	r2, [sp, #276]	; 0x114
 800813c:	6862      	ldr	r2, [r4, #4]
 800813e:	3a01      	subs	r2, #1
 8008140:	2a00      	cmp	r2, #0
 8008142:	6062      	str	r2, [r4, #4]
 8008144:	dd02      	ble.n	800814c <__ssvfiscanf_r+0x28c>
 8008146:	3301      	adds	r3, #1
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	e7ad      	b.n	80080a8 <__ssvfiscanf_r+0x1e8>
 800814c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800814e:	4621      	mov	r1, r4
 8008150:	4630      	mov	r0, r6
 8008152:	4798      	blx	r3
 8008154:	2800      	cmp	r0, #0
 8008156:	d0a7      	beq.n	80080a8 <__ssvfiscanf_r+0x1e8>
 8008158:	e78a      	b.n	8008070 <__ssvfiscanf_r+0x1b0>
 800815a:	2b04      	cmp	r3, #4
 800815c:	dc0e      	bgt.n	800817c <__ssvfiscanf_r+0x2bc>
 800815e:	466b      	mov	r3, sp
 8008160:	4622      	mov	r2, r4
 8008162:	a941      	add	r1, sp, #260	; 0x104
 8008164:	4630      	mov	r0, r6
 8008166:	f000 f87d 	bl	8008264 <_scanf_i>
 800816a:	e7ab      	b.n	80080c4 <__ssvfiscanf_r+0x204>
 800816c:	08007e0d 	.word	0x08007e0d
 8008170:	08007e87 	.word	0x08007e87
 8008174:	0800aa49 	.word	0x0800aa49
 8008178:	0800adb2 	.word	0x0800adb2
 800817c:	4b0b      	ldr	r3, [pc, #44]	; (80081ac <__ssvfiscanf_r+0x2ec>)
 800817e:	2b00      	cmp	r3, #0
 8008180:	f43f aec5 	beq.w	8007f0e <__ssvfiscanf_r+0x4e>
 8008184:	466b      	mov	r3, sp
 8008186:	4622      	mov	r2, r4
 8008188:	a941      	add	r1, sp, #260	; 0x104
 800818a:	4630      	mov	r0, r6
 800818c:	f7fc fbca 	bl	8004924 <_scanf_float>
 8008190:	e798      	b.n	80080c4 <__ssvfiscanf_r+0x204>
 8008192:	89a3      	ldrh	r3, [r4, #12]
 8008194:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008198:	bf18      	it	ne
 800819a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800819e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80081a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80081a8:	e7f9      	b.n	800819e <__ssvfiscanf_r+0x2de>
 80081aa:	bf00      	nop
 80081ac:	08004925 	.word	0x08004925

080081b0 <_scanf_chars>:
 80081b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081b4:	4615      	mov	r5, r2
 80081b6:	688a      	ldr	r2, [r1, #8]
 80081b8:	4680      	mov	r8, r0
 80081ba:	460c      	mov	r4, r1
 80081bc:	b932      	cbnz	r2, 80081cc <_scanf_chars+0x1c>
 80081be:	698a      	ldr	r2, [r1, #24]
 80081c0:	2a00      	cmp	r2, #0
 80081c2:	bf0c      	ite	eq
 80081c4:	2201      	moveq	r2, #1
 80081c6:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80081ca:	608a      	str	r2, [r1, #8]
 80081cc:	6822      	ldr	r2, [r4, #0]
 80081ce:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008260 <_scanf_chars+0xb0>
 80081d2:	06d1      	lsls	r1, r2, #27
 80081d4:	bf5f      	itttt	pl
 80081d6:	681a      	ldrpl	r2, [r3, #0]
 80081d8:	1d11      	addpl	r1, r2, #4
 80081da:	6019      	strpl	r1, [r3, #0]
 80081dc:	6816      	ldrpl	r6, [r2, #0]
 80081de:	2700      	movs	r7, #0
 80081e0:	69a0      	ldr	r0, [r4, #24]
 80081e2:	b188      	cbz	r0, 8008208 <_scanf_chars+0x58>
 80081e4:	2801      	cmp	r0, #1
 80081e6:	d107      	bne.n	80081f8 <_scanf_chars+0x48>
 80081e8:	682b      	ldr	r3, [r5, #0]
 80081ea:	781a      	ldrb	r2, [r3, #0]
 80081ec:	6963      	ldr	r3, [r4, #20]
 80081ee:	5c9b      	ldrb	r3, [r3, r2]
 80081f0:	b953      	cbnz	r3, 8008208 <_scanf_chars+0x58>
 80081f2:	2f00      	cmp	r7, #0
 80081f4:	d031      	beq.n	800825a <_scanf_chars+0xaa>
 80081f6:	e022      	b.n	800823e <_scanf_chars+0x8e>
 80081f8:	2802      	cmp	r0, #2
 80081fa:	d120      	bne.n	800823e <_scanf_chars+0x8e>
 80081fc:	682b      	ldr	r3, [r5, #0]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008204:	071b      	lsls	r3, r3, #28
 8008206:	d41a      	bmi.n	800823e <_scanf_chars+0x8e>
 8008208:	6823      	ldr	r3, [r4, #0]
 800820a:	06da      	lsls	r2, r3, #27
 800820c:	bf5e      	ittt	pl
 800820e:	682b      	ldrpl	r3, [r5, #0]
 8008210:	781b      	ldrbpl	r3, [r3, #0]
 8008212:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008216:	682a      	ldr	r2, [r5, #0]
 8008218:	686b      	ldr	r3, [r5, #4]
 800821a:	3201      	adds	r2, #1
 800821c:	602a      	str	r2, [r5, #0]
 800821e:	68a2      	ldr	r2, [r4, #8]
 8008220:	3b01      	subs	r3, #1
 8008222:	3a01      	subs	r2, #1
 8008224:	606b      	str	r3, [r5, #4]
 8008226:	3701      	adds	r7, #1
 8008228:	60a2      	str	r2, [r4, #8]
 800822a:	b142      	cbz	r2, 800823e <_scanf_chars+0x8e>
 800822c:	2b00      	cmp	r3, #0
 800822e:	dcd7      	bgt.n	80081e0 <_scanf_chars+0x30>
 8008230:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008234:	4629      	mov	r1, r5
 8008236:	4640      	mov	r0, r8
 8008238:	4798      	blx	r3
 800823a:	2800      	cmp	r0, #0
 800823c:	d0d0      	beq.n	80081e0 <_scanf_chars+0x30>
 800823e:	6823      	ldr	r3, [r4, #0]
 8008240:	f013 0310 	ands.w	r3, r3, #16
 8008244:	d105      	bne.n	8008252 <_scanf_chars+0xa2>
 8008246:	68e2      	ldr	r2, [r4, #12]
 8008248:	3201      	adds	r2, #1
 800824a:	60e2      	str	r2, [r4, #12]
 800824c:	69a2      	ldr	r2, [r4, #24]
 800824e:	b102      	cbz	r2, 8008252 <_scanf_chars+0xa2>
 8008250:	7033      	strb	r3, [r6, #0]
 8008252:	6923      	ldr	r3, [r4, #16]
 8008254:	443b      	add	r3, r7
 8008256:	6123      	str	r3, [r4, #16]
 8008258:	2000      	movs	r0, #0
 800825a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800825e:	bf00      	nop
 8008260:	0800aa49 	.word	0x0800aa49

08008264 <_scanf_i>:
 8008264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008268:	4698      	mov	r8, r3
 800826a:	4b76      	ldr	r3, [pc, #472]	; (8008444 <_scanf_i+0x1e0>)
 800826c:	460c      	mov	r4, r1
 800826e:	4682      	mov	sl, r0
 8008270:	4616      	mov	r6, r2
 8008272:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008276:	b087      	sub	sp, #28
 8008278:	ab03      	add	r3, sp, #12
 800827a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800827e:	4b72      	ldr	r3, [pc, #456]	; (8008448 <_scanf_i+0x1e4>)
 8008280:	69a1      	ldr	r1, [r4, #24]
 8008282:	4a72      	ldr	r2, [pc, #456]	; (800844c <_scanf_i+0x1e8>)
 8008284:	2903      	cmp	r1, #3
 8008286:	bf18      	it	ne
 8008288:	461a      	movne	r2, r3
 800828a:	68a3      	ldr	r3, [r4, #8]
 800828c:	9201      	str	r2, [sp, #4]
 800828e:	1e5a      	subs	r2, r3, #1
 8008290:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008294:	bf88      	it	hi
 8008296:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800829a:	4627      	mov	r7, r4
 800829c:	bf82      	ittt	hi
 800829e:	eb03 0905 	addhi.w	r9, r3, r5
 80082a2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80082a6:	60a3      	strhi	r3, [r4, #8]
 80082a8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80082ac:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80082b0:	bf98      	it	ls
 80082b2:	f04f 0900 	movls.w	r9, #0
 80082b6:	6023      	str	r3, [r4, #0]
 80082b8:	463d      	mov	r5, r7
 80082ba:	f04f 0b00 	mov.w	fp, #0
 80082be:	6831      	ldr	r1, [r6, #0]
 80082c0:	ab03      	add	r3, sp, #12
 80082c2:	7809      	ldrb	r1, [r1, #0]
 80082c4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80082c8:	2202      	movs	r2, #2
 80082ca:	f7f7 ffa1 	bl	8000210 <memchr>
 80082ce:	b328      	cbz	r0, 800831c <_scanf_i+0xb8>
 80082d0:	f1bb 0f01 	cmp.w	fp, #1
 80082d4:	d159      	bne.n	800838a <_scanf_i+0x126>
 80082d6:	6862      	ldr	r2, [r4, #4]
 80082d8:	b92a      	cbnz	r2, 80082e6 <_scanf_i+0x82>
 80082da:	6822      	ldr	r2, [r4, #0]
 80082dc:	2308      	movs	r3, #8
 80082de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082e2:	6063      	str	r3, [r4, #4]
 80082e4:	6022      	str	r2, [r4, #0]
 80082e6:	6822      	ldr	r2, [r4, #0]
 80082e8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80082ec:	6022      	str	r2, [r4, #0]
 80082ee:	68a2      	ldr	r2, [r4, #8]
 80082f0:	1e51      	subs	r1, r2, #1
 80082f2:	60a1      	str	r1, [r4, #8]
 80082f4:	b192      	cbz	r2, 800831c <_scanf_i+0xb8>
 80082f6:	6832      	ldr	r2, [r6, #0]
 80082f8:	1c51      	adds	r1, r2, #1
 80082fa:	6031      	str	r1, [r6, #0]
 80082fc:	7812      	ldrb	r2, [r2, #0]
 80082fe:	f805 2b01 	strb.w	r2, [r5], #1
 8008302:	6872      	ldr	r2, [r6, #4]
 8008304:	3a01      	subs	r2, #1
 8008306:	2a00      	cmp	r2, #0
 8008308:	6072      	str	r2, [r6, #4]
 800830a:	dc07      	bgt.n	800831c <_scanf_i+0xb8>
 800830c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008310:	4631      	mov	r1, r6
 8008312:	4650      	mov	r0, sl
 8008314:	4790      	blx	r2
 8008316:	2800      	cmp	r0, #0
 8008318:	f040 8085 	bne.w	8008426 <_scanf_i+0x1c2>
 800831c:	f10b 0b01 	add.w	fp, fp, #1
 8008320:	f1bb 0f03 	cmp.w	fp, #3
 8008324:	d1cb      	bne.n	80082be <_scanf_i+0x5a>
 8008326:	6863      	ldr	r3, [r4, #4]
 8008328:	b90b      	cbnz	r3, 800832e <_scanf_i+0xca>
 800832a:	230a      	movs	r3, #10
 800832c:	6063      	str	r3, [r4, #4]
 800832e:	6863      	ldr	r3, [r4, #4]
 8008330:	4947      	ldr	r1, [pc, #284]	; (8008450 <_scanf_i+0x1ec>)
 8008332:	6960      	ldr	r0, [r4, #20]
 8008334:	1ac9      	subs	r1, r1, r3
 8008336:	f000 f8b5 	bl	80084a4 <__sccl>
 800833a:	f04f 0b00 	mov.w	fp, #0
 800833e:	68a3      	ldr	r3, [r4, #8]
 8008340:	6822      	ldr	r2, [r4, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d03d      	beq.n	80083c2 <_scanf_i+0x15e>
 8008346:	6831      	ldr	r1, [r6, #0]
 8008348:	6960      	ldr	r0, [r4, #20]
 800834a:	f891 c000 	ldrb.w	ip, [r1]
 800834e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008352:	2800      	cmp	r0, #0
 8008354:	d035      	beq.n	80083c2 <_scanf_i+0x15e>
 8008356:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800835a:	d124      	bne.n	80083a6 <_scanf_i+0x142>
 800835c:	0510      	lsls	r0, r2, #20
 800835e:	d522      	bpl.n	80083a6 <_scanf_i+0x142>
 8008360:	f10b 0b01 	add.w	fp, fp, #1
 8008364:	f1b9 0f00 	cmp.w	r9, #0
 8008368:	d003      	beq.n	8008372 <_scanf_i+0x10e>
 800836a:	3301      	adds	r3, #1
 800836c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008370:	60a3      	str	r3, [r4, #8]
 8008372:	6873      	ldr	r3, [r6, #4]
 8008374:	3b01      	subs	r3, #1
 8008376:	2b00      	cmp	r3, #0
 8008378:	6073      	str	r3, [r6, #4]
 800837a:	dd1b      	ble.n	80083b4 <_scanf_i+0x150>
 800837c:	6833      	ldr	r3, [r6, #0]
 800837e:	3301      	adds	r3, #1
 8008380:	6033      	str	r3, [r6, #0]
 8008382:	68a3      	ldr	r3, [r4, #8]
 8008384:	3b01      	subs	r3, #1
 8008386:	60a3      	str	r3, [r4, #8]
 8008388:	e7d9      	b.n	800833e <_scanf_i+0xda>
 800838a:	f1bb 0f02 	cmp.w	fp, #2
 800838e:	d1ae      	bne.n	80082ee <_scanf_i+0x8a>
 8008390:	6822      	ldr	r2, [r4, #0]
 8008392:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008396:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800839a:	d1bf      	bne.n	800831c <_scanf_i+0xb8>
 800839c:	2310      	movs	r3, #16
 800839e:	6063      	str	r3, [r4, #4]
 80083a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083a4:	e7a2      	b.n	80082ec <_scanf_i+0x88>
 80083a6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80083aa:	6022      	str	r2, [r4, #0]
 80083ac:	780b      	ldrb	r3, [r1, #0]
 80083ae:	f805 3b01 	strb.w	r3, [r5], #1
 80083b2:	e7de      	b.n	8008372 <_scanf_i+0x10e>
 80083b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80083b8:	4631      	mov	r1, r6
 80083ba:	4650      	mov	r0, sl
 80083bc:	4798      	blx	r3
 80083be:	2800      	cmp	r0, #0
 80083c0:	d0df      	beq.n	8008382 <_scanf_i+0x11e>
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	05db      	lsls	r3, r3, #23
 80083c6:	d50d      	bpl.n	80083e4 <_scanf_i+0x180>
 80083c8:	42bd      	cmp	r5, r7
 80083ca:	d909      	bls.n	80083e0 <_scanf_i+0x17c>
 80083cc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80083d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083d4:	4632      	mov	r2, r6
 80083d6:	4650      	mov	r0, sl
 80083d8:	4798      	blx	r3
 80083da:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80083de:	464d      	mov	r5, r9
 80083e0:	42bd      	cmp	r5, r7
 80083e2:	d02d      	beq.n	8008440 <_scanf_i+0x1dc>
 80083e4:	6822      	ldr	r2, [r4, #0]
 80083e6:	f012 0210 	ands.w	r2, r2, #16
 80083ea:	d113      	bne.n	8008414 <_scanf_i+0x1b0>
 80083ec:	702a      	strb	r2, [r5, #0]
 80083ee:	6863      	ldr	r3, [r4, #4]
 80083f0:	9e01      	ldr	r6, [sp, #4]
 80083f2:	4639      	mov	r1, r7
 80083f4:	4650      	mov	r0, sl
 80083f6:	47b0      	blx	r6
 80083f8:	6821      	ldr	r1, [r4, #0]
 80083fa:	f8d8 3000 	ldr.w	r3, [r8]
 80083fe:	f011 0f20 	tst.w	r1, #32
 8008402:	d013      	beq.n	800842c <_scanf_i+0x1c8>
 8008404:	1d1a      	adds	r2, r3, #4
 8008406:	f8c8 2000 	str.w	r2, [r8]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6018      	str	r0, [r3, #0]
 800840e:	68e3      	ldr	r3, [r4, #12]
 8008410:	3301      	adds	r3, #1
 8008412:	60e3      	str	r3, [r4, #12]
 8008414:	1bed      	subs	r5, r5, r7
 8008416:	44ab      	add	fp, r5
 8008418:	6925      	ldr	r5, [r4, #16]
 800841a:	445d      	add	r5, fp
 800841c:	6125      	str	r5, [r4, #16]
 800841e:	2000      	movs	r0, #0
 8008420:	b007      	add	sp, #28
 8008422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008426:	f04f 0b00 	mov.w	fp, #0
 800842a:	e7ca      	b.n	80083c2 <_scanf_i+0x15e>
 800842c:	1d1a      	adds	r2, r3, #4
 800842e:	f8c8 2000 	str.w	r2, [r8]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f011 0f01 	tst.w	r1, #1
 8008438:	bf14      	ite	ne
 800843a:	8018      	strhne	r0, [r3, #0]
 800843c:	6018      	streq	r0, [r3, #0]
 800843e:	e7e6      	b.n	800840e <_scanf_i+0x1aa>
 8008440:	2001      	movs	r0, #1
 8008442:	e7ed      	b.n	8008420 <_scanf_i+0x1bc>
 8008444:	0800a9ac 	.word	0x0800a9ac
 8008448:	08008621 	.word	0x08008621
 800844c:	08005b7d 	.word	0x08005b7d
 8008450:	0800add6 	.word	0x0800add6

08008454 <_read_r>:
 8008454:	b538      	push	{r3, r4, r5, lr}
 8008456:	4d07      	ldr	r5, [pc, #28]	; (8008474 <_read_r+0x20>)
 8008458:	4604      	mov	r4, r0
 800845a:	4608      	mov	r0, r1
 800845c:	4611      	mov	r1, r2
 800845e:	2200      	movs	r2, #0
 8008460:	602a      	str	r2, [r5, #0]
 8008462:	461a      	mov	r2, r3
 8008464:	f000 fe82 	bl	800916c <_read>
 8008468:	1c43      	adds	r3, r0, #1
 800846a:	d102      	bne.n	8008472 <_read_r+0x1e>
 800846c:	682b      	ldr	r3, [r5, #0]
 800846e:	b103      	cbz	r3, 8008472 <_read_r+0x1e>
 8008470:	6023      	str	r3, [r4, #0]
 8008472:	bd38      	pop	{r3, r4, r5, pc}
 8008474:	20003cec 	.word	0x20003cec

08008478 <nan>:
 8008478:	4901      	ldr	r1, [pc, #4]	; (8008480 <nan+0x8>)
 800847a:	2000      	movs	r0, #0
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	7ff80000 	.word	0x7ff80000

08008484 <_sbrk_r>:
 8008484:	b538      	push	{r3, r4, r5, lr}
 8008486:	4d06      	ldr	r5, [pc, #24]	; (80084a0 <_sbrk_r+0x1c>)
 8008488:	2300      	movs	r3, #0
 800848a:	4604      	mov	r4, r0
 800848c:	4608      	mov	r0, r1
 800848e:	602b      	str	r3, [r5, #0]
 8008490:	f000 fe74 	bl	800917c <_sbrk>
 8008494:	1c43      	adds	r3, r0, #1
 8008496:	d102      	bne.n	800849e <_sbrk_r+0x1a>
 8008498:	682b      	ldr	r3, [r5, #0]
 800849a:	b103      	cbz	r3, 800849e <_sbrk_r+0x1a>
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	bd38      	pop	{r3, r4, r5, pc}
 80084a0:	20003cec 	.word	0x20003cec

080084a4 <__sccl>:
 80084a4:	b570      	push	{r4, r5, r6, lr}
 80084a6:	780b      	ldrb	r3, [r1, #0]
 80084a8:	4604      	mov	r4, r0
 80084aa:	2b5e      	cmp	r3, #94	; 0x5e
 80084ac:	bf0b      	itete	eq
 80084ae:	784b      	ldrbeq	r3, [r1, #1]
 80084b0:	1c48      	addne	r0, r1, #1
 80084b2:	1c88      	addeq	r0, r1, #2
 80084b4:	2200      	movne	r2, #0
 80084b6:	bf08      	it	eq
 80084b8:	2201      	moveq	r2, #1
 80084ba:	1e61      	subs	r1, r4, #1
 80084bc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80084c0:	f801 2f01 	strb.w	r2, [r1, #1]!
 80084c4:	42a9      	cmp	r1, r5
 80084c6:	d1fb      	bne.n	80084c0 <__sccl+0x1c>
 80084c8:	b90b      	cbnz	r3, 80084ce <__sccl+0x2a>
 80084ca:	3801      	subs	r0, #1
 80084cc:	bd70      	pop	{r4, r5, r6, pc}
 80084ce:	f082 0201 	eor.w	r2, r2, #1
 80084d2:	54e2      	strb	r2, [r4, r3]
 80084d4:	4605      	mov	r5, r0
 80084d6:	4628      	mov	r0, r5
 80084d8:	f810 1b01 	ldrb.w	r1, [r0], #1
 80084dc:	292d      	cmp	r1, #45	; 0x2d
 80084de:	d006      	beq.n	80084ee <__sccl+0x4a>
 80084e0:	295d      	cmp	r1, #93	; 0x5d
 80084e2:	d0f3      	beq.n	80084cc <__sccl+0x28>
 80084e4:	b909      	cbnz	r1, 80084ea <__sccl+0x46>
 80084e6:	4628      	mov	r0, r5
 80084e8:	e7f0      	b.n	80084cc <__sccl+0x28>
 80084ea:	460b      	mov	r3, r1
 80084ec:	e7f1      	b.n	80084d2 <__sccl+0x2e>
 80084ee:	786e      	ldrb	r6, [r5, #1]
 80084f0:	2e5d      	cmp	r6, #93	; 0x5d
 80084f2:	d0fa      	beq.n	80084ea <__sccl+0x46>
 80084f4:	42b3      	cmp	r3, r6
 80084f6:	dcf8      	bgt.n	80084ea <__sccl+0x46>
 80084f8:	3502      	adds	r5, #2
 80084fa:	4619      	mov	r1, r3
 80084fc:	3101      	adds	r1, #1
 80084fe:	428e      	cmp	r6, r1
 8008500:	5462      	strb	r2, [r4, r1]
 8008502:	dcfb      	bgt.n	80084fc <__sccl+0x58>
 8008504:	1af1      	subs	r1, r6, r3
 8008506:	3901      	subs	r1, #1
 8008508:	1c58      	adds	r0, r3, #1
 800850a:	42b3      	cmp	r3, r6
 800850c:	bfa8      	it	ge
 800850e:	2100      	movge	r1, #0
 8008510:	1843      	adds	r3, r0, r1
 8008512:	e7e0      	b.n	80084d6 <__sccl+0x32>

08008514 <strncmp>:
 8008514:	b510      	push	{r4, lr}
 8008516:	4603      	mov	r3, r0
 8008518:	b172      	cbz	r2, 8008538 <strncmp+0x24>
 800851a:	3901      	subs	r1, #1
 800851c:	1884      	adds	r4, r0, r2
 800851e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008522:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008526:	4290      	cmp	r0, r2
 8008528:	d101      	bne.n	800852e <strncmp+0x1a>
 800852a:	42a3      	cmp	r3, r4
 800852c:	d101      	bne.n	8008532 <strncmp+0x1e>
 800852e:	1a80      	subs	r0, r0, r2
 8008530:	bd10      	pop	{r4, pc}
 8008532:	2800      	cmp	r0, #0
 8008534:	d1f3      	bne.n	800851e <strncmp+0xa>
 8008536:	e7fa      	b.n	800852e <strncmp+0x1a>
 8008538:	4610      	mov	r0, r2
 800853a:	e7f9      	b.n	8008530 <strncmp+0x1c>

0800853c <_strtoul_l.constprop.0>:
 800853c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008540:	4f36      	ldr	r7, [pc, #216]	; (800861c <_strtoul_l.constprop.0+0xe0>)
 8008542:	4686      	mov	lr, r0
 8008544:	460d      	mov	r5, r1
 8008546:	4628      	mov	r0, r5
 8008548:	f815 4b01 	ldrb.w	r4, [r5], #1
 800854c:	5de6      	ldrb	r6, [r4, r7]
 800854e:	f016 0608 	ands.w	r6, r6, #8
 8008552:	d1f8      	bne.n	8008546 <_strtoul_l.constprop.0+0xa>
 8008554:	2c2d      	cmp	r4, #45	; 0x2d
 8008556:	d12f      	bne.n	80085b8 <_strtoul_l.constprop.0+0x7c>
 8008558:	782c      	ldrb	r4, [r5, #0]
 800855a:	2601      	movs	r6, #1
 800855c:	1c85      	adds	r5, r0, #2
 800855e:	2b00      	cmp	r3, #0
 8008560:	d057      	beq.n	8008612 <_strtoul_l.constprop.0+0xd6>
 8008562:	2b10      	cmp	r3, #16
 8008564:	d109      	bne.n	800857a <_strtoul_l.constprop.0+0x3e>
 8008566:	2c30      	cmp	r4, #48	; 0x30
 8008568:	d107      	bne.n	800857a <_strtoul_l.constprop.0+0x3e>
 800856a:	7828      	ldrb	r0, [r5, #0]
 800856c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008570:	2858      	cmp	r0, #88	; 0x58
 8008572:	d149      	bne.n	8008608 <_strtoul_l.constprop.0+0xcc>
 8008574:	786c      	ldrb	r4, [r5, #1]
 8008576:	2310      	movs	r3, #16
 8008578:	3502      	adds	r5, #2
 800857a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800857e:	2700      	movs	r7, #0
 8008580:	fbb8 f8f3 	udiv	r8, r8, r3
 8008584:	fb03 f908 	mul.w	r9, r3, r8
 8008588:	ea6f 0909 	mvn.w	r9, r9
 800858c:	4638      	mov	r0, r7
 800858e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008592:	f1bc 0f09 	cmp.w	ip, #9
 8008596:	d814      	bhi.n	80085c2 <_strtoul_l.constprop.0+0x86>
 8008598:	4664      	mov	r4, ip
 800859a:	42a3      	cmp	r3, r4
 800859c:	dd22      	ble.n	80085e4 <_strtoul_l.constprop.0+0xa8>
 800859e:	2f00      	cmp	r7, #0
 80085a0:	db1d      	blt.n	80085de <_strtoul_l.constprop.0+0xa2>
 80085a2:	4580      	cmp	r8, r0
 80085a4:	d31b      	bcc.n	80085de <_strtoul_l.constprop.0+0xa2>
 80085a6:	d101      	bne.n	80085ac <_strtoul_l.constprop.0+0x70>
 80085a8:	45a1      	cmp	r9, r4
 80085aa:	db18      	blt.n	80085de <_strtoul_l.constprop.0+0xa2>
 80085ac:	fb00 4003 	mla	r0, r0, r3, r4
 80085b0:	2701      	movs	r7, #1
 80085b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80085b6:	e7ea      	b.n	800858e <_strtoul_l.constprop.0+0x52>
 80085b8:	2c2b      	cmp	r4, #43	; 0x2b
 80085ba:	bf04      	itt	eq
 80085bc:	782c      	ldrbeq	r4, [r5, #0]
 80085be:	1c85      	addeq	r5, r0, #2
 80085c0:	e7cd      	b.n	800855e <_strtoul_l.constprop.0+0x22>
 80085c2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80085c6:	f1bc 0f19 	cmp.w	ip, #25
 80085ca:	d801      	bhi.n	80085d0 <_strtoul_l.constprop.0+0x94>
 80085cc:	3c37      	subs	r4, #55	; 0x37
 80085ce:	e7e4      	b.n	800859a <_strtoul_l.constprop.0+0x5e>
 80085d0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80085d4:	f1bc 0f19 	cmp.w	ip, #25
 80085d8:	d804      	bhi.n	80085e4 <_strtoul_l.constprop.0+0xa8>
 80085da:	3c57      	subs	r4, #87	; 0x57
 80085dc:	e7dd      	b.n	800859a <_strtoul_l.constprop.0+0x5e>
 80085de:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80085e2:	e7e6      	b.n	80085b2 <_strtoul_l.constprop.0+0x76>
 80085e4:	2f00      	cmp	r7, #0
 80085e6:	da07      	bge.n	80085f8 <_strtoul_l.constprop.0+0xbc>
 80085e8:	2322      	movs	r3, #34	; 0x22
 80085ea:	f8ce 3000 	str.w	r3, [lr]
 80085ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085f2:	b932      	cbnz	r2, 8008602 <_strtoul_l.constprop.0+0xc6>
 80085f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085f8:	b106      	cbz	r6, 80085fc <_strtoul_l.constprop.0+0xc0>
 80085fa:	4240      	negs	r0, r0
 80085fc:	2a00      	cmp	r2, #0
 80085fe:	d0f9      	beq.n	80085f4 <_strtoul_l.constprop.0+0xb8>
 8008600:	b107      	cbz	r7, 8008604 <_strtoul_l.constprop.0+0xc8>
 8008602:	1e69      	subs	r1, r5, #1
 8008604:	6011      	str	r1, [r2, #0]
 8008606:	e7f5      	b.n	80085f4 <_strtoul_l.constprop.0+0xb8>
 8008608:	2430      	movs	r4, #48	; 0x30
 800860a:	2b00      	cmp	r3, #0
 800860c:	d1b5      	bne.n	800857a <_strtoul_l.constprop.0+0x3e>
 800860e:	2308      	movs	r3, #8
 8008610:	e7b3      	b.n	800857a <_strtoul_l.constprop.0+0x3e>
 8008612:	2c30      	cmp	r4, #48	; 0x30
 8008614:	d0a9      	beq.n	800856a <_strtoul_l.constprop.0+0x2e>
 8008616:	230a      	movs	r3, #10
 8008618:	e7af      	b.n	800857a <_strtoul_l.constprop.0+0x3e>
 800861a:	bf00      	nop
 800861c:	0800aa49 	.word	0x0800aa49

08008620 <_strtoul_r>:
 8008620:	f7ff bf8c 	b.w	800853c <_strtoul_l.constprop.0>

08008624 <__submore>:
 8008624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008628:	460c      	mov	r4, r1
 800862a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800862c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008630:	4299      	cmp	r1, r3
 8008632:	d11d      	bne.n	8008670 <__submore+0x4c>
 8008634:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008638:	f7ff fa18 	bl	8007a6c <_malloc_r>
 800863c:	b918      	cbnz	r0, 8008646 <__submore+0x22>
 800863e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800864a:	63a3      	str	r3, [r4, #56]	; 0x38
 800864c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008650:	6360      	str	r0, [r4, #52]	; 0x34
 8008652:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008656:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800865a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800865e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008662:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008666:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800866a:	6020      	str	r0, [r4, #0]
 800866c:	2000      	movs	r0, #0
 800866e:	e7e8      	b.n	8008642 <__submore+0x1e>
 8008670:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008672:	0077      	lsls	r7, r6, #1
 8008674:	463a      	mov	r2, r7
 8008676:	f000 fa29 	bl	8008acc <_realloc_r>
 800867a:	4605      	mov	r5, r0
 800867c:	2800      	cmp	r0, #0
 800867e:	d0de      	beq.n	800863e <__submore+0x1a>
 8008680:	eb00 0806 	add.w	r8, r0, r6
 8008684:	4601      	mov	r1, r0
 8008686:	4632      	mov	r2, r6
 8008688:	4640      	mov	r0, r8
 800868a:	f7fe fcaf 	bl	8006fec <memcpy>
 800868e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008692:	f8c4 8000 	str.w	r8, [r4]
 8008696:	e7e9      	b.n	800866c <__submore+0x48>

08008698 <__ascii_wctomb>:
 8008698:	4603      	mov	r3, r0
 800869a:	4608      	mov	r0, r1
 800869c:	b141      	cbz	r1, 80086b0 <__ascii_wctomb+0x18>
 800869e:	2aff      	cmp	r2, #255	; 0xff
 80086a0:	d904      	bls.n	80086ac <__ascii_wctomb+0x14>
 80086a2:	228a      	movs	r2, #138	; 0x8a
 80086a4:	601a      	str	r2, [r3, #0]
 80086a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086aa:	4770      	bx	lr
 80086ac:	700a      	strb	r2, [r1, #0]
 80086ae:	2001      	movs	r0, #1
 80086b0:	4770      	bx	lr
	...

080086b4 <__assert_func>:
 80086b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086b6:	4614      	mov	r4, r2
 80086b8:	461a      	mov	r2, r3
 80086ba:	4b09      	ldr	r3, [pc, #36]	; (80086e0 <__assert_func+0x2c>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4605      	mov	r5, r0
 80086c0:	68d8      	ldr	r0, [r3, #12]
 80086c2:	b14c      	cbz	r4, 80086d8 <__assert_func+0x24>
 80086c4:	4b07      	ldr	r3, [pc, #28]	; (80086e4 <__assert_func+0x30>)
 80086c6:	9100      	str	r1, [sp, #0]
 80086c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086cc:	4906      	ldr	r1, [pc, #24]	; (80086e8 <__assert_func+0x34>)
 80086ce:	462b      	mov	r3, r5
 80086d0:	f000 f9a2 	bl	8008a18 <fiprintf>
 80086d4:	f000 fc40 	bl	8008f58 <abort>
 80086d8:	4b04      	ldr	r3, [pc, #16]	; (80086ec <__assert_func+0x38>)
 80086da:	461c      	mov	r4, r3
 80086dc:	e7f3      	b.n	80086c6 <__assert_func+0x12>
 80086de:	bf00      	nop
 80086e0:	20000044 	.word	0x20000044
 80086e4:	0800add8 	.word	0x0800add8
 80086e8:	0800ade5 	.word	0x0800ade5
 80086ec:	0800ae13 	.word	0x0800ae13

080086f0 <__sflush_r>:
 80086f0:	898a      	ldrh	r2, [r1, #12]
 80086f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f4:	4605      	mov	r5, r0
 80086f6:	0710      	lsls	r0, r2, #28
 80086f8:	460c      	mov	r4, r1
 80086fa:	d457      	bmi.n	80087ac <__sflush_r+0xbc>
 80086fc:	684b      	ldr	r3, [r1, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	dc04      	bgt.n	800870c <__sflush_r+0x1c>
 8008702:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008704:	2b00      	cmp	r3, #0
 8008706:	dc01      	bgt.n	800870c <__sflush_r+0x1c>
 8008708:	2000      	movs	r0, #0
 800870a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800870c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800870e:	2e00      	cmp	r6, #0
 8008710:	d0fa      	beq.n	8008708 <__sflush_r+0x18>
 8008712:	2300      	movs	r3, #0
 8008714:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008718:	682f      	ldr	r7, [r5, #0]
 800871a:	602b      	str	r3, [r5, #0]
 800871c:	d032      	beq.n	8008784 <__sflush_r+0x94>
 800871e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008720:	89a3      	ldrh	r3, [r4, #12]
 8008722:	075a      	lsls	r2, r3, #29
 8008724:	d505      	bpl.n	8008732 <__sflush_r+0x42>
 8008726:	6863      	ldr	r3, [r4, #4]
 8008728:	1ac0      	subs	r0, r0, r3
 800872a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800872c:	b10b      	cbz	r3, 8008732 <__sflush_r+0x42>
 800872e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008730:	1ac0      	subs	r0, r0, r3
 8008732:	2300      	movs	r3, #0
 8008734:	4602      	mov	r2, r0
 8008736:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008738:	6a21      	ldr	r1, [r4, #32]
 800873a:	4628      	mov	r0, r5
 800873c:	47b0      	blx	r6
 800873e:	1c43      	adds	r3, r0, #1
 8008740:	89a3      	ldrh	r3, [r4, #12]
 8008742:	d106      	bne.n	8008752 <__sflush_r+0x62>
 8008744:	6829      	ldr	r1, [r5, #0]
 8008746:	291d      	cmp	r1, #29
 8008748:	d82c      	bhi.n	80087a4 <__sflush_r+0xb4>
 800874a:	4a29      	ldr	r2, [pc, #164]	; (80087f0 <__sflush_r+0x100>)
 800874c:	40ca      	lsrs	r2, r1
 800874e:	07d6      	lsls	r6, r2, #31
 8008750:	d528      	bpl.n	80087a4 <__sflush_r+0xb4>
 8008752:	2200      	movs	r2, #0
 8008754:	6062      	str	r2, [r4, #4]
 8008756:	04d9      	lsls	r1, r3, #19
 8008758:	6922      	ldr	r2, [r4, #16]
 800875a:	6022      	str	r2, [r4, #0]
 800875c:	d504      	bpl.n	8008768 <__sflush_r+0x78>
 800875e:	1c42      	adds	r2, r0, #1
 8008760:	d101      	bne.n	8008766 <__sflush_r+0x76>
 8008762:	682b      	ldr	r3, [r5, #0]
 8008764:	b903      	cbnz	r3, 8008768 <__sflush_r+0x78>
 8008766:	6560      	str	r0, [r4, #84]	; 0x54
 8008768:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800876a:	602f      	str	r7, [r5, #0]
 800876c:	2900      	cmp	r1, #0
 800876e:	d0cb      	beq.n	8008708 <__sflush_r+0x18>
 8008770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008774:	4299      	cmp	r1, r3
 8008776:	d002      	beq.n	800877e <__sflush_r+0x8e>
 8008778:	4628      	mov	r0, r5
 800877a:	f7ff f90d 	bl	8007998 <_free_r>
 800877e:	2000      	movs	r0, #0
 8008780:	6360      	str	r0, [r4, #52]	; 0x34
 8008782:	e7c2      	b.n	800870a <__sflush_r+0x1a>
 8008784:	6a21      	ldr	r1, [r4, #32]
 8008786:	2301      	movs	r3, #1
 8008788:	4628      	mov	r0, r5
 800878a:	47b0      	blx	r6
 800878c:	1c41      	adds	r1, r0, #1
 800878e:	d1c7      	bne.n	8008720 <__sflush_r+0x30>
 8008790:	682b      	ldr	r3, [r5, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d0c4      	beq.n	8008720 <__sflush_r+0x30>
 8008796:	2b1d      	cmp	r3, #29
 8008798:	d001      	beq.n	800879e <__sflush_r+0xae>
 800879a:	2b16      	cmp	r3, #22
 800879c:	d101      	bne.n	80087a2 <__sflush_r+0xb2>
 800879e:	602f      	str	r7, [r5, #0]
 80087a0:	e7b2      	b.n	8008708 <__sflush_r+0x18>
 80087a2:	89a3      	ldrh	r3, [r4, #12]
 80087a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087a8:	81a3      	strh	r3, [r4, #12]
 80087aa:	e7ae      	b.n	800870a <__sflush_r+0x1a>
 80087ac:	690f      	ldr	r7, [r1, #16]
 80087ae:	2f00      	cmp	r7, #0
 80087b0:	d0aa      	beq.n	8008708 <__sflush_r+0x18>
 80087b2:	0793      	lsls	r3, r2, #30
 80087b4:	680e      	ldr	r6, [r1, #0]
 80087b6:	bf08      	it	eq
 80087b8:	694b      	ldreq	r3, [r1, #20]
 80087ba:	600f      	str	r7, [r1, #0]
 80087bc:	bf18      	it	ne
 80087be:	2300      	movne	r3, #0
 80087c0:	1bf6      	subs	r6, r6, r7
 80087c2:	608b      	str	r3, [r1, #8]
 80087c4:	2e00      	cmp	r6, #0
 80087c6:	dd9f      	ble.n	8008708 <__sflush_r+0x18>
 80087c8:	6a21      	ldr	r1, [r4, #32]
 80087ca:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80087ce:	4633      	mov	r3, r6
 80087d0:	463a      	mov	r2, r7
 80087d2:	4628      	mov	r0, r5
 80087d4:	47e0      	blx	ip
 80087d6:	2800      	cmp	r0, #0
 80087d8:	dc06      	bgt.n	80087e8 <__sflush_r+0xf8>
 80087da:	89a3      	ldrh	r3, [r4, #12]
 80087dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087e0:	81a3      	strh	r3, [r4, #12]
 80087e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087e6:	e790      	b.n	800870a <__sflush_r+0x1a>
 80087e8:	4407      	add	r7, r0
 80087ea:	1a36      	subs	r6, r6, r0
 80087ec:	e7ea      	b.n	80087c4 <__sflush_r+0xd4>
 80087ee:	bf00      	nop
 80087f0:	20400001 	.word	0x20400001

080087f4 <_fflush_r>:
 80087f4:	b538      	push	{r3, r4, r5, lr}
 80087f6:	690b      	ldr	r3, [r1, #16]
 80087f8:	4605      	mov	r5, r0
 80087fa:	460c      	mov	r4, r1
 80087fc:	b913      	cbnz	r3, 8008804 <_fflush_r+0x10>
 80087fe:	2500      	movs	r5, #0
 8008800:	4628      	mov	r0, r5
 8008802:	bd38      	pop	{r3, r4, r5, pc}
 8008804:	b118      	cbz	r0, 800880e <_fflush_r+0x1a>
 8008806:	6983      	ldr	r3, [r0, #24]
 8008808:	b90b      	cbnz	r3, 800880e <_fflush_r+0x1a>
 800880a:	f000 f887 	bl	800891c <__sinit>
 800880e:	4b14      	ldr	r3, [pc, #80]	; (8008860 <_fflush_r+0x6c>)
 8008810:	429c      	cmp	r4, r3
 8008812:	d11b      	bne.n	800884c <_fflush_r+0x58>
 8008814:	686c      	ldr	r4, [r5, #4]
 8008816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d0ef      	beq.n	80087fe <_fflush_r+0xa>
 800881e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008820:	07d0      	lsls	r0, r2, #31
 8008822:	d404      	bmi.n	800882e <_fflush_r+0x3a>
 8008824:	0599      	lsls	r1, r3, #22
 8008826:	d402      	bmi.n	800882e <_fflush_r+0x3a>
 8008828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800882a:	f000 f927 	bl	8008a7c <__retarget_lock_acquire_recursive>
 800882e:	4628      	mov	r0, r5
 8008830:	4621      	mov	r1, r4
 8008832:	f7ff ff5d 	bl	80086f0 <__sflush_r>
 8008836:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008838:	07da      	lsls	r2, r3, #31
 800883a:	4605      	mov	r5, r0
 800883c:	d4e0      	bmi.n	8008800 <_fflush_r+0xc>
 800883e:	89a3      	ldrh	r3, [r4, #12]
 8008840:	059b      	lsls	r3, r3, #22
 8008842:	d4dd      	bmi.n	8008800 <_fflush_r+0xc>
 8008844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008846:	f000 f91a 	bl	8008a7e <__retarget_lock_release_recursive>
 800884a:	e7d9      	b.n	8008800 <_fflush_r+0xc>
 800884c:	4b05      	ldr	r3, [pc, #20]	; (8008864 <_fflush_r+0x70>)
 800884e:	429c      	cmp	r4, r3
 8008850:	d101      	bne.n	8008856 <_fflush_r+0x62>
 8008852:	68ac      	ldr	r4, [r5, #8]
 8008854:	e7df      	b.n	8008816 <_fflush_r+0x22>
 8008856:	4b04      	ldr	r3, [pc, #16]	; (8008868 <_fflush_r+0x74>)
 8008858:	429c      	cmp	r4, r3
 800885a:	bf08      	it	eq
 800885c:	68ec      	ldreq	r4, [r5, #12]
 800885e:	e7da      	b.n	8008816 <_fflush_r+0x22>
 8008860:	0800ae34 	.word	0x0800ae34
 8008864:	0800ae54 	.word	0x0800ae54
 8008868:	0800ae14 	.word	0x0800ae14

0800886c <std>:
 800886c:	2300      	movs	r3, #0
 800886e:	b510      	push	{r4, lr}
 8008870:	4604      	mov	r4, r0
 8008872:	e9c0 3300 	strd	r3, r3, [r0]
 8008876:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800887a:	6083      	str	r3, [r0, #8]
 800887c:	8181      	strh	r1, [r0, #12]
 800887e:	6643      	str	r3, [r0, #100]	; 0x64
 8008880:	81c2      	strh	r2, [r0, #14]
 8008882:	6183      	str	r3, [r0, #24]
 8008884:	4619      	mov	r1, r3
 8008886:	2208      	movs	r2, #8
 8008888:	305c      	adds	r0, #92	; 0x5c
 800888a:	f7fb fbe7 	bl	800405c <memset>
 800888e:	4b05      	ldr	r3, [pc, #20]	; (80088a4 <std+0x38>)
 8008890:	6263      	str	r3, [r4, #36]	; 0x24
 8008892:	4b05      	ldr	r3, [pc, #20]	; (80088a8 <std+0x3c>)
 8008894:	62a3      	str	r3, [r4, #40]	; 0x28
 8008896:	4b05      	ldr	r3, [pc, #20]	; (80088ac <std+0x40>)
 8008898:	62e3      	str	r3, [r4, #44]	; 0x2c
 800889a:	4b05      	ldr	r3, [pc, #20]	; (80088b0 <std+0x44>)
 800889c:	6224      	str	r4, [r4, #32]
 800889e:	6323      	str	r3, [r4, #48]	; 0x30
 80088a0:	bd10      	pop	{r4, pc}
 80088a2:	bf00      	nop
 80088a4:	08004dd9 	.word	0x08004dd9
 80088a8:	08004dff 	.word	0x08004dff
 80088ac:	08004e37 	.word	0x08004e37
 80088b0:	08004e5b 	.word	0x08004e5b

080088b4 <_cleanup_r>:
 80088b4:	4901      	ldr	r1, [pc, #4]	; (80088bc <_cleanup_r+0x8>)
 80088b6:	f000 b8c1 	b.w	8008a3c <_fwalk_reent>
 80088ba:	bf00      	nop
 80088bc:	080087f5 	.word	0x080087f5

080088c0 <__sfmoreglue>:
 80088c0:	b570      	push	{r4, r5, r6, lr}
 80088c2:	2268      	movs	r2, #104	; 0x68
 80088c4:	1e4d      	subs	r5, r1, #1
 80088c6:	4355      	muls	r5, r2
 80088c8:	460e      	mov	r6, r1
 80088ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80088ce:	f7ff f8cd 	bl	8007a6c <_malloc_r>
 80088d2:	4604      	mov	r4, r0
 80088d4:	b140      	cbz	r0, 80088e8 <__sfmoreglue+0x28>
 80088d6:	2100      	movs	r1, #0
 80088d8:	e9c0 1600 	strd	r1, r6, [r0]
 80088dc:	300c      	adds	r0, #12
 80088de:	60a0      	str	r0, [r4, #8]
 80088e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80088e4:	f7fb fbba 	bl	800405c <memset>
 80088e8:	4620      	mov	r0, r4
 80088ea:	bd70      	pop	{r4, r5, r6, pc}

080088ec <__sfp_lock_acquire>:
 80088ec:	4801      	ldr	r0, [pc, #4]	; (80088f4 <__sfp_lock_acquire+0x8>)
 80088ee:	f000 b8c5 	b.w	8008a7c <__retarget_lock_acquire_recursive>
 80088f2:	bf00      	nop
 80088f4:	20003cf1 	.word	0x20003cf1

080088f8 <__sfp_lock_release>:
 80088f8:	4801      	ldr	r0, [pc, #4]	; (8008900 <__sfp_lock_release+0x8>)
 80088fa:	f000 b8c0 	b.w	8008a7e <__retarget_lock_release_recursive>
 80088fe:	bf00      	nop
 8008900:	20003cf1 	.word	0x20003cf1

08008904 <__sinit_lock_acquire>:
 8008904:	4801      	ldr	r0, [pc, #4]	; (800890c <__sinit_lock_acquire+0x8>)
 8008906:	f000 b8b9 	b.w	8008a7c <__retarget_lock_acquire_recursive>
 800890a:	bf00      	nop
 800890c:	20003cf2 	.word	0x20003cf2

08008910 <__sinit_lock_release>:
 8008910:	4801      	ldr	r0, [pc, #4]	; (8008918 <__sinit_lock_release+0x8>)
 8008912:	f000 b8b4 	b.w	8008a7e <__retarget_lock_release_recursive>
 8008916:	bf00      	nop
 8008918:	20003cf2 	.word	0x20003cf2

0800891c <__sinit>:
 800891c:	b510      	push	{r4, lr}
 800891e:	4604      	mov	r4, r0
 8008920:	f7ff fff0 	bl	8008904 <__sinit_lock_acquire>
 8008924:	69a3      	ldr	r3, [r4, #24]
 8008926:	b11b      	cbz	r3, 8008930 <__sinit+0x14>
 8008928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800892c:	f7ff bff0 	b.w	8008910 <__sinit_lock_release>
 8008930:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008934:	6523      	str	r3, [r4, #80]	; 0x50
 8008936:	4b13      	ldr	r3, [pc, #76]	; (8008984 <__sinit+0x68>)
 8008938:	4a13      	ldr	r2, [pc, #76]	; (8008988 <__sinit+0x6c>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	62a2      	str	r2, [r4, #40]	; 0x28
 800893e:	42a3      	cmp	r3, r4
 8008940:	bf04      	itt	eq
 8008942:	2301      	moveq	r3, #1
 8008944:	61a3      	streq	r3, [r4, #24]
 8008946:	4620      	mov	r0, r4
 8008948:	f000 f820 	bl	800898c <__sfp>
 800894c:	6060      	str	r0, [r4, #4]
 800894e:	4620      	mov	r0, r4
 8008950:	f000 f81c 	bl	800898c <__sfp>
 8008954:	60a0      	str	r0, [r4, #8]
 8008956:	4620      	mov	r0, r4
 8008958:	f000 f818 	bl	800898c <__sfp>
 800895c:	2200      	movs	r2, #0
 800895e:	60e0      	str	r0, [r4, #12]
 8008960:	2104      	movs	r1, #4
 8008962:	6860      	ldr	r0, [r4, #4]
 8008964:	f7ff ff82 	bl	800886c <std>
 8008968:	68a0      	ldr	r0, [r4, #8]
 800896a:	2201      	movs	r2, #1
 800896c:	2109      	movs	r1, #9
 800896e:	f7ff ff7d 	bl	800886c <std>
 8008972:	68e0      	ldr	r0, [r4, #12]
 8008974:	2202      	movs	r2, #2
 8008976:	2112      	movs	r1, #18
 8008978:	f7ff ff78 	bl	800886c <std>
 800897c:	2301      	movs	r3, #1
 800897e:	61a3      	str	r3, [r4, #24]
 8008980:	e7d2      	b.n	8008928 <__sinit+0xc>
 8008982:	bf00      	nop
 8008984:	0800a9b8 	.word	0x0800a9b8
 8008988:	080088b5 	.word	0x080088b5

0800898c <__sfp>:
 800898c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898e:	4607      	mov	r7, r0
 8008990:	f7ff ffac 	bl	80088ec <__sfp_lock_acquire>
 8008994:	4b1e      	ldr	r3, [pc, #120]	; (8008a10 <__sfp+0x84>)
 8008996:	681e      	ldr	r6, [r3, #0]
 8008998:	69b3      	ldr	r3, [r6, #24]
 800899a:	b913      	cbnz	r3, 80089a2 <__sfp+0x16>
 800899c:	4630      	mov	r0, r6
 800899e:	f7ff ffbd 	bl	800891c <__sinit>
 80089a2:	3648      	adds	r6, #72	; 0x48
 80089a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80089a8:	3b01      	subs	r3, #1
 80089aa:	d503      	bpl.n	80089b4 <__sfp+0x28>
 80089ac:	6833      	ldr	r3, [r6, #0]
 80089ae:	b30b      	cbz	r3, 80089f4 <__sfp+0x68>
 80089b0:	6836      	ldr	r6, [r6, #0]
 80089b2:	e7f7      	b.n	80089a4 <__sfp+0x18>
 80089b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80089b8:	b9d5      	cbnz	r5, 80089f0 <__sfp+0x64>
 80089ba:	4b16      	ldr	r3, [pc, #88]	; (8008a14 <__sfp+0x88>)
 80089bc:	60e3      	str	r3, [r4, #12]
 80089be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80089c2:	6665      	str	r5, [r4, #100]	; 0x64
 80089c4:	f000 f859 	bl	8008a7a <__retarget_lock_init_recursive>
 80089c8:	f7ff ff96 	bl	80088f8 <__sfp_lock_release>
 80089cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80089d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80089d4:	6025      	str	r5, [r4, #0]
 80089d6:	61a5      	str	r5, [r4, #24]
 80089d8:	2208      	movs	r2, #8
 80089da:	4629      	mov	r1, r5
 80089dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80089e0:	f7fb fb3c 	bl	800405c <memset>
 80089e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80089e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80089ec:	4620      	mov	r0, r4
 80089ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089f0:	3468      	adds	r4, #104	; 0x68
 80089f2:	e7d9      	b.n	80089a8 <__sfp+0x1c>
 80089f4:	2104      	movs	r1, #4
 80089f6:	4638      	mov	r0, r7
 80089f8:	f7ff ff62 	bl	80088c0 <__sfmoreglue>
 80089fc:	4604      	mov	r4, r0
 80089fe:	6030      	str	r0, [r6, #0]
 8008a00:	2800      	cmp	r0, #0
 8008a02:	d1d5      	bne.n	80089b0 <__sfp+0x24>
 8008a04:	f7ff ff78 	bl	80088f8 <__sfp_lock_release>
 8008a08:	230c      	movs	r3, #12
 8008a0a:	603b      	str	r3, [r7, #0]
 8008a0c:	e7ee      	b.n	80089ec <__sfp+0x60>
 8008a0e:	bf00      	nop
 8008a10:	0800a9b8 	.word	0x0800a9b8
 8008a14:	ffff0001 	.word	0xffff0001

08008a18 <fiprintf>:
 8008a18:	b40e      	push	{r1, r2, r3}
 8008a1a:	b503      	push	{r0, r1, lr}
 8008a1c:	4601      	mov	r1, r0
 8008a1e:	ab03      	add	r3, sp, #12
 8008a20:	4805      	ldr	r0, [pc, #20]	; (8008a38 <fiprintf+0x20>)
 8008a22:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a26:	6800      	ldr	r0, [r0, #0]
 8008a28:	9301      	str	r3, [sp, #4]
 8008a2a:	f000 f8a5 	bl	8008b78 <_vfiprintf_r>
 8008a2e:	b002      	add	sp, #8
 8008a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a34:	b003      	add	sp, #12
 8008a36:	4770      	bx	lr
 8008a38:	20000044 	.word	0x20000044

08008a3c <_fwalk_reent>:
 8008a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a40:	4606      	mov	r6, r0
 8008a42:	4688      	mov	r8, r1
 8008a44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a48:	2700      	movs	r7, #0
 8008a4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a4e:	f1b9 0901 	subs.w	r9, r9, #1
 8008a52:	d505      	bpl.n	8008a60 <_fwalk_reent+0x24>
 8008a54:	6824      	ldr	r4, [r4, #0]
 8008a56:	2c00      	cmp	r4, #0
 8008a58:	d1f7      	bne.n	8008a4a <_fwalk_reent+0xe>
 8008a5a:	4638      	mov	r0, r7
 8008a5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a60:	89ab      	ldrh	r3, [r5, #12]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d907      	bls.n	8008a76 <_fwalk_reent+0x3a>
 8008a66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	d003      	beq.n	8008a76 <_fwalk_reent+0x3a>
 8008a6e:	4629      	mov	r1, r5
 8008a70:	4630      	mov	r0, r6
 8008a72:	47c0      	blx	r8
 8008a74:	4307      	orrs	r7, r0
 8008a76:	3568      	adds	r5, #104	; 0x68
 8008a78:	e7e9      	b.n	8008a4e <_fwalk_reent+0x12>

08008a7a <__retarget_lock_init_recursive>:
 8008a7a:	4770      	bx	lr

08008a7c <__retarget_lock_acquire_recursive>:
 8008a7c:	4770      	bx	lr

08008a7e <__retarget_lock_release_recursive>:
 8008a7e:	4770      	bx	lr

08008a80 <memmove>:
 8008a80:	4288      	cmp	r0, r1
 8008a82:	b510      	push	{r4, lr}
 8008a84:	eb01 0402 	add.w	r4, r1, r2
 8008a88:	d902      	bls.n	8008a90 <memmove+0x10>
 8008a8a:	4284      	cmp	r4, r0
 8008a8c:	4623      	mov	r3, r4
 8008a8e:	d807      	bhi.n	8008aa0 <memmove+0x20>
 8008a90:	1e43      	subs	r3, r0, #1
 8008a92:	42a1      	cmp	r1, r4
 8008a94:	d008      	beq.n	8008aa8 <memmove+0x28>
 8008a96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a9e:	e7f8      	b.n	8008a92 <memmove+0x12>
 8008aa0:	4402      	add	r2, r0
 8008aa2:	4601      	mov	r1, r0
 8008aa4:	428a      	cmp	r2, r1
 8008aa6:	d100      	bne.n	8008aaa <memmove+0x2a>
 8008aa8:	bd10      	pop	{r4, pc}
 8008aaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008aae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ab2:	e7f7      	b.n	8008aa4 <memmove+0x24>

08008ab4 <__malloc_lock>:
 8008ab4:	4801      	ldr	r0, [pc, #4]	; (8008abc <__malloc_lock+0x8>)
 8008ab6:	f7ff bfe1 	b.w	8008a7c <__retarget_lock_acquire_recursive>
 8008aba:	bf00      	nop
 8008abc:	20003cf0 	.word	0x20003cf0

08008ac0 <__malloc_unlock>:
 8008ac0:	4801      	ldr	r0, [pc, #4]	; (8008ac8 <__malloc_unlock+0x8>)
 8008ac2:	f7ff bfdc 	b.w	8008a7e <__retarget_lock_release_recursive>
 8008ac6:	bf00      	nop
 8008ac8:	20003cf0 	.word	0x20003cf0

08008acc <_realloc_r>:
 8008acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ad0:	4680      	mov	r8, r0
 8008ad2:	4614      	mov	r4, r2
 8008ad4:	460e      	mov	r6, r1
 8008ad6:	b921      	cbnz	r1, 8008ae2 <_realloc_r+0x16>
 8008ad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008adc:	4611      	mov	r1, r2
 8008ade:	f7fe bfc5 	b.w	8007a6c <_malloc_r>
 8008ae2:	b92a      	cbnz	r2, 8008af0 <_realloc_r+0x24>
 8008ae4:	f7fe ff58 	bl	8007998 <_free_r>
 8008ae8:	4625      	mov	r5, r4
 8008aea:	4628      	mov	r0, r5
 8008aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008af0:	f000 fa9e 	bl	8009030 <_malloc_usable_size_r>
 8008af4:	4284      	cmp	r4, r0
 8008af6:	4607      	mov	r7, r0
 8008af8:	d802      	bhi.n	8008b00 <_realloc_r+0x34>
 8008afa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008afe:	d812      	bhi.n	8008b26 <_realloc_r+0x5a>
 8008b00:	4621      	mov	r1, r4
 8008b02:	4640      	mov	r0, r8
 8008b04:	f7fe ffb2 	bl	8007a6c <_malloc_r>
 8008b08:	4605      	mov	r5, r0
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	d0ed      	beq.n	8008aea <_realloc_r+0x1e>
 8008b0e:	42bc      	cmp	r4, r7
 8008b10:	4622      	mov	r2, r4
 8008b12:	4631      	mov	r1, r6
 8008b14:	bf28      	it	cs
 8008b16:	463a      	movcs	r2, r7
 8008b18:	f7fe fa68 	bl	8006fec <memcpy>
 8008b1c:	4631      	mov	r1, r6
 8008b1e:	4640      	mov	r0, r8
 8008b20:	f7fe ff3a 	bl	8007998 <_free_r>
 8008b24:	e7e1      	b.n	8008aea <_realloc_r+0x1e>
 8008b26:	4635      	mov	r5, r6
 8008b28:	e7df      	b.n	8008aea <_realloc_r+0x1e>

08008b2a <__sfputc_r>:
 8008b2a:	6893      	ldr	r3, [r2, #8]
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	b410      	push	{r4}
 8008b32:	6093      	str	r3, [r2, #8]
 8008b34:	da07      	bge.n	8008b46 <__sfputc_r+0x1c>
 8008b36:	6994      	ldr	r4, [r2, #24]
 8008b38:	42a3      	cmp	r3, r4
 8008b3a:	db01      	blt.n	8008b40 <__sfputc_r+0x16>
 8008b3c:	290a      	cmp	r1, #10
 8008b3e:	d102      	bne.n	8008b46 <__sfputc_r+0x1c>
 8008b40:	bc10      	pop	{r4}
 8008b42:	f000 b949 	b.w	8008dd8 <__swbuf_r>
 8008b46:	6813      	ldr	r3, [r2, #0]
 8008b48:	1c58      	adds	r0, r3, #1
 8008b4a:	6010      	str	r0, [r2, #0]
 8008b4c:	7019      	strb	r1, [r3, #0]
 8008b4e:	4608      	mov	r0, r1
 8008b50:	bc10      	pop	{r4}
 8008b52:	4770      	bx	lr

08008b54 <__sfputs_r>:
 8008b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b56:	4606      	mov	r6, r0
 8008b58:	460f      	mov	r7, r1
 8008b5a:	4614      	mov	r4, r2
 8008b5c:	18d5      	adds	r5, r2, r3
 8008b5e:	42ac      	cmp	r4, r5
 8008b60:	d101      	bne.n	8008b66 <__sfputs_r+0x12>
 8008b62:	2000      	movs	r0, #0
 8008b64:	e007      	b.n	8008b76 <__sfputs_r+0x22>
 8008b66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b6a:	463a      	mov	r2, r7
 8008b6c:	4630      	mov	r0, r6
 8008b6e:	f7ff ffdc 	bl	8008b2a <__sfputc_r>
 8008b72:	1c43      	adds	r3, r0, #1
 8008b74:	d1f3      	bne.n	8008b5e <__sfputs_r+0xa>
 8008b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b78 <_vfiprintf_r>:
 8008b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b7c:	460d      	mov	r5, r1
 8008b7e:	b09d      	sub	sp, #116	; 0x74
 8008b80:	4614      	mov	r4, r2
 8008b82:	4698      	mov	r8, r3
 8008b84:	4606      	mov	r6, r0
 8008b86:	b118      	cbz	r0, 8008b90 <_vfiprintf_r+0x18>
 8008b88:	6983      	ldr	r3, [r0, #24]
 8008b8a:	b90b      	cbnz	r3, 8008b90 <_vfiprintf_r+0x18>
 8008b8c:	f7ff fec6 	bl	800891c <__sinit>
 8008b90:	4b89      	ldr	r3, [pc, #548]	; (8008db8 <_vfiprintf_r+0x240>)
 8008b92:	429d      	cmp	r5, r3
 8008b94:	d11b      	bne.n	8008bce <_vfiprintf_r+0x56>
 8008b96:	6875      	ldr	r5, [r6, #4]
 8008b98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b9a:	07d9      	lsls	r1, r3, #31
 8008b9c:	d405      	bmi.n	8008baa <_vfiprintf_r+0x32>
 8008b9e:	89ab      	ldrh	r3, [r5, #12]
 8008ba0:	059a      	lsls	r2, r3, #22
 8008ba2:	d402      	bmi.n	8008baa <_vfiprintf_r+0x32>
 8008ba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ba6:	f7ff ff69 	bl	8008a7c <__retarget_lock_acquire_recursive>
 8008baa:	89ab      	ldrh	r3, [r5, #12]
 8008bac:	071b      	lsls	r3, r3, #28
 8008bae:	d501      	bpl.n	8008bb4 <_vfiprintf_r+0x3c>
 8008bb0:	692b      	ldr	r3, [r5, #16]
 8008bb2:	b9eb      	cbnz	r3, 8008bf0 <_vfiprintf_r+0x78>
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	4630      	mov	r0, r6
 8008bb8:	f000 f960 	bl	8008e7c <__swsetup_r>
 8008bbc:	b1c0      	cbz	r0, 8008bf0 <_vfiprintf_r+0x78>
 8008bbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bc0:	07dc      	lsls	r4, r3, #31
 8008bc2:	d50e      	bpl.n	8008be2 <_vfiprintf_r+0x6a>
 8008bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bc8:	b01d      	add	sp, #116	; 0x74
 8008bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bce:	4b7b      	ldr	r3, [pc, #492]	; (8008dbc <_vfiprintf_r+0x244>)
 8008bd0:	429d      	cmp	r5, r3
 8008bd2:	d101      	bne.n	8008bd8 <_vfiprintf_r+0x60>
 8008bd4:	68b5      	ldr	r5, [r6, #8]
 8008bd6:	e7df      	b.n	8008b98 <_vfiprintf_r+0x20>
 8008bd8:	4b79      	ldr	r3, [pc, #484]	; (8008dc0 <_vfiprintf_r+0x248>)
 8008bda:	429d      	cmp	r5, r3
 8008bdc:	bf08      	it	eq
 8008bde:	68f5      	ldreq	r5, [r6, #12]
 8008be0:	e7da      	b.n	8008b98 <_vfiprintf_r+0x20>
 8008be2:	89ab      	ldrh	r3, [r5, #12]
 8008be4:	0598      	lsls	r0, r3, #22
 8008be6:	d4ed      	bmi.n	8008bc4 <_vfiprintf_r+0x4c>
 8008be8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bea:	f7ff ff48 	bl	8008a7e <__retarget_lock_release_recursive>
 8008bee:	e7e9      	b.n	8008bc4 <_vfiprintf_r+0x4c>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	9309      	str	r3, [sp, #36]	; 0x24
 8008bf4:	2320      	movs	r3, #32
 8008bf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bfe:	2330      	movs	r3, #48	; 0x30
 8008c00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008dc4 <_vfiprintf_r+0x24c>
 8008c04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c08:	f04f 0901 	mov.w	r9, #1
 8008c0c:	4623      	mov	r3, r4
 8008c0e:	469a      	mov	sl, r3
 8008c10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c14:	b10a      	cbz	r2, 8008c1a <_vfiprintf_r+0xa2>
 8008c16:	2a25      	cmp	r2, #37	; 0x25
 8008c18:	d1f9      	bne.n	8008c0e <_vfiprintf_r+0x96>
 8008c1a:	ebba 0b04 	subs.w	fp, sl, r4
 8008c1e:	d00b      	beq.n	8008c38 <_vfiprintf_r+0xc0>
 8008c20:	465b      	mov	r3, fp
 8008c22:	4622      	mov	r2, r4
 8008c24:	4629      	mov	r1, r5
 8008c26:	4630      	mov	r0, r6
 8008c28:	f7ff ff94 	bl	8008b54 <__sfputs_r>
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	f000 80aa 	beq.w	8008d86 <_vfiprintf_r+0x20e>
 8008c32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c34:	445a      	add	r2, fp
 8008c36:	9209      	str	r2, [sp, #36]	; 0x24
 8008c38:	f89a 3000 	ldrb.w	r3, [sl]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f000 80a2 	beq.w	8008d86 <_vfiprintf_r+0x20e>
 8008c42:	2300      	movs	r3, #0
 8008c44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c4c:	f10a 0a01 	add.w	sl, sl, #1
 8008c50:	9304      	str	r3, [sp, #16]
 8008c52:	9307      	str	r3, [sp, #28]
 8008c54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c58:	931a      	str	r3, [sp, #104]	; 0x68
 8008c5a:	4654      	mov	r4, sl
 8008c5c:	2205      	movs	r2, #5
 8008c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c62:	4858      	ldr	r0, [pc, #352]	; (8008dc4 <_vfiprintf_r+0x24c>)
 8008c64:	f7f7 fad4 	bl	8000210 <memchr>
 8008c68:	9a04      	ldr	r2, [sp, #16]
 8008c6a:	b9d8      	cbnz	r0, 8008ca4 <_vfiprintf_r+0x12c>
 8008c6c:	06d1      	lsls	r1, r2, #27
 8008c6e:	bf44      	itt	mi
 8008c70:	2320      	movmi	r3, #32
 8008c72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c76:	0713      	lsls	r3, r2, #28
 8008c78:	bf44      	itt	mi
 8008c7a:	232b      	movmi	r3, #43	; 0x2b
 8008c7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c80:	f89a 3000 	ldrb.w	r3, [sl]
 8008c84:	2b2a      	cmp	r3, #42	; 0x2a
 8008c86:	d015      	beq.n	8008cb4 <_vfiprintf_r+0x13c>
 8008c88:	9a07      	ldr	r2, [sp, #28]
 8008c8a:	4654      	mov	r4, sl
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	f04f 0c0a 	mov.w	ip, #10
 8008c92:	4621      	mov	r1, r4
 8008c94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c98:	3b30      	subs	r3, #48	; 0x30
 8008c9a:	2b09      	cmp	r3, #9
 8008c9c:	d94e      	bls.n	8008d3c <_vfiprintf_r+0x1c4>
 8008c9e:	b1b0      	cbz	r0, 8008cce <_vfiprintf_r+0x156>
 8008ca0:	9207      	str	r2, [sp, #28]
 8008ca2:	e014      	b.n	8008cce <_vfiprintf_r+0x156>
 8008ca4:	eba0 0308 	sub.w	r3, r0, r8
 8008ca8:	fa09 f303 	lsl.w	r3, r9, r3
 8008cac:	4313      	orrs	r3, r2
 8008cae:	9304      	str	r3, [sp, #16]
 8008cb0:	46a2      	mov	sl, r4
 8008cb2:	e7d2      	b.n	8008c5a <_vfiprintf_r+0xe2>
 8008cb4:	9b03      	ldr	r3, [sp, #12]
 8008cb6:	1d19      	adds	r1, r3, #4
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	9103      	str	r1, [sp, #12]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	bfbb      	ittet	lt
 8008cc0:	425b      	neglt	r3, r3
 8008cc2:	f042 0202 	orrlt.w	r2, r2, #2
 8008cc6:	9307      	strge	r3, [sp, #28]
 8008cc8:	9307      	strlt	r3, [sp, #28]
 8008cca:	bfb8      	it	lt
 8008ccc:	9204      	strlt	r2, [sp, #16]
 8008cce:	7823      	ldrb	r3, [r4, #0]
 8008cd0:	2b2e      	cmp	r3, #46	; 0x2e
 8008cd2:	d10c      	bne.n	8008cee <_vfiprintf_r+0x176>
 8008cd4:	7863      	ldrb	r3, [r4, #1]
 8008cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8008cd8:	d135      	bne.n	8008d46 <_vfiprintf_r+0x1ce>
 8008cda:	9b03      	ldr	r3, [sp, #12]
 8008cdc:	1d1a      	adds	r2, r3, #4
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	9203      	str	r2, [sp, #12]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	bfb8      	it	lt
 8008ce6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008cea:	3402      	adds	r4, #2
 8008cec:	9305      	str	r3, [sp, #20]
 8008cee:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008dc8 <_vfiprintf_r+0x250>
 8008cf2:	7821      	ldrb	r1, [r4, #0]
 8008cf4:	2203      	movs	r2, #3
 8008cf6:	4650      	mov	r0, sl
 8008cf8:	f7f7 fa8a 	bl	8000210 <memchr>
 8008cfc:	b140      	cbz	r0, 8008d10 <_vfiprintf_r+0x198>
 8008cfe:	2340      	movs	r3, #64	; 0x40
 8008d00:	eba0 000a 	sub.w	r0, r0, sl
 8008d04:	fa03 f000 	lsl.w	r0, r3, r0
 8008d08:	9b04      	ldr	r3, [sp, #16]
 8008d0a:	4303      	orrs	r3, r0
 8008d0c:	3401      	adds	r4, #1
 8008d0e:	9304      	str	r3, [sp, #16]
 8008d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d14:	482d      	ldr	r0, [pc, #180]	; (8008dcc <_vfiprintf_r+0x254>)
 8008d16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d1a:	2206      	movs	r2, #6
 8008d1c:	f7f7 fa78 	bl	8000210 <memchr>
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d03f      	beq.n	8008da4 <_vfiprintf_r+0x22c>
 8008d24:	4b2a      	ldr	r3, [pc, #168]	; (8008dd0 <_vfiprintf_r+0x258>)
 8008d26:	bb1b      	cbnz	r3, 8008d70 <_vfiprintf_r+0x1f8>
 8008d28:	9b03      	ldr	r3, [sp, #12]
 8008d2a:	3307      	adds	r3, #7
 8008d2c:	f023 0307 	bic.w	r3, r3, #7
 8008d30:	3308      	adds	r3, #8
 8008d32:	9303      	str	r3, [sp, #12]
 8008d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d36:	443b      	add	r3, r7
 8008d38:	9309      	str	r3, [sp, #36]	; 0x24
 8008d3a:	e767      	b.n	8008c0c <_vfiprintf_r+0x94>
 8008d3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d40:	460c      	mov	r4, r1
 8008d42:	2001      	movs	r0, #1
 8008d44:	e7a5      	b.n	8008c92 <_vfiprintf_r+0x11a>
 8008d46:	2300      	movs	r3, #0
 8008d48:	3401      	adds	r4, #1
 8008d4a:	9305      	str	r3, [sp, #20]
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	f04f 0c0a 	mov.w	ip, #10
 8008d52:	4620      	mov	r0, r4
 8008d54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d58:	3a30      	subs	r2, #48	; 0x30
 8008d5a:	2a09      	cmp	r2, #9
 8008d5c:	d903      	bls.n	8008d66 <_vfiprintf_r+0x1ee>
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d0c5      	beq.n	8008cee <_vfiprintf_r+0x176>
 8008d62:	9105      	str	r1, [sp, #20]
 8008d64:	e7c3      	b.n	8008cee <_vfiprintf_r+0x176>
 8008d66:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e7f0      	b.n	8008d52 <_vfiprintf_r+0x1da>
 8008d70:	ab03      	add	r3, sp, #12
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	462a      	mov	r2, r5
 8008d76:	4b17      	ldr	r3, [pc, #92]	; (8008dd4 <_vfiprintf_r+0x25c>)
 8008d78:	a904      	add	r1, sp, #16
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	f7fb fa14 	bl	80041a8 <_printf_float>
 8008d80:	4607      	mov	r7, r0
 8008d82:	1c78      	adds	r0, r7, #1
 8008d84:	d1d6      	bne.n	8008d34 <_vfiprintf_r+0x1bc>
 8008d86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d88:	07d9      	lsls	r1, r3, #31
 8008d8a:	d405      	bmi.n	8008d98 <_vfiprintf_r+0x220>
 8008d8c:	89ab      	ldrh	r3, [r5, #12]
 8008d8e:	059a      	lsls	r2, r3, #22
 8008d90:	d402      	bmi.n	8008d98 <_vfiprintf_r+0x220>
 8008d92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d94:	f7ff fe73 	bl	8008a7e <__retarget_lock_release_recursive>
 8008d98:	89ab      	ldrh	r3, [r5, #12]
 8008d9a:	065b      	lsls	r3, r3, #25
 8008d9c:	f53f af12 	bmi.w	8008bc4 <_vfiprintf_r+0x4c>
 8008da0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008da2:	e711      	b.n	8008bc8 <_vfiprintf_r+0x50>
 8008da4:	ab03      	add	r3, sp, #12
 8008da6:	9300      	str	r3, [sp, #0]
 8008da8:	462a      	mov	r2, r5
 8008daa:	4b0a      	ldr	r3, [pc, #40]	; (8008dd4 <_vfiprintf_r+0x25c>)
 8008dac:	a904      	add	r1, sp, #16
 8008dae:	4630      	mov	r0, r6
 8008db0:	f7fb fc92 	bl	80046d8 <_printf_i>
 8008db4:	e7e4      	b.n	8008d80 <_vfiprintf_r+0x208>
 8008db6:	bf00      	nop
 8008db8:	0800ae34 	.word	0x0800ae34
 8008dbc:	0800ae54 	.word	0x0800ae54
 8008dc0:	0800ae14 	.word	0x0800ae14
 8008dc4:	0800adac 	.word	0x0800adac
 8008dc8:	0800adb2 	.word	0x0800adb2
 8008dcc:	0800adb6 	.word	0x0800adb6
 8008dd0:	080041a9 	.word	0x080041a9
 8008dd4:	08008b55 	.word	0x08008b55

08008dd8 <__swbuf_r>:
 8008dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dda:	460e      	mov	r6, r1
 8008ddc:	4614      	mov	r4, r2
 8008dde:	4605      	mov	r5, r0
 8008de0:	b118      	cbz	r0, 8008dea <__swbuf_r+0x12>
 8008de2:	6983      	ldr	r3, [r0, #24]
 8008de4:	b90b      	cbnz	r3, 8008dea <__swbuf_r+0x12>
 8008de6:	f7ff fd99 	bl	800891c <__sinit>
 8008dea:	4b21      	ldr	r3, [pc, #132]	; (8008e70 <__swbuf_r+0x98>)
 8008dec:	429c      	cmp	r4, r3
 8008dee:	d12b      	bne.n	8008e48 <__swbuf_r+0x70>
 8008df0:	686c      	ldr	r4, [r5, #4]
 8008df2:	69a3      	ldr	r3, [r4, #24]
 8008df4:	60a3      	str	r3, [r4, #8]
 8008df6:	89a3      	ldrh	r3, [r4, #12]
 8008df8:	071a      	lsls	r2, r3, #28
 8008dfa:	d52f      	bpl.n	8008e5c <__swbuf_r+0x84>
 8008dfc:	6923      	ldr	r3, [r4, #16]
 8008dfe:	b36b      	cbz	r3, 8008e5c <__swbuf_r+0x84>
 8008e00:	6923      	ldr	r3, [r4, #16]
 8008e02:	6820      	ldr	r0, [r4, #0]
 8008e04:	1ac0      	subs	r0, r0, r3
 8008e06:	6963      	ldr	r3, [r4, #20]
 8008e08:	b2f6      	uxtb	r6, r6
 8008e0a:	4283      	cmp	r3, r0
 8008e0c:	4637      	mov	r7, r6
 8008e0e:	dc04      	bgt.n	8008e1a <__swbuf_r+0x42>
 8008e10:	4621      	mov	r1, r4
 8008e12:	4628      	mov	r0, r5
 8008e14:	f7ff fcee 	bl	80087f4 <_fflush_r>
 8008e18:	bb30      	cbnz	r0, 8008e68 <__swbuf_r+0x90>
 8008e1a:	68a3      	ldr	r3, [r4, #8]
 8008e1c:	3b01      	subs	r3, #1
 8008e1e:	60a3      	str	r3, [r4, #8]
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	1c5a      	adds	r2, r3, #1
 8008e24:	6022      	str	r2, [r4, #0]
 8008e26:	701e      	strb	r6, [r3, #0]
 8008e28:	6963      	ldr	r3, [r4, #20]
 8008e2a:	3001      	adds	r0, #1
 8008e2c:	4283      	cmp	r3, r0
 8008e2e:	d004      	beq.n	8008e3a <__swbuf_r+0x62>
 8008e30:	89a3      	ldrh	r3, [r4, #12]
 8008e32:	07db      	lsls	r3, r3, #31
 8008e34:	d506      	bpl.n	8008e44 <__swbuf_r+0x6c>
 8008e36:	2e0a      	cmp	r6, #10
 8008e38:	d104      	bne.n	8008e44 <__swbuf_r+0x6c>
 8008e3a:	4621      	mov	r1, r4
 8008e3c:	4628      	mov	r0, r5
 8008e3e:	f7ff fcd9 	bl	80087f4 <_fflush_r>
 8008e42:	b988      	cbnz	r0, 8008e68 <__swbuf_r+0x90>
 8008e44:	4638      	mov	r0, r7
 8008e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e48:	4b0a      	ldr	r3, [pc, #40]	; (8008e74 <__swbuf_r+0x9c>)
 8008e4a:	429c      	cmp	r4, r3
 8008e4c:	d101      	bne.n	8008e52 <__swbuf_r+0x7a>
 8008e4e:	68ac      	ldr	r4, [r5, #8]
 8008e50:	e7cf      	b.n	8008df2 <__swbuf_r+0x1a>
 8008e52:	4b09      	ldr	r3, [pc, #36]	; (8008e78 <__swbuf_r+0xa0>)
 8008e54:	429c      	cmp	r4, r3
 8008e56:	bf08      	it	eq
 8008e58:	68ec      	ldreq	r4, [r5, #12]
 8008e5a:	e7ca      	b.n	8008df2 <__swbuf_r+0x1a>
 8008e5c:	4621      	mov	r1, r4
 8008e5e:	4628      	mov	r0, r5
 8008e60:	f000 f80c 	bl	8008e7c <__swsetup_r>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d0cb      	beq.n	8008e00 <__swbuf_r+0x28>
 8008e68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008e6c:	e7ea      	b.n	8008e44 <__swbuf_r+0x6c>
 8008e6e:	bf00      	nop
 8008e70:	0800ae34 	.word	0x0800ae34
 8008e74:	0800ae54 	.word	0x0800ae54
 8008e78:	0800ae14 	.word	0x0800ae14

08008e7c <__swsetup_r>:
 8008e7c:	4b32      	ldr	r3, [pc, #200]	; (8008f48 <__swsetup_r+0xcc>)
 8008e7e:	b570      	push	{r4, r5, r6, lr}
 8008e80:	681d      	ldr	r5, [r3, #0]
 8008e82:	4606      	mov	r6, r0
 8008e84:	460c      	mov	r4, r1
 8008e86:	b125      	cbz	r5, 8008e92 <__swsetup_r+0x16>
 8008e88:	69ab      	ldr	r3, [r5, #24]
 8008e8a:	b913      	cbnz	r3, 8008e92 <__swsetup_r+0x16>
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	f7ff fd45 	bl	800891c <__sinit>
 8008e92:	4b2e      	ldr	r3, [pc, #184]	; (8008f4c <__swsetup_r+0xd0>)
 8008e94:	429c      	cmp	r4, r3
 8008e96:	d10f      	bne.n	8008eb8 <__swsetup_r+0x3c>
 8008e98:	686c      	ldr	r4, [r5, #4]
 8008e9a:	89a3      	ldrh	r3, [r4, #12]
 8008e9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ea0:	0719      	lsls	r1, r3, #28
 8008ea2:	d42c      	bmi.n	8008efe <__swsetup_r+0x82>
 8008ea4:	06dd      	lsls	r5, r3, #27
 8008ea6:	d411      	bmi.n	8008ecc <__swsetup_r+0x50>
 8008ea8:	2309      	movs	r3, #9
 8008eaa:	6033      	str	r3, [r6, #0]
 8008eac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008eb0:	81a3      	strh	r3, [r4, #12]
 8008eb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008eb6:	e03e      	b.n	8008f36 <__swsetup_r+0xba>
 8008eb8:	4b25      	ldr	r3, [pc, #148]	; (8008f50 <__swsetup_r+0xd4>)
 8008eba:	429c      	cmp	r4, r3
 8008ebc:	d101      	bne.n	8008ec2 <__swsetup_r+0x46>
 8008ebe:	68ac      	ldr	r4, [r5, #8]
 8008ec0:	e7eb      	b.n	8008e9a <__swsetup_r+0x1e>
 8008ec2:	4b24      	ldr	r3, [pc, #144]	; (8008f54 <__swsetup_r+0xd8>)
 8008ec4:	429c      	cmp	r4, r3
 8008ec6:	bf08      	it	eq
 8008ec8:	68ec      	ldreq	r4, [r5, #12]
 8008eca:	e7e6      	b.n	8008e9a <__swsetup_r+0x1e>
 8008ecc:	0758      	lsls	r0, r3, #29
 8008ece:	d512      	bpl.n	8008ef6 <__swsetup_r+0x7a>
 8008ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ed2:	b141      	cbz	r1, 8008ee6 <__swsetup_r+0x6a>
 8008ed4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ed8:	4299      	cmp	r1, r3
 8008eda:	d002      	beq.n	8008ee2 <__swsetup_r+0x66>
 8008edc:	4630      	mov	r0, r6
 8008ede:	f7fe fd5b 	bl	8007998 <_free_r>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	6363      	str	r3, [r4, #52]	; 0x34
 8008ee6:	89a3      	ldrh	r3, [r4, #12]
 8008ee8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008eec:	81a3      	strh	r3, [r4, #12]
 8008eee:	2300      	movs	r3, #0
 8008ef0:	6063      	str	r3, [r4, #4]
 8008ef2:	6923      	ldr	r3, [r4, #16]
 8008ef4:	6023      	str	r3, [r4, #0]
 8008ef6:	89a3      	ldrh	r3, [r4, #12]
 8008ef8:	f043 0308 	orr.w	r3, r3, #8
 8008efc:	81a3      	strh	r3, [r4, #12]
 8008efe:	6923      	ldr	r3, [r4, #16]
 8008f00:	b94b      	cbnz	r3, 8008f16 <__swsetup_r+0x9a>
 8008f02:	89a3      	ldrh	r3, [r4, #12]
 8008f04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f0c:	d003      	beq.n	8008f16 <__swsetup_r+0x9a>
 8008f0e:	4621      	mov	r1, r4
 8008f10:	4630      	mov	r0, r6
 8008f12:	f000 f84d 	bl	8008fb0 <__smakebuf_r>
 8008f16:	89a0      	ldrh	r0, [r4, #12]
 8008f18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f1c:	f010 0301 	ands.w	r3, r0, #1
 8008f20:	d00a      	beq.n	8008f38 <__swsetup_r+0xbc>
 8008f22:	2300      	movs	r3, #0
 8008f24:	60a3      	str	r3, [r4, #8]
 8008f26:	6963      	ldr	r3, [r4, #20]
 8008f28:	425b      	negs	r3, r3
 8008f2a:	61a3      	str	r3, [r4, #24]
 8008f2c:	6923      	ldr	r3, [r4, #16]
 8008f2e:	b943      	cbnz	r3, 8008f42 <__swsetup_r+0xc6>
 8008f30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f34:	d1ba      	bne.n	8008eac <__swsetup_r+0x30>
 8008f36:	bd70      	pop	{r4, r5, r6, pc}
 8008f38:	0781      	lsls	r1, r0, #30
 8008f3a:	bf58      	it	pl
 8008f3c:	6963      	ldrpl	r3, [r4, #20]
 8008f3e:	60a3      	str	r3, [r4, #8]
 8008f40:	e7f4      	b.n	8008f2c <__swsetup_r+0xb0>
 8008f42:	2000      	movs	r0, #0
 8008f44:	e7f7      	b.n	8008f36 <__swsetup_r+0xba>
 8008f46:	bf00      	nop
 8008f48:	20000044 	.word	0x20000044
 8008f4c:	0800ae34 	.word	0x0800ae34
 8008f50:	0800ae54 	.word	0x0800ae54
 8008f54:	0800ae14 	.word	0x0800ae14

08008f58 <abort>:
 8008f58:	b508      	push	{r3, lr}
 8008f5a:	2006      	movs	r0, #6
 8008f5c:	f000 f898 	bl	8009090 <raise>
 8008f60:	2001      	movs	r0, #1
 8008f62:	f000 f921 	bl	80091a8 <_exit>

08008f66 <__swhatbuf_r>:
 8008f66:	b570      	push	{r4, r5, r6, lr}
 8008f68:	460e      	mov	r6, r1
 8008f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f6e:	2900      	cmp	r1, #0
 8008f70:	b096      	sub	sp, #88	; 0x58
 8008f72:	4614      	mov	r4, r2
 8008f74:	461d      	mov	r5, r3
 8008f76:	da08      	bge.n	8008f8a <__swhatbuf_r+0x24>
 8008f78:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	602a      	str	r2, [r5, #0]
 8008f80:	061a      	lsls	r2, r3, #24
 8008f82:	d410      	bmi.n	8008fa6 <__swhatbuf_r+0x40>
 8008f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f88:	e00e      	b.n	8008fa8 <__swhatbuf_r+0x42>
 8008f8a:	466a      	mov	r2, sp
 8008f8c:	f000 f89c 	bl	80090c8 <_fstat_r>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	dbf1      	blt.n	8008f78 <__swhatbuf_r+0x12>
 8008f94:	9a01      	ldr	r2, [sp, #4]
 8008f96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f9e:	425a      	negs	r2, r3
 8008fa0:	415a      	adcs	r2, r3
 8008fa2:	602a      	str	r2, [r5, #0]
 8008fa4:	e7ee      	b.n	8008f84 <__swhatbuf_r+0x1e>
 8008fa6:	2340      	movs	r3, #64	; 0x40
 8008fa8:	2000      	movs	r0, #0
 8008faa:	6023      	str	r3, [r4, #0]
 8008fac:	b016      	add	sp, #88	; 0x58
 8008fae:	bd70      	pop	{r4, r5, r6, pc}

08008fb0 <__smakebuf_r>:
 8008fb0:	898b      	ldrh	r3, [r1, #12]
 8008fb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008fb4:	079d      	lsls	r5, r3, #30
 8008fb6:	4606      	mov	r6, r0
 8008fb8:	460c      	mov	r4, r1
 8008fba:	d507      	bpl.n	8008fcc <__smakebuf_r+0x1c>
 8008fbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008fc0:	6023      	str	r3, [r4, #0]
 8008fc2:	6123      	str	r3, [r4, #16]
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	6163      	str	r3, [r4, #20]
 8008fc8:	b002      	add	sp, #8
 8008fca:	bd70      	pop	{r4, r5, r6, pc}
 8008fcc:	ab01      	add	r3, sp, #4
 8008fce:	466a      	mov	r2, sp
 8008fd0:	f7ff ffc9 	bl	8008f66 <__swhatbuf_r>
 8008fd4:	9900      	ldr	r1, [sp, #0]
 8008fd6:	4605      	mov	r5, r0
 8008fd8:	4630      	mov	r0, r6
 8008fda:	f7fe fd47 	bl	8007a6c <_malloc_r>
 8008fde:	b948      	cbnz	r0, 8008ff4 <__smakebuf_r+0x44>
 8008fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fe4:	059a      	lsls	r2, r3, #22
 8008fe6:	d4ef      	bmi.n	8008fc8 <__smakebuf_r+0x18>
 8008fe8:	f023 0303 	bic.w	r3, r3, #3
 8008fec:	f043 0302 	orr.w	r3, r3, #2
 8008ff0:	81a3      	strh	r3, [r4, #12]
 8008ff2:	e7e3      	b.n	8008fbc <__smakebuf_r+0xc>
 8008ff4:	4b0d      	ldr	r3, [pc, #52]	; (800902c <__smakebuf_r+0x7c>)
 8008ff6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ff8:	89a3      	ldrh	r3, [r4, #12]
 8008ffa:	6020      	str	r0, [r4, #0]
 8008ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009000:	81a3      	strh	r3, [r4, #12]
 8009002:	9b00      	ldr	r3, [sp, #0]
 8009004:	6163      	str	r3, [r4, #20]
 8009006:	9b01      	ldr	r3, [sp, #4]
 8009008:	6120      	str	r0, [r4, #16]
 800900a:	b15b      	cbz	r3, 8009024 <__smakebuf_r+0x74>
 800900c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009010:	4630      	mov	r0, r6
 8009012:	f000 f86b 	bl	80090ec <_isatty_r>
 8009016:	b128      	cbz	r0, 8009024 <__smakebuf_r+0x74>
 8009018:	89a3      	ldrh	r3, [r4, #12]
 800901a:	f023 0303 	bic.w	r3, r3, #3
 800901e:	f043 0301 	orr.w	r3, r3, #1
 8009022:	81a3      	strh	r3, [r4, #12]
 8009024:	89a0      	ldrh	r0, [r4, #12]
 8009026:	4305      	orrs	r5, r0
 8009028:	81a5      	strh	r5, [r4, #12]
 800902a:	e7cd      	b.n	8008fc8 <__smakebuf_r+0x18>
 800902c:	080088b5 	.word	0x080088b5

08009030 <_malloc_usable_size_r>:
 8009030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009034:	1f18      	subs	r0, r3, #4
 8009036:	2b00      	cmp	r3, #0
 8009038:	bfbc      	itt	lt
 800903a:	580b      	ldrlt	r3, [r1, r0]
 800903c:	18c0      	addlt	r0, r0, r3
 800903e:	4770      	bx	lr

08009040 <_raise_r>:
 8009040:	291f      	cmp	r1, #31
 8009042:	b538      	push	{r3, r4, r5, lr}
 8009044:	4604      	mov	r4, r0
 8009046:	460d      	mov	r5, r1
 8009048:	d904      	bls.n	8009054 <_raise_r+0x14>
 800904a:	2316      	movs	r3, #22
 800904c:	6003      	str	r3, [r0, #0]
 800904e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009052:	bd38      	pop	{r3, r4, r5, pc}
 8009054:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009056:	b112      	cbz	r2, 800905e <_raise_r+0x1e>
 8009058:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800905c:	b94b      	cbnz	r3, 8009072 <_raise_r+0x32>
 800905e:	4620      	mov	r0, r4
 8009060:	f000 f830 	bl	80090c4 <_getpid_r>
 8009064:	462a      	mov	r2, r5
 8009066:	4601      	mov	r1, r0
 8009068:	4620      	mov	r0, r4
 800906a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800906e:	f000 b817 	b.w	80090a0 <_kill_r>
 8009072:	2b01      	cmp	r3, #1
 8009074:	d00a      	beq.n	800908c <_raise_r+0x4c>
 8009076:	1c59      	adds	r1, r3, #1
 8009078:	d103      	bne.n	8009082 <_raise_r+0x42>
 800907a:	2316      	movs	r3, #22
 800907c:	6003      	str	r3, [r0, #0]
 800907e:	2001      	movs	r0, #1
 8009080:	e7e7      	b.n	8009052 <_raise_r+0x12>
 8009082:	2400      	movs	r4, #0
 8009084:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009088:	4628      	mov	r0, r5
 800908a:	4798      	blx	r3
 800908c:	2000      	movs	r0, #0
 800908e:	e7e0      	b.n	8009052 <_raise_r+0x12>

08009090 <raise>:
 8009090:	4b02      	ldr	r3, [pc, #8]	; (800909c <raise+0xc>)
 8009092:	4601      	mov	r1, r0
 8009094:	6818      	ldr	r0, [r3, #0]
 8009096:	f7ff bfd3 	b.w	8009040 <_raise_r>
 800909a:	bf00      	nop
 800909c:	20000044 	.word	0x20000044

080090a0 <_kill_r>:
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	4d07      	ldr	r5, [pc, #28]	; (80090c0 <_kill_r+0x20>)
 80090a4:	2300      	movs	r3, #0
 80090a6:	4604      	mov	r4, r0
 80090a8:	4608      	mov	r0, r1
 80090aa:	4611      	mov	r1, r2
 80090ac:	602b      	str	r3, [r5, #0]
 80090ae:	f000 f84d 	bl	800914c <_kill>
 80090b2:	1c43      	adds	r3, r0, #1
 80090b4:	d102      	bne.n	80090bc <_kill_r+0x1c>
 80090b6:	682b      	ldr	r3, [r5, #0]
 80090b8:	b103      	cbz	r3, 80090bc <_kill_r+0x1c>
 80090ba:	6023      	str	r3, [r4, #0]
 80090bc:	bd38      	pop	{r3, r4, r5, pc}
 80090be:	bf00      	nop
 80090c0:	20003cec 	.word	0x20003cec

080090c4 <_getpid_r>:
 80090c4:	f000 b832 	b.w	800912c <_getpid>

080090c8 <_fstat_r>:
 80090c8:	b538      	push	{r3, r4, r5, lr}
 80090ca:	4d07      	ldr	r5, [pc, #28]	; (80090e8 <_fstat_r+0x20>)
 80090cc:	2300      	movs	r3, #0
 80090ce:	4604      	mov	r4, r0
 80090d0:	4608      	mov	r0, r1
 80090d2:	4611      	mov	r1, r2
 80090d4:	602b      	str	r3, [r5, #0]
 80090d6:	f000 f821 	bl	800911c <_fstat>
 80090da:	1c43      	adds	r3, r0, #1
 80090dc:	d102      	bne.n	80090e4 <_fstat_r+0x1c>
 80090de:	682b      	ldr	r3, [r5, #0]
 80090e0:	b103      	cbz	r3, 80090e4 <_fstat_r+0x1c>
 80090e2:	6023      	str	r3, [r4, #0]
 80090e4:	bd38      	pop	{r3, r4, r5, pc}
 80090e6:	bf00      	nop
 80090e8:	20003cec 	.word	0x20003cec

080090ec <_isatty_r>:
 80090ec:	b538      	push	{r3, r4, r5, lr}
 80090ee:	4d06      	ldr	r5, [pc, #24]	; (8009108 <_isatty_r+0x1c>)
 80090f0:	2300      	movs	r3, #0
 80090f2:	4604      	mov	r4, r0
 80090f4:	4608      	mov	r0, r1
 80090f6:	602b      	str	r3, [r5, #0]
 80090f8:	f000 f820 	bl	800913c <_isatty>
 80090fc:	1c43      	adds	r3, r0, #1
 80090fe:	d102      	bne.n	8009106 <_isatty_r+0x1a>
 8009100:	682b      	ldr	r3, [r5, #0]
 8009102:	b103      	cbz	r3, 8009106 <_isatty_r+0x1a>
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	bd38      	pop	{r3, r4, r5, pc}
 8009108:	20003cec 	.word	0x20003cec

0800910c <_close>:
 800910c:	4b02      	ldr	r3, [pc, #8]	; (8009118 <_close+0xc>)
 800910e:	2258      	movs	r2, #88	; 0x58
 8009110:	601a      	str	r2, [r3, #0]
 8009112:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009116:	4770      	bx	lr
 8009118:	20003cec 	.word	0x20003cec

0800911c <_fstat>:
 800911c:	4b02      	ldr	r3, [pc, #8]	; (8009128 <_fstat+0xc>)
 800911e:	2258      	movs	r2, #88	; 0x58
 8009120:	601a      	str	r2, [r3, #0]
 8009122:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009126:	4770      	bx	lr
 8009128:	20003cec 	.word	0x20003cec

0800912c <_getpid>:
 800912c:	4b02      	ldr	r3, [pc, #8]	; (8009138 <_getpid+0xc>)
 800912e:	2258      	movs	r2, #88	; 0x58
 8009130:	601a      	str	r2, [r3, #0]
 8009132:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009136:	4770      	bx	lr
 8009138:	20003cec 	.word	0x20003cec

0800913c <_isatty>:
 800913c:	4b02      	ldr	r3, [pc, #8]	; (8009148 <_isatty+0xc>)
 800913e:	2258      	movs	r2, #88	; 0x58
 8009140:	601a      	str	r2, [r3, #0]
 8009142:	2000      	movs	r0, #0
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	20003cec 	.word	0x20003cec

0800914c <_kill>:
 800914c:	4b02      	ldr	r3, [pc, #8]	; (8009158 <_kill+0xc>)
 800914e:	2258      	movs	r2, #88	; 0x58
 8009150:	601a      	str	r2, [r3, #0]
 8009152:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009156:	4770      	bx	lr
 8009158:	20003cec 	.word	0x20003cec

0800915c <_lseek>:
 800915c:	4b02      	ldr	r3, [pc, #8]	; (8009168 <_lseek+0xc>)
 800915e:	2258      	movs	r2, #88	; 0x58
 8009160:	601a      	str	r2, [r3, #0]
 8009162:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009166:	4770      	bx	lr
 8009168:	20003cec 	.word	0x20003cec

0800916c <_read>:
 800916c:	4b02      	ldr	r3, [pc, #8]	; (8009178 <_read+0xc>)
 800916e:	2258      	movs	r2, #88	; 0x58
 8009170:	601a      	str	r2, [r3, #0]
 8009172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009176:	4770      	bx	lr
 8009178:	20003cec 	.word	0x20003cec

0800917c <_sbrk>:
 800917c:	4a04      	ldr	r2, [pc, #16]	; (8009190 <_sbrk+0x14>)
 800917e:	6811      	ldr	r1, [r2, #0]
 8009180:	4603      	mov	r3, r0
 8009182:	b909      	cbnz	r1, 8009188 <_sbrk+0xc>
 8009184:	4903      	ldr	r1, [pc, #12]	; (8009194 <_sbrk+0x18>)
 8009186:	6011      	str	r1, [r2, #0]
 8009188:	6810      	ldr	r0, [r2, #0]
 800918a:	4403      	add	r3, r0
 800918c:	6013      	str	r3, [r2, #0]
 800918e:	4770      	bx	lr
 8009190:	20003cf4 	.word	0x20003cf4
 8009194:	20003cf8 	.word	0x20003cf8

08009198 <_write>:
 8009198:	4b02      	ldr	r3, [pc, #8]	; (80091a4 <_write+0xc>)
 800919a:	2258      	movs	r2, #88	; 0x58
 800919c:	601a      	str	r2, [r3, #0]
 800919e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091a2:	4770      	bx	lr
 80091a4:	20003cec 	.word	0x20003cec

080091a8 <_exit>:
 80091a8:	e7fe      	b.n	80091a8 <_exit>
	...

080091ac <_init>:
 80091ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ae:	bf00      	nop
 80091b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091b2:	bc08      	pop	{r3}
 80091b4:	469e      	mov	lr, r3
 80091b6:	4770      	bx	lr

080091b8 <_fini>:
 80091b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ba:	bf00      	nop
 80091bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091be:	bc08      	pop	{r3}
 80091c0:	469e      	mov	lr, r3
 80091c2:	4770      	bx	lr
