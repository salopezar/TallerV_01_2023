/**
 ******************************************************************************
 * @file           : main.c
 * @author         : SANTIAGO LÓPEZ ARANZAZU - CC. 1007429871
 * @e-mail         : salopezar@unal.edu.co
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/*************************** EXAMEN PARCIAL - 2023 ******************************/
/*
 * Este programa busca unificar algunas ideas y conceptos trabajados en el
 * curso de taller 5 anteriormente, a través de la integración de algunos drivers
 * que muestran la introducción a algunos protocolos de comunicación como USART e
 * I2C y la generación de señales PWM para el control de algunos dispositivos
 * externos al microcontrolador mediante señales cuadradas con características de
 * frecuencia y anchos de pulso determinados por lecturas de sensores externos o
 * de acuerdo al criterio que se requiera.
 *
 * Además, se implementa un nuevo driver que permite variar la frecuencia natural
 * de funcionamiento de 16 MHz del microcontrolador (PLL), que a su vez, obliga a
 * cambiar algunas frecuencias de transmisión en los protocolos de comunicación con
 * los que se ha trabajado en clase. Dado que en la tarea anterior no se incluyó
 * trabajo sobre el módulo de conversión análogo-digital ADC, en el presente se
 * muestra cómo lograr un driver para conseguir varias conversiones consecutivas
 * y el uso del reloj RTC interno del microcontrolador.
 *
 */

/*Librerias*/
#include <stdint.h>
#include <stdio.h>
#include <stdbool.h>
#include <math.h>
#include "stm32f4xx.h"
#include "ExtiDriver.h"
#include "GPIOxDriver.h"
#include "PLLDriver.h"
#include "BasicTimer.h"
#include "USARTxDriver.h"
#include "adcDriver.h"
#include "PwmDriver.h"

//Definición de los handlers necesarios
GPIO_Handler_t handlerStateLED				= {0};
GPIO_Handler_t handlerUSARTPINTX			= {0};
GPIO_Handler_t handlerUSARTPINRX			= {0};
GPIO_Handler_t handlerPinFrecuency 			= {0};

BasicTimer_Handler_t handlerBlinkyTimer 	= {0};
BasicTimer_Handler_t handlerTimer5			= {0};

ADC_Config_t adcConfig = {0};

USART_Handler_t USART6Comm = {0};

uint8_t adcIsComplete = 0;
uint16_t dataADC[1] = {0};
char buffer[64] = {0};
uint8_t cont = 0;
uint8_t numberOfConversion = 2;

// PWM para el muestreo a las frecuencias que se quieren.
GPIO_Handler_t HandlerPWM_1 = {0};
PWM_Handler_t handlerTIM3PWM_1 = {0};

// Para el PLL.
// Se nombra el PLL que cambia la frecuencia de operación del micro.
PLL_Handler_t handlerPLL = {0};

//Definición de las cabeceras de las funciones del main
void initHardware(void);

/* Función principal del programa */
int main(void){

	/* inicialización de todos los elementos del sistema */
	initHardware();
	writeMsg(&USART6Comm, "Hello i'm working");

	/* Loop infinito */
	while(1){
		if(adcIsComplete == 1){
			sprintf(buffer, "Data Canal 0 y 1: %u, %u\n", dataADC[0], dataADC[1]);
			writeMsg(&USART6Comm, buffer);
			adcIsComplete = 0;
			cont = 0;
		}

	}
	return 0;
}			// Final main

// Función donde se configuran los pines en general.
void initHardware(void){

	// Se configura el PLL con los parámetros dados.
	handlerPLL.PLL_Config.PLL_voltage		= VOLTAGE_100MHZ;
	handlerPLL.PLL_Config.PLL_frecuency		= FRECUENCY_100MHZ;
	PLL_Config(&handlerPLL);
	getConfigPLL();

	/* Configuración del LED de estado */
	handlerStateLED.pGPIOx 									= GPIOA;
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber 			= PIN_5;
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode 			= GPIO_MODE_OUT;
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType 			= GPIO_OTYPE_PUSHPULL;
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed 			= GPIO_OSPEED_FAST;
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl 		= GPIO_PUPDR_NOTHING;
	GPIO_Config(&handlerStateLED);

	/* Configuración del TIM2 para que haga un blinky cada 250 ms */
	handlerBlinkyTimer.ptrTIMx 								= TIM2;
	handlerBlinkyTimer.TIMx_Config.TIMx_mode 				= BTIMER_MODE_UP;
	handlerBlinkyTimer.TIMx_Config.TIMx_speed				= BTIMER_SPEED_100MHz;
	handlerBlinkyTimer.TIMx_Config.TIMx_period 				= 2500;
	handlerBlinkyTimer.TIMx_Config.TIMx_interruptEnable 	= BTIMER_INTERRUPT_ENABLE;
	BasicTimer_Config(&handlerBlinkyTimer);


	/* Configuración del TIM5*/
	handlerTimer5.ptrTIMx 								= TIM5;
	handlerTimer5.TIMx_Config.TIMx_mode 				= BTIMER_MODE_UP;
	handlerTimer5.TIMx_Config.TIMx_speed 				= BTIMER_SPEED_100us;
	handlerTimer5.TIMx_Config.TIMx_period 				= 10000;
	handlerTimer5.TIMx_Config.TIMx_interruptEnable 		= BTIMER_INTERRUPT_ENABLE;
	BasicTimer_Config(&handlerTimer5);

	/* Configuración del USART */
	// Transmisión
	handlerUSARTPINTX.pGPIOx  							= GPIOA;
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinNumber 	= PIN_11;
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFN;
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinAltFunMode = AF8;
	GPIO_Config(&handlerUSARTPINTX);

	// Recepción
	handlerUSARTPINRX.pGPIOx 						 	= GPIOA;
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinNumber		= PIN_12;
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFN;
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinAltFunMode = AF8;
	GPIO_Config(&handlerUSARTPINRX);

	// Para el USART 6
	USART6Comm.ptrUSARTx 					= USART6;
	USART6Comm.USART_Config.USART_baudrate 	= USART_BAUDRATE_115200;
	USART6Comm.USART_Config.USART_datasize 	= USART_DATASIZE_8BIT;
	USART6Comm.USART_Config.USART_parity 	= USART_PARITY_NONE;
	USART6Comm.USART_Config.USART_mode 		= USART_MODE_RXTX;
	USART6Comm.USART_Config.USART_stopbits 	= USART_STOPBIT_1;
	USART6Comm.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;

	// Se carga lo hecho sobre el USART
	USART_Config(&USART6Comm);

	/* Configuración ADC */

	// Cargando la configuración para la conversación ADC
	adcConfig.dataAlignment			= ADC_ALIGNMENT_RIGHT;
	adcConfig.resolution			= ADC_RESOLUTION_12_BIT;
	adcConfig.samplingPeriod		= ADC_SAMPLING_PERIOD_28_CYCLES;
	adcConfig.AdcEventType			= TIMER_ADC_EVENT;
	adcConfig.AdcChannelEvent		= TIM5_CH3;
	adcConfig.adcMultiChannel[0] 	= ADC_CHANNEL_0;
	adcConfig.adcMultiChannel[1]	= ADC_CHANNEL_1;
	adcMultiChannel(&adcConfig, 2);
	adcConfigEvents(&adcConfig);

	// El PWM para muestrear la señal a la frecuencias que se quiere.
	HandlerPWM_1.pGPIOx          					= GPIOC;
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinNumber  	= PIN_7;
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
	HandlerPWM_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;

	GPIO_Config(&HandlerPWM_1);

	handlerTIM3PWM_1.ptrTIMx           	  =   TIM5;
	handlerTIM3PWM_1.config.channel       =   PWM_CHANNEL_3;
	handlerTIM3PWM_1.config.duttyCicle    =   1500;
	handlerTIM3PWM_1.config.periodo       =   20000;
	handlerTIM3PWM_1.config.prescaler     =   80;

	pwm_Config(&handlerTIM3PWM_1);

	enableOutput(&handlerTIM3PWM_1);
	startPwmSignal(&handlerTIM3PWM_1);

	handlerPinFrecuency.pGPIOx 									= GPIOA;
	handlerPinFrecuency.GPIO_PinConfig.GPIO_PinNumber 			= PIN_8;
	handlerPinFrecuency.GPIO_PinConfig.GPIO_PinMode 			= GPIO_MODE_ALTFN;
	handlerPinFrecuency.GPIO_PinConfig.GPIO_PinAltFunMode 		= AF0;
	GPIO_Config(&handlerPinFrecuency);

} // Fin initHardware

/* Timer que gobierna el blinky del led de estado */
void BasicTimer2_Callback(void){
	GPIOxTooglePin (&handlerStateLED);
}

void adcComplete_Callback(void){

	if(cont < numberOfConversion){
		dataADC[cont] = getADC();
		cont++;
	}
	else{
		adcIsComplete = 1;
	}
}
