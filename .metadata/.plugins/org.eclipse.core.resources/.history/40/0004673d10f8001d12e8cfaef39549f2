/**
 ******************************************************************************
 * @file           : main.c
 * @author         : SANTIAGO LÓPEZ ARANZAZU - CC. 1007429871
 * @e-mail         : salopezar@unal.edu.co
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/***************************** TAREA ESPECIAL ********************************/
/*
 * Este programa busca unificar algunas ideas y conceptos trabajados en el
 * curso de taller 5 anteriormente, a través de la integración de algunos drivers
 * que muestran la introducción a algunos protocolos de comunicación como USART e
 * I2C y la generación de señales PWM para el control de algunos dispositivos
 * externos al microcontrolador mediante señales cuadradas con características de
 * frecuencia y anchos de pulso determinados por lecturas de sensores externos o
 * de acuerdo al criterio que se requiera.
 *
 * Además, se implementa un nuevo driver que permite variar la frecuencia natural
 * de funcionamiento de 16 MHz del microcontrolador (PLL), que a su vez, obliga a
 * cambiar algunas frecuencias de transmisión en los protocolos de comunicación con
 */


#include <stdint.h>
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

// Perifericos
#include "stm32f4xx.h"
#include "GPIOxDriver.h"
#include "USARTxDriver.h"
#include "BasicTimer.h"
#include "ExtiDriver.h"
#include "I2CDriver.h"
#include "PwmDriver.h"
#include "PLLDriver.h"

// Se crea el handler para el PLL que aumentara la frecuencia del reloj del micro
PLL_Handler_t handlerPLL = {0};

// Definicion de los handlers necesarios para transmision, recepción y blinky
GPIO_Handler_t handlerBlinkyPin 	= {0};


// Timer encargado del blinky
BasicTimer_Handler_t handlerBlinkyTimer = {0};


void initSystem(void);


int main(void)
{
	// Inicializamos todos los elementos del sistema
	initSystem();


    /* Loop forever */
	while(1){

	}
	return 0;
}

void initSystem(void){


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	/*
	 * PUNTO 1
	 * Se configura el PLL desde un driver que recide en la carpeta de PeripheralDrivers,
	 * para una información mas detallada acerca de la composición del driver, por favor dirigirse
	 * a él. Para la configuración del PLL se deja al usuario que pueda escoger el prescaler
	 * del APB1 (siendo el minimo prescaler 2) y del APB2, teniendo como frecuencia del reloj la
	 * maxima proporcionada por el microcontrolador, es decir, 100 MHz.
	 */

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	// Configuracion PLL
	handlerPLL.PLL_Config.APB1_prescaler 	= APB1_PRESCALER_2;
	handlerPLL.PLL_Config.APB2_prescaler	= APB2_PRESCALER_0;
	handlerPLL.PLL_Config.PLL_voltage		= VOLTAGE_100MHZ;
	PLL_Config(&handlerPLL);

	/* Configuración del LED de estado que indica el funcionamiento del programa */
	handlerBlinkyPin.pGPIOx 									= GPIOA;
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinNumber 				= PIN_5;
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinSpeed  				= GPIO_OSPEED_FAST;
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinPuPdControl			= GPIO_PUPDR_NOTHING;

	// Se carga lo que se hizo sobre el pin A5 sobre el que está el blinkyPin
	GPIO_Config(&handlerBlinkyPin);
	GPIO_WritePin(&handlerBlinkyPin, SET);

	// Configuración general en que se va a manejar el timer del blinky.
	handlerTim2.ptrTIMx								= TIM2;
	handlerTim2.TIMx_Config.TIMx_mode				= BTIMER_MODE_UP;
	handlerTim2.TIMx_Config.TIMx_speed				= BTIMER_SPEED_1ms;
	handlerTim2.TIMx_Config.TIMx_period				= 250; //Lanza una interrupcion cada 250 ms
	handlerTim2.TIMx_Config.TIMx_interruptEnable 	= BTIMER_INTERRUPT_ENABLE;

	/* Se carga ahora la configuración del TIMER */
	BasicTimer_Config(&handlerTim2);


}



// Callback del TIM, hacemos el blinky
void BasicTimer2_Callback(void){
	GPIOxTooglePin(&handlerBlinkyPin);
}
