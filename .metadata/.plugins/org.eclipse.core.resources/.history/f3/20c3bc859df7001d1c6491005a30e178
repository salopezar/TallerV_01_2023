/*
 * PLLDriver.c
 *
 *  Created on: 20/05/2023
 *      Author: santiago
 */

#include "PLLDriver.h"

/*  */

void configPLL(void){
	// Aseguramos que la entrada al multiplexor para PLL es el HSI
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC);

	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM);  // Limpiamos el registro

	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLM_3); // Ponemos un 8 en el PLLM

	/* Ponemos PLLN en 80 */
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLN);  // Limpiamos el registro
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_4);
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_6);

	//Ponemos  PLLP en 2
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLP);

	/* Cambiamos la latencia  en FLASH_ACR para que el micro espere un poco para entrar la información en los registros */

	FLASH->ACR &= ~(FLASH_ACR_LATENCY);  //Limpiamos el registro

	/* 2WS de latencia */
	FLASH->ACR |= FLASH_ACR_LATENCY_2WS;

	/*prueba Configuramos el MCO1 (PIN A8 como funcion alternativa 0_0)*/

	// Seleccionamos la señal PLL

	RCC->CFGR |= (RCC_CFGR_MCO1_0);
	RCC->CFGR |= (RCC_CFGR_MCO1_1);

	// Utilizamos un prescaler para poder ver la señal en el osciloscopio (4)

	RCC->CFGR &= ~(RCC_CFGR_MCO1PRE_0);
	RCC->CFGR |= (RCC_CFGR_MCO1PRE_1);
	RCC->CFGR |= (RCC_CFGR_MCO1PRE_2);

	// Encender el PLL

	RCC->CR |= RCC_CR_PLLON;

	// Esperamos que el PLL se cierre (estabilizacion)
	while(!(RCC->CR & RCC_CR_PLLRDY)){
		__NOP();
	}

	// Cambiamos el CPU Clock source cambiando los SW bits (System clock switch)
	RCC->CFGR &= ~(RCC_CFGR_SW);
	RCC->CFGR |= (RCC_CFGR_SW_1);

}

