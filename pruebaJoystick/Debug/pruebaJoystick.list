
pruebaJoystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007298  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08007438  08007438  00017438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007904  08007904  00020218  2**0
                  CONTENTS
  4 .ARM          00000000  08007904  08007904  00020218  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007904  08007904  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007904  08007904  00017904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007908  08007908  00017908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800790c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000218  08007b24  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  08007b24  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   000039c9  00000000  00000000  00020242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bfc  00000000  00000000  00023c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000278  00000000  00000000  00024808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000200  00000000  00000000  00024a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fba1  00000000  00000000  00024c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003e30  00000000  00000000  00034821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055d0d  00000000  00000000  00038651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008e35e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e78  00000000  00000000  0008e3b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00090228  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  000902f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007420 	.word	0x08007420

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	08007420 	.word	0x08007420

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	4605      	mov	r5, r0
 8000c9c:	460c      	mov	r4, r1
 8000c9e:	4628      	mov	r0, r5
 8000ca0:	4621      	mov	r1, r4
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f7ff ff21 	bl	8000aec <__aeabi_dcmplt>
 8000caa:	b928      	cbnz	r0, 8000cb8 <__aeabi_d2lz+0x20>
 8000cac:	4628      	mov	r0, r5
 8000cae:	4621      	mov	r1, r4
 8000cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb4:	f000 b80a 	b.w	8000ccc <__aeabi_d2ulz>
 8000cb8:	4628      	mov	r0, r5
 8000cba:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000cbe:	f000 f805 	bl	8000ccc <__aeabi_d2ulz>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	bd38      	pop	{r3, r4, r5, pc}
 8000cca:	bf00      	nop

08000ccc <__aeabi_d2ulz>:
 8000ccc:	b5d0      	push	{r4, r6, r7, lr}
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__aeabi_d2ulz+0x34>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4606      	mov	r6, r0
 8000cd4:	460f      	mov	r7, r1
 8000cd6:	f7ff fc97 	bl	8000608 <__aeabi_dmul>
 8000cda:	f7ff ff6d 	bl	8000bb8 <__aeabi_d2uiz>
 8000cde:	4604      	mov	r4, r0
 8000ce0:	f7ff fc18 	bl	8000514 <__aeabi_ui2d>
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <__aeabi_d2ulz+0x38>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f7ff fc8e 	bl	8000608 <__aeabi_dmul>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4630      	mov	r0, r6
 8000cf2:	4639      	mov	r1, r7
 8000cf4:	f7ff fad0 	bl	8000298 <__aeabi_dsub>
 8000cf8:	f7ff ff5e 	bl	8000bb8 <__aeabi_d2uiz>
 8000cfc:	4621      	mov	r1, r4
 8000cfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000d00:	3df00000 	.word	0x3df00000
 8000d04:	41f00000 	.word	0x41f00000

08000d08 <main>:
void pwmSignalSwitch(void);
uint16_t flagADC = {0};
uint16_t counterADC = {0};

/* Función principal del programa */
int main(void){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0

	/* inicialización de todos los elementos del sistema */
	initHardware();
 8000d0c:	f000 f82e 	bl	8000d6c <initHardware>
	writeMsg(&USART2Comm, bufferData);
 8000d10:	490e      	ldr	r1, [pc, #56]	; (8000d4c <main+0x44>)
 8000d12:	480f      	ldr	r0, [pc, #60]	; (8000d50 <main+0x48>)
 8000d14:	f001 fb5b 	bl	80023ce <writeMsg>
	/* Loop infsprintf(buffer, "Luxometro = %u \n", dataADCChannel2[0]);
//			writeMsg(&USART2Comm, buffer);inito */
	while(1){
		pwmSignalSwitch();
 8000d18:	f000 fa6e 	bl	80011f8 <pwmSignalSwitch>
		if(flagADC){
 8000d1c:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <main+0x4c>)
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d0f9      	beq.n	8000d18 <main+0x10>
			sprintf(buffer, "Channel X = %u , Channel Y = %u \n", dataADCChannel0[0], dataADCChannel1[0]);
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <main+0x50>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <main+0x54>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	490c      	ldr	r1, [pc, #48]	; (8000d60 <main+0x58>)
 8000d2e:	480d      	ldr	r0, [pc, #52]	; (8000d64 <main+0x5c>)
 8000d30:	f002 fd78 	bl	8003824 <siprintf>
			writeMsg(&USART2Comm, buffer);
 8000d34:	490b      	ldr	r1, [pc, #44]	; (8000d64 <main+0x5c>)
 8000d36:	4806      	ldr	r0, [pc, #24]	; (8000d50 <main+0x48>)
 8000d38:	f001 fb49 	bl	80023ce <writeMsg>

//			sprintf(buffer, "Luxometro = %u \n", dataADCChannel2[0]);
//			writeMsg(&USART2Comm, buffer);
			rxData = 0;
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <main+0x60>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
			flagADC = 0;
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <main+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	801a      	strh	r2, [r3, #0]
		pwmSignalSwitch();
 8000d48:	e7e6      	b.n	8000d18 <main+0x10>
 8000d4a:	bf00      	nop
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	200002d8 	.word	0x200002d8
 8000d54:	2000045a 	.word	0x2000045a
 8000d58:	2000044c 	.word	0x2000044c
 8000d5c:	20000450 	.word	0x20000450
 8000d60:	08007438 	.word	0x08007438
 8000d64:	20000408 	.word	0x20000408
 8000d68:	20000458 	.word	0x20000458

08000d6c <initHardware>:
	}
	return 0;
}// Final del main

// Función donde se configuran los pimsgToSendnes en general.
void initHardware(void){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0

	// Se desactiva el reloj HSE porque PH0 está conectado a un oscilador HSE.
	RCC->CR &= ~(RCC_CR_HSEON);
 8000d70:	4bad      	ldr	r3, [pc, #692]	; (8001028 <initHardware+0x2bc>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4aac      	ldr	r2, [pc, #688]	; (8001028 <initHardware+0x2bc>)
 8000d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d7a:	6013      	str	r3, [r2, #0]

	handlerStateLED.pGPIOx                               	= GPIOH;
 8000d7c:	4bab      	ldr	r3, [pc, #684]	; (800102c <initHardware+0x2c0>)
 8000d7e:	4aac      	ldr	r2, [pc, #688]	; (8001030 <initHardware+0x2c4>)
 8000d80:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber 			= PIN_1;
 8000d82:	4baa      	ldr	r3, [pc, #680]	; (800102c <initHardware+0x2c0>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode 			= GPIO_MODE_OUT;
 8000d88:	4ba8      	ldr	r3, [pc, #672]	; (800102c <initHardware+0x2c0>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType 			= GPIO_OTYPE_PUSHPULL;
 8000d8e:	4ba7      	ldr	r3, [pc, #668]	; (800102c <initHardware+0x2c0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed 			= GPIO_OSPEED_FAST;
 8000d94:	4ba5      	ldr	r3, [pc, #660]	; (800102c <initHardware+0x2c0>)
 8000d96:	2202      	movs	r2, #2
 8000d98:	719a      	strb	r2, [r3, #6]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl 		= GPIO_PUPDR_NOTHING;
 8000d9a:	4ba4      	ldr	r3, [pc, #656]	; (800102c <initHardware+0x2c0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	71da      	strb	r2, [r3, #7]
	GPIO_Config(&handlerStateLED);
 8000da0:	48a2      	ldr	r0, [pc, #648]	; (800102c <initHardware+0x2c0>)
 8000da2:	f000 fe33 	bl	8001a0c <GPIO_Config>

	/* Configuración del TIM2 para que haga un blinky cada 250 ms */
	handlerBlinkyTimer.ptrTIMx 								= TIM2;
 8000da6:	4ba3      	ldr	r3, [pc, #652]	; (8001034 <initHardware+0x2c8>)
 8000da8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dac:	601a      	str	r2, [r3, #0]
	handlerBlinkyTimer.TIMx_Config.TIMx_mode 				= BTIMER_MODE_UP;
 8000dae:	4ba1      	ldr	r3, [pc, #644]	; (8001034 <initHardware+0x2c8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	711a      	strb	r2, [r3, #4]
	handlerBlinkyTimer.TIMx_Config.TIMx_speed				= BTIMER_SPEED_1ms;
 8000db4:	4b9f      	ldr	r3, [pc, #636]	; (8001034 <initHardware+0x2c8>)
 8000db6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000dba:	609a      	str	r2, [r3, #8]
	handlerBlinkyTimer.TIMx_Config.TIMx_period 				= 250;
 8000dbc:	4b9d      	ldr	r3, [pc, #628]	; (8001034 <initHardware+0x2c8>)
 8000dbe:	22fa      	movs	r2, #250	; 0xfa
 8000dc0:	60da      	str	r2, [r3, #12]
	handlerBlinkyTimer.TIMx_Config.TIMx_interruptEnable 	= BTIMER_INTERRUPT_ENABLE;
 8000dc2:	4b9c      	ldr	r3, [pc, #624]	; (8001034 <initHardware+0x2c8>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	741a      	strb	r2, [r3, #16]
	BasicTimer_Config(&handlerBlinkyTimer);
 8000dc8:	489a      	ldr	r0, [pc, #616]	; (8001034 <initHardware+0x2c8>)
 8000dca:	f000 fd23 	bl	8001814 <BasicTimer_Config>

	/* Configuración del USART */
	// Transmisión
	handlerUSARTPINTX.pGPIOx  							= GPIOA;
 8000dce:	4b9a      	ldr	r3, [pc, #616]	; (8001038 <initHardware+0x2cc>)
 8000dd0:	4a9a      	ldr	r2, [pc, #616]	; (800103c <initHardware+0x2d0>)
 8000dd2:	601a      	str	r2, [r3, #0]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinNumber 	= PIN_2;
 8000dd4:	4b98      	ldr	r3, [pc, #608]	; (8001038 <initHardware+0x2cc>)
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	711a      	strb	r2, [r3, #4]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFN;
 8000dda:	4b97      	ldr	r3, [pc, #604]	; (8001038 <initHardware+0x2cc>)
 8000ddc:	2202      	movs	r2, #2
 8000dde:	715a      	strb	r2, [r3, #5]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinAltFunMode = AF7;
 8000de0:	4b95      	ldr	r3, [pc, #596]	; (8001038 <initHardware+0x2cc>)
 8000de2:	2207      	movs	r2, #7
 8000de4:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerUSARTPINTX);
 8000de6:	4894      	ldr	r0, [pc, #592]	; (8001038 <initHardware+0x2cc>)
 8000de8:	f000 fe10 	bl	8001a0c <GPIO_Config>

	// Recepción
	handlerUSARTPINRX.pGPIOx 						 	= GPIOA;
 8000dec:	4b94      	ldr	r3, [pc, #592]	; (8001040 <initHardware+0x2d4>)
 8000dee:	4a93      	ldr	r2, [pc, #588]	; (800103c <initHardware+0x2d0>)
 8000df0:	601a      	str	r2, [r3, #0]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinNumber		= PIN_3;
 8000df2:	4b93      	ldr	r3, [pc, #588]	; (8001040 <initHardware+0x2d4>)
 8000df4:	2203      	movs	r2, #3
 8000df6:	711a      	strb	r2, [r3, #4]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFN;
 8000df8:	4b91      	ldr	r3, [pc, #580]	; (8001040 <initHardware+0x2d4>)
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	715a      	strb	r2, [r3, #5]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinAltFunMode = AF7;
 8000dfe:	4b90      	ldr	r3, [pc, #576]	; (8001040 <initHardware+0x2d4>)
 8000e00:	2207      	movs	r2, #7
 8000e02:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerUSARTPINRX);
 8000e04:	488e      	ldr	r0, [pc, #568]	; (8001040 <initHardware+0x2d4>)
 8000e06:	f000 fe01 	bl	8001a0c <GPIO_Config>

	// Para el USART 6
	USART2Comm.ptrUSARTx 					= USART2;
 8000e0a:	4b8e      	ldr	r3, [pc, #568]	; (8001044 <initHardware+0x2d8>)
 8000e0c:	4a8e      	ldr	r2, [pc, #568]	; (8001048 <initHardware+0x2dc>)
 8000e0e:	601a      	str	r2, [r3, #0]
	USART2Comm.USART_Config.USART_baudrate 	= USART_BAUDRATE_115200;
 8000e10:	4b8c      	ldr	r3, [pc, #560]	; (8001044 <initHardware+0x2d8>)
 8000e12:	2202      	movs	r2, #2
 8000e14:	715a      	strb	r2, [r3, #5]
	USART2Comm.USART_Config.USART_datasize 	= USART_DATASIZE_8BIT;
 8000e16:	4b8b      	ldr	r3, [pc, #556]	; (8001044 <initHardware+0x2d8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	719a      	strb	r2, [r3, #6]
	USART2Comm.USART_Config.USART_parity 	= USART_PARITY_NONE;
 8000e1c:	4b89      	ldr	r3, [pc, #548]	; (8001044 <initHardware+0x2d8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	71da      	strb	r2, [r3, #7]
	USART2Comm.USART_Config.USART_mode 		= USART_MODE_RXTX;
 8000e22:	4b88      	ldr	r3, [pc, #544]	; (8001044 <initHardware+0x2d8>)
 8000e24:	2202      	movs	r2, #2
 8000e26:	711a      	strb	r2, [r3, #4]
	USART2Comm.USART_Config.USART_stopbits 	= USART_STOPBIT_1;
 8000e28:	4b86      	ldr	r3, [pc, #536]	; (8001044 <initHardware+0x2d8>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	721a      	strb	r2, [r3, #8]
	USART2Comm.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;
 8000e2e:	4b85      	ldr	r3, [pc, #532]	; (8001044 <initHardware+0x2d8>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	725a      	strb	r2, [r3, #9]

	// Se carga lo hecho sobre el USART
	USART_Config(&USART2Comm);
 8000e34:	4883      	ldr	r0, [pc, #524]	; (8001044 <initHardware+0x2d8>)
 8000e36:	f001 f8ad 	bl	8001f94 <USART_Config>

	/* Configuración ADC */
	// Cargando la configuración para la conversación ADC
	adcConfig.dataAlignment			= ADC_ALIGNMENT_RIGHT;
 8000e3a:	4b84      	ldr	r3, [pc, #528]	; (800104c <initHardware+0x2e0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	711a      	strb	r2, [r3, #4]
	adcConfig.resolution			= ADC_RESOLUTION_12_BIT;
 8000e40:	4b82      	ldr	r3, [pc, #520]	; (800104c <initHardware+0x2e0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	705a      	strb	r2, [r3, #1]
	adcConfig.samplingPeriod		= ADC_SAMPLING_PERIOD_28_CYCLES;
 8000e46:	4b81      	ldr	r3, [pc, #516]	; (800104c <initHardware+0x2e0>)
 8000e48:	2202      	movs	r2, #2
 8000e4a:	805a      	strh	r2, [r3, #2]
	adcConfig.AdcEventType			= TIMER_ADC_EVENT;
 8000e4c:	4b7f      	ldr	r3, [pc, #508]	; (800104c <initHardware+0x2e0>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	721a      	strb	r2, [r3, #8]
	adcConfig.AdcChannelEvent		= TIM5_CH3;
 8000e52:	4b7e      	ldr	r3, [pc, #504]	; (800104c <initHardware+0x2e0>)
 8000e54:	220a      	movs	r2, #10
 8000e56:	725a      	strb	r2, [r3, #9]
	adcConfig.adcMultiChannel[0] 	= ADC_CHANNEL_1;
 8000e58:	4b7c      	ldr	r3, [pc, #496]	; (800104c <initHardware+0x2e0>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	729a      	strb	r2, [r3, #10]
	adcConfig.adcMultiChannel[1]	= ADC_CHANNEL_4;
 8000e5e:	4b7b      	ldr	r3, [pc, #492]	; (800104c <initHardware+0x2e0>)
 8000e60:	2204      	movs	r2, #4
 8000e62:	72da      	strb	r2, [r3, #11]
	adcConfig.adcMultiChannel[2]	= ADC_CHANNEL_5;
 8000e64:	4b79      	ldr	r3, [pc, #484]	; (800104c <initHardware+0x2e0>)
 8000e66:	2205      	movs	r2, #5
 8000e68:	731a      	strb	r2, [r3, #12]
	adcMultiChannel(&adcConfig, 3);
 8000e6a:	2103      	movs	r1, #3
 8000e6c:	4877      	ldr	r0, [pc, #476]	; (800104c <initHardware+0x2e0>)
 8000e6e:	f001 fcab 	bl	80027c8 <adcMultiChannel>
	adcConfigEvents(&adcConfig);
 8000e72:	4876      	ldr	r0, [pc, #472]	; (800104c <initHardware+0x2e0>)
 8000e74:	f001 fc1c 	bl	80026b0 <adcConfigEvents>

	// handler PWM
	handlerPWMprueba.ptrTIMx           	  =   TIM5;
 8000e78:	4b75      	ldr	r3, [pc, #468]	; (8001050 <initHardware+0x2e4>)
 8000e7a:	4a76      	ldr	r2, [pc, #472]	; (8001054 <initHardware+0x2e8>)
 8000e7c:	601a      	str	r2, [r3, #0]
	handlerPWMprueba.config.channel       =   PWM_CHANNEL_3;
 8000e7e:	4b74      	ldr	r3, [pc, #464]	; (8001050 <initHardware+0x2e4>)
 8000e80:	2202      	movs	r2, #2
 8000e82:	711a      	strb	r2, [r3, #4]
	handlerPWMprueba.config.duttyCicle    =   10000;
 8000e84:	4b72      	ldr	r3, [pc, #456]	; (8001050 <initHardware+0x2e4>)
 8000e86:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e8a:	81da      	strh	r2, [r3, #14]
	handlerPWMprueba.config.periodo       =   20000;
 8000e8c:	4b70      	ldr	r3, [pc, #448]	; (8001050 <initHardware+0x2e4>)
 8000e8e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000e92:	819a      	strh	r2, [r3, #12]
	handlerPWMprueba.config.prescaler     =   16;
 8000e94:	4b6e      	ldr	r3, [pc, #440]	; (8001050 <initHardware+0x2e4>)
 8000e96:	2210      	movs	r2, #16
 8000e98:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWMprueba);
 8000e9a:	486d      	ldr	r0, [pc, #436]	; (8001050 <initHardware+0x2e4>)
 8000e9c:	f000 fef4 	bl	8001c88 <pwm_Config>
	enableOutput(&handlerPWMprueba);
 8000ea0:	486b      	ldr	r0, [pc, #428]	; (8001050 <initHardware+0x2e4>)
 8000ea2:	f000 ffc7 	bl	8001e34 <enableOutput>
	startPwmSignal(&handlerPWMprueba);
 8000ea6:	486a      	ldr	r0, [pc, #424]	; (8001050 <initHardware+0x2e4>)
 8000ea8:	f000 ffb2 	bl	8001e10 <startPwmSignal>

	// GPIO TIM 3 CC4
	HandlerTIM5PWM_1.pGPIOx          					= GPIOB;
 8000eac:	4b6a      	ldr	r3, [pc, #424]	; (8001058 <initHardware+0x2ec>)
 8000eae:	4a6b      	ldr	r2, [pc, #428]	; (800105c <initHardware+0x2f0>)
 8000eb0:	601a      	str	r2, [r3, #0]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinNumber  	= PIN_1;
 8000eb2:	4b69      	ldr	r3, [pc, #420]	; (8001058 <initHardware+0x2ec>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	711a      	strb	r2, [r3, #4]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8000eb8:	4b67      	ldr	r3, [pc, #412]	; (8001058 <initHardware+0x2ec>)
 8000eba:	2202      	movs	r2, #2
 8000ebc:	715a      	strb	r2, [r3, #5]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8000ebe:	4b66      	ldr	r3, [pc, #408]	; (8001058 <initHardware+0x2ec>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	721a      	strb	r2, [r3, #8]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000ec4:	4b64      	ldr	r3, [pc, #400]	; (8001058 <initHardware+0x2ec>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	71da      	strb	r2, [r3, #7]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8000eca:	4b63      	ldr	r3, [pc, #396]	; (8001058 <initHardware+0x2ec>)
 8000ecc:	2202      	movs	r2, #2
 8000ece:	719a      	strb	r2, [r3, #6]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000ed0:	4b61      	ldr	r3, [pc, #388]	; (8001058 <initHardware+0x2ec>)
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerTIM5PWM_1);
 8000ed6:	4860      	ldr	r0, [pc, #384]	; (8001058 <initHardware+0x2ec>)
 8000ed8:	f000 fd98 	bl	8001a0c <GPIO_Config>
	// Izquierda
	handlerPWM_1.ptrTIMx           	  =   TIM3;
 8000edc:	4b60      	ldr	r3, [pc, #384]	; (8001060 <initHardware+0x2f4>)
 8000ede:	4a61      	ldr	r2, [pc, #388]	; (8001064 <initHardware+0x2f8>)
 8000ee0:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel       =   PWM_CHANNEL_4;
 8000ee2:	4b5f      	ldr	r3, [pc, #380]	; (8001060 <initHardware+0x2f4>)
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	711a      	strb	r2, [r3, #4]
	handlerPWM_1.config.duttyCicle    =   10000;
 8000ee8:	4b5d      	ldr	r3, [pc, #372]	; (8001060 <initHardware+0x2f4>)
 8000eea:	f242 7210 	movw	r2, #10000	; 0x2710
 8000eee:	81da      	strh	r2, [r3, #14]
	handlerPWM_1.config.periodo       =   20000;
 8000ef0:	4b5b      	ldr	r3, [pc, #364]	; (8001060 <initHardware+0x2f4>)
 8000ef2:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000ef6:	819a      	strh	r2, [r3, #12]
	handlerPWM_1.config.prescaler     =   16;
 8000ef8:	4b59      	ldr	r3, [pc, #356]	; (8001060 <initHardware+0x2f4>)
 8000efa:	2210      	movs	r2, #16
 8000efc:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_1);
 8000efe:	4858      	ldr	r0, [pc, #352]	; (8001060 <initHardware+0x2f4>)
 8000f00:	f000 fec2 	bl	8001c88 <pwm_Config>

	// GPIO TIM 3 CC3
	HandlerTIM3PWM_2.pGPIOx          					= GPIOB;
 8000f04:	4b58      	ldr	r3, [pc, #352]	; (8001068 <initHardware+0x2fc>)
 8000f06:	4a55      	ldr	r2, [pc, #340]	; (800105c <initHardware+0x2f0>)
 8000f08:	601a      	str	r2, [r3, #0]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinNumber  	= PIN_0;
 8000f0a:	4b57      	ldr	r3, [pc, #348]	; (8001068 <initHardware+0x2fc>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	711a      	strb	r2, [r3, #4]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8000f10:	4b55      	ldr	r3, [pc, #340]	; (8001068 <initHardware+0x2fc>)
 8000f12:	2202      	movs	r2, #2
 8000f14:	715a      	strb	r2, [r3, #5]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8000f16:	4b54      	ldr	r3, [pc, #336]	; (8001068 <initHardware+0x2fc>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	721a      	strb	r2, [r3, #8]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f1c:	4b52      	ldr	r3, [pc, #328]	; (8001068 <initHardware+0x2fc>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	71da      	strb	r2, [r3, #7]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8000f22:	4b51      	ldr	r3, [pc, #324]	; (8001068 <initHardware+0x2fc>)
 8000f24:	2202      	movs	r2, #2
 8000f26:	719a      	strb	r2, [r3, #6]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000f28:	4b4f      	ldr	r3, [pc, #316]	; (8001068 <initHardware+0x2fc>)
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerTIM3PWM_2);
 8000f2e:	484e      	ldr	r0, [pc, #312]	; (8001068 <initHardware+0x2fc>)
 8000f30:	f000 fd6c 	bl	8001a0c <GPIO_Config>
	// Derecha
	handlerPWM_2.ptrTIMx           	  =   TIM3;
 8000f34:	4b4d      	ldr	r3, [pc, #308]	; (800106c <initHardware+0x300>)
 8000f36:	4a4b      	ldr	r2, [pc, #300]	; (8001064 <initHardware+0x2f8>)
 8000f38:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel       =   PWM_CHANNEL_3;
 8000f3a:	4b4c      	ldr	r3, [pc, #304]	; (800106c <initHardware+0x300>)
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	711a      	strb	r2, [r3, #4]
	handlerPWM_2.config.duttyCicle    =   10000;
 8000f40:	4b4a      	ldr	r3, [pc, #296]	; (800106c <initHardware+0x300>)
 8000f42:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f46:	81da      	strh	r2, [r3, #14]
	handlerPWM_2.config.periodo       =   20000;
 8000f48:	4b48      	ldr	r3, [pc, #288]	; (800106c <initHardware+0x300>)
 8000f4a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000f4e:	819a      	strh	r2, [r3, #12]
	handlerPWM_2.config.prescaler     =   16;
 8000f50:	4b46      	ldr	r3, [pc, #280]	; (800106c <initHardware+0x300>)
 8000f52:	2210      	movs	r2, #16
 8000f54:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_2);
 8000f56:	4845      	ldr	r0, [pc, #276]	; (800106c <initHardware+0x300>)
 8000f58:	f000 fe96 	bl	8001c88 <pwm_Config>

	// GPIO TIM 3 CC1
	HandlerTIM3PWM_3.pGPIOx          					= GPIOA;
 8000f5c:	4b44      	ldr	r3, [pc, #272]	; (8001070 <initHardware+0x304>)
 8000f5e:	4a37      	ldr	r2, [pc, #220]	; (800103c <initHardware+0x2d0>)
 8000f60:	601a      	str	r2, [r3, #0]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinNumber  	= PIN_6;
 8000f62:	4b43      	ldr	r3, [pc, #268]	; (8001070 <initHardware+0x304>)
 8000f64:	2206      	movs	r2, #6
 8000f66:	711a      	strb	r2, [r3, #4]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8000f68:	4b41      	ldr	r3, [pc, #260]	; (8001070 <initHardware+0x304>)
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	715a      	strb	r2, [r3, #5]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8000f6e:	4b40      	ldr	r3, [pc, #256]	; (8001070 <initHardware+0x304>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	721a      	strb	r2, [r3, #8]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f74:	4b3e      	ldr	r3, [pc, #248]	; (8001070 <initHardware+0x304>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	71da      	strb	r2, [r3, #7]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8000f7a:	4b3d      	ldr	r3, [pc, #244]	; (8001070 <initHardware+0x304>)
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	719a      	strb	r2, [r3, #6]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000f80:	4b3b      	ldr	r3, [pc, #236]	; (8001070 <initHardware+0x304>)
 8000f82:	2202      	movs	r2, #2
 8000f84:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerTIM3PWM_3);
 8000f86:	483a      	ldr	r0, [pc, #232]	; (8001070 <initHardware+0x304>)
 8000f88:	f000 fd40 	bl	8001a0c <GPIO_Config>
	// Arriba
	handlerPWM_3.ptrTIMx           	  =   TIM3;
 8000f8c:	4b39      	ldr	r3, [pc, #228]	; (8001074 <initHardware+0x308>)
 8000f8e:	4a35      	ldr	r2, [pc, #212]	; (8001064 <initHardware+0x2f8>)
 8000f90:	601a      	str	r2, [r3, #0]
	handlerPWM_3.config.channel       =   PWM_CHANNEL_1;
 8000f92:	4b38      	ldr	r3, [pc, #224]	; (8001074 <initHardware+0x308>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	711a      	strb	r2, [r3, #4]
	handlerPWM_3.config.duttyCicle    =   10000;
 8000f98:	4b36      	ldr	r3, [pc, #216]	; (8001074 <initHardware+0x308>)
 8000f9a:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f9e:	81da      	strh	r2, [r3, #14]
	handlerPWM_3.config.periodo       =   20000;
 8000fa0:	4b34      	ldr	r3, [pc, #208]	; (8001074 <initHardware+0x308>)
 8000fa2:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000fa6:	819a      	strh	r2, [r3, #12]
	handlerPWM_3.config.prescaler     =   16;
 8000fa8:	4b32      	ldr	r3, [pc, #200]	; (8001074 <initHardware+0x308>)
 8000faa:	2210      	movs	r2, #16
 8000fac:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_3);
 8000fae:	4831      	ldr	r0, [pc, #196]	; (8001074 <initHardware+0x308>)
 8000fb0:	f000 fe6a 	bl	8001c88 <pwm_Config>

	// GPIO TIM 3 CC2
	HandlerTIM3PWM_4.pGPIOx          					= GPIOA;
 8000fb4:	4b30      	ldr	r3, [pc, #192]	; (8001078 <initHardware+0x30c>)
 8000fb6:	4a21      	ldr	r2, [pc, #132]	; (800103c <initHardware+0x2d0>)
 8000fb8:	601a      	str	r2, [r3, #0]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinNumber  	= PIN_7;
 8000fba:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <initHardware+0x30c>)
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	711a      	strb	r2, [r3, #4]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <initHardware+0x30c>)
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	715a      	strb	r2, [r3, #5]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8000fc6:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <initHardware+0x30c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	721a      	strb	r2, [r3, #8]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000fcc:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <initHardware+0x30c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	71da      	strb	r2, [r3, #7]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8000fd2:	4b29      	ldr	r3, [pc, #164]	; (8001078 <initHardware+0x30c>)
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	719a      	strb	r2, [r3, #6]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000fd8:	4b27      	ldr	r3, [pc, #156]	; (8001078 <initHardware+0x30c>)
 8000fda:	2202      	movs	r2, #2
 8000fdc:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerTIM3PWM_4);
 8000fde:	4826      	ldr	r0, [pc, #152]	; (8001078 <initHardware+0x30c>)
 8000fe0:	f000 fd14 	bl	8001a0c <GPIO_Config>
	// Abajo
	handlerPWM_4.ptrTIMx           	  =   TIM3;
 8000fe4:	4b25      	ldr	r3, [pc, #148]	; (800107c <initHardware+0x310>)
 8000fe6:	4a1f      	ldr	r2, [pc, #124]	; (8001064 <initHardware+0x2f8>)
 8000fe8:	601a      	str	r2, [r3, #0]
	handlerPWM_4.config.channel       =   PWM_CHANNEL_2;
 8000fea:	4b24      	ldr	r3, [pc, #144]	; (800107c <initHardware+0x310>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	711a      	strb	r2, [r3, #4]
	handlerPWM_4.config.duttyCicle    =   10000;
 8000ff0:	4b22      	ldr	r3, [pc, #136]	; (800107c <initHardware+0x310>)
 8000ff2:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ff6:	81da      	strh	r2, [r3, #14]
	handlerPWM_4.config.periodo       =   20000;
 8000ff8:	4b20      	ldr	r3, [pc, #128]	; (800107c <initHardware+0x310>)
 8000ffa:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000ffe:	819a      	strh	r2, [r3, #12]
	handlerPWM_4.config.prescaler     =   16;
 8001000:	4b1e      	ldr	r3, [pc, #120]	; (800107c <initHardware+0x310>)
 8001002:	2210      	movs	r2, #16
 8001004:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_4);
 8001006:	481d      	ldr	r0, [pc, #116]	; (800107c <initHardware+0x310>)
 8001008:	f000 fe3e 	bl	8001c88 <pwm_Config>

	// GPIO TIM 4 CC1
	HandlerTIM4PWM_5.pGPIOx          					= GPIOB;
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <initHardware+0x314>)
 800100e:	4a13      	ldr	r2, [pc, #76]	; (800105c <initHardware+0x2f0>)
 8001010:	601a      	str	r2, [r3, #0]
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinNumber  	= PIN_6;
 8001012:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <initHardware+0x314>)
 8001014:	2206      	movs	r2, #6
 8001016:	711a      	strb	r2, [r3, #4]
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <initHardware+0x314>)
 800101a:	2202      	movs	r2, #2
 800101c:	715a      	strb	r2, [r3, #5]
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 800101e:	4b18      	ldr	r3, [pc, #96]	; (8001080 <initHardware+0x314>)
 8001020:	2200      	movs	r2, #0
 8001022:	721a      	strb	r2, [r3, #8]
 8001024:	e02e      	b.n	8001084 <initHardware+0x318>
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800
 800102c:	20000234 	.word	0x20000234
 8001030:	40021c00 	.word	0x40021c00
 8001034:	200002b8 	.word	0x200002b8
 8001038:	20000240 	.word	0x20000240
 800103c:	40020000 	.word	0x40020000
 8001040:	2000024c 	.word	0x2000024c
 8001044:	200002d8 	.word	0x200002d8
 8001048:	40004400 	.word	0x40004400
 800104c:	200002cc 	.word	0x200002cc
 8001050:	20000368 	.word	0x20000368
 8001054:	40000c00 	.word	0x40000c00
 8001058:	20000258 	.word	0x20000258
 800105c:	40020400 	.word	0x40020400
 8001060:	20000378 	.word	0x20000378
 8001064:	40000400 	.word	0x40000400
 8001068:	20000264 	.word	0x20000264
 800106c:	20000388 	.word	0x20000388
 8001070:	20000270 	.word	0x20000270
 8001074:	20000398 	.word	0x20000398
 8001078:	2000027c 	.word	0x2000027c
 800107c:	200003a8 	.word	0x200003a8
 8001080:	20000288 	.word	0x20000288
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001084:	4b52      	ldr	r3, [pc, #328]	; (80011d0 <initHardware+0x464>)
 8001086:	2200      	movs	r2, #0
 8001088:	71da      	strb	r2, [r3, #7]
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 800108a:	4b51      	ldr	r3, [pc, #324]	; (80011d0 <initHardware+0x464>)
 800108c:	2202      	movs	r2, #2
 800108e:	719a      	strb	r2, [r3, #6]
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001090:	4b4f      	ldr	r3, [pc, #316]	; (80011d0 <initHardware+0x464>)
 8001092:	2202      	movs	r2, #2
 8001094:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerTIM4PWM_5);
 8001096:	484e      	ldr	r0, [pc, #312]	; (80011d0 <initHardware+0x464>)
 8001098:	f000 fcb8 	bl	8001a0c <GPIO_Config>
	// DIAGONAL X
	handlerPWM_5.ptrTIMx           	  =   TIM4;
 800109c:	4b4d      	ldr	r3, [pc, #308]	; (80011d4 <initHardware+0x468>)
 800109e:	4a4e      	ldr	r2, [pc, #312]	; (80011d8 <initHardware+0x46c>)
 80010a0:	601a      	str	r2, [r3, #0]
	handlerPWM_5.config.channel       =   PWM_CHANNEL_1;
 80010a2:	4b4c      	ldr	r3, [pc, #304]	; (80011d4 <initHardware+0x468>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	711a      	strb	r2, [r3, #4]
	handlerPWM_5.config.duttyCicle    =   10000;
 80010a8:	4b4a      	ldr	r3, [pc, #296]	; (80011d4 <initHardware+0x468>)
 80010aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80010ae:	81da      	strh	r2, [r3, #14]
	handlerPWM_5.config.periodo       =   20000;
 80010b0:	4b48      	ldr	r3, [pc, #288]	; (80011d4 <initHardware+0x468>)
 80010b2:	f644 6220 	movw	r2, #20000	; 0x4e20
 80010b6:	819a      	strh	r2, [r3, #12]
	handlerPWM_5.config.prescaler     =   16;
 80010b8:	4b46      	ldr	r3, [pc, #280]	; (80011d4 <initHardware+0x468>)
 80010ba:	2210      	movs	r2, #16
 80010bc:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_5);
 80010be:	4845      	ldr	r0, [pc, #276]	; (80011d4 <initHardware+0x468>)
 80010c0:	f000 fde2 	bl	8001c88 <pwm_Config>

	// GPIO TIM 4 CC2
	HandlerTIM4PWM_6.pGPIOx          					= GPIOB;
 80010c4:	4b45      	ldr	r3, [pc, #276]	; (80011dc <initHardware+0x470>)
 80010c6:	4a46      	ldr	r2, [pc, #280]	; (80011e0 <initHardware+0x474>)
 80010c8:	601a      	str	r2, [r3, #0]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinNumber  	= PIN_7;
 80010ca:	4b44      	ldr	r3, [pc, #272]	; (80011dc <initHardware+0x470>)
 80010cc:	2207      	movs	r2, #7
 80010ce:	711a      	strb	r2, [r3, #4]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 80010d0:	4b42      	ldr	r3, [pc, #264]	; (80011dc <initHardware+0x470>)
 80010d2:	2202      	movs	r2, #2
 80010d4:	715a      	strb	r2, [r3, #5]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 80010d6:	4b41      	ldr	r3, [pc, #260]	; (80011dc <initHardware+0x470>)
 80010d8:	2200      	movs	r2, #0
 80010da:	721a      	strb	r2, [r3, #8]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010dc:	4b3f      	ldr	r3, [pc, #252]	; (80011dc <initHardware+0x470>)
 80010de:	2200      	movs	r2, #0
 80010e0:	71da      	strb	r2, [r3, #7]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 80010e2:	4b3e      	ldr	r3, [pc, #248]	; (80011dc <initHardware+0x470>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	719a      	strb	r2, [r3, #6]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 80010e8:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <initHardware+0x470>)
 80010ea:	2202      	movs	r2, #2
 80010ec:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerTIM4PWM_6);
 80010ee:	483b      	ldr	r0, [pc, #236]	; (80011dc <initHardware+0x470>)
 80010f0:	f000 fc8c 	bl	8001a0c <GPIO_Config>
	// DIAGONAL Y
	handlerPWM_6.ptrTIMx           	  =   TIM4;
 80010f4:	4b3b      	ldr	r3, [pc, #236]	; (80011e4 <initHardware+0x478>)
 80010f6:	4a38      	ldr	r2, [pc, #224]	; (80011d8 <initHardware+0x46c>)
 80010f8:	601a      	str	r2, [r3, #0]
	handlerPWM_6.config.channel       =   PWM_CHANNEL_2;
 80010fa:	4b3a      	ldr	r3, [pc, #232]	; (80011e4 <initHardware+0x478>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	711a      	strb	r2, [r3, #4]
	handlerPWM_6.config.duttyCicle    =   10000;
 8001100:	4b38      	ldr	r3, [pc, #224]	; (80011e4 <initHardware+0x478>)
 8001102:	f242 7210 	movw	r2, #10000	; 0x2710
 8001106:	81da      	strh	r2, [r3, #14]
	handlerPWM_6.config.periodo       =   20000;
 8001108:	4b36      	ldr	r3, [pc, #216]	; (80011e4 <initHardware+0x478>)
 800110a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800110e:	819a      	strh	r2, [r3, #12]
	handlerPWM_6.config.prescaler     =   16;
 8001110:	4b34      	ldr	r3, [pc, #208]	; (80011e4 <initHardware+0x478>)
 8001112:	2210      	movs	r2, #16
 8001114:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_6);
 8001116:	4833      	ldr	r0, [pc, #204]	; (80011e4 <initHardware+0x478>)
 8001118:	f000 fdb6 	bl	8001c88 <pwm_Config>

	// GPIO TIM 4 CC3
	HandlerTIM4PWM_7.pGPIOx          					= GPIOB;
 800111c:	4b32      	ldr	r3, [pc, #200]	; (80011e8 <initHardware+0x47c>)
 800111e:	4a30      	ldr	r2, [pc, #192]	; (80011e0 <initHardware+0x474>)
 8001120:	601a      	str	r2, [r3, #0]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinNumber  	= PIN_8;
 8001122:	4b31      	ldr	r3, [pc, #196]	; (80011e8 <initHardware+0x47c>)
 8001124:	2208      	movs	r2, #8
 8001126:	711a      	strb	r2, [r3, #4]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8001128:	4b2f      	ldr	r3, [pc, #188]	; (80011e8 <initHardware+0x47c>)
 800112a:	2202      	movs	r2, #2
 800112c:	715a      	strb	r2, [r3, #5]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 800112e:	4b2e      	ldr	r3, [pc, #184]	; (80011e8 <initHardware+0x47c>)
 8001130:	2200      	movs	r2, #0
 8001132:	721a      	strb	r2, [r3, #8]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001134:	4b2c      	ldr	r3, [pc, #176]	; (80011e8 <initHardware+0x47c>)
 8001136:	2200      	movs	r2, #0
 8001138:	71da      	strb	r2, [r3, #7]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 800113a:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <initHardware+0x47c>)
 800113c:	2202      	movs	r2, #2
 800113e:	719a      	strb	r2, [r3, #6]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001140:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <initHardware+0x47c>)
 8001142:	2202      	movs	r2, #2
 8001144:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerTIM4PWM_7);
 8001146:	4828      	ldr	r0, [pc, #160]	; (80011e8 <initHardware+0x47c>)
 8001148:	f000 fc60 	bl	8001a0c <GPIO_Config>
	// DIAGONAL Y
	handlerPWM_7.ptrTIMx           	  =   TIM4;
 800114c:	4b27      	ldr	r3, [pc, #156]	; (80011ec <initHardware+0x480>)
 800114e:	4a22      	ldr	r2, [pc, #136]	; (80011d8 <initHardware+0x46c>)
 8001150:	601a      	str	r2, [r3, #0]
	handlerPWM_7.config.channel       =   PWM_CHANNEL_3;
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <initHardware+0x480>)
 8001154:	2202      	movs	r2, #2
 8001156:	711a      	strb	r2, [r3, #4]
	handlerPWM_7.config.duttyCicle    =   10000;
 8001158:	4b24      	ldr	r3, [pc, #144]	; (80011ec <initHardware+0x480>)
 800115a:	f242 7210 	movw	r2, #10000	; 0x2710
 800115e:	81da      	strh	r2, [r3, #14]
	handlerPWM_7.config.periodo       =   20000;
 8001160:	4b22      	ldr	r3, [pc, #136]	; (80011ec <initHardware+0x480>)
 8001162:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001166:	819a      	strh	r2, [r3, #12]
	handlerPWM_7.config.prescaler     =   16;
 8001168:	4b20      	ldr	r3, [pc, #128]	; (80011ec <initHardware+0x480>)
 800116a:	2210      	movs	r2, #16
 800116c:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_7);
 800116e:	481f      	ldr	r0, [pc, #124]	; (80011ec <initHardware+0x480>)
 8001170:	f000 fd8a 	bl	8001c88 <pwm_Config>

	// GPIO TIM 4 CC4
	HandlerTIM4PWM_8.pGPIOx          					= GPIOB;
 8001174:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <initHardware+0x484>)
 8001176:	4a1a      	ldr	r2, [pc, #104]	; (80011e0 <initHardware+0x474>)
 8001178:	601a      	str	r2, [r3, #0]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinNumber  	= PIN_9;
 800117a:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <initHardware+0x484>)
 800117c:	2209      	movs	r2, #9
 800117e:	711a      	strb	r2, [r3, #4]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <initHardware+0x484>)
 8001182:	2202      	movs	r2, #2
 8001184:	715a      	strb	r2, [r3, #5]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8001186:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <initHardware+0x484>)
 8001188:	2200      	movs	r2, #0
 800118a:	721a      	strb	r2, [r3, #8]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800118c:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <initHardware+0x484>)
 800118e:	2200      	movs	r2, #0
 8001190:	71da      	strb	r2, [r3, #7]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <initHardware+0x484>)
 8001194:	2202      	movs	r2, #2
 8001196:	719a      	strb	r2, [r3, #6]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001198:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <initHardware+0x484>)
 800119a:	2202      	movs	r2, #2
 800119c:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerTIM4PWM_8);
 800119e:	4814      	ldr	r0, [pc, #80]	; (80011f0 <initHardware+0x484>)
 80011a0:	f000 fc34 	bl	8001a0c <GPIO_Config>
	// DIAGONAL Y
	handlerPWM_8.ptrTIMx           	  =   TIM4;
 80011a4:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <initHardware+0x488>)
 80011a6:	4a0c      	ldr	r2, [pc, #48]	; (80011d8 <initHardware+0x46c>)
 80011a8:	601a      	str	r2, [r3, #0]
	handlerPWM_8.config.channel       =   PWM_CHANNEL_4;
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <initHardware+0x488>)
 80011ac:	2203      	movs	r2, #3
 80011ae:	711a      	strb	r2, [r3, #4]
	handlerPWM_8.config.duttyCicle    =   10000;
 80011b0:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <initHardware+0x488>)
 80011b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80011b6:	81da      	strh	r2, [r3, #14]
	handlerPWM_8.config.periodo       =   20000;
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <initHardware+0x488>)
 80011ba:	f644 6220 	movw	r2, #20000	; 0x4e20
 80011be:	819a      	strh	r2, [r3, #12]
	handlerPWM_8.config.prescaler     =   16;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <initHardware+0x488>)
 80011c2:	2210      	movs	r2, #16
 80011c4:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_8);
 80011c6:	480b      	ldr	r0, [pc, #44]	; (80011f4 <initHardware+0x488>)
 80011c8:	f000 fd5e 	bl	8001c88 <pwm_Config>
//	handlerPWM_9.config.periodo       =   20000;
//	handlerPWM_9.config.prescaler     =   16;
//	pwm_Config(&handlerPWM_9);


} // Fin initHardware
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000288 	.word	0x20000288
 80011d4:	200003b8 	.word	0x200003b8
 80011d8:	40000800 	.word	0x40000800
 80011dc:	20000294 	.word	0x20000294
 80011e0:	40020400 	.word	0x40020400
 80011e4:	200003c8 	.word	0x200003c8
 80011e8:	200002a0 	.word	0x200002a0
 80011ec:	200003d8 	.word	0x200003d8
 80011f0:	200002ac 	.word	0x200002ac
 80011f4:	200003e8 	.word	0x200003e8

080011f8 <pwmSignalSwitch>:

void pwmSignalSwitch(void){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	if (dataADCChannel0[0] <= 10 && (dataADCChannel1[0] >= 2000 && dataADCChannel1[0] <= 2150)){
 80011fc:	4bae      	ldr	r3, [pc, #696]	; (80014b8 <pwmSignalSwitch+0x2c0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b0a      	cmp	r3, #10
 8001202:	d836      	bhi.n	8001272 <pwmSignalSwitch+0x7a>
 8001204:	4bad      	ldr	r3, [pc, #692]	; (80014bc <pwmSignalSwitch+0x2c4>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800120c:	d331      	bcc.n	8001272 <pwmSignalSwitch+0x7a>
 800120e:	4bab      	ldr	r3, [pc, #684]	; (80014bc <pwmSignalSwitch+0x2c4>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f640 0266 	movw	r2, #2150	; 0x866
 8001216:	4293      	cmp	r3, r2
 8001218:	d82b      	bhi.n	8001272 <pwmSignalSwitch+0x7a>
		updateDuttyCycle(&handlerPWM_1, 10000);
 800121a:	f242 7110 	movw	r1, #10000	; 0x2710
 800121e:	48a8      	ldr	r0, [pc, #672]	; (80014c0 <pwmSignalSwitch+0x2c8>)
 8001220:	f000 fe8c 	bl	8001f3c <updateDuttyCycle>
		enableOutput(&handlerPWM_1);
 8001224:	48a6      	ldr	r0, [pc, #664]	; (80014c0 <pwmSignalSwitch+0x2c8>)
 8001226:	f000 fe05 	bl	8001e34 <enableOutput>
		startPwmSignal(&handlerPWM_1);
 800122a:	48a5      	ldr	r0, [pc, #660]	; (80014c0 <pwmSignalSwitch+0x2c8>)
 800122c:	f000 fdf0 	bl	8001e10 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_2, 0);
 8001230:	2100      	movs	r1, #0
 8001232:	48a4      	ldr	r0, [pc, #656]	; (80014c4 <pwmSignalSwitch+0x2cc>)
 8001234:	f000 fe82 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 8001238:	2100      	movs	r1, #0
 800123a:	48a3      	ldr	r0, [pc, #652]	; (80014c8 <pwmSignalSwitch+0x2d0>)
 800123c:	f000 fe7e 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 8001240:	2100      	movs	r1, #0
 8001242:	48a2      	ldr	r0, [pc, #648]	; (80014cc <pwmSignalSwitch+0x2d4>)
 8001244:	f000 fe7a 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 8001248:	2100      	movs	r1, #0
 800124a:	48a1      	ldr	r0, [pc, #644]	; (80014d0 <pwmSignalSwitch+0x2d8>)
 800124c:	f000 fe76 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 8001250:	2100      	movs	r1, #0
 8001252:	48a0      	ldr	r0, [pc, #640]	; (80014d4 <pwmSignalSwitch+0x2dc>)
 8001254:	f000 fe72 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 8001258:	2100      	movs	r1, #0
 800125a:	489f      	ldr	r0, [pc, #636]	; (80014d8 <pwmSignalSwitch+0x2e0>)
 800125c:	f000 fe6e 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 8001260:	2100      	movs	r1, #0
 8001262:	489e      	ldr	r0, [pc, #632]	; (80014dc <pwmSignalSwitch+0x2e4>)
 8001264:	f000 fe6a 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 8001268:	2100      	movs	r1, #0
 800126a:	489d      	ldr	r0, [pc, #628]	; (80014e0 <pwmSignalSwitch+0x2e8>)
 800126c:	f000 fe66 	bl	8001f3c <updateDuttyCycle>
 8001270:	e1f7      	b.n	8001662 <pwmSignalSwitch+0x46a>
	}else if (dataADCChannel0[0] >= 4000 && (dataADCChannel1[0] >= 2000 && dataADCChannel1[0] <= 2150)){
 8001272:	4b91      	ldr	r3, [pc, #580]	; (80014b8 <pwmSignalSwitch+0x2c0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800127a:	d336      	bcc.n	80012ea <pwmSignalSwitch+0xf2>
 800127c:	4b8f      	ldr	r3, [pc, #572]	; (80014bc <pwmSignalSwitch+0x2c4>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001284:	d331      	bcc.n	80012ea <pwmSignalSwitch+0xf2>
 8001286:	4b8d      	ldr	r3, [pc, #564]	; (80014bc <pwmSignalSwitch+0x2c4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f640 0266 	movw	r2, #2150	; 0x866
 800128e:	4293      	cmp	r3, r2
 8001290:	d82b      	bhi.n	80012ea <pwmSignalSwitch+0xf2>
		updateDuttyCycle(&handlerPWM_2, 10000);
 8001292:	f242 7110 	movw	r1, #10000	; 0x2710
 8001296:	488b      	ldr	r0, [pc, #556]	; (80014c4 <pwmSignalSwitch+0x2cc>)
 8001298:	f000 fe50 	bl	8001f3c <updateDuttyCycle>
		enableOutput(&handlerPWM_2);
 800129c:	4889      	ldr	r0, [pc, #548]	; (80014c4 <pwmSignalSwitch+0x2cc>)
 800129e:	f000 fdc9 	bl	8001e34 <enableOutput>
		startPwmSignal(&handlerPWM_2);
 80012a2:	4888      	ldr	r0, [pc, #544]	; (80014c4 <pwmSignalSwitch+0x2cc>)
 80012a4:	f000 fdb4 	bl	8001e10 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 80012a8:	2100      	movs	r1, #0
 80012aa:	4885      	ldr	r0, [pc, #532]	; (80014c0 <pwmSignalSwitch+0x2c8>)
 80012ac:	f000 fe46 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 80012b0:	2100      	movs	r1, #0
 80012b2:	4885      	ldr	r0, [pc, #532]	; (80014c8 <pwmSignalSwitch+0x2d0>)
 80012b4:	f000 fe42 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 80012b8:	2100      	movs	r1, #0
 80012ba:	4884      	ldr	r0, [pc, #528]	; (80014cc <pwmSignalSwitch+0x2d4>)
 80012bc:	f000 fe3e 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 80012c0:	2100      	movs	r1, #0
 80012c2:	4883      	ldr	r0, [pc, #524]	; (80014d0 <pwmSignalSwitch+0x2d8>)
 80012c4:	f000 fe3a 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 80012c8:	2100      	movs	r1, #0
 80012ca:	4882      	ldr	r0, [pc, #520]	; (80014d4 <pwmSignalSwitch+0x2dc>)
 80012cc:	f000 fe36 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 80012d0:	2100      	movs	r1, #0
 80012d2:	4881      	ldr	r0, [pc, #516]	; (80014d8 <pwmSignalSwitch+0x2e0>)
 80012d4:	f000 fe32 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 80012d8:	2100      	movs	r1, #0
 80012da:	4880      	ldr	r0, [pc, #512]	; (80014dc <pwmSignalSwitch+0x2e4>)
 80012dc:	f000 fe2e 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 80012e0:	2100      	movs	r1, #0
 80012e2:	487f      	ldr	r0, [pc, #508]	; (80014e0 <pwmSignalSwitch+0x2e8>)
 80012e4:	f000 fe2a 	bl	8001f3c <updateDuttyCycle>
 80012e8:	e1bb      	b.n	8001662 <pwmSignalSwitch+0x46a>
	}else if ((dataADCChannel0[0] >= 2000 && dataADCChannel0[0] <= 2150) && dataADCChannel1[0] >= 4000){
 80012ea:	4b73      	ldr	r3, [pc, #460]	; (80014b8 <pwmSignalSwitch+0x2c0>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012f2:	d336      	bcc.n	8001362 <pwmSignalSwitch+0x16a>
 80012f4:	4b70      	ldr	r3, [pc, #448]	; (80014b8 <pwmSignalSwitch+0x2c0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f640 0266 	movw	r2, #2150	; 0x866
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d830      	bhi.n	8001362 <pwmSignalSwitch+0x16a>
 8001300:	4b6e      	ldr	r3, [pc, #440]	; (80014bc <pwmSignalSwitch+0x2c4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001308:	d32b      	bcc.n	8001362 <pwmSignalSwitch+0x16a>
		updateDuttyCycle(&handlerPWM_3, 10000);
 800130a:	f242 7110 	movw	r1, #10000	; 0x2710
 800130e:	486e      	ldr	r0, [pc, #440]	; (80014c8 <pwmSignalSwitch+0x2d0>)
 8001310:	f000 fe14 	bl	8001f3c <updateDuttyCycle>
		enableOutput(&handlerPWM_3);
 8001314:	486c      	ldr	r0, [pc, #432]	; (80014c8 <pwmSignalSwitch+0x2d0>)
 8001316:	f000 fd8d 	bl	8001e34 <enableOutput>
		startPwmSignal(&handlerPWM_3);
 800131a:	486b      	ldr	r0, [pc, #428]	; (80014c8 <pwmSignalSwitch+0x2d0>)
 800131c:	f000 fd78 	bl	8001e10 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 8001320:	2100      	movs	r1, #0
 8001322:	4867      	ldr	r0, [pc, #412]	; (80014c0 <pwmSignalSwitch+0x2c8>)
 8001324:	f000 fe0a 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 8001328:	2100      	movs	r1, #0
 800132a:	4866      	ldr	r0, [pc, #408]	; (80014c4 <pwmSignalSwitch+0x2cc>)
 800132c:	f000 fe06 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 8001330:	2100      	movs	r1, #0
 8001332:	4866      	ldr	r0, [pc, #408]	; (80014cc <pwmSignalSwitch+0x2d4>)
 8001334:	f000 fe02 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 8001338:	2100      	movs	r1, #0
 800133a:	4865      	ldr	r0, [pc, #404]	; (80014d0 <pwmSignalSwitch+0x2d8>)
 800133c:	f000 fdfe 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 8001340:	2100      	movs	r1, #0
 8001342:	4864      	ldr	r0, [pc, #400]	; (80014d4 <pwmSignalSwitch+0x2dc>)
 8001344:	f000 fdfa 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 8001348:	2100      	movs	r1, #0
 800134a:	4863      	ldr	r0, [pc, #396]	; (80014d8 <pwmSignalSwitch+0x2e0>)
 800134c:	f000 fdf6 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 8001350:	2100      	movs	r1, #0
 8001352:	4862      	ldr	r0, [pc, #392]	; (80014dc <pwmSignalSwitch+0x2e4>)
 8001354:	f000 fdf2 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 8001358:	2100      	movs	r1, #0
 800135a:	4861      	ldr	r0, [pc, #388]	; (80014e0 <pwmSignalSwitch+0x2e8>)
 800135c:	f000 fdee 	bl	8001f3c <updateDuttyCycle>
 8001360:	e17f      	b.n	8001662 <pwmSignalSwitch+0x46a>
	}else if ((dataADCChannel0[0] >= 2000 && dataADCChannel0[0] <= 2150) && dataADCChannel1[0] <= 10){
 8001362:	4b55      	ldr	r3, [pc, #340]	; (80014b8 <pwmSignalSwitch+0x2c0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800136a:	d335      	bcc.n	80013d8 <pwmSignalSwitch+0x1e0>
 800136c:	4b52      	ldr	r3, [pc, #328]	; (80014b8 <pwmSignalSwitch+0x2c0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f640 0266 	movw	r2, #2150	; 0x866
 8001374:	4293      	cmp	r3, r2
 8001376:	d82f      	bhi.n	80013d8 <pwmSignalSwitch+0x1e0>
 8001378:	4b50      	ldr	r3, [pc, #320]	; (80014bc <pwmSignalSwitch+0x2c4>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b0a      	cmp	r3, #10
 800137e:	d82b      	bhi.n	80013d8 <pwmSignalSwitch+0x1e0>
		updateDuttyCycle(&handlerPWM_4, 10000);
 8001380:	f242 7110 	movw	r1, #10000	; 0x2710
 8001384:	4851      	ldr	r0, [pc, #324]	; (80014cc <pwmSignalSwitch+0x2d4>)
 8001386:	f000 fdd9 	bl	8001f3c <updateDuttyCycle>
		enableOutput(&handlerPWM_4);
 800138a:	4850      	ldr	r0, [pc, #320]	; (80014cc <pwmSignalSwitch+0x2d4>)
 800138c:	f000 fd52 	bl	8001e34 <enableOutput>
		startPwmSignal(&handlerPWM_4);
 8001390:	484e      	ldr	r0, [pc, #312]	; (80014cc <pwmSignalSwitch+0x2d4>)
 8001392:	f000 fd3d 	bl	8001e10 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 8001396:	2100      	movs	r1, #0
 8001398:	4849      	ldr	r0, [pc, #292]	; (80014c0 <pwmSignalSwitch+0x2c8>)
 800139a:	f000 fdcf 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 800139e:	2100      	movs	r1, #0
 80013a0:	4848      	ldr	r0, [pc, #288]	; (80014c4 <pwmSignalSwitch+0x2cc>)
 80013a2:	f000 fdcb 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 80013a6:	2100      	movs	r1, #0
 80013a8:	4847      	ldr	r0, [pc, #284]	; (80014c8 <pwmSignalSwitch+0x2d0>)
 80013aa:	f000 fdc7 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 80013ae:	2100      	movs	r1, #0
 80013b0:	4847      	ldr	r0, [pc, #284]	; (80014d0 <pwmSignalSwitch+0x2d8>)
 80013b2:	f000 fdc3 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 80013b6:	2100      	movs	r1, #0
 80013b8:	4846      	ldr	r0, [pc, #280]	; (80014d4 <pwmSignalSwitch+0x2dc>)
 80013ba:	f000 fdbf 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 80013be:	2100      	movs	r1, #0
 80013c0:	4845      	ldr	r0, [pc, #276]	; (80014d8 <pwmSignalSwitch+0x2e0>)
 80013c2:	f000 fdbb 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 80013c6:	2100      	movs	r1, #0
 80013c8:	4844      	ldr	r0, [pc, #272]	; (80014dc <pwmSignalSwitch+0x2e4>)
 80013ca:	f000 fdb7 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 80013ce:	2100      	movs	r1, #0
 80013d0:	4843      	ldr	r0, [pc, #268]	; (80014e0 <pwmSignalSwitch+0x2e8>)
 80013d2:	f000 fdb3 	bl	8001f3c <updateDuttyCycle>
 80013d6:	e144      	b.n	8001662 <pwmSignalSwitch+0x46a>
	}else if ((dataADCChannel1[0] >= 4000 && dataADCChannel1[0] <= 4150) && dataADCChannel0[0] <= 10){
 80013d8:	4b38      	ldr	r3, [pc, #224]	; (80014bc <pwmSignalSwitch+0x2c4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80013e0:	d335      	bcc.n	800144e <pwmSignalSwitch+0x256>
 80013e2:	4b36      	ldr	r3, [pc, #216]	; (80014bc <pwmSignalSwitch+0x2c4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f241 0236 	movw	r2, #4150	; 0x1036
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d82f      	bhi.n	800144e <pwmSignalSwitch+0x256>
 80013ee:	4b32      	ldr	r3, [pc, #200]	; (80014b8 <pwmSignalSwitch+0x2c0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b0a      	cmp	r3, #10
 80013f4:	d82b      	bhi.n	800144e <pwmSignalSwitch+0x256>
		updateDuttyCycle(&handlerPWM_5, 10000);
 80013f6:	f242 7110 	movw	r1, #10000	; 0x2710
 80013fa:	4835      	ldr	r0, [pc, #212]	; (80014d0 <pwmSignalSwitch+0x2d8>)
 80013fc:	f000 fd9e 	bl	8001f3c <updateDuttyCycle>
		enableOutput(&handlerPWM_5);
 8001400:	4833      	ldr	r0, [pc, #204]	; (80014d0 <pwmSignalSwitch+0x2d8>)
 8001402:	f000 fd17 	bl	8001e34 <enableOutput>
		startPwmSignal(&handlerPWM_5);
 8001406:	4832      	ldr	r0, [pc, #200]	; (80014d0 <pwmSignalSwitch+0x2d8>)
 8001408:	f000 fd02 	bl	8001e10 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 800140c:	2100      	movs	r1, #0
 800140e:	482c      	ldr	r0, [pc, #176]	; (80014c0 <pwmSignalSwitch+0x2c8>)
 8001410:	f000 fd94 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 8001414:	2100      	movs	r1, #0
 8001416:	482b      	ldr	r0, [pc, #172]	; (80014c4 <pwmSignalSwitch+0x2cc>)
 8001418:	f000 fd90 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 800141c:	2100      	movs	r1, #0
 800141e:	482a      	ldr	r0, [pc, #168]	; (80014c8 <pwmSignalSwitch+0x2d0>)
 8001420:	f000 fd8c 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 8001424:	2100      	movs	r1, #0
 8001426:	4829      	ldr	r0, [pc, #164]	; (80014cc <pwmSignalSwitch+0x2d4>)
 8001428:	f000 fd88 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 800142c:	2100      	movs	r1, #0
 800142e:	4829      	ldr	r0, [pc, #164]	; (80014d4 <pwmSignalSwitch+0x2dc>)
 8001430:	f000 fd84 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 8001434:	2100      	movs	r1, #0
 8001436:	4828      	ldr	r0, [pc, #160]	; (80014d8 <pwmSignalSwitch+0x2e0>)
 8001438:	f000 fd80 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 800143c:	2100      	movs	r1, #0
 800143e:	4827      	ldr	r0, [pc, #156]	; (80014dc <pwmSignalSwitch+0x2e4>)
 8001440:	f000 fd7c 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 8001444:	2100      	movs	r1, #0
 8001446:	4826      	ldr	r0, [pc, #152]	; (80014e0 <pwmSignalSwitch+0x2e8>)
 8001448:	f000 fd78 	bl	8001f3c <updateDuttyCycle>
 800144c:	e109      	b.n	8001662 <pwmSignalSwitch+0x46a>
	}else if ((dataADCChannel1[0] >= 0 && dataADCChannel1[0] <= 20) && dataADCChannel0[0] <= 20){
 800144e:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <pwmSignalSwitch+0x2c4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b14      	cmp	r3, #20
 8001454:	d846      	bhi.n	80014e4 <pwmSignalSwitch+0x2ec>
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <pwmSignalSwitch+0x2c0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b14      	cmp	r3, #20
 800145c:	d842      	bhi.n	80014e4 <pwmSignalSwitch+0x2ec>
		updateDuttyCycle(&handlerPWM_6, 10000);
 800145e:	f242 7110 	movw	r1, #10000	; 0x2710
 8001462:	481c      	ldr	r0, [pc, #112]	; (80014d4 <pwmSignalSwitch+0x2dc>)
 8001464:	f000 fd6a 	bl	8001f3c <updateDuttyCycle>
		enableOutput(&handlerPWM_6);
 8001468:	481a      	ldr	r0, [pc, #104]	; (80014d4 <pwmSignalSwitch+0x2dc>)
 800146a:	f000 fce3 	bl	8001e34 <enableOutput>
		startPwmSignal(&handlerPWM_6);
 800146e:	4819      	ldr	r0, [pc, #100]	; (80014d4 <pwmSignalSwitch+0x2dc>)
 8001470:	f000 fcce 	bl	8001e10 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 8001474:	2100      	movs	r1, #0
 8001476:	4812      	ldr	r0, [pc, #72]	; (80014c0 <pwmSignalSwitch+0x2c8>)
 8001478:	f000 fd60 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 800147c:	2100      	movs	r1, #0
 800147e:	4811      	ldr	r0, [pc, #68]	; (80014c4 <pwmSignalSwitch+0x2cc>)
 8001480:	f000 fd5c 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 8001484:	2100      	movs	r1, #0
 8001486:	4810      	ldr	r0, [pc, #64]	; (80014c8 <pwmSignalSwitch+0x2d0>)
 8001488:	f000 fd58 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 800148c:	2100      	movs	r1, #0
 800148e:	480f      	ldr	r0, [pc, #60]	; (80014cc <pwmSignalSwitch+0x2d4>)
 8001490:	f000 fd54 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 8001494:	2100      	movs	r1, #0
 8001496:	480e      	ldr	r0, [pc, #56]	; (80014d0 <pwmSignalSwitch+0x2d8>)
 8001498:	f000 fd50 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 800149c:	2100      	movs	r1, #0
 800149e:	480e      	ldr	r0, [pc, #56]	; (80014d8 <pwmSignalSwitch+0x2e0>)
 80014a0:	f000 fd4c 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 80014a4:	2100      	movs	r1, #0
 80014a6:	480d      	ldr	r0, [pc, #52]	; (80014dc <pwmSignalSwitch+0x2e4>)
 80014a8:	f000 fd48 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 80014ac:	2100      	movs	r1, #0
 80014ae:	480c      	ldr	r0, [pc, #48]	; (80014e0 <pwmSignalSwitch+0x2e8>)
 80014b0:	f000 fd44 	bl	8001f3c <updateDuttyCycle>
 80014b4:	e0d5      	b.n	8001662 <pwmSignalSwitch+0x46a>
 80014b6:	bf00      	nop
 80014b8:	2000044c 	.word	0x2000044c
 80014bc:	20000450 	.word	0x20000450
 80014c0:	20000378 	.word	0x20000378
 80014c4:	20000388 	.word	0x20000388
 80014c8:	20000398 	.word	0x20000398
 80014cc:	200003a8 	.word	0x200003a8
 80014d0:	200003b8 	.word	0x200003b8
 80014d4:	200003c8 	.word	0x200003c8
 80014d8:	200003d8 	.word	0x200003d8
 80014dc:	200003e8 	.word	0x200003e8
 80014e0:	200003f8 	.word	0x200003f8
	}else if ((dataADCChannel0[0] >= 4000 && dataADCChannel0[0] <= 4150) && (dataADCChannel1[0] >= 4000 && dataADCChannel1[0] <= 4150)){
 80014e4:	4b60      	ldr	r3, [pc, #384]	; (8001668 <pwmSignalSwitch+0x470>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80014ec:	d33c      	bcc.n	8001568 <pwmSignalSwitch+0x370>
 80014ee:	4b5e      	ldr	r3, [pc, #376]	; (8001668 <pwmSignalSwitch+0x470>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f241 0236 	movw	r2, #4150	; 0x1036
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d836      	bhi.n	8001568 <pwmSignalSwitch+0x370>
 80014fa:	4b5c      	ldr	r3, [pc, #368]	; (800166c <pwmSignalSwitch+0x474>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001502:	d331      	bcc.n	8001568 <pwmSignalSwitch+0x370>
 8001504:	4b59      	ldr	r3, [pc, #356]	; (800166c <pwmSignalSwitch+0x474>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f241 0236 	movw	r2, #4150	; 0x1036
 800150c:	4293      	cmp	r3, r2
 800150e:	d82b      	bhi.n	8001568 <pwmSignalSwitch+0x370>
		updateDuttyCycle(&handlerPWM_7, 10000);
 8001510:	f242 7110 	movw	r1, #10000	; 0x2710
 8001514:	4856      	ldr	r0, [pc, #344]	; (8001670 <pwmSignalSwitch+0x478>)
 8001516:	f000 fd11 	bl	8001f3c <updateDuttyCycle>
		enableOutput(&handlerPWM_7);
 800151a:	4855      	ldr	r0, [pc, #340]	; (8001670 <pwmSignalSwitch+0x478>)
 800151c:	f000 fc8a 	bl	8001e34 <enableOutput>
		startPwmSignal(&handlerPWM_7);
 8001520:	4853      	ldr	r0, [pc, #332]	; (8001670 <pwmSignalSwitch+0x478>)
 8001522:	f000 fc75 	bl	8001e10 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 8001526:	2100      	movs	r1, #0
 8001528:	4852      	ldr	r0, [pc, #328]	; (8001674 <pwmSignalSwitch+0x47c>)
 800152a:	f000 fd07 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 800152e:	2100      	movs	r1, #0
 8001530:	4851      	ldr	r0, [pc, #324]	; (8001678 <pwmSignalSwitch+0x480>)
 8001532:	f000 fd03 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 8001536:	2100      	movs	r1, #0
 8001538:	4850      	ldr	r0, [pc, #320]	; (800167c <pwmSignalSwitch+0x484>)
 800153a:	f000 fcff 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 800153e:	2100      	movs	r1, #0
 8001540:	484f      	ldr	r0, [pc, #316]	; (8001680 <pwmSignalSwitch+0x488>)
 8001542:	f000 fcfb 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 8001546:	2100      	movs	r1, #0
 8001548:	484e      	ldr	r0, [pc, #312]	; (8001684 <pwmSignalSwitch+0x48c>)
 800154a:	f000 fcf7 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 800154e:	2100      	movs	r1, #0
 8001550:	484d      	ldr	r0, [pc, #308]	; (8001688 <pwmSignalSwitch+0x490>)
 8001552:	f000 fcf3 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 8001556:	2100      	movs	r1, #0
 8001558:	484c      	ldr	r0, [pc, #304]	; (800168c <pwmSignalSwitch+0x494>)
 800155a:	f000 fcef 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 800155e:	2100      	movs	r1, #0
 8001560:	484b      	ldr	r0, [pc, #300]	; (8001690 <pwmSignalSwitch+0x498>)
 8001562:	f000 fceb 	bl	8001f3c <updateDuttyCycle>
 8001566:	e07c      	b.n	8001662 <pwmSignalSwitch+0x46a>
	}else if ((dataADCChannel0[0] >= 4000 && dataADCChannel0[0] <= 4150) && dataADCChannel1[0] <= 20){
 8001568:	4b3f      	ldr	r3, [pc, #252]	; (8001668 <pwmSignalSwitch+0x470>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001570:	d335      	bcc.n	80015de <pwmSignalSwitch+0x3e6>
 8001572:	4b3d      	ldr	r3, [pc, #244]	; (8001668 <pwmSignalSwitch+0x470>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f241 0236 	movw	r2, #4150	; 0x1036
 800157a:	4293      	cmp	r3, r2
 800157c:	d82f      	bhi.n	80015de <pwmSignalSwitch+0x3e6>
 800157e:	4b3b      	ldr	r3, [pc, #236]	; (800166c <pwmSignalSwitch+0x474>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b14      	cmp	r3, #20
 8001584:	d82b      	bhi.n	80015de <pwmSignalSwitch+0x3e6>
		updateDuttyCycle(&handlerPWM_8, 10000);
 8001586:	f242 7110 	movw	r1, #10000	; 0x2710
 800158a:	4840      	ldr	r0, [pc, #256]	; (800168c <pwmSignalSwitch+0x494>)
 800158c:	f000 fcd6 	bl	8001f3c <updateDuttyCycle>
		enableOutput(&handlerPWM_8);
 8001590:	483e      	ldr	r0, [pc, #248]	; (800168c <pwmSignalSwitch+0x494>)
 8001592:	f000 fc4f 	bl	8001e34 <enableOutput>
		startPwmSignal(&handlerPWM_8);
 8001596:	483d      	ldr	r0, [pc, #244]	; (800168c <pwmSignalSwitch+0x494>)
 8001598:	f000 fc3a 	bl	8001e10 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 800159c:	2100      	movs	r1, #0
 800159e:	4835      	ldr	r0, [pc, #212]	; (8001674 <pwmSignalSwitch+0x47c>)
 80015a0:	f000 fccc 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 80015a4:	2100      	movs	r1, #0
 80015a6:	4834      	ldr	r0, [pc, #208]	; (8001678 <pwmSignalSwitch+0x480>)
 80015a8:	f000 fcc8 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 80015ac:	2100      	movs	r1, #0
 80015ae:	4833      	ldr	r0, [pc, #204]	; (800167c <pwmSignalSwitch+0x484>)
 80015b0:	f000 fcc4 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 80015b4:	2100      	movs	r1, #0
 80015b6:	4832      	ldr	r0, [pc, #200]	; (8001680 <pwmSignalSwitch+0x488>)
 80015b8:	f000 fcc0 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 80015bc:	2100      	movs	r1, #0
 80015be:	4831      	ldr	r0, [pc, #196]	; (8001684 <pwmSignalSwitch+0x48c>)
 80015c0:	f000 fcbc 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 80015c4:	2100      	movs	r1, #0
 80015c6:	4830      	ldr	r0, [pc, #192]	; (8001688 <pwmSignalSwitch+0x490>)
 80015c8:	f000 fcb8 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 80015cc:	2100      	movs	r1, #0
 80015ce:	4828      	ldr	r0, [pc, #160]	; (8001670 <pwmSignalSwitch+0x478>)
 80015d0:	f000 fcb4 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 80015d4:	2100      	movs	r1, #0
 80015d6:	482e      	ldr	r0, [pc, #184]	; (8001690 <pwmSignalSwitch+0x498>)
 80015d8:	f000 fcb0 	bl	8001f3c <updateDuttyCycle>
 80015dc:	e041      	b.n	8001662 <pwmSignalSwitch+0x46a>
	}else if ((dataADCChannel0[0] >= 2000 && dataADCChannel0[0] <= 2150) && (dataADCChannel1[0] >= 2000 && dataADCChannel1[0] <= 2150)){
 80015de:	4b22      	ldr	r3, [pc, #136]	; (8001668 <pwmSignalSwitch+0x470>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80015e6:	d33c      	bcc.n	8001662 <pwmSignalSwitch+0x46a>
 80015e8:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <pwmSignalSwitch+0x470>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f640 0266 	movw	r2, #2150	; 0x866
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d836      	bhi.n	8001662 <pwmSignalSwitch+0x46a>
 80015f4:	4b1d      	ldr	r3, [pc, #116]	; (800166c <pwmSignalSwitch+0x474>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80015fc:	d331      	bcc.n	8001662 <pwmSignalSwitch+0x46a>
 80015fe:	4b1b      	ldr	r3, [pc, #108]	; (800166c <pwmSignalSwitch+0x474>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f640 0266 	movw	r2, #2150	; 0x866
 8001606:	4293      	cmp	r3, r2
 8001608:	d82b      	bhi.n	8001662 <pwmSignalSwitch+0x46a>
		updateDuttyCycle(&handlerPWM_9, 10000);
 800160a:	f242 7110 	movw	r1, #10000	; 0x2710
 800160e:	4820      	ldr	r0, [pc, #128]	; (8001690 <pwmSignalSwitch+0x498>)
 8001610:	f000 fc94 	bl	8001f3c <updateDuttyCycle>
		enableOutput(&handlerPWM_9);
 8001614:	481e      	ldr	r0, [pc, #120]	; (8001690 <pwmSignalSwitch+0x498>)
 8001616:	f000 fc0d 	bl	8001e34 <enableOutput>
		startPwmSignal(&handlerPWM_9);
 800161a:	481d      	ldr	r0, [pc, #116]	; (8001690 <pwmSignalSwitch+0x498>)
 800161c:	f000 fbf8 	bl	8001e10 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 8001620:	2100      	movs	r1, #0
 8001622:	4814      	ldr	r0, [pc, #80]	; (8001674 <pwmSignalSwitch+0x47c>)
 8001624:	f000 fc8a 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 8001628:	2100      	movs	r1, #0
 800162a:	4813      	ldr	r0, [pc, #76]	; (8001678 <pwmSignalSwitch+0x480>)
 800162c:	f000 fc86 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 8001630:	2100      	movs	r1, #0
 8001632:	4812      	ldr	r0, [pc, #72]	; (800167c <pwmSignalSwitch+0x484>)
 8001634:	f000 fc82 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 8001638:	2100      	movs	r1, #0
 800163a:	4811      	ldr	r0, [pc, #68]	; (8001680 <pwmSignalSwitch+0x488>)
 800163c:	f000 fc7e 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 8001640:	2100      	movs	r1, #0
 8001642:	4810      	ldr	r0, [pc, #64]	; (8001684 <pwmSignalSwitch+0x48c>)
 8001644:	f000 fc7a 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 8001648:	2100      	movs	r1, #0
 800164a:	480f      	ldr	r0, [pc, #60]	; (8001688 <pwmSignalSwitch+0x490>)
 800164c:	f000 fc76 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 8001650:	2100      	movs	r1, #0
 8001652:	4807      	ldr	r0, [pc, #28]	; (8001670 <pwmSignalSwitch+0x478>)
 8001654:	f000 fc72 	bl	8001f3c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 8001658:	2100      	movs	r1, #0
 800165a:	480c      	ldr	r0, [pc, #48]	; (800168c <pwmSignalSwitch+0x494>)
 800165c:	f000 fc6e 	bl	8001f3c <updateDuttyCycle>
	}
}
 8001660:	e7ff      	b.n	8001662 <pwmSignalSwitch+0x46a>
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	2000044c 	.word	0x2000044c
 800166c:	20000450 	.word	0x20000450
 8001670:	200003d8 	.word	0x200003d8
 8001674:	20000378 	.word	0x20000378
 8001678:	20000388 	.word	0x20000388
 800167c:	20000398 	.word	0x20000398
 8001680:	200003a8 	.word	0x200003a8
 8001684:	200003b8 	.word	0x200003b8
 8001688:	200003c8 	.word	0x200003c8
 800168c:	200003e8 	.word	0x200003e8
 8001690:	200003f8 	.word	0x200003f8

08001694 <BasicTimer2_Callback>:

/* Timer que gobierna el blinky del led de estado */
void BasicTimer2_Callback(void){
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	if(counterADC == 5){
 8001698:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <BasicTimer2_Callback+0x30>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	2b05      	cmp	r3, #5
 800169e:	d102      	bne.n	80016a6 <BasicTimer2_Callback+0x12>
		counterADC = 0;
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <BasicTimer2_Callback+0x30>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	801a      	strh	r2, [r3, #0]
	}
	flagADC = 1;
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <BasicTimer2_Callback+0x34>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	801a      	strh	r2, [r3, #0]
	counterADC++;
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <BasicTimer2_Callback+0x30>)
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	3301      	adds	r3, #1
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <BasicTimer2_Callback+0x30>)
 80016b6:	801a      	strh	r2, [r3, #0]
	GPIOxTooglePin(&handlerStateLED);
 80016b8:	4804      	ldr	r0, [pc, #16]	; (80016cc <BasicTimer2_Callback+0x38>)
 80016ba:	f000 facf 	bl	8001c5c <GPIOxTooglePin>
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	2000045c 	.word	0x2000045c
 80016c8:	2000045a 	.word	0x2000045a
 80016cc:	20000234 	.word	0x20000234

080016d0 <usart2Rx_Callback>:



// Callback para los comandos del USART.
void usart2Rx_Callback(void){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	rxData = getRxData();
 80016d4:	f000 fe94 	bl	8002400 <getRxData>
 80016d8:	4603      	mov	r3, r0
 80016da:	461a      	mov	r2, r3
 80016dc:	4b01      	ldr	r3, [pc, #4]	; (80016e4 <usart2Rx_Callback+0x14>)
 80016de:	701a      	strb	r2, [r3, #0]
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000458 	.word	0x20000458

080016e8 <adcComplete_Callback>:

// Esta función controla el contador del ADC.(Hace las veces de callback)
void adcComplete_Callback(void){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	if(cont == 0){
 80016ec:	4b21      	ldr	r3, [pc, #132]	; (8001774 <adcComplete_Callback+0x8c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d10a      	bne.n	800170a <adcComplete_Callback+0x22>
		dataADCChannel0[cont2] = getADC();
 80016f4:	f000 ff0c 	bl	8002510 <getADC>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4619      	mov	r1, r3
 80016fc:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <adcComplete_Callback+0x90>)
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b1e      	ldr	r3, [pc, #120]	; (800177c <adcComplete_Callback+0x94>)
 8001704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001708:	e01e      	b.n	8001748 <adcComplete_Callback+0x60>
	}
	else if (cont == 1){
 800170a:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <adcComplete_Callback+0x8c>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d10a      	bne.n	8001728 <adcComplete_Callback+0x40>
		dataADCChannel1[cont2] = getADC();
 8001712:	f000 fefd 	bl	8002510 <getADC>
 8001716:	4603      	mov	r3, r0
 8001718:	4619      	mov	r1, r3
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <adcComplete_Callback+0x90>)
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	4b17      	ldr	r3, [pc, #92]	; (8001780 <adcComplete_Callback+0x98>)
 8001722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001726:	e00f      	b.n	8001748 <adcComplete_Callback+0x60>
	}else{
		dataADCChannel2[cont2] = getADC();
 8001728:	f000 fef2 	bl	8002510 <getADC>
 800172c:	4603      	mov	r3, r0
 800172e:	4619      	mov	r1, r3
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <adcComplete_Callback+0x90>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4b13      	ldr	r3, [pc, #76]	; (8001784 <adcComplete_Callback+0x9c>)
 8001738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		cont2++;
 800173c:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <adcComplete_Callback+0x90>)
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	3301      	adds	r3, #1
 8001742:	b29a      	uxth	r2, r3
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <adcComplete_Callback+0x90>)
 8001746:	801a      	strh	r2, [r3, #0]
	}
	cont++;
 8001748:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <adcComplete_Callback+0x8c>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	3301      	adds	r3, #1
 800174e:	b2da      	uxtb	r2, r3
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <adcComplete_Callback+0x8c>)
 8001752:	701a      	strb	r2, [r3, #0]
	if(cont2 == 1){
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <adcComplete_Callback+0x90>)
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d102      	bne.n	8001762 <adcComplete_Callback+0x7a>
		cont2 = 0;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <adcComplete_Callback+0x90>)
 800175e:	2200      	movs	r2, #0
 8001760:	801a      	strh	r2, [r3, #0]
	}
	if(cont == 3){
 8001762:	4b04      	ldr	r3, [pc, #16]	; (8001774 <adcComplete_Callback+0x8c>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b03      	cmp	r3, #3
 8001768:	d102      	bne.n	8001770 <adcComplete_Callback+0x88>
		cont = 0;
 800176a:	4b02      	ldr	r3, [pc, #8]	; (8001774 <adcComplete_Callback+0x8c>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
	}
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000448 	.word	0x20000448
 8001778:	2000044a 	.word	0x2000044a
 800177c:	2000044c 	.word	0x2000044c
 8001780:	20000450 	.word	0x20000450
 8001784:	20000454 	.word	0x20000454

08001788 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001788:	480d      	ldr	r0, [pc, #52]	; (80017c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800178a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800178c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001790:	480c      	ldr	r0, [pc, #48]	; (80017c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001792:	490d      	ldr	r1, [pc, #52]	; (80017c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001794:	4a0d      	ldr	r2, [pc, #52]	; (80017cc <LoopForever+0xe>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001798:	e002      	b.n	80017a0 <LoopCopyDataInit>

0800179a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800179c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179e:	3304      	adds	r3, #4

080017a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a4:	d3f9      	bcc.n	800179a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a6:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017a8:	4c0a      	ldr	r4, [pc, #40]	; (80017d4 <LoopForever+0x16>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ac:	e001      	b.n	80017b2 <LoopFillZerobss>

080017ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b0:	3204      	adds	r2, #4

080017b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b4:	d3fb      	bcc.n	80017ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017b6:	f001 f99d 	bl	8002af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ba:	f7ff faa5 	bl	8000d08 <main>

080017be <LoopForever>:

LoopForever:
    b LoopForever
 80017be:	e7fe      	b.n	80017be <LoopForever>
  ldr   r0, =_estack
 80017c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c8:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80017cc:	0800790c 	.word	0x0800790c
  ldr r2, =_sbss
 80017d0:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80017d4:	2000048c 	.word	0x2000048c

080017d8 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017d8:	e7fe      	b.n	80017d8 <BusFault_Handler>
	...

080017dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db0b      	blt.n	8001806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	f003 021f 	and.w	r2, r3, #31
 80017f4:	4906      	ldr	r1, [pc, #24]	; (8001810 <__NVIC_EnableIRQ+0x34>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2001      	movs	r0, #1
 80017fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	e000e100 	.word	0xe000e100

08001814 <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrBTimerHandler->ptrTIMx;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a4e      	ldr	r2, [pc, #312]	; (800195c <BasicTimer_Config+0x148>)
 8001822:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001824:	b672      	cpsid	i
}
 8001826:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();
	/* 1. Activar la señal de reloj del periférico requerido */
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001830:	d106      	bne.n	8001840 <BasicTimer_Config+0x2c>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001832:	4b4b      	ldr	r3, [pc, #300]	; (8001960 <BasicTimer_Config+0x14c>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	4a4a      	ldr	r2, [pc, #296]	; (8001960 <BasicTimer_Config+0x14c>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6413      	str	r3, [r2, #64]	; 0x40
 800183e:	e024      	b.n	800188a <BasicTimer_Config+0x76>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a47      	ldr	r2, [pc, #284]	; (8001964 <BasicTimer_Config+0x150>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d106      	bne.n	8001858 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 800184a:	4b45      	ldr	r3, [pc, #276]	; (8001960 <BasicTimer_Config+0x14c>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	4a44      	ldr	r2, [pc, #272]	; (8001960 <BasicTimer_Config+0x14c>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	6413      	str	r3, [r2, #64]	; 0x40
 8001856:	e018      	b.n	800188a <BasicTimer_Config+0x76>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a42      	ldr	r2, [pc, #264]	; (8001968 <BasicTimer_Config+0x154>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d106      	bne.n	8001870 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001862:	4b3f      	ldr	r3, [pc, #252]	; (8001960 <BasicTimer_Config+0x14c>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	4a3e      	ldr	r2, [pc, #248]	; (8001960 <BasicTimer_Config+0x14c>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	6413      	str	r3, [r2, #64]	; 0x40
 800186e:	e00c      	b.n	800188a <BasicTimer_Config+0x76>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a3d      	ldr	r2, [pc, #244]	; (800196c <BasicTimer_Config+0x158>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d106      	bne.n	8001888 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 800187a:	4b39      	ldr	r3, [pc, #228]	; (8001960 <BasicTimer_Config+0x14c>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a38      	ldr	r2, [pc, #224]	; (8001960 <BasicTimer_Config+0x14c>)
 8001880:	f043 0308 	orr.w	r3, r3, #8
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
 8001886:	e000      	b.n	800188a <BasicTimer_Config+0x76>
	}

	else{
		__NOP();
 8001888:	bf00      	nop
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */
	// -1 porque el contador empieza en 0
	ptrBTimerHandler->ptrTIMx-> PSC = ptrBTimerHandler ->TIMx_Config.TIMx_speed - 1;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	3a01      	subs	r2, #1
 8001894:	629a      	str	r2, [r3, #40]	; 0x28

	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	791b      	ldrb	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d112      	bne.n	80018c4 <BasicTimer_Config+0xb0>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Necesitamos poner la direccion en 0 para que cuente hacia arria TIM_CR1_DIR = 1, entonces
		// lo negamos y hacemos una AND con el valor actual.
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0210 	bic.w	r2, r2, #16
 80018ac:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	3a01      	subs	r2, #1
 80018b8:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2200      	movs	r2, #0
 80018c0:	625a      	str	r2, [r3, #36]	; 0x24
 80018c2:	e00d      	b.n	80018e0 <BasicTimer_Config+0xcc>

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		// Cuando CR1 = 1 es descendente
		ptrBTimerHandler->ptrTIMx->CR1 = TIM_CR1_DIR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2210      	movs	r2, #16
 80018ca:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		ptrBTimerHandler-> ptrTIMx->ARR = 0;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2200      	movs	r2, #0
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68da      	ldr	r2, [r3, #12]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	3a01      	subs	r2, #1
 80018de:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 0201 	orr.w	r2, r2, #1
 80018ee:	601a      	str	r2, [r3, #0]
	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	// El registro encargado de la interrupcion es el UIE

	// Modificar con el ciclo If
	ptrBTimerHandler->ptrTIMx->DIER |= ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable; //TIM_DIER_UIE
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	7c1b      	ldrb	r3, [r3, #16]
 80018fa:	4619      	mov	r1, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800190c:	d103      	bne.n	8001916 <BasicTimer_Config+0x102>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 800190e:	201c      	movs	r0, #28
 8001910:	f7ff ff64 	bl	80017dc <__NVIC_EnableIRQ>
 8001914:	e01b      	b.n	800194e <BasicTimer_Config+0x13a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <BasicTimer_Config+0x150>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d103      	bne.n	8001928 <BasicTimer_Config+0x114>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8001920:	201d      	movs	r0, #29
 8001922:	f7ff ff5b 	bl	80017dc <__NVIC_EnableIRQ>
 8001926:	e012      	b.n	800194e <BasicTimer_Config+0x13a>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0e      	ldr	r2, [pc, #56]	; (8001968 <BasicTimer_Config+0x154>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d103      	bne.n	800193a <BasicTimer_Config+0x126>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8001932:	201e      	movs	r0, #30
 8001934:	f7ff ff52 	bl	80017dc <__NVIC_EnableIRQ>
 8001938:	e009      	b.n	800194e <BasicTimer_Config+0x13a>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a0b      	ldr	r2, [pc, #44]	; (800196c <BasicTimer_Config+0x158>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d103      	bne.n	800194c <BasicTimer_Config+0x138>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8001944:	2032      	movs	r0, #50	; 0x32
 8001946:	f7ff ff49 	bl	80017dc <__NVIC_EnableIRQ>
 800194a:	e000      	b.n	800194e <BasicTimer_Config+0x13a>
	}

	else{
		__NOP();
 800194c:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800194e:	b662      	cpsie	i
}
 8001950:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000460 	.word	0x20000460
 8001960:	40023800 	.word	0x40023800
 8001964:	40000400 	.word	0x40000400
 8001968:	40000800 	.word	0x40000800
 800196c:	40000c00 	.word	0x40000c00

08001970 <BasicTimer3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer3_Callback(void){
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001974:	bf00      	nop
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr

0800197e <BasicTimer4_Callback>:
__attribute__((weak)) void BasicTimer4_Callback(void){
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001982:	bf00      	nop
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001990:	bf00      	nop
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr

0800199a <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 800199a:	b580      	push	{r7, lr}
 800199c:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM2->SR &= ~TIM_SR_UIF;
 800199e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019a8:	f023 0301 	bic.w	r3, r3, #1
 80019ac:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer2_Callback();
 80019ae:	f7ff fe71 	bl	8001694 <BasicTimer2_Callback>
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM3->SR &= ~TIM_SR_UIF;
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <TIM3_IRQHandler+0x18>)
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	4a03      	ldr	r2, [pc, #12]	; (80019d0 <TIM3_IRQHandler+0x18>)
 80019c2:	f023 0301 	bic.w	r3, r3, #1
 80019c6:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer3_Callback();
 80019c8:	f7ff ffd2 	bl	8001970 <BasicTimer3_Callback>
}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40000400 	.word	0x40000400

080019d4 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM4->SR &= ~TIM_SR_UIF;
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <TIM4_IRQHandler+0x18>)
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	4a03      	ldr	r2, [pc, #12]	; (80019ec <TIM4_IRQHandler+0x18>)
 80019de:	f023 0301 	bic.w	r3, r3, #1
 80019e2:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer4_Callback();
 80019e4:	f7ff ffcb 	bl	800197e <BasicTimer4_Callback>
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40000800 	.word	0x40000800

080019f0 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM5->SR &= ~TIM_SR_UIF;
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <TIM5_IRQHandler+0x18>)
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	4a03      	ldr	r2, [pc, #12]	; (8001a08 <TIM5_IRQHandler+0x18>)
 80019fa:	f023 0301 	bic.w	r3, r3, #1
 80019fe:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer5_Callback();
 8001a00:	f7ff ffc4 	bl	800198c <BasicTimer5_Callback>
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40000c00 	.word	0x40000c00

08001a0c <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemento "activar el periferico o activar la señal de reloj del periferico)
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]

	// 1)Activar el periferico
	//verificamos para GPIOA
	if(pGPIOHandler->pGPIOx == GPIOA){
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a87      	ldr	r2, [pc, #540]	; (8001c40 <GPIO_Config+0x234>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d106      	bne.n	8001a34 <GPIO_Config+0x28>
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 8001a26:	4b87      	ldr	r3, [pc, #540]	; (8001c44 <GPIO_Config+0x238>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a86      	ldr	r2, [pc, #536]	; (8001c44 <GPIO_Config+0x238>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	e03a      	b.n	8001aaa <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx == GPIOB){
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a83      	ldr	r2, [pc, #524]	; (8001c48 <GPIO_Config+0x23c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d106      	bne.n	8001a4c <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 8001a3e:	4b81      	ldr	r3, [pc, #516]	; (8001c44 <GPIO_Config+0x238>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a80      	ldr	r2, [pc, #512]	; (8001c44 <GPIO_Config+0x238>)
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	e02e      	b.n	8001aaa <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if(pGPIOHandler->pGPIOx == GPIOC){
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a7e      	ldr	r2, [pc, #504]	; (8001c4c <GPIO_Config+0x240>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d106      	bne.n	8001a64 <GPIO_Config+0x58>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 8001a56:	4b7b      	ldr	r3, [pc, #492]	; (8001c44 <GPIO_Config+0x238>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a7a      	ldr	r2, [pc, #488]	; (8001c44 <GPIO_Config+0x238>)
 8001a5c:	f043 0304 	orr.w	r3, r3, #4
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	e022      	b.n	8001aaa <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if(pGPIOHandler->pGPIOx == GPIOD){
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a79      	ldr	r2, [pc, #484]	; (8001c50 <GPIO_Config+0x244>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d106      	bne.n	8001a7c <GPIO_Config+0x70>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 8001a6e:	4b75      	ldr	r3, [pc, #468]	; (8001c44 <GPIO_Config+0x238>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a74      	ldr	r2, [pc, #464]	; (8001c44 <GPIO_Config+0x238>)
 8001a74:	f043 0308 	orr.w	r3, r3, #8
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	e016      	b.n	8001aaa <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if(pGPIOHandler->pGPIOx == GPIOE){
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a74      	ldr	r2, [pc, #464]	; (8001c54 <GPIO_Config+0x248>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d106      	bne.n	8001a94 <GPIO_Config+0x88>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 8001a86:	4b6f      	ldr	r3, [pc, #444]	; (8001c44 <GPIO_Config+0x238>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a6e      	ldr	r2, [pc, #440]	; (8001c44 <GPIO_Config+0x238>)
 8001a8c:	f043 0310 	orr.w	r3, r3, #16
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	e00a      	b.n	8001aaa <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOH
	else if(pGPIOHandler->pGPIOx == GPIOH){
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a6f      	ldr	r2, [pc, #444]	; (8001c58 <GPIO_Config+0x24c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d105      	bne.n	8001aaa <GPIO_Config+0x9e>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 8001a9e:	4b69      	ldr	r3, [pc, #420]	; (8001c44 <GPIO_Config+0x238>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a68      	ldr	r2, [pc, #416]	; (8001c44 <GPIO_Config+0x238>)
 8001aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
	// Despues de activado, podemos comenzar a configurar.

	// 2) COnfigurando el registro GPIOx_MODER
	// Acá estamos leyendo config, moviendo "PinNumber" veces hacia la izquierda
	// ese valor (shift left) y todo eso lo cargamos en la variable auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	795b      	ldrb	r3, [r3, #5]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	791b      	ldrb	r3, [r3, #4]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	60fb      	str	r3, [r7, #12]
	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro
	 * (debemos escribir 0b00) para lo cual aplicamos una mascara y una operación de
	 * bitwise AND
	 */
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	791b      	ldrb	r3, [r3, #4]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	2103      	movs	r1, #3
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	400a      	ands	r2, r1
 8001ad8:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6819      	ldr	r1, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	7a1b      	ldrb	r3, [r3, #8]
 8001aee:	461a      	mov	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	791b      	ldrb	r3, [r3, #4]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	791b      	ldrb	r3, [r3, #4]
 8001b04:	4619      	mov	r1, r3
 8001b06:	2301      	movs	r3, #1
 8001b08:	408b      	lsls	r3, r1
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	400a      	ands	r2, r1
 8001b14:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6859      	ldr	r1, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	799b      	ldrb	r3, [r3, #6]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	791b      	ldrb	r3, [r3, #4]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0B11 << 2 *pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	791b      	ldrb	r3, [r3, #4]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	2103      	movs	r1, #3
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	400a      	ands	r2, r1
 8001b54:	609a      	str	r2, [r3, #8]

	//cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6899      	ldr	r1, [r3, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull up pull down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	79db      	ldrb	r3, [r3, #7]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	791b      	ldrb	r3, [r3, #4]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	791b      	ldrb	r3, [r3, #4]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	2103      	movs	r1, #3
 8001b86:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	400a      	ands	r2, r1
 8001b94:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68d9      	ldr	r1, [r3, #12]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas.. se vera luego
	if (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	795b      	ldrb	r3, [r3, #5]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d143      	bne.n	8001c36 <GPIO_Config+0x22a>

		//Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	791b      	ldrb	r3, [r3, #4]
 8001bb2:	2b07      	cmp	r3, #7
 8001bb4:	d81f      	bhi.n	8001bf6 <GPIO_Config+0x1ea>
			//Estamos en el registro AGRL, que controla los piner del pIN_0 AL PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	791b      	ldrb	r3, [r3, #4]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del tegistro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6a1a      	ldr	r2, [r3, #32]
 8001bc4:	210f      	movs	r1, #15
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	4619      	mov	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	400a      	ands	r2, r1
 8001bd6:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor confiurado en la posicon seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6a1a      	ldr	r2, [r3, #32]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	7a5b      	ldrb	r3, [r3, #9]
 8001be2:	4619      	mov	r1, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bea:	4619      	mov	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} //Fin del GPIO_Config
 8001bf4:	e01f      	b.n	8001c36 <GPIO_Config+0x22a>
			auxPosition = 4* (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber -8);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	791b      	ldrb	r3, [r3, #4]
 8001bfa:	3b08      	subs	r3, #8
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c06:	210f      	movs	r1, #15
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	4619      	mov	r1, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	400a      	ands	r2, r1
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	7a5b      	ldrb	r3, [r3, #9]
 8001c24:	4619      	mov	r1, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24
} //Fin del GPIO_Config
 8001c36:	bf00      	nop
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40020400 	.word	0x40020400
 8001c4c:	40020800 	.word	0x40020800
 8001c50:	40020c00 	.word	0x40020c00
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40021c00 	.word	0x40021c00

08001c5c <GPIOxTooglePin>:
	pinValue &= mask;

	return pinValue;
}

void GPIOxTooglePin(GPIO_Handler_t *pPinHandler){
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR ^= (SET <<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	791b      	ldrb	r3, [r3, #4]
 8001c6e:	4619      	mov	r1, r3
 8001c70:	2301      	movs	r3, #1
 8001c72:	408b      	lsls	r3, r1
 8001c74:	4619      	mov	r1, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	404a      	eors	r2, r1
 8001c7c:	615a      	str	r2, [r3, #20]
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <pwm_Config>:
 */

#include "PwmDriver.h"

/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if(ptrPwmHandler->ptrTIMx == TIM2){
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c98:	d106      	bne.n	8001ca8 <pwm_Config+0x20>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001c9a:	4b59      	ldr	r3, [pc, #356]	; (8001e00 <pwm_Config+0x178>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4a58      	ldr	r2, [pc, #352]	; (8001e00 <pwm_Config+0x178>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca6:	e024      	b.n	8001cf2 <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a55      	ldr	r2, [pc, #340]	; (8001e04 <pwm_Config+0x17c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d106      	bne.n	8001cc0 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001cb2:	4b53      	ldr	r3, [pc, #332]	; (8001e00 <pwm_Config+0x178>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	4a52      	ldr	r2, [pc, #328]	; (8001e00 <pwm_Config+0x178>)
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbe:	e018      	b.n	8001cf2 <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a50      	ldr	r2, [pc, #320]	; (8001e08 <pwm_Config+0x180>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d106      	bne.n	8001cd8 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001cca:	4b4d      	ldr	r3, [pc, #308]	; (8001e00 <pwm_Config+0x178>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	4a4c      	ldr	r2, [pc, #304]	; (8001e00 <pwm_Config+0x178>)
 8001cd0:	f043 0304 	orr.w	r3, r3, #4
 8001cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd6:	e00c      	b.n	8001cf2 <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a4b      	ldr	r2, [pc, #300]	; (8001e0c <pwm_Config+0x184>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d106      	bne.n	8001cf0 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001ce2:	4b47      	ldr	r3, [pc, #284]	; (8001e00 <pwm_Config+0x178>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	4a46      	ldr	r2, [pc, #280]	; (8001e00 <pwm_Config+0x178>)
 8001ce8:	f043 0308 	orr.w	r3, r3, #8
 8001cec:	6413      	str	r3, [r2, #64]	; 0x40
 8001cee:	e000      	b.n	8001cf2 <pwm_Config+0x6a>
	}
	else{
		__NOP();
 8001cf0:	bf00      	nop
	}

	/* 1. Cargamos la frecuencia deseada */
	setFrequency(ptrPwmHandler);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f8dc 	bl	8001eb0 <setFrequency>

	/* 2. Cargamos el valor del dutty-Cycle*/
	setDuttyCycle(ptrPwmHandler);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f8ed 	bl	8001ed8 <setDuttyCycle>

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0210 	bic.w	r2, r2, #16
 8001d0c:	601a      	str	r2, [r3, #0]
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	791b      	ldrb	r3, [r3, #4]
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d86e      	bhi.n	8001df4 <pwm_Config+0x16c>
 8001d16:	a201      	add	r2, pc, #4	; (adr r2, 8001d1c <pwm_Config+0x94>)
 8001d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1c:	08001d2d 	.word	0x08001d2d
 8001d20:	08001d5f 	.word	0x08001d5f
 8001d24:	08001d91 	.word	0x08001d91
 8001d28:	08001dc3 	.word	0x08001dc3
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~(TIM_CCMR1_CC1S);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699a      	ldr	r2, [r3, #24]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0203 	bic.w	r2, r2, #3
 8001d3a:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC1M_Pos);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	699a      	ldr	r2, [r3, #24]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001d4a:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699a      	ldr	r2, [r3, #24]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0208 	orr.w	r2, r2, #8
 8001d5a:	619a      	str	r2, [r3, #24]

		break;
 8001d5c:	e04b      	b.n	8001df6 <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~(TIM_CCMR1_CC2S);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	699a      	ldr	r2, [r3, #24]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001d6c:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC2M_Pos);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	699a      	ldr	r2, [r3, #24]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001d7c:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	699a      	ldr	r2, [r3, #24]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d8c:	619a      	str	r2, [r3, #24]
		break;
 8001d8e:	e032      	b.n	8001df6 <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_3:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~(TIM_CCMR2_CC3S);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	69da      	ldr	r2, [r3, #28]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0203 	bic.w	r2, r2, #3
 8001d9e:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC3M_Pos);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	69da      	ldr	r2, [r3, #28]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001dae:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	69da      	ldr	r2, [r3, #28]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0208 	orr.w	r2, r2, #8
 8001dbe:	61da      	str	r2, [r3, #28]
		break;
 8001dc0:	e019      	b.n	8001df6 <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_4:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~(TIM_CCMR2_CC4S);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	69da      	ldr	r2, [r3, #28]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001dd0:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC4M_Pos);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	69da      	ldr	r2, [r3, #28]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001de0:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	69da      	ldr	r2, [r3, #28]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001df0:	61da      	str	r2, [r3, #28]
		break;
 8001df2:	e000      	b.n	8001df6 <pwm_Config+0x16e>
	}

	default:{
		break;
 8001df4:	bf00      	nop

	/* 6. Activamos la salida seleccionada */
	enableOutput(ptrPwmHandler);

	}// fin del switch-case
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40000400 	.word	0x40000400
 8001e08:	40000800 	.word	0x40000800
 8001e0c:	40000c00 	.word	0x40000c00

08001e10 <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0201 	orr.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr
	...

08001e34 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
void enableOutput(PWM_Handler_t *ptrPwmHandler) {
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	switch (ptrPwmHandler->config.channel) {
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	791b      	ldrb	r3, [r3, #4]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d82f      	bhi.n	8001ea4 <enableOutput+0x70>
 8001e44:	a201      	add	r2, pc, #4	; (adr r2, 8001e4c <enableOutput+0x18>)
 8001e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4a:	bf00      	nop
 8001e4c:	08001e5d 	.word	0x08001e5d
 8001e50:	08001e6f 	.word	0x08001e6f
 8001e54:	08001e81 	.word	0x08001e81
 8001e58:	08001e93 	.word	0x08001e93
	case PWM_CHANNEL_1: {
		// Activamos la salida del canal 1
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6a1a      	ldr	r2, [r3, #32]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0201 	orr.w	r2, r2, #1
 8001e6a:	621a      	str	r2, [r3, #32]
		break;
 8001e6c:	e01b      	b.n	8001ea6 <enableOutput+0x72>
	}

	case PWM_CHANNEL_2: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6a1a      	ldr	r2, [r3, #32]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 0210 	orr.w	r2, r2, #16
 8001e7c:	621a      	str	r2, [r3, #32]
		break;
 8001e7e:	e012      	b.n	8001ea6 <enableOutput+0x72>
	}

	case PWM_CHANNEL_3: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6a1a      	ldr	r2, [r3, #32]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e8e:	621a      	str	r2, [r3, #32]

		break;
 8001e90:	e009      	b.n	8001ea6 <enableOutput+0x72>
	}

	case PWM_CHANNEL_4: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6a1a      	ldr	r2, [r3, #32]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ea0:	621a      	str	r2, [r3, #32]

		break;
 8001ea2:	e000      	b.n	8001ea6 <enableOutput+0x72>
	}

	default: {
		break;
 8001ea4:	bf00      	nop
	}
	}
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <setFrequency>:
void offOutput(PWM_Handler_t *ptrPwmHandler) {
	switch (ptrPwmHandler->config.channel) {
	case PWM_CHANNEL_1: {
		// Activamos la salida del canal 1
		ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
		break;
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	}

	case PWM_CHANNEL_2: {
		// Activamos la salida del canal 2
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	3a01      	subs	r2, #1
 8001ec2:	629a      	str	r2, [r3, #40]	; 0x28
		ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
		break;
	}

 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	899a      	ldrh	r2, [r3, #12]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	62da      	str	r2, [r3, #44]	; 0x2c
	case PWM_CHANNEL_3: {
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <setDuttyCycle>:
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;

		break;
	}

 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	default: {
		break;
	}
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	791b      	ldrb	r3, [r3, #4]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d823      	bhi.n	8001f30 <setDuttyCycle+0x58>
 8001ee8:	a201      	add	r2, pc, #4	; (adr r2, 8001ef0 <setDuttyCycle+0x18>)
 8001eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eee:	bf00      	nop
 8001ef0:	08001f01 	.word	0x08001f01
 8001ef4:	08001f0d 	.word	0x08001f0d
 8001ef8:	08001f19 	.word	0x08001f19
 8001efc:	08001f25 	.word	0x08001f25
	}
}
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	89da      	ldrh	r2, [r3, #14]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	635a      	str	r2, [r3, #52]	; 0x34

/*
 8001f0a:	e012      	b.n	8001f32 <setDuttyCycle+0x5a>
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	89da      	ldrh	r2, [r3, #14]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	639a      	str	r2, [r3, #56]	; 0x38
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8001f16:	e00c      	b.n	8001f32 <setDuttyCycle+0x5a>

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler -1;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	89da      	ldrh	r2, [r3, #14]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	63da      	str	r2, [r3, #60]	; 0x3c

 8001f22:	e006      	b.n	8001f32 <setDuttyCycle+0x5a>
	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.
	ptrPwmHandler->ptrTIMx->ARR = ptrPwmHandler->config.periodo;
}
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	89da      	ldrh	r2, [r3, #14]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	641a      	str	r2, [r3, #64]	; 0x40

 8001f2e:	e000      	b.n	8001f32 <setDuttyCycle+0x5a>

/* Función para actualizar la frecuencia, funciona de la mano con setFrequency */
void updateFrequency(PWM_Handler_t *ptrPwmHandler, uint16_t newFreq){
	// Actualizamos el registro que manipula el periodo
 8001f30:	bf00      	nop
    ptrPwmHandler->config.periodo = newFreq;

	// Llamamos a la fucnión que cambia la frecuencia
    setFrequency(ptrPwmHandler);
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <updateDuttyCycle>:

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){

 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	807b      	strh	r3, [r7, #2]
	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	887a      	ldrh	r2, [r7, #2]
 8001f4c:	81da      	strh	r2, [r3, #14]
	case PWM_CHANNEL_1:{
		ptrPwmHandler->ptrTIMx->CCR1 = ptrPwmHandler->config.duttyCicle;

 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ffc2 	bl	8001ed8 <setDuttyCycle>
		break;
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <__NVIC_EnableIRQ>:
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	db0b      	blt.n	8001f86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	f003 021f 	and.w	r2, r3, #31
 8001f74:	4906      	ldr	r1, [pc, #24]	; (8001f90 <__NVIC_EnableIRQ+0x34>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr
 8001f90:	e000e100 	.word	0xe000e100

08001f94 <USART_Config>:
 */

// Esta variable es necesaria para las interrupciones del USART 2 y 6.
uint8_t auxRxData = 0;

void USART_Config(USART_Handler_t *ptrUsartHandler){
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f9c:	b672      	cpsid	i
}
 8001f9e:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a8c      	ldr	r2, [pc, #560]	; (80021d8 <USART_Config+0x244>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d106      	bne.n	8001fb8 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8001faa:	4b8c      	ldr	r3, [pc, #560]	; (80021dc <USART_Config+0x248>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	4a8b      	ldr	r2, [pc, #556]	; (80021dc <USART_Config+0x248>)
 8001fb0:	f043 0310 	orr.w	r3, r3, #16
 8001fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb6:	e016      	b.n	8001fe6 <USART_Config+0x52>
	}else if(ptrUsartHandler->ptrUSARTx == USART6){
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a88      	ldr	r2, [pc, #544]	; (80021e0 <USART_Config+0x24c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d106      	bne.n	8001fd0 <USART_Config+0x3c>
		/*Configuramos el USART 6 que está en el mismo bus del USART 1 */
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8001fc2:	4b86      	ldr	r3, [pc, #536]	; (80021dc <USART_Config+0x248>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	4a85      	ldr	r2, [pc, #532]	; (80021dc <USART_Config+0x248>)
 8001fc8:	f043 0320 	orr.w	r3, r3, #32
 8001fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fce:	e00a      	b.n	8001fe6 <USART_Config+0x52>
		// Luego el USART 2 que está en el bus 1.
	}else if(ptrUsartHandler->ptrUSARTx == USART2){
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a83      	ldr	r2, [pc, #524]	; (80021e4 <USART_Config+0x250>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d105      	bne.n	8001fe6 <USART_Config+0x52>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8001fda:	4b80      	ldr	r3, [pc, #512]	; (80021dc <USART_Config+0x248>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	4a7f      	ldr	r2, [pc, #508]	; (80021dc <USART_Config+0x248>)
 8001fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe4:	6413      	str	r3, [r2, #64]	; 0x40
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2200      	movs	r2, #0
 8001fec:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	79db      	ldrb	r3, [r3, #7]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d025      	beq.n	800204a <USART_Config+0xb6>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	79db      	ldrb	r3, [r3, #7]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d110      	bne.n	8002028 <USART_Config+0x94>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002014:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	e018      	b.n	800205a <USART_Config+0xc6>

		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002036:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002046:	60da      	str	r2, [r3, #12]
 8002048:	e007      	b.n	800205a <USART_Config+0xc6>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002058:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize ==USART_DATASIZE_8BIT){
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	799b      	ldrb	r3, [r3, #6]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d115      	bne.n	800208e <USART_Config+0xfa>

	    	// Inicialmente debe corroborarse si se quiere o no la paridad.
	    	if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_NONE){
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	79db      	ldrb	r3, [r3, #7]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d108      	bne.n	800207c <USART_Config+0xe8>
	    		// Si se quieren datos de 8 bits.
	    		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	e010      	b.n	800209e <USART_Config+0x10a>
	    	}
	    	else{
	    		// Si la partidad esta activada, se agrega un BIT adicional.
	    		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800208a:	60da      	str	r2, [r3, #12]
 800208c:	e007      	b.n	800209e <USART_Config+0x10a>
	    	}
	    }
	    else{
	    	// Se configuran 9 bits para el tamaño.
	    	ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800209c:	60da      	str	r2, [r3, #12]
	    }

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	7a1b      	ldrb	r3, [r3, #8]
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d84e      	bhi.n	8002144 <USART_Config+0x1b0>
 80020a6:	a201      	add	r2, pc, #4	; (adr r2, 80020ac <USART_Config+0x118>)
 80020a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ac:	080020bd 	.word	0x080020bd
 80020b0:	080020df 	.word	0x080020df
 80020b4:	08002101 	.word	0x08002101
 80020b8:	08002123 	.word	0x08002123
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020ca:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691a      	ldr	r2, [r3, #16]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020da:	611a      	str	r2, [r3, #16]
		break;
 80020dc:	e043      	b.n	8002166 <USART_Config+0x1d2>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80020ec:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020fc:	611a      	str	r2, [r3, #16]
		break;
 80020fe:	e032      	b.n	8002166 <USART_Config+0x1d2>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691a      	ldr	r2, [r3, #16]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800210e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691a      	ldr	r2, [r3, #16]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800211e:	611a      	str	r2, [r3, #16]
		break;
 8002120:	e021      	b.n	8002166 <USART_Config+0x1d2>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002130:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002140:	611a      	str	r2, [r3, #16]
		break;
 8002142:	e010      	b.n	8002166 <USART_Config+0x1d2>
	}
	default: {
		// En el caso por defecto seleccionamos 1 bit de parada
		// Escriba acá su código
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691a      	ldr	r2, [r3, #16]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002152:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691a      	ldr	r2, [r3, #16]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002162:	611a      	str	r2, [r3, #16]
		break;
 8002164:	bf00      	nop
	 * decida utilizar el usuario. La función getConfig() retorna esta
	 * frecuencia en que se encuentra actualmente el reloj del sistema PLL,
	 * por tanto, se considera un condicional que incluye los cálculos para
	 * la frecuencia de 100 MHz y por defecto recurre a la frecuencia natural.
	 */
	if(actualFrecuency == 100000000){
 8002166:	f000 fca3 	bl	8002ab0 <getConfigPLL>
 800216a:	4603      	mov	r3, r0
 800216c:	4a1e      	ldr	r2, [pc, #120]	; (80021e8 <USART_Config+0x254>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d11d      	bne.n	80021ae <USART_Config+0x21a>
		// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
		if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	795b      	ldrb	r3, [r3, #5]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d105      	bne.n	8002186 <USART_Config+0x1f2>
			// El valor a cargar es 651.041 -> Mantiza = 651,fraction = 0.041
			// Mantiza = 651 = 0x28b, fraction = 16 * 0.041 = 1
			// Valor a cargar 0x28B1
			// Configurando el Baudrate generator para una velocidad de 9600bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x28B1;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f642 02b1 	movw	r2, #10417	; 0x28b1
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	e03a      	b.n	80021fc <USART_Config+0x268>
		}

		else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	795b      	ldrb	r3, [r3, #5]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d105      	bne.n	800219a <USART_Config+0x206>
			// El valor a cargar es 325.520 -> Mantiza = 325,fraction = 0.520
			// Mantiza = 325 = 0x145, fraction = 16 * 0.520 = 8
			// Valor a cargar 0x1458
			ptrUsartHandler->ptrUSARTx->BRR = 0x1458;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f241 4258 	movw	r2, #5208	; 0x1458
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	e030      	b.n	80021fc <USART_Config+0x268>
		}

		else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	795b      	ldrb	r3, [r3, #5]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d12c      	bne.n	80021fc <USART_Config+0x268>
			// El valor a cargar es 54.253 -> Mantiza = 54,fraction = 0.253
			// Mantiza = 54 = 0x36, fraction = 16 * 0.253 = 4.
			ptrUsartHandler->ptrUSARTx->BRR = 0x364;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f44f 7259 	mov.w	r2, #868	; 0x364
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	e026      	b.n	80021fc <USART_Config+0x268>
		}
	// Caso por defecto de 16 MHz.
	}else{
		// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
		if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	795b      	ldrb	r3, [r3, #5]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d105      	bne.n	80021c2 <USART_Config+0x22e>
			// El valor a cargar es 104.1875 -> Mantiza = 104,fraction = 0.1875
			// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
			// Valor a cargar 0x0683
			// Configurando el Baudrate generator para una velocidad de 9600bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f240 6283 	movw	r2, #1667	; 0x683
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	e01c      	b.n	80021fc <USART_Config+0x268>
		}

		else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	795b      	ldrb	r3, [r3, #5]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d110      	bne.n	80021ec <USART_Config+0x258>
			// El valor a cargar es 52.0625 -> Mantiza = 52,fraction = 0.0625
			// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
			// Escriba acá su código y los comentarios que faltan
			// Valor a cargar 0x0341
			ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f240 3241 	movw	r2, #833	; 0x341
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	e012      	b.n	80021fc <USART_Config+0x268>
 80021d6:	bf00      	nop
 80021d8:	40011000 	.word	0x40011000
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40011400 	.word	0x40011400
 80021e4:	40004400 	.word	0x40004400
 80021e8:	05f5e100 	.word	0x05f5e100
		}

		else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	795b      	ldrb	r3, [r3, #5]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d103      	bne.n	80021fc <USART_Config+0x268>
			// Escriba acá su código y los comentarios que faltan
			// El valor a cargar es 8.6875 -> Mantiza = 8,fraction = 0.6875
			// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11 = B.
			ptrUsartHandler->ptrUSARTx->BRR = 0x008B;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	228b      	movs	r2, #139	; 0x8b
 80021fa:	609a      	str	r2, [r3, #8]
		}
	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	791b      	ldrb	r3, [r3, #4]
 8002200:	2b03      	cmp	r3, #3
 8002202:	d847      	bhi.n	8002294 <USART_Config+0x300>
 8002204:	a201      	add	r2, pc, #4	; (adr r2, 800220c <USART_Config+0x278>)
 8002206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220a:	bf00      	nop
 800220c:	0800221d 	.word	0x0800221d
 8002210:	0800222f 	.word	0x0800222f
 8002214:	08002241 	.word	0x08002241
 8002218:	08002263 	.word	0x08002263
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_TE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0208 	orr.w	r2, r2, #8
 800222a:	60da      	str	r2, [r3, #12]
		break;
 800222c:	e04b      	b.n	80022c6 <USART_Config+0x332>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_RE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 0204 	orr.w	r2, r2, #4
 800223c:	60da      	str	r2, [r3, #12]
		break;
 800223e:	e042      	b.n	80022c6 <USART_Config+0x332>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmision como recepcion
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_TE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0208 	orr.w	r2, r2, #8
 800224e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_RE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0204 	orr.w	r2, r2, #4
 800225e:	60da      	str	r2, [r3, #12]
		break;
 8002260:	e031      	b.n	80022c6 <USART_Config+0x332>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		// Escriba acá su código
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0204 	bic.w	r2, r2, #4
 8002270:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0208 	bic.w	r2, r2, #8
 8002280:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002290:	60da      	str	r2, [r3, #12]
		break;
 8002292:	e018      	b.n	80022c6 <USART_Config+0x332>
	}

	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0204 	bic.w	r2, r2, #4
 80022a2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0208 	bic.w	r2, r2, #8
 80022b2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022c2:	60da      	str	r2, [r3, #12]
		break;
 80022c4:	bf00      	nop
	}
	}

	// 2.7 Activamos el módulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	791b      	ldrb	r3, [r3, #4]
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d007      	beq.n	80022de <USART_Config+0x34a>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022dc:	60da      	str	r2, [r3, #12]
	}
	// Se verifica la activación de la interrupcion Rx
	if (ptrUsartHandler->ptrUSARTx == USART1){
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a28      	ldr	r2, [pc, #160]	; (8002384 <USART_Config+0x3f0>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d03a      	beq.n	800235e <USART_Config+0x3ca>
	}

	/* 1.2 Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2) {
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a26      	ldr	r2, [pc, #152]	; (8002388 <USART_Config+0x3f4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d118      	bne.n	8002324 <USART_Config+0x390>
		if (ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE) {
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7a5b      	ldrb	r3, [r3, #9]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d10b      	bne.n	8002312 <USART_Config+0x37e>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f042 0220 	orr.w	r2, r2, #32
 8002308:	60da      	str	r2, [r3, #12]
			NVIC_EnableIRQ(USART2_IRQn);
 800230a:	2026      	movs	r0, #38	; 0x26
 800230c:	f7ff fe26 	bl	8001f5c <__NVIC_EnableIRQ>
 8002310:	e025      	b.n	800235e <USART_Config+0x3ca>
		} else {
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0220 	bic.w	r2, r2, #32
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	e01c      	b.n	800235e <USART_Config+0x3ca>
		}
	}

	/* 1.3 Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6) {
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a18      	ldr	r2, [pc, #96]	; (800238c <USART_Config+0x3f8>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d117      	bne.n	800235e <USART_Config+0x3ca>
		if (ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE) {
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	7a5b      	ldrb	r3, [r3, #9]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d10b      	bne.n	800234e <USART_Config+0x3ba>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f042 0220 	orr.w	r2, r2, #32
 8002344:	60da      	str	r2, [r3, #12]
			NVIC_EnableIRQ(USART6_IRQn);
 8002346:	2047      	movs	r0, #71	; 0x47
 8002348:	f7ff fe08 	bl	8001f5c <__NVIC_EnableIRQ>
 800234c:	e007      	b.n	800235e <USART_Config+0x3ca>
		} else {
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0220 	bic.w	r2, r2, #32
 800235c:	60da      	str	r2, [r3, #12]
		}
	}

	// 2.8 Activamos el módulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	791b      	ldrb	r3, [r3, #4]
 8002362:	2b03      	cmp	r3, #3
 8002364:	d007      	beq.n	8002376 <USART_Config+0x3e2>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002374:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8002376:	b662      	cpsie	i
}
 8002378:	bf00      	nop
	}

	// Activamos las interrupciones globales
	__enable_irq();
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40011000 	.word	0x40011000
 8002388:	40004400 	.word	0x40004400
 800238c:	40011400 	.word	0x40011400

08002390 <usart6Rx_Callback>:
	            the usart2Rx_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void usart6Rx_Callback(void){
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the usart6Rx_Callback could be implemented in the main file
	   */
	__NOP();
 8002394:	bf00      	nop
}
 8002396:	bf00      	nop
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <writeChar>:

/* funcion para escribir un solo char */
int writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80023a8:	e000      	b.n	80023ac <writeChar+0xe>
		__NOP();
 80023aa:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f7      	beq.n	80023aa <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	605a      	str	r2, [r3, #4]

	return dataToSend;
 80023c2:	683b      	ldr	r3, [r7, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <writeMsg>:

// función para escribir un mensaje
void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	6039      	str	r1, [r7, #0]
	while(*msgToSend != '\0'){
 80023d8:	e008      	b.n	80023ec <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	4619      	mov	r1, r3
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff ffdc 	bl	800239e <writeChar>
		msgToSend++;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	3301      	adds	r3, #1
 80023ea:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1f2      	bne.n	80023da <writeMsg+0xc>
	}
}
 80023f4:	bf00      	nop
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <getRxData>:

// función auxiliar
uint8_t getRxData(void){
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
	return auxRxData;
 8002404:	4b02      	ldr	r3, [pc, #8]	; (8002410 <getRxData+0x10>)
 8002406:	781b      	ldrb	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	20000464 	.word	0x20000464

08002414 <USART2_IRQHandler>:

/* INTERRUPCIONES DEL USART */
// Se debe crear una variable auxiliar para la lectura que se declara al inicio.

/* Para el USART 2 */
void USART2_IRQHandler(void){
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
	// Se evalúa si la interrupción que se dio es por RX
	if(USART2->SR & USART_SR_RXNE){
 8002418:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <USART2_IRQHandler+0x30>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0320 	and.w	r3, r3, #32
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00c      	beq.n	800243e <USART2_IRQHandler+0x2a>
		USART2->SR &= ~USART_SR_RXNE;
 8002424:	4b07      	ldr	r3, [pc, #28]	; (8002444 <USART2_IRQHandler+0x30>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a06      	ldr	r2, [pc, #24]	; (8002444 <USART2_IRQHandler+0x30>)
 800242a:	f023 0320 	bic.w	r3, r3, #32
 800242e:	6013      	str	r3, [r2, #0]
		auxRxData = (uint8_t) USART2->DR;
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <USART2_IRQHandler+0x30>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	b2da      	uxtb	r2, r3
 8002436:	4b04      	ldr	r3, [pc, #16]	; (8002448 <USART2_IRQHandler+0x34>)
 8002438:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 800243a:	f7ff f949 	bl	80016d0 <usart2Rx_Callback>
	}
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40004400 	.word	0x40004400
 8002448:	20000464 	.word	0x20000464

0800244c <USART6_IRQHandler>:

/* Para el USART 6 */
void USART6_IRQHandler(void){
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
	// Evaluamos que la interrupción que se dio es por RX
	if(USART6->SR & USART_SR_RXNE){
 8002450:	4b0a      	ldr	r3, [pc, #40]	; (800247c <USART6_IRQHandler+0x30>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0320 	and.w	r3, r3, #32
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00c      	beq.n	8002476 <USART6_IRQHandler+0x2a>
		USART6->SR &= ~USART_SR_RXNE;
 800245c:	4b07      	ldr	r3, [pc, #28]	; (800247c <USART6_IRQHandler+0x30>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a06      	ldr	r2, [pc, #24]	; (800247c <USART6_IRQHandler+0x30>)
 8002462:	f023 0320 	bic.w	r3, r3, #32
 8002466:	6013      	str	r3, [r2, #0]
		auxRxData = (uint8_t) USART6->DR;
 8002468:	4b04      	ldr	r3, [pc, #16]	; (800247c <USART6_IRQHandler+0x30>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4b04      	ldr	r3, [pc, #16]	; (8002480 <USART6_IRQHandler+0x34>)
 8002470:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 8002472:	f7ff ff8d 	bl	8002390 <usart6Rx_Callback>
	}
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40011400 	.word	0x40011400
 8002480:	20000464 	.word	0x20000464

08002484 <__NVIC_EnableIRQ>:
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	2b00      	cmp	r3, #0
 8002494:	db0b      	blt.n	80024ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	f003 021f 	and.w	r2, r3, #31
 800249c:	4906      	ldr	r1, [pc, #24]	; (80024b8 <__NVIC_EnableIRQ+0x34>)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	2001      	movs	r0, #1
 80024a6:	fa00 f202 	lsl.w	r2, r0, r2
 80024aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr
 80024b8:	e000e100 	.word	0xe000e100

080024bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	6039      	str	r1, [r7, #0]
 80024c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	db0a      	blt.n	80024e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	490c      	ldr	r1, [pc, #48]	; (8002508 <__NVIC_SetPriority+0x4c>)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	0112      	lsls	r2, r2, #4
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	440b      	add	r3, r1
 80024e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e4:	e00a      	b.n	80024fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	4908      	ldr	r1, [pc, #32]	; (800250c <__NVIC_SetPriority+0x50>)
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	3b04      	subs	r3, #4
 80024f4:	0112      	lsls	r2, r2, #4
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	440b      	add	r3, r1
 80024fa:	761a      	strb	r2, [r3, #24]
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000e100 	.word	0xe000e100
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <getADC>:
/*
 * Función que retorna el ultimo dato adquirido por la ADC
 * La idea es que esta función es llamada desde la función callback, de forma que
 * siempre se obtiene el valor mas actual de la conversión ADC.
 * */
uint16_t getADC(void){
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
	// Esta variable es actualizada en la ISR de la conversión, cada vez que se obtiene
	// un nuevo valor.
	return adcRawData;
 8002514:	4b02      	ldr	r3, [pc, #8]	; (8002520 <getADC+0x10>)
 8002516:	881b      	ldrh	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr
 8002520:	20000466 	.word	0x20000466

08002524 <ADC_IRQHandler>:

/*
 * Esta es la ISR de la interrupción por conversión ADC
 */
void ADC_IRQHandler(void){
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
	// Evaluamos que se dio la interrupción por conversión ADC
	if(ADC1->SR & ADC_SR_EOC){
 8002528:	4b07      	ldr	r3, [pc, #28]	; (8002548 <ADC_IRQHandler+0x24>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d006      	beq.n	8002542 <ADC_IRQHandler+0x1e>
		// Leemos el resultado de la conversión ADC y lo cargamos en una variale auxiliar
		// la cual es utilizada en la función getADC()
		adcRawData = ADC1->DR;
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <ADC_IRQHandler+0x24>)
 8002536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002538:	b29a      	uxth	r2, r3
 800253a:	4b04      	ldr	r3, [pc, #16]	; (800254c <ADC_IRQHandler+0x28>)
 800253c:	801a      	strh	r2, [r3, #0]

		// Hacemos el llamado a la función que se ejecutará en el main
		adcComplete_Callback();
 800253e:	f7ff f8d3 	bl	80016e8 <adcComplete_Callback>
	}

}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40012000 	.word	0x40012000
 800254c:	20000466 	.word	0x20000466

08002550 <configAnalogPin>:
/*
 * Con esta función configuramos que pin deseamos que funcione como canal ADC
 * Esta funcion trabaja con el GPIOxDriver, por lo cual requiere que se incluya
 * dicho driver.
 */
void configAnalogPin(uint8_t adcChannel){
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]

	// Con este switch seleccionamos el canal y lo configuramos como análogo.
	switch (adcChannel) {
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	2b0f      	cmp	r3, #15
 800255e:	f200 8093 	bhi.w	8002688 <configAnalogPin+0x138>
 8002562:	a201      	add	r2, pc, #4	; (adr r2, 8002568 <configAnalogPin+0x18>)
 8002564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002568:	080025a9 	.word	0x080025a9
 800256c:	080025b7 	.word	0x080025b7
 8002570:	080025c5 	.word	0x080025c5
 8002574:	080025d3 	.word	0x080025d3
 8002578:	080025e1 	.word	0x080025e1
 800257c:	080025ef 	.word	0x080025ef
 8002580:	080025fd 	.word	0x080025fd
 8002584:	0800260b 	.word	0x0800260b
 8002588:	08002619 	.word	0x08002619
 800258c:	08002627 	.word	0x08002627
 8002590:	08002635 	.word	0x08002635
 8002594:	08002643 	.word	0x08002643
 8002598:	08002651 	.word	0x08002651
 800259c:	0800265f 	.word	0x0800265f
 80025a0:	0800266d 	.word	0x0800266d
 80025a4:	0800267b 	.word	0x0800267b
	 * asignar. (Esto está más o menos en la página 40 del datasheet del micro)
	 */

	case ADC_CHANNEL_0: {
		// Es el pin PA0
		handlerAdcPin.pGPIOx 						= GPIOA;
 80025a8:	4b3d      	ldr	r3, [pc, #244]	; (80026a0 <configAnalogPin+0x150>)
 80025aa:	4a3e      	ldr	r2, [pc, #248]	; (80026a4 <configAnalogPin+0x154>)
 80025ac:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 80025ae:	4b3c      	ldr	r3, [pc, #240]	; (80026a0 <configAnalogPin+0x150>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	711a      	strb	r2, [r3, #4]
		// Nota: Para el ejercicio inicial solo se necesita este canal, los demas
		// se necesitan para trabajos posteriores.
		break;
 80025b4:	e069      	b.n	800268a <configAnalogPin+0x13a>
	}
		;

	case ADC_CHANNEL_1: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx						= GPIOA;
 80025b6:	4b3a      	ldr	r3, [pc, #232]	; (80026a0 <configAnalogPin+0x150>)
 80025b8:	4a3a      	ldr	r2, [pc, #232]	; (80026a4 <configAnalogPin+0x154>)
 80025ba:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 80025bc:	4b38      	ldr	r3, [pc, #224]	; (80026a0 <configAnalogPin+0x150>)
 80025be:	2201      	movs	r2, #1
 80025c0:	711a      	strb	r2, [r3, #4]

		break;
 80025c2:	e062      	b.n	800268a <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_2: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 80025c4:	4b36      	ldr	r3, [pc, #216]	; (80026a0 <configAnalogPin+0x150>)
 80025c6:	4a37      	ldr	r2, [pc, #220]	; (80026a4 <configAnalogPin+0x154>)
 80025c8:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 80025ca:	4b35      	ldr	r3, [pc, #212]	; (80026a0 <configAnalogPin+0x150>)
 80025cc:	2202      	movs	r2, #2
 80025ce:	711a      	strb	r2, [r3, #4]

		break;
 80025d0:	e05b      	b.n	800268a <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_3: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 80025d2:	4b33      	ldr	r3, [pc, #204]	; (80026a0 <configAnalogPin+0x150>)
 80025d4:	4a33      	ldr	r2, [pc, #204]	; (80026a4 <configAnalogPin+0x154>)
 80025d6:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 80025d8:	4b31      	ldr	r3, [pc, #196]	; (80026a0 <configAnalogPin+0x150>)
 80025da:	2203      	movs	r2, #3
 80025dc:	711a      	strb	r2, [r3, #4]

		break;
 80025de:	e054      	b.n	800268a <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_4: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 80025e0:	4b2f      	ldr	r3, [pc, #188]	; (80026a0 <configAnalogPin+0x150>)
 80025e2:	4a30      	ldr	r2, [pc, #192]	; (80026a4 <configAnalogPin+0x154>)
 80025e4:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 80025e6:	4b2e      	ldr	r3, [pc, #184]	; (80026a0 <configAnalogPin+0x150>)
 80025e8:	2204      	movs	r2, #4
 80025ea:	711a      	strb	r2, [r3, #4]

		break;
 80025ec:	e04d      	b.n	800268a <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_5: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 80025ee:	4b2c      	ldr	r3, [pc, #176]	; (80026a0 <configAnalogPin+0x150>)
 80025f0:	4a2c      	ldr	r2, [pc, #176]	; (80026a4 <configAnalogPin+0x154>)
 80025f2:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 80025f4:	4b2a      	ldr	r3, [pc, #168]	; (80026a0 <configAnalogPin+0x150>)
 80025f6:	2205      	movs	r2, #5
 80025f8:	711a      	strb	r2, [r3, #4]

		break;
 80025fa:	e046      	b.n	800268a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_6: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 80025fc:	4b28      	ldr	r3, [pc, #160]	; (80026a0 <configAnalogPin+0x150>)
 80025fe:	4a29      	ldr	r2, [pc, #164]	; (80026a4 <configAnalogPin+0x154>)
 8002600:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_6;
 8002602:	4b27      	ldr	r3, [pc, #156]	; (80026a0 <configAnalogPin+0x150>)
 8002604:	2206      	movs	r2, #6
 8002606:	711a      	strb	r2, [r3, #4]

		break;
 8002608:	e03f      	b.n	800268a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_7: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 800260a:	4b25      	ldr	r3, [pc, #148]	; (80026a0 <configAnalogPin+0x150>)
 800260c:	4a25      	ldr	r2, [pc, #148]	; (80026a4 <configAnalogPin+0x154>)
 800260e:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_7;
 8002610:	4b23      	ldr	r3, [pc, #140]	; (80026a0 <configAnalogPin+0x150>)
 8002612:	2207      	movs	r2, #7
 8002614:	711a      	strb	r2, [r3, #4]

		break;
 8002616:	e038      	b.n	800268a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_8: {
		//Es el pin PB0
		handlerAdcPin.pGPIOx 						= GPIOB;
 8002618:	4b21      	ldr	r3, [pc, #132]	; (80026a0 <configAnalogPin+0x150>)
 800261a:	4a23      	ldr	r2, [pc, #140]	; (80026a8 <configAnalogPin+0x158>)
 800261c:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 800261e:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <configAnalogPin+0x150>)
 8002620:	2200      	movs	r2, #0
 8002622:	711a      	strb	r2, [r3, #4]
		break;
 8002624:	e031      	b.n	800268a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_9: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOB;
 8002626:	4b1e      	ldr	r3, [pc, #120]	; (80026a0 <configAnalogPin+0x150>)
 8002628:	4a1f      	ldr	r2, [pc, #124]	; (80026a8 <configAnalogPin+0x158>)
 800262a:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 800262c:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <configAnalogPin+0x150>)
 800262e:	2201      	movs	r2, #1
 8002630:	711a      	strb	r2, [r3, #4]

		break;
 8002632:	e02a      	b.n	800268a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_10: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8002634:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <configAnalogPin+0x150>)
 8002636:	4a1d      	ldr	r2, [pc, #116]	; (80026ac <configAnalogPin+0x15c>)
 8002638:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 800263a:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <configAnalogPin+0x150>)
 800263c:	2200      	movs	r2, #0
 800263e:	711a      	strb	r2, [r3, #4]

		break;
 8002640:	e023      	b.n	800268a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_11: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8002642:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <configAnalogPin+0x150>)
 8002644:	4a19      	ldr	r2, [pc, #100]	; (80026ac <configAnalogPin+0x15c>)
 8002646:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8002648:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <configAnalogPin+0x150>)
 800264a:	2201      	movs	r2, #1
 800264c:	711a      	strb	r2, [r3, #4]

		break;
 800264e:	e01c      	b.n	800268a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_12: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <configAnalogPin+0x150>)
 8002652:	4a16      	ldr	r2, [pc, #88]	; (80026ac <configAnalogPin+0x15c>)
 8002654:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8002656:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <configAnalogPin+0x150>)
 8002658:	2202      	movs	r2, #2
 800265a:	711a      	strb	r2, [r3, #4]

		break;
 800265c:	e015      	b.n	800268a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_13: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <configAnalogPin+0x150>)
 8002660:	4a12      	ldr	r2, [pc, #72]	; (80026ac <configAnalogPin+0x15c>)
 8002662:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8002664:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <configAnalogPin+0x150>)
 8002666:	2203      	movs	r2, #3
 8002668:	711a      	strb	r2, [r3, #4]

		break;
 800266a:	e00e      	b.n	800268a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_14: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <configAnalogPin+0x150>)
 800266e:	4a0f      	ldr	r2, [pc, #60]	; (80026ac <configAnalogPin+0x15c>)
 8002670:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <configAnalogPin+0x150>)
 8002674:	2204      	movs	r2, #4
 8002676:	711a      	strb	r2, [r3, #4]

		break;
 8002678:	e007      	b.n	800268a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_15: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 800267a:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <configAnalogPin+0x150>)
 800267c:	4a0b      	ldr	r2, [pc, #44]	; (80026ac <configAnalogPin+0x15c>)
 800267e:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8002680:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <configAnalogPin+0x150>)
 8002682:	2205      	movs	r2, #5
 8002684:	711a      	strb	r2, [r3, #4]

		break;
 8002686:	e000      	b.n	800268a <configAnalogPin+0x13a>
	}
	default: {
		break;
 8002688:	bf00      	nop

	}
	/*
	 * Se carga la información de cada pin configurado sobre el GPIO.
	 */
	handlerAdcPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 800268a:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <configAnalogPin+0x150>)
 800268c:	2203      	movs	r2, #3
 800268e:	715a      	strb	r2, [r3, #5]
	GPIO_Config(&handlerAdcPin);
 8002690:	4803      	ldr	r0, [pc, #12]	; (80026a0 <configAnalogPin+0x150>)
 8002692:	f7ff f9bb 	bl	8001a0c <GPIO_Config>
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	2000046c 	.word	0x2000046c
 80026a4:	40020000 	.word	0x40020000
 80026a8:	40020400 	.word	0x40020400
 80026ac:	40020800 	.word	0x40020800

080026b0 <adcConfigEvents>:
 * de la conversión adc. Los bits correspondientes a EXTSEL jerarquizan los
 * eventos externos dependiendo del canal que se quiera utilizar en cada uno
 * de los timmers disponibles para este propósito. Ver página 231 del reference
 * manual.
 */
void adcConfigEvents(ADC_Config_t *adcConfig) {
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]

	// Trigger detection on the rising edge, se toman los flancos
	// de bajada para los trigger externos
	ADC1->CR2 |= ADC_CR2_EXTEN_0;
 80026b8:	4b42      	ldr	r3, [pc, #264]	; (80027c4 <adcConfigEvents+0x114>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	4a41      	ldr	r2, [pc, #260]	; (80027c4 <adcConfigEvents+0x114>)
 80026be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c2:	6093      	str	r3, [r2, #8]

	if (adcConfig->AdcEventType == TIMER_ADC_EVENT) {
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	7a1b      	ldrb	r3, [r3, #8]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d16f      	bne.n	80027ac <adcConfigEvents+0xfc>
		switch (adcConfig->AdcChannelEvent) {
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	7a5b      	ldrb	r3, [r3, #9]
 80026d0:	2b0a      	cmp	r3, #10
 80026d2:	d864      	bhi.n	800279e <adcConfigEvents+0xee>
 80026d4:	a201      	add	r2, pc, #4	; (adr r2, 80026dc <adcConfigEvents+0x2c>)
 80026d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026da:	bf00      	nop
 80026dc:	08002709 	.word	0x08002709
 80026e0:	08002713 	.word	0x08002713
 80026e4:	08002721 	.word	0x08002721
 80026e8:	0800272f 	.word	0x0800272f
 80026ec:	0800273d 	.word	0x0800273d
 80026f0:	0800274b 	.word	0x0800274b
 80026f4:	08002759 	.word	0x08002759
 80026f8:	08002767 	.word	0x08002767
 80026fc:	08002775 	.word	0x08002775
 8002700:	08002783 	.word	0x08002783
 8002704:	08002791 	.word	0x08002791

		case TIM1_CH1: {
			// Evento TIM1 CC1 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x0 << ADC_CR2_EXTSEL_Pos);
 8002708:	4b2e      	ldr	r3, [pc, #184]	; (80027c4 <adcConfigEvents+0x114>)
 800270a:	4a2e      	ldr	r2, [pc, #184]	; (80027c4 <adcConfigEvents+0x114>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	6093      	str	r3, [r2, #8]
			break;
 8002710:	e053      	b.n	80027ba <adcConfigEvents+0x10a>
		}

		case TIM1_CH2: {
			// Evento TIM1 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x1 << ADC_CR2_EXTSEL_Pos);
 8002712:	4b2c      	ldr	r3, [pc, #176]	; (80027c4 <adcConfigEvents+0x114>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	4a2b      	ldr	r2, [pc, #172]	; (80027c4 <adcConfigEvents+0x114>)
 8002718:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800271c:	6093      	str	r3, [r2, #8]
			break;
 800271e:	e04c      	b.n	80027ba <adcConfigEvents+0x10a>
		}

		case TIM1_CH3: {
			// Evento TIM1 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x2 << ADC_CR2_EXTSEL_Pos);
 8002720:	4b28      	ldr	r3, [pc, #160]	; (80027c4 <adcConfigEvents+0x114>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	4a27      	ldr	r2, [pc, #156]	; (80027c4 <adcConfigEvents+0x114>)
 8002726:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800272a:	6093      	str	r3, [r2, #8]
			break;
 800272c:	e045      	b.n	80027ba <adcConfigEvents+0x10a>
		}

		case TIM2_CH2: {
			// Evento TIM2 CC2 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x3 << ADC_CR2_EXTSEL_Pos);
 800272e:	4b25      	ldr	r3, [pc, #148]	; (80027c4 <adcConfigEvents+0x114>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	4a24      	ldr	r2, [pc, #144]	; (80027c4 <adcConfigEvents+0x114>)
 8002734:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8002738:	6093      	str	r3, [r2, #8]
			break;
 800273a:	e03e      	b.n	80027ba <adcConfigEvents+0x10a>
		}

		case TIM2_CH3: {
			// Evento TIM2 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x4 << ADC_CR2_EXTSEL_Pos);
 800273c:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <adcConfigEvents+0x114>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	4a20      	ldr	r2, [pc, #128]	; (80027c4 <adcConfigEvents+0x114>)
 8002742:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002746:	6093      	str	r3, [r2, #8]
			break;
 8002748:	e037      	b.n	80027ba <adcConfigEvents+0x10a>
		}

		case TIM2_CH4: {
			// Evento TIM2 CC4 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x5 << ADC_CR2_EXTSEL_Pos);
 800274a:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <adcConfigEvents+0x114>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	4a1d      	ldr	r2, [pc, #116]	; (80027c4 <adcConfigEvents+0x114>)
 8002750:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8002754:	6093      	str	r3, [r2, #8]
			break;
 8002756:	e030      	b.n	80027ba <adcConfigEvents+0x10a>
		}

		case TIM3_CH1: {
			// Evento TIM3 CC1 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x7 << ADC_CR2_EXTSEL_Pos);
 8002758:	4b1a      	ldr	r3, [pc, #104]	; (80027c4 <adcConfigEvents+0x114>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	4a19      	ldr	r2, [pc, #100]	; (80027c4 <adcConfigEvents+0x114>)
 800275e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002762:	6093      	str	r3, [r2, #8]
			break;
 8002764:	e029      	b.n	80027ba <adcConfigEvents+0x10a>
		}

		case TIM4_CH4: {
			// Evento TIM4 CC4 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x9 << ADC_CR2_EXTSEL_Pos);
 8002766:	4b17      	ldr	r3, [pc, #92]	; (80027c4 <adcConfigEvents+0x114>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	4a16      	ldr	r2, [pc, #88]	; (80027c4 <adcConfigEvents+0x114>)
 800276c:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
 8002770:	6093      	str	r3, [r2, #8]
			break;
 8002772:	e022      	b.n	80027ba <adcConfigEvents+0x10a>
		}

		case TIM5_CH1: {
			// Evento TIM5 CC1 event para lanzar la conversion ADC
			ADC1->CR2 |= (0xA << ADC_CR2_EXTSEL_Pos);
 8002774:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <adcConfigEvents+0x114>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	4a12      	ldr	r2, [pc, #72]	; (80027c4 <adcConfigEvents+0x114>)
 800277a:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
 800277e:	6093      	str	r3, [r2, #8]
			break;
 8002780:	e01b      	b.n	80027ba <adcConfigEvents+0x10a>
		}

		case TIM5_CH2: {
			// Evento TIM5 CC2 event para lanzar la conversion ADC
			ADC1->CR2 |= (0xB << ADC_CR2_EXTSEL_Pos);
 8002782:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <adcConfigEvents+0x114>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	4a0f      	ldr	r2, [pc, #60]	; (80027c4 <adcConfigEvents+0x114>)
 8002788:	f043 6330 	orr.w	r3, r3, #184549376	; 0xb000000
 800278c:	6093      	str	r3, [r2, #8]
			break;
 800278e:	e014      	b.n	80027ba <adcConfigEvents+0x10a>
		}

		case TIM5_CH3: {
			// Evento TIM5 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0xC << ADC_CR2_EXTSEL_Pos);
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <adcConfigEvents+0x114>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	4a0b      	ldr	r2, [pc, #44]	; (80027c4 <adcConfigEvents+0x114>)
 8002796:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 800279a:	6093      	str	r3, [r2, #8]
			break;
 800279c:	e00d      	b.n	80027ba <adcConfigEvents+0x10a>
		}

		default: {
			// 1100: Timer 5 CC3 event
			ADC1->CR2 |= (0xC << ADC_CR2_EXTSEL_Pos);
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <adcConfigEvents+0x114>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	4a08      	ldr	r2, [pc, #32]	; (80027c4 <adcConfigEvents+0x114>)
 80027a4:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 80027a8:	6093      	str	r3, [r2, #8]
			break;
 80027aa:	e006      	b.n	80027ba <adcConfigEvents+0x10a>

		}
	}

	else {
		ADC1->CR2 |= (0xF << ADC_CR2_EXTSEL_Pos);
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <adcConfigEvents+0x114>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	4a04      	ldr	r2, [pc, #16]	; (80027c4 <adcConfigEvents+0x114>)
 80027b2:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80027b6:	6093      	str	r3, [r2, #8]
	}
}
 80027b8:	bf00      	nop
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr
 80027c4:	40012000 	.word	0x40012000

080027c8 <adcMultiChannel>:
 * para realizar varias conversiones ADC. La función recibe como parámetros
 * la configuración del ADC y el número de conversiones que se requieren,
 * que para efectos prácticos es el número de canales sobre los cuales
 * se van a hacer las conversiones.
 */
void adcMultiChannel(ADC_Config_t *adcConfig, uint8_t numberOfConversion){
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	70fb      	strb	r3, [r7, #3]
	for(counter5 = 0; counter5<numberOfConversion; counter5++){
 80027d4:	4b8b      	ldr	r3, [pc, #556]	; (8002a04 <adcMultiChannel+0x23c>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
 80027da:	e00e      	b.n	80027fa <adcMultiChannel+0x32>
		/* 1. Configuramos el PinX para que cumpla la función de canal análogo deseado. */
		configAnalogPin(adcConfig->adcMultiChannel[counter5]);
 80027dc:	4b89      	ldr	r3, [pc, #548]	; (8002a04 <adcMultiChannel+0x23c>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4413      	add	r3, r2
 80027e6:	7a9b      	ldrb	r3, [r3, #10]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff feb1 	bl	8002550 <configAnalogPin>
	for(counter5 = 0; counter5<numberOfConversion; counter5++){
 80027ee:	4b85      	ldr	r3, [pc, #532]	; (8002a04 <adcMultiChannel+0x23c>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	3301      	adds	r3, #1
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	4b83      	ldr	r3, [pc, #524]	; (8002a04 <adcMultiChannel+0x23c>)
 80027f8:	701a      	strb	r2, [r3, #0]
 80027fa:	4b82      	ldr	r3, [pc, #520]	; (8002a04 <adcMultiChannel+0x23c>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	78fa      	ldrb	r2, [r7, #3]
 8002800:	429a      	cmp	r2, r3
 8002802:	d8eb      	bhi.n	80027dc <adcMultiChannel+0x14>
	}

	/* 2. Activamos la señal de reloj para el periférico ADC1 (bus APB2)*/
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8002804:	4b80      	ldr	r3, [pc, #512]	; (8002a08 <adcMultiChannel+0x240>)
 8002806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002808:	4a7f      	ldr	r2, [pc, #508]	; (8002a08 <adcMultiChannel+0x240>)
 800280a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280e:	6453      	str	r3, [r2, #68]	; 0x44

	// Limpiamos los registros antes de comenzar a configurar
	ADC1->CR1 = 0;
 8002810:	4b7e      	ldr	r3, [pc, #504]	; (8002a0c <adcMultiChannel+0x244>)
 8002812:	2200      	movs	r2, #0
 8002814:	605a      	str	r2, [r3, #4]
	ADC1->CR2 = 0;
 8002816:	4b7d      	ldr	r3, [pc, #500]	; (8002a0c <adcMultiChannel+0x244>)
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]

	/* Comenzamos la configuración del ADC1 */
	/* 3. Resolución del ADC */
	// Preferible utilizar la conversión a 12 bits para usar
	// la máxima capacidad del microcontrolador.
	switch (adcConfig->resolution) {
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	785b      	ldrb	r3, [r3, #1]
 8002820:	2b03      	cmp	r3, #3
 8002822:	d83f      	bhi.n	80028a4 <adcMultiChannel+0xdc>
 8002824:	a201      	add	r2, pc, #4	; (adr r2, 800282c <adcMultiChannel+0x64>)
 8002826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282a:	bf00      	nop
 800282c:	0800283d 	.word	0x0800283d
 8002830:	08002857 	.word	0x08002857
 8002834:	08002871 	.word	0x08002871
 8002838:	0800288b 	.word	0x0800288b
	case ADC_RESOLUTION_12_BIT: {

		ADC1->CR1 &= ~ADC_CR1_RES_0;
 800283c:	4b73      	ldr	r3, [pc, #460]	; (8002a0c <adcMultiChannel+0x244>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	4a72      	ldr	r2, [pc, #456]	; (8002a0c <adcMultiChannel+0x244>)
 8002842:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002846:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_1;
 8002848:	4b70      	ldr	r3, [pc, #448]	; (8002a0c <adcMultiChannel+0x244>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	4a6f      	ldr	r2, [pc, #444]	; (8002a0c <adcMultiChannel+0x244>)
 800284e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002852:	6053      	str	r3, [r2, #4]
		break;
 8002854:	e027      	b.n	80028a6 <adcMultiChannel+0xde>
	}

	case ADC_RESOLUTION_10_BIT: {

		ADC1->CR1 |= ADC_CR1_RES_0;
 8002856:	4b6d      	ldr	r3, [pc, #436]	; (8002a0c <adcMultiChannel+0x244>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	4a6c      	ldr	r2, [pc, #432]	; (8002a0c <adcMultiChannel+0x244>)
 800285c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002860:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_1;
 8002862:	4b6a      	ldr	r3, [pc, #424]	; (8002a0c <adcMultiChannel+0x244>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	4a69      	ldr	r2, [pc, #420]	; (8002a0c <adcMultiChannel+0x244>)
 8002868:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800286c:	6053      	str	r3, [r2, #4]
		break;
 800286e:	e01a      	b.n	80028a6 <adcMultiChannel+0xde>
	}

	case ADC_RESOLUTION_8_BIT: {

		ADC1->CR1 |= ADC_CR1_RES_1;
 8002870:	4b66      	ldr	r3, [pc, #408]	; (8002a0c <adcMultiChannel+0x244>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	4a65      	ldr	r2, [pc, #404]	; (8002a0c <adcMultiChannel+0x244>)
 8002876:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800287a:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_0;
 800287c:	4b63      	ldr	r3, [pc, #396]	; (8002a0c <adcMultiChannel+0x244>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a62      	ldr	r2, [pc, #392]	; (8002a0c <adcMultiChannel+0x244>)
 8002882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002886:	6053      	str	r3, [r2, #4]
		break;
 8002888:	e00d      	b.n	80028a6 <adcMultiChannel+0xde>
	}

	case ADC_RESOLUTION_6_BIT: {
		ADC1->CR1 |= ADC_CR1_RES_0;
 800288a:	4b60      	ldr	r3, [pc, #384]	; (8002a0c <adcMultiChannel+0x244>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	4a5f      	ldr	r2, [pc, #380]	; (8002a0c <adcMultiChannel+0x244>)
 8002890:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002894:	6053      	str	r3, [r2, #4]
		ADC1->CR1 |= ADC_CR1_RES_1;
 8002896:	4b5d      	ldr	r3, [pc, #372]	; (8002a0c <adcMultiChannel+0x244>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4a5c      	ldr	r2, [pc, #368]	; (8002a0c <adcMultiChannel+0x244>)
 800289c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028a0:	6053      	str	r3, [r2, #4]
		break;
 80028a2:	e000      	b.n	80028a6 <adcMultiChannel+0xde>
	}

	default: {
		break;
 80028a4:	bf00      	nop
	}
	}

	/* 4. Configuramos el modo Scan como ACTIVADO */
	ADC1->CR1 |= ADC_CR1_SCAN;
 80028a6:	4b59      	ldr	r3, [pc, #356]	; (8002a0c <adcMultiChannel+0x244>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	4a58      	ldr	r2, [pc, #352]	; (8002a0c <adcMultiChannel+0x244>)
 80028ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b0:	6053      	str	r3, [r2, #4]
	// Se configura además el EOCS end of conversion.
	ADC1->CR2 |= ADC_CR2_EOCS;
 80028b2:	4b56      	ldr	r3, [pc, #344]	; (8002a0c <adcMultiChannel+0x244>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	4a55      	ldr	r2, [pc, #340]	; (8002a0c <adcMultiChannel+0x244>)
 80028b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028bc:	6093      	str	r3, [r2, #8]

	/* 5. Configuramos la alineación de los datos (derecha o izquierda) */
	if (adcConfig->dataAlignment == ADC_ALIGNMENT_RIGHT) {
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	791b      	ldrb	r3, [r3, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d106      	bne.n	80028d4 <adcMultiChannel+0x10c>
		// Alineación a la derecha (esta es la forma "natural")
		ADC1->CR2 &= ~ADC_CR2_ALIGN;
 80028c6:	4b51      	ldr	r3, [pc, #324]	; (8002a0c <adcMultiChannel+0x244>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	4a50      	ldr	r2, [pc, #320]	; (8002a0c <adcMultiChannel+0x244>)
 80028cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028d0:	6093      	str	r3, [r2, #8]
 80028d2:	e005      	b.n	80028e0 <adcMultiChannel+0x118>
	} else {
		// Alineación a la izquierda (para algunos cálculos matemáticos)
		ADC1->CR2 |= ADC_CR2_ALIGN;
 80028d4:	4b4d      	ldr	r3, [pc, #308]	; (8002a0c <adcMultiChannel+0x244>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	4a4c      	ldr	r2, [pc, #304]	; (8002a0c <adcMultiChannel+0x244>)
 80028da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028de:	6093      	str	r3, [r2, #8]
	}

	/* 6. Desactivamos el "continuos mode" */
	ADC1->CR2 &= ~ADC_CR2_CONT;
 80028e0:	4b4a      	ldr	r3, [pc, #296]	; (8002a0c <adcMultiChannel+0x244>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	4a49      	ldr	r2, [pc, #292]	; (8002a0c <adcMultiChannel+0x244>)
 80028e6:	f023 0302 	bic.w	r3, r3, #2
 80028ea:	6093      	str	r3, [r2, #8]

	/* 7. Acá se debería configurar el sampling...*/

	for(counter5 = 0; counter5 < numberOfConversion; counter5++){
 80028ec:	4b45      	ldr	r3, [pc, #276]	; (8002a04 <adcMultiChannel+0x23c>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]
 80028f2:	e037      	b.n	8002964 <adcMultiChannel+0x19c>
		if (adcConfig->adcMultiChannel[counter5] <= ADC_CHANNEL_9) {
 80028f4:	4b43      	ldr	r3, [pc, #268]	; (8002a04 <adcMultiChannel+0x23c>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4413      	add	r3, r2
 80028fe:	7a9b      	ldrb	r3, [r3, #10]
 8002900:	2b09      	cmp	r3, #9
 8002902:	d814      	bhi.n	800292e <adcMultiChannel+0x166>
			// Acá se establecen la cantidad de ciclos para cada canal (0 al 9)
			ADC1->SMPR2 |= (adcConfig->samplingPeriod << (3 * (adcConfig->adcMultiChannel[counter5])));
 8002904:	4b41      	ldr	r3, [pc, #260]	; (8002a0c <adcMultiChannel+0x244>)
 8002906:	691a      	ldr	r2, [r3, #16]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	885b      	ldrh	r3, [r3, #2]
 800290c:	4618      	mov	r0, r3
 800290e:	4b3d      	ldr	r3, [pc, #244]	; (8002a04 <adcMultiChannel+0x23c>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	4619      	mov	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	440b      	add	r3, r1
 8002918:	7a9b      	ldrb	r3, [r3, #10]
 800291a:	4619      	mov	r1, r3
 800291c:	460b      	mov	r3, r1
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	440b      	add	r3, r1
 8002922:	fa00 f303 	lsl.w	r3, r0, r3
 8002926:	4939      	ldr	r1, [pc, #228]	; (8002a0c <adcMultiChannel+0x244>)
 8002928:	4313      	orrs	r3, r2
 800292a:	610b      	str	r3, [r1, #16]
 800292c:	e014      	b.n	8002958 <adcMultiChannel+0x190>

		} else {
			// Acá se establecen la cantidad de ciclos para cada canal (10 al 18)
			ADC1->SMPR1 |= (adcConfig->samplingPeriod << (3 * (adcConfig->adcMultiChannel[counter5] - 10)));
 800292e:	4b37      	ldr	r3, [pc, #220]	; (8002a0c <adcMultiChannel+0x244>)
 8002930:	68d9      	ldr	r1, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	885b      	ldrh	r3, [r3, #2]
 8002936:	4618      	mov	r0, r3
 8002938:	4b32      	ldr	r3, [pc, #200]	; (8002a04 <adcMultiChannel+0x23c>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	461a      	mov	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4413      	add	r3, r2
 8002942:	7a9b      	ldrb	r3, [r3, #10]
 8002944:	f1a3 020a 	sub.w	r2, r3, #10
 8002948:	4613      	mov	r3, r2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	4413      	add	r3, r2
 800294e:	fa00 f303 	lsl.w	r3, r0, r3
 8002952:	4a2e      	ldr	r2, [pc, #184]	; (8002a0c <adcMultiChannel+0x244>)
 8002954:	430b      	orrs	r3, r1
 8002956:	60d3      	str	r3, [r2, #12]
	for(counter5 = 0; counter5 < numberOfConversion; counter5++){
 8002958:	4b2a      	ldr	r3, [pc, #168]	; (8002a04 <adcMultiChannel+0x23c>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	3301      	adds	r3, #1
 800295e:	b2da      	uxtb	r2, r3
 8002960:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <adcMultiChannel+0x23c>)
 8002962:	701a      	strb	r2, [r3, #0]
 8002964:	4b27      	ldr	r3, [pc, #156]	; (8002a04 <adcMultiChannel+0x23c>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	78fa      	ldrb	r2, [r7, #3]
 800296a:	429a      	cmp	r2, r3
 800296c:	d8c2      	bhi.n	80028f4 <adcMultiChannel+0x12c>
		}
	}

	/* 8. Configuramos la secuencia y cuantos elementos hay en la secuencia */
	// Al hacerlo todo 0, estamos seleccionando solo 1 elemento en el conteo de la secuencia
	ADC1->SQR1 = (numberOfConversion - 1) << ADC_SQR1_L_Pos;
 800296e:	78fb      	ldrb	r3, [r7, #3]
 8002970:	3b01      	subs	r3, #1
 8002972:	051a      	lsls	r2, r3, #20
 8002974:	4b25      	ldr	r3, [pc, #148]	; (8002a0c <adcMultiChannel+0x244>)
 8002976:	62da      	str	r2, [r3, #44]	; 0x2c

	// Asignamos el orden de la conversión dependiendo del canal en que
	// se esté haciendo, de allí la variación en la agrupación de los
	// registros.
	for(counter5 = 0; counter5 < numberOfConversion; counter5++){
 8002978:	4b22      	ldr	r3, [pc, #136]	; (8002a04 <adcMultiChannel+0x23c>)
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]
 800297e:	e06a      	b.n	8002a56 <adcMultiChannel+0x28e>
		if(adcConfig->adcMultiChannel[counter5] <= 6){
 8002980:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <adcMultiChannel+0x23c>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	461a      	mov	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	7a9b      	ldrb	r3, [r3, #10]
 800298c:	2b06      	cmp	r3, #6
 800298e:	d814      	bhi.n	80029ba <adcMultiChannel+0x1f2>
			ADC1->SQR3 |= (adcConfig->adcMultiChannel[counter5] << (5 * counter5));
 8002990:	4b1e      	ldr	r3, [pc, #120]	; (8002a0c <adcMultiChannel+0x244>)
 8002992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002994:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <adcMultiChannel+0x23c>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	4619      	mov	r1, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	440b      	add	r3, r1
 800299e:	7a9b      	ldrb	r3, [r3, #10]
 80029a0:	4618      	mov	r0, r3
 80029a2:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <adcMultiChannel+0x23c>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	4619      	mov	r1, r3
 80029a8:	460b      	mov	r3, r1
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	fa00 f303 	lsl.w	r3, r0, r3
 80029b2:	4916      	ldr	r1, [pc, #88]	; (8002a0c <adcMultiChannel+0x244>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	634b      	str	r3, [r1, #52]	; 0x34
 80029b8:	e047      	b.n	8002a4a <adcMultiChannel+0x282>
		}
		else if(adcConfig->adcMultiChannel[counter5] > 6 && adcConfig->adcMultiChannel[counter5] <= 12){
 80029ba:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <adcMultiChannel+0x23c>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4413      	add	r3, r2
 80029c4:	7a9b      	ldrb	r3, [r3, #10]
 80029c6:	2b06      	cmp	r3, #6
 80029c8:	d922      	bls.n	8002a10 <adcMultiChannel+0x248>
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <adcMultiChannel+0x23c>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4413      	add	r3, r2
 80029d4:	7a9b      	ldrb	r3, [r3, #10]
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	d81a      	bhi.n	8002a10 <adcMultiChannel+0x248>
			ADC1->SQR2 |= (adcConfig->adcMultiChannel[counter5] << (5 * (counter5 - 7)));
 80029da:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <adcMultiChannel+0x244>)
 80029dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029de:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <adcMultiChannel+0x23c>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4413      	add	r3, r2
 80029e8:	7a9b      	ldrb	r3, [r3, #10]
 80029ea:	4618      	mov	r0, r3
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <adcMultiChannel+0x23c>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	1fda      	subs	r2, r3, #7
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	fa00 f303 	lsl.w	r3, r0, r3
 80029fc:	4a03      	ldr	r2, [pc, #12]	; (8002a0c <adcMultiChannel+0x244>)
 80029fe:	430b      	orrs	r3, r1
 8002a00:	6313      	str	r3, [r2, #48]	; 0x30
 8002a02:	e022      	b.n	8002a4a <adcMultiChannel+0x282>
 8002a04:	20000468 	.word	0x20000468
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40012000 	.word	0x40012000
		}
		else if(adcConfig->adcMultiChannel[counter5] > 12){
 8002a10:	4b24      	ldr	r3, [pc, #144]	; (8002aa4 <adcMultiChannel+0x2dc>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4413      	add	r3, r2
 8002a1a:	7a9b      	ldrb	r3, [r3, #10]
 8002a1c:	2b0c      	cmp	r3, #12
 8002a1e:	d914      	bls.n	8002a4a <adcMultiChannel+0x282>
			ADC1->SQR1 |= (adcConfig->adcMultiChannel[counter5] << (5 * (counter5 - 13)));
 8002a20:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <adcMultiChannel+0x2e0>)
 8002a22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a24:	4b1f      	ldr	r3, [pc, #124]	; (8002aa4 <adcMultiChannel+0x2dc>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	7a9b      	ldrb	r3, [r3, #10]
 8002a30:	4618      	mov	r0, r3
 8002a32:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <adcMultiChannel+0x2dc>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	f1a3 020d 	sub.w	r2, r3, #13
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	fa00 f303 	lsl.w	r3, r0, r3
 8002a44:	4a18      	ldr	r2, [pc, #96]	; (8002aa8 <adcMultiChannel+0x2e0>)
 8002a46:	430b      	orrs	r3, r1
 8002a48:	62d3      	str	r3, [r2, #44]	; 0x2c
	for(counter5 = 0; counter5 < numberOfConversion; counter5++){
 8002a4a:	4b16      	ldr	r3, [pc, #88]	; (8002aa4 <adcMultiChannel+0x2dc>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <adcMultiChannel+0x2dc>)
 8002a54:	701a      	strb	r2, [r3, #0]
 8002a56:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <adcMultiChannel+0x2dc>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	78fa      	ldrb	r2, [r7, #3]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d88f      	bhi.n	8002980 <adcMultiChannel+0x1b8>
		}
	}

	/* 9. Configuramos el preescaler del ADC en 2:1 (el mas rápido que se puede tener */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 8002a60:	4b12      	ldr	r3, [pc, #72]	; (8002aac <adcMultiChannel+0x2e4>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	4a11      	ldr	r2, [pc, #68]	; (8002aac <adcMultiChannel+0x2e4>)
 8002a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a6a:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a6c:	b672      	cpsid	i
}
 8002a6e:	bf00      	nop

	/* 10. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 11. Activamos la interrupción debida a la finalización de una conversión EOC (CR1)*/
	ADC1->CR1 |= ADC_CR1_EOCIE;
 8002a70:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <adcMultiChannel+0x2e0>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4a0c      	ldr	r2, [pc, #48]	; (8002aa8 <adcMultiChannel+0x2e0>)
 8002a76:	f043 0320 	orr.w	r3, r3, #32
 8002a7a:	6053      	str	r3, [r2, #4]

	/* 11a. Matriculamos la interrupción en el NVIC*/
	__NVIC_EnableIRQ(ADC_IRQn);
 8002a7c:	2012      	movs	r0, #18
 8002a7e:	f7ff fd01 	bl	8002484 <__NVIC_EnableIRQ>

	/* 11b. Configuramos la prioridad para la interrupción ADC */
	__NVIC_SetPriority(ADC_IRQn, 1);
 8002a82:	2101      	movs	r1, #1
 8002a84:	2012      	movs	r0, #18
 8002a86:	f7ff fd19 	bl	80024bc <__NVIC_SetPriority>

	/* 12. Activamos el modulo ADC */
	ADC1->CR2 |= ADC_CR2_ADON;
 8002a8a:	4b07      	ldr	r3, [pc, #28]	; (8002aa8 <adcMultiChannel+0x2e0>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	4a06      	ldr	r2, [pc, #24]	; (8002aa8 <adcMultiChannel+0x2e0>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a96:	b662      	cpsie	i
}
 8002a98:	bf00      	nop

	/* 13. Activamos las interrupciones globales */
	__enable_irq();

}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000468 	.word	0x20000468
 8002aa8:	40012000 	.word	0x40012000
 8002aac:	40012300 	.word	0x40012300

08002ab0 <getConfigPLL>:
	RCC->CR |= RCC_CR_HSITRIM_3;

}// FIN DE LA FUNCIÓN DE CONFIGURACIÓN PARA DISTINTAS FRECUENCIAS.

// Función para saber el estado del PLL y así poder caracterizar lo demás.
uint32_t getConfigPLL(void){
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
	// Se buscan los valores que están definiendo los valores actuales del reloj PLL
	uint32_t PLLN = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <getConfigPLL+0x3c>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	099b      	lsrs	r3, r3, #6
 8002abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac0:	60fb      	str	r3, [r7, #12]
	uint32_t PLLM = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos;
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <getConfigPLL+0x3c>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aca:	60bb      	str	r3, [r7, #8]
	// Se hace la operación para saber el valor actual del reloj. (Asume PLLP =2)
	uint32_t clockMicro = (HSI_VALUE / PLLM) * PLLN / 2;
 8002acc:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <getConfigPLL+0x40>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	fb02 f303 	mul.w	r3, r2, r3
 8002adc:	085b      	lsrs	r3, r3, #1
 8002ade:	607b      	str	r3, [r7, #4]
	return clockMicro;
 8002ae0:	687b      	ldr	r3, [r7, #4]

}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr
 8002aec:	40023800 	.word	0x40023800
 8002af0:	20000040 	.word	0x20000040

08002af4 <__libc_init_array>:
 8002af4:	b570      	push	{r4, r5, r6, lr}
 8002af6:	4d0d      	ldr	r5, [pc, #52]	; (8002b2c <__libc_init_array+0x38>)
 8002af8:	4c0d      	ldr	r4, [pc, #52]	; (8002b30 <__libc_init_array+0x3c>)
 8002afa:	1b64      	subs	r4, r4, r5
 8002afc:	10a4      	asrs	r4, r4, #2
 8002afe:	2600      	movs	r6, #0
 8002b00:	42a6      	cmp	r6, r4
 8002b02:	d109      	bne.n	8002b18 <__libc_init_array+0x24>
 8002b04:	4d0b      	ldr	r5, [pc, #44]	; (8002b34 <__libc_init_array+0x40>)
 8002b06:	4c0c      	ldr	r4, [pc, #48]	; (8002b38 <__libc_init_array+0x44>)
 8002b08:	f004 fc8a 	bl	8007420 <_init>
 8002b0c:	1b64      	subs	r4, r4, r5
 8002b0e:	10a4      	asrs	r4, r4, #2
 8002b10:	2600      	movs	r6, #0
 8002b12:	42a6      	cmp	r6, r4
 8002b14:	d105      	bne.n	8002b22 <__libc_init_array+0x2e>
 8002b16:	bd70      	pop	{r4, r5, r6, pc}
 8002b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b1c:	4798      	blx	r3
 8002b1e:	3601      	adds	r6, #1
 8002b20:	e7ee      	b.n	8002b00 <__libc_init_array+0xc>
 8002b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b26:	4798      	blx	r3
 8002b28:	3601      	adds	r6, #1
 8002b2a:	e7f2      	b.n	8002b12 <__libc_init_array+0x1e>
 8002b2c:	08007904 	.word	0x08007904
 8002b30:	08007904 	.word	0x08007904
 8002b34:	08007904 	.word	0x08007904
 8002b38:	08007908 	.word	0x08007908

08002b3c <memset>:
 8002b3c:	4402      	add	r2, r0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d100      	bne.n	8002b46 <memset+0xa>
 8002b44:	4770      	bx	lr
 8002b46:	f803 1b01 	strb.w	r1, [r3], #1
 8002b4a:	e7f9      	b.n	8002b40 <memset+0x4>

08002b4c <__cvt>:
 8002b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b50:	b088      	sub	sp, #32
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	461f      	mov	r7, r3
 8002b56:	4614      	mov	r4, r2
 8002b58:	bfb8      	it	lt
 8002b5a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002b5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002b60:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002b62:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002b66:	bfb6      	itet	lt
 8002b68:	461f      	movlt	r7, r3
 8002b6a:	2300      	movge	r3, #0
 8002b6c:	232d      	movlt	r3, #45	; 0x2d
 8002b6e:	7013      	strb	r3, [r2, #0]
 8002b70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002b72:	f023 0820 	bic.w	r8, r3, #32
 8002b76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002b7a:	d005      	beq.n	8002b88 <__cvt+0x3c>
 8002b7c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002b80:	d100      	bne.n	8002b84 <__cvt+0x38>
 8002b82:	3501      	adds	r5, #1
 8002b84:	2302      	movs	r3, #2
 8002b86:	e000      	b.n	8002b8a <__cvt+0x3e>
 8002b88:	2303      	movs	r3, #3
 8002b8a:	aa07      	add	r2, sp, #28
 8002b8c:	9204      	str	r2, [sp, #16]
 8002b8e:	aa06      	add	r2, sp, #24
 8002b90:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002b94:	e9cd 3500 	strd	r3, r5, [sp]
 8002b98:	4622      	mov	r2, r4
 8002b9a:	463b      	mov	r3, r7
 8002b9c:	f001 fd78 	bl	8004690 <_dtoa_r>
 8002ba0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002ba4:	4606      	mov	r6, r0
 8002ba6:	d102      	bne.n	8002bae <__cvt+0x62>
 8002ba8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002baa:	07db      	lsls	r3, r3, #31
 8002bac:	d522      	bpl.n	8002bf4 <__cvt+0xa8>
 8002bae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002bb2:	eb06 0905 	add.w	r9, r6, r5
 8002bb6:	d110      	bne.n	8002bda <__cvt+0x8e>
 8002bb8:	7833      	ldrb	r3, [r6, #0]
 8002bba:	2b30      	cmp	r3, #48	; 0x30
 8002bbc:	d10a      	bne.n	8002bd4 <__cvt+0x88>
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	4639      	mov	r1, r7
 8002bc6:	f7fd ff87 	bl	8000ad8 <__aeabi_dcmpeq>
 8002bca:	b918      	cbnz	r0, 8002bd4 <__cvt+0x88>
 8002bcc:	f1c5 0501 	rsb	r5, r5, #1
 8002bd0:	f8ca 5000 	str.w	r5, [sl]
 8002bd4:	f8da 3000 	ldr.w	r3, [sl]
 8002bd8:	4499      	add	r9, r3
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2300      	movs	r3, #0
 8002bde:	4620      	mov	r0, r4
 8002be0:	4639      	mov	r1, r7
 8002be2:	f7fd ff79 	bl	8000ad8 <__aeabi_dcmpeq>
 8002be6:	b108      	cbz	r0, 8002bec <__cvt+0xa0>
 8002be8:	f8cd 901c 	str.w	r9, [sp, #28]
 8002bec:	2230      	movs	r2, #48	; 0x30
 8002bee:	9b07      	ldr	r3, [sp, #28]
 8002bf0:	454b      	cmp	r3, r9
 8002bf2:	d307      	bcc.n	8002c04 <__cvt+0xb8>
 8002bf4:	9b07      	ldr	r3, [sp, #28]
 8002bf6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002bf8:	1b9b      	subs	r3, r3, r6
 8002bfa:	4630      	mov	r0, r6
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	b008      	add	sp, #32
 8002c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c04:	1c59      	adds	r1, r3, #1
 8002c06:	9107      	str	r1, [sp, #28]
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	e7f0      	b.n	8002bee <__cvt+0xa2>

08002c0c <__exponent>:
 8002c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2900      	cmp	r1, #0
 8002c12:	bfb8      	it	lt
 8002c14:	4249      	neglt	r1, r1
 8002c16:	f803 2b02 	strb.w	r2, [r3], #2
 8002c1a:	bfb4      	ite	lt
 8002c1c:	222d      	movlt	r2, #45	; 0x2d
 8002c1e:	222b      	movge	r2, #43	; 0x2b
 8002c20:	2909      	cmp	r1, #9
 8002c22:	7042      	strb	r2, [r0, #1]
 8002c24:	dd2a      	ble.n	8002c7c <__exponent+0x70>
 8002c26:	f10d 0407 	add.w	r4, sp, #7
 8002c2a:	46a4      	mov	ip, r4
 8002c2c:	270a      	movs	r7, #10
 8002c2e:	46a6      	mov	lr, r4
 8002c30:	460a      	mov	r2, r1
 8002c32:	fb91 f6f7 	sdiv	r6, r1, r7
 8002c36:	fb07 1516 	mls	r5, r7, r6, r1
 8002c3a:	3530      	adds	r5, #48	; 0x30
 8002c3c:	2a63      	cmp	r2, #99	; 0x63
 8002c3e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8002c42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002c46:	4631      	mov	r1, r6
 8002c48:	dcf1      	bgt.n	8002c2e <__exponent+0x22>
 8002c4a:	3130      	adds	r1, #48	; 0x30
 8002c4c:	f1ae 0502 	sub.w	r5, lr, #2
 8002c50:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002c54:	1c44      	adds	r4, r0, #1
 8002c56:	4629      	mov	r1, r5
 8002c58:	4561      	cmp	r1, ip
 8002c5a:	d30a      	bcc.n	8002c72 <__exponent+0x66>
 8002c5c:	f10d 0209 	add.w	r2, sp, #9
 8002c60:	eba2 020e 	sub.w	r2, r2, lr
 8002c64:	4565      	cmp	r5, ip
 8002c66:	bf88      	it	hi
 8002c68:	2200      	movhi	r2, #0
 8002c6a:	4413      	add	r3, r2
 8002c6c:	1a18      	subs	r0, r3, r0
 8002c6e:	b003      	add	sp, #12
 8002c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c76:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002c7a:	e7ed      	b.n	8002c58 <__exponent+0x4c>
 8002c7c:	2330      	movs	r3, #48	; 0x30
 8002c7e:	3130      	adds	r1, #48	; 0x30
 8002c80:	7083      	strb	r3, [r0, #2]
 8002c82:	70c1      	strb	r1, [r0, #3]
 8002c84:	1d03      	adds	r3, r0, #4
 8002c86:	e7f1      	b.n	8002c6c <__exponent+0x60>

08002c88 <_printf_float>:
 8002c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c8c:	b091      	sub	sp, #68	; 0x44
 8002c8e:	460c      	mov	r4, r1
 8002c90:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002c94:	4616      	mov	r6, r2
 8002c96:	461f      	mov	r7, r3
 8002c98:	4605      	mov	r5, r0
 8002c9a:	f002 fe53 	bl	8005944 <_localeconv_r>
 8002c9e:	6803      	ldr	r3, [r0, #0]
 8002ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fd fa9c 	bl	80001e0 <strlen>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	930e      	str	r3, [sp, #56]	; 0x38
 8002cac:	f8d8 3000 	ldr.w	r3, [r8]
 8002cb0:	900a      	str	r0, [sp, #40]	; 0x28
 8002cb2:	3307      	adds	r3, #7
 8002cb4:	f023 0307 	bic.w	r3, r3, #7
 8002cb8:	f103 0208 	add.w	r2, r3, #8
 8002cbc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002cc0:	f8d4 b000 	ldr.w	fp, [r4]
 8002cc4:	f8c8 2000 	str.w	r2, [r8]
 8002cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ccc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002cd0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002cd4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002cd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8002cda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002cdc:	4b9c      	ldr	r3, [pc, #624]	; (8002f50 <_printf_float+0x2c8>)
 8002cde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ce2:	4640      	mov	r0, r8
 8002ce4:	f7fd ff2a 	bl	8000b3c <__aeabi_dcmpun>
 8002ce8:	bb70      	cbnz	r0, 8002d48 <_printf_float+0xc0>
 8002cea:	4b99      	ldr	r3, [pc, #612]	; (8002f50 <_printf_float+0x2c8>)
 8002cec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002cee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cf2:	4640      	mov	r0, r8
 8002cf4:	f7fd ff04 	bl	8000b00 <__aeabi_dcmple>
 8002cf8:	bb30      	cbnz	r0, 8002d48 <_printf_float+0xc0>
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	4640      	mov	r0, r8
 8002d00:	4651      	mov	r1, sl
 8002d02:	f7fd fef3 	bl	8000aec <__aeabi_dcmplt>
 8002d06:	b110      	cbz	r0, 8002d0e <_printf_float+0x86>
 8002d08:	232d      	movs	r3, #45	; 0x2d
 8002d0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d0e:	4b91      	ldr	r3, [pc, #580]	; (8002f54 <_printf_float+0x2cc>)
 8002d10:	4891      	ldr	r0, [pc, #580]	; (8002f58 <_printf_float+0x2d0>)
 8002d12:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002d16:	bf94      	ite	ls
 8002d18:	4698      	movls	r8, r3
 8002d1a:	4680      	movhi	r8, r0
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	6123      	str	r3, [r4, #16]
 8002d20:	f02b 0304 	bic.w	r3, fp, #4
 8002d24:	6023      	str	r3, [r4, #0]
 8002d26:	f04f 0a00 	mov.w	sl, #0
 8002d2a:	9700      	str	r7, [sp, #0]
 8002d2c:	4633      	mov	r3, r6
 8002d2e:	aa0f      	add	r2, sp, #60	; 0x3c
 8002d30:	4621      	mov	r1, r4
 8002d32:	4628      	mov	r0, r5
 8002d34:	f000 f9d2 	bl	80030dc <_printf_common>
 8002d38:	3001      	adds	r0, #1
 8002d3a:	f040 808f 	bne.w	8002e5c <_printf_float+0x1d4>
 8002d3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d42:	b011      	add	sp, #68	; 0x44
 8002d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d48:	4642      	mov	r2, r8
 8002d4a:	4653      	mov	r3, sl
 8002d4c:	4640      	mov	r0, r8
 8002d4e:	4651      	mov	r1, sl
 8002d50:	f7fd fef4 	bl	8000b3c <__aeabi_dcmpun>
 8002d54:	b140      	cbz	r0, 8002d68 <_printf_float+0xe0>
 8002d56:	f1ba 0f00 	cmp.w	sl, #0
 8002d5a:	bfbc      	itt	lt
 8002d5c:	232d      	movlt	r3, #45	; 0x2d
 8002d5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002d62:	487e      	ldr	r0, [pc, #504]	; (8002f5c <_printf_float+0x2d4>)
 8002d64:	4b7e      	ldr	r3, [pc, #504]	; (8002f60 <_printf_float+0x2d8>)
 8002d66:	e7d4      	b.n	8002d12 <_printf_float+0x8a>
 8002d68:	6863      	ldr	r3, [r4, #4]
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002d70:	d142      	bne.n	8002df8 <_printf_float+0x170>
 8002d72:	2306      	movs	r3, #6
 8002d74:	6063      	str	r3, [r4, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	9206      	str	r2, [sp, #24]
 8002d7a:	aa0e      	add	r2, sp, #56	; 0x38
 8002d7c:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002d80:	aa0d      	add	r2, sp, #52	; 0x34
 8002d82:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002d86:	9203      	str	r2, [sp, #12]
 8002d88:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002d8c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002d90:	6023      	str	r3, [r4, #0]
 8002d92:	6863      	ldr	r3, [r4, #4]
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	4642      	mov	r2, r8
 8002d98:	4653      	mov	r3, sl
 8002d9a:	4628      	mov	r0, r5
 8002d9c:	910b      	str	r1, [sp, #44]	; 0x2c
 8002d9e:	f7ff fed5 	bl	8002b4c <__cvt>
 8002da2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002da4:	2947      	cmp	r1, #71	; 0x47
 8002da6:	4680      	mov	r8, r0
 8002da8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002daa:	d108      	bne.n	8002dbe <_printf_float+0x136>
 8002dac:	1cc8      	adds	r0, r1, #3
 8002dae:	db02      	blt.n	8002db6 <_printf_float+0x12e>
 8002db0:	6863      	ldr	r3, [r4, #4]
 8002db2:	4299      	cmp	r1, r3
 8002db4:	dd40      	ble.n	8002e38 <_printf_float+0x1b0>
 8002db6:	f1a9 0902 	sub.w	r9, r9, #2
 8002dba:	fa5f f989 	uxtb.w	r9, r9
 8002dbe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002dc2:	d81f      	bhi.n	8002e04 <_printf_float+0x17c>
 8002dc4:	3901      	subs	r1, #1
 8002dc6:	464a      	mov	r2, r9
 8002dc8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002dcc:	910d      	str	r1, [sp, #52]	; 0x34
 8002dce:	f7ff ff1d 	bl	8002c0c <__exponent>
 8002dd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002dd4:	1813      	adds	r3, r2, r0
 8002dd6:	2a01      	cmp	r2, #1
 8002dd8:	4682      	mov	sl, r0
 8002dda:	6123      	str	r3, [r4, #16]
 8002ddc:	dc02      	bgt.n	8002de4 <_printf_float+0x15c>
 8002dde:	6822      	ldr	r2, [r4, #0]
 8002de0:	07d2      	lsls	r2, r2, #31
 8002de2:	d501      	bpl.n	8002de8 <_printf_float+0x160>
 8002de4:	3301      	adds	r3, #1
 8002de6:	6123      	str	r3, [r4, #16]
 8002de8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d09c      	beq.n	8002d2a <_printf_float+0xa2>
 8002df0:	232d      	movs	r3, #45	; 0x2d
 8002df2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002df6:	e798      	b.n	8002d2a <_printf_float+0xa2>
 8002df8:	2947      	cmp	r1, #71	; 0x47
 8002dfa:	d1bc      	bne.n	8002d76 <_printf_float+0xee>
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1ba      	bne.n	8002d76 <_printf_float+0xee>
 8002e00:	2301      	movs	r3, #1
 8002e02:	e7b7      	b.n	8002d74 <_printf_float+0xec>
 8002e04:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002e08:	d118      	bne.n	8002e3c <_printf_float+0x1b4>
 8002e0a:	2900      	cmp	r1, #0
 8002e0c:	6863      	ldr	r3, [r4, #4]
 8002e0e:	dd0b      	ble.n	8002e28 <_printf_float+0x1a0>
 8002e10:	6121      	str	r1, [r4, #16]
 8002e12:	b913      	cbnz	r3, 8002e1a <_printf_float+0x192>
 8002e14:	6822      	ldr	r2, [r4, #0]
 8002e16:	07d0      	lsls	r0, r2, #31
 8002e18:	d502      	bpl.n	8002e20 <_printf_float+0x198>
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	440b      	add	r3, r1
 8002e1e:	6123      	str	r3, [r4, #16]
 8002e20:	65a1      	str	r1, [r4, #88]	; 0x58
 8002e22:	f04f 0a00 	mov.w	sl, #0
 8002e26:	e7df      	b.n	8002de8 <_printf_float+0x160>
 8002e28:	b913      	cbnz	r3, 8002e30 <_printf_float+0x1a8>
 8002e2a:	6822      	ldr	r2, [r4, #0]
 8002e2c:	07d2      	lsls	r2, r2, #31
 8002e2e:	d501      	bpl.n	8002e34 <_printf_float+0x1ac>
 8002e30:	3302      	adds	r3, #2
 8002e32:	e7f4      	b.n	8002e1e <_printf_float+0x196>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e7f2      	b.n	8002e1e <_printf_float+0x196>
 8002e38:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002e3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e3e:	4299      	cmp	r1, r3
 8002e40:	db05      	blt.n	8002e4e <_printf_float+0x1c6>
 8002e42:	6823      	ldr	r3, [r4, #0]
 8002e44:	6121      	str	r1, [r4, #16]
 8002e46:	07d8      	lsls	r0, r3, #31
 8002e48:	d5ea      	bpl.n	8002e20 <_printf_float+0x198>
 8002e4a:	1c4b      	adds	r3, r1, #1
 8002e4c:	e7e7      	b.n	8002e1e <_printf_float+0x196>
 8002e4e:	2900      	cmp	r1, #0
 8002e50:	bfd4      	ite	le
 8002e52:	f1c1 0202 	rsble	r2, r1, #2
 8002e56:	2201      	movgt	r2, #1
 8002e58:	4413      	add	r3, r2
 8002e5a:	e7e0      	b.n	8002e1e <_printf_float+0x196>
 8002e5c:	6823      	ldr	r3, [r4, #0]
 8002e5e:	055a      	lsls	r2, r3, #21
 8002e60:	d407      	bmi.n	8002e72 <_printf_float+0x1ea>
 8002e62:	6923      	ldr	r3, [r4, #16]
 8002e64:	4642      	mov	r2, r8
 8002e66:	4631      	mov	r1, r6
 8002e68:	4628      	mov	r0, r5
 8002e6a:	47b8      	blx	r7
 8002e6c:	3001      	adds	r0, #1
 8002e6e:	d12b      	bne.n	8002ec8 <_printf_float+0x240>
 8002e70:	e765      	b.n	8002d3e <_printf_float+0xb6>
 8002e72:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002e76:	f240 80dc 	bls.w	8003032 <_printf_float+0x3aa>
 8002e7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2300      	movs	r3, #0
 8002e82:	f7fd fe29 	bl	8000ad8 <__aeabi_dcmpeq>
 8002e86:	2800      	cmp	r0, #0
 8002e88:	d033      	beq.n	8002ef2 <_printf_float+0x26a>
 8002e8a:	4a36      	ldr	r2, [pc, #216]	; (8002f64 <_printf_float+0x2dc>)
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	4631      	mov	r1, r6
 8002e90:	4628      	mov	r0, r5
 8002e92:	47b8      	blx	r7
 8002e94:	3001      	adds	r0, #1
 8002e96:	f43f af52 	beq.w	8002d3e <_printf_float+0xb6>
 8002e9a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	db02      	blt.n	8002ea8 <_printf_float+0x220>
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	07d8      	lsls	r0, r3, #31
 8002ea6:	d50f      	bpl.n	8002ec8 <_printf_float+0x240>
 8002ea8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002eac:	4631      	mov	r1, r6
 8002eae:	4628      	mov	r0, r5
 8002eb0:	47b8      	blx	r7
 8002eb2:	3001      	adds	r0, #1
 8002eb4:	f43f af43 	beq.w	8002d3e <_printf_float+0xb6>
 8002eb8:	f04f 0800 	mov.w	r8, #0
 8002ebc:	f104 091a 	add.w	r9, r4, #26
 8002ec0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	4543      	cmp	r3, r8
 8002ec6:	dc09      	bgt.n	8002edc <_printf_float+0x254>
 8002ec8:	6823      	ldr	r3, [r4, #0]
 8002eca:	079b      	lsls	r3, r3, #30
 8002ecc:	f100 8101 	bmi.w	80030d2 <_printf_float+0x44a>
 8002ed0:	68e0      	ldr	r0, [r4, #12]
 8002ed2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002ed4:	4298      	cmp	r0, r3
 8002ed6:	bfb8      	it	lt
 8002ed8:	4618      	movlt	r0, r3
 8002eda:	e732      	b.n	8002d42 <_printf_float+0xba>
 8002edc:	2301      	movs	r3, #1
 8002ede:	464a      	mov	r2, r9
 8002ee0:	4631      	mov	r1, r6
 8002ee2:	4628      	mov	r0, r5
 8002ee4:	47b8      	blx	r7
 8002ee6:	3001      	adds	r0, #1
 8002ee8:	f43f af29 	beq.w	8002d3e <_printf_float+0xb6>
 8002eec:	f108 0801 	add.w	r8, r8, #1
 8002ef0:	e7e6      	b.n	8002ec0 <_printf_float+0x238>
 8002ef2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	dc37      	bgt.n	8002f68 <_printf_float+0x2e0>
 8002ef8:	4a1a      	ldr	r2, [pc, #104]	; (8002f64 <_printf_float+0x2dc>)
 8002efa:	2301      	movs	r3, #1
 8002efc:	4631      	mov	r1, r6
 8002efe:	4628      	mov	r0, r5
 8002f00:	47b8      	blx	r7
 8002f02:	3001      	adds	r0, #1
 8002f04:	f43f af1b 	beq.w	8002d3e <_printf_float+0xb6>
 8002f08:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	d102      	bne.n	8002f16 <_printf_float+0x28e>
 8002f10:	6823      	ldr	r3, [r4, #0]
 8002f12:	07d9      	lsls	r1, r3, #31
 8002f14:	d5d8      	bpl.n	8002ec8 <_printf_float+0x240>
 8002f16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f1a:	4631      	mov	r1, r6
 8002f1c:	4628      	mov	r0, r5
 8002f1e:	47b8      	blx	r7
 8002f20:	3001      	adds	r0, #1
 8002f22:	f43f af0c 	beq.w	8002d3e <_printf_float+0xb6>
 8002f26:	f04f 0900 	mov.w	r9, #0
 8002f2a:	f104 0a1a 	add.w	sl, r4, #26
 8002f2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f30:	425b      	negs	r3, r3
 8002f32:	454b      	cmp	r3, r9
 8002f34:	dc01      	bgt.n	8002f3a <_printf_float+0x2b2>
 8002f36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f38:	e794      	b.n	8002e64 <_printf_float+0x1dc>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	4652      	mov	r2, sl
 8002f3e:	4631      	mov	r1, r6
 8002f40:	4628      	mov	r0, r5
 8002f42:	47b8      	blx	r7
 8002f44:	3001      	adds	r0, #1
 8002f46:	f43f aefa 	beq.w	8002d3e <_printf_float+0xb6>
 8002f4a:	f109 0901 	add.w	r9, r9, #1
 8002f4e:	e7ee      	b.n	8002f2e <_printf_float+0x2a6>
 8002f50:	7fefffff 	.word	0x7fefffff
 8002f54:	08007460 	.word	0x08007460
 8002f58:	08007464 	.word	0x08007464
 8002f5c:	0800746c 	.word	0x0800746c
 8002f60:	08007468 	.word	0x08007468
 8002f64:	08007470 	.word	0x08007470
 8002f68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002f6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	bfa8      	it	ge
 8002f70:	461a      	movge	r2, r3
 8002f72:	2a00      	cmp	r2, #0
 8002f74:	4691      	mov	r9, r2
 8002f76:	dc37      	bgt.n	8002fe8 <_printf_float+0x360>
 8002f78:	f04f 0b00 	mov.w	fp, #0
 8002f7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f80:	f104 021a 	add.w	r2, r4, #26
 8002f84:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002f88:	ebaa 0309 	sub.w	r3, sl, r9
 8002f8c:	455b      	cmp	r3, fp
 8002f8e:	dc33      	bgt.n	8002ff8 <_printf_float+0x370>
 8002f90:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002f94:	429a      	cmp	r2, r3
 8002f96:	db3b      	blt.n	8003010 <_printf_float+0x388>
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	07da      	lsls	r2, r3, #31
 8002f9c:	d438      	bmi.n	8003010 <_printf_float+0x388>
 8002f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002fa0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002fa2:	eba3 020a 	sub.w	r2, r3, sl
 8002fa6:	eba3 0901 	sub.w	r9, r3, r1
 8002faa:	4591      	cmp	r9, r2
 8002fac:	bfa8      	it	ge
 8002fae:	4691      	movge	r9, r2
 8002fb0:	f1b9 0f00 	cmp.w	r9, #0
 8002fb4:	dc34      	bgt.n	8003020 <_printf_float+0x398>
 8002fb6:	f04f 0800 	mov.w	r8, #0
 8002fba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002fbe:	f104 0a1a 	add.w	sl, r4, #26
 8002fc2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	eba3 0309 	sub.w	r3, r3, r9
 8002fcc:	4543      	cmp	r3, r8
 8002fce:	f77f af7b 	ble.w	8002ec8 <_printf_float+0x240>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	4652      	mov	r2, sl
 8002fd6:	4631      	mov	r1, r6
 8002fd8:	4628      	mov	r0, r5
 8002fda:	47b8      	blx	r7
 8002fdc:	3001      	adds	r0, #1
 8002fde:	f43f aeae 	beq.w	8002d3e <_printf_float+0xb6>
 8002fe2:	f108 0801 	add.w	r8, r8, #1
 8002fe6:	e7ec      	b.n	8002fc2 <_printf_float+0x33a>
 8002fe8:	4613      	mov	r3, r2
 8002fea:	4631      	mov	r1, r6
 8002fec:	4642      	mov	r2, r8
 8002fee:	4628      	mov	r0, r5
 8002ff0:	47b8      	blx	r7
 8002ff2:	3001      	adds	r0, #1
 8002ff4:	d1c0      	bne.n	8002f78 <_printf_float+0x2f0>
 8002ff6:	e6a2      	b.n	8002d3e <_printf_float+0xb6>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	4631      	mov	r1, r6
 8002ffc:	4628      	mov	r0, r5
 8002ffe:	920b      	str	r2, [sp, #44]	; 0x2c
 8003000:	47b8      	blx	r7
 8003002:	3001      	adds	r0, #1
 8003004:	f43f ae9b 	beq.w	8002d3e <_printf_float+0xb6>
 8003008:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800300a:	f10b 0b01 	add.w	fp, fp, #1
 800300e:	e7b9      	b.n	8002f84 <_printf_float+0x2fc>
 8003010:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003014:	4631      	mov	r1, r6
 8003016:	4628      	mov	r0, r5
 8003018:	47b8      	blx	r7
 800301a:	3001      	adds	r0, #1
 800301c:	d1bf      	bne.n	8002f9e <_printf_float+0x316>
 800301e:	e68e      	b.n	8002d3e <_printf_float+0xb6>
 8003020:	464b      	mov	r3, r9
 8003022:	eb08 020a 	add.w	r2, r8, sl
 8003026:	4631      	mov	r1, r6
 8003028:	4628      	mov	r0, r5
 800302a:	47b8      	blx	r7
 800302c:	3001      	adds	r0, #1
 800302e:	d1c2      	bne.n	8002fb6 <_printf_float+0x32e>
 8003030:	e685      	b.n	8002d3e <_printf_float+0xb6>
 8003032:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003034:	2a01      	cmp	r2, #1
 8003036:	dc01      	bgt.n	800303c <_printf_float+0x3b4>
 8003038:	07db      	lsls	r3, r3, #31
 800303a:	d537      	bpl.n	80030ac <_printf_float+0x424>
 800303c:	2301      	movs	r3, #1
 800303e:	4642      	mov	r2, r8
 8003040:	4631      	mov	r1, r6
 8003042:	4628      	mov	r0, r5
 8003044:	47b8      	blx	r7
 8003046:	3001      	adds	r0, #1
 8003048:	f43f ae79 	beq.w	8002d3e <_printf_float+0xb6>
 800304c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003050:	4631      	mov	r1, r6
 8003052:	4628      	mov	r0, r5
 8003054:	47b8      	blx	r7
 8003056:	3001      	adds	r0, #1
 8003058:	f43f ae71 	beq.w	8002d3e <_printf_float+0xb6>
 800305c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003060:	2200      	movs	r2, #0
 8003062:	2300      	movs	r3, #0
 8003064:	f7fd fd38 	bl	8000ad8 <__aeabi_dcmpeq>
 8003068:	b9d8      	cbnz	r0, 80030a2 <_printf_float+0x41a>
 800306a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800306c:	f108 0201 	add.w	r2, r8, #1
 8003070:	3b01      	subs	r3, #1
 8003072:	4631      	mov	r1, r6
 8003074:	4628      	mov	r0, r5
 8003076:	47b8      	blx	r7
 8003078:	3001      	adds	r0, #1
 800307a:	d10e      	bne.n	800309a <_printf_float+0x412>
 800307c:	e65f      	b.n	8002d3e <_printf_float+0xb6>
 800307e:	2301      	movs	r3, #1
 8003080:	464a      	mov	r2, r9
 8003082:	4631      	mov	r1, r6
 8003084:	4628      	mov	r0, r5
 8003086:	47b8      	blx	r7
 8003088:	3001      	adds	r0, #1
 800308a:	f43f ae58 	beq.w	8002d3e <_printf_float+0xb6>
 800308e:	f108 0801 	add.w	r8, r8, #1
 8003092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003094:	3b01      	subs	r3, #1
 8003096:	4543      	cmp	r3, r8
 8003098:	dcf1      	bgt.n	800307e <_printf_float+0x3f6>
 800309a:	4653      	mov	r3, sl
 800309c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80030a0:	e6e1      	b.n	8002e66 <_printf_float+0x1de>
 80030a2:	f04f 0800 	mov.w	r8, #0
 80030a6:	f104 091a 	add.w	r9, r4, #26
 80030aa:	e7f2      	b.n	8003092 <_printf_float+0x40a>
 80030ac:	2301      	movs	r3, #1
 80030ae:	4642      	mov	r2, r8
 80030b0:	e7df      	b.n	8003072 <_printf_float+0x3ea>
 80030b2:	2301      	movs	r3, #1
 80030b4:	464a      	mov	r2, r9
 80030b6:	4631      	mov	r1, r6
 80030b8:	4628      	mov	r0, r5
 80030ba:	47b8      	blx	r7
 80030bc:	3001      	adds	r0, #1
 80030be:	f43f ae3e 	beq.w	8002d3e <_printf_float+0xb6>
 80030c2:	f108 0801 	add.w	r8, r8, #1
 80030c6:	68e3      	ldr	r3, [r4, #12]
 80030c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80030ca:	1a5b      	subs	r3, r3, r1
 80030cc:	4543      	cmp	r3, r8
 80030ce:	dcf0      	bgt.n	80030b2 <_printf_float+0x42a>
 80030d0:	e6fe      	b.n	8002ed0 <_printf_float+0x248>
 80030d2:	f04f 0800 	mov.w	r8, #0
 80030d6:	f104 0919 	add.w	r9, r4, #25
 80030da:	e7f4      	b.n	80030c6 <_printf_float+0x43e>

080030dc <_printf_common>:
 80030dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030e0:	4616      	mov	r6, r2
 80030e2:	4699      	mov	r9, r3
 80030e4:	688a      	ldr	r2, [r1, #8]
 80030e6:	690b      	ldr	r3, [r1, #16]
 80030e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030ec:	4293      	cmp	r3, r2
 80030ee:	bfb8      	it	lt
 80030f0:	4613      	movlt	r3, r2
 80030f2:	6033      	str	r3, [r6, #0]
 80030f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030f8:	4607      	mov	r7, r0
 80030fa:	460c      	mov	r4, r1
 80030fc:	b10a      	cbz	r2, 8003102 <_printf_common+0x26>
 80030fe:	3301      	adds	r3, #1
 8003100:	6033      	str	r3, [r6, #0]
 8003102:	6823      	ldr	r3, [r4, #0]
 8003104:	0699      	lsls	r1, r3, #26
 8003106:	bf42      	ittt	mi
 8003108:	6833      	ldrmi	r3, [r6, #0]
 800310a:	3302      	addmi	r3, #2
 800310c:	6033      	strmi	r3, [r6, #0]
 800310e:	6825      	ldr	r5, [r4, #0]
 8003110:	f015 0506 	ands.w	r5, r5, #6
 8003114:	d106      	bne.n	8003124 <_printf_common+0x48>
 8003116:	f104 0a19 	add.w	sl, r4, #25
 800311a:	68e3      	ldr	r3, [r4, #12]
 800311c:	6832      	ldr	r2, [r6, #0]
 800311e:	1a9b      	subs	r3, r3, r2
 8003120:	42ab      	cmp	r3, r5
 8003122:	dc26      	bgt.n	8003172 <_printf_common+0x96>
 8003124:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003128:	1e13      	subs	r3, r2, #0
 800312a:	6822      	ldr	r2, [r4, #0]
 800312c:	bf18      	it	ne
 800312e:	2301      	movne	r3, #1
 8003130:	0692      	lsls	r2, r2, #26
 8003132:	d42b      	bmi.n	800318c <_printf_common+0xb0>
 8003134:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003138:	4649      	mov	r1, r9
 800313a:	4638      	mov	r0, r7
 800313c:	47c0      	blx	r8
 800313e:	3001      	adds	r0, #1
 8003140:	d01e      	beq.n	8003180 <_printf_common+0xa4>
 8003142:	6823      	ldr	r3, [r4, #0]
 8003144:	68e5      	ldr	r5, [r4, #12]
 8003146:	6832      	ldr	r2, [r6, #0]
 8003148:	f003 0306 	and.w	r3, r3, #6
 800314c:	2b04      	cmp	r3, #4
 800314e:	bf08      	it	eq
 8003150:	1aad      	subeq	r5, r5, r2
 8003152:	68a3      	ldr	r3, [r4, #8]
 8003154:	6922      	ldr	r2, [r4, #16]
 8003156:	bf0c      	ite	eq
 8003158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800315c:	2500      	movne	r5, #0
 800315e:	4293      	cmp	r3, r2
 8003160:	bfc4      	itt	gt
 8003162:	1a9b      	subgt	r3, r3, r2
 8003164:	18ed      	addgt	r5, r5, r3
 8003166:	2600      	movs	r6, #0
 8003168:	341a      	adds	r4, #26
 800316a:	42b5      	cmp	r5, r6
 800316c:	d11a      	bne.n	80031a4 <_printf_common+0xc8>
 800316e:	2000      	movs	r0, #0
 8003170:	e008      	b.n	8003184 <_printf_common+0xa8>
 8003172:	2301      	movs	r3, #1
 8003174:	4652      	mov	r2, sl
 8003176:	4649      	mov	r1, r9
 8003178:	4638      	mov	r0, r7
 800317a:	47c0      	blx	r8
 800317c:	3001      	adds	r0, #1
 800317e:	d103      	bne.n	8003188 <_printf_common+0xac>
 8003180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003188:	3501      	adds	r5, #1
 800318a:	e7c6      	b.n	800311a <_printf_common+0x3e>
 800318c:	18e1      	adds	r1, r4, r3
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	2030      	movs	r0, #48	; 0x30
 8003192:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003196:	4422      	add	r2, r4
 8003198:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800319c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031a0:	3302      	adds	r3, #2
 80031a2:	e7c7      	b.n	8003134 <_printf_common+0x58>
 80031a4:	2301      	movs	r3, #1
 80031a6:	4622      	mov	r2, r4
 80031a8:	4649      	mov	r1, r9
 80031aa:	4638      	mov	r0, r7
 80031ac:	47c0      	blx	r8
 80031ae:	3001      	adds	r0, #1
 80031b0:	d0e6      	beq.n	8003180 <_printf_common+0xa4>
 80031b2:	3601      	adds	r6, #1
 80031b4:	e7d9      	b.n	800316a <_printf_common+0x8e>
	...

080031b8 <_printf_i>:
 80031b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031bc:	7e0f      	ldrb	r7, [r1, #24]
 80031be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80031c0:	2f78      	cmp	r7, #120	; 0x78
 80031c2:	4691      	mov	r9, r2
 80031c4:	4680      	mov	r8, r0
 80031c6:	460c      	mov	r4, r1
 80031c8:	469a      	mov	sl, r3
 80031ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80031ce:	d807      	bhi.n	80031e0 <_printf_i+0x28>
 80031d0:	2f62      	cmp	r7, #98	; 0x62
 80031d2:	d80a      	bhi.n	80031ea <_printf_i+0x32>
 80031d4:	2f00      	cmp	r7, #0
 80031d6:	f000 80d8 	beq.w	800338a <_printf_i+0x1d2>
 80031da:	2f58      	cmp	r7, #88	; 0x58
 80031dc:	f000 80a3 	beq.w	8003326 <_printf_i+0x16e>
 80031e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031e8:	e03a      	b.n	8003260 <_printf_i+0xa8>
 80031ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031ee:	2b15      	cmp	r3, #21
 80031f0:	d8f6      	bhi.n	80031e0 <_printf_i+0x28>
 80031f2:	a101      	add	r1, pc, #4	; (adr r1, 80031f8 <_printf_i+0x40>)
 80031f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031f8:	08003251 	.word	0x08003251
 80031fc:	08003265 	.word	0x08003265
 8003200:	080031e1 	.word	0x080031e1
 8003204:	080031e1 	.word	0x080031e1
 8003208:	080031e1 	.word	0x080031e1
 800320c:	080031e1 	.word	0x080031e1
 8003210:	08003265 	.word	0x08003265
 8003214:	080031e1 	.word	0x080031e1
 8003218:	080031e1 	.word	0x080031e1
 800321c:	080031e1 	.word	0x080031e1
 8003220:	080031e1 	.word	0x080031e1
 8003224:	08003371 	.word	0x08003371
 8003228:	08003295 	.word	0x08003295
 800322c:	08003353 	.word	0x08003353
 8003230:	080031e1 	.word	0x080031e1
 8003234:	080031e1 	.word	0x080031e1
 8003238:	08003393 	.word	0x08003393
 800323c:	080031e1 	.word	0x080031e1
 8003240:	08003295 	.word	0x08003295
 8003244:	080031e1 	.word	0x080031e1
 8003248:	080031e1 	.word	0x080031e1
 800324c:	0800335b 	.word	0x0800335b
 8003250:	682b      	ldr	r3, [r5, #0]
 8003252:	1d1a      	adds	r2, r3, #4
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	602a      	str	r2, [r5, #0]
 8003258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800325c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003260:	2301      	movs	r3, #1
 8003262:	e0a3      	b.n	80033ac <_printf_i+0x1f4>
 8003264:	6820      	ldr	r0, [r4, #0]
 8003266:	6829      	ldr	r1, [r5, #0]
 8003268:	0606      	lsls	r6, r0, #24
 800326a:	f101 0304 	add.w	r3, r1, #4
 800326e:	d50a      	bpl.n	8003286 <_printf_i+0xce>
 8003270:	680e      	ldr	r6, [r1, #0]
 8003272:	602b      	str	r3, [r5, #0]
 8003274:	2e00      	cmp	r6, #0
 8003276:	da03      	bge.n	8003280 <_printf_i+0xc8>
 8003278:	232d      	movs	r3, #45	; 0x2d
 800327a:	4276      	negs	r6, r6
 800327c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003280:	485e      	ldr	r0, [pc, #376]	; (80033fc <_printf_i+0x244>)
 8003282:	230a      	movs	r3, #10
 8003284:	e019      	b.n	80032ba <_printf_i+0x102>
 8003286:	680e      	ldr	r6, [r1, #0]
 8003288:	602b      	str	r3, [r5, #0]
 800328a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800328e:	bf18      	it	ne
 8003290:	b236      	sxthne	r6, r6
 8003292:	e7ef      	b.n	8003274 <_printf_i+0xbc>
 8003294:	682b      	ldr	r3, [r5, #0]
 8003296:	6820      	ldr	r0, [r4, #0]
 8003298:	1d19      	adds	r1, r3, #4
 800329a:	6029      	str	r1, [r5, #0]
 800329c:	0601      	lsls	r1, r0, #24
 800329e:	d501      	bpl.n	80032a4 <_printf_i+0xec>
 80032a0:	681e      	ldr	r6, [r3, #0]
 80032a2:	e002      	b.n	80032aa <_printf_i+0xf2>
 80032a4:	0646      	lsls	r6, r0, #25
 80032a6:	d5fb      	bpl.n	80032a0 <_printf_i+0xe8>
 80032a8:	881e      	ldrh	r6, [r3, #0]
 80032aa:	4854      	ldr	r0, [pc, #336]	; (80033fc <_printf_i+0x244>)
 80032ac:	2f6f      	cmp	r7, #111	; 0x6f
 80032ae:	bf0c      	ite	eq
 80032b0:	2308      	moveq	r3, #8
 80032b2:	230a      	movne	r3, #10
 80032b4:	2100      	movs	r1, #0
 80032b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032ba:	6865      	ldr	r5, [r4, #4]
 80032bc:	60a5      	str	r5, [r4, #8]
 80032be:	2d00      	cmp	r5, #0
 80032c0:	bfa2      	ittt	ge
 80032c2:	6821      	ldrge	r1, [r4, #0]
 80032c4:	f021 0104 	bicge.w	r1, r1, #4
 80032c8:	6021      	strge	r1, [r4, #0]
 80032ca:	b90e      	cbnz	r6, 80032d0 <_printf_i+0x118>
 80032cc:	2d00      	cmp	r5, #0
 80032ce:	d04d      	beq.n	800336c <_printf_i+0x1b4>
 80032d0:	4615      	mov	r5, r2
 80032d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80032d6:	fb03 6711 	mls	r7, r3, r1, r6
 80032da:	5dc7      	ldrb	r7, [r0, r7]
 80032dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80032e0:	4637      	mov	r7, r6
 80032e2:	42bb      	cmp	r3, r7
 80032e4:	460e      	mov	r6, r1
 80032e6:	d9f4      	bls.n	80032d2 <_printf_i+0x11a>
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d10b      	bne.n	8003304 <_printf_i+0x14c>
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	07de      	lsls	r6, r3, #31
 80032f0:	d508      	bpl.n	8003304 <_printf_i+0x14c>
 80032f2:	6923      	ldr	r3, [r4, #16]
 80032f4:	6861      	ldr	r1, [r4, #4]
 80032f6:	4299      	cmp	r1, r3
 80032f8:	bfde      	ittt	le
 80032fa:	2330      	movle	r3, #48	; 0x30
 80032fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003300:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003304:	1b52      	subs	r2, r2, r5
 8003306:	6122      	str	r2, [r4, #16]
 8003308:	f8cd a000 	str.w	sl, [sp]
 800330c:	464b      	mov	r3, r9
 800330e:	aa03      	add	r2, sp, #12
 8003310:	4621      	mov	r1, r4
 8003312:	4640      	mov	r0, r8
 8003314:	f7ff fee2 	bl	80030dc <_printf_common>
 8003318:	3001      	adds	r0, #1
 800331a:	d14c      	bne.n	80033b6 <_printf_i+0x1fe>
 800331c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003320:	b004      	add	sp, #16
 8003322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003326:	4835      	ldr	r0, [pc, #212]	; (80033fc <_printf_i+0x244>)
 8003328:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800332c:	6829      	ldr	r1, [r5, #0]
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	f851 6b04 	ldr.w	r6, [r1], #4
 8003334:	6029      	str	r1, [r5, #0]
 8003336:	061d      	lsls	r5, r3, #24
 8003338:	d514      	bpl.n	8003364 <_printf_i+0x1ac>
 800333a:	07df      	lsls	r7, r3, #31
 800333c:	bf44      	itt	mi
 800333e:	f043 0320 	orrmi.w	r3, r3, #32
 8003342:	6023      	strmi	r3, [r4, #0]
 8003344:	b91e      	cbnz	r6, 800334e <_printf_i+0x196>
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	f023 0320 	bic.w	r3, r3, #32
 800334c:	6023      	str	r3, [r4, #0]
 800334e:	2310      	movs	r3, #16
 8003350:	e7b0      	b.n	80032b4 <_printf_i+0xfc>
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	f043 0320 	orr.w	r3, r3, #32
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	2378      	movs	r3, #120	; 0x78
 800335c:	4828      	ldr	r0, [pc, #160]	; (8003400 <_printf_i+0x248>)
 800335e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003362:	e7e3      	b.n	800332c <_printf_i+0x174>
 8003364:	0659      	lsls	r1, r3, #25
 8003366:	bf48      	it	mi
 8003368:	b2b6      	uxthmi	r6, r6
 800336a:	e7e6      	b.n	800333a <_printf_i+0x182>
 800336c:	4615      	mov	r5, r2
 800336e:	e7bb      	b.n	80032e8 <_printf_i+0x130>
 8003370:	682b      	ldr	r3, [r5, #0]
 8003372:	6826      	ldr	r6, [r4, #0]
 8003374:	6961      	ldr	r1, [r4, #20]
 8003376:	1d18      	adds	r0, r3, #4
 8003378:	6028      	str	r0, [r5, #0]
 800337a:	0635      	lsls	r5, r6, #24
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	d501      	bpl.n	8003384 <_printf_i+0x1cc>
 8003380:	6019      	str	r1, [r3, #0]
 8003382:	e002      	b.n	800338a <_printf_i+0x1d2>
 8003384:	0670      	lsls	r0, r6, #25
 8003386:	d5fb      	bpl.n	8003380 <_printf_i+0x1c8>
 8003388:	8019      	strh	r1, [r3, #0]
 800338a:	2300      	movs	r3, #0
 800338c:	6123      	str	r3, [r4, #16]
 800338e:	4615      	mov	r5, r2
 8003390:	e7ba      	b.n	8003308 <_printf_i+0x150>
 8003392:	682b      	ldr	r3, [r5, #0]
 8003394:	1d1a      	adds	r2, r3, #4
 8003396:	602a      	str	r2, [r5, #0]
 8003398:	681d      	ldr	r5, [r3, #0]
 800339a:	6862      	ldr	r2, [r4, #4]
 800339c:	2100      	movs	r1, #0
 800339e:	4628      	mov	r0, r5
 80033a0:	f7fc ff26 	bl	80001f0 <memchr>
 80033a4:	b108      	cbz	r0, 80033aa <_printf_i+0x1f2>
 80033a6:	1b40      	subs	r0, r0, r5
 80033a8:	6060      	str	r0, [r4, #4]
 80033aa:	6863      	ldr	r3, [r4, #4]
 80033ac:	6123      	str	r3, [r4, #16]
 80033ae:	2300      	movs	r3, #0
 80033b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033b4:	e7a8      	b.n	8003308 <_printf_i+0x150>
 80033b6:	6923      	ldr	r3, [r4, #16]
 80033b8:	462a      	mov	r2, r5
 80033ba:	4649      	mov	r1, r9
 80033bc:	4640      	mov	r0, r8
 80033be:	47d0      	blx	sl
 80033c0:	3001      	adds	r0, #1
 80033c2:	d0ab      	beq.n	800331c <_printf_i+0x164>
 80033c4:	6823      	ldr	r3, [r4, #0]
 80033c6:	079b      	lsls	r3, r3, #30
 80033c8:	d413      	bmi.n	80033f2 <_printf_i+0x23a>
 80033ca:	68e0      	ldr	r0, [r4, #12]
 80033cc:	9b03      	ldr	r3, [sp, #12]
 80033ce:	4298      	cmp	r0, r3
 80033d0:	bfb8      	it	lt
 80033d2:	4618      	movlt	r0, r3
 80033d4:	e7a4      	b.n	8003320 <_printf_i+0x168>
 80033d6:	2301      	movs	r3, #1
 80033d8:	4632      	mov	r2, r6
 80033da:	4649      	mov	r1, r9
 80033dc:	4640      	mov	r0, r8
 80033de:	47d0      	blx	sl
 80033e0:	3001      	adds	r0, #1
 80033e2:	d09b      	beq.n	800331c <_printf_i+0x164>
 80033e4:	3501      	adds	r5, #1
 80033e6:	68e3      	ldr	r3, [r4, #12]
 80033e8:	9903      	ldr	r1, [sp, #12]
 80033ea:	1a5b      	subs	r3, r3, r1
 80033ec:	42ab      	cmp	r3, r5
 80033ee:	dcf2      	bgt.n	80033d6 <_printf_i+0x21e>
 80033f0:	e7eb      	b.n	80033ca <_printf_i+0x212>
 80033f2:	2500      	movs	r5, #0
 80033f4:	f104 0619 	add.w	r6, r4, #25
 80033f8:	e7f5      	b.n	80033e6 <_printf_i+0x22e>
 80033fa:	bf00      	nop
 80033fc:	08007472 	.word	0x08007472
 8003400:	08007483 	.word	0x08007483

08003404 <_scanf_float>:
 8003404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003408:	b087      	sub	sp, #28
 800340a:	4617      	mov	r7, r2
 800340c:	9303      	str	r3, [sp, #12]
 800340e:	688b      	ldr	r3, [r1, #8]
 8003410:	1e5a      	subs	r2, r3, #1
 8003412:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003416:	bf83      	ittte	hi
 8003418:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800341c:	195b      	addhi	r3, r3, r5
 800341e:	9302      	strhi	r3, [sp, #8]
 8003420:	2300      	movls	r3, #0
 8003422:	bf86      	itte	hi
 8003424:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003428:	608b      	strhi	r3, [r1, #8]
 800342a:	9302      	strls	r3, [sp, #8]
 800342c:	680b      	ldr	r3, [r1, #0]
 800342e:	468b      	mov	fp, r1
 8003430:	2500      	movs	r5, #0
 8003432:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003436:	f84b 3b1c 	str.w	r3, [fp], #28
 800343a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800343e:	4680      	mov	r8, r0
 8003440:	460c      	mov	r4, r1
 8003442:	465e      	mov	r6, fp
 8003444:	46aa      	mov	sl, r5
 8003446:	46a9      	mov	r9, r5
 8003448:	9501      	str	r5, [sp, #4]
 800344a:	68a2      	ldr	r2, [r4, #8]
 800344c:	b152      	cbz	r2, 8003464 <_scanf_float+0x60>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b4e      	cmp	r3, #78	; 0x4e
 8003454:	d864      	bhi.n	8003520 <_scanf_float+0x11c>
 8003456:	2b40      	cmp	r3, #64	; 0x40
 8003458:	d83c      	bhi.n	80034d4 <_scanf_float+0xd0>
 800345a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800345e:	b2c8      	uxtb	r0, r1
 8003460:	280e      	cmp	r0, #14
 8003462:	d93a      	bls.n	80034da <_scanf_float+0xd6>
 8003464:	f1b9 0f00 	cmp.w	r9, #0
 8003468:	d003      	beq.n	8003472 <_scanf_float+0x6e>
 800346a:	6823      	ldr	r3, [r4, #0]
 800346c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003470:	6023      	str	r3, [r4, #0]
 8003472:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003476:	f1ba 0f01 	cmp.w	sl, #1
 800347a:	f200 8113 	bhi.w	80036a4 <_scanf_float+0x2a0>
 800347e:	455e      	cmp	r6, fp
 8003480:	f200 8105 	bhi.w	800368e <_scanf_float+0x28a>
 8003484:	2501      	movs	r5, #1
 8003486:	4628      	mov	r0, r5
 8003488:	b007      	add	sp, #28
 800348a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800348e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003492:	2a0d      	cmp	r2, #13
 8003494:	d8e6      	bhi.n	8003464 <_scanf_float+0x60>
 8003496:	a101      	add	r1, pc, #4	; (adr r1, 800349c <_scanf_float+0x98>)
 8003498:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800349c:	080035db 	.word	0x080035db
 80034a0:	08003465 	.word	0x08003465
 80034a4:	08003465 	.word	0x08003465
 80034a8:	08003465 	.word	0x08003465
 80034ac:	0800363b 	.word	0x0800363b
 80034b0:	08003613 	.word	0x08003613
 80034b4:	08003465 	.word	0x08003465
 80034b8:	08003465 	.word	0x08003465
 80034bc:	080035e9 	.word	0x080035e9
 80034c0:	08003465 	.word	0x08003465
 80034c4:	08003465 	.word	0x08003465
 80034c8:	08003465 	.word	0x08003465
 80034cc:	08003465 	.word	0x08003465
 80034d0:	080035a1 	.word	0x080035a1
 80034d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80034d8:	e7db      	b.n	8003492 <_scanf_float+0x8e>
 80034da:	290e      	cmp	r1, #14
 80034dc:	d8c2      	bhi.n	8003464 <_scanf_float+0x60>
 80034de:	a001      	add	r0, pc, #4	; (adr r0, 80034e4 <_scanf_float+0xe0>)
 80034e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80034e4:	08003593 	.word	0x08003593
 80034e8:	08003465 	.word	0x08003465
 80034ec:	08003593 	.word	0x08003593
 80034f0:	08003627 	.word	0x08003627
 80034f4:	08003465 	.word	0x08003465
 80034f8:	08003541 	.word	0x08003541
 80034fc:	0800357d 	.word	0x0800357d
 8003500:	0800357d 	.word	0x0800357d
 8003504:	0800357d 	.word	0x0800357d
 8003508:	0800357d 	.word	0x0800357d
 800350c:	0800357d 	.word	0x0800357d
 8003510:	0800357d 	.word	0x0800357d
 8003514:	0800357d 	.word	0x0800357d
 8003518:	0800357d 	.word	0x0800357d
 800351c:	0800357d 	.word	0x0800357d
 8003520:	2b6e      	cmp	r3, #110	; 0x6e
 8003522:	d809      	bhi.n	8003538 <_scanf_float+0x134>
 8003524:	2b60      	cmp	r3, #96	; 0x60
 8003526:	d8b2      	bhi.n	800348e <_scanf_float+0x8a>
 8003528:	2b54      	cmp	r3, #84	; 0x54
 800352a:	d077      	beq.n	800361c <_scanf_float+0x218>
 800352c:	2b59      	cmp	r3, #89	; 0x59
 800352e:	d199      	bne.n	8003464 <_scanf_float+0x60>
 8003530:	2d07      	cmp	r5, #7
 8003532:	d197      	bne.n	8003464 <_scanf_float+0x60>
 8003534:	2508      	movs	r5, #8
 8003536:	e029      	b.n	800358c <_scanf_float+0x188>
 8003538:	2b74      	cmp	r3, #116	; 0x74
 800353a:	d06f      	beq.n	800361c <_scanf_float+0x218>
 800353c:	2b79      	cmp	r3, #121	; 0x79
 800353e:	e7f6      	b.n	800352e <_scanf_float+0x12a>
 8003540:	6821      	ldr	r1, [r4, #0]
 8003542:	05c8      	lsls	r0, r1, #23
 8003544:	d51a      	bpl.n	800357c <_scanf_float+0x178>
 8003546:	9b02      	ldr	r3, [sp, #8]
 8003548:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800354c:	6021      	str	r1, [r4, #0]
 800354e:	f109 0901 	add.w	r9, r9, #1
 8003552:	b11b      	cbz	r3, 800355c <_scanf_float+0x158>
 8003554:	3b01      	subs	r3, #1
 8003556:	3201      	adds	r2, #1
 8003558:	9302      	str	r3, [sp, #8]
 800355a:	60a2      	str	r2, [r4, #8]
 800355c:	68a3      	ldr	r3, [r4, #8]
 800355e:	3b01      	subs	r3, #1
 8003560:	60a3      	str	r3, [r4, #8]
 8003562:	6923      	ldr	r3, [r4, #16]
 8003564:	3301      	adds	r3, #1
 8003566:	6123      	str	r3, [r4, #16]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3b01      	subs	r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	607b      	str	r3, [r7, #4]
 8003570:	f340 8084 	ble.w	800367c <_scanf_float+0x278>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	3301      	adds	r3, #1
 8003578:	603b      	str	r3, [r7, #0]
 800357a:	e766      	b.n	800344a <_scanf_float+0x46>
 800357c:	eb1a 0f05 	cmn.w	sl, r5
 8003580:	f47f af70 	bne.w	8003464 <_scanf_float+0x60>
 8003584:	6822      	ldr	r2, [r4, #0]
 8003586:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800358a:	6022      	str	r2, [r4, #0]
 800358c:	f806 3b01 	strb.w	r3, [r6], #1
 8003590:	e7e4      	b.n	800355c <_scanf_float+0x158>
 8003592:	6822      	ldr	r2, [r4, #0]
 8003594:	0610      	lsls	r0, r2, #24
 8003596:	f57f af65 	bpl.w	8003464 <_scanf_float+0x60>
 800359a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800359e:	e7f4      	b.n	800358a <_scanf_float+0x186>
 80035a0:	f1ba 0f00 	cmp.w	sl, #0
 80035a4:	d10e      	bne.n	80035c4 <_scanf_float+0x1c0>
 80035a6:	f1b9 0f00 	cmp.w	r9, #0
 80035aa:	d10e      	bne.n	80035ca <_scanf_float+0x1c6>
 80035ac:	6822      	ldr	r2, [r4, #0]
 80035ae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80035b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80035b6:	d108      	bne.n	80035ca <_scanf_float+0x1c6>
 80035b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80035bc:	6022      	str	r2, [r4, #0]
 80035be:	f04f 0a01 	mov.w	sl, #1
 80035c2:	e7e3      	b.n	800358c <_scanf_float+0x188>
 80035c4:	f1ba 0f02 	cmp.w	sl, #2
 80035c8:	d055      	beq.n	8003676 <_scanf_float+0x272>
 80035ca:	2d01      	cmp	r5, #1
 80035cc:	d002      	beq.n	80035d4 <_scanf_float+0x1d0>
 80035ce:	2d04      	cmp	r5, #4
 80035d0:	f47f af48 	bne.w	8003464 <_scanf_float+0x60>
 80035d4:	3501      	adds	r5, #1
 80035d6:	b2ed      	uxtb	r5, r5
 80035d8:	e7d8      	b.n	800358c <_scanf_float+0x188>
 80035da:	f1ba 0f01 	cmp.w	sl, #1
 80035de:	f47f af41 	bne.w	8003464 <_scanf_float+0x60>
 80035e2:	f04f 0a02 	mov.w	sl, #2
 80035e6:	e7d1      	b.n	800358c <_scanf_float+0x188>
 80035e8:	b97d      	cbnz	r5, 800360a <_scanf_float+0x206>
 80035ea:	f1b9 0f00 	cmp.w	r9, #0
 80035ee:	f47f af3c 	bne.w	800346a <_scanf_float+0x66>
 80035f2:	6822      	ldr	r2, [r4, #0]
 80035f4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80035f8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80035fc:	f47f af39 	bne.w	8003472 <_scanf_float+0x6e>
 8003600:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003604:	6022      	str	r2, [r4, #0]
 8003606:	2501      	movs	r5, #1
 8003608:	e7c0      	b.n	800358c <_scanf_float+0x188>
 800360a:	2d03      	cmp	r5, #3
 800360c:	d0e2      	beq.n	80035d4 <_scanf_float+0x1d0>
 800360e:	2d05      	cmp	r5, #5
 8003610:	e7de      	b.n	80035d0 <_scanf_float+0x1cc>
 8003612:	2d02      	cmp	r5, #2
 8003614:	f47f af26 	bne.w	8003464 <_scanf_float+0x60>
 8003618:	2503      	movs	r5, #3
 800361a:	e7b7      	b.n	800358c <_scanf_float+0x188>
 800361c:	2d06      	cmp	r5, #6
 800361e:	f47f af21 	bne.w	8003464 <_scanf_float+0x60>
 8003622:	2507      	movs	r5, #7
 8003624:	e7b2      	b.n	800358c <_scanf_float+0x188>
 8003626:	6822      	ldr	r2, [r4, #0]
 8003628:	0591      	lsls	r1, r2, #22
 800362a:	f57f af1b 	bpl.w	8003464 <_scanf_float+0x60>
 800362e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003632:	6022      	str	r2, [r4, #0]
 8003634:	f8cd 9004 	str.w	r9, [sp, #4]
 8003638:	e7a8      	b.n	800358c <_scanf_float+0x188>
 800363a:	6822      	ldr	r2, [r4, #0]
 800363c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003640:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003644:	d006      	beq.n	8003654 <_scanf_float+0x250>
 8003646:	0550      	lsls	r0, r2, #21
 8003648:	f57f af0c 	bpl.w	8003464 <_scanf_float+0x60>
 800364c:	f1b9 0f00 	cmp.w	r9, #0
 8003650:	f43f af0f 	beq.w	8003472 <_scanf_float+0x6e>
 8003654:	0591      	lsls	r1, r2, #22
 8003656:	bf58      	it	pl
 8003658:	9901      	ldrpl	r1, [sp, #4]
 800365a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800365e:	bf58      	it	pl
 8003660:	eba9 0101 	subpl.w	r1, r9, r1
 8003664:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003668:	bf58      	it	pl
 800366a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800366e:	6022      	str	r2, [r4, #0]
 8003670:	f04f 0900 	mov.w	r9, #0
 8003674:	e78a      	b.n	800358c <_scanf_float+0x188>
 8003676:	f04f 0a03 	mov.w	sl, #3
 800367a:	e787      	b.n	800358c <_scanf_float+0x188>
 800367c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003680:	4639      	mov	r1, r7
 8003682:	4640      	mov	r0, r8
 8003684:	4798      	blx	r3
 8003686:	2800      	cmp	r0, #0
 8003688:	f43f aedf 	beq.w	800344a <_scanf_float+0x46>
 800368c:	e6ea      	b.n	8003464 <_scanf_float+0x60>
 800368e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003692:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003696:	463a      	mov	r2, r7
 8003698:	4640      	mov	r0, r8
 800369a:	4798      	blx	r3
 800369c:	6923      	ldr	r3, [r4, #16]
 800369e:	3b01      	subs	r3, #1
 80036a0:	6123      	str	r3, [r4, #16]
 80036a2:	e6ec      	b.n	800347e <_scanf_float+0x7a>
 80036a4:	1e6b      	subs	r3, r5, #1
 80036a6:	2b06      	cmp	r3, #6
 80036a8:	d825      	bhi.n	80036f6 <_scanf_float+0x2f2>
 80036aa:	2d02      	cmp	r5, #2
 80036ac:	d836      	bhi.n	800371c <_scanf_float+0x318>
 80036ae:	455e      	cmp	r6, fp
 80036b0:	f67f aee8 	bls.w	8003484 <_scanf_float+0x80>
 80036b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80036b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80036bc:	463a      	mov	r2, r7
 80036be:	4640      	mov	r0, r8
 80036c0:	4798      	blx	r3
 80036c2:	6923      	ldr	r3, [r4, #16]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	6123      	str	r3, [r4, #16]
 80036c8:	e7f1      	b.n	80036ae <_scanf_float+0x2aa>
 80036ca:	9802      	ldr	r0, [sp, #8]
 80036cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80036d0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80036d4:	9002      	str	r0, [sp, #8]
 80036d6:	463a      	mov	r2, r7
 80036d8:	4640      	mov	r0, r8
 80036da:	4798      	blx	r3
 80036dc:	6923      	ldr	r3, [r4, #16]
 80036de:	3b01      	subs	r3, #1
 80036e0:	6123      	str	r3, [r4, #16]
 80036e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80036e6:	fa5f fa8a 	uxtb.w	sl, sl
 80036ea:	f1ba 0f02 	cmp.w	sl, #2
 80036ee:	d1ec      	bne.n	80036ca <_scanf_float+0x2c6>
 80036f0:	3d03      	subs	r5, #3
 80036f2:	b2ed      	uxtb	r5, r5
 80036f4:	1b76      	subs	r6, r6, r5
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	05da      	lsls	r2, r3, #23
 80036fa:	d52f      	bpl.n	800375c <_scanf_float+0x358>
 80036fc:	055b      	lsls	r3, r3, #21
 80036fe:	d510      	bpl.n	8003722 <_scanf_float+0x31e>
 8003700:	455e      	cmp	r6, fp
 8003702:	f67f aebf 	bls.w	8003484 <_scanf_float+0x80>
 8003706:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800370a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800370e:	463a      	mov	r2, r7
 8003710:	4640      	mov	r0, r8
 8003712:	4798      	blx	r3
 8003714:	6923      	ldr	r3, [r4, #16]
 8003716:	3b01      	subs	r3, #1
 8003718:	6123      	str	r3, [r4, #16]
 800371a:	e7f1      	b.n	8003700 <_scanf_float+0x2fc>
 800371c:	46aa      	mov	sl, r5
 800371e:	9602      	str	r6, [sp, #8]
 8003720:	e7df      	b.n	80036e2 <_scanf_float+0x2de>
 8003722:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003726:	6923      	ldr	r3, [r4, #16]
 8003728:	2965      	cmp	r1, #101	; 0x65
 800372a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800372e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8003732:	6123      	str	r3, [r4, #16]
 8003734:	d00c      	beq.n	8003750 <_scanf_float+0x34c>
 8003736:	2945      	cmp	r1, #69	; 0x45
 8003738:	d00a      	beq.n	8003750 <_scanf_float+0x34c>
 800373a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800373e:	463a      	mov	r2, r7
 8003740:	4640      	mov	r0, r8
 8003742:	4798      	blx	r3
 8003744:	6923      	ldr	r3, [r4, #16]
 8003746:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800374a:	3b01      	subs	r3, #1
 800374c:	1eb5      	subs	r5, r6, #2
 800374e:	6123      	str	r3, [r4, #16]
 8003750:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003754:	463a      	mov	r2, r7
 8003756:	4640      	mov	r0, r8
 8003758:	4798      	blx	r3
 800375a:	462e      	mov	r6, r5
 800375c:	6825      	ldr	r5, [r4, #0]
 800375e:	f015 0510 	ands.w	r5, r5, #16
 8003762:	d155      	bne.n	8003810 <_scanf_float+0x40c>
 8003764:	7035      	strb	r5, [r6, #0]
 8003766:	6823      	ldr	r3, [r4, #0]
 8003768:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800376c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003770:	d11b      	bne.n	80037aa <_scanf_float+0x3a6>
 8003772:	9b01      	ldr	r3, [sp, #4]
 8003774:	454b      	cmp	r3, r9
 8003776:	eba3 0209 	sub.w	r2, r3, r9
 800377a:	d123      	bne.n	80037c4 <_scanf_float+0x3c0>
 800377c:	2200      	movs	r2, #0
 800377e:	4659      	mov	r1, fp
 8003780:	4640      	mov	r0, r8
 8003782:	f000 fe79 	bl	8004478 <_strtod_r>
 8003786:	6822      	ldr	r2, [r4, #0]
 8003788:	9b03      	ldr	r3, [sp, #12]
 800378a:	f012 0f02 	tst.w	r2, #2
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4606      	mov	r6, r0
 8003792:	460f      	mov	r7, r1
 8003794:	d021      	beq.n	80037da <_scanf_float+0x3d6>
 8003796:	1d1a      	adds	r2, r3, #4
 8003798:	9903      	ldr	r1, [sp, #12]
 800379a:	600a      	str	r2, [r1, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	e9c3 6700 	strd	r6, r7, [r3]
 80037a2:	68e3      	ldr	r3, [r4, #12]
 80037a4:	3301      	adds	r3, #1
 80037a6:	60e3      	str	r3, [r4, #12]
 80037a8:	e66d      	b.n	8003486 <_scanf_float+0x82>
 80037aa:	9b04      	ldr	r3, [sp, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0e5      	beq.n	800377c <_scanf_float+0x378>
 80037b0:	9905      	ldr	r1, [sp, #20]
 80037b2:	230a      	movs	r3, #10
 80037b4:	462a      	mov	r2, r5
 80037b6:	3101      	adds	r1, #1
 80037b8:	4640      	mov	r0, r8
 80037ba:	f000 fedf 	bl	800457c <_strtol_r>
 80037be:	9b04      	ldr	r3, [sp, #16]
 80037c0:	9e05      	ldr	r6, [sp, #20]
 80037c2:	1ac2      	subs	r2, r0, r3
 80037c4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80037c8:	429e      	cmp	r6, r3
 80037ca:	bf28      	it	cs
 80037cc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80037d0:	4910      	ldr	r1, [pc, #64]	; (8003814 <_scanf_float+0x410>)
 80037d2:	4630      	mov	r0, r6
 80037d4:	f000 f826 	bl	8003824 <siprintf>
 80037d8:	e7d0      	b.n	800377c <_scanf_float+0x378>
 80037da:	f012 0f04 	tst.w	r2, #4
 80037de:	f103 0204 	add.w	r2, r3, #4
 80037e2:	d1d9      	bne.n	8003798 <_scanf_float+0x394>
 80037e4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80037e8:	f8cc 2000 	str.w	r2, [ip]
 80037ec:	f8d3 8000 	ldr.w	r8, [r3]
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	f7fd f9a2 	bl	8000b3c <__aeabi_dcmpun>
 80037f8:	b128      	cbz	r0, 8003806 <_scanf_float+0x402>
 80037fa:	4807      	ldr	r0, [pc, #28]	; (8003818 <_scanf_float+0x414>)
 80037fc:	f000 f80e 	bl	800381c <nanf>
 8003800:	f8c8 0000 	str.w	r0, [r8]
 8003804:	e7cd      	b.n	80037a2 <_scanf_float+0x39e>
 8003806:	4630      	mov	r0, r6
 8003808:	4639      	mov	r1, r7
 800380a:	f7fd f9f5 	bl	8000bf8 <__aeabi_d2f>
 800380e:	e7f7      	b.n	8003800 <_scanf_float+0x3fc>
 8003810:	2500      	movs	r5, #0
 8003812:	e638      	b.n	8003486 <_scanf_float+0x82>
 8003814:	08007494 	.word	0x08007494
 8003818:	080078a0 	.word	0x080078a0

0800381c <nanf>:
 800381c:	4800      	ldr	r0, [pc, #0]	; (8003820 <nanf+0x4>)
 800381e:	4770      	bx	lr
 8003820:	7fc00000 	.word	0x7fc00000

08003824 <siprintf>:
 8003824:	b40e      	push	{r1, r2, r3}
 8003826:	b500      	push	{lr}
 8003828:	b09c      	sub	sp, #112	; 0x70
 800382a:	ab1d      	add	r3, sp, #116	; 0x74
 800382c:	9002      	str	r0, [sp, #8]
 800382e:	9006      	str	r0, [sp, #24]
 8003830:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003834:	4809      	ldr	r0, [pc, #36]	; (800385c <siprintf+0x38>)
 8003836:	9107      	str	r1, [sp, #28]
 8003838:	9104      	str	r1, [sp, #16]
 800383a:	4909      	ldr	r1, [pc, #36]	; (8003860 <siprintf+0x3c>)
 800383c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003840:	9105      	str	r1, [sp, #20]
 8003842:	6800      	ldr	r0, [r0, #0]
 8003844:	9301      	str	r3, [sp, #4]
 8003846:	a902      	add	r1, sp, #8
 8003848:	f002 feaa 	bl	80065a0 <_svfiprintf_r>
 800384c:	9b02      	ldr	r3, [sp, #8]
 800384e:	2200      	movs	r2, #0
 8003850:	701a      	strb	r2, [r3, #0]
 8003852:	b01c      	add	sp, #112	; 0x70
 8003854:	f85d eb04 	ldr.w	lr, [sp], #4
 8003858:	b003      	add	sp, #12
 800385a:	4770      	bx	lr
 800385c:	20000044 	.word	0x20000044
 8003860:	ffff0208 	.word	0xffff0208

08003864 <sulp>:
 8003864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003868:	460f      	mov	r7, r1
 800386a:	4690      	mov	r8, r2
 800386c:	f002 fc02 	bl	8006074 <__ulp>
 8003870:	4604      	mov	r4, r0
 8003872:	460d      	mov	r5, r1
 8003874:	f1b8 0f00 	cmp.w	r8, #0
 8003878:	d011      	beq.n	800389e <sulp+0x3a>
 800387a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800387e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003882:	2b00      	cmp	r3, #0
 8003884:	dd0b      	ble.n	800389e <sulp+0x3a>
 8003886:	051b      	lsls	r3, r3, #20
 8003888:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800388c:	2400      	movs	r4, #0
 800388e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003892:	4622      	mov	r2, r4
 8003894:	462b      	mov	r3, r5
 8003896:	f7fc feb7 	bl	8000608 <__aeabi_dmul>
 800389a:	4604      	mov	r4, r0
 800389c:	460d      	mov	r5, r1
 800389e:	4620      	mov	r0, r4
 80038a0:	4629      	mov	r1, r5
 80038a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080038a8 <_strtod_l>:
 80038a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ac:	b09f      	sub	sp, #124	; 0x7c
 80038ae:	469b      	mov	fp, r3
 80038b0:	2300      	movs	r3, #0
 80038b2:	931a      	str	r3, [sp, #104]	; 0x68
 80038b4:	4b9e      	ldr	r3, [pc, #632]	; (8003b30 <_strtod_l+0x288>)
 80038b6:	9215      	str	r2, [sp, #84]	; 0x54
 80038b8:	681f      	ldr	r7, [r3, #0]
 80038ba:	4682      	mov	sl, r0
 80038bc:	4638      	mov	r0, r7
 80038be:	460e      	mov	r6, r1
 80038c0:	f7fc fc8e 	bl	80001e0 <strlen>
 80038c4:	f04f 0800 	mov.w	r8, #0
 80038c8:	4604      	mov	r4, r0
 80038ca:	f04f 0900 	mov.w	r9, #0
 80038ce:	9619      	str	r6, [sp, #100]	; 0x64
 80038d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80038d2:	781a      	ldrb	r2, [r3, #0]
 80038d4:	2a2b      	cmp	r2, #43	; 0x2b
 80038d6:	d04c      	beq.n	8003972 <_strtod_l+0xca>
 80038d8:	d83a      	bhi.n	8003950 <_strtod_l+0xa8>
 80038da:	2a0d      	cmp	r2, #13
 80038dc:	d833      	bhi.n	8003946 <_strtod_l+0x9e>
 80038de:	2a08      	cmp	r2, #8
 80038e0:	d833      	bhi.n	800394a <_strtod_l+0xa2>
 80038e2:	2a00      	cmp	r2, #0
 80038e4:	d03d      	beq.n	8003962 <_strtod_l+0xba>
 80038e6:	2300      	movs	r3, #0
 80038e8:	930a      	str	r3, [sp, #40]	; 0x28
 80038ea:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80038ec:	782b      	ldrb	r3, [r5, #0]
 80038ee:	2b30      	cmp	r3, #48	; 0x30
 80038f0:	f040 80aa 	bne.w	8003a48 <_strtod_l+0x1a0>
 80038f4:	786b      	ldrb	r3, [r5, #1]
 80038f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80038fa:	2b58      	cmp	r3, #88	; 0x58
 80038fc:	d166      	bne.n	80039cc <_strtod_l+0x124>
 80038fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003900:	9301      	str	r3, [sp, #4]
 8003902:	ab1a      	add	r3, sp, #104	; 0x68
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	4a8b      	ldr	r2, [pc, #556]	; (8003b34 <_strtod_l+0x28c>)
 8003908:	f8cd b008 	str.w	fp, [sp, #8]
 800390c:	ab1b      	add	r3, sp, #108	; 0x6c
 800390e:	a919      	add	r1, sp, #100	; 0x64
 8003910:	4650      	mov	r0, sl
 8003912:	f001 fd19 	bl	8005348 <__gethex>
 8003916:	f010 0607 	ands.w	r6, r0, #7
 800391a:	4604      	mov	r4, r0
 800391c:	d005      	beq.n	800392a <_strtod_l+0x82>
 800391e:	2e06      	cmp	r6, #6
 8003920:	d129      	bne.n	8003976 <_strtod_l+0xce>
 8003922:	3501      	adds	r5, #1
 8003924:	2300      	movs	r3, #0
 8003926:	9519      	str	r5, [sp, #100]	; 0x64
 8003928:	930a      	str	r3, [sp, #40]	; 0x28
 800392a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800392c:	2b00      	cmp	r3, #0
 800392e:	f040 858a 	bne.w	8004446 <_strtod_l+0xb9e>
 8003932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003934:	b1d3      	cbz	r3, 800396c <_strtod_l+0xc4>
 8003936:	4642      	mov	r2, r8
 8003938:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800393c:	4610      	mov	r0, r2
 800393e:	4619      	mov	r1, r3
 8003940:	b01f      	add	sp, #124	; 0x7c
 8003942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003946:	2a20      	cmp	r2, #32
 8003948:	d1cd      	bne.n	80038e6 <_strtod_l+0x3e>
 800394a:	3301      	adds	r3, #1
 800394c:	9319      	str	r3, [sp, #100]	; 0x64
 800394e:	e7bf      	b.n	80038d0 <_strtod_l+0x28>
 8003950:	2a2d      	cmp	r2, #45	; 0x2d
 8003952:	d1c8      	bne.n	80038e6 <_strtod_l+0x3e>
 8003954:	2201      	movs	r2, #1
 8003956:	920a      	str	r2, [sp, #40]	; 0x28
 8003958:	1c5a      	adds	r2, r3, #1
 800395a:	9219      	str	r2, [sp, #100]	; 0x64
 800395c:	785b      	ldrb	r3, [r3, #1]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1c3      	bne.n	80038ea <_strtod_l+0x42>
 8003962:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003964:	9619      	str	r6, [sp, #100]	; 0x64
 8003966:	2b00      	cmp	r3, #0
 8003968:	f040 856b 	bne.w	8004442 <_strtod_l+0xb9a>
 800396c:	4642      	mov	r2, r8
 800396e:	464b      	mov	r3, r9
 8003970:	e7e4      	b.n	800393c <_strtod_l+0x94>
 8003972:	2200      	movs	r2, #0
 8003974:	e7ef      	b.n	8003956 <_strtod_l+0xae>
 8003976:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003978:	b13a      	cbz	r2, 800398a <_strtod_l+0xe2>
 800397a:	2135      	movs	r1, #53	; 0x35
 800397c:	a81c      	add	r0, sp, #112	; 0x70
 800397e:	f002 fc7d 	bl	800627c <__copybits>
 8003982:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003984:	4650      	mov	r0, sl
 8003986:	f002 f849 	bl	8005a1c <_Bfree>
 800398a:	3e01      	subs	r6, #1
 800398c:	2e04      	cmp	r6, #4
 800398e:	d806      	bhi.n	800399e <_strtod_l+0xf6>
 8003990:	e8df f006 	tbb	[pc, r6]
 8003994:	1714030a 	.word	0x1714030a
 8003998:	0a          	.byte	0x0a
 8003999:	00          	.byte	0x00
 800399a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800399e:	0721      	lsls	r1, r4, #28
 80039a0:	d5c3      	bpl.n	800392a <_strtod_l+0x82>
 80039a2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80039a6:	e7c0      	b.n	800392a <_strtod_l+0x82>
 80039a8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80039ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80039ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80039b2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80039b6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80039ba:	e7f0      	b.n	800399e <_strtod_l+0xf6>
 80039bc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8003b38 <_strtod_l+0x290>
 80039c0:	e7ed      	b.n	800399e <_strtod_l+0xf6>
 80039c2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80039c6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80039ca:	e7e8      	b.n	800399e <_strtod_l+0xf6>
 80039cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	9219      	str	r2, [sp, #100]	; 0x64
 80039d2:	785b      	ldrb	r3, [r3, #1]
 80039d4:	2b30      	cmp	r3, #48	; 0x30
 80039d6:	d0f9      	beq.n	80039cc <_strtod_l+0x124>
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0a6      	beq.n	800392a <_strtod_l+0x82>
 80039dc:	2301      	movs	r3, #1
 80039de:	9307      	str	r3, [sp, #28]
 80039e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80039e2:	9308      	str	r3, [sp, #32]
 80039e4:	2300      	movs	r3, #0
 80039e6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80039ea:	469b      	mov	fp, r3
 80039ec:	220a      	movs	r2, #10
 80039ee:	9819      	ldr	r0, [sp, #100]	; 0x64
 80039f0:	7805      	ldrb	r5, [r0, #0]
 80039f2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80039f6:	b2d9      	uxtb	r1, r3
 80039f8:	2909      	cmp	r1, #9
 80039fa:	d927      	bls.n	8003a4c <_strtod_l+0x1a4>
 80039fc:	4622      	mov	r2, r4
 80039fe:	4639      	mov	r1, r7
 8003a00:	f002 fee4 	bl	80067cc <strncmp>
 8003a04:	2800      	cmp	r0, #0
 8003a06:	d033      	beq.n	8003a70 <_strtod_l+0x1c8>
 8003a08:	2000      	movs	r0, #0
 8003a0a:	462a      	mov	r2, r5
 8003a0c:	465c      	mov	r4, fp
 8003a0e:	9004      	str	r0, [sp, #16]
 8003a10:	4603      	mov	r3, r0
 8003a12:	2a65      	cmp	r2, #101	; 0x65
 8003a14:	d001      	beq.n	8003a1a <_strtod_l+0x172>
 8003a16:	2a45      	cmp	r2, #69	; 0x45
 8003a18:	d114      	bne.n	8003a44 <_strtod_l+0x19c>
 8003a1a:	b91c      	cbnz	r4, 8003a24 <_strtod_l+0x17c>
 8003a1c:	9a07      	ldr	r2, [sp, #28]
 8003a1e:	4302      	orrs	r2, r0
 8003a20:	d09f      	beq.n	8003962 <_strtod_l+0xba>
 8003a22:	2400      	movs	r4, #0
 8003a24:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8003a26:	1c72      	adds	r2, r6, #1
 8003a28:	9219      	str	r2, [sp, #100]	; 0x64
 8003a2a:	7872      	ldrb	r2, [r6, #1]
 8003a2c:	2a2b      	cmp	r2, #43	; 0x2b
 8003a2e:	d079      	beq.n	8003b24 <_strtod_l+0x27c>
 8003a30:	2a2d      	cmp	r2, #45	; 0x2d
 8003a32:	f000 8083 	beq.w	8003b3c <_strtod_l+0x294>
 8003a36:	2700      	movs	r7, #0
 8003a38:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8003a3c:	2909      	cmp	r1, #9
 8003a3e:	f240 8083 	bls.w	8003b48 <_strtod_l+0x2a0>
 8003a42:	9619      	str	r6, [sp, #100]	; 0x64
 8003a44:	2500      	movs	r5, #0
 8003a46:	e09f      	b.n	8003b88 <_strtod_l+0x2e0>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	e7c8      	b.n	80039de <_strtod_l+0x136>
 8003a4c:	f1bb 0f08 	cmp.w	fp, #8
 8003a50:	bfd5      	itete	le
 8003a52:	9906      	ldrle	r1, [sp, #24]
 8003a54:	9905      	ldrgt	r1, [sp, #20]
 8003a56:	fb02 3301 	mlale	r3, r2, r1, r3
 8003a5a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8003a5e:	f100 0001 	add.w	r0, r0, #1
 8003a62:	bfd4      	ite	le
 8003a64:	9306      	strle	r3, [sp, #24]
 8003a66:	9305      	strgt	r3, [sp, #20]
 8003a68:	f10b 0b01 	add.w	fp, fp, #1
 8003a6c:	9019      	str	r0, [sp, #100]	; 0x64
 8003a6e:	e7be      	b.n	80039ee <_strtod_l+0x146>
 8003a70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003a72:	191a      	adds	r2, r3, r4
 8003a74:	9219      	str	r2, [sp, #100]	; 0x64
 8003a76:	5d1a      	ldrb	r2, [r3, r4]
 8003a78:	f1bb 0f00 	cmp.w	fp, #0
 8003a7c:	d036      	beq.n	8003aec <_strtod_l+0x244>
 8003a7e:	9004      	str	r0, [sp, #16]
 8003a80:	465c      	mov	r4, fp
 8003a82:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003a86:	2b09      	cmp	r3, #9
 8003a88:	d912      	bls.n	8003ab0 <_strtod_l+0x208>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e7c1      	b.n	8003a12 <_strtod_l+0x16a>
 8003a8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	9219      	str	r2, [sp, #100]	; 0x64
 8003a94:	785a      	ldrb	r2, [r3, #1]
 8003a96:	3001      	adds	r0, #1
 8003a98:	2a30      	cmp	r2, #48	; 0x30
 8003a9a:	d0f8      	beq.n	8003a8e <_strtod_l+0x1e6>
 8003a9c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	f200 84d5 	bhi.w	8004450 <_strtod_l+0xba8>
 8003aa6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003aa8:	9004      	str	r0, [sp, #16]
 8003aaa:	2000      	movs	r0, #0
 8003aac:	9308      	str	r3, [sp, #32]
 8003aae:	4604      	mov	r4, r0
 8003ab0:	3a30      	subs	r2, #48	; 0x30
 8003ab2:	f100 0301 	add.w	r3, r0, #1
 8003ab6:	d013      	beq.n	8003ae0 <_strtod_l+0x238>
 8003ab8:	9904      	ldr	r1, [sp, #16]
 8003aba:	4419      	add	r1, r3
 8003abc:	9104      	str	r1, [sp, #16]
 8003abe:	4623      	mov	r3, r4
 8003ac0:	1905      	adds	r5, r0, r4
 8003ac2:	210a      	movs	r1, #10
 8003ac4:	42ab      	cmp	r3, r5
 8003ac6:	d113      	bne.n	8003af0 <_strtod_l+0x248>
 8003ac8:	1823      	adds	r3, r4, r0
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	f104 0401 	add.w	r4, r4, #1
 8003ad0:	4404      	add	r4, r0
 8003ad2:	dc1b      	bgt.n	8003b0c <_strtod_l+0x264>
 8003ad4:	9906      	ldr	r1, [sp, #24]
 8003ad6:	230a      	movs	r3, #10
 8003ad8:	fb03 2301 	mla	r3, r3, r1, r2
 8003adc:	9306      	str	r3, [sp, #24]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003ae2:	1c51      	adds	r1, r2, #1
 8003ae4:	9119      	str	r1, [sp, #100]	; 0x64
 8003ae6:	7852      	ldrb	r2, [r2, #1]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	e7ca      	b.n	8003a82 <_strtod_l+0x1da>
 8003aec:	4658      	mov	r0, fp
 8003aee:	e7d3      	b.n	8003a98 <_strtod_l+0x1f0>
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	dc04      	bgt.n	8003afe <_strtod_l+0x256>
 8003af4:	9f06      	ldr	r7, [sp, #24]
 8003af6:	434f      	muls	r7, r1
 8003af8:	9706      	str	r7, [sp, #24]
 8003afa:	3301      	adds	r3, #1
 8003afc:	e7e2      	b.n	8003ac4 <_strtod_l+0x21c>
 8003afe:	1c5f      	adds	r7, r3, #1
 8003b00:	2f10      	cmp	r7, #16
 8003b02:	bfde      	ittt	le
 8003b04:	9f05      	ldrle	r7, [sp, #20]
 8003b06:	434f      	mulle	r7, r1
 8003b08:	9705      	strle	r7, [sp, #20]
 8003b0a:	e7f6      	b.n	8003afa <_strtod_l+0x252>
 8003b0c:	2c10      	cmp	r4, #16
 8003b0e:	bfdf      	itttt	le
 8003b10:	9905      	ldrle	r1, [sp, #20]
 8003b12:	230a      	movle	r3, #10
 8003b14:	fb03 2301 	mlale	r3, r3, r1, r2
 8003b18:	9305      	strle	r3, [sp, #20]
 8003b1a:	e7e0      	b.n	8003ade <_strtod_l+0x236>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	9304      	str	r3, [sp, #16]
 8003b20:	2301      	movs	r3, #1
 8003b22:	e77b      	b.n	8003a1c <_strtod_l+0x174>
 8003b24:	2700      	movs	r7, #0
 8003b26:	1cb2      	adds	r2, r6, #2
 8003b28:	9219      	str	r2, [sp, #100]	; 0x64
 8003b2a:	78b2      	ldrb	r2, [r6, #2]
 8003b2c:	e784      	b.n	8003a38 <_strtod_l+0x190>
 8003b2e:	bf00      	nop
 8003b30:	080076e8 	.word	0x080076e8
 8003b34:	0800749c 	.word	0x0800749c
 8003b38:	7ff00000 	.word	0x7ff00000
 8003b3c:	2701      	movs	r7, #1
 8003b3e:	e7f2      	b.n	8003b26 <_strtod_l+0x27e>
 8003b40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003b42:	1c51      	adds	r1, r2, #1
 8003b44:	9119      	str	r1, [sp, #100]	; 0x64
 8003b46:	7852      	ldrb	r2, [r2, #1]
 8003b48:	2a30      	cmp	r2, #48	; 0x30
 8003b4a:	d0f9      	beq.n	8003b40 <_strtod_l+0x298>
 8003b4c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8003b50:	2908      	cmp	r1, #8
 8003b52:	f63f af77 	bhi.w	8003a44 <_strtod_l+0x19c>
 8003b56:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8003b5a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003b5c:	9209      	str	r2, [sp, #36]	; 0x24
 8003b5e:	f04f 0e0a 	mov.w	lr, #10
 8003b62:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003b64:	1c51      	adds	r1, r2, #1
 8003b66:	9119      	str	r1, [sp, #100]	; 0x64
 8003b68:	7852      	ldrb	r2, [r2, #1]
 8003b6a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8003b6e:	2d09      	cmp	r5, #9
 8003b70:	d935      	bls.n	8003bde <_strtod_l+0x336>
 8003b72:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003b74:	1b49      	subs	r1, r1, r5
 8003b76:	2908      	cmp	r1, #8
 8003b78:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8003b7c:	dc02      	bgt.n	8003b84 <_strtod_l+0x2dc>
 8003b7e:	4565      	cmp	r5, ip
 8003b80:	bfa8      	it	ge
 8003b82:	4665      	movge	r5, ip
 8003b84:	b107      	cbz	r7, 8003b88 <_strtod_l+0x2e0>
 8003b86:	426d      	negs	r5, r5
 8003b88:	2c00      	cmp	r4, #0
 8003b8a:	d14c      	bne.n	8003c26 <_strtod_l+0x37e>
 8003b8c:	9907      	ldr	r1, [sp, #28]
 8003b8e:	4301      	orrs	r1, r0
 8003b90:	f47f aecb 	bne.w	800392a <_strtod_l+0x82>
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f47f aee4 	bne.w	8003962 <_strtod_l+0xba>
 8003b9a:	2a69      	cmp	r2, #105	; 0x69
 8003b9c:	d026      	beq.n	8003bec <_strtod_l+0x344>
 8003b9e:	dc23      	bgt.n	8003be8 <_strtod_l+0x340>
 8003ba0:	2a49      	cmp	r2, #73	; 0x49
 8003ba2:	d023      	beq.n	8003bec <_strtod_l+0x344>
 8003ba4:	2a4e      	cmp	r2, #78	; 0x4e
 8003ba6:	f47f aedc 	bne.w	8003962 <_strtod_l+0xba>
 8003baa:	499d      	ldr	r1, [pc, #628]	; (8003e20 <_strtod_l+0x578>)
 8003bac:	a819      	add	r0, sp, #100	; 0x64
 8003bae:	f001 fe19 	bl	80057e4 <__match>
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	f43f aed5 	beq.w	8003962 <_strtod_l+0xba>
 8003bb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b28      	cmp	r3, #40	; 0x28
 8003bbe:	d12c      	bne.n	8003c1a <_strtod_l+0x372>
 8003bc0:	4998      	ldr	r1, [pc, #608]	; (8003e24 <_strtod_l+0x57c>)
 8003bc2:	aa1c      	add	r2, sp, #112	; 0x70
 8003bc4:	a819      	add	r0, sp, #100	; 0x64
 8003bc6:	f001 fe21 	bl	800580c <__hexnan>
 8003bca:	2805      	cmp	r0, #5
 8003bcc:	d125      	bne.n	8003c1a <_strtod_l+0x372>
 8003bce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003bd0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8003bd4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8003bd8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8003bdc:	e6a5      	b.n	800392a <_strtod_l+0x82>
 8003bde:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8003be2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8003be6:	e7bc      	b.n	8003b62 <_strtod_l+0x2ba>
 8003be8:	2a6e      	cmp	r2, #110	; 0x6e
 8003bea:	e7dc      	b.n	8003ba6 <_strtod_l+0x2fe>
 8003bec:	498e      	ldr	r1, [pc, #568]	; (8003e28 <_strtod_l+0x580>)
 8003bee:	a819      	add	r0, sp, #100	; 0x64
 8003bf0:	f001 fdf8 	bl	80057e4 <__match>
 8003bf4:	2800      	cmp	r0, #0
 8003bf6:	f43f aeb4 	beq.w	8003962 <_strtod_l+0xba>
 8003bfa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003bfc:	498b      	ldr	r1, [pc, #556]	; (8003e2c <_strtod_l+0x584>)
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	a819      	add	r0, sp, #100	; 0x64
 8003c02:	9319      	str	r3, [sp, #100]	; 0x64
 8003c04:	f001 fdee 	bl	80057e4 <__match>
 8003c08:	b910      	cbnz	r0, 8003c10 <_strtod_l+0x368>
 8003c0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	9319      	str	r3, [sp, #100]	; 0x64
 8003c10:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8003e30 <_strtod_l+0x588>
 8003c14:	f04f 0800 	mov.w	r8, #0
 8003c18:	e687      	b.n	800392a <_strtod_l+0x82>
 8003c1a:	4886      	ldr	r0, [pc, #536]	; (8003e34 <_strtod_l+0x58c>)
 8003c1c:	f002 fdc0 	bl	80067a0 <nan>
 8003c20:	4680      	mov	r8, r0
 8003c22:	4689      	mov	r9, r1
 8003c24:	e681      	b.n	800392a <_strtod_l+0x82>
 8003c26:	9b04      	ldr	r3, [sp, #16]
 8003c28:	9806      	ldr	r0, [sp, #24]
 8003c2a:	1aeb      	subs	r3, r5, r3
 8003c2c:	f1bb 0f00 	cmp.w	fp, #0
 8003c30:	bf08      	it	eq
 8003c32:	46a3      	moveq	fp, r4
 8003c34:	2c10      	cmp	r4, #16
 8003c36:	9307      	str	r3, [sp, #28]
 8003c38:	4626      	mov	r6, r4
 8003c3a:	bfa8      	it	ge
 8003c3c:	2610      	movge	r6, #16
 8003c3e:	f7fc fc69 	bl	8000514 <__aeabi_ui2d>
 8003c42:	2c09      	cmp	r4, #9
 8003c44:	4680      	mov	r8, r0
 8003c46:	4689      	mov	r9, r1
 8003c48:	dd13      	ble.n	8003c72 <_strtod_l+0x3ca>
 8003c4a:	4b7b      	ldr	r3, [pc, #492]	; (8003e38 <_strtod_l+0x590>)
 8003c4c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003c50:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003c54:	f7fc fcd8 	bl	8000608 <__aeabi_dmul>
 8003c58:	4680      	mov	r8, r0
 8003c5a:	9805      	ldr	r0, [sp, #20]
 8003c5c:	4689      	mov	r9, r1
 8003c5e:	f7fc fc59 	bl	8000514 <__aeabi_ui2d>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4640      	mov	r0, r8
 8003c68:	4649      	mov	r1, r9
 8003c6a:	f7fc fb17 	bl	800029c <__adddf3>
 8003c6e:	4680      	mov	r8, r0
 8003c70:	4689      	mov	r9, r1
 8003c72:	2c0f      	cmp	r4, #15
 8003c74:	dc36      	bgt.n	8003ce4 <_strtod_l+0x43c>
 8003c76:	9b07      	ldr	r3, [sp, #28]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f43f ae56 	beq.w	800392a <_strtod_l+0x82>
 8003c7e:	dd22      	ble.n	8003cc6 <_strtod_l+0x41e>
 8003c80:	2b16      	cmp	r3, #22
 8003c82:	dc09      	bgt.n	8003c98 <_strtod_l+0x3f0>
 8003c84:	496c      	ldr	r1, [pc, #432]	; (8003e38 <_strtod_l+0x590>)
 8003c86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003c8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c8e:	4642      	mov	r2, r8
 8003c90:	464b      	mov	r3, r9
 8003c92:	f7fc fcb9 	bl	8000608 <__aeabi_dmul>
 8003c96:	e7c3      	b.n	8003c20 <_strtod_l+0x378>
 8003c98:	9a07      	ldr	r2, [sp, #28]
 8003c9a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	db20      	blt.n	8003ce4 <_strtod_l+0x43c>
 8003ca2:	4d65      	ldr	r5, [pc, #404]	; (8003e38 <_strtod_l+0x590>)
 8003ca4:	f1c4 040f 	rsb	r4, r4, #15
 8003ca8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8003cac:	4642      	mov	r2, r8
 8003cae:	464b      	mov	r3, r9
 8003cb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cb4:	f7fc fca8 	bl	8000608 <__aeabi_dmul>
 8003cb8:	9b07      	ldr	r3, [sp, #28]
 8003cba:	1b1c      	subs	r4, r3, r4
 8003cbc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8003cc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003cc4:	e7e5      	b.n	8003c92 <_strtod_l+0x3ea>
 8003cc6:	9b07      	ldr	r3, [sp, #28]
 8003cc8:	3316      	adds	r3, #22
 8003cca:	db0b      	blt.n	8003ce4 <_strtod_l+0x43c>
 8003ccc:	9b04      	ldr	r3, [sp, #16]
 8003cce:	1b5d      	subs	r5, r3, r5
 8003cd0:	4b59      	ldr	r3, [pc, #356]	; (8003e38 <_strtod_l+0x590>)
 8003cd2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003cd6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003cda:	4640      	mov	r0, r8
 8003cdc:	4649      	mov	r1, r9
 8003cde:	f7fc fdbd 	bl	800085c <__aeabi_ddiv>
 8003ce2:	e79d      	b.n	8003c20 <_strtod_l+0x378>
 8003ce4:	9b07      	ldr	r3, [sp, #28]
 8003ce6:	1ba6      	subs	r6, r4, r6
 8003ce8:	441e      	add	r6, r3
 8003cea:	2e00      	cmp	r6, #0
 8003cec:	dd74      	ble.n	8003dd8 <_strtod_l+0x530>
 8003cee:	f016 030f 	ands.w	r3, r6, #15
 8003cf2:	d00a      	beq.n	8003d0a <_strtod_l+0x462>
 8003cf4:	4950      	ldr	r1, [pc, #320]	; (8003e38 <_strtod_l+0x590>)
 8003cf6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003cfa:	4642      	mov	r2, r8
 8003cfc:	464b      	mov	r3, r9
 8003cfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d02:	f7fc fc81 	bl	8000608 <__aeabi_dmul>
 8003d06:	4680      	mov	r8, r0
 8003d08:	4689      	mov	r9, r1
 8003d0a:	f036 060f 	bics.w	r6, r6, #15
 8003d0e:	d052      	beq.n	8003db6 <_strtod_l+0x50e>
 8003d10:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8003d14:	dd27      	ble.n	8003d66 <_strtod_l+0x4be>
 8003d16:	f04f 0b00 	mov.w	fp, #0
 8003d1a:	f8cd b010 	str.w	fp, [sp, #16]
 8003d1e:	f8cd b020 	str.w	fp, [sp, #32]
 8003d22:	f8cd b018 	str.w	fp, [sp, #24]
 8003d26:	2322      	movs	r3, #34	; 0x22
 8003d28:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8003e30 <_strtod_l+0x588>
 8003d2c:	f8ca 3000 	str.w	r3, [sl]
 8003d30:	f04f 0800 	mov.w	r8, #0
 8003d34:	9b08      	ldr	r3, [sp, #32]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f43f adf7 	beq.w	800392a <_strtod_l+0x82>
 8003d3c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003d3e:	4650      	mov	r0, sl
 8003d40:	f001 fe6c 	bl	8005a1c <_Bfree>
 8003d44:	9906      	ldr	r1, [sp, #24]
 8003d46:	4650      	mov	r0, sl
 8003d48:	f001 fe68 	bl	8005a1c <_Bfree>
 8003d4c:	9904      	ldr	r1, [sp, #16]
 8003d4e:	4650      	mov	r0, sl
 8003d50:	f001 fe64 	bl	8005a1c <_Bfree>
 8003d54:	9908      	ldr	r1, [sp, #32]
 8003d56:	4650      	mov	r0, sl
 8003d58:	f001 fe60 	bl	8005a1c <_Bfree>
 8003d5c:	4659      	mov	r1, fp
 8003d5e:	4650      	mov	r0, sl
 8003d60:	f001 fe5c 	bl	8005a1c <_Bfree>
 8003d64:	e5e1      	b.n	800392a <_strtod_l+0x82>
 8003d66:	4b35      	ldr	r3, [pc, #212]	; (8003e3c <_strtod_l+0x594>)
 8003d68:	9305      	str	r3, [sp, #20]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	1136      	asrs	r6, r6, #4
 8003d6e:	4640      	mov	r0, r8
 8003d70:	4649      	mov	r1, r9
 8003d72:	461f      	mov	r7, r3
 8003d74:	2e01      	cmp	r6, #1
 8003d76:	dc21      	bgt.n	8003dbc <_strtod_l+0x514>
 8003d78:	b10b      	cbz	r3, 8003d7e <_strtod_l+0x4d6>
 8003d7a:	4680      	mov	r8, r0
 8003d7c:	4689      	mov	r9, r1
 8003d7e:	4b2f      	ldr	r3, [pc, #188]	; (8003e3c <_strtod_l+0x594>)
 8003d80:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8003d84:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003d88:	4642      	mov	r2, r8
 8003d8a:	464b      	mov	r3, r9
 8003d8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d90:	f7fc fc3a 	bl	8000608 <__aeabi_dmul>
 8003d94:	4b26      	ldr	r3, [pc, #152]	; (8003e30 <_strtod_l+0x588>)
 8003d96:	460a      	mov	r2, r1
 8003d98:	400b      	ands	r3, r1
 8003d9a:	4929      	ldr	r1, [pc, #164]	; (8003e40 <_strtod_l+0x598>)
 8003d9c:	428b      	cmp	r3, r1
 8003d9e:	4680      	mov	r8, r0
 8003da0:	d8b9      	bhi.n	8003d16 <_strtod_l+0x46e>
 8003da2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003da6:	428b      	cmp	r3, r1
 8003da8:	bf86      	itte	hi
 8003daa:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 8003e44 <_strtod_l+0x59c>
 8003dae:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8003db2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8003db6:	2300      	movs	r3, #0
 8003db8:	9305      	str	r3, [sp, #20]
 8003dba:	e07f      	b.n	8003ebc <_strtod_l+0x614>
 8003dbc:	07f2      	lsls	r2, r6, #31
 8003dbe:	d505      	bpl.n	8003dcc <_strtod_l+0x524>
 8003dc0:	9b05      	ldr	r3, [sp, #20]
 8003dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc6:	f7fc fc1f 	bl	8000608 <__aeabi_dmul>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	9a05      	ldr	r2, [sp, #20]
 8003dce:	3208      	adds	r2, #8
 8003dd0:	3701      	adds	r7, #1
 8003dd2:	1076      	asrs	r6, r6, #1
 8003dd4:	9205      	str	r2, [sp, #20]
 8003dd6:	e7cd      	b.n	8003d74 <_strtod_l+0x4cc>
 8003dd8:	d0ed      	beq.n	8003db6 <_strtod_l+0x50e>
 8003dda:	4276      	negs	r6, r6
 8003ddc:	f016 020f 	ands.w	r2, r6, #15
 8003de0:	d00a      	beq.n	8003df8 <_strtod_l+0x550>
 8003de2:	4b15      	ldr	r3, [pc, #84]	; (8003e38 <_strtod_l+0x590>)
 8003de4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003de8:	4640      	mov	r0, r8
 8003dea:	4649      	mov	r1, r9
 8003dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df0:	f7fc fd34 	bl	800085c <__aeabi_ddiv>
 8003df4:	4680      	mov	r8, r0
 8003df6:	4689      	mov	r9, r1
 8003df8:	1136      	asrs	r6, r6, #4
 8003dfa:	d0dc      	beq.n	8003db6 <_strtod_l+0x50e>
 8003dfc:	2e1f      	cmp	r6, #31
 8003dfe:	dd23      	ble.n	8003e48 <_strtod_l+0x5a0>
 8003e00:	f04f 0b00 	mov.w	fp, #0
 8003e04:	f8cd b010 	str.w	fp, [sp, #16]
 8003e08:	f8cd b020 	str.w	fp, [sp, #32]
 8003e0c:	f8cd b018 	str.w	fp, [sp, #24]
 8003e10:	2322      	movs	r3, #34	; 0x22
 8003e12:	f04f 0800 	mov.w	r8, #0
 8003e16:	f04f 0900 	mov.w	r9, #0
 8003e1a:	f8ca 3000 	str.w	r3, [sl]
 8003e1e:	e789      	b.n	8003d34 <_strtod_l+0x48c>
 8003e20:	0800746d 	.word	0x0800746d
 8003e24:	080074b0 	.word	0x080074b0
 8003e28:	08007465 	.word	0x08007465
 8003e2c:	080075f4 	.word	0x080075f4
 8003e30:	7ff00000 	.word	0x7ff00000
 8003e34:	080078a0 	.word	0x080078a0
 8003e38:	08007780 	.word	0x08007780
 8003e3c:	08007758 	.word	0x08007758
 8003e40:	7ca00000 	.word	0x7ca00000
 8003e44:	7fefffff 	.word	0x7fefffff
 8003e48:	f016 0310 	ands.w	r3, r6, #16
 8003e4c:	bf18      	it	ne
 8003e4e:	236a      	movne	r3, #106	; 0x6a
 8003e50:	4fb1      	ldr	r7, [pc, #708]	; (8004118 <_strtod_l+0x870>)
 8003e52:	9305      	str	r3, [sp, #20]
 8003e54:	4640      	mov	r0, r8
 8003e56:	4649      	mov	r1, r9
 8003e58:	2300      	movs	r3, #0
 8003e5a:	07f2      	lsls	r2, r6, #31
 8003e5c:	d504      	bpl.n	8003e68 <_strtod_l+0x5c0>
 8003e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e62:	f7fc fbd1 	bl	8000608 <__aeabi_dmul>
 8003e66:	2301      	movs	r3, #1
 8003e68:	1076      	asrs	r6, r6, #1
 8003e6a:	f107 0708 	add.w	r7, r7, #8
 8003e6e:	d1f4      	bne.n	8003e5a <_strtod_l+0x5b2>
 8003e70:	b10b      	cbz	r3, 8003e76 <_strtod_l+0x5ce>
 8003e72:	4680      	mov	r8, r0
 8003e74:	4689      	mov	r9, r1
 8003e76:	9b05      	ldr	r3, [sp, #20]
 8003e78:	b1c3      	cbz	r3, 8003eac <_strtod_l+0x604>
 8003e7a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8003e7e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	4649      	mov	r1, r9
 8003e86:	dd11      	ble.n	8003eac <_strtod_l+0x604>
 8003e88:	2b1f      	cmp	r3, #31
 8003e8a:	f340 8124 	ble.w	80040d6 <_strtod_l+0x82e>
 8003e8e:	2b34      	cmp	r3, #52	; 0x34
 8003e90:	bfde      	ittt	le
 8003e92:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8003e96:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8003e9a:	fa03 f202 	lslle.w	r2, r3, r2
 8003e9e:	f04f 0800 	mov.w	r8, #0
 8003ea2:	bfcc      	ite	gt
 8003ea4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8003ea8:	ea02 0901 	andle.w	r9, r2, r1
 8003eac:	2200      	movs	r2, #0
 8003eae:	2300      	movs	r3, #0
 8003eb0:	4640      	mov	r0, r8
 8003eb2:	4649      	mov	r1, r9
 8003eb4:	f7fc fe10 	bl	8000ad8 <__aeabi_dcmpeq>
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	d1a1      	bne.n	8003e00 <_strtod_l+0x558>
 8003ebc:	9b06      	ldr	r3, [sp, #24]
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	9908      	ldr	r1, [sp, #32]
 8003ec2:	4623      	mov	r3, r4
 8003ec4:	465a      	mov	r2, fp
 8003ec6:	4650      	mov	r0, sl
 8003ec8:	f001 fe10 	bl	8005aec <__s2b>
 8003ecc:	9008      	str	r0, [sp, #32]
 8003ece:	2800      	cmp	r0, #0
 8003ed0:	f43f af21 	beq.w	8003d16 <_strtod_l+0x46e>
 8003ed4:	9b04      	ldr	r3, [sp, #16]
 8003ed6:	1b5d      	subs	r5, r3, r5
 8003ed8:	9b07      	ldr	r3, [sp, #28]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	bfb4      	ite	lt
 8003ede:	462b      	movlt	r3, r5
 8003ee0:	2300      	movge	r3, #0
 8003ee2:	930e      	str	r3, [sp, #56]	; 0x38
 8003ee4:	9b07      	ldr	r3, [sp, #28]
 8003ee6:	f04f 0b00 	mov.w	fp, #0
 8003eea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003eee:	9314      	str	r3, [sp, #80]	; 0x50
 8003ef0:	f8cd b010 	str.w	fp, [sp, #16]
 8003ef4:	9b08      	ldr	r3, [sp, #32]
 8003ef6:	4650      	mov	r0, sl
 8003ef8:	6859      	ldr	r1, [r3, #4]
 8003efa:	f001 fd4f 	bl	800599c <_Balloc>
 8003efe:	9006      	str	r0, [sp, #24]
 8003f00:	2800      	cmp	r0, #0
 8003f02:	f43f af10 	beq.w	8003d26 <_strtod_l+0x47e>
 8003f06:	9b08      	ldr	r3, [sp, #32]
 8003f08:	691a      	ldr	r2, [r3, #16]
 8003f0a:	3202      	adds	r2, #2
 8003f0c:	f103 010c 	add.w	r1, r3, #12
 8003f10:	0092      	lsls	r2, r2, #2
 8003f12:	300c      	adds	r0, #12
 8003f14:	f001 fd34 	bl	8005980 <memcpy>
 8003f18:	ab1c      	add	r3, sp, #112	; 0x70
 8003f1a:	9301      	str	r3, [sp, #4]
 8003f1c:	ab1b      	add	r3, sp, #108	; 0x6c
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	4642      	mov	r2, r8
 8003f22:	464b      	mov	r3, r9
 8003f24:	4650      	mov	r0, sl
 8003f26:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8003f2a:	f002 f91d 	bl	8006168 <__d2b>
 8003f2e:	901a      	str	r0, [sp, #104]	; 0x68
 8003f30:	2800      	cmp	r0, #0
 8003f32:	f43f aef8 	beq.w	8003d26 <_strtod_l+0x47e>
 8003f36:	2101      	movs	r1, #1
 8003f38:	4650      	mov	r0, sl
 8003f3a:	f001 fe6f 	bl	8005c1c <__i2b>
 8003f3e:	9004      	str	r0, [sp, #16]
 8003f40:	4603      	mov	r3, r0
 8003f42:	2800      	cmp	r0, #0
 8003f44:	f43f aeef 	beq.w	8003d26 <_strtod_l+0x47e>
 8003f48:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003f4a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003f4c:	2d00      	cmp	r5, #0
 8003f4e:	bfab      	itete	ge
 8003f50:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8003f52:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8003f54:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8003f56:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8003f58:	bfac      	ite	ge
 8003f5a:	18ee      	addge	r6, r5, r3
 8003f5c:	1b5c      	sublt	r4, r3, r5
 8003f5e:	9b05      	ldr	r3, [sp, #20]
 8003f60:	1aed      	subs	r5, r5, r3
 8003f62:	4415      	add	r5, r2
 8003f64:	4b6d      	ldr	r3, [pc, #436]	; (800411c <_strtod_l+0x874>)
 8003f66:	3d01      	subs	r5, #1
 8003f68:	429d      	cmp	r5, r3
 8003f6a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003f6e:	f280 80c4 	bge.w	80040fa <_strtod_l+0x852>
 8003f72:	1b5b      	subs	r3, r3, r5
 8003f74:	2b1f      	cmp	r3, #31
 8003f76:	eba2 0203 	sub.w	r2, r2, r3
 8003f7a:	f04f 0701 	mov.w	r7, #1
 8003f7e:	f300 80b1 	bgt.w	80040e4 <_strtod_l+0x83c>
 8003f82:	fa07 f303 	lsl.w	r3, r7, r3
 8003f86:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f88:	2500      	movs	r5, #0
 8003f8a:	18b7      	adds	r7, r6, r2
 8003f8c:	9b05      	ldr	r3, [sp, #20]
 8003f8e:	42be      	cmp	r6, r7
 8003f90:	4414      	add	r4, r2
 8003f92:	441c      	add	r4, r3
 8003f94:	4633      	mov	r3, r6
 8003f96:	bfa8      	it	ge
 8003f98:	463b      	movge	r3, r7
 8003f9a:	42a3      	cmp	r3, r4
 8003f9c:	bfa8      	it	ge
 8003f9e:	4623      	movge	r3, r4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bfc2      	ittt	gt
 8003fa4:	1aff      	subgt	r7, r7, r3
 8003fa6:	1ae4      	subgt	r4, r4, r3
 8003fa8:	1af6      	subgt	r6, r6, r3
 8003faa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	dd17      	ble.n	8003fe0 <_strtod_l+0x738>
 8003fb0:	9904      	ldr	r1, [sp, #16]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	4650      	mov	r0, sl
 8003fb6:	f001 feef 	bl	8005d98 <__pow5mult>
 8003fba:	9004      	str	r0, [sp, #16]
 8003fbc:	2800      	cmp	r0, #0
 8003fbe:	f43f aeb2 	beq.w	8003d26 <_strtod_l+0x47e>
 8003fc2:	4601      	mov	r1, r0
 8003fc4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003fc6:	4650      	mov	r0, sl
 8003fc8:	f001 fe3e 	bl	8005c48 <__multiply>
 8003fcc:	9009      	str	r0, [sp, #36]	; 0x24
 8003fce:	2800      	cmp	r0, #0
 8003fd0:	f43f aea9 	beq.w	8003d26 <_strtod_l+0x47e>
 8003fd4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003fd6:	4650      	mov	r0, sl
 8003fd8:	f001 fd20 	bl	8005a1c <_Bfree>
 8003fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fde:	931a      	str	r3, [sp, #104]	; 0x68
 8003fe0:	2f00      	cmp	r7, #0
 8003fe2:	f300 808e 	bgt.w	8004102 <_strtod_l+0x85a>
 8003fe6:	9b07      	ldr	r3, [sp, #28]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	dd08      	ble.n	8003ffe <_strtod_l+0x756>
 8003fec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003fee:	9906      	ldr	r1, [sp, #24]
 8003ff0:	4650      	mov	r0, sl
 8003ff2:	f001 fed1 	bl	8005d98 <__pow5mult>
 8003ff6:	9006      	str	r0, [sp, #24]
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	f43f ae94 	beq.w	8003d26 <_strtod_l+0x47e>
 8003ffe:	2c00      	cmp	r4, #0
 8004000:	dd08      	ble.n	8004014 <_strtod_l+0x76c>
 8004002:	9906      	ldr	r1, [sp, #24]
 8004004:	4622      	mov	r2, r4
 8004006:	4650      	mov	r0, sl
 8004008:	f001 ff20 	bl	8005e4c <__lshift>
 800400c:	9006      	str	r0, [sp, #24]
 800400e:	2800      	cmp	r0, #0
 8004010:	f43f ae89 	beq.w	8003d26 <_strtod_l+0x47e>
 8004014:	2e00      	cmp	r6, #0
 8004016:	dd08      	ble.n	800402a <_strtod_l+0x782>
 8004018:	9904      	ldr	r1, [sp, #16]
 800401a:	4632      	mov	r2, r6
 800401c:	4650      	mov	r0, sl
 800401e:	f001 ff15 	bl	8005e4c <__lshift>
 8004022:	9004      	str	r0, [sp, #16]
 8004024:	2800      	cmp	r0, #0
 8004026:	f43f ae7e 	beq.w	8003d26 <_strtod_l+0x47e>
 800402a:	9a06      	ldr	r2, [sp, #24]
 800402c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800402e:	4650      	mov	r0, sl
 8004030:	f001 ff98 	bl	8005f64 <__mdiff>
 8004034:	4683      	mov	fp, r0
 8004036:	2800      	cmp	r0, #0
 8004038:	f43f ae75 	beq.w	8003d26 <_strtod_l+0x47e>
 800403c:	2400      	movs	r4, #0
 800403e:	68c3      	ldr	r3, [r0, #12]
 8004040:	9904      	ldr	r1, [sp, #16]
 8004042:	60c4      	str	r4, [r0, #12]
 8004044:	930b      	str	r3, [sp, #44]	; 0x2c
 8004046:	f001 ff71 	bl	8005f2c <__mcmp>
 800404a:	42a0      	cmp	r0, r4
 800404c:	da6c      	bge.n	8004128 <_strtod_l+0x880>
 800404e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004050:	ea53 0308 	orrs.w	r3, r3, r8
 8004054:	f040 8092 	bne.w	800417c <_strtod_l+0x8d4>
 8004058:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800405c:	2b00      	cmp	r3, #0
 800405e:	f040 808d 	bne.w	800417c <_strtod_l+0x8d4>
 8004062:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004066:	0d1b      	lsrs	r3, r3, #20
 8004068:	051b      	lsls	r3, r3, #20
 800406a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800406e:	f240 8085 	bls.w	800417c <_strtod_l+0x8d4>
 8004072:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004076:	b91b      	cbnz	r3, 8004080 <_strtod_l+0x7d8>
 8004078:	f8db 3010 	ldr.w	r3, [fp, #16]
 800407c:	2b01      	cmp	r3, #1
 800407e:	dd7d      	ble.n	800417c <_strtod_l+0x8d4>
 8004080:	4659      	mov	r1, fp
 8004082:	2201      	movs	r2, #1
 8004084:	4650      	mov	r0, sl
 8004086:	f001 fee1 	bl	8005e4c <__lshift>
 800408a:	9904      	ldr	r1, [sp, #16]
 800408c:	4683      	mov	fp, r0
 800408e:	f001 ff4d 	bl	8005f2c <__mcmp>
 8004092:	2800      	cmp	r0, #0
 8004094:	dd72      	ble.n	800417c <_strtod_l+0x8d4>
 8004096:	9905      	ldr	r1, [sp, #20]
 8004098:	4a21      	ldr	r2, [pc, #132]	; (8004120 <_strtod_l+0x878>)
 800409a:	464b      	mov	r3, r9
 800409c:	2900      	cmp	r1, #0
 800409e:	f000 808d 	beq.w	80041bc <_strtod_l+0x914>
 80040a2:	ea02 0109 	and.w	r1, r2, r9
 80040a6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80040aa:	f300 8087 	bgt.w	80041bc <_strtod_l+0x914>
 80040ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80040b2:	f77f aead 	ble.w	8003e10 <_strtod_l+0x568>
 80040b6:	4b1b      	ldr	r3, [pc, #108]	; (8004124 <_strtod_l+0x87c>)
 80040b8:	4640      	mov	r0, r8
 80040ba:	4649      	mov	r1, r9
 80040bc:	2200      	movs	r2, #0
 80040be:	f7fc faa3 	bl	8000608 <__aeabi_dmul>
 80040c2:	460b      	mov	r3, r1
 80040c4:	4303      	orrs	r3, r0
 80040c6:	bf08      	it	eq
 80040c8:	2322      	moveq	r3, #34	; 0x22
 80040ca:	4680      	mov	r8, r0
 80040cc:	4689      	mov	r9, r1
 80040ce:	bf08      	it	eq
 80040d0:	f8ca 3000 	streq.w	r3, [sl]
 80040d4:	e632      	b.n	8003d3c <_strtod_l+0x494>
 80040d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	ea03 0808 	and.w	r8, r3, r8
 80040e2:	e6e3      	b.n	8003eac <_strtod_l+0x604>
 80040e4:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80040e8:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80040ec:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80040f0:	35e2      	adds	r5, #226	; 0xe2
 80040f2:	fa07 f505 	lsl.w	r5, r7, r5
 80040f6:	970f      	str	r7, [sp, #60]	; 0x3c
 80040f8:	e747      	b.n	8003f8a <_strtod_l+0x6e2>
 80040fa:	2301      	movs	r3, #1
 80040fc:	2500      	movs	r5, #0
 80040fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8004100:	e743      	b.n	8003f8a <_strtod_l+0x6e2>
 8004102:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004104:	463a      	mov	r2, r7
 8004106:	4650      	mov	r0, sl
 8004108:	f001 fea0 	bl	8005e4c <__lshift>
 800410c:	901a      	str	r0, [sp, #104]	; 0x68
 800410e:	2800      	cmp	r0, #0
 8004110:	f47f af69 	bne.w	8003fe6 <_strtod_l+0x73e>
 8004114:	e607      	b.n	8003d26 <_strtod_l+0x47e>
 8004116:	bf00      	nop
 8004118:	080074c8 	.word	0x080074c8
 800411c:	fffffc02 	.word	0xfffffc02
 8004120:	7ff00000 	.word	0x7ff00000
 8004124:	39500000 	.word	0x39500000
 8004128:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800412c:	d165      	bne.n	80041fa <_strtod_l+0x952>
 800412e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004130:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004134:	b35a      	cbz	r2, 800418e <_strtod_l+0x8e6>
 8004136:	4a9a      	ldr	r2, [pc, #616]	; (80043a0 <_strtod_l+0xaf8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d12b      	bne.n	8004194 <_strtod_l+0x8ec>
 800413c:	9b05      	ldr	r3, [sp, #20]
 800413e:	4641      	mov	r1, r8
 8004140:	b303      	cbz	r3, 8004184 <_strtod_l+0x8dc>
 8004142:	4b98      	ldr	r3, [pc, #608]	; (80043a4 <_strtod_l+0xafc>)
 8004144:	464a      	mov	r2, r9
 8004146:	4013      	ands	r3, r2
 8004148:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800414c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004150:	d81b      	bhi.n	800418a <_strtod_l+0x8e2>
 8004152:	0d1b      	lsrs	r3, r3, #20
 8004154:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	4299      	cmp	r1, r3
 800415e:	d119      	bne.n	8004194 <_strtod_l+0x8ec>
 8004160:	4b91      	ldr	r3, [pc, #580]	; (80043a8 <_strtod_l+0xb00>)
 8004162:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004164:	429a      	cmp	r2, r3
 8004166:	d102      	bne.n	800416e <_strtod_l+0x8c6>
 8004168:	3101      	adds	r1, #1
 800416a:	f43f addc 	beq.w	8003d26 <_strtod_l+0x47e>
 800416e:	4b8d      	ldr	r3, [pc, #564]	; (80043a4 <_strtod_l+0xafc>)
 8004170:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004172:	401a      	ands	r2, r3
 8004174:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004178:	f04f 0800 	mov.w	r8, #0
 800417c:	9b05      	ldr	r3, [sp, #20]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d199      	bne.n	80040b6 <_strtod_l+0x80e>
 8004182:	e5db      	b.n	8003d3c <_strtod_l+0x494>
 8004184:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004188:	e7e8      	b.n	800415c <_strtod_l+0x8b4>
 800418a:	4613      	mov	r3, r2
 800418c:	e7e6      	b.n	800415c <_strtod_l+0x8b4>
 800418e:	ea53 0308 	orrs.w	r3, r3, r8
 8004192:	d080      	beq.n	8004096 <_strtod_l+0x7ee>
 8004194:	b1e5      	cbz	r5, 80041d0 <_strtod_l+0x928>
 8004196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004198:	421d      	tst	r5, r3
 800419a:	d0ef      	beq.n	800417c <_strtod_l+0x8d4>
 800419c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800419e:	9a05      	ldr	r2, [sp, #20]
 80041a0:	4640      	mov	r0, r8
 80041a2:	4649      	mov	r1, r9
 80041a4:	b1c3      	cbz	r3, 80041d8 <_strtod_l+0x930>
 80041a6:	f7ff fb5d 	bl	8003864 <sulp>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80041b2:	f7fc f873 	bl	800029c <__adddf3>
 80041b6:	4680      	mov	r8, r0
 80041b8:	4689      	mov	r9, r1
 80041ba:	e7df      	b.n	800417c <_strtod_l+0x8d4>
 80041bc:	4013      	ands	r3, r2
 80041be:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80041c2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80041c6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80041ca:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80041ce:	e7d5      	b.n	800417c <_strtod_l+0x8d4>
 80041d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041d2:	ea13 0f08 	tst.w	r3, r8
 80041d6:	e7e0      	b.n	800419a <_strtod_l+0x8f2>
 80041d8:	f7ff fb44 	bl	8003864 <sulp>
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80041e4:	f7fc f858 	bl	8000298 <__aeabi_dsub>
 80041e8:	2200      	movs	r2, #0
 80041ea:	2300      	movs	r3, #0
 80041ec:	4680      	mov	r8, r0
 80041ee:	4689      	mov	r9, r1
 80041f0:	f7fc fc72 	bl	8000ad8 <__aeabi_dcmpeq>
 80041f4:	2800      	cmp	r0, #0
 80041f6:	d0c1      	beq.n	800417c <_strtod_l+0x8d4>
 80041f8:	e60a      	b.n	8003e10 <_strtod_l+0x568>
 80041fa:	9904      	ldr	r1, [sp, #16]
 80041fc:	4658      	mov	r0, fp
 80041fe:	f002 f80f 	bl	8006220 <__ratio>
 8004202:	2200      	movs	r2, #0
 8004204:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004208:	4606      	mov	r6, r0
 800420a:	460f      	mov	r7, r1
 800420c:	f7fc fc78 	bl	8000b00 <__aeabi_dcmple>
 8004210:	2800      	cmp	r0, #0
 8004212:	d070      	beq.n	80042f6 <_strtod_l+0xa4e>
 8004214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004216:	2b00      	cmp	r3, #0
 8004218:	d042      	beq.n	80042a0 <_strtod_l+0x9f8>
 800421a:	4f64      	ldr	r7, [pc, #400]	; (80043ac <_strtod_l+0xb04>)
 800421c:	2600      	movs	r6, #0
 800421e:	4d63      	ldr	r5, [pc, #396]	; (80043ac <_strtod_l+0xb04>)
 8004220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004222:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004226:	0d1b      	lsrs	r3, r3, #20
 8004228:	051b      	lsls	r3, r3, #20
 800422a:	930f      	str	r3, [sp, #60]	; 0x3c
 800422c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800422e:	4b60      	ldr	r3, [pc, #384]	; (80043b0 <_strtod_l+0xb08>)
 8004230:	429a      	cmp	r2, r3
 8004232:	f040 80c5 	bne.w	80043c0 <_strtod_l+0xb18>
 8004236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004238:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800423c:	4640      	mov	r0, r8
 800423e:	4649      	mov	r1, r9
 8004240:	f001 ff18 	bl	8006074 <__ulp>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4630      	mov	r0, r6
 800424a:	4639      	mov	r1, r7
 800424c:	f7fc f9dc 	bl	8000608 <__aeabi_dmul>
 8004250:	4642      	mov	r2, r8
 8004252:	464b      	mov	r3, r9
 8004254:	f7fc f822 	bl	800029c <__adddf3>
 8004258:	460b      	mov	r3, r1
 800425a:	4952      	ldr	r1, [pc, #328]	; (80043a4 <_strtod_l+0xafc>)
 800425c:	4a55      	ldr	r2, [pc, #340]	; (80043b4 <_strtod_l+0xb0c>)
 800425e:	4019      	ands	r1, r3
 8004260:	4291      	cmp	r1, r2
 8004262:	4680      	mov	r8, r0
 8004264:	d95d      	bls.n	8004322 <_strtod_l+0xa7a>
 8004266:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004268:	4b4f      	ldr	r3, [pc, #316]	; (80043a8 <_strtod_l+0xb00>)
 800426a:	429a      	cmp	r2, r3
 800426c:	d103      	bne.n	8004276 <_strtod_l+0x9ce>
 800426e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004270:	3301      	adds	r3, #1
 8004272:	f43f ad58 	beq.w	8003d26 <_strtod_l+0x47e>
 8004276:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80043a8 <_strtod_l+0xb00>
 800427a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800427e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004280:	4650      	mov	r0, sl
 8004282:	f001 fbcb 	bl	8005a1c <_Bfree>
 8004286:	9906      	ldr	r1, [sp, #24]
 8004288:	4650      	mov	r0, sl
 800428a:	f001 fbc7 	bl	8005a1c <_Bfree>
 800428e:	9904      	ldr	r1, [sp, #16]
 8004290:	4650      	mov	r0, sl
 8004292:	f001 fbc3 	bl	8005a1c <_Bfree>
 8004296:	4659      	mov	r1, fp
 8004298:	4650      	mov	r0, sl
 800429a:	f001 fbbf 	bl	8005a1c <_Bfree>
 800429e:	e629      	b.n	8003ef4 <_strtod_l+0x64c>
 80042a0:	f1b8 0f00 	cmp.w	r8, #0
 80042a4:	d119      	bne.n	80042da <_strtod_l+0xa32>
 80042a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042ac:	b9e3      	cbnz	r3, 80042e8 <_strtod_l+0xa40>
 80042ae:	4b3f      	ldr	r3, [pc, #252]	; (80043ac <_strtod_l+0xb04>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	4630      	mov	r0, r6
 80042b4:	4639      	mov	r1, r7
 80042b6:	f7fc fc19 	bl	8000aec <__aeabi_dcmplt>
 80042ba:	b9c8      	cbnz	r0, 80042f0 <_strtod_l+0xa48>
 80042bc:	4b3e      	ldr	r3, [pc, #248]	; (80043b8 <_strtod_l+0xb10>)
 80042be:	2200      	movs	r2, #0
 80042c0:	4630      	mov	r0, r6
 80042c2:	4639      	mov	r1, r7
 80042c4:	f7fc f9a0 	bl	8000608 <__aeabi_dmul>
 80042c8:	4604      	mov	r4, r0
 80042ca:	460d      	mov	r5, r1
 80042cc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80042d0:	9416      	str	r4, [sp, #88]	; 0x58
 80042d2:	9317      	str	r3, [sp, #92]	; 0x5c
 80042d4:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80042d8:	e7a2      	b.n	8004220 <_strtod_l+0x978>
 80042da:	f1b8 0f01 	cmp.w	r8, #1
 80042de:	d103      	bne.n	80042e8 <_strtod_l+0xa40>
 80042e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f43f ad94 	beq.w	8003e10 <_strtod_l+0x568>
 80042e8:	4f34      	ldr	r7, [pc, #208]	; (80043bc <_strtod_l+0xb14>)
 80042ea:	2600      	movs	r6, #0
 80042ec:	2400      	movs	r4, #0
 80042ee:	e796      	b.n	800421e <_strtod_l+0x976>
 80042f0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80042f2:	4d31      	ldr	r5, [pc, #196]	; (80043b8 <_strtod_l+0xb10>)
 80042f4:	e7ea      	b.n	80042cc <_strtod_l+0xa24>
 80042f6:	4b30      	ldr	r3, [pc, #192]	; (80043b8 <_strtod_l+0xb10>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	4630      	mov	r0, r6
 80042fc:	4639      	mov	r1, r7
 80042fe:	f7fc f983 	bl	8000608 <__aeabi_dmul>
 8004302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004304:	4604      	mov	r4, r0
 8004306:	460d      	mov	r5, r1
 8004308:	b933      	cbnz	r3, 8004318 <_strtod_l+0xa70>
 800430a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800430e:	9010      	str	r0, [sp, #64]	; 0x40
 8004310:	9311      	str	r3, [sp, #68]	; 0x44
 8004312:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004316:	e783      	b.n	8004220 <_strtod_l+0x978>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004320:	e7f7      	b.n	8004312 <_strtod_l+0xa6a>
 8004322:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004326:	9b05      	ldr	r3, [sp, #20]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1a8      	bne.n	800427e <_strtod_l+0x9d6>
 800432c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004330:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004332:	0d1b      	lsrs	r3, r3, #20
 8004334:	051b      	lsls	r3, r3, #20
 8004336:	429a      	cmp	r2, r3
 8004338:	d1a1      	bne.n	800427e <_strtod_l+0x9d6>
 800433a:	4620      	mov	r0, r4
 800433c:	4629      	mov	r1, r5
 800433e:	f7fc fcab 	bl	8000c98 <__aeabi_d2lz>
 8004342:	f7fc f933 	bl	80005ac <__aeabi_l2d>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4620      	mov	r0, r4
 800434c:	4629      	mov	r1, r5
 800434e:	f7fb ffa3 	bl	8000298 <__aeabi_dsub>
 8004352:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004354:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004358:	ea43 0308 	orr.w	r3, r3, r8
 800435c:	4313      	orrs	r3, r2
 800435e:	4604      	mov	r4, r0
 8004360:	460d      	mov	r5, r1
 8004362:	d068      	beq.n	8004436 <_strtod_l+0xb8e>
 8004364:	a30a      	add	r3, pc, #40	; (adr r3, 8004390 <_strtod_l+0xae8>)
 8004366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436a:	f7fc fbbf 	bl	8000aec <__aeabi_dcmplt>
 800436e:	2800      	cmp	r0, #0
 8004370:	f47f ace4 	bne.w	8003d3c <_strtod_l+0x494>
 8004374:	a308      	add	r3, pc, #32	; (adr r3, 8004398 <_strtod_l+0xaf0>)
 8004376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437a:	4620      	mov	r0, r4
 800437c:	4629      	mov	r1, r5
 800437e:	f7fc fbd3 	bl	8000b28 <__aeabi_dcmpgt>
 8004382:	2800      	cmp	r0, #0
 8004384:	f43f af7b 	beq.w	800427e <_strtod_l+0x9d6>
 8004388:	e4d8      	b.n	8003d3c <_strtod_l+0x494>
 800438a:	bf00      	nop
 800438c:	f3af 8000 	nop.w
 8004390:	94a03595 	.word	0x94a03595
 8004394:	3fdfffff 	.word	0x3fdfffff
 8004398:	35afe535 	.word	0x35afe535
 800439c:	3fe00000 	.word	0x3fe00000
 80043a0:	000fffff 	.word	0x000fffff
 80043a4:	7ff00000 	.word	0x7ff00000
 80043a8:	7fefffff 	.word	0x7fefffff
 80043ac:	3ff00000 	.word	0x3ff00000
 80043b0:	7fe00000 	.word	0x7fe00000
 80043b4:	7c9fffff 	.word	0x7c9fffff
 80043b8:	3fe00000 	.word	0x3fe00000
 80043bc:	bff00000 	.word	0xbff00000
 80043c0:	9b05      	ldr	r3, [sp, #20]
 80043c2:	b313      	cbz	r3, 800440a <_strtod_l+0xb62>
 80043c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80043ca:	d81e      	bhi.n	800440a <_strtod_l+0xb62>
 80043cc:	a326      	add	r3, pc, #152	; (adr r3, 8004468 <_strtod_l+0xbc0>)
 80043ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d2:	4620      	mov	r0, r4
 80043d4:	4629      	mov	r1, r5
 80043d6:	f7fc fb93 	bl	8000b00 <__aeabi_dcmple>
 80043da:	b190      	cbz	r0, 8004402 <_strtod_l+0xb5a>
 80043dc:	4629      	mov	r1, r5
 80043de:	4620      	mov	r0, r4
 80043e0:	f7fc fbea 	bl	8000bb8 <__aeabi_d2uiz>
 80043e4:	2801      	cmp	r0, #1
 80043e6:	bf38      	it	cc
 80043e8:	2001      	movcc	r0, #1
 80043ea:	f7fc f893 	bl	8000514 <__aeabi_ui2d>
 80043ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043f0:	4604      	mov	r4, r0
 80043f2:	460d      	mov	r5, r1
 80043f4:	b9d3      	cbnz	r3, 800442c <_strtod_l+0xb84>
 80043f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80043fa:	9012      	str	r0, [sp, #72]	; 0x48
 80043fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80043fe:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004402:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004404:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004408:	1a9f      	subs	r7, r3, r2
 800440a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800440e:	f001 fe31 	bl	8006074 <__ulp>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4630      	mov	r0, r6
 8004418:	4639      	mov	r1, r7
 800441a:	f7fc f8f5 	bl	8000608 <__aeabi_dmul>
 800441e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004422:	f7fb ff3b 	bl	800029c <__adddf3>
 8004426:	4680      	mov	r8, r0
 8004428:	4689      	mov	r9, r1
 800442a:	e77c      	b.n	8004326 <_strtod_l+0xa7e>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004434:	e7e3      	b.n	80043fe <_strtod_l+0xb56>
 8004436:	a30e      	add	r3, pc, #56	; (adr r3, 8004470 <_strtod_l+0xbc8>)
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	f7fc fb56 	bl	8000aec <__aeabi_dcmplt>
 8004440:	e79f      	b.n	8004382 <_strtod_l+0xada>
 8004442:	2300      	movs	r3, #0
 8004444:	930a      	str	r3, [sp, #40]	; 0x28
 8004446:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004448:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	f7ff ba71 	b.w	8003932 <_strtod_l+0x8a>
 8004450:	2a65      	cmp	r2, #101	; 0x65
 8004452:	f43f ab63 	beq.w	8003b1c <_strtod_l+0x274>
 8004456:	2a45      	cmp	r2, #69	; 0x45
 8004458:	f43f ab60 	beq.w	8003b1c <_strtod_l+0x274>
 800445c:	2301      	movs	r3, #1
 800445e:	f7ff bb95 	b.w	8003b8c <_strtod_l+0x2e4>
 8004462:	bf00      	nop
 8004464:	f3af 8000 	nop.w
 8004468:	ffc00000 	.word	0xffc00000
 800446c:	41dfffff 	.word	0x41dfffff
 8004470:	94a03595 	.word	0x94a03595
 8004474:	3fcfffff 	.word	0x3fcfffff

08004478 <_strtod_r>:
 8004478:	4b01      	ldr	r3, [pc, #4]	; (8004480 <_strtod_r+0x8>)
 800447a:	f7ff ba15 	b.w	80038a8 <_strtod_l>
 800447e:	bf00      	nop
 8004480:	200000ac 	.word	0x200000ac

08004484 <_strtol_l.constprop.0>:
 8004484:	2b01      	cmp	r3, #1
 8004486:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800448a:	4680      	mov	r8, r0
 800448c:	d001      	beq.n	8004492 <_strtol_l.constprop.0+0xe>
 800448e:	2b24      	cmp	r3, #36	; 0x24
 8004490:	d906      	bls.n	80044a0 <_strtol_l.constprop.0+0x1c>
 8004492:	f000 feeb 	bl	800526c <__errno>
 8004496:	2316      	movs	r3, #22
 8004498:	6003      	str	r3, [r0, #0]
 800449a:	2000      	movs	r0, #0
 800449c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a0:	4f35      	ldr	r7, [pc, #212]	; (8004578 <_strtol_l.constprop.0+0xf4>)
 80044a2:	460d      	mov	r5, r1
 80044a4:	4628      	mov	r0, r5
 80044a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044aa:	5de6      	ldrb	r6, [r4, r7]
 80044ac:	f016 0608 	ands.w	r6, r6, #8
 80044b0:	d1f8      	bne.n	80044a4 <_strtol_l.constprop.0+0x20>
 80044b2:	2c2d      	cmp	r4, #45	; 0x2d
 80044b4:	d12f      	bne.n	8004516 <_strtol_l.constprop.0+0x92>
 80044b6:	782c      	ldrb	r4, [r5, #0]
 80044b8:	2601      	movs	r6, #1
 80044ba:	1c85      	adds	r5, r0, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d057      	beq.n	8004570 <_strtol_l.constprop.0+0xec>
 80044c0:	2b10      	cmp	r3, #16
 80044c2:	d109      	bne.n	80044d8 <_strtol_l.constprop.0+0x54>
 80044c4:	2c30      	cmp	r4, #48	; 0x30
 80044c6:	d107      	bne.n	80044d8 <_strtol_l.constprop.0+0x54>
 80044c8:	7828      	ldrb	r0, [r5, #0]
 80044ca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80044ce:	2858      	cmp	r0, #88	; 0x58
 80044d0:	d149      	bne.n	8004566 <_strtol_l.constprop.0+0xe2>
 80044d2:	786c      	ldrb	r4, [r5, #1]
 80044d4:	2310      	movs	r3, #16
 80044d6:	3502      	adds	r5, #2
 80044d8:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80044dc:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80044e0:	2700      	movs	r7, #0
 80044e2:	fbbe f9f3 	udiv	r9, lr, r3
 80044e6:	4638      	mov	r0, r7
 80044e8:	fb03 ea19 	mls	sl, r3, r9, lr
 80044ec:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80044f0:	f1bc 0f09 	cmp.w	ip, #9
 80044f4:	d814      	bhi.n	8004520 <_strtol_l.constprop.0+0x9c>
 80044f6:	4664      	mov	r4, ip
 80044f8:	42a3      	cmp	r3, r4
 80044fa:	dd22      	ble.n	8004542 <_strtol_l.constprop.0+0xbe>
 80044fc:	2f00      	cmp	r7, #0
 80044fe:	db1d      	blt.n	800453c <_strtol_l.constprop.0+0xb8>
 8004500:	4581      	cmp	r9, r0
 8004502:	d31b      	bcc.n	800453c <_strtol_l.constprop.0+0xb8>
 8004504:	d101      	bne.n	800450a <_strtol_l.constprop.0+0x86>
 8004506:	45a2      	cmp	sl, r4
 8004508:	db18      	blt.n	800453c <_strtol_l.constprop.0+0xb8>
 800450a:	fb00 4003 	mla	r0, r0, r3, r4
 800450e:	2701      	movs	r7, #1
 8004510:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004514:	e7ea      	b.n	80044ec <_strtol_l.constprop.0+0x68>
 8004516:	2c2b      	cmp	r4, #43	; 0x2b
 8004518:	bf04      	itt	eq
 800451a:	782c      	ldrbeq	r4, [r5, #0]
 800451c:	1c85      	addeq	r5, r0, #2
 800451e:	e7cd      	b.n	80044bc <_strtol_l.constprop.0+0x38>
 8004520:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004524:	f1bc 0f19 	cmp.w	ip, #25
 8004528:	d801      	bhi.n	800452e <_strtol_l.constprop.0+0xaa>
 800452a:	3c37      	subs	r4, #55	; 0x37
 800452c:	e7e4      	b.n	80044f8 <_strtol_l.constprop.0+0x74>
 800452e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004532:	f1bc 0f19 	cmp.w	ip, #25
 8004536:	d804      	bhi.n	8004542 <_strtol_l.constprop.0+0xbe>
 8004538:	3c57      	subs	r4, #87	; 0x57
 800453a:	e7dd      	b.n	80044f8 <_strtol_l.constprop.0+0x74>
 800453c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004540:	e7e6      	b.n	8004510 <_strtol_l.constprop.0+0x8c>
 8004542:	2f00      	cmp	r7, #0
 8004544:	da07      	bge.n	8004556 <_strtol_l.constprop.0+0xd2>
 8004546:	2322      	movs	r3, #34	; 0x22
 8004548:	f8c8 3000 	str.w	r3, [r8]
 800454c:	4670      	mov	r0, lr
 800454e:	2a00      	cmp	r2, #0
 8004550:	d0a4      	beq.n	800449c <_strtol_l.constprop.0+0x18>
 8004552:	1e69      	subs	r1, r5, #1
 8004554:	e005      	b.n	8004562 <_strtol_l.constprop.0+0xde>
 8004556:	b106      	cbz	r6, 800455a <_strtol_l.constprop.0+0xd6>
 8004558:	4240      	negs	r0, r0
 800455a:	2a00      	cmp	r2, #0
 800455c:	d09e      	beq.n	800449c <_strtol_l.constprop.0+0x18>
 800455e:	2f00      	cmp	r7, #0
 8004560:	d1f7      	bne.n	8004552 <_strtol_l.constprop.0+0xce>
 8004562:	6011      	str	r1, [r2, #0]
 8004564:	e79a      	b.n	800449c <_strtol_l.constprop.0+0x18>
 8004566:	2430      	movs	r4, #48	; 0x30
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1b5      	bne.n	80044d8 <_strtol_l.constprop.0+0x54>
 800456c:	2308      	movs	r3, #8
 800456e:	e7b3      	b.n	80044d8 <_strtol_l.constprop.0+0x54>
 8004570:	2c30      	cmp	r4, #48	; 0x30
 8004572:	d0a9      	beq.n	80044c8 <_strtol_l.constprop.0+0x44>
 8004574:	230a      	movs	r3, #10
 8004576:	e7af      	b.n	80044d8 <_strtol_l.constprop.0+0x54>
 8004578:	080074f1 	.word	0x080074f1

0800457c <_strtol_r>:
 800457c:	f7ff bf82 	b.w	8004484 <_strtol_l.constprop.0>

08004580 <quorem>:
 8004580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004584:	6903      	ldr	r3, [r0, #16]
 8004586:	690c      	ldr	r4, [r1, #16]
 8004588:	42a3      	cmp	r3, r4
 800458a:	4607      	mov	r7, r0
 800458c:	db7d      	blt.n	800468a <quorem+0x10a>
 800458e:	3c01      	subs	r4, #1
 8004590:	f101 0814 	add.w	r8, r1, #20
 8004594:	f100 0514 	add.w	r5, r0, #20
 8004598:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800459c:	9301      	str	r3, [sp, #4]
 800459e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80045a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80045a6:	3301      	adds	r3, #1
 80045a8:	429a      	cmp	r2, r3
 80045aa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80045ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80045b2:	fbb2 f6f3 	udiv	r6, r2, r3
 80045b6:	d32e      	bcc.n	8004616 <quorem+0x96>
 80045b8:	f04f 0e00 	mov.w	lr, #0
 80045bc:	4640      	mov	r0, r8
 80045be:	46ac      	mov	ip, r5
 80045c0:	46f2      	mov	sl, lr
 80045c2:	f850 2b04 	ldr.w	r2, [r0], #4
 80045c6:	b293      	uxth	r3, r2
 80045c8:	fb06 e303 	mla	r3, r6, r3, lr
 80045cc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80045d0:	0c12      	lsrs	r2, r2, #16
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	fb06 e202 	mla	r2, r6, r2, lr
 80045d8:	ebaa 0303 	sub.w	r3, sl, r3
 80045dc:	f8dc a000 	ldr.w	sl, [ip]
 80045e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80045e4:	b292      	uxth	r2, r2
 80045e6:	fa13 f38a 	uxtah	r3, r3, sl
 80045ea:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80045ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80045f8:	4581      	cmp	r9, r0
 80045fa:	f84c 3b04 	str.w	r3, [ip], #4
 80045fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004602:	d2de      	bcs.n	80045c2 <quorem+0x42>
 8004604:	f855 300b 	ldr.w	r3, [r5, fp]
 8004608:	b92b      	cbnz	r3, 8004616 <quorem+0x96>
 800460a:	9b01      	ldr	r3, [sp, #4]
 800460c:	3b04      	subs	r3, #4
 800460e:	429d      	cmp	r5, r3
 8004610:	461a      	mov	r2, r3
 8004612:	d32e      	bcc.n	8004672 <quorem+0xf2>
 8004614:	613c      	str	r4, [r7, #16]
 8004616:	4638      	mov	r0, r7
 8004618:	f001 fc88 	bl	8005f2c <__mcmp>
 800461c:	2800      	cmp	r0, #0
 800461e:	db24      	blt.n	800466a <quorem+0xea>
 8004620:	3601      	adds	r6, #1
 8004622:	4628      	mov	r0, r5
 8004624:	f04f 0c00 	mov.w	ip, #0
 8004628:	f858 2b04 	ldr.w	r2, [r8], #4
 800462c:	f8d0 e000 	ldr.w	lr, [r0]
 8004630:	b293      	uxth	r3, r2
 8004632:	ebac 0303 	sub.w	r3, ip, r3
 8004636:	0c12      	lsrs	r2, r2, #16
 8004638:	fa13 f38e 	uxtah	r3, r3, lr
 800463c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004640:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004644:	b29b      	uxth	r3, r3
 8004646:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800464a:	45c1      	cmp	r9, r8
 800464c:	f840 3b04 	str.w	r3, [r0], #4
 8004650:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004654:	d2e8      	bcs.n	8004628 <quorem+0xa8>
 8004656:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800465a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800465e:	b922      	cbnz	r2, 800466a <quorem+0xea>
 8004660:	3b04      	subs	r3, #4
 8004662:	429d      	cmp	r5, r3
 8004664:	461a      	mov	r2, r3
 8004666:	d30a      	bcc.n	800467e <quorem+0xfe>
 8004668:	613c      	str	r4, [r7, #16]
 800466a:	4630      	mov	r0, r6
 800466c:	b003      	add	sp, #12
 800466e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004672:	6812      	ldr	r2, [r2, #0]
 8004674:	3b04      	subs	r3, #4
 8004676:	2a00      	cmp	r2, #0
 8004678:	d1cc      	bne.n	8004614 <quorem+0x94>
 800467a:	3c01      	subs	r4, #1
 800467c:	e7c7      	b.n	800460e <quorem+0x8e>
 800467e:	6812      	ldr	r2, [r2, #0]
 8004680:	3b04      	subs	r3, #4
 8004682:	2a00      	cmp	r2, #0
 8004684:	d1f0      	bne.n	8004668 <quorem+0xe8>
 8004686:	3c01      	subs	r4, #1
 8004688:	e7eb      	b.n	8004662 <quorem+0xe2>
 800468a:	2000      	movs	r0, #0
 800468c:	e7ee      	b.n	800466c <quorem+0xec>
	...

08004690 <_dtoa_r>:
 8004690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004694:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004696:	b099      	sub	sp, #100	; 0x64
 8004698:	4616      	mov	r6, r2
 800469a:	461f      	mov	r7, r3
 800469c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80046a0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80046a4:	4605      	mov	r5, r0
 80046a6:	b974      	cbnz	r4, 80046c6 <_dtoa_r+0x36>
 80046a8:	2010      	movs	r0, #16
 80046aa:	f001 f94f 	bl	800594c <malloc>
 80046ae:	4602      	mov	r2, r0
 80046b0:	6268      	str	r0, [r5, #36]	; 0x24
 80046b2:	b920      	cbnz	r0, 80046be <_dtoa_r+0x2e>
 80046b4:	4ba8      	ldr	r3, [pc, #672]	; (8004958 <_dtoa_r+0x2c8>)
 80046b6:	21ea      	movs	r1, #234	; 0xea
 80046b8:	48a8      	ldr	r0, [pc, #672]	; (800495c <_dtoa_r+0x2cc>)
 80046ba:	f002 f8a9 	bl	8006810 <__assert_func>
 80046be:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80046c2:	6004      	str	r4, [r0, #0]
 80046c4:	60c4      	str	r4, [r0, #12]
 80046c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80046c8:	6819      	ldr	r1, [r3, #0]
 80046ca:	b151      	cbz	r1, 80046e2 <_dtoa_r+0x52>
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	604a      	str	r2, [r1, #4]
 80046d0:	2301      	movs	r3, #1
 80046d2:	4093      	lsls	r3, r2
 80046d4:	608b      	str	r3, [r1, #8]
 80046d6:	4628      	mov	r0, r5
 80046d8:	f001 f9a0 	bl	8005a1c <_Bfree>
 80046dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	1e3b      	subs	r3, r7, #0
 80046e4:	bfb9      	ittee	lt
 80046e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80046ea:	9305      	strlt	r3, [sp, #20]
 80046ec:	2300      	movge	r3, #0
 80046ee:	f8c8 3000 	strge.w	r3, [r8]
 80046f2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80046f6:	4b9a      	ldr	r3, [pc, #616]	; (8004960 <_dtoa_r+0x2d0>)
 80046f8:	bfbc      	itt	lt
 80046fa:	2201      	movlt	r2, #1
 80046fc:	f8c8 2000 	strlt.w	r2, [r8]
 8004700:	ea33 0309 	bics.w	r3, r3, r9
 8004704:	d119      	bne.n	800473a <_dtoa_r+0xaa>
 8004706:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004708:	f242 730f 	movw	r3, #9999	; 0x270f
 800470c:	6013      	str	r3, [r2, #0]
 800470e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004712:	4333      	orrs	r3, r6
 8004714:	f000 8580 	beq.w	8005218 <_dtoa_r+0xb88>
 8004718:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800471a:	b953      	cbnz	r3, 8004732 <_dtoa_r+0xa2>
 800471c:	4b91      	ldr	r3, [pc, #580]	; (8004964 <_dtoa_r+0x2d4>)
 800471e:	e022      	b.n	8004766 <_dtoa_r+0xd6>
 8004720:	4b91      	ldr	r3, [pc, #580]	; (8004968 <_dtoa_r+0x2d8>)
 8004722:	9303      	str	r3, [sp, #12]
 8004724:	3308      	adds	r3, #8
 8004726:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	9803      	ldr	r0, [sp, #12]
 800472c:	b019      	add	sp, #100	; 0x64
 800472e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004732:	4b8c      	ldr	r3, [pc, #560]	; (8004964 <_dtoa_r+0x2d4>)
 8004734:	9303      	str	r3, [sp, #12]
 8004736:	3303      	adds	r3, #3
 8004738:	e7f5      	b.n	8004726 <_dtoa_r+0x96>
 800473a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800473e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004742:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004746:	2200      	movs	r2, #0
 8004748:	2300      	movs	r3, #0
 800474a:	f7fc f9c5 	bl	8000ad8 <__aeabi_dcmpeq>
 800474e:	4680      	mov	r8, r0
 8004750:	b158      	cbz	r0, 800476a <_dtoa_r+0xda>
 8004752:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004754:	2301      	movs	r3, #1
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 8559 	beq.w	8005212 <_dtoa_r+0xb82>
 8004760:	4882      	ldr	r0, [pc, #520]	; (800496c <_dtoa_r+0x2dc>)
 8004762:	6018      	str	r0, [r3, #0]
 8004764:	1e43      	subs	r3, r0, #1
 8004766:	9303      	str	r3, [sp, #12]
 8004768:	e7df      	b.n	800472a <_dtoa_r+0x9a>
 800476a:	ab16      	add	r3, sp, #88	; 0x58
 800476c:	9301      	str	r3, [sp, #4]
 800476e:	ab17      	add	r3, sp, #92	; 0x5c
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	4628      	mov	r0, r5
 8004774:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004778:	f001 fcf6 	bl	8006168 <__d2b>
 800477c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004780:	4683      	mov	fp, r0
 8004782:	2c00      	cmp	r4, #0
 8004784:	d07e      	beq.n	8004884 <_dtoa_r+0x1f4>
 8004786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004788:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800478c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004790:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004794:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004798:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800479c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80047a0:	4b73      	ldr	r3, [pc, #460]	; (8004970 <_dtoa_r+0x2e0>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	f7fb fd78 	bl	8000298 <__aeabi_dsub>
 80047a8:	a365      	add	r3, pc, #404	; (adr r3, 8004940 <_dtoa_r+0x2b0>)
 80047aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ae:	f7fb ff2b 	bl	8000608 <__aeabi_dmul>
 80047b2:	a365      	add	r3, pc, #404	; (adr r3, 8004948 <_dtoa_r+0x2b8>)
 80047b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b8:	f7fb fd70 	bl	800029c <__adddf3>
 80047bc:	4606      	mov	r6, r0
 80047be:	4620      	mov	r0, r4
 80047c0:	460f      	mov	r7, r1
 80047c2:	f7fb feb7 	bl	8000534 <__aeabi_i2d>
 80047c6:	a362      	add	r3, pc, #392	; (adr r3, 8004950 <_dtoa_r+0x2c0>)
 80047c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047cc:	f7fb ff1c 	bl	8000608 <__aeabi_dmul>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4630      	mov	r0, r6
 80047d6:	4639      	mov	r1, r7
 80047d8:	f7fb fd60 	bl	800029c <__adddf3>
 80047dc:	4606      	mov	r6, r0
 80047de:	460f      	mov	r7, r1
 80047e0:	f7fc f9c2 	bl	8000b68 <__aeabi_d2iz>
 80047e4:	2200      	movs	r2, #0
 80047e6:	4682      	mov	sl, r0
 80047e8:	2300      	movs	r3, #0
 80047ea:	4630      	mov	r0, r6
 80047ec:	4639      	mov	r1, r7
 80047ee:	f7fc f97d 	bl	8000aec <__aeabi_dcmplt>
 80047f2:	b148      	cbz	r0, 8004808 <_dtoa_r+0x178>
 80047f4:	4650      	mov	r0, sl
 80047f6:	f7fb fe9d 	bl	8000534 <__aeabi_i2d>
 80047fa:	4632      	mov	r2, r6
 80047fc:	463b      	mov	r3, r7
 80047fe:	f7fc f96b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004802:	b908      	cbnz	r0, 8004808 <_dtoa_r+0x178>
 8004804:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004808:	f1ba 0f16 	cmp.w	sl, #22
 800480c:	d857      	bhi.n	80048be <_dtoa_r+0x22e>
 800480e:	4b59      	ldr	r3, [pc, #356]	; (8004974 <_dtoa_r+0x2e4>)
 8004810:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800481c:	f7fc f966 	bl	8000aec <__aeabi_dcmplt>
 8004820:	2800      	cmp	r0, #0
 8004822:	d04e      	beq.n	80048c2 <_dtoa_r+0x232>
 8004824:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004828:	2300      	movs	r3, #0
 800482a:	930f      	str	r3, [sp, #60]	; 0x3c
 800482c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800482e:	1b1c      	subs	r4, r3, r4
 8004830:	1e63      	subs	r3, r4, #1
 8004832:	9309      	str	r3, [sp, #36]	; 0x24
 8004834:	bf45      	ittet	mi
 8004836:	f1c4 0301 	rsbmi	r3, r4, #1
 800483a:	9306      	strmi	r3, [sp, #24]
 800483c:	2300      	movpl	r3, #0
 800483e:	2300      	movmi	r3, #0
 8004840:	bf4c      	ite	mi
 8004842:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004844:	9306      	strpl	r3, [sp, #24]
 8004846:	f1ba 0f00 	cmp.w	sl, #0
 800484a:	db3c      	blt.n	80048c6 <_dtoa_r+0x236>
 800484c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800484e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004852:	4453      	add	r3, sl
 8004854:	9309      	str	r3, [sp, #36]	; 0x24
 8004856:	2300      	movs	r3, #0
 8004858:	930a      	str	r3, [sp, #40]	; 0x28
 800485a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800485c:	2b09      	cmp	r3, #9
 800485e:	f200 808d 	bhi.w	800497c <_dtoa_r+0x2ec>
 8004862:	2b05      	cmp	r3, #5
 8004864:	bfc4      	itt	gt
 8004866:	3b04      	subgt	r3, #4
 8004868:	9322      	strgt	r3, [sp, #136]	; 0x88
 800486a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800486c:	f1a3 0302 	sub.w	r3, r3, #2
 8004870:	bfcc      	ite	gt
 8004872:	2400      	movgt	r4, #0
 8004874:	2401      	movle	r4, #1
 8004876:	2b03      	cmp	r3, #3
 8004878:	f200 808c 	bhi.w	8004994 <_dtoa_r+0x304>
 800487c:	e8df f003 	tbb	[pc, r3]
 8004880:	5b4d4f2d 	.word	0x5b4d4f2d
 8004884:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004888:	441c      	add	r4, r3
 800488a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800488e:	2b20      	cmp	r3, #32
 8004890:	bfc3      	ittte	gt
 8004892:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004896:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800489a:	fa09 f303 	lslgt.w	r3, r9, r3
 800489e:	f1c3 0320 	rsble	r3, r3, #32
 80048a2:	bfc6      	itte	gt
 80048a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80048a8:	4318      	orrgt	r0, r3
 80048aa:	fa06 f003 	lslle.w	r0, r6, r3
 80048ae:	f7fb fe31 	bl	8000514 <__aeabi_ui2d>
 80048b2:	2301      	movs	r3, #1
 80048b4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80048b8:	3c01      	subs	r4, #1
 80048ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80048bc:	e770      	b.n	80047a0 <_dtoa_r+0x110>
 80048be:	2301      	movs	r3, #1
 80048c0:	e7b3      	b.n	800482a <_dtoa_r+0x19a>
 80048c2:	900f      	str	r0, [sp, #60]	; 0x3c
 80048c4:	e7b2      	b.n	800482c <_dtoa_r+0x19c>
 80048c6:	9b06      	ldr	r3, [sp, #24]
 80048c8:	eba3 030a 	sub.w	r3, r3, sl
 80048cc:	9306      	str	r3, [sp, #24]
 80048ce:	f1ca 0300 	rsb	r3, sl, #0
 80048d2:	930a      	str	r3, [sp, #40]	; 0x28
 80048d4:	2300      	movs	r3, #0
 80048d6:	930e      	str	r3, [sp, #56]	; 0x38
 80048d8:	e7bf      	b.n	800485a <_dtoa_r+0x1ca>
 80048da:	2300      	movs	r3, #0
 80048dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80048de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	dc5a      	bgt.n	800499a <_dtoa_r+0x30a>
 80048e4:	f04f 0901 	mov.w	r9, #1
 80048e8:	f8cd 9020 	str.w	r9, [sp, #32]
 80048ec:	464b      	mov	r3, r9
 80048ee:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80048f2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80048f4:	2200      	movs	r2, #0
 80048f6:	6042      	str	r2, [r0, #4]
 80048f8:	2204      	movs	r2, #4
 80048fa:	f102 0614 	add.w	r6, r2, #20
 80048fe:	429e      	cmp	r6, r3
 8004900:	6841      	ldr	r1, [r0, #4]
 8004902:	d950      	bls.n	80049a6 <_dtoa_r+0x316>
 8004904:	4628      	mov	r0, r5
 8004906:	f001 f849 	bl	800599c <_Balloc>
 800490a:	9003      	str	r0, [sp, #12]
 800490c:	2800      	cmp	r0, #0
 800490e:	d14e      	bne.n	80049ae <_dtoa_r+0x31e>
 8004910:	4b19      	ldr	r3, [pc, #100]	; (8004978 <_dtoa_r+0x2e8>)
 8004912:	4602      	mov	r2, r0
 8004914:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004918:	e6ce      	b.n	80046b8 <_dtoa_r+0x28>
 800491a:	2301      	movs	r3, #1
 800491c:	e7de      	b.n	80048dc <_dtoa_r+0x24c>
 800491e:	2300      	movs	r3, #0
 8004920:	930b      	str	r3, [sp, #44]	; 0x2c
 8004922:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004924:	eb0a 0903 	add.w	r9, sl, r3
 8004928:	f109 0301 	add.w	r3, r9, #1
 800492c:	2b01      	cmp	r3, #1
 800492e:	9308      	str	r3, [sp, #32]
 8004930:	bfb8      	it	lt
 8004932:	2301      	movlt	r3, #1
 8004934:	e7dd      	b.n	80048f2 <_dtoa_r+0x262>
 8004936:	2301      	movs	r3, #1
 8004938:	e7f2      	b.n	8004920 <_dtoa_r+0x290>
 800493a:	bf00      	nop
 800493c:	f3af 8000 	nop.w
 8004940:	636f4361 	.word	0x636f4361
 8004944:	3fd287a7 	.word	0x3fd287a7
 8004948:	8b60c8b3 	.word	0x8b60c8b3
 800494c:	3fc68a28 	.word	0x3fc68a28
 8004950:	509f79fb 	.word	0x509f79fb
 8004954:	3fd34413 	.word	0x3fd34413
 8004958:	080075fe 	.word	0x080075fe
 800495c:	08007615 	.word	0x08007615
 8004960:	7ff00000 	.word	0x7ff00000
 8004964:	080075fa 	.word	0x080075fa
 8004968:	080075f1 	.word	0x080075f1
 800496c:	08007471 	.word	0x08007471
 8004970:	3ff80000 	.word	0x3ff80000
 8004974:	08007780 	.word	0x08007780
 8004978:	08007670 	.word	0x08007670
 800497c:	2401      	movs	r4, #1
 800497e:	2300      	movs	r3, #0
 8004980:	9322      	str	r3, [sp, #136]	; 0x88
 8004982:	940b      	str	r4, [sp, #44]	; 0x2c
 8004984:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004988:	2200      	movs	r2, #0
 800498a:	f8cd 9020 	str.w	r9, [sp, #32]
 800498e:	2312      	movs	r3, #18
 8004990:	9223      	str	r2, [sp, #140]	; 0x8c
 8004992:	e7ae      	b.n	80048f2 <_dtoa_r+0x262>
 8004994:	2301      	movs	r3, #1
 8004996:	930b      	str	r3, [sp, #44]	; 0x2c
 8004998:	e7f4      	b.n	8004984 <_dtoa_r+0x2f4>
 800499a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800499e:	f8cd 9020 	str.w	r9, [sp, #32]
 80049a2:	464b      	mov	r3, r9
 80049a4:	e7a5      	b.n	80048f2 <_dtoa_r+0x262>
 80049a6:	3101      	adds	r1, #1
 80049a8:	6041      	str	r1, [r0, #4]
 80049aa:	0052      	lsls	r2, r2, #1
 80049ac:	e7a5      	b.n	80048fa <_dtoa_r+0x26a>
 80049ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80049b0:	9a03      	ldr	r2, [sp, #12]
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	9b08      	ldr	r3, [sp, #32]
 80049b6:	2b0e      	cmp	r3, #14
 80049b8:	f200 80a8 	bhi.w	8004b0c <_dtoa_r+0x47c>
 80049bc:	2c00      	cmp	r4, #0
 80049be:	f000 80a5 	beq.w	8004b0c <_dtoa_r+0x47c>
 80049c2:	f1ba 0f00 	cmp.w	sl, #0
 80049c6:	dd34      	ble.n	8004a32 <_dtoa_r+0x3a2>
 80049c8:	4a9a      	ldr	r2, [pc, #616]	; (8004c34 <_dtoa_r+0x5a4>)
 80049ca:	f00a 030f 	and.w	r3, sl, #15
 80049ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80049d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80049d6:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80049da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80049de:	ea4f 142a 	mov.w	r4, sl, asr #4
 80049e2:	d016      	beq.n	8004a12 <_dtoa_r+0x382>
 80049e4:	4b94      	ldr	r3, [pc, #592]	; (8004c38 <_dtoa_r+0x5a8>)
 80049e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80049ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80049ee:	f7fb ff35 	bl	800085c <__aeabi_ddiv>
 80049f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049f6:	f004 040f 	and.w	r4, r4, #15
 80049fa:	2703      	movs	r7, #3
 80049fc:	4e8e      	ldr	r6, [pc, #568]	; (8004c38 <_dtoa_r+0x5a8>)
 80049fe:	b954      	cbnz	r4, 8004a16 <_dtoa_r+0x386>
 8004a00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004a04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a08:	f7fb ff28 	bl	800085c <__aeabi_ddiv>
 8004a0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a10:	e029      	b.n	8004a66 <_dtoa_r+0x3d6>
 8004a12:	2702      	movs	r7, #2
 8004a14:	e7f2      	b.n	80049fc <_dtoa_r+0x36c>
 8004a16:	07e1      	lsls	r1, r4, #31
 8004a18:	d508      	bpl.n	8004a2c <_dtoa_r+0x39c>
 8004a1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a1e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004a22:	f7fb fdf1 	bl	8000608 <__aeabi_dmul>
 8004a26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004a2a:	3701      	adds	r7, #1
 8004a2c:	1064      	asrs	r4, r4, #1
 8004a2e:	3608      	adds	r6, #8
 8004a30:	e7e5      	b.n	80049fe <_dtoa_r+0x36e>
 8004a32:	f000 80a5 	beq.w	8004b80 <_dtoa_r+0x4f0>
 8004a36:	f1ca 0400 	rsb	r4, sl, #0
 8004a3a:	4b7e      	ldr	r3, [pc, #504]	; (8004c34 <_dtoa_r+0x5a4>)
 8004a3c:	4e7e      	ldr	r6, [pc, #504]	; (8004c38 <_dtoa_r+0x5a8>)
 8004a3e:	f004 020f 	and.w	r2, r4, #15
 8004a42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a4e:	f7fb fddb 	bl	8000608 <__aeabi_dmul>
 8004a52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a56:	1124      	asrs	r4, r4, #4
 8004a58:	2300      	movs	r3, #0
 8004a5a:	2702      	movs	r7, #2
 8004a5c:	2c00      	cmp	r4, #0
 8004a5e:	f040 8084 	bne.w	8004b6a <_dtoa_r+0x4da>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1d2      	bne.n	8004a0c <_dtoa_r+0x37c>
 8004a66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 808b 	beq.w	8004b84 <_dtoa_r+0x4f4>
 8004a6e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004a72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004a76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a7a:	4b70      	ldr	r3, [pc, #448]	; (8004c3c <_dtoa_r+0x5ac>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f7fc f835 	bl	8000aec <__aeabi_dcmplt>
 8004a82:	2800      	cmp	r0, #0
 8004a84:	d07e      	beq.n	8004b84 <_dtoa_r+0x4f4>
 8004a86:	9b08      	ldr	r3, [sp, #32]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d07b      	beq.n	8004b84 <_dtoa_r+0x4f4>
 8004a8c:	f1b9 0f00 	cmp.w	r9, #0
 8004a90:	dd38      	ble.n	8004b04 <_dtoa_r+0x474>
 8004a92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a96:	4b6a      	ldr	r3, [pc, #424]	; (8004c40 <_dtoa_r+0x5b0>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f7fb fdb5 	bl	8000608 <__aeabi_dmul>
 8004a9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004aa2:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8004aa6:	3701      	adds	r7, #1
 8004aa8:	464c      	mov	r4, r9
 8004aaa:	4638      	mov	r0, r7
 8004aac:	f7fb fd42 	bl	8000534 <__aeabi_i2d>
 8004ab0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ab4:	f7fb fda8 	bl	8000608 <__aeabi_dmul>
 8004ab8:	4b62      	ldr	r3, [pc, #392]	; (8004c44 <_dtoa_r+0x5b4>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	f7fb fbee 	bl	800029c <__adddf3>
 8004ac0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004ac4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ac8:	9611      	str	r6, [sp, #68]	; 0x44
 8004aca:	2c00      	cmp	r4, #0
 8004acc:	d15d      	bne.n	8004b8a <_dtoa_r+0x4fa>
 8004ace:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ad2:	4b5d      	ldr	r3, [pc, #372]	; (8004c48 <_dtoa_r+0x5b8>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f7fb fbdf 	bl	8000298 <__aeabi_dsub>
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ae2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ae4:	4633      	mov	r3, r6
 8004ae6:	f7fc f81f 	bl	8000b28 <__aeabi_dcmpgt>
 8004aea:	2800      	cmp	r0, #0
 8004aec:	f040 829c 	bne.w	8005028 <_dtoa_r+0x998>
 8004af0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004af4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004af6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004afa:	f7fb fff7 	bl	8000aec <__aeabi_dcmplt>
 8004afe:	2800      	cmp	r0, #0
 8004b00:	f040 8290 	bne.w	8005024 <_dtoa_r+0x994>
 8004b04:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004b08:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004b0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f2c0 8152 	blt.w	8004db8 <_dtoa_r+0x728>
 8004b14:	f1ba 0f0e 	cmp.w	sl, #14
 8004b18:	f300 814e 	bgt.w	8004db8 <_dtoa_r+0x728>
 8004b1c:	4b45      	ldr	r3, [pc, #276]	; (8004c34 <_dtoa_r+0x5a4>)
 8004b1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004b22:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b26:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004b2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f280 80db 	bge.w	8004ce8 <_dtoa_r+0x658>
 8004b32:	9b08      	ldr	r3, [sp, #32]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f300 80d7 	bgt.w	8004ce8 <_dtoa_r+0x658>
 8004b3a:	f040 8272 	bne.w	8005022 <_dtoa_r+0x992>
 8004b3e:	4b42      	ldr	r3, [pc, #264]	; (8004c48 <_dtoa_r+0x5b8>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b46:	f7fb fd5f 	bl	8000608 <__aeabi_dmul>
 8004b4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b4e:	f7fb ffe1 	bl	8000b14 <__aeabi_dcmpge>
 8004b52:	9c08      	ldr	r4, [sp, #32]
 8004b54:	4626      	mov	r6, r4
 8004b56:	2800      	cmp	r0, #0
 8004b58:	f040 8248 	bne.w	8004fec <_dtoa_r+0x95c>
 8004b5c:	9f03      	ldr	r7, [sp, #12]
 8004b5e:	2331      	movs	r3, #49	; 0x31
 8004b60:	f807 3b01 	strb.w	r3, [r7], #1
 8004b64:	f10a 0a01 	add.w	sl, sl, #1
 8004b68:	e244      	b.n	8004ff4 <_dtoa_r+0x964>
 8004b6a:	07e2      	lsls	r2, r4, #31
 8004b6c:	d505      	bpl.n	8004b7a <_dtoa_r+0x4ea>
 8004b6e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004b72:	f7fb fd49 	bl	8000608 <__aeabi_dmul>
 8004b76:	3701      	adds	r7, #1
 8004b78:	2301      	movs	r3, #1
 8004b7a:	1064      	asrs	r4, r4, #1
 8004b7c:	3608      	adds	r6, #8
 8004b7e:	e76d      	b.n	8004a5c <_dtoa_r+0x3cc>
 8004b80:	2702      	movs	r7, #2
 8004b82:	e770      	b.n	8004a66 <_dtoa_r+0x3d6>
 8004b84:	9c08      	ldr	r4, [sp, #32]
 8004b86:	46d0      	mov	r8, sl
 8004b88:	e78f      	b.n	8004aaa <_dtoa_r+0x41a>
 8004b8a:	9903      	ldr	r1, [sp, #12]
 8004b8c:	4b29      	ldr	r3, [pc, #164]	; (8004c34 <_dtoa_r+0x5a4>)
 8004b8e:	4421      	add	r1, r4
 8004b90:	9112      	str	r1, [sp, #72]	; 0x48
 8004b92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004b98:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004b9c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004ba0:	2900      	cmp	r1, #0
 8004ba2:	d055      	beq.n	8004c50 <_dtoa_r+0x5c0>
 8004ba4:	4929      	ldr	r1, [pc, #164]	; (8004c4c <_dtoa_r+0x5bc>)
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	f7fb fe58 	bl	800085c <__aeabi_ddiv>
 8004bac:	463b      	mov	r3, r7
 8004bae:	4632      	mov	r2, r6
 8004bb0:	f7fb fb72 	bl	8000298 <__aeabi_dsub>
 8004bb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004bb8:	9f03      	ldr	r7, [sp, #12]
 8004bba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bbe:	f7fb ffd3 	bl	8000b68 <__aeabi_d2iz>
 8004bc2:	4604      	mov	r4, r0
 8004bc4:	f7fb fcb6 	bl	8000534 <__aeabi_i2d>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bd0:	f7fb fb62 	bl	8000298 <__aeabi_dsub>
 8004bd4:	3430      	adds	r4, #48	; 0x30
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004bde:	f807 4b01 	strb.w	r4, [r7], #1
 8004be2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004be6:	f7fb ff81 	bl	8000aec <__aeabi_dcmplt>
 8004bea:	2800      	cmp	r0, #0
 8004bec:	d174      	bne.n	8004cd8 <_dtoa_r+0x648>
 8004bee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bf2:	4912      	ldr	r1, [pc, #72]	; (8004c3c <_dtoa_r+0x5ac>)
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	f7fb fb4f 	bl	8000298 <__aeabi_dsub>
 8004bfa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004bfe:	f7fb ff75 	bl	8000aec <__aeabi_dcmplt>
 8004c02:	2800      	cmp	r0, #0
 8004c04:	f040 80b7 	bne.w	8004d76 <_dtoa_r+0x6e6>
 8004c08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c0a:	429f      	cmp	r7, r3
 8004c0c:	f43f af7a 	beq.w	8004b04 <_dtoa_r+0x474>
 8004c10:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c14:	4b0a      	ldr	r3, [pc, #40]	; (8004c40 <_dtoa_r+0x5b0>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	f7fb fcf6 	bl	8000608 <__aeabi_dmul>
 8004c1c:	4b08      	ldr	r3, [pc, #32]	; (8004c40 <_dtoa_r+0x5b0>)
 8004c1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c22:	2200      	movs	r2, #0
 8004c24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c28:	f7fb fcee 	bl	8000608 <__aeabi_dmul>
 8004c2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c30:	e7c3      	b.n	8004bba <_dtoa_r+0x52a>
 8004c32:	bf00      	nop
 8004c34:	08007780 	.word	0x08007780
 8004c38:	08007758 	.word	0x08007758
 8004c3c:	3ff00000 	.word	0x3ff00000
 8004c40:	40240000 	.word	0x40240000
 8004c44:	401c0000 	.word	0x401c0000
 8004c48:	40140000 	.word	0x40140000
 8004c4c:	3fe00000 	.word	0x3fe00000
 8004c50:	4630      	mov	r0, r6
 8004c52:	4639      	mov	r1, r7
 8004c54:	f7fb fcd8 	bl	8000608 <__aeabi_dmul>
 8004c58:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c5e:	9c03      	ldr	r4, [sp, #12]
 8004c60:	9314      	str	r3, [sp, #80]	; 0x50
 8004c62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c66:	f7fb ff7f 	bl	8000b68 <__aeabi_d2iz>
 8004c6a:	9015      	str	r0, [sp, #84]	; 0x54
 8004c6c:	f7fb fc62 	bl	8000534 <__aeabi_i2d>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c78:	f7fb fb0e 	bl	8000298 <__aeabi_dsub>
 8004c7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004c7e:	3330      	adds	r3, #48	; 0x30
 8004c80:	f804 3b01 	strb.w	r3, [r4], #1
 8004c84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c86:	429c      	cmp	r4, r3
 8004c88:	4606      	mov	r6, r0
 8004c8a:	460f      	mov	r7, r1
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	d124      	bne.n	8004cdc <_dtoa_r+0x64c>
 8004c92:	4ba4      	ldr	r3, [pc, #656]	; (8004f24 <_dtoa_r+0x894>)
 8004c94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c98:	f7fb fb00 	bl	800029c <__adddf3>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4630      	mov	r0, r6
 8004ca2:	4639      	mov	r1, r7
 8004ca4:	f7fb ff40 	bl	8000b28 <__aeabi_dcmpgt>
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	d163      	bne.n	8004d74 <_dtoa_r+0x6e4>
 8004cac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004cb0:	499c      	ldr	r1, [pc, #624]	; (8004f24 <_dtoa_r+0x894>)
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	f7fb faf0 	bl	8000298 <__aeabi_dsub>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4630      	mov	r0, r6
 8004cbe:	4639      	mov	r1, r7
 8004cc0:	f7fb ff14 	bl	8000aec <__aeabi_dcmplt>
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	f43f af1d 	beq.w	8004b04 <_dtoa_r+0x474>
 8004cca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004ccc:	1e7b      	subs	r3, r7, #1
 8004cce:	9314      	str	r3, [sp, #80]	; 0x50
 8004cd0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004cd4:	2b30      	cmp	r3, #48	; 0x30
 8004cd6:	d0f8      	beq.n	8004cca <_dtoa_r+0x63a>
 8004cd8:	46c2      	mov	sl, r8
 8004cda:	e03b      	b.n	8004d54 <_dtoa_r+0x6c4>
 8004cdc:	4b92      	ldr	r3, [pc, #584]	; (8004f28 <_dtoa_r+0x898>)
 8004cde:	f7fb fc93 	bl	8000608 <__aeabi_dmul>
 8004ce2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ce6:	e7bc      	b.n	8004c62 <_dtoa_r+0x5d2>
 8004ce8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004cec:	9f03      	ldr	r7, [sp, #12]
 8004cee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004cf2:	4640      	mov	r0, r8
 8004cf4:	4649      	mov	r1, r9
 8004cf6:	f7fb fdb1 	bl	800085c <__aeabi_ddiv>
 8004cfa:	f7fb ff35 	bl	8000b68 <__aeabi_d2iz>
 8004cfe:	4604      	mov	r4, r0
 8004d00:	f7fb fc18 	bl	8000534 <__aeabi_i2d>
 8004d04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d08:	f7fb fc7e 	bl	8000608 <__aeabi_dmul>
 8004d0c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4640      	mov	r0, r8
 8004d16:	4649      	mov	r1, r9
 8004d18:	f7fb fabe 	bl	8000298 <__aeabi_dsub>
 8004d1c:	f807 6b01 	strb.w	r6, [r7], #1
 8004d20:	9e03      	ldr	r6, [sp, #12]
 8004d22:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004d26:	1bbe      	subs	r6, r7, r6
 8004d28:	45b4      	cmp	ip, r6
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	d136      	bne.n	8004d9e <_dtoa_r+0x70e>
 8004d30:	f7fb fab4 	bl	800029c <__adddf3>
 8004d34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d38:	4680      	mov	r8, r0
 8004d3a:	4689      	mov	r9, r1
 8004d3c:	f7fb fef4 	bl	8000b28 <__aeabi_dcmpgt>
 8004d40:	bb58      	cbnz	r0, 8004d9a <_dtoa_r+0x70a>
 8004d42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d46:	4640      	mov	r0, r8
 8004d48:	4649      	mov	r1, r9
 8004d4a:	f7fb fec5 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d4e:	b108      	cbz	r0, 8004d54 <_dtoa_r+0x6c4>
 8004d50:	07e1      	lsls	r1, r4, #31
 8004d52:	d422      	bmi.n	8004d9a <_dtoa_r+0x70a>
 8004d54:	4628      	mov	r0, r5
 8004d56:	4659      	mov	r1, fp
 8004d58:	f000 fe60 	bl	8005a1c <_Bfree>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	703b      	strb	r3, [r7, #0]
 8004d60:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004d62:	f10a 0001 	add.w	r0, sl, #1
 8004d66:	6018      	str	r0, [r3, #0]
 8004d68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f43f acdd 	beq.w	800472a <_dtoa_r+0x9a>
 8004d70:	601f      	str	r7, [r3, #0]
 8004d72:	e4da      	b.n	800472a <_dtoa_r+0x9a>
 8004d74:	4627      	mov	r7, r4
 8004d76:	463b      	mov	r3, r7
 8004d78:	461f      	mov	r7, r3
 8004d7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d7e:	2a39      	cmp	r2, #57	; 0x39
 8004d80:	d107      	bne.n	8004d92 <_dtoa_r+0x702>
 8004d82:	9a03      	ldr	r2, [sp, #12]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d1f7      	bne.n	8004d78 <_dtoa_r+0x6e8>
 8004d88:	9903      	ldr	r1, [sp, #12]
 8004d8a:	2230      	movs	r2, #48	; 0x30
 8004d8c:	f108 0801 	add.w	r8, r8, #1
 8004d90:	700a      	strb	r2, [r1, #0]
 8004d92:	781a      	ldrb	r2, [r3, #0]
 8004d94:	3201      	adds	r2, #1
 8004d96:	701a      	strb	r2, [r3, #0]
 8004d98:	e79e      	b.n	8004cd8 <_dtoa_r+0x648>
 8004d9a:	46d0      	mov	r8, sl
 8004d9c:	e7eb      	b.n	8004d76 <_dtoa_r+0x6e6>
 8004d9e:	4b62      	ldr	r3, [pc, #392]	; (8004f28 <_dtoa_r+0x898>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	f7fb fc31 	bl	8000608 <__aeabi_dmul>
 8004da6:	2200      	movs	r2, #0
 8004da8:	2300      	movs	r3, #0
 8004daa:	4680      	mov	r8, r0
 8004dac:	4689      	mov	r9, r1
 8004dae:	f7fb fe93 	bl	8000ad8 <__aeabi_dcmpeq>
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d09b      	beq.n	8004cee <_dtoa_r+0x65e>
 8004db6:	e7cd      	b.n	8004d54 <_dtoa_r+0x6c4>
 8004db8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004dba:	2a00      	cmp	r2, #0
 8004dbc:	f000 80d0 	beq.w	8004f60 <_dtoa_r+0x8d0>
 8004dc0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004dc2:	2a01      	cmp	r2, #1
 8004dc4:	f300 80b2 	bgt.w	8004f2c <_dtoa_r+0x89c>
 8004dc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004dca:	2a00      	cmp	r2, #0
 8004dcc:	f000 80a6 	beq.w	8004f1c <_dtoa_r+0x88c>
 8004dd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004dd4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004dd6:	9f06      	ldr	r7, [sp, #24]
 8004dd8:	9a06      	ldr	r2, [sp, #24]
 8004dda:	441a      	add	r2, r3
 8004ddc:	9206      	str	r2, [sp, #24]
 8004dde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004de0:	2101      	movs	r1, #1
 8004de2:	441a      	add	r2, r3
 8004de4:	4628      	mov	r0, r5
 8004de6:	9209      	str	r2, [sp, #36]	; 0x24
 8004de8:	f000 ff18 	bl	8005c1c <__i2b>
 8004dec:	4606      	mov	r6, r0
 8004dee:	2f00      	cmp	r7, #0
 8004df0:	dd0c      	ble.n	8004e0c <_dtoa_r+0x77c>
 8004df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	dd09      	ble.n	8004e0c <_dtoa_r+0x77c>
 8004df8:	42bb      	cmp	r3, r7
 8004dfa:	9a06      	ldr	r2, [sp, #24]
 8004dfc:	bfa8      	it	ge
 8004dfe:	463b      	movge	r3, r7
 8004e00:	1ad2      	subs	r2, r2, r3
 8004e02:	9206      	str	r2, [sp, #24]
 8004e04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e06:	1aff      	subs	r7, r7, r3
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e0e:	b1f3      	cbz	r3, 8004e4e <_dtoa_r+0x7be>
 8004e10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 80a8 	beq.w	8004f68 <_dtoa_r+0x8d8>
 8004e18:	2c00      	cmp	r4, #0
 8004e1a:	dd10      	ble.n	8004e3e <_dtoa_r+0x7ae>
 8004e1c:	4631      	mov	r1, r6
 8004e1e:	4622      	mov	r2, r4
 8004e20:	4628      	mov	r0, r5
 8004e22:	f000 ffb9 	bl	8005d98 <__pow5mult>
 8004e26:	465a      	mov	r2, fp
 8004e28:	4601      	mov	r1, r0
 8004e2a:	4606      	mov	r6, r0
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	f000 ff0b 	bl	8005c48 <__multiply>
 8004e32:	4659      	mov	r1, fp
 8004e34:	4680      	mov	r8, r0
 8004e36:	4628      	mov	r0, r5
 8004e38:	f000 fdf0 	bl	8005a1c <_Bfree>
 8004e3c:	46c3      	mov	fp, r8
 8004e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e40:	1b1a      	subs	r2, r3, r4
 8004e42:	d004      	beq.n	8004e4e <_dtoa_r+0x7be>
 8004e44:	4659      	mov	r1, fp
 8004e46:	4628      	mov	r0, r5
 8004e48:	f000 ffa6 	bl	8005d98 <__pow5mult>
 8004e4c:	4683      	mov	fp, r0
 8004e4e:	2101      	movs	r1, #1
 8004e50:	4628      	mov	r0, r5
 8004e52:	f000 fee3 	bl	8005c1c <__i2b>
 8004e56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	f340 8086 	ble.w	8004f6c <_dtoa_r+0x8dc>
 8004e60:	461a      	mov	r2, r3
 8004e62:	4601      	mov	r1, r0
 8004e64:	4628      	mov	r0, r5
 8004e66:	f000 ff97 	bl	8005d98 <__pow5mult>
 8004e6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	4604      	mov	r4, r0
 8004e70:	dd7f      	ble.n	8004f72 <_dtoa_r+0x8e2>
 8004e72:	f04f 0800 	mov.w	r8, #0
 8004e76:	6923      	ldr	r3, [r4, #16]
 8004e78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004e7c:	6918      	ldr	r0, [r3, #16]
 8004e7e:	f000 fe7f 	bl	8005b80 <__hi0bits>
 8004e82:	f1c0 0020 	rsb	r0, r0, #32
 8004e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e88:	4418      	add	r0, r3
 8004e8a:	f010 001f 	ands.w	r0, r0, #31
 8004e8e:	f000 8092 	beq.w	8004fb6 <_dtoa_r+0x926>
 8004e92:	f1c0 0320 	rsb	r3, r0, #32
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	f340 808a 	ble.w	8004fb0 <_dtoa_r+0x920>
 8004e9c:	f1c0 001c 	rsb	r0, r0, #28
 8004ea0:	9b06      	ldr	r3, [sp, #24]
 8004ea2:	4403      	add	r3, r0
 8004ea4:	9306      	str	r3, [sp, #24]
 8004ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ea8:	4403      	add	r3, r0
 8004eaa:	4407      	add	r7, r0
 8004eac:	9309      	str	r3, [sp, #36]	; 0x24
 8004eae:	9b06      	ldr	r3, [sp, #24]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	dd05      	ble.n	8004ec0 <_dtoa_r+0x830>
 8004eb4:	4659      	mov	r1, fp
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	4628      	mov	r0, r5
 8004eba:	f000 ffc7 	bl	8005e4c <__lshift>
 8004ebe:	4683      	mov	fp, r0
 8004ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	dd05      	ble.n	8004ed2 <_dtoa_r+0x842>
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	461a      	mov	r2, r3
 8004eca:	4628      	mov	r0, r5
 8004ecc:	f000 ffbe 	bl	8005e4c <__lshift>
 8004ed0:	4604      	mov	r4, r0
 8004ed2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d070      	beq.n	8004fba <_dtoa_r+0x92a>
 8004ed8:	4621      	mov	r1, r4
 8004eda:	4658      	mov	r0, fp
 8004edc:	f001 f826 	bl	8005f2c <__mcmp>
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	da6a      	bge.n	8004fba <_dtoa_r+0x92a>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	4659      	mov	r1, fp
 8004ee8:	220a      	movs	r2, #10
 8004eea:	4628      	mov	r0, r5
 8004eec:	f000 fdb8 	bl	8005a60 <__multadd>
 8004ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ef2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004ef6:	4683      	mov	fp, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 8194 	beq.w	8005226 <_dtoa_r+0xb96>
 8004efe:	4631      	mov	r1, r6
 8004f00:	2300      	movs	r3, #0
 8004f02:	220a      	movs	r2, #10
 8004f04:	4628      	mov	r0, r5
 8004f06:	f000 fdab 	bl	8005a60 <__multadd>
 8004f0a:	f1b9 0f00 	cmp.w	r9, #0
 8004f0e:	4606      	mov	r6, r0
 8004f10:	f300 8093 	bgt.w	800503a <_dtoa_r+0x9aa>
 8004f14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	dc57      	bgt.n	8004fca <_dtoa_r+0x93a>
 8004f1a:	e08e      	b.n	800503a <_dtoa_r+0x9aa>
 8004f1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004f1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004f22:	e757      	b.n	8004dd4 <_dtoa_r+0x744>
 8004f24:	3fe00000 	.word	0x3fe00000
 8004f28:	40240000 	.word	0x40240000
 8004f2c:	9b08      	ldr	r3, [sp, #32]
 8004f2e:	1e5c      	subs	r4, r3, #1
 8004f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f32:	42a3      	cmp	r3, r4
 8004f34:	bfbf      	itttt	lt
 8004f36:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004f38:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004f3a:	1ae2      	sublt	r2, r4, r3
 8004f3c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004f3e:	bfb6      	itet	lt
 8004f40:	189b      	addlt	r3, r3, r2
 8004f42:	1b1c      	subge	r4, r3, r4
 8004f44:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004f46:	9b08      	ldr	r3, [sp, #32]
 8004f48:	bfb8      	it	lt
 8004f4a:	2400      	movlt	r4, #0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	bfb9      	ittee	lt
 8004f50:	9b06      	ldrlt	r3, [sp, #24]
 8004f52:	9a08      	ldrlt	r2, [sp, #32]
 8004f54:	9f06      	ldrge	r7, [sp, #24]
 8004f56:	9b08      	ldrge	r3, [sp, #32]
 8004f58:	bfbc      	itt	lt
 8004f5a:	1a9f      	sublt	r7, r3, r2
 8004f5c:	2300      	movlt	r3, #0
 8004f5e:	e73b      	b.n	8004dd8 <_dtoa_r+0x748>
 8004f60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004f62:	9f06      	ldr	r7, [sp, #24]
 8004f64:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004f66:	e742      	b.n	8004dee <_dtoa_r+0x75e>
 8004f68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f6a:	e76b      	b.n	8004e44 <_dtoa_r+0x7b4>
 8004f6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	dc19      	bgt.n	8004fa6 <_dtoa_r+0x916>
 8004f72:	9b04      	ldr	r3, [sp, #16]
 8004f74:	b9bb      	cbnz	r3, 8004fa6 <_dtoa_r+0x916>
 8004f76:	9b05      	ldr	r3, [sp, #20]
 8004f78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f7c:	b99b      	cbnz	r3, 8004fa6 <_dtoa_r+0x916>
 8004f7e:	9b05      	ldr	r3, [sp, #20]
 8004f80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f84:	0d1b      	lsrs	r3, r3, #20
 8004f86:	051b      	lsls	r3, r3, #20
 8004f88:	b183      	cbz	r3, 8004fac <_dtoa_r+0x91c>
 8004f8a:	9b06      	ldr	r3, [sp, #24]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	9306      	str	r3, [sp, #24]
 8004f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f92:	3301      	adds	r3, #1
 8004f94:	9309      	str	r3, [sp, #36]	; 0x24
 8004f96:	f04f 0801 	mov.w	r8, #1
 8004f9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f47f af6a 	bne.w	8004e76 <_dtoa_r+0x7e6>
 8004fa2:	2001      	movs	r0, #1
 8004fa4:	e76f      	b.n	8004e86 <_dtoa_r+0x7f6>
 8004fa6:	f04f 0800 	mov.w	r8, #0
 8004faa:	e7f6      	b.n	8004f9a <_dtoa_r+0x90a>
 8004fac:	4698      	mov	r8, r3
 8004fae:	e7f4      	b.n	8004f9a <_dtoa_r+0x90a>
 8004fb0:	f43f af7d 	beq.w	8004eae <_dtoa_r+0x81e>
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	301c      	adds	r0, #28
 8004fb8:	e772      	b.n	8004ea0 <_dtoa_r+0x810>
 8004fba:	9b08      	ldr	r3, [sp, #32]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	dc36      	bgt.n	800502e <_dtoa_r+0x99e>
 8004fc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	dd33      	ble.n	800502e <_dtoa_r+0x99e>
 8004fc6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004fca:	f1b9 0f00 	cmp.w	r9, #0
 8004fce:	d10d      	bne.n	8004fec <_dtoa_r+0x95c>
 8004fd0:	4621      	mov	r1, r4
 8004fd2:	464b      	mov	r3, r9
 8004fd4:	2205      	movs	r2, #5
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	f000 fd42 	bl	8005a60 <__multadd>
 8004fdc:	4601      	mov	r1, r0
 8004fde:	4604      	mov	r4, r0
 8004fe0:	4658      	mov	r0, fp
 8004fe2:	f000 ffa3 	bl	8005f2c <__mcmp>
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	f73f adb8 	bgt.w	8004b5c <_dtoa_r+0x4cc>
 8004fec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004fee:	9f03      	ldr	r7, [sp, #12]
 8004ff0:	ea6f 0a03 	mvn.w	sl, r3
 8004ff4:	f04f 0800 	mov.w	r8, #0
 8004ff8:	4621      	mov	r1, r4
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	f000 fd0e 	bl	8005a1c <_Bfree>
 8005000:	2e00      	cmp	r6, #0
 8005002:	f43f aea7 	beq.w	8004d54 <_dtoa_r+0x6c4>
 8005006:	f1b8 0f00 	cmp.w	r8, #0
 800500a:	d005      	beq.n	8005018 <_dtoa_r+0x988>
 800500c:	45b0      	cmp	r8, r6
 800500e:	d003      	beq.n	8005018 <_dtoa_r+0x988>
 8005010:	4641      	mov	r1, r8
 8005012:	4628      	mov	r0, r5
 8005014:	f000 fd02 	bl	8005a1c <_Bfree>
 8005018:	4631      	mov	r1, r6
 800501a:	4628      	mov	r0, r5
 800501c:	f000 fcfe 	bl	8005a1c <_Bfree>
 8005020:	e698      	b.n	8004d54 <_dtoa_r+0x6c4>
 8005022:	2400      	movs	r4, #0
 8005024:	4626      	mov	r6, r4
 8005026:	e7e1      	b.n	8004fec <_dtoa_r+0x95c>
 8005028:	46c2      	mov	sl, r8
 800502a:	4626      	mov	r6, r4
 800502c:	e596      	b.n	8004b5c <_dtoa_r+0x4cc>
 800502e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005030:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 80fd 	beq.w	8005234 <_dtoa_r+0xba4>
 800503a:	2f00      	cmp	r7, #0
 800503c:	dd05      	ble.n	800504a <_dtoa_r+0x9ba>
 800503e:	4631      	mov	r1, r6
 8005040:	463a      	mov	r2, r7
 8005042:	4628      	mov	r0, r5
 8005044:	f000 ff02 	bl	8005e4c <__lshift>
 8005048:	4606      	mov	r6, r0
 800504a:	f1b8 0f00 	cmp.w	r8, #0
 800504e:	d05c      	beq.n	800510a <_dtoa_r+0xa7a>
 8005050:	6871      	ldr	r1, [r6, #4]
 8005052:	4628      	mov	r0, r5
 8005054:	f000 fca2 	bl	800599c <_Balloc>
 8005058:	4607      	mov	r7, r0
 800505a:	b928      	cbnz	r0, 8005068 <_dtoa_r+0x9d8>
 800505c:	4b80      	ldr	r3, [pc, #512]	; (8005260 <_dtoa_r+0xbd0>)
 800505e:	4602      	mov	r2, r0
 8005060:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005064:	f7ff bb28 	b.w	80046b8 <_dtoa_r+0x28>
 8005068:	6932      	ldr	r2, [r6, #16]
 800506a:	3202      	adds	r2, #2
 800506c:	0092      	lsls	r2, r2, #2
 800506e:	f106 010c 	add.w	r1, r6, #12
 8005072:	300c      	adds	r0, #12
 8005074:	f000 fc84 	bl	8005980 <memcpy>
 8005078:	2201      	movs	r2, #1
 800507a:	4639      	mov	r1, r7
 800507c:	4628      	mov	r0, r5
 800507e:	f000 fee5 	bl	8005e4c <__lshift>
 8005082:	9b03      	ldr	r3, [sp, #12]
 8005084:	3301      	adds	r3, #1
 8005086:	9308      	str	r3, [sp, #32]
 8005088:	9b03      	ldr	r3, [sp, #12]
 800508a:	444b      	add	r3, r9
 800508c:	930a      	str	r3, [sp, #40]	; 0x28
 800508e:	9b04      	ldr	r3, [sp, #16]
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	46b0      	mov	r8, r6
 8005096:	9309      	str	r3, [sp, #36]	; 0x24
 8005098:	4606      	mov	r6, r0
 800509a:	9b08      	ldr	r3, [sp, #32]
 800509c:	4621      	mov	r1, r4
 800509e:	3b01      	subs	r3, #1
 80050a0:	4658      	mov	r0, fp
 80050a2:	9304      	str	r3, [sp, #16]
 80050a4:	f7ff fa6c 	bl	8004580 <quorem>
 80050a8:	4603      	mov	r3, r0
 80050aa:	3330      	adds	r3, #48	; 0x30
 80050ac:	9006      	str	r0, [sp, #24]
 80050ae:	4641      	mov	r1, r8
 80050b0:	4658      	mov	r0, fp
 80050b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80050b4:	f000 ff3a 	bl	8005f2c <__mcmp>
 80050b8:	4632      	mov	r2, r6
 80050ba:	4681      	mov	r9, r0
 80050bc:	4621      	mov	r1, r4
 80050be:	4628      	mov	r0, r5
 80050c0:	f000 ff50 	bl	8005f64 <__mdiff>
 80050c4:	68c2      	ldr	r2, [r0, #12]
 80050c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050c8:	4607      	mov	r7, r0
 80050ca:	bb02      	cbnz	r2, 800510e <_dtoa_r+0xa7e>
 80050cc:	4601      	mov	r1, r0
 80050ce:	4658      	mov	r0, fp
 80050d0:	f000 ff2c 	bl	8005f2c <__mcmp>
 80050d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050d6:	4602      	mov	r2, r0
 80050d8:	4639      	mov	r1, r7
 80050da:	4628      	mov	r0, r5
 80050dc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80050e0:	f000 fc9c 	bl	8005a1c <_Bfree>
 80050e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050e8:	9f08      	ldr	r7, [sp, #32]
 80050ea:	ea43 0102 	orr.w	r1, r3, r2
 80050ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050f0:	430b      	orrs	r3, r1
 80050f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050f4:	d10d      	bne.n	8005112 <_dtoa_r+0xa82>
 80050f6:	2b39      	cmp	r3, #57	; 0x39
 80050f8:	d029      	beq.n	800514e <_dtoa_r+0xabe>
 80050fa:	f1b9 0f00 	cmp.w	r9, #0
 80050fe:	dd01      	ble.n	8005104 <_dtoa_r+0xa74>
 8005100:	9b06      	ldr	r3, [sp, #24]
 8005102:	3331      	adds	r3, #49	; 0x31
 8005104:	9a04      	ldr	r2, [sp, #16]
 8005106:	7013      	strb	r3, [r2, #0]
 8005108:	e776      	b.n	8004ff8 <_dtoa_r+0x968>
 800510a:	4630      	mov	r0, r6
 800510c:	e7b9      	b.n	8005082 <_dtoa_r+0x9f2>
 800510e:	2201      	movs	r2, #1
 8005110:	e7e2      	b.n	80050d8 <_dtoa_r+0xa48>
 8005112:	f1b9 0f00 	cmp.w	r9, #0
 8005116:	db06      	blt.n	8005126 <_dtoa_r+0xa96>
 8005118:	9922      	ldr	r1, [sp, #136]	; 0x88
 800511a:	ea41 0909 	orr.w	r9, r1, r9
 800511e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005120:	ea59 0101 	orrs.w	r1, r9, r1
 8005124:	d120      	bne.n	8005168 <_dtoa_r+0xad8>
 8005126:	2a00      	cmp	r2, #0
 8005128:	ddec      	ble.n	8005104 <_dtoa_r+0xa74>
 800512a:	4659      	mov	r1, fp
 800512c:	2201      	movs	r2, #1
 800512e:	4628      	mov	r0, r5
 8005130:	9308      	str	r3, [sp, #32]
 8005132:	f000 fe8b 	bl	8005e4c <__lshift>
 8005136:	4621      	mov	r1, r4
 8005138:	4683      	mov	fp, r0
 800513a:	f000 fef7 	bl	8005f2c <__mcmp>
 800513e:	2800      	cmp	r0, #0
 8005140:	9b08      	ldr	r3, [sp, #32]
 8005142:	dc02      	bgt.n	800514a <_dtoa_r+0xaba>
 8005144:	d1de      	bne.n	8005104 <_dtoa_r+0xa74>
 8005146:	07da      	lsls	r2, r3, #31
 8005148:	d5dc      	bpl.n	8005104 <_dtoa_r+0xa74>
 800514a:	2b39      	cmp	r3, #57	; 0x39
 800514c:	d1d8      	bne.n	8005100 <_dtoa_r+0xa70>
 800514e:	9a04      	ldr	r2, [sp, #16]
 8005150:	2339      	movs	r3, #57	; 0x39
 8005152:	7013      	strb	r3, [r2, #0]
 8005154:	463b      	mov	r3, r7
 8005156:	461f      	mov	r7, r3
 8005158:	3b01      	subs	r3, #1
 800515a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800515e:	2a39      	cmp	r2, #57	; 0x39
 8005160:	d050      	beq.n	8005204 <_dtoa_r+0xb74>
 8005162:	3201      	adds	r2, #1
 8005164:	701a      	strb	r2, [r3, #0]
 8005166:	e747      	b.n	8004ff8 <_dtoa_r+0x968>
 8005168:	2a00      	cmp	r2, #0
 800516a:	dd03      	ble.n	8005174 <_dtoa_r+0xae4>
 800516c:	2b39      	cmp	r3, #57	; 0x39
 800516e:	d0ee      	beq.n	800514e <_dtoa_r+0xabe>
 8005170:	3301      	adds	r3, #1
 8005172:	e7c7      	b.n	8005104 <_dtoa_r+0xa74>
 8005174:	9a08      	ldr	r2, [sp, #32]
 8005176:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005178:	f802 3c01 	strb.w	r3, [r2, #-1]
 800517c:	428a      	cmp	r2, r1
 800517e:	d02a      	beq.n	80051d6 <_dtoa_r+0xb46>
 8005180:	4659      	mov	r1, fp
 8005182:	2300      	movs	r3, #0
 8005184:	220a      	movs	r2, #10
 8005186:	4628      	mov	r0, r5
 8005188:	f000 fc6a 	bl	8005a60 <__multadd>
 800518c:	45b0      	cmp	r8, r6
 800518e:	4683      	mov	fp, r0
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	f04f 020a 	mov.w	r2, #10
 8005198:	4641      	mov	r1, r8
 800519a:	4628      	mov	r0, r5
 800519c:	d107      	bne.n	80051ae <_dtoa_r+0xb1e>
 800519e:	f000 fc5f 	bl	8005a60 <__multadd>
 80051a2:	4680      	mov	r8, r0
 80051a4:	4606      	mov	r6, r0
 80051a6:	9b08      	ldr	r3, [sp, #32]
 80051a8:	3301      	adds	r3, #1
 80051aa:	9308      	str	r3, [sp, #32]
 80051ac:	e775      	b.n	800509a <_dtoa_r+0xa0a>
 80051ae:	f000 fc57 	bl	8005a60 <__multadd>
 80051b2:	4631      	mov	r1, r6
 80051b4:	4680      	mov	r8, r0
 80051b6:	2300      	movs	r3, #0
 80051b8:	220a      	movs	r2, #10
 80051ba:	4628      	mov	r0, r5
 80051bc:	f000 fc50 	bl	8005a60 <__multadd>
 80051c0:	4606      	mov	r6, r0
 80051c2:	e7f0      	b.n	80051a6 <_dtoa_r+0xb16>
 80051c4:	f1b9 0f00 	cmp.w	r9, #0
 80051c8:	9a03      	ldr	r2, [sp, #12]
 80051ca:	bfcc      	ite	gt
 80051cc:	464f      	movgt	r7, r9
 80051ce:	2701      	movle	r7, #1
 80051d0:	4417      	add	r7, r2
 80051d2:	f04f 0800 	mov.w	r8, #0
 80051d6:	4659      	mov	r1, fp
 80051d8:	2201      	movs	r2, #1
 80051da:	4628      	mov	r0, r5
 80051dc:	9308      	str	r3, [sp, #32]
 80051de:	f000 fe35 	bl	8005e4c <__lshift>
 80051e2:	4621      	mov	r1, r4
 80051e4:	4683      	mov	fp, r0
 80051e6:	f000 fea1 	bl	8005f2c <__mcmp>
 80051ea:	2800      	cmp	r0, #0
 80051ec:	dcb2      	bgt.n	8005154 <_dtoa_r+0xac4>
 80051ee:	d102      	bne.n	80051f6 <_dtoa_r+0xb66>
 80051f0:	9b08      	ldr	r3, [sp, #32]
 80051f2:	07db      	lsls	r3, r3, #31
 80051f4:	d4ae      	bmi.n	8005154 <_dtoa_r+0xac4>
 80051f6:	463b      	mov	r3, r7
 80051f8:	461f      	mov	r7, r3
 80051fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051fe:	2a30      	cmp	r2, #48	; 0x30
 8005200:	d0fa      	beq.n	80051f8 <_dtoa_r+0xb68>
 8005202:	e6f9      	b.n	8004ff8 <_dtoa_r+0x968>
 8005204:	9a03      	ldr	r2, [sp, #12]
 8005206:	429a      	cmp	r2, r3
 8005208:	d1a5      	bne.n	8005156 <_dtoa_r+0xac6>
 800520a:	f10a 0a01 	add.w	sl, sl, #1
 800520e:	2331      	movs	r3, #49	; 0x31
 8005210:	e779      	b.n	8005106 <_dtoa_r+0xa76>
 8005212:	4b14      	ldr	r3, [pc, #80]	; (8005264 <_dtoa_r+0xbd4>)
 8005214:	f7ff baa7 	b.w	8004766 <_dtoa_r+0xd6>
 8005218:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800521a:	2b00      	cmp	r3, #0
 800521c:	f47f aa80 	bne.w	8004720 <_dtoa_r+0x90>
 8005220:	4b11      	ldr	r3, [pc, #68]	; (8005268 <_dtoa_r+0xbd8>)
 8005222:	f7ff baa0 	b.w	8004766 <_dtoa_r+0xd6>
 8005226:	f1b9 0f00 	cmp.w	r9, #0
 800522a:	dc03      	bgt.n	8005234 <_dtoa_r+0xba4>
 800522c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800522e:	2b02      	cmp	r3, #2
 8005230:	f73f aecb 	bgt.w	8004fca <_dtoa_r+0x93a>
 8005234:	9f03      	ldr	r7, [sp, #12]
 8005236:	4621      	mov	r1, r4
 8005238:	4658      	mov	r0, fp
 800523a:	f7ff f9a1 	bl	8004580 <quorem>
 800523e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005242:	f807 3b01 	strb.w	r3, [r7], #1
 8005246:	9a03      	ldr	r2, [sp, #12]
 8005248:	1aba      	subs	r2, r7, r2
 800524a:	4591      	cmp	r9, r2
 800524c:	ddba      	ble.n	80051c4 <_dtoa_r+0xb34>
 800524e:	4659      	mov	r1, fp
 8005250:	2300      	movs	r3, #0
 8005252:	220a      	movs	r2, #10
 8005254:	4628      	mov	r0, r5
 8005256:	f000 fc03 	bl	8005a60 <__multadd>
 800525a:	4683      	mov	fp, r0
 800525c:	e7eb      	b.n	8005236 <_dtoa_r+0xba6>
 800525e:	bf00      	nop
 8005260:	08007670 	.word	0x08007670
 8005264:	08007470 	.word	0x08007470
 8005268:	080075f1 	.word	0x080075f1

0800526c <__errno>:
 800526c:	4b01      	ldr	r3, [pc, #4]	; (8005274 <__errno+0x8>)
 800526e:	6818      	ldr	r0, [r3, #0]
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	20000044 	.word	0x20000044

08005278 <rshift>:
 8005278:	6903      	ldr	r3, [r0, #16]
 800527a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800527e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005282:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005286:	f100 0414 	add.w	r4, r0, #20
 800528a:	dd45      	ble.n	8005318 <rshift+0xa0>
 800528c:	f011 011f 	ands.w	r1, r1, #31
 8005290:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005294:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005298:	d10c      	bne.n	80052b4 <rshift+0x3c>
 800529a:	f100 0710 	add.w	r7, r0, #16
 800529e:	4629      	mov	r1, r5
 80052a0:	42b1      	cmp	r1, r6
 80052a2:	d334      	bcc.n	800530e <rshift+0x96>
 80052a4:	1a9b      	subs	r3, r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	1eea      	subs	r2, r5, #3
 80052aa:	4296      	cmp	r6, r2
 80052ac:	bf38      	it	cc
 80052ae:	2300      	movcc	r3, #0
 80052b0:	4423      	add	r3, r4
 80052b2:	e015      	b.n	80052e0 <rshift+0x68>
 80052b4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80052b8:	f1c1 0820 	rsb	r8, r1, #32
 80052bc:	40cf      	lsrs	r7, r1
 80052be:	f105 0e04 	add.w	lr, r5, #4
 80052c2:	46a1      	mov	r9, r4
 80052c4:	4576      	cmp	r6, lr
 80052c6:	46f4      	mov	ip, lr
 80052c8:	d815      	bhi.n	80052f6 <rshift+0x7e>
 80052ca:	1a9a      	subs	r2, r3, r2
 80052cc:	0092      	lsls	r2, r2, #2
 80052ce:	3a04      	subs	r2, #4
 80052d0:	3501      	adds	r5, #1
 80052d2:	42ae      	cmp	r6, r5
 80052d4:	bf38      	it	cc
 80052d6:	2200      	movcc	r2, #0
 80052d8:	18a3      	adds	r3, r4, r2
 80052da:	50a7      	str	r7, [r4, r2]
 80052dc:	b107      	cbz	r7, 80052e0 <rshift+0x68>
 80052de:	3304      	adds	r3, #4
 80052e0:	1b1a      	subs	r2, r3, r4
 80052e2:	42a3      	cmp	r3, r4
 80052e4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80052e8:	bf08      	it	eq
 80052ea:	2300      	moveq	r3, #0
 80052ec:	6102      	str	r2, [r0, #16]
 80052ee:	bf08      	it	eq
 80052f0:	6143      	streq	r3, [r0, #20]
 80052f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052f6:	f8dc c000 	ldr.w	ip, [ip]
 80052fa:	fa0c fc08 	lsl.w	ip, ip, r8
 80052fe:	ea4c 0707 	orr.w	r7, ip, r7
 8005302:	f849 7b04 	str.w	r7, [r9], #4
 8005306:	f85e 7b04 	ldr.w	r7, [lr], #4
 800530a:	40cf      	lsrs	r7, r1
 800530c:	e7da      	b.n	80052c4 <rshift+0x4c>
 800530e:	f851 cb04 	ldr.w	ip, [r1], #4
 8005312:	f847 cf04 	str.w	ip, [r7, #4]!
 8005316:	e7c3      	b.n	80052a0 <rshift+0x28>
 8005318:	4623      	mov	r3, r4
 800531a:	e7e1      	b.n	80052e0 <rshift+0x68>

0800531c <__hexdig_fun>:
 800531c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005320:	2b09      	cmp	r3, #9
 8005322:	d802      	bhi.n	800532a <__hexdig_fun+0xe>
 8005324:	3820      	subs	r0, #32
 8005326:	b2c0      	uxtb	r0, r0
 8005328:	4770      	bx	lr
 800532a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800532e:	2b05      	cmp	r3, #5
 8005330:	d801      	bhi.n	8005336 <__hexdig_fun+0x1a>
 8005332:	3847      	subs	r0, #71	; 0x47
 8005334:	e7f7      	b.n	8005326 <__hexdig_fun+0xa>
 8005336:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800533a:	2b05      	cmp	r3, #5
 800533c:	d801      	bhi.n	8005342 <__hexdig_fun+0x26>
 800533e:	3827      	subs	r0, #39	; 0x27
 8005340:	e7f1      	b.n	8005326 <__hexdig_fun+0xa>
 8005342:	2000      	movs	r0, #0
 8005344:	4770      	bx	lr
	...

08005348 <__gethex>:
 8005348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534c:	b08b      	sub	sp, #44	; 0x2c
 800534e:	468b      	mov	fp, r1
 8005350:	9305      	str	r3, [sp, #20]
 8005352:	4bb2      	ldr	r3, [pc, #712]	; (800561c <__gethex+0x2d4>)
 8005354:	9002      	str	r0, [sp, #8]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	9303      	str	r3, [sp, #12]
 800535a:	4618      	mov	r0, r3
 800535c:	4690      	mov	r8, r2
 800535e:	f7fa ff3f 	bl	80001e0 <strlen>
 8005362:	9b03      	ldr	r3, [sp, #12]
 8005364:	f8db 2000 	ldr.w	r2, [fp]
 8005368:	4403      	add	r3, r0
 800536a:	4682      	mov	sl, r0
 800536c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005370:	9306      	str	r3, [sp, #24]
 8005372:	1c93      	adds	r3, r2, #2
 8005374:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005378:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800537c:	32fe      	adds	r2, #254	; 0xfe
 800537e:	18d1      	adds	r1, r2, r3
 8005380:	461f      	mov	r7, r3
 8005382:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005386:	9101      	str	r1, [sp, #4]
 8005388:	2830      	cmp	r0, #48	; 0x30
 800538a:	d0f8      	beq.n	800537e <__gethex+0x36>
 800538c:	f7ff ffc6 	bl	800531c <__hexdig_fun>
 8005390:	4604      	mov	r4, r0
 8005392:	2800      	cmp	r0, #0
 8005394:	d13a      	bne.n	800540c <__gethex+0xc4>
 8005396:	9903      	ldr	r1, [sp, #12]
 8005398:	4652      	mov	r2, sl
 800539a:	4638      	mov	r0, r7
 800539c:	f001 fa16 	bl	80067cc <strncmp>
 80053a0:	4605      	mov	r5, r0
 80053a2:	2800      	cmp	r0, #0
 80053a4:	d166      	bne.n	8005474 <__gethex+0x12c>
 80053a6:	f817 000a 	ldrb.w	r0, [r7, sl]
 80053aa:	eb07 060a 	add.w	r6, r7, sl
 80053ae:	f7ff ffb5 	bl	800531c <__hexdig_fun>
 80053b2:	2800      	cmp	r0, #0
 80053b4:	d060      	beq.n	8005478 <__gethex+0x130>
 80053b6:	4633      	mov	r3, r6
 80053b8:	7818      	ldrb	r0, [r3, #0]
 80053ba:	2830      	cmp	r0, #48	; 0x30
 80053bc:	461f      	mov	r7, r3
 80053be:	f103 0301 	add.w	r3, r3, #1
 80053c2:	d0f9      	beq.n	80053b8 <__gethex+0x70>
 80053c4:	f7ff ffaa 	bl	800531c <__hexdig_fun>
 80053c8:	2301      	movs	r3, #1
 80053ca:	fab0 f480 	clz	r4, r0
 80053ce:	0964      	lsrs	r4, r4, #5
 80053d0:	4635      	mov	r5, r6
 80053d2:	9301      	str	r3, [sp, #4]
 80053d4:	463a      	mov	r2, r7
 80053d6:	4616      	mov	r6, r2
 80053d8:	3201      	adds	r2, #1
 80053da:	7830      	ldrb	r0, [r6, #0]
 80053dc:	f7ff ff9e 	bl	800531c <__hexdig_fun>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	d1f8      	bne.n	80053d6 <__gethex+0x8e>
 80053e4:	9903      	ldr	r1, [sp, #12]
 80053e6:	4652      	mov	r2, sl
 80053e8:	4630      	mov	r0, r6
 80053ea:	f001 f9ef 	bl	80067cc <strncmp>
 80053ee:	b980      	cbnz	r0, 8005412 <__gethex+0xca>
 80053f0:	b94d      	cbnz	r5, 8005406 <__gethex+0xbe>
 80053f2:	eb06 050a 	add.w	r5, r6, sl
 80053f6:	462a      	mov	r2, r5
 80053f8:	4616      	mov	r6, r2
 80053fa:	3201      	adds	r2, #1
 80053fc:	7830      	ldrb	r0, [r6, #0]
 80053fe:	f7ff ff8d 	bl	800531c <__hexdig_fun>
 8005402:	2800      	cmp	r0, #0
 8005404:	d1f8      	bne.n	80053f8 <__gethex+0xb0>
 8005406:	1bad      	subs	r5, r5, r6
 8005408:	00ad      	lsls	r5, r5, #2
 800540a:	e004      	b.n	8005416 <__gethex+0xce>
 800540c:	2400      	movs	r4, #0
 800540e:	4625      	mov	r5, r4
 8005410:	e7e0      	b.n	80053d4 <__gethex+0x8c>
 8005412:	2d00      	cmp	r5, #0
 8005414:	d1f7      	bne.n	8005406 <__gethex+0xbe>
 8005416:	7833      	ldrb	r3, [r6, #0]
 8005418:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800541c:	2b50      	cmp	r3, #80	; 0x50
 800541e:	d139      	bne.n	8005494 <__gethex+0x14c>
 8005420:	7873      	ldrb	r3, [r6, #1]
 8005422:	2b2b      	cmp	r3, #43	; 0x2b
 8005424:	d02a      	beq.n	800547c <__gethex+0x134>
 8005426:	2b2d      	cmp	r3, #45	; 0x2d
 8005428:	d02c      	beq.n	8005484 <__gethex+0x13c>
 800542a:	1c71      	adds	r1, r6, #1
 800542c:	f04f 0900 	mov.w	r9, #0
 8005430:	7808      	ldrb	r0, [r1, #0]
 8005432:	f7ff ff73 	bl	800531c <__hexdig_fun>
 8005436:	1e43      	subs	r3, r0, #1
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b18      	cmp	r3, #24
 800543c:	d82a      	bhi.n	8005494 <__gethex+0x14c>
 800543e:	f1a0 0210 	sub.w	r2, r0, #16
 8005442:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005446:	f7ff ff69 	bl	800531c <__hexdig_fun>
 800544a:	1e43      	subs	r3, r0, #1
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b18      	cmp	r3, #24
 8005450:	d91b      	bls.n	800548a <__gethex+0x142>
 8005452:	f1b9 0f00 	cmp.w	r9, #0
 8005456:	d000      	beq.n	800545a <__gethex+0x112>
 8005458:	4252      	negs	r2, r2
 800545a:	4415      	add	r5, r2
 800545c:	f8cb 1000 	str.w	r1, [fp]
 8005460:	b1d4      	cbz	r4, 8005498 <__gethex+0x150>
 8005462:	9b01      	ldr	r3, [sp, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	bf14      	ite	ne
 8005468:	2700      	movne	r7, #0
 800546a:	2706      	moveq	r7, #6
 800546c:	4638      	mov	r0, r7
 800546e:	b00b      	add	sp, #44	; 0x2c
 8005470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005474:	463e      	mov	r6, r7
 8005476:	4625      	mov	r5, r4
 8005478:	2401      	movs	r4, #1
 800547a:	e7cc      	b.n	8005416 <__gethex+0xce>
 800547c:	f04f 0900 	mov.w	r9, #0
 8005480:	1cb1      	adds	r1, r6, #2
 8005482:	e7d5      	b.n	8005430 <__gethex+0xe8>
 8005484:	f04f 0901 	mov.w	r9, #1
 8005488:	e7fa      	b.n	8005480 <__gethex+0x138>
 800548a:	230a      	movs	r3, #10
 800548c:	fb03 0202 	mla	r2, r3, r2, r0
 8005490:	3a10      	subs	r2, #16
 8005492:	e7d6      	b.n	8005442 <__gethex+0xfa>
 8005494:	4631      	mov	r1, r6
 8005496:	e7e1      	b.n	800545c <__gethex+0x114>
 8005498:	1bf3      	subs	r3, r6, r7
 800549a:	3b01      	subs	r3, #1
 800549c:	4621      	mov	r1, r4
 800549e:	2b07      	cmp	r3, #7
 80054a0:	dc0a      	bgt.n	80054b8 <__gethex+0x170>
 80054a2:	9802      	ldr	r0, [sp, #8]
 80054a4:	f000 fa7a 	bl	800599c <_Balloc>
 80054a8:	4604      	mov	r4, r0
 80054aa:	b940      	cbnz	r0, 80054be <__gethex+0x176>
 80054ac:	4b5c      	ldr	r3, [pc, #368]	; (8005620 <__gethex+0x2d8>)
 80054ae:	4602      	mov	r2, r0
 80054b0:	21de      	movs	r1, #222	; 0xde
 80054b2:	485c      	ldr	r0, [pc, #368]	; (8005624 <__gethex+0x2dc>)
 80054b4:	f001 f9ac 	bl	8006810 <__assert_func>
 80054b8:	3101      	adds	r1, #1
 80054ba:	105b      	asrs	r3, r3, #1
 80054bc:	e7ef      	b.n	800549e <__gethex+0x156>
 80054be:	f100 0914 	add.w	r9, r0, #20
 80054c2:	f04f 0b00 	mov.w	fp, #0
 80054c6:	f1ca 0301 	rsb	r3, sl, #1
 80054ca:	f8cd 9010 	str.w	r9, [sp, #16]
 80054ce:	f8cd b004 	str.w	fp, [sp, #4]
 80054d2:	9308      	str	r3, [sp, #32]
 80054d4:	42b7      	cmp	r7, r6
 80054d6:	d33f      	bcc.n	8005558 <__gethex+0x210>
 80054d8:	9f04      	ldr	r7, [sp, #16]
 80054da:	9b01      	ldr	r3, [sp, #4]
 80054dc:	f847 3b04 	str.w	r3, [r7], #4
 80054e0:	eba7 0709 	sub.w	r7, r7, r9
 80054e4:	10bf      	asrs	r7, r7, #2
 80054e6:	6127      	str	r7, [r4, #16]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 fb49 	bl	8005b80 <__hi0bits>
 80054ee:	017f      	lsls	r7, r7, #5
 80054f0:	f8d8 6000 	ldr.w	r6, [r8]
 80054f4:	1a3f      	subs	r7, r7, r0
 80054f6:	42b7      	cmp	r7, r6
 80054f8:	dd62      	ble.n	80055c0 <__gethex+0x278>
 80054fa:	1bbf      	subs	r7, r7, r6
 80054fc:	4639      	mov	r1, r7
 80054fe:	4620      	mov	r0, r4
 8005500:	f000 fedf 	bl	80062c2 <__any_on>
 8005504:	4682      	mov	sl, r0
 8005506:	b1a8      	cbz	r0, 8005534 <__gethex+0x1ec>
 8005508:	1e7b      	subs	r3, r7, #1
 800550a:	1159      	asrs	r1, r3, #5
 800550c:	f003 021f 	and.w	r2, r3, #31
 8005510:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005514:	f04f 0a01 	mov.w	sl, #1
 8005518:	fa0a f202 	lsl.w	r2, sl, r2
 800551c:	420a      	tst	r2, r1
 800551e:	d009      	beq.n	8005534 <__gethex+0x1ec>
 8005520:	4553      	cmp	r3, sl
 8005522:	dd05      	ble.n	8005530 <__gethex+0x1e8>
 8005524:	1eb9      	subs	r1, r7, #2
 8005526:	4620      	mov	r0, r4
 8005528:	f000 fecb 	bl	80062c2 <__any_on>
 800552c:	2800      	cmp	r0, #0
 800552e:	d144      	bne.n	80055ba <__gethex+0x272>
 8005530:	f04f 0a02 	mov.w	sl, #2
 8005534:	4639      	mov	r1, r7
 8005536:	4620      	mov	r0, r4
 8005538:	f7ff fe9e 	bl	8005278 <rshift>
 800553c:	443d      	add	r5, r7
 800553e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005542:	42ab      	cmp	r3, r5
 8005544:	da4a      	bge.n	80055dc <__gethex+0x294>
 8005546:	9802      	ldr	r0, [sp, #8]
 8005548:	4621      	mov	r1, r4
 800554a:	f000 fa67 	bl	8005a1c <_Bfree>
 800554e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005550:	2300      	movs	r3, #0
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	27a3      	movs	r7, #163	; 0xa3
 8005556:	e789      	b.n	800546c <__gethex+0x124>
 8005558:	1e73      	subs	r3, r6, #1
 800555a:	9a06      	ldr	r2, [sp, #24]
 800555c:	9307      	str	r3, [sp, #28]
 800555e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005562:	4293      	cmp	r3, r2
 8005564:	d019      	beq.n	800559a <__gethex+0x252>
 8005566:	f1bb 0f20 	cmp.w	fp, #32
 800556a:	d107      	bne.n	800557c <__gethex+0x234>
 800556c:	9b04      	ldr	r3, [sp, #16]
 800556e:	9a01      	ldr	r2, [sp, #4]
 8005570:	f843 2b04 	str.w	r2, [r3], #4
 8005574:	9304      	str	r3, [sp, #16]
 8005576:	2300      	movs	r3, #0
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	469b      	mov	fp, r3
 800557c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005580:	f7ff fecc 	bl	800531c <__hexdig_fun>
 8005584:	9b01      	ldr	r3, [sp, #4]
 8005586:	f000 000f 	and.w	r0, r0, #15
 800558a:	fa00 f00b 	lsl.w	r0, r0, fp
 800558e:	4303      	orrs	r3, r0
 8005590:	9301      	str	r3, [sp, #4]
 8005592:	f10b 0b04 	add.w	fp, fp, #4
 8005596:	9b07      	ldr	r3, [sp, #28]
 8005598:	e00d      	b.n	80055b6 <__gethex+0x26e>
 800559a:	9a08      	ldr	r2, [sp, #32]
 800559c:	1e73      	subs	r3, r6, #1
 800559e:	4413      	add	r3, r2
 80055a0:	42bb      	cmp	r3, r7
 80055a2:	d3e0      	bcc.n	8005566 <__gethex+0x21e>
 80055a4:	4618      	mov	r0, r3
 80055a6:	9903      	ldr	r1, [sp, #12]
 80055a8:	9309      	str	r3, [sp, #36]	; 0x24
 80055aa:	4652      	mov	r2, sl
 80055ac:	f001 f90e 	bl	80067cc <strncmp>
 80055b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055b2:	2800      	cmp	r0, #0
 80055b4:	d1d7      	bne.n	8005566 <__gethex+0x21e>
 80055b6:	461e      	mov	r6, r3
 80055b8:	e78c      	b.n	80054d4 <__gethex+0x18c>
 80055ba:	f04f 0a03 	mov.w	sl, #3
 80055be:	e7b9      	b.n	8005534 <__gethex+0x1ec>
 80055c0:	da09      	bge.n	80055d6 <__gethex+0x28e>
 80055c2:	1bf7      	subs	r7, r6, r7
 80055c4:	4621      	mov	r1, r4
 80055c6:	9802      	ldr	r0, [sp, #8]
 80055c8:	463a      	mov	r2, r7
 80055ca:	f000 fc3f 	bl	8005e4c <__lshift>
 80055ce:	1bed      	subs	r5, r5, r7
 80055d0:	4604      	mov	r4, r0
 80055d2:	f100 0914 	add.w	r9, r0, #20
 80055d6:	f04f 0a00 	mov.w	sl, #0
 80055da:	e7b0      	b.n	800553e <__gethex+0x1f6>
 80055dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80055e0:	42a8      	cmp	r0, r5
 80055e2:	dd71      	ble.n	80056c8 <__gethex+0x380>
 80055e4:	1b45      	subs	r5, r0, r5
 80055e6:	42ae      	cmp	r6, r5
 80055e8:	dc35      	bgt.n	8005656 <__gethex+0x30e>
 80055ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d029      	beq.n	8005646 <__gethex+0x2fe>
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d02b      	beq.n	800564e <__gethex+0x306>
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d11c      	bne.n	8005634 <__gethex+0x2ec>
 80055fa:	42ae      	cmp	r6, r5
 80055fc:	d11a      	bne.n	8005634 <__gethex+0x2ec>
 80055fe:	2e01      	cmp	r6, #1
 8005600:	d112      	bne.n	8005628 <__gethex+0x2e0>
 8005602:	9a05      	ldr	r2, [sp, #20]
 8005604:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	2301      	movs	r3, #1
 800560c:	6123      	str	r3, [r4, #16]
 800560e:	f8c9 3000 	str.w	r3, [r9]
 8005612:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005614:	2762      	movs	r7, #98	; 0x62
 8005616:	601c      	str	r4, [r3, #0]
 8005618:	e728      	b.n	800546c <__gethex+0x124>
 800561a:	bf00      	nop
 800561c:	080076e8 	.word	0x080076e8
 8005620:	08007670 	.word	0x08007670
 8005624:	08007681 	.word	0x08007681
 8005628:	1e71      	subs	r1, r6, #1
 800562a:	4620      	mov	r0, r4
 800562c:	f000 fe49 	bl	80062c2 <__any_on>
 8005630:	2800      	cmp	r0, #0
 8005632:	d1e6      	bne.n	8005602 <__gethex+0x2ba>
 8005634:	9802      	ldr	r0, [sp, #8]
 8005636:	4621      	mov	r1, r4
 8005638:	f000 f9f0 	bl	8005a1c <_Bfree>
 800563c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800563e:	2300      	movs	r3, #0
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	2750      	movs	r7, #80	; 0x50
 8005644:	e712      	b.n	800546c <__gethex+0x124>
 8005646:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1f3      	bne.n	8005634 <__gethex+0x2ec>
 800564c:	e7d9      	b.n	8005602 <__gethex+0x2ba>
 800564e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1d6      	bne.n	8005602 <__gethex+0x2ba>
 8005654:	e7ee      	b.n	8005634 <__gethex+0x2ec>
 8005656:	1e6f      	subs	r7, r5, #1
 8005658:	f1ba 0f00 	cmp.w	sl, #0
 800565c:	d131      	bne.n	80056c2 <__gethex+0x37a>
 800565e:	b127      	cbz	r7, 800566a <__gethex+0x322>
 8005660:	4639      	mov	r1, r7
 8005662:	4620      	mov	r0, r4
 8005664:	f000 fe2d 	bl	80062c2 <__any_on>
 8005668:	4682      	mov	sl, r0
 800566a:	117b      	asrs	r3, r7, #5
 800566c:	2101      	movs	r1, #1
 800566e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005672:	f007 071f 	and.w	r7, r7, #31
 8005676:	fa01 f707 	lsl.w	r7, r1, r7
 800567a:	421f      	tst	r7, r3
 800567c:	4629      	mov	r1, r5
 800567e:	4620      	mov	r0, r4
 8005680:	bf18      	it	ne
 8005682:	f04a 0a02 	orrne.w	sl, sl, #2
 8005686:	1b76      	subs	r6, r6, r5
 8005688:	f7ff fdf6 	bl	8005278 <rshift>
 800568c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005690:	2702      	movs	r7, #2
 8005692:	f1ba 0f00 	cmp.w	sl, #0
 8005696:	d048      	beq.n	800572a <__gethex+0x3e2>
 8005698:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800569c:	2b02      	cmp	r3, #2
 800569e:	d015      	beq.n	80056cc <__gethex+0x384>
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	d017      	beq.n	80056d4 <__gethex+0x38c>
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d109      	bne.n	80056bc <__gethex+0x374>
 80056a8:	f01a 0f02 	tst.w	sl, #2
 80056ac:	d006      	beq.n	80056bc <__gethex+0x374>
 80056ae:	f8d9 0000 	ldr.w	r0, [r9]
 80056b2:	ea4a 0a00 	orr.w	sl, sl, r0
 80056b6:	f01a 0f01 	tst.w	sl, #1
 80056ba:	d10e      	bne.n	80056da <__gethex+0x392>
 80056bc:	f047 0710 	orr.w	r7, r7, #16
 80056c0:	e033      	b.n	800572a <__gethex+0x3e2>
 80056c2:	f04f 0a01 	mov.w	sl, #1
 80056c6:	e7d0      	b.n	800566a <__gethex+0x322>
 80056c8:	2701      	movs	r7, #1
 80056ca:	e7e2      	b.n	8005692 <__gethex+0x34a>
 80056cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056ce:	f1c3 0301 	rsb	r3, r3, #1
 80056d2:	9315      	str	r3, [sp, #84]	; 0x54
 80056d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d0f0      	beq.n	80056bc <__gethex+0x374>
 80056da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80056de:	f104 0314 	add.w	r3, r4, #20
 80056e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80056e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80056ea:	f04f 0c00 	mov.w	ip, #0
 80056ee:	4618      	mov	r0, r3
 80056f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80056f4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80056f8:	d01c      	beq.n	8005734 <__gethex+0x3ec>
 80056fa:	3201      	adds	r2, #1
 80056fc:	6002      	str	r2, [r0, #0]
 80056fe:	2f02      	cmp	r7, #2
 8005700:	f104 0314 	add.w	r3, r4, #20
 8005704:	d13d      	bne.n	8005782 <__gethex+0x43a>
 8005706:	f8d8 2000 	ldr.w	r2, [r8]
 800570a:	3a01      	subs	r2, #1
 800570c:	42b2      	cmp	r2, r6
 800570e:	d10a      	bne.n	8005726 <__gethex+0x3de>
 8005710:	1171      	asrs	r1, r6, #5
 8005712:	2201      	movs	r2, #1
 8005714:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005718:	f006 061f 	and.w	r6, r6, #31
 800571c:	fa02 f606 	lsl.w	r6, r2, r6
 8005720:	421e      	tst	r6, r3
 8005722:	bf18      	it	ne
 8005724:	4617      	movne	r7, r2
 8005726:	f047 0720 	orr.w	r7, r7, #32
 800572a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800572c:	601c      	str	r4, [r3, #0]
 800572e:	9b05      	ldr	r3, [sp, #20]
 8005730:	601d      	str	r5, [r3, #0]
 8005732:	e69b      	b.n	800546c <__gethex+0x124>
 8005734:	4299      	cmp	r1, r3
 8005736:	f843 cc04 	str.w	ip, [r3, #-4]
 800573a:	d8d8      	bhi.n	80056ee <__gethex+0x3a6>
 800573c:	68a3      	ldr	r3, [r4, #8]
 800573e:	459b      	cmp	fp, r3
 8005740:	db17      	blt.n	8005772 <__gethex+0x42a>
 8005742:	6861      	ldr	r1, [r4, #4]
 8005744:	9802      	ldr	r0, [sp, #8]
 8005746:	3101      	adds	r1, #1
 8005748:	f000 f928 	bl	800599c <_Balloc>
 800574c:	4681      	mov	r9, r0
 800574e:	b918      	cbnz	r0, 8005758 <__gethex+0x410>
 8005750:	4b1a      	ldr	r3, [pc, #104]	; (80057bc <__gethex+0x474>)
 8005752:	4602      	mov	r2, r0
 8005754:	2184      	movs	r1, #132	; 0x84
 8005756:	e6ac      	b.n	80054b2 <__gethex+0x16a>
 8005758:	6922      	ldr	r2, [r4, #16]
 800575a:	3202      	adds	r2, #2
 800575c:	f104 010c 	add.w	r1, r4, #12
 8005760:	0092      	lsls	r2, r2, #2
 8005762:	300c      	adds	r0, #12
 8005764:	f000 f90c 	bl	8005980 <memcpy>
 8005768:	4621      	mov	r1, r4
 800576a:	9802      	ldr	r0, [sp, #8]
 800576c:	f000 f956 	bl	8005a1c <_Bfree>
 8005770:	464c      	mov	r4, r9
 8005772:	6923      	ldr	r3, [r4, #16]
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800577a:	6122      	str	r2, [r4, #16]
 800577c:	2201      	movs	r2, #1
 800577e:	615a      	str	r2, [r3, #20]
 8005780:	e7bd      	b.n	80056fe <__gethex+0x3b6>
 8005782:	6922      	ldr	r2, [r4, #16]
 8005784:	455a      	cmp	r2, fp
 8005786:	dd0b      	ble.n	80057a0 <__gethex+0x458>
 8005788:	2101      	movs	r1, #1
 800578a:	4620      	mov	r0, r4
 800578c:	f7ff fd74 	bl	8005278 <rshift>
 8005790:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005794:	3501      	adds	r5, #1
 8005796:	42ab      	cmp	r3, r5
 8005798:	f6ff aed5 	blt.w	8005546 <__gethex+0x1fe>
 800579c:	2701      	movs	r7, #1
 800579e:	e7c2      	b.n	8005726 <__gethex+0x3de>
 80057a0:	f016 061f 	ands.w	r6, r6, #31
 80057a4:	d0fa      	beq.n	800579c <__gethex+0x454>
 80057a6:	4453      	add	r3, sl
 80057a8:	f1c6 0620 	rsb	r6, r6, #32
 80057ac:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80057b0:	f000 f9e6 	bl	8005b80 <__hi0bits>
 80057b4:	42b0      	cmp	r0, r6
 80057b6:	dbe7      	blt.n	8005788 <__gethex+0x440>
 80057b8:	e7f0      	b.n	800579c <__gethex+0x454>
 80057ba:	bf00      	nop
 80057bc:	08007670 	.word	0x08007670

080057c0 <L_shift>:
 80057c0:	f1c2 0208 	rsb	r2, r2, #8
 80057c4:	0092      	lsls	r2, r2, #2
 80057c6:	b570      	push	{r4, r5, r6, lr}
 80057c8:	f1c2 0620 	rsb	r6, r2, #32
 80057cc:	6843      	ldr	r3, [r0, #4]
 80057ce:	6804      	ldr	r4, [r0, #0]
 80057d0:	fa03 f506 	lsl.w	r5, r3, r6
 80057d4:	432c      	orrs	r4, r5
 80057d6:	40d3      	lsrs	r3, r2
 80057d8:	6004      	str	r4, [r0, #0]
 80057da:	f840 3f04 	str.w	r3, [r0, #4]!
 80057de:	4288      	cmp	r0, r1
 80057e0:	d3f4      	bcc.n	80057cc <L_shift+0xc>
 80057e2:	bd70      	pop	{r4, r5, r6, pc}

080057e4 <__match>:
 80057e4:	b530      	push	{r4, r5, lr}
 80057e6:	6803      	ldr	r3, [r0, #0]
 80057e8:	3301      	adds	r3, #1
 80057ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057ee:	b914      	cbnz	r4, 80057f6 <__match+0x12>
 80057f0:	6003      	str	r3, [r0, #0]
 80057f2:	2001      	movs	r0, #1
 80057f4:	bd30      	pop	{r4, r5, pc}
 80057f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80057fe:	2d19      	cmp	r5, #25
 8005800:	bf98      	it	ls
 8005802:	3220      	addls	r2, #32
 8005804:	42a2      	cmp	r2, r4
 8005806:	d0f0      	beq.n	80057ea <__match+0x6>
 8005808:	2000      	movs	r0, #0
 800580a:	e7f3      	b.n	80057f4 <__match+0x10>

0800580c <__hexnan>:
 800580c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005810:	680b      	ldr	r3, [r1, #0]
 8005812:	115e      	asrs	r6, r3, #5
 8005814:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005818:	f013 031f 	ands.w	r3, r3, #31
 800581c:	b087      	sub	sp, #28
 800581e:	bf18      	it	ne
 8005820:	3604      	addne	r6, #4
 8005822:	2500      	movs	r5, #0
 8005824:	1f37      	subs	r7, r6, #4
 8005826:	4690      	mov	r8, r2
 8005828:	6802      	ldr	r2, [r0, #0]
 800582a:	9301      	str	r3, [sp, #4]
 800582c:	4682      	mov	sl, r0
 800582e:	f846 5c04 	str.w	r5, [r6, #-4]
 8005832:	46b9      	mov	r9, r7
 8005834:	463c      	mov	r4, r7
 8005836:	9502      	str	r5, [sp, #8]
 8005838:	46ab      	mov	fp, r5
 800583a:	7851      	ldrb	r1, [r2, #1]
 800583c:	1c53      	adds	r3, r2, #1
 800583e:	9303      	str	r3, [sp, #12]
 8005840:	b341      	cbz	r1, 8005894 <__hexnan+0x88>
 8005842:	4608      	mov	r0, r1
 8005844:	9205      	str	r2, [sp, #20]
 8005846:	9104      	str	r1, [sp, #16]
 8005848:	f7ff fd68 	bl	800531c <__hexdig_fun>
 800584c:	2800      	cmp	r0, #0
 800584e:	d14f      	bne.n	80058f0 <__hexnan+0xe4>
 8005850:	9904      	ldr	r1, [sp, #16]
 8005852:	9a05      	ldr	r2, [sp, #20]
 8005854:	2920      	cmp	r1, #32
 8005856:	d818      	bhi.n	800588a <__hexnan+0x7e>
 8005858:	9b02      	ldr	r3, [sp, #8]
 800585a:	459b      	cmp	fp, r3
 800585c:	dd13      	ble.n	8005886 <__hexnan+0x7a>
 800585e:	454c      	cmp	r4, r9
 8005860:	d206      	bcs.n	8005870 <__hexnan+0x64>
 8005862:	2d07      	cmp	r5, #7
 8005864:	dc04      	bgt.n	8005870 <__hexnan+0x64>
 8005866:	462a      	mov	r2, r5
 8005868:	4649      	mov	r1, r9
 800586a:	4620      	mov	r0, r4
 800586c:	f7ff ffa8 	bl	80057c0 <L_shift>
 8005870:	4544      	cmp	r4, r8
 8005872:	d950      	bls.n	8005916 <__hexnan+0x10a>
 8005874:	2300      	movs	r3, #0
 8005876:	f1a4 0904 	sub.w	r9, r4, #4
 800587a:	f844 3c04 	str.w	r3, [r4, #-4]
 800587e:	f8cd b008 	str.w	fp, [sp, #8]
 8005882:	464c      	mov	r4, r9
 8005884:	461d      	mov	r5, r3
 8005886:	9a03      	ldr	r2, [sp, #12]
 8005888:	e7d7      	b.n	800583a <__hexnan+0x2e>
 800588a:	2929      	cmp	r1, #41	; 0x29
 800588c:	d156      	bne.n	800593c <__hexnan+0x130>
 800588e:	3202      	adds	r2, #2
 8005890:	f8ca 2000 	str.w	r2, [sl]
 8005894:	f1bb 0f00 	cmp.w	fp, #0
 8005898:	d050      	beq.n	800593c <__hexnan+0x130>
 800589a:	454c      	cmp	r4, r9
 800589c:	d206      	bcs.n	80058ac <__hexnan+0xa0>
 800589e:	2d07      	cmp	r5, #7
 80058a0:	dc04      	bgt.n	80058ac <__hexnan+0xa0>
 80058a2:	462a      	mov	r2, r5
 80058a4:	4649      	mov	r1, r9
 80058a6:	4620      	mov	r0, r4
 80058a8:	f7ff ff8a 	bl	80057c0 <L_shift>
 80058ac:	4544      	cmp	r4, r8
 80058ae:	d934      	bls.n	800591a <__hexnan+0x10e>
 80058b0:	f1a8 0204 	sub.w	r2, r8, #4
 80058b4:	4623      	mov	r3, r4
 80058b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80058ba:	f842 1f04 	str.w	r1, [r2, #4]!
 80058be:	429f      	cmp	r7, r3
 80058c0:	d2f9      	bcs.n	80058b6 <__hexnan+0xaa>
 80058c2:	1b3b      	subs	r3, r7, r4
 80058c4:	f023 0303 	bic.w	r3, r3, #3
 80058c8:	3304      	adds	r3, #4
 80058ca:	3401      	adds	r4, #1
 80058cc:	3e03      	subs	r6, #3
 80058ce:	42b4      	cmp	r4, r6
 80058d0:	bf88      	it	hi
 80058d2:	2304      	movhi	r3, #4
 80058d4:	4443      	add	r3, r8
 80058d6:	2200      	movs	r2, #0
 80058d8:	f843 2b04 	str.w	r2, [r3], #4
 80058dc:	429f      	cmp	r7, r3
 80058de:	d2fb      	bcs.n	80058d8 <__hexnan+0xcc>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	b91b      	cbnz	r3, 80058ec <__hexnan+0xe0>
 80058e4:	4547      	cmp	r7, r8
 80058e6:	d127      	bne.n	8005938 <__hexnan+0x12c>
 80058e8:	2301      	movs	r3, #1
 80058ea:	603b      	str	r3, [r7, #0]
 80058ec:	2005      	movs	r0, #5
 80058ee:	e026      	b.n	800593e <__hexnan+0x132>
 80058f0:	3501      	adds	r5, #1
 80058f2:	2d08      	cmp	r5, #8
 80058f4:	f10b 0b01 	add.w	fp, fp, #1
 80058f8:	dd06      	ble.n	8005908 <__hexnan+0xfc>
 80058fa:	4544      	cmp	r4, r8
 80058fc:	d9c3      	bls.n	8005886 <__hexnan+0x7a>
 80058fe:	2300      	movs	r3, #0
 8005900:	f844 3c04 	str.w	r3, [r4, #-4]
 8005904:	2501      	movs	r5, #1
 8005906:	3c04      	subs	r4, #4
 8005908:	6822      	ldr	r2, [r4, #0]
 800590a:	f000 000f 	and.w	r0, r0, #15
 800590e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005912:	6022      	str	r2, [r4, #0]
 8005914:	e7b7      	b.n	8005886 <__hexnan+0x7a>
 8005916:	2508      	movs	r5, #8
 8005918:	e7b5      	b.n	8005886 <__hexnan+0x7a>
 800591a:	9b01      	ldr	r3, [sp, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d0df      	beq.n	80058e0 <__hexnan+0xd4>
 8005920:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005924:	f1c3 0320 	rsb	r3, r3, #32
 8005928:	fa22 f303 	lsr.w	r3, r2, r3
 800592c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005930:	401a      	ands	r2, r3
 8005932:	f846 2c04 	str.w	r2, [r6, #-4]
 8005936:	e7d3      	b.n	80058e0 <__hexnan+0xd4>
 8005938:	3f04      	subs	r7, #4
 800593a:	e7d1      	b.n	80058e0 <__hexnan+0xd4>
 800593c:	2004      	movs	r0, #4
 800593e:	b007      	add	sp, #28
 8005940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005944 <_localeconv_r>:
 8005944:	4800      	ldr	r0, [pc, #0]	; (8005948 <_localeconv_r+0x4>)
 8005946:	4770      	bx	lr
 8005948:	2000019c 	.word	0x2000019c

0800594c <malloc>:
 800594c:	4b02      	ldr	r3, [pc, #8]	; (8005958 <malloc+0xc>)
 800594e:	4601      	mov	r1, r0
 8005950:	6818      	ldr	r0, [r3, #0]
 8005952:	f000 bd55 	b.w	8006400 <_malloc_r>
 8005956:	bf00      	nop
 8005958:	20000044 	.word	0x20000044

0800595c <__ascii_mbtowc>:
 800595c:	b082      	sub	sp, #8
 800595e:	b901      	cbnz	r1, 8005962 <__ascii_mbtowc+0x6>
 8005960:	a901      	add	r1, sp, #4
 8005962:	b142      	cbz	r2, 8005976 <__ascii_mbtowc+0x1a>
 8005964:	b14b      	cbz	r3, 800597a <__ascii_mbtowc+0x1e>
 8005966:	7813      	ldrb	r3, [r2, #0]
 8005968:	600b      	str	r3, [r1, #0]
 800596a:	7812      	ldrb	r2, [r2, #0]
 800596c:	1e10      	subs	r0, r2, #0
 800596e:	bf18      	it	ne
 8005970:	2001      	movne	r0, #1
 8005972:	b002      	add	sp, #8
 8005974:	4770      	bx	lr
 8005976:	4610      	mov	r0, r2
 8005978:	e7fb      	b.n	8005972 <__ascii_mbtowc+0x16>
 800597a:	f06f 0001 	mvn.w	r0, #1
 800597e:	e7f8      	b.n	8005972 <__ascii_mbtowc+0x16>

08005980 <memcpy>:
 8005980:	440a      	add	r2, r1
 8005982:	4291      	cmp	r1, r2
 8005984:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005988:	d100      	bne.n	800598c <memcpy+0xc>
 800598a:	4770      	bx	lr
 800598c:	b510      	push	{r4, lr}
 800598e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005992:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005996:	4291      	cmp	r1, r2
 8005998:	d1f9      	bne.n	800598e <memcpy+0xe>
 800599a:	bd10      	pop	{r4, pc}

0800599c <_Balloc>:
 800599c:	b570      	push	{r4, r5, r6, lr}
 800599e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059a0:	4604      	mov	r4, r0
 80059a2:	460d      	mov	r5, r1
 80059a4:	b976      	cbnz	r6, 80059c4 <_Balloc+0x28>
 80059a6:	2010      	movs	r0, #16
 80059a8:	f7ff ffd0 	bl	800594c <malloc>
 80059ac:	4602      	mov	r2, r0
 80059ae:	6260      	str	r0, [r4, #36]	; 0x24
 80059b0:	b920      	cbnz	r0, 80059bc <_Balloc+0x20>
 80059b2:	4b18      	ldr	r3, [pc, #96]	; (8005a14 <_Balloc+0x78>)
 80059b4:	4818      	ldr	r0, [pc, #96]	; (8005a18 <_Balloc+0x7c>)
 80059b6:	2166      	movs	r1, #102	; 0x66
 80059b8:	f000 ff2a 	bl	8006810 <__assert_func>
 80059bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059c0:	6006      	str	r6, [r0, #0]
 80059c2:	60c6      	str	r6, [r0, #12]
 80059c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80059c6:	68f3      	ldr	r3, [r6, #12]
 80059c8:	b183      	cbz	r3, 80059ec <_Balloc+0x50>
 80059ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80059d2:	b9b8      	cbnz	r0, 8005a04 <_Balloc+0x68>
 80059d4:	2101      	movs	r1, #1
 80059d6:	fa01 f605 	lsl.w	r6, r1, r5
 80059da:	1d72      	adds	r2, r6, #5
 80059dc:	0092      	lsls	r2, r2, #2
 80059de:	4620      	mov	r0, r4
 80059e0:	f000 fc90 	bl	8006304 <_calloc_r>
 80059e4:	b160      	cbz	r0, 8005a00 <_Balloc+0x64>
 80059e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80059ea:	e00e      	b.n	8005a0a <_Balloc+0x6e>
 80059ec:	2221      	movs	r2, #33	; 0x21
 80059ee:	2104      	movs	r1, #4
 80059f0:	4620      	mov	r0, r4
 80059f2:	f000 fc87 	bl	8006304 <_calloc_r>
 80059f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059f8:	60f0      	str	r0, [r6, #12]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1e4      	bne.n	80059ca <_Balloc+0x2e>
 8005a00:	2000      	movs	r0, #0
 8005a02:	bd70      	pop	{r4, r5, r6, pc}
 8005a04:	6802      	ldr	r2, [r0, #0]
 8005a06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a10:	e7f7      	b.n	8005a02 <_Balloc+0x66>
 8005a12:	bf00      	nop
 8005a14:	080075fe 	.word	0x080075fe
 8005a18:	080076fc 	.word	0x080076fc

08005a1c <_Bfree>:
 8005a1c:	b570      	push	{r4, r5, r6, lr}
 8005a1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a20:	4605      	mov	r5, r0
 8005a22:	460c      	mov	r4, r1
 8005a24:	b976      	cbnz	r6, 8005a44 <_Bfree+0x28>
 8005a26:	2010      	movs	r0, #16
 8005a28:	f7ff ff90 	bl	800594c <malloc>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	6268      	str	r0, [r5, #36]	; 0x24
 8005a30:	b920      	cbnz	r0, 8005a3c <_Bfree+0x20>
 8005a32:	4b09      	ldr	r3, [pc, #36]	; (8005a58 <_Bfree+0x3c>)
 8005a34:	4809      	ldr	r0, [pc, #36]	; (8005a5c <_Bfree+0x40>)
 8005a36:	218a      	movs	r1, #138	; 0x8a
 8005a38:	f000 feea 	bl	8006810 <__assert_func>
 8005a3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a40:	6006      	str	r6, [r0, #0]
 8005a42:	60c6      	str	r6, [r0, #12]
 8005a44:	b13c      	cbz	r4, 8005a56 <_Bfree+0x3a>
 8005a46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a48:	6862      	ldr	r2, [r4, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a50:	6021      	str	r1, [r4, #0]
 8005a52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a56:	bd70      	pop	{r4, r5, r6, pc}
 8005a58:	080075fe 	.word	0x080075fe
 8005a5c:	080076fc 	.word	0x080076fc

08005a60 <__multadd>:
 8005a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a64:	690d      	ldr	r5, [r1, #16]
 8005a66:	4607      	mov	r7, r0
 8005a68:	460c      	mov	r4, r1
 8005a6a:	461e      	mov	r6, r3
 8005a6c:	f101 0c14 	add.w	ip, r1, #20
 8005a70:	2000      	movs	r0, #0
 8005a72:	f8dc 3000 	ldr.w	r3, [ip]
 8005a76:	b299      	uxth	r1, r3
 8005a78:	fb02 6101 	mla	r1, r2, r1, r6
 8005a7c:	0c1e      	lsrs	r6, r3, #16
 8005a7e:	0c0b      	lsrs	r3, r1, #16
 8005a80:	fb02 3306 	mla	r3, r2, r6, r3
 8005a84:	b289      	uxth	r1, r1
 8005a86:	3001      	adds	r0, #1
 8005a88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005a8c:	4285      	cmp	r5, r0
 8005a8e:	f84c 1b04 	str.w	r1, [ip], #4
 8005a92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005a96:	dcec      	bgt.n	8005a72 <__multadd+0x12>
 8005a98:	b30e      	cbz	r6, 8005ade <__multadd+0x7e>
 8005a9a:	68a3      	ldr	r3, [r4, #8]
 8005a9c:	42ab      	cmp	r3, r5
 8005a9e:	dc19      	bgt.n	8005ad4 <__multadd+0x74>
 8005aa0:	6861      	ldr	r1, [r4, #4]
 8005aa2:	4638      	mov	r0, r7
 8005aa4:	3101      	adds	r1, #1
 8005aa6:	f7ff ff79 	bl	800599c <_Balloc>
 8005aaa:	4680      	mov	r8, r0
 8005aac:	b928      	cbnz	r0, 8005aba <__multadd+0x5a>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	4b0c      	ldr	r3, [pc, #48]	; (8005ae4 <__multadd+0x84>)
 8005ab2:	480d      	ldr	r0, [pc, #52]	; (8005ae8 <__multadd+0x88>)
 8005ab4:	21b5      	movs	r1, #181	; 0xb5
 8005ab6:	f000 feab 	bl	8006810 <__assert_func>
 8005aba:	6922      	ldr	r2, [r4, #16]
 8005abc:	3202      	adds	r2, #2
 8005abe:	f104 010c 	add.w	r1, r4, #12
 8005ac2:	0092      	lsls	r2, r2, #2
 8005ac4:	300c      	adds	r0, #12
 8005ac6:	f7ff ff5b 	bl	8005980 <memcpy>
 8005aca:	4621      	mov	r1, r4
 8005acc:	4638      	mov	r0, r7
 8005ace:	f7ff ffa5 	bl	8005a1c <_Bfree>
 8005ad2:	4644      	mov	r4, r8
 8005ad4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ad8:	3501      	adds	r5, #1
 8005ada:	615e      	str	r6, [r3, #20]
 8005adc:	6125      	str	r5, [r4, #16]
 8005ade:	4620      	mov	r0, r4
 8005ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ae4:	08007670 	.word	0x08007670
 8005ae8:	080076fc 	.word	0x080076fc

08005aec <__s2b>:
 8005aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005af0:	460c      	mov	r4, r1
 8005af2:	4615      	mov	r5, r2
 8005af4:	461f      	mov	r7, r3
 8005af6:	2209      	movs	r2, #9
 8005af8:	3308      	adds	r3, #8
 8005afa:	4606      	mov	r6, r0
 8005afc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b00:	2100      	movs	r1, #0
 8005b02:	2201      	movs	r2, #1
 8005b04:	429a      	cmp	r2, r3
 8005b06:	db09      	blt.n	8005b1c <__s2b+0x30>
 8005b08:	4630      	mov	r0, r6
 8005b0a:	f7ff ff47 	bl	800599c <_Balloc>
 8005b0e:	b940      	cbnz	r0, 8005b22 <__s2b+0x36>
 8005b10:	4602      	mov	r2, r0
 8005b12:	4b19      	ldr	r3, [pc, #100]	; (8005b78 <__s2b+0x8c>)
 8005b14:	4819      	ldr	r0, [pc, #100]	; (8005b7c <__s2b+0x90>)
 8005b16:	21ce      	movs	r1, #206	; 0xce
 8005b18:	f000 fe7a 	bl	8006810 <__assert_func>
 8005b1c:	0052      	lsls	r2, r2, #1
 8005b1e:	3101      	adds	r1, #1
 8005b20:	e7f0      	b.n	8005b04 <__s2b+0x18>
 8005b22:	9b08      	ldr	r3, [sp, #32]
 8005b24:	6143      	str	r3, [r0, #20]
 8005b26:	2d09      	cmp	r5, #9
 8005b28:	f04f 0301 	mov.w	r3, #1
 8005b2c:	6103      	str	r3, [r0, #16]
 8005b2e:	dd16      	ble.n	8005b5e <__s2b+0x72>
 8005b30:	f104 0909 	add.w	r9, r4, #9
 8005b34:	46c8      	mov	r8, r9
 8005b36:	442c      	add	r4, r5
 8005b38:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005b3c:	4601      	mov	r1, r0
 8005b3e:	3b30      	subs	r3, #48	; 0x30
 8005b40:	220a      	movs	r2, #10
 8005b42:	4630      	mov	r0, r6
 8005b44:	f7ff ff8c 	bl	8005a60 <__multadd>
 8005b48:	45a0      	cmp	r8, r4
 8005b4a:	d1f5      	bne.n	8005b38 <__s2b+0x4c>
 8005b4c:	f1a5 0408 	sub.w	r4, r5, #8
 8005b50:	444c      	add	r4, r9
 8005b52:	1b2d      	subs	r5, r5, r4
 8005b54:	1963      	adds	r3, r4, r5
 8005b56:	42bb      	cmp	r3, r7
 8005b58:	db04      	blt.n	8005b64 <__s2b+0x78>
 8005b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b5e:	340a      	adds	r4, #10
 8005b60:	2509      	movs	r5, #9
 8005b62:	e7f6      	b.n	8005b52 <__s2b+0x66>
 8005b64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005b68:	4601      	mov	r1, r0
 8005b6a:	3b30      	subs	r3, #48	; 0x30
 8005b6c:	220a      	movs	r2, #10
 8005b6e:	4630      	mov	r0, r6
 8005b70:	f7ff ff76 	bl	8005a60 <__multadd>
 8005b74:	e7ee      	b.n	8005b54 <__s2b+0x68>
 8005b76:	bf00      	nop
 8005b78:	08007670 	.word	0x08007670
 8005b7c:	080076fc 	.word	0x080076fc

08005b80 <__hi0bits>:
 8005b80:	0c02      	lsrs	r2, r0, #16
 8005b82:	0412      	lsls	r2, r2, #16
 8005b84:	4603      	mov	r3, r0
 8005b86:	b9ca      	cbnz	r2, 8005bbc <__hi0bits+0x3c>
 8005b88:	0403      	lsls	r3, r0, #16
 8005b8a:	2010      	movs	r0, #16
 8005b8c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005b90:	bf04      	itt	eq
 8005b92:	021b      	lsleq	r3, r3, #8
 8005b94:	3008      	addeq	r0, #8
 8005b96:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005b9a:	bf04      	itt	eq
 8005b9c:	011b      	lsleq	r3, r3, #4
 8005b9e:	3004      	addeq	r0, #4
 8005ba0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005ba4:	bf04      	itt	eq
 8005ba6:	009b      	lsleq	r3, r3, #2
 8005ba8:	3002      	addeq	r0, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	db05      	blt.n	8005bba <__hi0bits+0x3a>
 8005bae:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005bb2:	f100 0001 	add.w	r0, r0, #1
 8005bb6:	bf08      	it	eq
 8005bb8:	2020      	moveq	r0, #32
 8005bba:	4770      	bx	lr
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	e7e5      	b.n	8005b8c <__hi0bits+0xc>

08005bc0 <__lo0bits>:
 8005bc0:	6803      	ldr	r3, [r0, #0]
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	f013 0007 	ands.w	r0, r3, #7
 8005bc8:	d00b      	beq.n	8005be2 <__lo0bits+0x22>
 8005bca:	07d9      	lsls	r1, r3, #31
 8005bcc:	d421      	bmi.n	8005c12 <__lo0bits+0x52>
 8005bce:	0798      	lsls	r0, r3, #30
 8005bd0:	bf49      	itett	mi
 8005bd2:	085b      	lsrmi	r3, r3, #1
 8005bd4:	089b      	lsrpl	r3, r3, #2
 8005bd6:	2001      	movmi	r0, #1
 8005bd8:	6013      	strmi	r3, [r2, #0]
 8005bda:	bf5c      	itt	pl
 8005bdc:	6013      	strpl	r3, [r2, #0]
 8005bde:	2002      	movpl	r0, #2
 8005be0:	4770      	bx	lr
 8005be2:	b299      	uxth	r1, r3
 8005be4:	b909      	cbnz	r1, 8005bea <__lo0bits+0x2a>
 8005be6:	0c1b      	lsrs	r3, r3, #16
 8005be8:	2010      	movs	r0, #16
 8005bea:	b2d9      	uxtb	r1, r3
 8005bec:	b909      	cbnz	r1, 8005bf2 <__lo0bits+0x32>
 8005bee:	3008      	adds	r0, #8
 8005bf0:	0a1b      	lsrs	r3, r3, #8
 8005bf2:	0719      	lsls	r1, r3, #28
 8005bf4:	bf04      	itt	eq
 8005bf6:	091b      	lsreq	r3, r3, #4
 8005bf8:	3004      	addeq	r0, #4
 8005bfa:	0799      	lsls	r1, r3, #30
 8005bfc:	bf04      	itt	eq
 8005bfe:	089b      	lsreq	r3, r3, #2
 8005c00:	3002      	addeq	r0, #2
 8005c02:	07d9      	lsls	r1, r3, #31
 8005c04:	d403      	bmi.n	8005c0e <__lo0bits+0x4e>
 8005c06:	085b      	lsrs	r3, r3, #1
 8005c08:	f100 0001 	add.w	r0, r0, #1
 8005c0c:	d003      	beq.n	8005c16 <__lo0bits+0x56>
 8005c0e:	6013      	str	r3, [r2, #0]
 8005c10:	4770      	bx	lr
 8005c12:	2000      	movs	r0, #0
 8005c14:	4770      	bx	lr
 8005c16:	2020      	movs	r0, #32
 8005c18:	4770      	bx	lr
	...

08005c1c <__i2b>:
 8005c1c:	b510      	push	{r4, lr}
 8005c1e:	460c      	mov	r4, r1
 8005c20:	2101      	movs	r1, #1
 8005c22:	f7ff febb 	bl	800599c <_Balloc>
 8005c26:	4602      	mov	r2, r0
 8005c28:	b928      	cbnz	r0, 8005c36 <__i2b+0x1a>
 8005c2a:	4b05      	ldr	r3, [pc, #20]	; (8005c40 <__i2b+0x24>)
 8005c2c:	4805      	ldr	r0, [pc, #20]	; (8005c44 <__i2b+0x28>)
 8005c2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005c32:	f000 fded 	bl	8006810 <__assert_func>
 8005c36:	2301      	movs	r3, #1
 8005c38:	6144      	str	r4, [r0, #20]
 8005c3a:	6103      	str	r3, [r0, #16]
 8005c3c:	bd10      	pop	{r4, pc}
 8005c3e:	bf00      	nop
 8005c40:	08007670 	.word	0x08007670
 8005c44:	080076fc 	.word	0x080076fc

08005c48 <__multiply>:
 8005c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c4c:	4691      	mov	r9, r2
 8005c4e:	690a      	ldr	r2, [r1, #16]
 8005c50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	bfb8      	it	lt
 8005c58:	460b      	movlt	r3, r1
 8005c5a:	460c      	mov	r4, r1
 8005c5c:	bfbc      	itt	lt
 8005c5e:	464c      	movlt	r4, r9
 8005c60:	4699      	movlt	r9, r3
 8005c62:	6927      	ldr	r7, [r4, #16]
 8005c64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005c68:	68a3      	ldr	r3, [r4, #8]
 8005c6a:	6861      	ldr	r1, [r4, #4]
 8005c6c:	eb07 060a 	add.w	r6, r7, sl
 8005c70:	42b3      	cmp	r3, r6
 8005c72:	b085      	sub	sp, #20
 8005c74:	bfb8      	it	lt
 8005c76:	3101      	addlt	r1, #1
 8005c78:	f7ff fe90 	bl	800599c <_Balloc>
 8005c7c:	b930      	cbnz	r0, 8005c8c <__multiply+0x44>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	4b43      	ldr	r3, [pc, #268]	; (8005d90 <__multiply+0x148>)
 8005c82:	4844      	ldr	r0, [pc, #272]	; (8005d94 <__multiply+0x14c>)
 8005c84:	f240 115d 	movw	r1, #349	; 0x15d
 8005c88:	f000 fdc2 	bl	8006810 <__assert_func>
 8005c8c:	f100 0514 	add.w	r5, r0, #20
 8005c90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005c94:	462b      	mov	r3, r5
 8005c96:	2200      	movs	r2, #0
 8005c98:	4543      	cmp	r3, r8
 8005c9a:	d321      	bcc.n	8005ce0 <__multiply+0x98>
 8005c9c:	f104 0314 	add.w	r3, r4, #20
 8005ca0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005ca4:	f109 0314 	add.w	r3, r9, #20
 8005ca8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005cac:	9202      	str	r2, [sp, #8]
 8005cae:	1b3a      	subs	r2, r7, r4
 8005cb0:	3a15      	subs	r2, #21
 8005cb2:	f022 0203 	bic.w	r2, r2, #3
 8005cb6:	3204      	adds	r2, #4
 8005cb8:	f104 0115 	add.w	r1, r4, #21
 8005cbc:	428f      	cmp	r7, r1
 8005cbe:	bf38      	it	cc
 8005cc0:	2204      	movcc	r2, #4
 8005cc2:	9201      	str	r2, [sp, #4]
 8005cc4:	9a02      	ldr	r2, [sp, #8]
 8005cc6:	9303      	str	r3, [sp, #12]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d80c      	bhi.n	8005ce6 <__multiply+0x9e>
 8005ccc:	2e00      	cmp	r6, #0
 8005cce:	dd03      	ble.n	8005cd8 <__multiply+0x90>
 8005cd0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d059      	beq.n	8005d8c <__multiply+0x144>
 8005cd8:	6106      	str	r6, [r0, #16]
 8005cda:	b005      	add	sp, #20
 8005cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce0:	f843 2b04 	str.w	r2, [r3], #4
 8005ce4:	e7d8      	b.n	8005c98 <__multiply+0x50>
 8005ce6:	f8b3 a000 	ldrh.w	sl, [r3]
 8005cea:	f1ba 0f00 	cmp.w	sl, #0
 8005cee:	d023      	beq.n	8005d38 <__multiply+0xf0>
 8005cf0:	f104 0e14 	add.w	lr, r4, #20
 8005cf4:	46a9      	mov	r9, r5
 8005cf6:	f04f 0c00 	mov.w	ip, #0
 8005cfa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005cfe:	f8d9 1000 	ldr.w	r1, [r9]
 8005d02:	fa1f fb82 	uxth.w	fp, r2
 8005d06:	b289      	uxth	r1, r1
 8005d08:	fb0a 110b 	mla	r1, sl, fp, r1
 8005d0c:	4461      	add	r1, ip
 8005d0e:	f8d9 c000 	ldr.w	ip, [r9]
 8005d12:	0c12      	lsrs	r2, r2, #16
 8005d14:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005d18:	fb0a c202 	mla	r2, sl, r2, ip
 8005d1c:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005d20:	b289      	uxth	r1, r1
 8005d22:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d26:	4577      	cmp	r7, lr
 8005d28:	f849 1b04 	str.w	r1, [r9], #4
 8005d2c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d30:	d8e3      	bhi.n	8005cfa <__multiply+0xb2>
 8005d32:	9a01      	ldr	r2, [sp, #4]
 8005d34:	f845 c002 	str.w	ip, [r5, r2]
 8005d38:	9a03      	ldr	r2, [sp, #12]
 8005d3a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005d3e:	3304      	adds	r3, #4
 8005d40:	f1b9 0f00 	cmp.w	r9, #0
 8005d44:	d020      	beq.n	8005d88 <__multiply+0x140>
 8005d46:	6829      	ldr	r1, [r5, #0]
 8005d48:	f104 0c14 	add.w	ip, r4, #20
 8005d4c:	46ae      	mov	lr, r5
 8005d4e:	f04f 0a00 	mov.w	sl, #0
 8005d52:	f8bc b000 	ldrh.w	fp, [ip]
 8005d56:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005d5a:	fb09 220b 	mla	r2, r9, fp, r2
 8005d5e:	4492      	add	sl, r2
 8005d60:	b289      	uxth	r1, r1
 8005d62:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005d66:	f84e 1b04 	str.w	r1, [lr], #4
 8005d6a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005d6e:	f8be 1000 	ldrh.w	r1, [lr]
 8005d72:	0c12      	lsrs	r2, r2, #16
 8005d74:	fb09 1102 	mla	r1, r9, r2, r1
 8005d78:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005d7c:	4567      	cmp	r7, ip
 8005d7e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005d82:	d8e6      	bhi.n	8005d52 <__multiply+0x10a>
 8005d84:	9a01      	ldr	r2, [sp, #4]
 8005d86:	50a9      	str	r1, [r5, r2]
 8005d88:	3504      	adds	r5, #4
 8005d8a:	e79b      	b.n	8005cc4 <__multiply+0x7c>
 8005d8c:	3e01      	subs	r6, #1
 8005d8e:	e79d      	b.n	8005ccc <__multiply+0x84>
 8005d90:	08007670 	.word	0x08007670
 8005d94:	080076fc 	.word	0x080076fc

08005d98 <__pow5mult>:
 8005d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d9c:	4615      	mov	r5, r2
 8005d9e:	f012 0203 	ands.w	r2, r2, #3
 8005da2:	4606      	mov	r6, r0
 8005da4:	460f      	mov	r7, r1
 8005da6:	d007      	beq.n	8005db8 <__pow5mult+0x20>
 8005da8:	4c25      	ldr	r4, [pc, #148]	; (8005e40 <__pow5mult+0xa8>)
 8005daa:	3a01      	subs	r2, #1
 8005dac:	2300      	movs	r3, #0
 8005dae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005db2:	f7ff fe55 	bl	8005a60 <__multadd>
 8005db6:	4607      	mov	r7, r0
 8005db8:	10ad      	asrs	r5, r5, #2
 8005dba:	d03d      	beq.n	8005e38 <__pow5mult+0xa0>
 8005dbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005dbe:	b97c      	cbnz	r4, 8005de0 <__pow5mult+0x48>
 8005dc0:	2010      	movs	r0, #16
 8005dc2:	f7ff fdc3 	bl	800594c <malloc>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	6270      	str	r0, [r6, #36]	; 0x24
 8005dca:	b928      	cbnz	r0, 8005dd8 <__pow5mult+0x40>
 8005dcc:	4b1d      	ldr	r3, [pc, #116]	; (8005e44 <__pow5mult+0xac>)
 8005dce:	481e      	ldr	r0, [pc, #120]	; (8005e48 <__pow5mult+0xb0>)
 8005dd0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005dd4:	f000 fd1c 	bl	8006810 <__assert_func>
 8005dd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ddc:	6004      	str	r4, [r0, #0]
 8005dde:	60c4      	str	r4, [r0, #12]
 8005de0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005de4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005de8:	b94c      	cbnz	r4, 8005dfe <__pow5mult+0x66>
 8005dea:	f240 2171 	movw	r1, #625	; 0x271
 8005dee:	4630      	mov	r0, r6
 8005df0:	f7ff ff14 	bl	8005c1c <__i2b>
 8005df4:	2300      	movs	r3, #0
 8005df6:	f8c8 0008 	str.w	r0, [r8, #8]
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	6003      	str	r3, [r0, #0]
 8005dfe:	f04f 0900 	mov.w	r9, #0
 8005e02:	07eb      	lsls	r3, r5, #31
 8005e04:	d50a      	bpl.n	8005e1c <__pow5mult+0x84>
 8005e06:	4639      	mov	r1, r7
 8005e08:	4622      	mov	r2, r4
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	f7ff ff1c 	bl	8005c48 <__multiply>
 8005e10:	4639      	mov	r1, r7
 8005e12:	4680      	mov	r8, r0
 8005e14:	4630      	mov	r0, r6
 8005e16:	f7ff fe01 	bl	8005a1c <_Bfree>
 8005e1a:	4647      	mov	r7, r8
 8005e1c:	106d      	asrs	r5, r5, #1
 8005e1e:	d00b      	beq.n	8005e38 <__pow5mult+0xa0>
 8005e20:	6820      	ldr	r0, [r4, #0]
 8005e22:	b938      	cbnz	r0, 8005e34 <__pow5mult+0x9c>
 8005e24:	4622      	mov	r2, r4
 8005e26:	4621      	mov	r1, r4
 8005e28:	4630      	mov	r0, r6
 8005e2a:	f7ff ff0d 	bl	8005c48 <__multiply>
 8005e2e:	6020      	str	r0, [r4, #0]
 8005e30:	f8c0 9000 	str.w	r9, [r0]
 8005e34:	4604      	mov	r4, r0
 8005e36:	e7e4      	b.n	8005e02 <__pow5mult+0x6a>
 8005e38:	4638      	mov	r0, r7
 8005e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e3e:	bf00      	nop
 8005e40:	08007848 	.word	0x08007848
 8005e44:	080075fe 	.word	0x080075fe
 8005e48:	080076fc 	.word	0x080076fc

08005e4c <__lshift>:
 8005e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e50:	460c      	mov	r4, r1
 8005e52:	6849      	ldr	r1, [r1, #4]
 8005e54:	6923      	ldr	r3, [r4, #16]
 8005e56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e5a:	68a3      	ldr	r3, [r4, #8]
 8005e5c:	4607      	mov	r7, r0
 8005e5e:	4691      	mov	r9, r2
 8005e60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e64:	f108 0601 	add.w	r6, r8, #1
 8005e68:	42b3      	cmp	r3, r6
 8005e6a:	db0b      	blt.n	8005e84 <__lshift+0x38>
 8005e6c:	4638      	mov	r0, r7
 8005e6e:	f7ff fd95 	bl	800599c <_Balloc>
 8005e72:	4605      	mov	r5, r0
 8005e74:	b948      	cbnz	r0, 8005e8a <__lshift+0x3e>
 8005e76:	4602      	mov	r2, r0
 8005e78:	4b2a      	ldr	r3, [pc, #168]	; (8005f24 <__lshift+0xd8>)
 8005e7a:	482b      	ldr	r0, [pc, #172]	; (8005f28 <__lshift+0xdc>)
 8005e7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005e80:	f000 fcc6 	bl	8006810 <__assert_func>
 8005e84:	3101      	adds	r1, #1
 8005e86:	005b      	lsls	r3, r3, #1
 8005e88:	e7ee      	b.n	8005e68 <__lshift+0x1c>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f100 0114 	add.w	r1, r0, #20
 8005e90:	f100 0210 	add.w	r2, r0, #16
 8005e94:	4618      	mov	r0, r3
 8005e96:	4553      	cmp	r3, sl
 8005e98:	db37      	blt.n	8005f0a <__lshift+0xbe>
 8005e9a:	6920      	ldr	r0, [r4, #16]
 8005e9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ea0:	f104 0314 	add.w	r3, r4, #20
 8005ea4:	f019 091f 	ands.w	r9, r9, #31
 8005ea8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005eac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005eb0:	d02f      	beq.n	8005f12 <__lshift+0xc6>
 8005eb2:	f1c9 0e20 	rsb	lr, r9, #32
 8005eb6:	468a      	mov	sl, r1
 8005eb8:	f04f 0c00 	mov.w	ip, #0
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	fa02 f209 	lsl.w	r2, r2, r9
 8005ec2:	ea42 020c 	orr.w	r2, r2, ip
 8005ec6:	f84a 2b04 	str.w	r2, [sl], #4
 8005eca:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ece:	4298      	cmp	r0, r3
 8005ed0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005ed4:	d8f2      	bhi.n	8005ebc <__lshift+0x70>
 8005ed6:	1b03      	subs	r3, r0, r4
 8005ed8:	3b15      	subs	r3, #21
 8005eda:	f023 0303 	bic.w	r3, r3, #3
 8005ede:	3304      	adds	r3, #4
 8005ee0:	f104 0215 	add.w	r2, r4, #21
 8005ee4:	4290      	cmp	r0, r2
 8005ee6:	bf38      	it	cc
 8005ee8:	2304      	movcc	r3, #4
 8005eea:	f841 c003 	str.w	ip, [r1, r3]
 8005eee:	f1bc 0f00 	cmp.w	ip, #0
 8005ef2:	d001      	beq.n	8005ef8 <__lshift+0xac>
 8005ef4:	f108 0602 	add.w	r6, r8, #2
 8005ef8:	3e01      	subs	r6, #1
 8005efa:	4638      	mov	r0, r7
 8005efc:	612e      	str	r6, [r5, #16]
 8005efe:	4621      	mov	r1, r4
 8005f00:	f7ff fd8c 	bl	8005a1c <_Bfree>
 8005f04:	4628      	mov	r0, r5
 8005f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f0e:	3301      	adds	r3, #1
 8005f10:	e7c1      	b.n	8005e96 <__lshift+0x4a>
 8005f12:	3904      	subs	r1, #4
 8005f14:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f18:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f1c:	4298      	cmp	r0, r3
 8005f1e:	d8f9      	bhi.n	8005f14 <__lshift+0xc8>
 8005f20:	e7ea      	b.n	8005ef8 <__lshift+0xac>
 8005f22:	bf00      	nop
 8005f24:	08007670 	.word	0x08007670
 8005f28:	080076fc 	.word	0x080076fc

08005f2c <__mcmp>:
 8005f2c:	690a      	ldr	r2, [r1, #16]
 8005f2e:	4603      	mov	r3, r0
 8005f30:	6900      	ldr	r0, [r0, #16]
 8005f32:	1a80      	subs	r0, r0, r2
 8005f34:	b530      	push	{r4, r5, lr}
 8005f36:	d10d      	bne.n	8005f54 <__mcmp+0x28>
 8005f38:	3314      	adds	r3, #20
 8005f3a:	3114      	adds	r1, #20
 8005f3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005f40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005f44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f4c:	4295      	cmp	r5, r2
 8005f4e:	d002      	beq.n	8005f56 <__mcmp+0x2a>
 8005f50:	d304      	bcc.n	8005f5c <__mcmp+0x30>
 8005f52:	2001      	movs	r0, #1
 8005f54:	bd30      	pop	{r4, r5, pc}
 8005f56:	42a3      	cmp	r3, r4
 8005f58:	d3f4      	bcc.n	8005f44 <__mcmp+0x18>
 8005f5a:	e7fb      	b.n	8005f54 <__mcmp+0x28>
 8005f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f60:	e7f8      	b.n	8005f54 <__mcmp+0x28>
	...

08005f64 <__mdiff>:
 8005f64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f68:	460d      	mov	r5, r1
 8005f6a:	4607      	mov	r7, r0
 8005f6c:	4611      	mov	r1, r2
 8005f6e:	4628      	mov	r0, r5
 8005f70:	4614      	mov	r4, r2
 8005f72:	f7ff ffdb 	bl	8005f2c <__mcmp>
 8005f76:	1e06      	subs	r6, r0, #0
 8005f78:	d111      	bne.n	8005f9e <__mdiff+0x3a>
 8005f7a:	4631      	mov	r1, r6
 8005f7c:	4638      	mov	r0, r7
 8005f7e:	f7ff fd0d 	bl	800599c <_Balloc>
 8005f82:	4602      	mov	r2, r0
 8005f84:	b928      	cbnz	r0, 8005f92 <__mdiff+0x2e>
 8005f86:	4b39      	ldr	r3, [pc, #228]	; (800606c <__mdiff+0x108>)
 8005f88:	f240 2132 	movw	r1, #562	; 0x232
 8005f8c:	4838      	ldr	r0, [pc, #224]	; (8006070 <__mdiff+0x10c>)
 8005f8e:	f000 fc3f 	bl	8006810 <__assert_func>
 8005f92:	2301      	movs	r3, #1
 8005f94:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005f98:	4610      	mov	r0, r2
 8005f9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f9e:	bfa4      	itt	ge
 8005fa0:	4623      	movge	r3, r4
 8005fa2:	462c      	movge	r4, r5
 8005fa4:	4638      	mov	r0, r7
 8005fa6:	6861      	ldr	r1, [r4, #4]
 8005fa8:	bfa6      	itte	ge
 8005faa:	461d      	movge	r5, r3
 8005fac:	2600      	movge	r6, #0
 8005fae:	2601      	movlt	r6, #1
 8005fb0:	f7ff fcf4 	bl	800599c <_Balloc>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	b918      	cbnz	r0, 8005fc0 <__mdiff+0x5c>
 8005fb8:	4b2c      	ldr	r3, [pc, #176]	; (800606c <__mdiff+0x108>)
 8005fba:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005fbe:	e7e5      	b.n	8005f8c <__mdiff+0x28>
 8005fc0:	6927      	ldr	r7, [r4, #16]
 8005fc2:	60c6      	str	r6, [r0, #12]
 8005fc4:	692e      	ldr	r6, [r5, #16]
 8005fc6:	f104 0014 	add.w	r0, r4, #20
 8005fca:	f105 0914 	add.w	r9, r5, #20
 8005fce:	f102 0e14 	add.w	lr, r2, #20
 8005fd2:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8005fd6:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005fda:	3410      	adds	r4, #16
 8005fdc:	46f2      	mov	sl, lr
 8005fde:	2100      	movs	r1, #0
 8005fe0:	f859 3b04 	ldr.w	r3, [r9], #4
 8005fe4:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005fe8:	fa1f f883 	uxth.w	r8, r3
 8005fec:	fa11 f18b 	uxtah	r1, r1, fp
 8005ff0:	0c1b      	lsrs	r3, r3, #16
 8005ff2:	eba1 0808 	sub.w	r8, r1, r8
 8005ff6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005ffa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005ffe:	fa1f f888 	uxth.w	r8, r8
 8006002:	1419      	asrs	r1, r3, #16
 8006004:	454e      	cmp	r6, r9
 8006006:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800600a:	f84a 3b04 	str.w	r3, [sl], #4
 800600e:	d8e7      	bhi.n	8005fe0 <__mdiff+0x7c>
 8006010:	1b73      	subs	r3, r6, r5
 8006012:	3b15      	subs	r3, #21
 8006014:	f023 0303 	bic.w	r3, r3, #3
 8006018:	3304      	adds	r3, #4
 800601a:	3515      	adds	r5, #21
 800601c:	42ae      	cmp	r6, r5
 800601e:	bf38      	it	cc
 8006020:	2304      	movcc	r3, #4
 8006022:	4418      	add	r0, r3
 8006024:	4473      	add	r3, lr
 8006026:	469e      	mov	lr, r3
 8006028:	4606      	mov	r6, r0
 800602a:	4566      	cmp	r6, ip
 800602c:	d30e      	bcc.n	800604c <__mdiff+0xe8>
 800602e:	f10c 0103 	add.w	r1, ip, #3
 8006032:	1a09      	subs	r1, r1, r0
 8006034:	f021 0103 	bic.w	r1, r1, #3
 8006038:	3803      	subs	r0, #3
 800603a:	4584      	cmp	ip, r0
 800603c:	bf38      	it	cc
 800603e:	2100      	movcc	r1, #0
 8006040:	4419      	add	r1, r3
 8006042:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006046:	b17b      	cbz	r3, 8006068 <__mdiff+0x104>
 8006048:	6117      	str	r7, [r2, #16]
 800604a:	e7a5      	b.n	8005f98 <__mdiff+0x34>
 800604c:	f856 8b04 	ldr.w	r8, [r6], #4
 8006050:	fa11 f488 	uxtah	r4, r1, r8
 8006054:	1425      	asrs	r5, r4, #16
 8006056:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800605a:	b2a4      	uxth	r4, r4
 800605c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8006060:	f84e 4b04 	str.w	r4, [lr], #4
 8006064:	1429      	asrs	r1, r5, #16
 8006066:	e7e0      	b.n	800602a <__mdiff+0xc6>
 8006068:	3f01      	subs	r7, #1
 800606a:	e7ea      	b.n	8006042 <__mdiff+0xde>
 800606c:	08007670 	.word	0x08007670
 8006070:	080076fc 	.word	0x080076fc

08006074 <__ulp>:
 8006074:	4b11      	ldr	r3, [pc, #68]	; (80060bc <__ulp+0x48>)
 8006076:	400b      	ands	r3, r1
 8006078:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800607c:	2b00      	cmp	r3, #0
 800607e:	dd02      	ble.n	8006086 <__ulp+0x12>
 8006080:	2000      	movs	r0, #0
 8006082:	4619      	mov	r1, r3
 8006084:	4770      	bx	lr
 8006086:	425b      	negs	r3, r3
 8006088:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800608c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006090:	f04f 0000 	mov.w	r0, #0
 8006094:	f04f 0100 	mov.w	r1, #0
 8006098:	da04      	bge.n	80060a4 <__ulp+0x30>
 800609a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800609e:	fa43 f102 	asr.w	r1, r3, r2
 80060a2:	4770      	bx	lr
 80060a4:	f1a2 0314 	sub.w	r3, r2, #20
 80060a8:	2b1e      	cmp	r3, #30
 80060aa:	bfda      	itte	le
 80060ac:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80060b0:	fa22 f303 	lsrle.w	r3, r2, r3
 80060b4:	2301      	movgt	r3, #1
 80060b6:	4618      	mov	r0, r3
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	7ff00000 	.word	0x7ff00000

080060c0 <__b2d>:
 80060c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060c4:	6907      	ldr	r7, [r0, #16]
 80060c6:	f100 0914 	add.w	r9, r0, #20
 80060ca:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80060ce:	f1a7 0804 	sub.w	r8, r7, #4
 80060d2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80060d6:	4630      	mov	r0, r6
 80060d8:	f7ff fd52 	bl	8005b80 <__hi0bits>
 80060dc:	f1c0 0320 	rsb	r3, r0, #32
 80060e0:	280a      	cmp	r0, #10
 80060e2:	600b      	str	r3, [r1, #0]
 80060e4:	491f      	ldr	r1, [pc, #124]	; (8006164 <__b2d+0xa4>)
 80060e6:	dc17      	bgt.n	8006118 <__b2d+0x58>
 80060e8:	f1c0 0c0b 	rsb	ip, r0, #11
 80060ec:	45c1      	cmp	r9, r8
 80060ee:	fa26 f30c 	lsr.w	r3, r6, ip
 80060f2:	bf38      	it	cc
 80060f4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80060f8:	ea43 0501 	orr.w	r5, r3, r1
 80060fc:	bf28      	it	cs
 80060fe:	2200      	movcs	r2, #0
 8006100:	f100 0315 	add.w	r3, r0, #21
 8006104:	fa06 f303 	lsl.w	r3, r6, r3
 8006108:	fa22 f20c 	lsr.w	r2, r2, ip
 800610c:	ea43 0402 	orr.w	r4, r3, r2
 8006110:	4620      	mov	r0, r4
 8006112:	4629      	mov	r1, r5
 8006114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006118:	45c1      	cmp	r9, r8
 800611a:	bf3a      	itte	cc
 800611c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006120:	f1a7 0808 	subcc.w	r8, r7, #8
 8006124:	2200      	movcs	r2, #0
 8006126:	f1b0 030b 	subs.w	r3, r0, #11
 800612a:	d016      	beq.n	800615a <__b2d+0x9a>
 800612c:	f1c3 0720 	rsb	r7, r3, #32
 8006130:	fa22 f107 	lsr.w	r1, r2, r7
 8006134:	45c8      	cmp	r8, r9
 8006136:	fa06 f603 	lsl.w	r6, r6, r3
 800613a:	ea46 0601 	orr.w	r6, r6, r1
 800613e:	bf8c      	ite	hi
 8006140:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006144:	2100      	movls	r1, #0
 8006146:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800614a:	fa02 f003 	lsl.w	r0, r2, r3
 800614e:	40f9      	lsrs	r1, r7
 8006150:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006154:	ea40 0401 	orr.w	r4, r0, r1
 8006158:	e7da      	b.n	8006110 <__b2d+0x50>
 800615a:	ea46 0501 	orr.w	r5, r6, r1
 800615e:	4614      	mov	r4, r2
 8006160:	e7d6      	b.n	8006110 <__b2d+0x50>
 8006162:	bf00      	nop
 8006164:	3ff00000 	.word	0x3ff00000

08006168 <__d2b>:
 8006168:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800616c:	2101      	movs	r1, #1
 800616e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006172:	4690      	mov	r8, r2
 8006174:	461d      	mov	r5, r3
 8006176:	f7ff fc11 	bl	800599c <_Balloc>
 800617a:	4604      	mov	r4, r0
 800617c:	b930      	cbnz	r0, 800618c <__d2b+0x24>
 800617e:	4602      	mov	r2, r0
 8006180:	4b25      	ldr	r3, [pc, #148]	; (8006218 <__d2b+0xb0>)
 8006182:	4826      	ldr	r0, [pc, #152]	; (800621c <__d2b+0xb4>)
 8006184:	f240 310a 	movw	r1, #778	; 0x30a
 8006188:	f000 fb42 	bl	8006810 <__assert_func>
 800618c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006190:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006194:	bb2d      	cbnz	r5, 80061e2 <__d2b+0x7a>
 8006196:	9301      	str	r3, [sp, #4]
 8006198:	f1b8 0300 	subs.w	r3, r8, #0
 800619c:	d026      	beq.n	80061ec <__d2b+0x84>
 800619e:	4668      	mov	r0, sp
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	f7ff fd0d 	bl	8005bc0 <__lo0bits>
 80061a6:	9900      	ldr	r1, [sp, #0]
 80061a8:	b1f0      	cbz	r0, 80061e8 <__d2b+0x80>
 80061aa:	9a01      	ldr	r2, [sp, #4]
 80061ac:	f1c0 0320 	rsb	r3, r0, #32
 80061b0:	fa02 f303 	lsl.w	r3, r2, r3
 80061b4:	430b      	orrs	r3, r1
 80061b6:	40c2      	lsrs	r2, r0
 80061b8:	6163      	str	r3, [r4, #20]
 80061ba:	9201      	str	r2, [sp, #4]
 80061bc:	9b01      	ldr	r3, [sp, #4]
 80061be:	61a3      	str	r3, [r4, #24]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	bf14      	ite	ne
 80061c4:	2102      	movne	r1, #2
 80061c6:	2101      	moveq	r1, #1
 80061c8:	6121      	str	r1, [r4, #16]
 80061ca:	b1c5      	cbz	r5, 80061fe <__d2b+0x96>
 80061cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80061d0:	4405      	add	r5, r0
 80061d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80061d6:	603d      	str	r5, [r7, #0]
 80061d8:	6030      	str	r0, [r6, #0]
 80061da:	4620      	mov	r0, r4
 80061dc:	b002      	add	sp, #8
 80061de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061e6:	e7d6      	b.n	8006196 <__d2b+0x2e>
 80061e8:	6161      	str	r1, [r4, #20]
 80061ea:	e7e7      	b.n	80061bc <__d2b+0x54>
 80061ec:	a801      	add	r0, sp, #4
 80061ee:	f7ff fce7 	bl	8005bc0 <__lo0bits>
 80061f2:	9b01      	ldr	r3, [sp, #4]
 80061f4:	6163      	str	r3, [r4, #20]
 80061f6:	2101      	movs	r1, #1
 80061f8:	6121      	str	r1, [r4, #16]
 80061fa:	3020      	adds	r0, #32
 80061fc:	e7e5      	b.n	80061ca <__d2b+0x62>
 80061fe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006202:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006206:	6038      	str	r0, [r7, #0]
 8006208:	6918      	ldr	r0, [r3, #16]
 800620a:	f7ff fcb9 	bl	8005b80 <__hi0bits>
 800620e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006212:	6031      	str	r1, [r6, #0]
 8006214:	e7e1      	b.n	80061da <__d2b+0x72>
 8006216:	bf00      	nop
 8006218:	08007670 	.word	0x08007670
 800621c:	080076fc 	.word	0x080076fc

08006220 <__ratio>:
 8006220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006224:	4688      	mov	r8, r1
 8006226:	4669      	mov	r1, sp
 8006228:	4681      	mov	r9, r0
 800622a:	f7ff ff49 	bl	80060c0 <__b2d>
 800622e:	460f      	mov	r7, r1
 8006230:	4604      	mov	r4, r0
 8006232:	460d      	mov	r5, r1
 8006234:	4640      	mov	r0, r8
 8006236:	a901      	add	r1, sp, #4
 8006238:	f7ff ff42 	bl	80060c0 <__b2d>
 800623c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006240:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006244:	eba3 0c02 	sub.w	ip, r3, r2
 8006248:	e9dd 3200 	ldrd	r3, r2, [sp]
 800624c:	1a9b      	subs	r3, r3, r2
 800624e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006252:	2b00      	cmp	r3, #0
 8006254:	bfd5      	itete	le
 8006256:	460a      	movle	r2, r1
 8006258:	462a      	movgt	r2, r5
 800625a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800625e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006262:	468b      	mov	fp, r1
 8006264:	bfd8      	it	le
 8006266:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800626a:	465b      	mov	r3, fp
 800626c:	4602      	mov	r2, r0
 800626e:	4639      	mov	r1, r7
 8006270:	4620      	mov	r0, r4
 8006272:	f7fa faf3 	bl	800085c <__aeabi_ddiv>
 8006276:	b003      	add	sp, #12
 8006278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800627c <__copybits>:
 800627c:	3901      	subs	r1, #1
 800627e:	b570      	push	{r4, r5, r6, lr}
 8006280:	1149      	asrs	r1, r1, #5
 8006282:	6914      	ldr	r4, [r2, #16]
 8006284:	3101      	adds	r1, #1
 8006286:	f102 0314 	add.w	r3, r2, #20
 800628a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800628e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006292:	1f05      	subs	r5, r0, #4
 8006294:	42a3      	cmp	r3, r4
 8006296:	d30c      	bcc.n	80062b2 <__copybits+0x36>
 8006298:	1aa3      	subs	r3, r4, r2
 800629a:	3b11      	subs	r3, #17
 800629c:	f023 0303 	bic.w	r3, r3, #3
 80062a0:	3211      	adds	r2, #17
 80062a2:	42a2      	cmp	r2, r4
 80062a4:	bf88      	it	hi
 80062a6:	2300      	movhi	r3, #0
 80062a8:	4418      	add	r0, r3
 80062aa:	2300      	movs	r3, #0
 80062ac:	4288      	cmp	r0, r1
 80062ae:	d305      	bcc.n	80062bc <__copybits+0x40>
 80062b0:	bd70      	pop	{r4, r5, r6, pc}
 80062b2:	f853 6b04 	ldr.w	r6, [r3], #4
 80062b6:	f845 6f04 	str.w	r6, [r5, #4]!
 80062ba:	e7eb      	b.n	8006294 <__copybits+0x18>
 80062bc:	f840 3b04 	str.w	r3, [r0], #4
 80062c0:	e7f4      	b.n	80062ac <__copybits+0x30>

080062c2 <__any_on>:
 80062c2:	f100 0214 	add.w	r2, r0, #20
 80062c6:	6900      	ldr	r0, [r0, #16]
 80062c8:	114b      	asrs	r3, r1, #5
 80062ca:	4298      	cmp	r0, r3
 80062cc:	b510      	push	{r4, lr}
 80062ce:	db11      	blt.n	80062f4 <__any_on+0x32>
 80062d0:	dd0a      	ble.n	80062e8 <__any_on+0x26>
 80062d2:	f011 011f 	ands.w	r1, r1, #31
 80062d6:	d007      	beq.n	80062e8 <__any_on+0x26>
 80062d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80062dc:	fa24 f001 	lsr.w	r0, r4, r1
 80062e0:	fa00 f101 	lsl.w	r1, r0, r1
 80062e4:	428c      	cmp	r4, r1
 80062e6:	d10b      	bne.n	8006300 <__any_on+0x3e>
 80062e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d803      	bhi.n	80062f8 <__any_on+0x36>
 80062f0:	2000      	movs	r0, #0
 80062f2:	bd10      	pop	{r4, pc}
 80062f4:	4603      	mov	r3, r0
 80062f6:	e7f7      	b.n	80062e8 <__any_on+0x26>
 80062f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80062fc:	2900      	cmp	r1, #0
 80062fe:	d0f5      	beq.n	80062ec <__any_on+0x2a>
 8006300:	2001      	movs	r0, #1
 8006302:	e7f6      	b.n	80062f2 <__any_on+0x30>

08006304 <_calloc_r>:
 8006304:	b570      	push	{r4, r5, r6, lr}
 8006306:	fba1 5402 	umull	r5, r4, r1, r2
 800630a:	b934      	cbnz	r4, 800631a <_calloc_r+0x16>
 800630c:	4629      	mov	r1, r5
 800630e:	f000 f877 	bl	8006400 <_malloc_r>
 8006312:	4606      	mov	r6, r0
 8006314:	b928      	cbnz	r0, 8006322 <_calloc_r+0x1e>
 8006316:	4630      	mov	r0, r6
 8006318:	bd70      	pop	{r4, r5, r6, pc}
 800631a:	220c      	movs	r2, #12
 800631c:	6002      	str	r2, [r0, #0]
 800631e:	2600      	movs	r6, #0
 8006320:	e7f9      	b.n	8006316 <_calloc_r+0x12>
 8006322:	462a      	mov	r2, r5
 8006324:	4621      	mov	r1, r4
 8006326:	f7fc fc09 	bl	8002b3c <memset>
 800632a:	e7f4      	b.n	8006316 <_calloc_r+0x12>

0800632c <_free_r>:
 800632c:	b538      	push	{r3, r4, r5, lr}
 800632e:	4605      	mov	r5, r0
 8006330:	2900      	cmp	r1, #0
 8006332:	d041      	beq.n	80063b8 <_free_r+0x8c>
 8006334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006338:	1f0c      	subs	r4, r1, #4
 800633a:	2b00      	cmp	r3, #0
 800633c:	bfb8      	it	lt
 800633e:	18e4      	addlt	r4, r4, r3
 8006340:	f000 fab0 	bl	80068a4 <__malloc_lock>
 8006344:	4a1d      	ldr	r2, [pc, #116]	; (80063bc <_free_r+0x90>)
 8006346:	6813      	ldr	r3, [r2, #0]
 8006348:	b933      	cbnz	r3, 8006358 <_free_r+0x2c>
 800634a:	6063      	str	r3, [r4, #4]
 800634c:	6014      	str	r4, [r2, #0]
 800634e:	4628      	mov	r0, r5
 8006350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006354:	f000 baac 	b.w	80068b0 <__malloc_unlock>
 8006358:	42a3      	cmp	r3, r4
 800635a:	d908      	bls.n	800636e <_free_r+0x42>
 800635c:	6820      	ldr	r0, [r4, #0]
 800635e:	1821      	adds	r1, r4, r0
 8006360:	428b      	cmp	r3, r1
 8006362:	bf01      	itttt	eq
 8006364:	6819      	ldreq	r1, [r3, #0]
 8006366:	685b      	ldreq	r3, [r3, #4]
 8006368:	1809      	addeq	r1, r1, r0
 800636a:	6021      	streq	r1, [r4, #0]
 800636c:	e7ed      	b.n	800634a <_free_r+0x1e>
 800636e:	461a      	mov	r2, r3
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	b10b      	cbz	r3, 8006378 <_free_r+0x4c>
 8006374:	42a3      	cmp	r3, r4
 8006376:	d9fa      	bls.n	800636e <_free_r+0x42>
 8006378:	6811      	ldr	r1, [r2, #0]
 800637a:	1850      	adds	r0, r2, r1
 800637c:	42a0      	cmp	r0, r4
 800637e:	d10b      	bne.n	8006398 <_free_r+0x6c>
 8006380:	6820      	ldr	r0, [r4, #0]
 8006382:	4401      	add	r1, r0
 8006384:	1850      	adds	r0, r2, r1
 8006386:	4283      	cmp	r3, r0
 8006388:	6011      	str	r1, [r2, #0]
 800638a:	d1e0      	bne.n	800634e <_free_r+0x22>
 800638c:	6818      	ldr	r0, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	6053      	str	r3, [r2, #4]
 8006392:	4401      	add	r1, r0
 8006394:	6011      	str	r1, [r2, #0]
 8006396:	e7da      	b.n	800634e <_free_r+0x22>
 8006398:	d902      	bls.n	80063a0 <_free_r+0x74>
 800639a:	230c      	movs	r3, #12
 800639c:	602b      	str	r3, [r5, #0]
 800639e:	e7d6      	b.n	800634e <_free_r+0x22>
 80063a0:	6820      	ldr	r0, [r4, #0]
 80063a2:	1821      	adds	r1, r4, r0
 80063a4:	428b      	cmp	r3, r1
 80063a6:	bf04      	itt	eq
 80063a8:	6819      	ldreq	r1, [r3, #0]
 80063aa:	685b      	ldreq	r3, [r3, #4]
 80063ac:	6063      	str	r3, [r4, #4]
 80063ae:	bf04      	itt	eq
 80063b0:	1809      	addeq	r1, r1, r0
 80063b2:	6021      	streq	r1, [r4, #0]
 80063b4:	6054      	str	r4, [r2, #4]
 80063b6:	e7ca      	b.n	800634e <_free_r+0x22>
 80063b8:	bd38      	pop	{r3, r4, r5, pc}
 80063ba:	bf00      	nop
 80063bc:	20000478 	.word	0x20000478

080063c0 <sbrk_aligned>:
 80063c0:	b570      	push	{r4, r5, r6, lr}
 80063c2:	4e0e      	ldr	r6, [pc, #56]	; (80063fc <sbrk_aligned+0x3c>)
 80063c4:	460c      	mov	r4, r1
 80063c6:	6831      	ldr	r1, [r6, #0]
 80063c8:	4605      	mov	r5, r0
 80063ca:	b911      	cbnz	r1, 80063d2 <sbrk_aligned+0x12>
 80063cc:	f000 f9ee 	bl	80067ac <_sbrk_r>
 80063d0:	6030      	str	r0, [r6, #0]
 80063d2:	4621      	mov	r1, r4
 80063d4:	4628      	mov	r0, r5
 80063d6:	f000 f9e9 	bl	80067ac <_sbrk_r>
 80063da:	1c43      	adds	r3, r0, #1
 80063dc:	d00a      	beq.n	80063f4 <sbrk_aligned+0x34>
 80063de:	1cc4      	adds	r4, r0, #3
 80063e0:	f024 0403 	bic.w	r4, r4, #3
 80063e4:	42a0      	cmp	r0, r4
 80063e6:	d007      	beq.n	80063f8 <sbrk_aligned+0x38>
 80063e8:	1a21      	subs	r1, r4, r0
 80063ea:	4628      	mov	r0, r5
 80063ec:	f000 f9de 	bl	80067ac <_sbrk_r>
 80063f0:	3001      	adds	r0, #1
 80063f2:	d101      	bne.n	80063f8 <sbrk_aligned+0x38>
 80063f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80063f8:	4620      	mov	r0, r4
 80063fa:	bd70      	pop	{r4, r5, r6, pc}
 80063fc:	2000047c 	.word	0x2000047c

08006400 <_malloc_r>:
 8006400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006404:	1ccd      	adds	r5, r1, #3
 8006406:	f025 0503 	bic.w	r5, r5, #3
 800640a:	3508      	adds	r5, #8
 800640c:	2d0c      	cmp	r5, #12
 800640e:	bf38      	it	cc
 8006410:	250c      	movcc	r5, #12
 8006412:	2d00      	cmp	r5, #0
 8006414:	4607      	mov	r7, r0
 8006416:	db01      	blt.n	800641c <_malloc_r+0x1c>
 8006418:	42a9      	cmp	r1, r5
 800641a:	d905      	bls.n	8006428 <_malloc_r+0x28>
 800641c:	230c      	movs	r3, #12
 800641e:	603b      	str	r3, [r7, #0]
 8006420:	2600      	movs	r6, #0
 8006422:	4630      	mov	r0, r6
 8006424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006428:	4e2e      	ldr	r6, [pc, #184]	; (80064e4 <_malloc_r+0xe4>)
 800642a:	f000 fa3b 	bl	80068a4 <__malloc_lock>
 800642e:	6833      	ldr	r3, [r6, #0]
 8006430:	461c      	mov	r4, r3
 8006432:	bb34      	cbnz	r4, 8006482 <_malloc_r+0x82>
 8006434:	4629      	mov	r1, r5
 8006436:	4638      	mov	r0, r7
 8006438:	f7ff ffc2 	bl	80063c0 <sbrk_aligned>
 800643c:	1c43      	adds	r3, r0, #1
 800643e:	4604      	mov	r4, r0
 8006440:	d14d      	bne.n	80064de <_malloc_r+0xde>
 8006442:	6834      	ldr	r4, [r6, #0]
 8006444:	4626      	mov	r6, r4
 8006446:	2e00      	cmp	r6, #0
 8006448:	d140      	bne.n	80064cc <_malloc_r+0xcc>
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	4631      	mov	r1, r6
 800644e:	4638      	mov	r0, r7
 8006450:	eb04 0803 	add.w	r8, r4, r3
 8006454:	f000 f9aa 	bl	80067ac <_sbrk_r>
 8006458:	4580      	cmp	r8, r0
 800645a:	d13a      	bne.n	80064d2 <_malloc_r+0xd2>
 800645c:	6821      	ldr	r1, [r4, #0]
 800645e:	3503      	adds	r5, #3
 8006460:	1a6d      	subs	r5, r5, r1
 8006462:	f025 0503 	bic.w	r5, r5, #3
 8006466:	3508      	adds	r5, #8
 8006468:	2d0c      	cmp	r5, #12
 800646a:	bf38      	it	cc
 800646c:	250c      	movcc	r5, #12
 800646e:	4629      	mov	r1, r5
 8006470:	4638      	mov	r0, r7
 8006472:	f7ff ffa5 	bl	80063c0 <sbrk_aligned>
 8006476:	3001      	adds	r0, #1
 8006478:	d02b      	beq.n	80064d2 <_malloc_r+0xd2>
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	442b      	add	r3, r5
 800647e:	6023      	str	r3, [r4, #0]
 8006480:	e00e      	b.n	80064a0 <_malloc_r+0xa0>
 8006482:	6822      	ldr	r2, [r4, #0]
 8006484:	1b52      	subs	r2, r2, r5
 8006486:	d41e      	bmi.n	80064c6 <_malloc_r+0xc6>
 8006488:	2a0b      	cmp	r2, #11
 800648a:	d916      	bls.n	80064ba <_malloc_r+0xba>
 800648c:	1961      	adds	r1, r4, r5
 800648e:	42a3      	cmp	r3, r4
 8006490:	6025      	str	r5, [r4, #0]
 8006492:	bf18      	it	ne
 8006494:	6059      	strne	r1, [r3, #4]
 8006496:	6863      	ldr	r3, [r4, #4]
 8006498:	bf08      	it	eq
 800649a:	6031      	streq	r1, [r6, #0]
 800649c:	5162      	str	r2, [r4, r5]
 800649e:	604b      	str	r3, [r1, #4]
 80064a0:	4638      	mov	r0, r7
 80064a2:	f104 060b 	add.w	r6, r4, #11
 80064a6:	f000 fa03 	bl	80068b0 <__malloc_unlock>
 80064aa:	f026 0607 	bic.w	r6, r6, #7
 80064ae:	1d23      	adds	r3, r4, #4
 80064b0:	1af2      	subs	r2, r6, r3
 80064b2:	d0b6      	beq.n	8006422 <_malloc_r+0x22>
 80064b4:	1b9b      	subs	r3, r3, r6
 80064b6:	50a3      	str	r3, [r4, r2]
 80064b8:	e7b3      	b.n	8006422 <_malloc_r+0x22>
 80064ba:	6862      	ldr	r2, [r4, #4]
 80064bc:	42a3      	cmp	r3, r4
 80064be:	bf0c      	ite	eq
 80064c0:	6032      	streq	r2, [r6, #0]
 80064c2:	605a      	strne	r2, [r3, #4]
 80064c4:	e7ec      	b.n	80064a0 <_malloc_r+0xa0>
 80064c6:	4623      	mov	r3, r4
 80064c8:	6864      	ldr	r4, [r4, #4]
 80064ca:	e7b2      	b.n	8006432 <_malloc_r+0x32>
 80064cc:	4634      	mov	r4, r6
 80064ce:	6876      	ldr	r6, [r6, #4]
 80064d0:	e7b9      	b.n	8006446 <_malloc_r+0x46>
 80064d2:	230c      	movs	r3, #12
 80064d4:	603b      	str	r3, [r7, #0]
 80064d6:	4638      	mov	r0, r7
 80064d8:	f000 f9ea 	bl	80068b0 <__malloc_unlock>
 80064dc:	e7a1      	b.n	8006422 <_malloc_r+0x22>
 80064de:	6025      	str	r5, [r4, #0]
 80064e0:	e7de      	b.n	80064a0 <_malloc_r+0xa0>
 80064e2:	bf00      	nop
 80064e4:	20000478 	.word	0x20000478

080064e8 <__ssputs_r>:
 80064e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064ec:	688e      	ldr	r6, [r1, #8]
 80064ee:	429e      	cmp	r6, r3
 80064f0:	4682      	mov	sl, r0
 80064f2:	460c      	mov	r4, r1
 80064f4:	4690      	mov	r8, r2
 80064f6:	461f      	mov	r7, r3
 80064f8:	d838      	bhi.n	800656c <__ssputs_r+0x84>
 80064fa:	898a      	ldrh	r2, [r1, #12]
 80064fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006500:	d032      	beq.n	8006568 <__ssputs_r+0x80>
 8006502:	6825      	ldr	r5, [r4, #0]
 8006504:	6909      	ldr	r1, [r1, #16]
 8006506:	eba5 0901 	sub.w	r9, r5, r1
 800650a:	6965      	ldr	r5, [r4, #20]
 800650c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006510:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006514:	3301      	adds	r3, #1
 8006516:	444b      	add	r3, r9
 8006518:	106d      	asrs	r5, r5, #1
 800651a:	429d      	cmp	r5, r3
 800651c:	bf38      	it	cc
 800651e:	461d      	movcc	r5, r3
 8006520:	0553      	lsls	r3, r2, #21
 8006522:	d531      	bpl.n	8006588 <__ssputs_r+0xa0>
 8006524:	4629      	mov	r1, r5
 8006526:	f7ff ff6b 	bl	8006400 <_malloc_r>
 800652a:	4606      	mov	r6, r0
 800652c:	b950      	cbnz	r0, 8006544 <__ssputs_r+0x5c>
 800652e:	230c      	movs	r3, #12
 8006530:	f8ca 3000 	str.w	r3, [sl]
 8006534:	89a3      	ldrh	r3, [r4, #12]
 8006536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800653a:	81a3      	strh	r3, [r4, #12]
 800653c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006544:	6921      	ldr	r1, [r4, #16]
 8006546:	464a      	mov	r2, r9
 8006548:	f7ff fa1a 	bl	8005980 <memcpy>
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006556:	81a3      	strh	r3, [r4, #12]
 8006558:	6126      	str	r6, [r4, #16]
 800655a:	6165      	str	r5, [r4, #20]
 800655c:	444e      	add	r6, r9
 800655e:	eba5 0509 	sub.w	r5, r5, r9
 8006562:	6026      	str	r6, [r4, #0]
 8006564:	60a5      	str	r5, [r4, #8]
 8006566:	463e      	mov	r6, r7
 8006568:	42be      	cmp	r6, r7
 800656a:	d900      	bls.n	800656e <__ssputs_r+0x86>
 800656c:	463e      	mov	r6, r7
 800656e:	6820      	ldr	r0, [r4, #0]
 8006570:	4632      	mov	r2, r6
 8006572:	4641      	mov	r1, r8
 8006574:	f000 f97c 	bl	8006870 <memmove>
 8006578:	68a3      	ldr	r3, [r4, #8]
 800657a:	1b9b      	subs	r3, r3, r6
 800657c:	60a3      	str	r3, [r4, #8]
 800657e:	6823      	ldr	r3, [r4, #0]
 8006580:	4433      	add	r3, r6
 8006582:	6023      	str	r3, [r4, #0]
 8006584:	2000      	movs	r0, #0
 8006586:	e7db      	b.n	8006540 <__ssputs_r+0x58>
 8006588:	462a      	mov	r2, r5
 800658a:	f000 f997 	bl	80068bc <_realloc_r>
 800658e:	4606      	mov	r6, r0
 8006590:	2800      	cmp	r0, #0
 8006592:	d1e1      	bne.n	8006558 <__ssputs_r+0x70>
 8006594:	6921      	ldr	r1, [r4, #16]
 8006596:	4650      	mov	r0, sl
 8006598:	f7ff fec8 	bl	800632c <_free_r>
 800659c:	e7c7      	b.n	800652e <__ssputs_r+0x46>
	...

080065a0 <_svfiprintf_r>:
 80065a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a4:	4698      	mov	r8, r3
 80065a6:	898b      	ldrh	r3, [r1, #12]
 80065a8:	061b      	lsls	r3, r3, #24
 80065aa:	b09d      	sub	sp, #116	; 0x74
 80065ac:	4607      	mov	r7, r0
 80065ae:	460d      	mov	r5, r1
 80065b0:	4614      	mov	r4, r2
 80065b2:	d50e      	bpl.n	80065d2 <_svfiprintf_r+0x32>
 80065b4:	690b      	ldr	r3, [r1, #16]
 80065b6:	b963      	cbnz	r3, 80065d2 <_svfiprintf_r+0x32>
 80065b8:	2140      	movs	r1, #64	; 0x40
 80065ba:	f7ff ff21 	bl	8006400 <_malloc_r>
 80065be:	6028      	str	r0, [r5, #0]
 80065c0:	6128      	str	r0, [r5, #16]
 80065c2:	b920      	cbnz	r0, 80065ce <_svfiprintf_r+0x2e>
 80065c4:	230c      	movs	r3, #12
 80065c6:	603b      	str	r3, [r7, #0]
 80065c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065cc:	e0d1      	b.n	8006772 <_svfiprintf_r+0x1d2>
 80065ce:	2340      	movs	r3, #64	; 0x40
 80065d0:	616b      	str	r3, [r5, #20]
 80065d2:	2300      	movs	r3, #0
 80065d4:	9309      	str	r3, [sp, #36]	; 0x24
 80065d6:	2320      	movs	r3, #32
 80065d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80065e0:	2330      	movs	r3, #48	; 0x30
 80065e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800678c <_svfiprintf_r+0x1ec>
 80065e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065ea:	f04f 0901 	mov.w	r9, #1
 80065ee:	4623      	mov	r3, r4
 80065f0:	469a      	mov	sl, r3
 80065f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065f6:	b10a      	cbz	r2, 80065fc <_svfiprintf_r+0x5c>
 80065f8:	2a25      	cmp	r2, #37	; 0x25
 80065fa:	d1f9      	bne.n	80065f0 <_svfiprintf_r+0x50>
 80065fc:	ebba 0b04 	subs.w	fp, sl, r4
 8006600:	d00b      	beq.n	800661a <_svfiprintf_r+0x7a>
 8006602:	465b      	mov	r3, fp
 8006604:	4622      	mov	r2, r4
 8006606:	4629      	mov	r1, r5
 8006608:	4638      	mov	r0, r7
 800660a:	f7ff ff6d 	bl	80064e8 <__ssputs_r>
 800660e:	3001      	adds	r0, #1
 8006610:	f000 80aa 	beq.w	8006768 <_svfiprintf_r+0x1c8>
 8006614:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006616:	445a      	add	r2, fp
 8006618:	9209      	str	r2, [sp, #36]	; 0x24
 800661a:	f89a 3000 	ldrb.w	r3, [sl]
 800661e:	2b00      	cmp	r3, #0
 8006620:	f000 80a2 	beq.w	8006768 <_svfiprintf_r+0x1c8>
 8006624:	2300      	movs	r3, #0
 8006626:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800662a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800662e:	f10a 0a01 	add.w	sl, sl, #1
 8006632:	9304      	str	r3, [sp, #16]
 8006634:	9307      	str	r3, [sp, #28]
 8006636:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800663a:	931a      	str	r3, [sp, #104]	; 0x68
 800663c:	4654      	mov	r4, sl
 800663e:	2205      	movs	r2, #5
 8006640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006644:	4851      	ldr	r0, [pc, #324]	; (800678c <_svfiprintf_r+0x1ec>)
 8006646:	f7f9 fdd3 	bl	80001f0 <memchr>
 800664a:	9a04      	ldr	r2, [sp, #16]
 800664c:	b9d8      	cbnz	r0, 8006686 <_svfiprintf_r+0xe6>
 800664e:	06d0      	lsls	r0, r2, #27
 8006650:	bf44      	itt	mi
 8006652:	2320      	movmi	r3, #32
 8006654:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006658:	0711      	lsls	r1, r2, #28
 800665a:	bf44      	itt	mi
 800665c:	232b      	movmi	r3, #43	; 0x2b
 800665e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006662:	f89a 3000 	ldrb.w	r3, [sl]
 8006666:	2b2a      	cmp	r3, #42	; 0x2a
 8006668:	d015      	beq.n	8006696 <_svfiprintf_r+0xf6>
 800666a:	9a07      	ldr	r2, [sp, #28]
 800666c:	4654      	mov	r4, sl
 800666e:	2000      	movs	r0, #0
 8006670:	f04f 0c0a 	mov.w	ip, #10
 8006674:	4621      	mov	r1, r4
 8006676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800667a:	3b30      	subs	r3, #48	; 0x30
 800667c:	2b09      	cmp	r3, #9
 800667e:	d94e      	bls.n	800671e <_svfiprintf_r+0x17e>
 8006680:	b1b0      	cbz	r0, 80066b0 <_svfiprintf_r+0x110>
 8006682:	9207      	str	r2, [sp, #28]
 8006684:	e014      	b.n	80066b0 <_svfiprintf_r+0x110>
 8006686:	eba0 0308 	sub.w	r3, r0, r8
 800668a:	fa09 f303 	lsl.w	r3, r9, r3
 800668e:	4313      	orrs	r3, r2
 8006690:	9304      	str	r3, [sp, #16]
 8006692:	46a2      	mov	sl, r4
 8006694:	e7d2      	b.n	800663c <_svfiprintf_r+0x9c>
 8006696:	9b03      	ldr	r3, [sp, #12]
 8006698:	1d19      	adds	r1, r3, #4
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	9103      	str	r1, [sp, #12]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	bfbb      	ittet	lt
 80066a2:	425b      	neglt	r3, r3
 80066a4:	f042 0202 	orrlt.w	r2, r2, #2
 80066a8:	9307      	strge	r3, [sp, #28]
 80066aa:	9307      	strlt	r3, [sp, #28]
 80066ac:	bfb8      	it	lt
 80066ae:	9204      	strlt	r2, [sp, #16]
 80066b0:	7823      	ldrb	r3, [r4, #0]
 80066b2:	2b2e      	cmp	r3, #46	; 0x2e
 80066b4:	d10c      	bne.n	80066d0 <_svfiprintf_r+0x130>
 80066b6:	7863      	ldrb	r3, [r4, #1]
 80066b8:	2b2a      	cmp	r3, #42	; 0x2a
 80066ba:	d135      	bne.n	8006728 <_svfiprintf_r+0x188>
 80066bc:	9b03      	ldr	r3, [sp, #12]
 80066be:	1d1a      	adds	r2, r3, #4
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	9203      	str	r2, [sp, #12]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	bfb8      	it	lt
 80066c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80066cc:	3402      	adds	r4, #2
 80066ce:	9305      	str	r3, [sp, #20]
 80066d0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006790 <_svfiprintf_r+0x1f0>
 80066d4:	7821      	ldrb	r1, [r4, #0]
 80066d6:	2203      	movs	r2, #3
 80066d8:	4650      	mov	r0, sl
 80066da:	f7f9 fd89 	bl	80001f0 <memchr>
 80066de:	b140      	cbz	r0, 80066f2 <_svfiprintf_r+0x152>
 80066e0:	2340      	movs	r3, #64	; 0x40
 80066e2:	eba0 000a 	sub.w	r0, r0, sl
 80066e6:	fa03 f000 	lsl.w	r0, r3, r0
 80066ea:	9b04      	ldr	r3, [sp, #16]
 80066ec:	4303      	orrs	r3, r0
 80066ee:	3401      	adds	r4, #1
 80066f0:	9304      	str	r3, [sp, #16]
 80066f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066f6:	4827      	ldr	r0, [pc, #156]	; (8006794 <_svfiprintf_r+0x1f4>)
 80066f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066fc:	2206      	movs	r2, #6
 80066fe:	f7f9 fd77 	bl	80001f0 <memchr>
 8006702:	2800      	cmp	r0, #0
 8006704:	d038      	beq.n	8006778 <_svfiprintf_r+0x1d8>
 8006706:	4b24      	ldr	r3, [pc, #144]	; (8006798 <_svfiprintf_r+0x1f8>)
 8006708:	bb1b      	cbnz	r3, 8006752 <_svfiprintf_r+0x1b2>
 800670a:	9b03      	ldr	r3, [sp, #12]
 800670c:	3307      	adds	r3, #7
 800670e:	f023 0307 	bic.w	r3, r3, #7
 8006712:	3308      	adds	r3, #8
 8006714:	9303      	str	r3, [sp, #12]
 8006716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006718:	4433      	add	r3, r6
 800671a:	9309      	str	r3, [sp, #36]	; 0x24
 800671c:	e767      	b.n	80065ee <_svfiprintf_r+0x4e>
 800671e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006722:	460c      	mov	r4, r1
 8006724:	2001      	movs	r0, #1
 8006726:	e7a5      	b.n	8006674 <_svfiprintf_r+0xd4>
 8006728:	2300      	movs	r3, #0
 800672a:	3401      	adds	r4, #1
 800672c:	9305      	str	r3, [sp, #20]
 800672e:	4619      	mov	r1, r3
 8006730:	f04f 0c0a 	mov.w	ip, #10
 8006734:	4620      	mov	r0, r4
 8006736:	f810 2b01 	ldrb.w	r2, [r0], #1
 800673a:	3a30      	subs	r2, #48	; 0x30
 800673c:	2a09      	cmp	r2, #9
 800673e:	d903      	bls.n	8006748 <_svfiprintf_r+0x1a8>
 8006740:	2b00      	cmp	r3, #0
 8006742:	d0c5      	beq.n	80066d0 <_svfiprintf_r+0x130>
 8006744:	9105      	str	r1, [sp, #20]
 8006746:	e7c3      	b.n	80066d0 <_svfiprintf_r+0x130>
 8006748:	fb0c 2101 	mla	r1, ip, r1, r2
 800674c:	4604      	mov	r4, r0
 800674e:	2301      	movs	r3, #1
 8006750:	e7f0      	b.n	8006734 <_svfiprintf_r+0x194>
 8006752:	ab03      	add	r3, sp, #12
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	462a      	mov	r2, r5
 8006758:	4b10      	ldr	r3, [pc, #64]	; (800679c <_svfiprintf_r+0x1fc>)
 800675a:	a904      	add	r1, sp, #16
 800675c:	4638      	mov	r0, r7
 800675e:	f7fc fa93 	bl	8002c88 <_printf_float>
 8006762:	1c42      	adds	r2, r0, #1
 8006764:	4606      	mov	r6, r0
 8006766:	d1d6      	bne.n	8006716 <_svfiprintf_r+0x176>
 8006768:	89ab      	ldrh	r3, [r5, #12]
 800676a:	065b      	lsls	r3, r3, #25
 800676c:	f53f af2c 	bmi.w	80065c8 <_svfiprintf_r+0x28>
 8006770:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006772:	b01d      	add	sp, #116	; 0x74
 8006774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006778:	ab03      	add	r3, sp, #12
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	462a      	mov	r2, r5
 800677e:	4b07      	ldr	r3, [pc, #28]	; (800679c <_svfiprintf_r+0x1fc>)
 8006780:	a904      	add	r1, sp, #16
 8006782:	4638      	mov	r0, r7
 8006784:	f7fc fd18 	bl	80031b8 <_printf_i>
 8006788:	e7eb      	b.n	8006762 <_svfiprintf_r+0x1c2>
 800678a:	bf00      	nop
 800678c:	08007854 	.word	0x08007854
 8006790:	0800785a 	.word	0x0800785a
 8006794:	0800785e 	.word	0x0800785e
 8006798:	08002c89 	.word	0x08002c89
 800679c:	080064e9 	.word	0x080064e9

080067a0 <nan>:
 80067a0:	4901      	ldr	r1, [pc, #4]	; (80067a8 <nan+0x8>)
 80067a2:	2000      	movs	r0, #0
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	7ff80000 	.word	0x7ff80000

080067ac <_sbrk_r>:
 80067ac:	b538      	push	{r3, r4, r5, lr}
 80067ae:	4d06      	ldr	r5, [pc, #24]	; (80067c8 <_sbrk_r+0x1c>)
 80067b0:	2300      	movs	r3, #0
 80067b2:	4604      	mov	r4, r0
 80067b4:	4608      	mov	r0, r1
 80067b6:	602b      	str	r3, [r5, #0]
 80067b8:	f000 fe1a 	bl	80073f0 <_sbrk>
 80067bc:	1c43      	adds	r3, r0, #1
 80067be:	d102      	bne.n	80067c6 <_sbrk_r+0x1a>
 80067c0:	682b      	ldr	r3, [r5, #0]
 80067c2:	b103      	cbz	r3, 80067c6 <_sbrk_r+0x1a>
 80067c4:	6023      	str	r3, [r4, #0]
 80067c6:	bd38      	pop	{r3, r4, r5, pc}
 80067c8:	20000480 	.word	0x20000480

080067cc <strncmp>:
 80067cc:	b510      	push	{r4, lr}
 80067ce:	4603      	mov	r3, r0
 80067d0:	b172      	cbz	r2, 80067f0 <strncmp+0x24>
 80067d2:	3901      	subs	r1, #1
 80067d4:	1884      	adds	r4, r0, r2
 80067d6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80067da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80067de:	4290      	cmp	r0, r2
 80067e0:	d101      	bne.n	80067e6 <strncmp+0x1a>
 80067e2:	42a3      	cmp	r3, r4
 80067e4:	d101      	bne.n	80067ea <strncmp+0x1e>
 80067e6:	1a80      	subs	r0, r0, r2
 80067e8:	bd10      	pop	{r4, pc}
 80067ea:	2800      	cmp	r0, #0
 80067ec:	d1f3      	bne.n	80067d6 <strncmp+0xa>
 80067ee:	e7fa      	b.n	80067e6 <strncmp+0x1a>
 80067f0:	4610      	mov	r0, r2
 80067f2:	e7f9      	b.n	80067e8 <strncmp+0x1c>

080067f4 <__ascii_wctomb>:
 80067f4:	4603      	mov	r3, r0
 80067f6:	4608      	mov	r0, r1
 80067f8:	b141      	cbz	r1, 800680c <__ascii_wctomb+0x18>
 80067fa:	2aff      	cmp	r2, #255	; 0xff
 80067fc:	d904      	bls.n	8006808 <__ascii_wctomb+0x14>
 80067fe:	228a      	movs	r2, #138	; 0x8a
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006806:	4770      	bx	lr
 8006808:	700a      	strb	r2, [r1, #0]
 800680a:	2001      	movs	r0, #1
 800680c:	4770      	bx	lr
	...

08006810 <__assert_func>:
 8006810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006812:	4614      	mov	r4, r2
 8006814:	461a      	mov	r2, r3
 8006816:	4b09      	ldr	r3, [pc, #36]	; (800683c <__assert_func+0x2c>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4605      	mov	r5, r0
 800681c:	68d8      	ldr	r0, [r3, #12]
 800681e:	b14c      	cbz	r4, 8006834 <__assert_func+0x24>
 8006820:	4b07      	ldr	r3, [pc, #28]	; (8006840 <__assert_func+0x30>)
 8006822:	9100      	str	r1, [sp, #0]
 8006824:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006828:	4906      	ldr	r1, [pc, #24]	; (8006844 <__assert_func+0x34>)
 800682a:	462b      	mov	r3, r5
 800682c:	f000 f80e 	bl	800684c <fiprintf>
 8006830:	f000 fa8a 	bl	8006d48 <abort>
 8006834:	4b04      	ldr	r3, [pc, #16]	; (8006848 <__assert_func+0x38>)
 8006836:	461c      	mov	r4, r3
 8006838:	e7f3      	b.n	8006822 <__assert_func+0x12>
 800683a:	bf00      	nop
 800683c:	20000044 	.word	0x20000044
 8006840:	08007865 	.word	0x08007865
 8006844:	08007872 	.word	0x08007872
 8006848:	080078a0 	.word	0x080078a0

0800684c <fiprintf>:
 800684c:	b40e      	push	{r1, r2, r3}
 800684e:	b503      	push	{r0, r1, lr}
 8006850:	4601      	mov	r1, r0
 8006852:	ab03      	add	r3, sp, #12
 8006854:	4805      	ldr	r0, [pc, #20]	; (800686c <fiprintf+0x20>)
 8006856:	f853 2b04 	ldr.w	r2, [r3], #4
 800685a:	6800      	ldr	r0, [r0, #0]
 800685c:	9301      	str	r3, [sp, #4]
 800685e:	f000 f883 	bl	8006968 <_vfiprintf_r>
 8006862:	b002      	add	sp, #8
 8006864:	f85d eb04 	ldr.w	lr, [sp], #4
 8006868:	b003      	add	sp, #12
 800686a:	4770      	bx	lr
 800686c:	20000044 	.word	0x20000044

08006870 <memmove>:
 8006870:	4288      	cmp	r0, r1
 8006872:	b510      	push	{r4, lr}
 8006874:	eb01 0402 	add.w	r4, r1, r2
 8006878:	d902      	bls.n	8006880 <memmove+0x10>
 800687a:	4284      	cmp	r4, r0
 800687c:	4623      	mov	r3, r4
 800687e:	d807      	bhi.n	8006890 <memmove+0x20>
 8006880:	1e43      	subs	r3, r0, #1
 8006882:	42a1      	cmp	r1, r4
 8006884:	d008      	beq.n	8006898 <memmove+0x28>
 8006886:	f811 2b01 	ldrb.w	r2, [r1], #1
 800688a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800688e:	e7f8      	b.n	8006882 <memmove+0x12>
 8006890:	4402      	add	r2, r0
 8006892:	4601      	mov	r1, r0
 8006894:	428a      	cmp	r2, r1
 8006896:	d100      	bne.n	800689a <memmove+0x2a>
 8006898:	bd10      	pop	{r4, pc}
 800689a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800689e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068a2:	e7f7      	b.n	8006894 <memmove+0x24>

080068a4 <__malloc_lock>:
 80068a4:	4801      	ldr	r0, [pc, #4]	; (80068ac <__malloc_lock+0x8>)
 80068a6:	f000 bc0b 	b.w	80070c0 <__retarget_lock_acquire_recursive>
 80068aa:	bf00      	nop
 80068ac:	20000484 	.word	0x20000484

080068b0 <__malloc_unlock>:
 80068b0:	4801      	ldr	r0, [pc, #4]	; (80068b8 <__malloc_unlock+0x8>)
 80068b2:	f000 bc06 	b.w	80070c2 <__retarget_lock_release_recursive>
 80068b6:	bf00      	nop
 80068b8:	20000484 	.word	0x20000484

080068bc <_realloc_r>:
 80068bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c0:	4680      	mov	r8, r0
 80068c2:	4614      	mov	r4, r2
 80068c4:	460e      	mov	r6, r1
 80068c6:	b921      	cbnz	r1, 80068d2 <_realloc_r+0x16>
 80068c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068cc:	4611      	mov	r1, r2
 80068ce:	f7ff bd97 	b.w	8006400 <_malloc_r>
 80068d2:	b92a      	cbnz	r2, 80068e0 <_realloc_r+0x24>
 80068d4:	f7ff fd2a 	bl	800632c <_free_r>
 80068d8:	4625      	mov	r5, r4
 80068da:	4628      	mov	r0, r5
 80068dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068e0:	f000 fc56 	bl	8007190 <_malloc_usable_size_r>
 80068e4:	4284      	cmp	r4, r0
 80068e6:	4607      	mov	r7, r0
 80068e8:	d802      	bhi.n	80068f0 <_realloc_r+0x34>
 80068ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80068ee:	d812      	bhi.n	8006916 <_realloc_r+0x5a>
 80068f0:	4621      	mov	r1, r4
 80068f2:	4640      	mov	r0, r8
 80068f4:	f7ff fd84 	bl	8006400 <_malloc_r>
 80068f8:	4605      	mov	r5, r0
 80068fa:	2800      	cmp	r0, #0
 80068fc:	d0ed      	beq.n	80068da <_realloc_r+0x1e>
 80068fe:	42bc      	cmp	r4, r7
 8006900:	4622      	mov	r2, r4
 8006902:	4631      	mov	r1, r6
 8006904:	bf28      	it	cs
 8006906:	463a      	movcs	r2, r7
 8006908:	f7ff f83a 	bl	8005980 <memcpy>
 800690c:	4631      	mov	r1, r6
 800690e:	4640      	mov	r0, r8
 8006910:	f7ff fd0c 	bl	800632c <_free_r>
 8006914:	e7e1      	b.n	80068da <_realloc_r+0x1e>
 8006916:	4635      	mov	r5, r6
 8006918:	e7df      	b.n	80068da <_realloc_r+0x1e>

0800691a <__sfputc_r>:
 800691a:	6893      	ldr	r3, [r2, #8]
 800691c:	3b01      	subs	r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	b410      	push	{r4}
 8006922:	6093      	str	r3, [r2, #8]
 8006924:	da07      	bge.n	8006936 <__sfputc_r+0x1c>
 8006926:	6994      	ldr	r4, [r2, #24]
 8006928:	42a3      	cmp	r3, r4
 800692a:	db01      	blt.n	8006930 <__sfputc_r+0x16>
 800692c:	290a      	cmp	r1, #10
 800692e:	d102      	bne.n	8006936 <__sfputc_r+0x1c>
 8006930:	bc10      	pop	{r4}
 8006932:	f000 b949 	b.w	8006bc8 <__swbuf_r>
 8006936:	6813      	ldr	r3, [r2, #0]
 8006938:	1c58      	adds	r0, r3, #1
 800693a:	6010      	str	r0, [r2, #0]
 800693c:	7019      	strb	r1, [r3, #0]
 800693e:	4608      	mov	r0, r1
 8006940:	bc10      	pop	{r4}
 8006942:	4770      	bx	lr

08006944 <__sfputs_r>:
 8006944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006946:	4606      	mov	r6, r0
 8006948:	460f      	mov	r7, r1
 800694a:	4614      	mov	r4, r2
 800694c:	18d5      	adds	r5, r2, r3
 800694e:	42ac      	cmp	r4, r5
 8006950:	d101      	bne.n	8006956 <__sfputs_r+0x12>
 8006952:	2000      	movs	r0, #0
 8006954:	e007      	b.n	8006966 <__sfputs_r+0x22>
 8006956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800695a:	463a      	mov	r2, r7
 800695c:	4630      	mov	r0, r6
 800695e:	f7ff ffdc 	bl	800691a <__sfputc_r>
 8006962:	1c43      	adds	r3, r0, #1
 8006964:	d1f3      	bne.n	800694e <__sfputs_r+0xa>
 8006966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006968 <_vfiprintf_r>:
 8006968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800696c:	460d      	mov	r5, r1
 800696e:	b09d      	sub	sp, #116	; 0x74
 8006970:	4614      	mov	r4, r2
 8006972:	4698      	mov	r8, r3
 8006974:	4606      	mov	r6, r0
 8006976:	b118      	cbz	r0, 8006980 <_vfiprintf_r+0x18>
 8006978:	6983      	ldr	r3, [r0, #24]
 800697a:	b90b      	cbnz	r3, 8006980 <_vfiprintf_r+0x18>
 800697c:	f000 fb02 	bl	8006f84 <__sinit>
 8006980:	4b89      	ldr	r3, [pc, #548]	; (8006ba8 <_vfiprintf_r+0x240>)
 8006982:	429d      	cmp	r5, r3
 8006984:	d11b      	bne.n	80069be <_vfiprintf_r+0x56>
 8006986:	6875      	ldr	r5, [r6, #4]
 8006988:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800698a:	07d9      	lsls	r1, r3, #31
 800698c:	d405      	bmi.n	800699a <_vfiprintf_r+0x32>
 800698e:	89ab      	ldrh	r3, [r5, #12]
 8006990:	059a      	lsls	r2, r3, #22
 8006992:	d402      	bmi.n	800699a <_vfiprintf_r+0x32>
 8006994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006996:	f000 fb93 	bl	80070c0 <__retarget_lock_acquire_recursive>
 800699a:	89ab      	ldrh	r3, [r5, #12]
 800699c:	071b      	lsls	r3, r3, #28
 800699e:	d501      	bpl.n	80069a4 <_vfiprintf_r+0x3c>
 80069a0:	692b      	ldr	r3, [r5, #16]
 80069a2:	b9eb      	cbnz	r3, 80069e0 <_vfiprintf_r+0x78>
 80069a4:	4629      	mov	r1, r5
 80069a6:	4630      	mov	r0, r6
 80069a8:	f000 f960 	bl	8006c6c <__swsetup_r>
 80069ac:	b1c0      	cbz	r0, 80069e0 <_vfiprintf_r+0x78>
 80069ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069b0:	07dc      	lsls	r4, r3, #31
 80069b2:	d50e      	bpl.n	80069d2 <_vfiprintf_r+0x6a>
 80069b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069b8:	b01d      	add	sp, #116	; 0x74
 80069ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069be:	4b7b      	ldr	r3, [pc, #492]	; (8006bac <_vfiprintf_r+0x244>)
 80069c0:	429d      	cmp	r5, r3
 80069c2:	d101      	bne.n	80069c8 <_vfiprintf_r+0x60>
 80069c4:	68b5      	ldr	r5, [r6, #8]
 80069c6:	e7df      	b.n	8006988 <_vfiprintf_r+0x20>
 80069c8:	4b79      	ldr	r3, [pc, #484]	; (8006bb0 <_vfiprintf_r+0x248>)
 80069ca:	429d      	cmp	r5, r3
 80069cc:	bf08      	it	eq
 80069ce:	68f5      	ldreq	r5, [r6, #12]
 80069d0:	e7da      	b.n	8006988 <_vfiprintf_r+0x20>
 80069d2:	89ab      	ldrh	r3, [r5, #12]
 80069d4:	0598      	lsls	r0, r3, #22
 80069d6:	d4ed      	bmi.n	80069b4 <_vfiprintf_r+0x4c>
 80069d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069da:	f000 fb72 	bl	80070c2 <__retarget_lock_release_recursive>
 80069de:	e7e9      	b.n	80069b4 <_vfiprintf_r+0x4c>
 80069e0:	2300      	movs	r3, #0
 80069e2:	9309      	str	r3, [sp, #36]	; 0x24
 80069e4:	2320      	movs	r3, #32
 80069e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80069ee:	2330      	movs	r3, #48	; 0x30
 80069f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006bb4 <_vfiprintf_r+0x24c>
 80069f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069f8:	f04f 0901 	mov.w	r9, #1
 80069fc:	4623      	mov	r3, r4
 80069fe:	469a      	mov	sl, r3
 8006a00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a04:	b10a      	cbz	r2, 8006a0a <_vfiprintf_r+0xa2>
 8006a06:	2a25      	cmp	r2, #37	; 0x25
 8006a08:	d1f9      	bne.n	80069fe <_vfiprintf_r+0x96>
 8006a0a:	ebba 0b04 	subs.w	fp, sl, r4
 8006a0e:	d00b      	beq.n	8006a28 <_vfiprintf_r+0xc0>
 8006a10:	465b      	mov	r3, fp
 8006a12:	4622      	mov	r2, r4
 8006a14:	4629      	mov	r1, r5
 8006a16:	4630      	mov	r0, r6
 8006a18:	f7ff ff94 	bl	8006944 <__sfputs_r>
 8006a1c:	3001      	adds	r0, #1
 8006a1e:	f000 80aa 	beq.w	8006b76 <_vfiprintf_r+0x20e>
 8006a22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a24:	445a      	add	r2, fp
 8006a26:	9209      	str	r2, [sp, #36]	; 0x24
 8006a28:	f89a 3000 	ldrb.w	r3, [sl]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 80a2 	beq.w	8006b76 <_vfiprintf_r+0x20e>
 8006a32:	2300      	movs	r3, #0
 8006a34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a3c:	f10a 0a01 	add.w	sl, sl, #1
 8006a40:	9304      	str	r3, [sp, #16]
 8006a42:	9307      	str	r3, [sp, #28]
 8006a44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a48:	931a      	str	r3, [sp, #104]	; 0x68
 8006a4a:	4654      	mov	r4, sl
 8006a4c:	2205      	movs	r2, #5
 8006a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a52:	4858      	ldr	r0, [pc, #352]	; (8006bb4 <_vfiprintf_r+0x24c>)
 8006a54:	f7f9 fbcc 	bl	80001f0 <memchr>
 8006a58:	9a04      	ldr	r2, [sp, #16]
 8006a5a:	b9d8      	cbnz	r0, 8006a94 <_vfiprintf_r+0x12c>
 8006a5c:	06d1      	lsls	r1, r2, #27
 8006a5e:	bf44      	itt	mi
 8006a60:	2320      	movmi	r3, #32
 8006a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a66:	0713      	lsls	r3, r2, #28
 8006a68:	bf44      	itt	mi
 8006a6a:	232b      	movmi	r3, #43	; 0x2b
 8006a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a70:	f89a 3000 	ldrb.w	r3, [sl]
 8006a74:	2b2a      	cmp	r3, #42	; 0x2a
 8006a76:	d015      	beq.n	8006aa4 <_vfiprintf_r+0x13c>
 8006a78:	9a07      	ldr	r2, [sp, #28]
 8006a7a:	4654      	mov	r4, sl
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	f04f 0c0a 	mov.w	ip, #10
 8006a82:	4621      	mov	r1, r4
 8006a84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a88:	3b30      	subs	r3, #48	; 0x30
 8006a8a:	2b09      	cmp	r3, #9
 8006a8c:	d94e      	bls.n	8006b2c <_vfiprintf_r+0x1c4>
 8006a8e:	b1b0      	cbz	r0, 8006abe <_vfiprintf_r+0x156>
 8006a90:	9207      	str	r2, [sp, #28]
 8006a92:	e014      	b.n	8006abe <_vfiprintf_r+0x156>
 8006a94:	eba0 0308 	sub.w	r3, r0, r8
 8006a98:	fa09 f303 	lsl.w	r3, r9, r3
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	9304      	str	r3, [sp, #16]
 8006aa0:	46a2      	mov	sl, r4
 8006aa2:	e7d2      	b.n	8006a4a <_vfiprintf_r+0xe2>
 8006aa4:	9b03      	ldr	r3, [sp, #12]
 8006aa6:	1d19      	adds	r1, r3, #4
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	9103      	str	r1, [sp, #12]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	bfbb      	ittet	lt
 8006ab0:	425b      	neglt	r3, r3
 8006ab2:	f042 0202 	orrlt.w	r2, r2, #2
 8006ab6:	9307      	strge	r3, [sp, #28]
 8006ab8:	9307      	strlt	r3, [sp, #28]
 8006aba:	bfb8      	it	lt
 8006abc:	9204      	strlt	r2, [sp, #16]
 8006abe:	7823      	ldrb	r3, [r4, #0]
 8006ac0:	2b2e      	cmp	r3, #46	; 0x2e
 8006ac2:	d10c      	bne.n	8006ade <_vfiprintf_r+0x176>
 8006ac4:	7863      	ldrb	r3, [r4, #1]
 8006ac6:	2b2a      	cmp	r3, #42	; 0x2a
 8006ac8:	d135      	bne.n	8006b36 <_vfiprintf_r+0x1ce>
 8006aca:	9b03      	ldr	r3, [sp, #12]
 8006acc:	1d1a      	adds	r2, r3, #4
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	9203      	str	r2, [sp, #12]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	bfb8      	it	lt
 8006ad6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006ada:	3402      	adds	r4, #2
 8006adc:	9305      	str	r3, [sp, #20]
 8006ade:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006bb8 <_vfiprintf_r+0x250>
 8006ae2:	7821      	ldrb	r1, [r4, #0]
 8006ae4:	2203      	movs	r2, #3
 8006ae6:	4650      	mov	r0, sl
 8006ae8:	f7f9 fb82 	bl	80001f0 <memchr>
 8006aec:	b140      	cbz	r0, 8006b00 <_vfiprintf_r+0x198>
 8006aee:	2340      	movs	r3, #64	; 0x40
 8006af0:	eba0 000a 	sub.w	r0, r0, sl
 8006af4:	fa03 f000 	lsl.w	r0, r3, r0
 8006af8:	9b04      	ldr	r3, [sp, #16]
 8006afa:	4303      	orrs	r3, r0
 8006afc:	3401      	adds	r4, #1
 8006afe:	9304      	str	r3, [sp, #16]
 8006b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b04:	482d      	ldr	r0, [pc, #180]	; (8006bbc <_vfiprintf_r+0x254>)
 8006b06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b0a:	2206      	movs	r2, #6
 8006b0c:	f7f9 fb70 	bl	80001f0 <memchr>
 8006b10:	2800      	cmp	r0, #0
 8006b12:	d03f      	beq.n	8006b94 <_vfiprintf_r+0x22c>
 8006b14:	4b2a      	ldr	r3, [pc, #168]	; (8006bc0 <_vfiprintf_r+0x258>)
 8006b16:	bb1b      	cbnz	r3, 8006b60 <_vfiprintf_r+0x1f8>
 8006b18:	9b03      	ldr	r3, [sp, #12]
 8006b1a:	3307      	adds	r3, #7
 8006b1c:	f023 0307 	bic.w	r3, r3, #7
 8006b20:	3308      	adds	r3, #8
 8006b22:	9303      	str	r3, [sp, #12]
 8006b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b26:	443b      	add	r3, r7
 8006b28:	9309      	str	r3, [sp, #36]	; 0x24
 8006b2a:	e767      	b.n	80069fc <_vfiprintf_r+0x94>
 8006b2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b30:	460c      	mov	r4, r1
 8006b32:	2001      	movs	r0, #1
 8006b34:	e7a5      	b.n	8006a82 <_vfiprintf_r+0x11a>
 8006b36:	2300      	movs	r3, #0
 8006b38:	3401      	adds	r4, #1
 8006b3a:	9305      	str	r3, [sp, #20]
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	f04f 0c0a 	mov.w	ip, #10
 8006b42:	4620      	mov	r0, r4
 8006b44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b48:	3a30      	subs	r2, #48	; 0x30
 8006b4a:	2a09      	cmp	r2, #9
 8006b4c:	d903      	bls.n	8006b56 <_vfiprintf_r+0x1ee>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d0c5      	beq.n	8006ade <_vfiprintf_r+0x176>
 8006b52:	9105      	str	r1, [sp, #20]
 8006b54:	e7c3      	b.n	8006ade <_vfiprintf_r+0x176>
 8006b56:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e7f0      	b.n	8006b42 <_vfiprintf_r+0x1da>
 8006b60:	ab03      	add	r3, sp, #12
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	462a      	mov	r2, r5
 8006b66:	4b17      	ldr	r3, [pc, #92]	; (8006bc4 <_vfiprintf_r+0x25c>)
 8006b68:	a904      	add	r1, sp, #16
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	f7fc f88c 	bl	8002c88 <_printf_float>
 8006b70:	4607      	mov	r7, r0
 8006b72:	1c78      	adds	r0, r7, #1
 8006b74:	d1d6      	bne.n	8006b24 <_vfiprintf_r+0x1bc>
 8006b76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b78:	07d9      	lsls	r1, r3, #31
 8006b7a:	d405      	bmi.n	8006b88 <_vfiprintf_r+0x220>
 8006b7c:	89ab      	ldrh	r3, [r5, #12]
 8006b7e:	059a      	lsls	r2, r3, #22
 8006b80:	d402      	bmi.n	8006b88 <_vfiprintf_r+0x220>
 8006b82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b84:	f000 fa9d 	bl	80070c2 <__retarget_lock_release_recursive>
 8006b88:	89ab      	ldrh	r3, [r5, #12]
 8006b8a:	065b      	lsls	r3, r3, #25
 8006b8c:	f53f af12 	bmi.w	80069b4 <_vfiprintf_r+0x4c>
 8006b90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b92:	e711      	b.n	80069b8 <_vfiprintf_r+0x50>
 8006b94:	ab03      	add	r3, sp, #12
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	462a      	mov	r2, r5
 8006b9a:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <_vfiprintf_r+0x25c>)
 8006b9c:	a904      	add	r1, sp, #16
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	f7fc fb0a 	bl	80031b8 <_printf_i>
 8006ba4:	e7e4      	b.n	8006b70 <_vfiprintf_r+0x208>
 8006ba6:	bf00      	nop
 8006ba8:	080078c4 	.word	0x080078c4
 8006bac:	080078e4 	.word	0x080078e4
 8006bb0:	080078a4 	.word	0x080078a4
 8006bb4:	08007854 	.word	0x08007854
 8006bb8:	0800785a 	.word	0x0800785a
 8006bbc:	0800785e 	.word	0x0800785e
 8006bc0:	08002c89 	.word	0x08002c89
 8006bc4:	08006945 	.word	0x08006945

08006bc8 <__swbuf_r>:
 8006bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bca:	460e      	mov	r6, r1
 8006bcc:	4614      	mov	r4, r2
 8006bce:	4605      	mov	r5, r0
 8006bd0:	b118      	cbz	r0, 8006bda <__swbuf_r+0x12>
 8006bd2:	6983      	ldr	r3, [r0, #24]
 8006bd4:	b90b      	cbnz	r3, 8006bda <__swbuf_r+0x12>
 8006bd6:	f000 f9d5 	bl	8006f84 <__sinit>
 8006bda:	4b21      	ldr	r3, [pc, #132]	; (8006c60 <__swbuf_r+0x98>)
 8006bdc:	429c      	cmp	r4, r3
 8006bde:	d12b      	bne.n	8006c38 <__swbuf_r+0x70>
 8006be0:	686c      	ldr	r4, [r5, #4]
 8006be2:	69a3      	ldr	r3, [r4, #24]
 8006be4:	60a3      	str	r3, [r4, #8]
 8006be6:	89a3      	ldrh	r3, [r4, #12]
 8006be8:	071a      	lsls	r2, r3, #28
 8006bea:	d52f      	bpl.n	8006c4c <__swbuf_r+0x84>
 8006bec:	6923      	ldr	r3, [r4, #16]
 8006bee:	b36b      	cbz	r3, 8006c4c <__swbuf_r+0x84>
 8006bf0:	6923      	ldr	r3, [r4, #16]
 8006bf2:	6820      	ldr	r0, [r4, #0]
 8006bf4:	1ac0      	subs	r0, r0, r3
 8006bf6:	6963      	ldr	r3, [r4, #20]
 8006bf8:	b2f6      	uxtb	r6, r6
 8006bfa:	4283      	cmp	r3, r0
 8006bfc:	4637      	mov	r7, r6
 8006bfe:	dc04      	bgt.n	8006c0a <__swbuf_r+0x42>
 8006c00:	4621      	mov	r1, r4
 8006c02:	4628      	mov	r0, r5
 8006c04:	f000 f92a 	bl	8006e5c <_fflush_r>
 8006c08:	bb30      	cbnz	r0, 8006c58 <__swbuf_r+0x90>
 8006c0a:	68a3      	ldr	r3, [r4, #8]
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	60a3      	str	r3, [r4, #8]
 8006c10:	6823      	ldr	r3, [r4, #0]
 8006c12:	1c5a      	adds	r2, r3, #1
 8006c14:	6022      	str	r2, [r4, #0]
 8006c16:	701e      	strb	r6, [r3, #0]
 8006c18:	6963      	ldr	r3, [r4, #20]
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	4283      	cmp	r3, r0
 8006c1e:	d004      	beq.n	8006c2a <__swbuf_r+0x62>
 8006c20:	89a3      	ldrh	r3, [r4, #12]
 8006c22:	07db      	lsls	r3, r3, #31
 8006c24:	d506      	bpl.n	8006c34 <__swbuf_r+0x6c>
 8006c26:	2e0a      	cmp	r6, #10
 8006c28:	d104      	bne.n	8006c34 <__swbuf_r+0x6c>
 8006c2a:	4621      	mov	r1, r4
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	f000 f915 	bl	8006e5c <_fflush_r>
 8006c32:	b988      	cbnz	r0, 8006c58 <__swbuf_r+0x90>
 8006c34:	4638      	mov	r0, r7
 8006c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c38:	4b0a      	ldr	r3, [pc, #40]	; (8006c64 <__swbuf_r+0x9c>)
 8006c3a:	429c      	cmp	r4, r3
 8006c3c:	d101      	bne.n	8006c42 <__swbuf_r+0x7a>
 8006c3e:	68ac      	ldr	r4, [r5, #8]
 8006c40:	e7cf      	b.n	8006be2 <__swbuf_r+0x1a>
 8006c42:	4b09      	ldr	r3, [pc, #36]	; (8006c68 <__swbuf_r+0xa0>)
 8006c44:	429c      	cmp	r4, r3
 8006c46:	bf08      	it	eq
 8006c48:	68ec      	ldreq	r4, [r5, #12]
 8006c4a:	e7ca      	b.n	8006be2 <__swbuf_r+0x1a>
 8006c4c:	4621      	mov	r1, r4
 8006c4e:	4628      	mov	r0, r5
 8006c50:	f000 f80c 	bl	8006c6c <__swsetup_r>
 8006c54:	2800      	cmp	r0, #0
 8006c56:	d0cb      	beq.n	8006bf0 <__swbuf_r+0x28>
 8006c58:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006c5c:	e7ea      	b.n	8006c34 <__swbuf_r+0x6c>
 8006c5e:	bf00      	nop
 8006c60:	080078c4 	.word	0x080078c4
 8006c64:	080078e4 	.word	0x080078e4
 8006c68:	080078a4 	.word	0x080078a4

08006c6c <__swsetup_r>:
 8006c6c:	4b32      	ldr	r3, [pc, #200]	; (8006d38 <__swsetup_r+0xcc>)
 8006c6e:	b570      	push	{r4, r5, r6, lr}
 8006c70:	681d      	ldr	r5, [r3, #0]
 8006c72:	4606      	mov	r6, r0
 8006c74:	460c      	mov	r4, r1
 8006c76:	b125      	cbz	r5, 8006c82 <__swsetup_r+0x16>
 8006c78:	69ab      	ldr	r3, [r5, #24]
 8006c7a:	b913      	cbnz	r3, 8006c82 <__swsetup_r+0x16>
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	f000 f981 	bl	8006f84 <__sinit>
 8006c82:	4b2e      	ldr	r3, [pc, #184]	; (8006d3c <__swsetup_r+0xd0>)
 8006c84:	429c      	cmp	r4, r3
 8006c86:	d10f      	bne.n	8006ca8 <__swsetup_r+0x3c>
 8006c88:	686c      	ldr	r4, [r5, #4]
 8006c8a:	89a3      	ldrh	r3, [r4, #12]
 8006c8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c90:	0719      	lsls	r1, r3, #28
 8006c92:	d42c      	bmi.n	8006cee <__swsetup_r+0x82>
 8006c94:	06dd      	lsls	r5, r3, #27
 8006c96:	d411      	bmi.n	8006cbc <__swsetup_r+0x50>
 8006c98:	2309      	movs	r3, #9
 8006c9a:	6033      	str	r3, [r6, #0]
 8006c9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ca0:	81a3      	strh	r3, [r4, #12]
 8006ca2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ca6:	e03e      	b.n	8006d26 <__swsetup_r+0xba>
 8006ca8:	4b25      	ldr	r3, [pc, #148]	; (8006d40 <__swsetup_r+0xd4>)
 8006caa:	429c      	cmp	r4, r3
 8006cac:	d101      	bne.n	8006cb2 <__swsetup_r+0x46>
 8006cae:	68ac      	ldr	r4, [r5, #8]
 8006cb0:	e7eb      	b.n	8006c8a <__swsetup_r+0x1e>
 8006cb2:	4b24      	ldr	r3, [pc, #144]	; (8006d44 <__swsetup_r+0xd8>)
 8006cb4:	429c      	cmp	r4, r3
 8006cb6:	bf08      	it	eq
 8006cb8:	68ec      	ldreq	r4, [r5, #12]
 8006cba:	e7e6      	b.n	8006c8a <__swsetup_r+0x1e>
 8006cbc:	0758      	lsls	r0, r3, #29
 8006cbe:	d512      	bpl.n	8006ce6 <__swsetup_r+0x7a>
 8006cc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cc2:	b141      	cbz	r1, 8006cd6 <__swsetup_r+0x6a>
 8006cc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cc8:	4299      	cmp	r1, r3
 8006cca:	d002      	beq.n	8006cd2 <__swsetup_r+0x66>
 8006ccc:	4630      	mov	r0, r6
 8006cce:	f7ff fb2d 	bl	800632c <_free_r>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	6363      	str	r3, [r4, #52]	; 0x34
 8006cd6:	89a3      	ldrh	r3, [r4, #12]
 8006cd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006cdc:	81a3      	strh	r3, [r4, #12]
 8006cde:	2300      	movs	r3, #0
 8006ce0:	6063      	str	r3, [r4, #4]
 8006ce2:	6923      	ldr	r3, [r4, #16]
 8006ce4:	6023      	str	r3, [r4, #0]
 8006ce6:	89a3      	ldrh	r3, [r4, #12]
 8006ce8:	f043 0308 	orr.w	r3, r3, #8
 8006cec:	81a3      	strh	r3, [r4, #12]
 8006cee:	6923      	ldr	r3, [r4, #16]
 8006cf0:	b94b      	cbnz	r3, 8006d06 <__swsetup_r+0x9a>
 8006cf2:	89a3      	ldrh	r3, [r4, #12]
 8006cf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cfc:	d003      	beq.n	8006d06 <__swsetup_r+0x9a>
 8006cfe:	4621      	mov	r1, r4
 8006d00:	4630      	mov	r0, r6
 8006d02:	f000 fa05 	bl	8007110 <__smakebuf_r>
 8006d06:	89a0      	ldrh	r0, [r4, #12]
 8006d08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d0c:	f010 0301 	ands.w	r3, r0, #1
 8006d10:	d00a      	beq.n	8006d28 <__swsetup_r+0xbc>
 8006d12:	2300      	movs	r3, #0
 8006d14:	60a3      	str	r3, [r4, #8]
 8006d16:	6963      	ldr	r3, [r4, #20]
 8006d18:	425b      	negs	r3, r3
 8006d1a:	61a3      	str	r3, [r4, #24]
 8006d1c:	6923      	ldr	r3, [r4, #16]
 8006d1e:	b943      	cbnz	r3, 8006d32 <__swsetup_r+0xc6>
 8006d20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d24:	d1ba      	bne.n	8006c9c <__swsetup_r+0x30>
 8006d26:	bd70      	pop	{r4, r5, r6, pc}
 8006d28:	0781      	lsls	r1, r0, #30
 8006d2a:	bf58      	it	pl
 8006d2c:	6963      	ldrpl	r3, [r4, #20]
 8006d2e:	60a3      	str	r3, [r4, #8]
 8006d30:	e7f4      	b.n	8006d1c <__swsetup_r+0xb0>
 8006d32:	2000      	movs	r0, #0
 8006d34:	e7f7      	b.n	8006d26 <__swsetup_r+0xba>
 8006d36:	bf00      	nop
 8006d38:	20000044 	.word	0x20000044
 8006d3c:	080078c4 	.word	0x080078c4
 8006d40:	080078e4 	.word	0x080078e4
 8006d44:	080078a4 	.word	0x080078a4

08006d48 <abort>:
 8006d48:	b508      	push	{r3, lr}
 8006d4a:	2006      	movs	r0, #6
 8006d4c:	f000 fa50 	bl	80071f0 <raise>
 8006d50:	2001      	movs	r0, #1
 8006d52:	f000 fb63 	bl	800741c <_exit>
	...

08006d58 <__sflush_r>:
 8006d58:	898a      	ldrh	r2, [r1, #12]
 8006d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5c:	4605      	mov	r5, r0
 8006d5e:	0710      	lsls	r0, r2, #28
 8006d60:	460c      	mov	r4, r1
 8006d62:	d457      	bmi.n	8006e14 <__sflush_r+0xbc>
 8006d64:	684b      	ldr	r3, [r1, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	dc04      	bgt.n	8006d74 <__sflush_r+0x1c>
 8006d6a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	dc01      	bgt.n	8006d74 <__sflush_r+0x1c>
 8006d70:	2000      	movs	r0, #0
 8006d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d76:	2e00      	cmp	r6, #0
 8006d78:	d0fa      	beq.n	8006d70 <__sflush_r+0x18>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d80:	682f      	ldr	r7, [r5, #0]
 8006d82:	602b      	str	r3, [r5, #0]
 8006d84:	d032      	beq.n	8006dec <__sflush_r+0x94>
 8006d86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d88:	89a3      	ldrh	r3, [r4, #12]
 8006d8a:	075a      	lsls	r2, r3, #29
 8006d8c:	d505      	bpl.n	8006d9a <__sflush_r+0x42>
 8006d8e:	6863      	ldr	r3, [r4, #4]
 8006d90:	1ac0      	subs	r0, r0, r3
 8006d92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d94:	b10b      	cbz	r3, 8006d9a <__sflush_r+0x42>
 8006d96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d98:	1ac0      	subs	r0, r0, r3
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006da0:	6a21      	ldr	r1, [r4, #32]
 8006da2:	4628      	mov	r0, r5
 8006da4:	47b0      	blx	r6
 8006da6:	1c43      	adds	r3, r0, #1
 8006da8:	89a3      	ldrh	r3, [r4, #12]
 8006daa:	d106      	bne.n	8006dba <__sflush_r+0x62>
 8006dac:	6829      	ldr	r1, [r5, #0]
 8006dae:	291d      	cmp	r1, #29
 8006db0:	d82c      	bhi.n	8006e0c <__sflush_r+0xb4>
 8006db2:	4a29      	ldr	r2, [pc, #164]	; (8006e58 <__sflush_r+0x100>)
 8006db4:	40ca      	lsrs	r2, r1
 8006db6:	07d6      	lsls	r6, r2, #31
 8006db8:	d528      	bpl.n	8006e0c <__sflush_r+0xb4>
 8006dba:	2200      	movs	r2, #0
 8006dbc:	6062      	str	r2, [r4, #4]
 8006dbe:	04d9      	lsls	r1, r3, #19
 8006dc0:	6922      	ldr	r2, [r4, #16]
 8006dc2:	6022      	str	r2, [r4, #0]
 8006dc4:	d504      	bpl.n	8006dd0 <__sflush_r+0x78>
 8006dc6:	1c42      	adds	r2, r0, #1
 8006dc8:	d101      	bne.n	8006dce <__sflush_r+0x76>
 8006dca:	682b      	ldr	r3, [r5, #0]
 8006dcc:	b903      	cbnz	r3, 8006dd0 <__sflush_r+0x78>
 8006dce:	6560      	str	r0, [r4, #84]	; 0x54
 8006dd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dd2:	602f      	str	r7, [r5, #0]
 8006dd4:	2900      	cmp	r1, #0
 8006dd6:	d0cb      	beq.n	8006d70 <__sflush_r+0x18>
 8006dd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ddc:	4299      	cmp	r1, r3
 8006dde:	d002      	beq.n	8006de6 <__sflush_r+0x8e>
 8006de0:	4628      	mov	r0, r5
 8006de2:	f7ff faa3 	bl	800632c <_free_r>
 8006de6:	2000      	movs	r0, #0
 8006de8:	6360      	str	r0, [r4, #52]	; 0x34
 8006dea:	e7c2      	b.n	8006d72 <__sflush_r+0x1a>
 8006dec:	6a21      	ldr	r1, [r4, #32]
 8006dee:	2301      	movs	r3, #1
 8006df0:	4628      	mov	r0, r5
 8006df2:	47b0      	blx	r6
 8006df4:	1c41      	adds	r1, r0, #1
 8006df6:	d1c7      	bne.n	8006d88 <__sflush_r+0x30>
 8006df8:	682b      	ldr	r3, [r5, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d0c4      	beq.n	8006d88 <__sflush_r+0x30>
 8006dfe:	2b1d      	cmp	r3, #29
 8006e00:	d001      	beq.n	8006e06 <__sflush_r+0xae>
 8006e02:	2b16      	cmp	r3, #22
 8006e04:	d101      	bne.n	8006e0a <__sflush_r+0xb2>
 8006e06:	602f      	str	r7, [r5, #0]
 8006e08:	e7b2      	b.n	8006d70 <__sflush_r+0x18>
 8006e0a:	89a3      	ldrh	r3, [r4, #12]
 8006e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e10:	81a3      	strh	r3, [r4, #12]
 8006e12:	e7ae      	b.n	8006d72 <__sflush_r+0x1a>
 8006e14:	690f      	ldr	r7, [r1, #16]
 8006e16:	2f00      	cmp	r7, #0
 8006e18:	d0aa      	beq.n	8006d70 <__sflush_r+0x18>
 8006e1a:	0793      	lsls	r3, r2, #30
 8006e1c:	680e      	ldr	r6, [r1, #0]
 8006e1e:	bf08      	it	eq
 8006e20:	694b      	ldreq	r3, [r1, #20]
 8006e22:	600f      	str	r7, [r1, #0]
 8006e24:	bf18      	it	ne
 8006e26:	2300      	movne	r3, #0
 8006e28:	1bf6      	subs	r6, r6, r7
 8006e2a:	608b      	str	r3, [r1, #8]
 8006e2c:	2e00      	cmp	r6, #0
 8006e2e:	dd9f      	ble.n	8006d70 <__sflush_r+0x18>
 8006e30:	6a21      	ldr	r1, [r4, #32]
 8006e32:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006e36:	4633      	mov	r3, r6
 8006e38:	463a      	mov	r2, r7
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	47e0      	blx	ip
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	dc06      	bgt.n	8006e50 <__sflush_r+0xf8>
 8006e42:	89a3      	ldrh	r3, [r4, #12]
 8006e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e48:	81a3      	strh	r3, [r4, #12]
 8006e4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e4e:	e790      	b.n	8006d72 <__sflush_r+0x1a>
 8006e50:	4407      	add	r7, r0
 8006e52:	1a36      	subs	r6, r6, r0
 8006e54:	e7ea      	b.n	8006e2c <__sflush_r+0xd4>
 8006e56:	bf00      	nop
 8006e58:	20400001 	.word	0x20400001

08006e5c <_fflush_r>:
 8006e5c:	b538      	push	{r3, r4, r5, lr}
 8006e5e:	690b      	ldr	r3, [r1, #16]
 8006e60:	4605      	mov	r5, r0
 8006e62:	460c      	mov	r4, r1
 8006e64:	b913      	cbnz	r3, 8006e6c <_fflush_r+0x10>
 8006e66:	2500      	movs	r5, #0
 8006e68:	4628      	mov	r0, r5
 8006e6a:	bd38      	pop	{r3, r4, r5, pc}
 8006e6c:	b118      	cbz	r0, 8006e76 <_fflush_r+0x1a>
 8006e6e:	6983      	ldr	r3, [r0, #24]
 8006e70:	b90b      	cbnz	r3, 8006e76 <_fflush_r+0x1a>
 8006e72:	f000 f887 	bl	8006f84 <__sinit>
 8006e76:	4b14      	ldr	r3, [pc, #80]	; (8006ec8 <_fflush_r+0x6c>)
 8006e78:	429c      	cmp	r4, r3
 8006e7a:	d11b      	bne.n	8006eb4 <_fflush_r+0x58>
 8006e7c:	686c      	ldr	r4, [r5, #4]
 8006e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d0ef      	beq.n	8006e66 <_fflush_r+0xa>
 8006e86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e88:	07d0      	lsls	r0, r2, #31
 8006e8a:	d404      	bmi.n	8006e96 <_fflush_r+0x3a>
 8006e8c:	0599      	lsls	r1, r3, #22
 8006e8e:	d402      	bmi.n	8006e96 <_fflush_r+0x3a>
 8006e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e92:	f000 f915 	bl	80070c0 <__retarget_lock_acquire_recursive>
 8006e96:	4628      	mov	r0, r5
 8006e98:	4621      	mov	r1, r4
 8006e9a:	f7ff ff5d 	bl	8006d58 <__sflush_r>
 8006e9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ea0:	07da      	lsls	r2, r3, #31
 8006ea2:	4605      	mov	r5, r0
 8006ea4:	d4e0      	bmi.n	8006e68 <_fflush_r+0xc>
 8006ea6:	89a3      	ldrh	r3, [r4, #12]
 8006ea8:	059b      	lsls	r3, r3, #22
 8006eaa:	d4dd      	bmi.n	8006e68 <_fflush_r+0xc>
 8006eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eae:	f000 f908 	bl	80070c2 <__retarget_lock_release_recursive>
 8006eb2:	e7d9      	b.n	8006e68 <_fflush_r+0xc>
 8006eb4:	4b05      	ldr	r3, [pc, #20]	; (8006ecc <_fflush_r+0x70>)
 8006eb6:	429c      	cmp	r4, r3
 8006eb8:	d101      	bne.n	8006ebe <_fflush_r+0x62>
 8006eba:	68ac      	ldr	r4, [r5, #8]
 8006ebc:	e7df      	b.n	8006e7e <_fflush_r+0x22>
 8006ebe:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <_fflush_r+0x74>)
 8006ec0:	429c      	cmp	r4, r3
 8006ec2:	bf08      	it	eq
 8006ec4:	68ec      	ldreq	r4, [r5, #12]
 8006ec6:	e7da      	b.n	8006e7e <_fflush_r+0x22>
 8006ec8:	080078c4 	.word	0x080078c4
 8006ecc:	080078e4 	.word	0x080078e4
 8006ed0:	080078a4 	.word	0x080078a4

08006ed4 <std>:
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	b510      	push	{r4, lr}
 8006ed8:	4604      	mov	r4, r0
 8006eda:	e9c0 3300 	strd	r3, r3, [r0]
 8006ede:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ee2:	6083      	str	r3, [r0, #8]
 8006ee4:	8181      	strh	r1, [r0, #12]
 8006ee6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ee8:	81c2      	strh	r2, [r0, #14]
 8006eea:	6183      	str	r3, [r0, #24]
 8006eec:	4619      	mov	r1, r3
 8006eee:	2208      	movs	r2, #8
 8006ef0:	305c      	adds	r0, #92	; 0x5c
 8006ef2:	f7fb fe23 	bl	8002b3c <memset>
 8006ef6:	4b05      	ldr	r3, [pc, #20]	; (8006f0c <std+0x38>)
 8006ef8:	6263      	str	r3, [r4, #36]	; 0x24
 8006efa:	4b05      	ldr	r3, [pc, #20]	; (8006f10 <std+0x3c>)
 8006efc:	62a3      	str	r3, [r4, #40]	; 0x28
 8006efe:	4b05      	ldr	r3, [pc, #20]	; (8006f14 <std+0x40>)
 8006f00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f02:	4b05      	ldr	r3, [pc, #20]	; (8006f18 <std+0x44>)
 8006f04:	6224      	str	r4, [r4, #32]
 8006f06:	6323      	str	r3, [r4, #48]	; 0x30
 8006f08:	bd10      	pop	{r4, pc}
 8006f0a:	bf00      	nop
 8006f0c:	08007229 	.word	0x08007229
 8006f10:	0800724b 	.word	0x0800724b
 8006f14:	08007283 	.word	0x08007283
 8006f18:	080072a7 	.word	0x080072a7

08006f1c <_cleanup_r>:
 8006f1c:	4901      	ldr	r1, [pc, #4]	; (8006f24 <_cleanup_r+0x8>)
 8006f1e:	f000 b8af 	b.w	8007080 <_fwalk_reent>
 8006f22:	bf00      	nop
 8006f24:	08006e5d 	.word	0x08006e5d

08006f28 <__sfmoreglue>:
 8006f28:	b570      	push	{r4, r5, r6, lr}
 8006f2a:	2268      	movs	r2, #104	; 0x68
 8006f2c:	1e4d      	subs	r5, r1, #1
 8006f2e:	4355      	muls	r5, r2
 8006f30:	460e      	mov	r6, r1
 8006f32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f36:	f7ff fa63 	bl	8006400 <_malloc_r>
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	b140      	cbz	r0, 8006f50 <__sfmoreglue+0x28>
 8006f3e:	2100      	movs	r1, #0
 8006f40:	e9c0 1600 	strd	r1, r6, [r0]
 8006f44:	300c      	adds	r0, #12
 8006f46:	60a0      	str	r0, [r4, #8]
 8006f48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f4c:	f7fb fdf6 	bl	8002b3c <memset>
 8006f50:	4620      	mov	r0, r4
 8006f52:	bd70      	pop	{r4, r5, r6, pc}

08006f54 <__sfp_lock_acquire>:
 8006f54:	4801      	ldr	r0, [pc, #4]	; (8006f5c <__sfp_lock_acquire+0x8>)
 8006f56:	f000 b8b3 	b.w	80070c0 <__retarget_lock_acquire_recursive>
 8006f5a:	bf00      	nop
 8006f5c:	20000485 	.word	0x20000485

08006f60 <__sfp_lock_release>:
 8006f60:	4801      	ldr	r0, [pc, #4]	; (8006f68 <__sfp_lock_release+0x8>)
 8006f62:	f000 b8ae 	b.w	80070c2 <__retarget_lock_release_recursive>
 8006f66:	bf00      	nop
 8006f68:	20000485 	.word	0x20000485

08006f6c <__sinit_lock_acquire>:
 8006f6c:	4801      	ldr	r0, [pc, #4]	; (8006f74 <__sinit_lock_acquire+0x8>)
 8006f6e:	f000 b8a7 	b.w	80070c0 <__retarget_lock_acquire_recursive>
 8006f72:	bf00      	nop
 8006f74:	20000486 	.word	0x20000486

08006f78 <__sinit_lock_release>:
 8006f78:	4801      	ldr	r0, [pc, #4]	; (8006f80 <__sinit_lock_release+0x8>)
 8006f7a:	f000 b8a2 	b.w	80070c2 <__retarget_lock_release_recursive>
 8006f7e:	bf00      	nop
 8006f80:	20000486 	.word	0x20000486

08006f84 <__sinit>:
 8006f84:	b510      	push	{r4, lr}
 8006f86:	4604      	mov	r4, r0
 8006f88:	f7ff fff0 	bl	8006f6c <__sinit_lock_acquire>
 8006f8c:	69a3      	ldr	r3, [r4, #24]
 8006f8e:	b11b      	cbz	r3, 8006f98 <__sinit+0x14>
 8006f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f94:	f7ff bff0 	b.w	8006f78 <__sinit_lock_release>
 8006f98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f9c:	6523      	str	r3, [r4, #80]	; 0x50
 8006f9e:	4b13      	ldr	r3, [pc, #76]	; (8006fec <__sinit+0x68>)
 8006fa0:	4a13      	ldr	r2, [pc, #76]	; (8006ff0 <__sinit+0x6c>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006fa6:	42a3      	cmp	r3, r4
 8006fa8:	bf04      	itt	eq
 8006faa:	2301      	moveq	r3, #1
 8006fac:	61a3      	streq	r3, [r4, #24]
 8006fae:	4620      	mov	r0, r4
 8006fb0:	f000 f820 	bl	8006ff4 <__sfp>
 8006fb4:	6060      	str	r0, [r4, #4]
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	f000 f81c 	bl	8006ff4 <__sfp>
 8006fbc:	60a0      	str	r0, [r4, #8]
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f000 f818 	bl	8006ff4 <__sfp>
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	60e0      	str	r0, [r4, #12]
 8006fc8:	2104      	movs	r1, #4
 8006fca:	6860      	ldr	r0, [r4, #4]
 8006fcc:	f7ff ff82 	bl	8006ed4 <std>
 8006fd0:	68a0      	ldr	r0, [r4, #8]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	2109      	movs	r1, #9
 8006fd6:	f7ff ff7d 	bl	8006ed4 <std>
 8006fda:	68e0      	ldr	r0, [r4, #12]
 8006fdc:	2202      	movs	r2, #2
 8006fde:	2112      	movs	r1, #18
 8006fe0:	f7ff ff78 	bl	8006ed4 <std>
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	61a3      	str	r3, [r4, #24]
 8006fe8:	e7d2      	b.n	8006f90 <__sinit+0xc>
 8006fea:	bf00      	nop
 8006fec:	0800745c 	.word	0x0800745c
 8006ff0:	08006f1d 	.word	0x08006f1d

08006ff4 <__sfp>:
 8006ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff6:	4607      	mov	r7, r0
 8006ff8:	f7ff ffac 	bl	8006f54 <__sfp_lock_acquire>
 8006ffc:	4b1e      	ldr	r3, [pc, #120]	; (8007078 <__sfp+0x84>)
 8006ffe:	681e      	ldr	r6, [r3, #0]
 8007000:	69b3      	ldr	r3, [r6, #24]
 8007002:	b913      	cbnz	r3, 800700a <__sfp+0x16>
 8007004:	4630      	mov	r0, r6
 8007006:	f7ff ffbd 	bl	8006f84 <__sinit>
 800700a:	3648      	adds	r6, #72	; 0x48
 800700c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007010:	3b01      	subs	r3, #1
 8007012:	d503      	bpl.n	800701c <__sfp+0x28>
 8007014:	6833      	ldr	r3, [r6, #0]
 8007016:	b30b      	cbz	r3, 800705c <__sfp+0x68>
 8007018:	6836      	ldr	r6, [r6, #0]
 800701a:	e7f7      	b.n	800700c <__sfp+0x18>
 800701c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007020:	b9d5      	cbnz	r5, 8007058 <__sfp+0x64>
 8007022:	4b16      	ldr	r3, [pc, #88]	; (800707c <__sfp+0x88>)
 8007024:	60e3      	str	r3, [r4, #12]
 8007026:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800702a:	6665      	str	r5, [r4, #100]	; 0x64
 800702c:	f000 f847 	bl	80070be <__retarget_lock_init_recursive>
 8007030:	f7ff ff96 	bl	8006f60 <__sfp_lock_release>
 8007034:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007038:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800703c:	6025      	str	r5, [r4, #0]
 800703e:	61a5      	str	r5, [r4, #24]
 8007040:	2208      	movs	r2, #8
 8007042:	4629      	mov	r1, r5
 8007044:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007048:	f7fb fd78 	bl	8002b3c <memset>
 800704c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007050:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007054:	4620      	mov	r0, r4
 8007056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007058:	3468      	adds	r4, #104	; 0x68
 800705a:	e7d9      	b.n	8007010 <__sfp+0x1c>
 800705c:	2104      	movs	r1, #4
 800705e:	4638      	mov	r0, r7
 8007060:	f7ff ff62 	bl	8006f28 <__sfmoreglue>
 8007064:	4604      	mov	r4, r0
 8007066:	6030      	str	r0, [r6, #0]
 8007068:	2800      	cmp	r0, #0
 800706a:	d1d5      	bne.n	8007018 <__sfp+0x24>
 800706c:	f7ff ff78 	bl	8006f60 <__sfp_lock_release>
 8007070:	230c      	movs	r3, #12
 8007072:	603b      	str	r3, [r7, #0]
 8007074:	e7ee      	b.n	8007054 <__sfp+0x60>
 8007076:	bf00      	nop
 8007078:	0800745c 	.word	0x0800745c
 800707c:	ffff0001 	.word	0xffff0001

08007080 <_fwalk_reent>:
 8007080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007084:	4606      	mov	r6, r0
 8007086:	4688      	mov	r8, r1
 8007088:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800708c:	2700      	movs	r7, #0
 800708e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007092:	f1b9 0901 	subs.w	r9, r9, #1
 8007096:	d505      	bpl.n	80070a4 <_fwalk_reent+0x24>
 8007098:	6824      	ldr	r4, [r4, #0]
 800709a:	2c00      	cmp	r4, #0
 800709c:	d1f7      	bne.n	800708e <_fwalk_reent+0xe>
 800709e:	4638      	mov	r0, r7
 80070a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070a4:	89ab      	ldrh	r3, [r5, #12]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d907      	bls.n	80070ba <_fwalk_reent+0x3a>
 80070aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070ae:	3301      	adds	r3, #1
 80070b0:	d003      	beq.n	80070ba <_fwalk_reent+0x3a>
 80070b2:	4629      	mov	r1, r5
 80070b4:	4630      	mov	r0, r6
 80070b6:	47c0      	blx	r8
 80070b8:	4307      	orrs	r7, r0
 80070ba:	3568      	adds	r5, #104	; 0x68
 80070bc:	e7e9      	b.n	8007092 <_fwalk_reent+0x12>

080070be <__retarget_lock_init_recursive>:
 80070be:	4770      	bx	lr

080070c0 <__retarget_lock_acquire_recursive>:
 80070c0:	4770      	bx	lr

080070c2 <__retarget_lock_release_recursive>:
 80070c2:	4770      	bx	lr

080070c4 <__swhatbuf_r>:
 80070c4:	b570      	push	{r4, r5, r6, lr}
 80070c6:	460e      	mov	r6, r1
 80070c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070cc:	2900      	cmp	r1, #0
 80070ce:	b096      	sub	sp, #88	; 0x58
 80070d0:	4614      	mov	r4, r2
 80070d2:	461d      	mov	r5, r3
 80070d4:	da08      	bge.n	80070e8 <__swhatbuf_r+0x24>
 80070d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	602a      	str	r2, [r5, #0]
 80070de:	061a      	lsls	r2, r3, #24
 80070e0:	d410      	bmi.n	8007104 <__swhatbuf_r+0x40>
 80070e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070e6:	e00e      	b.n	8007106 <__swhatbuf_r+0x42>
 80070e8:	466a      	mov	r2, sp
 80070ea:	f000 f903 	bl	80072f4 <_fstat_r>
 80070ee:	2800      	cmp	r0, #0
 80070f0:	dbf1      	blt.n	80070d6 <__swhatbuf_r+0x12>
 80070f2:	9a01      	ldr	r2, [sp, #4]
 80070f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070fc:	425a      	negs	r2, r3
 80070fe:	415a      	adcs	r2, r3
 8007100:	602a      	str	r2, [r5, #0]
 8007102:	e7ee      	b.n	80070e2 <__swhatbuf_r+0x1e>
 8007104:	2340      	movs	r3, #64	; 0x40
 8007106:	2000      	movs	r0, #0
 8007108:	6023      	str	r3, [r4, #0]
 800710a:	b016      	add	sp, #88	; 0x58
 800710c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007110 <__smakebuf_r>:
 8007110:	898b      	ldrh	r3, [r1, #12]
 8007112:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007114:	079d      	lsls	r5, r3, #30
 8007116:	4606      	mov	r6, r0
 8007118:	460c      	mov	r4, r1
 800711a:	d507      	bpl.n	800712c <__smakebuf_r+0x1c>
 800711c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007120:	6023      	str	r3, [r4, #0]
 8007122:	6123      	str	r3, [r4, #16]
 8007124:	2301      	movs	r3, #1
 8007126:	6163      	str	r3, [r4, #20]
 8007128:	b002      	add	sp, #8
 800712a:	bd70      	pop	{r4, r5, r6, pc}
 800712c:	ab01      	add	r3, sp, #4
 800712e:	466a      	mov	r2, sp
 8007130:	f7ff ffc8 	bl	80070c4 <__swhatbuf_r>
 8007134:	9900      	ldr	r1, [sp, #0]
 8007136:	4605      	mov	r5, r0
 8007138:	4630      	mov	r0, r6
 800713a:	f7ff f961 	bl	8006400 <_malloc_r>
 800713e:	b948      	cbnz	r0, 8007154 <__smakebuf_r+0x44>
 8007140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007144:	059a      	lsls	r2, r3, #22
 8007146:	d4ef      	bmi.n	8007128 <__smakebuf_r+0x18>
 8007148:	f023 0303 	bic.w	r3, r3, #3
 800714c:	f043 0302 	orr.w	r3, r3, #2
 8007150:	81a3      	strh	r3, [r4, #12]
 8007152:	e7e3      	b.n	800711c <__smakebuf_r+0xc>
 8007154:	4b0d      	ldr	r3, [pc, #52]	; (800718c <__smakebuf_r+0x7c>)
 8007156:	62b3      	str	r3, [r6, #40]	; 0x28
 8007158:	89a3      	ldrh	r3, [r4, #12]
 800715a:	6020      	str	r0, [r4, #0]
 800715c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007160:	81a3      	strh	r3, [r4, #12]
 8007162:	9b00      	ldr	r3, [sp, #0]
 8007164:	6163      	str	r3, [r4, #20]
 8007166:	9b01      	ldr	r3, [sp, #4]
 8007168:	6120      	str	r0, [r4, #16]
 800716a:	b15b      	cbz	r3, 8007184 <__smakebuf_r+0x74>
 800716c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007170:	4630      	mov	r0, r6
 8007172:	f000 f8d1 	bl	8007318 <_isatty_r>
 8007176:	b128      	cbz	r0, 8007184 <__smakebuf_r+0x74>
 8007178:	89a3      	ldrh	r3, [r4, #12]
 800717a:	f023 0303 	bic.w	r3, r3, #3
 800717e:	f043 0301 	orr.w	r3, r3, #1
 8007182:	81a3      	strh	r3, [r4, #12]
 8007184:	89a0      	ldrh	r0, [r4, #12]
 8007186:	4305      	orrs	r5, r0
 8007188:	81a5      	strh	r5, [r4, #12]
 800718a:	e7cd      	b.n	8007128 <__smakebuf_r+0x18>
 800718c:	08006f1d 	.word	0x08006f1d

08007190 <_malloc_usable_size_r>:
 8007190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007194:	1f18      	subs	r0, r3, #4
 8007196:	2b00      	cmp	r3, #0
 8007198:	bfbc      	itt	lt
 800719a:	580b      	ldrlt	r3, [r1, r0]
 800719c:	18c0      	addlt	r0, r0, r3
 800719e:	4770      	bx	lr

080071a0 <_raise_r>:
 80071a0:	291f      	cmp	r1, #31
 80071a2:	b538      	push	{r3, r4, r5, lr}
 80071a4:	4604      	mov	r4, r0
 80071a6:	460d      	mov	r5, r1
 80071a8:	d904      	bls.n	80071b4 <_raise_r+0x14>
 80071aa:	2316      	movs	r3, #22
 80071ac:	6003      	str	r3, [r0, #0]
 80071ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071b2:	bd38      	pop	{r3, r4, r5, pc}
 80071b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80071b6:	b112      	cbz	r2, 80071be <_raise_r+0x1e>
 80071b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071bc:	b94b      	cbnz	r3, 80071d2 <_raise_r+0x32>
 80071be:	4620      	mov	r0, r4
 80071c0:	f000 f830 	bl	8007224 <_getpid_r>
 80071c4:	462a      	mov	r2, r5
 80071c6:	4601      	mov	r1, r0
 80071c8:	4620      	mov	r0, r4
 80071ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071ce:	f000 b817 	b.w	8007200 <_kill_r>
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d00a      	beq.n	80071ec <_raise_r+0x4c>
 80071d6:	1c59      	adds	r1, r3, #1
 80071d8:	d103      	bne.n	80071e2 <_raise_r+0x42>
 80071da:	2316      	movs	r3, #22
 80071dc:	6003      	str	r3, [r0, #0]
 80071de:	2001      	movs	r0, #1
 80071e0:	e7e7      	b.n	80071b2 <_raise_r+0x12>
 80071e2:	2400      	movs	r4, #0
 80071e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80071e8:	4628      	mov	r0, r5
 80071ea:	4798      	blx	r3
 80071ec:	2000      	movs	r0, #0
 80071ee:	e7e0      	b.n	80071b2 <_raise_r+0x12>

080071f0 <raise>:
 80071f0:	4b02      	ldr	r3, [pc, #8]	; (80071fc <raise+0xc>)
 80071f2:	4601      	mov	r1, r0
 80071f4:	6818      	ldr	r0, [r3, #0]
 80071f6:	f7ff bfd3 	b.w	80071a0 <_raise_r>
 80071fa:	bf00      	nop
 80071fc:	20000044 	.word	0x20000044

08007200 <_kill_r>:
 8007200:	b538      	push	{r3, r4, r5, lr}
 8007202:	4d07      	ldr	r5, [pc, #28]	; (8007220 <_kill_r+0x20>)
 8007204:	2300      	movs	r3, #0
 8007206:	4604      	mov	r4, r0
 8007208:	4608      	mov	r0, r1
 800720a:	4611      	mov	r1, r2
 800720c:	602b      	str	r3, [r5, #0]
 800720e:	f000 f8d7 	bl	80073c0 <_kill>
 8007212:	1c43      	adds	r3, r0, #1
 8007214:	d102      	bne.n	800721c <_kill_r+0x1c>
 8007216:	682b      	ldr	r3, [r5, #0]
 8007218:	b103      	cbz	r3, 800721c <_kill_r+0x1c>
 800721a:	6023      	str	r3, [r4, #0]
 800721c:	bd38      	pop	{r3, r4, r5, pc}
 800721e:	bf00      	nop
 8007220:	20000480 	.word	0x20000480

08007224 <_getpid_r>:
 8007224:	f000 b8bc 	b.w	80073a0 <_getpid>

08007228 <__sread>:
 8007228:	b510      	push	{r4, lr}
 800722a:	460c      	mov	r4, r1
 800722c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007230:	f000 f894 	bl	800735c <_read_r>
 8007234:	2800      	cmp	r0, #0
 8007236:	bfab      	itete	ge
 8007238:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800723a:	89a3      	ldrhlt	r3, [r4, #12]
 800723c:	181b      	addge	r3, r3, r0
 800723e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007242:	bfac      	ite	ge
 8007244:	6563      	strge	r3, [r4, #84]	; 0x54
 8007246:	81a3      	strhlt	r3, [r4, #12]
 8007248:	bd10      	pop	{r4, pc}

0800724a <__swrite>:
 800724a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800724e:	461f      	mov	r7, r3
 8007250:	898b      	ldrh	r3, [r1, #12]
 8007252:	05db      	lsls	r3, r3, #23
 8007254:	4605      	mov	r5, r0
 8007256:	460c      	mov	r4, r1
 8007258:	4616      	mov	r6, r2
 800725a:	d505      	bpl.n	8007268 <__swrite+0x1e>
 800725c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007260:	2302      	movs	r3, #2
 8007262:	2200      	movs	r2, #0
 8007264:	f000 f868 	bl	8007338 <_lseek_r>
 8007268:	89a3      	ldrh	r3, [r4, #12]
 800726a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800726e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007272:	81a3      	strh	r3, [r4, #12]
 8007274:	4632      	mov	r2, r6
 8007276:	463b      	mov	r3, r7
 8007278:	4628      	mov	r0, r5
 800727a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800727e:	f000 b817 	b.w	80072b0 <_write_r>

08007282 <__sseek>:
 8007282:	b510      	push	{r4, lr}
 8007284:	460c      	mov	r4, r1
 8007286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800728a:	f000 f855 	bl	8007338 <_lseek_r>
 800728e:	1c43      	adds	r3, r0, #1
 8007290:	89a3      	ldrh	r3, [r4, #12]
 8007292:	bf15      	itete	ne
 8007294:	6560      	strne	r0, [r4, #84]	; 0x54
 8007296:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800729a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800729e:	81a3      	strheq	r3, [r4, #12]
 80072a0:	bf18      	it	ne
 80072a2:	81a3      	strhne	r3, [r4, #12]
 80072a4:	bd10      	pop	{r4, pc}

080072a6 <__sclose>:
 80072a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072aa:	f000 b813 	b.w	80072d4 <_close_r>
	...

080072b0 <_write_r>:
 80072b0:	b538      	push	{r3, r4, r5, lr}
 80072b2:	4d07      	ldr	r5, [pc, #28]	; (80072d0 <_write_r+0x20>)
 80072b4:	4604      	mov	r4, r0
 80072b6:	4608      	mov	r0, r1
 80072b8:	4611      	mov	r1, r2
 80072ba:	2200      	movs	r2, #0
 80072bc:	602a      	str	r2, [r5, #0]
 80072be:	461a      	mov	r2, r3
 80072c0:	f000 f8a4 	bl	800740c <_write>
 80072c4:	1c43      	adds	r3, r0, #1
 80072c6:	d102      	bne.n	80072ce <_write_r+0x1e>
 80072c8:	682b      	ldr	r3, [r5, #0]
 80072ca:	b103      	cbz	r3, 80072ce <_write_r+0x1e>
 80072cc:	6023      	str	r3, [r4, #0]
 80072ce:	bd38      	pop	{r3, r4, r5, pc}
 80072d0:	20000480 	.word	0x20000480

080072d4 <_close_r>:
 80072d4:	b538      	push	{r3, r4, r5, lr}
 80072d6:	4d06      	ldr	r5, [pc, #24]	; (80072f0 <_close_r+0x1c>)
 80072d8:	2300      	movs	r3, #0
 80072da:	4604      	mov	r4, r0
 80072dc:	4608      	mov	r0, r1
 80072de:	602b      	str	r3, [r5, #0]
 80072e0:	f000 f84e 	bl	8007380 <_close>
 80072e4:	1c43      	adds	r3, r0, #1
 80072e6:	d102      	bne.n	80072ee <_close_r+0x1a>
 80072e8:	682b      	ldr	r3, [r5, #0]
 80072ea:	b103      	cbz	r3, 80072ee <_close_r+0x1a>
 80072ec:	6023      	str	r3, [r4, #0]
 80072ee:	bd38      	pop	{r3, r4, r5, pc}
 80072f0:	20000480 	.word	0x20000480

080072f4 <_fstat_r>:
 80072f4:	b538      	push	{r3, r4, r5, lr}
 80072f6:	4d07      	ldr	r5, [pc, #28]	; (8007314 <_fstat_r+0x20>)
 80072f8:	2300      	movs	r3, #0
 80072fa:	4604      	mov	r4, r0
 80072fc:	4608      	mov	r0, r1
 80072fe:	4611      	mov	r1, r2
 8007300:	602b      	str	r3, [r5, #0]
 8007302:	f000 f845 	bl	8007390 <_fstat>
 8007306:	1c43      	adds	r3, r0, #1
 8007308:	d102      	bne.n	8007310 <_fstat_r+0x1c>
 800730a:	682b      	ldr	r3, [r5, #0]
 800730c:	b103      	cbz	r3, 8007310 <_fstat_r+0x1c>
 800730e:	6023      	str	r3, [r4, #0]
 8007310:	bd38      	pop	{r3, r4, r5, pc}
 8007312:	bf00      	nop
 8007314:	20000480 	.word	0x20000480

08007318 <_isatty_r>:
 8007318:	b538      	push	{r3, r4, r5, lr}
 800731a:	4d06      	ldr	r5, [pc, #24]	; (8007334 <_isatty_r+0x1c>)
 800731c:	2300      	movs	r3, #0
 800731e:	4604      	mov	r4, r0
 8007320:	4608      	mov	r0, r1
 8007322:	602b      	str	r3, [r5, #0]
 8007324:	f000 f844 	bl	80073b0 <_isatty>
 8007328:	1c43      	adds	r3, r0, #1
 800732a:	d102      	bne.n	8007332 <_isatty_r+0x1a>
 800732c:	682b      	ldr	r3, [r5, #0]
 800732e:	b103      	cbz	r3, 8007332 <_isatty_r+0x1a>
 8007330:	6023      	str	r3, [r4, #0]
 8007332:	bd38      	pop	{r3, r4, r5, pc}
 8007334:	20000480 	.word	0x20000480

08007338 <_lseek_r>:
 8007338:	b538      	push	{r3, r4, r5, lr}
 800733a:	4d07      	ldr	r5, [pc, #28]	; (8007358 <_lseek_r+0x20>)
 800733c:	4604      	mov	r4, r0
 800733e:	4608      	mov	r0, r1
 8007340:	4611      	mov	r1, r2
 8007342:	2200      	movs	r2, #0
 8007344:	602a      	str	r2, [r5, #0]
 8007346:	461a      	mov	r2, r3
 8007348:	f000 f842 	bl	80073d0 <_lseek>
 800734c:	1c43      	adds	r3, r0, #1
 800734e:	d102      	bne.n	8007356 <_lseek_r+0x1e>
 8007350:	682b      	ldr	r3, [r5, #0]
 8007352:	b103      	cbz	r3, 8007356 <_lseek_r+0x1e>
 8007354:	6023      	str	r3, [r4, #0]
 8007356:	bd38      	pop	{r3, r4, r5, pc}
 8007358:	20000480 	.word	0x20000480

0800735c <_read_r>:
 800735c:	b538      	push	{r3, r4, r5, lr}
 800735e:	4d07      	ldr	r5, [pc, #28]	; (800737c <_read_r+0x20>)
 8007360:	4604      	mov	r4, r0
 8007362:	4608      	mov	r0, r1
 8007364:	4611      	mov	r1, r2
 8007366:	2200      	movs	r2, #0
 8007368:	602a      	str	r2, [r5, #0]
 800736a:	461a      	mov	r2, r3
 800736c:	f000 f838 	bl	80073e0 <_read>
 8007370:	1c43      	adds	r3, r0, #1
 8007372:	d102      	bne.n	800737a <_read_r+0x1e>
 8007374:	682b      	ldr	r3, [r5, #0]
 8007376:	b103      	cbz	r3, 800737a <_read_r+0x1e>
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	bd38      	pop	{r3, r4, r5, pc}
 800737c:	20000480 	.word	0x20000480

08007380 <_close>:
 8007380:	4b02      	ldr	r3, [pc, #8]	; (800738c <_close+0xc>)
 8007382:	2258      	movs	r2, #88	; 0x58
 8007384:	601a      	str	r2, [r3, #0]
 8007386:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800738a:	4770      	bx	lr
 800738c:	20000480 	.word	0x20000480

08007390 <_fstat>:
 8007390:	4b02      	ldr	r3, [pc, #8]	; (800739c <_fstat+0xc>)
 8007392:	2258      	movs	r2, #88	; 0x58
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800739a:	4770      	bx	lr
 800739c:	20000480 	.word	0x20000480

080073a0 <_getpid>:
 80073a0:	4b02      	ldr	r3, [pc, #8]	; (80073ac <_getpid+0xc>)
 80073a2:	2258      	movs	r2, #88	; 0x58
 80073a4:	601a      	str	r2, [r3, #0]
 80073a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073aa:	4770      	bx	lr
 80073ac:	20000480 	.word	0x20000480

080073b0 <_isatty>:
 80073b0:	4b02      	ldr	r3, [pc, #8]	; (80073bc <_isatty+0xc>)
 80073b2:	2258      	movs	r2, #88	; 0x58
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	2000      	movs	r0, #0
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	20000480 	.word	0x20000480

080073c0 <_kill>:
 80073c0:	4b02      	ldr	r3, [pc, #8]	; (80073cc <_kill+0xc>)
 80073c2:	2258      	movs	r2, #88	; 0x58
 80073c4:	601a      	str	r2, [r3, #0]
 80073c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073ca:	4770      	bx	lr
 80073cc:	20000480 	.word	0x20000480

080073d0 <_lseek>:
 80073d0:	4b02      	ldr	r3, [pc, #8]	; (80073dc <_lseek+0xc>)
 80073d2:	2258      	movs	r2, #88	; 0x58
 80073d4:	601a      	str	r2, [r3, #0]
 80073d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073da:	4770      	bx	lr
 80073dc:	20000480 	.word	0x20000480

080073e0 <_read>:
 80073e0:	4b02      	ldr	r3, [pc, #8]	; (80073ec <_read+0xc>)
 80073e2:	2258      	movs	r2, #88	; 0x58
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073ea:	4770      	bx	lr
 80073ec:	20000480 	.word	0x20000480

080073f0 <_sbrk>:
 80073f0:	4a04      	ldr	r2, [pc, #16]	; (8007404 <_sbrk+0x14>)
 80073f2:	6811      	ldr	r1, [r2, #0]
 80073f4:	4603      	mov	r3, r0
 80073f6:	b909      	cbnz	r1, 80073fc <_sbrk+0xc>
 80073f8:	4903      	ldr	r1, [pc, #12]	; (8007408 <_sbrk+0x18>)
 80073fa:	6011      	str	r1, [r2, #0]
 80073fc:	6810      	ldr	r0, [r2, #0]
 80073fe:	4403      	add	r3, r0
 8007400:	6013      	str	r3, [r2, #0]
 8007402:	4770      	bx	lr
 8007404:	20000488 	.word	0x20000488
 8007408:	20000490 	.word	0x20000490

0800740c <_write>:
 800740c:	4b02      	ldr	r3, [pc, #8]	; (8007418 <_write+0xc>)
 800740e:	2258      	movs	r2, #88	; 0x58
 8007410:	601a      	str	r2, [r3, #0]
 8007412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007416:	4770      	bx	lr
 8007418:	20000480 	.word	0x20000480

0800741c <_exit>:
 800741c:	e7fe      	b.n	800741c <_exit>
	...

08007420 <_init>:
 8007420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007422:	bf00      	nop
 8007424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007426:	bc08      	pop	{r3}
 8007428:	469e      	mov	lr, r3
 800742a:	4770      	bx	lr

0800742c <_fini>:
 800742c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742e:	bf00      	nop
 8007430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007432:	bc08      	pop	{r3}
 8007434:	469e      	mov	lr, r3
 8007436:	4770      	bx	lr
