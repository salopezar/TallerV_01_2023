
pruebaJoystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  08007748  08007748  00017748  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c24  08007c24  00020218  2**0
                  CONTENTS
  4 .ARM          00000000  08007c24  08007c24  00020218  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c24  08007c24  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c24  08007c24  00017c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c28  08007c28  00017c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08007c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000218  08007e44  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  08007e44  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003b04  00000000  00000000  00020242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c56  00000000  00000000  00023d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000290  00000000  00000000  000249a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000218  00000000  00000000  00024c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fbb9  00000000  00000000  00024e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003fed  00000000  00000000  00034a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055de1  00000000  00000000  000389ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008e7cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001eec  00000000  00000000  0008e820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0009070c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  000907d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007730 	.word	0x08007730

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	08007730 	.word	0x08007730

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	4605      	mov	r5, r0
 8000c9c:	460c      	mov	r4, r1
 8000c9e:	4628      	mov	r0, r5
 8000ca0:	4621      	mov	r1, r4
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f7ff ff21 	bl	8000aec <__aeabi_dcmplt>
 8000caa:	b928      	cbnz	r0, 8000cb8 <__aeabi_d2lz+0x20>
 8000cac:	4628      	mov	r0, r5
 8000cae:	4621      	mov	r1, r4
 8000cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb4:	f000 b80a 	b.w	8000ccc <__aeabi_d2ulz>
 8000cb8:	4628      	mov	r0, r5
 8000cba:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000cbe:	f000 f805 	bl	8000ccc <__aeabi_d2ulz>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	bd38      	pop	{r3, r4, r5, pc}
 8000cca:	bf00      	nop

08000ccc <__aeabi_d2ulz>:
 8000ccc:	b5d0      	push	{r4, r6, r7, lr}
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__aeabi_d2ulz+0x34>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4606      	mov	r6, r0
 8000cd4:	460f      	mov	r7, r1
 8000cd6:	f7ff fc97 	bl	8000608 <__aeabi_dmul>
 8000cda:	f7ff ff6d 	bl	8000bb8 <__aeabi_d2uiz>
 8000cde:	4604      	mov	r4, r0
 8000ce0:	f7ff fc18 	bl	8000514 <__aeabi_ui2d>
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <__aeabi_d2ulz+0x38>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f7ff fc8e 	bl	8000608 <__aeabi_dmul>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4630      	mov	r0, r6
 8000cf2:	4639      	mov	r1, r7
 8000cf4:	f7ff fad0 	bl	8000298 <__aeabi_dsub>
 8000cf8:	f7ff ff5e 	bl	8000bb8 <__aeabi_d2uiz>
 8000cfc:	4621      	mov	r1, r4
 8000cfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000d00:	3df00000 	.word	0x3df00000
 8000d04:	41f00000 	.word	0x41f00000

08000d08 <main>:
char userMsg[64] = {0};
unsigned int firstParameter = 0;
unsigned int secondParameter = 0;
unsigned int thirdparameter = 0;
/* Función principal del programa */
int main(void){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af02      	add	r7, sp, #8

	/* inicialización de todos los elementos del sistema */
	initHardware();
 8000d0e:	f000 f835 	bl	8000d7c <initHardware>
	writeMsg(&USART2Comm, bufferData);
 8000d12:	4911      	ldr	r1, [pc, #68]	; (8000d58 <main+0x50>)
 8000d14:	4811      	ldr	r0, [pc, #68]	; (8000d5c <main+0x54>)
 8000d16:	f001 fcae 	bl	8002676 <writeMsg>
	/* Loop infinito */
	while(1){
		duttyCicleReturn();
 8000d1a:	f000 fabf 	bl	800129c <duttyCicleReturn>
		pwmSignalSwitch();
 8000d1e:	f000 fb05 	bl	800132c <pwmSignalSwitch>
		if(flagADC){
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <main+0x58>)
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d0f7      	beq.n	8000d1a <main+0x12>
			sprintf(buffer, "Channel X = %u , Channel Y = %u, Luxometer = %u \n", dataADCChannel0[0], dataADCChannel1[0], dataADCChannel2[0]);
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <main+0x5c>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <main+0x60>)
 8000d30:	6819      	ldr	r1, [r3, #0]
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <main+0x64>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	490d      	ldr	r1, [pc, #52]	; (8000d70 <main+0x68>)
 8000d3c:	480d      	ldr	r0, [pc, #52]	; (8000d74 <main+0x6c>)
 8000d3e:	f002 fef9 	bl	8003b34 <siprintf>
			writeMsg(&USART2Comm, buffer);
 8000d42:	490c      	ldr	r1, [pc, #48]	; (8000d74 <main+0x6c>)
 8000d44:	4805      	ldr	r0, [pc, #20]	; (8000d5c <main+0x54>)
 8000d46:	f001 fc96 	bl	8002676 <writeMsg>
			rxData = 0;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <main+0x70>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
			flagADC = 0;
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <main+0x58>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	801a      	strh	r2, [r3, #0]
		duttyCicleReturn();
 8000d56:	e7e0      	b.n	8000d1a <main+0x12>
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	200002e4 	.word	0x200002e4
 8000d60:	2000048e 	.word	0x2000048e
 8000d64:	20000480 	.word	0x20000480
 8000d68:	20000484 	.word	0x20000484
 8000d6c:	20000488 	.word	0x20000488
 8000d70:	08007748 	.word	0x08007748
 8000d74:	2000043c 	.word	0x2000043c
 8000d78:	2000048c 	.word	0x2000048c

08000d7c <initHardware>:
	}
	return 0;
}// Final del main

// Función donde se configuran los pimsgToSendnes en general.
void initHardware(void){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0

	// Se desactiva el reloj HSE porque PH0 está conectado a un oscilador HSE.
	RCC->CR &= ~(RCC_CR_HSEON);
 8000d80:	4bae      	ldr	r3, [pc, #696]	; (800103c <initHardware+0x2c0>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4aad      	ldr	r2, [pc, #692]	; (800103c <initHardware+0x2c0>)
 8000d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d8a:	6013      	str	r3, [r2, #0]

	handlerStateLED.pGPIOx                               	= GPIOH;
 8000d8c:	4bac      	ldr	r3, [pc, #688]	; (8001040 <initHardware+0x2c4>)
 8000d8e:	4aad      	ldr	r2, [pc, #692]	; (8001044 <initHardware+0x2c8>)
 8000d90:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber 			= PIN_1;
 8000d92:	4bab      	ldr	r3, [pc, #684]	; (8001040 <initHardware+0x2c4>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode 			= GPIO_MODE_OUT;
 8000d98:	4ba9      	ldr	r3, [pc, #676]	; (8001040 <initHardware+0x2c4>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType 			= GPIO_OTYPE_PUSHPULL;
 8000d9e:	4ba8      	ldr	r3, [pc, #672]	; (8001040 <initHardware+0x2c4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed 			= GPIO_OSPEED_FAST;
 8000da4:	4ba6      	ldr	r3, [pc, #664]	; (8001040 <initHardware+0x2c4>)
 8000da6:	2202      	movs	r2, #2
 8000da8:	719a      	strb	r2, [r3, #6]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl 		= GPIO_PUPDR_NOTHING;
 8000daa:	4ba5      	ldr	r3, [pc, #660]	; (8001040 <initHardware+0x2c4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	71da      	strb	r2, [r3, #7]
	GPIO_Config(&handlerStateLED);
 8000db0:	48a3      	ldr	r0, [pc, #652]	; (8001040 <initHardware+0x2c4>)
 8000db2:	f000 fedb 	bl	8001b6c <GPIO_Config>

	/* Configuración del TIM2 para que haga un blinky cada 250 ms */
	handlerBlinkyTimer.ptrTIMx 								= TIM5;
 8000db6:	4ba4      	ldr	r3, [pc, #656]	; (8001048 <initHardware+0x2cc>)
 8000db8:	4aa4      	ldr	r2, [pc, #656]	; (800104c <initHardware+0x2d0>)
 8000dba:	601a      	str	r2, [r3, #0]
	handlerBlinkyTimer.TIMx_Config.TIMx_mode 				= BTIMER_MODE_UP;
 8000dbc:	4ba2      	ldr	r3, [pc, #648]	; (8001048 <initHardware+0x2cc>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	711a      	strb	r2, [r3, #4]
	handlerBlinkyTimer.TIMx_Config.TIMx_interruptEnable 	= BTIMER_INTERRUPT_ENABLE;
 8000dc2:	4ba1      	ldr	r3, [pc, #644]	; (8001048 <initHardware+0x2cc>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	741a      	strb	r2, [r3, #16]
	BasicTimer_Config(&handlerBlinkyTimer);
 8000dc8:	489f      	ldr	r0, [pc, #636]	; (8001048 <initHardware+0x2cc>)
 8000dca:	f000 fdd3 	bl	8001974 <BasicTimer_Config>

	/* Configuración del USART */
	// Transmisión
	handlerUSARTPINTX.pGPIOx  							= GPIOA;
 8000dce:	4ba0      	ldr	r3, [pc, #640]	; (8001050 <initHardware+0x2d4>)
 8000dd0:	4aa0      	ldr	r2, [pc, #640]	; (8001054 <initHardware+0x2d8>)
 8000dd2:	601a      	str	r2, [r3, #0]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinNumber 	= PIN_2;
 8000dd4:	4b9e      	ldr	r3, [pc, #632]	; (8001050 <initHardware+0x2d4>)
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	711a      	strb	r2, [r3, #4]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFN;
 8000dda:	4b9d      	ldr	r3, [pc, #628]	; (8001050 <initHardware+0x2d4>)
 8000ddc:	2202      	movs	r2, #2
 8000dde:	715a      	strb	r2, [r3, #5]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinAltFunMode = AF7;
 8000de0:	4b9b      	ldr	r3, [pc, #620]	; (8001050 <initHardware+0x2d4>)
 8000de2:	2207      	movs	r2, #7
 8000de4:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerUSARTPINTX);
 8000de6:	489a      	ldr	r0, [pc, #616]	; (8001050 <initHardware+0x2d4>)
 8000de8:	f000 fec0 	bl	8001b6c <GPIO_Config>

	// Recepción
	handlerUSARTPINRX.pGPIOx 						 	= GPIOA;
 8000dec:	4b9a      	ldr	r3, [pc, #616]	; (8001058 <initHardware+0x2dc>)
 8000dee:	4a99      	ldr	r2, [pc, #612]	; (8001054 <initHardware+0x2d8>)
 8000df0:	601a      	str	r2, [r3, #0]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinNumber		= PIN_3;
 8000df2:	4b99      	ldr	r3, [pc, #612]	; (8001058 <initHardware+0x2dc>)
 8000df4:	2203      	movs	r2, #3
 8000df6:	711a      	strb	r2, [r3, #4]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFN;
 8000df8:	4b97      	ldr	r3, [pc, #604]	; (8001058 <initHardware+0x2dc>)
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	715a      	strb	r2, [r3, #5]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinAltFunMode = AF7;
 8000dfe:	4b96      	ldr	r3, [pc, #600]	; (8001058 <initHardware+0x2dc>)
 8000e00:	2207      	movs	r2, #7
 8000e02:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerUSARTPINRX);
 8000e04:	4894      	ldr	r0, [pc, #592]	; (8001058 <initHardware+0x2dc>)
 8000e06:	f000 feb1 	bl	8001b6c <GPIO_Config>

	// Para el USART 6
	USART2Comm.ptrUSARTx 					= USART2;
 8000e0a:	4b94      	ldr	r3, [pc, #592]	; (800105c <initHardware+0x2e0>)
 8000e0c:	4a94      	ldr	r2, [pc, #592]	; (8001060 <initHardware+0x2e4>)
 8000e0e:	601a      	str	r2, [r3, #0]
	USART2Comm.USART_Config.USART_baudrate 	= USART_BAUDRATE_115200;
 8000e10:	4b92      	ldr	r3, [pc, #584]	; (800105c <initHardware+0x2e0>)
 8000e12:	2202      	movs	r2, #2
 8000e14:	715a      	strb	r2, [r3, #5]
	USART2Comm.USART_Config.USART_datasize 	= USART_DATASIZE_8BIT;
 8000e16:	4b91      	ldr	r3, [pc, #580]	; (800105c <initHardware+0x2e0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	719a      	strb	r2, [r3, #6]
	USART2Comm.USART_Config.USART_parity 	= USART_PARITY_NONE;
 8000e1c:	4b8f      	ldr	r3, [pc, #572]	; (800105c <initHardware+0x2e0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	71da      	strb	r2, [r3, #7]
	USART2Comm.USART_Config.USART_mode 		= USART_MODE_RXTX;
 8000e22:	4b8e      	ldr	r3, [pc, #568]	; (800105c <initHardware+0x2e0>)
 8000e24:	2202      	movs	r2, #2
 8000e26:	711a      	strb	r2, [r3, #4]
	USART2Comm.USART_Config.USART_stopbits 	= USART_STOPBIT_1;
 8000e28:	4b8c      	ldr	r3, [pc, #560]	; (800105c <initHardware+0x2e0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	721a      	strb	r2, [r3, #8]
	USART2Comm.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;
 8000e2e:	4b8b      	ldr	r3, [pc, #556]	; (800105c <initHardware+0x2e0>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	725a      	strb	r2, [r3, #9]

	// Se carga lo hecho sobre el USART
	USART_Config(&USART2Comm);
 8000e34:	4889      	ldr	r0, [pc, #548]	; (800105c <initHardware+0x2e0>)
 8000e36:	f001 fa01 	bl	800223c <USART_Config>

	/* Configuración ADC */
	// Cargando la configuración para la conversación ADC
	adcConfig.dataAlignment			= ADC_ALIGNMENT_RIGHT;
 8000e3a:	4b8a      	ldr	r3, [pc, #552]	; (8001064 <initHardware+0x2e8>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	711a      	strb	r2, [r3, #4]
	adcConfig.resolution			= ADC_RESOLUTION_12_BIT;
 8000e40:	4b88      	ldr	r3, [pc, #544]	; (8001064 <initHardware+0x2e8>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	705a      	strb	r2, [r3, #1]
	adcConfig.samplingPeriod		= ADC_SAMPLING_PERIOD_28_CYCLES;
 8000e46:	4b87      	ldr	r3, [pc, #540]	; (8001064 <initHardware+0x2e8>)
 8000e48:	2202      	movs	r2, #2
 8000e4a:	805a      	strh	r2, [r3, #2]
	adcConfig.AdcEventType			= TIMER_ADC_EVENT;
 8000e4c:	4b85      	ldr	r3, [pc, #532]	; (8001064 <initHardware+0x2e8>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	721a      	strb	r2, [r3, #8]
	adcConfig.AdcChannelEvent		= TIM5_CH3;
 8000e52:	4b84      	ldr	r3, [pc, #528]	; (8001064 <initHardware+0x2e8>)
 8000e54:	220a      	movs	r2, #10
 8000e56:	725a      	strb	r2, [r3, #9]
	adcConfig.adcMultiChannel[0] 	= ADC_CHANNEL_1;
 8000e58:	4b82      	ldr	r3, [pc, #520]	; (8001064 <initHardware+0x2e8>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	729a      	strb	r2, [r3, #10]
	adcConfig.adcMultiChannel[1]	= ADC_CHANNEL_4;
 8000e5e:	4b81      	ldr	r3, [pc, #516]	; (8001064 <initHardware+0x2e8>)
 8000e60:	2204      	movs	r2, #4
 8000e62:	72da      	strb	r2, [r3, #11]
	adcConfig.adcMultiChannel[2]	= ADC_CHANNEL_0;
 8000e64:	4b7f      	ldr	r3, [pc, #508]	; (8001064 <initHardware+0x2e8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	731a      	strb	r2, [r3, #12]
	adcMultiChannel(&adcConfig, 3);
 8000e6a:	2103      	movs	r1, #3
 8000e6c:	487d      	ldr	r0, [pc, #500]	; (8001064 <initHardware+0x2e8>)
 8000e6e:	f001 fdff 	bl	8002a70 <adcMultiChannel>
	adcConfigEvents(&adcConfig);
 8000e72:	487c      	ldr	r0, [pc, #496]	; (8001064 <initHardware+0x2e8>)
 8000e74:	f001 fd70 	bl	8002958 <adcConfigEvents>

	// handler PWM
	handlerPWMprueba.ptrTIMx           	  =   TIM5;
 8000e78:	4b7b      	ldr	r3, [pc, #492]	; (8001068 <initHardware+0x2ec>)
 8000e7a:	4a74      	ldr	r2, [pc, #464]	; (800104c <initHardware+0x2d0>)
 8000e7c:	601a      	str	r2, [r3, #0]
	handlerPWMprueba.config.channel       =   PWM_CHANNEL_3;
 8000e7e:	4b7a      	ldr	r3, [pc, #488]	; (8001068 <initHardware+0x2ec>)
 8000e80:	2202      	movs	r2, #2
 8000e82:	711a      	strb	r2, [r3, #4]
	handlerPWMprueba.config.duttyCicle    =   10000;
 8000e84:	4b78      	ldr	r3, [pc, #480]	; (8001068 <initHardware+0x2ec>)
 8000e86:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e8a:	81da      	strh	r2, [r3, #14]
	handlerPWMprueba.config.periodo       =   20000;
 8000e8c:	4b76      	ldr	r3, [pc, #472]	; (8001068 <initHardware+0x2ec>)
 8000e8e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000e92:	819a      	strh	r2, [r3, #12]
	handlerPWMprueba.config.prescaler     =   160;
 8000e94:	4b74      	ldr	r3, [pc, #464]	; (8001068 <initHardware+0x2ec>)
 8000e96:	22a0      	movs	r2, #160	; 0xa0
 8000e98:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWMprueba);
 8000e9a:	4873      	ldr	r0, [pc, #460]	; (8001068 <initHardware+0x2ec>)
 8000e9c:	f000 ffce 	bl	8001e3c <pwm_Config>
	enableOutput(&handlerPWMprueba);
 8000ea0:	4871      	ldr	r0, [pc, #452]	; (8001068 <initHardware+0x2ec>)
 8000ea2:	f001 f8a3 	bl	8001fec <enableOutput>
	startPwmSignal(&handlerPWMprueba);
 8000ea6:	4870      	ldr	r0, [pc, #448]	; (8001068 <initHardware+0x2ec>)
 8000ea8:	f001 f88e 	bl	8001fc8 <startPwmSignal>

	// GPIO TIM 3 CC4
	HandlerTIM5PWM_1.pGPIOx          					= GPIOB;
 8000eac:	4b6f      	ldr	r3, [pc, #444]	; (800106c <initHardware+0x2f0>)
 8000eae:	4a70      	ldr	r2, [pc, #448]	; (8001070 <initHardware+0x2f4>)
 8000eb0:	601a      	str	r2, [r3, #0]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinNumber  	= PIN_1;
 8000eb2:	4b6e      	ldr	r3, [pc, #440]	; (800106c <initHardware+0x2f0>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	711a      	strb	r2, [r3, #4]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8000eb8:	4b6c      	ldr	r3, [pc, #432]	; (800106c <initHardware+0x2f0>)
 8000eba:	2202      	movs	r2, #2
 8000ebc:	715a      	strb	r2, [r3, #5]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8000ebe:	4b6b      	ldr	r3, [pc, #428]	; (800106c <initHardware+0x2f0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	721a      	strb	r2, [r3, #8]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000ec4:	4b69      	ldr	r3, [pc, #420]	; (800106c <initHardware+0x2f0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	71da      	strb	r2, [r3, #7]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8000eca:	4b68      	ldr	r3, [pc, #416]	; (800106c <initHardware+0x2f0>)
 8000ecc:	2202      	movs	r2, #2
 8000ece:	719a      	strb	r2, [r3, #6]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000ed0:	4b66      	ldr	r3, [pc, #408]	; (800106c <initHardware+0x2f0>)
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	725a      	strb	r2, [r3, #9]
	GPIO_WritePin(&HandlerTIM5PWM_1, 0);
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4864      	ldr	r0, [pc, #400]	; (800106c <initHardware+0x2f0>)
 8000eda:	f000 ff6f 	bl	8001dbc <GPIO_WritePin>
	GPIO_Config(&HandlerTIM5PWM_1);
 8000ede:	4863      	ldr	r0, [pc, #396]	; (800106c <initHardware+0x2f0>)
 8000ee0:	f000 fe44 	bl	8001b6c <GPIO_Config>
	// Izquierda
	handlerPWM_1.ptrTIMx           	  =   TIM3;
 8000ee4:	4b63      	ldr	r3, [pc, #396]	; (8001074 <initHardware+0x2f8>)
 8000ee6:	4a64      	ldr	r2, [pc, #400]	; (8001078 <initHardware+0x2fc>)
 8000ee8:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel       =   PWM_CHANNEL_4;
 8000eea:	4b62      	ldr	r3, [pc, #392]	; (8001074 <initHardware+0x2f8>)
 8000eec:	2203      	movs	r2, #3
 8000eee:	711a      	strb	r2, [r3, #4]
	handlerPWM_1.config.duttyCicle    =   10000;
 8000ef0:	4b60      	ldr	r3, [pc, #384]	; (8001074 <initHardware+0x2f8>)
 8000ef2:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ef6:	81da      	strh	r2, [r3, #14]
	handlerPWM_1.config.periodo       =   25000;
 8000ef8:	4b5e      	ldr	r3, [pc, #376]	; (8001074 <initHardware+0x2f8>)
 8000efa:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000efe:	819a      	strh	r2, [r3, #12]
	handlerPWM_1.config.prescaler     =   160;
 8000f00:	4b5c      	ldr	r3, [pc, #368]	; (8001074 <initHardware+0x2f8>)
 8000f02:	22a0      	movs	r2, #160	; 0xa0
 8000f04:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_1);
 8000f06:	485b      	ldr	r0, [pc, #364]	; (8001074 <initHardware+0x2f8>)
 8000f08:	f000 ff98 	bl	8001e3c <pwm_Config>

	// GPIO TIM 3 CC3
	HandlerTIM3PWM_2.pGPIOx          					= GPIOB;
 8000f0c:	4b5b      	ldr	r3, [pc, #364]	; (800107c <initHardware+0x300>)
 8000f0e:	4a58      	ldr	r2, [pc, #352]	; (8001070 <initHardware+0x2f4>)
 8000f10:	601a      	str	r2, [r3, #0]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinNumber  	= PIN_0;
 8000f12:	4b5a      	ldr	r3, [pc, #360]	; (800107c <initHardware+0x300>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	711a      	strb	r2, [r3, #4]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8000f18:	4b58      	ldr	r3, [pc, #352]	; (800107c <initHardware+0x300>)
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	715a      	strb	r2, [r3, #5]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8000f1e:	4b57      	ldr	r3, [pc, #348]	; (800107c <initHardware+0x300>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	721a      	strb	r2, [r3, #8]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f24:	4b55      	ldr	r3, [pc, #340]	; (800107c <initHardware+0x300>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	71da      	strb	r2, [r3, #7]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8000f2a:	4b54      	ldr	r3, [pc, #336]	; (800107c <initHardware+0x300>)
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	719a      	strb	r2, [r3, #6]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000f30:	4b52      	ldr	r3, [pc, #328]	; (800107c <initHardware+0x300>)
 8000f32:	2202      	movs	r2, #2
 8000f34:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&HandlerTIM3PWM_2);
 8000f36:	4851      	ldr	r0, [pc, #324]	; (800107c <initHardware+0x300>)
 8000f38:	f000 fe18 	bl	8001b6c <GPIO_Config>
	GPIO_WritePin(&HandlerTIM3PWM_2, 0);
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	484f      	ldr	r0, [pc, #316]	; (800107c <initHardware+0x300>)
 8000f40:	f000 ff3c 	bl	8001dbc <GPIO_WritePin>

	// Derecha
	handlerPWM_2.ptrTIMx           	  =   TIM3;
 8000f44:	4b4e      	ldr	r3, [pc, #312]	; (8001080 <initHardware+0x304>)
 8000f46:	4a4c      	ldr	r2, [pc, #304]	; (8001078 <initHardware+0x2fc>)
 8000f48:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel       =   PWM_CHANNEL_3;
 8000f4a:	4b4d      	ldr	r3, [pc, #308]	; (8001080 <initHardware+0x304>)
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	711a      	strb	r2, [r3, #4]
	handlerPWM_2.config.duttyCicle    =   10000;
 8000f50:	4b4b      	ldr	r3, [pc, #300]	; (8001080 <initHardware+0x304>)
 8000f52:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f56:	81da      	strh	r2, [r3, #14]
	handlerPWM_2.config.periodo       =   25000;
 8000f58:	4b49      	ldr	r3, [pc, #292]	; (8001080 <initHardware+0x304>)
 8000f5a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000f5e:	819a      	strh	r2, [r3, #12]
	handlerPWM_2.config.prescaler     =   160;
 8000f60:	4b47      	ldr	r3, [pc, #284]	; (8001080 <initHardware+0x304>)
 8000f62:	22a0      	movs	r2, #160	; 0xa0
 8000f64:	609a      	str	r2, [r3, #8]
//	handlerPWM_2.config.polarity      =   PWM_POLARITY_ACTIVE_LOW;
	pwm_Config(&handlerPWM_2);
 8000f66:	4846      	ldr	r0, [pc, #280]	; (8001080 <initHardware+0x304>)
 8000f68:	f000 ff68 	bl	8001e3c <pwm_Config>

	// GPIO TIM 3 CC1
	HandlerTIM3PWM_3.pGPIOx          					= GPIOA;
 8000f6c:	4b45      	ldr	r3, [pc, #276]	; (8001084 <initHardware+0x308>)
 8000f6e:	4a39      	ldr	r2, [pc, #228]	; (8001054 <initHardware+0x2d8>)
 8000f70:	601a      	str	r2, [r3, #0]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinNumber  	= PIN_6;
 8000f72:	4b44      	ldr	r3, [pc, #272]	; (8001084 <initHardware+0x308>)
 8000f74:	2206      	movs	r2, #6
 8000f76:	711a      	strb	r2, [r3, #4]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8000f78:	4b42      	ldr	r3, [pc, #264]	; (8001084 <initHardware+0x308>)
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	715a      	strb	r2, [r3, #5]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8000f7e:	4b41      	ldr	r3, [pc, #260]	; (8001084 <initHardware+0x308>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	721a      	strb	r2, [r3, #8]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f84:	4b3f      	ldr	r3, [pc, #252]	; (8001084 <initHardware+0x308>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	71da      	strb	r2, [r3, #7]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8000f8a:	4b3e      	ldr	r3, [pc, #248]	; (8001084 <initHardware+0x308>)
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	719a      	strb	r2, [r3, #6]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000f90:	4b3c      	ldr	r3, [pc, #240]	; (8001084 <initHardware+0x308>)
 8000f92:	2202      	movs	r2, #2
 8000f94:	725a      	strb	r2, [r3, #9]
	GPIO_WritePin(&HandlerTIM3PWM_3, 0);
 8000f96:	2100      	movs	r1, #0
 8000f98:	483a      	ldr	r0, [pc, #232]	; (8001084 <initHardware+0x308>)
 8000f9a:	f000 ff0f 	bl	8001dbc <GPIO_WritePin>
	GPIO_Config(&HandlerTIM3PWM_3);
 8000f9e:	4839      	ldr	r0, [pc, #228]	; (8001084 <initHardware+0x308>)
 8000fa0:	f000 fde4 	bl	8001b6c <GPIO_Config>
	// Arriba
	handlerPWM_3.ptrTIMx           	  =   TIM3;
 8000fa4:	4b38      	ldr	r3, [pc, #224]	; (8001088 <initHardware+0x30c>)
 8000fa6:	4a34      	ldr	r2, [pc, #208]	; (8001078 <initHardware+0x2fc>)
 8000fa8:	601a      	str	r2, [r3, #0]
	handlerPWM_3.config.channel       =   PWM_CHANNEL_1;
 8000faa:	4b37      	ldr	r3, [pc, #220]	; (8001088 <initHardware+0x30c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	711a      	strb	r2, [r3, #4]
	handlerPWM_3.config.duttyCicle    =   10000;
 8000fb0:	4b35      	ldr	r3, [pc, #212]	; (8001088 <initHardware+0x30c>)
 8000fb2:	f242 7210 	movw	r2, #10000	; 0x2710
 8000fb6:	81da      	strh	r2, [r3, #14]
	handlerPWM_3.config.periodo       =   25000;
 8000fb8:	4b33      	ldr	r3, [pc, #204]	; (8001088 <initHardware+0x30c>)
 8000fba:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000fbe:	819a      	strh	r2, [r3, #12]
	handlerPWM_3.config.prescaler     =   160;
 8000fc0:	4b31      	ldr	r3, [pc, #196]	; (8001088 <initHardware+0x30c>)
 8000fc2:	22a0      	movs	r2, #160	; 0xa0
 8000fc4:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_3);
 8000fc6:	4830      	ldr	r0, [pc, #192]	; (8001088 <initHardware+0x30c>)
 8000fc8:	f000 ff38 	bl	8001e3c <pwm_Config>

	// GPIO TIM 3 CC2
	HandlerTIM3PWM_4.pGPIOx          					= GPIOA;
 8000fcc:	4b2f      	ldr	r3, [pc, #188]	; (800108c <initHardware+0x310>)
 8000fce:	4a21      	ldr	r2, [pc, #132]	; (8001054 <initHardware+0x2d8>)
 8000fd0:	601a      	str	r2, [r3, #0]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinNumber  	= PIN_7;
 8000fd2:	4b2e      	ldr	r3, [pc, #184]	; (800108c <initHardware+0x310>)
 8000fd4:	2207      	movs	r2, #7
 8000fd6:	711a      	strb	r2, [r3, #4]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8000fd8:	4b2c      	ldr	r3, [pc, #176]	; (800108c <initHardware+0x310>)
 8000fda:	2202      	movs	r2, #2
 8000fdc:	715a      	strb	r2, [r3, #5]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8000fde:	4b2b      	ldr	r3, [pc, #172]	; (800108c <initHardware+0x310>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	721a      	strb	r2, [r3, #8]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000fe4:	4b29      	ldr	r3, [pc, #164]	; (800108c <initHardware+0x310>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	71da      	strb	r2, [r3, #7]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8000fea:	4b28      	ldr	r3, [pc, #160]	; (800108c <initHardware+0x310>)
 8000fec:	2202      	movs	r2, #2
 8000fee:	719a      	strb	r2, [r3, #6]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000ff0:	4b26      	ldr	r3, [pc, #152]	; (800108c <initHardware+0x310>)
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	725a      	strb	r2, [r3, #9]
	GPIO_WritePin(&HandlerTIM3PWM_4, 0);
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4824      	ldr	r0, [pc, #144]	; (800108c <initHardware+0x310>)
 8000ffa:	f000 fedf 	bl	8001dbc <GPIO_WritePin>
	GPIO_Config(&HandlerTIM3PWM_4);
 8000ffe:	4823      	ldr	r0, [pc, #140]	; (800108c <initHardware+0x310>)
 8001000:	f000 fdb4 	bl	8001b6c <GPIO_Config>
	// Abajo
	handlerPWM_4.ptrTIMx           	  =   TIM3;
 8001004:	4b22      	ldr	r3, [pc, #136]	; (8001090 <initHardware+0x314>)
 8001006:	4a1c      	ldr	r2, [pc, #112]	; (8001078 <initHardware+0x2fc>)
 8001008:	601a      	str	r2, [r3, #0]
	handlerPWM_4.config.channel       =   PWM_CHANNEL_2;
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <initHardware+0x314>)
 800100c:	2201      	movs	r2, #1
 800100e:	711a      	strb	r2, [r3, #4]
	handlerPWM_4.config.duttyCicle    =   10000;
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <initHardware+0x314>)
 8001012:	f242 7210 	movw	r2, #10000	; 0x2710
 8001016:	81da      	strh	r2, [r3, #14]
	handlerPWM_4.config.periodo       =   25000;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <initHardware+0x314>)
 800101a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800101e:	819a      	strh	r2, [r3, #12]
	handlerPWM_4.config.prescaler     =   160;
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <initHardware+0x314>)
 8001022:	22a0      	movs	r2, #160	; 0xa0
 8001024:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_4);
 8001026:	481a      	ldr	r0, [pc, #104]	; (8001090 <initHardware+0x314>)
 8001028:	f000 ff08 	bl	8001e3c <pwm_Config>

	// GPIO TIM 4 CC1
	HandlerTIM4PWM_5.pGPIOx          					= GPIOB;
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <initHardware+0x318>)
 800102e:	4a10      	ldr	r2, [pc, #64]	; (8001070 <initHardware+0x2f4>)
 8001030:	601a      	str	r2, [r3, #0]
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinNumber  	= PIN_6;
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <initHardware+0x318>)
 8001034:	2206      	movs	r2, #6
 8001036:	711a      	strb	r2, [r3, #4]
 8001038:	e02e      	b.n	8001098 <initHardware+0x31c>
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800
 8001040:	20000234 	.word	0x20000234
 8001044:	40021c00 	.word	0x40021c00
 8001048:	200002c4 	.word	0x200002c4
 800104c:	40000c00 	.word	0x40000c00
 8001050:	20000240 	.word	0x20000240
 8001054:	40020000 	.word	0x40020000
 8001058:	2000024c 	.word	0x2000024c
 800105c:	200002e4 	.word	0x200002e4
 8001060:	40004400 	.word	0x40004400
 8001064:	200002d8 	.word	0x200002d8
 8001068:	20000374 	.word	0x20000374
 800106c:	20000258 	.word	0x20000258
 8001070:	40020400 	.word	0x40020400
 8001074:	20000388 	.word	0x20000388
 8001078:	40000400 	.word	0x40000400
 800107c:	20000264 	.word	0x20000264
 8001080:	2000039c 	.word	0x2000039c
 8001084:	20000270 	.word	0x20000270
 8001088:	200003b0 	.word	0x200003b0
 800108c:	2000027c 	.word	0x2000027c
 8001090:	200003c4 	.word	0x200003c4
 8001094:	20000288 	.word	0x20000288
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8001098:	4b74      	ldr	r3, [pc, #464]	; (800126c <initHardware+0x4f0>)
 800109a:	2202      	movs	r2, #2
 800109c:	715a      	strb	r2, [r3, #5]
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 800109e:	4b73      	ldr	r3, [pc, #460]	; (800126c <initHardware+0x4f0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	721a      	strb	r2, [r3, #8]
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010a4:	4b71      	ldr	r3, [pc, #452]	; (800126c <initHardware+0x4f0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	71da      	strb	r2, [r3, #7]
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 80010aa:	4b70      	ldr	r3, [pc, #448]	; (800126c <initHardware+0x4f0>)
 80010ac:	2202      	movs	r2, #2
 80010ae:	719a      	strb	r2, [r3, #6]
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 80010b0:	4b6e      	ldr	r3, [pc, #440]	; (800126c <initHardware+0x4f0>)
 80010b2:	2202      	movs	r2, #2
 80010b4:	725a      	strb	r2, [r3, #9]
	GPIO_WritePin(&HandlerTIM4PWM_5, 0);
 80010b6:	2100      	movs	r1, #0
 80010b8:	486c      	ldr	r0, [pc, #432]	; (800126c <initHardware+0x4f0>)
 80010ba:	f000 fe7f 	bl	8001dbc <GPIO_WritePin>
	GPIO_Config(&HandlerTIM4PWM_5);
 80010be:	486b      	ldr	r0, [pc, #428]	; (800126c <initHardware+0x4f0>)
 80010c0:	f000 fd54 	bl	8001b6c <GPIO_Config>
	// DIAGONAL CUADRANTE 2
	handlerPWM_5.ptrTIMx           	  =   TIM4;
 80010c4:	4b6a      	ldr	r3, [pc, #424]	; (8001270 <initHardware+0x4f4>)
 80010c6:	4a6b      	ldr	r2, [pc, #428]	; (8001274 <initHardware+0x4f8>)
 80010c8:	601a      	str	r2, [r3, #0]
	handlerPWM_5.config.channel       =   PWM_CHANNEL_1;
 80010ca:	4b69      	ldr	r3, [pc, #420]	; (8001270 <initHardware+0x4f4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	711a      	strb	r2, [r3, #4]
	handlerPWM_5.config.duttyCicle    =   10000;
 80010d0:	4b67      	ldr	r3, [pc, #412]	; (8001270 <initHardware+0x4f4>)
 80010d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80010d6:	81da      	strh	r2, [r3, #14]
	handlerPWM_5.config.periodo       =   25000;
 80010d8:	4b65      	ldr	r3, [pc, #404]	; (8001270 <initHardware+0x4f4>)
 80010da:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80010de:	819a      	strh	r2, [r3, #12]
	handlerPWM_5.config.prescaler     =   160;
 80010e0:	4b63      	ldr	r3, [pc, #396]	; (8001270 <initHardware+0x4f4>)
 80010e2:	22a0      	movs	r2, #160	; 0xa0
 80010e4:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_5);
 80010e6:	4862      	ldr	r0, [pc, #392]	; (8001270 <initHardware+0x4f4>)
 80010e8:	f000 fea8 	bl	8001e3c <pwm_Config>

	// GPIO TIM 4 CC2
	HandlerTIM4PWM_6.pGPIOx          					= GPIOB;
 80010ec:	4b62      	ldr	r3, [pc, #392]	; (8001278 <initHardware+0x4fc>)
 80010ee:	4a63      	ldr	r2, [pc, #396]	; (800127c <initHardware+0x500>)
 80010f0:	601a      	str	r2, [r3, #0]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinNumber  	= PIN_7;
 80010f2:	4b61      	ldr	r3, [pc, #388]	; (8001278 <initHardware+0x4fc>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	711a      	strb	r2, [r3, #4]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 80010f8:	4b5f      	ldr	r3, [pc, #380]	; (8001278 <initHardware+0x4fc>)
 80010fa:	2202      	movs	r2, #2
 80010fc:	715a      	strb	r2, [r3, #5]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 80010fe:	4b5e      	ldr	r3, [pc, #376]	; (8001278 <initHardware+0x4fc>)
 8001100:	2200      	movs	r2, #0
 8001102:	721a      	strb	r2, [r3, #8]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001104:	4b5c      	ldr	r3, [pc, #368]	; (8001278 <initHardware+0x4fc>)
 8001106:	2200      	movs	r2, #0
 8001108:	71da      	strb	r2, [r3, #7]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 800110a:	4b5b      	ldr	r3, [pc, #364]	; (8001278 <initHardware+0x4fc>)
 800110c:	2202      	movs	r2, #2
 800110e:	719a      	strb	r2, [r3, #6]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001110:	4b59      	ldr	r3, [pc, #356]	; (8001278 <initHardware+0x4fc>)
 8001112:	2202      	movs	r2, #2
 8001114:	725a      	strb	r2, [r3, #9]
	GPIO_WritePin(&HandlerTIM4PWM_6, 0);
 8001116:	2100      	movs	r1, #0
 8001118:	4857      	ldr	r0, [pc, #348]	; (8001278 <initHardware+0x4fc>)
 800111a:	f000 fe4f 	bl	8001dbc <GPIO_WritePin>
	GPIO_Config(&HandlerTIM4PWM_6);
 800111e:	4856      	ldr	r0, [pc, #344]	; (8001278 <initHardware+0x4fc>)
 8001120:	f000 fd24 	bl	8001b6c <GPIO_Config>
	// DIAGONAL CUADRANTE 3
	handlerPWM_6.ptrTIMx           	  =   TIM4;
 8001124:	4b56      	ldr	r3, [pc, #344]	; (8001280 <initHardware+0x504>)
 8001126:	4a53      	ldr	r2, [pc, #332]	; (8001274 <initHardware+0x4f8>)
 8001128:	601a      	str	r2, [r3, #0]
	handlerPWM_6.config.channel       =   PWM_CHANNEL_2;
 800112a:	4b55      	ldr	r3, [pc, #340]	; (8001280 <initHardware+0x504>)
 800112c:	2201      	movs	r2, #1
 800112e:	711a      	strb	r2, [r3, #4]
	handlerPWM_6.config.duttyCicle    =   10000;
 8001130:	4b53      	ldr	r3, [pc, #332]	; (8001280 <initHardware+0x504>)
 8001132:	f242 7210 	movw	r2, #10000	; 0x2710
 8001136:	81da      	strh	r2, [r3, #14]
	handlerPWM_6.config.periodo       =   25000;
 8001138:	4b51      	ldr	r3, [pc, #324]	; (8001280 <initHardware+0x504>)
 800113a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800113e:	819a      	strh	r2, [r3, #12]
	handlerPWM_6.config.prescaler     =   160;
 8001140:	4b4f      	ldr	r3, [pc, #316]	; (8001280 <initHardware+0x504>)
 8001142:	22a0      	movs	r2, #160	; 0xa0
 8001144:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_6);
 8001146:	484e      	ldr	r0, [pc, #312]	; (8001280 <initHardware+0x504>)
 8001148:	f000 fe78 	bl	8001e3c <pwm_Config>

	// GPIO TIM 4 CC3
	HandlerTIM4PWM_7.pGPIOx          					= GPIOB;
 800114c:	4b4d      	ldr	r3, [pc, #308]	; (8001284 <initHardware+0x508>)
 800114e:	4a4b      	ldr	r2, [pc, #300]	; (800127c <initHardware+0x500>)
 8001150:	601a      	str	r2, [r3, #0]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinNumber  	= PIN_8;
 8001152:	4b4c      	ldr	r3, [pc, #304]	; (8001284 <initHardware+0x508>)
 8001154:	2208      	movs	r2, #8
 8001156:	711a      	strb	r2, [r3, #4]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8001158:	4b4a      	ldr	r3, [pc, #296]	; (8001284 <initHardware+0x508>)
 800115a:	2202      	movs	r2, #2
 800115c:	715a      	strb	r2, [r3, #5]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 800115e:	4b49      	ldr	r3, [pc, #292]	; (8001284 <initHardware+0x508>)
 8001160:	2200      	movs	r2, #0
 8001162:	721a      	strb	r2, [r3, #8]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001164:	4b47      	ldr	r3, [pc, #284]	; (8001284 <initHardware+0x508>)
 8001166:	2200      	movs	r2, #0
 8001168:	71da      	strb	r2, [r3, #7]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 800116a:	4b46      	ldr	r3, [pc, #280]	; (8001284 <initHardware+0x508>)
 800116c:	2202      	movs	r2, #2
 800116e:	719a      	strb	r2, [r3, #6]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001170:	4b44      	ldr	r3, [pc, #272]	; (8001284 <initHardware+0x508>)
 8001172:	2202      	movs	r2, #2
 8001174:	725a      	strb	r2, [r3, #9]
	GPIO_WritePin(&HandlerTIM4PWM_7, 0);
 8001176:	2100      	movs	r1, #0
 8001178:	4842      	ldr	r0, [pc, #264]	; (8001284 <initHardware+0x508>)
 800117a:	f000 fe1f 	bl	8001dbc <GPIO_WritePin>
	GPIO_Config(&HandlerTIM4PWM_7);
 800117e:	4841      	ldr	r0, [pc, #260]	; (8001284 <initHardware+0x508>)
 8001180:	f000 fcf4 	bl	8001b6c <GPIO_Config>
	// DIAGONAL Y
	handlerPWM_7.ptrTIMx           	  =   TIM4;
 8001184:	4b40      	ldr	r3, [pc, #256]	; (8001288 <initHardware+0x50c>)
 8001186:	4a3b      	ldr	r2, [pc, #236]	; (8001274 <initHardware+0x4f8>)
 8001188:	601a      	str	r2, [r3, #0]
	handlerPWM_7.config.channel       =   PWM_CHANNEL_3;
 800118a:	4b3f      	ldr	r3, [pc, #252]	; (8001288 <initHardware+0x50c>)
 800118c:	2202      	movs	r2, #2
 800118e:	711a      	strb	r2, [r3, #4]
	handlerPWM_7.config.duttyCicle    =   10000;
 8001190:	4b3d      	ldr	r3, [pc, #244]	; (8001288 <initHardware+0x50c>)
 8001192:	f242 7210 	movw	r2, #10000	; 0x2710
 8001196:	81da      	strh	r2, [r3, #14]
	handlerPWM_7.config.periodo       =   25000;
 8001198:	4b3b      	ldr	r3, [pc, #236]	; (8001288 <initHardware+0x50c>)
 800119a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800119e:	819a      	strh	r2, [r3, #12]
	handlerPWM_7.config.prescaler     =   160;
 80011a0:	4b39      	ldr	r3, [pc, #228]	; (8001288 <initHardware+0x50c>)
 80011a2:	22a0      	movs	r2, #160	; 0xa0
 80011a4:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_7);
 80011a6:	4838      	ldr	r0, [pc, #224]	; (8001288 <initHardware+0x50c>)
 80011a8:	f000 fe48 	bl	8001e3c <pwm_Config>

	// GPIO TIM 4 CC4
	HandlerTIM4PWM_8.pGPIOx          					= GPIOB;
 80011ac:	4b37      	ldr	r3, [pc, #220]	; (800128c <initHardware+0x510>)
 80011ae:	4a33      	ldr	r2, [pc, #204]	; (800127c <initHardware+0x500>)
 80011b0:	601a      	str	r2, [r3, #0]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinNumber  	= PIN_9;
 80011b2:	4b36      	ldr	r3, [pc, #216]	; (800128c <initHardware+0x510>)
 80011b4:	2209      	movs	r2, #9
 80011b6:	711a      	strb	r2, [r3, #4]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 80011b8:	4b34      	ldr	r3, [pc, #208]	; (800128c <initHardware+0x510>)
 80011ba:	2202      	movs	r2, #2
 80011bc:	715a      	strb	r2, [r3, #5]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 80011be:	4b33      	ldr	r3, [pc, #204]	; (800128c <initHardware+0x510>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	721a      	strb	r2, [r3, #8]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80011c4:	4b31      	ldr	r3, [pc, #196]	; (800128c <initHardware+0x510>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	71da      	strb	r2, [r3, #7]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 80011ca:	4b30      	ldr	r3, [pc, #192]	; (800128c <initHardware+0x510>)
 80011cc:	2202      	movs	r2, #2
 80011ce:	719a      	strb	r2, [r3, #6]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 80011d0:	4b2e      	ldr	r3, [pc, #184]	; (800128c <initHardware+0x510>)
 80011d2:	2202      	movs	r2, #2
 80011d4:	725a      	strb	r2, [r3, #9]
	GPIO_WritePin(&HandlerTIM4PWM_8, 0);
 80011d6:	2100      	movs	r1, #0
 80011d8:	482c      	ldr	r0, [pc, #176]	; (800128c <initHardware+0x510>)
 80011da:	f000 fdef 	bl	8001dbc <GPIO_WritePin>
	GPIO_Config(&HandlerTIM4PWM_8);
 80011de:	482b      	ldr	r0, [pc, #172]	; (800128c <initHardware+0x510>)
 80011e0:	f000 fcc4 	bl	8001b6c <GPIO_Config>
	// DIAGONAL Y
	handlerPWM_8.ptrTIMx           	  =   TIM4;
 80011e4:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <initHardware+0x514>)
 80011e6:	4a23      	ldr	r2, [pc, #140]	; (8001274 <initHardware+0x4f8>)
 80011e8:	601a      	str	r2, [r3, #0]
	handlerPWM_8.config.channel       =   PWM_CHANNEL_4;
 80011ea:	4b29      	ldr	r3, [pc, #164]	; (8001290 <initHardware+0x514>)
 80011ec:	2203      	movs	r2, #3
 80011ee:	711a      	strb	r2, [r3, #4]
	handlerPWM_8.config.duttyCicle    =   10000;
 80011f0:	4b27      	ldr	r3, [pc, #156]	; (8001290 <initHardware+0x514>)
 80011f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80011f6:	81da      	strh	r2, [r3, #14]
	handlerPWM_8.config.periodo       =   25000;
 80011f8:	4b25      	ldr	r3, [pc, #148]	; (8001290 <initHardware+0x514>)
 80011fa:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80011fe:	819a      	strh	r2, [r3, #12]
	handlerPWM_8.config.prescaler     =   160;
 8001200:	4b23      	ldr	r3, [pc, #140]	; (8001290 <initHardware+0x514>)
 8001202:	22a0      	movs	r2, #160	; 0xa0
 8001204:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_8);
 8001206:	4822      	ldr	r0, [pc, #136]	; (8001290 <initHardware+0x514>)
 8001208:	f000 fe18 	bl	8001e3c <pwm_Config>

	// GPIO TIM 4 CC4
	HandlerTIM2PWM_9.pGPIOx          					= GPIOB;
 800120c:	4b21      	ldr	r3, [pc, #132]	; (8001294 <initHardware+0x518>)
 800120e:	4a1b      	ldr	r2, [pc, #108]	; (800127c <initHardware+0x500>)
 8001210:	601a      	str	r2, [r3, #0]
	HandlerTIM2PWM_9.GPIO_PinConfig.GPIO_PinNumber  	= PIN_3;
 8001212:	4b20      	ldr	r3, [pc, #128]	; (8001294 <initHardware+0x518>)
 8001214:	2203      	movs	r2, #3
 8001216:	711a      	strb	r2, [r3, #4]
	HandlerTIM2PWM_9.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8001218:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <initHardware+0x518>)
 800121a:	2202      	movs	r2, #2
 800121c:	715a      	strb	r2, [r3, #5]
	HandlerTIM2PWM_9.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 800121e:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <initHardware+0x518>)
 8001220:	2200      	movs	r2, #0
 8001222:	721a      	strb	r2, [r3, #8]
	HandlerTIM2PWM_9.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <initHardware+0x518>)
 8001226:	2200      	movs	r2, #0
 8001228:	71da      	strb	r2, [r3, #7]
	HandlerTIM2PWM_9.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 800122a:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <initHardware+0x518>)
 800122c:	2202      	movs	r2, #2
 800122e:	719a      	strb	r2, [r3, #6]
	HandlerTIM2PWM_9.GPIO_PinConfig.GPIO_PinAltFunMode  = AF1;
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <initHardware+0x518>)
 8001232:	2201      	movs	r2, #1
 8001234:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerTIM2PWM_9);
 8001236:	4817      	ldr	r0, [pc, #92]	; (8001294 <initHardware+0x518>)
 8001238:	f000 fc98 	bl	8001b6c <GPIO_Config>
	// DIAGONAL Y
	handlerPWM_9.ptrTIMx           	  =   TIM2;
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <initHardware+0x51c>)
 800123e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001242:	601a      	str	r2, [r3, #0]
	handlerPWM_9.config.channel       =   PWM_CHANNEL_2;
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <initHardware+0x51c>)
 8001246:	2201      	movs	r2, #1
 8001248:	711a      	strb	r2, [r3, #4]
	handlerPWM_9.config.duttyCicle    =   10000;
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <initHardware+0x51c>)
 800124c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001250:	81da      	strh	r2, [r3, #14]
	handlerPWM_9.config.periodo       =   25000;
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <initHardware+0x51c>)
 8001254:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001258:	819a      	strh	r2, [r3, #12]
	handlerPWM_9.config.prescaler     =   160;
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <initHardware+0x51c>)
 800125c:	22a0      	movs	r2, #160	; 0xa0
 800125e:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_9);
 8001260:	480d      	ldr	r0, [pc, #52]	; (8001298 <initHardware+0x51c>)
 8001262:	f000 fdeb 	bl	8001e3c <pwm_Config>


} // Fin initHardware
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000288 	.word	0x20000288
 8001270:	200003d8 	.word	0x200003d8
 8001274:	40000800 	.word	0x40000800
 8001278:	20000294 	.word	0x20000294
 800127c:	40020400 	.word	0x40020400
 8001280:	200003ec 	.word	0x200003ec
 8001284:	200002a0 	.word	0x200002a0
 8001288:	20000400 	.word	0x20000400
 800128c:	200002ac 	.word	0x200002ac
 8001290:	20000414 	.word	0x20000414
 8001294:	200002b8 	.word	0x200002b8
 8001298:	20000428 	.word	0x20000428

0800129c <duttyCicleReturn>:
// Esta funcion controla el dutty cicle del PWM en funcion de la tercera ADC del luxometro.
void duttyCicleReturn(void){
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
	if(dataADCChannel2[0] >= 0 && dataADCChannel2[0] <= 250){
 80012a0:	4b20      	ldr	r3, [pc, #128]	; (8001324 <duttyCicleReturn+0x88>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2bfa      	cmp	r3, #250	; 0xfa
 80012a6:	d804      	bhi.n	80012b2 <duttyCicleReturn+0x16>
		duttyLux = 1000;
 80012a8:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <duttyCicleReturn+0x8c>)
 80012aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012ae:	601a      	str	r2, [r3, #0]
	}else if(dataADCChannel2[0] > 2000 && dataADCChannel2[0] <= 3000){
		duttyLux = 24000;
	}else{
		duttyLux = 21500;
	}
}
 80012b0:	e034      	b.n	800131c <duttyCicleReturn+0x80>
	}else if(dataADCChannel2[0] > 500 && dataADCChannel2[0] <= 1500){
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <duttyCicleReturn+0x88>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012ba:	d90a      	bls.n	80012d2 <duttyCicleReturn+0x36>
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <duttyCicleReturn+0x88>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d804      	bhi.n	80012d2 <duttyCicleReturn+0x36>
		duttyLux = 20000;
 80012c8:	4b17      	ldr	r3, [pc, #92]	; (8001328 <duttyCicleReturn+0x8c>)
 80012ca:	f644 6220 	movw	r2, #20000	; 0x4e20
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	e024      	b.n	800131c <duttyCicleReturn+0x80>
	}else if(dataADCChannel2[0] > 1500 && dataADCChannel2[0] <= 2000){
 80012d2:	4b14      	ldr	r3, [pc, #80]	; (8001324 <duttyCicleReturn+0x88>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80012da:	4293      	cmp	r3, r2
 80012dc:	d909      	bls.n	80012f2 <duttyCicleReturn+0x56>
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <duttyCicleReturn+0x88>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012e6:	d804      	bhi.n	80012f2 <duttyCicleReturn+0x56>
		duttyLux = 20500;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <duttyCicleReturn+0x8c>)
 80012ea:	f245 0214 	movw	r2, #20500	; 0x5014
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	e014      	b.n	800131c <duttyCicleReturn+0x80>
	}else if(dataADCChannel2[0] > 2000 && dataADCChannel2[0] <= 3000){
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <duttyCicleReturn+0x88>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012fa:	d90a      	bls.n	8001312 <duttyCicleReturn+0x76>
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <duttyCicleReturn+0x88>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001304:	4293      	cmp	r3, r2
 8001306:	d804      	bhi.n	8001312 <duttyCicleReturn+0x76>
		duttyLux = 24000;
 8001308:	4b07      	ldr	r3, [pc, #28]	; (8001328 <duttyCicleReturn+0x8c>)
 800130a:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	e004      	b.n	800131c <duttyCicleReturn+0x80>
		duttyLux = 21500;
 8001312:	4b05      	ldr	r3, [pc, #20]	; (8001328 <duttyCicleReturn+0x8c>)
 8001314:	f245 32fc 	movw	r2, #21500	; 0x53fc
 8001318:	601a      	str	r2, [r3, #0]
}
 800131a:	e7ff      	b.n	800131c <duttyCicleReturn+0x80>
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	20000488 	.word	0x20000488
 8001328:	20000494 	.word	0x20000494

0800132c <pwmSignalSwitch>:

// Esta función lanza los pwm dependiendo de la posición en que esté el joystick.
void pwmSignalSwitch(void){
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	if (dataADCChannel0[0] <= 10 && (dataADCChannel1[0] >= 2000 && dataADCChannel1[0] <= 2150)){
 8001330:	4b99      	ldr	r3, [pc, #612]	; (8001598 <pwmSignalSwitch+0x26c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b0a      	cmp	r3, #10
 8001336:	d838      	bhi.n	80013aa <pwmSignalSwitch+0x7e>
 8001338:	4b98      	ldr	r3, [pc, #608]	; (800159c <pwmSignalSwitch+0x270>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001340:	d333      	bcc.n	80013aa <pwmSignalSwitch+0x7e>
 8001342:	4b96      	ldr	r3, [pc, #600]	; (800159c <pwmSignalSwitch+0x270>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f640 0266 	movw	r2, #2150	; 0x866
 800134a:	4293      	cmp	r3, r2
 800134c:	d82d      	bhi.n	80013aa <pwmSignalSwitch+0x7e>
		updateDuttyCycle(&handlerPWM_4, duttyLux);
 800134e:	4b94      	ldr	r3, [pc, #592]	; (80015a0 <pwmSignalSwitch+0x274>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	b29b      	uxth	r3, r3
 8001354:	4619      	mov	r1, r3
 8001356:	4893      	ldr	r0, [pc, #588]	; (80015a4 <pwmSignalSwitch+0x278>)
 8001358:	f000 fecc 	bl	80020f4 <updateDuttyCycle>
		enableOutput(&handlerPWM_4);
 800135c:	4891      	ldr	r0, [pc, #580]	; (80015a4 <pwmSignalSwitch+0x278>)
 800135e:	f000 fe45 	bl	8001fec <enableOutput>
		startPwmSignal(&handlerPWM_4);
 8001362:	4890      	ldr	r0, [pc, #576]	; (80015a4 <pwmSignalSwitch+0x278>)
 8001364:	f000 fe30 	bl	8001fc8 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_2, 0);
 8001368:	2100      	movs	r1, #0
 800136a:	488f      	ldr	r0, [pc, #572]	; (80015a8 <pwmSignalSwitch+0x27c>)
 800136c:	f000 fec2 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 8001370:	2100      	movs	r1, #0
 8001372:	488e      	ldr	r0, [pc, #568]	; (80015ac <pwmSignalSwitch+0x280>)
 8001374:	f000 febe 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_1, 0);
 8001378:	2100      	movs	r1, #0
 800137a:	488d      	ldr	r0, [pc, #564]	; (80015b0 <pwmSignalSwitch+0x284>)
 800137c:	f000 feba 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 8001380:	2100      	movs	r1, #0
 8001382:	488c      	ldr	r0, [pc, #560]	; (80015b4 <pwmSignalSwitch+0x288>)
 8001384:	f000 feb6 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 8001388:	2100      	movs	r1, #0
 800138a:	488b      	ldr	r0, [pc, #556]	; (80015b8 <pwmSignalSwitch+0x28c>)
 800138c:	f000 feb2 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 8001390:	2100      	movs	r1, #0
 8001392:	488a      	ldr	r0, [pc, #552]	; (80015bc <pwmSignalSwitch+0x290>)
 8001394:	f000 feae 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 8001398:	2100      	movs	r1, #0
 800139a:	4889      	ldr	r0, [pc, #548]	; (80015c0 <pwmSignalSwitch+0x294>)
 800139c:	f000 feaa 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 80013a0:	2100      	movs	r1, #0
 80013a2:	4888      	ldr	r0, [pc, #544]	; (80015c4 <pwmSignalSwitch+0x298>)
 80013a4:	f000 fea6 	bl	80020f4 <updateDuttyCycle>
 80013a8:	e209      	b.n	80017be <pwmSignalSwitch+0x492>
	}else if (dataADCChannel0[0] >= 4000 && (dataADCChannel1[0] >= 2000 && dataADCChannel1[0] <= 2150)){
 80013aa:	4b7b      	ldr	r3, [pc, #492]	; (8001598 <pwmSignalSwitch+0x26c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80013b2:	d338      	bcc.n	8001426 <pwmSignalSwitch+0xfa>
 80013b4:	4b79      	ldr	r3, [pc, #484]	; (800159c <pwmSignalSwitch+0x270>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80013bc:	d333      	bcc.n	8001426 <pwmSignalSwitch+0xfa>
 80013be:	4b77      	ldr	r3, [pc, #476]	; (800159c <pwmSignalSwitch+0x270>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f640 0266 	movw	r2, #2150	; 0x866
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d82d      	bhi.n	8001426 <pwmSignalSwitch+0xfa>
		updateDuttyCycle(&handlerPWM_1, duttyLux);
 80013ca:	4b75      	ldr	r3, [pc, #468]	; (80015a0 <pwmSignalSwitch+0x274>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	4619      	mov	r1, r3
 80013d2:	4877      	ldr	r0, [pc, #476]	; (80015b0 <pwmSignalSwitch+0x284>)
 80013d4:	f000 fe8e 	bl	80020f4 <updateDuttyCycle>
		enableOutput(&handlerPWM_1);
 80013d8:	4875      	ldr	r0, [pc, #468]	; (80015b0 <pwmSignalSwitch+0x284>)
 80013da:	f000 fe07 	bl	8001fec <enableOutput>
		startPwmSignal(&handlerPWM_1);
 80013de:	4874      	ldr	r0, [pc, #464]	; (80015b0 <pwmSignalSwitch+0x284>)
 80013e0:	f000 fdf2 	bl	8001fc8 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_2, 0);
 80013e4:	2100      	movs	r1, #0
 80013e6:	4870      	ldr	r0, [pc, #448]	; (80015a8 <pwmSignalSwitch+0x27c>)
 80013e8:	f000 fe84 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 80013ec:	2100      	movs	r1, #0
 80013ee:	486f      	ldr	r0, [pc, #444]	; (80015ac <pwmSignalSwitch+0x280>)
 80013f0:	f000 fe80 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 80013f4:	2100      	movs	r1, #0
 80013f6:	486b      	ldr	r0, [pc, #428]	; (80015a4 <pwmSignalSwitch+0x278>)
 80013f8:	f000 fe7c 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 80013fc:	2100      	movs	r1, #0
 80013fe:	486d      	ldr	r0, [pc, #436]	; (80015b4 <pwmSignalSwitch+0x288>)
 8001400:	f000 fe78 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 8001404:	2100      	movs	r1, #0
 8001406:	486c      	ldr	r0, [pc, #432]	; (80015b8 <pwmSignalSwitch+0x28c>)
 8001408:	f000 fe74 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 800140c:	2100      	movs	r1, #0
 800140e:	486b      	ldr	r0, [pc, #428]	; (80015bc <pwmSignalSwitch+0x290>)
 8001410:	f000 fe70 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 8001414:	2100      	movs	r1, #0
 8001416:	486a      	ldr	r0, [pc, #424]	; (80015c0 <pwmSignalSwitch+0x294>)
 8001418:	f000 fe6c 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 800141c:	2100      	movs	r1, #0
 800141e:	4869      	ldr	r0, [pc, #420]	; (80015c4 <pwmSignalSwitch+0x298>)
 8001420:	f000 fe68 	bl	80020f4 <updateDuttyCycle>
 8001424:	e1cb      	b.n	80017be <pwmSignalSwitch+0x492>
	}else if ((dataADCChannel0[0] >= 2000 && dataADCChannel0[0] <= 2150) && dataADCChannel1[0] >= 4000){
 8001426:	4b5c      	ldr	r3, [pc, #368]	; (8001598 <pwmSignalSwitch+0x26c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800142e:	d338      	bcc.n	80014a2 <pwmSignalSwitch+0x176>
 8001430:	4b59      	ldr	r3, [pc, #356]	; (8001598 <pwmSignalSwitch+0x26c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f640 0266 	movw	r2, #2150	; 0x866
 8001438:	4293      	cmp	r3, r2
 800143a:	d832      	bhi.n	80014a2 <pwmSignalSwitch+0x176>
 800143c:	4b57      	ldr	r3, [pc, #348]	; (800159c <pwmSignalSwitch+0x270>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001444:	d32d      	bcc.n	80014a2 <pwmSignalSwitch+0x176>
		updateDuttyCycle(&handlerPWM_6, duttyLux);
 8001446:	4b56      	ldr	r3, [pc, #344]	; (80015a0 <pwmSignalSwitch+0x274>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	b29b      	uxth	r3, r3
 800144c:	4619      	mov	r1, r3
 800144e:	485a      	ldr	r0, [pc, #360]	; (80015b8 <pwmSignalSwitch+0x28c>)
 8001450:	f000 fe50 	bl	80020f4 <updateDuttyCycle>
		enableOutput(&handlerPWM_6);
 8001454:	4858      	ldr	r0, [pc, #352]	; (80015b8 <pwmSignalSwitch+0x28c>)
 8001456:	f000 fdc9 	bl	8001fec <enableOutput>
		startPwmSignal(&handlerPWM_6);
 800145a:	4857      	ldr	r0, [pc, #348]	; (80015b8 <pwmSignalSwitch+0x28c>)
 800145c:	f000 fdb4 	bl	8001fc8 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 8001460:	2100      	movs	r1, #0
 8001462:	4853      	ldr	r0, [pc, #332]	; (80015b0 <pwmSignalSwitch+0x284>)
 8001464:	f000 fe46 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 8001468:	2100      	movs	r1, #0
 800146a:	484f      	ldr	r0, [pc, #316]	; (80015a8 <pwmSignalSwitch+0x27c>)
 800146c:	f000 fe42 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 8001470:	2100      	movs	r1, #0
 8001472:	484c      	ldr	r0, [pc, #304]	; (80015a4 <pwmSignalSwitch+0x278>)
 8001474:	f000 fe3e 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 8001478:	2100      	movs	r1, #0
 800147a:	484e      	ldr	r0, [pc, #312]	; (80015b4 <pwmSignalSwitch+0x288>)
 800147c:	f000 fe3a 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 8001480:	2100      	movs	r1, #0
 8001482:	484a      	ldr	r0, [pc, #296]	; (80015ac <pwmSignalSwitch+0x280>)
 8001484:	f000 fe36 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 8001488:	2100      	movs	r1, #0
 800148a:	484c      	ldr	r0, [pc, #304]	; (80015bc <pwmSignalSwitch+0x290>)
 800148c:	f000 fe32 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 8001490:	2100      	movs	r1, #0
 8001492:	484b      	ldr	r0, [pc, #300]	; (80015c0 <pwmSignalSwitch+0x294>)
 8001494:	f000 fe2e 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 8001498:	2100      	movs	r1, #0
 800149a:	484a      	ldr	r0, [pc, #296]	; (80015c4 <pwmSignalSwitch+0x298>)
 800149c:	f000 fe2a 	bl	80020f4 <updateDuttyCycle>
 80014a0:	e18d      	b.n	80017be <pwmSignalSwitch+0x492>
	}else if ((dataADCChannel0[0] >= 2000 && dataADCChannel0[0] <= 2150) && dataADCChannel1[0] <= 20){
 80014a2:	4b3d      	ldr	r3, [pc, #244]	; (8001598 <pwmSignalSwitch+0x26c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80014aa:	d337      	bcc.n	800151c <pwmSignalSwitch+0x1f0>
 80014ac:	4b3a      	ldr	r3, [pc, #232]	; (8001598 <pwmSignalSwitch+0x26c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f640 0266 	movw	r2, #2150	; 0x866
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d831      	bhi.n	800151c <pwmSignalSwitch+0x1f0>
 80014b8:	4b38      	ldr	r3, [pc, #224]	; (800159c <pwmSignalSwitch+0x270>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b14      	cmp	r3, #20
 80014be:	d82d      	bhi.n	800151c <pwmSignalSwitch+0x1f0>
		updateDuttyCycle(&handlerPWM_8, duttyLux);
 80014c0:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <pwmSignalSwitch+0x274>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	4619      	mov	r1, r3
 80014c8:	483d      	ldr	r0, [pc, #244]	; (80015c0 <pwmSignalSwitch+0x294>)
 80014ca:	f000 fe13 	bl	80020f4 <updateDuttyCycle>
		enableOutput(&handlerPWM_8);
 80014ce:	483c      	ldr	r0, [pc, #240]	; (80015c0 <pwmSignalSwitch+0x294>)
 80014d0:	f000 fd8c 	bl	8001fec <enableOutput>
		startPwmSignal(&handlerPWM_8);
 80014d4:	483a      	ldr	r0, [pc, #232]	; (80015c0 <pwmSignalSwitch+0x294>)
 80014d6:	f000 fd77 	bl	8001fc8 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 80014da:	2100      	movs	r1, #0
 80014dc:	4834      	ldr	r0, [pc, #208]	; (80015b0 <pwmSignalSwitch+0x284>)
 80014de:	f000 fe09 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 80014e2:	2100      	movs	r1, #0
 80014e4:	4830      	ldr	r0, [pc, #192]	; (80015a8 <pwmSignalSwitch+0x27c>)
 80014e6:	f000 fe05 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 80014ea:	2100      	movs	r1, #0
 80014ec:	482f      	ldr	r0, [pc, #188]	; (80015ac <pwmSignalSwitch+0x280>)
 80014ee:	f000 fe01 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 80014f2:	2100      	movs	r1, #0
 80014f4:	482f      	ldr	r0, [pc, #188]	; (80015b4 <pwmSignalSwitch+0x288>)
 80014f6:	f000 fdfd 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 80014fa:	2100      	movs	r1, #0
 80014fc:	482e      	ldr	r0, [pc, #184]	; (80015b8 <pwmSignalSwitch+0x28c>)
 80014fe:	f000 fdf9 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 8001502:	2100      	movs	r1, #0
 8001504:	482d      	ldr	r0, [pc, #180]	; (80015bc <pwmSignalSwitch+0x290>)
 8001506:	f000 fdf5 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 800150a:	2100      	movs	r1, #0
 800150c:	4825      	ldr	r0, [pc, #148]	; (80015a4 <pwmSignalSwitch+0x278>)
 800150e:	f000 fdf1 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 8001512:	2100      	movs	r1, #0
 8001514:	482b      	ldr	r0, [pc, #172]	; (80015c4 <pwmSignalSwitch+0x298>)
 8001516:	f000 fded 	bl	80020f4 <updateDuttyCycle>
 800151a:	e150      	b.n	80017be <pwmSignalSwitch+0x492>
	}else if ((dataADCChannel1[0] >= 4000 && dataADCChannel1[0] <= 4150) && dataADCChannel0[0] <= 10){
 800151c:	4b1f      	ldr	r3, [pc, #124]	; (800159c <pwmSignalSwitch+0x270>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001524:	d350      	bcc.n	80015c8 <pwmSignalSwitch+0x29c>
 8001526:	4b1d      	ldr	r3, [pc, #116]	; (800159c <pwmSignalSwitch+0x270>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f241 0236 	movw	r2, #4150	; 0x1036
 800152e:	4293      	cmp	r3, r2
 8001530:	d84a      	bhi.n	80015c8 <pwmSignalSwitch+0x29c>
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <pwmSignalSwitch+0x26c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b0a      	cmp	r3, #10
 8001538:	d846      	bhi.n	80015c8 <pwmSignalSwitch+0x29c>
		updateDuttyCycle(&handlerPWM_3, duttyLux);
 800153a:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <pwmSignalSwitch+0x274>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	b29b      	uxth	r3, r3
 8001540:	4619      	mov	r1, r3
 8001542:	481a      	ldr	r0, [pc, #104]	; (80015ac <pwmSignalSwitch+0x280>)
 8001544:	f000 fdd6 	bl	80020f4 <updateDuttyCycle>
		enableOutput(&handlerPWM_3);
 8001548:	4818      	ldr	r0, [pc, #96]	; (80015ac <pwmSignalSwitch+0x280>)
 800154a:	f000 fd4f 	bl	8001fec <enableOutput>
		startPwmSignal(&handlerPWM_3);
 800154e:	4817      	ldr	r0, [pc, #92]	; (80015ac <pwmSignalSwitch+0x280>)
 8001550:	f000 fd3a 	bl	8001fc8 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 8001554:	2100      	movs	r1, #0
 8001556:	4816      	ldr	r0, [pc, #88]	; (80015b0 <pwmSignalSwitch+0x284>)
 8001558:	f000 fdcc 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 800155c:	2100      	movs	r1, #0
 800155e:	4812      	ldr	r0, [pc, #72]	; (80015a8 <pwmSignalSwitch+0x27c>)
 8001560:	f000 fdc8 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 8001564:	2100      	movs	r1, #0
 8001566:	4813      	ldr	r0, [pc, #76]	; (80015b4 <pwmSignalSwitch+0x288>)
 8001568:	f000 fdc4 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 800156c:	2100      	movs	r1, #0
 800156e:	480d      	ldr	r0, [pc, #52]	; (80015a4 <pwmSignalSwitch+0x278>)
 8001570:	f000 fdc0 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 8001574:	2100      	movs	r1, #0
 8001576:	4810      	ldr	r0, [pc, #64]	; (80015b8 <pwmSignalSwitch+0x28c>)
 8001578:	f000 fdbc 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 800157c:	2100      	movs	r1, #0
 800157e:	480f      	ldr	r0, [pc, #60]	; (80015bc <pwmSignalSwitch+0x290>)
 8001580:	f000 fdb8 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 8001584:	2100      	movs	r1, #0
 8001586:	480e      	ldr	r0, [pc, #56]	; (80015c0 <pwmSignalSwitch+0x294>)
 8001588:	f000 fdb4 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 800158c:	2100      	movs	r1, #0
 800158e:	480d      	ldr	r0, [pc, #52]	; (80015c4 <pwmSignalSwitch+0x298>)
 8001590:	f000 fdb0 	bl	80020f4 <updateDuttyCycle>
 8001594:	e113      	b.n	80017be <pwmSignalSwitch+0x492>
 8001596:	bf00      	nop
 8001598:	20000480 	.word	0x20000480
 800159c:	20000484 	.word	0x20000484
 80015a0:	20000494 	.word	0x20000494
 80015a4:	200003c4 	.word	0x200003c4
 80015a8:	2000039c 	.word	0x2000039c
 80015ac:	200003b0 	.word	0x200003b0
 80015b0:	20000388 	.word	0x20000388
 80015b4:	200003d8 	.word	0x200003d8
 80015b8:	200003ec 	.word	0x200003ec
 80015bc:	20000400 	.word	0x20000400
 80015c0:	20000414 	.word	0x20000414
 80015c4:	20000428 	.word	0x20000428
	}else if ((dataADCChannel1[0] >= 0 && dataADCChannel1[0] <= 20) && dataADCChannel0[0] <= 20){
 80015c8:	4b7e      	ldr	r3, [pc, #504]	; (80017c4 <pwmSignalSwitch+0x498>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b14      	cmp	r3, #20
 80015ce:	d831      	bhi.n	8001634 <pwmSignalSwitch+0x308>
 80015d0:	4b7d      	ldr	r3, [pc, #500]	; (80017c8 <pwmSignalSwitch+0x49c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b14      	cmp	r3, #20
 80015d6:	d82d      	bhi.n	8001634 <pwmSignalSwitch+0x308>
		updateDuttyCycle(&handlerPWM_5, duttyLux);
 80015d8:	4b7c      	ldr	r3, [pc, #496]	; (80017cc <pwmSignalSwitch+0x4a0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	b29b      	uxth	r3, r3
 80015de:	4619      	mov	r1, r3
 80015e0:	487b      	ldr	r0, [pc, #492]	; (80017d0 <pwmSignalSwitch+0x4a4>)
 80015e2:	f000 fd87 	bl	80020f4 <updateDuttyCycle>
		enableOutput(&handlerPWM_5);
 80015e6:	487a      	ldr	r0, [pc, #488]	; (80017d0 <pwmSignalSwitch+0x4a4>)
 80015e8:	f000 fd00 	bl	8001fec <enableOutput>
		startPwmSignal(&handlerPWM_5);
 80015ec:	4878      	ldr	r0, [pc, #480]	; (80017d0 <pwmSignalSwitch+0x4a4>)
 80015ee:	f000 fceb 	bl	8001fc8 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 80015f2:	2100      	movs	r1, #0
 80015f4:	4877      	ldr	r0, [pc, #476]	; (80017d4 <pwmSignalSwitch+0x4a8>)
 80015f6:	f000 fd7d 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 80015fa:	2100      	movs	r1, #0
 80015fc:	4876      	ldr	r0, [pc, #472]	; (80017d8 <pwmSignalSwitch+0x4ac>)
 80015fe:	f000 fd79 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 8001602:	2100      	movs	r1, #0
 8001604:	4875      	ldr	r0, [pc, #468]	; (80017dc <pwmSignalSwitch+0x4b0>)
 8001606:	f000 fd75 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 800160a:	2100      	movs	r1, #0
 800160c:	4874      	ldr	r0, [pc, #464]	; (80017e0 <pwmSignalSwitch+0x4b4>)
 800160e:	f000 fd71 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 8001612:	2100      	movs	r1, #0
 8001614:	4873      	ldr	r0, [pc, #460]	; (80017e4 <pwmSignalSwitch+0x4b8>)
 8001616:	f000 fd6d 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 800161a:	2100      	movs	r1, #0
 800161c:	4872      	ldr	r0, [pc, #456]	; (80017e8 <pwmSignalSwitch+0x4bc>)
 800161e:	f000 fd69 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 8001622:	2100      	movs	r1, #0
 8001624:	4871      	ldr	r0, [pc, #452]	; (80017ec <pwmSignalSwitch+0x4c0>)
 8001626:	f000 fd65 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 800162a:	2100      	movs	r1, #0
 800162c:	4870      	ldr	r0, [pc, #448]	; (80017f0 <pwmSignalSwitch+0x4c4>)
 800162e:	f000 fd61 	bl	80020f4 <updateDuttyCycle>
 8001632:	e0c4      	b.n	80017be <pwmSignalSwitch+0x492>
	}else if ((dataADCChannel0[0] >= 4000 && dataADCChannel0[0] <= 4150) && (dataADCChannel1[0] >= 4000 && dataADCChannel1[0] <= 4150)){
 8001634:	4b64      	ldr	r3, [pc, #400]	; (80017c8 <pwmSignalSwitch+0x49c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800163c:	d33e      	bcc.n	80016bc <pwmSignalSwitch+0x390>
 800163e:	4b62      	ldr	r3, [pc, #392]	; (80017c8 <pwmSignalSwitch+0x49c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f241 0236 	movw	r2, #4150	; 0x1036
 8001646:	4293      	cmp	r3, r2
 8001648:	d838      	bhi.n	80016bc <pwmSignalSwitch+0x390>
 800164a:	4b5e      	ldr	r3, [pc, #376]	; (80017c4 <pwmSignalSwitch+0x498>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001652:	d333      	bcc.n	80016bc <pwmSignalSwitch+0x390>
 8001654:	4b5b      	ldr	r3, [pc, #364]	; (80017c4 <pwmSignalSwitch+0x498>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f241 0236 	movw	r2, #4150	; 0x1036
 800165c:	4293      	cmp	r3, r2
 800165e:	d82d      	bhi.n	80016bc <pwmSignalSwitch+0x390>
		updateDuttyCycle(&handlerPWM_2, duttyLux);
 8001660:	4b5a      	ldr	r3, [pc, #360]	; (80017cc <pwmSignalSwitch+0x4a0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	b29b      	uxth	r3, r3
 8001666:	4619      	mov	r1, r3
 8001668:	485b      	ldr	r0, [pc, #364]	; (80017d8 <pwmSignalSwitch+0x4ac>)
 800166a:	f000 fd43 	bl	80020f4 <updateDuttyCycle>
		enableOutput(&handlerPWM_2);
 800166e:	485a      	ldr	r0, [pc, #360]	; (80017d8 <pwmSignalSwitch+0x4ac>)
 8001670:	f000 fcbc 	bl	8001fec <enableOutput>
		startPwmSignal(&handlerPWM_2);
 8001674:	4858      	ldr	r0, [pc, #352]	; (80017d8 <pwmSignalSwitch+0x4ac>)
 8001676:	f000 fca7 	bl	8001fc8 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 800167a:	2100      	movs	r1, #0
 800167c:	4855      	ldr	r0, [pc, #340]	; (80017d4 <pwmSignalSwitch+0x4a8>)
 800167e:	f000 fd39 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 8001682:	2100      	movs	r1, #0
 8001684:	4858      	ldr	r0, [pc, #352]	; (80017e8 <pwmSignalSwitch+0x4bc>)
 8001686:	f000 fd35 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 800168a:	2100      	movs	r1, #0
 800168c:	4853      	ldr	r0, [pc, #332]	; (80017dc <pwmSignalSwitch+0x4b0>)
 800168e:	f000 fd31 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 8001692:	2100      	movs	r1, #0
 8001694:	4852      	ldr	r0, [pc, #328]	; (80017e0 <pwmSignalSwitch+0x4b4>)
 8001696:	f000 fd2d 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 800169a:	2100      	movs	r1, #0
 800169c:	484c      	ldr	r0, [pc, #304]	; (80017d0 <pwmSignalSwitch+0x4a4>)
 800169e:	f000 fd29 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 80016a2:	2100      	movs	r1, #0
 80016a4:	484f      	ldr	r0, [pc, #316]	; (80017e4 <pwmSignalSwitch+0x4b8>)
 80016a6:	f000 fd25 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 80016aa:	2100      	movs	r1, #0
 80016ac:	484f      	ldr	r0, [pc, #316]	; (80017ec <pwmSignalSwitch+0x4c0>)
 80016ae:	f000 fd21 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 80016b2:	2100      	movs	r1, #0
 80016b4:	484e      	ldr	r0, [pc, #312]	; (80017f0 <pwmSignalSwitch+0x4c4>)
 80016b6:	f000 fd1d 	bl	80020f4 <updateDuttyCycle>
 80016ba:	e080      	b.n	80017be <pwmSignalSwitch+0x492>
	}else if ((dataADCChannel0[0] >= 4000 && dataADCChannel0[0] <= 4150) && dataADCChannel1[0] <= 20){
 80016bc:	4b42      	ldr	r3, [pc, #264]	; (80017c8 <pwmSignalSwitch+0x49c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80016c4:	d337      	bcc.n	8001736 <pwmSignalSwitch+0x40a>
 80016c6:	4b40      	ldr	r3, [pc, #256]	; (80017c8 <pwmSignalSwitch+0x49c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f241 0236 	movw	r2, #4150	; 0x1036
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d831      	bhi.n	8001736 <pwmSignalSwitch+0x40a>
 80016d2:	4b3c      	ldr	r3, [pc, #240]	; (80017c4 <pwmSignalSwitch+0x498>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b14      	cmp	r3, #20
 80016d8:	d82d      	bhi.n	8001736 <pwmSignalSwitch+0x40a>
		updateDuttyCycle(&handlerPWM_9, duttyLux);
 80016da:	4b3c      	ldr	r3, [pc, #240]	; (80017cc <pwmSignalSwitch+0x4a0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	4619      	mov	r1, r3
 80016e2:	4843      	ldr	r0, [pc, #268]	; (80017f0 <pwmSignalSwitch+0x4c4>)
 80016e4:	f000 fd06 	bl	80020f4 <updateDuttyCycle>
		enableOutput(&handlerPWM_9);
 80016e8:	4841      	ldr	r0, [pc, #260]	; (80017f0 <pwmSignalSwitch+0x4c4>)
 80016ea:	f000 fc7f 	bl	8001fec <enableOutput>
		startPwmSignal(&handlerPWM_9);
 80016ee:	4840      	ldr	r0, [pc, #256]	; (80017f0 <pwmSignalSwitch+0x4c4>)
 80016f0:	f000 fc6a 	bl	8001fc8 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 80016f4:	2100      	movs	r1, #0
 80016f6:	4837      	ldr	r0, [pc, #220]	; (80017d4 <pwmSignalSwitch+0x4a8>)
 80016f8:	f000 fcfc 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 80016fc:	2100      	movs	r1, #0
 80016fe:	4836      	ldr	r0, [pc, #216]	; (80017d8 <pwmSignalSwitch+0x4ac>)
 8001700:	f000 fcf8 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 8001704:	2100      	movs	r1, #0
 8001706:	4835      	ldr	r0, [pc, #212]	; (80017dc <pwmSignalSwitch+0x4b0>)
 8001708:	f000 fcf4 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 800170c:	2100      	movs	r1, #0
 800170e:	4834      	ldr	r0, [pc, #208]	; (80017e0 <pwmSignalSwitch+0x4b4>)
 8001710:	f000 fcf0 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 8001714:	2100      	movs	r1, #0
 8001716:	482e      	ldr	r0, [pc, #184]	; (80017d0 <pwmSignalSwitch+0x4a4>)
 8001718:	f000 fcec 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 800171c:	2100      	movs	r1, #0
 800171e:	4831      	ldr	r0, [pc, #196]	; (80017e4 <pwmSignalSwitch+0x4b8>)
 8001720:	f000 fce8 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 8001724:	2100      	movs	r1, #0
 8001726:	4830      	ldr	r0, [pc, #192]	; (80017e8 <pwmSignalSwitch+0x4bc>)
 8001728:	f000 fce4 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 800172c:	2100      	movs	r1, #0
 800172e:	482f      	ldr	r0, [pc, #188]	; (80017ec <pwmSignalSwitch+0x4c0>)
 8001730:	f000 fce0 	bl	80020f4 <updateDuttyCycle>
 8001734:	e043      	b.n	80017be <pwmSignalSwitch+0x492>
	}else if ((dataADCChannel0[0] >= 2000 && dataADCChannel0[0] <= 2150) && (dataADCChannel1[0] >= 2000 && dataADCChannel1[0] <= 2150)){
 8001736:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <pwmSignalSwitch+0x49c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800173e:	d33e      	bcc.n	80017be <pwmSignalSwitch+0x492>
 8001740:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <pwmSignalSwitch+0x49c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f640 0266 	movw	r2, #2150	; 0x866
 8001748:	4293      	cmp	r3, r2
 800174a:	d838      	bhi.n	80017be <pwmSignalSwitch+0x492>
 800174c:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <pwmSignalSwitch+0x498>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001754:	d333      	bcc.n	80017be <pwmSignalSwitch+0x492>
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <pwmSignalSwitch+0x498>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f640 0266 	movw	r2, #2150	; 0x866
 800175e:	4293      	cmp	r3, r2
 8001760:	d82d      	bhi.n	80017be <pwmSignalSwitch+0x492>
		updateDuttyCycle(&handlerPWM_7, duttyLux);
 8001762:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <pwmSignalSwitch+0x4a0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	b29b      	uxth	r3, r3
 8001768:	4619      	mov	r1, r3
 800176a:	481f      	ldr	r0, [pc, #124]	; (80017e8 <pwmSignalSwitch+0x4bc>)
 800176c:	f000 fcc2 	bl	80020f4 <updateDuttyCycle>
		enableOutput(&handlerPWM_7);
 8001770:	481d      	ldr	r0, [pc, #116]	; (80017e8 <pwmSignalSwitch+0x4bc>)
 8001772:	f000 fc3b 	bl	8001fec <enableOutput>
		startPwmSignal(&handlerPWM_7);
 8001776:	481c      	ldr	r0, [pc, #112]	; (80017e8 <pwmSignalSwitch+0x4bc>)
 8001778:	f000 fc26 	bl	8001fc8 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 800177c:	2100      	movs	r1, #0
 800177e:	4815      	ldr	r0, [pc, #84]	; (80017d4 <pwmSignalSwitch+0x4a8>)
 8001780:	f000 fcb8 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 8001784:	2100      	movs	r1, #0
 8001786:	4814      	ldr	r0, [pc, #80]	; (80017d8 <pwmSignalSwitch+0x4ac>)
 8001788:	f000 fcb4 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 800178c:	2100      	movs	r1, #0
 800178e:	4813      	ldr	r0, [pc, #76]	; (80017dc <pwmSignalSwitch+0x4b0>)
 8001790:	f000 fcb0 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 8001794:	2100      	movs	r1, #0
 8001796:	4812      	ldr	r0, [pc, #72]	; (80017e0 <pwmSignalSwitch+0x4b4>)
 8001798:	f000 fcac 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 800179c:	2100      	movs	r1, #0
 800179e:	480c      	ldr	r0, [pc, #48]	; (80017d0 <pwmSignalSwitch+0x4a4>)
 80017a0:	f000 fca8 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 80017a4:	2100      	movs	r1, #0
 80017a6:	480f      	ldr	r0, [pc, #60]	; (80017e4 <pwmSignalSwitch+0x4b8>)
 80017a8:	f000 fca4 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 80017ac:	2100      	movs	r1, #0
 80017ae:	4810      	ldr	r0, [pc, #64]	; (80017f0 <pwmSignalSwitch+0x4c4>)
 80017b0:	f000 fca0 	bl	80020f4 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 80017b4:	2100      	movs	r1, #0
 80017b6:	480d      	ldr	r0, [pc, #52]	; (80017ec <pwmSignalSwitch+0x4c0>)
 80017b8:	f000 fc9c 	bl	80020f4 <updateDuttyCycle>
	}
}
 80017bc:	e7ff      	b.n	80017be <pwmSignalSwitch+0x492>
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000484 	.word	0x20000484
 80017c8:	20000480 	.word	0x20000480
 80017cc:	20000494 	.word	0x20000494
 80017d0:	200003d8 	.word	0x200003d8
 80017d4:	20000388 	.word	0x20000388
 80017d8:	2000039c 	.word	0x2000039c
 80017dc:	200003b0 	.word	0x200003b0
 80017e0:	200003c4 	.word	0x200003c4
 80017e4:	200003ec 	.word	0x200003ec
 80017e8:	20000400 	.word	0x20000400
 80017ec:	20000414 	.word	0x20000414
 80017f0:	20000428 	.word	0x20000428

080017f4 <BasicTimer5_Callback>:

/* Timer que gobierna el blinky del led de estado y las interrupciones ADC */
void BasicTimer5_Callback(void){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
	if(counterADC == 5){
 80017f8:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <BasicTimer5_Callback+0x30>)
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	2b05      	cmp	r3, #5
 80017fe:	d102      	bne.n	8001806 <BasicTimer5_Callback+0x12>
		counterADC = 0;
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <BasicTimer5_Callback+0x30>)
 8001802:	2200      	movs	r2, #0
 8001804:	801a      	strh	r2, [r3, #0]
	}
	flagADC = 1;
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <BasicTimer5_Callback+0x34>)
 8001808:	2201      	movs	r2, #1
 800180a:	801a      	strh	r2, [r3, #0]
	counterADC++;
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <BasicTimer5_Callback+0x30>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	3301      	adds	r3, #1
 8001812:	b29a      	uxth	r2, r3
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <BasicTimer5_Callback+0x30>)
 8001816:	801a      	strh	r2, [r3, #0]
	GPIOxTooglePin(&handlerStateLED);
 8001818:	4804      	ldr	r0, [pc, #16]	; (800182c <BasicTimer5_Callback+0x38>)
 800181a:	f000 faf9 	bl	8001e10 <GPIOxTooglePin>
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000490 	.word	0x20000490
 8001828:	2000048e 	.word	0x2000048e
 800182c:	20000234 	.word	0x20000234

08001830 <usart2Rx_Callback>:



// Callback para los comandos del USART.
void usart2Rx_Callback(void){
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	rxData = getRxData();
 8001834:	f000 ff38 	bl	80026a8 <getRxData>
 8001838:	4603      	mov	r3, r0
 800183a:	461a      	mov	r2, r3
 800183c:	4b01      	ldr	r3, [pc, #4]	; (8001844 <usart2Rx_Callback+0x14>)
 800183e:	701a      	strb	r2, [r3, #0]
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	2000048c 	.word	0x2000048c

08001848 <adcComplete_Callback>:

// Esta función controla el contador del ADC.(Hace las veces de callback)
void adcComplete_Callback(void){
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
	if(cont == 0){
 800184c:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <adcComplete_Callback+0x8c>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10a      	bne.n	800186a <adcComplete_Callback+0x22>
		dataADCChannel0[cont2] = getADC();
 8001854:	f000 ffb0 	bl	80027b8 <getADC>
 8001858:	4603      	mov	r3, r0
 800185a:	4619      	mov	r1, r3
 800185c:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <adcComplete_Callback+0x90>)
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <adcComplete_Callback+0x94>)
 8001864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001868:	e01e      	b.n	80018a8 <adcComplete_Callback+0x60>
	}
	else if (cont == 1){
 800186a:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <adcComplete_Callback+0x8c>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d10a      	bne.n	8001888 <adcComplete_Callback+0x40>
		dataADCChannel1[cont2] = getADC();
 8001872:	f000 ffa1 	bl	80027b8 <getADC>
 8001876:	4603      	mov	r3, r0
 8001878:	4619      	mov	r1, r3
 800187a:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <adcComplete_Callback+0x90>)
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <adcComplete_Callback+0x98>)
 8001882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001886:	e00f      	b.n	80018a8 <adcComplete_Callback+0x60>
	}else{
		dataADCChannel2[cont2] = getADC();
 8001888:	f000 ff96 	bl	80027b8 <getADC>
 800188c:	4603      	mov	r3, r0
 800188e:	4619      	mov	r1, r3
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <adcComplete_Callback+0x90>)
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <adcComplete_Callback+0x9c>)
 8001898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		cont2++;
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <adcComplete_Callback+0x90>)
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	3301      	adds	r3, #1
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <adcComplete_Callback+0x90>)
 80018a6:	801a      	strh	r2, [r3, #0]
	}
	cont++;
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <adcComplete_Callback+0x8c>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	3301      	adds	r3, #1
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <adcComplete_Callback+0x8c>)
 80018b2:	701a      	strb	r2, [r3, #0]
	if(cont2 == 1){
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <adcComplete_Callback+0x90>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d102      	bne.n	80018c2 <adcComplete_Callback+0x7a>
		cont2 = 0;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <adcComplete_Callback+0x90>)
 80018be:	2200      	movs	r2, #0
 80018c0:	801a      	strh	r2, [r3, #0]
	}
	if(cont == 3){
 80018c2:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <adcComplete_Callback+0x8c>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d102      	bne.n	80018d0 <adcComplete_Callback+0x88>
		cont = 0;
 80018ca:	4b02      	ldr	r3, [pc, #8]	; (80018d4 <adcComplete_Callback+0x8c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
	}
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	2000047c 	.word	0x2000047c
 80018d8:	2000047e 	.word	0x2000047e
 80018dc:	20000480 	.word	0x20000480
 80018e0:	20000484 	.word	0x20000484
 80018e4:	20000488 	.word	0x20000488

080018e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018e8:	480d      	ldr	r0, [pc, #52]	; (8001920 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018f0:	480c      	ldr	r0, [pc, #48]	; (8001924 <LoopForever+0x6>)
  ldr r1, =_edata
 80018f2:	490d      	ldr	r1, [pc, #52]	; (8001928 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018f4:	4a0d      	ldr	r2, [pc, #52]	; (800192c <LoopForever+0xe>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f8:	e002      	b.n	8001900 <LoopCopyDataInit>

080018fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fe:	3304      	adds	r3, #4

08001900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001904:	d3f9      	bcc.n	80018fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001908:	4c0a      	ldr	r4, [pc, #40]	; (8001934 <LoopForever+0x16>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800190c:	e001      	b.n	8001912 <LoopFillZerobss>

0800190e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001910:	3204      	adds	r2, #4

08001912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001914:	d3fb      	bcc.n	800190e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001916:	f001 fa75 	bl	8002e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800191a:	f7ff f9f5 	bl	8000d08 <main>

0800191e <LoopForever>:

LoopForever:
    b LoopForever
 800191e:	e7fe      	b.n	800191e <LoopForever>
  ldr   r0, =_estack
 8001920:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001928:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 800192c:	08007c2c 	.word	0x08007c2c
  ldr r2, =_sbss
 8001930:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8001934:	200004c4 	.word	0x200004c4

08001938 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001938:	e7fe      	b.n	8001938 <BusFault_Handler>
	...

0800193c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	2b00      	cmp	r3, #0
 800194c:	db0b      	blt.n	8001966 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	f003 021f 	and.w	r2, r3, #31
 8001954:	4906      	ldr	r1, [pc, #24]	; (8001970 <__NVIC_EnableIRQ+0x34>)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	2001      	movs	r0, #1
 800195e:	fa00 f202 	lsl.w	r2, r0, r2
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	e000e100 	.word	0xe000e100

08001974 <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrBTimerHandler->ptrTIMx;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a4e      	ldr	r2, [pc, #312]	; (8001abc <BasicTimer_Config+0x148>)
 8001982:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001984:	b672      	cpsid	i
}
 8001986:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();
	/* 1. Activar la señal de reloj del periférico requerido */
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001990:	d106      	bne.n	80019a0 <BasicTimer_Config+0x2c>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001992:	4b4b      	ldr	r3, [pc, #300]	; (8001ac0 <BasicTimer_Config+0x14c>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	4a4a      	ldr	r2, [pc, #296]	; (8001ac0 <BasicTimer_Config+0x14c>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6413      	str	r3, [r2, #64]	; 0x40
 800199e:	e024      	b.n	80019ea <BasicTimer_Config+0x76>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a47      	ldr	r2, [pc, #284]	; (8001ac4 <BasicTimer_Config+0x150>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d106      	bne.n	80019b8 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 80019aa:	4b45      	ldr	r3, [pc, #276]	; (8001ac0 <BasicTimer_Config+0x14c>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	4a44      	ldr	r2, [pc, #272]	; (8001ac0 <BasicTimer_Config+0x14c>)
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	6413      	str	r3, [r2, #64]	; 0x40
 80019b6:	e018      	b.n	80019ea <BasicTimer_Config+0x76>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a42      	ldr	r2, [pc, #264]	; (8001ac8 <BasicTimer_Config+0x154>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d106      	bne.n	80019d0 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 80019c2:	4b3f      	ldr	r3, [pc, #252]	; (8001ac0 <BasicTimer_Config+0x14c>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	4a3e      	ldr	r2, [pc, #248]	; (8001ac0 <BasicTimer_Config+0x14c>)
 80019c8:	f043 0304 	orr.w	r3, r3, #4
 80019cc:	6413      	str	r3, [r2, #64]	; 0x40
 80019ce:	e00c      	b.n	80019ea <BasicTimer_Config+0x76>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a3d      	ldr	r2, [pc, #244]	; (8001acc <BasicTimer_Config+0x158>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d106      	bne.n	80019e8 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 80019da:	4b39      	ldr	r3, [pc, #228]	; (8001ac0 <BasicTimer_Config+0x14c>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	4a38      	ldr	r2, [pc, #224]	; (8001ac0 <BasicTimer_Config+0x14c>)
 80019e0:	f043 0308 	orr.w	r3, r3, #8
 80019e4:	6413      	str	r3, [r2, #64]	; 0x40
 80019e6:	e000      	b.n	80019ea <BasicTimer_Config+0x76>
	}

	else{
		__NOP();
 80019e8:	bf00      	nop
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */
	// -1 porque el contador empieza en 0
	ptrBTimerHandler->ptrTIMx-> PSC = ptrBTimerHandler ->TIMx_Config.TIMx_speed - 1;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	3a01      	subs	r2, #1
 80019f4:	629a      	str	r2, [r3, #40]	; 0x28

	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	791b      	ldrb	r3, [r3, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d112      	bne.n	8001a24 <BasicTimer_Config+0xb0>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Necesitamos poner la direccion en 0 para que cuente hacia arria TIM_CR1_DIR = 1, entonces
		// lo negamos y hacemos una AND con el valor actual.
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0210 	bic.w	r2, r2, #16
 8001a0c:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	3a01      	subs	r2, #1
 8001a18:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24
 8001a22:	e00d      	b.n	8001a40 <BasicTimer_Config+0xcc>

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		// Cuando CR1 = 1 es descendente
		ptrBTimerHandler->ptrTIMx->CR1 = TIM_CR1_DIR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2210      	movs	r2, #16
 8001a2a:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		ptrBTimerHandler-> ptrTIMx->ARR = 0;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2200      	movs	r2, #0
 8001a32:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	3a01      	subs	r2, #1
 8001a3e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0201 	orr.w	r2, r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]
	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	// El registro encargado de la interrupcion es el UIE

	// Modificar con el ciclo If
	ptrBTimerHandler->ptrTIMx->DIER |= ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable; //TIM_DIER_UIE
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7c1b      	ldrb	r3, [r3, #16]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a6c:	d103      	bne.n	8001a76 <BasicTimer_Config+0x102>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8001a6e:	201c      	movs	r0, #28
 8001a70:	f7ff ff64 	bl	800193c <__NVIC_EnableIRQ>
 8001a74:	e01b      	b.n	8001aae <BasicTimer_Config+0x13a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a12      	ldr	r2, [pc, #72]	; (8001ac4 <BasicTimer_Config+0x150>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d103      	bne.n	8001a88 <BasicTimer_Config+0x114>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8001a80:	201d      	movs	r0, #29
 8001a82:	f7ff ff5b 	bl	800193c <__NVIC_EnableIRQ>
 8001a86:	e012      	b.n	8001aae <BasicTimer_Config+0x13a>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0e      	ldr	r2, [pc, #56]	; (8001ac8 <BasicTimer_Config+0x154>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d103      	bne.n	8001a9a <BasicTimer_Config+0x126>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8001a92:	201e      	movs	r0, #30
 8001a94:	f7ff ff52 	bl	800193c <__NVIC_EnableIRQ>
 8001a98:	e009      	b.n	8001aae <BasicTimer_Config+0x13a>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <BasicTimer_Config+0x158>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d103      	bne.n	8001aac <BasicTimer_Config+0x138>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8001aa4:	2032      	movs	r0, #50	; 0x32
 8001aa6:	f7ff ff49 	bl	800193c <__NVIC_EnableIRQ>
 8001aaa:	e000      	b.n	8001aae <BasicTimer_Config+0x13a>
	}

	else{
		__NOP();
 8001aac:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8001aae:	b662      	cpsie	i
}
 8001ab0:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000498 	.word	0x20000498
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40000400 	.word	0x40000400
 8001ac8:	40000800 	.word	0x40000800
 8001acc:	40000c00 	.word	0x40000c00

08001ad0 <BasicTimer2_Callback>:

__attribute__((weak)) void BasicTimer2_Callback(void){
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001ad4:	bf00      	nop
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr

08001ade <BasicTimer3_Callback>:
__attribute__((weak)) void BasicTimer3_Callback(void){
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001ae2:	bf00      	nop
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr

08001aec <BasicTimer4_Callback>:
__attribute__((weak)) void BasicTimer4_Callback(void){
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001af0:	bf00      	nop
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8001afa:	b580      	push	{r7, lr}
 8001afc:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM2->SR &= ~TIM_SR_UIF;
 8001afe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b08:	f023 0301 	bic.w	r3, r3, #1
 8001b0c:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer2_Callback();
 8001b0e:	f7ff ffdf 	bl	8001ad0 <BasicTimer2_Callback>
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM3->SR &= ~TIM_SR_UIF;
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <TIM3_IRQHandler+0x18>)
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	4a03      	ldr	r2, [pc, #12]	; (8001b30 <TIM3_IRQHandler+0x18>)
 8001b22:	f023 0301 	bic.w	r3, r3, #1
 8001b26:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer3_Callback();
 8001b28:	f7ff ffd9 	bl	8001ade <BasicTimer3_Callback>
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40000400 	.word	0x40000400

08001b34 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM4->SR &= ~TIM_SR_UIF;
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <TIM4_IRQHandler+0x18>)
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	4a03      	ldr	r2, [pc, #12]	; (8001b4c <TIM4_IRQHandler+0x18>)
 8001b3e:	f023 0301 	bic.w	r3, r3, #1
 8001b42:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer4_Callback();
 8001b44:	f7ff ffd2 	bl	8001aec <BasicTimer4_Callback>
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40000800 	.word	0x40000800

08001b50 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM5->SR &= ~TIM_SR_UIF;
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <TIM5_IRQHandler+0x18>)
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	4a03      	ldr	r2, [pc, #12]	; (8001b68 <TIM5_IRQHandler+0x18>)
 8001b5a:	f023 0301 	bic.w	r3, r3, #1
 8001b5e:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer5_Callback();
 8001b60:	f7ff fe48 	bl	80017f4 <BasicTimer5_Callback>
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40000c00 	.word	0x40000c00

08001b6c <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemento "activar el periferico o activar la señal de reloj del periferico)
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]

	// 1)Activar el periferico
	//verificamos para GPIOA
	if(pGPIOHandler->pGPIOx == GPIOA){
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a87      	ldr	r2, [pc, #540]	; (8001da0 <GPIO_Config+0x234>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d106      	bne.n	8001b94 <GPIO_Config+0x28>
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 8001b86:	4b87      	ldr	r3, [pc, #540]	; (8001da4 <GPIO_Config+0x238>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a86      	ldr	r2, [pc, #536]	; (8001da4 <GPIO_Config+0x238>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	e03a      	b.n	8001c0a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx == GPIOB){
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a83      	ldr	r2, [pc, #524]	; (8001da8 <GPIO_Config+0x23c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d106      	bne.n	8001bac <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 8001b9e:	4b81      	ldr	r3, [pc, #516]	; (8001da4 <GPIO_Config+0x238>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a80      	ldr	r2, [pc, #512]	; (8001da4 <GPIO_Config+0x238>)
 8001ba4:	f043 0302 	orr.w	r3, r3, #2
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	e02e      	b.n	8001c0a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if(pGPIOHandler->pGPIOx == GPIOC){
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a7e      	ldr	r2, [pc, #504]	; (8001dac <GPIO_Config+0x240>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d106      	bne.n	8001bc4 <GPIO_Config+0x58>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 8001bb6:	4b7b      	ldr	r3, [pc, #492]	; (8001da4 <GPIO_Config+0x238>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a7a      	ldr	r2, [pc, #488]	; (8001da4 <GPIO_Config+0x238>)
 8001bbc:	f043 0304 	orr.w	r3, r3, #4
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	e022      	b.n	8001c0a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if(pGPIOHandler->pGPIOx == GPIOD){
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a79      	ldr	r2, [pc, #484]	; (8001db0 <GPIO_Config+0x244>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d106      	bne.n	8001bdc <GPIO_Config+0x70>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 8001bce:	4b75      	ldr	r3, [pc, #468]	; (8001da4 <GPIO_Config+0x238>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a74      	ldr	r2, [pc, #464]	; (8001da4 <GPIO_Config+0x238>)
 8001bd4:	f043 0308 	orr.w	r3, r3, #8
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	e016      	b.n	8001c0a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if(pGPIOHandler->pGPIOx == GPIOE){
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a74      	ldr	r2, [pc, #464]	; (8001db4 <GPIO_Config+0x248>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d106      	bne.n	8001bf4 <GPIO_Config+0x88>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 8001be6:	4b6f      	ldr	r3, [pc, #444]	; (8001da4 <GPIO_Config+0x238>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a6e      	ldr	r2, [pc, #440]	; (8001da4 <GPIO_Config+0x238>)
 8001bec:	f043 0310 	orr.w	r3, r3, #16
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	e00a      	b.n	8001c0a <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOH
	else if(pGPIOHandler->pGPIOx == GPIOH){
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a6f      	ldr	r2, [pc, #444]	; (8001db8 <GPIO_Config+0x24c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d105      	bne.n	8001c0a <GPIO_Config+0x9e>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 8001bfe:	4b69      	ldr	r3, [pc, #420]	; (8001da4 <GPIO_Config+0x238>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a68      	ldr	r2, [pc, #416]	; (8001da4 <GPIO_Config+0x238>)
 8001c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
	// Despues de activado, podemos comenzar a configurar.

	// 2) COnfigurando el registro GPIOx_MODER
	// Acá estamos leyendo config, moviendo "PinNumber" veces hacia la izquierda
	// ese valor (shift left) y todo eso lo cargamos en la variable auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	795b      	ldrb	r3, [r3, #5]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	791b      	ldrb	r3, [r3, #4]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	60fb      	str	r3, [r7, #12]
	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro
	 * (debemos escribir 0b00) para lo cual aplicamos una mascara y una operación de
	 * bitwise AND
	 */
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	791b      	ldrb	r3, [r3, #4]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	2103      	movs	r1, #3
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	4619      	mov	r1, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	400a      	ands	r2, r1
 8001c38:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6819      	ldr	r1, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	7a1b      	ldrb	r3, [r3, #8]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	791b      	ldrb	r3, [r3, #4]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	791b      	ldrb	r3, [r3, #4]
 8001c64:	4619      	mov	r1, r3
 8001c66:	2301      	movs	r3, #1
 8001c68:	408b      	lsls	r3, r1
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	400a      	ands	r2, r1
 8001c74:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6859      	ldr	r1, [r3, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	799b      	ldrb	r3, [r3, #6]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	791b      	ldrb	r3, [r3, #4]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0B11 << 2 *pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	791b      	ldrb	r3, [r3, #4]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	2103      	movs	r1, #3
 8001ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	4619      	mov	r1, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	400a      	ands	r2, r1
 8001cb4:	609a      	str	r2, [r3, #8]

	//cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6899      	ldr	r1, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull up pull down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	79db      	ldrb	r3, [r3, #7]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	791b      	ldrb	r3, [r3, #4]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	791b      	ldrb	r3, [r3, #4]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	2103      	movs	r1, #3
 8001ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	4619      	mov	r1, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	400a      	ands	r2, r1
 8001cf4:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68d9      	ldr	r1, [r3, #12]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas.. se vera luego
	if (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	795b      	ldrb	r3, [r3, #5]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d143      	bne.n	8001d96 <GPIO_Config+0x22a>

		//Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	791b      	ldrb	r3, [r3, #4]
 8001d12:	2b07      	cmp	r3, #7
 8001d14:	d81f      	bhi.n	8001d56 <GPIO_Config+0x1ea>
			//Estamos en el registro AGRL, que controla los piner del pIN_0 AL PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	791b      	ldrb	r3, [r3, #4]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del tegistro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6a1a      	ldr	r2, [r3, #32]
 8001d24:	210f      	movs	r1, #15
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	4619      	mov	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	400a      	ands	r2, r1
 8001d36:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor confiurado en la posicon seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6a1a      	ldr	r2, [r3, #32]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	7a5b      	ldrb	r3, [r3, #9]
 8001d42:	4619      	mov	r1, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} //Fin del GPIO_Config
 8001d54:	e01f      	b.n	8001d96 <GPIO_Config+0x22a>
			auxPosition = 4* (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber -8);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	791b      	ldrb	r3, [r3, #4]
 8001d5a:	3b08      	subs	r3, #8
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d66:	210f      	movs	r1, #15
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	4619      	mov	r1, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	400a      	ands	r2, r1
 8001d78:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	7a5b      	ldrb	r3, [r3, #9]
 8001d84:	4619      	mov	r1, r3
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	625a      	str	r2, [r3, #36]	; 0x24
} //Fin del GPIO_Config
 8001d96:	bf00      	nop
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	40020000 	.word	0x40020000
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40020400 	.word	0x40020400
 8001dac:	40020800 	.word	0x40020800
 8001db0:	40020c00 	.word	0x40020c00
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40021c00 	.word	0x40021c00

08001dbc <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 *
 */
void GPIO_WritePin(GPIO_Handler_t *pPinHandler, uint8_t newState){
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->0DR &= ~(SET << pPinHandler ->GPIO_PinConfig.GPIO_PinNumber);
	if(newState == SET){
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d10d      	bne.n	8001dea <GPIO_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	699a      	ldr	r2, [r3, #24]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	791b      	ldrb	r3, [r3, #4]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	2301      	movs	r3, #1
 8001ddc:	408b      	lsls	r3, r1
 8001dde:	4619      	mov	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	619a      	str	r2, [r3, #24]
	else{
		//Trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
	}

}
 8001de8:	e00d      	b.n	8001e06 <GPIO_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	699a      	ldr	r2, [r3, #24]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	791b      	ldrb	r3, [r3, #4]
 8001df4:	3310      	adds	r3, #16
 8001df6:	2101      	movs	r1, #1
 8001df8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	619a      	str	r2, [r3, #24]
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr

08001e10 <GPIOxTooglePin>:
	pinValue &= mask;

	return pinValue;
}

void GPIOxTooglePin(GPIO_Handler_t *pPinHandler){
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR ^= (SET <<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	695a      	ldr	r2, [r3, #20]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	791b      	ldrb	r3, [r3, #4]
 8001e22:	4619      	mov	r1, r3
 8001e24:	2301      	movs	r3, #1
 8001e26:	408b      	lsls	r3, r1
 8001e28:	4619      	mov	r1, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	404a      	eors	r2, r1
 8001e30:	615a      	str	r2, [r3, #20]
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <pwm_Config>:
 */

#include "PwmDriver.h"

/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if(ptrPwmHandler->ptrTIMx == TIM2){
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e4c:	d106      	bne.n	8001e5c <pwm_Config+0x20>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001e4e:	4b5a      	ldr	r3, [pc, #360]	; (8001fb8 <pwm_Config+0x17c>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	4a59      	ldr	r2, [pc, #356]	; (8001fb8 <pwm_Config+0x17c>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5a:	e024      	b.n	8001ea6 <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a56      	ldr	r2, [pc, #344]	; (8001fbc <pwm_Config+0x180>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d106      	bne.n	8001e74 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001e66:	4b54      	ldr	r3, [pc, #336]	; (8001fb8 <pwm_Config+0x17c>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	4a53      	ldr	r2, [pc, #332]	; (8001fb8 <pwm_Config+0x17c>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	6413      	str	r3, [r2, #64]	; 0x40
 8001e72:	e018      	b.n	8001ea6 <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a51      	ldr	r2, [pc, #324]	; (8001fc0 <pwm_Config+0x184>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d106      	bne.n	8001e8c <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001e7e:	4b4e      	ldr	r3, [pc, #312]	; (8001fb8 <pwm_Config+0x17c>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	4a4d      	ldr	r2, [pc, #308]	; (8001fb8 <pwm_Config+0x17c>)
 8001e84:	f043 0304 	orr.w	r3, r3, #4
 8001e88:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8a:	e00c      	b.n	8001ea6 <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a4c      	ldr	r2, [pc, #304]	; (8001fc4 <pwm_Config+0x188>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d106      	bne.n	8001ea4 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001e96:	4b48      	ldr	r3, [pc, #288]	; (8001fb8 <pwm_Config+0x17c>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	4a47      	ldr	r2, [pc, #284]	; (8001fb8 <pwm_Config+0x17c>)
 8001e9c:	f043 0308 	orr.w	r3, r3, #8
 8001ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea2:	e000      	b.n	8001ea6 <pwm_Config+0x6a>
	}
	else{
		__NOP();
 8001ea4:	bf00      	nop
	}

	/* 1. Cargamos la frecuencia deseada */
	setFrequency(ptrPwmHandler);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f8de 	bl	8002068 <setFrequency>

	/* 2. Cargamos el valor del dutty-Cycle*/
	setDuttyCycle(ptrPwmHandler);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f8ef 	bl	8002090 <setDuttyCycle>

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0210 	bic.w	r2, r2, #16
 8001ec0:	601a      	str	r2, [r3, #0]
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	791b      	ldrb	r3, [r3, #4]
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d86e      	bhi.n	8001fa8 <pwm_Config+0x16c>
 8001eca:	a201      	add	r2, pc, #4	; (adr r2, 8001ed0 <pwm_Config+0x94>)
 8001ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed0:	08001ee1 	.word	0x08001ee1
 8001ed4:	08001f13 	.word	0x08001f13
 8001ed8:	08001f45 	.word	0x08001f45
 8001edc:	08001f77 	.word	0x08001f77
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~(TIM_CCMR1_CC1S);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699a      	ldr	r2, [r3, #24]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0203 	bic.w	r2, r2, #3
 8001eee:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC1M_Pos);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699a      	ldr	r2, [r3, #24]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001efe:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699a      	ldr	r2, [r3, #24]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0208 	orr.w	r2, r2, #8
 8001f0e:	619a      	str	r2, [r3, #24]

		break;
 8001f10:	e04b      	b.n	8001faa <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~(TIM_CCMR1_CC2S);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	699a      	ldr	r2, [r3, #24]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001f20:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC2M_Pos);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	699a      	ldr	r2, [r3, #24]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001f30:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	699a      	ldr	r2, [r3, #24]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f40:	619a      	str	r2, [r3, #24]
		break;
 8001f42:	e032      	b.n	8001faa <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_3:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~(TIM_CCMR2_CC3S);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	69da      	ldr	r2, [r3, #28]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0203 	bic.w	r2, r2, #3
 8001f52:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC3M_Pos);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	69da      	ldr	r2, [r3, #28]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001f62:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	69da      	ldr	r2, [r3, #28]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0208 	orr.w	r2, r2, #8
 8001f72:	61da      	str	r2, [r3, #28]
		break;
 8001f74:	e019      	b.n	8001faa <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_4:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~(TIM_CCMR2_CC4S);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	69da      	ldr	r2, [r3, #28]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001f84:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC4M_Pos);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	69da      	ldr	r2, [r3, #28]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001f94:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	69da      	ldr	r2, [r3, #28]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fa4:	61da      	str	r2, [r3, #28]
		break;
 8001fa6:	e000      	b.n	8001faa <pwm_Config+0x16e>
	}

	default:{
		break;
 8001fa8:	bf00      	nop
	/* 6. Activamos la salida seleccionada */
	enableOutput(ptrPwmHandler);


	}// fin del switch-case
	setPolarity(ptrPwmHandler);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f8b2 	bl	8002114 <setPolarity>
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40000400 	.word	0x40000400
 8001fc0:	40000800 	.word	0x40000800
 8001fc4:	40000c00 	.word	0x40000c00

08001fc8 <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0201 	orr.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr
	...

08001fec <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
void enableOutput(PWM_Handler_t *ptrPwmHandler) {
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	switch (ptrPwmHandler->config.channel) {
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	791b      	ldrb	r3, [r3, #4]
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d82f      	bhi.n	800205c <enableOutput+0x70>
 8001ffc:	a201      	add	r2, pc, #4	; (adr r2, 8002004 <enableOutput+0x18>)
 8001ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002002:	bf00      	nop
 8002004:	08002015 	.word	0x08002015
 8002008:	08002027 	.word	0x08002027
 800200c:	08002039 	.word	0x08002039
 8002010:	0800204b 	.word	0x0800204b
	case PWM_CHANNEL_1: {
		// Activamos la salida del canal 1
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6a1a      	ldr	r2, [r3, #32]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	621a      	str	r2, [r3, #32]
		break;
 8002024:	e01b      	b.n	800205e <enableOutput+0x72>
	}

	case PWM_CHANNEL_2: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6a1a      	ldr	r2, [r3, #32]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 0210 	orr.w	r2, r2, #16
 8002034:	621a      	str	r2, [r3, #32]
		break;
 8002036:	e012      	b.n	800205e <enableOutput+0x72>
	}

	case PWM_CHANNEL_3: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6a1a      	ldr	r2, [r3, #32]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002046:	621a      	str	r2, [r3, #32]

		break;
 8002048:	e009      	b.n	800205e <enableOutput+0x72>
	}

	case PWM_CHANNEL_4: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6a1a      	ldr	r2, [r3, #32]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002058:	621a      	str	r2, [r3, #32]

		break;
 800205a:	e000      	b.n	800205e <enableOutput+0x72>
	}

	default: {
		break;
 800205c:	bf00      	nop
	}
	}
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <setFrequency>:
/*
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler -1;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	3a01      	subs	r2, #1
 800207a:	629a      	str	r2, [r3, #40]	; 0x28

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.
	ptrPwmHandler->ptrTIMx->ARR = ptrPwmHandler->config.periodo;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	899a      	ldrh	r2, [r3, #12]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
    setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	791b      	ldrb	r3, [r3, #4]
 800209c:	2b03      	cmp	r3, #3
 800209e:	d823      	bhi.n	80020e8 <setDuttyCycle+0x58>
 80020a0:	a201      	add	r2, pc, #4	; (adr r2, 80020a8 <setDuttyCycle+0x18>)
 80020a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a6:	bf00      	nop
 80020a8:	080020b9 	.word	0x080020b9
 80020ac:	080020c5 	.word	0x080020c5
 80020b0:	080020d1 	.word	0x080020d1
 80020b4:	080020dd 	.word	0x080020dd
	case PWM_CHANNEL_1:{
		ptrPwmHandler->ptrTIMx->CCR1 = ptrPwmHandler->config.duttyCicle;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	89da      	ldrh	r2, [r3, #14]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 80020c2:	e012      	b.n	80020ea <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_2:{
		ptrPwmHandler->ptrTIMx->CCR2 = ptrPwmHandler->config.duttyCicle;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	89da      	ldrh	r2, [r3, #14]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80020ce:	e00c      	b.n	80020ea <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_3:{
		ptrPwmHandler->ptrTIMx->CCR3 = ptrPwmHandler->config.duttyCicle;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	89da      	ldrh	r2, [r3, #14]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80020da:	e006      	b.n	80020ea <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_4:{
		ptrPwmHandler->ptrTIMx->CCR4 = ptrPwmHandler->config.duttyCicle;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	89da      	ldrh	r2, [r3, #14]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80020e6:	e000      	b.n	80020ea <setDuttyCycle+0x5a>
	}

	default:{
		break;
 80020e8:	bf00      	nop
	}

	}// fin del switch-case

}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <updateDuttyCycle>:


/* Función para actualizar el Dutty, funciona de la mano con setDuttyCycle */
void updateDuttyCycle(PWM_Handler_t *ptrPwmHandler, uint16_t newDutty){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	807b      	strh	r3, [r7, #2]
	// Actualizamos el registro que manipula el dutty
	ptrPwmHandler->config.duttyCicle = newDutty;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	887a      	ldrh	r2, [r7, #2]
 8002104:	81da      	strh	r2, [r3, #14]

	// Llamamos a la fucnión que cambia el dutty y cargamos el nuevo valor
	setDuttyCycle(ptrPwmHandler);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff ffc2 	bl	8002090 <setDuttyCycle>
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <setPolarity>:

void setPolarity(PWM_Handler_t *ptrPwmHandler){
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

	if(ptrPwmHandler->config.polarity == PWM_POLARITY_ACTIVE_LOW){
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	7c1b      	ldrb	r3, [r3, #16]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d133      	bne.n	800218c <setPolarity+0x78>
		//Estamos en active low por ende debemos configurar el canal
		//segun esta polaridad

		switch (ptrPwmHandler->config.channel) {
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	791b      	ldrb	r3, [r3, #4]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d863      	bhi.n	80021f4 <setPolarity+0xe0>
 800212c:	a201      	add	r2, pc, #4	; (adr r2, 8002134 <setPolarity+0x20>)
 800212e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002132:	bf00      	nop
 8002134:	08002145 	.word	0x08002145
 8002138:	08002157 	.word	0x08002157
 800213c:	08002169 	.word	0x08002169
 8002140:	0800217b 	.word	0x0800217b

			case PWM_CHANNEL_1: {
				// Configuramos la polaridad del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P_Msk;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6a1a      	ldr	r2, [r3, #32]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0202 	orr.w	r2, r2, #2
 8002152:	621a      	str	r2, [r3, #32]

				break;
 8002154:	e051      	b.n	80021fa <setPolarity+0xe6>
			}

			case PWM_CHANNEL_2: {
				// Configuramos la polaridad del canal 2
				ptrPwmHandler->ptrTIMx->CCER  |= TIM_CCER_CC2P_Msk;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6a1a      	ldr	r2, [r3, #32]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f042 0220 	orr.w	r2, r2, #32
 8002164:	621a      	str	r2, [r3, #32]

				break;
 8002166:	e048      	b.n	80021fa <setPolarity+0xe6>
			}

			case PWM_CHANNEL_3: {
				// Configuramos la polaridad del canal 3
				ptrPwmHandler->ptrTIMx->CCER  |= TIM_CCER_CC3P_Msk;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6a1a      	ldr	r2, [r3, #32]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002176:	621a      	str	r2, [r3, #32]

				break;
 8002178:	e03f      	b.n	80021fa <setPolarity+0xe6>
			}

			case PWM_CHANNEL_4: {
				// Configuramos la polaridad del canal 4
				ptrPwmHandler->ptrTIMx->CCER  |= TIM_CCER_CC4P_Msk;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6a1a      	ldr	r2, [r3, #32]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002188:	621a      	str	r2, [r3, #32]

				break;
 800218a:	e036      	b.n	80021fa <setPolarity+0xe6>

	else {
		//Estamos en active high por ende debemos configurar el canal
		//segun esta polaridad. Este sera nuestra polaridad por defecto

		switch (ptrPwmHandler->config.channel) {
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	791b      	ldrb	r3, [r3, #4]
 8002190:	2b03      	cmp	r3, #3
 8002192:	d831      	bhi.n	80021f8 <setPolarity+0xe4>
 8002194:	a201      	add	r2, pc, #4	; (adr r2, 800219c <setPolarity+0x88>)
 8002196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219a:	bf00      	nop
 800219c:	080021ad 	.word	0x080021ad
 80021a0:	080021bf 	.word	0x080021bf
 80021a4:	080021d1 	.word	0x080021d1
 80021a8:	080021e3 	.word	0x080021e3

			case PWM_CHANNEL_1: {
				// Configuramos la polaridad del canal 1
				ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P_Msk;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6a1a      	ldr	r2, [r3, #32]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0202 	bic.w	r2, r2, #2
 80021ba:	621a      	str	r2, [r3, #32]

				break;
 80021bc:	e01d      	b.n	80021fa <setPolarity+0xe6>
			}

			case PWM_CHANNEL_2: {
				// Configuramos la polaridad del canal 2
				ptrPwmHandler->ptrTIMx->CCER  &= ~TIM_CCER_CC2P_Msk;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6a1a      	ldr	r2, [r3, #32]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0220 	bic.w	r2, r2, #32
 80021cc:	621a      	str	r2, [r3, #32]

				break;
 80021ce:	e014      	b.n	80021fa <setPolarity+0xe6>
			}

			case PWM_CHANNEL_3: {
				// Configuramos la polaridad del canal 3
				ptrPwmHandler->ptrTIMx->CCER  &= ~TIM_CCER_CC3P_Msk;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6a1a      	ldr	r2, [r3, #32]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021de:	621a      	str	r2, [r3, #32]

				break;
 80021e0:	e00b      	b.n	80021fa <setPolarity+0xe6>
			}

			case PWM_CHANNEL_4: {
				// Configuramos la polaridad del canal 4
				ptrPwmHandler->ptrTIMx->CCER  &= ~TIM_CCER_CC4P_Msk;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6a1a      	ldr	r2, [r3, #32]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021f0:	621a      	str	r2, [r3, #32]

				break;
 80021f2:	e002      	b.n	80021fa <setPolarity+0xe6>
				break;
 80021f4:	bf00      	nop
 80021f6:	e000      	b.n	80021fa <setPolarity+0xe6>
			}

			default: {
				break;
 80021f8:	bf00      	nop
			}
		}//Fin del switch case
	}

}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <__NVIC_EnableIRQ>:
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	2b00      	cmp	r3, #0
 8002214:	db0b      	blt.n	800222e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	f003 021f 	and.w	r2, r3, #31
 800221c:	4906      	ldr	r1, [pc, #24]	; (8002238 <__NVIC_EnableIRQ+0x34>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	2001      	movs	r0, #1
 8002226:	fa00 f202 	lsl.w	r2, r0, r2
 800222a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	e000e100 	.word	0xe000e100

0800223c <USART_Config>:
 */

// Esta variable es necesaria para las interrupciones del USART 2 y 6.
uint8_t auxRxData = 0;

void USART_Config(USART_Handler_t *ptrUsartHandler){
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002244:	b672      	cpsid	i
}
 8002246:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a8c      	ldr	r2, [pc, #560]	; (8002480 <USART_Config+0x244>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d106      	bne.n	8002260 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8002252:	4b8c      	ldr	r3, [pc, #560]	; (8002484 <USART_Config+0x248>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	4a8b      	ldr	r2, [pc, #556]	; (8002484 <USART_Config+0x248>)
 8002258:	f043 0310 	orr.w	r3, r3, #16
 800225c:	6453      	str	r3, [r2, #68]	; 0x44
 800225e:	e016      	b.n	800228e <USART_Config+0x52>
	}else if(ptrUsartHandler->ptrUSARTx == USART6){
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a88      	ldr	r2, [pc, #544]	; (8002488 <USART_Config+0x24c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d106      	bne.n	8002278 <USART_Config+0x3c>
		/*Configuramos el USART 6 que está en el mismo bus del USART 1 */
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 800226a:	4b86      	ldr	r3, [pc, #536]	; (8002484 <USART_Config+0x248>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	4a85      	ldr	r2, [pc, #532]	; (8002484 <USART_Config+0x248>)
 8002270:	f043 0320 	orr.w	r3, r3, #32
 8002274:	6453      	str	r3, [r2, #68]	; 0x44
 8002276:	e00a      	b.n	800228e <USART_Config+0x52>
		// Luego el USART 2 que está en el bus 1.
	}else if(ptrUsartHandler->ptrUSARTx == USART2){
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a83      	ldr	r2, [pc, #524]	; (800248c <USART_Config+0x250>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d105      	bne.n	800228e <USART_Config+0x52>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8002282:	4b80      	ldr	r3, [pc, #512]	; (8002484 <USART_Config+0x248>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	4a7f      	ldr	r2, [pc, #508]	; (8002484 <USART_Config+0x248>)
 8002288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800228c:	6413      	str	r3, [r2, #64]	; 0x40
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2200      	movs	r2, #0
 8002294:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2200      	movs	r2, #0
 800229c:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	79db      	ldrb	r3, [r3, #7]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d025      	beq.n	80022f2 <USART_Config+0xb6>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	79db      	ldrb	r3, [r3, #7]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d110      	bne.n	80022d0 <USART_Config+0x94>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022bc:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	e018      	b.n	8002302 <USART_Config+0xc6>

		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022de:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022ee:	60da      	str	r2, [r3, #12]
 80022f0:	e007      	b.n	8002302 <USART_Config+0xc6>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002300:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize ==USART_DATASIZE_8BIT){
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	799b      	ldrb	r3, [r3, #6]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d115      	bne.n	8002336 <USART_Config+0xfa>

	    	// Inicialmente debe corroborarse si se quiere o no la paridad.
	    	if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_NONE){
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	79db      	ldrb	r3, [r3, #7]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d108      	bne.n	8002324 <USART_Config+0xe8>
	    		// Si se quieren datos de 8 bits.
	    		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	e010      	b.n	8002346 <USART_Config+0x10a>
	    	}
	    	else{
	    		// Si la partidad esta activada, se agrega un BIT adicional.
	    		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002332:	60da      	str	r2, [r3, #12]
 8002334:	e007      	b.n	8002346 <USART_Config+0x10a>
	    	}
	    }
	    else{
	    	// Se configuran 9 bits para el tamaño.
	    	ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002344:	60da      	str	r2, [r3, #12]
	    }

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	7a1b      	ldrb	r3, [r3, #8]
 800234a:	2b03      	cmp	r3, #3
 800234c:	d84e      	bhi.n	80023ec <USART_Config+0x1b0>
 800234e:	a201      	add	r2, pc, #4	; (adr r2, 8002354 <USART_Config+0x118>)
 8002350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002354:	08002365 	.word	0x08002365
 8002358:	08002387 	.word	0x08002387
 800235c:	080023a9 	.word	0x080023a9
 8002360:	080023cb 	.word	0x080023cb
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002372:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	691a      	ldr	r2, [r3, #16]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002382:	611a      	str	r2, [r3, #16]
		break;
 8002384:	e043      	b.n	800240e <USART_Config+0x1d2>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002394:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	691a      	ldr	r2, [r3, #16]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023a4:	611a      	str	r2, [r3, #16]
		break;
 80023a6:	e032      	b.n	800240e <USART_Config+0x1d2>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023b6:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023c6:	611a      	str	r2, [r3, #16]
		break;
 80023c8:	e021      	b.n	800240e <USART_Config+0x1d2>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023d8:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023e8:	611a      	str	r2, [r3, #16]
		break;
 80023ea:	e010      	b.n	800240e <USART_Config+0x1d2>
	}
	default: {
		// En el caso por defecto seleccionamos 1 bit de parada
		// Escriba acá su código
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	691a      	ldr	r2, [r3, #16]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023fa:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800240a:	611a      	str	r2, [r3, #16]
		break;
 800240c:	bf00      	nop
	 * decida utilizar el usuario. La función getConfig() retorna esta
	 * frecuencia en que se encuentra actualmente el reloj del sistema PLL,
	 * por tanto, se considera un condicional que incluye los cálculos para
	 * la frecuencia de 100 MHz y por defecto recurre a la frecuencia natural.
	 */
	if(actualFrecuency == 100000000){
 800240e:	f000 fcd7 	bl	8002dc0 <getConfigPLL>
 8002412:	4603      	mov	r3, r0
 8002414:	4a1e      	ldr	r2, [pc, #120]	; (8002490 <USART_Config+0x254>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d11d      	bne.n	8002456 <USART_Config+0x21a>
		// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
		if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	795b      	ldrb	r3, [r3, #5]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d105      	bne.n	800242e <USART_Config+0x1f2>
			// El valor a cargar es 651.041 -> Mantiza = 651,fraction = 0.041
			// Mantiza = 651 = 0x28b, fraction = 16 * 0.041 = 1
			// Valor a cargar 0x28B1
			// Configurando el Baudrate generator para una velocidad de 9600bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x28B1;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f642 02b1 	movw	r2, #10417	; 0x28b1
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	e03a      	b.n	80024a4 <USART_Config+0x268>
		}

		else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	795b      	ldrb	r3, [r3, #5]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d105      	bne.n	8002442 <USART_Config+0x206>
			// El valor a cargar es 325.520 -> Mantiza = 325,fraction = 0.520
			// Mantiza = 325 = 0x145, fraction = 16 * 0.520 = 8
			// Valor a cargar 0x1458
			ptrUsartHandler->ptrUSARTx->BRR = 0x1458;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f241 4258 	movw	r2, #5208	; 0x1458
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	e030      	b.n	80024a4 <USART_Config+0x268>
		}

		else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	795b      	ldrb	r3, [r3, #5]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d12c      	bne.n	80024a4 <USART_Config+0x268>
			// El valor a cargar es 54.253 -> Mantiza = 54,fraction = 0.253
			// Mantiza = 54 = 0x36, fraction = 16 * 0.253 = 4.
			ptrUsartHandler->ptrUSARTx->BRR = 0x364;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f44f 7259 	mov.w	r2, #868	; 0x364
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	e026      	b.n	80024a4 <USART_Config+0x268>
		}
	// Caso por defecto de 16 MHz.
	}else{
		// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
		if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	795b      	ldrb	r3, [r3, #5]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d105      	bne.n	800246a <USART_Config+0x22e>
			// El valor a cargar es 104.1875 -> Mantiza = 104,fraction = 0.1875
			// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
			// Valor a cargar 0x0683
			// Configurando el Baudrate generator para una velocidad de 9600bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f240 6283 	movw	r2, #1667	; 0x683
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	e01c      	b.n	80024a4 <USART_Config+0x268>
		}

		else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	795b      	ldrb	r3, [r3, #5]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d110      	bne.n	8002494 <USART_Config+0x258>
			// El valor a cargar es 52.0625 -> Mantiza = 52,fraction = 0.0625
			// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
			// Escriba acá su código y los comentarios que faltan
			// Valor a cargar 0x0341
			ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f240 3241 	movw	r2, #833	; 0x341
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	e012      	b.n	80024a4 <USART_Config+0x268>
 800247e:	bf00      	nop
 8002480:	40011000 	.word	0x40011000
 8002484:	40023800 	.word	0x40023800
 8002488:	40011400 	.word	0x40011400
 800248c:	40004400 	.word	0x40004400
 8002490:	05f5e100 	.word	0x05f5e100
		}

		else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	795b      	ldrb	r3, [r3, #5]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d103      	bne.n	80024a4 <USART_Config+0x268>
			// Escriba acá su código y los comentarios que faltan
			// El valor a cargar es 8.6875 -> Mantiza = 8,fraction = 0.6875
			// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11 = B.
			ptrUsartHandler->ptrUSARTx->BRR = 0x008B;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	228b      	movs	r2, #139	; 0x8b
 80024a2:	609a      	str	r2, [r3, #8]
		}
	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	791b      	ldrb	r3, [r3, #4]
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d847      	bhi.n	800253c <USART_Config+0x300>
 80024ac:	a201      	add	r2, pc, #4	; (adr r2, 80024b4 <USART_Config+0x278>)
 80024ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b2:	bf00      	nop
 80024b4:	080024c5 	.word	0x080024c5
 80024b8:	080024d7 	.word	0x080024d7
 80024bc:	080024e9 	.word	0x080024e9
 80024c0:	0800250b 	.word	0x0800250b
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_TE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0208 	orr.w	r2, r2, #8
 80024d2:	60da      	str	r2, [r3, #12]
		break;
 80024d4:	e04b      	b.n	800256e <USART_Config+0x332>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_RE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 0204 	orr.w	r2, r2, #4
 80024e4:	60da      	str	r2, [r3, #12]
		break;
 80024e6:	e042      	b.n	800256e <USART_Config+0x332>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmision como recepcion
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_TE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0208 	orr.w	r2, r2, #8
 80024f6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_RE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0204 	orr.w	r2, r2, #4
 8002506:	60da      	str	r2, [r3, #12]
		break;
 8002508:	e031      	b.n	800256e <USART_Config+0x332>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		// Escriba acá su código
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0204 	bic.w	r2, r2, #4
 8002518:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0208 	bic.w	r2, r2, #8
 8002528:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002538:	60da      	str	r2, [r3, #12]
		break;
 800253a:	e018      	b.n	800256e <USART_Config+0x332>
	}

	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0204 	bic.w	r2, r2, #4
 800254a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0208 	bic.w	r2, r2, #8
 800255a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800256a:	60da      	str	r2, [r3, #12]
		break;
 800256c:	bf00      	nop
	}
	}

	// 2.7 Activamos el módulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	791b      	ldrb	r3, [r3, #4]
 8002572:	2b03      	cmp	r3, #3
 8002574:	d007      	beq.n	8002586 <USART_Config+0x34a>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002584:	60da      	str	r2, [r3, #12]
	}
	// Se verifica la activación de la interrupcion Rx
	if (ptrUsartHandler->ptrUSARTx == USART1){
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a28      	ldr	r2, [pc, #160]	; (800262c <USART_Config+0x3f0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d03a      	beq.n	8002606 <USART_Config+0x3ca>
	}

	/* 1.2 Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2) {
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a26      	ldr	r2, [pc, #152]	; (8002630 <USART_Config+0x3f4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d118      	bne.n	80025cc <USART_Config+0x390>
		if (ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE) {
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	7a5b      	ldrb	r3, [r3, #9]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d10b      	bne.n	80025ba <USART_Config+0x37e>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0220 	orr.w	r2, r2, #32
 80025b0:	60da      	str	r2, [r3, #12]
			NVIC_EnableIRQ(USART2_IRQn);
 80025b2:	2026      	movs	r0, #38	; 0x26
 80025b4:	f7ff fe26 	bl	8002204 <__NVIC_EnableIRQ>
 80025b8:	e025      	b.n	8002606 <USART_Config+0x3ca>
		} else {
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0220 	bic.w	r2, r2, #32
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	e01c      	b.n	8002606 <USART_Config+0x3ca>
		}
	}

	/* 1.3 Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6) {
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a18      	ldr	r2, [pc, #96]	; (8002634 <USART_Config+0x3f8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d117      	bne.n	8002606 <USART_Config+0x3ca>
		if (ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE) {
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	7a5b      	ldrb	r3, [r3, #9]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d10b      	bne.n	80025f6 <USART_Config+0x3ba>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f042 0220 	orr.w	r2, r2, #32
 80025ec:	60da      	str	r2, [r3, #12]
			NVIC_EnableIRQ(USART6_IRQn);
 80025ee:	2047      	movs	r0, #71	; 0x47
 80025f0:	f7ff fe08 	bl	8002204 <__NVIC_EnableIRQ>
 80025f4:	e007      	b.n	8002606 <USART_Config+0x3ca>
		} else {
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0220 	bic.w	r2, r2, #32
 8002604:	60da      	str	r2, [r3, #12]
		}
	}

	// 2.8 Activamos el módulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	791b      	ldrb	r3, [r3, #4]
 800260a:	2b03      	cmp	r3, #3
 800260c:	d007      	beq.n	800261e <USART_Config+0x3e2>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800261c:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800261e:	b662      	cpsie	i
}
 8002620:	bf00      	nop
	}

	// Activamos las interrupciones globales
	__enable_irq();
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40011000 	.word	0x40011000
 8002630:	40004400 	.word	0x40004400
 8002634:	40011400 	.word	0x40011400

08002638 <usart6Rx_Callback>:
	            the usart2Rx_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void usart6Rx_Callback(void){
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the usart6Rx_Callback could be implemented in the main file
	   */
	__NOP();
 800263c:	bf00      	nop
}
 800263e:	bf00      	nop
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr

08002646 <writeChar>:

/* funcion para escribir un solo char */
int writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8002650:	e000      	b.n	8002654 <writeChar+0xe>
		__NOP();
 8002652:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f7      	beq.n	8002652 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	605a      	str	r2, [r3, #4]

	return dataToSend;
 800266a:	683b      	ldr	r3, [r7, #0]
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr

08002676 <writeMsg>:

// función para escribir un mensaje
void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	6039      	str	r1, [r7, #0]
	while(*msgToSend != '\0'){
 8002680:	e008      	b.n	8002694 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	4619      	mov	r1, r3
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff ffdc 	bl	8002646 <writeChar>
		msgToSend++;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	3301      	adds	r3, #1
 8002692:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f2      	bne.n	8002682 <writeMsg+0xc>
	}
}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <getRxData>:

// función auxiliar
uint8_t getRxData(void){
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
	return auxRxData;
 80026ac:	4b02      	ldr	r3, [pc, #8]	; (80026b8 <getRxData+0x10>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr
 80026b8:	2000049c 	.word	0x2000049c

080026bc <USART2_IRQHandler>:

/* INTERRUPCIONES DEL USART */
// Se debe crear una variable auxiliar para la lectura que se declara al inicio.

/* Para el USART 2 */
void USART2_IRQHandler(void){
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
	// Se evalúa si la interrupción que se dio es por RX
	if(USART2->SR & USART_SR_RXNE){
 80026c0:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <USART2_IRQHandler+0x30>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00c      	beq.n	80026e6 <USART2_IRQHandler+0x2a>
		USART2->SR &= ~USART_SR_RXNE;
 80026cc:	4b07      	ldr	r3, [pc, #28]	; (80026ec <USART2_IRQHandler+0x30>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a06      	ldr	r2, [pc, #24]	; (80026ec <USART2_IRQHandler+0x30>)
 80026d2:	f023 0320 	bic.w	r3, r3, #32
 80026d6:	6013      	str	r3, [r2, #0]
		auxRxData = (uint8_t) USART2->DR;
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <USART2_IRQHandler+0x30>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <USART2_IRQHandler+0x34>)
 80026e0:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 80026e2:	f7ff f8a5 	bl	8001830 <usart2Rx_Callback>
	}
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40004400 	.word	0x40004400
 80026f0:	2000049c 	.word	0x2000049c

080026f4 <USART6_IRQHandler>:

/* Para el USART 6 */
void USART6_IRQHandler(void){
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
	// Evaluamos que la interrupción que se dio es por RX
	if(USART6->SR & USART_SR_RXNE){
 80026f8:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <USART6_IRQHandler+0x30>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0320 	and.w	r3, r3, #32
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00c      	beq.n	800271e <USART6_IRQHandler+0x2a>
		USART6->SR &= ~USART_SR_RXNE;
 8002704:	4b07      	ldr	r3, [pc, #28]	; (8002724 <USART6_IRQHandler+0x30>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a06      	ldr	r2, [pc, #24]	; (8002724 <USART6_IRQHandler+0x30>)
 800270a:	f023 0320 	bic.w	r3, r3, #32
 800270e:	6013      	str	r3, [r2, #0]
		auxRxData = (uint8_t) USART6->DR;
 8002710:	4b04      	ldr	r3, [pc, #16]	; (8002724 <USART6_IRQHandler+0x30>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	b2da      	uxtb	r2, r3
 8002716:	4b04      	ldr	r3, [pc, #16]	; (8002728 <USART6_IRQHandler+0x34>)
 8002718:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 800271a:	f7ff ff8d 	bl	8002638 <usart6Rx_Callback>
	}
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40011400 	.word	0x40011400
 8002728:	2000049c 	.word	0x2000049c

0800272c <__NVIC_EnableIRQ>:
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273a:	2b00      	cmp	r3, #0
 800273c:	db0b      	blt.n	8002756 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	f003 021f 	and.w	r2, r3, #31
 8002744:	4906      	ldr	r1, [pc, #24]	; (8002760 <__NVIC_EnableIRQ+0x34>)
 8002746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274a:	095b      	lsrs	r3, r3, #5
 800274c:	2001      	movs	r0, #1
 800274e:	fa00 f202 	lsl.w	r2, r0, r2
 8002752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr
 8002760:	e000e100 	.word	0xe000e100

08002764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	6039      	str	r1, [r7, #0]
 800276e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002774:	2b00      	cmp	r3, #0
 8002776:	db0a      	blt.n	800278e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	b2da      	uxtb	r2, r3
 800277c:	490c      	ldr	r1, [pc, #48]	; (80027b0 <__NVIC_SetPriority+0x4c>)
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	0112      	lsls	r2, r2, #4
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	440b      	add	r3, r1
 8002788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800278c:	e00a      	b.n	80027a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	b2da      	uxtb	r2, r3
 8002792:	4908      	ldr	r1, [pc, #32]	; (80027b4 <__NVIC_SetPriority+0x50>)
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	3b04      	subs	r3, #4
 800279c:	0112      	lsls	r2, r2, #4
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	440b      	add	r3, r1
 80027a2:	761a      	strb	r2, [r3, #24]
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	e000e100 	.word	0xe000e100
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <getADC>:
/*
 * Función que retorna el ultimo dato adquirido por la ADC
 * La idea es que esta función es llamada desde la función callback, de forma que
 * siempre se obtiene el valor mas actual de la conversión ADC.
 * */
uint16_t getADC(void){
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
	// Esta variable es actualizada en la ISR de la conversión, cada vez que se obtiene
	// un nuevo valor.
	return adcRawData;
 80027bc:	4b02      	ldr	r3, [pc, #8]	; (80027c8 <getADC+0x10>)
 80027be:	881b      	ldrh	r3, [r3, #0]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr
 80027c8:	2000049e 	.word	0x2000049e

080027cc <ADC_IRQHandler>:

/*
 * Esta es la ISR de la interrupción por conversión ADC
 */
void ADC_IRQHandler(void){
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
	// Evaluamos que se dio la interrupción por conversión ADC
	if(ADC1->SR & ADC_SR_EOC){
 80027d0:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <ADC_IRQHandler+0x24>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d006      	beq.n	80027ea <ADC_IRQHandler+0x1e>
		// Leemos el resultado de la conversión ADC y lo cargamos en una variale auxiliar
		// la cual es utilizada en la función getADC()
		adcRawData = ADC1->DR;
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <ADC_IRQHandler+0x24>)
 80027de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <ADC_IRQHandler+0x28>)
 80027e4:	801a      	strh	r2, [r3, #0]

		// Hacemos el llamado a la función que se ejecutará en el main
		adcComplete_Callback();
 80027e6:	f7ff f82f 	bl	8001848 <adcComplete_Callback>
	}

}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40012000 	.word	0x40012000
 80027f4:	2000049e 	.word	0x2000049e

080027f8 <configAnalogPin>:
/*
 * Con esta función configuramos que pin deseamos que funcione como canal ADC
 * Esta funcion trabaja con el GPIOxDriver, por lo cual requiere que se incluya
 * dicho driver.
 */
void configAnalogPin(uint8_t adcChannel){
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	71fb      	strb	r3, [r7, #7]

	// Con este switch seleccionamos el canal y lo configuramos como análogo.
	switch (adcChannel) {
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	2b0f      	cmp	r3, #15
 8002806:	f200 8093 	bhi.w	8002930 <configAnalogPin+0x138>
 800280a:	a201      	add	r2, pc, #4	; (adr r2, 8002810 <configAnalogPin+0x18>)
 800280c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002810:	08002851 	.word	0x08002851
 8002814:	0800285f 	.word	0x0800285f
 8002818:	0800286d 	.word	0x0800286d
 800281c:	0800287b 	.word	0x0800287b
 8002820:	08002889 	.word	0x08002889
 8002824:	08002897 	.word	0x08002897
 8002828:	080028a5 	.word	0x080028a5
 800282c:	080028b3 	.word	0x080028b3
 8002830:	080028c1 	.word	0x080028c1
 8002834:	080028cf 	.word	0x080028cf
 8002838:	080028dd 	.word	0x080028dd
 800283c:	080028eb 	.word	0x080028eb
 8002840:	080028f9 	.word	0x080028f9
 8002844:	08002907 	.word	0x08002907
 8002848:	08002915 	.word	0x08002915
 800284c:	08002923 	.word	0x08002923
	 * asignar. (Esto está más o menos en la página 40 del datasheet del micro)
	 */

	case ADC_CHANNEL_0: {
		// Es el pin PA0
		handlerAdcPin.pGPIOx 						= GPIOA;
 8002850:	4b3d      	ldr	r3, [pc, #244]	; (8002948 <configAnalogPin+0x150>)
 8002852:	4a3e      	ldr	r2, [pc, #248]	; (800294c <configAnalogPin+0x154>)
 8002854:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8002856:	4b3c      	ldr	r3, [pc, #240]	; (8002948 <configAnalogPin+0x150>)
 8002858:	2200      	movs	r2, #0
 800285a:	711a      	strb	r2, [r3, #4]
		// Nota: Para el ejercicio inicial solo se necesita este canal, los demas
		// se necesitan para trabajos posteriores.
		break;
 800285c:	e069      	b.n	8002932 <configAnalogPin+0x13a>
	}
		;

	case ADC_CHANNEL_1: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx						= GPIOA;
 800285e:	4b3a      	ldr	r3, [pc, #232]	; (8002948 <configAnalogPin+0x150>)
 8002860:	4a3a      	ldr	r2, [pc, #232]	; (800294c <configAnalogPin+0x154>)
 8002862:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8002864:	4b38      	ldr	r3, [pc, #224]	; (8002948 <configAnalogPin+0x150>)
 8002866:	2201      	movs	r2, #1
 8002868:	711a      	strb	r2, [r3, #4]

		break;
 800286a:	e062      	b.n	8002932 <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_2: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 800286c:	4b36      	ldr	r3, [pc, #216]	; (8002948 <configAnalogPin+0x150>)
 800286e:	4a37      	ldr	r2, [pc, #220]	; (800294c <configAnalogPin+0x154>)
 8002870:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8002872:	4b35      	ldr	r3, [pc, #212]	; (8002948 <configAnalogPin+0x150>)
 8002874:	2202      	movs	r2, #2
 8002876:	711a      	strb	r2, [r3, #4]

		break;
 8002878:	e05b      	b.n	8002932 <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_3: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 800287a:	4b33      	ldr	r3, [pc, #204]	; (8002948 <configAnalogPin+0x150>)
 800287c:	4a33      	ldr	r2, [pc, #204]	; (800294c <configAnalogPin+0x154>)
 800287e:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8002880:	4b31      	ldr	r3, [pc, #196]	; (8002948 <configAnalogPin+0x150>)
 8002882:	2203      	movs	r2, #3
 8002884:	711a      	strb	r2, [r3, #4]

		break;
 8002886:	e054      	b.n	8002932 <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_4: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 8002888:	4b2f      	ldr	r3, [pc, #188]	; (8002948 <configAnalogPin+0x150>)
 800288a:	4a30      	ldr	r2, [pc, #192]	; (800294c <configAnalogPin+0x154>)
 800288c:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 800288e:	4b2e      	ldr	r3, [pc, #184]	; (8002948 <configAnalogPin+0x150>)
 8002890:	2204      	movs	r2, #4
 8002892:	711a      	strb	r2, [r3, #4]

		break;
 8002894:	e04d      	b.n	8002932 <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_5: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 8002896:	4b2c      	ldr	r3, [pc, #176]	; (8002948 <configAnalogPin+0x150>)
 8002898:	4a2c      	ldr	r2, [pc, #176]	; (800294c <configAnalogPin+0x154>)
 800289a:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 800289c:	4b2a      	ldr	r3, [pc, #168]	; (8002948 <configAnalogPin+0x150>)
 800289e:	2205      	movs	r2, #5
 80028a0:	711a      	strb	r2, [r3, #4]

		break;
 80028a2:	e046      	b.n	8002932 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_6: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 80028a4:	4b28      	ldr	r3, [pc, #160]	; (8002948 <configAnalogPin+0x150>)
 80028a6:	4a29      	ldr	r2, [pc, #164]	; (800294c <configAnalogPin+0x154>)
 80028a8:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_6;
 80028aa:	4b27      	ldr	r3, [pc, #156]	; (8002948 <configAnalogPin+0x150>)
 80028ac:	2206      	movs	r2, #6
 80028ae:	711a      	strb	r2, [r3, #4]

		break;
 80028b0:	e03f      	b.n	8002932 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_7: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 80028b2:	4b25      	ldr	r3, [pc, #148]	; (8002948 <configAnalogPin+0x150>)
 80028b4:	4a25      	ldr	r2, [pc, #148]	; (800294c <configAnalogPin+0x154>)
 80028b6:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_7;
 80028b8:	4b23      	ldr	r3, [pc, #140]	; (8002948 <configAnalogPin+0x150>)
 80028ba:	2207      	movs	r2, #7
 80028bc:	711a      	strb	r2, [r3, #4]

		break;
 80028be:	e038      	b.n	8002932 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_8: {
		//Es el pin PB0
		handlerAdcPin.pGPIOx 						= GPIOB;
 80028c0:	4b21      	ldr	r3, [pc, #132]	; (8002948 <configAnalogPin+0x150>)
 80028c2:	4a23      	ldr	r2, [pc, #140]	; (8002950 <configAnalogPin+0x158>)
 80028c4:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 80028c6:	4b20      	ldr	r3, [pc, #128]	; (8002948 <configAnalogPin+0x150>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	711a      	strb	r2, [r3, #4]
		break;
 80028cc:	e031      	b.n	8002932 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_9: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOB;
 80028ce:	4b1e      	ldr	r3, [pc, #120]	; (8002948 <configAnalogPin+0x150>)
 80028d0:	4a1f      	ldr	r2, [pc, #124]	; (8002950 <configAnalogPin+0x158>)
 80028d2:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 80028d4:	4b1c      	ldr	r3, [pc, #112]	; (8002948 <configAnalogPin+0x150>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	711a      	strb	r2, [r3, #4]

		break;
 80028da:	e02a      	b.n	8002932 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_10: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 80028dc:	4b1a      	ldr	r3, [pc, #104]	; (8002948 <configAnalogPin+0x150>)
 80028de:	4a1d      	ldr	r2, [pc, #116]	; (8002954 <configAnalogPin+0x15c>)
 80028e0:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 80028e2:	4b19      	ldr	r3, [pc, #100]	; (8002948 <configAnalogPin+0x150>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	711a      	strb	r2, [r3, #4]

		break;
 80028e8:	e023      	b.n	8002932 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_11: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 80028ea:	4b17      	ldr	r3, [pc, #92]	; (8002948 <configAnalogPin+0x150>)
 80028ec:	4a19      	ldr	r2, [pc, #100]	; (8002954 <configAnalogPin+0x15c>)
 80028ee:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 80028f0:	4b15      	ldr	r3, [pc, #84]	; (8002948 <configAnalogPin+0x150>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	711a      	strb	r2, [r3, #4]

		break;
 80028f6:	e01c      	b.n	8002932 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_12: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 80028f8:	4b13      	ldr	r3, [pc, #76]	; (8002948 <configAnalogPin+0x150>)
 80028fa:	4a16      	ldr	r2, [pc, #88]	; (8002954 <configAnalogPin+0x15c>)
 80028fc:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 80028fe:	4b12      	ldr	r3, [pc, #72]	; (8002948 <configAnalogPin+0x150>)
 8002900:	2202      	movs	r2, #2
 8002902:	711a      	strb	r2, [r3, #4]

		break;
 8002904:	e015      	b.n	8002932 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_13: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <configAnalogPin+0x150>)
 8002908:	4a12      	ldr	r2, [pc, #72]	; (8002954 <configAnalogPin+0x15c>)
 800290a:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 800290c:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <configAnalogPin+0x150>)
 800290e:	2203      	movs	r2, #3
 8002910:	711a      	strb	r2, [r3, #4]

		break;
 8002912:	e00e      	b.n	8002932 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_14: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8002914:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <configAnalogPin+0x150>)
 8002916:	4a0f      	ldr	r2, [pc, #60]	; (8002954 <configAnalogPin+0x15c>)
 8002918:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 800291a:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <configAnalogPin+0x150>)
 800291c:	2204      	movs	r2, #4
 800291e:	711a      	strb	r2, [r3, #4]

		break;
 8002920:	e007      	b.n	8002932 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_15: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8002922:	4b09      	ldr	r3, [pc, #36]	; (8002948 <configAnalogPin+0x150>)
 8002924:	4a0b      	ldr	r2, [pc, #44]	; (8002954 <configAnalogPin+0x15c>)
 8002926:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8002928:	4b07      	ldr	r3, [pc, #28]	; (8002948 <configAnalogPin+0x150>)
 800292a:	2205      	movs	r2, #5
 800292c:	711a      	strb	r2, [r3, #4]

		break;
 800292e:	e000      	b.n	8002932 <configAnalogPin+0x13a>
	}
	default: {
		break;
 8002930:	bf00      	nop

	}
	/*
	 * Se carga la información de cada pin configurado sobre el GPIO.
	 */
	handlerAdcPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 8002932:	4b05      	ldr	r3, [pc, #20]	; (8002948 <configAnalogPin+0x150>)
 8002934:	2203      	movs	r2, #3
 8002936:	715a      	strb	r2, [r3, #5]
	GPIO_Config(&handlerAdcPin);
 8002938:	4803      	ldr	r0, [pc, #12]	; (8002948 <configAnalogPin+0x150>)
 800293a:	f7ff f917 	bl	8001b6c <GPIO_Config>
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	200004a4 	.word	0x200004a4
 800294c:	40020000 	.word	0x40020000
 8002950:	40020400 	.word	0x40020400
 8002954:	40020800 	.word	0x40020800

08002958 <adcConfigEvents>:
 * de la conversión adc. Los bits correspondientes a EXTSEL jerarquizan los
 * eventos externos dependiendo del canal que se quiera utilizar en cada uno
 * de los timmers disponibles para este propósito. Ver página 231 del reference
 * manual.
 */
void adcConfigEvents(ADC_Config_t *adcConfig) {
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]

	// Trigger detection on the rising edge, se toman los flancos
	// de bajada para los trigger externos
	ADC1->CR2 |= ADC_CR2_EXTEN_0;
 8002960:	4b42      	ldr	r3, [pc, #264]	; (8002a6c <adcConfigEvents+0x114>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	4a41      	ldr	r2, [pc, #260]	; (8002a6c <adcConfigEvents+0x114>)
 8002966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296a:	6093      	str	r3, [r2, #8]

	if (adcConfig->AdcEventType == TIMER_ADC_EVENT) {
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	7a1b      	ldrb	r3, [r3, #8]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d16f      	bne.n	8002a54 <adcConfigEvents+0xfc>
		switch (adcConfig->AdcChannelEvent) {
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	7a5b      	ldrb	r3, [r3, #9]
 8002978:	2b0a      	cmp	r3, #10
 800297a:	d864      	bhi.n	8002a46 <adcConfigEvents+0xee>
 800297c:	a201      	add	r2, pc, #4	; (adr r2, 8002984 <adcConfigEvents+0x2c>)
 800297e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002982:	bf00      	nop
 8002984:	080029b1 	.word	0x080029b1
 8002988:	080029bb 	.word	0x080029bb
 800298c:	080029c9 	.word	0x080029c9
 8002990:	080029d7 	.word	0x080029d7
 8002994:	080029e5 	.word	0x080029e5
 8002998:	080029f3 	.word	0x080029f3
 800299c:	08002a01 	.word	0x08002a01
 80029a0:	08002a0f 	.word	0x08002a0f
 80029a4:	08002a1d 	.word	0x08002a1d
 80029a8:	08002a2b 	.word	0x08002a2b
 80029ac:	08002a39 	.word	0x08002a39

		case TIM1_CH1: {
			// Evento TIM1 CC1 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x0 << ADC_CR2_EXTSEL_Pos);
 80029b0:	4b2e      	ldr	r3, [pc, #184]	; (8002a6c <adcConfigEvents+0x114>)
 80029b2:	4a2e      	ldr	r2, [pc, #184]	; (8002a6c <adcConfigEvents+0x114>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	6093      	str	r3, [r2, #8]
			break;
 80029b8:	e053      	b.n	8002a62 <adcConfigEvents+0x10a>
		}

		case TIM1_CH2: {
			// Evento TIM1 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x1 << ADC_CR2_EXTSEL_Pos);
 80029ba:	4b2c      	ldr	r3, [pc, #176]	; (8002a6c <adcConfigEvents+0x114>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	4a2b      	ldr	r2, [pc, #172]	; (8002a6c <adcConfigEvents+0x114>)
 80029c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029c4:	6093      	str	r3, [r2, #8]
			break;
 80029c6:	e04c      	b.n	8002a62 <adcConfigEvents+0x10a>
		}

		case TIM1_CH3: {
			// Evento TIM1 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x2 << ADC_CR2_EXTSEL_Pos);
 80029c8:	4b28      	ldr	r3, [pc, #160]	; (8002a6c <adcConfigEvents+0x114>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4a27      	ldr	r2, [pc, #156]	; (8002a6c <adcConfigEvents+0x114>)
 80029ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029d2:	6093      	str	r3, [r2, #8]
			break;
 80029d4:	e045      	b.n	8002a62 <adcConfigEvents+0x10a>
		}

		case TIM2_CH2: {
			// Evento TIM2 CC2 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x3 << ADC_CR2_EXTSEL_Pos);
 80029d6:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <adcConfigEvents+0x114>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	4a24      	ldr	r2, [pc, #144]	; (8002a6c <adcConfigEvents+0x114>)
 80029dc:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80029e0:	6093      	str	r3, [r2, #8]
			break;
 80029e2:	e03e      	b.n	8002a62 <adcConfigEvents+0x10a>
		}

		case TIM2_CH3: {
			// Evento TIM2 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x4 << ADC_CR2_EXTSEL_Pos);
 80029e4:	4b21      	ldr	r3, [pc, #132]	; (8002a6c <adcConfigEvents+0x114>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	4a20      	ldr	r2, [pc, #128]	; (8002a6c <adcConfigEvents+0x114>)
 80029ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029ee:	6093      	str	r3, [r2, #8]
			break;
 80029f0:	e037      	b.n	8002a62 <adcConfigEvents+0x10a>
		}

		case TIM2_CH4: {
			// Evento TIM2 CC4 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x5 << ADC_CR2_EXTSEL_Pos);
 80029f2:	4b1e      	ldr	r3, [pc, #120]	; (8002a6c <adcConfigEvents+0x114>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	4a1d      	ldr	r2, [pc, #116]	; (8002a6c <adcConfigEvents+0x114>)
 80029f8:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 80029fc:	6093      	str	r3, [r2, #8]
			break;
 80029fe:	e030      	b.n	8002a62 <adcConfigEvents+0x10a>
		}

		case TIM3_CH1: {
			// Evento TIM3 CC1 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x7 << ADC_CR2_EXTSEL_Pos);
 8002a00:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <adcConfigEvents+0x114>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	4a19      	ldr	r2, [pc, #100]	; (8002a6c <adcConfigEvents+0x114>)
 8002a06:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002a0a:	6093      	str	r3, [r2, #8]
			break;
 8002a0c:	e029      	b.n	8002a62 <adcConfigEvents+0x10a>
		}

		case TIM4_CH4: {
			// Evento TIM4 CC4 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x9 << ADC_CR2_EXTSEL_Pos);
 8002a0e:	4b17      	ldr	r3, [pc, #92]	; (8002a6c <adcConfigEvents+0x114>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	4a16      	ldr	r2, [pc, #88]	; (8002a6c <adcConfigEvents+0x114>)
 8002a14:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
 8002a18:	6093      	str	r3, [r2, #8]
			break;
 8002a1a:	e022      	b.n	8002a62 <adcConfigEvents+0x10a>
		}

		case TIM5_CH1: {
			// Evento TIM5 CC1 event para lanzar la conversion ADC
			ADC1->CR2 |= (0xA << ADC_CR2_EXTSEL_Pos);
 8002a1c:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <adcConfigEvents+0x114>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <adcConfigEvents+0x114>)
 8002a22:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
 8002a26:	6093      	str	r3, [r2, #8]
			break;
 8002a28:	e01b      	b.n	8002a62 <adcConfigEvents+0x10a>
		}

		case TIM5_CH2: {
			// Evento TIM5 CC2 event para lanzar la conversion ADC
			ADC1->CR2 |= (0xB << ADC_CR2_EXTSEL_Pos);
 8002a2a:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <adcConfigEvents+0x114>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	4a0f      	ldr	r2, [pc, #60]	; (8002a6c <adcConfigEvents+0x114>)
 8002a30:	f043 6330 	orr.w	r3, r3, #184549376	; 0xb000000
 8002a34:	6093      	str	r3, [r2, #8]
			break;
 8002a36:	e014      	b.n	8002a62 <adcConfigEvents+0x10a>
		}

		case TIM5_CH3: {
			// Evento TIM5 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0xC << ADC_CR2_EXTSEL_Pos);
 8002a38:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <adcConfigEvents+0x114>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	4a0b      	ldr	r2, [pc, #44]	; (8002a6c <adcConfigEvents+0x114>)
 8002a3e:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8002a42:	6093      	str	r3, [r2, #8]
			break;
 8002a44:	e00d      	b.n	8002a62 <adcConfigEvents+0x10a>
		}

		default: {
			// 1100: Timer 5 CC3 event
			ADC1->CR2 |= (0xC << ADC_CR2_EXTSEL_Pos);
 8002a46:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <adcConfigEvents+0x114>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	4a08      	ldr	r2, [pc, #32]	; (8002a6c <adcConfigEvents+0x114>)
 8002a4c:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8002a50:	6093      	str	r3, [r2, #8]
			break;
 8002a52:	e006      	b.n	8002a62 <adcConfigEvents+0x10a>

		}
	}

	else {
		ADC1->CR2 |= (0xF << ADC_CR2_EXTSEL_Pos);
 8002a54:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <adcConfigEvents+0x114>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	4a04      	ldr	r2, [pc, #16]	; (8002a6c <adcConfigEvents+0x114>)
 8002a5a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8002a5e:	6093      	str	r3, [r2, #8]
	}
}
 8002a60:	bf00      	nop
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr
 8002a6c:	40012000 	.word	0x40012000

08002a70 <adcMultiChannel>:
 * para realizar varias conversiones ADC. La función recibe como parámetros
 * la configuración del ADC y el número de conversiones que se requieren,
 * que para efectos prácticos es el número de canales sobre los cuales
 * se van a hacer las conversiones.
 */
void adcMultiChannel(ADC_Config_t *adcConfig, uint8_t numberOfConversion){
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	70fb      	strb	r3, [r7, #3]
	for(counter5 = 0; counter5<numberOfConversion; counter5++){
 8002a7c:	4b93      	ldr	r3, [pc, #588]	; (8002ccc <adcMultiChannel+0x25c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	701a      	strb	r2, [r3, #0]
 8002a82:	e00e      	b.n	8002aa2 <adcMultiChannel+0x32>
		/* 1. Configuramos el PinX para que cumpla la función de canal análogo deseado. */
		configAnalogPin(adcConfig->adcMultiChannel[counter5]);
 8002a84:	4b91      	ldr	r3, [pc, #580]	; (8002ccc <adcMultiChannel+0x25c>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	7a9b      	ldrb	r3, [r3, #10]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff feb1 	bl	80027f8 <configAnalogPin>
	for(counter5 = 0; counter5<numberOfConversion; counter5++){
 8002a96:	4b8d      	ldr	r3, [pc, #564]	; (8002ccc <adcMultiChannel+0x25c>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	4b8b      	ldr	r3, [pc, #556]	; (8002ccc <adcMultiChannel+0x25c>)
 8002aa0:	701a      	strb	r2, [r3, #0]
 8002aa2:	4b8a      	ldr	r3, [pc, #552]	; (8002ccc <adcMultiChannel+0x25c>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	78fa      	ldrb	r2, [r7, #3]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d8eb      	bhi.n	8002a84 <adcMultiChannel+0x14>
	}

	/* 2. Activamos la señal de reloj para el periférico ADC1 (bus APB2)*/
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8002aac:	4b88      	ldr	r3, [pc, #544]	; (8002cd0 <adcMultiChannel+0x260>)
 8002aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab0:	4a87      	ldr	r2, [pc, #540]	; (8002cd0 <adcMultiChannel+0x260>)
 8002ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab6:	6453      	str	r3, [r2, #68]	; 0x44

	// Limpiamos los registros antes de comenzar a configurar
	ADC1->CR1 = 0;
 8002ab8:	4b86      	ldr	r3, [pc, #536]	; (8002cd4 <adcMultiChannel+0x264>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	605a      	str	r2, [r3, #4]
	ADC1->CR2 = 0;
 8002abe:	4b85      	ldr	r3, [pc, #532]	; (8002cd4 <adcMultiChannel+0x264>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	609a      	str	r2, [r3, #8]

	/* Comenzamos la configuración del ADC1 */
	/* 3. Resolución del ADC */
	// Preferible utilizar la conversión a 12 bits para usar
	// la máxima capacidad del microcontrolador.
	switch (adcConfig->resolution) {
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	785b      	ldrb	r3, [r3, #1]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d83f      	bhi.n	8002b4c <adcMultiChannel+0xdc>
 8002acc:	a201      	add	r2, pc, #4	; (adr r2, 8002ad4 <adcMultiChannel+0x64>)
 8002ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad2:	bf00      	nop
 8002ad4:	08002ae5 	.word	0x08002ae5
 8002ad8:	08002aff 	.word	0x08002aff
 8002adc:	08002b19 	.word	0x08002b19
 8002ae0:	08002b33 	.word	0x08002b33
	case ADC_RESOLUTION_12_BIT: {

		ADC1->CR1 &= ~ADC_CR1_RES_0;
 8002ae4:	4b7b      	ldr	r3, [pc, #492]	; (8002cd4 <adcMultiChannel+0x264>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	4a7a      	ldr	r2, [pc, #488]	; (8002cd4 <adcMultiChannel+0x264>)
 8002aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aee:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_1;
 8002af0:	4b78      	ldr	r3, [pc, #480]	; (8002cd4 <adcMultiChannel+0x264>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	4a77      	ldr	r2, [pc, #476]	; (8002cd4 <adcMultiChannel+0x264>)
 8002af6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002afa:	6053      	str	r3, [r2, #4]
		break;
 8002afc:	e027      	b.n	8002b4e <adcMultiChannel+0xde>
	}

	case ADC_RESOLUTION_10_BIT: {

		ADC1->CR1 |= ADC_CR1_RES_0;
 8002afe:	4b75      	ldr	r3, [pc, #468]	; (8002cd4 <adcMultiChannel+0x264>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4a74      	ldr	r2, [pc, #464]	; (8002cd4 <adcMultiChannel+0x264>)
 8002b04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b08:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_1;
 8002b0a:	4b72      	ldr	r3, [pc, #456]	; (8002cd4 <adcMultiChannel+0x264>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	4a71      	ldr	r2, [pc, #452]	; (8002cd4 <adcMultiChannel+0x264>)
 8002b10:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002b14:	6053      	str	r3, [r2, #4]
		break;
 8002b16:	e01a      	b.n	8002b4e <adcMultiChannel+0xde>
	}

	case ADC_RESOLUTION_8_BIT: {

		ADC1->CR1 |= ADC_CR1_RES_1;
 8002b18:	4b6e      	ldr	r3, [pc, #440]	; (8002cd4 <adcMultiChannel+0x264>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	4a6d      	ldr	r2, [pc, #436]	; (8002cd4 <adcMultiChannel+0x264>)
 8002b1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b22:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_0;
 8002b24:	4b6b      	ldr	r3, [pc, #428]	; (8002cd4 <adcMultiChannel+0x264>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	4a6a      	ldr	r2, [pc, #424]	; (8002cd4 <adcMultiChannel+0x264>)
 8002b2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b2e:	6053      	str	r3, [r2, #4]
		break;
 8002b30:	e00d      	b.n	8002b4e <adcMultiChannel+0xde>
	}

	case ADC_RESOLUTION_6_BIT: {
		ADC1->CR1 |= ADC_CR1_RES_0;
 8002b32:	4b68      	ldr	r3, [pc, #416]	; (8002cd4 <adcMultiChannel+0x264>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4a67      	ldr	r2, [pc, #412]	; (8002cd4 <adcMultiChannel+0x264>)
 8002b38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b3c:	6053      	str	r3, [r2, #4]
		ADC1->CR1 |= ADC_CR1_RES_1;
 8002b3e:	4b65      	ldr	r3, [pc, #404]	; (8002cd4 <adcMultiChannel+0x264>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4a64      	ldr	r2, [pc, #400]	; (8002cd4 <adcMultiChannel+0x264>)
 8002b44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b48:	6053      	str	r3, [r2, #4]
		break;
 8002b4a:	e000      	b.n	8002b4e <adcMultiChannel+0xde>
	}

	default: {
		break;
 8002b4c:	bf00      	nop
	}
	}

	/* 4. Configuramos el modo Scan como ACTIVADO */
	ADC1->CR1 |= ADC_CR1_SCAN;
 8002b4e:	4b61      	ldr	r3, [pc, #388]	; (8002cd4 <adcMultiChannel+0x264>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	4a60      	ldr	r2, [pc, #384]	; (8002cd4 <adcMultiChannel+0x264>)
 8002b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b58:	6053      	str	r3, [r2, #4]
	// Se configura además el EOCS end of conversion.
	ADC1->CR2 |= ADC_CR2_EOCS;
 8002b5a:	4b5e      	ldr	r3, [pc, #376]	; (8002cd4 <adcMultiChannel+0x264>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	4a5d      	ldr	r2, [pc, #372]	; (8002cd4 <adcMultiChannel+0x264>)
 8002b60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b64:	6093      	str	r3, [r2, #8]

	/* 5. Configuramos la alineación de los datos (derecha o izquierda) */
	if (adcConfig->dataAlignment == ADC_ALIGNMENT_RIGHT) {
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	791b      	ldrb	r3, [r3, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <adcMultiChannel+0x10c>
		// Alineación a la derecha (esta es la forma "natural")
		ADC1->CR2 &= ~ADC_CR2_ALIGN;
 8002b6e:	4b59      	ldr	r3, [pc, #356]	; (8002cd4 <adcMultiChannel+0x264>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	4a58      	ldr	r2, [pc, #352]	; (8002cd4 <adcMultiChannel+0x264>)
 8002b74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b78:	6093      	str	r3, [r2, #8]
 8002b7a:	e005      	b.n	8002b88 <adcMultiChannel+0x118>
	} else {
		// Alineación a la izquierda (para algunos cálculos matemáticos)
		ADC1->CR2 |= ADC_CR2_ALIGN;
 8002b7c:	4b55      	ldr	r3, [pc, #340]	; (8002cd4 <adcMultiChannel+0x264>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	4a54      	ldr	r2, [pc, #336]	; (8002cd4 <adcMultiChannel+0x264>)
 8002b82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b86:	6093      	str	r3, [r2, #8]
	}

	/* 6. Desactivamos el "continuos mode" */
	ADC1->CR2 &= ~ADC_CR2_CONT;
 8002b88:	4b52      	ldr	r3, [pc, #328]	; (8002cd4 <adcMultiChannel+0x264>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	4a51      	ldr	r2, [pc, #324]	; (8002cd4 <adcMultiChannel+0x264>)
 8002b8e:	f023 0302 	bic.w	r3, r3, #2
 8002b92:	6093      	str	r3, [r2, #8]

	/* 7. Acá se debería configurar el sampling...*/



	for(counter5 = 0; counter5 < numberOfConversion; counter5++){
 8002b94:	4b4d      	ldr	r3, [pc, #308]	; (8002ccc <adcMultiChannel+0x25c>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]
 8002b9a:	e05e      	b.n	8002c5a <adcMultiChannel+0x1ea>
		if (adcConfig->adcMultiChannel[counter5] <= ADC_CHANNEL_9) {
 8002b9c:	4b4b      	ldr	r3, [pc, #300]	; (8002ccc <adcMultiChannel+0x25c>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	7a9b      	ldrb	r3, [r3, #10]
 8002ba8:	2b09      	cmp	r3, #9
 8002baa:	d827      	bhi.n	8002bfc <adcMultiChannel+0x18c>
			ADC1->SMPR2 &= ~(0b111 << (3 * (adcConfig->adcMultiChannel[counter5])));
 8002bac:	4b49      	ldr	r3, [pc, #292]	; (8002cd4 <adcMultiChannel+0x264>)
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	4b46      	ldr	r3, [pc, #280]	; (8002ccc <adcMultiChannel+0x25c>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	440b      	add	r3, r1
 8002bba:	7a9b      	ldrb	r3, [r3, #10]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	440b      	add	r3, r1
 8002bc4:	2107      	movs	r1, #7
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	4941      	ldr	r1, [pc, #260]	; (8002cd4 <adcMultiChannel+0x264>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	610b      	str	r3, [r1, #16]
			// Acá se establecen la cantidad de ciclos para cada canal (0 al 9)
			ADC1->SMPR2 |= (adcConfig->samplingPeriod << (3 * (adcConfig->adcMultiChannel[counter5])));
 8002bd2:	4b40      	ldr	r3, [pc, #256]	; (8002cd4 <adcMultiChannel+0x264>)
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	885b      	ldrh	r3, [r3, #2]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	4b3b      	ldr	r3, [pc, #236]	; (8002ccc <adcMultiChannel+0x25c>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	4619      	mov	r1, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	440b      	add	r3, r1
 8002be6:	7a9b      	ldrb	r3, [r3, #10]
 8002be8:	4619      	mov	r1, r3
 8002bea:	460b      	mov	r3, r1
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	440b      	add	r3, r1
 8002bf0:	fa00 f303 	lsl.w	r3, r0, r3
 8002bf4:	4937      	ldr	r1, [pc, #220]	; (8002cd4 <adcMultiChannel+0x264>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	610b      	str	r3, [r1, #16]
 8002bfa:	e028      	b.n	8002c4e <adcMultiChannel+0x1de>

		} else {
			ADC1->SMPR1 &= ~(0b111 << (3 * (adcConfig->adcMultiChannel[counter5] - 10)));
 8002bfc:	4b35      	ldr	r3, [pc, #212]	; (8002cd4 <adcMultiChannel+0x264>)
 8002bfe:	68d9      	ldr	r1, [r3, #12]
 8002c00:	4b32      	ldr	r3, [pc, #200]	; (8002ccc <adcMultiChannel+0x25c>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	461a      	mov	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4413      	add	r3, r2
 8002c0a:	7a9b      	ldrb	r3, [r3, #10]
 8002c0c:	f1a3 020a 	sub.w	r2, r3, #10
 8002c10:	4613      	mov	r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	4413      	add	r3, r2
 8002c16:	2207      	movs	r2, #7
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	4a2d      	ldr	r2, [pc, #180]	; (8002cd4 <adcMultiChannel+0x264>)
 8002c20:	400b      	ands	r3, r1
 8002c22:	60d3      	str	r3, [r2, #12]
			// Acá se establecen la cantidad de ciclos para cada canal (10 al 18)
			ADC1->SMPR1 |= (adcConfig->samplingPeriod << (3 * (adcConfig->adcMultiChannel[counter5] - 10)));
 8002c24:	4b2b      	ldr	r3, [pc, #172]	; (8002cd4 <adcMultiChannel+0x264>)
 8002c26:	68d9      	ldr	r1, [r3, #12]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	885b      	ldrh	r3, [r3, #2]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	4b27      	ldr	r3, [pc, #156]	; (8002ccc <adcMultiChannel+0x25c>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4413      	add	r3, r2
 8002c38:	7a9b      	ldrb	r3, [r3, #10]
 8002c3a:	f1a3 020a 	sub.w	r2, r3, #10
 8002c3e:	4613      	mov	r3, r2
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	4413      	add	r3, r2
 8002c44:	fa00 f303 	lsl.w	r3, r0, r3
 8002c48:	4a22      	ldr	r2, [pc, #136]	; (8002cd4 <adcMultiChannel+0x264>)
 8002c4a:	430b      	orrs	r3, r1
 8002c4c:	60d3      	str	r3, [r2, #12]
	for(counter5 = 0; counter5 < numberOfConversion; counter5++){
 8002c4e:	4b1f      	ldr	r3, [pc, #124]	; (8002ccc <adcMultiChannel+0x25c>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	3301      	adds	r3, #1
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4b1d      	ldr	r3, [pc, #116]	; (8002ccc <adcMultiChannel+0x25c>)
 8002c58:	701a      	strb	r2, [r3, #0]
 8002c5a:	4b1c      	ldr	r3, [pc, #112]	; (8002ccc <adcMultiChannel+0x25c>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	78fa      	ldrb	r2, [r7, #3]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d89b      	bhi.n	8002b9c <adcMultiChannel+0x12c>

		}
	}
	ADC1->SQR1 = 0;
 8002c64:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <adcMultiChannel+0x264>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1->SQR2 = 0;
 8002c6a:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <adcMultiChannel+0x264>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	631a      	str	r2, [r3, #48]	; 0x30
	ADC1->SQR3 = 0;
 8002c70:	4b18      	ldr	r3, [pc, #96]	; (8002cd4 <adcMultiChannel+0x264>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	635a      	str	r2, [r3, #52]	; 0x34

	/* 8. Configuramos la secuencia y cuantos elementos hay en la secuencia */
	// Al hacerlo todo 0, estamos seleccionando solo 1 elemento en el conteo de la secuencia
	ADC1->SQR1 |= (numberOfConversion - 1) << ADC_SQR1_L_Pos;
 8002c76:	4b17      	ldr	r3, [pc, #92]	; (8002cd4 <adcMultiChannel+0x264>)
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7a:	78fa      	ldrb	r2, [r7, #3]
 8002c7c:	3a01      	subs	r2, #1
 8002c7e:	0512      	lsls	r2, r2, #20
 8002c80:	4611      	mov	r1, r2
 8002c82:	4a14      	ldr	r2, [pc, #80]	; (8002cd4 <adcMultiChannel+0x264>)
 8002c84:	430b      	orrs	r3, r1
 8002c86:	62d3      	str	r3, [r2, #44]	; 0x2c

	// Asignamos el orden de la conversión dependiendo del canal en que
	// se esté haciendo, de allí la variación en la agrupación de los
	// registros.
	for(counter5 = 0; counter5 < numberOfConversion; counter5++){
 8002c88:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <adcMultiChannel+0x25c>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
 8002c8e:	e06b      	b.n	8002d68 <adcMultiChannel+0x2f8>
		if(adcConfig->adcMultiChannel[counter5] <= 6){
 8002c90:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <adcMultiChannel+0x25c>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	461a      	mov	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4413      	add	r3, r2
 8002c9a:	7a9b      	ldrb	r3, [r3, #10]
 8002c9c:	2b06      	cmp	r3, #6
 8002c9e:	d81b      	bhi.n	8002cd8 <adcMultiChannel+0x268>
			ADC1->SQR3 |= (adcConfig->adcMultiChannel[counter5] << (5 * counter5));
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <adcMultiChannel+0x264>)
 8002ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ca4:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <adcMultiChannel+0x25c>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	4619      	mov	r1, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	440b      	add	r3, r1
 8002cae:	7a9b      	ldrb	r3, [r3, #10]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <adcMultiChannel+0x25c>)
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	460b      	mov	r3, r1
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	fa00 f303 	lsl.w	r3, r0, r3
 8002cc2:	4904      	ldr	r1, [pc, #16]	; (8002cd4 <adcMultiChannel+0x264>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	634b      	str	r3, [r1, #52]	; 0x34
 8002cc8:	e048      	b.n	8002d5c <adcMultiChannel+0x2ec>
 8002cca:	bf00      	nop
 8002ccc:	200004a0 	.word	0x200004a0
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	40012000 	.word	0x40012000
		}
		else if(adcConfig->adcMultiChannel[counter5] > 6 && adcConfig->adcMultiChannel[counter5] <= 12){
 8002cd8:	4b36      	ldr	r3, [pc, #216]	; (8002db4 <adcMultiChannel+0x344>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	7a9b      	ldrb	r3, [r3, #10]
 8002ce4:	2b06      	cmp	r3, #6
 8002ce6:	d91c      	bls.n	8002d22 <adcMultiChannel+0x2b2>
 8002ce8:	4b32      	ldr	r3, [pc, #200]	; (8002db4 <adcMultiChannel+0x344>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	461a      	mov	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	7a9b      	ldrb	r3, [r3, #10]
 8002cf4:	2b0c      	cmp	r3, #12
 8002cf6:	d814      	bhi.n	8002d22 <adcMultiChannel+0x2b2>
			ADC1->SQR2 |= (adcConfig->adcMultiChannel[counter5] << (5 * (counter5 - 7)));
 8002cf8:	4b2f      	ldr	r3, [pc, #188]	; (8002db8 <adcMultiChannel+0x348>)
 8002cfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cfc:	4b2d      	ldr	r3, [pc, #180]	; (8002db4 <adcMultiChannel+0x344>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	461a      	mov	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4413      	add	r3, r2
 8002d06:	7a9b      	ldrb	r3, [r3, #10]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	4b2a      	ldr	r3, [pc, #168]	; (8002db4 <adcMultiChannel+0x344>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	1fda      	subs	r2, r3, #7
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	fa00 f303 	lsl.w	r3, r0, r3
 8002d1a:	4a27      	ldr	r2, [pc, #156]	; (8002db8 <adcMultiChannel+0x348>)
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d20:	e01c      	b.n	8002d5c <adcMultiChannel+0x2ec>
		}
		else if(adcConfig->adcMultiChannel[counter5] > 12){
 8002d22:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <adcMultiChannel+0x344>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	7a9b      	ldrb	r3, [r3, #10]
 8002d2e:	2b0c      	cmp	r3, #12
 8002d30:	d914      	bls.n	8002d5c <adcMultiChannel+0x2ec>
			ADC1->SQR1 |= (adcConfig->adcMultiChannel[counter5] << (5 * (counter5 - 13)));
 8002d32:	4b21      	ldr	r3, [pc, #132]	; (8002db8 <adcMultiChannel+0x348>)
 8002d34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d36:	4b1f      	ldr	r3, [pc, #124]	; (8002db4 <adcMultiChannel+0x344>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4413      	add	r3, r2
 8002d40:	7a9b      	ldrb	r3, [r3, #10]
 8002d42:	4618      	mov	r0, r3
 8002d44:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <adcMultiChannel+0x344>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	f1a3 020d 	sub.w	r2, r3, #13
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	fa00 f303 	lsl.w	r3, r0, r3
 8002d56:	4a18      	ldr	r2, [pc, #96]	; (8002db8 <adcMultiChannel+0x348>)
 8002d58:	430b      	orrs	r3, r1
 8002d5a:	62d3      	str	r3, [r2, #44]	; 0x2c
	for(counter5 = 0; counter5 < numberOfConversion; counter5++){
 8002d5c:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <adcMultiChannel+0x344>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	3301      	adds	r3, #1
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	4b13      	ldr	r3, [pc, #76]	; (8002db4 <adcMultiChannel+0x344>)
 8002d66:	701a      	strb	r2, [r3, #0]
 8002d68:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <adcMultiChannel+0x344>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	78fa      	ldrb	r2, [r7, #3]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d88e      	bhi.n	8002c90 <adcMultiChannel+0x220>
		}
	}

	/* 9. Configuramos el preescaler del ADC en 2:1 (el mas rápido que se puede tener */
	ADC->CCR &= ~ADC_CCR_ADCPRE;
 8002d72:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <adcMultiChannel+0x34c>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	4a11      	ldr	r2, [pc, #68]	; (8002dbc <adcMultiChannel+0x34c>)
 8002d78:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002d7c:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d7e:	b672      	cpsid	i
}
 8002d80:	bf00      	nop

	/* 10. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 11. Activamos la interrupción debida a la finalización de una conversión EOC (CR1)*/
	ADC1->CR1 |= ADC_CR1_EOCIE;
 8002d82:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <adcMultiChannel+0x348>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	4a0c      	ldr	r2, [pc, #48]	; (8002db8 <adcMultiChannel+0x348>)
 8002d88:	f043 0320 	orr.w	r3, r3, #32
 8002d8c:	6053      	str	r3, [r2, #4]

	/* 11a. Matriculamos la interrupción en el NVIC*/
	__NVIC_EnableIRQ(ADC_IRQn);
 8002d8e:	2012      	movs	r0, #18
 8002d90:	f7ff fccc 	bl	800272c <__NVIC_EnableIRQ>

	/* 11b. Configuramos la prioridad para la interrupción ADC */
	__NVIC_SetPriority(ADC_IRQn, 4);
 8002d94:	2104      	movs	r1, #4
 8002d96:	2012      	movs	r0, #18
 8002d98:	f7ff fce4 	bl	8002764 <__NVIC_SetPriority>

	/* 12. Activamos el modulo ADC */
	ADC1->CR2 |= ADC_CR2_ADON;
 8002d9c:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <adcMultiChannel+0x348>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4a05      	ldr	r2, [pc, #20]	; (8002db8 <adcMultiChannel+0x348>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8002da8:	b662      	cpsie	i
}
 8002daa:	bf00      	nop

	/* 13. Activamos las interrupciones globales */
	__enable_irq();

}
 8002dac:	bf00      	nop
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	200004a0 	.word	0x200004a0
 8002db8:	40012000 	.word	0x40012000
 8002dbc:	40012300 	.word	0x40012300

08002dc0 <getConfigPLL>:
	RCC->CR |= RCC_CR_HSITRIM_3;

}// FIN DE LA FUNCIÓN DE CONFIGURACIÓN PARA DISTINTAS FRECUENCIAS.

// Función para saber el estado del PLL y así poder caracterizar lo demás.
uint32_t getConfigPLL(void){
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
	// Se buscan los valores que están definiendo los valores actuales del reloj PLL
	uint32_t PLLN = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <getConfigPLL+0x3c>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	099b      	lsrs	r3, r3, #6
 8002dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd0:	60fb      	str	r3, [r7, #12]
	uint32_t PLLM = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos;
 8002dd2:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <getConfigPLL+0x3c>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dda:	60bb      	str	r3, [r7, #8]
	// Se hace la operación para saber el valor actual del reloj. (Asume PLLP =2)
	uint32_t clockMicro = (HSI_VALUE / PLLM) * PLLN / 2;
 8002ddc:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <getConfigPLL+0x40>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	fb02 f303 	mul.w	r3, r2, r3
 8002dec:	085b      	lsrs	r3, r3, #1
 8002dee:	607b      	str	r3, [r7, #4]
	return clockMicro;
 8002df0:	687b      	ldr	r3, [r7, #4]

}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	20000040 	.word	0x20000040

08002e04 <__libc_init_array>:
 8002e04:	b570      	push	{r4, r5, r6, lr}
 8002e06:	4d0d      	ldr	r5, [pc, #52]	; (8002e3c <__libc_init_array+0x38>)
 8002e08:	4c0d      	ldr	r4, [pc, #52]	; (8002e40 <__libc_init_array+0x3c>)
 8002e0a:	1b64      	subs	r4, r4, r5
 8002e0c:	10a4      	asrs	r4, r4, #2
 8002e0e:	2600      	movs	r6, #0
 8002e10:	42a6      	cmp	r6, r4
 8002e12:	d109      	bne.n	8002e28 <__libc_init_array+0x24>
 8002e14:	4d0b      	ldr	r5, [pc, #44]	; (8002e44 <__libc_init_array+0x40>)
 8002e16:	4c0c      	ldr	r4, [pc, #48]	; (8002e48 <__libc_init_array+0x44>)
 8002e18:	f004 fc8a 	bl	8007730 <_init>
 8002e1c:	1b64      	subs	r4, r4, r5
 8002e1e:	10a4      	asrs	r4, r4, #2
 8002e20:	2600      	movs	r6, #0
 8002e22:	42a6      	cmp	r6, r4
 8002e24:	d105      	bne.n	8002e32 <__libc_init_array+0x2e>
 8002e26:	bd70      	pop	{r4, r5, r6, pc}
 8002e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e2c:	4798      	blx	r3
 8002e2e:	3601      	adds	r6, #1
 8002e30:	e7ee      	b.n	8002e10 <__libc_init_array+0xc>
 8002e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e36:	4798      	blx	r3
 8002e38:	3601      	adds	r6, #1
 8002e3a:	e7f2      	b.n	8002e22 <__libc_init_array+0x1e>
 8002e3c:	08007c24 	.word	0x08007c24
 8002e40:	08007c24 	.word	0x08007c24
 8002e44:	08007c24 	.word	0x08007c24
 8002e48:	08007c28 	.word	0x08007c28

08002e4c <memset>:
 8002e4c:	4402      	add	r2, r0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d100      	bne.n	8002e56 <memset+0xa>
 8002e54:	4770      	bx	lr
 8002e56:	f803 1b01 	strb.w	r1, [r3], #1
 8002e5a:	e7f9      	b.n	8002e50 <memset+0x4>

08002e5c <__cvt>:
 8002e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e60:	b088      	sub	sp, #32
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	461f      	mov	r7, r3
 8002e66:	4614      	mov	r4, r2
 8002e68:	bfb8      	it	lt
 8002e6a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002e6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002e70:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002e72:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002e76:	bfb6      	itet	lt
 8002e78:	461f      	movlt	r7, r3
 8002e7a:	2300      	movge	r3, #0
 8002e7c:	232d      	movlt	r3, #45	; 0x2d
 8002e7e:	7013      	strb	r3, [r2, #0]
 8002e80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002e82:	f023 0820 	bic.w	r8, r3, #32
 8002e86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002e8a:	d005      	beq.n	8002e98 <__cvt+0x3c>
 8002e8c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002e90:	d100      	bne.n	8002e94 <__cvt+0x38>
 8002e92:	3501      	adds	r5, #1
 8002e94:	2302      	movs	r3, #2
 8002e96:	e000      	b.n	8002e9a <__cvt+0x3e>
 8002e98:	2303      	movs	r3, #3
 8002e9a:	aa07      	add	r2, sp, #28
 8002e9c:	9204      	str	r2, [sp, #16]
 8002e9e:	aa06      	add	r2, sp, #24
 8002ea0:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002ea4:	e9cd 3500 	strd	r3, r5, [sp]
 8002ea8:	4622      	mov	r2, r4
 8002eaa:	463b      	mov	r3, r7
 8002eac:	f001 fd78 	bl	80049a0 <_dtoa_r>
 8002eb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002eb4:	4606      	mov	r6, r0
 8002eb6:	d102      	bne.n	8002ebe <__cvt+0x62>
 8002eb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002eba:	07db      	lsls	r3, r3, #31
 8002ebc:	d522      	bpl.n	8002f04 <__cvt+0xa8>
 8002ebe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002ec2:	eb06 0905 	add.w	r9, r6, r5
 8002ec6:	d110      	bne.n	8002eea <__cvt+0x8e>
 8002ec8:	7833      	ldrb	r3, [r6, #0]
 8002eca:	2b30      	cmp	r3, #48	; 0x30
 8002ecc:	d10a      	bne.n	8002ee4 <__cvt+0x88>
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	4639      	mov	r1, r7
 8002ed6:	f7fd fdff 	bl	8000ad8 <__aeabi_dcmpeq>
 8002eda:	b918      	cbnz	r0, 8002ee4 <__cvt+0x88>
 8002edc:	f1c5 0501 	rsb	r5, r5, #1
 8002ee0:	f8ca 5000 	str.w	r5, [sl]
 8002ee4:	f8da 3000 	ldr.w	r3, [sl]
 8002ee8:	4499      	add	r9, r3
 8002eea:	2200      	movs	r2, #0
 8002eec:	2300      	movs	r3, #0
 8002eee:	4620      	mov	r0, r4
 8002ef0:	4639      	mov	r1, r7
 8002ef2:	f7fd fdf1 	bl	8000ad8 <__aeabi_dcmpeq>
 8002ef6:	b108      	cbz	r0, 8002efc <__cvt+0xa0>
 8002ef8:	f8cd 901c 	str.w	r9, [sp, #28]
 8002efc:	2230      	movs	r2, #48	; 0x30
 8002efe:	9b07      	ldr	r3, [sp, #28]
 8002f00:	454b      	cmp	r3, r9
 8002f02:	d307      	bcc.n	8002f14 <__cvt+0xb8>
 8002f04:	9b07      	ldr	r3, [sp, #28]
 8002f06:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002f08:	1b9b      	subs	r3, r3, r6
 8002f0a:	4630      	mov	r0, r6
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	b008      	add	sp, #32
 8002f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f14:	1c59      	adds	r1, r3, #1
 8002f16:	9107      	str	r1, [sp, #28]
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	e7f0      	b.n	8002efe <__cvt+0xa2>

08002f1c <__exponent>:
 8002f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2900      	cmp	r1, #0
 8002f22:	bfb8      	it	lt
 8002f24:	4249      	neglt	r1, r1
 8002f26:	f803 2b02 	strb.w	r2, [r3], #2
 8002f2a:	bfb4      	ite	lt
 8002f2c:	222d      	movlt	r2, #45	; 0x2d
 8002f2e:	222b      	movge	r2, #43	; 0x2b
 8002f30:	2909      	cmp	r1, #9
 8002f32:	7042      	strb	r2, [r0, #1]
 8002f34:	dd2a      	ble.n	8002f8c <__exponent+0x70>
 8002f36:	f10d 0407 	add.w	r4, sp, #7
 8002f3a:	46a4      	mov	ip, r4
 8002f3c:	270a      	movs	r7, #10
 8002f3e:	46a6      	mov	lr, r4
 8002f40:	460a      	mov	r2, r1
 8002f42:	fb91 f6f7 	sdiv	r6, r1, r7
 8002f46:	fb07 1516 	mls	r5, r7, r6, r1
 8002f4a:	3530      	adds	r5, #48	; 0x30
 8002f4c:	2a63      	cmp	r2, #99	; 0x63
 8002f4e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8002f52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002f56:	4631      	mov	r1, r6
 8002f58:	dcf1      	bgt.n	8002f3e <__exponent+0x22>
 8002f5a:	3130      	adds	r1, #48	; 0x30
 8002f5c:	f1ae 0502 	sub.w	r5, lr, #2
 8002f60:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002f64:	1c44      	adds	r4, r0, #1
 8002f66:	4629      	mov	r1, r5
 8002f68:	4561      	cmp	r1, ip
 8002f6a:	d30a      	bcc.n	8002f82 <__exponent+0x66>
 8002f6c:	f10d 0209 	add.w	r2, sp, #9
 8002f70:	eba2 020e 	sub.w	r2, r2, lr
 8002f74:	4565      	cmp	r5, ip
 8002f76:	bf88      	it	hi
 8002f78:	2200      	movhi	r2, #0
 8002f7a:	4413      	add	r3, r2
 8002f7c:	1a18      	subs	r0, r3, r0
 8002f7e:	b003      	add	sp, #12
 8002f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f86:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002f8a:	e7ed      	b.n	8002f68 <__exponent+0x4c>
 8002f8c:	2330      	movs	r3, #48	; 0x30
 8002f8e:	3130      	adds	r1, #48	; 0x30
 8002f90:	7083      	strb	r3, [r0, #2]
 8002f92:	70c1      	strb	r1, [r0, #3]
 8002f94:	1d03      	adds	r3, r0, #4
 8002f96:	e7f1      	b.n	8002f7c <__exponent+0x60>

08002f98 <_printf_float>:
 8002f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f9c:	b091      	sub	sp, #68	; 0x44
 8002f9e:	460c      	mov	r4, r1
 8002fa0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002fa4:	4616      	mov	r6, r2
 8002fa6:	461f      	mov	r7, r3
 8002fa8:	4605      	mov	r5, r0
 8002faa:	f002 fe53 	bl	8005c54 <_localeconv_r>
 8002fae:	6803      	ldr	r3, [r0, #0]
 8002fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fd f914 	bl	80001e0 <strlen>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	930e      	str	r3, [sp, #56]	; 0x38
 8002fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8002fc0:	900a      	str	r0, [sp, #40]	; 0x28
 8002fc2:	3307      	adds	r3, #7
 8002fc4:	f023 0307 	bic.w	r3, r3, #7
 8002fc8:	f103 0208 	add.w	r2, r3, #8
 8002fcc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002fd0:	f8d4 b000 	ldr.w	fp, [r4]
 8002fd4:	f8c8 2000 	str.w	r2, [r8]
 8002fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fdc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002fe0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002fe4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002fe8:	930b      	str	r3, [sp, #44]	; 0x2c
 8002fea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002fec:	4b9c      	ldr	r3, [pc, #624]	; (8003260 <_printf_float+0x2c8>)
 8002fee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ff2:	4640      	mov	r0, r8
 8002ff4:	f7fd fda2 	bl	8000b3c <__aeabi_dcmpun>
 8002ff8:	bb70      	cbnz	r0, 8003058 <_printf_float+0xc0>
 8002ffa:	4b99      	ldr	r3, [pc, #612]	; (8003260 <_printf_float+0x2c8>)
 8002ffc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002ffe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003002:	4640      	mov	r0, r8
 8003004:	f7fd fd7c 	bl	8000b00 <__aeabi_dcmple>
 8003008:	bb30      	cbnz	r0, 8003058 <_printf_float+0xc0>
 800300a:	2200      	movs	r2, #0
 800300c:	2300      	movs	r3, #0
 800300e:	4640      	mov	r0, r8
 8003010:	4651      	mov	r1, sl
 8003012:	f7fd fd6b 	bl	8000aec <__aeabi_dcmplt>
 8003016:	b110      	cbz	r0, 800301e <_printf_float+0x86>
 8003018:	232d      	movs	r3, #45	; 0x2d
 800301a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800301e:	4b91      	ldr	r3, [pc, #580]	; (8003264 <_printf_float+0x2cc>)
 8003020:	4891      	ldr	r0, [pc, #580]	; (8003268 <_printf_float+0x2d0>)
 8003022:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003026:	bf94      	ite	ls
 8003028:	4698      	movls	r8, r3
 800302a:	4680      	movhi	r8, r0
 800302c:	2303      	movs	r3, #3
 800302e:	6123      	str	r3, [r4, #16]
 8003030:	f02b 0304 	bic.w	r3, fp, #4
 8003034:	6023      	str	r3, [r4, #0]
 8003036:	f04f 0a00 	mov.w	sl, #0
 800303a:	9700      	str	r7, [sp, #0]
 800303c:	4633      	mov	r3, r6
 800303e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003040:	4621      	mov	r1, r4
 8003042:	4628      	mov	r0, r5
 8003044:	f000 f9d2 	bl	80033ec <_printf_common>
 8003048:	3001      	adds	r0, #1
 800304a:	f040 808f 	bne.w	800316c <_printf_float+0x1d4>
 800304e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003052:	b011      	add	sp, #68	; 0x44
 8003054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003058:	4642      	mov	r2, r8
 800305a:	4653      	mov	r3, sl
 800305c:	4640      	mov	r0, r8
 800305e:	4651      	mov	r1, sl
 8003060:	f7fd fd6c 	bl	8000b3c <__aeabi_dcmpun>
 8003064:	b140      	cbz	r0, 8003078 <_printf_float+0xe0>
 8003066:	f1ba 0f00 	cmp.w	sl, #0
 800306a:	bfbc      	itt	lt
 800306c:	232d      	movlt	r3, #45	; 0x2d
 800306e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003072:	487e      	ldr	r0, [pc, #504]	; (800326c <_printf_float+0x2d4>)
 8003074:	4b7e      	ldr	r3, [pc, #504]	; (8003270 <_printf_float+0x2d8>)
 8003076:	e7d4      	b.n	8003022 <_printf_float+0x8a>
 8003078:	6863      	ldr	r3, [r4, #4]
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003080:	d142      	bne.n	8003108 <_printf_float+0x170>
 8003082:	2306      	movs	r3, #6
 8003084:	6063      	str	r3, [r4, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	9206      	str	r2, [sp, #24]
 800308a:	aa0e      	add	r2, sp, #56	; 0x38
 800308c:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003090:	aa0d      	add	r2, sp, #52	; 0x34
 8003092:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003096:	9203      	str	r2, [sp, #12]
 8003098:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800309c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80030a0:	6023      	str	r3, [r4, #0]
 80030a2:	6863      	ldr	r3, [r4, #4]
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	4642      	mov	r2, r8
 80030a8:	4653      	mov	r3, sl
 80030aa:	4628      	mov	r0, r5
 80030ac:	910b      	str	r1, [sp, #44]	; 0x2c
 80030ae:	f7ff fed5 	bl	8002e5c <__cvt>
 80030b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80030b4:	2947      	cmp	r1, #71	; 0x47
 80030b6:	4680      	mov	r8, r0
 80030b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80030ba:	d108      	bne.n	80030ce <_printf_float+0x136>
 80030bc:	1cc8      	adds	r0, r1, #3
 80030be:	db02      	blt.n	80030c6 <_printf_float+0x12e>
 80030c0:	6863      	ldr	r3, [r4, #4]
 80030c2:	4299      	cmp	r1, r3
 80030c4:	dd40      	ble.n	8003148 <_printf_float+0x1b0>
 80030c6:	f1a9 0902 	sub.w	r9, r9, #2
 80030ca:	fa5f f989 	uxtb.w	r9, r9
 80030ce:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80030d2:	d81f      	bhi.n	8003114 <_printf_float+0x17c>
 80030d4:	3901      	subs	r1, #1
 80030d6:	464a      	mov	r2, r9
 80030d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80030dc:	910d      	str	r1, [sp, #52]	; 0x34
 80030de:	f7ff ff1d 	bl	8002f1c <__exponent>
 80030e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80030e4:	1813      	adds	r3, r2, r0
 80030e6:	2a01      	cmp	r2, #1
 80030e8:	4682      	mov	sl, r0
 80030ea:	6123      	str	r3, [r4, #16]
 80030ec:	dc02      	bgt.n	80030f4 <_printf_float+0x15c>
 80030ee:	6822      	ldr	r2, [r4, #0]
 80030f0:	07d2      	lsls	r2, r2, #31
 80030f2:	d501      	bpl.n	80030f8 <_printf_float+0x160>
 80030f4:	3301      	adds	r3, #1
 80030f6:	6123      	str	r3, [r4, #16]
 80030f8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d09c      	beq.n	800303a <_printf_float+0xa2>
 8003100:	232d      	movs	r3, #45	; 0x2d
 8003102:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003106:	e798      	b.n	800303a <_printf_float+0xa2>
 8003108:	2947      	cmp	r1, #71	; 0x47
 800310a:	d1bc      	bne.n	8003086 <_printf_float+0xee>
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1ba      	bne.n	8003086 <_printf_float+0xee>
 8003110:	2301      	movs	r3, #1
 8003112:	e7b7      	b.n	8003084 <_printf_float+0xec>
 8003114:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003118:	d118      	bne.n	800314c <_printf_float+0x1b4>
 800311a:	2900      	cmp	r1, #0
 800311c:	6863      	ldr	r3, [r4, #4]
 800311e:	dd0b      	ble.n	8003138 <_printf_float+0x1a0>
 8003120:	6121      	str	r1, [r4, #16]
 8003122:	b913      	cbnz	r3, 800312a <_printf_float+0x192>
 8003124:	6822      	ldr	r2, [r4, #0]
 8003126:	07d0      	lsls	r0, r2, #31
 8003128:	d502      	bpl.n	8003130 <_printf_float+0x198>
 800312a:	3301      	adds	r3, #1
 800312c:	440b      	add	r3, r1
 800312e:	6123      	str	r3, [r4, #16]
 8003130:	65a1      	str	r1, [r4, #88]	; 0x58
 8003132:	f04f 0a00 	mov.w	sl, #0
 8003136:	e7df      	b.n	80030f8 <_printf_float+0x160>
 8003138:	b913      	cbnz	r3, 8003140 <_printf_float+0x1a8>
 800313a:	6822      	ldr	r2, [r4, #0]
 800313c:	07d2      	lsls	r2, r2, #31
 800313e:	d501      	bpl.n	8003144 <_printf_float+0x1ac>
 8003140:	3302      	adds	r3, #2
 8003142:	e7f4      	b.n	800312e <_printf_float+0x196>
 8003144:	2301      	movs	r3, #1
 8003146:	e7f2      	b.n	800312e <_printf_float+0x196>
 8003148:	f04f 0967 	mov.w	r9, #103	; 0x67
 800314c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800314e:	4299      	cmp	r1, r3
 8003150:	db05      	blt.n	800315e <_printf_float+0x1c6>
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	6121      	str	r1, [r4, #16]
 8003156:	07d8      	lsls	r0, r3, #31
 8003158:	d5ea      	bpl.n	8003130 <_printf_float+0x198>
 800315a:	1c4b      	adds	r3, r1, #1
 800315c:	e7e7      	b.n	800312e <_printf_float+0x196>
 800315e:	2900      	cmp	r1, #0
 8003160:	bfd4      	ite	le
 8003162:	f1c1 0202 	rsble	r2, r1, #2
 8003166:	2201      	movgt	r2, #1
 8003168:	4413      	add	r3, r2
 800316a:	e7e0      	b.n	800312e <_printf_float+0x196>
 800316c:	6823      	ldr	r3, [r4, #0]
 800316e:	055a      	lsls	r2, r3, #21
 8003170:	d407      	bmi.n	8003182 <_printf_float+0x1ea>
 8003172:	6923      	ldr	r3, [r4, #16]
 8003174:	4642      	mov	r2, r8
 8003176:	4631      	mov	r1, r6
 8003178:	4628      	mov	r0, r5
 800317a:	47b8      	blx	r7
 800317c:	3001      	adds	r0, #1
 800317e:	d12b      	bne.n	80031d8 <_printf_float+0x240>
 8003180:	e765      	b.n	800304e <_printf_float+0xb6>
 8003182:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003186:	f240 80dc 	bls.w	8003342 <_printf_float+0x3aa>
 800318a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800318e:	2200      	movs	r2, #0
 8003190:	2300      	movs	r3, #0
 8003192:	f7fd fca1 	bl	8000ad8 <__aeabi_dcmpeq>
 8003196:	2800      	cmp	r0, #0
 8003198:	d033      	beq.n	8003202 <_printf_float+0x26a>
 800319a:	4a36      	ldr	r2, [pc, #216]	; (8003274 <_printf_float+0x2dc>)
 800319c:	2301      	movs	r3, #1
 800319e:	4631      	mov	r1, r6
 80031a0:	4628      	mov	r0, r5
 80031a2:	47b8      	blx	r7
 80031a4:	3001      	adds	r0, #1
 80031a6:	f43f af52 	beq.w	800304e <_printf_float+0xb6>
 80031aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80031ae:	429a      	cmp	r2, r3
 80031b0:	db02      	blt.n	80031b8 <_printf_float+0x220>
 80031b2:	6823      	ldr	r3, [r4, #0]
 80031b4:	07d8      	lsls	r0, r3, #31
 80031b6:	d50f      	bpl.n	80031d8 <_printf_float+0x240>
 80031b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80031bc:	4631      	mov	r1, r6
 80031be:	4628      	mov	r0, r5
 80031c0:	47b8      	blx	r7
 80031c2:	3001      	adds	r0, #1
 80031c4:	f43f af43 	beq.w	800304e <_printf_float+0xb6>
 80031c8:	f04f 0800 	mov.w	r8, #0
 80031cc:	f104 091a 	add.w	r9, r4, #26
 80031d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80031d2:	3b01      	subs	r3, #1
 80031d4:	4543      	cmp	r3, r8
 80031d6:	dc09      	bgt.n	80031ec <_printf_float+0x254>
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	079b      	lsls	r3, r3, #30
 80031dc:	f100 8101 	bmi.w	80033e2 <_printf_float+0x44a>
 80031e0:	68e0      	ldr	r0, [r4, #12]
 80031e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80031e4:	4298      	cmp	r0, r3
 80031e6:	bfb8      	it	lt
 80031e8:	4618      	movlt	r0, r3
 80031ea:	e732      	b.n	8003052 <_printf_float+0xba>
 80031ec:	2301      	movs	r3, #1
 80031ee:	464a      	mov	r2, r9
 80031f0:	4631      	mov	r1, r6
 80031f2:	4628      	mov	r0, r5
 80031f4:	47b8      	blx	r7
 80031f6:	3001      	adds	r0, #1
 80031f8:	f43f af29 	beq.w	800304e <_printf_float+0xb6>
 80031fc:	f108 0801 	add.w	r8, r8, #1
 8003200:	e7e6      	b.n	80031d0 <_printf_float+0x238>
 8003202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003204:	2b00      	cmp	r3, #0
 8003206:	dc37      	bgt.n	8003278 <_printf_float+0x2e0>
 8003208:	4a1a      	ldr	r2, [pc, #104]	; (8003274 <_printf_float+0x2dc>)
 800320a:	2301      	movs	r3, #1
 800320c:	4631      	mov	r1, r6
 800320e:	4628      	mov	r0, r5
 8003210:	47b8      	blx	r7
 8003212:	3001      	adds	r0, #1
 8003214:	f43f af1b 	beq.w	800304e <_printf_float+0xb6>
 8003218:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800321c:	4313      	orrs	r3, r2
 800321e:	d102      	bne.n	8003226 <_printf_float+0x28e>
 8003220:	6823      	ldr	r3, [r4, #0]
 8003222:	07d9      	lsls	r1, r3, #31
 8003224:	d5d8      	bpl.n	80031d8 <_printf_float+0x240>
 8003226:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800322a:	4631      	mov	r1, r6
 800322c:	4628      	mov	r0, r5
 800322e:	47b8      	blx	r7
 8003230:	3001      	adds	r0, #1
 8003232:	f43f af0c 	beq.w	800304e <_printf_float+0xb6>
 8003236:	f04f 0900 	mov.w	r9, #0
 800323a:	f104 0a1a 	add.w	sl, r4, #26
 800323e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003240:	425b      	negs	r3, r3
 8003242:	454b      	cmp	r3, r9
 8003244:	dc01      	bgt.n	800324a <_printf_float+0x2b2>
 8003246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003248:	e794      	b.n	8003174 <_printf_float+0x1dc>
 800324a:	2301      	movs	r3, #1
 800324c:	4652      	mov	r2, sl
 800324e:	4631      	mov	r1, r6
 8003250:	4628      	mov	r0, r5
 8003252:	47b8      	blx	r7
 8003254:	3001      	adds	r0, #1
 8003256:	f43f aefa 	beq.w	800304e <_printf_float+0xb6>
 800325a:	f109 0901 	add.w	r9, r9, #1
 800325e:	e7ee      	b.n	800323e <_printf_float+0x2a6>
 8003260:	7fefffff 	.word	0x7fefffff
 8003264:	08007780 	.word	0x08007780
 8003268:	08007784 	.word	0x08007784
 800326c:	0800778c 	.word	0x0800778c
 8003270:	08007788 	.word	0x08007788
 8003274:	08007790 	.word	0x08007790
 8003278:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800327a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800327c:	429a      	cmp	r2, r3
 800327e:	bfa8      	it	ge
 8003280:	461a      	movge	r2, r3
 8003282:	2a00      	cmp	r2, #0
 8003284:	4691      	mov	r9, r2
 8003286:	dc37      	bgt.n	80032f8 <_printf_float+0x360>
 8003288:	f04f 0b00 	mov.w	fp, #0
 800328c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003290:	f104 021a 	add.w	r2, r4, #26
 8003294:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003298:	ebaa 0309 	sub.w	r3, sl, r9
 800329c:	455b      	cmp	r3, fp
 800329e:	dc33      	bgt.n	8003308 <_printf_float+0x370>
 80032a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80032a4:	429a      	cmp	r2, r3
 80032a6:	db3b      	blt.n	8003320 <_printf_float+0x388>
 80032a8:	6823      	ldr	r3, [r4, #0]
 80032aa:	07da      	lsls	r2, r3, #31
 80032ac:	d438      	bmi.n	8003320 <_printf_float+0x388>
 80032ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80032b2:	eba3 020a 	sub.w	r2, r3, sl
 80032b6:	eba3 0901 	sub.w	r9, r3, r1
 80032ba:	4591      	cmp	r9, r2
 80032bc:	bfa8      	it	ge
 80032be:	4691      	movge	r9, r2
 80032c0:	f1b9 0f00 	cmp.w	r9, #0
 80032c4:	dc34      	bgt.n	8003330 <_printf_float+0x398>
 80032c6:	f04f 0800 	mov.w	r8, #0
 80032ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80032ce:	f104 0a1a 	add.w	sl, r4, #26
 80032d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	eba3 0309 	sub.w	r3, r3, r9
 80032dc:	4543      	cmp	r3, r8
 80032de:	f77f af7b 	ble.w	80031d8 <_printf_float+0x240>
 80032e2:	2301      	movs	r3, #1
 80032e4:	4652      	mov	r2, sl
 80032e6:	4631      	mov	r1, r6
 80032e8:	4628      	mov	r0, r5
 80032ea:	47b8      	blx	r7
 80032ec:	3001      	adds	r0, #1
 80032ee:	f43f aeae 	beq.w	800304e <_printf_float+0xb6>
 80032f2:	f108 0801 	add.w	r8, r8, #1
 80032f6:	e7ec      	b.n	80032d2 <_printf_float+0x33a>
 80032f8:	4613      	mov	r3, r2
 80032fa:	4631      	mov	r1, r6
 80032fc:	4642      	mov	r2, r8
 80032fe:	4628      	mov	r0, r5
 8003300:	47b8      	blx	r7
 8003302:	3001      	adds	r0, #1
 8003304:	d1c0      	bne.n	8003288 <_printf_float+0x2f0>
 8003306:	e6a2      	b.n	800304e <_printf_float+0xb6>
 8003308:	2301      	movs	r3, #1
 800330a:	4631      	mov	r1, r6
 800330c:	4628      	mov	r0, r5
 800330e:	920b      	str	r2, [sp, #44]	; 0x2c
 8003310:	47b8      	blx	r7
 8003312:	3001      	adds	r0, #1
 8003314:	f43f ae9b 	beq.w	800304e <_printf_float+0xb6>
 8003318:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800331a:	f10b 0b01 	add.w	fp, fp, #1
 800331e:	e7b9      	b.n	8003294 <_printf_float+0x2fc>
 8003320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003324:	4631      	mov	r1, r6
 8003326:	4628      	mov	r0, r5
 8003328:	47b8      	blx	r7
 800332a:	3001      	adds	r0, #1
 800332c:	d1bf      	bne.n	80032ae <_printf_float+0x316>
 800332e:	e68e      	b.n	800304e <_printf_float+0xb6>
 8003330:	464b      	mov	r3, r9
 8003332:	eb08 020a 	add.w	r2, r8, sl
 8003336:	4631      	mov	r1, r6
 8003338:	4628      	mov	r0, r5
 800333a:	47b8      	blx	r7
 800333c:	3001      	adds	r0, #1
 800333e:	d1c2      	bne.n	80032c6 <_printf_float+0x32e>
 8003340:	e685      	b.n	800304e <_printf_float+0xb6>
 8003342:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003344:	2a01      	cmp	r2, #1
 8003346:	dc01      	bgt.n	800334c <_printf_float+0x3b4>
 8003348:	07db      	lsls	r3, r3, #31
 800334a:	d537      	bpl.n	80033bc <_printf_float+0x424>
 800334c:	2301      	movs	r3, #1
 800334e:	4642      	mov	r2, r8
 8003350:	4631      	mov	r1, r6
 8003352:	4628      	mov	r0, r5
 8003354:	47b8      	blx	r7
 8003356:	3001      	adds	r0, #1
 8003358:	f43f ae79 	beq.w	800304e <_printf_float+0xb6>
 800335c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003360:	4631      	mov	r1, r6
 8003362:	4628      	mov	r0, r5
 8003364:	47b8      	blx	r7
 8003366:	3001      	adds	r0, #1
 8003368:	f43f ae71 	beq.w	800304e <_printf_float+0xb6>
 800336c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003370:	2200      	movs	r2, #0
 8003372:	2300      	movs	r3, #0
 8003374:	f7fd fbb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8003378:	b9d8      	cbnz	r0, 80033b2 <_printf_float+0x41a>
 800337a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800337c:	f108 0201 	add.w	r2, r8, #1
 8003380:	3b01      	subs	r3, #1
 8003382:	4631      	mov	r1, r6
 8003384:	4628      	mov	r0, r5
 8003386:	47b8      	blx	r7
 8003388:	3001      	adds	r0, #1
 800338a:	d10e      	bne.n	80033aa <_printf_float+0x412>
 800338c:	e65f      	b.n	800304e <_printf_float+0xb6>
 800338e:	2301      	movs	r3, #1
 8003390:	464a      	mov	r2, r9
 8003392:	4631      	mov	r1, r6
 8003394:	4628      	mov	r0, r5
 8003396:	47b8      	blx	r7
 8003398:	3001      	adds	r0, #1
 800339a:	f43f ae58 	beq.w	800304e <_printf_float+0xb6>
 800339e:	f108 0801 	add.w	r8, r8, #1
 80033a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033a4:	3b01      	subs	r3, #1
 80033a6:	4543      	cmp	r3, r8
 80033a8:	dcf1      	bgt.n	800338e <_printf_float+0x3f6>
 80033aa:	4653      	mov	r3, sl
 80033ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80033b0:	e6e1      	b.n	8003176 <_printf_float+0x1de>
 80033b2:	f04f 0800 	mov.w	r8, #0
 80033b6:	f104 091a 	add.w	r9, r4, #26
 80033ba:	e7f2      	b.n	80033a2 <_printf_float+0x40a>
 80033bc:	2301      	movs	r3, #1
 80033be:	4642      	mov	r2, r8
 80033c0:	e7df      	b.n	8003382 <_printf_float+0x3ea>
 80033c2:	2301      	movs	r3, #1
 80033c4:	464a      	mov	r2, r9
 80033c6:	4631      	mov	r1, r6
 80033c8:	4628      	mov	r0, r5
 80033ca:	47b8      	blx	r7
 80033cc:	3001      	adds	r0, #1
 80033ce:	f43f ae3e 	beq.w	800304e <_printf_float+0xb6>
 80033d2:	f108 0801 	add.w	r8, r8, #1
 80033d6:	68e3      	ldr	r3, [r4, #12]
 80033d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80033da:	1a5b      	subs	r3, r3, r1
 80033dc:	4543      	cmp	r3, r8
 80033de:	dcf0      	bgt.n	80033c2 <_printf_float+0x42a>
 80033e0:	e6fe      	b.n	80031e0 <_printf_float+0x248>
 80033e2:	f04f 0800 	mov.w	r8, #0
 80033e6:	f104 0919 	add.w	r9, r4, #25
 80033ea:	e7f4      	b.n	80033d6 <_printf_float+0x43e>

080033ec <_printf_common>:
 80033ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033f0:	4616      	mov	r6, r2
 80033f2:	4699      	mov	r9, r3
 80033f4:	688a      	ldr	r2, [r1, #8]
 80033f6:	690b      	ldr	r3, [r1, #16]
 80033f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033fc:	4293      	cmp	r3, r2
 80033fe:	bfb8      	it	lt
 8003400:	4613      	movlt	r3, r2
 8003402:	6033      	str	r3, [r6, #0]
 8003404:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003408:	4607      	mov	r7, r0
 800340a:	460c      	mov	r4, r1
 800340c:	b10a      	cbz	r2, 8003412 <_printf_common+0x26>
 800340e:	3301      	adds	r3, #1
 8003410:	6033      	str	r3, [r6, #0]
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	0699      	lsls	r1, r3, #26
 8003416:	bf42      	ittt	mi
 8003418:	6833      	ldrmi	r3, [r6, #0]
 800341a:	3302      	addmi	r3, #2
 800341c:	6033      	strmi	r3, [r6, #0]
 800341e:	6825      	ldr	r5, [r4, #0]
 8003420:	f015 0506 	ands.w	r5, r5, #6
 8003424:	d106      	bne.n	8003434 <_printf_common+0x48>
 8003426:	f104 0a19 	add.w	sl, r4, #25
 800342a:	68e3      	ldr	r3, [r4, #12]
 800342c:	6832      	ldr	r2, [r6, #0]
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	42ab      	cmp	r3, r5
 8003432:	dc26      	bgt.n	8003482 <_printf_common+0x96>
 8003434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003438:	1e13      	subs	r3, r2, #0
 800343a:	6822      	ldr	r2, [r4, #0]
 800343c:	bf18      	it	ne
 800343e:	2301      	movne	r3, #1
 8003440:	0692      	lsls	r2, r2, #26
 8003442:	d42b      	bmi.n	800349c <_printf_common+0xb0>
 8003444:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003448:	4649      	mov	r1, r9
 800344a:	4638      	mov	r0, r7
 800344c:	47c0      	blx	r8
 800344e:	3001      	adds	r0, #1
 8003450:	d01e      	beq.n	8003490 <_printf_common+0xa4>
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	68e5      	ldr	r5, [r4, #12]
 8003456:	6832      	ldr	r2, [r6, #0]
 8003458:	f003 0306 	and.w	r3, r3, #6
 800345c:	2b04      	cmp	r3, #4
 800345e:	bf08      	it	eq
 8003460:	1aad      	subeq	r5, r5, r2
 8003462:	68a3      	ldr	r3, [r4, #8]
 8003464:	6922      	ldr	r2, [r4, #16]
 8003466:	bf0c      	ite	eq
 8003468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800346c:	2500      	movne	r5, #0
 800346e:	4293      	cmp	r3, r2
 8003470:	bfc4      	itt	gt
 8003472:	1a9b      	subgt	r3, r3, r2
 8003474:	18ed      	addgt	r5, r5, r3
 8003476:	2600      	movs	r6, #0
 8003478:	341a      	adds	r4, #26
 800347a:	42b5      	cmp	r5, r6
 800347c:	d11a      	bne.n	80034b4 <_printf_common+0xc8>
 800347e:	2000      	movs	r0, #0
 8003480:	e008      	b.n	8003494 <_printf_common+0xa8>
 8003482:	2301      	movs	r3, #1
 8003484:	4652      	mov	r2, sl
 8003486:	4649      	mov	r1, r9
 8003488:	4638      	mov	r0, r7
 800348a:	47c0      	blx	r8
 800348c:	3001      	adds	r0, #1
 800348e:	d103      	bne.n	8003498 <_printf_common+0xac>
 8003490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003498:	3501      	adds	r5, #1
 800349a:	e7c6      	b.n	800342a <_printf_common+0x3e>
 800349c:	18e1      	adds	r1, r4, r3
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	2030      	movs	r0, #48	; 0x30
 80034a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034a6:	4422      	add	r2, r4
 80034a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034b0:	3302      	adds	r3, #2
 80034b2:	e7c7      	b.n	8003444 <_printf_common+0x58>
 80034b4:	2301      	movs	r3, #1
 80034b6:	4622      	mov	r2, r4
 80034b8:	4649      	mov	r1, r9
 80034ba:	4638      	mov	r0, r7
 80034bc:	47c0      	blx	r8
 80034be:	3001      	adds	r0, #1
 80034c0:	d0e6      	beq.n	8003490 <_printf_common+0xa4>
 80034c2:	3601      	adds	r6, #1
 80034c4:	e7d9      	b.n	800347a <_printf_common+0x8e>
	...

080034c8 <_printf_i>:
 80034c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034cc:	7e0f      	ldrb	r7, [r1, #24]
 80034ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80034d0:	2f78      	cmp	r7, #120	; 0x78
 80034d2:	4691      	mov	r9, r2
 80034d4:	4680      	mov	r8, r0
 80034d6:	460c      	mov	r4, r1
 80034d8:	469a      	mov	sl, r3
 80034da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80034de:	d807      	bhi.n	80034f0 <_printf_i+0x28>
 80034e0:	2f62      	cmp	r7, #98	; 0x62
 80034e2:	d80a      	bhi.n	80034fa <_printf_i+0x32>
 80034e4:	2f00      	cmp	r7, #0
 80034e6:	f000 80d8 	beq.w	800369a <_printf_i+0x1d2>
 80034ea:	2f58      	cmp	r7, #88	; 0x58
 80034ec:	f000 80a3 	beq.w	8003636 <_printf_i+0x16e>
 80034f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034f8:	e03a      	b.n	8003570 <_printf_i+0xa8>
 80034fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80034fe:	2b15      	cmp	r3, #21
 8003500:	d8f6      	bhi.n	80034f0 <_printf_i+0x28>
 8003502:	a101      	add	r1, pc, #4	; (adr r1, 8003508 <_printf_i+0x40>)
 8003504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003508:	08003561 	.word	0x08003561
 800350c:	08003575 	.word	0x08003575
 8003510:	080034f1 	.word	0x080034f1
 8003514:	080034f1 	.word	0x080034f1
 8003518:	080034f1 	.word	0x080034f1
 800351c:	080034f1 	.word	0x080034f1
 8003520:	08003575 	.word	0x08003575
 8003524:	080034f1 	.word	0x080034f1
 8003528:	080034f1 	.word	0x080034f1
 800352c:	080034f1 	.word	0x080034f1
 8003530:	080034f1 	.word	0x080034f1
 8003534:	08003681 	.word	0x08003681
 8003538:	080035a5 	.word	0x080035a5
 800353c:	08003663 	.word	0x08003663
 8003540:	080034f1 	.word	0x080034f1
 8003544:	080034f1 	.word	0x080034f1
 8003548:	080036a3 	.word	0x080036a3
 800354c:	080034f1 	.word	0x080034f1
 8003550:	080035a5 	.word	0x080035a5
 8003554:	080034f1 	.word	0x080034f1
 8003558:	080034f1 	.word	0x080034f1
 800355c:	0800366b 	.word	0x0800366b
 8003560:	682b      	ldr	r3, [r5, #0]
 8003562:	1d1a      	adds	r2, r3, #4
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	602a      	str	r2, [r5, #0]
 8003568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800356c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003570:	2301      	movs	r3, #1
 8003572:	e0a3      	b.n	80036bc <_printf_i+0x1f4>
 8003574:	6820      	ldr	r0, [r4, #0]
 8003576:	6829      	ldr	r1, [r5, #0]
 8003578:	0606      	lsls	r6, r0, #24
 800357a:	f101 0304 	add.w	r3, r1, #4
 800357e:	d50a      	bpl.n	8003596 <_printf_i+0xce>
 8003580:	680e      	ldr	r6, [r1, #0]
 8003582:	602b      	str	r3, [r5, #0]
 8003584:	2e00      	cmp	r6, #0
 8003586:	da03      	bge.n	8003590 <_printf_i+0xc8>
 8003588:	232d      	movs	r3, #45	; 0x2d
 800358a:	4276      	negs	r6, r6
 800358c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003590:	485e      	ldr	r0, [pc, #376]	; (800370c <_printf_i+0x244>)
 8003592:	230a      	movs	r3, #10
 8003594:	e019      	b.n	80035ca <_printf_i+0x102>
 8003596:	680e      	ldr	r6, [r1, #0]
 8003598:	602b      	str	r3, [r5, #0]
 800359a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800359e:	bf18      	it	ne
 80035a0:	b236      	sxthne	r6, r6
 80035a2:	e7ef      	b.n	8003584 <_printf_i+0xbc>
 80035a4:	682b      	ldr	r3, [r5, #0]
 80035a6:	6820      	ldr	r0, [r4, #0]
 80035a8:	1d19      	adds	r1, r3, #4
 80035aa:	6029      	str	r1, [r5, #0]
 80035ac:	0601      	lsls	r1, r0, #24
 80035ae:	d501      	bpl.n	80035b4 <_printf_i+0xec>
 80035b0:	681e      	ldr	r6, [r3, #0]
 80035b2:	e002      	b.n	80035ba <_printf_i+0xf2>
 80035b4:	0646      	lsls	r6, r0, #25
 80035b6:	d5fb      	bpl.n	80035b0 <_printf_i+0xe8>
 80035b8:	881e      	ldrh	r6, [r3, #0]
 80035ba:	4854      	ldr	r0, [pc, #336]	; (800370c <_printf_i+0x244>)
 80035bc:	2f6f      	cmp	r7, #111	; 0x6f
 80035be:	bf0c      	ite	eq
 80035c0:	2308      	moveq	r3, #8
 80035c2:	230a      	movne	r3, #10
 80035c4:	2100      	movs	r1, #0
 80035c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035ca:	6865      	ldr	r5, [r4, #4]
 80035cc:	60a5      	str	r5, [r4, #8]
 80035ce:	2d00      	cmp	r5, #0
 80035d0:	bfa2      	ittt	ge
 80035d2:	6821      	ldrge	r1, [r4, #0]
 80035d4:	f021 0104 	bicge.w	r1, r1, #4
 80035d8:	6021      	strge	r1, [r4, #0]
 80035da:	b90e      	cbnz	r6, 80035e0 <_printf_i+0x118>
 80035dc:	2d00      	cmp	r5, #0
 80035de:	d04d      	beq.n	800367c <_printf_i+0x1b4>
 80035e0:	4615      	mov	r5, r2
 80035e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80035e6:	fb03 6711 	mls	r7, r3, r1, r6
 80035ea:	5dc7      	ldrb	r7, [r0, r7]
 80035ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80035f0:	4637      	mov	r7, r6
 80035f2:	42bb      	cmp	r3, r7
 80035f4:	460e      	mov	r6, r1
 80035f6:	d9f4      	bls.n	80035e2 <_printf_i+0x11a>
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d10b      	bne.n	8003614 <_printf_i+0x14c>
 80035fc:	6823      	ldr	r3, [r4, #0]
 80035fe:	07de      	lsls	r6, r3, #31
 8003600:	d508      	bpl.n	8003614 <_printf_i+0x14c>
 8003602:	6923      	ldr	r3, [r4, #16]
 8003604:	6861      	ldr	r1, [r4, #4]
 8003606:	4299      	cmp	r1, r3
 8003608:	bfde      	ittt	le
 800360a:	2330      	movle	r3, #48	; 0x30
 800360c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003610:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003614:	1b52      	subs	r2, r2, r5
 8003616:	6122      	str	r2, [r4, #16]
 8003618:	f8cd a000 	str.w	sl, [sp]
 800361c:	464b      	mov	r3, r9
 800361e:	aa03      	add	r2, sp, #12
 8003620:	4621      	mov	r1, r4
 8003622:	4640      	mov	r0, r8
 8003624:	f7ff fee2 	bl	80033ec <_printf_common>
 8003628:	3001      	adds	r0, #1
 800362a:	d14c      	bne.n	80036c6 <_printf_i+0x1fe>
 800362c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003630:	b004      	add	sp, #16
 8003632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003636:	4835      	ldr	r0, [pc, #212]	; (800370c <_printf_i+0x244>)
 8003638:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800363c:	6829      	ldr	r1, [r5, #0]
 800363e:	6823      	ldr	r3, [r4, #0]
 8003640:	f851 6b04 	ldr.w	r6, [r1], #4
 8003644:	6029      	str	r1, [r5, #0]
 8003646:	061d      	lsls	r5, r3, #24
 8003648:	d514      	bpl.n	8003674 <_printf_i+0x1ac>
 800364a:	07df      	lsls	r7, r3, #31
 800364c:	bf44      	itt	mi
 800364e:	f043 0320 	orrmi.w	r3, r3, #32
 8003652:	6023      	strmi	r3, [r4, #0]
 8003654:	b91e      	cbnz	r6, 800365e <_printf_i+0x196>
 8003656:	6823      	ldr	r3, [r4, #0]
 8003658:	f023 0320 	bic.w	r3, r3, #32
 800365c:	6023      	str	r3, [r4, #0]
 800365e:	2310      	movs	r3, #16
 8003660:	e7b0      	b.n	80035c4 <_printf_i+0xfc>
 8003662:	6823      	ldr	r3, [r4, #0]
 8003664:	f043 0320 	orr.w	r3, r3, #32
 8003668:	6023      	str	r3, [r4, #0]
 800366a:	2378      	movs	r3, #120	; 0x78
 800366c:	4828      	ldr	r0, [pc, #160]	; (8003710 <_printf_i+0x248>)
 800366e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003672:	e7e3      	b.n	800363c <_printf_i+0x174>
 8003674:	0659      	lsls	r1, r3, #25
 8003676:	bf48      	it	mi
 8003678:	b2b6      	uxthmi	r6, r6
 800367a:	e7e6      	b.n	800364a <_printf_i+0x182>
 800367c:	4615      	mov	r5, r2
 800367e:	e7bb      	b.n	80035f8 <_printf_i+0x130>
 8003680:	682b      	ldr	r3, [r5, #0]
 8003682:	6826      	ldr	r6, [r4, #0]
 8003684:	6961      	ldr	r1, [r4, #20]
 8003686:	1d18      	adds	r0, r3, #4
 8003688:	6028      	str	r0, [r5, #0]
 800368a:	0635      	lsls	r5, r6, #24
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	d501      	bpl.n	8003694 <_printf_i+0x1cc>
 8003690:	6019      	str	r1, [r3, #0]
 8003692:	e002      	b.n	800369a <_printf_i+0x1d2>
 8003694:	0670      	lsls	r0, r6, #25
 8003696:	d5fb      	bpl.n	8003690 <_printf_i+0x1c8>
 8003698:	8019      	strh	r1, [r3, #0]
 800369a:	2300      	movs	r3, #0
 800369c:	6123      	str	r3, [r4, #16]
 800369e:	4615      	mov	r5, r2
 80036a0:	e7ba      	b.n	8003618 <_printf_i+0x150>
 80036a2:	682b      	ldr	r3, [r5, #0]
 80036a4:	1d1a      	adds	r2, r3, #4
 80036a6:	602a      	str	r2, [r5, #0]
 80036a8:	681d      	ldr	r5, [r3, #0]
 80036aa:	6862      	ldr	r2, [r4, #4]
 80036ac:	2100      	movs	r1, #0
 80036ae:	4628      	mov	r0, r5
 80036b0:	f7fc fd9e 	bl	80001f0 <memchr>
 80036b4:	b108      	cbz	r0, 80036ba <_printf_i+0x1f2>
 80036b6:	1b40      	subs	r0, r0, r5
 80036b8:	6060      	str	r0, [r4, #4]
 80036ba:	6863      	ldr	r3, [r4, #4]
 80036bc:	6123      	str	r3, [r4, #16]
 80036be:	2300      	movs	r3, #0
 80036c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036c4:	e7a8      	b.n	8003618 <_printf_i+0x150>
 80036c6:	6923      	ldr	r3, [r4, #16]
 80036c8:	462a      	mov	r2, r5
 80036ca:	4649      	mov	r1, r9
 80036cc:	4640      	mov	r0, r8
 80036ce:	47d0      	blx	sl
 80036d0:	3001      	adds	r0, #1
 80036d2:	d0ab      	beq.n	800362c <_printf_i+0x164>
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	079b      	lsls	r3, r3, #30
 80036d8:	d413      	bmi.n	8003702 <_printf_i+0x23a>
 80036da:	68e0      	ldr	r0, [r4, #12]
 80036dc:	9b03      	ldr	r3, [sp, #12]
 80036de:	4298      	cmp	r0, r3
 80036e0:	bfb8      	it	lt
 80036e2:	4618      	movlt	r0, r3
 80036e4:	e7a4      	b.n	8003630 <_printf_i+0x168>
 80036e6:	2301      	movs	r3, #1
 80036e8:	4632      	mov	r2, r6
 80036ea:	4649      	mov	r1, r9
 80036ec:	4640      	mov	r0, r8
 80036ee:	47d0      	blx	sl
 80036f0:	3001      	adds	r0, #1
 80036f2:	d09b      	beq.n	800362c <_printf_i+0x164>
 80036f4:	3501      	adds	r5, #1
 80036f6:	68e3      	ldr	r3, [r4, #12]
 80036f8:	9903      	ldr	r1, [sp, #12]
 80036fa:	1a5b      	subs	r3, r3, r1
 80036fc:	42ab      	cmp	r3, r5
 80036fe:	dcf2      	bgt.n	80036e6 <_printf_i+0x21e>
 8003700:	e7eb      	b.n	80036da <_printf_i+0x212>
 8003702:	2500      	movs	r5, #0
 8003704:	f104 0619 	add.w	r6, r4, #25
 8003708:	e7f5      	b.n	80036f6 <_printf_i+0x22e>
 800370a:	bf00      	nop
 800370c:	08007792 	.word	0x08007792
 8003710:	080077a3 	.word	0x080077a3

08003714 <_scanf_float>:
 8003714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003718:	b087      	sub	sp, #28
 800371a:	4617      	mov	r7, r2
 800371c:	9303      	str	r3, [sp, #12]
 800371e:	688b      	ldr	r3, [r1, #8]
 8003720:	1e5a      	subs	r2, r3, #1
 8003722:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003726:	bf83      	ittte	hi
 8003728:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800372c:	195b      	addhi	r3, r3, r5
 800372e:	9302      	strhi	r3, [sp, #8]
 8003730:	2300      	movls	r3, #0
 8003732:	bf86      	itte	hi
 8003734:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003738:	608b      	strhi	r3, [r1, #8]
 800373a:	9302      	strls	r3, [sp, #8]
 800373c:	680b      	ldr	r3, [r1, #0]
 800373e:	468b      	mov	fp, r1
 8003740:	2500      	movs	r5, #0
 8003742:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003746:	f84b 3b1c 	str.w	r3, [fp], #28
 800374a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800374e:	4680      	mov	r8, r0
 8003750:	460c      	mov	r4, r1
 8003752:	465e      	mov	r6, fp
 8003754:	46aa      	mov	sl, r5
 8003756:	46a9      	mov	r9, r5
 8003758:	9501      	str	r5, [sp, #4]
 800375a:	68a2      	ldr	r2, [r4, #8]
 800375c:	b152      	cbz	r2, 8003774 <_scanf_float+0x60>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b4e      	cmp	r3, #78	; 0x4e
 8003764:	d864      	bhi.n	8003830 <_scanf_float+0x11c>
 8003766:	2b40      	cmp	r3, #64	; 0x40
 8003768:	d83c      	bhi.n	80037e4 <_scanf_float+0xd0>
 800376a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800376e:	b2c8      	uxtb	r0, r1
 8003770:	280e      	cmp	r0, #14
 8003772:	d93a      	bls.n	80037ea <_scanf_float+0xd6>
 8003774:	f1b9 0f00 	cmp.w	r9, #0
 8003778:	d003      	beq.n	8003782 <_scanf_float+0x6e>
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003780:	6023      	str	r3, [r4, #0]
 8003782:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003786:	f1ba 0f01 	cmp.w	sl, #1
 800378a:	f200 8113 	bhi.w	80039b4 <_scanf_float+0x2a0>
 800378e:	455e      	cmp	r6, fp
 8003790:	f200 8105 	bhi.w	800399e <_scanf_float+0x28a>
 8003794:	2501      	movs	r5, #1
 8003796:	4628      	mov	r0, r5
 8003798:	b007      	add	sp, #28
 800379a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800379e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80037a2:	2a0d      	cmp	r2, #13
 80037a4:	d8e6      	bhi.n	8003774 <_scanf_float+0x60>
 80037a6:	a101      	add	r1, pc, #4	; (adr r1, 80037ac <_scanf_float+0x98>)
 80037a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80037ac:	080038eb 	.word	0x080038eb
 80037b0:	08003775 	.word	0x08003775
 80037b4:	08003775 	.word	0x08003775
 80037b8:	08003775 	.word	0x08003775
 80037bc:	0800394b 	.word	0x0800394b
 80037c0:	08003923 	.word	0x08003923
 80037c4:	08003775 	.word	0x08003775
 80037c8:	08003775 	.word	0x08003775
 80037cc:	080038f9 	.word	0x080038f9
 80037d0:	08003775 	.word	0x08003775
 80037d4:	08003775 	.word	0x08003775
 80037d8:	08003775 	.word	0x08003775
 80037dc:	08003775 	.word	0x08003775
 80037e0:	080038b1 	.word	0x080038b1
 80037e4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80037e8:	e7db      	b.n	80037a2 <_scanf_float+0x8e>
 80037ea:	290e      	cmp	r1, #14
 80037ec:	d8c2      	bhi.n	8003774 <_scanf_float+0x60>
 80037ee:	a001      	add	r0, pc, #4	; (adr r0, 80037f4 <_scanf_float+0xe0>)
 80037f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80037f4:	080038a3 	.word	0x080038a3
 80037f8:	08003775 	.word	0x08003775
 80037fc:	080038a3 	.word	0x080038a3
 8003800:	08003937 	.word	0x08003937
 8003804:	08003775 	.word	0x08003775
 8003808:	08003851 	.word	0x08003851
 800380c:	0800388d 	.word	0x0800388d
 8003810:	0800388d 	.word	0x0800388d
 8003814:	0800388d 	.word	0x0800388d
 8003818:	0800388d 	.word	0x0800388d
 800381c:	0800388d 	.word	0x0800388d
 8003820:	0800388d 	.word	0x0800388d
 8003824:	0800388d 	.word	0x0800388d
 8003828:	0800388d 	.word	0x0800388d
 800382c:	0800388d 	.word	0x0800388d
 8003830:	2b6e      	cmp	r3, #110	; 0x6e
 8003832:	d809      	bhi.n	8003848 <_scanf_float+0x134>
 8003834:	2b60      	cmp	r3, #96	; 0x60
 8003836:	d8b2      	bhi.n	800379e <_scanf_float+0x8a>
 8003838:	2b54      	cmp	r3, #84	; 0x54
 800383a:	d077      	beq.n	800392c <_scanf_float+0x218>
 800383c:	2b59      	cmp	r3, #89	; 0x59
 800383e:	d199      	bne.n	8003774 <_scanf_float+0x60>
 8003840:	2d07      	cmp	r5, #7
 8003842:	d197      	bne.n	8003774 <_scanf_float+0x60>
 8003844:	2508      	movs	r5, #8
 8003846:	e029      	b.n	800389c <_scanf_float+0x188>
 8003848:	2b74      	cmp	r3, #116	; 0x74
 800384a:	d06f      	beq.n	800392c <_scanf_float+0x218>
 800384c:	2b79      	cmp	r3, #121	; 0x79
 800384e:	e7f6      	b.n	800383e <_scanf_float+0x12a>
 8003850:	6821      	ldr	r1, [r4, #0]
 8003852:	05c8      	lsls	r0, r1, #23
 8003854:	d51a      	bpl.n	800388c <_scanf_float+0x178>
 8003856:	9b02      	ldr	r3, [sp, #8]
 8003858:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800385c:	6021      	str	r1, [r4, #0]
 800385e:	f109 0901 	add.w	r9, r9, #1
 8003862:	b11b      	cbz	r3, 800386c <_scanf_float+0x158>
 8003864:	3b01      	subs	r3, #1
 8003866:	3201      	adds	r2, #1
 8003868:	9302      	str	r3, [sp, #8]
 800386a:	60a2      	str	r2, [r4, #8]
 800386c:	68a3      	ldr	r3, [r4, #8]
 800386e:	3b01      	subs	r3, #1
 8003870:	60a3      	str	r3, [r4, #8]
 8003872:	6923      	ldr	r3, [r4, #16]
 8003874:	3301      	adds	r3, #1
 8003876:	6123      	str	r3, [r4, #16]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3b01      	subs	r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	607b      	str	r3, [r7, #4]
 8003880:	f340 8084 	ble.w	800398c <_scanf_float+0x278>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	3301      	adds	r3, #1
 8003888:	603b      	str	r3, [r7, #0]
 800388a:	e766      	b.n	800375a <_scanf_float+0x46>
 800388c:	eb1a 0f05 	cmn.w	sl, r5
 8003890:	f47f af70 	bne.w	8003774 <_scanf_float+0x60>
 8003894:	6822      	ldr	r2, [r4, #0]
 8003896:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800389a:	6022      	str	r2, [r4, #0]
 800389c:	f806 3b01 	strb.w	r3, [r6], #1
 80038a0:	e7e4      	b.n	800386c <_scanf_float+0x158>
 80038a2:	6822      	ldr	r2, [r4, #0]
 80038a4:	0610      	lsls	r0, r2, #24
 80038a6:	f57f af65 	bpl.w	8003774 <_scanf_float+0x60>
 80038aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038ae:	e7f4      	b.n	800389a <_scanf_float+0x186>
 80038b0:	f1ba 0f00 	cmp.w	sl, #0
 80038b4:	d10e      	bne.n	80038d4 <_scanf_float+0x1c0>
 80038b6:	f1b9 0f00 	cmp.w	r9, #0
 80038ba:	d10e      	bne.n	80038da <_scanf_float+0x1c6>
 80038bc:	6822      	ldr	r2, [r4, #0]
 80038be:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80038c2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80038c6:	d108      	bne.n	80038da <_scanf_float+0x1c6>
 80038c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80038cc:	6022      	str	r2, [r4, #0]
 80038ce:	f04f 0a01 	mov.w	sl, #1
 80038d2:	e7e3      	b.n	800389c <_scanf_float+0x188>
 80038d4:	f1ba 0f02 	cmp.w	sl, #2
 80038d8:	d055      	beq.n	8003986 <_scanf_float+0x272>
 80038da:	2d01      	cmp	r5, #1
 80038dc:	d002      	beq.n	80038e4 <_scanf_float+0x1d0>
 80038de:	2d04      	cmp	r5, #4
 80038e0:	f47f af48 	bne.w	8003774 <_scanf_float+0x60>
 80038e4:	3501      	adds	r5, #1
 80038e6:	b2ed      	uxtb	r5, r5
 80038e8:	e7d8      	b.n	800389c <_scanf_float+0x188>
 80038ea:	f1ba 0f01 	cmp.w	sl, #1
 80038ee:	f47f af41 	bne.w	8003774 <_scanf_float+0x60>
 80038f2:	f04f 0a02 	mov.w	sl, #2
 80038f6:	e7d1      	b.n	800389c <_scanf_float+0x188>
 80038f8:	b97d      	cbnz	r5, 800391a <_scanf_float+0x206>
 80038fa:	f1b9 0f00 	cmp.w	r9, #0
 80038fe:	f47f af3c 	bne.w	800377a <_scanf_float+0x66>
 8003902:	6822      	ldr	r2, [r4, #0]
 8003904:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003908:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800390c:	f47f af39 	bne.w	8003782 <_scanf_float+0x6e>
 8003910:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003914:	6022      	str	r2, [r4, #0]
 8003916:	2501      	movs	r5, #1
 8003918:	e7c0      	b.n	800389c <_scanf_float+0x188>
 800391a:	2d03      	cmp	r5, #3
 800391c:	d0e2      	beq.n	80038e4 <_scanf_float+0x1d0>
 800391e:	2d05      	cmp	r5, #5
 8003920:	e7de      	b.n	80038e0 <_scanf_float+0x1cc>
 8003922:	2d02      	cmp	r5, #2
 8003924:	f47f af26 	bne.w	8003774 <_scanf_float+0x60>
 8003928:	2503      	movs	r5, #3
 800392a:	e7b7      	b.n	800389c <_scanf_float+0x188>
 800392c:	2d06      	cmp	r5, #6
 800392e:	f47f af21 	bne.w	8003774 <_scanf_float+0x60>
 8003932:	2507      	movs	r5, #7
 8003934:	e7b2      	b.n	800389c <_scanf_float+0x188>
 8003936:	6822      	ldr	r2, [r4, #0]
 8003938:	0591      	lsls	r1, r2, #22
 800393a:	f57f af1b 	bpl.w	8003774 <_scanf_float+0x60>
 800393e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003942:	6022      	str	r2, [r4, #0]
 8003944:	f8cd 9004 	str.w	r9, [sp, #4]
 8003948:	e7a8      	b.n	800389c <_scanf_float+0x188>
 800394a:	6822      	ldr	r2, [r4, #0]
 800394c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003950:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003954:	d006      	beq.n	8003964 <_scanf_float+0x250>
 8003956:	0550      	lsls	r0, r2, #21
 8003958:	f57f af0c 	bpl.w	8003774 <_scanf_float+0x60>
 800395c:	f1b9 0f00 	cmp.w	r9, #0
 8003960:	f43f af0f 	beq.w	8003782 <_scanf_float+0x6e>
 8003964:	0591      	lsls	r1, r2, #22
 8003966:	bf58      	it	pl
 8003968:	9901      	ldrpl	r1, [sp, #4]
 800396a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800396e:	bf58      	it	pl
 8003970:	eba9 0101 	subpl.w	r1, r9, r1
 8003974:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003978:	bf58      	it	pl
 800397a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800397e:	6022      	str	r2, [r4, #0]
 8003980:	f04f 0900 	mov.w	r9, #0
 8003984:	e78a      	b.n	800389c <_scanf_float+0x188>
 8003986:	f04f 0a03 	mov.w	sl, #3
 800398a:	e787      	b.n	800389c <_scanf_float+0x188>
 800398c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003990:	4639      	mov	r1, r7
 8003992:	4640      	mov	r0, r8
 8003994:	4798      	blx	r3
 8003996:	2800      	cmp	r0, #0
 8003998:	f43f aedf 	beq.w	800375a <_scanf_float+0x46>
 800399c:	e6ea      	b.n	8003774 <_scanf_float+0x60>
 800399e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80039a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80039a6:	463a      	mov	r2, r7
 80039a8:	4640      	mov	r0, r8
 80039aa:	4798      	blx	r3
 80039ac:	6923      	ldr	r3, [r4, #16]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	6123      	str	r3, [r4, #16]
 80039b2:	e6ec      	b.n	800378e <_scanf_float+0x7a>
 80039b4:	1e6b      	subs	r3, r5, #1
 80039b6:	2b06      	cmp	r3, #6
 80039b8:	d825      	bhi.n	8003a06 <_scanf_float+0x2f2>
 80039ba:	2d02      	cmp	r5, #2
 80039bc:	d836      	bhi.n	8003a2c <_scanf_float+0x318>
 80039be:	455e      	cmp	r6, fp
 80039c0:	f67f aee8 	bls.w	8003794 <_scanf_float+0x80>
 80039c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80039c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80039cc:	463a      	mov	r2, r7
 80039ce:	4640      	mov	r0, r8
 80039d0:	4798      	blx	r3
 80039d2:	6923      	ldr	r3, [r4, #16]
 80039d4:	3b01      	subs	r3, #1
 80039d6:	6123      	str	r3, [r4, #16]
 80039d8:	e7f1      	b.n	80039be <_scanf_float+0x2aa>
 80039da:	9802      	ldr	r0, [sp, #8]
 80039dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80039e0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80039e4:	9002      	str	r0, [sp, #8]
 80039e6:	463a      	mov	r2, r7
 80039e8:	4640      	mov	r0, r8
 80039ea:	4798      	blx	r3
 80039ec:	6923      	ldr	r3, [r4, #16]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	6123      	str	r3, [r4, #16]
 80039f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80039f6:	fa5f fa8a 	uxtb.w	sl, sl
 80039fa:	f1ba 0f02 	cmp.w	sl, #2
 80039fe:	d1ec      	bne.n	80039da <_scanf_float+0x2c6>
 8003a00:	3d03      	subs	r5, #3
 8003a02:	b2ed      	uxtb	r5, r5
 8003a04:	1b76      	subs	r6, r6, r5
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	05da      	lsls	r2, r3, #23
 8003a0a:	d52f      	bpl.n	8003a6c <_scanf_float+0x358>
 8003a0c:	055b      	lsls	r3, r3, #21
 8003a0e:	d510      	bpl.n	8003a32 <_scanf_float+0x31e>
 8003a10:	455e      	cmp	r6, fp
 8003a12:	f67f aebf 	bls.w	8003794 <_scanf_float+0x80>
 8003a16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003a1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003a1e:	463a      	mov	r2, r7
 8003a20:	4640      	mov	r0, r8
 8003a22:	4798      	blx	r3
 8003a24:	6923      	ldr	r3, [r4, #16]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	6123      	str	r3, [r4, #16]
 8003a2a:	e7f1      	b.n	8003a10 <_scanf_float+0x2fc>
 8003a2c:	46aa      	mov	sl, r5
 8003a2e:	9602      	str	r6, [sp, #8]
 8003a30:	e7df      	b.n	80039f2 <_scanf_float+0x2de>
 8003a32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003a36:	6923      	ldr	r3, [r4, #16]
 8003a38:	2965      	cmp	r1, #101	; 0x65
 8003a3a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003a3e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8003a42:	6123      	str	r3, [r4, #16]
 8003a44:	d00c      	beq.n	8003a60 <_scanf_float+0x34c>
 8003a46:	2945      	cmp	r1, #69	; 0x45
 8003a48:	d00a      	beq.n	8003a60 <_scanf_float+0x34c>
 8003a4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003a4e:	463a      	mov	r2, r7
 8003a50:	4640      	mov	r0, r8
 8003a52:	4798      	blx	r3
 8003a54:	6923      	ldr	r3, [r4, #16]
 8003a56:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	1eb5      	subs	r5, r6, #2
 8003a5e:	6123      	str	r3, [r4, #16]
 8003a60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003a64:	463a      	mov	r2, r7
 8003a66:	4640      	mov	r0, r8
 8003a68:	4798      	blx	r3
 8003a6a:	462e      	mov	r6, r5
 8003a6c:	6825      	ldr	r5, [r4, #0]
 8003a6e:	f015 0510 	ands.w	r5, r5, #16
 8003a72:	d155      	bne.n	8003b20 <_scanf_float+0x40c>
 8003a74:	7035      	strb	r5, [r6, #0]
 8003a76:	6823      	ldr	r3, [r4, #0]
 8003a78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a80:	d11b      	bne.n	8003aba <_scanf_float+0x3a6>
 8003a82:	9b01      	ldr	r3, [sp, #4]
 8003a84:	454b      	cmp	r3, r9
 8003a86:	eba3 0209 	sub.w	r2, r3, r9
 8003a8a:	d123      	bne.n	8003ad4 <_scanf_float+0x3c0>
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	4659      	mov	r1, fp
 8003a90:	4640      	mov	r0, r8
 8003a92:	f000 fe79 	bl	8004788 <_strtod_r>
 8003a96:	6822      	ldr	r2, [r4, #0]
 8003a98:	9b03      	ldr	r3, [sp, #12]
 8003a9a:	f012 0f02 	tst.w	r2, #2
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4606      	mov	r6, r0
 8003aa2:	460f      	mov	r7, r1
 8003aa4:	d021      	beq.n	8003aea <_scanf_float+0x3d6>
 8003aa6:	1d1a      	adds	r2, r3, #4
 8003aa8:	9903      	ldr	r1, [sp, #12]
 8003aaa:	600a      	str	r2, [r1, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	e9c3 6700 	strd	r6, r7, [r3]
 8003ab2:	68e3      	ldr	r3, [r4, #12]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	60e3      	str	r3, [r4, #12]
 8003ab8:	e66d      	b.n	8003796 <_scanf_float+0x82>
 8003aba:	9b04      	ldr	r3, [sp, #16]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0e5      	beq.n	8003a8c <_scanf_float+0x378>
 8003ac0:	9905      	ldr	r1, [sp, #20]
 8003ac2:	230a      	movs	r3, #10
 8003ac4:	462a      	mov	r2, r5
 8003ac6:	3101      	adds	r1, #1
 8003ac8:	4640      	mov	r0, r8
 8003aca:	f000 fedf 	bl	800488c <_strtol_r>
 8003ace:	9b04      	ldr	r3, [sp, #16]
 8003ad0:	9e05      	ldr	r6, [sp, #20]
 8003ad2:	1ac2      	subs	r2, r0, r3
 8003ad4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003ad8:	429e      	cmp	r6, r3
 8003ada:	bf28      	it	cs
 8003adc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003ae0:	4910      	ldr	r1, [pc, #64]	; (8003b24 <_scanf_float+0x410>)
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	f000 f826 	bl	8003b34 <siprintf>
 8003ae8:	e7d0      	b.n	8003a8c <_scanf_float+0x378>
 8003aea:	f012 0f04 	tst.w	r2, #4
 8003aee:	f103 0204 	add.w	r2, r3, #4
 8003af2:	d1d9      	bne.n	8003aa8 <_scanf_float+0x394>
 8003af4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003af8:	f8cc 2000 	str.w	r2, [ip]
 8003afc:	f8d3 8000 	ldr.w	r8, [r3]
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	f7fd f81a 	bl	8000b3c <__aeabi_dcmpun>
 8003b08:	b128      	cbz	r0, 8003b16 <_scanf_float+0x402>
 8003b0a:	4807      	ldr	r0, [pc, #28]	; (8003b28 <_scanf_float+0x414>)
 8003b0c:	f000 f80e 	bl	8003b2c <nanf>
 8003b10:	f8c8 0000 	str.w	r0, [r8]
 8003b14:	e7cd      	b.n	8003ab2 <_scanf_float+0x39e>
 8003b16:	4630      	mov	r0, r6
 8003b18:	4639      	mov	r1, r7
 8003b1a:	f7fd f86d 	bl	8000bf8 <__aeabi_d2f>
 8003b1e:	e7f7      	b.n	8003b10 <_scanf_float+0x3fc>
 8003b20:	2500      	movs	r5, #0
 8003b22:	e638      	b.n	8003796 <_scanf_float+0x82>
 8003b24:	080077b4 	.word	0x080077b4
 8003b28:	08007bc0 	.word	0x08007bc0

08003b2c <nanf>:
 8003b2c:	4800      	ldr	r0, [pc, #0]	; (8003b30 <nanf+0x4>)
 8003b2e:	4770      	bx	lr
 8003b30:	7fc00000 	.word	0x7fc00000

08003b34 <siprintf>:
 8003b34:	b40e      	push	{r1, r2, r3}
 8003b36:	b500      	push	{lr}
 8003b38:	b09c      	sub	sp, #112	; 0x70
 8003b3a:	ab1d      	add	r3, sp, #116	; 0x74
 8003b3c:	9002      	str	r0, [sp, #8]
 8003b3e:	9006      	str	r0, [sp, #24]
 8003b40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b44:	4809      	ldr	r0, [pc, #36]	; (8003b6c <siprintf+0x38>)
 8003b46:	9107      	str	r1, [sp, #28]
 8003b48:	9104      	str	r1, [sp, #16]
 8003b4a:	4909      	ldr	r1, [pc, #36]	; (8003b70 <siprintf+0x3c>)
 8003b4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b50:	9105      	str	r1, [sp, #20]
 8003b52:	6800      	ldr	r0, [r0, #0]
 8003b54:	9301      	str	r3, [sp, #4]
 8003b56:	a902      	add	r1, sp, #8
 8003b58:	f002 feaa 	bl	80068b0 <_svfiprintf_r>
 8003b5c:	9b02      	ldr	r3, [sp, #8]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	701a      	strb	r2, [r3, #0]
 8003b62:	b01c      	add	sp, #112	; 0x70
 8003b64:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b68:	b003      	add	sp, #12
 8003b6a:	4770      	bx	lr
 8003b6c:	20000044 	.word	0x20000044
 8003b70:	ffff0208 	.word	0xffff0208

08003b74 <sulp>:
 8003b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b78:	460f      	mov	r7, r1
 8003b7a:	4690      	mov	r8, r2
 8003b7c:	f002 fc02 	bl	8006384 <__ulp>
 8003b80:	4604      	mov	r4, r0
 8003b82:	460d      	mov	r5, r1
 8003b84:	f1b8 0f00 	cmp.w	r8, #0
 8003b88:	d011      	beq.n	8003bae <sulp+0x3a>
 8003b8a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003b8e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	dd0b      	ble.n	8003bae <sulp+0x3a>
 8003b96:	051b      	lsls	r3, r3, #20
 8003b98:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003b9c:	2400      	movs	r4, #0
 8003b9e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003ba2:	4622      	mov	r2, r4
 8003ba4:	462b      	mov	r3, r5
 8003ba6:	f7fc fd2f 	bl	8000608 <__aeabi_dmul>
 8003baa:	4604      	mov	r4, r0
 8003bac:	460d      	mov	r5, r1
 8003bae:	4620      	mov	r0, r4
 8003bb0:	4629      	mov	r1, r5
 8003bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003bb8 <_strtod_l>:
 8003bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bbc:	b09f      	sub	sp, #124	; 0x7c
 8003bbe:	469b      	mov	fp, r3
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	931a      	str	r3, [sp, #104]	; 0x68
 8003bc4:	4b9e      	ldr	r3, [pc, #632]	; (8003e40 <_strtod_l+0x288>)
 8003bc6:	9215      	str	r2, [sp, #84]	; 0x54
 8003bc8:	681f      	ldr	r7, [r3, #0]
 8003bca:	4682      	mov	sl, r0
 8003bcc:	4638      	mov	r0, r7
 8003bce:	460e      	mov	r6, r1
 8003bd0:	f7fc fb06 	bl	80001e0 <strlen>
 8003bd4:	f04f 0800 	mov.w	r8, #0
 8003bd8:	4604      	mov	r4, r0
 8003bda:	f04f 0900 	mov.w	r9, #0
 8003bde:	9619      	str	r6, [sp, #100]	; 0x64
 8003be0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003be2:	781a      	ldrb	r2, [r3, #0]
 8003be4:	2a2b      	cmp	r2, #43	; 0x2b
 8003be6:	d04c      	beq.n	8003c82 <_strtod_l+0xca>
 8003be8:	d83a      	bhi.n	8003c60 <_strtod_l+0xa8>
 8003bea:	2a0d      	cmp	r2, #13
 8003bec:	d833      	bhi.n	8003c56 <_strtod_l+0x9e>
 8003bee:	2a08      	cmp	r2, #8
 8003bf0:	d833      	bhi.n	8003c5a <_strtod_l+0xa2>
 8003bf2:	2a00      	cmp	r2, #0
 8003bf4:	d03d      	beq.n	8003c72 <_strtod_l+0xba>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	930a      	str	r3, [sp, #40]	; 0x28
 8003bfa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8003bfc:	782b      	ldrb	r3, [r5, #0]
 8003bfe:	2b30      	cmp	r3, #48	; 0x30
 8003c00:	f040 80aa 	bne.w	8003d58 <_strtod_l+0x1a0>
 8003c04:	786b      	ldrb	r3, [r5, #1]
 8003c06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003c0a:	2b58      	cmp	r3, #88	; 0x58
 8003c0c:	d166      	bne.n	8003cdc <_strtod_l+0x124>
 8003c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c10:	9301      	str	r3, [sp, #4]
 8003c12:	ab1a      	add	r3, sp, #104	; 0x68
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	4a8b      	ldr	r2, [pc, #556]	; (8003e44 <_strtod_l+0x28c>)
 8003c18:	f8cd b008 	str.w	fp, [sp, #8]
 8003c1c:	ab1b      	add	r3, sp, #108	; 0x6c
 8003c1e:	a919      	add	r1, sp, #100	; 0x64
 8003c20:	4650      	mov	r0, sl
 8003c22:	f001 fd19 	bl	8005658 <__gethex>
 8003c26:	f010 0607 	ands.w	r6, r0, #7
 8003c2a:	4604      	mov	r4, r0
 8003c2c:	d005      	beq.n	8003c3a <_strtod_l+0x82>
 8003c2e:	2e06      	cmp	r6, #6
 8003c30:	d129      	bne.n	8003c86 <_strtod_l+0xce>
 8003c32:	3501      	adds	r5, #1
 8003c34:	2300      	movs	r3, #0
 8003c36:	9519      	str	r5, [sp, #100]	; 0x64
 8003c38:	930a      	str	r3, [sp, #40]	; 0x28
 8003c3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f040 858a 	bne.w	8004756 <_strtod_l+0xb9e>
 8003c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c44:	b1d3      	cbz	r3, 8003c7c <_strtod_l+0xc4>
 8003c46:	4642      	mov	r2, r8
 8003c48:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003c4c:	4610      	mov	r0, r2
 8003c4e:	4619      	mov	r1, r3
 8003c50:	b01f      	add	sp, #124	; 0x7c
 8003c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c56:	2a20      	cmp	r2, #32
 8003c58:	d1cd      	bne.n	8003bf6 <_strtod_l+0x3e>
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	9319      	str	r3, [sp, #100]	; 0x64
 8003c5e:	e7bf      	b.n	8003be0 <_strtod_l+0x28>
 8003c60:	2a2d      	cmp	r2, #45	; 0x2d
 8003c62:	d1c8      	bne.n	8003bf6 <_strtod_l+0x3e>
 8003c64:	2201      	movs	r2, #1
 8003c66:	920a      	str	r2, [sp, #40]	; 0x28
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	9219      	str	r2, [sp, #100]	; 0x64
 8003c6c:	785b      	ldrb	r3, [r3, #1]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1c3      	bne.n	8003bfa <_strtod_l+0x42>
 8003c72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003c74:	9619      	str	r6, [sp, #100]	; 0x64
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f040 856b 	bne.w	8004752 <_strtod_l+0xb9a>
 8003c7c:	4642      	mov	r2, r8
 8003c7e:	464b      	mov	r3, r9
 8003c80:	e7e4      	b.n	8003c4c <_strtod_l+0x94>
 8003c82:	2200      	movs	r2, #0
 8003c84:	e7ef      	b.n	8003c66 <_strtod_l+0xae>
 8003c86:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003c88:	b13a      	cbz	r2, 8003c9a <_strtod_l+0xe2>
 8003c8a:	2135      	movs	r1, #53	; 0x35
 8003c8c:	a81c      	add	r0, sp, #112	; 0x70
 8003c8e:	f002 fc7d 	bl	800658c <__copybits>
 8003c92:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003c94:	4650      	mov	r0, sl
 8003c96:	f002 f849 	bl	8005d2c <_Bfree>
 8003c9a:	3e01      	subs	r6, #1
 8003c9c:	2e04      	cmp	r6, #4
 8003c9e:	d806      	bhi.n	8003cae <_strtod_l+0xf6>
 8003ca0:	e8df f006 	tbb	[pc, r6]
 8003ca4:	1714030a 	.word	0x1714030a
 8003ca8:	0a          	.byte	0x0a
 8003ca9:	00          	.byte	0x00
 8003caa:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8003cae:	0721      	lsls	r1, r4, #28
 8003cb0:	d5c3      	bpl.n	8003c3a <_strtod_l+0x82>
 8003cb2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8003cb6:	e7c0      	b.n	8003c3a <_strtod_l+0x82>
 8003cb8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8003cbc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003cbe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003cc2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003cc6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8003cca:	e7f0      	b.n	8003cae <_strtod_l+0xf6>
 8003ccc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8003e48 <_strtod_l+0x290>
 8003cd0:	e7ed      	b.n	8003cae <_strtod_l+0xf6>
 8003cd2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8003cd6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8003cda:	e7e8      	b.n	8003cae <_strtod_l+0xf6>
 8003cdc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	9219      	str	r2, [sp, #100]	; 0x64
 8003ce2:	785b      	ldrb	r3, [r3, #1]
 8003ce4:	2b30      	cmp	r3, #48	; 0x30
 8003ce6:	d0f9      	beq.n	8003cdc <_strtod_l+0x124>
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0a6      	beq.n	8003c3a <_strtod_l+0x82>
 8003cec:	2301      	movs	r3, #1
 8003cee:	9307      	str	r3, [sp, #28]
 8003cf0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003cf2:	9308      	str	r3, [sp, #32]
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003cfa:	469b      	mov	fp, r3
 8003cfc:	220a      	movs	r2, #10
 8003cfe:	9819      	ldr	r0, [sp, #100]	; 0x64
 8003d00:	7805      	ldrb	r5, [r0, #0]
 8003d02:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003d06:	b2d9      	uxtb	r1, r3
 8003d08:	2909      	cmp	r1, #9
 8003d0a:	d927      	bls.n	8003d5c <_strtod_l+0x1a4>
 8003d0c:	4622      	mov	r2, r4
 8003d0e:	4639      	mov	r1, r7
 8003d10:	f002 fee4 	bl	8006adc <strncmp>
 8003d14:	2800      	cmp	r0, #0
 8003d16:	d033      	beq.n	8003d80 <_strtod_l+0x1c8>
 8003d18:	2000      	movs	r0, #0
 8003d1a:	462a      	mov	r2, r5
 8003d1c:	465c      	mov	r4, fp
 8003d1e:	9004      	str	r0, [sp, #16]
 8003d20:	4603      	mov	r3, r0
 8003d22:	2a65      	cmp	r2, #101	; 0x65
 8003d24:	d001      	beq.n	8003d2a <_strtod_l+0x172>
 8003d26:	2a45      	cmp	r2, #69	; 0x45
 8003d28:	d114      	bne.n	8003d54 <_strtod_l+0x19c>
 8003d2a:	b91c      	cbnz	r4, 8003d34 <_strtod_l+0x17c>
 8003d2c:	9a07      	ldr	r2, [sp, #28]
 8003d2e:	4302      	orrs	r2, r0
 8003d30:	d09f      	beq.n	8003c72 <_strtod_l+0xba>
 8003d32:	2400      	movs	r4, #0
 8003d34:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8003d36:	1c72      	adds	r2, r6, #1
 8003d38:	9219      	str	r2, [sp, #100]	; 0x64
 8003d3a:	7872      	ldrb	r2, [r6, #1]
 8003d3c:	2a2b      	cmp	r2, #43	; 0x2b
 8003d3e:	d079      	beq.n	8003e34 <_strtod_l+0x27c>
 8003d40:	2a2d      	cmp	r2, #45	; 0x2d
 8003d42:	f000 8083 	beq.w	8003e4c <_strtod_l+0x294>
 8003d46:	2700      	movs	r7, #0
 8003d48:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8003d4c:	2909      	cmp	r1, #9
 8003d4e:	f240 8083 	bls.w	8003e58 <_strtod_l+0x2a0>
 8003d52:	9619      	str	r6, [sp, #100]	; 0x64
 8003d54:	2500      	movs	r5, #0
 8003d56:	e09f      	b.n	8003e98 <_strtod_l+0x2e0>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	e7c8      	b.n	8003cee <_strtod_l+0x136>
 8003d5c:	f1bb 0f08 	cmp.w	fp, #8
 8003d60:	bfd5      	itete	le
 8003d62:	9906      	ldrle	r1, [sp, #24]
 8003d64:	9905      	ldrgt	r1, [sp, #20]
 8003d66:	fb02 3301 	mlale	r3, r2, r1, r3
 8003d6a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8003d6e:	f100 0001 	add.w	r0, r0, #1
 8003d72:	bfd4      	ite	le
 8003d74:	9306      	strle	r3, [sp, #24]
 8003d76:	9305      	strgt	r3, [sp, #20]
 8003d78:	f10b 0b01 	add.w	fp, fp, #1
 8003d7c:	9019      	str	r0, [sp, #100]	; 0x64
 8003d7e:	e7be      	b.n	8003cfe <_strtod_l+0x146>
 8003d80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003d82:	191a      	adds	r2, r3, r4
 8003d84:	9219      	str	r2, [sp, #100]	; 0x64
 8003d86:	5d1a      	ldrb	r2, [r3, r4]
 8003d88:	f1bb 0f00 	cmp.w	fp, #0
 8003d8c:	d036      	beq.n	8003dfc <_strtod_l+0x244>
 8003d8e:	9004      	str	r0, [sp, #16]
 8003d90:	465c      	mov	r4, fp
 8003d92:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003d96:	2b09      	cmp	r3, #9
 8003d98:	d912      	bls.n	8003dc0 <_strtod_l+0x208>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e7c1      	b.n	8003d22 <_strtod_l+0x16a>
 8003d9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	9219      	str	r2, [sp, #100]	; 0x64
 8003da4:	785a      	ldrb	r2, [r3, #1]
 8003da6:	3001      	adds	r0, #1
 8003da8:	2a30      	cmp	r2, #48	; 0x30
 8003daa:	d0f8      	beq.n	8003d9e <_strtod_l+0x1e6>
 8003dac:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	f200 84d5 	bhi.w	8004760 <_strtod_l+0xba8>
 8003db6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003db8:	9004      	str	r0, [sp, #16]
 8003dba:	2000      	movs	r0, #0
 8003dbc:	9308      	str	r3, [sp, #32]
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	3a30      	subs	r2, #48	; 0x30
 8003dc2:	f100 0301 	add.w	r3, r0, #1
 8003dc6:	d013      	beq.n	8003df0 <_strtod_l+0x238>
 8003dc8:	9904      	ldr	r1, [sp, #16]
 8003dca:	4419      	add	r1, r3
 8003dcc:	9104      	str	r1, [sp, #16]
 8003dce:	4623      	mov	r3, r4
 8003dd0:	1905      	adds	r5, r0, r4
 8003dd2:	210a      	movs	r1, #10
 8003dd4:	42ab      	cmp	r3, r5
 8003dd6:	d113      	bne.n	8003e00 <_strtod_l+0x248>
 8003dd8:	1823      	adds	r3, r4, r0
 8003dda:	2b08      	cmp	r3, #8
 8003ddc:	f104 0401 	add.w	r4, r4, #1
 8003de0:	4404      	add	r4, r0
 8003de2:	dc1b      	bgt.n	8003e1c <_strtod_l+0x264>
 8003de4:	9906      	ldr	r1, [sp, #24]
 8003de6:	230a      	movs	r3, #10
 8003de8:	fb03 2301 	mla	r3, r3, r1, r2
 8003dec:	9306      	str	r3, [sp, #24]
 8003dee:	2300      	movs	r3, #0
 8003df0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003df2:	1c51      	adds	r1, r2, #1
 8003df4:	9119      	str	r1, [sp, #100]	; 0x64
 8003df6:	7852      	ldrb	r2, [r2, #1]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	e7ca      	b.n	8003d92 <_strtod_l+0x1da>
 8003dfc:	4658      	mov	r0, fp
 8003dfe:	e7d3      	b.n	8003da8 <_strtod_l+0x1f0>
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	dc04      	bgt.n	8003e0e <_strtod_l+0x256>
 8003e04:	9f06      	ldr	r7, [sp, #24]
 8003e06:	434f      	muls	r7, r1
 8003e08:	9706      	str	r7, [sp, #24]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	e7e2      	b.n	8003dd4 <_strtod_l+0x21c>
 8003e0e:	1c5f      	adds	r7, r3, #1
 8003e10:	2f10      	cmp	r7, #16
 8003e12:	bfde      	ittt	le
 8003e14:	9f05      	ldrle	r7, [sp, #20]
 8003e16:	434f      	mulle	r7, r1
 8003e18:	9705      	strle	r7, [sp, #20]
 8003e1a:	e7f6      	b.n	8003e0a <_strtod_l+0x252>
 8003e1c:	2c10      	cmp	r4, #16
 8003e1e:	bfdf      	itttt	le
 8003e20:	9905      	ldrle	r1, [sp, #20]
 8003e22:	230a      	movle	r3, #10
 8003e24:	fb03 2301 	mlale	r3, r3, r1, r2
 8003e28:	9305      	strle	r3, [sp, #20]
 8003e2a:	e7e0      	b.n	8003dee <_strtod_l+0x236>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	9304      	str	r3, [sp, #16]
 8003e30:	2301      	movs	r3, #1
 8003e32:	e77b      	b.n	8003d2c <_strtod_l+0x174>
 8003e34:	2700      	movs	r7, #0
 8003e36:	1cb2      	adds	r2, r6, #2
 8003e38:	9219      	str	r2, [sp, #100]	; 0x64
 8003e3a:	78b2      	ldrb	r2, [r6, #2]
 8003e3c:	e784      	b.n	8003d48 <_strtod_l+0x190>
 8003e3e:	bf00      	nop
 8003e40:	08007a08 	.word	0x08007a08
 8003e44:	080077bc 	.word	0x080077bc
 8003e48:	7ff00000 	.word	0x7ff00000
 8003e4c:	2701      	movs	r7, #1
 8003e4e:	e7f2      	b.n	8003e36 <_strtod_l+0x27e>
 8003e50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003e52:	1c51      	adds	r1, r2, #1
 8003e54:	9119      	str	r1, [sp, #100]	; 0x64
 8003e56:	7852      	ldrb	r2, [r2, #1]
 8003e58:	2a30      	cmp	r2, #48	; 0x30
 8003e5a:	d0f9      	beq.n	8003e50 <_strtod_l+0x298>
 8003e5c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8003e60:	2908      	cmp	r1, #8
 8003e62:	f63f af77 	bhi.w	8003d54 <_strtod_l+0x19c>
 8003e66:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8003e6a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003e6c:	9209      	str	r2, [sp, #36]	; 0x24
 8003e6e:	f04f 0e0a 	mov.w	lr, #10
 8003e72:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003e74:	1c51      	adds	r1, r2, #1
 8003e76:	9119      	str	r1, [sp, #100]	; 0x64
 8003e78:	7852      	ldrb	r2, [r2, #1]
 8003e7a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8003e7e:	2d09      	cmp	r5, #9
 8003e80:	d935      	bls.n	8003eee <_strtod_l+0x336>
 8003e82:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003e84:	1b49      	subs	r1, r1, r5
 8003e86:	2908      	cmp	r1, #8
 8003e88:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8003e8c:	dc02      	bgt.n	8003e94 <_strtod_l+0x2dc>
 8003e8e:	4565      	cmp	r5, ip
 8003e90:	bfa8      	it	ge
 8003e92:	4665      	movge	r5, ip
 8003e94:	b107      	cbz	r7, 8003e98 <_strtod_l+0x2e0>
 8003e96:	426d      	negs	r5, r5
 8003e98:	2c00      	cmp	r4, #0
 8003e9a:	d14c      	bne.n	8003f36 <_strtod_l+0x37e>
 8003e9c:	9907      	ldr	r1, [sp, #28]
 8003e9e:	4301      	orrs	r1, r0
 8003ea0:	f47f aecb 	bne.w	8003c3a <_strtod_l+0x82>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f47f aee4 	bne.w	8003c72 <_strtod_l+0xba>
 8003eaa:	2a69      	cmp	r2, #105	; 0x69
 8003eac:	d026      	beq.n	8003efc <_strtod_l+0x344>
 8003eae:	dc23      	bgt.n	8003ef8 <_strtod_l+0x340>
 8003eb0:	2a49      	cmp	r2, #73	; 0x49
 8003eb2:	d023      	beq.n	8003efc <_strtod_l+0x344>
 8003eb4:	2a4e      	cmp	r2, #78	; 0x4e
 8003eb6:	f47f aedc 	bne.w	8003c72 <_strtod_l+0xba>
 8003eba:	499d      	ldr	r1, [pc, #628]	; (8004130 <_strtod_l+0x578>)
 8003ebc:	a819      	add	r0, sp, #100	; 0x64
 8003ebe:	f001 fe19 	bl	8005af4 <__match>
 8003ec2:	2800      	cmp	r0, #0
 8003ec4:	f43f aed5 	beq.w	8003c72 <_strtod_l+0xba>
 8003ec8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b28      	cmp	r3, #40	; 0x28
 8003ece:	d12c      	bne.n	8003f2a <_strtod_l+0x372>
 8003ed0:	4998      	ldr	r1, [pc, #608]	; (8004134 <_strtod_l+0x57c>)
 8003ed2:	aa1c      	add	r2, sp, #112	; 0x70
 8003ed4:	a819      	add	r0, sp, #100	; 0x64
 8003ed6:	f001 fe21 	bl	8005b1c <__hexnan>
 8003eda:	2805      	cmp	r0, #5
 8003edc:	d125      	bne.n	8003f2a <_strtod_l+0x372>
 8003ede:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003ee0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8003ee4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8003ee8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8003eec:	e6a5      	b.n	8003c3a <_strtod_l+0x82>
 8003eee:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8003ef2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8003ef6:	e7bc      	b.n	8003e72 <_strtod_l+0x2ba>
 8003ef8:	2a6e      	cmp	r2, #110	; 0x6e
 8003efa:	e7dc      	b.n	8003eb6 <_strtod_l+0x2fe>
 8003efc:	498e      	ldr	r1, [pc, #568]	; (8004138 <_strtod_l+0x580>)
 8003efe:	a819      	add	r0, sp, #100	; 0x64
 8003f00:	f001 fdf8 	bl	8005af4 <__match>
 8003f04:	2800      	cmp	r0, #0
 8003f06:	f43f aeb4 	beq.w	8003c72 <_strtod_l+0xba>
 8003f0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003f0c:	498b      	ldr	r1, [pc, #556]	; (800413c <_strtod_l+0x584>)
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	a819      	add	r0, sp, #100	; 0x64
 8003f12:	9319      	str	r3, [sp, #100]	; 0x64
 8003f14:	f001 fdee 	bl	8005af4 <__match>
 8003f18:	b910      	cbnz	r0, 8003f20 <_strtod_l+0x368>
 8003f1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	9319      	str	r3, [sp, #100]	; 0x64
 8003f20:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8004140 <_strtod_l+0x588>
 8003f24:	f04f 0800 	mov.w	r8, #0
 8003f28:	e687      	b.n	8003c3a <_strtod_l+0x82>
 8003f2a:	4886      	ldr	r0, [pc, #536]	; (8004144 <_strtod_l+0x58c>)
 8003f2c:	f002 fdc0 	bl	8006ab0 <nan>
 8003f30:	4680      	mov	r8, r0
 8003f32:	4689      	mov	r9, r1
 8003f34:	e681      	b.n	8003c3a <_strtod_l+0x82>
 8003f36:	9b04      	ldr	r3, [sp, #16]
 8003f38:	9806      	ldr	r0, [sp, #24]
 8003f3a:	1aeb      	subs	r3, r5, r3
 8003f3c:	f1bb 0f00 	cmp.w	fp, #0
 8003f40:	bf08      	it	eq
 8003f42:	46a3      	moveq	fp, r4
 8003f44:	2c10      	cmp	r4, #16
 8003f46:	9307      	str	r3, [sp, #28]
 8003f48:	4626      	mov	r6, r4
 8003f4a:	bfa8      	it	ge
 8003f4c:	2610      	movge	r6, #16
 8003f4e:	f7fc fae1 	bl	8000514 <__aeabi_ui2d>
 8003f52:	2c09      	cmp	r4, #9
 8003f54:	4680      	mov	r8, r0
 8003f56:	4689      	mov	r9, r1
 8003f58:	dd13      	ble.n	8003f82 <_strtod_l+0x3ca>
 8003f5a:	4b7b      	ldr	r3, [pc, #492]	; (8004148 <_strtod_l+0x590>)
 8003f5c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003f60:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003f64:	f7fc fb50 	bl	8000608 <__aeabi_dmul>
 8003f68:	4680      	mov	r8, r0
 8003f6a:	9805      	ldr	r0, [sp, #20]
 8003f6c:	4689      	mov	r9, r1
 8003f6e:	f7fc fad1 	bl	8000514 <__aeabi_ui2d>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4640      	mov	r0, r8
 8003f78:	4649      	mov	r1, r9
 8003f7a:	f7fc f98f 	bl	800029c <__adddf3>
 8003f7e:	4680      	mov	r8, r0
 8003f80:	4689      	mov	r9, r1
 8003f82:	2c0f      	cmp	r4, #15
 8003f84:	dc36      	bgt.n	8003ff4 <_strtod_l+0x43c>
 8003f86:	9b07      	ldr	r3, [sp, #28]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f43f ae56 	beq.w	8003c3a <_strtod_l+0x82>
 8003f8e:	dd22      	ble.n	8003fd6 <_strtod_l+0x41e>
 8003f90:	2b16      	cmp	r3, #22
 8003f92:	dc09      	bgt.n	8003fa8 <_strtod_l+0x3f0>
 8003f94:	496c      	ldr	r1, [pc, #432]	; (8004148 <_strtod_l+0x590>)
 8003f96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003f9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f9e:	4642      	mov	r2, r8
 8003fa0:	464b      	mov	r3, r9
 8003fa2:	f7fc fb31 	bl	8000608 <__aeabi_dmul>
 8003fa6:	e7c3      	b.n	8003f30 <_strtod_l+0x378>
 8003fa8:	9a07      	ldr	r2, [sp, #28]
 8003faa:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	db20      	blt.n	8003ff4 <_strtod_l+0x43c>
 8003fb2:	4d65      	ldr	r5, [pc, #404]	; (8004148 <_strtod_l+0x590>)
 8003fb4:	f1c4 040f 	rsb	r4, r4, #15
 8003fb8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8003fbc:	4642      	mov	r2, r8
 8003fbe:	464b      	mov	r3, r9
 8003fc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fc4:	f7fc fb20 	bl	8000608 <__aeabi_dmul>
 8003fc8:	9b07      	ldr	r3, [sp, #28]
 8003fca:	1b1c      	subs	r4, r3, r4
 8003fcc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8003fd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003fd4:	e7e5      	b.n	8003fa2 <_strtod_l+0x3ea>
 8003fd6:	9b07      	ldr	r3, [sp, #28]
 8003fd8:	3316      	adds	r3, #22
 8003fda:	db0b      	blt.n	8003ff4 <_strtod_l+0x43c>
 8003fdc:	9b04      	ldr	r3, [sp, #16]
 8003fde:	1b5d      	subs	r5, r3, r5
 8003fe0:	4b59      	ldr	r3, [pc, #356]	; (8004148 <_strtod_l+0x590>)
 8003fe2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003fe6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003fea:	4640      	mov	r0, r8
 8003fec:	4649      	mov	r1, r9
 8003fee:	f7fc fc35 	bl	800085c <__aeabi_ddiv>
 8003ff2:	e79d      	b.n	8003f30 <_strtod_l+0x378>
 8003ff4:	9b07      	ldr	r3, [sp, #28]
 8003ff6:	1ba6      	subs	r6, r4, r6
 8003ff8:	441e      	add	r6, r3
 8003ffa:	2e00      	cmp	r6, #0
 8003ffc:	dd74      	ble.n	80040e8 <_strtod_l+0x530>
 8003ffe:	f016 030f 	ands.w	r3, r6, #15
 8004002:	d00a      	beq.n	800401a <_strtod_l+0x462>
 8004004:	4950      	ldr	r1, [pc, #320]	; (8004148 <_strtod_l+0x590>)
 8004006:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800400a:	4642      	mov	r2, r8
 800400c:	464b      	mov	r3, r9
 800400e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004012:	f7fc faf9 	bl	8000608 <__aeabi_dmul>
 8004016:	4680      	mov	r8, r0
 8004018:	4689      	mov	r9, r1
 800401a:	f036 060f 	bics.w	r6, r6, #15
 800401e:	d052      	beq.n	80040c6 <_strtod_l+0x50e>
 8004020:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8004024:	dd27      	ble.n	8004076 <_strtod_l+0x4be>
 8004026:	f04f 0b00 	mov.w	fp, #0
 800402a:	f8cd b010 	str.w	fp, [sp, #16]
 800402e:	f8cd b020 	str.w	fp, [sp, #32]
 8004032:	f8cd b018 	str.w	fp, [sp, #24]
 8004036:	2322      	movs	r3, #34	; 0x22
 8004038:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8004140 <_strtod_l+0x588>
 800403c:	f8ca 3000 	str.w	r3, [sl]
 8004040:	f04f 0800 	mov.w	r8, #0
 8004044:	9b08      	ldr	r3, [sp, #32]
 8004046:	2b00      	cmp	r3, #0
 8004048:	f43f adf7 	beq.w	8003c3a <_strtod_l+0x82>
 800404c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800404e:	4650      	mov	r0, sl
 8004050:	f001 fe6c 	bl	8005d2c <_Bfree>
 8004054:	9906      	ldr	r1, [sp, #24]
 8004056:	4650      	mov	r0, sl
 8004058:	f001 fe68 	bl	8005d2c <_Bfree>
 800405c:	9904      	ldr	r1, [sp, #16]
 800405e:	4650      	mov	r0, sl
 8004060:	f001 fe64 	bl	8005d2c <_Bfree>
 8004064:	9908      	ldr	r1, [sp, #32]
 8004066:	4650      	mov	r0, sl
 8004068:	f001 fe60 	bl	8005d2c <_Bfree>
 800406c:	4659      	mov	r1, fp
 800406e:	4650      	mov	r0, sl
 8004070:	f001 fe5c 	bl	8005d2c <_Bfree>
 8004074:	e5e1      	b.n	8003c3a <_strtod_l+0x82>
 8004076:	4b35      	ldr	r3, [pc, #212]	; (800414c <_strtod_l+0x594>)
 8004078:	9305      	str	r3, [sp, #20]
 800407a:	2300      	movs	r3, #0
 800407c:	1136      	asrs	r6, r6, #4
 800407e:	4640      	mov	r0, r8
 8004080:	4649      	mov	r1, r9
 8004082:	461f      	mov	r7, r3
 8004084:	2e01      	cmp	r6, #1
 8004086:	dc21      	bgt.n	80040cc <_strtod_l+0x514>
 8004088:	b10b      	cbz	r3, 800408e <_strtod_l+0x4d6>
 800408a:	4680      	mov	r8, r0
 800408c:	4689      	mov	r9, r1
 800408e:	4b2f      	ldr	r3, [pc, #188]	; (800414c <_strtod_l+0x594>)
 8004090:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004094:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004098:	4642      	mov	r2, r8
 800409a:	464b      	mov	r3, r9
 800409c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040a0:	f7fc fab2 	bl	8000608 <__aeabi_dmul>
 80040a4:	4b26      	ldr	r3, [pc, #152]	; (8004140 <_strtod_l+0x588>)
 80040a6:	460a      	mov	r2, r1
 80040a8:	400b      	ands	r3, r1
 80040aa:	4929      	ldr	r1, [pc, #164]	; (8004150 <_strtod_l+0x598>)
 80040ac:	428b      	cmp	r3, r1
 80040ae:	4680      	mov	r8, r0
 80040b0:	d8b9      	bhi.n	8004026 <_strtod_l+0x46e>
 80040b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80040b6:	428b      	cmp	r3, r1
 80040b8:	bf86      	itte	hi
 80040ba:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 8004154 <_strtod_l+0x59c>
 80040be:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80040c2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80040c6:	2300      	movs	r3, #0
 80040c8:	9305      	str	r3, [sp, #20]
 80040ca:	e07f      	b.n	80041cc <_strtod_l+0x614>
 80040cc:	07f2      	lsls	r2, r6, #31
 80040ce:	d505      	bpl.n	80040dc <_strtod_l+0x524>
 80040d0:	9b05      	ldr	r3, [sp, #20]
 80040d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d6:	f7fc fa97 	bl	8000608 <__aeabi_dmul>
 80040da:	2301      	movs	r3, #1
 80040dc:	9a05      	ldr	r2, [sp, #20]
 80040de:	3208      	adds	r2, #8
 80040e0:	3701      	adds	r7, #1
 80040e2:	1076      	asrs	r6, r6, #1
 80040e4:	9205      	str	r2, [sp, #20]
 80040e6:	e7cd      	b.n	8004084 <_strtod_l+0x4cc>
 80040e8:	d0ed      	beq.n	80040c6 <_strtod_l+0x50e>
 80040ea:	4276      	negs	r6, r6
 80040ec:	f016 020f 	ands.w	r2, r6, #15
 80040f0:	d00a      	beq.n	8004108 <_strtod_l+0x550>
 80040f2:	4b15      	ldr	r3, [pc, #84]	; (8004148 <_strtod_l+0x590>)
 80040f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80040f8:	4640      	mov	r0, r8
 80040fa:	4649      	mov	r1, r9
 80040fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004100:	f7fc fbac 	bl	800085c <__aeabi_ddiv>
 8004104:	4680      	mov	r8, r0
 8004106:	4689      	mov	r9, r1
 8004108:	1136      	asrs	r6, r6, #4
 800410a:	d0dc      	beq.n	80040c6 <_strtod_l+0x50e>
 800410c:	2e1f      	cmp	r6, #31
 800410e:	dd23      	ble.n	8004158 <_strtod_l+0x5a0>
 8004110:	f04f 0b00 	mov.w	fp, #0
 8004114:	f8cd b010 	str.w	fp, [sp, #16]
 8004118:	f8cd b020 	str.w	fp, [sp, #32]
 800411c:	f8cd b018 	str.w	fp, [sp, #24]
 8004120:	2322      	movs	r3, #34	; 0x22
 8004122:	f04f 0800 	mov.w	r8, #0
 8004126:	f04f 0900 	mov.w	r9, #0
 800412a:	f8ca 3000 	str.w	r3, [sl]
 800412e:	e789      	b.n	8004044 <_strtod_l+0x48c>
 8004130:	0800778d 	.word	0x0800778d
 8004134:	080077d0 	.word	0x080077d0
 8004138:	08007785 	.word	0x08007785
 800413c:	08007914 	.word	0x08007914
 8004140:	7ff00000 	.word	0x7ff00000
 8004144:	08007bc0 	.word	0x08007bc0
 8004148:	08007aa0 	.word	0x08007aa0
 800414c:	08007a78 	.word	0x08007a78
 8004150:	7ca00000 	.word	0x7ca00000
 8004154:	7fefffff 	.word	0x7fefffff
 8004158:	f016 0310 	ands.w	r3, r6, #16
 800415c:	bf18      	it	ne
 800415e:	236a      	movne	r3, #106	; 0x6a
 8004160:	4fb1      	ldr	r7, [pc, #708]	; (8004428 <_strtod_l+0x870>)
 8004162:	9305      	str	r3, [sp, #20]
 8004164:	4640      	mov	r0, r8
 8004166:	4649      	mov	r1, r9
 8004168:	2300      	movs	r3, #0
 800416a:	07f2      	lsls	r2, r6, #31
 800416c:	d504      	bpl.n	8004178 <_strtod_l+0x5c0>
 800416e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004172:	f7fc fa49 	bl	8000608 <__aeabi_dmul>
 8004176:	2301      	movs	r3, #1
 8004178:	1076      	asrs	r6, r6, #1
 800417a:	f107 0708 	add.w	r7, r7, #8
 800417e:	d1f4      	bne.n	800416a <_strtod_l+0x5b2>
 8004180:	b10b      	cbz	r3, 8004186 <_strtod_l+0x5ce>
 8004182:	4680      	mov	r8, r0
 8004184:	4689      	mov	r9, r1
 8004186:	9b05      	ldr	r3, [sp, #20]
 8004188:	b1c3      	cbz	r3, 80041bc <_strtod_l+0x604>
 800418a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800418e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004192:	2b00      	cmp	r3, #0
 8004194:	4649      	mov	r1, r9
 8004196:	dd11      	ble.n	80041bc <_strtod_l+0x604>
 8004198:	2b1f      	cmp	r3, #31
 800419a:	f340 8124 	ble.w	80043e6 <_strtod_l+0x82e>
 800419e:	2b34      	cmp	r3, #52	; 0x34
 80041a0:	bfde      	ittt	le
 80041a2:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80041a6:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80041aa:	fa03 f202 	lslle.w	r2, r3, r2
 80041ae:	f04f 0800 	mov.w	r8, #0
 80041b2:	bfcc      	ite	gt
 80041b4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80041b8:	ea02 0901 	andle.w	r9, r2, r1
 80041bc:	2200      	movs	r2, #0
 80041be:	2300      	movs	r3, #0
 80041c0:	4640      	mov	r0, r8
 80041c2:	4649      	mov	r1, r9
 80041c4:	f7fc fc88 	bl	8000ad8 <__aeabi_dcmpeq>
 80041c8:	2800      	cmp	r0, #0
 80041ca:	d1a1      	bne.n	8004110 <_strtod_l+0x558>
 80041cc:	9b06      	ldr	r3, [sp, #24]
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	9908      	ldr	r1, [sp, #32]
 80041d2:	4623      	mov	r3, r4
 80041d4:	465a      	mov	r2, fp
 80041d6:	4650      	mov	r0, sl
 80041d8:	f001 fe10 	bl	8005dfc <__s2b>
 80041dc:	9008      	str	r0, [sp, #32]
 80041de:	2800      	cmp	r0, #0
 80041e0:	f43f af21 	beq.w	8004026 <_strtod_l+0x46e>
 80041e4:	9b04      	ldr	r3, [sp, #16]
 80041e6:	1b5d      	subs	r5, r3, r5
 80041e8:	9b07      	ldr	r3, [sp, #28]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	bfb4      	ite	lt
 80041ee:	462b      	movlt	r3, r5
 80041f0:	2300      	movge	r3, #0
 80041f2:	930e      	str	r3, [sp, #56]	; 0x38
 80041f4:	9b07      	ldr	r3, [sp, #28]
 80041f6:	f04f 0b00 	mov.w	fp, #0
 80041fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80041fe:	9314      	str	r3, [sp, #80]	; 0x50
 8004200:	f8cd b010 	str.w	fp, [sp, #16]
 8004204:	9b08      	ldr	r3, [sp, #32]
 8004206:	4650      	mov	r0, sl
 8004208:	6859      	ldr	r1, [r3, #4]
 800420a:	f001 fd4f 	bl	8005cac <_Balloc>
 800420e:	9006      	str	r0, [sp, #24]
 8004210:	2800      	cmp	r0, #0
 8004212:	f43f af10 	beq.w	8004036 <_strtod_l+0x47e>
 8004216:	9b08      	ldr	r3, [sp, #32]
 8004218:	691a      	ldr	r2, [r3, #16]
 800421a:	3202      	adds	r2, #2
 800421c:	f103 010c 	add.w	r1, r3, #12
 8004220:	0092      	lsls	r2, r2, #2
 8004222:	300c      	adds	r0, #12
 8004224:	f001 fd34 	bl	8005c90 <memcpy>
 8004228:	ab1c      	add	r3, sp, #112	; 0x70
 800422a:	9301      	str	r3, [sp, #4]
 800422c:	ab1b      	add	r3, sp, #108	; 0x6c
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	4642      	mov	r2, r8
 8004232:	464b      	mov	r3, r9
 8004234:	4650      	mov	r0, sl
 8004236:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800423a:	f002 f91d 	bl	8006478 <__d2b>
 800423e:	901a      	str	r0, [sp, #104]	; 0x68
 8004240:	2800      	cmp	r0, #0
 8004242:	f43f aef8 	beq.w	8004036 <_strtod_l+0x47e>
 8004246:	2101      	movs	r1, #1
 8004248:	4650      	mov	r0, sl
 800424a:	f001 fe6f 	bl	8005f2c <__i2b>
 800424e:	9004      	str	r0, [sp, #16]
 8004250:	4603      	mov	r3, r0
 8004252:	2800      	cmp	r0, #0
 8004254:	f43f aeef 	beq.w	8004036 <_strtod_l+0x47e>
 8004258:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800425a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800425c:	2d00      	cmp	r5, #0
 800425e:	bfab      	itete	ge
 8004260:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004262:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8004264:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8004266:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004268:	bfac      	ite	ge
 800426a:	18ee      	addge	r6, r5, r3
 800426c:	1b5c      	sublt	r4, r3, r5
 800426e:	9b05      	ldr	r3, [sp, #20]
 8004270:	1aed      	subs	r5, r5, r3
 8004272:	4415      	add	r5, r2
 8004274:	4b6d      	ldr	r3, [pc, #436]	; (800442c <_strtod_l+0x874>)
 8004276:	3d01      	subs	r5, #1
 8004278:	429d      	cmp	r5, r3
 800427a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800427e:	f280 80c4 	bge.w	800440a <_strtod_l+0x852>
 8004282:	1b5b      	subs	r3, r3, r5
 8004284:	2b1f      	cmp	r3, #31
 8004286:	eba2 0203 	sub.w	r2, r2, r3
 800428a:	f04f 0701 	mov.w	r7, #1
 800428e:	f300 80b1 	bgt.w	80043f4 <_strtod_l+0x83c>
 8004292:	fa07 f303 	lsl.w	r3, r7, r3
 8004296:	930f      	str	r3, [sp, #60]	; 0x3c
 8004298:	2500      	movs	r5, #0
 800429a:	18b7      	adds	r7, r6, r2
 800429c:	9b05      	ldr	r3, [sp, #20]
 800429e:	42be      	cmp	r6, r7
 80042a0:	4414      	add	r4, r2
 80042a2:	441c      	add	r4, r3
 80042a4:	4633      	mov	r3, r6
 80042a6:	bfa8      	it	ge
 80042a8:	463b      	movge	r3, r7
 80042aa:	42a3      	cmp	r3, r4
 80042ac:	bfa8      	it	ge
 80042ae:	4623      	movge	r3, r4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	bfc2      	ittt	gt
 80042b4:	1aff      	subgt	r7, r7, r3
 80042b6:	1ae4      	subgt	r4, r4, r3
 80042b8:	1af6      	subgt	r6, r6, r3
 80042ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042bc:	2b00      	cmp	r3, #0
 80042be:	dd17      	ble.n	80042f0 <_strtod_l+0x738>
 80042c0:	9904      	ldr	r1, [sp, #16]
 80042c2:	461a      	mov	r2, r3
 80042c4:	4650      	mov	r0, sl
 80042c6:	f001 feef 	bl	80060a8 <__pow5mult>
 80042ca:	9004      	str	r0, [sp, #16]
 80042cc:	2800      	cmp	r0, #0
 80042ce:	f43f aeb2 	beq.w	8004036 <_strtod_l+0x47e>
 80042d2:	4601      	mov	r1, r0
 80042d4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80042d6:	4650      	mov	r0, sl
 80042d8:	f001 fe3e 	bl	8005f58 <__multiply>
 80042dc:	9009      	str	r0, [sp, #36]	; 0x24
 80042de:	2800      	cmp	r0, #0
 80042e0:	f43f aea9 	beq.w	8004036 <_strtod_l+0x47e>
 80042e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80042e6:	4650      	mov	r0, sl
 80042e8:	f001 fd20 	bl	8005d2c <_Bfree>
 80042ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042ee:	931a      	str	r3, [sp, #104]	; 0x68
 80042f0:	2f00      	cmp	r7, #0
 80042f2:	f300 808e 	bgt.w	8004412 <_strtod_l+0x85a>
 80042f6:	9b07      	ldr	r3, [sp, #28]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	dd08      	ble.n	800430e <_strtod_l+0x756>
 80042fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80042fe:	9906      	ldr	r1, [sp, #24]
 8004300:	4650      	mov	r0, sl
 8004302:	f001 fed1 	bl	80060a8 <__pow5mult>
 8004306:	9006      	str	r0, [sp, #24]
 8004308:	2800      	cmp	r0, #0
 800430a:	f43f ae94 	beq.w	8004036 <_strtod_l+0x47e>
 800430e:	2c00      	cmp	r4, #0
 8004310:	dd08      	ble.n	8004324 <_strtod_l+0x76c>
 8004312:	9906      	ldr	r1, [sp, #24]
 8004314:	4622      	mov	r2, r4
 8004316:	4650      	mov	r0, sl
 8004318:	f001 ff20 	bl	800615c <__lshift>
 800431c:	9006      	str	r0, [sp, #24]
 800431e:	2800      	cmp	r0, #0
 8004320:	f43f ae89 	beq.w	8004036 <_strtod_l+0x47e>
 8004324:	2e00      	cmp	r6, #0
 8004326:	dd08      	ble.n	800433a <_strtod_l+0x782>
 8004328:	9904      	ldr	r1, [sp, #16]
 800432a:	4632      	mov	r2, r6
 800432c:	4650      	mov	r0, sl
 800432e:	f001 ff15 	bl	800615c <__lshift>
 8004332:	9004      	str	r0, [sp, #16]
 8004334:	2800      	cmp	r0, #0
 8004336:	f43f ae7e 	beq.w	8004036 <_strtod_l+0x47e>
 800433a:	9a06      	ldr	r2, [sp, #24]
 800433c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800433e:	4650      	mov	r0, sl
 8004340:	f001 ff98 	bl	8006274 <__mdiff>
 8004344:	4683      	mov	fp, r0
 8004346:	2800      	cmp	r0, #0
 8004348:	f43f ae75 	beq.w	8004036 <_strtod_l+0x47e>
 800434c:	2400      	movs	r4, #0
 800434e:	68c3      	ldr	r3, [r0, #12]
 8004350:	9904      	ldr	r1, [sp, #16]
 8004352:	60c4      	str	r4, [r0, #12]
 8004354:	930b      	str	r3, [sp, #44]	; 0x2c
 8004356:	f001 ff71 	bl	800623c <__mcmp>
 800435a:	42a0      	cmp	r0, r4
 800435c:	da6c      	bge.n	8004438 <_strtod_l+0x880>
 800435e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004360:	ea53 0308 	orrs.w	r3, r3, r8
 8004364:	f040 8092 	bne.w	800448c <_strtod_l+0x8d4>
 8004368:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800436c:	2b00      	cmp	r3, #0
 800436e:	f040 808d 	bne.w	800448c <_strtod_l+0x8d4>
 8004372:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004376:	0d1b      	lsrs	r3, r3, #20
 8004378:	051b      	lsls	r3, r3, #20
 800437a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800437e:	f240 8085 	bls.w	800448c <_strtod_l+0x8d4>
 8004382:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004386:	b91b      	cbnz	r3, 8004390 <_strtod_l+0x7d8>
 8004388:	f8db 3010 	ldr.w	r3, [fp, #16]
 800438c:	2b01      	cmp	r3, #1
 800438e:	dd7d      	ble.n	800448c <_strtod_l+0x8d4>
 8004390:	4659      	mov	r1, fp
 8004392:	2201      	movs	r2, #1
 8004394:	4650      	mov	r0, sl
 8004396:	f001 fee1 	bl	800615c <__lshift>
 800439a:	9904      	ldr	r1, [sp, #16]
 800439c:	4683      	mov	fp, r0
 800439e:	f001 ff4d 	bl	800623c <__mcmp>
 80043a2:	2800      	cmp	r0, #0
 80043a4:	dd72      	ble.n	800448c <_strtod_l+0x8d4>
 80043a6:	9905      	ldr	r1, [sp, #20]
 80043a8:	4a21      	ldr	r2, [pc, #132]	; (8004430 <_strtod_l+0x878>)
 80043aa:	464b      	mov	r3, r9
 80043ac:	2900      	cmp	r1, #0
 80043ae:	f000 808d 	beq.w	80044cc <_strtod_l+0x914>
 80043b2:	ea02 0109 	and.w	r1, r2, r9
 80043b6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80043ba:	f300 8087 	bgt.w	80044cc <_strtod_l+0x914>
 80043be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80043c2:	f77f aead 	ble.w	8004120 <_strtod_l+0x568>
 80043c6:	4b1b      	ldr	r3, [pc, #108]	; (8004434 <_strtod_l+0x87c>)
 80043c8:	4640      	mov	r0, r8
 80043ca:	4649      	mov	r1, r9
 80043cc:	2200      	movs	r2, #0
 80043ce:	f7fc f91b 	bl	8000608 <__aeabi_dmul>
 80043d2:	460b      	mov	r3, r1
 80043d4:	4303      	orrs	r3, r0
 80043d6:	bf08      	it	eq
 80043d8:	2322      	moveq	r3, #34	; 0x22
 80043da:	4680      	mov	r8, r0
 80043dc:	4689      	mov	r9, r1
 80043de:	bf08      	it	eq
 80043e0:	f8ca 3000 	streq.w	r3, [sl]
 80043e4:	e632      	b.n	800404c <_strtod_l+0x494>
 80043e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	ea03 0808 	and.w	r8, r3, r8
 80043f2:	e6e3      	b.n	80041bc <_strtod_l+0x604>
 80043f4:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80043f8:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80043fc:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004400:	35e2      	adds	r5, #226	; 0xe2
 8004402:	fa07 f505 	lsl.w	r5, r7, r5
 8004406:	970f      	str	r7, [sp, #60]	; 0x3c
 8004408:	e747      	b.n	800429a <_strtod_l+0x6e2>
 800440a:	2301      	movs	r3, #1
 800440c:	2500      	movs	r5, #0
 800440e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004410:	e743      	b.n	800429a <_strtod_l+0x6e2>
 8004412:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004414:	463a      	mov	r2, r7
 8004416:	4650      	mov	r0, sl
 8004418:	f001 fea0 	bl	800615c <__lshift>
 800441c:	901a      	str	r0, [sp, #104]	; 0x68
 800441e:	2800      	cmp	r0, #0
 8004420:	f47f af69 	bne.w	80042f6 <_strtod_l+0x73e>
 8004424:	e607      	b.n	8004036 <_strtod_l+0x47e>
 8004426:	bf00      	nop
 8004428:	080077e8 	.word	0x080077e8
 800442c:	fffffc02 	.word	0xfffffc02
 8004430:	7ff00000 	.word	0x7ff00000
 8004434:	39500000 	.word	0x39500000
 8004438:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800443c:	d165      	bne.n	800450a <_strtod_l+0x952>
 800443e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004440:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004444:	b35a      	cbz	r2, 800449e <_strtod_l+0x8e6>
 8004446:	4a9a      	ldr	r2, [pc, #616]	; (80046b0 <_strtod_l+0xaf8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d12b      	bne.n	80044a4 <_strtod_l+0x8ec>
 800444c:	9b05      	ldr	r3, [sp, #20]
 800444e:	4641      	mov	r1, r8
 8004450:	b303      	cbz	r3, 8004494 <_strtod_l+0x8dc>
 8004452:	4b98      	ldr	r3, [pc, #608]	; (80046b4 <_strtod_l+0xafc>)
 8004454:	464a      	mov	r2, r9
 8004456:	4013      	ands	r3, r2
 8004458:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800445c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004460:	d81b      	bhi.n	800449a <_strtod_l+0x8e2>
 8004462:	0d1b      	lsrs	r3, r3, #20
 8004464:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	4299      	cmp	r1, r3
 800446e:	d119      	bne.n	80044a4 <_strtod_l+0x8ec>
 8004470:	4b91      	ldr	r3, [pc, #580]	; (80046b8 <_strtod_l+0xb00>)
 8004472:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004474:	429a      	cmp	r2, r3
 8004476:	d102      	bne.n	800447e <_strtod_l+0x8c6>
 8004478:	3101      	adds	r1, #1
 800447a:	f43f addc 	beq.w	8004036 <_strtod_l+0x47e>
 800447e:	4b8d      	ldr	r3, [pc, #564]	; (80046b4 <_strtod_l+0xafc>)
 8004480:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004482:	401a      	ands	r2, r3
 8004484:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004488:	f04f 0800 	mov.w	r8, #0
 800448c:	9b05      	ldr	r3, [sp, #20]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d199      	bne.n	80043c6 <_strtod_l+0x80e>
 8004492:	e5db      	b.n	800404c <_strtod_l+0x494>
 8004494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004498:	e7e8      	b.n	800446c <_strtod_l+0x8b4>
 800449a:	4613      	mov	r3, r2
 800449c:	e7e6      	b.n	800446c <_strtod_l+0x8b4>
 800449e:	ea53 0308 	orrs.w	r3, r3, r8
 80044a2:	d080      	beq.n	80043a6 <_strtod_l+0x7ee>
 80044a4:	b1e5      	cbz	r5, 80044e0 <_strtod_l+0x928>
 80044a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044a8:	421d      	tst	r5, r3
 80044aa:	d0ef      	beq.n	800448c <_strtod_l+0x8d4>
 80044ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044ae:	9a05      	ldr	r2, [sp, #20]
 80044b0:	4640      	mov	r0, r8
 80044b2:	4649      	mov	r1, r9
 80044b4:	b1c3      	cbz	r3, 80044e8 <_strtod_l+0x930>
 80044b6:	f7ff fb5d 	bl	8003b74 <sulp>
 80044ba:	4602      	mov	r2, r0
 80044bc:	460b      	mov	r3, r1
 80044be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80044c2:	f7fb feeb 	bl	800029c <__adddf3>
 80044c6:	4680      	mov	r8, r0
 80044c8:	4689      	mov	r9, r1
 80044ca:	e7df      	b.n	800448c <_strtod_l+0x8d4>
 80044cc:	4013      	ands	r3, r2
 80044ce:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80044d2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80044d6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80044da:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80044de:	e7d5      	b.n	800448c <_strtod_l+0x8d4>
 80044e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80044e2:	ea13 0f08 	tst.w	r3, r8
 80044e6:	e7e0      	b.n	80044aa <_strtod_l+0x8f2>
 80044e8:	f7ff fb44 	bl	8003b74 <sulp>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80044f4:	f7fb fed0 	bl	8000298 <__aeabi_dsub>
 80044f8:	2200      	movs	r2, #0
 80044fa:	2300      	movs	r3, #0
 80044fc:	4680      	mov	r8, r0
 80044fe:	4689      	mov	r9, r1
 8004500:	f7fc faea 	bl	8000ad8 <__aeabi_dcmpeq>
 8004504:	2800      	cmp	r0, #0
 8004506:	d0c1      	beq.n	800448c <_strtod_l+0x8d4>
 8004508:	e60a      	b.n	8004120 <_strtod_l+0x568>
 800450a:	9904      	ldr	r1, [sp, #16]
 800450c:	4658      	mov	r0, fp
 800450e:	f002 f80f 	bl	8006530 <__ratio>
 8004512:	2200      	movs	r2, #0
 8004514:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004518:	4606      	mov	r6, r0
 800451a:	460f      	mov	r7, r1
 800451c:	f7fc faf0 	bl	8000b00 <__aeabi_dcmple>
 8004520:	2800      	cmp	r0, #0
 8004522:	d070      	beq.n	8004606 <_strtod_l+0xa4e>
 8004524:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004526:	2b00      	cmp	r3, #0
 8004528:	d042      	beq.n	80045b0 <_strtod_l+0x9f8>
 800452a:	4f64      	ldr	r7, [pc, #400]	; (80046bc <_strtod_l+0xb04>)
 800452c:	2600      	movs	r6, #0
 800452e:	4d63      	ldr	r5, [pc, #396]	; (80046bc <_strtod_l+0xb04>)
 8004530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004532:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004536:	0d1b      	lsrs	r3, r3, #20
 8004538:	051b      	lsls	r3, r3, #20
 800453a:	930f      	str	r3, [sp, #60]	; 0x3c
 800453c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800453e:	4b60      	ldr	r3, [pc, #384]	; (80046c0 <_strtod_l+0xb08>)
 8004540:	429a      	cmp	r2, r3
 8004542:	f040 80c5 	bne.w	80046d0 <_strtod_l+0xb18>
 8004546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004548:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800454c:	4640      	mov	r0, r8
 800454e:	4649      	mov	r1, r9
 8004550:	f001 ff18 	bl	8006384 <__ulp>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4630      	mov	r0, r6
 800455a:	4639      	mov	r1, r7
 800455c:	f7fc f854 	bl	8000608 <__aeabi_dmul>
 8004560:	4642      	mov	r2, r8
 8004562:	464b      	mov	r3, r9
 8004564:	f7fb fe9a 	bl	800029c <__adddf3>
 8004568:	460b      	mov	r3, r1
 800456a:	4952      	ldr	r1, [pc, #328]	; (80046b4 <_strtod_l+0xafc>)
 800456c:	4a55      	ldr	r2, [pc, #340]	; (80046c4 <_strtod_l+0xb0c>)
 800456e:	4019      	ands	r1, r3
 8004570:	4291      	cmp	r1, r2
 8004572:	4680      	mov	r8, r0
 8004574:	d95d      	bls.n	8004632 <_strtod_l+0xa7a>
 8004576:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004578:	4b4f      	ldr	r3, [pc, #316]	; (80046b8 <_strtod_l+0xb00>)
 800457a:	429a      	cmp	r2, r3
 800457c:	d103      	bne.n	8004586 <_strtod_l+0x9ce>
 800457e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004580:	3301      	adds	r3, #1
 8004582:	f43f ad58 	beq.w	8004036 <_strtod_l+0x47e>
 8004586:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80046b8 <_strtod_l+0xb00>
 800458a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800458e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004590:	4650      	mov	r0, sl
 8004592:	f001 fbcb 	bl	8005d2c <_Bfree>
 8004596:	9906      	ldr	r1, [sp, #24]
 8004598:	4650      	mov	r0, sl
 800459a:	f001 fbc7 	bl	8005d2c <_Bfree>
 800459e:	9904      	ldr	r1, [sp, #16]
 80045a0:	4650      	mov	r0, sl
 80045a2:	f001 fbc3 	bl	8005d2c <_Bfree>
 80045a6:	4659      	mov	r1, fp
 80045a8:	4650      	mov	r0, sl
 80045aa:	f001 fbbf 	bl	8005d2c <_Bfree>
 80045ae:	e629      	b.n	8004204 <_strtod_l+0x64c>
 80045b0:	f1b8 0f00 	cmp.w	r8, #0
 80045b4:	d119      	bne.n	80045ea <_strtod_l+0xa32>
 80045b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045bc:	b9e3      	cbnz	r3, 80045f8 <_strtod_l+0xa40>
 80045be:	4b3f      	ldr	r3, [pc, #252]	; (80046bc <_strtod_l+0xb04>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	4630      	mov	r0, r6
 80045c4:	4639      	mov	r1, r7
 80045c6:	f7fc fa91 	bl	8000aec <__aeabi_dcmplt>
 80045ca:	b9c8      	cbnz	r0, 8004600 <_strtod_l+0xa48>
 80045cc:	4b3e      	ldr	r3, [pc, #248]	; (80046c8 <_strtod_l+0xb10>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	4630      	mov	r0, r6
 80045d2:	4639      	mov	r1, r7
 80045d4:	f7fc f818 	bl	8000608 <__aeabi_dmul>
 80045d8:	4604      	mov	r4, r0
 80045da:	460d      	mov	r5, r1
 80045dc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80045e0:	9416      	str	r4, [sp, #88]	; 0x58
 80045e2:	9317      	str	r3, [sp, #92]	; 0x5c
 80045e4:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80045e8:	e7a2      	b.n	8004530 <_strtod_l+0x978>
 80045ea:	f1b8 0f01 	cmp.w	r8, #1
 80045ee:	d103      	bne.n	80045f8 <_strtod_l+0xa40>
 80045f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f43f ad94 	beq.w	8004120 <_strtod_l+0x568>
 80045f8:	4f34      	ldr	r7, [pc, #208]	; (80046cc <_strtod_l+0xb14>)
 80045fa:	2600      	movs	r6, #0
 80045fc:	2400      	movs	r4, #0
 80045fe:	e796      	b.n	800452e <_strtod_l+0x976>
 8004600:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004602:	4d31      	ldr	r5, [pc, #196]	; (80046c8 <_strtod_l+0xb10>)
 8004604:	e7ea      	b.n	80045dc <_strtod_l+0xa24>
 8004606:	4b30      	ldr	r3, [pc, #192]	; (80046c8 <_strtod_l+0xb10>)
 8004608:	2200      	movs	r2, #0
 800460a:	4630      	mov	r0, r6
 800460c:	4639      	mov	r1, r7
 800460e:	f7fb fffb 	bl	8000608 <__aeabi_dmul>
 8004612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004614:	4604      	mov	r4, r0
 8004616:	460d      	mov	r5, r1
 8004618:	b933      	cbnz	r3, 8004628 <_strtod_l+0xa70>
 800461a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800461e:	9010      	str	r0, [sp, #64]	; 0x40
 8004620:	9311      	str	r3, [sp, #68]	; 0x44
 8004622:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004626:	e783      	b.n	8004530 <_strtod_l+0x978>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004630:	e7f7      	b.n	8004622 <_strtod_l+0xa6a>
 8004632:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004636:	9b05      	ldr	r3, [sp, #20]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1a8      	bne.n	800458e <_strtod_l+0x9d6>
 800463c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004640:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004642:	0d1b      	lsrs	r3, r3, #20
 8004644:	051b      	lsls	r3, r3, #20
 8004646:	429a      	cmp	r2, r3
 8004648:	d1a1      	bne.n	800458e <_strtod_l+0x9d6>
 800464a:	4620      	mov	r0, r4
 800464c:	4629      	mov	r1, r5
 800464e:	f7fc fb23 	bl	8000c98 <__aeabi_d2lz>
 8004652:	f7fb ffab 	bl	80005ac <__aeabi_l2d>
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	4620      	mov	r0, r4
 800465c:	4629      	mov	r1, r5
 800465e:	f7fb fe1b 	bl	8000298 <__aeabi_dsub>
 8004662:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004664:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004668:	ea43 0308 	orr.w	r3, r3, r8
 800466c:	4313      	orrs	r3, r2
 800466e:	4604      	mov	r4, r0
 8004670:	460d      	mov	r5, r1
 8004672:	d068      	beq.n	8004746 <_strtod_l+0xb8e>
 8004674:	a30a      	add	r3, pc, #40	; (adr r3, 80046a0 <_strtod_l+0xae8>)
 8004676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467a:	f7fc fa37 	bl	8000aec <__aeabi_dcmplt>
 800467e:	2800      	cmp	r0, #0
 8004680:	f47f ace4 	bne.w	800404c <_strtod_l+0x494>
 8004684:	a308      	add	r3, pc, #32	; (adr r3, 80046a8 <_strtod_l+0xaf0>)
 8004686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468a:	4620      	mov	r0, r4
 800468c:	4629      	mov	r1, r5
 800468e:	f7fc fa4b 	bl	8000b28 <__aeabi_dcmpgt>
 8004692:	2800      	cmp	r0, #0
 8004694:	f43f af7b 	beq.w	800458e <_strtod_l+0x9d6>
 8004698:	e4d8      	b.n	800404c <_strtod_l+0x494>
 800469a:	bf00      	nop
 800469c:	f3af 8000 	nop.w
 80046a0:	94a03595 	.word	0x94a03595
 80046a4:	3fdfffff 	.word	0x3fdfffff
 80046a8:	35afe535 	.word	0x35afe535
 80046ac:	3fe00000 	.word	0x3fe00000
 80046b0:	000fffff 	.word	0x000fffff
 80046b4:	7ff00000 	.word	0x7ff00000
 80046b8:	7fefffff 	.word	0x7fefffff
 80046bc:	3ff00000 	.word	0x3ff00000
 80046c0:	7fe00000 	.word	0x7fe00000
 80046c4:	7c9fffff 	.word	0x7c9fffff
 80046c8:	3fe00000 	.word	0x3fe00000
 80046cc:	bff00000 	.word	0xbff00000
 80046d0:	9b05      	ldr	r3, [sp, #20]
 80046d2:	b313      	cbz	r3, 800471a <_strtod_l+0xb62>
 80046d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80046da:	d81e      	bhi.n	800471a <_strtod_l+0xb62>
 80046dc:	a326      	add	r3, pc, #152	; (adr r3, 8004778 <_strtod_l+0xbc0>)
 80046de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e2:	4620      	mov	r0, r4
 80046e4:	4629      	mov	r1, r5
 80046e6:	f7fc fa0b 	bl	8000b00 <__aeabi_dcmple>
 80046ea:	b190      	cbz	r0, 8004712 <_strtod_l+0xb5a>
 80046ec:	4629      	mov	r1, r5
 80046ee:	4620      	mov	r0, r4
 80046f0:	f7fc fa62 	bl	8000bb8 <__aeabi_d2uiz>
 80046f4:	2801      	cmp	r0, #1
 80046f6:	bf38      	it	cc
 80046f8:	2001      	movcc	r0, #1
 80046fa:	f7fb ff0b 	bl	8000514 <__aeabi_ui2d>
 80046fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004700:	4604      	mov	r4, r0
 8004702:	460d      	mov	r5, r1
 8004704:	b9d3      	cbnz	r3, 800473c <_strtod_l+0xb84>
 8004706:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800470a:	9012      	str	r0, [sp, #72]	; 0x48
 800470c:	9313      	str	r3, [sp, #76]	; 0x4c
 800470e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004712:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004714:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004718:	1a9f      	subs	r7, r3, r2
 800471a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800471e:	f001 fe31 	bl	8006384 <__ulp>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	4630      	mov	r0, r6
 8004728:	4639      	mov	r1, r7
 800472a:	f7fb ff6d 	bl	8000608 <__aeabi_dmul>
 800472e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004732:	f7fb fdb3 	bl	800029c <__adddf3>
 8004736:	4680      	mov	r8, r0
 8004738:	4689      	mov	r9, r1
 800473a:	e77c      	b.n	8004636 <_strtod_l+0xa7e>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004744:	e7e3      	b.n	800470e <_strtod_l+0xb56>
 8004746:	a30e      	add	r3, pc, #56	; (adr r3, 8004780 <_strtod_l+0xbc8>)
 8004748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474c:	f7fc f9ce 	bl	8000aec <__aeabi_dcmplt>
 8004750:	e79f      	b.n	8004692 <_strtod_l+0xada>
 8004752:	2300      	movs	r3, #0
 8004754:	930a      	str	r3, [sp, #40]	; 0x28
 8004756:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004758:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	f7ff ba71 	b.w	8003c42 <_strtod_l+0x8a>
 8004760:	2a65      	cmp	r2, #101	; 0x65
 8004762:	f43f ab63 	beq.w	8003e2c <_strtod_l+0x274>
 8004766:	2a45      	cmp	r2, #69	; 0x45
 8004768:	f43f ab60 	beq.w	8003e2c <_strtod_l+0x274>
 800476c:	2301      	movs	r3, #1
 800476e:	f7ff bb95 	b.w	8003e9c <_strtod_l+0x2e4>
 8004772:	bf00      	nop
 8004774:	f3af 8000 	nop.w
 8004778:	ffc00000 	.word	0xffc00000
 800477c:	41dfffff 	.word	0x41dfffff
 8004780:	94a03595 	.word	0x94a03595
 8004784:	3fcfffff 	.word	0x3fcfffff

08004788 <_strtod_r>:
 8004788:	4b01      	ldr	r3, [pc, #4]	; (8004790 <_strtod_r+0x8>)
 800478a:	f7ff ba15 	b.w	8003bb8 <_strtod_l>
 800478e:	bf00      	nop
 8004790:	200000ac 	.word	0x200000ac

08004794 <_strtol_l.constprop.0>:
 8004794:	2b01      	cmp	r3, #1
 8004796:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800479a:	4680      	mov	r8, r0
 800479c:	d001      	beq.n	80047a2 <_strtol_l.constprop.0+0xe>
 800479e:	2b24      	cmp	r3, #36	; 0x24
 80047a0:	d906      	bls.n	80047b0 <_strtol_l.constprop.0+0x1c>
 80047a2:	f000 feeb 	bl	800557c <__errno>
 80047a6:	2316      	movs	r3, #22
 80047a8:	6003      	str	r3, [r0, #0]
 80047aa:	2000      	movs	r0, #0
 80047ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b0:	4f35      	ldr	r7, [pc, #212]	; (8004888 <_strtol_l.constprop.0+0xf4>)
 80047b2:	460d      	mov	r5, r1
 80047b4:	4628      	mov	r0, r5
 80047b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80047ba:	5de6      	ldrb	r6, [r4, r7]
 80047bc:	f016 0608 	ands.w	r6, r6, #8
 80047c0:	d1f8      	bne.n	80047b4 <_strtol_l.constprop.0+0x20>
 80047c2:	2c2d      	cmp	r4, #45	; 0x2d
 80047c4:	d12f      	bne.n	8004826 <_strtol_l.constprop.0+0x92>
 80047c6:	782c      	ldrb	r4, [r5, #0]
 80047c8:	2601      	movs	r6, #1
 80047ca:	1c85      	adds	r5, r0, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d057      	beq.n	8004880 <_strtol_l.constprop.0+0xec>
 80047d0:	2b10      	cmp	r3, #16
 80047d2:	d109      	bne.n	80047e8 <_strtol_l.constprop.0+0x54>
 80047d4:	2c30      	cmp	r4, #48	; 0x30
 80047d6:	d107      	bne.n	80047e8 <_strtol_l.constprop.0+0x54>
 80047d8:	7828      	ldrb	r0, [r5, #0]
 80047da:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80047de:	2858      	cmp	r0, #88	; 0x58
 80047e0:	d149      	bne.n	8004876 <_strtol_l.constprop.0+0xe2>
 80047e2:	786c      	ldrb	r4, [r5, #1]
 80047e4:	2310      	movs	r3, #16
 80047e6:	3502      	adds	r5, #2
 80047e8:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80047ec:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80047f0:	2700      	movs	r7, #0
 80047f2:	fbbe f9f3 	udiv	r9, lr, r3
 80047f6:	4638      	mov	r0, r7
 80047f8:	fb03 ea19 	mls	sl, r3, r9, lr
 80047fc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004800:	f1bc 0f09 	cmp.w	ip, #9
 8004804:	d814      	bhi.n	8004830 <_strtol_l.constprop.0+0x9c>
 8004806:	4664      	mov	r4, ip
 8004808:	42a3      	cmp	r3, r4
 800480a:	dd22      	ble.n	8004852 <_strtol_l.constprop.0+0xbe>
 800480c:	2f00      	cmp	r7, #0
 800480e:	db1d      	blt.n	800484c <_strtol_l.constprop.0+0xb8>
 8004810:	4581      	cmp	r9, r0
 8004812:	d31b      	bcc.n	800484c <_strtol_l.constprop.0+0xb8>
 8004814:	d101      	bne.n	800481a <_strtol_l.constprop.0+0x86>
 8004816:	45a2      	cmp	sl, r4
 8004818:	db18      	blt.n	800484c <_strtol_l.constprop.0+0xb8>
 800481a:	fb00 4003 	mla	r0, r0, r3, r4
 800481e:	2701      	movs	r7, #1
 8004820:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004824:	e7ea      	b.n	80047fc <_strtol_l.constprop.0+0x68>
 8004826:	2c2b      	cmp	r4, #43	; 0x2b
 8004828:	bf04      	itt	eq
 800482a:	782c      	ldrbeq	r4, [r5, #0]
 800482c:	1c85      	addeq	r5, r0, #2
 800482e:	e7cd      	b.n	80047cc <_strtol_l.constprop.0+0x38>
 8004830:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004834:	f1bc 0f19 	cmp.w	ip, #25
 8004838:	d801      	bhi.n	800483e <_strtol_l.constprop.0+0xaa>
 800483a:	3c37      	subs	r4, #55	; 0x37
 800483c:	e7e4      	b.n	8004808 <_strtol_l.constprop.0+0x74>
 800483e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004842:	f1bc 0f19 	cmp.w	ip, #25
 8004846:	d804      	bhi.n	8004852 <_strtol_l.constprop.0+0xbe>
 8004848:	3c57      	subs	r4, #87	; 0x57
 800484a:	e7dd      	b.n	8004808 <_strtol_l.constprop.0+0x74>
 800484c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004850:	e7e6      	b.n	8004820 <_strtol_l.constprop.0+0x8c>
 8004852:	2f00      	cmp	r7, #0
 8004854:	da07      	bge.n	8004866 <_strtol_l.constprop.0+0xd2>
 8004856:	2322      	movs	r3, #34	; 0x22
 8004858:	f8c8 3000 	str.w	r3, [r8]
 800485c:	4670      	mov	r0, lr
 800485e:	2a00      	cmp	r2, #0
 8004860:	d0a4      	beq.n	80047ac <_strtol_l.constprop.0+0x18>
 8004862:	1e69      	subs	r1, r5, #1
 8004864:	e005      	b.n	8004872 <_strtol_l.constprop.0+0xde>
 8004866:	b106      	cbz	r6, 800486a <_strtol_l.constprop.0+0xd6>
 8004868:	4240      	negs	r0, r0
 800486a:	2a00      	cmp	r2, #0
 800486c:	d09e      	beq.n	80047ac <_strtol_l.constprop.0+0x18>
 800486e:	2f00      	cmp	r7, #0
 8004870:	d1f7      	bne.n	8004862 <_strtol_l.constprop.0+0xce>
 8004872:	6011      	str	r1, [r2, #0]
 8004874:	e79a      	b.n	80047ac <_strtol_l.constprop.0+0x18>
 8004876:	2430      	movs	r4, #48	; 0x30
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1b5      	bne.n	80047e8 <_strtol_l.constprop.0+0x54>
 800487c:	2308      	movs	r3, #8
 800487e:	e7b3      	b.n	80047e8 <_strtol_l.constprop.0+0x54>
 8004880:	2c30      	cmp	r4, #48	; 0x30
 8004882:	d0a9      	beq.n	80047d8 <_strtol_l.constprop.0+0x44>
 8004884:	230a      	movs	r3, #10
 8004886:	e7af      	b.n	80047e8 <_strtol_l.constprop.0+0x54>
 8004888:	08007811 	.word	0x08007811

0800488c <_strtol_r>:
 800488c:	f7ff bf82 	b.w	8004794 <_strtol_l.constprop.0>

08004890 <quorem>:
 8004890:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004894:	6903      	ldr	r3, [r0, #16]
 8004896:	690c      	ldr	r4, [r1, #16]
 8004898:	42a3      	cmp	r3, r4
 800489a:	4607      	mov	r7, r0
 800489c:	db7d      	blt.n	800499a <quorem+0x10a>
 800489e:	3c01      	subs	r4, #1
 80048a0:	f101 0814 	add.w	r8, r1, #20
 80048a4:	f100 0514 	add.w	r5, r0, #20
 80048a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80048ac:	9301      	str	r3, [sp, #4]
 80048ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80048b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80048b6:	3301      	adds	r3, #1
 80048b8:	429a      	cmp	r2, r3
 80048ba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80048be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80048c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80048c6:	d32e      	bcc.n	8004926 <quorem+0x96>
 80048c8:	f04f 0e00 	mov.w	lr, #0
 80048cc:	4640      	mov	r0, r8
 80048ce:	46ac      	mov	ip, r5
 80048d0:	46f2      	mov	sl, lr
 80048d2:	f850 2b04 	ldr.w	r2, [r0], #4
 80048d6:	b293      	uxth	r3, r2
 80048d8:	fb06 e303 	mla	r3, r6, r3, lr
 80048dc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80048e0:	0c12      	lsrs	r2, r2, #16
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	fb06 e202 	mla	r2, r6, r2, lr
 80048e8:	ebaa 0303 	sub.w	r3, sl, r3
 80048ec:	f8dc a000 	ldr.w	sl, [ip]
 80048f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80048f4:	b292      	uxth	r2, r2
 80048f6:	fa13 f38a 	uxtah	r3, r3, sl
 80048fa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80048fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004902:	b29b      	uxth	r3, r3
 8004904:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004908:	4581      	cmp	r9, r0
 800490a:	f84c 3b04 	str.w	r3, [ip], #4
 800490e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004912:	d2de      	bcs.n	80048d2 <quorem+0x42>
 8004914:	f855 300b 	ldr.w	r3, [r5, fp]
 8004918:	b92b      	cbnz	r3, 8004926 <quorem+0x96>
 800491a:	9b01      	ldr	r3, [sp, #4]
 800491c:	3b04      	subs	r3, #4
 800491e:	429d      	cmp	r5, r3
 8004920:	461a      	mov	r2, r3
 8004922:	d32e      	bcc.n	8004982 <quorem+0xf2>
 8004924:	613c      	str	r4, [r7, #16]
 8004926:	4638      	mov	r0, r7
 8004928:	f001 fc88 	bl	800623c <__mcmp>
 800492c:	2800      	cmp	r0, #0
 800492e:	db24      	blt.n	800497a <quorem+0xea>
 8004930:	3601      	adds	r6, #1
 8004932:	4628      	mov	r0, r5
 8004934:	f04f 0c00 	mov.w	ip, #0
 8004938:	f858 2b04 	ldr.w	r2, [r8], #4
 800493c:	f8d0 e000 	ldr.w	lr, [r0]
 8004940:	b293      	uxth	r3, r2
 8004942:	ebac 0303 	sub.w	r3, ip, r3
 8004946:	0c12      	lsrs	r2, r2, #16
 8004948:	fa13 f38e 	uxtah	r3, r3, lr
 800494c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004950:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004954:	b29b      	uxth	r3, r3
 8004956:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800495a:	45c1      	cmp	r9, r8
 800495c:	f840 3b04 	str.w	r3, [r0], #4
 8004960:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004964:	d2e8      	bcs.n	8004938 <quorem+0xa8>
 8004966:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800496a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800496e:	b922      	cbnz	r2, 800497a <quorem+0xea>
 8004970:	3b04      	subs	r3, #4
 8004972:	429d      	cmp	r5, r3
 8004974:	461a      	mov	r2, r3
 8004976:	d30a      	bcc.n	800498e <quorem+0xfe>
 8004978:	613c      	str	r4, [r7, #16]
 800497a:	4630      	mov	r0, r6
 800497c:	b003      	add	sp, #12
 800497e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004982:	6812      	ldr	r2, [r2, #0]
 8004984:	3b04      	subs	r3, #4
 8004986:	2a00      	cmp	r2, #0
 8004988:	d1cc      	bne.n	8004924 <quorem+0x94>
 800498a:	3c01      	subs	r4, #1
 800498c:	e7c7      	b.n	800491e <quorem+0x8e>
 800498e:	6812      	ldr	r2, [r2, #0]
 8004990:	3b04      	subs	r3, #4
 8004992:	2a00      	cmp	r2, #0
 8004994:	d1f0      	bne.n	8004978 <quorem+0xe8>
 8004996:	3c01      	subs	r4, #1
 8004998:	e7eb      	b.n	8004972 <quorem+0xe2>
 800499a:	2000      	movs	r0, #0
 800499c:	e7ee      	b.n	800497c <quorem+0xec>
	...

080049a0 <_dtoa_r>:
 80049a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80049a6:	b099      	sub	sp, #100	; 0x64
 80049a8:	4616      	mov	r6, r2
 80049aa:	461f      	mov	r7, r3
 80049ac:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80049b0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80049b4:	4605      	mov	r5, r0
 80049b6:	b974      	cbnz	r4, 80049d6 <_dtoa_r+0x36>
 80049b8:	2010      	movs	r0, #16
 80049ba:	f001 f94f 	bl	8005c5c <malloc>
 80049be:	4602      	mov	r2, r0
 80049c0:	6268      	str	r0, [r5, #36]	; 0x24
 80049c2:	b920      	cbnz	r0, 80049ce <_dtoa_r+0x2e>
 80049c4:	4ba8      	ldr	r3, [pc, #672]	; (8004c68 <_dtoa_r+0x2c8>)
 80049c6:	21ea      	movs	r1, #234	; 0xea
 80049c8:	48a8      	ldr	r0, [pc, #672]	; (8004c6c <_dtoa_r+0x2cc>)
 80049ca:	f002 f8a9 	bl	8006b20 <__assert_func>
 80049ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80049d2:	6004      	str	r4, [r0, #0]
 80049d4:	60c4      	str	r4, [r0, #12]
 80049d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80049d8:	6819      	ldr	r1, [r3, #0]
 80049da:	b151      	cbz	r1, 80049f2 <_dtoa_r+0x52>
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	604a      	str	r2, [r1, #4]
 80049e0:	2301      	movs	r3, #1
 80049e2:	4093      	lsls	r3, r2
 80049e4:	608b      	str	r3, [r1, #8]
 80049e6:	4628      	mov	r0, r5
 80049e8:	f001 f9a0 	bl	8005d2c <_Bfree>
 80049ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	1e3b      	subs	r3, r7, #0
 80049f4:	bfb9      	ittee	lt
 80049f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80049fa:	9305      	strlt	r3, [sp, #20]
 80049fc:	2300      	movge	r3, #0
 80049fe:	f8c8 3000 	strge.w	r3, [r8]
 8004a02:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004a06:	4b9a      	ldr	r3, [pc, #616]	; (8004c70 <_dtoa_r+0x2d0>)
 8004a08:	bfbc      	itt	lt
 8004a0a:	2201      	movlt	r2, #1
 8004a0c:	f8c8 2000 	strlt.w	r2, [r8]
 8004a10:	ea33 0309 	bics.w	r3, r3, r9
 8004a14:	d119      	bne.n	8004a4a <_dtoa_r+0xaa>
 8004a16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004a18:	f242 730f 	movw	r3, #9999	; 0x270f
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004a22:	4333      	orrs	r3, r6
 8004a24:	f000 8580 	beq.w	8005528 <_dtoa_r+0xb88>
 8004a28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004a2a:	b953      	cbnz	r3, 8004a42 <_dtoa_r+0xa2>
 8004a2c:	4b91      	ldr	r3, [pc, #580]	; (8004c74 <_dtoa_r+0x2d4>)
 8004a2e:	e022      	b.n	8004a76 <_dtoa_r+0xd6>
 8004a30:	4b91      	ldr	r3, [pc, #580]	; (8004c78 <_dtoa_r+0x2d8>)
 8004a32:	9303      	str	r3, [sp, #12]
 8004a34:	3308      	adds	r3, #8
 8004a36:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	9803      	ldr	r0, [sp, #12]
 8004a3c:	b019      	add	sp, #100	; 0x64
 8004a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a42:	4b8c      	ldr	r3, [pc, #560]	; (8004c74 <_dtoa_r+0x2d4>)
 8004a44:	9303      	str	r3, [sp, #12]
 8004a46:	3303      	adds	r3, #3
 8004a48:	e7f5      	b.n	8004a36 <_dtoa_r+0x96>
 8004a4a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004a4e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004a52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a56:	2200      	movs	r2, #0
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f7fc f83d 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a5e:	4680      	mov	r8, r0
 8004a60:	b158      	cbz	r0, 8004a7a <_dtoa_r+0xda>
 8004a62:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004a64:	2301      	movs	r3, #1
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 8559 	beq.w	8005522 <_dtoa_r+0xb82>
 8004a70:	4882      	ldr	r0, [pc, #520]	; (8004c7c <_dtoa_r+0x2dc>)
 8004a72:	6018      	str	r0, [r3, #0]
 8004a74:	1e43      	subs	r3, r0, #1
 8004a76:	9303      	str	r3, [sp, #12]
 8004a78:	e7df      	b.n	8004a3a <_dtoa_r+0x9a>
 8004a7a:	ab16      	add	r3, sp, #88	; 0x58
 8004a7c:	9301      	str	r3, [sp, #4]
 8004a7e:	ab17      	add	r3, sp, #92	; 0x5c
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	4628      	mov	r0, r5
 8004a84:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004a88:	f001 fcf6 	bl	8006478 <__d2b>
 8004a8c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004a90:	4683      	mov	fp, r0
 8004a92:	2c00      	cmp	r4, #0
 8004a94:	d07e      	beq.n	8004b94 <_dtoa_r+0x1f4>
 8004a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a98:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004aa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004aa4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004aa8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004aac:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004ab0:	4b73      	ldr	r3, [pc, #460]	; (8004c80 <_dtoa_r+0x2e0>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f7fb fbf0 	bl	8000298 <__aeabi_dsub>
 8004ab8:	a365      	add	r3, pc, #404	; (adr r3, 8004c50 <_dtoa_r+0x2b0>)
 8004aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abe:	f7fb fda3 	bl	8000608 <__aeabi_dmul>
 8004ac2:	a365      	add	r3, pc, #404	; (adr r3, 8004c58 <_dtoa_r+0x2b8>)
 8004ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac8:	f7fb fbe8 	bl	800029c <__adddf3>
 8004acc:	4606      	mov	r6, r0
 8004ace:	4620      	mov	r0, r4
 8004ad0:	460f      	mov	r7, r1
 8004ad2:	f7fb fd2f 	bl	8000534 <__aeabi_i2d>
 8004ad6:	a362      	add	r3, pc, #392	; (adr r3, 8004c60 <_dtoa_r+0x2c0>)
 8004ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004adc:	f7fb fd94 	bl	8000608 <__aeabi_dmul>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4630      	mov	r0, r6
 8004ae6:	4639      	mov	r1, r7
 8004ae8:	f7fb fbd8 	bl	800029c <__adddf3>
 8004aec:	4606      	mov	r6, r0
 8004aee:	460f      	mov	r7, r1
 8004af0:	f7fc f83a 	bl	8000b68 <__aeabi_d2iz>
 8004af4:	2200      	movs	r2, #0
 8004af6:	4682      	mov	sl, r0
 8004af8:	2300      	movs	r3, #0
 8004afa:	4630      	mov	r0, r6
 8004afc:	4639      	mov	r1, r7
 8004afe:	f7fb fff5 	bl	8000aec <__aeabi_dcmplt>
 8004b02:	b148      	cbz	r0, 8004b18 <_dtoa_r+0x178>
 8004b04:	4650      	mov	r0, sl
 8004b06:	f7fb fd15 	bl	8000534 <__aeabi_i2d>
 8004b0a:	4632      	mov	r2, r6
 8004b0c:	463b      	mov	r3, r7
 8004b0e:	f7fb ffe3 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b12:	b908      	cbnz	r0, 8004b18 <_dtoa_r+0x178>
 8004b14:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004b18:	f1ba 0f16 	cmp.w	sl, #22
 8004b1c:	d857      	bhi.n	8004bce <_dtoa_r+0x22e>
 8004b1e:	4b59      	ldr	r3, [pc, #356]	; (8004c84 <_dtoa_r+0x2e4>)
 8004b20:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b2c:	f7fb ffde 	bl	8000aec <__aeabi_dcmplt>
 8004b30:	2800      	cmp	r0, #0
 8004b32:	d04e      	beq.n	8004bd2 <_dtoa_r+0x232>
 8004b34:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004b38:	2300      	movs	r3, #0
 8004b3a:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b3c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004b3e:	1b1c      	subs	r4, r3, r4
 8004b40:	1e63      	subs	r3, r4, #1
 8004b42:	9309      	str	r3, [sp, #36]	; 0x24
 8004b44:	bf45      	ittet	mi
 8004b46:	f1c4 0301 	rsbmi	r3, r4, #1
 8004b4a:	9306      	strmi	r3, [sp, #24]
 8004b4c:	2300      	movpl	r3, #0
 8004b4e:	2300      	movmi	r3, #0
 8004b50:	bf4c      	ite	mi
 8004b52:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004b54:	9306      	strpl	r3, [sp, #24]
 8004b56:	f1ba 0f00 	cmp.w	sl, #0
 8004b5a:	db3c      	blt.n	8004bd6 <_dtoa_r+0x236>
 8004b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b5e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004b62:	4453      	add	r3, sl
 8004b64:	9309      	str	r3, [sp, #36]	; 0x24
 8004b66:	2300      	movs	r3, #0
 8004b68:	930a      	str	r3, [sp, #40]	; 0x28
 8004b6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b6c:	2b09      	cmp	r3, #9
 8004b6e:	f200 808d 	bhi.w	8004c8c <_dtoa_r+0x2ec>
 8004b72:	2b05      	cmp	r3, #5
 8004b74:	bfc4      	itt	gt
 8004b76:	3b04      	subgt	r3, #4
 8004b78:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004b7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b7c:	f1a3 0302 	sub.w	r3, r3, #2
 8004b80:	bfcc      	ite	gt
 8004b82:	2400      	movgt	r4, #0
 8004b84:	2401      	movle	r4, #1
 8004b86:	2b03      	cmp	r3, #3
 8004b88:	f200 808c 	bhi.w	8004ca4 <_dtoa_r+0x304>
 8004b8c:	e8df f003 	tbb	[pc, r3]
 8004b90:	5b4d4f2d 	.word	0x5b4d4f2d
 8004b94:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004b98:	441c      	add	r4, r3
 8004b9a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004b9e:	2b20      	cmp	r3, #32
 8004ba0:	bfc3      	ittte	gt
 8004ba2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004ba6:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004baa:	fa09 f303 	lslgt.w	r3, r9, r3
 8004bae:	f1c3 0320 	rsble	r3, r3, #32
 8004bb2:	bfc6      	itte	gt
 8004bb4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004bb8:	4318      	orrgt	r0, r3
 8004bba:	fa06 f003 	lslle.w	r0, r6, r3
 8004bbe:	f7fb fca9 	bl	8000514 <__aeabi_ui2d>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004bc8:	3c01      	subs	r4, #1
 8004bca:	9313      	str	r3, [sp, #76]	; 0x4c
 8004bcc:	e770      	b.n	8004ab0 <_dtoa_r+0x110>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e7b3      	b.n	8004b3a <_dtoa_r+0x19a>
 8004bd2:	900f      	str	r0, [sp, #60]	; 0x3c
 8004bd4:	e7b2      	b.n	8004b3c <_dtoa_r+0x19c>
 8004bd6:	9b06      	ldr	r3, [sp, #24]
 8004bd8:	eba3 030a 	sub.w	r3, r3, sl
 8004bdc:	9306      	str	r3, [sp, #24]
 8004bde:	f1ca 0300 	rsb	r3, sl, #0
 8004be2:	930a      	str	r3, [sp, #40]	; 0x28
 8004be4:	2300      	movs	r3, #0
 8004be6:	930e      	str	r3, [sp, #56]	; 0x38
 8004be8:	e7bf      	b.n	8004b6a <_dtoa_r+0x1ca>
 8004bea:	2300      	movs	r3, #0
 8004bec:	930b      	str	r3, [sp, #44]	; 0x2c
 8004bee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	dc5a      	bgt.n	8004caa <_dtoa_r+0x30a>
 8004bf4:	f04f 0901 	mov.w	r9, #1
 8004bf8:	f8cd 9020 	str.w	r9, [sp, #32]
 8004bfc:	464b      	mov	r3, r9
 8004bfe:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004c02:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004c04:	2200      	movs	r2, #0
 8004c06:	6042      	str	r2, [r0, #4]
 8004c08:	2204      	movs	r2, #4
 8004c0a:	f102 0614 	add.w	r6, r2, #20
 8004c0e:	429e      	cmp	r6, r3
 8004c10:	6841      	ldr	r1, [r0, #4]
 8004c12:	d950      	bls.n	8004cb6 <_dtoa_r+0x316>
 8004c14:	4628      	mov	r0, r5
 8004c16:	f001 f849 	bl	8005cac <_Balloc>
 8004c1a:	9003      	str	r0, [sp, #12]
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	d14e      	bne.n	8004cbe <_dtoa_r+0x31e>
 8004c20:	4b19      	ldr	r3, [pc, #100]	; (8004c88 <_dtoa_r+0x2e8>)
 8004c22:	4602      	mov	r2, r0
 8004c24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004c28:	e6ce      	b.n	80049c8 <_dtoa_r+0x28>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e7de      	b.n	8004bec <_dtoa_r+0x24c>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c34:	eb0a 0903 	add.w	r9, sl, r3
 8004c38:	f109 0301 	add.w	r3, r9, #1
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	9308      	str	r3, [sp, #32]
 8004c40:	bfb8      	it	lt
 8004c42:	2301      	movlt	r3, #1
 8004c44:	e7dd      	b.n	8004c02 <_dtoa_r+0x262>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e7f2      	b.n	8004c30 <_dtoa_r+0x290>
 8004c4a:	bf00      	nop
 8004c4c:	f3af 8000 	nop.w
 8004c50:	636f4361 	.word	0x636f4361
 8004c54:	3fd287a7 	.word	0x3fd287a7
 8004c58:	8b60c8b3 	.word	0x8b60c8b3
 8004c5c:	3fc68a28 	.word	0x3fc68a28
 8004c60:	509f79fb 	.word	0x509f79fb
 8004c64:	3fd34413 	.word	0x3fd34413
 8004c68:	0800791e 	.word	0x0800791e
 8004c6c:	08007935 	.word	0x08007935
 8004c70:	7ff00000 	.word	0x7ff00000
 8004c74:	0800791a 	.word	0x0800791a
 8004c78:	08007911 	.word	0x08007911
 8004c7c:	08007791 	.word	0x08007791
 8004c80:	3ff80000 	.word	0x3ff80000
 8004c84:	08007aa0 	.word	0x08007aa0
 8004c88:	08007990 	.word	0x08007990
 8004c8c:	2401      	movs	r4, #1
 8004c8e:	2300      	movs	r3, #0
 8004c90:	9322      	str	r3, [sp, #136]	; 0x88
 8004c92:	940b      	str	r4, [sp, #44]	; 0x2c
 8004c94:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f8cd 9020 	str.w	r9, [sp, #32]
 8004c9e:	2312      	movs	r3, #18
 8004ca0:	9223      	str	r2, [sp, #140]	; 0x8c
 8004ca2:	e7ae      	b.n	8004c02 <_dtoa_r+0x262>
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ca8:	e7f4      	b.n	8004c94 <_dtoa_r+0x2f4>
 8004caa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004cae:	f8cd 9020 	str.w	r9, [sp, #32]
 8004cb2:	464b      	mov	r3, r9
 8004cb4:	e7a5      	b.n	8004c02 <_dtoa_r+0x262>
 8004cb6:	3101      	adds	r1, #1
 8004cb8:	6041      	str	r1, [r0, #4]
 8004cba:	0052      	lsls	r2, r2, #1
 8004cbc:	e7a5      	b.n	8004c0a <_dtoa_r+0x26a>
 8004cbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004cc0:	9a03      	ldr	r2, [sp, #12]
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	9b08      	ldr	r3, [sp, #32]
 8004cc6:	2b0e      	cmp	r3, #14
 8004cc8:	f200 80a8 	bhi.w	8004e1c <_dtoa_r+0x47c>
 8004ccc:	2c00      	cmp	r4, #0
 8004cce:	f000 80a5 	beq.w	8004e1c <_dtoa_r+0x47c>
 8004cd2:	f1ba 0f00 	cmp.w	sl, #0
 8004cd6:	dd34      	ble.n	8004d42 <_dtoa_r+0x3a2>
 8004cd8:	4a9a      	ldr	r2, [pc, #616]	; (8004f44 <_dtoa_r+0x5a4>)
 8004cda:	f00a 030f 	and.w	r3, sl, #15
 8004cde:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004ce2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ce6:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004cea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004cee:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004cf2:	d016      	beq.n	8004d22 <_dtoa_r+0x382>
 8004cf4:	4b94      	ldr	r3, [pc, #592]	; (8004f48 <_dtoa_r+0x5a8>)
 8004cf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004cfa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004cfe:	f7fb fdad 	bl	800085c <__aeabi_ddiv>
 8004d02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d06:	f004 040f 	and.w	r4, r4, #15
 8004d0a:	2703      	movs	r7, #3
 8004d0c:	4e8e      	ldr	r6, [pc, #568]	; (8004f48 <_dtoa_r+0x5a8>)
 8004d0e:	b954      	cbnz	r4, 8004d26 <_dtoa_r+0x386>
 8004d10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d18:	f7fb fda0 	bl	800085c <__aeabi_ddiv>
 8004d1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d20:	e029      	b.n	8004d76 <_dtoa_r+0x3d6>
 8004d22:	2702      	movs	r7, #2
 8004d24:	e7f2      	b.n	8004d0c <_dtoa_r+0x36c>
 8004d26:	07e1      	lsls	r1, r4, #31
 8004d28:	d508      	bpl.n	8004d3c <_dtoa_r+0x39c>
 8004d2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d2e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004d32:	f7fb fc69 	bl	8000608 <__aeabi_dmul>
 8004d36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d3a:	3701      	adds	r7, #1
 8004d3c:	1064      	asrs	r4, r4, #1
 8004d3e:	3608      	adds	r6, #8
 8004d40:	e7e5      	b.n	8004d0e <_dtoa_r+0x36e>
 8004d42:	f000 80a5 	beq.w	8004e90 <_dtoa_r+0x4f0>
 8004d46:	f1ca 0400 	rsb	r4, sl, #0
 8004d4a:	4b7e      	ldr	r3, [pc, #504]	; (8004f44 <_dtoa_r+0x5a4>)
 8004d4c:	4e7e      	ldr	r6, [pc, #504]	; (8004f48 <_dtoa_r+0x5a8>)
 8004d4e:	f004 020f 	and.w	r2, r4, #15
 8004d52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d5e:	f7fb fc53 	bl	8000608 <__aeabi_dmul>
 8004d62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d66:	1124      	asrs	r4, r4, #4
 8004d68:	2300      	movs	r3, #0
 8004d6a:	2702      	movs	r7, #2
 8004d6c:	2c00      	cmp	r4, #0
 8004d6e:	f040 8084 	bne.w	8004e7a <_dtoa_r+0x4da>
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1d2      	bne.n	8004d1c <_dtoa_r+0x37c>
 8004d76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 808b 	beq.w	8004e94 <_dtoa_r+0x4f4>
 8004d7e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004d82:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004d86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d8a:	4b70      	ldr	r3, [pc, #448]	; (8004f4c <_dtoa_r+0x5ac>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f7fb fead 	bl	8000aec <__aeabi_dcmplt>
 8004d92:	2800      	cmp	r0, #0
 8004d94:	d07e      	beq.n	8004e94 <_dtoa_r+0x4f4>
 8004d96:	9b08      	ldr	r3, [sp, #32]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d07b      	beq.n	8004e94 <_dtoa_r+0x4f4>
 8004d9c:	f1b9 0f00 	cmp.w	r9, #0
 8004da0:	dd38      	ble.n	8004e14 <_dtoa_r+0x474>
 8004da2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004da6:	4b6a      	ldr	r3, [pc, #424]	; (8004f50 <_dtoa_r+0x5b0>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	f7fb fc2d 	bl	8000608 <__aeabi_dmul>
 8004dae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004db2:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8004db6:	3701      	adds	r7, #1
 8004db8:	464c      	mov	r4, r9
 8004dba:	4638      	mov	r0, r7
 8004dbc:	f7fb fbba 	bl	8000534 <__aeabi_i2d>
 8004dc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dc4:	f7fb fc20 	bl	8000608 <__aeabi_dmul>
 8004dc8:	4b62      	ldr	r3, [pc, #392]	; (8004f54 <_dtoa_r+0x5b4>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f7fb fa66 	bl	800029c <__adddf3>
 8004dd0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004dd4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004dd8:	9611      	str	r6, [sp, #68]	; 0x44
 8004dda:	2c00      	cmp	r4, #0
 8004ddc:	d15d      	bne.n	8004e9a <_dtoa_r+0x4fa>
 8004dde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004de2:	4b5d      	ldr	r3, [pc, #372]	; (8004f58 <_dtoa_r+0x5b8>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	f7fb fa57 	bl	8000298 <__aeabi_dsub>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004df2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004df4:	4633      	mov	r3, r6
 8004df6:	f7fb fe97 	bl	8000b28 <__aeabi_dcmpgt>
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	f040 829c 	bne.w	8005338 <_dtoa_r+0x998>
 8004e00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004e06:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004e0a:	f7fb fe6f 	bl	8000aec <__aeabi_dcmplt>
 8004e0e:	2800      	cmp	r0, #0
 8004e10:	f040 8290 	bne.w	8005334 <_dtoa_r+0x994>
 8004e14:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004e18:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004e1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f2c0 8152 	blt.w	80050c8 <_dtoa_r+0x728>
 8004e24:	f1ba 0f0e 	cmp.w	sl, #14
 8004e28:	f300 814e 	bgt.w	80050c8 <_dtoa_r+0x728>
 8004e2c:	4b45      	ldr	r3, [pc, #276]	; (8004f44 <_dtoa_r+0x5a4>)
 8004e2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004e32:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004e36:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004e3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f280 80db 	bge.w	8004ff8 <_dtoa_r+0x658>
 8004e42:	9b08      	ldr	r3, [sp, #32]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f300 80d7 	bgt.w	8004ff8 <_dtoa_r+0x658>
 8004e4a:	f040 8272 	bne.w	8005332 <_dtoa_r+0x992>
 8004e4e:	4b42      	ldr	r3, [pc, #264]	; (8004f58 <_dtoa_r+0x5b8>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e56:	f7fb fbd7 	bl	8000608 <__aeabi_dmul>
 8004e5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e5e:	f7fb fe59 	bl	8000b14 <__aeabi_dcmpge>
 8004e62:	9c08      	ldr	r4, [sp, #32]
 8004e64:	4626      	mov	r6, r4
 8004e66:	2800      	cmp	r0, #0
 8004e68:	f040 8248 	bne.w	80052fc <_dtoa_r+0x95c>
 8004e6c:	9f03      	ldr	r7, [sp, #12]
 8004e6e:	2331      	movs	r3, #49	; 0x31
 8004e70:	f807 3b01 	strb.w	r3, [r7], #1
 8004e74:	f10a 0a01 	add.w	sl, sl, #1
 8004e78:	e244      	b.n	8005304 <_dtoa_r+0x964>
 8004e7a:	07e2      	lsls	r2, r4, #31
 8004e7c:	d505      	bpl.n	8004e8a <_dtoa_r+0x4ea>
 8004e7e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e82:	f7fb fbc1 	bl	8000608 <__aeabi_dmul>
 8004e86:	3701      	adds	r7, #1
 8004e88:	2301      	movs	r3, #1
 8004e8a:	1064      	asrs	r4, r4, #1
 8004e8c:	3608      	adds	r6, #8
 8004e8e:	e76d      	b.n	8004d6c <_dtoa_r+0x3cc>
 8004e90:	2702      	movs	r7, #2
 8004e92:	e770      	b.n	8004d76 <_dtoa_r+0x3d6>
 8004e94:	9c08      	ldr	r4, [sp, #32]
 8004e96:	46d0      	mov	r8, sl
 8004e98:	e78f      	b.n	8004dba <_dtoa_r+0x41a>
 8004e9a:	9903      	ldr	r1, [sp, #12]
 8004e9c:	4b29      	ldr	r3, [pc, #164]	; (8004f44 <_dtoa_r+0x5a4>)
 8004e9e:	4421      	add	r1, r4
 8004ea0:	9112      	str	r1, [sp, #72]	; 0x48
 8004ea2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ea4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004ea8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004eac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004eb0:	2900      	cmp	r1, #0
 8004eb2:	d055      	beq.n	8004f60 <_dtoa_r+0x5c0>
 8004eb4:	4929      	ldr	r1, [pc, #164]	; (8004f5c <_dtoa_r+0x5bc>)
 8004eb6:	2000      	movs	r0, #0
 8004eb8:	f7fb fcd0 	bl	800085c <__aeabi_ddiv>
 8004ebc:	463b      	mov	r3, r7
 8004ebe:	4632      	mov	r2, r6
 8004ec0:	f7fb f9ea 	bl	8000298 <__aeabi_dsub>
 8004ec4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ec8:	9f03      	ldr	r7, [sp, #12]
 8004eca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ece:	f7fb fe4b 	bl	8000b68 <__aeabi_d2iz>
 8004ed2:	4604      	mov	r4, r0
 8004ed4:	f7fb fb2e 	bl	8000534 <__aeabi_i2d>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ee0:	f7fb f9da 	bl	8000298 <__aeabi_dsub>
 8004ee4:	3430      	adds	r4, #48	; 0x30
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004eee:	f807 4b01 	strb.w	r4, [r7], #1
 8004ef2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ef6:	f7fb fdf9 	bl	8000aec <__aeabi_dcmplt>
 8004efa:	2800      	cmp	r0, #0
 8004efc:	d174      	bne.n	8004fe8 <_dtoa_r+0x648>
 8004efe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f02:	4912      	ldr	r1, [pc, #72]	; (8004f4c <_dtoa_r+0x5ac>)
 8004f04:	2000      	movs	r0, #0
 8004f06:	f7fb f9c7 	bl	8000298 <__aeabi_dsub>
 8004f0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f0e:	f7fb fded 	bl	8000aec <__aeabi_dcmplt>
 8004f12:	2800      	cmp	r0, #0
 8004f14:	f040 80b7 	bne.w	8005086 <_dtoa_r+0x6e6>
 8004f18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f1a:	429f      	cmp	r7, r3
 8004f1c:	f43f af7a 	beq.w	8004e14 <_dtoa_r+0x474>
 8004f20:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f24:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <_dtoa_r+0x5b0>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	f7fb fb6e 	bl	8000608 <__aeabi_dmul>
 8004f2c:	4b08      	ldr	r3, [pc, #32]	; (8004f50 <_dtoa_r+0x5b0>)
 8004f2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f32:	2200      	movs	r2, #0
 8004f34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f38:	f7fb fb66 	bl	8000608 <__aeabi_dmul>
 8004f3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f40:	e7c3      	b.n	8004eca <_dtoa_r+0x52a>
 8004f42:	bf00      	nop
 8004f44:	08007aa0 	.word	0x08007aa0
 8004f48:	08007a78 	.word	0x08007a78
 8004f4c:	3ff00000 	.word	0x3ff00000
 8004f50:	40240000 	.word	0x40240000
 8004f54:	401c0000 	.word	0x401c0000
 8004f58:	40140000 	.word	0x40140000
 8004f5c:	3fe00000 	.word	0x3fe00000
 8004f60:	4630      	mov	r0, r6
 8004f62:	4639      	mov	r1, r7
 8004f64:	f7fb fb50 	bl	8000608 <__aeabi_dmul>
 8004f68:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f6e:	9c03      	ldr	r4, [sp, #12]
 8004f70:	9314      	str	r3, [sp, #80]	; 0x50
 8004f72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f76:	f7fb fdf7 	bl	8000b68 <__aeabi_d2iz>
 8004f7a:	9015      	str	r0, [sp, #84]	; 0x54
 8004f7c:	f7fb fada 	bl	8000534 <__aeabi_i2d>
 8004f80:	4602      	mov	r2, r0
 8004f82:	460b      	mov	r3, r1
 8004f84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f88:	f7fb f986 	bl	8000298 <__aeabi_dsub>
 8004f8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f8e:	3330      	adds	r3, #48	; 0x30
 8004f90:	f804 3b01 	strb.w	r3, [r4], #1
 8004f94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f96:	429c      	cmp	r4, r3
 8004f98:	4606      	mov	r6, r0
 8004f9a:	460f      	mov	r7, r1
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	d124      	bne.n	8004fec <_dtoa_r+0x64c>
 8004fa2:	4ba4      	ldr	r3, [pc, #656]	; (8005234 <_dtoa_r+0x894>)
 8004fa4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004fa8:	f7fb f978 	bl	800029c <__adddf3>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4630      	mov	r0, r6
 8004fb2:	4639      	mov	r1, r7
 8004fb4:	f7fb fdb8 	bl	8000b28 <__aeabi_dcmpgt>
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	d163      	bne.n	8005084 <_dtoa_r+0x6e4>
 8004fbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004fc0:	499c      	ldr	r1, [pc, #624]	; (8005234 <_dtoa_r+0x894>)
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	f7fb f968 	bl	8000298 <__aeabi_dsub>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	4630      	mov	r0, r6
 8004fce:	4639      	mov	r1, r7
 8004fd0:	f7fb fd8c 	bl	8000aec <__aeabi_dcmplt>
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	f43f af1d 	beq.w	8004e14 <_dtoa_r+0x474>
 8004fda:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004fdc:	1e7b      	subs	r3, r7, #1
 8004fde:	9314      	str	r3, [sp, #80]	; 0x50
 8004fe0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004fe4:	2b30      	cmp	r3, #48	; 0x30
 8004fe6:	d0f8      	beq.n	8004fda <_dtoa_r+0x63a>
 8004fe8:	46c2      	mov	sl, r8
 8004fea:	e03b      	b.n	8005064 <_dtoa_r+0x6c4>
 8004fec:	4b92      	ldr	r3, [pc, #584]	; (8005238 <_dtoa_r+0x898>)
 8004fee:	f7fb fb0b 	bl	8000608 <__aeabi_dmul>
 8004ff2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ff6:	e7bc      	b.n	8004f72 <_dtoa_r+0x5d2>
 8004ff8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004ffc:	9f03      	ldr	r7, [sp, #12]
 8004ffe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005002:	4640      	mov	r0, r8
 8005004:	4649      	mov	r1, r9
 8005006:	f7fb fc29 	bl	800085c <__aeabi_ddiv>
 800500a:	f7fb fdad 	bl	8000b68 <__aeabi_d2iz>
 800500e:	4604      	mov	r4, r0
 8005010:	f7fb fa90 	bl	8000534 <__aeabi_i2d>
 8005014:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005018:	f7fb faf6 	bl	8000608 <__aeabi_dmul>
 800501c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4640      	mov	r0, r8
 8005026:	4649      	mov	r1, r9
 8005028:	f7fb f936 	bl	8000298 <__aeabi_dsub>
 800502c:	f807 6b01 	strb.w	r6, [r7], #1
 8005030:	9e03      	ldr	r6, [sp, #12]
 8005032:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005036:	1bbe      	subs	r6, r7, r6
 8005038:	45b4      	cmp	ip, r6
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	d136      	bne.n	80050ae <_dtoa_r+0x70e>
 8005040:	f7fb f92c 	bl	800029c <__adddf3>
 8005044:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005048:	4680      	mov	r8, r0
 800504a:	4689      	mov	r9, r1
 800504c:	f7fb fd6c 	bl	8000b28 <__aeabi_dcmpgt>
 8005050:	bb58      	cbnz	r0, 80050aa <_dtoa_r+0x70a>
 8005052:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005056:	4640      	mov	r0, r8
 8005058:	4649      	mov	r1, r9
 800505a:	f7fb fd3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800505e:	b108      	cbz	r0, 8005064 <_dtoa_r+0x6c4>
 8005060:	07e1      	lsls	r1, r4, #31
 8005062:	d422      	bmi.n	80050aa <_dtoa_r+0x70a>
 8005064:	4628      	mov	r0, r5
 8005066:	4659      	mov	r1, fp
 8005068:	f000 fe60 	bl	8005d2c <_Bfree>
 800506c:	2300      	movs	r3, #0
 800506e:	703b      	strb	r3, [r7, #0]
 8005070:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005072:	f10a 0001 	add.w	r0, sl, #1
 8005076:	6018      	str	r0, [r3, #0]
 8005078:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800507a:	2b00      	cmp	r3, #0
 800507c:	f43f acdd 	beq.w	8004a3a <_dtoa_r+0x9a>
 8005080:	601f      	str	r7, [r3, #0]
 8005082:	e4da      	b.n	8004a3a <_dtoa_r+0x9a>
 8005084:	4627      	mov	r7, r4
 8005086:	463b      	mov	r3, r7
 8005088:	461f      	mov	r7, r3
 800508a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800508e:	2a39      	cmp	r2, #57	; 0x39
 8005090:	d107      	bne.n	80050a2 <_dtoa_r+0x702>
 8005092:	9a03      	ldr	r2, [sp, #12]
 8005094:	429a      	cmp	r2, r3
 8005096:	d1f7      	bne.n	8005088 <_dtoa_r+0x6e8>
 8005098:	9903      	ldr	r1, [sp, #12]
 800509a:	2230      	movs	r2, #48	; 0x30
 800509c:	f108 0801 	add.w	r8, r8, #1
 80050a0:	700a      	strb	r2, [r1, #0]
 80050a2:	781a      	ldrb	r2, [r3, #0]
 80050a4:	3201      	adds	r2, #1
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	e79e      	b.n	8004fe8 <_dtoa_r+0x648>
 80050aa:	46d0      	mov	r8, sl
 80050ac:	e7eb      	b.n	8005086 <_dtoa_r+0x6e6>
 80050ae:	4b62      	ldr	r3, [pc, #392]	; (8005238 <_dtoa_r+0x898>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	f7fb faa9 	bl	8000608 <__aeabi_dmul>
 80050b6:	2200      	movs	r2, #0
 80050b8:	2300      	movs	r3, #0
 80050ba:	4680      	mov	r8, r0
 80050bc:	4689      	mov	r9, r1
 80050be:	f7fb fd0b 	bl	8000ad8 <__aeabi_dcmpeq>
 80050c2:	2800      	cmp	r0, #0
 80050c4:	d09b      	beq.n	8004ffe <_dtoa_r+0x65e>
 80050c6:	e7cd      	b.n	8005064 <_dtoa_r+0x6c4>
 80050c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050ca:	2a00      	cmp	r2, #0
 80050cc:	f000 80d0 	beq.w	8005270 <_dtoa_r+0x8d0>
 80050d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80050d2:	2a01      	cmp	r2, #1
 80050d4:	f300 80b2 	bgt.w	800523c <_dtoa_r+0x89c>
 80050d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80050da:	2a00      	cmp	r2, #0
 80050dc:	f000 80a6 	beq.w	800522c <_dtoa_r+0x88c>
 80050e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80050e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80050e6:	9f06      	ldr	r7, [sp, #24]
 80050e8:	9a06      	ldr	r2, [sp, #24]
 80050ea:	441a      	add	r2, r3
 80050ec:	9206      	str	r2, [sp, #24]
 80050ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050f0:	2101      	movs	r1, #1
 80050f2:	441a      	add	r2, r3
 80050f4:	4628      	mov	r0, r5
 80050f6:	9209      	str	r2, [sp, #36]	; 0x24
 80050f8:	f000 ff18 	bl	8005f2c <__i2b>
 80050fc:	4606      	mov	r6, r0
 80050fe:	2f00      	cmp	r7, #0
 8005100:	dd0c      	ble.n	800511c <_dtoa_r+0x77c>
 8005102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005104:	2b00      	cmp	r3, #0
 8005106:	dd09      	ble.n	800511c <_dtoa_r+0x77c>
 8005108:	42bb      	cmp	r3, r7
 800510a:	9a06      	ldr	r2, [sp, #24]
 800510c:	bfa8      	it	ge
 800510e:	463b      	movge	r3, r7
 8005110:	1ad2      	subs	r2, r2, r3
 8005112:	9206      	str	r2, [sp, #24]
 8005114:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005116:	1aff      	subs	r7, r7, r3
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	9309      	str	r3, [sp, #36]	; 0x24
 800511c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800511e:	b1f3      	cbz	r3, 800515e <_dtoa_r+0x7be>
 8005120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 80a8 	beq.w	8005278 <_dtoa_r+0x8d8>
 8005128:	2c00      	cmp	r4, #0
 800512a:	dd10      	ble.n	800514e <_dtoa_r+0x7ae>
 800512c:	4631      	mov	r1, r6
 800512e:	4622      	mov	r2, r4
 8005130:	4628      	mov	r0, r5
 8005132:	f000 ffb9 	bl	80060a8 <__pow5mult>
 8005136:	465a      	mov	r2, fp
 8005138:	4601      	mov	r1, r0
 800513a:	4606      	mov	r6, r0
 800513c:	4628      	mov	r0, r5
 800513e:	f000 ff0b 	bl	8005f58 <__multiply>
 8005142:	4659      	mov	r1, fp
 8005144:	4680      	mov	r8, r0
 8005146:	4628      	mov	r0, r5
 8005148:	f000 fdf0 	bl	8005d2c <_Bfree>
 800514c:	46c3      	mov	fp, r8
 800514e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005150:	1b1a      	subs	r2, r3, r4
 8005152:	d004      	beq.n	800515e <_dtoa_r+0x7be>
 8005154:	4659      	mov	r1, fp
 8005156:	4628      	mov	r0, r5
 8005158:	f000 ffa6 	bl	80060a8 <__pow5mult>
 800515c:	4683      	mov	fp, r0
 800515e:	2101      	movs	r1, #1
 8005160:	4628      	mov	r0, r5
 8005162:	f000 fee3 	bl	8005f2c <__i2b>
 8005166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005168:	2b00      	cmp	r3, #0
 800516a:	4604      	mov	r4, r0
 800516c:	f340 8086 	ble.w	800527c <_dtoa_r+0x8dc>
 8005170:	461a      	mov	r2, r3
 8005172:	4601      	mov	r1, r0
 8005174:	4628      	mov	r0, r5
 8005176:	f000 ff97 	bl	80060a8 <__pow5mult>
 800517a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800517c:	2b01      	cmp	r3, #1
 800517e:	4604      	mov	r4, r0
 8005180:	dd7f      	ble.n	8005282 <_dtoa_r+0x8e2>
 8005182:	f04f 0800 	mov.w	r8, #0
 8005186:	6923      	ldr	r3, [r4, #16]
 8005188:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800518c:	6918      	ldr	r0, [r3, #16]
 800518e:	f000 fe7f 	bl	8005e90 <__hi0bits>
 8005192:	f1c0 0020 	rsb	r0, r0, #32
 8005196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005198:	4418      	add	r0, r3
 800519a:	f010 001f 	ands.w	r0, r0, #31
 800519e:	f000 8092 	beq.w	80052c6 <_dtoa_r+0x926>
 80051a2:	f1c0 0320 	rsb	r3, r0, #32
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	f340 808a 	ble.w	80052c0 <_dtoa_r+0x920>
 80051ac:	f1c0 001c 	rsb	r0, r0, #28
 80051b0:	9b06      	ldr	r3, [sp, #24]
 80051b2:	4403      	add	r3, r0
 80051b4:	9306      	str	r3, [sp, #24]
 80051b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051b8:	4403      	add	r3, r0
 80051ba:	4407      	add	r7, r0
 80051bc:	9309      	str	r3, [sp, #36]	; 0x24
 80051be:	9b06      	ldr	r3, [sp, #24]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	dd05      	ble.n	80051d0 <_dtoa_r+0x830>
 80051c4:	4659      	mov	r1, fp
 80051c6:	461a      	mov	r2, r3
 80051c8:	4628      	mov	r0, r5
 80051ca:	f000 ffc7 	bl	800615c <__lshift>
 80051ce:	4683      	mov	fp, r0
 80051d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	dd05      	ble.n	80051e2 <_dtoa_r+0x842>
 80051d6:	4621      	mov	r1, r4
 80051d8:	461a      	mov	r2, r3
 80051da:	4628      	mov	r0, r5
 80051dc:	f000 ffbe 	bl	800615c <__lshift>
 80051e0:	4604      	mov	r4, r0
 80051e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d070      	beq.n	80052ca <_dtoa_r+0x92a>
 80051e8:	4621      	mov	r1, r4
 80051ea:	4658      	mov	r0, fp
 80051ec:	f001 f826 	bl	800623c <__mcmp>
 80051f0:	2800      	cmp	r0, #0
 80051f2:	da6a      	bge.n	80052ca <_dtoa_r+0x92a>
 80051f4:	2300      	movs	r3, #0
 80051f6:	4659      	mov	r1, fp
 80051f8:	220a      	movs	r2, #10
 80051fa:	4628      	mov	r0, r5
 80051fc:	f000 fdb8 	bl	8005d70 <__multadd>
 8005200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005202:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005206:	4683      	mov	fp, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 8194 	beq.w	8005536 <_dtoa_r+0xb96>
 800520e:	4631      	mov	r1, r6
 8005210:	2300      	movs	r3, #0
 8005212:	220a      	movs	r2, #10
 8005214:	4628      	mov	r0, r5
 8005216:	f000 fdab 	bl	8005d70 <__multadd>
 800521a:	f1b9 0f00 	cmp.w	r9, #0
 800521e:	4606      	mov	r6, r0
 8005220:	f300 8093 	bgt.w	800534a <_dtoa_r+0x9aa>
 8005224:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005226:	2b02      	cmp	r3, #2
 8005228:	dc57      	bgt.n	80052da <_dtoa_r+0x93a>
 800522a:	e08e      	b.n	800534a <_dtoa_r+0x9aa>
 800522c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800522e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005232:	e757      	b.n	80050e4 <_dtoa_r+0x744>
 8005234:	3fe00000 	.word	0x3fe00000
 8005238:	40240000 	.word	0x40240000
 800523c:	9b08      	ldr	r3, [sp, #32]
 800523e:	1e5c      	subs	r4, r3, #1
 8005240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005242:	42a3      	cmp	r3, r4
 8005244:	bfbf      	itttt	lt
 8005246:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005248:	940a      	strlt	r4, [sp, #40]	; 0x28
 800524a:	1ae2      	sublt	r2, r4, r3
 800524c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800524e:	bfb6      	itet	lt
 8005250:	189b      	addlt	r3, r3, r2
 8005252:	1b1c      	subge	r4, r3, r4
 8005254:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005256:	9b08      	ldr	r3, [sp, #32]
 8005258:	bfb8      	it	lt
 800525a:	2400      	movlt	r4, #0
 800525c:	2b00      	cmp	r3, #0
 800525e:	bfb9      	ittee	lt
 8005260:	9b06      	ldrlt	r3, [sp, #24]
 8005262:	9a08      	ldrlt	r2, [sp, #32]
 8005264:	9f06      	ldrge	r7, [sp, #24]
 8005266:	9b08      	ldrge	r3, [sp, #32]
 8005268:	bfbc      	itt	lt
 800526a:	1a9f      	sublt	r7, r3, r2
 800526c:	2300      	movlt	r3, #0
 800526e:	e73b      	b.n	80050e8 <_dtoa_r+0x748>
 8005270:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005272:	9f06      	ldr	r7, [sp, #24]
 8005274:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005276:	e742      	b.n	80050fe <_dtoa_r+0x75e>
 8005278:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800527a:	e76b      	b.n	8005154 <_dtoa_r+0x7b4>
 800527c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800527e:	2b01      	cmp	r3, #1
 8005280:	dc19      	bgt.n	80052b6 <_dtoa_r+0x916>
 8005282:	9b04      	ldr	r3, [sp, #16]
 8005284:	b9bb      	cbnz	r3, 80052b6 <_dtoa_r+0x916>
 8005286:	9b05      	ldr	r3, [sp, #20]
 8005288:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800528c:	b99b      	cbnz	r3, 80052b6 <_dtoa_r+0x916>
 800528e:	9b05      	ldr	r3, [sp, #20]
 8005290:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005294:	0d1b      	lsrs	r3, r3, #20
 8005296:	051b      	lsls	r3, r3, #20
 8005298:	b183      	cbz	r3, 80052bc <_dtoa_r+0x91c>
 800529a:	9b06      	ldr	r3, [sp, #24]
 800529c:	3301      	adds	r3, #1
 800529e:	9306      	str	r3, [sp, #24]
 80052a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052a2:	3301      	adds	r3, #1
 80052a4:	9309      	str	r3, [sp, #36]	; 0x24
 80052a6:	f04f 0801 	mov.w	r8, #1
 80052aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f47f af6a 	bne.w	8005186 <_dtoa_r+0x7e6>
 80052b2:	2001      	movs	r0, #1
 80052b4:	e76f      	b.n	8005196 <_dtoa_r+0x7f6>
 80052b6:	f04f 0800 	mov.w	r8, #0
 80052ba:	e7f6      	b.n	80052aa <_dtoa_r+0x90a>
 80052bc:	4698      	mov	r8, r3
 80052be:	e7f4      	b.n	80052aa <_dtoa_r+0x90a>
 80052c0:	f43f af7d 	beq.w	80051be <_dtoa_r+0x81e>
 80052c4:	4618      	mov	r0, r3
 80052c6:	301c      	adds	r0, #28
 80052c8:	e772      	b.n	80051b0 <_dtoa_r+0x810>
 80052ca:	9b08      	ldr	r3, [sp, #32]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	dc36      	bgt.n	800533e <_dtoa_r+0x99e>
 80052d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	dd33      	ble.n	800533e <_dtoa_r+0x99e>
 80052d6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052da:	f1b9 0f00 	cmp.w	r9, #0
 80052de:	d10d      	bne.n	80052fc <_dtoa_r+0x95c>
 80052e0:	4621      	mov	r1, r4
 80052e2:	464b      	mov	r3, r9
 80052e4:	2205      	movs	r2, #5
 80052e6:	4628      	mov	r0, r5
 80052e8:	f000 fd42 	bl	8005d70 <__multadd>
 80052ec:	4601      	mov	r1, r0
 80052ee:	4604      	mov	r4, r0
 80052f0:	4658      	mov	r0, fp
 80052f2:	f000 ffa3 	bl	800623c <__mcmp>
 80052f6:	2800      	cmp	r0, #0
 80052f8:	f73f adb8 	bgt.w	8004e6c <_dtoa_r+0x4cc>
 80052fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80052fe:	9f03      	ldr	r7, [sp, #12]
 8005300:	ea6f 0a03 	mvn.w	sl, r3
 8005304:	f04f 0800 	mov.w	r8, #0
 8005308:	4621      	mov	r1, r4
 800530a:	4628      	mov	r0, r5
 800530c:	f000 fd0e 	bl	8005d2c <_Bfree>
 8005310:	2e00      	cmp	r6, #0
 8005312:	f43f aea7 	beq.w	8005064 <_dtoa_r+0x6c4>
 8005316:	f1b8 0f00 	cmp.w	r8, #0
 800531a:	d005      	beq.n	8005328 <_dtoa_r+0x988>
 800531c:	45b0      	cmp	r8, r6
 800531e:	d003      	beq.n	8005328 <_dtoa_r+0x988>
 8005320:	4641      	mov	r1, r8
 8005322:	4628      	mov	r0, r5
 8005324:	f000 fd02 	bl	8005d2c <_Bfree>
 8005328:	4631      	mov	r1, r6
 800532a:	4628      	mov	r0, r5
 800532c:	f000 fcfe 	bl	8005d2c <_Bfree>
 8005330:	e698      	b.n	8005064 <_dtoa_r+0x6c4>
 8005332:	2400      	movs	r4, #0
 8005334:	4626      	mov	r6, r4
 8005336:	e7e1      	b.n	80052fc <_dtoa_r+0x95c>
 8005338:	46c2      	mov	sl, r8
 800533a:	4626      	mov	r6, r4
 800533c:	e596      	b.n	8004e6c <_dtoa_r+0x4cc>
 800533e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005340:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 80fd 	beq.w	8005544 <_dtoa_r+0xba4>
 800534a:	2f00      	cmp	r7, #0
 800534c:	dd05      	ble.n	800535a <_dtoa_r+0x9ba>
 800534e:	4631      	mov	r1, r6
 8005350:	463a      	mov	r2, r7
 8005352:	4628      	mov	r0, r5
 8005354:	f000 ff02 	bl	800615c <__lshift>
 8005358:	4606      	mov	r6, r0
 800535a:	f1b8 0f00 	cmp.w	r8, #0
 800535e:	d05c      	beq.n	800541a <_dtoa_r+0xa7a>
 8005360:	6871      	ldr	r1, [r6, #4]
 8005362:	4628      	mov	r0, r5
 8005364:	f000 fca2 	bl	8005cac <_Balloc>
 8005368:	4607      	mov	r7, r0
 800536a:	b928      	cbnz	r0, 8005378 <_dtoa_r+0x9d8>
 800536c:	4b80      	ldr	r3, [pc, #512]	; (8005570 <_dtoa_r+0xbd0>)
 800536e:	4602      	mov	r2, r0
 8005370:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005374:	f7ff bb28 	b.w	80049c8 <_dtoa_r+0x28>
 8005378:	6932      	ldr	r2, [r6, #16]
 800537a:	3202      	adds	r2, #2
 800537c:	0092      	lsls	r2, r2, #2
 800537e:	f106 010c 	add.w	r1, r6, #12
 8005382:	300c      	adds	r0, #12
 8005384:	f000 fc84 	bl	8005c90 <memcpy>
 8005388:	2201      	movs	r2, #1
 800538a:	4639      	mov	r1, r7
 800538c:	4628      	mov	r0, r5
 800538e:	f000 fee5 	bl	800615c <__lshift>
 8005392:	9b03      	ldr	r3, [sp, #12]
 8005394:	3301      	adds	r3, #1
 8005396:	9308      	str	r3, [sp, #32]
 8005398:	9b03      	ldr	r3, [sp, #12]
 800539a:	444b      	add	r3, r9
 800539c:	930a      	str	r3, [sp, #40]	; 0x28
 800539e:	9b04      	ldr	r3, [sp, #16]
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	46b0      	mov	r8, r6
 80053a6:	9309      	str	r3, [sp, #36]	; 0x24
 80053a8:	4606      	mov	r6, r0
 80053aa:	9b08      	ldr	r3, [sp, #32]
 80053ac:	4621      	mov	r1, r4
 80053ae:	3b01      	subs	r3, #1
 80053b0:	4658      	mov	r0, fp
 80053b2:	9304      	str	r3, [sp, #16]
 80053b4:	f7ff fa6c 	bl	8004890 <quorem>
 80053b8:	4603      	mov	r3, r0
 80053ba:	3330      	adds	r3, #48	; 0x30
 80053bc:	9006      	str	r0, [sp, #24]
 80053be:	4641      	mov	r1, r8
 80053c0:	4658      	mov	r0, fp
 80053c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80053c4:	f000 ff3a 	bl	800623c <__mcmp>
 80053c8:	4632      	mov	r2, r6
 80053ca:	4681      	mov	r9, r0
 80053cc:	4621      	mov	r1, r4
 80053ce:	4628      	mov	r0, r5
 80053d0:	f000 ff50 	bl	8006274 <__mdiff>
 80053d4:	68c2      	ldr	r2, [r0, #12]
 80053d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053d8:	4607      	mov	r7, r0
 80053da:	bb02      	cbnz	r2, 800541e <_dtoa_r+0xa7e>
 80053dc:	4601      	mov	r1, r0
 80053de:	4658      	mov	r0, fp
 80053e0:	f000 ff2c 	bl	800623c <__mcmp>
 80053e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053e6:	4602      	mov	r2, r0
 80053e8:	4639      	mov	r1, r7
 80053ea:	4628      	mov	r0, r5
 80053ec:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80053f0:	f000 fc9c 	bl	8005d2c <_Bfree>
 80053f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053f8:	9f08      	ldr	r7, [sp, #32]
 80053fa:	ea43 0102 	orr.w	r1, r3, r2
 80053fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005400:	430b      	orrs	r3, r1
 8005402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005404:	d10d      	bne.n	8005422 <_dtoa_r+0xa82>
 8005406:	2b39      	cmp	r3, #57	; 0x39
 8005408:	d029      	beq.n	800545e <_dtoa_r+0xabe>
 800540a:	f1b9 0f00 	cmp.w	r9, #0
 800540e:	dd01      	ble.n	8005414 <_dtoa_r+0xa74>
 8005410:	9b06      	ldr	r3, [sp, #24]
 8005412:	3331      	adds	r3, #49	; 0x31
 8005414:	9a04      	ldr	r2, [sp, #16]
 8005416:	7013      	strb	r3, [r2, #0]
 8005418:	e776      	b.n	8005308 <_dtoa_r+0x968>
 800541a:	4630      	mov	r0, r6
 800541c:	e7b9      	b.n	8005392 <_dtoa_r+0x9f2>
 800541e:	2201      	movs	r2, #1
 8005420:	e7e2      	b.n	80053e8 <_dtoa_r+0xa48>
 8005422:	f1b9 0f00 	cmp.w	r9, #0
 8005426:	db06      	blt.n	8005436 <_dtoa_r+0xa96>
 8005428:	9922      	ldr	r1, [sp, #136]	; 0x88
 800542a:	ea41 0909 	orr.w	r9, r1, r9
 800542e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005430:	ea59 0101 	orrs.w	r1, r9, r1
 8005434:	d120      	bne.n	8005478 <_dtoa_r+0xad8>
 8005436:	2a00      	cmp	r2, #0
 8005438:	ddec      	ble.n	8005414 <_dtoa_r+0xa74>
 800543a:	4659      	mov	r1, fp
 800543c:	2201      	movs	r2, #1
 800543e:	4628      	mov	r0, r5
 8005440:	9308      	str	r3, [sp, #32]
 8005442:	f000 fe8b 	bl	800615c <__lshift>
 8005446:	4621      	mov	r1, r4
 8005448:	4683      	mov	fp, r0
 800544a:	f000 fef7 	bl	800623c <__mcmp>
 800544e:	2800      	cmp	r0, #0
 8005450:	9b08      	ldr	r3, [sp, #32]
 8005452:	dc02      	bgt.n	800545a <_dtoa_r+0xaba>
 8005454:	d1de      	bne.n	8005414 <_dtoa_r+0xa74>
 8005456:	07da      	lsls	r2, r3, #31
 8005458:	d5dc      	bpl.n	8005414 <_dtoa_r+0xa74>
 800545a:	2b39      	cmp	r3, #57	; 0x39
 800545c:	d1d8      	bne.n	8005410 <_dtoa_r+0xa70>
 800545e:	9a04      	ldr	r2, [sp, #16]
 8005460:	2339      	movs	r3, #57	; 0x39
 8005462:	7013      	strb	r3, [r2, #0]
 8005464:	463b      	mov	r3, r7
 8005466:	461f      	mov	r7, r3
 8005468:	3b01      	subs	r3, #1
 800546a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800546e:	2a39      	cmp	r2, #57	; 0x39
 8005470:	d050      	beq.n	8005514 <_dtoa_r+0xb74>
 8005472:	3201      	adds	r2, #1
 8005474:	701a      	strb	r2, [r3, #0]
 8005476:	e747      	b.n	8005308 <_dtoa_r+0x968>
 8005478:	2a00      	cmp	r2, #0
 800547a:	dd03      	ble.n	8005484 <_dtoa_r+0xae4>
 800547c:	2b39      	cmp	r3, #57	; 0x39
 800547e:	d0ee      	beq.n	800545e <_dtoa_r+0xabe>
 8005480:	3301      	adds	r3, #1
 8005482:	e7c7      	b.n	8005414 <_dtoa_r+0xa74>
 8005484:	9a08      	ldr	r2, [sp, #32]
 8005486:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005488:	f802 3c01 	strb.w	r3, [r2, #-1]
 800548c:	428a      	cmp	r2, r1
 800548e:	d02a      	beq.n	80054e6 <_dtoa_r+0xb46>
 8005490:	4659      	mov	r1, fp
 8005492:	2300      	movs	r3, #0
 8005494:	220a      	movs	r2, #10
 8005496:	4628      	mov	r0, r5
 8005498:	f000 fc6a 	bl	8005d70 <__multadd>
 800549c:	45b0      	cmp	r8, r6
 800549e:	4683      	mov	fp, r0
 80054a0:	f04f 0300 	mov.w	r3, #0
 80054a4:	f04f 020a 	mov.w	r2, #10
 80054a8:	4641      	mov	r1, r8
 80054aa:	4628      	mov	r0, r5
 80054ac:	d107      	bne.n	80054be <_dtoa_r+0xb1e>
 80054ae:	f000 fc5f 	bl	8005d70 <__multadd>
 80054b2:	4680      	mov	r8, r0
 80054b4:	4606      	mov	r6, r0
 80054b6:	9b08      	ldr	r3, [sp, #32]
 80054b8:	3301      	adds	r3, #1
 80054ba:	9308      	str	r3, [sp, #32]
 80054bc:	e775      	b.n	80053aa <_dtoa_r+0xa0a>
 80054be:	f000 fc57 	bl	8005d70 <__multadd>
 80054c2:	4631      	mov	r1, r6
 80054c4:	4680      	mov	r8, r0
 80054c6:	2300      	movs	r3, #0
 80054c8:	220a      	movs	r2, #10
 80054ca:	4628      	mov	r0, r5
 80054cc:	f000 fc50 	bl	8005d70 <__multadd>
 80054d0:	4606      	mov	r6, r0
 80054d2:	e7f0      	b.n	80054b6 <_dtoa_r+0xb16>
 80054d4:	f1b9 0f00 	cmp.w	r9, #0
 80054d8:	9a03      	ldr	r2, [sp, #12]
 80054da:	bfcc      	ite	gt
 80054dc:	464f      	movgt	r7, r9
 80054de:	2701      	movle	r7, #1
 80054e0:	4417      	add	r7, r2
 80054e2:	f04f 0800 	mov.w	r8, #0
 80054e6:	4659      	mov	r1, fp
 80054e8:	2201      	movs	r2, #1
 80054ea:	4628      	mov	r0, r5
 80054ec:	9308      	str	r3, [sp, #32]
 80054ee:	f000 fe35 	bl	800615c <__lshift>
 80054f2:	4621      	mov	r1, r4
 80054f4:	4683      	mov	fp, r0
 80054f6:	f000 fea1 	bl	800623c <__mcmp>
 80054fa:	2800      	cmp	r0, #0
 80054fc:	dcb2      	bgt.n	8005464 <_dtoa_r+0xac4>
 80054fe:	d102      	bne.n	8005506 <_dtoa_r+0xb66>
 8005500:	9b08      	ldr	r3, [sp, #32]
 8005502:	07db      	lsls	r3, r3, #31
 8005504:	d4ae      	bmi.n	8005464 <_dtoa_r+0xac4>
 8005506:	463b      	mov	r3, r7
 8005508:	461f      	mov	r7, r3
 800550a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800550e:	2a30      	cmp	r2, #48	; 0x30
 8005510:	d0fa      	beq.n	8005508 <_dtoa_r+0xb68>
 8005512:	e6f9      	b.n	8005308 <_dtoa_r+0x968>
 8005514:	9a03      	ldr	r2, [sp, #12]
 8005516:	429a      	cmp	r2, r3
 8005518:	d1a5      	bne.n	8005466 <_dtoa_r+0xac6>
 800551a:	f10a 0a01 	add.w	sl, sl, #1
 800551e:	2331      	movs	r3, #49	; 0x31
 8005520:	e779      	b.n	8005416 <_dtoa_r+0xa76>
 8005522:	4b14      	ldr	r3, [pc, #80]	; (8005574 <_dtoa_r+0xbd4>)
 8005524:	f7ff baa7 	b.w	8004a76 <_dtoa_r+0xd6>
 8005528:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800552a:	2b00      	cmp	r3, #0
 800552c:	f47f aa80 	bne.w	8004a30 <_dtoa_r+0x90>
 8005530:	4b11      	ldr	r3, [pc, #68]	; (8005578 <_dtoa_r+0xbd8>)
 8005532:	f7ff baa0 	b.w	8004a76 <_dtoa_r+0xd6>
 8005536:	f1b9 0f00 	cmp.w	r9, #0
 800553a:	dc03      	bgt.n	8005544 <_dtoa_r+0xba4>
 800553c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800553e:	2b02      	cmp	r3, #2
 8005540:	f73f aecb 	bgt.w	80052da <_dtoa_r+0x93a>
 8005544:	9f03      	ldr	r7, [sp, #12]
 8005546:	4621      	mov	r1, r4
 8005548:	4658      	mov	r0, fp
 800554a:	f7ff f9a1 	bl	8004890 <quorem>
 800554e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005552:	f807 3b01 	strb.w	r3, [r7], #1
 8005556:	9a03      	ldr	r2, [sp, #12]
 8005558:	1aba      	subs	r2, r7, r2
 800555a:	4591      	cmp	r9, r2
 800555c:	ddba      	ble.n	80054d4 <_dtoa_r+0xb34>
 800555e:	4659      	mov	r1, fp
 8005560:	2300      	movs	r3, #0
 8005562:	220a      	movs	r2, #10
 8005564:	4628      	mov	r0, r5
 8005566:	f000 fc03 	bl	8005d70 <__multadd>
 800556a:	4683      	mov	fp, r0
 800556c:	e7eb      	b.n	8005546 <_dtoa_r+0xba6>
 800556e:	bf00      	nop
 8005570:	08007990 	.word	0x08007990
 8005574:	08007790 	.word	0x08007790
 8005578:	08007911 	.word	0x08007911

0800557c <__errno>:
 800557c:	4b01      	ldr	r3, [pc, #4]	; (8005584 <__errno+0x8>)
 800557e:	6818      	ldr	r0, [r3, #0]
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	20000044 	.word	0x20000044

08005588 <rshift>:
 8005588:	6903      	ldr	r3, [r0, #16]
 800558a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800558e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005592:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005596:	f100 0414 	add.w	r4, r0, #20
 800559a:	dd45      	ble.n	8005628 <rshift+0xa0>
 800559c:	f011 011f 	ands.w	r1, r1, #31
 80055a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80055a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80055a8:	d10c      	bne.n	80055c4 <rshift+0x3c>
 80055aa:	f100 0710 	add.w	r7, r0, #16
 80055ae:	4629      	mov	r1, r5
 80055b0:	42b1      	cmp	r1, r6
 80055b2:	d334      	bcc.n	800561e <rshift+0x96>
 80055b4:	1a9b      	subs	r3, r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	1eea      	subs	r2, r5, #3
 80055ba:	4296      	cmp	r6, r2
 80055bc:	bf38      	it	cc
 80055be:	2300      	movcc	r3, #0
 80055c0:	4423      	add	r3, r4
 80055c2:	e015      	b.n	80055f0 <rshift+0x68>
 80055c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80055c8:	f1c1 0820 	rsb	r8, r1, #32
 80055cc:	40cf      	lsrs	r7, r1
 80055ce:	f105 0e04 	add.w	lr, r5, #4
 80055d2:	46a1      	mov	r9, r4
 80055d4:	4576      	cmp	r6, lr
 80055d6:	46f4      	mov	ip, lr
 80055d8:	d815      	bhi.n	8005606 <rshift+0x7e>
 80055da:	1a9a      	subs	r2, r3, r2
 80055dc:	0092      	lsls	r2, r2, #2
 80055de:	3a04      	subs	r2, #4
 80055e0:	3501      	adds	r5, #1
 80055e2:	42ae      	cmp	r6, r5
 80055e4:	bf38      	it	cc
 80055e6:	2200      	movcc	r2, #0
 80055e8:	18a3      	adds	r3, r4, r2
 80055ea:	50a7      	str	r7, [r4, r2]
 80055ec:	b107      	cbz	r7, 80055f0 <rshift+0x68>
 80055ee:	3304      	adds	r3, #4
 80055f0:	1b1a      	subs	r2, r3, r4
 80055f2:	42a3      	cmp	r3, r4
 80055f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80055f8:	bf08      	it	eq
 80055fa:	2300      	moveq	r3, #0
 80055fc:	6102      	str	r2, [r0, #16]
 80055fe:	bf08      	it	eq
 8005600:	6143      	streq	r3, [r0, #20]
 8005602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005606:	f8dc c000 	ldr.w	ip, [ip]
 800560a:	fa0c fc08 	lsl.w	ip, ip, r8
 800560e:	ea4c 0707 	orr.w	r7, ip, r7
 8005612:	f849 7b04 	str.w	r7, [r9], #4
 8005616:	f85e 7b04 	ldr.w	r7, [lr], #4
 800561a:	40cf      	lsrs	r7, r1
 800561c:	e7da      	b.n	80055d4 <rshift+0x4c>
 800561e:	f851 cb04 	ldr.w	ip, [r1], #4
 8005622:	f847 cf04 	str.w	ip, [r7, #4]!
 8005626:	e7c3      	b.n	80055b0 <rshift+0x28>
 8005628:	4623      	mov	r3, r4
 800562a:	e7e1      	b.n	80055f0 <rshift+0x68>

0800562c <__hexdig_fun>:
 800562c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005630:	2b09      	cmp	r3, #9
 8005632:	d802      	bhi.n	800563a <__hexdig_fun+0xe>
 8005634:	3820      	subs	r0, #32
 8005636:	b2c0      	uxtb	r0, r0
 8005638:	4770      	bx	lr
 800563a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800563e:	2b05      	cmp	r3, #5
 8005640:	d801      	bhi.n	8005646 <__hexdig_fun+0x1a>
 8005642:	3847      	subs	r0, #71	; 0x47
 8005644:	e7f7      	b.n	8005636 <__hexdig_fun+0xa>
 8005646:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800564a:	2b05      	cmp	r3, #5
 800564c:	d801      	bhi.n	8005652 <__hexdig_fun+0x26>
 800564e:	3827      	subs	r0, #39	; 0x27
 8005650:	e7f1      	b.n	8005636 <__hexdig_fun+0xa>
 8005652:	2000      	movs	r0, #0
 8005654:	4770      	bx	lr
	...

08005658 <__gethex>:
 8005658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565c:	b08b      	sub	sp, #44	; 0x2c
 800565e:	468b      	mov	fp, r1
 8005660:	9305      	str	r3, [sp, #20]
 8005662:	4bb2      	ldr	r3, [pc, #712]	; (800592c <__gethex+0x2d4>)
 8005664:	9002      	str	r0, [sp, #8]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	9303      	str	r3, [sp, #12]
 800566a:	4618      	mov	r0, r3
 800566c:	4690      	mov	r8, r2
 800566e:	f7fa fdb7 	bl	80001e0 <strlen>
 8005672:	9b03      	ldr	r3, [sp, #12]
 8005674:	f8db 2000 	ldr.w	r2, [fp]
 8005678:	4403      	add	r3, r0
 800567a:	4682      	mov	sl, r0
 800567c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005680:	9306      	str	r3, [sp, #24]
 8005682:	1c93      	adds	r3, r2, #2
 8005684:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005688:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800568c:	32fe      	adds	r2, #254	; 0xfe
 800568e:	18d1      	adds	r1, r2, r3
 8005690:	461f      	mov	r7, r3
 8005692:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005696:	9101      	str	r1, [sp, #4]
 8005698:	2830      	cmp	r0, #48	; 0x30
 800569a:	d0f8      	beq.n	800568e <__gethex+0x36>
 800569c:	f7ff ffc6 	bl	800562c <__hexdig_fun>
 80056a0:	4604      	mov	r4, r0
 80056a2:	2800      	cmp	r0, #0
 80056a4:	d13a      	bne.n	800571c <__gethex+0xc4>
 80056a6:	9903      	ldr	r1, [sp, #12]
 80056a8:	4652      	mov	r2, sl
 80056aa:	4638      	mov	r0, r7
 80056ac:	f001 fa16 	bl	8006adc <strncmp>
 80056b0:	4605      	mov	r5, r0
 80056b2:	2800      	cmp	r0, #0
 80056b4:	d166      	bne.n	8005784 <__gethex+0x12c>
 80056b6:	f817 000a 	ldrb.w	r0, [r7, sl]
 80056ba:	eb07 060a 	add.w	r6, r7, sl
 80056be:	f7ff ffb5 	bl	800562c <__hexdig_fun>
 80056c2:	2800      	cmp	r0, #0
 80056c4:	d060      	beq.n	8005788 <__gethex+0x130>
 80056c6:	4633      	mov	r3, r6
 80056c8:	7818      	ldrb	r0, [r3, #0]
 80056ca:	2830      	cmp	r0, #48	; 0x30
 80056cc:	461f      	mov	r7, r3
 80056ce:	f103 0301 	add.w	r3, r3, #1
 80056d2:	d0f9      	beq.n	80056c8 <__gethex+0x70>
 80056d4:	f7ff ffaa 	bl	800562c <__hexdig_fun>
 80056d8:	2301      	movs	r3, #1
 80056da:	fab0 f480 	clz	r4, r0
 80056de:	0964      	lsrs	r4, r4, #5
 80056e0:	4635      	mov	r5, r6
 80056e2:	9301      	str	r3, [sp, #4]
 80056e4:	463a      	mov	r2, r7
 80056e6:	4616      	mov	r6, r2
 80056e8:	3201      	adds	r2, #1
 80056ea:	7830      	ldrb	r0, [r6, #0]
 80056ec:	f7ff ff9e 	bl	800562c <__hexdig_fun>
 80056f0:	2800      	cmp	r0, #0
 80056f2:	d1f8      	bne.n	80056e6 <__gethex+0x8e>
 80056f4:	9903      	ldr	r1, [sp, #12]
 80056f6:	4652      	mov	r2, sl
 80056f8:	4630      	mov	r0, r6
 80056fa:	f001 f9ef 	bl	8006adc <strncmp>
 80056fe:	b980      	cbnz	r0, 8005722 <__gethex+0xca>
 8005700:	b94d      	cbnz	r5, 8005716 <__gethex+0xbe>
 8005702:	eb06 050a 	add.w	r5, r6, sl
 8005706:	462a      	mov	r2, r5
 8005708:	4616      	mov	r6, r2
 800570a:	3201      	adds	r2, #1
 800570c:	7830      	ldrb	r0, [r6, #0]
 800570e:	f7ff ff8d 	bl	800562c <__hexdig_fun>
 8005712:	2800      	cmp	r0, #0
 8005714:	d1f8      	bne.n	8005708 <__gethex+0xb0>
 8005716:	1bad      	subs	r5, r5, r6
 8005718:	00ad      	lsls	r5, r5, #2
 800571a:	e004      	b.n	8005726 <__gethex+0xce>
 800571c:	2400      	movs	r4, #0
 800571e:	4625      	mov	r5, r4
 8005720:	e7e0      	b.n	80056e4 <__gethex+0x8c>
 8005722:	2d00      	cmp	r5, #0
 8005724:	d1f7      	bne.n	8005716 <__gethex+0xbe>
 8005726:	7833      	ldrb	r3, [r6, #0]
 8005728:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800572c:	2b50      	cmp	r3, #80	; 0x50
 800572e:	d139      	bne.n	80057a4 <__gethex+0x14c>
 8005730:	7873      	ldrb	r3, [r6, #1]
 8005732:	2b2b      	cmp	r3, #43	; 0x2b
 8005734:	d02a      	beq.n	800578c <__gethex+0x134>
 8005736:	2b2d      	cmp	r3, #45	; 0x2d
 8005738:	d02c      	beq.n	8005794 <__gethex+0x13c>
 800573a:	1c71      	adds	r1, r6, #1
 800573c:	f04f 0900 	mov.w	r9, #0
 8005740:	7808      	ldrb	r0, [r1, #0]
 8005742:	f7ff ff73 	bl	800562c <__hexdig_fun>
 8005746:	1e43      	subs	r3, r0, #1
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b18      	cmp	r3, #24
 800574c:	d82a      	bhi.n	80057a4 <__gethex+0x14c>
 800574e:	f1a0 0210 	sub.w	r2, r0, #16
 8005752:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005756:	f7ff ff69 	bl	800562c <__hexdig_fun>
 800575a:	1e43      	subs	r3, r0, #1
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b18      	cmp	r3, #24
 8005760:	d91b      	bls.n	800579a <__gethex+0x142>
 8005762:	f1b9 0f00 	cmp.w	r9, #0
 8005766:	d000      	beq.n	800576a <__gethex+0x112>
 8005768:	4252      	negs	r2, r2
 800576a:	4415      	add	r5, r2
 800576c:	f8cb 1000 	str.w	r1, [fp]
 8005770:	b1d4      	cbz	r4, 80057a8 <__gethex+0x150>
 8005772:	9b01      	ldr	r3, [sp, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	bf14      	ite	ne
 8005778:	2700      	movne	r7, #0
 800577a:	2706      	moveq	r7, #6
 800577c:	4638      	mov	r0, r7
 800577e:	b00b      	add	sp, #44	; 0x2c
 8005780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005784:	463e      	mov	r6, r7
 8005786:	4625      	mov	r5, r4
 8005788:	2401      	movs	r4, #1
 800578a:	e7cc      	b.n	8005726 <__gethex+0xce>
 800578c:	f04f 0900 	mov.w	r9, #0
 8005790:	1cb1      	adds	r1, r6, #2
 8005792:	e7d5      	b.n	8005740 <__gethex+0xe8>
 8005794:	f04f 0901 	mov.w	r9, #1
 8005798:	e7fa      	b.n	8005790 <__gethex+0x138>
 800579a:	230a      	movs	r3, #10
 800579c:	fb03 0202 	mla	r2, r3, r2, r0
 80057a0:	3a10      	subs	r2, #16
 80057a2:	e7d6      	b.n	8005752 <__gethex+0xfa>
 80057a4:	4631      	mov	r1, r6
 80057a6:	e7e1      	b.n	800576c <__gethex+0x114>
 80057a8:	1bf3      	subs	r3, r6, r7
 80057aa:	3b01      	subs	r3, #1
 80057ac:	4621      	mov	r1, r4
 80057ae:	2b07      	cmp	r3, #7
 80057b0:	dc0a      	bgt.n	80057c8 <__gethex+0x170>
 80057b2:	9802      	ldr	r0, [sp, #8]
 80057b4:	f000 fa7a 	bl	8005cac <_Balloc>
 80057b8:	4604      	mov	r4, r0
 80057ba:	b940      	cbnz	r0, 80057ce <__gethex+0x176>
 80057bc:	4b5c      	ldr	r3, [pc, #368]	; (8005930 <__gethex+0x2d8>)
 80057be:	4602      	mov	r2, r0
 80057c0:	21de      	movs	r1, #222	; 0xde
 80057c2:	485c      	ldr	r0, [pc, #368]	; (8005934 <__gethex+0x2dc>)
 80057c4:	f001 f9ac 	bl	8006b20 <__assert_func>
 80057c8:	3101      	adds	r1, #1
 80057ca:	105b      	asrs	r3, r3, #1
 80057cc:	e7ef      	b.n	80057ae <__gethex+0x156>
 80057ce:	f100 0914 	add.w	r9, r0, #20
 80057d2:	f04f 0b00 	mov.w	fp, #0
 80057d6:	f1ca 0301 	rsb	r3, sl, #1
 80057da:	f8cd 9010 	str.w	r9, [sp, #16]
 80057de:	f8cd b004 	str.w	fp, [sp, #4]
 80057e2:	9308      	str	r3, [sp, #32]
 80057e4:	42b7      	cmp	r7, r6
 80057e6:	d33f      	bcc.n	8005868 <__gethex+0x210>
 80057e8:	9f04      	ldr	r7, [sp, #16]
 80057ea:	9b01      	ldr	r3, [sp, #4]
 80057ec:	f847 3b04 	str.w	r3, [r7], #4
 80057f0:	eba7 0709 	sub.w	r7, r7, r9
 80057f4:	10bf      	asrs	r7, r7, #2
 80057f6:	6127      	str	r7, [r4, #16]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 fb49 	bl	8005e90 <__hi0bits>
 80057fe:	017f      	lsls	r7, r7, #5
 8005800:	f8d8 6000 	ldr.w	r6, [r8]
 8005804:	1a3f      	subs	r7, r7, r0
 8005806:	42b7      	cmp	r7, r6
 8005808:	dd62      	ble.n	80058d0 <__gethex+0x278>
 800580a:	1bbf      	subs	r7, r7, r6
 800580c:	4639      	mov	r1, r7
 800580e:	4620      	mov	r0, r4
 8005810:	f000 fedf 	bl	80065d2 <__any_on>
 8005814:	4682      	mov	sl, r0
 8005816:	b1a8      	cbz	r0, 8005844 <__gethex+0x1ec>
 8005818:	1e7b      	subs	r3, r7, #1
 800581a:	1159      	asrs	r1, r3, #5
 800581c:	f003 021f 	and.w	r2, r3, #31
 8005820:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005824:	f04f 0a01 	mov.w	sl, #1
 8005828:	fa0a f202 	lsl.w	r2, sl, r2
 800582c:	420a      	tst	r2, r1
 800582e:	d009      	beq.n	8005844 <__gethex+0x1ec>
 8005830:	4553      	cmp	r3, sl
 8005832:	dd05      	ble.n	8005840 <__gethex+0x1e8>
 8005834:	1eb9      	subs	r1, r7, #2
 8005836:	4620      	mov	r0, r4
 8005838:	f000 fecb 	bl	80065d2 <__any_on>
 800583c:	2800      	cmp	r0, #0
 800583e:	d144      	bne.n	80058ca <__gethex+0x272>
 8005840:	f04f 0a02 	mov.w	sl, #2
 8005844:	4639      	mov	r1, r7
 8005846:	4620      	mov	r0, r4
 8005848:	f7ff fe9e 	bl	8005588 <rshift>
 800584c:	443d      	add	r5, r7
 800584e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005852:	42ab      	cmp	r3, r5
 8005854:	da4a      	bge.n	80058ec <__gethex+0x294>
 8005856:	9802      	ldr	r0, [sp, #8]
 8005858:	4621      	mov	r1, r4
 800585a:	f000 fa67 	bl	8005d2c <_Bfree>
 800585e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005860:	2300      	movs	r3, #0
 8005862:	6013      	str	r3, [r2, #0]
 8005864:	27a3      	movs	r7, #163	; 0xa3
 8005866:	e789      	b.n	800577c <__gethex+0x124>
 8005868:	1e73      	subs	r3, r6, #1
 800586a:	9a06      	ldr	r2, [sp, #24]
 800586c:	9307      	str	r3, [sp, #28]
 800586e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005872:	4293      	cmp	r3, r2
 8005874:	d019      	beq.n	80058aa <__gethex+0x252>
 8005876:	f1bb 0f20 	cmp.w	fp, #32
 800587a:	d107      	bne.n	800588c <__gethex+0x234>
 800587c:	9b04      	ldr	r3, [sp, #16]
 800587e:	9a01      	ldr	r2, [sp, #4]
 8005880:	f843 2b04 	str.w	r2, [r3], #4
 8005884:	9304      	str	r3, [sp, #16]
 8005886:	2300      	movs	r3, #0
 8005888:	9301      	str	r3, [sp, #4]
 800588a:	469b      	mov	fp, r3
 800588c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005890:	f7ff fecc 	bl	800562c <__hexdig_fun>
 8005894:	9b01      	ldr	r3, [sp, #4]
 8005896:	f000 000f 	and.w	r0, r0, #15
 800589a:	fa00 f00b 	lsl.w	r0, r0, fp
 800589e:	4303      	orrs	r3, r0
 80058a0:	9301      	str	r3, [sp, #4]
 80058a2:	f10b 0b04 	add.w	fp, fp, #4
 80058a6:	9b07      	ldr	r3, [sp, #28]
 80058a8:	e00d      	b.n	80058c6 <__gethex+0x26e>
 80058aa:	9a08      	ldr	r2, [sp, #32]
 80058ac:	1e73      	subs	r3, r6, #1
 80058ae:	4413      	add	r3, r2
 80058b0:	42bb      	cmp	r3, r7
 80058b2:	d3e0      	bcc.n	8005876 <__gethex+0x21e>
 80058b4:	4618      	mov	r0, r3
 80058b6:	9903      	ldr	r1, [sp, #12]
 80058b8:	9309      	str	r3, [sp, #36]	; 0x24
 80058ba:	4652      	mov	r2, sl
 80058bc:	f001 f90e 	bl	8006adc <strncmp>
 80058c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c2:	2800      	cmp	r0, #0
 80058c4:	d1d7      	bne.n	8005876 <__gethex+0x21e>
 80058c6:	461e      	mov	r6, r3
 80058c8:	e78c      	b.n	80057e4 <__gethex+0x18c>
 80058ca:	f04f 0a03 	mov.w	sl, #3
 80058ce:	e7b9      	b.n	8005844 <__gethex+0x1ec>
 80058d0:	da09      	bge.n	80058e6 <__gethex+0x28e>
 80058d2:	1bf7      	subs	r7, r6, r7
 80058d4:	4621      	mov	r1, r4
 80058d6:	9802      	ldr	r0, [sp, #8]
 80058d8:	463a      	mov	r2, r7
 80058da:	f000 fc3f 	bl	800615c <__lshift>
 80058de:	1bed      	subs	r5, r5, r7
 80058e0:	4604      	mov	r4, r0
 80058e2:	f100 0914 	add.w	r9, r0, #20
 80058e6:	f04f 0a00 	mov.w	sl, #0
 80058ea:	e7b0      	b.n	800584e <__gethex+0x1f6>
 80058ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80058f0:	42a8      	cmp	r0, r5
 80058f2:	dd71      	ble.n	80059d8 <__gethex+0x380>
 80058f4:	1b45      	subs	r5, r0, r5
 80058f6:	42ae      	cmp	r6, r5
 80058f8:	dc35      	bgt.n	8005966 <__gethex+0x30e>
 80058fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d029      	beq.n	8005956 <__gethex+0x2fe>
 8005902:	2b03      	cmp	r3, #3
 8005904:	d02b      	beq.n	800595e <__gethex+0x306>
 8005906:	2b01      	cmp	r3, #1
 8005908:	d11c      	bne.n	8005944 <__gethex+0x2ec>
 800590a:	42ae      	cmp	r6, r5
 800590c:	d11a      	bne.n	8005944 <__gethex+0x2ec>
 800590e:	2e01      	cmp	r6, #1
 8005910:	d112      	bne.n	8005938 <__gethex+0x2e0>
 8005912:	9a05      	ldr	r2, [sp, #20]
 8005914:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005918:	6013      	str	r3, [r2, #0]
 800591a:	2301      	movs	r3, #1
 800591c:	6123      	str	r3, [r4, #16]
 800591e:	f8c9 3000 	str.w	r3, [r9]
 8005922:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005924:	2762      	movs	r7, #98	; 0x62
 8005926:	601c      	str	r4, [r3, #0]
 8005928:	e728      	b.n	800577c <__gethex+0x124>
 800592a:	bf00      	nop
 800592c:	08007a08 	.word	0x08007a08
 8005930:	08007990 	.word	0x08007990
 8005934:	080079a1 	.word	0x080079a1
 8005938:	1e71      	subs	r1, r6, #1
 800593a:	4620      	mov	r0, r4
 800593c:	f000 fe49 	bl	80065d2 <__any_on>
 8005940:	2800      	cmp	r0, #0
 8005942:	d1e6      	bne.n	8005912 <__gethex+0x2ba>
 8005944:	9802      	ldr	r0, [sp, #8]
 8005946:	4621      	mov	r1, r4
 8005948:	f000 f9f0 	bl	8005d2c <_Bfree>
 800594c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800594e:	2300      	movs	r3, #0
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	2750      	movs	r7, #80	; 0x50
 8005954:	e712      	b.n	800577c <__gethex+0x124>
 8005956:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1f3      	bne.n	8005944 <__gethex+0x2ec>
 800595c:	e7d9      	b.n	8005912 <__gethex+0x2ba>
 800595e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1d6      	bne.n	8005912 <__gethex+0x2ba>
 8005964:	e7ee      	b.n	8005944 <__gethex+0x2ec>
 8005966:	1e6f      	subs	r7, r5, #1
 8005968:	f1ba 0f00 	cmp.w	sl, #0
 800596c:	d131      	bne.n	80059d2 <__gethex+0x37a>
 800596e:	b127      	cbz	r7, 800597a <__gethex+0x322>
 8005970:	4639      	mov	r1, r7
 8005972:	4620      	mov	r0, r4
 8005974:	f000 fe2d 	bl	80065d2 <__any_on>
 8005978:	4682      	mov	sl, r0
 800597a:	117b      	asrs	r3, r7, #5
 800597c:	2101      	movs	r1, #1
 800597e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005982:	f007 071f 	and.w	r7, r7, #31
 8005986:	fa01 f707 	lsl.w	r7, r1, r7
 800598a:	421f      	tst	r7, r3
 800598c:	4629      	mov	r1, r5
 800598e:	4620      	mov	r0, r4
 8005990:	bf18      	it	ne
 8005992:	f04a 0a02 	orrne.w	sl, sl, #2
 8005996:	1b76      	subs	r6, r6, r5
 8005998:	f7ff fdf6 	bl	8005588 <rshift>
 800599c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80059a0:	2702      	movs	r7, #2
 80059a2:	f1ba 0f00 	cmp.w	sl, #0
 80059a6:	d048      	beq.n	8005a3a <__gethex+0x3e2>
 80059a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d015      	beq.n	80059dc <__gethex+0x384>
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	d017      	beq.n	80059e4 <__gethex+0x38c>
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d109      	bne.n	80059cc <__gethex+0x374>
 80059b8:	f01a 0f02 	tst.w	sl, #2
 80059bc:	d006      	beq.n	80059cc <__gethex+0x374>
 80059be:	f8d9 0000 	ldr.w	r0, [r9]
 80059c2:	ea4a 0a00 	orr.w	sl, sl, r0
 80059c6:	f01a 0f01 	tst.w	sl, #1
 80059ca:	d10e      	bne.n	80059ea <__gethex+0x392>
 80059cc:	f047 0710 	orr.w	r7, r7, #16
 80059d0:	e033      	b.n	8005a3a <__gethex+0x3e2>
 80059d2:	f04f 0a01 	mov.w	sl, #1
 80059d6:	e7d0      	b.n	800597a <__gethex+0x322>
 80059d8:	2701      	movs	r7, #1
 80059da:	e7e2      	b.n	80059a2 <__gethex+0x34a>
 80059dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80059de:	f1c3 0301 	rsb	r3, r3, #1
 80059e2:	9315      	str	r3, [sp, #84]	; 0x54
 80059e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0f0      	beq.n	80059cc <__gethex+0x374>
 80059ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80059ee:	f104 0314 	add.w	r3, r4, #20
 80059f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80059f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80059fa:	f04f 0c00 	mov.w	ip, #0
 80059fe:	4618      	mov	r0, r3
 8005a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a04:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8005a08:	d01c      	beq.n	8005a44 <__gethex+0x3ec>
 8005a0a:	3201      	adds	r2, #1
 8005a0c:	6002      	str	r2, [r0, #0]
 8005a0e:	2f02      	cmp	r7, #2
 8005a10:	f104 0314 	add.w	r3, r4, #20
 8005a14:	d13d      	bne.n	8005a92 <__gethex+0x43a>
 8005a16:	f8d8 2000 	ldr.w	r2, [r8]
 8005a1a:	3a01      	subs	r2, #1
 8005a1c:	42b2      	cmp	r2, r6
 8005a1e:	d10a      	bne.n	8005a36 <__gethex+0x3de>
 8005a20:	1171      	asrs	r1, r6, #5
 8005a22:	2201      	movs	r2, #1
 8005a24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005a28:	f006 061f 	and.w	r6, r6, #31
 8005a2c:	fa02 f606 	lsl.w	r6, r2, r6
 8005a30:	421e      	tst	r6, r3
 8005a32:	bf18      	it	ne
 8005a34:	4617      	movne	r7, r2
 8005a36:	f047 0720 	orr.w	r7, r7, #32
 8005a3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a3c:	601c      	str	r4, [r3, #0]
 8005a3e:	9b05      	ldr	r3, [sp, #20]
 8005a40:	601d      	str	r5, [r3, #0]
 8005a42:	e69b      	b.n	800577c <__gethex+0x124>
 8005a44:	4299      	cmp	r1, r3
 8005a46:	f843 cc04 	str.w	ip, [r3, #-4]
 8005a4a:	d8d8      	bhi.n	80059fe <__gethex+0x3a6>
 8005a4c:	68a3      	ldr	r3, [r4, #8]
 8005a4e:	459b      	cmp	fp, r3
 8005a50:	db17      	blt.n	8005a82 <__gethex+0x42a>
 8005a52:	6861      	ldr	r1, [r4, #4]
 8005a54:	9802      	ldr	r0, [sp, #8]
 8005a56:	3101      	adds	r1, #1
 8005a58:	f000 f928 	bl	8005cac <_Balloc>
 8005a5c:	4681      	mov	r9, r0
 8005a5e:	b918      	cbnz	r0, 8005a68 <__gethex+0x410>
 8005a60:	4b1a      	ldr	r3, [pc, #104]	; (8005acc <__gethex+0x474>)
 8005a62:	4602      	mov	r2, r0
 8005a64:	2184      	movs	r1, #132	; 0x84
 8005a66:	e6ac      	b.n	80057c2 <__gethex+0x16a>
 8005a68:	6922      	ldr	r2, [r4, #16]
 8005a6a:	3202      	adds	r2, #2
 8005a6c:	f104 010c 	add.w	r1, r4, #12
 8005a70:	0092      	lsls	r2, r2, #2
 8005a72:	300c      	adds	r0, #12
 8005a74:	f000 f90c 	bl	8005c90 <memcpy>
 8005a78:	4621      	mov	r1, r4
 8005a7a:	9802      	ldr	r0, [sp, #8]
 8005a7c:	f000 f956 	bl	8005d2c <_Bfree>
 8005a80:	464c      	mov	r4, r9
 8005a82:	6923      	ldr	r3, [r4, #16]
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005a8a:	6122      	str	r2, [r4, #16]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	615a      	str	r2, [r3, #20]
 8005a90:	e7bd      	b.n	8005a0e <__gethex+0x3b6>
 8005a92:	6922      	ldr	r2, [r4, #16]
 8005a94:	455a      	cmp	r2, fp
 8005a96:	dd0b      	ble.n	8005ab0 <__gethex+0x458>
 8005a98:	2101      	movs	r1, #1
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f7ff fd74 	bl	8005588 <rshift>
 8005aa0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005aa4:	3501      	adds	r5, #1
 8005aa6:	42ab      	cmp	r3, r5
 8005aa8:	f6ff aed5 	blt.w	8005856 <__gethex+0x1fe>
 8005aac:	2701      	movs	r7, #1
 8005aae:	e7c2      	b.n	8005a36 <__gethex+0x3de>
 8005ab0:	f016 061f 	ands.w	r6, r6, #31
 8005ab4:	d0fa      	beq.n	8005aac <__gethex+0x454>
 8005ab6:	4453      	add	r3, sl
 8005ab8:	f1c6 0620 	rsb	r6, r6, #32
 8005abc:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005ac0:	f000 f9e6 	bl	8005e90 <__hi0bits>
 8005ac4:	42b0      	cmp	r0, r6
 8005ac6:	dbe7      	blt.n	8005a98 <__gethex+0x440>
 8005ac8:	e7f0      	b.n	8005aac <__gethex+0x454>
 8005aca:	bf00      	nop
 8005acc:	08007990 	.word	0x08007990

08005ad0 <L_shift>:
 8005ad0:	f1c2 0208 	rsb	r2, r2, #8
 8005ad4:	0092      	lsls	r2, r2, #2
 8005ad6:	b570      	push	{r4, r5, r6, lr}
 8005ad8:	f1c2 0620 	rsb	r6, r2, #32
 8005adc:	6843      	ldr	r3, [r0, #4]
 8005ade:	6804      	ldr	r4, [r0, #0]
 8005ae0:	fa03 f506 	lsl.w	r5, r3, r6
 8005ae4:	432c      	orrs	r4, r5
 8005ae6:	40d3      	lsrs	r3, r2
 8005ae8:	6004      	str	r4, [r0, #0]
 8005aea:	f840 3f04 	str.w	r3, [r0, #4]!
 8005aee:	4288      	cmp	r0, r1
 8005af0:	d3f4      	bcc.n	8005adc <L_shift+0xc>
 8005af2:	bd70      	pop	{r4, r5, r6, pc}

08005af4 <__match>:
 8005af4:	b530      	push	{r4, r5, lr}
 8005af6:	6803      	ldr	r3, [r0, #0]
 8005af8:	3301      	adds	r3, #1
 8005afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005afe:	b914      	cbnz	r4, 8005b06 <__match+0x12>
 8005b00:	6003      	str	r3, [r0, #0]
 8005b02:	2001      	movs	r0, #1
 8005b04:	bd30      	pop	{r4, r5, pc}
 8005b06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005b0e:	2d19      	cmp	r5, #25
 8005b10:	bf98      	it	ls
 8005b12:	3220      	addls	r2, #32
 8005b14:	42a2      	cmp	r2, r4
 8005b16:	d0f0      	beq.n	8005afa <__match+0x6>
 8005b18:	2000      	movs	r0, #0
 8005b1a:	e7f3      	b.n	8005b04 <__match+0x10>

08005b1c <__hexnan>:
 8005b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b20:	680b      	ldr	r3, [r1, #0]
 8005b22:	115e      	asrs	r6, r3, #5
 8005b24:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005b28:	f013 031f 	ands.w	r3, r3, #31
 8005b2c:	b087      	sub	sp, #28
 8005b2e:	bf18      	it	ne
 8005b30:	3604      	addne	r6, #4
 8005b32:	2500      	movs	r5, #0
 8005b34:	1f37      	subs	r7, r6, #4
 8005b36:	4690      	mov	r8, r2
 8005b38:	6802      	ldr	r2, [r0, #0]
 8005b3a:	9301      	str	r3, [sp, #4]
 8005b3c:	4682      	mov	sl, r0
 8005b3e:	f846 5c04 	str.w	r5, [r6, #-4]
 8005b42:	46b9      	mov	r9, r7
 8005b44:	463c      	mov	r4, r7
 8005b46:	9502      	str	r5, [sp, #8]
 8005b48:	46ab      	mov	fp, r5
 8005b4a:	7851      	ldrb	r1, [r2, #1]
 8005b4c:	1c53      	adds	r3, r2, #1
 8005b4e:	9303      	str	r3, [sp, #12]
 8005b50:	b341      	cbz	r1, 8005ba4 <__hexnan+0x88>
 8005b52:	4608      	mov	r0, r1
 8005b54:	9205      	str	r2, [sp, #20]
 8005b56:	9104      	str	r1, [sp, #16]
 8005b58:	f7ff fd68 	bl	800562c <__hexdig_fun>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	d14f      	bne.n	8005c00 <__hexnan+0xe4>
 8005b60:	9904      	ldr	r1, [sp, #16]
 8005b62:	9a05      	ldr	r2, [sp, #20]
 8005b64:	2920      	cmp	r1, #32
 8005b66:	d818      	bhi.n	8005b9a <__hexnan+0x7e>
 8005b68:	9b02      	ldr	r3, [sp, #8]
 8005b6a:	459b      	cmp	fp, r3
 8005b6c:	dd13      	ble.n	8005b96 <__hexnan+0x7a>
 8005b6e:	454c      	cmp	r4, r9
 8005b70:	d206      	bcs.n	8005b80 <__hexnan+0x64>
 8005b72:	2d07      	cmp	r5, #7
 8005b74:	dc04      	bgt.n	8005b80 <__hexnan+0x64>
 8005b76:	462a      	mov	r2, r5
 8005b78:	4649      	mov	r1, r9
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	f7ff ffa8 	bl	8005ad0 <L_shift>
 8005b80:	4544      	cmp	r4, r8
 8005b82:	d950      	bls.n	8005c26 <__hexnan+0x10a>
 8005b84:	2300      	movs	r3, #0
 8005b86:	f1a4 0904 	sub.w	r9, r4, #4
 8005b8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8005b8e:	f8cd b008 	str.w	fp, [sp, #8]
 8005b92:	464c      	mov	r4, r9
 8005b94:	461d      	mov	r5, r3
 8005b96:	9a03      	ldr	r2, [sp, #12]
 8005b98:	e7d7      	b.n	8005b4a <__hexnan+0x2e>
 8005b9a:	2929      	cmp	r1, #41	; 0x29
 8005b9c:	d156      	bne.n	8005c4c <__hexnan+0x130>
 8005b9e:	3202      	adds	r2, #2
 8005ba0:	f8ca 2000 	str.w	r2, [sl]
 8005ba4:	f1bb 0f00 	cmp.w	fp, #0
 8005ba8:	d050      	beq.n	8005c4c <__hexnan+0x130>
 8005baa:	454c      	cmp	r4, r9
 8005bac:	d206      	bcs.n	8005bbc <__hexnan+0xa0>
 8005bae:	2d07      	cmp	r5, #7
 8005bb0:	dc04      	bgt.n	8005bbc <__hexnan+0xa0>
 8005bb2:	462a      	mov	r2, r5
 8005bb4:	4649      	mov	r1, r9
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	f7ff ff8a 	bl	8005ad0 <L_shift>
 8005bbc:	4544      	cmp	r4, r8
 8005bbe:	d934      	bls.n	8005c2a <__hexnan+0x10e>
 8005bc0:	f1a8 0204 	sub.w	r2, r8, #4
 8005bc4:	4623      	mov	r3, r4
 8005bc6:	f853 1b04 	ldr.w	r1, [r3], #4
 8005bca:	f842 1f04 	str.w	r1, [r2, #4]!
 8005bce:	429f      	cmp	r7, r3
 8005bd0:	d2f9      	bcs.n	8005bc6 <__hexnan+0xaa>
 8005bd2:	1b3b      	subs	r3, r7, r4
 8005bd4:	f023 0303 	bic.w	r3, r3, #3
 8005bd8:	3304      	adds	r3, #4
 8005bda:	3401      	adds	r4, #1
 8005bdc:	3e03      	subs	r6, #3
 8005bde:	42b4      	cmp	r4, r6
 8005be0:	bf88      	it	hi
 8005be2:	2304      	movhi	r3, #4
 8005be4:	4443      	add	r3, r8
 8005be6:	2200      	movs	r2, #0
 8005be8:	f843 2b04 	str.w	r2, [r3], #4
 8005bec:	429f      	cmp	r7, r3
 8005bee:	d2fb      	bcs.n	8005be8 <__hexnan+0xcc>
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	b91b      	cbnz	r3, 8005bfc <__hexnan+0xe0>
 8005bf4:	4547      	cmp	r7, r8
 8005bf6:	d127      	bne.n	8005c48 <__hexnan+0x12c>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	603b      	str	r3, [r7, #0]
 8005bfc:	2005      	movs	r0, #5
 8005bfe:	e026      	b.n	8005c4e <__hexnan+0x132>
 8005c00:	3501      	adds	r5, #1
 8005c02:	2d08      	cmp	r5, #8
 8005c04:	f10b 0b01 	add.w	fp, fp, #1
 8005c08:	dd06      	ble.n	8005c18 <__hexnan+0xfc>
 8005c0a:	4544      	cmp	r4, r8
 8005c0c:	d9c3      	bls.n	8005b96 <__hexnan+0x7a>
 8005c0e:	2300      	movs	r3, #0
 8005c10:	f844 3c04 	str.w	r3, [r4, #-4]
 8005c14:	2501      	movs	r5, #1
 8005c16:	3c04      	subs	r4, #4
 8005c18:	6822      	ldr	r2, [r4, #0]
 8005c1a:	f000 000f 	and.w	r0, r0, #15
 8005c1e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005c22:	6022      	str	r2, [r4, #0]
 8005c24:	e7b7      	b.n	8005b96 <__hexnan+0x7a>
 8005c26:	2508      	movs	r5, #8
 8005c28:	e7b5      	b.n	8005b96 <__hexnan+0x7a>
 8005c2a:	9b01      	ldr	r3, [sp, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0df      	beq.n	8005bf0 <__hexnan+0xd4>
 8005c30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c34:	f1c3 0320 	rsb	r3, r3, #32
 8005c38:	fa22 f303 	lsr.w	r3, r2, r3
 8005c3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005c40:	401a      	ands	r2, r3
 8005c42:	f846 2c04 	str.w	r2, [r6, #-4]
 8005c46:	e7d3      	b.n	8005bf0 <__hexnan+0xd4>
 8005c48:	3f04      	subs	r7, #4
 8005c4a:	e7d1      	b.n	8005bf0 <__hexnan+0xd4>
 8005c4c:	2004      	movs	r0, #4
 8005c4e:	b007      	add	sp, #28
 8005c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005c54 <_localeconv_r>:
 8005c54:	4800      	ldr	r0, [pc, #0]	; (8005c58 <_localeconv_r+0x4>)
 8005c56:	4770      	bx	lr
 8005c58:	2000019c 	.word	0x2000019c

08005c5c <malloc>:
 8005c5c:	4b02      	ldr	r3, [pc, #8]	; (8005c68 <malloc+0xc>)
 8005c5e:	4601      	mov	r1, r0
 8005c60:	6818      	ldr	r0, [r3, #0]
 8005c62:	f000 bd55 	b.w	8006710 <_malloc_r>
 8005c66:	bf00      	nop
 8005c68:	20000044 	.word	0x20000044

08005c6c <__ascii_mbtowc>:
 8005c6c:	b082      	sub	sp, #8
 8005c6e:	b901      	cbnz	r1, 8005c72 <__ascii_mbtowc+0x6>
 8005c70:	a901      	add	r1, sp, #4
 8005c72:	b142      	cbz	r2, 8005c86 <__ascii_mbtowc+0x1a>
 8005c74:	b14b      	cbz	r3, 8005c8a <__ascii_mbtowc+0x1e>
 8005c76:	7813      	ldrb	r3, [r2, #0]
 8005c78:	600b      	str	r3, [r1, #0]
 8005c7a:	7812      	ldrb	r2, [r2, #0]
 8005c7c:	1e10      	subs	r0, r2, #0
 8005c7e:	bf18      	it	ne
 8005c80:	2001      	movne	r0, #1
 8005c82:	b002      	add	sp, #8
 8005c84:	4770      	bx	lr
 8005c86:	4610      	mov	r0, r2
 8005c88:	e7fb      	b.n	8005c82 <__ascii_mbtowc+0x16>
 8005c8a:	f06f 0001 	mvn.w	r0, #1
 8005c8e:	e7f8      	b.n	8005c82 <__ascii_mbtowc+0x16>

08005c90 <memcpy>:
 8005c90:	440a      	add	r2, r1
 8005c92:	4291      	cmp	r1, r2
 8005c94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005c98:	d100      	bne.n	8005c9c <memcpy+0xc>
 8005c9a:	4770      	bx	lr
 8005c9c:	b510      	push	{r4, lr}
 8005c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ca2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ca6:	4291      	cmp	r1, r2
 8005ca8:	d1f9      	bne.n	8005c9e <memcpy+0xe>
 8005caa:	bd10      	pop	{r4, pc}

08005cac <_Balloc>:
 8005cac:	b570      	push	{r4, r5, r6, lr}
 8005cae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	460d      	mov	r5, r1
 8005cb4:	b976      	cbnz	r6, 8005cd4 <_Balloc+0x28>
 8005cb6:	2010      	movs	r0, #16
 8005cb8:	f7ff ffd0 	bl	8005c5c <malloc>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	6260      	str	r0, [r4, #36]	; 0x24
 8005cc0:	b920      	cbnz	r0, 8005ccc <_Balloc+0x20>
 8005cc2:	4b18      	ldr	r3, [pc, #96]	; (8005d24 <_Balloc+0x78>)
 8005cc4:	4818      	ldr	r0, [pc, #96]	; (8005d28 <_Balloc+0x7c>)
 8005cc6:	2166      	movs	r1, #102	; 0x66
 8005cc8:	f000 ff2a 	bl	8006b20 <__assert_func>
 8005ccc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cd0:	6006      	str	r6, [r0, #0]
 8005cd2:	60c6      	str	r6, [r0, #12]
 8005cd4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005cd6:	68f3      	ldr	r3, [r6, #12]
 8005cd8:	b183      	cbz	r3, 8005cfc <_Balloc+0x50>
 8005cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ce2:	b9b8      	cbnz	r0, 8005d14 <_Balloc+0x68>
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	fa01 f605 	lsl.w	r6, r1, r5
 8005cea:	1d72      	adds	r2, r6, #5
 8005cec:	0092      	lsls	r2, r2, #2
 8005cee:	4620      	mov	r0, r4
 8005cf0:	f000 fc90 	bl	8006614 <_calloc_r>
 8005cf4:	b160      	cbz	r0, 8005d10 <_Balloc+0x64>
 8005cf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005cfa:	e00e      	b.n	8005d1a <_Balloc+0x6e>
 8005cfc:	2221      	movs	r2, #33	; 0x21
 8005cfe:	2104      	movs	r1, #4
 8005d00:	4620      	mov	r0, r4
 8005d02:	f000 fc87 	bl	8006614 <_calloc_r>
 8005d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d08:	60f0      	str	r0, [r6, #12]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1e4      	bne.n	8005cda <_Balloc+0x2e>
 8005d10:	2000      	movs	r0, #0
 8005d12:	bd70      	pop	{r4, r5, r6, pc}
 8005d14:	6802      	ldr	r2, [r0, #0]
 8005d16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d20:	e7f7      	b.n	8005d12 <_Balloc+0x66>
 8005d22:	bf00      	nop
 8005d24:	0800791e 	.word	0x0800791e
 8005d28:	08007a1c 	.word	0x08007a1c

08005d2c <_Bfree>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d30:	4605      	mov	r5, r0
 8005d32:	460c      	mov	r4, r1
 8005d34:	b976      	cbnz	r6, 8005d54 <_Bfree+0x28>
 8005d36:	2010      	movs	r0, #16
 8005d38:	f7ff ff90 	bl	8005c5c <malloc>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	6268      	str	r0, [r5, #36]	; 0x24
 8005d40:	b920      	cbnz	r0, 8005d4c <_Bfree+0x20>
 8005d42:	4b09      	ldr	r3, [pc, #36]	; (8005d68 <_Bfree+0x3c>)
 8005d44:	4809      	ldr	r0, [pc, #36]	; (8005d6c <_Bfree+0x40>)
 8005d46:	218a      	movs	r1, #138	; 0x8a
 8005d48:	f000 feea 	bl	8006b20 <__assert_func>
 8005d4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d50:	6006      	str	r6, [r0, #0]
 8005d52:	60c6      	str	r6, [r0, #12]
 8005d54:	b13c      	cbz	r4, 8005d66 <_Bfree+0x3a>
 8005d56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d58:	6862      	ldr	r2, [r4, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d60:	6021      	str	r1, [r4, #0]
 8005d62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d66:	bd70      	pop	{r4, r5, r6, pc}
 8005d68:	0800791e 	.word	0x0800791e
 8005d6c:	08007a1c 	.word	0x08007a1c

08005d70 <__multadd>:
 8005d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d74:	690d      	ldr	r5, [r1, #16]
 8005d76:	4607      	mov	r7, r0
 8005d78:	460c      	mov	r4, r1
 8005d7a:	461e      	mov	r6, r3
 8005d7c:	f101 0c14 	add.w	ip, r1, #20
 8005d80:	2000      	movs	r0, #0
 8005d82:	f8dc 3000 	ldr.w	r3, [ip]
 8005d86:	b299      	uxth	r1, r3
 8005d88:	fb02 6101 	mla	r1, r2, r1, r6
 8005d8c:	0c1e      	lsrs	r6, r3, #16
 8005d8e:	0c0b      	lsrs	r3, r1, #16
 8005d90:	fb02 3306 	mla	r3, r2, r6, r3
 8005d94:	b289      	uxth	r1, r1
 8005d96:	3001      	adds	r0, #1
 8005d98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d9c:	4285      	cmp	r5, r0
 8005d9e:	f84c 1b04 	str.w	r1, [ip], #4
 8005da2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005da6:	dcec      	bgt.n	8005d82 <__multadd+0x12>
 8005da8:	b30e      	cbz	r6, 8005dee <__multadd+0x7e>
 8005daa:	68a3      	ldr	r3, [r4, #8]
 8005dac:	42ab      	cmp	r3, r5
 8005dae:	dc19      	bgt.n	8005de4 <__multadd+0x74>
 8005db0:	6861      	ldr	r1, [r4, #4]
 8005db2:	4638      	mov	r0, r7
 8005db4:	3101      	adds	r1, #1
 8005db6:	f7ff ff79 	bl	8005cac <_Balloc>
 8005dba:	4680      	mov	r8, r0
 8005dbc:	b928      	cbnz	r0, 8005dca <__multadd+0x5a>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <__multadd+0x84>)
 8005dc2:	480d      	ldr	r0, [pc, #52]	; (8005df8 <__multadd+0x88>)
 8005dc4:	21b5      	movs	r1, #181	; 0xb5
 8005dc6:	f000 feab 	bl	8006b20 <__assert_func>
 8005dca:	6922      	ldr	r2, [r4, #16]
 8005dcc:	3202      	adds	r2, #2
 8005dce:	f104 010c 	add.w	r1, r4, #12
 8005dd2:	0092      	lsls	r2, r2, #2
 8005dd4:	300c      	adds	r0, #12
 8005dd6:	f7ff ff5b 	bl	8005c90 <memcpy>
 8005dda:	4621      	mov	r1, r4
 8005ddc:	4638      	mov	r0, r7
 8005dde:	f7ff ffa5 	bl	8005d2c <_Bfree>
 8005de2:	4644      	mov	r4, r8
 8005de4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005de8:	3501      	adds	r5, #1
 8005dea:	615e      	str	r6, [r3, #20]
 8005dec:	6125      	str	r5, [r4, #16]
 8005dee:	4620      	mov	r0, r4
 8005df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005df4:	08007990 	.word	0x08007990
 8005df8:	08007a1c 	.word	0x08007a1c

08005dfc <__s2b>:
 8005dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e00:	460c      	mov	r4, r1
 8005e02:	4615      	mov	r5, r2
 8005e04:	461f      	mov	r7, r3
 8005e06:	2209      	movs	r2, #9
 8005e08:	3308      	adds	r3, #8
 8005e0a:	4606      	mov	r6, r0
 8005e0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e10:	2100      	movs	r1, #0
 8005e12:	2201      	movs	r2, #1
 8005e14:	429a      	cmp	r2, r3
 8005e16:	db09      	blt.n	8005e2c <__s2b+0x30>
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f7ff ff47 	bl	8005cac <_Balloc>
 8005e1e:	b940      	cbnz	r0, 8005e32 <__s2b+0x36>
 8005e20:	4602      	mov	r2, r0
 8005e22:	4b19      	ldr	r3, [pc, #100]	; (8005e88 <__s2b+0x8c>)
 8005e24:	4819      	ldr	r0, [pc, #100]	; (8005e8c <__s2b+0x90>)
 8005e26:	21ce      	movs	r1, #206	; 0xce
 8005e28:	f000 fe7a 	bl	8006b20 <__assert_func>
 8005e2c:	0052      	lsls	r2, r2, #1
 8005e2e:	3101      	adds	r1, #1
 8005e30:	e7f0      	b.n	8005e14 <__s2b+0x18>
 8005e32:	9b08      	ldr	r3, [sp, #32]
 8005e34:	6143      	str	r3, [r0, #20]
 8005e36:	2d09      	cmp	r5, #9
 8005e38:	f04f 0301 	mov.w	r3, #1
 8005e3c:	6103      	str	r3, [r0, #16]
 8005e3e:	dd16      	ble.n	8005e6e <__s2b+0x72>
 8005e40:	f104 0909 	add.w	r9, r4, #9
 8005e44:	46c8      	mov	r8, r9
 8005e46:	442c      	add	r4, r5
 8005e48:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005e4c:	4601      	mov	r1, r0
 8005e4e:	3b30      	subs	r3, #48	; 0x30
 8005e50:	220a      	movs	r2, #10
 8005e52:	4630      	mov	r0, r6
 8005e54:	f7ff ff8c 	bl	8005d70 <__multadd>
 8005e58:	45a0      	cmp	r8, r4
 8005e5a:	d1f5      	bne.n	8005e48 <__s2b+0x4c>
 8005e5c:	f1a5 0408 	sub.w	r4, r5, #8
 8005e60:	444c      	add	r4, r9
 8005e62:	1b2d      	subs	r5, r5, r4
 8005e64:	1963      	adds	r3, r4, r5
 8005e66:	42bb      	cmp	r3, r7
 8005e68:	db04      	blt.n	8005e74 <__s2b+0x78>
 8005e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e6e:	340a      	adds	r4, #10
 8005e70:	2509      	movs	r5, #9
 8005e72:	e7f6      	b.n	8005e62 <__s2b+0x66>
 8005e74:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005e78:	4601      	mov	r1, r0
 8005e7a:	3b30      	subs	r3, #48	; 0x30
 8005e7c:	220a      	movs	r2, #10
 8005e7e:	4630      	mov	r0, r6
 8005e80:	f7ff ff76 	bl	8005d70 <__multadd>
 8005e84:	e7ee      	b.n	8005e64 <__s2b+0x68>
 8005e86:	bf00      	nop
 8005e88:	08007990 	.word	0x08007990
 8005e8c:	08007a1c 	.word	0x08007a1c

08005e90 <__hi0bits>:
 8005e90:	0c02      	lsrs	r2, r0, #16
 8005e92:	0412      	lsls	r2, r2, #16
 8005e94:	4603      	mov	r3, r0
 8005e96:	b9ca      	cbnz	r2, 8005ecc <__hi0bits+0x3c>
 8005e98:	0403      	lsls	r3, r0, #16
 8005e9a:	2010      	movs	r0, #16
 8005e9c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005ea0:	bf04      	itt	eq
 8005ea2:	021b      	lsleq	r3, r3, #8
 8005ea4:	3008      	addeq	r0, #8
 8005ea6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005eaa:	bf04      	itt	eq
 8005eac:	011b      	lsleq	r3, r3, #4
 8005eae:	3004      	addeq	r0, #4
 8005eb0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005eb4:	bf04      	itt	eq
 8005eb6:	009b      	lsleq	r3, r3, #2
 8005eb8:	3002      	addeq	r0, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	db05      	blt.n	8005eca <__hi0bits+0x3a>
 8005ebe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005ec2:	f100 0001 	add.w	r0, r0, #1
 8005ec6:	bf08      	it	eq
 8005ec8:	2020      	moveq	r0, #32
 8005eca:	4770      	bx	lr
 8005ecc:	2000      	movs	r0, #0
 8005ece:	e7e5      	b.n	8005e9c <__hi0bits+0xc>

08005ed0 <__lo0bits>:
 8005ed0:	6803      	ldr	r3, [r0, #0]
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	f013 0007 	ands.w	r0, r3, #7
 8005ed8:	d00b      	beq.n	8005ef2 <__lo0bits+0x22>
 8005eda:	07d9      	lsls	r1, r3, #31
 8005edc:	d421      	bmi.n	8005f22 <__lo0bits+0x52>
 8005ede:	0798      	lsls	r0, r3, #30
 8005ee0:	bf49      	itett	mi
 8005ee2:	085b      	lsrmi	r3, r3, #1
 8005ee4:	089b      	lsrpl	r3, r3, #2
 8005ee6:	2001      	movmi	r0, #1
 8005ee8:	6013      	strmi	r3, [r2, #0]
 8005eea:	bf5c      	itt	pl
 8005eec:	6013      	strpl	r3, [r2, #0]
 8005eee:	2002      	movpl	r0, #2
 8005ef0:	4770      	bx	lr
 8005ef2:	b299      	uxth	r1, r3
 8005ef4:	b909      	cbnz	r1, 8005efa <__lo0bits+0x2a>
 8005ef6:	0c1b      	lsrs	r3, r3, #16
 8005ef8:	2010      	movs	r0, #16
 8005efa:	b2d9      	uxtb	r1, r3
 8005efc:	b909      	cbnz	r1, 8005f02 <__lo0bits+0x32>
 8005efe:	3008      	adds	r0, #8
 8005f00:	0a1b      	lsrs	r3, r3, #8
 8005f02:	0719      	lsls	r1, r3, #28
 8005f04:	bf04      	itt	eq
 8005f06:	091b      	lsreq	r3, r3, #4
 8005f08:	3004      	addeq	r0, #4
 8005f0a:	0799      	lsls	r1, r3, #30
 8005f0c:	bf04      	itt	eq
 8005f0e:	089b      	lsreq	r3, r3, #2
 8005f10:	3002      	addeq	r0, #2
 8005f12:	07d9      	lsls	r1, r3, #31
 8005f14:	d403      	bmi.n	8005f1e <__lo0bits+0x4e>
 8005f16:	085b      	lsrs	r3, r3, #1
 8005f18:	f100 0001 	add.w	r0, r0, #1
 8005f1c:	d003      	beq.n	8005f26 <__lo0bits+0x56>
 8005f1e:	6013      	str	r3, [r2, #0]
 8005f20:	4770      	bx	lr
 8005f22:	2000      	movs	r0, #0
 8005f24:	4770      	bx	lr
 8005f26:	2020      	movs	r0, #32
 8005f28:	4770      	bx	lr
	...

08005f2c <__i2b>:
 8005f2c:	b510      	push	{r4, lr}
 8005f2e:	460c      	mov	r4, r1
 8005f30:	2101      	movs	r1, #1
 8005f32:	f7ff febb 	bl	8005cac <_Balloc>
 8005f36:	4602      	mov	r2, r0
 8005f38:	b928      	cbnz	r0, 8005f46 <__i2b+0x1a>
 8005f3a:	4b05      	ldr	r3, [pc, #20]	; (8005f50 <__i2b+0x24>)
 8005f3c:	4805      	ldr	r0, [pc, #20]	; (8005f54 <__i2b+0x28>)
 8005f3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005f42:	f000 fded 	bl	8006b20 <__assert_func>
 8005f46:	2301      	movs	r3, #1
 8005f48:	6144      	str	r4, [r0, #20]
 8005f4a:	6103      	str	r3, [r0, #16]
 8005f4c:	bd10      	pop	{r4, pc}
 8005f4e:	bf00      	nop
 8005f50:	08007990 	.word	0x08007990
 8005f54:	08007a1c 	.word	0x08007a1c

08005f58 <__multiply>:
 8005f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f5c:	4691      	mov	r9, r2
 8005f5e:	690a      	ldr	r2, [r1, #16]
 8005f60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	bfb8      	it	lt
 8005f68:	460b      	movlt	r3, r1
 8005f6a:	460c      	mov	r4, r1
 8005f6c:	bfbc      	itt	lt
 8005f6e:	464c      	movlt	r4, r9
 8005f70:	4699      	movlt	r9, r3
 8005f72:	6927      	ldr	r7, [r4, #16]
 8005f74:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005f78:	68a3      	ldr	r3, [r4, #8]
 8005f7a:	6861      	ldr	r1, [r4, #4]
 8005f7c:	eb07 060a 	add.w	r6, r7, sl
 8005f80:	42b3      	cmp	r3, r6
 8005f82:	b085      	sub	sp, #20
 8005f84:	bfb8      	it	lt
 8005f86:	3101      	addlt	r1, #1
 8005f88:	f7ff fe90 	bl	8005cac <_Balloc>
 8005f8c:	b930      	cbnz	r0, 8005f9c <__multiply+0x44>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	4b43      	ldr	r3, [pc, #268]	; (80060a0 <__multiply+0x148>)
 8005f92:	4844      	ldr	r0, [pc, #272]	; (80060a4 <__multiply+0x14c>)
 8005f94:	f240 115d 	movw	r1, #349	; 0x15d
 8005f98:	f000 fdc2 	bl	8006b20 <__assert_func>
 8005f9c:	f100 0514 	add.w	r5, r0, #20
 8005fa0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005fa4:	462b      	mov	r3, r5
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	4543      	cmp	r3, r8
 8005faa:	d321      	bcc.n	8005ff0 <__multiply+0x98>
 8005fac:	f104 0314 	add.w	r3, r4, #20
 8005fb0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005fb4:	f109 0314 	add.w	r3, r9, #20
 8005fb8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005fbc:	9202      	str	r2, [sp, #8]
 8005fbe:	1b3a      	subs	r2, r7, r4
 8005fc0:	3a15      	subs	r2, #21
 8005fc2:	f022 0203 	bic.w	r2, r2, #3
 8005fc6:	3204      	adds	r2, #4
 8005fc8:	f104 0115 	add.w	r1, r4, #21
 8005fcc:	428f      	cmp	r7, r1
 8005fce:	bf38      	it	cc
 8005fd0:	2204      	movcc	r2, #4
 8005fd2:	9201      	str	r2, [sp, #4]
 8005fd4:	9a02      	ldr	r2, [sp, #8]
 8005fd6:	9303      	str	r3, [sp, #12]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d80c      	bhi.n	8005ff6 <__multiply+0x9e>
 8005fdc:	2e00      	cmp	r6, #0
 8005fde:	dd03      	ble.n	8005fe8 <__multiply+0x90>
 8005fe0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d059      	beq.n	800609c <__multiply+0x144>
 8005fe8:	6106      	str	r6, [r0, #16]
 8005fea:	b005      	add	sp, #20
 8005fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff0:	f843 2b04 	str.w	r2, [r3], #4
 8005ff4:	e7d8      	b.n	8005fa8 <__multiply+0x50>
 8005ff6:	f8b3 a000 	ldrh.w	sl, [r3]
 8005ffa:	f1ba 0f00 	cmp.w	sl, #0
 8005ffe:	d023      	beq.n	8006048 <__multiply+0xf0>
 8006000:	f104 0e14 	add.w	lr, r4, #20
 8006004:	46a9      	mov	r9, r5
 8006006:	f04f 0c00 	mov.w	ip, #0
 800600a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800600e:	f8d9 1000 	ldr.w	r1, [r9]
 8006012:	fa1f fb82 	uxth.w	fp, r2
 8006016:	b289      	uxth	r1, r1
 8006018:	fb0a 110b 	mla	r1, sl, fp, r1
 800601c:	4461      	add	r1, ip
 800601e:	f8d9 c000 	ldr.w	ip, [r9]
 8006022:	0c12      	lsrs	r2, r2, #16
 8006024:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006028:	fb0a c202 	mla	r2, sl, r2, ip
 800602c:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006030:	b289      	uxth	r1, r1
 8006032:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006036:	4577      	cmp	r7, lr
 8006038:	f849 1b04 	str.w	r1, [r9], #4
 800603c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006040:	d8e3      	bhi.n	800600a <__multiply+0xb2>
 8006042:	9a01      	ldr	r2, [sp, #4]
 8006044:	f845 c002 	str.w	ip, [r5, r2]
 8006048:	9a03      	ldr	r2, [sp, #12]
 800604a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800604e:	3304      	adds	r3, #4
 8006050:	f1b9 0f00 	cmp.w	r9, #0
 8006054:	d020      	beq.n	8006098 <__multiply+0x140>
 8006056:	6829      	ldr	r1, [r5, #0]
 8006058:	f104 0c14 	add.w	ip, r4, #20
 800605c:	46ae      	mov	lr, r5
 800605e:	f04f 0a00 	mov.w	sl, #0
 8006062:	f8bc b000 	ldrh.w	fp, [ip]
 8006066:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800606a:	fb09 220b 	mla	r2, r9, fp, r2
 800606e:	4492      	add	sl, r2
 8006070:	b289      	uxth	r1, r1
 8006072:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006076:	f84e 1b04 	str.w	r1, [lr], #4
 800607a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800607e:	f8be 1000 	ldrh.w	r1, [lr]
 8006082:	0c12      	lsrs	r2, r2, #16
 8006084:	fb09 1102 	mla	r1, r9, r2, r1
 8006088:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800608c:	4567      	cmp	r7, ip
 800608e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006092:	d8e6      	bhi.n	8006062 <__multiply+0x10a>
 8006094:	9a01      	ldr	r2, [sp, #4]
 8006096:	50a9      	str	r1, [r5, r2]
 8006098:	3504      	adds	r5, #4
 800609a:	e79b      	b.n	8005fd4 <__multiply+0x7c>
 800609c:	3e01      	subs	r6, #1
 800609e:	e79d      	b.n	8005fdc <__multiply+0x84>
 80060a0:	08007990 	.word	0x08007990
 80060a4:	08007a1c 	.word	0x08007a1c

080060a8 <__pow5mult>:
 80060a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060ac:	4615      	mov	r5, r2
 80060ae:	f012 0203 	ands.w	r2, r2, #3
 80060b2:	4606      	mov	r6, r0
 80060b4:	460f      	mov	r7, r1
 80060b6:	d007      	beq.n	80060c8 <__pow5mult+0x20>
 80060b8:	4c25      	ldr	r4, [pc, #148]	; (8006150 <__pow5mult+0xa8>)
 80060ba:	3a01      	subs	r2, #1
 80060bc:	2300      	movs	r3, #0
 80060be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060c2:	f7ff fe55 	bl	8005d70 <__multadd>
 80060c6:	4607      	mov	r7, r0
 80060c8:	10ad      	asrs	r5, r5, #2
 80060ca:	d03d      	beq.n	8006148 <__pow5mult+0xa0>
 80060cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80060ce:	b97c      	cbnz	r4, 80060f0 <__pow5mult+0x48>
 80060d0:	2010      	movs	r0, #16
 80060d2:	f7ff fdc3 	bl	8005c5c <malloc>
 80060d6:	4602      	mov	r2, r0
 80060d8:	6270      	str	r0, [r6, #36]	; 0x24
 80060da:	b928      	cbnz	r0, 80060e8 <__pow5mult+0x40>
 80060dc:	4b1d      	ldr	r3, [pc, #116]	; (8006154 <__pow5mult+0xac>)
 80060de:	481e      	ldr	r0, [pc, #120]	; (8006158 <__pow5mult+0xb0>)
 80060e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80060e4:	f000 fd1c 	bl	8006b20 <__assert_func>
 80060e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060ec:	6004      	str	r4, [r0, #0]
 80060ee:	60c4      	str	r4, [r0, #12]
 80060f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80060f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060f8:	b94c      	cbnz	r4, 800610e <__pow5mult+0x66>
 80060fa:	f240 2171 	movw	r1, #625	; 0x271
 80060fe:	4630      	mov	r0, r6
 8006100:	f7ff ff14 	bl	8005f2c <__i2b>
 8006104:	2300      	movs	r3, #0
 8006106:	f8c8 0008 	str.w	r0, [r8, #8]
 800610a:	4604      	mov	r4, r0
 800610c:	6003      	str	r3, [r0, #0]
 800610e:	f04f 0900 	mov.w	r9, #0
 8006112:	07eb      	lsls	r3, r5, #31
 8006114:	d50a      	bpl.n	800612c <__pow5mult+0x84>
 8006116:	4639      	mov	r1, r7
 8006118:	4622      	mov	r2, r4
 800611a:	4630      	mov	r0, r6
 800611c:	f7ff ff1c 	bl	8005f58 <__multiply>
 8006120:	4639      	mov	r1, r7
 8006122:	4680      	mov	r8, r0
 8006124:	4630      	mov	r0, r6
 8006126:	f7ff fe01 	bl	8005d2c <_Bfree>
 800612a:	4647      	mov	r7, r8
 800612c:	106d      	asrs	r5, r5, #1
 800612e:	d00b      	beq.n	8006148 <__pow5mult+0xa0>
 8006130:	6820      	ldr	r0, [r4, #0]
 8006132:	b938      	cbnz	r0, 8006144 <__pow5mult+0x9c>
 8006134:	4622      	mov	r2, r4
 8006136:	4621      	mov	r1, r4
 8006138:	4630      	mov	r0, r6
 800613a:	f7ff ff0d 	bl	8005f58 <__multiply>
 800613e:	6020      	str	r0, [r4, #0]
 8006140:	f8c0 9000 	str.w	r9, [r0]
 8006144:	4604      	mov	r4, r0
 8006146:	e7e4      	b.n	8006112 <__pow5mult+0x6a>
 8006148:	4638      	mov	r0, r7
 800614a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800614e:	bf00      	nop
 8006150:	08007b68 	.word	0x08007b68
 8006154:	0800791e 	.word	0x0800791e
 8006158:	08007a1c 	.word	0x08007a1c

0800615c <__lshift>:
 800615c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006160:	460c      	mov	r4, r1
 8006162:	6849      	ldr	r1, [r1, #4]
 8006164:	6923      	ldr	r3, [r4, #16]
 8006166:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800616a:	68a3      	ldr	r3, [r4, #8]
 800616c:	4607      	mov	r7, r0
 800616e:	4691      	mov	r9, r2
 8006170:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006174:	f108 0601 	add.w	r6, r8, #1
 8006178:	42b3      	cmp	r3, r6
 800617a:	db0b      	blt.n	8006194 <__lshift+0x38>
 800617c:	4638      	mov	r0, r7
 800617e:	f7ff fd95 	bl	8005cac <_Balloc>
 8006182:	4605      	mov	r5, r0
 8006184:	b948      	cbnz	r0, 800619a <__lshift+0x3e>
 8006186:	4602      	mov	r2, r0
 8006188:	4b2a      	ldr	r3, [pc, #168]	; (8006234 <__lshift+0xd8>)
 800618a:	482b      	ldr	r0, [pc, #172]	; (8006238 <__lshift+0xdc>)
 800618c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006190:	f000 fcc6 	bl	8006b20 <__assert_func>
 8006194:	3101      	adds	r1, #1
 8006196:	005b      	lsls	r3, r3, #1
 8006198:	e7ee      	b.n	8006178 <__lshift+0x1c>
 800619a:	2300      	movs	r3, #0
 800619c:	f100 0114 	add.w	r1, r0, #20
 80061a0:	f100 0210 	add.w	r2, r0, #16
 80061a4:	4618      	mov	r0, r3
 80061a6:	4553      	cmp	r3, sl
 80061a8:	db37      	blt.n	800621a <__lshift+0xbe>
 80061aa:	6920      	ldr	r0, [r4, #16]
 80061ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061b0:	f104 0314 	add.w	r3, r4, #20
 80061b4:	f019 091f 	ands.w	r9, r9, #31
 80061b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80061bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80061c0:	d02f      	beq.n	8006222 <__lshift+0xc6>
 80061c2:	f1c9 0e20 	rsb	lr, r9, #32
 80061c6:	468a      	mov	sl, r1
 80061c8:	f04f 0c00 	mov.w	ip, #0
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	fa02 f209 	lsl.w	r2, r2, r9
 80061d2:	ea42 020c 	orr.w	r2, r2, ip
 80061d6:	f84a 2b04 	str.w	r2, [sl], #4
 80061da:	f853 2b04 	ldr.w	r2, [r3], #4
 80061de:	4298      	cmp	r0, r3
 80061e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80061e4:	d8f2      	bhi.n	80061cc <__lshift+0x70>
 80061e6:	1b03      	subs	r3, r0, r4
 80061e8:	3b15      	subs	r3, #21
 80061ea:	f023 0303 	bic.w	r3, r3, #3
 80061ee:	3304      	adds	r3, #4
 80061f0:	f104 0215 	add.w	r2, r4, #21
 80061f4:	4290      	cmp	r0, r2
 80061f6:	bf38      	it	cc
 80061f8:	2304      	movcc	r3, #4
 80061fa:	f841 c003 	str.w	ip, [r1, r3]
 80061fe:	f1bc 0f00 	cmp.w	ip, #0
 8006202:	d001      	beq.n	8006208 <__lshift+0xac>
 8006204:	f108 0602 	add.w	r6, r8, #2
 8006208:	3e01      	subs	r6, #1
 800620a:	4638      	mov	r0, r7
 800620c:	612e      	str	r6, [r5, #16]
 800620e:	4621      	mov	r1, r4
 8006210:	f7ff fd8c 	bl	8005d2c <_Bfree>
 8006214:	4628      	mov	r0, r5
 8006216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800621a:	f842 0f04 	str.w	r0, [r2, #4]!
 800621e:	3301      	adds	r3, #1
 8006220:	e7c1      	b.n	80061a6 <__lshift+0x4a>
 8006222:	3904      	subs	r1, #4
 8006224:	f853 2b04 	ldr.w	r2, [r3], #4
 8006228:	f841 2f04 	str.w	r2, [r1, #4]!
 800622c:	4298      	cmp	r0, r3
 800622e:	d8f9      	bhi.n	8006224 <__lshift+0xc8>
 8006230:	e7ea      	b.n	8006208 <__lshift+0xac>
 8006232:	bf00      	nop
 8006234:	08007990 	.word	0x08007990
 8006238:	08007a1c 	.word	0x08007a1c

0800623c <__mcmp>:
 800623c:	690a      	ldr	r2, [r1, #16]
 800623e:	4603      	mov	r3, r0
 8006240:	6900      	ldr	r0, [r0, #16]
 8006242:	1a80      	subs	r0, r0, r2
 8006244:	b530      	push	{r4, r5, lr}
 8006246:	d10d      	bne.n	8006264 <__mcmp+0x28>
 8006248:	3314      	adds	r3, #20
 800624a:	3114      	adds	r1, #20
 800624c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006250:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006254:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006258:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800625c:	4295      	cmp	r5, r2
 800625e:	d002      	beq.n	8006266 <__mcmp+0x2a>
 8006260:	d304      	bcc.n	800626c <__mcmp+0x30>
 8006262:	2001      	movs	r0, #1
 8006264:	bd30      	pop	{r4, r5, pc}
 8006266:	42a3      	cmp	r3, r4
 8006268:	d3f4      	bcc.n	8006254 <__mcmp+0x18>
 800626a:	e7fb      	b.n	8006264 <__mcmp+0x28>
 800626c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006270:	e7f8      	b.n	8006264 <__mcmp+0x28>
	...

08006274 <__mdiff>:
 8006274:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006278:	460d      	mov	r5, r1
 800627a:	4607      	mov	r7, r0
 800627c:	4611      	mov	r1, r2
 800627e:	4628      	mov	r0, r5
 8006280:	4614      	mov	r4, r2
 8006282:	f7ff ffdb 	bl	800623c <__mcmp>
 8006286:	1e06      	subs	r6, r0, #0
 8006288:	d111      	bne.n	80062ae <__mdiff+0x3a>
 800628a:	4631      	mov	r1, r6
 800628c:	4638      	mov	r0, r7
 800628e:	f7ff fd0d 	bl	8005cac <_Balloc>
 8006292:	4602      	mov	r2, r0
 8006294:	b928      	cbnz	r0, 80062a2 <__mdiff+0x2e>
 8006296:	4b39      	ldr	r3, [pc, #228]	; (800637c <__mdiff+0x108>)
 8006298:	f240 2132 	movw	r1, #562	; 0x232
 800629c:	4838      	ldr	r0, [pc, #224]	; (8006380 <__mdiff+0x10c>)
 800629e:	f000 fc3f 	bl	8006b20 <__assert_func>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80062a8:	4610      	mov	r0, r2
 80062aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ae:	bfa4      	itt	ge
 80062b0:	4623      	movge	r3, r4
 80062b2:	462c      	movge	r4, r5
 80062b4:	4638      	mov	r0, r7
 80062b6:	6861      	ldr	r1, [r4, #4]
 80062b8:	bfa6      	itte	ge
 80062ba:	461d      	movge	r5, r3
 80062bc:	2600      	movge	r6, #0
 80062be:	2601      	movlt	r6, #1
 80062c0:	f7ff fcf4 	bl	8005cac <_Balloc>
 80062c4:	4602      	mov	r2, r0
 80062c6:	b918      	cbnz	r0, 80062d0 <__mdiff+0x5c>
 80062c8:	4b2c      	ldr	r3, [pc, #176]	; (800637c <__mdiff+0x108>)
 80062ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 80062ce:	e7e5      	b.n	800629c <__mdiff+0x28>
 80062d0:	6927      	ldr	r7, [r4, #16]
 80062d2:	60c6      	str	r6, [r0, #12]
 80062d4:	692e      	ldr	r6, [r5, #16]
 80062d6:	f104 0014 	add.w	r0, r4, #20
 80062da:	f105 0914 	add.w	r9, r5, #20
 80062de:	f102 0e14 	add.w	lr, r2, #20
 80062e2:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 80062e6:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80062ea:	3410      	adds	r4, #16
 80062ec:	46f2      	mov	sl, lr
 80062ee:	2100      	movs	r1, #0
 80062f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80062f4:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80062f8:	fa1f f883 	uxth.w	r8, r3
 80062fc:	fa11 f18b 	uxtah	r1, r1, fp
 8006300:	0c1b      	lsrs	r3, r3, #16
 8006302:	eba1 0808 	sub.w	r8, r1, r8
 8006306:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800630a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800630e:	fa1f f888 	uxth.w	r8, r8
 8006312:	1419      	asrs	r1, r3, #16
 8006314:	454e      	cmp	r6, r9
 8006316:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800631a:	f84a 3b04 	str.w	r3, [sl], #4
 800631e:	d8e7      	bhi.n	80062f0 <__mdiff+0x7c>
 8006320:	1b73      	subs	r3, r6, r5
 8006322:	3b15      	subs	r3, #21
 8006324:	f023 0303 	bic.w	r3, r3, #3
 8006328:	3304      	adds	r3, #4
 800632a:	3515      	adds	r5, #21
 800632c:	42ae      	cmp	r6, r5
 800632e:	bf38      	it	cc
 8006330:	2304      	movcc	r3, #4
 8006332:	4418      	add	r0, r3
 8006334:	4473      	add	r3, lr
 8006336:	469e      	mov	lr, r3
 8006338:	4606      	mov	r6, r0
 800633a:	4566      	cmp	r6, ip
 800633c:	d30e      	bcc.n	800635c <__mdiff+0xe8>
 800633e:	f10c 0103 	add.w	r1, ip, #3
 8006342:	1a09      	subs	r1, r1, r0
 8006344:	f021 0103 	bic.w	r1, r1, #3
 8006348:	3803      	subs	r0, #3
 800634a:	4584      	cmp	ip, r0
 800634c:	bf38      	it	cc
 800634e:	2100      	movcc	r1, #0
 8006350:	4419      	add	r1, r3
 8006352:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006356:	b17b      	cbz	r3, 8006378 <__mdiff+0x104>
 8006358:	6117      	str	r7, [r2, #16]
 800635a:	e7a5      	b.n	80062a8 <__mdiff+0x34>
 800635c:	f856 8b04 	ldr.w	r8, [r6], #4
 8006360:	fa11 f488 	uxtah	r4, r1, r8
 8006364:	1425      	asrs	r5, r4, #16
 8006366:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800636a:	b2a4      	uxth	r4, r4
 800636c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8006370:	f84e 4b04 	str.w	r4, [lr], #4
 8006374:	1429      	asrs	r1, r5, #16
 8006376:	e7e0      	b.n	800633a <__mdiff+0xc6>
 8006378:	3f01      	subs	r7, #1
 800637a:	e7ea      	b.n	8006352 <__mdiff+0xde>
 800637c:	08007990 	.word	0x08007990
 8006380:	08007a1c 	.word	0x08007a1c

08006384 <__ulp>:
 8006384:	4b11      	ldr	r3, [pc, #68]	; (80063cc <__ulp+0x48>)
 8006386:	400b      	ands	r3, r1
 8006388:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800638c:	2b00      	cmp	r3, #0
 800638e:	dd02      	ble.n	8006396 <__ulp+0x12>
 8006390:	2000      	movs	r0, #0
 8006392:	4619      	mov	r1, r3
 8006394:	4770      	bx	lr
 8006396:	425b      	negs	r3, r3
 8006398:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800639c:	ea4f 5223 	mov.w	r2, r3, asr #20
 80063a0:	f04f 0000 	mov.w	r0, #0
 80063a4:	f04f 0100 	mov.w	r1, #0
 80063a8:	da04      	bge.n	80063b4 <__ulp+0x30>
 80063aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80063ae:	fa43 f102 	asr.w	r1, r3, r2
 80063b2:	4770      	bx	lr
 80063b4:	f1a2 0314 	sub.w	r3, r2, #20
 80063b8:	2b1e      	cmp	r3, #30
 80063ba:	bfda      	itte	le
 80063bc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80063c0:	fa22 f303 	lsrle.w	r3, r2, r3
 80063c4:	2301      	movgt	r3, #1
 80063c6:	4618      	mov	r0, r3
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	7ff00000 	.word	0x7ff00000

080063d0 <__b2d>:
 80063d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063d4:	6907      	ldr	r7, [r0, #16]
 80063d6:	f100 0914 	add.w	r9, r0, #20
 80063da:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80063de:	f1a7 0804 	sub.w	r8, r7, #4
 80063e2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80063e6:	4630      	mov	r0, r6
 80063e8:	f7ff fd52 	bl	8005e90 <__hi0bits>
 80063ec:	f1c0 0320 	rsb	r3, r0, #32
 80063f0:	280a      	cmp	r0, #10
 80063f2:	600b      	str	r3, [r1, #0]
 80063f4:	491f      	ldr	r1, [pc, #124]	; (8006474 <__b2d+0xa4>)
 80063f6:	dc17      	bgt.n	8006428 <__b2d+0x58>
 80063f8:	f1c0 0c0b 	rsb	ip, r0, #11
 80063fc:	45c1      	cmp	r9, r8
 80063fe:	fa26 f30c 	lsr.w	r3, r6, ip
 8006402:	bf38      	it	cc
 8006404:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006408:	ea43 0501 	orr.w	r5, r3, r1
 800640c:	bf28      	it	cs
 800640e:	2200      	movcs	r2, #0
 8006410:	f100 0315 	add.w	r3, r0, #21
 8006414:	fa06 f303 	lsl.w	r3, r6, r3
 8006418:	fa22 f20c 	lsr.w	r2, r2, ip
 800641c:	ea43 0402 	orr.w	r4, r3, r2
 8006420:	4620      	mov	r0, r4
 8006422:	4629      	mov	r1, r5
 8006424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006428:	45c1      	cmp	r9, r8
 800642a:	bf3a      	itte	cc
 800642c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006430:	f1a7 0808 	subcc.w	r8, r7, #8
 8006434:	2200      	movcs	r2, #0
 8006436:	f1b0 030b 	subs.w	r3, r0, #11
 800643a:	d016      	beq.n	800646a <__b2d+0x9a>
 800643c:	f1c3 0720 	rsb	r7, r3, #32
 8006440:	fa22 f107 	lsr.w	r1, r2, r7
 8006444:	45c8      	cmp	r8, r9
 8006446:	fa06 f603 	lsl.w	r6, r6, r3
 800644a:	ea46 0601 	orr.w	r6, r6, r1
 800644e:	bf8c      	ite	hi
 8006450:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006454:	2100      	movls	r1, #0
 8006456:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800645a:	fa02 f003 	lsl.w	r0, r2, r3
 800645e:	40f9      	lsrs	r1, r7
 8006460:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006464:	ea40 0401 	orr.w	r4, r0, r1
 8006468:	e7da      	b.n	8006420 <__b2d+0x50>
 800646a:	ea46 0501 	orr.w	r5, r6, r1
 800646e:	4614      	mov	r4, r2
 8006470:	e7d6      	b.n	8006420 <__b2d+0x50>
 8006472:	bf00      	nop
 8006474:	3ff00000 	.word	0x3ff00000

08006478 <__d2b>:
 8006478:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800647c:	2101      	movs	r1, #1
 800647e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006482:	4690      	mov	r8, r2
 8006484:	461d      	mov	r5, r3
 8006486:	f7ff fc11 	bl	8005cac <_Balloc>
 800648a:	4604      	mov	r4, r0
 800648c:	b930      	cbnz	r0, 800649c <__d2b+0x24>
 800648e:	4602      	mov	r2, r0
 8006490:	4b25      	ldr	r3, [pc, #148]	; (8006528 <__d2b+0xb0>)
 8006492:	4826      	ldr	r0, [pc, #152]	; (800652c <__d2b+0xb4>)
 8006494:	f240 310a 	movw	r1, #778	; 0x30a
 8006498:	f000 fb42 	bl	8006b20 <__assert_func>
 800649c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80064a0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80064a4:	bb2d      	cbnz	r5, 80064f2 <__d2b+0x7a>
 80064a6:	9301      	str	r3, [sp, #4]
 80064a8:	f1b8 0300 	subs.w	r3, r8, #0
 80064ac:	d026      	beq.n	80064fc <__d2b+0x84>
 80064ae:	4668      	mov	r0, sp
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	f7ff fd0d 	bl	8005ed0 <__lo0bits>
 80064b6:	9900      	ldr	r1, [sp, #0]
 80064b8:	b1f0      	cbz	r0, 80064f8 <__d2b+0x80>
 80064ba:	9a01      	ldr	r2, [sp, #4]
 80064bc:	f1c0 0320 	rsb	r3, r0, #32
 80064c0:	fa02 f303 	lsl.w	r3, r2, r3
 80064c4:	430b      	orrs	r3, r1
 80064c6:	40c2      	lsrs	r2, r0
 80064c8:	6163      	str	r3, [r4, #20]
 80064ca:	9201      	str	r2, [sp, #4]
 80064cc:	9b01      	ldr	r3, [sp, #4]
 80064ce:	61a3      	str	r3, [r4, #24]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	bf14      	ite	ne
 80064d4:	2102      	movne	r1, #2
 80064d6:	2101      	moveq	r1, #1
 80064d8:	6121      	str	r1, [r4, #16]
 80064da:	b1c5      	cbz	r5, 800650e <__d2b+0x96>
 80064dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80064e0:	4405      	add	r5, r0
 80064e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80064e6:	603d      	str	r5, [r7, #0]
 80064e8:	6030      	str	r0, [r6, #0]
 80064ea:	4620      	mov	r0, r4
 80064ec:	b002      	add	sp, #8
 80064ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064f6:	e7d6      	b.n	80064a6 <__d2b+0x2e>
 80064f8:	6161      	str	r1, [r4, #20]
 80064fa:	e7e7      	b.n	80064cc <__d2b+0x54>
 80064fc:	a801      	add	r0, sp, #4
 80064fe:	f7ff fce7 	bl	8005ed0 <__lo0bits>
 8006502:	9b01      	ldr	r3, [sp, #4]
 8006504:	6163      	str	r3, [r4, #20]
 8006506:	2101      	movs	r1, #1
 8006508:	6121      	str	r1, [r4, #16]
 800650a:	3020      	adds	r0, #32
 800650c:	e7e5      	b.n	80064da <__d2b+0x62>
 800650e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006512:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006516:	6038      	str	r0, [r7, #0]
 8006518:	6918      	ldr	r0, [r3, #16]
 800651a:	f7ff fcb9 	bl	8005e90 <__hi0bits>
 800651e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006522:	6031      	str	r1, [r6, #0]
 8006524:	e7e1      	b.n	80064ea <__d2b+0x72>
 8006526:	bf00      	nop
 8006528:	08007990 	.word	0x08007990
 800652c:	08007a1c 	.word	0x08007a1c

08006530 <__ratio>:
 8006530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006534:	4688      	mov	r8, r1
 8006536:	4669      	mov	r1, sp
 8006538:	4681      	mov	r9, r0
 800653a:	f7ff ff49 	bl	80063d0 <__b2d>
 800653e:	460f      	mov	r7, r1
 8006540:	4604      	mov	r4, r0
 8006542:	460d      	mov	r5, r1
 8006544:	4640      	mov	r0, r8
 8006546:	a901      	add	r1, sp, #4
 8006548:	f7ff ff42 	bl	80063d0 <__b2d>
 800654c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006550:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006554:	eba3 0c02 	sub.w	ip, r3, r2
 8006558:	e9dd 3200 	ldrd	r3, r2, [sp]
 800655c:	1a9b      	subs	r3, r3, r2
 800655e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006562:	2b00      	cmp	r3, #0
 8006564:	bfd5      	itete	le
 8006566:	460a      	movle	r2, r1
 8006568:	462a      	movgt	r2, r5
 800656a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800656e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006572:	468b      	mov	fp, r1
 8006574:	bfd8      	it	le
 8006576:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800657a:	465b      	mov	r3, fp
 800657c:	4602      	mov	r2, r0
 800657e:	4639      	mov	r1, r7
 8006580:	4620      	mov	r0, r4
 8006582:	f7fa f96b 	bl	800085c <__aeabi_ddiv>
 8006586:	b003      	add	sp, #12
 8006588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800658c <__copybits>:
 800658c:	3901      	subs	r1, #1
 800658e:	b570      	push	{r4, r5, r6, lr}
 8006590:	1149      	asrs	r1, r1, #5
 8006592:	6914      	ldr	r4, [r2, #16]
 8006594:	3101      	adds	r1, #1
 8006596:	f102 0314 	add.w	r3, r2, #20
 800659a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800659e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80065a2:	1f05      	subs	r5, r0, #4
 80065a4:	42a3      	cmp	r3, r4
 80065a6:	d30c      	bcc.n	80065c2 <__copybits+0x36>
 80065a8:	1aa3      	subs	r3, r4, r2
 80065aa:	3b11      	subs	r3, #17
 80065ac:	f023 0303 	bic.w	r3, r3, #3
 80065b0:	3211      	adds	r2, #17
 80065b2:	42a2      	cmp	r2, r4
 80065b4:	bf88      	it	hi
 80065b6:	2300      	movhi	r3, #0
 80065b8:	4418      	add	r0, r3
 80065ba:	2300      	movs	r3, #0
 80065bc:	4288      	cmp	r0, r1
 80065be:	d305      	bcc.n	80065cc <__copybits+0x40>
 80065c0:	bd70      	pop	{r4, r5, r6, pc}
 80065c2:	f853 6b04 	ldr.w	r6, [r3], #4
 80065c6:	f845 6f04 	str.w	r6, [r5, #4]!
 80065ca:	e7eb      	b.n	80065a4 <__copybits+0x18>
 80065cc:	f840 3b04 	str.w	r3, [r0], #4
 80065d0:	e7f4      	b.n	80065bc <__copybits+0x30>

080065d2 <__any_on>:
 80065d2:	f100 0214 	add.w	r2, r0, #20
 80065d6:	6900      	ldr	r0, [r0, #16]
 80065d8:	114b      	asrs	r3, r1, #5
 80065da:	4298      	cmp	r0, r3
 80065dc:	b510      	push	{r4, lr}
 80065de:	db11      	blt.n	8006604 <__any_on+0x32>
 80065e0:	dd0a      	ble.n	80065f8 <__any_on+0x26>
 80065e2:	f011 011f 	ands.w	r1, r1, #31
 80065e6:	d007      	beq.n	80065f8 <__any_on+0x26>
 80065e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80065ec:	fa24 f001 	lsr.w	r0, r4, r1
 80065f0:	fa00 f101 	lsl.w	r1, r0, r1
 80065f4:	428c      	cmp	r4, r1
 80065f6:	d10b      	bne.n	8006610 <__any_on+0x3e>
 80065f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d803      	bhi.n	8006608 <__any_on+0x36>
 8006600:	2000      	movs	r0, #0
 8006602:	bd10      	pop	{r4, pc}
 8006604:	4603      	mov	r3, r0
 8006606:	e7f7      	b.n	80065f8 <__any_on+0x26>
 8006608:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800660c:	2900      	cmp	r1, #0
 800660e:	d0f5      	beq.n	80065fc <__any_on+0x2a>
 8006610:	2001      	movs	r0, #1
 8006612:	e7f6      	b.n	8006602 <__any_on+0x30>

08006614 <_calloc_r>:
 8006614:	b570      	push	{r4, r5, r6, lr}
 8006616:	fba1 5402 	umull	r5, r4, r1, r2
 800661a:	b934      	cbnz	r4, 800662a <_calloc_r+0x16>
 800661c:	4629      	mov	r1, r5
 800661e:	f000 f877 	bl	8006710 <_malloc_r>
 8006622:	4606      	mov	r6, r0
 8006624:	b928      	cbnz	r0, 8006632 <_calloc_r+0x1e>
 8006626:	4630      	mov	r0, r6
 8006628:	bd70      	pop	{r4, r5, r6, pc}
 800662a:	220c      	movs	r2, #12
 800662c:	6002      	str	r2, [r0, #0]
 800662e:	2600      	movs	r6, #0
 8006630:	e7f9      	b.n	8006626 <_calloc_r+0x12>
 8006632:	462a      	mov	r2, r5
 8006634:	4621      	mov	r1, r4
 8006636:	f7fc fc09 	bl	8002e4c <memset>
 800663a:	e7f4      	b.n	8006626 <_calloc_r+0x12>

0800663c <_free_r>:
 800663c:	b538      	push	{r3, r4, r5, lr}
 800663e:	4605      	mov	r5, r0
 8006640:	2900      	cmp	r1, #0
 8006642:	d041      	beq.n	80066c8 <_free_r+0x8c>
 8006644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006648:	1f0c      	subs	r4, r1, #4
 800664a:	2b00      	cmp	r3, #0
 800664c:	bfb8      	it	lt
 800664e:	18e4      	addlt	r4, r4, r3
 8006650:	f000 fab0 	bl	8006bb4 <__malloc_lock>
 8006654:	4a1d      	ldr	r2, [pc, #116]	; (80066cc <_free_r+0x90>)
 8006656:	6813      	ldr	r3, [r2, #0]
 8006658:	b933      	cbnz	r3, 8006668 <_free_r+0x2c>
 800665a:	6063      	str	r3, [r4, #4]
 800665c:	6014      	str	r4, [r2, #0]
 800665e:	4628      	mov	r0, r5
 8006660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006664:	f000 baac 	b.w	8006bc0 <__malloc_unlock>
 8006668:	42a3      	cmp	r3, r4
 800666a:	d908      	bls.n	800667e <_free_r+0x42>
 800666c:	6820      	ldr	r0, [r4, #0]
 800666e:	1821      	adds	r1, r4, r0
 8006670:	428b      	cmp	r3, r1
 8006672:	bf01      	itttt	eq
 8006674:	6819      	ldreq	r1, [r3, #0]
 8006676:	685b      	ldreq	r3, [r3, #4]
 8006678:	1809      	addeq	r1, r1, r0
 800667a:	6021      	streq	r1, [r4, #0]
 800667c:	e7ed      	b.n	800665a <_free_r+0x1e>
 800667e:	461a      	mov	r2, r3
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	b10b      	cbz	r3, 8006688 <_free_r+0x4c>
 8006684:	42a3      	cmp	r3, r4
 8006686:	d9fa      	bls.n	800667e <_free_r+0x42>
 8006688:	6811      	ldr	r1, [r2, #0]
 800668a:	1850      	adds	r0, r2, r1
 800668c:	42a0      	cmp	r0, r4
 800668e:	d10b      	bne.n	80066a8 <_free_r+0x6c>
 8006690:	6820      	ldr	r0, [r4, #0]
 8006692:	4401      	add	r1, r0
 8006694:	1850      	adds	r0, r2, r1
 8006696:	4283      	cmp	r3, r0
 8006698:	6011      	str	r1, [r2, #0]
 800669a:	d1e0      	bne.n	800665e <_free_r+0x22>
 800669c:	6818      	ldr	r0, [r3, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	6053      	str	r3, [r2, #4]
 80066a2:	4401      	add	r1, r0
 80066a4:	6011      	str	r1, [r2, #0]
 80066a6:	e7da      	b.n	800665e <_free_r+0x22>
 80066a8:	d902      	bls.n	80066b0 <_free_r+0x74>
 80066aa:	230c      	movs	r3, #12
 80066ac:	602b      	str	r3, [r5, #0]
 80066ae:	e7d6      	b.n	800665e <_free_r+0x22>
 80066b0:	6820      	ldr	r0, [r4, #0]
 80066b2:	1821      	adds	r1, r4, r0
 80066b4:	428b      	cmp	r3, r1
 80066b6:	bf04      	itt	eq
 80066b8:	6819      	ldreq	r1, [r3, #0]
 80066ba:	685b      	ldreq	r3, [r3, #4]
 80066bc:	6063      	str	r3, [r4, #4]
 80066be:	bf04      	itt	eq
 80066c0:	1809      	addeq	r1, r1, r0
 80066c2:	6021      	streq	r1, [r4, #0]
 80066c4:	6054      	str	r4, [r2, #4]
 80066c6:	e7ca      	b.n	800665e <_free_r+0x22>
 80066c8:	bd38      	pop	{r3, r4, r5, pc}
 80066ca:	bf00      	nop
 80066cc:	200004b0 	.word	0x200004b0

080066d0 <sbrk_aligned>:
 80066d0:	b570      	push	{r4, r5, r6, lr}
 80066d2:	4e0e      	ldr	r6, [pc, #56]	; (800670c <sbrk_aligned+0x3c>)
 80066d4:	460c      	mov	r4, r1
 80066d6:	6831      	ldr	r1, [r6, #0]
 80066d8:	4605      	mov	r5, r0
 80066da:	b911      	cbnz	r1, 80066e2 <sbrk_aligned+0x12>
 80066dc:	f000 f9ee 	bl	8006abc <_sbrk_r>
 80066e0:	6030      	str	r0, [r6, #0]
 80066e2:	4621      	mov	r1, r4
 80066e4:	4628      	mov	r0, r5
 80066e6:	f000 f9e9 	bl	8006abc <_sbrk_r>
 80066ea:	1c43      	adds	r3, r0, #1
 80066ec:	d00a      	beq.n	8006704 <sbrk_aligned+0x34>
 80066ee:	1cc4      	adds	r4, r0, #3
 80066f0:	f024 0403 	bic.w	r4, r4, #3
 80066f4:	42a0      	cmp	r0, r4
 80066f6:	d007      	beq.n	8006708 <sbrk_aligned+0x38>
 80066f8:	1a21      	subs	r1, r4, r0
 80066fa:	4628      	mov	r0, r5
 80066fc:	f000 f9de 	bl	8006abc <_sbrk_r>
 8006700:	3001      	adds	r0, #1
 8006702:	d101      	bne.n	8006708 <sbrk_aligned+0x38>
 8006704:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006708:	4620      	mov	r0, r4
 800670a:	bd70      	pop	{r4, r5, r6, pc}
 800670c:	200004b4 	.word	0x200004b4

08006710 <_malloc_r>:
 8006710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006714:	1ccd      	adds	r5, r1, #3
 8006716:	f025 0503 	bic.w	r5, r5, #3
 800671a:	3508      	adds	r5, #8
 800671c:	2d0c      	cmp	r5, #12
 800671e:	bf38      	it	cc
 8006720:	250c      	movcc	r5, #12
 8006722:	2d00      	cmp	r5, #0
 8006724:	4607      	mov	r7, r0
 8006726:	db01      	blt.n	800672c <_malloc_r+0x1c>
 8006728:	42a9      	cmp	r1, r5
 800672a:	d905      	bls.n	8006738 <_malloc_r+0x28>
 800672c:	230c      	movs	r3, #12
 800672e:	603b      	str	r3, [r7, #0]
 8006730:	2600      	movs	r6, #0
 8006732:	4630      	mov	r0, r6
 8006734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006738:	4e2e      	ldr	r6, [pc, #184]	; (80067f4 <_malloc_r+0xe4>)
 800673a:	f000 fa3b 	bl	8006bb4 <__malloc_lock>
 800673e:	6833      	ldr	r3, [r6, #0]
 8006740:	461c      	mov	r4, r3
 8006742:	bb34      	cbnz	r4, 8006792 <_malloc_r+0x82>
 8006744:	4629      	mov	r1, r5
 8006746:	4638      	mov	r0, r7
 8006748:	f7ff ffc2 	bl	80066d0 <sbrk_aligned>
 800674c:	1c43      	adds	r3, r0, #1
 800674e:	4604      	mov	r4, r0
 8006750:	d14d      	bne.n	80067ee <_malloc_r+0xde>
 8006752:	6834      	ldr	r4, [r6, #0]
 8006754:	4626      	mov	r6, r4
 8006756:	2e00      	cmp	r6, #0
 8006758:	d140      	bne.n	80067dc <_malloc_r+0xcc>
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	4631      	mov	r1, r6
 800675e:	4638      	mov	r0, r7
 8006760:	eb04 0803 	add.w	r8, r4, r3
 8006764:	f000 f9aa 	bl	8006abc <_sbrk_r>
 8006768:	4580      	cmp	r8, r0
 800676a:	d13a      	bne.n	80067e2 <_malloc_r+0xd2>
 800676c:	6821      	ldr	r1, [r4, #0]
 800676e:	3503      	adds	r5, #3
 8006770:	1a6d      	subs	r5, r5, r1
 8006772:	f025 0503 	bic.w	r5, r5, #3
 8006776:	3508      	adds	r5, #8
 8006778:	2d0c      	cmp	r5, #12
 800677a:	bf38      	it	cc
 800677c:	250c      	movcc	r5, #12
 800677e:	4629      	mov	r1, r5
 8006780:	4638      	mov	r0, r7
 8006782:	f7ff ffa5 	bl	80066d0 <sbrk_aligned>
 8006786:	3001      	adds	r0, #1
 8006788:	d02b      	beq.n	80067e2 <_malloc_r+0xd2>
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	442b      	add	r3, r5
 800678e:	6023      	str	r3, [r4, #0]
 8006790:	e00e      	b.n	80067b0 <_malloc_r+0xa0>
 8006792:	6822      	ldr	r2, [r4, #0]
 8006794:	1b52      	subs	r2, r2, r5
 8006796:	d41e      	bmi.n	80067d6 <_malloc_r+0xc6>
 8006798:	2a0b      	cmp	r2, #11
 800679a:	d916      	bls.n	80067ca <_malloc_r+0xba>
 800679c:	1961      	adds	r1, r4, r5
 800679e:	42a3      	cmp	r3, r4
 80067a0:	6025      	str	r5, [r4, #0]
 80067a2:	bf18      	it	ne
 80067a4:	6059      	strne	r1, [r3, #4]
 80067a6:	6863      	ldr	r3, [r4, #4]
 80067a8:	bf08      	it	eq
 80067aa:	6031      	streq	r1, [r6, #0]
 80067ac:	5162      	str	r2, [r4, r5]
 80067ae:	604b      	str	r3, [r1, #4]
 80067b0:	4638      	mov	r0, r7
 80067b2:	f104 060b 	add.w	r6, r4, #11
 80067b6:	f000 fa03 	bl	8006bc0 <__malloc_unlock>
 80067ba:	f026 0607 	bic.w	r6, r6, #7
 80067be:	1d23      	adds	r3, r4, #4
 80067c0:	1af2      	subs	r2, r6, r3
 80067c2:	d0b6      	beq.n	8006732 <_malloc_r+0x22>
 80067c4:	1b9b      	subs	r3, r3, r6
 80067c6:	50a3      	str	r3, [r4, r2]
 80067c8:	e7b3      	b.n	8006732 <_malloc_r+0x22>
 80067ca:	6862      	ldr	r2, [r4, #4]
 80067cc:	42a3      	cmp	r3, r4
 80067ce:	bf0c      	ite	eq
 80067d0:	6032      	streq	r2, [r6, #0]
 80067d2:	605a      	strne	r2, [r3, #4]
 80067d4:	e7ec      	b.n	80067b0 <_malloc_r+0xa0>
 80067d6:	4623      	mov	r3, r4
 80067d8:	6864      	ldr	r4, [r4, #4]
 80067da:	e7b2      	b.n	8006742 <_malloc_r+0x32>
 80067dc:	4634      	mov	r4, r6
 80067de:	6876      	ldr	r6, [r6, #4]
 80067e0:	e7b9      	b.n	8006756 <_malloc_r+0x46>
 80067e2:	230c      	movs	r3, #12
 80067e4:	603b      	str	r3, [r7, #0]
 80067e6:	4638      	mov	r0, r7
 80067e8:	f000 f9ea 	bl	8006bc0 <__malloc_unlock>
 80067ec:	e7a1      	b.n	8006732 <_malloc_r+0x22>
 80067ee:	6025      	str	r5, [r4, #0]
 80067f0:	e7de      	b.n	80067b0 <_malloc_r+0xa0>
 80067f2:	bf00      	nop
 80067f4:	200004b0 	.word	0x200004b0

080067f8 <__ssputs_r>:
 80067f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067fc:	688e      	ldr	r6, [r1, #8]
 80067fe:	429e      	cmp	r6, r3
 8006800:	4682      	mov	sl, r0
 8006802:	460c      	mov	r4, r1
 8006804:	4690      	mov	r8, r2
 8006806:	461f      	mov	r7, r3
 8006808:	d838      	bhi.n	800687c <__ssputs_r+0x84>
 800680a:	898a      	ldrh	r2, [r1, #12]
 800680c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006810:	d032      	beq.n	8006878 <__ssputs_r+0x80>
 8006812:	6825      	ldr	r5, [r4, #0]
 8006814:	6909      	ldr	r1, [r1, #16]
 8006816:	eba5 0901 	sub.w	r9, r5, r1
 800681a:	6965      	ldr	r5, [r4, #20]
 800681c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006820:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006824:	3301      	adds	r3, #1
 8006826:	444b      	add	r3, r9
 8006828:	106d      	asrs	r5, r5, #1
 800682a:	429d      	cmp	r5, r3
 800682c:	bf38      	it	cc
 800682e:	461d      	movcc	r5, r3
 8006830:	0553      	lsls	r3, r2, #21
 8006832:	d531      	bpl.n	8006898 <__ssputs_r+0xa0>
 8006834:	4629      	mov	r1, r5
 8006836:	f7ff ff6b 	bl	8006710 <_malloc_r>
 800683a:	4606      	mov	r6, r0
 800683c:	b950      	cbnz	r0, 8006854 <__ssputs_r+0x5c>
 800683e:	230c      	movs	r3, #12
 8006840:	f8ca 3000 	str.w	r3, [sl]
 8006844:	89a3      	ldrh	r3, [r4, #12]
 8006846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800684a:	81a3      	strh	r3, [r4, #12]
 800684c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006854:	6921      	ldr	r1, [r4, #16]
 8006856:	464a      	mov	r2, r9
 8006858:	f7ff fa1a 	bl	8005c90 <memcpy>
 800685c:	89a3      	ldrh	r3, [r4, #12]
 800685e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006866:	81a3      	strh	r3, [r4, #12]
 8006868:	6126      	str	r6, [r4, #16]
 800686a:	6165      	str	r5, [r4, #20]
 800686c:	444e      	add	r6, r9
 800686e:	eba5 0509 	sub.w	r5, r5, r9
 8006872:	6026      	str	r6, [r4, #0]
 8006874:	60a5      	str	r5, [r4, #8]
 8006876:	463e      	mov	r6, r7
 8006878:	42be      	cmp	r6, r7
 800687a:	d900      	bls.n	800687e <__ssputs_r+0x86>
 800687c:	463e      	mov	r6, r7
 800687e:	6820      	ldr	r0, [r4, #0]
 8006880:	4632      	mov	r2, r6
 8006882:	4641      	mov	r1, r8
 8006884:	f000 f97c 	bl	8006b80 <memmove>
 8006888:	68a3      	ldr	r3, [r4, #8]
 800688a:	1b9b      	subs	r3, r3, r6
 800688c:	60a3      	str	r3, [r4, #8]
 800688e:	6823      	ldr	r3, [r4, #0]
 8006890:	4433      	add	r3, r6
 8006892:	6023      	str	r3, [r4, #0]
 8006894:	2000      	movs	r0, #0
 8006896:	e7db      	b.n	8006850 <__ssputs_r+0x58>
 8006898:	462a      	mov	r2, r5
 800689a:	f000 f997 	bl	8006bcc <_realloc_r>
 800689e:	4606      	mov	r6, r0
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d1e1      	bne.n	8006868 <__ssputs_r+0x70>
 80068a4:	6921      	ldr	r1, [r4, #16]
 80068a6:	4650      	mov	r0, sl
 80068a8:	f7ff fec8 	bl	800663c <_free_r>
 80068ac:	e7c7      	b.n	800683e <__ssputs_r+0x46>
	...

080068b0 <_svfiprintf_r>:
 80068b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b4:	4698      	mov	r8, r3
 80068b6:	898b      	ldrh	r3, [r1, #12]
 80068b8:	061b      	lsls	r3, r3, #24
 80068ba:	b09d      	sub	sp, #116	; 0x74
 80068bc:	4607      	mov	r7, r0
 80068be:	460d      	mov	r5, r1
 80068c0:	4614      	mov	r4, r2
 80068c2:	d50e      	bpl.n	80068e2 <_svfiprintf_r+0x32>
 80068c4:	690b      	ldr	r3, [r1, #16]
 80068c6:	b963      	cbnz	r3, 80068e2 <_svfiprintf_r+0x32>
 80068c8:	2140      	movs	r1, #64	; 0x40
 80068ca:	f7ff ff21 	bl	8006710 <_malloc_r>
 80068ce:	6028      	str	r0, [r5, #0]
 80068d0:	6128      	str	r0, [r5, #16]
 80068d2:	b920      	cbnz	r0, 80068de <_svfiprintf_r+0x2e>
 80068d4:	230c      	movs	r3, #12
 80068d6:	603b      	str	r3, [r7, #0]
 80068d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068dc:	e0d1      	b.n	8006a82 <_svfiprintf_r+0x1d2>
 80068de:	2340      	movs	r3, #64	; 0x40
 80068e0:	616b      	str	r3, [r5, #20]
 80068e2:	2300      	movs	r3, #0
 80068e4:	9309      	str	r3, [sp, #36]	; 0x24
 80068e6:	2320      	movs	r3, #32
 80068e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80068f0:	2330      	movs	r3, #48	; 0x30
 80068f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a9c <_svfiprintf_r+0x1ec>
 80068f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068fa:	f04f 0901 	mov.w	r9, #1
 80068fe:	4623      	mov	r3, r4
 8006900:	469a      	mov	sl, r3
 8006902:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006906:	b10a      	cbz	r2, 800690c <_svfiprintf_r+0x5c>
 8006908:	2a25      	cmp	r2, #37	; 0x25
 800690a:	d1f9      	bne.n	8006900 <_svfiprintf_r+0x50>
 800690c:	ebba 0b04 	subs.w	fp, sl, r4
 8006910:	d00b      	beq.n	800692a <_svfiprintf_r+0x7a>
 8006912:	465b      	mov	r3, fp
 8006914:	4622      	mov	r2, r4
 8006916:	4629      	mov	r1, r5
 8006918:	4638      	mov	r0, r7
 800691a:	f7ff ff6d 	bl	80067f8 <__ssputs_r>
 800691e:	3001      	adds	r0, #1
 8006920:	f000 80aa 	beq.w	8006a78 <_svfiprintf_r+0x1c8>
 8006924:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006926:	445a      	add	r2, fp
 8006928:	9209      	str	r2, [sp, #36]	; 0x24
 800692a:	f89a 3000 	ldrb.w	r3, [sl]
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 80a2 	beq.w	8006a78 <_svfiprintf_r+0x1c8>
 8006934:	2300      	movs	r3, #0
 8006936:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800693a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800693e:	f10a 0a01 	add.w	sl, sl, #1
 8006942:	9304      	str	r3, [sp, #16]
 8006944:	9307      	str	r3, [sp, #28]
 8006946:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800694a:	931a      	str	r3, [sp, #104]	; 0x68
 800694c:	4654      	mov	r4, sl
 800694e:	2205      	movs	r2, #5
 8006950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006954:	4851      	ldr	r0, [pc, #324]	; (8006a9c <_svfiprintf_r+0x1ec>)
 8006956:	f7f9 fc4b 	bl	80001f0 <memchr>
 800695a:	9a04      	ldr	r2, [sp, #16]
 800695c:	b9d8      	cbnz	r0, 8006996 <_svfiprintf_r+0xe6>
 800695e:	06d0      	lsls	r0, r2, #27
 8006960:	bf44      	itt	mi
 8006962:	2320      	movmi	r3, #32
 8006964:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006968:	0711      	lsls	r1, r2, #28
 800696a:	bf44      	itt	mi
 800696c:	232b      	movmi	r3, #43	; 0x2b
 800696e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006972:	f89a 3000 	ldrb.w	r3, [sl]
 8006976:	2b2a      	cmp	r3, #42	; 0x2a
 8006978:	d015      	beq.n	80069a6 <_svfiprintf_r+0xf6>
 800697a:	9a07      	ldr	r2, [sp, #28]
 800697c:	4654      	mov	r4, sl
 800697e:	2000      	movs	r0, #0
 8006980:	f04f 0c0a 	mov.w	ip, #10
 8006984:	4621      	mov	r1, r4
 8006986:	f811 3b01 	ldrb.w	r3, [r1], #1
 800698a:	3b30      	subs	r3, #48	; 0x30
 800698c:	2b09      	cmp	r3, #9
 800698e:	d94e      	bls.n	8006a2e <_svfiprintf_r+0x17e>
 8006990:	b1b0      	cbz	r0, 80069c0 <_svfiprintf_r+0x110>
 8006992:	9207      	str	r2, [sp, #28]
 8006994:	e014      	b.n	80069c0 <_svfiprintf_r+0x110>
 8006996:	eba0 0308 	sub.w	r3, r0, r8
 800699a:	fa09 f303 	lsl.w	r3, r9, r3
 800699e:	4313      	orrs	r3, r2
 80069a0:	9304      	str	r3, [sp, #16]
 80069a2:	46a2      	mov	sl, r4
 80069a4:	e7d2      	b.n	800694c <_svfiprintf_r+0x9c>
 80069a6:	9b03      	ldr	r3, [sp, #12]
 80069a8:	1d19      	adds	r1, r3, #4
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	9103      	str	r1, [sp, #12]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	bfbb      	ittet	lt
 80069b2:	425b      	neglt	r3, r3
 80069b4:	f042 0202 	orrlt.w	r2, r2, #2
 80069b8:	9307      	strge	r3, [sp, #28]
 80069ba:	9307      	strlt	r3, [sp, #28]
 80069bc:	bfb8      	it	lt
 80069be:	9204      	strlt	r2, [sp, #16]
 80069c0:	7823      	ldrb	r3, [r4, #0]
 80069c2:	2b2e      	cmp	r3, #46	; 0x2e
 80069c4:	d10c      	bne.n	80069e0 <_svfiprintf_r+0x130>
 80069c6:	7863      	ldrb	r3, [r4, #1]
 80069c8:	2b2a      	cmp	r3, #42	; 0x2a
 80069ca:	d135      	bne.n	8006a38 <_svfiprintf_r+0x188>
 80069cc:	9b03      	ldr	r3, [sp, #12]
 80069ce:	1d1a      	adds	r2, r3, #4
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	9203      	str	r2, [sp, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	bfb8      	it	lt
 80069d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80069dc:	3402      	adds	r4, #2
 80069de:	9305      	str	r3, [sp, #20]
 80069e0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006aa0 <_svfiprintf_r+0x1f0>
 80069e4:	7821      	ldrb	r1, [r4, #0]
 80069e6:	2203      	movs	r2, #3
 80069e8:	4650      	mov	r0, sl
 80069ea:	f7f9 fc01 	bl	80001f0 <memchr>
 80069ee:	b140      	cbz	r0, 8006a02 <_svfiprintf_r+0x152>
 80069f0:	2340      	movs	r3, #64	; 0x40
 80069f2:	eba0 000a 	sub.w	r0, r0, sl
 80069f6:	fa03 f000 	lsl.w	r0, r3, r0
 80069fa:	9b04      	ldr	r3, [sp, #16]
 80069fc:	4303      	orrs	r3, r0
 80069fe:	3401      	adds	r4, #1
 8006a00:	9304      	str	r3, [sp, #16]
 8006a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a06:	4827      	ldr	r0, [pc, #156]	; (8006aa4 <_svfiprintf_r+0x1f4>)
 8006a08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a0c:	2206      	movs	r2, #6
 8006a0e:	f7f9 fbef 	bl	80001f0 <memchr>
 8006a12:	2800      	cmp	r0, #0
 8006a14:	d038      	beq.n	8006a88 <_svfiprintf_r+0x1d8>
 8006a16:	4b24      	ldr	r3, [pc, #144]	; (8006aa8 <_svfiprintf_r+0x1f8>)
 8006a18:	bb1b      	cbnz	r3, 8006a62 <_svfiprintf_r+0x1b2>
 8006a1a:	9b03      	ldr	r3, [sp, #12]
 8006a1c:	3307      	adds	r3, #7
 8006a1e:	f023 0307 	bic.w	r3, r3, #7
 8006a22:	3308      	adds	r3, #8
 8006a24:	9303      	str	r3, [sp, #12]
 8006a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a28:	4433      	add	r3, r6
 8006a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a2c:	e767      	b.n	80068fe <_svfiprintf_r+0x4e>
 8006a2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a32:	460c      	mov	r4, r1
 8006a34:	2001      	movs	r0, #1
 8006a36:	e7a5      	b.n	8006984 <_svfiprintf_r+0xd4>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	3401      	adds	r4, #1
 8006a3c:	9305      	str	r3, [sp, #20]
 8006a3e:	4619      	mov	r1, r3
 8006a40:	f04f 0c0a 	mov.w	ip, #10
 8006a44:	4620      	mov	r0, r4
 8006a46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a4a:	3a30      	subs	r2, #48	; 0x30
 8006a4c:	2a09      	cmp	r2, #9
 8006a4e:	d903      	bls.n	8006a58 <_svfiprintf_r+0x1a8>
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d0c5      	beq.n	80069e0 <_svfiprintf_r+0x130>
 8006a54:	9105      	str	r1, [sp, #20]
 8006a56:	e7c3      	b.n	80069e0 <_svfiprintf_r+0x130>
 8006a58:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a5c:	4604      	mov	r4, r0
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e7f0      	b.n	8006a44 <_svfiprintf_r+0x194>
 8006a62:	ab03      	add	r3, sp, #12
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	462a      	mov	r2, r5
 8006a68:	4b10      	ldr	r3, [pc, #64]	; (8006aac <_svfiprintf_r+0x1fc>)
 8006a6a:	a904      	add	r1, sp, #16
 8006a6c:	4638      	mov	r0, r7
 8006a6e:	f7fc fa93 	bl	8002f98 <_printf_float>
 8006a72:	1c42      	adds	r2, r0, #1
 8006a74:	4606      	mov	r6, r0
 8006a76:	d1d6      	bne.n	8006a26 <_svfiprintf_r+0x176>
 8006a78:	89ab      	ldrh	r3, [r5, #12]
 8006a7a:	065b      	lsls	r3, r3, #25
 8006a7c:	f53f af2c 	bmi.w	80068d8 <_svfiprintf_r+0x28>
 8006a80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a82:	b01d      	add	sp, #116	; 0x74
 8006a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a88:	ab03      	add	r3, sp, #12
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	462a      	mov	r2, r5
 8006a8e:	4b07      	ldr	r3, [pc, #28]	; (8006aac <_svfiprintf_r+0x1fc>)
 8006a90:	a904      	add	r1, sp, #16
 8006a92:	4638      	mov	r0, r7
 8006a94:	f7fc fd18 	bl	80034c8 <_printf_i>
 8006a98:	e7eb      	b.n	8006a72 <_svfiprintf_r+0x1c2>
 8006a9a:	bf00      	nop
 8006a9c:	08007b74 	.word	0x08007b74
 8006aa0:	08007b7a 	.word	0x08007b7a
 8006aa4:	08007b7e 	.word	0x08007b7e
 8006aa8:	08002f99 	.word	0x08002f99
 8006aac:	080067f9 	.word	0x080067f9

08006ab0 <nan>:
 8006ab0:	4901      	ldr	r1, [pc, #4]	; (8006ab8 <nan+0x8>)
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	7ff80000 	.word	0x7ff80000

08006abc <_sbrk_r>:
 8006abc:	b538      	push	{r3, r4, r5, lr}
 8006abe:	4d06      	ldr	r5, [pc, #24]	; (8006ad8 <_sbrk_r+0x1c>)
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	4608      	mov	r0, r1
 8006ac6:	602b      	str	r3, [r5, #0]
 8006ac8:	f000 fe1a 	bl	8007700 <_sbrk>
 8006acc:	1c43      	adds	r3, r0, #1
 8006ace:	d102      	bne.n	8006ad6 <_sbrk_r+0x1a>
 8006ad0:	682b      	ldr	r3, [r5, #0]
 8006ad2:	b103      	cbz	r3, 8006ad6 <_sbrk_r+0x1a>
 8006ad4:	6023      	str	r3, [r4, #0]
 8006ad6:	bd38      	pop	{r3, r4, r5, pc}
 8006ad8:	200004b8 	.word	0x200004b8

08006adc <strncmp>:
 8006adc:	b510      	push	{r4, lr}
 8006ade:	4603      	mov	r3, r0
 8006ae0:	b172      	cbz	r2, 8006b00 <strncmp+0x24>
 8006ae2:	3901      	subs	r1, #1
 8006ae4:	1884      	adds	r4, r0, r2
 8006ae6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006aea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006aee:	4290      	cmp	r0, r2
 8006af0:	d101      	bne.n	8006af6 <strncmp+0x1a>
 8006af2:	42a3      	cmp	r3, r4
 8006af4:	d101      	bne.n	8006afa <strncmp+0x1e>
 8006af6:	1a80      	subs	r0, r0, r2
 8006af8:	bd10      	pop	{r4, pc}
 8006afa:	2800      	cmp	r0, #0
 8006afc:	d1f3      	bne.n	8006ae6 <strncmp+0xa>
 8006afe:	e7fa      	b.n	8006af6 <strncmp+0x1a>
 8006b00:	4610      	mov	r0, r2
 8006b02:	e7f9      	b.n	8006af8 <strncmp+0x1c>

08006b04 <__ascii_wctomb>:
 8006b04:	4603      	mov	r3, r0
 8006b06:	4608      	mov	r0, r1
 8006b08:	b141      	cbz	r1, 8006b1c <__ascii_wctomb+0x18>
 8006b0a:	2aff      	cmp	r2, #255	; 0xff
 8006b0c:	d904      	bls.n	8006b18 <__ascii_wctomb+0x14>
 8006b0e:	228a      	movs	r2, #138	; 0x8a
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b16:	4770      	bx	lr
 8006b18:	700a      	strb	r2, [r1, #0]
 8006b1a:	2001      	movs	r0, #1
 8006b1c:	4770      	bx	lr
	...

08006b20 <__assert_func>:
 8006b20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b22:	4614      	mov	r4, r2
 8006b24:	461a      	mov	r2, r3
 8006b26:	4b09      	ldr	r3, [pc, #36]	; (8006b4c <__assert_func+0x2c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4605      	mov	r5, r0
 8006b2c:	68d8      	ldr	r0, [r3, #12]
 8006b2e:	b14c      	cbz	r4, 8006b44 <__assert_func+0x24>
 8006b30:	4b07      	ldr	r3, [pc, #28]	; (8006b50 <__assert_func+0x30>)
 8006b32:	9100      	str	r1, [sp, #0]
 8006b34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b38:	4906      	ldr	r1, [pc, #24]	; (8006b54 <__assert_func+0x34>)
 8006b3a:	462b      	mov	r3, r5
 8006b3c:	f000 f80e 	bl	8006b5c <fiprintf>
 8006b40:	f000 fa8a 	bl	8007058 <abort>
 8006b44:	4b04      	ldr	r3, [pc, #16]	; (8006b58 <__assert_func+0x38>)
 8006b46:	461c      	mov	r4, r3
 8006b48:	e7f3      	b.n	8006b32 <__assert_func+0x12>
 8006b4a:	bf00      	nop
 8006b4c:	20000044 	.word	0x20000044
 8006b50:	08007b85 	.word	0x08007b85
 8006b54:	08007b92 	.word	0x08007b92
 8006b58:	08007bc0 	.word	0x08007bc0

08006b5c <fiprintf>:
 8006b5c:	b40e      	push	{r1, r2, r3}
 8006b5e:	b503      	push	{r0, r1, lr}
 8006b60:	4601      	mov	r1, r0
 8006b62:	ab03      	add	r3, sp, #12
 8006b64:	4805      	ldr	r0, [pc, #20]	; (8006b7c <fiprintf+0x20>)
 8006b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b6a:	6800      	ldr	r0, [r0, #0]
 8006b6c:	9301      	str	r3, [sp, #4]
 8006b6e:	f000 f883 	bl	8006c78 <_vfiprintf_r>
 8006b72:	b002      	add	sp, #8
 8006b74:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b78:	b003      	add	sp, #12
 8006b7a:	4770      	bx	lr
 8006b7c:	20000044 	.word	0x20000044

08006b80 <memmove>:
 8006b80:	4288      	cmp	r0, r1
 8006b82:	b510      	push	{r4, lr}
 8006b84:	eb01 0402 	add.w	r4, r1, r2
 8006b88:	d902      	bls.n	8006b90 <memmove+0x10>
 8006b8a:	4284      	cmp	r4, r0
 8006b8c:	4623      	mov	r3, r4
 8006b8e:	d807      	bhi.n	8006ba0 <memmove+0x20>
 8006b90:	1e43      	subs	r3, r0, #1
 8006b92:	42a1      	cmp	r1, r4
 8006b94:	d008      	beq.n	8006ba8 <memmove+0x28>
 8006b96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b9e:	e7f8      	b.n	8006b92 <memmove+0x12>
 8006ba0:	4402      	add	r2, r0
 8006ba2:	4601      	mov	r1, r0
 8006ba4:	428a      	cmp	r2, r1
 8006ba6:	d100      	bne.n	8006baa <memmove+0x2a>
 8006ba8:	bd10      	pop	{r4, pc}
 8006baa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bb2:	e7f7      	b.n	8006ba4 <memmove+0x24>

08006bb4 <__malloc_lock>:
 8006bb4:	4801      	ldr	r0, [pc, #4]	; (8006bbc <__malloc_lock+0x8>)
 8006bb6:	f000 bc0b 	b.w	80073d0 <__retarget_lock_acquire_recursive>
 8006bba:	bf00      	nop
 8006bbc:	200004bc 	.word	0x200004bc

08006bc0 <__malloc_unlock>:
 8006bc0:	4801      	ldr	r0, [pc, #4]	; (8006bc8 <__malloc_unlock+0x8>)
 8006bc2:	f000 bc06 	b.w	80073d2 <__retarget_lock_release_recursive>
 8006bc6:	bf00      	nop
 8006bc8:	200004bc 	.word	0x200004bc

08006bcc <_realloc_r>:
 8006bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd0:	4680      	mov	r8, r0
 8006bd2:	4614      	mov	r4, r2
 8006bd4:	460e      	mov	r6, r1
 8006bd6:	b921      	cbnz	r1, 8006be2 <_realloc_r+0x16>
 8006bd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bdc:	4611      	mov	r1, r2
 8006bde:	f7ff bd97 	b.w	8006710 <_malloc_r>
 8006be2:	b92a      	cbnz	r2, 8006bf0 <_realloc_r+0x24>
 8006be4:	f7ff fd2a 	bl	800663c <_free_r>
 8006be8:	4625      	mov	r5, r4
 8006bea:	4628      	mov	r0, r5
 8006bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bf0:	f000 fc56 	bl	80074a0 <_malloc_usable_size_r>
 8006bf4:	4284      	cmp	r4, r0
 8006bf6:	4607      	mov	r7, r0
 8006bf8:	d802      	bhi.n	8006c00 <_realloc_r+0x34>
 8006bfa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006bfe:	d812      	bhi.n	8006c26 <_realloc_r+0x5a>
 8006c00:	4621      	mov	r1, r4
 8006c02:	4640      	mov	r0, r8
 8006c04:	f7ff fd84 	bl	8006710 <_malloc_r>
 8006c08:	4605      	mov	r5, r0
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	d0ed      	beq.n	8006bea <_realloc_r+0x1e>
 8006c0e:	42bc      	cmp	r4, r7
 8006c10:	4622      	mov	r2, r4
 8006c12:	4631      	mov	r1, r6
 8006c14:	bf28      	it	cs
 8006c16:	463a      	movcs	r2, r7
 8006c18:	f7ff f83a 	bl	8005c90 <memcpy>
 8006c1c:	4631      	mov	r1, r6
 8006c1e:	4640      	mov	r0, r8
 8006c20:	f7ff fd0c 	bl	800663c <_free_r>
 8006c24:	e7e1      	b.n	8006bea <_realloc_r+0x1e>
 8006c26:	4635      	mov	r5, r6
 8006c28:	e7df      	b.n	8006bea <_realloc_r+0x1e>

08006c2a <__sfputc_r>:
 8006c2a:	6893      	ldr	r3, [r2, #8]
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	b410      	push	{r4}
 8006c32:	6093      	str	r3, [r2, #8]
 8006c34:	da07      	bge.n	8006c46 <__sfputc_r+0x1c>
 8006c36:	6994      	ldr	r4, [r2, #24]
 8006c38:	42a3      	cmp	r3, r4
 8006c3a:	db01      	blt.n	8006c40 <__sfputc_r+0x16>
 8006c3c:	290a      	cmp	r1, #10
 8006c3e:	d102      	bne.n	8006c46 <__sfputc_r+0x1c>
 8006c40:	bc10      	pop	{r4}
 8006c42:	f000 b949 	b.w	8006ed8 <__swbuf_r>
 8006c46:	6813      	ldr	r3, [r2, #0]
 8006c48:	1c58      	adds	r0, r3, #1
 8006c4a:	6010      	str	r0, [r2, #0]
 8006c4c:	7019      	strb	r1, [r3, #0]
 8006c4e:	4608      	mov	r0, r1
 8006c50:	bc10      	pop	{r4}
 8006c52:	4770      	bx	lr

08006c54 <__sfputs_r>:
 8006c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c56:	4606      	mov	r6, r0
 8006c58:	460f      	mov	r7, r1
 8006c5a:	4614      	mov	r4, r2
 8006c5c:	18d5      	adds	r5, r2, r3
 8006c5e:	42ac      	cmp	r4, r5
 8006c60:	d101      	bne.n	8006c66 <__sfputs_r+0x12>
 8006c62:	2000      	movs	r0, #0
 8006c64:	e007      	b.n	8006c76 <__sfputs_r+0x22>
 8006c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c6a:	463a      	mov	r2, r7
 8006c6c:	4630      	mov	r0, r6
 8006c6e:	f7ff ffdc 	bl	8006c2a <__sfputc_r>
 8006c72:	1c43      	adds	r3, r0, #1
 8006c74:	d1f3      	bne.n	8006c5e <__sfputs_r+0xa>
 8006c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006c78 <_vfiprintf_r>:
 8006c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c7c:	460d      	mov	r5, r1
 8006c7e:	b09d      	sub	sp, #116	; 0x74
 8006c80:	4614      	mov	r4, r2
 8006c82:	4698      	mov	r8, r3
 8006c84:	4606      	mov	r6, r0
 8006c86:	b118      	cbz	r0, 8006c90 <_vfiprintf_r+0x18>
 8006c88:	6983      	ldr	r3, [r0, #24]
 8006c8a:	b90b      	cbnz	r3, 8006c90 <_vfiprintf_r+0x18>
 8006c8c:	f000 fb02 	bl	8007294 <__sinit>
 8006c90:	4b89      	ldr	r3, [pc, #548]	; (8006eb8 <_vfiprintf_r+0x240>)
 8006c92:	429d      	cmp	r5, r3
 8006c94:	d11b      	bne.n	8006cce <_vfiprintf_r+0x56>
 8006c96:	6875      	ldr	r5, [r6, #4]
 8006c98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c9a:	07d9      	lsls	r1, r3, #31
 8006c9c:	d405      	bmi.n	8006caa <_vfiprintf_r+0x32>
 8006c9e:	89ab      	ldrh	r3, [r5, #12]
 8006ca0:	059a      	lsls	r2, r3, #22
 8006ca2:	d402      	bmi.n	8006caa <_vfiprintf_r+0x32>
 8006ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ca6:	f000 fb93 	bl	80073d0 <__retarget_lock_acquire_recursive>
 8006caa:	89ab      	ldrh	r3, [r5, #12]
 8006cac:	071b      	lsls	r3, r3, #28
 8006cae:	d501      	bpl.n	8006cb4 <_vfiprintf_r+0x3c>
 8006cb0:	692b      	ldr	r3, [r5, #16]
 8006cb2:	b9eb      	cbnz	r3, 8006cf0 <_vfiprintf_r+0x78>
 8006cb4:	4629      	mov	r1, r5
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	f000 f960 	bl	8006f7c <__swsetup_r>
 8006cbc:	b1c0      	cbz	r0, 8006cf0 <_vfiprintf_r+0x78>
 8006cbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cc0:	07dc      	lsls	r4, r3, #31
 8006cc2:	d50e      	bpl.n	8006ce2 <_vfiprintf_r+0x6a>
 8006cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cc8:	b01d      	add	sp, #116	; 0x74
 8006cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cce:	4b7b      	ldr	r3, [pc, #492]	; (8006ebc <_vfiprintf_r+0x244>)
 8006cd0:	429d      	cmp	r5, r3
 8006cd2:	d101      	bne.n	8006cd8 <_vfiprintf_r+0x60>
 8006cd4:	68b5      	ldr	r5, [r6, #8]
 8006cd6:	e7df      	b.n	8006c98 <_vfiprintf_r+0x20>
 8006cd8:	4b79      	ldr	r3, [pc, #484]	; (8006ec0 <_vfiprintf_r+0x248>)
 8006cda:	429d      	cmp	r5, r3
 8006cdc:	bf08      	it	eq
 8006cde:	68f5      	ldreq	r5, [r6, #12]
 8006ce0:	e7da      	b.n	8006c98 <_vfiprintf_r+0x20>
 8006ce2:	89ab      	ldrh	r3, [r5, #12]
 8006ce4:	0598      	lsls	r0, r3, #22
 8006ce6:	d4ed      	bmi.n	8006cc4 <_vfiprintf_r+0x4c>
 8006ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cea:	f000 fb72 	bl	80073d2 <__retarget_lock_release_recursive>
 8006cee:	e7e9      	b.n	8006cc4 <_vfiprintf_r+0x4c>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8006cf4:	2320      	movs	r3, #32
 8006cf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cfe:	2330      	movs	r3, #48	; 0x30
 8006d00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006ec4 <_vfiprintf_r+0x24c>
 8006d04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d08:	f04f 0901 	mov.w	r9, #1
 8006d0c:	4623      	mov	r3, r4
 8006d0e:	469a      	mov	sl, r3
 8006d10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d14:	b10a      	cbz	r2, 8006d1a <_vfiprintf_r+0xa2>
 8006d16:	2a25      	cmp	r2, #37	; 0x25
 8006d18:	d1f9      	bne.n	8006d0e <_vfiprintf_r+0x96>
 8006d1a:	ebba 0b04 	subs.w	fp, sl, r4
 8006d1e:	d00b      	beq.n	8006d38 <_vfiprintf_r+0xc0>
 8006d20:	465b      	mov	r3, fp
 8006d22:	4622      	mov	r2, r4
 8006d24:	4629      	mov	r1, r5
 8006d26:	4630      	mov	r0, r6
 8006d28:	f7ff ff94 	bl	8006c54 <__sfputs_r>
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	f000 80aa 	beq.w	8006e86 <_vfiprintf_r+0x20e>
 8006d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d34:	445a      	add	r2, fp
 8006d36:	9209      	str	r2, [sp, #36]	; 0x24
 8006d38:	f89a 3000 	ldrb.w	r3, [sl]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f000 80a2 	beq.w	8006e86 <_vfiprintf_r+0x20e>
 8006d42:	2300      	movs	r3, #0
 8006d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d4c:	f10a 0a01 	add.w	sl, sl, #1
 8006d50:	9304      	str	r3, [sp, #16]
 8006d52:	9307      	str	r3, [sp, #28]
 8006d54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d58:	931a      	str	r3, [sp, #104]	; 0x68
 8006d5a:	4654      	mov	r4, sl
 8006d5c:	2205      	movs	r2, #5
 8006d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d62:	4858      	ldr	r0, [pc, #352]	; (8006ec4 <_vfiprintf_r+0x24c>)
 8006d64:	f7f9 fa44 	bl	80001f0 <memchr>
 8006d68:	9a04      	ldr	r2, [sp, #16]
 8006d6a:	b9d8      	cbnz	r0, 8006da4 <_vfiprintf_r+0x12c>
 8006d6c:	06d1      	lsls	r1, r2, #27
 8006d6e:	bf44      	itt	mi
 8006d70:	2320      	movmi	r3, #32
 8006d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d76:	0713      	lsls	r3, r2, #28
 8006d78:	bf44      	itt	mi
 8006d7a:	232b      	movmi	r3, #43	; 0x2b
 8006d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d80:	f89a 3000 	ldrb.w	r3, [sl]
 8006d84:	2b2a      	cmp	r3, #42	; 0x2a
 8006d86:	d015      	beq.n	8006db4 <_vfiprintf_r+0x13c>
 8006d88:	9a07      	ldr	r2, [sp, #28]
 8006d8a:	4654      	mov	r4, sl
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	f04f 0c0a 	mov.w	ip, #10
 8006d92:	4621      	mov	r1, r4
 8006d94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d98:	3b30      	subs	r3, #48	; 0x30
 8006d9a:	2b09      	cmp	r3, #9
 8006d9c:	d94e      	bls.n	8006e3c <_vfiprintf_r+0x1c4>
 8006d9e:	b1b0      	cbz	r0, 8006dce <_vfiprintf_r+0x156>
 8006da0:	9207      	str	r2, [sp, #28]
 8006da2:	e014      	b.n	8006dce <_vfiprintf_r+0x156>
 8006da4:	eba0 0308 	sub.w	r3, r0, r8
 8006da8:	fa09 f303 	lsl.w	r3, r9, r3
 8006dac:	4313      	orrs	r3, r2
 8006dae:	9304      	str	r3, [sp, #16]
 8006db0:	46a2      	mov	sl, r4
 8006db2:	e7d2      	b.n	8006d5a <_vfiprintf_r+0xe2>
 8006db4:	9b03      	ldr	r3, [sp, #12]
 8006db6:	1d19      	adds	r1, r3, #4
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	9103      	str	r1, [sp, #12]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	bfbb      	ittet	lt
 8006dc0:	425b      	neglt	r3, r3
 8006dc2:	f042 0202 	orrlt.w	r2, r2, #2
 8006dc6:	9307      	strge	r3, [sp, #28]
 8006dc8:	9307      	strlt	r3, [sp, #28]
 8006dca:	bfb8      	it	lt
 8006dcc:	9204      	strlt	r2, [sp, #16]
 8006dce:	7823      	ldrb	r3, [r4, #0]
 8006dd0:	2b2e      	cmp	r3, #46	; 0x2e
 8006dd2:	d10c      	bne.n	8006dee <_vfiprintf_r+0x176>
 8006dd4:	7863      	ldrb	r3, [r4, #1]
 8006dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8006dd8:	d135      	bne.n	8006e46 <_vfiprintf_r+0x1ce>
 8006dda:	9b03      	ldr	r3, [sp, #12]
 8006ddc:	1d1a      	adds	r2, r3, #4
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	9203      	str	r2, [sp, #12]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	bfb8      	it	lt
 8006de6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006dea:	3402      	adds	r4, #2
 8006dec:	9305      	str	r3, [sp, #20]
 8006dee:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006ec8 <_vfiprintf_r+0x250>
 8006df2:	7821      	ldrb	r1, [r4, #0]
 8006df4:	2203      	movs	r2, #3
 8006df6:	4650      	mov	r0, sl
 8006df8:	f7f9 f9fa 	bl	80001f0 <memchr>
 8006dfc:	b140      	cbz	r0, 8006e10 <_vfiprintf_r+0x198>
 8006dfe:	2340      	movs	r3, #64	; 0x40
 8006e00:	eba0 000a 	sub.w	r0, r0, sl
 8006e04:	fa03 f000 	lsl.w	r0, r3, r0
 8006e08:	9b04      	ldr	r3, [sp, #16]
 8006e0a:	4303      	orrs	r3, r0
 8006e0c:	3401      	adds	r4, #1
 8006e0e:	9304      	str	r3, [sp, #16]
 8006e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e14:	482d      	ldr	r0, [pc, #180]	; (8006ecc <_vfiprintf_r+0x254>)
 8006e16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e1a:	2206      	movs	r2, #6
 8006e1c:	f7f9 f9e8 	bl	80001f0 <memchr>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	d03f      	beq.n	8006ea4 <_vfiprintf_r+0x22c>
 8006e24:	4b2a      	ldr	r3, [pc, #168]	; (8006ed0 <_vfiprintf_r+0x258>)
 8006e26:	bb1b      	cbnz	r3, 8006e70 <_vfiprintf_r+0x1f8>
 8006e28:	9b03      	ldr	r3, [sp, #12]
 8006e2a:	3307      	adds	r3, #7
 8006e2c:	f023 0307 	bic.w	r3, r3, #7
 8006e30:	3308      	adds	r3, #8
 8006e32:	9303      	str	r3, [sp, #12]
 8006e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e36:	443b      	add	r3, r7
 8006e38:	9309      	str	r3, [sp, #36]	; 0x24
 8006e3a:	e767      	b.n	8006d0c <_vfiprintf_r+0x94>
 8006e3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e40:	460c      	mov	r4, r1
 8006e42:	2001      	movs	r0, #1
 8006e44:	e7a5      	b.n	8006d92 <_vfiprintf_r+0x11a>
 8006e46:	2300      	movs	r3, #0
 8006e48:	3401      	adds	r4, #1
 8006e4a:	9305      	str	r3, [sp, #20]
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	f04f 0c0a 	mov.w	ip, #10
 8006e52:	4620      	mov	r0, r4
 8006e54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e58:	3a30      	subs	r2, #48	; 0x30
 8006e5a:	2a09      	cmp	r2, #9
 8006e5c:	d903      	bls.n	8006e66 <_vfiprintf_r+0x1ee>
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d0c5      	beq.n	8006dee <_vfiprintf_r+0x176>
 8006e62:	9105      	str	r1, [sp, #20]
 8006e64:	e7c3      	b.n	8006dee <_vfiprintf_r+0x176>
 8006e66:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e7f0      	b.n	8006e52 <_vfiprintf_r+0x1da>
 8006e70:	ab03      	add	r3, sp, #12
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	462a      	mov	r2, r5
 8006e76:	4b17      	ldr	r3, [pc, #92]	; (8006ed4 <_vfiprintf_r+0x25c>)
 8006e78:	a904      	add	r1, sp, #16
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	f7fc f88c 	bl	8002f98 <_printf_float>
 8006e80:	4607      	mov	r7, r0
 8006e82:	1c78      	adds	r0, r7, #1
 8006e84:	d1d6      	bne.n	8006e34 <_vfiprintf_r+0x1bc>
 8006e86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e88:	07d9      	lsls	r1, r3, #31
 8006e8a:	d405      	bmi.n	8006e98 <_vfiprintf_r+0x220>
 8006e8c:	89ab      	ldrh	r3, [r5, #12]
 8006e8e:	059a      	lsls	r2, r3, #22
 8006e90:	d402      	bmi.n	8006e98 <_vfiprintf_r+0x220>
 8006e92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e94:	f000 fa9d 	bl	80073d2 <__retarget_lock_release_recursive>
 8006e98:	89ab      	ldrh	r3, [r5, #12]
 8006e9a:	065b      	lsls	r3, r3, #25
 8006e9c:	f53f af12 	bmi.w	8006cc4 <_vfiprintf_r+0x4c>
 8006ea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ea2:	e711      	b.n	8006cc8 <_vfiprintf_r+0x50>
 8006ea4:	ab03      	add	r3, sp, #12
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	462a      	mov	r2, r5
 8006eaa:	4b0a      	ldr	r3, [pc, #40]	; (8006ed4 <_vfiprintf_r+0x25c>)
 8006eac:	a904      	add	r1, sp, #16
 8006eae:	4630      	mov	r0, r6
 8006eb0:	f7fc fb0a 	bl	80034c8 <_printf_i>
 8006eb4:	e7e4      	b.n	8006e80 <_vfiprintf_r+0x208>
 8006eb6:	bf00      	nop
 8006eb8:	08007be4 	.word	0x08007be4
 8006ebc:	08007c04 	.word	0x08007c04
 8006ec0:	08007bc4 	.word	0x08007bc4
 8006ec4:	08007b74 	.word	0x08007b74
 8006ec8:	08007b7a 	.word	0x08007b7a
 8006ecc:	08007b7e 	.word	0x08007b7e
 8006ed0:	08002f99 	.word	0x08002f99
 8006ed4:	08006c55 	.word	0x08006c55

08006ed8 <__swbuf_r>:
 8006ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eda:	460e      	mov	r6, r1
 8006edc:	4614      	mov	r4, r2
 8006ede:	4605      	mov	r5, r0
 8006ee0:	b118      	cbz	r0, 8006eea <__swbuf_r+0x12>
 8006ee2:	6983      	ldr	r3, [r0, #24]
 8006ee4:	b90b      	cbnz	r3, 8006eea <__swbuf_r+0x12>
 8006ee6:	f000 f9d5 	bl	8007294 <__sinit>
 8006eea:	4b21      	ldr	r3, [pc, #132]	; (8006f70 <__swbuf_r+0x98>)
 8006eec:	429c      	cmp	r4, r3
 8006eee:	d12b      	bne.n	8006f48 <__swbuf_r+0x70>
 8006ef0:	686c      	ldr	r4, [r5, #4]
 8006ef2:	69a3      	ldr	r3, [r4, #24]
 8006ef4:	60a3      	str	r3, [r4, #8]
 8006ef6:	89a3      	ldrh	r3, [r4, #12]
 8006ef8:	071a      	lsls	r2, r3, #28
 8006efa:	d52f      	bpl.n	8006f5c <__swbuf_r+0x84>
 8006efc:	6923      	ldr	r3, [r4, #16]
 8006efe:	b36b      	cbz	r3, 8006f5c <__swbuf_r+0x84>
 8006f00:	6923      	ldr	r3, [r4, #16]
 8006f02:	6820      	ldr	r0, [r4, #0]
 8006f04:	1ac0      	subs	r0, r0, r3
 8006f06:	6963      	ldr	r3, [r4, #20]
 8006f08:	b2f6      	uxtb	r6, r6
 8006f0a:	4283      	cmp	r3, r0
 8006f0c:	4637      	mov	r7, r6
 8006f0e:	dc04      	bgt.n	8006f1a <__swbuf_r+0x42>
 8006f10:	4621      	mov	r1, r4
 8006f12:	4628      	mov	r0, r5
 8006f14:	f000 f92a 	bl	800716c <_fflush_r>
 8006f18:	bb30      	cbnz	r0, 8006f68 <__swbuf_r+0x90>
 8006f1a:	68a3      	ldr	r3, [r4, #8]
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	60a3      	str	r3, [r4, #8]
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	1c5a      	adds	r2, r3, #1
 8006f24:	6022      	str	r2, [r4, #0]
 8006f26:	701e      	strb	r6, [r3, #0]
 8006f28:	6963      	ldr	r3, [r4, #20]
 8006f2a:	3001      	adds	r0, #1
 8006f2c:	4283      	cmp	r3, r0
 8006f2e:	d004      	beq.n	8006f3a <__swbuf_r+0x62>
 8006f30:	89a3      	ldrh	r3, [r4, #12]
 8006f32:	07db      	lsls	r3, r3, #31
 8006f34:	d506      	bpl.n	8006f44 <__swbuf_r+0x6c>
 8006f36:	2e0a      	cmp	r6, #10
 8006f38:	d104      	bne.n	8006f44 <__swbuf_r+0x6c>
 8006f3a:	4621      	mov	r1, r4
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	f000 f915 	bl	800716c <_fflush_r>
 8006f42:	b988      	cbnz	r0, 8006f68 <__swbuf_r+0x90>
 8006f44:	4638      	mov	r0, r7
 8006f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f48:	4b0a      	ldr	r3, [pc, #40]	; (8006f74 <__swbuf_r+0x9c>)
 8006f4a:	429c      	cmp	r4, r3
 8006f4c:	d101      	bne.n	8006f52 <__swbuf_r+0x7a>
 8006f4e:	68ac      	ldr	r4, [r5, #8]
 8006f50:	e7cf      	b.n	8006ef2 <__swbuf_r+0x1a>
 8006f52:	4b09      	ldr	r3, [pc, #36]	; (8006f78 <__swbuf_r+0xa0>)
 8006f54:	429c      	cmp	r4, r3
 8006f56:	bf08      	it	eq
 8006f58:	68ec      	ldreq	r4, [r5, #12]
 8006f5a:	e7ca      	b.n	8006ef2 <__swbuf_r+0x1a>
 8006f5c:	4621      	mov	r1, r4
 8006f5e:	4628      	mov	r0, r5
 8006f60:	f000 f80c 	bl	8006f7c <__swsetup_r>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	d0cb      	beq.n	8006f00 <__swbuf_r+0x28>
 8006f68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006f6c:	e7ea      	b.n	8006f44 <__swbuf_r+0x6c>
 8006f6e:	bf00      	nop
 8006f70:	08007be4 	.word	0x08007be4
 8006f74:	08007c04 	.word	0x08007c04
 8006f78:	08007bc4 	.word	0x08007bc4

08006f7c <__swsetup_r>:
 8006f7c:	4b32      	ldr	r3, [pc, #200]	; (8007048 <__swsetup_r+0xcc>)
 8006f7e:	b570      	push	{r4, r5, r6, lr}
 8006f80:	681d      	ldr	r5, [r3, #0]
 8006f82:	4606      	mov	r6, r0
 8006f84:	460c      	mov	r4, r1
 8006f86:	b125      	cbz	r5, 8006f92 <__swsetup_r+0x16>
 8006f88:	69ab      	ldr	r3, [r5, #24]
 8006f8a:	b913      	cbnz	r3, 8006f92 <__swsetup_r+0x16>
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	f000 f981 	bl	8007294 <__sinit>
 8006f92:	4b2e      	ldr	r3, [pc, #184]	; (800704c <__swsetup_r+0xd0>)
 8006f94:	429c      	cmp	r4, r3
 8006f96:	d10f      	bne.n	8006fb8 <__swsetup_r+0x3c>
 8006f98:	686c      	ldr	r4, [r5, #4]
 8006f9a:	89a3      	ldrh	r3, [r4, #12]
 8006f9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fa0:	0719      	lsls	r1, r3, #28
 8006fa2:	d42c      	bmi.n	8006ffe <__swsetup_r+0x82>
 8006fa4:	06dd      	lsls	r5, r3, #27
 8006fa6:	d411      	bmi.n	8006fcc <__swsetup_r+0x50>
 8006fa8:	2309      	movs	r3, #9
 8006faa:	6033      	str	r3, [r6, #0]
 8006fac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006fb0:	81a3      	strh	r3, [r4, #12]
 8006fb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fb6:	e03e      	b.n	8007036 <__swsetup_r+0xba>
 8006fb8:	4b25      	ldr	r3, [pc, #148]	; (8007050 <__swsetup_r+0xd4>)
 8006fba:	429c      	cmp	r4, r3
 8006fbc:	d101      	bne.n	8006fc2 <__swsetup_r+0x46>
 8006fbe:	68ac      	ldr	r4, [r5, #8]
 8006fc0:	e7eb      	b.n	8006f9a <__swsetup_r+0x1e>
 8006fc2:	4b24      	ldr	r3, [pc, #144]	; (8007054 <__swsetup_r+0xd8>)
 8006fc4:	429c      	cmp	r4, r3
 8006fc6:	bf08      	it	eq
 8006fc8:	68ec      	ldreq	r4, [r5, #12]
 8006fca:	e7e6      	b.n	8006f9a <__swsetup_r+0x1e>
 8006fcc:	0758      	lsls	r0, r3, #29
 8006fce:	d512      	bpl.n	8006ff6 <__swsetup_r+0x7a>
 8006fd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fd2:	b141      	cbz	r1, 8006fe6 <__swsetup_r+0x6a>
 8006fd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fd8:	4299      	cmp	r1, r3
 8006fda:	d002      	beq.n	8006fe2 <__swsetup_r+0x66>
 8006fdc:	4630      	mov	r0, r6
 8006fde:	f7ff fb2d 	bl	800663c <_free_r>
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	6363      	str	r3, [r4, #52]	; 0x34
 8006fe6:	89a3      	ldrh	r3, [r4, #12]
 8006fe8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006fec:	81a3      	strh	r3, [r4, #12]
 8006fee:	2300      	movs	r3, #0
 8006ff0:	6063      	str	r3, [r4, #4]
 8006ff2:	6923      	ldr	r3, [r4, #16]
 8006ff4:	6023      	str	r3, [r4, #0]
 8006ff6:	89a3      	ldrh	r3, [r4, #12]
 8006ff8:	f043 0308 	orr.w	r3, r3, #8
 8006ffc:	81a3      	strh	r3, [r4, #12]
 8006ffe:	6923      	ldr	r3, [r4, #16]
 8007000:	b94b      	cbnz	r3, 8007016 <__swsetup_r+0x9a>
 8007002:	89a3      	ldrh	r3, [r4, #12]
 8007004:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800700c:	d003      	beq.n	8007016 <__swsetup_r+0x9a>
 800700e:	4621      	mov	r1, r4
 8007010:	4630      	mov	r0, r6
 8007012:	f000 fa05 	bl	8007420 <__smakebuf_r>
 8007016:	89a0      	ldrh	r0, [r4, #12]
 8007018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800701c:	f010 0301 	ands.w	r3, r0, #1
 8007020:	d00a      	beq.n	8007038 <__swsetup_r+0xbc>
 8007022:	2300      	movs	r3, #0
 8007024:	60a3      	str	r3, [r4, #8]
 8007026:	6963      	ldr	r3, [r4, #20]
 8007028:	425b      	negs	r3, r3
 800702a:	61a3      	str	r3, [r4, #24]
 800702c:	6923      	ldr	r3, [r4, #16]
 800702e:	b943      	cbnz	r3, 8007042 <__swsetup_r+0xc6>
 8007030:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007034:	d1ba      	bne.n	8006fac <__swsetup_r+0x30>
 8007036:	bd70      	pop	{r4, r5, r6, pc}
 8007038:	0781      	lsls	r1, r0, #30
 800703a:	bf58      	it	pl
 800703c:	6963      	ldrpl	r3, [r4, #20]
 800703e:	60a3      	str	r3, [r4, #8]
 8007040:	e7f4      	b.n	800702c <__swsetup_r+0xb0>
 8007042:	2000      	movs	r0, #0
 8007044:	e7f7      	b.n	8007036 <__swsetup_r+0xba>
 8007046:	bf00      	nop
 8007048:	20000044 	.word	0x20000044
 800704c:	08007be4 	.word	0x08007be4
 8007050:	08007c04 	.word	0x08007c04
 8007054:	08007bc4 	.word	0x08007bc4

08007058 <abort>:
 8007058:	b508      	push	{r3, lr}
 800705a:	2006      	movs	r0, #6
 800705c:	f000 fa50 	bl	8007500 <raise>
 8007060:	2001      	movs	r0, #1
 8007062:	f000 fb63 	bl	800772c <_exit>
	...

08007068 <__sflush_r>:
 8007068:	898a      	ldrh	r2, [r1, #12]
 800706a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706c:	4605      	mov	r5, r0
 800706e:	0710      	lsls	r0, r2, #28
 8007070:	460c      	mov	r4, r1
 8007072:	d457      	bmi.n	8007124 <__sflush_r+0xbc>
 8007074:	684b      	ldr	r3, [r1, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	dc04      	bgt.n	8007084 <__sflush_r+0x1c>
 800707a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800707c:	2b00      	cmp	r3, #0
 800707e:	dc01      	bgt.n	8007084 <__sflush_r+0x1c>
 8007080:	2000      	movs	r0, #0
 8007082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007086:	2e00      	cmp	r6, #0
 8007088:	d0fa      	beq.n	8007080 <__sflush_r+0x18>
 800708a:	2300      	movs	r3, #0
 800708c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007090:	682f      	ldr	r7, [r5, #0]
 8007092:	602b      	str	r3, [r5, #0]
 8007094:	d032      	beq.n	80070fc <__sflush_r+0x94>
 8007096:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007098:	89a3      	ldrh	r3, [r4, #12]
 800709a:	075a      	lsls	r2, r3, #29
 800709c:	d505      	bpl.n	80070aa <__sflush_r+0x42>
 800709e:	6863      	ldr	r3, [r4, #4]
 80070a0:	1ac0      	subs	r0, r0, r3
 80070a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070a4:	b10b      	cbz	r3, 80070aa <__sflush_r+0x42>
 80070a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070a8:	1ac0      	subs	r0, r0, r3
 80070aa:	2300      	movs	r3, #0
 80070ac:	4602      	mov	r2, r0
 80070ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070b0:	6a21      	ldr	r1, [r4, #32]
 80070b2:	4628      	mov	r0, r5
 80070b4:	47b0      	blx	r6
 80070b6:	1c43      	adds	r3, r0, #1
 80070b8:	89a3      	ldrh	r3, [r4, #12]
 80070ba:	d106      	bne.n	80070ca <__sflush_r+0x62>
 80070bc:	6829      	ldr	r1, [r5, #0]
 80070be:	291d      	cmp	r1, #29
 80070c0:	d82c      	bhi.n	800711c <__sflush_r+0xb4>
 80070c2:	4a29      	ldr	r2, [pc, #164]	; (8007168 <__sflush_r+0x100>)
 80070c4:	40ca      	lsrs	r2, r1
 80070c6:	07d6      	lsls	r6, r2, #31
 80070c8:	d528      	bpl.n	800711c <__sflush_r+0xb4>
 80070ca:	2200      	movs	r2, #0
 80070cc:	6062      	str	r2, [r4, #4]
 80070ce:	04d9      	lsls	r1, r3, #19
 80070d0:	6922      	ldr	r2, [r4, #16]
 80070d2:	6022      	str	r2, [r4, #0]
 80070d4:	d504      	bpl.n	80070e0 <__sflush_r+0x78>
 80070d6:	1c42      	adds	r2, r0, #1
 80070d8:	d101      	bne.n	80070de <__sflush_r+0x76>
 80070da:	682b      	ldr	r3, [r5, #0]
 80070dc:	b903      	cbnz	r3, 80070e0 <__sflush_r+0x78>
 80070de:	6560      	str	r0, [r4, #84]	; 0x54
 80070e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070e2:	602f      	str	r7, [r5, #0]
 80070e4:	2900      	cmp	r1, #0
 80070e6:	d0cb      	beq.n	8007080 <__sflush_r+0x18>
 80070e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070ec:	4299      	cmp	r1, r3
 80070ee:	d002      	beq.n	80070f6 <__sflush_r+0x8e>
 80070f0:	4628      	mov	r0, r5
 80070f2:	f7ff faa3 	bl	800663c <_free_r>
 80070f6:	2000      	movs	r0, #0
 80070f8:	6360      	str	r0, [r4, #52]	; 0x34
 80070fa:	e7c2      	b.n	8007082 <__sflush_r+0x1a>
 80070fc:	6a21      	ldr	r1, [r4, #32]
 80070fe:	2301      	movs	r3, #1
 8007100:	4628      	mov	r0, r5
 8007102:	47b0      	blx	r6
 8007104:	1c41      	adds	r1, r0, #1
 8007106:	d1c7      	bne.n	8007098 <__sflush_r+0x30>
 8007108:	682b      	ldr	r3, [r5, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d0c4      	beq.n	8007098 <__sflush_r+0x30>
 800710e:	2b1d      	cmp	r3, #29
 8007110:	d001      	beq.n	8007116 <__sflush_r+0xae>
 8007112:	2b16      	cmp	r3, #22
 8007114:	d101      	bne.n	800711a <__sflush_r+0xb2>
 8007116:	602f      	str	r7, [r5, #0]
 8007118:	e7b2      	b.n	8007080 <__sflush_r+0x18>
 800711a:	89a3      	ldrh	r3, [r4, #12]
 800711c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007120:	81a3      	strh	r3, [r4, #12]
 8007122:	e7ae      	b.n	8007082 <__sflush_r+0x1a>
 8007124:	690f      	ldr	r7, [r1, #16]
 8007126:	2f00      	cmp	r7, #0
 8007128:	d0aa      	beq.n	8007080 <__sflush_r+0x18>
 800712a:	0793      	lsls	r3, r2, #30
 800712c:	680e      	ldr	r6, [r1, #0]
 800712e:	bf08      	it	eq
 8007130:	694b      	ldreq	r3, [r1, #20]
 8007132:	600f      	str	r7, [r1, #0]
 8007134:	bf18      	it	ne
 8007136:	2300      	movne	r3, #0
 8007138:	1bf6      	subs	r6, r6, r7
 800713a:	608b      	str	r3, [r1, #8]
 800713c:	2e00      	cmp	r6, #0
 800713e:	dd9f      	ble.n	8007080 <__sflush_r+0x18>
 8007140:	6a21      	ldr	r1, [r4, #32]
 8007142:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007146:	4633      	mov	r3, r6
 8007148:	463a      	mov	r2, r7
 800714a:	4628      	mov	r0, r5
 800714c:	47e0      	blx	ip
 800714e:	2800      	cmp	r0, #0
 8007150:	dc06      	bgt.n	8007160 <__sflush_r+0xf8>
 8007152:	89a3      	ldrh	r3, [r4, #12]
 8007154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007158:	81a3      	strh	r3, [r4, #12]
 800715a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800715e:	e790      	b.n	8007082 <__sflush_r+0x1a>
 8007160:	4407      	add	r7, r0
 8007162:	1a36      	subs	r6, r6, r0
 8007164:	e7ea      	b.n	800713c <__sflush_r+0xd4>
 8007166:	bf00      	nop
 8007168:	20400001 	.word	0x20400001

0800716c <_fflush_r>:
 800716c:	b538      	push	{r3, r4, r5, lr}
 800716e:	690b      	ldr	r3, [r1, #16]
 8007170:	4605      	mov	r5, r0
 8007172:	460c      	mov	r4, r1
 8007174:	b913      	cbnz	r3, 800717c <_fflush_r+0x10>
 8007176:	2500      	movs	r5, #0
 8007178:	4628      	mov	r0, r5
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	b118      	cbz	r0, 8007186 <_fflush_r+0x1a>
 800717e:	6983      	ldr	r3, [r0, #24]
 8007180:	b90b      	cbnz	r3, 8007186 <_fflush_r+0x1a>
 8007182:	f000 f887 	bl	8007294 <__sinit>
 8007186:	4b14      	ldr	r3, [pc, #80]	; (80071d8 <_fflush_r+0x6c>)
 8007188:	429c      	cmp	r4, r3
 800718a:	d11b      	bne.n	80071c4 <_fflush_r+0x58>
 800718c:	686c      	ldr	r4, [r5, #4]
 800718e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d0ef      	beq.n	8007176 <_fflush_r+0xa>
 8007196:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007198:	07d0      	lsls	r0, r2, #31
 800719a:	d404      	bmi.n	80071a6 <_fflush_r+0x3a>
 800719c:	0599      	lsls	r1, r3, #22
 800719e:	d402      	bmi.n	80071a6 <_fflush_r+0x3a>
 80071a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071a2:	f000 f915 	bl	80073d0 <__retarget_lock_acquire_recursive>
 80071a6:	4628      	mov	r0, r5
 80071a8:	4621      	mov	r1, r4
 80071aa:	f7ff ff5d 	bl	8007068 <__sflush_r>
 80071ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071b0:	07da      	lsls	r2, r3, #31
 80071b2:	4605      	mov	r5, r0
 80071b4:	d4e0      	bmi.n	8007178 <_fflush_r+0xc>
 80071b6:	89a3      	ldrh	r3, [r4, #12]
 80071b8:	059b      	lsls	r3, r3, #22
 80071ba:	d4dd      	bmi.n	8007178 <_fflush_r+0xc>
 80071bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071be:	f000 f908 	bl	80073d2 <__retarget_lock_release_recursive>
 80071c2:	e7d9      	b.n	8007178 <_fflush_r+0xc>
 80071c4:	4b05      	ldr	r3, [pc, #20]	; (80071dc <_fflush_r+0x70>)
 80071c6:	429c      	cmp	r4, r3
 80071c8:	d101      	bne.n	80071ce <_fflush_r+0x62>
 80071ca:	68ac      	ldr	r4, [r5, #8]
 80071cc:	e7df      	b.n	800718e <_fflush_r+0x22>
 80071ce:	4b04      	ldr	r3, [pc, #16]	; (80071e0 <_fflush_r+0x74>)
 80071d0:	429c      	cmp	r4, r3
 80071d2:	bf08      	it	eq
 80071d4:	68ec      	ldreq	r4, [r5, #12]
 80071d6:	e7da      	b.n	800718e <_fflush_r+0x22>
 80071d8:	08007be4 	.word	0x08007be4
 80071dc:	08007c04 	.word	0x08007c04
 80071e0:	08007bc4 	.word	0x08007bc4

080071e4 <std>:
 80071e4:	2300      	movs	r3, #0
 80071e6:	b510      	push	{r4, lr}
 80071e8:	4604      	mov	r4, r0
 80071ea:	e9c0 3300 	strd	r3, r3, [r0]
 80071ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071f2:	6083      	str	r3, [r0, #8]
 80071f4:	8181      	strh	r1, [r0, #12]
 80071f6:	6643      	str	r3, [r0, #100]	; 0x64
 80071f8:	81c2      	strh	r2, [r0, #14]
 80071fa:	6183      	str	r3, [r0, #24]
 80071fc:	4619      	mov	r1, r3
 80071fe:	2208      	movs	r2, #8
 8007200:	305c      	adds	r0, #92	; 0x5c
 8007202:	f7fb fe23 	bl	8002e4c <memset>
 8007206:	4b05      	ldr	r3, [pc, #20]	; (800721c <std+0x38>)
 8007208:	6263      	str	r3, [r4, #36]	; 0x24
 800720a:	4b05      	ldr	r3, [pc, #20]	; (8007220 <std+0x3c>)
 800720c:	62a3      	str	r3, [r4, #40]	; 0x28
 800720e:	4b05      	ldr	r3, [pc, #20]	; (8007224 <std+0x40>)
 8007210:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007212:	4b05      	ldr	r3, [pc, #20]	; (8007228 <std+0x44>)
 8007214:	6224      	str	r4, [r4, #32]
 8007216:	6323      	str	r3, [r4, #48]	; 0x30
 8007218:	bd10      	pop	{r4, pc}
 800721a:	bf00      	nop
 800721c:	08007539 	.word	0x08007539
 8007220:	0800755b 	.word	0x0800755b
 8007224:	08007593 	.word	0x08007593
 8007228:	080075b7 	.word	0x080075b7

0800722c <_cleanup_r>:
 800722c:	4901      	ldr	r1, [pc, #4]	; (8007234 <_cleanup_r+0x8>)
 800722e:	f000 b8af 	b.w	8007390 <_fwalk_reent>
 8007232:	bf00      	nop
 8007234:	0800716d 	.word	0x0800716d

08007238 <__sfmoreglue>:
 8007238:	b570      	push	{r4, r5, r6, lr}
 800723a:	2268      	movs	r2, #104	; 0x68
 800723c:	1e4d      	subs	r5, r1, #1
 800723e:	4355      	muls	r5, r2
 8007240:	460e      	mov	r6, r1
 8007242:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007246:	f7ff fa63 	bl	8006710 <_malloc_r>
 800724a:	4604      	mov	r4, r0
 800724c:	b140      	cbz	r0, 8007260 <__sfmoreglue+0x28>
 800724e:	2100      	movs	r1, #0
 8007250:	e9c0 1600 	strd	r1, r6, [r0]
 8007254:	300c      	adds	r0, #12
 8007256:	60a0      	str	r0, [r4, #8]
 8007258:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800725c:	f7fb fdf6 	bl	8002e4c <memset>
 8007260:	4620      	mov	r0, r4
 8007262:	bd70      	pop	{r4, r5, r6, pc}

08007264 <__sfp_lock_acquire>:
 8007264:	4801      	ldr	r0, [pc, #4]	; (800726c <__sfp_lock_acquire+0x8>)
 8007266:	f000 b8b3 	b.w	80073d0 <__retarget_lock_acquire_recursive>
 800726a:	bf00      	nop
 800726c:	200004bd 	.word	0x200004bd

08007270 <__sfp_lock_release>:
 8007270:	4801      	ldr	r0, [pc, #4]	; (8007278 <__sfp_lock_release+0x8>)
 8007272:	f000 b8ae 	b.w	80073d2 <__retarget_lock_release_recursive>
 8007276:	bf00      	nop
 8007278:	200004bd 	.word	0x200004bd

0800727c <__sinit_lock_acquire>:
 800727c:	4801      	ldr	r0, [pc, #4]	; (8007284 <__sinit_lock_acquire+0x8>)
 800727e:	f000 b8a7 	b.w	80073d0 <__retarget_lock_acquire_recursive>
 8007282:	bf00      	nop
 8007284:	200004be 	.word	0x200004be

08007288 <__sinit_lock_release>:
 8007288:	4801      	ldr	r0, [pc, #4]	; (8007290 <__sinit_lock_release+0x8>)
 800728a:	f000 b8a2 	b.w	80073d2 <__retarget_lock_release_recursive>
 800728e:	bf00      	nop
 8007290:	200004be 	.word	0x200004be

08007294 <__sinit>:
 8007294:	b510      	push	{r4, lr}
 8007296:	4604      	mov	r4, r0
 8007298:	f7ff fff0 	bl	800727c <__sinit_lock_acquire>
 800729c:	69a3      	ldr	r3, [r4, #24]
 800729e:	b11b      	cbz	r3, 80072a8 <__sinit+0x14>
 80072a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072a4:	f7ff bff0 	b.w	8007288 <__sinit_lock_release>
 80072a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80072ac:	6523      	str	r3, [r4, #80]	; 0x50
 80072ae:	4b13      	ldr	r3, [pc, #76]	; (80072fc <__sinit+0x68>)
 80072b0:	4a13      	ldr	r2, [pc, #76]	; (8007300 <__sinit+0x6c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80072b6:	42a3      	cmp	r3, r4
 80072b8:	bf04      	itt	eq
 80072ba:	2301      	moveq	r3, #1
 80072bc:	61a3      	streq	r3, [r4, #24]
 80072be:	4620      	mov	r0, r4
 80072c0:	f000 f820 	bl	8007304 <__sfp>
 80072c4:	6060      	str	r0, [r4, #4]
 80072c6:	4620      	mov	r0, r4
 80072c8:	f000 f81c 	bl	8007304 <__sfp>
 80072cc:	60a0      	str	r0, [r4, #8]
 80072ce:	4620      	mov	r0, r4
 80072d0:	f000 f818 	bl	8007304 <__sfp>
 80072d4:	2200      	movs	r2, #0
 80072d6:	60e0      	str	r0, [r4, #12]
 80072d8:	2104      	movs	r1, #4
 80072da:	6860      	ldr	r0, [r4, #4]
 80072dc:	f7ff ff82 	bl	80071e4 <std>
 80072e0:	68a0      	ldr	r0, [r4, #8]
 80072e2:	2201      	movs	r2, #1
 80072e4:	2109      	movs	r1, #9
 80072e6:	f7ff ff7d 	bl	80071e4 <std>
 80072ea:	68e0      	ldr	r0, [r4, #12]
 80072ec:	2202      	movs	r2, #2
 80072ee:	2112      	movs	r1, #18
 80072f0:	f7ff ff78 	bl	80071e4 <std>
 80072f4:	2301      	movs	r3, #1
 80072f6:	61a3      	str	r3, [r4, #24]
 80072f8:	e7d2      	b.n	80072a0 <__sinit+0xc>
 80072fa:	bf00      	nop
 80072fc:	0800777c 	.word	0x0800777c
 8007300:	0800722d 	.word	0x0800722d

08007304 <__sfp>:
 8007304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007306:	4607      	mov	r7, r0
 8007308:	f7ff ffac 	bl	8007264 <__sfp_lock_acquire>
 800730c:	4b1e      	ldr	r3, [pc, #120]	; (8007388 <__sfp+0x84>)
 800730e:	681e      	ldr	r6, [r3, #0]
 8007310:	69b3      	ldr	r3, [r6, #24]
 8007312:	b913      	cbnz	r3, 800731a <__sfp+0x16>
 8007314:	4630      	mov	r0, r6
 8007316:	f7ff ffbd 	bl	8007294 <__sinit>
 800731a:	3648      	adds	r6, #72	; 0x48
 800731c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007320:	3b01      	subs	r3, #1
 8007322:	d503      	bpl.n	800732c <__sfp+0x28>
 8007324:	6833      	ldr	r3, [r6, #0]
 8007326:	b30b      	cbz	r3, 800736c <__sfp+0x68>
 8007328:	6836      	ldr	r6, [r6, #0]
 800732a:	e7f7      	b.n	800731c <__sfp+0x18>
 800732c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007330:	b9d5      	cbnz	r5, 8007368 <__sfp+0x64>
 8007332:	4b16      	ldr	r3, [pc, #88]	; (800738c <__sfp+0x88>)
 8007334:	60e3      	str	r3, [r4, #12]
 8007336:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800733a:	6665      	str	r5, [r4, #100]	; 0x64
 800733c:	f000 f847 	bl	80073ce <__retarget_lock_init_recursive>
 8007340:	f7ff ff96 	bl	8007270 <__sfp_lock_release>
 8007344:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007348:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800734c:	6025      	str	r5, [r4, #0]
 800734e:	61a5      	str	r5, [r4, #24]
 8007350:	2208      	movs	r2, #8
 8007352:	4629      	mov	r1, r5
 8007354:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007358:	f7fb fd78 	bl	8002e4c <memset>
 800735c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007360:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007364:	4620      	mov	r0, r4
 8007366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007368:	3468      	adds	r4, #104	; 0x68
 800736a:	e7d9      	b.n	8007320 <__sfp+0x1c>
 800736c:	2104      	movs	r1, #4
 800736e:	4638      	mov	r0, r7
 8007370:	f7ff ff62 	bl	8007238 <__sfmoreglue>
 8007374:	4604      	mov	r4, r0
 8007376:	6030      	str	r0, [r6, #0]
 8007378:	2800      	cmp	r0, #0
 800737a:	d1d5      	bne.n	8007328 <__sfp+0x24>
 800737c:	f7ff ff78 	bl	8007270 <__sfp_lock_release>
 8007380:	230c      	movs	r3, #12
 8007382:	603b      	str	r3, [r7, #0]
 8007384:	e7ee      	b.n	8007364 <__sfp+0x60>
 8007386:	bf00      	nop
 8007388:	0800777c 	.word	0x0800777c
 800738c:	ffff0001 	.word	0xffff0001

08007390 <_fwalk_reent>:
 8007390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007394:	4606      	mov	r6, r0
 8007396:	4688      	mov	r8, r1
 8007398:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800739c:	2700      	movs	r7, #0
 800739e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073a2:	f1b9 0901 	subs.w	r9, r9, #1
 80073a6:	d505      	bpl.n	80073b4 <_fwalk_reent+0x24>
 80073a8:	6824      	ldr	r4, [r4, #0]
 80073aa:	2c00      	cmp	r4, #0
 80073ac:	d1f7      	bne.n	800739e <_fwalk_reent+0xe>
 80073ae:	4638      	mov	r0, r7
 80073b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073b4:	89ab      	ldrh	r3, [r5, #12]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d907      	bls.n	80073ca <_fwalk_reent+0x3a>
 80073ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073be:	3301      	adds	r3, #1
 80073c0:	d003      	beq.n	80073ca <_fwalk_reent+0x3a>
 80073c2:	4629      	mov	r1, r5
 80073c4:	4630      	mov	r0, r6
 80073c6:	47c0      	blx	r8
 80073c8:	4307      	orrs	r7, r0
 80073ca:	3568      	adds	r5, #104	; 0x68
 80073cc:	e7e9      	b.n	80073a2 <_fwalk_reent+0x12>

080073ce <__retarget_lock_init_recursive>:
 80073ce:	4770      	bx	lr

080073d0 <__retarget_lock_acquire_recursive>:
 80073d0:	4770      	bx	lr

080073d2 <__retarget_lock_release_recursive>:
 80073d2:	4770      	bx	lr

080073d4 <__swhatbuf_r>:
 80073d4:	b570      	push	{r4, r5, r6, lr}
 80073d6:	460e      	mov	r6, r1
 80073d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073dc:	2900      	cmp	r1, #0
 80073de:	b096      	sub	sp, #88	; 0x58
 80073e0:	4614      	mov	r4, r2
 80073e2:	461d      	mov	r5, r3
 80073e4:	da08      	bge.n	80073f8 <__swhatbuf_r+0x24>
 80073e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	602a      	str	r2, [r5, #0]
 80073ee:	061a      	lsls	r2, r3, #24
 80073f0:	d410      	bmi.n	8007414 <__swhatbuf_r+0x40>
 80073f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073f6:	e00e      	b.n	8007416 <__swhatbuf_r+0x42>
 80073f8:	466a      	mov	r2, sp
 80073fa:	f000 f903 	bl	8007604 <_fstat_r>
 80073fe:	2800      	cmp	r0, #0
 8007400:	dbf1      	blt.n	80073e6 <__swhatbuf_r+0x12>
 8007402:	9a01      	ldr	r2, [sp, #4]
 8007404:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007408:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800740c:	425a      	negs	r2, r3
 800740e:	415a      	adcs	r2, r3
 8007410:	602a      	str	r2, [r5, #0]
 8007412:	e7ee      	b.n	80073f2 <__swhatbuf_r+0x1e>
 8007414:	2340      	movs	r3, #64	; 0x40
 8007416:	2000      	movs	r0, #0
 8007418:	6023      	str	r3, [r4, #0]
 800741a:	b016      	add	sp, #88	; 0x58
 800741c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007420 <__smakebuf_r>:
 8007420:	898b      	ldrh	r3, [r1, #12]
 8007422:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007424:	079d      	lsls	r5, r3, #30
 8007426:	4606      	mov	r6, r0
 8007428:	460c      	mov	r4, r1
 800742a:	d507      	bpl.n	800743c <__smakebuf_r+0x1c>
 800742c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007430:	6023      	str	r3, [r4, #0]
 8007432:	6123      	str	r3, [r4, #16]
 8007434:	2301      	movs	r3, #1
 8007436:	6163      	str	r3, [r4, #20]
 8007438:	b002      	add	sp, #8
 800743a:	bd70      	pop	{r4, r5, r6, pc}
 800743c:	ab01      	add	r3, sp, #4
 800743e:	466a      	mov	r2, sp
 8007440:	f7ff ffc8 	bl	80073d4 <__swhatbuf_r>
 8007444:	9900      	ldr	r1, [sp, #0]
 8007446:	4605      	mov	r5, r0
 8007448:	4630      	mov	r0, r6
 800744a:	f7ff f961 	bl	8006710 <_malloc_r>
 800744e:	b948      	cbnz	r0, 8007464 <__smakebuf_r+0x44>
 8007450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007454:	059a      	lsls	r2, r3, #22
 8007456:	d4ef      	bmi.n	8007438 <__smakebuf_r+0x18>
 8007458:	f023 0303 	bic.w	r3, r3, #3
 800745c:	f043 0302 	orr.w	r3, r3, #2
 8007460:	81a3      	strh	r3, [r4, #12]
 8007462:	e7e3      	b.n	800742c <__smakebuf_r+0xc>
 8007464:	4b0d      	ldr	r3, [pc, #52]	; (800749c <__smakebuf_r+0x7c>)
 8007466:	62b3      	str	r3, [r6, #40]	; 0x28
 8007468:	89a3      	ldrh	r3, [r4, #12]
 800746a:	6020      	str	r0, [r4, #0]
 800746c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007470:	81a3      	strh	r3, [r4, #12]
 8007472:	9b00      	ldr	r3, [sp, #0]
 8007474:	6163      	str	r3, [r4, #20]
 8007476:	9b01      	ldr	r3, [sp, #4]
 8007478:	6120      	str	r0, [r4, #16]
 800747a:	b15b      	cbz	r3, 8007494 <__smakebuf_r+0x74>
 800747c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007480:	4630      	mov	r0, r6
 8007482:	f000 f8d1 	bl	8007628 <_isatty_r>
 8007486:	b128      	cbz	r0, 8007494 <__smakebuf_r+0x74>
 8007488:	89a3      	ldrh	r3, [r4, #12]
 800748a:	f023 0303 	bic.w	r3, r3, #3
 800748e:	f043 0301 	orr.w	r3, r3, #1
 8007492:	81a3      	strh	r3, [r4, #12]
 8007494:	89a0      	ldrh	r0, [r4, #12]
 8007496:	4305      	orrs	r5, r0
 8007498:	81a5      	strh	r5, [r4, #12]
 800749a:	e7cd      	b.n	8007438 <__smakebuf_r+0x18>
 800749c:	0800722d 	.word	0x0800722d

080074a0 <_malloc_usable_size_r>:
 80074a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074a4:	1f18      	subs	r0, r3, #4
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	bfbc      	itt	lt
 80074aa:	580b      	ldrlt	r3, [r1, r0]
 80074ac:	18c0      	addlt	r0, r0, r3
 80074ae:	4770      	bx	lr

080074b0 <_raise_r>:
 80074b0:	291f      	cmp	r1, #31
 80074b2:	b538      	push	{r3, r4, r5, lr}
 80074b4:	4604      	mov	r4, r0
 80074b6:	460d      	mov	r5, r1
 80074b8:	d904      	bls.n	80074c4 <_raise_r+0x14>
 80074ba:	2316      	movs	r3, #22
 80074bc:	6003      	str	r3, [r0, #0]
 80074be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074c2:	bd38      	pop	{r3, r4, r5, pc}
 80074c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80074c6:	b112      	cbz	r2, 80074ce <_raise_r+0x1e>
 80074c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074cc:	b94b      	cbnz	r3, 80074e2 <_raise_r+0x32>
 80074ce:	4620      	mov	r0, r4
 80074d0:	f000 f830 	bl	8007534 <_getpid_r>
 80074d4:	462a      	mov	r2, r5
 80074d6:	4601      	mov	r1, r0
 80074d8:	4620      	mov	r0, r4
 80074da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074de:	f000 b817 	b.w	8007510 <_kill_r>
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d00a      	beq.n	80074fc <_raise_r+0x4c>
 80074e6:	1c59      	adds	r1, r3, #1
 80074e8:	d103      	bne.n	80074f2 <_raise_r+0x42>
 80074ea:	2316      	movs	r3, #22
 80074ec:	6003      	str	r3, [r0, #0]
 80074ee:	2001      	movs	r0, #1
 80074f0:	e7e7      	b.n	80074c2 <_raise_r+0x12>
 80074f2:	2400      	movs	r4, #0
 80074f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80074f8:	4628      	mov	r0, r5
 80074fa:	4798      	blx	r3
 80074fc:	2000      	movs	r0, #0
 80074fe:	e7e0      	b.n	80074c2 <_raise_r+0x12>

08007500 <raise>:
 8007500:	4b02      	ldr	r3, [pc, #8]	; (800750c <raise+0xc>)
 8007502:	4601      	mov	r1, r0
 8007504:	6818      	ldr	r0, [r3, #0]
 8007506:	f7ff bfd3 	b.w	80074b0 <_raise_r>
 800750a:	bf00      	nop
 800750c:	20000044 	.word	0x20000044

08007510 <_kill_r>:
 8007510:	b538      	push	{r3, r4, r5, lr}
 8007512:	4d07      	ldr	r5, [pc, #28]	; (8007530 <_kill_r+0x20>)
 8007514:	2300      	movs	r3, #0
 8007516:	4604      	mov	r4, r0
 8007518:	4608      	mov	r0, r1
 800751a:	4611      	mov	r1, r2
 800751c:	602b      	str	r3, [r5, #0]
 800751e:	f000 f8d7 	bl	80076d0 <_kill>
 8007522:	1c43      	adds	r3, r0, #1
 8007524:	d102      	bne.n	800752c <_kill_r+0x1c>
 8007526:	682b      	ldr	r3, [r5, #0]
 8007528:	b103      	cbz	r3, 800752c <_kill_r+0x1c>
 800752a:	6023      	str	r3, [r4, #0]
 800752c:	bd38      	pop	{r3, r4, r5, pc}
 800752e:	bf00      	nop
 8007530:	200004b8 	.word	0x200004b8

08007534 <_getpid_r>:
 8007534:	f000 b8bc 	b.w	80076b0 <_getpid>

08007538 <__sread>:
 8007538:	b510      	push	{r4, lr}
 800753a:	460c      	mov	r4, r1
 800753c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007540:	f000 f894 	bl	800766c <_read_r>
 8007544:	2800      	cmp	r0, #0
 8007546:	bfab      	itete	ge
 8007548:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800754a:	89a3      	ldrhlt	r3, [r4, #12]
 800754c:	181b      	addge	r3, r3, r0
 800754e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007552:	bfac      	ite	ge
 8007554:	6563      	strge	r3, [r4, #84]	; 0x54
 8007556:	81a3      	strhlt	r3, [r4, #12]
 8007558:	bd10      	pop	{r4, pc}

0800755a <__swrite>:
 800755a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800755e:	461f      	mov	r7, r3
 8007560:	898b      	ldrh	r3, [r1, #12]
 8007562:	05db      	lsls	r3, r3, #23
 8007564:	4605      	mov	r5, r0
 8007566:	460c      	mov	r4, r1
 8007568:	4616      	mov	r6, r2
 800756a:	d505      	bpl.n	8007578 <__swrite+0x1e>
 800756c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007570:	2302      	movs	r3, #2
 8007572:	2200      	movs	r2, #0
 8007574:	f000 f868 	bl	8007648 <_lseek_r>
 8007578:	89a3      	ldrh	r3, [r4, #12]
 800757a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800757e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007582:	81a3      	strh	r3, [r4, #12]
 8007584:	4632      	mov	r2, r6
 8007586:	463b      	mov	r3, r7
 8007588:	4628      	mov	r0, r5
 800758a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800758e:	f000 b817 	b.w	80075c0 <_write_r>

08007592 <__sseek>:
 8007592:	b510      	push	{r4, lr}
 8007594:	460c      	mov	r4, r1
 8007596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800759a:	f000 f855 	bl	8007648 <_lseek_r>
 800759e:	1c43      	adds	r3, r0, #1
 80075a0:	89a3      	ldrh	r3, [r4, #12]
 80075a2:	bf15      	itete	ne
 80075a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80075a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075ae:	81a3      	strheq	r3, [r4, #12]
 80075b0:	bf18      	it	ne
 80075b2:	81a3      	strhne	r3, [r4, #12]
 80075b4:	bd10      	pop	{r4, pc}

080075b6 <__sclose>:
 80075b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ba:	f000 b813 	b.w	80075e4 <_close_r>
	...

080075c0 <_write_r>:
 80075c0:	b538      	push	{r3, r4, r5, lr}
 80075c2:	4d07      	ldr	r5, [pc, #28]	; (80075e0 <_write_r+0x20>)
 80075c4:	4604      	mov	r4, r0
 80075c6:	4608      	mov	r0, r1
 80075c8:	4611      	mov	r1, r2
 80075ca:	2200      	movs	r2, #0
 80075cc:	602a      	str	r2, [r5, #0]
 80075ce:	461a      	mov	r2, r3
 80075d0:	f000 f8a4 	bl	800771c <_write>
 80075d4:	1c43      	adds	r3, r0, #1
 80075d6:	d102      	bne.n	80075de <_write_r+0x1e>
 80075d8:	682b      	ldr	r3, [r5, #0]
 80075da:	b103      	cbz	r3, 80075de <_write_r+0x1e>
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	bd38      	pop	{r3, r4, r5, pc}
 80075e0:	200004b8 	.word	0x200004b8

080075e4 <_close_r>:
 80075e4:	b538      	push	{r3, r4, r5, lr}
 80075e6:	4d06      	ldr	r5, [pc, #24]	; (8007600 <_close_r+0x1c>)
 80075e8:	2300      	movs	r3, #0
 80075ea:	4604      	mov	r4, r0
 80075ec:	4608      	mov	r0, r1
 80075ee:	602b      	str	r3, [r5, #0]
 80075f0:	f000 f84e 	bl	8007690 <_close>
 80075f4:	1c43      	adds	r3, r0, #1
 80075f6:	d102      	bne.n	80075fe <_close_r+0x1a>
 80075f8:	682b      	ldr	r3, [r5, #0]
 80075fa:	b103      	cbz	r3, 80075fe <_close_r+0x1a>
 80075fc:	6023      	str	r3, [r4, #0]
 80075fe:	bd38      	pop	{r3, r4, r5, pc}
 8007600:	200004b8 	.word	0x200004b8

08007604 <_fstat_r>:
 8007604:	b538      	push	{r3, r4, r5, lr}
 8007606:	4d07      	ldr	r5, [pc, #28]	; (8007624 <_fstat_r+0x20>)
 8007608:	2300      	movs	r3, #0
 800760a:	4604      	mov	r4, r0
 800760c:	4608      	mov	r0, r1
 800760e:	4611      	mov	r1, r2
 8007610:	602b      	str	r3, [r5, #0]
 8007612:	f000 f845 	bl	80076a0 <_fstat>
 8007616:	1c43      	adds	r3, r0, #1
 8007618:	d102      	bne.n	8007620 <_fstat_r+0x1c>
 800761a:	682b      	ldr	r3, [r5, #0]
 800761c:	b103      	cbz	r3, 8007620 <_fstat_r+0x1c>
 800761e:	6023      	str	r3, [r4, #0]
 8007620:	bd38      	pop	{r3, r4, r5, pc}
 8007622:	bf00      	nop
 8007624:	200004b8 	.word	0x200004b8

08007628 <_isatty_r>:
 8007628:	b538      	push	{r3, r4, r5, lr}
 800762a:	4d06      	ldr	r5, [pc, #24]	; (8007644 <_isatty_r+0x1c>)
 800762c:	2300      	movs	r3, #0
 800762e:	4604      	mov	r4, r0
 8007630:	4608      	mov	r0, r1
 8007632:	602b      	str	r3, [r5, #0]
 8007634:	f000 f844 	bl	80076c0 <_isatty>
 8007638:	1c43      	adds	r3, r0, #1
 800763a:	d102      	bne.n	8007642 <_isatty_r+0x1a>
 800763c:	682b      	ldr	r3, [r5, #0]
 800763e:	b103      	cbz	r3, 8007642 <_isatty_r+0x1a>
 8007640:	6023      	str	r3, [r4, #0]
 8007642:	bd38      	pop	{r3, r4, r5, pc}
 8007644:	200004b8 	.word	0x200004b8

08007648 <_lseek_r>:
 8007648:	b538      	push	{r3, r4, r5, lr}
 800764a:	4d07      	ldr	r5, [pc, #28]	; (8007668 <_lseek_r+0x20>)
 800764c:	4604      	mov	r4, r0
 800764e:	4608      	mov	r0, r1
 8007650:	4611      	mov	r1, r2
 8007652:	2200      	movs	r2, #0
 8007654:	602a      	str	r2, [r5, #0]
 8007656:	461a      	mov	r2, r3
 8007658:	f000 f842 	bl	80076e0 <_lseek>
 800765c:	1c43      	adds	r3, r0, #1
 800765e:	d102      	bne.n	8007666 <_lseek_r+0x1e>
 8007660:	682b      	ldr	r3, [r5, #0]
 8007662:	b103      	cbz	r3, 8007666 <_lseek_r+0x1e>
 8007664:	6023      	str	r3, [r4, #0]
 8007666:	bd38      	pop	{r3, r4, r5, pc}
 8007668:	200004b8 	.word	0x200004b8

0800766c <_read_r>:
 800766c:	b538      	push	{r3, r4, r5, lr}
 800766e:	4d07      	ldr	r5, [pc, #28]	; (800768c <_read_r+0x20>)
 8007670:	4604      	mov	r4, r0
 8007672:	4608      	mov	r0, r1
 8007674:	4611      	mov	r1, r2
 8007676:	2200      	movs	r2, #0
 8007678:	602a      	str	r2, [r5, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	f000 f838 	bl	80076f0 <_read>
 8007680:	1c43      	adds	r3, r0, #1
 8007682:	d102      	bne.n	800768a <_read_r+0x1e>
 8007684:	682b      	ldr	r3, [r5, #0]
 8007686:	b103      	cbz	r3, 800768a <_read_r+0x1e>
 8007688:	6023      	str	r3, [r4, #0]
 800768a:	bd38      	pop	{r3, r4, r5, pc}
 800768c:	200004b8 	.word	0x200004b8

08007690 <_close>:
 8007690:	4b02      	ldr	r3, [pc, #8]	; (800769c <_close+0xc>)
 8007692:	2258      	movs	r2, #88	; 0x58
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800769a:	4770      	bx	lr
 800769c:	200004b8 	.word	0x200004b8

080076a0 <_fstat>:
 80076a0:	4b02      	ldr	r3, [pc, #8]	; (80076ac <_fstat+0xc>)
 80076a2:	2258      	movs	r2, #88	; 0x58
 80076a4:	601a      	str	r2, [r3, #0]
 80076a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076aa:	4770      	bx	lr
 80076ac:	200004b8 	.word	0x200004b8

080076b0 <_getpid>:
 80076b0:	4b02      	ldr	r3, [pc, #8]	; (80076bc <_getpid+0xc>)
 80076b2:	2258      	movs	r2, #88	; 0x58
 80076b4:	601a      	str	r2, [r3, #0]
 80076b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076ba:	4770      	bx	lr
 80076bc:	200004b8 	.word	0x200004b8

080076c0 <_isatty>:
 80076c0:	4b02      	ldr	r3, [pc, #8]	; (80076cc <_isatty+0xc>)
 80076c2:	2258      	movs	r2, #88	; 0x58
 80076c4:	601a      	str	r2, [r3, #0]
 80076c6:	2000      	movs	r0, #0
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	200004b8 	.word	0x200004b8

080076d0 <_kill>:
 80076d0:	4b02      	ldr	r3, [pc, #8]	; (80076dc <_kill+0xc>)
 80076d2:	2258      	movs	r2, #88	; 0x58
 80076d4:	601a      	str	r2, [r3, #0]
 80076d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076da:	4770      	bx	lr
 80076dc:	200004b8 	.word	0x200004b8

080076e0 <_lseek>:
 80076e0:	4b02      	ldr	r3, [pc, #8]	; (80076ec <_lseek+0xc>)
 80076e2:	2258      	movs	r2, #88	; 0x58
 80076e4:	601a      	str	r2, [r3, #0]
 80076e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076ea:	4770      	bx	lr
 80076ec:	200004b8 	.word	0x200004b8

080076f0 <_read>:
 80076f0:	4b02      	ldr	r3, [pc, #8]	; (80076fc <_read+0xc>)
 80076f2:	2258      	movs	r2, #88	; 0x58
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076fa:	4770      	bx	lr
 80076fc:	200004b8 	.word	0x200004b8

08007700 <_sbrk>:
 8007700:	4a04      	ldr	r2, [pc, #16]	; (8007714 <_sbrk+0x14>)
 8007702:	6811      	ldr	r1, [r2, #0]
 8007704:	4603      	mov	r3, r0
 8007706:	b909      	cbnz	r1, 800770c <_sbrk+0xc>
 8007708:	4903      	ldr	r1, [pc, #12]	; (8007718 <_sbrk+0x18>)
 800770a:	6011      	str	r1, [r2, #0]
 800770c:	6810      	ldr	r0, [r2, #0]
 800770e:	4403      	add	r3, r0
 8007710:	6013      	str	r3, [r2, #0]
 8007712:	4770      	bx	lr
 8007714:	200004c0 	.word	0x200004c0
 8007718:	200004c8 	.word	0x200004c8

0800771c <_write>:
 800771c:	4b02      	ldr	r3, [pc, #8]	; (8007728 <_write+0xc>)
 800771e:	2258      	movs	r2, #88	; 0x58
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007726:	4770      	bx	lr
 8007728:	200004b8 	.word	0x200004b8

0800772c <_exit>:
 800772c:	e7fe      	b.n	800772c <_exit>
	...

08007730 <_init>:
 8007730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007732:	bf00      	nop
 8007734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007736:	bc08      	pop	{r3}
 8007738:	469e      	mov	lr, r3
 800773a:	4770      	bx	lr

0800773c <_fini>:
 800773c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773e:	bf00      	nop
 8007740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007742:	bc08      	pop	{r3}
 8007744:	469e      	mov	lr, r3
 8007746:	4770      	bx	lr
