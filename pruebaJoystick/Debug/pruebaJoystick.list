
pruebaJoystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08007348  08007348  00017348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007814  08007814  00020218  2**0
                  CONTENTS
  4 .ARM          00000000  08007814  08007814  00020218  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007814  08007814  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007814  08007814  00017814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007818  08007818  00017818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800781c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000218  08007a34  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08007a34  00020478  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003993  00000000  00000000  00020242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bfc  00000000  00000000  00023bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000278  00000000  00000000  000247d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000200  00000000  00000000  00024a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fba1  00000000  00000000  00024c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003dd7  00000000  00000000  000347f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055cdf  00000000  00000000  000385c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008e2a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e78  00000000  00000000  0008e2f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00090170  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0009023c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007330 	.word	0x08007330

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	08007330 	.word	0x08007330

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	4605      	mov	r5, r0
 8000c9c:	460c      	mov	r4, r1
 8000c9e:	4628      	mov	r0, r5
 8000ca0:	4621      	mov	r1, r4
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f7ff ff21 	bl	8000aec <__aeabi_dcmplt>
 8000caa:	b928      	cbnz	r0, 8000cb8 <__aeabi_d2lz+0x20>
 8000cac:	4628      	mov	r0, r5
 8000cae:	4621      	mov	r1, r4
 8000cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb4:	f000 b80a 	b.w	8000ccc <__aeabi_d2ulz>
 8000cb8:	4628      	mov	r0, r5
 8000cba:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000cbe:	f000 f805 	bl	8000ccc <__aeabi_d2ulz>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	bd38      	pop	{r3, r4, r5, pc}
 8000cca:	bf00      	nop

08000ccc <__aeabi_d2ulz>:
 8000ccc:	b5d0      	push	{r4, r6, r7, lr}
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__aeabi_d2ulz+0x34>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4606      	mov	r6, r0
 8000cd4:	460f      	mov	r7, r1
 8000cd6:	f7ff fc97 	bl	8000608 <__aeabi_dmul>
 8000cda:	f7ff ff6d 	bl	8000bb8 <__aeabi_d2uiz>
 8000cde:	4604      	mov	r4, r0
 8000ce0:	f7ff fc18 	bl	8000514 <__aeabi_ui2d>
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <__aeabi_d2ulz+0x38>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f7ff fc8e 	bl	8000608 <__aeabi_dmul>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4630      	mov	r0, r6
 8000cf2:	4639      	mov	r1, r7
 8000cf4:	f7ff fad0 	bl	8000298 <__aeabi_dsub>
 8000cf8:	f7ff ff5e 	bl	8000bb8 <__aeabi_d2uiz>
 8000cfc:	4621      	mov	r1, r4
 8000cfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000d00:	3df00000 	.word	0x3df00000
 8000d04:	41f00000 	.word	0x41f00000

08000d08 <main>:
void pwmSignalSwitch(void);
uint16_t flagADC = {0};
uint16_t counterADC = {0};

/* Función principal del programa */
int main(void){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0

	/* inicialización de todos los elementos del sistema */
	initHardware();
 8000d0c:	f000 f82e 	bl	8000d6c <initHardware>
	writeMsg(&USART2Comm, bufferData);
 8000d10:	490e      	ldr	r1, [pc, #56]	; (8000d4c <main+0x44>)
 8000d12:	480f      	ldr	r0, [pc, #60]	; (8000d50 <main+0x48>)
 8000d14:	f001 fae3 	bl	80022de <writeMsg>
	/* Loop infinito */
	while(1){
		pwmSignalSwitch();
 8000d18:	f000 fa6c 	bl	80011f4 <pwmSignalSwitch>
		if(flagADC){
 8000d1c:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <main+0x4c>)
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d0f9      	beq.n	8000d18 <main+0x10>
			sprintf(buffer, " Channel X = %u , Channel Y = %u \n", dataADCChannel0[0],dataADCChannel1[0]);
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <main+0x50>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <main+0x54>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	490c      	ldr	r1, [pc, #48]	; (8000d60 <main+0x58>)
 8000d2e:	480d      	ldr	r0, [pc, #52]	; (8000d64 <main+0x5c>)
 8000d30:	f002 fd00 	bl	8003734 <siprintf>
			writeMsg(&USART2Comm, buffer);
 8000d34:	490b      	ldr	r1, [pc, #44]	; (8000d64 <main+0x5c>)
 8000d36:	4806      	ldr	r0, [pc, #24]	; (8000d50 <main+0x48>)
 8000d38:	f001 fad1 	bl	80022de <writeMsg>
			rxData = 0;
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <main+0x60>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
			flagADC = 0;
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <main+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	801a      	strh	r2, [r3, #0]
		pwmSignalSwitch();
 8000d48:	e7e6      	b.n	8000d18 <main+0x10>
 8000d4a:	bf00      	nop
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	200002d8 	.word	0x200002d8
 8000d54:	20000446 	.word	0x20000446
 8000d58:	2000043c 	.word	0x2000043c
 8000d5c:	20000440 	.word	0x20000440
 8000d60:	08007348 	.word	0x08007348
 8000d64:	200003f8 	.word	0x200003f8
 8000d68:	20000444 	.word	0x20000444

08000d6c <initHardware>:
	}
	return 0;
}// Final del main

// Función donde se configuran los pimsgToSendnes en general.
void initHardware(void){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0

	// Se desactiva el reloj HSE porque PH0 está conectado a un oscilador HSE.
	RCC->CR &= ~(RCC_CR_HSEON);
 8000d70:	4bad      	ldr	r3, [pc, #692]	; (8001028 <initHardware+0x2bc>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4aac      	ldr	r2, [pc, #688]	; (8001028 <initHardware+0x2bc>)
 8000d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d7a:	6013      	str	r3, [r2, #0]

	handlerStateLED.pGPIOx                               	= GPIOH;
 8000d7c:	4bab      	ldr	r3, [pc, #684]	; (800102c <initHardware+0x2c0>)
 8000d7e:	4aac      	ldr	r2, [pc, #688]	; (8001030 <initHardware+0x2c4>)
 8000d80:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber 			= PIN_1;
 8000d82:	4baa      	ldr	r3, [pc, #680]	; (800102c <initHardware+0x2c0>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode 			= GPIO_MODE_OUT;
 8000d88:	4ba8      	ldr	r3, [pc, #672]	; (800102c <initHardware+0x2c0>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType 			= GPIO_OTYPE_PUSHPULL;
 8000d8e:	4ba7      	ldr	r3, [pc, #668]	; (800102c <initHardware+0x2c0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed 			= GPIO_OSPEED_FAST;
 8000d94:	4ba5      	ldr	r3, [pc, #660]	; (800102c <initHardware+0x2c0>)
 8000d96:	2202      	movs	r2, #2
 8000d98:	719a      	strb	r2, [r3, #6]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl 		= GPIO_PUPDR_NOTHING;
 8000d9a:	4ba4      	ldr	r3, [pc, #656]	; (800102c <initHardware+0x2c0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	71da      	strb	r2, [r3, #7]
	GPIO_Config(&handlerStateLED);
 8000da0:	48a2      	ldr	r0, [pc, #648]	; (800102c <initHardware+0x2c0>)
 8000da2:	f000 fdbb 	bl	800191c <GPIO_Config>

	/* Configuración del TIM2 para que haga un blinky cada 250 ms */
	handlerBlinkyTimer.ptrTIMx 								= TIM2;
 8000da6:	4ba3      	ldr	r3, [pc, #652]	; (8001034 <initHardware+0x2c8>)
 8000da8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dac:	601a      	str	r2, [r3, #0]
	handlerBlinkyTimer.TIMx_Config.TIMx_mode 				= BTIMER_MODE_UP;
 8000dae:	4ba1      	ldr	r3, [pc, #644]	; (8001034 <initHardware+0x2c8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	711a      	strb	r2, [r3, #4]
	handlerBlinkyTimer.TIMx_Config.TIMx_speed				= BTIMER_SPEED_1ms;
 8000db4:	4b9f      	ldr	r3, [pc, #636]	; (8001034 <initHardware+0x2c8>)
 8000db6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000dba:	609a      	str	r2, [r3, #8]
	handlerBlinkyTimer.TIMx_Config.TIMx_period 				= 250;
 8000dbc:	4b9d      	ldr	r3, [pc, #628]	; (8001034 <initHardware+0x2c8>)
 8000dbe:	22fa      	movs	r2, #250	; 0xfa
 8000dc0:	60da      	str	r2, [r3, #12]
	handlerBlinkyTimer.TIMx_Config.TIMx_interruptEnable 	= BTIMER_INTERRUPT_ENABLE;
 8000dc2:	4b9c      	ldr	r3, [pc, #624]	; (8001034 <initHardware+0x2c8>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	741a      	strb	r2, [r3, #16]
	BasicTimer_Config(&handlerBlinkyTimer);
 8000dc8:	489a      	ldr	r0, [pc, #616]	; (8001034 <initHardware+0x2c8>)
 8000dca:	f000 fcab 	bl	8001724 <BasicTimer_Config>

	/* Configuración del USART */
	// Transmisión
	handlerUSARTPINTX.pGPIOx  							= GPIOA;
 8000dce:	4b9a      	ldr	r3, [pc, #616]	; (8001038 <initHardware+0x2cc>)
 8000dd0:	4a9a      	ldr	r2, [pc, #616]	; (800103c <initHardware+0x2d0>)
 8000dd2:	601a      	str	r2, [r3, #0]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinNumber 	= PIN_2;
 8000dd4:	4b98      	ldr	r3, [pc, #608]	; (8001038 <initHardware+0x2cc>)
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	711a      	strb	r2, [r3, #4]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFN;
 8000dda:	4b97      	ldr	r3, [pc, #604]	; (8001038 <initHardware+0x2cc>)
 8000ddc:	2202      	movs	r2, #2
 8000dde:	715a      	strb	r2, [r3, #5]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinAltFunMode = AF7;
 8000de0:	4b95      	ldr	r3, [pc, #596]	; (8001038 <initHardware+0x2cc>)
 8000de2:	2207      	movs	r2, #7
 8000de4:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerUSARTPINTX);
 8000de6:	4894      	ldr	r0, [pc, #592]	; (8001038 <initHardware+0x2cc>)
 8000de8:	f000 fd98 	bl	800191c <GPIO_Config>

	// Recepción
	handlerUSARTPINRX.pGPIOx 						 	= GPIOA;
 8000dec:	4b94      	ldr	r3, [pc, #592]	; (8001040 <initHardware+0x2d4>)
 8000dee:	4a93      	ldr	r2, [pc, #588]	; (800103c <initHardware+0x2d0>)
 8000df0:	601a      	str	r2, [r3, #0]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinNumber		= PIN_3;
 8000df2:	4b93      	ldr	r3, [pc, #588]	; (8001040 <initHardware+0x2d4>)
 8000df4:	2203      	movs	r2, #3
 8000df6:	711a      	strb	r2, [r3, #4]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFN;
 8000df8:	4b91      	ldr	r3, [pc, #580]	; (8001040 <initHardware+0x2d4>)
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	715a      	strb	r2, [r3, #5]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinAltFunMode = AF7;
 8000dfe:	4b90      	ldr	r3, [pc, #576]	; (8001040 <initHardware+0x2d4>)
 8000e00:	2207      	movs	r2, #7
 8000e02:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerUSARTPINRX);
 8000e04:	488e      	ldr	r0, [pc, #568]	; (8001040 <initHardware+0x2d4>)
 8000e06:	f000 fd89 	bl	800191c <GPIO_Config>

	// Para el USART 6
	USART2Comm.ptrUSARTx 					= USART2;
 8000e0a:	4b8e      	ldr	r3, [pc, #568]	; (8001044 <initHardware+0x2d8>)
 8000e0c:	4a8e      	ldr	r2, [pc, #568]	; (8001048 <initHardware+0x2dc>)
 8000e0e:	601a      	str	r2, [r3, #0]
	USART2Comm.USART_Config.USART_baudrate 	= USART_BAUDRATE_115200;
 8000e10:	4b8c      	ldr	r3, [pc, #560]	; (8001044 <initHardware+0x2d8>)
 8000e12:	2202      	movs	r2, #2
 8000e14:	715a      	strb	r2, [r3, #5]
	USART2Comm.USART_Config.USART_datasize 	= USART_DATASIZE_8BIT;
 8000e16:	4b8b      	ldr	r3, [pc, #556]	; (8001044 <initHardware+0x2d8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	719a      	strb	r2, [r3, #6]
	USART2Comm.USART_Config.USART_parity 	= USART_PARITY_NONE;
 8000e1c:	4b89      	ldr	r3, [pc, #548]	; (8001044 <initHardware+0x2d8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	71da      	strb	r2, [r3, #7]
	USART2Comm.USART_Config.USART_mode 		= USART_MODE_RXTX;
 8000e22:	4b88      	ldr	r3, [pc, #544]	; (8001044 <initHardware+0x2d8>)
 8000e24:	2202      	movs	r2, #2
 8000e26:	711a      	strb	r2, [r3, #4]
	USART2Comm.USART_Config.USART_stopbits 	= USART_STOPBIT_1;
 8000e28:	4b86      	ldr	r3, [pc, #536]	; (8001044 <initHardware+0x2d8>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	721a      	strb	r2, [r3, #8]
	USART2Comm.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;
 8000e2e:	4b85      	ldr	r3, [pc, #532]	; (8001044 <initHardware+0x2d8>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	725a      	strb	r2, [r3, #9]

	// Se carga lo hecho sobre el USART
	USART_Config(&USART2Comm);
 8000e34:	4883      	ldr	r0, [pc, #524]	; (8001044 <initHardware+0x2d8>)
 8000e36:	f001 f835 	bl	8001ea4 <USART_Config>

	/* Configuración ADC */
	// Cargando la configuración para la conversación ADC
	adcConfig.dataAlignment			= ADC_ALIGNMENT_RIGHT;
 8000e3a:	4b84      	ldr	r3, [pc, #528]	; (800104c <initHardware+0x2e0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	711a      	strb	r2, [r3, #4]
	adcConfig.resolution			= ADC_RESOLUTION_12_BIT;
 8000e40:	4b82      	ldr	r3, [pc, #520]	; (800104c <initHardware+0x2e0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	705a      	strb	r2, [r3, #1]
	adcConfig.samplingPeriod		= ADC_SAMPLING_PERIOD_28_CYCLES;
 8000e46:	4b81      	ldr	r3, [pc, #516]	; (800104c <initHardware+0x2e0>)
 8000e48:	2202      	movs	r2, #2
 8000e4a:	805a      	strh	r2, [r3, #2]
	adcConfig.AdcEventType			= TIMER_ADC_EVENT;
 8000e4c:	4b7f      	ldr	r3, [pc, #508]	; (800104c <initHardware+0x2e0>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	721a      	strb	r2, [r3, #8]
	adcConfig.AdcChannelEvent		= TIM5_CH3;
 8000e52:	4b7e      	ldr	r3, [pc, #504]	; (800104c <initHardware+0x2e0>)
 8000e54:	220a      	movs	r2, #10
 8000e56:	725a      	strb	r2, [r3, #9]
	adcConfig.adcMultiChannel[0] 	= ADC_CHANNEL_1;
 8000e58:	4b7c      	ldr	r3, [pc, #496]	; (800104c <initHardware+0x2e0>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	729a      	strb	r2, [r3, #10]
	adcConfig.adcMultiChannel[1]	= ADC_CHANNEL_4;
 8000e5e:	4b7b      	ldr	r3, [pc, #492]	; (800104c <initHardware+0x2e0>)
 8000e60:	2204      	movs	r2, #4
 8000e62:	72da      	strb	r2, [r3, #11]
	adcMultiChannel(&adcConfig, 2);
 8000e64:	2102      	movs	r1, #2
 8000e66:	4879      	ldr	r0, [pc, #484]	; (800104c <initHardware+0x2e0>)
 8000e68:	f001 fc36 	bl	80026d8 <adcMultiChannel>
	adcConfigEvents(&adcConfig);
 8000e6c:	4877      	ldr	r0, [pc, #476]	; (800104c <initHardware+0x2e0>)
 8000e6e:	f001 fba7 	bl	80025c0 <adcConfigEvents>

	// handler PWM
	handlerPWMprueba.ptrTIMx           	  =   TIM5;
 8000e72:	4b77      	ldr	r3, [pc, #476]	; (8001050 <initHardware+0x2e4>)
 8000e74:	4a77      	ldr	r2, [pc, #476]	; (8001054 <initHardware+0x2e8>)
 8000e76:	601a      	str	r2, [r3, #0]
	handlerPWMprueba.config.channel       =   PWM_CHANNEL_3;
 8000e78:	4b75      	ldr	r3, [pc, #468]	; (8001050 <initHardware+0x2e4>)
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	711a      	strb	r2, [r3, #4]
	handlerPWMprueba.config.duttyCicle    =   10000;
 8000e7e:	4b74      	ldr	r3, [pc, #464]	; (8001050 <initHardware+0x2e4>)
 8000e80:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e84:	81da      	strh	r2, [r3, #14]
	handlerPWMprueba.config.periodo       =   20000;
 8000e86:	4b72      	ldr	r3, [pc, #456]	; (8001050 <initHardware+0x2e4>)
 8000e88:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000e8c:	819a      	strh	r2, [r3, #12]
	handlerPWMprueba.config.prescaler     =   16;
 8000e8e:	4b70      	ldr	r3, [pc, #448]	; (8001050 <initHardware+0x2e4>)
 8000e90:	2210      	movs	r2, #16
 8000e92:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWMprueba);
 8000e94:	486e      	ldr	r0, [pc, #440]	; (8001050 <initHardware+0x2e4>)
 8000e96:	f000 fe7f 	bl	8001b98 <pwm_Config>
	enableOutput(&handlerPWMprueba);
 8000e9a:	486d      	ldr	r0, [pc, #436]	; (8001050 <initHardware+0x2e4>)
 8000e9c:	f000 ff52 	bl	8001d44 <enableOutput>
	startPwmSignal(&handlerPWMprueba);
 8000ea0:	486b      	ldr	r0, [pc, #428]	; (8001050 <initHardware+0x2e4>)
 8000ea2:	f000 ff3d 	bl	8001d20 <startPwmSignal>

	// GPIO TIM 3 CC4
	HandlerTIM5PWM_1.pGPIOx          					= GPIOB;
 8000ea6:	4b6c      	ldr	r3, [pc, #432]	; (8001058 <initHardware+0x2ec>)
 8000ea8:	4a6c      	ldr	r2, [pc, #432]	; (800105c <initHardware+0x2f0>)
 8000eaa:	601a      	str	r2, [r3, #0]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinNumber  	= PIN_1;
 8000eac:	4b6a      	ldr	r3, [pc, #424]	; (8001058 <initHardware+0x2ec>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	711a      	strb	r2, [r3, #4]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8000eb2:	4b69      	ldr	r3, [pc, #420]	; (8001058 <initHardware+0x2ec>)
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	715a      	strb	r2, [r3, #5]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8000eb8:	4b67      	ldr	r3, [pc, #412]	; (8001058 <initHardware+0x2ec>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	721a      	strb	r2, [r3, #8]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000ebe:	4b66      	ldr	r3, [pc, #408]	; (8001058 <initHardware+0x2ec>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	71da      	strb	r2, [r3, #7]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8000ec4:	4b64      	ldr	r3, [pc, #400]	; (8001058 <initHardware+0x2ec>)
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	719a      	strb	r2, [r3, #6]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000eca:	4b63      	ldr	r3, [pc, #396]	; (8001058 <initHardware+0x2ec>)
 8000ecc:	2202      	movs	r2, #2
 8000ece:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerTIM5PWM_1);
 8000ed0:	4861      	ldr	r0, [pc, #388]	; (8001058 <initHardware+0x2ec>)
 8000ed2:	f000 fd23 	bl	800191c <GPIO_Config>
	// Izquierda
	handlerPWM_1.ptrTIMx           	  =   TIM3;
 8000ed6:	4b62      	ldr	r3, [pc, #392]	; (8001060 <initHardware+0x2f4>)
 8000ed8:	4a62      	ldr	r2, [pc, #392]	; (8001064 <initHardware+0x2f8>)
 8000eda:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel       =   PWM_CHANNEL_4;
 8000edc:	4b60      	ldr	r3, [pc, #384]	; (8001060 <initHardware+0x2f4>)
 8000ede:	2203      	movs	r2, #3
 8000ee0:	711a      	strb	r2, [r3, #4]
	handlerPWM_1.config.duttyCicle    =   10000;
 8000ee2:	4b5f      	ldr	r3, [pc, #380]	; (8001060 <initHardware+0x2f4>)
 8000ee4:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ee8:	81da      	strh	r2, [r3, #14]
	handlerPWM_1.config.periodo       =   20000;
 8000eea:	4b5d      	ldr	r3, [pc, #372]	; (8001060 <initHardware+0x2f4>)
 8000eec:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000ef0:	819a      	strh	r2, [r3, #12]
	handlerPWM_1.config.prescaler     =   16;
 8000ef2:	4b5b      	ldr	r3, [pc, #364]	; (8001060 <initHardware+0x2f4>)
 8000ef4:	2210      	movs	r2, #16
 8000ef6:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_1);
 8000ef8:	4859      	ldr	r0, [pc, #356]	; (8001060 <initHardware+0x2f4>)
 8000efa:	f000 fe4d 	bl	8001b98 <pwm_Config>

	// GPIO TIM 3 CC3
	HandlerTIM3PWM_2.pGPIOx          					= GPIOB;
 8000efe:	4b5a      	ldr	r3, [pc, #360]	; (8001068 <initHardware+0x2fc>)
 8000f00:	4a56      	ldr	r2, [pc, #344]	; (800105c <initHardware+0x2f0>)
 8000f02:	601a      	str	r2, [r3, #0]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinNumber  	= PIN_0;
 8000f04:	4b58      	ldr	r3, [pc, #352]	; (8001068 <initHardware+0x2fc>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	711a      	strb	r2, [r3, #4]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8000f0a:	4b57      	ldr	r3, [pc, #348]	; (8001068 <initHardware+0x2fc>)
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	715a      	strb	r2, [r3, #5]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8000f10:	4b55      	ldr	r3, [pc, #340]	; (8001068 <initHardware+0x2fc>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	721a      	strb	r2, [r3, #8]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f16:	4b54      	ldr	r3, [pc, #336]	; (8001068 <initHardware+0x2fc>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	71da      	strb	r2, [r3, #7]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8000f1c:	4b52      	ldr	r3, [pc, #328]	; (8001068 <initHardware+0x2fc>)
 8000f1e:	2202      	movs	r2, #2
 8000f20:	719a      	strb	r2, [r3, #6]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000f22:	4b51      	ldr	r3, [pc, #324]	; (8001068 <initHardware+0x2fc>)
 8000f24:	2202      	movs	r2, #2
 8000f26:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerTIM3PWM_2);
 8000f28:	484f      	ldr	r0, [pc, #316]	; (8001068 <initHardware+0x2fc>)
 8000f2a:	f000 fcf7 	bl	800191c <GPIO_Config>
	// Derecha
	handlerPWM_2.ptrTIMx           	  =   TIM3;
 8000f2e:	4b4f      	ldr	r3, [pc, #316]	; (800106c <initHardware+0x300>)
 8000f30:	4a4c      	ldr	r2, [pc, #304]	; (8001064 <initHardware+0x2f8>)
 8000f32:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel       =   PWM_CHANNEL_3;
 8000f34:	4b4d      	ldr	r3, [pc, #308]	; (800106c <initHardware+0x300>)
 8000f36:	2202      	movs	r2, #2
 8000f38:	711a      	strb	r2, [r3, #4]
	handlerPWM_2.config.duttyCicle    =   10000;
 8000f3a:	4b4c      	ldr	r3, [pc, #304]	; (800106c <initHardware+0x300>)
 8000f3c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f40:	81da      	strh	r2, [r3, #14]
	handlerPWM_2.config.periodo       =   20000;
 8000f42:	4b4a      	ldr	r3, [pc, #296]	; (800106c <initHardware+0x300>)
 8000f44:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000f48:	819a      	strh	r2, [r3, #12]
	handlerPWM_2.config.prescaler     =   16;
 8000f4a:	4b48      	ldr	r3, [pc, #288]	; (800106c <initHardware+0x300>)
 8000f4c:	2210      	movs	r2, #16
 8000f4e:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_2);
 8000f50:	4846      	ldr	r0, [pc, #280]	; (800106c <initHardware+0x300>)
 8000f52:	f000 fe21 	bl	8001b98 <pwm_Config>

	// GPIO TIM 3 CC1
	HandlerTIM3PWM_3.pGPIOx          					= GPIOA;
 8000f56:	4b46      	ldr	r3, [pc, #280]	; (8001070 <initHardware+0x304>)
 8000f58:	4a38      	ldr	r2, [pc, #224]	; (800103c <initHardware+0x2d0>)
 8000f5a:	601a      	str	r2, [r3, #0]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinNumber  	= PIN_6;
 8000f5c:	4b44      	ldr	r3, [pc, #272]	; (8001070 <initHardware+0x304>)
 8000f5e:	2206      	movs	r2, #6
 8000f60:	711a      	strb	r2, [r3, #4]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8000f62:	4b43      	ldr	r3, [pc, #268]	; (8001070 <initHardware+0x304>)
 8000f64:	2202      	movs	r2, #2
 8000f66:	715a      	strb	r2, [r3, #5]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8000f68:	4b41      	ldr	r3, [pc, #260]	; (8001070 <initHardware+0x304>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	721a      	strb	r2, [r3, #8]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f6e:	4b40      	ldr	r3, [pc, #256]	; (8001070 <initHardware+0x304>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	71da      	strb	r2, [r3, #7]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8000f74:	4b3e      	ldr	r3, [pc, #248]	; (8001070 <initHardware+0x304>)
 8000f76:	2202      	movs	r2, #2
 8000f78:	719a      	strb	r2, [r3, #6]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000f7a:	4b3d      	ldr	r3, [pc, #244]	; (8001070 <initHardware+0x304>)
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerTIM3PWM_3);
 8000f80:	483b      	ldr	r0, [pc, #236]	; (8001070 <initHardware+0x304>)
 8000f82:	f000 fccb 	bl	800191c <GPIO_Config>
	// Arriba
	handlerPWM_3.ptrTIMx           	  =   TIM3;
 8000f86:	4b3b      	ldr	r3, [pc, #236]	; (8001074 <initHardware+0x308>)
 8000f88:	4a36      	ldr	r2, [pc, #216]	; (8001064 <initHardware+0x2f8>)
 8000f8a:	601a      	str	r2, [r3, #0]
	handlerPWM_3.config.channel       =   PWM_CHANNEL_1;
 8000f8c:	4b39      	ldr	r3, [pc, #228]	; (8001074 <initHardware+0x308>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	711a      	strb	r2, [r3, #4]
	handlerPWM_3.config.duttyCicle    =   10000;
 8000f92:	4b38      	ldr	r3, [pc, #224]	; (8001074 <initHardware+0x308>)
 8000f94:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f98:	81da      	strh	r2, [r3, #14]
	handlerPWM_3.config.periodo       =   20000;
 8000f9a:	4b36      	ldr	r3, [pc, #216]	; (8001074 <initHardware+0x308>)
 8000f9c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000fa0:	819a      	strh	r2, [r3, #12]
	handlerPWM_3.config.prescaler     =   16;
 8000fa2:	4b34      	ldr	r3, [pc, #208]	; (8001074 <initHardware+0x308>)
 8000fa4:	2210      	movs	r2, #16
 8000fa6:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_3);
 8000fa8:	4832      	ldr	r0, [pc, #200]	; (8001074 <initHardware+0x308>)
 8000faa:	f000 fdf5 	bl	8001b98 <pwm_Config>

	// GPIO TIM 3 CC2
	HandlerTIM3PWM_4.pGPIOx          					= GPIOA;
 8000fae:	4b32      	ldr	r3, [pc, #200]	; (8001078 <initHardware+0x30c>)
 8000fb0:	4a22      	ldr	r2, [pc, #136]	; (800103c <initHardware+0x2d0>)
 8000fb2:	601a      	str	r2, [r3, #0]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinNumber  	= PIN_7;
 8000fb4:	4b30      	ldr	r3, [pc, #192]	; (8001078 <initHardware+0x30c>)
 8000fb6:	2207      	movs	r2, #7
 8000fb8:	711a      	strb	r2, [r3, #4]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8000fba:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <initHardware+0x30c>)
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	715a      	strb	r2, [r3, #5]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <initHardware+0x30c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	721a      	strb	r2, [r3, #8]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000fc6:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <initHardware+0x30c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	71da      	strb	r2, [r3, #7]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8000fcc:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <initHardware+0x30c>)
 8000fce:	2202      	movs	r2, #2
 8000fd0:	719a      	strb	r2, [r3, #6]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000fd2:	4b29      	ldr	r3, [pc, #164]	; (8001078 <initHardware+0x30c>)
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerTIM3PWM_4);
 8000fd8:	4827      	ldr	r0, [pc, #156]	; (8001078 <initHardware+0x30c>)
 8000fda:	f000 fc9f 	bl	800191c <GPIO_Config>
	// Abajo
	handlerPWM_4.ptrTIMx           	  =   TIM3;
 8000fde:	4b27      	ldr	r3, [pc, #156]	; (800107c <initHardware+0x310>)
 8000fe0:	4a20      	ldr	r2, [pc, #128]	; (8001064 <initHardware+0x2f8>)
 8000fe2:	601a      	str	r2, [r3, #0]
	handlerPWM_4.config.channel       =   PWM_CHANNEL_2;
 8000fe4:	4b25      	ldr	r3, [pc, #148]	; (800107c <initHardware+0x310>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	711a      	strb	r2, [r3, #4]
	handlerPWM_4.config.duttyCicle    =   10000;
 8000fea:	4b24      	ldr	r3, [pc, #144]	; (800107c <initHardware+0x310>)
 8000fec:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ff0:	81da      	strh	r2, [r3, #14]
	handlerPWM_4.config.periodo       =   20000;
 8000ff2:	4b22      	ldr	r3, [pc, #136]	; (800107c <initHardware+0x310>)
 8000ff4:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000ff8:	819a      	strh	r2, [r3, #12]
	handlerPWM_4.config.prescaler     =   16;
 8000ffa:	4b20      	ldr	r3, [pc, #128]	; (800107c <initHardware+0x310>)
 8000ffc:	2210      	movs	r2, #16
 8000ffe:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_4);
 8001000:	481e      	ldr	r0, [pc, #120]	; (800107c <initHardware+0x310>)
 8001002:	f000 fdc9 	bl	8001b98 <pwm_Config>

	// GPIO TIM 4 CC1
	HandlerTIM4PWM_5.pGPIOx          					= GPIOB;
 8001006:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <initHardware+0x314>)
 8001008:	4a14      	ldr	r2, [pc, #80]	; (800105c <initHardware+0x2f0>)
 800100a:	601a      	str	r2, [r3, #0]
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinNumber  	= PIN_6;
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <initHardware+0x314>)
 800100e:	2206      	movs	r2, #6
 8001010:	711a      	strb	r2, [r3, #4]
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8001012:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <initHardware+0x314>)
 8001014:	2202      	movs	r2, #2
 8001016:	715a      	strb	r2, [r3, #5]
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <initHardware+0x314>)
 800101a:	2200      	movs	r2, #0
 800101c:	721a      	strb	r2, [r3, #8]
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800101e:	4b18      	ldr	r3, [pc, #96]	; (8001080 <initHardware+0x314>)
 8001020:	2200      	movs	r2, #0
 8001022:	71da      	strb	r2, [r3, #7]
 8001024:	e02e      	b.n	8001084 <initHardware+0x318>
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800
 800102c:	20000234 	.word	0x20000234
 8001030:	40021c00 	.word	0x40021c00
 8001034:	200002b8 	.word	0x200002b8
 8001038:	20000240 	.word	0x20000240
 800103c:	40020000 	.word	0x40020000
 8001040:	2000024c 	.word	0x2000024c
 8001044:	200002d8 	.word	0x200002d8
 8001048:	40004400 	.word	0x40004400
 800104c:	200002cc 	.word	0x200002cc
 8001050:	20000368 	.word	0x20000368
 8001054:	40000c00 	.word	0x40000c00
 8001058:	20000258 	.word	0x20000258
 800105c:	40020400 	.word	0x40020400
 8001060:	20000378 	.word	0x20000378
 8001064:	40000400 	.word	0x40000400
 8001068:	20000264 	.word	0x20000264
 800106c:	20000388 	.word	0x20000388
 8001070:	20000270 	.word	0x20000270
 8001074:	20000398 	.word	0x20000398
 8001078:	2000027c 	.word	0x2000027c
 800107c:	200003a8 	.word	0x200003a8
 8001080:	20000288 	.word	0x20000288
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8001084:	4b51      	ldr	r3, [pc, #324]	; (80011cc <initHardware+0x460>)
 8001086:	2202      	movs	r2, #2
 8001088:	719a      	strb	r2, [r3, #6]
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 800108a:	4b50      	ldr	r3, [pc, #320]	; (80011cc <initHardware+0x460>)
 800108c:	2202      	movs	r2, #2
 800108e:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerTIM4PWM_5);
 8001090:	484e      	ldr	r0, [pc, #312]	; (80011cc <initHardware+0x460>)
 8001092:	f000 fc43 	bl	800191c <GPIO_Config>
	// DIAGONAL X
	handlerPWM_5.ptrTIMx           	  =   TIM4;
 8001096:	4b4e      	ldr	r3, [pc, #312]	; (80011d0 <initHardware+0x464>)
 8001098:	4a4e      	ldr	r2, [pc, #312]	; (80011d4 <initHardware+0x468>)
 800109a:	601a      	str	r2, [r3, #0]
	handlerPWM_5.config.channel       =   PWM_CHANNEL_1;
 800109c:	4b4c      	ldr	r3, [pc, #304]	; (80011d0 <initHardware+0x464>)
 800109e:	2200      	movs	r2, #0
 80010a0:	711a      	strb	r2, [r3, #4]
	handlerPWM_5.config.duttyCicle    =   10000;
 80010a2:	4b4b      	ldr	r3, [pc, #300]	; (80011d0 <initHardware+0x464>)
 80010a4:	f242 7210 	movw	r2, #10000	; 0x2710
 80010a8:	81da      	strh	r2, [r3, #14]
	handlerPWM_5.config.periodo       =   20000;
 80010aa:	4b49      	ldr	r3, [pc, #292]	; (80011d0 <initHardware+0x464>)
 80010ac:	f644 6220 	movw	r2, #20000	; 0x4e20
 80010b0:	819a      	strh	r2, [r3, #12]
	handlerPWM_5.config.prescaler     =   16;
 80010b2:	4b47      	ldr	r3, [pc, #284]	; (80011d0 <initHardware+0x464>)
 80010b4:	2210      	movs	r2, #16
 80010b6:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_5);
 80010b8:	4845      	ldr	r0, [pc, #276]	; (80011d0 <initHardware+0x464>)
 80010ba:	f000 fd6d 	bl	8001b98 <pwm_Config>

	// GPIO TIM 4 CC2
	HandlerTIM4PWM_6.pGPIOx          					= GPIOB;
 80010be:	4b46      	ldr	r3, [pc, #280]	; (80011d8 <initHardware+0x46c>)
 80010c0:	4a46      	ldr	r2, [pc, #280]	; (80011dc <initHardware+0x470>)
 80010c2:	601a      	str	r2, [r3, #0]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinNumber  	= PIN_7;
 80010c4:	4b44      	ldr	r3, [pc, #272]	; (80011d8 <initHardware+0x46c>)
 80010c6:	2207      	movs	r2, #7
 80010c8:	711a      	strb	r2, [r3, #4]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 80010ca:	4b43      	ldr	r3, [pc, #268]	; (80011d8 <initHardware+0x46c>)
 80010cc:	2202      	movs	r2, #2
 80010ce:	715a      	strb	r2, [r3, #5]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 80010d0:	4b41      	ldr	r3, [pc, #260]	; (80011d8 <initHardware+0x46c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	721a      	strb	r2, [r3, #8]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010d6:	4b40      	ldr	r3, [pc, #256]	; (80011d8 <initHardware+0x46c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	71da      	strb	r2, [r3, #7]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 80010dc:	4b3e      	ldr	r3, [pc, #248]	; (80011d8 <initHardware+0x46c>)
 80010de:	2202      	movs	r2, #2
 80010e0:	719a      	strb	r2, [r3, #6]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 80010e2:	4b3d      	ldr	r3, [pc, #244]	; (80011d8 <initHardware+0x46c>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerTIM4PWM_6);
 80010e8:	483b      	ldr	r0, [pc, #236]	; (80011d8 <initHardware+0x46c>)
 80010ea:	f000 fc17 	bl	800191c <GPIO_Config>
	// DIAGONAL Y
	handlerPWM_6.ptrTIMx           	  =   TIM4;
 80010ee:	4b3c      	ldr	r3, [pc, #240]	; (80011e0 <initHardware+0x474>)
 80010f0:	4a38      	ldr	r2, [pc, #224]	; (80011d4 <initHardware+0x468>)
 80010f2:	601a      	str	r2, [r3, #0]
	handlerPWM_6.config.channel       =   PWM_CHANNEL_2;
 80010f4:	4b3a      	ldr	r3, [pc, #232]	; (80011e0 <initHardware+0x474>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	711a      	strb	r2, [r3, #4]
	handlerPWM_6.config.duttyCicle    =   10000;
 80010fa:	4b39      	ldr	r3, [pc, #228]	; (80011e0 <initHardware+0x474>)
 80010fc:	f242 7210 	movw	r2, #10000	; 0x2710
 8001100:	81da      	strh	r2, [r3, #14]
	handlerPWM_6.config.periodo       =   20000;
 8001102:	4b37      	ldr	r3, [pc, #220]	; (80011e0 <initHardware+0x474>)
 8001104:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001108:	819a      	strh	r2, [r3, #12]
	handlerPWM_6.config.prescaler     =   16;
 800110a:	4b35      	ldr	r3, [pc, #212]	; (80011e0 <initHardware+0x474>)
 800110c:	2210      	movs	r2, #16
 800110e:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_6);
 8001110:	4833      	ldr	r0, [pc, #204]	; (80011e0 <initHardware+0x474>)
 8001112:	f000 fd41 	bl	8001b98 <pwm_Config>

	// GPIO TIM 4 CC3
	HandlerTIM4PWM_7.pGPIOx          					= GPIOB;
 8001116:	4b33      	ldr	r3, [pc, #204]	; (80011e4 <initHardware+0x478>)
 8001118:	4a30      	ldr	r2, [pc, #192]	; (80011dc <initHardware+0x470>)
 800111a:	601a      	str	r2, [r3, #0]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinNumber  	= PIN_8;
 800111c:	4b31      	ldr	r3, [pc, #196]	; (80011e4 <initHardware+0x478>)
 800111e:	2208      	movs	r2, #8
 8001120:	711a      	strb	r2, [r3, #4]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8001122:	4b30      	ldr	r3, [pc, #192]	; (80011e4 <initHardware+0x478>)
 8001124:	2202      	movs	r2, #2
 8001126:	715a      	strb	r2, [r3, #5]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8001128:	4b2e      	ldr	r3, [pc, #184]	; (80011e4 <initHardware+0x478>)
 800112a:	2200      	movs	r2, #0
 800112c:	721a      	strb	r2, [r3, #8]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800112e:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <initHardware+0x478>)
 8001130:	2200      	movs	r2, #0
 8001132:	71da      	strb	r2, [r3, #7]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8001134:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <initHardware+0x478>)
 8001136:	2202      	movs	r2, #2
 8001138:	719a      	strb	r2, [r3, #6]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 800113a:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <initHardware+0x478>)
 800113c:	2202      	movs	r2, #2
 800113e:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerTIM4PWM_7);
 8001140:	4828      	ldr	r0, [pc, #160]	; (80011e4 <initHardware+0x478>)
 8001142:	f000 fbeb 	bl	800191c <GPIO_Config>
	// DIAGONAL Y
	handlerPWM_7.ptrTIMx           	  =   TIM4;
 8001146:	4b28      	ldr	r3, [pc, #160]	; (80011e8 <initHardware+0x47c>)
 8001148:	4a22      	ldr	r2, [pc, #136]	; (80011d4 <initHardware+0x468>)
 800114a:	601a      	str	r2, [r3, #0]
	handlerPWM_7.config.channel       =   PWM_CHANNEL_3;
 800114c:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <initHardware+0x47c>)
 800114e:	2202      	movs	r2, #2
 8001150:	711a      	strb	r2, [r3, #4]
	handlerPWM_7.config.duttyCicle    =   10000;
 8001152:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <initHardware+0x47c>)
 8001154:	f242 7210 	movw	r2, #10000	; 0x2710
 8001158:	81da      	strh	r2, [r3, #14]
	handlerPWM_7.config.periodo       =   20000;
 800115a:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <initHardware+0x47c>)
 800115c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001160:	819a      	strh	r2, [r3, #12]
	handlerPWM_7.config.prescaler     =   16;
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <initHardware+0x47c>)
 8001164:	2210      	movs	r2, #16
 8001166:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_7);
 8001168:	481f      	ldr	r0, [pc, #124]	; (80011e8 <initHardware+0x47c>)
 800116a:	f000 fd15 	bl	8001b98 <pwm_Config>

	// GPIO TIM 4 CC4
	HandlerTIM4PWM_8.pGPIOx          					= GPIOB;
 800116e:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <initHardware+0x480>)
 8001170:	4a1a      	ldr	r2, [pc, #104]	; (80011dc <initHardware+0x470>)
 8001172:	601a      	str	r2, [r3, #0]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinNumber  	= PIN_9;
 8001174:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <initHardware+0x480>)
 8001176:	2209      	movs	r2, #9
 8001178:	711a      	strb	r2, [r3, #4]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 800117a:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <initHardware+0x480>)
 800117c:	2202      	movs	r2, #2
 800117e:	715a      	strb	r2, [r3, #5]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <initHardware+0x480>)
 8001182:	2200      	movs	r2, #0
 8001184:	721a      	strb	r2, [r3, #8]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001186:	4b19      	ldr	r3, [pc, #100]	; (80011ec <initHardware+0x480>)
 8001188:	2200      	movs	r2, #0
 800118a:	71da      	strb	r2, [r3, #7]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <initHardware+0x480>)
 800118e:	2202      	movs	r2, #2
 8001190:	719a      	strb	r2, [r3, #6]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <initHardware+0x480>)
 8001194:	2202      	movs	r2, #2
 8001196:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerTIM4PWM_8);
 8001198:	4814      	ldr	r0, [pc, #80]	; (80011ec <initHardware+0x480>)
 800119a:	f000 fbbf 	bl	800191c <GPIO_Config>
	// DIAGONAL Y
	handlerPWM_8.ptrTIMx           	  =   TIM4;
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <initHardware+0x484>)
 80011a0:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <initHardware+0x468>)
 80011a2:	601a      	str	r2, [r3, #0]
	handlerPWM_8.config.channel       =   PWM_CHANNEL_4;
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <initHardware+0x484>)
 80011a6:	2203      	movs	r2, #3
 80011a8:	711a      	strb	r2, [r3, #4]
	handlerPWM_8.config.duttyCicle    =   10000;
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <initHardware+0x484>)
 80011ac:	f242 7210 	movw	r2, #10000	; 0x2710
 80011b0:	81da      	strh	r2, [r3, #14]
	handlerPWM_8.config.periodo       =   20000;
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <initHardware+0x484>)
 80011b4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80011b8:	819a      	strh	r2, [r3, #12]
	handlerPWM_8.config.prescaler     =   16;
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <initHardware+0x484>)
 80011bc:	2210      	movs	r2, #16
 80011be:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_8);
 80011c0:	480b      	ldr	r0, [pc, #44]	; (80011f0 <initHardware+0x484>)
 80011c2:	f000 fce9 	bl	8001b98 <pwm_Config>


} // Fin initHardware
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000288 	.word	0x20000288
 80011d0:	200003b8 	.word	0x200003b8
 80011d4:	40000800 	.word	0x40000800
 80011d8:	20000294 	.word	0x20000294
 80011dc:	40020400 	.word	0x40020400
 80011e0:	200003c8 	.word	0x200003c8
 80011e4:	200002a0 	.word	0x200002a0
 80011e8:	200003d8 	.word	0x200003d8
 80011ec:	200002ac 	.word	0x200002ac
 80011f0:	200003e8 	.word	0x200003e8

080011f4 <pwmSignalSwitch>:

void pwmSignalSwitch(void){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	if (dataADCChannel0[0] <= 10 && (dataADCChannel1[0] >= 2000 && dataADCChannel1[0] <= 2150)){
 80011f8:	4ba2      	ldr	r3, [pc, #648]	; (8001484 <pwmSignalSwitch+0x290>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b0a      	cmp	r3, #10
 80011fe:	d832      	bhi.n	8001266 <pwmSignalSwitch+0x72>
 8001200:	4ba1      	ldr	r3, [pc, #644]	; (8001488 <pwmSignalSwitch+0x294>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001208:	d32d      	bcc.n	8001266 <pwmSignalSwitch+0x72>
 800120a:	4b9f      	ldr	r3, [pc, #636]	; (8001488 <pwmSignalSwitch+0x294>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f640 0266 	movw	r2, #2150	; 0x866
 8001212:	4293      	cmp	r3, r2
 8001214:	d827      	bhi.n	8001266 <pwmSignalSwitch+0x72>
		updateDuttyCycle(&handlerPWM_1, 10000);
 8001216:	f242 7110 	movw	r1, #10000	; 0x2710
 800121a:	489c      	ldr	r0, [pc, #624]	; (800148c <pwmSignalSwitch+0x298>)
 800121c:	f000 fe16 	bl	8001e4c <updateDuttyCycle>
		enableOutput(&handlerPWM_1);
 8001220:	489a      	ldr	r0, [pc, #616]	; (800148c <pwmSignalSwitch+0x298>)
 8001222:	f000 fd8f 	bl	8001d44 <enableOutput>
		startPwmSignal(&handlerPWM_1);
 8001226:	4899      	ldr	r0, [pc, #612]	; (800148c <pwmSignalSwitch+0x298>)
 8001228:	f000 fd7a 	bl	8001d20 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_2, 0);
 800122c:	2100      	movs	r1, #0
 800122e:	4898      	ldr	r0, [pc, #608]	; (8001490 <pwmSignalSwitch+0x29c>)
 8001230:	f000 fe0c 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 8001234:	2100      	movs	r1, #0
 8001236:	4897      	ldr	r0, [pc, #604]	; (8001494 <pwmSignalSwitch+0x2a0>)
 8001238:	f000 fe08 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 800123c:	2100      	movs	r1, #0
 800123e:	4896      	ldr	r0, [pc, #600]	; (8001498 <pwmSignalSwitch+0x2a4>)
 8001240:	f000 fe04 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 8001244:	2100      	movs	r1, #0
 8001246:	4895      	ldr	r0, [pc, #596]	; (800149c <pwmSignalSwitch+0x2a8>)
 8001248:	f000 fe00 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 800124c:	2100      	movs	r1, #0
 800124e:	4894      	ldr	r0, [pc, #592]	; (80014a0 <pwmSignalSwitch+0x2ac>)
 8001250:	f000 fdfc 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 8001254:	2100      	movs	r1, #0
 8001256:	4893      	ldr	r0, [pc, #588]	; (80014a4 <pwmSignalSwitch+0x2b0>)
 8001258:	f000 fdf8 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 800125c:	2100      	movs	r1, #0
 800125e:	4892      	ldr	r0, [pc, #584]	; (80014a8 <pwmSignalSwitch+0x2b4>)
 8001260:	f000 fdf4 	bl	8001e4c <updateDuttyCycle>
 8001264:	e197      	b.n	8001596 <pwmSignalSwitch+0x3a2>

	}else if (dataADCChannel0[0] >= 4000 && (dataADCChannel1[0] >= 2000 && dataADCChannel1[0] <= 2150)){
 8001266:	4b87      	ldr	r3, [pc, #540]	; (8001484 <pwmSignalSwitch+0x290>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800126e:	d332      	bcc.n	80012d6 <pwmSignalSwitch+0xe2>
 8001270:	4b85      	ldr	r3, [pc, #532]	; (8001488 <pwmSignalSwitch+0x294>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001278:	d32d      	bcc.n	80012d6 <pwmSignalSwitch+0xe2>
 800127a:	4b83      	ldr	r3, [pc, #524]	; (8001488 <pwmSignalSwitch+0x294>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f640 0266 	movw	r2, #2150	; 0x866
 8001282:	4293      	cmp	r3, r2
 8001284:	d827      	bhi.n	80012d6 <pwmSignalSwitch+0xe2>
		updateDuttyCycle(&handlerPWM_2, 10000);
 8001286:	f242 7110 	movw	r1, #10000	; 0x2710
 800128a:	4881      	ldr	r0, [pc, #516]	; (8001490 <pwmSignalSwitch+0x29c>)
 800128c:	f000 fdde 	bl	8001e4c <updateDuttyCycle>
		enableOutput(&handlerPWM_2);
 8001290:	487f      	ldr	r0, [pc, #508]	; (8001490 <pwmSignalSwitch+0x29c>)
 8001292:	f000 fd57 	bl	8001d44 <enableOutput>
		startPwmSignal(&handlerPWM_2);
 8001296:	487e      	ldr	r0, [pc, #504]	; (8001490 <pwmSignalSwitch+0x29c>)
 8001298:	f000 fd42 	bl	8001d20 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 800129c:	2100      	movs	r1, #0
 800129e:	487b      	ldr	r0, [pc, #492]	; (800148c <pwmSignalSwitch+0x298>)
 80012a0:	f000 fdd4 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 80012a4:	2100      	movs	r1, #0
 80012a6:	487b      	ldr	r0, [pc, #492]	; (8001494 <pwmSignalSwitch+0x2a0>)
 80012a8:	f000 fdd0 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 80012ac:	2100      	movs	r1, #0
 80012ae:	487a      	ldr	r0, [pc, #488]	; (8001498 <pwmSignalSwitch+0x2a4>)
 80012b0:	f000 fdcc 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 80012b4:	2100      	movs	r1, #0
 80012b6:	4879      	ldr	r0, [pc, #484]	; (800149c <pwmSignalSwitch+0x2a8>)
 80012b8:	f000 fdc8 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 80012bc:	2100      	movs	r1, #0
 80012be:	4878      	ldr	r0, [pc, #480]	; (80014a0 <pwmSignalSwitch+0x2ac>)
 80012c0:	f000 fdc4 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 80012c4:	2100      	movs	r1, #0
 80012c6:	4877      	ldr	r0, [pc, #476]	; (80014a4 <pwmSignalSwitch+0x2b0>)
 80012c8:	f000 fdc0 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 80012cc:	2100      	movs	r1, #0
 80012ce:	4876      	ldr	r0, [pc, #472]	; (80014a8 <pwmSignalSwitch+0x2b4>)
 80012d0:	f000 fdbc 	bl	8001e4c <updateDuttyCycle>
 80012d4:	e15f      	b.n	8001596 <pwmSignalSwitch+0x3a2>

	}else if ((dataADCChannel0[0] >= 2000 && dataADCChannel0[0] <= 2150) && dataADCChannel1[0] >= 4000){
 80012d6:	4b6b      	ldr	r3, [pc, #428]	; (8001484 <pwmSignalSwitch+0x290>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012de:	d332      	bcc.n	8001346 <pwmSignalSwitch+0x152>
 80012e0:	4b68      	ldr	r3, [pc, #416]	; (8001484 <pwmSignalSwitch+0x290>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f640 0266 	movw	r2, #2150	; 0x866
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d82c      	bhi.n	8001346 <pwmSignalSwitch+0x152>
 80012ec:	4b66      	ldr	r3, [pc, #408]	; (8001488 <pwmSignalSwitch+0x294>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80012f4:	d327      	bcc.n	8001346 <pwmSignalSwitch+0x152>
		updateDuttyCycle(&handlerPWM_3, 10000);
 80012f6:	f242 7110 	movw	r1, #10000	; 0x2710
 80012fa:	4866      	ldr	r0, [pc, #408]	; (8001494 <pwmSignalSwitch+0x2a0>)
 80012fc:	f000 fda6 	bl	8001e4c <updateDuttyCycle>
		enableOutput(&handlerPWM_3);
 8001300:	4864      	ldr	r0, [pc, #400]	; (8001494 <pwmSignalSwitch+0x2a0>)
 8001302:	f000 fd1f 	bl	8001d44 <enableOutput>
		startPwmSignal(&handlerPWM_3);
 8001306:	4863      	ldr	r0, [pc, #396]	; (8001494 <pwmSignalSwitch+0x2a0>)
 8001308:	f000 fd0a 	bl	8001d20 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 800130c:	2100      	movs	r1, #0
 800130e:	485f      	ldr	r0, [pc, #380]	; (800148c <pwmSignalSwitch+0x298>)
 8001310:	f000 fd9c 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 8001314:	2100      	movs	r1, #0
 8001316:	485e      	ldr	r0, [pc, #376]	; (8001490 <pwmSignalSwitch+0x29c>)
 8001318:	f000 fd98 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 800131c:	2100      	movs	r1, #0
 800131e:	485e      	ldr	r0, [pc, #376]	; (8001498 <pwmSignalSwitch+0x2a4>)
 8001320:	f000 fd94 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 8001324:	2100      	movs	r1, #0
 8001326:	485d      	ldr	r0, [pc, #372]	; (800149c <pwmSignalSwitch+0x2a8>)
 8001328:	f000 fd90 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 800132c:	2100      	movs	r1, #0
 800132e:	485c      	ldr	r0, [pc, #368]	; (80014a0 <pwmSignalSwitch+0x2ac>)
 8001330:	f000 fd8c 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 8001334:	2100      	movs	r1, #0
 8001336:	485b      	ldr	r0, [pc, #364]	; (80014a4 <pwmSignalSwitch+0x2b0>)
 8001338:	f000 fd88 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 800133c:	2100      	movs	r1, #0
 800133e:	485a      	ldr	r0, [pc, #360]	; (80014a8 <pwmSignalSwitch+0x2b4>)
 8001340:	f000 fd84 	bl	8001e4c <updateDuttyCycle>
 8001344:	e127      	b.n	8001596 <pwmSignalSwitch+0x3a2>

	}else if ((dataADCChannel0[0] >= 2000 && dataADCChannel0[0] <= 2150) && dataADCChannel1[0] <= 10){
 8001346:	4b4f      	ldr	r3, [pc, #316]	; (8001484 <pwmSignalSwitch+0x290>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800134e:	d331      	bcc.n	80013b4 <pwmSignalSwitch+0x1c0>
 8001350:	4b4c      	ldr	r3, [pc, #304]	; (8001484 <pwmSignalSwitch+0x290>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f640 0266 	movw	r2, #2150	; 0x866
 8001358:	4293      	cmp	r3, r2
 800135a:	d82b      	bhi.n	80013b4 <pwmSignalSwitch+0x1c0>
 800135c:	4b4a      	ldr	r3, [pc, #296]	; (8001488 <pwmSignalSwitch+0x294>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b0a      	cmp	r3, #10
 8001362:	d827      	bhi.n	80013b4 <pwmSignalSwitch+0x1c0>
		updateDuttyCycle(&handlerPWM_4, 10000);
 8001364:	f242 7110 	movw	r1, #10000	; 0x2710
 8001368:	484b      	ldr	r0, [pc, #300]	; (8001498 <pwmSignalSwitch+0x2a4>)
 800136a:	f000 fd6f 	bl	8001e4c <updateDuttyCycle>
		enableOutput(&handlerPWM_4);
 800136e:	484a      	ldr	r0, [pc, #296]	; (8001498 <pwmSignalSwitch+0x2a4>)
 8001370:	f000 fce8 	bl	8001d44 <enableOutput>
		startPwmSignal(&handlerPWM_4);
 8001374:	4848      	ldr	r0, [pc, #288]	; (8001498 <pwmSignalSwitch+0x2a4>)
 8001376:	f000 fcd3 	bl	8001d20 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 800137a:	2100      	movs	r1, #0
 800137c:	4843      	ldr	r0, [pc, #268]	; (800148c <pwmSignalSwitch+0x298>)
 800137e:	f000 fd65 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 8001382:	2100      	movs	r1, #0
 8001384:	4842      	ldr	r0, [pc, #264]	; (8001490 <pwmSignalSwitch+0x29c>)
 8001386:	f000 fd61 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 800138a:	2100      	movs	r1, #0
 800138c:	4841      	ldr	r0, [pc, #260]	; (8001494 <pwmSignalSwitch+0x2a0>)
 800138e:	f000 fd5d 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 8001392:	2100      	movs	r1, #0
 8001394:	4841      	ldr	r0, [pc, #260]	; (800149c <pwmSignalSwitch+0x2a8>)
 8001396:	f000 fd59 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 800139a:	2100      	movs	r1, #0
 800139c:	4840      	ldr	r0, [pc, #256]	; (80014a0 <pwmSignalSwitch+0x2ac>)
 800139e:	f000 fd55 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 80013a2:	2100      	movs	r1, #0
 80013a4:	483f      	ldr	r0, [pc, #252]	; (80014a4 <pwmSignalSwitch+0x2b0>)
 80013a6:	f000 fd51 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 80013aa:	2100      	movs	r1, #0
 80013ac:	483e      	ldr	r0, [pc, #248]	; (80014a8 <pwmSignalSwitch+0x2b4>)
 80013ae:	f000 fd4d 	bl	8001e4c <updateDuttyCycle>
 80013b2:	e0f0      	b.n	8001596 <pwmSignalSwitch+0x3a2>
	}else if ((dataADCChannel1[0] >= 4000 && dataADCChannel1[0] <= 4150) && dataADCChannel0[0] <= 10){
 80013b4:	4b34      	ldr	r3, [pc, #208]	; (8001488 <pwmSignalSwitch+0x294>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80013bc:	d331      	bcc.n	8001422 <pwmSignalSwitch+0x22e>
 80013be:	4b32      	ldr	r3, [pc, #200]	; (8001488 <pwmSignalSwitch+0x294>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f241 0236 	movw	r2, #4150	; 0x1036
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d82b      	bhi.n	8001422 <pwmSignalSwitch+0x22e>
 80013ca:	4b2e      	ldr	r3, [pc, #184]	; (8001484 <pwmSignalSwitch+0x290>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b0a      	cmp	r3, #10
 80013d0:	d827      	bhi.n	8001422 <pwmSignalSwitch+0x22e>
		updateDuttyCycle(&handlerPWM_5, 10000);
 80013d2:	f242 7110 	movw	r1, #10000	; 0x2710
 80013d6:	4831      	ldr	r0, [pc, #196]	; (800149c <pwmSignalSwitch+0x2a8>)
 80013d8:	f000 fd38 	bl	8001e4c <updateDuttyCycle>
		enableOutput(&handlerPWM_5);
 80013dc:	482f      	ldr	r0, [pc, #188]	; (800149c <pwmSignalSwitch+0x2a8>)
 80013de:	f000 fcb1 	bl	8001d44 <enableOutput>
		startPwmSignal(&handlerPWM_5);
 80013e2:	482e      	ldr	r0, [pc, #184]	; (800149c <pwmSignalSwitch+0x2a8>)
 80013e4:	f000 fc9c 	bl	8001d20 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 80013e8:	2100      	movs	r1, #0
 80013ea:	4828      	ldr	r0, [pc, #160]	; (800148c <pwmSignalSwitch+0x298>)
 80013ec:	f000 fd2e 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 80013f0:	2100      	movs	r1, #0
 80013f2:	4827      	ldr	r0, [pc, #156]	; (8001490 <pwmSignalSwitch+0x29c>)
 80013f4:	f000 fd2a 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 80013f8:	2100      	movs	r1, #0
 80013fa:	4826      	ldr	r0, [pc, #152]	; (8001494 <pwmSignalSwitch+0x2a0>)
 80013fc:	f000 fd26 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 8001400:	2100      	movs	r1, #0
 8001402:	4825      	ldr	r0, [pc, #148]	; (8001498 <pwmSignalSwitch+0x2a4>)
 8001404:	f000 fd22 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 8001408:	2100      	movs	r1, #0
 800140a:	4825      	ldr	r0, [pc, #148]	; (80014a0 <pwmSignalSwitch+0x2ac>)
 800140c:	f000 fd1e 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 8001410:	2100      	movs	r1, #0
 8001412:	4824      	ldr	r0, [pc, #144]	; (80014a4 <pwmSignalSwitch+0x2b0>)
 8001414:	f000 fd1a 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 8001418:	2100      	movs	r1, #0
 800141a:	4823      	ldr	r0, [pc, #140]	; (80014a8 <pwmSignalSwitch+0x2b4>)
 800141c:	f000 fd16 	bl	8001e4c <updateDuttyCycle>
 8001420:	e0b9      	b.n	8001596 <pwmSignalSwitch+0x3a2>
	}else if ((dataADCChannel1[0] >= 0 && dataADCChannel1[0] <= 20) && dataADCChannel0[0] <= 20){
 8001422:	4b19      	ldr	r3, [pc, #100]	; (8001488 <pwmSignalSwitch+0x294>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b14      	cmp	r3, #20
 8001428:	d840      	bhi.n	80014ac <pwmSignalSwitch+0x2b8>
 800142a:	4b16      	ldr	r3, [pc, #88]	; (8001484 <pwmSignalSwitch+0x290>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b14      	cmp	r3, #20
 8001430:	d83c      	bhi.n	80014ac <pwmSignalSwitch+0x2b8>
		updateDuttyCycle(&handlerPWM_6, 10000);
 8001432:	f242 7110 	movw	r1, #10000	; 0x2710
 8001436:	481a      	ldr	r0, [pc, #104]	; (80014a0 <pwmSignalSwitch+0x2ac>)
 8001438:	f000 fd08 	bl	8001e4c <updateDuttyCycle>
		enableOutput(&handlerPWM_6);
 800143c:	4818      	ldr	r0, [pc, #96]	; (80014a0 <pwmSignalSwitch+0x2ac>)
 800143e:	f000 fc81 	bl	8001d44 <enableOutput>
		startPwmSignal(&handlerPWM_6);
 8001442:	4817      	ldr	r0, [pc, #92]	; (80014a0 <pwmSignalSwitch+0x2ac>)
 8001444:	f000 fc6c 	bl	8001d20 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 8001448:	2100      	movs	r1, #0
 800144a:	4810      	ldr	r0, [pc, #64]	; (800148c <pwmSignalSwitch+0x298>)
 800144c:	f000 fcfe 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 8001450:	2100      	movs	r1, #0
 8001452:	480f      	ldr	r0, [pc, #60]	; (8001490 <pwmSignalSwitch+0x29c>)
 8001454:	f000 fcfa 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 8001458:	2100      	movs	r1, #0
 800145a:	480e      	ldr	r0, [pc, #56]	; (8001494 <pwmSignalSwitch+0x2a0>)
 800145c:	f000 fcf6 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 8001460:	2100      	movs	r1, #0
 8001462:	480d      	ldr	r0, [pc, #52]	; (8001498 <pwmSignalSwitch+0x2a4>)
 8001464:	f000 fcf2 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 8001468:	2100      	movs	r1, #0
 800146a:	480c      	ldr	r0, [pc, #48]	; (800149c <pwmSignalSwitch+0x2a8>)
 800146c:	f000 fcee 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 8001470:	2100      	movs	r1, #0
 8001472:	480c      	ldr	r0, [pc, #48]	; (80014a4 <pwmSignalSwitch+0x2b0>)
 8001474:	f000 fcea 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 8001478:	2100      	movs	r1, #0
 800147a:	480b      	ldr	r0, [pc, #44]	; (80014a8 <pwmSignalSwitch+0x2b4>)
 800147c:	f000 fce6 	bl	8001e4c <updateDuttyCycle>
 8001480:	e089      	b.n	8001596 <pwmSignalSwitch+0x3a2>
 8001482:	bf00      	nop
 8001484:	2000043c 	.word	0x2000043c
 8001488:	20000440 	.word	0x20000440
 800148c:	20000378 	.word	0x20000378
 8001490:	20000388 	.word	0x20000388
 8001494:	20000398 	.word	0x20000398
 8001498:	200003a8 	.word	0x200003a8
 800149c:	200003b8 	.word	0x200003b8
 80014a0:	200003c8 	.word	0x200003c8
 80014a4:	200003d8 	.word	0x200003d8
 80014a8:	200003e8 	.word	0x200003e8
	}else if ((dataADCChannel0[0] >= 4000 && dataADCChannel0[0] <= 4150) && (dataADCChannel1[0] >= 4000 && dataADCChannel1[0] <= 4150)){
 80014ac:	4b3b      	ldr	r3, [pc, #236]	; (800159c <pwmSignalSwitch+0x3a8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80014b4:	d338      	bcc.n	8001528 <pwmSignalSwitch+0x334>
 80014b6:	4b39      	ldr	r3, [pc, #228]	; (800159c <pwmSignalSwitch+0x3a8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f241 0236 	movw	r2, #4150	; 0x1036
 80014be:	4293      	cmp	r3, r2
 80014c0:	d832      	bhi.n	8001528 <pwmSignalSwitch+0x334>
 80014c2:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <pwmSignalSwitch+0x3ac>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80014ca:	d32d      	bcc.n	8001528 <pwmSignalSwitch+0x334>
 80014cc:	4b34      	ldr	r3, [pc, #208]	; (80015a0 <pwmSignalSwitch+0x3ac>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f241 0236 	movw	r2, #4150	; 0x1036
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d827      	bhi.n	8001528 <pwmSignalSwitch+0x334>
		updateDuttyCycle(&handlerPWM_7, 10000);
 80014d8:	f242 7110 	movw	r1, #10000	; 0x2710
 80014dc:	4831      	ldr	r0, [pc, #196]	; (80015a4 <pwmSignalSwitch+0x3b0>)
 80014de:	f000 fcb5 	bl	8001e4c <updateDuttyCycle>
		enableOutput(&handlerPWM_7);
 80014e2:	4830      	ldr	r0, [pc, #192]	; (80015a4 <pwmSignalSwitch+0x3b0>)
 80014e4:	f000 fc2e 	bl	8001d44 <enableOutput>
		startPwmSignal(&handlerPWM_7);
 80014e8:	482e      	ldr	r0, [pc, #184]	; (80015a4 <pwmSignalSwitch+0x3b0>)
 80014ea:	f000 fc19 	bl	8001d20 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 80014ee:	2100      	movs	r1, #0
 80014f0:	482d      	ldr	r0, [pc, #180]	; (80015a8 <pwmSignalSwitch+0x3b4>)
 80014f2:	f000 fcab 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 80014f6:	2100      	movs	r1, #0
 80014f8:	482c      	ldr	r0, [pc, #176]	; (80015ac <pwmSignalSwitch+0x3b8>)
 80014fa:	f000 fca7 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 80014fe:	2100      	movs	r1, #0
 8001500:	482b      	ldr	r0, [pc, #172]	; (80015b0 <pwmSignalSwitch+0x3bc>)
 8001502:	f000 fca3 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 8001506:	2100      	movs	r1, #0
 8001508:	482a      	ldr	r0, [pc, #168]	; (80015b4 <pwmSignalSwitch+0x3c0>)
 800150a:	f000 fc9f 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 800150e:	2100      	movs	r1, #0
 8001510:	4829      	ldr	r0, [pc, #164]	; (80015b8 <pwmSignalSwitch+0x3c4>)
 8001512:	f000 fc9b 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 8001516:	2100      	movs	r1, #0
 8001518:	4828      	ldr	r0, [pc, #160]	; (80015bc <pwmSignalSwitch+0x3c8>)
 800151a:	f000 fc97 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 800151e:	2100      	movs	r1, #0
 8001520:	4827      	ldr	r0, [pc, #156]	; (80015c0 <pwmSignalSwitch+0x3cc>)
 8001522:	f000 fc93 	bl	8001e4c <updateDuttyCycle>
 8001526:	e036      	b.n	8001596 <pwmSignalSwitch+0x3a2>
	}else if ((dataADCChannel0[0] >= 4000 && dataADCChannel0[0] <= 4150) && dataADCChannel1[0] <= 20){
 8001528:	4b1c      	ldr	r3, [pc, #112]	; (800159c <pwmSignalSwitch+0x3a8>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001530:	d331      	bcc.n	8001596 <pwmSignalSwitch+0x3a2>
 8001532:	4b1a      	ldr	r3, [pc, #104]	; (800159c <pwmSignalSwitch+0x3a8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f241 0236 	movw	r2, #4150	; 0x1036
 800153a:	4293      	cmp	r3, r2
 800153c:	d82b      	bhi.n	8001596 <pwmSignalSwitch+0x3a2>
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <pwmSignalSwitch+0x3ac>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b14      	cmp	r3, #20
 8001544:	d827      	bhi.n	8001596 <pwmSignalSwitch+0x3a2>
		updateDuttyCycle(&handlerPWM_8, 10000);
 8001546:	f242 7110 	movw	r1, #10000	; 0x2710
 800154a:	481d      	ldr	r0, [pc, #116]	; (80015c0 <pwmSignalSwitch+0x3cc>)
 800154c:	f000 fc7e 	bl	8001e4c <updateDuttyCycle>
		enableOutput(&handlerPWM_8);
 8001550:	481b      	ldr	r0, [pc, #108]	; (80015c0 <pwmSignalSwitch+0x3cc>)
 8001552:	f000 fbf7 	bl	8001d44 <enableOutput>
		startPwmSignal(&handlerPWM_8);
 8001556:	481a      	ldr	r0, [pc, #104]	; (80015c0 <pwmSignalSwitch+0x3cc>)
 8001558:	f000 fbe2 	bl	8001d20 <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 800155c:	2100      	movs	r1, #0
 800155e:	4812      	ldr	r0, [pc, #72]	; (80015a8 <pwmSignalSwitch+0x3b4>)
 8001560:	f000 fc74 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 8001564:	2100      	movs	r1, #0
 8001566:	4811      	ldr	r0, [pc, #68]	; (80015ac <pwmSignalSwitch+0x3b8>)
 8001568:	f000 fc70 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 800156c:	2100      	movs	r1, #0
 800156e:	4810      	ldr	r0, [pc, #64]	; (80015b0 <pwmSignalSwitch+0x3bc>)
 8001570:	f000 fc6c 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 8001574:	2100      	movs	r1, #0
 8001576:	480f      	ldr	r0, [pc, #60]	; (80015b4 <pwmSignalSwitch+0x3c0>)
 8001578:	f000 fc68 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 800157c:	2100      	movs	r1, #0
 800157e:	480e      	ldr	r0, [pc, #56]	; (80015b8 <pwmSignalSwitch+0x3c4>)
 8001580:	f000 fc64 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 8001584:	2100      	movs	r1, #0
 8001586:	480d      	ldr	r0, [pc, #52]	; (80015bc <pwmSignalSwitch+0x3c8>)
 8001588:	f000 fc60 	bl	8001e4c <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 800158c:	2100      	movs	r1, #0
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <pwmSignalSwitch+0x3b0>)
 8001590:	f000 fc5c 	bl	8001e4c <updateDuttyCycle>
	}
}
 8001594:	e7ff      	b.n	8001596 <pwmSignalSwitch+0x3a2>
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	2000043c 	.word	0x2000043c
 80015a0:	20000440 	.word	0x20000440
 80015a4:	200003d8 	.word	0x200003d8
 80015a8:	20000378 	.word	0x20000378
 80015ac:	20000388 	.word	0x20000388
 80015b0:	20000398 	.word	0x20000398
 80015b4:	200003a8 	.word	0x200003a8
 80015b8:	200003b8 	.word	0x200003b8
 80015bc:	200003c8 	.word	0x200003c8
 80015c0:	200003e8 	.word	0x200003e8

080015c4 <BasicTimer2_Callback>:

/* Timer que gobierna el blinky del led de estado */
void BasicTimer2_Callback(void){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	if(counterADC == 5){
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <BasicTimer2_Callback+0x30>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	2b05      	cmp	r3, #5
 80015ce:	d102      	bne.n	80015d6 <BasicTimer2_Callback+0x12>
		counterADC = 0;
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <BasicTimer2_Callback+0x30>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	801a      	strh	r2, [r3, #0]
	}
	flagADC = 1;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <BasicTimer2_Callback+0x34>)
 80015d8:	2201      	movs	r2, #1
 80015da:	801a      	strh	r2, [r3, #0]
	counterADC++;
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <BasicTimer2_Callback+0x30>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	3301      	adds	r3, #1
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <BasicTimer2_Callback+0x30>)
 80015e6:	801a      	strh	r2, [r3, #0]
	GPIOxTooglePin(&handlerStateLED);
 80015e8:	4804      	ldr	r0, [pc, #16]	; (80015fc <BasicTimer2_Callback+0x38>)
 80015ea:	f000 fabf 	bl	8001b6c <GPIOxTooglePin>
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000448 	.word	0x20000448
 80015f8:	20000446 	.word	0x20000446
 80015fc:	20000234 	.word	0x20000234

08001600 <usart2Rx_Callback>:



// Callback para los comandos del USART.
void usart2Rx_Callback(void){
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	rxData = getRxData();
 8001604:	f000 fe84 	bl	8002310 <getRxData>
 8001608:	4603      	mov	r3, r0
 800160a:	461a      	mov	r2, r3
 800160c:	4b01      	ldr	r3, [pc, #4]	; (8001614 <usart2Rx_Callback+0x14>)
 800160e:	701a      	strb	r2, [r3, #0]
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000444 	.word	0x20000444

08001618 <adcComplete_Callback>:

// Esta función controla el contador del ADC.(Hace las veces de callback)
void adcComplete_Callback(void){
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	if(cont == 0){
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <adcComplete_Callback+0x70>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d10a      	bne.n	800163a <adcComplete_Callback+0x22>
		dataADCChannel0[cont2] = getADC();
 8001624:	f000 fefc 	bl	8002420 <getADC>
 8001628:	4603      	mov	r3, r0
 800162a:	4619      	mov	r1, r3
 800162c:	4b17      	ldr	r3, [pc, #92]	; (800168c <adcComplete_Callback+0x74>)
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <adcComplete_Callback+0x78>)
 8001634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001638:	e00f      	b.n	800165a <adcComplete_Callback+0x42>
	}
	else{
		dataADCChannel1[cont2] = getADC();
 800163a:	f000 fef1 	bl	8002420 <getADC>
 800163e:	4603      	mov	r3, r0
 8001640:	4619      	mov	r1, r3
 8001642:	4b12      	ldr	r3, [pc, #72]	; (800168c <adcComplete_Callback+0x74>)
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <adcComplete_Callback+0x7c>)
 800164a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		cont2++;
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <adcComplete_Callback+0x74>)
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	3301      	adds	r3, #1
 8001654:	b29a      	uxth	r2, r3
 8001656:	4b0d      	ldr	r3, [pc, #52]	; (800168c <adcComplete_Callback+0x74>)
 8001658:	801a      	strh	r2, [r3, #0]
	}
	cont++;
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <adcComplete_Callback+0x70>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <adcComplete_Callback+0x70>)
 8001664:	701a      	strb	r2, [r3, #0]
	if(cont2 == 1){
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <adcComplete_Callback+0x74>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d102      	bne.n	8001674 <adcComplete_Callback+0x5c>
		cont2 = 0;
 800166e:	4b07      	ldr	r3, [pc, #28]	; (800168c <adcComplete_Callback+0x74>)
 8001670:	2200      	movs	r2, #0
 8001672:	801a      	strh	r2, [r3, #0]
	}
	if(cont == 2){
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <adcComplete_Callback+0x70>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d102      	bne.n	8001682 <adcComplete_Callback+0x6a>
		cont = 0;
 800167c:	4b02      	ldr	r3, [pc, #8]	; (8001688 <adcComplete_Callback+0x70>)
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
	}
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000438 	.word	0x20000438
 800168c:	2000043a 	.word	0x2000043a
 8001690:	2000043c 	.word	0x2000043c
 8001694:	20000440 	.word	0x20000440

08001698 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001698:	480d      	ldr	r0, [pc, #52]	; (80016d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800169a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800169c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016a0:	480c      	ldr	r0, [pc, #48]	; (80016d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80016a2:	490d      	ldr	r1, [pc, #52]	; (80016d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016a4:	4a0d      	ldr	r2, [pc, #52]	; (80016dc <LoopForever+0xe>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a8:	e002      	b.n	80016b0 <LoopCopyDataInit>

080016aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ae:	3304      	adds	r3, #4

080016b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b4:	d3f9      	bcc.n	80016aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016b8:	4c0a      	ldr	r4, [pc, #40]	; (80016e4 <LoopForever+0x16>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016bc:	e001      	b.n	80016c2 <LoopFillZerobss>

080016be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c0:	3204      	adds	r2, #4

080016c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c4:	d3fb      	bcc.n	80016be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016c6:	f001 f99d 	bl	8002a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016ca:	f7ff fb1d 	bl	8000d08 <main>

080016ce <LoopForever>:

LoopForever:
    b LoopForever
 80016ce:	e7fe      	b.n	80016ce <LoopForever>
  ldr   r0, =_estack
 80016d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d8:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80016dc:	0800781c 	.word	0x0800781c
  ldr r2, =_sbss
 80016e0:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80016e4:	20000478 	.word	0x20000478

080016e8 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016e8:	e7fe      	b.n	80016e8 <BusFault_Handler>
	...

080016ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	db0b      	blt.n	8001716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	f003 021f 	and.w	r2, r3, #31
 8001704:	4906      	ldr	r1, [pc, #24]	; (8001720 <__NVIC_EnableIRQ+0x34>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	2001      	movs	r0, #1
 800170e:	fa00 f202 	lsl.w	r2, r0, r2
 8001712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	e000e100 	.word	0xe000e100

08001724 <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrBTimerHandler->ptrTIMx;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a4e      	ldr	r2, [pc, #312]	; (800186c <BasicTimer_Config+0x148>)
 8001732:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001734:	b672      	cpsid	i
}
 8001736:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();
	/* 1. Activar la señal de reloj del periférico requerido */
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001740:	d106      	bne.n	8001750 <BasicTimer_Config+0x2c>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001742:	4b4b      	ldr	r3, [pc, #300]	; (8001870 <BasicTimer_Config+0x14c>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	4a4a      	ldr	r2, [pc, #296]	; (8001870 <BasicTimer_Config+0x14c>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6413      	str	r3, [r2, #64]	; 0x40
 800174e:	e024      	b.n	800179a <BasicTimer_Config+0x76>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a47      	ldr	r2, [pc, #284]	; (8001874 <BasicTimer_Config+0x150>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d106      	bne.n	8001768 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 800175a:	4b45      	ldr	r3, [pc, #276]	; (8001870 <BasicTimer_Config+0x14c>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a44      	ldr	r2, [pc, #272]	; (8001870 <BasicTimer_Config+0x14c>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
 8001766:	e018      	b.n	800179a <BasicTimer_Config+0x76>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a42      	ldr	r2, [pc, #264]	; (8001878 <BasicTimer_Config+0x154>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d106      	bne.n	8001780 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001772:	4b3f      	ldr	r3, [pc, #252]	; (8001870 <BasicTimer_Config+0x14c>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	4a3e      	ldr	r2, [pc, #248]	; (8001870 <BasicTimer_Config+0x14c>)
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	6413      	str	r3, [r2, #64]	; 0x40
 800177e:	e00c      	b.n	800179a <BasicTimer_Config+0x76>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a3d      	ldr	r2, [pc, #244]	; (800187c <BasicTimer_Config+0x158>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d106      	bne.n	8001798 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 800178a:	4b39      	ldr	r3, [pc, #228]	; (8001870 <BasicTimer_Config+0x14c>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a38      	ldr	r2, [pc, #224]	; (8001870 <BasicTimer_Config+0x14c>)
 8001790:	f043 0308 	orr.w	r3, r3, #8
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	e000      	b.n	800179a <BasicTimer_Config+0x76>
	}

	else{
		__NOP();
 8001798:	bf00      	nop
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */
	// -1 porque el contador empieza en 0
	ptrBTimerHandler->ptrTIMx-> PSC = ptrBTimerHandler ->TIMx_Config.TIMx_speed - 1;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	3a01      	subs	r2, #1
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28

	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	791b      	ldrb	r3, [r3, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d112      	bne.n	80017d4 <BasicTimer_Config+0xb0>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Necesitamos poner la direccion en 0 para que cuente hacia arria TIM_CR1_DIR = 1, entonces
		// lo negamos y hacemos una AND con el valor actual.
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0210 	bic.w	r2, r2, #16
 80017bc:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	3a01      	subs	r2, #1
 80017c8:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2200      	movs	r2, #0
 80017d0:	625a      	str	r2, [r3, #36]	; 0x24
 80017d2:	e00d      	b.n	80017f0 <BasicTimer_Config+0xcc>

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		// Cuando CR1 = 1 es descendente
		ptrBTimerHandler->ptrTIMx->CR1 = TIM_CR1_DIR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2210      	movs	r2, #16
 80017da:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		ptrBTimerHandler-> ptrTIMx->ARR = 0;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2200      	movs	r2, #0
 80017e2:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68da      	ldr	r2, [r3, #12]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	3a01      	subs	r2, #1
 80017ee:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0201 	orr.w	r2, r2, #1
 80017fe:	601a      	str	r2, [r3, #0]
	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	// El registro encargado de la interrupcion es el UIE

	// Modificar con el ciclo If
	ptrBTimerHandler->ptrTIMx->DIER |= ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable; //TIM_DIER_UIE
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	7c1b      	ldrb	r3, [r3, #16]
 800180a:	4619      	mov	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800181c:	d103      	bne.n	8001826 <BasicTimer_Config+0x102>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 800181e:	201c      	movs	r0, #28
 8001820:	f7ff ff64 	bl	80016ec <__NVIC_EnableIRQ>
 8001824:	e01b      	b.n	800185e <BasicTimer_Config+0x13a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a12      	ldr	r2, [pc, #72]	; (8001874 <BasicTimer_Config+0x150>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d103      	bne.n	8001838 <BasicTimer_Config+0x114>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8001830:	201d      	movs	r0, #29
 8001832:	f7ff ff5b 	bl	80016ec <__NVIC_EnableIRQ>
 8001836:	e012      	b.n	800185e <BasicTimer_Config+0x13a>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <BasicTimer_Config+0x154>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d103      	bne.n	800184a <BasicTimer_Config+0x126>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8001842:	201e      	movs	r0, #30
 8001844:	f7ff ff52 	bl	80016ec <__NVIC_EnableIRQ>
 8001848:	e009      	b.n	800185e <BasicTimer_Config+0x13a>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a0b      	ldr	r2, [pc, #44]	; (800187c <BasicTimer_Config+0x158>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d103      	bne.n	800185c <BasicTimer_Config+0x138>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8001854:	2032      	movs	r0, #50	; 0x32
 8001856:	f7ff ff49 	bl	80016ec <__NVIC_EnableIRQ>
 800185a:	e000      	b.n	800185e <BasicTimer_Config+0x13a>
	}

	else{
		__NOP();
 800185c:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800185e:	b662      	cpsie	i
}
 8001860:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	2000044c 	.word	0x2000044c
 8001870:	40023800 	.word	0x40023800
 8001874:	40000400 	.word	0x40000400
 8001878:	40000800 	.word	0x40000800
 800187c:	40000c00 	.word	0x40000c00

08001880 <BasicTimer3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer3_Callback(void){
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001884:	bf00      	nop
}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr

0800188e <BasicTimer4_Callback>:
__attribute__((weak)) void BasicTimer4_Callback(void){
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001892:	bf00      	nop
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80018a0:	bf00      	nop
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 80018aa:	b580      	push	{r7, lr}
 80018ac:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM2->SR &= ~TIM_SR_UIF;
 80018ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer2_Callback();
 80018be:	f7ff fe81 	bl	80015c4 <BasicTimer2_Callback>
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM3->SR &= ~TIM_SR_UIF;
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <TIM3_IRQHandler+0x18>)
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	4a03      	ldr	r2, [pc, #12]	; (80018e0 <TIM3_IRQHandler+0x18>)
 80018d2:	f023 0301 	bic.w	r3, r3, #1
 80018d6:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer3_Callback();
 80018d8:	f7ff ffd2 	bl	8001880 <BasicTimer3_Callback>
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40000400 	.word	0x40000400

080018e4 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM4->SR &= ~TIM_SR_UIF;
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <TIM4_IRQHandler+0x18>)
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	4a03      	ldr	r2, [pc, #12]	; (80018fc <TIM4_IRQHandler+0x18>)
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer4_Callback();
 80018f4:	f7ff ffcb 	bl	800188e <BasicTimer4_Callback>
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40000800 	.word	0x40000800

08001900 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM5->SR &= ~TIM_SR_UIF;
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <TIM5_IRQHandler+0x18>)
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	4a03      	ldr	r2, [pc, #12]	; (8001918 <TIM5_IRQHandler+0x18>)
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer5_Callback();
 8001910:	f7ff ffc4 	bl	800189c <BasicTimer5_Callback>
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40000c00 	.word	0x40000c00

0800191c <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemento "activar el periferico o activar la señal de reloj del periferico)
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	60bb      	str	r3, [r7, #8]

	// 1)Activar el periferico
	//verificamos para GPIOA
	if(pGPIOHandler->pGPIOx == GPIOA){
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a87      	ldr	r2, [pc, #540]	; (8001b50 <GPIO_Config+0x234>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d106      	bne.n	8001944 <GPIO_Config+0x28>
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 8001936:	4b87      	ldr	r3, [pc, #540]	; (8001b54 <GPIO_Config+0x238>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a86      	ldr	r2, [pc, #536]	; (8001b54 <GPIO_Config+0x238>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	e03a      	b.n	80019ba <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx == GPIOB){
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a83      	ldr	r2, [pc, #524]	; (8001b58 <GPIO_Config+0x23c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d106      	bne.n	800195c <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 800194e:	4b81      	ldr	r3, [pc, #516]	; (8001b54 <GPIO_Config+0x238>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a80      	ldr	r2, [pc, #512]	; (8001b54 <GPIO_Config+0x238>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	e02e      	b.n	80019ba <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if(pGPIOHandler->pGPIOx == GPIOC){
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a7e      	ldr	r2, [pc, #504]	; (8001b5c <GPIO_Config+0x240>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d106      	bne.n	8001974 <GPIO_Config+0x58>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 8001966:	4b7b      	ldr	r3, [pc, #492]	; (8001b54 <GPIO_Config+0x238>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a7a      	ldr	r2, [pc, #488]	; (8001b54 <GPIO_Config+0x238>)
 800196c:	f043 0304 	orr.w	r3, r3, #4
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	e022      	b.n	80019ba <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if(pGPIOHandler->pGPIOx == GPIOD){
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a79      	ldr	r2, [pc, #484]	; (8001b60 <GPIO_Config+0x244>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d106      	bne.n	800198c <GPIO_Config+0x70>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 800197e:	4b75      	ldr	r3, [pc, #468]	; (8001b54 <GPIO_Config+0x238>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a74      	ldr	r2, [pc, #464]	; (8001b54 <GPIO_Config+0x238>)
 8001984:	f043 0308 	orr.w	r3, r3, #8
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	e016      	b.n	80019ba <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if(pGPIOHandler->pGPIOx == GPIOE){
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a74      	ldr	r2, [pc, #464]	; (8001b64 <GPIO_Config+0x248>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d106      	bne.n	80019a4 <GPIO_Config+0x88>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 8001996:	4b6f      	ldr	r3, [pc, #444]	; (8001b54 <GPIO_Config+0x238>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a6e      	ldr	r2, [pc, #440]	; (8001b54 <GPIO_Config+0x238>)
 800199c:	f043 0310 	orr.w	r3, r3, #16
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	e00a      	b.n	80019ba <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOH
	else if(pGPIOHandler->pGPIOx == GPIOH){
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a6f      	ldr	r2, [pc, #444]	; (8001b68 <GPIO_Config+0x24c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d105      	bne.n	80019ba <GPIO_Config+0x9e>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 80019ae:	4b69      	ldr	r3, [pc, #420]	; (8001b54 <GPIO_Config+0x238>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a68      	ldr	r2, [pc, #416]	; (8001b54 <GPIO_Config+0x238>)
 80019b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
	// Despues de activado, podemos comenzar a configurar.

	// 2) COnfigurando el registro GPIOx_MODER
	// Acá estamos leyendo config, moviendo "PinNumber" veces hacia la izquierda
	// ese valor (shift left) y todo eso lo cargamos en la variable auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	795b      	ldrb	r3, [r3, #5]
 80019be:	461a      	mov	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	791b      	ldrb	r3, [r3, #4]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	60fb      	str	r3, [r7, #12]
	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro
	 * (debemos escribir 0b00) para lo cual aplicamos una mascara y una operación de
	 * bitwise AND
	 */
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	791b      	ldrb	r3, [r3, #4]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	2103      	movs	r1, #3
 80019da:	fa01 f303 	lsl.w	r3, r1, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	4619      	mov	r1, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	400a      	ands	r2, r1
 80019e8:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6819      	ldr	r1, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	7a1b      	ldrb	r3, [r3, #8]
 80019fe:	461a      	mov	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	791b      	ldrb	r3, [r3, #4]
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	791b      	ldrb	r3, [r3, #4]
 8001a14:	4619      	mov	r1, r3
 8001a16:	2301      	movs	r3, #1
 8001a18:	408b      	lsls	r3, r1
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	400a      	ands	r2, r1
 8001a24:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6859      	ldr	r1, [r3, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	799b      	ldrb	r3, [r3, #6]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	791b      	ldrb	r3, [r3, #4]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0B11 << 2 *pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	791b      	ldrb	r3, [r3, #4]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	2103      	movs	r1, #3
 8001a56:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	400a      	ands	r2, r1
 8001a64:	609a      	str	r2, [r3, #8]

	//cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6899      	ldr	r1, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull up pull down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	79db      	ldrb	r3, [r3, #7]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	791b      	ldrb	r3, [r3, #4]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	791b      	ldrb	r3, [r3, #4]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	2103      	movs	r1, #3
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	400a      	ands	r2, r1
 8001aa4:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68d9      	ldr	r1, [r3, #12]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas.. se vera luego
	if (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	795b      	ldrb	r3, [r3, #5]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d143      	bne.n	8001b46 <GPIO_Config+0x22a>

		//Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	791b      	ldrb	r3, [r3, #4]
 8001ac2:	2b07      	cmp	r3, #7
 8001ac4:	d81f      	bhi.n	8001b06 <GPIO_Config+0x1ea>
			//Estamos en el registro AGRL, que controla los piner del pIN_0 AL PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	791b      	ldrb	r3, [r3, #4]
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del tegistro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6a1a      	ldr	r2, [r3, #32]
 8001ad4:	210f      	movs	r1, #15
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	4619      	mov	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	400a      	ands	r2, r1
 8001ae6:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor confiurado en la posicon seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6a1a      	ldr	r2, [r3, #32]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	7a5b      	ldrb	r3, [r3, #9]
 8001af2:	4619      	mov	r1, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	fa01 f303 	lsl.w	r3, r1, r3
 8001afa:	4619      	mov	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} //Fin del GPIO_Config
 8001b04:	e01f      	b.n	8001b46 <GPIO_Config+0x22a>
			auxPosition = 4* (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber -8);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	791b      	ldrb	r3, [r3, #4]
 8001b0a:	3b08      	subs	r3, #8
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b16:	210f      	movs	r1, #15
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	4619      	mov	r1, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	400a      	ands	r2, r1
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	7a5b      	ldrb	r3, [r3, #9]
 8001b34:	4619      	mov	r1, r3
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	625a      	str	r2, [r3, #36]	; 0x24
} //Fin del GPIO_Config
 8001b46:	bf00      	nop
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr
 8001b50:	40020000 	.word	0x40020000
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020400 	.word	0x40020400
 8001b5c:	40020800 	.word	0x40020800
 8001b60:	40020c00 	.word	0x40020c00
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40021c00 	.word	0x40021c00

08001b6c <GPIOxTooglePin>:
	pinValue &= mask;

	return pinValue;
}

void GPIOxTooglePin(GPIO_Handler_t *pPinHandler){
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR ^= (SET <<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	695a      	ldr	r2, [r3, #20]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	791b      	ldrb	r3, [r3, #4]
 8001b7e:	4619      	mov	r1, r3
 8001b80:	2301      	movs	r3, #1
 8001b82:	408b      	lsls	r3, r1
 8001b84:	4619      	mov	r1, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	404a      	eors	r2, r1
 8001b8c:	615a      	str	r2, [r3, #20]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <pwm_Config>:
 */

#include "PwmDriver.h"

/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if(ptrPwmHandler->ptrTIMx == TIM2){
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba8:	d106      	bne.n	8001bb8 <pwm_Config+0x20>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001baa:	4b59      	ldr	r3, [pc, #356]	; (8001d10 <pwm_Config+0x178>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	4a58      	ldr	r2, [pc, #352]	; (8001d10 <pwm_Config+0x178>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb6:	e024      	b.n	8001c02 <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a55      	ldr	r2, [pc, #340]	; (8001d14 <pwm_Config+0x17c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d106      	bne.n	8001bd0 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001bc2:	4b53      	ldr	r3, [pc, #332]	; (8001d10 <pwm_Config+0x178>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	4a52      	ldr	r2, [pc, #328]	; (8001d10 <pwm_Config+0x178>)
 8001bc8:	f043 0302 	orr.w	r3, r3, #2
 8001bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bce:	e018      	b.n	8001c02 <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a50      	ldr	r2, [pc, #320]	; (8001d18 <pwm_Config+0x180>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d106      	bne.n	8001be8 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001bda:	4b4d      	ldr	r3, [pc, #308]	; (8001d10 <pwm_Config+0x178>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	4a4c      	ldr	r2, [pc, #304]	; (8001d10 <pwm_Config+0x178>)
 8001be0:	f043 0304 	orr.w	r3, r3, #4
 8001be4:	6413      	str	r3, [r2, #64]	; 0x40
 8001be6:	e00c      	b.n	8001c02 <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a4b      	ldr	r2, [pc, #300]	; (8001d1c <pwm_Config+0x184>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d106      	bne.n	8001c00 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001bf2:	4b47      	ldr	r3, [pc, #284]	; (8001d10 <pwm_Config+0x178>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	4a46      	ldr	r2, [pc, #280]	; (8001d10 <pwm_Config+0x178>)
 8001bf8:	f043 0308 	orr.w	r3, r3, #8
 8001bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfe:	e000      	b.n	8001c02 <pwm_Config+0x6a>
	}
	else{
		__NOP();
 8001c00:	bf00      	nop
	}

	/* 1. Cargamos la frecuencia deseada */
	setFrequency(ptrPwmHandler);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f8dc 	bl	8001dc0 <setFrequency>

	/* 2. Cargamos el valor del dutty-Cycle*/
	setDuttyCycle(ptrPwmHandler);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f8ed 	bl	8001de8 <setDuttyCycle>

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0210 	bic.w	r2, r2, #16
 8001c1c:	601a      	str	r2, [r3, #0]
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	791b      	ldrb	r3, [r3, #4]
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d86e      	bhi.n	8001d04 <pwm_Config+0x16c>
 8001c26:	a201      	add	r2, pc, #4	; (adr r2, 8001c2c <pwm_Config+0x94>)
 8001c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2c:	08001c3d 	.word	0x08001c3d
 8001c30:	08001c6f 	.word	0x08001c6f
 8001c34:	08001ca1 	.word	0x08001ca1
 8001c38:	08001cd3 	.word	0x08001cd3
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~(TIM_CCMR1_CC1S);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	699a      	ldr	r2, [r3, #24]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0203 	bic.w	r2, r2, #3
 8001c4a:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC1M_Pos);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699a      	ldr	r2, [r3, #24]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001c5a:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	699a      	ldr	r2, [r3, #24]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0208 	orr.w	r2, r2, #8
 8001c6a:	619a      	str	r2, [r3, #24]

		break;
 8001c6c:	e04b      	b.n	8001d06 <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~(TIM_CCMR1_CC2S);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	699a      	ldr	r2, [r3, #24]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001c7c:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC2M_Pos);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699a      	ldr	r2, [r3, #24]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001c8c:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	699a      	ldr	r2, [r3, #24]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c9c:	619a      	str	r2, [r3, #24]
		break;
 8001c9e:	e032      	b.n	8001d06 <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_3:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~(TIM_CCMR2_CC3S);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	69da      	ldr	r2, [r3, #28]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0203 	bic.w	r2, r2, #3
 8001cae:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC3M_Pos);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	69da      	ldr	r2, [r3, #28]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001cbe:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	69da      	ldr	r2, [r3, #28]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0208 	orr.w	r2, r2, #8
 8001cce:	61da      	str	r2, [r3, #28]
		break;
 8001cd0:	e019      	b.n	8001d06 <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_4:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~(TIM_CCMR2_CC4S);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	69da      	ldr	r2, [r3, #28]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001ce0:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC4M_Pos);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	69da      	ldr	r2, [r3, #28]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001cf0:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	69da      	ldr	r2, [r3, #28]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d00:	61da      	str	r2, [r3, #28]
		break;
 8001d02:	e000      	b.n	8001d06 <pwm_Config+0x16e>
	}

	default:{
		break;
 8001d04:	bf00      	nop

	/* 6. Activamos la salida seleccionada */
	enableOutput(ptrPwmHandler);

	}// fin del switch-case
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40000400 	.word	0x40000400
 8001d18:	40000800 	.word	0x40000800
 8001d1c:	40000c00 	.word	0x40000c00

08001d20 <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	601a      	str	r2, [r3, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr
	...

08001d44 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
void enableOutput(PWM_Handler_t *ptrPwmHandler) {
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
	switch (ptrPwmHandler->config.channel) {
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	791b      	ldrb	r3, [r3, #4]
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d82f      	bhi.n	8001db4 <enableOutput+0x70>
 8001d54:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <enableOutput+0x18>)
 8001d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5a:	bf00      	nop
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001d7f 	.word	0x08001d7f
 8001d64:	08001d91 	.word	0x08001d91
 8001d68:	08001da3 	.word	0x08001da3
	case PWM_CHANNEL_1: {
		// Activamos la salida del canal 1
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6a1a      	ldr	r2, [r3, #32]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	621a      	str	r2, [r3, #32]
		break;
 8001d7c:	e01b      	b.n	8001db6 <enableOutput+0x72>
	}

	case PWM_CHANNEL_2: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6a1a      	ldr	r2, [r3, #32]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f042 0210 	orr.w	r2, r2, #16
 8001d8c:	621a      	str	r2, [r3, #32]
		break;
 8001d8e:	e012      	b.n	8001db6 <enableOutput+0x72>
	}

	case PWM_CHANNEL_3: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6a1a      	ldr	r2, [r3, #32]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d9e:	621a      	str	r2, [r3, #32]

		break;
 8001da0:	e009      	b.n	8001db6 <enableOutput+0x72>
	}

	case PWM_CHANNEL_4: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6a1a      	ldr	r2, [r3, #32]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001db0:	621a      	str	r2, [r3, #32]

		break;
 8001db2:	e000      	b.n	8001db6 <enableOutput+0x72>
	}

	default: {
		break;
 8001db4:	bf00      	nop
	}
	}
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <setFrequency>:
/*
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler -1;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	3a01      	subs	r2, #1
 8001dd2:	629a      	str	r2, [r3, #40]	; 0x28

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.
	ptrPwmHandler->ptrTIMx->ARR = ptrPwmHandler->config.periodo;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	899a      	ldrh	r2, [r3, #12]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
    setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	791b      	ldrb	r3, [r3, #4]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d823      	bhi.n	8001e40 <setDuttyCycle+0x58>
 8001df8:	a201      	add	r2, pc, #4	; (adr r2, 8001e00 <setDuttyCycle+0x18>)
 8001dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfe:	bf00      	nop
 8001e00:	08001e11 	.word	0x08001e11
 8001e04:	08001e1d 	.word	0x08001e1d
 8001e08:	08001e29 	.word	0x08001e29
 8001e0c:	08001e35 	.word	0x08001e35
	case PWM_CHANNEL_1:{
		ptrPwmHandler->ptrTIMx->CCR1 = ptrPwmHandler->config.duttyCicle;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	89da      	ldrh	r2, [r3, #14]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 8001e1a:	e012      	b.n	8001e42 <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_2:{
		ptrPwmHandler->ptrTIMx->CCR2 = ptrPwmHandler->config.duttyCicle;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	89da      	ldrh	r2, [r3, #14]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001e26:	e00c      	b.n	8001e42 <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_3:{
		ptrPwmHandler->ptrTIMx->CCR3 = ptrPwmHandler->config.duttyCicle;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	89da      	ldrh	r2, [r3, #14]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8001e32:	e006      	b.n	8001e42 <setDuttyCycle+0x5a>
	}

	case PWM_CHANNEL_4:{
		ptrPwmHandler->ptrTIMx->CCR4 = ptrPwmHandler->config.duttyCicle;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	89da      	ldrh	r2, [r3, #14]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8001e3e:	e000      	b.n	8001e42 <setDuttyCycle+0x5a>
	}

	default:{
		break;
 8001e40:	bf00      	nop
	}

	}// fin del switch-case

}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr

08001e4c <updateDuttyCycle>:


/* Función para actualizar el Dutty, funciona de la mano con setDuttyCycle */
void updateDuttyCycle(PWM_Handler_t *ptrPwmHandler, uint16_t newDutty){
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	807b      	strh	r3, [r7, #2]
	// Actualizamos el registro que manipula el dutty
	ptrPwmHandler->config.duttyCicle = newDutty;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	81da      	strh	r2, [r3, #14]

	// Llamamos a la fucnión que cambia el dutty y cargamos el nuevo valor
	setDuttyCycle(ptrPwmHandler);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff ffc2 	bl	8001de8 <setDuttyCycle>
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <__NVIC_EnableIRQ>:
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	db0b      	blt.n	8001e96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	f003 021f 	and.w	r2, r3, #31
 8001e84:	4906      	ldr	r1, [pc, #24]	; (8001ea0 <__NVIC_EnableIRQ+0x34>)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	e000e100 	.word	0xe000e100

08001ea4 <USART_Config>:
 */

// Esta variable es necesaria para las interrupciones del USART 2 y 6.
uint8_t auxRxData = 0;

void USART_Config(USART_Handler_t *ptrUsartHandler){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001eac:	b672      	cpsid	i
}
 8001eae:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a8c      	ldr	r2, [pc, #560]	; (80020e8 <USART_Config+0x244>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d106      	bne.n	8001ec8 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8001eba:	4b8c      	ldr	r3, [pc, #560]	; (80020ec <USART_Config+0x248>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	4a8b      	ldr	r2, [pc, #556]	; (80020ec <USART_Config+0x248>)
 8001ec0:	f043 0310 	orr.w	r3, r3, #16
 8001ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec6:	e016      	b.n	8001ef6 <USART_Config+0x52>
	}else if(ptrUsartHandler->ptrUSARTx == USART6){
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a88      	ldr	r2, [pc, #544]	; (80020f0 <USART_Config+0x24c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d106      	bne.n	8001ee0 <USART_Config+0x3c>
		/*Configuramos el USART 6 que está en el mismo bus del USART 1 */
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8001ed2:	4b86      	ldr	r3, [pc, #536]	; (80020ec <USART_Config+0x248>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	4a85      	ldr	r2, [pc, #532]	; (80020ec <USART_Config+0x248>)
 8001ed8:	f043 0320 	orr.w	r3, r3, #32
 8001edc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ede:	e00a      	b.n	8001ef6 <USART_Config+0x52>
		// Luego el USART 2 que está en el bus 1.
	}else if(ptrUsartHandler->ptrUSARTx == USART2){
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a83      	ldr	r2, [pc, #524]	; (80020f4 <USART_Config+0x250>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d105      	bne.n	8001ef6 <USART_Config+0x52>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8001eea:	4b80      	ldr	r3, [pc, #512]	; (80020ec <USART_Config+0x248>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	4a7f      	ldr	r2, [pc, #508]	; (80020ec <USART_Config+0x248>)
 8001ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef4:	6413      	str	r3, [r2, #64]	; 0x40
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2200      	movs	r2, #0
 8001efc:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2200      	movs	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	79db      	ldrb	r3, [r3, #7]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d025      	beq.n	8001f5a <USART_Config+0xb6>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	79db      	ldrb	r3, [r3, #7]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d110      	bne.n	8001f38 <USART_Config+0x94>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68da      	ldr	r2, [r3, #12]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f24:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	e018      	b.n	8001f6a <USART_Config+0xc6>

		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f46:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f56:	60da      	str	r2, [r3, #12]
 8001f58:	e007      	b.n	8001f6a <USART_Config+0xc6>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f68:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize ==USART_DATASIZE_8BIT){
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	799b      	ldrb	r3, [r3, #6]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d115      	bne.n	8001f9e <USART_Config+0xfa>

	    	// Inicialmente debe corroborarse si se quiere o no la paridad.
	    	if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_NONE){
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	79db      	ldrb	r3, [r3, #7]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d108      	bne.n	8001f8c <USART_Config+0xe8>
	    		// Si se quieren datos de 8 bits.
	    		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	e010      	b.n	8001fae <USART_Config+0x10a>
	    	}
	    	else{
	    		// Si la partidad esta activada, se agrega un BIT adicional.
	    		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f9a:	60da      	str	r2, [r3, #12]
 8001f9c:	e007      	b.n	8001fae <USART_Config+0x10a>
	    	}
	    }
	    else{
	    	// Se configuran 9 bits para el tamaño.
	    	ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001fac:	60da      	str	r2, [r3, #12]
	    }

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	7a1b      	ldrb	r3, [r3, #8]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d84e      	bhi.n	8002054 <USART_Config+0x1b0>
 8001fb6:	a201      	add	r2, pc, #4	; (adr r2, 8001fbc <USART_Config+0x118>)
 8001fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fbc:	08001fcd 	.word	0x08001fcd
 8001fc0:	08001fef 	.word	0x08001fef
 8001fc4:	08002011 	.word	0x08002011
 8001fc8:	08002033 	.word	0x08002033
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691a      	ldr	r2, [r3, #16]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fda:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691a      	ldr	r2, [r3, #16]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fea:	611a      	str	r2, [r3, #16]
		break;
 8001fec:	e043      	b.n	8002076 <USART_Config+0x1d2>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ffc:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800200c:	611a      	str	r2, [r3, #16]
		break;
 800200e:	e032      	b.n	8002076 <USART_Config+0x1d2>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691a      	ldr	r2, [r3, #16]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800201e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691a      	ldr	r2, [r3, #16]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800202e:	611a      	str	r2, [r3, #16]
		break;
 8002030:	e021      	b.n	8002076 <USART_Config+0x1d2>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002040:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002050:	611a      	str	r2, [r3, #16]
		break;
 8002052:	e010      	b.n	8002076 <USART_Config+0x1d2>
	}
	default: {
		// En el caso por defecto seleccionamos 1 bit de parada
		// Escriba acá su código
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691a      	ldr	r2, [r3, #16]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002062:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691a      	ldr	r2, [r3, #16]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002072:	611a      	str	r2, [r3, #16]
		break;
 8002074:	bf00      	nop
	 * decida utilizar el usuario. La función getConfig() retorna esta
	 * frecuencia en que se encuentra actualmente el reloj del sistema PLL,
	 * por tanto, se considera un condicional que incluye los cálculos para
	 * la frecuencia de 100 MHz y por defecto recurre a la frecuencia natural.
	 */
	if(actualFrecuency == 100000000){
 8002076:	f000 fca3 	bl	80029c0 <getConfigPLL>
 800207a:	4603      	mov	r3, r0
 800207c:	4a1e      	ldr	r2, [pc, #120]	; (80020f8 <USART_Config+0x254>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d11d      	bne.n	80020be <USART_Config+0x21a>
		// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
		if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	795b      	ldrb	r3, [r3, #5]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d105      	bne.n	8002096 <USART_Config+0x1f2>
			// El valor a cargar es 651.041 -> Mantiza = 651,fraction = 0.041
			// Mantiza = 651 = 0x28b, fraction = 16 * 0.041 = 1
			// Valor a cargar 0x28B1
			// Configurando el Baudrate generator para una velocidad de 9600bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x28B1;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f642 02b1 	movw	r2, #10417	; 0x28b1
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	e03a      	b.n	800210c <USART_Config+0x268>
		}

		else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	795b      	ldrb	r3, [r3, #5]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d105      	bne.n	80020aa <USART_Config+0x206>
			// El valor a cargar es 325.520 -> Mantiza = 325,fraction = 0.520
			// Mantiza = 325 = 0x145, fraction = 16 * 0.520 = 8
			// Valor a cargar 0x1458
			ptrUsartHandler->ptrUSARTx->BRR = 0x1458;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f241 4258 	movw	r2, #5208	; 0x1458
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	e030      	b.n	800210c <USART_Config+0x268>
		}

		else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	795b      	ldrb	r3, [r3, #5]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d12c      	bne.n	800210c <USART_Config+0x268>
			// El valor a cargar es 54.253 -> Mantiza = 54,fraction = 0.253
			// Mantiza = 54 = 0x36, fraction = 16 * 0.253 = 4.
			ptrUsartHandler->ptrUSARTx->BRR = 0x364;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f44f 7259 	mov.w	r2, #868	; 0x364
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	e026      	b.n	800210c <USART_Config+0x268>
		}
	// Caso por defecto de 16 MHz.
	}else{
		// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
		if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	795b      	ldrb	r3, [r3, #5]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d105      	bne.n	80020d2 <USART_Config+0x22e>
			// El valor a cargar es 104.1875 -> Mantiza = 104,fraction = 0.1875
			// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
			// Valor a cargar 0x0683
			// Configurando el Baudrate generator para una velocidad de 9600bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f240 6283 	movw	r2, #1667	; 0x683
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	e01c      	b.n	800210c <USART_Config+0x268>
		}

		else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	795b      	ldrb	r3, [r3, #5]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d110      	bne.n	80020fc <USART_Config+0x258>
			// El valor a cargar es 52.0625 -> Mantiza = 52,fraction = 0.0625
			// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
			// Escriba acá su código y los comentarios que faltan
			// Valor a cargar 0x0341
			ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f240 3241 	movw	r2, #833	; 0x341
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	e012      	b.n	800210c <USART_Config+0x268>
 80020e6:	bf00      	nop
 80020e8:	40011000 	.word	0x40011000
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40011400 	.word	0x40011400
 80020f4:	40004400 	.word	0x40004400
 80020f8:	05f5e100 	.word	0x05f5e100
		}

		else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	795b      	ldrb	r3, [r3, #5]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d103      	bne.n	800210c <USART_Config+0x268>
			// Escriba acá su código y los comentarios que faltan
			// El valor a cargar es 8.6875 -> Mantiza = 8,fraction = 0.6875
			// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11 = B.
			ptrUsartHandler->ptrUSARTx->BRR = 0x008B;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	228b      	movs	r2, #139	; 0x8b
 800210a:	609a      	str	r2, [r3, #8]
		}
	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	791b      	ldrb	r3, [r3, #4]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d847      	bhi.n	80021a4 <USART_Config+0x300>
 8002114:	a201      	add	r2, pc, #4	; (adr r2, 800211c <USART_Config+0x278>)
 8002116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211a:	bf00      	nop
 800211c:	0800212d 	.word	0x0800212d
 8002120:	0800213f 	.word	0x0800213f
 8002124:	08002151 	.word	0x08002151
 8002128:	08002173 	.word	0x08002173
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_TE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0208 	orr.w	r2, r2, #8
 800213a:	60da      	str	r2, [r3, #12]
		break;
 800213c:	e04b      	b.n	80021d6 <USART_Config+0x332>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_RE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f042 0204 	orr.w	r2, r2, #4
 800214c:	60da      	str	r2, [r3, #12]
		break;
 800214e:	e042      	b.n	80021d6 <USART_Config+0x332>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmision como recepcion
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_TE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0208 	orr.w	r2, r2, #8
 800215e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_RE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0204 	orr.w	r2, r2, #4
 800216e:	60da      	str	r2, [r3, #12]
		break;
 8002170:	e031      	b.n	80021d6 <USART_Config+0x332>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		// Escriba acá su código
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0204 	bic.w	r2, r2, #4
 8002180:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0208 	bic.w	r2, r2, #8
 8002190:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021a0:	60da      	str	r2, [r3, #12]
		break;
 80021a2:	e018      	b.n	80021d6 <USART_Config+0x332>
	}

	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0204 	bic.w	r2, r2, #4
 80021b2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0208 	bic.w	r2, r2, #8
 80021c2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021d2:	60da      	str	r2, [r3, #12]
		break;
 80021d4:	bf00      	nop
	}
	}

	// 2.7 Activamos el módulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	791b      	ldrb	r3, [r3, #4]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d007      	beq.n	80021ee <USART_Config+0x34a>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021ec:	60da      	str	r2, [r3, #12]
	}
	// Se verifica la activación de la interrupcion Rx
	if (ptrUsartHandler->ptrUSARTx == USART1){
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a28      	ldr	r2, [pc, #160]	; (8002294 <USART_Config+0x3f0>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d03a      	beq.n	800226e <USART_Config+0x3ca>
	}

	/* 1.2 Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2) {
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a26      	ldr	r2, [pc, #152]	; (8002298 <USART_Config+0x3f4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d118      	bne.n	8002234 <USART_Config+0x390>
		if (ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE) {
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	7a5b      	ldrb	r3, [r3, #9]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d10b      	bne.n	8002222 <USART_Config+0x37e>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68da      	ldr	r2, [r3, #12]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0220 	orr.w	r2, r2, #32
 8002218:	60da      	str	r2, [r3, #12]
			NVIC_EnableIRQ(USART2_IRQn);
 800221a:	2026      	movs	r0, #38	; 0x26
 800221c:	f7ff fe26 	bl	8001e6c <__NVIC_EnableIRQ>
 8002220:	e025      	b.n	800226e <USART_Config+0x3ca>
		} else {
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0220 	bic.w	r2, r2, #32
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	e01c      	b.n	800226e <USART_Config+0x3ca>
		}
	}

	/* 1.3 Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6) {
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a18      	ldr	r2, [pc, #96]	; (800229c <USART_Config+0x3f8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d117      	bne.n	800226e <USART_Config+0x3ca>
		if (ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE) {
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	7a5b      	ldrb	r3, [r3, #9]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d10b      	bne.n	800225e <USART_Config+0x3ba>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0220 	orr.w	r2, r2, #32
 8002254:	60da      	str	r2, [r3, #12]
			NVIC_EnableIRQ(USART6_IRQn);
 8002256:	2047      	movs	r0, #71	; 0x47
 8002258:	f7ff fe08 	bl	8001e6c <__NVIC_EnableIRQ>
 800225c:	e007      	b.n	800226e <USART_Config+0x3ca>
		} else {
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0220 	bic.w	r2, r2, #32
 800226c:	60da      	str	r2, [r3, #12]
		}
	}

	// 2.8 Activamos el módulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	791b      	ldrb	r3, [r3, #4]
 8002272:	2b03      	cmp	r3, #3
 8002274:	d007      	beq.n	8002286 <USART_Config+0x3e2>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002284:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8002286:	b662      	cpsie	i
}
 8002288:	bf00      	nop
	}

	// Activamos las interrupciones globales
	__enable_irq();
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40011000 	.word	0x40011000
 8002298:	40004400 	.word	0x40004400
 800229c:	40011400 	.word	0x40011400

080022a0 <usart6Rx_Callback>:
	            the usart2Rx_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void usart6Rx_Callback(void){
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the usart6Rx_Callback could be implemented in the main file
	   */
	__NOP();
 80022a4:	bf00      	nop
}
 80022a6:	bf00      	nop
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr

080022ae <writeChar>:

/* funcion para escribir un solo char */
int writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80022b8:	e000      	b.n	80022bc <writeChar+0xe>
		__NOP();
 80022ba:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f7      	beq.n	80022ba <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	605a      	str	r2, [r3, #4]

	return dataToSend;
 80022d2:	683b      	ldr	r3, [r7, #0]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr

080022de <writeMsg>:

// función para escribir un mensaje
void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
	while(*msgToSend != '\0'){
 80022e8:	e008      	b.n	80022fc <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	4619      	mov	r1, r3
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff ffdc 	bl	80022ae <writeChar>
		msgToSend++;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1f2      	bne.n	80022ea <writeMsg+0xc>
	}
}
 8002304:	bf00      	nop
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <getRxData>:

// función auxiliar
uint8_t getRxData(void){
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
	return auxRxData;
 8002314:	4b02      	ldr	r3, [pc, #8]	; (8002320 <getRxData+0x10>)
 8002316:	781b      	ldrb	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	20000450 	.word	0x20000450

08002324 <USART2_IRQHandler>:

/* INTERRUPCIONES DEL USART */
// Se debe crear una variable auxiliar para la lectura que se declara al inicio.

/* Para el USART 2 */
void USART2_IRQHandler(void){
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
	// Se evalúa si la interrupción que se dio es por RX
	if(USART2->SR & USART_SR_RXNE){
 8002328:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <USART2_IRQHandler+0x30>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0320 	and.w	r3, r3, #32
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00c      	beq.n	800234e <USART2_IRQHandler+0x2a>
		USART2->SR &= ~USART_SR_RXNE;
 8002334:	4b07      	ldr	r3, [pc, #28]	; (8002354 <USART2_IRQHandler+0x30>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a06      	ldr	r2, [pc, #24]	; (8002354 <USART2_IRQHandler+0x30>)
 800233a:	f023 0320 	bic.w	r3, r3, #32
 800233e:	6013      	str	r3, [r2, #0]
		auxRxData = (uint8_t) USART2->DR;
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <USART2_IRQHandler+0x30>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4b04      	ldr	r3, [pc, #16]	; (8002358 <USART2_IRQHandler+0x34>)
 8002348:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 800234a:	f7ff f959 	bl	8001600 <usart2Rx_Callback>
	}
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40004400 	.word	0x40004400
 8002358:	20000450 	.word	0x20000450

0800235c <USART6_IRQHandler>:

/* Para el USART 6 */
void USART6_IRQHandler(void){
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
	// Evaluamos que la interrupción que se dio es por RX
	if(USART6->SR & USART_SR_RXNE){
 8002360:	4b0a      	ldr	r3, [pc, #40]	; (800238c <USART6_IRQHandler+0x30>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0320 	and.w	r3, r3, #32
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00c      	beq.n	8002386 <USART6_IRQHandler+0x2a>
		USART6->SR &= ~USART_SR_RXNE;
 800236c:	4b07      	ldr	r3, [pc, #28]	; (800238c <USART6_IRQHandler+0x30>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a06      	ldr	r2, [pc, #24]	; (800238c <USART6_IRQHandler+0x30>)
 8002372:	f023 0320 	bic.w	r3, r3, #32
 8002376:	6013      	str	r3, [r2, #0]
		auxRxData = (uint8_t) USART6->DR;
 8002378:	4b04      	ldr	r3, [pc, #16]	; (800238c <USART6_IRQHandler+0x30>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4b04      	ldr	r3, [pc, #16]	; (8002390 <USART6_IRQHandler+0x34>)
 8002380:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 8002382:	f7ff ff8d 	bl	80022a0 <usart6Rx_Callback>
	}
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40011400 	.word	0x40011400
 8002390:	20000450 	.word	0x20000450

08002394 <__NVIC_EnableIRQ>:
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	db0b      	blt.n	80023be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	f003 021f 	and.w	r2, r3, #31
 80023ac:	4906      	ldr	r1, [pc, #24]	; (80023c8 <__NVIC_EnableIRQ+0x34>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	2001      	movs	r0, #1
 80023b6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr
 80023c8:	e000e100 	.word	0xe000e100

080023cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	6039      	str	r1, [r7, #0]
 80023d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	db0a      	blt.n	80023f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	490c      	ldr	r1, [pc, #48]	; (8002418 <__NVIC_SetPriority+0x4c>)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	0112      	lsls	r2, r2, #4
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	440b      	add	r3, r1
 80023f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f4:	e00a      	b.n	800240c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4908      	ldr	r1, [pc, #32]	; (800241c <__NVIC_SetPriority+0x50>)
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	3b04      	subs	r3, #4
 8002404:	0112      	lsls	r2, r2, #4
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	440b      	add	r3, r1
 800240a:	761a      	strb	r2, [r3, #24]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000e100 	.word	0xe000e100
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <getADC>:
/*
 * Función que retorna el ultimo dato adquirido por la ADC
 * La idea es que esta función es llamada desde la función callback, de forma que
 * siempre se obtiene el valor mas actual de la conversión ADC.
 * */
uint16_t getADC(void){
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
	// Esta variable es actualizada en la ISR de la conversión, cada vez que se obtiene
	// un nuevo valor.
	return adcRawData;
 8002424:	4b02      	ldr	r3, [pc, #8]	; (8002430 <getADC+0x10>)
 8002426:	881b      	ldrh	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	20000452 	.word	0x20000452

08002434 <ADC_IRQHandler>:

/*
 * Esta es la ISR de la interrupción por conversión ADC
 */
void ADC_IRQHandler(void){
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
	// Evaluamos que se dio la interrupción por conversión ADC
	if(ADC1->SR & ADC_SR_EOC){
 8002438:	4b07      	ldr	r3, [pc, #28]	; (8002458 <ADC_IRQHandler+0x24>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d006      	beq.n	8002452 <ADC_IRQHandler+0x1e>
		// Leemos el resultado de la conversión ADC y lo cargamos en una variale auxiliar
		// la cual es utilizada en la función getADC()
		adcRawData = ADC1->DR;
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <ADC_IRQHandler+0x24>)
 8002446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002448:	b29a      	uxth	r2, r3
 800244a:	4b04      	ldr	r3, [pc, #16]	; (800245c <ADC_IRQHandler+0x28>)
 800244c:	801a      	strh	r2, [r3, #0]

		// Hacemos el llamado a la función que se ejecutará en el main
		adcComplete_Callback();
 800244e:	f7ff f8e3 	bl	8001618 <adcComplete_Callback>
	}

}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40012000 	.word	0x40012000
 800245c:	20000452 	.word	0x20000452

08002460 <configAnalogPin>:
/*
 * Con esta función configuramos que pin deseamos que funcione como canal ADC
 * Esta funcion trabaja con el GPIOxDriver, por lo cual requiere que se incluya
 * dicho driver.
 */
void configAnalogPin(uint8_t adcChannel){
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]

	// Con este switch seleccionamos el canal y lo configuramos como análogo.
	switch (adcChannel) {
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	2b0f      	cmp	r3, #15
 800246e:	f200 8093 	bhi.w	8002598 <configAnalogPin+0x138>
 8002472:	a201      	add	r2, pc, #4	; (adr r2, 8002478 <configAnalogPin+0x18>)
 8002474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002478:	080024b9 	.word	0x080024b9
 800247c:	080024c7 	.word	0x080024c7
 8002480:	080024d5 	.word	0x080024d5
 8002484:	080024e3 	.word	0x080024e3
 8002488:	080024f1 	.word	0x080024f1
 800248c:	080024ff 	.word	0x080024ff
 8002490:	0800250d 	.word	0x0800250d
 8002494:	0800251b 	.word	0x0800251b
 8002498:	08002529 	.word	0x08002529
 800249c:	08002537 	.word	0x08002537
 80024a0:	08002545 	.word	0x08002545
 80024a4:	08002553 	.word	0x08002553
 80024a8:	08002561 	.word	0x08002561
 80024ac:	0800256f 	.word	0x0800256f
 80024b0:	0800257d 	.word	0x0800257d
 80024b4:	0800258b 	.word	0x0800258b
	 * asignar. (Esto está más o menos en la página 40 del datasheet del micro)
	 */

	case ADC_CHANNEL_0: {
		// Es el pin PA0
		handlerAdcPin.pGPIOx 						= GPIOA;
 80024b8:	4b3d      	ldr	r3, [pc, #244]	; (80025b0 <configAnalogPin+0x150>)
 80024ba:	4a3e      	ldr	r2, [pc, #248]	; (80025b4 <configAnalogPin+0x154>)
 80024bc:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 80024be:	4b3c      	ldr	r3, [pc, #240]	; (80025b0 <configAnalogPin+0x150>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	711a      	strb	r2, [r3, #4]
		// Nota: Para el ejercicio inicial solo se necesita este canal, los demas
		// se necesitan para trabajos posteriores.
		break;
 80024c4:	e069      	b.n	800259a <configAnalogPin+0x13a>
	}
		;

	case ADC_CHANNEL_1: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx						= GPIOA;
 80024c6:	4b3a      	ldr	r3, [pc, #232]	; (80025b0 <configAnalogPin+0x150>)
 80024c8:	4a3a      	ldr	r2, [pc, #232]	; (80025b4 <configAnalogPin+0x154>)
 80024ca:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 80024cc:	4b38      	ldr	r3, [pc, #224]	; (80025b0 <configAnalogPin+0x150>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	711a      	strb	r2, [r3, #4]

		break;
 80024d2:	e062      	b.n	800259a <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_2: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 80024d4:	4b36      	ldr	r3, [pc, #216]	; (80025b0 <configAnalogPin+0x150>)
 80024d6:	4a37      	ldr	r2, [pc, #220]	; (80025b4 <configAnalogPin+0x154>)
 80024d8:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 80024da:	4b35      	ldr	r3, [pc, #212]	; (80025b0 <configAnalogPin+0x150>)
 80024dc:	2202      	movs	r2, #2
 80024de:	711a      	strb	r2, [r3, #4]

		break;
 80024e0:	e05b      	b.n	800259a <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_3: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 80024e2:	4b33      	ldr	r3, [pc, #204]	; (80025b0 <configAnalogPin+0x150>)
 80024e4:	4a33      	ldr	r2, [pc, #204]	; (80025b4 <configAnalogPin+0x154>)
 80024e6:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 80024e8:	4b31      	ldr	r3, [pc, #196]	; (80025b0 <configAnalogPin+0x150>)
 80024ea:	2203      	movs	r2, #3
 80024ec:	711a      	strb	r2, [r3, #4]

		break;
 80024ee:	e054      	b.n	800259a <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_4: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 80024f0:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <configAnalogPin+0x150>)
 80024f2:	4a30      	ldr	r2, [pc, #192]	; (80025b4 <configAnalogPin+0x154>)
 80024f4:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 80024f6:	4b2e      	ldr	r3, [pc, #184]	; (80025b0 <configAnalogPin+0x150>)
 80024f8:	2204      	movs	r2, #4
 80024fa:	711a      	strb	r2, [r3, #4]

		break;
 80024fc:	e04d      	b.n	800259a <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_5: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 80024fe:	4b2c      	ldr	r3, [pc, #176]	; (80025b0 <configAnalogPin+0x150>)
 8002500:	4a2c      	ldr	r2, [pc, #176]	; (80025b4 <configAnalogPin+0x154>)
 8002502:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8002504:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <configAnalogPin+0x150>)
 8002506:	2205      	movs	r2, #5
 8002508:	711a      	strb	r2, [r3, #4]

		break;
 800250a:	e046      	b.n	800259a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_6: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 800250c:	4b28      	ldr	r3, [pc, #160]	; (80025b0 <configAnalogPin+0x150>)
 800250e:	4a29      	ldr	r2, [pc, #164]	; (80025b4 <configAnalogPin+0x154>)
 8002510:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_6;
 8002512:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <configAnalogPin+0x150>)
 8002514:	2206      	movs	r2, #6
 8002516:	711a      	strb	r2, [r3, #4]

		break;
 8002518:	e03f      	b.n	800259a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_7: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 800251a:	4b25      	ldr	r3, [pc, #148]	; (80025b0 <configAnalogPin+0x150>)
 800251c:	4a25      	ldr	r2, [pc, #148]	; (80025b4 <configAnalogPin+0x154>)
 800251e:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_7;
 8002520:	4b23      	ldr	r3, [pc, #140]	; (80025b0 <configAnalogPin+0x150>)
 8002522:	2207      	movs	r2, #7
 8002524:	711a      	strb	r2, [r3, #4]

		break;
 8002526:	e038      	b.n	800259a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_8: {
		//Es el pin PB0
		handlerAdcPin.pGPIOx 						= GPIOB;
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <configAnalogPin+0x150>)
 800252a:	4a23      	ldr	r2, [pc, #140]	; (80025b8 <configAnalogPin+0x158>)
 800252c:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 800252e:	4b20      	ldr	r3, [pc, #128]	; (80025b0 <configAnalogPin+0x150>)
 8002530:	2200      	movs	r2, #0
 8002532:	711a      	strb	r2, [r3, #4]
		break;
 8002534:	e031      	b.n	800259a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_9: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOB;
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <configAnalogPin+0x150>)
 8002538:	4a1f      	ldr	r2, [pc, #124]	; (80025b8 <configAnalogPin+0x158>)
 800253a:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 800253c:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <configAnalogPin+0x150>)
 800253e:	2201      	movs	r2, #1
 8002540:	711a      	strb	r2, [r3, #4]

		break;
 8002542:	e02a      	b.n	800259a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_10: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8002544:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <configAnalogPin+0x150>)
 8002546:	4a1d      	ldr	r2, [pc, #116]	; (80025bc <configAnalogPin+0x15c>)
 8002548:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 800254a:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <configAnalogPin+0x150>)
 800254c:	2200      	movs	r2, #0
 800254e:	711a      	strb	r2, [r3, #4]

		break;
 8002550:	e023      	b.n	800259a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_11: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8002552:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <configAnalogPin+0x150>)
 8002554:	4a19      	ldr	r2, [pc, #100]	; (80025bc <configAnalogPin+0x15c>)
 8002556:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8002558:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <configAnalogPin+0x150>)
 800255a:	2201      	movs	r2, #1
 800255c:	711a      	strb	r2, [r3, #4]

		break;
 800255e:	e01c      	b.n	800259a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_12: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8002560:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <configAnalogPin+0x150>)
 8002562:	4a16      	ldr	r2, [pc, #88]	; (80025bc <configAnalogPin+0x15c>)
 8002564:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8002566:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <configAnalogPin+0x150>)
 8002568:	2202      	movs	r2, #2
 800256a:	711a      	strb	r2, [r3, #4]

		break;
 800256c:	e015      	b.n	800259a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_13: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <configAnalogPin+0x150>)
 8002570:	4a12      	ldr	r2, [pc, #72]	; (80025bc <configAnalogPin+0x15c>)
 8002572:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8002574:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <configAnalogPin+0x150>)
 8002576:	2203      	movs	r2, #3
 8002578:	711a      	strb	r2, [r3, #4]

		break;
 800257a:	e00e      	b.n	800259a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_14: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 800257c:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <configAnalogPin+0x150>)
 800257e:	4a0f      	ldr	r2, [pc, #60]	; (80025bc <configAnalogPin+0x15c>)
 8002580:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 8002582:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <configAnalogPin+0x150>)
 8002584:	2204      	movs	r2, #4
 8002586:	711a      	strb	r2, [r3, #4]

		break;
 8002588:	e007      	b.n	800259a <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_15: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 800258a:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <configAnalogPin+0x150>)
 800258c:	4a0b      	ldr	r2, [pc, #44]	; (80025bc <configAnalogPin+0x15c>)
 800258e:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8002590:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <configAnalogPin+0x150>)
 8002592:	2205      	movs	r2, #5
 8002594:	711a      	strb	r2, [r3, #4]

		break;
 8002596:	e000      	b.n	800259a <configAnalogPin+0x13a>
	}
	default: {
		break;
 8002598:	bf00      	nop

	}
	/*
	 * Se carga la información de cada pin configurado sobre el GPIO.
	 */
	handlerAdcPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 800259a:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <configAnalogPin+0x150>)
 800259c:	2203      	movs	r2, #3
 800259e:	715a      	strb	r2, [r3, #5]
	GPIO_Config(&handlerAdcPin);
 80025a0:	4803      	ldr	r0, [pc, #12]	; (80025b0 <configAnalogPin+0x150>)
 80025a2:	f7ff f9bb 	bl	800191c <GPIO_Config>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000458 	.word	0x20000458
 80025b4:	40020000 	.word	0x40020000
 80025b8:	40020400 	.word	0x40020400
 80025bc:	40020800 	.word	0x40020800

080025c0 <adcConfigEvents>:
 * de la conversión adc. Los bits correspondientes a EXTSEL jerarquizan los
 * eventos externos dependiendo del canal que se quiera utilizar en cada uno
 * de los timmers disponibles para este propósito. Ver página 231 del reference
 * manual.
 */
void adcConfigEvents(ADC_Config_t *adcConfig) {
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

	// Trigger detection on the rising edge, se toman los flancos
	// de bajada para los trigger externos
	ADC1->CR2 |= ADC_CR2_EXTEN_0;
 80025c8:	4b42      	ldr	r3, [pc, #264]	; (80026d4 <adcConfigEvents+0x114>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	4a41      	ldr	r2, [pc, #260]	; (80026d4 <adcConfigEvents+0x114>)
 80025ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d2:	6093      	str	r3, [r2, #8]

	if (adcConfig->AdcEventType == TIMER_ADC_EVENT) {
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	7a1b      	ldrb	r3, [r3, #8]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d16f      	bne.n	80026bc <adcConfigEvents+0xfc>
		switch (adcConfig->AdcChannelEvent) {
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	7a5b      	ldrb	r3, [r3, #9]
 80025e0:	2b0a      	cmp	r3, #10
 80025e2:	d864      	bhi.n	80026ae <adcConfigEvents+0xee>
 80025e4:	a201      	add	r2, pc, #4	; (adr r2, 80025ec <adcConfigEvents+0x2c>)
 80025e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ea:	bf00      	nop
 80025ec:	08002619 	.word	0x08002619
 80025f0:	08002623 	.word	0x08002623
 80025f4:	08002631 	.word	0x08002631
 80025f8:	0800263f 	.word	0x0800263f
 80025fc:	0800264d 	.word	0x0800264d
 8002600:	0800265b 	.word	0x0800265b
 8002604:	08002669 	.word	0x08002669
 8002608:	08002677 	.word	0x08002677
 800260c:	08002685 	.word	0x08002685
 8002610:	08002693 	.word	0x08002693
 8002614:	080026a1 	.word	0x080026a1

		case TIM1_CH1: {
			// Evento TIM1 CC1 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x0 << ADC_CR2_EXTSEL_Pos);
 8002618:	4b2e      	ldr	r3, [pc, #184]	; (80026d4 <adcConfigEvents+0x114>)
 800261a:	4a2e      	ldr	r2, [pc, #184]	; (80026d4 <adcConfigEvents+0x114>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	6093      	str	r3, [r2, #8]
			break;
 8002620:	e053      	b.n	80026ca <adcConfigEvents+0x10a>
		}

		case TIM1_CH2: {
			// Evento TIM1 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x1 << ADC_CR2_EXTSEL_Pos);
 8002622:	4b2c      	ldr	r3, [pc, #176]	; (80026d4 <adcConfigEvents+0x114>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	4a2b      	ldr	r2, [pc, #172]	; (80026d4 <adcConfigEvents+0x114>)
 8002628:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800262c:	6093      	str	r3, [r2, #8]
			break;
 800262e:	e04c      	b.n	80026ca <adcConfigEvents+0x10a>
		}

		case TIM1_CH3: {
			// Evento TIM1 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x2 << ADC_CR2_EXTSEL_Pos);
 8002630:	4b28      	ldr	r3, [pc, #160]	; (80026d4 <adcConfigEvents+0x114>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4a27      	ldr	r2, [pc, #156]	; (80026d4 <adcConfigEvents+0x114>)
 8002636:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800263a:	6093      	str	r3, [r2, #8]
			break;
 800263c:	e045      	b.n	80026ca <adcConfigEvents+0x10a>
		}

		case TIM2_CH2: {
			// Evento TIM2 CC2 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x3 << ADC_CR2_EXTSEL_Pos);
 800263e:	4b25      	ldr	r3, [pc, #148]	; (80026d4 <adcConfigEvents+0x114>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	4a24      	ldr	r2, [pc, #144]	; (80026d4 <adcConfigEvents+0x114>)
 8002644:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8002648:	6093      	str	r3, [r2, #8]
			break;
 800264a:	e03e      	b.n	80026ca <adcConfigEvents+0x10a>
		}

		case TIM2_CH3: {
			// Evento TIM2 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x4 << ADC_CR2_EXTSEL_Pos);
 800264c:	4b21      	ldr	r3, [pc, #132]	; (80026d4 <adcConfigEvents+0x114>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	4a20      	ldr	r2, [pc, #128]	; (80026d4 <adcConfigEvents+0x114>)
 8002652:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002656:	6093      	str	r3, [r2, #8]
			break;
 8002658:	e037      	b.n	80026ca <adcConfigEvents+0x10a>
		}

		case TIM2_CH4: {
			// Evento TIM2 CC4 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x5 << ADC_CR2_EXTSEL_Pos);
 800265a:	4b1e      	ldr	r3, [pc, #120]	; (80026d4 <adcConfigEvents+0x114>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	4a1d      	ldr	r2, [pc, #116]	; (80026d4 <adcConfigEvents+0x114>)
 8002660:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8002664:	6093      	str	r3, [r2, #8]
			break;
 8002666:	e030      	b.n	80026ca <adcConfigEvents+0x10a>
		}

		case TIM3_CH1: {
			// Evento TIM3 CC1 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x7 << ADC_CR2_EXTSEL_Pos);
 8002668:	4b1a      	ldr	r3, [pc, #104]	; (80026d4 <adcConfigEvents+0x114>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4a19      	ldr	r2, [pc, #100]	; (80026d4 <adcConfigEvents+0x114>)
 800266e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002672:	6093      	str	r3, [r2, #8]
			break;
 8002674:	e029      	b.n	80026ca <adcConfigEvents+0x10a>
		}

		case TIM4_CH4: {
			// Evento TIM4 CC4 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x9 << ADC_CR2_EXTSEL_Pos);
 8002676:	4b17      	ldr	r3, [pc, #92]	; (80026d4 <adcConfigEvents+0x114>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	4a16      	ldr	r2, [pc, #88]	; (80026d4 <adcConfigEvents+0x114>)
 800267c:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
 8002680:	6093      	str	r3, [r2, #8]
			break;
 8002682:	e022      	b.n	80026ca <adcConfigEvents+0x10a>
		}

		case TIM5_CH1: {
			// Evento TIM5 CC1 event para lanzar la conversion ADC
			ADC1->CR2 |= (0xA << ADC_CR2_EXTSEL_Pos);
 8002684:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <adcConfigEvents+0x114>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <adcConfigEvents+0x114>)
 800268a:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
 800268e:	6093      	str	r3, [r2, #8]
			break;
 8002690:	e01b      	b.n	80026ca <adcConfigEvents+0x10a>
		}

		case TIM5_CH2: {
			// Evento TIM5 CC2 event para lanzar la conversion ADC
			ADC1->CR2 |= (0xB << ADC_CR2_EXTSEL_Pos);
 8002692:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <adcConfigEvents+0x114>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	4a0f      	ldr	r2, [pc, #60]	; (80026d4 <adcConfigEvents+0x114>)
 8002698:	f043 6330 	orr.w	r3, r3, #184549376	; 0xb000000
 800269c:	6093      	str	r3, [r2, #8]
			break;
 800269e:	e014      	b.n	80026ca <adcConfigEvents+0x10a>
		}

		case TIM5_CH3: {
			// Evento TIM5 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0xC << ADC_CR2_EXTSEL_Pos);
 80026a0:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <adcConfigEvents+0x114>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	4a0b      	ldr	r2, [pc, #44]	; (80026d4 <adcConfigEvents+0x114>)
 80026a6:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 80026aa:	6093      	str	r3, [r2, #8]
			break;
 80026ac:	e00d      	b.n	80026ca <adcConfigEvents+0x10a>
		}

		default: {
			// 1100: Timer 5 CC3 event
			ADC1->CR2 |= (0xC << ADC_CR2_EXTSEL_Pos);
 80026ae:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <adcConfigEvents+0x114>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	4a08      	ldr	r2, [pc, #32]	; (80026d4 <adcConfigEvents+0x114>)
 80026b4:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 80026b8:	6093      	str	r3, [r2, #8]
			break;
 80026ba:	e006      	b.n	80026ca <adcConfigEvents+0x10a>

		}
	}

	else {
		ADC1->CR2 |= (0xF << ADC_CR2_EXTSEL_Pos);
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <adcConfigEvents+0x114>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	4a04      	ldr	r2, [pc, #16]	; (80026d4 <adcConfigEvents+0x114>)
 80026c2:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80026c6:	6093      	str	r3, [r2, #8]
	}
}
 80026c8:	bf00      	nop
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	40012000 	.word	0x40012000

080026d8 <adcMultiChannel>:
 * para realizar varias conversiones ADC. La función recibe como parámetros
 * la configuración del ADC y el número de conversiones que se requieren,
 * que para efectos prácticos es el número de canales sobre los cuales
 * se van a hacer las conversiones.
 */
void adcMultiChannel(ADC_Config_t *adcConfig, uint8_t numberOfConversion){
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	70fb      	strb	r3, [r7, #3]
	for(counter5 = 0; counter5<numberOfConversion; counter5++){
 80026e4:	4b8b      	ldr	r3, [pc, #556]	; (8002914 <adcMultiChannel+0x23c>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
 80026ea:	e00e      	b.n	800270a <adcMultiChannel+0x32>
		/* 1. Configuramos el PinX para que cumpla la función de canal análogo deseado. */
		configAnalogPin(adcConfig->adcMultiChannel[counter5]);
 80026ec:	4b89      	ldr	r3, [pc, #548]	; (8002914 <adcMultiChannel+0x23c>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	7a9b      	ldrb	r3, [r3, #10]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff feb1 	bl	8002460 <configAnalogPin>
	for(counter5 = 0; counter5<numberOfConversion; counter5++){
 80026fe:	4b85      	ldr	r3, [pc, #532]	; (8002914 <adcMultiChannel+0x23c>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	3301      	adds	r3, #1
 8002704:	b2da      	uxtb	r2, r3
 8002706:	4b83      	ldr	r3, [pc, #524]	; (8002914 <adcMultiChannel+0x23c>)
 8002708:	701a      	strb	r2, [r3, #0]
 800270a:	4b82      	ldr	r3, [pc, #520]	; (8002914 <adcMultiChannel+0x23c>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	78fa      	ldrb	r2, [r7, #3]
 8002710:	429a      	cmp	r2, r3
 8002712:	d8eb      	bhi.n	80026ec <adcMultiChannel+0x14>
	}

	/* 2. Activamos la señal de reloj para el periférico ADC1 (bus APB2)*/
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8002714:	4b80      	ldr	r3, [pc, #512]	; (8002918 <adcMultiChannel+0x240>)
 8002716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002718:	4a7f      	ldr	r2, [pc, #508]	; (8002918 <adcMultiChannel+0x240>)
 800271a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800271e:	6453      	str	r3, [r2, #68]	; 0x44

	// Limpiamos los registros antes de comenzar a configurar
	ADC1->CR1 = 0;
 8002720:	4b7e      	ldr	r3, [pc, #504]	; (800291c <adcMultiChannel+0x244>)
 8002722:	2200      	movs	r2, #0
 8002724:	605a      	str	r2, [r3, #4]
	ADC1->CR2 = 0;
 8002726:	4b7d      	ldr	r3, [pc, #500]	; (800291c <adcMultiChannel+0x244>)
 8002728:	2200      	movs	r2, #0
 800272a:	609a      	str	r2, [r3, #8]

	/* Comenzamos la configuración del ADC1 */
	/* 3. Resolución del ADC */
	// Preferible utilizar la conversión a 12 bits para usar
	// la máxima capacidad del microcontrolador.
	switch (adcConfig->resolution) {
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	785b      	ldrb	r3, [r3, #1]
 8002730:	2b03      	cmp	r3, #3
 8002732:	d83f      	bhi.n	80027b4 <adcMultiChannel+0xdc>
 8002734:	a201      	add	r2, pc, #4	; (adr r2, 800273c <adcMultiChannel+0x64>)
 8002736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273a:	bf00      	nop
 800273c:	0800274d 	.word	0x0800274d
 8002740:	08002767 	.word	0x08002767
 8002744:	08002781 	.word	0x08002781
 8002748:	0800279b 	.word	0x0800279b
	case ADC_RESOLUTION_12_BIT: {

		ADC1->CR1 &= ~ADC_CR1_RES_0;
 800274c:	4b73      	ldr	r3, [pc, #460]	; (800291c <adcMultiChannel+0x244>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	4a72      	ldr	r2, [pc, #456]	; (800291c <adcMultiChannel+0x244>)
 8002752:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002756:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_1;
 8002758:	4b70      	ldr	r3, [pc, #448]	; (800291c <adcMultiChannel+0x244>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4a6f      	ldr	r2, [pc, #444]	; (800291c <adcMultiChannel+0x244>)
 800275e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002762:	6053      	str	r3, [r2, #4]
		break;
 8002764:	e027      	b.n	80027b6 <adcMultiChannel+0xde>
	}

	case ADC_RESOLUTION_10_BIT: {

		ADC1->CR1 |= ADC_CR1_RES_0;
 8002766:	4b6d      	ldr	r3, [pc, #436]	; (800291c <adcMultiChannel+0x244>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	4a6c      	ldr	r2, [pc, #432]	; (800291c <adcMultiChannel+0x244>)
 800276c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002770:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_1;
 8002772:	4b6a      	ldr	r3, [pc, #424]	; (800291c <adcMultiChannel+0x244>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	4a69      	ldr	r2, [pc, #420]	; (800291c <adcMultiChannel+0x244>)
 8002778:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800277c:	6053      	str	r3, [r2, #4]
		break;
 800277e:	e01a      	b.n	80027b6 <adcMultiChannel+0xde>
	}

	case ADC_RESOLUTION_8_BIT: {

		ADC1->CR1 |= ADC_CR1_RES_1;
 8002780:	4b66      	ldr	r3, [pc, #408]	; (800291c <adcMultiChannel+0x244>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	4a65      	ldr	r2, [pc, #404]	; (800291c <adcMultiChannel+0x244>)
 8002786:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800278a:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_0;
 800278c:	4b63      	ldr	r3, [pc, #396]	; (800291c <adcMultiChannel+0x244>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	4a62      	ldr	r2, [pc, #392]	; (800291c <adcMultiChannel+0x244>)
 8002792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002796:	6053      	str	r3, [r2, #4]
		break;
 8002798:	e00d      	b.n	80027b6 <adcMultiChannel+0xde>
	}

	case ADC_RESOLUTION_6_BIT: {
		ADC1->CR1 |= ADC_CR1_RES_0;
 800279a:	4b60      	ldr	r3, [pc, #384]	; (800291c <adcMultiChannel+0x244>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	4a5f      	ldr	r2, [pc, #380]	; (800291c <adcMultiChannel+0x244>)
 80027a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027a4:	6053      	str	r3, [r2, #4]
		ADC1->CR1 |= ADC_CR1_RES_1;
 80027a6:	4b5d      	ldr	r3, [pc, #372]	; (800291c <adcMultiChannel+0x244>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4a5c      	ldr	r2, [pc, #368]	; (800291c <adcMultiChannel+0x244>)
 80027ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027b0:	6053      	str	r3, [r2, #4]
		break;
 80027b2:	e000      	b.n	80027b6 <adcMultiChannel+0xde>
	}

	default: {
		break;
 80027b4:	bf00      	nop
	}
	}

	/* 4. Configuramos el modo Scan como ACTIVADO */
	ADC1->CR1 |= ADC_CR1_SCAN;
 80027b6:	4b59      	ldr	r3, [pc, #356]	; (800291c <adcMultiChannel+0x244>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	4a58      	ldr	r2, [pc, #352]	; (800291c <adcMultiChannel+0x244>)
 80027bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c0:	6053      	str	r3, [r2, #4]
	// Se configura además el EOCS end of conversion.
	ADC1->CR2 |= ADC_CR2_EOCS;
 80027c2:	4b56      	ldr	r3, [pc, #344]	; (800291c <adcMultiChannel+0x244>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	4a55      	ldr	r2, [pc, #340]	; (800291c <adcMultiChannel+0x244>)
 80027c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027cc:	6093      	str	r3, [r2, #8]

	/* 5. Configuramos la alineación de los datos (derecha o izquierda) */
	if (adcConfig->dataAlignment == ADC_ALIGNMENT_RIGHT) {
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	791b      	ldrb	r3, [r3, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <adcMultiChannel+0x10c>
		// Alineación a la derecha (esta es la forma "natural")
		ADC1->CR2 &= ~ADC_CR2_ALIGN;
 80027d6:	4b51      	ldr	r3, [pc, #324]	; (800291c <adcMultiChannel+0x244>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	4a50      	ldr	r2, [pc, #320]	; (800291c <adcMultiChannel+0x244>)
 80027dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027e0:	6093      	str	r3, [r2, #8]
 80027e2:	e005      	b.n	80027f0 <adcMultiChannel+0x118>
	} else {
		// Alineación a la izquierda (para algunos cálculos matemáticos)
		ADC1->CR2 |= ADC_CR2_ALIGN;
 80027e4:	4b4d      	ldr	r3, [pc, #308]	; (800291c <adcMultiChannel+0x244>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	4a4c      	ldr	r2, [pc, #304]	; (800291c <adcMultiChannel+0x244>)
 80027ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027ee:	6093      	str	r3, [r2, #8]
	}

	/* 6. Desactivamos el "continuos mode" */
	ADC1->CR2 &= ~ADC_CR2_CONT;
 80027f0:	4b4a      	ldr	r3, [pc, #296]	; (800291c <adcMultiChannel+0x244>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	4a49      	ldr	r2, [pc, #292]	; (800291c <adcMultiChannel+0x244>)
 80027f6:	f023 0302 	bic.w	r3, r3, #2
 80027fa:	6093      	str	r3, [r2, #8]

	/* 7. Acá se debería configurar el sampling...*/

	for(counter5 = 0; counter5 < numberOfConversion; counter5++){
 80027fc:	4b45      	ldr	r3, [pc, #276]	; (8002914 <adcMultiChannel+0x23c>)
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
 8002802:	e037      	b.n	8002874 <adcMultiChannel+0x19c>
		if (adcConfig->adcMultiChannel[counter5] <= ADC_CHANNEL_9) {
 8002804:	4b43      	ldr	r3, [pc, #268]	; (8002914 <adcMultiChannel+0x23c>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	7a9b      	ldrb	r3, [r3, #10]
 8002810:	2b09      	cmp	r3, #9
 8002812:	d814      	bhi.n	800283e <adcMultiChannel+0x166>
			// Acá se establecen la cantidad de ciclos para cada canal (0 al 9)
			ADC1->SMPR2 |= (adcConfig->samplingPeriod << (3 * (adcConfig->adcMultiChannel[counter5])));
 8002814:	4b41      	ldr	r3, [pc, #260]	; (800291c <adcMultiChannel+0x244>)
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	885b      	ldrh	r3, [r3, #2]
 800281c:	4618      	mov	r0, r3
 800281e:	4b3d      	ldr	r3, [pc, #244]	; (8002914 <adcMultiChannel+0x23c>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	4619      	mov	r1, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	440b      	add	r3, r1
 8002828:	7a9b      	ldrb	r3, [r3, #10]
 800282a:	4619      	mov	r1, r3
 800282c:	460b      	mov	r3, r1
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	440b      	add	r3, r1
 8002832:	fa00 f303 	lsl.w	r3, r0, r3
 8002836:	4939      	ldr	r1, [pc, #228]	; (800291c <adcMultiChannel+0x244>)
 8002838:	4313      	orrs	r3, r2
 800283a:	610b      	str	r3, [r1, #16]
 800283c:	e014      	b.n	8002868 <adcMultiChannel+0x190>

		} else {
			// Acá se establecen la cantidad de ciclos para cada canal (10 al 18)
			ADC1->SMPR1 |= (adcConfig->samplingPeriod << (3 * (adcConfig->adcMultiChannel[counter5] - 10)));
 800283e:	4b37      	ldr	r3, [pc, #220]	; (800291c <adcMultiChannel+0x244>)
 8002840:	68d9      	ldr	r1, [r3, #12]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	885b      	ldrh	r3, [r3, #2]
 8002846:	4618      	mov	r0, r3
 8002848:	4b32      	ldr	r3, [pc, #200]	; (8002914 <adcMultiChannel+0x23c>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	461a      	mov	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4413      	add	r3, r2
 8002852:	7a9b      	ldrb	r3, [r3, #10]
 8002854:	f1a3 020a 	sub.w	r2, r3, #10
 8002858:	4613      	mov	r3, r2
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4413      	add	r3, r2
 800285e:	fa00 f303 	lsl.w	r3, r0, r3
 8002862:	4a2e      	ldr	r2, [pc, #184]	; (800291c <adcMultiChannel+0x244>)
 8002864:	430b      	orrs	r3, r1
 8002866:	60d3      	str	r3, [r2, #12]
	for(counter5 = 0; counter5 < numberOfConversion; counter5++){
 8002868:	4b2a      	ldr	r3, [pc, #168]	; (8002914 <adcMultiChannel+0x23c>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	3301      	adds	r3, #1
 800286e:	b2da      	uxtb	r2, r3
 8002870:	4b28      	ldr	r3, [pc, #160]	; (8002914 <adcMultiChannel+0x23c>)
 8002872:	701a      	strb	r2, [r3, #0]
 8002874:	4b27      	ldr	r3, [pc, #156]	; (8002914 <adcMultiChannel+0x23c>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	78fa      	ldrb	r2, [r7, #3]
 800287a:	429a      	cmp	r2, r3
 800287c:	d8c2      	bhi.n	8002804 <adcMultiChannel+0x12c>
		}
	}

	/* 8. Configuramos la secuencia y cuantos elementos hay en la secuencia */
	// Al hacerlo todo 0, estamos seleccionando solo 1 elemento en el conteo de la secuencia
	ADC1->SQR1 = (numberOfConversion - 1) << ADC_SQR1_L_Pos;
 800287e:	78fb      	ldrb	r3, [r7, #3]
 8002880:	3b01      	subs	r3, #1
 8002882:	051a      	lsls	r2, r3, #20
 8002884:	4b25      	ldr	r3, [pc, #148]	; (800291c <adcMultiChannel+0x244>)
 8002886:	62da      	str	r2, [r3, #44]	; 0x2c

	// Asignamos el orden de la conversión dependiendo del canal en que
	// se esté haciendo, de allí la variación en la agrupación de los
	// registros.
	for(counter5 = 0; counter5 < numberOfConversion; counter5++){
 8002888:	4b22      	ldr	r3, [pc, #136]	; (8002914 <adcMultiChannel+0x23c>)
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
 800288e:	e06a      	b.n	8002966 <adcMultiChannel+0x28e>
		if(adcConfig->adcMultiChannel[counter5] <= 6){
 8002890:	4b20      	ldr	r3, [pc, #128]	; (8002914 <adcMultiChannel+0x23c>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4413      	add	r3, r2
 800289a:	7a9b      	ldrb	r3, [r3, #10]
 800289c:	2b06      	cmp	r3, #6
 800289e:	d814      	bhi.n	80028ca <adcMultiChannel+0x1f2>
			ADC1->SQR3 |= (adcConfig->adcMultiChannel[counter5] << (5 * counter5));
 80028a0:	4b1e      	ldr	r3, [pc, #120]	; (800291c <adcMultiChannel+0x244>)
 80028a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028a4:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <adcMultiChannel+0x23c>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	4619      	mov	r1, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	440b      	add	r3, r1
 80028ae:	7a9b      	ldrb	r3, [r3, #10]
 80028b0:	4618      	mov	r0, r3
 80028b2:	4b18      	ldr	r3, [pc, #96]	; (8002914 <adcMultiChannel+0x23c>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	4619      	mov	r1, r3
 80028b8:	460b      	mov	r3, r1
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	fa00 f303 	lsl.w	r3, r0, r3
 80028c2:	4916      	ldr	r1, [pc, #88]	; (800291c <adcMultiChannel+0x244>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	634b      	str	r3, [r1, #52]	; 0x34
 80028c8:	e047      	b.n	800295a <adcMultiChannel+0x282>
		}
		else if(adcConfig->adcMultiChannel[counter5] > 6 && adcConfig->adcMultiChannel[counter5] <= 12){
 80028ca:	4b12      	ldr	r3, [pc, #72]	; (8002914 <adcMultiChannel+0x23c>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4413      	add	r3, r2
 80028d4:	7a9b      	ldrb	r3, [r3, #10]
 80028d6:	2b06      	cmp	r3, #6
 80028d8:	d922      	bls.n	8002920 <adcMultiChannel+0x248>
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <adcMultiChannel+0x23c>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4413      	add	r3, r2
 80028e4:	7a9b      	ldrb	r3, [r3, #10]
 80028e6:	2b0c      	cmp	r3, #12
 80028e8:	d81a      	bhi.n	8002920 <adcMultiChannel+0x248>
			ADC1->SQR2 |= (adcConfig->adcMultiChannel[counter5] << (5 * (counter5 - 7)));
 80028ea:	4b0c      	ldr	r3, [pc, #48]	; (800291c <adcMultiChannel+0x244>)
 80028ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <adcMultiChannel+0x23c>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4413      	add	r3, r2
 80028f8:	7a9b      	ldrb	r3, [r3, #10]
 80028fa:	4618      	mov	r0, r3
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <adcMultiChannel+0x23c>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	1fda      	subs	r2, r3, #7
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	fa00 f303 	lsl.w	r3, r0, r3
 800290c:	4a03      	ldr	r2, [pc, #12]	; (800291c <adcMultiChannel+0x244>)
 800290e:	430b      	orrs	r3, r1
 8002910:	6313      	str	r3, [r2, #48]	; 0x30
 8002912:	e022      	b.n	800295a <adcMultiChannel+0x282>
 8002914:	20000454 	.word	0x20000454
 8002918:	40023800 	.word	0x40023800
 800291c:	40012000 	.word	0x40012000
		}
		else if(adcConfig->adcMultiChannel[counter5] > 12){
 8002920:	4b24      	ldr	r3, [pc, #144]	; (80029b4 <adcMultiChannel+0x2dc>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4413      	add	r3, r2
 800292a:	7a9b      	ldrb	r3, [r3, #10]
 800292c:	2b0c      	cmp	r3, #12
 800292e:	d914      	bls.n	800295a <adcMultiChannel+0x282>
			ADC1->SQR1 |= (adcConfig->adcMultiChannel[counter5] << (5 * (counter5 - 13)));
 8002930:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <adcMultiChannel+0x2e0>)
 8002932:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002934:	4b1f      	ldr	r3, [pc, #124]	; (80029b4 <adcMultiChannel+0x2dc>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	7a9b      	ldrb	r3, [r3, #10]
 8002940:	4618      	mov	r0, r3
 8002942:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <adcMultiChannel+0x2dc>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	f1a3 020d 	sub.w	r2, r3, #13
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	fa00 f303 	lsl.w	r3, r0, r3
 8002954:	4a18      	ldr	r2, [pc, #96]	; (80029b8 <adcMultiChannel+0x2e0>)
 8002956:	430b      	orrs	r3, r1
 8002958:	62d3      	str	r3, [r2, #44]	; 0x2c
	for(counter5 = 0; counter5 < numberOfConversion; counter5++){
 800295a:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <adcMultiChannel+0x2dc>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	3301      	adds	r3, #1
 8002960:	b2da      	uxtb	r2, r3
 8002962:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <adcMultiChannel+0x2dc>)
 8002964:	701a      	strb	r2, [r3, #0]
 8002966:	4b13      	ldr	r3, [pc, #76]	; (80029b4 <adcMultiChannel+0x2dc>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	78fa      	ldrb	r2, [r7, #3]
 800296c:	429a      	cmp	r2, r3
 800296e:	d88f      	bhi.n	8002890 <adcMultiChannel+0x1b8>
		}
	}

	/* 9. Configuramos el preescaler del ADC en 2:1 (el mas rápido que se puede tener */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 8002970:	4b12      	ldr	r3, [pc, #72]	; (80029bc <adcMultiChannel+0x2e4>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	4a11      	ldr	r2, [pc, #68]	; (80029bc <adcMultiChannel+0x2e4>)
 8002976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297a:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800297c:	b672      	cpsid	i
}
 800297e:	bf00      	nop

	/* 10. Desactivamos las interrupciones globales */
	__disable_irq();

	/* 11. Activamos la interrupción debida a la finalización de una conversión EOC (CR1)*/
	ADC1->CR1 |= ADC_CR1_EOCIE;
 8002980:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <adcMultiChannel+0x2e0>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	4a0c      	ldr	r2, [pc, #48]	; (80029b8 <adcMultiChannel+0x2e0>)
 8002986:	f043 0320 	orr.w	r3, r3, #32
 800298a:	6053      	str	r3, [r2, #4]

	/* 11a. Matriculamos la interrupción en el NVIC*/
	__NVIC_EnableIRQ(ADC_IRQn);
 800298c:	2012      	movs	r0, #18
 800298e:	f7ff fd01 	bl	8002394 <__NVIC_EnableIRQ>

	/* 11b. Configuramos la prioridad para la interrupción ADC */
	__NVIC_SetPriority(ADC_IRQn, 1);
 8002992:	2101      	movs	r1, #1
 8002994:	2012      	movs	r0, #18
 8002996:	f7ff fd19 	bl	80023cc <__NVIC_SetPriority>

	/* 12. Activamos el modulo ADC */
	ADC1->CR2 |= ADC_CR2_ADON;
 800299a:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <adcMultiChannel+0x2e0>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	4a06      	ldr	r2, [pc, #24]	; (80029b8 <adcMultiChannel+0x2e0>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80029a6:	b662      	cpsie	i
}
 80029a8:	bf00      	nop

	/* 13. Activamos las interrupciones globales */
	__enable_irq();

}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000454 	.word	0x20000454
 80029b8:	40012000 	.word	0x40012000
 80029bc:	40012300 	.word	0x40012300

080029c0 <getConfigPLL>:
	RCC->CR |= RCC_CR_HSITRIM_3;

}// FIN DE LA FUNCIÓN DE CONFIGURACIÓN PARA DISTINTAS FRECUENCIAS.

// Función para saber el estado del PLL y así poder caracterizar lo demás.
uint32_t getConfigPLL(void){
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
	// Se buscan los valores que están definiendo los valores actuales del reloj PLL
	uint32_t PLLN = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 80029c6:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <getConfigPLL+0x3c>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	099b      	lsrs	r3, r3, #6
 80029cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029d0:	60fb      	str	r3, [r7, #12]
	uint32_t PLLM = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos;
 80029d2:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <getConfigPLL+0x3c>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029da:	60bb      	str	r3, [r7, #8]
	// Se hace la operación para saber el valor actual del reloj. (Asume PLLP =2)
	uint32_t clockMicro = (HSI_VALUE / PLLM) * PLLN / 2;
 80029dc:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <getConfigPLL+0x40>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	fb02 f303 	mul.w	r3, r2, r3
 80029ec:	085b      	lsrs	r3, r3, #1
 80029ee:	607b      	str	r3, [r7, #4]
	return clockMicro;
 80029f0:	687b      	ldr	r3, [r7, #4]

}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	40023800 	.word	0x40023800
 8002a00:	20000040 	.word	0x20000040

08002a04 <__libc_init_array>:
 8002a04:	b570      	push	{r4, r5, r6, lr}
 8002a06:	4d0d      	ldr	r5, [pc, #52]	; (8002a3c <__libc_init_array+0x38>)
 8002a08:	4c0d      	ldr	r4, [pc, #52]	; (8002a40 <__libc_init_array+0x3c>)
 8002a0a:	1b64      	subs	r4, r4, r5
 8002a0c:	10a4      	asrs	r4, r4, #2
 8002a0e:	2600      	movs	r6, #0
 8002a10:	42a6      	cmp	r6, r4
 8002a12:	d109      	bne.n	8002a28 <__libc_init_array+0x24>
 8002a14:	4d0b      	ldr	r5, [pc, #44]	; (8002a44 <__libc_init_array+0x40>)
 8002a16:	4c0c      	ldr	r4, [pc, #48]	; (8002a48 <__libc_init_array+0x44>)
 8002a18:	f004 fc8a 	bl	8007330 <_init>
 8002a1c:	1b64      	subs	r4, r4, r5
 8002a1e:	10a4      	asrs	r4, r4, #2
 8002a20:	2600      	movs	r6, #0
 8002a22:	42a6      	cmp	r6, r4
 8002a24:	d105      	bne.n	8002a32 <__libc_init_array+0x2e>
 8002a26:	bd70      	pop	{r4, r5, r6, pc}
 8002a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a2c:	4798      	blx	r3
 8002a2e:	3601      	adds	r6, #1
 8002a30:	e7ee      	b.n	8002a10 <__libc_init_array+0xc>
 8002a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a36:	4798      	blx	r3
 8002a38:	3601      	adds	r6, #1
 8002a3a:	e7f2      	b.n	8002a22 <__libc_init_array+0x1e>
 8002a3c:	08007814 	.word	0x08007814
 8002a40:	08007814 	.word	0x08007814
 8002a44:	08007814 	.word	0x08007814
 8002a48:	08007818 	.word	0x08007818

08002a4c <memset>:
 8002a4c:	4402      	add	r2, r0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d100      	bne.n	8002a56 <memset+0xa>
 8002a54:	4770      	bx	lr
 8002a56:	f803 1b01 	strb.w	r1, [r3], #1
 8002a5a:	e7f9      	b.n	8002a50 <memset+0x4>

08002a5c <__cvt>:
 8002a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a60:	b088      	sub	sp, #32
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	461f      	mov	r7, r3
 8002a66:	4614      	mov	r4, r2
 8002a68:	bfb8      	it	lt
 8002a6a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002a6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002a70:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002a72:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002a76:	bfb6      	itet	lt
 8002a78:	461f      	movlt	r7, r3
 8002a7a:	2300      	movge	r3, #0
 8002a7c:	232d      	movlt	r3, #45	; 0x2d
 8002a7e:	7013      	strb	r3, [r2, #0]
 8002a80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002a82:	f023 0820 	bic.w	r8, r3, #32
 8002a86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002a8a:	d005      	beq.n	8002a98 <__cvt+0x3c>
 8002a8c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002a90:	d100      	bne.n	8002a94 <__cvt+0x38>
 8002a92:	3501      	adds	r5, #1
 8002a94:	2302      	movs	r3, #2
 8002a96:	e000      	b.n	8002a9a <__cvt+0x3e>
 8002a98:	2303      	movs	r3, #3
 8002a9a:	aa07      	add	r2, sp, #28
 8002a9c:	9204      	str	r2, [sp, #16]
 8002a9e:	aa06      	add	r2, sp, #24
 8002aa0:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002aa4:	e9cd 3500 	strd	r3, r5, [sp]
 8002aa8:	4622      	mov	r2, r4
 8002aaa:	463b      	mov	r3, r7
 8002aac:	f001 fd78 	bl	80045a0 <_dtoa_r>
 8002ab0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002ab4:	4606      	mov	r6, r0
 8002ab6:	d102      	bne.n	8002abe <__cvt+0x62>
 8002ab8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002aba:	07db      	lsls	r3, r3, #31
 8002abc:	d522      	bpl.n	8002b04 <__cvt+0xa8>
 8002abe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002ac2:	eb06 0905 	add.w	r9, r6, r5
 8002ac6:	d110      	bne.n	8002aea <__cvt+0x8e>
 8002ac8:	7833      	ldrb	r3, [r6, #0]
 8002aca:	2b30      	cmp	r3, #48	; 0x30
 8002acc:	d10a      	bne.n	8002ae4 <__cvt+0x88>
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	4639      	mov	r1, r7
 8002ad6:	f7fd ffff 	bl	8000ad8 <__aeabi_dcmpeq>
 8002ada:	b918      	cbnz	r0, 8002ae4 <__cvt+0x88>
 8002adc:	f1c5 0501 	rsb	r5, r5, #1
 8002ae0:	f8ca 5000 	str.w	r5, [sl]
 8002ae4:	f8da 3000 	ldr.w	r3, [sl]
 8002ae8:	4499      	add	r9, r3
 8002aea:	2200      	movs	r2, #0
 8002aec:	2300      	movs	r3, #0
 8002aee:	4620      	mov	r0, r4
 8002af0:	4639      	mov	r1, r7
 8002af2:	f7fd fff1 	bl	8000ad8 <__aeabi_dcmpeq>
 8002af6:	b108      	cbz	r0, 8002afc <__cvt+0xa0>
 8002af8:	f8cd 901c 	str.w	r9, [sp, #28]
 8002afc:	2230      	movs	r2, #48	; 0x30
 8002afe:	9b07      	ldr	r3, [sp, #28]
 8002b00:	454b      	cmp	r3, r9
 8002b02:	d307      	bcc.n	8002b14 <__cvt+0xb8>
 8002b04:	9b07      	ldr	r3, [sp, #28]
 8002b06:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002b08:	1b9b      	subs	r3, r3, r6
 8002b0a:	4630      	mov	r0, r6
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	b008      	add	sp, #32
 8002b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b14:	1c59      	adds	r1, r3, #1
 8002b16:	9107      	str	r1, [sp, #28]
 8002b18:	701a      	strb	r2, [r3, #0]
 8002b1a:	e7f0      	b.n	8002afe <__cvt+0xa2>

08002b1c <__exponent>:
 8002b1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2900      	cmp	r1, #0
 8002b22:	bfb8      	it	lt
 8002b24:	4249      	neglt	r1, r1
 8002b26:	f803 2b02 	strb.w	r2, [r3], #2
 8002b2a:	bfb4      	ite	lt
 8002b2c:	222d      	movlt	r2, #45	; 0x2d
 8002b2e:	222b      	movge	r2, #43	; 0x2b
 8002b30:	2909      	cmp	r1, #9
 8002b32:	7042      	strb	r2, [r0, #1]
 8002b34:	dd2a      	ble.n	8002b8c <__exponent+0x70>
 8002b36:	f10d 0407 	add.w	r4, sp, #7
 8002b3a:	46a4      	mov	ip, r4
 8002b3c:	270a      	movs	r7, #10
 8002b3e:	46a6      	mov	lr, r4
 8002b40:	460a      	mov	r2, r1
 8002b42:	fb91 f6f7 	sdiv	r6, r1, r7
 8002b46:	fb07 1516 	mls	r5, r7, r6, r1
 8002b4a:	3530      	adds	r5, #48	; 0x30
 8002b4c:	2a63      	cmp	r2, #99	; 0x63
 8002b4e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8002b52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002b56:	4631      	mov	r1, r6
 8002b58:	dcf1      	bgt.n	8002b3e <__exponent+0x22>
 8002b5a:	3130      	adds	r1, #48	; 0x30
 8002b5c:	f1ae 0502 	sub.w	r5, lr, #2
 8002b60:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002b64:	1c44      	adds	r4, r0, #1
 8002b66:	4629      	mov	r1, r5
 8002b68:	4561      	cmp	r1, ip
 8002b6a:	d30a      	bcc.n	8002b82 <__exponent+0x66>
 8002b6c:	f10d 0209 	add.w	r2, sp, #9
 8002b70:	eba2 020e 	sub.w	r2, r2, lr
 8002b74:	4565      	cmp	r5, ip
 8002b76:	bf88      	it	hi
 8002b78:	2200      	movhi	r2, #0
 8002b7a:	4413      	add	r3, r2
 8002b7c:	1a18      	subs	r0, r3, r0
 8002b7e:	b003      	add	sp, #12
 8002b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b86:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002b8a:	e7ed      	b.n	8002b68 <__exponent+0x4c>
 8002b8c:	2330      	movs	r3, #48	; 0x30
 8002b8e:	3130      	adds	r1, #48	; 0x30
 8002b90:	7083      	strb	r3, [r0, #2]
 8002b92:	70c1      	strb	r1, [r0, #3]
 8002b94:	1d03      	adds	r3, r0, #4
 8002b96:	e7f1      	b.n	8002b7c <__exponent+0x60>

08002b98 <_printf_float>:
 8002b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b9c:	b091      	sub	sp, #68	; 0x44
 8002b9e:	460c      	mov	r4, r1
 8002ba0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002ba4:	4616      	mov	r6, r2
 8002ba6:	461f      	mov	r7, r3
 8002ba8:	4605      	mov	r5, r0
 8002baa:	f002 fe53 	bl	8005854 <_localeconv_r>
 8002bae:	6803      	ldr	r3, [r0, #0]
 8002bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fd fb14 	bl	80001e0 <strlen>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	930e      	str	r3, [sp, #56]	; 0x38
 8002bbc:	f8d8 3000 	ldr.w	r3, [r8]
 8002bc0:	900a      	str	r0, [sp, #40]	; 0x28
 8002bc2:	3307      	adds	r3, #7
 8002bc4:	f023 0307 	bic.w	r3, r3, #7
 8002bc8:	f103 0208 	add.w	r2, r3, #8
 8002bcc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002bd0:	f8d4 b000 	ldr.w	fp, [r4]
 8002bd4:	f8c8 2000 	str.w	r2, [r8]
 8002bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bdc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002be0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002be4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002be8:	930b      	str	r3, [sp, #44]	; 0x2c
 8002bea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002bec:	4b9c      	ldr	r3, [pc, #624]	; (8002e60 <_printf_float+0x2c8>)
 8002bee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bf2:	4640      	mov	r0, r8
 8002bf4:	f7fd ffa2 	bl	8000b3c <__aeabi_dcmpun>
 8002bf8:	bb70      	cbnz	r0, 8002c58 <_printf_float+0xc0>
 8002bfa:	4b99      	ldr	r3, [pc, #612]	; (8002e60 <_printf_float+0x2c8>)
 8002bfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002bfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c02:	4640      	mov	r0, r8
 8002c04:	f7fd ff7c 	bl	8000b00 <__aeabi_dcmple>
 8002c08:	bb30      	cbnz	r0, 8002c58 <_printf_float+0xc0>
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	4640      	mov	r0, r8
 8002c10:	4651      	mov	r1, sl
 8002c12:	f7fd ff6b 	bl	8000aec <__aeabi_dcmplt>
 8002c16:	b110      	cbz	r0, 8002c1e <_printf_float+0x86>
 8002c18:	232d      	movs	r3, #45	; 0x2d
 8002c1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c1e:	4b91      	ldr	r3, [pc, #580]	; (8002e64 <_printf_float+0x2cc>)
 8002c20:	4891      	ldr	r0, [pc, #580]	; (8002e68 <_printf_float+0x2d0>)
 8002c22:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002c26:	bf94      	ite	ls
 8002c28:	4698      	movls	r8, r3
 8002c2a:	4680      	movhi	r8, r0
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	6123      	str	r3, [r4, #16]
 8002c30:	f02b 0304 	bic.w	r3, fp, #4
 8002c34:	6023      	str	r3, [r4, #0]
 8002c36:	f04f 0a00 	mov.w	sl, #0
 8002c3a:	9700      	str	r7, [sp, #0]
 8002c3c:	4633      	mov	r3, r6
 8002c3e:	aa0f      	add	r2, sp, #60	; 0x3c
 8002c40:	4621      	mov	r1, r4
 8002c42:	4628      	mov	r0, r5
 8002c44:	f000 f9d2 	bl	8002fec <_printf_common>
 8002c48:	3001      	adds	r0, #1
 8002c4a:	f040 808f 	bne.w	8002d6c <_printf_float+0x1d4>
 8002c4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c52:	b011      	add	sp, #68	; 0x44
 8002c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c58:	4642      	mov	r2, r8
 8002c5a:	4653      	mov	r3, sl
 8002c5c:	4640      	mov	r0, r8
 8002c5e:	4651      	mov	r1, sl
 8002c60:	f7fd ff6c 	bl	8000b3c <__aeabi_dcmpun>
 8002c64:	b140      	cbz	r0, 8002c78 <_printf_float+0xe0>
 8002c66:	f1ba 0f00 	cmp.w	sl, #0
 8002c6a:	bfbc      	itt	lt
 8002c6c:	232d      	movlt	r3, #45	; 0x2d
 8002c6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002c72:	487e      	ldr	r0, [pc, #504]	; (8002e6c <_printf_float+0x2d4>)
 8002c74:	4b7e      	ldr	r3, [pc, #504]	; (8002e70 <_printf_float+0x2d8>)
 8002c76:	e7d4      	b.n	8002c22 <_printf_float+0x8a>
 8002c78:	6863      	ldr	r3, [r4, #4]
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002c80:	d142      	bne.n	8002d08 <_printf_float+0x170>
 8002c82:	2306      	movs	r3, #6
 8002c84:	6063      	str	r3, [r4, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	9206      	str	r2, [sp, #24]
 8002c8a:	aa0e      	add	r2, sp, #56	; 0x38
 8002c8c:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002c90:	aa0d      	add	r2, sp, #52	; 0x34
 8002c92:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002c96:	9203      	str	r2, [sp, #12]
 8002c98:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002c9c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002ca0:	6023      	str	r3, [r4, #0]
 8002ca2:	6863      	ldr	r3, [r4, #4]
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	4642      	mov	r2, r8
 8002ca8:	4653      	mov	r3, sl
 8002caa:	4628      	mov	r0, r5
 8002cac:	910b      	str	r1, [sp, #44]	; 0x2c
 8002cae:	f7ff fed5 	bl	8002a5c <__cvt>
 8002cb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002cb4:	2947      	cmp	r1, #71	; 0x47
 8002cb6:	4680      	mov	r8, r0
 8002cb8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002cba:	d108      	bne.n	8002cce <_printf_float+0x136>
 8002cbc:	1cc8      	adds	r0, r1, #3
 8002cbe:	db02      	blt.n	8002cc6 <_printf_float+0x12e>
 8002cc0:	6863      	ldr	r3, [r4, #4]
 8002cc2:	4299      	cmp	r1, r3
 8002cc4:	dd40      	ble.n	8002d48 <_printf_float+0x1b0>
 8002cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8002cca:	fa5f f989 	uxtb.w	r9, r9
 8002cce:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002cd2:	d81f      	bhi.n	8002d14 <_printf_float+0x17c>
 8002cd4:	3901      	subs	r1, #1
 8002cd6:	464a      	mov	r2, r9
 8002cd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002cdc:	910d      	str	r1, [sp, #52]	; 0x34
 8002cde:	f7ff ff1d 	bl	8002b1c <__exponent>
 8002ce2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002ce4:	1813      	adds	r3, r2, r0
 8002ce6:	2a01      	cmp	r2, #1
 8002ce8:	4682      	mov	sl, r0
 8002cea:	6123      	str	r3, [r4, #16]
 8002cec:	dc02      	bgt.n	8002cf4 <_printf_float+0x15c>
 8002cee:	6822      	ldr	r2, [r4, #0]
 8002cf0:	07d2      	lsls	r2, r2, #31
 8002cf2:	d501      	bpl.n	8002cf8 <_printf_float+0x160>
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	6123      	str	r3, [r4, #16]
 8002cf8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d09c      	beq.n	8002c3a <_printf_float+0xa2>
 8002d00:	232d      	movs	r3, #45	; 0x2d
 8002d02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d06:	e798      	b.n	8002c3a <_printf_float+0xa2>
 8002d08:	2947      	cmp	r1, #71	; 0x47
 8002d0a:	d1bc      	bne.n	8002c86 <_printf_float+0xee>
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1ba      	bne.n	8002c86 <_printf_float+0xee>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e7b7      	b.n	8002c84 <_printf_float+0xec>
 8002d14:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002d18:	d118      	bne.n	8002d4c <_printf_float+0x1b4>
 8002d1a:	2900      	cmp	r1, #0
 8002d1c:	6863      	ldr	r3, [r4, #4]
 8002d1e:	dd0b      	ble.n	8002d38 <_printf_float+0x1a0>
 8002d20:	6121      	str	r1, [r4, #16]
 8002d22:	b913      	cbnz	r3, 8002d2a <_printf_float+0x192>
 8002d24:	6822      	ldr	r2, [r4, #0]
 8002d26:	07d0      	lsls	r0, r2, #31
 8002d28:	d502      	bpl.n	8002d30 <_printf_float+0x198>
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	440b      	add	r3, r1
 8002d2e:	6123      	str	r3, [r4, #16]
 8002d30:	65a1      	str	r1, [r4, #88]	; 0x58
 8002d32:	f04f 0a00 	mov.w	sl, #0
 8002d36:	e7df      	b.n	8002cf8 <_printf_float+0x160>
 8002d38:	b913      	cbnz	r3, 8002d40 <_printf_float+0x1a8>
 8002d3a:	6822      	ldr	r2, [r4, #0]
 8002d3c:	07d2      	lsls	r2, r2, #31
 8002d3e:	d501      	bpl.n	8002d44 <_printf_float+0x1ac>
 8002d40:	3302      	adds	r3, #2
 8002d42:	e7f4      	b.n	8002d2e <_printf_float+0x196>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e7f2      	b.n	8002d2e <_printf_float+0x196>
 8002d48:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002d4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d4e:	4299      	cmp	r1, r3
 8002d50:	db05      	blt.n	8002d5e <_printf_float+0x1c6>
 8002d52:	6823      	ldr	r3, [r4, #0]
 8002d54:	6121      	str	r1, [r4, #16]
 8002d56:	07d8      	lsls	r0, r3, #31
 8002d58:	d5ea      	bpl.n	8002d30 <_printf_float+0x198>
 8002d5a:	1c4b      	adds	r3, r1, #1
 8002d5c:	e7e7      	b.n	8002d2e <_printf_float+0x196>
 8002d5e:	2900      	cmp	r1, #0
 8002d60:	bfd4      	ite	le
 8002d62:	f1c1 0202 	rsble	r2, r1, #2
 8002d66:	2201      	movgt	r2, #1
 8002d68:	4413      	add	r3, r2
 8002d6a:	e7e0      	b.n	8002d2e <_printf_float+0x196>
 8002d6c:	6823      	ldr	r3, [r4, #0]
 8002d6e:	055a      	lsls	r2, r3, #21
 8002d70:	d407      	bmi.n	8002d82 <_printf_float+0x1ea>
 8002d72:	6923      	ldr	r3, [r4, #16]
 8002d74:	4642      	mov	r2, r8
 8002d76:	4631      	mov	r1, r6
 8002d78:	4628      	mov	r0, r5
 8002d7a:	47b8      	blx	r7
 8002d7c:	3001      	adds	r0, #1
 8002d7e:	d12b      	bne.n	8002dd8 <_printf_float+0x240>
 8002d80:	e765      	b.n	8002c4e <_printf_float+0xb6>
 8002d82:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002d86:	f240 80dc 	bls.w	8002f42 <_printf_float+0x3aa>
 8002d8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2300      	movs	r3, #0
 8002d92:	f7fd fea1 	bl	8000ad8 <__aeabi_dcmpeq>
 8002d96:	2800      	cmp	r0, #0
 8002d98:	d033      	beq.n	8002e02 <_printf_float+0x26a>
 8002d9a:	4a36      	ldr	r2, [pc, #216]	; (8002e74 <_printf_float+0x2dc>)
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	4631      	mov	r1, r6
 8002da0:	4628      	mov	r0, r5
 8002da2:	47b8      	blx	r7
 8002da4:	3001      	adds	r0, #1
 8002da6:	f43f af52 	beq.w	8002c4e <_printf_float+0xb6>
 8002daa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002dae:	429a      	cmp	r2, r3
 8002db0:	db02      	blt.n	8002db8 <_printf_float+0x220>
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	07d8      	lsls	r0, r3, #31
 8002db6:	d50f      	bpl.n	8002dd8 <_printf_float+0x240>
 8002db8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002dbc:	4631      	mov	r1, r6
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	47b8      	blx	r7
 8002dc2:	3001      	adds	r0, #1
 8002dc4:	f43f af43 	beq.w	8002c4e <_printf_float+0xb6>
 8002dc8:	f04f 0800 	mov.w	r8, #0
 8002dcc:	f104 091a 	add.w	r9, r4, #26
 8002dd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	4543      	cmp	r3, r8
 8002dd6:	dc09      	bgt.n	8002dec <_printf_float+0x254>
 8002dd8:	6823      	ldr	r3, [r4, #0]
 8002dda:	079b      	lsls	r3, r3, #30
 8002ddc:	f100 8101 	bmi.w	8002fe2 <_printf_float+0x44a>
 8002de0:	68e0      	ldr	r0, [r4, #12]
 8002de2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002de4:	4298      	cmp	r0, r3
 8002de6:	bfb8      	it	lt
 8002de8:	4618      	movlt	r0, r3
 8002dea:	e732      	b.n	8002c52 <_printf_float+0xba>
 8002dec:	2301      	movs	r3, #1
 8002dee:	464a      	mov	r2, r9
 8002df0:	4631      	mov	r1, r6
 8002df2:	4628      	mov	r0, r5
 8002df4:	47b8      	blx	r7
 8002df6:	3001      	adds	r0, #1
 8002df8:	f43f af29 	beq.w	8002c4e <_printf_float+0xb6>
 8002dfc:	f108 0801 	add.w	r8, r8, #1
 8002e00:	e7e6      	b.n	8002dd0 <_printf_float+0x238>
 8002e02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	dc37      	bgt.n	8002e78 <_printf_float+0x2e0>
 8002e08:	4a1a      	ldr	r2, [pc, #104]	; (8002e74 <_printf_float+0x2dc>)
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	4631      	mov	r1, r6
 8002e0e:	4628      	mov	r0, r5
 8002e10:	47b8      	blx	r7
 8002e12:	3001      	adds	r0, #1
 8002e14:	f43f af1b 	beq.w	8002c4e <_printf_float+0xb6>
 8002e18:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	d102      	bne.n	8002e26 <_printf_float+0x28e>
 8002e20:	6823      	ldr	r3, [r4, #0]
 8002e22:	07d9      	lsls	r1, r3, #31
 8002e24:	d5d8      	bpl.n	8002dd8 <_printf_float+0x240>
 8002e26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e2a:	4631      	mov	r1, r6
 8002e2c:	4628      	mov	r0, r5
 8002e2e:	47b8      	blx	r7
 8002e30:	3001      	adds	r0, #1
 8002e32:	f43f af0c 	beq.w	8002c4e <_printf_float+0xb6>
 8002e36:	f04f 0900 	mov.w	r9, #0
 8002e3a:	f104 0a1a 	add.w	sl, r4, #26
 8002e3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e40:	425b      	negs	r3, r3
 8002e42:	454b      	cmp	r3, r9
 8002e44:	dc01      	bgt.n	8002e4a <_printf_float+0x2b2>
 8002e46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e48:	e794      	b.n	8002d74 <_printf_float+0x1dc>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	4652      	mov	r2, sl
 8002e4e:	4631      	mov	r1, r6
 8002e50:	4628      	mov	r0, r5
 8002e52:	47b8      	blx	r7
 8002e54:	3001      	adds	r0, #1
 8002e56:	f43f aefa 	beq.w	8002c4e <_printf_float+0xb6>
 8002e5a:	f109 0901 	add.w	r9, r9, #1
 8002e5e:	e7ee      	b.n	8002e3e <_printf_float+0x2a6>
 8002e60:	7fefffff 	.word	0x7fefffff
 8002e64:	08007370 	.word	0x08007370
 8002e68:	08007374 	.word	0x08007374
 8002e6c:	0800737c 	.word	0x0800737c
 8002e70:	08007378 	.word	0x08007378
 8002e74:	08007380 	.word	0x08007380
 8002e78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	bfa8      	it	ge
 8002e80:	461a      	movge	r2, r3
 8002e82:	2a00      	cmp	r2, #0
 8002e84:	4691      	mov	r9, r2
 8002e86:	dc37      	bgt.n	8002ef8 <_printf_float+0x360>
 8002e88:	f04f 0b00 	mov.w	fp, #0
 8002e8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002e90:	f104 021a 	add.w	r2, r4, #26
 8002e94:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002e98:	ebaa 0309 	sub.w	r3, sl, r9
 8002e9c:	455b      	cmp	r3, fp
 8002e9e:	dc33      	bgt.n	8002f08 <_printf_float+0x370>
 8002ea0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	db3b      	blt.n	8002f20 <_printf_float+0x388>
 8002ea8:	6823      	ldr	r3, [r4, #0]
 8002eaa:	07da      	lsls	r2, r3, #31
 8002eac:	d438      	bmi.n	8002f20 <_printf_float+0x388>
 8002eae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002eb0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002eb2:	eba3 020a 	sub.w	r2, r3, sl
 8002eb6:	eba3 0901 	sub.w	r9, r3, r1
 8002eba:	4591      	cmp	r9, r2
 8002ebc:	bfa8      	it	ge
 8002ebe:	4691      	movge	r9, r2
 8002ec0:	f1b9 0f00 	cmp.w	r9, #0
 8002ec4:	dc34      	bgt.n	8002f30 <_printf_float+0x398>
 8002ec6:	f04f 0800 	mov.w	r8, #0
 8002eca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002ece:	f104 0a1a 	add.w	sl, r4, #26
 8002ed2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	eba3 0309 	sub.w	r3, r3, r9
 8002edc:	4543      	cmp	r3, r8
 8002ede:	f77f af7b 	ble.w	8002dd8 <_printf_float+0x240>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	4652      	mov	r2, sl
 8002ee6:	4631      	mov	r1, r6
 8002ee8:	4628      	mov	r0, r5
 8002eea:	47b8      	blx	r7
 8002eec:	3001      	adds	r0, #1
 8002eee:	f43f aeae 	beq.w	8002c4e <_printf_float+0xb6>
 8002ef2:	f108 0801 	add.w	r8, r8, #1
 8002ef6:	e7ec      	b.n	8002ed2 <_printf_float+0x33a>
 8002ef8:	4613      	mov	r3, r2
 8002efa:	4631      	mov	r1, r6
 8002efc:	4642      	mov	r2, r8
 8002efe:	4628      	mov	r0, r5
 8002f00:	47b8      	blx	r7
 8002f02:	3001      	adds	r0, #1
 8002f04:	d1c0      	bne.n	8002e88 <_printf_float+0x2f0>
 8002f06:	e6a2      	b.n	8002c4e <_printf_float+0xb6>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	4631      	mov	r1, r6
 8002f0c:	4628      	mov	r0, r5
 8002f0e:	920b      	str	r2, [sp, #44]	; 0x2c
 8002f10:	47b8      	blx	r7
 8002f12:	3001      	adds	r0, #1
 8002f14:	f43f ae9b 	beq.w	8002c4e <_printf_float+0xb6>
 8002f18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002f1a:	f10b 0b01 	add.w	fp, fp, #1
 8002f1e:	e7b9      	b.n	8002e94 <_printf_float+0x2fc>
 8002f20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f24:	4631      	mov	r1, r6
 8002f26:	4628      	mov	r0, r5
 8002f28:	47b8      	blx	r7
 8002f2a:	3001      	adds	r0, #1
 8002f2c:	d1bf      	bne.n	8002eae <_printf_float+0x316>
 8002f2e:	e68e      	b.n	8002c4e <_printf_float+0xb6>
 8002f30:	464b      	mov	r3, r9
 8002f32:	eb08 020a 	add.w	r2, r8, sl
 8002f36:	4631      	mov	r1, r6
 8002f38:	4628      	mov	r0, r5
 8002f3a:	47b8      	blx	r7
 8002f3c:	3001      	adds	r0, #1
 8002f3e:	d1c2      	bne.n	8002ec6 <_printf_float+0x32e>
 8002f40:	e685      	b.n	8002c4e <_printf_float+0xb6>
 8002f42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002f44:	2a01      	cmp	r2, #1
 8002f46:	dc01      	bgt.n	8002f4c <_printf_float+0x3b4>
 8002f48:	07db      	lsls	r3, r3, #31
 8002f4a:	d537      	bpl.n	8002fbc <_printf_float+0x424>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	4642      	mov	r2, r8
 8002f50:	4631      	mov	r1, r6
 8002f52:	4628      	mov	r0, r5
 8002f54:	47b8      	blx	r7
 8002f56:	3001      	adds	r0, #1
 8002f58:	f43f ae79 	beq.w	8002c4e <_printf_float+0xb6>
 8002f5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f60:	4631      	mov	r1, r6
 8002f62:	4628      	mov	r0, r5
 8002f64:	47b8      	blx	r7
 8002f66:	3001      	adds	r0, #1
 8002f68:	f43f ae71 	beq.w	8002c4e <_printf_float+0xb6>
 8002f6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002f70:	2200      	movs	r2, #0
 8002f72:	2300      	movs	r3, #0
 8002f74:	f7fd fdb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8002f78:	b9d8      	cbnz	r0, 8002fb2 <_printf_float+0x41a>
 8002f7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f7c:	f108 0201 	add.w	r2, r8, #1
 8002f80:	3b01      	subs	r3, #1
 8002f82:	4631      	mov	r1, r6
 8002f84:	4628      	mov	r0, r5
 8002f86:	47b8      	blx	r7
 8002f88:	3001      	adds	r0, #1
 8002f8a:	d10e      	bne.n	8002faa <_printf_float+0x412>
 8002f8c:	e65f      	b.n	8002c4e <_printf_float+0xb6>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	464a      	mov	r2, r9
 8002f92:	4631      	mov	r1, r6
 8002f94:	4628      	mov	r0, r5
 8002f96:	47b8      	blx	r7
 8002f98:	3001      	adds	r0, #1
 8002f9a:	f43f ae58 	beq.w	8002c4e <_printf_float+0xb6>
 8002f9e:	f108 0801 	add.w	r8, r8, #1
 8002fa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	4543      	cmp	r3, r8
 8002fa8:	dcf1      	bgt.n	8002f8e <_printf_float+0x3f6>
 8002faa:	4653      	mov	r3, sl
 8002fac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002fb0:	e6e1      	b.n	8002d76 <_printf_float+0x1de>
 8002fb2:	f04f 0800 	mov.w	r8, #0
 8002fb6:	f104 091a 	add.w	r9, r4, #26
 8002fba:	e7f2      	b.n	8002fa2 <_printf_float+0x40a>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	4642      	mov	r2, r8
 8002fc0:	e7df      	b.n	8002f82 <_printf_float+0x3ea>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	464a      	mov	r2, r9
 8002fc6:	4631      	mov	r1, r6
 8002fc8:	4628      	mov	r0, r5
 8002fca:	47b8      	blx	r7
 8002fcc:	3001      	adds	r0, #1
 8002fce:	f43f ae3e 	beq.w	8002c4e <_printf_float+0xb6>
 8002fd2:	f108 0801 	add.w	r8, r8, #1
 8002fd6:	68e3      	ldr	r3, [r4, #12]
 8002fd8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002fda:	1a5b      	subs	r3, r3, r1
 8002fdc:	4543      	cmp	r3, r8
 8002fde:	dcf0      	bgt.n	8002fc2 <_printf_float+0x42a>
 8002fe0:	e6fe      	b.n	8002de0 <_printf_float+0x248>
 8002fe2:	f04f 0800 	mov.w	r8, #0
 8002fe6:	f104 0919 	add.w	r9, r4, #25
 8002fea:	e7f4      	b.n	8002fd6 <_printf_float+0x43e>

08002fec <_printf_common>:
 8002fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ff0:	4616      	mov	r6, r2
 8002ff2:	4699      	mov	r9, r3
 8002ff4:	688a      	ldr	r2, [r1, #8]
 8002ff6:	690b      	ldr	r3, [r1, #16]
 8002ff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	bfb8      	it	lt
 8003000:	4613      	movlt	r3, r2
 8003002:	6033      	str	r3, [r6, #0]
 8003004:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003008:	4607      	mov	r7, r0
 800300a:	460c      	mov	r4, r1
 800300c:	b10a      	cbz	r2, 8003012 <_printf_common+0x26>
 800300e:	3301      	adds	r3, #1
 8003010:	6033      	str	r3, [r6, #0]
 8003012:	6823      	ldr	r3, [r4, #0]
 8003014:	0699      	lsls	r1, r3, #26
 8003016:	bf42      	ittt	mi
 8003018:	6833      	ldrmi	r3, [r6, #0]
 800301a:	3302      	addmi	r3, #2
 800301c:	6033      	strmi	r3, [r6, #0]
 800301e:	6825      	ldr	r5, [r4, #0]
 8003020:	f015 0506 	ands.w	r5, r5, #6
 8003024:	d106      	bne.n	8003034 <_printf_common+0x48>
 8003026:	f104 0a19 	add.w	sl, r4, #25
 800302a:	68e3      	ldr	r3, [r4, #12]
 800302c:	6832      	ldr	r2, [r6, #0]
 800302e:	1a9b      	subs	r3, r3, r2
 8003030:	42ab      	cmp	r3, r5
 8003032:	dc26      	bgt.n	8003082 <_printf_common+0x96>
 8003034:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003038:	1e13      	subs	r3, r2, #0
 800303a:	6822      	ldr	r2, [r4, #0]
 800303c:	bf18      	it	ne
 800303e:	2301      	movne	r3, #1
 8003040:	0692      	lsls	r2, r2, #26
 8003042:	d42b      	bmi.n	800309c <_printf_common+0xb0>
 8003044:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003048:	4649      	mov	r1, r9
 800304a:	4638      	mov	r0, r7
 800304c:	47c0      	blx	r8
 800304e:	3001      	adds	r0, #1
 8003050:	d01e      	beq.n	8003090 <_printf_common+0xa4>
 8003052:	6823      	ldr	r3, [r4, #0]
 8003054:	68e5      	ldr	r5, [r4, #12]
 8003056:	6832      	ldr	r2, [r6, #0]
 8003058:	f003 0306 	and.w	r3, r3, #6
 800305c:	2b04      	cmp	r3, #4
 800305e:	bf08      	it	eq
 8003060:	1aad      	subeq	r5, r5, r2
 8003062:	68a3      	ldr	r3, [r4, #8]
 8003064:	6922      	ldr	r2, [r4, #16]
 8003066:	bf0c      	ite	eq
 8003068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800306c:	2500      	movne	r5, #0
 800306e:	4293      	cmp	r3, r2
 8003070:	bfc4      	itt	gt
 8003072:	1a9b      	subgt	r3, r3, r2
 8003074:	18ed      	addgt	r5, r5, r3
 8003076:	2600      	movs	r6, #0
 8003078:	341a      	adds	r4, #26
 800307a:	42b5      	cmp	r5, r6
 800307c:	d11a      	bne.n	80030b4 <_printf_common+0xc8>
 800307e:	2000      	movs	r0, #0
 8003080:	e008      	b.n	8003094 <_printf_common+0xa8>
 8003082:	2301      	movs	r3, #1
 8003084:	4652      	mov	r2, sl
 8003086:	4649      	mov	r1, r9
 8003088:	4638      	mov	r0, r7
 800308a:	47c0      	blx	r8
 800308c:	3001      	adds	r0, #1
 800308e:	d103      	bne.n	8003098 <_printf_common+0xac>
 8003090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003098:	3501      	adds	r5, #1
 800309a:	e7c6      	b.n	800302a <_printf_common+0x3e>
 800309c:	18e1      	adds	r1, r4, r3
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	2030      	movs	r0, #48	; 0x30
 80030a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030a6:	4422      	add	r2, r4
 80030a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030b0:	3302      	adds	r3, #2
 80030b2:	e7c7      	b.n	8003044 <_printf_common+0x58>
 80030b4:	2301      	movs	r3, #1
 80030b6:	4622      	mov	r2, r4
 80030b8:	4649      	mov	r1, r9
 80030ba:	4638      	mov	r0, r7
 80030bc:	47c0      	blx	r8
 80030be:	3001      	adds	r0, #1
 80030c0:	d0e6      	beq.n	8003090 <_printf_common+0xa4>
 80030c2:	3601      	adds	r6, #1
 80030c4:	e7d9      	b.n	800307a <_printf_common+0x8e>
	...

080030c8 <_printf_i>:
 80030c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030cc:	7e0f      	ldrb	r7, [r1, #24]
 80030ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80030d0:	2f78      	cmp	r7, #120	; 0x78
 80030d2:	4691      	mov	r9, r2
 80030d4:	4680      	mov	r8, r0
 80030d6:	460c      	mov	r4, r1
 80030d8:	469a      	mov	sl, r3
 80030da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80030de:	d807      	bhi.n	80030f0 <_printf_i+0x28>
 80030e0:	2f62      	cmp	r7, #98	; 0x62
 80030e2:	d80a      	bhi.n	80030fa <_printf_i+0x32>
 80030e4:	2f00      	cmp	r7, #0
 80030e6:	f000 80d8 	beq.w	800329a <_printf_i+0x1d2>
 80030ea:	2f58      	cmp	r7, #88	; 0x58
 80030ec:	f000 80a3 	beq.w	8003236 <_printf_i+0x16e>
 80030f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80030f8:	e03a      	b.n	8003170 <_printf_i+0xa8>
 80030fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030fe:	2b15      	cmp	r3, #21
 8003100:	d8f6      	bhi.n	80030f0 <_printf_i+0x28>
 8003102:	a101      	add	r1, pc, #4	; (adr r1, 8003108 <_printf_i+0x40>)
 8003104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003108:	08003161 	.word	0x08003161
 800310c:	08003175 	.word	0x08003175
 8003110:	080030f1 	.word	0x080030f1
 8003114:	080030f1 	.word	0x080030f1
 8003118:	080030f1 	.word	0x080030f1
 800311c:	080030f1 	.word	0x080030f1
 8003120:	08003175 	.word	0x08003175
 8003124:	080030f1 	.word	0x080030f1
 8003128:	080030f1 	.word	0x080030f1
 800312c:	080030f1 	.word	0x080030f1
 8003130:	080030f1 	.word	0x080030f1
 8003134:	08003281 	.word	0x08003281
 8003138:	080031a5 	.word	0x080031a5
 800313c:	08003263 	.word	0x08003263
 8003140:	080030f1 	.word	0x080030f1
 8003144:	080030f1 	.word	0x080030f1
 8003148:	080032a3 	.word	0x080032a3
 800314c:	080030f1 	.word	0x080030f1
 8003150:	080031a5 	.word	0x080031a5
 8003154:	080030f1 	.word	0x080030f1
 8003158:	080030f1 	.word	0x080030f1
 800315c:	0800326b 	.word	0x0800326b
 8003160:	682b      	ldr	r3, [r5, #0]
 8003162:	1d1a      	adds	r2, r3, #4
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	602a      	str	r2, [r5, #0]
 8003168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800316c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003170:	2301      	movs	r3, #1
 8003172:	e0a3      	b.n	80032bc <_printf_i+0x1f4>
 8003174:	6820      	ldr	r0, [r4, #0]
 8003176:	6829      	ldr	r1, [r5, #0]
 8003178:	0606      	lsls	r6, r0, #24
 800317a:	f101 0304 	add.w	r3, r1, #4
 800317e:	d50a      	bpl.n	8003196 <_printf_i+0xce>
 8003180:	680e      	ldr	r6, [r1, #0]
 8003182:	602b      	str	r3, [r5, #0]
 8003184:	2e00      	cmp	r6, #0
 8003186:	da03      	bge.n	8003190 <_printf_i+0xc8>
 8003188:	232d      	movs	r3, #45	; 0x2d
 800318a:	4276      	negs	r6, r6
 800318c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003190:	485e      	ldr	r0, [pc, #376]	; (800330c <_printf_i+0x244>)
 8003192:	230a      	movs	r3, #10
 8003194:	e019      	b.n	80031ca <_printf_i+0x102>
 8003196:	680e      	ldr	r6, [r1, #0]
 8003198:	602b      	str	r3, [r5, #0]
 800319a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800319e:	bf18      	it	ne
 80031a0:	b236      	sxthne	r6, r6
 80031a2:	e7ef      	b.n	8003184 <_printf_i+0xbc>
 80031a4:	682b      	ldr	r3, [r5, #0]
 80031a6:	6820      	ldr	r0, [r4, #0]
 80031a8:	1d19      	adds	r1, r3, #4
 80031aa:	6029      	str	r1, [r5, #0]
 80031ac:	0601      	lsls	r1, r0, #24
 80031ae:	d501      	bpl.n	80031b4 <_printf_i+0xec>
 80031b0:	681e      	ldr	r6, [r3, #0]
 80031b2:	e002      	b.n	80031ba <_printf_i+0xf2>
 80031b4:	0646      	lsls	r6, r0, #25
 80031b6:	d5fb      	bpl.n	80031b0 <_printf_i+0xe8>
 80031b8:	881e      	ldrh	r6, [r3, #0]
 80031ba:	4854      	ldr	r0, [pc, #336]	; (800330c <_printf_i+0x244>)
 80031bc:	2f6f      	cmp	r7, #111	; 0x6f
 80031be:	bf0c      	ite	eq
 80031c0:	2308      	moveq	r3, #8
 80031c2:	230a      	movne	r3, #10
 80031c4:	2100      	movs	r1, #0
 80031c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031ca:	6865      	ldr	r5, [r4, #4]
 80031cc:	60a5      	str	r5, [r4, #8]
 80031ce:	2d00      	cmp	r5, #0
 80031d0:	bfa2      	ittt	ge
 80031d2:	6821      	ldrge	r1, [r4, #0]
 80031d4:	f021 0104 	bicge.w	r1, r1, #4
 80031d8:	6021      	strge	r1, [r4, #0]
 80031da:	b90e      	cbnz	r6, 80031e0 <_printf_i+0x118>
 80031dc:	2d00      	cmp	r5, #0
 80031de:	d04d      	beq.n	800327c <_printf_i+0x1b4>
 80031e0:	4615      	mov	r5, r2
 80031e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80031e6:	fb03 6711 	mls	r7, r3, r1, r6
 80031ea:	5dc7      	ldrb	r7, [r0, r7]
 80031ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80031f0:	4637      	mov	r7, r6
 80031f2:	42bb      	cmp	r3, r7
 80031f4:	460e      	mov	r6, r1
 80031f6:	d9f4      	bls.n	80031e2 <_printf_i+0x11a>
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d10b      	bne.n	8003214 <_printf_i+0x14c>
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	07de      	lsls	r6, r3, #31
 8003200:	d508      	bpl.n	8003214 <_printf_i+0x14c>
 8003202:	6923      	ldr	r3, [r4, #16]
 8003204:	6861      	ldr	r1, [r4, #4]
 8003206:	4299      	cmp	r1, r3
 8003208:	bfde      	ittt	le
 800320a:	2330      	movle	r3, #48	; 0x30
 800320c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003210:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003214:	1b52      	subs	r2, r2, r5
 8003216:	6122      	str	r2, [r4, #16]
 8003218:	f8cd a000 	str.w	sl, [sp]
 800321c:	464b      	mov	r3, r9
 800321e:	aa03      	add	r2, sp, #12
 8003220:	4621      	mov	r1, r4
 8003222:	4640      	mov	r0, r8
 8003224:	f7ff fee2 	bl	8002fec <_printf_common>
 8003228:	3001      	adds	r0, #1
 800322a:	d14c      	bne.n	80032c6 <_printf_i+0x1fe>
 800322c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003230:	b004      	add	sp, #16
 8003232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003236:	4835      	ldr	r0, [pc, #212]	; (800330c <_printf_i+0x244>)
 8003238:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800323c:	6829      	ldr	r1, [r5, #0]
 800323e:	6823      	ldr	r3, [r4, #0]
 8003240:	f851 6b04 	ldr.w	r6, [r1], #4
 8003244:	6029      	str	r1, [r5, #0]
 8003246:	061d      	lsls	r5, r3, #24
 8003248:	d514      	bpl.n	8003274 <_printf_i+0x1ac>
 800324a:	07df      	lsls	r7, r3, #31
 800324c:	bf44      	itt	mi
 800324e:	f043 0320 	orrmi.w	r3, r3, #32
 8003252:	6023      	strmi	r3, [r4, #0]
 8003254:	b91e      	cbnz	r6, 800325e <_printf_i+0x196>
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	f023 0320 	bic.w	r3, r3, #32
 800325c:	6023      	str	r3, [r4, #0]
 800325e:	2310      	movs	r3, #16
 8003260:	e7b0      	b.n	80031c4 <_printf_i+0xfc>
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	f043 0320 	orr.w	r3, r3, #32
 8003268:	6023      	str	r3, [r4, #0]
 800326a:	2378      	movs	r3, #120	; 0x78
 800326c:	4828      	ldr	r0, [pc, #160]	; (8003310 <_printf_i+0x248>)
 800326e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003272:	e7e3      	b.n	800323c <_printf_i+0x174>
 8003274:	0659      	lsls	r1, r3, #25
 8003276:	bf48      	it	mi
 8003278:	b2b6      	uxthmi	r6, r6
 800327a:	e7e6      	b.n	800324a <_printf_i+0x182>
 800327c:	4615      	mov	r5, r2
 800327e:	e7bb      	b.n	80031f8 <_printf_i+0x130>
 8003280:	682b      	ldr	r3, [r5, #0]
 8003282:	6826      	ldr	r6, [r4, #0]
 8003284:	6961      	ldr	r1, [r4, #20]
 8003286:	1d18      	adds	r0, r3, #4
 8003288:	6028      	str	r0, [r5, #0]
 800328a:	0635      	lsls	r5, r6, #24
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	d501      	bpl.n	8003294 <_printf_i+0x1cc>
 8003290:	6019      	str	r1, [r3, #0]
 8003292:	e002      	b.n	800329a <_printf_i+0x1d2>
 8003294:	0670      	lsls	r0, r6, #25
 8003296:	d5fb      	bpl.n	8003290 <_printf_i+0x1c8>
 8003298:	8019      	strh	r1, [r3, #0]
 800329a:	2300      	movs	r3, #0
 800329c:	6123      	str	r3, [r4, #16]
 800329e:	4615      	mov	r5, r2
 80032a0:	e7ba      	b.n	8003218 <_printf_i+0x150>
 80032a2:	682b      	ldr	r3, [r5, #0]
 80032a4:	1d1a      	adds	r2, r3, #4
 80032a6:	602a      	str	r2, [r5, #0]
 80032a8:	681d      	ldr	r5, [r3, #0]
 80032aa:	6862      	ldr	r2, [r4, #4]
 80032ac:	2100      	movs	r1, #0
 80032ae:	4628      	mov	r0, r5
 80032b0:	f7fc ff9e 	bl	80001f0 <memchr>
 80032b4:	b108      	cbz	r0, 80032ba <_printf_i+0x1f2>
 80032b6:	1b40      	subs	r0, r0, r5
 80032b8:	6060      	str	r0, [r4, #4]
 80032ba:	6863      	ldr	r3, [r4, #4]
 80032bc:	6123      	str	r3, [r4, #16]
 80032be:	2300      	movs	r3, #0
 80032c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032c4:	e7a8      	b.n	8003218 <_printf_i+0x150>
 80032c6:	6923      	ldr	r3, [r4, #16]
 80032c8:	462a      	mov	r2, r5
 80032ca:	4649      	mov	r1, r9
 80032cc:	4640      	mov	r0, r8
 80032ce:	47d0      	blx	sl
 80032d0:	3001      	adds	r0, #1
 80032d2:	d0ab      	beq.n	800322c <_printf_i+0x164>
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	079b      	lsls	r3, r3, #30
 80032d8:	d413      	bmi.n	8003302 <_printf_i+0x23a>
 80032da:	68e0      	ldr	r0, [r4, #12]
 80032dc:	9b03      	ldr	r3, [sp, #12]
 80032de:	4298      	cmp	r0, r3
 80032e0:	bfb8      	it	lt
 80032e2:	4618      	movlt	r0, r3
 80032e4:	e7a4      	b.n	8003230 <_printf_i+0x168>
 80032e6:	2301      	movs	r3, #1
 80032e8:	4632      	mov	r2, r6
 80032ea:	4649      	mov	r1, r9
 80032ec:	4640      	mov	r0, r8
 80032ee:	47d0      	blx	sl
 80032f0:	3001      	adds	r0, #1
 80032f2:	d09b      	beq.n	800322c <_printf_i+0x164>
 80032f4:	3501      	adds	r5, #1
 80032f6:	68e3      	ldr	r3, [r4, #12]
 80032f8:	9903      	ldr	r1, [sp, #12]
 80032fa:	1a5b      	subs	r3, r3, r1
 80032fc:	42ab      	cmp	r3, r5
 80032fe:	dcf2      	bgt.n	80032e6 <_printf_i+0x21e>
 8003300:	e7eb      	b.n	80032da <_printf_i+0x212>
 8003302:	2500      	movs	r5, #0
 8003304:	f104 0619 	add.w	r6, r4, #25
 8003308:	e7f5      	b.n	80032f6 <_printf_i+0x22e>
 800330a:	bf00      	nop
 800330c:	08007382 	.word	0x08007382
 8003310:	08007393 	.word	0x08007393

08003314 <_scanf_float>:
 8003314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003318:	b087      	sub	sp, #28
 800331a:	4617      	mov	r7, r2
 800331c:	9303      	str	r3, [sp, #12]
 800331e:	688b      	ldr	r3, [r1, #8]
 8003320:	1e5a      	subs	r2, r3, #1
 8003322:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003326:	bf83      	ittte	hi
 8003328:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800332c:	195b      	addhi	r3, r3, r5
 800332e:	9302      	strhi	r3, [sp, #8]
 8003330:	2300      	movls	r3, #0
 8003332:	bf86      	itte	hi
 8003334:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003338:	608b      	strhi	r3, [r1, #8]
 800333a:	9302      	strls	r3, [sp, #8]
 800333c:	680b      	ldr	r3, [r1, #0]
 800333e:	468b      	mov	fp, r1
 8003340:	2500      	movs	r5, #0
 8003342:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003346:	f84b 3b1c 	str.w	r3, [fp], #28
 800334a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800334e:	4680      	mov	r8, r0
 8003350:	460c      	mov	r4, r1
 8003352:	465e      	mov	r6, fp
 8003354:	46aa      	mov	sl, r5
 8003356:	46a9      	mov	r9, r5
 8003358:	9501      	str	r5, [sp, #4]
 800335a:	68a2      	ldr	r2, [r4, #8]
 800335c:	b152      	cbz	r2, 8003374 <_scanf_float+0x60>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b4e      	cmp	r3, #78	; 0x4e
 8003364:	d864      	bhi.n	8003430 <_scanf_float+0x11c>
 8003366:	2b40      	cmp	r3, #64	; 0x40
 8003368:	d83c      	bhi.n	80033e4 <_scanf_float+0xd0>
 800336a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800336e:	b2c8      	uxtb	r0, r1
 8003370:	280e      	cmp	r0, #14
 8003372:	d93a      	bls.n	80033ea <_scanf_float+0xd6>
 8003374:	f1b9 0f00 	cmp.w	r9, #0
 8003378:	d003      	beq.n	8003382 <_scanf_float+0x6e>
 800337a:	6823      	ldr	r3, [r4, #0]
 800337c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003380:	6023      	str	r3, [r4, #0]
 8003382:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003386:	f1ba 0f01 	cmp.w	sl, #1
 800338a:	f200 8113 	bhi.w	80035b4 <_scanf_float+0x2a0>
 800338e:	455e      	cmp	r6, fp
 8003390:	f200 8105 	bhi.w	800359e <_scanf_float+0x28a>
 8003394:	2501      	movs	r5, #1
 8003396:	4628      	mov	r0, r5
 8003398:	b007      	add	sp, #28
 800339a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800339e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80033a2:	2a0d      	cmp	r2, #13
 80033a4:	d8e6      	bhi.n	8003374 <_scanf_float+0x60>
 80033a6:	a101      	add	r1, pc, #4	; (adr r1, 80033ac <_scanf_float+0x98>)
 80033a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80033ac:	080034eb 	.word	0x080034eb
 80033b0:	08003375 	.word	0x08003375
 80033b4:	08003375 	.word	0x08003375
 80033b8:	08003375 	.word	0x08003375
 80033bc:	0800354b 	.word	0x0800354b
 80033c0:	08003523 	.word	0x08003523
 80033c4:	08003375 	.word	0x08003375
 80033c8:	08003375 	.word	0x08003375
 80033cc:	080034f9 	.word	0x080034f9
 80033d0:	08003375 	.word	0x08003375
 80033d4:	08003375 	.word	0x08003375
 80033d8:	08003375 	.word	0x08003375
 80033dc:	08003375 	.word	0x08003375
 80033e0:	080034b1 	.word	0x080034b1
 80033e4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80033e8:	e7db      	b.n	80033a2 <_scanf_float+0x8e>
 80033ea:	290e      	cmp	r1, #14
 80033ec:	d8c2      	bhi.n	8003374 <_scanf_float+0x60>
 80033ee:	a001      	add	r0, pc, #4	; (adr r0, 80033f4 <_scanf_float+0xe0>)
 80033f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80033f4:	080034a3 	.word	0x080034a3
 80033f8:	08003375 	.word	0x08003375
 80033fc:	080034a3 	.word	0x080034a3
 8003400:	08003537 	.word	0x08003537
 8003404:	08003375 	.word	0x08003375
 8003408:	08003451 	.word	0x08003451
 800340c:	0800348d 	.word	0x0800348d
 8003410:	0800348d 	.word	0x0800348d
 8003414:	0800348d 	.word	0x0800348d
 8003418:	0800348d 	.word	0x0800348d
 800341c:	0800348d 	.word	0x0800348d
 8003420:	0800348d 	.word	0x0800348d
 8003424:	0800348d 	.word	0x0800348d
 8003428:	0800348d 	.word	0x0800348d
 800342c:	0800348d 	.word	0x0800348d
 8003430:	2b6e      	cmp	r3, #110	; 0x6e
 8003432:	d809      	bhi.n	8003448 <_scanf_float+0x134>
 8003434:	2b60      	cmp	r3, #96	; 0x60
 8003436:	d8b2      	bhi.n	800339e <_scanf_float+0x8a>
 8003438:	2b54      	cmp	r3, #84	; 0x54
 800343a:	d077      	beq.n	800352c <_scanf_float+0x218>
 800343c:	2b59      	cmp	r3, #89	; 0x59
 800343e:	d199      	bne.n	8003374 <_scanf_float+0x60>
 8003440:	2d07      	cmp	r5, #7
 8003442:	d197      	bne.n	8003374 <_scanf_float+0x60>
 8003444:	2508      	movs	r5, #8
 8003446:	e029      	b.n	800349c <_scanf_float+0x188>
 8003448:	2b74      	cmp	r3, #116	; 0x74
 800344a:	d06f      	beq.n	800352c <_scanf_float+0x218>
 800344c:	2b79      	cmp	r3, #121	; 0x79
 800344e:	e7f6      	b.n	800343e <_scanf_float+0x12a>
 8003450:	6821      	ldr	r1, [r4, #0]
 8003452:	05c8      	lsls	r0, r1, #23
 8003454:	d51a      	bpl.n	800348c <_scanf_float+0x178>
 8003456:	9b02      	ldr	r3, [sp, #8]
 8003458:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800345c:	6021      	str	r1, [r4, #0]
 800345e:	f109 0901 	add.w	r9, r9, #1
 8003462:	b11b      	cbz	r3, 800346c <_scanf_float+0x158>
 8003464:	3b01      	subs	r3, #1
 8003466:	3201      	adds	r2, #1
 8003468:	9302      	str	r3, [sp, #8]
 800346a:	60a2      	str	r2, [r4, #8]
 800346c:	68a3      	ldr	r3, [r4, #8]
 800346e:	3b01      	subs	r3, #1
 8003470:	60a3      	str	r3, [r4, #8]
 8003472:	6923      	ldr	r3, [r4, #16]
 8003474:	3301      	adds	r3, #1
 8003476:	6123      	str	r3, [r4, #16]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3b01      	subs	r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	607b      	str	r3, [r7, #4]
 8003480:	f340 8084 	ble.w	800358c <_scanf_float+0x278>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	3301      	adds	r3, #1
 8003488:	603b      	str	r3, [r7, #0]
 800348a:	e766      	b.n	800335a <_scanf_float+0x46>
 800348c:	eb1a 0f05 	cmn.w	sl, r5
 8003490:	f47f af70 	bne.w	8003374 <_scanf_float+0x60>
 8003494:	6822      	ldr	r2, [r4, #0]
 8003496:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800349a:	6022      	str	r2, [r4, #0]
 800349c:	f806 3b01 	strb.w	r3, [r6], #1
 80034a0:	e7e4      	b.n	800346c <_scanf_float+0x158>
 80034a2:	6822      	ldr	r2, [r4, #0]
 80034a4:	0610      	lsls	r0, r2, #24
 80034a6:	f57f af65 	bpl.w	8003374 <_scanf_float+0x60>
 80034aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ae:	e7f4      	b.n	800349a <_scanf_float+0x186>
 80034b0:	f1ba 0f00 	cmp.w	sl, #0
 80034b4:	d10e      	bne.n	80034d4 <_scanf_float+0x1c0>
 80034b6:	f1b9 0f00 	cmp.w	r9, #0
 80034ba:	d10e      	bne.n	80034da <_scanf_float+0x1c6>
 80034bc:	6822      	ldr	r2, [r4, #0]
 80034be:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80034c2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80034c6:	d108      	bne.n	80034da <_scanf_float+0x1c6>
 80034c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80034cc:	6022      	str	r2, [r4, #0]
 80034ce:	f04f 0a01 	mov.w	sl, #1
 80034d2:	e7e3      	b.n	800349c <_scanf_float+0x188>
 80034d4:	f1ba 0f02 	cmp.w	sl, #2
 80034d8:	d055      	beq.n	8003586 <_scanf_float+0x272>
 80034da:	2d01      	cmp	r5, #1
 80034dc:	d002      	beq.n	80034e4 <_scanf_float+0x1d0>
 80034de:	2d04      	cmp	r5, #4
 80034e0:	f47f af48 	bne.w	8003374 <_scanf_float+0x60>
 80034e4:	3501      	adds	r5, #1
 80034e6:	b2ed      	uxtb	r5, r5
 80034e8:	e7d8      	b.n	800349c <_scanf_float+0x188>
 80034ea:	f1ba 0f01 	cmp.w	sl, #1
 80034ee:	f47f af41 	bne.w	8003374 <_scanf_float+0x60>
 80034f2:	f04f 0a02 	mov.w	sl, #2
 80034f6:	e7d1      	b.n	800349c <_scanf_float+0x188>
 80034f8:	b97d      	cbnz	r5, 800351a <_scanf_float+0x206>
 80034fa:	f1b9 0f00 	cmp.w	r9, #0
 80034fe:	f47f af3c 	bne.w	800337a <_scanf_float+0x66>
 8003502:	6822      	ldr	r2, [r4, #0]
 8003504:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003508:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800350c:	f47f af39 	bne.w	8003382 <_scanf_float+0x6e>
 8003510:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003514:	6022      	str	r2, [r4, #0]
 8003516:	2501      	movs	r5, #1
 8003518:	e7c0      	b.n	800349c <_scanf_float+0x188>
 800351a:	2d03      	cmp	r5, #3
 800351c:	d0e2      	beq.n	80034e4 <_scanf_float+0x1d0>
 800351e:	2d05      	cmp	r5, #5
 8003520:	e7de      	b.n	80034e0 <_scanf_float+0x1cc>
 8003522:	2d02      	cmp	r5, #2
 8003524:	f47f af26 	bne.w	8003374 <_scanf_float+0x60>
 8003528:	2503      	movs	r5, #3
 800352a:	e7b7      	b.n	800349c <_scanf_float+0x188>
 800352c:	2d06      	cmp	r5, #6
 800352e:	f47f af21 	bne.w	8003374 <_scanf_float+0x60>
 8003532:	2507      	movs	r5, #7
 8003534:	e7b2      	b.n	800349c <_scanf_float+0x188>
 8003536:	6822      	ldr	r2, [r4, #0]
 8003538:	0591      	lsls	r1, r2, #22
 800353a:	f57f af1b 	bpl.w	8003374 <_scanf_float+0x60>
 800353e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003542:	6022      	str	r2, [r4, #0]
 8003544:	f8cd 9004 	str.w	r9, [sp, #4]
 8003548:	e7a8      	b.n	800349c <_scanf_float+0x188>
 800354a:	6822      	ldr	r2, [r4, #0]
 800354c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003550:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003554:	d006      	beq.n	8003564 <_scanf_float+0x250>
 8003556:	0550      	lsls	r0, r2, #21
 8003558:	f57f af0c 	bpl.w	8003374 <_scanf_float+0x60>
 800355c:	f1b9 0f00 	cmp.w	r9, #0
 8003560:	f43f af0f 	beq.w	8003382 <_scanf_float+0x6e>
 8003564:	0591      	lsls	r1, r2, #22
 8003566:	bf58      	it	pl
 8003568:	9901      	ldrpl	r1, [sp, #4]
 800356a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800356e:	bf58      	it	pl
 8003570:	eba9 0101 	subpl.w	r1, r9, r1
 8003574:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003578:	bf58      	it	pl
 800357a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800357e:	6022      	str	r2, [r4, #0]
 8003580:	f04f 0900 	mov.w	r9, #0
 8003584:	e78a      	b.n	800349c <_scanf_float+0x188>
 8003586:	f04f 0a03 	mov.w	sl, #3
 800358a:	e787      	b.n	800349c <_scanf_float+0x188>
 800358c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003590:	4639      	mov	r1, r7
 8003592:	4640      	mov	r0, r8
 8003594:	4798      	blx	r3
 8003596:	2800      	cmp	r0, #0
 8003598:	f43f aedf 	beq.w	800335a <_scanf_float+0x46>
 800359c:	e6ea      	b.n	8003374 <_scanf_float+0x60>
 800359e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80035a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80035a6:	463a      	mov	r2, r7
 80035a8:	4640      	mov	r0, r8
 80035aa:	4798      	blx	r3
 80035ac:	6923      	ldr	r3, [r4, #16]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	6123      	str	r3, [r4, #16]
 80035b2:	e6ec      	b.n	800338e <_scanf_float+0x7a>
 80035b4:	1e6b      	subs	r3, r5, #1
 80035b6:	2b06      	cmp	r3, #6
 80035b8:	d825      	bhi.n	8003606 <_scanf_float+0x2f2>
 80035ba:	2d02      	cmp	r5, #2
 80035bc:	d836      	bhi.n	800362c <_scanf_float+0x318>
 80035be:	455e      	cmp	r6, fp
 80035c0:	f67f aee8 	bls.w	8003394 <_scanf_float+0x80>
 80035c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80035c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80035cc:	463a      	mov	r2, r7
 80035ce:	4640      	mov	r0, r8
 80035d0:	4798      	blx	r3
 80035d2:	6923      	ldr	r3, [r4, #16]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	6123      	str	r3, [r4, #16]
 80035d8:	e7f1      	b.n	80035be <_scanf_float+0x2aa>
 80035da:	9802      	ldr	r0, [sp, #8]
 80035dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80035e0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80035e4:	9002      	str	r0, [sp, #8]
 80035e6:	463a      	mov	r2, r7
 80035e8:	4640      	mov	r0, r8
 80035ea:	4798      	blx	r3
 80035ec:	6923      	ldr	r3, [r4, #16]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	6123      	str	r3, [r4, #16]
 80035f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80035f6:	fa5f fa8a 	uxtb.w	sl, sl
 80035fa:	f1ba 0f02 	cmp.w	sl, #2
 80035fe:	d1ec      	bne.n	80035da <_scanf_float+0x2c6>
 8003600:	3d03      	subs	r5, #3
 8003602:	b2ed      	uxtb	r5, r5
 8003604:	1b76      	subs	r6, r6, r5
 8003606:	6823      	ldr	r3, [r4, #0]
 8003608:	05da      	lsls	r2, r3, #23
 800360a:	d52f      	bpl.n	800366c <_scanf_float+0x358>
 800360c:	055b      	lsls	r3, r3, #21
 800360e:	d510      	bpl.n	8003632 <_scanf_float+0x31e>
 8003610:	455e      	cmp	r6, fp
 8003612:	f67f aebf 	bls.w	8003394 <_scanf_float+0x80>
 8003616:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800361a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800361e:	463a      	mov	r2, r7
 8003620:	4640      	mov	r0, r8
 8003622:	4798      	blx	r3
 8003624:	6923      	ldr	r3, [r4, #16]
 8003626:	3b01      	subs	r3, #1
 8003628:	6123      	str	r3, [r4, #16]
 800362a:	e7f1      	b.n	8003610 <_scanf_float+0x2fc>
 800362c:	46aa      	mov	sl, r5
 800362e:	9602      	str	r6, [sp, #8]
 8003630:	e7df      	b.n	80035f2 <_scanf_float+0x2de>
 8003632:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003636:	6923      	ldr	r3, [r4, #16]
 8003638:	2965      	cmp	r1, #101	; 0x65
 800363a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800363e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8003642:	6123      	str	r3, [r4, #16]
 8003644:	d00c      	beq.n	8003660 <_scanf_float+0x34c>
 8003646:	2945      	cmp	r1, #69	; 0x45
 8003648:	d00a      	beq.n	8003660 <_scanf_float+0x34c>
 800364a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800364e:	463a      	mov	r2, r7
 8003650:	4640      	mov	r0, r8
 8003652:	4798      	blx	r3
 8003654:	6923      	ldr	r3, [r4, #16]
 8003656:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800365a:	3b01      	subs	r3, #1
 800365c:	1eb5      	subs	r5, r6, #2
 800365e:	6123      	str	r3, [r4, #16]
 8003660:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003664:	463a      	mov	r2, r7
 8003666:	4640      	mov	r0, r8
 8003668:	4798      	blx	r3
 800366a:	462e      	mov	r6, r5
 800366c:	6825      	ldr	r5, [r4, #0]
 800366e:	f015 0510 	ands.w	r5, r5, #16
 8003672:	d155      	bne.n	8003720 <_scanf_float+0x40c>
 8003674:	7035      	strb	r5, [r6, #0]
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800367c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003680:	d11b      	bne.n	80036ba <_scanf_float+0x3a6>
 8003682:	9b01      	ldr	r3, [sp, #4]
 8003684:	454b      	cmp	r3, r9
 8003686:	eba3 0209 	sub.w	r2, r3, r9
 800368a:	d123      	bne.n	80036d4 <_scanf_float+0x3c0>
 800368c:	2200      	movs	r2, #0
 800368e:	4659      	mov	r1, fp
 8003690:	4640      	mov	r0, r8
 8003692:	f000 fe79 	bl	8004388 <_strtod_r>
 8003696:	6822      	ldr	r2, [r4, #0]
 8003698:	9b03      	ldr	r3, [sp, #12]
 800369a:	f012 0f02 	tst.w	r2, #2
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4606      	mov	r6, r0
 80036a2:	460f      	mov	r7, r1
 80036a4:	d021      	beq.n	80036ea <_scanf_float+0x3d6>
 80036a6:	1d1a      	adds	r2, r3, #4
 80036a8:	9903      	ldr	r1, [sp, #12]
 80036aa:	600a      	str	r2, [r1, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	e9c3 6700 	strd	r6, r7, [r3]
 80036b2:	68e3      	ldr	r3, [r4, #12]
 80036b4:	3301      	adds	r3, #1
 80036b6:	60e3      	str	r3, [r4, #12]
 80036b8:	e66d      	b.n	8003396 <_scanf_float+0x82>
 80036ba:	9b04      	ldr	r3, [sp, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0e5      	beq.n	800368c <_scanf_float+0x378>
 80036c0:	9905      	ldr	r1, [sp, #20]
 80036c2:	230a      	movs	r3, #10
 80036c4:	462a      	mov	r2, r5
 80036c6:	3101      	adds	r1, #1
 80036c8:	4640      	mov	r0, r8
 80036ca:	f000 fedf 	bl	800448c <_strtol_r>
 80036ce:	9b04      	ldr	r3, [sp, #16]
 80036d0:	9e05      	ldr	r6, [sp, #20]
 80036d2:	1ac2      	subs	r2, r0, r3
 80036d4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80036d8:	429e      	cmp	r6, r3
 80036da:	bf28      	it	cs
 80036dc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80036e0:	4910      	ldr	r1, [pc, #64]	; (8003724 <_scanf_float+0x410>)
 80036e2:	4630      	mov	r0, r6
 80036e4:	f000 f826 	bl	8003734 <siprintf>
 80036e8:	e7d0      	b.n	800368c <_scanf_float+0x378>
 80036ea:	f012 0f04 	tst.w	r2, #4
 80036ee:	f103 0204 	add.w	r2, r3, #4
 80036f2:	d1d9      	bne.n	80036a8 <_scanf_float+0x394>
 80036f4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80036f8:	f8cc 2000 	str.w	r2, [ip]
 80036fc:	f8d3 8000 	ldr.w	r8, [r3]
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	f7fd fa1a 	bl	8000b3c <__aeabi_dcmpun>
 8003708:	b128      	cbz	r0, 8003716 <_scanf_float+0x402>
 800370a:	4807      	ldr	r0, [pc, #28]	; (8003728 <_scanf_float+0x414>)
 800370c:	f000 f80e 	bl	800372c <nanf>
 8003710:	f8c8 0000 	str.w	r0, [r8]
 8003714:	e7cd      	b.n	80036b2 <_scanf_float+0x39e>
 8003716:	4630      	mov	r0, r6
 8003718:	4639      	mov	r1, r7
 800371a:	f7fd fa6d 	bl	8000bf8 <__aeabi_d2f>
 800371e:	e7f7      	b.n	8003710 <_scanf_float+0x3fc>
 8003720:	2500      	movs	r5, #0
 8003722:	e638      	b.n	8003396 <_scanf_float+0x82>
 8003724:	080073a4 	.word	0x080073a4
 8003728:	080077b0 	.word	0x080077b0

0800372c <nanf>:
 800372c:	4800      	ldr	r0, [pc, #0]	; (8003730 <nanf+0x4>)
 800372e:	4770      	bx	lr
 8003730:	7fc00000 	.word	0x7fc00000

08003734 <siprintf>:
 8003734:	b40e      	push	{r1, r2, r3}
 8003736:	b500      	push	{lr}
 8003738:	b09c      	sub	sp, #112	; 0x70
 800373a:	ab1d      	add	r3, sp, #116	; 0x74
 800373c:	9002      	str	r0, [sp, #8]
 800373e:	9006      	str	r0, [sp, #24]
 8003740:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003744:	4809      	ldr	r0, [pc, #36]	; (800376c <siprintf+0x38>)
 8003746:	9107      	str	r1, [sp, #28]
 8003748:	9104      	str	r1, [sp, #16]
 800374a:	4909      	ldr	r1, [pc, #36]	; (8003770 <siprintf+0x3c>)
 800374c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003750:	9105      	str	r1, [sp, #20]
 8003752:	6800      	ldr	r0, [r0, #0]
 8003754:	9301      	str	r3, [sp, #4]
 8003756:	a902      	add	r1, sp, #8
 8003758:	f002 feaa 	bl	80064b0 <_svfiprintf_r>
 800375c:	9b02      	ldr	r3, [sp, #8]
 800375e:	2200      	movs	r2, #0
 8003760:	701a      	strb	r2, [r3, #0]
 8003762:	b01c      	add	sp, #112	; 0x70
 8003764:	f85d eb04 	ldr.w	lr, [sp], #4
 8003768:	b003      	add	sp, #12
 800376a:	4770      	bx	lr
 800376c:	20000044 	.word	0x20000044
 8003770:	ffff0208 	.word	0xffff0208

08003774 <sulp>:
 8003774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003778:	460f      	mov	r7, r1
 800377a:	4690      	mov	r8, r2
 800377c:	f002 fc02 	bl	8005f84 <__ulp>
 8003780:	4604      	mov	r4, r0
 8003782:	460d      	mov	r5, r1
 8003784:	f1b8 0f00 	cmp.w	r8, #0
 8003788:	d011      	beq.n	80037ae <sulp+0x3a>
 800378a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800378e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003792:	2b00      	cmp	r3, #0
 8003794:	dd0b      	ble.n	80037ae <sulp+0x3a>
 8003796:	051b      	lsls	r3, r3, #20
 8003798:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800379c:	2400      	movs	r4, #0
 800379e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80037a2:	4622      	mov	r2, r4
 80037a4:	462b      	mov	r3, r5
 80037a6:	f7fc ff2f 	bl	8000608 <__aeabi_dmul>
 80037aa:	4604      	mov	r4, r0
 80037ac:	460d      	mov	r5, r1
 80037ae:	4620      	mov	r0, r4
 80037b0:	4629      	mov	r1, r5
 80037b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080037b8 <_strtod_l>:
 80037b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037bc:	b09f      	sub	sp, #124	; 0x7c
 80037be:	469b      	mov	fp, r3
 80037c0:	2300      	movs	r3, #0
 80037c2:	931a      	str	r3, [sp, #104]	; 0x68
 80037c4:	4b9e      	ldr	r3, [pc, #632]	; (8003a40 <_strtod_l+0x288>)
 80037c6:	9215      	str	r2, [sp, #84]	; 0x54
 80037c8:	681f      	ldr	r7, [r3, #0]
 80037ca:	4682      	mov	sl, r0
 80037cc:	4638      	mov	r0, r7
 80037ce:	460e      	mov	r6, r1
 80037d0:	f7fc fd06 	bl	80001e0 <strlen>
 80037d4:	f04f 0800 	mov.w	r8, #0
 80037d8:	4604      	mov	r4, r0
 80037da:	f04f 0900 	mov.w	r9, #0
 80037de:	9619      	str	r6, [sp, #100]	; 0x64
 80037e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80037e2:	781a      	ldrb	r2, [r3, #0]
 80037e4:	2a2b      	cmp	r2, #43	; 0x2b
 80037e6:	d04c      	beq.n	8003882 <_strtod_l+0xca>
 80037e8:	d83a      	bhi.n	8003860 <_strtod_l+0xa8>
 80037ea:	2a0d      	cmp	r2, #13
 80037ec:	d833      	bhi.n	8003856 <_strtod_l+0x9e>
 80037ee:	2a08      	cmp	r2, #8
 80037f0:	d833      	bhi.n	800385a <_strtod_l+0xa2>
 80037f2:	2a00      	cmp	r2, #0
 80037f4:	d03d      	beq.n	8003872 <_strtod_l+0xba>
 80037f6:	2300      	movs	r3, #0
 80037f8:	930a      	str	r3, [sp, #40]	; 0x28
 80037fa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80037fc:	782b      	ldrb	r3, [r5, #0]
 80037fe:	2b30      	cmp	r3, #48	; 0x30
 8003800:	f040 80aa 	bne.w	8003958 <_strtod_l+0x1a0>
 8003804:	786b      	ldrb	r3, [r5, #1]
 8003806:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800380a:	2b58      	cmp	r3, #88	; 0x58
 800380c:	d166      	bne.n	80038dc <_strtod_l+0x124>
 800380e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003810:	9301      	str	r3, [sp, #4]
 8003812:	ab1a      	add	r3, sp, #104	; 0x68
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	4a8b      	ldr	r2, [pc, #556]	; (8003a44 <_strtod_l+0x28c>)
 8003818:	f8cd b008 	str.w	fp, [sp, #8]
 800381c:	ab1b      	add	r3, sp, #108	; 0x6c
 800381e:	a919      	add	r1, sp, #100	; 0x64
 8003820:	4650      	mov	r0, sl
 8003822:	f001 fd19 	bl	8005258 <__gethex>
 8003826:	f010 0607 	ands.w	r6, r0, #7
 800382a:	4604      	mov	r4, r0
 800382c:	d005      	beq.n	800383a <_strtod_l+0x82>
 800382e:	2e06      	cmp	r6, #6
 8003830:	d129      	bne.n	8003886 <_strtod_l+0xce>
 8003832:	3501      	adds	r5, #1
 8003834:	2300      	movs	r3, #0
 8003836:	9519      	str	r5, [sp, #100]	; 0x64
 8003838:	930a      	str	r3, [sp, #40]	; 0x28
 800383a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800383c:	2b00      	cmp	r3, #0
 800383e:	f040 858a 	bne.w	8004356 <_strtod_l+0xb9e>
 8003842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003844:	b1d3      	cbz	r3, 800387c <_strtod_l+0xc4>
 8003846:	4642      	mov	r2, r8
 8003848:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800384c:	4610      	mov	r0, r2
 800384e:	4619      	mov	r1, r3
 8003850:	b01f      	add	sp, #124	; 0x7c
 8003852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003856:	2a20      	cmp	r2, #32
 8003858:	d1cd      	bne.n	80037f6 <_strtod_l+0x3e>
 800385a:	3301      	adds	r3, #1
 800385c:	9319      	str	r3, [sp, #100]	; 0x64
 800385e:	e7bf      	b.n	80037e0 <_strtod_l+0x28>
 8003860:	2a2d      	cmp	r2, #45	; 0x2d
 8003862:	d1c8      	bne.n	80037f6 <_strtod_l+0x3e>
 8003864:	2201      	movs	r2, #1
 8003866:	920a      	str	r2, [sp, #40]	; 0x28
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	9219      	str	r2, [sp, #100]	; 0x64
 800386c:	785b      	ldrb	r3, [r3, #1]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1c3      	bne.n	80037fa <_strtod_l+0x42>
 8003872:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003874:	9619      	str	r6, [sp, #100]	; 0x64
 8003876:	2b00      	cmp	r3, #0
 8003878:	f040 856b 	bne.w	8004352 <_strtod_l+0xb9a>
 800387c:	4642      	mov	r2, r8
 800387e:	464b      	mov	r3, r9
 8003880:	e7e4      	b.n	800384c <_strtod_l+0x94>
 8003882:	2200      	movs	r2, #0
 8003884:	e7ef      	b.n	8003866 <_strtod_l+0xae>
 8003886:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003888:	b13a      	cbz	r2, 800389a <_strtod_l+0xe2>
 800388a:	2135      	movs	r1, #53	; 0x35
 800388c:	a81c      	add	r0, sp, #112	; 0x70
 800388e:	f002 fc7d 	bl	800618c <__copybits>
 8003892:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003894:	4650      	mov	r0, sl
 8003896:	f002 f849 	bl	800592c <_Bfree>
 800389a:	3e01      	subs	r6, #1
 800389c:	2e04      	cmp	r6, #4
 800389e:	d806      	bhi.n	80038ae <_strtod_l+0xf6>
 80038a0:	e8df f006 	tbb	[pc, r6]
 80038a4:	1714030a 	.word	0x1714030a
 80038a8:	0a          	.byte	0x0a
 80038a9:	00          	.byte	0x00
 80038aa:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80038ae:	0721      	lsls	r1, r4, #28
 80038b0:	d5c3      	bpl.n	800383a <_strtod_l+0x82>
 80038b2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80038b6:	e7c0      	b.n	800383a <_strtod_l+0x82>
 80038b8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80038bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80038be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80038c2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80038c6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80038ca:	e7f0      	b.n	80038ae <_strtod_l+0xf6>
 80038cc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8003a48 <_strtod_l+0x290>
 80038d0:	e7ed      	b.n	80038ae <_strtod_l+0xf6>
 80038d2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80038d6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80038da:	e7e8      	b.n	80038ae <_strtod_l+0xf6>
 80038dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	9219      	str	r2, [sp, #100]	; 0x64
 80038e2:	785b      	ldrb	r3, [r3, #1]
 80038e4:	2b30      	cmp	r3, #48	; 0x30
 80038e6:	d0f9      	beq.n	80038dc <_strtod_l+0x124>
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0a6      	beq.n	800383a <_strtod_l+0x82>
 80038ec:	2301      	movs	r3, #1
 80038ee:	9307      	str	r3, [sp, #28]
 80038f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80038f2:	9308      	str	r3, [sp, #32]
 80038f4:	2300      	movs	r3, #0
 80038f6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80038fa:	469b      	mov	fp, r3
 80038fc:	220a      	movs	r2, #10
 80038fe:	9819      	ldr	r0, [sp, #100]	; 0x64
 8003900:	7805      	ldrb	r5, [r0, #0]
 8003902:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003906:	b2d9      	uxtb	r1, r3
 8003908:	2909      	cmp	r1, #9
 800390a:	d927      	bls.n	800395c <_strtod_l+0x1a4>
 800390c:	4622      	mov	r2, r4
 800390e:	4639      	mov	r1, r7
 8003910:	f002 fee4 	bl	80066dc <strncmp>
 8003914:	2800      	cmp	r0, #0
 8003916:	d033      	beq.n	8003980 <_strtod_l+0x1c8>
 8003918:	2000      	movs	r0, #0
 800391a:	462a      	mov	r2, r5
 800391c:	465c      	mov	r4, fp
 800391e:	9004      	str	r0, [sp, #16]
 8003920:	4603      	mov	r3, r0
 8003922:	2a65      	cmp	r2, #101	; 0x65
 8003924:	d001      	beq.n	800392a <_strtod_l+0x172>
 8003926:	2a45      	cmp	r2, #69	; 0x45
 8003928:	d114      	bne.n	8003954 <_strtod_l+0x19c>
 800392a:	b91c      	cbnz	r4, 8003934 <_strtod_l+0x17c>
 800392c:	9a07      	ldr	r2, [sp, #28]
 800392e:	4302      	orrs	r2, r0
 8003930:	d09f      	beq.n	8003872 <_strtod_l+0xba>
 8003932:	2400      	movs	r4, #0
 8003934:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8003936:	1c72      	adds	r2, r6, #1
 8003938:	9219      	str	r2, [sp, #100]	; 0x64
 800393a:	7872      	ldrb	r2, [r6, #1]
 800393c:	2a2b      	cmp	r2, #43	; 0x2b
 800393e:	d079      	beq.n	8003a34 <_strtod_l+0x27c>
 8003940:	2a2d      	cmp	r2, #45	; 0x2d
 8003942:	f000 8083 	beq.w	8003a4c <_strtod_l+0x294>
 8003946:	2700      	movs	r7, #0
 8003948:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800394c:	2909      	cmp	r1, #9
 800394e:	f240 8083 	bls.w	8003a58 <_strtod_l+0x2a0>
 8003952:	9619      	str	r6, [sp, #100]	; 0x64
 8003954:	2500      	movs	r5, #0
 8003956:	e09f      	b.n	8003a98 <_strtod_l+0x2e0>
 8003958:	2300      	movs	r3, #0
 800395a:	e7c8      	b.n	80038ee <_strtod_l+0x136>
 800395c:	f1bb 0f08 	cmp.w	fp, #8
 8003960:	bfd5      	itete	le
 8003962:	9906      	ldrle	r1, [sp, #24]
 8003964:	9905      	ldrgt	r1, [sp, #20]
 8003966:	fb02 3301 	mlale	r3, r2, r1, r3
 800396a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800396e:	f100 0001 	add.w	r0, r0, #1
 8003972:	bfd4      	ite	le
 8003974:	9306      	strle	r3, [sp, #24]
 8003976:	9305      	strgt	r3, [sp, #20]
 8003978:	f10b 0b01 	add.w	fp, fp, #1
 800397c:	9019      	str	r0, [sp, #100]	; 0x64
 800397e:	e7be      	b.n	80038fe <_strtod_l+0x146>
 8003980:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003982:	191a      	adds	r2, r3, r4
 8003984:	9219      	str	r2, [sp, #100]	; 0x64
 8003986:	5d1a      	ldrb	r2, [r3, r4]
 8003988:	f1bb 0f00 	cmp.w	fp, #0
 800398c:	d036      	beq.n	80039fc <_strtod_l+0x244>
 800398e:	9004      	str	r0, [sp, #16]
 8003990:	465c      	mov	r4, fp
 8003992:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003996:	2b09      	cmp	r3, #9
 8003998:	d912      	bls.n	80039c0 <_strtod_l+0x208>
 800399a:	2301      	movs	r3, #1
 800399c:	e7c1      	b.n	8003922 <_strtod_l+0x16a>
 800399e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	9219      	str	r2, [sp, #100]	; 0x64
 80039a4:	785a      	ldrb	r2, [r3, #1]
 80039a6:	3001      	adds	r0, #1
 80039a8:	2a30      	cmp	r2, #48	; 0x30
 80039aa:	d0f8      	beq.n	800399e <_strtod_l+0x1e6>
 80039ac:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	f200 84d5 	bhi.w	8004360 <_strtod_l+0xba8>
 80039b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80039b8:	9004      	str	r0, [sp, #16]
 80039ba:	2000      	movs	r0, #0
 80039bc:	9308      	str	r3, [sp, #32]
 80039be:	4604      	mov	r4, r0
 80039c0:	3a30      	subs	r2, #48	; 0x30
 80039c2:	f100 0301 	add.w	r3, r0, #1
 80039c6:	d013      	beq.n	80039f0 <_strtod_l+0x238>
 80039c8:	9904      	ldr	r1, [sp, #16]
 80039ca:	4419      	add	r1, r3
 80039cc:	9104      	str	r1, [sp, #16]
 80039ce:	4623      	mov	r3, r4
 80039d0:	1905      	adds	r5, r0, r4
 80039d2:	210a      	movs	r1, #10
 80039d4:	42ab      	cmp	r3, r5
 80039d6:	d113      	bne.n	8003a00 <_strtod_l+0x248>
 80039d8:	1823      	adds	r3, r4, r0
 80039da:	2b08      	cmp	r3, #8
 80039dc:	f104 0401 	add.w	r4, r4, #1
 80039e0:	4404      	add	r4, r0
 80039e2:	dc1b      	bgt.n	8003a1c <_strtod_l+0x264>
 80039e4:	9906      	ldr	r1, [sp, #24]
 80039e6:	230a      	movs	r3, #10
 80039e8:	fb03 2301 	mla	r3, r3, r1, r2
 80039ec:	9306      	str	r3, [sp, #24]
 80039ee:	2300      	movs	r3, #0
 80039f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80039f2:	1c51      	adds	r1, r2, #1
 80039f4:	9119      	str	r1, [sp, #100]	; 0x64
 80039f6:	7852      	ldrb	r2, [r2, #1]
 80039f8:	4618      	mov	r0, r3
 80039fa:	e7ca      	b.n	8003992 <_strtod_l+0x1da>
 80039fc:	4658      	mov	r0, fp
 80039fe:	e7d3      	b.n	80039a8 <_strtod_l+0x1f0>
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	dc04      	bgt.n	8003a0e <_strtod_l+0x256>
 8003a04:	9f06      	ldr	r7, [sp, #24]
 8003a06:	434f      	muls	r7, r1
 8003a08:	9706      	str	r7, [sp, #24]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	e7e2      	b.n	80039d4 <_strtod_l+0x21c>
 8003a0e:	1c5f      	adds	r7, r3, #1
 8003a10:	2f10      	cmp	r7, #16
 8003a12:	bfde      	ittt	le
 8003a14:	9f05      	ldrle	r7, [sp, #20]
 8003a16:	434f      	mulle	r7, r1
 8003a18:	9705      	strle	r7, [sp, #20]
 8003a1a:	e7f6      	b.n	8003a0a <_strtod_l+0x252>
 8003a1c:	2c10      	cmp	r4, #16
 8003a1e:	bfdf      	itttt	le
 8003a20:	9905      	ldrle	r1, [sp, #20]
 8003a22:	230a      	movle	r3, #10
 8003a24:	fb03 2301 	mlale	r3, r3, r1, r2
 8003a28:	9305      	strle	r3, [sp, #20]
 8003a2a:	e7e0      	b.n	80039ee <_strtod_l+0x236>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	9304      	str	r3, [sp, #16]
 8003a30:	2301      	movs	r3, #1
 8003a32:	e77b      	b.n	800392c <_strtod_l+0x174>
 8003a34:	2700      	movs	r7, #0
 8003a36:	1cb2      	adds	r2, r6, #2
 8003a38:	9219      	str	r2, [sp, #100]	; 0x64
 8003a3a:	78b2      	ldrb	r2, [r6, #2]
 8003a3c:	e784      	b.n	8003948 <_strtod_l+0x190>
 8003a3e:	bf00      	nop
 8003a40:	080075f8 	.word	0x080075f8
 8003a44:	080073ac 	.word	0x080073ac
 8003a48:	7ff00000 	.word	0x7ff00000
 8003a4c:	2701      	movs	r7, #1
 8003a4e:	e7f2      	b.n	8003a36 <_strtod_l+0x27e>
 8003a50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003a52:	1c51      	adds	r1, r2, #1
 8003a54:	9119      	str	r1, [sp, #100]	; 0x64
 8003a56:	7852      	ldrb	r2, [r2, #1]
 8003a58:	2a30      	cmp	r2, #48	; 0x30
 8003a5a:	d0f9      	beq.n	8003a50 <_strtod_l+0x298>
 8003a5c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8003a60:	2908      	cmp	r1, #8
 8003a62:	f63f af77 	bhi.w	8003954 <_strtod_l+0x19c>
 8003a66:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8003a6a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003a6c:	9209      	str	r2, [sp, #36]	; 0x24
 8003a6e:	f04f 0e0a 	mov.w	lr, #10
 8003a72:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003a74:	1c51      	adds	r1, r2, #1
 8003a76:	9119      	str	r1, [sp, #100]	; 0x64
 8003a78:	7852      	ldrb	r2, [r2, #1]
 8003a7a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8003a7e:	2d09      	cmp	r5, #9
 8003a80:	d935      	bls.n	8003aee <_strtod_l+0x336>
 8003a82:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003a84:	1b49      	subs	r1, r1, r5
 8003a86:	2908      	cmp	r1, #8
 8003a88:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8003a8c:	dc02      	bgt.n	8003a94 <_strtod_l+0x2dc>
 8003a8e:	4565      	cmp	r5, ip
 8003a90:	bfa8      	it	ge
 8003a92:	4665      	movge	r5, ip
 8003a94:	b107      	cbz	r7, 8003a98 <_strtod_l+0x2e0>
 8003a96:	426d      	negs	r5, r5
 8003a98:	2c00      	cmp	r4, #0
 8003a9a:	d14c      	bne.n	8003b36 <_strtod_l+0x37e>
 8003a9c:	9907      	ldr	r1, [sp, #28]
 8003a9e:	4301      	orrs	r1, r0
 8003aa0:	f47f aecb 	bne.w	800383a <_strtod_l+0x82>
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f47f aee4 	bne.w	8003872 <_strtod_l+0xba>
 8003aaa:	2a69      	cmp	r2, #105	; 0x69
 8003aac:	d026      	beq.n	8003afc <_strtod_l+0x344>
 8003aae:	dc23      	bgt.n	8003af8 <_strtod_l+0x340>
 8003ab0:	2a49      	cmp	r2, #73	; 0x49
 8003ab2:	d023      	beq.n	8003afc <_strtod_l+0x344>
 8003ab4:	2a4e      	cmp	r2, #78	; 0x4e
 8003ab6:	f47f aedc 	bne.w	8003872 <_strtod_l+0xba>
 8003aba:	499d      	ldr	r1, [pc, #628]	; (8003d30 <_strtod_l+0x578>)
 8003abc:	a819      	add	r0, sp, #100	; 0x64
 8003abe:	f001 fe19 	bl	80056f4 <__match>
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	f43f aed5 	beq.w	8003872 <_strtod_l+0xba>
 8003ac8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b28      	cmp	r3, #40	; 0x28
 8003ace:	d12c      	bne.n	8003b2a <_strtod_l+0x372>
 8003ad0:	4998      	ldr	r1, [pc, #608]	; (8003d34 <_strtod_l+0x57c>)
 8003ad2:	aa1c      	add	r2, sp, #112	; 0x70
 8003ad4:	a819      	add	r0, sp, #100	; 0x64
 8003ad6:	f001 fe21 	bl	800571c <__hexnan>
 8003ada:	2805      	cmp	r0, #5
 8003adc:	d125      	bne.n	8003b2a <_strtod_l+0x372>
 8003ade:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003ae0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8003ae4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8003ae8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8003aec:	e6a5      	b.n	800383a <_strtod_l+0x82>
 8003aee:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8003af2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8003af6:	e7bc      	b.n	8003a72 <_strtod_l+0x2ba>
 8003af8:	2a6e      	cmp	r2, #110	; 0x6e
 8003afa:	e7dc      	b.n	8003ab6 <_strtod_l+0x2fe>
 8003afc:	498e      	ldr	r1, [pc, #568]	; (8003d38 <_strtod_l+0x580>)
 8003afe:	a819      	add	r0, sp, #100	; 0x64
 8003b00:	f001 fdf8 	bl	80056f4 <__match>
 8003b04:	2800      	cmp	r0, #0
 8003b06:	f43f aeb4 	beq.w	8003872 <_strtod_l+0xba>
 8003b0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003b0c:	498b      	ldr	r1, [pc, #556]	; (8003d3c <_strtod_l+0x584>)
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	a819      	add	r0, sp, #100	; 0x64
 8003b12:	9319      	str	r3, [sp, #100]	; 0x64
 8003b14:	f001 fdee 	bl	80056f4 <__match>
 8003b18:	b910      	cbnz	r0, 8003b20 <_strtod_l+0x368>
 8003b1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	9319      	str	r3, [sp, #100]	; 0x64
 8003b20:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8003d40 <_strtod_l+0x588>
 8003b24:	f04f 0800 	mov.w	r8, #0
 8003b28:	e687      	b.n	800383a <_strtod_l+0x82>
 8003b2a:	4886      	ldr	r0, [pc, #536]	; (8003d44 <_strtod_l+0x58c>)
 8003b2c:	f002 fdc0 	bl	80066b0 <nan>
 8003b30:	4680      	mov	r8, r0
 8003b32:	4689      	mov	r9, r1
 8003b34:	e681      	b.n	800383a <_strtod_l+0x82>
 8003b36:	9b04      	ldr	r3, [sp, #16]
 8003b38:	9806      	ldr	r0, [sp, #24]
 8003b3a:	1aeb      	subs	r3, r5, r3
 8003b3c:	f1bb 0f00 	cmp.w	fp, #0
 8003b40:	bf08      	it	eq
 8003b42:	46a3      	moveq	fp, r4
 8003b44:	2c10      	cmp	r4, #16
 8003b46:	9307      	str	r3, [sp, #28]
 8003b48:	4626      	mov	r6, r4
 8003b4a:	bfa8      	it	ge
 8003b4c:	2610      	movge	r6, #16
 8003b4e:	f7fc fce1 	bl	8000514 <__aeabi_ui2d>
 8003b52:	2c09      	cmp	r4, #9
 8003b54:	4680      	mov	r8, r0
 8003b56:	4689      	mov	r9, r1
 8003b58:	dd13      	ble.n	8003b82 <_strtod_l+0x3ca>
 8003b5a:	4b7b      	ldr	r3, [pc, #492]	; (8003d48 <_strtod_l+0x590>)
 8003b5c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003b60:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003b64:	f7fc fd50 	bl	8000608 <__aeabi_dmul>
 8003b68:	4680      	mov	r8, r0
 8003b6a:	9805      	ldr	r0, [sp, #20]
 8003b6c:	4689      	mov	r9, r1
 8003b6e:	f7fc fcd1 	bl	8000514 <__aeabi_ui2d>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	4640      	mov	r0, r8
 8003b78:	4649      	mov	r1, r9
 8003b7a:	f7fc fb8f 	bl	800029c <__adddf3>
 8003b7e:	4680      	mov	r8, r0
 8003b80:	4689      	mov	r9, r1
 8003b82:	2c0f      	cmp	r4, #15
 8003b84:	dc36      	bgt.n	8003bf4 <_strtod_l+0x43c>
 8003b86:	9b07      	ldr	r3, [sp, #28]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f43f ae56 	beq.w	800383a <_strtod_l+0x82>
 8003b8e:	dd22      	ble.n	8003bd6 <_strtod_l+0x41e>
 8003b90:	2b16      	cmp	r3, #22
 8003b92:	dc09      	bgt.n	8003ba8 <_strtod_l+0x3f0>
 8003b94:	496c      	ldr	r1, [pc, #432]	; (8003d48 <_strtod_l+0x590>)
 8003b96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003b9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b9e:	4642      	mov	r2, r8
 8003ba0:	464b      	mov	r3, r9
 8003ba2:	f7fc fd31 	bl	8000608 <__aeabi_dmul>
 8003ba6:	e7c3      	b.n	8003b30 <_strtod_l+0x378>
 8003ba8:	9a07      	ldr	r2, [sp, #28]
 8003baa:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	db20      	blt.n	8003bf4 <_strtod_l+0x43c>
 8003bb2:	4d65      	ldr	r5, [pc, #404]	; (8003d48 <_strtod_l+0x590>)
 8003bb4:	f1c4 040f 	rsb	r4, r4, #15
 8003bb8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8003bbc:	4642      	mov	r2, r8
 8003bbe:	464b      	mov	r3, r9
 8003bc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bc4:	f7fc fd20 	bl	8000608 <__aeabi_dmul>
 8003bc8:	9b07      	ldr	r3, [sp, #28]
 8003bca:	1b1c      	subs	r4, r3, r4
 8003bcc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8003bd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003bd4:	e7e5      	b.n	8003ba2 <_strtod_l+0x3ea>
 8003bd6:	9b07      	ldr	r3, [sp, #28]
 8003bd8:	3316      	adds	r3, #22
 8003bda:	db0b      	blt.n	8003bf4 <_strtod_l+0x43c>
 8003bdc:	9b04      	ldr	r3, [sp, #16]
 8003bde:	1b5d      	subs	r5, r3, r5
 8003be0:	4b59      	ldr	r3, [pc, #356]	; (8003d48 <_strtod_l+0x590>)
 8003be2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003be6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003bea:	4640      	mov	r0, r8
 8003bec:	4649      	mov	r1, r9
 8003bee:	f7fc fe35 	bl	800085c <__aeabi_ddiv>
 8003bf2:	e79d      	b.n	8003b30 <_strtod_l+0x378>
 8003bf4:	9b07      	ldr	r3, [sp, #28]
 8003bf6:	1ba6      	subs	r6, r4, r6
 8003bf8:	441e      	add	r6, r3
 8003bfa:	2e00      	cmp	r6, #0
 8003bfc:	dd74      	ble.n	8003ce8 <_strtod_l+0x530>
 8003bfe:	f016 030f 	ands.w	r3, r6, #15
 8003c02:	d00a      	beq.n	8003c1a <_strtod_l+0x462>
 8003c04:	4950      	ldr	r1, [pc, #320]	; (8003d48 <_strtod_l+0x590>)
 8003c06:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003c0a:	4642      	mov	r2, r8
 8003c0c:	464b      	mov	r3, r9
 8003c0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c12:	f7fc fcf9 	bl	8000608 <__aeabi_dmul>
 8003c16:	4680      	mov	r8, r0
 8003c18:	4689      	mov	r9, r1
 8003c1a:	f036 060f 	bics.w	r6, r6, #15
 8003c1e:	d052      	beq.n	8003cc6 <_strtod_l+0x50e>
 8003c20:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8003c24:	dd27      	ble.n	8003c76 <_strtod_l+0x4be>
 8003c26:	f04f 0b00 	mov.w	fp, #0
 8003c2a:	f8cd b010 	str.w	fp, [sp, #16]
 8003c2e:	f8cd b020 	str.w	fp, [sp, #32]
 8003c32:	f8cd b018 	str.w	fp, [sp, #24]
 8003c36:	2322      	movs	r3, #34	; 0x22
 8003c38:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8003d40 <_strtod_l+0x588>
 8003c3c:	f8ca 3000 	str.w	r3, [sl]
 8003c40:	f04f 0800 	mov.w	r8, #0
 8003c44:	9b08      	ldr	r3, [sp, #32]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f43f adf7 	beq.w	800383a <_strtod_l+0x82>
 8003c4c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003c4e:	4650      	mov	r0, sl
 8003c50:	f001 fe6c 	bl	800592c <_Bfree>
 8003c54:	9906      	ldr	r1, [sp, #24]
 8003c56:	4650      	mov	r0, sl
 8003c58:	f001 fe68 	bl	800592c <_Bfree>
 8003c5c:	9904      	ldr	r1, [sp, #16]
 8003c5e:	4650      	mov	r0, sl
 8003c60:	f001 fe64 	bl	800592c <_Bfree>
 8003c64:	9908      	ldr	r1, [sp, #32]
 8003c66:	4650      	mov	r0, sl
 8003c68:	f001 fe60 	bl	800592c <_Bfree>
 8003c6c:	4659      	mov	r1, fp
 8003c6e:	4650      	mov	r0, sl
 8003c70:	f001 fe5c 	bl	800592c <_Bfree>
 8003c74:	e5e1      	b.n	800383a <_strtod_l+0x82>
 8003c76:	4b35      	ldr	r3, [pc, #212]	; (8003d4c <_strtod_l+0x594>)
 8003c78:	9305      	str	r3, [sp, #20]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	1136      	asrs	r6, r6, #4
 8003c7e:	4640      	mov	r0, r8
 8003c80:	4649      	mov	r1, r9
 8003c82:	461f      	mov	r7, r3
 8003c84:	2e01      	cmp	r6, #1
 8003c86:	dc21      	bgt.n	8003ccc <_strtod_l+0x514>
 8003c88:	b10b      	cbz	r3, 8003c8e <_strtod_l+0x4d6>
 8003c8a:	4680      	mov	r8, r0
 8003c8c:	4689      	mov	r9, r1
 8003c8e:	4b2f      	ldr	r3, [pc, #188]	; (8003d4c <_strtod_l+0x594>)
 8003c90:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8003c94:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003c98:	4642      	mov	r2, r8
 8003c9a:	464b      	mov	r3, r9
 8003c9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ca0:	f7fc fcb2 	bl	8000608 <__aeabi_dmul>
 8003ca4:	4b26      	ldr	r3, [pc, #152]	; (8003d40 <_strtod_l+0x588>)
 8003ca6:	460a      	mov	r2, r1
 8003ca8:	400b      	ands	r3, r1
 8003caa:	4929      	ldr	r1, [pc, #164]	; (8003d50 <_strtod_l+0x598>)
 8003cac:	428b      	cmp	r3, r1
 8003cae:	4680      	mov	r8, r0
 8003cb0:	d8b9      	bhi.n	8003c26 <_strtod_l+0x46e>
 8003cb2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003cb6:	428b      	cmp	r3, r1
 8003cb8:	bf86      	itte	hi
 8003cba:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 8003d54 <_strtod_l+0x59c>
 8003cbe:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8003cc2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	9305      	str	r3, [sp, #20]
 8003cca:	e07f      	b.n	8003dcc <_strtod_l+0x614>
 8003ccc:	07f2      	lsls	r2, r6, #31
 8003cce:	d505      	bpl.n	8003cdc <_strtod_l+0x524>
 8003cd0:	9b05      	ldr	r3, [sp, #20]
 8003cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd6:	f7fc fc97 	bl	8000608 <__aeabi_dmul>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	9a05      	ldr	r2, [sp, #20]
 8003cde:	3208      	adds	r2, #8
 8003ce0:	3701      	adds	r7, #1
 8003ce2:	1076      	asrs	r6, r6, #1
 8003ce4:	9205      	str	r2, [sp, #20]
 8003ce6:	e7cd      	b.n	8003c84 <_strtod_l+0x4cc>
 8003ce8:	d0ed      	beq.n	8003cc6 <_strtod_l+0x50e>
 8003cea:	4276      	negs	r6, r6
 8003cec:	f016 020f 	ands.w	r2, r6, #15
 8003cf0:	d00a      	beq.n	8003d08 <_strtod_l+0x550>
 8003cf2:	4b15      	ldr	r3, [pc, #84]	; (8003d48 <_strtod_l+0x590>)
 8003cf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003cf8:	4640      	mov	r0, r8
 8003cfa:	4649      	mov	r1, r9
 8003cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d00:	f7fc fdac 	bl	800085c <__aeabi_ddiv>
 8003d04:	4680      	mov	r8, r0
 8003d06:	4689      	mov	r9, r1
 8003d08:	1136      	asrs	r6, r6, #4
 8003d0a:	d0dc      	beq.n	8003cc6 <_strtod_l+0x50e>
 8003d0c:	2e1f      	cmp	r6, #31
 8003d0e:	dd23      	ble.n	8003d58 <_strtod_l+0x5a0>
 8003d10:	f04f 0b00 	mov.w	fp, #0
 8003d14:	f8cd b010 	str.w	fp, [sp, #16]
 8003d18:	f8cd b020 	str.w	fp, [sp, #32]
 8003d1c:	f8cd b018 	str.w	fp, [sp, #24]
 8003d20:	2322      	movs	r3, #34	; 0x22
 8003d22:	f04f 0800 	mov.w	r8, #0
 8003d26:	f04f 0900 	mov.w	r9, #0
 8003d2a:	f8ca 3000 	str.w	r3, [sl]
 8003d2e:	e789      	b.n	8003c44 <_strtod_l+0x48c>
 8003d30:	0800737d 	.word	0x0800737d
 8003d34:	080073c0 	.word	0x080073c0
 8003d38:	08007375 	.word	0x08007375
 8003d3c:	08007504 	.word	0x08007504
 8003d40:	7ff00000 	.word	0x7ff00000
 8003d44:	080077b0 	.word	0x080077b0
 8003d48:	08007690 	.word	0x08007690
 8003d4c:	08007668 	.word	0x08007668
 8003d50:	7ca00000 	.word	0x7ca00000
 8003d54:	7fefffff 	.word	0x7fefffff
 8003d58:	f016 0310 	ands.w	r3, r6, #16
 8003d5c:	bf18      	it	ne
 8003d5e:	236a      	movne	r3, #106	; 0x6a
 8003d60:	4fb1      	ldr	r7, [pc, #708]	; (8004028 <_strtod_l+0x870>)
 8003d62:	9305      	str	r3, [sp, #20]
 8003d64:	4640      	mov	r0, r8
 8003d66:	4649      	mov	r1, r9
 8003d68:	2300      	movs	r3, #0
 8003d6a:	07f2      	lsls	r2, r6, #31
 8003d6c:	d504      	bpl.n	8003d78 <_strtod_l+0x5c0>
 8003d6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d72:	f7fc fc49 	bl	8000608 <__aeabi_dmul>
 8003d76:	2301      	movs	r3, #1
 8003d78:	1076      	asrs	r6, r6, #1
 8003d7a:	f107 0708 	add.w	r7, r7, #8
 8003d7e:	d1f4      	bne.n	8003d6a <_strtod_l+0x5b2>
 8003d80:	b10b      	cbz	r3, 8003d86 <_strtod_l+0x5ce>
 8003d82:	4680      	mov	r8, r0
 8003d84:	4689      	mov	r9, r1
 8003d86:	9b05      	ldr	r3, [sp, #20]
 8003d88:	b1c3      	cbz	r3, 8003dbc <_strtod_l+0x604>
 8003d8a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8003d8e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	4649      	mov	r1, r9
 8003d96:	dd11      	ble.n	8003dbc <_strtod_l+0x604>
 8003d98:	2b1f      	cmp	r3, #31
 8003d9a:	f340 8124 	ble.w	8003fe6 <_strtod_l+0x82e>
 8003d9e:	2b34      	cmp	r3, #52	; 0x34
 8003da0:	bfde      	ittt	le
 8003da2:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8003da6:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8003daa:	fa03 f202 	lslle.w	r2, r3, r2
 8003dae:	f04f 0800 	mov.w	r8, #0
 8003db2:	bfcc      	ite	gt
 8003db4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8003db8:	ea02 0901 	andle.w	r9, r2, r1
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	4640      	mov	r0, r8
 8003dc2:	4649      	mov	r1, r9
 8003dc4:	f7fc fe88 	bl	8000ad8 <__aeabi_dcmpeq>
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	d1a1      	bne.n	8003d10 <_strtod_l+0x558>
 8003dcc:	9b06      	ldr	r3, [sp, #24]
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	9908      	ldr	r1, [sp, #32]
 8003dd2:	4623      	mov	r3, r4
 8003dd4:	465a      	mov	r2, fp
 8003dd6:	4650      	mov	r0, sl
 8003dd8:	f001 fe10 	bl	80059fc <__s2b>
 8003ddc:	9008      	str	r0, [sp, #32]
 8003dde:	2800      	cmp	r0, #0
 8003de0:	f43f af21 	beq.w	8003c26 <_strtod_l+0x46e>
 8003de4:	9b04      	ldr	r3, [sp, #16]
 8003de6:	1b5d      	subs	r5, r3, r5
 8003de8:	9b07      	ldr	r3, [sp, #28]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bfb4      	ite	lt
 8003dee:	462b      	movlt	r3, r5
 8003df0:	2300      	movge	r3, #0
 8003df2:	930e      	str	r3, [sp, #56]	; 0x38
 8003df4:	9b07      	ldr	r3, [sp, #28]
 8003df6:	f04f 0b00 	mov.w	fp, #0
 8003dfa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003dfe:	9314      	str	r3, [sp, #80]	; 0x50
 8003e00:	f8cd b010 	str.w	fp, [sp, #16]
 8003e04:	9b08      	ldr	r3, [sp, #32]
 8003e06:	4650      	mov	r0, sl
 8003e08:	6859      	ldr	r1, [r3, #4]
 8003e0a:	f001 fd4f 	bl	80058ac <_Balloc>
 8003e0e:	9006      	str	r0, [sp, #24]
 8003e10:	2800      	cmp	r0, #0
 8003e12:	f43f af10 	beq.w	8003c36 <_strtod_l+0x47e>
 8003e16:	9b08      	ldr	r3, [sp, #32]
 8003e18:	691a      	ldr	r2, [r3, #16]
 8003e1a:	3202      	adds	r2, #2
 8003e1c:	f103 010c 	add.w	r1, r3, #12
 8003e20:	0092      	lsls	r2, r2, #2
 8003e22:	300c      	adds	r0, #12
 8003e24:	f001 fd34 	bl	8005890 <memcpy>
 8003e28:	ab1c      	add	r3, sp, #112	; 0x70
 8003e2a:	9301      	str	r3, [sp, #4]
 8003e2c:	ab1b      	add	r3, sp, #108	; 0x6c
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	4642      	mov	r2, r8
 8003e32:	464b      	mov	r3, r9
 8003e34:	4650      	mov	r0, sl
 8003e36:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8003e3a:	f002 f91d 	bl	8006078 <__d2b>
 8003e3e:	901a      	str	r0, [sp, #104]	; 0x68
 8003e40:	2800      	cmp	r0, #0
 8003e42:	f43f aef8 	beq.w	8003c36 <_strtod_l+0x47e>
 8003e46:	2101      	movs	r1, #1
 8003e48:	4650      	mov	r0, sl
 8003e4a:	f001 fe6f 	bl	8005b2c <__i2b>
 8003e4e:	9004      	str	r0, [sp, #16]
 8003e50:	4603      	mov	r3, r0
 8003e52:	2800      	cmp	r0, #0
 8003e54:	f43f aeef 	beq.w	8003c36 <_strtod_l+0x47e>
 8003e58:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003e5a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003e5c:	2d00      	cmp	r5, #0
 8003e5e:	bfab      	itete	ge
 8003e60:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8003e62:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8003e64:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8003e66:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8003e68:	bfac      	ite	ge
 8003e6a:	18ee      	addge	r6, r5, r3
 8003e6c:	1b5c      	sublt	r4, r3, r5
 8003e6e:	9b05      	ldr	r3, [sp, #20]
 8003e70:	1aed      	subs	r5, r5, r3
 8003e72:	4415      	add	r5, r2
 8003e74:	4b6d      	ldr	r3, [pc, #436]	; (800402c <_strtod_l+0x874>)
 8003e76:	3d01      	subs	r5, #1
 8003e78:	429d      	cmp	r5, r3
 8003e7a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003e7e:	f280 80c4 	bge.w	800400a <_strtod_l+0x852>
 8003e82:	1b5b      	subs	r3, r3, r5
 8003e84:	2b1f      	cmp	r3, #31
 8003e86:	eba2 0203 	sub.w	r2, r2, r3
 8003e8a:	f04f 0701 	mov.w	r7, #1
 8003e8e:	f300 80b1 	bgt.w	8003ff4 <_strtod_l+0x83c>
 8003e92:	fa07 f303 	lsl.w	r3, r7, r3
 8003e96:	930f      	str	r3, [sp, #60]	; 0x3c
 8003e98:	2500      	movs	r5, #0
 8003e9a:	18b7      	adds	r7, r6, r2
 8003e9c:	9b05      	ldr	r3, [sp, #20]
 8003e9e:	42be      	cmp	r6, r7
 8003ea0:	4414      	add	r4, r2
 8003ea2:	441c      	add	r4, r3
 8003ea4:	4633      	mov	r3, r6
 8003ea6:	bfa8      	it	ge
 8003ea8:	463b      	movge	r3, r7
 8003eaa:	42a3      	cmp	r3, r4
 8003eac:	bfa8      	it	ge
 8003eae:	4623      	movge	r3, r4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	bfc2      	ittt	gt
 8003eb4:	1aff      	subgt	r7, r7, r3
 8003eb6:	1ae4      	subgt	r4, r4, r3
 8003eb8:	1af6      	subgt	r6, r6, r3
 8003eba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	dd17      	ble.n	8003ef0 <_strtod_l+0x738>
 8003ec0:	9904      	ldr	r1, [sp, #16]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	4650      	mov	r0, sl
 8003ec6:	f001 feef 	bl	8005ca8 <__pow5mult>
 8003eca:	9004      	str	r0, [sp, #16]
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	f43f aeb2 	beq.w	8003c36 <_strtod_l+0x47e>
 8003ed2:	4601      	mov	r1, r0
 8003ed4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003ed6:	4650      	mov	r0, sl
 8003ed8:	f001 fe3e 	bl	8005b58 <__multiply>
 8003edc:	9009      	str	r0, [sp, #36]	; 0x24
 8003ede:	2800      	cmp	r0, #0
 8003ee0:	f43f aea9 	beq.w	8003c36 <_strtod_l+0x47e>
 8003ee4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003ee6:	4650      	mov	r0, sl
 8003ee8:	f001 fd20 	bl	800592c <_Bfree>
 8003eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eee:	931a      	str	r3, [sp, #104]	; 0x68
 8003ef0:	2f00      	cmp	r7, #0
 8003ef2:	f300 808e 	bgt.w	8004012 <_strtod_l+0x85a>
 8003ef6:	9b07      	ldr	r3, [sp, #28]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	dd08      	ble.n	8003f0e <_strtod_l+0x756>
 8003efc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003efe:	9906      	ldr	r1, [sp, #24]
 8003f00:	4650      	mov	r0, sl
 8003f02:	f001 fed1 	bl	8005ca8 <__pow5mult>
 8003f06:	9006      	str	r0, [sp, #24]
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	f43f ae94 	beq.w	8003c36 <_strtod_l+0x47e>
 8003f0e:	2c00      	cmp	r4, #0
 8003f10:	dd08      	ble.n	8003f24 <_strtod_l+0x76c>
 8003f12:	9906      	ldr	r1, [sp, #24]
 8003f14:	4622      	mov	r2, r4
 8003f16:	4650      	mov	r0, sl
 8003f18:	f001 ff20 	bl	8005d5c <__lshift>
 8003f1c:	9006      	str	r0, [sp, #24]
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	f43f ae89 	beq.w	8003c36 <_strtod_l+0x47e>
 8003f24:	2e00      	cmp	r6, #0
 8003f26:	dd08      	ble.n	8003f3a <_strtod_l+0x782>
 8003f28:	9904      	ldr	r1, [sp, #16]
 8003f2a:	4632      	mov	r2, r6
 8003f2c:	4650      	mov	r0, sl
 8003f2e:	f001 ff15 	bl	8005d5c <__lshift>
 8003f32:	9004      	str	r0, [sp, #16]
 8003f34:	2800      	cmp	r0, #0
 8003f36:	f43f ae7e 	beq.w	8003c36 <_strtod_l+0x47e>
 8003f3a:	9a06      	ldr	r2, [sp, #24]
 8003f3c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003f3e:	4650      	mov	r0, sl
 8003f40:	f001 ff98 	bl	8005e74 <__mdiff>
 8003f44:	4683      	mov	fp, r0
 8003f46:	2800      	cmp	r0, #0
 8003f48:	f43f ae75 	beq.w	8003c36 <_strtod_l+0x47e>
 8003f4c:	2400      	movs	r4, #0
 8003f4e:	68c3      	ldr	r3, [r0, #12]
 8003f50:	9904      	ldr	r1, [sp, #16]
 8003f52:	60c4      	str	r4, [r0, #12]
 8003f54:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f56:	f001 ff71 	bl	8005e3c <__mcmp>
 8003f5a:	42a0      	cmp	r0, r4
 8003f5c:	da6c      	bge.n	8004038 <_strtod_l+0x880>
 8003f5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f60:	ea53 0308 	orrs.w	r3, r3, r8
 8003f64:	f040 8092 	bne.w	800408c <_strtod_l+0x8d4>
 8003f68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f040 808d 	bne.w	800408c <_strtod_l+0x8d4>
 8003f72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003f76:	0d1b      	lsrs	r3, r3, #20
 8003f78:	051b      	lsls	r3, r3, #20
 8003f7a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8003f7e:	f240 8085 	bls.w	800408c <_strtod_l+0x8d4>
 8003f82:	f8db 3014 	ldr.w	r3, [fp, #20]
 8003f86:	b91b      	cbnz	r3, 8003f90 <_strtod_l+0x7d8>
 8003f88:	f8db 3010 	ldr.w	r3, [fp, #16]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	dd7d      	ble.n	800408c <_strtod_l+0x8d4>
 8003f90:	4659      	mov	r1, fp
 8003f92:	2201      	movs	r2, #1
 8003f94:	4650      	mov	r0, sl
 8003f96:	f001 fee1 	bl	8005d5c <__lshift>
 8003f9a:	9904      	ldr	r1, [sp, #16]
 8003f9c:	4683      	mov	fp, r0
 8003f9e:	f001 ff4d 	bl	8005e3c <__mcmp>
 8003fa2:	2800      	cmp	r0, #0
 8003fa4:	dd72      	ble.n	800408c <_strtod_l+0x8d4>
 8003fa6:	9905      	ldr	r1, [sp, #20]
 8003fa8:	4a21      	ldr	r2, [pc, #132]	; (8004030 <_strtod_l+0x878>)
 8003faa:	464b      	mov	r3, r9
 8003fac:	2900      	cmp	r1, #0
 8003fae:	f000 808d 	beq.w	80040cc <_strtod_l+0x914>
 8003fb2:	ea02 0109 	and.w	r1, r2, r9
 8003fb6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8003fba:	f300 8087 	bgt.w	80040cc <_strtod_l+0x914>
 8003fbe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8003fc2:	f77f aead 	ble.w	8003d20 <_strtod_l+0x568>
 8003fc6:	4b1b      	ldr	r3, [pc, #108]	; (8004034 <_strtod_l+0x87c>)
 8003fc8:	4640      	mov	r0, r8
 8003fca:	4649      	mov	r1, r9
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f7fc fb1b 	bl	8000608 <__aeabi_dmul>
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4303      	orrs	r3, r0
 8003fd6:	bf08      	it	eq
 8003fd8:	2322      	moveq	r3, #34	; 0x22
 8003fda:	4680      	mov	r8, r0
 8003fdc:	4689      	mov	r9, r1
 8003fde:	bf08      	it	eq
 8003fe0:	f8ca 3000 	streq.w	r3, [sl]
 8003fe4:	e632      	b.n	8003c4c <_strtod_l+0x494>
 8003fe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	ea03 0808 	and.w	r8, r3, r8
 8003ff2:	e6e3      	b.n	8003dbc <_strtod_l+0x604>
 8003ff4:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8003ff8:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8003ffc:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004000:	35e2      	adds	r5, #226	; 0xe2
 8004002:	fa07 f505 	lsl.w	r5, r7, r5
 8004006:	970f      	str	r7, [sp, #60]	; 0x3c
 8004008:	e747      	b.n	8003e9a <_strtod_l+0x6e2>
 800400a:	2301      	movs	r3, #1
 800400c:	2500      	movs	r5, #0
 800400e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004010:	e743      	b.n	8003e9a <_strtod_l+0x6e2>
 8004012:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004014:	463a      	mov	r2, r7
 8004016:	4650      	mov	r0, sl
 8004018:	f001 fea0 	bl	8005d5c <__lshift>
 800401c:	901a      	str	r0, [sp, #104]	; 0x68
 800401e:	2800      	cmp	r0, #0
 8004020:	f47f af69 	bne.w	8003ef6 <_strtod_l+0x73e>
 8004024:	e607      	b.n	8003c36 <_strtod_l+0x47e>
 8004026:	bf00      	nop
 8004028:	080073d8 	.word	0x080073d8
 800402c:	fffffc02 	.word	0xfffffc02
 8004030:	7ff00000 	.word	0x7ff00000
 8004034:	39500000 	.word	0x39500000
 8004038:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800403c:	d165      	bne.n	800410a <_strtod_l+0x952>
 800403e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004040:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004044:	b35a      	cbz	r2, 800409e <_strtod_l+0x8e6>
 8004046:	4a9a      	ldr	r2, [pc, #616]	; (80042b0 <_strtod_l+0xaf8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d12b      	bne.n	80040a4 <_strtod_l+0x8ec>
 800404c:	9b05      	ldr	r3, [sp, #20]
 800404e:	4641      	mov	r1, r8
 8004050:	b303      	cbz	r3, 8004094 <_strtod_l+0x8dc>
 8004052:	4b98      	ldr	r3, [pc, #608]	; (80042b4 <_strtod_l+0xafc>)
 8004054:	464a      	mov	r2, r9
 8004056:	4013      	ands	r3, r2
 8004058:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800405c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004060:	d81b      	bhi.n	800409a <_strtod_l+0x8e2>
 8004062:	0d1b      	lsrs	r3, r3, #20
 8004064:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	4299      	cmp	r1, r3
 800406e:	d119      	bne.n	80040a4 <_strtod_l+0x8ec>
 8004070:	4b91      	ldr	r3, [pc, #580]	; (80042b8 <_strtod_l+0xb00>)
 8004072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004074:	429a      	cmp	r2, r3
 8004076:	d102      	bne.n	800407e <_strtod_l+0x8c6>
 8004078:	3101      	adds	r1, #1
 800407a:	f43f addc 	beq.w	8003c36 <_strtod_l+0x47e>
 800407e:	4b8d      	ldr	r3, [pc, #564]	; (80042b4 <_strtod_l+0xafc>)
 8004080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004082:	401a      	ands	r2, r3
 8004084:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004088:	f04f 0800 	mov.w	r8, #0
 800408c:	9b05      	ldr	r3, [sp, #20]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d199      	bne.n	8003fc6 <_strtod_l+0x80e>
 8004092:	e5db      	b.n	8003c4c <_strtod_l+0x494>
 8004094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004098:	e7e8      	b.n	800406c <_strtod_l+0x8b4>
 800409a:	4613      	mov	r3, r2
 800409c:	e7e6      	b.n	800406c <_strtod_l+0x8b4>
 800409e:	ea53 0308 	orrs.w	r3, r3, r8
 80040a2:	d080      	beq.n	8003fa6 <_strtod_l+0x7ee>
 80040a4:	b1e5      	cbz	r5, 80040e0 <_strtod_l+0x928>
 80040a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040a8:	421d      	tst	r5, r3
 80040aa:	d0ef      	beq.n	800408c <_strtod_l+0x8d4>
 80040ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040ae:	9a05      	ldr	r2, [sp, #20]
 80040b0:	4640      	mov	r0, r8
 80040b2:	4649      	mov	r1, r9
 80040b4:	b1c3      	cbz	r3, 80040e8 <_strtod_l+0x930>
 80040b6:	f7ff fb5d 	bl	8003774 <sulp>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80040c2:	f7fc f8eb 	bl	800029c <__adddf3>
 80040c6:	4680      	mov	r8, r0
 80040c8:	4689      	mov	r9, r1
 80040ca:	e7df      	b.n	800408c <_strtod_l+0x8d4>
 80040cc:	4013      	ands	r3, r2
 80040ce:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80040d2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80040d6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80040da:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80040de:	e7d5      	b.n	800408c <_strtod_l+0x8d4>
 80040e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80040e2:	ea13 0f08 	tst.w	r3, r8
 80040e6:	e7e0      	b.n	80040aa <_strtod_l+0x8f2>
 80040e8:	f7ff fb44 	bl	8003774 <sulp>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80040f4:	f7fc f8d0 	bl	8000298 <__aeabi_dsub>
 80040f8:	2200      	movs	r2, #0
 80040fa:	2300      	movs	r3, #0
 80040fc:	4680      	mov	r8, r0
 80040fe:	4689      	mov	r9, r1
 8004100:	f7fc fcea 	bl	8000ad8 <__aeabi_dcmpeq>
 8004104:	2800      	cmp	r0, #0
 8004106:	d0c1      	beq.n	800408c <_strtod_l+0x8d4>
 8004108:	e60a      	b.n	8003d20 <_strtod_l+0x568>
 800410a:	9904      	ldr	r1, [sp, #16]
 800410c:	4658      	mov	r0, fp
 800410e:	f002 f80f 	bl	8006130 <__ratio>
 8004112:	2200      	movs	r2, #0
 8004114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004118:	4606      	mov	r6, r0
 800411a:	460f      	mov	r7, r1
 800411c:	f7fc fcf0 	bl	8000b00 <__aeabi_dcmple>
 8004120:	2800      	cmp	r0, #0
 8004122:	d070      	beq.n	8004206 <_strtod_l+0xa4e>
 8004124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004126:	2b00      	cmp	r3, #0
 8004128:	d042      	beq.n	80041b0 <_strtod_l+0x9f8>
 800412a:	4f64      	ldr	r7, [pc, #400]	; (80042bc <_strtod_l+0xb04>)
 800412c:	2600      	movs	r6, #0
 800412e:	4d63      	ldr	r5, [pc, #396]	; (80042bc <_strtod_l+0xb04>)
 8004130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004132:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004136:	0d1b      	lsrs	r3, r3, #20
 8004138:	051b      	lsls	r3, r3, #20
 800413a:	930f      	str	r3, [sp, #60]	; 0x3c
 800413c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800413e:	4b60      	ldr	r3, [pc, #384]	; (80042c0 <_strtod_l+0xb08>)
 8004140:	429a      	cmp	r2, r3
 8004142:	f040 80c5 	bne.w	80042d0 <_strtod_l+0xb18>
 8004146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004148:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800414c:	4640      	mov	r0, r8
 800414e:	4649      	mov	r1, r9
 8004150:	f001 ff18 	bl	8005f84 <__ulp>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4630      	mov	r0, r6
 800415a:	4639      	mov	r1, r7
 800415c:	f7fc fa54 	bl	8000608 <__aeabi_dmul>
 8004160:	4642      	mov	r2, r8
 8004162:	464b      	mov	r3, r9
 8004164:	f7fc f89a 	bl	800029c <__adddf3>
 8004168:	460b      	mov	r3, r1
 800416a:	4952      	ldr	r1, [pc, #328]	; (80042b4 <_strtod_l+0xafc>)
 800416c:	4a55      	ldr	r2, [pc, #340]	; (80042c4 <_strtod_l+0xb0c>)
 800416e:	4019      	ands	r1, r3
 8004170:	4291      	cmp	r1, r2
 8004172:	4680      	mov	r8, r0
 8004174:	d95d      	bls.n	8004232 <_strtod_l+0xa7a>
 8004176:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004178:	4b4f      	ldr	r3, [pc, #316]	; (80042b8 <_strtod_l+0xb00>)
 800417a:	429a      	cmp	r2, r3
 800417c:	d103      	bne.n	8004186 <_strtod_l+0x9ce>
 800417e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004180:	3301      	adds	r3, #1
 8004182:	f43f ad58 	beq.w	8003c36 <_strtod_l+0x47e>
 8004186:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80042b8 <_strtod_l+0xb00>
 800418a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800418e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004190:	4650      	mov	r0, sl
 8004192:	f001 fbcb 	bl	800592c <_Bfree>
 8004196:	9906      	ldr	r1, [sp, #24]
 8004198:	4650      	mov	r0, sl
 800419a:	f001 fbc7 	bl	800592c <_Bfree>
 800419e:	9904      	ldr	r1, [sp, #16]
 80041a0:	4650      	mov	r0, sl
 80041a2:	f001 fbc3 	bl	800592c <_Bfree>
 80041a6:	4659      	mov	r1, fp
 80041a8:	4650      	mov	r0, sl
 80041aa:	f001 fbbf 	bl	800592c <_Bfree>
 80041ae:	e629      	b.n	8003e04 <_strtod_l+0x64c>
 80041b0:	f1b8 0f00 	cmp.w	r8, #0
 80041b4:	d119      	bne.n	80041ea <_strtod_l+0xa32>
 80041b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041bc:	b9e3      	cbnz	r3, 80041f8 <_strtod_l+0xa40>
 80041be:	4b3f      	ldr	r3, [pc, #252]	; (80042bc <_strtod_l+0xb04>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	4630      	mov	r0, r6
 80041c4:	4639      	mov	r1, r7
 80041c6:	f7fc fc91 	bl	8000aec <__aeabi_dcmplt>
 80041ca:	b9c8      	cbnz	r0, 8004200 <_strtod_l+0xa48>
 80041cc:	4b3e      	ldr	r3, [pc, #248]	; (80042c8 <_strtod_l+0xb10>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	4630      	mov	r0, r6
 80041d2:	4639      	mov	r1, r7
 80041d4:	f7fc fa18 	bl	8000608 <__aeabi_dmul>
 80041d8:	4604      	mov	r4, r0
 80041da:	460d      	mov	r5, r1
 80041dc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80041e0:	9416      	str	r4, [sp, #88]	; 0x58
 80041e2:	9317      	str	r3, [sp, #92]	; 0x5c
 80041e4:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80041e8:	e7a2      	b.n	8004130 <_strtod_l+0x978>
 80041ea:	f1b8 0f01 	cmp.w	r8, #1
 80041ee:	d103      	bne.n	80041f8 <_strtod_l+0xa40>
 80041f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f43f ad94 	beq.w	8003d20 <_strtod_l+0x568>
 80041f8:	4f34      	ldr	r7, [pc, #208]	; (80042cc <_strtod_l+0xb14>)
 80041fa:	2600      	movs	r6, #0
 80041fc:	2400      	movs	r4, #0
 80041fe:	e796      	b.n	800412e <_strtod_l+0x976>
 8004200:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004202:	4d31      	ldr	r5, [pc, #196]	; (80042c8 <_strtod_l+0xb10>)
 8004204:	e7ea      	b.n	80041dc <_strtod_l+0xa24>
 8004206:	4b30      	ldr	r3, [pc, #192]	; (80042c8 <_strtod_l+0xb10>)
 8004208:	2200      	movs	r2, #0
 800420a:	4630      	mov	r0, r6
 800420c:	4639      	mov	r1, r7
 800420e:	f7fc f9fb 	bl	8000608 <__aeabi_dmul>
 8004212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004214:	4604      	mov	r4, r0
 8004216:	460d      	mov	r5, r1
 8004218:	b933      	cbnz	r3, 8004228 <_strtod_l+0xa70>
 800421a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800421e:	9010      	str	r0, [sp, #64]	; 0x40
 8004220:	9311      	str	r3, [sp, #68]	; 0x44
 8004222:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004226:	e783      	b.n	8004130 <_strtod_l+0x978>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004230:	e7f7      	b.n	8004222 <_strtod_l+0xa6a>
 8004232:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004236:	9b05      	ldr	r3, [sp, #20]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1a8      	bne.n	800418e <_strtod_l+0x9d6>
 800423c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004240:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004242:	0d1b      	lsrs	r3, r3, #20
 8004244:	051b      	lsls	r3, r3, #20
 8004246:	429a      	cmp	r2, r3
 8004248:	d1a1      	bne.n	800418e <_strtod_l+0x9d6>
 800424a:	4620      	mov	r0, r4
 800424c:	4629      	mov	r1, r5
 800424e:	f7fc fd23 	bl	8000c98 <__aeabi_d2lz>
 8004252:	f7fc f9ab 	bl	80005ac <__aeabi_l2d>
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	4620      	mov	r0, r4
 800425c:	4629      	mov	r1, r5
 800425e:	f7fc f81b 	bl	8000298 <__aeabi_dsub>
 8004262:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004264:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004268:	ea43 0308 	orr.w	r3, r3, r8
 800426c:	4313      	orrs	r3, r2
 800426e:	4604      	mov	r4, r0
 8004270:	460d      	mov	r5, r1
 8004272:	d068      	beq.n	8004346 <_strtod_l+0xb8e>
 8004274:	a30a      	add	r3, pc, #40	; (adr r3, 80042a0 <_strtod_l+0xae8>)
 8004276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427a:	f7fc fc37 	bl	8000aec <__aeabi_dcmplt>
 800427e:	2800      	cmp	r0, #0
 8004280:	f47f ace4 	bne.w	8003c4c <_strtod_l+0x494>
 8004284:	a308      	add	r3, pc, #32	; (adr r3, 80042a8 <_strtod_l+0xaf0>)
 8004286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428a:	4620      	mov	r0, r4
 800428c:	4629      	mov	r1, r5
 800428e:	f7fc fc4b 	bl	8000b28 <__aeabi_dcmpgt>
 8004292:	2800      	cmp	r0, #0
 8004294:	f43f af7b 	beq.w	800418e <_strtod_l+0x9d6>
 8004298:	e4d8      	b.n	8003c4c <_strtod_l+0x494>
 800429a:	bf00      	nop
 800429c:	f3af 8000 	nop.w
 80042a0:	94a03595 	.word	0x94a03595
 80042a4:	3fdfffff 	.word	0x3fdfffff
 80042a8:	35afe535 	.word	0x35afe535
 80042ac:	3fe00000 	.word	0x3fe00000
 80042b0:	000fffff 	.word	0x000fffff
 80042b4:	7ff00000 	.word	0x7ff00000
 80042b8:	7fefffff 	.word	0x7fefffff
 80042bc:	3ff00000 	.word	0x3ff00000
 80042c0:	7fe00000 	.word	0x7fe00000
 80042c4:	7c9fffff 	.word	0x7c9fffff
 80042c8:	3fe00000 	.word	0x3fe00000
 80042cc:	bff00000 	.word	0xbff00000
 80042d0:	9b05      	ldr	r3, [sp, #20]
 80042d2:	b313      	cbz	r3, 800431a <_strtod_l+0xb62>
 80042d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80042da:	d81e      	bhi.n	800431a <_strtod_l+0xb62>
 80042dc:	a326      	add	r3, pc, #152	; (adr r3, 8004378 <_strtod_l+0xbc0>)
 80042de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e2:	4620      	mov	r0, r4
 80042e4:	4629      	mov	r1, r5
 80042e6:	f7fc fc0b 	bl	8000b00 <__aeabi_dcmple>
 80042ea:	b190      	cbz	r0, 8004312 <_strtod_l+0xb5a>
 80042ec:	4629      	mov	r1, r5
 80042ee:	4620      	mov	r0, r4
 80042f0:	f7fc fc62 	bl	8000bb8 <__aeabi_d2uiz>
 80042f4:	2801      	cmp	r0, #1
 80042f6:	bf38      	it	cc
 80042f8:	2001      	movcc	r0, #1
 80042fa:	f7fc f90b 	bl	8000514 <__aeabi_ui2d>
 80042fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004300:	4604      	mov	r4, r0
 8004302:	460d      	mov	r5, r1
 8004304:	b9d3      	cbnz	r3, 800433c <_strtod_l+0xb84>
 8004306:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800430a:	9012      	str	r0, [sp, #72]	; 0x48
 800430c:	9313      	str	r3, [sp, #76]	; 0x4c
 800430e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004312:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004314:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004318:	1a9f      	subs	r7, r3, r2
 800431a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800431e:	f001 fe31 	bl	8005f84 <__ulp>
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	4630      	mov	r0, r6
 8004328:	4639      	mov	r1, r7
 800432a:	f7fc f96d 	bl	8000608 <__aeabi_dmul>
 800432e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004332:	f7fb ffb3 	bl	800029c <__adddf3>
 8004336:	4680      	mov	r8, r0
 8004338:	4689      	mov	r9, r1
 800433a:	e77c      	b.n	8004236 <_strtod_l+0xa7e>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004344:	e7e3      	b.n	800430e <_strtod_l+0xb56>
 8004346:	a30e      	add	r3, pc, #56	; (adr r3, 8004380 <_strtod_l+0xbc8>)
 8004348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434c:	f7fc fbce 	bl	8000aec <__aeabi_dcmplt>
 8004350:	e79f      	b.n	8004292 <_strtod_l+0xada>
 8004352:	2300      	movs	r3, #0
 8004354:	930a      	str	r3, [sp, #40]	; 0x28
 8004356:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004358:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800435a:	6013      	str	r3, [r2, #0]
 800435c:	f7ff ba71 	b.w	8003842 <_strtod_l+0x8a>
 8004360:	2a65      	cmp	r2, #101	; 0x65
 8004362:	f43f ab63 	beq.w	8003a2c <_strtod_l+0x274>
 8004366:	2a45      	cmp	r2, #69	; 0x45
 8004368:	f43f ab60 	beq.w	8003a2c <_strtod_l+0x274>
 800436c:	2301      	movs	r3, #1
 800436e:	f7ff bb95 	b.w	8003a9c <_strtod_l+0x2e4>
 8004372:	bf00      	nop
 8004374:	f3af 8000 	nop.w
 8004378:	ffc00000 	.word	0xffc00000
 800437c:	41dfffff 	.word	0x41dfffff
 8004380:	94a03595 	.word	0x94a03595
 8004384:	3fcfffff 	.word	0x3fcfffff

08004388 <_strtod_r>:
 8004388:	4b01      	ldr	r3, [pc, #4]	; (8004390 <_strtod_r+0x8>)
 800438a:	f7ff ba15 	b.w	80037b8 <_strtod_l>
 800438e:	bf00      	nop
 8004390:	200000ac 	.word	0x200000ac

08004394 <_strtol_l.constprop.0>:
 8004394:	2b01      	cmp	r3, #1
 8004396:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800439a:	4680      	mov	r8, r0
 800439c:	d001      	beq.n	80043a2 <_strtol_l.constprop.0+0xe>
 800439e:	2b24      	cmp	r3, #36	; 0x24
 80043a0:	d906      	bls.n	80043b0 <_strtol_l.constprop.0+0x1c>
 80043a2:	f000 feeb 	bl	800517c <__errno>
 80043a6:	2316      	movs	r3, #22
 80043a8:	6003      	str	r3, [r0, #0]
 80043aa:	2000      	movs	r0, #0
 80043ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043b0:	4f35      	ldr	r7, [pc, #212]	; (8004488 <_strtol_l.constprop.0+0xf4>)
 80043b2:	460d      	mov	r5, r1
 80043b4:	4628      	mov	r0, r5
 80043b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80043ba:	5de6      	ldrb	r6, [r4, r7]
 80043bc:	f016 0608 	ands.w	r6, r6, #8
 80043c0:	d1f8      	bne.n	80043b4 <_strtol_l.constprop.0+0x20>
 80043c2:	2c2d      	cmp	r4, #45	; 0x2d
 80043c4:	d12f      	bne.n	8004426 <_strtol_l.constprop.0+0x92>
 80043c6:	782c      	ldrb	r4, [r5, #0]
 80043c8:	2601      	movs	r6, #1
 80043ca:	1c85      	adds	r5, r0, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d057      	beq.n	8004480 <_strtol_l.constprop.0+0xec>
 80043d0:	2b10      	cmp	r3, #16
 80043d2:	d109      	bne.n	80043e8 <_strtol_l.constprop.0+0x54>
 80043d4:	2c30      	cmp	r4, #48	; 0x30
 80043d6:	d107      	bne.n	80043e8 <_strtol_l.constprop.0+0x54>
 80043d8:	7828      	ldrb	r0, [r5, #0]
 80043da:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80043de:	2858      	cmp	r0, #88	; 0x58
 80043e0:	d149      	bne.n	8004476 <_strtol_l.constprop.0+0xe2>
 80043e2:	786c      	ldrb	r4, [r5, #1]
 80043e4:	2310      	movs	r3, #16
 80043e6:	3502      	adds	r5, #2
 80043e8:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80043ec:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80043f0:	2700      	movs	r7, #0
 80043f2:	fbbe f9f3 	udiv	r9, lr, r3
 80043f6:	4638      	mov	r0, r7
 80043f8:	fb03 ea19 	mls	sl, r3, r9, lr
 80043fc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004400:	f1bc 0f09 	cmp.w	ip, #9
 8004404:	d814      	bhi.n	8004430 <_strtol_l.constprop.0+0x9c>
 8004406:	4664      	mov	r4, ip
 8004408:	42a3      	cmp	r3, r4
 800440a:	dd22      	ble.n	8004452 <_strtol_l.constprop.0+0xbe>
 800440c:	2f00      	cmp	r7, #0
 800440e:	db1d      	blt.n	800444c <_strtol_l.constprop.0+0xb8>
 8004410:	4581      	cmp	r9, r0
 8004412:	d31b      	bcc.n	800444c <_strtol_l.constprop.0+0xb8>
 8004414:	d101      	bne.n	800441a <_strtol_l.constprop.0+0x86>
 8004416:	45a2      	cmp	sl, r4
 8004418:	db18      	blt.n	800444c <_strtol_l.constprop.0+0xb8>
 800441a:	fb00 4003 	mla	r0, r0, r3, r4
 800441e:	2701      	movs	r7, #1
 8004420:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004424:	e7ea      	b.n	80043fc <_strtol_l.constprop.0+0x68>
 8004426:	2c2b      	cmp	r4, #43	; 0x2b
 8004428:	bf04      	itt	eq
 800442a:	782c      	ldrbeq	r4, [r5, #0]
 800442c:	1c85      	addeq	r5, r0, #2
 800442e:	e7cd      	b.n	80043cc <_strtol_l.constprop.0+0x38>
 8004430:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004434:	f1bc 0f19 	cmp.w	ip, #25
 8004438:	d801      	bhi.n	800443e <_strtol_l.constprop.0+0xaa>
 800443a:	3c37      	subs	r4, #55	; 0x37
 800443c:	e7e4      	b.n	8004408 <_strtol_l.constprop.0+0x74>
 800443e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004442:	f1bc 0f19 	cmp.w	ip, #25
 8004446:	d804      	bhi.n	8004452 <_strtol_l.constprop.0+0xbe>
 8004448:	3c57      	subs	r4, #87	; 0x57
 800444a:	e7dd      	b.n	8004408 <_strtol_l.constprop.0+0x74>
 800444c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004450:	e7e6      	b.n	8004420 <_strtol_l.constprop.0+0x8c>
 8004452:	2f00      	cmp	r7, #0
 8004454:	da07      	bge.n	8004466 <_strtol_l.constprop.0+0xd2>
 8004456:	2322      	movs	r3, #34	; 0x22
 8004458:	f8c8 3000 	str.w	r3, [r8]
 800445c:	4670      	mov	r0, lr
 800445e:	2a00      	cmp	r2, #0
 8004460:	d0a4      	beq.n	80043ac <_strtol_l.constprop.0+0x18>
 8004462:	1e69      	subs	r1, r5, #1
 8004464:	e005      	b.n	8004472 <_strtol_l.constprop.0+0xde>
 8004466:	b106      	cbz	r6, 800446a <_strtol_l.constprop.0+0xd6>
 8004468:	4240      	negs	r0, r0
 800446a:	2a00      	cmp	r2, #0
 800446c:	d09e      	beq.n	80043ac <_strtol_l.constprop.0+0x18>
 800446e:	2f00      	cmp	r7, #0
 8004470:	d1f7      	bne.n	8004462 <_strtol_l.constprop.0+0xce>
 8004472:	6011      	str	r1, [r2, #0]
 8004474:	e79a      	b.n	80043ac <_strtol_l.constprop.0+0x18>
 8004476:	2430      	movs	r4, #48	; 0x30
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1b5      	bne.n	80043e8 <_strtol_l.constprop.0+0x54>
 800447c:	2308      	movs	r3, #8
 800447e:	e7b3      	b.n	80043e8 <_strtol_l.constprop.0+0x54>
 8004480:	2c30      	cmp	r4, #48	; 0x30
 8004482:	d0a9      	beq.n	80043d8 <_strtol_l.constprop.0+0x44>
 8004484:	230a      	movs	r3, #10
 8004486:	e7af      	b.n	80043e8 <_strtol_l.constprop.0+0x54>
 8004488:	08007401 	.word	0x08007401

0800448c <_strtol_r>:
 800448c:	f7ff bf82 	b.w	8004394 <_strtol_l.constprop.0>

08004490 <quorem>:
 8004490:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004494:	6903      	ldr	r3, [r0, #16]
 8004496:	690c      	ldr	r4, [r1, #16]
 8004498:	42a3      	cmp	r3, r4
 800449a:	4607      	mov	r7, r0
 800449c:	db7d      	blt.n	800459a <quorem+0x10a>
 800449e:	3c01      	subs	r4, #1
 80044a0:	f101 0814 	add.w	r8, r1, #20
 80044a4:	f100 0514 	add.w	r5, r0, #20
 80044a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80044ac:	9301      	str	r3, [sp, #4]
 80044ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80044b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80044b6:	3301      	adds	r3, #1
 80044b8:	429a      	cmp	r2, r3
 80044ba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80044be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80044c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80044c6:	d32e      	bcc.n	8004526 <quorem+0x96>
 80044c8:	f04f 0e00 	mov.w	lr, #0
 80044cc:	4640      	mov	r0, r8
 80044ce:	46ac      	mov	ip, r5
 80044d0:	46f2      	mov	sl, lr
 80044d2:	f850 2b04 	ldr.w	r2, [r0], #4
 80044d6:	b293      	uxth	r3, r2
 80044d8:	fb06 e303 	mla	r3, r6, r3, lr
 80044dc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80044e0:	0c12      	lsrs	r2, r2, #16
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	fb06 e202 	mla	r2, r6, r2, lr
 80044e8:	ebaa 0303 	sub.w	r3, sl, r3
 80044ec:	f8dc a000 	ldr.w	sl, [ip]
 80044f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80044f4:	b292      	uxth	r2, r2
 80044f6:	fa13 f38a 	uxtah	r3, r3, sl
 80044fa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80044fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004502:	b29b      	uxth	r3, r3
 8004504:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004508:	4581      	cmp	r9, r0
 800450a:	f84c 3b04 	str.w	r3, [ip], #4
 800450e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004512:	d2de      	bcs.n	80044d2 <quorem+0x42>
 8004514:	f855 300b 	ldr.w	r3, [r5, fp]
 8004518:	b92b      	cbnz	r3, 8004526 <quorem+0x96>
 800451a:	9b01      	ldr	r3, [sp, #4]
 800451c:	3b04      	subs	r3, #4
 800451e:	429d      	cmp	r5, r3
 8004520:	461a      	mov	r2, r3
 8004522:	d32e      	bcc.n	8004582 <quorem+0xf2>
 8004524:	613c      	str	r4, [r7, #16]
 8004526:	4638      	mov	r0, r7
 8004528:	f001 fc88 	bl	8005e3c <__mcmp>
 800452c:	2800      	cmp	r0, #0
 800452e:	db24      	blt.n	800457a <quorem+0xea>
 8004530:	3601      	adds	r6, #1
 8004532:	4628      	mov	r0, r5
 8004534:	f04f 0c00 	mov.w	ip, #0
 8004538:	f858 2b04 	ldr.w	r2, [r8], #4
 800453c:	f8d0 e000 	ldr.w	lr, [r0]
 8004540:	b293      	uxth	r3, r2
 8004542:	ebac 0303 	sub.w	r3, ip, r3
 8004546:	0c12      	lsrs	r2, r2, #16
 8004548:	fa13 f38e 	uxtah	r3, r3, lr
 800454c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004550:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004554:	b29b      	uxth	r3, r3
 8004556:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800455a:	45c1      	cmp	r9, r8
 800455c:	f840 3b04 	str.w	r3, [r0], #4
 8004560:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004564:	d2e8      	bcs.n	8004538 <quorem+0xa8>
 8004566:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800456a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800456e:	b922      	cbnz	r2, 800457a <quorem+0xea>
 8004570:	3b04      	subs	r3, #4
 8004572:	429d      	cmp	r5, r3
 8004574:	461a      	mov	r2, r3
 8004576:	d30a      	bcc.n	800458e <quorem+0xfe>
 8004578:	613c      	str	r4, [r7, #16]
 800457a:	4630      	mov	r0, r6
 800457c:	b003      	add	sp, #12
 800457e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004582:	6812      	ldr	r2, [r2, #0]
 8004584:	3b04      	subs	r3, #4
 8004586:	2a00      	cmp	r2, #0
 8004588:	d1cc      	bne.n	8004524 <quorem+0x94>
 800458a:	3c01      	subs	r4, #1
 800458c:	e7c7      	b.n	800451e <quorem+0x8e>
 800458e:	6812      	ldr	r2, [r2, #0]
 8004590:	3b04      	subs	r3, #4
 8004592:	2a00      	cmp	r2, #0
 8004594:	d1f0      	bne.n	8004578 <quorem+0xe8>
 8004596:	3c01      	subs	r4, #1
 8004598:	e7eb      	b.n	8004572 <quorem+0xe2>
 800459a:	2000      	movs	r0, #0
 800459c:	e7ee      	b.n	800457c <quorem+0xec>
	...

080045a0 <_dtoa_r>:
 80045a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80045a6:	b099      	sub	sp, #100	; 0x64
 80045a8:	4616      	mov	r6, r2
 80045aa:	461f      	mov	r7, r3
 80045ac:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80045b0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80045b4:	4605      	mov	r5, r0
 80045b6:	b974      	cbnz	r4, 80045d6 <_dtoa_r+0x36>
 80045b8:	2010      	movs	r0, #16
 80045ba:	f001 f94f 	bl	800585c <malloc>
 80045be:	4602      	mov	r2, r0
 80045c0:	6268      	str	r0, [r5, #36]	; 0x24
 80045c2:	b920      	cbnz	r0, 80045ce <_dtoa_r+0x2e>
 80045c4:	4ba8      	ldr	r3, [pc, #672]	; (8004868 <_dtoa_r+0x2c8>)
 80045c6:	21ea      	movs	r1, #234	; 0xea
 80045c8:	48a8      	ldr	r0, [pc, #672]	; (800486c <_dtoa_r+0x2cc>)
 80045ca:	f002 f8a9 	bl	8006720 <__assert_func>
 80045ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80045d2:	6004      	str	r4, [r0, #0]
 80045d4:	60c4      	str	r4, [r0, #12]
 80045d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80045d8:	6819      	ldr	r1, [r3, #0]
 80045da:	b151      	cbz	r1, 80045f2 <_dtoa_r+0x52>
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	604a      	str	r2, [r1, #4]
 80045e0:	2301      	movs	r3, #1
 80045e2:	4093      	lsls	r3, r2
 80045e4:	608b      	str	r3, [r1, #8]
 80045e6:	4628      	mov	r0, r5
 80045e8:	f001 f9a0 	bl	800592c <_Bfree>
 80045ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	1e3b      	subs	r3, r7, #0
 80045f4:	bfb9      	ittee	lt
 80045f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80045fa:	9305      	strlt	r3, [sp, #20]
 80045fc:	2300      	movge	r3, #0
 80045fe:	f8c8 3000 	strge.w	r3, [r8]
 8004602:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004606:	4b9a      	ldr	r3, [pc, #616]	; (8004870 <_dtoa_r+0x2d0>)
 8004608:	bfbc      	itt	lt
 800460a:	2201      	movlt	r2, #1
 800460c:	f8c8 2000 	strlt.w	r2, [r8]
 8004610:	ea33 0309 	bics.w	r3, r3, r9
 8004614:	d119      	bne.n	800464a <_dtoa_r+0xaa>
 8004616:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004618:	f242 730f 	movw	r3, #9999	; 0x270f
 800461c:	6013      	str	r3, [r2, #0]
 800461e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004622:	4333      	orrs	r3, r6
 8004624:	f000 8580 	beq.w	8005128 <_dtoa_r+0xb88>
 8004628:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800462a:	b953      	cbnz	r3, 8004642 <_dtoa_r+0xa2>
 800462c:	4b91      	ldr	r3, [pc, #580]	; (8004874 <_dtoa_r+0x2d4>)
 800462e:	e022      	b.n	8004676 <_dtoa_r+0xd6>
 8004630:	4b91      	ldr	r3, [pc, #580]	; (8004878 <_dtoa_r+0x2d8>)
 8004632:	9303      	str	r3, [sp, #12]
 8004634:	3308      	adds	r3, #8
 8004636:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	9803      	ldr	r0, [sp, #12]
 800463c:	b019      	add	sp, #100	; 0x64
 800463e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004642:	4b8c      	ldr	r3, [pc, #560]	; (8004874 <_dtoa_r+0x2d4>)
 8004644:	9303      	str	r3, [sp, #12]
 8004646:	3303      	adds	r3, #3
 8004648:	e7f5      	b.n	8004636 <_dtoa_r+0x96>
 800464a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800464e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004652:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004656:	2200      	movs	r2, #0
 8004658:	2300      	movs	r3, #0
 800465a:	f7fc fa3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800465e:	4680      	mov	r8, r0
 8004660:	b158      	cbz	r0, 800467a <_dtoa_r+0xda>
 8004662:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004664:	2301      	movs	r3, #1
 8004666:	6013      	str	r3, [r2, #0]
 8004668:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 8559 	beq.w	8005122 <_dtoa_r+0xb82>
 8004670:	4882      	ldr	r0, [pc, #520]	; (800487c <_dtoa_r+0x2dc>)
 8004672:	6018      	str	r0, [r3, #0]
 8004674:	1e43      	subs	r3, r0, #1
 8004676:	9303      	str	r3, [sp, #12]
 8004678:	e7df      	b.n	800463a <_dtoa_r+0x9a>
 800467a:	ab16      	add	r3, sp, #88	; 0x58
 800467c:	9301      	str	r3, [sp, #4]
 800467e:	ab17      	add	r3, sp, #92	; 0x5c
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	4628      	mov	r0, r5
 8004684:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004688:	f001 fcf6 	bl	8006078 <__d2b>
 800468c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004690:	4683      	mov	fp, r0
 8004692:	2c00      	cmp	r4, #0
 8004694:	d07e      	beq.n	8004794 <_dtoa_r+0x1f4>
 8004696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004698:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800469c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80046a4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80046a8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80046ac:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80046b0:	4b73      	ldr	r3, [pc, #460]	; (8004880 <_dtoa_r+0x2e0>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	f7fb fdf0 	bl	8000298 <__aeabi_dsub>
 80046b8:	a365      	add	r3, pc, #404	; (adr r3, 8004850 <_dtoa_r+0x2b0>)
 80046ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046be:	f7fb ffa3 	bl	8000608 <__aeabi_dmul>
 80046c2:	a365      	add	r3, pc, #404	; (adr r3, 8004858 <_dtoa_r+0x2b8>)
 80046c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c8:	f7fb fde8 	bl	800029c <__adddf3>
 80046cc:	4606      	mov	r6, r0
 80046ce:	4620      	mov	r0, r4
 80046d0:	460f      	mov	r7, r1
 80046d2:	f7fb ff2f 	bl	8000534 <__aeabi_i2d>
 80046d6:	a362      	add	r3, pc, #392	; (adr r3, 8004860 <_dtoa_r+0x2c0>)
 80046d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046dc:	f7fb ff94 	bl	8000608 <__aeabi_dmul>
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	4630      	mov	r0, r6
 80046e6:	4639      	mov	r1, r7
 80046e8:	f7fb fdd8 	bl	800029c <__adddf3>
 80046ec:	4606      	mov	r6, r0
 80046ee:	460f      	mov	r7, r1
 80046f0:	f7fc fa3a 	bl	8000b68 <__aeabi_d2iz>
 80046f4:	2200      	movs	r2, #0
 80046f6:	4682      	mov	sl, r0
 80046f8:	2300      	movs	r3, #0
 80046fa:	4630      	mov	r0, r6
 80046fc:	4639      	mov	r1, r7
 80046fe:	f7fc f9f5 	bl	8000aec <__aeabi_dcmplt>
 8004702:	b148      	cbz	r0, 8004718 <_dtoa_r+0x178>
 8004704:	4650      	mov	r0, sl
 8004706:	f7fb ff15 	bl	8000534 <__aeabi_i2d>
 800470a:	4632      	mov	r2, r6
 800470c:	463b      	mov	r3, r7
 800470e:	f7fc f9e3 	bl	8000ad8 <__aeabi_dcmpeq>
 8004712:	b908      	cbnz	r0, 8004718 <_dtoa_r+0x178>
 8004714:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004718:	f1ba 0f16 	cmp.w	sl, #22
 800471c:	d857      	bhi.n	80047ce <_dtoa_r+0x22e>
 800471e:	4b59      	ldr	r3, [pc, #356]	; (8004884 <_dtoa_r+0x2e4>)
 8004720:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004728:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800472c:	f7fc f9de 	bl	8000aec <__aeabi_dcmplt>
 8004730:	2800      	cmp	r0, #0
 8004732:	d04e      	beq.n	80047d2 <_dtoa_r+0x232>
 8004734:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004738:	2300      	movs	r3, #0
 800473a:	930f      	str	r3, [sp, #60]	; 0x3c
 800473c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800473e:	1b1c      	subs	r4, r3, r4
 8004740:	1e63      	subs	r3, r4, #1
 8004742:	9309      	str	r3, [sp, #36]	; 0x24
 8004744:	bf45      	ittet	mi
 8004746:	f1c4 0301 	rsbmi	r3, r4, #1
 800474a:	9306      	strmi	r3, [sp, #24]
 800474c:	2300      	movpl	r3, #0
 800474e:	2300      	movmi	r3, #0
 8004750:	bf4c      	ite	mi
 8004752:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004754:	9306      	strpl	r3, [sp, #24]
 8004756:	f1ba 0f00 	cmp.w	sl, #0
 800475a:	db3c      	blt.n	80047d6 <_dtoa_r+0x236>
 800475c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800475e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004762:	4453      	add	r3, sl
 8004764:	9309      	str	r3, [sp, #36]	; 0x24
 8004766:	2300      	movs	r3, #0
 8004768:	930a      	str	r3, [sp, #40]	; 0x28
 800476a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800476c:	2b09      	cmp	r3, #9
 800476e:	f200 808d 	bhi.w	800488c <_dtoa_r+0x2ec>
 8004772:	2b05      	cmp	r3, #5
 8004774:	bfc4      	itt	gt
 8004776:	3b04      	subgt	r3, #4
 8004778:	9322      	strgt	r3, [sp, #136]	; 0x88
 800477a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800477c:	f1a3 0302 	sub.w	r3, r3, #2
 8004780:	bfcc      	ite	gt
 8004782:	2400      	movgt	r4, #0
 8004784:	2401      	movle	r4, #1
 8004786:	2b03      	cmp	r3, #3
 8004788:	f200 808c 	bhi.w	80048a4 <_dtoa_r+0x304>
 800478c:	e8df f003 	tbb	[pc, r3]
 8004790:	5b4d4f2d 	.word	0x5b4d4f2d
 8004794:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004798:	441c      	add	r4, r3
 800479a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800479e:	2b20      	cmp	r3, #32
 80047a0:	bfc3      	ittte	gt
 80047a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80047a6:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80047aa:	fa09 f303 	lslgt.w	r3, r9, r3
 80047ae:	f1c3 0320 	rsble	r3, r3, #32
 80047b2:	bfc6      	itte	gt
 80047b4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80047b8:	4318      	orrgt	r0, r3
 80047ba:	fa06 f003 	lslle.w	r0, r6, r3
 80047be:	f7fb fea9 	bl	8000514 <__aeabi_ui2d>
 80047c2:	2301      	movs	r3, #1
 80047c4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80047c8:	3c01      	subs	r4, #1
 80047ca:	9313      	str	r3, [sp, #76]	; 0x4c
 80047cc:	e770      	b.n	80046b0 <_dtoa_r+0x110>
 80047ce:	2301      	movs	r3, #1
 80047d0:	e7b3      	b.n	800473a <_dtoa_r+0x19a>
 80047d2:	900f      	str	r0, [sp, #60]	; 0x3c
 80047d4:	e7b2      	b.n	800473c <_dtoa_r+0x19c>
 80047d6:	9b06      	ldr	r3, [sp, #24]
 80047d8:	eba3 030a 	sub.w	r3, r3, sl
 80047dc:	9306      	str	r3, [sp, #24]
 80047de:	f1ca 0300 	rsb	r3, sl, #0
 80047e2:	930a      	str	r3, [sp, #40]	; 0x28
 80047e4:	2300      	movs	r3, #0
 80047e6:	930e      	str	r3, [sp, #56]	; 0x38
 80047e8:	e7bf      	b.n	800476a <_dtoa_r+0x1ca>
 80047ea:	2300      	movs	r3, #0
 80047ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80047ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	dc5a      	bgt.n	80048aa <_dtoa_r+0x30a>
 80047f4:	f04f 0901 	mov.w	r9, #1
 80047f8:	f8cd 9020 	str.w	r9, [sp, #32]
 80047fc:	464b      	mov	r3, r9
 80047fe:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004802:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004804:	2200      	movs	r2, #0
 8004806:	6042      	str	r2, [r0, #4]
 8004808:	2204      	movs	r2, #4
 800480a:	f102 0614 	add.w	r6, r2, #20
 800480e:	429e      	cmp	r6, r3
 8004810:	6841      	ldr	r1, [r0, #4]
 8004812:	d950      	bls.n	80048b6 <_dtoa_r+0x316>
 8004814:	4628      	mov	r0, r5
 8004816:	f001 f849 	bl	80058ac <_Balloc>
 800481a:	9003      	str	r0, [sp, #12]
 800481c:	2800      	cmp	r0, #0
 800481e:	d14e      	bne.n	80048be <_dtoa_r+0x31e>
 8004820:	4b19      	ldr	r3, [pc, #100]	; (8004888 <_dtoa_r+0x2e8>)
 8004822:	4602      	mov	r2, r0
 8004824:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004828:	e6ce      	b.n	80045c8 <_dtoa_r+0x28>
 800482a:	2301      	movs	r3, #1
 800482c:	e7de      	b.n	80047ec <_dtoa_r+0x24c>
 800482e:	2300      	movs	r3, #0
 8004830:	930b      	str	r3, [sp, #44]	; 0x2c
 8004832:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004834:	eb0a 0903 	add.w	r9, sl, r3
 8004838:	f109 0301 	add.w	r3, r9, #1
 800483c:	2b01      	cmp	r3, #1
 800483e:	9308      	str	r3, [sp, #32]
 8004840:	bfb8      	it	lt
 8004842:	2301      	movlt	r3, #1
 8004844:	e7dd      	b.n	8004802 <_dtoa_r+0x262>
 8004846:	2301      	movs	r3, #1
 8004848:	e7f2      	b.n	8004830 <_dtoa_r+0x290>
 800484a:	bf00      	nop
 800484c:	f3af 8000 	nop.w
 8004850:	636f4361 	.word	0x636f4361
 8004854:	3fd287a7 	.word	0x3fd287a7
 8004858:	8b60c8b3 	.word	0x8b60c8b3
 800485c:	3fc68a28 	.word	0x3fc68a28
 8004860:	509f79fb 	.word	0x509f79fb
 8004864:	3fd34413 	.word	0x3fd34413
 8004868:	0800750e 	.word	0x0800750e
 800486c:	08007525 	.word	0x08007525
 8004870:	7ff00000 	.word	0x7ff00000
 8004874:	0800750a 	.word	0x0800750a
 8004878:	08007501 	.word	0x08007501
 800487c:	08007381 	.word	0x08007381
 8004880:	3ff80000 	.word	0x3ff80000
 8004884:	08007690 	.word	0x08007690
 8004888:	08007580 	.word	0x08007580
 800488c:	2401      	movs	r4, #1
 800488e:	2300      	movs	r3, #0
 8004890:	9322      	str	r3, [sp, #136]	; 0x88
 8004892:	940b      	str	r4, [sp, #44]	; 0x2c
 8004894:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004898:	2200      	movs	r2, #0
 800489a:	f8cd 9020 	str.w	r9, [sp, #32]
 800489e:	2312      	movs	r3, #18
 80048a0:	9223      	str	r2, [sp, #140]	; 0x8c
 80048a2:	e7ae      	b.n	8004802 <_dtoa_r+0x262>
 80048a4:	2301      	movs	r3, #1
 80048a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80048a8:	e7f4      	b.n	8004894 <_dtoa_r+0x2f4>
 80048aa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80048ae:	f8cd 9020 	str.w	r9, [sp, #32]
 80048b2:	464b      	mov	r3, r9
 80048b4:	e7a5      	b.n	8004802 <_dtoa_r+0x262>
 80048b6:	3101      	adds	r1, #1
 80048b8:	6041      	str	r1, [r0, #4]
 80048ba:	0052      	lsls	r2, r2, #1
 80048bc:	e7a5      	b.n	800480a <_dtoa_r+0x26a>
 80048be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80048c0:	9a03      	ldr	r2, [sp, #12]
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	9b08      	ldr	r3, [sp, #32]
 80048c6:	2b0e      	cmp	r3, #14
 80048c8:	f200 80a8 	bhi.w	8004a1c <_dtoa_r+0x47c>
 80048cc:	2c00      	cmp	r4, #0
 80048ce:	f000 80a5 	beq.w	8004a1c <_dtoa_r+0x47c>
 80048d2:	f1ba 0f00 	cmp.w	sl, #0
 80048d6:	dd34      	ble.n	8004942 <_dtoa_r+0x3a2>
 80048d8:	4a9a      	ldr	r2, [pc, #616]	; (8004b44 <_dtoa_r+0x5a4>)
 80048da:	f00a 030f 	and.w	r3, sl, #15
 80048de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80048e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80048e6:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80048ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80048ee:	ea4f 142a 	mov.w	r4, sl, asr #4
 80048f2:	d016      	beq.n	8004922 <_dtoa_r+0x382>
 80048f4:	4b94      	ldr	r3, [pc, #592]	; (8004b48 <_dtoa_r+0x5a8>)
 80048f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80048fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80048fe:	f7fb ffad 	bl	800085c <__aeabi_ddiv>
 8004902:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004906:	f004 040f 	and.w	r4, r4, #15
 800490a:	2703      	movs	r7, #3
 800490c:	4e8e      	ldr	r6, [pc, #568]	; (8004b48 <_dtoa_r+0x5a8>)
 800490e:	b954      	cbnz	r4, 8004926 <_dtoa_r+0x386>
 8004910:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004914:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004918:	f7fb ffa0 	bl	800085c <__aeabi_ddiv>
 800491c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004920:	e029      	b.n	8004976 <_dtoa_r+0x3d6>
 8004922:	2702      	movs	r7, #2
 8004924:	e7f2      	b.n	800490c <_dtoa_r+0x36c>
 8004926:	07e1      	lsls	r1, r4, #31
 8004928:	d508      	bpl.n	800493c <_dtoa_r+0x39c>
 800492a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800492e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004932:	f7fb fe69 	bl	8000608 <__aeabi_dmul>
 8004936:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800493a:	3701      	adds	r7, #1
 800493c:	1064      	asrs	r4, r4, #1
 800493e:	3608      	adds	r6, #8
 8004940:	e7e5      	b.n	800490e <_dtoa_r+0x36e>
 8004942:	f000 80a5 	beq.w	8004a90 <_dtoa_r+0x4f0>
 8004946:	f1ca 0400 	rsb	r4, sl, #0
 800494a:	4b7e      	ldr	r3, [pc, #504]	; (8004b44 <_dtoa_r+0x5a4>)
 800494c:	4e7e      	ldr	r6, [pc, #504]	; (8004b48 <_dtoa_r+0x5a8>)
 800494e:	f004 020f 	and.w	r2, r4, #15
 8004952:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800495e:	f7fb fe53 	bl	8000608 <__aeabi_dmul>
 8004962:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004966:	1124      	asrs	r4, r4, #4
 8004968:	2300      	movs	r3, #0
 800496a:	2702      	movs	r7, #2
 800496c:	2c00      	cmp	r4, #0
 800496e:	f040 8084 	bne.w	8004a7a <_dtoa_r+0x4da>
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1d2      	bne.n	800491c <_dtoa_r+0x37c>
 8004976:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 808b 	beq.w	8004a94 <_dtoa_r+0x4f4>
 800497e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004982:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004986:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800498a:	4b70      	ldr	r3, [pc, #448]	; (8004b4c <_dtoa_r+0x5ac>)
 800498c:	2200      	movs	r2, #0
 800498e:	f7fc f8ad 	bl	8000aec <__aeabi_dcmplt>
 8004992:	2800      	cmp	r0, #0
 8004994:	d07e      	beq.n	8004a94 <_dtoa_r+0x4f4>
 8004996:	9b08      	ldr	r3, [sp, #32]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d07b      	beq.n	8004a94 <_dtoa_r+0x4f4>
 800499c:	f1b9 0f00 	cmp.w	r9, #0
 80049a0:	dd38      	ble.n	8004a14 <_dtoa_r+0x474>
 80049a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80049a6:	4b6a      	ldr	r3, [pc, #424]	; (8004b50 <_dtoa_r+0x5b0>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	f7fb fe2d 	bl	8000608 <__aeabi_dmul>
 80049ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049b2:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 80049b6:	3701      	adds	r7, #1
 80049b8:	464c      	mov	r4, r9
 80049ba:	4638      	mov	r0, r7
 80049bc:	f7fb fdba 	bl	8000534 <__aeabi_i2d>
 80049c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049c4:	f7fb fe20 	bl	8000608 <__aeabi_dmul>
 80049c8:	4b62      	ldr	r3, [pc, #392]	; (8004b54 <_dtoa_r+0x5b4>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	f7fb fc66 	bl	800029c <__adddf3>
 80049d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80049d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80049d8:	9611      	str	r6, [sp, #68]	; 0x44
 80049da:	2c00      	cmp	r4, #0
 80049dc:	d15d      	bne.n	8004a9a <_dtoa_r+0x4fa>
 80049de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049e2:	4b5d      	ldr	r3, [pc, #372]	; (8004b58 <_dtoa_r+0x5b8>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	f7fb fc57 	bl	8000298 <__aeabi_dsub>
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80049f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80049f4:	4633      	mov	r3, r6
 80049f6:	f7fc f897 	bl	8000b28 <__aeabi_dcmpgt>
 80049fa:	2800      	cmp	r0, #0
 80049fc:	f040 829c 	bne.w	8004f38 <_dtoa_r+0x998>
 8004a00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004a06:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004a0a:	f7fc f86f 	bl	8000aec <__aeabi_dcmplt>
 8004a0e:	2800      	cmp	r0, #0
 8004a10:	f040 8290 	bne.w	8004f34 <_dtoa_r+0x994>
 8004a14:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004a18:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004a1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f2c0 8152 	blt.w	8004cc8 <_dtoa_r+0x728>
 8004a24:	f1ba 0f0e 	cmp.w	sl, #14
 8004a28:	f300 814e 	bgt.w	8004cc8 <_dtoa_r+0x728>
 8004a2c:	4b45      	ldr	r3, [pc, #276]	; (8004b44 <_dtoa_r+0x5a4>)
 8004a2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004a32:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a36:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004a3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f280 80db 	bge.w	8004bf8 <_dtoa_r+0x658>
 8004a42:	9b08      	ldr	r3, [sp, #32]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f300 80d7 	bgt.w	8004bf8 <_dtoa_r+0x658>
 8004a4a:	f040 8272 	bne.w	8004f32 <_dtoa_r+0x992>
 8004a4e:	4b42      	ldr	r3, [pc, #264]	; (8004b58 <_dtoa_r+0x5b8>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a56:	f7fb fdd7 	bl	8000608 <__aeabi_dmul>
 8004a5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a5e:	f7fc f859 	bl	8000b14 <__aeabi_dcmpge>
 8004a62:	9c08      	ldr	r4, [sp, #32]
 8004a64:	4626      	mov	r6, r4
 8004a66:	2800      	cmp	r0, #0
 8004a68:	f040 8248 	bne.w	8004efc <_dtoa_r+0x95c>
 8004a6c:	9f03      	ldr	r7, [sp, #12]
 8004a6e:	2331      	movs	r3, #49	; 0x31
 8004a70:	f807 3b01 	strb.w	r3, [r7], #1
 8004a74:	f10a 0a01 	add.w	sl, sl, #1
 8004a78:	e244      	b.n	8004f04 <_dtoa_r+0x964>
 8004a7a:	07e2      	lsls	r2, r4, #31
 8004a7c:	d505      	bpl.n	8004a8a <_dtoa_r+0x4ea>
 8004a7e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004a82:	f7fb fdc1 	bl	8000608 <__aeabi_dmul>
 8004a86:	3701      	adds	r7, #1
 8004a88:	2301      	movs	r3, #1
 8004a8a:	1064      	asrs	r4, r4, #1
 8004a8c:	3608      	adds	r6, #8
 8004a8e:	e76d      	b.n	800496c <_dtoa_r+0x3cc>
 8004a90:	2702      	movs	r7, #2
 8004a92:	e770      	b.n	8004976 <_dtoa_r+0x3d6>
 8004a94:	9c08      	ldr	r4, [sp, #32]
 8004a96:	46d0      	mov	r8, sl
 8004a98:	e78f      	b.n	80049ba <_dtoa_r+0x41a>
 8004a9a:	9903      	ldr	r1, [sp, #12]
 8004a9c:	4b29      	ldr	r3, [pc, #164]	; (8004b44 <_dtoa_r+0x5a4>)
 8004a9e:	4421      	add	r1, r4
 8004aa0:	9112      	str	r1, [sp, #72]	; 0x48
 8004aa2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004aa4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004aa8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004aac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004ab0:	2900      	cmp	r1, #0
 8004ab2:	d055      	beq.n	8004b60 <_dtoa_r+0x5c0>
 8004ab4:	4929      	ldr	r1, [pc, #164]	; (8004b5c <_dtoa_r+0x5bc>)
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	f7fb fed0 	bl	800085c <__aeabi_ddiv>
 8004abc:	463b      	mov	r3, r7
 8004abe:	4632      	mov	r2, r6
 8004ac0:	f7fb fbea 	bl	8000298 <__aeabi_dsub>
 8004ac4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ac8:	9f03      	ldr	r7, [sp, #12]
 8004aca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ace:	f7fc f84b 	bl	8000b68 <__aeabi_d2iz>
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	f7fb fd2e 	bl	8000534 <__aeabi_i2d>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ae0:	f7fb fbda 	bl	8000298 <__aeabi_dsub>
 8004ae4:	3430      	adds	r4, #48	; 0x30
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004aee:	f807 4b01 	strb.w	r4, [r7], #1
 8004af2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004af6:	f7fb fff9 	bl	8000aec <__aeabi_dcmplt>
 8004afa:	2800      	cmp	r0, #0
 8004afc:	d174      	bne.n	8004be8 <_dtoa_r+0x648>
 8004afe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b02:	4912      	ldr	r1, [pc, #72]	; (8004b4c <_dtoa_r+0x5ac>)
 8004b04:	2000      	movs	r0, #0
 8004b06:	f7fb fbc7 	bl	8000298 <__aeabi_dsub>
 8004b0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004b0e:	f7fb ffed 	bl	8000aec <__aeabi_dcmplt>
 8004b12:	2800      	cmp	r0, #0
 8004b14:	f040 80b7 	bne.w	8004c86 <_dtoa_r+0x6e6>
 8004b18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004b1a:	429f      	cmp	r7, r3
 8004b1c:	f43f af7a 	beq.w	8004a14 <_dtoa_r+0x474>
 8004b20:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b24:	4b0a      	ldr	r3, [pc, #40]	; (8004b50 <_dtoa_r+0x5b0>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	f7fb fd6e 	bl	8000608 <__aeabi_dmul>
 8004b2c:	4b08      	ldr	r3, [pc, #32]	; (8004b50 <_dtoa_r+0x5b0>)
 8004b2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004b32:	2200      	movs	r2, #0
 8004b34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b38:	f7fb fd66 	bl	8000608 <__aeabi_dmul>
 8004b3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b40:	e7c3      	b.n	8004aca <_dtoa_r+0x52a>
 8004b42:	bf00      	nop
 8004b44:	08007690 	.word	0x08007690
 8004b48:	08007668 	.word	0x08007668
 8004b4c:	3ff00000 	.word	0x3ff00000
 8004b50:	40240000 	.word	0x40240000
 8004b54:	401c0000 	.word	0x401c0000
 8004b58:	40140000 	.word	0x40140000
 8004b5c:	3fe00000 	.word	0x3fe00000
 8004b60:	4630      	mov	r0, r6
 8004b62:	4639      	mov	r1, r7
 8004b64:	f7fb fd50 	bl	8000608 <__aeabi_dmul>
 8004b68:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004b6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004b6e:	9c03      	ldr	r4, [sp, #12]
 8004b70:	9314      	str	r3, [sp, #80]	; 0x50
 8004b72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b76:	f7fb fff7 	bl	8000b68 <__aeabi_d2iz>
 8004b7a:	9015      	str	r0, [sp, #84]	; 0x54
 8004b7c:	f7fb fcda 	bl	8000534 <__aeabi_i2d>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b88:	f7fb fb86 	bl	8000298 <__aeabi_dsub>
 8004b8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004b8e:	3330      	adds	r3, #48	; 0x30
 8004b90:	f804 3b01 	strb.w	r3, [r4], #1
 8004b94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004b96:	429c      	cmp	r4, r3
 8004b98:	4606      	mov	r6, r0
 8004b9a:	460f      	mov	r7, r1
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	d124      	bne.n	8004bec <_dtoa_r+0x64c>
 8004ba2:	4ba4      	ldr	r3, [pc, #656]	; (8004e34 <_dtoa_r+0x894>)
 8004ba4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ba8:	f7fb fb78 	bl	800029c <__adddf3>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4630      	mov	r0, r6
 8004bb2:	4639      	mov	r1, r7
 8004bb4:	f7fb ffb8 	bl	8000b28 <__aeabi_dcmpgt>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	d163      	bne.n	8004c84 <_dtoa_r+0x6e4>
 8004bbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004bc0:	499c      	ldr	r1, [pc, #624]	; (8004e34 <_dtoa_r+0x894>)
 8004bc2:	2000      	movs	r0, #0
 8004bc4:	f7fb fb68 	bl	8000298 <__aeabi_dsub>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4630      	mov	r0, r6
 8004bce:	4639      	mov	r1, r7
 8004bd0:	f7fb ff8c 	bl	8000aec <__aeabi_dcmplt>
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	f43f af1d 	beq.w	8004a14 <_dtoa_r+0x474>
 8004bda:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004bdc:	1e7b      	subs	r3, r7, #1
 8004bde:	9314      	str	r3, [sp, #80]	; 0x50
 8004be0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004be4:	2b30      	cmp	r3, #48	; 0x30
 8004be6:	d0f8      	beq.n	8004bda <_dtoa_r+0x63a>
 8004be8:	46c2      	mov	sl, r8
 8004bea:	e03b      	b.n	8004c64 <_dtoa_r+0x6c4>
 8004bec:	4b92      	ldr	r3, [pc, #584]	; (8004e38 <_dtoa_r+0x898>)
 8004bee:	f7fb fd0b 	bl	8000608 <__aeabi_dmul>
 8004bf2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bf6:	e7bc      	b.n	8004b72 <_dtoa_r+0x5d2>
 8004bf8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004bfc:	9f03      	ldr	r7, [sp, #12]
 8004bfe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004c02:	4640      	mov	r0, r8
 8004c04:	4649      	mov	r1, r9
 8004c06:	f7fb fe29 	bl	800085c <__aeabi_ddiv>
 8004c0a:	f7fb ffad 	bl	8000b68 <__aeabi_d2iz>
 8004c0e:	4604      	mov	r4, r0
 8004c10:	f7fb fc90 	bl	8000534 <__aeabi_i2d>
 8004c14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004c18:	f7fb fcf6 	bl	8000608 <__aeabi_dmul>
 8004c1c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4640      	mov	r0, r8
 8004c26:	4649      	mov	r1, r9
 8004c28:	f7fb fb36 	bl	8000298 <__aeabi_dsub>
 8004c2c:	f807 6b01 	strb.w	r6, [r7], #1
 8004c30:	9e03      	ldr	r6, [sp, #12]
 8004c32:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004c36:	1bbe      	subs	r6, r7, r6
 8004c38:	45b4      	cmp	ip, r6
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	d136      	bne.n	8004cae <_dtoa_r+0x70e>
 8004c40:	f7fb fb2c 	bl	800029c <__adddf3>
 8004c44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004c48:	4680      	mov	r8, r0
 8004c4a:	4689      	mov	r9, r1
 8004c4c:	f7fb ff6c 	bl	8000b28 <__aeabi_dcmpgt>
 8004c50:	bb58      	cbnz	r0, 8004caa <_dtoa_r+0x70a>
 8004c52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004c56:	4640      	mov	r0, r8
 8004c58:	4649      	mov	r1, r9
 8004c5a:	f7fb ff3d 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c5e:	b108      	cbz	r0, 8004c64 <_dtoa_r+0x6c4>
 8004c60:	07e1      	lsls	r1, r4, #31
 8004c62:	d422      	bmi.n	8004caa <_dtoa_r+0x70a>
 8004c64:	4628      	mov	r0, r5
 8004c66:	4659      	mov	r1, fp
 8004c68:	f000 fe60 	bl	800592c <_Bfree>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	703b      	strb	r3, [r7, #0]
 8004c70:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004c72:	f10a 0001 	add.w	r0, sl, #1
 8004c76:	6018      	str	r0, [r3, #0]
 8004c78:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f43f acdd 	beq.w	800463a <_dtoa_r+0x9a>
 8004c80:	601f      	str	r7, [r3, #0]
 8004c82:	e4da      	b.n	800463a <_dtoa_r+0x9a>
 8004c84:	4627      	mov	r7, r4
 8004c86:	463b      	mov	r3, r7
 8004c88:	461f      	mov	r7, r3
 8004c8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004c8e:	2a39      	cmp	r2, #57	; 0x39
 8004c90:	d107      	bne.n	8004ca2 <_dtoa_r+0x702>
 8004c92:	9a03      	ldr	r2, [sp, #12]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d1f7      	bne.n	8004c88 <_dtoa_r+0x6e8>
 8004c98:	9903      	ldr	r1, [sp, #12]
 8004c9a:	2230      	movs	r2, #48	; 0x30
 8004c9c:	f108 0801 	add.w	r8, r8, #1
 8004ca0:	700a      	strb	r2, [r1, #0]
 8004ca2:	781a      	ldrb	r2, [r3, #0]
 8004ca4:	3201      	adds	r2, #1
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	e79e      	b.n	8004be8 <_dtoa_r+0x648>
 8004caa:	46d0      	mov	r8, sl
 8004cac:	e7eb      	b.n	8004c86 <_dtoa_r+0x6e6>
 8004cae:	4b62      	ldr	r3, [pc, #392]	; (8004e38 <_dtoa_r+0x898>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f7fb fca9 	bl	8000608 <__aeabi_dmul>
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2300      	movs	r3, #0
 8004cba:	4680      	mov	r8, r0
 8004cbc:	4689      	mov	r9, r1
 8004cbe:	f7fb ff0b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	d09b      	beq.n	8004bfe <_dtoa_r+0x65e>
 8004cc6:	e7cd      	b.n	8004c64 <_dtoa_r+0x6c4>
 8004cc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004cca:	2a00      	cmp	r2, #0
 8004ccc:	f000 80d0 	beq.w	8004e70 <_dtoa_r+0x8d0>
 8004cd0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004cd2:	2a01      	cmp	r2, #1
 8004cd4:	f300 80b2 	bgt.w	8004e3c <_dtoa_r+0x89c>
 8004cd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004cda:	2a00      	cmp	r2, #0
 8004cdc:	f000 80a6 	beq.w	8004e2c <_dtoa_r+0x88c>
 8004ce0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004ce4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004ce6:	9f06      	ldr	r7, [sp, #24]
 8004ce8:	9a06      	ldr	r2, [sp, #24]
 8004cea:	441a      	add	r2, r3
 8004cec:	9206      	str	r2, [sp, #24]
 8004cee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	441a      	add	r2, r3
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	9209      	str	r2, [sp, #36]	; 0x24
 8004cf8:	f000 ff18 	bl	8005b2c <__i2b>
 8004cfc:	4606      	mov	r6, r0
 8004cfe:	2f00      	cmp	r7, #0
 8004d00:	dd0c      	ble.n	8004d1c <_dtoa_r+0x77c>
 8004d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	dd09      	ble.n	8004d1c <_dtoa_r+0x77c>
 8004d08:	42bb      	cmp	r3, r7
 8004d0a:	9a06      	ldr	r2, [sp, #24]
 8004d0c:	bfa8      	it	ge
 8004d0e:	463b      	movge	r3, r7
 8004d10:	1ad2      	subs	r2, r2, r3
 8004d12:	9206      	str	r2, [sp, #24]
 8004d14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d16:	1aff      	subs	r7, r7, r3
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d1e:	b1f3      	cbz	r3, 8004d5e <_dtoa_r+0x7be>
 8004d20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 80a8 	beq.w	8004e78 <_dtoa_r+0x8d8>
 8004d28:	2c00      	cmp	r4, #0
 8004d2a:	dd10      	ble.n	8004d4e <_dtoa_r+0x7ae>
 8004d2c:	4631      	mov	r1, r6
 8004d2e:	4622      	mov	r2, r4
 8004d30:	4628      	mov	r0, r5
 8004d32:	f000 ffb9 	bl	8005ca8 <__pow5mult>
 8004d36:	465a      	mov	r2, fp
 8004d38:	4601      	mov	r1, r0
 8004d3a:	4606      	mov	r6, r0
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	f000 ff0b 	bl	8005b58 <__multiply>
 8004d42:	4659      	mov	r1, fp
 8004d44:	4680      	mov	r8, r0
 8004d46:	4628      	mov	r0, r5
 8004d48:	f000 fdf0 	bl	800592c <_Bfree>
 8004d4c:	46c3      	mov	fp, r8
 8004d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d50:	1b1a      	subs	r2, r3, r4
 8004d52:	d004      	beq.n	8004d5e <_dtoa_r+0x7be>
 8004d54:	4659      	mov	r1, fp
 8004d56:	4628      	mov	r0, r5
 8004d58:	f000 ffa6 	bl	8005ca8 <__pow5mult>
 8004d5c:	4683      	mov	fp, r0
 8004d5e:	2101      	movs	r1, #1
 8004d60:	4628      	mov	r0, r5
 8004d62:	f000 fee3 	bl	8005b2c <__i2b>
 8004d66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	4604      	mov	r4, r0
 8004d6c:	f340 8086 	ble.w	8004e7c <_dtoa_r+0x8dc>
 8004d70:	461a      	mov	r2, r3
 8004d72:	4601      	mov	r1, r0
 8004d74:	4628      	mov	r0, r5
 8004d76:	f000 ff97 	bl	8005ca8 <__pow5mult>
 8004d7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	4604      	mov	r4, r0
 8004d80:	dd7f      	ble.n	8004e82 <_dtoa_r+0x8e2>
 8004d82:	f04f 0800 	mov.w	r8, #0
 8004d86:	6923      	ldr	r3, [r4, #16]
 8004d88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004d8c:	6918      	ldr	r0, [r3, #16]
 8004d8e:	f000 fe7f 	bl	8005a90 <__hi0bits>
 8004d92:	f1c0 0020 	rsb	r0, r0, #32
 8004d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d98:	4418      	add	r0, r3
 8004d9a:	f010 001f 	ands.w	r0, r0, #31
 8004d9e:	f000 8092 	beq.w	8004ec6 <_dtoa_r+0x926>
 8004da2:	f1c0 0320 	rsb	r3, r0, #32
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	f340 808a 	ble.w	8004ec0 <_dtoa_r+0x920>
 8004dac:	f1c0 001c 	rsb	r0, r0, #28
 8004db0:	9b06      	ldr	r3, [sp, #24]
 8004db2:	4403      	add	r3, r0
 8004db4:	9306      	str	r3, [sp, #24]
 8004db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004db8:	4403      	add	r3, r0
 8004dba:	4407      	add	r7, r0
 8004dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8004dbe:	9b06      	ldr	r3, [sp, #24]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	dd05      	ble.n	8004dd0 <_dtoa_r+0x830>
 8004dc4:	4659      	mov	r1, fp
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	4628      	mov	r0, r5
 8004dca:	f000 ffc7 	bl	8005d5c <__lshift>
 8004dce:	4683      	mov	fp, r0
 8004dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	dd05      	ble.n	8004de2 <_dtoa_r+0x842>
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4628      	mov	r0, r5
 8004ddc:	f000 ffbe 	bl	8005d5c <__lshift>
 8004de0:	4604      	mov	r4, r0
 8004de2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d070      	beq.n	8004eca <_dtoa_r+0x92a>
 8004de8:	4621      	mov	r1, r4
 8004dea:	4658      	mov	r0, fp
 8004dec:	f001 f826 	bl	8005e3c <__mcmp>
 8004df0:	2800      	cmp	r0, #0
 8004df2:	da6a      	bge.n	8004eca <_dtoa_r+0x92a>
 8004df4:	2300      	movs	r3, #0
 8004df6:	4659      	mov	r1, fp
 8004df8:	220a      	movs	r2, #10
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	f000 fdb8 	bl	8005970 <__multadd>
 8004e00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e02:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004e06:	4683      	mov	fp, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 8194 	beq.w	8005136 <_dtoa_r+0xb96>
 8004e0e:	4631      	mov	r1, r6
 8004e10:	2300      	movs	r3, #0
 8004e12:	220a      	movs	r2, #10
 8004e14:	4628      	mov	r0, r5
 8004e16:	f000 fdab 	bl	8005970 <__multadd>
 8004e1a:	f1b9 0f00 	cmp.w	r9, #0
 8004e1e:	4606      	mov	r6, r0
 8004e20:	f300 8093 	bgt.w	8004f4a <_dtoa_r+0x9aa>
 8004e24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	dc57      	bgt.n	8004eda <_dtoa_r+0x93a>
 8004e2a:	e08e      	b.n	8004f4a <_dtoa_r+0x9aa>
 8004e2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004e2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004e32:	e757      	b.n	8004ce4 <_dtoa_r+0x744>
 8004e34:	3fe00000 	.word	0x3fe00000
 8004e38:	40240000 	.word	0x40240000
 8004e3c:	9b08      	ldr	r3, [sp, #32]
 8004e3e:	1e5c      	subs	r4, r3, #1
 8004e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e42:	42a3      	cmp	r3, r4
 8004e44:	bfbf      	itttt	lt
 8004e46:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004e48:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004e4a:	1ae2      	sublt	r2, r4, r3
 8004e4c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004e4e:	bfb6      	itet	lt
 8004e50:	189b      	addlt	r3, r3, r2
 8004e52:	1b1c      	subge	r4, r3, r4
 8004e54:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004e56:	9b08      	ldr	r3, [sp, #32]
 8004e58:	bfb8      	it	lt
 8004e5a:	2400      	movlt	r4, #0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	bfb9      	ittee	lt
 8004e60:	9b06      	ldrlt	r3, [sp, #24]
 8004e62:	9a08      	ldrlt	r2, [sp, #32]
 8004e64:	9f06      	ldrge	r7, [sp, #24]
 8004e66:	9b08      	ldrge	r3, [sp, #32]
 8004e68:	bfbc      	itt	lt
 8004e6a:	1a9f      	sublt	r7, r3, r2
 8004e6c:	2300      	movlt	r3, #0
 8004e6e:	e73b      	b.n	8004ce8 <_dtoa_r+0x748>
 8004e70:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004e72:	9f06      	ldr	r7, [sp, #24]
 8004e74:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004e76:	e742      	b.n	8004cfe <_dtoa_r+0x75e>
 8004e78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e7a:	e76b      	b.n	8004d54 <_dtoa_r+0x7b4>
 8004e7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	dc19      	bgt.n	8004eb6 <_dtoa_r+0x916>
 8004e82:	9b04      	ldr	r3, [sp, #16]
 8004e84:	b9bb      	cbnz	r3, 8004eb6 <_dtoa_r+0x916>
 8004e86:	9b05      	ldr	r3, [sp, #20]
 8004e88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e8c:	b99b      	cbnz	r3, 8004eb6 <_dtoa_r+0x916>
 8004e8e:	9b05      	ldr	r3, [sp, #20]
 8004e90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e94:	0d1b      	lsrs	r3, r3, #20
 8004e96:	051b      	lsls	r3, r3, #20
 8004e98:	b183      	cbz	r3, 8004ebc <_dtoa_r+0x91c>
 8004e9a:	9b06      	ldr	r3, [sp, #24]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	9306      	str	r3, [sp, #24]
 8004ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ea6:	f04f 0801 	mov.w	r8, #1
 8004eaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f47f af6a 	bne.w	8004d86 <_dtoa_r+0x7e6>
 8004eb2:	2001      	movs	r0, #1
 8004eb4:	e76f      	b.n	8004d96 <_dtoa_r+0x7f6>
 8004eb6:	f04f 0800 	mov.w	r8, #0
 8004eba:	e7f6      	b.n	8004eaa <_dtoa_r+0x90a>
 8004ebc:	4698      	mov	r8, r3
 8004ebe:	e7f4      	b.n	8004eaa <_dtoa_r+0x90a>
 8004ec0:	f43f af7d 	beq.w	8004dbe <_dtoa_r+0x81e>
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	301c      	adds	r0, #28
 8004ec8:	e772      	b.n	8004db0 <_dtoa_r+0x810>
 8004eca:	9b08      	ldr	r3, [sp, #32]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	dc36      	bgt.n	8004f3e <_dtoa_r+0x99e>
 8004ed0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	dd33      	ble.n	8004f3e <_dtoa_r+0x99e>
 8004ed6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004eda:	f1b9 0f00 	cmp.w	r9, #0
 8004ede:	d10d      	bne.n	8004efc <_dtoa_r+0x95c>
 8004ee0:	4621      	mov	r1, r4
 8004ee2:	464b      	mov	r3, r9
 8004ee4:	2205      	movs	r2, #5
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	f000 fd42 	bl	8005970 <__multadd>
 8004eec:	4601      	mov	r1, r0
 8004eee:	4604      	mov	r4, r0
 8004ef0:	4658      	mov	r0, fp
 8004ef2:	f000 ffa3 	bl	8005e3c <__mcmp>
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	f73f adb8 	bgt.w	8004a6c <_dtoa_r+0x4cc>
 8004efc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004efe:	9f03      	ldr	r7, [sp, #12]
 8004f00:	ea6f 0a03 	mvn.w	sl, r3
 8004f04:	f04f 0800 	mov.w	r8, #0
 8004f08:	4621      	mov	r1, r4
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	f000 fd0e 	bl	800592c <_Bfree>
 8004f10:	2e00      	cmp	r6, #0
 8004f12:	f43f aea7 	beq.w	8004c64 <_dtoa_r+0x6c4>
 8004f16:	f1b8 0f00 	cmp.w	r8, #0
 8004f1a:	d005      	beq.n	8004f28 <_dtoa_r+0x988>
 8004f1c:	45b0      	cmp	r8, r6
 8004f1e:	d003      	beq.n	8004f28 <_dtoa_r+0x988>
 8004f20:	4641      	mov	r1, r8
 8004f22:	4628      	mov	r0, r5
 8004f24:	f000 fd02 	bl	800592c <_Bfree>
 8004f28:	4631      	mov	r1, r6
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	f000 fcfe 	bl	800592c <_Bfree>
 8004f30:	e698      	b.n	8004c64 <_dtoa_r+0x6c4>
 8004f32:	2400      	movs	r4, #0
 8004f34:	4626      	mov	r6, r4
 8004f36:	e7e1      	b.n	8004efc <_dtoa_r+0x95c>
 8004f38:	46c2      	mov	sl, r8
 8004f3a:	4626      	mov	r6, r4
 8004f3c:	e596      	b.n	8004a6c <_dtoa_r+0x4cc>
 8004f3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 80fd 	beq.w	8005144 <_dtoa_r+0xba4>
 8004f4a:	2f00      	cmp	r7, #0
 8004f4c:	dd05      	ble.n	8004f5a <_dtoa_r+0x9ba>
 8004f4e:	4631      	mov	r1, r6
 8004f50:	463a      	mov	r2, r7
 8004f52:	4628      	mov	r0, r5
 8004f54:	f000 ff02 	bl	8005d5c <__lshift>
 8004f58:	4606      	mov	r6, r0
 8004f5a:	f1b8 0f00 	cmp.w	r8, #0
 8004f5e:	d05c      	beq.n	800501a <_dtoa_r+0xa7a>
 8004f60:	6871      	ldr	r1, [r6, #4]
 8004f62:	4628      	mov	r0, r5
 8004f64:	f000 fca2 	bl	80058ac <_Balloc>
 8004f68:	4607      	mov	r7, r0
 8004f6a:	b928      	cbnz	r0, 8004f78 <_dtoa_r+0x9d8>
 8004f6c:	4b80      	ldr	r3, [pc, #512]	; (8005170 <_dtoa_r+0xbd0>)
 8004f6e:	4602      	mov	r2, r0
 8004f70:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004f74:	f7ff bb28 	b.w	80045c8 <_dtoa_r+0x28>
 8004f78:	6932      	ldr	r2, [r6, #16]
 8004f7a:	3202      	adds	r2, #2
 8004f7c:	0092      	lsls	r2, r2, #2
 8004f7e:	f106 010c 	add.w	r1, r6, #12
 8004f82:	300c      	adds	r0, #12
 8004f84:	f000 fc84 	bl	8005890 <memcpy>
 8004f88:	2201      	movs	r2, #1
 8004f8a:	4639      	mov	r1, r7
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	f000 fee5 	bl	8005d5c <__lshift>
 8004f92:	9b03      	ldr	r3, [sp, #12]
 8004f94:	3301      	adds	r3, #1
 8004f96:	9308      	str	r3, [sp, #32]
 8004f98:	9b03      	ldr	r3, [sp, #12]
 8004f9a:	444b      	add	r3, r9
 8004f9c:	930a      	str	r3, [sp, #40]	; 0x28
 8004f9e:	9b04      	ldr	r3, [sp, #16]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	46b0      	mov	r8, r6
 8004fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8004fa8:	4606      	mov	r6, r0
 8004faa:	9b08      	ldr	r3, [sp, #32]
 8004fac:	4621      	mov	r1, r4
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	4658      	mov	r0, fp
 8004fb2:	9304      	str	r3, [sp, #16]
 8004fb4:	f7ff fa6c 	bl	8004490 <quorem>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	3330      	adds	r3, #48	; 0x30
 8004fbc:	9006      	str	r0, [sp, #24]
 8004fbe:	4641      	mov	r1, r8
 8004fc0:	4658      	mov	r0, fp
 8004fc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fc4:	f000 ff3a 	bl	8005e3c <__mcmp>
 8004fc8:	4632      	mov	r2, r6
 8004fca:	4681      	mov	r9, r0
 8004fcc:	4621      	mov	r1, r4
 8004fce:	4628      	mov	r0, r5
 8004fd0:	f000 ff50 	bl	8005e74 <__mdiff>
 8004fd4:	68c2      	ldr	r2, [r0, #12]
 8004fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fd8:	4607      	mov	r7, r0
 8004fda:	bb02      	cbnz	r2, 800501e <_dtoa_r+0xa7e>
 8004fdc:	4601      	mov	r1, r0
 8004fde:	4658      	mov	r0, fp
 8004fe0:	f000 ff2c 	bl	8005e3c <__mcmp>
 8004fe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	4639      	mov	r1, r7
 8004fea:	4628      	mov	r0, r5
 8004fec:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004ff0:	f000 fc9c 	bl	800592c <_Bfree>
 8004ff4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ff6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ff8:	9f08      	ldr	r7, [sp, #32]
 8004ffa:	ea43 0102 	orr.w	r1, r3, r2
 8004ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005000:	430b      	orrs	r3, r1
 8005002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005004:	d10d      	bne.n	8005022 <_dtoa_r+0xa82>
 8005006:	2b39      	cmp	r3, #57	; 0x39
 8005008:	d029      	beq.n	800505e <_dtoa_r+0xabe>
 800500a:	f1b9 0f00 	cmp.w	r9, #0
 800500e:	dd01      	ble.n	8005014 <_dtoa_r+0xa74>
 8005010:	9b06      	ldr	r3, [sp, #24]
 8005012:	3331      	adds	r3, #49	; 0x31
 8005014:	9a04      	ldr	r2, [sp, #16]
 8005016:	7013      	strb	r3, [r2, #0]
 8005018:	e776      	b.n	8004f08 <_dtoa_r+0x968>
 800501a:	4630      	mov	r0, r6
 800501c:	e7b9      	b.n	8004f92 <_dtoa_r+0x9f2>
 800501e:	2201      	movs	r2, #1
 8005020:	e7e2      	b.n	8004fe8 <_dtoa_r+0xa48>
 8005022:	f1b9 0f00 	cmp.w	r9, #0
 8005026:	db06      	blt.n	8005036 <_dtoa_r+0xa96>
 8005028:	9922      	ldr	r1, [sp, #136]	; 0x88
 800502a:	ea41 0909 	orr.w	r9, r1, r9
 800502e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005030:	ea59 0101 	orrs.w	r1, r9, r1
 8005034:	d120      	bne.n	8005078 <_dtoa_r+0xad8>
 8005036:	2a00      	cmp	r2, #0
 8005038:	ddec      	ble.n	8005014 <_dtoa_r+0xa74>
 800503a:	4659      	mov	r1, fp
 800503c:	2201      	movs	r2, #1
 800503e:	4628      	mov	r0, r5
 8005040:	9308      	str	r3, [sp, #32]
 8005042:	f000 fe8b 	bl	8005d5c <__lshift>
 8005046:	4621      	mov	r1, r4
 8005048:	4683      	mov	fp, r0
 800504a:	f000 fef7 	bl	8005e3c <__mcmp>
 800504e:	2800      	cmp	r0, #0
 8005050:	9b08      	ldr	r3, [sp, #32]
 8005052:	dc02      	bgt.n	800505a <_dtoa_r+0xaba>
 8005054:	d1de      	bne.n	8005014 <_dtoa_r+0xa74>
 8005056:	07da      	lsls	r2, r3, #31
 8005058:	d5dc      	bpl.n	8005014 <_dtoa_r+0xa74>
 800505a:	2b39      	cmp	r3, #57	; 0x39
 800505c:	d1d8      	bne.n	8005010 <_dtoa_r+0xa70>
 800505e:	9a04      	ldr	r2, [sp, #16]
 8005060:	2339      	movs	r3, #57	; 0x39
 8005062:	7013      	strb	r3, [r2, #0]
 8005064:	463b      	mov	r3, r7
 8005066:	461f      	mov	r7, r3
 8005068:	3b01      	subs	r3, #1
 800506a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800506e:	2a39      	cmp	r2, #57	; 0x39
 8005070:	d050      	beq.n	8005114 <_dtoa_r+0xb74>
 8005072:	3201      	adds	r2, #1
 8005074:	701a      	strb	r2, [r3, #0]
 8005076:	e747      	b.n	8004f08 <_dtoa_r+0x968>
 8005078:	2a00      	cmp	r2, #0
 800507a:	dd03      	ble.n	8005084 <_dtoa_r+0xae4>
 800507c:	2b39      	cmp	r3, #57	; 0x39
 800507e:	d0ee      	beq.n	800505e <_dtoa_r+0xabe>
 8005080:	3301      	adds	r3, #1
 8005082:	e7c7      	b.n	8005014 <_dtoa_r+0xa74>
 8005084:	9a08      	ldr	r2, [sp, #32]
 8005086:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005088:	f802 3c01 	strb.w	r3, [r2, #-1]
 800508c:	428a      	cmp	r2, r1
 800508e:	d02a      	beq.n	80050e6 <_dtoa_r+0xb46>
 8005090:	4659      	mov	r1, fp
 8005092:	2300      	movs	r3, #0
 8005094:	220a      	movs	r2, #10
 8005096:	4628      	mov	r0, r5
 8005098:	f000 fc6a 	bl	8005970 <__multadd>
 800509c:	45b0      	cmp	r8, r6
 800509e:	4683      	mov	fp, r0
 80050a0:	f04f 0300 	mov.w	r3, #0
 80050a4:	f04f 020a 	mov.w	r2, #10
 80050a8:	4641      	mov	r1, r8
 80050aa:	4628      	mov	r0, r5
 80050ac:	d107      	bne.n	80050be <_dtoa_r+0xb1e>
 80050ae:	f000 fc5f 	bl	8005970 <__multadd>
 80050b2:	4680      	mov	r8, r0
 80050b4:	4606      	mov	r6, r0
 80050b6:	9b08      	ldr	r3, [sp, #32]
 80050b8:	3301      	adds	r3, #1
 80050ba:	9308      	str	r3, [sp, #32]
 80050bc:	e775      	b.n	8004faa <_dtoa_r+0xa0a>
 80050be:	f000 fc57 	bl	8005970 <__multadd>
 80050c2:	4631      	mov	r1, r6
 80050c4:	4680      	mov	r8, r0
 80050c6:	2300      	movs	r3, #0
 80050c8:	220a      	movs	r2, #10
 80050ca:	4628      	mov	r0, r5
 80050cc:	f000 fc50 	bl	8005970 <__multadd>
 80050d0:	4606      	mov	r6, r0
 80050d2:	e7f0      	b.n	80050b6 <_dtoa_r+0xb16>
 80050d4:	f1b9 0f00 	cmp.w	r9, #0
 80050d8:	9a03      	ldr	r2, [sp, #12]
 80050da:	bfcc      	ite	gt
 80050dc:	464f      	movgt	r7, r9
 80050de:	2701      	movle	r7, #1
 80050e0:	4417      	add	r7, r2
 80050e2:	f04f 0800 	mov.w	r8, #0
 80050e6:	4659      	mov	r1, fp
 80050e8:	2201      	movs	r2, #1
 80050ea:	4628      	mov	r0, r5
 80050ec:	9308      	str	r3, [sp, #32]
 80050ee:	f000 fe35 	bl	8005d5c <__lshift>
 80050f2:	4621      	mov	r1, r4
 80050f4:	4683      	mov	fp, r0
 80050f6:	f000 fea1 	bl	8005e3c <__mcmp>
 80050fa:	2800      	cmp	r0, #0
 80050fc:	dcb2      	bgt.n	8005064 <_dtoa_r+0xac4>
 80050fe:	d102      	bne.n	8005106 <_dtoa_r+0xb66>
 8005100:	9b08      	ldr	r3, [sp, #32]
 8005102:	07db      	lsls	r3, r3, #31
 8005104:	d4ae      	bmi.n	8005064 <_dtoa_r+0xac4>
 8005106:	463b      	mov	r3, r7
 8005108:	461f      	mov	r7, r3
 800510a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800510e:	2a30      	cmp	r2, #48	; 0x30
 8005110:	d0fa      	beq.n	8005108 <_dtoa_r+0xb68>
 8005112:	e6f9      	b.n	8004f08 <_dtoa_r+0x968>
 8005114:	9a03      	ldr	r2, [sp, #12]
 8005116:	429a      	cmp	r2, r3
 8005118:	d1a5      	bne.n	8005066 <_dtoa_r+0xac6>
 800511a:	f10a 0a01 	add.w	sl, sl, #1
 800511e:	2331      	movs	r3, #49	; 0x31
 8005120:	e779      	b.n	8005016 <_dtoa_r+0xa76>
 8005122:	4b14      	ldr	r3, [pc, #80]	; (8005174 <_dtoa_r+0xbd4>)
 8005124:	f7ff baa7 	b.w	8004676 <_dtoa_r+0xd6>
 8005128:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800512a:	2b00      	cmp	r3, #0
 800512c:	f47f aa80 	bne.w	8004630 <_dtoa_r+0x90>
 8005130:	4b11      	ldr	r3, [pc, #68]	; (8005178 <_dtoa_r+0xbd8>)
 8005132:	f7ff baa0 	b.w	8004676 <_dtoa_r+0xd6>
 8005136:	f1b9 0f00 	cmp.w	r9, #0
 800513a:	dc03      	bgt.n	8005144 <_dtoa_r+0xba4>
 800513c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800513e:	2b02      	cmp	r3, #2
 8005140:	f73f aecb 	bgt.w	8004eda <_dtoa_r+0x93a>
 8005144:	9f03      	ldr	r7, [sp, #12]
 8005146:	4621      	mov	r1, r4
 8005148:	4658      	mov	r0, fp
 800514a:	f7ff f9a1 	bl	8004490 <quorem>
 800514e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005152:	f807 3b01 	strb.w	r3, [r7], #1
 8005156:	9a03      	ldr	r2, [sp, #12]
 8005158:	1aba      	subs	r2, r7, r2
 800515a:	4591      	cmp	r9, r2
 800515c:	ddba      	ble.n	80050d4 <_dtoa_r+0xb34>
 800515e:	4659      	mov	r1, fp
 8005160:	2300      	movs	r3, #0
 8005162:	220a      	movs	r2, #10
 8005164:	4628      	mov	r0, r5
 8005166:	f000 fc03 	bl	8005970 <__multadd>
 800516a:	4683      	mov	fp, r0
 800516c:	e7eb      	b.n	8005146 <_dtoa_r+0xba6>
 800516e:	bf00      	nop
 8005170:	08007580 	.word	0x08007580
 8005174:	08007380 	.word	0x08007380
 8005178:	08007501 	.word	0x08007501

0800517c <__errno>:
 800517c:	4b01      	ldr	r3, [pc, #4]	; (8005184 <__errno+0x8>)
 800517e:	6818      	ldr	r0, [r3, #0]
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	20000044 	.word	0x20000044

08005188 <rshift>:
 8005188:	6903      	ldr	r3, [r0, #16]
 800518a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800518e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005192:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005196:	f100 0414 	add.w	r4, r0, #20
 800519a:	dd45      	ble.n	8005228 <rshift+0xa0>
 800519c:	f011 011f 	ands.w	r1, r1, #31
 80051a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80051a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80051a8:	d10c      	bne.n	80051c4 <rshift+0x3c>
 80051aa:	f100 0710 	add.w	r7, r0, #16
 80051ae:	4629      	mov	r1, r5
 80051b0:	42b1      	cmp	r1, r6
 80051b2:	d334      	bcc.n	800521e <rshift+0x96>
 80051b4:	1a9b      	subs	r3, r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	1eea      	subs	r2, r5, #3
 80051ba:	4296      	cmp	r6, r2
 80051bc:	bf38      	it	cc
 80051be:	2300      	movcc	r3, #0
 80051c0:	4423      	add	r3, r4
 80051c2:	e015      	b.n	80051f0 <rshift+0x68>
 80051c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80051c8:	f1c1 0820 	rsb	r8, r1, #32
 80051cc:	40cf      	lsrs	r7, r1
 80051ce:	f105 0e04 	add.w	lr, r5, #4
 80051d2:	46a1      	mov	r9, r4
 80051d4:	4576      	cmp	r6, lr
 80051d6:	46f4      	mov	ip, lr
 80051d8:	d815      	bhi.n	8005206 <rshift+0x7e>
 80051da:	1a9a      	subs	r2, r3, r2
 80051dc:	0092      	lsls	r2, r2, #2
 80051de:	3a04      	subs	r2, #4
 80051e0:	3501      	adds	r5, #1
 80051e2:	42ae      	cmp	r6, r5
 80051e4:	bf38      	it	cc
 80051e6:	2200      	movcc	r2, #0
 80051e8:	18a3      	adds	r3, r4, r2
 80051ea:	50a7      	str	r7, [r4, r2]
 80051ec:	b107      	cbz	r7, 80051f0 <rshift+0x68>
 80051ee:	3304      	adds	r3, #4
 80051f0:	1b1a      	subs	r2, r3, r4
 80051f2:	42a3      	cmp	r3, r4
 80051f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80051f8:	bf08      	it	eq
 80051fa:	2300      	moveq	r3, #0
 80051fc:	6102      	str	r2, [r0, #16]
 80051fe:	bf08      	it	eq
 8005200:	6143      	streq	r3, [r0, #20]
 8005202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005206:	f8dc c000 	ldr.w	ip, [ip]
 800520a:	fa0c fc08 	lsl.w	ip, ip, r8
 800520e:	ea4c 0707 	orr.w	r7, ip, r7
 8005212:	f849 7b04 	str.w	r7, [r9], #4
 8005216:	f85e 7b04 	ldr.w	r7, [lr], #4
 800521a:	40cf      	lsrs	r7, r1
 800521c:	e7da      	b.n	80051d4 <rshift+0x4c>
 800521e:	f851 cb04 	ldr.w	ip, [r1], #4
 8005222:	f847 cf04 	str.w	ip, [r7, #4]!
 8005226:	e7c3      	b.n	80051b0 <rshift+0x28>
 8005228:	4623      	mov	r3, r4
 800522a:	e7e1      	b.n	80051f0 <rshift+0x68>

0800522c <__hexdig_fun>:
 800522c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005230:	2b09      	cmp	r3, #9
 8005232:	d802      	bhi.n	800523a <__hexdig_fun+0xe>
 8005234:	3820      	subs	r0, #32
 8005236:	b2c0      	uxtb	r0, r0
 8005238:	4770      	bx	lr
 800523a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800523e:	2b05      	cmp	r3, #5
 8005240:	d801      	bhi.n	8005246 <__hexdig_fun+0x1a>
 8005242:	3847      	subs	r0, #71	; 0x47
 8005244:	e7f7      	b.n	8005236 <__hexdig_fun+0xa>
 8005246:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800524a:	2b05      	cmp	r3, #5
 800524c:	d801      	bhi.n	8005252 <__hexdig_fun+0x26>
 800524e:	3827      	subs	r0, #39	; 0x27
 8005250:	e7f1      	b.n	8005236 <__hexdig_fun+0xa>
 8005252:	2000      	movs	r0, #0
 8005254:	4770      	bx	lr
	...

08005258 <__gethex>:
 8005258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525c:	b08b      	sub	sp, #44	; 0x2c
 800525e:	468b      	mov	fp, r1
 8005260:	9305      	str	r3, [sp, #20]
 8005262:	4bb2      	ldr	r3, [pc, #712]	; (800552c <__gethex+0x2d4>)
 8005264:	9002      	str	r0, [sp, #8]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	9303      	str	r3, [sp, #12]
 800526a:	4618      	mov	r0, r3
 800526c:	4690      	mov	r8, r2
 800526e:	f7fa ffb7 	bl	80001e0 <strlen>
 8005272:	9b03      	ldr	r3, [sp, #12]
 8005274:	f8db 2000 	ldr.w	r2, [fp]
 8005278:	4403      	add	r3, r0
 800527a:	4682      	mov	sl, r0
 800527c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005280:	9306      	str	r3, [sp, #24]
 8005282:	1c93      	adds	r3, r2, #2
 8005284:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005288:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800528c:	32fe      	adds	r2, #254	; 0xfe
 800528e:	18d1      	adds	r1, r2, r3
 8005290:	461f      	mov	r7, r3
 8005292:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005296:	9101      	str	r1, [sp, #4]
 8005298:	2830      	cmp	r0, #48	; 0x30
 800529a:	d0f8      	beq.n	800528e <__gethex+0x36>
 800529c:	f7ff ffc6 	bl	800522c <__hexdig_fun>
 80052a0:	4604      	mov	r4, r0
 80052a2:	2800      	cmp	r0, #0
 80052a4:	d13a      	bne.n	800531c <__gethex+0xc4>
 80052a6:	9903      	ldr	r1, [sp, #12]
 80052a8:	4652      	mov	r2, sl
 80052aa:	4638      	mov	r0, r7
 80052ac:	f001 fa16 	bl	80066dc <strncmp>
 80052b0:	4605      	mov	r5, r0
 80052b2:	2800      	cmp	r0, #0
 80052b4:	d166      	bne.n	8005384 <__gethex+0x12c>
 80052b6:	f817 000a 	ldrb.w	r0, [r7, sl]
 80052ba:	eb07 060a 	add.w	r6, r7, sl
 80052be:	f7ff ffb5 	bl	800522c <__hexdig_fun>
 80052c2:	2800      	cmp	r0, #0
 80052c4:	d060      	beq.n	8005388 <__gethex+0x130>
 80052c6:	4633      	mov	r3, r6
 80052c8:	7818      	ldrb	r0, [r3, #0]
 80052ca:	2830      	cmp	r0, #48	; 0x30
 80052cc:	461f      	mov	r7, r3
 80052ce:	f103 0301 	add.w	r3, r3, #1
 80052d2:	d0f9      	beq.n	80052c8 <__gethex+0x70>
 80052d4:	f7ff ffaa 	bl	800522c <__hexdig_fun>
 80052d8:	2301      	movs	r3, #1
 80052da:	fab0 f480 	clz	r4, r0
 80052de:	0964      	lsrs	r4, r4, #5
 80052e0:	4635      	mov	r5, r6
 80052e2:	9301      	str	r3, [sp, #4]
 80052e4:	463a      	mov	r2, r7
 80052e6:	4616      	mov	r6, r2
 80052e8:	3201      	adds	r2, #1
 80052ea:	7830      	ldrb	r0, [r6, #0]
 80052ec:	f7ff ff9e 	bl	800522c <__hexdig_fun>
 80052f0:	2800      	cmp	r0, #0
 80052f2:	d1f8      	bne.n	80052e6 <__gethex+0x8e>
 80052f4:	9903      	ldr	r1, [sp, #12]
 80052f6:	4652      	mov	r2, sl
 80052f8:	4630      	mov	r0, r6
 80052fa:	f001 f9ef 	bl	80066dc <strncmp>
 80052fe:	b980      	cbnz	r0, 8005322 <__gethex+0xca>
 8005300:	b94d      	cbnz	r5, 8005316 <__gethex+0xbe>
 8005302:	eb06 050a 	add.w	r5, r6, sl
 8005306:	462a      	mov	r2, r5
 8005308:	4616      	mov	r6, r2
 800530a:	3201      	adds	r2, #1
 800530c:	7830      	ldrb	r0, [r6, #0]
 800530e:	f7ff ff8d 	bl	800522c <__hexdig_fun>
 8005312:	2800      	cmp	r0, #0
 8005314:	d1f8      	bne.n	8005308 <__gethex+0xb0>
 8005316:	1bad      	subs	r5, r5, r6
 8005318:	00ad      	lsls	r5, r5, #2
 800531a:	e004      	b.n	8005326 <__gethex+0xce>
 800531c:	2400      	movs	r4, #0
 800531e:	4625      	mov	r5, r4
 8005320:	e7e0      	b.n	80052e4 <__gethex+0x8c>
 8005322:	2d00      	cmp	r5, #0
 8005324:	d1f7      	bne.n	8005316 <__gethex+0xbe>
 8005326:	7833      	ldrb	r3, [r6, #0]
 8005328:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800532c:	2b50      	cmp	r3, #80	; 0x50
 800532e:	d139      	bne.n	80053a4 <__gethex+0x14c>
 8005330:	7873      	ldrb	r3, [r6, #1]
 8005332:	2b2b      	cmp	r3, #43	; 0x2b
 8005334:	d02a      	beq.n	800538c <__gethex+0x134>
 8005336:	2b2d      	cmp	r3, #45	; 0x2d
 8005338:	d02c      	beq.n	8005394 <__gethex+0x13c>
 800533a:	1c71      	adds	r1, r6, #1
 800533c:	f04f 0900 	mov.w	r9, #0
 8005340:	7808      	ldrb	r0, [r1, #0]
 8005342:	f7ff ff73 	bl	800522c <__hexdig_fun>
 8005346:	1e43      	subs	r3, r0, #1
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b18      	cmp	r3, #24
 800534c:	d82a      	bhi.n	80053a4 <__gethex+0x14c>
 800534e:	f1a0 0210 	sub.w	r2, r0, #16
 8005352:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005356:	f7ff ff69 	bl	800522c <__hexdig_fun>
 800535a:	1e43      	subs	r3, r0, #1
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b18      	cmp	r3, #24
 8005360:	d91b      	bls.n	800539a <__gethex+0x142>
 8005362:	f1b9 0f00 	cmp.w	r9, #0
 8005366:	d000      	beq.n	800536a <__gethex+0x112>
 8005368:	4252      	negs	r2, r2
 800536a:	4415      	add	r5, r2
 800536c:	f8cb 1000 	str.w	r1, [fp]
 8005370:	b1d4      	cbz	r4, 80053a8 <__gethex+0x150>
 8005372:	9b01      	ldr	r3, [sp, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	bf14      	ite	ne
 8005378:	2700      	movne	r7, #0
 800537a:	2706      	moveq	r7, #6
 800537c:	4638      	mov	r0, r7
 800537e:	b00b      	add	sp, #44	; 0x2c
 8005380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005384:	463e      	mov	r6, r7
 8005386:	4625      	mov	r5, r4
 8005388:	2401      	movs	r4, #1
 800538a:	e7cc      	b.n	8005326 <__gethex+0xce>
 800538c:	f04f 0900 	mov.w	r9, #0
 8005390:	1cb1      	adds	r1, r6, #2
 8005392:	e7d5      	b.n	8005340 <__gethex+0xe8>
 8005394:	f04f 0901 	mov.w	r9, #1
 8005398:	e7fa      	b.n	8005390 <__gethex+0x138>
 800539a:	230a      	movs	r3, #10
 800539c:	fb03 0202 	mla	r2, r3, r2, r0
 80053a0:	3a10      	subs	r2, #16
 80053a2:	e7d6      	b.n	8005352 <__gethex+0xfa>
 80053a4:	4631      	mov	r1, r6
 80053a6:	e7e1      	b.n	800536c <__gethex+0x114>
 80053a8:	1bf3      	subs	r3, r6, r7
 80053aa:	3b01      	subs	r3, #1
 80053ac:	4621      	mov	r1, r4
 80053ae:	2b07      	cmp	r3, #7
 80053b0:	dc0a      	bgt.n	80053c8 <__gethex+0x170>
 80053b2:	9802      	ldr	r0, [sp, #8]
 80053b4:	f000 fa7a 	bl	80058ac <_Balloc>
 80053b8:	4604      	mov	r4, r0
 80053ba:	b940      	cbnz	r0, 80053ce <__gethex+0x176>
 80053bc:	4b5c      	ldr	r3, [pc, #368]	; (8005530 <__gethex+0x2d8>)
 80053be:	4602      	mov	r2, r0
 80053c0:	21de      	movs	r1, #222	; 0xde
 80053c2:	485c      	ldr	r0, [pc, #368]	; (8005534 <__gethex+0x2dc>)
 80053c4:	f001 f9ac 	bl	8006720 <__assert_func>
 80053c8:	3101      	adds	r1, #1
 80053ca:	105b      	asrs	r3, r3, #1
 80053cc:	e7ef      	b.n	80053ae <__gethex+0x156>
 80053ce:	f100 0914 	add.w	r9, r0, #20
 80053d2:	f04f 0b00 	mov.w	fp, #0
 80053d6:	f1ca 0301 	rsb	r3, sl, #1
 80053da:	f8cd 9010 	str.w	r9, [sp, #16]
 80053de:	f8cd b004 	str.w	fp, [sp, #4]
 80053e2:	9308      	str	r3, [sp, #32]
 80053e4:	42b7      	cmp	r7, r6
 80053e6:	d33f      	bcc.n	8005468 <__gethex+0x210>
 80053e8:	9f04      	ldr	r7, [sp, #16]
 80053ea:	9b01      	ldr	r3, [sp, #4]
 80053ec:	f847 3b04 	str.w	r3, [r7], #4
 80053f0:	eba7 0709 	sub.w	r7, r7, r9
 80053f4:	10bf      	asrs	r7, r7, #2
 80053f6:	6127      	str	r7, [r4, #16]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 fb49 	bl	8005a90 <__hi0bits>
 80053fe:	017f      	lsls	r7, r7, #5
 8005400:	f8d8 6000 	ldr.w	r6, [r8]
 8005404:	1a3f      	subs	r7, r7, r0
 8005406:	42b7      	cmp	r7, r6
 8005408:	dd62      	ble.n	80054d0 <__gethex+0x278>
 800540a:	1bbf      	subs	r7, r7, r6
 800540c:	4639      	mov	r1, r7
 800540e:	4620      	mov	r0, r4
 8005410:	f000 fedf 	bl	80061d2 <__any_on>
 8005414:	4682      	mov	sl, r0
 8005416:	b1a8      	cbz	r0, 8005444 <__gethex+0x1ec>
 8005418:	1e7b      	subs	r3, r7, #1
 800541a:	1159      	asrs	r1, r3, #5
 800541c:	f003 021f 	and.w	r2, r3, #31
 8005420:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005424:	f04f 0a01 	mov.w	sl, #1
 8005428:	fa0a f202 	lsl.w	r2, sl, r2
 800542c:	420a      	tst	r2, r1
 800542e:	d009      	beq.n	8005444 <__gethex+0x1ec>
 8005430:	4553      	cmp	r3, sl
 8005432:	dd05      	ble.n	8005440 <__gethex+0x1e8>
 8005434:	1eb9      	subs	r1, r7, #2
 8005436:	4620      	mov	r0, r4
 8005438:	f000 fecb 	bl	80061d2 <__any_on>
 800543c:	2800      	cmp	r0, #0
 800543e:	d144      	bne.n	80054ca <__gethex+0x272>
 8005440:	f04f 0a02 	mov.w	sl, #2
 8005444:	4639      	mov	r1, r7
 8005446:	4620      	mov	r0, r4
 8005448:	f7ff fe9e 	bl	8005188 <rshift>
 800544c:	443d      	add	r5, r7
 800544e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005452:	42ab      	cmp	r3, r5
 8005454:	da4a      	bge.n	80054ec <__gethex+0x294>
 8005456:	9802      	ldr	r0, [sp, #8]
 8005458:	4621      	mov	r1, r4
 800545a:	f000 fa67 	bl	800592c <_Bfree>
 800545e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005460:	2300      	movs	r3, #0
 8005462:	6013      	str	r3, [r2, #0]
 8005464:	27a3      	movs	r7, #163	; 0xa3
 8005466:	e789      	b.n	800537c <__gethex+0x124>
 8005468:	1e73      	subs	r3, r6, #1
 800546a:	9a06      	ldr	r2, [sp, #24]
 800546c:	9307      	str	r3, [sp, #28]
 800546e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005472:	4293      	cmp	r3, r2
 8005474:	d019      	beq.n	80054aa <__gethex+0x252>
 8005476:	f1bb 0f20 	cmp.w	fp, #32
 800547a:	d107      	bne.n	800548c <__gethex+0x234>
 800547c:	9b04      	ldr	r3, [sp, #16]
 800547e:	9a01      	ldr	r2, [sp, #4]
 8005480:	f843 2b04 	str.w	r2, [r3], #4
 8005484:	9304      	str	r3, [sp, #16]
 8005486:	2300      	movs	r3, #0
 8005488:	9301      	str	r3, [sp, #4]
 800548a:	469b      	mov	fp, r3
 800548c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005490:	f7ff fecc 	bl	800522c <__hexdig_fun>
 8005494:	9b01      	ldr	r3, [sp, #4]
 8005496:	f000 000f 	and.w	r0, r0, #15
 800549a:	fa00 f00b 	lsl.w	r0, r0, fp
 800549e:	4303      	orrs	r3, r0
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	f10b 0b04 	add.w	fp, fp, #4
 80054a6:	9b07      	ldr	r3, [sp, #28]
 80054a8:	e00d      	b.n	80054c6 <__gethex+0x26e>
 80054aa:	9a08      	ldr	r2, [sp, #32]
 80054ac:	1e73      	subs	r3, r6, #1
 80054ae:	4413      	add	r3, r2
 80054b0:	42bb      	cmp	r3, r7
 80054b2:	d3e0      	bcc.n	8005476 <__gethex+0x21e>
 80054b4:	4618      	mov	r0, r3
 80054b6:	9903      	ldr	r1, [sp, #12]
 80054b8:	9309      	str	r3, [sp, #36]	; 0x24
 80054ba:	4652      	mov	r2, sl
 80054bc:	f001 f90e 	bl	80066dc <strncmp>
 80054c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054c2:	2800      	cmp	r0, #0
 80054c4:	d1d7      	bne.n	8005476 <__gethex+0x21e>
 80054c6:	461e      	mov	r6, r3
 80054c8:	e78c      	b.n	80053e4 <__gethex+0x18c>
 80054ca:	f04f 0a03 	mov.w	sl, #3
 80054ce:	e7b9      	b.n	8005444 <__gethex+0x1ec>
 80054d0:	da09      	bge.n	80054e6 <__gethex+0x28e>
 80054d2:	1bf7      	subs	r7, r6, r7
 80054d4:	4621      	mov	r1, r4
 80054d6:	9802      	ldr	r0, [sp, #8]
 80054d8:	463a      	mov	r2, r7
 80054da:	f000 fc3f 	bl	8005d5c <__lshift>
 80054de:	1bed      	subs	r5, r5, r7
 80054e0:	4604      	mov	r4, r0
 80054e2:	f100 0914 	add.w	r9, r0, #20
 80054e6:	f04f 0a00 	mov.w	sl, #0
 80054ea:	e7b0      	b.n	800544e <__gethex+0x1f6>
 80054ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80054f0:	42a8      	cmp	r0, r5
 80054f2:	dd71      	ble.n	80055d8 <__gethex+0x380>
 80054f4:	1b45      	subs	r5, r0, r5
 80054f6:	42ae      	cmp	r6, r5
 80054f8:	dc35      	bgt.n	8005566 <__gethex+0x30e>
 80054fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d029      	beq.n	8005556 <__gethex+0x2fe>
 8005502:	2b03      	cmp	r3, #3
 8005504:	d02b      	beq.n	800555e <__gethex+0x306>
 8005506:	2b01      	cmp	r3, #1
 8005508:	d11c      	bne.n	8005544 <__gethex+0x2ec>
 800550a:	42ae      	cmp	r6, r5
 800550c:	d11a      	bne.n	8005544 <__gethex+0x2ec>
 800550e:	2e01      	cmp	r6, #1
 8005510:	d112      	bne.n	8005538 <__gethex+0x2e0>
 8005512:	9a05      	ldr	r2, [sp, #20]
 8005514:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	2301      	movs	r3, #1
 800551c:	6123      	str	r3, [r4, #16]
 800551e:	f8c9 3000 	str.w	r3, [r9]
 8005522:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005524:	2762      	movs	r7, #98	; 0x62
 8005526:	601c      	str	r4, [r3, #0]
 8005528:	e728      	b.n	800537c <__gethex+0x124>
 800552a:	bf00      	nop
 800552c:	080075f8 	.word	0x080075f8
 8005530:	08007580 	.word	0x08007580
 8005534:	08007591 	.word	0x08007591
 8005538:	1e71      	subs	r1, r6, #1
 800553a:	4620      	mov	r0, r4
 800553c:	f000 fe49 	bl	80061d2 <__any_on>
 8005540:	2800      	cmp	r0, #0
 8005542:	d1e6      	bne.n	8005512 <__gethex+0x2ba>
 8005544:	9802      	ldr	r0, [sp, #8]
 8005546:	4621      	mov	r1, r4
 8005548:	f000 f9f0 	bl	800592c <_Bfree>
 800554c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800554e:	2300      	movs	r3, #0
 8005550:	6013      	str	r3, [r2, #0]
 8005552:	2750      	movs	r7, #80	; 0x50
 8005554:	e712      	b.n	800537c <__gethex+0x124>
 8005556:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1f3      	bne.n	8005544 <__gethex+0x2ec>
 800555c:	e7d9      	b.n	8005512 <__gethex+0x2ba>
 800555e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1d6      	bne.n	8005512 <__gethex+0x2ba>
 8005564:	e7ee      	b.n	8005544 <__gethex+0x2ec>
 8005566:	1e6f      	subs	r7, r5, #1
 8005568:	f1ba 0f00 	cmp.w	sl, #0
 800556c:	d131      	bne.n	80055d2 <__gethex+0x37a>
 800556e:	b127      	cbz	r7, 800557a <__gethex+0x322>
 8005570:	4639      	mov	r1, r7
 8005572:	4620      	mov	r0, r4
 8005574:	f000 fe2d 	bl	80061d2 <__any_on>
 8005578:	4682      	mov	sl, r0
 800557a:	117b      	asrs	r3, r7, #5
 800557c:	2101      	movs	r1, #1
 800557e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005582:	f007 071f 	and.w	r7, r7, #31
 8005586:	fa01 f707 	lsl.w	r7, r1, r7
 800558a:	421f      	tst	r7, r3
 800558c:	4629      	mov	r1, r5
 800558e:	4620      	mov	r0, r4
 8005590:	bf18      	it	ne
 8005592:	f04a 0a02 	orrne.w	sl, sl, #2
 8005596:	1b76      	subs	r6, r6, r5
 8005598:	f7ff fdf6 	bl	8005188 <rshift>
 800559c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80055a0:	2702      	movs	r7, #2
 80055a2:	f1ba 0f00 	cmp.w	sl, #0
 80055a6:	d048      	beq.n	800563a <__gethex+0x3e2>
 80055a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d015      	beq.n	80055dc <__gethex+0x384>
 80055b0:	2b03      	cmp	r3, #3
 80055b2:	d017      	beq.n	80055e4 <__gethex+0x38c>
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d109      	bne.n	80055cc <__gethex+0x374>
 80055b8:	f01a 0f02 	tst.w	sl, #2
 80055bc:	d006      	beq.n	80055cc <__gethex+0x374>
 80055be:	f8d9 0000 	ldr.w	r0, [r9]
 80055c2:	ea4a 0a00 	orr.w	sl, sl, r0
 80055c6:	f01a 0f01 	tst.w	sl, #1
 80055ca:	d10e      	bne.n	80055ea <__gethex+0x392>
 80055cc:	f047 0710 	orr.w	r7, r7, #16
 80055d0:	e033      	b.n	800563a <__gethex+0x3e2>
 80055d2:	f04f 0a01 	mov.w	sl, #1
 80055d6:	e7d0      	b.n	800557a <__gethex+0x322>
 80055d8:	2701      	movs	r7, #1
 80055da:	e7e2      	b.n	80055a2 <__gethex+0x34a>
 80055dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055de:	f1c3 0301 	rsb	r3, r3, #1
 80055e2:	9315      	str	r3, [sp, #84]	; 0x54
 80055e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0f0      	beq.n	80055cc <__gethex+0x374>
 80055ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80055ee:	f104 0314 	add.w	r3, r4, #20
 80055f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80055f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80055fa:	f04f 0c00 	mov.w	ip, #0
 80055fe:	4618      	mov	r0, r3
 8005600:	f853 2b04 	ldr.w	r2, [r3], #4
 8005604:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8005608:	d01c      	beq.n	8005644 <__gethex+0x3ec>
 800560a:	3201      	adds	r2, #1
 800560c:	6002      	str	r2, [r0, #0]
 800560e:	2f02      	cmp	r7, #2
 8005610:	f104 0314 	add.w	r3, r4, #20
 8005614:	d13d      	bne.n	8005692 <__gethex+0x43a>
 8005616:	f8d8 2000 	ldr.w	r2, [r8]
 800561a:	3a01      	subs	r2, #1
 800561c:	42b2      	cmp	r2, r6
 800561e:	d10a      	bne.n	8005636 <__gethex+0x3de>
 8005620:	1171      	asrs	r1, r6, #5
 8005622:	2201      	movs	r2, #1
 8005624:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005628:	f006 061f 	and.w	r6, r6, #31
 800562c:	fa02 f606 	lsl.w	r6, r2, r6
 8005630:	421e      	tst	r6, r3
 8005632:	bf18      	it	ne
 8005634:	4617      	movne	r7, r2
 8005636:	f047 0720 	orr.w	r7, r7, #32
 800563a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800563c:	601c      	str	r4, [r3, #0]
 800563e:	9b05      	ldr	r3, [sp, #20]
 8005640:	601d      	str	r5, [r3, #0]
 8005642:	e69b      	b.n	800537c <__gethex+0x124>
 8005644:	4299      	cmp	r1, r3
 8005646:	f843 cc04 	str.w	ip, [r3, #-4]
 800564a:	d8d8      	bhi.n	80055fe <__gethex+0x3a6>
 800564c:	68a3      	ldr	r3, [r4, #8]
 800564e:	459b      	cmp	fp, r3
 8005650:	db17      	blt.n	8005682 <__gethex+0x42a>
 8005652:	6861      	ldr	r1, [r4, #4]
 8005654:	9802      	ldr	r0, [sp, #8]
 8005656:	3101      	adds	r1, #1
 8005658:	f000 f928 	bl	80058ac <_Balloc>
 800565c:	4681      	mov	r9, r0
 800565e:	b918      	cbnz	r0, 8005668 <__gethex+0x410>
 8005660:	4b1a      	ldr	r3, [pc, #104]	; (80056cc <__gethex+0x474>)
 8005662:	4602      	mov	r2, r0
 8005664:	2184      	movs	r1, #132	; 0x84
 8005666:	e6ac      	b.n	80053c2 <__gethex+0x16a>
 8005668:	6922      	ldr	r2, [r4, #16]
 800566a:	3202      	adds	r2, #2
 800566c:	f104 010c 	add.w	r1, r4, #12
 8005670:	0092      	lsls	r2, r2, #2
 8005672:	300c      	adds	r0, #12
 8005674:	f000 f90c 	bl	8005890 <memcpy>
 8005678:	4621      	mov	r1, r4
 800567a:	9802      	ldr	r0, [sp, #8]
 800567c:	f000 f956 	bl	800592c <_Bfree>
 8005680:	464c      	mov	r4, r9
 8005682:	6923      	ldr	r3, [r4, #16]
 8005684:	1c5a      	adds	r2, r3, #1
 8005686:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800568a:	6122      	str	r2, [r4, #16]
 800568c:	2201      	movs	r2, #1
 800568e:	615a      	str	r2, [r3, #20]
 8005690:	e7bd      	b.n	800560e <__gethex+0x3b6>
 8005692:	6922      	ldr	r2, [r4, #16]
 8005694:	455a      	cmp	r2, fp
 8005696:	dd0b      	ble.n	80056b0 <__gethex+0x458>
 8005698:	2101      	movs	r1, #1
 800569a:	4620      	mov	r0, r4
 800569c:	f7ff fd74 	bl	8005188 <rshift>
 80056a0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80056a4:	3501      	adds	r5, #1
 80056a6:	42ab      	cmp	r3, r5
 80056a8:	f6ff aed5 	blt.w	8005456 <__gethex+0x1fe>
 80056ac:	2701      	movs	r7, #1
 80056ae:	e7c2      	b.n	8005636 <__gethex+0x3de>
 80056b0:	f016 061f 	ands.w	r6, r6, #31
 80056b4:	d0fa      	beq.n	80056ac <__gethex+0x454>
 80056b6:	4453      	add	r3, sl
 80056b8:	f1c6 0620 	rsb	r6, r6, #32
 80056bc:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80056c0:	f000 f9e6 	bl	8005a90 <__hi0bits>
 80056c4:	42b0      	cmp	r0, r6
 80056c6:	dbe7      	blt.n	8005698 <__gethex+0x440>
 80056c8:	e7f0      	b.n	80056ac <__gethex+0x454>
 80056ca:	bf00      	nop
 80056cc:	08007580 	.word	0x08007580

080056d0 <L_shift>:
 80056d0:	f1c2 0208 	rsb	r2, r2, #8
 80056d4:	0092      	lsls	r2, r2, #2
 80056d6:	b570      	push	{r4, r5, r6, lr}
 80056d8:	f1c2 0620 	rsb	r6, r2, #32
 80056dc:	6843      	ldr	r3, [r0, #4]
 80056de:	6804      	ldr	r4, [r0, #0]
 80056e0:	fa03 f506 	lsl.w	r5, r3, r6
 80056e4:	432c      	orrs	r4, r5
 80056e6:	40d3      	lsrs	r3, r2
 80056e8:	6004      	str	r4, [r0, #0]
 80056ea:	f840 3f04 	str.w	r3, [r0, #4]!
 80056ee:	4288      	cmp	r0, r1
 80056f0:	d3f4      	bcc.n	80056dc <L_shift+0xc>
 80056f2:	bd70      	pop	{r4, r5, r6, pc}

080056f4 <__match>:
 80056f4:	b530      	push	{r4, r5, lr}
 80056f6:	6803      	ldr	r3, [r0, #0]
 80056f8:	3301      	adds	r3, #1
 80056fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056fe:	b914      	cbnz	r4, 8005706 <__match+0x12>
 8005700:	6003      	str	r3, [r0, #0]
 8005702:	2001      	movs	r0, #1
 8005704:	bd30      	pop	{r4, r5, pc}
 8005706:	f813 2b01 	ldrb.w	r2, [r3], #1
 800570a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800570e:	2d19      	cmp	r5, #25
 8005710:	bf98      	it	ls
 8005712:	3220      	addls	r2, #32
 8005714:	42a2      	cmp	r2, r4
 8005716:	d0f0      	beq.n	80056fa <__match+0x6>
 8005718:	2000      	movs	r0, #0
 800571a:	e7f3      	b.n	8005704 <__match+0x10>

0800571c <__hexnan>:
 800571c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005720:	680b      	ldr	r3, [r1, #0]
 8005722:	115e      	asrs	r6, r3, #5
 8005724:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005728:	f013 031f 	ands.w	r3, r3, #31
 800572c:	b087      	sub	sp, #28
 800572e:	bf18      	it	ne
 8005730:	3604      	addne	r6, #4
 8005732:	2500      	movs	r5, #0
 8005734:	1f37      	subs	r7, r6, #4
 8005736:	4690      	mov	r8, r2
 8005738:	6802      	ldr	r2, [r0, #0]
 800573a:	9301      	str	r3, [sp, #4]
 800573c:	4682      	mov	sl, r0
 800573e:	f846 5c04 	str.w	r5, [r6, #-4]
 8005742:	46b9      	mov	r9, r7
 8005744:	463c      	mov	r4, r7
 8005746:	9502      	str	r5, [sp, #8]
 8005748:	46ab      	mov	fp, r5
 800574a:	7851      	ldrb	r1, [r2, #1]
 800574c:	1c53      	adds	r3, r2, #1
 800574e:	9303      	str	r3, [sp, #12]
 8005750:	b341      	cbz	r1, 80057a4 <__hexnan+0x88>
 8005752:	4608      	mov	r0, r1
 8005754:	9205      	str	r2, [sp, #20]
 8005756:	9104      	str	r1, [sp, #16]
 8005758:	f7ff fd68 	bl	800522c <__hexdig_fun>
 800575c:	2800      	cmp	r0, #0
 800575e:	d14f      	bne.n	8005800 <__hexnan+0xe4>
 8005760:	9904      	ldr	r1, [sp, #16]
 8005762:	9a05      	ldr	r2, [sp, #20]
 8005764:	2920      	cmp	r1, #32
 8005766:	d818      	bhi.n	800579a <__hexnan+0x7e>
 8005768:	9b02      	ldr	r3, [sp, #8]
 800576a:	459b      	cmp	fp, r3
 800576c:	dd13      	ble.n	8005796 <__hexnan+0x7a>
 800576e:	454c      	cmp	r4, r9
 8005770:	d206      	bcs.n	8005780 <__hexnan+0x64>
 8005772:	2d07      	cmp	r5, #7
 8005774:	dc04      	bgt.n	8005780 <__hexnan+0x64>
 8005776:	462a      	mov	r2, r5
 8005778:	4649      	mov	r1, r9
 800577a:	4620      	mov	r0, r4
 800577c:	f7ff ffa8 	bl	80056d0 <L_shift>
 8005780:	4544      	cmp	r4, r8
 8005782:	d950      	bls.n	8005826 <__hexnan+0x10a>
 8005784:	2300      	movs	r3, #0
 8005786:	f1a4 0904 	sub.w	r9, r4, #4
 800578a:	f844 3c04 	str.w	r3, [r4, #-4]
 800578e:	f8cd b008 	str.w	fp, [sp, #8]
 8005792:	464c      	mov	r4, r9
 8005794:	461d      	mov	r5, r3
 8005796:	9a03      	ldr	r2, [sp, #12]
 8005798:	e7d7      	b.n	800574a <__hexnan+0x2e>
 800579a:	2929      	cmp	r1, #41	; 0x29
 800579c:	d156      	bne.n	800584c <__hexnan+0x130>
 800579e:	3202      	adds	r2, #2
 80057a0:	f8ca 2000 	str.w	r2, [sl]
 80057a4:	f1bb 0f00 	cmp.w	fp, #0
 80057a8:	d050      	beq.n	800584c <__hexnan+0x130>
 80057aa:	454c      	cmp	r4, r9
 80057ac:	d206      	bcs.n	80057bc <__hexnan+0xa0>
 80057ae:	2d07      	cmp	r5, #7
 80057b0:	dc04      	bgt.n	80057bc <__hexnan+0xa0>
 80057b2:	462a      	mov	r2, r5
 80057b4:	4649      	mov	r1, r9
 80057b6:	4620      	mov	r0, r4
 80057b8:	f7ff ff8a 	bl	80056d0 <L_shift>
 80057bc:	4544      	cmp	r4, r8
 80057be:	d934      	bls.n	800582a <__hexnan+0x10e>
 80057c0:	f1a8 0204 	sub.w	r2, r8, #4
 80057c4:	4623      	mov	r3, r4
 80057c6:	f853 1b04 	ldr.w	r1, [r3], #4
 80057ca:	f842 1f04 	str.w	r1, [r2, #4]!
 80057ce:	429f      	cmp	r7, r3
 80057d0:	d2f9      	bcs.n	80057c6 <__hexnan+0xaa>
 80057d2:	1b3b      	subs	r3, r7, r4
 80057d4:	f023 0303 	bic.w	r3, r3, #3
 80057d8:	3304      	adds	r3, #4
 80057da:	3401      	adds	r4, #1
 80057dc:	3e03      	subs	r6, #3
 80057de:	42b4      	cmp	r4, r6
 80057e0:	bf88      	it	hi
 80057e2:	2304      	movhi	r3, #4
 80057e4:	4443      	add	r3, r8
 80057e6:	2200      	movs	r2, #0
 80057e8:	f843 2b04 	str.w	r2, [r3], #4
 80057ec:	429f      	cmp	r7, r3
 80057ee:	d2fb      	bcs.n	80057e8 <__hexnan+0xcc>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	b91b      	cbnz	r3, 80057fc <__hexnan+0xe0>
 80057f4:	4547      	cmp	r7, r8
 80057f6:	d127      	bne.n	8005848 <__hexnan+0x12c>
 80057f8:	2301      	movs	r3, #1
 80057fa:	603b      	str	r3, [r7, #0]
 80057fc:	2005      	movs	r0, #5
 80057fe:	e026      	b.n	800584e <__hexnan+0x132>
 8005800:	3501      	adds	r5, #1
 8005802:	2d08      	cmp	r5, #8
 8005804:	f10b 0b01 	add.w	fp, fp, #1
 8005808:	dd06      	ble.n	8005818 <__hexnan+0xfc>
 800580a:	4544      	cmp	r4, r8
 800580c:	d9c3      	bls.n	8005796 <__hexnan+0x7a>
 800580e:	2300      	movs	r3, #0
 8005810:	f844 3c04 	str.w	r3, [r4, #-4]
 8005814:	2501      	movs	r5, #1
 8005816:	3c04      	subs	r4, #4
 8005818:	6822      	ldr	r2, [r4, #0]
 800581a:	f000 000f 	and.w	r0, r0, #15
 800581e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005822:	6022      	str	r2, [r4, #0]
 8005824:	e7b7      	b.n	8005796 <__hexnan+0x7a>
 8005826:	2508      	movs	r5, #8
 8005828:	e7b5      	b.n	8005796 <__hexnan+0x7a>
 800582a:	9b01      	ldr	r3, [sp, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0df      	beq.n	80057f0 <__hexnan+0xd4>
 8005830:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005834:	f1c3 0320 	rsb	r3, r3, #32
 8005838:	fa22 f303 	lsr.w	r3, r2, r3
 800583c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005840:	401a      	ands	r2, r3
 8005842:	f846 2c04 	str.w	r2, [r6, #-4]
 8005846:	e7d3      	b.n	80057f0 <__hexnan+0xd4>
 8005848:	3f04      	subs	r7, #4
 800584a:	e7d1      	b.n	80057f0 <__hexnan+0xd4>
 800584c:	2004      	movs	r0, #4
 800584e:	b007      	add	sp, #28
 8005850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005854 <_localeconv_r>:
 8005854:	4800      	ldr	r0, [pc, #0]	; (8005858 <_localeconv_r+0x4>)
 8005856:	4770      	bx	lr
 8005858:	2000019c 	.word	0x2000019c

0800585c <malloc>:
 800585c:	4b02      	ldr	r3, [pc, #8]	; (8005868 <malloc+0xc>)
 800585e:	4601      	mov	r1, r0
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	f000 bd55 	b.w	8006310 <_malloc_r>
 8005866:	bf00      	nop
 8005868:	20000044 	.word	0x20000044

0800586c <__ascii_mbtowc>:
 800586c:	b082      	sub	sp, #8
 800586e:	b901      	cbnz	r1, 8005872 <__ascii_mbtowc+0x6>
 8005870:	a901      	add	r1, sp, #4
 8005872:	b142      	cbz	r2, 8005886 <__ascii_mbtowc+0x1a>
 8005874:	b14b      	cbz	r3, 800588a <__ascii_mbtowc+0x1e>
 8005876:	7813      	ldrb	r3, [r2, #0]
 8005878:	600b      	str	r3, [r1, #0]
 800587a:	7812      	ldrb	r2, [r2, #0]
 800587c:	1e10      	subs	r0, r2, #0
 800587e:	bf18      	it	ne
 8005880:	2001      	movne	r0, #1
 8005882:	b002      	add	sp, #8
 8005884:	4770      	bx	lr
 8005886:	4610      	mov	r0, r2
 8005888:	e7fb      	b.n	8005882 <__ascii_mbtowc+0x16>
 800588a:	f06f 0001 	mvn.w	r0, #1
 800588e:	e7f8      	b.n	8005882 <__ascii_mbtowc+0x16>

08005890 <memcpy>:
 8005890:	440a      	add	r2, r1
 8005892:	4291      	cmp	r1, r2
 8005894:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005898:	d100      	bne.n	800589c <memcpy+0xc>
 800589a:	4770      	bx	lr
 800589c:	b510      	push	{r4, lr}
 800589e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058a6:	4291      	cmp	r1, r2
 80058a8:	d1f9      	bne.n	800589e <memcpy+0xe>
 80058aa:	bd10      	pop	{r4, pc}

080058ac <_Balloc>:
 80058ac:	b570      	push	{r4, r5, r6, lr}
 80058ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80058b0:	4604      	mov	r4, r0
 80058b2:	460d      	mov	r5, r1
 80058b4:	b976      	cbnz	r6, 80058d4 <_Balloc+0x28>
 80058b6:	2010      	movs	r0, #16
 80058b8:	f7ff ffd0 	bl	800585c <malloc>
 80058bc:	4602      	mov	r2, r0
 80058be:	6260      	str	r0, [r4, #36]	; 0x24
 80058c0:	b920      	cbnz	r0, 80058cc <_Balloc+0x20>
 80058c2:	4b18      	ldr	r3, [pc, #96]	; (8005924 <_Balloc+0x78>)
 80058c4:	4818      	ldr	r0, [pc, #96]	; (8005928 <_Balloc+0x7c>)
 80058c6:	2166      	movs	r1, #102	; 0x66
 80058c8:	f000 ff2a 	bl	8006720 <__assert_func>
 80058cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058d0:	6006      	str	r6, [r0, #0]
 80058d2:	60c6      	str	r6, [r0, #12]
 80058d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80058d6:	68f3      	ldr	r3, [r6, #12]
 80058d8:	b183      	cbz	r3, 80058fc <_Balloc+0x50>
 80058da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80058e2:	b9b8      	cbnz	r0, 8005914 <_Balloc+0x68>
 80058e4:	2101      	movs	r1, #1
 80058e6:	fa01 f605 	lsl.w	r6, r1, r5
 80058ea:	1d72      	adds	r2, r6, #5
 80058ec:	0092      	lsls	r2, r2, #2
 80058ee:	4620      	mov	r0, r4
 80058f0:	f000 fc90 	bl	8006214 <_calloc_r>
 80058f4:	b160      	cbz	r0, 8005910 <_Balloc+0x64>
 80058f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80058fa:	e00e      	b.n	800591a <_Balloc+0x6e>
 80058fc:	2221      	movs	r2, #33	; 0x21
 80058fe:	2104      	movs	r1, #4
 8005900:	4620      	mov	r0, r4
 8005902:	f000 fc87 	bl	8006214 <_calloc_r>
 8005906:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005908:	60f0      	str	r0, [r6, #12]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1e4      	bne.n	80058da <_Balloc+0x2e>
 8005910:	2000      	movs	r0, #0
 8005912:	bd70      	pop	{r4, r5, r6, pc}
 8005914:	6802      	ldr	r2, [r0, #0]
 8005916:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800591a:	2300      	movs	r3, #0
 800591c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005920:	e7f7      	b.n	8005912 <_Balloc+0x66>
 8005922:	bf00      	nop
 8005924:	0800750e 	.word	0x0800750e
 8005928:	0800760c 	.word	0x0800760c

0800592c <_Bfree>:
 800592c:	b570      	push	{r4, r5, r6, lr}
 800592e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005930:	4605      	mov	r5, r0
 8005932:	460c      	mov	r4, r1
 8005934:	b976      	cbnz	r6, 8005954 <_Bfree+0x28>
 8005936:	2010      	movs	r0, #16
 8005938:	f7ff ff90 	bl	800585c <malloc>
 800593c:	4602      	mov	r2, r0
 800593e:	6268      	str	r0, [r5, #36]	; 0x24
 8005940:	b920      	cbnz	r0, 800594c <_Bfree+0x20>
 8005942:	4b09      	ldr	r3, [pc, #36]	; (8005968 <_Bfree+0x3c>)
 8005944:	4809      	ldr	r0, [pc, #36]	; (800596c <_Bfree+0x40>)
 8005946:	218a      	movs	r1, #138	; 0x8a
 8005948:	f000 feea 	bl	8006720 <__assert_func>
 800594c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005950:	6006      	str	r6, [r0, #0]
 8005952:	60c6      	str	r6, [r0, #12]
 8005954:	b13c      	cbz	r4, 8005966 <_Bfree+0x3a>
 8005956:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005958:	6862      	ldr	r2, [r4, #4]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005960:	6021      	str	r1, [r4, #0]
 8005962:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005966:	bd70      	pop	{r4, r5, r6, pc}
 8005968:	0800750e 	.word	0x0800750e
 800596c:	0800760c 	.word	0x0800760c

08005970 <__multadd>:
 8005970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005974:	690d      	ldr	r5, [r1, #16]
 8005976:	4607      	mov	r7, r0
 8005978:	460c      	mov	r4, r1
 800597a:	461e      	mov	r6, r3
 800597c:	f101 0c14 	add.w	ip, r1, #20
 8005980:	2000      	movs	r0, #0
 8005982:	f8dc 3000 	ldr.w	r3, [ip]
 8005986:	b299      	uxth	r1, r3
 8005988:	fb02 6101 	mla	r1, r2, r1, r6
 800598c:	0c1e      	lsrs	r6, r3, #16
 800598e:	0c0b      	lsrs	r3, r1, #16
 8005990:	fb02 3306 	mla	r3, r2, r6, r3
 8005994:	b289      	uxth	r1, r1
 8005996:	3001      	adds	r0, #1
 8005998:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800599c:	4285      	cmp	r5, r0
 800599e:	f84c 1b04 	str.w	r1, [ip], #4
 80059a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80059a6:	dcec      	bgt.n	8005982 <__multadd+0x12>
 80059a8:	b30e      	cbz	r6, 80059ee <__multadd+0x7e>
 80059aa:	68a3      	ldr	r3, [r4, #8]
 80059ac:	42ab      	cmp	r3, r5
 80059ae:	dc19      	bgt.n	80059e4 <__multadd+0x74>
 80059b0:	6861      	ldr	r1, [r4, #4]
 80059b2:	4638      	mov	r0, r7
 80059b4:	3101      	adds	r1, #1
 80059b6:	f7ff ff79 	bl	80058ac <_Balloc>
 80059ba:	4680      	mov	r8, r0
 80059bc:	b928      	cbnz	r0, 80059ca <__multadd+0x5a>
 80059be:	4602      	mov	r2, r0
 80059c0:	4b0c      	ldr	r3, [pc, #48]	; (80059f4 <__multadd+0x84>)
 80059c2:	480d      	ldr	r0, [pc, #52]	; (80059f8 <__multadd+0x88>)
 80059c4:	21b5      	movs	r1, #181	; 0xb5
 80059c6:	f000 feab 	bl	8006720 <__assert_func>
 80059ca:	6922      	ldr	r2, [r4, #16]
 80059cc:	3202      	adds	r2, #2
 80059ce:	f104 010c 	add.w	r1, r4, #12
 80059d2:	0092      	lsls	r2, r2, #2
 80059d4:	300c      	adds	r0, #12
 80059d6:	f7ff ff5b 	bl	8005890 <memcpy>
 80059da:	4621      	mov	r1, r4
 80059dc:	4638      	mov	r0, r7
 80059de:	f7ff ffa5 	bl	800592c <_Bfree>
 80059e2:	4644      	mov	r4, r8
 80059e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059e8:	3501      	adds	r5, #1
 80059ea:	615e      	str	r6, [r3, #20]
 80059ec:	6125      	str	r5, [r4, #16]
 80059ee:	4620      	mov	r0, r4
 80059f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059f4:	08007580 	.word	0x08007580
 80059f8:	0800760c 	.word	0x0800760c

080059fc <__s2b>:
 80059fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a00:	460c      	mov	r4, r1
 8005a02:	4615      	mov	r5, r2
 8005a04:	461f      	mov	r7, r3
 8005a06:	2209      	movs	r2, #9
 8005a08:	3308      	adds	r3, #8
 8005a0a:	4606      	mov	r6, r0
 8005a0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a10:	2100      	movs	r1, #0
 8005a12:	2201      	movs	r2, #1
 8005a14:	429a      	cmp	r2, r3
 8005a16:	db09      	blt.n	8005a2c <__s2b+0x30>
 8005a18:	4630      	mov	r0, r6
 8005a1a:	f7ff ff47 	bl	80058ac <_Balloc>
 8005a1e:	b940      	cbnz	r0, 8005a32 <__s2b+0x36>
 8005a20:	4602      	mov	r2, r0
 8005a22:	4b19      	ldr	r3, [pc, #100]	; (8005a88 <__s2b+0x8c>)
 8005a24:	4819      	ldr	r0, [pc, #100]	; (8005a8c <__s2b+0x90>)
 8005a26:	21ce      	movs	r1, #206	; 0xce
 8005a28:	f000 fe7a 	bl	8006720 <__assert_func>
 8005a2c:	0052      	lsls	r2, r2, #1
 8005a2e:	3101      	adds	r1, #1
 8005a30:	e7f0      	b.n	8005a14 <__s2b+0x18>
 8005a32:	9b08      	ldr	r3, [sp, #32]
 8005a34:	6143      	str	r3, [r0, #20]
 8005a36:	2d09      	cmp	r5, #9
 8005a38:	f04f 0301 	mov.w	r3, #1
 8005a3c:	6103      	str	r3, [r0, #16]
 8005a3e:	dd16      	ble.n	8005a6e <__s2b+0x72>
 8005a40:	f104 0909 	add.w	r9, r4, #9
 8005a44:	46c8      	mov	r8, r9
 8005a46:	442c      	add	r4, r5
 8005a48:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005a4c:	4601      	mov	r1, r0
 8005a4e:	3b30      	subs	r3, #48	; 0x30
 8005a50:	220a      	movs	r2, #10
 8005a52:	4630      	mov	r0, r6
 8005a54:	f7ff ff8c 	bl	8005970 <__multadd>
 8005a58:	45a0      	cmp	r8, r4
 8005a5a:	d1f5      	bne.n	8005a48 <__s2b+0x4c>
 8005a5c:	f1a5 0408 	sub.w	r4, r5, #8
 8005a60:	444c      	add	r4, r9
 8005a62:	1b2d      	subs	r5, r5, r4
 8005a64:	1963      	adds	r3, r4, r5
 8005a66:	42bb      	cmp	r3, r7
 8005a68:	db04      	blt.n	8005a74 <__s2b+0x78>
 8005a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a6e:	340a      	adds	r4, #10
 8005a70:	2509      	movs	r5, #9
 8005a72:	e7f6      	b.n	8005a62 <__s2b+0x66>
 8005a74:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005a78:	4601      	mov	r1, r0
 8005a7a:	3b30      	subs	r3, #48	; 0x30
 8005a7c:	220a      	movs	r2, #10
 8005a7e:	4630      	mov	r0, r6
 8005a80:	f7ff ff76 	bl	8005970 <__multadd>
 8005a84:	e7ee      	b.n	8005a64 <__s2b+0x68>
 8005a86:	bf00      	nop
 8005a88:	08007580 	.word	0x08007580
 8005a8c:	0800760c 	.word	0x0800760c

08005a90 <__hi0bits>:
 8005a90:	0c02      	lsrs	r2, r0, #16
 8005a92:	0412      	lsls	r2, r2, #16
 8005a94:	4603      	mov	r3, r0
 8005a96:	b9ca      	cbnz	r2, 8005acc <__hi0bits+0x3c>
 8005a98:	0403      	lsls	r3, r0, #16
 8005a9a:	2010      	movs	r0, #16
 8005a9c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005aa0:	bf04      	itt	eq
 8005aa2:	021b      	lsleq	r3, r3, #8
 8005aa4:	3008      	addeq	r0, #8
 8005aa6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005aaa:	bf04      	itt	eq
 8005aac:	011b      	lsleq	r3, r3, #4
 8005aae:	3004      	addeq	r0, #4
 8005ab0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005ab4:	bf04      	itt	eq
 8005ab6:	009b      	lsleq	r3, r3, #2
 8005ab8:	3002      	addeq	r0, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	db05      	blt.n	8005aca <__hi0bits+0x3a>
 8005abe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005ac2:	f100 0001 	add.w	r0, r0, #1
 8005ac6:	bf08      	it	eq
 8005ac8:	2020      	moveq	r0, #32
 8005aca:	4770      	bx	lr
 8005acc:	2000      	movs	r0, #0
 8005ace:	e7e5      	b.n	8005a9c <__hi0bits+0xc>

08005ad0 <__lo0bits>:
 8005ad0:	6803      	ldr	r3, [r0, #0]
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	f013 0007 	ands.w	r0, r3, #7
 8005ad8:	d00b      	beq.n	8005af2 <__lo0bits+0x22>
 8005ada:	07d9      	lsls	r1, r3, #31
 8005adc:	d421      	bmi.n	8005b22 <__lo0bits+0x52>
 8005ade:	0798      	lsls	r0, r3, #30
 8005ae0:	bf49      	itett	mi
 8005ae2:	085b      	lsrmi	r3, r3, #1
 8005ae4:	089b      	lsrpl	r3, r3, #2
 8005ae6:	2001      	movmi	r0, #1
 8005ae8:	6013      	strmi	r3, [r2, #0]
 8005aea:	bf5c      	itt	pl
 8005aec:	6013      	strpl	r3, [r2, #0]
 8005aee:	2002      	movpl	r0, #2
 8005af0:	4770      	bx	lr
 8005af2:	b299      	uxth	r1, r3
 8005af4:	b909      	cbnz	r1, 8005afa <__lo0bits+0x2a>
 8005af6:	0c1b      	lsrs	r3, r3, #16
 8005af8:	2010      	movs	r0, #16
 8005afa:	b2d9      	uxtb	r1, r3
 8005afc:	b909      	cbnz	r1, 8005b02 <__lo0bits+0x32>
 8005afe:	3008      	adds	r0, #8
 8005b00:	0a1b      	lsrs	r3, r3, #8
 8005b02:	0719      	lsls	r1, r3, #28
 8005b04:	bf04      	itt	eq
 8005b06:	091b      	lsreq	r3, r3, #4
 8005b08:	3004      	addeq	r0, #4
 8005b0a:	0799      	lsls	r1, r3, #30
 8005b0c:	bf04      	itt	eq
 8005b0e:	089b      	lsreq	r3, r3, #2
 8005b10:	3002      	addeq	r0, #2
 8005b12:	07d9      	lsls	r1, r3, #31
 8005b14:	d403      	bmi.n	8005b1e <__lo0bits+0x4e>
 8005b16:	085b      	lsrs	r3, r3, #1
 8005b18:	f100 0001 	add.w	r0, r0, #1
 8005b1c:	d003      	beq.n	8005b26 <__lo0bits+0x56>
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	4770      	bx	lr
 8005b22:	2000      	movs	r0, #0
 8005b24:	4770      	bx	lr
 8005b26:	2020      	movs	r0, #32
 8005b28:	4770      	bx	lr
	...

08005b2c <__i2b>:
 8005b2c:	b510      	push	{r4, lr}
 8005b2e:	460c      	mov	r4, r1
 8005b30:	2101      	movs	r1, #1
 8005b32:	f7ff febb 	bl	80058ac <_Balloc>
 8005b36:	4602      	mov	r2, r0
 8005b38:	b928      	cbnz	r0, 8005b46 <__i2b+0x1a>
 8005b3a:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <__i2b+0x24>)
 8005b3c:	4805      	ldr	r0, [pc, #20]	; (8005b54 <__i2b+0x28>)
 8005b3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005b42:	f000 fded 	bl	8006720 <__assert_func>
 8005b46:	2301      	movs	r3, #1
 8005b48:	6144      	str	r4, [r0, #20]
 8005b4a:	6103      	str	r3, [r0, #16]
 8005b4c:	bd10      	pop	{r4, pc}
 8005b4e:	bf00      	nop
 8005b50:	08007580 	.word	0x08007580
 8005b54:	0800760c 	.word	0x0800760c

08005b58 <__multiply>:
 8005b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b5c:	4691      	mov	r9, r2
 8005b5e:	690a      	ldr	r2, [r1, #16]
 8005b60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	bfb8      	it	lt
 8005b68:	460b      	movlt	r3, r1
 8005b6a:	460c      	mov	r4, r1
 8005b6c:	bfbc      	itt	lt
 8005b6e:	464c      	movlt	r4, r9
 8005b70:	4699      	movlt	r9, r3
 8005b72:	6927      	ldr	r7, [r4, #16]
 8005b74:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005b78:	68a3      	ldr	r3, [r4, #8]
 8005b7a:	6861      	ldr	r1, [r4, #4]
 8005b7c:	eb07 060a 	add.w	r6, r7, sl
 8005b80:	42b3      	cmp	r3, r6
 8005b82:	b085      	sub	sp, #20
 8005b84:	bfb8      	it	lt
 8005b86:	3101      	addlt	r1, #1
 8005b88:	f7ff fe90 	bl	80058ac <_Balloc>
 8005b8c:	b930      	cbnz	r0, 8005b9c <__multiply+0x44>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	4b43      	ldr	r3, [pc, #268]	; (8005ca0 <__multiply+0x148>)
 8005b92:	4844      	ldr	r0, [pc, #272]	; (8005ca4 <__multiply+0x14c>)
 8005b94:	f240 115d 	movw	r1, #349	; 0x15d
 8005b98:	f000 fdc2 	bl	8006720 <__assert_func>
 8005b9c:	f100 0514 	add.w	r5, r0, #20
 8005ba0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ba4:	462b      	mov	r3, r5
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	4543      	cmp	r3, r8
 8005baa:	d321      	bcc.n	8005bf0 <__multiply+0x98>
 8005bac:	f104 0314 	add.w	r3, r4, #20
 8005bb0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005bb4:	f109 0314 	add.w	r3, r9, #20
 8005bb8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005bbc:	9202      	str	r2, [sp, #8]
 8005bbe:	1b3a      	subs	r2, r7, r4
 8005bc0:	3a15      	subs	r2, #21
 8005bc2:	f022 0203 	bic.w	r2, r2, #3
 8005bc6:	3204      	adds	r2, #4
 8005bc8:	f104 0115 	add.w	r1, r4, #21
 8005bcc:	428f      	cmp	r7, r1
 8005bce:	bf38      	it	cc
 8005bd0:	2204      	movcc	r2, #4
 8005bd2:	9201      	str	r2, [sp, #4]
 8005bd4:	9a02      	ldr	r2, [sp, #8]
 8005bd6:	9303      	str	r3, [sp, #12]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d80c      	bhi.n	8005bf6 <__multiply+0x9e>
 8005bdc:	2e00      	cmp	r6, #0
 8005bde:	dd03      	ble.n	8005be8 <__multiply+0x90>
 8005be0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d059      	beq.n	8005c9c <__multiply+0x144>
 8005be8:	6106      	str	r6, [r0, #16]
 8005bea:	b005      	add	sp, #20
 8005bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf0:	f843 2b04 	str.w	r2, [r3], #4
 8005bf4:	e7d8      	b.n	8005ba8 <__multiply+0x50>
 8005bf6:	f8b3 a000 	ldrh.w	sl, [r3]
 8005bfa:	f1ba 0f00 	cmp.w	sl, #0
 8005bfe:	d023      	beq.n	8005c48 <__multiply+0xf0>
 8005c00:	f104 0e14 	add.w	lr, r4, #20
 8005c04:	46a9      	mov	r9, r5
 8005c06:	f04f 0c00 	mov.w	ip, #0
 8005c0a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005c0e:	f8d9 1000 	ldr.w	r1, [r9]
 8005c12:	fa1f fb82 	uxth.w	fp, r2
 8005c16:	b289      	uxth	r1, r1
 8005c18:	fb0a 110b 	mla	r1, sl, fp, r1
 8005c1c:	4461      	add	r1, ip
 8005c1e:	f8d9 c000 	ldr.w	ip, [r9]
 8005c22:	0c12      	lsrs	r2, r2, #16
 8005c24:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005c28:	fb0a c202 	mla	r2, sl, r2, ip
 8005c2c:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005c30:	b289      	uxth	r1, r1
 8005c32:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005c36:	4577      	cmp	r7, lr
 8005c38:	f849 1b04 	str.w	r1, [r9], #4
 8005c3c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005c40:	d8e3      	bhi.n	8005c0a <__multiply+0xb2>
 8005c42:	9a01      	ldr	r2, [sp, #4]
 8005c44:	f845 c002 	str.w	ip, [r5, r2]
 8005c48:	9a03      	ldr	r2, [sp, #12]
 8005c4a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005c4e:	3304      	adds	r3, #4
 8005c50:	f1b9 0f00 	cmp.w	r9, #0
 8005c54:	d020      	beq.n	8005c98 <__multiply+0x140>
 8005c56:	6829      	ldr	r1, [r5, #0]
 8005c58:	f104 0c14 	add.w	ip, r4, #20
 8005c5c:	46ae      	mov	lr, r5
 8005c5e:	f04f 0a00 	mov.w	sl, #0
 8005c62:	f8bc b000 	ldrh.w	fp, [ip]
 8005c66:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005c6a:	fb09 220b 	mla	r2, r9, fp, r2
 8005c6e:	4492      	add	sl, r2
 8005c70:	b289      	uxth	r1, r1
 8005c72:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005c76:	f84e 1b04 	str.w	r1, [lr], #4
 8005c7a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005c7e:	f8be 1000 	ldrh.w	r1, [lr]
 8005c82:	0c12      	lsrs	r2, r2, #16
 8005c84:	fb09 1102 	mla	r1, r9, r2, r1
 8005c88:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005c8c:	4567      	cmp	r7, ip
 8005c8e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005c92:	d8e6      	bhi.n	8005c62 <__multiply+0x10a>
 8005c94:	9a01      	ldr	r2, [sp, #4]
 8005c96:	50a9      	str	r1, [r5, r2]
 8005c98:	3504      	adds	r5, #4
 8005c9a:	e79b      	b.n	8005bd4 <__multiply+0x7c>
 8005c9c:	3e01      	subs	r6, #1
 8005c9e:	e79d      	b.n	8005bdc <__multiply+0x84>
 8005ca0:	08007580 	.word	0x08007580
 8005ca4:	0800760c 	.word	0x0800760c

08005ca8 <__pow5mult>:
 8005ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cac:	4615      	mov	r5, r2
 8005cae:	f012 0203 	ands.w	r2, r2, #3
 8005cb2:	4606      	mov	r6, r0
 8005cb4:	460f      	mov	r7, r1
 8005cb6:	d007      	beq.n	8005cc8 <__pow5mult+0x20>
 8005cb8:	4c25      	ldr	r4, [pc, #148]	; (8005d50 <__pow5mult+0xa8>)
 8005cba:	3a01      	subs	r2, #1
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005cc2:	f7ff fe55 	bl	8005970 <__multadd>
 8005cc6:	4607      	mov	r7, r0
 8005cc8:	10ad      	asrs	r5, r5, #2
 8005cca:	d03d      	beq.n	8005d48 <__pow5mult+0xa0>
 8005ccc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005cce:	b97c      	cbnz	r4, 8005cf0 <__pow5mult+0x48>
 8005cd0:	2010      	movs	r0, #16
 8005cd2:	f7ff fdc3 	bl	800585c <malloc>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	6270      	str	r0, [r6, #36]	; 0x24
 8005cda:	b928      	cbnz	r0, 8005ce8 <__pow5mult+0x40>
 8005cdc:	4b1d      	ldr	r3, [pc, #116]	; (8005d54 <__pow5mult+0xac>)
 8005cde:	481e      	ldr	r0, [pc, #120]	; (8005d58 <__pow5mult+0xb0>)
 8005ce0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005ce4:	f000 fd1c 	bl	8006720 <__assert_func>
 8005ce8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005cec:	6004      	str	r4, [r0, #0]
 8005cee:	60c4      	str	r4, [r0, #12]
 8005cf0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005cf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005cf8:	b94c      	cbnz	r4, 8005d0e <__pow5mult+0x66>
 8005cfa:	f240 2171 	movw	r1, #625	; 0x271
 8005cfe:	4630      	mov	r0, r6
 8005d00:	f7ff ff14 	bl	8005b2c <__i2b>
 8005d04:	2300      	movs	r3, #0
 8005d06:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	6003      	str	r3, [r0, #0]
 8005d0e:	f04f 0900 	mov.w	r9, #0
 8005d12:	07eb      	lsls	r3, r5, #31
 8005d14:	d50a      	bpl.n	8005d2c <__pow5mult+0x84>
 8005d16:	4639      	mov	r1, r7
 8005d18:	4622      	mov	r2, r4
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	f7ff ff1c 	bl	8005b58 <__multiply>
 8005d20:	4639      	mov	r1, r7
 8005d22:	4680      	mov	r8, r0
 8005d24:	4630      	mov	r0, r6
 8005d26:	f7ff fe01 	bl	800592c <_Bfree>
 8005d2a:	4647      	mov	r7, r8
 8005d2c:	106d      	asrs	r5, r5, #1
 8005d2e:	d00b      	beq.n	8005d48 <__pow5mult+0xa0>
 8005d30:	6820      	ldr	r0, [r4, #0]
 8005d32:	b938      	cbnz	r0, 8005d44 <__pow5mult+0x9c>
 8005d34:	4622      	mov	r2, r4
 8005d36:	4621      	mov	r1, r4
 8005d38:	4630      	mov	r0, r6
 8005d3a:	f7ff ff0d 	bl	8005b58 <__multiply>
 8005d3e:	6020      	str	r0, [r4, #0]
 8005d40:	f8c0 9000 	str.w	r9, [r0]
 8005d44:	4604      	mov	r4, r0
 8005d46:	e7e4      	b.n	8005d12 <__pow5mult+0x6a>
 8005d48:	4638      	mov	r0, r7
 8005d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d4e:	bf00      	nop
 8005d50:	08007758 	.word	0x08007758
 8005d54:	0800750e 	.word	0x0800750e
 8005d58:	0800760c 	.word	0x0800760c

08005d5c <__lshift>:
 8005d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d60:	460c      	mov	r4, r1
 8005d62:	6849      	ldr	r1, [r1, #4]
 8005d64:	6923      	ldr	r3, [r4, #16]
 8005d66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005d6a:	68a3      	ldr	r3, [r4, #8]
 8005d6c:	4607      	mov	r7, r0
 8005d6e:	4691      	mov	r9, r2
 8005d70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d74:	f108 0601 	add.w	r6, r8, #1
 8005d78:	42b3      	cmp	r3, r6
 8005d7a:	db0b      	blt.n	8005d94 <__lshift+0x38>
 8005d7c:	4638      	mov	r0, r7
 8005d7e:	f7ff fd95 	bl	80058ac <_Balloc>
 8005d82:	4605      	mov	r5, r0
 8005d84:	b948      	cbnz	r0, 8005d9a <__lshift+0x3e>
 8005d86:	4602      	mov	r2, r0
 8005d88:	4b2a      	ldr	r3, [pc, #168]	; (8005e34 <__lshift+0xd8>)
 8005d8a:	482b      	ldr	r0, [pc, #172]	; (8005e38 <__lshift+0xdc>)
 8005d8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005d90:	f000 fcc6 	bl	8006720 <__assert_func>
 8005d94:	3101      	adds	r1, #1
 8005d96:	005b      	lsls	r3, r3, #1
 8005d98:	e7ee      	b.n	8005d78 <__lshift+0x1c>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f100 0114 	add.w	r1, r0, #20
 8005da0:	f100 0210 	add.w	r2, r0, #16
 8005da4:	4618      	mov	r0, r3
 8005da6:	4553      	cmp	r3, sl
 8005da8:	db37      	blt.n	8005e1a <__lshift+0xbe>
 8005daa:	6920      	ldr	r0, [r4, #16]
 8005dac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005db0:	f104 0314 	add.w	r3, r4, #20
 8005db4:	f019 091f 	ands.w	r9, r9, #31
 8005db8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005dbc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005dc0:	d02f      	beq.n	8005e22 <__lshift+0xc6>
 8005dc2:	f1c9 0e20 	rsb	lr, r9, #32
 8005dc6:	468a      	mov	sl, r1
 8005dc8:	f04f 0c00 	mov.w	ip, #0
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	fa02 f209 	lsl.w	r2, r2, r9
 8005dd2:	ea42 020c 	orr.w	r2, r2, ip
 8005dd6:	f84a 2b04 	str.w	r2, [sl], #4
 8005dda:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dde:	4298      	cmp	r0, r3
 8005de0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005de4:	d8f2      	bhi.n	8005dcc <__lshift+0x70>
 8005de6:	1b03      	subs	r3, r0, r4
 8005de8:	3b15      	subs	r3, #21
 8005dea:	f023 0303 	bic.w	r3, r3, #3
 8005dee:	3304      	adds	r3, #4
 8005df0:	f104 0215 	add.w	r2, r4, #21
 8005df4:	4290      	cmp	r0, r2
 8005df6:	bf38      	it	cc
 8005df8:	2304      	movcc	r3, #4
 8005dfa:	f841 c003 	str.w	ip, [r1, r3]
 8005dfe:	f1bc 0f00 	cmp.w	ip, #0
 8005e02:	d001      	beq.n	8005e08 <__lshift+0xac>
 8005e04:	f108 0602 	add.w	r6, r8, #2
 8005e08:	3e01      	subs	r6, #1
 8005e0a:	4638      	mov	r0, r7
 8005e0c:	612e      	str	r6, [r5, #16]
 8005e0e:	4621      	mov	r1, r4
 8005e10:	f7ff fd8c 	bl	800592c <_Bfree>
 8005e14:	4628      	mov	r0, r5
 8005e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e1e:	3301      	adds	r3, #1
 8005e20:	e7c1      	b.n	8005da6 <__lshift+0x4a>
 8005e22:	3904      	subs	r1, #4
 8005e24:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e28:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e2c:	4298      	cmp	r0, r3
 8005e2e:	d8f9      	bhi.n	8005e24 <__lshift+0xc8>
 8005e30:	e7ea      	b.n	8005e08 <__lshift+0xac>
 8005e32:	bf00      	nop
 8005e34:	08007580 	.word	0x08007580
 8005e38:	0800760c 	.word	0x0800760c

08005e3c <__mcmp>:
 8005e3c:	690a      	ldr	r2, [r1, #16]
 8005e3e:	4603      	mov	r3, r0
 8005e40:	6900      	ldr	r0, [r0, #16]
 8005e42:	1a80      	subs	r0, r0, r2
 8005e44:	b530      	push	{r4, r5, lr}
 8005e46:	d10d      	bne.n	8005e64 <__mcmp+0x28>
 8005e48:	3314      	adds	r3, #20
 8005e4a:	3114      	adds	r1, #20
 8005e4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005e50:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005e54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005e58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005e5c:	4295      	cmp	r5, r2
 8005e5e:	d002      	beq.n	8005e66 <__mcmp+0x2a>
 8005e60:	d304      	bcc.n	8005e6c <__mcmp+0x30>
 8005e62:	2001      	movs	r0, #1
 8005e64:	bd30      	pop	{r4, r5, pc}
 8005e66:	42a3      	cmp	r3, r4
 8005e68:	d3f4      	bcc.n	8005e54 <__mcmp+0x18>
 8005e6a:	e7fb      	b.n	8005e64 <__mcmp+0x28>
 8005e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e70:	e7f8      	b.n	8005e64 <__mcmp+0x28>
	...

08005e74 <__mdiff>:
 8005e74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e78:	460d      	mov	r5, r1
 8005e7a:	4607      	mov	r7, r0
 8005e7c:	4611      	mov	r1, r2
 8005e7e:	4628      	mov	r0, r5
 8005e80:	4614      	mov	r4, r2
 8005e82:	f7ff ffdb 	bl	8005e3c <__mcmp>
 8005e86:	1e06      	subs	r6, r0, #0
 8005e88:	d111      	bne.n	8005eae <__mdiff+0x3a>
 8005e8a:	4631      	mov	r1, r6
 8005e8c:	4638      	mov	r0, r7
 8005e8e:	f7ff fd0d 	bl	80058ac <_Balloc>
 8005e92:	4602      	mov	r2, r0
 8005e94:	b928      	cbnz	r0, 8005ea2 <__mdiff+0x2e>
 8005e96:	4b39      	ldr	r3, [pc, #228]	; (8005f7c <__mdiff+0x108>)
 8005e98:	f240 2132 	movw	r1, #562	; 0x232
 8005e9c:	4838      	ldr	r0, [pc, #224]	; (8005f80 <__mdiff+0x10c>)
 8005e9e:	f000 fc3f 	bl	8006720 <__assert_func>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005ea8:	4610      	mov	r0, r2
 8005eaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eae:	bfa4      	itt	ge
 8005eb0:	4623      	movge	r3, r4
 8005eb2:	462c      	movge	r4, r5
 8005eb4:	4638      	mov	r0, r7
 8005eb6:	6861      	ldr	r1, [r4, #4]
 8005eb8:	bfa6      	itte	ge
 8005eba:	461d      	movge	r5, r3
 8005ebc:	2600      	movge	r6, #0
 8005ebe:	2601      	movlt	r6, #1
 8005ec0:	f7ff fcf4 	bl	80058ac <_Balloc>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	b918      	cbnz	r0, 8005ed0 <__mdiff+0x5c>
 8005ec8:	4b2c      	ldr	r3, [pc, #176]	; (8005f7c <__mdiff+0x108>)
 8005eca:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005ece:	e7e5      	b.n	8005e9c <__mdiff+0x28>
 8005ed0:	6927      	ldr	r7, [r4, #16]
 8005ed2:	60c6      	str	r6, [r0, #12]
 8005ed4:	692e      	ldr	r6, [r5, #16]
 8005ed6:	f104 0014 	add.w	r0, r4, #20
 8005eda:	f105 0914 	add.w	r9, r5, #20
 8005ede:	f102 0e14 	add.w	lr, r2, #20
 8005ee2:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8005ee6:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005eea:	3410      	adds	r4, #16
 8005eec:	46f2      	mov	sl, lr
 8005eee:	2100      	movs	r1, #0
 8005ef0:	f859 3b04 	ldr.w	r3, [r9], #4
 8005ef4:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005ef8:	fa1f f883 	uxth.w	r8, r3
 8005efc:	fa11 f18b 	uxtah	r1, r1, fp
 8005f00:	0c1b      	lsrs	r3, r3, #16
 8005f02:	eba1 0808 	sub.w	r8, r1, r8
 8005f06:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005f0a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005f0e:	fa1f f888 	uxth.w	r8, r8
 8005f12:	1419      	asrs	r1, r3, #16
 8005f14:	454e      	cmp	r6, r9
 8005f16:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005f1a:	f84a 3b04 	str.w	r3, [sl], #4
 8005f1e:	d8e7      	bhi.n	8005ef0 <__mdiff+0x7c>
 8005f20:	1b73      	subs	r3, r6, r5
 8005f22:	3b15      	subs	r3, #21
 8005f24:	f023 0303 	bic.w	r3, r3, #3
 8005f28:	3304      	adds	r3, #4
 8005f2a:	3515      	adds	r5, #21
 8005f2c:	42ae      	cmp	r6, r5
 8005f2e:	bf38      	it	cc
 8005f30:	2304      	movcc	r3, #4
 8005f32:	4418      	add	r0, r3
 8005f34:	4473      	add	r3, lr
 8005f36:	469e      	mov	lr, r3
 8005f38:	4606      	mov	r6, r0
 8005f3a:	4566      	cmp	r6, ip
 8005f3c:	d30e      	bcc.n	8005f5c <__mdiff+0xe8>
 8005f3e:	f10c 0103 	add.w	r1, ip, #3
 8005f42:	1a09      	subs	r1, r1, r0
 8005f44:	f021 0103 	bic.w	r1, r1, #3
 8005f48:	3803      	subs	r0, #3
 8005f4a:	4584      	cmp	ip, r0
 8005f4c:	bf38      	it	cc
 8005f4e:	2100      	movcc	r1, #0
 8005f50:	4419      	add	r1, r3
 8005f52:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005f56:	b17b      	cbz	r3, 8005f78 <__mdiff+0x104>
 8005f58:	6117      	str	r7, [r2, #16]
 8005f5a:	e7a5      	b.n	8005ea8 <__mdiff+0x34>
 8005f5c:	f856 8b04 	ldr.w	r8, [r6], #4
 8005f60:	fa11 f488 	uxtah	r4, r1, r8
 8005f64:	1425      	asrs	r5, r4, #16
 8005f66:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 8005f6a:	b2a4      	uxth	r4, r4
 8005f6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8005f70:	f84e 4b04 	str.w	r4, [lr], #4
 8005f74:	1429      	asrs	r1, r5, #16
 8005f76:	e7e0      	b.n	8005f3a <__mdiff+0xc6>
 8005f78:	3f01      	subs	r7, #1
 8005f7a:	e7ea      	b.n	8005f52 <__mdiff+0xde>
 8005f7c:	08007580 	.word	0x08007580
 8005f80:	0800760c 	.word	0x0800760c

08005f84 <__ulp>:
 8005f84:	4b11      	ldr	r3, [pc, #68]	; (8005fcc <__ulp+0x48>)
 8005f86:	400b      	ands	r3, r1
 8005f88:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	dd02      	ble.n	8005f96 <__ulp+0x12>
 8005f90:	2000      	movs	r0, #0
 8005f92:	4619      	mov	r1, r3
 8005f94:	4770      	bx	lr
 8005f96:	425b      	negs	r3, r3
 8005f98:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005f9c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005fa0:	f04f 0000 	mov.w	r0, #0
 8005fa4:	f04f 0100 	mov.w	r1, #0
 8005fa8:	da04      	bge.n	8005fb4 <__ulp+0x30>
 8005faa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005fae:	fa43 f102 	asr.w	r1, r3, r2
 8005fb2:	4770      	bx	lr
 8005fb4:	f1a2 0314 	sub.w	r3, r2, #20
 8005fb8:	2b1e      	cmp	r3, #30
 8005fba:	bfda      	itte	le
 8005fbc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8005fc0:	fa22 f303 	lsrle.w	r3, r2, r3
 8005fc4:	2301      	movgt	r3, #1
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	7ff00000 	.word	0x7ff00000

08005fd0 <__b2d>:
 8005fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fd4:	6907      	ldr	r7, [r0, #16]
 8005fd6:	f100 0914 	add.w	r9, r0, #20
 8005fda:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8005fde:	f1a7 0804 	sub.w	r8, r7, #4
 8005fe2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	f7ff fd52 	bl	8005a90 <__hi0bits>
 8005fec:	f1c0 0320 	rsb	r3, r0, #32
 8005ff0:	280a      	cmp	r0, #10
 8005ff2:	600b      	str	r3, [r1, #0]
 8005ff4:	491f      	ldr	r1, [pc, #124]	; (8006074 <__b2d+0xa4>)
 8005ff6:	dc17      	bgt.n	8006028 <__b2d+0x58>
 8005ff8:	f1c0 0c0b 	rsb	ip, r0, #11
 8005ffc:	45c1      	cmp	r9, r8
 8005ffe:	fa26 f30c 	lsr.w	r3, r6, ip
 8006002:	bf38      	it	cc
 8006004:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006008:	ea43 0501 	orr.w	r5, r3, r1
 800600c:	bf28      	it	cs
 800600e:	2200      	movcs	r2, #0
 8006010:	f100 0315 	add.w	r3, r0, #21
 8006014:	fa06 f303 	lsl.w	r3, r6, r3
 8006018:	fa22 f20c 	lsr.w	r2, r2, ip
 800601c:	ea43 0402 	orr.w	r4, r3, r2
 8006020:	4620      	mov	r0, r4
 8006022:	4629      	mov	r1, r5
 8006024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006028:	45c1      	cmp	r9, r8
 800602a:	bf3a      	itte	cc
 800602c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006030:	f1a7 0808 	subcc.w	r8, r7, #8
 8006034:	2200      	movcs	r2, #0
 8006036:	f1b0 030b 	subs.w	r3, r0, #11
 800603a:	d016      	beq.n	800606a <__b2d+0x9a>
 800603c:	f1c3 0720 	rsb	r7, r3, #32
 8006040:	fa22 f107 	lsr.w	r1, r2, r7
 8006044:	45c8      	cmp	r8, r9
 8006046:	fa06 f603 	lsl.w	r6, r6, r3
 800604a:	ea46 0601 	orr.w	r6, r6, r1
 800604e:	bf8c      	ite	hi
 8006050:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006054:	2100      	movls	r1, #0
 8006056:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800605a:	fa02 f003 	lsl.w	r0, r2, r3
 800605e:	40f9      	lsrs	r1, r7
 8006060:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006064:	ea40 0401 	orr.w	r4, r0, r1
 8006068:	e7da      	b.n	8006020 <__b2d+0x50>
 800606a:	ea46 0501 	orr.w	r5, r6, r1
 800606e:	4614      	mov	r4, r2
 8006070:	e7d6      	b.n	8006020 <__b2d+0x50>
 8006072:	bf00      	nop
 8006074:	3ff00000 	.word	0x3ff00000

08006078 <__d2b>:
 8006078:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800607c:	2101      	movs	r1, #1
 800607e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006082:	4690      	mov	r8, r2
 8006084:	461d      	mov	r5, r3
 8006086:	f7ff fc11 	bl	80058ac <_Balloc>
 800608a:	4604      	mov	r4, r0
 800608c:	b930      	cbnz	r0, 800609c <__d2b+0x24>
 800608e:	4602      	mov	r2, r0
 8006090:	4b25      	ldr	r3, [pc, #148]	; (8006128 <__d2b+0xb0>)
 8006092:	4826      	ldr	r0, [pc, #152]	; (800612c <__d2b+0xb4>)
 8006094:	f240 310a 	movw	r1, #778	; 0x30a
 8006098:	f000 fb42 	bl	8006720 <__assert_func>
 800609c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80060a0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80060a4:	bb2d      	cbnz	r5, 80060f2 <__d2b+0x7a>
 80060a6:	9301      	str	r3, [sp, #4]
 80060a8:	f1b8 0300 	subs.w	r3, r8, #0
 80060ac:	d026      	beq.n	80060fc <__d2b+0x84>
 80060ae:	4668      	mov	r0, sp
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	f7ff fd0d 	bl	8005ad0 <__lo0bits>
 80060b6:	9900      	ldr	r1, [sp, #0]
 80060b8:	b1f0      	cbz	r0, 80060f8 <__d2b+0x80>
 80060ba:	9a01      	ldr	r2, [sp, #4]
 80060bc:	f1c0 0320 	rsb	r3, r0, #32
 80060c0:	fa02 f303 	lsl.w	r3, r2, r3
 80060c4:	430b      	orrs	r3, r1
 80060c6:	40c2      	lsrs	r2, r0
 80060c8:	6163      	str	r3, [r4, #20]
 80060ca:	9201      	str	r2, [sp, #4]
 80060cc:	9b01      	ldr	r3, [sp, #4]
 80060ce:	61a3      	str	r3, [r4, #24]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	bf14      	ite	ne
 80060d4:	2102      	movne	r1, #2
 80060d6:	2101      	moveq	r1, #1
 80060d8:	6121      	str	r1, [r4, #16]
 80060da:	b1c5      	cbz	r5, 800610e <__d2b+0x96>
 80060dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80060e0:	4405      	add	r5, r0
 80060e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80060e6:	603d      	str	r5, [r7, #0]
 80060e8:	6030      	str	r0, [r6, #0]
 80060ea:	4620      	mov	r0, r4
 80060ec:	b002      	add	sp, #8
 80060ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060f6:	e7d6      	b.n	80060a6 <__d2b+0x2e>
 80060f8:	6161      	str	r1, [r4, #20]
 80060fa:	e7e7      	b.n	80060cc <__d2b+0x54>
 80060fc:	a801      	add	r0, sp, #4
 80060fe:	f7ff fce7 	bl	8005ad0 <__lo0bits>
 8006102:	9b01      	ldr	r3, [sp, #4]
 8006104:	6163      	str	r3, [r4, #20]
 8006106:	2101      	movs	r1, #1
 8006108:	6121      	str	r1, [r4, #16]
 800610a:	3020      	adds	r0, #32
 800610c:	e7e5      	b.n	80060da <__d2b+0x62>
 800610e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006112:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006116:	6038      	str	r0, [r7, #0]
 8006118:	6918      	ldr	r0, [r3, #16]
 800611a:	f7ff fcb9 	bl	8005a90 <__hi0bits>
 800611e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006122:	6031      	str	r1, [r6, #0]
 8006124:	e7e1      	b.n	80060ea <__d2b+0x72>
 8006126:	bf00      	nop
 8006128:	08007580 	.word	0x08007580
 800612c:	0800760c 	.word	0x0800760c

08006130 <__ratio>:
 8006130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006134:	4688      	mov	r8, r1
 8006136:	4669      	mov	r1, sp
 8006138:	4681      	mov	r9, r0
 800613a:	f7ff ff49 	bl	8005fd0 <__b2d>
 800613e:	460f      	mov	r7, r1
 8006140:	4604      	mov	r4, r0
 8006142:	460d      	mov	r5, r1
 8006144:	4640      	mov	r0, r8
 8006146:	a901      	add	r1, sp, #4
 8006148:	f7ff ff42 	bl	8005fd0 <__b2d>
 800614c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006150:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006154:	eba3 0c02 	sub.w	ip, r3, r2
 8006158:	e9dd 3200 	ldrd	r3, r2, [sp]
 800615c:	1a9b      	subs	r3, r3, r2
 800615e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006162:	2b00      	cmp	r3, #0
 8006164:	bfd5      	itete	le
 8006166:	460a      	movle	r2, r1
 8006168:	462a      	movgt	r2, r5
 800616a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800616e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006172:	468b      	mov	fp, r1
 8006174:	bfd8      	it	le
 8006176:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800617a:	465b      	mov	r3, fp
 800617c:	4602      	mov	r2, r0
 800617e:	4639      	mov	r1, r7
 8006180:	4620      	mov	r0, r4
 8006182:	f7fa fb6b 	bl	800085c <__aeabi_ddiv>
 8006186:	b003      	add	sp, #12
 8006188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800618c <__copybits>:
 800618c:	3901      	subs	r1, #1
 800618e:	b570      	push	{r4, r5, r6, lr}
 8006190:	1149      	asrs	r1, r1, #5
 8006192:	6914      	ldr	r4, [r2, #16]
 8006194:	3101      	adds	r1, #1
 8006196:	f102 0314 	add.w	r3, r2, #20
 800619a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800619e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80061a2:	1f05      	subs	r5, r0, #4
 80061a4:	42a3      	cmp	r3, r4
 80061a6:	d30c      	bcc.n	80061c2 <__copybits+0x36>
 80061a8:	1aa3      	subs	r3, r4, r2
 80061aa:	3b11      	subs	r3, #17
 80061ac:	f023 0303 	bic.w	r3, r3, #3
 80061b0:	3211      	adds	r2, #17
 80061b2:	42a2      	cmp	r2, r4
 80061b4:	bf88      	it	hi
 80061b6:	2300      	movhi	r3, #0
 80061b8:	4418      	add	r0, r3
 80061ba:	2300      	movs	r3, #0
 80061bc:	4288      	cmp	r0, r1
 80061be:	d305      	bcc.n	80061cc <__copybits+0x40>
 80061c0:	bd70      	pop	{r4, r5, r6, pc}
 80061c2:	f853 6b04 	ldr.w	r6, [r3], #4
 80061c6:	f845 6f04 	str.w	r6, [r5, #4]!
 80061ca:	e7eb      	b.n	80061a4 <__copybits+0x18>
 80061cc:	f840 3b04 	str.w	r3, [r0], #4
 80061d0:	e7f4      	b.n	80061bc <__copybits+0x30>

080061d2 <__any_on>:
 80061d2:	f100 0214 	add.w	r2, r0, #20
 80061d6:	6900      	ldr	r0, [r0, #16]
 80061d8:	114b      	asrs	r3, r1, #5
 80061da:	4298      	cmp	r0, r3
 80061dc:	b510      	push	{r4, lr}
 80061de:	db11      	blt.n	8006204 <__any_on+0x32>
 80061e0:	dd0a      	ble.n	80061f8 <__any_on+0x26>
 80061e2:	f011 011f 	ands.w	r1, r1, #31
 80061e6:	d007      	beq.n	80061f8 <__any_on+0x26>
 80061e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80061ec:	fa24 f001 	lsr.w	r0, r4, r1
 80061f0:	fa00 f101 	lsl.w	r1, r0, r1
 80061f4:	428c      	cmp	r4, r1
 80061f6:	d10b      	bne.n	8006210 <__any_on+0x3e>
 80061f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d803      	bhi.n	8006208 <__any_on+0x36>
 8006200:	2000      	movs	r0, #0
 8006202:	bd10      	pop	{r4, pc}
 8006204:	4603      	mov	r3, r0
 8006206:	e7f7      	b.n	80061f8 <__any_on+0x26>
 8006208:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800620c:	2900      	cmp	r1, #0
 800620e:	d0f5      	beq.n	80061fc <__any_on+0x2a>
 8006210:	2001      	movs	r0, #1
 8006212:	e7f6      	b.n	8006202 <__any_on+0x30>

08006214 <_calloc_r>:
 8006214:	b570      	push	{r4, r5, r6, lr}
 8006216:	fba1 5402 	umull	r5, r4, r1, r2
 800621a:	b934      	cbnz	r4, 800622a <_calloc_r+0x16>
 800621c:	4629      	mov	r1, r5
 800621e:	f000 f877 	bl	8006310 <_malloc_r>
 8006222:	4606      	mov	r6, r0
 8006224:	b928      	cbnz	r0, 8006232 <_calloc_r+0x1e>
 8006226:	4630      	mov	r0, r6
 8006228:	bd70      	pop	{r4, r5, r6, pc}
 800622a:	220c      	movs	r2, #12
 800622c:	6002      	str	r2, [r0, #0]
 800622e:	2600      	movs	r6, #0
 8006230:	e7f9      	b.n	8006226 <_calloc_r+0x12>
 8006232:	462a      	mov	r2, r5
 8006234:	4621      	mov	r1, r4
 8006236:	f7fc fc09 	bl	8002a4c <memset>
 800623a:	e7f4      	b.n	8006226 <_calloc_r+0x12>

0800623c <_free_r>:
 800623c:	b538      	push	{r3, r4, r5, lr}
 800623e:	4605      	mov	r5, r0
 8006240:	2900      	cmp	r1, #0
 8006242:	d041      	beq.n	80062c8 <_free_r+0x8c>
 8006244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006248:	1f0c      	subs	r4, r1, #4
 800624a:	2b00      	cmp	r3, #0
 800624c:	bfb8      	it	lt
 800624e:	18e4      	addlt	r4, r4, r3
 8006250:	f000 fab0 	bl	80067b4 <__malloc_lock>
 8006254:	4a1d      	ldr	r2, [pc, #116]	; (80062cc <_free_r+0x90>)
 8006256:	6813      	ldr	r3, [r2, #0]
 8006258:	b933      	cbnz	r3, 8006268 <_free_r+0x2c>
 800625a:	6063      	str	r3, [r4, #4]
 800625c:	6014      	str	r4, [r2, #0]
 800625e:	4628      	mov	r0, r5
 8006260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006264:	f000 baac 	b.w	80067c0 <__malloc_unlock>
 8006268:	42a3      	cmp	r3, r4
 800626a:	d908      	bls.n	800627e <_free_r+0x42>
 800626c:	6820      	ldr	r0, [r4, #0]
 800626e:	1821      	adds	r1, r4, r0
 8006270:	428b      	cmp	r3, r1
 8006272:	bf01      	itttt	eq
 8006274:	6819      	ldreq	r1, [r3, #0]
 8006276:	685b      	ldreq	r3, [r3, #4]
 8006278:	1809      	addeq	r1, r1, r0
 800627a:	6021      	streq	r1, [r4, #0]
 800627c:	e7ed      	b.n	800625a <_free_r+0x1e>
 800627e:	461a      	mov	r2, r3
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	b10b      	cbz	r3, 8006288 <_free_r+0x4c>
 8006284:	42a3      	cmp	r3, r4
 8006286:	d9fa      	bls.n	800627e <_free_r+0x42>
 8006288:	6811      	ldr	r1, [r2, #0]
 800628a:	1850      	adds	r0, r2, r1
 800628c:	42a0      	cmp	r0, r4
 800628e:	d10b      	bne.n	80062a8 <_free_r+0x6c>
 8006290:	6820      	ldr	r0, [r4, #0]
 8006292:	4401      	add	r1, r0
 8006294:	1850      	adds	r0, r2, r1
 8006296:	4283      	cmp	r3, r0
 8006298:	6011      	str	r1, [r2, #0]
 800629a:	d1e0      	bne.n	800625e <_free_r+0x22>
 800629c:	6818      	ldr	r0, [r3, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	6053      	str	r3, [r2, #4]
 80062a2:	4401      	add	r1, r0
 80062a4:	6011      	str	r1, [r2, #0]
 80062a6:	e7da      	b.n	800625e <_free_r+0x22>
 80062a8:	d902      	bls.n	80062b0 <_free_r+0x74>
 80062aa:	230c      	movs	r3, #12
 80062ac:	602b      	str	r3, [r5, #0]
 80062ae:	e7d6      	b.n	800625e <_free_r+0x22>
 80062b0:	6820      	ldr	r0, [r4, #0]
 80062b2:	1821      	adds	r1, r4, r0
 80062b4:	428b      	cmp	r3, r1
 80062b6:	bf04      	itt	eq
 80062b8:	6819      	ldreq	r1, [r3, #0]
 80062ba:	685b      	ldreq	r3, [r3, #4]
 80062bc:	6063      	str	r3, [r4, #4]
 80062be:	bf04      	itt	eq
 80062c0:	1809      	addeq	r1, r1, r0
 80062c2:	6021      	streq	r1, [r4, #0]
 80062c4:	6054      	str	r4, [r2, #4]
 80062c6:	e7ca      	b.n	800625e <_free_r+0x22>
 80062c8:	bd38      	pop	{r3, r4, r5, pc}
 80062ca:	bf00      	nop
 80062cc:	20000464 	.word	0x20000464

080062d0 <sbrk_aligned>:
 80062d0:	b570      	push	{r4, r5, r6, lr}
 80062d2:	4e0e      	ldr	r6, [pc, #56]	; (800630c <sbrk_aligned+0x3c>)
 80062d4:	460c      	mov	r4, r1
 80062d6:	6831      	ldr	r1, [r6, #0]
 80062d8:	4605      	mov	r5, r0
 80062da:	b911      	cbnz	r1, 80062e2 <sbrk_aligned+0x12>
 80062dc:	f000 f9ee 	bl	80066bc <_sbrk_r>
 80062e0:	6030      	str	r0, [r6, #0]
 80062e2:	4621      	mov	r1, r4
 80062e4:	4628      	mov	r0, r5
 80062e6:	f000 f9e9 	bl	80066bc <_sbrk_r>
 80062ea:	1c43      	adds	r3, r0, #1
 80062ec:	d00a      	beq.n	8006304 <sbrk_aligned+0x34>
 80062ee:	1cc4      	adds	r4, r0, #3
 80062f0:	f024 0403 	bic.w	r4, r4, #3
 80062f4:	42a0      	cmp	r0, r4
 80062f6:	d007      	beq.n	8006308 <sbrk_aligned+0x38>
 80062f8:	1a21      	subs	r1, r4, r0
 80062fa:	4628      	mov	r0, r5
 80062fc:	f000 f9de 	bl	80066bc <_sbrk_r>
 8006300:	3001      	adds	r0, #1
 8006302:	d101      	bne.n	8006308 <sbrk_aligned+0x38>
 8006304:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006308:	4620      	mov	r0, r4
 800630a:	bd70      	pop	{r4, r5, r6, pc}
 800630c:	20000468 	.word	0x20000468

08006310 <_malloc_r>:
 8006310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006314:	1ccd      	adds	r5, r1, #3
 8006316:	f025 0503 	bic.w	r5, r5, #3
 800631a:	3508      	adds	r5, #8
 800631c:	2d0c      	cmp	r5, #12
 800631e:	bf38      	it	cc
 8006320:	250c      	movcc	r5, #12
 8006322:	2d00      	cmp	r5, #0
 8006324:	4607      	mov	r7, r0
 8006326:	db01      	blt.n	800632c <_malloc_r+0x1c>
 8006328:	42a9      	cmp	r1, r5
 800632a:	d905      	bls.n	8006338 <_malloc_r+0x28>
 800632c:	230c      	movs	r3, #12
 800632e:	603b      	str	r3, [r7, #0]
 8006330:	2600      	movs	r6, #0
 8006332:	4630      	mov	r0, r6
 8006334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006338:	4e2e      	ldr	r6, [pc, #184]	; (80063f4 <_malloc_r+0xe4>)
 800633a:	f000 fa3b 	bl	80067b4 <__malloc_lock>
 800633e:	6833      	ldr	r3, [r6, #0]
 8006340:	461c      	mov	r4, r3
 8006342:	bb34      	cbnz	r4, 8006392 <_malloc_r+0x82>
 8006344:	4629      	mov	r1, r5
 8006346:	4638      	mov	r0, r7
 8006348:	f7ff ffc2 	bl	80062d0 <sbrk_aligned>
 800634c:	1c43      	adds	r3, r0, #1
 800634e:	4604      	mov	r4, r0
 8006350:	d14d      	bne.n	80063ee <_malloc_r+0xde>
 8006352:	6834      	ldr	r4, [r6, #0]
 8006354:	4626      	mov	r6, r4
 8006356:	2e00      	cmp	r6, #0
 8006358:	d140      	bne.n	80063dc <_malloc_r+0xcc>
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	4631      	mov	r1, r6
 800635e:	4638      	mov	r0, r7
 8006360:	eb04 0803 	add.w	r8, r4, r3
 8006364:	f000 f9aa 	bl	80066bc <_sbrk_r>
 8006368:	4580      	cmp	r8, r0
 800636a:	d13a      	bne.n	80063e2 <_malloc_r+0xd2>
 800636c:	6821      	ldr	r1, [r4, #0]
 800636e:	3503      	adds	r5, #3
 8006370:	1a6d      	subs	r5, r5, r1
 8006372:	f025 0503 	bic.w	r5, r5, #3
 8006376:	3508      	adds	r5, #8
 8006378:	2d0c      	cmp	r5, #12
 800637a:	bf38      	it	cc
 800637c:	250c      	movcc	r5, #12
 800637e:	4629      	mov	r1, r5
 8006380:	4638      	mov	r0, r7
 8006382:	f7ff ffa5 	bl	80062d0 <sbrk_aligned>
 8006386:	3001      	adds	r0, #1
 8006388:	d02b      	beq.n	80063e2 <_malloc_r+0xd2>
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	442b      	add	r3, r5
 800638e:	6023      	str	r3, [r4, #0]
 8006390:	e00e      	b.n	80063b0 <_malloc_r+0xa0>
 8006392:	6822      	ldr	r2, [r4, #0]
 8006394:	1b52      	subs	r2, r2, r5
 8006396:	d41e      	bmi.n	80063d6 <_malloc_r+0xc6>
 8006398:	2a0b      	cmp	r2, #11
 800639a:	d916      	bls.n	80063ca <_malloc_r+0xba>
 800639c:	1961      	adds	r1, r4, r5
 800639e:	42a3      	cmp	r3, r4
 80063a0:	6025      	str	r5, [r4, #0]
 80063a2:	bf18      	it	ne
 80063a4:	6059      	strne	r1, [r3, #4]
 80063a6:	6863      	ldr	r3, [r4, #4]
 80063a8:	bf08      	it	eq
 80063aa:	6031      	streq	r1, [r6, #0]
 80063ac:	5162      	str	r2, [r4, r5]
 80063ae:	604b      	str	r3, [r1, #4]
 80063b0:	4638      	mov	r0, r7
 80063b2:	f104 060b 	add.w	r6, r4, #11
 80063b6:	f000 fa03 	bl	80067c0 <__malloc_unlock>
 80063ba:	f026 0607 	bic.w	r6, r6, #7
 80063be:	1d23      	adds	r3, r4, #4
 80063c0:	1af2      	subs	r2, r6, r3
 80063c2:	d0b6      	beq.n	8006332 <_malloc_r+0x22>
 80063c4:	1b9b      	subs	r3, r3, r6
 80063c6:	50a3      	str	r3, [r4, r2]
 80063c8:	e7b3      	b.n	8006332 <_malloc_r+0x22>
 80063ca:	6862      	ldr	r2, [r4, #4]
 80063cc:	42a3      	cmp	r3, r4
 80063ce:	bf0c      	ite	eq
 80063d0:	6032      	streq	r2, [r6, #0]
 80063d2:	605a      	strne	r2, [r3, #4]
 80063d4:	e7ec      	b.n	80063b0 <_malloc_r+0xa0>
 80063d6:	4623      	mov	r3, r4
 80063d8:	6864      	ldr	r4, [r4, #4]
 80063da:	e7b2      	b.n	8006342 <_malloc_r+0x32>
 80063dc:	4634      	mov	r4, r6
 80063de:	6876      	ldr	r6, [r6, #4]
 80063e0:	e7b9      	b.n	8006356 <_malloc_r+0x46>
 80063e2:	230c      	movs	r3, #12
 80063e4:	603b      	str	r3, [r7, #0]
 80063e6:	4638      	mov	r0, r7
 80063e8:	f000 f9ea 	bl	80067c0 <__malloc_unlock>
 80063ec:	e7a1      	b.n	8006332 <_malloc_r+0x22>
 80063ee:	6025      	str	r5, [r4, #0]
 80063f0:	e7de      	b.n	80063b0 <_malloc_r+0xa0>
 80063f2:	bf00      	nop
 80063f4:	20000464 	.word	0x20000464

080063f8 <__ssputs_r>:
 80063f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063fc:	688e      	ldr	r6, [r1, #8]
 80063fe:	429e      	cmp	r6, r3
 8006400:	4682      	mov	sl, r0
 8006402:	460c      	mov	r4, r1
 8006404:	4690      	mov	r8, r2
 8006406:	461f      	mov	r7, r3
 8006408:	d838      	bhi.n	800647c <__ssputs_r+0x84>
 800640a:	898a      	ldrh	r2, [r1, #12]
 800640c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006410:	d032      	beq.n	8006478 <__ssputs_r+0x80>
 8006412:	6825      	ldr	r5, [r4, #0]
 8006414:	6909      	ldr	r1, [r1, #16]
 8006416:	eba5 0901 	sub.w	r9, r5, r1
 800641a:	6965      	ldr	r5, [r4, #20]
 800641c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006420:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006424:	3301      	adds	r3, #1
 8006426:	444b      	add	r3, r9
 8006428:	106d      	asrs	r5, r5, #1
 800642a:	429d      	cmp	r5, r3
 800642c:	bf38      	it	cc
 800642e:	461d      	movcc	r5, r3
 8006430:	0553      	lsls	r3, r2, #21
 8006432:	d531      	bpl.n	8006498 <__ssputs_r+0xa0>
 8006434:	4629      	mov	r1, r5
 8006436:	f7ff ff6b 	bl	8006310 <_malloc_r>
 800643a:	4606      	mov	r6, r0
 800643c:	b950      	cbnz	r0, 8006454 <__ssputs_r+0x5c>
 800643e:	230c      	movs	r3, #12
 8006440:	f8ca 3000 	str.w	r3, [sl]
 8006444:	89a3      	ldrh	r3, [r4, #12]
 8006446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800644a:	81a3      	strh	r3, [r4, #12]
 800644c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006454:	6921      	ldr	r1, [r4, #16]
 8006456:	464a      	mov	r2, r9
 8006458:	f7ff fa1a 	bl	8005890 <memcpy>
 800645c:	89a3      	ldrh	r3, [r4, #12]
 800645e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006466:	81a3      	strh	r3, [r4, #12]
 8006468:	6126      	str	r6, [r4, #16]
 800646a:	6165      	str	r5, [r4, #20]
 800646c:	444e      	add	r6, r9
 800646e:	eba5 0509 	sub.w	r5, r5, r9
 8006472:	6026      	str	r6, [r4, #0]
 8006474:	60a5      	str	r5, [r4, #8]
 8006476:	463e      	mov	r6, r7
 8006478:	42be      	cmp	r6, r7
 800647a:	d900      	bls.n	800647e <__ssputs_r+0x86>
 800647c:	463e      	mov	r6, r7
 800647e:	6820      	ldr	r0, [r4, #0]
 8006480:	4632      	mov	r2, r6
 8006482:	4641      	mov	r1, r8
 8006484:	f000 f97c 	bl	8006780 <memmove>
 8006488:	68a3      	ldr	r3, [r4, #8]
 800648a:	1b9b      	subs	r3, r3, r6
 800648c:	60a3      	str	r3, [r4, #8]
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	4433      	add	r3, r6
 8006492:	6023      	str	r3, [r4, #0]
 8006494:	2000      	movs	r0, #0
 8006496:	e7db      	b.n	8006450 <__ssputs_r+0x58>
 8006498:	462a      	mov	r2, r5
 800649a:	f000 f997 	bl	80067cc <_realloc_r>
 800649e:	4606      	mov	r6, r0
 80064a0:	2800      	cmp	r0, #0
 80064a2:	d1e1      	bne.n	8006468 <__ssputs_r+0x70>
 80064a4:	6921      	ldr	r1, [r4, #16]
 80064a6:	4650      	mov	r0, sl
 80064a8:	f7ff fec8 	bl	800623c <_free_r>
 80064ac:	e7c7      	b.n	800643e <__ssputs_r+0x46>
	...

080064b0 <_svfiprintf_r>:
 80064b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b4:	4698      	mov	r8, r3
 80064b6:	898b      	ldrh	r3, [r1, #12]
 80064b8:	061b      	lsls	r3, r3, #24
 80064ba:	b09d      	sub	sp, #116	; 0x74
 80064bc:	4607      	mov	r7, r0
 80064be:	460d      	mov	r5, r1
 80064c0:	4614      	mov	r4, r2
 80064c2:	d50e      	bpl.n	80064e2 <_svfiprintf_r+0x32>
 80064c4:	690b      	ldr	r3, [r1, #16]
 80064c6:	b963      	cbnz	r3, 80064e2 <_svfiprintf_r+0x32>
 80064c8:	2140      	movs	r1, #64	; 0x40
 80064ca:	f7ff ff21 	bl	8006310 <_malloc_r>
 80064ce:	6028      	str	r0, [r5, #0]
 80064d0:	6128      	str	r0, [r5, #16]
 80064d2:	b920      	cbnz	r0, 80064de <_svfiprintf_r+0x2e>
 80064d4:	230c      	movs	r3, #12
 80064d6:	603b      	str	r3, [r7, #0]
 80064d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064dc:	e0d1      	b.n	8006682 <_svfiprintf_r+0x1d2>
 80064de:	2340      	movs	r3, #64	; 0x40
 80064e0:	616b      	str	r3, [r5, #20]
 80064e2:	2300      	movs	r3, #0
 80064e4:	9309      	str	r3, [sp, #36]	; 0x24
 80064e6:	2320      	movs	r3, #32
 80064e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80064f0:	2330      	movs	r3, #48	; 0x30
 80064f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800669c <_svfiprintf_r+0x1ec>
 80064f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064fa:	f04f 0901 	mov.w	r9, #1
 80064fe:	4623      	mov	r3, r4
 8006500:	469a      	mov	sl, r3
 8006502:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006506:	b10a      	cbz	r2, 800650c <_svfiprintf_r+0x5c>
 8006508:	2a25      	cmp	r2, #37	; 0x25
 800650a:	d1f9      	bne.n	8006500 <_svfiprintf_r+0x50>
 800650c:	ebba 0b04 	subs.w	fp, sl, r4
 8006510:	d00b      	beq.n	800652a <_svfiprintf_r+0x7a>
 8006512:	465b      	mov	r3, fp
 8006514:	4622      	mov	r2, r4
 8006516:	4629      	mov	r1, r5
 8006518:	4638      	mov	r0, r7
 800651a:	f7ff ff6d 	bl	80063f8 <__ssputs_r>
 800651e:	3001      	adds	r0, #1
 8006520:	f000 80aa 	beq.w	8006678 <_svfiprintf_r+0x1c8>
 8006524:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006526:	445a      	add	r2, fp
 8006528:	9209      	str	r2, [sp, #36]	; 0x24
 800652a:	f89a 3000 	ldrb.w	r3, [sl]
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 80a2 	beq.w	8006678 <_svfiprintf_r+0x1c8>
 8006534:	2300      	movs	r3, #0
 8006536:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800653a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800653e:	f10a 0a01 	add.w	sl, sl, #1
 8006542:	9304      	str	r3, [sp, #16]
 8006544:	9307      	str	r3, [sp, #28]
 8006546:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800654a:	931a      	str	r3, [sp, #104]	; 0x68
 800654c:	4654      	mov	r4, sl
 800654e:	2205      	movs	r2, #5
 8006550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006554:	4851      	ldr	r0, [pc, #324]	; (800669c <_svfiprintf_r+0x1ec>)
 8006556:	f7f9 fe4b 	bl	80001f0 <memchr>
 800655a:	9a04      	ldr	r2, [sp, #16]
 800655c:	b9d8      	cbnz	r0, 8006596 <_svfiprintf_r+0xe6>
 800655e:	06d0      	lsls	r0, r2, #27
 8006560:	bf44      	itt	mi
 8006562:	2320      	movmi	r3, #32
 8006564:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006568:	0711      	lsls	r1, r2, #28
 800656a:	bf44      	itt	mi
 800656c:	232b      	movmi	r3, #43	; 0x2b
 800656e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006572:	f89a 3000 	ldrb.w	r3, [sl]
 8006576:	2b2a      	cmp	r3, #42	; 0x2a
 8006578:	d015      	beq.n	80065a6 <_svfiprintf_r+0xf6>
 800657a:	9a07      	ldr	r2, [sp, #28]
 800657c:	4654      	mov	r4, sl
 800657e:	2000      	movs	r0, #0
 8006580:	f04f 0c0a 	mov.w	ip, #10
 8006584:	4621      	mov	r1, r4
 8006586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800658a:	3b30      	subs	r3, #48	; 0x30
 800658c:	2b09      	cmp	r3, #9
 800658e:	d94e      	bls.n	800662e <_svfiprintf_r+0x17e>
 8006590:	b1b0      	cbz	r0, 80065c0 <_svfiprintf_r+0x110>
 8006592:	9207      	str	r2, [sp, #28]
 8006594:	e014      	b.n	80065c0 <_svfiprintf_r+0x110>
 8006596:	eba0 0308 	sub.w	r3, r0, r8
 800659a:	fa09 f303 	lsl.w	r3, r9, r3
 800659e:	4313      	orrs	r3, r2
 80065a0:	9304      	str	r3, [sp, #16]
 80065a2:	46a2      	mov	sl, r4
 80065a4:	e7d2      	b.n	800654c <_svfiprintf_r+0x9c>
 80065a6:	9b03      	ldr	r3, [sp, #12]
 80065a8:	1d19      	adds	r1, r3, #4
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	9103      	str	r1, [sp, #12]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	bfbb      	ittet	lt
 80065b2:	425b      	neglt	r3, r3
 80065b4:	f042 0202 	orrlt.w	r2, r2, #2
 80065b8:	9307      	strge	r3, [sp, #28]
 80065ba:	9307      	strlt	r3, [sp, #28]
 80065bc:	bfb8      	it	lt
 80065be:	9204      	strlt	r2, [sp, #16]
 80065c0:	7823      	ldrb	r3, [r4, #0]
 80065c2:	2b2e      	cmp	r3, #46	; 0x2e
 80065c4:	d10c      	bne.n	80065e0 <_svfiprintf_r+0x130>
 80065c6:	7863      	ldrb	r3, [r4, #1]
 80065c8:	2b2a      	cmp	r3, #42	; 0x2a
 80065ca:	d135      	bne.n	8006638 <_svfiprintf_r+0x188>
 80065cc:	9b03      	ldr	r3, [sp, #12]
 80065ce:	1d1a      	adds	r2, r3, #4
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	9203      	str	r2, [sp, #12]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	bfb8      	it	lt
 80065d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80065dc:	3402      	adds	r4, #2
 80065de:	9305      	str	r3, [sp, #20]
 80065e0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80066a0 <_svfiprintf_r+0x1f0>
 80065e4:	7821      	ldrb	r1, [r4, #0]
 80065e6:	2203      	movs	r2, #3
 80065e8:	4650      	mov	r0, sl
 80065ea:	f7f9 fe01 	bl	80001f0 <memchr>
 80065ee:	b140      	cbz	r0, 8006602 <_svfiprintf_r+0x152>
 80065f0:	2340      	movs	r3, #64	; 0x40
 80065f2:	eba0 000a 	sub.w	r0, r0, sl
 80065f6:	fa03 f000 	lsl.w	r0, r3, r0
 80065fa:	9b04      	ldr	r3, [sp, #16]
 80065fc:	4303      	orrs	r3, r0
 80065fe:	3401      	adds	r4, #1
 8006600:	9304      	str	r3, [sp, #16]
 8006602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006606:	4827      	ldr	r0, [pc, #156]	; (80066a4 <_svfiprintf_r+0x1f4>)
 8006608:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800660c:	2206      	movs	r2, #6
 800660e:	f7f9 fdef 	bl	80001f0 <memchr>
 8006612:	2800      	cmp	r0, #0
 8006614:	d038      	beq.n	8006688 <_svfiprintf_r+0x1d8>
 8006616:	4b24      	ldr	r3, [pc, #144]	; (80066a8 <_svfiprintf_r+0x1f8>)
 8006618:	bb1b      	cbnz	r3, 8006662 <_svfiprintf_r+0x1b2>
 800661a:	9b03      	ldr	r3, [sp, #12]
 800661c:	3307      	adds	r3, #7
 800661e:	f023 0307 	bic.w	r3, r3, #7
 8006622:	3308      	adds	r3, #8
 8006624:	9303      	str	r3, [sp, #12]
 8006626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006628:	4433      	add	r3, r6
 800662a:	9309      	str	r3, [sp, #36]	; 0x24
 800662c:	e767      	b.n	80064fe <_svfiprintf_r+0x4e>
 800662e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006632:	460c      	mov	r4, r1
 8006634:	2001      	movs	r0, #1
 8006636:	e7a5      	b.n	8006584 <_svfiprintf_r+0xd4>
 8006638:	2300      	movs	r3, #0
 800663a:	3401      	adds	r4, #1
 800663c:	9305      	str	r3, [sp, #20]
 800663e:	4619      	mov	r1, r3
 8006640:	f04f 0c0a 	mov.w	ip, #10
 8006644:	4620      	mov	r0, r4
 8006646:	f810 2b01 	ldrb.w	r2, [r0], #1
 800664a:	3a30      	subs	r2, #48	; 0x30
 800664c:	2a09      	cmp	r2, #9
 800664e:	d903      	bls.n	8006658 <_svfiprintf_r+0x1a8>
 8006650:	2b00      	cmp	r3, #0
 8006652:	d0c5      	beq.n	80065e0 <_svfiprintf_r+0x130>
 8006654:	9105      	str	r1, [sp, #20]
 8006656:	e7c3      	b.n	80065e0 <_svfiprintf_r+0x130>
 8006658:	fb0c 2101 	mla	r1, ip, r1, r2
 800665c:	4604      	mov	r4, r0
 800665e:	2301      	movs	r3, #1
 8006660:	e7f0      	b.n	8006644 <_svfiprintf_r+0x194>
 8006662:	ab03      	add	r3, sp, #12
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	462a      	mov	r2, r5
 8006668:	4b10      	ldr	r3, [pc, #64]	; (80066ac <_svfiprintf_r+0x1fc>)
 800666a:	a904      	add	r1, sp, #16
 800666c:	4638      	mov	r0, r7
 800666e:	f7fc fa93 	bl	8002b98 <_printf_float>
 8006672:	1c42      	adds	r2, r0, #1
 8006674:	4606      	mov	r6, r0
 8006676:	d1d6      	bne.n	8006626 <_svfiprintf_r+0x176>
 8006678:	89ab      	ldrh	r3, [r5, #12]
 800667a:	065b      	lsls	r3, r3, #25
 800667c:	f53f af2c 	bmi.w	80064d8 <_svfiprintf_r+0x28>
 8006680:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006682:	b01d      	add	sp, #116	; 0x74
 8006684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006688:	ab03      	add	r3, sp, #12
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	462a      	mov	r2, r5
 800668e:	4b07      	ldr	r3, [pc, #28]	; (80066ac <_svfiprintf_r+0x1fc>)
 8006690:	a904      	add	r1, sp, #16
 8006692:	4638      	mov	r0, r7
 8006694:	f7fc fd18 	bl	80030c8 <_printf_i>
 8006698:	e7eb      	b.n	8006672 <_svfiprintf_r+0x1c2>
 800669a:	bf00      	nop
 800669c:	08007764 	.word	0x08007764
 80066a0:	0800776a 	.word	0x0800776a
 80066a4:	0800776e 	.word	0x0800776e
 80066a8:	08002b99 	.word	0x08002b99
 80066ac:	080063f9 	.word	0x080063f9

080066b0 <nan>:
 80066b0:	4901      	ldr	r1, [pc, #4]	; (80066b8 <nan+0x8>)
 80066b2:	2000      	movs	r0, #0
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	7ff80000 	.word	0x7ff80000

080066bc <_sbrk_r>:
 80066bc:	b538      	push	{r3, r4, r5, lr}
 80066be:	4d06      	ldr	r5, [pc, #24]	; (80066d8 <_sbrk_r+0x1c>)
 80066c0:	2300      	movs	r3, #0
 80066c2:	4604      	mov	r4, r0
 80066c4:	4608      	mov	r0, r1
 80066c6:	602b      	str	r3, [r5, #0]
 80066c8:	f000 fe1a 	bl	8007300 <_sbrk>
 80066cc:	1c43      	adds	r3, r0, #1
 80066ce:	d102      	bne.n	80066d6 <_sbrk_r+0x1a>
 80066d0:	682b      	ldr	r3, [r5, #0]
 80066d2:	b103      	cbz	r3, 80066d6 <_sbrk_r+0x1a>
 80066d4:	6023      	str	r3, [r4, #0]
 80066d6:	bd38      	pop	{r3, r4, r5, pc}
 80066d8:	2000046c 	.word	0x2000046c

080066dc <strncmp>:
 80066dc:	b510      	push	{r4, lr}
 80066de:	4603      	mov	r3, r0
 80066e0:	b172      	cbz	r2, 8006700 <strncmp+0x24>
 80066e2:	3901      	subs	r1, #1
 80066e4:	1884      	adds	r4, r0, r2
 80066e6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80066ea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80066ee:	4290      	cmp	r0, r2
 80066f0:	d101      	bne.n	80066f6 <strncmp+0x1a>
 80066f2:	42a3      	cmp	r3, r4
 80066f4:	d101      	bne.n	80066fa <strncmp+0x1e>
 80066f6:	1a80      	subs	r0, r0, r2
 80066f8:	bd10      	pop	{r4, pc}
 80066fa:	2800      	cmp	r0, #0
 80066fc:	d1f3      	bne.n	80066e6 <strncmp+0xa>
 80066fe:	e7fa      	b.n	80066f6 <strncmp+0x1a>
 8006700:	4610      	mov	r0, r2
 8006702:	e7f9      	b.n	80066f8 <strncmp+0x1c>

08006704 <__ascii_wctomb>:
 8006704:	4603      	mov	r3, r0
 8006706:	4608      	mov	r0, r1
 8006708:	b141      	cbz	r1, 800671c <__ascii_wctomb+0x18>
 800670a:	2aff      	cmp	r2, #255	; 0xff
 800670c:	d904      	bls.n	8006718 <__ascii_wctomb+0x14>
 800670e:	228a      	movs	r2, #138	; 0x8a
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006716:	4770      	bx	lr
 8006718:	700a      	strb	r2, [r1, #0]
 800671a:	2001      	movs	r0, #1
 800671c:	4770      	bx	lr
	...

08006720 <__assert_func>:
 8006720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006722:	4614      	mov	r4, r2
 8006724:	461a      	mov	r2, r3
 8006726:	4b09      	ldr	r3, [pc, #36]	; (800674c <__assert_func+0x2c>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4605      	mov	r5, r0
 800672c:	68d8      	ldr	r0, [r3, #12]
 800672e:	b14c      	cbz	r4, 8006744 <__assert_func+0x24>
 8006730:	4b07      	ldr	r3, [pc, #28]	; (8006750 <__assert_func+0x30>)
 8006732:	9100      	str	r1, [sp, #0]
 8006734:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006738:	4906      	ldr	r1, [pc, #24]	; (8006754 <__assert_func+0x34>)
 800673a:	462b      	mov	r3, r5
 800673c:	f000 f80e 	bl	800675c <fiprintf>
 8006740:	f000 fa8a 	bl	8006c58 <abort>
 8006744:	4b04      	ldr	r3, [pc, #16]	; (8006758 <__assert_func+0x38>)
 8006746:	461c      	mov	r4, r3
 8006748:	e7f3      	b.n	8006732 <__assert_func+0x12>
 800674a:	bf00      	nop
 800674c:	20000044 	.word	0x20000044
 8006750:	08007775 	.word	0x08007775
 8006754:	08007782 	.word	0x08007782
 8006758:	080077b0 	.word	0x080077b0

0800675c <fiprintf>:
 800675c:	b40e      	push	{r1, r2, r3}
 800675e:	b503      	push	{r0, r1, lr}
 8006760:	4601      	mov	r1, r0
 8006762:	ab03      	add	r3, sp, #12
 8006764:	4805      	ldr	r0, [pc, #20]	; (800677c <fiprintf+0x20>)
 8006766:	f853 2b04 	ldr.w	r2, [r3], #4
 800676a:	6800      	ldr	r0, [r0, #0]
 800676c:	9301      	str	r3, [sp, #4]
 800676e:	f000 f883 	bl	8006878 <_vfiprintf_r>
 8006772:	b002      	add	sp, #8
 8006774:	f85d eb04 	ldr.w	lr, [sp], #4
 8006778:	b003      	add	sp, #12
 800677a:	4770      	bx	lr
 800677c:	20000044 	.word	0x20000044

08006780 <memmove>:
 8006780:	4288      	cmp	r0, r1
 8006782:	b510      	push	{r4, lr}
 8006784:	eb01 0402 	add.w	r4, r1, r2
 8006788:	d902      	bls.n	8006790 <memmove+0x10>
 800678a:	4284      	cmp	r4, r0
 800678c:	4623      	mov	r3, r4
 800678e:	d807      	bhi.n	80067a0 <memmove+0x20>
 8006790:	1e43      	subs	r3, r0, #1
 8006792:	42a1      	cmp	r1, r4
 8006794:	d008      	beq.n	80067a8 <memmove+0x28>
 8006796:	f811 2b01 	ldrb.w	r2, [r1], #1
 800679a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800679e:	e7f8      	b.n	8006792 <memmove+0x12>
 80067a0:	4402      	add	r2, r0
 80067a2:	4601      	mov	r1, r0
 80067a4:	428a      	cmp	r2, r1
 80067a6:	d100      	bne.n	80067aa <memmove+0x2a>
 80067a8:	bd10      	pop	{r4, pc}
 80067aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067b2:	e7f7      	b.n	80067a4 <memmove+0x24>

080067b4 <__malloc_lock>:
 80067b4:	4801      	ldr	r0, [pc, #4]	; (80067bc <__malloc_lock+0x8>)
 80067b6:	f000 bc0b 	b.w	8006fd0 <__retarget_lock_acquire_recursive>
 80067ba:	bf00      	nop
 80067bc:	20000470 	.word	0x20000470

080067c0 <__malloc_unlock>:
 80067c0:	4801      	ldr	r0, [pc, #4]	; (80067c8 <__malloc_unlock+0x8>)
 80067c2:	f000 bc06 	b.w	8006fd2 <__retarget_lock_release_recursive>
 80067c6:	bf00      	nop
 80067c8:	20000470 	.word	0x20000470

080067cc <_realloc_r>:
 80067cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d0:	4680      	mov	r8, r0
 80067d2:	4614      	mov	r4, r2
 80067d4:	460e      	mov	r6, r1
 80067d6:	b921      	cbnz	r1, 80067e2 <_realloc_r+0x16>
 80067d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067dc:	4611      	mov	r1, r2
 80067de:	f7ff bd97 	b.w	8006310 <_malloc_r>
 80067e2:	b92a      	cbnz	r2, 80067f0 <_realloc_r+0x24>
 80067e4:	f7ff fd2a 	bl	800623c <_free_r>
 80067e8:	4625      	mov	r5, r4
 80067ea:	4628      	mov	r0, r5
 80067ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067f0:	f000 fc56 	bl	80070a0 <_malloc_usable_size_r>
 80067f4:	4284      	cmp	r4, r0
 80067f6:	4607      	mov	r7, r0
 80067f8:	d802      	bhi.n	8006800 <_realloc_r+0x34>
 80067fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80067fe:	d812      	bhi.n	8006826 <_realloc_r+0x5a>
 8006800:	4621      	mov	r1, r4
 8006802:	4640      	mov	r0, r8
 8006804:	f7ff fd84 	bl	8006310 <_malloc_r>
 8006808:	4605      	mov	r5, r0
 800680a:	2800      	cmp	r0, #0
 800680c:	d0ed      	beq.n	80067ea <_realloc_r+0x1e>
 800680e:	42bc      	cmp	r4, r7
 8006810:	4622      	mov	r2, r4
 8006812:	4631      	mov	r1, r6
 8006814:	bf28      	it	cs
 8006816:	463a      	movcs	r2, r7
 8006818:	f7ff f83a 	bl	8005890 <memcpy>
 800681c:	4631      	mov	r1, r6
 800681e:	4640      	mov	r0, r8
 8006820:	f7ff fd0c 	bl	800623c <_free_r>
 8006824:	e7e1      	b.n	80067ea <_realloc_r+0x1e>
 8006826:	4635      	mov	r5, r6
 8006828:	e7df      	b.n	80067ea <_realloc_r+0x1e>

0800682a <__sfputc_r>:
 800682a:	6893      	ldr	r3, [r2, #8]
 800682c:	3b01      	subs	r3, #1
 800682e:	2b00      	cmp	r3, #0
 8006830:	b410      	push	{r4}
 8006832:	6093      	str	r3, [r2, #8]
 8006834:	da07      	bge.n	8006846 <__sfputc_r+0x1c>
 8006836:	6994      	ldr	r4, [r2, #24]
 8006838:	42a3      	cmp	r3, r4
 800683a:	db01      	blt.n	8006840 <__sfputc_r+0x16>
 800683c:	290a      	cmp	r1, #10
 800683e:	d102      	bne.n	8006846 <__sfputc_r+0x1c>
 8006840:	bc10      	pop	{r4}
 8006842:	f000 b949 	b.w	8006ad8 <__swbuf_r>
 8006846:	6813      	ldr	r3, [r2, #0]
 8006848:	1c58      	adds	r0, r3, #1
 800684a:	6010      	str	r0, [r2, #0]
 800684c:	7019      	strb	r1, [r3, #0]
 800684e:	4608      	mov	r0, r1
 8006850:	bc10      	pop	{r4}
 8006852:	4770      	bx	lr

08006854 <__sfputs_r>:
 8006854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006856:	4606      	mov	r6, r0
 8006858:	460f      	mov	r7, r1
 800685a:	4614      	mov	r4, r2
 800685c:	18d5      	adds	r5, r2, r3
 800685e:	42ac      	cmp	r4, r5
 8006860:	d101      	bne.n	8006866 <__sfputs_r+0x12>
 8006862:	2000      	movs	r0, #0
 8006864:	e007      	b.n	8006876 <__sfputs_r+0x22>
 8006866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800686a:	463a      	mov	r2, r7
 800686c:	4630      	mov	r0, r6
 800686e:	f7ff ffdc 	bl	800682a <__sfputc_r>
 8006872:	1c43      	adds	r3, r0, #1
 8006874:	d1f3      	bne.n	800685e <__sfputs_r+0xa>
 8006876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006878 <_vfiprintf_r>:
 8006878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687c:	460d      	mov	r5, r1
 800687e:	b09d      	sub	sp, #116	; 0x74
 8006880:	4614      	mov	r4, r2
 8006882:	4698      	mov	r8, r3
 8006884:	4606      	mov	r6, r0
 8006886:	b118      	cbz	r0, 8006890 <_vfiprintf_r+0x18>
 8006888:	6983      	ldr	r3, [r0, #24]
 800688a:	b90b      	cbnz	r3, 8006890 <_vfiprintf_r+0x18>
 800688c:	f000 fb02 	bl	8006e94 <__sinit>
 8006890:	4b89      	ldr	r3, [pc, #548]	; (8006ab8 <_vfiprintf_r+0x240>)
 8006892:	429d      	cmp	r5, r3
 8006894:	d11b      	bne.n	80068ce <_vfiprintf_r+0x56>
 8006896:	6875      	ldr	r5, [r6, #4]
 8006898:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800689a:	07d9      	lsls	r1, r3, #31
 800689c:	d405      	bmi.n	80068aa <_vfiprintf_r+0x32>
 800689e:	89ab      	ldrh	r3, [r5, #12]
 80068a0:	059a      	lsls	r2, r3, #22
 80068a2:	d402      	bmi.n	80068aa <_vfiprintf_r+0x32>
 80068a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068a6:	f000 fb93 	bl	8006fd0 <__retarget_lock_acquire_recursive>
 80068aa:	89ab      	ldrh	r3, [r5, #12]
 80068ac:	071b      	lsls	r3, r3, #28
 80068ae:	d501      	bpl.n	80068b4 <_vfiprintf_r+0x3c>
 80068b0:	692b      	ldr	r3, [r5, #16]
 80068b2:	b9eb      	cbnz	r3, 80068f0 <_vfiprintf_r+0x78>
 80068b4:	4629      	mov	r1, r5
 80068b6:	4630      	mov	r0, r6
 80068b8:	f000 f960 	bl	8006b7c <__swsetup_r>
 80068bc:	b1c0      	cbz	r0, 80068f0 <_vfiprintf_r+0x78>
 80068be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068c0:	07dc      	lsls	r4, r3, #31
 80068c2:	d50e      	bpl.n	80068e2 <_vfiprintf_r+0x6a>
 80068c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068c8:	b01d      	add	sp, #116	; 0x74
 80068ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ce:	4b7b      	ldr	r3, [pc, #492]	; (8006abc <_vfiprintf_r+0x244>)
 80068d0:	429d      	cmp	r5, r3
 80068d2:	d101      	bne.n	80068d8 <_vfiprintf_r+0x60>
 80068d4:	68b5      	ldr	r5, [r6, #8]
 80068d6:	e7df      	b.n	8006898 <_vfiprintf_r+0x20>
 80068d8:	4b79      	ldr	r3, [pc, #484]	; (8006ac0 <_vfiprintf_r+0x248>)
 80068da:	429d      	cmp	r5, r3
 80068dc:	bf08      	it	eq
 80068de:	68f5      	ldreq	r5, [r6, #12]
 80068e0:	e7da      	b.n	8006898 <_vfiprintf_r+0x20>
 80068e2:	89ab      	ldrh	r3, [r5, #12]
 80068e4:	0598      	lsls	r0, r3, #22
 80068e6:	d4ed      	bmi.n	80068c4 <_vfiprintf_r+0x4c>
 80068e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068ea:	f000 fb72 	bl	8006fd2 <__retarget_lock_release_recursive>
 80068ee:	e7e9      	b.n	80068c4 <_vfiprintf_r+0x4c>
 80068f0:	2300      	movs	r3, #0
 80068f2:	9309      	str	r3, [sp, #36]	; 0x24
 80068f4:	2320      	movs	r3, #32
 80068f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80068fe:	2330      	movs	r3, #48	; 0x30
 8006900:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006ac4 <_vfiprintf_r+0x24c>
 8006904:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006908:	f04f 0901 	mov.w	r9, #1
 800690c:	4623      	mov	r3, r4
 800690e:	469a      	mov	sl, r3
 8006910:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006914:	b10a      	cbz	r2, 800691a <_vfiprintf_r+0xa2>
 8006916:	2a25      	cmp	r2, #37	; 0x25
 8006918:	d1f9      	bne.n	800690e <_vfiprintf_r+0x96>
 800691a:	ebba 0b04 	subs.w	fp, sl, r4
 800691e:	d00b      	beq.n	8006938 <_vfiprintf_r+0xc0>
 8006920:	465b      	mov	r3, fp
 8006922:	4622      	mov	r2, r4
 8006924:	4629      	mov	r1, r5
 8006926:	4630      	mov	r0, r6
 8006928:	f7ff ff94 	bl	8006854 <__sfputs_r>
 800692c:	3001      	adds	r0, #1
 800692e:	f000 80aa 	beq.w	8006a86 <_vfiprintf_r+0x20e>
 8006932:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006934:	445a      	add	r2, fp
 8006936:	9209      	str	r2, [sp, #36]	; 0x24
 8006938:	f89a 3000 	ldrb.w	r3, [sl]
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 80a2 	beq.w	8006a86 <_vfiprintf_r+0x20e>
 8006942:	2300      	movs	r3, #0
 8006944:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800694c:	f10a 0a01 	add.w	sl, sl, #1
 8006950:	9304      	str	r3, [sp, #16]
 8006952:	9307      	str	r3, [sp, #28]
 8006954:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006958:	931a      	str	r3, [sp, #104]	; 0x68
 800695a:	4654      	mov	r4, sl
 800695c:	2205      	movs	r2, #5
 800695e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006962:	4858      	ldr	r0, [pc, #352]	; (8006ac4 <_vfiprintf_r+0x24c>)
 8006964:	f7f9 fc44 	bl	80001f0 <memchr>
 8006968:	9a04      	ldr	r2, [sp, #16]
 800696a:	b9d8      	cbnz	r0, 80069a4 <_vfiprintf_r+0x12c>
 800696c:	06d1      	lsls	r1, r2, #27
 800696e:	bf44      	itt	mi
 8006970:	2320      	movmi	r3, #32
 8006972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006976:	0713      	lsls	r3, r2, #28
 8006978:	bf44      	itt	mi
 800697a:	232b      	movmi	r3, #43	; 0x2b
 800697c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006980:	f89a 3000 	ldrb.w	r3, [sl]
 8006984:	2b2a      	cmp	r3, #42	; 0x2a
 8006986:	d015      	beq.n	80069b4 <_vfiprintf_r+0x13c>
 8006988:	9a07      	ldr	r2, [sp, #28]
 800698a:	4654      	mov	r4, sl
 800698c:	2000      	movs	r0, #0
 800698e:	f04f 0c0a 	mov.w	ip, #10
 8006992:	4621      	mov	r1, r4
 8006994:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006998:	3b30      	subs	r3, #48	; 0x30
 800699a:	2b09      	cmp	r3, #9
 800699c:	d94e      	bls.n	8006a3c <_vfiprintf_r+0x1c4>
 800699e:	b1b0      	cbz	r0, 80069ce <_vfiprintf_r+0x156>
 80069a0:	9207      	str	r2, [sp, #28]
 80069a2:	e014      	b.n	80069ce <_vfiprintf_r+0x156>
 80069a4:	eba0 0308 	sub.w	r3, r0, r8
 80069a8:	fa09 f303 	lsl.w	r3, r9, r3
 80069ac:	4313      	orrs	r3, r2
 80069ae:	9304      	str	r3, [sp, #16]
 80069b0:	46a2      	mov	sl, r4
 80069b2:	e7d2      	b.n	800695a <_vfiprintf_r+0xe2>
 80069b4:	9b03      	ldr	r3, [sp, #12]
 80069b6:	1d19      	adds	r1, r3, #4
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	9103      	str	r1, [sp, #12]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	bfbb      	ittet	lt
 80069c0:	425b      	neglt	r3, r3
 80069c2:	f042 0202 	orrlt.w	r2, r2, #2
 80069c6:	9307      	strge	r3, [sp, #28]
 80069c8:	9307      	strlt	r3, [sp, #28]
 80069ca:	bfb8      	it	lt
 80069cc:	9204      	strlt	r2, [sp, #16]
 80069ce:	7823      	ldrb	r3, [r4, #0]
 80069d0:	2b2e      	cmp	r3, #46	; 0x2e
 80069d2:	d10c      	bne.n	80069ee <_vfiprintf_r+0x176>
 80069d4:	7863      	ldrb	r3, [r4, #1]
 80069d6:	2b2a      	cmp	r3, #42	; 0x2a
 80069d8:	d135      	bne.n	8006a46 <_vfiprintf_r+0x1ce>
 80069da:	9b03      	ldr	r3, [sp, #12]
 80069dc:	1d1a      	adds	r2, r3, #4
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	9203      	str	r2, [sp, #12]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	bfb8      	it	lt
 80069e6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80069ea:	3402      	adds	r4, #2
 80069ec:	9305      	str	r3, [sp, #20]
 80069ee:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006ac8 <_vfiprintf_r+0x250>
 80069f2:	7821      	ldrb	r1, [r4, #0]
 80069f4:	2203      	movs	r2, #3
 80069f6:	4650      	mov	r0, sl
 80069f8:	f7f9 fbfa 	bl	80001f0 <memchr>
 80069fc:	b140      	cbz	r0, 8006a10 <_vfiprintf_r+0x198>
 80069fe:	2340      	movs	r3, #64	; 0x40
 8006a00:	eba0 000a 	sub.w	r0, r0, sl
 8006a04:	fa03 f000 	lsl.w	r0, r3, r0
 8006a08:	9b04      	ldr	r3, [sp, #16]
 8006a0a:	4303      	orrs	r3, r0
 8006a0c:	3401      	adds	r4, #1
 8006a0e:	9304      	str	r3, [sp, #16]
 8006a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a14:	482d      	ldr	r0, [pc, #180]	; (8006acc <_vfiprintf_r+0x254>)
 8006a16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a1a:	2206      	movs	r2, #6
 8006a1c:	f7f9 fbe8 	bl	80001f0 <memchr>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	d03f      	beq.n	8006aa4 <_vfiprintf_r+0x22c>
 8006a24:	4b2a      	ldr	r3, [pc, #168]	; (8006ad0 <_vfiprintf_r+0x258>)
 8006a26:	bb1b      	cbnz	r3, 8006a70 <_vfiprintf_r+0x1f8>
 8006a28:	9b03      	ldr	r3, [sp, #12]
 8006a2a:	3307      	adds	r3, #7
 8006a2c:	f023 0307 	bic.w	r3, r3, #7
 8006a30:	3308      	adds	r3, #8
 8006a32:	9303      	str	r3, [sp, #12]
 8006a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a36:	443b      	add	r3, r7
 8006a38:	9309      	str	r3, [sp, #36]	; 0x24
 8006a3a:	e767      	b.n	800690c <_vfiprintf_r+0x94>
 8006a3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a40:	460c      	mov	r4, r1
 8006a42:	2001      	movs	r0, #1
 8006a44:	e7a5      	b.n	8006992 <_vfiprintf_r+0x11a>
 8006a46:	2300      	movs	r3, #0
 8006a48:	3401      	adds	r4, #1
 8006a4a:	9305      	str	r3, [sp, #20]
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	f04f 0c0a 	mov.w	ip, #10
 8006a52:	4620      	mov	r0, r4
 8006a54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a58:	3a30      	subs	r2, #48	; 0x30
 8006a5a:	2a09      	cmp	r2, #9
 8006a5c:	d903      	bls.n	8006a66 <_vfiprintf_r+0x1ee>
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d0c5      	beq.n	80069ee <_vfiprintf_r+0x176>
 8006a62:	9105      	str	r1, [sp, #20]
 8006a64:	e7c3      	b.n	80069ee <_vfiprintf_r+0x176>
 8006a66:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e7f0      	b.n	8006a52 <_vfiprintf_r+0x1da>
 8006a70:	ab03      	add	r3, sp, #12
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	462a      	mov	r2, r5
 8006a76:	4b17      	ldr	r3, [pc, #92]	; (8006ad4 <_vfiprintf_r+0x25c>)
 8006a78:	a904      	add	r1, sp, #16
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	f7fc f88c 	bl	8002b98 <_printf_float>
 8006a80:	4607      	mov	r7, r0
 8006a82:	1c78      	adds	r0, r7, #1
 8006a84:	d1d6      	bne.n	8006a34 <_vfiprintf_r+0x1bc>
 8006a86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a88:	07d9      	lsls	r1, r3, #31
 8006a8a:	d405      	bmi.n	8006a98 <_vfiprintf_r+0x220>
 8006a8c:	89ab      	ldrh	r3, [r5, #12]
 8006a8e:	059a      	lsls	r2, r3, #22
 8006a90:	d402      	bmi.n	8006a98 <_vfiprintf_r+0x220>
 8006a92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a94:	f000 fa9d 	bl	8006fd2 <__retarget_lock_release_recursive>
 8006a98:	89ab      	ldrh	r3, [r5, #12]
 8006a9a:	065b      	lsls	r3, r3, #25
 8006a9c:	f53f af12 	bmi.w	80068c4 <_vfiprintf_r+0x4c>
 8006aa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006aa2:	e711      	b.n	80068c8 <_vfiprintf_r+0x50>
 8006aa4:	ab03      	add	r3, sp, #12
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	462a      	mov	r2, r5
 8006aaa:	4b0a      	ldr	r3, [pc, #40]	; (8006ad4 <_vfiprintf_r+0x25c>)
 8006aac:	a904      	add	r1, sp, #16
 8006aae:	4630      	mov	r0, r6
 8006ab0:	f7fc fb0a 	bl	80030c8 <_printf_i>
 8006ab4:	e7e4      	b.n	8006a80 <_vfiprintf_r+0x208>
 8006ab6:	bf00      	nop
 8006ab8:	080077d4 	.word	0x080077d4
 8006abc:	080077f4 	.word	0x080077f4
 8006ac0:	080077b4 	.word	0x080077b4
 8006ac4:	08007764 	.word	0x08007764
 8006ac8:	0800776a 	.word	0x0800776a
 8006acc:	0800776e 	.word	0x0800776e
 8006ad0:	08002b99 	.word	0x08002b99
 8006ad4:	08006855 	.word	0x08006855

08006ad8 <__swbuf_r>:
 8006ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ada:	460e      	mov	r6, r1
 8006adc:	4614      	mov	r4, r2
 8006ade:	4605      	mov	r5, r0
 8006ae0:	b118      	cbz	r0, 8006aea <__swbuf_r+0x12>
 8006ae2:	6983      	ldr	r3, [r0, #24]
 8006ae4:	b90b      	cbnz	r3, 8006aea <__swbuf_r+0x12>
 8006ae6:	f000 f9d5 	bl	8006e94 <__sinit>
 8006aea:	4b21      	ldr	r3, [pc, #132]	; (8006b70 <__swbuf_r+0x98>)
 8006aec:	429c      	cmp	r4, r3
 8006aee:	d12b      	bne.n	8006b48 <__swbuf_r+0x70>
 8006af0:	686c      	ldr	r4, [r5, #4]
 8006af2:	69a3      	ldr	r3, [r4, #24]
 8006af4:	60a3      	str	r3, [r4, #8]
 8006af6:	89a3      	ldrh	r3, [r4, #12]
 8006af8:	071a      	lsls	r2, r3, #28
 8006afa:	d52f      	bpl.n	8006b5c <__swbuf_r+0x84>
 8006afc:	6923      	ldr	r3, [r4, #16]
 8006afe:	b36b      	cbz	r3, 8006b5c <__swbuf_r+0x84>
 8006b00:	6923      	ldr	r3, [r4, #16]
 8006b02:	6820      	ldr	r0, [r4, #0]
 8006b04:	1ac0      	subs	r0, r0, r3
 8006b06:	6963      	ldr	r3, [r4, #20]
 8006b08:	b2f6      	uxtb	r6, r6
 8006b0a:	4283      	cmp	r3, r0
 8006b0c:	4637      	mov	r7, r6
 8006b0e:	dc04      	bgt.n	8006b1a <__swbuf_r+0x42>
 8006b10:	4621      	mov	r1, r4
 8006b12:	4628      	mov	r0, r5
 8006b14:	f000 f92a 	bl	8006d6c <_fflush_r>
 8006b18:	bb30      	cbnz	r0, 8006b68 <__swbuf_r+0x90>
 8006b1a:	68a3      	ldr	r3, [r4, #8]
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	60a3      	str	r3, [r4, #8]
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	1c5a      	adds	r2, r3, #1
 8006b24:	6022      	str	r2, [r4, #0]
 8006b26:	701e      	strb	r6, [r3, #0]
 8006b28:	6963      	ldr	r3, [r4, #20]
 8006b2a:	3001      	adds	r0, #1
 8006b2c:	4283      	cmp	r3, r0
 8006b2e:	d004      	beq.n	8006b3a <__swbuf_r+0x62>
 8006b30:	89a3      	ldrh	r3, [r4, #12]
 8006b32:	07db      	lsls	r3, r3, #31
 8006b34:	d506      	bpl.n	8006b44 <__swbuf_r+0x6c>
 8006b36:	2e0a      	cmp	r6, #10
 8006b38:	d104      	bne.n	8006b44 <__swbuf_r+0x6c>
 8006b3a:	4621      	mov	r1, r4
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	f000 f915 	bl	8006d6c <_fflush_r>
 8006b42:	b988      	cbnz	r0, 8006b68 <__swbuf_r+0x90>
 8006b44:	4638      	mov	r0, r7
 8006b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b48:	4b0a      	ldr	r3, [pc, #40]	; (8006b74 <__swbuf_r+0x9c>)
 8006b4a:	429c      	cmp	r4, r3
 8006b4c:	d101      	bne.n	8006b52 <__swbuf_r+0x7a>
 8006b4e:	68ac      	ldr	r4, [r5, #8]
 8006b50:	e7cf      	b.n	8006af2 <__swbuf_r+0x1a>
 8006b52:	4b09      	ldr	r3, [pc, #36]	; (8006b78 <__swbuf_r+0xa0>)
 8006b54:	429c      	cmp	r4, r3
 8006b56:	bf08      	it	eq
 8006b58:	68ec      	ldreq	r4, [r5, #12]
 8006b5a:	e7ca      	b.n	8006af2 <__swbuf_r+0x1a>
 8006b5c:	4621      	mov	r1, r4
 8006b5e:	4628      	mov	r0, r5
 8006b60:	f000 f80c 	bl	8006b7c <__swsetup_r>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	d0cb      	beq.n	8006b00 <__swbuf_r+0x28>
 8006b68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006b6c:	e7ea      	b.n	8006b44 <__swbuf_r+0x6c>
 8006b6e:	bf00      	nop
 8006b70:	080077d4 	.word	0x080077d4
 8006b74:	080077f4 	.word	0x080077f4
 8006b78:	080077b4 	.word	0x080077b4

08006b7c <__swsetup_r>:
 8006b7c:	4b32      	ldr	r3, [pc, #200]	; (8006c48 <__swsetup_r+0xcc>)
 8006b7e:	b570      	push	{r4, r5, r6, lr}
 8006b80:	681d      	ldr	r5, [r3, #0]
 8006b82:	4606      	mov	r6, r0
 8006b84:	460c      	mov	r4, r1
 8006b86:	b125      	cbz	r5, 8006b92 <__swsetup_r+0x16>
 8006b88:	69ab      	ldr	r3, [r5, #24]
 8006b8a:	b913      	cbnz	r3, 8006b92 <__swsetup_r+0x16>
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	f000 f981 	bl	8006e94 <__sinit>
 8006b92:	4b2e      	ldr	r3, [pc, #184]	; (8006c4c <__swsetup_r+0xd0>)
 8006b94:	429c      	cmp	r4, r3
 8006b96:	d10f      	bne.n	8006bb8 <__swsetup_r+0x3c>
 8006b98:	686c      	ldr	r4, [r5, #4]
 8006b9a:	89a3      	ldrh	r3, [r4, #12]
 8006b9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ba0:	0719      	lsls	r1, r3, #28
 8006ba2:	d42c      	bmi.n	8006bfe <__swsetup_r+0x82>
 8006ba4:	06dd      	lsls	r5, r3, #27
 8006ba6:	d411      	bmi.n	8006bcc <__swsetup_r+0x50>
 8006ba8:	2309      	movs	r3, #9
 8006baa:	6033      	str	r3, [r6, #0]
 8006bac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006bb0:	81a3      	strh	r3, [r4, #12]
 8006bb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bb6:	e03e      	b.n	8006c36 <__swsetup_r+0xba>
 8006bb8:	4b25      	ldr	r3, [pc, #148]	; (8006c50 <__swsetup_r+0xd4>)
 8006bba:	429c      	cmp	r4, r3
 8006bbc:	d101      	bne.n	8006bc2 <__swsetup_r+0x46>
 8006bbe:	68ac      	ldr	r4, [r5, #8]
 8006bc0:	e7eb      	b.n	8006b9a <__swsetup_r+0x1e>
 8006bc2:	4b24      	ldr	r3, [pc, #144]	; (8006c54 <__swsetup_r+0xd8>)
 8006bc4:	429c      	cmp	r4, r3
 8006bc6:	bf08      	it	eq
 8006bc8:	68ec      	ldreq	r4, [r5, #12]
 8006bca:	e7e6      	b.n	8006b9a <__swsetup_r+0x1e>
 8006bcc:	0758      	lsls	r0, r3, #29
 8006bce:	d512      	bpl.n	8006bf6 <__swsetup_r+0x7a>
 8006bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bd2:	b141      	cbz	r1, 8006be6 <__swsetup_r+0x6a>
 8006bd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bd8:	4299      	cmp	r1, r3
 8006bda:	d002      	beq.n	8006be2 <__swsetup_r+0x66>
 8006bdc:	4630      	mov	r0, r6
 8006bde:	f7ff fb2d 	bl	800623c <_free_r>
 8006be2:	2300      	movs	r3, #0
 8006be4:	6363      	str	r3, [r4, #52]	; 0x34
 8006be6:	89a3      	ldrh	r3, [r4, #12]
 8006be8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006bec:	81a3      	strh	r3, [r4, #12]
 8006bee:	2300      	movs	r3, #0
 8006bf0:	6063      	str	r3, [r4, #4]
 8006bf2:	6923      	ldr	r3, [r4, #16]
 8006bf4:	6023      	str	r3, [r4, #0]
 8006bf6:	89a3      	ldrh	r3, [r4, #12]
 8006bf8:	f043 0308 	orr.w	r3, r3, #8
 8006bfc:	81a3      	strh	r3, [r4, #12]
 8006bfe:	6923      	ldr	r3, [r4, #16]
 8006c00:	b94b      	cbnz	r3, 8006c16 <__swsetup_r+0x9a>
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c0c:	d003      	beq.n	8006c16 <__swsetup_r+0x9a>
 8006c0e:	4621      	mov	r1, r4
 8006c10:	4630      	mov	r0, r6
 8006c12:	f000 fa05 	bl	8007020 <__smakebuf_r>
 8006c16:	89a0      	ldrh	r0, [r4, #12]
 8006c18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c1c:	f010 0301 	ands.w	r3, r0, #1
 8006c20:	d00a      	beq.n	8006c38 <__swsetup_r+0xbc>
 8006c22:	2300      	movs	r3, #0
 8006c24:	60a3      	str	r3, [r4, #8]
 8006c26:	6963      	ldr	r3, [r4, #20]
 8006c28:	425b      	negs	r3, r3
 8006c2a:	61a3      	str	r3, [r4, #24]
 8006c2c:	6923      	ldr	r3, [r4, #16]
 8006c2e:	b943      	cbnz	r3, 8006c42 <__swsetup_r+0xc6>
 8006c30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c34:	d1ba      	bne.n	8006bac <__swsetup_r+0x30>
 8006c36:	bd70      	pop	{r4, r5, r6, pc}
 8006c38:	0781      	lsls	r1, r0, #30
 8006c3a:	bf58      	it	pl
 8006c3c:	6963      	ldrpl	r3, [r4, #20]
 8006c3e:	60a3      	str	r3, [r4, #8]
 8006c40:	e7f4      	b.n	8006c2c <__swsetup_r+0xb0>
 8006c42:	2000      	movs	r0, #0
 8006c44:	e7f7      	b.n	8006c36 <__swsetup_r+0xba>
 8006c46:	bf00      	nop
 8006c48:	20000044 	.word	0x20000044
 8006c4c:	080077d4 	.word	0x080077d4
 8006c50:	080077f4 	.word	0x080077f4
 8006c54:	080077b4 	.word	0x080077b4

08006c58 <abort>:
 8006c58:	b508      	push	{r3, lr}
 8006c5a:	2006      	movs	r0, #6
 8006c5c:	f000 fa50 	bl	8007100 <raise>
 8006c60:	2001      	movs	r0, #1
 8006c62:	f000 fb63 	bl	800732c <_exit>
	...

08006c68 <__sflush_r>:
 8006c68:	898a      	ldrh	r2, [r1, #12]
 8006c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6c:	4605      	mov	r5, r0
 8006c6e:	0710      	lsls	r0, r2, #28
 8006c70:	460c      	mov	r4, r1
 8006c72:	d457      	bmi.n	8006d24 <__sflush_r+0xbc>
 8006c74:	684b      	ldr	r3, [r1, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	dc04      	bgt.n	8006c84 <__sflush_r+0x1c>
 8006c7a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	dc01      	bgt.n	8006c84 <__sflush_r+0x1c>
 8006c80:	2000      	movs	r0, #0
 8006c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c86:	2e00      	cmp	r6, #0
 8006c88:	d0fa      	beq.n	8006c80 <__sflush_r+0x18>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c90:	682f      	ldr	r7, [r5, #0]
 8006c92:	602b      	str	r3, [r5, #0]
 8006c94:	d032      	beq.n	8006cfc <__sflush_r+0x94>
 8006c96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c98:	89a3      	ldrh	r3, [r4, #12]
 8006c9a:	075a      	lsls	r2, r3, #29
 8006c9c:	d505      	bpl.n	8006caa <__sflush_r+0x42>
 8006c9e:	6863      	ldr	r3, [r4, #4]
 8006ca0:	1ac0      	subs	r0, r0, r3
 8006ca2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ca4:	b10b      	cbz	r3, 8006caa <__sflush_r+0x42>
 8006ca6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ca8:	1ac0      	subs	r0, r0, r3
 8006caa:	2300      	movs	r3, #0
 8006cac:	4602      	mov	r2, r0
 8006cae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cb0:	6a21      	ldr	r1, [r4, #32]
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	47b0      	blx	r6
 8006cb6:	1c43      	adds	r3, r0, #1
 8006cb8:	89a3      	ldrh	r3, [r4, #12]
 8006cba:	d106      	bne.n	8006cca <__sflush_r+0x62>
 8006cbc:	6829      	ldr	r1, [r5, #0]
 8006cbe:	291d      	cmp	r1, #29
 8006cc0:	d82c      	bhi.n	8006d1c <__sflush_r+0xb4>
 8006cc2:	4a29      	ldr	r2, [pc, #164]	; (8006d68 <__sflush_r+0x100>)
 8006cc4:	40ca      	lsrs	r2, r1
 8006cc6:	07d6      	lsls	r6, r2, #31
 8006cc8:	d528      	bpl.n	8006d1c <__sflush_r+0xb4>
 8006cca:	2200      	movs	r2, #0
 8006ccc:	6062      	str	r2, [r4, #4]
 8006cce:	04d9      	lsls	r1, r3, #19
 8006cd0:	6922      	ldr	r2, [r4, #16]
 8006cd2:	6022      	str	r2, [r4, #0]
 8006cd4:	d504      	bpl.n	8006ce0 <__sflush_r+0x78>
 8006cd6:	1c42      	adds	r2, r0, #1
 8006cd8:	d101      	bne.n	8006cde <__sflush_r+0x76>
 8006cda:	682b      	ldr	r3, [r5, #0]
 8006cdc:	b903      	cbnz	r3, 8006ce0 <__sflush_r+0x78>
 8006cde:	6560      	str	r0, [r4, #84]	; 0x54
 8006ce0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ce2:	602f      	str	r7, [r5, #0]
 8006ce4:	2900      	cmp	r1, #0
 8006ce6:	d0cb      	beq.n	8006c80 <__sflush_r+0x18>
 8006ce8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cec:	4299      	cmp	r1, r3
 8006cee:	d002      	beq.n	8006cf6 <__sflush_r+0x8e>
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	f7ff faa3 	bl	800623c <_free_r>
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	6360      	str	r0, [r4, #52]	; 0x34
 8006cfa:	e7c2      	b.n	8006c82 <__sflush_r+0x1a>
 8006cfc:	6a21      	ldr	r1, [r4, #32]
 8006cfe:	2301      	movs	r3, #1
 8006d00:	4628      	mov	r0, r5
 8006d02:	47b0      	blx	r6
 8006d04:	1c41      	adds	r1, r0, #1
 8006d06:	d1c7      	bne.n	8006c98 <__sflush_r+0x30>
 8006d08:	682b      	ldr	r3, [r5, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d0c4      	beq.n	8006c98 <__sflush_r+0x30>
 8006d0e:	2b1d      	cmp	r3, #29
 8006d10:	d001      	beq.n	8006d16 <__sflush_r+0xae>
 8006d12:	2b16      	cmp	r3, #22
 8006d14:	d101      	bne.n	8006d1a <__sflush_r+0xb2>
 8006d16:	602f      	str	r7, [r5, #0]
 8006d18:	e7b2      	b.n	8006c80 <__sflush_r+0x18>
 8006d1a:	89a3      	ldrh	r3, [r4, #12]
 8006d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d20:	81a3      	strh	r3, [r4, #12]
 8006d22:	e7ae      	b.n	8006c82 <__sflush_r+0x1a>
 8006d24:	690f      	ldr	r7, [r1, #16]
 8006d26:	2f00      	cmp	r7, #0
 8006d28:	d0aa      	beq.n	8006c80 <__sflush_r+0x18>
 8006d2a:	0793      	lsls	r3, r2, #30
 8006d2c:	680e      	ldr	r6, [r1, #0]
 8006d2e:	bf08      	it	eq
 8006d30:	694b      	ldreq	r3, [r1, #20]
 8006d32:	600f      	str	r7, [r1, #0]
 8006d34:	bf18      	it	ne
 8006d36:	2300      	movne	r3, #0
 8006d38:	1bf6      	subs	r6, r6, r7
 8006d3a:	608b      	str	r3, [r1, #8]
 8006d3c:	2e00      	cmp	r6, #0
 8006d3e:	dd9f      	ble.n	8006c80 <__sflush_r+0x18>
 8006d40:	6a21      	ldr	r1, [r4, #32]
 8006d42:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006d46:	4633      	mov	r3, r6
 8006d48:	463a      	mov	r2, r7
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	47e0      	blx	ip
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	dc06      	bgt.n	8006d60 <__sflush_r+0xf8>
 8006d52:	89a3      	ldrh	r3, [r4, #12]
 8006d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d58:	81a3      	strh	r3, [r4, #12]
 8006d5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d5e:	e790      	b.n	8006c82 <__sflush_r+0x1a>
 8006d60:	4407      	add	r7, r0
 8006d62:	1a36      	subs	r6, r6, r0
 8006d64:	e7ea      	b.n	8006d3c <__sflush_r+0xd4>
 8006d66:	bf00      	nop
 8006d68:	20400001 	.word	0x20400001

08006d6c <_fflush_r>:
 8006d6c:	b538      	push	{r3, r4, r5, lr}
 8006d6e:	690b      	ldr	r3, [r1, #16]
 8006d70:	4605      	mov	r5, r0
 8006d72:	460c      	mov	r4, r1
 8006d74:	b913      	cbnz	r3, 8006d7c <_fflush_r+0x10>
 8006d76:	2500      	movs	r5, #0
 8006d78:	4628      	mov	r0, r5
 8006d7a:	bd38      	pop	{r3, r4, r5, pc}
 8006d7c:	b118      	cbz	r0, 8006d86 <_fflush_r+0x1a>
 8006d7e:	6983      	ldr	r3, [r0, #24]
 8006d80:	b90b      	cbnz	r3, 8006d86 <_fflush_r+0x1a>
 8006d82:	f000 f887 	bl	8006e94 <__sinit>
 8006d86:	4b14      	ldr	r3, [pc, #80]	; (8006dd8 <_fflush_r+0x6c>)
 8006d88:	429c      	cmp	r4, r3
 8006d8a:	d11b      	bne.n	8006dc4 <_fflush_r+0x58>
 8006d8c:	686c      	ldr	r4, [r5, #4]
 8006d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d0ef      	beq.n	8006d76 <_fflush_r+0xa>
 8006d96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d98:	07d0      	lsls	r0, r2, #31
 8006d9a:	d404      	bmi.n	8006da6 <_fflush_r+0x3a>
 8006d9c:	0599      	lsls	r1, r3, #22
 8006d9e:	d402      	bmi.n	8006da6 <_fflush_r+0x3a>
 8006da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006da2:	f000 f915 	bl	8006fd0 <__retarget_lock_acquire_recursive>
 8006da6:	4628      	mov	r0, r5
 8006da8:	4621      	mov	r1, r4
 8006daa:	f7ff ff5d 	bl	8006c68 <__sflush_r>
 8006dae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006db0:	07da      	lsls	r2, r3, #31
 8006db2:	4605      	mov	r5, r0
 8006db4:	d4e0      	bmi.n	8006d78 <_fflush_r+0xc>
 8006db6:	89a3      	ldrh	r3, [r4, #12]
 8006db8:	059b      	lsls	r3, r3, #22
 8006dba:	d4dd      	bmi.n	8006d78 <_fflush_r+0xc>
 8006dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dbe:	f000 f908 	bl	8006fd2 <__retarget_lock_release_recursive>
 8006dc2:	e7d9      	b.n	8006d78 <_fflush_r+0xc>
 8006dc4:	4b05      	ldr	r3, [pc, #20]	; (8006ddc <_fflush_r+0x70>)
 8006dc6:	429c      	cmp	r4, r3
 8006dc8:	d101      	bne.n	8006dce <_fflush_r+0x62>
 8006dca:	68ac      	ldr	r4, [r5, #8]
 8006dcc:	e7df      	b.n	8006d8e <_fflush_r+0x22>
 8006dce:	4b04      	ldr	r3, [pc, #16]	; (8006de0 <_fflush_r+0x74>)
 8006dd0:	429c      	cmp	r4, r3
 8006dd2:	bf08      	it	eq
 8006dd4:	68ec      	ldreq	r4, [r5, #12]
 8006dd6:	e7da      	b.n	8006d8e <_fflush_r+0x22>
 8006dd8:	080077d4 	.word	0x080077d4
 8006ddc:	080077f4 	.word	0x080077f4
 8006de0:	080077b4 	.word	0x080077b4

08006de4 <std>:
 8006de4:	2300      	movs	r3, #0
 8006de6:	b510      	push	{r4, lr}
 8006de8:	4604      	mov	r4, r0
 8006dea:	e9c0 3300 	strd	r3, r3, [r0]
 8006dee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006df2:	6083      	str	r3, [r0, #8]
 8006df4:	8181      	strh	r1, [r0, #12]
 8006df6:	6643      	str	r3, [r0, #100]	; 0x64
 8006df8:	81c2      	strh	r2, [r0, #14]
 8006dfa:	6183      	str	r3, [r0, #24]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	2208      	movs	r2, #8
 8006e00:	305c      	adds	r0, #92	; 0x5c
 8006e02:	f7fb fe23 	bl	8002a4c <memset>
 8006e06:	4b05      	ldr	r3, [pc, #20]	; (8006e1c <std+0x38>)
 8006e08:	6263      	str	r3, [r4, #36]	; 0x24
 8006e0a:	4b05      	ldr	r3, [pc, #20]	; (8006e20 <std+0x3c>)
 8006e0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e0e:	4b05      	ldr	r3, [pc, #20]	; (8006e24 <std+0x40>)
 8006e10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e12:	4b05      	ldr	r3, [pc, #20]	; (8006e28 <std+0x44>)
 8006e14:	6224      	str	r4, [r4, #32]
 8006e16:	6323      	str	r3, [r4, #48]	; 0x30
 8006e18:	bd10      	pop	{r4, pc}
 8006e1a:	bf00      	nop
 8006e1c:	08007139 	.word	0x08007139
 8006e20:	0800715b 	.word	0x0800715b
 8006e24:	08007193 	.word	0x08007193
 8006e28:	080071b7 	.word	0x080071b7

08006e2c <_cleanup_r>:
 8006e2c:	4901      	ldr	r1, [pc, #4]	; (8006e34 <_cleanup_r+0x8>)
 8006e2e:	f000 b8af 	b.w	8006f90 <_fwalk_reent>
 8006e32:	bf00      	nop
 8006e34:	08006d6d 	.word	0x08006d6d

08006e38 <__sfmoreglue>:
 8006e38:	b570      	push	{r4, r5, r6, lr}
 8006e3a:	2268      	movs	r2, #104	; 0x68
 8006e3c:	1e4d      	subs	r5, r1, #1
 8006e3e:	4355      	muls	r5, r2
 8006e40:	460e      	mov	r6, r1
 8006e42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e46:	f7ff fa63 	bl	8006310 <_malloc_r>
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	b140      	cbz	r0, 8006e60 <__sfmoreglue+0x28>
 8006e4e:	2100      	movs	r1, #0
 8006e50:	e9c0 1600 	strd	r1, r6, [r0]
 8006e54:	300c      	adds	r0, #12
 8006e56:	60a0      	str	r0, [r4, #8]
 8006e58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e5c:	f7fb fdf6 	bl	8002a4c <memset>
 8006e60:	4620      	mov	r0, r4
 8006e62:	bd70      	pop	{r4, r5, r6, pc}

08006e64 <__sfp_lock_acquire>:
 8006e64:	4801      	ldr	r0, [pc, #4]	; (8006e6c <__sfp_lock_acquire+0x8>)
 8006e66:	f000 b8b3 	b.w	8006fd0 <__retarget_lock_acquire_recursive>
 8006e6a:	bf00      	nop
 8006e6c:	20000471 	.word	0x20000471

08006e70 <__sfp_lock_release>:
 8006e70:	4801      	ldr	r0, [pc, #4]	; (8006e78 <__sfp_lock_release+0x8>)
 8006e72:	f000 b8ae 	b.w	8006fd2 <__retarget_lock_release_recursive>
 8006e76:	bf00      	nop
 8006e78:	20000471 	.word	0x20000471

08006e7c <__sinit_lock_acquire>:
 8006e7c:	4801      	ldr	r0, [pc, #4]	; (8006e84 <__sinit_lock_acquire+0x8>)
 8006e7e:	f000 b8a7 	b.w	8006fd0 <__retarget_lock_acquire_recursive>
 8006e82:	bf00      	nop
 8006e84:	20000472 	.word	0x20000472

08006e88 <__sinit_lock_release>:
 8006e88:	4801      	ldr	r0, [pc, #4]	; (8006e90 <__sinit_lock_release+0x8>)
 8006e8a:	f000 b8a2 	b.w	8006fd2 <__retarget_lock_release_recursive>
 8006e8e:	bf00      	nop
 8006e90:	20000472 	.word	0x20000472

08006e94 <__sinit>:
 8006e94:	b510      	push	{r4, lr}
 8006e96:	4604      	mov	r4, r0
 8006e98:	f7ff fff0 	bl	8006e7c <__sinit_lock_acquire>
 8006e9c:	69a3      	ldr	r3, [r4, #24]
 8006e9e:	b11b      	cbz	r3, 8006ea8 <__sinit+0x14>
 8006ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea4:	f7ff bff0 	b.w	8006e88 <__sinit_lock_release>
 8006ea8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006eac:	6523      	str	r3, [r4, #80]	; 0x50
 8006eae:	4b13      	ldr	r3, [pc, #76]	; (8006efc <__sinit+0x68>)
 8006eb0:	4a13      	ldr	r2, [pc, #76]	; (8006f00 <__sinit+0x6c>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006eb6:	42a3      	cmp	r3, r4
 8006eb8:	bf04      	itt	eq
 8006eba:	2301      	moveq	r3, #1
 8006ebc:	61a3      	streq	r3, [r4, #24]
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f000 f820 	bl	8006f04 <__sfp>
 8006ec4:	6060      	str	r0, [r4, #4]
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f000 f81c 	bl	8006f04 <__sfp>
 8006ecc:	60a0      	str	r0, [r4, #8]
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f000 f818 	bl	8006f04 <__sfp>
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	60e0      	str	r0, [r4, #12]
 8006ed8:	2104      	movs	r1, #4
 8006eda:	6860      	ldr	r0, [r4, #4]
 8006edc:	f7ff ff82 	bl	8006de4 <std>
 8006ee0:	68a0      	ldr	r0, [r4, #8]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	2109      	movs	r1, #9
 8006ee6:	f7ff ff7d 	bl	8006de4 <std>
 8006eea:	68e0      	ldr	r0, [r4, #12]
 8006eec:	2202      	movs	r2, #2
 8006eee:	2112      	movs	r1, #18
 8006ef0:	f7ff ff78 	bl	8006de4 <std>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	61a3      	str	r3, [r4, #24]
 8006ef8:	e7d2      	b.n	8006ea0 <__sinit+0xc>
 8006efa:	bf00      	nop
 8006efc:	0800736c 	.word	0x0800736c
 8006f00:	08006e2d 	.word	0x08006e2d

08006f04 <__sfp>:
 8006f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f06:	4607      	mov	r7, r0
 8006f08:	f7ff ffac 	bl	8006e64 <__sfp_lock_acquire>
 8006f0c:	4b1e      	ldr	r3, [pc, #120]	; (8006f88 <__sfp+0x84>)
 8006f0e:	681e      	ldr	r6, [r3, #0]
 8006f10:	69b3      	ldr	r3, [r6, #24]
 8006f12:	b913      	cbnz	r3, 8006f1a <__sfp+0x16>
 8006f14:	4630      	mov	r0, r6
 8006f16:	f7ff ffbd 	bl	8006e94 <__sinit>
 8006f1a:	3648      	adds	r6, #72	; 0x48
 8006f1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f20:	3b01      	subs	r3, #1
 8006f22:	d503      	bpl.n	8006f2c <__sfp+0x28>
 8006f24:	6833      	ldr	r3, [r6, #0]
 8006f26:	b30b      	cbz	r3, 8006f6c <__sfp+0x68>
 8006f28:	6836      	ldr	r6, [r6, #0]
 8006f2a:	e7f7      	b.n	8006f1c <__sfp+0x18>
 8006f2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f30:	b9d5      	cbnz	r5, 8006f68 <__sfp+0x64>
 8006f32:	4b16      	ldr	r3, [pc, #88]	; (8006f8c <__sfp+0x88>)
 8006f34:	60e3      	str	r3, [r4, #12]
 8006f36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f3a:	6665      	str	r5, [r4, #100]	; 0x64
 8006f3c:	f000 f847 	bl	8006fce <__retarget_lock_init_recursive>
 8006f40:	f7ff ff96 	bl	8006e70 <__sfp_lock_release>
 8006f44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f4c:	6025      	str	r5, [r4, #0]
 8006f4e:	61a5      	str	r5, [r4, #24]
 8006f50:	2208      	movs	r2, #8
 8006f52:	4629      	mov	r1, r5
 8006f54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f58:	f7fb fd78 	bl	8002a4c <memset>
 8006f5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f64:	4620      	mov	r0, r4
 8006f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f68:	3468      	adds	r4, #104	; 0x68
 8006f6a:	e7d9      	b.n	8006f20 <__sfp+0x1c>
 8006f6c:	2104      	movs	r1, #4
 8006f6e:	4638      	mov	r0, r7
 8006f70:	f7ff ff62 	bl	8006e38 <__sfmoreglue>
 8006f74:	4604      	mov	r4, r0
 8006f76:	6030      	str	r0, [r6, #0]
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	d1d5      	bne.n	8006f28 <__sfp+0x24>
 8006f7c:	f7ff ff78 	bl	8006e70 <__sfp_lock_release>
 8006f80:	230c      	movs	r3, #12
 8006f82:	603b      	str	r3, [r7, #0]
 8006f84:	e7ee      	b.n	8006f64 <__sfp+0x60>
 8006f86:	bf00      	nop
 8006f88:	0800736c 	.word	0x0800736c
 8006f8c:	ffff0001 	.word	0xffff0001

08006f90 <_fwalk_reent>:
 8006f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f94:	4606      	mov	r6, r0
 8006f96:	4688      	mov	r8, r1
 8006f98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f9c:	2700      	movs	r7, #0
 8006f9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fa2:	f1b9 0901 	subs.w	r9, r9, #1
 8006fa6:	d505      	bpl.n	8006fb4 <_fwalk_reent+0x24>
 8006fa8:	6824      	ldr	r4, [r4, #0]
 8006faa:	2c00      	cmp	r4, #0
 8006fac:	d1f7      	bne.n	8006f9e <_fwalk_reent+0xe>
 8006fae:	4638      	mov	r0, r7
 8006fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fb4:	89ab      	ldrh	r3, [r5, #12]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d907      	bls.n	8006fca <_fwalk_reent+0x3a>
 8006fba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	d003      	beq.n	8006fca <_fwalk_reent+0x3a>
 8006fc2:	4629      	mov	r1, r5
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	47c0      	blx	r8
 8006fc8:	4307      	orrs	r7, r0
 8006fca:	3568      	adds	r5, #104	; 0x68
 8006fcc:	e7e9      	b.n	8006fa2 <_fwalk_reent+0x12>

08006fce <__retarget_lock_init_recursive>:
 8006fce:	4770      	bx	lr

08006fd0 <__retarget_lock_acquire_recursive>:
 8006fd0:	4770      	bx	lr

08006fd2 <__retarget_lock_release_recursive>:
 8006fd2:	4770      	bx	lr

08006fd4 <__swhatbuf_r>:
 8006fd4:	b570      	push	{r4, r5, r6, lr}
 8006fd6:	460e      	mov	r6, r1
 8006fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fdc:	2900      	cmp	r1, #0
 8006fde:	b096      	sub	sp, #88	; 0x58
 8006fe0:	4614      	mov	r4, r2
 8006fe2:	461d      	mov	r5, r3
 8006fe4:	da08      	bge.n	8006ff8 <__swhatbuf_r+0x24>
 8006fe6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	602a      	str	r2, [r5, #0]
 8006fee:	061a      	lsls	r2, r3, #24
 8006ff0:	d410      	bmi.n	8007014 <__swhatbuf_r+0x40>
 8006ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ff6:	e00e      	b.n	8007016 <__swhatbuf_r+0x42>
 8006ff8:	466a      	mov	r2, sp
 8006ffa:	f000 f903 	bl	8007204 <_fstat_r>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	dbf1      	blt.n	8006fe6 <__swhatbuf_r+0x12>
 8007002:	9a01      	ldr	r2, [sp, #4]
 8007004:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007008:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800700c:	425a      	negs	r2, r3
 800700e:	415a      	adcs	r2, r3
 8007010:	602a      	str	r2, [r5, #0]
 8007012:	e7ee      	b.n	8006ff2 <__swhatbuf_r+0x1e>
 8007014:	2340      	movs	r3, #64	; 0x40
 8007016:	2000      	movs	r0, #0
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	b016      	add	sp, #88	; 0x58
 800701c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007020 <__smakebuf_r>:
 8007020:	898b      	ldrh	r3, [r1, #12]
 8007022:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007024:	079d      	lsls	r5, r3, #30
 8007026:	4606      	mov	r6, r0
 8007028:	460c      	mov	r4, r1
 800702a:	d507      	bpl.n	800703c <__smakebuf_r+0x1c>
 800702c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	6123      	str	r3, [r4, #16]
 8007034:	2301      	movs	r3, #1
 8007036:	6163      	str	r3, [r4, #20]
 8007038:	b002      	add	sp, #8
 800703a:	bd70      	pop	{r4, r5, r6, pc}
 800703c:	ab01      	add	r3, sp, #4
 800703e:	466a      	mov	r2, sp
 8007040:	f7ff ffc8 	bl	8006fd4 <__swhatbuf_r>
 8007044:	9900      	ldr	r1, [sp, #0]
 8007046:	4605      	mov	r5, r0
 8007048:	4630      	mov	r0, r6
 800704a:	f7ff f961 	bl	8006310 <_malloc_r>
 800704e:	b948      	cbnz	r0, 8007064 <__smakebuf_r+0x44>
 8007050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007054:	059a      	lsls	r2, r3, #22
 8007056:	d4ef      	bmi.n	8007038 <__smakebuf_r+0x18>
 8007058:	f023 0303 	bic.w	r3, r3, #3
 800705c:	f043 0302 	orr.w	r3, r3, #2
 8007060:	81a3      	strh	r3, [r4, #12]
 8007062:	e7e3      	b.n	800702c <__smakebuf_r+0xc>
 8007064:	4b0d      	ldr	r3, [pc, #52]	; (800709c <__smakebuf_r+0x7c>)
 8007066:	62b3      	str	r3, [r6, #40]	; 0x28
 8007068:	89a3      	ldrh	r3, [r4, #12]
 800706a:	6020      	str	r0, [r4, #0]
 800706c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007070:	81a3      	strh	r3, [r4, #12]
 8007072:	9b00      	ldr	r3, [sp, #0]
 8007074:	6163      	str	r3, [r4, #20]
 8007076:	9b01      	ldr	r3, [sp, #4]
 8007078:	6120      	str	r0, [r4, #16]
 800707a:	b15b      	cbz	r3, 8007094 <__smakebuf_r+0x74>
 800707c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007080:	4630      	mov	r0, r6
 8007082:	f000 f8d1 	bl	8007228 <_isatty_r>
 8007086:	b128      	cbz	r0, 8007094 <__smakebuf_r+0x74>
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	f023 0303 	bic.w	r3, r3, #3
 800708e:	f043 0301 	orr.w	r3, r3, #1
 8007092:	81a3      	strh	r3, [r4, #12]
 8007094:	89a0      	ldrh	r0, [r4, #12]
 8007096:	4305      	orrs	r5, r0
 8007098:	81a5      	strh	r5, [r4, #12]
 800709a:	e7cd      	b.n	8007038 <__smakebuf_r+0x18>
 800709c:	08006e2d 	.word	0x08006e2d

080070a0 <_malloc_usable_size_r>:
 80070a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070a4:	1f18      	subs	r0, r3, #4
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	bfbc      	itt	lt
 80070aa:	580b      	ldrlt	r3, [r1, r0]
 80070ac:	18c0      	addlt	r0, r0, r3
 80070ae:	4770      	bx	lr

080070b0 <_raise_r>:
 80070b0:	291f      	cmp	r1, #31
 80070b2:	b538      	push	{r3, r4, r5, lr}
 80070b4:	4604      	mov	r4, r0
 80070b6:	460d      	mov	r5, r1
 80070b8:	d904      	bls.n	80070c4 <_raise_r+0x14>
 80070ba:	2316      	movs	r3, #22
 80070bc:	6003      	str	r3, [r0, #0]
 80070be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070c2:	bd38      	pop	{r3, r4, r5, pc}
 80070c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80070c6:	b112      	cbz	r2, 80070ce <_raise_r+0x1e>
 80070c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070cc:	b94b      	cbnz	r3, 80070e2 <_raise_r+0x32>
 80070ce:	4620      	mov	r0, r4
 80070d0:	f000 f830 	bl	8007134 <_getpid_r>
 80070d4:	462a      	mov	r2, r5
 80070d6:	4601      	mov	r1, r0
 80070d8:	4620      	mov	r0, r4
 80070da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070de:	f000 b817 	b.w	8007110 <_kill_r>
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d00a      	beq.n	80070fc <_raise_r+0x4c>
 80070e6:	1c59      	adds	r1, r3, #1
 80070e8:	d103      	bne.n	80070f2 <_raise_r+0x42>
 80070ea:	2316      	movs	r3, #22
 80070ec:	6003      	str	r3, [r0, #0]
 80070ee:	2001      	movs	r0, #1
 80070f0:	e7e7      	b.n	80070c2 <_raise_r+0x12>
 80070f2:	2400      	movs	r4, #0
 80070f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80070f8:	4628      	mov	r0, r5
 80070fa:	4798      	blx	r3
 80070fc:	2000      	movs	r0, #0
 80070fe:	e7e0      	b.n	80070c2 <_raise_r+0x12>

08007100 <raise>:
 8007100:	4b02      	ldr	r3, [pc, #8]	; (800710c <raise+0xc>)
 8007102:	4601      	mov	r1, r0
 8007104:	6818      	ldr	r0, [r3, #0]
 8007106:	f7ff bfd3 	b.w	80070b0 <_raise_r>
 800710a:	bf00      	nop
 800710c:	20000044 	.word	0x20000044

08007110 <_kill_r>:
 8007110:	b538      	push	{r3, r4, r5, lr}
 8007112:	4d07      	ldr	r5, [pc, #28]	; (8007130 <_kill_r+0x20>)
 8007114:	2300      	movs	r3, #0
 8007116:	4604      	mov	r4, r0
 8007118:	4608      	mov	r0, r1
 800711a:	4611      	mov	r1, r2
 800711c:	602b      	str	r3, [r5, #0]
 800711e:	f000 f8d7 	bl	80072d0 <_kill>
 8007122:	1c43      	adds	r3, r0, #1
 8007124:	d102      	bne.n	800712c <_kill_r+0x1c>
 8007126:	682b      	ldr	r3, [r5, #0]
 8007128:	b103      	cbz	r3, 800712c <_kill_r+0x1c>
 800712a:	6023      	str	r3, [r4, #0]
 800712c:	bd38      	pop	{r3, r4, r5, pc}
 800712e:	bf00      	nop
 8007130:	2000046c 	.word	0x2000046c

08007134 <_getpid_r>:
 8007134:	f000 b8bc 	b.w	80072b0 <_getpid>

08007138 <__sread>:
 8007138:	b510      	push	{r4, lr}
 800713a:	460c      	mov	r4, r1
 800713c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007140:	f000 f894 	bl	800726c <_read_r>
 8007144:	2800      	cmp	r0, #0
 8007146:	bfab      	itete	ge
 8007148:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800714a:	89a3      	ldrhlt	r3, [r4, #12]
 800714c:	181b      	addge	r3, r3, r0
 800714e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007152:	bfac      	ite	ge
 8007154:	6563      	strge	r3, [r4, #84]	; 0x54
 8007156:	81a3      	strhlt	r3, [r4, #12]
 8007158:	bd10      	pop	{r4, pc}

0800715a <__swrite>:
 800715a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800715e:	461f      	mov	r7, r3
 8007160:	898b      	ldrh	r3, [r1, #12]
 8007162:	05db      	lsls	r3, r3, #23
 8007164:	4605      	mov	r5, r0
 8007166:	460c      	mov	r4, r1
 8007168:	4616      	mov	r6, r2
 800716a:	d505      	bpl.n	8007178 <__swrite+0x1e>
 800716c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007170:	2302      	movs	r3, #2
 8007172:	2200      	movs	r2, #0
 8007174:	f000 f868 	bl	8007248 <_lseek_r>
 8007178:	89a3      	ldrh	r3, [r4, #12]
 800717a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800717e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007182:	81a3      	strh	r3, [r4, #12]
 8007184:	4632      	mov	r2, r6
 8007186:	463b      	mov	r3, r7
 8007188:	4628      	mov	r0, r5
 800718a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800718e:	f000 b817 	b.w	80071c0 <_write_r>

08007192 <__sseek>:
 8007192:	b510      	push	{r4, lr}
 8007194:	460c      	mov	r4, r1
 8007196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800719a:	f000 f855 	bl	8007248 <_lseek_r>
 800719e:	1c43      	adds	r3, r0, #1
 80071a0:	89a3      	ldrh	r3, [r4, #12]
 80071a2:	bf15      	itete	ne
 80071a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80071a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071ae:	81a3      	strheq	r3, [r4, #12]
 80071b0:	bf18      	it	ne
 80071b2:	81a3      	strhne	r3, [r4, #12]
 80071b4:	bd10      	pop	{r4, pc}

080071b6 <__sclose>:
 80071b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ba:	f000 b813 	b.w	80071e4 <_close_r>
	...

080071c0 <_write_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	4d07      	ldr	r5, [pc, #28]	; (80071e0 <_write_r+0x20>)
 80071c4:	4604      	mov	r4, r0
 80071c6:	4608      	mov	r0, r1
 80071c8:	4611      	mov	r1, r2
 80071ca:	2200      	movs	r2, #0
 80071cc:	602a      	str	r2, [r5, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	f000 f8a4 	bl	800731c <_write>
 80071d4:	1c43      	adds	r3, r0, #1
 80071d6:	d102      	bne.n	80071de <_write_r+0x1e>
 80071d8:	682b      	ldr	r3, [r5, #0]
 80071da:	b103      	cbz	r3, 80071de <_write_r+0x1e>
 80071dc:	6023      	str	r3, [r4, #0]
 80071de:	bd38      	pop	{r3, r4, r5, pc}
 80071e0:	2000046c 	.word	0x2000046c

080071e4 <_close_r>:
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	4d06      	ldr	r5, [pc, #24]	; (8007200 <_close_r+0x1c>)
 80071e8:	2300      	movs	r3, #0
 80071ea:	4604      	mov	r4, r0
 80071ec:	4608      	mov	r0, r1
 80071ee:	602b      	str	r3, [r5, #0]
 80071f0:	f000 f84e 	bl	8007290 <_close>
 80071f4:	1c43      	adds	r3, r0, #1
 80071f6:	d102      	bne.n	80071fe <_close_r+0x1a>
 80071f8:	682b      	ldr	r3, [r5, #0]
 80071fa:	b103      	cbz	r3, 80071fe <_close_r+0x1a>
 80071fc:	6023      	str	r3, [r4, #0]
 80071fe:	bd38      	pop	{r3, r4, r5, pc}
 8007200:	2000046c 	.word	0x2000046c

08007204 <_fstat_r>:
 8007204:	b538      	push	{r3, r4, r5, lr}
 8007206:	4d07      	ldr	r5, [pc, #28]	; (8007224 <_fstat_r+0x20>)
 8007208:	2300      	movs	r3, #0
 800720a:	4604      	mov	r4, r0
 800720c:	4608      	mov	r0, r1
 800720e:	4611      	mov	r1, r2
 8007210:	602b      	str	r3, [r5, #0]
 8007212:	f000 f845 	bl	80072a0 <_fstat>
 8007216:	1c43      	adds	r3, r0, #1
 8007218:	d102      	bne.n	8007220 <_fstat_r+0x1c>
 800721a:	682b      	ldr	r3, [r5, #0]
 800721c:	b103      	cbz	r3, 8007220 <_fstat_r+0x1c>
 800721e:	6023      	str	r3, [r4, #0]
 8007220:	bd38      	pop	{r3, r4, r5, pc}
 8007222:	bf00      	nop
 8007224:	2000046c 	.word	0x2000046c

08007228 <_isatty_r>:
 8007228:	b538      	push	{r3, r4, r5, lr}
 800722a:	4d06      	ldr	r5, [pc, #24]	; (8007244 <_isatty_r+0x1c>)
 800722c:	2300      	movs	r3, #0
 800722e:	4604      	mov	r4, r0
 8007230:	4608      	mov	r0, r1
 8007232:	602b      	str	r3, [r5, #0]
 8007234:	f000 f844 	bl	80072c0 <_isatty>
 8007238:	1c43      	adds	r3, r0, #1
 800723a:	d102      	bne.n	8007242 <_isatty_r+0x1a>
 800723c:	682b      	ldr	r3, [r5, #0]
 800723e:	b103      	cbz	r3, 8007242 <_isatty_r+0x1a>
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	bd38      	pop	{r3, r4, r5, pc}
 8007244:	2000046c 	.word	0x2000046c

08007248 <_lseek_r>:
 8007248:	b538      	push	{r3, r4, r5, lr}
 800724a:	4d07      	ldr	r5, [pc, #28]	; (8007268 <_lseek_r+0x20>)
 800724c:	4604      	mov	r4, r0
 800724e:	4608      	mov	r0, r1
 8007250:	4611      	mov	r1, r2
 8007252:	2200      	movs	r2, #0
 8007254:	602a      	str	r2, [r5, #0]
 8007256:	461a      	mov	r2, r3
 8007258:	f000 f842 	bl	80072e0 <_lseek>
 800725c:	1c43      	adds	r3, r0, #1
 800725e:	d102      	bne.n	8007266 <_lseek_r+0x1e>
 8007260:	682b      	ldr	r3, [r5, #0]
 8007262:	b103      	cbz	r3, 8007266 <_lseek_r+0x1e>
 8007264:	6023      	str	r3, [r4, #0]
 8007266:	bd38      	pop	{r3, r4, r5, pc}
 8007268:	2000046c 	.word	0x2000046c

0800726c <_read_r>:
 800726c:	b538      	push	{r3, r4, r5, lr}
 800726e:	4d07      	ldr	r5, [pc, #28]	; (800728c <_read_r+0x20>)
 8007270:	4604      	mov	r4, r0
 8007272:	4608      	mov	r0, r1
 8007274:	4611      	mov	r1, r2
 8007276:	2200      	movs	r2, #0
 8007278:	602a      	str	r2, [r5, #0]
 800727a:	461a      	mov	r2, r3
 800727c:	f000 f838 	bl	80072f0 <_read>
 8007280:	1c43      	adds	r3, r0, #1
 8007282:	d102      	bne.n	800728a <_read_r+0x1e>
 8007284:	682b      	ldr	r3, [r5, #0]
 8007286:	b103      	cbz	r3, 800728a <_read_r+0x1e>
 8007288:	6023      	str	r3, [r4, #0]
 800728a:	bd38      	pop	{r3, r4, r5, pc}
 800728c:	2000046c 	.word	0x2000046c

08007290 <_close>:
 8007290:	4b02      	ldr	r3, [pc, #8]	; (800729c <_close+0xc>)
 8007292:	2258      	movs	r2, #88	; 0x58
 8007294:	601a      	str	r2, [r3, #0]
 8007296:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800729a:	4770      	bx	lr
 800729c:	2000046c 	.word	0x2000046c

080072a0 <_fstat>:
 80072a0:	4b02      	ldr	r3, [pc, #8]	; (80072ac <_fstat+0xc>)
 80072a2:	2258      	movs	r2, #88	; 0x58
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072aa:	4770      	bx	lr
 80072ac:	2000046c 	.word	0x2000046c

080072b0 <_getpid>:
 80072b0:	4b02      	ldr	r3, [pc, #8]	; (80072bc <_getpid+0xc>)
 80072b2:	2258      	movs	r2, #88	; 0x58
 80072b4:	601a      	str	r2, [r3, #0]
 80072b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072ba:	4770      	bx	lr
 80072bc:	2000046c 	.word	0x2000046c

080072c0 <_isatty>:
 80072c0:	4b02      	ldr	r3, [pc, #8]	; (80072cc <_isatty+0xc>)
 80072c2:	2258      	movs	r2, #88	; 0x58
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	2000      	movs	r0, #0
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	2000046c 	.word	0x2000046c

080072d0 <_kill>:
 80072d0:	4b02      	ldr	r3, [pc, #8]	; (80072dc <_kill+0xc>)
 80072d2:	2258      	movs	r2, #88	; 0x58
 80072d4:	601a      	str	r2, [r3, #0]
 80072d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072da:	4770      	bx	lr
 80072dc:	2000046c 	.word	0x2000046c

080072e0 <_lseek>:
 80072e0:	4b02      	ldr	r3, [pc, #8]	; (80072ec <_lseek+0xc>)
 80072e2:	2258      	movs	r2, #88	; 0x58
 80072e4:	601a      	str	r2, [r3, #0]
 80072e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072ea:	4770      	bx	lr
 80072ec:	2000046c 	.word	0x2000046c

080072f0 <_read>:
 80072f0:	4b02      	ldr	r3, [pc, #8]	; (80072fc <_read+0xc>)
 80072f2:	2258      	movs	r2, #88	; 0x58
 80072f4:	601a      	str	r2, [r3, #0]
 80072f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072fa:	4770      	bx	lr
 80072fc:	2000046c 	.word	0x2000046c

08007300 <_sbrk>:
 8007300:	4a04      	ldr	r2, [pc, #16]	; (8007314 <_sbrk+0x14>)
 8007302:	6811      	ldr	r1, [r2, #0]
 8007304:	4603      	mov	r3, r0
 8007306:	b909      	cbnz	r1, 800730c <_sbrk+0xc>
 8007308:	4903      	ldr	r1, [pc, #12]	; (8007318 <_sbrk+0x18>)
 800730a:	6011      	str	r1, [r2, #0]
 800730c:	6810      	ldr	r0, [r2, #0]
 800730e:	4403      	add	r3, r0
 8007310:	6013      	str	r3, [r2, #0]
 8007312:	4770      	bx	lr
 8007314:	20000474 	.word	0x20000474
 8007318:	20000478 	.word	0x20000478

0800731c <_write>:
 800731c:	4b02      	ldr	r3, [pc, #8]	; (8007328 <_write+0xc>)
 800731e:	2258      	movs	r2, #88	; 0x58
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007326:	4770      	bx	lr
 8007328:	2000046c 	.word	0x2000046c

0800732c <_exit>:
 800732c:	e7fe      	b.n	800732c <_exit>
	...

08007330 <_init>:
 8007330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007332:	bf00      	nop
 8007334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007336:	bc08      	pop	{r3}
 8007338:	469e      	mov	lr, r3
 800733a:	4770      	bx	lr

0800733c <_fini>:
 800733c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733e:	bf00      	nop
 8007340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007342:	bc08      	pop	{r3}
 8007344:	469e      	mov	lr, r3
 8007346:	4770      	bx	lr
