
pruebaJoystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  08007448  08007448  00017448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007924  08007924  00020218  2**0
                  CONTENTS
  4 .ARM          00000000  08007924  08007924  00020218  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007924  08007924  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007924  08007924  00017924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007928  08007928  00017928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800792c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000218  08007b44  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  08007b44  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   000039c9  00000000  00000000  00020242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bfc  00000000  00000000  00023c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000278  00000000  00000000  00024808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000200  00000000  00000000  00024a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fba1  00000000  00000000  00024c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003e2e  00000000  00000000  00034821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055d0d  00000000  00000000  0003864f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008e35c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e7c  00000000  00000000  0008e3ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00090228  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  000902f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007430 	.word	0x08007430

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	08007430 	.word	0x08007430

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	4605      	mov	r5, r0
 8000c9c:	460c      	mov	r4, r1
 8000c9e:	4628      	mov	r0, r5
 8000ca0:	4621      	mov	r1, r4
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f7ff ff21 	bl	8000aec <__aeabi_dcmplt>
 8000caa:	b928      	cbnz	r0, 8000cb8 <__aeabi_d2lz+0x20>
 8000cac:	4628      	mov	r0, r5
 8000cae:	4621      	mov	r1, r4
 8000cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb4:	f000 b80a 	b.w	8000ccc <__aeabi_d2ulz>
 8000cb8:	4628      	mov	r0, r5
 8000cba:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000cbe:	f000 f805 	bl	8000ccc <__aeabi_d2ulz>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	bd38      	pop	{r3, r4, r5, pc}
 8000cca:	bf00      	nop

08000ccc <__aeabi_d2ulz>:
 8000ccc:	b5d0      	push	{r4, r6, r7, lr}
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__aeabi_d2ulz+0x34>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4606      	mov	r6, r0
 8000cd4:	460f      	mov	r7, r1
 8000cd6:	f7ff fc97 	bl	8000608 <__aeabi_dmul>
 8000cda:	f7ff ff6d 	bl	8000bb8 <__aeabi_d2uiz>
 8000cde:	4604      	mov	r4, r0
 8000ce0:	f7ff fc18 	bl	8000514 <__aeabi_ui2d>
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <__aeabi_d2ulz+0x38>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f7ff fc8e 	bl	8000608 <__aeabi_dmul>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4630      	mov	r0, r6
 8000cf2:	4639      	mov	r1, r7
 8000cf4:	f7ff fad0 	bl	8000298 <__aeabi_dsub>
 8000cf8:	f7ff ff5e 	bl	8000bb8 <__aeabi_d2uiz>
 8000cfc:	4621      	mov	r1, r4
 8000cfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000d00:	3df00000 	.word	0x3df00000
 8000d04:	41f00000 	.word	0x41f00000

08000d08 <main>:
void pwmSignalSwitch(void);
uint16_t flagADC = {0};
uint16_t counterADC = {0};

/* Función principal del programa */
int main(void){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af02      	add	r7, sp, #8

	/* inicialización de todos los elementos del sistema */
	initHardware();
 8000d0e:	f000 f833 	bl	8000d78 <initHardware>
	writeMsg(&USART2Comm, bufferData);
 8000d12:	4910      	ldr	r1, [pc, #64]	; (8000d54 <main+0x4c>)
 8000d14:	4810      	ldr	r0, [pc, #64]	; (8000d58 <main+0x50>)
 8000d16:	f001 fb60 	bl	80023da <writeMsg>
	/* Loop infinito */
	while(1){
		pwmSignalSwitch();
 8000d1a:	f000 fa73 	bl	8001204 <pwmSignalSwitch>
		if(flagADC){
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <main+0x54>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d0f9      	beq.n	8000d1a <main+0x12>
			sprintf(buffer, "Channel X = %u , Channel Y = %u, Channel Z = %u \n", dataADCChannel0[0], dataADCChannel1[0], dataADCChannel2[0]);
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <main+0x58>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <main+0x5c>)
 8000d2c:	6819      	ldr	r1, [r3, #0]
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <main+0x60>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	460b      	mov	r3, r1
 8000d36:	490d      	ldr	r1, [pc, #52]	; (8000d6c <main+0x64>)
 8000d38:	480d      	ldr	r0, [pc, #52]	; (8000d70 <main+0x68>)
 8000d3a:	f002 fd79 	bl	8003830 <siprintf>
			writeMsg(&USART2Comm, buffer);
 8000d3e:	490c      	ldr	r1, [pc, #48]	; (8000d70 <main+0x68>)
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <main+0x50>)
 8000d42:	f001 fb4a 	bl	80023da <writeMsg>
			rxData = 0;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <main+0x6c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
			flagADC = 0;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <main+0x54>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	801a      	strh	r2, [r3, #0]
		pwmSignalSwitch();
 8000d52:	e7e2      	b.n	8000d1a <main+0x12>
 8000d54:	20000000 	.word	0x20000000
 8000d58:	200002d8 	.word	0x200002d8
 8000d5c:	2000045a 	.word	0x2000045a
 8000d60:	2000044c 	.word	0x2000044c
 8000d64:	20000450 	.word	0x20000450
 8000d68:	20000454 	.word	0x20000454
 8000d6c:	08007448 	.word	0x08007448
 8000d70:	20000408 	.word	0x20000408
 8000d74:	20000458 	.word	0x20000458

08000d78 <initHardware>:
	}
	return 0;
}// Final del main

// Función donde se configuran los pimsgToSendnes en general.
void initHardware(void){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0

	// Se desactiva el reloj HSE porque PH0 está conectado a un oscilador HSE.
	RCC->CR &= ~(RCC_CR_HSEON);
 8000d7c:	4bad      	ldr	r3, [pc, #692]	; (8001034 <initHardware+0x2bc>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4aac      	ldr	r2, [pc, #688]	; (8001034 <initHardware+0x2bc>)
 8000d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d86:	6013      	str	r3, [r2, #0]

	handlerStateLED.pGPIOx                               	= GPIOH;
 8000d88:	4bab      	ldr	r3, [pc, #684]	; (8001038 <initHardware+0x2c0>)
 8000d8a:	4aac      	ldr	r2, [pc, #688]	; (800103c <initHardware+0x2c4>)
 8000d8c:	601a      	str	r2, [r3, #0]
	handlerStateLED.GPIO_PinConfig.GPIO_PinNumber 			= PIN_1;
 8000d8e:	4baa      	ldr	r3, [pc, #680]	; (8001038 <initHardware+0x2c0>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	711a      	strb	r2, [r3, #4]
	handlerStateLED.GPIO_PinConfig.GPIO_PinMode 			= GPIO_MODE_OUT;
 8000d94:	4ba8      	ldr	r3, [pc, #672]	; (8001038 <initHardware+0x2c0>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	715a      	strb	r2, [r3, #5]
	handlerStateLED.GPIO_PinConfig.GPIO_PinOPType 			= GPIO_OTYPE_PUSHPULL;
 8000d9a:	4ba7      	ldr	r3, [pc, #668]	; (8001038 <initHardware+0x2c0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	721a      	strb	r2, [r3, #8]
	handlerStateLED.GPIO_PinConfig.GPIO_PinSpeed 			= GPIO_OSPEED_FAST;
 8000da0:	4ba5      	ldr	r3, [pc, #660]	; (8001038 <initHardware+0x2c0>)
 8000da2:	2202      	movs	r2, #2
 8000da4:	719a      	strb	r2, [r3, #6]
	handlerStateLED.GPIO_PinConfig.GPIO_PinPuPdControl 		= GPIO_PUPDR_NOTHING;
 8000da6:	4ba4      	ldr	r3, [pc, #656]	; (8001038 <initHardware+0x2c0>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	71da      	strb	r2, [r3, #7]
	GPIO_Config(&handlerStateLED);
 8000dac:	48a2      	ldr	r0, [pc, #648]	; (8001038 <initHardware+0x2c0>)
 8000dae:	f000 fe33 	bl	8001a18 <GPIO_Config>

	/* Configuración del TIM2 para que haga un blinky cada 250 ms */
	handlerBlinkyTimer.ptrTIMx 								= TIM2;
 8000db2:	4ba3      	ldr	r3, [pc, #652]	; (8001040 <initHardware+0x2c8>)
 8000db4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000db8:	601a      	str	r2, [r3, #0]
	handlerBlinkyTimer.TIMx_Config.TIMx_mode 				= BTIMER_MODE_UP;
 8000dba:	4ba1      	ldr	r3, [pc, #644]	; (8001040 <initHardware+0x2c8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	711a      	strb	r2, [r3, #4]
	handlerBlinkyTimer.TIMx_Config.TIMx_speed				= BTIMER_SPEED_1ms;
 8000dc0:	4b9f      	ldr	r3, [pc, #636]	; (8001040 <initHardware+0x2c8>)
 8000dc2:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000dc6:	609a      	str	r2, [r3, #8]
	handlerBlinkyTimer.TIMx_Config.TIMx_period 				= 250;
 8000dc8:	4b9d      	ldr	r3, [pc, #628]	; (8001040 <initHardware+0x2c8>)
 8000dca:	22fa      	movs	r2, #250	; 0xfa
 8000dcc:	60da      	str	r2, [r3, #12]
	handlerBlinkyTimer.TIMx_Config.TIMx_interruptEnable 	= BTIMER_INTERRUPT_ENABLE;
 8000dce:	4b9c      	ldr	r3, [pc, #624]	; (8001040 <initHardware+0x2c8>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	741a      	strb	r2, [r3, #16]
	BasicTimer_Config(&handlerBlinkyTimer);
 8000dd4:	489a      	ldr	r0, [pc, #616]	; (8001040 <initHardware+0x2c8>)
 8000dd6:	f000 fd23 	bl	8001820 <BasicTimer_Config>

	/* Configuración del USART */
	// Transmisión
	handlerUSARTPINTX.pGPIOx  							= GPIOA;
 8000dda:	4b9a      	ldr	r3, [pc, #616]	; (8001044 <initHardware+0x2cc>)
 8000ddc:	4a9a      	ldr	r2, [pc, #616]	; (8001048 <initHardware+0x2d0>)
 8000dde:	601a      	str	r2, [r3, #0]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinNumber 	= PIN_2;
 8000de0:	4b98      	ldr	r3, [pc, #608]	; (8001044 <initHardware+0x2cc>)
 8000de2:	2202      	movs	r2, #2
 8000de4:	711a      	strb	r2, [r3, #4]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFN;
 8000de6:	4b97      	ldr	r3, [pc, #604]	; (8001044 <initHardware+0x2cc>)
 8000de8:	2202      	movs	r2, #2
 8000dea:	715a      	strb	r2, [r3, #5]
	handlerUSARTPINTX.GPIO_PinConfig.GPIO_PinAltFunMode = AF7;
 8000dec:	4b95      	ldr	r3, [pc, #596]	; (8001044 <initHardware+0x2cc>)
 8000dee:	2207      	movs	r2, #7
 8000df0:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerUSARTPINTX);
 8000df2:	4894      	ldr	r0, [pc, #592]	; (8001044 <initHardware+0x2cc>)
 8000df4:	f000 fe10 	bl	8001a18 <GPIO_Config>

	// Recepción
	handlerUSARTPINRX.pGPIOx 						 	= GPIOA;
 8000df8:	4b94      	ldr	r3, [pc, #592]	; (800104c <initHardware+0x2d4>)
 8000dfa:	4a93      	ldr	r2, [pc, #588]	; (8001048 <initHardware+0x2d0>)
 8000dfc:	601a      	str	r2, [r3, #0]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinNumber		= PIN_3;
 8000dfe:	4b93      	ldr	r3, [pc, #588]	; (800104c <initHardware+0x2d4>)
 8000e00:	2203      	movs	r2, #3
 8000e02:	711a      	strb	r2, [r3, #4]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_ALTFN;
 8000e04:	4b91      	ldr	r3, [pc, #580]	; (800104c <initHardware+0x2d4>)
 8000e06:	2202      	movs	r2, #2
 8000e08:	715a      	strb	r2, [r3, #5]
	handlerUSARTPINRX.GPIO_PinConfig.GPIO_PinAltFunMode = AF7;
 8000e0a:	4b90      	ldr	r3, [pc, #576]	; (800104c <initHardware+0x2d4>)
 8000e0c:	2207      	movs	r2, #7
 8000e0e:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerUSARTPINRX);
 8000e10:	488e      	ldr	r0, [pc, #568]	; (800104c <initHardware+0x2d4>)
 8000e12:	f000 fe01 	bl	8001a18 <GPIO_Config>

	// Para el USART 6
	USART2Comm.ptrUSARTx 					= USART2;
 8000e16:	4b8e      	ldr	r3, [pc, #568]	; (8001050 <initHardware+0x2d8>)
 8000e18:	4a8e      	ldr	r2, [pc, #568]	; (8001054 <initHardware+0x2dc>)
 8000e1a:	601a      	str	r2, [r3, #0]
	USART2Comm.USART_Config.USART_baudrate 	= USART_BAUDRATE_115200;
 8000e1c:	4b8c      	ldr	r3, [pc, #560]	; (8001050 <initHardware+0x2d8>)
 8000e1e:	2202      	movs	r2, #2
 8000e20:	715a      	strb	r2, [r3, #5]
	USART2Comm.USART_Config.USART_datasize 	= USART_DATASIZE_8BIT;
 8000e22:	4b8b      	ldr	r3, [pc, #556]	; (8001050 <initHardware+0x2d8>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	719a      	strb	r2, [r3, #6]
	USART2Comm.USART_Config.USART_parity 	= USART_PARITY_NONE;
 8000e28:	4b89      	ldr	r3, [pc, #548]	; (8001050 <initHardware+0x2d8>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	71da      	strb	r2, [r3, #7]
	USART2Comm.USART_Config.USART_mode 		= USART_MODE_RXTX;
 8000e2e:	4b88      	ldr	r3, [pc, #544]	; (8001050 <initHardware+0x2d8>)
 8000e30:	2202      	movs	r2, #2
 8000e32:	711a      	strb	r2, [r3, #4]
	USART2Comm.USART_Config.USART_stopbits 	= USART_STOPBIT_1;
 8000e34:	4b86      	ldr	r3, [pc, #536]	; (8001050 <initHardware+0x2d8>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	721a      	strb	r2, [r3, #8]
	USART2Comm.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;
 8000e3a:	4b85      	ldr	r3, [pc, #532]	; (8001050 <initHardware+0x2d8>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	725a      	strb	r2, [r3, #9]

	// Se carga lo hecho sobre el USART
	USART_Config(&USART2Comm);
 8000e40:	4883      	ldr	r0, [pc, #524]	; (8001050 <initHardware+0x2d8>)
 8000e42:	f001 f8ad 	bl	8001fa0 <USART_Config>

	/* Configuración ADC */
	// Cargando la configuración para la conversación ADC
	adcConfig.dataAlignment			= ADC_ALIGNMENT_RIGHT;
 8000e46:	4b84      	ldr	r3, [pc, #528]	; (8001058 <initHardware+0x2e0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	711a      	strb	r2, [r3, #4]
	adcConfig.resolution			= ADC_RESOLUTION_12_BIT;
 8000e4c:	4b82      	ldr	r3, [pc, #520]	; (8001058 <initHardware+0x2e0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	705a      	strb	r2, [r3, #1]
	adcConfig.samplingPeriod		= ADC_SAMPLING_PERIOD_28_CYCLES;
 8000e52:	4b81      	ldr	r3, [pc, #516]	; (8001058 <initHardware+0x2e0>)
 8000e54:	2202      	movs	r2, #2
 8000e56:	805a      	strh	r2, [r3, #2]
	adcConfig.AdcEventType			= TIMER_ADC_EVENT;
 8000e58:	4b7f      	ldr	r3, [pc, #508]	; (8001058 <initHardware+0x2e0>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	721a      	strb	r2, [r3, #8]
	adcConfig.AdcChannelEvent		= TIM5_CH3;
 8000e5e:	4b7e      	ldr	r3, [pc, #504]	; (8001058 <initHardware+0x2e0>)
 8000e60:	220a      	movs	r2, #10
 8000e62:	725a      	strb	r2, [r3, #9]
	adcConfig.adcMultiChannel[0] 	= ADC_CHANNEL_1;
 8000e64:	4b7c      	ldr	r3, [pc, #496]	; (8001058 <initHardware+0x2e0>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	729a      	strb	r2, [r3, #10]
	adcConfig.adcMultiChannel[1]	= ADC_CHANNEL_4;
 8000e6a:	4b7b      	ldr	r3, [pc, #492]	; (8001058 <initHardware+0x2e0>)
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	72da      	strb	r2, [r3, #11]
	adcConfig.adcMultiChannel[2]	= ADC_CHANNEL_0;
 8000e70:	4b79      	ldr	r3, [pc, #484]	; (8001058 <initHardware+0x2e0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	731a      	strb	r2, [r3, #12]
	adcMultiChannel(&adcConfig, 3);
 8000e76:	2103      	movs	r1, #3
 8000e78:	4877      	ldr	r0, [pc, #476]	; (8001058 <initHardware+0x2e0>)
 8000e7a:	f001 fcab 	bl	80027d4 <adcMultiChannel>
	adcConfigEvents(&adcConfig);
 8000e7e:	4876      	ldr	r0, [pc, #472]	; (8001058 <initHardware+0x2e0>)
 8000e80:	f001 fc1c 	bl	80026bc <adcConfigEvents>

	// handler PWM
	handlerPWMprueba.ptrTIMx           	  =   TIM5;
 8000e84:	4b75      	ldr	r3, [pc, #468]	; (800105c <initHardware+0x2e4>)
 8000e86:	4a76      	ldr	r2, [pc, #472]	; (8001060 <initHardware+0x2e8>)
 8000e88:	601a      	str	r2, [r3, #0]
	handlerPWMprueba.config.channel       =   PWM_CHANNEL_3;
 8000e8a:	4b74      	ldr	r3, [pc, #464]	; (800105c <initHardware+0x2e4>)
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	711a      	strb	r2, [r3, #4]
	handlerPWMprueba.config.duttyCicle    =   10000;
 8000e90:	4b72      	ldr	r3, [pc, #456]	; (800105c <initHardware+0x2e4>)
 8000e92:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e96:	81da      	strh	r2, [r3, #14]
	handlerPWMprueba.config.periodo       =   20000;
 8000e98:	4b70      	ldr	r3, [pc, #448]	; (800105c <initHardware+0x2e4>)
 8000e9a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000e9e:	819a      	strh	r2, [r3, #12]
	handlerPWMprueba.config.prescaler     =   16;
 8000ea0:	4b6e      	ldr	r3, [pc, #440]	; (800105c <initHardware+0x2e4>)
 8000ea2:	2210      	movs	r2, #16
 8000ea4:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWMprueba);
 8000ea6:	486d      	ldr	r0, [pc, #436]	; (800105c <initHardware+0x2e4>)
 8000ea8:	f000 fef4 	bl	8001c94 <pwm_Config>
	enableOutput(&handlerPWMprueba);
 8000eac:	486b      	ldr	r0, [pc, #428]	; (800105c <initHardware+0x2e4>)
 8000eae:	f000 ffc7 	bl	8001e40 <enableOutput>
	startPwmSignal(&handlerPWMprueba);
 8000eb2:	486a      	ldr	r0, [pc, #424]	; (800105c <initHardware+0x2e4>)
 8000eb4:	f000 ffb2 	bl	8001e1c <startPwmSignal>

	// GPIO TIM 3 CC4
	HandlerTIM5PWM_1.pGPIOx          					= GPIOB;
 8000eb8:	4b6a      	ldr	r3, [pc, #424]	; (8001064 <initHardware+0x2ec>)
 8000eba:	4a6b      	ldr	r2, [pc, #428]	; (8001068 <initHardware+0x2f0>)
 8000ebc:	601a      	str	r2, [r3, #0]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinNumber  	= PIN_1;
 8000ebe:	4b69      	ldr	r3, [pc, #420]	; (8001064 <initHardware+0x2ec>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	711a      	strb	r2, [r3, #4]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8000ec4:	4b67      	ldr	r3, [pc, #412]	; (8001064 <initHardware+0x2ec>)
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	715a      	strb	r2, [r3, #5]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8000eca:	4b66      	ldr	r3, [pc, #408]	; (8001064 <initHardware+0x2ec>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	721a      	strb	r2, [r3, #8]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000ed0:	4b64      	ldr	r3, [pc, #400]	; (8001064 <initHardware+0x2ec>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	71da      	strb	r2, [r3, #7]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8000ed6:	4b63      	ldr	r3, [pc, #396]	; (8001064 <initHardware+0x2ec>)
 8000ed8:	2202      	movs	r2, #2
 8000eda:	719a      	strb	r2, [r3, #6]
	HandlerTIM5PWM_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000edc:	4b61      	ldr	r3, [pc, #388]	; (8001064 <initHardware+0x2ec>)
 8000ede:	2202      	movs	r2, #2
 8000ee0:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerTIM5PWM_1);
 8000ee2:	4860      	ldr	r0, [pc, #384]	; (8001064 <initHardware+0x2ec>)
 8000ee4:	f000 fd98 	bl	8001a18 <GPIO_Config>
	// Izquierda
	handlerPWM_1.ptrTIMx           	  =   TIM3;
 8000ee8:	4b60      	ldr	r3, [pc, #384]	; (800106c <initHardware+0x2f4>)
 8000eea:	4a61      	ldr	r2, [pc, #388]	; (8001070 <initHardware+0x2f8>)
 8000eec:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel       =   PWM_CHANNEL_4;
 8000eee:	4b5f      	ldr	r3, [pc, #380]	; (800106c <initHardware+0x2f4>)
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	711a      	strb	r2, [r3, #4]
	handlerPWM_1.config.duttyCicle    =   10000;
 8000ef4:	4b5d      	ldr	r3, [pc, #372]	; (800106c <initHardware+0x2f4>)
 8000ef6:	f242 7210 	movw	r2, #10000	; 0x2710
 8000efa:	81da      	strh	r2, [r3, #14]
	handlerPWM_1.config.periodo       =   20000;
 8000efc:	4b5b      	ldr	r3, [pc, #364]	; (800106c <initHardware+0x2f4>)
 8000efe:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000f02:	819a      	strh	r2, [r3, #12]
	handlerPWM_1.config.prescaler     =   16;
 8000f04:	4b59      	ldr	r3, [pc, #356]	; (800106c <initHardware+0x2f4>)
 8000f06:	2210      	movs	r2, #16
 8000f08:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_1);
 8000f0a:	4858      	ldr	r0, [pc, #352]	; (800106c <initHardware+0x2f4>)
 8000f0c:	f000 fec2 	bl	8001c94 <pwm_Config>

	// GPIO TIM 3 CC3
	HandlerTIM3PWM_2.pGPIOx          					= GPIOB;
 8000f10:	4b58      	ldr	r3, [pc, #352]	; (8001074 <initHardware+0x2fc>)
 8000f12:	4a55      	ldr	r2, [pc, #340]	; (8001068 <initHardware+0x2f0>)
 8000f14:	601a      	str	r2, [r3, #0]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinNumber  	= PIN_0;
 8000f16:	4b57      	ldr	r3, [pc, #348]	; (8001074 <initHardware+0x2fc>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	711a      	strb	r2, [r3, #4]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8000f1c:	4b55      	ldr	r3, [pc, #340]	; (8001074 <initHardware+0x2fc>)
 8000f1e:	2202      	movs	r2, #2
 8000f20:	715a      	strb	r2, [r3, #5]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8000f22:	4b54      	ldr	r3, [pc, #336]	; (8001074 <initHardware+0x2fc>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	721a      	strb	r2, [r3, #8]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f28:	4b52      	ldr	r3, [pc, #328]	; (8001074 <initHardware+0x2fc>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	71da      	strb	r2, [r3, #7]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8000f2e:	4b51      	ldr	r3, [pc, #324]	; (8001074 <initHardware+0x2fc>)
 8000f30:	2202      	movs	r2, #2
 8000f32:	719a      	strb	r2, [r3, #6]
	HandlerTIM3PWM_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000f34:	4b4f      	ldr	r3, [pc, #316]	; (8001074 <initHardware+0x2fc>)
 8000f36:	2202      	movs	r2, #2
 8000f38:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerTIM3PWM_2);
 8000f3a:	484e      	ldr	r0, [pc, #312]	; (8001074 <initHardware+0x2fc>)
 8000f3c:	f000 fd6c 	bl	8001a18 <GPIO_Config>
	// Derecha
	handlerPWM_2.ptrTIMx           	  =   TIM3;
 8000f40:	4b4d      	ldr	r3, [pc, #308]	; (8001078 <initHardware+0x300>)
 8000f42:	4a4b      	ldr	r2, [pc, #300]	; (8001070 <initHardware+0x2f8>)
 8000f44:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel       =   PWM_CHANNEL_3;
 8000f46:	4b4c      	ldr	r3, [pc, #304]	; (8001078 <initHardware+0x300>)
 8000f48:	2202      	movs	r2, #2
 8000f4a:	711a      	strb	r2, [r3, #4]
	handlerPWM_2.config.duttyCicle    =   10000;
 8000f4c:	4b4a      	ldr	r3, [pc, #296]	; (8001078 <initHardware+0x300>)
 8000f4e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f52:	81da      	strh	r2, [r3, #14]
	handlerPWM_2.config.periodo       =   20000;
 8000f54:	4b48      	ldr	r3, [pc, #288]	; (8001078 <initHardware+0x300>)
 8000f56:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000f5a:	819a      	strh	r2, [r3, #12]
	handlerPWM_2.config.prescaler     =   16;
 8000f5c:	4b46      	ldr	r3, [pc, #280]	; (8001078 <initHardware+0x300>)
 8000f5e:	2210      	movs	r2, #16
 8000f60:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_2);
 8000f62:	4845      	ldr	r0, [pc, #276]	; (8001078 <initHardware+0x300>)
 8000f64:	f000 fe96 	bl	8001c94 <pwm_Config>

	// GPIO TIM 3 CC1
	HandlerTIM3PWM_3.pGPIOx          					= GPIOA;
 8000f68:	4b44      	ldr	r3, [pc, #272]	; (800107c <initHardware+0x304>)
 8000f6a:	4a37      	ldr	r2, [pc, #220]	; (8001048 <initHardware+0x2d0>)
 8000f6c:	601a      	str	r2, [r3, #0]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinNumber  	= PIN_6;
 8000f6e:	4b43      	ldr	r3, [pc, #268]	; (800107c <initHardware+0x304>)
 8000f70:	2206      	movs	r2, #6
 8000f72:	711a      	strb	r2, [r3, #4]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8000f74:	4b41      	ldr	r3, [pc, #260]	; (800107c <initHardware+0x304>)
 8000f76:	2202      	movs	r2, #2
 8000f78:	715a      	strb	r2, [r3, #5]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8000f7a:	4b40      	ldr	r3, [pc, #256]	; (800107c <initHardware+0x304>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	721a      	strb	r2, [r3, #8]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f80:	4b3e      	ldr	r3, [pc, #248]	; (800107c <initHardware+0x304>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	71da      	strb	r2, [r3, #7]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8000f86:	4b3d      	ldr	r3, [pc, #244]	; (800107c <initHardware+0x304>)
 8000f88:	2202      	movs	r2, #2
 8000f8a:	719a      	strb	r2, [r3, #6]
	HandlerTIM3PWM_3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000f8c:	4b3b      	ldr	r3, [pc, #236]	; (800107c <initHardware+0x304>)
 8000f8e:	2202      	movs	r2, #2
 8000f90:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerTIM3PWM_3);
 8000f92:	483a      	ldr	r0, [pc, #232]	; (800107c <initHardware+0x304>)
 8000f94:	f000 fd40 	bl	8001a18 <GPIO_Config>
	// Arriba
	handlerPWM_3.ptrTIMx           	  =   TIM3;
 8000f98:	4b39      	ldr	r3, [pc, #228]	; (8001080 <initHardware+0x308>)
 8000f9a:	4a35      	ldr	r2, [pc, #212]	; (8001070 <initHardware+0x2f8>)
 8000f9c:	601a      	str	r2, [r3, #0]
	handlerPWM_3.config.channel       =   PWM_CHANNEL_1;
 8000f9e:	4b38      	ldr	r3, [pc, #224]	; (8001080 <initHardware+0x308>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	711a      	strb	r2, [r3, #4]
	handlerPWM_3.config.duttyCicle    =   10000;
 8000fa4:	4b36      	ldr	r3, [pc, #216]	; (8001080 <initHardware+0x308>)
 8000fa6:	f242 7210 	movw	r2, #10000	; 0x2710
 8000faa:	81da      	strh	r2, [r3, #14]
	handlerPWM_3.config.periodo       =   20000;
 8000fac:	4b34      	ldr	r3, [pc, #208]	; (8001080 <initHardware+0x308>)
 8000fae:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000fb2:	819a      	strh	r2, [r3, #12]
	handlerPWM_3.config.prescaler     =   16;
 8000fb4:	4b32      	ldr	r3, [pc, #200]	; (8001080 <initHardware+0x308>)
 8000fb6:	2210      	movs	r2, #16
 8000fb8:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_3);
 8000fba:	4831      	ldr	r0, [pc, #196]	; (8001080 <initHardware+0x308>)
 8000fbc:	f000 fe6a 	bl	8001c94 <pwm_Config>

	// GPIO TIM 3 CC2
	HandlerTIM3PWM_4.pGPIOx          					= GPIOA;
 8000fc0:	4b30      	ldr	r3, [pc, #192]	; (8001084 <initHardware+0x30c>)
 8000fc2:	4a21      	ldr	r2, [pc, #132]	; (8001048 <initHardware+0x2d0>)
 8000fc4:	601a      	str	r2, [r3, #0]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinNumber  	= PIN_7;
 8000fc6:	4b2f      	ldr	r3, [pc, #188]	; (8001084 <initHardware+0x30c>)
 8000fc8:	2207      	movs	r2, #7
 8000fca:	711a      	strb	r2, [r3, #4]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8000fcc:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <initHardware+0x30c>)
 8000fce:	2202      	movs	r2, #2
 8000fd0:	715a      	strb	r2, [r3, #5]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8000fd2:	4b2c      	ldr	r3, [pc, #176]	; (8001084 <initHardware+0x30c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	721a      	strb	r2, [r3, #8]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000fd8:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <initHardware+0x30c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	71da      	strb	r2, [r3, #7]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8000fde:	4b29      	ldr	r3, [pc, #164]	; (8001084 <initHardware+0x30c>)
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	719a      	strb	r2, [r3, #6]
	HandlerTIM3PWM_4.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000fe4:	4b27      	ldr	r3, [pc, #156]	; (8001084 <initHardware+0x30c>)
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerTIM3PWM_4);
 8000fea:	4826      	ldr	r0, [pc, #152]	; (8001084 <initHardware+0x30c>)
 8000fec:	f000 fd14 	bl	8001a18 <GPIO_Config>
	// Abajo
	handlerPWM_4.ptrTIMx           	  =   TIM3;
 8000ff0:	4b25      	ldr	r3, [pc, #148]	; (8001088 <initHardware+0x310>)
 8000ff2:	4a1f      	ldr	r2, [pc, #124]	; (8001070 <initHardware+0x2f8>)
 8000ff4:	601a      	str	r2, [r3, #0]
	handlerPWM_4.config.channel       =   PWM_CHANNEL_2;
 8000ff6:	4b24      	ldr	r3, [pc, #144]	; (8001088 <initHardware+0x310>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	711a      	strb	r2, [r3, #4]
	handlerPWM_4.config.duttyCicle    =   10000;
 8000ffc:	4b22      	ldr	r3, [pc, #136]	; (8001088 <initHardware+0x310>)
 8000ffe:	f242 7210 	movw	r2, #10000	; 0x2710
 8001002:	81da      	strh	r2, [r3, #14]
	handlerPWM_4.config.periodo       =   20000;
 8001004:	4b20      	ldr	r3, [pc, #128]	; (8001088 <initHardware+0x310>)
 8001006:	f644 6220 	movw	r2, #20000	; 0x4e20
 800100a:	819a      	strh	r2, [r3, #12]
	handlerPWM_4.config.prescaler     =   16;
 800100c:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <initHardware+0x310>)
 800100e:	2210      	movs	r2, #16
 8001010:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_4);
 8001012:	481d      	ldr	r0, [pc, #116]	; (8001088 <initHardware+0x310>)
 8001014:	f000 fe3e 	bl	8001c94 <pwm_Config>

	// GPIO TIM 4 CC1
	HandlerTIM4PWM_5.pGPIOx          					= GPIOB;
 8001018:	4b1c      	ldr	r3, [pc, #112]	; (800108c <initHardware+0x314>)
 800101a:	4a13      	ldr	r2, [pc, #76]	; (8001068 <initHardware+0x2f0>)
 800101c:	601a      	str	r2, [r3, #0]
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinNumber  	= PIN_6;
 800101e:	4b1b      	ldr	r3, [pc, #108]	; (800108c <initHardware+0x314>)
 8001020:	2206      	movs	r2, #6
 8001022:	711a      	strb	r2, [r3, #4]
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <initHardware+0x314>)
 8001026:	2202      	movs	r2, #2
 8001028:	715a      	strb	r2, [r3, #5]
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <initHardware+0x314>)
 800102c:	2200      	movs	r2, #0
 800102e:	721a      	strb	r2, [r3, #8]
 8001030:	e02e      	b.n	8001090 <initHardware+0x318>
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800
 8001038:	20000234 	.word	0x20000234
 800103c:	40021c00 	.word	0x40021c00
 8001040:	200002b8 	.word	0x200002b8
 8001044:	20000240 	.word	0x20000240
 8001048:	40020000 	.word	0x40020000
 800104c:	2000024c 	.word	0x2000024c
 8001050:	200002d8 	.word	0x200002d8
 8001054:	40004400 	.word	0x40004400
 8001058:	200002cc 	.word	0x200002cc
 800105c:	20000368 	.word	0x20000368
 8001060:	40000c00 	.word	0x40000c00
 8001064:	20000258 	.word	0x20000258
 8001068:	40020400 	.word	0x40020400
 800106c:	20000378 	.word	0x20000378
 8001070:	40000400 	.word	0x40000400
 8001074:	20000264 	.word	0x20000264
 8001078:	20000388 	.word	0x20000388
 800107c:	20000270 	.word	0x20000270
 8001080:	20000398 	.word	0x20000398
 8001084:	2000027c 	.word	0x2000027c
 8001088:	200003a8 	.word	0x200003a8
 800108c:	20000288 	.word	0x20000288
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001090:	4b52      	ldr	r3, [pc, #328]	; (80011dc <initHardware+0x464>)
 8001092:	2200      	movs	r2, #0
 8001094:	71da      	strb	r2, [r3, #7]
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8001096:	4b51      	ldr	r3, [pc, #324]	; (80011dc <initHardware+0x464>)
 8001098:	2202      	movs	r2, #2
 800109a:	719a      	strb	r2, [r3, #6]
	HandlerTIM4PWM_5.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 800109c:	4b4f      	ldr	r3, [pc, #316]	; (80011dc <initHardware+0x464>)
 800109e:	2202      	movs	r2, #2
 80010a0:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerTIM4PWM_5);
 80010a2:	484e      	ldr	r0, [pc, #312]	; (80011dc <initHardware+0x464>)
 80010a4:	f000 fcb8 	bl	8001a18 <GPIO_Config>
	// DIAGONAL X
	handlerPWM_5.ptrTIMx           	  =   TIM4;
 80010a8:	4b4d      	ldr	r3, [pc, #308]	; (80011e0 <initHardware+0x468>)
 80010aa:	4a4e      	ldr	r2, [pc, #312]	; (80011e4 <initHardware+0x46c>)
 80010ac:	601a      	str	r2, [r3, #0]
	handlerPWM_5.config.channel       =   PWM_CHANNEL_1;
 80010ae:	4b4c      	ldr	r3, [pc, #304]	; (80011e0 <initHardware+0x468>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	711a      	strb	r2, [r3, #4]
	handlerPWM_5.config.duttyCicle    =   10000;
 80010b4:	4b4a      	ldr	r3, [pc, #296]	; (80011e0 <initHardware+0x468>)
 80010b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80010ba:	81da      	strh	r2, [r3, #14]
	handlerPWM_5.config.periodo       =   20000;
 80010bc:	4b48      	ldr	r3, [pc, #288]	; (80011e0 <initHardware+0x468>)
 80010be:	f644 6220 	movw	r2, #20000	; 0x4e20
 80010c2:	819a      	strh	r2, [r3, #12]
	handlerPWM_5.config.prescaler     =   16;
 80010c4:	4b46      	ldr	r3, [pc, #280]	; (80011e0 <initHardware+0x468>)
 80010c6:	2210      	movs	r2, #16
 80010c8:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_5);
 80010ca:	4845      	ldr	r0, [pc, #276]	; (80011e0 <initHardware+0x468>)
 80010cc:	f000 fde2 	bl	8001c94 <pwm_Config>

	// GPIO TIM 4 CC2
	HandlerTIM4PWM_6.pGPIOx          					= GPIOB;
 80010d0:	4b45      	ldr	r3, [pc, #276]	; (80011e8 <initHardware+0x470>)
 80010d2:	4a46      	ldr	r2, [pc, #280]	; (80011ec <initHardware+0x474>)
 80010d4:	601a      	str	r2, [r3, #0]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinNumber  	= PIN_7;
 80010d6:	4b44      	ldr	r3, [pc, #272]	; (80011e8 <initHardware+0x470>)
 80010d8:	2207      	movs	r2, #7
 80010da:	711a      	strb	r2, [r3, #4]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 80010dc:	4b42      	ldr	r3, [pc, #264]	; (80011e8 <initHardware+0x470>)
 80010de:	2202      	movs	r2, #2
 80010e0:	715a      	strb	r2, [r3, #5]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 80010e2:	4b41      	ldr	r3, [pc, #260]	; (80011e8 <initHardware+0x470>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	721a      	strb	r2, [r3, #8]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010e8:	4b3f      	ldr	r3, [pc, #252]	; (80011e8 <initHardware+0x470>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	71da      	strb	r2, [r3, #7]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 80010ee:	4b3e      	ldr	r3, [pc, #248]	; (80011e8 <initHardware+0x470>)
 80010f0:	2202      	movs	r2, #2
 80010f2:	719a      	strb	r2, [r3, #6]
	HandlerTIM4PWM_6.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 80010f4:	4b3c      	ldr	r3, [pc, #240]	; (80011e8 <initHardware+0x470>)
 80010f6:	2202      	movs	r2, #2
 80010f8:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerTIM4PWM_6);
 80010fa:	483b      	ldr	r0, [pc, #236]	; (80011e8 <initHardware+0x470>)
 80010fc:	f000 fc8c 	bl	8001a18 <GPIO_Config>
	// DIAGONAL Y
	handlerPWM_6.ptrTIMx           	  =   TIM4;
 8001100:	4b3b      	ldr	r3, [pc, #236]	; (80011f0 <initHardware+0x478>)
 8001102:	4a38      	ldr	r2, [pc, #224]	; (80011e4 <initHardware+0x46c>)
 8001104:	601a      	str	r2, [r3, #0]
	handlerPWM_6.config.channel       =   PWM_CHANNEL_2;
 8001106:	4b3a      	ldr	r3, [pc, #232]	; (80011f0 <initHardware+0x478>)
 8001108:	2201      	movs	r2, #1
 800110a:	711a      	strb	r2, [r3, #4]
	handlerPWM_6.config.duttyCicle    =   10000;
 800110c:	4b38      	ldr	r3, [pc, #224]	; (80011f0 <initHardware+0x478>)
 800110e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001112:	81da      	strh	r2, [r3, #14]
	handlerPWM_6.config.periodo       =   20000;
 8001114:	4b36      	ldr	r3, [pc, #216]	; (80011f0 <initHardware+0x478>)
 8001116:	f644 6220 	movw	r2, #20000	; 0x4e20
 800111a:	819a      	strh	r2, [r3, #12]
	handlerPWM_6.config.prescaler     =   16;
 800111c:	4b34      	ldr	r3, [pc, #208]	; (80011f0 <initHardware+0x478>)
 800111e:	2210      	movs	r2, #16
 8001120:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_6);
 8001122:	4833      	ldr	r0, [pc, #204]	; (80011f0 <initHardware+0x478>)
 8001124:	f000 fdb6 	bl	8001c94 <pwm_Config>

	// GPIO TIM 4 CC3
	HandlerTIM4PWM_7.pGPIOx          					= GPIOB;
 8001128:	4b32      	ldr	r3, [pc, #200]	; (80011f4 <initHardware+0x47c>)
 800112a:	4a30      	ldr	r2, [pc, #192]	; (80011ec <initHardware+0x474>)
 800112c:	601a      	str	r2, [r3, #0]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinNumber  	= PIN_8;
 800112e:	4b31      	ldr	r3, [pc, #196]	; (80011f4 <initHardware+0x47c>)
 8001130:	2208      	movs	r2, #8
 8001132:	711a      	strb	r2, [r3, #4]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 8001134:	4b2f      	ldr	r3, [pc, #188]	; (80011f4 <initHardware+0x47c>)
 8001136:	2202      	movs	r2, #2
 8001138:	715a      	strb	r2, [r3, #5]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 800113a:	4b2e      	ldr	r3, [pc, #184]	; (80011f4 <initHardware+0x47c>)
 800113c:	2200      	movs	r2, #0
 800113e:	721a      	strb	r2, [r3, #8]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001140:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <initHardware+0x47c>)
 8001142:	2200      	movs	r2, #0
 8001144:	71da      	strb	r2, [r3, #7]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 8001146:	4b2b      	ldr	r3, [pc, #172]	; (80011f4 <initHardware+0x47c>)
 8001148:	2202      	movs	r2, #2
 800114a:	719a      	strb	r2, [r3, #6]
	HandlerTIM4PWM_7.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 800114c:	4b29      	ldr	r3, [pc, #164]	; (80011f4 <initHardware+0x47c>)
 800114e:	2202      	movs	r2, #2
 8001150:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerTIM4PWM_7);
 8001152:	4828      	ldr	r0, [pc, #160]	; (80011f4 <initHardware+0x47c>)
 8001154:	f000 fc60 	bl	8001a18 <GPIO_Config>
	// DIAGONAL Y
	handlerPWM_7.ptrTIMx           	  =   TIM4;
 8001158:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <initHardware+0x480>)
 800115a:	4a22      	ldr	r2, [pc, #136]	; (80011e4 <initHardware+0x46c>)
 800115c:	601a      	str	r2, [r3, #0]
	handlerPWM_7.config.channel       =   PWM_CHANNEL_3;
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <initHardware+0x480>)
 8001160:	2202      	movs	r2, #2
 8001162:	711a      	strb	r2, [r3, #4]
	handlerPWM_7.config.duttyCicle    =   10000;
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <initHardware+0x480>)
 8001166:	f242 7210 	movw	r2, #10000	; 0x2710
 800116a:	81da      	strh	r2, [r3, #14]
	handlerPWM_7.config.periodo       =   20000;
 800116c:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <initHardware+0x480>)
 800116e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001172:	819a      	strh	r2, [r3, #12]
	handlerPWM_7.config.prescaler     =   16;
 8001174:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <initHardware+0x480>)
 8001176:	2210      	movs	r2, #16
 8001178:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_7);
 800117a:	481f      	ldr	r0, [pc, #124]	; (80011f8 <initHardware+0x480>)
 800117c:	f000 fd8a 	bl	8001c94 <pwm_Config>

	// GPIO TIM 4 CC4
	HandlerTIM4PWM_8.pGPIOx          					= GPIOB;
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <initHardware+0x484>)
 8001182:	4a1a      	ldr	r2, [pc, #104]	; (80011ec <initHardware+0x474>)
 8001184:	601a      	str	r2, [r3, #0]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinNumber  	= PIN_9;
 8001186:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <initHardware+0x484>)
 8001188:	2209      	movs	r2, #9
 800118a:	711a      	strb	r2, [r3, #4]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinMode    	= GPIO_MODE_ALTFN;
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <initHardware+0x484>)
 800118e:	2202      	movs	r2, #2
 8001190:	715a      	strb	r2, [r3, #5]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinOPType  	= GPIO_OTYPE_PUSHPULL;
 8001192:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <initHardware+0x484>)
 8001194:	2200      	movs	r2, #0
 8001196:	721a      	strb	r2, [r3, #8]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <initHardware+0x484>)
 800119a:	2200      	movs	r2, #0
 800119c:	71da      	strb	r2, [r3, #7]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEED_FAST;
 800119e:	4b17      	ldr	r3, [pc, #92]	; (80011fc <initHardware+0x484>)
 80011a0:	2202      	movs	r2, #2
 80011a2:	719a      	strb	r2, [r3, #6]
	HandlerTIM4PWM_8.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <initHardware+0x484>)
 80011a6:	2202      	movs	r2, #2
 80011a8:	725a      	strb	r2, [r3, #9]

	GPIO_Config(&HandlerTIM4PWM_8);
 80011aa:	4814      	ldr	r0, [pc, #80]	; (80011fc <initHardware+0x484>)
 80011ac:	f000 fc34 	bl	8001a18 <GPIO_Config>
	// DIAGONAL Y
	handlerPWM_8.ptrTIMx           	  =   TIM4;
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <initHardware+0x488>)
 80011b2:	4a0c      	ldr	r2, [pc, #48]	; (80011e4 <initHardware+0x46c>)
 80011b4:	601a      	str	r2, [r3, #0]
	handlerPWM_8.config.channel       =   PWM_CHANNEL_4;
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <initHardware+0x488>)
 80011b8:	2203      	movs	r2, #3
 80011ba:	711a      	strb	r2, [r3, #4]
	handlerPWM_8.config.duttyCicle    =   10000;
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <initHardware+0x488>)
 80011be:	f242 7210 	movw	r2, #10000	; 0x2710
 80011c2:	81da      	strh	r2, [r3, #14]
	handlerPWM_8.config.periodo       =   20000;
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <initHardware+0x488>)
 80011c6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80011ca:	819a      	strh	r2, [r3, #12]
	handlerPWM_8.config.prescaler     =   16;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <initHardware+0x488>)
 80011ce:	2210      	movs	r2, #16
 80011d0:	609a      	str	r2, [r3, #8]
	pwm_Config(&handlerPWM_8);
 80011d2:	480b      	ldr	r0, [pc, #44]	; (8001200 <initHardware+0x488>)
 80011d4:	f000 fd5e 	bl	8001c94 <pwm_Config>
//	handlerPWM_9.config.periodo       =   20000;
//	handlerPWM_9.config.prescaler     =   16;
//	pwm_Config(&handlerPWM_9);


} // Fin initHardware
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000288 	.word	0x20000288
 80011e0:	200003b8 	.word	0x200003b8
 80011e4:	40000800 	.word	0x40000800
 80011e8:	20000294 	.word	0x20000294
 80011ec:	40020400 	.word	0x40020400
 80011f0:	200003c8 	.word	0x200003c8
 80011f4:	200002a0 	.word	0x200002a0
 80011f8:	200003d8 	.word	0x200003d8
 80011fc:	200002ac 	.word	0x200002ac
 8001200:	200003e8 	.word	0x200003e8

08001204 <pwmSignalSwitch>:

void pwmSignalSwitch(void){
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	if (dataADCChannel0[0] <= 10 && (dataADCChannel1[0] >= 2000 && dataADCChannel1[0] <= 2150)){
 8001208:	4bae      	ldr	r3, [pc, #696]	; (80014c4 <pwmSignalSwitch+0x2c0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b0a      	cmp	r3, #10
 800120e:	d836      	bhi.n	800127e <pwmSignalSwitch+0x7a>
 8001210:	4bad      	ldr	r3, [pc, #692]	; (80014c8 <pwmSignalSwitch+0x2c4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001218:	d331      	bcc.n	800127e <pwmSignalSwitch+0x7a>
 800121a:	4bab      	ldr	r3, [pc, #684]	; (80014c8 <pwmSignalSwitch+0x2c4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f640 0266 	movw	r2, #2150	; 0x866
 8001222:	4293      	cmp	r3, r2
 8001224:	d82b      	bhi.n	800127e <pwmSignalSwitch+0x7a>
		updateDuttyCycle(&handlerPWM_1, 10000);
 8001226:	f242 7110 	movw	r1, #10000	; 0x2710
 800122a:	48a8      	ldr	r0, [pc, #672]	; (80014cc <pwmSignalSwitch+0x2c8>)
 800122c:	f000 fe8c 	bl	8001f48 <updateDuttyCycle>
		enableOutput(&handlerPWM_1);
 8001230:	48a6      	ldr	r0, [pc, #664]	; (80014cc <pwmSignalSwitch+0x2c8>)
 8001232:	f000 fe05 	bl	8001e40 <enableOutput>
		startPwmSignal(&handlerPWM_1);
 8001236:	48a5      	ldr	r0, [pc, #660]	; (80014cc <pwmSignalSwitch+0x2c8>)
 8001238:	f000 fdf0 	bl	8001e1c <startPwmSignal>
		updateDuttyCycle(&handlerPWM_2, 0);
 800123c:	2100      	movs	r1, #0
 800123e:	48a4      	ldr	r0, [pc, #656]	; (80014d0 <pwmSignalSwitch+0x2cc>)
 8001240:	f000 fe82 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 8001244:	2100      	movs	r1, #0
 8001246:	48a3      	ldr	r0, [pc, #652]	; (80014d4 <pwmSignalSwitch+0x2d0>)
 8001248:	f000 fe7e 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 800124c:	2100      	movs	r1, #0
 800124e:	48a2      	ldr	r0, [pc, #648]	; (80014d8 <pwmSignalSwitch+0x2d4>)
 8001250:	f000 fe7a 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 8001254:	2100      	movs	r1, #0
 8001256:	48a1      	ldr	r0, [pc, #644]	; (80014dc <pwmSignalSwitch+0x2d8>)
 8001258:	f000 fe76 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 800125c:	2100      	movs	r1, #0
 800125e:	48a0      	ldr	r0, [pc, #640]	; (80014e0 <pwmSignalSwitch+0x2dc>)
 8001260:	f000 fe72 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 8001264:	2100      	movs	r1, #0
 8001266:	489f      	ldr	r0, [pc, #636]	; (80014e4 <pwmSignalSwitch+0x2e0>)
 8001268:	f000 fe6e 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 800126c:	2100      	movs	r1, #0
 800126e:	489e      	ldr	r0, [pc, #632]	; (80014e8 <pwmSignalSwitch+0x2e4>)
 8001270:	f000 fe6a 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 8001274:	2100      	movs	r1, #0
 8001276:	489d      	ldr	r0, [pc, #628]	; (80014ec <pwmSignalSwitch+0x2e8>)
 8001278:	f000 fe66 	bl	8001f48 <updateDuttyCycle>
 800127c:	e1f7      	b.n	800166e <pwmSignalSwitch+0x46a>
	}else if (dataADCChannel0[0] >= 4000 && (dataADCChannel1[0] >= 2000 && dataADCChannel1[0] <= 2150)){
 800127e:	4b91      	ldr	r3, [pc, #580]	; (80014c4 <pwmSignalSwitch+0x2c0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001286:	d336      	bcc.n	80012f6 <pwmSignalSwitch+0xf2>
 8001288:	4b8f      	ldr	r3, [pc, #572]	; (80014c8 <pwmSignalSwitch+0x2c4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001290:	d331      	bcc.n	80012f6 <pwmSignalSwitch+0xf2>
 8001292:	4b8d      	ldr	r3, [pc, #564]	; (80014c8 <pwmSignalSwitch+0x2c4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f640 0266 	movw	r2, #2150	; 0x866
 800129a:	4293      	cmp	r3, r2
 800129c:	d82b      	bhi.n	80012f6 <pwmSignalSwitch+0xf2>
		updateDuttyCycle(&handlerPWM_2, 10000);
 800129e:	f242 7110 	movw	r1, #10000	; 0x2710
 80012a2:	488b      	ldr	r0, [pc, #556]	; (80014d0 <pwmSignalSwitch+0x2cc>)
 80012a4:	f000 fe50 	bl	8001f48 <updateDuttyCycle>
		enableOutput(&handlerPWM_2);
 80012a8:	4889      	ldr	r0, [pc, #548]	; (80014d0 <pwmSignalSwitch+0x2cc>)
 80012aa:	f000 fdc9 	bl	8001e40 <enableOutput>
		startPwmSignal(&handlerPWM_2);
 80012ae:	4888      	ldr	r0, [pc, #544]	; (80014d0 <pwmSignalSwitch+0x2cc>)
 80012b0:	f000 fdb4 	bl	8001e1c <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 80012b4:	2100      	movs	r1, #0
 80012b6:	4885      	ldr	r0, [pc, #532]	; (80014cc <pwmSignalSwitch+0x2c8>)
 80012b8:	f000 fe46 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 80012bc:	2100      	movs	r1, #0
 80012be:	4885      	ldr	r0, [pc, #532]	; (80014d4 <pwmSignalSwitch+0x2d0>)
 80012c0:	f000 fe42 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 80012c4:	2100      	movs	r1, #0
 80012c6:	4884      	ldr	r0, [pc, #528]	; (80014d8 <pwmSignalSwitch+0x2d4>)
 80012c8:	f000 fe3e 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 80012cc:	2100      	movs	r1, #0
 80012ce:	4883      	ldr	r0, [pc, #524]	; (80014dc <pwmSignalSwitch+0x2d8>)
 80012d0:	f000 fe3a 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 80012d4:	2100      	movs	r1, #0
 80012d6:	4882      	ldr	r0, [pc, #520]	; (80014e0 <pwmSignalSwitch+0x2dc>)
 80012d8:	f000 fe36 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 80012dc:	2100      	movs	r1, #0
 80012de:	4881      	ldr	r0, [pc, #516]	; (80014e4 <pwmSignalSwitch+0x2e0>)
 80012e0:	f000 fe32 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 80012e4:	2100      	movs	r1, #0
 80012e6:	4880      	ldr	r0, [pc, #512]	; (80014e8 <pwmSignalSwitch+0x2e4>)
 80012e8:	f000 fe2e 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 80012ec:	2100      	movs	r1, #0
 80012ee:	487f      	ldr	r0, [pc, #508]	; (80014ec <pwmSignalSwitch+0x2e8>)
 80012f0:	f000 fe2a 	bl	8001f48 <updateDuttyCycle>
 80012f4:	e1bb      	b.n	800166e <pwmSignalSwitch+0x46a>
	}else if ((dataADCChannel0[0] >= 2000 && dataADCChannel0[0] <= 2150) && dataADCChannel1[0] >= 4000){
 80012f6:	4b73      	ldr	r3, [pc, #460]	; (80014c4 <pwmSignalSwitch+0x2c0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012fe:	d336      	bcc.n	800136e <pwmSignalSwitch+0x16a>
 8001300:	4b70      	ldr	r3, [pc, #448]	; (80014c4 <pwmSignalSwitch+0x2c0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f640 0266 	movw	r2, #2150	; 0x866
 8001308:	4293      	cmp	r3, r2
 800130a:	d830      	bhi.n	800136e <pwmSignalSwitch+0x16a>
 800130c:	4b6e      	ldr	r3, [pc, #440]	; (80014c8 <pwmSignalSwitch+0x2c4>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001314:	d32b      	bcc.n	800136e <pwmSignalSwitch+0x16a>
		updateDuttyCycle(&handlerPWM_3, 10000);
 8001316:	f242 7110 	movw	r1, #10000	; 0x2710
 800131a:	486e      	ldr	r0, [pc, #440]	; (80014d4 <pwmSignalSwitch+0x2d0>)
 800131c:	f000 fe14 	bl	8001f48 <updateDuttyCycle>
		enableOutput(&handlerPWM_3);
 8001320:	486c      	ldr	r0, [pc, #432]	; (80014d4 <pwmSignalSwitch+0x2d0>)
 8001322:	f000 fd8d 	bl	8001e40 <enableOutput>
		startPwmSignal(&handlerPWM_3);
 8001326:	486b      	ldr	r0, [pc, #428]	; (80014d4 <pwmSignalSwitch+0x2d0>)
 8001328:	f000 fd78 	bl	8001e1c <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 800132c:	2100      	movs	r1, #0
 800132e:	4867      	ldr	r0, [pc, #412]	; (80014cc <pwmSignalSwitch+0x2c8>)
 8001330:	f000 fe0a 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 8001334:	2100      	movs	r1, #0
 8001336:	4866      	ldr	r0, [pc, #408]	; (80014d0 <pwmSignalSwitch+0x2cc>)
 8001338:	f000 fe06 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 800133c:	2100      	movs	r1, #0
 800133e:	4866      	ldr	r0, [pc, #408]	; (80014d8 <pwmSignalSwitch+0x2d4>)
 8001340:	f000 fe02 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 8001344:	2100      	movs	r1, #0
 8001346:	4865      	ldr	r0, [pc, #404]	; (80014dc <pwmSignalSwitch+0x2d8>)
 8001348:	f000 fdfe 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 800134c:	2100      	movs	r1, #0
 800134e:	4864      	ldr	r0, [pc, #400]	; (80014e0 <pwmSignalSwitch+0x2dc>)
 8001350:	f000 fdfa 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 8001354:	2100      	movs	r1, #0
 8001356:	4863      	ldr	r0, [pc, #396]	; (80014e4 <pwmSignalSwitch+0x2e0>)
 8001358:	f000 fdf6 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 800135c:	2100      	movs	r1, #0
 800135e:	4862      	ldr	r0, [pc, #392]	; (80014e8 <pwmSignalSwitch+0x2e4>)
 8001360:	f000 fdf2 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 8001364:	2100      	movs	r1, #0
 8001366:	4861      	ldr	r0, [pc, #388]	; (80014ec <pwmSignalSwitch+0x2e8>)
 8001368:	f000 fdee 	bl	8001f48 <updateDuttyCycle>
 800136c:	e17f      	b.n	800166e <pwmSignalSwitch+0x46a>
	}else if ((dataADCChannel0[0] >= 2000 && dataADCChannel0[0] <= 2150) && dataADCChannel1[0] <= 10){
 800136e:	4b55      	ldr	r3, [pc, #340]	; (80014c4 <pwmSignalSwitch+0x2c0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001376:	d335      	bcc.n	80013e4 <pwmSignalSwitch+0x1e0>
 8001378:	4b52      	ldr	r3, [pc, #328]	; (80014c4 <pwmSignalSwitch+0x2c0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f640 0266 	movw	r2, #2150	; 0x866
 8001380:	4293      	cmp	r3, r2
 8001382:	d82f      	bhi.n	80013e4 <pwmSignalSwitch+0x1e0>
 8001384:	4b50      	ldr	r3, [pc, #320]	; (80014c8 <pwmSignalSwitch+0x2c4>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b0a      	cmp	r3, #10
 800138a:	d82b      	bhi.n	80013e4 <pwmSignalSwitch+0x1e0>
		updateDuttyCycle(&handlerPWM_4, 10000);
 800138c:	f242 7110 	movw	r1, #10000	; 0x2710
 8001390:	4851      	ldr	r0, [pc, #324]	; (80014d8 <pwmSignalSwitch+0x2d4>)
 8001392:	f000 fdd9 	bl	8001f48 <updateDuttyCycle>
		enableOutput(&handlerPWM_4);
 8001396:	4850      	ldr	r0, [pc, #320]	; (80014d8 <pwmSignalSwitch+0x2d4>)
 8001398:	f000 fd52 	bl	8001e40 <enableOutput>
		startPwmSignal(&handlerPWM_4);
 800139c:	484e      	ldr	r0, [pc, #312]	; (80014d8 <pwmSignalSwitch+0x2d4>)
 800139e:	f000 fd3d 	bl	8001e1c <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 80013a2:	2100      	movs	r1, #0
 80013a4:	4849      	ldr	r0, [pc, #292]	; (80014cc <pwmSignalSwitch+0x2c8>)
 80013a6:	f000 fdcf 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 80013aa:	2100      	movs	r1, #0
 80013ac:	4848      	ldr	r0, [pc, #288]	; (80014d0 <pwmSignalSwitch+0x2cc>)
 80013ae:	f000 fdcb 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 80013b2:	2100      	movs	r1, #0
 80013b4:	4847      	ldr	r0, [pc, #284]	; (80014d4 <pwmSignalSwitch+0x2d0>)
 80013b6:	f000 fdc7 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 80013ba:	2100      	movs	r1, #0
 80013bc:	4847      	ldr	r0, [pc, #284]	; (80014dc <pwmSignalSwitch+0x2d8>)
 80013be:	f000 fdc3 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 80013c2:	2100      	movs	r1, #0
 80013c4:	4846      	ldr	r0, [pc, #280]	; (80014e0 <pwmSignalSwitch+0x2dc>)
 80013c6:	f000 fdbf 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 80013ca:	2100      	movs	r1, #0
 80013cc:	4845      	ldr	r0, [pc, #276]	; (80014e4 <pwmSignalSwitch+0x2e0>)
 80013ce:	f000 fdbb 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 80013d2:	2100      	movs	r1, #0
 80013d4:	4844      	ldr	r0, [pc, #272]	; (80014e8 <pwmSignalSwitch+0x2e4>)
 80013d6:	f000 fdb7 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 80013da:	2100      	movs	r1, #0
 80013dc:	4843      	ldr	r0, [pc, #268]	; (80014ec <pwmSignalSwitch+0x2e8>)
 80013de:	f000 fdb3 	bl	8001f48 <updateDuttyCycle>
 80013e2:	e144      	b.n	800166e <pwmSignalSwitch+0x46a>
	}else if ((dataADCChannel1[0] >= 4000 && dataADCChannel1[0] <= 4150) && dataADCChannel0[0] <= 10){
 80013e4:	4b38      	ldr	r3, [pc, #224]	; (80014c8 <pwmSignalSwitch+0x2c4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80013ec:	d335      	bcc.n	800145a <pwmSignalSwitch+0x256>
 80013ee:	4b36      	ldr	r3, [pc, #216]	; (80014c8 <pwmSignalSwitch+0x2c4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f241 0236 	movw	r2, #4150	; 0x1036
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d82f      	bhi.n	800145a <pwmSignalSwitch+0x256>
 80013fa:	4b32      	ldr	r3, [pc, #200]	; (80014c4 <pwmSignalSwitch+0x2c0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b0a      	cmp	r3, #10
 8001400:	d82b      	bhi.n	800145a <pwmSignalSwitch+0x256>
		updateDuttyCycle(&handlerPWM_5, 10000);
 8001402:	f242 7110 	movw	r1, #10000	; 0x2710
 8001406:	4835      	ldr	r0, [pc, #212]	; (80014dc <pwmSignalSwitch+0x2d8>)
 8001408:	f000 fd9e 	bl	8001f48 <updateDuttyCycle>
		enableOutput(&handlerPWM_5);
 800140c:	4833      	ldr	r0, [pc, #204]	; (80014dc <pwmSignalSwitch+0x2d8>)
 800140e:	f000 fd17 	bl	8001e40 <enableOutput>
		startPwmSignal(&handlerPWM_5);
 8001412:	4832      	ldr	r0, [pc, #200]	; (80014dc <pwmSignalSwitch+0x2d8>)
 8001414:	f000 fd02 	bl	8001e1c <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 8001418:	2100      	movs	r1, #0
 800141a:	482c      	ldr	r0, [pc, #176]	; (80014cc <pwmSignalSwitch+0x2c8>)
 800141c:	f000 fd94 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 8001420:	2100      	movs	r1, #0
 8001422:	482b      	ldr	r0, [pc, #172]	; (80014d0 <pwmSignalSwitch+0x2cc>)
 8001424:	f000 fd90 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 8001428:	2100      	movs	r1, #0
 800142a:	482a      	ldr	r0, [pc, #168]	; (80014d4 <pwmSignalSwitch+0x2d0>)
 800142c:	f000 fd8c 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 8001430:	2100      	movs	r1, #0
 8001432:	4829      	ldr	r0, [pc, #164]	; (80014d8 <pwmSignalSwitch+0x2d4>)
 8001434:	f000 fd88 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 8001438:	2100      	movs	r1, #0
 800143a:	4829      	ldr	r0, [pc, #164]	; (80014e0 <pwmSignalSwitch+0x2dc>)
 800143c:	f000 fd84 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 8001440:	2100      	movs	r1, #0
 8001442:	4828      	ldr	r0, [pc, #160]	; (80014e4 <pwmSignalSwitch+0x2e0>)
 8001444:	f000 fd80 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 8001448:	2100      	movs	r1, #0
 800144a:	4827      	ldr	r0, [pc, #156]	; (80014e8 <pwmSignalSwitch+0x2e4>)
 800144c:	f000 fd7c 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 8001450:	2100      	movs	r1, #0
 8001452:	4826      	ldr	r0, [pc, #152]	; (80014ec <pwmSignalSwitch+0x2e8>)
 8001454:	f000 fd78 	bl	8001f48 <updateDuttyCycle>
 8001458:	e109      	b.n	800166e <pwmSignalSwitch+0x46a>
	}else if ((dataADCChannel1[0] >= 0 && dataADCChannel1[0] <= 20) && dataADCChannel0[0] <= 20){
 800145a:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <pwmSignalSwitch+0x2c4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b14      	cmp	r3, #20
 8001460:	d846      	bhi.n	80014f0 <pwmSignalSwitch+0x2ec>
 8001462:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <pwmSignalSwitch+0x2c0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b14      	cmp	r3, #20
 8001468:	d842      	bhi.n	80014f0 <pwmSignalSwitch+0x2ec>
		updateDuttyCycle(&handlerPWM_6, 10000);
 800146a:	f242 7110 	movw	r1, #10000	; 0x2710
 800146e:	481c      	ldr	r0, [pc, #112]	; (80014e0 <pwmSignalSwitch+0x2dc>)
 8001470:	f000 fd6a 	bl	8001f48 <updateDuttyCycle>
		enableOutput(&handlerPWM_6);
 8001474:	481a      	ldr	r0, [pc, #104]	; (80014e0 <pwmSignalSwitch+0x2dc>)
 8001476:	f000 fce3 	bl	8001e40 <enableOutput>
		startPwmSignal(&handlerPWM_6);
 800147a:	4819      	ldr	r0, [pc, #100]	; (80014e0 <pwmSignalSwitch+0x2dc>)
 800147c:	f000 fcce 	bl	8001e1c <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 8001480:	2100      	movs	r1, #0
 8001482:	4812      	ldr	r0, [pc, #72]	; (80014cc <pwmSignalSwitch+0x2c8>)
 8001484:	f000 fd60 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 8001488:	2100      	movs	r1, #0
 800148a:	4811      	ldr	r0, [pc, #68]	; (80014d0 <pwmSignalSwitch+0x2cc>)
 800148c:	f000 fd5c 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 8001490:	2100      	movs	r1, #0
 8001492:	4810      	ldr	r0, [pc, #64]	; (80014d4 <pwmSignalSwitch+0x2d0>)
 8001494:	f000 fd58 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 8001498:	2100      	movs	r1, #0
 800149a:	480f      	ldr	r0, [pc, #60]	; (80014d8 <pwmSignalSwitch+0x2d4>)
 800149c:	f000 fd54 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 80014a0:	2100      	movs	r1, #0
 80014a2:	480e      	ldr	r0, [pc, #56]	; (80014dc <pwmSignalSwitch+0x2d8>)
 80014a4:	f000 fd50 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 80014a8:	2100      	movs	r1, #0
 80014aa:	480e      	ldr	r0, [pc, #56]	; (80014e4 <pwmSignalSwitch+0x2e0>)
 80014ac:	f000 fd4c 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 80014b0:	2100      	movs	r1, #0
 80014b2:	480d      	ldr	r0, [pc, #52]	; (80014e8 <pwmSignalSwitch+0x2e4>)
 80014b4:	f000 fd48 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 80014b8:	2100      	movs	r1, #0
 80014ba:	480c      	ldr	r0, [pc, #48]	; (80014ec <pwmSignalSwitch+0x2e8>)
 80014bc:	f000 fd44 	bl	8001f48 <updateDuttyCycle>
 80014c0:	e0d5      	b.n	800166e <pwmSignalSwitch+0x46a>
 80014c2:	bf00      	nop
 80014c4:	2000044c 	.word	0x2000044c
 80014c8:	20000450 	.word	0x20000450
 80014cc:	20000378 	.word	0x20000378
 80014d0:	20000388 	.word	0x20000388
 80014d4:	20000398 	.word	0x20000398
 80014d8:	200003a8 	.word	0x200003a8
 80014dc:	200003b8 	.word	0x200003b8
 80014e0:	200003c8 	.word	0x200003c8
 80014e4:	200003d8 	.word	0x200003d8
 80014e8:	200003e8 	.word	0x200003e8
 80014ec:	200003f8 	.word	0x200003f8
	}else if ((dataADCChannel0[0] >= 4000 && dataADCChannel0[0] <= 4150) && (dataADCChannel1[0] >= 4000 && dataADCChannel1[0] <= 4150)){
 80014f0:	4b60      	ldr	r3, [pc, #384]	; (8001674 <pwmSignalSwitch+0x470>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80014f8:	d33c      	bcc.n	8001574 <pwmSignalSwitch+0x370>
 80014fa:	4b5e      	ldr	r3, [pc, #376]	; (8001674 <pwmSignalSwitch+0x470>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f241 0236 	movw	r2, #4150	; 0x1036
 8001502:	4293      	cmp	r3, r2
 8001504:	d836      	bhi.n	8001574 <pwmSignalSwitch+0x370>
 8001506:	4b5c      	ldr	r3, [pc, #368]	; (8001678 <pwmSignalSwitch+0x474>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800150e:	d331      	bcc.n	8001574 <pwmSignalSwitch+0x370>
 8001510:	4b59      	ldr	r3, [pc, #356]	; (8001678 <pwmSignalSwitch+0x474>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f241 0236 	movw	r2, #4150	; 0x1036
 8001518:	4293      	cmp	r3, r2
 800151a:	d82b      	bhi.n	8001574 <pwmSignalSwitch+0x370>
		updateDuttyCycle(&handlerPWM_7, 10000);
 800151c:	f242 7110 	movw	r1, #10000	; 0x2710
 8001520:	4856      	ldr	r0, [pc, #344]	; (800167c <pwmSignalSwitch+0x478>)
 8001522:	f000 fd11 	bl	8001f48 <updateDuttyCycle>
		enableOutput(&handlerPWM_7);
 8001526:	4855      	ldr	r0, [pc, #340]	; (800167c <pwmSignalSwitch+0x478>)
 8001528:	f000 fc8a 	bl	8001e40 <enableOutput>
		startPwmSignal(&handlerPWM_7);
 800152c:	4853      	ldr	r0, [pc, #332]	; (800167c <pwmSignalSwitch+0x478>)
 800152e:	f000 fc75 	bl	8001e1c <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 8001532:	2100      	movs	r1, #0
 8001534:	4852      	ldr	r0, [pc, #328]	; (8001680 <pwmSignalSwitch+0x47c>)
 8001536:	f000 fd07 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 800153a:	2100      	movs	r1, #0
 800153c:	4851      	ldr	r0, [pc, #324]	; (8001684 <pwmSignalSwitch+0x480>)
 800153e:	f000 fd03 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 8001542:	2100      	movs	r1, #0
 8001544:	4850      	ldr	r0, [pc, #320]	; (8001688 <pwmSignalSwitch+0x484>)
 8001546:	f000 fcff 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 800154a:	2100      	movs	r1, #0
 800154c:	484f      	ldr	r0, [pc, #316]	; (800168c <pwmSignalSwitch+0x488>)
 800154e:	f000 fcfb 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 8001552:	2100      	movs	r1, #0
 8001554:	484e      	ldr	r0, [pc, #312]	; (8001690 <pwmSignalSwitch+0x48c>)
 8001556:	f000 fcf7 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 800155a:	2100      	movs	r1, #0
 800155c:	484d      	ldr	r0, [pc, #308]	; (8001694 <pwmSignalSwitch+0x490>)
 800155e:	f000 fcf3 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 8001562:	2100      	movs	r1, #0
 8001564:	484c      	ldr	r0, [pc, #304]	; (8001698 <pwmSignalSwitch+0x494>)
 8001566:	f000 fcef 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 800156a:	2100      	movs	r1, #0
 800156c:	484b      	ldr	r0, [pc, #300]	; (800169c <pwmSignalSwitch+0x498>)
 800156e:	f000 fceb 	bl	8001f48 <updateDuttyCycle>
 8001572:	e07c      	b.n	800166e <pwmSignalSwitch+0x46a>
	}else if ((dataADCChannel0[0] >= 4000 && dataADCChannel0[0] <= 4150) && dataADCChannel1[0] <= 20){
 8001574:	4b3f      	ldr	r3, [pc, #252]	; (8001674 <pwmSignalSwitch+0x470>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800157c:	d335      	bcc.n	80015ea <pwmSignalSwitch+0x3e6>
 800157e:	4b3d      	ldr	r3, [pc, #244]	; (8001674 <pwmSignalSwitch+0x470>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f241 0236 	movw	r2, #4150	; 0x1036
 8001586:	4293      	cmp	r3, r2
 8001588:	d82f      	bhi.n	80015ea <pwmSignalSwitch+0x3e6>
 800158a:	4b3b      	ldr	r3, [pc, #236]	; (8001678 <pwmSignalSwitch+0x474>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b14      	cmp	r3, #20
 8001590:	d82b      	bhi.n	80015ea <pwmSignalSwitch+0x3e6>
		updateDuttyCycle(&handlerPWM_8, 10000);
 8001592:	f242 7110 	movw	r1, #10000	; 0x2710
 8001596:	4840      	ldr	r0, [pc, #256]	; (8001698 <pwmSignalSwitch+0x494>)
 8001598:	f000 fcd6 	bl	8001f48 <updateDuttyCycle>
		enableOutput(&handlerPWM_8);
 800159c:	483e      	ldr	r0, [pc, #248]	; (8001698 <pwmSignalSwitch+0x494>)
 800159e:	f000 fc4f 	bl	8001e40 <enableOutput>
		startPwmSignal(&handlerPWM_8);
 80015a2:	483d      	ldr	r0, [pc, #244]	; (8001698 <pwmSignalSwitch+0x494>)
 80015a4:	f000 fc3a 	bl	8001e1c <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 80015a8:	2100      	movs	r1, #0
 80015aa:	4835      	ldr	r0, [pc, #212]	; (8001680 <pwmSignalSwitch+0x47c>)
 80015ac:	f000 fccc 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 80015b0:	2100      	movs	r1, #0
 80015b2:	4834      	ldr	r0, [pc, #208]	; (8001684 <pwmSignalSwitch+0x480>)
 80015b4:	f000 fcc8 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 80015b8:	2100      	movs	r1, #0
 80015ba:	4833      	ldr	r0, [pc, #204]	; (8001688 <pwmSignalSwitch+0x484>)
 80015bc:	f000 fcc4 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 80015c0:	2100      	movs	r1, #0
 80015c2:	4832      	ldr	r0, [pc, #200]	; (800168c <pwmSignalSwitch+0x488>)
 80015c4:	f000 fcc0 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 80015c8:	2100      	movs	r1, #0
 80015ca:	4831      	ldr	r0, [pc, #196]	; (8001690 <pwmSignalSwitch+0x48c>)
 80015cc:	f000 fcbc 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 80015d0:	2100      	movs	r1, #0
 80015d2:	4830      	ldr	r0, [pc, #192]	; (8001694 <pwmSignalSwitch+0x490>)
 80015d4:	f000 fcb8 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 80015d8:	2100      	movs	r1, #0
 80015da:	4828      	ldr	r0, [pc, #160]	; (800167c <pwmSignalSwitch+0x478>)
 80015dc:	f000 fcb4 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_9, 0);
 80015e0:	2100      	movs	r1, #0
 80015e2:	482e      	ldr	r0, [pc, #184]	; (800169c <pwmSignalSwitch+0x498>)
 80015e4:	f000 fcb0 	bl	8001f48 <updateDuttyCycle>
 80015e8:	e041      	b.n	800166e <pwmSignalSwitch+0x46a>
	}else if ((dataADCChannel0[0] >= 2000 && dataADCChannel0[0] <= 2150) && (dataADCChannel1[0] >= 2000 && dataADCChannel1[0] <= 2150)){
 80015ea:	4b22      	ldr	r3, [pc, #136]	; (8001674 <pwmSignalSwitch+0x470>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80015f2:	d33c      	bcc.n	800166e <pwmSignalSwitch+0x46a>
 80015f4:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <pwmSignalSwitch+0x470>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f640 0266 	movw	r2, #2150	; 0x866
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d836      	bhi.n	800166e <pwmSignalSwitch+0x46a>
 8001600:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <pwmSignalSwitch+0x474>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001608:	d331      	bcc.n	800166e <pwmSignalSwitch+0x46a>
 800160a:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <pwmSignalSwitch+0x474>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f640 0266 	movw	r2, #2150	; 0x866
 8001612:	4293      	cmp	r3, r2
 8001614:	d82b      	bhi.n	800166e <pwmSignalSwitch+0x46a>
		updateDuttyCycle(&handlerPWM_9, 10000);
 8001616:	f242 7110 	movw	r1, #10000	; 0x2710
 800161a:	4820      	ldr	r0, [pc, #128]	; (800169c <pwmSignalSwitch+0x498>)
 800161c:	f000 fc94 	bl	8001f48 <updateDuttyCycle>
		enableOutput(&handlerPWM_9);
 8001620:	481e      	ldr	r0, [pc, #120]	; (800169c <pwmSignalSwitch+0x498>)
 8001622:	f000 fc0d 	bl	8001e40 <enableOutput>
		startPwmSignal(&handlerPWM_9);
 8001626:	481d      	ldr	r0, [pc, #116]	; (800169c <pwmSignalSwitch+0x498>)
 8001628:	f000 fbf8 	bl	8001e1c <startPwmSignal>
		updateDuttyCycle(&handlerPWM_1, 0);
 800162c:	2100      	movs	r1, #0
 800162e:	4814      	ldr	r0, [pc, #80]	; (8001680 <pwmSignalSwitch+0x47c>)
 8001630:	f000 fc8a 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_2, 0);
 8001634:	2100      	movs	r1, #0
 8001636:	4813      	ldr	r0, [pc, #76]	; (8001684 <pwmSignalSwitch+0x480>)
 8001638:	f000 fc86 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_3, 0);
 800163c:	2100      	movs	r1, #0
 800163e:	4812      	ldr	r0, [pc, #72]	; (8001688 <pwmSignalSwitch+0x484>)
 8001640:	f000 fc82 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_4, 0);
 8001644:	2100      	movs	r1, #0
 8001646:	4811      	ldr	r0, [pc, #68]	; (800168c <pwmSignalSwitch+0x488>)
 8001648:	f000 fc7e 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_5, 0);
 800164c:	2100      	movs	r1, #0
 800164e:	4810      	ldr	r0, [pc, #64]	; (8001690 <pwmSignalSwitch+0x48c>)
 8001650:	f000 fc7a 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_6, 0);
 8001654:	2100      	movs	r1, #0
 8001656:	480f      	ldr	r0, [pc, #60]	; (8001694 <pwmSignalSwitch+0x490>)
 8001658:	f000 fc76 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_7, 0);
 800165c:	2100      	movs	r1, #0
 800165e:	4807      	ldr	r0, [pc, #28]	; (800167c <pwmSignalSwitch+0x478>)
 8001660:	f000 fc72 	bl	8001f48 <updateDuttyCycle>
		updateDuttyCycle(&handlerPWM_8, 0);
 8001664:	2100      	movs	r1, #0
 8001666:	480c      	ldr	r0, [pc, #48]	; (8001698 <pwmSignalSwitch+0x494>)
 8001668:	f000 fc6e 	bl	8001f48 <updateDuttyCycle>
	}
}
 800166c:	e7ff      	b.n	800166e <pwmSignalSwitch+0x46a>
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	2000044c 	.word	0x2000044c
 8001678:	20000450 	.word	0x20000450
 800167c:	200003d8 	.word	0x200003d8
 8001680:	20000378 	.word	0x20000378
 8001684:	20000388 	.word	0x20000388
 8001688:	20000398 	.word	0x20000398
 800168c:	200003a8 	.word	0x200003a8
 8001690:	200003b8 	.word	0x200003b8
 8001694:	200003c8 	.word	0x200003c8
 8001698:	200003e8 	.word	0x200003e8
 800169c:	200003f8 	.word	0x200003f8

080016a0 <BasicTimer2_Callback>:

/* Timer que gobierna el blinky del led de estado */
void BasicTimer2_Callback(void){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	if(counterADC == 5){
 80016a4:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <BasicTimer2_Callback+0x30>)
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	2b05      	cmp	r3, #5
 80016aa:	d102      	bne.n	80016b2 <BasicTimer2_Callback+0x12>
		counterADC = 0;
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <BasicTimer2_Callback+0x30>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	801a      	strh	r2, [r3, #0]
	}
	flagADC = 1;
 80016b2:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <BasicTimer2_Callback+0x34>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	801a      	strh	r2, [r3, #0]
	counterADC++;
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <BasicTimer2_Callback+0x30>)
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	3301      	adds	r3, #1
 80016be:	b29a      	uxth	r2, r3
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <BasicTimer2_Callback+0x30>)
 80016c2:	801a      	strh	r2, [r3, #0]
	GPIOxTooglePin(&handlerStateLED);
 80016c4:	4804      	ldr	r0, [pc, #16]	; (80016d8 <BasicTimer2_Callback+0x38>)
 80016c6:	f000 facf 	bl	8001c68 <GPIOxTooglePin>
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000045c 	.word	0x2000045c
 80016d4:	2000045a 	.word	0x2000045a
 80016d8:	20000234 	.word	0x20000234

080016dc <usart2Rx_Callback>:



// Callback para los comandos del USART.
void usart2Rx_Callback(void){
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	rxData = getRxData();
 80016e0:	f000 fe94 	bl	800240c <getRxData>
 80016e4:	4603      	mov	r3, r0
 80016e6:	461a      	mov	r2, r3
 80016e8:	4b01      	ldr	r3, [pc, #4]	; (80016f0 <usart2Rx_Callback+0x14>)
 80016ea:	701a      	strb	r2, [r3, #0]
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000458 	.word	0x20000458

080016f4 <adcComplete_Callback>:

// Esta función controla el contador del ADC.(Hace las veces de callback)
void adcComplete_Callback(void){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	if(cont == 0){
 80016f8:	4b21      	ldr	r3, [pc, #132]	; (8001780 <adcComplete_Callback+0x8c>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d10a      	bne.n	8001716 <adcComplete_Callback+0x22>
		dataADCChannel0[cont2] = getADC();
 8001700:	f000 ff0c 	bl	800251c <getADC>
 8001704:	4603      	mov	r3, r0
 8001706:	4619      	mov	r1, r3
 8001708:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <adcComplete_Callback+0x90>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <adcComplete_Callback+0x94>)
 8001710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001714:	e01e      	b.n	8001754 <adcComplete_Callback+0x60>
	}
	else if (cont == 1){
 8001716:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <adcComplete_Callback+0x8c>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d10a      	bne.n	8001734 <adcComplete_Callback+0x40>
		dataADCChannel1[cont2] = getADC();
 800171e:	f000 fefd 	bl	800251c <getADC>
 8001722:	4603      	mov	r3, r0
 8001724:	4619      	mov	r1, r3
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <adcComplete_Callback+0x90>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	4b17      	ldr	r3, [pc, #92]	; (800178c <adcComplete_Callback+0x98>)
 800172e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001732:	e00f      	b.n	8001754 <adcComplete_Callback+0x60>
	}else{
		dataADCChannel2[cont2] = getADC();
 8001734:	f000 fef2 	bl	800251c <getADC>
 8001738:	4603      	mov	r3, r0
 800173a:	4619      	mov	r1, r3
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <adcComplete_Callback+0x90>)
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <adcComplete_Callback+0x9c>)
 8001744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		cont2++;
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <adcComplete_Callback+0x90>)
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	3301      	adds	r3, #1
 800174e:	b29a      	uxth	r2, r3
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <adcComplete_Callback+0x90>)
 8001752:	801a      	strh	r2, [r3, #0]
	}
	cont++;
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <adcComplete_Callback+0x8c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	3301      	adds	r3, #1
 800175a:	b2da      	uxtb	r2, r3
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <adcComplete_Callback+0x8c>)
 800175e:	701a      	strb	r2, [r3, #0]
	if(cont2 == 1){
 8001760:	4b08      	ldr	r3, [pc, #32]	; (8001784 <adcComplete_Callback+0x90>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d102      	bne.n	800176e <adcComplete_Callback+0x7a>
		cont2 = 0;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <adcComplete_Callback+0x90>)
 800176a:	2200      	movs	r2, #0
 800176c:	801a      	strh	r2, [r3, #0]
	}
	if(cont == 3){
 800176e:	4b04      	ldr	r3, [pc, #16]	; (8001780 <adcComplete_Callback+0x8c>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b03      	cmp	r3, #3
 8001774:	d102      	bne.n	800177c <adcComplete_Callback+0x88>
		cont = 0;
 8001776:	4b02      	ldr	r3, [pc, #8]	; (8001780 <adcComplete_Callback+0x8c>)
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
	}
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000448 	.word	0x20000448
 8001784:	2000044a 	.word	0x2000044a
 8001788:	2000044c 	.word	0x2000044c
 800178c:	20000450 	.word	0x20000450
 8001790:	20000454 	.word	0x20000454

08001794 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001794:	480d      	ldr	r0, [pc, #52]	; (80017cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001796:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001798:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800179c:	480c      	ldr	r0, [pc, #48]	; (80017d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800179e:	490d      	ldr	r1, [pc, #52]	; (80017d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017a0:	4a0d      	ldr	r2, [pc, #52]	; (80017d8 <LoopForever+0xe>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a4:	e002      	b.n	80017ac <LoopCopyDataInit>

080017a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017aa:	3304      	adds	r3, #4

080017ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b0:	d3f9      	bcc.n	80017a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b2:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80017b4:	4c0a      	ldr	r4, [pc, #40]	; (80017e0 <LoopForever+0x16>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b8:	e001      	b.n	80017be <LoopFillZerobss>

080017ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017bc:	3204      	adds	r2, #4

080017be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c0:	d3fb      	bcc.n	80017ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017c2:	f001 f99d 	bl	8002b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017c6:	f7ff fa9f 	bl	8000d08 <main>

080017ca <LoopForever>:

LoopForever:
    b LoopForever
 80017ca:	e7fe      	b.n	80017ca <LoopForever>
  ldr   r0, =_estack
 80017cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d4:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80017d8:	0800792c 	.word	0x0800792c
  ldr r2, =_sbss
 80017dc:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80017e0:	2000048c 	.word	0x2000048c

080017e4 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017e4:	e7fe      	b.n	80017e4 <BusFault_Handler>
	...

080017e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	db0b      	blt.n	8001812 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	f003 021f 	and.w	r2, r3, #31
 8001800:	4906      	ldr	r1, [pc, #24]	; (800181c <__NVIC_EnableIRQ+0x34>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	095b      	lsrs	r3, r3, #5
 8001808:	2001      	movs	r0, #1
 800180a:	fa00 f202 	lsl.w	r2, r0, r2
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr
 800181c:	e000e100 	.word	0xe000e100

08001820 <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrBTimerHandler->ptrTIMx;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a4e      	ldr	r2, [pc, #312]	; (8001968 <BasicTimer_Config+0x148>)
 800182e:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001830:	b672      	cpsid	i
}
 8001832:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();
	/* 1. Activar la señal de reloj del periférico requerido */
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800183c:	d106      	bne.n	800184c <BasicTimer_Config+0x2c>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 800183e:	4b4b      	ldr	r3, [pc, #300]	; (800196c <BasicTimer_Config+0x14c>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	4a4a      	ldr	r2, [pc, #296]	; (800196c <BasicTimer_Config+0x14c>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6413      	str	r3, [r2, #64]	; 0x40
 800184a:	e024      	b.n	8001896 <BasicTimer_Config+0x76>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a47      	ldr	r2, [pc, #284]	; (8001970 <BasicTimer_Config+0x150>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d106      	bne.n	8001864 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001856:	4b45      	ldr	r3, [pc, #276]	; (800196c <BasicTimer_Config+0x14c>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	4a44      	ldr	r2, [pc, #272]	; (800196c <BasicTimer_Config+0x14c>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
 8001862:	e018      	b.n	8001896 <BasicTimer_Config+0x76>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a42      	ldr	r2, [pc, #264]	; (8001974 <BasicTimer_Config+0x154>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d106      	bne.n	800187c <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 800186e:	4b3f      	ldr	r3, [pc, #252]	; (800196c <BasicTimer_Config+0x14c>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	4a3e      	ldr	r2, [pc, #248]	; (800196c <BasicTimer_Config+0x14c>)
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	6413      	str	r3, [r2, #64]	; 0x40
 800187a:	e00c      	b.n	8001896 <BasicTimer_Config+0x76>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a3d      	ldr	r2, [pc, #244]	; (8001978 <BasicTimer_Config+0x158>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d106      	bne.n	8001894 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001886:	4b39      	ldr	r3, [pc, #228]	; (800196c <BasicTimer_Config+0x14c>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	4a38      	ldr	r2, [pc, #224]	; (800196c <BasicTimer_Config+0x14c>)
 800188c:	f043 0308 	orr.w	r3, r3, #8
 8001890:	6413      	str	r3, [r2, #64]	; 0x40
 8001892:	e000      	b.n	8001896 <BasicTimer_Config+0x76>
	}

	else{
		__NOP();
 8001894:	bf00      	nop
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */
	// -1 porque el contador empieza en 0
	ptrBTimerHandler->ptrTIMx-> PSC = ptrBTimerHandler ->TIMx_Config.TIMx_speed - 1;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	3a01      	subs	r2, #1
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28

	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	791b      	ldrb	r3, [r3, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d112      	bne.n	80018d0 <BasicTimer_Config+0xb0>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Necesitamos poner la direccion en 0 para que cuente hacia arria TIM_CR1_DIR = 1, entonces
		// lo negamos y hacemos una AND con el valor actual.
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0210 	bic.w	r2, r2, #16
 80018b8:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	3a01      	subs	r2, #1
 80018c4:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2200      	movs	r2, #0
 80018cc:	625a      	str	r2, [r3, #36]	; 0x24
 80018ce:	e00d      	b.n	80018ec <BasicTimer_Config+0xcc>

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		// Cuando CR1 = 1 es descendente
		ptrBTimerHandler->ptrTIMx->CR1 = TIM_CR1_DIR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2210      	movs	r2, #16
 80018d6:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		ptrBTimerHandler-> ptrTIMx->ARR = 0;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2200      	movs	r2, #0
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	3a01      	subs	r2, #1
 80018ea:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0201 	orr.w	r2, r2, #1
 80018fa:	601a      	str	r2, [r3, #0]
	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	// El registro encargado de la interrupcion es el UIE

	// Modificar con el ciclo If
	ptrBTimerHandler->ptrTIMx->DIER |= ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable; //TIM_DIER_UIE
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	7c1b      	ldrb	r3, [r3, #16]
 8001906:	4619      	mov	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001918:	d103      	bne.n	8001922 <BasicTimer_Config+0x102>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 800191a:	201c      	movs	r0, #28
 800191c:	f7ff ff64 	bl	80017e8 <__NVIC_EnableIRQ>
 8001920:	e01b      	b.n	800195a <BasicTimer_Config+0x13a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a12      	ldr	r2, [pc, #72]	; (8001970 <BasicTimer_Config+0x150>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d103      	bne.n	8001934 <BasicTimer_Config+0x114>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 800192c:	201d      	movs	r0, #29
 800192e:	f7ff ff5b 	bl	80017e8 <__NVIC_EnableIRQ>
 8001932:	e012      	b.n	800195a <BasicTimer_Config+0x13a>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0e      	ldr	r2, [pc, #56]	; (8001974 <BasicTimer_Config+0x154>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d103      	bne.n	8001946 <BasicTimer_Config+0x126>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 800193e:	201e      	movs	r0, #30
 8001940:	f7ff ff52 	bl	80017e8 <__NVIC_EnableIRQ>
 8001944:	e009      	b.n	800195a <BasicTimer_Config+0x13a>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <BasicTimer_Config+0x158>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d103      	bne.n	8001958 <BasicTimer_Config+0x138>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8001950:	2032      	movs	r0, #50	; 0x32
 8001952:	f7ff ff49 	bl	80017e8 <__NVIC_EnableIRQ>
 8001956:	e000      	b.n	800195a <BasicTimer_Config+0x13a>
	}

	else{
		__NOP();
 8001958:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800195a:	b662      	cpsie	i
}
 800195c:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000460 	.word	0x20000460
 800196c:	40023800 	.word	0x40023800
 8001970:	40000400 	.word	0x40000400
 8001974:	40000800 	.word	0x40000800
 8001978:	40000c00 	.word	0x40000c00

0800197c <BasicTimer3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer3_Callback(void){
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001980:	bf00      	nop
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr

0800198a <BasicTimer4_Callback>:
__attribute__((weak)) void BasicTimer4_Callback(void){
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800198e:	bf00      	nop
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800199c:	bf00      	nop
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 80019a6:	b580      	push	{r7, lr}
 80019a8:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM2->SR &= ~TIM_SR_UIF;
 80019aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019b4:	f023 0301 	bic.w	r3, r3, #1
 80019b8:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer2_Callback();
 80019ba:	f7ff fe71 	bl	80016a0 <BasicTimer2_Callback>
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM3->SR &= ~TIM_SR_UIF;
 80019c8:	4b04      	ldr	r3, [pc, #16]	; (80019dc <TIM3_IRQHandler+0x18>)
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	4a03      	ldr	r2, [pc, #12]	; (80019dc <TIM3_IRQHandler+0x18>)
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer3_Callback();
 80019d4:	f7ff ffd2 	bl	800197c <BasicTimer3_Callback>
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40000400 	.word	0x40000400

080019e0 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM4->SR &= ~TIM_SR_UIF;
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <TIM4_IRQHandler+0x18>)
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	4a03      	ldr	r2, [pc, #12]	; (80019f8 <TIM4_IRQHandler+0x18>)
 80019ea:	f023 0301 	bic.w	r3, r3, #1
 80019ee:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer4_Callback();
 80019f0:	f7ff ffcb 	bl	800198a <BasicTimer4_Callback>
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40000800 	.word	0x40000800

080019fc <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM5->SR &= ~TIM_SR_UIF;
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <TIM5_IRQHandler+0x18>)
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	4a03      	ldr	r2, [pc, #12]	; (8001a14 <TIM5_IRQHandler+0x18>)
 8001a06:	f023 0301 	bic.w	r3, r3, #1
 8001a0a:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer5_Callback();
 8001a0c:	f7ff ffc4 	bl	8001998 <BasicTimer5_Callback>
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40000c00 	.word	0x40000c00

08001a18 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemento "activar el periferico o activar la señal de reloj del periferico)
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]

	// 1)Activar el periferico
	//verificamos para GPIOA
	if(pGPIOHandler->pGPIOx == GPIOA){
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a87      	ldr	r2, [pc, #540]	; (8001c4c <GPIO_Config+0x234>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d106      	bne.n	8001a40 <GPIO_Config+0x28>
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 8001a32:	4b87      	ldr	r3, [pc, #540]	; (8001c50 <GPIO_Config+0x238>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a86      	ldr	r2, [pc, #536]	; (8001c50 <GPIO_Config+0x238>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	e03a      	b.n	8001ab6 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx == GPIOB){
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a83      	ldr	r2, [pc, #524]	; (8001c54 <GPIO_Config+0x23c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d106      	bne.n	8001a58 <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 8001a4a:	4b81      	ldr	r3, [pc, #516]	; (8001c50 <GPIO_Config+0x238>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a80      	ldr	r2, [pc, #512]	; (8001c50 <GPIO_Config+0x238>)
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	e02e      	b.n	8001ab6 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if(pGPIOHandler->pGPIOx == GPIOC){
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a7e      	ldr	r2, [pc, #504]	; (8001c58 <GPIO_Config+0x240>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d106      	bne.n	8001a70 <GPIO_Config+0x58>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 8001a62:	4b7b      	ldr	r3, [pc, #492]	; (8001c50 <GPIO_Config+0x238>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a7a      	ldr	r2, [pc, #488]	; (8001c50 <GPIO_Config+0x238>)
 8001a68:	f043 0304 	orr.w	r3, r3, #4
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	e022      	b.n	8001ab6 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if(pGPIOHandler->pGPIOx == GPIOD){
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a79      	ldr	r2, [pc, #484]	; (8001c5c <GPIO_Config+0x244>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d106      	bne.n	8001a88 <GPIO_Config+0x70>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 8001a7a:	4b75      	ldr	r3, [pc, #468]	; (8001c50 <GPIO_Config+0x238>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a74      	ldr	r2, [pc, #464]	; (8001c50 <GPIO_Config+0x238>)
 8001a80:	f043 0308 	orr.w	r3, r3, #8
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	e016      	b.n	8001ab6 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if(pGPIOHandler->pGPIOx == GPIOE){
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a74      	ldr	r2, [pc, #464]	; (8001c60 <GPIO_Config+0x248>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d106      	bne.n	8001aa0 <GPIO_Config+0x88>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 8001a92:	4b6f      	ldr	r3, [pc, #444]	; (8001c50 <GPIO_Config+0x238>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a6e      	ldr	r2, [pc, #440]	; (8001c50 <GPIO_Config+0x238>)
 8001a98:	f043 0310 	orr.w	r3, r3, #16
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	e00a      	b.n	8001ab6 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOH
	else if(pGPIOHandler->pGPIOx == GPIOH){
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a6f      	ldr	r2, [pc, #444]	; (8001c64 <GPIO_Config+0x24c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d105      	bne.n	8001ab6 <GPIO_Config+0x9e>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 8001aaa:	4b69      	ldr	r3, [pc, #420]	; (8001c50 <GPIO_Config+0x238>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a68      	ldr	r2, [pc, #416]	; (8001c50 <GPIO_Config+0x238>)
 8001ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
	// Despues de activado, podemos comenzar a configurar.

	// 2) COnfigurando el registro GPIOx_MODER
	// Acá estamos leyendo config, moviendo "PinNumber" veces hacia la izquierda
	// ese valor (shift left) y todo eso lo cargamos en la variable auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	795b      	ldrb	r3, [r3, #5]
 8001aba:	461a      	mov	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	791b      	ldrb	r3, [r3, #4]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	60fb      	str	r3, [r7, #12]
	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro
	 * (debemos escribir 0b00) para lo cual aplicamos una mascara y una operación de
	 * bitwise AND
	 */
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	791b      	ldrb	r3, [r3, #4]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2103      	movs	r1, #3
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	4619      	mov	r1, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	400a      	ands	r2, r1
 8001ae4:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6819      	ldr	r1, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	7a1b      	ldrb	r3, [r3, #8]
 8001afa:	461a      	mov	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	791b      	ldrb	r3, [r3, #4]
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	791b      	ldrb	r3, [r3, #4]
 8001b10:	4619      	mov	r1, r3
 8001b12:	2301      	movs	r3, #1
 8001b14:	408b      	lsls	r3, r1
 8001b16:	43db      	mvns	r3, r3
 8001b18:	4619      	mov	r1, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	400a      	ands	r2, r1
 8001b20:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6859      	ldr	r1, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	799b      	ldrb	r3, [r3, #6]
 8001b36:	461a      	mov	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	791b      	ldrb	r3, [r3, #4]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0B11 << 2 *pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	791b      	ldrb	r3, [r3, #4]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	2103      	movs	r1, #3
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	4619      	mov	r1, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	400a      	ands	r2, r1
 8001b60:	609a      	str	r2, [r3, #8]

	//cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6899      	ldr	r1, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull up pull down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	79db      	ldrb	r3, [r3, #7]
 8001b76:	461a      	mov	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	791b      	ldrb	r3, [r3, #4]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	791b      	ldrb	r3, [r3, #4]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	2103      	movs	r1, #3
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	4619      	mov	r1, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	400a      	ands	r2, r1
 8001ba0:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68d9      	ldr	r1, [r3, #12]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas.. se vera luego
	if (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	795b      	ldrb	r3, [r3, #5]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d143      	bne.n	8001c42 <GPIO_Config+0x22a>

		//Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	791b      	ldrb	r3, [r3, #4]
 8001bbe:	2b07      	cmp	r3, #7
 8001bc0:	d81f      	bhi.n	8001c02 <GPIO_Config+0x1ea>
			//Estamos en el registro AGRL, que controla los piner del pIN_0 AL PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	791b      	ldrb	r3, [r3, #4]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del tegistro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6a1a      	ldr	r2, [r3, #32]
 8001bd0:	210f      	movs	r1, #15
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	4619      	mov	r1, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	400a      	ands	r2, r1
 8001be2:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor confiurado en la posicon seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6a1a      	ldr	r2, [r3, #32]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	7a5b      	ldrb	r3, [r3, #9]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} //Fin del GPIO_Config
 8001c00:	e01f      	b.n	8001c42 <GPIO_Config+0x22a>
			auxPosition = 4* (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber -8);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	791b      	ldrb	r3, [r3, #4]
 8001c06:	3b08      	subs	r3, #8
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c12:	210f      	movs	r1, #15
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	400a      	ands	r2, r1
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	7a5b      	ldrb	r3, [r3, #9]
 8001c30:	4619      	mov	r1, r3
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	fa01 f303 	lsl.w	r3, r1, r3
 8001c38:	4619      	mov	r1, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	625a      	str	r2, [r3, #36]	; 0x24
} //Fin del GPIO_Config
 8001c42:	bf00      	nop
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	40020000 	.word	0x40020000
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40020400 	.word	0x40020400
 8001c58:	40020800 	.word	0x40020800
 8001c5c:	40020c00 	.word	0x40020c00
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40021c00 	.word	0x40021c00

08001c68 <GPIOxTooglePin>:
	pinValue &= mask;

	return pinValue;
}

void GPIOxTooglePin(GPIO_Handler_t *pPinHandler){
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR ^= (SET <<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	695a      	ldr	r2, [r3, #20]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	791b      	ldrb	r3, [r3, #4]
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	408b      	lsls	r3, r1
 8001c80:	4619      	mov	r1, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	404a      	eors	r2, r1
 8001c88:	615a      	str	r2, [r3, #20]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <pwm_Config>:
 */

#include "PwmDriver.h"

/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if(ptrPwmHandler->ptrTIMx == TIM2){
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca4:	d106      	bne.n	8001cb4 <pwm_Config+0x20>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001ca6:	4b59      	ldr	r3, [pc, #356]	; (8001e0c <pwm_Config+0x178>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	4a58      	ldr	r2, [pc, #352]	; (8001e0c <pwm_Config+0x178>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb2:	e024      	b.n	8001cfe <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a55      	ldr	r2, [pc, #340]	; (8001e10 <pwm_Config+0x17c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d106      	bne.n	8001ccc <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001cbe:	4b53      	ldr	r3, [pc, #332]	; (8001e0c <pwm_Config+0x178>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	4a52      	ldr	r2, [pc, #328]	; (8001e0c <pwm_Config+0x178>)
 8001cc4:	f043 0302 	orr.w	r3, r3, #2
 8001cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cca:	e018      	b.n	8001cfe <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a50      	ldr	r2, [pc, #320]	; (8001e14 <pwm_Config+0x180>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d106      	bne.n	8001ce4 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001cd6:	4b4d      	ldr	r3, [pc, #308]	; (8001e0c <pwm_Config+0x178>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	4a4c      	ldr	r2, [pc, #304]	; (8001e0c <pwm_Config+0x178>)
 8001cdc:	f043 0304 	orr.w	r3, r3, #4
 8001ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce2:	e00c      	b.n	8001cfe <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a4b      	ldr	r2, [pc, #300]	; (8001e18 <pwm_Config+0x184>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d106      	bne.n	8001cfc <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001cee:	4b47      	ldr	r3, [pc, #284]	; (8001e0c <pwm_Config+0x178>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	4a46      	ldr	r2, [pc, #280]	; (8001e0c <pwm_Config+0x178>)
 8001cf4:	f043 0308 	orr.w	r3, r3, #8
 8001cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfa:	e000      	b.n	8001cfe <pwm_Config+0x6a>
	}
	else{
		__NOP();
 8001cfc:	bf00      	nop
	}

	/* 1. Cargamos la frecuencia deseada */
	setFrequency(ptrPwmHandler);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f8dc 	bl	8001ebc <setFrequency>

	/* 2. Cargamos el valor del dutty-Cycle*/
	setDuttyCycle(ptrPwmHandler);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f8ed 	bl	8001ee4 <setDuttyCycle>

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0210 	bic.w	r2, r2, #16
 8001d18:	601a      	str	r2, [r3, #0]
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	791b      	ldrb	r3, [r3, #4]
 8001d1e:	2b03      	cmp	r3, #3
 8001d20:	d86e      	bhi.n	8001e00 <pwm_Config+0x16c>
 8001d22:	a201      	add	r2, pc, #4	; (adr r2, 8001d28 <pwm_Config+0x94>)
 8001d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d28:	08001d39 	.word	0x08001d39
 8001d2c:	08001d6b 	.word	0x08001d6b
 8001d30:	08001d9d 	.word	0x08001d9d
 8001d34:	08001dcf 	.word	0x08001dcf
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~(TIM_CCMR1_CC1S);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	699a      	ldr	r2, [r3, #24]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0203 	bic.w	r2, r2, #3
 8001d46:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC1M_Pos);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699a      	ldr	r2, [r3, #24]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001d56:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699a      	ldr	r2, [r3, #24]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0208 	orr.w	r2, r2, #8
 8001d66:	619a      	str	r2, [r3, #24]

		break;
 8001d68:	e04b      	b.n	8001e02 <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~(TIM_CCMR1_CC2S);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	699a      	ldr	r2, [r3, #24]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001d78:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= (0b110 << TIM_CCMR1_OC2M_Pos);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	699a      	ldr	r2, [r3, #24]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001d88:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699a      	ldr	r2, [r3, #24]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d98:	619a      	str	r2, [r3, #24]
		break;
 8001d9a:	e032      	b.n	8001e02 <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_3:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~(TIM_CCMR2_CC3S);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	69da      	ldr	r2, [r3, #28]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0203 	bic.w	r2, r2, #3
 8001daa:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC3M_Pos);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	69da      	ldr	r2, [r3, #28]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001dba:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	69da      	ldr	r2, [r3, #28]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0208 	orr.w	r2, r2, #8
 8001dca:	61da      	str	r2, [r3, #28]
		break;
 8001dcc:	e019      	b.n	8001e02 <pwm_Config+0x16e>
	}

	case PWM_CHANNEL_4:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~(TIM_CCMR2_CC4S);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	69da      	ldr	r2, [r3, #28]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001ddc:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= (0b110 << TIM_CCMR2_OC4M_Pos);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	69da      	ldr	r2, [r3, #28]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001dec:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	69da      	ldr	r2, [r3, #28]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dfc:	61da      	str	r2, [r3, #28]
		break;
 8001dfe:	e000      	b.n	8001e02 <pwm_Config+0x16e>
	}

	default:{
		break;
 8001e00:	bf00      	nop

	/* 6. Activamos la salida seleccionada */
	enableOutput(ptrPwmHandler);

	}// fin del switch-case
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40000400 	.word	0x40000400
 8001e14:	40000800 	.word	0x40000800
 8001e18:	40000c00 	.word	0x40000c00

08001e1c <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr
	...

08001e40 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
void enableOutput(PWM_Handler_t *ptrPwmHandler) {
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	switch (ptrPwmHandler->config.channel) {
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	791b      	ldrb	r3, [r3, #4]
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d82f      	bhi.n	8001eb0 <enableOutput+0x70>
 8001e50:	a201      	add	r2, pc, #4	; (adr r2, 8001e58 <enableOutput+0x18>)
 8001e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e56:	bf00      	nop
 8001e58:	08001e69 	.word	0x08001e69
 8001e5c:	08001e7b 	.word	0x08001e7b
 8001e60:	08001e8d 	.word	0x08001e8d
 8001e64:	08001e9f 	.word	0x08001e9f
	case PWM_CHANNEL_1: {
		// Activamos la salida del canal 1
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6a1a      	ldr	r2, [r3, #32]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	621a      	str	r2, [r3, #32]
		break;
 8001e78:	e01b      	b.n	8001eb2 <enableOutput+0x72>
	}

	case PWM_CHANNEL_2: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6a1a      	ldr	r2, [r3, #32]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f042 0210 	orr.w	r2, r2, #16
 8001e88:	621a      	str	r2, [r3, #32]
		break;
 8001e8a:	e012      	b.n	8001eb2 <enableOutput+0x72>
	}

	case PWM_CHANNEL_3: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6a1a      	ldr	r2, [r3, #32]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e9a:	621a      	str	r2, [r3, #32]

		break;
 8001e9c:	e009      	b.n	8001eb2 <enableOutput+0x72>
	}

	case PWM_CHANNEL_4: {
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6a1a      	ldr	r2, [r3, #32]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001eac:	621a      	str	r2, [r3, #32]

		break;
 8001eae:	e000      	b.n	8001eb2 <enableOutput+0x72>
	}

	default: {
		break;
 8001eb0:	bf00      	nop
	}
	}
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <setFrequency>:
void offOutput(PWM_Handler_t *ptrPwmHandler) {
	switch (ptrPwmHandler->config.channel) {
	case PWM_CHANNEL_1: {
		// Activamos la salida del canal 1
		ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
		break;
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	}

	case PWM_CHANNEL_2: {
		// Activamos la salida del canal 2
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	3a01      	subs	r2, #1
 8001ece:	629a      	str	r2, [r3, #40]	; 0x28
		ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
		break;
	}

 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	899a      	ldrh	r2, [r3, #12]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	62da      	str	r2, [r3, #44]	; 0x2c
	case PWM_CHANNEL_3: {
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <setDuttyCycle>:
		// Activamos la salida del canal 2
		ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;

		break;
	}

 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
	default: {
		break;
	}
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	791b      	ldrb	r3, [r3, #4]
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d823      	bhi.n	8001f3c <setDuttyCycle+0x58>
 8001ef4:	a201      	add	r2, pc, #4	; (adr r2, 8001efc <setDuttyCycle+0x18>)
 8001ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efa:	bf00      	nop
 8001efc:	08001f0d 	.word	0x08001f0d
 8001f00:	08001f19 	.word	0x08001f19
 8001f04:	08001f25 	.word	0x08001f25
 8001f08:	08001f31 	.word	0x08001f31
	}
}
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	89da      	ldrh	r2, [r3, #14]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	635a      	str	r2, [r3, #52]	; 0x34

/*
 8001f16:	e012      	b.n	8001f3e <setDuttyCycle+0x5a>
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	89da      	ldrh	r2, [r3, #14]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	639a      	str	r2, [r3, #56]	; 0x38
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8001f22:	e00c      	b.n	8001f3e <setDuttyCycle+0x5a>

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler -1;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	89da      	ldrh	r2, [r3, #14]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	63da      	str	r2, [r3, #60]	; 0x3c

 8001f2e:	e006      	b.n	8001f3e <setDuttyCycle+0x5a>
	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.
	ptrPwmHandler->ptrTIMx->ARR = ptrPwmHandler->config.periodo;
}
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	89da      	ldrh	r2, [r3, #14]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	641a      	str	r2, [r3, #64]	; 0x40

 8001f3a:	e000      	b.n	8001f3e <setDuttyCycle+0x5a>

/* Función para actualizar la frecuencia, funciona de la mano con setFrequency */
void updateFrequency(PWM_Handler_t *ptrPwmHandler, uint16_t newFreq){
	// Actualizamos el registro que manipula el periodo
 8001f3c:	bf00      	nop
    ptrPwmHandler->config.periodo = newFreq;

	// Llamamos a la fucnión que cambia la frecuencia
    setFrequency(ptrPwmHandler);
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <updateDuttyCycle>:

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){

 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	807b      	strh	r3, [r7, #2]
	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	887a      	ldrh	r2, [r7, #2]
 8001f58:	81da      	strh	r2, [r3, #14]
	case PWM_CHANNEL_1:{
		ptrPwmHandler->ptrTIMx->CCR1 = ptrPwmHandler->config.duttyCicle;

 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ffc2 	bl	8001ee4 <setDuttyCycle>
		break;
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <__NVIC_EnableIRQ>:
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	db0b      	blt.n	8001f92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	f003 021f 	and.w	r2, r3, #31
 8001f80:	4906      	ldr	r1, [pc, #24]	; (8001f9c <__NVIC_EnableIRQ+0x34>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	2001      	movs	r0, #1
 8001f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr
 8001f9c:	e000e100 	.word	0xe000e100

08001fa0 <USART_Config>:
 */

// Esta variable es necesaria para las interrupciones del USART 2 y 6.
uint8_t auxRxData = 0;

void USART_Config(USART_Handler_t *ptrUsartHandler){
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa8:	b672      	cpsid	i
}
 8001faa:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a8c      	ldr	r2, [pc, #560]	; (80021e4 <USART_Config+0x244>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d106      	bne.n	8001fc4 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8001fb6:	4b8c      	ldr	r3, [pc, #560]	; (80021e8 <USART_Config+0x248>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	4a8b      	ldr	r2, [pc, #556]	; (80021e8 <USART_Config+0x248>)
 8001fbc:	f043 0310 	orr.w	r3, r3, #16
 8001fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc2:	e016      	b.n	8001ff2 <USART_Config+0x52>
	}else if(ptrUsartHandler->ptrUSARTx == USART6){
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a88      	ldr	r2, [pc, #544]	; (80021ec <USART_Config+0x24c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d106      	bne.n	8001fdc <USART_Config+0x3c>
		/*Configuramos el USART 6 que está en el mismo bus del USART 1 */
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8001fce:	4b86      	ldr	r3, [pc, #536]	; (80021e8 <USART_Config+0x248>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	4a85      	ldr	r2, [pc, #532]	; (80021e8 <USART_Config+0x248>)
 8001fd4:	f043 0320 	orr.w	r3, r3, #32
 8001fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fda:	e00a      	b.n	8001ff2 <USART_Config+0x52>
		// Luego el USART 2 que está en el bus 1.
	}else if(ptrUsartHandler->ptrUSARTx == USART2){
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a83      	ldr	r2, [pc, #524]	; (80021f0 <USART_Config+0x250>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d105      	bne.n	8001ff2 <USART_Config+0x52>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8001fe6:	4b80      	ldr	r3, [pc, #512]	; (80021e8 <USART_Config+0x248>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	4a7f      	ldr	r2, [pc, #508]	; (80021e8 <USART_Config+0x248>)
 8001fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff0:	6413      	str	r3, [r2, #64]	; 0x40
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2200      	movs	r2, #0
 8002000:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	79db      	ldrb	r3, [r3, #7]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d025      	beq.n	8002056 <USART_Config+0xb6>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	79db      	ldrb	r3, [r3, #7]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d110      	bne.n	8002034 <USART_Config+0x94>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002020:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	e018      	b.n	8002066 <USART_Config+0xc6>

		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002042:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002052:	60da      	str	r2, [r3, #12]
 8002054:	e007      	b.n	8002066 <USART_Config+0xc6>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002064:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize ==USART_DATASIZE_8BIT){
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	799b      	ldrb	r3, [r3, #6]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d115      	bne.n	800209a <USART_Config+0xfa>

	    	// Inicialmente debe corroborarse si se quiere o no la paridad.
	    	if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_NONE){
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	79db      	ldrb	r3, [r3, #7]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d108      	bne.n	8002088 <USART_Config+0xe8>
	    		// Si se quieren datos de 8 bits.
	    		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	e010      	b.n	80020aa <USART_Config+0x10a>
	    	}
	    	else{
	    		// Si la partidad esta activada, se agrega un BIT adicional.
	    		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002096:	60da      	str	r2, [r3, #12]
 8002098:	e007      	b.n	80020aa <USART_Config+0x10a>
	    	}
	    }
	    else{
	    	// Se configuran 9 bits para el tamaño.
	    	ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80020a8:	60da      	str	r2, [r3, #12]
	    }

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	7a1b      	ldrb	r3, [r3, #8]
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d84e      	bhi.n	8002150 <USART_Config+0x1b0>
 80020b2:	a201      	add	r2, pc, #4	; (adr r2, 80020b8 <USART_Config+0x118>)
 80020b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b8:	080020c9 	.word	0x080020c9
 80020bc:	080020eb 	.word	0x080020eb
 80020c0:	0800210d 	.word	0x0800210d
 80020c4:	0800212f 	.word	0x0800212f
	case USART_STOPBIT_1: {
		// Debemos cargar el valor 0b00 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691a      	ldr	r2, [r3, #16]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020d6:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691a      	ldr	r2, [r3, #16]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020e6:	611a      	str	r2, [r3, #16]
		break;
 80020e8:	e043      	b.n	8002172 <USART_Config+0x1d2>
	}
	case USART_STOPBIT_0_5: {
		// Debemos cargar el valor 0b01 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80020f8:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002108:	611a      	str	r2, [r3, #16]
		break;
 800210a:	e032      	b.n	8002172 <USART_Config+0x1d2>
	}
	case USART_STOPBIT_2: {
		// Debemos cargar el valor 0b10 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800211a:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691a      	ldr	r2, [r3, #16]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800212a:	611a      	str	r2, [r3, #16]
		break;
 800212c:	e021      	b.n	8002172 <USART_Config+0x1d2>
	}
	case USART_STOPBIT_1_5: {
		// Debemos cargar el valor 0b11 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800213c:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800214c:	611a      	str	r2, [r3, #16]
		break;
 800214e:	e010      	b.n	8002172 <USART_Config+0x1d2>
	}
	default: {
		// En el caso por defecto seleccionamos 1 bit de parada
		// Escriba acá su código
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691a      	ldr	r2, [r3, #16]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800215e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691a      	ldr	r2, [r3, #16]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800216e:	611a      	str	r2, [r3, #16]
		break;
 8002170:	bf00      	nop
	 * decida utilizar el usuario. La función getConfig() retorna esta
	 * frecuencia en que se encuentra actualmente el reloj del sistema PLL,
	 * por tanto, se considera un condicional que incluye los cálculos para
	 * la frecuencia de 100 MHz y por defecto recurre a la frecuencia natural.
	 */
	if(actualFrecuency == 100000000){
 8002172:	f000 fca3 	bl	8002abc <getConfigPLL>
 8002176:	4603      	mov	r3, r0
 8002178:	4a1e      	ldr	r2, [pc, #120]	; (80021f4 <USART_Config+0x254>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d11d      	bne.n	80021ba <USART_Config+0x21a>
		// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
		if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	795b      	ldrb	r3, [r3, #5]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d105      	bne.n	8002192 <USART_Config+0x1f2>
			// El valor a cargar es 651.041 -> Mantiza = 651,fraction = 0.041
			// Mantiza = 651 = 0x28b, fraction = 16 * 0.041 = 1
			// Valor a cargar 0x28B1
			// Configurando el Baudrate generator para una velocidad de 9600bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x28B1;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f642 02b1 	movw	r2, #10417	; 0x28b1
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	e03a      	b.n	8002208 <USART_Config+0x268>
		}

		else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	795b      	ldrb	r3, [r3, #5]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d105      	bne.n	80021a6 <USART_Config+0x206>
			// El valor a cargar es 325.520 -> Mantiza = 325,fraction = 0.520
			// Mantiza = 325 = 0x145, fraction = 16 * 0.520 = 8
			// Valor a cargar 0x1458
			ptrUsartHandler->ptrUSARTx->BRR = 0x1458;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f241 4258 	movw	r2, #5208	; 0x1458
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	e030      	b.n	8002208 <USART_Config+0x268>
		}

		else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	795b      	ldrb	r3, [r3, #5]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d12c      	bne.n	8002208 <USART_Config+0x268>
			// El valor a cargar es 54.253 -> Mantiza = 54,fraction = 0.253
			// Mantiza = 54 = 0x36, fraction = 16 * 0.253 = 4.
			ptrUsartHandler->ptrUSARTx->BRR = 0x364;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f44f 7259 	mov.w	r2, #868	; 0x364
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	e026      	b.n	8002208 <USART_Config+0x268>
		}
	// Caso por defecto de 16 MHz.
	}else{
		// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
		if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	795b      	ldrb	r3, [r3, #5]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d105      	bne.n	80021ce <USART_Config+0x22e>
			// El valor a cargar es 104.1875 -> Mantiza = 104,fraction = 0.1875
			// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
			// Valor a cargar 0x0683
			// Configurando el Baudrate generator para una velocidad de 9600bps
			ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f240 6283 	movw	r2, #1667	; 0x683
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	e01c      	b.n	8002208 <USART_Config+0x268>
		}

		else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	795b      	ldrb	r3, [r3, #5]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d110      	bne.n	80021f8 <USART_Config+0x258>
			// El valor a cargar es 52.0625 -> Mantiza = 52,fraction = 0.0625
			// Mantiza = 52 = 0x34, fraction = 16 * 0.0625 = 1
			// Escriba acá su código y los comentarios que faltan
			// Valor a cargar 0x0341
			ptrUsartHandler->ptrUSARTx->BRR = 0x0341;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f240 3241 	movw	r2, #833	; 0x341
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	e012      	b.n	8002208 <USART_Config+0x268>
 80021e2:	bf00      	nop
 80021e4:	40011000 	.word	0x40011000
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40011400 	.word	0x40011400
 80021f0:	40004400 	.word	0x40004400
 80021f4:	05f5e100 	.word	0x05f5e100
		}

		else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	795b      	ldrb	r3, [r3, #5]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d103      	bne.n	8002208 <USART_Config+0x268>
			// Escriba acá su código y los comentarios que faltan
			// El valor a cargar es 8.6875 -> Mantiza = 8,fraction = 0.6875
			// Mantiza = 8 = 0x8, fraction = 16 * 0.6875 = 11 = B.
			ptrUsartHandler->ptrUSARTx->BRR = 0x008B;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	228b      	movs	r2, #139	; 0x8b
 8002206:	609a      	str	r2, [r3, #8]
		}
	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	791b      	ldrb	r3, [r3, #4]
 800220c:	2b03      	cmp	r3, #3
 800220e:	d847      	bhi.n	80022a0 <USART_Config+0x300>
 8002210:	a201      	add	r2, pc, #4	; (adr r2, 8002218 <USART_Config+0x278>)
 8002212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002216:	bf00      	nop
 8002218:	08002229 	.word	0x08002229
 800221c:	0800223b 	.word	0x0800223b
 8002220:	0800224d 	.word	0x0800224d
 8002224:	0800226f 	.word	0x0800226f
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_TE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0208 	orr.w	r2, r2, #8
 8002236:	60da      	str	r2, [r3, #12]
		break;
 8002238:	e04b      	b.n	80022d2 <USART_Config+0x332>
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_RE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0204 	orr.w	r2, r2, #4
 8002248:	60da      	str	r2, [r3, #12]
		break;
 800224a:	e042      	b.n	80022d2 <USART_Config+0x332>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmision como recepcion
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_TE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0208 	orr.w	r2, r2, #8
 800225a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |=	USART_CR1_RE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0204 	orr.w	r2, r2, #4
 800226a:	60da      	str	r2, [r3, #12]
		break;
 800226c:	e031      	b.n	80022d2 <USART_Config+0x332>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		// Escriba acá su código
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0204 	bic.w	r2, r2, #4
 800227c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0208 	bic.w	r2, r2, #8
 800228c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800229c:	60da      	str	r2, [r3, #12]
		break;
 800229e:	e018      	b.n	80022d2 <USART_Config+0x332>
	}

	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0204 	bic.w	r2, r2, #4
 80022ae:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0208 	bic.w	r2, r2, #8
 80022be:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022ce:	60da      	str	r2, [r3, #12]
		break;
 80022d0:	bf00      	nop
	}
	}

	// 2.7 Activamos el módulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	791b      	ldrb	r3, [r3, #4]
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d007      	beq.n	80022ea <USART_Config+0x34a>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68da      	ldr	r2, [r3, #12]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022e8:	60da      	str	r2, [r3, #12]
	}
	// Se verifica la activación de la interrupcion Rx
	if (ptrUsartHandler->ptrUSARTx == USART1){
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a28      	ldr	r2, [pc, #160]	; (8002390 <USART_Config+0x3f0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d03a      	beq.n	800236a <USART_Config+0x3ca>
	}

	/* 1.2 Configuramos el USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2) {
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a26      	ldr	r2, [pc, #152]	; (8002394 <USART_Config+0x3f4>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d118      	bne.n	8002330 <USART_Config+0x390>
		if (ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE) {
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	7a5b      	ldrb	r3, [r3, #9]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d10b      	bne.n	800231e <USART_Config+0x37e>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f042 0220 	orr.w	r2, r2, #32
 8002314:	60da      	str	r2, [r3, #12]
			NVIC_EnableIRQ(USART2_IRQn);
 8002316:	2026      	movs	r0, #38	; 0x26
 8002318:	f7ff fe26 	bl	8001f68 <__NVIC_EnableIRQ>
 800231c:	e025      	b.n	800236a <USART_Config+0x3ca>
		} else {
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0220 	bic.w	r2, r2, #32
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	e01c      	b.n	800236a <USART_Config+0x3ca>
		}
	}

	/* 1.3 Configuramos el USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6) {
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a18      	ldr	r2, [pc, #96]	; (8002398 <USART_Config+0x3f8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d117      	bne.n	800236a <USART_Config+0x3ca>
		if (ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE) {
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	7a5b      	ldrb	r3, [r3, #9]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d10b      	bne.n	800235a <USART_Config+0x3ba>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f042 0220 	orr.w	r2, r2, #32
 8002350:	60da      	str	r2, [r3, #12]
			NVIC_EnableIRQ(USART6_IRQn);
 8002352:	2047      	movs	r0, #71	; 0x47
 8002354:	f7ff fe08 	bl	8001f68 <__NVIC_EnableIRQ>
 8002358:	e007      	b.n	800236a <USART_Config+0x3ca>
		} else {
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0220 	bic.w	r2, r2, #32
 8002368:	60da      	str	r2, [r3, #12]
		}
	}

	// 2.8 Activamos el módulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	791b      	ldrb	r3, [r3, #4]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d007      	beq.n	8002382 <USART_Config+0x3e2>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002380:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8002382:	b662      	cpsie	i
}
 8002384:	bf00      	nop
	}

	// Activamos las interrupciones globales
	__enable_irq();
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40011000 	.word	0x40011000
 8002394:	40004400 	.word	0x40004400
 8002398:	40011400 	.word	0x40011400

0800239c <usart6Rx_Callback>:
	            the usart2Rx_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void usart6Rx_Callback(void){
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the usart6Rx_Callback could be implemented in the main file
	   */
	__NOP();
 80023a0:	bf00      	nop
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr

080023aa <writeChar>:

/* funcion para escribir un solo char */
int writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80023b4:	e000      	b.n	80023b8 <writeChar+0xe>
		__NOP();
 80023b6:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f7      	beq.n	80023b6 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	605a      	str	r2, [r3, #4]

	return dataToSend;
 80023ce:	683b      	ldr	r3, [r7, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr

080023da <writeMsg>:

// función para escribir un mensaje
void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	6039      	str	r1, [r7, #0]
	while(*msgToSend != '\0'){
 80023e4:	e008      	b.n	80023f8 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	4619      	mov	r1, r3
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff ffdc 	bl	80023aa <writeChar>
		msgToSend++;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	3301      	adds	r3, #1
 80023f6:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f2      	bne.n	80023e6 <writeMsg+0xc>
	}
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <getRxData>:

// función auxiliar
uint8_t getRxData(void){
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
	return auxRxData;
 8002410:	4b02      	ldr	r3, [pc, #8]	; (800241c <getRxData+0x10>)
 8002412:	781b      	ldrb	r3, [r3, #0]
}
 8002414:	4618      	mov	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr
 800241c:	20000464 	.word	0x20000464

08002420 <USART2_IRQHandler>:

/* INTERRUPCIONES DEL USART */
// Se debe crear una variable auxiliar para la lectura que se declara al inicio.

/* Para el USART 2 */
void USART2_IRQHandler(void){
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
	// Se evalúa si la interrupción que se dio es por RX
	if(USART2->SR & USART_SR_RXNE){
 8002424:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <USART2_IRQHandler+0x30>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0320 	and.w	r3, r3, #32
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00c      	beq.n	800244a <USART2_IRQHandler+0x2a>
		USART2->SR &= ~USART_SR_RXNE;
 8002430:	4b07      	ldr	r3, [pc, #28]	; (8002450 <USART2_IRQHandler+0x30>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a06      	ldr	r2, [pc, #24]	; (8002450 <USART2_IRQHandler+0x30>)
 8002436:	f023 0320 	bic.w	r3, r3, #32
 800243a:	6013      	str	r3, [r2, #0]
		auxRxData = (uint8_t) USART2->DR;
 800243c:	4b04      	ldr	r3, [pc, #16]	; (8002450 <USART2_IRQHandler+0x30>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4b04      	ldr	r3, [pc, #16]	; (8002454 <USART2_IRQHandler+0x34>)
 8002444:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 8002446:	f7ff f949 	bl	80016dc <usart2Rx_Callback>
	}
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40004400 	.word	0x40004400
 8002454:	20000464 	.word	0x20000464

08002458 <USART6_IRQHandler>:

/* Para el USART 6 */
void USART6_IRQHandler(void){
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
	// Evaluamos que la interrupción que se dio es por RX
	if(USART6->SR & USART_SR_RXNE){
 800245c:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <USART6_IRQHandler+0x30>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00c      	beq.n	8002482 <USART6_IRQHandler+0x2a>
		USART6->SR &= ~USART_SR_RXNE;
 8002468:	4b07      	ldr	r3, [pc, #28]	; (8002488 <USART6_IRQHandler+0x30>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a06      	ldr	r2, [pc, #24]	; (8002488 <USART6_IRQHandler+0x30>)
 800246e:	f023 0320 	bic.w	r3, r3, #32
 8002472:	6013      	str	r3, [r2, #0]
		auxRxData = (uint8_t) USART6->DR;
 8002474:	4b04      	ldr	r3, [pc, #16]	; (8002488 <USART6_IRQHandler+0x30>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	b2da      	uxtb	r2, r3
 800247a:	4b04      	ldr	r3, [pc, #16]	; (800248c <USART6_IRQHandler+0x34>)
 800247c:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 800247e:	f7ff ff8d 	bl	800239c <usart6Rx_Callback>
	}
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40011400 	.word	0x40011400
 800248c:	20000464 	.word	0x20000464

08002490 <__NVIC_EnableIRQ>:
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	db0b      	blt.n	80024ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	f003 021f 	and.w	r2, r3, #31
 80024a8:	4906      	ldr	r1, [pc, #24]	; (80024c4 <__NVIC_EnableIRQ+0x34>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2001      	movs	r0, #1
 80024b2:	fa00 f202 	lsl.w	r2, r0, r2
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	e000e100 	.word	0xe000e100

080024c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	6039      	str	r1, [r7, #0]
 80024d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	db0a      	blt.n	80024f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	490c      	ldr	r1, [pc, #48]	; (8002514 <__NVIC_SetPriority+0x4c>)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	0112      	lsls	r2, r2, #4
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	440b      	add	r3, r1
 80024ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f0:	e00a      	b.n	8002508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4908      	ldr	r1, [pc, #32]	; (8002518 <__NVIC_SetPriority+0x50>)
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	3b04      	subs	r3, #4
 8002500:	0112      	lsls	r2, r2, #4
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	440b      	add	r3, r1
 8002506:	761a      	strb	r2, [r3, #24]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000e100 	.word	0xe000e100
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <getADC>:
/*
 * Función que retorna el ultimo dato adquirido por la ADC
 * La idea es que esta función es llamada desde la función callback, de forma que
 * siempre se obtiene el valor mas actual de la conversión ADC.
 * */
uint16_t getADC(void){
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
	// Esta variable es actualizada en la ISR de la conversión, cada vez que se obtiene
	// un nuevo valor.
	return adcRawData;
 8002520:	4b02      	ldr	r3, [pc, #8]	; (800252c <getADC+0x10>)
 8002522:	881b      	ldrh	r3, [r3, #0]
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr
 800252c:	20000466 	.word	0x20000466

08002530 <ADC_IRQHandler>:

/*
 * Esta es la ISR de la interrupción por conversión ADC
 */
void ADC_IRQHandler(void){
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
	// Evaluamos que se dio la interrupción por conversión ADC
	if(ADC1->SR & ADC_SR_EOC){
 8002534:	4b07      	ldr	r3, [pc, #28]	; (8002554 <ADC_IRQHandler+0x24>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d006      	beq.n	800254e <ADC_IRQHandler+0x1e>
		// Leemos el resultado de la conversión ADC y lo cargamos en una variale auxiliar
		// la cual es utilizada en la función getADC()
		adcRawData = ADC1->DR;
 8002540:	4b04      	ldr	r3, [pc, #16]	; (8002554 <ADC_IRQHandler+0x24>)
 8002542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002544:	b29a      	uxth	r2, r3
 8002546:	4b04      	ldr	r3, [pc, #16]	; (8002558 <ADC_IRQHandler+0x28>)
 8002548:	801a      	strh	r2, [r3, #0]

		// Hacemos el llamado a la función que se ejecutará en el main
		adcComplete_Callback();
 800254a:	f7ff f8d3 	bl	80016f4 <adcComplete_Callback>
	}

}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40012000 	.word	0x40012000
 8002558:	20000466 	.word	0x20000466

0800255c <configAnalogPin>:
/*
 * Con esta función configuramos que pin deseamos que funcione como canal ADC
 * Esta funcion trabaja con el GPIOxDriver, por lo cual requiere que se incluya
 * dicho driver.
 */
void configAnalogPin(uint8_t adcChannel){
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]

	// Con este switch seleccionamos el canal y lo configuramos como análogo.
	switch (adcChannel) {
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	2b0f      	cmp	r3, #15
 800256a:	f200 8093 	bhi.w	8002694 <configAnalogPin+0x138>
 800256e:	a201      	add	r2, pc, #4	; (adr r2, 8002574 <configAnalogPin+0x18>)
 8002570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002574:	080025b5 	.word	0x080025b5
 8002578:	080025c3 	.word	0x080025c3
 800257c:	080025d1 	.word	0x080025d1
 8002580:	080025df 	.word	0x080025df
 8002584:	080025ed 	.word	0x080025ed
 8002588:	080025fb 	.word	0x080025fb
 800258c:	08002609 	.word	0x08002609
 8002590:	08002617 	.word	0x08002617
 8002594:	08002625 	.word	0x08002625
 8002598:	08002633 	.word	0x08002633
 800259c:	08002641 	.word	0x08002641
 80025a0:	0800264f 	.word	0x0800264f
 80025a4:	0800265d 	.word	0x0800265d
 80025a8:	0800266b 	.word	0x0800266b
 80025ac:	08002679 	.word	0x08002679
 80025b0:	08002687 	.word	0x08002687
	 * asignar. (Esto está más o menos en la página 40 del datasheet del micro)
	 */

	case ADC_CHANNEL_0: {
		// Es el pin PA0
		handlerAdcPin.pGPIOx 						= GPIOA;
 80025b4:	4b3d      	ldr	r3, [pc, #244]	; (80026ac <configAnalogPin+0x150>)
 80025b6:	4a3e      	ldr	r2, [pc, #248]	; (80026b0 <configAnalogPin+0x154>)
 80025b8:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 80025ba:	4b3c      	ldr	r3, [pc, #240]	; (80026ac <configAnalogPin+0x150>)
 80025bc:	2200      	movs	r2, #0
 80025be:	711a      	strb	r2, [r3, #4]
		// Nota: Para el ejercicio inicial solo se necesita este canal, los demas
		// se necesitan para trabajos posteriores.
		break;
 80025c0:	e069      	b.n	8002696 <configAnalogPin+0x13a>
	}
		;

	case ADC_CHANNEL_1: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx						= GPIOA;
 80025c2:	4b3a      	ldr	r3, [pc, #232]	; (80026ac <configAnalogPin+0x150>)
 80025c4:	4a3a      	ldr	r2, [pc, #232]	; (80026b0 <configAnalogPin+0x154>)
 80025c6:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 80025c8:	4b38      	ldr	r3, [pc, #224]	; (80026ac <configAnalogPin+0x150>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	711a      	strb	r2, [r3, #4]

		break;
 80025ce:	e062      	b.n	8002696 <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_2: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 80025d0:	4b36      	ldr	r3, [pc, #216]	; (80026ac <configAnalogPin+0x150>)
 80025d2:	4a37      	ldr	r2, [pc, #220]	; (80026b0 <configAnalogPin+0x154>)
 80025d4:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 80025d6:	4b35      	ldr	r3, [pc, #212]	; (80026ac <configAnalogPin+0x150>)
 80025d8:	2202      	movs	r2, #2
 80025da:	711a      	strb	r2, [r3, #4]

		break;
 80025dc:	e05b      	b.n	8002696 <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_3: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 80025de:	4b33      	ldr	r3, [pc, #204]	; (80026ac <configAnalogPin+0x150>)
 80025e0:	4a33      	ldr	r2, [pc, #204]	; (80026b0 <configAnalogPin+0x154>)
 80025e2:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 80025e4:	4b31      	ldr	r3, [pc, #196]	; (80026ac <configAnalogPin+0x150>)
 80025e6:	2203      	movs	r2, #3
 80025e8:	711a      	strb	r2, [r3, #4]

		break;
 80025ea:	e054      	b.n	8002696 <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_4: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 80025ec:	4b2f      	ldr	r3, [pc, #188]	; (80026ac <configAnalogPin+0x150>)
 80025ee:	4a30      	ldr	r2, [pc, #192]	; (80026b0 <configAnalogPin+0x154>)
 80025f0:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 80025f2:	4b2e      	ldr	r3, [pc, #184]	; (80026ac <configAnalogPin+0x150>)
 80025f4:	2204      	movs	r2, #4
 80025f6:	711a      	strb	r2, [r3, #4]

		break;
 80025f8:	e04d      	b.n	8002696 <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_5: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 80025fa:	4b2c      	ldr	r3, [pc, #176]	; (80026ac <configAnalogPin+0x150>)
 80025fc:	4a2c      	ldr	r2, [pc, #176]	; (80026b0 <configAnalogPin+0x154>)
 80025fe:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8002600:	4b2a      	ldr	r3, [pc, #168]	; (80026ac <configAnalogPin+0x150>)
 8002602:	2205      	movs	r2, #5
 8002604:	711a      	strb	r2, [r3, #4]

		break;
 8002606:	e046      	b.n	8002696 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_6: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 8002608:	4b28      	ldr	r3, [pc, #160]	; (80026ac <configAnalogPin+0x150>)
 800260a:	4a29      	ldr	r2, [pc, #164]	; (80026b0 <configAnalogPin+0x154>)
 800260c:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_6;
 800260e:	4b27      	ldr	r3, [pc, #156]	; (80026ac <configAnalogPin+0x150>)
 8002610:	2206      	movs	r2, #6
 8002612:	711a      	strb	r2, [r3, #4]

		break;
 8002614:	e03f      	b.n	8002696 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_7: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOA;
 8002616:	4b25      	ldr	r3, [pc, #148]	; (80026ac <configAnalogPin+0x150>)
 8002618:	4a25      	ldr	r2, [pc, #148]	; (80026b0 <configAnalogPin+0x154>)
 800261a:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_7;
 800261c:	4b23      	ldr	r3, [pc, #140]	; (80026ac <configAnalogPin+0x150>)
 800261e:	2207      	movs	r2, #7
 8002620:	711a      	strb	r2, [r3, #4]

		break;
 8002622:	e038      	b.n	8002696 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_8: {
		//Es el pin PB0
		handlerAdcPin.pGPIOx 						= GPIOB;
 8002624:	4b21      	ldr	r3, [pc, #132]	; (80026ac <configAnalogPin+0x150>)
 8002626:	4a23      	ldr	r2, [pc, #140]	; (80026b4 <configAnalogPin+0x158>)
 8002628:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 800262a:	4b20      	ldr	r3, [pc, #128]	; (80026ac <configAnalogPin+0x150>)
 800262c:	2200      	movs	r2, #0
 800262e:	711a      	strb	r2, [r3, #4]
		break;
 8002630:	e031      	b.n	8002696 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_9: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOB;
 8002632:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <configAnalogPin+0x150>)
 8002634:	4a1f      	ldr	r2, [pc, #124]	; (80026b4 <configAnalogPin+0x158>)
 8002636:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8002638:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <configAnalogPin+0x150>)
 800263a:	2201      	movs	r2, #1
 800263c:	711a      	strb	r2, [r3, #4]

		break;
 800263e:	e02a      	b.n	8002696 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_10: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8002640:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <configAnalogPin+0x150>)
 8002642:	4a1d      	ldr	r2, [pc, #116]	; (80026b8 <configAnalogPin+0x15c>)
 8002644:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8002646:	4b19      	ldr	r3, [pc, #100]	; (80026ac <configAnalogPin+0x150>)
 8002648:	2200      	movs	r2, #0
 800264a:	711a      	strb	r2, [r3, #4]

		break;
 800264c:	e023      	b.n	8002696 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_11: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 800264e:	4b17      	ldr	r3, [pc, #92]	; (80026ac <configAnalogPin+0x150>)
 8002650:	4a19      	ldr	r2, [pc, #100]	; (80026b8 <configAnalogPin+0x15c>)
 8002652:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8002654:	4b15      	ldr	r3, [pc, #84]	; (80026ac <configAnalogPin+0x150>)
 8002656:	2201      	movs	r2, #1
 8002658:	711a      	strb	r2, [r3, #4]

		break;
 800265a:	e01c      	b.n	8002696 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_12: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 800265c:	4b13      	ldr	r3, [pc, #76]	; (80026ac <configAnalogPin+0x150>)
 800265e:	4a16      	ldr	r2, [pc, #88]	; (80026b8 <configAnalogPin+0x15c>)
 8002660:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <configAnalogPin+0x150>)
 8002664:	2202      	movs	r2, #2
 8002666:	711a      	strb	r2, [r3, #4]

		break;
 8002668:	e015      	b.n	8002696 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_13: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 800266a:	4b10      	ldr	r3, [pc, #64]	; (80026ac <configAnalogPin+0x150>)
 800266c:	4a12      	ldr	r2, [pc, #72]	; (80026b8 <configAnalogPin+0x15c>)
 800266e:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8002670:	4b0e      	ldr	r3, [pc, #56]	; (80026ac <configAnalogPin+0x150>)
 8002672:	2203      	movs	r2, #3
 8002674:	711a      	strb	r2, [r3, #4]

		break;
 8002676:	e00e      	b.n	8002696 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_14: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <configAnalogPin+0x150>)
 800267a:	4a0f      	ldr	r2, [pc, #60]	; (80026b8 <configAnalogPin+0x15c>)
 800267c:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <configAnalogPin+0x150>)
 8002680:	2204      	movs	r2, #4
 8002682:	711a      	strb	r2, [r3, #4]

		break;
 8002684:	e007      	b.n	8002696 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_15: {
		// Buscar y configurar adecuadamente
		handlerAdcPin.pGPIOx 						= GPIOC;
 8002686:	4b09      	ldr	r3, [pc, #36]	; (80026ac <configAnalogPin+0x150>)
 8002688:	4a0b      	ldr	r2, [pc, #44]	; (80026b8 <configAnalogPin+0x15c>)
 800268a:	601a      	str	r2, [r3, #0]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 800268c:	4b07      	ldr	r3, [pc, #28]	; (80026ac <configAnalogPin+0x150>)
 800268e:	2205      	movs	r2, #5
 8002690:	711a      	strb	r2, [r3, #4]

		break;
 8002692:	e000      	b.n	8002696 <configAnalogPin+0x13a>
	}
	default: {
		break;
 8002694:	bf00      	nop

	}
	/*
	 * Se carga la información de cada pin configurado sobre el GPIO.
	 */
	handlerAdcPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ANALOG;
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <configAnalogPin+0x150>)
 8002698:	2203      	movs	r2, #3
 800269a:	715a      	strb	r2, [r3, #5]
	GPIO_Config(&handlerAdcPin);
 800269c:	4803      	ldr	r0, [pc, #12]	; (80026ac <configAnalogPin+0x150>)
 800269e:	f7ff f9bb 	bl	8001a18 <GPIO_Config>
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	2000046c 	.word	0x2000046c
 80026b0:	40020000 	.word	0x40020000
 80026b4:	40020400 	.word	0x40020400
 80026b8:	40020800 	.word	0x40020800

080026bc <adcConfigEvents>:
 * de la conversión adc. Los bits correspondientes a EXTSEL jerarquizan los
 * eventos externos dependiendo del canal que se quiera utilizar en cada uno
 * de los timmers disponibles para este propósito. Ver página 231 del reference
 * manual.
 */
void adcConfigEvents(ADC_Config_t *adcConfig) {
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

	// Trigger detection on the rising edge, se toman los flancos
	// de bajada para los trigger externos
	ADC1->CR2 |= ADC_CR2_EXTEN_0;
 80026c4:	4b42      	ldr	r3, [pc, #264]	; (80027d0 <adcConfigEvents+0x114>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	4a41      	ldr	r2, [pc, #260]	; (80027d0 <adcConfigEvents+0x114>)
 80026ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ce:	6093      	str	r3, [r2, #8]

	if (adcConfig->AdcEventType == TIMER_ADC_EVENT) {
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	7a1b      	ldrb	r3, [r3, #8]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d16f      	bne.n	80027b8 <adcConfigEvents+0xfc>
		switch (adcConfig->AdcChannelEvent) {
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	7a5b      	ldrb	r3, [r3, #9]
 80026dc:	2b0a      	cmp	r3, #10
 80026de:	d864      	bhi.n	80027aa <adcConfigEvents+0xee>
 80026e0:	a201      	add	r2, pc, #4	; (adr r2, 80026e8 <adcConfigEvents+0x2c>)
 80026e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e6:	bf00      	nop
 80026e8:	08002715 	.word	0x08002715
 80026ec:	0800271f 	.word	0x0800271f
 80026f0:	0800272d 	.word	0x0800272d
 80026f4:	0800273b 	.word	0x0800273b
 80026f8:	08002749 	.word	0x08002749
 80026fc:	08002757 	.word	0x08002757
 8002700:	08002765 	.word	0x08002765
 8002704:	08002773 	.word	0x08002773
 8002708:	08002781 	.word	0x08002781
 800270c:	0800278f 	.word	0x0800278f
 8002710:	0800279d 	.word	0x0800279d

		case TIM1_CH1: {
			// Evento TIM1 CC1 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x0 << ADC_CR2_EXTSEL_Pos);
 8002714:	4b2e      	ldr	r3, [pc, #184]	; (80027d0 <adcConfigEvents+0x114>)
 8002716:	4a2e      	ldr	r2, [pc, #184]	; (80027d0 <adcConfigEvents+0x114>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	6093      	str	r3, [r2, #8]
			break;
 800271c:	e053      	b.n	80027c6 <adcConfigEvents+0x10a>
		}

		case TIM1_CH2: {
			// Evento TIM1 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x1 << ADC_CR2_EXTSEL_Pos);
 800271e:	4b2c      	ldr	r3, [pc, #176]	; (80027d0 <adcConfigEvents+0x114>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	4a2b      	ldr	r2, [pc, #172]	; (80027d0 <adcConfigEvents+0x114>)
 8002724:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002728:	6093      	str	r3, [r2, #8]
			break;
 800272a:	e04c      	b.n	80027c6 <adcConfigEvents+0x10a>
		}

		case TIM1_CH3: {
			// Evento TIM1 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x2 << ADC_CR2_EXTSEL_Pos);
 800272c:	4b28      	ldr	r3, [pc, #160]	; (80027d0 <adcConfigEvents+0x114>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	4a27      	ldr	r2, [pc, #156]	; (80027d0 <adcConfigEvents+0x114>)
 8002732:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002736:	6093      	str	r3, [r2, #8]
			break;
 8002738:	e045      	b.n	80027c6 <adcConfigEvents+0x10a>
		}

		case TIM2_CH2: {
			// Evento TIM2 CC2 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x3 << ADC_CR2_EXTSEL_Pos);
 800273a:	4b25      	ldr	r3, [pc, #148]	; (80027d0 <adcConfigEvents+0x114>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	4a24      	ldr	r2, [pc, #144]	; (80027d0 <adcConfigEvents+0x114>)
 8002740:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8002744:	6093      	str	r3, [r2, #8]
			break;
 8002746:	e03e      	b.n	80027c6 <adcConfigEvents+0x10a>
		}

		case TIM2_CH3: {
			// Evento TIM2 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x4 << ADC_CR2_EXTSEL_Pos);
 8002748:	4b21      	ldr	r3, [pc, #132]	; (80027d0 <adcConfigEvents+0x114>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	4a20      	ldr	r2, [pc, #128]	; (80027d0 <adcConfigEvents+0x114>)
 800274e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002752:	6093      	str	r3, [r2, #8]
			break;
 8002754:	e037      	b.n	80027c6 <adcConfigEvents+0x10a>
		}

		case TIM2_CH4: {
			// Evento TIM2 CC4 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x5 << ADC_CR2_EXTSEL_Pos);
 8002756:	4b1e      	ldr	r3, [pc, #120]	; (80027d0 <adcConfigEvents+0x114>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	4a1d      	ldr	r2, [pc, #116]	; (80027d0 <adcConfigEvents+0x114>)
 800275c:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8002760:	6093      	str	r3, [r2, #8]
			break;
 8002762:	e030      	b.n	80027c6 <adcConfigEvents+0x10a>
		}

		case TIM3_CH1: {
			// Evento TIM3 CC1 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x7 << ADC_CR2_EXTSEL_Pos);
 8002764:	4b1a      	ldr	r3, [pc, #104]	; (80027d0 <adcConfigEvents+0x114>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4a19      	ldr	r2, [pc, #100]	; (80027d0 <adcConfigEvents+0x114>)
 800276a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800276e:	6093      	str	r3, [r2, #8]
			break;
 8002770:	e029      	b.n	80027c6 <adcConfigEvents+0x10a>
		}

		case TIM4_CH4: {
			// Evento TIM4 CC4 event para lanzar la conversion ADC
			ADC1->CR2 |= (0x9 << ADC_CR2_EXTSEL_Pos);
 8002772:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <adcConfigEvents+0x114>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	4a16      	ldr	r2, [pc, #88]	; (80027d0 <adcConfigEvents+0x114>)
 8002778:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
 800277c:	6093      	str	r3, [r2, #8]
			break;
 800277e:	e022      	b.n	80027c6 <adcConfigEvents+0x10a>
		}

		case TIM5_CH1: {
			// Evento TIM5 CC1 event para lanzar la conversion ADC
			ADC1->CR2 |= (0xA << ADC_CR2_EXTSEL_Pos);
 8002780:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <adcConfigEvents+0x114>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4a12      	ldr	r2, [pc, #72]	; (80027d0 <adcConfigEvents+0x114>)
 8002786:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
 800278a:	6093      	str	r3, [r2, #8]
			break;
 800278c:	e01b      	b.n	80027c6 <adcConfigEvents+0x10a>
		}

		case TIM5_CH2: {
			// Evento TIM5 CC2 event para lanzar la conversion ADC
			ADC1->CR2 |= (0xB << ADC_CR2_EXTSEL_Pos);
 800278e:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <adcConfigEvents+0x114>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	4a0f      	ldr	r2, [pc, #60]	; (80027d0 <adcConfigEvents+0x114>)
 8002794:	f043 6330 	orr.w	r3, r3, #184549376	; 0xb000000
 8002798:	6093      	str	r3, [r2, #8]
			break;
 800279a:	e014      	b.n	80027c6 <adcConfigEvents+0x10a>
		}

		case TIM5_CH3: {
			// Evento TIM5 CC3 event para lanzar la conversion ADC
			ADC1->CR2 |= (0xC << ADC_CR2_EXTSEL_Pos);
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <adcConfigEvents+0x114>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	4a0b      	ldr	r2, [pc, #44]	; (80027d0 <adcConfigEvents+0x114>)
 80027a2:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 80027a6:	6093      	str	r3, [r2, #8]
			break;
 80027a8:	e00d      	b.n	80027c6 <adcConfigEvents+0x10a>
		}

		default: {
			// 1100: Timer 5 CC3 event
			ADC1->CR2 |= (0xC << ADC_CR2_EXTSEL_Pos);
 80027aa:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <adcConfigEvents+0x114>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	4a08      	ldr	r2, [pc, #32]	; (80027d0 <adcConfigEvents+0x114>)
 80027b0:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 80027b4:	6093      	str	r3, [r2, #8]
			break;
 80027b6:	e006      	b.n	80027c6 <adcConfigEvents+0x10a>

		}
	}

	else {
		ADC1->CR2 |= (0xF << ADC_CR2_EXTSEL_Pos);
 80027b8:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <adcConfigEvents+0x114>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <adcConfigEvents+0x114>)
 80027be:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80027c2:	6093      	str	r3, [r2, #8]
	}
}
 80027c4:	bf00      	nop
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	40012000 	.word	0x40012000

080027d4 <adcMultiChannel>:
 * para realizar varias conversiones ADC. La función recibe como parámetros
 * la configuración del ADC y el número de conversiones que se requieren,
 * que para efectos prácticos es el número de canales sobre los cuales
 * se van a hacer las conversiones.
 */
void adcMultiChannel(ADC_Config_t *adcConfig, uint8_t numberOfConversion){
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	70fb      	strb	r3, [r7, #3]
	for(counter5 = 0; counter5<numberOfConversion; counter5++){
 80027e0:	4b8b      	ldr	r3, [pc, #556]	; (8002a10 <adcMultiChannel+0x23c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
 80027e6:	e00e      	b.n	8002806 <adcMultiChannel+0x32>
		/* 1. Configuramos el PinX para que cumpla la función de canal análogo deseado. */
		configAnalogPin(adcConfig->adcMultiChannel[counter5]);
 80027e8:	4b89      	ldr	r3, [pc, #548]	; (8002a10 <adcMultiChannel+0x23c>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	7a9b      	ldrb	r3, [r3, #10]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff feb1 	bl	800255c <configAnalogPin>
	for(counter5 = 0; counter5<numberOfConversion; counter5++){
 80027fa:	4b85      	ldr	r3, [pc, #532]	; (8002a10 <adcMultiChannel+0x23c>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	3301      	adds	r3, #1
 8002800:	b2da      	uxtb	r2, r3
 8002802:	4b83      	ldr	r3, [pc, #524]	; (8002a10 <adcMultiChannel+0x23c>)
 8002804:	701a      	strb	r2, [r3, #0]
 8002806:	4b82      	ldr	r3, [pc, #520]	; (8002a10 <adcMultiChannel+0x23c>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	78fa      	ldrb	r2, [r7, #3]
 800280c:	429a      	cmp	r2, r3
 800280e:	d8eb      	bhi.n	80027e8 <adcMultiChannel+0x14>
	}

	/* 2. Activamos la señal de reloj para el periférico ADC1 (bus APB2)*/
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8002810:	4b80      	ldr	r3, [pc, #512]	; (8002a14 <adcMultiChannel+0x240>)
 8002812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002814:	4a7f      	ldr	r2, [pc, #508]	; (8002a14 <adcMultiChannel+0x240>)
 8002816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281a:	6453      	str	r3, [r2, #68]	; 0x44

	// Limpiamos los registros antes de comenzar a configurar
	ADC1->CR1 = 0;
 800281c:	4b7e      	ldr	r3, [pc, #504]	; (8002a18 <adcMultiChannel+0x244>)
 800281e:	2200      	movs	r2, #0
 8002820:	605a      	str	r2, [r3, #4]
	ADC1->CR2 = 0;
 8002822:	4b7d      	ldr	r3, [pc, #500]	; (8002a18 <adcMultiChannel+0x244>)
 8002824:	2200      	movs	r2, #0
 8002826:	609a      	str	r2, [r3, #8]

	/* Comenzamos la configuración del ADC1 */
	/* 3. Resolución del ADC */
	// Preferible utilizar la conversión a 12 bits para usar
	// la máxima capacidad del microcontrolador.
	switch (adcConfig->resolution) {
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	785b      	ldrb	r3, [r3, #1]
 800282c:	2b03      	cmp	r3, #3
 800282e:	d83f      	bhi.n	80028b0 <adcMultiChannel+0xdc>
 8002830:	a201      	add	r2, pc, #4	; (adr r2, 8002838 <adcMultiChannel+0x64>)
 8002832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002836:	bf00      	nop
 8002838:	08002849 	.word	0x08002849
 800283c:	08002863 	.word	0x08002863
 8002840:	0800287d 	.word	0x0800287d
 8002844:	08002897 	.word	0x08002897
	case ADC_RESOLUTION_12_BIT: {

		ADC1->CR1 &= ~ADC_CR1_RES_0;
 8002848:	4b73      	ldr	r3, [pc, #460]	; (8002a18 <adcMultiChannel+0x244>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	4a72      	ldr	r2, [pc, #456]	; (8002a18 <adcMultiChannel+0x244>)
 800284e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002852:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_1;
 8002854:	4b70      	ldr	r3, [pc, #448]	; (8002a18 <adcMultiChannel+0x244>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	4a6f      	ldr	r2, [pc, #444]	; (8002a18 <adcMultiChannel+0x244>)
 800285a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800285e:	6053      	str	r3, [r2, #4]
		break;
 8002860:	e027      	b.n	80028b2 <adcMultiChannel+0xde>
	}

	case ADC_RESOLUTION_10_BIT: {

		ADC1->CR1 |= ADC_CR1_RES_0;
 8002862:	4b6d      	ldr	r3, [pc, #436]	; (8002a18 <adcMultiChannel+0x244>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	4a6c      	ldr	r2, [pc, #432]	; (8002a18 <adcMultiChannel+0x244>)
 8002868:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800286c:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_1;
 800286e:	4b6a      	ldr	r3, [pc, #424]	; (8002a18 <adcMultiChannel+0x244>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4a69      	ldr	r2, [pc, #420]	; (8002a18 <adcMultiChannel+0x244>)
 8002874:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002878:	6053      	str	r3, [r2, #4]
		break;
 800287a:	e01a      	b.n	80028b2 <adcMultiChannel+0xde>
	}

	case ADC_RESOLUTION_8_BIT: {

		ADC1->CR1 |= ADC_CR1_RES_1;
 800287c:	4b66      	ldr	r3, [pc, #408]	; (8002a18 <adcMultiChannel+0x244>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a65      	ldr	r2, [pc, #404]	; (8002a18 <adcMultiChannel+0x244>)
 8002882:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002886:	6053      	str	r3, [r2, #4]
		ADC1->CR1 &= ~ADC_CR1_RES_0;
 8002888:	4b63      	ldr	r3, [pc, #396]	; (8002a18 <adcMultiChannel+0x244>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	4a62      	ldr	r2, [pc, #392]	; (8002a18 <adcMultiChannel+0x244>)
 800288e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002892:	6053      	str	r3, [r2, #4]
		break;
 8002894:	e00d      	b.n	80028b2 <adcMultiChannel+0xde>
	}

	case ADC_RESOLUTION_6_BIT: {
		ADC1->CR1 |= ADC_CR1_RES_0;
 8002896:	4b60      	ldr	r3, [pc, #384]	; (8002a18 <adcMultiChannel+0x244>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4a5f      	ldr	r2, [pc, #380]	; (8002a18 <adcMultiChannel+0x244>)
 800289c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028a0:	6053      	str	r3, [r2, #4]
		ADC1->CR1 |= ADC_CR1_RES_1;
 80028a2:	4b5d      	ldr	r3, [pc, #372]	; (8002a18 <adcMultiChannel+0x244>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4a5c      	ldr	r2, [pc, #368]	; (8002a18 <adcMultiChannel+0x244>)
 80028a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028ac:	6053      	str	r3, [r2, #4]
		break;
 80028ae:	e000      	b.n	80028b2 <adcMultiChannel+0xde>
	}

	default: {
		break;
 80028b0:	bf00      	nop
	}
	}

	/* 4. Configuramos el modo Scan como ACTIVADO */
	ADC1->CR1 |= ADC_CR1_SCAN;
 80028b2:	4b59      	ldr	r3, [pc, #356]	; (8002a18 <adcMultiChannel+0x244>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	4a58      	ldr	r2, [pc, #352]	; (8002a18 <adcMultiChannel+0x244>)
 80028b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028bc:	6053      	str	r3, [r2, #4]
	// Se configura además el EOCS end of conversion.
	ADC1->CR2 |= ADC_CR2_EOCS;
 80028be:	4b56      	ldr	r3, [pc, #344]	; (8002a18 <adcMultiChannel+0x244>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	4a55      	ldr	r2, [pc, #340]	; (8002a18 <adcMultiChannel+0x244>)
 80028c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028c8:	6093      	str	r3, [r2, #8]

	/* 5. Configuramos la alineación de los datos (derecha o izquierda) */
	if (adcConfig->dataAlignment == ADC_ALIGNMENT_RIGHT) {
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	791b      	ldrb	r3, [r3, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d106      	bne.n	80028e0 <adcMultiChannel+0x10c>
		// Alineación a la derecha (esta es la forma "natural")
		ADC1->CR2 &= ~ADC_CR2_ALIGN;
 80028d2:	4b51      	ldr	r3, [pc, #324]	; (8002a18 <adcMultiChannel+0x244>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	4a50      	ldr	r2, [pc, #320]	; (8002a18 <adcMultiChannel+0x244>)
 80028d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028dc:	6093      	str	r3, [r2, #8]
 80028de:	e005      	b.n	80028ec <adcMultiChannel+0x118>
	} else {
		// Alineación a la izquierda (para algunos cálculos matemáticos)
		ADC1->CR2 |= ADC_CR2_ALIGN;
 80028e0:	4b4d      	ldr	r3, [pc, #308]	; (8002a18 <adcMultiChannel+0x244>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	4a4c      	ldr	r2, [pc, #304]	; (8002a18 <adcMultiChannel+0x244>)
 80028e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028ea:	6093      	str	r3, [r2, #8]
	}

	/* 6. Desactivamos el "continuos mode" */
	ADC1->CR2 &= ~ADC_CR2_CONT;
 80028ec:	4b4a      	ldr	r3, [pc, #296]	; (8002a18 <adcMultiChannel+0x244>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	4a49      	ldr	r2, [pc, #292]	; (8002a18 <adcMultiChannel+0x244>)
 80028f2:	f023 0302 	bic.w	r3, r3, #2
 80028f6:	6093      	str	r3, [r2, #8]

	/* 7. Acá se debería configurar el sampling...*/


 80028f8:	4b45      	ldr	r3, [pc, #276]	; (8002a10 <adcMultiChannel+0x23c>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]
 80028fe:	e037      	b.n	8002970 <adcMultiChannel+0x19c>

 8002900:	4b43      	ldr	r3, [pc, #268]	; (8002a10 <adcMultiChannel+0x23c>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4413      	add	r3, r2
 800290a:	7a9b      	ldrb	r3, [r3, #10]
 800290c:	2b09      	cmp	r3, #9
 800290e:	d814      	bhi.n	800293a <adcMultiChannel+0x166>
	for(counter5 = 0; counter5 < numberOfConversion; counter5++){
		if (adcConfig->adcMultiChannel[counter5] <= ADC_CHANNEL_9) {
 8002910:	4b41      	ldr	r3, [pc, #260]	; (8002a18 <adcMultiChannel+0x244>)
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	885b      	ldrh	r3, [r3, #2]
 8002918:	4618      	mov	r0, r3
 800291a:	4b3d      	ldr	r3, [pc, #244]	; (8002a10 <adcMultiChannel+0x23c>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	4619      	mov	r1, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	440b      	add	r3, r1
 8002924:	7a9b      	ldrb	r3, [r3, #10]
 8002926:	4619      	mov	r1, r3
 8002928:	460b      	mov	r3, r1
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	440b      	add	r3, r1
 800292e:	fa00 f303 	lsl.w	r3, r0, r3
 8002932:	4939      	ldr	r1, [pc, #228]	; (8002a18 <adcMultiChannel+0x244>)
 8002934:	4313      	orrs	r3, r2
 8002936:	610b      	str	r3, [r1, #16]
 8002938:	e014      	b.n	8002964 <adcMultiChannel+0x190>
			ADC1->SMPR2 &= ~(0b111 << (3 * (adcConfig->adcMultiChannel[counter5])));
			// Acá se establecen la cantidad de ciclos para cada canal (0 al 9)
			ADC1->SMPR2 |= (adcConfig->samplingPeriod << (3 * (adcConfig->adcMultiChannel[counter5])));

 800293a:	4b37      	ldr	r3, [pc, #220]	; (8002a18 <adcMultiChannel+0x244>)
 800293c:	68d9      	ldr	r1, [r3, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	885b      	ldrh	r3, [r3, #2]
 8002942:	4618      	mov	r0, r3
 8002944:	4b32      	ldr	r3, [pc, #200]	; (8002a10 <adcMultiChannel+0x23c>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	461a      	mov	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	7a9b      	ldrb	r3, [r3, #10]
 8002950:	f1a3 020a 	sub.w	r2, r3, #10
 8002954:	4613      	mov	r3, r2
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	4413      	add	r3, r2
 800295a:	fa00 f303 	lsl.w	r3, r0, r3
 800295e:	4a2e      	ldr	r2, [pc, #184]	; (8002a18 <adcMultiChannel+0x244>)
 8002960:	430b      	orrs	r3, r1
 8002962:	60d3      	str	r3, [r2, #12]

 8002964:	4b2a      	ldr	r3, [pc, #168]	; (8002a10 <adcMultiChannel+0x23c>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	3301      	adds	r3, #1
 800296a:	b2da      	uxtb	r2, r3
 800296c:	4b28      	ldr	r3, [pc, #160]	; (8002a10 <adcMultiChannel+0x23c>)
 800296e:	701a      	strb	r2, [r3, #0]
 8002970:	4b27      	ldr	r3, [pc, #156]	; (8002a10 <adcMultiChannel+0x23c>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	78fa      	ldrb	r2, [r7, #3]
 8002976:	429a      	cmp	r2, r3
 8002978:	d8c2      	bhi.n	8002900 <adcMultiChannel+0x12c>
			ADC1->SMPR1 &= ~(0b111 << (3 * (adcConfig->adcMultiChannel[counter5] - 10)));
			// Acá se establecen la cantidad de ciclos para cada canal (10 al 18)
			ADC1->SMPR1 |= (adcConfig->samplingPeriod << (3 * (adcConfig->adcMultiChannel[counter5] - 10)));

		}
	}
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	3b01      	subs	r3, #1
 800297e:	051a      	lsls	r2, r3, #20
 8002980:	4b25      	ldr	r3, [pc, #148]	; (8002a18 <adcMultiChannel+0x244>)
 8002982:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1->SQR1 = 0;
	ADC1->SQR2 = 0;
	ADC1->SQR3 = 0;

	/* 8. Configuramos la secuencia y cuantos elementos hay en la secuencia */
 8002984:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <adcMultiChannel+0x23c>)
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	e06a      	b.n	8002a62 <adcMultiChannel+0x28e>
	// Al hacerlo todo 0, estamos seleccionando solo 1 elemento en el conteo de la secuencia
 800298c:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <adcMultiChannel+0x23c>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4413      	add	r3, r2
 8002996:	7a9b      	ldrb	r3, [r3, #10]
 8002998:	2b06      	cmp	r3, #6
 800299a:	d814      	bhi.n	80029c6 <adcMultiChannel+0x1f2>
	ADC1->SQR1 |= (numberOfConversion - 1) << ADC_SQR1_L_Pos;
 800299c:	4b1e      	ldr	r3, [pc, #120]	; (8002a18 <adcMultiChannel+0x244>)
 800299e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029a0:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <adcMultiChannel+0x23c>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	4619      	mov	r1, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	440b      	add	r3, r1
 80029aa:	7a9b      	ldrb	r3, [r3, #10]
 80029ac:	4618      	mov	r0, r3
 80029ae:	4b18      	ldr	r3, [pc, #96]	; (8002a10 <adcMultiChannel+0x23c>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	4619      	mov	r1, r3
 80029b4:	460b      	mov	r3, r1
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	fa00 f303 	lsl.w	r3, r0, r3
 80029be:	4916      	ldr	r1, [pc, #88]	; (8002a18 <adcMultiChannel+0x244>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	634b      	str	r3, [r1, #52]	; 0x34
 80029c4:	e047      	b.n	8002a56 <adcMultiChannel+0x282>

	// Asignamos el orden de la conversión dependiendo del canal en que
 80029c6:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <adcMultiChannel+0x23c>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4413      	add	r3, r2
 80029d0:	7a9b      	ldrb	r3, [r3, #10]
 80029d2:	2b06      	cmp	r3, #6
 80029d4:	d922      	bls.n	8002a1c <adcMultiChannel+0x248>
 80029d6:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <adcMultiChannel+0x23c>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4413      	add	r3, r2
 80029e0:	7a9b      	ldrb	r3, [r3, #10]
 80029e2:	2b0c      	cmp	r3, #12
 80029e4:	d81a      	bhi.n	8002a1c <adcMultiChannel+0x248>
	// se esté haciendo, de allí la variación en la agrupación de los
 80029e6:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <adcMultiChannel+0x244>)
 80029e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029ea:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <adcMultiChannel+0x23c>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4413      	add	r3, r2
 80029f4:	7a9b      	ldrb	r3, [r3, #10]
 80029f6:	4618      	mov	r0, r3
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <adcMultiChannel+0x23c>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	1fda      	subs	r2, r3, #7
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	fa00 f303 	lsl.w	r3, r0, r3
 8002a08:	4a03      	ldr	r2, [pc, #12]	; (8002a18 <adcMultiChannel+0x244>)
 8002a0a:	430b      	orrs	r3, r1
 8002a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0e:	e022      	b.n	8002a56 <adcMultiChannel+0x282>
 8002a10:	20000468 	.word	0x20000468
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40012000 	.word	0x40012000
	// registros.
	for(counter5 = 0; counter5 < numberOfConversion; counter5++){
 8002a1c:	4b24      	ldr	r3, [pc, #144]	; (8002ab0 <adcMultiChannel+0x2dc>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	7a9b      	ldrb	r3, [r3, #10]
 8002a28:	2b0c      	cmp	r3, #12
 8002a2a:	d914      	bls.n	8002a56 <adcMultiChannel+0x282>
		if(adcConfig->adcMultiChannel[counter5] <= 6){
 8002a2c:	4b21      	ldr	r3, [pc, #132]	; (8002ab4 <adcMultiChannel+0x2e0>)
 8002a2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a30:	4b1f      	ldr	r3, [pc, #124]	; (8002ab0 <adcMultiChannel+0x2dc>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	461a      	mov	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4413      	add	r3, r2
 8002a3a:	7a9b      	ldrb	r3, [r3, #10]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	4b1c      	ldr	r3, [pc, #112]	; (8002ab0 <adcMultiChannel+0x2dc>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	f1a3 020d 	sub.w	r2, r3, #13
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	fa00 f303 	lsl.w	r3, r0, r3
 8002a50:	4a18      	ldr	r2, [pc, #96]	; (8002ab4 <adcMultiChannel+0x2e0>)
 8002a52:	430b      	orrs	r3, r1
 8002a54:	62d3      	str	r3, [r2, #44]	; 0x2c
	/* 8. Configuramos la secuencia y cuantos elementos hay en la secuencia */
 8002a56:	4b16      	ldr	r3, [pc, #88]	; (8002ab0 <adcMultiChannel+0x2dc>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <adcMultiChannel+0x2dc>)
 8002a60:	701a      	strb	r2, [r3, #0]
 8002a62:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <adcMultiChannel+0x2dc>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	78fa      	ldrb	r2, [r7, #3]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d88f      	bhi.n	800298c <adcMultiChannel+0x1b8>
			ADC1->SQR3 |= (adcConfig->adcMultiChannel[counter5] << (5 * counter5));
		}
		else if(adcConfig->adcMultiChannel[counter5] > 6 && adcConfig->adcMultiChannel[counter5] <= 12){
			ADC1->SQR2 |= (adcConfig->adcMultiChannel[counter5] << (5 * (counter5 - 7)));
		}
 8002a6c:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <adcMultiChannel+0x2e4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	4a11      	ldr	r2, [pc, #68]	; (8002ab8 <adcMultiChannel+0x2e4>)
 8002a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a76:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a78:	b672      	cpsid	i
}
 8002a7a:	bf00      	nop
		else if(adcConfig->adcMultiChannel[counter5] > 12){
			ADC1->SQR1 |= (adcConfig->adcMultiChannel[counter5] << (5 * (counter5 - 13)));
		}
	}

	/* 9. Configuramos el preescaler del ADC en 2:1 (el mas rápido que se puede tener */
 8002a7c:	4b0d      	ldr	r3, [pc, #52]	; (8002ab4 <adcMultiChannel+0x2e0>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	4a0c      	ldr	r2, [pc, #48]	; (8002ab4 <adcMultiChannel+0x2e0>)
 8002a82:	f043 0320 	orr.w	r3, r3, #32
 8002a86:	6053      	str	r3, [r2, #4]
	ADC->CCR &= ~ADC_CCR_ADCPRE;

	/* 10. Desactivamos las interrupciones globales */
 8002a88:	2012      	movs	r0, #18
 8002a8a:	f7ff fd01 	bl	8002490 <__NVIC_EnableIRQ>
	__disable_irq();

	/* 11. Activamos la interrupción debida a la finalización de una conversión EOC (CR1)*/
 8002a8e:	2101      	movs	r1, #1
 8002a90:	2012      	movs	r0, #18
 8002a92:	f7ff fd19 	bl	80024c8 <__NVIC_SetPriority>
	ADC1->CR1 |= ADC_CR1_EOCIE;

	/* 11a. Matriculamos la interrupción en el NVIC*/
 8002a96:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <adcMultiChannel+0x2e0>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	4a06      	ldr	r2, [pc, #24]	; (8002ab4 <adcMultiChannel+0x2e0>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8002aa2:	b662      	cpsie	i
}
 8002aa4:	bf00      	nop
	__NVIC_EnableIRQ(ADC_IRQn);

	/* 11b. Configuramos la prioridad para la interrupción ADC */
	__NVIC_SetPriority(ADC_IRQn, 4);

 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000468 	.word	0x20000468
 8002ab4:	40012000 	.word	0x40012000
 8002ab8:	40012300 	.word	0x40012300

08002abc <getConfigPLL>:
	RCC->CR |= RCC_CR_HSITRIM_3;

}// FIN DE LA FUNCIÓN DE CONFIGURACIÓN PARA DISTINTAS FRECUENCIAS.

// Función para saber el estado del PLL y así poder caracterizar lo demás.
uint32_t getConfigPLL(void){
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
	// Se buscan los valores que están definiendo los valores actuales del reloj PLL
	uint32_t PLLN = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos;
 8002ac2:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <getConfigPLL+0x3c>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	099b      	lsrs	r3, r3, #6
 8002ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002acc:	60fb      	str	r3, [r7, #12]
	uint32_t PLLM = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk) >> RCC_PLLCFGR_PLLM_Pos;
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <getConfigPLL+0x3c>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ad6:	60bb      	str	r3, [r7, #8]
	// Se hace la operación para saber el valor actual del reloj. (Asume PLLP =2)
	uint32_t clockMicro = (HSI_VALUE / PLLM) * PLLN / 2;
 8002ad8:	4b08      	ldr	r3, [pc, #32]	; (8002afc <getConfigPLL+0x40>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	fb02 f303 	mul.w	r3, r2, r3
 8002ae8:	085b      	lsrs	r3, r3, #1
 8002aea:	607b      	str	r3, [r7, #4]
	return clockMicro;
 8002aec:	687b      	ldr	r3, [r7, #4]

}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr
 8002af8:	40023800 	.word	0x40023800
 8002afc:	20000040 	.word	0x20000040

08002b00 <__libc_init_array>:
 8002b00:	b570      	push	{r4, r5, r6, lr}
 8002b02:	4d0d      	ldr	r5, [pc, #52]	; (8002b38 <__libc_init_array+0x38>)
 8002b04:	4c0d      	ldr	r4, [pc, #52]	; (8002b3c <__libc_init_array+0x3c>)
 8002b06:	1b64      	subs	r4, r4, r5
 8002b08:	10a4      	asrs	r4, r4, #2
 8002b0a:	2600      	movs	r6, #0
 8002b0c:	42a6      	cmp	r6, r4
 8002b0e:	d109      	bne.n	8002b24 <__libc_init_array+0x24>
 8002b10:	4d0b      	ldr	r5, [pc, #44]	; (8002b40 <__libc_init_array+0x40>)
 8002b12:	4c0c      	ldr	r4, [pc, #48]	; (8002b44 <__libc_init_array+0x44>)
 8002b14:	f004 fc8c 	bl	8007430 <_init>
 8002b18:	1b64      	subs	r4, r4, r5
 8002b1a:	10a4      	asrs	r4, r4, #2
 8002b1c:	2600      	movs	r6, #0
 8002b1e:	42a6      	cmp	r6, r4
 8002b20:	d105      	bne.n	8002b2e <__libc_init_array+0x2e>
 8002b22:	bd70      	pop	{r4, r5, r6, pc}
 8002b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b28:	4798      	blx	r3
 8002b2a:	3601      	adds	r6, #1
 8002b2c:	e7ee      	b.n	8002b0c <__libc_init_array+0xc>
 8002b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b32:	4798      	blx	r3
 8002b34:	3601      	adds	r6, #1
 8002b36:	e7f2      	b.n	8002b1e <__libc_init_array+0x1e>
 8002b38:	08007924 	.word	0x08007924
 8002b3c:	08007924 	.word	0x08007924
 8002b40:	08007924 	.word	0x08007924
 8002b44:	08007928 	.word	0x08007928

08002b48 <memset>:
 8002b48:	4402      	add	r2, r0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d100      	bne.n	8002b52 <memset+0xa>
 8002b50:	4770      	bx	lr
 8002b52:	f803 1b01 	strb.w	r1, [r3], #1
 8002b56:	e7f9      	b.n	8002b4c <memset+0x4>

08002b58 <__cvt>:
 8002b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b5c:	b088      	sub	sp, #32
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	461f      	mov	r7, r3
 8002b62:	4614      	mov	r4, r2
 8002b64:	bfb8      	it	lt
 8002b66:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002b6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002b6c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002b6e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002b72:	bfb6      	itet	lt
 8002b74:	461f      	movlt	r7, r3
 8002b76:	2300      	movge	r3, #0
 8002b78:	232d      	movlt	r3, #45	; 0x2d
 8002b7a:	7013      	strb	r3, [r2, #0]
 8002b7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002b7e:	f023 0820 	bic.w	r8, r3, #32
 8002b82:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002b86:	d005      	beq.n	8002b94 <__cvt+0x3c>
 8002b88:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002b8c:	d100      	bne.n	8002b90 <__cvt+0x38>
 8002b8e:	3501      	adds	r5, #1
 8002b90:	2302      	movs	r3, #2
 8002b92:	e000      	b.n	8002b96 <__cvt+0x3e>
 8002b94:	2303      	movs	r3, #3
 8002b96:	aa07      	add	r2, sp, #28
 8002b98:	9204      	str	r2, [sp, #16]
 8002b9a:	aa06      	add	r2, sp, #24
 8002b9c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002ba0:	e9cd 3500 	strd	r3, r5, [sp]
 8002ba4:	4622      	mov	r2, r4
 8002ba6:	463b      	mov	r3, r7
 8002ba8:	f001 fd7a 	bl	80046a0 <_dtoa_r>
 8002bac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002bb0:	4606      	mov	r6, r0
 8002bb2:	d102      	bne.n	8002bba <__cvt+0x62>
 8002bb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002bb6:	07db      	lsls	r3, r3, #31
 8002bb8:	d522      	bpl.n	8002c00 <__cvt+0xa8>
 8002bba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002bbe:	eb06 0905 	add.w	r9, r6, r5
 8002bc2:	d110      	bne.n	8002be6 <__cvt+0x8e>
 8002bc4:	7833      	ldrb	r3, [r6, #0]
 8002bc6:	2b30      	cmp	r3, #48	; 0x30
 8002bc8:	d10a      	bne.n	8002be0 <__cvt+0x88>
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2300      	movs	r3, #0
 8002bce:	4620      	mov	r0, r4
 8002bd0:	4639      	mov	r1, r7
 8002bd2:	f7fd ff81 	bl	8000ad8 <__aeabi_dcmpeq>
 8002bd6:	b918      	cbnz	r0, 8002be0 <__cvt+0x88>
 8002bd8:	f1c5 0501 	rsb	r5, r5, #1
 8002bdc:	f8ca 5000 	str.w	r5, [sl]
 8002be0:	f8da 3000 	ldr.w	r3, [sl]
 8002be4:	4499      	add	r9, r3
 8002be6:	2200      	movs	r2, #0
 8002be8:	2300      	movs	r3, #0
 8002bea:	4620      	mov	r0, r4
 8002bec:	4639      	mov	r1, r7
 8002bee:	f7fd ff73 	bl	8000ad8 <__aeabi_dcmpeq>
 8002bf2:	b108      	cbz	r0, 8002bf8 <__cvt+0xa0>
 8002bf4:	f8cd 901c 	str.w	r9, [sp, #28]
 8002bf8:	2230      	movs	r2, #48	; 0x30
 8002bfa:	9b07      	ldr	r3, [sp, #28]
 8002bfc:	454b      	cmp	r3, r9
 8002bfe:	d307      	bcc.n	8002c10 <__cvt+0xb8>
 8002c00:	9b07      	ldr	r3, [sp, #28]
 8002c02:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002c04:	1b9b      	subs	r3, r3, r6
 8002c06:	4630      	mov	r0, r6
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	b008      	add	sp, #32
 8002c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c10:	1c59      	adds	r1, r3, #1
 8002c12:	9107      	str	r1, [sp, #28]
 8002c14:	701a      	strb	r2, [r3, #0]
 8002c16:	e7f0      	b.n	8002bfa <__cvt+0xa2>

08002c18 <__exponent>:
 8002c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2900      	cmp	r1, #0
 8002c1e:	bfb8      	it	lt
 8002c20:	4249      	neglt	r1, r1
 8002c22:	f803 2b02 	strb.w	r2, [r3], #2
 8002c26:	bfb4      	ite	lt
 8002c28:	222d      	movlt	r2, #45	; 0x2d
 8002c2a:	222b      	movge	r2, #43	; 0x2b
 8002c2c:	2909      	cmp	r1, #9
 8002c2e:	7042      	strb	r2, [r0, #1]
 8002c30:	dd2a      	ble.n	8002c88 <__exponent+0x70>
 8002c32:	f10d 0407 	add.w	r4, sp, #7
 8002c36:	46a4      	mov	ip, r4
 8002c38:	270a      	movs	r7, #10
 8002c3a:	46a6      	mov	lr, r4
 8002c3c:	460a      	mov	r2, r1
 8002c3e:	fb91 f6f7 	sdiv	r6, r1, r7
 8002c42:	fb07 1516 	mls	r5, r7, r6, r1
 8002c46:	3530      	adds	r5, #48	; 0x30
 8002c48:	2a63      	cmp	r2, #99	; 0x63
 8002c4a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8002c4e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002c52:	4631      	mov	r1, r6
 8002c54:	dcf1      	bgt.n	8002c3a <__exponent+0x22>
 8002c56:	3130      	adds	r1, #48	; 0x30
 8002c58:	f1ae 0502 	sub.w	r5, lr, #2
 8002c5c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002c60:	1c44      	adds	r4, r0, #1
 8002c62:	4629      	mov	r1, r5
 8002c64:	4561      	cmp	r1, ip
 8002c66:	d30a      	bcc.n	8002c7e <__exponent+0x66>
 8002c68:	f10d 0209 	add.w	r2, sp, #9
 8002c6c:	eba2 020e 	sub.w	r2, r2, lr
 8002c70:	4565      	cmp	r5, ip
 8002c72:	bf88      	it	hi
 8002c74:	2200      	movhi	r2, #0
 8002c76:	4413      	add	r3, r2
 8002c78:	1a18      	subs	r0, r3, r0
 8002c7a:	b003      	add	sp, #12
 8002c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c82:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002c86:	e7ed      	b.n	8002c64 <__exponent+0x4c>
 8002c88:	2330      	movs	r3, #48	; 0x30
 8002c8a:	3130      	adds	r1, #48	; 0x30
 8002c8c:	7083      	strb	r3, [r0, #2]
 8002c8e:	70c1      	strb	r1, [r0, #3]
 8002c90:	1d03      	adds	r3, r0, #4
 8002c92:	e7f1      	b.n	8002c78 <__exponent+0x60>

08002c94 <_printf_float>:
 8002c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c98:	b091      	sub	sp, #68	; 0x44
 8002c9a:	460c      	mov	r4, r1
 8002c9c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002ca0:	4616      	mov	r6, r2
 8002ca2:	461f      	mov	r7, r3
 8002ca4:	4605      	mov	r5, r0
 8002ca6:	f002 fe55 	bl	8005954 <_localeconv_r>
 8002caa:	6803      	ldr	r3, [r0, #0]
 8002cac:	9309      	str	r3, [sp, #36]	; 0x24
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fd fa96 	bl	80001e0 <strlen>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	930e      	str	r3, [sp, #56]	; 0x38
 8002cb8:	f8d8 3000 	ldr.w	r3, [r8]
 8002cbc:	900a      	str	r0, [sp, #40]	; 0x28
 8002cbe:	3307      	adds	r3, #7
 8002cc0:	f023 0307 	bic.w	r3, r3, #7
 8002cc4:	f103 0208 	add.w	r2, r3, #8
 8002cc8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002ccc:	f8d4 b000 	ldr.w	fp, [r4]
 8002cd0:	f8c8 2000 	str.w	r2, [r8]
 8002cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002cdc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002ce0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002ce4:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ce6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002ce8:	4b9c      	ldr	r3, [pc, #624]	; (8002f5c <_printf_float+0x2c8>)
 8002cea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cee:	4640      	mov	r0, r8
 8002cf0:	f7fd ff24 	bl	8000b3c <__aeabi_dcmpun>
 8002cf4:	bb70      	cbnz	r0, 8002d54 <_printf_float+0xc0>
 8002cf6:	4b99      	ldr	r3, [pc, #612]	; (8002f5c <_printf_float+0x2c8>)
 8002cf8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002cfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cfe:	4640      	mov	r0, r8
 8002d00:	f7fd fefe 	bl	8000b00 <__aeabi_dcmple>
 8002d04:	bb30      	cbnz	r0, 8002d54 <_printf_float+0xc0>
 8002d06:	2200      	movs	r2, #0
 8002d08:	2300      	movs	r3, #0
 8002d0a:	4640      	mov	r0, r8
 8002d0c:	4651      	mov	r1, sl
 8002d0e:	f7fd feed 	bl	8000aec <__aeabi_dcmplt>
 8002d12:	b110      	cbz	r0, 8002d1a <_printf_float+0x86>
 8002d14:	232d      	movs	r3, #45	; 0x2d
 8002d16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d1a:	4b91      	ldr	r3, [pc, #580]	; (8002f60 <_printf_float+0x2cc>)
 8002d1c:	4891      	ldr	r0, [pc, #580]	; (8002f64 <_printf_float+0x2d0>)
 8002d1e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002d22:	bf94      	ite	ls
 8002d24:	4698      	movls	r8, r3
 8002d26:	4680      	movhi	r8, r0
 8002d28:	2303      	movs	r3, #3
 8002d2a:	6123      	str	r3, [r4, #16]
 8002d2c:	f02b 0304 	bic.w	r3, fp, #4
 8002d30:	6023      	str	r3, [r4, #0]
 8002d32:	f04f 0a00 	mov.w	sl, #0
 8002d36:	9700      	str	r7, [sp, #0]
 8002d38:	4633      	mov	r3, r6
 8002d3a:	aa0f      	add	r2, sp, #60	; 0x3c
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	4628      	mov	r0, r5
 8002d40:	f000 f9d2 	bl	80030e8 <_printf_common>
 8002d44:	3001      	adds	r0, #1
 8002d46:	f040 808f 	bne.w	8002e68 <_printf_float+0x1d4>
 8002d4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d4e:	b011      	add	sp, #68	; 0x44
 8002d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d54:	4642      	mov	r2, r8
 8002d56:	4653      	mov	r3, sl
 8002d58:	4640      	mov	r0, r8
 8002d5a:	4651      	mov	r1, sl
 8002d5c:	f7fd feee 	bl	8000b3c <__aeabi_dcmpun>
 8002d60:	b140      	cbz	r0, 8002d74 <_printf_float+0xe0>
 8002d62:	f1ba 0f00 	cmp.w	sl, #0
 8002d66:	bfbc      	itt	lt
 8002d68:	232d      	movlt	r3, #45	; 0x2d
 8002d6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002d6e:	487e      	ldr	r0, [pc, #504]	; (8002f68 <_printf_float+0x2d4>)
 8002d70:	4b7e      	ldr	r3, [pc, #504]	; (8002f6c <_printf_float+0x2d8>)
 8002d72:	e7d4      	b.n	8002d1e <_printf_float+0x8a>
 8002d74:	6863      	ldr	r3, [r4, #4]
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002d7c:	d142      	bne.n	8002e04 <_printf_float+0x170>
 8002d7e:	2306      	movs	r3, #6
 8002d80:	6063      	str	r3, [r4, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	9206      	str	r2, [sp, #24]
 8002d86:	aa0e      	add	r2, sp, #56	; 0x38
 8002d88:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002d8c:	aa0d      	add	r2, sp, #52	; 0x34
 8002d8e:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002d92:	9203      	str	r2, [sp, #12]
 8002d94:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002d98:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002d9c:	6023      	str	r3, [r4, #0]
 8002d9e:	6863      	ldr	r3, [r4, #4]
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	4642      	mov	r2, r8
 8002da4:	4653      	mov	r3, sl
 8002da6:	4628      	mov	r0, r5
 8002da8:	910b      	str	r1, [sp, #44]	; 0x2c
 8002daa:	f7ff fed5 	bl	8002b58 <__cvt>
 8002dae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002db0:	2947      	cmp	r1, #71	; 0x47
 8002db2:	4680      	mov	r8, r0
 8002db4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002db6:	d108      	bne.n	8002dca <_printf_float+0x136>
 8002db8:	1cc8      	adds	r0, r1, #3
 8002dba:	db02      	blt.n	8002dc2 <_printf_float+0x12e>
 8002dbc:	6863      	ldr	r3, [r4, #4]
 8002dbe:	4299      	cmp	r1, r3
 8002dc0:	dd40      	ble.n	8002e44 <_printf_float+0x1b0>
 8002dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8002dc6:	fa5f f989 	uxtb.w	r9, r9
 8002dca:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002dce:	d81f      	bhi.n	8002e10 <_printf_float+0x17c>
 8002dd0:	3901      	subs	r1, #1
 8002dd2:	464a      	mov	r2, r9
 8002dd4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002dd8:	910d      	str	r1, [sp, #52]	; 0x34
 8002dda:	f7ff ff1d 	bl	8002c18 <__exponent>
 8002dde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002de0:	1813      	adds	r3, r2, r0
 8002de2:	2a01      	cmp	r2, #1
 8002de4:	4682      	mov	sl, r0
 8002de6:	6123      	str	r3, [r4, #16]
 8002de8:	dc02      	bgt.n	8002df0 <_printf_float+0x15c>
 8002dea:	6822      	ldr	r2, [r4, #0]
 8002dec:	07d2      	lsls	r2, r2, #31
 8002dee:	d501      	bpl.n	8002df4 <_printf_float+0x160>
 8002df0:	3301      	adds	r3, #1
 8002df2:	6123      	str	r3, [r4, #16]
 8002df4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d09c      	beq.n	8002d36 <_printf_float+0xa2>
 8002dfc:	232d      	movs	r3, #45	; 0x2d
 8002dfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e02:	e798      	b.n	8002d36 <_printf_float+0xa2>
 8002e04:	2947      	cmp	r1, #71	; 0x47
 8002e06:	d1bc      	bne.n	8002d82 <_printf_float+0xee>
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1ba      	bne.n	8002d82 <_printf_float+0xee>
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e7b7      	b.n	8002d80 <_printf_float+0xec>
 8002e10:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002e14:	d118      	bne.n	8002e48 <_printf_float+0x1b4>
 8002e16:	2900      	cmp	r1, #0
 8002e18:	6863      	ldr	r3, [r4, #4]
 8002e1a:	dd0b      	ble.n	8002e34 <_printf_float+0x1a0>
 8002e1c:	6121      	str	r1, [r4, #16]
 8002e1e:	b913      	cbnz	r3, 8002e26 <_printf_float+0x192>
 8002e20:	6822      	ldr	r2, [r4, #0]
 8002e22:	07d0      	lsls	r0, r2, #31
 8002e24:	d502      	bpl.n	8002e2c <_printf_float+0x198>
 8002e26:	3301      	adds	r3, #1
 8002e28:	440b      	add	r3, r1
 8002e2a:	6123      	str	r3, [r4, #16]
 8002e2c:	65a1      	str	r1, [r4, #88]	; 0x58
 8002e2e:	f04f 0a00 	mov.w	sl, #0
 8002e32:	e7df      	b.n	8002df4 <_printf_float+0x160>
 8002e34:	b913      	cbnz	r3, 8002e3c <_printf_float+0x1a8>
 8002e36:	6822      	ldr	r2, [r4, #0]
 8002e38:	07d2      	lsls	r2, r2, #31
 8002e3a:	d501      	bpl.n	8002e40 <_printf_float+0x1ac>
 8002e3c:	3302      	adds	r3, #2
 8002e3e:	e7f4      	b.n	8002e2a <_printf_float+0x196>
 8002e40:	2301      	movs	r3, #1
 8002e42:	e7f2      	b.n	8002e2a <_printf_float+0x196>
 8002e44:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002e48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e4a:	4299      	cmp	r1, r3
 8002e4c:	db05      	blt.n	8002e5a <_printf_float+0x1c6>
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	6121      	str	r1, [r4, #16]
 8002e52:	07d8      	lsls	r0, r3, #31
 8002e54:	d5ea      	bpl.n	8002e2c <_printf_float+0x198>
 8002e56:	1c4b      	adds	r3, r1, #1
 8002e58:	e7e7      	b.n	8002e2a <_printf_float+0x196>
 8002e5a:	2900      	cmp	r1, #0
 8002e5c:	bfd4      	ite	le
 8002e5e:	f1c1 0202 	rsble	r2, r1, #2
 8002e62:	2201      	movgt	r2, #1
 8002e64:	4413      	add	r3, r2
 8002e66:	e7e0      	b.n	8002e2a <_printf_float+0x196>
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	055a      	lsls	r2, r3, #21
 8002e6c:	d407      	bmi.n	8002e7e <_printf_float+0x1ea>
 8002e6e:	6923      	ldr	r3, [r4, #16]
 8002e70:	4642      	mov	r2, r8
 8002e72:	4631      	mov	r1, r6
 8002e74:	4628      	mov	r0, r5
 8002e76:	47b8      	blx	r7
 8002e78:	3001      	adds	r0, #1
 8002e7a:	d12b      	bne.n	8002ed4 <_printf_float+0x240>
 8002e7c:	e765      	b.n	8002d4a <_printf_float+0xb6>
 8002e7e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002e82:	f240 80dc 	bls.w	800303e <_printf_float+0x3aa>
 8002e86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f7fd fe23 	bl	8000ad8 <__aeabi_dcmpeq>
 8002e92:	2800      	cmp	r0, #0
 8002e94:	d033      	beq.n	8002efe <_printf_float+0x26a>
 8002e96:	4a36      	ldr	r2, [pc, #216]	; (8002f70 <_printf_float+0x2dc>)
 8002e98:	2301      	movs	r3, #1
 8002e9a:	4631      	mov	r1, r6
 8002e9c:	4628      	mov	r0, r5
 8002e9e:	47b8      	blx	r7
 8002ea0:	3001      	adds	r0, #1
 8002ea2:	f43f af52 	beq.w	8002d4a <_printf_float+0xb6>
 8002ea6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	db02      	blt.n	8002eb4 <_printf_float+0x220>
 8002eae:	6823      	ldr	r3, [r4, #0]
 8002eb0:	07d8      	lsls	r0, r3, #31
 8002eb2:	d50f      	bpl.n	8002ed4 <_printf_float+0x240>
 8002eb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002eb8:	4631      	mov	r1, r6
 8002eba:	4628      	mov	r0, r5
 8002ebc:	47b8      	blx	r7
 8002ebe:	3001      	adds	r0, #1
 8002ec0:	f43f af43 	beq.w	8002d4a <_printf_float+0xb6>
 8002ec4:	f04f 0800 	mov.w	r8, #0
 8002ec8:	f104 091a 	add.w	r9, r4, #26
 8002ecc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	4543      	cmp	r3, r8
 8002ed2:	dc09      	bgt.n	8002ee8 <_printf_float+0x254>
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	079b      	lsls	r3, r3, #30
 8002ed8:	f100 8101 	bmi.w	80030de <_printf_float+0x44a>
 8002edc:	68e0      	ldr	r0, [r4, #12]
 8002ede:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002ee0:	4298      	cmp	r0, r3
 8002ee2:	bfb8      	it	lt
 8002ee4:	4618      	movlt	r0, r3
 8002ee6:	e732      	b.n	8002d4e <_printf_float+0xba>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	464a      	mov	r2, r9
 8002eec:	4631      	mov	r1, r6
 8002eee:	4628      	mov	r0, r5
 8002ef0:	47b8      	blx	r7
 8002ef2:	3001      	adds	r0, #1
 8002ef4:	f43f af29 	beq.w	8002d4a <_printf_float+0xb6>
 8002ef8:	f108 0801 	add.w	r8, r8, #1
 8002efc:	e7e6      	b.n	8002ecc <_printf_float+0x238>
 8002efe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	dc37      	bgt.n	8002f74 <_printf_float+0x2e0>
 8002f04:	4a1a      	ldr	r2, [pc, #104]	; (8002f70 <_printf_float+0x2dc>)
 8002f06:	2301      	movs	r3, #1
 8002f08:	4631      	mov	r1, r6
 8002f0a:	4628      	mov	r0, r5
 8002f0c:	47b8      	blx	r7
 8002f0e:	3001      	adds	r0, #1
 8002f10:	f43f af1b 	beq.w	8002d4a <_printf_float+0xb6>
 8002f14:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	d102      	bne.n	8002f22 <_printf_float+0x28e>
 8002f1c:	6823      	ldr	r3, [r4, #0]
 8002f1e:	07d9      	lsls	r1, r3, #31
 8002f20:	d5d8      	bpl.n	8002ed4 <_printf_float+0x240>
 8002f22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f26:	4631      	mov	r1, r6
 8002f28:	4628      	mov	r0, r5
 8002f2a:	47b8      	blx	r7
 8002f2c:	3001      	adds	r0, #1
 8002f2e:	f43f af0c 	beq.w	8002d4a <_printf_float+0xb6>
 8002f32:	f04f 0900 	mov.w	r9, #0
 8002f36:	f104 0a1a 	add.w	sl, r4, #26
 8002f3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f3c:	425b      	negs	r3, r3
 8002f3e:	454b      	cmp	r3, r9
 8002f40:	dc01      	bgt.n	8002f46 <_printf_float+0x2b2>
 8002f42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f44:	e794      	b.n	8002e70 <_printf_float+0x1dc>
 8002f46:	2301      	movs	r3, #1
 8002f48:	4652      	mov	r2, sl
 8002f4a:	4631      	mov	r1, r6
 8002f4c:	4628      	mov	r0, r5
 8002f4e:	47b8      	blx	r7
 8002f50:	3001      	adds	r0, #1
 8002f52:	f43f aefa 	beq.w	8002d4a <_printf_float+0xb6>
 8002f56:	f109 0901 	add.w	r9, r9, #1
 8002f5a:	e7ee      	b.n	8002f3a <_printf_float+0x2a6>
 8002f5c:	7fefffff 	.word	0x7fefffff
 8002f60:	08007480 	.word	0x08007480
 8002f64:	08007484 	.word	0x08007484
 8002f68:	0800748c 	.word	0x0800748c
 8002f6c:	08007488 	.word	0x08007488
 8002f70:	08007490 	.word	0x08007490
 8002f74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002f76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	bfa8      	it	ge
 8002f7c:	461a      	movge	r2, r3
 8002f7e:	2a00      	cmp	r2, #0
 8002f80:	4691      	mov	r9, r2
 8002f82:	dc37      	bgt.n	8002ff4 <_printf_float+0x360>
 8002f84:	f04f 0b00 	mov.w	fp, #0
 8002f88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f8c:	f104 021a 	add.w	r2, r4, #26
 8002f90:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002f94:	ebaa 0309 	sub.w	r3, sl, r9
 8002f98:	455b      	cmp	r3, fp
 8002f9a:	dc33      	bgt.n	8003004 <_printf_float+0x370>
 8002f9c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	db3b      	blt.n	800301c <_printf_float+0x388>
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	07da      	lsls	r2, r3, #31
 8002fa8:	d438      	bmi.n	800301c <_printf_float+0x388>
 8002faa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002fac:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002fae:	eba3 020a 	sub.w	r2, r3, sl
 8002fb2:	eba3 0901 	sub.w	r9, r3, r1
 8002fb6:	4591      	cmp	r9, r2
 8002fb8:	bfa8      	it	ge
 8002fba:	4691      	movge	r9, r2
 8002fbc:	f1b9 0f00 	cmp.w	r9, #0
 8002fc0:	dc34      	bgt.n	800302c <_printf_float+0x398>
 8002fc2:	f04f 0800 	mov.w	r8, #0
 8002fc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002fca:	f104 0a1a 	add.w	sl, r4, #26
 8002fce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	eba3 0309 	sub.w	r3, r3, r9
 8002fd8:	4543      	cmp	r3, r8
 8002fda:	f77f af7b 	ble.w	8002ed4 <_printf_float+0x240>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	4652      	mov	r2, sl
 8002fe2:	4631      	mov	r1, r6
 8002fe4:	4628      	mov	r0, r5
 8002fe6:	47b8      	blx	r7
 8002fe8:	3001      	adds	r0, #1
 8002fea:	f43f aeae 	beq.w	8002d4a <_printf_float+0xb6>
 8002fee:	f108 0801 	add.w	r8, r8, #1
 8002ff2:	e7ec      	b.n	8002fce <_printf_float+0x33a>
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	4631      	mov	r1, r6
 8002ff8:	4642      	mov	r2, r8
 8002ffa:	4628      	mov	r0, r5
 8002ffc:	47b8      	blx	r7
 8002ffe:	3001      	adds	r0, #1
 8003000:	d1c0      	bne.n	8002f84 <_printf_float+0x2f0>
 8003002:	e6a2      	b.n	8002d4a <_printf_float+0xb6>
 8003004:	2301      	movs	r3, #1
 8003006:	4631      	mov	r1, r6
 8003008:	4628      	mov	r0, r5
 800300a:	920b      	str	r2, [sp, #44]	; 0x2c
 800300c:	47b8      	blx	r7
 800300e:	3001      	adds	r0, #1
 8003010:	f43f ae9b 	beq.w	8002d4a <_printf_float+0xb6>
 8003014:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003016:	f10b 0b01 	add.w	fp, fp, #1
 800301a:	e7b9      	b.n	8002f90 <_printf_float+0x2fc>
 800301c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003020:	4631      	mov	r1, r6
 8003022:	4628      	mov	r0, r5
 8003024:	47b8      	blx	r7
 8003026:	3001      	adds	r0, #1
 8003028:	d1bf      	bne.n	8002faa <_printf_float+0x316>
 800302a:	e68e      	b.n	8002d4a <_printf_float+0xb6>
 800302c:	464b      	mov	r3, r9
 800302e:	eb08 020a 	add.w	r2, r8, sl
 8003032:	4631      	mov	r1, r6
 8003034:	4628      	mov	r0, r5
 8003036:	47b8      	blx	r7
 8003038:	3001      	adds	r0, #1
 800303a:	d1c2      	bne.n	8002fc2 <_printf_float+0x32e>
 800303c:	e685      	b.n	8002d4a <_printf_float+0xb6>
 800303e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003040:	2a01      	cmp	r2, #1
 8003042:	dc01      	bgt.n	8003048 <_printf_float+0x3b4>
 8003044:	07db      	lsls	r3, r3, #31
 8003046:	d537      	bpl.n	80030b8 <_printf_float+0x424>
 8003048:	2301      	movs	r3, #1
 800304a:	4642      	mov	r2, r8
 800304c:	4631      	mov	r1, r6
 800304e:	4628      	mov	r0, r5
 8003050:	47b8      	blx	r7
 8003052:	3001      	adds	r0, #1
 8003054:	f43f ae79 	beq.w	8002d4a <_printf_float+0xb6>
 8003058:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800305c:	4631      	mov	r1, r6
 800305e:	4628      	mov	r0, r5
 8003060:	47b8      	blx	r7
 8003062:	3001      	adds	r0, #1
 8003064:	f43f ae71 	beq.w	8002d4a <_printf_float+0xb6>
 8003068:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800306c:	2200      	movs	r2, #0
 800306e:	2300      	movs	r3, #0
 8003070:	f7fd fd32 	bl	8000ad8 <__aeabi_dcmpeq>
 8003074:	b9d8      	cbnz	r0, 80030ae <_printf_float+0x41a>
 8003076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003078:	f108 0201 	add.w	r2, r8, #1
 800307c:	3b01      	subs	r3, #1
 800307e:	4631      	mov	r1, r6
 8003080:	4628      	mov	r0, r5
 8003082:	47b8      	blx	r7
 8003084:	3001      	adds	r0, #1
 8003086:	d10e      	bne.n	80030a6 <_printf_float+0x412>
 8003088:	e65f      	b.n	8002d4a <_printf_float+0xb6>
 800308a:	2301      	movs	r3, #1
 800308c:	464a      	mov	r2, r9
 800308e:	4631      	mov	r1, r6
 8003090:	4628      	mov	r0, r5
 8003092:	47b8      	blx	r7
 8003094:	3001      	adds	r0, #1
 8003096:	f43f ae58 	beq.w	8002d4a <_printf_float+0xb6>
 800309a:	f108 0801 	add.w	r8, r8, #1
 800309e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030a0:	3b01      	subs	r3, #1
 80030a2:	4543      	cmp	r3, r8
 80030a4:	dcf1      	bgt.n	800308a <_printf_float+0x3f6>
 80030a6:	4653      	mov	r3, sl
 80030a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80030ac:	e6e1      	b.n	8002e72 <_printf_float+0x1de>
 80030ae:	f04f 0800 	mov.w	r8, #0
 80030b2:	f104 091a 	add.w	r9, r4, #26
 80030b6:	e7f2      	b.n	800309e <_printf_float+0x40a>
 80030b8:	2301      	movs	r3, #1
 80030ba:	4642      	mov	r2, r8
 80030bc:	e7df      	b.n	800307e <_printf_float+0x3ea>
 80030be:	2301      	movs	r3, #1
 80030c0:	464a      	mov	r2, r9
 80030c2:	4631      	mov	r1, r6
 80030c4:	4628      	mov	r0, r5
 80030c6:	47b8      	blx	r7
 80030c8:	3001      	adds	r0, #1
 80030ca:	f43f ae3e 	beq.w	8002d4a <_printf_float+0xb6>
 80030ce:	f108 0801 	add.w	r8, r8, #1
 80030d2:	68e3      	ldr	r3, [r4, #12]
 80030d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80030d6:	1a5b      	subs	r3, r3, r1
 80030d8:	4543      	cmp	r3, r8
 80030da:	dcf0      	bgt.n	80030be <_printf_float+0x42a>
 80030dc:	e6fe      	b.n	8002edc <_printf_float+0x248>
 80030de:	f04f 0800 	mov.w	r8, #0
 80030e2:	f104 0919 	add.w	r9, r4, #25
 80030e6:	e7f4      	b.n	80030d2 <_printf_float+0x43e>

080030e8 <_printf_common>:
 80030e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030ec:	4616      	mov	r6, r2
 80030ee:	4699      	mov	r9, r3
 80030f0:	688a      	ldr	r2, [r1, #8]
 80030f2:	690b      	ldr	r3, [r1, #16]
 80030f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030f8:	4293      	cmp	r3, r2
 80030fa:	bfb8      	it	lt
 80030fc:	4613      	movlt	r3, r2
 80030fe:	6033      	str	r3, [r6, #0]
 8003100:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003104:	4607      	mov	r7, r0
 8003106:	460c      	mov	r4, r1
 8003108:	b10a      	cbz	r2, 800310e <_printf_common+0x26>
 800310a:	3301      	adds	r3, #1
 800310c:	6033      	str	r3, [r6, #0]
 800310e:	6823      	ldr	r3, [r4, #0]
 8003110:	0699      	lsls	r1, r3, #26
 8003112:	bf42      	ittt	mi
 8003114:	6833      	ldrmi	r3, [r6, #0]
 8003116:	3302      	addmi	r3, #2
 8003118:	6033      	strmi	r3, [r6, #0]
 800311a:	6825      	ldr	r5, [r4, #0]
 800311c:	f015 0506 	ands.w	r5, r5, #6
 8003120:	d106      	bne.n	8003130 <_printf_common+0x48>
 8003122:	f104 0a19 	add.w	sl, r4, #25
 8003126:	68e3      	ldr	r3, [r4, #12]
 8003128:	6832      	ldr	r2, [r6, #0]
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	42ab      	cmp	r3, r5
 800312e:	dc26      	bgt.n	800317e <_printf_common+0x96>
 8003130:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003134:	1e13      	subs	r3, r2, #0
 8003136:	6822      	ldr	r2, [r4, #0]
 8003138:	bf18      	it	ne
 800313a:	2301      	movne	r3, #1
 800313c:	0692      	lsls	r2, r2, #26
 800313e:	d42b      	bmi.n	8003198 <_printf_common+0xb0>
 8003140:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003144:	4649      	mov	r1, r9
 8003146:	4638      	mov	r0, r7
 8003148:	47c0      	blx	r8
 800314a:	3001      	adds	r0, #1
 800314c:	d01e      	beq.n	800318c <_printf_common+0xa4>
 800314e:	6823      	ldr	r3, [r4, #0]
 8003150:	68e5      	ldr	r5, [r4, #12]
 8003152:	6832      	ldr	r2, [r6, #0]
 8003154:	f003 0306 	and.w	r3, r3, #6
 8003158:	2b04      	cmp	r3, #4
 800315a:	bf08      	it	eq
 800315c:	1aad      	subeq	r5, r5, r2
 800315e:	68a3      	ldr	r3, [r4, #8]
 8003160:	6922      	ldr	r2, [r4, #16]
 8003162:	bf0c      	ite	eq
 8003164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003168:	2500      	movne	r5, #0
 800316a:	4293      	cmp	r3, r2
 800316c:	bfc4      	itt	gt
 800316e:	1a9b      	subgt	r3, r3, r2
 8003170:	18ed      	addgt	r5, r5, r3
 8003172:	2600      	movs	r6, #0
 8003174:	341a      	adds	r4, #26
 8003176:	42b5      	cmp	r5, r6
 8003178:	d11a      	bne.n	80031b0 <_printf_common+0xc8>
 800317a:	2000      	movs	r0, #0
 800317c:	e008      	b.n	8003190 <_printf_common+0xa8>
 800317e:	2301      	movs	r3, #1
 8003180:	4652      	mov	r2, sl
 8003182:	4649      	mov	r1, r9
 8003184:	4638      	mov	r0, r7
 8003186:	47c0      	blx	r8
 8003188:	3001      	adds	r0, #1
 800318a:	d103      	bne.n	8003194 <_printf_common+0xac>
 800318c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003194:	3501      	adds	r5, #1
 8003196:	e7c6      	b.n	8003126 <_printf_common+0x3e>
 8003198:	18e1      	adds	r1, r4, r3
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	2030      	movs	r0, #48	; 0x30
 800319e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031a2:	4422      	add	r2, r4
 80031a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031ac:	3302      	adds	r3, #2
 80031ae:	e7c7      	b.n	8003140 <_printf_common+0x58>
 80031b0:	2301      	movs	r3, #1
 80031b2:	4622      	mov	r2, r4
 80031b4:	4649      	mov	r1, r9
 80031b6:	4638      	mov	r0, r7
 80031b8:	47c0      	blx	r8
 80031ba:	3001      	adds	r0, #1
 80031bc:	d0e6      	beq.n	800318c <_printf_common+0xa4>
 80031be:	3601      	adds	r6, #1
 80031c0:	e7d9      	b.n	8003176 <_printf_common+0x8e>
	...

080031c4 <_printf_i>:
 80031c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031c8:	7e0f      	ldrb	r7, [r1, #24]
 80031ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80031cc:	2f78      	cmp	r7, #120	; 0x78
 80031ce:	4691      	mov	r9, r2
 80031d0:	4680      	mov	r8, r0
 80031d2:	460c      	mov	r4, r1
 80031d4:	469a      	mov	sl, r3
 80031d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80031da:	d807      	bhi.n	80031ec <_printf_i+0x28>
 80031dc:	2f62      	cmp	r7, #98	; 0x62
 80031de:	d80a      	bhi.n	80031f6 <_printf_i+0x32>
 80031e0:	2f00      	cmp	r7, #0
 80031e2:	f000 80d8 	beq.w	8003396 <_printf_i+0x1d2>
 80031e6:	2f58      	cmp	r7, #88	; 0x58
 80031e8:	f000 80a3 	beq.w	8003332 <_printf_i+0x16e>
 80031ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031f4:	e03a      	b.n	800326c <_printf_i+0xa8>
 80031f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031fa:	2b15      	cmp	r3, #21
 80031fc:	d8f6      	bhi.n	80031ec <_printf_i+0x28>
 80031fe:	a101      	add	r1, pc, #4	; (adr r1, 8003204 <_printf_i+0x40>)
 8003200:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003204:	0800325d 	.word	0x0800325d
 8003208:	08003271 	.word	0x08003271
 800320c:	080031ed 	.word	0x080031ed
 8003210:	080031ed 	.word	0x080031ed
 8003214:	080031ed 	.word	0x080031ed
 8003218:	080031ed 	.word	0x080031ed
 800321c:	08003271 	.word	0x08003271
 8003220:	080031ed 	.word	0x080031ed
 8003224:	080031ed 	.word	0x080031ed
 8003228:	080031ed 	.word	0x080031ed
 800322c:	080031ed 	.word	0x080031ed
 8003230:	0800337d 	.word	0x0800337d
 8003234:	080032a1 	.word	0x080032a1
 8003238:	0800335f 	.word	0x0800335f
 800323c:	080031ed 	.word	0x080031ed
 8003240:	080031ed 	.word	0x080031ed
 8003244:	0800339f 	.word	0x0800339f
 8003248:	080031ed 	.word	0x080031ed
 800324c:	080032a1 	.word	0x080032a1
 8003250:	080031ed 	.word	0x080031ed
 8003254:	080031ed 	.word	0x080031ed
 8003258:	08003367 	.word	0x08003367
 800325c:	682b      	ldr	r3, [r5, #0]
 800325e:	1d1a      	adds	r2, r3, #4
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	602a      	str	r2, [r5, #0]
 8003264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800326c:	2301      	movs	r3, #1
 800326e:	e0a3      	b.n	80033b8 <_printf_i+0x1f4>
 8003270:	6820      	ldr	r0, [r4, #0]
 8003272:	6829      	ldr	r1, [r5, #0]
 8003274:	0606      	lsls	r6, r0, #24
 8003276:	f101 0304 	add.w	r3, r1, #4
 800327a:	d50a      	bpl.n	8003292 <_printf_i+0xce>
 800327c:	680e      	ldr	r6, [r1, #0]
 800327e:	602b      	str	r3, [r5, #0]
 8003280:	2e00      	cmp	r6, #0
 8003282:	da03      	bge.n	800328c <_printf_i+0xc8>
 8003284:	232d      	movs	r3, #45	; 0x2d
 8003286:	4276      	negs	r6, r6
 8003288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800328c:	485e      	ldr	r0, [pc, #376]	; (8003408 <_printf_i+0x244>)
 800328e:	230a      	movs	r3, #10
 8003290:	e019      	b.n	80032c6 <_printf_i+0x102>
 8003292:	680e      	ldr	r6, [r1, #0]
 8003294:	602b      	str	r3, [r5, #0]
 8003296:	f010 0f40 	tst.w	r0, #64	; 0x40
 800329a:	bf18      	it	ne
 800329c:	b236      	sxthne	r6, r6
 800329e:	e7ef      	b.n	8003280 <_printf_i+0xbc>
 80032a0:	682b      	ldr	r3, [r5, #0]
 80032a2:	6820      	ldr	r0, [r4, #0]
 80032a4:	1d19      	adds	r1, r3, #4
 80032a6:	6029      	str	r1, [r5, #0]
 80032a8:	0601      	lsls	r1, r0, #24
 80032aa:	d501      	bpl.n	80032b0 <_printf_i+0xec>
 80032ac:	681e      	ldr	r6, [r3, #0]
 80032ae:	e002      	b.n	80032b6 <_printf_i+0xf2>
 80032b0:	0646      	lsls	r6, r0, #25
 80032b2:	d5fb      	bpl.n	80032ac <_printf_i+0xe8>
 80032b4:	881e      	ldrh	r6, [r3, #0]
 80032b6:	4854      	ldr	r0, [pc, #336]	; (8003408 <_printf_i+0x244>)
 80032b8:	2f6f      	cmp	r7, #111	; 0x6f
 80032ba:	bf0c      	ite	eq
 80032bc:	2308      	moveq	r3, #8
 80032be:	230a      	movne	r3, #10
 80032c0:	2100      	movs	r1, #0
 80032c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032c6:	6865      	ldr	r5, [r4, #4]
 80032c8:	60a5      	str	r5, [r4, #8]
 80032ca:	2d00      	cmp	r5, #0
 80032cc:	bfa2      	ittt	ge
 80032ce:	6821      	ldrge	r1, [r4, #0]
 80032d0:	f021 0104 	bicge.w	r1, r1, #4
 80032d4:	6021      	strge	r1, [r4, #0]
 80032d6:	b90e      	cbnz	r6, 80032dc <_printf_i+0x118>
 80032d8:	2d00      	cmp	r5, #0
 80032da:	d04d      	beq.n	8003378 <_printf_i+0x1b4>
 80032dc:	4615      	mov	r5, r2
 80032de:	fbb6 f1f3 	udiv	r1, r6, r3
 80032e2:	fb03 6711 	mls	r7, r3, r1, r6
 80032e6:	5dc7      	ldrb	r7, [r0, r7]
 80032e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80032ec:	4637      	mov	r7, r6
 80032ee:	42bb      	cmp	r3, r7
 80032f0:	460e      	mov	r6, r1
 80032f2:	d9f4      	bls.n	80032de <_printf_i+0x11a>
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d10b      	bne.n	8003310 <_printf_i+0x14c>
 80032f8:	6823      	ldr	r3, [r4, #0]
 80032fa:	07de      	lsls	r6, r3, #31
 80032fc:	d508      	bpl.n	8003310 <_printf_i+0x14c>
 80032fe:	6923      	ldr	r3, [r4, #16]
 8003300:	6861      	ldr	r1, [r4, #4]
 8003302:	4299      	cmp	r1, r3
 8003304:	bfde      	ittt	le
 8003306:	2330      	movle	r3, #48	; 0x30
 8003308:	f805 3c01 	strble.w	r3, [r5, #-1]
 800330c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003310:	1b52      	subs	r2, r2, r5
 8003312:	6122      	str	r2, [r4, #16]
 8003314:	f8cd a000 	str.w	sl, [sp]
 8003318:	464b      	mov	r3, r9
 800331a:	aa03      	add	r2, sp, #12
 800331c:	4621      	mov	r1, r4
 800331e:	4640      	mov	r0, r8
 8003320:	f7ff fee2 	bl	80030e8 <_printf_common>
 8003324:	3001      	adds	r0, #1
 8003326:	d14c      	bne.n	80033c2 <_printf_i+0x1fe>
 8003328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800332c:	b004      	add	sp, #16
 800332e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003332:	4835      	ldr	r0, [pc, #212]	; (8003408 <_printf_i+0x244>)
 8003334:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003338:	6829      	ldr	r1, [r5, #0]
 800333a:	6823      	ldr	r3, [r4, #0]
 800333c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003340:	6029      	str	r1, [r5, #0]
 8003342:	061d      	lsls	r5, r3, #24
 8003344:	d514      	bpl.n	8003370 <_printf_i+0x1ac>
 8003346:	07df      	lsls	r7, r3, #31
 8003348:	bf44      	itt	mi
 800334a:	f043 0320 	orrmi.w	r3, r3, #32
 800334e:	6023      	strmi	r3, [r4, #0]
 8003350:	b91e      	cbnz	r6, 800335a <_printf_i+0x196>
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	f023 0320 	bic.w	r3, r3, #32
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	2310      	movs	r3, #16
 800335c:	e7b0      	b.n	80032c0 <_printf_i+0xfc>
 800335e:	6823      	ldr	r3, [r4, #0]
 8003360:	f043 0320 	orr.w	r3, r3, #32
 8003364:	6023      	str	r3, [r4, #0]
 8003366:	2378      	movs	r3, #120	; 0x78
 8003368:	4828      	ldr	r0, [pc, #160]	; (800340c <_printf_i+0x248>)
 800336a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800336e:	e7e3      	b.n	8003338 <_printf_i+0x174>
 8003370:	0659      	lsls	r1, r3, #25
 8003372:	bf48      	it	mi
 8003374:	b2b6      	uxthmi	r6, r6
 8003376:	e7e6      	b.n	8003346 <_printf_i+0x182>
 8003378:	4615      	mov	r5, r2
 800337a:	e7bb      	b.n	80032f4 <_printf_i+0x130>
 800337c:	682b      	ldr	r3, [r5, #0]
 800337e:	6826      	ldr	r6, [r4, #0]
 8003380:	6961      	ldr	r1, [r4, #20]
 8003382:	1d18      	adds	r0, r3, #4
 8003384:	6028      	str	r0, [r5, #0]
 8003386:	0635      	lsls	r5, r6, #24
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	d501      	bpl.n	8003390 <_printf_i+0x1cc>
 800338c:	6019      	str	r1, [r3, #0]
 800338e:	e002      	b.n	8003396 <_printf_i+0x1d2>
 8003390:	0670      	lsls	r0, r6, #25
 8003392:	d5fb      	bpl.n	800338c <_printf_i+0x1c8>
 8003394:	8019      	strh	r1, [r3, #0]
 8003396:	2300      	movs	r3, #0
 8003398:	6123      	str	r3, [r4, #16]
 800339a:	4615      	mov	r5, r2
 800339c:	e7ba      	b.n	8003314 <_printf_i+0x150>
 800339e:	682b      	ldr	r3, [r5, #0]
 80033a0:	1d1a      	adds	r2, r3, #4
 80033a2:	602a      	str	r2, [r5, #0]
 80033a4:	681d      	ldr	r5, [r3, #0]
 80033a6:	6862      	ldr	r2, [r4, #4]
 80033a8:	2100      	movs	r1, #0
 80033aa:	4628      	mov	r0, r5
 80033ac:	f7fc ff20 	bl	80001f0 <memchr>
 80033b0:	b108      	cbz	r0, 80033b6 <_printf_i+0x1f2>
 80033b2:	1b40      	subs	r0, r0, r5
 80033b4:	6060      	str	r0, [r4, #4]
 80033b6:	6863      	ldr	r3, [r4, #4]
 80033b8:	6123      	str	r3, [r4, #16]
 80033ba:	2300      	movs	r3, #0
 80033bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033c0:	e7a8      	b.n	8003314 <_printf_i+0x150>
 80033c2:	6923      	ldr	r3, [r4, #16]
 80033c4:	462a      	mov	r2, r5
 80033c6:	4649      	mov	r1, r9
 80033c8:	4640      	mov	r0, r8
 80033ca:	47d0      	blx	sl
 80033cc:	3001      	adds	r0, #1
 80033ce:	d0ab      	beq.n	8003328 <_printf_i+0x164>
 80033d0:	6823      	ldr	r3, [r4, #0]
 80033d2:	079b      	lsls	r3, r3, #30
 80033d4:	d413      	bmi.n	80033fe <_printf_i+0x23a>
 80033d6:	68e0      	ldr	r0, [r4, #12]
 80033d8:	9b03      	ldr	r3, [sp, #12]
 80033da:	4298      	cmp	r0, r3
 80033dc:	bfb8      	it	lt
 80033de:	4618      	movlt	r0, r3
 80033e0:	e7a4      	b.n	800332c <_printf_i+0x168>
 80033e2:	2301      	movs	r3, #1
 80033e4:	4632      	mov	r2, r6
 80033e6:	4649      	mov	r1, r9
 80033e8:	4640      	mov	r0, r8
 80033ea:	47d0      	blx	sl
 80033ec:	3001      	adds	r0, #1
 80033ee:	d09b      	beq.n	8003328 <_printf_i+0x164>
 80033f0:	3501      	adds	r5, #1
 80033f2:	68e3      	ldr	r3, [r4, #12]
 80033f4:	9903      	ldr	r1, [sp, #12]
 80033f6:	1a5b      	subs	r3, r3, r1
 80033f8:	42ab      	cmp	r3, r5
 80033fa:	dcf2      	bgt.n	80033e2 <_printf_i+0x21e>
 80033fc:	e7eb      	b.n	80033d6 <_printf_i+0x212>
 80033fe:	2500      	movs	r5, #0
 8003400:	f104 0619 	add.w	r6, r4, #25
 8003404:	e7f5      	b.n	80033f2 <_printf_i+0x22e>
 8003406:	bf00      	nop
 8003408:	08007492 	.word	0x08007492
 800340c:	080074a3 	.word	0x080074a3

08003410 <_scanf_float>:
 8003410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003414:	b087      	sub	sp, #28
 8003416:	4617      	mov	r7, r2
 8003418:	9303      	str	r3, [sp, #12]
 800341a:	688b      	ldr	r3, [r1, #8]
 800341c:	1e5a      	subs	r2, r3, #1
 800341e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003422:	bf83      	ittte	hi
 8003424:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003428:	195b      	addhi	r3, r3, r5
 800342a:	9302      	strhi	r3, [sp, #8]
 800342c:	2300      	movls	r3, #0
 800342e:	bf86      	itte	hi
 8003430:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003434:	608b      	strhi	r3, [r1, #8]
 8003436:	9302      	strls	r3, [sp, #8]
 8003438:	680b      	ldr	r3, [r1, #0]
 800343a:	468b      	mov	fp, r1
 800343c:	2500      	movs	r5, #0
 800343e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003442:	f84b 3b1c 	str.w	r3, [fp], #28
 8003446:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800344a:	4680      	mov	r8, r0
 800344c:	460c      	mov	r4, r1
 800344e:	465e      	mov	r6, fp
 8003450:	46aa      	mov	sl, r5
 8003452:	46a9      	mov	r9, r5
 8003454:	9501      	str	r5, [sp, #4]
 8003456:	68a2      	ldr	r2, [r4, #8]
 8003458:	b152      	cbz	r2, 8003470 <_scanf_float+0x60>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b4e      	cmp	r3, #78	; 0x4e
 8003460:	d864      	bhi.n	800352c <_scanf_float+0x11c>
 8003462:	2b40      	cmp	r3, #64	; 0x40
 8003464:	d83c      	bhi.n	80034e0 <_scanf_float+0xd0>
 8003466:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800346a:	b2c8      	uxtb	r0, r1
 800346c:	280e      	cmp	r0, #14
 800346e:	d93a      	bls.n	80034e6 <_scanf_float+0xd6>
 8003470:	f1b9 0f00 	cmp.w	r9, #0
 8003474:	d003      	beq.n	800347e <_scanf_float+0x6e>
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800347c:	6023      	str	r3, [r4, #0]
 800347e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003482:	f1ba 0f01 	cmp.w	sl, #1
 8003486:	f200 8113 	bhi.w	80036b0 <_scanf_float+0x2a0>
 800348a:	455e      	cmp	r6, fp
 800348c:	f200 8105 	bhi.w	800369a <_scanf_float+0x28a>
 8003490:	2501      	movs	r5, #1
 8003492:	4628      	mov	r0, r5
 8003494:	b007      	add	sp, #28
 8003496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800349a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800349e:	2a0d      	cmp	r2, #13
 80034a0:	d8e6      	bhi.n	8003470 <_scanf_float+0x60>
 80034a2:	a101      	add	r1, pc, #4	; (adr r1, 80034a8 <_scanf_float+0x98>)
 80034a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80034a8:	080035e7 	.word	0x080035e7
 80034ac:	08003471 	.word	0x08003471
 80034b0:	08003471 	.word	0x08003471
 80034b4:	08003471 	.word	0x08003471
 80034b8:	08003647 	.word	0x08003647
 80034bc:	0800361f 	.word	0x0800361f
 80034c0:	08003471 	.word	0x08003471
 80034c4:	08003471 	.word	0x08003471
 80034c8:	080035f5 	.word	0x080035f5
 80034cc:	08003471 	.word	0x08003471
 80034d0:	08003471 	.word	0x08003471
 80034d4:	08003471 	.word	0x08003471
 80034d8:	08003471 	.word	0x08003471
 80034dc:	080035ad 	.word	0x080035ad
 80034e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80034e4:	e7db      	b.n	800349e <_scanf_float+0x8e>
 80034e6:	290e      	cmp	r1, #14
 80034e8:	d8c2      	bhi.n	8003470 <_scanf_float+0x60>
 80034ea:	a001      	add	r0, pc, #4	; (adr r0, 80034f0 <_scanf_float+0xe0>)
 80034ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80034f0:	0800359f 	.word	0x0800359f
 80034f4:	08003471 	.word	0x08003471
 80034f8:	0800359f 	.word	0x0800359f
 80034fc:	08003633 	.word	0x08003633
 8003500:	08003471 	.word	0x08003471
 8003504:	0800354d 	.word	0x0800354d
 8003508:	08003589 	.word	0x08003589
 800350c:	08003589 	.word	0x08003589
 8003510:	08003589 	.word	0x08003589
 8003514:	08003589 	.word	0x08003589
 8003518:	08003589 	.word	0x08003589
 800351c:	08003589 	.word	0x08003589
 8003520:	08003589 	.word	0x08003589
 8003524:	08003589 	.word	0x08003589
 8003528:	08003589 	.word	0x08003589
 800352c:	2b6e      	cmp	r3, #110	; 0x6e
 800352e:	d809      	bhi.n	8003544 <_scanf_float+0x134>
 8003530:	2b60      	cmp	r3, #96	; 0x60
 8003532:	d8b2      	bhi.n	800349a <_scanf_float+0x8a>
 8003534:	2b54      	cmp	r3, #84	; 0x54
 8003536:	d077      	beq.n	8003628 <_scanf_float+0x218>
 8003538:	2b59      	cmp	r3, #89	; 0x59
 800353a:	d199      	bne.n	8003470 <_scanf_float+0x60>
 800353c:	2d07      	cmp	r5, #7
 800353e:	d197      	bne.n	8003470 <_scanf_float+0x60>
 8003540:	2508      	movs	r5, #8
 8003542:	e029      	b.n	8003598 <_scanf_float+0x188>
 8003544:	2b74      	cmp	r3, #116	; 0x74
 8003546:	d06f      	beq.n	8003628 <_scanf_float+0x218>
 8003548:	2b79      	cmp	r3, #121	; 0x79
 800354a:	e7f6      	b.n	800353a <_scanf_float+0x12a>
 800354c:	6821      	ldr	r1, [r4, #0]
 800354e:	05c8      	lsls	r0, r1, #23
 8003550:	d51a      	bpl.n	8003588 <_scanf_float+0x178>
 8003552:	9b02      	ldr	r3, [sp, #8]
 8003554:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003558:	6021      	str	r1, [r4, #0]
 800355a:	f109 0901 	add.w	r9, r9, #1
 800355e:	b11b      	cbz	r3, 8003568 <_scanf_float+0x158>
 8003560:	3b01      	subs	r3, #1
 8003562:	3201      	adds	r2, #1
 8003564:	9302      	str	r3, [sp, #8]
 8003566:	60a2      	str	r2, [r4, #8]
 8003568:	68a3      	ldr	r3, [r4, #8]
 800356a:	3b01      	subs	r3, #1
 800356c:	60a3      	str	r3, [r4, #8]
 800356e:	6923      	ldr	r3, [r4, #16]
 8003570:	3301      	adds	r3, #1
 8003572:	6123      	str	r3, [r4, #16]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3b01      	subs	r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	607b      	str	r3, [r7, #4]
 800357c:	f340 8084 	ble.w	8003688 <_scanf_float+0x278>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	3301      	adds	r3, #1
 8003584:	603b      	str	r3, [r7, #0]
 8003586:	e766      	b.n	8003456 <_scanf_float+0x46>
 8003588:	eb1a 0f05 	cmn.w	sl, r5
 800358c:	f47f af70 	bne.w	8003470 <_scanf_float+0x60>
 8003590:	6822      	ldr	r2, [r4, #0]
 8003592:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003596:	6022      	str	r2, [r4, #0]
 8003598:	f806 3b01 	strb.w	r3, [r6], #1
 800359c:	e7e4      	b.n	8003568 <_scanf_float+0x158>
 800359e:	6822      	ldr	r2, [r4, #0]
 80035a0:	0610      	lsls	r0, r2, #24
 80035a2:	f57f af65 	bpl.w	8003470 <_scanf_float+0x60>
 80035a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035aa:	e7f4      	b.n	8003596 <_scanf_float+0x186>
 80035ac:	f1ba 0f00 	cmp.w	sl, #0
 80035b0:	d10e      	bne.n	80035d0 <_scanf_float+0x1c0>
 80035b2:	f1b9 0f00 	cmp.w	r9, #0
 80035b6:	d10e      	bne.n	80035d6 <_scanf_float+0x1c6>
 80035b8:	6822      	ldr	r2, [r4, #0]
 80035ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80035be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80035c2:	d108      	bne.n	80035d6 <_scanf_float+0x1c6>
 80035c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80035c8:	6022      	str	r2, [r4, #0]
 80035ca:	f04f 0a01 	mov.w	sl, #1
 80035ce:	e7e3      	b.n	8003598 <_scanf_float+0x188>
 80035d0:	f1ba 0f02 	cmp.w	sl, #2
 80035d4:	d055      	beq.n	8003682 <_scanf_float+0x272>
 80035d6:	2d01      	cmp	r5, #1
 80035d8:	d002      	beq.n	80035e0 <_scanf_float+0x1d0>
 80035da:	2d04      	cmp	r5, #4
 80035dc:	f47f af48 	bne.w	8003470 <_scanf_float+0x60>
 80035e0:	3501      	adds	r5, #1
 80035e2:	b2ed      	uxtb	r5, r5
 80035e4:	e7d8      	b.n	8003598 <_scanf_float+0x188>
 80035e6:	f1ba 0f01 	cmp.w	sl, #1
 80035ea:	f47f af41 	bne.w	8003470 <_scanf_float+0x60>
 80035ee:	f04f 0a02 	mov.w	sl, #2
 80035f2:	e7d1      	b.n	8003598 <_scanf_float+0x188>
 80035f4:	b97d      	cbnz	r5, 8003616 <_scanf_float+0x206>
 80035f6:	f1b9 0f00 	cmp.w	r9, #0
 80035fa:	f47f af3c 	bne.w	8003476 <_scanf_float+0x66>
 80035fe:	6822      	ldr	r2, [r4, #0]
 8003600:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003604:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003608:	f47f af39 	bne.w	800347e <_scanf_float+0x6e>
 800360c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003610:	6022      	str	r2, [r4, #0]
 8003612:	2501      	movs	r5, #1
 8003614:	e7c0      	b.n	8003598 <_scanf_float+0x188>
 8003616:	2d03      	cmp	r5, #3
 8003618:	d0e2      	beq.n	80035e0 <_scanf_float+0x1d0>
 800361a:	2d05      	cmp	r5, #5
 800361c:	e7de      	b.n	80035dc <_scanf_float+0x1cc>
 800361e:	2d02      	cmp	r5, #2
 8003620:	f47f af26 	bne.w	8003470 <_scanf_float+0x60>
 8003624:	2503      	movs	r5, #3
 8003626:	e7b7      	b.n	8003598 <_scanf_float+0x188>
 8003628:	2d06      	cmp	r5, #6
 800362a:	f47f af21 	bne.w	8003470 <_scanf_float+0x60>
 800362e:	2507      	movs	r5, #7
 8003630:	e7b2      	b.n	8003598 <_scanf_float+0x188>
 8003632:	6822      	ldr	r2, [r4, #0]
 8003634:	0591      	lsls	r1, r2, #22
 8003636:	f57f af1b 	bpl.w	8003470 <_scanf_float+0x60>
 800363a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800363e:	6022      	str	r2, [r4, #0]
 8003640:	f8cd 9004 	str.w	r9, [sp, #4]
 8003644:	e7a8      	b.n	8003598 <_scanf_float+0x188>
 8003646:	6822      	ldr	r2, [r4, #0]
 8003648:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800364c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003650:	d006      	beq.n	8003660 <_scanf_float+0x250>
 8003652:	0550      	lsls	r0, r2, #21
 8003654:	f57f af0c 	bpl.w	8003470 <_scanf_float+0x60>
 8003658:	f1b9 0f00 	cmp.w	r9, #0
 800365c:	f43f af0f 	beq.w	800347e <_scanf_float+0x6e>
 8003660:	0591      	lsls	r1, r2, #22
 8003662:	bf58      	it	pl
 8003664:	9901      	ldrpl	r1, [sp, #4]
 8003666:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800366a:	bf58      	it	pl
 800366c:	eba9 0101 	subpl.w	r1, r9, r1
 8003670:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003674:	bf58      	it	pl
 8003676:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800367a:	6022      	str	r2, [r4, #0]
 800367c:	f04f 0900 	mov.w	r9, #0
 8003680:	e78a      	b.n	8003598 <_scanf_float+0x188>
 8003682:	f04f 0a03 	mov.w	sl, #3
 8003686:	e787      	b.n	8003598 <_scanf_float+0x188>
 8003688:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800368c:	4639      	mov	r1, r7
 800368e:	4640      	mov	r0, r8
 8003690:	4798      	blx	r3
 8003692:	2800      	cmp	r0, #0
 8003694:	f43f aedf 	beq.w	8003456 <_scanf_float+0x46>
 8003698:	e6ea      	b.n	8003470 <_scanf_float+0x60>
 800369a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800369e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80036a2:	463a      	mov	r2, r7
 80036a4:	4640      	mov	r0, r8
 80036a6:	4798      	blx	r3
 80036a8:	6923      	ldr	r3, [r4, #16]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	6123      	str	r3, [r4, #16]
 80036ae:	e6ec      	b.n	800348a <_scanf_float+0x7a>
 80036b0:	1e6b      	subs	r3, r5, #1
 80036b2:	2b06      	cmp	r3, #6
 80036b4:	d825      	bhi.n	8003702 <_scanf_float+0x2f2>
 80036b6:	2d02      	cmp	r5, #2
 80036b8:	d836      	bhi.n	8003728 <_scanf_float+0x318>
 80036ba:	455e      	cmp	r6, fp
 80036bc:	f67f aee8 	bls.w	8003490 <_scanf_float+0x80>
 80036c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80036c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80036c8:	463a      	mov	r2, r7
 80036ca:	4640      	mov	r0, r8
 80036cc:	4798      	blx	r3
 80036ce:	6923      	ldr	r3, [r4, #16]
 80036d0:	3b01      	subs	r3, #1
 80036d2:	6123      	str	r3, [r4, #16]
 80036d4:	e7f1      	b.n	80036ba <_scanf_float+0x2aa>
 80036d6:	9802      	ldr	r0, [sp, #8]
 80036d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80036dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80036e0:	9002      	str	r0, [sp, #8]
 80036e2:	463a      	mov	r2, r7
 80036e4:	4640      	mov	r0, r8
 80036e6:	4798      	blx	r3
 80036e8:	6923      	ldr	r3, [r4, #16]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	6123      	str	r3, [r4, #16]
 80036ee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80036f2:	fa5f fa8a 	uxtb.w	sl, sl
 80036f6:	f1ba 0f02 	cmp.w	sl, #2
 80036fa:	d1ec      	bne.n	80036d6 <_scanf_float+0x2c6>
 80036fc:	3d03      	subs	r5, #3
 80036fe:	b2ed      	uxtb	r5, r5
 8003700:	1b76      	subs	r6, r6, r5
 8003702:	6823      	ldr	r3, [r4, #0]
 8003704:	05da      	lsls	r2, r3, #23
 8003706:	d52f      	bpl.n	8003768 <_scanf_float+0x358>
 8003708:	055b      	lsls	r3, r3, #21
 800370a:	d510      	bpl.n	800372e <_scanf_float+0x31e>
 800370c:	455e      	cmp	r6, fp
 800370e:	f67f aebf 	bls.w	8003490 <_scanf_float+0x80>
 8003712:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003716:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800371a:	463a      	mov	r2, r7
 800371c:	4640      	mov	r0, r8
 800371e:	4798      	blx	r3
 8003720:	6923      	ldr	r3, [r4, #16]
 8003722:	3b01      	subs	r3, #1
 8003724:	6123      	str	r3, [r4, #16]
 8003726:	e7f1      	b.n	800370c <_scanf_float+0x2fc>
 8003728:	46aa      	mov	sl, r5
 800372a:	9602      	str	r6, [sp, #8]
 800372c:	e7df      	b.n	80036ee <_scanf_float+0x2de>
 800372e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003732:	6923      	ldr	r3, [r4, #16]
 8003734:	2965      	cmp	r1, #101	; 0x65
 8003736:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800373a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800373e:	6123      	str	r3, [r4, #16]
 8003740:	d00c      	beq.n	800375c <_scanf_float+0x34c>
 8003742:	2945      	cmp	r1, #69	; 0x45
 8003744:	d00a      	beq.n	800375c <_scanf_float+0x34c>
 8003746:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800374a:	463a      	mov	r2, r7
 800374c:	4640      	mov	r0, r8
 800374e:	4798      	blx	r3
 8003750:	6923      	ldr	r3, [r4, #16]
 8003752:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003756:	3b01      	subs	r3, #1
 8003758:	1eb5      	subs	r5, r6, #2
 800375a:	6123      	str	r3, [r4, #16]
 800375c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003760:	463a      	mov	r2, r7
 8003762:	4640      	mov	r0, r8
 8003764:	4798      	blx	r3
 8003766:	462e      	mov	r6, r5
 8003768:	6825      	ldr	r5, [r4, #0]
 800376a:	f015 0510 	ands.w	r5, r5, #16
 800376e:	d155      	bne.n	800381c <_scanf_float+0x40c>
 8003770:	7035      	strb	r5, [r6, #0]
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800377c:	d11b      	bne.n	80037b6 <_scanf_float+0x3a6>
 800377e:	9b01      	ldr	r3, [sp, #4]
 8003780:	454b      	cmp	r3, r9
 8003782:	eba3 0209 	sub.w	r2, r3, r9
 8003786:	d123      	bne.n	80037d0 <_scanf_float+0x3c0>
 8003788:	2200      	movs	r2, #0
 800378a:	4659      	mov	r1, fp
 800378c:	4640      	mov	r0, r8
 800378e:	f000 fe7b 	bl	8004488 <_strtod_r>
 8003792:	6822      	ldr	r2, [r4, #0]
 8003794:	9b03      	ldr	r3, [sp, #12]
 8003796:	f012 0f02 	tst.w	r2, #2
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4606      	mov	r6, r0
 800379e:	460f      	mov	r7, r1
 80037a0:	d021      	beq.n	80037e6 <_scanf_float+0x3d6>
 80037a2:	1d1a      	adds	r2, r3, #4
 80037a4:	9903      	ldr	r1, [sp, #12]
 80037a6:	600a      	str	r2, [r1, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	e9c3 6700 	strd	r6, r7, [r3]
 80037ae:	68e3      	ldr	r3, [r4, #12]
 80037b0:	3301      	adds	r3, #1
 80037b2:	60e3      	str	r3, [r4, #12]
 80037b4:	e66d      	b.n	8003492 <_scanf_float+0x82>
 80037b6:	9b04      	ldr	r3, [sp, #16]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0e5      	beq.n	8003788 <_scanf_float+0x378>
 80037bc:	9905      	ldr	r1, [sp, #20]
 80037be:	230a      	movs	r3, #10
 80037c0:	462a      	mov	r2, r5
 80037c2:	3101      	adds	r1, #1
 80037c4:	4640      	mov	r0, r8
 80037c6:	f000 fee1 	bl	800458c <_strtol_r>
 80037ca:	9b04      	ldr	r3, [sp, #16]
 80037cc:	9e05      	ldr	r6, [sp, #20]
 80037ce:	1ac2      	subs	r2, r0, r3
 80037d0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80037d4:	429e      	cmp	r6, r3
 80037d6:	bf28      	it	cs
 80037d8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80037dc:	4910      	ldr	r1, [pc, #64]	; (8003820 <_scanf_float+0x410>)
 80037de:	4630      	mov	r0, r6
 80037e0:	f000 f826 	bl	8003830 <siprintf>
 80037e4:	e7d0      	b.n	8003788 <_scanf_float+0x378>
 80037e6:	f012 0f04 	tst.w	r2, #4
 80037ea:	f103 0204 	add.w	r2, r3, #4
 80037ee:	d1d9      	bne.n	80037a4 <_scanf_float+0x394>
 80037f0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80037f4:	f8cc 2000 	str.w	r2, [ip]
 80037f8:	f8d3 8000 	ldr.w	r8, [r3]
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	f7fd f99c 	bl	8000b3c <__aeabi_dcmpun>
 8003804:	b128      	cbz	r0, 8003812 <_scanf_float+0x402>
 8003806:	4807      	ldr	r0, [pc, #28]	; (8003824 <_scanf_float+0x414>)
 8003808:	f000 f80e 	bl	8003828 <nanf>
 800380c:	f8c8 0000 	str.w	r0, [r8]
 8003810:	e7cd      	b.n	80037ae <_scanf_float+0x39e>
 8003812:	4630      	mov	r0, r6
 8003814:	4639      	mov	r1, r7
 8003816:	f7fd f9ef 	bl	8000bf8 <__aeabi_d2f>
 800381a:	e7f7      	b.n	800380c <_scanf_float+0x3fc>
 800381c:	2500      	movs	r5, #0
 800381e:	e638      	b.n	8003492 <_scanf_float+0x82>
 8003820:	080074b4 	.word	0x080074b4
 8003824:	080078c0 	.word	0x080078c0

08003828 <nanf>:
 8003828:	4800      	ldr	r0, [pc, #0]	; (800382c <nanf+0x4>)
 800382a:	4770      	bx	lr
 800382c:	7fc00000 	.word	0x7fc00000

08003830 <siprintf>:
 8003830:	b40e      	push	{r1, r2, r3}
 8003832:	b500      	push	{lr}
 8003834:	b09c      	sub	sp, #112	; 0x70
 8003836:	ab1d      	add	r3, sp, #116	; 0x74
 8003838:	9002      	str	r0, [sp, #8]
 800383a:	9006      	str	r0, [sp, #24]
 800383c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003840:	4809      	ldr	r0, [pc, #36]	; (8003868 <siprintf+0x38>)
 8003842:	9107      	str	r1, [sp, #28]
 8003844:	9104      	str	r1, [sp, #16]
 8003846:	4909      	ldr	r1, [pc, #36]	; (800386c <siprintf+0x3c>)
 8003848:	f853 2b04 	ldr.w	r2, [r3], #4
 800384c:	9105      	str	r1, [sp, #20]
 800384e:	6800      	ldr	r0, [r0, #0]
 8003850:	9301      	str	r3, [sp, #4]
 8003852:	a902      	add	r1, sp, #8
 8003854:	f002 feac 	bl	80065b0 <_svfiprintf_r>
 8003858:	9b02      	ldr	r3, [sp, #8]
 800385a:	2200      	movs	r2, #0
 800385c:	701a      	strb	r2, [r3, #0]
 800385e:	b01c      	add	sp, #112	; 0x70
 8003860:	f85d eb04 	ldr.w	lr, [sp], #4
 8003864:	b003      	add	sp, #12
 8003866:	4770      	bx	lr
 8003868:	20000044 	.word	0x20000044
 800386c:	ffff0208 	.word	0xffff0208

08003870 <sulp>:
 8003870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003874:	460f      	mov	r7, r1
 8003876:	4690      	mov	r8, r2
 8003878:	f002 fc04 	bl	8006084 <__ulp>
 800387c:	4604      	mov	r4, r0
 800387e:	460d      	mov	r5, r1
 8003880:	f1b8 0f00 	cmp.w	r8, #0
 8003884:	d011      	beq.n	80038aa <sulp+0x3a>
 8003886:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800388a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800388e:	2b00      	cmp	r3, #0
 8003890:	dd0b      	ble.n	80038aa <sulp+0x3a>
 8003892:	051b      	lsls	r3, r3, #20
 8003894:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003898:	2400      	movs	r4, #0
 800389a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800389e:	4622      	mov	r2, r4
 80038a0:	462b      	mov	r3, r5
 80038a2:	f7fc feb1 	bl	8000608 <__aeabi_dmul>
 80038a6:	4604      	mov	r4, r0
 80038a8:	460d      	mov	r5, r1
 80038aa:	4620      	mov	r0, r4
 80038ac:	4629      	mov	r1, r5
 80038ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038b2:	0000      	movs	r0, r0
 80038b4:	0000      	movs	r0, r0
	...

080038b8 <_strtod_l>:
 80038b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038bc:	b09f      	sub	sp, #124	; 0x7c
 80038be:	469b      	mov	fp, r3
 80038c0:	2300      	movs	r3, #0
 80038c2:	931a      	str	r3, [sp, #104]	; 0x68
 80038c4:	4b9e      	ldr	r3, [pc, #632]	; (8003b40 <_strtod_l+0x288>)
 80038c6:	9215      	str	r2, [sp, #84]	; 0x54
 80038c8:	681f      	ldr	r7, [r3, #0]
 80038ca:	4682      	mov	sl, r0
 80038cc:	4638      	mov	r0, r7
 80038ce:	460e      	mov	r6, r1
 80038d0:	f7fc fc86 	bl	80001e0 <strlen>
 80038d4:	f04f 0800 	mov.w	r8, #0
 80038d8:	4604      	mov	r4, r0
 80038da:	f04f 0900 	mov.w	r9, #0
 80038de:	9619      	str	r6, [sp, #100]	; 0x64
 80038e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80038e2:	781a      	ldrb	r2, [r3, #0]
 80038e4:	2a2b      	cmp	r2, #43	; 0x2b
 80038e6:	d04c      	beq.n	8003982 <_strtod_l+0xca>
 80038e8:	d83a      	bhi.n	8003960 <_strtod_l+0xa8>
 80038ea:	2a0d      	cmp	r2, #13
 80038ec:	d833      	bhi.n	8003956 <_strtod_l+0x9e>
 80038ee:	2a08      	cmp	r2, #8
 80038f0:	d833      	bhi.n	800395a <_strtod_l+0xa2>
 80038f2:	2a00      	cmp	r2, #0
 80038f4:	d03d      	beq.n	8003972 <_strtod_l+0xba>
 80038f6:	2300      	movs	r3, #0
 80038f8:	930a      	str	r3, [sp, #40]	; 0x28
 80038fa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80038fc:	782b      	ldrb	r3, [r5, #0]
 80038fe:	2b30      	cmp	r3, #48	; 0x30
 8003900:	f040 80aa 	bne.w	8003a58 <_strtod_l+0x1a0>
 8003904:	786b      	ldrb	r3, [r5, #1]
 8003906:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800390a:	2b58      	cmp	r3, #88	; 0x58
 800390c:	d166      	bne.n	80039dc <_strtod_l+0x124>
 800390e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003910:	9301      	str	r3, [sp, #4]
 8003912:	ab1a      	add	r3, sp, #104	; 0x68
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	4a8b      	ldr	r2, [pc, #556]	; (8003b44 <_strtod_l+0x28c>)
 8003918:	f8cd b008 	str.w	fp, [sp, #8]
 800391c:	ab1b      	add	r3, sp, #108	; 0x6c
 800391e:	a919      	add	r1, sp, #100	; 0x64
 8003920:	4650      	mov	r0, sl
 8003922:	f001 fd19 	bl	8005358 <__gethex>
 8003926:	f010 0607 	ands.w	r6, r0, #7
 800392a:	4604      	mov	r4, r0
 800392c:	d005      	beq.n	800393a <_strtod_l+0x82>
 800392e:	2e06      	cmp	r6, #6
 8003930:	d129      	bne.n	8003986 <_strtod_l+0xce>
 8003932:	3501      	adds	r5, #1
 8003934:	2300      	movs	r3, #0
 8003936:	9519      	str	r5, [sp, #100]	; 0x64
 8003938:	930a      	str	r3, [sp, #40]	; 0x28
 800393a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800393c:	2b00      	cmp	r3, #0
 800393e:	f040 858a 	bne.w	8004456 <_strtod_l+0xb9e>
 8003942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003944:	b1d3      	cbz	r3, 800397c <_strtod_l+0xc4>
 8003946:	4642      	mov	r2, r8
 8003948:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800394c:	4610      	mov	r0, r2
 800394e:	4619      	mov	r1, r3
 8003950:	b01f      	add	sp, #124	; 0x7c
 8003952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003956:	2a20      	cmp	r2, #32
 8003958:	d1cd      	bne.n	80038f6 <_strtod_l+0x3e>
 800395a:	3301      	adds	r3, #1
 800395c:	9319      	str	r3, [sp, #100]	; 0x64
 800395e:	e7bf      	b.n	80038e0 <_strtod_l+0x28>
 8003960:	2a2d      	cmp	r2, #45	; 0x2d
 8003962:	d1c8      	bne.n	80038f6 <_strtod_l+0x3e>
 8003964:	2201      	movs	r2, #1
 8003966:	920a      	str	r2, [sp, #40]	; 0x28
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	9219      	str	r2, [sp, #100]	; 0x64
 800396c:	785b      	ldrb	r3, [r3, #1]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1c3      	bne.n	80038fa <_strtod_l+0x42>
 8003972:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003974:	9619      	str	r6, [sp, #100]	; 0x64
 8003976:	2b00      	cmp	r3, #0
 8003978:	f040 856b 	bne.w	8004452 <_strtod_l+0xb9a>
 800397c:	4642      	mov	r2, r8
 800397e:	464b      	mov	r3, r9
 8003980:	e7e4      	b.n	800394c <_strtod_l+0x94>
 8003982:	2200      	movs	r2, #0
 8003984:	e7ef      	b.n	8003966 <_strtod_l+0xae>
 8003986:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003988:	b13a      	cbz	r2, 800399a <_strtod_l+0xe2>
 800398a:	2135      	movs	r1, #53	; 0x35
 800398c:	a81c      	add	r0, sp, #112	; 0x70
 800398e:	f002 fc7d 	bl	800628c <__copybits>
 8003992:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003994:	4650      	mov	r0, sl
 8003996:	f002 f849 	bl	8005a2c <_Bfree>
 800399a:	3e01      	subs	r6, #1
 800399c:	2e04      	cmp	r6, #4
 800399e:	d806      	bhi.n	80039ae <_strtod_l+0xf6>
 80039a0:	e8df f006 	tbb	[pc, r6]
 80039a4:	1714030a 	.word	0x1714030a
 80039a8:	0a          	.byte	0x0a
 80039a9:	00          	.byte	0x00
 80039aa:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80039ae:	0721      	lsls	r1, r4, #28
 80039b0:	d5c3      	bpl.n	800393a <_strtod_l+0x82>
 80039b2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80039b6:	e7c0      	b.n	800393a <_strtod_l+0x82>
 80039b8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80039bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80039be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80039c2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80039c6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80039ca:	e7f0      	b.n	80039ae <_strtod_l+0xf6>
 80039cc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8003b48 <_strtod_l+0x290>
 80039d0:	e7ed      	b.n	80039ae <_strtod_l+0xf6>
 80039d2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80039d6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80039da:	e7e8      	b.n	80039ae <_strtod_l+0xf6>
 80039dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	9219      	str	r2, [sp, #100]	; 0x64
 80039e2:	785b      	ldrb	r3, [r3, #1]
 80039e4:	2b30      	cmp	r3, #48	; 0x30
 80039e6:	d0f9      	beq.n	80039dc <_strtod_l+0x124>
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0a6      	beq.n	800393a <_strtod_l+0x82>
 80039ec:	2301      	movs	r3, #1
 80039ee:	9307      	str	r3, [sp, #28]
 80039f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80039f2:	9308      	str	r3, [sp, #32]
 80039f4:	2300      	movs	r3, #0
 80039f6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80039fa:	469b      	mov	fp, r3
 80039fc:	220a      	movs	r2, #10
 80039fe:	9819      	ldr	r0, [sp, #100]	; 0x64
 8003a00:	7805      	ldrb	r5, [r0, #0]
 8003a02:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003a06:	b2d9      	uxtb	r1, r3
 8003a08:	2909      	cmp	r1, #9
 8003a0a:	d927      	bls.n	8003a5c <_strtod_l+0x1a4>
 8003a0c:	4622      	mov	r2, r4
 8003a0e:	4639      	mov	r1, r7
 8003a10:	f002 fee4 	bl	80067dc <strncmp>
 8003a14:	2800      	cmp	r0, #0
 8003a16:	d033      	beq.n	8003a80 <_strtod_l+0x1c8>
 8003a18:	2000      	movs	r0, #0
 8003a1a:	462a      	mov	r2, r5
 8003a1c:	465c      	mov	r4, fp
 8003a1e:	9004      	str	r0, [sp, #16]
 8003a20:	4603      	mov	r3, r0
 8003a22:	2a65      	cmp	r2, #101	; 0x65
 8003a24:	d001      	beq.n	8003a2a <_strtod_l+0x172>
 8003a26:	2a45      	cmp	r2, #69	; 0x45
 8003a28:	d114      	bne.n	8003a54 <_strtod_l+0x19c>
 8003a2a:	b91c      	cbnz	r4, 8003a34 <_strtod_l+0x17c>
 8003a2c:	9a07      	ldr	r2, [sp, #28]
 8003a2e:	4302      	orrs	r2, r0
 8003a30:	d09f      	beq.n	8003972 <_strtod_l+0xba>
 8003a32:	2400      	movs	r4, #0
 8003a34:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8003a36:	1c72      	adds	r2, r6, #1
 8003a38:	9219      	str	r2, [sp, #100]	; 0x64
 8003a3a:	7872      	ldrb	r2, [r6, #1]
 8003a3c:	2a2b      	cmp	r2, #43	; 0x2b
 8003a3e:	d079      	beq.n	8003b34 <_strtod_l+0x27c>
 8003a40:	2a2d      	cmp	r2, #45	; 0x2d
 8003a42:	f000 8083 	beq.w	8003b4c <_strtod_l+0x294>
 8003a46:	2700      	movs	r7, #0
 8003a48:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8003a4c:	2909      	cmp	r1, #9
 8003a4e:	f240 8083 	bls.w	8003b58 <_strtod_l+0x2a0>
 8003a52:	9619      	str	r6, [sp, #100]	; 0x64
 8003a54:	2500      	movs	r5, #0
 8003a56:	e09f      	b.n	8003b98 <_strtod_l+0x2e0>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	e7c8      	b.n	80039ee <_strtod_l+0x136>
 8003a5c:	f1bb 0f08 	cmp.w	fp, #8
 8003a60:	bfd5      	itete	le
 8003a62:	9906      	ldrle	r1, [sp, #24]
 8003a64:	9905      	ldrgt	r1, [sp, #20]
 8003a66:	fb02 3301 	mlale	r3, r2, r1, r3
 8003a6a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8003a6e:	f100 0001 	add.w	r0, r0, #1
 8003a72:	bfd4      	ite	le
 8003a74:	9306      	strle	r3, [sp, #24]
 8003a76:	9305      	strgt	r3, [sp, #20]
 8003a78:	f10b 0b01 	add.w	fp, fp, #1
 8003a7c:	9019      	str	r0, [sp, #100]	; 0x64
 8003a7e:	e7be      	b.n	80039fe <_strtod_l+0x146>
 8003a80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003a82:	191a      	adds	r2, r3, r4
 8003a84:	9219      	str	r2, [sp, #100]	; 0x64
 8003a86:	5d1a      	ldrb	r2, [r3, r4]
 8003a88:	f1bb 0f00 	cmp.w	fp, #0
 8003a8c:	d036      	beq.n	8003afc <_strtod_l+0x244>
 8003a8e:	9004      	str	r0, [sp, #16]
 8003a90:	465c      	mov	r4, fp
 8003a92:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003a96:	2b09      	cmp	r3, #9
 8003a98:	d912      	bls.n	8003ac0 <_strtod_l+0x208>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e7c1      	b.n	8003a22 <_strtod_l+0x16a>
 8003a9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	9219      	str	r2, [sp, #100]	; 0x64
 8003aa4:	785a      	ldrb	r2, [r3, #1]
 8003aa6:	3001      	adds	r0, #1
 8003aa8:	2a30      	cmp	r2, #48	; 0x30
 8003aaa:	d0f8      	beq.n	8003a9e <_strtod_l+0x1e6>
 8003aac:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	f200 84d5 	bhi.w	8004460 <_strtod_l+0xba8>
 8003ab6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003ab8:	9004      	str	r0, [sp, #16]
 8003aba:	2000      	movs	r0, #0
 8003abc:	9308      	str	r3, [sp, #32]
 8003abe:	4604      	mov	r4, r0
 8003ac0:	3a30      	subs	r2, #48	; 0x30
 8003ac2:	f100 0301 	add.w	r3, r0, #1
 8003ac6:	d013      	beq.n	8003af0 <_strtod_l+0x238>
 8003ac8:	9904      	ldr	r1, [sp, #16]
 8003aca:	4419      	add	r1, r3
 8003acc:	9104      	str	r1, [sp, #16]
 8003ace:	4623      	mov	r3, r4
 8003ad0:	1905      	adds	r5, r0, r4
 8003ad2:	210a      	movs	r1, #10
 8003ad4:	42ab      	cmp	r3, r5
 8003ad6:	d113      	bne.n	8003b00 <_strtod_l+0x248>
 8003ad8:	1823      	adds	r3, r4, r0
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	f104 0401 	add.w	r4, r4, #1
 8003ae0:	4404      	add	r4, r0
 8003ae2:	dc1b      	bgt.n	8003b1c <_strtod_l+0x264>
 8003ae4:	9906      	ldr	r1, [sp, #24]
 8003ae6:	230a      	movs	r3, #10
 8003ae8:	fb03 2301 	mla	r3, r3, r1, r2
 8003aec:	9306      	str	r3, [sp, #24]
 8003aee:	2300      	movs	r3, #0
 8003af0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003af2:	1c51      	adds	r1, r2, #1
 8003af4:	9119      	str	r1, [sp, #100]	; 0x64
 8003af6:	7852      	ldrb	r2, [r2, #1]
 8003af8:	4618      	mov	r0, r3
 8003afa:	e7ca      	b.n	8003a92 <_strtod_l+0x1da>
 8003afc:	4658      	mov	r0, fp
 8003afe:	e7d3      	b.n	8003aa8 <_strtod_l+0x1f0>
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	dc04      	bgt.n	8003b0e <_strtod_l+0x256>
 8003b04:	9f06      	ldr	r7, [sp, #24]
 8003b06:	434f      	muls	r7, r1
 8003b08:	9706      	str	r7, [sp, #24]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	e7e2      	b.n	8003ad4 <_strtod_l+0x21c>
 8003b0e:	1c5f      	adds	r7, r3, #1
 8003b10:	2f10      	cmp	r7, #16
 8003b12:	bfde      	ittt	le
 8003b14:	9f05      	ldrle	r7, [sp, #20]
 8003b16:	434f      	mulle	r7, r1
 8003b18:	9705      	strle	r7, [sp, #20]
 8003b1a:	e7f6      	b.n	8003b0a <_strtod_l+0x252>
 8003b1c:	2c10      	cmp	r4, #16
 8003b1e:	bfdf      	itttt	le
 8003b20:	9905      	ldrle	r1, [sp, #20]
 8003b22:	230a      	movle	r3, #10
 8003b24:	fb03 2301 	mlale	r3, r3, r1, r2
 8003b28:	9305      	strle	r3, [sp, #20]
 8003b2a:	e7e0      	b.n	8003aee <_strtod_l+0x236>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	9304      	str	r3, [sp, #16]
 8003b30:	2301      	movs	r3, #1
 8003b32:	e77b      	b.n	8003a2c <_strtod_l+0x174>
 8003b34:	2700      	movs	r7, #0
 8003b36:	1cb2      	adds	r2, r6, #2
 8003b38:	9219      	str	r2, [sp, #100]	; 0x64
 8003b3a:	78b2      	ldrb	r2, [r6, #2]
 8003b3c:	e784      	b.n	8003a48 <_strtod_l+0x190>
 8003b3e:	bf00      	nop
 8003b40:	08007708 	.word	0x08007708
 8003b44:	080074bc 	.word	0x080074bc
 8003b48:	7ff00000 	.word	0x7ff00000
 8003b4c:	2701      	movs	r7, #1
 8003b4e:	e7f2      	b.n	8003b36 <_strtod_l+0x27e>
 8003b50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003b52:	1c51      	adds	r1, r2, #1
 8003b54:	9119      	str	r1, [sp, #100]	; 0x64
 8003b56:	7852      	ldrb	r2, [r2, #1]
 8003b58:	2a30      	cmp	r2, #48	; 0x30
 8003b5a:	d0f9      	beq.n	8003b50 <_strtod_l+0x298>
 8003b5c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8003b60:	2908      	cmp	r1, #8
 8003b62:	f63f af77 	bhi.w	8003a54 <_strtod_l+0x19c>
 8003b66:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8003b6a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003b6c:	9209      	str	r2, [sp, #36]	; 0x24
 8003b6e:	f04f 0e0a 	mov.w	lr, #10
 8003b72:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003b74:	1c51      	adds	r1, r2, #1
 8003b76:	9119      	str	r1, [sp, #100]	; 0x64
 8003b78:	7852      	ldrb	r2, [r2, #1]
 8003b7a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8003b7e:	2d09      	cmp	r5, #9
 8003b80:	d935      	bls.n	8003bee <_strtod_l+0x336>
 8003b82:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003b84:	1b49      	subs	r1, r1, r5
 8003b86:	2908      	cmp	r1, #8
 8003b88:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8003b8c:	dc02      	bgt.n	8003b94 <_strtod_l+0x2dc>
 8003b8e:	4565      	cmp	r5, ip
 8003b90:	bfa8      	it	ge
 8003b92:	4665      	movge	r5, ip
 8003b94:	b107      	cbz	r7, 8003b98 <_strtod_l+0x2e0>
 8003b96:	426d      	negs	r5, r5
 8003b98:	2c00      	cmp	r4, #0
 8003b9a:	d14c      	bne.n	8003c36 <_strtod_l+0x37e>
 8003b9c:	9907      	ldr	r1, [sp, #28]
 8003b9e:	4301      	orrs	r1, r0
 8003ba0:	f47f aecb 	bne.w	800393a <_strtod_l+0x82>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f47f aee4 	bne.w	8003972 <_strtod_l+0xba>
 8003baa:	2a69      	cmp	r2, #105	; 0x69
 8003bac:	d026      	beq.n	8003bfc <_strtod_l+0x344>
 8003bae:	dc23      	bgt.n	8003bf8 <_strtod_l+0x340>
 8003bb0:	2a49      	cmp	r2, #73	; 0x49
 8003bb2:	d023      	beq.n	8003bfc <_strtod_l+0x344>
 8003bb4:	2a4e      	cmp	r2, #78	; 0x4e
 8003bb6:	f47f aedc 	bne.w	8003972 <_strtod_l+0xba>
 8003bba:	499d      	ldr	r1, [pc, #628]	; (8003e30 <_strtod_l+0x578>)
 8003bbc:	a819      	add	r0, sp, #100	; 0x64
 8003bbe:	f001 fe19 	bl	80057f4 <__match>
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	f43f aed5 	beq.w	8003972 <_strtod_l+0xba>
 8003bc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2b28      	cmp	r3, #40	; 0x28
 8003bce:	d12c      	bne.n	8003c2a <_strtod_l+0x372>
 8003bd0:	4998      	ldr	r1, [pc, #608]	; (8003e34 <_strtod_l+0x57c>)
 8003bd2:	aa1c      	add	r2, sp, #112	; 0x70
 8003bd4:	a819      	add	r0, sp, #100	; 0x64
 8003bd6:	f001 fe21 	bl	800581c <__hexnan>
 8003bda:	2805      	cmp	r0, #5
 8003bdc:	d125      	bne.n	8003c2a <_strtod_l+0x372>
 8003bde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003be0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8003be4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8003be8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8003bec:	e6a5      	b.n	800393a <_strtod_l+0x82>
 8003bee:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8003bf2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8003bf6:	e7bc      	b.n	8003b72 <_strtod_l+0x2ba>
 8003bf8:	2a6e      	cmp	r2, #110	; 0x6e
 8003bfa:	e7dc      	b.n	8003bb6 <_strtod_l+0x2fe>
 8003bfc:	498e      	ldr	r1, [pc, #568]	; (8003e38 <_strtod_l+0x580>)
 8003bfe:	a819      	add	r0, sp, #100	; 0x64
 8003c00:	f001 fdf8 	bl	80057f4 <__match>
 8003c04:	2800      	cmp	r0, #0
 8003c06:	f43f aeb4 	beq.w	8003972 <_strtod_l+0xba>
 8003c0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003c0c:	498b      	ldr	r1, [pc, #556]	; (8003e3c <_strtod_l+0x584>)
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	a819      	add	r0, sp, #100	; 0x64
 8003c12:	9319      	str	r3, [sp, #100]	; 0x64
 8003c14:	f001 fdee 	bl	80057f4 <__match>
 8003c18:	b910      	cbnz	r0, 8003c20 <_strtod_l+0x368>
 8003c1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	9319      	str	r3, [sp, #100]	; 0x64
 8003c20:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8003e40 <_strtod_l+0x588>
 8003c24:	f04f 0800 	mov.w	r8, #0
 8003c28:	e687      	b.n	800393a <_strtod_l+0x82>
 8003c2a:	4886      	ldr	r0, [pc, #536]	; (8003e44 <_strtod_l+0x58c>)
 8003c2c:	f002 fdc0 	bl	80067b0 <nan>
 8003c30:	4680      	mov	r8, r0
 8003c32:	4689      	mov	r9, r1
 8003c34:	e681      	b.n	800393a <_strtod_l+0x82>
 8003c36:	9b04      	ldr	r3, [sp, #16]
 8003c38:	9806      	ldr	r0, [sp, #24]
 8003c3a:	1aeb      	subs	r3, r5, r3
 8003c3c:	f1bb 0f00 	cmp.w	fp, #0
 8003c40:	bf08      	it	eq
 8003c42:	46a3      	moveq	fp, r4
 8003c44:	2c10      	cmp	r4, #16
 8003c46:	9307      	str	r3, [sp, #28]
 8003c48:	4626      	mov	r6, r4
 8003c4a:	bfa8      	it	ge
 8003c4c:	2610      	movge	r6, #16
 8003c4e:	f7fc fc61 	bl	8000514 <__aeabi_ui2d>
 8003c52:	2c09      	cmp	r4, #9
 8003c54:	4680      	mov	r8, r0
 8003c56:	4689      	mov	r9, r1
 8003c58:	dd13      	ble.n	8003c82 <_strtod_l+0x3ca>
 8003c5a:	4b7b      	ldr	r3, [pc, #492]	; (8003e48 <_strtod_l+0x590>)
 8003c5c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003c60:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003c64:	f7fc fcd0 	bl	8000608 <__aeabi_dmul>
 8003c68:	4680      	mov	r8, r0
 8003c6a:	9805      	ldr	r0, [sp, #20]
 8003c6c:	4689      	mov	r9, r1
 8003c6e:	f7fc fc51 	bl	8000514 <__aeabi_ui2d>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4640      	mov	r0, r8
 8003c78:	4649      	mov	r1, r9
 8003c7a:	f7fc fb0f 	bl	800029c <__adddf3>
 8003c7e:	4680      	mov	r8, r0
 8003c80:	4689      	mov	r9, r1
 8003c82:	2c0f      	cmp	r4, #15
 8003c84:	dc36      	bgt.n	8003cf4 <_strtod_l+0x43c>
 8003c86:	9b07      	ldr	r3, [sp, #28]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f43f ae56 	beq.w	800393a <_strtod_l+0x82>
 8003c8e:	dd22      	ble.n	8003cd6 <_strtod_l+0x41e>
 8003c90:	2b16      	cmp	r3, #22
 8003c92:	dc09      	bgt.n	8003ca8 <_strtod_l+0x3f0>
 8003c94:	496c      	ldr	r1, [pc, #432]	; (8003e48 <_strtod_l+0x590>)
 8003c96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003c9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c9e:	4642      	mov	r2, r8
 8003ca0:	464b      	mov	r3, r9
 8003ca2:	f7fc fcb1 	bl	8000608 <__aeabi_dmul>
 8003ca6:	e7c3      	b.n	8003c30 <_strtod_l+0x378>
 8003ca8:	9a07      	ldr	r2, [sp, #28]
 8003caa:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	db20      	blt.n	8003cf4 <_strtod_l+0x43c>
 8003cb2:	4d65      	ldr	r5, [pc, #404]	; (8003e48 <_strtod_l+0x590>)
 8003cb4:	f1c4 040f 	rsb	r4, r4, #15
 8003cb8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8003cbc:	4642      	mov	r2, r8
 8003cbe:	464b      	mov	r3, r9
 8003cc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cc4:	f7fc fca0 	bl	8000608 <__aeabi_dmul>
 8003cc8:	9b07      	ldr	r3, [sp, #28]
 8003cca:	1b1c      	subs	r4, r3, r4
 8003ccc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8003cd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003cd4:	e7e5      	b.n	8003ca2 <_strtod_l+0x3ea>
 8003cd6:	9b07      	ldr	r3, [sp, #28]
 8003cd8:	3316      	adds	r3, #22
 8003cda:	db0b      	blt.n	8003cf4 <_strtod_l+0x43c>
 8003cdc:	9b04      	ldr	r3, [sp, #16]
 8003cde:	1b5d      	subs	r5, r3, r5
 8003ce0:	4b59      	ldr	r3, [pc, #356]	; (8003e48 <_strtod_l+0x590>)
 8003ce2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003ce6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003cea:	4640      	mov	r0, r8
 8003cec:	4649      	mov	r1, r9
 8003cee:	f7fc fdb5 	bl	800085c <__aeabi_ddiv>
 8003cf2:	e79d      	b.n	8003c30 <_strtod_l+0x378>
 8003cf4:	9b07      	ldr	r3, [sp, #28]
 8003cf6:	1ba6      	subs	r6, r4, r6
 8003cf8:	441e      	add	r6, r3
 8003cfa:	2e00      	cmp	r6, #0
 8003cfc:	dd74      	ble.n	8003de8 <_strtod_l+0x530>
 8003cfe:	f016 030f 	ands.w	r3, r6, #15
 8003d02:	d00a      	beq.n	8003d1a <_strtod_l+0x462>
 8003d04:	4950      	ldr	r1, [pc, #320]	; (8003e48 <_strtod_l+0x590>)
 8003d06:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003d0a:	4642      	mov	r2, r8
 8003d0c:	464b      	mov	r3, r9
 8003d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d12:	f7fc fc79 	bl	8000608 <__aeabi_dmul>
 8003d16:	4680      	mov	r8, r0
 8003d18:	4689      	mov	r9, r1
 8003d1a:	f036 060f 	bics.w	r6, r6, #15
 8003d1e:	d052      	beq.n	8003dc6 <_strtod_l+0x50e>
 8003d20:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8003d24:	dd27      	ble.n	8003d76 <_strtod_l+0x4be>
 8003d26:	f04f 0b00 	mov.w	fp, #0
 8003d2a:	f8cd b010 	str.w	fp, [sp, #16]
 8003d2e:	f8cd b020 	str.w	fp, [sp, #32]
 8003d32:	f8cd b018 	str.w	fp, [sp, #24]
 8003d36:	2322      	movs	r3, #34	; 0x22
 8003d38:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8003e40 <_strtod_l+0x588>
 8003d3c:	f8ca 3000 	str.w	r3, [sl]
 8003d40:	f04f 0800 	mov.w	r8, #0
 8003d44:	9b08      	ldr	r3, [sp, #32]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f43f adf7 	beq.w	800393a <_strtod_l+0x82>
 8003d4c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003d4e:	4650      	mov	r0, sl
 8003d50:	f001 fe6c 	bl	8005a2c <_Bfree>
 8003d54:	9906      	ldr	r1, [sp, #24]
 8003d56:	4650      	mov	r0, sl
 8003d58:	f001 fe68 	bl	8005a2c <_Bfree>
 8003d5c:	9904      	ldr	r1, [sp, #16]
 8003d5e:	4650      	mov	r0, sl
 8003d60:	f001 fe64 	bl	8005a2c <_Bfree>
 8003d64:	9908      	ldr	r1, [sp, #32]
 8003d66:	4650      	mov	r0, sl
 8003d68:	f001 fe60 	bl	8005a2c <_Bfree>
 8003d6c:	4659      	mov	r1, fp
 8003d6e:	4650      	mov	r0, sl
 8003d70:	f001 fe5c 	bl	8005a2c <_Bfree>
 8003d74:	e5e1      	b.n	800393a <_strtod_l+0x82>
 8003d76:	4b35      	ldr	r3, [pc, #212]	; (8003e4c <_strtod_l+0x594>)
 8003d78:	9305      	str	r3, [sp, #20]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	1136      	asrs	r6, r6, #4
 8003d7e:	4640      	mov	r0, r8
 8003d80:	4649      	mov	r1, r9
 8003d82:	461f      	mov	r7, r3
 8003d84:	2e01      	cmp	r6, #1
 8003d86:	dc21      	bgt.n	8003dcc <_strtod_l+0x514>
 8003d88:	b10b      	cbz	r3, 8003d8e <_strtod_l+0x4d6>
 8003d8a:	4680      	mov	r8, r0
 8003d8c:	4689      	mov	r9, r1
 8003d8e:	4b2f      	ldr	r3, [pc, #188]	; (8003e4c <_strtod_l+0x594>)
 8003d90:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8003d94:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003d98:	4642      	mov	r2, r8
 8003d9a:	464b      	mov	r3, r9
 8003d9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003da0:	f7fc fc32 	bl	8000608 <__aeabi_dmul>
 8003da4:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <_strtod_l+0x588>)
 8003da6:	460a      	mov	r2, r1
 8003da8:	400b      	ands	r3, r1
 8003daa:	4929      	ldr	r1, [pc, #164]	; (8003e50 <_strtod_l+0x598>)
 8003dac:	428b      	cmp	r3, r1
 8003dae:	4680      	mov	r8, r0
 8003db0:	d8b9      	bhi.n	8003d26 <_strtod_l+0x46e>
 8003db2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003db6:	428b      	cmp	r3, r1
 8003db8:	bf86      	itte	hi
 8003dba:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 8003e54 <_strtod_l+0x59c>
 8003dbe:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8003dc2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	9305      	str	r3, [sp, #20]
 8003dca:	e07f      	b.n	8003ecc <_strtod_l+0x614>
 8003dcc:	07f2      	lsls	r2, r6, #31
 8003dce:	d505      	bpl.n	8003ddc <_strtod_l+0x524>
 8003dd0:	9b05      	ldr	r3, [sp, #20]
 8003dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd6:	f7fc fc17 	bl	8000608 <__aeabi_dmul>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	9a05      	ldr	r2, [sp, #20]
 8003dde:	3208      	adds	r2, #8
 8003de0:	3701      	adds	r7, #1
 8003de2:	1076      	asrs	r6, r6, #1
 8003de4:	9205      	str	r2, [sp, #20]
 8003de6:	e7cd      	b.n	8003d84 <_strtod_l+0x4cc>
 8003de8:	d0ed      	beq.n	8003dc6 <_strtod_l+0x50e>
 8003dea:	4276      	negs	r6, r6
 8003dec:	f016 020f 	ands.w	r2, r6, #15
 8003df0:	d00a      	beq.n	8003e08 <_strtod_l+0x550>
 8003df2:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <_strtod_l+0x590>)
 8003df4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003df8:	4640      	mov	r0, r8
 8003dfa:	4649      	mov	r1, r9
 8003dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e00:	f7fc fd2c 	bl	800085c <__aeabi_ddiv>
 8003e04:	4680      	mov	r8, r0
 8003e06:	4689      	mov	r9, r1
 8003e08:	1136      	asrs	r6, r6, #4
 8003e0a:	d0dc      	beq.n	8003dc6 <_strtod_l+0x50e>
 8003e0c:	2e1f      	cmp	r6, #31
 8003e0e:	dd23      	ble.n	8003e58 <_strtod_l+0x5a0>
 8003e10:	f04f 0b00 	mov.w	fp, #0
 8003e14:	f8cd b010 	str.w	fp, [sp, #16]
 8003e18:	f8cd b020 	str.w	fp, [sp, #32]
 8003e1c:	f8cd b018 	str.w	fp, [sp, #24]
 8003e20:	2322      	movs	r3, #34	; 0x22
 8003e22:	f04f 0800 	mov.w	r8, #0
 8003e26:	f04f 0900 	mov.w	r9, #0
 8003e2a:	f8ca 3000 	str.w	r3, [sl]
 8003e2e:	e789      	b.n	8003d44 <_strtod_l+0x48c>
 8003e30:	0800748d 	.word	0x0800748d
 8003e34:	080074d0 	.word	0x080074d0
 8003e38:	08007485 	.word	0x08007485
 8003e3c:	08007614 	.word	0x08007614
 8003e40:	7ff00000 	.word	0x7ff00000
 8003e44:	080078c0 	.word	0x080078c0
 8003e48:	080077a0 	.word	0x080077a0
 8003e4c:	08007778 	.word	0x08007778
 8003e50:	7ca00000 	.word	0x7ca00000
 8003e54:	7fefffff 	.word	0x7fefffff
 8003e58:	f016 0310 	ands.w	r3, r6, #16
 8003e5c:	bf18      	it	ne
 8003e5e:	236a      	movne	r3, #106	; 0x6a
 8003e60:	4fb1      	ldr	r7, [pc, #708]	; (8004128 <_strtod_l+0x870>)
 8003e62:	9305      	str	r3, [sp, #20]
 8003e64:	4640      	mov	r0, r8
 8003e66:	4649      	mov	r1, r9
 8003e68:	2300      	movs	r3, #0
 8003e6a:	07f2      	lsls	r2, r6, #31
 8003e6c:	d504      	bpl.n	8003e78 <_strtod_l+0x5c0>
 8003e6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e72:	f7fc fbc9 	bl	8000608 <__aeabi_dmul>
 8003e76:	2301      	movs	r3, #1
 8003e78:	1076      	asrs	r6, r6, #1
 8003e7a:	f107 0708 	add.w	r7, r7, #8
 8003e7e:	d1f4      	bne.n	8003e6a <_strtod_l+0x5b2>
 8003e80:	b10b      	cbz	r3, 8003e86 <_strtod_l+0x5ce>
 8003e82:	4680      	mov	r8, r0
 8003e84:	4689      	mov	r9, r1
 8003e86:	9b05      	ldr	r3, [sp, #20]
 8003e88:	b1c3      	cbz	r3, 8003ebc <_strtod_l+0x604>
 8003e8a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8003e8e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	4649      	mov	r1, r9
 8003e96:	dd11      	ble.n	8003ebc <_strtod_l+0x604>
 8003e98:	2b1f      	cmp	r3, #31
 8003e9a:	f340 8124 	ble.w	80040e6 <_strtod_l+0x82e>
 8003e9e:	2b34      	cmp	r3, #52	; 0x34
 8003ea0:	bfde      	ittt	le
 8003ea2:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8003ea6:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8003eaa:	fa03 f202 	lslle.w	r2, r3, r2
 8003eae:	f04f 0800 	mov.w	r8, #0
 8003eb2:	bfcc      	ite	gt
 8003eb4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8003eb8:	ea02 0901 	andle.w	r9, r2, r1
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	4640      	mov	r0, r8
 8003ec2:	4649      	mov	r1, r9
 8003ec4:	f7fc fe08 	bl	8000ad8 <__aeabi_dcmpeq>
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	d1a1      	bne.n	8003e10 <_strtod_l+0x558>
 8003ecc:	9b06      	ldr	r3, [sp, #24]
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	9908      	ldr	r1, [sp, #32]
 8003ed2:	4623      	mov	r3, r4
 8003ed4:	465a      	mov	r2, fp
 8003ed6:	4650      	mov	r0, sl
 8003ed8:	f001 fe10 	bl	8005afc <__s2b>
 8003edc:	9008      	str	r0, [sp, #32]
 8003ede:	2800      	cmp	r0, #0
 8003ee0:	f43f af21 	beq.w	8003d26 <_strtod_l+0x46e>
 8003ee4:	9b04      	ldr	r3, [sp, #16]
 8003ee6:	1b5d      	subs	r5, r3, r5
 8003ee8:	9b07      	ldr	r3, [sp, #28]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	bfb4      	ite	lt
 8003eee:	462b      	movlt	r3, r5
 8003ef0:	2300      	movge	r3, #0
 8003ef2:	930e      	str	r3, [sp, #56]	; 0x38
 8003ef4:	9b07      	ldr	r3, [sp, #28]
 8003ef6:	f04f 0b00 	mov.w	fp, #0
 8003efa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003efe:	9314      	str	r3, [sp, #80]	; 0x50
 8003f00:	f8cd b010 	str.w	fp, [sp, #16]
 8003f04:	9b08      	ldr	r3, [sp, #32]
 8003f06:	4650      	mov	r0, sl
 8003f08:	6859      	ldr	r1, [r3, #4]
 8003f0a:	f001 fd4f 	bl	80059ac <_Balloc>
 8003f0e:	9006      	str	r0, [sp, #24]
 8003f10:	2800      	cmp	r0, #0
 8003f12:	f43f af10 	beq.w	8003d36 <_strtod_l+0x47e>
 8003f16:	9b08      	ldr	r3, [sp, #32]
 8003f18:	691a      	ldr	r2, [r3, #16]
 8003f1a:	3202      	adds	r2, #2
 8003f1c:	f103 010c 	add.w	r1, r3, #12
 8003f20:	0092      	lsls	r2, r2, #2
 8003f22:	300c      	adds	r0, #12
 8003f24:	f001 fd34 	bl	8005990 <memcpy>
 8003f28:	ab1c      	add	r3, sp, #112	; 0x70
 8003f2a:	9301      	str	r3, [sp, #4]
 8003f2c:	ab1b      	add	r3, sp, #108	; 0x6c
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	4642      	mov	r2, r8
 8003f32:	464b      	mov	r3, r9
 8003f34:	4650      	mov	r0, sl
 8003f36:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8003f3a:	f002 f91d 	bl	8006178 <__d2b>
 8003f3e:	901a      	str	r0, [sp, #104]	; 0x68
 8003f40:	2800      	cmp	r0, #0
 8003f42:	f43f aef8 	beq.w	8003d36 <_strtod_l+0x47e>
 8003f46:	2101      	movs	r1, #1
 8003f48:	4650      	mov	r0, sl
 8003f4a:	f001 fe6f 	bl	8005c2c <__i2b>
 8003f4e:	9004      	str	r0, [sp, #16]
 8003f50:	4603      	mov	r3, r0
 8003f52:	2800      	cmp	r0, #0
 8003f54:	f43f aeef 	beq.w	8003d36 <_strtod_l+0x47e>
 8003f58:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003f5a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003f5c:	2d00      	cmp	r5, #0
 8003f5e:	bfab      	itete	ge
 8003f60:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8003f62:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8003f64:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8003f66:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8003f68:	bfac      	ite	ge
 8003f6a:	18ee      	addge	r6, r5, r3
 8003f6c:	1b5c      	sublt	r4, r3, r5
 8003f6e:	9b05      	ldr	r3, [sp, #20]
 8003f70:	1aed      	subs	r5, r5, r3
 8003f72:	4415      	add	r5, r2
 8003f74:	4b6d      	ldr	r3, [pc, #436]	; (800412c <_strtod_l+0x874>)
 8003f76:	3d01      	subs	r5, #1
 8003f78:	429d      	cmp	r5, r3
 8003f7a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003f7e:	f280 80c4 	bge.w	800410a <_strtod_l+0x852>
 8003f82:	1b5b      	subs	r3, r3, r5
 8003f84:	2b1f      	cmp	r3, #31
 8003f86:	eba2 0203 	sub.w	r2, r2, r3
 8003f8a:	f04f 0701 	mov.w	r7, #1
 8003f8e:	f300 80b1 	bgt.w	80040f4 <_strtod_l+0x83c>
 8003f92:	fa07 f303 	lsl.w	r3, r7, r3
 8003f96:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f98:	2500      	movs	r5, #0
 8003f9a:	18b7      	adds	r7, r6, r2
 8003f9c:	9b05      	ldr	r3, [sp, #20]
 8003f9e:	42be      	cmp	r6, r7
 8003fa0:	4414      	add	r4, r2
 8003fa2:	441c      	add	r4, r3
 8003fa4:	4633      	mov	r3, r6
 8003fa6:	bfa8      	it	ge
 8003fa8:	463b      	movge	r3, r7
 8003faa:	42a3      	cmp	r3, r4
 8003fac:	bfa8      	it	ge
 8003fae:	4623      	movge	r3, r4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	bfc2      	ittt	gt
 8003fb4:	1aff      	subgt	r7, r7, r3
 8003fb6:	1ae4      	subgt	r4, r4, r3
 8003fb8:	1af6      	subgt	r6, r6, r3
 8003fba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	dd17      	ble.n	8003ff0 <_strtod_l+0x738>
 8003fc0:	9904      	ldr	r1, [sp, #16]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	4650      	mov	r0, sl
 8003fc6:	f001 feef 	bl	8005da8 <__pow5mult>
 8003fca:	9004      	str	r0, [sp, #16]
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	f43f aeb2 	beq.w	8003d36 <_strtod_l+0x47e>
 8003fd2:	4601      	mov	r1, r0
 8003fd4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003fd6:	4650      	mov	r0, sl
 8003fd8:	f001 fe3e 	bl	8005c58 <__multiply>
 8003fdc:	9009      	str	r0, [sp, #36]	; 0x24
 8003fde:	2800      	cmp	r0, #0
 8003fe0:	f43f aea9 	beq.w	8003d36 <_strtod_l+0x47e>
 8003fe4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003fe6:	4650      	mov	r0, sl
 8003fe8:	f001 fd20 	bl	8005a2c <_Bfree>
 8003fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fee:	931a      	str	r3, [sp, #104]	; 0x68
 8003ff0:	2f00      	cmp	r7, #0
 8003ff2:	f300 808e 	bgt.w	8004112 <_strtod_l+0x85a>
 8003ff6:	9b07      	ldr	r3, [sp, #28]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	dd08      	ble.n	800400e <_strtod_l+0x756>
 8003ffc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003ffe:	9906      	ldr	r1, [sp, #24]
 8004000:	4650      	mov	r0, sl
 8004002:	f001 fed1 	bl	8005da8 <__pow5mult>
 8004006:	9006      	str	r0, [sp, #24]
 8004008:	2800      	cmp	r0, #0
 800400a:	f43f ae94 	beq.w	8003d36 <_strtod_l+0x47e>
 800400e:	2c00      	cmp	r4, #0
 8004010:	dd08      	ble.n	8004024 <_strtod_l+0x76c>
 8004012:	9906      	ldr	r1, [sp, #24]
 8004014:	4622      	mov	r2, r4
 8004016:	4650      	mov	r0, sl
 8004018:	f001 ff20 	bl	8005e5c <__lshift>
 800401c:	9006      	str	r0, [sp, #24]
 800401e:	2800      	cmp	r0, #0
 8004020:	f43f ae89 	beq.w	8003d36 <_strtod_l+0x47e>
 8004024:	2e00      	cmp	r6, #0
 8004026:	dd08      	ble.n	800403a <_strtod_l+0x782>
 8004028:	9904      	ldr	r1, [sp, #16]
 800402a:	4632      	mov	r2, r6
 800402c:	4650      	mov	r0, sl
 800402e:	f001 ff15 	bl	8005e5c <__lshift>
 8004032:	9004      	str	r0, [sp, #16]
 8004034:	2800      	cmp	r0, #0
 8004036:	f43f ae7e 	beq.w	8003d36 <_strtod_l+0x47e>
 800403a:	9a06      	ldr	r2, [sp, #24]
 800403c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800403e:	4650      	mov	r0, sl
 8004040:	f001 ff98 	bl	8005f74 <__mdiff>
 8004044:	4683      	mov	fp, r0
 8004046:	2800      	cmp	r0, #0
 8004048:	f43f ae75 	beq.w	8003d36 <_strtod_l+0x47e>
 800404c:	2400      	movs	r4, #0
 800404e:	68c3      	ldr	r3, [r0, #12]
 8004050:	9904      	ldr	r1, [sp, #16]
 8004052:	60c4      	str	r4, [r0, #12]
 8004054:	930b      	str	r3, [sp, #44]	; 0x2c
 8004056:	f001 ff71 	bl	8005f3c <__mcmp>
 800405a:	42a0      	cmp	r0, r4
 800405c:	da6c      	bge.n	8004138 <_strtod_l+0x880>
 800405e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004060:	ea53 0308 	orrs.w	r3, r3, r8
 8004064:	f040 8092 	bne.w	800418c <_strtod_l+0x8d4>
 8004068:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800406c:	2b00      	cmp	r3, #0
 800406e:	f040 808d 	bne.w	800418c <_strtod_l+0x8d4>
 8004072:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004076:	0d1b      	lsrs	r3, r3, #20
 8004078:	051b      	lsls	r3, r3, #20
 800407a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800407e:	f240 8085 	bls.w	800418c <_strtod_l+0x8d4>
 8004082:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004086:	b91b      	cbnz	r3, 8004090 <_strtod_l+0x7d8>
 8004088:	f8db 3010 	ldr.w	r3, [fp, #16]
 800408c:	2b01      	cmp	r3, #1
 800408e:	dd7d      	ble.n	800418c <_strtod_l+0x8d4>
 8004090:	4659      	mov	r1, fp
 8004092:	2201      	movs	r2, #1
 8004094:	4650      	mov	r0, sl
 8004096:	f001 fee1 	bl	8005e5c <__lshift>
 800409a:	9904      	ldr	r1, [sp, #16]
 800409c:	4683      	mov	fp, r0
 800409e:	f001 ff4d 	bl	8005f3c <__mcmp>
 80040a2:	2800      	cmp	r0, #0
 80040a4:	dd72      	ble.n	800418c <_strtod_l+0x8d4>
 80040a6:	9905      	ldr	r1, [sp, #20]
 80040a8:	4a21      	ldr	r2, [pc, #132]	; (8004130 <_strtod_l+0x878>)
 80040aa:	464b      	mov	r3, r9
 80040ac:	2900      	cmp	r1, #0
 80040ae:	f000 808d 	beq.w	80041cc <_strtod_l+0x914>
 80040b2:	ea02 0109 	and.w	r1, r2, r9
 80040b6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80040ba:	f300 8087 	bgt.w	80041cc <_strtod_l+0x914>
 80040be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80040c2:	f77f aead 	ble.w	8003e20 <_strtod_l+0x568>
 80040c6:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <_strtod_l+0x87c>)
 80040c8:	4640      	mov	r0, r8
 80040ca:	4649      	mov	r1, r9
 80040cc:	2200      	movs	r2, #0
 80040ce:	f7fc fa9b 	bl	8000608 <__aeabi_dmul>
 80040d2:	460b      	mov	r3, r1
 80040d4:	4303      	orrs	r3, r0
 80040d6:	bf08      	it	eq
 80040d8:	2322      	moveq	r3, #34	; 0x22
 80040da:	4680      	mov	r8, r0
 80040dc:	4689      	mov	r9, r1
 80040de:	bf08      	it	eq
 80040e0:	f8ca 3000 	streq.w	r3, [sl]
 80040e4:	e632      	b.n	8003d4c <_strtod_l+0x494>
 80040e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	ea03 0808 	and.w	r8, r3, r8
 80040f2:	e6e3      	b.n	8003ebc <_strtod_l+0x604>
 80040f4:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80040f8:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80040fc:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004100:	35e2      	adds	r5, #226	; 0xe2
 8004102:	fa07 f505 	lsl.w	r5, r7, r5
 8004106:	970f      	str	r7, [sp, #60]	; 0x3c
 8004108:	e747      	b.n	8003f9a <_strtod_l+0x6e2>
 800410a:	2301      	movs	r3, #1
 800410c:	2500      	movs	r5, #0
 800410e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004110:	e743      	b.n	8003f9a <_strtod_l+0x6e2>
 8004112:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004114:	463a      	mov	r2, r7
 8004116:	4650      	mov	r0, sl
 8004118:	f001 fea0 	bl	8005e5c <__lshift>
 800411c:	901a      	str	r0, [sp, #104]	; 0x68
 800411e:	2800      	cmp	r0, #0
 8004120:	f47f af69 	bne.w	8003ff6 <_strtod_l+0x73e>
 8004124:	e607      	b.n	8003d36 <_strtod_l+0x47e>
 8004126:	bf00      	nop
 8004128:	080074e8 	.word	0x080074e8
 800412c:	fffffc02 	.word	0xfffffc02
 8004130:	7ff00000 	.word	0x7ff00000
 8004134:	39500000 	.word	0x39500000
 8004138:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800413c:	d165      	bne.n	800420a <_strtod_l+0x952>
 800413e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004140:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004144:	b35a      	cbz	r2, 800419e <_strtod_l+0x8e6>
 8004146:	4a9a      	ldr	r2, [pc, #616]	; (80043b0 <_strtod_l+0xaf8>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d12b      	bne.n	80041a4 <_strtod_l+0x8ec>
 800414c:	9b05      	ldr	r3, [sp, #20]
 800414e:	4641      	mov	r1, r8
 8004150:	b303      	cbz	r3, 8004194 <_strtod_l+0x8dc>
 8004152:	4b98      	ldr	r3, [pc, #608]	; (80043b4 <_strtod_l+0xafc>)
 8004154:	464a      	mov	r2, r9
 8004156:	4013      	ands	r3, r2
 8004158:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800415c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004160:	d81b      	bhi.n	800419a <_strtod_l+0x8e2>
 8004162:	0d1b      	lsrs	r3, r3, #20
 8004164:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	4299      	cmp	r1, r3
 800416e:	d119      	bne.n	80041a4 <_strtod_l+0x8ec>
 8004170:	4b91      	ldr	r3, [pc, #580]	; (80043b8 <_strtod_l+0xb00>)
 8004172:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004174:	429a      	cmp	r2, r3
 8004176:	d102      	bne.n	800417e <_strtod_l+0x8c6>
 8004178:	3101      	adds	r1, #1
 800417a:	f43f addc 	beq.w	8003d36 <_strtod_l+0x47e>
 800417e:	4b8d      	ldr	r3, [pc, #564]	; (80043b4 <_strtod_l+0xafc>)
 8004180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004182:	401a      	ands	r2, r3
 8004184:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004188:	f04f 0800 	mov.w	r8, #0
 800418c:	9b05      	ldr	r3, [sp, #20]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d199      	bne.n	80040c6 <_strtod_l+0x80e>
 8004192:	e5db      	b.n	8003d4c <_strtod_l+0x494>
 8004194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004198:	e7e8      	b.n	800416c <_strtod_l+0x8b4>
 800419a:	4613      	mov	r3, r2
 800419c:	e7e6      	b.n	800416c <_strtod_l+0x8b4>
 800419e:	ea53 0308 	orrs.w	r3, r3, r8
 80041a2:	d080      	beq.n	80040a6 <_strtod_l+0x7ee>
 80041a4:	b1e5      	cbz	r5, 80041e0 <_strtod_l+0x928>
 80041a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041a8:	421d      	tst	r5, r3
 80041aa:	d0ef      	beq.n	800418c <_strtod_l+0x8d4>
 80041ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041ae:	9a05      	ldr	r2, [sp, #20]
 80041b0:	4640      	mov	r0, r8
 80041b2:	4649      	mov	r1, r9
 80041b4:	b1c3      	cbz	r3, 80041e8 <_strtod_l+0x930>
 80041b6:	f7ff fb5b 	bl	8003870 <sulp>
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80041c2:	f7fc f86b 	bl	800029c <__adddf3>
 80041c6:	4680      	mov	r8, r0
 80041c8:	4689      	mov	r9, r1
 80041ca:	e7df      	b.n	800418c <_strtod_l+0x8d4>
 80041cc:	4013      	ands	r3, r2
 80041ce:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80041d2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80041d6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80041da:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80041de:	e7d5      	b.n	800418c <_strtod_l+0x8d4>
 80041e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041e2:	ea13 0f08 	tst.w	r3, r8
 80041e6:	e7e0      	b.n	80041aa <_strtod_l+0x8f2>
 80041e8:	f7ff fb42 	bl	8003870 <sulp>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80041f4:	f7fc f850 	bl	8000298 <__aeabi_dsub>
 80041f8:	2200      	movs	r2, #0
 80041fa:	2300      	movs	r3, #0
 80041fc:	4680      	mov	r8, r0
 80041fe:	4689      	mov	r9, r1
 8004200:	f7fc fc6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004204:	2800      	cmp	r0, #0
 8004206:	d0c1      	beq.n	800418c <_strtod_l+0x8d4>
 8004208:	e60a      	b.n	8003e20 <_strtod_l+0x568>
 800420a:	9904      	ldr	r1, [sp, #16]
 800420c:	4658      	mov	r0, fp
 800420e:	f002 f80f 	bl	8006230 <__ratio>
 8004212:	2200      	movs	r2, #0
 8004214:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004218:	4606      	mov	r6, r0
 800421a:	460f      	mov	r7, r1
 800421c:	f7fc fc70 	bl	8000b00 <__aeabi_dcmple>
 8004220:	2800      	cmp	r0, #0
 8004222:	d070      	beq.n	8004306 <_strtod_l+0xa4e>
 8004224:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004226:	2b00      	cmp	r3, #0
 8004228:	d042      	beq.n	80042b0 <_strtod_l+0x9f8>
 800422a:	4f64      	ldr	r7, [pc, #400]	; (80043bc <_strtod_l+0xb04>)
 800422c:	2600      	movs	r6, #0
 800422e:	4d63      	ldr	r5, [pc, #396]	; (80043bc <_strtod_l+0xb04>)
 8004230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004232:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004236:	0d1b      	lsrs	r3, r3, #20
 8004238:	051b      	lsls	r3, r3, #20
 800423a:	930f      	str	r3, [sp, #60]	; 0x3c
 800423c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800423e:	4b60      	ldr	r3, [pc, #384]	; (80043c0 <_strtod_l+0xb08>)
 8004240:	429a      	cmp	r2, r3
 8004242:	f040 80c5 	bne.w	80043d0 <_strtod_l+0xb18>
 8004246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004248:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800424c:	4640      	mov	r0, r8
 800424e:	4649      	mov	r1, r9
 8004250:	f001 ff18 	bl	8006084 <__ulp>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	4630      	mov	r0, r6
 800425a:	4639      	mov	r1, r7
 800425c:	f7fc f9d4 	bl	8000608 <__aeabi_dmul>
 8004260:	4642      	mov	r2, r8
 8004262:	464b      	mov	r3, r9
 8004264:	f7fc f81a 	bl	800029c <__adddf3>
 8004268:	460b      	mov	r3, r1
 800426a:	4952      	ldr	r1, [pc, #328]	; (80043b4 <_strtod_l+0xafc>)
 800426c:	4a55      	ldr	r2, [pc, #340]	; (80043c4 <_strtod_l+0xb0c>)
 800426e:	4019      	ands	r1, r3
 8004270:	4291      	cmp	r1, r2
 8004272:	4680      	mov	r8, r0
 8004274:	d95d      	bls.n	8004332 <_strtod_l+0xa7a>
 8004276:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004278:	4b4f      	ldr	r3, [pc, #316]	; (80043b8 <_strtod_l+0xb00>)
 800427a:	429a      	cmp	r2, r3
 800427c:	d103      	bne.n	8004286 <_strtod_l+0x9ce>
 800427e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004280:	3301      	adds	r3, #1
 8004282:	f43f ad58 	beq.w	8003d36 <_strtod_l+0x47e>
 8004286:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80043b8 <_strtod_l+0xb00>
 800428a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800428e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004290:	4650      	mov	r0, sl
 8004292:	f001 fbcb 	bl	8005a2c <_Bfree>
 8004296:	9906      	ldr	r1, [sp, #24]
 8004298:	4650      	mov	r0, sl
 800429a:	f001 fbc7 	bl	8005a2c <_Bfree>
 800429e:	9904      	ldr	r1, [sp, #16]
 80042a0:	4650      	mov	r0, sl
 80042a2:	f001 fbc3 	bl	8005a2c <_Bfree>
 80042a6:	4659      	mov	r1, fp
 80042a8:	4650      	mov	r0, sl
 80042aa:	f001 fbbf 	bl	8005a2c <_Bfree>
 80042ae:	e629      	b.n	8003f04 <_strtod_l+0x64c>
 80042b0:	f1b8 0f00 	cmp.w	r8, #0
 80042b4:	d119      	bne.n	80042ea <_strtod_l+0xa32>
 80042b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042bc:	b9e3      	cbnz	r3, 80042f8 <_strtod_l+0xa40>
 80042be:	4b3f      	ldr	r3, [pc, #252]	; (80043bc <_strtod_l+0xb04>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	4630      	mov	r0, r6
 80042c4:	4639      	mov	r1, r7
 80042c6:	f7fc fc11 	bl	8000aec <__aeabi_dcmplt>
 80042ca:	b9c8      	cbnz	r0, 8004300 <_strtod_l+0xa48>
 80042cc:	4b3e      	ldr	r3, [pc, #248]	; (80043c8 <_strtod_l+0xb10>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	4630      	mov	r0, r6
 80042d2:	4639      	mov	r1, r7
 80042d4:	f7fc f998 	bl	8000608 <__aeabi_dmul>
 80042d8:	4604      	mov	r4, r0
 80042da:	460d      	mov	r5, r1
 80042dc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80042e0:	9416      	str	r4, [sp, #88]	; 0x58
 80042e2:	9317      	str	r3, [sp, #92]	; 0x5c
 80042e4:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80042e8:	e7a2      	b.n	8004230 <_strtod_l+0x978>
 80042ea:	f1b8 0f01 	cmp.w	r8, #1
 80042ee:	d103      	bne.n	80042f8 <_strtod_l+0xa40>
 80042f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f43f ad94 	beq.w	8003e20 <_strtod_l+0x568>
 80042f8:	4f34      	ldr	r7, [pc, #208]	; (80043cc <_strtod_l+0xb14>)
 80042fa:	2600      	movs	r6, #0
 80042fc:	2400      	movs	r4, #0
 80042fe:	e796      	b.n	800422e <_strtod_l+0x976>
 8004300:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004302:	4d31      	ldr	r5, [pc, #196]	; (80043c8 <_strtod_l+0xb10>)
 8004304:	e7ea      	b.n	80042dc <_strtod_l+0xa24>
 8004306:	4b30      	ldr	r3, [pc, #192]	; (80043c8 <_strtod_l+0xb10>)
 8004308:	2200      	movs	r2, #0
 800430a:	4630      	mov	r0, r6
 800430c:	4639      	mov	r1, r7
 800430e:	f7fc f97b 	bl	8000608 <__aeabi_dmul>
 8004312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004314:	4604      	mov	r4, r0
 8004316:	460d      	mov	r5, r1
 8004318:	b933      	cbnz	r3, 8004328 <_strtod_l+0xa70>
 800431a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800431e:	9010      	str	r0, [sp, #64]	; 0x40
 8004320:	9311      	str	r3, [sp, #68]	; 0x44
 8004322:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004326:	e783      	b.n	8004230 <_strtod_l+0x978>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004330:	e7f7      	b.n	8004322 <_strtod_l+0xa6a>
 8004332:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004336:	9b05      	ldr	r3, [sp, #20]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1a8      	bne.n	800428e <_strtod_l+0x9d6>
 800433c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004340:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004342:	0d1b      	lsrs	r3, r3, #20
 8004344:	051b      	lsls	r3, r3, #20
 8004346:	429a      	cmp	r2, r3
 8004348:	d1a1      	bne.n	800428e <_strtod_l+0x9d6>
 800434a:	4620      	mov	r0, r4
 800434c:	4629      	mov	r1, r5
 800434e:	f7fc fca3 	bl	8000c98 <__aeabi_d2lz>
 8004352:	f7fc f92b 	bl	80005ac <__aeabi_l2d>
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	4620      	mov	r0, r4
 800435c:	4629      	mov	r1, r5
 800435e:	f7fb ff9b 	bl	8000298 <__aeabi_dsub>
 8004362:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004364:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004368:	ea43 0308 	orr.w	r3, r3, r8
 800436c:	4313      	orrs	r3, r2
 800436e:	4604      	mov	r4, r0
 8004370:	460d      	mov	r5, r1
 8004372:	d068      	beq.n	8004446 <_strtod_l+0xb8e>
 8004374:	a30a      	add	r3, pc, #40	; (adr r3, 80043a0 <_strtod_l+0xae8>)
 8004376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437a:	f7fc fbb7 	bl	8000aec <__aeabi_dcmplt>
 800437e:	2800      	cmp	r0, #0
 8004380:	f47f ace4 	bne.w	8003d4c <_strtod_l+0x494>
 8004384:	a308      	add	r3, pc, #32	; (adr r3, 80043a8 <_strtod_l+0xaf0>)
 8004386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438a:	4620      	mov	r0, r4
 800438c:	4629      	mov	r1, r5
 800438e:	f7fc fbcb 	bl	8000b28 <__aeabi_dcmpgt>
 8004392:	2800      	cmp	r0, #0
 8004394:	f43f af7b 	beq.w	800428e <_strtod_l+0x9d6>
 8004398:	e4d8      	b.n	8003d4c <_strtod_l+0x494>
 800439a:	bf00      	nop
 800439c:	f3af 8000 	nop.w
 80043a0:	94a03595 	.word	0x94a03595
 80043a4:	3fdfffff 	.word	0x3fdfffff
 80043a8:	35afe535 	.word	0x35afe535
 80043ac:	3fe00000 	.word	0x3fe00000
 80043b0:	000fffff 	.word	0x000fffff
 80043b4:	7ff00000 	.word	0x7ff00000
 80043b8:	7fefffff 	.word	0x7fefffff
 80043bc:	3ff00000 	.word	0x3ff00000
 80043c0:	7fe00000 	.word	0x7fe00000
 80043c4:	7c9fffff 	.word	0x7c9fffff
 80043c8:	3fe00000 	.word	0x3fe00000
 80043cc:	bff00000 	.word	0xbff00000
 80043d0:	9b05      	ldr	r3, [sp, #20]
 80043d2:	b313      	cbz	r3, 800441a <_strtod_l+0xb62>
 80043d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80043da:	d81e      	bhi.n	800441a <_strtod_l+0xb62>
 80043dc:	a326      	add	r3, pc, #152	; (adr r3, 8004478 <_strtod_l+0xbc0>)
 80043de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e2:	4620      	mov	r0, r4
 80043e4:	4629      	mov	r1, r5
 80043e6:	f7fc fb8b 	bl	8000b00 <__aeabi_dcmple>
 80043ea:	b190      	cbz	r0, 8004412 <_strtod_l+0xb5a>
 80043ec:	4629      	mov	r1, r5
 80043ee:	4620      	mov	r0, r4
 80043f0:	f7fc fbe2 	bl	8000bb8 <__aeabi_d2uiz>
 80043f4:	2801      	cmp	r0, #1
 80043f6:	bf38      	it	cc
 80043f8:	2001      	movcc	r0, #1
 80043fa:	f7fc f88b 	bl	8000514 <__aeabi_ui2d>
 80043fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004400:	4604      	mov	r4, r0
 8004402:	460d      	mov	r5, r1
 8004404:	b9d3      	cbnz	r3, 800443c <_strtod_l+0xb84>
 8004406:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800440a:	9012      	str	r0, [sp, #72]	; 0x48
 800440c:	9313      	str	r3, [sp, #76]	; 0x4c
 800440e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004412:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004414:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004418:	1a9f      	subs	r7, r3, r2
 800441a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800441e:	f001 fe31 	bl	8006084 <__ulp>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	4630      	mov	r0, r6
 8004428:	4639      	mov	r1, r7
 800442a:	f7fc f8ed 	bl	8000608 <__aeabi_dmul>
 800442e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004432:	f7fb ff33 	bl	800029c <__adddf3>
 8004436:	4680      	mov	r8, r0
 8004438:	4689      	mov	r9, r1
 800443a:	e77c      	b.n	8004336 <_strtod_l+0xa7e>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004444:	e7e3      	b.n	800440e <_strtod_l+0xb56>
 8004446:	a30e      	add	r3, pc, #56	; (adr r3, 8004480 <_strtod_l+0xbc8>)
 8004448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444c:	f7fc fb4e 	bl	8000aec <__aeabi_dcmplt>
 8004450:	e79f      	b.n	8004392 <_strtod_l+0xada>
 8004452:	2300      	movs	r3, #0
 8004454:	930a      	str	r3, [sp, #40]	; 0x28
 8004456:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004458:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800445a:	6013      	str	r3, [r2, #0]
 800445c:	f7ff ba71 	b.w	8003942 <_strtod_l+0x8a>
 8004460:	2a65      	cmp	r2, #101	; 0x65
 8004462:	f43f ab63 	beq.w	8003b2c <_strtod_l+0x274>
 8004466:	2a45      	cmp	r2, #69	; 0x45
 8004468:	f43f ab60 	beq.w	8003b2c <_strtod_l+0x274>
 800446c:	2301      	movs	r3, #1
 800446e:	f7ff bb95 	b.w	8003b9c <_strtod_l+0x2e4>
 8004472:	bf00      	nop
 8004474:	f3af 8000 	nop.w
 8004478:	ffc00000 	.word	0xffc00000
 800447c:	41dfffff 	.word	0x41dfffff
 8004480:	94a03595 	.word	0x94a03595
 8004484:	3fcfffff 	.word	0x3fcfffff

08004488 <_strtod_r>:
 8004488:	4b01      	ldr	r3, [pc, #4]	; (8004490 <_strtod_r+0x8>)
 800448a:	f7ff ba15 	b.w	80038b8 <_strtod_l>
 800448e:	bf00      	nop
 8004490:	200000ac 	.word	0x200000ac

08004494 <_strtol_l.constprop.0>:
 8004494:	2b01      	cmp	r3, #1
 8004496:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800449a:	4680      	mov	r8, r0
 800449c:	d001      	beq.n	80044a2 <_strtol_l.constprop.0+0xe>
 800449e:	2b24      	cmp	r3, #36	; 0x24
 80044a0:	d906      	bls.n	80044b0 <_strtol_l.constprop.0+0x1c>
 80044a2:	f000 feeb 	bl	800527c <__errno>
 80044a6:	2316      	movs	r3, #22
 80044a8:	6003      	str	r3, [r0, #0]
 80044aa:	2000      	movs	r0, #0
 80044ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b0:	4f35      	ldr	r7, [pc, #212]	; (8004588 <_strtol_l.constprop.0+0xf4>)
 80044b2:	460d      	mov	r5, r1
 80044b4:	4628      	mov	r0, r5
 80044b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044ba:	5de6      	ldrb	r6, [r4, r7]
 80044bc:	f016 0608 	ands.w	r6, r6, #8
 80044c0:	d1f8      	bne.n	80044b4 <_strtol_l.constprop.0+0x20>
 80044c2:	2c2d      	cmp	r4, #45	; 0x2d
 80044c4:	d12f      	bne.n	8004526 <_strtol_l.constprop.0+0x92>
 80044c6:	782c      	ldrb	r4, [r5, #0]
 80044c8:	2601      	movs	r6, #1
 80044ca:	1c85      	adds	r5, r0, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d057      	beq.n	8004580 <_strtol_l.constprop.0+0xec>
 80044d0:	2b10      	cmp	r3, #16
 80044d2:	d109      	bne.n	80044e8 <_strtol_l.constprop.0+0x54>
 80044d4:	2c30      	cmp	r4, #48	; 0x30
 80044d6:	d107      	bne.n	80044e8 <_strtol_l.constprop.0+0x54>
 80044d8:	7828      	ldrb	r0, [r5, #0]
 80044da:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80044de:	2858      	cmp	r0, #88	; 0x58
 80044e0:	d149      	bne.n	8004576 <_strtol_l.constprop.0+0xe2>
 80044e2:	786c      	ldrb	r4, [r5, #1]
 80044e4:	2310      	movs	r3, #16
 80044e6:	3502      	adds	r5, #2
 80044e8:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80044ec:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80044f0:	2700      	movs	r7, #0
 80044f2:	fbbe f9f3 	udiv	r9, lr, r3
 80044f6:	4638      	mov	r0, r7
 80044f8:	fb03 ea19 	mls	sl, r3, r9, lr
 80044fc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004500:	f1bc 0f09 	cmp.w	ip, #9
 8004504:	d814      	bhi.n	8004530 <_strtol_l.constprop.0+0x9c>
 8004506:	4664      	mov	r4, ip
 8004508:	42a3      	cmp	r3, r4
 800450a:	dd22      	ble.n	8004552 <_strtol_l.constprop.0+0xbe>
 800450c:	2f00      	cmp	r7, #0
 800450e:	db1d      	blt.n	800454c <_strtol_l.constprop.0+0xb8>
 8004510:	4581      	cmp	r9, r0
 8004512:	d31b      	bcc.n	800454c <_strtol_l.constprop.0+0xb8>
 8004514:	d101      	bne.n	800451a <_strtol_l.constprop.0+0x86>
 8004516:	45a2      	cmp	sl, r4
 8004518:	db18      	blt.n	800454c <_strtol_l.constprop.0+0xb8>
 800451a:	fb00 4003 	mla	r0, r0, r3, r4
 800451e:	2701      	movs	r7, #1
 8004520:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004524:	e7ea      	b.n	80044fc <_strtol_l.constprop.0+0x68>
 8004526:	2c2b      	cmp	r4, #43	; 0x2b
 8004528:	bf04      	itt	eq
 800452a:	782c      	ldrbeq	r4, [r5, #0]
 800452c:	1c85      	addeq	r5, r0, #2
 800452e:	e7cd      	b.n	80044cc <_strtol_l.constprop.0+0x38>
 8004530:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004534:	f1bc 0f19 	cmp.w	ip, #25
 8004538:	d801      	bhi.n	800453e <_strtol_l.constprop.0+0xaa>
 800453a:	3c37      	subs	r4, #55	; 0x37
 800453c:	e7e4      	b.n	8004508 <_strtol_l.constprop.0+0x74>
 800453e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004542:	f1bc 0f19 	cmp.w	ip, #25
 8004546:	d804      	bhi.n	8004552 <_strtol_l.constprop.0+0xbe>
 8004548:	3c57      	subs	r4, #87	; 0x57
 800454a:	e7dd      	b.n	8004508 <_strtol_l.constprop.0+0x74>
 800454c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004550:	e7e6      	b.n	8004520 <_strtol_l.constprop.0+0x8c>
 8004552:	2f00      	cmp	r7, #0
 8004554:	da07      	bge.n	8004566 <_strtol_l.constprop.0+0xd2>
 8004556:	2322      	movs	r3, #34	; 0x22
 8004558:	f8c8 3000 	str.w	r3, [r8]
 800455c:	4670      	mov	r0, lr
 800455e:	2a00      	cmp	r2, #0
 8004560:	d0a4      	beq.n	80044ac <_strtol_l.constprop.0+0x18>
 8004562:	1e69      	subs	r1, r5, #1
 8004564:	e005      	b.n	8004572 <_strtol_l.constprop.0+0xde>
 8004566:	b106      	cbz	r6, 800456a <_strtol_l.constprop.0+0xd6>
 8004568:	4240      	negs	r0, r0
 800456a:	2a00      	cmp	r2, #0
 800456c:	d09e      	beq.n	80044ac <_strtol_l.constprop.0+0x18>
 800456e:	2f00      	cmp	r7, #0
 8004570:	d1f7      	bne.n	8004562 <_strtol_l.constprop.0+0xce>
 8004572:	6011      	str	r1, [r2, #0]
 8004574:	e79a      	b.n	80044ac <_strtol_l.constprop.0+0x18>
 8004576:	2430      	movs	r4, #48	; 0x30
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1b5      	bne.n	80044e8 <_strtol_l.constprop.0+0x54>
 800457c:	2308      	movs	r3, #8
 800457e:	e7b3      	b.n	80044e8 <_strtol_l.constprop.0+0x54>
 8004580:	2c30      	cmp	r4, #48	; 0x30
 8004582:	d0a9      	beq.n	80044d8 <_strtol_l.constprop.0+0x44>
 8004584:	230a      	movs	r3, #10
 8004586:	e7af      	b.n	80044e8 <_strtol_l.constprop.0+0x54>
 8004588:	08007511 	.word	0x08007511

0800458c <_strtol_r>:
 800458c:	f7ff bf82 	b.w	8004494 <_strtol_l.constprop.0>

08004590 <quorem>:
 8004590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004594:	6903      	ldr	r3, [r0, #16]
 8004596:	690c      	ldr	r4, [r1, #16]
 8004598:	42a3      	cmp	r3, r4
 800459a:	4607      	mov	r7, r0
 800459c:	db7d      	blt.n	800469a <quorem+0x10a>
 800459e:	3c01      	subs	r4, #1
 80045a0:	f101 0814 	add.w	r8, r1, #20
 80045a4:	f100 0514 	add.w	r5, r0, #20
 80045a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80045ac:	9301      	str	r3, [sp, #4]
 80045ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80045b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80045b6:	3301      	adds	r3, #1
 80045b8:	429a      	cmp	r2, r3
 80045ba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80045be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80045c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80045c6:	d32e      	bcc.n	8004626 <quorem+0x96>
 80045c8:	f04f 0e00 	mov.w	lr, #0
 80045cc:	4640      	mov	r0, r8
 80045ce:	46ac      	mov	ip, r5
 80045d0:	46f2      	mov	sl, lr
 80045d2:	f850 2b04 	ldr.w	r2, [r0], #4
 80045d6:	b293      	uxth	r3, r2
 80045d8:	fb06 e303 	mla	r3, r6, r3, lr
 80045dc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80045e0:	0c12      	lsrs	r2, r2, #16
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	fb06 e202 	mla	r2, r6, r2, lr
 80045e8:	ebaa 0303 	sub.w	r3, sl, r3
 80045ec:	f8dc a000 	ldr.w	sl, [ip]
 80045f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80045f4:	b292      	uxth	r2, r2
 80045f6:	fa13 f38a 	uxtah	r3, r3, sl
 80045fa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80045fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004602:	b29b      	uxth	r3, r3
 8004604:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004608:	4581      	cmp	r9, r0
 800460a:	f84c 3b04 	str.w	r3, [ip], #4
 800460e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004612:	d2de      	bcs.n	80045d2 <quorem+0x42>
 8004614:	f855 300b 	ldr.w	r3, [r5, fp]
 8004618:	b92b      	cbnz	r3, 8004626 <quorem+0x96>
 800461a:	9b01      	ldr	r3, [sp, #4]
 800461c:	3b04      	subs	r3, #4
 800461e:	429d      	cmp	r5, r3
 8004620:	461a      	mov	r2, r3
 8004622:	d32e      	bcc.n	8004682 <quorem+0xf2>
 8004624:	613c      	str	r4, [r7, #16]
 8004626:	4638      	mov	r0, r7
 8004628:	f001 fc88 	bl	8005f3c <__mcmp>
 800462c:	2800      	cmp	r0, #0
 800462e:	db24      	blt.n	800467a <quorem+0xea>
 8004630:	3601      	adds	r6, #1
 8004632:	4628      	mov	r0, r5
 8004634:	f04f 0c00 	mov.w	ip, #0
 8004638:	f858 2b04 	ldr.w	r2, [r8], #4
 800463c:	f8d0 e000 	ldr.w	lr, [r0]
 8004640:	b293      	uxth	r3, r2
 8004642:	ebac 0303 	sub.w	r3, ip, r3
 8004646:	0c12      	lsrs	r2, r2, #16
 8004648:	fa13 f38e 	uxtah	r3, r3, lr
 800464c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004650:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004654:	b29b      	uxth	r3, r3
 8004656:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800465a:	45c1      	cmp	r9, r8
 800465c:	f840 3b04 	str.w	r3, [r0], #4
 8004660:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004664:	d2e8      	bcs.n	8004638 <quorem+0xa8>
 8004666:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800466a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800466e:	b922      	cbnz	r2, 800467a <quorem+0xea>
 8004670:	3b04      	subs	r3, #4
 8004672:	429d      	cmp	r5, r3
 8004674:	461a      	mov	r2, r3
 8004676:	d30a      	bcc.n	800468e <quorem+0xfe>
 8004678:	613c      	str	r4, [r7, #16]
 800467a:	4630      	mov	r0, r6
 800467c:	b003      	add	sp, #12
 800467e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004682:	6812      	ldr	r2, [r2, #0]
 8004684:	3b04      	subs	r3, #4
 8004686:	2a00      	cmp	r2, #0
 8004688:	d1cc      	bne.n	8004624 <quorem+0x94>
 800468a:	3c01      	subs	r4, #1
 800468c:	e7c7      	b.n	800461e <quorem+0x8e>
 800468e:	6812      	ldr	r2, [r2, #0]
 8004690:	3b04      	subs	r3, #4
 8004692:	2a00      	cmp	r2, #0
 8004694:	d1f0      	bne.n	8004678 <quorem+0xe8>
 8004696:	3c01      	subs	r4, #1
 8004698:	e7eb      	b.n	8004672 <quorem+0xe2>
 800469a:	2000      	movs	r0, #0
 800469c:	e7ee      	b.n	800467c <quorem+0xec>
	...

080046a0 <_dtoa_r>:
 80046a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80046a6:	b099      	sub	sp, #100	; 0x64
 80046a8:	4616      	mov	r6, r2
 80046aa:	461f      	mov	r7, r3
 80046ac:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80046b0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80046b4:	4605      	mov	r5, r0
 80046b6:	b974      	cbnz	r4, 80046d6 <_dtoa_r+0x36>
 80046b8:	2010      	movs	r0, #16
 80046ba:	f001 f94f 	bl	800595c <malloc>
 80046be:	4602      	mov	r2, r0
 80046c0:	6268      	str	r0, [r5, #36]	; 0x24
 80046c2:	b920      	cbnz	r0, 80046ce <_dtoa_r+0x2e>
 80046c4:	4ba8      	ldr	r3, [pc, #672]	; (8004968 <_dtoa_r+0x2c8>)
 80046c6:	21ea      	movs	r1, #234	; 0xea
 80046c8:	48a8      	ldr	r0, [pc, #672]	; (800496c <_dtoa_r+0x2cc>)
 80046ca:	f002 f8a9 	bl	8006820 <__assert_func>
 80046ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80046d2:	6004      	str	r4, [r0, #0]
 80046d4:	60c4      	str	r4, [r0, #12]
 80046d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80046d8:	6819      	ldr	r1, [r3, #0]
 80046da:	b151      	cbz	r1, 80046f2 <_dtoa_r+0x52>
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	604a      	str	r2, [r1, #4]
 80046e0:	2301      	movs	r3, #1
 80046e2:	4093      	lsls	r3, r2
 80046e4:	608b      	str	r3, [r1, #8]
 80046e6:	4628      	mov	r0, r5
 80046e8:	f001 f9a0 	bl	8005a2c <_Bfree>
 80046ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80046ee:	2200      	movs	r2, #0
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	1e3b      	subs	r3, r7, #0
 80046f4:	bfb9      	ittee	lt
 80046f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80046fa:	9305      	strlt	r3, [sp, #20]
 80046fc:	2300      	movge	r3, #0
 80046fe:	f8c8 3000 	strge.w	r3, [r8]
 8004702:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004706:	4b9a      	ldr	r3, [pc, #616]	; (8004970 <_dtoa_r+0x2d0>)
 8004708:	bfbc      	itt	lt
 800470a:	2201      	movlt	r2, #1
 800470c:	f8c8 2000 	strlt.w	r2, [r8]
 8004710:	ea33 0309 	bics.w	r3, r3, r9
 8004714:	d119      	bne.n	800474a <_dtoa_r+0xaa>
 8004716:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004718:	f242 730f 	movw	r3, #9999	; 0x270f
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004722:	4333      	orrs	r3, r6
 8004724:	f000 8580 	beq.w	8005228 <_dtoa_r+0xb88>
 8004728:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800472a:	b953      	cbnz	r3, 8004742 <_dtoa_r+0xa2>
 800472c:	4b91      	ldr	r3, [pc, #580]	; (8004974 <_dtoa_r+0x2d4>)
 800472e:	e022      	b.n	8004776 <_dtoa_r+0xd6>
 8004730:	4b91      	ldr	r3, [pc, #580]	; (8004978 <_dtoa_r+0x2d8>)
 8004732:	9303      	str	r3, [sp, #12]
 8004734:	3308      	adds	r3, #8
 8004736:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	9803      	ldr	r0, [sp, #12]
 800473c:	b019      	add	sp, #100	; 0x64
 800473e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004742:	4b8c      	ldr	r3, [pc, #560]	; (8004974 <_dtoa_r+0x2d4>)
 8004744:	9303      	str	r3, [sp, #12]
 8004746:	3303      	adds	r3, #3
 8004748:	e7f5      	b.n	8004736 <_dtoa_r+0x96>
 800474a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800474e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004752:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004756:	2200      	movs	r2, #0
 8004758:	2300      	movs	r3, #0
 800475a:	f7fc f9bd 	bl	8000ad8 <__aeabi_dcmpeq>
 800475e:	4680      	mov	r8, r0
 8004760:	b158      	cbz	r0, 800477a <_dtoa_r+0xda>
 8004762:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004764:	2301      	movs	r3, #1
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 8559 	beq.w	8005222 <_dtoa_r+0xb82>
 8004770:	4882      	ldr	r0, [pc, #520]	; (800497c <_dtoa_r+0x2dc>)
 8004772:	6018      	str	r0, [r3, #0]
 8004774:	1e43      	subs	r3, r0, #1
 8004776:	9303      	str	r3, [sp, #12]
 8004778:	e7df      	b.n	800473a <_dtoa_r+0x9a>
 800477a:	ab16      	add	r3, sp, #88	; 0x58
 800477c:	9301      	str	r3, [sp, #4]
 800477e:	ab17      	add	r3, sp, #92	; 0x5c
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	4628      	mov	r0, r5
 8004784:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004788:	f001 fcf6 	bl	8006178 <__d2b>
 800478c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004790:	4683      	mov	fp, r0
 8004792:	2c00      	cmp	r4, #0
 8004794:	d07e      	beq.n	8004894 <_dtoa_r+0x1f4>
 8004796:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004798:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800479c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80047a4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80047a8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80047ac:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80047b0:	4b73      	ldr	r3, [pc, #460]	; (8004980 <_dtoa_r+0x2e0>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	f7fb fd70 	bl	8000298 <__aeabi_dsub>
 80047b8:	a365      	add	r3, pc, #404	; (adr r3, 8004950 <_dtoa_r+0x2b0>)
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	f7fb ff23 	bl	8000608 <__aeabi_dmul>
 80047c2:	a365      	add	r3, pc, #404	; (adr r3, 8004958 <_dtoa_r+0x2b8>)
 80047c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c8:	f7fb fd68 	bl	800029c <__adddf3>
 80047cc:	4606      	mov	r6, r0
 80047ce:	4620      	mov	r0, r4
 80047d0:	460f      	mov	r7, r1
 80047d2:	f7fb feaf 	bl	8000534 <__aeabi_i2d>
 80047d6:	a362      	add	r3, pc, #392	; (adr r3, 8004960 <_dtoa_r+0x2c0>)
 80047d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047dc:	f7fb ff14 	bl	8000608 <__aeabi_dmul>
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	4630      	mov	r0, r6
 80047e6:	4639      	mov	r1, r7
 80047e8:	f7fb fd58 	bl	800029c <__adddf3>
 80047ec:	4606      	mov	r6, r0
 80047ee:	460f      	mov	r7, r1
 80047f0:	f7fc f9ba 	bl	8000b68 <__aeabi_d2iz>
 80047f4:	2200      	movs	r2, #0
 80047f6:	4682      	mov	sl, r0
 80047f8:	2300      	movs	r3, #0
 80047fa:	4630      	mov	r0, r6
 80047fc:	4639      	mov	r1, r7
 80047fe:	f7fc f975 	bl	8000aec <__aeabi_dcmplt>
 8004802:	b148      	cbz	r0, 8004818 <_dtoa_r+0x178>
 8004804:	4650      	mov	r0, sl
 8004806:	f7fb fe95 	bl	8000534 <__aeabi_i2d>
 800480a:	4632      	mov	r2, r6
 800480c:	463b      	mov	r3, r7
 800480e:	f7fc f963 	bl	8000ad8 <__aeabi_dcmpeq>
 8004812:	b908      	cbnz	r0, 8004818 <_dtoa_r+0x178>
 8004814:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004818:	f1ba 0f16 	cmp.w	sl, #22
 800481c:	d857      	bhi.n	80048ce <_dtoa_r+0x22e>
 800481e:	4b59      	ldr	r3, [pc, #356]	; (8004984 <_dtoa_r+0x2e4>)
 8004820:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004828:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800482c:	f7fc f95e 	bl	8000aec <__aeabi_dcmplt>
 8004830:	2800      	cmp	r0, #0
 8004832:	d04e      	beq.n	80048d2 <_dtoa_r+0x232>
 8004834:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004838:	2300      	movs	r3, #0
 800483a:	930f      	str	r3, [sp, #60]	; 0x3c
 800483c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800483e:	1b1c      	subs	r4, r3, r4
 8004840:	1e63      	subs	r3, r4, #1
 8004842:	9309      	str	r3, [sp, #36]	; 0x24
 8004844:	bf45      	ittet	mi
 8004846:	f1c4 0301 	rsbmi	r3, r4, #1
 800484a:	9306      	strmi	r3, [sp, #24]
 800484c:	2300      	movpl	r3, #0
 800484e:	2300      	movmi	r3, #0
 8004850:	bf4c      	ite	mi
 8004852:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004854:	9306      	strpl	r3, [sp, #24]
 8004856:	f1ba 0f00 	cmp.w	sl, #0
 800485a:	db3c      	blt.n	80048d6 <_dtoa_r+0x236>
 800485c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800485e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004862:	4453      	add	r3, sl
 8004864:	9309      	str	r3, [sp, #36]	; 0x24
 8004866:	2300      	movs	r3, #0
 8004868:	930a      	str	r3, [sp, #40]	; 0x28
 800486a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800486c:	2b09      	cmp	r3, #9
 800486e:	f200 808d 	bhi.w	800498c <_dtoa_r+0x2ec>
 8004872:	2b05      	cmp	r3, #5
 8004874:	bfc4      	itt	gt
 8004876:	3b04      	subgt	r3, #4
 8004878:	9322      	strgt	r3, [sp, #136]	; 0x88
 800487a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800487c:	f1a3 0302 	sub.w	r3, r3, #2
 8004880:	bfcc      	ite	gt
 8004882:	2400      	movgt	r4, #0
 8004884:	2401      	movle	r4, #1
 8004886:	2b03      	cmp	r3, #3
 8004888:	f200 808c 	bhi.w	80049a4 <_dtoa_r+0x304>
 800488c:	e8df f003 	tbb	[pc, r3]
 8004890:	5b4d4f2d 	.word	0x5b4d4f2d
 8004894:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004898:	441c      	add	r4, r3
 800489a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800489e:	2b20      	cmp	r3, #32
 80048a0:	bfc3      	ittte	gt
 80048a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80048a6:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80048aa:	fa09 f303 	lslgt.w	r3, r9, r3
 80048ae:	f1c3 0320 	rsble	r3, r3, #32
 80048b2:	bfc6      	itte	gt
 80048b4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80048b8:	4318      	orrgt	r0, r3
 80048ba:	fa06 f003 	lslle.w	r0, r6, r3
 80048be:	f7fb fe29 	bl	8000514 <__aeabi_ui2d>
 80048c2:	2301      	movs	r3, #1
 80048c4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80048c8:	3c01      	subs	r4, #1
 80048ca:	9313      	str	r3, [sp, #76]	; 0x4c
 80048cc:	e770      	b.n	80047b0 <_dtoa_r+0x110>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e7b3      	b.n	800483a <_dtoa_r+0x19a>
 80048d2:	900f      	str	r0, [sp, #60]	; 0x3c
 80048d4:	e7b2      	b.n	800483c <_dtoa_r+0x19c>
 80048d6:	9b06      	ldr	r3, [sp, #24]
 80048d8:	eba3 030a 	sub.w	r3, r3, sl
 80048dc:	9306      	str	r3, [sp, #24]
 80048de:	f1ca 0300 	rsb	r3, sl, #0
 80048e2:	930a      	str	r3, [sp, #40]	; 0x28
 80048e4:	2300      	movs	r3, #0
 80048e6:	930e      	str	r3, [sp, #56]	; 0x38
 80048e8:	e7bf      	b.n	800486a <_dtoa_r+0x1ca>
 80048ea:	2300      	movs	r3, #0
 80048ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80048ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	dc5a      	bgt.n	80049aa <_dtoa_r+0x30a>
 80048f4:	f04f 0901 	mov.w	r9, #1
 80048f8:	f8cd 9020 	str.w	r9, [sp, #32]
 80048fc:	464b      	mov	r3, r9
 80048fe:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004902:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004904:	2200      	movs	r2, #0
 8004906:	6042      	str	r2, [r0, #4]
 8004908:	2204      	movs	r2, #4
 800490a:	f102 0614 	add.w	r6, r2, #20
 800490e:	429e      	cmp	r6, r3
 8004910:	6841      	ldr	r1, [r0, #4]
 8004912:	d950      	bls.n	80049b6 <_dtoa_r+0x316>
 8004914:	4628      	mov	r0, r5
 8004916:	f001 f849 	bl	80059ac <_Balloc>
 800491a:	9003      	str	r0, [sp, #12]
 800491c:	2800      	cmp	r0, #0
 800491e:	d14e      	bne.n	80049be <_dtoa_r+0x31e>
 8004920:	4b19      	ldr	r3, [pc, #100]	; (8004988 <_dtoa_r+0x2e8>)
 8004922:	4602      	mov	r2, r0
 8004924:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004928:	e6ce      	b.n	80046c8 <_dtoa_r+0x28>
 800492a:	2301      	movs	r3, #1
 800492c:	e7de      	b.n	80048ec <_dtoa_r+0x24c>
 800492e:	2300      	movs	r3, #0
 8004930:	930b      	str	r3, [sp, #44]	; 0x2c
 8004932:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004934:	eb0a 0903 	add.w	r9, sl, r3
 8004938:	f109 0301 	add.w	r3, r9, #1
 800493c:	2b01      	cmp	r3, #1
 800493e:	9308      	str	r3, [sp, #32]
 8004940:	bfb8      	it	lt
 8004942:	2301      	movlt	r3, #1
 8004944:	e7dd      	b.n	8004902 <_dtoa_r+0x262>
 8004946:	2301      	movs	r3, #1
 8004948:	e7f2      	b.n	8004930 <_dtoa_r+0x290>
 800494a:	bf00      	nop
 800494c:	f3af 8000 	nop.w
 8004950:	636f4361 	.word	0x636f4361
 8004954:	3fd287a7 	.word	0x3fd287a7
 8004958:	8b60c8b3 	.word	0x8b60c8b3
 800495c:	3fc68a28 	.word	0x3fc68a28
 8004960:	509f79fb 	.word	0x509f79fb
 8004964:	3fd34413 	.word	0x3fd34413
 8004968:	0800761e 	.word	0x0800761e
 800496c:	08007635 	.word	0x08007635
 8004970:	7ff00000 	.word	0x7ff00000
 8004974:	0800761a 	.word	0x0800761a
 8004978:	08007611 	.word	0x08007611
 800497c:	08007491 	.word	0x08007491
 8004980:	3ff80000 	.word	0x3ff80000
 8004984:	080077a0 	.word	0x080077a0
 8004988:	08007690 	.word	0x08007690
 800498c:	2401      	movs	r4, #1
 800498e:	2300      	movs	r3, #0
 8004990:	9322      	str	r3, [sp, #136]	; 0x88
 8004992:	940b      	str	r4, [sp, #44]	; 0x2c
 8004994:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004998:	2200      	movs	r2, #0
 800499a:	f8cd 9020 	str.w	r9, [sp, #32]
 800499e:	2312      	movs	r3, #18
 80049a0:	9223      	str	r2, [sp, #140]	; 0x8c
 80049a2:	e7ae      	b.n	8004902 <_dtoa_r+0x262>
 80049a4:	2301      	movs	r3, #1
 80049a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80049a8:	e7f4      	b.n	8004994 <_dtoa_r+0x2f4>
 80049aa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80049ae:	f8cd 9020 	str.w	r9, [sp, #32]
 80049b2:	464b      	mov	r3, r9
 80049b4:	e7a5      	b.n	8004902 <_dtoa_r+0x262>
 80049b6:	3101      	adds	r1, #1
 80049b8:	6041      	str	r1, [r0, #4]
 80049ba:	0052      	lsls	r2, r2, #1
 80049bc:	e7a5      	b.n	800490a <_dtoa_r+0x26a>
 80049be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80049c0:	9a03      	ldr	r2, [sp, #12]
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	9b08      	ldr	r3, [sp, #32]
 80049c6:	2b0e      	cmp	r3, #14
 80049c8:	f200 80a8 	bhi.w	8004b1c <_dtoa_r+0x47c>
 80049cc:	2c00      	cmp	r4, #0
 80049ce:	f000 80a5 	beq.w	8004b1c <_dtoa_r+0x47c>
 80049d2:	f1ba 0f00 	cmp.w	sl, #0
 80049d6:	dd34      	ble.n	8004a42 <_dtoa_r+0x3a2>
 80049d8:	4a9a      	ldr	r2, [pc, #616]	; (8004c44 <_dtoa_r+0x5a4>)
 80049da:	f00a 030f 	and.w	r3, sl, #15
 80049de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80049e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80049e6:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80049ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80049ee:	ea4f 142a 	mov.w	r4, sl, asr #4
 80049f2:	d016      	beq.n	8004a22 <_dtoa_r+0x382>
 80049f4:	4b94      	ldr	r3, [pc, #592]	; (8004c48 <_dtoa_r+0x5a8>)
 80049f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80049fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80049fe:	f7fb ff2d 	bl	800085c <__aeabi_ddiv>
 8004a02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a06:	f004 040f 	and.w	r4, r4, #15
 8004a0a:	2703      	movs	r7, #3
 8004a0c:	4e8e      	ldr	r6, [pc, #568]	; (8004c48 <_dtoa_r+0x5a8>)
 8004a0e:	b954      	cbnz	r4, 8004a26 <_dtoa_r+0x386>
 8004a10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004a14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a18:	f7fb ff20 	bl	800085c <__aeabi_ddiv>
 8004a1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a20:	e029      	b.n	8004a76 <_dtoa_r+0x3d6>
 8004a22:	2702      	movs	r7, #2
 8004a24:	e7f2      	b.n	8004a0c <_dtoa_r+0x36c>
 8004a26:	07e1      	lsls	r1, r4, #31
 8004a28:	d508      	bpl.n	8004a3c <_dtoa_r+0x39c>
 8004a2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a2e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004a32:	f7fb fde9 	bl	8000608 <__aeabi_dmul>
 8004a36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004a3a:	3701      	adds	r7, #1
 8004a3c:	1064      	asrs	r4, r4, #1
 8004a3e:	3608      	adds	r6, #8
 8004a40:	e7e5      	b.n	8004a0e <_dtoa_r+0x36e>
 8004a42:	f000 80a5 	beq.w	8004b90 <_dtoa_r+0x4f0>
 8004a46:	f1ca 0400 	rsb	r4, sl, #0
 8004a4a:	4b7e      	ldr	r3, [pc, #504]	; (8004c44 <_dtoa_r+0x5a4>)
 8004a4c:	4e7e      	ldr	r6, [pc, #504]	; (8004c48 <_dtoa_r+0x5a8>)
 8004a4e:	f004 020f 	and.w	r2, r4, #15
 8004a52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a5e:	f7fb fdd3 	bl	8000608 <__aeabi_dmul>
 8004a62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a66:	1124      	asrs	r4, r4, #4
 8004a68:	2300      	movs	r3, #0
 8004a6a:	2702      	movs	r7, #2
 8004a6c:	2c00      	cmp	r4, #0
 8004a6e:	f040 8084 	bne.w	8004b7a <_dtoa_r+0x4da>
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1d2      	bne.n	8004a1c <_dtoa_r+0x37c>
 8004a76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 808b 	beq.w	8004b94 <_dtoa_r+0x4f4>
 8004a7e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004a82:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004a86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a8a:	4b70      	ldr	r3, [pc, #448]	; (8004c4c <_dtoa_r+0x5ac>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f7fc f82d 	bl	8000aec <__aeabi_dcmplt>
 8004a92:	2800      	cmp	r0, #0
 8004a94:	d07e      	beq.n	8004b94 <_dtoa_r+0x4f4>
 8004a96:	9b08      	ldr	r3, [sp, #32]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d07b      	beq.n	8004b94 <_dtoa_r+0x4f4>
 8004a9c:	f1b9 0f00 	cmp.w	r9, #0
 8004aa0:	dd38      	ble.n	8004b14 <_dtoa_r+0x474>
 8004aa2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004aa6:	4b6a      	ldr	r3, [pc, #424]	; (8004c50 <_dtoa_r+0x5b0>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f7fb fdad 	bl	8000608 <__aeabi_dmul>
 8004aae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ab2:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8004ab6:	3701      	adds	r7, #1
 8004ab8:	464c      	mov	r4, r9
 8004aba:	4638      	mov	r0, r7
 8004abc:	f7fb fd3a 	bl	8000534 <__aeabi_i2d>
 8004ac0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ac4:	f7fb fda0 	bl	8000608 <__aeabi_dmul>
 8004ac8:	4b62      	ldr	r3, [pc, #392]	; (8004c54 <_dtoa_r+0x5b4>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	f7fb fbe6 	bl	800029c <__adddf3>
 8004ad0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004ad4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ad8:	9611      	str	r6, [sp, #68]	; 0x44
 8004ada:	2c00      	cmp	r4, #0
 8004adc:	d15d      	bne.n	8004b9a <_dtoa_r+0x4fa>
 8004ade:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ae2:	4b5d      	ldr	r3, [pc, #372]	; (8004c58 <_dtoa_r+0x5b8>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f7fb fbd7 	bl	8000298 <__aeabi_dsub>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004af2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004af4:	4633      	mov	r3, r6
 8004af6:	f7fc f817 	bl	8000b28 <__aeabi_dcmpgt>
 8004afa:	2800      	cmp	r0, #0
 8004afc:	f040 829c 	bne.w	8005038 <_dtoa_r+0x998>
 8004b00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004b06:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004b0a:	f7fb ffef 	bl	8000aec <__aeabi_dcmplt>
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	f040 8290 	bne.w	8005034 <_dtoa_r+0x994>
 8004b14:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004b18:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004b1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f2c0 8152 	blt.w	8004dc8 <_dtoa_r+0x728>
 8004b24:	f1ba 0f0e 	cmp.w	sl, #14
 8004b28:	f300 814e 	bgt.w	8004dc8 <_dtoa_r+0x728>
 8004b2c:	4b45      	ldr	r3, [pc, #276]	; (8004c44 <_dtoa_r+0x5a4>)
 8004b2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004b32:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b36:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004b3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f280 80db 	bge.w	8004cf8 <_dtoa_r+0x658>
 8004b42:	9b08      	ldr	r3, [sp, #32]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f300 80d7 	bgt.w	8004cf8 <_dtoa_r+0x658>
 8004b4a:	f040 8272 	bne.w	8005032 <_dtoa_r+0x992>
 8004b4e:	4b42      	ldr	r3, [pc, #264]	; (8004c58 <_dtoa_r+0x5b8>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b56:	f7fb fd57 	bl	8000608 <__aeabi_dmul>
 8004b5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b5e:	f7fb ffd9 	bl	8000b14 <__aeabi_dcmpge>
 8004b62:	9c08      	ldr	r4, [sp, #32]
 8004b64:	4626      	mov	r6, r4
 8004b66:	2800      	cmp	r0, #0
 8004b68:	f040 8248 	bne.w	8004ffc <_dtoa_r+0x95c>
 8004b6c:	9f03      	ldr	r7, [sp, #12]
 8004b6e:	2331      	movs	r3, #49	; 0x31
 8004b70:	f807 3b01 	strb.w	r3, [r7], #1
 8004b74:	f10a 0a01 	add.w	sl, sl, #1
 8004b78:	e244      	b.n	8005004 <_dtoa_r+0x964>
 8004b7a:	07e2      	lsls	r2, r4, #31
 8004b7c:	d505      	bpl.n	8004b8a <_dtoa_r+0x4ea>
 8004b7e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004b82:	f7fb fd41 	bl	8000608 <__aeabi_dmul>
 8004b86:	3701      	adds	r7, #1
 8004b88:	2301      	movs	r3, #1
 8004b8a:	1064      	asrs	r4, r4, #1
 8004b8c:	3608      	adds	r6, #8
 8004b8e:	e76d      	b.n	8004a6c <_dtoa_r+0x3cc>
 8004b90:	2702      	movs	r7, #2
 8004b92:	e770      	b.n	8004a76 <_dtoa_r+0x3d6>
 8004b94:	9c08      	ldr	r4, [sp, #32]
 8004b96:	46d0      	mov	r8, sl
 8004b98:	e78f      	b.n	8004aba <_dtoa_r+0x41a>
 8004b9a:	9903      	ldr	r1, [sp, #12]
 8004b9c:	4b29      	ldr	r3, [pc, #164]	; (8004c44 <_dtoa_r+0x5a4>)
 8004b9e:	4421      	add	r1, r4
 8004ba0:	9112      	str	r1, [sp, #72]	; 0x48
 8004ba2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ba4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004ba8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004bac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004bb0:	2900      	cmp	r1, #0
 8004bb2:	d055      	beq.n	8004c60 <_dtoa_r+0x5c0>
 8004bb4:	4929      	ldr	r1, [pc, #164]	; (8004c5c <_dtoa_r+0x5bc>)
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	f7fb fe50 	bl	800085c <__aeabi_ddiv>
 8004bbc:	463b      	mov	r3, r7
 8004bbe:	4632      	mov	r2, r6
 8004bc0:	f7fb fb6a 	bl	8000298 <__aeabi_dsub>
 8004bc4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004bc8:	9f03      	ldr	r7, [sp, #12]
 8004bca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bce:	f7fb ffcb 	bl	8000b68 <__aeabi_d2iz>
 8004bd2:	4604      	mov	r4, r0
 8004bd4:	f7fb fcae 	bl	8000534 <__aeabi_i2d>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004be0:	f7fb fb5a 	bl	8000298 <__aeabi_dsub>
 8004be4:	3430      	adds	r4, #48	; 0x30
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004bee:	f807 4b01 	strb.w	r4, [r7], #1
 8004bf2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004bf6:	f7fb ff79 	bl	8000aec <__aeabi_dcmplt>
 8004bfa:	2800      	cmp	r0, #0
 8004bfc:	d174      	bne.n	8004ce8 <_dtoa_r+0x648>
 8004bfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c02:	4912      	ldr	r1, [pc, #72]	; (8004c4c <_dtoa_r+0x5ac>)
 8004c04:	2000      	movs	r0, #0
 8004c06:	f7fb fb47 	bl	8000298 <__aeabi_dsub>
 8004c0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004c0e:	f7fb ff6d 	bl	8000aec <__aeabi_dcmplt>
 8004c12:	2800      	cmp	r0, #0
 8004c14:	f040 80b7 	bne.w	8004d86 <_dtoa_r+0x6e6>
 8004c18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c1a:	429f      	cmp	r7, r3
 8004c1c:	f43f af7a 	beq.w	8004b14 <_dtoa_r+0x474>
 8004c20:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c24:	4b0a      	ldr	r3, [pc, #40]	; (8004c50 <_dtoa_r+0x5b0>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	f7fb fcee 	bl	8000608 <__aeabi_dmul>
 8004c2c:	4b08      	ldr	r3, [pc, #32]	; (8004c50 <_dtoa_r+0x5b0>)
 8004c2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c32:	2200      	movs	r2, #0
 8004c34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c38:	f7fb fce6 	bl	8000608 <__aeabi_dmul>
 8004c3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c40:	e7c3      	b.n	8004bca <_dtoa_r+0x52a>
 8004c42:	bf00      	nop
 8004c44:	080077a0 	.word	0x080077a0
 8004c48:	08007778 	.word	0x08007778
 8004c4c:	3ff00000 	.word	0x3ff00000
 8004c50:	40240000 	.word	0x40240000
 8004c54:	401c0000 	.word	0x401c0000
 8004c58:	40140000 	.word	0x40140000
 8004c5c:	3fe00000 	.word	0x3fe00000
 8004c60:	4630      	mov	r0, r6
 8004c62:	4639      	mov	r1, r7
 8004c64:	f7fb fcd0 	bl	8000608 <__aeabi_dmul>
 8004c68:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c6e:	9c03      	ldr	r4, [sp, #12]
 8004c70:	9314      	str	r3, [sp, #80]	; 0x50
 8004c72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c76:	f7fb ff77 	bl	8000b68 <__aeabi_d2iz>
 8004c7a:	9015      	str	r0, [sp, #84]	; 0x54
 8004c7c:	f7fb fc5a 	bl	8000534 <__aeabi_i2d>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c88:	f7fb fb06 	bl	8000298 <__aeabi_dsub>
 8004c8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004c8e:	3330      	adds	r3, #48	; 0x30
 8004c90:	f804 3b01 	strb.w	r3, [r4], #1
 8004c94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c96:	429c      	cmp	r4, r3
 8004c98:	4606      	mov	r6, r0
 8004c9a:	460f      	mov	r7, r1
 8004c9c:	f04f 0200 	mov.w	r2, #0
 8004ca0:	d124      	bne.n	8004cec <_dtoa_r+0x64c>
 8004ca2:	4ba4      	ldr	r3, [pc, #656]	; (8004f34 <_dtoa_r+0x894>)
 8004ca4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ca8:	f7fb faf8 	bl	800029c <__adddf3>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4630      	mov	r0, r6
 8004cb2:	4639      	mov	r1, r7
 8004cb4:	f7fb ff38 	bl	8000b28 <__aeabi_dcmpgt>
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	d163      	bne.n	8004d84 <_dtoa_r+0x6e4>
 8004cbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004cc0:	499c      	ldr	r1, [pc, #624]	; (8004f34 <_dtoa_r+0x894>)
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	f7fb fae8 	bl	8000298 <__aeabi_dsub>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4630      	mov	r0, r6
 8004cce:	4639      	mov	r1, r7
 8004cd0:	f7fb ff0c 	bl	8000aec <__aeabi_dcmplt>
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	f43f af1d 	beq.w	8004b14 <_dtoa_r+0x474>
 8004cda:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004cdc:	1e7b      	subs	r3, r7, #1
 8004cde:	9314      	str	r3, [sp, #80]	; 0x50
 8004ce0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004ce4:	2b30      	cmp	r3, #48	; 0x30
 8004ce6:	d0f8      	beq.n	8004cda <_dtoa_r+0x63a>
 8004ce8:	46c2      	mov	sl, r8
 8004cea:	e03b      	b.n	8004d64 <_dtoa_r+0x6c4>
 8004cec:	4b92      	ldr	r3, [pc, #584]	; (8004f38 <_dtoa_r+0x898>)
 8004cee:	f7fb fc8b 	bl	8000608 <__aeabi_dmul>
 8004cf2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004cf6:	e7bc      	b.n	8004c72 <_dtoa_r+0x5d2>
 8004cf8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004cfc:	9f03      	ldr	r7, [sp, #12]
 8004cfe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d02:	4640      	mov	r0, r8
 8004d04:	4649      	mov	r1, r9
 8004d06:	f7fb fda9 	bl	800085c <__aeabi_ddiv>
 8004d0a:	f7fb ff2d 	bl	8000b68 <__aeabi_d2iz>
 8004d0e:	4604      	mov	r4, r0
 8004d10:	f7fb fc10 	bl	8000534 <__aeabi_i2d>
 8004d14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d18:	f7fb fc76 	bl	8000608 <__aeabi_dmul>
 8004d1c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4640      	mov	r0, r8
 8004d26:	4649      	mov	r1, r9
 8004d28:	f7fb fab6 	bl	8000298 <__aeabi_dsub>
 8004d2c:	f807 6b01 	strb.w	r6, [r7], #1
 8004d30:	9e03      	ldr	r6, [sp, #12]
 8004d32:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004d36:	1bbe      	subs	r6, r7, r6
 8004d38:	45b4      	cmp	ip, r6
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	d136      	bne.n	8004dae <_dtoa_r+0x70e>
 8004d40:	f7fb faac 	bl	800029c <__adddf3>
 8004d44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d48:	4680      	mov	r8, r0
 8004d4a:	4689      	mov	r9, r1
 8004d4c:	f7fb feec 	bl	8000b28 <__aeabi_dcmpgt>
 8004d50:	bb58      	cbnz	r0, 8004daa <_dtoa_r+0x70a>
 8004d52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d56:	4640      	mov	r0, r8
 8004d58:	4649      	mov	r1, r9
 8004d5a:	f7fb febd 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d5e:	b108      	cbz	r0, 8004d64 <_dtoa_r+0x6c4>
 8004d60:	07e1      	lsls	r1, r4, #31
 8004d62:	d422      	bmi.n	8004daa <_dtoa_r+0x70a>
 8004d64:	4628      	mov	r0, r5
 8004d66:	4659      	mov	r1, fp
 8004d68:	f000 fe60 	bl	8005a2c <_Bfree>
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	703b      	strb	r3, [r7, #0]
 8004d70:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004d72:	f10a 0001 	add.w	r0, sl, #1
 8004d76:	6018      	str	r0, [r3, #0]
 8004d78:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f43f acdd 	beq.w	800473a <_dtoa_r+0x9a>
 8004d80:	601f      	str	r7, [r3, #0]
 8004d82:	e4da      	b.n	800473a <_dtoa_r+0x9a>
 8004d84:	4627      	mov	r7, r4
 8004d86:	463b      	mov	r3, r7
 8004d88:	461f      	mov	r7, r3
 8004d8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d8e:	2a39      	cmp	r2, #57	; 0x39
 8004d90:	d107      	bne.n	8004da2 <_dtoa_r+0x702>
 8004d92:	9a03      	ldr	r2, [sp, #12]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d1f7      	bne.n	8004d88 <_dtoa_r+0x6e8>
 8004d98:	9903      	ldr	r1, [sp, #12]
 8004d9a:	2230      	movs	r2, #48	; 0x30
 8004d9c:	f108 0801 	add.w	r8, r8, #1
 8004da0:	700a      	strb	r2, [r1, #0]
 8004da2:	781a      	ldrb	r2, [r3, #0]
 8004da4:	3201      	adds	r2, #1
 8004da6:	701a      	strb	r2, [r3, #0]
 8004da8:	e79e      	b.n	8004ce8 <_dtoa_r+0x648>
 8004daa:	46d0      	mov	r8, sl
 8004dac:	e7eb      	b.n	8004d86 <_dtoa_r+0x6e6>
 8004dae:	4b62      	ldr	r3, [pc, #392]	; (8004f38 <_dtoa_r+0x898>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	f7fb fc29 	bl	8000608 <__aeabi_dmul>
 8004db6:	2200      	movs	r2, #0
 8004db8:	2300      	movs	r3, #0
 8004dba:	4680      	mov	r8, r0
 8004dbc:	4689      	mov	r9, r1
 8004dbe:	f7fb fe8b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004dc2:	2800      	cmp	r0, #0
 8004dc4:	d09b      	beq.n	8004cfe <_dtoa_r+0x65e>
 8004dc6:	e7cd      	b.n	8004d64 <_dtoa_r+0x6c4>
 8004dc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004dca:	2a00      	cmp	r2, #0
 8004dcc:	f000 80d0 	beq.w	8004f70 <_dtoa_r+0x8d0>
 8004dd0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004dd2:	2a01      	cmp	r2, #1
 8004dd4:	f300 80b2 	bgt.w	8004f3c <_dtoa_r+0x89c>
 8004dd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004dda:	2a00      	cmp	r2, #0
 8004ddc:	f000 80a6 	beq.w	8004f2c <_dtoa_r+0x88c>
 8004de0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004de4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004de6:	9f06      	ldr	r7, [sp, #24]
 8004de8:	9a06      	ldr	r2, [sp, #24]
 8004dea:	441a      	add	r2, r3
 8004dec:	9206      	str	r2, [sp, #24]
 8004dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004df0:	2101      	movs	r1, #1
 8004df2:	441a      	add	r2, r3
 8004df4:	4628      	mov	r0, r5
 8004df6:	9209      	str	r2, [sp, #36]	; 0x24
 8004df8:	f000 ff18 	bl	8005c2c <__i2b>
 8004dfc:	4606      	mov	r6, r0
 8004dfe:	2f00      	cmp	r7, #0
 8004e00:	dd0c      	ble.n	8004e1c <_dtoa_r+0x77c>
 8004e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	dd09      	ble.n	8004e1c <_dtoa_r+0x77c>
 8004e08:	42bb      	cmp	r3, r7
 8004e0a:	9a06      	ldr	r2, [sp, #24]
 8004e0c:	bfa8      	it	ge
 8004e0e:	463b      	movge	r3, r7
 8004e10:	1ad2      	subs	r2, r2, r3
 8004e12:	9206      	str	r2, [sp, #24]
 8004e14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e16:	1aff      	subs	r7, r7, r3
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e1e:	b1f3      	cbz	r3, 8004e5e <_dtoa_r+0x7be>
 8004e20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 80a8 	beq.w	8004f78 <_dtoa_r+0x8d8>
 8004e28:	2c00      	cmp	r4, #0
 8004e2a:	dd10      	ble.n	8004e4e <_dtoa_r+0x7ae>
 8004e2c:	4631      	mov	r1, r6
 8004e2e:	4622      	mov	r2, r4
 8004e30:	4628      	mov	r0, r5
 8004e32:	f000 ffb9 	bl	8005da8 <__pow5mult>
 8004e36:	465a      	mov	r2, fp
 8004e38:	4601      	mov	r1, r0
 8004e3a:	4606      	mov	r6, r0
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	f000 ff0b 	bl	8005c58 <__multiply>
 8004e42:	4659      	mov	r1, fp
 8004e44:	4680      	mov	r8, r0
 8004e46:	4628      	mov	r0, r5
 8004e48:	f000 fdf0 	bl	8005a2c <_Bfree>
 8004e4c:	46c3      	mov	fp, r8
 8004e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e50:	1b1a      	subs	r2, r3, r4
 8004e52:	d004      	beq.n	8004e5e <_dtoa_r+0x7be>
 8004e54:	4659      	mov	r1, fp
 8004e56:	4628      	mov	r0, r5
 8004e58:	f000 ffa6 	bl	8005da8 <__pow5mult>
 8004e5c:	4683      	mov	fp, r0
 8004e5e:	2101      	movs	r1, #1
 8004e60:	4628      	mov	r0, r5
 8004e62:	f000 fee3 	bl	8005c2c <__i2b>
 8004e66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	4604      	mov	r4, r0
 8004e6c:	f340 8086 	ble.w	8004f7c <_dtoa_r+0x8dc>
 8004e70:	461a      	mov	r2, r3
 8004e72:	4601      	mov	r1, r0
 8004e74:	4628      	mov	r0, r5
 8004e76:	f000 ff97 	bl	8005da8 <__pow5mult>
 8004e7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	4604      	mov	r4, r0
 8004e80:	dd7f      	ble.n	8004f82 <_dtoa_r+0x8e2>
 8004e82:	f04f 0800 	mov.w	r8, #0
 8004e86:	6923      	ldr	r3, [r4, #16]
 8004e88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004e8c:	6918      	ldr	r0, [r3, #16]
 8004e8e:	f000 fe7f 	bl	8005b90 <__hi0bits>
 8004e92:	f1c0 0020 	rsb	r0, r0, #32
 8004e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e98:	4418      	add	r0, r3
 8004e9a:	f010 001f 	ands.w	r0, r0, #31
 8004e9e:	f000 8092 	beq.w	8004fc6 <_dtoa_r+0x926>
 8004ea2:	f1c0 0320 	rsb	r3, r0, #32
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	f340 808a 	ble.w	8004fc0 <_dtoa_r+0x920>
 8004eac:	f1c0 001c 	rsb	r0, r0, #28
 8004eb0:	9b06      	ldr	r3, [sp, #24]
 8004eb2:	4403      	add	r3, r0
 8004eb4:	9306      	str	r3, [sp, #24]
 8004eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eb8:	4403      	add	r3, r0
 8004eba:	4407      	add	r7, r0
 8004ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8004ebe:	9b06      	ldr	r3, [sp, #24]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	dd05      	ble.n	8004ed0 <_dtoa_r+0x830>
 8004ec4:	4659      	mov	r1, fp
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	4628      	mov	r0, r5
 8004eca:	f000 ffc7 	bl	8005e5c <__lshift>
 8004ece:	4683      	mov	fp, r0
 8004ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	dd05      	ble.n	8004ee2 <_dtoa_r+0x842>
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	461a      	mov	r2, r3
 8004eda:	4628      	mov	r0, r5
 8004edc:	f000 ffbe 	bl	8005e5c <__lshift>
 8004ee0:	4604      	mov	r4, r0
 8004ee2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d070      	beq.n	8004fca <_dtoa_r+0x92a>
 8004ee8:	4621      	mov	r1, r4
 8004eea:	4658      	mov	r0, fp
 8004eec:	f001 f826 	bl	8005f3c <__mcmp>
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	da6a      	bge.n	8004fca <_dtoa_r+0x92a>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	4659      	mov	r1, fp
 8004ef8:	220a      	movs	r2, #10
 8004efa:	4628      	mov	r0, r5
 8004efc:	f000 fdb8 	bl	8005a70 <__multadd>
 8004f00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f02:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004f06:	4683      	mov	fp, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 8194 	beq.w	8005236 <_dtoa_r+0xb96>
 8004f0e:	4631      	mov	r1, r6
 8004f10:	2300      	movs	r3, #0
 8004f12:	220a      	movs	r2, #10
 8004f14:	4628      	mov	r0, r5
 8004f16:	f000 fdab 	bl	8005a70 <__multadd>
 8004f1a:	f1b9 0f00 	cmp.w	r9, #0
 8004f1e:	4606      	mov	r6, r0
 8004f20:	f300 8093 	bgt.w	800504a <_dtoa_r+0x9aa>
 8004f24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	dc57      	bgt.n	8004fda <_dtoa_r+0x93a>
 8004f2a:	e08e      	b.n	800504a <_dtoa_r+0x9aa>
 8004f2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004f2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004f32:	e757      	b.n	8004de4 <_dtoa_r+0x744>
 8004f34:	3fe00000 	.word	0x3fe00000
 8004f38:	40240000 	.word	0x40240000
 8004f3c:	9b08      	ldr	r3, [sp, #32]
 8004f3e:	1e5c      	subs	r4, r3, #1
 8004f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f42:	42a3      	cmp	r3, r4
 8004f44:	bfbf      	itttt	lt
 8004f46:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004f48:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004f4a:	1ae2      	sublt	r2, r4, r3
 8004f4c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004f4e:	bfb6      	itet	lt
 8004f50:	189b      	addlt	r3, r3, r2
 8004f52:	1b1c      	subge	r4, r3, r4
 8004f54:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004f56:	9b08      	ldr	r3, [sp, #32]
 8004f58:	bfb8      	it	lt
 8004f5a:	2400      	movlt	r4, #0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	bfb9      	ittee	lt
 8004f60:	9b06      	ldrlt	r3, [sp, #24]
 8004f62:	9a08      	ldrlt	r2, [sp, #32]
 8004f64:	9f06      	ldrge	r7, [sp, #24]
 8004f66:	9b08      	ldrge	r3, [sp, #32]
 8004f68:	bfbc      	itt	lt
 8004f6a:	1a9f      	sublt	r7, r3, r2
 8004f6c:	2300      	movlt	r3, #0
 8004f6e:	e73b      	b.n	8004de8 <_dtoa_r+0x748>
 8004f70:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004f72:	9f06      	ldr	r7, [sp, #24]
 8004f74:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004f76:	e742      	b.n	8004dfe <_dtoa_r+0x75e>
 8004f78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f7a:	e76b      	b.n	8004e54 <_dtoa_r+0x7b4>
 8004f7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	dc19      	bgt.n	8004fb6 <_dtoa_r+0x916>
 8004f82:	9b04      	ldr	r3, [sp, #16]
 8004f84:	b9bb      	cbnz	r3, 8004fb6 <_dtoa_r+0x916>
 8004f86:	9b05      	ldr	r3, [sp, #20]
 8004f88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f8c:	b99b      	cbnz	r3, 8004fb6 <_dtoa_r+0x916>
 8004f8e:	9b05      	ldr	r3, [sp, #20]
 8004f90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f94:	0d1b      	lsrs	r3, r3, #20
 8004f96:	051b      	lsls	r3, r3, #20
 8004f98:	b183      	cbz	r3, 8004fbc <_dtoa_r+0x91c>
 8004f9a:	9b06      	ldr	r3, [sp, #24]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	9306      	str	r3, [sp, #24]
 8004fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8004fa6:	f04f 0801 	mov.w	r8, #1
 8004faa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f47f af6a 	bne.w	8004e86 <_dtoa_r+0x7e6>
 8004fb2:	2001      	movs	r0, #1
 8004fb4:	e76f      	b.n	8004e96 <_dtoa_r+0x7f6>
 8004fb6:	f04f 0800 	mov.w	r8, #0
 8004fba:	e7f6      	b.n	8004faa <_dtoa_r+0x90a>
 8004fbc:	4698      	mov	r8, r3
 8004fbe:	e7f4      	b.n	8004faa <_dtoa_r+0x90a>
 8004fc0:	f43f af7d 	beq.w	8004ebe <_dtoa_r+0x81e>
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	301c      	adds	r0, #28
 8004fc8:	e772      	b.n	8004eb0 <_dtoa_r+0x810>
 8004fca:	9b08      	ldr	r3, [sp, #32]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	dc36      	bgt.n	800503e <_dtoa_r+0x99e>
 8004fd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	dd33      	ble.n	800503e <_dtoa_r+0x99e>
 8004fd6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004fda:	f1b9 0f00 	cmp.w	r9, #0
 8004fde:	d10d      	bne.n	8004ffc <_dtoa_r+0x95c>
 8004fe0:	4621      	mov	r1, r4
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	2205      	movs	r2, #5
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	f000 fd42 	bl	8005a70 <__multadd>
 8004fec:	4601      	mov	r1, r0
 8004fee:	4604      	mov	r4, r0
 8004ff0:	4658      	mov	r0, fp
 8004ff2:	f000 ffa3 	bl	8005f3c <__mcmp>
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	f73f adb8 	bgt.w	8004b6c <_dtoa_r+0x4cc>
 8004ffc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ffe:	9f03      	ldr	r7, [sp, #12]
 8005000:	ea6f 0a03 	mvn.w	sl, r3
 8005004:	f04f 0800 	mov.w	r8, #0
 8005008:	4621      	mov	r1, r4
 800500a:	4628      	mov	r0, r5
 800500c:	f000 fd0e 	bl	8005a2c <_Bfree>
 8005010:	2e00      	cmp	r6, #0
 8005012:	f43f aea7 	beq.w	8004d64 <_dtoa_r+0x6c4>
 8005016:	f1b8 0f00 	cmp.w	r8, #0
 800501a:	d005      	beq.n	8005028 <_dtoa_r+0x988>
 800501c:	45b0      	cmp	r8, r6
 800501e:	d003      	beq.n	8005028 <_dtoa_r+0x988>
 8005020:	4641      	mov	r1, r8
 8005022:	4628      	mov	r0, r5
 8005024:	f000 fd02 	bl	8005a2c <_Bfree>
 8005028:	4631      	mov	r1, r6
 800502a:	4628      	mov	r0, r5
 800502c:	f000 fcfe 	bl	8005a2c <_Bfree>
 8005030:	e698      	b.n	8004d64 <_dtoa_r+0x6c4>
 8005032:	2400      	movs	r4, #0
 8005034:	4626      	mov	r6, r4
 8005036:	e7e1      	b.n	8004ffc <_dtoa_r+0x95c>
 8005038:	46c2      	mov	sl, r8
 800503a:	4626      	mov	r6, r4
 800503c:	e596      	b.n	8004b6c <_dtoa_r+0x4cc>
 800503e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005040:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 80fd 	beq.w	8005244 <_dtoa_r+0xba4>
 800504a:	2f00      	cmp	r7, #0
 800504c:	dd05      	ble.n	800505a <_dtoa_r+0x9ba>
 800504e:	4631      	mov	r1, r6
 8005050:	463a      	mov	r2, r7
 8005052:	4628      	mov	r0, r5
 8005054:	f000 ff02 	bl	8005e5c <__lshift>
 8005058:	4606      	mov	r6, r0
 800505a:	f1b8 0f00 	cmp.w	r8, #0
 800505e:	d05c      	beq.n	800511a <_dtoa_r+0xa7a>
 8005060:	6871      	ldr	r1, [r6, #4]
 8005062:	4628      	mov	r0, r5
 8005064:	f000 fca2 	bl	80059ac <_Balloc>
 8005068:	4607      	mov	r7, r0
 800506a:	b928      	cbnz	r0, 8005078 <_dtoa_r+0x9d8>
 800506c:	4b80      	ldr	r3, [pc, #512]	; (8005270 <_dtoa_r+0xbd0>)
 800506e:	4602      	mov	r2, r0
 8005070:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005074:	f7ff bb28 	b.w	80046c8 <_dtoa_r+0x28>
 8005078:	6932      	ldr	r2, [r6, #16]
 800507a:	3202      	adds	r2, #2
 800507c:	0092      	lsls	r2, r2, #2
 800507e:	f106 010c 	add.w	r1, r6, #12
 8005082:	300c      	adds	r0, #12
 8005084:	f000 fc84 	bl	8005990 <memcpy>
 8005088:	2201      	movs	r2, #1
 800508a:	4639      	mov	r1, r7
 800508c:	4628      	mov	r0, r5
 800508e:	f000 fee5 	bl	8005e5c <__lshift>
 8005092:	9b03      	ldr	r3, [sp, #12]
 8005094:	3301      	adds	r3, #1
 8005096:	9308      	str	r3, [sp, #32]
 8005098:	9b03      	ldr	r3, [sp, #12]
 800509a:	444b      	add	r3, r9
 800509c:	930a      	str	r3, [sp, #40]	; 0x28
 800509e:	9b04      	ldr	r3, [sp, #16]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	46b0      	mov	r8, r6
 80050a6:	9309      	str	r3, [sp, #36]	; 0x24
 80050a8:	4606      	mov	r6, r0
 80050aa:	9b08      	ldr	r3, [sp, #32]
 80050ac:	4621      	mov	r1, r4
 80050ae:	3b01      	subs	r3, #1
 80050b0:	4658      	mov	r0, fp
 80050b2:	9304      	str	r3, [sp, #16]
 80050b4:	f7ff fa6c 	bl	8004590 <quorem>
 80050b8:	4603      	mov	r3, r0
 80050ba:	3330      	adds	r3, #48	; 0x30
 80050bc:	9006      	str	r0, [sp, #24]
 80050be:	4641      	mov	r1, r8
 80050c0:	4658      	mov	r0, fp
 80050c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80050c4:	f000 ff3a 	bl	8005f3c <__mcmp>
 80050c8:	4632      	mov	r2, r6
 80050ca:	4681      	mov	r9, r0
 80050cc:	4621      	mov	r1, r4
 80050ce:	4628      	mov	r0, r5
 80050d0:	f000 ff50 	bl	8005f74 <__mdiff>
 80050d4:	68c2      	ldr	r2, [r0, #12]
 80050d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050d8:	4607      	mov	r7, r0
 80050da:	bb02      	cbnz	r2, 800511e <_dtoa_r+0xa7e>
 80050dc:	4601      	mov	r1, r0
 80050de:	4658      	mov	r0, fp
 80050e0:	f000 ff2c 	bl	8005f3c <__mcmp>
 80050e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050e6:	4602      	mov	r2, r0
 80050e8:	4639      	mov	r1, r7
 80050ea:	4628      	mov	r0, r5
 80050ec:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80050f0:	f000 fc9c 	bl	8005a2c <_Bfree>
 80050f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050f8:	9f08      	ldr	r7, [sp, #32]
 80050fa:	ea43 0102 	orr.w	r1, r3, r2
 80050fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005100:	430b      	orrs	r3, r1
 8005102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005104:	d10d      	bne.n	8005122 <_dtoa_r+0xa82>
 8005106:	2b39      	cmp	r3, #57	; 0x39
 8005108:	d029      	beq.n	800515e <_dtoa_r+0xabe>
 800510a:	f1b9 0f00 	cmp.w	r9, #0
 800510e:	dd01      	ble.n	8005114 <_dtoa_r+0xa74>
 8005110:	9b06      	ldr	r3, [sp, #24]
 8005112:	3331      	adds	r3, #49	; 0x31
 8005114:	9a04      	ldr	r2, [sp, #16]
 8005116:	7013      	strb	r3, [r2, #0]
 8005118:	e776      	b.n	8005008 <_dtoa_r+0x968>
 800511a:	4630      	mov	r0, r6
 800511c:	e7b9      	b.n	8005092 <_dtoa_r+0x9f2>
 800511e:	2201      	movs	r2, #1
 8005120:	e7e2      	b.n	80050e8 <_dtoa_r+0xa48>
 8005122:	f1b9 0f00 	cmp.w	r9, #0
 8005126:	db06      	blt.n	8005136 <_dtoa_r+0xa96>
 8005128:	9922      	ldr	r1, [sp, #136]	; 0x88
 800512a:	ea41 0909 	orr.w	r9, r1, r9
 800512e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005130:	ea59 0101 	orrs.w	r1, r9, r1
 8005134:	d120      	bne.n	8005178 <_dtoa_r+0xad8>
 8005136:	2a00      	cmp	r2, #0
 8005138:	ddec      	ble.n	8005114 <_dtoa_r+0xa74>
 800513a:	4659      	mov	r1, fp
 800513c:	2201      	movs	r2, #1
 800513e:	4628      	mov	r0, r5
 8005140:	9308      	str	r3, [sp, #32]
 8005142:	f000 fe8b 	bl	8005e5c <__lshift>
 8005146:	4621      	mov	r1, r4
 8005148:	4683      	mov	fp, r0
 800514a:	f000 fef7 	bl	8005f3c <__mcmp>
 800514e:	2800      	cmp	r0, #0
 8005150:	9b08      	ldr	r3, [sp, #32]
 8005152:	dc02      	bgt.n	800515a <_dtoa_r+0xaba>
 8005154:	d1de      	bne.n	8005114 <_dtoa_r+0xa74>
 8005156:	07da      	lsls	r2, r3, #31
 8005158:	d5dc      	bpl.n	8005114 <_dtoa_r+0xa74>
 800515a:	2b39      	cmp	r3, #57	; 0x39
 800515c:	d1d8      	bne.n	8005110 <_dtoa_r+0xa70>
 800515e:	9a04      	ldr	r2, [sp, #16]
 8005160:	2339      	movs	r3, #57	; 0x39
 8005162:	7013      	strb	r3, [r2, #0]
 8005164:	463b      	mov	r3, r7
 8005166:	461f      	mov	r7, r3
 8005168:	3b01      	subs	r3, #1
 800516a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800516e:	2a39      	cmp	r2, #57	; 0x39
 8005170:	d050      	beq.n	8005214 <_dtoa_r+0xb74>
 8005172:	3201      	adds	r2, #1
 8005174:	701a      	strb	r2, [r3, #0]
 8005176:	e747      	b.n	8005008 <_dtoa_r+0x968>
 8005178:	2a00      	cmp	r2, #0
 800517a:	dd03      	ble.n	8005184 <_dtoa_r+0xae4>
 800517c:	2b39      	cmp	r3, #57	; 0x39
 800517e:	d0ee      	beq.n	800515e <_dtoa_r+0xabe>
 8005180:	3301      	adds	r3, #1
 8005182:	e7c7      	b.n	8005114 <_dtoa_r+0xa74>
 8005184:	9a08      	ldr	r2, [sp, #32]
 8005186:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005188:	f802 3c01 	strb.w	r3, [r2, #-1]
 800518c:	428a      	cmp	r2, r1
 800518e:	d02a      	beq.n	80051e6 <_dtoa_r+0xb46>
 8005190:	4659      	mov	r1, fp
 8005192:	2300      	movs	r3, #0
 8005194:	220a      	movs	r2, #10
 8005196:	4628      	mov	r0, r5
 8005198:	f000 fc6a 	bl	8005a70 <__multadd>
 800519c:	45b0      	cmp	r8, r6
 800519e:	4683      	mov	fp, r0
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	f04f 020a 	mov.w	r2, #10
 80051a8:	4641      	mov	r1, r8
 80051aa:	4628      	mov	r0, r5
 80051ac:	d107      	bne.n	80051be <_dtoa_r+0xb1e>
 80051ae:	f000 fc5f 	bl	8005a70 <__multadd>
 80051b2:	4680      	mov	r8, r0
 80051b4:	4606      	mov	r6, r0
 80051b6:	9b08      	ldr	r3, [sp, #32]
 80051b8:	3301      	adds	r3, #1
 80051ba:	9308      	str	r3, [sp, #32]
 80051bc:	e775      	b.n	80050aa <_dtoa_r+0xa0a>
 80051be:	f000 fc57 	bl	8005a70 <__multadd>
 80051c2:	4631      	mov	r1, r6
 80051c4:	4680      	mov	r8, r0
 80051c6:	2300      	movs	r3, #0
 80051c8:	220a      	movs	r2, #10
 80051ca:	4628      	mov	r0, r5
 80051cc:	f000 fc50 	bl	8005a70 <__multadd>
 80051d0:	4606      	mov	r6, r0
 80051d2:	e7f0      	b.n	80051b6 <_dtoa_r+0xb16>
 80051d4:	f1b9 0f00 	cmp.w	r9, #0
 80051d8:	9a03      	ldr	r2, [sp, #12]
 80051da:	bfcc      	ite	gt
 80051dc:	464f      	movgt	r7, r9
 80051de:	2701      	movle	r7, #1
 80051e0:	4417      	add	r7, r2
 80051e2:	f04f 0800 	mov.w	r8, #0
 80051e6:	4659      	mov	r1, fp
 80051e8:	2201      	movs	r2, #1
 80051ea:	4628      	mov	r0, r5
 80051ec:	9308      	str	r3, [sp, #32]
 80051ee:	f000 fe35 	bl	8005e5c <__lshift>
 80051f2:	4621      	mov	r1, r4
 80051f4:	4683      	mov	fp, r0
 80051f6:	f000 fea1 	bl	8005f3c <__mcmp>
 80051fa:	2800      	cmp	r0, #0
 80051fc:	dcb2      	bgt.n	8005164 <_dtoa_r+0xac4>
 80051fe:	d102      	bne.n	8005206 <_dtoa_r+0xb66>
 8005200:	9b08      	ldr	r3, [sp, #32]
 8005202:	07db      	lsls	r3, r3, #31
 8005204:	d4ae      	bmi.n	8005164 <_dtoa_r+0xac4>
 8005206:	463b      	mov	r3, r7
 8005208:	461f      	mov	r7, r3
 800520a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800520e:	2a30      	cmp	r2, #48	; 0x30
 8005210:	d0fa      	beq.n	8005208 <_dtoa_r+0xb68>
 8005212:	e6f9      	b.n	8005008 <_dtoa_r+0x968>
 8005214:	9a03      	ldr	r2, [sp, #12]
 8005216:	429a      	cmp	r2, r3
 8005218:	d1a5      	bne.n	8005166 <_dtoa_r+0xac6>
 800521a:	f10a 0a01 	add.w	sl, sl, #1
 800521e:	2331      	movs	r3, #49	; 0x31
 8005220:	e779      	b.n	8005116 <_dtoa_r+0xa76>
 8005222:	4b14      	ldr	r3, [pc, #80]	; (8005274 <_dtoa_r+0xbd4>)
 8005224:	f7ff baa7 	b.w	8004776 <_dtoa_r+0xd6>
 8005228:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800522a:	2b00      	cmp	r3, #0
 800522c:	f47f aa80 	bne.w	8004730 <_dtoa_r+0x90>
 8005230:	4b11      	ldr	r3, [pc, #68]	; (8005278 <_dtoa_r+0xbd8>)
 8005232:	f7ff baa0 	b.w	8004776 <_dtoa_r+0xd6>
 8005236:	f1b9 0f00 	cmp.w	r9, #0
 800523a:	dc03      	bgt.n	8005244 <_dtoa_r+0xba4>
 800523c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800523e:	2b02      	cmp	r3, #2
 8005240:	f73f aecb 	bgt.w	8004fda <_dtoa_r+0x93a>
 8005244:	9f03      	ldr	r7, [sp, #12]
 8005246:	4621      	mov	r1, r4
 8005248:	4658      	mov	r0, fp
 800524a:	f7ff f9a1 	bl	8004590 <quorem>
 800524e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005252:	f807 3b01 	strb.w	r3, [r7], #1
 8005256:	9a03      	ldr	r2, [sp, #12]
 8005258:	1aba      	subs	r2, r7, r2
 800525a:	4591      	cmp	r9, r2
 800525c:	ddba      	ble.n	80051d4 <_dtoa_r+0xb34>
 800525e:	4659      	mov	r1, fp
 8005260:	2300      	movs	r3, #0
 8005262:	220a      	movs	r2, #10
 8005264:	4628      	mov	r0, r5
 8005266:	f000 fc03 	bl	8005a70 <__multadd>
 800526a:	4683      	mov	fp, r0
 800526c:	e7eb      	b.n	8005246 <_dtoa_r+0xba6>
 800526e:	bf00      	nop
 8005270:	08007690 	.word	0x08007690
 8005274:	08007490 	.word	0x08007490
 8005278:	08007611 	.word	0x08007611

0800527c <__errno>:
 800527c:	4b01      	ldr	r3, [pc, #4]	; (8005284 <__errno+0x8>)
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	20000044 	.word	0x20000044

08005288 <rshift>:
 8005288:	6903      	ldr	r3, [r0, #16]
 800528a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800528e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005292:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005296:	f100 0414 	add.w	r4, r0, #20
 800529a:	dd45      	ble.n	8005328 <rshift+0xa0>
 800529c:	f011 011f 	ands.w	r1, r1, #31
 80052a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80052a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80052a8:	d10c      	bne.n	80052c4 <rshift+0x3c>
 80052aa:	f100 0710 	add.w	r7, r0, #16
 80052ae:	4629      	mov	r1, r5
 80052b0:	42b1      	cmp	r1, r6
 80052b2:	d334      	bcc.n	800531e <rshift+0x96>
 80052b4:	1a9b      	subs	r3, r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	1eea      	subs	r2, r5, #3
 80052ba:	4296      	cmp	r6, r2
 80052bc:	bf38      	it	cc
 80052be:	2300      	movcc	r3, #0
 80052c0:	4423      	add	r3, r4
 80052c2:	e015      	b.n	80052f0 <rshift+0x68>
 80052c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80052c8:	f1c1 0820 	rsb	r8, r1, #32
 80052cc:	40cf      	lsrs	r7, r1
 80052ce:	f105 0e04 	add.w	lr, r5, #4
 80052d2:	46a1      	mov	r9, r4
 80052d4:	4576      	cmp	r6, lr
 80052d6:	46f4      	mov	ip, lr
 80052d8:	d815      	bhi.n	8005306 <rshift+0x7e>
 80052da:	1a9a      	subs	r2, r3, r2
 80052dc:	0092      	lsls	r2, r2, #2
 80052de:	3a04      	subs	r2, #4
 80052e0:	3501      	adds	r5, #1
 80052e2:	42ae      	cmp	r6, r5
 80052e4:	bf38      	it	cc
 80052e6:	2200      	movcc	r2, #0
 80052e8:	18a3      	adds	r3, r4, r2
 80052ea:	50a7      	str	r7, [r4, r2]
 80052ec:	b107      	cbz	r7, 80052f0 <rshift+0x68>
 80052ee:	3304      	adds	r3, #4
 80052f0:	1b1a      	subs	r2, r3, r4
 80052f2:	42a3      	cmp	r3, r4
 80052f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80052f8:	bf08      	it	eq
 80052fa:	2300      	moveq	r3, #0
 80052fc:	6102      	str	r2, [r0, #16]
 80052fe:	bf08      	it	eq
 8005300:	6143      	streq	r3, [r0, #20]
 8005302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005306:	f8dc c000 	ldr.w	ip, [ip]
 800530a:	fa0c fc08 	lsl.w	ip, ip, r8
 800530e:	ea4c 0707 	orr.w	r7, ip, r7
 8005312:	f849 7b04 	str.w	r7, [r9], #4
 8005316:	f85e 7b04 	ldr.w	r7, [lr], #4
 800531a:	40cf      	lsrs	r7, r1
 800531c:	e7da      	b.n	80052d4 <rshift+0x4c>
 800531e:	f851 cb04 	ldr.w	ip, [r1], #4
 8005322:	f847 cf04 	str.w	ip, [r7, #4]!
 8005326:	e7c3      	b.n	80052b0 <rshift+0x28>
 8005328:	4623      	mov	r3, r4
 800532a:	e7e1      	b.n	80052f0 <rshift+0x68>

0800532c <__hexdig_fun>:
 800532c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005330:	2b09      	cmp	r3, #9
 8005332:	d802      	bhi.n	800533a <__hexdig_fun+0xe>
 8005334:	3820      	subs	r0, #32
 8005336:	b2c0      	uxtb	r0, r0
 8005338:	4770      	bx	lr
 800533a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800533e:	2b05      	cmp	r3, #5
 8005340:	d801      	bhi.n	8005346 <__hexdig_fun+0x1a>
 8005342:	3847      	subs	r0, #71	; 0x47
 8005344:	e7f7      	b.n	8005336 <__hexdig_fun+0xa>
 8005346:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800534a:	2b05      	cmp	r3, #5
 800534c:	d801      	bhi.n	8005352 <__hexdig_fun+0x26>
 800534e:	3827      	subs	r0, #39	; 0x27
 8005350:	e7f1      	b.n	8005336 <__hexdig_fun+0xa>
 8005352:	2000      	movs	r0, #0
 8005354:	4770      	bx	lr
	...

08005358 <__gethex>:
 8005358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800535c:	b08b      	sub	sp, #44	; 0x2c
 800535e:	468b      	mov	fp, r1
 8005360:	9305      	str	r3, [sp, #20]
 8005362:	4bb2      	ldr	r3, [pc, #712]	; (800562c <__gethex+0x2d4>)
 8005364:	9002      	str	r0, [sp, #8]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	9303      	str	r3, [sp, #12]
 800536a:	4618      	mov	r0, r3
 800536c:	4690      	mov	r8, r2
 800536e:	f7fa ff37 	bl	80001e0 <strlen>
 8005372:	9b03      	ldr	r3, [sp, #12]
 8005374:	f8db 2000 	ldr.w	r2, [fp]
 8005378:	4403      	add	r3, r0
 800537a:	4682      	mov	sl, r0
 800537c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005380:	9306      	str	r3, [sp, #24]
 8005382:	1c93      	adds	r3, r2, #2
 8005384:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005388:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800538c:	32fe      	adds	r2, #254	; 0xfe
 800538e:	18d1      	adds	r1, r2, r3
 8005390:	461f      	mov	r7, r3
 8005392:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005396:	9101      	str	r1, [sp, #4]
 8005398:	2830      	cmp	r0, #48	; 0x30
 800539a:	d0f8      	beq.n	800538e <__gethex+0x36>
 800539c:	f7ff ffc6 	bl	800532c <__hexdig_fun>
 80053a0:	4604      	mov	r4, r0
 80053a2:	2800      	cmp	r0, #0
 80053a4:	d13a      	bne.n	800541c <__gethex+0xc4>
 80053a6:	9903      	ldr	r1, [sp, #12]
 80053a8:	4652      	mov	r2, sl
 80053aa:	4638      	mov	r0, r7
 80053ac:	f001 fa16 	bl	80067dc <strncmp>
 80053b0:	4605      	mov	r5, r0
 80053b2:	2800      	cmp	r0, #0
 80053b4:	d166      	bne.n	8005484 <__gethex+0x12c>
 80053b6:	f817 000a 	ldrb.w	r0, [r7, sl]
 80053ba:	eb07 060a 	add.w	r6, r7, sl
 80053be:	f7ff ffb5 	bl	800532c <__hexdig_fun>
 80053c2:	2800      	cmp	r0, #0
 80053c4:	d060      	beq.n	8005488 <__gethex+0x130>
 80053c6:	4633      	mov	r3, r6
 80053c8:	7818      	ldrb	r0, [r3, #0]
 80053ca:	2830      	cmp	r0, #48	; 0x30
 80053cc:	461f      	mov	r7, r3
 80053ce:	f103 0301 	add.w	r3, r3, #1
 80053d2:	d0f9      	beq.n	80053c8 <__gethex+0x70>
 80053d4:	f7ff ffaa 	bl	800532c <__hexdig_fun>
 80053d8:	2301      	movs	r3, #1
 80053da:	fab0 f480 	clz	r4, r0
 80053de:	0964      	lsrs	r4, r4, #5
 80053e0:	4635      	mov	r5, r6
 80053e2:	9301      	str	r3, [sp, #4]
 80053e4:	463a      	mov	r2, r7
 80053e6:	4616      	mov	r6, r2
 80053e8:	3201      	adds	r2, #1
 80053ea:	7830      	ldrb	r0, [r6, #0]
 80053ec:	f7ff ff9e 	bl	800532c <__hexdig_fun>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	d1f8      	bne.n	80053e6 <__gethex+0x8e>
 80053f4:	9903      	ldr	r1, [sp, #12]
 80053f6:	4652      	mov	r2, sl
 80053f8:	4630      	mov	r0, r6
 80053fa:	f001 f9ef 	bl	80067dc <strncmp>
 80053fe:	b980      	cbnz	r0, 8005422 <__gethex+0xca>
 8005400:	b94d      	cbnz	r5, 8005416 <__gethex+0xbe>
 8005402:	eb06 050a 	add.w	r5, r6, sl
 8005406:	462a      	mov	r2, r5
 8005408:	4616      	mov	r6, r2
 800540a:	3201      	adds	r2, #1
 800540c:	7830      	ldrb	r0, [r6, #0]
 800540e:	f7ff ff8d 	bl	800532c <__hexdig_fun>
 8005412:	2800      	cmp	r0, #0
 8005414:	d1f8      	bne.n	8005408 <__gethex+0xb0>
 8005416:	1bad      	subs	r5, r5, r6
 8005418:	00ad      	lsls	r5, r5, #2
 800541a:	e004      	b.n	8005426 <__gethex+0xce>
 800541c:	2400      	movs	r4, #0
 800541e:	4625      	mov	r5, r4
 8005420:	e7e0      	b.n	80053e4 <__gethex+0x8c>
 8005422:	2d00      	cmp	r5, #0
 8005424:	d1f7      	bne.n	8005416 <__gethex+0xbe>
 8005426:	7833      	ldrb	r3, [r6, #0]
 8005428:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800542c:	2b50      	cmp	r3, #80	; 0x50
 800542e:	d139      	bne.n	80054a4 <__gethex+0x14c>
 8005430:	7873      	ldrb	r3, [r6, #1]
 8005432:	2b2b      	cmp	r3, #43	; 0x2b
 8005434:	d02a      	beq.n	800548c <__gethex+0x134>
 8005436:	2b2d      	cmp	r3, #45	; 0x2d
 8005438:	d02c      	beq.n	8005494 <__gethex+0x13c>
 800543a:	1c71      	adds	r1, r6, #1
 800543c:	f04f 0900 	mov.w	r9, #0
 8005440:	7808      	ldrb	r0, [r1, #0]
 8005442:	f7ff ff73 	bl	800532c <__hexdig_fun>
 8005446:	1e43      	subs	r3, r0, #1
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b18      	cmp	r3, #24
 800544c:	d82a      	bhi.n	80054a4 <__gethex+0x14c>
 800544e:	f1a0 0210 	sub.w	r2, r0, #16
 8005452:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005456:	f7ff ff69 	bl	800532c <__hexdig_fun>
 800545a:	1e43      	subs	r3, r0, #1
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b18      	cmp	r3, #24
 8005460:	d91b      	bls.n	800549a <__gethex+0x142>
 8005462:	f1b9 0f00 	cmp.w	r9, #0
 8005466:	d000      	beq.n	800546a <__gethex+0x112>
 8005468:	4252      	negs	r2, r2
 800546a:	4415      	add	r5, r2
 800546c:	f8cb 1000 	str.w	r1, [fp]
 8005470:	b1d4      	cbz	r4, 80054a8 <__gethex+0x150>
 8005472:	9b01      	ldr	r3, [sp, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	bf14      	ite	ne
 8005478:	2700      	movne	r7, #0
 800547a:	2706      	moveq	r7, #6
 800547c:	4638      	mov	r0, r7
 800547e:	b00b      	add	sp, #44	; 0x2c
 8005480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005484:	463e      	mov	r6, r7
 8005486:	4625      	mov	r5, r4
 8005488:	2401      	movs	r4, #1
 800548a:	e7cc      	b.n	8005426 <__gethex+0xce>
 800548c:	f04f 0900 	mov.w	r9, #0
 8005490:	1cb1      	adds	r1, r6, #2
 8005492:	e7d5      	b.n	8005440 <__gethex+0xe8>
 8005494:	f04f 0901 	mov.w	r9, #1
 8005498:	e7fa      	b.n	8005490 <__gethex+0x138>
 800549a:	230a      	movs	r3, #10
 800549c:	fb03 0202 	mla	r2, r3, r2, r0
 80054a0:	3a10      	subs	r2, #16
 80054a2:	e7d6      	b.n	8005452 <__gethex+0xfa>
 80054a4:	4631      	mov	r1, r6
 80054a6:	e7e1      	b.n	800546c <__gethex+0x114>
 80054a8:	1bf3      	subs	r3, r6, r7
 80054aa:	3b01      	subs	r3, #1
 80054ac:	4621      	mov	r1, r4
 80054ae:	2b07      	cmp	r3, #7
 80054b0:	dc0a      	bgt.n	80054c8 <__gethex+0x170>
 80054b2:	9802      	ldr	r0, [sp, #8]
 80054b4:	f000 fa7a 	bl	80059ac <_Balloc>
 80054b8:	4604      	mov	r4, r0
 80054ba:	b940      	cbnz	r0, 80054ce <__gethex+0x176>
 80054bc:	4b5c      	ldr	r3, [pc, #368]	; (8005630 <__gethex+0x2d8>)
 80054be:	4602      	mov	r2, r0
 80054c0:	21de      	movs	r1, #222	; 0xde
 80054c2:	485c      	ldr	r0, [pc, #368]	; (8005634 <__gethex+0x2dc>)
 80054c4:	f001 f9ac 	bl	8006820 <__assert_func>
 80054c8:	3101      	adds	r1, #1
 80054ca:	105b      	asrs	r3, r3, #1
 80054cc:	e7ef      	b.n	80054ae <__gethex+0x156>
 80054ce:	f100 0914 	add.w	r9, r0, #20
 80054d2:	f04f 0b00 	mov.w	fp, #0
 80054d6:	f1ca 0301 	rsb	r3, sl, #1
 80054da:	f8cd 9010 	str.w	r9, [sp, #16]
 80054de:	f8cd b004 	str.w	fp, [sp, #4]
 80054e2:	9308      	str	r3, [sp, #32]
 80054e4:	42b7      	cmp	r7, r6
 80054e6:	d33f      	bcc.n	8005568 <__gethex+0x210>
 80054e8:	9f04      	ldr	r7, [sp, #16]
 80054ea:	9b01      	ldr	r3, [sp, #4]
 80054ec:	f847 3b04 	str.w	r3, [r7], #4
 80054f0:	eba7 0709 	sub.w	r7, r7, r9
 80054f4:	10bf      	asrs	r7, r7, #2
 80054f6:	6127      	str	r7, [r4, #16]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fb49 	bl	8005b90 <__hi0bits>
 80054fe:	017f      	lsls	r7, r7, #5
 8005500:	f8d8 6000 	ldr.w	r6, [r8]
 8005504:	1a3f      	subs	r7, r7, r0
 8005506:	42b7      	cmp	r7, r6
 8005508:	dd62      	ble.n	80055d0 <__gethex+0x278>
 800550a:	1bbf      	subs	r7, r7, r6
 800550c:	4639      	mov	r1, r7
 800550e:	4620      	mov	r0, r4
 8005510:	f000 fedf 	bl	80062d2 <__any_on>
 8005514:	4682      	mov	sl, r0
 8005516:	b1a8      	cbz	r0, 8005544 <__gethex+0x1ec>
 8005518:	1e7b      	subs	r3, r7, #1
 800551a:	1159      	asrs	r1, r3, #5
 800551c:	f003 021f 	and.w	r2, r3, #31
 8005520:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005524:	f04f 0a01 	mov.w	sl, #1
 8005528:	fa0a f202 	lsl.w	r2, sl, r2
 800552c:	420a      	tst	r2, r1
 800552e:	d009      	beq.n	8005544 <__gethex+0x1ec>
 8005530:	4553      	cmp	r3, sl
 8005532:	dd05      	ble.n	8005540 <__gethex+0x1e8>
 8005534:	1eb9      	subs	r1, r7, #2
 8005536:	4620      	mov	r0, r4
 8005538:	f000 fecb 	bl	80062d2 <__any_on>
 800553c:	2800      	cmp	r0, #0
 800553e:	d144      	bne.n	80055ca <__gethex+0x272>
 8005540:	f04f 0a02 	mov.w	sl, #2
 8005544:	4639      	mov	r1, r7
 8005546:	4620      	mov	r0, r4
 8005548:	f7ff fe9e 	bl	8005288 <rshift>
 800554c:	443d      	add	r5, r7
 800554e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005552:	42ab      	cmp	r3, r5
 8005554:	da4a      	bge.n	80055ec <__gethex+0x294>
 8005556:	9802      	ldr	r0, [sp, #8]
 8005558:	4621      	mov	r1, r4
 800555a:	f000 fa67 	bl	8005a2c <_Bfree>
 800555e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005560:	2300      	movs	r3, #0
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	27a3      	movs	r7, #163	; 0xa3
 8005566:	e789      	b.n	800547c <__gethex+0x124>
 8005568:	1e73      	subs	r3, r6, #1
 800556a:	9a06      	ldr	r2, [sp, #24]
 800556c:	9307      	str	r3, [sp, #28]
 800556e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005572:	4293      	cmp	r3, r2
 8005574:	d019      	beq.n	80055aa <__gethex+0x252>
 8005576:	f1bb 0f20 	cmp.w	fp, #32
 800557a:	d107      	bne.n	800558c <__gethex+0x234>
 800557c:	9b04      	ldr	r3, [sp, #16]
 800557e:	9a01      	ldr	r2, [sp, #4]
 8005580:	f843 2b04 	str.w	r2, [r3], #4
 8005584:	9304      	str	r3, [sp, #16]
 8005586:	2300      	movs	r3, #0
 8005588:	9301      	str	r3, [sp, #4]
 800558a:	469b      	mov	fp, r3
 800558c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005590:	f7ff fecc 	bl	800532c <__hexdig_fun>
 8005594:	9b01      	ldr	r3, [sp, #4]
 8005596:	f000 000f 	and.w	r0, r0, #15
 800559a:	fa00 f00b 	lsl.w	r0, r0, fp
 800559e:	4303      	orrs	r3, r0
 80055a0:	9301      	str	r3, [sp, #4]
 80055a2:	f10b 0b04 	add.w	fp, fp, #4
 80055a6:	9b07      	ldr	r3, [sp, #28]
 80055a8:	e00d      	b.n	80055c6 <__gethex+0x26e>
 80055aa:	9a08      	ldr	r2, [sp, #32]
 80055ac:	1e73      	subs	r3, r6, #1
 80055ae:	4413      	add	r3, r2
 80055b0:	42bb      	cmp	r3, r7
 80055b2:	d3e0      	bcc.n	8005576 <__gethex+0x21e>
 80055b4:	4618      	mov	r0, r3
 80055b6:	9903      	ldr	r1, [sp, #12]
 80055b8:	9309      	str	r3, [sp, #36]	; 0x24
 80055ba:	4652      	mov	r2, sl
 80055bc:	f001 f90e 	bl	80067dc <strncmp>
 80055c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055c2:	2800      	cmp	r0, #0
 80055c4:	d1d7      	bne.n	8005576 <__gethex+0x21e>
 80055c6:	461e      	mov	r6, r3
 80055c8:	e78c      	b.n	80054e4 <__gethex+0x18c>
 80055ca:	f04f 0a03 	mov.w	sl, #3
 80055ce:	e7b9      	b.n	8005544 <__gethex+0x1ec>
 80055d0:	da09      	bge.n	80055e6 <__gethex+0x28e>
 80055d2:	1bf7      	subs	r7, r6, r7
 80055d4:	4621      	mov	r1, r4
 80055d6:	9802      	ldr	r0, [sp, #8]
 80055d8:	463a      	mov	r2, r7
 80055da:	f000 fc3f 	bl	8005e5c <__lshift>
 80055de:	1bed      	subs	r5, r5, r7
 80055e0:	4604      	mov	r4, r0
 80055e2:	f100 0914 	add.w	r9, r0, #20
 80055e6:	f04f 0a00 	mov.w	sl, #0
 80055ea:	e7b0      	b.n	800554e <__gethex+0x1f6>
 80055ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80055f0:	42a8      	cmp	r0, r5
 80055f2:	dd71      	ble.n	80056d8 <__gethex+0x380>
 80055f4:	1b45      	subs	r5, r0, r5
 80055f6:	42ae      	cmp	r6, r5
 80055f8:	dc35      	bgt.n	8005666 <__gethex+0x30e>
 80055fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d029      	beq.n	8005656 <__gethex+0x2fe>
 8005602:	2b03      	cmp	r3, #3
 8005604:	d02b      	beq.n	800565e <__gethex+0x306>
 8005606:	2b01      	cmp	r3, #1
 8005608:	d11c      	bne.n	8005644 <__gethex+0x2ec>
 800560a:	42ae      	cmp	r6, r5
 800560c:	d11a      	bne.n	8005644 <__gethex+0x2ec>
 800560e:	2e01      	cmp	r6, #1
 8005610:	d112      	bne.n	8005638 <__gethex+0x2e0>
 8005612:	9a05      	ldr	r2, [sp, #20]
 8005614:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005618:	6013      	str	r3, [r2, #0]
 800561a:	2301      	movs	r3, #1
 800561c:	6123      	str	r3, [r4, #16]
 800561e:	f8c9 3000 	str.w	r3, [r9]
 8005622:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005624:	2762      	movs	r7, #98	; 0x62
 8005626:	601c      	str	r4, [r3, #0]
 8005628:	e728      	b.n	800547c <__gethex+0x124>
 800562a:	bf00      	nop
 800562c:	08007708 	.word	0x08007708
 8005630:	08007690 	.word	0x08007690
 8005634:	080076a1 	.word	0x080076a1
 8005638:	1e71      	subs	r1, r6, #1
 800563a:	4620      	mov	r0, r4
 800563c:	f000 fe49 	bl	80062d2 <__any_on>
 8005640:	2800      	cmp	r0, #0
 8005642:	d1e6      	bne.n	8005612 <__gethex+0x2ba>
 8005644:	9802      	ldr	r0, [sp, #8]
 8005646:	4621      	mov	r1, r4
 8005648:	f000 f9f0 	bl	8005a2c <_Bfree>
 800564c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800564e:	2300      	movs	r3, #0
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	2750      	movs	r7, #80	; 0x50
 8005654:	e712      	b.n	800547c <__gethex+0x124>
 8005656:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1f3      	bne.n	8005644 <__gethex+0x2ec>
 800565c:	e7d9      	b.n	8005612 <__gethex+0x2ba>
 800565e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1d6      	bne.n	8005612 <__gethex+0x2ba>
 8005664:	e7ee      	b.n	8005644 <__gethex+0x2ec>
 8005666:	1e6f      	subs	r7, r5, #1
 8005668:	f1ba 0f00 	cmp.w	sl, #0
 800566c:	d131      	bne.n	80056d2 <__gethex+0x37a>
 800566e:	b127      	cbz	r7, 800567a <__gethex+0x322>
 8005670:	4639      	mov	r1, r7
 8005672:	4620      	mov	r0, r4
 8005674:	f000 fe2d 	bl	80062d2 <__any_on>
 8005678:	4682      	mov	sl, r0
 800567a:	117b      	asrs	r3, r7, #5
 800567c:	2101      	movs	r1, #1
 800567e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005682:	f007 071f 	and.w	r7, r7, #31
 8005686:	fa01 f707 	lsl.w	r7, r1, r7
 800568a:	421f      	tst	r7, r3
 800568c:	4629      	mov	r1, r5
 800568e:	4620      	mov	r0, r4
 8005690:	bf18      	it	ne
 8005692:	f04a 0a02 	orrne.w	sl, sl, #2
 8005696:	1b76      	subs	r6, r6, r5
 8005698:	f7ff fdf6 	bl	8005288 <rshift>
 800569c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80056a0:	2702      	movs	r7, #2
 80056a2:	f1ba 0f00 	cmp.w	sl, #0
 80056a6:	d048      	beq.n	800573a <__gethex+0x3e2>
 80056a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d015      	beq.n	80056dc <__gethex+0x384>
 80056b0:	2b03      	cmp	r3, #3
 80056b2:	d017      	beq.n	80056e4 <__gethex+0x38c>
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d109      	bne.n	80056cc <__gethex+0x374>
 80056b8:	f01a 0f02 	tst.w	sl, #2
 80056bc:	d006      	beq.n	80056cc <__gethex+0x374>
 80056be:	f8d9 0000 	ldr.w	r0, [r9]
 80056c2:	ea4a 0a00 	orr.w	sl, sl, r0
 80056c6:	f01a 0f01 	tst.w	sl, #1
 80056ca:	d10e      	bne.n	80056ea <__gethex+0x392>
 80056cc:	f047 0710 	orr.w	r7, r7, #16
 80056d0:	e033      	b.n	800573a <__gethex+0x3e2>
 80056d2:	f04f 0a01 	mov.w	sl, #1
 80056d6:	e7d0      	b.n	800567a <__gethex+0x322>
 80056d8:	2701      	movs	r7, #1
 80056da:	e7e2      	b.n	80056a2 <__gethex+0x34a>
 80056dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056de:	f1c3 0301 	rsb	r3, r3, #1
 80056e2:	9315      	str	r3, [sp, #84]	; 0x54
 80056e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0f0      	beq.n	80056cc <__gethex+0x374>
 80056ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80056ee:	f104 0314 	add.w	r3, r4, #20
 80056f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80056f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80056fa:	f04f 0c00 	mov.w	ip, #0
 80056fe:	4618      	mov	r0, r3
 8005700:	f853 2b04 	ldr.w	r2, [r3], #4
 8005704:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8005708:	d01c      	beq.n	8005744 <__gethex+0x3ec>
 800570a:	3201      	adds	r2, #1
 800570c:	6002      	str	r2, [r0, #0]
 800570e:	2f02      	cmp	r7, #2
 8005710:	f104 0314 	add.w	r3, r4, #20
 8005714:	d13d      	bne.n	8005792 <__gethex+0x43a>
 8005716:	f8d8 2000 	ldr.w	r2, [r8]
 800571a:	3a01      	subs	r2, #1
 800571c:	42b2      	cmp	r2, r6
 800571e:	d10a      	bne.n	8005736 <__gethex+0x3de>
 8005720:	1171      	asrs	r1, r6, #5
 8005722:	2201      	movs	r2, #1
 8005724:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005728:	f006 061f 	and.w	r6, r6, #31
 800572c:	fa02 f606 	lsl.w	r6, r2, r6
 8005730:	421e      	tst	r6, r3
 8005732:	bf18      	it	ne
 8005734:	4617      	movne	r7, r2
 8005736:	f047 0720 	orr.w	r7, r7, #32
 800573a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800573c:	601c      	str	r4, [r3, #0]
 800573e:	9b05      	ldr	r3, [sp, #20]
 8005740:	601d      	str	r5, [r3, #0]
 8005742:	e69b      	b.n	800547c <__gethex+0x124>
 8005744:	4299      	cmp	r1, r3
 8005746:	f843 cc04 	str.w	ip, [r3, #-4]
 800574a:	d8d8      	bhi.n	80056fe <__gethex+0x3a6>
 800574c:	68a3      	ldr	r3, [r4, #8]
 800574e:	459b      	cmp	fp, r3
 8005750:	db17      	blt.n	8005782 <__gethex+0x42a>
 8005752:	6861      	ldr	r1, [r4, #4]
 8005754:	9802      	ldr	r0, [sp, #8]
 8005756:	3101      	adds	r1, #1
 8005758:	f000 f928 	bl	80059ac <_Balloc>
 800575c:	4681      	mov	r9, r0
 800575e:	b918      	cbnz	r0, 8005768 <__gethex+0x410>
 8005760:	4b1a      	ldr	r3, [pc, #104]	; (80057cc <__gethex+0x474>)
 8005762:	4602      	mov	r2, r0
 8005764:	2184      	movs	r1, #132	; 0x84
 8005766:	e6ac      	b.n	80054c2 <__gethex+0x16a>
 8005768:	6922      	ldr	r2, [r4, #16]
 800576a:	3202      	adds	r2, #2
 800576c:	f104 010c 	add.w	r1, r4, #12
 8005770:	0092      	lsls	r2, r2, #2
 8005772:	300c      	adds	r0, #12
 8005774:	f000 f90c 	bl	8005990 <memcpy>
 8005778:	4621      	mov	r1, r4
 800577a:	9802      	ldr	r0, [sp, #8]
 800577c:	f000 f956 	bl	8005a2c <_Bfree>
 8005780:	464c      	mov	r4, r9
 8005782:	6923      	ldr	r3, [r4, #16]
 8005784:	1c5a      	adds	r2, r3, #1
 8005786:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800578a:	6122      	str	r2, [r4, #16]
 800578c:	2201      	movs	r2, #1
 800578e:	615a      	str	r2, [r3, #20]
 8005790:	e7bd      	b.n	800570e <__gethex+0x3b6>
 8005792:	6922      	ldr	r2, [r4, #16]
 8005794:	455a      	cmp	r2, fp
 8005796:	dd0b      	ble.n	80057b0 <__gethex+0x458>
 8005798:	2101      	movs	r1, #1
 800579a:	4620      	mov	r0, r4
 800579c:	f7ff fd74 	bl	8005288 <rshift>
 80057a0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80057a4:	3501      	adds	r5, #1
 80057a6:	42ab      	cmp	r3, r5
 80057a8:	f6ff aed5 	blt.w	8005556 <__gethex+0x1fe>
 80057ac:	2701      	movs	r7, #1
 80057ae:	e7c2      	b.n	8005736 <__gethex+0x3de>
 80057b0:	f016 061f 	ands.w	r6, r6, #31
 80057b4:	d0fa      	beq.n	80057ac <__gethex+0x454>
 80057b6:	4453      	add	r3, sl
 80057b8:	f1c6 0620 	rsb	r6, r6, #32
 80057bc:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80057c0:	f000 f9e6 	bl	8005b90 <__hi0bits>
 80057c4:	42b0      	cmp	r0, r6
 80057c6:	dbe7      	blt.n	8005798 <__gethex+0x440>
 80057c8:	e7f0      	b.n	80057ac <__gethex+0x454>
 80057ca:	bf00      	nop
 80057cc:	08007690 	.word	0x08007690

080057d0 <L_shift>:
 80057d0:	f1c2 0208 	rsb	r2, r2, #8
 80057d4:	0092      	lsls	r2, r2, #2
 80057d6:	b570      	push	{r4, r5, r6, lr}
 80057d8:	f1c2 0620 	rsb	r6, r2, #32
 80057dc:	6843      	ldr	r3, [r0, #4]
 80057de:	6804      	ldr	r4, [r0, #0]
 80057e0:	fa03 f506 	lsl.w	r5, r3, r6
 80057e4:	432c      	orrs	r4, r5
 80057e6:	40d3      	lsrs	r3, r2
 80057e8:	6004      	str	r4, [r0, #0]
 80057ea:	f840 3f04 	str.w	r3, [r0, #4]!
 80057ee:	4288      	cmp	r0, r1
 80057f0:	d3f4      	bcc.n	80057dc <L_shift+0xc>
 80057f2:	bd70      	pop	{r4, r5, r6, pc}

080057f4 <__match>:
 80057f4:	b530      	push	{r4, r5, lr}
 80057f6:	6803      	ldr	r3, [r0, #0]
 80057f8:	3301      	adds	r3, #1
 80057fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057fe:	b914      	cbnz	r4, 8005806 <__match+0x12>
 8005800:	6003      	str	r3, [r0, #0]
 8005802:	2001      	movs	r0, #1
 8005804:	bd30      	pop	{r4, r5, pc}
 8005806:	f813 2b01 	ldrb.w	r2, [r3], #1
 800580a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800580e:	2d19      	cmp	r5, #25
 8005810:	bf98      	it	ls
 8005812:	3220      	addls	r2, #32
 8005814:	42a2      	cmp	r2, r4
 8005816:	d0f0      	beq.n	80057fa <__match+0x6>
 8005818:	2000      	movs	r0, #0
 800581a:	e7f3      	b.n	8005804 <__match+0x10>

0800581c <__hexnan>:
 800581c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005820:	680b      	ldr	r3, [r1, #0]
 8005822:	115e      	asrs	r6, r3, #5
 8005824:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005828:	f013 031f 	ands.w	r3, r3, #31
 800582c:	b087      	sub	sp, #28
 800582e:	bf18      	it	ne
 8005830:	3604      	addne	r6, #4
 8005832:	2500      	movs	r5, #0
 8005834:	1f37      	subs	r7, r6, #4
 8005836:	4690      	mov	r8, r2
 8005838:	6802      	ldr	r2, [r0, #0]
 800583a:	9301      	str	r3, [sp, #4]
 800583c:	4682      	mov	sl, r0
 800583e:	f846 5c04 	str.w	r5, [r6, #-4]
 8005842:	46b9      	mov	r9, r7
 8005844:	463c      	mov	r4, r7
 8005846:	9502      	str	r5, [sp, #8]
 8005848:	46ab      	mov	fp, r5
 800584a:	7851      	ldrb	r1, [r2, #1]
 800584c:	1c53      	adds	r3, r2, #1
 800584e:	9303      	str	r3, [sp, #12]
 8005850:	b341      	cbz	r1, 80058a4 <__hexnan+0x88>
 8005852:	4608      	mov	r0, r1
 8005854:	9205      	str	r2, [sp, #20]
 8005856:	9104      	str	r1, [sp, #16]
 8005858:	f7ff fd68 	bl	800532c <__hexdig_fun>
 800585c:	2800      	cmp	r0, #0
 800585e:	d14f      	bne.n	8005900 <__hexnan+0xe4>
 8005860:	9904      	ldr	r1, [sp, #16]
 8005862:	9a05      	ldr	r2, [sp, #20]
 8005864:	2920      	cmp	r1, #32
 8005866:	d818      	bhi.n	800589a <__hexnan+0x7e>
 8005868:	9b02      	ldr	r3, [sp, #8]
 800586a:	459b      	cmp	fp, r3
 800586c:	dd13      	ble.n	8005896 <__hexnan+0x7a>
 800586e:	454c      	cmp	r4, r9
 8005870:	d206      	bcs.n	8005880 <__hexnan+0x64>
 8005872:	2d07      	cmp	r5, #7
 8005874:	dc04      	bgt.n	8005880 <__hexnan+0x64>
 8005876:	462a      	mov	r2, r5
 8005878:	4649      	mov	r1, r9
 800587a:	4620      	mov	r0, r4
 800587c:	f7ff ffa8 	bl	80057d0 <L_shift>
 8005880:	4544      	cmp	r4, r8
 8005882:	d950      	bls.n	8005926 <__hexnan+0x10a>
 8005884:	2300      	movs	r3, #0
 8005886:	f1a4 0904 	sub.w	r9, r4, #4
 800588a:	f844 3c04 	str.w	r3, [r4, #-4]
 800588e:	f8cd b008 	str.w	fp, [sp, #8]
 8005892:	464c      	mov	r4, r9
 8005894:	461d      	mov	r5, r3
 8005896:	9a03      	ldr	r2, [sp, #12]
 8005898:	e7d7      	b.n	800584a <__hexnan+0x2e>
 800589a:	2929      	cmp	r1, #41	; 0x29
 800589c:	d156      	bne.n	800594c <__hexnan+0x130>
 800589e:	3202      	adds	r2, #2
 80058a0:	f8ca 2000 	str.w	r2, [sl]
 80058a4:	f1bb 0f00 	cmp.w	fp, #0
 80058a8:	d050      	beq.n	800594c <__hexnan+0x130>
 80058aa:	454c      	cmp	r4, r9
 80058ac:	d206      	bcs.n	80058bc <__hexnan+0xa0>
 80058ae:	2d07      	cmp	r5, #7
 80058b0:	dc04      	bgt.n	80058bc <__hexnan+0xa0>
 80058b2:	462a      	mov	r2, r5
 80058b4:	4649      	mov	r1, r9
 80058b6:	4620      	mov	r0, r4
 80058b8:	f7ff ff8a 	bl	80057d0 <L_shift>
 80058bc:	4544      	cmp	r4, r8
 80058be:	d934      	bls.n	800592a <__hexnan+0x10e>
 80058c0:	f1a8 0204 	sub.w	r2, r8, #4
 80058c4:	4623      	mov	r3, r4
 80058c6:	f853 1b04 	ldr.w	r1, [r3], #4
 80058ca:	f842 1f04 	str.w	r1, [r2, #4]!
 80058ce:	429f      	cmp	r7, r3
 80058d0:	d2f9      	bcs.n	80058c6 <__hexnan+0xaa>
 80058d2:	1b3b      	subs	r3, r7, r4
 80058d4:	f023 0303 	bic.w	r3, r3, #3
 80058d8:	3304      	adds	r3, #4
 80058da:	3401      	adds	r4, #1
 80058dc:	3e03      	subs	r6, #3
 80058de:	42b4      	cmp	r4, r6
 80058e0:	bf88      	it	hi
 80058e2:	2304      	movhi	r3, #4
 80058e4:	4443      	add	r3, r8
 80058e6:	2200      	movs	r2, #0
 80058e8:	f843 2b04 	str.w	r2, [r3], #4
 80058ec:	429f      	cmp	r7, r3
 80058ee:	d2fb      	bcs.n	80058e8 <__hexnan+0xcc>
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	b91b      	cbnz	r3, 80058fc <__hexnan+0xe0>
 80058f4:	4547      	cmp	r7, r8
 80058f6:	d127      	bne.n	8005948 <__hexnan+0x12c>
 80058f8:	2301      	movs	r3, #1
 80058fa:	603b      	str	r3, [r7, #0]
 80058fc:	2005      	movs	r0, #5
 80058fe:	e026      	b.n	800594e <__hexnan+0x132>
 8005900:	3501      	adds	r5, #1
 8005902:	2d08      	cmp	r5, #8
 8005904:	f10b 0b01 	add.w	fp, fp, #1
 8005908:	dd06      	ble.n	8005918 <__hexnan+0xfc>
 800590a:	4544      	cmp	r4, r8
 800590c:	d9c3      	bls.n	8005896 <__hexnan+0x7a>
 800590e:	2300      	movs	r3, #0
 8005910:	f844 3c04 	str.w	r3, [r4, #-4]
 8005914:	2501      	movs	r5, #1
 8005916:	3c04      	subs	r4, #4
 8005918:	6822      	ldr	r2, [r4, #0]
 800591a:	f000 000f 	and.w	r0, r0, #15
 800591e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005922:	6022      	str	r2, [r4, #0]
 8005924:	e7b7      	b.n	8005896 <__hexnan+0x7a>
 8005926:	2508      	movs	r5, #8
 8005928:	e7b5      	b.n	8005896 <__hexnan+0x7a>
 800592a:	9b01      	ldr	r3, [sp, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0df      	beq.n	80058f0 <__hexnan+0xd4>
 8005930:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005934:	f1c3 0320 	rsb	r3, r3, #32
 8005938:	fa22 f303 	lsr.w	r3, r2, r3
 800593c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005940:	401a      	ands	r2, r3
 8005942:	f846 2c04 	str.w	r2, [r6, #-4]
 8005946:	e7d3      	b.n	80058f0 <__hexnan+0xd4>
 8005948:	3f04      	subs	r7, #4
 800594a:	e7d1      	b.n	80058f0 <__hexnan+0xd4>
 800594c:	2004      	movs	r0, #4
 800594e:	b007      	add	sp, #28
 8005950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005954 <_localeconv_r>:
 8005954:	4800      	ldr	r0, [pc, #0]	; (8005958 <_localeconv_r+0x4>)
 8005956:	4770      	bx	lr
 8005958:	2000019c 	.word	0x2000019c

0800595c <malloc>:
 800595c:	4b02      	ldr	r3, [pc, #8]	; (8005968 <malloc+0xc>)
 800595e:	4601      	mov	r1, r0
 8005960:	6818      	ldr	r0, [r3, #0]
 8005962:	f000 bd55 	b.w	8006410 <_malloc_r>
 8005966:	bf00      	nop
 8005968:	20000044 	.word	0x20000044

0800596c <__ascii_mbtowc>:
 800596c:	b082      	sub	sp, #8
 800596e:	b901      	cbnz	r1, 8005972 <__ascii_mbtowc+0x6>
 8005970:	a901      	add	r1, sp, #4
 8005972:	b142      	cbz	r2, 8005986 <__ascii_mbtowc+0x1a>
 8005974:	b14b      	cbz	r3, 800598a <__ascii_mbtowc+0x1e>
 8005976:	7813      	ldrb	r3, [r2, #0]
 8005978:	600b      	str	r3, [r1, #0]
 800597a:	7812      	ldrb	r2, [r2, #0]
 800597c:	1e10      	subs	r0, r2, #0
 800597e:	bf18      	it	ne
 8005980:	2001      	movne	r0, #1
 8005982:	b002      	add	sp, #8
 8005984:	4770      	bx	lr
 8005986:	4610      	mov	r0, r2
 8005988:	e7fb      	b.n	8005982 <__ascii_mbtowc+0x16>
 800598a:	f06f 0001 	mvn.w	r0, #1
 800598e:	e7f8      	b.n	8005982 <__ascii_mbtowc+0x16>

08005990 <memcpy>:
 8005990:	440a      	add	r2, r1
 8005992:	4291      	cmp	r1, r2
 8005994:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005998:	d100      	bne.n	800599c <memcpy+0xc>
 800599a:	4770      	bx	lr
 800599c:	b510      	push	{r4, lr}
 800599e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059a6:	4291      	cmp	r1, r2
 80059a8:	d1f9      	bne.n	800599e <memcpy+0xe>
 80059aa:	bd10      	pop	{r4, pc}

080059ac <_Balloc>:
 80059ac:	b570      	push	{r4, r5, r6, lr}
 80059ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059b0:	4604      	mov	r4, r0
 80059b2:	460d      	mov	r5, r1
 80059b4:	b976      	cbnz	r6, 80059d4 <_Balloc+0x28>
 80059b6:	2010      	movs	r0, #16
 80059b8:	f7ff ffd0 	bl	800595c <malloc>
 80059bc:	4602      	mov	r2, r0
 80059be:	6260      	str	r0, [r4, #36]	; 0x24
 80059c0:	b920      	cbnz	r0, 80059cc <_Balloc+0x20>
 80059c2:	4b18      	ldr	r3, [pc, #96]	; (8005a24 <_Balloc+0x78>)
 80059c4:	4818      	ldr	r0, [pc, #96]	; (8005a28 <_Balloc+0x7c>)
 80059c6:	2166      	movs	r1, #102	; 0x66
 80059c8:	f000 ff2a 	bl	8006820 <__assert_func>
 80059cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059d0:	6006      	str	r6, [r0, #0]
 80059d2:	60c6      	str	r6, [r0, #12]
 80059d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80059d6:	68f3      	ldr	r3, [r6, #12]
 80059d8:	b183      	cbz	r3, 80059fc <_Balloc+0x50>
 80059da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80059e2:	b9b8      	cbnz	r0, 8005a14 <_Balloc+0x68>
 80059e4:	2101      	movs	r1, #1
 80059e6:	fa01 f605 	lsl.w	r6, r1, r5
 80059ea:	1d72      	adds	r2, r6, #5
 80059ec:	0092      	lsls	r2, r2, #2
 80059ee:	4620      	mov	r0, r4
 80059f0:	f000 fc90 	bl	8006314 <_calloc_r>
 80059f4:	b160      	cbz	r0, 8005a10 <_Balloc+0x64>
 80059f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80059fa:	e00e      	b.n	8005a1a <_Balloc+0x6e>
 80059fc:	2221      	movs	r2, #33	; 0x21
 80059fe:	2104      	movs	r1, #4
 8005a00:	4620      	mov	r0, r4
 8005a02:	f000 fc87 	bl	8006314 <_calloc_r>
 8005a06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a08:	60f0      	str	r0, [r6, #12]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e4      	bne.n	80059da <_Balloc+0x2e>
 8005a10:	2000      	movs	r0, #0
 8005a12:	bd70      	pop	{r4, r5, r6, pc}
 8005a14:	6802      	ldr	r2, [r0, #0]
 8005a16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a20:	e7f7      	b.n	8005a12 <_Balloc+0x66>
 8005a22:	bf00      	nop
 8005a24:	0800761e 	.word	0x0800761e
 8005a28:	0800771c 	.word	0x0800771c

08005a2c <_Bfree>:
 8005a2c:	b570      	push	{r4, r5, r6, lr}
 8005a2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a30:	4605      	mov	r5, r0
 8005a32:	460c      	mov	r4, r1
 8005a34:	b976      	cbnz	r6, 8005a54 <_Bfree+0x28>
 8005a36:	2010      	movs	r0, #16
 8005a38:	f7ff ff90 	bl	800595c <malloc>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	6268      	str	r0, [r5, #36]	; 0x24
 8005a40:	b920      	cbnz	r0, 8005a4c <_Bfree+0x20>
 8005a42:	4b09      	ldr	r3, [pc, #36]	; (8005a68 <_Bfree+0x3c>)
 8005a44:	4809      	ldr	r0, [pc, #36]	; (8005a6c <_Bfree+0x40>)
 8005a46:	218a      	movs	r1, #138	; 0x8a
 8005a48:	f000 feea 	bl	8006820 <__assert_func>
 8005a4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a50:	6006      	str	r6, [r0, #0]
 8005a52:	60c6      	str	r6, [r0, #12]
 8005a54:	b13c      	cbz	r4, 8005a66 <_Bfree+0x3a>
 8005a56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a58:	6862      	ldr	r2, [r4, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a60:	6021      	str	r1, [r4, #0]
 8005a62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a66:	bd70      	pop	{r4, r5, r6, pc}
 8005a68:	0800761e 	.word	0x0800761e
 8005a6c:	0800771c 	.word	0x0800771c

08005a70 <__multadd>:
 8005a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a74:	690d      	ldr	r5, [r1, #16]
 8005a76:	4607      	mov	r7, r0
 8005a78:	460c      	mov	r4, r1
 8005a7a:	461e      	mov	r6, r3
 8005a7c:	f101 0c14 	add.w	ip, r1, #20
 8005a80:	2000      	movs	r0, #0
 8005a82:	f8dc 3000 	ldr.w	r3, [ip]
 8005a86:	b299      	uxth	r1, r3
 8005a88:	fb02 6101 	mla	r1, r2, r1, r6
 8005a8c:	0c1e      	lsrs	r6, r3, #16
 8005a8e:	0c0b      	lsrs	r3, r1, #16
 8005a90:	fb02 3306 	mla	r3, r2, r6, r3
 8005a94:	b289      	uxth	r1, r1
 8005a96:	3001      	adds	r0, #1
 8005a98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005a9c:	4285      	cmp	r5, r0
 8005a9e:	f84c 1b04 	str.w	r1, [ip], #4
 8005aa2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005aa6:	dcec      	bgt.n	8005a82 <__multadd+0x12>
 8005aa8:	b30e      	cbz	r6, 8005aee <__multadd+0x7e>
 8005aaa:	68a3      	ldr	r3, [r4, #8]
 8005aac:	42ab      	cmp	r3, r5
 8005aae:	dc19      	bgt.n	8005ae4 <__multadd+0x74>
 8005ab0:	6861      	ldr	r1, [r4, #4]
 8005ab2:	4638      	mov	r0, r7
 8005ab4:	3101      	adds	r1, #1
 8005ab6:	f7ff ff79 	bl	80059ac <_Balloc>
 8005aba:	4680      	mov	r8, r0
 8005abc:	b928      	cbnz	r0, 8005aca <__multadd+0x5a>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	4b0c      	ldr	r3, [pc, #48]	; (8005af4 <__multadd+0x84>)
 8005ac2:	480d      	ldr	r0, [pc, #52]	; (8005af8 <__multadd+0x88>)
 8005ac4:	21b5      	movs	r1, #181	; 0xb5
 8005ac6:	f000 feab 	bl	8006820 <__assert_func>
 8005aca:	6922      	ldr	r2, [r4, #16]
 8005acc:	3202      	adds	r2, #2
 8005ace:	f104 010c 	add.w	r1, r4, #12
 8005ad2:	0092      	lsls	r2, r2, #2
 8005ad4:	300c      	adds	r0, #12
 8005ad6:	f7ff ff5b 	bl	8005990 <memcpy>
 8005ada:	4621      	mov	r1, r4
 8005adc:	4638      	mov	r0, r7
 8005ade:	f7ff ffa5 	bl	8005a2c <_Bfree>
 8005ae2:	4644      	mov	r4, r8
 8005ae4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ae8:	3501      	adds	r5, #1
 8005aea:	615e      	str	r6, [r3, #20]
 8005aec:	6125      	str	r5, [r4, #16]
 8005aee:	4620      	mov	r0, r4
 8005af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005af4:	08007690 	.word	0x08007690
 8005af8:	0800771c 	.word	0x0800771c

08005afc <__s2b>:
 8005afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b00:	460c      	mov	r4, r1
 8005b02:	4615      	mov	r5, r2
 8005b04:	461f      	mov	r7, r3
 8005b06:	2209      	movs	r2, #9
 8005b08:	3308      	adds	r3, #8
 8005b0a:	4606      	mov	r6, r0
 8005b0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b10:	2100      	movs	r1, #0
 8005b12:	2201      	movs	r2, #1
 8005b14:	429a      	cmp	r2, r3
 8005b16:	db09      	blt.n	8005b2c <__s2b+0x30>
 8005b18:	4630      	mov	r0, r6
 8005b1a:	f7ff ff47 	bl	80059ac <_Balloc>
 8005b1e:	b940      	cbnz	r0, 8005b32 <__s2b+0x36>
 8005b20:	4602      	mov	r2, r0
 8005b22:	4b19      	ldr	r3, [pc, #100]	; (8005b88 <__s2b+0x8c>)
 8005b24:	4819      	ldr	r0, [pc, #100]	; (8005b8c <__s2b+0x90>)
 8005b26:	21ce      	movs	r1, #206	; 0xce
 8005b28:	f000 fe7a 	bl	8006820 <__assert_func>
 8005b2c:	0052      	lsls	r2, r2, #1
 8005b2e:	3101      	adds	r1, #1
 8005b30:	e7f0      	b.n	8005b14 <__s2b+0x18>
 8005b32:	9b08      	ldr	r3, [sp, #32]
 8005b34:	6143      	str	r3, [r0, #20]
 8005b36:	2d09      	cmp	r5, #9
 8005b38:	f04f 0301 	mov.w	r3, #1
 8005b3c:	6103      	str	r3, [r0, #16]
 8005b3e:	dd16      	ble.n	8005b6e <__s2b+0x72>
 8005b40:	f104 0909 	add.w	r9, r4, #9
 8005b44:	46c8      	mov	r8, r9
 8005b46:	442c      	add	r4, r5
 8005b48:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005b4c:	4601      	mov	r1, r0
 8005b4e:	3b30      	subs	r3, #48	; 0x30
 8005b50:	220a      	movs	r2, #10
 8005b52:	4630      	mov	r0, r6
 8005b54:	f7ff ff8c 	bl	8005a70 <__multadd>
 8005b58:	45a0      	cmp	r8, r4
 8005b5a:	d1f5      	bne.n	8005b48 <__s2b+0x4c>
 8005b5c:	f1a5 0408 	sub.w	r4, r5, #8
 8005b60:	444c      	add	r4, r9
 8005b62:	1b2d      	subs	r5, r5, r4
 8005b64:	1963      	adds	r3, r4, r5
 8005b66:	42bb      	cmp	r3, r7
 8005b68:	db04      	blt.n	8005b74 <__s2b+0x78>
 8005b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b6e:	340a      	adds	r4, #10
 8005b70:	2509      	movs	r5, #9
 8005b72:	e7f6      	b.n	8005b62 <__s2b+0x66>
 8005b74:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005b78:	4601      	mov	r1, r0
 8005b7a:	3b30      	subs	r3, #48	; 0x30
 8005b7c:	220a      	movs	r2, #10
 8005b7e:	4630      	mov	r0, r6
 8005b80:	f7ff ff76 	bl	8005a70 <__multadd>
 8005b84:	e7ee      	b.n	8005b64 <__s2b+0x68>
 8005b86:	bf00      	nop
 8005b88:	08007690 	.word	0x08007690
 8005b8c:	0800771c 	.word	0x0800771c

08005b90 <__hi0bits>:
 8005b90:	0c02      	lsrs	r2, r0, #16
 8005b92:	0412      	lsls	r2, r2, #16
 8005b94:	4603      	mov	r3, r0
 8005b96:	b9ca      	cbnz	r2, 8005bcc <__hi0bits+0x3c>
 8005b98:	0403      	lsls	r3, r0, #16
 8005b9a:	2010      	movs	r0, #16
 8005b9c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005ba0:	bf04      	itt	eq
 8005ba2:	021b      	lsleq	r3, r3, #8
 8005ba4:	3008      	addeq	r0, #8
 8005ba6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005baa:	bf04      	itt	eq
 8005bac:	011b      	lsleq	r3, r3, #4
 8005bae:	3004      	addeq	r0, #4
 8005bb0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005bb4:	bf04      	itt	eq
 8005bb6:	009b      	lsleq	r3, r3, #2
 8005bb8:	3002      	addeq	r0, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	db05      	blt.n	8005bca <__hi0bits+0x3a>
 8005bbe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005bc2:	f100 0001 	add.w	r0, r0, #1
 8005bc6:	bf08      	it	eq
 8005bc8:	2020      	moveq	r0, #32
 8005bca:	4770      	bx	lr
 8005bcc:	2000      	movs	r0, #0
 8005bce:	e7e5      	b.n	8005b9c <__hi0bits+0xc>

08005bd0 <__lo0bits>:
 8005bd0:	6803      	ldr	r3, [r0, #0]
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	f013 0007 	ands.w	r0, r3, #7
 8005bd8:	d00b      	beq.n	8005bf2 <__lo0bits+0x22>
 8005bda:	07d9      	lsls	r1, r3, #31
 8005bdc:	d421      	bmi.n	8005c22 <__lo0bits+0x52>
 8005bde:	0798      	lsls	r0, r3, #30
 8005be0:	bf49      	itett	mi
 8005be2:	085b      	lsrmi	r3, r3, #1
 8005be4:	089b      	lsrpl	r3, r3, #2
 8005be6:	2001      	movmi	r0, #1
 8005be8:	6013      	strmi	r3, [r2, #0]
 8005bea:	bf5c      	itt	pl
 8005bec:	6013      	strpl	r3, [r2, #0]
 8005bee:	2002      	movpl	r0, #2
 8005bf0:	4770      	bx	lr
 8005bf2:	b299      	uxth	r1, r3
 8005bf4:	b909      	cbnz	r1, 8005bfa <__lo0bits+0x2a>
 8005bf6:	0c1b      	lsrs	r3, r3, #16
 8005bf8:	2010      	movs	r0, #16
 8005bfa:	b2d9      	uxtb	r1, r3
 8005bfc:	b909      	cbnz	r1, 8005c02 <__lo0bits+0x32>
 8005bfe:	3008      	adds	r0, #8
 8005c00:	0a1b      	lsrs	r3, r3, #8
 8005c02:	0719      	lsls	r1, r3, #28
 8005c04:	bf04      	itt	eq
 8005c06:	091b      	lsreq	r3, r3, #4
 8005c08:	3004      	addeq	r0, #4
 8005c0a:	0799      	lsls	r1, r3, #30
 8005c0c:	bf04      	itt	eq
 8005c0e:	089b      	lsreq	r3, r3, #2
 8005c10:	3002      	addeq	r0, #2
 8005c12:	07d9      	lsls	r1, r3, #31
 8005c14:	d403      	bmi.n	8005c1e <__lo0bits+0x4e>
 8005c16:	085b      	lsrs	r3, r3, #1
 8005c18:	f100 0001 	add.w	r0, r0, #1
 8005c1c:	d003      	beq.n	8005c26 <__lo0bits+0x56>
 8005c1e:	6013      	str	r3, [r2, #0]
 8005c20:	4770      	bx	lr
 8005c22:	2000      	movs	r0, #0
 8005c24:	4770      	bx	lr
 8005c26:	2020      	movs	r0, #32
 8005c28:	4770      	bx	lr
	...

08005c2c <__i2b>:
 8005c2c:	b510      	push	{r4, lr}
 8005c2e:	460c      	mov	r4, r1
 8005c30:	2101      	movs	r1, #1
 8005c32:	f7ff febb 	bl	80059ac <_Balloc>
 8005c36:	4602      	mov	r2, r0
 8005c38:	b928      	cbnz	r0, 8005c46 <__i2b+0x1a>
 8005c3a:	4b05      	ldr	r3, [pc, #20]	; (8005c50 <__i2b+0x24>)
 8005c3c:	4805      	ldr	r0, [pc, #20]	; (8005c54 <__i2b+0x28>)
 8005c3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005c42:	f000 fded 	bl	8006820 <__assert_func>
 8005c46:	2301      	movs	r3, #1
 8005c48:	6144      	str	r4, [r0, #20]
 8005c4a:	6103      	str	r3, [r0, #16]
 8005c4c:	bd10      	pop	{r4, pc}
 8005c4e:	bf00      	nop
 8005c50:	08007690 	.word	0x08007690
 8005c54:	0800771c 	.word	0x0800771c

08005c58 <__multiply>:
 8005c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c5c:	4691      	mov	r9, r2
 8005c5e:	690a      	ldr	r2, [r1, #16]
 8005c60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	bfb8      	it	lt
 8005c68:	460b      	movlt	r3, r1
 8005c6a:	460c      	mov	r4, r1
 8005c6c:	bfbc      	itt	lt
 8005c6e:	464c      	movlt	r4, r9
 8005c70:	4699      	movlt	r9, r3
 8005c72:	6927      	ldr	r7, [r4, #16]
 8005c74:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005c78:	68a3      	ldr	r3, [r4, #8]
 8005c7a:	6861      	ldr	r1, [r4, #4]
 8005c7c:	eb07 060a 	add.w	r6, r7, sl
 8005c80:	42b3      	cmp	r3, r6
 8005c82:	b085      	sub	sp, #20
 8005c84:	bfb8      	it	lt
 8005c86:	3101      	addlt	r1, #1
 8005c88:	f7ff fe90 	bl	80059ac <_Balloc>
 8005c8c:	b930      	cbnz	r0, 8005c9c <__multiply+0x44>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	4b43      	ldr	r3, [pc, #268]	; (8005da0 <__multiply+0x148>)
 8005c92:	4844      	ldr	r0, [pc, #272]	; (8005da4 <__multiply+0x14c>)
 8005c94:	f240 115d 	movw	r1, #349	; 0x15d
 8005c98:	f000 fdc2 	bl	8006820 <__assert_func>
 8005c9c:	f100 0514 	add.w	r5, r0, #20
 8005ca0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ca4:	462b      	mov	r3, r5
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	4543      	cmp	r3, r8
 8005caa:	d321      	bcc.n	8005cf0 <__multiply+0x98>
 8005cac:	f104 0314 	add.w	r3, r4, #20
 8005cb0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005cb4:	f109 0314 	add.w	r3, r9, #20
 8005cb8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005cbc:	9202      	str	r2, [sp, #8]
 8005cbe:	1b3a      	subs	r2, r7, r4
 8005cc0:	3a15      	subs	r2, #21
 8005cc2:	f022 0203 	bic.w	r2, r2, #3
 8005cc6:	3204      	adds	r2, #4
 8005cc8:	f104 0115 	add.w	r1, r4, #21
 8005ccc:	428f      	cmp	r7, r1
 8005cce:	bf38      	it	cc
 8005cd0:	2204      	movcc	r2, #4
 8005cd2:	9201      	str	r2, [sp, #4]
 8005cd4:	9a02      	ldr	r2, [sp, #8]
 8005cd6:	9303      	str	r3, [sp, #12]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d80c      	bhi.n	8005cf6 <__multiply+0x9e>
 8005cdc:	2e00      	cmp	r6, #0
 8005cde:	dd03      	ble.n	8005ce8 <__multiply+0x90>
 8005ce0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d059      	beq.n	8005d9c <__multiply+0x144>
 8005ce8:	6106      	str	r6, [r0, #16]
 8005cea:	b005      	add	sp, #20
 8005cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf0:	f843 2b04 	str.w	r2, [r3], #4
 8005cf4:	e7d8      	b.n	8005ca8 <__multiply+0x50>
 8005cf6:	f8b3 a000 	ldrh.w	sl, [r3]
 8005cfa:	f1ba 0f00 	cmp.w	sl, #0
 8005cfe:	d023      	beq.n	8005d48 <__multiply+0xf0>
 8005d00:	f104 0e14 	add.w	lr, r4, #20
 8005d04:	46a9      	mov	r9, r5
 8005d06:	f04f 0c00 	mov.w	ip, #0
 8005d0a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005d0e:	f8d9 1000 	ldr.w	r1, [r9]
 8005d12:	fa1f fb82 	uxth.w	fp, r2
 8005d16:	b289      	uxth	r1, r1
 8005d18:	fb0a 110b 	mla	r1, sl, fp, r1
 8005d1c:	4461      	add	r1, ip
 8005d1e:	f8d9 c000 	ldr.w	ip, [r9]
 8005d22:	0c12      	lsrs	r2, r2, #16
 8005d24:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005d28:	fb0a c202 	mla	r2, sl, r2, ip
 8005d2c:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005d30:	b289      	uxth	r1, r1
 8005d32:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d36:	4577      	cmp	r7, lr
 8005d38:	f849 1b04 	str.w	r1, [r9], #4
 8005d3c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d40:	d8e3      	bhi.n	8005d0a <__multiply+0xb2>
 8005d42:	9a01      	ldr	r2, [sp, #4]
 8005d44:	f845 c002 	str.w	ip, [r5, r2]
 8005d48:	9a03      	ldr	r2, [sp, #12]
 8005d4a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005d4e:	3304      	adds	r3, #4
 8005d50:	f1b9 0f00 	cmp.w	r9, #0
 8005d54:	d020      	beq.n	8005d98 <__multiply+0x140>
 8005d56:	6829      	ldr	r1, [r5, #0]
 8005d58:	f104 0c14 	add.w	ip, r4, #20
 8005d5c:	46ae      	mov	lr, r5
 8005d5e:	f04f 0a00 	mov.w	sl, #0
 8005d62:	f8bc b000 	ldrh.w	fp, [ip]
 8005d66:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005d6a:	fb09 220b 	mla	r2, r9, fp, r2
 8005d6e:	4492      	add	sl, r2
 8005d70:	b289      	uxth	r1, r1
 8005d72:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005d76:	f84e 1b04 	str.w	r1, [lr], #4
 8005d7a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005d7e:	f8be 1000 	ldrh.w	r1, [lr]
 8005d82:	0c12      	lsrs	r2, r2, #16
 8005d84:	fb09 1102 	mla	r1, r9, r2, r1
 8005d88:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005d8c:	4567      	cmp	r7, ip
 8005d8e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005d92:	d8e6      	bhi.n	8005d62 <__multiply+0x10a>
 8005d94:	9a01      	ldr	r2, [sp, #4]
 8005d96:	50a9      	str	r1, [r5, r2]
 8005d98:	3504      	adds	r5, #4
 8005d9a:	e79b      	b.n	8005cd4 <__multiply+0x7c>
 8005d9c:	3e01      	subs	r6, #1
 8005d9e:	e79d      	b.n	8005cdc <__multiply+0x84>
 8005da0:	08007690 	.word	0x08007690
 8005da4:	0800771c 	.word	0x0800771c

08005da8 <__pow5mult>:
 8005da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dac:	4615      	mov	r5, r2
 8005dae:	f012 0203 	ands.w	r2, r2, #3
 8005db2:	4606      	mov	r6, r0
 8005db4:	460f      	mov	r7, r1
 8005db6:	d007      	beq.n	8005dc8 <__pow5mult+0x20>
 8005db8:	4c25      	ldr	r4, [pc, #148]	; (8005e50 <__pow5mult+0xa8>)
 8005dba:	3a01      	subs	r2, #1
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005dc2:	f7ff fe55 	bl	8005a70 <__multadd>
 8005dc6:	4607      	mov	r7, r0
 8005dc8:	10ad      	asrs	r5, r5, #2
 8005dca:	d03d      	beq.n	8005e48 <__pow5mult+0xa0>
 8005dcc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005dce:	b97c      	cbnz	r4, 8005df0 <__pow5mult+0x48>
 8005dd0:	2010      	movs	r0, #16
 8005dd2:	f7ff fdc3 	bl	800595c <malloc>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	6270      	str	r0, [r6, #36]	; 0x24
 8005dda:	b928      	cbnz	r0, 8005de8 <__pow5mult+0x40>
 8005ddc:	4b1d      	ldr	r3, [pc, #116]	; (8005e54 <__pow5mult+0xac>)
 8005dde:	481e      	ldr	r0, [pc, #120]	; (8005e58 <__pow5mult+0xb0>)
 8005de0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005de4:	f000 fd1c 	bl	8006820 <__assert_func>
 8005de8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005dec:	6004      	str	r4, [r0, #0]
 8005dee:	60c4      	str	r4, [r0, #12]
 8005df0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005df4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005df8:	b94c      	cbnz	r4, 8005e0e <__pow5mult+0x66>
 8005dfa:	f240 2171 	movw	r1, #625	; 0x271
 8005dfe:	4630      	mov	r0, r6
 8005e00:	f7ff ff14 	bl	8005c2c <__i2b>
 8005e04:	2300      	movs	r3, #0
 8005e06:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e0a:	4604      	mov	r4, r0
 8005e0c:	6003      	str	r3, [r0, #0]
 8005e0e:	f04f 0900 	mov.w	r9, #0
 8005e12:	07eb      	lsls	r3, r5, #31
 8005e14:	d50a      	bpl.n	8005e2c <__pow5mult+0x84>
 8005e16:	4639      	mov	r1, r7
 8005e18:	4622      	mov	r2, r4
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	f7ff ff1c 	bl	8005c58 <__multiply>
 8005e20:	4639      	mov	r1, r7
 8005e22:	4680      	mov	r8, r0
 8005e24:	4630      	mov	r0, r6
 8005e26:	f7ff fe01 	bl	8005a2c <_Bfree>
 8005e2a:	4647      	mov	r7, r8
 8005e2c:	106d      	asrs	r5, r5, #1
 8005e2e:	d00b      	beq.n	8005e48 <__pow5mult+0xa0>
 8005e30:	6820      	ldr	r0, [r4, #0]
 8005e32:	b938      	cbnz	r0, 8005e44 <__pow5mult+0x9c>
 8005e34:	4622      	mov	r2, r4
 8005e36:	4621      	mov	r1, r4
 8005e38:	4630      	mov	r0, r6
 8005e3a:	f7ff ff0d 	bl	8005c58 <__multiply>
 8005e3e:	6020      	str	r0, [r4, #0]
 8005e40:	f8c0 9000 	str.w	r9, [r0]
 8005e44:	4604      	mov	r4, r0
 8005e46:	e7e4      	b.n	8005e12 <__pow5mult+0x6a>
 8005e48:	4638      	mov	r0, r7
 8005e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e4e:	bf00      	nop
 8005e50:	08007868 	.word	0x08007868
 8005e54:	0800761e 	.word	0x0800761e
 8005e58:	0800771c 	.word	0x0800771c

08005e5c <__lshift>:
 8005e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e60:	460c      	mov	r4, r1
 8005e62:	6849      	ldr	r1, [r1, #4]
 8005e64:	6923      	ldr	r3, [r4, #16]
 8005e66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e6a:	68a3      	ldr	r3, [r4, #8]
 8005e6c:	4607      	mov	r7, r0
 8005e6e:	4691      	mov	r9, r2
 8005e70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e74:	f108 0601 	add.w	r6, r8, #1
 8005e78:	42b3      	cmp	r3, r6
 8005e7a:	db0b      	blt.n	8005e94 <__lshift+0x38>
 8005e7c:	4638      	mov	r0, r7
 8005e7e:	f7ff fd95 	bl	80059ac <_Balloc>
 8005e82:	4605      	mov	r5, r0
 8005e84:	b948      	cbnz	r0, 8005e9a <__lshift+0x3e>
 8005e86:	4602      	mov	r2, r0
 8005e88:	4b2a      	ldr	r3, [pc, #168]	; (8005f34 <__lshift+0xd8>)
 8005e8a:	482b      	ldr	r0, [pc, #172]	; (8005f38 <__lshift+0xdc>)
 8005e8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005e90:	f000 fcc6 	bl	8006820 <__assert_func>
 8005e94:	3101      	adds	r1, #1
 8005e96:	005b      	lsls	r3, r3, #1
 8005e98:	e7ee      	b.n	8005e78 <__lshift+0x1c>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	f100 0114 	add.w	r1, r0, #20
 8005ea0:	f100 0210 	add.w	r2, r0, #16
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	4553      	cmp	r3, sl
 8005ea8:	db37      	blt.n	8005f1a <__lshift+0xbe>
 8005eaa:	6920      	ldr	r0, [r4, #16]
 8005eac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005eb0:	f104 0314 	add.w	r3, r4, #20
 8005eb4:	f019 091f 	ands.w	r9, r9, #31
 8005eb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ebc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005ec0:	d02f      	beq.n	8005f22 <__lshift+0xc6>
 8005ec2:	f1c9 0e20 	rsb	lr, r9, #32
 8005ec6:	468a      	mov	sl, r1
 8005ec8:	f04f 0c00 	mov.w	ip, #0
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	fa02 f209 	lsl.w	r2, r2, r9
 8005ed2:	ea42 020c 	orr.w	r2, r2, ip
 8005ed6:	f84a 2b04 	str.w	r2, [sl], #4
 8005eda:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ede:	4298      	cmp	r0, r3
 8005ee0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005ee4:	d8f2      	bhi.n	8005ecc <__lshift+0x70>
 8005ee6:	1b03      	subs	r3, r0, r4
 8005ee8:	3b15      	subs	r3, #21
 8005eea:	f023 0303 	bic.w	r3, r3, #3
 8005eee:	3304      	adds	r3, #4
 8005ef0:	f104 0215 	add.w	r2, r4, #21
 8005ef4:	4290      	cmp	r0, r2
 8005ef6:	bf38      	it	cc
 8005ef8:	2304      	movcc	r3, #4
 8005efa:	f841 c003 	str.w	ip, [r1, r3]
 8005efe:	f1bc 0f00 	cmp.w	ip, #0
 8005f02:	d001      	beq.n	8005f08 <__lshift+0xac>
 8005f04:	f108 0602 	add.w	r6, r8, #2
 8005f08:	3e01      	subs	r6, #1
 8005f0a:	4638      	mov	r0, r7
 8005f0c:	612e      	str	r6, [r5, #16]
 8005f0e:	4621      	mov	r1, r4
 8005f10:	f7ff fd8c 	bl	8005a2c <_Bfree>
 8005f14:	4628      	mov	r0, r5
 8005f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f1e:	3301      	adds	r3, #1
 8005f20:	e7c1      	b.n	8005ea6 <__lshift+0x4a>
 8005f22:	3904      	subs	r1, #4
 8005f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f28:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f2c:	4298      	cmp	r0, r3
 8005f2e:	d8f9      	bhi.n	8005f24 <__lshift+0xc8>
 8005f30:	e7ea      	b.n	8005f08 <__lshift+0xac>
 8005f32:	bf00      	nop
 8005f34:	08007690 	.word	0x08007690
 8005f38:	0800771c 	.word	0x0800771c

08005f3c <__mcmp>:
 8005f3c:	690a      	ldr	r2, [r1, #16]
 8005f3e:	4603      	mov	r3, r0
 8005f40:	6900      	ldr	r0, [r0, #16]
 8005f42:	1a80      	subs	r0, r0, r2
 8005f44:	b530      	push	{r4, r5, lr}
 8005f46:	d10d      	bne.n	8005f64 <__mcmp+0x28>
 8005f48:	3314      	adds	r3, #20
 8005f4a:	3114      	adds	r1, #20
 8005f4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005f50:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005f54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f5c:	4295      	cmp	r5, r2
 8005f5e:	d002      	beq.n	8005f66 <__mcmp+0x2a>
 8005f60:	d304      	bcc.n	8005f6c <__mcmp+0x30>
 8005f62:	2001      	movs	r0, #1
 8005f64:	bd30      	pop	{r4, r5, pc}
 8005f66:	42a3      	cmp	r3, r4
 8005f68:	d3f4      	bcc.n	8005f54 <__mcmp+0x18>
 8005f6a:	e7fb      	b.n	8005f64 <__mcmp+0x28>
 8005f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f70:	e7f8      	b.n	8005f64 <__mcmp+0x28>
	...

08005f74 <__mdiff>:
 8005f74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f78:	460d      	mov	r5, r1
 8005f7a:	4607      	mov	r7, r0
 8005f7c:	4611      	mov	r1, r2
 8005f7e:	4628      	mov	r0, r5
 8005f80:	4614      	mov	r4, r2
 8005f82:	f7ff ffdb 	bl	8005f3c <__mcmp>
 8005f86:	1e06      	subs	r6, r0, #0
 8005f88:	d111      	bne.n	8005fae <__mdiff+0x3a>
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	4638      	mov	r0, r7
 8005f8e:	f7ff fd0d 	bl	80059ac <_Balloc>
 8005f92:	4602      	mov	r2, r0
 8005f94:	b928      	cbnz	r0, 8005fa2 <__mdiff+0x2e>
 8005f96:	4b39      	ldr	r3, [pc, #228]	; (800607c <__mdiff+0x108>)
 8005f98:	f240 2132 	movw	r1, #562	; 0x232
 8005f9c:	4838      	ldr	r0, [pc, #224]	; (8006080 <__mdiff+0x10c>)
 8005f9e:	f000 fc3f 	bl	8006820 <__assert_func>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005fa8:	4610      	mov	r0, r2
 8005faa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fae:	bfa4      	itt	ge
 8005fb0:	4623      	movge	r3, r4
 8005fb2:	462c      	movge	r4, r5
 8005fb4:	4638      	mov	r0, r7
 8005fb6:	6861      	ldr	r1, [r4, #4]
 8005fb8:	bfa6      	itte	ge
 8005fba:	461d      	movge	r5, r3
 8005fbc:	2600      	movge	r6, #0
 8005fbe:	2601      	movlt	r6, #1
 8005fc0:	f7ff fcf4 	bl	80059ac <_Balloc>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	b918      	cbnz	r0, 8005fd0 <__mdiff+0x5c>
 8005fc8:	4b2c      	ldr	r3, [pc, #176]	; (800607c <__mdiff+0x108>)
 8005fca:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005fce:	e7e5      	b.n	8005f9c <__mdiff+0x28>
 8005fd0:	6927      	ldr	r7, [r4, #16]
 8005fd2:	60c6      	str	r6, [r0, #12]
 8005fd4:	692e      	ldr	r6, [r5, #16]
 8005fd6:	f104 0014 	add.w	r0, r4, #20
 8005fda:	f105 0914 	add.w	r9, r5, #20
 8005fde:	f102 0e14 	add.w	lr, r2, #20
 8005fe2:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8005fe6:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005fea:	3410      	adds	r4, #16
 8005fec:	46f2      	mov	sl, lr
 8005fee:	2100      	movs	r1, #0
 8005ff0:	f859 3b04 	ldr.w	r3, [r9], #4
 8005ff4:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005ff8:	fa1f f883 	uxth.w	r8, r3
 8005ffc:	fa11 f18b 	uxtah	r1, r1, fp
 8006000:	0c1b      	lsrs	r3, r3, #16
 8006002:	eba1 0808 	sub.w	r8, r1, r8
 8006006:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800600a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800600e:	fa1f f888 	uxth.w	r8, r8
 8006012:	1419      	asrs	r1, r3, #16
 8006014:	454e      	cmp	r6, r9
 8006016:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800601a:	f84a 3b04 	str.w	r3, [sl], #4
 800601e:	d8e7      	bhi.n	8005ff0 <__mdiff+0x7c>
 8006020:	1b73      	subs	r3, r6, r5
 8006022:	3b15      	subs	r3, #21
 8006024:	f023 0303 	bic.w	r3, r3, #3
 8006028:	3304      	adds	r3, #4
 800602a:	3515      	adds	r5, #21
 800602c:	42ae      	cmp	r6, r5
 800602e:	bf38      	it	cc
 8006030:	2304      	movcc	r3, #4
 8006032:	4418      	add	r0, r3
 8006034:	4473      	add	r3, lr
 8006036:	469e      	mov	lr, r3
 8006038:	4606      	mov	r6, r0
 800603a:	4566      	cmp	r6, ip
 800603c:	d30e      	bcc.n	800605c <__mdiff+0xe8>
 800603e:	f10c 0103 	add.w	r1, ip, #3
 8006042:	1a09      	subs	r1, r1, r0
 8006044:	f021 0103 	bic.w	r1, r1, #3
 8006048:	3803      	subs	r0, #3
 800604a:	4584      	cmp	ip, r0
 800604c:	bf38      	it	cc
 800604e:	2100      	movcc	r1, #0
 8006050:	4419      	add	r1, r3
 8006052:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006056:	b17b      	cbz	r3, 8006078 <__mdiff+0x104>
 8006058:	6117      	str	r7, [r2, #16]
 800605a:	e7a5      	b.n	8005fa8 <__mdiff+0x34>
 800605c:	f856 8b04 	ldr.w	r8, [r6], #4
 8006060:	fa11 f488 	uxtah	r4, r1, r8
 8006064:	1425      	asrs	r5, r4, #16
 8006066:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800606a:	b2a4      	uxth	r4, r4
 800606c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8006070:	f84e 4b04 	str.w	r4, [lr], #4
 8006074:	1429      	asrs	r1, r5, #16
 8006076:	e7e0      	b.n	800603a <__mdiff+0xc6>
 8006078:	3f01      	subs	r7, #1
 800607a:	e7ea      	b.n	8006052 <__mdiff+0xde>
 800607c:	08007690 	.word	0x08007690
 8006080:	0800771c 	.word	0x0800771c

08006084 <__ulp>:
 8006084:	4b11      	ldr	r3, [pc, #68]	; (80060cc <__ulp+0x48>)
 8006086:	400b      	ands	r3, r1
 8006088:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800608c:	2b00      	cmp	r3, #0
 800608e:	dd02      	ble.n	8006096 <__ulp+0x12>
 8006090:	2000      	movs	r0, #0
 8006092:	4619      	mov	r1, r3
 8006094:	4770      	bx	lr
 8006096:	425b      	negs	r3, r3
 8006098:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800609c:	ea4f 5223 	mov.w	r2, r3, asr #20
 80060a0:	f04f 0000 	mov.w	r0, #0
 80060a4:	f04f 0100 	mov.w	r1, #0
 80060a8:	da04      	bge.n	80060b4 <__ulp+0x30>
 80060aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80060ae:	fa43 f102 	asr.w	r1, r3, r2
 80060b2:	4770      	bx	lr
 80060b4:	f1a2 0314 	sub.w	r3, r2, #20
 80060b8:	2b1e      	cmp	r3, #30
 80060ba:	bfda      	itte	le
 80060bc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80060c0:	fa22 f303 	lsrle.w	r3, r2, r3
 80060c4:	2301      	movgt	r3, #1
 80060c6:	4618      	mov	r0, r3
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	7ff00000 	.word	0x7ff00000

080060d0 <__b2d>:
 80060d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060d4:	6907      	ldr	r7, [r0, #16]
 80060d6:	f100 0914 	add.w	r9, r0, #20
 80060da:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80060de:	f1a7 0804 	sub.w	r8, r7, #4
 80060e2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80060e6:	4630      	mov	r0, r6
 80060e8:	f7ff fd52 	bl	8005b90 <__hi0bits>
 80060ec:	f1c0 0320 	rsb	r3, r0, #32
 80060f0:	280a      	cmp	r0, #10
 80060f2:	600b      	str	r3, [r1, #0]
 80060f4:	491f      	ldr	r1, [pc, #124]	; (8006174 <__b2d+0xa4>)
 80060f6:	dc17      	bgt.n	8006128 <__b2d+0x58>
 80060f8:	f1c0 0c0b 	rsb	ip, r0, #11
 80060fc:	45c1      	cmp	r9, r8
 80060fe:	fa26 f30c 	lsr.w	r3, r6, ip
 8006102:	bf38      	it	cc
 8006104:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006108:	ea43 0501 	orr.w	r5, r3, r1
 800610c:	bf28      	it	cs
 800610e:	2200      	movcs	r2, #0
 8006110:	f100 0315 	add.w	r3, r0, #21
 8006114:	fa06 f303 	lsl.w	r3, r6, r3
 8006118:	fa22 f20c 	lsr.w	r2, r2, ip
 800611c:	ea43 0402 	orr.w	r4, r3, r2
 8006120:	4620      	mov	r0, r4
 8006122:	4629      	mov	r1, r5
 8006124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006128:	45c1      	cmp	r9, r8
 800612a:	bf3a      	itte	cc
 800612c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006130:	f1a7 0808 	subcc.w	r8, r7, #8
 8006134:	2200      	movcs	r2, #0
 8006136:	f1b0 030b 	subs.w	r3, r0, #11
 800613a:	d016      	beq.n	800616a <__b2d+0x9a>
 800613c:	f1c3 0720 	rsb	r7, r3, #32
 8006140:	fa22 f107 	lsr.w	r1, r2, r7
 8006144:	45c8      	cmp	r8, r9
 8006146:	fa06 f603 	lsl.w	r6, r6, r3
 800614a:	ea46 0601 	orr.w	r6, r6, r1
 800614e:	bf8c      	ite	hi
 8006150:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006154:	2100      	movls	r1, #0
 8006156:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800615a:	fa02 f003 	lsl.w	r0, r2, r3
 800615e:	40f9      	lsrs	r1, r7
 8006160:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006164:	ea40 0401 	orr.w	r4, r0, r1
 8006168:	e7da      	b.n	8006120 <__b2d+0x50>
 800616a:	ea46 0501 	orr.w	r5, r6, r1
 800616e:	4614      	mov	r4, r2
 8006170:	e7d6      	b.n	8006120 <__b2d+0x50>
 8006172:	bf00      	nop
 8006174:	3ff00000 	.word	0x3ff00000

08006178 <__d2b>:
 8006178:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800617c:	2101      	movs	r1, #1
 800617e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006182:	4690      	mov	r8, r2
 8006184:	461d      	mov	r5, r3
 8006186:	f7ff fc11 	bl	80059ac <_Balloc>
 800618a:	4604      	mov	r4, r0
 800618c:	b930      	cbnz	r0, 800619c <__d2b+0x24>
 800618e:	4602      	mov	r2, r0
 8006190:	4b25      	ldr	r3, [pc, #148]	; (8006228 <__d2b+0xb0>)
 8006192:	4826      	ldr	r0, [pc, #152]	; (800622c <__d2b+0xb4>)
 8006194:	f240 310a 	movw	r1, #778	; 0x30a
 8006198:	f000 fb42 	bl	8006820 <__assert_func>
 800619c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80061a0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80061a4:	bb2d      	cbnz	r5, 80061f2 <__d2b+0x7a>
 80061a6:	9301      	str	r3, [sp, #4]
 80061a8:	f1b8 0300 	subs.w	r3, r8, #0
 80061ac:	d026      	beq.n	80061fc <__d2b+0x84>
 80061ae:	4668      	mov	r0, sp
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	f7ff fd0d 	bl	8005bd0 <__lo0bits>
 80061b6:	9900      	ldr	r1, [sp, #0]
 80061b8:	b1f0      	cbz	r0, 80061f8 <__d2b+0x80>
 80061ba:	9a01      	ldr	r2, [sp, #4]
 80061bc:	f1c0 0320 	rsb	r3, r0, #32
 80061c0:	fa02 f303 	lsl.w	r3, r2, r3
 80061c4:	430b      	orrs	r3, r1
 80061c6:	40c2      	lsrs	r2, r0
 80061c8:	6163      	str	r3, [r4, #20]
 80061ca:	9201      	str	r2, [sp, #4]
 80061cc:	9b01      	ldr	r3, [sp, #4]
 80061ce:	61a3      	str	r3, [r4, #24]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	bf14      	ite	ne
 80061d4:	2102      	movne	r1, #2
 80061d6:	2101      	moveq	r1, #1
 80061d8:	6121      	str	r1, [r4, #16]
 80061da:	b1c5      	cbz	r5, 800620e <__d2b+0x96>
 80061dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80061e0:	4405      	add	r5, r0
 80061e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80061e6:	603d      	str	r5, [r7, #0]
 80061e8:	6030      	str	r0, [r6, #0]
 80061ea:	4620      	mov	r0, r4
 80061ec:	b002      	add	sp, #8
 80061ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061f6:	e7d6      	b.n	80061a6 <__d2b+0x2e>
 80061f8:	6161      	str	r1, [r4, #20]
 80061fa:	e7e7      	b.n	80061cc <__d2b+0x54>
 80061fc:	a801      	add	r0, sp, #4
 80061fe:	f7ff fce7 	bl	8005bd0 <__lo0bits>
 8006202:	9b01      	ldr	r3, [sp, #4]
 8006204:	6163      	str	r3, [r4, #20]
 8006206:	2101      	movs	r1, #1
 8006208:	6121      	str	r1, [r4, #16]
 800620a:	3020      	adds	r0, #32
 800620c:	e7e5      	b.n	80061da <__d2b+0x62>
 800620e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006212:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006216:	6038      	str	r0, [r7, #0]
 8006218:	6918      	ldr	r0, [r3, #16]
 800621a:	f7ff fcb9 	bl	8005b90 <__hi0bits>
 800621e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006222:	6031      	str	r1, [r6, #0]
 8006224:	e7e1      	b.n	80061ea <__d2b+0x72>
 8006226:	bf00      	nop
 8006228:	08007690 	.word	0x08007690
 800622c:	0800771c 	.word	0x0800771c

08006230 <__ratio>:
 8006230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006234:	4688      	mov	r8, r1
 8006236:	4669      	mov	r1, sp
 8006238:	4681      	mov	r9, r0
 800623a:	f7ff ff49 	bl	80060d0 <__b2d>
 800623e:	460f      	mov	r7, r1
 8006240:	4604      	mov	r4, r0
 8006242:	460d      	mov	r5, r1
 8006244:	4640      	mov	r0, r8
 8006246:	a901      	add	r1, sp, #4
 8006248:	f7ff ff42 	bl	80060d0 <__b2d>
 800624c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006250:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006254:	eba3 0c02 	sub.w	ip, r3, r2
 8006258:	e9dd 3200 	ldrd	r3, r2, [sp]
 800625c:	1a9b      	subs	r3, r3, r2
 800625e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006262:	2b00      	cmp	r3, #0
 8006264:	bfd5      	itete	le
 8006266:	460a      	movle	r2, r1
 8006268:	462a      	movgt	r2, r5
 800626a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800626e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006272:	468b      	mov	fp, r1
 8006274:	bfd8      	it	le
 8006276:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800627a:	465b      	mov	r3, fp
 800627c:	4602      	mov	r2, r0
 800627e:	4639      	mov	r1, r7
 8006280:	4620      	mov	r0, r4
 8006282:	f7fa faeb 	bl	800085c <__aeabi_ddiv>
 8006286:	b003      	add	sp, #12
 8006288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800628c <__copybits>:
 800628c:	3901      	subs	r1, #1
 800628e:	b570      	push	{r4, r5, r6, lr}
 8006290:	1149      	asrs	r1, r1, #5
 8006292:	6914      	ldr	r4, [r2, #16]
 8006294:	3101      	adds	r1, #1
 8006296:	f102 0314 	add.w	r3, r2, #20
 800629a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800629e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80062a2:	1f05      	subs	r5, r0, #4
 80062a4:	42a3      	cmp	r3, r4
 80062a6:	d30c      	bcc.n	80062c2 <__copybits+0x36>
 80062a8:	1aa3      	subs	r3, r4, r2
 80062aa:	3b11      	subs	r3, #17
 80062ac:	f023 0303 	bic.w	r3, r3, #3
 80062b0:	3211      	adds	r2, #17
 80062b2:	42a2      	cmp	r2, r4
 80062b4:	bf88      	it	hi
 80062b6:	2300      	movhi	r3, #0
 80062b8:	4418      	add	r0, r3
 80062ba:	2300      	movs	r3, #0
 80062bc:	4288      	cmp	r0, r1
 80062be:	d305      	bcc.n	80062cc <__copybits+0x40>
 80062c0:	bd70      	pop	{r4, r5, r6, pc}
 80062c2:	f853 6b04 	ldr.w	r6, [r3], #4
 80062c6:	f845 6f04 	str.w	r6, [r5, #4]!
 80062ca:	e7eb      	b.n	80062a4 <__copybits+0x18>
 80062cc:	f840 3b04 	str.w	r3, [r0], #4
 80062d0:	e7f4      	b.n	80062bc <__copybits+0x30>

080062d2 <__any_on>:
 80062d2:	f100 0214 	add.w	r2, r0, #20
 80062d6:	6900      	ldr	r0, [r0, #16]
 80062d8:	114b      	asrs	r3, r1, #5
 80062da:	4298      	cmp	r0, r3
 80062dc:	b510      	push	{r4, lr}
 80062de:	db11      	blt.n	8006304 <__any_on+0x32>
 80062e0:	dd0a      	ble.n	80062f8 <__any_on+0x26>
 80062e2:	f011 011f 	ands.w	r1, r1, #31
 80062e6:	d007      	beq.n	80062f8 <__any_on+0x26>
 80062e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80062ec:	fa24 f001 	lsr.w	r0, r4, r1
 80062f0:	fa00 f101 	lsl.w	r1, r0, r1
 80062f4:	428c      	cmp	r4, r1
 80062f6:	d10b      	bne.n	8006310 <__any_on+0x3e>
 80062f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d803      	bhi.n	8006308 <__any_on+0x36>
 8006300:	2000      	movs	r0, #0
 8006302:	bd10      	pop	{r4, pc}
 8006304:	4603      	mov	r3, r0
 8006306:	e7f7      	b.n	80062f8 <__any_on+0x26>
 8006308:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800630c:	2900      	cmp	r1, #0
 800630e:	d0f5      	beq.n	80062fc <__any_on+0x2a>
 8006310:	2001      	movs	r0, #1
 8006312:	e7f6      	b.n	8006302 <__any_on+0x30>

08006314 <_calloc_r>:
 8006314:	b570      	push	{r4, r5, r6, lr}
 8006316:	fba1 5402 	umull	r5, r4, r1, r2
 800631a:	b934      	cbnz	r4, 800632a <_calloc_r+0x16>
 800631c:	4629      	mov	r1, r5
 800631e:	f000 f877 	bl	8006410 <_malloc_r>
 8006322:	4606      	mov	r6, r0
 8006324:	b928      	cbnz	r0, 8006332 <_calloc_r+0x1e>
 8006326:	4630      	mov	r0, r6
 8006328:	bd70      	pop	{r4, r5, r6, pc}
 800632a:	220c      	movs	r2, #12
 800632c:	6002      	str	r2, [r0, #0]
 800632e:	2600      	movs	r6, #0
 8006330:	e7f9      	b.n	8006326 <_calloc_r+0x12>
 8006332:	462a      	mov	r2, r5
 8006334:	4621      	mov	r1, r4
 8006336:	f7fc fc07 	bl	8002b48 <memset>
 800633a:	e7f4      	b.n	8006326 <_calloc_r+0x12>

0800633c <_free_r>:
 800633c:	b538      	push	{r3, r4, r5, lr}
 800633e:	4605      	mov	r5, r0
 8006340:	2900      	cmp	r1, #0
 8006342:	d041      	beq.n	80063c8 <_free_r+0x8c>
 8006344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006348:	1f0c      	subs	r4, r1, #4
 800634a:	2b00      	cmp	r3, #0
 800634c:	bfb8      	it	lt
 800634e:	18e4      	addlt	r4, r4, r3
 8006350:	f000 fab0 	bl	80068b4 <__malloc_lock>
 8006354:	4a1d      	ldr	r2, [pc, #116]	; (80063cc <_free_r+0x90>)
 8006356:	6813      	ldr	r3, [r2, #0]
 8006358:	b933      	cbnz	r3, 8006368 <_free_r+0x2c>
 800635a:	6063      	str	r3, [r4, #4]
 800635c:	6014      	str	r4, [r2, #0]
 800635e:	4628      	mov	r0, r5
 8006360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006364:	f000 baac 	b.w	80068c0 <__malloc_unlock>
 8006368:	42a3      	cmp	r3, r4
 800636a:	d908      	bls.n	800637e <_free_r+0x42>
 800636c:	6820      	ldr	r0, [r4, #0]
 800636e:	1821      	adds	r1, r4, r0
 8006370:	428b      	cmp	r3, r1
 8006372:	bf01      	itttt	eq
 8006374:	6819      	ldreq	r1, [r3, #0]
 8006376:	685b      	ldreq	r3, [r3, #4]
 8006378:	1809      	addeq	r1, r1, r0
 800637a:	6021      	streq	r1, [r4, #0]
 800637c:	e7ed      	b.n	800635a <_free_r+0x1e>
 800637e:	461a      	mov	r2, r3
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	b10b      	cbz	r3, 8006388 <_free_r+0x4c>
 8006384:	42a3      	cmp	r3, r4
 8006386:	d9fa      	bls.n	800637e <_free_r+0x42>
 8006388:	6811      	ldr	r1, [r2, #0]
 800638a:	1850      	adds	r0, r2, r1
 800638c:	42a0      	cmp	r0, r4
 800638e:	d10b      	bne.n	80063a8 <_free_r+0x6c>
 8006390:	6820      	ldr	r0, [r4, #0]
 8006392:	4401      	add	r1, r0
 8006394:	1850      	adds	r0, r2, r1
 8006396:	4283      	cmp	r3, r0
 8006398:	6011      	str	r1, [r2, #0]
 800639a:	d1e0      	bne.n	800635e <_free_r+0x22>
 800639c:	6818      	ldr	r0, [r3, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	6053      	str	r3, [r2, #4]
 80063a2:	4401      	add	r1, r0
 80063a4:	6011      	str	r1, [r2, #0]
 80063a6:	e7da      	b.n	800635e <_free_r+0x22>
 80063a8:	d902      	bls.n	80063b0 <_free_r+0x74>
 80063aa:	230c      	movs	r3, #12
 80063ac:	602b      	str	r3, [r5, #0]
 80063ae:	e7d6      	b.n	800635e <_free_r+0x22>
 80063b0:	6820      	ldr	r0, [r4, #0]
 80063b2:	1821      	adds	r1, r4, r0
 80063b4:	428b      	cmp	r3, r1
 80063b6:	bf04      	itt	eq
 80063b8:	6819      	ldreq	r1, [r3, #0]
 80063ba:	685b      	ldreq	r3, [r3, #4]
 80063bc:	6063      	str	r3, [r4, #4]
 80063be:	bf04      	itt	eq
 80063c0:	1809      	addeq	r1, r1, r0
 80063c2:	6021      	streq	r1, [r4, #0]
 80063c4:	6054      	str	r4, [r2, #4]
 80063c6:	e7ca      	b.n	800635e <_free_r+0x22>
 80063c8:	bd38      	pop	{r3, r4, r5, pc}
 80063ca:	bf00      	nop
 80063cc:	20000478 	.word	0x20000478

080063d0 <sbrk_aligned>:
 80063d0:	b570      	push	{r4, r5, r6, lr}
 80063d2:	4e0e      	ldr	r6, [pc, #56]	; (800640c <sbrk_aligned+0x3c>)
 80063d4:	460c      	mov	r4, r1
 80063d6:	6831      	ldr	r1, [r6, #0]
 80063d8:	4605      	mov	r5, r0
 80063da:	b911      	cbnz	r1, 80063e2 <sbrk_aligned+0x12>
 80063dc:	f000 f9ee 	bl	80067bc <_sbrk_r>
 80063e0:	6030      	str	r0, [r6, #0]
 80063e2:	4621      	mov	r1, r4
 80063e4:	4628      	mov	r0, r5
 80063e6:	f000 f9e9 	bl	80067bc <_sbrk_r>
 80063ea:	1c43      	adds	r3, r0, #1
 80063ec:	d00a      	beq.n	8006404 <sbrk_aligned+0x34>
 80063ee:	1cc4      	adds	r4, r0, #3
 80063f0:	f024 0403 	bic.w	r4, r4, #3
 80063f4:	42a0      	cmp	r0, r4
 80063f6:	d007      	beq.n	8006408 <sbrk_aligned+0x38>
 80063f8:	1a21      	subs	r1, r4, r0
 80063fa:	4628      	mov	r0, r5
 80063fc:	f000 f9de 	bl	80067bc <_sbrk_r>
 8006400:	3001      	adds	r0, #1
 8006402:	d101      	bne.n	8006408 <sbrk_aligned+0x38>
 8006404:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006408:	4620      	mov	r0, r4
 800640a:	bd70      	pop	{r4, r5, r6, pc}
 800640c:	2000047c 	.word	0x2000047c

08006410 <_malloc_r>:
 8006410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006414:	1ccd      	adds	r5, r1, #3
 8006416:	f025 0503 	bic.w	r5, r5, #3
 800641a:	3508      	adds	r5, #8
 800641c:	2d0c      	cmp	r5, #12
 800641e:	bf38      	it	cc
 8006420:	250c      	movcc	r5, #12
 8006422:	2d00      	cmp	r5, #0
 8006424:	4607      	mov	r7, r0
 8006426:	db01      	blt.n	800642c <_malloc_r+0x1c>
 8006428:	42a9      	cmp	r1, r5
 800642a:	d905      	bls.n	8006438 <_malloc_r+0x28>
 800642c:	230c      	movs	r3, #12
 800642e:	603b      	str	r3, [r7, #0]
 8006430:	2600      	movs	r6, #0
 8006432:	4630      	mov	r0, r6
 8006434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006438:	4e2e      	ldr	r6, [pc, #184]	; (80064f4 <_malloc_r+0xe4>)
 800643a:	f000 fa3b 	bl	80068b4 <__malloc_lock>
 800643e:	6833      	ldr	r3, [r6, #0]
 8006440:	461c      	mov	r4, r3
 8006442:	bb34      	cbnz	r4, 8006492 <_malloc_r+0x82>
 8006444:	4629      	mov	r1, r5
 8006446:	4638      	mov	r0, r7
 8006448:	f7ff ffc2 	bl	80063d0 <sbrk_aligned>
 800644c:	1c43      	adds	r3, r0, #1
 800644e:	4604      	mov	r4, r0
 8006450:	d14d      	bne.n	80064ee <_malloc_r+0xde>
 8006452:	6834      	ldr	r4, [r6, #0]
 8006454:	4626      	mov	r6, r4
 8006456:	2e00      	cmp	r6, #0
 8006458:	d140      	bne.n	80064dc <_malloc_r+0xcc>
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	4631      	mov	r1, r6
 800645e:	4638      	mov	r0, r7
 8006460:	eb04 0803 	add.w	r8, r4, r3
 8006464:	f000 f9aa 	bl	80067bc <_sbrk_r>
 8006468:	4580      	cmp	r8, r0
 800646a:	d13a      	bne.n	80064e2 <_malloc_r+0xd2>
 800646c:	6821      	ldr	r1, [r4, #0]
 800646e:	3503      	adds	r5, #3
 8006470:	1a6d      	subs	r5, r5, r1
 8006472:	f025 0503 	bic.w	r5, r5, #3
 8006476:	3508      	adds	r5, #8
 8006478:	2d0c      	cmp	r5, #12
 800647a:	bf38      	it	cc
 800647c:	250c      	movcc	r5, #12
 800647e:	4629      	mov	r1, r5
 8006480:	4638      	mov	r0, r7
 8006482:	f7ff ffa5 	bl	80063d0 <sbrk_aligned>
 8006486:	3001      	adds	r0, #1
 8006488:	d02b      	beq.n	80064e2 <_malloc_r+0xd2>
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	442b      	add	r3, r5
 800648e:	6023      	str	r3, [r4, #0]
 8006490:	e00e      	b.n	80064b0 <_malloc_r+0xa0>
 8006492:	6822      	ldr	r2, [r4, #0]
 8006494:	1b52      	subs	r2, r2, r5
 8006496:	d41e      	bmi.n	80064d6 <_malloc_r+0xc6>
 8006498:	2a0b      	cmp	r2, #11
 800649a:	d916      	bls.n	80064ca <_malloc_r+0xba>
 800649c:	1961      	adds	r1, r4, r5
 800649e:	42a3      	cmp	r3, r4
 80064a0:	6025      	str	r5, [r4, #0]
 80064a2:	bf18      	it	ne
 80064a4:	6059      	strne	r1, [r3, #4]
 80064a6:	6863      	ldr	r3, [r4, #4]
 80064a8:	bf08      	it	eq
 80064aa:	6031      	streq	r1, [r6, #0]
 80064ac:	5162      	str	r2, [r4, r5]
 80064ae:	604b      	str	r3, [r1, #4]
 80064b0:	4638      	mov	r0, r7
 80064b2:	f104 060b 	add.w	r6, r4, #11
 80064b6:	f000 fa03 	bl	80068c0 <__malloc_unlock>
 80064ba:	f026 0607 	bic.w	r6, r6, #7
 80064be:	1d23      	adds	r3, r4, #4
 80064c0:	1af2      	subs	r2, r6, r3
 80064c2:	d0b6      	beq.n	8006432 <_malloc_r+0x22>
 80064c4:	1b9b      	subs	r3, r3, r6
 80064c6:	50a3      	str	r3, [r4, r2]
 80064c8:	e7b3      	b.n	8006432 <_malloc_r+0x22>
 80064ca:	6862      	ldr	r2, [r4, #4]
 80064cc:	42a3      	cmp	r3, r4
 80064ce:	bf0c      	ite	eq
 80064d0:	6032      	streq	r2, [r6, #0]
 80064d2:	605a      	strne	r2, [r3, #4]
 80064d4:	e7ec      	b.n	80064b0 <_malloc_r+0xa0>
 80064d6:	4623      	mov	r3, r4
 80064d8:	6864      	ldr	r4, [r4, #4]
 80064da:	e7b2      	b.n	8006442 <_malloc_r+0x32>
 80064dc:	4634      	mov	r4, r6
 80064de:	6876      	ldr	r6, [r6, #4]
 80064e0:	e7b9      	b.n	8006456 <_malloc_r+0x46>
 80064e2:	230c      	movs	r3, #12
 80064e4:	603b      	str	r3, [r7, #0]
 80064e6:	4638      	mov	r0, r7
 80064e8:	f000 f9ea 	bl	80068c0 <__malloc_unlock>
 80064ec:	e7a1      	b.n	8006432 <_malloc_r+0x22>
 80064ee:	6025      	str	r5, [r4, #0]
 80064f0:	e7de      	b.n	80064b0 <_malloc_r+0xa0>
 80064f2:	bf00      	nop
 80064f4:	20000478 	.word	0x20000478

080064f8 <__ssputs_r>:
 80064f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064fc:	688e      	ldr	r6, [r1, #8]
 80064fe:	429e      	cmp	r6, r3
 8006500:	4682      	mov	sl, r0
 8006502:	460c      	mov	r4, r1
 8006504:	4690      	mov	r8, r2
 8006506:	461f      	mov	r7, r3
 8006508:	d838      	bhi.n	800657c <__ssputs_r+0x84>
 800650a:	898a      	ldrh	r2, [r1, #12]
 800650c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006510:	d032      	beq.n	8006578 <__ssputs_r+0x80>
 8006512:	6825      	ldr	r5, [r4, #0]
 8006514:	6909      	ldr	r1, [r1, #16]
 8006516:	eba5 0901 	sub.w	r9, r5, r1
 800651a:	6965      	ldr	r5, [r4, #20]
 800651c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006520:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006524:	3301      	adds	r3, #1
 8006526:	444b      	add	r3, r9
 8006528:	106d      	asrs	r5, r5, #1
 800652a:	429d      	cmp	r5, r3
 800652c:	bf38      	it	cc
 800652e:	461d      	movcc	r5, r3
 8006530:	0553      	lsls	r3, r2, #21
 8006532:	d531      	bpl.n	8006598 <__ssputs_r+0xa0>
 8006534:	4629      	mov	r1, r5
 8006536:	f7ff ff6b 	bl	8006410 <_malloc_r>
 800653a:	4606      	mov	r6, r0
 800653c:	b950      	cbnz	r0, 8006554 <__ssputs_r+0x5c>
 800653e:	230c      	movs	r3, #12
 8006540:	f8ca 3000 	str.w	r3, [sl]
 8006544:	89a3      	ldrh	r3, [r4, #12]
 8006546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800654a:	81a3      	strh	r3, [r4, #12]
 800654c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006554:	6921      	ldr	r1, [r4, #16]
 8006556:	464a      	mov	r2, r9
 8006558:	f7ff fa1a 	bl	8005990 <memcpy>
 800655c:	89a3      	ldrh	r3, [r4, #12]
 800655e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006566:	81a3      	strh	r3, [r4, #12]
 8006568:	6126      	str	r6, [r4, #16]
 800656a:	6165      	str	r5, [r4, #20]
 800656c:	444e      	add	r6, r9
 800656e:	eba5 0509 	sub.w	r5, r5, r9
 8006572:	6026      	str	r6, [r4, #0]
 8006574:	60a5      	str	r5, [r4, #8]
 8006576:	463e      	mov	r6, r7
 8006578:	42be      	cmp	r6, r7
 800657a:	d900      	bls.n	800657e <__ssputs_r+0x86>
 800657c:	463e      	mov	r6, r7
 800657e:	6820      	ldr	r0, [r4, #0]
 8006580:	4632      	mov	r2, r6
 8006582:	4641      	mov	r1, r8
 8006584:	f000 f97c 	bl	8006880 <memmove>
 8006588:	68a3      	ldr	r3, [r4, #8]
 800658a:	1b9b      	subs	r3, r3, r6
 800658c:	60a3      	str	r3, [r4, #8]
 800658e:	6823      	ldr	r3, [r4, #0]
 8006590:	4433      	add	r3, r6
 8006592:	6023      	str	r3, [r4, #0]
 8006594:	2000      	movs	r0, #0
 8006596:	e7db      	b.n	8006550 <__ssputs_r+0x58>
 8006598:	462a      	mov	r2, r5
 800659a:	f000 f997 	bl	80068cc <_realloc_r>
 800659e:	4606      	mov	r6, r0
 80065a0:	2800      	cmp	r0, #0
 80065a2:	d1e1      	bne.n	8006568 <__ssputs_r+0x70>
 80065a4:	6921      	ldr	r1, [r4, #16]
 80065a6:	4650      	mov	r0, sl
 80065a8:	f7ff fec8 	bl	800633c <_free_r>
 80065ac:	e7c7      	b.n	800653e <__ssputs_r+0x46>
	...

080065b0 <_svfiprintf_r>:
 80065b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b4:	4698      	mov	r8, r3
 80065b6:	898b      	ldrh	r3, [r1, #12]
 80065b8:	061b      	lsls	r3, r3, #24
 80065ba:	b09d      	sub	sp, #116	; 0x74
 80065bc:	4607      	mov	r7, r0
 80065be:	460d      	mov	r5, r1
 80065c0:	4614      	mov	r4, r2
 80065c2:	d50e      	bpl.n	80065e2 <_svfiprintf_r+0x32>
 80065c4:	690b      	ldr	r3, [r1, #16]
 80065c6:	b963      	cbnz	r3, 80065e2 <_svfiprintf_r+0x32>
 80065c8:	2140      	movs	r1, #64	; 0x40
 80065ca:	f7ff ff21 	bl	8006410 <_malloc_r>
 80065ce:	6028      	str	r0, [r5, #0]
 80065d0:	6128      	str	r0, [r5, #16]
 80065d2:	b920      	cbnz	r0, 80065de <_svfiprintf_r+0x2e>
 80065d4:	230c      	movs	r3, #12
 80065d6:	603b      	str	r3, [r7, #0]
 80065d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065dc:	e0d1      	b.n	8006782 <_svfiprintf_r+0x1d2>
 80065de:	2340      	movs	r3, #64	; 0x40
 80065e0:	616b      	str	r3, [r5, #20]
 80065e2:	2300      	movs	r3, #0
 80065e4:	9309      	str	r3, [sp, #36]	; 0x24
 80065e6:	2320      	movs	r3, #32
 80065e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80065f0:	2330      	movs	r3, #48	; 0x30
 80065f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800679c <_svfiprintf_r+0x1ec>
 80065f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065fa:	f04f 0901 	mov.w	r9, #1
 80065fe:	4623      	mov	r3, r4
 8006600:	469a      	mov	sl, r3
 8006602:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006606:	b10a      	cbz	r2, 800660c <_svfiprintf_r+0x5c>
 8006608:	2a25      	cmp	r2, #37	; 0x25
 800660a:	d1f9      	bne.n	8006600 <_svfiprintf_r+0x50>
 800660c:	ebba 0b04 	subs.w	fp, sl, r4
 8006610:	d00b      	beq.n	800662a <_svfiprintf_r+0x7a>
 8006612:	465b      	mov	r3, fp
 8006614:	4622      	mov	r2, r4
 8006616:	4629      	mov	r1, r5
 8006618:	4638      	mov	r0, r7
 800661a:	f7ff ff6d 	bl	80064f8 <__ssputs_r>
 800661e:	3001      	adds	r0, #1
 8006620:	f000 80aa 	beq.w	8006778 <_svfiprintf_r+0x1c8>
 8006624:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006626:	445a      	add	r2, fp
 8006628:	9209      	str	r2, [sp, #36]	; 0x24
 800662a:	f89a 3000 	ldrb.w	r3, [sl]
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 80a2 	beq.w	8006778 <_svfiprintf_r+0x1c8>
 8006634:	2300      	movs	r3, #0
 8006636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800663a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800663e:	f10a 0a01 	add.w	sl, sl, #1
 8006642:	9304      	str	r3, [sp, #16]
 8006644:	9307      	str	r3, [sp, #28]
 8006646:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800664a:	931a      	str	r3, [sp, #104]	; 0x68
 800664c:	4654      	mov	r4, sl
 800664e:	2205      	movs	r2, #5
 8006650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006654:	4851      	ldr	r0, [pc, #324]	; (800679c <_svfiprintf_r+0x1ec>)
 8006656:	f7f9 fdcb 	bl	80001f0 <memchr>
 800665a:	9a04      	ldr	r2, [sp, #16]
 800665c:	b9d8      	cbnz	r0, 8006696 <_svfiprintf_r+0xe6>
 800665e:	06d0      	lsls	r0, r2, #27
 8006660:	bf44      	itt	mi
 8006662:	2320      	movmi	r3, #32
 8006664:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006668:	0711      	lsls	r1, r2, #28
 800666a:	bf44      	itt	mi
 800666c:	232b      	movmi	r3, #43	; 0x2b
 800666e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006672:	f89a 3000 	ldrb.w	r3, [sl]
 8006676:	2b2a      	cmp	r3, #42	; 0x2a
 8006678:	d015      	beq.n	80066a6 <_svfiprintf_r+0xf6>
 800667a:	9a07      	ldr	r2, [sp, #28]
 800667c:	4654      	mov	r4, sl
 800667e:	2000      	movs	r0, #0
 8006680:	f04f 0c0a 	mov.w	ip, #10
 8006684:	4621      	mov	r1, r4
 8006686:	f811 3b01 	ldrb.w	r3, [r1], #1
 800668a:	3b30      	subs	r3, #48	; 0x30
 800668c:	2b09      	cmp	r3, #9
 800668e:	d94e      	bls.n	800672e <_svfiprintf_r+0x17e>
 8006690:	b1b0      	cbz	r0, 80066c0 <_svfiprintf_r+0x110>
 8006692:	9207      	str	r2, [sp, #28]
 8006694:	e014      	b.n	80066c0 <_svfiprintf_r+0x110>
 8006696:	eba0 0308 	sub.w	r3, r0, r8
 800669a:	fa09 f303 	lsl.w	r3, r9, r3
 800669e:	4313      	orrs	r3, r2
 80066a0:	9304      	str	r3, [sp, #16]
 80066a2:	46a2      	mov	sl, r4
 80066a4:	e7d2      	b.n	800664c <_svfiprintf_r+0x9c>
 80066a6:	9b03      	ldr	r3, [sp, #12]
 80066a8:	1d19      	adds	r1, r3, #4
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	9103      	str	r1, [sp, #12]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	bfbb      	ittet	lt
 80066b2:	425b      	neglt	r3, r3
 80066b4:	f042 0202 	orrlt.w	r2, r2, #2
 80066b8:	9307      	strge	r3, [sp, #28]
 80066ba:	9307      	strlt	r3, [sp, #28]
 80066bc:	bfb8      	it	lt
 80066be:	9204      	strlt	r2, [sp, #16]
 80066c0:	7823      	ldrb	r3, [r4, #0]
 80066c2:	2b2e      	cmp	r3, #46	; 0x2e
 80066c4:	d10c      	bne.n	80066e0 <_svfiprintf_r+0x130>
 80066c6:	7863      	ldrb	r3, [r4, #1]
 80066c8:	2b2a      	cmp	r3, #42	; 0x2a
 80066ca:	d135      	bne.n	8006738 <_svfiprintf_r+0x188>
 80066cc:	9b03      	ldr	r3, [sp, #12]
 80066ce:	1d1a      	adds	r2, r3, #4
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	9203      	str	r2, [sp, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	bfb8      	it	lt
 80066d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80066dc:	3402      	adds	r4, #2
 80066de:	9305      	str	r3, [sp, #20]
 80066e0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80067a0 <_svfiprintf_r+0x1f0>
 80066e4:	7821      	ldrb	r1, [r4, #0]
 80066e6:	2203      	movs	r2, #3
 80066e8:	4650      	mov	r0, sl
 80066ea:	f7f9 fd81 	bl	80001f0 <memchr>
 80066ee:	b140      	cbz	r0, 8006702 <_svfiprintf_r+0x152>
 80066f0:	2340      	movs	r3, #64	; 0x40
 80066f2:	eba0 000a 	sub.w	r0, r0, sl
 80066f6:	fa03 f000 	lsl.w	r0, r3, r0
 80066fa:	9b04      	ldr	r3, [sp, #16]
 80066fc:	4303      	orrs	r3, r0
 80066fe:	3401      	adds	r4, #1
 8006700:	9304      	str	r3, [sp, #16]
 8006702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006706:	4827      	ldr	r0, [pc, #156]	; (80067a4 <_svfiprintf_r+0x1f4>)
 8006708:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800670c:	2206      	movs	r2, #6
 800670e:	f7f9 fd6f 	bl	80001f0 <memchr>
 8006712:	2800      	cmp	r0, #0
 8006714:	d038      	beq.n	8006788 <_svfiprintf_r+0x1d8>
 8006716:	4b24      	ldr	r3, [pc, #144]	; (80067a8 <_svfiprintf_r+0x1f8>)
 8006718:	bb1b      	cbnz	r3, 8006762 <_svfiprintf_r+0x1b2>
 800671a:	9b03      	ldr	r3, [sp, #12]
 800671c:	3307      	adds	r3, #7
 800671e:	f023 0307 	bic.w	r3, r3, #7
 8006722:	3308      	adds	r3, #8
 8006724:	9303      	str	r3, [sp, #12]
 8006726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006728:	4433      	add	r3, r6
 800672a:	9309      	str	r3, [sp, #36]	; 0x24
 800672c:	e767      	b.n	80065fe <_svfiprintf_r+0x4e>
 800672e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006732:	460c      	mov	r4, r1
 8006734:	2001      	movs	r0, #1
 8006736:	e7a5      	b.n	8006684 <_svfiprintf_r+0xd4>
 8006738:	2300      	movs	r3, #0
 800673a:	3401      	adds	r4, #1
 800673c:	9305      	str	r3, [sp, #20]
 800673e:	4619      	mov	r1, r3
 8006740:	f04f 0c0a 	mov.w	ip, #10
 8006744:	4620      	mov	r0, r4
 8006746:	f810 2b01 	ldrb.w	r2, [r0], #1
 800674a:	3a30      	subs	r2, #48	; 0x30
 800674c:	2a09      	cmp	r2, #9
 800674e:	d903      	bls.n	8006758 <_svfiprintf_r+0x1a8>
 8006750:	2b00      	cmp	r3, #0
 8006752:	d0c5      	beq.n	80066e0 <_svfiprintf_r+0x130>
 8006754:	9105      	str	r1, [sp, #20]
 8006756:	e7c3      	b.n	80066e0 <_svfiprintf_r+0x130>
 8006758:	fb0c 2101 	mla	r1, ip, r1, r2
 800675c:	4604      	mov	r4, r0
 800675e:	2301      	movs	r3, #1
 8006760:	e7f0      	b.n	8006744 <_svfiprintf_r+0x194>
 8006762:	ab03      	add	r3, sp, #12
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	462a      	mov	r2, r5
 8006768:	4b10      	ldr	r3, [pc, #64]	; (80067ac <_svfiprintf_r+0x1fc>)
 800676a:	a904      	add	r1, sp, #16
 800676c:	4638      	mov	r0, r7
 800676e:	f7fc fa91 	bl	8002c94 <_printf_float>
 8006772:	1c42      	adds	r2, r0, #1
 8006774:	4606      	mov	r6, r0
 8006776:	d1d6      	bne.n	8006726 <_svfiprintf_r+0x176>
 8006778:	89ab      	ldrh	r3, [r5, #12]
 800677a:	065b      	lsls	r3, r3, #25
 800677c:	f53f af2c 	bmi.w	80065d8 <_svfiprintf_r+0x28>
 8006780:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006782:	b01d      	add	sp, #116	; 0x74
 8006784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006788:	ab03      	add	r3, sp, #12
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	462a      	mov	r2, r5
 800678e:	4b07      	ldr	r3, [pc, #28]	; (80067ac <_svfiprintf_r+0x1fc>)
 8006790:	a904      	add	r1, sp, #16
 8006792:	4638      	mov	r0, r7
 8006794:	f7fc fd16 	bl	80031c4 <_printf_i>
 8006798:	e7eb      	b.n	8006772 <_svfiprintf_r+0x1c2>
 800679a:	bf00      	nop
 800679c:	08007874 	.word	0x08007874
 80067a0:	0800787a 	.word	0x0800787a
 80067a4:	0800787e 	.word	0x0800787e
 80067a8:	08002c95 	.word	0x08002c95
 80067ac:	080064f9 	.word	0x080064f9

080067b0 <nan>:
 80067b0:	4901      	ldr	r1, [pc, #4]	; (80067b8 <nan+0x8>)
 80067b2:	2000      	movs	r0, #0
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	7ff80000 	.word	0x7ff80000

080067bc <_sbrk_r>:
 80067bc:	b538      	push	{r3, r4, r5, lr}
 80067be:	4d06      	ldr	r5, [pc, #24]	; (80067d8 <_sbrk_r+0x1c>)
 80067c0:	2300      	movs	r3, #0
 80067c2:	4604      	mov	r4, r0
 80067c4:	4608      	mov	r0, r1
 80067c6:	602b      	str	r3, [r5, #0]
 80067c8:	f000 fe1a 	bl	8007400 <_sbrk>
 80067cc:	1c43      	adds	r3, r0, #1
 80067ce:	d102      	bne.n	80067d6 <_sbrk_r+0x1a>
 80067d0:	682b      	ldr	r3, [r5, #0]
 80067d2:	b103      	cbz	r3, 80067d6 <_sbrk_r+0x1a>
 80067d4:	6023      	str	r3, [r4, #0]
 80067d6:	bd38      	pop	{r3, r4, r5, pc}
 80067d8:	20000480 	.word	0x20000480

080067dc <strncmp>:
 80067dc:	b510      	push	{r4, lr}
 80067de:	4603      	mov	r3, r0
 80067e0:	b172      	cbz	r2, 8006800 <strncmp+0x24>
 80067e2:	3901      	subs	r1, #1
 80067e4:	1884      	adds	r4, r0, r2
 80067e6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80067ea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80067ee:	4290      	cmp	r0, r2
 80067f0:	d101      	bne.n	80067f6 <strncmp+0x1a>
 80067f2:	42a3      	cmp	r3, r4
 80067f4:	d101      	bne.n	80067fa <strncmp+0x1e>
 80067f6:	1a80      	subs	r0, r0, r2
 80067f8:	bd10      	pop	{r4, pc}
 80067fa:	2800      	cmp	r0, #0
 80067fc:	d1f3      	bne.n	80067e6 <strncmp+0xa>
 80067fe:	e7fa      	b.n	80067f6 <strncmp+0x1a>
 8006800:	4610      	mov	r0, r2
 8006802:	e7f9      	b.n	80067f8 <strncmp+0x1c>

08006804 <__ascii_wctomb>:
 8006804:	4603      	mov	r3, r0
 8006806:	4608      	mov	r0, r1
 8006808:	b141      	cbz	r1, 800681c <__ascii_wctomb+0x18>
 800680a:	2aff      	cmp	r2, #255	; 0xff
 800680c:	d904      	bls.n	8006818 <__ascii_wctomb+0x14>
 800680e:	228a      	movs	r2, #138	; 0x8a
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006816:	4770      	bx	lr
 8006818:	700a      	strb	r2, [r1, #0]
 800681a:	2001      	movs	r0, #1
 800681c:	4770      	bx	lr
	...

08006820 <__assert_func>:
 8006820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006822:	4614      	mov	r4, r2
 8006824:	461a      	mov	r2, r3
 8006826:	4b09      	ldr	r3, [pc, #36]	; (800684c <__assert_func+0x2c>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4605      	mov	r5, r0
 800682c:	68d8      	ldr	r0, [r3, #12]
 800682e:	b14c      	cbz	r4, 8006844 <__assert_func+0x24>
 8006830:	4b07      	ldr	r3, [pc, #28]	; (8006850 <__assert_func+0x30>)
 8006832:	9100      	str	r1, [sp, #0]
 8006834:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006838:	4906      	ldr	r1, [pc, #24]	; (8006854 <__assert_func+0x34>)
 800683a:	462b      	mov	r3, r5
 800683c:	f000 f80e 	bl	800685c <fiprintf>
 8006840:	f000 fa8a 	bl	8006d58 <abort>
 8006844:	4b04      	ldr	r3, [pc, #16]	; (8006858 <__assert_func+0x38>)
 8006846:	461c      	mov	r4, r3
 8006848:	e7f3      	b.n	8006832 <__assert_func+0x12>
 800684a:	bf00      	nop
 800684c:	20000044 	.word	0x20000044
 8006850:	08007885 	.word	0x08007885
 8006854:	08007892 	.word	0x08007892
 8006858:	080078c0 	.word	0x080078c0

0800685c <fiprintf>:
 800685c:	b40e      	push	{r1, r2, r3}
 800685e:	b503      	push	{r0, r1, lr}
 8006860:	4601      	mov	r1, r0
 8006862:	ab03      	add	r3, sp, #12
 8006864:	4805      	ldr	r0, [pc, #20]	; (800687c <fiprintf+0x20>)
 8006866:	f853 2b04 	ldr.w	r2, [r3], #4
 800686a:	6800      	ldr	r0, [r0, #0]
 800686c:	9301      	str	r3, [sp, #4]
 800686e:	f000 f883 	bl	8006978 <_vfiprintf_r>
 8006872:	b002      	add	sp, #8
 8006874:	f85d eb04 	ldr.w	lr, [sp], #4
 8006878:	b003      	add	sp, #12
 800687a:	4770      	bx	lr
 800687c:	20000044 	.word	0x20000044

08006880 <memmove>:
 8006880:	4288      	cmp	r0, r1
 8006882:	b510      	push	{r4, lr}
 8006884:	eb01 0402 	add.w	r4, r1, r2
 8006888:	d902      	bls.n	8006890 <memmove+0x10>
 800688a:	4284      	cmp	r4, r0
 800688c:	4623      	mov	r3, r4
 800688e:	d807      	bhi.n	80068a0 <memmove+0x20>
 8006890:	1e43      	subs	r3, r0, #1
 8006892:	42a1      	cmp	r1, r4
 8006894:	d008      	beq.n	80068a8 <memmove+0x28>
 8006896:	f811 2b01 	ldrb.w	r2, [r1], #1
 800689a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800689e:	e7f8      	b.n	8006892 <memmove+0x12>
 80068a0:	4402      	add	r2, r0
 80068a2:	4601      	mov	r1, r0
 80068a4:	428a      	cmp	r2, r1
 80068a6:	d100      	bne.n	80068aa <memmove+0x2a>
 80068a8:	bd10      	pop	{r4, pc}
 80068aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068b2:	e7f7      	b.n	80068a4 <memmove+0x24>

080068b4 <__malloc_lock>:
 80068b4:	4801      	ldr	r0, [pc, #4]	; (80068bc <__malloc_lock+0x8>)
 80068b6:	f000 bc0b 	b.w	80070d0 <__retarget_lock_acquire_recursive>
 80068ba:	bf00      	nop
 80068bc:	20000484 	.word	0x20000484

080068c0 <__malloc_unlock>:
 80068c0:	4801      	ldr	r0, [pc, #4]	; (80068c8 <__malloc_unlock+0x8>)
 80068c2:	f000 bc06 	b.w	80070d2 <__retarget_lock_release_recursive>
 80068c6:	bf00      	nop
 80068c8:	20000484 	.word	0x20000484

080068cc <_realloc_r>:
 80068cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d0:	4680      	mov	r8, r0
 80068d2:	4614      	mov	r4, r2
 80068d4:	460e      	mov	r6, r1
 80068d6:	b921      	cbnz	r1, 80068e2 <_realloc_r+0x16>
 80068d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068dc:	4611      	mov	r1, r2
 80068de:	f7ff bd97 	b.w	8006410 <_malloc_r>
 80068e2:	b92a      	cbnz	r2, 80068f0 <_realloc_r+0x24>
 80068e4:	f7ff fd2a 	bl	800633c <_free_r>
 80068e8:	4625      	mov	r5, r4
 80068ea:	4628      	mov	r0, r5
 80068ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068f0:	f000 fc56 	bl	80071a0 <_malloc_usable_size_r>
 80068f4:	4284      	cmp	r4, r0
 80068f6:	4607      	mov	r7, r0
 80068f8:	d802      	bhi.n	8006900 <_realloc_r+0x34>
 80068fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80068fe:	d812      	bhi.n	8006926 <_realloc_r+0x5a>
 8006900:	4621      	mov	r1, r4
 8006902:	4640      	mov	r0, r8
 8006904:	f7ff fd84 	bl	8006410 <_malloc_r>
 8006908:	4605      	mov	r5, r0
 800690a:	2800      	cmp	r0, #0
 800690c:	d0ed      	beq.n	80068ea <_realloc_r+0x1e>
 800690e:	42bc      	cmp	r4, r7
 8006910:	4622      	mov	r2, r4
 8006912:	4631      	mov	r1, r6
 8006914:	bf28      	it	cs
 8006916:	463a      	movcs	r2, r7
 8006918:	f7ff f83a 	bl	8005990 <memcpy>
 800691c:	4631      	mov	r1, r6
 800691e:	4640      	mov	r0, r8
 8006920:	f7ff fd0c 	bl	800633c <_free_r>
 8006924:	e7e1      	b.n	80068ea <_realloc_r+0x1e>
 8006926:	4635      	mov	r5, r6
 8006928:	e7df      	b.n	80068ea <_realloc_r+0x1e>

0800692a <__sfputc_r>:
 800692a:	6893      	ldr	r3, [r2, #8]
 800692c:	3b01      	subs	r3, #1
 800692e:	2b00      	cmp	r3, #0
 8006930:	b410      	push	{r4}
 8006932:	6093      	str	r3, [r2, #8]
 8006934:	da07      	bge.n	8006946 <__sfputc_r+0x1c>
 8006936:	6994      	ldr	r4, [r2, #24]
 8006938:	42a3      	cmp	r3, r4
 800693a:	db01      	blt.n	8006940 <__sfputc_r+0x16>
 800693c:	290a      	cmp	r1, #10
 800693e:	d102      	bne.n	8006946 <__sfputc_r+0x1c>
 8006940:	bc10      	pop	{r4}
 8006942:	f000 b949 	b.w	8006bd8 <__swbuf_r>
 8006946:	6813      	ldr	r3, [r2, #0]
 8006948:	1c58      	adds	r0, r3, #1
 800694a:	6010      	str	r0, [r2, #0]
 800694c:	7019      	strb	r1, [r3, #0]
 800694e:	4608      	mov	r0, r1
 8006950:	bc10      	pop	{r4}
 8006952:	4770      	bx	lr

08006954 <__sfputs_r>:
 8006954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006956:	4606      	mov	r6, r0
 8006958:	460f      	mov	r7, r1
 800695a:	4614      	mov	r4, r2
 800695c:	18d5      	adds	r5, r2, r3
 800695e:	42ac      	cmp	r4, r5
 8006960:	d101      	bne.n	8006966 <__sfputs_r+0x12>
 8006962:	2000      	movs	r0, #0
 8006964:	e007      	b.n	8006976 <__sfputs_r+0x22>
 8006966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800696a:	463a      	mov	r2, r7
 800696c:	4630      	mov	r0, r6
 800696e:	f7ff ffdc 	bl	800692a <__sfputc_r>
 8006972:	1c43      	adds	r3, r0, #1
 8006974:	d1f3      	bne.n	800695e <__sfputs_r+0xa>
 8006976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006978 <_vfiprintf_r>:
 8006978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697c:	460d      	mov	r5, r1
 800697e:	b09d      	sub	sp, #116	; 0x74
 8006980:	4614      	mov	r4, r2
 8006982:	4698      	mov	r8, r3
 8006984:	4606      	mov	r6, r0
 8006986:	b118      	cbz	r0, 8006990 <_vfiprintf_r+0x18>
 8006988:	6983      	ldr	r3, [r0, #24]
 800698a:	b90b      	cbnz	r3, 8006990 <_vfiprintf_r+0x18>
 800698c:	f000 fb02 	bl	8006f94 <__sinit>
 8006990:	4b89      	ldr	r3, [pc, #548]	; (8006bb8 <_vfiprintf_r+0x240>)
 8006992:	429d      	cmp	r5, r3
 8006994:	d11b      	bne.n	80069ce <_vfiprintf_r+0x56>
 8006996:	6875      	ldr	r5, [r6, #4]
 8006998:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800699a:	07d9      	lsls	r1, r3, #31
 800699c:	d405      	bmi.n	80069aa <_vfiprintf_r+0x32>
 800699e:	89ab      	ldrh	r3, [r5, #12]
 80069a0:	059a      	lsls	r2, r3, #22
 80069a2:	d402      	bmi.n	80069aa <_vfiprintf_r+0x32>
 80069a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069a6:	f000 fb93 	bl	80070d0 <__retarget_lock_acquire_recursive>
 80069aa:	89ab      	ldrh	r3, [r5, #12]
 80069ac:	071b      	lsls	r3, r3, #28
 80069ae:	d501      	bpl.n	80069b4 <_vfiprintf_r+0x3c>
 80069b0:	692b      	ldr	r3, [r5, #16]
 80069b2:	b9eb      	cbnz	r3, 80069f0 <_vfiprintf_r+0x78>
 80069b4:	4629      	mov	r1, r5
 80069b6:	4630      	mov	r0, r6
 80069b8:	f000 f960 	bl	8006c7c <__swsetup_r>
 80069bc:	b1c0      	cbz	r0, 80069f0 <_vfiprintf_r+0x78>
 80069be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069c0:	07dc      	lsls	r4, r3, #31
 80069c2:	d50e      	bpl.n	80069e2 <_vfiprintf_r+0x6a>
 80069c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069c8:	b01d      	add	sp, #116	; 0x74
 80069ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ce:	4b7b      	ldr	r3, [pc, #492]	; (8006bbc <_vfiprintf_r+0x244>)
 80069d0:	429d      	cmp	r5, r3
 80069d2:	d101      	bne.n	80069d8 <_vfiprintf_r+0x60>
 80069d4:	68b5      	ldr	r5, [r6, #8]
 80069d6:	e7df      	b.n	8006998 <_vfiprintf_r+0x20>
 80069d8:	4b79      	ldr	r3, [pc, #484]	; (8006bc0 <_vfiprintf_r+0x248>)
 80069da:	429d      	cmp	r5, r3
 80069dc:	bf08      	it	eq
 80069de:	68f5      	ldreq	r5, [r6, #12]
 80069e0:	e7da      	b.n	8006998 <_vfiprintf_r+0x20>
 80069e2:	89ab      	ldrh	r3, [r5, #12]
 80069e4:	0598      	lsls	r0, r3, #22
 80069e6:	d4ed      	bmi.n	80069c4 <_vfiprintf_r+0x4c>
 80069e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069ea:	f000 fb72 	bl	80070d2 <__retarget_lock_release_recursive>
 80069ee:	e7e9      	b.n	80069c4 <_vfiprintf_r+0x4c>
 80069f0:	2300      	movs	r3, #0
 80069f2:	9309      	str	r3, [sp, #36]	; 0x24
 80069f4:	2320      	movs	r3, #32
 80069f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80069fe:	2330      	movs	r3, #48	; 0x30
 8006a00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006bc4 <_vfiprintf_r+0x24c>
 8006a04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a08:	f04f 0901 	mov.w	r9, #1
 8006a0c:	4623      	mov	r3, r4
 8006a0e:	469a      	mov	sl, r3
 8006a10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a14:	b10a      	cbz	r2, 8006a1a <_vfiprintf_r+0xa2>
 8006a16:	2a25      	cmp	r2, #37	; 0x25
 8006a18:	d1f9      	bne.n	8006a0e <_vfiprintf_r+0x96>
 8006a1a:	ebba 0b04 	subs.w	fp, sl, r4
 8006a1e:	d00b      	beq.n	8006a38 <_vfiprintf_r+0xc0>
 8006a20:	465b      	mov	r3, fp
 8006a22:	4622      	mov	r2, r4
 8006a24:	4629      	mov	r1, r5
 8006a26:	4630      	mov	r0, r6
 8006a28:	f7ff ff94 	bl	8006954 <__sfputs_r>
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	f000 80aa 	beq.w	8006b86 <_vfiprintf_r+0x20e>
 8006a32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a34:	445a      	add	r2, fp
 8006a36:	9209      	str	r2, [sp, #36]	; 0x24
 8006a38:	f89a 3000 	ldrb.w	r3, [sl]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 80a2 	beq.w	8006b86 <_vfiprintf_r+0x20e>
 8006a42:	2300      	movs	r3, #0
 8006a44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a4c:	f10a 0a01 	add.w	sl, sl, #1
 8006a50:	9304      	str	r3, [sp, #16]
 8006a52:	9307      	str	r3, [sp, #28]
 8006a54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a58:	931a      	str	r3, [sp, #104]	; 0x68
 8006a5a:	4654      	mov	r4, sl
 8006a5c:	2205      	movs	r2, #5
 8006a5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a62:	4858      	ldr	r0, [pc, #352]	; (8006bc4 <_vfiprintf_r+0x24c>)
 8006a64:	f7f9 fbc4 	bl	80001f0 <memchr>
 8006a68:	9a04      	ldr	r2, [sp, #16]
 8006a6a:	b9d8      	cbnz	r0, 8006aa4 <_vfiprintf_r+0x12c>
 8006a6c:	06d1      	lsls	r1, r2, #27
 8006a6e:	bf44      	itt	mi
 8006a70:	2320      	movmi	r3, #32
 8006a72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a76:	0713      	lsls	r3, r2, #28
 8006a78:	bf44      	itt	mi
 8006a7a:	232b      	movmi	r3, #43	; 0x2b
 8006a7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a80:	f89a 3000 	ldrb.w	r3, [sl]
 8006a84:	2b2a      	cmp	r3, #42	; 0x2a
 8006a86:	d015      	beq.n	8006ab4 <_vfiprintf_r+0x13c>
 8006a88:	9a07      	ldr	r2, [sp, #28]
 8006a8a:	4654      	mov	r4, sl
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	f04f 0c0a 	mov.w	ip, #10
 8006a92:	4621      	mov	r1, r4
 8006a94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a98:	3b30      	subs	r3, #48	; 0x30
 8006a9a:	2b09      	cmp	r3, #9
 8006a9c:	d94e      	bls.n	8006b3c <_vfiprintf_r+0x1c4>
 8006a9e:	b1b0      	cbz	r0, 8006ace <_vfiprintf_r+0x156>
 8006aa0:	9207      	str	r2, [sp, #28]
 8006aa2:	e014      	b.n	8006ace <_vfiprintf_r+0x156>
 8006aa4:	eba0 0308 	sub.w	r3, r0, r8
 8006aa8:	fa09 f303 	lsl.w	r3, r9, r3
 8006aac:	4313      	orrs	r3, r2
 8006aae:	9304      	str	r3, [sp, #16]
 8006ab0:	46a2      	mov	sl, r4
 8006ab2:	e7d2      	b.n	8006a5a <_vfiprintf_r+0xe2>
 8006ab4:	9b03      	ldr	r3, [sp, #12]
 8006ab6:	1d19      	adds	r1, r3, #4
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	9103      	str	r1, [sp, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	bfbb      	ittet	lt
 8006ac0:	425b      	neglt	r3, r3
 8006ac2:	f042 0202 	orrlt.w	r2, r2, #2
 8006ac6:	9307      	strge	r3, [sp, #28]
 8006ac8:	9307      	strlt	r3, [sp, #28]
 8006aca:	bfb8      	it	lt
 8006acc:	9204      	strlt	r2, [sp, #16]
 8006ace:	7823      	ldrb	r3, [r4, #0]
 8006ad0:	2b2e      	cmp	r3, #46	; 0x2e
 8006ad2:	d10c      	bne.n	8006aee <_vfiprintf_r+0x176>
 8006ad4:	7863      	ldrb	r3, [r4, #1]
 8006ad6:	2b2a      	cmp	r3, #42	; 0x2a
 8006ad8:	d135      	bne.n	8006b46 <_vfiprintf_r+0x1ce>
 8006ada:	9b03      	ldr	r3, [sp, #12]
 8006adc:	1d1a      	adds	r2, r3, #4
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	9203      	str	r2, [sp, #12]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	bfb8      	it	lt
 8006ae6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006aea:	3402      	adds	r4, #2
 8006aec:	9305      	str	r3, [sp, #20]
 8006aee:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006bc8 <_vfiprintf_r+0x250>
 8006af2:	7821      	ldrb	r1, [r4, #0]
 8006af4:	2203      	movs	r2, #3
 8006af6:	4650      	mov	r0, sl
 8006af8:	f7f9 fb7a 	bl	80001f0 <memchr>
 8006afc:	b140      	cbz	r0, 8006b10 <_vfiprintf_r+0x198>
 8006afe:	2340      	movs	r3, #64	; 0x40
 8006b00:	eba0 000a 	sub.w	r0, r0, sl
 8006b04:	fa03 f000 	lsl.w	r0, r3, r0
 8006b08:	9b04      	ldr	r3, [sp, #16]
 8006b0a:	4303      	orrs	r3, r0
 8006b0c:	3401      	adds	r4, #1
 8006b0e:	9304      	str	r3, [sp, #16]
 8006b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b14:	482d      	ldr	r0, [pc, #180]	; (8006bcc <_vfiprintf_r+0x254>)
 8006b16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b1a:	2206      	movs	r2, #6
 8006b1c:	f7f9 fb68 	bl	80001f0 <memchr>
 8006b20:	2800      	cmp	r0, #0
 8006b22:	d03f      	beq.n	8006ba4 <_vfiprintf_r+0x22c>
 8006b24:	4b2a      	ldr	r3, [pc, #168]	; (8006bd0 <_vfiprintf_r+0x258>)
 8006b26:	bb1b      	cbnz	r3, 8006b70 <_vfiprintf_r+0x1f8>
 8006b28:	9b03      	ldr	r3, [sp, #12]
 8006b2a:	3307      	adds	r3, #7
 8006b2c:	f023 0307 	bic.w	r3, r3, #7
 8006b30:	3308      	adds	r3, #8
 8006b32:	9303      	str	r3, [sp, #12]
 8006b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b36:	443b      	add	r3, r7
 8006b38:	9309      	str	r3, [sp, #36]	; 0x24
 8006b3a:	e767      	b.n	8006a0c <_vfiprintf_r+0x94>
 8006b3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b40:	460c      	mov	r4, r1
 8006b42:	2001      	movs	r0, #1
 8006b44:	e7a5      	b.n	8006a92 <_vfiprintf_r+0x11a>
 8006b46:	2300      	movs	r3, #0
 8006b48:	3401      	adds	r4, #1
 8006b4a:	9305      	str	r3, [sp, #20]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	f04f 0c0a 	mov.w	ip, #10
 8006b52:	4620      	mov	r0, r4
 8006b54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b58:	3a30      	subs	r2, #48	; 0x30
 8006b5a:	2a09      	cmp	r2, #9
 8006b5c:	d903      	bls.n	8006b66 <_vfiprintf_r+0x1ee>
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d0c5      	beq.n	8006aee <_vfiprintf_r+0x176>
 8006b62:	9105      	str	r1, [sp, #20]
 8006b64:	e7c3      	b.n	8006aee <_vfiprintf_r+0x176>
 8006b66:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e7f0      	b.n	8006b52 <_vfiprintf_r+0x1da>
 8006b70:	ab03      	add	r3, sp, #12
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	462a      	mov	r2, r5
 8006b76:	4b17      	ldr	r3, [pc, #92]	; (8006bd4 <_vfiprintf_r+0x25c>)
 8006b78:	a904      	add	r1, sp, #16
 8006b7a:	4630      	mov	r0, r6
 8006b7c:	f7fc f88a 	bl	8002c94 <_printf_float>
 8006b80:	4607      	mov	r7, r0
 8006b82:	1c78      	adds	r0, r7, #1
 8006b84:	d1d6      	bne.n	8006b34 <_vfiprintf_r+0x1bc>
 8006b86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b88:	07d9      	lsls	r1, r3, #31
 8006b8a:	d405      	bmi.n	8006b98 <_vfiprintf_r+0x220>
 8006b8c:	89ab      	ldrh	r3, [r5, #12]
 8006b8e:	059a      	lsls	r2, r3, #22
 8006b90:	d402      	bmi.n	8006b98 <_vfiprintf_r+0x220>
 8006b92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b94:	f000 fa9d 	bl	80070d2 <__retarget_lock_release_recursive>
 8006b98:	89ab      	ldrh	r3, [r5, #12]
 8006b9a:	065b      	lsls	r3, r3, #25
 8006b9c:	f53f af12 	bmi.w	80069c4 <_vfiprintf_r+0x4c>
 8006ba0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ba2:	e711      	b.n	80069c8 <_vfiprintf_r+0x50>
 8006ba4:	ab03      	add	r3, sp, #12
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	462a      	mov	r2, r5
 8006baa:	4b0a      	ldr	r3, [pc, #40]	; (8006bd4 <_vfiprintf_r+0x25c>)
 8006bac:	a904      	add	r1, sp, #16
 8006bae:	4630      	mov	r0, r6
 8006bb0:	f7fc fb08 	bl	80031c4 <_printf_i>
 8006bb4:	e7e4      	b.n	8006b80 <_vfiprintf_r+0x208>
 8006bb6:	bf00      	nop
 8006bb8:	080078e4 	.word	0x080078e4
 8006bbc:	08007904 	.word	0x08007904
 8006bc0:	080078c4 	.word	0x080078c4
 8006bc4:	08007874 	.word	0x08007874
 8006bc8:	0800787a 	.word	0x0800787a
 8006bcc:	0800787e 	.word	0x0800787e
 8006bd0:	08002c95 	.word	0x08002c95
 8006bd4:	08006955 	.word	0x08006955

08006bd8 <__swbuf_r>:
 8006bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bda:	460e      	mov	r6, r1
 8006bdc:	4614      	mov	r4, r2
 8006bde:	4605      	mov	r5, r0
 8006be0:	b118      	cbz	r0, 8006bea <__swbuf_r+0x12>
 8006be2:	6983      	ldr	r3, [r0, #24]
 8006be4:	b90b      	cbnz	r3, 8006bea <__swbuf_r+0x12>
 8006be6:	f000 f9d5 	bl	8006f94 <__sinit>
 8006bea:	4b21      	ldr	r3, [pc, #132]	; (8006c70 <__swbuf_r+0x98>)
 8006bec:	429c      	cmp	r4, r3
 8006bee:	d12b      	bne.n	8006c48 <__swbuf_r+0x70>
 8006bf0:	686c      	ldr	r4, [r5, #4]
 8006bf2:	69a3      	ldr	r3, [r4, #24]
 8006bf4:	60a3      	str	r3, [r4, #8]
 8006bf6:	89a3      	ldrh	r3, [r4, #12]
 8006bf8:	071a      	lsls	r2, r3, #28
 8006bfa:	d52f      	bpl.n	8006c5c <__swbuf_r+0x84>
 8006bfc:	6923      	ldr	r3, [r4, #16]
 8006bfe:	b36b      	cbz	r3, 8006c5c <__swbuf_r+0x84>
 8006c00:	6923      	ldr	r3, [r4, #16]
 8006c02:	6820      	ldr	r0, [r4, #0]
 8006c04:	1ac0      	subs	r0, r0, r3
 8006c06:	6963      	ldr	r3, [r4, #20]
 8006c08:	b2f6      	uxtb	r6, r6
 8006c0a:	4283      	cmp	r3, r0
 8006c0c:	4637      	mov	r7, r6
 8006c0e:	dc04      	bgt.n	8006c1a <__swbuf_r+0x42>
 8006c10:	4621      	mov	r1, r4
 8006c12:	4628      	mov	r0, r5
 8006c14:	f000 f92a 	bl	8006e6c <_fflush_r>
 8006c18:	bb30      	cbnz	r0, 8006c68 <__swbuf_r+0x90>
 8006c1a:	68a3      	ldr	r3, [r4, #8]
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	60a3      	str	r3, [r4, #8]
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	6022      	str	r2, [r4, #0]
 8006c26:	701e      	strb	r6, [r3, #0]
 8006c28:	6963      	ldr	r3, [r4, #20]
 8006c2a:	3001      	adds	r0, #1
 8006c2c:	4283      	cmp	r3, r0
 8006c2e:	d004      	beq.n	8006c3a <__swbuf_r+0x62>
 8006c30:	89a3      	ldrh	r3, [r4, #12]
 8006c32:	07db      	lsls	r3, r3, #31
 8006c34:	d506      	bpl.n	8006c44 <__swbuf_r+0x6c>
 8006c36:	2e0a      	cmp	r6, #10
 8006c38:	d104      	bne.n	8006c44 <__swbuf_r+0x6c>
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	f000 f915 	bl	8006e6c <_fflush_r>
 8006c42:	b988      	cbnz	r0, 8006c68 <__swbuf_r+0x90>
 8006c44:	4638      	mov	r0, r7
 8006c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c48:	4b0a      	ldr	r3, [pc, #40]	; (8006c74 <__swbuf_r+0x9c>)
 8006c4a:	429c      	cmp	r4, r3
 8006c4c:	d101      	bne.n	8006c52 <__swbuf_r+0x7a>
 8006c4e:	68ac      	ldr	r4, [r5, #8]
 8006c50:	e7cf      	b.n	8006bf2 <__swbuf_r+0x1a>
 8006c52:	4b09      	ldr	r3, [pc, #36]	; (8006c78 <__swbuf_r+0xa0>)
 8006c54:	429c      	cmp	r4, r3
 8006c56:	bf08      	it	eq
 8006c58:	68ec      	ldreq	r4, [r5, #12]
 8006c5a:	e7ca      	b.n	8006bf2 <__swbuf_r+0x1a>
 8006c5c:	4621      	mov	r1, r4
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f000 f80c 	bl	8006c7c <__swsetup_r>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d0cb      	beq.n	8006c00 <__swbuf_r+0x28>
 8006c68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006c6c:	e7ea      	b.n	8006c44 <__swbuf_r+0x6c>
 8006c6e:	bf00      	nop
 8006c70:	080078e4 	.word	0x080078e4
 8006c74:	08007904 	.word	0x08007904
 8006c78:	080078c4 	.word	0x080078c4

08006c7c <__swsetup_r>:
 8006c7c:	4b32      	ldr	r3, [pc, #200]	; (8006d48 <__swsetup_r+0xcc>)
 8006c7e:	b570      	push	{r4, r5, r6, lr}
 8006c80:	681d      	ldr	r5, [r3, #0]
 8006c82:	4606      	mov	r6, r0
 8006c84:	460c      	mov	r4, r1
 8006c86:	b125      	cbz	r5, 8006c92 <__swsetup_r+0x16>
 8006c88:	69ab      	ldr	r3, [r5, #24]
 8006c8a:	b913      	cbnz	r3, 8006c92 <__swsetup_r+0x16>
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	f000 f981 	bl	8006f94 <__sinit>
 8006c92:	4b2e      	ldr	r3, [pc, #184]	; (8006d4c <__swsetup_r+0xd0>)
 8006c94:	429c      	cmp	r4, r3
 8006c96:	d10f      	bne.n	8006cb8 <__swsetup_r+0x3c>
 8006c98:	686c      	ldr	r4, [r5, #4]
 8006c9a:	89a3      	ldrh	r3, [r4, #12]
 8006c9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ca0:	0719      	lsls	r1, r3, #28
 8006ca2:	d42c      	bmi.n	8006cfe <__swsetup_r+0x82>
 8006ca4:	06dd      	lsls	r5, r3, #27
 8006ca6:	d411      	bmi.n	8006ccc <__swsetup_r+0x50>
 8006ca8:	2309      	movs	r3, #9
 8006caa:	6033      	str	r3, [r6, #0]
 8006cac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006cb0:	81a3      	strh	r3, [r4, #12]
 8006cb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cb6:	e03e      	b.n	8006d36 <__swsetup_r+0xba>
 8006cb8:	4b25      	ldr	r3, [pc, #148]	; (8006d50 <__swsetup_r+0xd4>)
 8006cba:	429c      	cmp	r4, r3
 8006cbc:	d101      	bne.n	8006cc2 <__swsetup_r+0x46>
 8006cbe:	68ac      	ldr	r4, [r5, #8]
 8006cc0:	e7eb      	b.n	8006c9a <__swsetup_r+0x1e>
 8006cc2:	4b24      	ldr	r3, [pc, #144]	; (8006d54 <__swsetup_r+0xd8>)
 8006cc4:	429c      	cmp	r4, r3
 8006cc6:	bf08      	it	eq
 8006cc8:	68ec      	ldreq	r4, [r5, #12]
 8006cca:	e7e6      	b.n	8006c9a <__swsetup_r+0x1e>
 8006ccc:	0758      	lsls	r0, r3, #29
 8006cce:	d512      	bpl.n	8006cf6 <__swsetup_r+0x7a>
 8006cd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cd2:	b141      	cbz	r1, 8006ce6 <__swsetup_r+0x6a>
 8006cd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cd8:	4299      	cmp	r1, r3
 8006cda:	d002      	beq.n	8006ce2 <__swsetup_r+0x66>
 8006cdc:	4630      	mov	r0, r6
 8006cde:	f7ff fb2d 	bl	800633c <_free_r>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	6363      	str	r3, [r4, #52]	; 0x34
 8006ce6:	89a3      	ldrh	r3, [r4, #12]
 8006ce8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006cec:	81a3      	strh	r3, [r4, #12]
 8006cee:	2300      	movs	r3, #0
 8006cf0:	6063      	str	r3, [r4, #4]
 8006cf2:	6923      	ldr	r3, [r4, #16]
 8006cf4:	6023      	str	r3, [r4, #0]
 8006cf6:	89a3      	ldrh	r3, [r4, #12]
 8006cf8:	f043 0308 	orr.w	r3, r3, #8
 8006cfc:	81a3      	strh	r3, [r4, #12]
 8006cfe:	6923      	ldr	r3, [r4, #16]
 8006d00:	b94b      	cbnz	r3, 8006d16 <__swsetup_r+0x9a>
 8006d02:	89a3      	ldrh	r3, [r4, #12]
 8006d04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d0c:	d003      	beq.n	8006d16 <__swsetup_r+0x9a>
 8006d0e:	4621      	mov	r1, r4
 8006d10:	4630      	mov	r0, r6
 8006d12:	f000 fa05 	bl	8007120 <__smakebuf_r>
 8006d16:	89a0      	ldrh	r0, [r4, #12]
 8006d18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d1c:	f010 0301 	ands.w	r3, r0, #1
 8006d20:	d00a      	beq.n	8006d38 <__swsetup_r+0xbc>
 8006d22:	2300      	movs	r3, #0
 8006d24:	60a3      	str	r3, [r4, #8]
 8006d26:	6963      	ldr	r3, [r4, #20]
 8006d28:	425b      	negs	r3, r3
 8006d2a:	61a3      	str	r3, [r4, #24]
 8006d2c:	6923      	ldr	r3, [r4, #16]
 8006d2e:	b943      	cbnz	r3, 8006d42 <__swsetup_r+0xc6>
 8006d30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d34:	d1ba      	bne.n	8006cac <__swsetup_r+0x30>
 8006d36:	bd70      	pop	{r4, r5, r6, pc}
 8006d38:	0781      	lsls	r1, r0, #30
 8006d3a:	bf58      	it	pl
 8006d3c:	6963      	ldrpl	r3, [r4, #20]
 8006d3e:	60a3      	str	r3, [r4, #8]
 8006d40:	e7f4      	b.n	8006d2c <__swsetup_r+0xb0>
 8006d42:	2000      	movs	r0, #0
 8006d44:	e7f7      	b.n	8006d36 <__swsetup_r+0xba>
 8006d46:	bf00      	nop
 8006d48:	20000044 	.word	0x20000044
 8006d4c:	080078e4 	.word	0x080078e4
 8006d50:	08007904 	.word	0x08007904
 8006d54:	080078c4 	.word	0x080078c4

08006d58 <abort>:
 8006d58:	b508      	push	{r3, lr}
 8006d5a:	2006      	movs	r0, #6
 8006d5c:	f000 fa50 	bl	8007200 <raise>
 8006d60:	2001      	movs	r0, #1
 8006d62:	f000 fb63 	bl	800742c <_exit>
	...

08006d68 <__sflush_r>:
 8006d68:	898a      	ldrh	r2, [r1, #12]
 8006d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6c:	4605      	mov	r5, r0
 8006d6e:	0710      	lsls	r0, r2, #28
 8006d70:	460c      	mov	r4, r1
 8006d72:	d457      	bmi.n	8006e24 <__sflush_r+0xbc>
 8006d74:	684b      	ldr	r3, [r1, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	dc04      	bgt.n	8006d84 <__sflush_r+0x1c>
 8006d7a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	dc01      	bgt.n	8006d84 <__sflush_r+0x1c>
 8006d80:	2000      	movs	r0, #0
 8006d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d86:	2e00      	cmp	r6, #0
 8006d88:	d0fa      	beq.n	8006d80 <__sflush_r+0x18>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d90:	682f      	ldr	r7, [r5, #0]
 8006d92:	602b      	str	r3, [r5, #0]
 8006d94:	d032      	beq.n	8006dfc <__sflush_r+0x94>
 8006d96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d98:	89a3      	ldrh	r3, [r4, #12]
 8006d9a:	075a      	lsls	r2, r3, #29
 8006d9c:	d505      	bpl.n	8006daa <__sflush_r+0x42>
 8006d9e:	6863      	ldr	r3, [r4, #4]
 8006da0:	1ac0      	subs	r0, r0, r3
 8006da2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006da4:	b10b      	cbz	r3, 8006daa <__sflush_r+0x42>
 8006da6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006da8:	1ac0      	subs	r0, r0, r3
 8006daa:	2300      	movs	r3, #0
 8006dac:	4602      	mov	r2, r0
 8006dae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006db0:	6a21      	ldr	r1, [r4, #32]
 8006db2:	4628      	mov	r0, r5
 8006db4:	47b0      	blx	r6
 8006db6:	1c43      	adds	r3, r0, #1
 8006db8:	89a3      	ldrh	r3, [r4, #12]
 8006dba:	d106      	bne.n	8006dca <__sflush_r+0x62>
 8006dbc:	6829      	ldr	r1, [r5, #0]
 8006dbe:	291d      	cmp	r1, #29
 8006dc0:	d82c      	bhi.n	8006e1c <__sflush_r+0xb4>
 8006dc2:	4a29      	ldr	r2, [pc, #164]	; (8006e68 <__sflush_r+0x100>)
 8006dc4:	40ca      	lsrs	r2, r1
 8006dc6:	07d6      	lsls	r6, r2, #31
 8006dc8:	d528      	bpl.n	8006e1c <__sflush_r+0xb4>
 8006dca:	2200      	movs	r2, #0
 8006dcc:	6062      	str	r2, [r4, #4]
 8006dce:	04d9      	lsls	r1, r3, #19
 8006dd0:	6922      	ldr	r2, [r4, #16]
 8006dd2:	6022      	str	r2, [r4, #0]
 8006dd4:	d504      	bpl.n	8006de0 <__sflush_r+0x78>
 8006dd6:	1c42      	adds	r2, r0, #1
 8006dd8:	d101      	bne.n	8006dde <__sflush_r+0x76>
 8006dda:	682b      	ldr	r3, [r5, #0]
 8006ddc:	b903      	cbnz	r3, 8006de0 <__sflush_r+0x78>
 8006dde:	6560      	str	r0, [r4, #84]	; 0x54
 8006de0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006de2:	602f      	str	r7, [r5, #0]
 8006de4:	2900      	cmp	r1, #0
 8006de6:	d0cb      	beq.n	8006d80 <__sflush_r+0x18>
 8006de8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dec:	4299      	cmp	r1, r3
 8006dee:	d002      	beq.n	8006df6 <__sflush_r+0x8e>
 8006df0:	4628      	mov	r0, r5
 8006df2:	f7ff faa3 	bl	800633c <_free_r>
 8006df6:	2000      	movs	r0, #0
 8006df8:	6360      	str	r0, [r4, #52]	; 0x34
 8006dfa:	e7c2      	b.n	8006d82 <__sflush_r+0x1a>
 8006dfc:	6a21      	ldr	r1, [r4, #32]
 8006dfe:	2301      	movs	r3, #1
 8006e00:	4628      	mov	r0, r5
 8006e02:	47b0      	blx	r6
 8006e04:	1c41      	adds	r1, r0, #1
 8006e06:	d1c7      	bne.n	8006d98 <__sflush_r+0x30>
 8006e08:	682b      	ldr	r3, [r5, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d0c4      	beq.n	8006d98 <__sflush_r+0x30>
 8006e0e:	2b1d      	cmp	r3, #29
 8006e10:	d001      	beq.n	8006e16 <__sflush_r+0xae>
 8006e12:	2b16      	cmp	r3, #22
 8006e14:	d101      	bne.n	8006e1a <__sflush_r+0xb2>
 8006e16:	602f      	str	r7, [r5, #0]
 8006e18:	e7b2      	b.n	8006d80 <__sflush_r+0x18>
 8006e1a:	89a3      	ldrh	r3, [r4, #12]
 8006e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e20:	81a3      	strh	r3, [r4, #12]
 8006e22:	e7ae      	b.n	8006d82 <__sflush_r+0x1a>
 8006e24:	690f      	ldr	r7, [r1, #16]
 8006e26:	2f00      	cmp	r7, #0
 8006e28:	d0aa      	beq.n	8006d80 <__sflush_r+0x18>
 8006e2a:	0793      	lsls	r3, r2, #30
 8006e2c:	680e      	ldr	r6, [r1, #0]
 8006e2e:	bf08      	it	eq
 8006e30:	694b      	ldreq	r3, [r1, #20]
 8006e32:	600f      	str	r7, [r1, #0]
 8006e34:	bf18      	it	ne
 8006e36:	2300      	movne	r3, #0
 8006e38:	1bf6      	subs	r6, r6, r7
 8006e3a:	608b      	str	r3, [r1, #8]
 8006e3c:	2e00      	cmp	r6, #0
 8006e3e:	dd9f      	ble.n	8006d80 <__sflush_r+0x18>
 8006e40:	6a21      	ldr	r1, [r4, #32]
 8006e42:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006e46:	4633      	mov	r3, r6
 8006e48:	463a      	mov	r2, r7
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	47e0      	blx	ip
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	dc06      	bgt.n	8006e60 <__sflush_r+0xf8>
 8006e52:	89a3      	ldrh	r3, [r4, #12]
 8006e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e58:	81a3      	strh	r3, [r4, #12]
 8006e5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e5e:	e790      	b.n	8006d82 <__sflush_r+0x1a>
 8006e60:	4407      	add	r7, r0
 8006e62:	1a36      	subs	r6, r6, r0
 8006e64:	e7ea      	b.n	8006e3c <__sflush_r+0xd4>
 8006e66:	bf00      	nop
 8006e68:	20400001 	.word	0x20400001

08006e6c <_fflush_r>:
 8006e6c:	b538      	push	{r3, r4, r5, lr}
 8006e6e:	690b      	ldr	r3, [r1, #16]
 8006e70:	4605      	mov	r5, r0
 8006e72:	460c      	mov	r4, r1
 8006e74:	b913      	cbnz	r3, 8006e7c <_fflush_r+0x10>
 8006e76:	2500      	movs	r5, #0
 8006e78:	4628      	mov	r0, r5
 8006e7a:	bd38      	pop	{r3, r4, r5, pc}
 8006e7c:	b118      	cbz	r0, 8006e86 <_fflush_r+0x1a>
 8006e7e:	6983      	ldr	r3, [r0, #24]
 8006e80:	b90b      	cbnz	r3, 8006e86 <_fflush_r+0x1a>
 8006e82:	f000 f887 	bl	8006f94 <__sinit>
 8006e86:	4b14      	ldr	r3, [pc, #80]	; (8006ed8 <_fflush_r+0x6c>)
 8006e88:	429c      	cmp	r4, r3
 8006e8a:	d11b      	bne.n	8006ec4 <_fflush_r+0x58>
 8006e8c:	686c      	ldr	r4, [r5, #4]
 8006e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d0ef      	beq.n	8006e76 <_fflush_r+0xa>
 8006e96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e98:	07d0      	lsls	r0, r2, #31
 8006e9a:	d404      	bmi.n	8006ea6 <_fflush_r+0x3a>
 8006e9c:	0599      	lsls	r1, r3, #22
 8006e9e:	d402      	bmi.n	8006ea6 <_fflush_r+0x3a>
 8006ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ea2:	f000 f915 	bl	80070d0 <__retarget_lock_acquire_recursive>
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	4621      	mov	r1, r4
 8006eaa:	f7ff ff5d 	bl	8006d68 <__sflush_r>
 8006eae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006eb0:	07da      	lsls	r2, r3, #31
 8006eb2:	4605      	mov	r5, r0
 8006eb4:	d4e0      	bmi.n	8006e78 <_fflush_r+0xc>
 8006eb6:	89a3      	ldrh	r3, [r4, #12]
 8006eb8:	059b      	lsls	r3, r3, #22
 8006eba:	d4dd      	bmi.n	8006e78 <_fflush_r+0xc>
 8006ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ebe:	f000 f908 	bl	80070d2 <__retarget_lock_release_recursive>
 8006ec2:	e7d9      	b.n	8006e78 <_fflush_r+0xc>
 8006ec4:	4b05      	ldr	r3, [pc, #20]	; (8006edc <_fflush_r+0x70>)
 8006ec6:	429c      	cmp	r4, r3
 8006ec8:	d101      	bne.n	8006ece <_fflush_r+0x62>
 8006eca:	68ac      	ldr	r4, [r5, #8]
 8006ecc:	e7df      	b.n	8006e8e <_fflush_r+0x22>
 8006ece:	4b04      	ldr	r3, [pc, #16]	; (8006ee0 <_fflush_r+0x74>)
 8006ed0:	429c      	cmp	r4, r3
 8006ed2:	bf08      	it	eq
 8006ed4:	68ec      	ldreq	r4, [r5, #12]
 8006ed6:	e7da      	b.n	8006e8e <_fflush_r+0x22>
 8006ed8:	080078e4 	.word	0x080078e4
 8006edc:	08007904 	.word	0x08007904
 8006ee0:	080078c4 	.word	0x080078c4

08006ee4 <std>:
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	b510      	push	{r4, lr}
 8006ee8:	4604      	mov	r4, r0
 8006eea:	e9c0 3300 	strd	r3, r3, [r0]
 8006eee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ef2:	6083      	str	r3, [r0, #8]
 8006ef4:	8181      	strh	r1, [r0, #12]
 8006ef6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ef8:	81c2      	strh	r2, [r0, #14]
 8006efa:	6183      	str	r3, [r0, #24]
 8006efc:	4619      	mov	r1, r3
 8006efe:	2208      	movs	r2, #8
 8006f00:	305c      	adds	r0, #92	; 0x5c
 8006f02:	f7fb fe21 	bl	8002b48 <memset>
 8006f06:	4b05      	ldr	r3, [pc, #20]	; (8006f1c <std+0x38>)
 8006f08:	6263      	str	r3, [r4, #36]	; 0x24
 8006f0a:	4b05      	ldr	r3, [pc, #20]	; (8006f20 <std+0x3c>)
 8006f0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f0e:	4b05      	ldr	r3, [pc, #20]	; (8006f24 <std+0x40>)
 8006f10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f12:	4b05      	ldr	r3, [pc, #20]	; (8006f28 <std+0x44>)
 8006f14:	6224      	str	r4, [r4, #32]
 8006f16:	6323      	str	r3, [r4, #48]	; 0x30
 8006f18:	bd10      	pop	{r4, pc}
 8006f1a:	bf00      	nop
 8006f1c:	08007239 	.word	0x08007239
 8006f20:	0800725b 	.word	0x0800725b
 8006f24:	08007293 	.word	0x08007293
 8006f28:	080072b7 	.word	0x080072b7

08006f2c <_cleanup_r>:
 8006f2c:	4901      	ldr	r1, [pc, #4]	; (8006f34 <_cleanup_r+0x8>)
 8006f2e:	f000 b8af 	b.w	8007090 <_fwalk_reent>
 8006f32:	bf00      	nop
 8006f34:	08006e6d 	.word	0x08006e6d

08006f38 <__sfmoreglue>:
 8006f38:	b570      	push	{r4, r5, r6, lr}
 8006f3a:	2268      	movs	r2, #104	; 0x68
 8006f3c:	1e4d      	subs	r5, r1, #1
 8006f3e:	4355      	muls	r5, r2
 8006f40:	460e      	mov	r6, r1
 8006f42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f46:	f7ff fa63 	bl	8006410 <_malloc_r>
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	b140      	cbz	r0, 8006f60 <__sfmoreglue+0x28>
 8006f4e:	2100      	movs	r1, #0
 8006f50:	e9c0 1600 	strd	r1, r6, [r0]
 8006f54:	300c      	adds	r0, #12
 8006f56:	60a0      	str	r0, [r4, #8]
 8006f58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f5c:	f7fb fdf4 	bl	8002b48 <memset>
 8006f60:	4620      	mov	r0, r4
 8006f62:	bd70      	pop	{r4, r5, r6, pc}

08006f64 <__sfp_lock_acquire>:
 8006f64:	4801      	ldr	r0, [pc, #4]	; (8006f6c <__sfp_lock_acquire+0x8>)
 8006f66:	f000 b8b3 	b.w	80070d0 <__retarget_lock_acquire_recursive>
 8006f6a:	bf00      	nop
 8006f6c:	20000485 	.word	0x20000485

08006f70 <__sfp_lock_release>:
 8006f70:	4801      	ldr	r0, [pc, #4]	; (8006f78 <__sfp_lock_release+0x8>)
 8006f72:	f000 b8ae 	b.w	80070d2 <__retarget_lock_release_recursive>
 8006f76:	bf00      	nop
 8006f78:	20000485 	.word	0x20000485

08006f7c <__sinit_lock_acquire>:
 8006f7c:	4801      	ldr	r0, [pc, #4]	; (8006f84 <__sinit_lock_acquire+0x8>)
 8006f7e:	f000 b8a7 	b.w	80070d0 <__retarget_lock_acquire_recursive>
 8006f82:	bf00      	nop
 8006f84:	20000486 	.word	0x20000486

08006f88 <__sinit_lock_release>:
 8006f88:	4801      	ldr	r0, [pc, #4]	; (8006f90 <__sinit_lock_release+0x8>)
 8006f8a:	f000 b8a2 	b.w	80070d2 <__retarget_lock_release_recursive>
 8006f8e:	bf00      	nop
 8006f90:	20000486 	.word	0x20000486

08006f94 <__sinit>:
 8006f94:	b510      	push	{r4, lr}
 8006f96:	4604      	mov	r4, r0
 8006f98:	f7ff fff0 	bl	8006f7c <__sinit_lock_acquire>
 8006f9c:	69a3      	ldr	r3, [r4, #24]
 8006f9e:	b11b      	cbz	r3, 8006fa8 <__sinit+0x14>
 8006fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fa4:	f7ff bff0 	b.w	8006f88 <__sinit_lock_release>
 8006fa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006fac:	6523      	str	r3, [r4, #80]	; 0x50
 8006fae:	4b13      	ldr	r3, [pc, #76]	; (8006ffc <__sinit+0x68>)
 8006fb0:	4a13      	ldr	r2, [pc, #76]	; (8007000 <__sinit+0x6c>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006fb6:	42a3      	cmp	r3, r4
 8006fb8:	bf04      	itt	eq
 8006fba:	2301      	moveq	r3, #1
 8006fbc:	61a3      	streq	r3, [r4, #24]
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f000 f820 	bl	8007004 <__sfp>
 8006fc4:	6060      	str	r0, [r4, #4]
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f000 f81c 	bl	8007004 <__sfp>
 8006fcc:	60a0      	str	r0, [r4, #8]
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f000 f818 	bl	8007004 <__sfp>
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	60e0      	str	r0, [r4, #12]
 8006fd8:	2104      	movs	r1, #4
 8006fda:	6860      	ldr	r0, [r4, #4]
 8006fdc:	f7ff ff82 	bl	8006ee4 <std>
 8006fe0:	68a0      	ldr	r0, [r4, #8]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	2109      	movs	r1, #9
 8006fe6:	f7ff ff7d 	bl	8006ee4 <std>
 8006fea:	68e0      	ldr	r0, [r4, #12]
 8006fec:	2202      	movs	r2, #2
 8006fee:	2112      	movs	r1, #18
 8006ff0:	f7ff ff78 	bl	8006ee4 <std>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	61a3      	str	r3, [r4, #24]
 8006ff8:	e7d2      	b.n	8006fa0 <__sinit+0xc>
 8006ffa:	bf00      	nop
 8006ffc:	0800747c 	.word	0x0800747c
 8007000:	08006f2d 	.word	0x08006f2d

08007004 <__sfp>:
 8007004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007006:	4607      	mov	r7, r0
 8007008:	f7ff ffac 	bl	8006f64 <__sfp_lock_acquire>
 800700c:	4b1e      	ldr	r3, [pc, #120]	; (8007088 <__sfp+0x84>)
 800700e:	681e      	ldr	r6, [r3, #0]
 8007010:	69b3      	ldr	r3, [r6, #24]
 8007012:	b913      	cbnz	r3, 800701a <__sfp+0x16>
 8007014:	4630      	mov	r0, r6
 8007016:	f7ff ffbd 	bl	8006f94 <__sinit>
 800701a:	3648      	adds	r6, #72	; 0x48
 800701c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007020:	3b01      	subs	r3, #1
 8007022:	d503      	bpl.n	800702c <__sfp+0x28>
 8007024:	6833      	ldr	r3, [r6, #0]
 8007026:	b30b      	cbz	r3, 800706c <__sfp+0x68>
 8007028:	6836      	ldr	r6, [r6, #0]
 800702a:	e7f7      	b.n	800701c <__sfp+0x18>
 800702c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007030:	b9d5      	cbnz	r5, 8007068 <__sfp+0x64>
 8007032:	4b16      	ldr	r3, [pc, #88]	; (800708c <__sfp+0x88>)
 8007034:	60e3      	str	r3, [r4, #12]
 8007036:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800703a:	6665      	str	r5, [r4, #100]	; 0x64
 800703c:	f000 f847 	bl	80070ce <__retarget_lock_init_recursive>
 8007040:	f7ff ff96 	bl	8006f70 <__sfp_lock_release>
 8007044:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007048:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800704c:	6025      	str	r5, [r4, #0]
 800704e:	61a5      	str	r5, [r4, #24]
 8007050:	2208      	movs	r2, #8
 8007052:	4629      	mov	r1, r5
 8007054:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007058:	f7fb fd76 	bl	8002b48 <memset>
 800705c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007060:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007064:	4620      	mov	r0, r4
 8007066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007068:	3468      	adds	r4, #104	; 0x68
 800706a:	e7d9      	b.n	8007020 <__sfp+0x1c>
 800706c:	2104      	movs	r1, #4
 800706e:	4638      	mov	r0, r7
 8007070:	f7ff ff62 	bl	8006f38 <__sfmoreglue>
 8007074:	4604      	mov	r4, r0
 8007076:	6030      	str	r0, [r6, #0]
 8007078:	2800      	cmp	r0, #0
 800707a:	d1d5      	bne.n	8007028 <__sfp+0x24>
 800707c:	f7ff ff78 	bl	8006f70 <__sfp_lock_release>
 8007080:	230c      	movs	r3, #12
 8007082:	603b      	str	r3, [r7, #0]
 8007084:	e7ee      	b.n	8007064 <__sfp+0x60>
 8007086:	bf00      	nop
 8007088:	0800747c 	.word	0x0800747c
 800708c:	ffff0001 	.word	0xffff0001

08007090 <_fwalk_reent>:
 8007090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007094:	4606      	mov	r6, r0
 8007096:	4688      	mov	r8, r1
 8007098:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800709c:	2700      	movs	r7, #0
 800709e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070a2:	f1b9 0901 	subs.w	r9, r9, #1
 80070a6:	d505      	bpl.n	80070b4 <_fwalk_reent+0x24>
 80070a8:	6824      	ldr	r4, [r4, #0]
 80070aa:	2c00      	cmp	r4, #0
 80070ac:	d1f7      	bne.n	800709e <_fwalk_reent+0xe>
 80070ae:	4638      	mov	r0, r7
 80070b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070b4:	89ab      	ldrh	r3, [r5, #12]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d907      	bls.n	80070ca <_fwalk_reent+0x3a>
 80070ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070be:	3301      	adds	r3, #1
 80070c0:	d003      	beq.n	80070ca <_fwalk_reent+0x3a>
 80070c2:	4629      	mov	r1, r5
 80070c4:	4630      	mov	r0, r6
 80070c6:	47c0      	blx	r8
 80070c8:	4307      	orrs	r7, r0
 80070ca:	3568      	adds	r5, #104	; 0x68
 80070cc:	e7e9      	b.n	80070a2 <_fwalk_reent+0x12>

080070ce <__retarget_lock_init_recursive>:
 80070ce:	4770      	bx	lr

080070d0 <__retarget_lock_acquire_recursive>:
 80070d0:	4770      	bx	lr

080070d2 <__retarget_lock_release_recursive>:
 80070d2:	4770      	bx	lr

080070d4 <__swhatbuf_r>:
 80070d4:	b570      	push	{r4, r5, r6, lr}
 80070d6:	460e      	mov	r6, r1
 80070d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070dc:	2900      	cmp	r1, #0
 80070de:	b096      	sub	sp, #88	; 0x58
 80070e0:	4614      	mov	r4, r2
 80070e2:	461d      	mov	r5, r3
 80070e4:	da08      	bge.n	80070f8 <__swhatbuf_r+0x24>
 80070e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	602a      	str	r2, [r5, #0]
 80070ee:	061a      	lsls	r2, r3, #24
 80070f0:	d410      	bmi.n	8007114 <__swhatbuf_r+0x40>
 80070f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070f6:	e00e      	b.n	8007116 <__swhatbuf_r+0x42>
 80070f8:	466a      	mov	r2, sp
 80070fa:	f000 f903 	bl	8007304 <_fstat_r>
 80070fe:	2800      	cmp	r0, #0
 8007100:	dbf1      	blt.n	80070e6 <__swhatbuf_r+0x12>
 8007102:	9a01      	ldr	r2, [sp, #4]
 8007104:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007108:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800710c:	425a      	negs	r2, r3
 800710e:	415a      	adcs	r2, r3
 8007110:	602a      	str	r2, [r5, #0]
 8007112:	e7ee      	b.n	80070f2 <__swhatbuf_r+0x1e>
 8007114:	2340      	movs	r3, #64	; 0x40
 8007116:	2000      	movs	r0, #0
 8007118:	6023      	str	r3, [r4, #0]
 800711a:	b016      	add	sp, #88	; 0x58
 800711c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007120 <__smakebuf_r>:
 8007120:	898b      	ldrh	r3, [r1, #12]
 8007122:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007124:	079d      	lsls	r5, r3, #30
 8007126:	4606      	mov	r6, r0
 8007128:	460c      	mov	r4, r1
 800712a:	d507      	bpl.n	800713c <__smakebuf_r+0x1c>
 800712c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007130:	6023      	str	r3, [r4, #0]
 8007132:	6123      	str	r3, [r4, #16]
 8007134:	2301      	movs	r3, #1
 8007136:	6163      	str	r3, [r4, #20]
 8007138:	b002      	add	sp, #8
 800713a:	bd70      	pop	{r4, r5, r6, pc}
 800713c:	ab01      	add	r3, sp, #4
 800713e:	466a      	mov	r2, sp
 8007140:	f7ff ffc8 	bl	80070d4 <__swhatbuf_r>
 8007144:	9900      	ldr	r1, [sp, #0]
 8007146:	4605      	mov	r5, r0
 8007148:	4630      	mov	r0, r6
 800714a:	f7ff f961 	bl	8006410 <_malloc_r>
 800714e:	b948      	cbnz	r0, 8007164 <__smakebuf_r+0x44>
 8007150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007154:	059a      	lsls	r2, r3, #22
 8007156:	d4ef      	bmi.n	8007138 <__smakebuf_r+0x18>
 8007158:	f023 0303 	bic.w	r3, r3, #3
 800715c:	f043 0302 	orr.w	r3, r3, #2
 8007160:	81a3      	strh	r3, [r4, #12]
 8007162:	e7e3      	b.n	800712c <__smakebuf_r+0xc>
 8007164:	4b0d      	ldr	r3, [pc, #52]	; (800719c <__smakebuf_r+0x7c>)
 8007166:	62b3      	str	r3, [r6, #40]	; 0x28
 8007168:	89a3      	ldrh	r3, [r4, #12]
 800716a:	6020      	str	r0, [r4, #0]
 800716c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007170:	81a3      	strh	r3, [r4, #12]
 8007172:	9b00      	ldr	r3, [sp, #0]
 8007174:	6163      	str	r3, [r4, #20]
 8007176:	9b01      	ldr	r3, [sp, #4]
 8007178:	6120      	str	r0, [r4, #16]
 800717a:	b15b      	cbz	r3, 8007194 <__smakebuf_r+0x74>
 800717c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007180:	4630      	mov	r0, r6
 8007182:	f000 f8d1 	bl	8007328 <_isatty_r>
 8007186:	b128      	cbz	r0, 8007194 <__smakebuf_r+0x74>
 8007188:	89a3      	ldrh	r3, [r4, #12]
 800718a:	f023 0303 	bic.w	r3, r3, #3
 800718e:	f043 0301 	orr.w	r3, r3, #1
 8007192:	81a3      	strh	r3, [r4, #12]
 8007194:	89a0      	ldrh	r0, [r4, #12]
 8007196:	4305      	orrs	r5, r0
 8007198:	81a5      	strh	r5, [r4, #12]
 800719a:	e7cd      	b.n	8007138 <__smakebuf_r+0x18>
 800719c:	08006f2d 	.word	0x08006f2d

080071a0 <_malloc_usable_size_r>:
 80071a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071a4:	1f18      	subs	r0, r3, #4
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	bfbc      	itt	lt
 80071aa:	580b      	ldrlt	r3, [r1, r0]
 80071ac:	18c0      	addlt	r0, r0, r3
 80071ae:	4770      	bx	lr

080071b0 <_raise_r>:
 80071b0:	291f      	cmp	r1, #31
 80071b2:	b538      	push	{r3, r4, r5, lr}
 80071b4:	4604      	mov	r4, r0
 80071b6:	460d      	mov	r5, r1
 80071b8:	d904      	bls.n	80071c4 <_raise_r+0x14>
 80071ba:	2316      	movs	r3, #22
 80071bc:	6003      	str	r3, [r0, #0]
 80071be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071c2:	bd38      	pop	{r3, r4, r5, pc}
 80071c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80071c6:	b112      	cbz	r2, 80071ce <_raise_r+0x1e>
 80071c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071cc:	b94b      	cbnz	r3, 80071e2 <_raise_r+0x32>
 80071ce:	4620      	mov	r0, r4
 80071d0:	f000 f830 	bl	8007234 <_getpid_r>
 80071d4:	462a      	mov	r2, r5
 80071d6:	4601      	mov	r1, r0
 80071d8:	4620      	mov	r0, r4
 80071da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071de:	f000 b817 	b.w	8007210 <_kill_r>
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d00a      	beq.n	80071fc <_raise_r+0x4c>
 80071e6:	1c59      	adds	r1, r3, #1
 80071e8:	d103      	bne.n	80071f2 <_raise_r+0x42>
 80071ea:	2316      	movs	r3, #22
 80071ec:	6003      	str	r3, [r0, #0]
 80071ee:	2001      	movs	r0, #1
 80071f0:	e7e7      	b.n	80071c2 <_raise_r+0x12>
 80071f2:	2400      	movs	r4, #0
 80071f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80071f8:	4628      	mov	r0, r5
 80071fa:	4798      	blx	r3
 80071fc:	2000      	movs	r0, #0
 80071fe:	e7e0      	b.n	80071c2 <_raise_r+0x12>

08007200 <raise>:
 8007200:	4b02      	ldr	r3, [pc, #8]	; (800720c <raise+0xc>)
 8007202:	4601      	mov	r1, r0
 8007204:	6818      	ldr	r0, [r3, #0]
 8007206:	f7ff bfd3 	b.w	80071b0 <_raise_r>
 800720a:	bf00      	nop
 800720c:	20000044 	.word	0x20000044

08007210 <_kill_r>:
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	4d07      	ldr	r5, [pc, #28]	; (8007230 <_kill_r+0x20>)
 8007214:	2300      	movs	r3, #0
 8007216:	4604      	mov	r4, r0
 8007218:	4608      	mov	r0, r1
 800721a:	4611      	mov	r1, r2
 800721c:	602b      	str	r3, [r5, #0]
 800721e:	f000 f8d7 	bl	80073d0 <_kill>
 8007222:	1c43      	adds	r3, r0, #1
 8007224:	d102      	bne.n	800722c <_kill_r+0x1c>
 8007226:	682b      	ldr	r3, [r5, #0]
 8007228:	b103      	cbz	r3, 800722c <_kill_r+0x1c>
 800722a:	6023      	str	r3, [r4, #0]
 800722c:	bd38      	pop	{r3, r4, r5, pc}
 800722e:	bf00      	nop
 8007230:	20000480 	.word	0x20000480

08007234 <_getpid_r>:
 8007234:	f000 b8bc 	b.w	80073b0 <_getpid>

08007238 <__sread>:
 8007238:	b510      	push	{r4, lr}
 800723a:	460c      	mov	r4, r1
 800723c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007240:	f000 f894 	bl	800736c <_read_r>
 8007244:	2800      	cmp	r0, #0
 8007246:	bfab      	itete	ge
 8007248:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800724a:	89a3      	ldrhlt	r3, [r4, #12]
 800724c:	181b      	addge	r3, r3, r0
 800724e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007252:	bfac      	ite	ge
 8007254:	6563      	strge	r3, [r4, #84]	; 0x54
 8007256:	81a3      	strhlt	r3, [r4, #12]
 8007258:	bd10      	pop	{r4, pc}

0800725a <__swrite>:
 800725a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800725e:	461f      	mov	r7, r3
 8007260:	898b      	ldrh	r3, [r1, #12]
 8007262:	05db      	lsls	r3, r3, #23
 8007264:	4605      	mov	r5, r0
 8007266:	460c      	mov	r4, r1
 8007268:	4616      	mov	r6, r2
 800726a:	d505      	bpl.n	8007278 <__swrite+0x1e>
 800726c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007270:	2302      	movs	r3, #2
 8007272:	2200      	movs	r2, #0
 8007274:	f000 f868 	bl	8007348 <_lseek_r>
 8007278:	89a3      	ldrh	r3, [r4, #12]
 800727a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800727e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007282:	81a3      	strh	r3, [r4, #12]
 8007284:	4632      	mov	r2, r6
 8007286:	463b      	mov	r3, r7
 8007288:	4628      	mov	r0, r5
 800728a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800728e:	f000 b817 	b.w	80072c0 <_write_r>

08007292 <__sseek>:
 8007292:	b510      	push	{r4, lr}
 8007294:	460c      	mov	r4, r1
 8007296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800729a:	f000 f855 	bl	8007348 <_lseek_r>
 800729e:	1c43      	adds	r3, r0, #1
 80072a0:	89a3      	ldrh	r3, [r4, #12]
 80072a2:	bf15      	itete	ne
 80072a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80072a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072ae:	81a3      	strheq	r3, [r4, #12]
 80072b0:	bf18      	it	ne
 80072b2:	81a3      	strhne	r3, [r4, #12]
 80072b4:	bd10      	pop	{r4, pc}

080072b6 <__sclose>:
 80072b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072ba:	f000 b813 	b.w	80072e4 <_close_r>
	...

080072c0 <_write_r>:
 80072c0:	b538      	push	{r3, r4, r5, lr}
 80072c2:	4d07      	ldr	r5, [pc, #28]	; (80072e0 <_write_r+0x20>)
 80072c4:	4604      	mov	r4, r0
 80072c6:	4608      	mov	r0, r1
 80072c8:	4611      	mov	r1, r2
 80072ca:	2200      	movs	r2, #0
 80072cc:	602a      	str	r2, [r5, #0]
 80072ce:	461a      	mov	r2, r3
 80072d0:	f000 f8a4 	bl	800741c <_write>
 80072d4:	1c43      	adds	r3, r0, #1
 80072d6:	d102      	bne.n	80072de <_write_r+0x1e>
 80072d8:	682b      	ldr	r3, [r5, #0]
 80072da:	b103      	cbz	r3, 80072de <_write_r+0x1e>
 80072dc:	6023      	str	r3, [r4, #0]
 80072de:	bd38      	pop	{r3, r4, r5, pc}
 80072e0:	20000480 	.word	0x20000480

080072e4 <_close_r>:
 80072e4:	b538      	push	{r3, r4, r5, lr}
 80072e6:	4d06      	ldr	r5, [pc, #24]	; (8007300 <_close_r+0x1c>)
 80072e8:	2300      	movs	r3, #0
 80072ea:	4604      	mov	r4, r0
 80072ec:	4608      	mov	r0, r1
 80072ee:	602b      	str	r3, [r5, #0]
 80072f0:	f000 f84e 	bl	8007390 <_close>
 80072f4:	1c43      	adds	r3, r0, #1
 80072f6:	d102      	bne.n	80072fe <_close_r+0x1a>
 80072f8:	682b      	ldr	r3, [r5, #0]
 80072fa:	b103      	cbz	r3, 80072fe <_close_r+0x1a>
 80072fc:	6023      	str	r3, [r4, #0]
 80072fe:	bd38      	pop	{r3, r4, r5, pc}
 8007300:	20000480 	.word	0x20000480

08007304 <_fstat_r>:
 8007304:	b538      	push	{r3, r4, r5, lr}
 8007306:	4d07      	ldr	r5, [pc, #28]	; (8007324 <_fstat_r+0x20>)
 8007308:	2300      	movs	r3, #0
 800730a:	4604      	mov	r4, r0
 800730c:	4608      	mov	r0, r1
 800730e:	4611      	mov	r1, r2
 8007310:	602b      	str	r3, [r5, #0]
 8007312:	f000 f845 	bl	80073a0 <_fstat>
 8007316:	1c43      	adds	r3, r0, #1
 8007318:	d102      	bne.n	8007320 <_fstat_r+0x1c>
 800731a:	682b      	ldr	r3, [r5, #0]
 800731c:	b103      	cbz	r3, 8007320 <_fstat_r+0x1c>
 800731e:	6023      	str	r3, [r4, #0]
 8007320:	bd38      	pop	{r3, r4, r5, pc}
 8007322:	bf00      	nop
 8007324:	20000480 	.word	0x20000480

08007328 <_isatty_r>:
 8007328:	b538      	push	{r3, r4, r5, lr}
 800732a:	4d06      	ldr	r5, [pc, #24]	; (8007344 <_isatty_r+0x1c>)
 800732c:	2300      	movs	r3, #0
 800732e:	4604      	mov	r4, r0
 8007330:	4608      	mov	r0, r1
 8007332:	602b      	str	r3, [r5, #0]
 8007334:	f000 f844 	bl	80073c0 <_isatty>
 8007338:	1c43      	adds	r3, r0, #1
 800733a:	d102      	bne.n	8007342 <_isatty_r+0x1a>
 800733c:	682b      	ldr	r3, [r5, #0]
 800733e:	b103      	cbz	r3, 8007342 <_isatty_r+0x1a>
 8007340:	6023      	str	r3, [r4, #0]
 8007342:	bd38      	pop	{r3, r4, r5, pc}
 8007344:	20000480 	.word	0x20000480

08007348 <_lseek_r>:
 8007348:	b538      	push	{r3, r4, r5, lr}
 800734a:	4d07      	ldr	r5, [pc, #28]	; (8007368 <_lseek_r+0x20>)
 800734c:	4604      	mov	r4, r0
 800734e:	4608      	mov	r0, r1
 8007350:	4611      	mov	r1, r2
 8007352:	2200      	movs	r2, #0
 8007354:	602a      	str	r2, [r5, #0]
 8007356:	461a      	mov	r2, r3
 8007358:	f000 f842 	bl	80073e0 <_lseek>
 800735c:	1c43      	adds	r3, r0, #1
 800735e:	d102      	bne.n	8007366 <_lseek_r+0x1e>
 8007360:	682b      	ldr	r3, [r5, #0]
 8007362:	b103      	cbz	r3, 8007366 <_lseek_r+0x1e>
 8007364:	6023      	str	r3, [r4, #0]
 8007366:	bd38      	pop	{r3, r4, r5, pc}
 8007368:	20000480 	.word	0x20000480

0800736c <_read_r>:
 800736c:	b538      	push	{r3, r4, r5, lr}
 800736e:	4d07      	ldr	r5, [pc, #28]	; (800738c <_read_r+0x20>)
 8007370:	4604      	mov	r4, r0
 8007372:	4608      	mov	r0, r1
 8007374:	4611      	mov	r1, r2
 8007376:	2200      	movs	r2, #0
 8007378:	602a      	str	r2, [r5, #0]
 800737a:	461a      	mov	r2, r3
 800737c:	f000 f838 	bl	80073f0 <_read>
 8007380:	1c43      	adds	r3, r0, #1
 8007382:	d102      	bne.n	800738a <_read_r+0x1e>
 8007384:	682b      	ldr	r3, [r5, #0]
 8007386:	b103      	cbz	r3, 800738a <_read_r+0x1e>
 8007388:	6023      	str	r3, [r4, #0]
 800738a:	bd38      	pop	{r3, r4, r5, pc}
 800738c:	20000480 	.word	0x20000480

08007390 <_close>:
 8007390:	4b02      	ldr	r3, [pc, #8]	; (800739c <_close+0xc>)
 8007392:	2258      	movs	r2, #88	; 0x58
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800739a:	4770      	bx	lr
 800739c:	20000480 	.word	0x20000480

080073a0 <_fstat>:
 80073a0:	4b02      	ldr	r3, [pc, #8]	; (80073ac <_fstat+0xc>)
 80073a2:	2258      	movs	r2, #88	; 0x58
 80073a4:	601a      	str	r2, [r3, #0]
 80073a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073aa:	4770      	bx	lr
 80073ac:	20000480 	.word	0x20000480

080073b0 <_getpid>:
 80073b0:	4b02      	ldr	r3, [pc, #8]	; (80073bc <_getpid+0xc>)
 80073b2:	2258      	movs	r2, #88	; 0x58
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073ba:	4770      	bx	lr
 80073bc:	20000480 	.word	0x20000480

080073c0 <_isatty>:
 80073c0:	4b02      	ldr	r3, [pc, #8]	; (80073cc <_isatty+0xc>)
 80073c2:	2258      	movs	r2, #88	; 0x58
 80073c4:	601a      	str	r2, [r3, #0]
 80073c6:	2000      	movs	r0, #0
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	20000480 	.word	0x20000480

080073d0 <_kill>:
 80073d0:	4b02      	ldr	r3, [pc, #8]	; (80073dc <_kill+0xc>)
 80073d2:	2258      	movs	r2, #88	; 0x58
 80073d4:	601a      	str	r2, [r3, #0]
 80073d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073da:	4770      	bx	lr
 80073dc:	20000480 	.word	0x20000480

080073e0 <_lseek>:
 80073e0:	4b02      	ldr	r3, [pc, #8]	; (80073ec <_lseek+0xc>)
 80073e2:	2258      	movs	r2, #88	; 0x58
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073ea:	4770      	bx	lr
 80073ec:	20000480 	.word	0x20000480

080073f0 <_read>:
 80073f0:	4b02      	ldr	r3, [pc, #8]	; (80073fc <_read+0xc>)
 80073f2:	2258      	movs	r2, #88	; 0x58
 80073f4:	601a      	str	r2, [r3, #0]
 80073f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073fa:	4770      	bx	lr
 80073fc:	20000480 	.word	0x20000480

08007400 <_sbrk>:
 8007400:	4a04      	ldr	r2, [pc, #16]	; (8007414 <_sbrk+0x14>)
 8007402:	6811      	ldr	r1, [r2, #0]
 8007404:	4603      	mov	r3, r0
 8007406:	b909      	cbnz	r1, 800740c <_sbrk+0xc>
 8007408:	4903      	ldr	r1, [pc, #12]	; (8007418 <_sbrk+0x18>)
 800740a:	6011      	str	r1, [r2, #0]
 800740c:	6810      	ldr	r0, [r2, #0]
 800740e:	4403      	add	r3, r0
 8007410:	6013      	str	r3, [r2, #0]
 8007412:	4770      	bx	lr
 8007414:	20000488 	.word	0x20000488
 8007418:	20000490 	.word	0x20000490

0800741c <_write>:
 800741c:	4b02      	ldr	r3, [pc, #8]	; (8007428 <_write+0xc>)
 800741e:	2258      	movs	r2, #88	; 0x58
 8007420:	601a      	str	r2, [r3, #0]
 8007422:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007426:	4770      	bx	lr
 8007428:	20000480 	.word	0x20000480

0800742c <_exit>:
 800742c:	e7fe      	b.n	800742c <_exit>
	...

08007430 <_init>:
 8007430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007432:	bf00      	nop
 8007434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007436:	bc08      	pop	{r3}
 8007438:	469e      	mov	lr, r3
 800743a:	4770      	bx	lr

0800743c <_fini>:
 800743c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743e:	bf00      	nop
 8007440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007442:	bc08      	pop	{r3}
 8007444:	469e      	mov	lr, r3
 8007446:	4770      	bx	lr
