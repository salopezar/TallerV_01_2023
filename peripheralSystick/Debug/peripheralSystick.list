
peripheralSystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08007890  08007890  00017890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d34  08007d34  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08007d34  08007d34  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d34  08007d34  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d34  08007d34  00017d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d38  08007d38  00017d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007d3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  200001d8  08007f10  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08007f10  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002bed  00000000  00000000  000201fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b5a  00000000  00000000  00022deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000318  00000000  00000000  00023948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002a0  00000000  00000000  00023c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fa86  00000000  00000000  00023f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003a39  00000000  00000000  00033986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005605e  00000000  00000000  000373bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008d41d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fa8  00000000  00000000  0008d470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007874 	.word	0x08007874

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08007874 	.word	0x08007874

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	4605      	mov	r5, r0
 8000c9c:	460c      	mov	r4, r1
 8000c9e:	4628      	mov	r0, r5
 8000ca0:	4621      	mov	r1, r4
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f7ff ff21 	bl	8000aec <__aeabi_dcmplt>
 8000caa:	b928      	cbnz	r0, 8000cb8 <__aeabi_d2lz+0x20>
 8000cac:	4628      	mov	r0, r5
 8000cae:	4621      	mov	r1, r4
 8000cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb4:	f000 b80a 	b.w	8000ccc <__aeabi_d2ulz>
 8000cb8:	4628      	mov	r0, r5
 8000cba:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000cbe:	f000 f805 	bl	8000ccc <__aeabi_d2ulz>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	bd38      	pop	{r3, r4, r5, pc}
 8000cca:	bf00      	nop

08000ccc <__aeabi_d2ulz>:
 8000ccc:	b5d0      	push	{r4, r6, r7, lr}
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__aeabi_d2ulz+0x34>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4606      	mov	r6, r0
 8000cd4:	460f      	mov	r7, r1
 8000cd6:	f7ff fc97 	bl	8000608 <__aeabi_dmul>
 8000cda:	f7ff ff6d 	bl	8000bb8 <__aeabi_d2uiz>
 8000cde:	4604      	mov	r4, r0
 8000ce0:	f7ff fc18 	bl	8000514 <__aeabi_ui2d>
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <__aeabi_d2ulz+0x38>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f7ff fc8e 	bl	8000608 <__aeabi_dmul>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4630      	mov	r0, r6
 8000cf2:	4639      	mov	r1, r7
 8000cf4:	f7ff fad0 	bl	8000298 <__aeabi_dsub>
 8000cf8:	f7ff ff5e 	bl	8000bb8 <__aeabi_d2uiz>
 8000cfc:	4621      	mov	r1, r4
 8000cfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000d00:	3df00000 	.word	0x3df00000
 8000d04:	41f00000 	.word	0x41f00000

08000d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db0b      	blt.n	8000d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 021f 	and.w	r2, r3, #31
 8000d20:	4906      	ldr	r1, [pc, #24]	; (8000d3c <__NVIC_EnableIRQ+0x34>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	095b      	lsrs	r3, r3, #5
 8000d28:	2001      	movs	r0, #1
 8000d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	e000e100 	.word	0xe000e100

08000d40 <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrBTimerHandler->ptrTIMx;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a4e      	ldr	r2, [pc, #312]	; (8000e88 <BasicTimer_Config+0x148>)
 8000d4e:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();
	/* 1. Activar la señal de reloj del periférico requerido */
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d5c:	d106      	bne.n	8000d6c <BasicTimer_Config+0x2c>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000d5e:	4b4b      	ldr	r3, [pc, #300]	; (8000e8c <BasicTimer_Config+0x14c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	4a4a      	ldr	r2, [pc, #296]	; (8000e8c <BasicTimer_Config+0x14c>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6a:	e024      	b.n	8000db6 <BasicTimer_Config+0x76>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a47      	ldr	r2, [pc, #284]	; (8000e90 <BasicTimer_Config+0x150>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d106      	bne.n	8000d84 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000d76:	4b45      	ldr	r3, [pc, #276]	; (8000e8c <BasicTimer_Config+0x14c>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	4a44      	ldr	r2, [pc, #272]	; (8000e8c <BasicTimer_Config+0x14c>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	6413      	str	r3, [r2, #64]	; 0x40
 8000d82:	e018      	b.n	8000db6 <BasicTimer_Config+0x76>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a42      	ldr	r2, [pc, #264]	; (8000e94 <BasicTimer_Config+0x154>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d106      	bne.n	8000d9c <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000d8e:	4b3f      	ldr	r3, [pc, #252]	; (8000e8c <BasicTimer_Config+0x14c>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a3e      	ldr	r2, [pc, #248]	; (8000e8c <BasicTimer_Config+0x14c>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	e00c      	b.n	8000db6 <BasicTimer_Config+0x76>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a3d      	ldr	r2, [pc, #244]	; (8000e98 <BasicTimer_Config+0x158>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d106      	bne.n	8000db4 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 8000da6:	4b39      	ldr	r3, [pc, #228]	; (8000e8c <BasicTimer_Config+0x14c>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a38      	ldr	r2, [pc, #224]	; (8000e8c <BasicTimer_Config+0x14c>)
 8000dac:	f043 0308 	orr.w	r3, r3, #8
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	e000      	b.n	8000db6 <BasicTimer_Config+0x76>
	}

	else{
		__NOP();
 8000db4:	bf00      	nop
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */
	// -1 porque el contador empieza en 0
	ptrBTimerHandler->ptrTIMx-> PSC = ptrBTimerHandler ->TIMx_Config.TIMx_speed - 1;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689a      	ldr	r2, [r3, #8]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	3a01      	subs	r2, #1
 8000dc0:	629a      	str	r2, [r3, #40]	; 0x28

	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	791b      	ldrb	r3, [r3, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d112      	bne.n	8000df0 <BasicTimer_Config+0xb0>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Necesitamos poner la direccion en 0 para que cuente hacia arria TIM_CR1_DIR = 1, entonces
		// lo negamos y hacemos una AND con el valor actual.
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f022 0210 	bic.w	r2, r2, #16
 8000dd8:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68da      	ldr	r2, [r3, #12]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	3a01      	subs	r2, #1
 8000de4:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2200      	movs	r2, #0
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24
 8000dee:	e00d      	b.n	8000e0c <BasicTimer_Config+0xcc>

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		// Cuando CR1 = 1 es descendente
		ptrBTimerHandler->ptrTIMx->CR1 = TIM_CR1_DIR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2210      	movs	r2, #16
 8000df6:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		ptrBTimerHandler-> ptrTIMx->ARR = 0;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	68da      	ldr	r2, [r3, #12]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	3a01      	subs	r2, #1
 8000e0a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f042 0201 	orr.w	r2, r2, #1
 8000e1a:	601a      	str	r2, [r3, #0]
	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	// El registro encargado de la interrupcion es el UIE

	// Modificar con el ciclo If
	ptrBTimerHandler->ptrTIMx->DIER |= ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable; //TIM_DIER_UIE
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	68da      	ldr	r2, [r3, #12]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	7c1b      	ldrb	r3, [r3, #16]
 8000e26:	4619      	mov	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e38:	d103      	bne.n	8000e42 <BasicTimer_Config+0x102>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8000e3a:	201c      	movs	r0, #28
 8000e3c:	f7ff ff64 	bl	8000d08 <__NVIC_EnableIRQ>
 8000e40:	e01b      	b.n	8000e7a <BasicTimer_Config+0x13a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <BasicTimer_Config+0x150>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d103      	bne.n	8000e54 <BasicTimer_Config+0x114>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8000e4c:	201d      	movs	r0, #29
 8000e4e:	f7ff ff5b 	bl	8000d08 <__NVIC_EnableIRQ>
 8000e52:	e012      	b.n	8000e7a <BasicTimer_Config+0x13a>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <BasicTimer_Config+0x154>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d103      	bne.n	8000e66 <BasicTimer_Config+0x126>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8000e5e:	201e      	movs	r0, #30
 8000e60:	f7ff ff52 	bl	8000d08 <__NVIC_EnableIRQ>
 8000e64:	e009      	b.n	8000e7a <BasicTimer_Config+0x13a>
	}

	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <BasicTimer_Config+0x158>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d103      	bne.n	8000e78 <BasicTimer_Config+0x138>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8000e70:	2032      	movs	r0, #50	; 0x32
 8000e72:	f7ff ff49 	bl	8000d08 <__NVIC_EnableIRQ>
 8000e76:	e000      	b.n	8000e7a <BasicTimer_Config+0x13a>
	}

	else{
		__NOP();
 8000e78:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8000e7a:	b662      	cpsie	i
}
 8000e7c:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200001f4 	.word	0x200001f4
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40000400 	.word	0x40000400
 8000e94:	40000800 	.word	0x40000800
 8000e98:	40000c00 	.word	0x40000c00

08000e9c <BasicTimer3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void BasicTimer3_Callback(void){
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8000ea0:	bf00      	nop
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr

08000eaa <BasicTimer4_Callback>:
__attribute__((weak)) void BasicTimer4_Callback(void){
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8000eae:	bf00      	nop
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM2->SR &= ~TIM_SR_UIF;
 8000ebc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ec0:	691b      	ldr	r3, [r3, #16]
 8000ec2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ec6:	f023 0301 	bic.w	r3, r3, #1
 8000eca:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer2_Callback();
 8000ecc:	f001 ff6e 	bl	8002dac <BasicTimer2_Callback>
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM3->SR &= ~TIM_SR_UIF;
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <TIM3_IRQHandler+0x18>)
 8000eda:	691b      	ldr	r3, [r3, #16]
 8000edc:	4a03      	ldr	r2, [pc, #12]	; (8000eec <TIM3_IRQHandler+0x18>)
 8000ede:	f023 0301 	bic.w	r3, r3, #1
 8000ee2:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer3_Callback();
 8000ee4:	f7ff ffda 	bl	8000e9c <BasicTimer3_Callback>
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40000400 	.word	0x40000400

08000ef0 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM4->SR &= ~TIM_SR_UIF;
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <TIM4_IRQHandler+0x18>)
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	4a03      	ldr	r2, [pc, #12]	; (8000f08 <TIM4_IRQHandler+0x18>)
 8000efa:	f023 0301 	bic.w	r3, r3, #1
 8000efe:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer4_Callback();
 8000f00:	f7ff ffd3 	bl	8000eaa <BasicTimer4_Callback>
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40000800 	.word	0x40000800

08000f0c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	TIM5->SR &= ~TIM_SR_UIF;
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <TIM5_IRQHandler+0x18>)
 8000f12:	691b      	ldr	r3, [r3, #16]
 8000f14:	4a03      	ldr	r2, [pc, #12]	; (8000f24 <TIM5_IRQHandler+0x18>)
 8000f16:	f023 0301 	bic.w	r3, r3, #1
 8000f1a:	6113      	str	r3, [r2, #16]
	/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
	BasicTimer5_Callback();
 8000f1c:	f001 ff50 	bl	8002dc0 <BasicTimer5_Callback>
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40000c00 	.word	0x40000c00

08000f28 <__NVIC_EnableIRQ>:
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	db0b      	blt.n	8000f52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f003 021f 	and.w	r2, r3, #31
 8000f40:	4906      	ldr	r1, [pc, #24]	; (8000f5c <__NVIC_EnableIRQ+0x34>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	095b      	lsrs	r3, r3, #5
 8000f48:	2001      	movs	r0, #1
 8000f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	e000e100 	.word	0xe000e100

08000f60 <extInt_Config>:

#include "ExtiDriver.h"
#include "GPIOxDriver.h"

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 fff7 	bl	8001f60 <GPIO_Config>
	/* 2.0 Activamos el acceso al SYSCFG */
	// Activar la señal de reloj del EXTI SYSCFG
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000f72:	4b97      	ldr	r3, [pc, #604]	; (80011d0 <extInt_Config+0x270>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	4a96      	ldr	r2, [pc, #600]	; (80011d0 <extInt_Config+0x270>)
 8000f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7c:	6453      	str	r3, [r2, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	791b      	ldrb	r3, [r3, #4]
 8000f84:	2b0f      	cmp	r3, #15
 8000f86:	f200 85ce 	bhi.w	8001b26 <extInt_Config+0xbc6>
 8000f8a:	a201      	add	r2, pc, #4	; (adr r2, 8000f90 <extInt_Config+0x30>)
 8000f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f90:	08000fd1 	.word	0x08000fd1
 8000f94:	08001087 	.word	0x08001087
 8000f98:	0800113d 	.word	0x0800113d
 8000f9c:	08001213 	.word	0x08001213
 8000fa0:	080012c9 	.word	0x080012c9
 8000fa4:	08001377 	.word	0x08001377
 8000fa8:	0800143d 	.word	0x0800143d
 8000fac:	080014e5 	.word	0x080014e5
 8000fb0:	0800158d 	.word	0x0800158d
 8000fb4:	08001635 	.word	0x08001635
 8000fb8:	080016fb 	.word	0x080016fb
 8000fbc:	080017a3 	.word	0x080017a3
 8000fc0:	0800184b 	.word	0x0800184b
 8000fc4:	08001911 	.word	0x08001911
 8000fc8:	080019b9 	.word	0x080019b9
 8000fcc:	08001a61 	.word	0x08001a61
	/* Configurando para el todos los pines GPIOX_0*/

	case 0: {
		/* SYSCFG_EXTICR1 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 8000fd0:	4b80      	ldr	r3, [pc, #512]	; (80011d4 <extInt_Config+0x274>)
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	4a7f      	ldr	r2, [pc, #508]	; (80011d4 <extInt_Config+0x274>)
 8000fd6:	f023 030f 	bic.w	r3, r3, #15
 8000fda:	6093      	str	r3, [r2, #8]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a7d      	ldr	r2, [pc, #500]	; (80011d8 <extInt_Config+0x278>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d105      	bne.n	8000ff4 <extInt_Config+0x94>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8000fe8:	4b7a      	ldr	r3, [pc, #488]	; (80011d4 <extInt_Config+0x274>)
 8000fea:	4a7a      	ldr	r2, [pc, #488]	; (80011d4 <extInt_Config+0x274>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	6093      	str	r3, [r2, #8]

		} else {
			__NOP();
		}

		break;
 8000ff0:	f000 bd9b 	b.w	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a78      	ldr	r2, [pc, #480]	; (80011dc <extInt_Config+0x27c>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d107      	bne.n	8001010 <extInt_Config+0xb0>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8001000:	4b74      	ldr	r3, [pc, #464]	; (80011d4 <extInt_Config+0x274>)
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	4a73      	ldr	r2, [pc, #460]	; (80011d4 <extInt_Config+0x274>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6093      	str	r3, [r2, #8]
		break;
 800100c:	f000 bd8d 	b.w	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a72      	ldr	r2, [pc, #456]	; (80011e0 <extInt_Config+0x280>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d107      	bne.n	800102c <extInt_Config+0xcc>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 800101c:	4b6d      	ldr	r3, [pc, #436]	; (80011d4 <extInt_Config+0x274>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	4a6c      	ldr	r2, [pc, #432]	; (80011d4 <extInt_Config+0x274>)
 8001022:	f043 0302 	orr.w	r3, r3, #2
 8001026:	6093      	str	r3, [r2, #8]
		break;
 8001028:	f000 bd7f 	b.w	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a6c      	ldr	r2, [pc, #432]	; (80011e4 <extInt_Config+0x284>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d107      	bne.n	8001048 <extInt_Config+0xe8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8001038:	4b66      	ldr	r3, [pc, #408]	; (80011d4 <extInt_Config+0x274>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	4a65      	ldr	r2, [pc, #404]	; (80011d4 <extInt_Config+0x274>)
 800103e:	f043 0303 	orr.w	r3, r3, #3
 8001042:	6093      	str	r3, [r2, #8]
		break;
 8001044:	f000 bd71 	b.w	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a66      	ldr	r2, [pc, #408]	; (80011e8 <extInt_Config+0x288>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d107      	bne.n	8001064 <extInt_Config+0x104>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8001054:	4b5f      	ldr	r3, [pc, #380]	; (80011d4 <extInt_Config+0x274>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	4a5e      	ldr	r2, [pc, #376]	; (80011d4 <extInt_Config+0x274>)
 800105a:	f043 0304 	orr.w	r3, r3, #4
 800105e:	6093      	str	r3, [r2, #8]
		break;
 8001060:	f000 bd63 	b.w	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a60      	ldr	r2, [pc, #384]	; (80011ec <extInt_Config+0x28c>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d107      	bne.n	8001080 <extInt_Config+0x120>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8001070:	4b58      	ldr	r3, [pc, #352]	; (80011d4 <extInt_Config+0x274>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	4a57      	ldr	r2, [pc, #348]	; (80011d4 <extInt_Config+0x274>)
 8001076:	f043 0307 	orr.w	r3, r3, #7
 800107a:	6093      	str	r3, [r2, #8]
		break;
 800107c:	f000 bd55 	b.w	8001b2a <extInt_Config+0xbca>
			__NOP();
 8001080:	bf00      	nop
		break;
 8001082:	f000 bd52 	b.w	8001b2a <extInt_Config+0xbca>

	/* Configurando para el todos los pines GPIOX_1*/
	case 1: {
		/* SYSCFG_EXTICR1 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 8001086:	4b53      	ldr	r3, [pc, #332]	; (80011d4 <extInt_Config+0x274>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	4a52      	ldr	r2, [pc, #328]	; (80011d4 <extInt_Config+0x274>)
 800108c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001090:	6093      	str	r3, [r2, #8]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a4f      	ldr	r2, [pc, #316]	; (80011d8 <extInt_Config+0x278>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d105      	bne.n	80010aa <extInt_Config+0x14a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 800109e:	4b4d      	ldr	r3, [pc, #308]	; (80011d4 <extInt_Config+0x274>)
 80010a0:	4a4c      	ldr	r2, [pc, #304]	; (80011d4 <extInt_Config+0x274>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	6093      	str	r3, [r2, #8]

		} else {
			__NOP();
		}

		break;
 80010a6:	f000 bd40 	b.w	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a4a      	ldr	r2, [pc, #296]	; (80011dc <extInt_Config+0x27c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d107      	bne.n	80010c6 <extInt_Config+0x166>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 80010b6:	4b47      	ldr	r3, [pc, #284]	; (80011d4 <extInt_Config+0x274>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	4a46      	ldr	r2, [pc, #280]	; (80011d4 <extInt_Config+0x274>)
 80010bc:	f043 0310 	orr.w	r3, r3, #16
 80010c0:	6093      	str	r3, [r2, #8]
		break;
 80010c2:	f000 bd32 	b.w	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a44      	ldr	r2, [pc, #272]	; (80011e0 <extInt_Config+0x280>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d107      	bne.n	80010e2 <extInt_Config+0x182>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 80010d2:	4b40      	ldr	r3, [pc, #256]	; (80011d4 <extInt_Config+0x274>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	4a3f      	ldr	r2, [pc, #252]	; (80011d4 <extInt_Config+0x274>)
 80010d8:	f043 0320 	orr.w	r3, r3, #32
 80010dc:	6093      	str	r3, [r2, #8]
		break;
 80010de:	f000 bd24 	b.w	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a3e      	ldr	r2, [pc, #248]	; (80011e4 <extInt_Config+0x284>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d107      	bne.n	80010fe <extInt_Config+0x19e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 80010ee:	4b39      	ldr	r3, [pc, #228]	; (80011d4 <extInt_Config+0x274>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	4a38      	ldr	r2, [pc, #224]	; (80011d4 <extInt_Config+0x274>)
 80010f4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80010f8:	6093      	str	r3, [r2, #8]
		break;
 80010fa:	f000 bd16 	b.w	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a38      	ldr	r2, [pc, #224]	; (80011e8 <extInt_Config+0x288>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d107      	bne.n	800111a <extInt_Config+0x1ba>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 800110a:	4b32      	ldr	r3, [pc, #200]	; (80011d4 <extInt_Config+0x274>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	4a31      	ldr	r2, [pc, #196]	; (80011d4 <extInt_Config+0x274>)
 8001110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001114:	6093      	str	r3, [r2, #8]
		break;
 8001116:	f000 bd08 	b.w	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a32      	ldr	r2, [pc, #200]	; (80011ec <extInt_Config+0x28c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d107      	bne.n	8001136 <extInt_Config+0x1d6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8001126:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <extInt_Config+0x274>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	4a2a      	ldr	r2, [pc, #168]	; (80011d4 <extInt_Config+0x274>)
 800112c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001130:	6093      	str	r3, [r2, #8]
		break;
 8001132:	f000 bcfa 	b.w	8001b2a <extInt_Config+0xbca>
			__NOP();
 8001136:	bf00      	nop
		break;
 8001138:	f000 bcf7 	b.w	8001b2a <extInt_Config+0xbca>

	/* Configurando para el todos los pines GPIOX_2*/
	case 2: {
		/* SYSCFG_EXTICR1 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 800113c:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <extInt_Config+0x274>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	4a24      	ldr	r2, [pc, #144]	; (80011d4 <extInt_Config+0x274>)
 8001142:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001146:	6093      	str	r3, [r2, #8]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a22      	ldr	r2, [pc, #136]	; (80011d8 <extInt_Config+0x278>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d105      	bne.n	8001160 <extInt_Config+0x200>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <extInt_Config+0x274>)
 8001156:	4a1f      	ldr	r2, [pc, #124]	; (80011d4 <extInt_Config+0x274>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	6093      	str	r3, [r2, #8]

		} else {
			__NOP();
		}

		break;
 800115c:	f000 bce5 	b.w	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a1d      	ldr	r2, [pc, #116]	; (80011dc <extInt_Config+0x27c>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d107      	bne.n	800117c <extInt_Config+0x21c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <extInt_Config+0x274>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <extInt_Config+0x274>)
 8001172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001176:	6093      	str	r3, [r2, #8]
		break;
 8001178:	f000 bcd7 	b.w	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a17      	ldr	r2, [pc, #92]	; (80011e0 <extInt_Config+0x280>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d107      	bne.n	8001198 <extInt_Config+0x238>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <extInt_Config+0x274>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	4a11      	ldr	r2, [pc, #68]	; (80011d4 <extInt_Config+0x274>)
 800118e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001192:	6093      	str	r3, [r2, #8]
		break;
 8001194:	f000 bcc9 	b.w	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a11      	ldr	r2, [pc, #68]	; (80011e4 <extInt_Config+0x284>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d107      	bne.n	80011b4 <extInt_Config+0x254>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <extInt_Config+0x274>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <extInt_Config+0x274>)
 80011aa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80011ae:	6093      	str	r3, [r2, #8]
		break;
 80011b0:	f000 bcbb 	b.w	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <extInt_Config+0x288>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d117      	bne.n	80011f0 <extInt_Config+0x290>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <extInt_Config+0x274>)
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	4a03      	ldr	r2, [pc, #12]	; (80011d4 <extInt_Config+0x274>)
 80011c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ca:	6093      	str	r3, [r2, #8]
		break;
 80011cc:	f000 bcad 	b.w	8001b2a <extInt_Config+0xbca>
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40013800 	.word	0x40013800
 80011d8:	40020000 	.word	0x40020000
 80011dc:	40020400 	.word	0x40020400
 80011e0:	40020800 	.word	0x40020800
 80011e4:	40020c00 	.word	0x40020c00
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40021c00 	.word	0x40021c00
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a8a      	ldr	r2, [pc, #552]	; (8001420 <extInt_Config+0x4c0>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d107      	bne.n	800120c <extInt_Config+0x2ac>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 80011fc:	4b89      	ldr	r3, [pc, #548]	; (8001424 <extInt_Config+0x4c4>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	4a88      	ldr	r2, [pc, #544]	; (8001424 <extInt_Config+0x4c4>)
 8001202:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001206:	6093      	str	r3, [r2, #8]
		break;
 8001208:	f000 bc8f 	b.w	8001b2a <extInt_Config+0xbca>
			__NOP();
 800120c:	bf00      	nop
		break;
 800120e:	f000 bc8c 	b.w	8001b2a <extInt_Config+0xbca>
	}
	/* Configurando para el todos los pines GPIOX_3*/
	case 3: {
		/* SYSCFG_EXTICR1 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 8001212:	4b84      	ldr	r3, [pc, #528]	; (8001424 <extInt_Config+0x4c4>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	4a83      	ldr	r2, [pc, #524]	; (8001424 <extInt_Config+0x4c4>)
 8001218:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800121c:	6093      	str	r3, [r2, #8]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a80      	ldr	r2, [pc, #512]	; (8001428 <extInt_Config+0x4c8>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d105      	bne.n	8001236 <extInt_Config+0x2d6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 800122a:	4b7e      	ldr	r3, [pc, #504]	; (8001424 <extInt_Config+0x4c4>)
 800122c:	4a7d      	ldr	r2, [pc, #500]	; (8001424 <extInt_Config+0x4c4>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	6093      	str	r3, [r2, #8]

		} else {
			__NOP();
		}

		break;
 8001232:	f000 bc7a 	b.w	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a7b      	ldr	r2, [pc, #492]	; (800142c <extInt_Config+0x4cc>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d107      	bne.n	8001252 <extInt_Config+0x2f2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8001242:	4b78      	ldr	r3, [pc, #480]	; (8001424 <extInt_Config+0x4c4>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	4a77      	ldr	r2, [pc, #476]	; (8001424 <extInt_Config+0x4c4>)
 8001248:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800124c:	6093      	str	r3, [r2, #8]
		break;
 800124e:	f000 bc6c 	b.w	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a75      	ldr	r2, [pc, #468]	; (8001430 <extInt_Config+0x4d0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d107      	bne.n	800126e <extInt_Config+0x30e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 800125e:	4b71      	ldr	r3, [pc, #452]	; (8001424 <extInt_Config+0x4c4>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	4a70      	ldr	r2, [pc, #448]	; (8001424 <extInt_Config+0x4c4>)
 8001264:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001268:	6093      	str	r3, [r2, #8]
		break;
 800126a:	f000 bc5e 	b.w	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a6f      	ldr	r2, [pc, #444]	; (8001434 <extInt_Config+0x4d4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d107      	bne.n	800128a <extInt_Config+0x32a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 800127a:	4b6a      	ldr	r3, [pc, #424]	; (8001424 <extInt_Config+0x4c4>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	4a69      	ldr	r2, [pc, #420]	; (8001424 <extInt_Config+0x4c4>)
 8001280:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001284:	6093      	str	r3, [r2, #8]
		break;
 8001286:	f000 bc50 	b.w	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a69      	ldr	r2, [pc, #420]	; (8001438 <extInt_Config+0x4d8>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d107      	bne.n	80012a6 <extInt_Config+0x346>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8001296:	4b63      	ldr	r3, [pc, #396]	; (8001424 <extInt_Config+0x4c4>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	4a62      	ldr	r2, [pc, #392]	; (8001424 <extInt_Config+0x4c4>)
 800129c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a0:	6093      	str	r3, [r2, #8]
		break;
 80012a2:	f000 bc42 	b.w	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a5c      	ldr	r2, [pc, #368]	; (8001420 <extInt_Config+0x4c0>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d107      	bne.n	80012c2 <extInt_Config+0x362>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 80012b2:	4b5c      	ldr	r3, [pc, #368]	; (8001424 <extInt_Config+0x4c4>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	4a5b      	ldr	r2, [pc, #364]	; (8001424 <extInt_Config+0x4c4>)
 80012b8:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80012bc:	6093      	str	r3, [r2, #8]
		break;
 80012be:	f000 bc34 	b.w	8001b2a <extInt_Config+0xbca>
			__NOP();
 80012c2:	bf00      	nop
		break;
 80012c4:	f000 bc31 	b.w	8001b2a <extInt_Config+0xbca>
	}
	/* Configurando para el todos los pines GPIOX_4*/
	case 4: {
		/* SYSCFG_EXTICR2 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 80012c8:	4b56      	ldr	r3, [pc, #344]	; (8001424 <extInt_Config+0x4c4>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	4a55      	ldr	r2, [pc, #340]	; (8001424 <extInt_Config+0x4c4>)
 80012ce:	f023 030f 	bic.w	r3, r3, #15
 80012d2:	60d3      	str	r3, [r2, #12]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a53      	ldr	r2, [pc, #332]	; (8001428 <extInt_Config+0x4c8>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d105      	bne.n	80012ec <extInt_Config+0x38c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 80012e0:	4b50      	ldr	r3, [pc, #320]	; (8001424 <extInt_Config+0x4c4>)
 80012e2:	4a50      	ldr	r2, [pc, #320]	; (8001424 <extInt_Config+0x4c4>)
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	60d3      	str	r3, [r2, #12]

		} else {
			__NOP();
		}

		break;
 80012e8:	f000 bc1f 	b.w	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a4e      	ldr	r2, [pc, #312]	; (800142c <extInt_Config+0x4cc>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d107      	bne.n	8001308 <extInt_Config+0x3a8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 80012f8:	4b4a      	ldr	r3, [pc, #296]	; (8001424 <extInt_Config+0x4c4>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	4a49      	ldr	r2, [pc, #292]	; (8001424 <extInt_Config+0x4c4>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	60d3      	str	r3, [r2, #12]
		break;
 8001304:	f000 bc11 	b.w	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a48      	ldr	r2, [pc, #288]	; (8001430 <extInt_Config+0x4d0>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d107      	bne.n	8001324 <extInt_Config+0x3c4>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8001314:	4b43      	ldr	r3, [pc, #268]	; (8001424 <extInt_Config+0x4c4>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	4a42      	ldr	r2, [pc, #264]	; (8001424 <extInt_Config+0x4c4>)
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	60d3      	str	r3, [r2, #12]
		break;
 8001320:	f000 bc03 	b.w	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a42      	ldr	r2, [pc, #264]	; (8001434 <extInt_Config+0x4d4>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d106      	bne.n	800133e <extInt_Config+0x3de>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8001330:	4b3c      	ldr	r3, [pc, #240]	; (8001424 <extInt_Config+0x4c4>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	4a3b      	ldr	r2, [pc, #236]	; (8001424 <extInt_Config+0x4c4>)
 8001336:	f043 0303 	orr.w	r3, r3, #3
 800133a:	60d3      	str	r3, [r2, #12]
		break;
 800133c:	e3f5      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a3c      	ldr	r2, [pc, #240]	; (8001438 <extInt_Config+0x4d8>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d106      	bne.n	8001358 <extInt_Config+0x3f8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 800134a:	4b36      	ldr	r3, [pc, #216]	; (8001424 <extInt_Config+0x4c4>)
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	4a35      	ldr	r2, [pc, #212]	; (8001424 <extInt_Config+0x4c4>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	60d3      	str	r3, [r2, #12]
		break;
 8001356:	e3e8      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a30      	ldr	r2, [pc, #192]	; (8001420 <extInt_Config+0x4c0>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d106      	bne.n	8001372 <extInt_Config+0x412>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8001364:	4b2f      	ldr	r3, [pc, #188]	; (8001424 <extInt_Config+0x4c4>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	4a2e      	ldr	r2, [pc, #184]	; (8001424 <extInt_Config+0x4c4>)
 800136a:	f043 0307 	orr.w	r3, r3, #7
 800136e:	60d3      	str	r3, [r2, #12]
		break;
 8001370:	e3db      	b.n	8001b2a <extInt_Config+0xbca>
			__NOP();
 8001372:	bf00      	nop
		break;
 8001374:	e3d9      	b.n	8001b2a <extInt_Config+0xbca>
	}
	/* Configurando para el todos los pines GPIOX_5*/
	case 5: {
		/* SYSCFG_EXTICR2 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 8001376:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <extInt_Config+0x4c4>)
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	4a2a      	ldr	r2, [pc, #168]	; (8001424 <extInt_Config+0x4c4>)
 800137c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001380:	60d3      	str	r3, [r2, #12]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a27      	ldr	r2, [pc, #156]	; (8001428 <extInt_Config+0x4c8>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d104      	bne.n	8001398 <extInt_Config+0x438>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 800138e:	4b25      	ldr	r3, [pc, #148]	; (8001424 <extInt_Config+0x4c4>)
 8001390:	4a24      	ldr	r2, [pc, #144]	; (8001424 <extInt_Config+0x4c4>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	60d3      	str	r3, [r2, #12]

		} else {
			__NOP();
		}

		break;
 8001396:	e3c8      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a23      	ldr	r2, [pc, #140]	; (800142c <extInt_Config+0x4cc>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d106      	bne.n	80013b2 <extInt_Config+0x452>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 80013a4:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <extInt_Config+0x4c4>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	4a1e      	ldr	r2, [pc, #120]	; (8001424 <extInt_Config+0x4c4>)
 80013aa:	f043 0310 	orr.w	r3, r3, #16
 80013ae:	60d3      	str	r3, [r2, #12]
		break;
 80013b0:	e3bb      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a1d      	ldr	r2, [pc, #116]	; (8001430 <extInt_Config+0x4d0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d106      	bne.n	80013cc <extInt_Config+0x46c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <extInt_Config+0x4c4>)
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	4a18      	ldr	r2, [pc, #96]	; (8001424 <extInt_Config+0x4c4>)
 80013c4:	f043 0320 	orr.w	r3, r3, #32
 80013c8:	60d3      	str	r3, [r2, #12]
		break;
 80013ca:	e3ae      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a18      	ldr	r2, [pc, #96]	; (8001434 <extInt_Config+0x4d4>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d106      	bne.n	80013e6 <extInt_Config+0x486>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <extInt_Config+0x4c4>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	4a11      	ldr	r2, [pc, #68]	; (8001424 <extInt_Config+0x4c4>)
 80013de:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80013e2:	60d3      	str	r3, [r2, #12]
		break;
 80013e4:	e3a1      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a12      	ldr	r2, [pc, #72]	; (8001438 <extInt_Config+0x4d8>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d106      	bne.n	8001400 <extInt_Config+0x4a0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <extInt_Config+0x4c4>)
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <extInt_Config+0x4c4>)
 80013f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013fc:	60d3      	str	r3, [r2, #12]
		break;
 80013fe:	e394      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a06      	ldr	r2, [pc, #24]	; (8001420 <extInt_Config+0x4c0>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d106      	bne.n	800141a <extInt_Config+0x4ba>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <extInt_Config+0x4c4>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	4a04      	ldr	r2, [pc, #16]	; (8001424 <extInt_Config+0x4c4>)
 8001412:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001416:	60d3      	str	r3, [r2, #12]
		break;
 8001418:	e387      	b.n	8001b2a <extInt_Config+0xbca>
			__NOP();
 800141a:	bf00      	nop
		break;
 800141c:	e385      	b.n	8001b2a <extInt_Config+0xbca>
 800141e:	bf00      	nop
 8001420:	40021c00 	.word	0x40021c00
 8001424:	40013800 	.word	0x40013800
 8001428:	40020000 	.word	0x40020000
 800142c:	40020400 	.word	0x40020400
 8001430:	40020800 	.word	0x40020800
 8001434:	40020c00 	.word	0x40020c00
 8001438:	40021000 	.word	0x40021000
	}
	/* Configurando para el todos los pines GPIOX_6*/
	case 6: {
		/* SYSCFG_EXTICR2 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 800143c:	4b86      	ldr	r3, [pc, #536]	; (8001658 <extInt_Config+0x6f8>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	4a85      	ldr	r2, [pc, #532]	; (8001658 <extInt_Config+0x6f8>)
 8001442:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001446:	60d3      	str	r3, [r2, #12]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a83      	ldr	r2, [pc, #524]	; (800165c <extInt_Config+0x6fc>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d104      	bne.n	800145e <extInt_Config+0x4fe>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8001454:	4b80      	ldr	r3, [pc, #512]	; (8001658 <extInt_Config+0x6f8>)
 8001456:	4a80      	ldr	r2, [pc, #512]	; (8001658 <extInt_Config+0x6f8>)
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	60d3      	str	r3, [r2, #12]

		} else {
			__NOP();
		}

		break;
 800145c:	e365      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a7e      	ldr	r2, [pc, #504]	; (8001660 <extInt_Config+0x700>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d106      	bne.n	8001478 <extInt_Config+0x518>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 800146a:	4b7b      	ldr	r3, [pc, #492]	; (8001658 <extInt_Config+0x6f8>)
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	4a7a      	ldr	r2, [pc, #488]	; (8001658 <extInt_Config+0x6f8>)
 8001470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001474:	60d3      	str	r3, [r2, #12]
		break;
 8001476:	e358      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a79      	ldr	r2, [pc, #484]	; (8001664 <extInt_Config+0x704>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d106      	bne.n	8001492 <extInt_Config+0x532>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8001484:	4b74      	ldr	r3, [pc, #464]	; (8001658 <extInt_Config+0x6f8>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	4a73      	ldr	r2, [pc, #460]	; (8001658 <extInt_Config+0x6f8>)
 800148a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800148e:	60d3      	str	r3, [r2, #12]
		break;
 8001490:	e34b      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a73      	ldr	r2, [pc, #460]	; (8001668 <extInt_Config+0x708>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d106      	bne.n	80014ac <extInt_Config+0x54c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 800149e:	4b6e      	ldr	r3, [pc, #440]	; (8001658 <extInt_Config+0x6f8>)
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	4a6d      	ldr	r2, [pc, #436]	; (8001658 <extInt_Config+0x6f8>)
 80014a4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80014a8:	60d3      	str	r3, [r2, #12]
		break;
 80014aa:	e33e      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a6e      	ldr	r2, [pc, #440]	; (800166c <extInt_Config+0x70c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d106      	bne.n	80014c6 <extInt_Config+0x566>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 80014b8:	4b67      	ldr	r3, [pc, #412]	; (8001658 <extInt_Config+0x6f8>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	4a66      	ldr	r2, [pc, #408]	; (8001658 <extInt_Config+0x6f8>)
 80014be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014c2:	60d3      	str	r3, [r2, #12]
		break;
 80014c4:	e331      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a68      	ldr	r2, [pc, #416]	; (8001670 <extInt_Config+0x710>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d106      	bne.n	80014e0 <extInt_Config+0x580>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 80014d2:	4b61      	ldr	r3, [pc, #388]	; (8001658 <extInt_Config+0x6f8>)
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	4a60      	ldr	r2, [pc, #384]	; (8001658 <extInt_Config+0x6f8>)
 80014d8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014dc:	60d3      	str	r3, [r2, #12]
		break;
 80014de:	e324      	b.n	8001b2a <extInt_Config+0xbca>
			__NOP();
 80014e0:	bf00      	nop
		break;
 80014e2:	e322      	b.n	8001b2a <extInt_Config+0xbca>
	}
	/* Configurando para el todos los pines GPIOX_7*/
	case 7: {
		/* SYSCFG_EXTICR2 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 80014e4:	4b5c      	ldr	r3, [pc, #368]	; (8001658 <extInt_Config+0x6f8>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4a5b      	ldr	r2, [pc, #364]	; (8001658 <extInt_Config+0x6f8>)
 80014ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80014ee:	60d3      	str	r3, [r2, #12]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a59      	ldr	r2, [pc, #356]	; (800165c <extInt_Config+0x6fc>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d104      	bne.n	8001506 <extInt_Config+0x5a6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 80014fc:	4b56      	ldr	r3, [pc, #344]	; (8001658 <extInt_Config+0x6f8>)
 80014fe:	4a56      	ldr	r2, [pc, #344]	; (8001658 <extInt_Config+0x6f8>)
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	60d3      	str	r3, [r2, #12]

		} else {
			__NOP();
		}

		break;
 8001504:	e311      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a54      	ldr	r2, [pc, #336]	; (8001660 <extInt_Config+0x700>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d106      	bne.n	8001520 <extInt_Config+0x5c0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8001512:	4b51      	ldr	r3, [pc, #324]	; (8001658 <extInt_Config+0x6f8>)
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	4a50      	ldr	r2, [pc, #320]	; (8001658 <extInt_Config+0x6f8>)
 8001518:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800151c:	60d3      	str	r3, [r2, #12]
		break;
 800151e:	e304      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a4f      	ldr	r2, [pc, #316]	; (8001664 <extInt_Config+0x704>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d106      	bne.n	800153a <extInt_Config+0x5da>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 800152c:	4b4a      	ldr	r3, [pc, #296]	; (8001658 <extInt_Config+0x6f8>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	4a49      	ldr	r2, [pc, #292]	; (8001658 <extInt_Config+0x6f8>)
 8001532:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001536:	60d3      	str	r3, [r2, #12]
		break;
 8001538:	e2f7      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a49      	ldr	r2, [pc, #292]	; (8001668 <extInt_Config+0x708>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d106      	bne.n	8001554 <extInt_Config+0x5f4>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8001546:	4b44      	ldr	r3, [pc, #272]	; (8001658 <extInt_Config+0x6f8>)
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	4a43      	ldr	r2, [pc, #268]	; (8001658 <extInt_Config+0x6f8>)
 800154c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001550:	60d3      	str	r3, [r2, #12]
		break;
 8001552:	e2ea      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a44      	ldr	r2, [pc, #272]	; (800166c <extInt_Config+0x70c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d106      	bne.n	800156e <extInt_Config+0x60e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8001560:	4b3d      	ldr	r3, [pc, #244]	; (8001658 <extInt_Config+0x6f8>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	4a3c      	ldr	r2, [pc, #240]	; (8001658 <extInt_Config+0x6f8>)
 8001566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800156a:	60d3      	str	r3, [r2, #12]
		break;
 800156c:	e2dd      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a3e      	ldr	r2, [pc, #248]	; (8001670 <extInt_Config+0x710>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d106      	bne.n	8001588 <extInt_Config+0x628>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 800157a:	4b37      	ldr	r3, [pc, #220]	; (8001658 <extInt_Config+0x6f8>)
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	4a36      	ldr	r2, [pc, #216]	; (8001658 <extInt_Config+0x6f8>)
 8001580:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001584:	60d3      	str	r3, [r2, #12]
		break;
 8001586:	e2d0      	b.n	8001b2a <extInt_Config+0xbca>
			__NOP();
 8001588:	bf00      	nop
		break;
 800158a:	e2ce      	b.n	8001b2a <extInt_Config+0xbca>
	}
	/* Configurando para el todos los pines GPIOX_8*/
	case 8: {
		/* SYSCFG_EXTICR3 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 800158c:	4b32      	ldr	r3, [pc, #200]	; (8001658 <extInt_Config+0x6f8>)
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	4a31      	ldr	r2, [pc, #196]	; (8001658 <extInt_Config+0x6f8>)
 8001592:	f023 030f 	bic.w	r3, r3, #15
 8001596:	6113      	str	r3, [r2, #16]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a2f      	ldr	r2, [pc, #188]	; (800165c <extInt_Config+0x6fc>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d104      	bne.n	80015ae <extInt_Config+0x64e>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 80015a4:	4b2c      	ldr	r3, [pc, #176]	; (8001658 <extInt_Config+0x6f8>)
 80015a6:	4a2c      	ldr	r2, [pc, #176]	; (8001658 <extInt_Config+0x6f8>)
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	6113      	str	r3, [r2, #16]

		} else {
			__NOP();
		}

		break;
 80015ac:	e2bd      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a2a      	ldr	r2, [pc, #168]	; (8001660 <extInt_Config+0x700>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d106      	bne.n	80015c8 <extInt_Config+0x668>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 80015ba:	4b27      	ldr	r3, [pc, #156]	; (8001658 <extInt_Config+0x6f8>)
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	4a26      	ldr	r2, [pc, #152]	; (8001658 <extInt_Config+0x6f8>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6113      	str	r3, [r2, #16]
		break;
 80015c6:	e2b0      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a25      	ldr	r2, [pc, #148]	; (8001664 <extInt_Config+0x704>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d106      	bne.n	80015e2 <extInt_Config+0x682>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 80015d4:	4b20      	ldr	r3, [pc, #128]	; (8001658 <extInt_Config+0x6f8>)
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	4a1f      	ldr	r2, [pc, #124]	; (8001658 <extInt_Config+0x6f8>)
 80015da:	f043 0302 	orr.w	r3, r3, #2
 80015de:	6113      	str	r3, [r2, #16]
		break;
 80015e0:	e2a3      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1f      	ldr	r2, [pc, #124]	; (8001668 <extInt_Config+0x708>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d106      	bne.n	80015fc <extInt_Config+0x69c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <extInt_Config+0x6f8>)
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	4a19      	ldr	r2, [pc, #100]	; (8001658 <extInt_Config+0x6f8>)
 80015f4:	f043 0303 	orr.w	r3, r3, #3
 80015f8:	6113      	str	r3, [r2, #16]
		break;
 80015fa:	e296      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a1a      	ldr	r2, [pc, #104]	; (800166c <extInt_Config+0x70c>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d106      	bne.n	8001616 <extInt_Config+0x6b6>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <extInt_Config+0x6f8>)
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	4a12      	ldr	r2, [pc, #72]	; (8001658 <extInt_Config+0x6f8>)
 800160e:	f043 0304 	orr.w	r3, r3, #4
 8001612:	6113      	str	r3, [r2, #16]
		break;
 8001614:	e289      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a14      	ldr	r2, [pc, #80]	; (8001670 <extInt_Config+0x710>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d106      	bne.n	8001630 <extInt_Config+0x6d0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <extInt_Config+0x6f8>)
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	4a0c      	ldr	r2, [pc, #48]	; (8001658 <extInt_Config+0x6f8>)
 8001628:	f043 0307 	orr.w	r3, r3, #7
 800162c:	6113      	str	r3, [r2, #16]
		break;
 800162e:	e27c      	b.n	8001b2a <extInt_Config+0xbca>
			__NOP();
 8001630:	bf00      	nop
		break;
 8001632:	e27a      	b.n	8001b2a <extInt_Config+0xbca>
	}
	/* Configurando para el todos los pines GPIOX_9*/
	case 9: {
		/* SYSCFG_EXTICR3 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <extInt_Config+0x6f8>)
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	4a07      	ldr	r2, [pc, #28]	; (8001658 <extInt_Config+0x6f8>)
 800163a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800163e:	6113      	str	r3, [r2, #16]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <extInt_Config+0x6fc>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d113      	bne.n	8001674 <extInt_Config+0x714>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 800164c:	4b02      	ldr	r3, [pc, #8]	; (8001658 <extInt_Config+0x6f8>)
 800164e:	4a02      	ldr	r2, [pc, #8]	; (8001658 <extInt_Config+0x6f8>)
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	6113      	str	r3, [r2, #16]

		} else {
			__NOP();
		}

		break;
 8001654:	e269      	b.n	8001b2a <extInt_Config+0xbca>
 8001656:	bf00      	nop
 8001658:	40013800 	.word	0x40013800
 800165c:	40020000 	.word	0x40020000
 8001660:	40020400 	.word	0x40020400
 8001664:	40020800 	.word	0x40020800
 8001668:	40020c00 	.word	0x40020c00
 800166c:	40021000 	.word	0x40021000
 8001670:	40021c00 	.word	0x40021c00
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a83      	ldr	r2, [pc, #524]	; (8001888 <extInt_Config+0x928>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d106      	bne.n	800168e <extInt_Config+0x72e>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8001680:	4b82      	ldr	r3, [pc, #520]	; (800188c <extInt_Config+0x92c>)
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	4a81      	ldr	r2, [pc, #516]	; (800188c <extInt_Config+0x92c>)
 8001686:	f043 0310 	orr.w	r3, r3, #16
 800168a:	6113      	str	r3, [r2, #16]
		break;
 800168c:	e24d      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a7e      	ldr	r2, [pc, #504]	; (8001890 <extInt_Config+0x930>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d106      	bne.n	80016a8 <extInt_Config+0x748>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 800169a:	4b7c      	ldr	r3, [pc, #496]	; (800188c <extInt_Config+0x92c>)
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	4a7b      	ldr	r2, [pc, #492]	; (800188c <extInt_Config+0x92c>)
 80016a0:	f043 0320 	orr.w	r3, r3, #32
 80016a4:	6113      	str	r3, [r2, #16]
		break;
 80016a6:	e240      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a79      	ldr	r2, [pc, #484]	; (8001894 <extInt_Config+0x934>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d106      	bne.n	80016c2 <extInt_Config+0x762>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 80016b4:	4b75      	ldr	r3, [pc, #468]	; (800188c <extInt_Config+0x92c>)
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	4a74      	ldr	r2, [pc, #464]	; (800188c <extInt_Config+0x92c>)
 80016ba:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80016be:	6113      	str	r3, [r2, #16]
		break;
 80016c0:	e233      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a73      	ldr	r2, [pc, #460]	; (8001898 <extInt_Config+0x938>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d106      	bne.n	80016dc <extInt_Config+0x77c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 80016ce:	4b6f      	ldr	r3, [pc, #444]	; (800188c <extInt_Config+0x92c>)
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	4a6e      	ldr	r2, [pc, #440]	; (800188c <extInt_Config+0x92c>)
 80016d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016d8:	6113      	str	r3, [r2, #16]
		break;
 80016da:	e226      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a6e      	ldr	r2, [pc, #440]	; (800189c <extInt_Config+0x93c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d106      	bne.n	80016f6 <extInt_Config+0x796>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 80016e8:	4b68      	ldr	r3, [pc, #416]	; (800188c <extInt_Config+0x92c>)
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	4a67      	ldr	r2, [pc, #412]	; (800188c <extInt_Config+0x92c>)
 80016ee:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80016f2:	6113      	str	r3, [r2, #16]
		break;
 80016f4:	e219      	b.n	8001b2a <extInt_Config+0xbca>
			__NOP();
 80016f6:	bf00      	nop
		break;
 80016f8:	e217      	b.n	8001b2a <extInt_Config+0xbca>
	}
	/* Configurando para el todos los pines GPIOX_10*/
	case 10: {
		/* SYSCFG_EXTICR3 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 80016fa:	4b64      	ldr	r3, [pc, #400]	; (800188c <extInt_Config+0x92c>)
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	4a63      	ldr	r2, [pc, #396]	; (800188c <extInt_Config+0x92c>)
 8001700:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001704:	6113      	str	r3, [r2, #16]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a64      	ldr	r2, [pc, #400]	; (80018a0 <extInt_Config+0x940>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d104      	bne.n	800171c <extInt_Config+0x7bc>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8001712:	4b5e      	ldr	r3, [pc, #376]	; (800188c <extInt_Config+0x92c>)
 8001714:	4a5d      	ldr	r2, [pc, #372]	; (800188c <extInt_Config+0x92c>)
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	6113      	str	r3, [r2, #16]

		} else {
			__NOP();
		}

		break;
 800171a:	e206      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a59      	ldr	r2, [pc, #356]	; (8001888 <extInt_Config+0x928>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d106      	bne.n	8001736 <extInt_Config+0x7d6>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8001728:	4b58      	ldr	r3, [pc, #352]	; (800188c <extInt_Config+0x92c>)
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	4a57      	ldr	r2, [pc, #348]	; (800188c <extInt_Config+0x92c>)
 800172e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001732:	6113      	str	r3, [r2, #16]
		break;
 8001734:	e1f9      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a54      	ldr	r2, [pc, #336]	; (8001890 <extInt_Config+0x930>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d106      	bne.n	8001750 <extInt_Config+0x7f0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8001742:	4b52      	ldr	r3, [pc, #328]	; (800188c <extInt_Config+0x92c>)
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	4a51      	ldr	r2, [pc, #324]	; (800188c <extInt_Config+0x92c>)
 8001748:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800174c:	6113      	str	r3, [r2, #16]
		break;
 800174e:	e1ec      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a4f      	ldr	r2, [pc, #316]	; (8001894 <extInt_Config+0x934>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d106      	bne.n	800176a <extInt_Config+0x80a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 800175c:	4b4b      	ldr	r3, [pc, #300]	; (800188c <extInt_Config+0x92c>)
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	4a4a      	ldr	r2, [pc, #296]	; (800188c <extInt_Config+0x92c>)
 8001762:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001766:	6113      	str	r3, [r2, #16]
		break;
 8001768:	e1df      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a49      	ldr	r2, [pc, #292]	; (8001898 <extInt_Config+0x938>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d106      	bne.n	8001784 <extInt_Config+0x824>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8001776:	4b45      	ldr	r3, [pc, #276]	; (800188c <extInt_Config+0x92c>)
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	4a44      	ldr	r2, [pc, #272]	; (800188c <extInt_Config+0x92c>)
 800177c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001780:	6113      	str	r3, [r2, #16]
		break;
 8001782:	e1d2      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a44      	ldr	r2, [pc, #272]	; (800189c <extInt_Config+0x93c>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d106      	bne.n	800179e <extInt_Config+0x83e>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8001790:	4b3e      	ldr	r3, [pc, #248]	; (800188c <extInt_Config+0x92c>)
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	4a3d      	ldr	r2, [pc, #244]	; (800188c <extInt_Config+0x92c>)
 8001796:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800179a:	6113      	str	r3, [r2, #16]
		break;
 800179c:	e1c5      	b.n	8001b2a <extInt_Config+0xbca>
			__NOP();
 800179e:	bf00      	nop
		break;
 80017a0:	e1c3      	b.n	8001b2a <extInt_Config+0xbca>
	}
	/* Configurando para el todos los pines GPIOX_11*/
	case 11: {
		/* SYSCFG_EXTICR3 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 80017a2:	4b3a      	ldr	r3, [pc, #232]	; (800188c <extInt_Config+0x92c>)
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	4a39      	ldr	r2, [pc, #228]	; (800188c <extInt_Config+0x92c>)
 80017a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80017ac:	6113      	str	r3, [r2, #16]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a3a      	ldr	r2, [pc, #232]	; (80018a0 <extInt_Config+0x940>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d104      	bne.n	80017c4 <extInt_Config+0x864>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 80017ba:	4b34      	ldr	r3, [pc, #208]	; (800188c <extInt_Config+0x92c>)
 80017bc:	4a33      	ldr	r2, [pc, #204]	; (800188c <extInt_Config+0x92c>)
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	6113      	str	r3, [r2, #16]

		} else {
			__NOP();
		}

		break;
 80017c2:	e1b2      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a2f      	ldr	r2, [pc, #188]	; (8001888 <extInt_Config+0x928>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d106      	bne.n	80017de <extInt_Config+0x87e>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 80017d0:	4b2e      	ldr	r3, [pc, #184]	; (800188c <extInt_Config+0x92c>)
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	4a2d      	ldr	r2, [pc, #180]	; (800188c <extInt_Config+0x92c>)
 80017d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017da:	6113      	str	r3, [r2, #16]
		break;
 80017dc:	e1a5      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a2a      	ldr	r2, [pc, #168]	; (8001890 <extInt_Config+0x930>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d106      	bne.n	80017f8 <extInt_Config+0x898>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 80017ea:	4b28      	ldr	r3, [pc, #160]	; (800188c <extInt_Config+0x92c>)
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	4a27      	ldr	r2, [pc, #156]	; (800188c <extInt_Config+0x92c>)
 80017f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017f4:	6113      	str	r3, [r2, #16]
		break;
 80017f6:	e198      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a25      	ldr	r2, [pc, #148]	; (8001894 <extInt_Config+0x934>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d106      	bne.n	8001812 <extInt_Config+0x8b2>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8001804:	4b21      	ldr	r3, [pc, #132]	; (800188c <extInt_Config+0x92c>)
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	4a20      	ldr	r2, [pc, #128]	; (800188c <extInt_Config+0x92c>)
 800180a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800180e:	6113      	str	r3, [r2, #16]
		break;
 8001810:	e18b      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a1f      	ldr	r2, [pc, #124]	; (8001898 <extInt_Config+0x938>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d106      	bne.n	800182c <extInt_Config+0x8cc>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 800181e:	4b1b      	ldr	r3, [pc, #108]	; (800188c <extInt_Config+0x92c>)
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	4a1a      	ldr	r2, [pc, #104]	; (800188c <extInt_Config+0x92c>)
 8001824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001828:	6113      	str	r3, [r2, #16]
		break;
 800182a:	e17e      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a1a      	ldr	r2, [pc, #104]	; (800189c <extInt_Config+0x93c>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d106      	bne.n	8001846 <extInt_Config+0x8e6>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <extInt_Config+0x92c>)
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	4a13      	ldr	r2, [pc, #76]	; (800188c <extInt_Config+0x92c>)
 800183e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001842:	6113      	str	r3, [r2, #16]
		break;
 8001844:	e171      	b.n	8001b2a <extInt_Config+0xbca>
			__NOP();
 8001846:	bf00      	nop
		break;
 8001848:	e16f      	b.n	8001b2a <extInt_Config+0xbca>
	}
	/* Configurando para el todos los pines GPIOX_12*/
	case 12: {
		/* SYSCFG_EXTICR4 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <extInt_Config+0x92c>)
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	4a0f      	ldr	r2, [pc, #60]	; (800188c <extInt_Config+0x92c>)
 8001850:	f023 030f 	bic.w	r3, r3, #15
 8001854:	6153      	str	r3, [r2, #20]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a10      	ldr	r2, [pc, #64]	; (80018a0 <extInt_Config+0x940>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d104      	bne.n	800186c <extInt_Config+0x90c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <extInt_Config+0x92c>)
 8001864:	4a09      	ldr	r2, [pc, #36]	; (800188c <extInt_Config+0x92c>)
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	6153      	str	r3, [r2, #20]

		} else {
			__NOP();
		}

		break;
 800186a:	e15e      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a05      	ldr	r2, [pc, #20]	; (8001888 <extInt_Config+0x928>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d115      	bne.n	80018a4 <extInt_Config+0x944>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <extInt_Config+0x92c>)
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	4a03      	ldr	r2, [pc, #12]	; (800188c <extInt_Config+0x92c>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6153      	str	r3, [r2, #20]
		break;
 8001884:	e151      	b.n	8001b2a <extInt_Config+0xbca>
 8001886:	bf00      	nop
 8001888:	40020400 	.word	0x40020400
 800188c:	40013800 	.word	0x40013800
 8001890:	40020800 	.word	0x40020800
 8001894:	40020c00 	.word	0x40020c00
 8001898:	40021000 	.word	0x40021000
 800189c:	40021c00 	.word	0x40021c00
 80018a0:	40020000 	.word	0x40020000
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a83      	ldr	r2, [pc, #524]	; (8001ab8 <extInt_Config+0xb58>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d106      	bne.n	80018be <extInt_Config+0x95e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 80018b0:	4b82      	ldr	r3, [pc, #520]	; (8001abc <extInt_Config+0xb5c>)
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	4a81      	ldr	r2, [pc, #516]	; (8001abc <extInt_Config+0xb5c>)
 80018b6:	f043 0302 	orr.w	r3, r3, #2
 80018ba:	6153      	str	r3, [r2, #20]
		break;
 80018bc:	e135      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a7e      	ldr	r2, [pc, #504]	; (8001ac0 <extInt_Config+0xb60>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d106      	bne.n	80018d8 <extInt_Config+0x978>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 80018ca:	4b7c      	ldr	r3, [pc, #496]	; (8001abc <extInt_Config+0xb5c>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	4a7b      	ldr	r2, [pc, #492]	; (8001abc <extInt_Config+0xb5c>)
 80018d0:	f043 0303 	orr.w	r3, r3, #3
 80018d4:	6153      	str	r3, [r2, #20]
		break;
 80018d6:	e128      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a79      	ldr	r2, [pc, #484]	; (8001ac4 <extInt_Config+0xb64>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d106      	bne.n	80018f2 <extInt_Config+0x992>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 80018e4:	4b75      	ldr	r3, [pc, #468]	; (8001abc <extInt_Config+0xb5c>)
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	4a74      	ldr	r2, [pc, #464]	; (8001abc <extInt_Config+0xb5c>)
 80018ea:	f043 0304 	orr.w	r3, r3, #4
 80018ee:	6153      	str	r3, [r2, #20]
		break;
 80018f0:	e11b      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a73      	ldr	r2, [pc, #460]	; (8001ac8 <extInt_Config+0xb68>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d106      	bne.n	800190c <extInt_Config+0x9ac>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 80018fe:	4b6f      	ldr	r3, [pc, #444]	; (8001abc <extInt_Config+0xb5c>)
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	4a6e      	ldr	r2, [pc, #440]	; (8001abc <extInt_Config+0xb5c>)
 8001904:	f043 0307 	orr.w	r3, r3, #7
 8001908:	6153      	str	r3, [r2, #20]
		break;
 800190a:	e10e      	b.n	8001b2a <extInt_Config+0xbca>
			__NOP();
 800190c:	bf00      	nop
		break;
 800190e:	e10c      	b.n	8001b2a <extInt_Config+0xbca>
	}
	/* Configurando para el todos los pines GPIOX_13*/
	case 13: {
		/* SYSCFG_EXTICR4 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 8001910:	4b6a      	ldr	r3, [pc, #424]	; (8001abc <extInt_Config+0xb5c>)
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	4a69      	ldr	r2, [pc, #420]	; (8001abc <extInt_Config+0xb5c>)
 8001916:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800191a:	6153      	str	r3, [r2, #20]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a6a      	ldr	r2, [pc, #424]	; (8001acc <extInt_Config+0xb6c>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d104      	bne.n	8001932 <extInt_Config+0x9d2>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8001928:	4b64      	ldr	r3, [pc, #400]	; (8001abc <extInt_Config+0xb5c>)
 800192a:	4a64      	ldr	r2, [pc, #400]	; (8001abc <extInt_Config+0xb5c>)
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	6153      	str	r3, [r2, #20]

		} else {
			__NOP();
		}

		break;
 8001930:	e0fb      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a65      	ldr	r2, [pc, #404]	; (8001ad0 <extInt_Config+0xb70>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d106      	bne.n	800194c <extInt_Config+0x9ec>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 800193e:	4b5f      	ldr	r3, [pc, #380]	; (8001abc <extInt_Config+0xb5c>)
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	4a5e      	ldr	r2, [pc, #376]	; (8001abc <extInt_Config+0xb5c>)
 8001944:	f043 0310 	orr.w	r3, r3, #16
 8001948:	6153      	str	r3, [r2, #20]
		break;
 800194a:	e0ee      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a59      	ldr	r2, [pc, #356]	; (8001ab8 <extInt_Config+0xb58>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d106      	bne.n	8001966 <extInt_Config+0xa06>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8001958:	4b58      	ldr	r3, [pc, #352]	; (8001abc <extInt_Config+0xb5c>)
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	4a57      	ldr	r2, [pc, #348]	; (8001abc <extInt_Config+0xb5c>)
 800195e:	f043 0320 	orr.w	r3, r3, #32
 8001962:	6153      	str	r3, [r2, #20]
		break;
 8001964:	e0e1      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a54      	ldr	r2, [pc, #336]	; (8001ac0 <extInt_Config+0xb60>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d106      	bne.n	8001980 <extInt_Config+0xa20>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8001972:	4b52      	ldr	r3, [pc, #328]	; (8001abc <extInt_Config+0xb5c>)
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	4a51      	ldr	r2, [pc, #324]	; (8001abc <extInt_Config+0xb5c>)
 8001978:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800197c:	6153      	str	r3, [r2, #20]
		break;
 800197e:	e0d4      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a4f      	ldr	r2, [pc, #316]	; (8001ac4 <extInt_Config+0xb64>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d106      	bne.n	800199a <extInt_Config+0xa3a>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 800198c:	4b4b      	ldr	r3, [pc, #300]	; (8001abc <extInt_Config+0xb5c>)
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	4a4a      	ldr	r2, [pc, #296]	; (8001abc <extInt_Config+0xb5c>)
 8001992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001996:	6153      	str	r3, [r2, #20]
		break;
 8001998:	e0c7      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a49      	ldr	r2, [pc, #292]	; (8001ac8 <extInt_Config+0xb68>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d106      	bne.n	80019b4 <extInt_Config+0xa54>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 80019a6:	4b45      	ldr	r3, [pc, #276]	; (8001abc <extInt_Config+0xb5c>)
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	4a44      	ldr	r2, [pc, #272]	; (8001abc <extInt_Config+0xb5c>)
 80019ac:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80019b0:	6153      	str	r3, [r2, #20]
		break;
 80019b2:	e0ba      	b.n	8001b2a <extInt_Config+0xbca>
			__NOP();
 80019b4:	bf00      	nop
		break;
 80019b6:	e0b8      	b.n	8001b2a <extInt_Config+0xbca>
	}
	/* Configurando para el todos los pines GPIOX_14*/
	case 14: {
		/* SYSCFG_EXTICR4 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 80019b8:	4b40      	ldr	r3, [pc, #256]	; (8001abc <extInt_Config+0xb5c>)
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	4a3f      	ldr	r2, [pc, #252]	; (8001abc <extInt_Config+0xb5c>)
 80019be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019c2:	6153      	str	r3, [r2, #20]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a40      	ldr	r2, [pc, #256]	; (8001acc <extInt_Config+0xb6c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d104      	bne.n	80019da <extInt_Config+0xa7a>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 80019d0:	4b3a      	ldr	r3, [pc, #232]	; (8001abc <extInt_Config+0xb5c>)
 80019d2:	4a3a      	ldr	r2, [pc, #232]	; (8001abc <extInt_Config+0xb5c>)
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	6153      	str	r3, [r2, #20]

		} else {
			__NOP();
		}

		break;
 80019d8:	e0a7      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a3b      	ldr	r2, [pc, #236]	; (8001ad0 <extInt_Config+0xb70>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d106      	bne.n	80019f4 <extInt_Config+0xa94>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 80019e6:	4b35      	ldr	r3, [pc, #212]	; (8001abc <extInt_Config+0xb5c>)
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	4a34      	ldr	r2, [pc, #208]	; (8001abc <extInt_Config+0xb5c>)
 80019ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f0:	6153      	str	r3, [r2, #20]
		break;
 80019f2:	e09a      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a2f      	ldr	r2, [pc, #188]	; (8001ab8 <extInt_Config+0xb58>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d106      	bne.n	8001a0e <extInt_Config+0xaae>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8001a00:	4b2e      	ldr	r3, [pc, #184]	; (8001abc <extInt_Config+0xb5c>)
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	4a2d      	ldr	r2, [pc, #180]	; (8001abc <extInt_Config+0xb5c>)
 8001a06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a0a:	6153      	str	r3, [r2, #20]
		break;
 8001a0c:	e08d      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a2a      	ldr	r2, [pc, #168]	; (8001ac0 <extInt_Config+0xb60>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d106      	bne.n	8001a28 <extInt_Config+0xac8>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8001a1a:	4b28      	ldr	r3, [pc, #160]	; (8001abc <extInt_Config+0xb5c>)
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	4a27      	ldr	r2, [pc, #156]	; (8001abc <extInt_Config+0xb5c>)
 8001a20:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001a24:	6153      	str	r3, [r2, #20]
		break;
 8001a26:	e080      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a25      	ldr	r2, [pc, #148]	; (8001ac4 <extInt_Config+0xb64>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d106      	bne.n	8001a42 <extInt_Config+0xae2>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8001a34:	4b21      	ldr	r3, [pc, #132]	; (8001abc <extInt_Config+0xb5c>)
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	4a20      	ldr	r2, [pc, #128]	; (8001abc <extInt_Config+0xb5c>)
 8001a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a3e:	6153      	str	r3, [r2, #20]
		break;
 8001a40:	e073      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1f      	ldr	r2, [pc, #124]	; (8001ac8 <extInt_Config+0xb68>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d106      	bne.n	8001a5c <extInt_Config+0xafc>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <extInt_Config+0xb5c>)
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	4a1a      	ldr	r2, [pc, #104]	; (8001abc <extInt_Config+0xb5c>)
 8001a54:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a58:	6153      	str	r3, [r2, #20]
		break;
 8001a5a:	e066      	b.n	8001b2a <extInt_Config+0xbca>
			__NOP();
 8001a5c:	bf00      	nop
		break;
 8001a5e:	e064      	b.n	8001b2a <extInt_Config+0xbca>
	}
	/* Configurando para el todos los pines GPIOX_15 */
	case 15: {
		/* SYSCFG_EXTICR4 */
		// Limpiamos primero la posición que deseamos configurar
		SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 8001a60:	4b16      	ldr	r3, [pc, #88]	; (8001abc <extInt_Config+0xb5c>)
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	4a15      	ldr	r2, [pc, #84]	; (8001abc <extInt_Config+0xb5c>)
 8001a66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001a6a:	6153      	str	r3, [r2, #20]

		// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
		// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
		if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a16      	ldr	r2, [pc, #88]	; (8001acc <extInt_Config+0xb6c>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d104      	bne.n	8001a82 <extInt_Config+0xb22>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8001a78:	4b10      	ldr	r3, [pc, #64]	; (8001abc <extInt_Config+0xb5c>)
 8001a7a:	4a10      	ldr	r2, [pc, #64]	; (8001abc <extInt_Config+0xb5c>)
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	6153      	str	r3, [r2, #20]
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

		} else {
			__NOP();
		}
		break;
 8001a80:	e053      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a11      	ldr	r2, [pc, #68]	; (8001ad0 <extInt_Config+0xb70>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d106      	bne.n	8001a9c <extInt_Config+0xb3c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <extInt_Config+0xb5c>)
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <extInt_Config+0xb5c>)
 8001a94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a98:	6153      	str	r3, [r2, #20]
		break;
 8001a9a:	e046      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a05      	ldr	r2, [pc, #20]	; (8001ab8 <extInt_Config+0xb58>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d115      	bne.n	8001ad4 <extInt_Config+0xb74>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <extInt_Config+0xb5c>)
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	4a03      	ldr	r2, [pc, #12]	; (8001abc <extInt_Config+0xb5c>)
 8001aae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ab2:	6153      	str	r3, [r2, #20]
		break;
 8001ab4:	e039      	b.n	8001b2a <extInt_Config+0xbca>
 8001ab6:	bf00      	nop
 8001ab8:	40020800 	.word	0x40020800
 8001abc:	40013800 	.word	0x40013800
 8001ac0:	40020c00 	.word	0x40020c00
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40021c00 	.word	0x40021c00
 8001acc:	40020000 	.word	0x40020000
 8001ad0:	40020400 	.word	0x40020400
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a61      	ldr	r2, [pc, #388]	; (8001c60 <extInt_Config+0xd00>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d106      	bne.n	8001aee <extInt_Config+0xb8e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8001ae0:	4b60      	ldr	r3, [pc, #384]	; (8001c64 <extInt_Config+0xd04>)
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	4a5f      	ldr	r2, [pc, #380]	; (8001c64 <extInt_Config+0xd04>)
 8001ae6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001aea:	6153      	str	r3, [r2, #20]
		break;
 8001aec:	e01d      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a5c      	ldr	r2, [pc, #368]	; (8001c68 <extInt_Config+0xd08>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d106      	bne.n	8001b08 <extInt_Config+0xba8>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8001afa:	4b5a      	ldr	r3, [pc, #360]	; (8001c64 <extInt_Config+0xd04>)
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	4a59      	ldr	r2, [pc, #356]	; (8001c64 <extInt_Config+0xd04>)
 8001b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b04:	6153      	str	r3, [r2, #20]
		break;
 8001b06:	e010      	b.n	8001b2a <extInt_Config+0xbca>
		} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a57      	ldr	r2, [pc, #348]	; (8001c6c <extInt_Config+0xd0c>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d106      	bne.n	8001b22 <extInt_Config+0xbc2>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8001b14:	4b53      	ldr	r3, [pc, #332]	; (8001c64 <extInt_Config+0xd04>)
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	4a52      	ldr	r2, [pc, #328]	; (8001c64 <extInt_Config+0xd04>)
 8001b1a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001b1e:	6153      	str	r3, [r2, #20]
		break;
 8001b20:	e003      	b.n	8001b2a <extInt_Config+0xbca>
			__NOP();
 8001b22:	bf00      	nop
		break;
 8001b24:	e001      	b.n	8001b2a <extInt_Config+0xbca>
	}

	default: {
		__NOP();
 8001b26:	bf00      	nop
		break;
 8001b28:	bf00      	nop

	}// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */
	// Por precaucion llevamos los registros a valores conocidos desactivados
	if(extiConfig->edgeType == EXTERNAL_INTERRUPT_FALLING_EDGE){
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	791b      	ldrb	r3, [r3, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10c      	bne.n	8001b4c <extInt_Config+0xbec>
		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0b1 << (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber));
 8001b32:	4b4f      	ldr	r3, [pc, #316]	; (8001c70 <extInt_Config+0xd10>)
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6812      	ldr	r2, [r2, #0]
 8001b3a:	7912      	ldrb	r2, [r2, #4]
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	2201      	movs	r2, #1
 8001b40:	408a      	lsls	r2, r1
 8001b42:	4611      	mov	r1, r2
 8001b44:	4a4a      	ldr	r2, [pc, #296]	; (8001c70 <extInt_Config+0xd10>)
 8001b46:	430b      	orrs	r3, r1
 8001b48:	60d3      	str	r3, [r2, #12]
 8001b4a:	e00b      	b.n	8001b64 <extInt_Config+0xc04>
	}
	else{
		/* Rising Trigger selection register*/
        EXTI->RTSR |= (0b1 << (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber));
 8001b4c:	4b48      	ldr	r3, [pc, #288]	; (8001c70 <extInt_Config+0xd10>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	7912      	ldrb	r2, [r2, #4]
 8001b56:	4611      	mov	r1, r2
 8001b58:	2201      	movs	r2, #1
 8001b5a:	408a      	lsls	r2, r1
 8001b5c:	4611      	mov	r1, r2
 8001b5e:	4a44      	ldr	r2, [pc, #272]	; (8001c70 <extInt_Config+0xd10>)
 8001b60:	430b      	orrs	r3, r1
 8001b62:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b64:	b672      	cpsid	i
}
 8001b66:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
	__disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
	EXTI->IMR |= (0b1 << (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber));
 8001b68:	4b41      	ldr	r3, [pc, #260]	; (8001c70 <extInt_Config+0xd10>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	7912      	ldrb	r2, [r2, #4]
 8001b72:	4611      	mov	r1, r2
 8001b74:	2201      	movs	r2, #1
 8001b76:	408a      	lsls	r2, r1
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4a3d      	ldr	r2, [pc, #244]	; (8001c70 <extInt_Config+0xd10>)
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	791b      	ldrb	r3, [r3, #4]
 8001b86:	2b0f      	cmp	r3, #15
 8001b88:	d862      	bhi.n	8001c50 <extInt_Config+0xcf0>
 8001b8a:	a201      	add	r2, pc, #4	; (adr r2, 8001b90 <extInt_Config+0xc30>)
 8001b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b90:	08001bd1 	.word	0x08001bd1
 8001b94:	08001bd9 	.word	0x08001bd9
 8001b98:	08001be1 	.word	0x08001be1
 8001b9c:	08001be9 	.word	0x08001be9
 8001ba0:	08001bf1 	.word	0x08001bf1
 8001ba4:	08001bf9 	.word	0x08001bf9
 8001ba8:	08001c01 	.word	0x08001c01
 8001bac:	08001c09 	.word	0x08001c09
 8001bb0:	08001c11 	.word	0x08001c11
 8001bb4:	08001c19 	.word	0x08001c19
 8001bb8:	08001c21 	.word	0x08001c21
 8001bbc:	08001c29 	.word	0x08001c29
 8001bc0:	08001c31 	.word	0x08001c31
 8001bc4:	08001c39 	.word	0x08001c39
 8001bc8:	08001c41 	.word	0x08001c41
 8001bcc:	08001c49 	.word	0x08001c49
	case 0: {
		__NVIC_EnableIRQ(EXTI0_IRQn);
 8001bd0:	2006      	movs	r0, #6
 8001bd2:	f7ff f9a9 	bl	8000f28 <__NVIC_EnableIRQ>
		break;
 8001bd6:	e03c      	b.n	8001c52 <extInt_Config+0xcf2>
	}

	case 1: {
		__NVIC_EnableIRQ(EXTI1_IRQn);
 8001bd8:	2007      	movs	r0, #7
 8001bda:	f7ff f9a5 	bl	8000f28 <__NVIC_EnableIRQ>
		break;
 8001bde:	e038      	b.n	8001c52 <extInt_Config+0xcf2>
	}

	case 2: {
		__NVIC_EnableIRQ(EXTI2_IRQn);
 8001be0:	2008      	movs	r0, #8
 8001be2:	f7ff f9a1 	bl	8000f28 <__NVIC_EnableIRQ>
		break;
 8001be6:	e034      	b.n	8001c52 <extInt_Config+0xcf2>
	}

	case 3: {
		__NVIC_EnableIRQ(EXTI3_IRQn);
 8001be8:	2009      	movs	r0, #9
 8001bea:	f7ff f99d 	bl	8000f28 <__NVIC_EnableIRQ>
		break;
 8001bee:	e030      	b.n	8001c52 <extInt_Config+0xcf2>
	}

	case 4: {
		__NVIC_EnableIRQ(EXTI4_IRQn);
 8001bf0:	200a      	movs	r0, #10
 8001bf2:	f7ff f999 	bl	8000f28 <__NVIC_EnableIRQ>
		break;
 8001bf6:	e02c      	b.n	8001c52 <extInt_Config+0xcf2>
	}

	case 5: {
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001bf8:	2017      	movs	r0, #23
 8001bfa:	f7ff f995 	bl	8000f28 <__NVIC_EnableIRQ>
		break;
 8001bfe:	e028      	b.n	8001c52 <extInt_Config+0xcf2>
	}

	case 6: {
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c00:	2017      	movs	r0, #23
 8001c02:	f7ff f991 	bl	8000f28 <__NVIC_EnableIRQ>
		break;
 8001c06:	e024      	b.n	8001c52 <extInt_Config+0xcf2>
	}

	case 7: {
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c08:	2017      	movs	r0, #23
 8001c0a:	f7ff f98d 	bl	8000f28 <__NVIC_EnableIRQ>
		break;
 8001c0e:	e020      	b.n	8001c52 <extInt_Config+0xcf2>
	}

	case 8: {
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c10:	2017      	movs	r0, #23
 8001c12:	f7ff f989 	bl	8000f28 <__NVIC_EnableIRQ>
		break;
 8001c16:	e01c      	b.n	8001c52 <extInt_Config+0xcf2>
	}

	case 9: {
		__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c18:	2017      	movs	r0, #23
 8001c1a:	f7ff f985 	bl	8000f28 <__NVIC_EnableIRQ>
		break;
 8001c1e:	e018      	b.n	8001c52 <extInt_Config+0xcf2>
	}

	case 10: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c20:	2028      	movs	r0, #40	; 0x28
 8001c22:	f7ff f981 	bl	8000f28 <__NVIC_EnableIRQ>
		break;
 8001c26:	e014      	b.n	8001c52 <extInt_Config+0xcf2>
	}

	case 11: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c28:	2028      	movs	r0, #40	; 0x28
 8001c2a:	f7ff f97d 	bl	8000f28 <__NVIC_EnableIRQ>
		break;
 8001c2e:	e010      	b.n	8001c52 <extInt_Config+0xcf2>
	}

	case 12: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c30:	2028      	movs	r0, #40	; 0x28
 8001c32:	f7ff f979 	bl	8000f28 <__NVIC_EnableIRQ>
		break;
 8001c36:	e00c      	b.n	8001c52 <extInt_Config+0xcf2>
	}

	case 13: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c38:	2028      	movs	r0, #40	; 0x28
 8001c3a:	f7ff f975 	bl	8000f28 <__NVIC_EnableIRQ>
		break;
 8001c3e:	e008      	b.n	8001c52 <extInt_Config+0xcf2>
	}

	case 14: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c40:	2028      	movs	r0, #40	; 0x28
 8001c42:	f7ff f971 	bl	8000f28 <__NVIC_EnableIRQ>
		break;
 8001c46:	e004      	b.n	8001c52 <extInt_Config+0xcf2>
	}

	case 15: {
		__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c48:	2028      	movs	r0, #40	; 0x28
 8001c4a:	f7ff f96d 	bl	8000f28 <__NVIC_EnableIRQ>
		break;
 8001c4e:	e000      	b.n	8001c52 <extInt_Config+0xcf2>
	}

	default: {
		break;
 8001c50:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8001c52:	b662      	cpsie	i
}
 8001c54:	bf00      	nop

	}

	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40020c00 	.word	0x40020c00
 8001c64:	40013800 	.word	0x40013800
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40021c00 	.word	0x40021c00
 8001c70:	40013c00 	.word	0x40013c00

08001c74 <callback_extInt0>:


/* Callbacks (del 1 al 15) para las 16 posiciones interrupciones */
__attribute__ ((weak)) void callback_extInt0(void){
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
	__NOP();
 8001c78:	bf00      	nop
}
 8001c7a:	bf00      	nop
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr

08001c82 <callback_extInt1>:

__attribute__ ((weak)) void callback_extInt1(void){
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
	__NOP();
 8001c86:	bf00      	nop
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <callback_extInt2>:

__attribute__ ((weak)) void callback_extInt2(void){
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
	__NOP();
 8001c94:	bf00      	nop
}
 8001c96:	bf00      	nop
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr

08001c9e <callback_extInt3>:

__attribute__ ((weak)) void callback_extInt3(void){
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0
	__NOP();
 8001ca2:	bf00      	nop
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <callback_extInt4>:

__attribute__ ((weak)) void callback_extInt4(void){
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
	__NOP();
 8001cb0:	bf00      	nop
}
 8001cb2:	bf00      	nop
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <callback_extInt5>:

__attribute__ ((weak)) void callback_extInt5(void){
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
	__NOP();
 8001cbe:	bf00      	nop
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <callback_extInt6>:

__attribute__ ((weak)) void callback_extInt6(void){
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
	__NOP();
 8001ccc:	bf00      	nop
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr

08001cd6 <callback_extInt7>:

__attribute__ ((weak)) void callback_extInt7(void){
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0
	__NOP();
 8001cda:	bf00      	nop
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <callback_extInt8>:

__attribute__ ((weak)) void callback_extInt8(void){
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
	__NOP();
 8001ce8:	bf00      	nop
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr

08001cf2 <callback_extInt9>:

__attribute__ ((weak)) void callback_extInt9(void){
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
	__NOP();
 8001cf6:	bf00      	nop
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <callback_extInt10>:

__attribute__ ((weak)) void callback_extInt10(void){
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
	__NOP();
 8001d04:	bf00      	nop
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr

08001d0e <callback_extInt12>:

__attribute__ ((weak)) void callback_extInt11(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt12(void){
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0
	__NOP();
 8001d12:	bf00      	nop
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <callback_extInt13>:

__attribute__ ((weak)) void callback_extInt13(void){
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
	__NOP();
 8001d20:	bf00      	nop
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr

08001d2a <callback_extInt14>:

__attribute__ ((weak)) void callback_extInt14(void){
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0
	__NOP();
 8001d2e:	bf00      	nop
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <EXTI0_IRQHandler>:
__attribute__ ((weak)) void callback_extInt15(void){
	__NOP();
}

/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 8001d3c:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <EXTI0_IRQHandler+0x24>)
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d007      	beq.n	8001d58 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <EXTI0_IRQHandler+0x24>)
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	4a03      	ldr	r2, [pc, #12]	; (8001d5c <EXTI0_IRQHandler+0x24>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 8001d54:	f7ff ff8e 	bl	8001c74 <callback_extInt0>
	}
}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40013c00 	.word	0x40013c00

08001d60 <EXTI1_IRQHandler>:

/* ISR de la interrupción canal 1*/
void EXTI1_IRQHandler(void){
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_1 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <EXTI1_IRQHandler+0x24>)
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d007      	beq.n	8001d80 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <EXTI1_IRQHandler+0x24>)
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	4a03      	ldr	r2, [pc, #12]	; (8001d84 <EXTI1_IRQHandler+0x24>)
 8001d76:	f043 0302 	orr.w	r3, r3, #2
 8001d7a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 8001d7c:	f7ff ff81 	bl	8001c82 <callback_extInt1>
	}
}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40013c00 	.word	0x40013c00

08001d88 <EXTI2_IRQHandler>:

/* ISR de la interrupción canal 2*/
void EXTI2_IRQHandler(void){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_2 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 8001d8c:	4b07      	ldr	r3, [pc, #28]	; (8001dac <EXTI2_IRQHandler+0x24>)
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d007      	beq.n	8001da8 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <EXTI2_IRQHandler+0x24>)
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	4a03      	ldr	r2, [pc, #12]	; (8001dac <EXTI2_IRQHandler+0x24>)
 8001d9e:	f043 0304 	orr.w	r3, r3, #4
 8001da2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 8001da4:	f7ff ff74 	bl	8001c90 <callback_extInt2>
	}
}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40013c00 	.word	0x40013c00

08001db0 <EXTI3_IRQHandler>:

/* ISR de la interrupción canal 3*/
void EXTI3_IRQHandler(void){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_3 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 8001db4:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <EXTI3_IRQHandler+0x24>)
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d007      	beq.n	8001dd0 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 8001dc0:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <EXTI3_IRQHandler+0x24>)
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	4a03      	ldr	r2, [pc, #12]	; (8001dd4 <EXTI3_IRQHandler+0x24>)
 8001dc6:	f043 0308 	orr.w	r3, r3, #8
 8001dca:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 8001dcc:	f7ff ff67 	bl	8001c9e <callback_extInt3>
	}
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40013c00 	.word	0x40013c00

08001dd8 <EXTI4_IRQHandler>:

/* ISR de la interrupción canal 4*/
void EXTI4_IRQHandler(void){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_4 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 8001ddc:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <EXTI4_IRQHandler+0x24>)
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d007      	beq.n	8001df8 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 8001de8:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <EXTI4_IRQHandler+0x24>)
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	4a03      	ldr	r2, [pc, #12]	; (8001dfc <EXTI4_IRQHandler+0x24>)
 8001dee:	f043 0310 	orr.w	r3, r3, #16
 8001df2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 8001df4:	f7ff ff5a 	bl	8001cac <callback_extInt4>
	}
}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40013c00 	.word	0x40013c00

08001e00 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_5 del GPIO_X
	if (EXTI -> PR & EXTI_PR_PR5){
 8001e04:	4b25      	ldr	r3, [pc, #148]	; (8001e9c <EXTI9_5_IRQHandler+0x9c>)
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	f003 0320 	and.w	r3, r3, #32
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d008      	beq.n	8001e22 <EXTI9_5_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI -> PR |= EXTI_PR_PR5;
 8001e10:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <EXTI9_5_IRQHandler+0x9c>)
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	4a21      	ldr	r2, [pc, #132]	; (8001e9c <EXTI9_5_IRQHandler+0x9c>)
 8001e16:	f043 0320 	orr.w	r3, r3, #32
 8001e1a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt5();
 8001e1c:	f7ff ff4d 	bl	8001cba <callback_extInt5>
		EXTI -> PR |= EXTI_PR_PR9;

		// Llamamos al callback
		callback_extInt9();
	}
}
 8001e20:	e03a      	b.n	8001e98 <EXTI9_5_IRQHandler+0x98>
	else if (EXTI -> PR & EXTI_PR_PR6){
 8001e22:	4b1e      	ldr	r3, [pc, #120]	; (8001e9c <EXTI9_5_IRQHandler+0x9c>)
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d008      	beq.n	8001e40 <EXTI9_5_IRQHandler+0x40>
		EXTI -> PR |= EXTI_PR_PR6;
 8001e2e:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <EXTI9_5_IRQHandler+0x9c>)
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	4a1a      	ldr	r2, [pc, #104]	; (8001e9c <EXTI9_5_IRQHandler+0x9c>)
 8001e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e38:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 8001e3a:	f7ff ff45 	bl	8001cc8 <callback_extInt6>
}
 8001e3e:	e02b      	b.n	8001e98 <EXTI9_5_IRQHandler+0x98>
	else if (EXTI -> PR & EXTI_PR_PR7){
 8001e40:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <EXTI9_5_IRQHandler+0x9c>)
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d008      	beq.n	8001e5e <EXTI9_5_IRQHandler+0x5e>
		EXTI -> PR |= EXTI_PR_PR7;
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <EXTI9_5_IRQHandler+0x9c>)
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <EXTI9_5_IRQHandler+0x9c>)
 8001e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e56:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 8001e58:	f7ff ff3d 	bl	8001cd6 <callback_extInt7>
}
 8001e5c:	e01c      	b.n	8001e98 <EXTI9_5_IRQHandler+0x98>
	else if (EXTI -> PR & EXTI_PR_PR8){
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <EXTI9_5_IRQHandler+0x9c>)
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d008      	beq.n	8001e7c <EXTI9_5_IRQHandler+0x7c>
		EXTI -> PR |= EXTI_PR_PR8;
 8001e6a:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <EXTI9_5_IRQHandler+0x9c>)
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <EXTI9_5_IRQHandler+0x9c>)
 8001e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e74:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 8001e76:	f7ff ff35 	bl	8001ce4 <callback_extInt8>
}
 8001e7a:	e00d      	b.n	8001e98 <EXTI9_5_IRQHandler+0x98>
	else if (EXTI -> PR & EXTI_PR_PR9){
 8001e7c:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <EXTI9_5_IRQHandler+0x9c>)
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d007      	beq.n	8001e98 <EXTI9_5_IRQHandler+0x98>
		EXTI -> PR |= EXTI_PR_PR9;
 8001e88:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <EXTI9_5_IRQHandler+0x9c>)
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	4a03      	ldr	r2, [pc, #12]	; (8001e9c <EXTI9_5_IRQHandler+0x9c>)
 8001e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e92:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 8001e94:	f7ff ff2d 	bl	8001cf2 <callback_extInt9>
}
 8001e98:	bf00      	nop
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40013c00 	.word	0x40013c00

08001ea0 <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 8001ea4:	4b2d      	ldr	r3, [pc, #180]	; (8001f5c <EXTI15_10_IRQHandler+0xbc>)
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d008      	beq.n	8001ec2 <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 8001eb0:	4b2a      	ldr	r3, [pc, #168]	; (8001f5c <EXTI15_10_IRQHandler+0xbc>)
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	4a29      	ldr	r2, [pc, #164]	; (8001f5c <EXTI15_10_IRQHandler+0xbc>)
 8001eb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eba:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 8001ebc:	f7ff ff20 	bl	8001d00 <callback_extInt10>

		// Llamamos al callback
		callback_extInt15();
	}

}
 8001ec0:	e049      	b.n	8001f56 <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI -> PR & EXTI_PR_PR11){
 8001ec2:	4b26      	ldr	r3, [pc, #152]	; (8001f5c <EXTI15_10_IRQHandler+0xbc>)
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d008      	beq.n	8001ee0 <EXTI15_10_IRQHandler+0x40>
		EXTI -> PR |= EXTI_PR_PR11;
 8001ece:	4b23      	ldr	r3, [pc, #140]	; (8001f5c <EXTI15_10_IRQHandler+0xbc>)
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	4a22      	ldr	r2, [pc, #136]	; (8001f5c <EXTI15_10_IRQHandler+0xbc>)
 8001ed4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ed8:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 8001eda:	f000 ff7f 	bl	8002ddc <callback_extInt11>
}
 8001ede:	e03a      	b.n	8001f56 <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI -> PR & EXTI_PR_PR12){
 8001ee0:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <EXTI15_10_IRQHandler+0xbc>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <EXTI15_10_IRQHandler+0x5e>
		EXTI -> PR |= EXTI_PR_PR12;
 8001eec:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <EXTI15_10_IRQHandler+0xbc>)
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	4a1a      	ldr	r2, [pc, #104]	; (8001f5c <EXTI15_10_IRQHandler+0xbc>)
 8001ef2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ef6:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 8001ef8:	f7ff ff09 	bl	8001d0e <callback_extInt12>
}
 8001efc:	e02b      	b.n	8001f56 <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI -> PR & EXTI_PR_PR13){
 8001efe:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <EXTI15_10_IRQHandler+0xbc>)
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d008      	beq.n	8001f1c <EXTI15_10_IRQHandler+0x7c>
		EXTI -> PR |= EXTI_PR_PR13;
 8001f0a:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <EXTI15_10_IRQHandler+0xbc>)
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	4a13      	ldr	r2, [pc, #76]	; (8001f5c <EXTI15_10_IRQHandler+0xbc>)
 8001f10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f14:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 8001f16:	f7ff ff01 	bl	8001d1c <callback_extInt13>
}
 8001f1a:	e01c      	b.n	8001f56 <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI -> PR & EXTI_PR_PR14){
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <EXTI15_10_IRQHandler+0xbc>)
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d008      	beq.n	8001f3a <EXTI15_10_IRQHandler+0x9a>
		EXTI -> PR |= EXTI_PR_PR14;
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <EXTI15_10_IRQHandler+0xbc>)
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	4a0b      	ldr	r2, [pc, #44]	; (8001f5c <EXTI15_10_IRQHandler+0xbc>)
 8001f2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f32:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 8001f34:	f7ff fef9 	bl	8001d2a <callback_extInt14>
}
 8001f38:	e00d      	b.n	8001f56 <EXTI15_10_IRQHandler+0xb6>
	else if (EXTI -> PR & EXTI_PR_PR15){
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <EXTI15_10_IRQHandler+0xbc>)
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d007      	beq.n	8001f56 <EXTI15_10_IRQHandler+0xb6>
		EXTI -> PR |= EXTI_PR_PR15;
 8001f46:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <EXTI15_10_IRQHandler+0xbc>)
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <EXTI15_10_IRQHandler+0xbc>)
 8001f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f50:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 8001f52:	f000 ff4f 	bl	8002df4 <callback_extInt15>
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40013c00 	.word	0x40013c00

08001f60 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemento "activar el periferico o activar la señal de reloj del periferico)
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60bb      	str	r3, [r7, #8]

	// 1)Activar el periferico
	//verificamos para GPIOA
	if(pGPIOHandler->pGPIOx == GPIOA){
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a87      	ldr	r2, [pc, #540]	; (8002194 <GPIO_Config+0x234>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d106      	bne.n	8001f88 <GPIO_Config+0x28>
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 8001f7a:	4b87      	ldr	r3, [pc, #540]	; (8002198 <GPIO_Config+0x238>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a86      	ldr	r2, [pc, #536]	; (8002198 <GPIO_Config+0x238>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	e03a      	b.n	8001ffe <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx == GPIOB){
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a83      	ldr	r2, [pc, #524]	; (800219c <GPIO_Config+0x23c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d106      	bne.n	8001fa0 <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 8001f92:	4b81      	ldr	r3, [pc, #516]	; (8002198 <GPIO_Config+0x238>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a80      	ldr	r2, [pc, #512]	; (8002198 <GPIO_Config+0x238>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	e02e      	b.n	8001ffe <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if(pGPIOHandler->pGPIOx == GPIOC){
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a7e      	ldr	r2, [pc, #504]	; (80021a0 <GPIO_Config+0x240>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d106      	bne.n	8001fb8 <GPIO_Config+0x58>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 8001faa:	4b7b      	ldr	r3, [pc, #492]	; (8002198 <GPIO_Config+0x238>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a7a      	ldr	r2, [pc, #488]	; (8002198 <GPIO_Config+0x238>)
 8001fb0:	f043 0304 	orr.w	r3, r3, #4
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	e022      	b.n	8001ffe <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if(pGPIOHandler->pGPIOx == GPIOD){
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a79      	ldr	r2, [pc, #484]	; (80021a4 <GPIO_Config+0x244>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d106      	bne.n	8001fd0 <GPIO_Config+0x70>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 8001fc2:	4b75      	ldr	r3, [pc, #468]	; (8002198 <GPIO_Config+0x238>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a74      	ldr	r2, [pc, #464]	; (8002198 <GPIO_Config+0x238>)
 8001fc8:	f043 0308 	orr.w	r3, r3, #8
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fce:	e016      	b.n	8001ffe <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if(pGPIOHandler->pGPIOx == GPIOE){
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a74      	ldr	r2, [pc, #464]	; (80021a8 <GPIO_Config+0x248>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d106      	bne.n	8001fe8 <GPIO_Config+0x88>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 8001fda:	4b6f      	ldr	r3, [pc, #444]	; (8002198 <GPIO_Config+0x238>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4a6e      	ldr	r2, [pc, #440]	; (8002198 <GPIO_Config+0x238>)
 8001fe0:	f043 0310 	orr.w	r3, r3, #16
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe6:	e00a      	b.n	8001ffe <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOH
	else if(pGPIOHandler->pGPIOx == GPIOH){
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a6f      	ldr	r2, [pc, #444]	; (80021ac <GPIO_Config+0x24c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d105      	bne.n	8001ffe <GPIO_Config+0x9e>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 8001ff2:	4b69      	ldr	r3, [pc, #420]	; (8002198 <GPIO_Config+0x238>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	4a68      	ldr	r2, [pc, #416]	; (8002198 <GPIO_Config+0x238>)
 8001ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ffc:	6313      	str	r3, [r2, #48]	; 0x30
	// Despues de activado, podemos comenzar a configurar.

	// 2) COnfigurando el registro GPIOx_MODER
	// Acá estamos leyendo config, moviendo "PinNumber" veces hacia la izquierda
	// ese valor (shift left) y todo eso lo cargamos en la variable auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	795b      	ldrb	r3, [r3, #5]
 8002002:	461a      	mov	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	791b      	ldrb	r3, [r3, #4]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	60fb      	str	r3, [r7, #12]
	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro
	 * (debemos escribir 0b00) para lo cual aplicamos una mascara y una operación de
	 * bitwise AND
	 */
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	791b      	ldrb	r3, [r3, #4]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	2103      	movs	r1, #3
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	4619      	mov	r1, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	400a      	ands	r2, r1
 800202c:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6819      	ldr	r1, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	430a      	orrs	r2, r1
 800203c:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	7a1b      	ldrb	r3, [r3, #8]
 8002042:	461a      	mov	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	791b      	ldrb	r3, [r3, #4]
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	791b      	ldrb	r3, [r3, #4]
 8002058:	4619      	mov	r1, r3
 800205a:	2301      	movs	r3, #1
 800205c:	408b      	lsls	r3, r1
 800205e:	43db      	mvns	r3, r3
 8002060:	4619      	mov	r1, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	400a      	ands	r2, r1
 8002068:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6859      	ldr	r1, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	430a      	orrs	r2, r1
 8002078:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	799b      	ldrb	r3, [r3, #6]
 800207e:	461a      	mov	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	791b      	ldrb	r3, [r3, #4]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0B11 << 2 *pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	791b      	ldrb	r3, [r3, #4]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	2103      	movs	r1, #3
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	4619      	mov	r1, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	400a      	ands	r2, r1
 80020a8:	609a      	str	r2, [r3, #8]

	//cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6899      	ldr	r1, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull up pull down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	79db      	ldrb	r3, [r3, #7]
 80020be:	461a      	mov	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	791b      	ldrb	r3, [r3, #4]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	791b      	ldrb	r3, [r3, #4]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	2103      	movs	r1, #3
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	4619      	mov	r1, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	400a      	ands	r2, r1
 80020e8:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68d9      	ldr	r1, [r3, #12]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas.. se vera luego
	if (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	795b      	ldrb	r3, [r3, #5]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d143      	bne.n	800218a <GPIO_Config+0x22a>

		//Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	791b      	ldrb	r3, [r3, #4]
 8002106:	2b07      	cmp	r3, #7
 8002108:	d81f      	bhi.n	800214a <GPIO_Config+0x1ea>
			//Estamos en el registro AGRL, que controla los piner del pIN_0 AL PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	791b      	ldrb	r3, [r3, #4]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del tegistro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6a1a      	ldr	r2, [r3, #32]
 8002118:	210f      	movs	r1, #15
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	fa01 f303 	lsl.w	r3, r1, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	4619      	mov	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	400a      	ands	r2, r1
 800212a:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor confiurado en la posicon seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6a1a      	ldr	r2, [r3, #32]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	7a5b      	ldrb	r3, [r3, #9]
 8002136:	4619      	mov	r1, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	fa01 f303 	lsl.w	r3, r1, r3
 800213e:	4619      	mov	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} //Fin del GPIO_Config
 8002148:	e01f      	b.n	800218a <GPIO_Config+0x22a>
			auxPosition = 4* (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber -8);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	791b      	ldrb	r3, [r3, #4]
 800214e:	3b08      	subs	r3, #8
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800215a:	210f      	movs	r1, #15
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	fa01 f303 	lsl.w	r3, r1, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	4619      	mov	r1, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	400a      	ands	r2, r1
 800216c:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7a5b      	ldrb	r3, [r3, #9]
 8002178:	4619      	mov	r1, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	fa01 f303 	lsl.w	r3, r1, r3
 8002180:	4619      	mov	r1, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	625a      	str	r2, [r3, #36]	; 0x24
} //Fin del GPIO_Config
 800218a:	bf00      	nop
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr
 8002194:	40020000 	.word	0x40020000
 8002198:	40023800 	.word	0x40023800
 800219c:	40020400 	.word	0x40020400
 80021a0:	40020800 	.word	0x40020800
 80021a4:	40020c00 	.word	0x40020c00
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40021c00 	.word	0x40021c00

080021b0 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 *
 */
void GPIO_WritePin(GPIO_Handler_t *pPinHandler, uint8_t newState){
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->0DR &= ~(SET << pPinHandler ->GPIO_PinConfig.GPIO_PinNumber);
	if(newState == SET){
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d10d      	bne.n	80021de <GPIO_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	699a      	ldr	r2, [r3, #24]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	791b      	ldrb	r3, [r3, #4]
 80021cc:	4619      	mov	r1, r3
 80021ce:	2301      	movs	r3, #1
 80021d0:	408b      	lsls	r3, r1
 80021d2:	4619      	mov	r1, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	619a      	str	r2, [r3, #24]
	else{
		//Trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
	}

}
 80021dc:	e00d      	b.n	80021fa <GPIO_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	699a      	ldr	r2, [r3, #24]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	791b      	ldrb	r3, [r3, #4]
 80021e8:	3310      	adds	r3, #16
 80021ea:	2101      	movs	r1, #1
 80021ec:	fa01 f303 	lsl.w	r3, r1, r3
 80021f0:	4619      	mov	r1, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	619a      	str	r2, [r3, #24]
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pic especifico
 */
uint32_t GPIO_ReadPin(GPIO_Handler_t *pPinHandler){
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
	// Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	60fb      	str	r3, [r7, #12]
	uint8_t mask = 0x01;
 8002210:	2301      	movs	r3, #1
 8002212:	72fb      	strb	r3, [r7, #11]

	// Cargamos el valor del registro IDR, desplazado a derecha tantas veces como la ubiacion
	// del pin especifico
	pinValue = (pPinHandler->pGPIOx->IDR >> pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	7912      	ldrb	r2, [r2, #4]
 800221e:	40d3      	lsrs	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 8002222:	7afb      	ldrb	r3, [r7, #11]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	4013      	ands	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]

	return pinValue;
 800222a:	68fb      	ldr	r3, [r7, #12]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr

08002236 <GPIOxTooglePin>:

void GPIOxTooglePin(GPIO_Handler_t *pPinHandler){
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR ^= (SET <<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695a      	ldr	r2, [r3, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	791b      	ldrb	r3, [r3, #4]
 8002248:	4619      	mov	r1, r3
 800224a:	2301      	movs	r3, #1
 800224c:	408b      	lsls	r3, r1
 800224e:	4619      	mov	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	404a      	eors	r2, r1
 8002256:	615a      	str	r2, [r3, #20]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr
	...

08002264 <SysTick_Handler>:
		ticks_counting = getTicks_ms();
	}

}

void SysTick_Handler(void){
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
	// Verificamos si se lanzó la interrupción
	if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk){
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <SysTick_Handler+0x38>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00e      	beq.n	8002292 <SysTick_Handler+0x2e>

		// Se limpia la bandera
		SysTick->CTRL &= ~SysTick_CTRL_COUNTFLAG_Msk;
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <SysTick_Handler+0x38>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a08      	ldr	r2, [pc, #32]	; (800229c <SysTick_Handler+0x38>)
 800227a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227e:	6013      	str	r3, [r2, #0]

		// Incrementamos en 1 el contador
		ticks++;
 8002280:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <SysTick_Handler+0x3c>)
 8002282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002286:	1c50      	adds	r0, r2, #1
 8002288:	f143 0100 	adc.w	r1, r3, #0
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <SysTick_Handler+0x3c>)
 800228e:	e9c3 0100 	strd	r0, r1, [r3]
	}
}
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000e010 	.word	0xe000e010
 80022a0:	200001f8 	.word	0x200001f8

080022a4 <main>:
void init_Hardware(void);

/* Se ajustan los parámetros
 * de la función central del programa
 */
int main(void){
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0

	//Se inician todos los elementos necesarios del sistema.
	init_Hardware();
 80022a8:	f000 fc10 	bl	8002acc <init_Hardware>
		 * de acuerdo con el SW button del encoder, se tiene una bandera flagButtonSW
		 * que indica el estado de dicho botón, por tanto, si está en bajo por defecto
		 * el sistema entrará en el modo contador y si se presiona, se pasará al modo
		 * snake game o juego de la culebrita.
		 */
		switch (flagButtonSW){
 80022ac:	4b36      	ldr	r3, [pc, #216]	; (8002388 <main+0xe4>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <main+0x16>
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d033      	beq.n	8002320 <main+0x7c>
 80022b8:	e7f8      	b.n	80022ac <main+0x8>
			 * del pin de datos (Pin data) con la señal del reloj, se encuentra
			 * que si la lectura del pin de datos es 1, el contador debe ir aumentando
			 * y si es 0, debe ir disminuyendo. Además, recuerde que se toman como
			 * referencia los flancos de bajada en la configuración.
			 */
			if(flagClock){
 80022ba:	4b34      	ldr	r3, [pc, #208]	; (800238c <main+0xe8>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d02b      	beq.n	800231a <main+0x76>
				if((GPIO_ReadPin(&handlerPinDT)) == 1){
 80022c2:	4833      	ldr	r0, [pc, #204]	; (8002390 <main+0xec>)
 80022c4:	f7ff ff9e 	bl	8002204 <GPIO_ReadPin>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d10e      	bne.n	80022ec <main+0x48>
					if (counter >= 99) {
 80022ce:	4b31      	ldr	r3, [pc, #196]	; (8002394 <main+0xf0>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b62      	cmp	r3, #98	; 0x62
 80022d4:	d903      	bls.n	80022de <main+0x3a>
						counter = 99;
 80022d6:	4b2f      	ldr	r3, [pc, #188]	; (8002394 <main+0xf0>)
 80022d8:	2263      	movs	r2, #99	; 0x63
 80022da:	701a      	strb	r2, [r3, #0]
 80022dc:	e01a      	b.n	8002314 <main+0x70>
					}
					else{
						counter++;
 80022de:	4b2d      	ldr	r3, [pc, #180]	; (8002394 <main+0xf0>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	3301      	adds	r3, #1
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <main+0xf0>)
 80022e8:	701a      	strb	r2, [r3, #0]
 80022ea:	e013      	b.n	8002314 <main+0x70>
					}
				}
				/* Se considera que cuando el encoder gire en sentido antihorario,
			 	   hay disminución en el valor. */
				else if((GPIO_ReadPin(&handlerPinDT)) == 0){
 80022ec:	4828      	ldr	r0, [pc, #160]	; (8002390 <main+0xec>)
 80022ee:	f7ff ff89 	bl	8002204 <GPIO_ReadPin>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10d      	bne.n	8002314 <main+0x70>
					// Se restringe el intervalo de operación del contador entre 0 y 99.
					if(counter <= 0){
 80022f8:	4b26      	ldr	r3, [pc, #152]	; (8002394 <main+0xf0>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d103      	bne.n	8002308 <main+0x64>
					counter = 0;
 8002300:	4b24      	ldr	r3, [pc, #144]	; (8002394 <main+0xf0>)
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
 8002306:	e005      	b.n	8002314 <main+0x70>
					}
					else{
						counter--;
 8002308:	4b22      	ldr	r3, [pc, #136]	; (8002394 <main+0xf0>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	3b01      	subs	r3, #1
 800230e:	b2da      	uxtb	r2, r3
 8002310:	4b20      	ldr	r3, [pc, #128]	; (8002394 <main+0xf0>)
 8002312:	701a      	strb	r2, [r3, #0]
					}

				}
				// Se baja la bandera del exti.
				flagClock = 0;
 8002314:	4b1d      	ldr	r3, [pc, #116]	; (800238c <main+0xe8>)
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
			}
			//Se llama la función que muestra los números.
			showNumber();
 800231a:	f000 f83f 	bl	800239c <showNumber>
			break;
 800231e:	e032      	b.n	8002386 <main+0xe2>
		// Se entra en el segundo modo de operación del snake game.
		case 1:
			/* Se define el sentido de rotación del encoder con los mismos criterios
			 * del modo anterior.
			 */
			if(flagClock){
 8002320:	4b1a      	ldr	r3, [pc, #104]	; (800238c <main+0xe8>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d02b      	beq.n	8002380 <main+0xdc>
				if((GPIO_ReadPin(&handlerPinDT)) == 1){
 8002328:	4819      	ldr	r0, [pc, #100]	; (8002390 <main+0xec>)
 800232a:	f7ff ff6b 	bl	8002204 <GPIO_ReadPin>
 800232e:	4603      	mov	r3, r0
 8002330:	2b01      	cmp	r3, #1
 8002332:	d10e      	bne.n	8002352 <main+0xae>
					if (counterS >= 11) {
 8002334:	4b18      	ldr	r3, [pc, #96]	; (8002398 <main+0xf4>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b0a      	cmp	r3, #10
 800233a:	d903      	bls.n	8002344 <main+0xa0>
						counterS = 0;
 800233c:	4b16      	ldr	r3, [pc, #88]	; (8002398 <main+0xf4>)
 800233e:	2200      	movs	r2, #0
 8002340:	701a      	strb	r2, [r3, #0]
 8002342:	e01a      	b.n	800237a <main+0xd6>
					}
					else{
						counterS++;
 8002344:	4b14      	ldr	r3, [pc, #80]	; (8002398 <main+0xf4>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	3301      	adds	r3, #1
 800234a:	b2da      	uxtb	r2, r3
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <main+0xf4>)
 800234e:	701a      	strb	r2, [r3, #0]
 8002350:	e013      	b.n	800237a <main+0xd6>
					}
				}
				/* Se considera que cuando el encoder gire en sentido antihorario,
			 	   hay disminución en el valor. */
				else if((GPIO_ReadPin(&handlerPinDT)) == 0){
 8002352:	480f      	ldr	r0, [pc, #60]	; (8002390 <main+0xec>)
 8002354:	f7ff ff56 	bl	8002204 <GPIO_ReadPin>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10d      	bne.n	800237a <main+0xd6>
					 * que indica la secuencia en que deben irse encendiendo los segmentos
					 * del modo culebrita.
					 */

					// Sentido de decrecimiento del nuevo contador counterS del modo 2.
					if(counterS <= 0){
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <main+0xf4>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d103      	bne.n	800236e <main+0xca>
					counterS = 11;
 8002366:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <main+0xf4>)
 8002368:	220b      	movs	r2, #11
 800236a:	701a      	strb	r2, [r3, #0]
 800236c:	e005      	b.n	800237a <main+0xd6>
					}
					else{
						counterS--;
 800236e:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <main+0xf4>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	3b01      	subs	r3, #1
 8002374:	b2da      	uxtb	r2, r3
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <main+0xf4>)
 8002378:	701a      	strb	r2, [r3, #0]
					}

				}
				// Se baja la bandera del exti.
				flagClock = 0;
 800237a:	4b04      	ldr	r3, [pc, #16]	; (800238c <main+0xe8>)
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
			}
			showSegment();
 8002380:	f000 f99c 	bl	80026bc <showSegment>
			break;
 8002384:	bf00      	nop
		switch (flagButtonSW){
 8002386:	e791      	b.n	80022ac <main+0x8>
 8002388:	20000255 	.word	0x20000255
 800238c:	20000254 	.word	0x20000254
 8002390:	20000220 	.word	0x20000220
 8002394:	20000256 	.word	0x20000256
 8002398:	20000257 	.word	0x20000257

0800239c <showNumber>:
	}
}


// Se crea esta función para mostrar las unidades y las decenas en el display.
void showNumber (void){
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
	if(GPIO_ReadPin(&handlerDisplay_Izq) == RESET){
 80023a0:	4818      	ldr	r0, [pc, #96]	; (8002404 <showNumber+0x68>)
 80023a2:	f7ff ff2f 	bl	8002204 <GPIO_ReadPin>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d117      	bne.n	80023dc <showNumber+0x40>
		GPIO_WritePin(&handlerDisplay_Izq, 0);
 80023ac:	2100      	movs	r1, #0
 80023ae:	4815      	ldr	r0, [pc, #84]	; (8002404 <showNumber+0x68>)
 80023b0:	f7ff fefe 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerDisplay_Der, 1);
 80023b4:	2101      	movs	r1, #1
 80023b6:	4814      	ldr	r0, [pc, #80]	; (8002408 <showNumber+0x6c>)
 80023b8:	f7ff fefa 	bl	80021b0 <GPIO_WritePin>
		showDisplay(counter % 10);
 80023bc:	4b13      	ldr	r3, [pc, #76]	; (800240c <showNumber+0x70>)
 80023be:	781a      	ldrb	r2, [r3, #0]
 80023c0:	4b13      	ldr	r3, [pc, #76]	; (8002410 <showNumber+0x74>)
 80023c2:	fba3 1302 	umull	r1, r3, r3, r2
 80023c6:	08d9      	lsrs	r1, r3, #3
 80023c8:	460b      	mov	r3, r1
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 f81d 	bl	8002414 <showDisplay>
	}else{
		GPIO_WritePin(&handlerDisplay_Izq, 1);
		GPIO_WritePin(&handlerDisplay_Der, 0);
		showDisplay(counter / 10);
	}
}
 80023da:	e011      	b.n	8002400 <showNumber+0x64>
		GPIO_WritePin(&handlerDisplay_Izq, 1);
 80023dc:	2101      	movs	r1, #1
 80023de:	4809      	ldr	r0, [pc, #36]	; (8002404 <showNumber+0x68>)
 80023e0:	f7ff fee6 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerDisplay_Der, 0);
 80023e4:	2100      	movs	r1, #0
 80023e6:	4808      	ldr	r0, [pc, #32]	; (8002408 <showNumber+0x6c>)
 80023e8:	f7ff fee2 	bl	80021b0 <GPIO_WritePin>
		showDisplay(counter / 10);
 80023ec:	4b07      	ldr	r3, [pc, #28]	; (800240c <showNumber+0x70>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	4a07      	ldr	r2, [pc, #28]	; (8002410 <showNumber+0x74>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	08db      	lsrs	r3, r3, #3
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 f80a 	bl	8002414 <showDisplay>
}
 8002400:	bf00      	nop
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20000258 	.word	0x20000258
 8002408:	20000264 	.word	0x20000264
 800240c:	20000256 	.word	0x20000256
 8002410:	cccccccd 	.word	0xcccccccd

08002414 <showDisplay>:

/* Se define la función que va a configurar los segmentos en el display de acuerdo
   al número. */
void showDisplay(uint8_t numero){
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
	switch(numero){
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	2b09      	cmp	r3, #9
 8002422:	f200 8139 	bhi.w	8002698 <showDisplay+0x284>
 8002426:	a201      	add	r2, pc, #4	; (adr r2, 800242c <showDisplay+0x18>)
 8002428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242c:	08002455 	.word	0x08002455
 8002430:	0800248f 	.word	0x0800248f
 8002434:	080024c9 	.word	0x080024c9
 8002438:	08002503 	.word	0x08002503
 800243c:	0800253d 	.word	0x0800253d
 8002440:	08002577 	.word	0x08002577
 8002444:	080025b1 	.word	0x080025b1
 8002448:	080025eb 	.word	0x080025eb
 800244c:	08002625 	.word	0x08002625
 8002450:	0800265f 	.word	0x0800265f
	case 0:
		GPIO_WritePin(&handlerPin_a, RESET);
 8002454:	2100      	movs	r1, #0
 8002456:	4892      	ldr	r0, [pc, #584]	; (80026a0 <showDisplay+0x28c>)
 8002458:	f7ff feaa 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_b, RESET);
 800245c:	2100      	movs	r1, #0
 800245e:	4891      	ldr	r0, [pc, #580]	; (80026a4 <showDisplay+0x290>)
 8002460:	f7ff fea6 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_c, RESET);
 8002464:	2100      	movs	r1, #0
 8002466:	4890      	ldr	r0, [pc, #576]	; (80026a8 <showDisplay+0x294>)
 8002468:	f7ff fea2 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_d, RESET);
 800246c:	2100      	movs	r1, #0
 800246e:	488f      	ldr	r0, [pc, #572]	; (80026ac <showDisplay+0x298>)
 8002470:	f7ff fe9e 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_e, RESET);
 8002474:	2100      	movs	r1, #0
 8002476:	488e      	ldr	r0, [pc, #568]	; (80026b0 <showDisplay+0x29c>)
 8002478:	f7ff fe9a 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_f, RESET);
 800247c:	2100      	movs	r1, #0
 800247e:	488d      	ldr	r0, [pc, #564]	; (80026b4 <showDisplay+0x2a0>)
 8002480:	f7ff fe96 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_g, SET);
 8002484:	2101      	movs	r1, #1
 8002486:	488c      	ldr	r0, [pc, #560]	; (80026b8 <showDisplay+0x2a4>)
 8002488:	f7ff fe92 	bl	80021b0 <GPIO_WritePin>
		break;
 800248c:	e104      	b.n	8002698 <showDisplay+0x284>
	case 1:
		GPIO_WritePin(&handlerPin_a, SET);
 800248e:	2101      	movs	r1, #1
 8002490:	4883      	ldr	r0, [pc, #524]	; (80026a0 <showDisplay+0x28c>)
 8002492:	f7ff fe8d 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_b, RESET);
 8002496:	2100      	movs	r1, #0
 8002498:	4882      	ldr	r0, [pc, #520]	; (80026a4 <showDisplay+0x290>)
 800249a:	f7ff fe89 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_c, RESET);
 800249e:	2100      	movs	r1, #0
 80024a0:	4881      	ldr	r0, [pc, #516]	; (80026a8 <showDisplay+0x294>)
 80024a2:	f7ff fe85 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_d, SET);
 80024a6:	2101      	movs	r1, #1
 80024a8:	4880      	ldr	r0, [pc, #512]	; (80026ac <showDisplay+0x298>)
 80024aa:	f7ff fe81 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_e, SET);
 80024ae:	2101      	movs	r1, #1
 80024b0:	487f      	ldr	r0, [pc, #508]	; (80026b0 <showDisplay+0x29c>)
 80024b2:	f7ff fe7d 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_f, SET);
 80024b6:	2101      	movs	r1, #1
 80024b8:	487e      	ldr	r0, [pc, #504]	; (80026b4 <showDisplay+0x2a0>)
 80024ba:	f7ff fe79 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_g, SET);
 80024be:	2101      	movs	r1, #1
 80024c0:	487d      	ldr	r0, [pc, #500]	; (80026b8 <showDisplay+0x2a4>)
 80024c2:	f7ff fe75 	bl	80021b0 <GPIO_WritePin>
		break;
 80024c6:	e0e7      	b.n	8002698 <showDisplay+0x284>
	case 2:
		GPIO_WritePin(&handlerPin_a, RESET);
 80024c8:	2100      	movs	r1, #0
 80024ca:	4875      	ldr	r0, [pc, #468]	; (80026a0 <showDisplay+0x28c>)
 80024cc:	f7ff fe70 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_b, RESET);
 80024d0:	2100      	movs	r1, #0
 80024d2:	4874      	ldr	r0, [pc, #464]	; (80026a4 <showDisplay+0x290>)
 80024d4:	f7ff fe6c 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_c, SET);
 80024d8:	2101      	movs	r1, #1
 80024da:	4873      	ldr	r0, [pc, #460]	; (80026a8 <showDisplay+0x294>)
 80024dc:	f7ff fe68 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_d, RESET);
 80024e0:	2100      	movs	r1, #0
 80024e2:	4872      	ldr	r0, [pc, #456]	; (80026ac <showDisplay+0x298>)
 80024e4:	f7ff fe64 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_e, RESET);
 80024e8:	2100      	movs	r1, #0
 80024ea:	4871      	ldr	r0, [pc, #452]	; (80026b0 <showDisplay+0x29c>)
 80024ec:	f7ff fe60 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_f, SET);
 80024f0:	2101      	movs	r1, #1
 80024f2:	4870      	ldr	r0, [pc, #448]	; (80026b4 <showDisplay+0x2a0>)
 80024f4:	f7ff fe5c 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_g, RESET);
 80024f8:	2100      	movs	r1, #0
 80024fa:	486f      	ldr	r0, [pc, #444]	; (80026b8 <showDisplay+0x2a4>)
 80024fc:	f7ff fe58 	bl	80021b0 <GPIO_WritePin>
		break;
 8002500:	e0ca      	b.n	8002698 <showDisplay+0x284>
	case 3:
		GPIO_WritePin(&handlerPin_a, RESET);
 8002502:	2100      	movs	r1, #0
 8002504:	4866      	ldr	r0, [pc, #408]	; (80026a0 <showDisplay+0x28c>)
 8002506:	f7ff fe53 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_b, RESET);
 800250a:	2100      	movs	r1, #0
 800250c:	4865      	ldr	r0, [pc, #404]	; (80026a4 <showDisplay+0x290>)
 800250e:	f7ff fe4f 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_c, RESET);
 8002512:	2100      	movs	r1, #0
 8002514:	4864      	ldr	r0, [pc, #400]	; (80026a8 <showDisplay+0x294>)
 8002516:	f7ff fe4b 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_d, RESET);
 800251a:	2100      	movs	r1, #0
 800251c:	4863      	ldr	r0, [pc, #396]	; (80026ac <showDisplay+0x298>)
 800251e:	f7ff fe47 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_e, SET);
 8002522:	2101      	movs	r1, #1
 8002524:	4862      	ldr	r0, [pc, #392]	; (80026b0 <showDisplay+0x29c>)
 8002526:	f7ff fe43 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_f, SET);
 800252a:	2101      	movs	r1, #1
 800252c:	4861      	ldr	r0, [pc, #388]	; (80026b4 <showDisplay+0x2a0>)
 800252e:	f7ff fe3f 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_g, RESET);
 8002532:	2100      	movs	r1, #0
 8002534:	4860      	ldr	r0, [pc, #384]	; (80026b8 <showDisplay+0x2a4>)
 8002536:	f7ff fe3b 	bl	80021b0 <GPIO_WritePin>
		break;
 800253a:	e0ad      	b.n	8002698 <showDisplay+0x284>
	case 4:
		GPIO_WritePin(&handlerPin_a, SET);
 800253c:	2101      	movs	r1, #1
 800253e:	4858      	ldr	r0, [pc, #352]	; (80026a0 <showDisplay+0x28c>)
 8002540:	f7ff fe36 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_b, RESET);
 8002544:	2100      	movs	r1, #0
 8002546:	4857      	ldr	r0, [pc, #348]	; (80026a4 <showDisplay+0x290>)
 8002548:	f7ff fe32 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_c, RESET);
 800254c:	2100      	movs	r1, #0
 800254e:	4856      	ldr	r0, [pc, #344]	; (80026a8 <showDisplay+0x294>)
 8002550:	f7ff fe2e 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_d, SET);
 8002554:	2101      	movs	r1, #1
 8002556:	4855      	ldr	r0, [pc, #340]	; (80026ac <showDisplay+0x298>)
 8002558:	f7ff fe2a 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_e, SET);
 800255c:	2101      	movs	r1, #1
 800255e:	4854      	ldr	r0, [pc, #336]	; (80026b0 <showDisplay+0x29c>)
 8002560:	f7ff fe26 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_f, RESET);
 8002564:	2100      	movs	r1, #0
 8002566:	4853      	ldr	r0, [pc, #332]	; (80026b4 <showDisplay+0x2a0>)
 8002568:	f7ff fe22 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_g, RESET);
 800256c:	2100      	movs	r1, #0
 800256e:	4852      	ldr	r0, [pc, #328]	; (80026b8 <showDisplay+0x2a4>)
 8002570:	f7ff fe1e 	bl	80021b0 <GPIO_WritePin>
		break;
 8002574:	e090      	b.n	8002698 <showDisplay+0x284>
	case 5:
		GPIO_WritePin(&handlerPin_a, RESET);
 8002576:	2100      	movs	r1, #0
 8002578:	4849      	ldr	r0, [pc, #292]	; (80026a0 <showDisplay+0x28c>)
 800257a:	f7ff fe19 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_b, SET);
 800257e:	2101      	movs	r1, #1
 8002580:	4848      	ldr	r0, [pc, #288]	; (80026a4 <showDisplay+0x290>)
 8002582:	f7ff fe15 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_c, RESET);
 8002586:	2100      	movs	r1, #0
 8002588:	4847      	ldr	r0, [pc, #284]	; (80026a8 <showDisplay+0x294>)
 800258a:	f7ff fe11 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_d, RESET);
 800258e:	2100      	movs	r1, #0
 8002590:	4846      	ldr	r0, [pc, #280]	; (80026ac <showDisplay+0x298>)
 8002592:	f7ff fe0d 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_e, SET);
 8002596:	2101      	movs	r1, #1
 8002598:	4845      	ldr	r0, [pc, #276]	; (80026b0 <showDisplay+0x29c>)
 800259a:	f7ff fe09 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_f, RESET);
 800259e:	2100      	movs	r1, #0
 80025a0:	4844      	ldr	r0, [pc, #272]	; (80026b4 <showDisplay+0x2a0>)
 80025a2:	f7ff fe05 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_g, RESET);
 80025a6:	2100      	movs	r1, #0
 80025a8:	4843      	ldr	r0, [pc, #268]	; (80026b8 <showDisplay+0x2a4>)
 80025aa:	f7ff fe01 	bl	80021b0 <GPIO_WritePin>
		break;
 80025ae:	e073      	b.n	8002698 <showDisplay+0x284>
	case 6:
		GPIO_WritePin(&handlerPin_a, RESET);
 80025b0:	2100      	movs	r1, #0
 80025b2:	483b      	ldr	r0, [pc, #236]	; (80026a0 <showDisplay+0x28c>)
 80025b4:	f7ff fdfc 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_b, SET);
 80025b8:	2101      	movs	r1, #1
 80025ba:	483a      	ldr	r0, [pc, #232]	; (80026a4 <showDisplay+0x290>)
 80025bc:	f7ff fdf8 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_c, RESET);
 80025c0:	2100      	movs	r1, #0
 80025c2:	4839      	ldr	r0, [pc, #228]	; (80026a8 <showDisplay+0x294>)
 80025c4:	f7ff fdf4 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_d, RESET);
 80025c8:	2100      	movs	r1, #0
 80025ca:	4838      	ldr	r0, [pc, #224]	; (80026ac <showDisplay+0x298>)
 80025cc:	f7ff fdf0 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_e, RESET);
 80025d0:	2100      	movs	r1, #0
 80025d2:	4837      	ldr	r0, [pc, #220]	; (80026b0 <showDisplay+0x29c>)
 80025d4:	f7ff fdec 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_f, RESET);
 80025d8:	2100      	movs	r1, #0
 80025da:	4836      	ldr	r0, [pc, #216]	; (80026b4 <showDisplay+0x2a0>)
 80025dc:	f7ff fde8 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_g, RESET);
 80025e0:	2100      	movs	r1, #0
 80025e2:	4835      	ldr	r0, [pc, #212]	; (80026b8 <showDisplay+0x2a4>)
 80025e4:	f7ff fde4 	bl	80021b0 <GPIO_WritePin>
		break;
 80025e8:	e056      	b.n	8002698 <showDisplay+0x284>
	case 7:
		GPIO_WritePin(&handlerPin_a, RESET);
 80025ea:	2100      	movs	r1, #0
 80025ec:	482c      	ldr	r0, [pc, #176]	; (80026a0 <showDisplay+0x28c>)
 80025ee:	f7ff fddf 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_b, RESET);
 80025f2:	2100      	movs	r1, #0
 80025f4:	482b      	ldr	r0, [pc, #172]	; (80026a4 <showDisplay+0x290>)
 80025f6:	f7ff fddb 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_c, RESET);
 80025fa:	2100      	movs	r1, #0
 80025fc:	482a      	ldr	r0, [pc, #168]	; (80026a8 <showDisplay+0x294>)
 80025fe:	f7ff fdd7 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_d, SET);
 8002602:	2101      	movs	r1, #1
 8002604:	4829      	ldr	r0, [pc, #164]	; (80026ac <showDisplay+0x298>)
 8002606:	f7ff fdd3 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_e, SET);
 800260a:	2101      	movs	r1, #1
 800260c:	4828      	ldr	r0, [pc, #160]	; (80026b0 <showDisplay+0x29c>)
 800260e:	f7ff fdcf 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_f, SET);
 8002612:	2101      	movs	r1, #1
 8002614:	4827      	ldr	r0, [pc, #156]	; (80026b4 <showDisplay+0x2a0>)
 8002616:	f7ff fdcb 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_g, SET);
 800261a:	2101      	movs	r1, #1
 800261c:	4826      	ldr	r0, [pc, #152]	; (80026b8 <showDisplay+0x2a4>)
 800261e:	f7ff fdc7 	bl	80021b0 <GPIO_WritePin>
		break;
 8002622:	e039      	b.n	8002698 <showDisplay+0x284>
	case 8:
		GPIO_WritePin(&handlerPin_a, RESET);
 8002624:	2100      	movs	r1, #0
 8002626:	481e      	ldr	r0, [pc, #120]	; (80026a0 <showDisplay+0x28c>)
 8002628:	f7ff fdc2 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_b, RESET);
 800262c:	2100      	movs	r1, #0
 800262e:	481d      	ldr	r0, [pc, #116]	; (80026a4 <showDisplay+0x290>)
 8002630:	f7ff fdbe 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_c, RESET);
 8002634:	2100      	movs	r1, #0
 8002636:	481c      	ldr	r0, [pc, #112]	; (80026a8 <showDisplay+0x294>)
 8002638:	f7ff fdba 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_d, RESET);
 800263c:	2100      	movs	r1, #0
 800263e:	481b      	ldr	r0, [pc, #108]	; (80026ac <showDisplay+0x298>)
 8002640:	f7ff fdb6 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_e, RESET);
 8002644:	2100      	movs	r1, #0
 8002646:	481a      	ldr	r0, [pc, #104]	; (80026b0 <showDisplay+0x29c>)
 8002648:	f7ff fdb2 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_f, RESET);
 800264c:	2100      	movs	r1, #0
 800264e:	4819      	ldr	r0, [pc, #100]	; (80026b4 <showDisplay+0x2a0>)
 8002650:	f7ff fdae 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_g, RESET);
 8002654:	2100      	movs	r1, #0
 8002656:	4818      	ldr	r0, [pc, #96]	; (80026b8 <showDisplay+0x2a4>)
 8002658:	f7ff fdaa 	bl	80021b0 <GPIO_WritePin>
		break;
 800265c:	e01c      	b.n	8002698 <showDisplay+0x284>
	case 9:
		GPIO_WritePin(&handlerPin_a, RESET);
 800265e:	2100      	movs	r1, #0
 8002660:	480f      	ldr	r0, [pc, #60]	; (80026a0 <showDisplay+0x28c>)
 8002662:	f7ff fda5 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_b, RESET);
 8002666:	2100      	movs	r1, #0
 8002668:	480e      	ldr	r0, [pc, #56]	; (80026a4 <showDisplay+0x290>)
 800266a:	f7ff fda1 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_c, RESET);
 800266e:	2100      	movs	r1, #0
 8002670:	480d      	ldr	r0, [pc, #52]	; (80026a8 <showDisplay+0x294>)
 8002672:	f7ff fd9d 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_d, RESET);
 8002676:	2100      	movs	r1, #0
 8002678:	480c      	ldr	r0, [pc, #48]	; (80026ac <showDisplay+0x298>)
 800267a:	f7ff fd99 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_e, SET);
 800267e:	2101      	movs	r1, #1
 8002680:	480b      	ldr	r0, [pc, #44]	; (80026b0 <showDisplay+0x29c>)
 8002682:	f7ff fd95 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_f, RESET);
 8002686:	2100      	movs	r1, #0
 8002688:	480a      	ldr	r0, [pc, #40]	; (80026b4 <showDisplay+0x2a0>)
 800268a:	f7ff fd91 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_g, RESET);
 800268e:	2100      	movs	r1, #0
 8002690:	4809      	ldr	r0, [pc, #36]	; (80026b8 <showDisplay+0x2a4>)
 8002692:	f7ff fd8d 	bl	80021b0 <GPIO_WritePin>
		break;
 8002696:	bf00      	nop

	}

}
 8002698:	bf00      	nop
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20000270 	.word	0x20000270
 80026a4:	2000027c 	.word	0x2000027c
 80026a8:	20000288 	.word	0x20000288
 80026ac:	20000294 	.word	0x20000294
 80026b0:	200002a0 	.word	0x200002a0
 80026b4:	200002ac 	.word	0x200002ac
 80026b8:	200002b8 	.word	0x200002b8

080026bc <showSegment>:

/* Se crea esta función para mostrar los segmentos en el display, discriminando
 * si se encuentra en el display de la izquierda o la derecha dependiendo de
 * la distribución de los segmentos dentro de la secuencia escogida.
 */
void showSegment (void){
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
	if(counterS == 0 || counterS == 5 || counterS == 6 || counterS == 9 || counterS == 10 || counterS == 11){
 80026c0:	4b26      	ldr	r3, [pc, #152]	; (800275c <showSegment+0xa0>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d013      	beq.n	80026f0 <showSegment+0x34>
 80026c8:	4b24      	ldr	r3, [pc, #144]	; (800275c <showSegment+0xa0>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b05      	cmp	r3, #5
 80026ce:	d00f      	beq.n	80026f0 <showSegment+0x34>
 80026d0:	4b22      	ldr	r3, [pc, #136]	; (800275c <showSegment+0xa0>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b06      	cmp	r3, #6
 80026d6:	d00b      	beq.n	80026f0 <showSegment+0x34>
 80026d8:	4b20      	ldr	r3, [pc, #128]	; (800275c <showSegment+0xa0>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b09      	cmp	r3, #9
 80026de:	d007      	beq.n	80026f0 <showSegment+0x34>
 80026e0:	4b1e      	ldr	r3, [pc, #120]	; (800275c <showSegment+0xa0>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b0a      	cmp	r3, #10
 80026e6:	d003      	beq.n	80026f0 <showSegment+0x34>
 80026e8:	4b1c      	ldr	r3, [pc, #112]	; (800275c <showSegment+0xa0>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b0b      	cmp	r3, #11
 80026ee:	d10d      	bne.n	800270c <showSegment+0x50>
		GPIO_WritePin(&handlerDisplay_Izq, 0);
 80026f0:	2100      	movs	r1, #0
 80026f2:	481b      	ldr	r0, [pc, #108]	; (8002760 <showSegment+0xa4>)
 80026f4:	f7ff fd5c 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerDisplay_Der, 1);
 80026f8:	2101      	movs	r1, #1
 80026fa:	481a      	ldr	r0, [pc, #104]	; (8002764 <showSegment+0xa8>)
 80026fc:	f7ff fd58 	bl	80021b0 <GPIO_WritePin>
		snakeGame(counterS);
 8002700:	4b16      	ldr	r3, [pc, #88]	; (800275c <showSegment+0xa0>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f000 f82f 	bl	8002768 <snakeGame>
	}else if(counterS == 1 || counterS == 2 || counterS == 3 || counterS == 4 || counterS == 7 || counterS == 8){
		GPIO_WritePin(&handlerDisplay_Izq, 1);
		GPIO_WritePin(&handlerDisplay_Der, 0);
		snakeGame(counterS);
	}
}
 800270a:	e024      	b.n	8002756 <showSegment+0x9a>
	}else if(counterS == 1 || counterS == 2 || counterS == 3 || counterS == 4 || counterS == 7 || counterS == 8){
 800270c:	4b13      	ldr	r3, [pc, #76]	; (800275c <showSegment+0xa0>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d013      	beq.n	800273c <showSegment+0x80>
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <showSegment+0xa0>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b02      	cmp	r3, #2
 800271a:	d00f      	beq.n	800273c <showSegment+0x80>
 800271c:	4b0f      	ldr	r3, [pc, #60]	; (800275c <showSegment+0xa0>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b03      	cmp	r3, #3
 8002722:	d00b      	beq.n	800273c <showSegment+0x80>
 8002724:	4b0d      	ldr	r3, [pc, #52]	; (800275c <showSegment+0xa0>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b04      	cmp	r3, #4
 800272a:	d007      	beq.n	800273c <showSegment+0x80>
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <showSegment+0xa0>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b07      	cmp	r3, #7
 8002732:	d003      	beq.n	800273c <showSegment+0x80>
 8002734:	4b09      	ldr	r3, [pc, #36]	; (800275c <showSegment+0xa0>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b08      	cmp	r3, #8
 800273a:	d10c      	bne.n	8002756 <showSegment+0x9a>
		GPIO_WritePin(&handlerDisplay_Izq, 1);
 800273c:	2101      	movs	r1, #1
 800273e:	4808      	ldr	r0, [pc, #32]	; (8002760 <showSegment+0xa4>)
 8002740:	f7ff fd36 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerDisplay_Der, 0);
 8002744:	2100      	movs	r1, #0
 8002746:	4807      	ldr	r0, [pc, #28]	; (8002764 <showSegment+0xa8>)
 8002748:	f7ff fd32 	bl	80021b0 <GPIO_WritePin>
		snakeGame(counterS);
 800274c:	4b03      	ldr	r3, [pc, #12]	; (800275c <showSegment+0xa0>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f000 f809 	bl	8002768 <snakeGame>
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000257 	.word	0x20000257
 8002760:	20000258 	.word	0x20000258
 8002764:	20000264 	.word	0x20000264

08002768 <snakeGame>:

/* Esta función determina la secuencia en que van a encenderse los segmentos
 * de acuerdo con la rotación del encoder para la culebrita del segundo modo.
 */
void snakeGame (uint8_t posAngular){
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
	switch (posAngular){
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	2b0c      	cmp	r3, #12
 8002776:	f200 8196 	bhi.w	8002aa6 <snakeGame+0x33e>
 800277a:	a201      	add	r2, pc, #4	; (adr r2, 8002780 <snakeGame+0x18>)
 800277c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002780:	080027b5 	.word	0x080027b5
 8002784:	080027ef 	.word	0x080027ef
 8002788:	08002829 	.word	0x08002829
 800278c:	08002863 	.word	0x08002863
 8002790:	0800289d 	.word	0x0800289d
 8002794:	080028d7 	.word	0x080028d7
 8002798:	08002911 	.word	0x08002911
 800279c:	0800294b 	.word	0x0800294b
 80027a0:	08002985 	.word	0x08002985
 80027a4:	080029bf 	.word	0x080029bf
 80027a8:	080029f9 	.word	0x080029f9
 80027ac:	08002a33 	.word	0x08002a33
 80027b0:	08002a6d 	.word	0x08002a6d
	case 0:
		GPIO_WritePin(&handlerPin_a, RESET);
 80027b4:	2100      	movs	r1, #0
 80027b6:	48be      	ldr	r0, [pc, #760]	; (8002ab0 <snakeGame+0x348>)
 80027b8:	f7ff fcfa 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_b, SET);
 80027bc:	2101      	movs	r1, #1
 80027be:	48bd      	ldr	r0, [pc, #756]	; (8002ab4 <snakeGame+0x34c>)
 80027c0:	f7ff fcf6 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_c, SET);
 80027c4:	2101      	movs	r1, #1
 80027c6:	48bc      	ldr	r0, [pc, #752]	; (8002ab8 <snakeGame+0x350>)
 80027c8:	f7ff fcf2 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_d, SET);
 80027cc:	2101      	movs	r1, #1
 80027ce:	48bb      	ldr	r0, [pc, #748]	; (8002abc <snakeGame+0x354>)
 80027d0:	f7ff fcee 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_e, SET);
 80027d4:	2101      	movs	r1, #1
 80027d6:	48ba      	ldr	r0, [pc, #744]	; (8002ac0 <snakeGame+0x358>)
 80027d8:	f7ff fcea 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_f, SET);
 80027dc:	2101      	movs	r1, #1
 80027de:	48b9      	ldr	r0, [pc, #740]	; (8002ac4 <snakeGame+0x35c>)
 80027e0:	f7ff fce6 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_g, SET);
 80027e4:	2101      	movs	r1, #1
 80027e6:	48b8      	ldr	r0, [pc, #736]	; (8002ac8 <snakeGame+0x360>)
 80027e8:	f7ff fce2 	bl	80021b0 <GPIO_WritePin>
		break;
 80027ec:	e15c      	b.n	8002aa8 <snakeGame+0x340>

	case 1:
		GPIO_WritePin(&handlerPin_a, RESET);
 80027ee:	2100      	movs	r1, #0
 80027f0:	48af      	ldr	r0, [pc, #700]	; (8002ab0 <snakeGame+0x348>)
 80027f2:	f7ff fcdd 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_b, SET);
 80027f6:	2101      	movs	r1, #1
 80027f8:	48ae      	ldr	r0, [pc, #696]	; (8002ab4 <snakeGame+0x34c>)
 80027fa:	f7ff fcd9 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_c, SET);
 80027fe:	2101      	movs	r1, #1
 8002800:	48ad      	ldr	r0, [pc, #692]	; (8002ab8 <snakeGame+0x350>)
 8002802:	f7ff fcd5 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_d, SET);
 8002806:	2101      	movs	r1, #1
 8002808:	48ac      	ldr	r0, [pc, #688]	; (8002abc <snakeGame+0x354>)
 800280a:	f7ff fcd1 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_e, SET);
 800280e:	2101      	movs	r1, #1
 8002810:	48ab      	ldr	r0, [pc, #684]	; (8002ac0 <snakeGame+0x358>)
 8002812:	f7ff fccd 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_f, SET);
 8002816:	2101      	movs	r1, #1
 8002818:	48aa      	ldr	r0, [pc, #680]	; (8002ac4 <snakeGame+0x35c>)
 800281a:	f7ff fcc9 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_g, SET);
 800281e:	2101      	movs	r1, #1
 8002820:	48a9      	ldr	r0, [pc, #676]	; (8002ac8 <snakeGame+0x360>)
 8002822:	f7ff fcc5 	bl	80021b0 <GPIO_WritePin>
		break;
 8002826:	e13f      	b.n	8002aa8 <snakeGame+0x340>

	case 2:
		GPIO_WritePin(&handlerPin_a, SET);
 8002828:	2101      	movs	r1, #1
 800282a:	48a1      	ldr	r0, [pc, #644]	; (8002ab0 <snakeGame+0x348>)
 800282c:	f7ff fcc0 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_b, SET);
 8002830:	2101      	movs	r1, #1
 8002832:	48a0      	ldr	r0, [pc, #640]	; (8002ab4 <snakeGame+0x34c>)
 8002834:	f7ff fcbc 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_c, SET);
 8002838:	2101      	movs	r1, #1
 800283a:	489f      	ldr	r0, [pc, #636]	; (8002ab8 <snakeGame+0x350>)
 800283c:	f7ff fcb8 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_d, SET);
 8002840:	2101      	movs	r1, #1
 8002842:	489e      	ldr	r0, [pc, #632]	; (8002abc <snakeGame+0x354>)
 8002844:	f7ff fcb4 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_e, SET);
 8002848:	2101      	movs	r1, #1
 800284a:	489d      	ldr	r0, [pc, #628]	; (8002ac0 <snakeGame+0x358>)
 800284c:	f7ff fcb0 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_f, RESET);
 8002850:	2100      	movs	r1, #0
 8002852:	489c      	ldr	r0, [pc, #624]	; (8002ac4 <snakeGame+0x35c>)
 8002854:	f7ff fcac 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_g, SET);
 8002858:	2101      	movs	r1, #1
 800285a:	489b      	ldr	r0, [pc, #620]	; (8002ac8 <snakeGame+0x360>)
 800285c:	f7ff fca8 	bl	80021b0 <GPIO_WritePin>
		break;
 8002860:	e122      	b.n	8002aa8 <snakeGame+0x340>

	case 3:
		GPIO_WritePin(&handlerPin_a, SET);
 8002862:	2101      	movs	r1, #1
 8002864:	4892      	ldr	r0, [pc, #584]	; (8002ab0 <snakeGame+0x348>)
 8002866:	f7ff fca3 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_b, SET);
 800286a:	2101      	movs	r1, #1
 800286c:	4891      	ldr	r0, [pc, #580]	; (8002ab4 <snakeGame+0x34c>)
 800286e:	f7ff fc9f 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_c, SET);
 8002872:	2101      	movs	r1, #1
 8002874:	4890      	ldr	r0, [pc, #576]	; (8002ab8 <snakeGame+0x350>)
 8002876:	f7ff fc9b 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_d, SET);
 800287a:	2101      	movs	r1, #1
 800287c:	488f      	ldr	r0, [pc, #572]	; (8002abc <snakeGame+0x354>)
 800287e:	f7ff fc97 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_e, RESET);
 8002882:	2100      	movs	r1, #0
 8002884:	488e      	ldr	r0, [pc, #568]	; (8002ac0 <snakeGame+0x358>)
 8002886:	f7ff fc93 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_f, SET);
 800288a:	2101      	movs	r1, #1
 800288c:	488d      	ldr	r0, [pc, #564]	; (8002ac4 <snakeGame+0x35c>)
 800288e:	f7ff fc8f 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_g, SET);
 8002892:	2101      	movs	r1, #1
 8002894:	488c      	ldr	r0, [pc, #560]	; (8002ac8 <snakeGame+0x360>)
 8002896:	f7ff fc8b 	bl	80021b0 <GPIO_WritePin>
		break;
 800289a:	e105      	b.n	8002aa8 <snakeGame+0x340>

	case 4:
		GPIO_WritePin(&handlerPin_a, SET);
 800289c:	2101      	movs	r1, #1
 800289e:	4884      	ldr	r0, [pc, #528]	; (8002ab0 <snakeGame+0x348>)
 80028a0:	f7ff fc86 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_b, SET);
 80028a4:	2101      	movs	r1, #1
 80028a6:	4883      	ldr	r0, [pc, #524]	; (8002ab4 <snakeGame+0x34c>)
 80028a8:	f7ff fc82 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_c, SET);
 80028ac:	2101      	movs	r1, #1
 80028ae:	4882      	ldr	r0, [pc, #520]	; (8002ab8 <snakeGame+0x350>)
 80028b0:	f7ff fc7e 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_d, RESET);
 80028b4:	2100      	movs	r1, #0
 80028b6:	4881      	ldr	r0, [pc, #516]	; (8002abc <snakeGame+0x354>)
 80028b8:	f7ff fc7a 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_e, SET);
 80028bc:	2101      	movs	r1, #1
 80028be:	4880      	ldr	r0, [pc, #512]	; (8002ac0 <snakeGame+0x358>)
 80028c0:	f7ff fc76 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_f, SET);
 80028c4:	2101      	movs	r1, #1
 80028c6:	487f      	ldr	r0, [pc, #508]	; (8002ac4 <snakeGame+0x35c>)
 80028c8:	f7ff fc72 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_g, SET);
 80028cc:	2101      	movs	r1, #1
 80028ce:	487e      	ldr	r0, [pc, #504]	; (8002ac8 <snakeGame+0x360>)
 80028d0:	f7ff fc6e 	bl	80021b0 <GPIO_WritePin>
		break;
 80028d4:	e0e8      	b.n	8002aa8 <snakeGame+0x340>

	case 5:
		GPIO_WritePin(&handlerPin_a, SET);
 80028d6:	2101      	movs	r1, #1
 80028d8:	4875      	ldr	r0, [pc, #468]	; (8002ab0 <snakeGame+0x348>)
 80028da:	f7ff fc69 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_b, SET);
 80028de:	2101      	movs	r1, #1
 80028e0:	4874      	ldr	r0, [pc, #464]	; (8002ab4 <snakeGame+0x34c>)
 80028e2:	f7ff fc65 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_c, SET);
 80028e6:	2101      	movs	r1, #1
 80028e8:	4873      	ldr	r0, [pc, #460]	; (8002ab8 <snakeGame+0x350>)
 80028ea:	f7ff fc61 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_d, SET);
 80028ee:	2101      	movs	r1, #1
 80028f0:	4872      	ldr	r0, [pc, #456]	; (8002abc <snakeGame+0x354>)
 80028f2:	f7ff fc5d 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_e, RESET);
 80028f6:	2100      	movs	r1, #0
 80028f8:	4871      	ldr	r0, [pc, #452]	; (8002ac0 <snakeGame+0x358>)
 80028fa:	f7ff fc59 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_f, SET);
 80028fe:	2101      	movs	r1, #1
 8002900:	4870      	ldr	r0, [pc, #448]	; (8002ac4 <snakeGame+0x35c>)
 8002902:	f7ff fc55 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_g, SET);
 8002906:	2101      	movs	r1, #1
 8002908:	486f      	ldr	r0, [pc, #444]	; (8002ac8 <snakeGame+0x360>)
 800290a:	f7ff fc51 	bl	80021b0 <GPIO_WritePin>
		break;
 800290e:	e0cb      	b.n	8002aa8 <snakeGame+0x340>

	case 6:
		GPIO_WritePin(&handlerPin_a, SET);
 8002910:	2101      	movs	r1, #1
 8002912:	4867      	ldr	r0, [pc, #412]	; (8002ab0 <snakeGame+0x348>)
 8002914:	f7ff fc4c 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_b, SET);
 8002918:	2101      	movs	r1, #1
 800291a:	4866      	ldr	r0, [pc, #408]	; (8002ab4 <snakeGame+0x34c>)
 800291c:	f7ff fc48 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_c, SET);
 8002920:	2101      	movs	r1, #1
 8002922:	4865      	ldr	r0, [pc, #404]	; (8002ab8 <snakeGame+0x350>)
 8002924:	f7ff fc44 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_d, SET);
 8002928:	2101      	movs	r1, #1
 800292a:	4864      	ldr	r0, [pc, #400]	; (8002abc <snakeGame+0x354>)
 800292c:	f7ff fc40 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_e, SET);
 8002930:	2101      	movs	r1, #1
 8002932:	4863      	ldr	r0, [pc, #396]	; (8002ac0 <snakeGame+0x358>)
 8002934:	f7ff fc3c 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_f, RESET);
 8002938:	2100      	movs	r1, #0
 800293a:	4862      	ldr	r0, [pc, #392]	; (8002ac4 <snakeGame+0x35c>)
 800293c:	f7ff fc38 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_g, SET);
 8002940:	2101      	movs	r1, #1
 8002942:	4861      	ldr	r0, [pc, #388]	; (8002ac8 <snakeGame+0x360>)
 8002944:	f7ff fc34 	bl	80021b0 <GPIO_WritePin>
		break;
 8002948:	e0ae      	b.n	8002aa8 <snakeGame+0x340>

	case 7:
		GPIO_WritePin(&handlerPin_a, SET);
 800294a:	2101      	movs	r1, #1
 800294c:	4858      	ldr	r0, [pc, #352]	; (8002ab0 <snakeGame+0x348>)
 800294e:	f7ff fc2f 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_b, RESET);
 8002952:	2100      	movs	r1, #0
 8002954:	4857      	ldr	r0, [pc, #348]	; (8002ab4 <snakeGame+0x34c>)
 8002956:	f7ff fc2b 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_c, SET);
 800295a:	2101      	movs	r1, #1
 800295c:	4856      	ldr	r0, [pc, #344]	; (8002ab8 <snakeGame+0x350>)
 800295e:	f7ff fc27 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_d, SET);
 8002962:	2101      	movs	r1, #1
 8002964:	4855      	ldr	r0, [pc, #340]	; (8002abc <snakeGame+0x354>)
 8002966:	f7ff fc23 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_e, SET);
 800296a:	2101      	movs	r1, #1
 800296c:	4854      	ldr	r0, [pc, #336]	; (8002ac0 <snakeGame+0x358>)
 800296e:	f7ff fc1f 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_f, SET);
 8002972:	2101      	movs	r1, #1
 8002974:	4853      	ldr	r0, [pc, #332]	; (8002ac4 <snakeGame+0x35c>)
 8002976:	f7ff fc1b 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_g, SET);
 800297a:	2101      	movs	r1, #1
 800297c:	4852      	ldr	r0, [pc, #328]	; (8002ac8 <snakeGame+0x360>)
 800297e:	f7ff fc17 	bl	80021b0 <GPIO_WritePin>
		break;
 8002982:	e091      	b.n	8002aa8 <snakeGame+0x340>
	case 8:
		GPIO_WritePin(&handlerPin_a, SET);
 8002984:	2101      	movs	r1, #1
 8002986:	484a      	ldr	r0, [pc, #296]	; (8002ab0 <snakeGame+0x348>)
 8002988:	f7ff fc12 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_b, SET);
 800298c:	2101      	movs	r1, #1
 800298e:	4849      	ldr	r0, [pc, #292]	; (8002ab4 <snakeGame+0x34c>)
 8002990:	f7ff fc0e 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_c, RESET);
 8002994:	2100      	movs	r1, #0
 8002996:	4848      	ldr	r0, [pc, #288]	; (8002ab8 <snakeGame+0x350>)
 8002998:	f7ff fc0a 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_d, SET);
 800299c:	2101      	movs	r1, #1
 800299e:	4847      	ldr	r0, [pc, #284]	; (8002abc <snakeGame+0x354>)
 80029a0:	f7ff fc06 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_e, SET);
 80029a4:	2101      	movs	r1, #1
 80029a6:	4846      	ldr	r0, [pc, #280]	; (8002ac0 <snakeGame+0x358>)
 80029a8:	f7ff fc02 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_f, SET);
 80029ac:	2101      	movs	r1, #1
 80029ae:	4845      	ldr	r0, [pc, #276]	; (8002ac4 <snakeGame+0x35c>)
 80029b0:	f7ff fbfe 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_g, SET);
 80029b4:	2101      	movs	r1, #1
 80029b6:	4844      	ldr	r0, [pc, #272]	; (8002ac8 <snakeGame+0x360>)
 80029b8:	f7ff fbfa 	bl	80021b0 <GPIO_WritePin>
		break;
 80029bc:	e074      	b.n	8002aa8 <snakeGame+0x340>
	case 9:
		GPIO_WritePin(&handlerPin_a, SET);
 80029be:	2101      	movs	r1, #1
 80029c0:	483b      	ldr	r0, [pc, #236]	; (8002ab0 <snakeGame+0x348>)
 80029c2:	f7ff fbf5 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_b, SET);
 80029c6:	2101      	movs	r1, #1
 80029c8:	483a      	ldr	r0, [pc, #232]	; (8002ab4 <snakeGame+0x34c>)
 80029ca:	f7ff fbf1 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_c, SET);
 80029ce:	2101      	movs	r1, #1
 80029d0:	4839      	ldr	r0, [pc, #228]	; (8002ab8 <snakeGame+0x350>)
 80029d2:	f7ff fbed 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_d, RESET);
 80029d6:	2100      	movs	r1, #0
 80029d8:	4838      	ldr	r0, [pc, #224]	; (8002abc <snakeGame+0x354>)
 80029da:	f7ff fbe9 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_e, SET);
 80029de:	2101      	movs	r1, #1
 80029e0:	4837      	ldr	r0, [pc, #220]	; (8002ac0 <snakeGame+0x358>)
 80029e2:	f7ff fbe5 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_f, SET);
 80029e6:	2101      	movs	r1, #1
 80029e8:	4836      	ldr	r0, [pc, #216]	; (8002ac4 <snakeGame+0x35c>)
 80029ea:	f7ff fbe1 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_g, SET);
 80029ee:	2101      	movs	r1, #1
 80029f0:	4835      	ldr	r0, [pc, #212]	; (8002ac8 <snakeGame+0x360>)
 80029f2:	f7ff fbdd 	bl	80021b0 <GPIO_WritePin>
		break;
 80029f6:	e057      	b.n	8002aa8 <snakeGame+0x340>

	case 10:
		GPIO_WritePin(&handlerPin_a, SET);
 80029f8:	2101      	movs	r1, #1
 80029fa:	482d      	ldr	r0, [pc, #180]	; (8002ab0 <snakeGame+0x348>)
 80029fc:	f7ff fbd8 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_b, SET);
 8002a00:	2101      	movs	r1, #1
 8002a02:	482c      	ldr	r0, [pc, #176]	; (8002ab4 <snakeGame+0x34c>)
 8002a04:	f7ff fbd4 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_c, RESET);
 8002a08:	2100      	movs	r1, #0
 8002a0a:	482b      	ldr	r0, [pc, #172]	; (8002ab8 <snakeGame+0x350>)
 8002a0c:	f7ff fbd0 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_d, SET);
 8002a10:	2101      	movs	r1, #1
 8002a12:	482a      	ldr	r0, [pc, #168]	; (8002abc <snakeGame+0x354>)
 8002a14:	f7ff fbcc 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_e, SET);
 8002a18:	2101      	movs	r1, #1
 8002a1a:	4829      	ldr	r0, [pc, #164]	; (8002ac0 <snakeGame+0x358>)
 8002a1c:	f7ff fbc8 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_f, SET);
 8002a20:	2101      	movs	r1, #1
 8002a22:	4828      	ldr	r0, [pc, #160]	; (8002ac4 <snakeGame+0x35c>)
 8002a24:	f7ff fbc4 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_g, SET);
 8002a28:	2101      	movs	r1, #1
 8002a2a:	4827      	ldr	r0, [pc, #156]	; (8002ac8 <snakeGame+0x360>)
 8002a2c:	f7ff fbc0 	bl	80021b0 <GPIO_WritePin>
		break;
 8002a30:	e03a      	b.n	8002aa8 <snakeGame+0x340>

	case 11:
		GPIO_WritePin(&handlerPin_a, SET);
 8002a32:	2101      	movs	r1, #1
 8002a34:	481e      	ldr	r0, [pc, #120]	; (8002ab0 <snakeGame+0x348>)
 8002a36:	f7ff fbbb 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_b, RESET);
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	481d      	ldr	r0, [pc, #116]	; (8002ab4 <snakeGame+0x34c>)
 8002a3e:	f7ff fbb7 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_c, SET);
 8002a42:	2101      	movs	r1, #1
 8002a44:	481c      	ldr	r0, [pc, #112]	; (8002ab8 <snakeGame+0x350>)
 8002a46:	f7ff fbb3 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_d, SET);
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	481b      	ldr	r0, [pc, #108]	; (8002abc <snakeGame+0x354>)
 8002a4e:	f7ff fbaf 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_e, SET);
 8002a52:	2101      	movs	r1, #1
 8002a54:	481a      	ldr	r0, [pc, #104]	; (8002ac0 <snakeGame+0x358>)
 8002a56:	f7ff fbab 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_f, SET);
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	4819      	ldr	r0, [pc, #100]	; (8002ac4 <snakeGame+0x35c>)
 8002a5e:	f7ff fba7 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_g, SET);
 8002a62:	2101      	movs	r1, #1
 8002a64:	4818      	ldr	r0, [pc, #96]	; (8002ac8 <snakeGame+0x360>)
 8002a66:	f7ff fba3 	bl	80021b0 <GPIO_WritePin>
		break;
 8002a6a:	e01d      	b.n	8002aa8 <snakeGame+0x340>

	case 12:{
		GPIO_WritePin(&handlerPin_a, SET);
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	4810      	ldr	r0, [pc, #64]	; (8002ab0 <snakeGame+0x348>)
 8002a70:	f7ff fb9e 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_b, SET);
 8002a74:	2101      	movs	r1, #1
 8002a76:	480f      	ldr	r0, [pc, #60]	; (8002ab4 <snakeGame+0x34c>)
 8002a78:	f7ff fb9a 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_c, SET);
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	480e      	ldr	r0, [pc, #56]	; (8002ab8 <snakeGame+0x350>)
 8002a80:	f7ff fb96 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_d, SET);
 8002a84:	2101      	movs	r1, #1
 8002a86:	480d      	ldr	r0, [pc, #52]	; (8002abc <snakeGame+0x354>)
 8002a88:	f7ff fb92 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_e, SET);
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	480c      	ldr	r0, [pc, #48]	; (8002ac0 <snakeGame+0x358>)
 8002a90:	f7ff fb8e 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_f, SET);
 8002a94:	2101      	movs	r1, #1
 8002a96:	480b      	ldr	r0, [pc, #44]	; (8002ac4 <snakeGame+0x35c>)
 8002a98:	f7ff fb8a 	bl	80021b0 <GPIO_WritePin>
		GPIO_WritePin(&handlerPin_g, SET);
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	480a      	ldr	r0, [pc, #40]	; (8002ac8 <snakeGame+0x360>)
 8002aa0:	f7ff fb86 	bl	80021b0 <GPIO_WritePin>
		break;
 8002aa4:	e000      	b.n	8002aa8 <snakeGame+0x340>
	}
	default:{
		break;
 8002aa6:	bf00      	nop
	}
	}
}
 8002aa8:	bf00      	nop
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	20000270 	.word	0x20000270
 8002ab4:	2000027c 	.word	0x2000027c
 8002ab8:	20000288 	.word	0x20000288
 8002abc:	20000294 	.word	0x20000294
 8002ac0:	200002a0 	.word	0x200002a0
 8002ac4:	200002ac 	.word	0x200002ac
 8002ac8:	200002b8 	.word	0x200002b8

08002acc <init_Hardware>:

// Es la función con la que se establecen las configuraciones generales del sistema.
void init_Hardware(void){
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0


	/* Configuración del LED de estado que indica el funcionamiento del programa */
	handlerBlinkyPin.pGPIOx 									= GPIOA;
 8002ad0:	4ba1      	ldr	r3, [pc, #644]	; (8002d58 <init_Hardware+0x28c>)
 8002ad2:	4aa2      	ldr	r2, [pc, #648]	; (8002d5c <init_Hardware+0x290>)
 8002ad4:	601a      	str	r2, [r3, #0]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinNumber 				= PIN_5;
 8002ad6:	4ba0      	ldr	r3, [pc, #640]	; (8002d58 <init_Hardware+0x28c>)
 8002ad8:	2205      	movs	r2, #5
 8002ada:	711a      	strb	r2, [r3, #4]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 8002adc:	4b9e      	ldr	r3, [pc, #632]	; (8002d58 <init_Hardware+0x28c>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	715a      	strb	r2, [r3, #5]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8002ae2:	4b9d      	ldr	r3, [pc, #628]	; (8002d58 <init_Hardware+0x28c>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	721a      	strb	r2, [r3, #8]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinSpeed  				= GPIO_OSPEED_FAST;
 8002ae8:	4b9b      	ldr	r3, [pc, #620]	; (8002d58 <init_Hardware+0x28c>)
 8002aea:	2202      	movs	r2, #2
 8002aec:	719a      	strb	r2, [r3, #6]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinPuPdControl			= GPIO_PUPDR_NOTHING;
 8002aee:	4b9a      	ldr	r3, [pc, #616]	; (8002d58 <init_Hardware+0x28c>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	71da      	strb	r2, [r3, #7]

	// Se carga lo que se hizo sobre el pin A5 sobre el que está el blinkyPin
	GPIO_Config(&handlerBlinkyPin);
 8002af4:	4898      	ldr	r0, [pc, #608]	; (8002d58 <init_Hardware+0x28c>)
 8002af6:	f7ff fa33 	bl	8001f60 <GPIO_Config>
	GPIO_WritePin(&handlerBlinkyPin, SET);
 8002afa:	2101      	movs	r1, #1
 8002afc:	4896      	ldr	r0, [pc, #600]	; (8002d58 <init_Hardware+0x28c>)
 8002afe:	f7ff fb57 	bl	80021b0 <GPIO_WritePin>

	// Configuración general en que se va a manejar el timer del blinky.
	handlerTim2.ptrTIMx								= TIM2;
 8002b02:	4b97      	ldr	r3, [pc, #604]	; (8002d60 <init_Hardware+0x294>)
 8002b04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b08:	601a      	str	r2, [r3, #0]
	handlerTim2.TIMx_Config.TIMx_mode				= BTIMER_MODE_UP;
 8002b0a:	4b95      	ldr	r3, [pc, #596]	; (8002d60 <init_Hardware+0x294>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	711a      	strb	r2, [r3, #4]
	handlerTim2.TIMx_Config.TIMx_speed				= BTIMER_SPEED_1ms;
 8002b10:	4b93      	ldr	r3, [pc, #588]	; (8002d60 <init_Hardware+0x294>)
 8002b12:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8002b16:	609a      	str	r2, [r3, #8]
	handlerTim2.TIMx_Config.TIMx_period				= 250; //Lanza una interrupcion cada 250 ms
 8002b18:	4b91      	ldr	r3, [pc, #580]	; (8002d60 <init_Hardware+0x294>)
 8002b1a:	22fa      	movs	r2, #250	; 0xfa
 8002b1c:	60da      	str	r2, [r3, #12]
	handlerTim2.TIMx_Config.TIMx_interruptEnable 	= BTIMER_INTERRUPT_ENABLE;
 8002b1e:	4b90      	ldr	r3, [pc, #576]	; (8002d60 <init_Hardware+0x294>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	741a      	strb	r2, [r3, #16]

	/* Se carga ahora la configuración del TIMER */
	BasicTimer_Config(&handlerTim2);
 8002b24:	488e      	ldr	r0, [pc, #568]	; (8002d60 <init_Hardware+0x294>)
 8002b26:	f7fe f90b 	bl	8000d40 <BasicTimer_Config>

	/* Se configuran las salidas del encoder */
	// Configuración para la salida del clock (CLK) del encoder.
	handlerCLK.pGPIOx									= GPIOC;
 8002b2a:	4b8e      	ldr	r3, [pc, #568]	; (8002d64 <init_Hardware+0x298>)
 8002b2c:	4a8e      	ldr	r2, [pc, #568]	; (8002d68 <init_Hardware+0x29c>)
 8002b2e:	601a      	str	r2, [r3, #0]
	handlerCLK.GPIO_PinConfig.GPIO_PinNumber			= PIN_11;
 8002b30:	4b8c      	ldr	r3, [pc, #560]	; (8002d64 <init_Hardware+0x298>)
 8002b32:	220b      	movs	r2, #11
 8002b34:	711a      	strb	r2, [r3, #4]
	handlerCLK.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_IN;
 8002b36:	4b8b      	ldr	r3, [pc, #556]	; (8002d64 <init_Hardware+0x298>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	715a      	strb	r2, [r3, #5]
	handlerCLK.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 8002b3c:	4b89      	ldr	r3, [pc, #548]	; (8002d64 <init_Hardware+0x298>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	71da      	strb	r2, [r3, #7]

    // Se carga la configuración.
	GPIO_Config(&handlerCLK);
 8002b42:	4888      	ldr	r0, [pc, #544]	; (8002d64 <init_Hardware+0x298>)
 8002b44:	f7ff fa0c 	bl	8001f60 <GPIO_Config>

	// Se configura la interrupcion
    handlerExtiCLK.edgeType								= EXTERNAL_INTERRUPT_FALLING_EDGE; //flancos de bajada
 8002b48:	4b88      	ldr	r3, [pc, #544]	; (8002d6c <init_Hardware+0x2a0>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	711a      	strb	r2, [r3, #4]
    handlerExtiCLK.pGPIOHandler							= &handlerCLK;
 8002b4e:	4b87      	ldr	r3, [pc, #540]	; (8002d6c <init_Hardware+0x2a0>)
 8002b50:	4a84      	ldr	r2, [pc, #528]	; (8002d64 <init_Hardware+0x298>)
 8002b52:	601a      	str	r2, [r3, #0]

    // Cargando la configuracion del EXTI
    extInt_Config(&handlerExtiCLK);
 8002b54:	4885      	ldr	r0, [pc, #532]	; (8002d6c <init_Hardware+0x2a0>)
 8002b56:	f7fe fa03 	bl	8000f60 <extInt_Config>


	/* Se configuran las salidas del encoder */
	// Configuración para la salida del DATA (DT) del encoder.
	handlerPinDT.pGPIOx									= GPIOC;
 8002b5a:	4b85      	ldr	r3, [pc, #532]	; (8002d70 <init_Hardware+0x2a4>)
 8002b5c:	4a82      	ldr	r2, [pc, #520]	; (8002d68 <init_Hardware+0x29c>)
 8002b5e:	601a      	str	r2, [r3, #0]
	handlerPinDT.GPIO_PinConfig.GPIO_PinNumber			= PIN_12;
 8002b60:	4b83      	ldr	r3, [pc, #524]	; (8002d70 <init_Hardware+0x2a4>)
 8002b62:	220c      	movs	r2, #12
 8002b64:	711a      	strb	r2, [r3, #4]
	handlerPinDT.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_IN;
 8002b66:	4b82      	ldr	r3, [pc, #520]	; (8002d70 <init_Hardware+0x2a4>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	715a      	strb	r2, [r3, #5]
	handlerPinDT.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_NOTHING;
 8002b6c:	4b80      	ldr	r3, [pc, #512]	; (8002d70 <init_Hardware+0x2a4>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	71da      	strb	r2, [r3, #7]

    // Se carga la configuración.
	GPIO_Config(&handlerPinDT);
 8002b72:	487f      	ldr	r0, [pc, #508]	; (8002d70 <init_Hardware+0x2a4>)
 8002b74:	f7ff f9f4 	bl	8001f60 <GPIO_Config>

	/* Se configuran las salidas del encoder */
	// Configuración para el botón (sw) del encoder.
	handlerButtonSW.pGPIOx									= GPIOA;
 8002b78:	4b7e      	ldr	r3, [pc, #504]	; (8002d74 <init_Hardware+0x2a8>)
 8002b7a:	4a78      	ldr	r2, [pc, #480]	; (8002d5c <init_Hardware+0x290>)
 8002b7c:	601a      	str	r2, [r3, #0]
	handlerButtonSW.GPIO_PinConfig.GPIO_PinNumber			= PIN_15;
 8002b7e:	4b7d      	ldr	r3, [pc, #500]	; (8002d74 <init_Hardware+0x2a8>)
 8002b80:	220f      	movs	r2, #15
 8002b82:	711a      	strb	r2, [r3, #4]
	handlerButtonSW.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_IN;
 8002b84:	4b7b      	ldr	r3, [pc, #492]	; (8002d74 <init_Hardware+0x2a8>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	715a      	strb	r2, [r3, #5]
	handlerButtonSW.GPIO_PinConfig.GPIO_PinOPType			= GPIO_OTYPE_PUSHPULL;
 8002b8a:	4b7a      	ldr	r3, [pc, #488]	; (8002d74 <init_Hardware+0x2a8>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	721a      	strb	r2, [r3, #8]
	handlerButtonSW.GPIO_PinConfig.GPIO_PinPuPdControl		= GPIO_PUPDR_PULLUP;
 8002b90:	4b78      	ldr	r3, [pc, #480]	; (8002d74 <init_Hardware+0x2a8>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	71da      	strb	r2, [r3, #7]
	handlerButtonSW.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_FAST;
 8002b96:	4b77      	ldr	r3, [pc, #476]	; (8002d74 <init_Hardware+0x2a8>)
 8002b98:	2202      	movs	r2, #2
 8002b9a:	719a      	strb	r2, [r3, #6]
	// Se carga lo hecho sobre el GPIO.
	GPIO_Config(&handlerButtonSW);
 8002b9c:	4875      	ldr	r0, [pc, #468]	; (8002d74 <init_Hardware+0x2a8>)
 8002b9e:	f7ff f9df 	bl	8001f60 <GPIO_Config>

    handlerExtiButtonSW.edgeType								= EXTERNAL_INTERRUPT_FALLING_EDGE; //flancos de bajada
 8002ba2:	4b75      	ldr	r3, [pc, #468]	; (8002d78 <init_Hardware+0x2ac>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	711a      	strb	r2, [r3, #4]
    handlerExtiButtonSW.pGPIOHandler							= &handlerButtonSW;
 8002ba8:	4b73      	ldr	r3, [pc, #460]	; (8002d78 <init_Hardware+0x2ac>)
 8002baa:	4a72      	ldr	r2, [pc, #456]	; (8002d74 <init_Hardware+0x2a8>)
 8002bac:	601a      	str	r2, [r3, #0]
    // Cargando la configuracion del EXTI
    extInt_Config(&handlerExtiButtonSW);
 8002bae:	4872      	ldr	r0, [pc, #456]	; (8002d78 <init_Hardware+0x2ac>)
 8002bb0:	f7fe f9d6 	bl	8000f60 <extInt_Config>

	/* Configuracion de los SEGMENTOS del DISPLAY */
	handlerPin_a.pGPIOx										= GPIOA;
 8002bb4:	4b71      	ldr	r3, [pc, #452]	; (8002d7c <init_Hardware+0x2b0>)
 8002bb6:	4a69      	ldr	r2, [pc, #420]	; (8002d5c <init_Hardware+0x290>)
 8002bb8:	601a      	str	r2, [r3, #0]
	handlerPin_a.GPIO_PinConfig.GPIO_PinNumber				= PIN_4;
 8002bba:	4b70      	ldr	r3, [pc, #448]	; (8002d7c <init_Hardware+0x2b0>)
 8002bbc:	2204      	movs	r2, #4
 8002bbe:	711a      	strb	r2, [r3, #4]
	handlerPin_a.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 8002bc0:	4b6e      	ldr	r3, [pc, #440]	; (8002d7c <init_Hardware+0x2b0>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	715a      	strb	r2, [r3, #5]
	handlerPin_a.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8002bc6:	4b6d      	ldr	r3, [pc, #436]	; (8002d7c <init_Hardware+0x2b0>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	721a      	strb	r2, [r3, #8]
	handlerPin_a.GPIO_PinConfig.GPIO_PinPuPdControl			= GPIO_PUPDR_NOTHING;
 8002bcc:	4b6b      	ldr	r3, [pc, #428]	; (8002d7c <init_Hardware+0x2b0>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	71da      	strb	r2, [r3, #7]
	handlerPin_a.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_FAST;
 8002bd2:	4b6a      	ldr	r3, [pc, #424]	; (8002d7c <init_Hardware+0x2b0>)
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	719a      	strb	r2, [r3, #6]

	GPIO_Config(&handlerPin_a);
 8002bd8:	4868      	ldr	r0, [pc, #416]	; (8002d7c <init_Hardware+0x2b0>)
 8002bda:	f7ff f9c1 	bl	8001f60 <GPIO_Config>

	/* Configuracion de los SEGMENTOS del DISPLAY */
	handlerPin_b.pGPIOx										= GPIOA;
 8002bde:	4b68      	ldr	r3, [pc, #416]	; (8002d80 <init_Hardware+0x2b4>)
 8002be0:	4a5e      	ldr	r2, [pc, #376]	; (8002d5c <init_Hardware+0x290>)
 8002be2:	601a      	str	r2, [r3, #0]
	handlerPin_b.GPIO_PinConfig.GPIO_PinNumber				= PIN_1;
 8002be4:	4b66      	ldr	r3, [pc, #408]	; (8002d80 <init_Hardware+0x2b4>)
 8002be6:	2201      	movs	r2, #1
 8002be8:	711a      	strb	r2, [r3, #4]
	handlerPin_b.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 8002bea:	4b65      	ldr	r3, [pc, #404]	; (8002d80 <init_Hardware+0x2b4>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	715a      	strb	r2, [r3, #5]
	handlerPin_b.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8002bf0:	4b63      	ldr	r3, [pc, #396]	; (8002d80 <init_Hardware+0x2b4>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	721a      	strb	r2, [r3, #8]
	handlerPin_b.GPIO_PinConfig.GPIO_PinPuPdControl			= GPIO_PUPDR_NOTHING;
 8002bf6:	4b62      	ldr	r3, [pc, #392]	; (8002d80 <init_Hardware+0x2b4>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	71da      	strb	r2, [r3, #7]
	handlerPin_b.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_FAST;
 8002bfc:	4b60      	ldr	r3, [pc, #384]	; (8002d80 <init_Hardware+0x2b4>)
 8002bfe:	2202      	movs	r2, #2
 8002c00:	719a      	strb	r2, [r3, #6]

	GPIO_Config(&handlerPin_b);
 8002c02:	485f      	ldr	r0, [pc, #380]	; (8002d80 <init_Hardware+0x2b4>)
 8002c04:	f7ff f9ac 	bl	8001f60 <GPIO_Config>

	/* Configuracion de los SEGMENTOS del DISPLAY */
	handlerPin_c.pGPIOx										= GPIOA;
 8002c08:	4b5e      	ldr	r3, [pc, #376]	; (8002d84 <init_Hardware+0x2b8>)
 8002c0a:	4a54      	ldr	r2, [pc, #336]	; (8002d5c <init_Hardware+0x290>)
 8002c0c:	601a      	str	r2, [r3, #0]
	handlerPin_c.GPIO_PinConfig.GPIO_PinNumber				= PIN_10;
 8002c0e:	4b5d      	ldr	r3, [pc, #372]	; (8002d84 <init_Hardware+0x2b8>)
 8002c10:	220a      	movs	r2, #10
 8002c12:	711a      	strb	r2, [r3, #4]
	handlerPin_c.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 8002c14:	4b5b      	ldr	r3, [pc, #364]	; (8002d84 <init_Hardware+0x2b8>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	715a      	strb	r2, [r3, #5]
	handlerPin_c.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8002c1a:	4b5a      	ldr	r3, [pc, #360]	; (8002d84 <init_Hardware+0x2b8>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	721a      	strb	r2, [r3, #8]
	handlerPin_c.GPIO_PinConfig.GPIO_PinPuPdControl			= GPIO_PUPDR_NOTHING;
 8002c20:	4b58      	ldr	r3, [pc, #352]	; (8002d84 <init_Hardware+0x2b8>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	71da      	strb	r2, [r3, #7]
	handlerPin_c.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_FAST;
 8002c26:	4b57      	ldr	r3, [pc, #348]	; (8002d84 <init_Hardware+0x2b8>)
 8002c28:	2202      	movs	r2, #2
 8002c2a:	719a      	strb	r2, [r3, #6]

	GPIO_Config(&handlerPin_c);
 8002c2c:	4855      	ldr	r0, [pc, #340]	; (8002d84 <init_Hardware+0x2b8>)
 8002c2e:	f7ff f997 	bl	8001f60 <GPIO_Config>

	/* Configuracion de los SEGMENTOS del DISPLAY */
	handlerPin_d.pGPIOx										= GPIOB;
 8002c32:	4b55      	ldr	r3, [pc, #340]	; (8002d88 <init_Hardware+0x2bc>)
 8002c34:	4a55      	ldr	r2, [pc, #340]	; (8002d8c <init_Hardware+0x2c0>)
 8002c36:	601a      	str	r2, [r3, #0]
	handlerPin_d.GPIO_PinConfig.GPIO_PinNumber				= PIN_3;
 8002c38:	4b53      	ldr	r3, [pc, #332]	; (8002d88 <init_Hardware+0x2bc>)
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	711a      	strb	r2, [r3, #4]
	handlerPin_d.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 8002c3e:	4b52      	ldr	r3, [pc, #328]	; (8002d88 <init_Hardware+0x2bc>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	715a      	strb	r2, [r3, #5]
	handlerPin_d.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8002c44:	4b50      	ldr	r3, [pc, #320]	; (8002d88 <init_Hardware+0x2bc>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	721a      	strb	r2, [r3, #8]
	handlerPin_d.GPIO_PinConfig.GPIO_PinPuPdControl			= GPIO_PUPDR_NOTHING;
 8002c4a:	4b4f      	ldr	r3, [pc, #316]	; (8002d88 <init_Hardware+0x2bc>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	71da      	strb	r2, [r3, #7]
	handlerPin_d.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_FAST;
 8002c50:	4b4d      	ldr	r3, [pc, #308]	; (8002d88 <init_Hardware+0x2bc>)
 8002c52:	2202      	movs	r2, #2
 8002c54:	719a      	strb	r2, [r3, #6]

	GPIO_Config(&handlerPin_d);
 8002c56:	484c      	ldr	r0, [pc, #304]	; (8002d88 <init_Hardware+0x2bc>)
 8002c58:	f7ff f982 	bl	8001f60 <GPIO_Config>

	/* Configuracion de los SEGMENTOS del DISPLAY */
	handlerPin_e.pGPIOx										= GPIOB;
 8002c5c:	4b4c      	ldr	r3, [pc, #304]	; (8002d90 <init_Hardware+0x2c4>)
 8002c5e:	4a4b      	ldr	r2, [pc, #300]	; (8002d8c <init_Hardware+0x2c0>)
 8002c60:	601a      	str	r2, [r3, #0]
	handlerPin_e.GPIO_PinConfig.GPIO_PinNumber				= PIN_4;
 8002c62:	4b4b      	ldr	r3, [pc, #300]	; (8002d90 <init_Hardware+0x2c4>)
 8002c64:	2204      	movs	r2, #4
 8002c66:	711a      	strb	r2, [r3, #4]
	handlerPin_e.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 8002c68:	4b49      	ldr	r3, [pc, #292]	; (8002d90 <init_Hardware+0x2c4>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	715a      	strb	r2, [r3, #5]
	handlerPin_e.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8002c6e:	4b48      	ldr	r3, [pc, #288]	; (8002d90 <init_Hardware+0x2c4>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	721a      	strb	r2, [r3, #8]
	handlerPin_e.GPIO_PinConfig.GPIO_PinPuPdControl			= GPIO_PUPDR_NOTHING;
 8002c74:	4b46      	ldr	r3, [pc, #280]	; (8002d90 <init_Hardware+0x2c4>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	71da      	strb	r2, [r3, #7]
	handlerPin_e.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_FAST;
 8002c7a:	4b45      	ldr	r3, [pc, #276]	; (8002d90 <init_Hardware+0x2c4>)
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	719a      	strb	r2, [r3, #6]

	GPIO_Config(&handlerPin_e);
 8002c80:	4843      	ldr	r0, [pc, #268]	; (8002d90 <init_Hardware+0x2c4>)
 8002c82:	f7ff f96d 	bl	8001f60 <GPIO_Config>

	/* Configuracion de los SEGMENTOS del DISPLAY */
	handlerPin_f.pGPIOx										= GPIOC;
 8002c86:	4b43      	ldr	r3, [pc, #268]	; (8002d94 <init_Hardware+0x2c8>)
 8002c88:	4a37      	ldr	r2, [pc, #220]	; (8002d68 <init_Hardware+0x29c>)
 8002c8a:	601a      	str	r2, [r3, #0]
	handlerPin_f.GPIO_PinConfig.GPIO_PinNumber				= PIN_2;
 8002c8c:	4b41      	ldr	r3, [pc, #260]	; (8002d94 <init_Hardware+0x2c8>)
 8002c8e:	2202      	movs	r2, #2
 8002c90:	711a      	strb	r2, [r3, #4]
	handlerPin_f.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 8002c92:	4b40      	ldr	r3, [pc, #256]	; (8002d94 <init_Hardware+0x2c8>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	715a      	strb	r2, [r3, #5]
	handlerPin_f.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8002c98:	4b3e      	ldr	r3, [pc, #248]	; (8002d94 <init_Hardware+0x2c8>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	721a      	strb	r2, [r3, #8]
	handlerPin_f.GPIO_PinConfig.GPIO_PinPuPdControl			= GPIO_PUPDR_NOTHING;
 8002c9e:	4b3d      	ldr	r3, [pc, #244]	; (8002d94 <init_Hardware+0x2c8>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	71da      	strb	r2, [r3, #7]
	handlerPin_f.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_FAST;
 8002ca4:	4b3b      	ldr	r3, [pc, #236]	; (8002d94 <init_Hardware+0x2c8>)
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	719a      	strb	r2, [r3, #6]

	GPIO_Config(&handlerPin_f);
 8002caa:	483a      	ldr	r0, [pc, #232]	; (8002d94 <init_Hardware+0x2c8>)
 8002cac:	f7ff f958 	bl	8001f60 <GPIO_Config>

	/* Configuracion de los SEGMENTOS del DISPLAY */
	handlerPin_g.pGPIOx										= GPIOB;
 8002cb0:	4b39      	ldr	r3, [pc, #228]	; (8002d98 <init_Hardware+0x2cc>)
 8002cb2:	4a36      	ldr	r2, [pc, #216]	; (8002d8c <init_Hardware+0x2c0>)
 8002cb4:	601a      	str	r2, [r3, #0]
	handlerPin_g.GPIO_PinConfig.GPIO_PinNumber				= PIN_5;
 8002cb6:	4b38      	ldr	r3, [pc, #224]	; (8002d98 <init_Hardware+0x2cc>)
 8002cb8:	2205      	movs	r2, #5
 8002cba:	711a      	strb	r2, [r3, #4]
	handlerPin_g.GPIO_PinConfig.GPIO_PinMode				= GPIO_MODE_OUT;
 8002cbc:	4b36      	ldr	r3, [pc, #216]	; (8002d98 <init_Hardware+0x2cc>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	715a      	strb	r2, [r3, #5]
	handlerPin_g.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8002cc2:	4b35      	ldr	r3, [pc, #212]	; (8002d98 <init_Hardware+0x2cc>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	721a      	strb	r2, [r3, #8]
	handlerPin_g.GPIO_PinConfig.GPIO_PinPuPdControl			= GPIO_PUPDR_NOTHING;
 8002cc8:	4b33      	ldr	r3, [pc, #204]	; (8002d98 <init_Hardware+0x2cc>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	71da      	strb	r2, [r3, #7]
	handlerPin_g.GPIO_PinConfig.GPIO_PinSpeed				= GPIO_OSPEED_FAST;
 8002cce:	4b32      	ldr	r3, [pc, #200]	; (8002d98 <init_Hardware+0x2cc>)
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	719a      	strb	r2, [r3, #6]

	GPIO_Config(&handlerPin_g);
 8002cd4:	4830      	ldr	r0, [pc, #192]	; (8002d98 <init_Hardware+0x2cc>)
 8002cd6:	f7ff f943 	bl	8001f60 <GPIO_Config>

	/* Configuracion de los switcheos de los transistores */
	handlerDisplay_Izq.pGPIOx										= GPIOA;
 8002cda:	4b30      	ldr	r3, [pc, #192]	; (8002d9c <init_Hardware+0x2d0>)
 8002cdc:	4a1f      	ldr	r2, [pc, #124]	; (8002d5c <init_Hardware+0x290>)
 8002cde:	601a      	str	r2, [r3, #0]
	handlerDisplay_Izq.GPIO_PinConfig.GPIO_PinNumber				= PIN_12;
 8002ce0:	4b2e      	ldr	r3, [pc, #184]	; (8002d9c <init_Hardware+0x2d0>)
 8002ce2:	220c      	movs	r2, #12
 8002ce4:	711a      	strb	r2, [r3, #4]
	handlerDisplay_Izq.GPIO_PinConfig.GPIO_PinMode					= GPIO_MODE_OUT;
 8002ce6:	4b2d      	ldr	r3, [pc, #180]	; (8002d9c <init_Hardware+0x2d0>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	715a      	strb	r2, [r3, #5]
	handlerDisplay_Izq.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8002cec:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <init_Hardware+0x2d0>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	721a      	strb	r2, [r3, #8]
	handlerDisplay_Izq.GPIO_PinConfig.GPIO_PinPuPdControl			= GPIO_PUPDR_NOTHING;
 8002cf2:	4b2a      	ldr	r3, [pc, #168]	; (8002d9c <init_Hardware+0x2d0>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	71da      	strb	r2, [r3, #7]
	handlerDisplay_Izq.GPIO_PinConfig.GPIO_PinSpeed					= GPIO_OSPEED_FAST;
 8002cf8:	4b28      	ldr	r3, [pc, #160]	; (8002d9c <init_Hardware+0x2d0>)
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	719a      	strb	r2, [r3, #6]

	GPIO_Config(&handlerDisplay_Izq);
 8002cfe:	4827      	ldr	r0, [pc, #156]	; (8002d9c <init_Hardware+0x2d0>)
 8002d00:	f7ff f92e 	bl	8001f60 <GPIO_Config>

	/* Configuracion de los switcheos de los transistores */
	handlerDisplay_Der.pGPIOx										= GPIOA;
 8002d04:	4b26      	ldr	r3, [pc, #152]	; (8002da0 <init_Hardware+0x2d4>)
 8002d06:	4a15      	ldr	r2, [pc, #84]	; (8002d5c <init_Hardware+0x290>)
 8002d08:	601a      	str	r2, [r3, #0]
	handlerDisplay_Der.GPIO_PinConfig.GPIO_PinNumber				= PIN_11;
 8002d0a:	4b25      	ldr	r3, [pc, #148]	; (8002da0 <init_Hardware+0x2d4>)
 8002d0c:	220b      	movs	r2, #11
 8002d0e:	711a      	strb	r2, [r3, #4]
	handlerDisplay_Der.GPIO_PinConfig.GPIO_PinMode					= GPIO_MODE_OUT;
 8002d10:	4b23      	ldr	r3, [pc, #140]	; (8002da0 <init_Hardware+0x2d4>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	715a      	strb	r2, [r3, #5]
	handlerDisplay_Der.GPIO_PinConfig.GPIO_PinOPType				= GPIO_OTYPE_PUSHPULL;
 8002d16:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <init_Hardware+0x2d4>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	721a      	strb	r2, [r3, #8]
	handlerDisplay_Der.GPIO_PinConfig.GPIO_PinPuPdControl			= GPIO_PUPDR_NOTHING;
 8002d1c:	4b20      	ldr	r3, [pc, #128]	; (8002da0 <init_Hardware+0x2d4>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	71da      	strb	r2, [r3, #7]
	handlerDisplay_Der.GPIO_PinConfig.GPIO_PinSpeed				    = GPIO_OSPEED_FAST;
 8002d22:	4b1f      	ldr	r3, [pc, #124]	; (8002da0 <init_Hardware+0x2d4>)
 8002d24:	2202      	movs	r2, #2
 8002d26:	719a      	strb	r2, [r3, #6]

	GPIO_Config(&handlerDisplay_Der);
 8002d28:	481d      	ldr	r0, [pc, #116]	; (8002da0 <init_Hardware+0x2d4>)
 8002d2a:	f7ff f919 	bl	8001f60 <GPIO_Config>

	//Configuración del timer para el display.
	// Se selecciona el TIMER que se elegió trabajar en el programa.

	handlerDisplayTimer.ptrTIMx 								= TIM5;
 8002d2e:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <init_Hardware+0x2d8>)
 8002d30:	4a1d      	ldr	r2, [pc, #116]	; (8002da8 <init_Hardware+0x2dc>)
 8002d32:	601a      	str	r2, [r3, #0]
	handlerDisplayTimer.TIMx_Config.TIMx_mode 					= BTIMER_MODE_UP;
 8002d34:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <init_Hardware+0x2d8>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	711a      	strb	r2, [r3, #4]
	handlerDisplayTimer.TIMx_Config.TIMx_speed 					= BTIMER_SPEED_1ms;
 8002d3a:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <init_Hardware+0x2d8>)
 8002d3c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8002d40:	609a      	str	r2, [r3, #8]
	handlerDisplayTimer.TIMx_Config.TIMx_period 				= 10;
 8002d42:	4b18      	ldr	r3, [pc, #96]	; (8002da4 <init_Hardware+0x2d8>)
 8002d44:	220a      	movs	r2, #10
 8002d46:	60da      	str	r2, [r3, #12]
	handlerDisplayTimer.TIMx_Config.TIMx_interruptEnable		= BTIMER_INTERRUPT_ENABLE;
 8002d48:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <init_Hardware+0x2d8>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	741a      	strb	r2, [r3, #16]

	BasicTimer_Config(&handlerDisplayTimer);
 8002d4e:	4815      	ldr	r0, [pc, #84]	; (8002da4 <init_Hardware+0x2d8>)
 8002d50:	f7fd fff6 	bl	8000d40 <BasicTimer_Config>

}// Termina el init_Hardware
 8002d54:	bf00      	nop
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20000200 	.word	0x20000200
 8002d5c:	40020000 	.word	0x40020000
 8002d60:	2000020c 	.word	0x2000020c
 8002d64:	2000022c 	.word	0x2000022c
 8002d68:	40020800 	.word	0x40020800
 8002d6c:	20000244 	.word	0x20000244
 8002d70:	20000220 	.word	0x20000220
 8002d74:	20000238 	.word	0x20000238
 8002d78:	2000024c 	.word	0x2000024c
 8002d7c:	20000270 	.word	0x20000270
 8002d80:	2000027c 	.word	0x2000027c
 8002d84:	20000288 	.word	0x20000288
 8002d88:	20000294 	.word	0x20000294
 8002d8c:	40020400 	.word	0x40020400
 8002d90:	200002a0 	.word	0x200002a0
 8002d94:	200002ac 	.word	0x200002ac
 8002d98:	200002b8 	.word	0x200002b8
 8002d9c:	20000258 	.word	0x20000258
 8002da0:	20000264 	.word	0x20000264
 8002da4:	200002c4 	.word	0x200002c4
 8002da8:	40000c00 	.word	0x40000c00

08002dac <BasicTimer2_Callback>:

// Basic timer sobre el que está puesto el led de estado.
void BasicTimer2_Callback(void){
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handlerBlinkyPin);
 8002db0:	4802      	ldr	r0, [pc, #8]	; (8002dbc <BasicTimer2_Callback+0x10>)
 8002db2:	f7ff fa40 	bl	8002236 <GPIOxTooglePin>
}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000200 	.word	0x20000200

08002dc0 <BasicTimer5_Callback>:

// Se definen los switcheos de los transistores dentro del timer para los display.
void BasicTimer5_Callback(void){
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handlerDisplay_Der);
 8002dc4:	4803      	ldr	r0, [pc, #12]	; (8002dd4 <BasicTimer5_Callback+0x14>)
 8002dc6:	f7ff fa36 	bl	8002236 <GPIOxTooglePin>
	GPIOxTooglePin(&handlerDisplay_Izq);
 8002dca:	4803      	ldr	r0, [pc, #12]	; (8002dd8 <BasicTimer5_Callback+0x18>)
 8002dcc:	f7ff fa33 	bl	8002236 <GPIOxTooglePin>
}
 8002dd0:	bf00      	nop
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20000264 	.word	0x20000264
 8002dd8:	20000258 	.word	0x20000258

08002ddc <callback_extInt11>:

// Interrupción de la señal de reloj.
void callback_extInt11(void){
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
	flagClock = 1;
 8002de0:	4b03      	ldr	r3, [pc, #12]	; (8002df0 <callback_extInt11+0x14>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	701a      	strb	r2, [r3, #0]
}
 8002de6:	bf00      	nop
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	20000254 	.word	0x20000254

08002df4 <callback_extInt15>:

// Interrupción para definir el modo.
void callback_extInt15(void){
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
	flagButtonSW ^= 1;
 8002df8:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <callback_extInt15+0x1c>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	f083 0301 	eor.w	r3, r3, #1
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	4b03      	ldr	r3, [pc, #12]	; (8002e10 <callback_extInt15+0x1c>)
 8002e04:	701a      	strb	r2, [r3, #0]
}
 8002e06:	bf00      	nop
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	20000255 	.word	0x20000255

08002e14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
	return 1;
 8002e18:	2301      	movs	r3, #1
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <_kill>:

int _kill(int pid, int sig)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e2c:	f000 f8dc 	bl	8002fe8 <__errno>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2216      	movs	r2, #22
 8002e34:	601a      	str	r2, [r3, #0]
	return -1;
 8002e36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <_exit>:

void _exit (int status)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff ffe7 	bl	8002e22 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e54:	e7fe      	b.n	8002e54 <_exit+0x12>

08002e56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b086      	sub	sp, #24
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	e00a      	b.n	8002e7e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e68:	f3af 8000 	nop.w
 8002e6c:	4601      	mov	r1, r0
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	60ba      	str	r2, [r7, #8]
 8002e74:	b2ca      	uxtb	r2, r1
 8002e76:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	dbf0      	blt.n	8002e68 <_read+0x12>
	}

return len;
 8002e86:	687b      	ldr	r3, [r7, #4]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	e009      	b.n	8002eb6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	60ba      	str	r2, [r7, #8]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	dbf1      	blt.n	8002ea2 <_write+0x12>
	}
	return len;
 8002ebe:	687b      	ldr	r3, [r7, #4]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <_close>:

int _close(int file)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
	return -1;
 8002ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr

08002ede <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eee:	605a      	str	r2, [r3, #4]
	return 0;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr

08002efc <_isatty>:

int _isatty(int file)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	return 1;
 8002f04:	2301      	movs	r3, #1
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
	return 0;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f30:	4a14      	ldr	r2, [pc, #80]	; (8002f84 <_sbrk+0x5c>)
 8002f32:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <_sbrk+0x60>)
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f3c:	4b13      	ldr	r3, [pc, #76]	; (8002f8c <_sbrk+0x64>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d102      	bne.n	8002f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f44:	4b11      	ldr	r3, [pc, #68]	; (8002f8c <_sbrk+0x64>)
 8002f46:	4a12      	ldr	r2, [pc, #72]	; (8002f90 <_sbrk+0x68>)
 8002f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f4a:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <_sbrk+0x64>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d207      	bcs.n	8002f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f58:	f000 f846 	bl	8002fe8 <__errno>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	220c      	movs	r2, #12
 8002f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f66:	e009      	b.n	8002f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f68:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <_sbrk+0x64>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f6e:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <_sbrk+0x64>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	4a05      	ldr	r2, [pc, #20]	; (8002f8c <_sbrk+0x64>)
 8002f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20020000 	.word	0x20020000
 8002f88:	00000400 	.word	0x00000400
 8002f8c:	200002d8 	.word	0x200002d8
 8002f90:	200002f0 	.word	0x200002f0

08002f94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f94:	480d      	ldr	r0, [pc, #52]	; (8002fcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f96:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f98:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f9c:	480c      	ldr	r0, [pc, #48]	; (8002fd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f9e:	490d      	ldr	r1, [pc, #52]	; (8002fd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fa0:	4a0d      	ldr	r2, [pc, #52]	; (8002fd8 <LoopForever+0xe>)
  movs r3, #0
 8002fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fa4:	e002      	b.n	8002fac <LoopCopyDataInit>

08002fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002faa:	3304      	adds	r3, #4

08002fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fb0:	d3f9      	bcc.n	8002fa6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fb2:	4a0a      	ldr	r2, [pc, #40]	; (8002fdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fb4:	4c0a      	ldr	r4, [pc, #40]	; (8002fe0 <LoopForever+0x16>)
  movs r3, #0
 8002fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fb8:	e001      	b.n	8002fbe <LoopFillZerobss>

08002fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fbc:	3204      	adds	r2, #4

08002fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fc0:	d3fb      	bcc.n	8002fba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002fc2:	f000 f817 	bl	8002ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fc6:	f7ff f96d 	bl	80022a4 <main>

08002fca <LoopForever>:

LoopForever:
    b LoopForever
 8002fca:	e7fe      	b.n	8002fca <LoopForever>
  ldr   r0, =_estack
 8002fcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fd4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002fd8:	08007d3c 	.word	0x08007d3c
  ldr r2, =_sbss
 8002fdc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002fe0:	200002ec 	.word	0x200002ec

08002fe4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fe4:	e7fe      	b.n	8002fe4 <ADC_IRQHandler>
	...

08002fe8 <__errno>:
 8002fe8:	4b01      	ldr	r3, [pc, #4]	; (8002ff0 <__errno+0x8>)
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	20000000 	.word	0x20000000

08002ff4 <__libc_init_array>:
 8002ff4:	b570      	push	{r4, r5, r6, lr}
 8002ff6:	4d0d      	ldr	r5, [pc, #52]	; (800302c <__libc_init_array+0x38>)
 8002ff8:	4c0d      	ldr	r4, [pc, #52]	; (8003030 <__libc_init_array+0x3c>)
 8002ffa:	1b64      	subs	r4, r4, r5
 8002ffc:	10a4      	asrs	r4, r4, #2
 8002ffe:	2600      	movs	r6, #0
 8003000:	42a6      	cmp	r6, r4
 8003002:	d109      	bne.n	8003018 <__libc_init_array+0x24>
 8003004:	4d0b      	ldr	r5, [pc, #44]	; (8003034 <__libc_init_array+0x40>)
 8003006:	4c0c      	ldr	r4, [pc, #48]	; (8003038 <__libc_init_array+0x44>)
 8003008:	f004 fc34 	bl	8007874 <_init>
 800300c:	1b64      	subs	r4, r4, r5
 800300e:	10a4      	asrs	r4, r4, #2
 8003010:	2600      	movs	r6, #0
 8003012:	42a6      	cmp	r6, r4
 8003014:	d105      	bne.n	8003022 <__libc_init_array+0x2e>
 8003016:	bd70      	pop	{r4, r5, r6, pc}
 8003018:	f855 3b04 	ldr.w	r3, [r5], #4
 800301c:	4798      	blx	r3
 800301e:	3601      	adds	r6, #1
 8003020:	e7ee      	b.n	8003000 <__libc_init_array+0xc>
 8003022:	f855 3b04 	ldr.w	r3, [r5], #4
 8003026:	4798      	blx	r3
 8003028:	3601      	adds	r6, #1
 800302a:	e7f2      	b.n	8003012 <__libc_init_array+0x1e>
 800302c:	08007d34 	.word	0x08007d34
 8003030:	08007d34 	.word	0x08007d34
 8003034:	08007d34 	.word	0x08007d34
 8003038:	08007d38 	.word	0x08007d38

0800303c <memset>:
 800303c:	4402      	add	r2, r0
 800303e:	4603      	mov	r3, r0
 8003040:	4293      	cmp	r3, r2
 8003042:	d100      	bne.n	8003046 <memset+0xa>
 8003044:	4770      	bx	lr
 8003046:	f803 1b01 	strb.w	r1, [r3], #1
 800304a:	e7f9      	b.n	8003040 <memset+0x4>

0800304c <__cvt>:
 800304c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003050:	b088      	sub	sp, #32
 8003052:	2b00      	cmp	r3, #0
 8003054:	461f      	mov	r7, r3
 8003056:	4614      	mov	r4, r2
 8003058:	bfb8      	it	lt
 800305a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800305e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003060:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003062:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003066:	bfb6      	itet	lt
 8003068:	461f      	movlt	r7, r3
 800306a:	2300      	movge	r3, #0
 800306c:	232d      	movlt	r3, #45	; 0x2d
 800306e:	7013      	strb	r3, [r2, #0]
 8003070:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003072:	f023 0820 	bic.w	r8, r3, #32
 8003076:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800307a:	d005      	beq.n	8003088 <__cvt+0x3c>
 800307c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003080:	d100      	bne.n	8003084 <__cvt+0x38>
 8003082:	3501      	adds	r5, #1
 8003084:	2302      	movs	r3, #2
 8003086:	e000      	b.n	800308a <__cvt+0x3e>
 8003088:	2303      	movs	r3, #3
 800308a:	aa07      	add	r2, sp, #28
 800308c:	9204      	str	r2, [sp, #16]
 800308e:	aa06      	add	r2, sp, #24
 8003090:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003094:	e9cd 3500 	strd	r3, r5, [sp]
 8003098:	4622      	mov	r2, r4
 800309a:	463b      	mov	r3, r7
 800309c:	f001 fd78 	bl	8004b90 <_dtoa_r>
 80030a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80030a4:	4606      	mov	r6, r0
 80030a6:	d102      	bne.n	80030ae <__cvt+0x62>
 80030a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80030aa:	07db      	lsls	r3, r3, #31
 80030ac:	d522      	bpl.n	80030f4 <__cvt+0xa8>
 80030ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80030b2:	eb06 0905 	add.w	r9, r6, r5
 80030b6:	d110      	bne.n	80030da <__cvt+0x8e>
 80030b8:	7833      	ldrb	r3, [r6, #0]
 80030ba:	2b30      	cmp	r3, #48	; 0x30
 80030bc:	d10a      	bne.n	80030d4 <__cvt+0x88>
 80030be:	2200      	movs	r2, #0
 80030c0:	2300      	movs	r3, #0
 80030c2:	4620      	mov	r0, r4
 80030c4:	4639      	mov	r1, r7
 80030c6:	f7fd fd07 	bl	8000ad8 <__aeabi_dcmpeq>
 80030ca:	b918      	cbnz	r0, 80030d4 <__cvt+0x88>
 80030cc:	f1c5 0501 	rsb	r5, r5, #1
 80030d0:	f8ca 5000 	str.w	r5, [sl]
 80030d4:	f8da 3000 	ldr.w	r3, [sl]
 80030d8:	4499      	add	r9, r3
 80030da:	2200      	movs	r2, #0
 80030dc:	2300      	movs	r3, #0
 80030de:	4620      	mov	r0, r4
 80030e0:	4639      	mov	r1, r7
 80030e2:	f7fd fcf9 	bl	8000ad8 <__aeabi_dcmpeq>
 80030e6:	b108      	cbz	r0, 80030ec <__cvt+0xa0>
 80030e8:	f8cd 901c 	str.w	r9, [sp, #28]
 80030ec:	2230      	movs	r2, #48	; 0x30
 80030ee:	9b07      	ldr	r3, [sp, #28]
 80030f0:	454b      	cmp	r3, r9
 80030f2:	d307      	bcc.n	8003104 <__cvt+0xb8>
 80030f4:	9b07      	ldr	r3, [sp, #28]
 80030f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80030f8:	1b9b      	subs	r3, r3, r6
 80030fa:	4630      	mov	r0, r6
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	b008      	add	sp, #32
 8003100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003104:	1c59      	adds	r1, r3, #1
 8003106:	9107      	str	r1, [sp, #28]
 8003108:	701a      	strb	r2, [r3, #0]
 800310a:	e7f0      	b.n	80030ee <__cvt+0xa2>

0800310c <__exponent>:
 800310c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800310e:	4603      	mov	r3, r0
 8003110:	2900      	cmp	r1, #0
 8003112:	bfb8      	it	lt
 8003114:	4249      	neglt	r1, r1
 8003116:	f803 2b02 	strb.w	r2, [r3], #2
 800311a:	bfb4      	ite	lt
 800311c:	222d      	movlt	r2, #45	; 0x2d
 800311e:	222b      	movge	r2, #43	; 0x2b
 8003120:	2909      	cmp	r1, #9
 8003122:	7042      	strb	r2, [r0, #1]
 8003124:	dd2a      	ble.n	800317c <__exponent+0x70>
 8003126:	f10d 0407 	add.w	r4, sp, #7
 800312a:	46a4      	mov	ip, r4
 800312c:	270a      	movs	r7, #10
 800312e:	46a6      	mov	lr, r4
 8003130:	460a      	mov	r2, r1
 8003132:	fb91 f6f7 	sdiv	r6, r1, r7
 8003136:	fb07 1516 	mls	r5, r7, r6, r1
 800313a:	3530      	adds	r5, #48	; 0x30
 800313c:	2a63      	cmp	r2, #99	; 0x63
 800313e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003142:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003146:	4631      	mov	r1, r6
 8003148:	dcf1      	bgt.n	800312e <__exponent+0x22>
 800314a:	3130      	adds	r1, #48	; 0x30
 800314c:	f1ae 0502 	sub.w	r5, lr, #2
 8003150:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003154:	1c44      	adds	r4, r0, #1
 8003156:	4629      	mov	r1, r5
 8003158:	4561      	cmp	r1, ip
 800315a:	d30a      	bcc.n	8003172 <__exponent+0x66>
 800315c:	f10d 0209 	add.w	r2, sp, #9
 8003160:	eba2 020e 	sub.w	r2, r2, lr
 8003164:	4565      	cmp	r5, ip
 8003166:	bf88      	it	hi
 8003168:	2200      	movhi	r2, #0
 800316a:	4413      	add	r3, r2
 800316c:	1a18      	subs	r0, r3, r0
 800316e:	b003      	add	sp, #12
 8003170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003172:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003176:	f804 2f01 	strb.w	r2, [r4, #1]!
 800317a:	e7ed      	b.n	8003158 <__exponent+0x4c>
 800317c:	2330      	movs	r3, #48	; 0x30
 800317e:	3130      	adds	r1, #48	; 0x30
 8003180:	7083      	strb	r3, [r0, #2]
 8003182:	70c1      	strb	r1, [r0, #3]
 8003184:	1d03      	adds	r3, r0, #4
 8003186:	e7f1      	b.n	800316c <__exponent+0x60>

08003188 <_printf_float>:
 8003188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800318c:	b091      	sub	sp, #68	; 0x44
 800318e:	460c      	mov	r4, r1
 8003190:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003194:	4616      	mov	r6, r2
 8003196:	461f      	mov	r7, r3
 8003198:	4605      	mov	r5, r0
 800319a:	f002 fe4d 	bl	8005e38 <_localeconv_r>
 800319e:	6803      	ldr	r3, [r0, #0]
 80031a0:	9309      	str	r3, [sp, #36]	; 0x24
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fd f81c 	bl	80001e0 <strlen>
 80031a8:	2300      	movs	r3, #0
 80031aa:	930e      	str	r3, [sp, #56]	; 0x38
 80031ac:	f8d8 3000 	ldr.w	r3, [r8]
 80031b0:	900a      	str	r0, [sp, #40]	; 0x28
 80031b2:	3307      	adds	r3, #7
 80031b4:	f023 0307 	bic.w	r3, r3, #7
 80031b8:	f103 0208 	add.w	r2, r3, #8
 80031bc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80031c0:	f8d4 b000 	ldr.w	fp, [r4]
 80031c4:	f8c8 2000 	str.w	r2, [r8]
 80031c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031cc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80031d0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80031d4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80031d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80031da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80031dc:	4b9c      	ldr	r3, [pc, #624]	; (8003450 <_printf_float+0x2c8>)
 80031de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031e2:	4640      	mov	r0, r8
 80031e4:	f7fd fcaa 	bl	8000b3c <__aeabi_dcmpun>
 80031e8:	bb70      	cbnz	r0, 8003248 <_printf_float+0xc0>
 80031ea:	4b99      	ldr	r3, [pc, #612]	; (8003450 <_printf_float+0x2c8>)
 80031ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80031ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031f2:	4640      	mov	r0, r8
 80031f4:	f7fd fc84 	bl	8000b00 <__aeabi_dcmple>
 80031f8:	bb30      	cbnz	r0, 8003248 <_printf_float+0xc0>
 80031fa:	2200      	movs	r2, #0
 80031fc:	2300      	movs	r3, #0
 80031fe:	4640      	mov	r0, r8
 8003200:	4651      	mov	r1, sl
 8003202:	f7fd fc73 	bl	8000aec <__aeabi_dcmplt>
 8003206:	b110      	cbz	r0, 800320e <_printf_float+0x86>
 8003208:	232d      	movs	r3, #45	; 0x2d
 800320a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800320e:	4b91      	ldr	r3, [pc, #580]	; (8003454 <_printf_float+0x2cc>)
 8003210:	4891      	ldr	r0, [pc, #580]	; (8003458 <_printf_float+0x2d0>)
 8003212:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003216:	bf94      	ite	ls
 8003218:	4698      	movls	r8, r3
 800321a:	4680      	movhi	r8, r0
 800321c:	2303      	movs	r3, #3
 800321e:	6123      	str	r3, [r4, #16]
 8003220:	f02b 0304 	bic.w	r3, fp, #4
 8003224:	6023      	str	r3, [r4, #0]
 8003226:	f04f 0a00 	mov.w	sl, #0
 800322a:	9700      	str	r7, [sp, #0]
 800322c:	4633      	mov	r3, r6
 800322e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003230:	4621      	mov	r1, r4
 8003232:	4628      	mov	r0, r5
 8003234:	f000 f9d2 	bl	80035dc <_printf_common>
 8003238:	3001      	adds	r0, #1
 800323a:	f040 808f 	bne.w	800335c <_printf_float+0x1d4>
 800323e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003242:	b011      	add	sp, #68	; 0x44
 8003244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003248:	4642      	mov	r2, r8
 800324a:	4653      	mov	r3, sl
 800324c:	4640      	mov	r0, r8
 800324e:	4651      	mov	r1, sl
 8003250:	f7fd fc74 	bl	8000b3c <__aeabi_dcmpun>
 8003254:	b140      	cbz	r0, 8003268 <_printf_float+0xe0>
 8003256:	f1ba 0f00 	cmp.w	sl, #0
 800325a:	bfbc      	itt	lt
 800325c:	232d      	movlt	r3, #45	; 0x2d
 800325e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003262:	487e      	ldr	r0, [pc, #504]	; (800345c <_printf_float+0x2d4>)
 8003264:	4b7e      	ldr	r3, [pc, #504]	; (8003460 <_printf_float+0x2d8>)
 8003266:	e7d4      	b.n	8003212 <_printf_float+0x8a>
 8003268:	6863      	ldr	r3, [r4, #4]
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003270:	d142      	bne.n	80032f8 <_printf_float+0x170>
 8003272:	2306      	movs	r3, #6
 8003274:	6063      	str	r3, [r4, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	9206      	str	r2, [sp, #24]
 800327a:	aa0e      	add	r2, sp, #56	; 0x38
 800327c:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003280:	aa0d      	add	r2, sp, #52	; 0x34
 8003282:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003286:	9203      	str	r2, [sp, #12]
 8003288:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800328c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003290:	6023      	str	r3, [r4, #0]
 8003292:	6863      	ldr	r3, [r4, #4]
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	4642      	mov	r2, r8
 8003298:	4653      	mov	r3, sl
 800329a:	4628      	mov	r0, r5
 800329c:	910b      	str	r1, [sp, #44]	; 0x2c
 800329e:	f7ff fed5 	bl	800304c <__cvt>
 80032a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80032a4:	2947      	cmp	r1, #71	; 0x47
 80032a6:	4680      	mov	r8, r0
 80032a8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80032aa:	d108      	bne.n	80032be <_printf_float+0x136>
 80032ac:	1cc8      	adds	r0, r1, #3
 80032ae:	db02      	blt.n	80032b6 <_printf_float+0x12e>
 80032b0:	6863      	ldr	r3, [r4, #4]
 80032b2:	4299      	cmp	r1, r3
 80032b4:	dd40      	ble.n	8003338 <_printf_float+0x1b0>
 80032b6:	f1a9 0902 	sub.w	r9, r9, #2
 80032ba:	fa5f f989 	uxtb.w	r9, r9
 80032be:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80032c2:	d81f      	bhi.n	8003304 <_printf_float+0x17c>
 80032c4:	3901      	subs	r1, #1
 80032c6:	464a      	mov	r2, r9
 80032c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80032cc:	910d      	str	r1, [sp, #52]	; 0x34
 80032ce:	f7ff ff1d 	bl	800310c <__exponent>
 80032d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80032d4:	1813      	adds	r3, r2, r0
 80032d6:	2a01      	cmp	r2, #1
 80032d8:	4682      	mov	sl, r0
 80032da:	6123      	str	r3, [r4, #16]
 80032dc:	dc02      	bgt.n	80032e4 <_printf_float+0x15c>
 80032de:	6822      	ldr	r2, [r4, #0]
 80032e0:	07d2      	lsls	r2, r2, #31
 80032e2:	d501      	bpl.n	80032e8 <_printf_float+0x160>
 80032e4:	3301      	adds	r3, #1
 80032e6:	6123      	str	r3, [r4, #16]
 80032e8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d09c      	beq.n	800322a <_printf_float+0xa2>
 80032f0:	232d      	movs	r3, #45	; 0x2d
 80032f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032f6:	e798      	b.n	800322a <_printf_float+0xa2>
 80032f8:	2947      	cmp	r1, #71	; 0x47
 80032fa:	d1bc      	bne.n	8003276 <_printf_float+0xee>
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1ba      	bne.n	8003276 <_printf_float+0xee>
 8003300:	2301      	movs	r3, #1
 8003302:	e7b7      	b.n	8003274 <_printf_float+0xec>
 8003304:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003308:	d118      	bne.n	800333c <_printf_float+0x1b4>
 800330a:	2900      	cmp	r1, #0
 800330c:	6863      	ldr	r3, [r4, #4]
 800330e:	dd0b      	ble.n	8003328 <_printf_float+0x1a0>
 8003310:	6121      	str	r1, [r4, #16]
 8003312:	b913      	cbnz	r3, 800331a <_printf_float+0x192>
 8003314:	6822      	ldr	r2, [r4, #0]
 8003316:	07d0      	lsls	r0, r2, #31
 8003318:	d502      	bpl.n	8003320 <_printf_float+0x198>
 800331a:	3301      	adds	r3, #1
 800331c:	440b      	add	r3, r1
 800331e:	6123      	str	r3, [r4, #16]
 8003320:	65a1      	str	r1, [r4, #88]	; 0x58
 8003322:	f04f 0a00 	mov.w	sl, #0
 8003326:	e7df      	b.n	80032e8 <_printf_float+0x160>
 8003328:	b913      	cbnz	r3, 8003330 <_printf_float+0x1a8>
 800332a:	6822      	ldr	r2, [r4, #0]
 800332c:	07d2      	lsls	r2, r2, #31
 800332e:	d501      	bpl.n	8003334 <_printf_float+0x1ac>
 8003330:	3302      	adds	r3, #2
 8003332:	e7f4      	b.n	800331e <_printf_float+0x196>
 8003334:	2301      	movs	r3, #1
 8003336:	e7f2      	b.n	800331e <_printf_float+0x196>
 8003338:	f04f 0967 	mov.w	r9, #103	; 0x67
 800333c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800333e:	4299      	cmp	r1, r3
 8003340:	db05      	blt.n	800334e <_printf_float+0x1c6>
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	6121      	str	r1, [r4, #16]
 8003346:	07d8      	lsls	r0, r3, #31
 8003348:	d5ea      	bpl.n	8003320 <_printf_float+0x198>
 800334a:	1c4b      	adds	r3, r1, #1
 800334c:	e7e7      	b.n	800331e <_printf_float+0x196>
 800334e:	2900      	cmp	r1, #0
 8003350:	bfd4      	ite	le
 8003352:	f1c1 0202 	rsble	r2, r1, #2
 8003356:	2201      	movgt	r2, #1
 8003358:	4413      	add	r3, r2
 800335a:	e7e0      	b.n	800331e <_printf_float+0x196>
 800335c:	6823      	ldr	r3, [r4, #0]
 800335e:	055a      	lsls	r2, r3, #21
 8003360:	d407      	bmi.n	8003372 <_printf_float+0x1ea>
 8003362:	6923      	ldr	r3, [r4, #16]
 8003364:	4642      	mov	r2, r8
 8003366:	4631      	mov	r1, r6
 8003368:	4628      	mov	r0, r5
 800336a:	47b8      	blx	r7
 800336c:	3001      	adds	r0, #1
 800336e:	d12b      	bne.n	80033c8 <_printf_float+0x240>
 8003370:	e765      	b.n	800323e <_printf_float+0xb6>
 8003372:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003376:	f240 80dc 	bls.w	8003532 <_printf_float+0x3aa>
 800337a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800337e:	2200      	movs	r2, #0
 8003380:	2300      	movs	r3, #0
 8003382:	f7fd fba9 	bl	8000ad8 <__aeabi_dcmpeq>
 8003386:	2800      	cmp	r0, #0
 8003388:	d033      	beq.n	80033f2 <_printf_float+0x26a>
 800338a:	4a36      	ldr	r2, [pc, #216]	; (8003464 <_printf_float+0x2dc>)
 800338c:	2301      	movs	r3, #1
 800338e:	4631      	mov	r1, r6
 8003390:	4628      	mov	r0, r5
 8003392:	47b8      	blx	r7
 8003394:	3001      	adds	r0, #1
 8003396:	f43f af52 	beq.w	800323e <_printf_float+0xb6>
 800339a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800339e:	429a      	cmp	r2, r3
 80033a0:	db02      	blt.n	80033a8 <_printf_float+0x220>
 80033a2:	6823      	ldr	r3, [r4, #0]
 80033a4:	07d8      	lsls	r0, r3, #31
 80033a6:	d50f      	bpl.n	80033c8 <_printf_float+0x240>
 80033a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033ac:	4631      	mov	r1, r6
 80033ae:	4628      	mov	r0, r5
 80033b0:	47b8      	blx	r7
 80033b2:	3001      	adds	r0, #1
 80033b4:	f43f af43 	beq.w	800323e <_printf_float+0xb6>
 80033b8:	f04f 0800 	mov.w	r8, #0
 80033bc:	f104 091a 	add.w	r9, r4, #26
 80033c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033c2:	3b01      	subs	r3, #1
 80033c4:	4543      	cmp	r3, r8
 80033c6:	dc09      	bgt.n	80033dc <_printf_float+0x254>
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	079b      	lsls	r3, r3, #30
 80033cc:	f100 8101 	bmi.w	80035d2 <_printf_float+0x44a>
 80033d0:	68e0      	ldr	r0, [r4, #12]
 80033d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80033d4:	4298      	cmp	r0, r3
 80033d6:	bfb8      	it	lt
 80033d8:	4618      	movlt	r0, r3
 80033da:	e732      	b.n	8003242 <_printf_float+0xba>
 80033dc:	2301      	movs	r3, #1
 80033de:	464a      	mov	r2, r9
 80033e0:	4631      	mov	r1, r6
 80033e2:	4628      	mov	r0, r5
 80033e4:	47b8      	blx	r7
 80033e6:	3001      	adds	r0, #1
 80033e8:	f43f af29 	beq.w	800323e <_printf_float+0xb6>
 80033ec:	f108 0801 	add.w	r8, r8, #1
 80033f0:	e7e6      	b.n	80033c0 <_printf_float+0x238>
 80033f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	dc37      	bgt.n	8003468 <_printf_float+0x2e0>
 80033f8:	4a1a      	ldr	r2, [pc, #104]	; (8003464 <_printf_float+0x2dc>)
 80033fa:	2301      	movs	r3, #1
 80033fc:	4631      	mov	r1, r6
 80033fe:	4628      	mov	r0, r5
 8003400:	47b8      	blx	r7
 8003402:	3001      	adds	r0, #1
 8003404:	f43f af1b 	beq.w	800323e <_printf_float+0xb6>
 8003408:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800340c:	4313      	orrs	r3, r2
 800340e:	d102      	bne.n	8003416 <_printf_float+0x28e>
 8003410:	6823      	ldr	r3, [r4, #0]
 8003412:	07d9      	lsls	r1, r3, #31
 8003414:	d5d8      	bpl.n	80033c8 <_printf_float+0x240>
 8003416:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800341a:	4631      	mov	r1, r6
 800341c:	4628      	mov	r0, r5
 800341e:	47b8      	blx	r7
 8003420:	3001      	adds	r0, #1
 8003422:	f43f af0c 	beq.w	800323e <_printf_float+0xb6>
 8003426:	f04f 0900 	mov.w	r9, #0
 800342a:	f104 0a1a 	add.w	sl, r4, #26
 800342e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003430:	425b      	negs	r3, r3
 8003432:	454b      	cmp	r3, r9
 8003434:	dc01      	bgt.n	800343a <_printf_float+0x2b2>
 8003436:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003438:	e794      	b.n	8003364 <_printf_float+0x1dc>
 800343a:	2301      	movs	r3, #1
 800343c:	4652      	mov	r2, sl
 800343e:	4631      	mov	r1, r6
 8003440:	4628      	mov	r0, r5
 8003442:	47b8      	blx	r7
 8003444:	3001      	adds	r0, #1
 8003446:	f43f aefa 	beq.w	800323e <_printf_float+0xb6>
 800344a:	f109 0901 	add.w	r9, r9, #1
 800344e:	e7ee      	b.n	800342e <_printf_float+0x2a6>
 8003450:	7fefffff 	.word	0x7fefffff
 8003454:	08007894 	.word	0x08007894
 8003458:	08007898 	.word	0x08007898
 800345c:	080078a0 	.word	0x080078a0
 8003460:	0800789c 	.word	0x0800789c
 8003464:	080078a4 	.word	0x080078a4
 8003468:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800346a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800346c:	429a      	cmp	r2, r3
 800346e:	bfa8      	it	ge
 8003470:	461a      	movge	r2, r3
 8003472:	2a00      	cmp	r2, #0
 8003474:	4691      	mov	r9, r2
 8003476:	dc37      	bgt.n	80034e8 <_printf_float+0x360>
 8003478:	f04f 0b00 	mov.w	fp, #0
 800347c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003480:	f104 021a 	add.w	r2, r4, #26
 8003484:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003488:	ebaa 0309 	sub.w	r3, sl, r9
 800348c:	455b      	cmp	r3, fp
 800348e:	dc33      	bgt.n	80034f8 <_printf_float+0x370>
 8003490:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003494:	429a      	cmp	r2, r3
 8003496:	db3b      	blt.n	8003510 <_printf_float+0x388>
 8003498:	6823      	ldr	r3, [r4, #0]
 800349a:	07da      	lsls	r2, r3, #31
 800349c:	d438      	bmi.n	8003510 <_printf_float+0x388>
 800349e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80034a2:	eba3 020a 	sub.w	r2, r3, sl
 80034a6:	eba3 0901 	sub.w	r9, r3, r1
 80034aa:	4591      	cmp	r9, r2
 80034ac:	bfa8      	it	ge
 80034ae:	4691      	movge	r9, r2
 80034b0:	f1b9 0f00 	cmp.w	r9, #0
 80034b4:	dc34      	bgt.n	8003520 <_printf_float+0x398>
 80034b6:	f04f 0800 	mov.w	r8, #0
 80034ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80034be:	f104 0a1a 	add.w	sl, r4, #26
 80034c2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	eba3 0309 	sub.w	r3, r3, r9
 80034cc:	4543      	cmp	r3, r8
 80034ce:	f77f af7b 	ble.w	80033c8 <_printf_float+0x240>
 80034d2:	2301      	movs	r3, #1
 80034d4:	4652      	mov	r2, sl
 80034d6:	4631      	mov	r1, r6
 80034d8:	4628      	mov	r0, r5
 80034da:	47b8      	blx	r7
 80034dc:	3001      	adds	r0, #1
 80034de:	f43f aeae 	beq.w	800323e <_printf_float+0xb6>
 80034e2:	f108 0801 	add.w	r8, r8, #1
 80034e6:	e7ec      	b.n	80034c2 <_printf_float+0x33a>
 80034e8:	4613      	mov	r3, r2
 80034ea:	4631      	mov	r1, r6
 80034ec:	4642      	mov	r2, r8
 80034ee:	4628      	mov	r0, r5
 80034f0:	47b8      	blx	r7
 80034f2:	3001      	adds	r0, #1
 80034f4:	d1c0      	bne.n	8003478 <_printf_float+0x2f0>
 80034f6:	e6a2      	b.n	800323e <_printf_float+0xb6>
 80034f8:	2301      	movs	r3, #1
 80034fa:	4631      	mov	r1, r6
 80034fc:	4628      	mov	r0, r5
 80034fe:	920b      	str	r2, [sp, #44]	; 0x2c
 8003500:	47b8      	blx	r7
 8003502:	3001      	adds	r0, #1
 8003504:	f43f ae9b 	beq.w	800323e <_printf_float+0xb6>
 8003508:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800350a:	f10b 0b01 	add.w	fp, fp, #1
 800350e:	e7b9      	b.n	8003484 <_printf_float+0x2fc>
 8003510:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003514:	4631      	mov	r1, r6
 8003516:	4628      	mov	r0, r5
 8003518:	47b8      	blx	r7
 800351a:	3001      	adds	r0, #1
 800351c:	d1bf      	bne.n	800349e <_printf_float+0x316>
 800351e:	e68e      	b.n	800323e <_printf_float+0xb6>
 8003520:	464b      	mov	r3, r9
 8003522:	eb08 020a 	add.w	r2, r8, sl
 8003526:	4631      	mov	r1, r6
 8003528:	4628      	mov	r0, r5
 800352a:	47b8      	blx	r7
 800352c:	3001      	adds	r0, #1
 800352e:	d1c2      	bne.n	80034b6 <_printf_float+0x32e>
 8003530:	e685      	b.n	800323e <_printf_float+0xb6>
 8003532:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003534:	2a01      	cmp	r2, #1
 8003536:	dc01      	bgt.n	800353c <_printf_float+0x3b4>
 8003538:	07db      	lsls	r3, r3, #31
 800353a:	d537      	bpl.n	80035ac <_printf_float+0x424>
 800353c:	2301      	movs	r3, #1
 800353e:	4642      	mov	r2, r8
 8003540:	4631      	mov	r1, r6
 8003542:	4628      	mov	r0, r5
 8003544:	47b8      	blx	r7
 8003546:	3001      	adds	r0, #1
 8003548:	f43f ae79 	beq.w	800323e <_printf_float+0xb6>
 800354c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003550:	4631      	mov	r1, r6
 8003552:	4628      	mov	r0, r5
 8003554:	47b8      	blx	r7
 8003556:	3001      	adds	r0, #1
 8003558:	f43f ae71 	beq.w	800323e <_printf_float+0xb6>
 800355c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003560:	2200      	movs	r2, #0
 8003562:	2300      	movs	r3, #0
 8003564:	f7fd fab8 	bl	8000ad8 <__aeabi_dcmpeq>
 8003568:	b9d8      	cbnz	r0, 80035a2 <_printf_float+0x41a>
 800356a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800356c:	f108 0201 	add.w	r2, r8, #1
 8003570:	3b01      	subs	r3, #1
 8003572:	4631      	mov	r1, r6
 8003574:	4628      	mov	r0, r5
 8003576:	47b8      	blx	r7
 8003578:	3001      	adds	r0, #1
 800357a:	d10e      	bne.n	800359a <_printf_float+0x412>
 800357c:	e65f      	b.n	800323e <_printf_float+0xb6>
 800357e:	2301      	movs	r3, #1
 8003580:	464a      	mov	r2, r9
 8003582:	4631      	mov	r1, r6
 8003584:	4628      	mov	r0, r5
 8003586:	47b8      	blx	r7
 8003588:	3001      	adds	r0, #1
 800358a:	f43f ae58 	beq.w	800323e <_printf_float+0xb6>
 800358e:	f108 0801 	add.w	r8, r8, #1
 8003592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003594:	3b01      	subs	r3, #1
 8003596:	4543      	cmp	r3, r8
 8003598:	dcf1      	bgt.n	800357e <_printf_float+0x3f6>
 800359a:	4653      	mov	r3, sl
 800359c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80035a0:	e6e1      	b.n	8003366 <_printf_float+0x1de>
 80035a2:	f04f 0800 	mov.w	r8, #0
 80035a6:	f104 091a 	add.w	r9, r4, #26
 80035aa:	e7f2      	b.n	8003592 <_printf_float+0x40a>
 80035ac:	2301      	movs	r3, #1
 80035ae:	4642      	mov	r2, r8
 80035b0:	e7df      	b.n	8003572 <_printf_float+0x3ea>
 80035b2:	2301      	movs	r3, #1
 80035b4:	464a      	mov	r2, r9
 80035b6:	4631      	mov	r1, r6
 80035b8:	4628      	mov	r0, r5
 80035ba:	47b8      	blx	r7
 80035bc:	3001      	adds	r0, #1
 80035be:	f43f ae3e 	beq.w	800323e <_printf_float+0xb6>
 80035c2:	f108 0801 	add.w	r8, r8, #1
 80035c6:	68e3      	ldr	r3, [r4, #12]
 80035c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80035ca:	1a5b      	subs	r3, r3, r1
 80035cc:	4543      	cmp	r3, r8
 80035ce:	dcf0      	bgt.n	80035b2 <_printf_float+0x42a>
 80035d0:	e6fe      	b.n	80033d0 <_printf_float+0x248>
 80035d2:	f04f 0800 	mov.w	r8, #0
 80035d6:	f104 0919 	add.w	r9, r4, #25
 80035da:	e7f4      	b.n	80035c6 <_printf_float+0x43e>

080035dc <_printf_common>:
 80035dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035e0:	4616      	mov	r6, r2
 80035e2:	4699      	mov	r9, r3
 80035e4:	688a      	ldr	r2, [r1, #8]
 80035e6:	690b      	ldr	r3, [r1, #16]
 80035e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035ec:	4293      	cmp	r3, r2
 80035ee:	bfb8      	it	lt
 80035f0:	4613      	movlt	r3, r2
 80035f2:	6033      	str	r3, [r6, #0]
 80035f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035f8:	4607      	mov	r7, r0
 80035fa:	460c      	mov	r4, r1
 80035fc:	b10a      	cbz	r2, 8003602 <_printf_common+0x26>
 80035fe:	3301      	adds	r3, #1
 8003600:	6033      	str	r3, [r6, #0]
 8003602:	6823      	ldr	r3, [r4, #0]
 8003604:	0699      	lsls	r1, r3, #26
 8003606:	bf42      	ittt	mi
 8003608:	6833      	ldrmi	r3, [r6, #0]
 800360a:	3302      	addmi	r3, #2
 800360c:	6033      	strmi	r3, [r6, #0]
 800360e:	6825      	ldr	r5, [r4, #0]
 8003610:	f015 0506 	ands.w	r5, r5, #6
 8003614:	d106      	bne.n	8003624 <_printf_common+0x48>
 8003616:	f104 0a19 	add.w	sl, r4, #25
 800361a:	68e3      	ldr	r3, [r4, #12]
 800361c:	6832      	ldr	r2, [r6, #0]
 800361e:	1a9b      	subs	r3, r3, r2
 8003620:	42ab      	cmp	r3, r5
 8003622:	dc26      	bgt.n	8003672 <_printf_common+0x96>
 8003624:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003628:	1e13      	subs	r3, r2, #0
 800362a:	6822      	ldr	r2, [r4, #0]
 800362c:	bf18      	it	ne
 800362e:	2301      	movne	r3, #1
 8003630:	0692      	lsls	r2, r2, #26
 8003632:	d42b      	bmi.n	800368c <_printf_common+0xb0>
 8003634:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003638:	4649      	mov	r1, r9
 800363a:	4638      	mov	r0, r7
 800363c:	47c0      	blx	r8
 800363e:	3001      	adds	r0, #1
 8003640:	d01e      	beq.n	8003680 <_printf_common+0xa4>
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	68e5      	ldr	r5, [r4, #12]
 8003646:	6832      	ldr	r2, [r6, #0]
 8003648:	f003 0306 	and.w	r3, r3, #6
 800364c:	2b04      	cmp	r3, #4
 800364e:	bf08      	it	eq
 8003650:	1aad      	subeq	r5, r5, r2
 8003652:	68a3      	ldr	r3, [r4, #8]
 8003654:	6922      	ldr	r2, [r4, #16]
 8003656:	bf0c      	ite	eq
 8003658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800365c:	2500      	movne	r5, #0
 800365e:	4293      	cmp	r3, r2
 8003660:	bfc4      	itt	gt
 8003662:	1a9b      	subgt	r3, r3, r2
 8003664:	18ed      	addgt	r5, r5, r3
 8003666:	2600      	movs	r6, #0
 8003668:	341a      	adds	r4, #26
 800366a:	42b5      	cmp	r5, r6
 800366c:	d11a      	bne.n	80036a4 <_printf_common+0xc8>
 800366e:	2000      	movs	r0, #0
 8003670:	e008      	b.n	8003684 <_printf_common+0xa8>
 8003672:	2301      	movs	r3, #1
 8003674:	4652      	mov	r2, sl
 8003676:	4649      	mov	r1, r9
 8003678:	4638      	mov	r0, r7
 800367a:	47c0      	blx	r8
 800367c:	3001      	adds	r0, #1
 800367e:	d103      	bne.n	8003688 <_printf_common+0xac>
 8003680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003688:	3501      	adds	r5, #1
 800368a:	e7c6      	b.n	800361a <_printf_common+0x3e>
 800368c:	18e1      	adds	r1, r4, r3
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	2030      	movs	r0, #48	; 0x30
 8003692:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003696:	4422      	add	r2, r4
 8003698:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800369c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036a0:	3302      	adds	r3, #2
 80036a2:	e7c7      	b.n	8003634 <_printf_common+0x58>
 80036a4:	2301      	movs	r3, #1
 80036a6:	4622      	mov	r2, r4
 80036a8:	4649      	mov	r1, r9
 80036aa:	4638      	mov	r0, r7
 80036ac:	47c0      	blx	r8
 80036ae:	3001      	adds	r0, #1
 80036b0:	d0e6      	beq.n	8003680 <_printf_common+0xa4>
 80036b2:	3601      	adds	r6, #1
 80036b4:	e7d9      	b.n	800366a <_printf_common+0x8e>
	...

080036b8 <_printf_i>:
 80036b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036bc:	7e0f      	ldrb	r7, [r1, #24]
 80036be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80036c0:	2f78      	cmp	r7, #120	; 0x78
 80036c2:	4691      	mov	r9, r2
 80036c4:	4680      	mov	r8, r0
 80036c6:	460c      	mov	r4, r1
 80036c8:	469a      	mov	sl, r3
 80036ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80036ce:	d807      	bhi.n	80036e0 <_printf_i+0x28>
 80036d0:	2f62      	cmp	r7, #98	; 0x62
 80036d2:	d80a      	bhi.n	80036ea <_printf_i+0x32>
 80036d4:	2f00      	cmp	r7, #0
 80036d6:	f000 80d8 	beq.w	800388a <_printf_i+0x1d2>
 80036da:	2f58      	cmp	r7, #88	; 0x58
 80036dc:	f000 80a3 	beq.w	8003826 <_printf_i+0x16e>
 80036e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036e8:	e03a      	b.n	8003760 <_printf_i+0xa8>
 80036ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036ee:	2b15      	cmp	r3, #21
 80036f0:	d8f6      	bhi.n	80036e0 <_printf_i+0x28>
 80036f2:	a101      	add	r1, pc, #4	; (adr r1, 80036f8 <_printf_i+0x40>)
 80036f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036f8:	08003751 	.word	0x08003751
 80036fc:	08003765 	.word	0x08003765
 8003700:	080036e1 	.word	0x080036e1
 8003704:	080036e1 	.word	0x080036e1
 8003708:	080036e1 	.word	0x080036e1
 800370c:	080036e1 	.word	0x080036e1
 8003710:	08003765 	.word	0x08003765
 8003714:	080036e1 	.word	0x080036e1
 8003718:	080036e1 	.word	0x080036e1
 800371c:	080036e1 	.word	0x080036e1
 8003720:	080036e1 	.word	0x080036e1
 8003724:	08003871 	.word	0x08003871
 8003728:	08003795 	.word	0x08003795
 800372c:	08003853 	.word	0x08003853
 8003730:	080036e1 	.word	0x080036e1
 8003734:	080036e1 	.word	0x080036e1
 8003738:	08003893 	.word	0x08003893
 800373c:	080036e1 	.word	0x080036e1
 8003740:	08003795 	.word	0x08003795
 8003744:	080036e1 	.word	0x080036e1
 8003748:	080036e1 	.word	0x080036e1
 800374c:	0800385b 	.word	0x0800385b
 8003750:	682b      	ldr	r3, [r5, #0]
 8003752:	1d1a      	adds	r2, r3, #4
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	602a      	str	r2, [r5, #0]
 8003758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800375c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003760:	2301      	movs	r3, #1
 8003762:	e0a3      	b.n	80038ac <_printf_i+0x1f4>
 8003764:	6820      	ldr	r0, [r4, #0]
 8003766:	6829      	ldr	r1, [r5, #0]
 8003768:	0606      	lsls	r6, r0, #24
 800376a:	f101 0304 	add.w	r3, r1, #4
 800376e:	d50a      	bpl.n	8003786 <_printf_i+0xce>
 8003770:	680e      	ldr	r6, [r1, #0]
 8003772:	602b      	str	r3, [r5, #0]
 8003774:	2e00      	cmp	r6, #0
 8003776:	da03      	bge.n	8003780 <_printf_i+0xc8>
 8003778:	232d      	movs	r3, #45	; 0x2d
 800377a:	4276      	negs	r6, r6
 800377c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003780:	485e      	ldr	r0, [pc, #376]	; (80038fc <_printf_i+0x244>)
 8003782:	230a      	movs	r3, #10
 8003784:	e019      	b.n	80037ba <_printf_i+0x102>
 8003786:	680e      	ldr	r6, [r1, #0]
 8003788:	602b      	str	r3, [r5, #0]
 800378a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800378e:	bf18      	it	ne
 8003790:	b236      	sxthne	r6, r6
 8003792:	e7ef      	b.n	8003774 <_printf_i+0xbc>
 8003794:	682b      	ldr	r3, [r5, #0]
 8003796:	6820      	ldr	r0, [r4, #0]
 8003798:	1d19      	adds	r1, r3, #4
 800379a:	6029      	str	r1, [r5, #0]
 800379c:	0601      	lsls	r1, r0, #24
 800379e:	d501      	bpl.n	80037a4 <_printf_i+0xec>
 80037a0:	681e      	ldr	r6, [r3, #0]
 80037a2:	e002      	b.n	80037aa <_printf_i+0xf2>
 80037a4:	0646      	lsls	r6, r0, #25
 80037a6:	d5fb      	bpl.n	80037a0 <_printf_i+0xe8>
 80037a8:	881e      	ldrh	r6, [r3, #0]
 80037aa:	4854      	ldr	r0, [pc, #336]	; (80038fc <_printf_i+0x244>)
 80037ac:	2f6f      	cmp	r7, #111	; 0x6f
 80037ae:	bf0c      	ite	eq
 80037b0:	2308      	moveq	r3, #8
 80037b2:	230a      	movne	r3, #10
 80037b4:	2100      	movs	r1, #0
 80037b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037ba:	6865      	ldr	r5, [r4, #4]
 80037bc:	60a5      	str	r5, [r4, #8]
 80037be:	2d00      	cmp	r5, #0
 80037c0:	bfa2      	ittt	ge
 80037c2:	6821      	ldrge	r1, [r4, #0]
 80037c4:	f021 0104 	bicge.w	r1, r1, #4
 80037c8:	6021      	strge	r1, [r4, #0]
 80037ca:	b90e      	cbnz	r6, 80037d0 <_printf_i+0x118>
 80037cc:	2d00      	cmp	r5, #0
 80037ce:	d04d      	beq.n	800386c <_printf_i+0x1b4>
 80037d0:	4615      	mov	r5, r2
 80037d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80037d6:	fb03 6711 	mls	r7, r3, r1, r6
 80037da:	5dc7      	ldrb	r7, [r0, r7]
 80037dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80037e0:	4637      	mov	r7, r6
 80037e2:	42bb      	cmp	r3, r7
 80037e4:	460e      	mov	r6, r1
 80037e6:	d9f4      	bls.n	80037d2 <_printf_i+0x11a>
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d10b      	bne.n	8003804 <_printf_i+0x14c>
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	07de      	lsls	r6, r3, #31
 80037f0:	d508      	bpl.n	8003804 <_printf_i+0x14c>
 80037f2:	6923      	ldr	r3, [r4, #16]
 80037f4:	6861      	ldr	r1, [r4, #4]
 80037f6:	4299      	cmp	r1, r3
 80037f8:	bfde      	ittt	le
 80037fa:	2330      	movle	r3, #48	; 0x30
 80037fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003800:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003804:	1b52      	subs	r2, r2, r5
 8003806:	6122      	str	r2, [r4, #16]
 8003808:	f8cd a000 	str.w	sl, [sp]
 800380c:	464b      	mov	r3, r9
 800380e:	aa03      	add	r2, sp, #12
 8003810:	4621      	mov	r1, r4
 8003812:	4640      	mov	r0, r8
 8003814:	f7ff fee2 	bl	80035dc <_printf_common>
 8003818:	3001      	adds	r0, #1
 800381a:	d14c      	bne.n	80038b6 <_printf_i+0x1fe>
 800381c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003820:	b004      	add	sp, #16
 8003822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003826:	4835      	ldr	r0, [pc, #212]	; (80038fc <_printf_i+0x244>)
 8003828:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800382c:	6829      	ldr	r1, [r5, #0]
 800382e:	6823      	ldr	r3, [r4, #0]
 8003830:	f851 6b04 	ldr.w	r6, [r1], #4
 8003834:	6029      	str	r1, [r5, #0]
 8003836:	061d      	lsls	r5, r3, #24
 8003838:	d514      	bpl.n	8003864 <_printf_i+0x1ac>
 800383a:	07df      	lsls	r7, r3, #31
 800383c:	bf44      	itt	mi
 800383e:	f043 0320 	orrmi.w	r3, r3, #32
 8003842:	6023      	strmi	r3, [r4, #0]
 8003844:	b91e      	cbnz	r6, 800384e <_printf_i+0x196>
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	f023 0320 	bic.w	r3, r3, #32
 800384c:	6023      	str	r3, [r4, #0]
 800384e:	2310      	movs	r3, #16
 8003850:	e7b0      	b.n	80037b4 <_printf_i+0xfc>
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	f043 0320 	orr.w	r3, r3, #32
 8003858:	6023      	str	r3, [r4, #0]
 800385a:	2378      	movs	r3, #120	; 0x78
 800385c:	4828      	ldr	r0, [pc, #160]	; (8003900 <_printf_i+0x248>)
 800385e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003862:	e7e3      	b.n	800382c <_printf_i+0x174>
 8003864:	0659      	lsls	r1, r3, #25
 8003866:	bf48      	it	mi
 8003868:	b2b6      	uxthmi	r6, r6
 800386a:	e7e6      	b.n	800383a <_printf_i+0x182>
 800386c:	4615      	mov	r5, r2
 800386e:	e7bb      	b.n	80037e8 <_printf_i+0x130>
 8003870:	682b      	ldr	r3, [r5, #0]
 8003872:	6826      	ldr	r6, [r4, #0]
 8003874:	6961      	ldr	r1, [r4, #20]
 8003876:	1d18      	adds	r0, r3, #4
 8003878:	6028      	str	r0, [r5, #0]
 800387a:	0635      	lsls	r5, r6, #24
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	d501      	bpl.n	8003884 <_printf_i+0x1cc>
 8003880:	6019      	str	r1, [r3, #0]
 8003882:	e002      	b.n	800388a <_printf_i+0x1d2>
 8003884:	0670      	lsls	r0, r6, #25
 8003886:	d5fb      	bpl.n	8003880 <_printf_i+0x1c8>
 8003888:	8019      	strh	r1, [r3, #0]
 800388a:	2300      	movs	r3, #0
 800388c:	6123      	str	r3, [r4, #16]
 800388e:	4615      	mov	r5, r2
 8003890:	e7ba      	b.n	8003808 <_printf_i+0x150>
 8003892:	682b      	ldr	r3, [r5, #0]
 8003894:	1d1a      	adds	r2, r3, #4
 8003896:	602a      	str	r2, [r5, #0]
 8003898:	681d      	ldr	r5, [r3, #0]
 800389a:	6862      	ldr	r2, [r4, #4]
 800389c:	2100      	movs	r1, #0
 800389e:	4628      	mov	r0, r5
 80038a0:	f7fc fca6 	bl	80001f0 <memchr>
 80038a4:	b108      	cbz	r0, 80038aa <_printf_i+0x1f2>
 80038a6:	1b40      	subs	r0, r0, r5
 80038a8:	6060      	str	r0, [r4, #4]
 80038aa:	6863      	ldr	r3, [r4, #4]
 80038ac:	6123      	str	r3, [r4, #16]
 80038ae:	2300      	movs	r3, #0
 80038b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038b4:	e7a8      	b.n	8003808 <_printf_i+0x150>
 80038b6:	6923      	ldr	r3, [r4, #16]
 80038b8:	462a      	mov	r2, r5
 80038ba:	4649      	mov	r1, r9
 80038bc:	4640      	mov	r0, r8
 80038be:	47d0      	blx	sl
 80038c0:	3001      	adds	r0, #1
 80038c2:	d0ab      	beq.n	800381c <_printf_i+0x164>
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	079b      	lsls	r3, r3, #30
 80038c8:	d413      	bmi.n	80038f2 <_printf_i+0x23a>
 80038ca:	68e0      	ldr	r0, [r4, #12]
 80038cc:	9b03      	ldr	r3, [sp, #12]
 80038ce:	4298      	cmp	r0, r3
 80038d0:	bfb8      	it	lt
 80038d2:	4618      	movlt	r0, r3
 80038d4:	e7a4      	b.n	8003820 <_printf_i+0x168>
 80038d6:	2301      	movs	r3, #1
 80038d8:	4632      	mov	r2, r6
 80038da:	4649      	mov	r1, r9
 80038dc:	4640      	mov	r0, r8
 80038de:	47d0      	blx	sl
 80038e0:	3001      	adds	r0, #1
 80038e2:	d09b      	beq.n	800381c <_printf_i+0x164>
 80038e4:	3501      	adds	r5, #1
 80038e6:	68e3      	ldr	r3, [r4, #12]
 80038e8:	9903      	ldr	r1, [sp, #12]
 80038ea:	1a5b      	subs	r3, r3, r1
 80038ec:	42ab      	cmp	r3, r5
 80038ee:	dcf2      	bgt.n	80038d6 <_printf_i+0x21e>
 80038f0:	e7eb      	b.n	80038ca <_printf_i+0x212>
 80038f2:	2500      	movs	r5, #0
 80038f4:	f104 0619 	add.w	r6, r4, #25
 80038f8:	e7f5      	b.n	80038e6 <_printf_i+0x22e>
 80038fa:	bf00      	nop
 80038fc:	080078a6 	.word	0x080078a6
 8003900:	080078b7 	.word	0x080078b7

08003904 <_scanf_float>:
 8003904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003908:	b087      	sub	sp, #28
 800390a:	4617      	mov	r7, r2
 800390c:	9303      	str	r3, [sp, #12]
 800390e:	688b      	ldr	r3, [r1, #8]
 8003910:	1e5a      	subs	r2, r3, #1
 8003912:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003916:	bf83      	ittte	hi
 8003918:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800391c:	195b      	addhi	r3, r3, r5
 800391e:	9302      	strhi	r3, [sp, #8]
 8003920:	2300      	movls	r3, #0
 8003922:	bf86      	itte	hi
 8003924:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003928:	608b      	strhi	r3, [r1, #8]
 800392a:	9302      	strls	r3, [sp, #8]
 800392c:	680b      	ldr	r3, [r1, #0]
 800392e:	468b      	mov	fp, r1
 8003930:	2500      	movs	r5, #0
 8003932:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003936:	f84b 3b1c 	str.w	r3, [fp], #28
 800393a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800393e:	4680      	mov	r8, r0
 8003940:	460c      	mov	r4, r1
 8003942:	465e      	mov	r6, fp
 8003944:	46aa      	mov	sl, r5
 8003946:	46a9      	mov	r9, r5
 8003948:	9501      	str	r5, [sp, #4]
 800394a:	68a2      	ldr	r2, [r4, #8]
 800394c:	b152      	cbz	r2, 8003964 <_scanf_float+0x60>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b4e      	cmp	r3, #78	; 0x4e
 8003954:	d864      	bhi.n	8003a20 <_scanf_float+0x11c>
 8003956:	2b40      	cmp	r3, #64	; 0x40
 8003958:	d83c      	bhi.n	80039d4 <_scanf_float+0xd0>
 800395a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800395e:	b2c8      	uxtb	r0, r1
 8003960:	280e      	cmp	r0, #14
 8003962:	d93a      	bls.n	80039da <_scanf_float+0xd6>
 8003964:	f1b9 0f00 	cmp.w	r9, #0
 8003968:	d003      	beq.n	8003972 <_scanf_float+0x6e>
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003970:	6023      	str	r3, [r4, #0]
 8003972:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003976:	f1ba 0f01 	cmp.w	sl, #1
 800397a:	f200 8113 	bhi.w	8003ba4 <_scanf_float+0x2a0>
 800397e:	455e      	cmp	r6, fp
 8003980:	f200 8105 	bhi.w	8003b8e <_scanf_float+0x28a>
 8003984:	2501      	movs	r5, #1
 8003986:	4628      	mov	r0, r5
 8003988:	b007      	add	sp, #28
 800398a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800398e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003992:	2a0d      	cmp	r2, #13
 8003994:	d8e6      	bhi.n	8003964 <_scanf_float+0x60>
 8003996:	a101      	add	r1, pc, #4	; (adr r1, 800399c <_scanf_float+0x98>)
 8003998:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800399c:	08003adb 	.word	0x08003adb
 80039a0:	08003965 	.word	0x08003965
 80039a4:	08003965 	.word	0x08003965
 80039a8:	08003965 	.word	0x08003965
 80039ac:	08003b3b 	.word	0x08003b3b
 80039b0:	08003b13 	.word	0x08003b13
 80039b4:	08003965 	.word	0x08003965
 80039b8:	08003965 	.word	0x08003965
 80039bc:	08003ae9 	.word	0x08003ae9
 80039c0:	08003965 	.word	0x08003965
 80039c4:	08003965 	.word	0x08003965
 80039c8:	08003965 	.word	0x08003965
 80039cc:	08003965 	.word	0x08003965
 80039d0:	08003aa1 	.word	0x08003aa1
 80039d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80039d8:	e7db      	b.n	8003992 <_scanf_float+0x8e>
 80039da:	290e      	cmp	r1, #14
 80039dc:	d8c2      	bhi.n	8003964 <_scanf_float+0x60>
 80039de:	a001      	add	r0, pc, #4	; (adr r0, 80039e4 <_scanf_float+0xe0>)
 80039e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80039e4:	08003a93 	.word	0x08003a93
 80039e8:	08003965 	.word	0x08003965
 80039ec:	08003a93 	.word	0x08003a93
 80039f0:	08003b27 	.word	0x08003b27
 80039f4:	08003965 	.word	0x08003965
 80039f8:	08003a41 	.word	0x08003a41
 80039fc:	08003a7d 	.word	0x08003a7d
 8003a00:	08003a7d 	.word	0x08003a7d
 8003a04:	08003a7d 	.word	0x08003a7d
 8003a08:	08003a7d 	.word	0x08003a7d
 8003a0c:	08003a7d 	.word	0x08003a7d
 8003a10:	08003a7d 	.word	0x08003a7d
 8003a14:	08003a7d 	.word	0x08003a7d
 8003a18:	08003a7d 	.word	0x08003a7d
 8003a1c:	08003a7d 	.word	0x08003a7d
 8003a20:	2b6e      	cmp	r3, #110	; 0x6e
 8003a22:	d809      	bhi.n	8003a38 <_scanf_float+0x134>
 8003a24:	2b60      	cmp	r3, #96	; 0x60
 8003a26:	d8b2      	bhi.n	800398e <_scanf_float+0x8a>
 8003a28:	2b54      	cmp	r3, #84	; 0x54
 8003a2a:	d077      	beq.n	8003b1c <_scanf_float+0x218>
 8003a2c:	2b59      	cmp	r3, #89	; 0x59
 8003a2e:	d199      	bne.n	8003964 <_scanf_float+0x60>
 8003a30:	2d07      	cmp	r5, #7
 8003a32:	d197      	bne.n	8003964 <_scanf_float+0x60>
 8003a34:	2508      	movs	r5, #8
 8003a36:	e029      	b.n	8003a8c <_scanf_float+0x188>
 8003a38:	2b74      	cmp	r3, #116	; 0x74
 8003a3a:	d06f      	beq.n	8003b1c <_scanf_float+0x218>
 8003a3c:	2b79      	cmp	r3, #121	; 0x79
 8003a3e:	e7f6      	b.n	8003a2e <_scanf_float+0x12a>
 8003a40:	6821      	ldr	r1, [r4, #0]
 8003a42:	05c8      	lsls	r0, r1, #23
 8003a44:	d51a      	bpl.n	8003a7c <_scanf_float+0x178>
 8003a46:	9b02      	ldr	r3, [sp, #8]
 8003a48:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003a4c:	6021      	str	r1, [r4, #0]
 8003a4e:	f109 0901 	add.w	r9, r9, #1
 8003a52:	b11b      	cbz	r3, 8003a5c <_scanf_float+0x158>
 8003a54:	3b01      	subs	r3, #1
 8003a56:	3201      	adds	r2, #1
 8003a58:	9302      	str	r3, [sp, #8]
 8003a5a:	60a2      	str	r2, [r4, #8]
 8003a5c:	68a3      	ldr	r3, [r4, #8]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	60a3      	str	r3, [r4, #8]
 8003a62:	6923      	ldr	r3, [r4, #16]
 8003a64:	3301      	adds	r3, #1
 8003a66:	6123      	str	r3, [r4, #16]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	607b      	str	r3, [r7, #4]
 8003a70:	f340 8084 	ble.w	8003b7c <_scanf_float+0x278>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	3301      	adds	r3, #1
 8003a78:	603b      	str	r3, [r7, #0]
 8003a7a:	e766      	b.n	800394a <_scanf_float+0x46>
 8003a7c:	eb1a 0f05 	cmn.w	sl, r5
 8003a80:	f47f af70 	bne.w	8003964 <_scanf_float+0x60>
 8003a84:	6822      	ldr	r2, [r4, #0]
 8003a86:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003a8a:	6022      	str	r2, [r4, #0]
 8003a8c:	f806 3b01 	strb.w	r3, [r6], #1
 8003a90:	e7e4      	b.n	8003a5c <_scanf_float+0x158>
 8003a92:	6822      	ldr	r2, [r4, #0]
 8003a94:	0610      	lsls	r0, r2, #24
 8003a96:	f57f af65 	bpl.w	8003964 <_scanf_float+0x60>
 8003a9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a9e:	e7f4      	b.n	8003a8a <_scanf_float+0x186>
 8003aa0:	f1ba 0f00 	cmp.w	sl, #0
 8003aa4:	d10e      	bne.n	8003ac4 <_scanf_float+0x1c0>
 8003aa6:	f1b9 0f00 	cmp.w	r9, #0
 8003aaa:	d10e      	bne.n	8003aca <_scanf_float+0x1c6>
 8003aac:	6822      	ldr	r2, [r4, #0]
 8003aae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003ab2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003ab6:	d108      	bne.n	8003aca <_scanf_float+0x1c6>
 8003ab8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003abc:	6022      	str	r2, [r4, #0]
 8003abe:	f04f 0a01 	mov.w	sl, #1
 8003ac2:	e7e3      	b.n	8003a8c <_scanf_float+0x188>
 8003ac4:	f1ba 0f02 	cmp.w	sl, #2
 8003ac8:	d055      	beq.n	8003b76 <_scanf_float+0x272>
 8003aca:	2d01      	cmp	r5, #1
 8003acc:	d002      	beq.n	8003ad4 <_scanf_float+0x1d0>
 8003ace:	2d04      	cmp	r5, #4
 8003ad0:	f47f af48 	bne.w	8003964 <_scanf_float+0x60>
 8003ad4:	3501      	adds	r5, #1
 8003ad6:	b2ed      	uxtb	r5, r5
 8003ad8:	e7d8      	b.n	8003a8c <_scanf_float+0x188>
 8003ada:	f1ba 0f01 	cmp.w	sl, #1
 8003ade:	f47f af41 	bne.w	8003964 <_scanf_float+0x60>
 8003ae2:	f04f 0a02 	mov.w	sl, #2
 8003ae6:	e7d1      	b.n	8003a8c <_scanf_float+0x188>
 8003ae8:	b97d      	cbnz	r5, 8003b0a <_scanf_float+0x206>
 8003aea:	f1b9 0f00 	cmp.w	r9, #0
 8003aee:	f47f af3c 	bne.w	800396a <_scanf_float+0x66>
 8003af2:	6822      	ldr	r2, [r4, #0]
 8003af4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003af8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003afc:	f47f af39 	bne.w	8003972 <_scanf_float+0x6e>
 8003b00:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003b04:	6022      	str	r2, [r4, #0]
 8003b06:	2501      	movs	r5, #1
 8003b08:	e7c0      	b.n	8003a8c <_scanf_float+0x188>
 8003b0a:	2d03      	cmp	r5, #3
 8003b0c:	d0e2      	beq.n	8003ad4 <_scanf_float+0x1d0>
 8003b0e:	2d05      	cmp	r5, #5
 8003b10:	e7de      	b.n	8003ad0 <_scanf_float+0x1cc>
 8003b12:	2d02      	cmp	r5, #2
 8003b14:	f47f af26 	bne.w	8003964 <_scanf_float+0x60>
 8003b18:	2503      	movs	r5, #3
 8003b1a:	e7b7      	b.n	8003a8c <_scanf_float+0x188>
 8003b1c:	2d06      	cmp	r5, #6
 8003b1e:	f47f af21 	bne.w	8003964 <_scanf_float+0x60>
 8003b22:	2507      	movs	r5, #7
 8003b24:	e7b2      	b.n	8003a8c <_scanf_float+0x188>
 8003b26:	6822      	ldr	r2, [r4, #0]
 8003b28:	0591      	lsls	r1, r2, #22
 8003b2a:	f57f af1b 	bpl.w	8003964 <_scanf_float+0x60>
 8003b2e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003b32:	6022      	str	r2, [r4, #0]
 8003b34:	f8cd 9004 	str.w	r9, [sp, #4]
 8003b38:	e7a8      	b.n	8003a8c <_scanf_float+0x188>
 8003b3a:	6822      	ldr	r2, [r4, #0]
 8003b3c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003b40:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003b44:	d006      	beq.n	8003b54 <_scanf_float+0x250>
 8003b46:	0550      	lsls	r0, r2, #21
 8003b48:	f57f af0c 	bpl.w	8003964 <_scanf_float+0x60>
 8003b4c:	f1b9 0f00 	cmp.w	r9, #0
 8003b50:	f43f af0f 	beq.w	8003972 <_scanf_float+0x6e>
 8003b54:	0591      	lsls	r1, r2, #22
 8003b56:	bf58      	it	pl
 8003b58:	9901      	ldrpl	r1, [sp, #4]
 8003b5a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003b5e:	bf58      	it	pl
 8003b60:	eba9 0101 	subpl.w	r1, r9, r1
 8003b64:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003b68:	bf58      	it	pl
 8003b6a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003b6e:	6022      	str	r2, [r4, #0]
 8003b70:	f04f 0900 	mov.w	r9, #0
 8003b74:	e78a      	b.n	8003a8c <_scanf_float+0x188>
 8003b76:	f04f 0a03 	mov.w	sl, #3
 8003b7a:	e787      	b.n	8003a8c <_scanf_float+0x188>
 8003b7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003b80:	4639      	mov	r1, r7
 8003b82:	4640      	mov	r0, r8
 8003b84:	4798      	blx	r3
 8003b86:	2800      	cmp	r0, #0
 8003b88:	f43f aedf 	beq.w	800394a <_scanf_float+0x46>
 8003b8c:	e6ea      	b.n	8003964 <_scanf_float+0x60>
 8003b8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003b92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003b96:	463a      	mov	r2, r7
 8003b98:	4640      	mov	r0, r8
 8003b9a:	4798      	blx	r3
 8003b9c:	6923      	ldr	r3, [r4, #16]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	6123      	str	r3, [r4, #16]
 8003ba2:	e6ec      	b.n	800397e <_scanf_float+0x7a>
 8003ba4:	1e6b      	subs	r3, r5, #1
 8003ba6:	2b06      	cmp	r3, #6
 8003ba8:	d825      	bhi.n	8003bf6 <_scanf_float+0x2f2>
 8003baa:	2d02      	cmp	r5, #2
 8003bac:	d836      	bhi.n	8003c1c <_scanf_float+0x318>
 8003bae:	455e      	cmp	r6, fp
 8003bb0:	f67f aee8 	bls.w	8003984 <_scanf_float+0x80>
 8003bb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003bb8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003bbc:	463a      	mov	r2, r7
 8003bbe:	4640      	mov	r0, r8
 8003bc0:	4798      	blx	r3
 8003bc2:	6923      	ldr	r3, [r4, #16]
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	6123      	str	r3, [r4, #16]
 8003bc8:	e7f1      	b.n	8003bae <_scanf_float+0x2aa>
 8003bca:	9802      	ldr	r0, [sp, #8]
 8003bcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003bd0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003bd4:	9002      	str	r0, [sp, #8]
 8003bd6:	463a      	mov	r2, r7
 8003bd8:	4640      	mov	r0, r8
 8003bda:	4798      	blx	r3
 8003bdc:	6923      	ldr	r3, [r4, #16]
 8003bde:	3b01      	subs	r3, #1
 8003be0:	6123      	str	r3, [r4, #16]
 8003be2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003be6:	fa5f fa8a 	uxtb.w	sl, sl
 8003bea:	f1ba 0f02 	cmp.w	sl, #2
 8003bee:	d1ec      	bne.n	8003bca <_scanf_float+0x2c6>
 8003bf0:	3d03      	subs	r5, #3
 8003bf2:	b2ed      	uxtb	r5, r5
 8003bf4:	1b76      	subs	r6, r6, r5
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	05da      	lsls	r2, r3, #23
 8003bfa:	d52f      	bpl.n	8003c5c <_scanf_float+0x358>
 8003bfc:	055b      	lsls	r3, r3, #21
 8003bfe:	d510      	bpl.n	8003c22 <_scanf_float+0x31e>
 8003c00:	455e      	cmp	r6, fp
 8003c02:	f67f aebf 	bls.w	8003984 <_scanf_float+0x80>
 8003c06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003c0e:	463a      	mov	r2, r7
 8003c10:	4640      	mov	r0, r8
 8003c12:	4798      	blx	r3
 8003c14:	6923      	ldr	r3, [r4, #16]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	6123      	str	r3, [r4, #16]
 8003c1a:	e7f1      	b.n	8003c00 <_scanf_float+0x2fc>
 8003c1c:	46aa      	mov	sl, r5
 8003c1e:	9602      	str	r6, [sp, #8]
 8003c20:	e7df      	b.n	8003be2 <_scanf_float+0x2de>
 8003c22:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003c26:	6923      	ldr	r3, [r4, #16]
 8003c28:	2965      	cmp	r1, #101	; 0x65
 8003c2a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003c2e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8003c32:	6123      	str	r3, [r4, #16]
 8003c34:	d00c      	beq.n	8003c50 <_scanf_float+0x34c>
 8003c36:	2945      	cmp	r1, #69	; 0x45
 8003c38:	d00a      	beq.n	8003c50 <_scanf_float+0x34c>
 8003c3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c3e:	463a      	mov	r2, r7
 8003c40:	4640      	mov	r0, r8
 8003c42:	4798      	blx	r3
 8003c44:	6923      	ldr	r3, [r4, #16]
 8003c46:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	1eb5      	subs	r5, r6, #2
 8003c4e:	6123      	str	r3, [r4, #16]
 8003c50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c54:	463a      	mov	r2, r7
 8003c56:	4640      	mov	r0, r8
 8003c58:	4798      	blx	r3
 8003c5a:	462e      	mov	r6, r5
 8003c5c:	6825      	ldr	r5, [r4, #0]
 8003c5e:	f015 0510 	ands.w	r5, r5, #16
 8003c62:	d155      	bne.n	8003d10 <_scanf_float+0x40c>
 8003c64:	7035      	strb	r5, [r6, #0]
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c70:	d11b      	bne.n	8003caa <_scanf_float+0x3a6>
 8003c72:	9b01      	ldr	r3, [sp, #4]
 8003c74:	454b      	cmp	r3, r9
 8003c76:	eba3 0209 	sub.w	r2, r3, r9
 8003c7a:	d123      	bne.n	8003cc4 <_scanf_float+0x3c0>
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	4659      	mov	r1, fp
 8003c80:	4640      	mov	r0, r8
 8003c82:	f000 fe79 	bl	8004978 <_strtod_r>
 8003c86:	6822      	ldr	r2, [r4, #0]
 8003c88:	9b03      	ldr	r3, [sp, #12]
 8003c8a:	f012 0f02 	tst.w	r2, #2
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4606      	mov	r6, r0
 8003c92:	460f      	mov	r7, r1
 8003c94:	d021      	beq.n	8003cda <_scanf_float+0x3d6>
 8003c96:	1d1a      	adds	r2, r3, #4
 8003c98:	9903      	ldr	r1, [sp, #12]
 8003c9a:	600a      	str	r2, [r1, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	e9c3 6700 	strd	r6, r7, [r3]
 8003ca2:	68e3      	ldr	r3, [r4, #12]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	60e3      	str	r3, [r4, #12]
 8003ca8:	e66d      	b.n	8003986 <_scanf_float+0x82>
 8003caa:	9b04      	ldr	r3, [sp, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0e5      	beq.n	8003c7c <_scanf_float+0x378>
 8003cb0:	9905      	ldr	r1, [sp, #20]
 8003cb2:	230a      	movs	r3, #10
 8003cb4:	462a      	mov	r2, r5
 8003cb6:	3101      	adds	r1, #1
 8003cb8:	4640      	mov	r0, r8
 8003cba:	f000 fedf 	bl	8004a7c <_strtol_r>
 8003cbe:	9b04      	ldr	r3, [sp, #16]
 8003cc0:	9e05      	ldr	r6, [sp, #20]
 8003cc2:	1ac2      	subs	r2, r0, r3
 8003cc4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003cc8:	429e      	cmp	r6, r3
 8003cca:	bf28      	it	cs
 8003ccc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003cd0:	4910      	ldr	r1, [pc, #64]	; (8003d14 <_scanf_float+0x410>)
 8003cd2:	4630      	mov	r0, r6
 8003cd4:	f000 f826 	bl	8003d24 <siprintf>
 8003cd8:	e7d0      	b.n	8003c7c <_scanf_float+0x378>
 8003cda:	f012 0f04 	tst.w	r2, #4
 8003cde:	f103 0204 	add.w	r2, r3, #4
 8003ce2:	d1d9      	bne.n	8003c98 <_scanf_float+0x394>
 8003ce4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003ce8:	f8cc 2000 	str.w	r2, [ip]
 8003cec:	f8d3 8000 	ldr.w	r8, [r3]
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	f7fc ff22 	bl	8000b3c <__aeabi_dcmpun>
 8003cf8:	b128      	cbz	r0, 8003d06 <_scanf_float+0x402>
 8003cfa:	4807      	ldr	r0, [pc, #28]	; (8003d18 <_scanf_float+0x414>)
 8003cfc:	f000 f80e 	bl	8003d1c <nanf>
 8003d00:	f8c8 0000 	str.w	r0, [r8]
 8003d04:	e7cd      	b.n	8003ca2 <_scanf_float+0x39e>
 8003d06:	4630      	mov	r0, r6
 8003d08:	4639      	mov	r1, r7
 8003d0a:	f7fc ff75 	bl	8000bf8 <__aeabi_d2f>
 8003d0e:	e7f7      	b.n	8003d00 <_scanf_float+0x3fc>
 8003d10:	2500      	movs	r5, #0
 8003d12:	e638      	b.n	8003986 <_scanf_float+0x82>
 8003d14:	080078c8 	.word	0x080078c8
 8003d18:	08007cd0 	.word	0x08007cd0

08003d1c <nanf>:
 8003d1c:	4800      	ldr	r0, [pc, #0]	; (8003d20 <nanf+0x4>)
 8003d1e:	4770      	bx	lr
 8003d20:	7fc00000 	.word	0x7fc00000

08003d24 <siprintf>:
 8003d24:	b40e      	push	{r1, r2, r3}
 8003d26:	b500      	push	{lr}
 8003d28:	b09c      	sub	sp, #112	; 0x70
 8003d2a:	ab1d      	add	r3, sp, #116	; 0x74
 8003d2c:	9002      	str	r0, [sp, #8]
 8003d2e:	9006      	str	r0, [sp, #24]
 8003d30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d34:	4809      	ldr	r0, [pc, #36]	; (8003d5c <siprintf+0x38>)
 8003d36:	9107      	str	r1, [sp, #28]
 8003d38:	9104      	str	r1, [sp, #16]
 8003d3a:	4909      	ldr	r1, [pc, #36]	; (8003d60 <siprintf+0x3c>)
 8003d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d40:	9105      	str	r1, [sp, #20]
 8003d42:	6800      	ldr	r0, [r0, #0]
 8003d44:	9301      	str	r3, [sp, #4]
 8003d46:	a902      	add	r1, sp, #8
 8003d48:	f002 fea4 	bl	8006a94 <_svfiprintf_r>
 8003d4c:	9b02      	ldr	r3, [sp, #8]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	701a      	strb	r2, [r3, #0]
 8003d52:	b01c      	add	sp, #112	; 0x70
 8003d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d58:	b003      	add	sp, #12
 8003d5a:	4770      	bx	lr
 8003d5c:	20000000 	.word	0x20000000
 8003d60:	ffff0208 	.word	0xffff0208

08003d64 <sulp>:
 8003d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d68:	460f      	mov	r7, r1
 8003d6a:	4690      	mov	r8, r2
 8003d6c:	f002 fbfc 	bl	8006568 <__ulp>
 8003d70:	4604      	mov	r4, r0
 8003d72:	460d      	mov	r5, r1
 8003d74:	f1b8 0f00 	cmp.w	r8, #0
 8003d78:	d011      	beq.n	8003d9e <sulp+0x3a>
 8003d7a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003d7e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	dd0b      	ble.n	8003d9e <sulp+0x3a>
 8003d86:	051b      	lsls	r3, r3, #20
 8003d88:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003d8c:	2400      	movs	r4, #0
 8003d8e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003d92:	4622      	mov	r2, r4
 8003d94:	462b      	mov	r3, r5
 8003d96:	f7fc fc37 	bl	8000608 <__aeabi_dmul>
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	460d      	mov	r5, r1
 8003d9e:	4620      	mov	r0, r4
 8003da0:	4629      	mov	r1, r5
 8003da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003da8 <_strtod_l>:
 8003da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dac:	b09f      	sub	sp, #124	; 0x7c
 8003dae:	469b      	mov	fp, r3
 8003db0:	2300      	movs	r3, #0
 8003db2:	931a      	str	r3, [sp, #104]	; 0x68
 8003db4:	4b9e      	ldr	r3, [pc, #632]	; (8004030 <_strtod_l+0x288>)
 8003db6:	9215      	str	r2, [sp, #84]	; 0x54
 8003db8:	681f      	ldr	r7, [r3, #0]
 8003dba:	4682      	mov	sl, r0
 8003dbc:	4638      	mov	r0, r7
 8003dbe:	460e      	mov	r6, r1
 8003dc0:	f7fc fa0e 	bl	80001e0 <strlen>
 8003dc4:	f04f 0800 	mov.w	r8, #0
 8003dc8:	4604      	mov	r4, r0
 8003dca:	f04f 0900 	mov.w	r9, #0
 8003dce:	9619      	str	r6, [sp, #100]	; 0x64
 8003dd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003dd2:	781a      	ldrb	r2, [r3, #0]
 8003dd4:	2a2b      	cmp	r2, #43	; 0x2b
 8003dd6:	d04c      	beq.n	8003e72 <_strtod_l+0xca>
 8003dd8:	d83a      	bhi.n	8003e50 <_strtod_l+0xa8>
 8003dda:	2a0d      	cmp	r2, #13
 8003ddc:	d833      	bhi.n	8003e46 <_strtod_l+0x9e>
 8003dde:	2a08      	cmp	r2, #8
 8003de0:	d833      	bhi.n	8003e4a <_strtod_l+0xa2>
 8003de2:	2a00      	cmp	r2, #0
 8003de4:	d03d      	beq.n	8003e62 <_strtod_l+0xba>
 8003de6:	2300      	movs	r3, #0
 8003de8:	930a      	str	r3, [sp, #40]	; 0x28
 8003dea:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8003dec:	782b      	ldrb	r3, [r5, #0]
 8003dee:	2b30      	cmp	r3, #48	; 0x30
 8003df0:	f040 80aa 	bne.w	8003f48 <_strtod_l+0x1a0>
 8003df4:	786b      	ldrb	r3, [r5, #1]
 8003df6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003dfa:	2b58      	cmp	r3, #88	; 0x58
 8003dfc:	d166      	bne.n	8003ecc <_strtod_l+0x124>
 8003dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e00:	9301      	str	r3, [sp, #4]
 8003e02:	ab1a      	add	r3, sp, #104	; 0x68
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	4a8b      	ldr	r2, [pc, #556]	; (8004034 <_strtod_l+0x28c>)
 8003e08:	f8cd b008 	str.w	fp, [sp, #8]
 8003e0c:	ab1b      	add	r3, sp, #108	; 0x6c
 8003e0e:	a919      	add	r1, sp, #100	; 0x64
 8003e10:	4650      	mov	r0, sl
 8003e12:	f001 fd13 	bl	800583c <__gethex>
 8003e16:	f010 0607 	ands.w	r6, r0, #7
 8003e1a:	4604      	mov	r4, r0
 8003e1c:	d005      	beq.n	8003e2a <_strtod_l+0x82>
 8003e1e:	2e06      	cmp	r6, #6
 8003e20:	d129      	bne.n	8003e76 <_strtod_l+0xce>
 8003e22:	3501      	adds	r5, #1
 8003e24:	2300      	movs	r3, #0
 8003e26:	9519      	str	r5, [sp, #100]	; 0x64
 8003e28:	930a      	str	r3, [sp, #40]	; 0x28
 8003e2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f040 858a 	bne.w	8004946 <_strtod_l+0xb9e>
 8003e32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e34:	b1d3      	cbz	r3, 8003e6c <_strtod_l+0xc4>
 8003e36:	4642      	mov	r2, r8
 8003e38:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	4619      	mov	r1, r3
 8003e40:	b01f      	add	sp, #124	; 0x7c
 8003e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e46:	2a20      	cmp	r2, #32
 8003e48:	d1cd      	bne.n	8003de6 <_strtod_l+0x3e>
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	9319      	str	r3, [sp, #100]	; 0x64
 8003e4e:	e7bf      	b.n	8003dd0 <_strtod_l+0x28>
 8003e50:	2a2d      	cmp	r2, #45	; 0x2d
 8003e52:	d1c8      	bne.n	8003de6 <_strtod_l+0x3e>
 8003e54:	2201      	movs	r2, #1
 8003e56:	920a      	str	r2, [sp, #40]	; 0x28
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	9219      	str	r2, [sp, #100]	; 0x64
 8003e5c:	785b      	ldrb	r3, [r3, #1]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1c3      	bne.n	8003dea <_strtod_l+0x42>
 8003e62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003e64:	9619      	str	r6, [sp, #100]	; 0x64
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f040 856b 	bne.w	8004942 <_strtod_l+0xb9a>
 8003e6c:	4642      	mov	r2, r8
 8003e6e:	464b      	mov	r3, r9
 8003e70:	e7e4      	b.n	8003e3c <_strtod_l+0x94>
 8003e72:	2200      	movs	r2, #0
 8003e74:	e7ef      	b.n	8003e56 <_strtod_l+0xae>
 8003e76:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003e78:	b13a      	cbz	r2, 8003e8a <_strtod_l+0xe2>
 8003e7a:	2135      	movs	r1, #53	; 0x35
 8003e7c:	a81c      	add	r0, sp, #112	; 0x70
 8003e7e:	f002 fc77 	bl	8006770 <__copybits>
 8003e82:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003e84:	4650      	mov	r0, sl
 8003e86:	f002 f843 	bl	8005f10 <_Bfree>
 8003e8a:	3e01      	subs	r6, #1
 8003e8c:	2e04      	cmp	r6, #4
 8003e8e:	d806      	bhi.n	8003e9e <_strtod_l+0xf6>
 8003e90:	e8df f006 	tbb	[pc, r6]
 8003e94:	1714030a 	.word	0x1714030a
 8003e98:	0a          	.byte	0x0a
 8003e99:	00          	.byte	0x00
 8003e9a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8003e9e:	0721      	lsls	r1, r4, #28
 8003ea0:	d5c3      	bpl.n	8003e2a <_strtod_l+0x82>
 8003ea2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8003ea6:	e7c0      	b.n	8003e2a <_strtod_l+0x82>
 8003ea8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8003eac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003eae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003eb2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003eb6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8003eba:	e7f0      	b.n	8003e9e <_strtod_l+0xf6>
 8003ebc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004038 <_strtod_l+0x290>
 8003ec0:	e7ed      	b.n	8003e9e <_strtod_l+0xf6>
 8003ec2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8003ec6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8003eca:	e7e8      	b.n	8003e9e <_strtod_l+0xf6>
 8003ecc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	9219      	str	r2, [sp, #100]	; 0x64
 8003ed2:	785b      	ldrb	r3, [r3, #1]
 8003ed4:	2b30      	cmp	r3, #48	; 0x30
 8003ed6:	d0f9      	beq.n	8003ecc <_strtod_l+0x124>
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0a6      	beq.n	8003e2a <_strtod_l+0x82>
 8003edc:	2301      	movs	r3, #1
 8003ede:	9307      	str	r3, [sp, #28]
 8003ee0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003ee2:	9308      	str	r3, [sp, #32]
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003eea:	469b      	mov	fp, r3
 8003eec:	220a      	movs	r2, #10
 8003eee:	9819      	ldr	r0, [sp, #100]	; 0x64
 8003ef0:	7805      	ldrb	r5, [r0, #0]
 8003ef2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003ef6:	b2d9      	uxtb	r1, r3
 8003ef8:	2909      	cmp	r1, #9
 8003efa:	d927      	bls.n	8003f4c <_strtod_l+0x1a4>
 8003efc:	4622      	mov	r2, r4
 8003efe:	4639      	mov	r1, r7
 8003f00:	f002 fede 	bl	8006cc0 <strncmp>
 8003f04:	2800      	cmp	r0, #0
 8003f06:	d033      	beq.n	8003f70 <_strtod_l+0x1c8>
 8003f08:	2000      	movs	r0, #0
 8003f0a:	462a      	mov	r2, r5
 8003f0c:	465c      	mov	r4, fp
 8003f0e:	9004      	str	r0, [sp, #16]
 8003f10:	4603      	mov	r3, r0
 8003f12:	2a65      	cmp	r2, #101	; 0x65
 8003f14:	d001      	beq.n	8003f1a <_strtod_l+0x172>
 8003f16:	2a45      	cmp	r2, #69	; 0x45
 8003f18:	d114      	bne.n	8003f44 <_strtod_l+0x19c>
 8003f1a:	b91c      	cbnz	r4, 8003f24 <_strtod_l+0x17c>
 8003f1c:	9a07      	ldr	r2, [sp, #28]
 8003f1e:	4302      	orrs	r2, r0
 8003f20:	d09f      	beq.n	8003e62 <_strtod_l+0xba>
 8003f22:	2400      	movs	r4, #0
 8003f24:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8003f26:	1c72      	adds	r2, r6, #1
 8003f28:	9219      	str	r2, [sp, #100]	; 0x64
 8003f2a:	7872      	ldrb	r2, [r6, #1]
 8003f2c:	2a2b      	cmp	r2, #43	; 0x2b
 8003f2e:	d079      	beq.n	8004024 <_strtod_l+0x27c>
 8003f30:	2a2d      	cmp	r2, #45	; 0x2d
 8003f32:	f000 8083 	beq.w	800403c <_strtod_l+0x294>
 8003f36:	2700      	movs	r7, #0
 8003f38:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8003f3c:	2909      	cmp	r1, #9
 8003f3e:	f240 8083 	bls.w	8004048 <_strtod_l+0x2a0>
 8003f42:	9619      	str	r6, [sp, #100]	; 0x64
 8003f44:	2500      	movs	r5, #0
 8003f46:	e09f      	b.n	8004088 <_strtod_l+0x2e0>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	e7c8      	b.n	8003ede <_strtod_l+0x136>
 8003f4c:	f1bb 0f08 	cmp.w	fp, #8
 8003f50:	bfd5      	itete	le
 8003f52:	9906      	ldrle	r1, [sp, #24]
 8003f54:	9905      	ldrgt	r1, [sp, #20]
 8003f56:	fb02 3301 	mlale	r3, r2, r1, r3
 8003f5a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8003f5e:	f100 0001 	add.w	r0, r0, #1
 8003f62:	bfd4      	ite	le
 8003f64:	9306      	strle	r3, [sp, #24]
 8003f66:	9305      	strgt	r3, [sp, #20]
 8003f68:	f10b 0b01 	add.w	fp, fp, #1
 8003f6c:	9019      	str	r0, [sp, #100]	; 0x64
 8003f6e:	e7be      	b.n	8003eee <_strtod_l+0x146>
 8003f70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003f72:	191a      	adds	r2, r3, r4
 8003f74:	9219      	str	r2, [sp, #100]	; 0x64
 8003f76:	5d1a      	ldrb	r2, [r3, r4]
 8003f78:	f1bb 0f00 	cmp.w	fp, #0
 8003f7c:	d036      	beq.n	8003fec <_strtod_l+0x244>
 8003f7e:	9004      	str	r0, [sp, #16]
 8003f80:	465c      	mov	r4, fp
 8003f82:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003f86:	2b09      	cmp	r3, #9
 8003f88:	d912      	bls.n	8003fb0 <_strtod_l+0x208>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e7c1      	b.n	8003f12 <_strtod_l+0x16a>
 8003f8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	9219      	str	r2, [sp, #100]	; 0x64
 8003f94:	785a      	ldrb	r2, [r3, #1]
 8003f96:	3001      	adds	r0, #1
 8003f98:	2a30      	cmp	r2, #48	; 0x30
 8003f9a:	d0f8      	beq.n	8003f8e <_strtod_l+0x1e6>
 8003f9c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	f200 84d5 	bhi.w	8004950 <_strtod_l+0xba8>
 8003fa6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003fa8:	9004      	str	r0, [sp, #16]
 8003faa:	2000      	movs	r0, #0
 8003fac:	9308      	str	r3, [sp, #32]
 8003fae:	4604      	mov	r4, r0
 8003fb0:	3a30      	subs	r2, #48	; 0x30
 8003fb2:	f100 0301 	add.w	r3, r0, #1
 8003fb6:	d013      	beq.n	8003fe0 <_strtod_l+0x238>
 8003fb8:	9904      	ldr	r1, [sp, #16]
 8003fba:	4419      	add	r1, r3
 8003fbc:	9104      	str	r1, [sp, #16]
 8003fbe:	4623      	mov	r3, r4
 8003fc0:	1905      	adds	r5, r0, r4
 8003fc2:	210a      	movs	r1, #10
 8003fc4:	42ab      	cmp	r3, r5
 8003fc6:	d113      	bne.n	8003ff0 <_strtod_l+0x248>
 8003fc8:	1823      	adds	r3, r4, r0
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	f104 0401 	add.w	r4, r4, #1
 8003fd0:	4404      	add	r4, r0
 8003fd2:	dc1b      	bgt.n	800400c <_strtod_l+0x264>
 8003fd4:	9906      	ldr	r1, [sp, #24]
 8003fd6:	230a      	movs	r3, #10
 8003fd8:	fb03 2301 	mla	r3, r3, r1, r2
 8003fdc:	9306      	str	r3, [sp, #24]
 8003fde:	2300      	movs	r3, #0
 8003fe0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003fe2:	1c51      	adds	r1, r2, #1
 8003fe4:	9119      	str	r1, [sp, #100]	; 0x64
 8003fe6:	7852      	ldrb	r2, [r2, #1]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	e7ca      	b.n	8003f82 <_strtod_l+0x1da>
 8003fec:	4658      	mov	r0, fp
 8003fee:	e7d3      	b.n	8003f98 <_strtod_l+0x1f0>
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	dc04      	bgt.n	8003ffe <_strtod_l+0x256>
 8003ff4:	9f06      	ldr	r7, [sp, #24]
 8003ff6:	434f      	muls	r7, r1
 8003ff8:	9706      	str	r7, [sp, #24]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	e7e2      	b.n	8003fc4 <_strtod_l+0x21c>
 8003ffe:	1c5f      	adds	r7, r3, #1
 8004000:	2f10      	cmp	r7, #16
 8004002:	bfde      	ittt	le
 8004004:	9f05      	ldrle	r7, [sp, #20]
 8004006:	434f      	mulle	r7, r1
 8004008:	9705      	strle	r7, [sp, #20]
 800400a:	e7f6      	b.n	8003ffa <_strtod_l+0x252>
 800400c:	2c10      	cmp	r4, #16
 800400e:	bfdf      	itttt	le
 8004010:	9905      	ldrle	r1, [sp, #20]
 8004012:	230a      	movle	r3, #10
 8004014:	fb03 2301 	mlale	r3, r3, r1, r2
 8004018:	9305      	strle	r3, [sp, #20]
 800401a:	e7e0      	b.n	8003fde <_strtod_l+0x236>
 800401c:	2300      	movs	r3, #0
 800401e:	9304      	str	r3, [sp, #16]
 8004020:	2301      	movs	r3, #1
 8004022:	e77b      	b.n	8003f1c <_strtod_l+0x174>
 8004024:	2700      	movs	r7, #0
 8004026:	1cb2      	adds	r2, r6, #2
 8004028:	9219      	str	r2, [sp, #100]	; 0x64
 800402a:	78b2      	ldrb	r2, [r6, #2]
 800402c:	e784      	b.n	8003f38 <_strtod_l+0x190>
 800402e:	bf00      	nop
 8004030:	08007b18 	.word	0x08007b18
 8004034:	080078d0 	.word	0x080078d0
 8004038:	7ff00000 	.word	0x7ff00000
 800403c:	2701      	movs	r7, #1
 800403e:	e7f2      	b.n	8004026 <_strtod_l+0x27e>
 8004040:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004042:	1c51      	adds	r1, r2, #1
 8004044:	9119      	str	r1, [sp, #100]	; 0x64
 8004046:	7852      	ldrb	r2, [r2, #1]
 8004048:	2a30      	cmp	r2, #48	; 0x30
 800404a:	d0f9      	beq.n	8004040 <_strtod_l+0x298>
 800404c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004050:	2908      	cmp	r1, #8
 8004052:	f63f af77 	bhi.w	8003f44 <_strtod_l+0x19c>
 8004056:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800405a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800405c:	9209      	str	r2, [sp, #36]	; 0x24
 800405e:	f04f 0e0a 	mov.w	lr, #10
 8004062:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004064:	1c51      	adds	r1, r2, #1
 8004066:	9119      	str	r1, [sp, #100]	; 0x64
 8004068:	7852      	ldrb	r2, [r2, #1]
 800406a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800406e:	2d09      	cmp	r5, #9
 8004070:	d935      	bls.n	80040de <_strtod_l+0x336>
 8004072:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004074:	1b49      	subs	r1, r1, r5
 8004076:	2908      	cmp	r1, #8
 8004078:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800407c:	dc02      	bgt.n	8004084 <_strtod_l+0x2dc>
 800407e:	4565      	cmp	r5, ip
 8004080:	bfa8      	it	ge
 8004082:	4665      	movge	r5, ip
 8004084:	b107      	cbz	r7, 8004088 <_strtod_l+0x2e0>
 8004086:	426d      	negs	r5, r5
 8004088:	2c00      	cmp	r4, #0
 800408a:	d14c      	bne.n	8004126 <_strtod_l+0x37e>
 800408c:	9907      	ldr	r1, [sp, #28]
 800408e:	4301      	orrs	r1, r0
 8004090:	f47f aecb 	bne.w	8003e2a <_strtod_l+0x82>
 8004094:	2b00      	cmp	r3, #0
 8004096:	f47f aee4 	bne.w	8003e62 <_strtod_l+0xba>
 800409a:	2a69      	cmp	r2, #105	; 0x69
 800409c:	d026      	beq.n	80040ec <_strtod_l+0x344>
 800409e:	dc23      	bgt.n	80040e8 <_strtod_l+0x340>
 80040a0:	2a49      	cmp	r2, #73	; 0x49
 80040a2:	d023      	beq.n	80040ec <_strtod_l+0x344>
 80040a4:	2a4e      	cmp	r2, #78	; 0x4e
 80040a6:	f47f aedc 	bne.w	8003e62 <_strtod_l+0xba>
 80040aa:	499d      	ldr	r1, [pc, #628]	; (8004320 <_strtod_l+0x578>)
 80040ac:	a819      	add	r0, sp, #100	; 0x64
 80040ae:	f001 fe13 	bl	8005cd8 <__match>
 80040b2:	2800      	cmp	r0, #0
 80040b4:	f43f aed5 	beq.w	8003e62 <_strtod_l+0xba>
 80040b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b28      	cmp	r3, #40	; 0x28
 80040be:	d12c      	bne.n	800411a <_strtod_l+0x372>
 80040c0:	4998      	ldr	r1, [pc, #608]	; (8004324 <_strtod_l+0x57c>)
 80040c2:	aa1c      	add	r2, sp, #112	; 0x70
 80040c4:	a819      	add	r0, sp, #100	; 0x64
 80040c6:	f001 fe1b 	bl	8005d00 <__hexnan>
 80040ca:	2805      	cmp	r0, #5
 80040cc:	d125      	bne.n	800411a <_strtod_l+0x372>
 80040ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80040d0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80040d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80040d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80040dc:	e6a5      	b.n	8003e2a <_strtod_l+0x82>
 80040de:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80040e2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80040e6:	e7bc      	b.n	8004062 <_strtod_l+0x2ba>
 80040e8:	2a6e      	cmp	r2, #110	; 0x6e
 80040ea:	e7dc      	b.n	80040a6 <_strtod_l+0x2fe>
 80040ec:	498e      	ldr	r1, [pc, #568]	; (8004328 <_strtod_l+0x580>)
 80040ee:	a819      	add	r0, sp, #100	; 0x64
 80040f0:	f001 fdf2 	bl	8005cd8 <__match>
 80040f4:	2800      	cmp	r0, #0
 80040f6:	f43f aeb4 	beq.w	8003e62 <_strtod_l+0xba>
 80040fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80040fc:	498b      	ldr	r1, [pc, #556]	; (800432c <_strtod_l+0x584>)
 80040fe:	3b01      	subs	r3, #1
 8004100:	a819      	add	r0, sp, #100	; 0x64
 8004102:	9319      	str	r3, [sp, #100]	; 0x64
 8004104:	f001 fde8 	bl	8005cd8 <__match>
 8004108:	b910      	cbnz	r0, 8004110 <_strtod_l+0x368>
 800410a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800410c:	3301      	adds	r3, #1
 800410e:	9319      	str	r3, [sp, #100]	; 0x64
 8004110:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8004330 <_strtod_l+0x588>
 8004114:	f04f 0800 	mov.w	r8, #0
 8004118:	e687      	b.n	8003e2a <_strtod_l+0x82>
 800411a:	4886      	ldr	r0, [pc, #536]	; (8004334 <_strtod_l+0x58c>)
 800411c:	f002 fdba 	bl	8006c94 <nan>
 8004120:	4680      	mov	r8, r0
 8004122:	4689      	mov	r9, r1
 8004124:	e681      	b.n	8003e2a <_strtod_l+0x82>
 8004126:	9b04      	ldr	r3, [sp, #16]
 8004128:	9806      	ldr	r0, [sp, #24]
 800412a:	1aeb      	subs	r3, r5, r3
 800412c:	f1bb 0f00 	cmp.w	fp, #0
 8004130:	bf08      	it	eq
 8004132:	46a3      	moveq	fp, r4
 8004134:	2c10      	cmp	r4, #16
 8004136:	9307      	str	r3, [sp, #28]
 8004138:	4626      	mov	r6, r4
 800413a:	bfa8      	it	ge
 800413c:	2610      	movge	r6, #16
 800413e:	f7fc f9e9 	bl	8000514 <__aeabi_ui2d>
 8004142:	2c09      	cmp	r4, #9
 8004144:	4680      	mov	r8, r0
 8004146:	4689      	mov	r9, r1
 8004148:	dd13      	ble.n	8004172 <_strtod_l+0x3ca>
 800414a:	4b7b      	ldr	r3, [pc, #492]	; (8004338 <_strtod_l+0x590>)
 800414c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004150:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004154:	f7fc fa58 	bl	8000608 <__aeabi_dmul>
 8004158:	4680      	mov	r8, r0
 800415a:	9805      	ldr	r0, [sp, #20]
 800415c:	4689      	mov	r9, r1
 800415e:	f7fc f9d9 	bl	8000514 <__aeabi_ui2d>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	4640      	mov	r0, r8
 8004168:	4649      	mov	r1, r9
 800416a:	f7fc f897 	bl	800029c <__adddf3>
 800416e:	4680      	mov	r8, r0
 8004170:	4689      	mov	r9, r1
 8004172:	2c0f      	cmp	r4, #15
 8004174:	dc36      	bgt.n	80041e4 <_strtod_l+0x43c>
 8004176:	9b07      	ldr	r3, [sp, #28]
 8004178:	2b00      	cmp	r3, #0
 800417a:	f43f ae56 	beq.w	8003e2a <_strtod_l+0x82>
 800417e:	dd22      	ble.n	80041c6 <_strtod_l+0x41e>
 8004180:	2b16      	cmp	r3, #22
 8004182:	dc09      	bgt.n	8004198 <_strtod_l+0x3f0>
 8004184:	496c      	ldr	r1, [pc, #432]	; (8004338 <_strtod_l+0x590>)
 8004186:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800418a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800418e:	4642      	mov	r2, r8
 8004190:	464b      	mov	r3, r9
 8004192:	f7fc fa39 	bl	8000608 <__aeabi_dmul>
 8004196:	e7c3      	b.n	8004120 <_strtod_l+0x378>
 8004198:	9a07      	ldr	r2, [sp, #28]
 800419a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800419e:	4293      	cmp	r3, r2
 80041a0:	db20      	blt.n	80041e4 <_strtod_l+0x43c>
 80041a2:	4d65      	ldr	r5, [pc, #404]	; (8004338 <_strtod_l+0x590>)
 80041a4:	f1c4 040f 	rsb	r4, r4, #15
 80041a8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80041ac:	4642      	mov	r2, r8
 80041ae:	464b      	mov	r3, r9
 80041b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041b4:	f7fc fa28 	bl	8000608 <__aeabi_dmul>
 80041b8:	9b07      	ldr	r3, [sp, #28]
 80041ba:	1b1c      	subs	r4, r3, r4
 80041bc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80041c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80041c4:	e7e5      	b.n	8004192 <_strtod_l+0x3ea>
 80041c6:	9b07      	ldr	r3, [sp, #28]
 80041c8:	3316      	adds	r3, #22
 80041ca:	db0b      	blt.n	80041e4 <_strtod_l+0x43c>
 80041cc:	9b04      	ldr	r3, [sp, #16]
 80041ce:	1b5d      	subs	r5, r3, r5
 80041d0:	4b59      	ldr	r3, [pc, #356]	; (8004338 <_strtod_l+0x590>)
 80041d2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80041d6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80041da:	4640      	mov	r0, r8
 80041dc:	4649      	mov	r1, r9
 80041de:	f7fc fb3d 	bl	800085c <__aeabi_ddiv>
 80041e2:	e79d      	b.n	8004120 <_strtod_l+0x378>
 80041e4:	9b07      	ldr	r3, [sp, #28]
 80041e6:	1ba6      	subs	r6, r4, r6
 80041e8:	441e      	add	r6, r3
 80041ea:	2e00      	cmp	r6, #0
 80041ec:	dd74      	ble.n	80042d8 <_strtod_l+0x530>
 80041ee:	f016 030f 	ands.w	r3, r6, #15
 80041f2:	d00a      	beq.n	800420a <_strtod_l+0x462>
 80041f4:	4950      	ldr	r1, [pc, #320]	; (8004338 <_strtod_l+0x590>)
 80041f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80041fa:	4642      	mov	r2, r8
 80041fc:	464b      	mov	r3, r9
 80041fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004202:	f7fc fa01 	bl	8000608 <__aeabi_dmul>
 8004206:	4680      	mov	r8, r0
 8004208:	4689      	mov	r9, r1
 800420a:	f036 060f 	bics.w	r6, r6, #15
 800420e:	d052      	beq.n	80042b6 <_strtod_l+0x50e>
 8004210:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8004214:	dd27      	ble.n	8004266 <_strtod_l+0x4be>
 8004216:	f04f 0b00 	mov.w	fp, #0
 800421a:	f8cd b010 	str.w	fp, [sp, #16]
 800421e:	f8cd b020 	str.w	fp, [sp, #32]
 8004222:	f8cd b018 	str.w	fp, [sp, #24]
 8004226:	2322      	movs	r3, #34	; 0x22
 8004228:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8004330 <_strtod_l+0x588>
 800422c:	f8ca 3000 	str.w	r3, [sl]
 8004230:	f04f 0800 	mov.w	r8, #0
 8004234:	9b08      	ldr	r3, [sp, #32]
 8004236:	2b00      	cmp	r3, #0
 8004238:	f43f adf7 	beq.w	8003e2a <_strtod_l+0x82>
 800423c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800423e:	4650      	mov	r0, sl
 8004240:	f001 fe66 	bl	8005f10 <_Bfree>
 8004244:	9906      	ldr	r1, [sp, #24]
 8004246:	4650      	mov	r0, sl
 8004248:	f001 fe62 	bl	8005f10 <_Bfree>
 800424c:	9904      	ldr	r1, [sp, #16]
 800424e:	4650      	mov	r0, sl
 8004250:	f001 fe5e 	bl	8005f10 <_Bfree>
 8004254:	9908      	ldr	r1, [sp, #32]
 8004256:	4650      	mov	r0, sl
 8004258:	f001 fe5a 	bl	8005f10 <_Bfree>
 800425c:	4659      	mov	r1, fp
 800425e:	4650      	mov	r0, sl
 8004260:	f001 fe56 	bl	8005f10 <_Bfree>
 8004264:	e5e1      	b.n	8003e2a <_strtod_l+0x82>
 8004266:	4b35      	ldr	r3, [pc, #212]	; (800433c <_strtod_l+0x594>)
 8004268:	9305      	str	r3, [sp, #20]
 800426a:	2300      	movs	r3, #0
 800426c:	1136      	asrs	r6, r6, #4
 800426e:	4640      	mov	r0, r8
 8004270:	4649      	mov	r1, r9
 8004272:	461f      	mov	r7, r3
 8004274:	2e01      	cmp	r6, #1
 8004276:	dc21      	bgt.n	80042bc <_strtod_l+0x514>
 8004278:	b10b      	cbz	r3, 800427e <_strtod_l+0x4d6>
 800427a:	4680      	mov	r8, r0
 800427c:	4689      	mov	r9, r1
 800427e:	4b2f      	ldr	r3, [pc, #188]	; (800433c <_strtod_l+0x594>)
 8004280:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004284:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004288:	4642      	mov	r2, r8
 800428a:	464b      	mov	r3, r9
 800428c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004290:	f7fc f9ba 	bl	8000608 <__aeabi_dmul>
 8004294:	4b26      	ldr	r3, [pc, #152]	; (8004330 <_strtod_l+0x588>)
 8004296:	460a      	mov	r2, r1
 8004298:	400b      	ands	r3, r1
 800429a:	4929      	ldr	r1, [pc, #164]	; (8004340 <_strtod_l+0x598>)
 800429c:	428b      	cmp	r3, r1
 800429e:	4680      	mov	r8, r0
 80042a0:	d8b9      	bhi.n	8004216 <_strtod_l+0x46e>
 80042a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80042a6:	428b      	cmp	r3, r1
 80042a8:	bf86      	itte	hi
 80042aa:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 8004344 <_strtod_l+0x59c>
 80042ae:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80042b2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80042b6:	2300      	movs	r3, #0
 80042b8:	9305      	str	r3, [sp, #20]
 80042ba:	e07f      	b.n	80043bc <_strtod_l+0x614>
 80042bc:	07f2      	lsls	r2, r6, #31
 80042be:	d505      	bpl.n	80042cc <_strtod_l+0x524>
 80042c0:	9b05      	ldr	r3, [sp, #20]
 80042c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c6:	f7fc f99f 	bl	8000608 <__aeabi_dmul>
 80042ca:	2301      	movs	r3, #1
 80042cc:	9a05      	ldr	r2, [sp, #20]
 80042ce:	3208      	adds	r2, #8
 80042d0:	3701      	adds	r7, #1
 80042d2:	1076      	asrs	r6, r6, #1
 80042d4:	9205      	str	r2, [sp, #20]
 80042d6:	e7cd      	b.n	8004274 <_strtod_l+0x4cc>
 80042d8:	d0ed      	beq.n	80042b6 <_strtod_l+0x50e>
 80042da:	4276      	negs	r6, r6
 80042dc:	f016 020f 	ands.w	r2, r6, #15
 80042e0:	d00a      	beq.n	80042f8 <_strtod_l+0x550>
 80042e2:	4b15      	ldr	r3, [pc, #84]	; (8004338 <_strtod_l+0x590>)
 80042e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80042e8:	4640      	mov	r0, r8
 80042ea:	4649      	mov	r1, r9
 80042ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f0:	f7fc fab4 	bl	800085c <__aeabi_ddiv>
 80042f4:	4680      	mov	r8, r0
 80042f6:	4689      	mov	r9, r1
 80042f8:	1136      	asrs	r6, r6, #4
 80042fa:	d0dc      	beq.n	80042b6 <_strtod_l+0x50e>
 80042fc:	2e1f      	cmp	r6, #31
 80042fe:	dd23      	ble.n	8004348 <_strtod_l+0x5a0>
 8004300:	f04f 0b00 	mov.w	fp, #0
 8004304:	f8cd b010 	str.w	fp, [sp, #16]
 8004308:	f8cd b020 	str.w	fp, [sp, #32]
 800430c:	f8cd b018 	str.w	fp, [sp, #24]
 8004310:	2322      	movs	r3, #34	; 0x22
 8004312:	f04f 0800 	mov.w	r8, #0
 8004316:	f04f 0900 	mov.w	r9, #0
 800431a:	f8ca 3000 	str.w	r3, [sl]
 800431e:	e789      	b.n	8004234 <_strtod_l+0x48c>
 8004320:	080078a1 	.word	0x080078a1
 8004324:	080078e4 	.word	0x080078e4
 8004328:	08007899 	.word	0x08007899
 800432c:	08007a24 	.word	0x08007a24
 8004330:	7ff00000 	.word	0x7ff00000
 8004334:	08007cd0 	.word	0x08007cd0
 8004338:	08007bb0 	.word	0x08007bb0
 800433c:	08007b88 	.word	0x08007b88
 8004340:	7ca00000 	.word	0x7ca00000
 8004344:	7fefffff 	.word	0x7fefffff
 8004348:	f016 0310 	ands.w	r3, r6, #16
 800434c:	bf18      	it	ne
 800434e:	236a      	movne	r3, #106	; 0x6a
 8004350:	4fb1      	ldr	r7, [pc, #708]	; (8004618 <_strtod_l+0x870>)
 8004352:	9305      	str	r3, [sp, #20]
 8004354:	4640      	mov	r0, r8
 8004356:	4649      	mov	r1, r9
 8004358:	2300      	movs	r3, #0
 800435a:	07f2      	lsls	r2, r6, #31
 800435c:	d504      	bpl.n	8004368 <_strtod_l+0x5c0>
 800435e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004362:	f7fc f951 	bl	8000608 <__aeabi_dmul>
 8004366:	2301      	movs	r3, #1
 8004368:	1076      	asrs	r6, r6, #1
 800436a:	f107 0708 	add.w	r7, r7, #8
 800436e:	d1f4      	bne.n	800435a <_strtod_l+0x5b2>
 8004370:	b10b      	cbz	r3, 8004376 <_strtod_l+0x5ce>
 8004372:	4680      	mov	r8, r0
 8004374:	4689      	mov	r9, r1
 8004376:	9b05      	ldr	r3, [sp, #20]
 8004378:	b1c3      	cbz	r3, 80043ac <_strtod_l+0x604>
 800437a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800437e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004382:	2b00      	cmp	r3, #0
 8004384:	4649      	mov	r1, r9
 8004386:	dd11      	ble.n	80043ac <_strtod_l+0x604>
 8004388:	2b1f      	cmp	r3, #31
 800438a:	f340 8124 	ble.w	80045d6 <_strtod_l+0x82e>
 800438e:	2b34      	cmp	r3, #52	; 0x34
 8004390:	bfde      	ittt	le
 8004392:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004396:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800439a:	fa03 f202 	lslle.w	r2, r3, r2
 800439e:	f04f 0800 	mov.w	r8, #0
 80043a2:	bfcc      	ite	gt
 80043a4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80043a8:	ea02 0901 	andle.w	r9, r2, r1
 80043ac:	2200      	movs	r2, #0
 80043ae:	2300      	movs	r3, #0
 80043b0:	4640      	mov	r0, r8
 80043b2:	4649      	mov	r1, r9
 80043b4:	f7fc fb90 	bl	8000ad8 <__aeabi_dcmpeq>
 80043b8:	2800      	cmp	r0, #0
 80043ba:	d1a1      	bne.n	8004300 <_strtod_l+0x558>
 80043bc:	9b06      	ldr	r3, [sp, #24]
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	9908      	ldr	r1, [sp, #32]
 80043c2:	4623      	mov	r3, r4
 80043c4:	465a      	mov	r2, fp
 80043c6:	4650      	mov	r0, sl
 80043c8:	f001 fe0a 	bl	8005fe0 <__s2b>
 80043cc:	9008      	str	r0, [sp, #32]
 80043ce:	2800      	cmp	r0, #0
 80043d0:	f43f af21 	beq.w	8004216 <_strtod_l+0x46e>
 80043d4:	9b04      	ldr	r3, [sp, #16]
 80043d6:	1b5d      	subs	r5, r3, r5
 80043d8:	9b07      	ldr	r3, [sp, #28]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	bfb4      	ite	lt
 80043de:	462b      	movlt	r3, r5
 80043e0:	2300      	movge	r3, #0
 80043e2:	930e      	str	r3, [sp, #56]	; 0x38
 80043e4:	9b07      	ldr	r3, [sp, #28]
 80043e6:	f04f 0b00 	mov.w	fp, #0
 80043ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80043ee:	9314      	str	r3, [sp, #80]	; 0x50
 80043f0:	f8cd b010 	str.w	fp, [sp, #16]
 80043f4:	9b08      	ldr	r3, [sp, #32]
 80043f6:	4650      	mov	r0, sl
 80043f8:	6859      	ldr	r1, [r3, #4]
 80043fa:	f001 fd49 	bl	8005e90 <_Balloc>
 80043fe:	9006      	str	r0, [sp, #24]
 8004400:	2800      	cmp	r0, #0
 8004402:	f43f af10 	beq.w	8004226 <_strtod_l+0x47e>
 8004406:	9b08      	ldr	r3, [sp, #32]
 8004408:	691a      	ldr	r2, [r3, #16]
 800440a:	3202      	adds	r2, #2
 800440c:	f103 010c 	add.w	r1, r3, #12
 8004410:	0092      	lsls	r2, r2, #2
 8004412:	300c      	adds	r0, #12
 8004414:	f001 fd2e 	bl	8005e74 <memcpy>
 8004418:	ab1c      	add	r3, sp, #112	; 0x70
 800441a:	9301      	str	r3, [sp, #4]
 800441c:	ab1b      	add	r3, sp, #108	; 0x6c
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	4642      	mov	r2, r8
 8004422:	464b      	mov	r3, r9
 8004424:	4650      	mov	r0, sl
 8004426:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800442a:	f002 f917 	bl	800665c <__d2b>
 800442e:	901a      	str	r0, [sp, #104]	; 0x68
 8004430:	2800      	cmp	r0, #0
 8004432:	f43f aef8 	beq.w	8004226 <_strtod_l+0x47e>
 8004436:	2101      	movs	r1, #1
 8004438:	4650      	mov	r0, sl
 800443a:	f001 fe69 	bl	8006110 <__i2b>
 800443e:	9004      	str	r0, [sp, #16]
 8004440:	4603      	mov	r3, r0
 8004442:	2800      	cmp	r0, #0
 8004444:	f43f aeef 	beq.w	8004226 <_strtod_l+0x47e>
 8004448:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800444a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800444c:	2d00      	cmp	r5, #0
 800444e:	bfab      	itete	ge
 8004450:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004452:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8004454:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8004456:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004458:	bfac      	ite	ge
 800445a:	18ee      	addge	r6, r5, r3
 800445c:	1b5c      	sublt	r4, r3, r5
 800445e:	9b05      	ldr	r3, [sp, #20]
 8004460:	1aed      	subs	r5, r5, r3
 8004462:	4415      	add	r5, r2
 8004464:	4b6d      	ldr	r3, [pc, #436]	; (800461c <_strtod_l+0x874>)
 8004466:	3d01      	subs	r5, #1
 8004468:	429d      	cmp	r5, r3
 800446a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800446e:	f280 80c4 	bge.w	80045fa <_strtod_l+0x852>
 8004472:	1b5b      	subs	r3, r3, r5
 8004474:	2b1f      	cmp	r3, #31
 8004476:	eba2 0203 	sub.w	r2, r2, r3
 800447a:	f04f 0701 	mov.w	r7, #1
 800447e:	f300 80b1 	bgt.w	80045e4 <_strtod_l+0x83c>
 8004482:	fa07 f303 	lsl.w	r3, r7, r3
 8004486:	930f      	str	r3, [sp, #60]	; 0x3c
 8004488:	2500      	movs	r5, #0
 800448a:	18b7      	adds	r7, r6, r2
 800448c:	9b05      	ldr	r3, [sp, #20]
 800448e:	42be      	cmp	r6, r7
 8004490:	4414      	add	r4, r2
 8004492:	441c      	add	r4, r3
 8004494:	4633      	mov	r3, r6
 8004496:	bfa8      	it	ge
 8004498:	463b      	movge	r3, r7
 800449a:	42a3      	cmp	r3, r4
 800449c:	bfa8      	it	ge
 800449e:	4623      	movge	r3, r4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	bfc2      	ittt	gt
 80044a4:	1aff      	subgt	r7, r7, r3
 80044a6:	1ae4      	subgt	r4, r4, r3
 80044a8:	1af6      	subgt	r6, r6, r3
 80044aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	dd17      	ble.n	80044e0 <_strtod_l+0x738>
 80044b0:	9904      	ldr	r1, [sp, #16]
 80044b2:	461a      	mov	r2, r3
 80044b4:	4650      	mov	r0, sl
 80044b6:	f001 fee9 	bl	800628c <__pow5mult>
 80044ba:	9004      	str	r0, [sp, #16]
 80044bc:	2800      	cmp	r0, #0
 80044be:	f43f aeb2 	beq.w	8004226 <_strtod_l+0x47e>
 80044c2:	4601      	mov	r1, r0
 80044c4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80044c6:	4650      	mov	r0, sl
 80044c8:	f001 fe38 	bl	800613c <__multiply>
 80044cc:	9009      	str	r0, [sp, #36]	; 0x24
 80044ce:	2800      	cmp	r0, #0
 80044d0:	f43f aea9 	beq.w	8004226 <_strtod_l+0x47e>
 80044d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80044d6:	4650      	mov	r0, sl
 80044d8:	f001 fd1a 	bl	8005f10 <_Bfree>
 80044dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044de:	931a      	str	r3, [sp, #104]	; 0x68
 80044e0:	2f00      	cmp	r7, #0
 80044e2:	f300 808e 	bgt.w	8004602 <_strtod_l+0x85a>
 80044e6:	9b07      	ldr	r3, [sp, #28]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	dd08      	ble.n	80044fe <_strtod_l+0x756>
 80044ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80044ee:	9906      	ldr	r1, [sp, #24]
 80044f0:	4650      	mov	r0, sl
 80044f2:	f001 fecb 	bl	800628c <__pow5mult>
 80044f6:	9006      	str	r0, [sp, #24]
 80044f8:	2800      	cmp	r0, #0
 80044fa:	f43f ae94 	beq.w	8004226 <_strtod_l+0x47e>
 80044fe:	2c00      	cmp	r4, #0
 8004500:	dd08      	ble.n	8004514 <_strtod_l+0x76c>
 8004502:	9906      	ldr	r1, [sp, #24]
 8004504:	4622      	mov	r2, r4
 8004506:	4650      	mov	r0, sl
 8004508:	f001 ff1a 	bl	8006340 <__lshift>
 800450c:	9006      	str	r0, [sp, #24]
 800450e:	2800      	cmp	r0, #0
 8004510:	f43f ae89 	beq.w	8004226 <_strtod_l+0x47e>
 8004514:	2e00      	cmp	r6, #0
 8004516:	dd08      	ble.n	800452a <_strtod_l+0x782>
 8004518:	9904      	ldr	r1, [sp, #16]
 800451a:	4632      	mov	r2, r6
 800451c:	4650      	mov	r0, sl
 800451e:	f001 ff0f 	bl	8006340 <__lshift>
 8004522:	9004      	str	r0, [sp, #16]
 8004524:	2800      	cmp	r0, #0
 8004526:	f43f ae7e 	beq.w	8004226 <_strtod_l+0x47e>
 800452a:	9a06      	ldr	r2, [sp, #24]
 800452c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800452e:	4650      	mov	r0, sl
 8004530:	f001 ff92 	bl	8006458 <__mdiff>
 8004534:	4683      	mov	fp, r0
 8004536:	2800      	cmp	r0, #0
 8004538:	f43f ae75 	beq.w	8004226 <_strtod_l+0x47e>
 800453c:	2400      	movs	r4, #0
 800453e:	68c3      	ldr	r3, [r0, #12]
 8004540:	9904      	ldr	r1, [sp, #16]
 8004542:	60c4      	str	r4, [r0, #12]
 8004544:	930b      	str	r3, [sp, #44]	; 0x2c
 8004546:	f001 ff6b 	bl	8006420 <__mcmp>
 800454a:	42a0      	cmp	r0, r4
 800454c:	da6c      	bge.n	8004628 <_strtod_l+0x880>
 800454e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004550:	ea53 0308 	orrs.w	r3, r3, r8
 8004554:	f040 8092 	bne.w	800467c <_strtod_l+0x8d4>
 8004558:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800455c:	2b00      	cmp	r3, #0
 800455e:	f040 808d 	bne.w	800467c <_strtod_l+0x8d4>
 8004562:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004566:	0d1b      	lsrs	r3, r3, #20
 8004568:	051b      	lsls	r3, r3, #20
 800456a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800456e:	f240 8085 	bls.w	800467c <_strtod_l+0x8d4>
 8004572:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004576:	b91b      	cbnz	r3, 8004580 <_strtod_l+0x7d8>
 8004578:	f8db 3010 	ldr.w	r3, [fp, #16]
 800457c:	2b01      	cmp	r3, #1
 800457e:	dd7d      	ble.n	800467c <_strtod_l+0x8d4>
 8004580:	4659      	mov	r1, fp
 8004582:	2201      	movs	r2, #1
 8004584:	4650      	mov	r0, sl
 8004586:	f001 fedb 	bl	8006340 <__lshift>
 800458a:	9904      	ldr	r1, [sp, #16]
 800458c:	4683      	mov	fp, r0
 800458e:	f001 ff47 	bl	8006420 <__mcmp>
 8004592:	2800      	cmp	r0, #0
 8004594:	dd72      	ble.n	800467c <_strtod_l+0x8d4>
 8004596:	9905      	ldr	r1, [sp, #20]
 8004598:	4a21      	ldr	r2, [pc, #132]	; (8004620 <_strtod_l+0x878>)
 800459a:	464b      	mov	r3, r9
 800459c:	2900      	cmp	r1, #0
 800459e:	f000 808d 	beq.w	80046bc <_strtod_l+0x914>
 80045a2:	ea02 0109 	and.w	r1, r2, r9
 80045a6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80045aa:	f300 8087 	bgt.w	80046bc <_strtod_l+0x914>
 80045ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80045b2:	f77f aead 	ble.w	8004310 <_strtod_l+0x568>
 80045b6:	4b1b      	ldr	r3, [pc, #108]	; (8004624 <_strtod_l+0x87c>)
 80045b8:	4640      	mov	r0, r8
 80045ba:	4649      	mov	r1, r9
 80045bc:	2200      	movs	r2, #0
 80045be:	f7fc f823 	bl	8000608 <__aeabi_dmul>
 80045c2:	460b      	mov	r3, r1
 80045c4:	4303      	orrs	r3, r0
 80045c6:	bf08      	it	eq
 80045c8:	2322      	moveq	r3, #34	; 0x22
 80045ca:	4680      	mov	r8, r0
 80045cc:	4689      	mov	r9, r1
 80045ce:	bf08      	it	eq
 80045d0:	f8ca 3000 	streq.w	r3, [sl]
 80045d4:	e632      	b.n	800423c <_strtod_l+0x494>
 80045d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	ea03 0808 	and.w	r8, r3, r8
 80045e2:	e6e3      	b.n	80043ac <_strtod_l+0x604>
 80045e4:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80045e8:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80045ec:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80045f0:	35e2      	adds	r5, #226	; 0xe2
 80045f2:	fa07 f505 	lsl.w	r5, r7, r5
 80045f6:	970f      	str	r7, [sp, #60]	; 0x3c
 80045f8:	e747      	b.n	800448a <_strtod_l+0x6e2>
 80045fa:	2301      	movs	r3, #1
 80045fc:	2500      	movs	r5, #0
 80045fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8004600:	e743      	b.n	800448a <_strtod_l+0x6e2>
 8004602:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004604:	463a      	mov	r2, r7
 8004606:	4650      	mov	r0, sl
 8004608:	f001 fe9a 	bl	8006340 <__lshift>
 800460c:	901a      	str	r0, [sp, #104]	; 0x68
 800460e:	2800      	cmp	r0, #0
 8004610:	f47f af69 	bne.w	80044e6 <_strtod_l+0x73e>
 8004614:	e607      	b.n	8004226 <_strtod_l+0x47e>
 8004616:	bf00      	nop
 8004618:	080078f8 	.word	0x080078f8
 800461c:	fffffc02 	.word	0xfffffc02
 8004620:	7ff00000 	.word	0x7ff00000
 8004624:	39500000 	.word	0x39500000
 8004628:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800462c:	d165      	bne.n	80046fa <_strtod_l+0x952>
 800462e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004630:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004634:	b35a      	cbz	r2, 800468e <_strtod_l+0x8e6>
 8004636:	4a9a      	ldr	r2, [pc, #616]	; (80048a0 <_strtod_l+0xaf8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d12b      	bne.n	8004694 <_strtod_l+0x8ec>
 800463c:	9b05      	ldr	r3, [sp, #20]
 800463e:	4641      	mov	r1, r8
 8004640:	b303      	cbz	r3, 8004684 <_strtod_l+0x8dc>
 8004642:	4b98      	ldr	r3, [pc, #608]	; (80048a4 <_strtod_l+0xafc>)
 8004644:	464a      	mov	r2, r9
 8004646:	4013      	ands	r3, r2
 8004648:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800464c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004650:	d81b      	bhi.n	800468a <_strtod_l+0x8e2>
 8004652:	0d1b      	lsrs	r3, r3, #20
 8004654:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	4299      	cmp	r1, r3
 800465e:	d119      	bne.n	8004694 <_strtod_l+0x8ec>
 8004660:	4b91      	ldr	r3, [pc, #580]	; (80048a8 <_strtod_l+0xb00>)
 8004662:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004664:	429a      	cmp	r2, r3
 8004666:	d102      	bne.n	800466e <_strtod_l+0x8c6>
 8004668:	3101      	adds	r1, #1
 800466a:	f43f addc 	beq.w	8004226 <_strtod_l+0x47e>
 800466e:	4b8d      	ldr	r3, [pc, #564]	; (80048a4 <_strtod_l+0xafc>)
 8004670:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004672:	401a      	ands	r2, r3
 8004674:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004678:	f04f 0800 	mov.w	r8, #0
 800467c:	9b05      	ldr	r3, [sp, #20]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d199      	bne.n	80045b6 <_strtod_l+0x80e>
 8004682:	e5db      	b.n	800423c <_strtod_l+0x494>
 8004684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004688:	e7e8      	b.n	800465c <_strtod_l+0x8b4>
 800468a:	4613      	mov	r3, r2
 800468c:	e7e6      	b.n	800465c <_strtod_l+0x8b4>
 800468e:	ea53 0308 	orrs.w	r3, r3, r8
 8004692:	d080      	beq.n	8004596 <_strtod_l+0x7ee>
 8004694:	b1e5      	cbz	r5, 80046d0 <_strtod_l+0x928>
 8004696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004698:	421d      	tst	r5, r3
 800469a:	d0ef      	beq.n	800467c <_strtod_l+0x8d4>
 800469c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800469e:	9a05      	ldr	r2, [sp, #20]
 80046a0:	4640      	mov	r0, r8
 80046a2:	4649      	mov	r1, r9
 80046a4:	b1c3      	cbz	r3, 80046d8 <_strtod_l+0x930>
 80046a6:	f7ff fb5d 	bl	8003d64 <sulp>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80046b2:	f7fb fdf3 	bl	800029c <__adddf3>
 80046b6:	4680      	mov	r8, r0
 80046b8:	4689      	mov	r9, r1
 80046ba:	e7df      	b.n	800467c <_strtod_l+0x8d4>
 80046bc:	4013      	ands	r3, r2
 80046be:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80046c2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80046c6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80046ca:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80046ce:	e7d5      	b.n	800467c <_strtod_l+0x8d4>
 80046d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046d2:	ea13 0f08 	tst.w	r3, r8
 80046d6:	e7e0      	b.n	800469a <_strtod_l+0x8f2>
 80046d8:	f7ff fb44 	bl	8003d64 <sulp>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80046e4:	f7fb fdd8 	bl	8000298 <__aeabi_dsub>
 80046e8:	2200      	movs	r2, #0
 80046ea:	2300      	movs	r3, #0
 80046ec:	4680      	mov	r8, r0
 80046ee:	4689      	mov	r9, r1
 80046f0:	f7fc f9f2 	bl	8000ad8 <__aeabi_dcmpeq>
 80046f4:	2800      	cmp	r0, #0
 80046f6:	d0c1      	beq.n	800467c <_strtod_l+0x8d4>
 80046f8:	e60a      	b.n	8004310 <_strtod_l+0x568>
 80046fa:	9904      	ldr	r1, [sp, #16]
 80046fc:	4658      	mov	r0, fp
 80046fe:	f002 f809 	bl	8006714 <__ratio>
 8004702:	2200      	movs	r2, #0
 8004704:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004708:	4606      	mov	r6, r0
 800470a:	460f      	mov	r7, r1
 800470c:	f7fc f9f8 	bl	8000b00 <__aeabi_dcmple>
 8004710:	2800      	cmp	r0, #0
 8004712:	d070      	beq.n	80047f6 <_strtod_l+0xa4e>
 8004714:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004716:	2b00      	cmp	r3, #0
 8004718:	d042      	beq.n	80047a0 <_strtod_l+0x9f8>
 800471a:	4f64      	ldr	r7, [pc, #400]	; (80048ac <_strtod_l+0xb04>)
 800471c:	2600      	movs	r6, #0
 800471e:	4d63      	ldr	r5, [pc, #396]	; (80048ac <_strtod_l+0xb04>)
 8004720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004722:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004726:	0d1b      	lsrs	r3, r3, #20
 8004728:	051b      	lsls	r3, r3, #20
 800472a:	930f      	str	r3, [sp, #60]	; 0x3c
 800472c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800472e:	4b60      	ldr	r3, [pc, #384]	; (80048b0 <_strtod_l+0xb08>)
 8004730:	429a      	cmp	r2, r3
 8004732:	f040 80c5 	bne.w	80048c0 <_strtod_l+0xb18>
 8004736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004738:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800473c:	4640      	mov	r0, r8
 800473e:	4649      	mov	r1, r9
 8004740:	f001 ff12 	bl	8006568 <__ulp>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4630      	mov	r0, r6
 800474a:	4639      	mov	r1, r7
 800474c:	f7fb ff5c 	bl	8000608 <__aeabi_dmul>
 8004750:	4642      	mov	r2, r8
 8004752:	464b      	mov	r3, r9
 8004754:	f7fb fda2 	bl	800029c <__adddf3>
 8004758:	460b      	mov	r3, r1
 800475a:	4952      	ldr	r1, [pc, #328]	; (80048a4 <_strtod_l+0xafc>)
 800475c:	4a55      	ldr	r2, [pc, #340]	; (80048b4 <_strtod_l+0xb0c>)
 800475e:	4019      	ands	r1, r3
 8004760:	4291      	cmp	r1, r2
 8004762:	4680      	mov	r8, r0
 8004764:	d95d      	bls.n	8004822 <_strtod_l+0xa7a>
 8004766:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004768:	4b4f      	ldr	r3, [pc, #316]	; (80048a8 <_strtod_l+0xb00>)
 800476a:	429a      	cmp	r2, r3
 800476c:	d103      	bne.n	8004776 <_strtod_l+0x9ce>
 800476e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004770:	3301      	adds	r3, #1
 8004772:	f43f ad58 	beq.w	8004226 <_strtod_l+0x47e>
 8004776:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80048a8 <_strtod_l+0xb00>
 800477a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800477e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004780:	4650      	mov	r0, sl
 8004782:	f001 fbc5 	bl	8005f10 <_Bfree>
 8004786:	9906      	ldr	r1, [sp, #24]
 8004788:	4650      	mov	r0, sl
 800478a:	f001 fbc1 	bl	8005f10 <_Bfree>
 800478e:	9904      	ldr	r1, [sp, #16]
 8004790:	4650      	mov	r0, sl
 8004792:	f001 fbbd 	bl	8005f10 <_Bfree>
 8004796:	4659      	mov	r1, fp
 8004798:	4650      	mov	r0, sl
 800479a:	f001 fbb9 	bl	8005f10 <_Bfree>
 800479e:	e629      	b.n	80043f4 <_strtod_l+0x64c>
 80047a0:	f1b8 0f00 	cmp.w	r8, #0
 80047a4:	d119      	bne.n	80047da <_strtod_l+0xa32>
 80047a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047ac:	b9e3      	cbnz	r3, 80047e8 <_strtod_l+0xa40>
 80047ae:	4b3f      	ldr	r3, [pc, #252]	; (80048ac <_strtod_l+0xb04>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	4630      	mov	r0, r6
 80047b4:	4639      	mov	r1, r7
 80047b6:	f7fc f999 	bl	8000aec <__aeabi_dcmplt>
 80047ba:	b9c8      	cbnz	r0, 80047f0 <_strtod_l+0xa48>
 80047bc:	4b3e      	ldr	r3, [pc, #248]	; (80048b8 <_strtod_l+0xb10>)
 80047be:	2200      	movs	r2, #0
 80047c0:	4630      	mov	r0, r6
 80047c2:	4639      	mov	r1, r7
 80047c4:	f7fb ff20 	bl	8000608 <__aeabi_dmul>
 80047c8:	4604      	mov	r4, r0
 80047ca:	460d      	mov	r5, r1
 80047cc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80047d0:	9416      	str	r4, [sp, #88]	; 0x58
 80047d2:	9317      	str	r3, [sp, #92]	; 0x5c
 80047d4:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80047d8:	e7a2      	b.n	8004720 <_strtod_l+0x978>
 80047da:	f1b8 0f01 	cmp.w	r8, #1
 80047de:	d103      	bne.n	80047e8 <_strtod_l+0xa40>
 80047e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f43f ad94 	beq.w	8004310 <_strtod_l+0x568>
 80047e8:	4f34      	ldr	r7, [pc, #208]	; (80048bc <_strtod_l+0xb14>)
 80047ea:	2600      	movs	r6, #0
 80047ec:	2400      	movs	r4, #0
 80047ee:	e796      	b.n	800471e <_strtod_l+0x976>
 80047f0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80047f2:	4d31      	ldr	r5, [pc, #196]	; (80048b8 <_strtod_l+0xb10>)
 80047f4:	e7ea      	b.n	80047cc <_strtod_l+0xa24>
 80047f6:	4b30      	ldr	r3, [pc, #192]	; (80048b8 <_strtod_l+0xb10>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	4630      	mov	r0, r6
 80047fc:	4639      	mov	r1, r7
 80047fe:	f7fb ff03 	bl	8000608 <__aeabi_dmul>
 8004802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004804:	4604      	mov	r4, r0
 8004806:	460d      	mov	r5, r1
 8004808:	b933      	cbnz	r3, 8004818 <_strtod_l+0xa70>
 800480a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800480e:	9010      	str	r0, [sp, #64]	; 0x40
 8004810:	9311      	str	r3, [sp, #68]	; 0x44
 8004812:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004816:	e783      	b.n	8004720 <_strtod_l+0x978>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004820:	e7f7      	b.n	8004812 <_strtod_l+0xa6a>
 8004822:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004826:	9b05      	ldr	r3, [sp, #20]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1a8      	bne.n	800477e <_strtod_l+0x9d6>
 800482c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004830:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004832:	0d1b      	lsrs	r3, r3, #20
 8004834:	051b      	lsls	r3, r3, #20
 8004836:	429a      	cmp	r2, r3
 8004838:	d1a1      	bne.n	800477e <_strtod_l+0x9d6>
 800483a:	4620      	mov	r0, r4
 800483c:	4629      	mov	r1, r5
 800483e:	f7fc fa2b 	bl	8000c98 <__aeabi_d2lz>
 8004842:	f7fb feb3 	bl	80005ac <__aeabi_l2d>
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	4620      	mov	r0, r4
 800484c:	4629      	mov	r1, r5
 800484e:	f7fb fd23 	bl	8000298 <__aeabi_dsub>
 8004852:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004854:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004858:	ea43 0308 	orr.w	r3, r3, r8
 800485c:	4313      	orrs	r3, r2
 800485e:	4604      	mov	r4, r0
 8004860:	460d      	mov	r5, r1
 8004862:	d068      	beq.n	8004936 <_strtod_l+0xb8e>
 8004864:	a30a      	add	r3, pc, #40	; (adr r3, 8004890 <_strtod_l+0xae8>)
 8004866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486a:	f7fc f93f 	bl	8000aec <__aeabi_dcmplt>
 800486e:	2800      	cmp	r0, #0
 8004870:	f47f ace4 	bne.w	800423c <_strtod_l+0x494>
 8004874:	a308      	add	r3, pc, #32	; (adr r3, 8004898 <_strtod_l+0xaf0>)
 8004876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487a:	4620      	mov	r0, r4
 800487c:	4629      	mov	r1, r5
 800487e:	f7fc f953 	bl	8000b28 <__aeabi_dcmpgt>
 8004882:	2800      	cmp	r0, #0
 8004884:	f43f af7b 	beq.w	800477e <_strtod_l+0x9d6>
 8004888:	e4d8      	b.n	800423c <_strtod_l+0x494>
 800488a:	bf00      	nop
 800488c:	f3af 8000 	nop.w
 8004890:	94a03595 	.word	0x94a03595
 8004894:	3fdfffff 	.word	0x3fdfffff
 8004898:	35afe535 	.word	0x35afe535
 800489c:	3fe00000 	.word	0x3fe00000
 80048a0:	000fffff 	.word	0x000fffff
 80048a4:	7ff00000 	.word	0x7ff00000
 80048a8:	7fefffff 	.word	0x7fefffff
 80048ac:	3ff00000 	.word	0x3ff00000
 80048b0:	7fe00000 	.word	0x7fe00000
 80048b4:	7c9fffff 	.word	0x7c9fffff
 80048b8:	3fe00000 	.word	0x3fe00000
 80048bc:	bff00000 	.word	0xbff00000
 80048c0:	9b05      	ldr	r3, [sp, #20]
 80048c2:	b313      	cbz	r3, 800490a <_strtod_l+0xb62>
 80048c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80048ca:	d81e      	bhi.n	800490a <_strtod_l+0xb62>
 80048cc:	a326      	add	r3, pc, #152	; (adr r3, 8004968 <_strtod_l+0xbc0>)
 80048ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d2:	4620      	mov	r0, r4
 80048d4:	4629      	mov	r1, r5
 80048d6:	f7fc f913 	bl	8000b00 <__aeabi_dcmple>
 80048da:	b190      	cbz	r0, 8004902 <_strtod_l+0xb5a>
 80048dc:	4629      	mov	r1, r5
 80048de:	4620      	mov	r0, r4
 80048e0:	f7fc f96a 	bl	8000bb8 <__aeabi_d2uiz>
 80048e4:	2801      	cmp	r0, #1
 80048e6:	bf38      	it	cc
 80048e8:	2001      	movcc	r0, #1
 80048ea:	f7fb fe13 	bl	8000514 <__aeabi_ui2d>
 80048ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048f0:	4604      	mov	r4, r0
 80048f2:	460d      	mov	r5, r1
 80048f4:	b9d3      	cbnz	r3, 800492c <_strtod_l+0xb84>
 80048f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80048fa:	9012      	str	r0, [sp, #72]	; 0x48
 80048fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80048fe:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004902:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004904:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004908:	1a9f      	subs	r7, r3, r2
 800490a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800490e:	f001 fe2b 	bl	8006568 <__ulp>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4630      	mov	r0, r6
 8004918:	4639      	mov	r1, r7
 800491a:	f7fb fe75 	bl	8000608 <__aeabi_dmul>
 800491e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004922:	f7fb fcbb 	bl	800029c <__adddf3>
 8004926:	4680      	mov	r8, r0
 8004928:	4689      	mov	r9, r1
 800492a:	e77c      	b.n	8004826 <_strtod_l+0xa7e>
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004934:	e7e3      	b.n	80048fe <_strtod_l+0xb56>
 8004936:	a30e      	add	r3, pc, #56	; (adr r3, 8004970 <_strtod_l+0xbc8>)
 8004938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493c:	f7fc f8d6 	bl	8000aec <__aeabi_dcmplt>
 8004940:	e79f      	b.n	8004882 <_strtod_l+0xada>
 8004942:	2300      	movs	r3, #0
 8004944:	930a      	str	r3, [sp, #40]	; 0x28
 8004946:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004948:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	f7ff ba71 	b.w	8003e32 <_strtod_l+0x8a>
 8004950:	2a65      	cmp	r2, #101	; 0x65
 8004952:	f43f ab63 	beq.w	800401c <_strtod_l+0x274>
 8004956:	2a45      	cmp	r2, #69	; 0x45
 8004958:	f43f ab60 	beq.w	800401c <_strtod_l+0x274>
 800495c:	2301      	movs	r3, #1
 800495e:	f7ff bb95 	b.w	800408c <_strtod_l+0x2e4>
 8004962:	bf00      	nop
 8004964:	f3af 8000 	nop.w
 8004968:	ffc00000 	.word	0xffc00000
 800496c:	41dfffff 	.word	0x41dfffff
 8004970:	94a03595 	.word	0x94a03595
 8004974:	3fcfffff 	.word	0x3fcfffff

08004978 <_strtod_r>:
 8004978:	4b01      	ldr	r3, [pc, #4]	; (8004980 <_strtod_r+0x8>)
 800497a:	f7ff ba15 	b.w	8003da8 <_strtod_l>
 800497e:	bf00      	nop
 8004980:	20000068 	.word	0x20000068

08004984 <_strtol_l.constprop.0>:
 8004984:	2b01      	cmp	r3, #1
 8004986:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800498a:	4680      	mov	r8, r0
 800498c:	d001      	beq.n	8004992 <_strtol_l.constprop.0+0xe>
 800498e:	2b24      	cmp	r3, #36	; 0x24
 8004990:	d906      	bls.n	80049a0 <_strtol_l.constprop.0+0x1c>
 8004992:	f7fe fb29 	bl	8002fe8 <__errno>
 8004996:	2316      	movs	r3, #22
 8004998:	6003      	str	r3, [r0, #0]
 800499a:	2000      	movs	r0, #0
 800499c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a0:	4f35      	ldr	r7, [pc, #212]	; (8004a78 <_strtol_l.constprop.0+0xf4>)
 80049a2:	460d      	mov	r5, r1
 80049a4:	4628      	mov	r0, r5
 80049a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80049aa:	5de6      	ldrb	r6, [r4, r7]
 80049ac:	f016 0608 	ands.w	r6, r6, #8
 80049b0:	d1f8      	bne.n	80049a4 <_strtol_l.constprop.0+0x20>
 80049b2:	2c2d      	cmp	r4, #45	; 0x2d
 80049b4:	d12f      	bne.n	8004a16 <_strtol_l.constprop.0+0x92>
 80049b6:	782c      	ldrb	r4, [r5, #0]
 80049b8:	2601      	movs	r6, #1
 80049ba:	1c85      	adds	r5, r0, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d057      	beq.n	8004a70 <_strtol_l.constprop.0+0xec>
 80049c0:	2b10      	cmp	r3, #16
 80049c2:	d109      	bne.n	80049d8 <_strtol_l.constprop.0+0x54>
 80049c4:	2c30      	cmp	r4, #48	; 0x30
 80049c6:	d107      	bne.n	80049d8 <_strtol_l.constprop.0+0x54>
 80049c8:	7828      	ldrb	r0, [r5, #0]
 80049ca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80049ce:	2858      	cmp	r0, #88	; 0x58
 80049d0:	d149      	bne.n	8004a66 <_strtol_l.constprop.0+0xe2>
 80049d2:	786c      	ldrb	r4, [r5, #1]
 80049d4:	2310      	movs	r3, #16
 80049d6:	3502      	adds	r5, #2
 80049d8:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80049dc:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80049e0:	2700      	movs	r7, #0
 80049e2:	fbbe f9f3 	udiv	r9, lr, r3
 80049e6:	4638      	mov	r0, r7
 80049e8:	fb03 ea19 	mls	sl, r3, r9, lr
 80049ec:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80049f0:	f1bc 0f09 	cmp.w	ip, #9
 80049f4:	d814      	bhi.n	8004a20 <_strtol_l.constprop.0+0x9c>
 80049f6:	4664      	mov	r4, ip
 80049f8:	42a3      	cmp	r3, r4
 80049fa:	dd22      	ble.n	8004a42 <_strtol_l.constprop.0+0xbe>
 80049fc:	2f00      	cmp	r7, #0
 80049fe:	db1d      	blt.n	8004a3c <_strtol_l.constprop.0+0xb8>
 8004a00:	4581      	cmp	r9, r0
 8004a02:	d31b      	bcc.n	8004a3c <_strtol_l.constprop.0+0xb8>
 8004a04:	d101      	bne.n	8004a0a <_strtol_l.constprop.0+0x86>
 8004a06:	45a2      	cmp	sl, r4
 8004a08:	db18      	blt.n	8004a3c <_strtol_l.constprop.0+0xb8>
 8004a0a:	fb00 4003 	mla	r0, r0, r3, r4
 8004a0e:	2701      	movs	r7, #1
 8004a10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a14:	e7ea      	b.n	80049ec <_strtol_l.constprop.0+0x68>
 8004a16:	2c2b      	cmp	r4, #43	; 0x2b
 8004a18:	bf04      	itt	eq
 8004a1a:	782c      	ldrbeq	r4, [r5, #0]
 8004a1c:	1c85      	addeq	r5, r0, #2
 8004a1e:	e7cd      	b.n	80049bc <_strtol_l.constprop.0+0x38>
 8004a20:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004a24:	f1bc 0f19 	cmp.w	ip, #25
 8004a28:	d801      	bhi.n	8004a2e <_strtol_l.constprop.0+0xaa>
 8004a2a:	3c37      	subs	r4, #55	; 0x37
 8004a2c:	e7e4      	b.n	80049f8 <_strtol_l.constprop.0+0x74>
 8004a2e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004a32:	f1bc 0f19 	cmp.w	ip, #25
 8004a36:	d804      	bhi.n	8004a42 <_strtol_l.constprop.0+0xbe>
 8004a38:	3c57      	subs	r4, #87	; 0x57
 8004a3a:	e7dd      	b.n	80049f8 <_strtol_l.constprop.0+0x74>
 8004a3c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004a40:	e7e6      	b.n	8004a10 <_strtol_l.constprop.0+0x8c>
 8004a42:	2f00      	cmp	r7, #0
 8004a44:	da07      	bge.n	8004a56 <_strtol_l.constprop.0+0xd2>
 8004a46:	2322      	movs	r3, #34	; 0x22
 8004a48:	f8c8 3000 	str.w	r3, [r8]
 8004a4c:	4670      	mov	r0, lr
 8004a4e:	2a00      	cmp	r2, #0
 8004a50:	d0a4      	beq.n	800499c <_strtol_l.constprop.0+0x18>
 8004a52:	1e69      	subs	r1, r5, #1
 8004a54:	e005      	b.n	8004a62 <_strtol_l.constprop.0+0xde>
 8004a56:	b106      	cbz	r6, 8004a5a <_strtol_l.constprop.0+0xd6>
 8004a58:	4240      	negs	r0, r0
 8004a5a:	2a00      	cmp	r2, #0
 8004a5c:	d09e      	beq.n	800499c <_strtol_l.constprop.0+0x18>
 8004a5e:	2f00      	cmp	r7, #0
 8004a60:	d1f7      	bne.n	8004a52 <_strtol_l.constprop.0+0xce>
 8004a62:	6011      	str	r1, [r2, #0]
 8004a64:	e79a      	b.n	800499c <_strtol_l.constprop.0+0x18>
 8004a66:	2430      	movs	r4, #48	; 0x30
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1b5      	bne.n	80049d8 <_strtol_l.constprop.0+0x54>
 8004a6c:	2308      	movs	r3, #8
 8004a6e:	e7b3      	b.n	80049d8 <_strtol_l.constprop.0+0x54>
 8004a70:	2c30      	cmp	r4, #48	; 0x30
 8004a72:	d0a9      	beq.n	80049c8 <_strtol_l.constprop.0+0x44>
 8004a74:	230a      	movs	r3, #10
 8004a76:	e7af      	b.n	80049d8 <_strtol_l.constprop.0+0x54>
 8004a78:	08007921 	.word	0x08007921

08004a7c <_strtol_r>:
 8004a7c:	f7ff bf82 	b.w	8004984 <_strtol_l.constprop.0>

08004a80 <quorem>:
 8004a80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a84:	6903      	ldr	r3, [r0, #16]
 8004a86:	690c      	ldr	r4, [r1, #16]
 8004a88:	42a3      	cmp	r3, r4
 8004a8a:	4607      	mov	r7, r0
 8004a8c:	db7d      	blt.n	8004b8a <quorem+0x10a>
 8004a8e:	3c01      	subs	r4, #1
 8004a90:	f101 0814 	add.w	r8, r1, #20
 8004a94:	f100 0514 	add.w	r5, r0, #20
 8004a98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a9c:	9301      	str	r3, [sp, #4]
 8004a9e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004aa2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004aae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ab2:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ab6:	d32e      	bcc.n	8004b16 <quorem+0x96>
 8004ab8:	f04f 0e00 	mov.w	lr, #0
 8004abc:	4640      	mov	r0, r8
 8004abe:	46ac      	mov	ip, r5
 8004ac0:	46f2      	mov	sl, lr
 8004ac2:	f850 2b04 	ldr.w	r2, [r0], #4
 8004ac6:	b293      	uxth	r3, r2
 8004ac8:	fb06 e303 	mla	r3, r6, r3, lr
 8004acc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004ad0:	0c12      	lsrs	r2, r2, #16
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	fb06 e202 	mla	r2, r6, r2, lr
 8004ad8:	ebaa 0303 	sub.w	r3, sl, r3
 8004adc:	f8dc a000 	ldr.w	sl, [ip]
 8004ae0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004ae4:	b292      	uxth	r2, r2
 8004ae6:	fa13 f38a 	uxtah	r3, r3, sl
 8004aea:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004aee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004af8:	4581      	cmp	r9, r0
 8004afa:	f84c 3b04 	str.w	r3, [ip], #4
 8004afe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004b02:	d2de      	bcs.n	8004ac2 <quorem+0x42>
 8004b04:	f855 300b 	ldr.w	r3, [r5, fp]
 8004b08:	b92b      	cbnz	r3, 8004b16 <quorem+0x96>
 8004b0a:	9b01      	ldr	r3, [sp, #4]
 8004b0c:	3b04      	subs	r3, #4
 8004b0e:	429d      	cmp	r5, r3
 8004b10:	461a      	mov	r2, r3
 8004b12:	d32e      	bcc.n	8004b72 <quorem+0xf2>
 8004b14:	613c      	str	r4, [r7, #16]
 8004b16:	4638      	mov	r0, r7
 8004b18:	f001 fc82 	bl	8006420 <__mcmp>
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	db24      	blt.n	8004b6a <quorem+0xea>
 8004b20:	3601      	adds	r6, #1
 8004b22:	4628      	mov	r0, r5
 8004b24:	f04f 0c00 	mov.w	ip, #0
 8004b28:	f858 2b04 	ldr.w	r2, [r8], #4
 8004b2c:	f8d0 e000 	ldr.w	lr, [r0]
 8004b30:	b293      	uxth	r3, r2
 8004b32:	ebac 0303 	sub.w	r3, ip, r3
 8004b36:	0c12      	lsrs	r2, r2, #16
 8004b38:	fa13 f38e 	uxtah	r3, r3, lr
 8004b3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004b40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b4a:	45c1      	cmp	r9, r8
 8004b4c:	f840 3b04 	str.w	r3, [r0], #4
 8004b50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004b54:	d2e8      	bcs.n	8004b28 <quorem+0xa8>
 8004b56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b5e:	b922      	cbnz	r2, 8004b6a <quorem+0xea>
 8004b60:	3b04      	subs	r3, #4
 8004b62:	429d      	cmp	r5, r3
 8004b64:	461a      	mov	r2, r3
 8004b66:	d30a      	bcc.n	8004b7e <quorem+0xfe>
 8004b68:	613c      	str	r4, [r7, #16]
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	b003      	add	sp, #12
 8004b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b72:	6812      	ldr	r2, [r2, #0]
 8004b74:	3b04      	subs	r3, #4
 8004b76:	2a00      	cmp	r2, #0
 8004b78:	d1cc      	bne.n	8004b14 <quorem+0x94>
 8004b7a:	3c01      	subs	r4, #1
 8004b7c:	e7c7      	b.n	8004b0e <quorem+0x8e>
 8004b7e:	6812      	ldr	r2, [r2, #0]
 8004b80:	3b04      	subs	r3, #4
 8004b82:	2a00      	cmp	r2, #0
 8004b84:	d1f0      	bne.n	8004b68 <quorem+0xe8>
 8004b86:	3c01      	subs	r4, #1
 8004b88:	e7eb      	b.n	8004b62 <quorem+0xe2>
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	e7ee      	b.n	8004b6c <quorem+0xec>
	...

08004b90 <_dtoa_r>:
 8004b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b94:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004b96:	b099      	sub	sp, #100	; 0x64
 8004b98:	4616      	mov	r6, r2
 8004b9a:	461f      	mov	r7, r3
 8004b9c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004ba0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004ba4:	4605      	mov	r5, r0
 8004ba6:	b974      	cbnz	r4, 8004bc6 <_dtoa_r+0x36>
 8004ba8:	2010      	movs	r0, #16
 8004baa:	f001 f949 	bl	8005e40 <malloc>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	6268      	str	r0, [r5, #36]	; 0x24
 8004bb2:	b920      	cbnz	r0, 8004bbe <_dtoa_r+0x2e>
 8004bb4:	4ba8      	ldr	r3, [pc, #672]	; (8004e58 <_dtoa_r+0x2c8>)
 8004bb6:	21ea      	movs	r1, #234	; 0xea
 8004bb8:	48a8      	ldr	r0, [pc, #672]	; (8004e5c <_dtoa_r+0x2cc>)
 8004bba:	f002 f8a3 	bl	8006d04 <__assert_func>
 8004bbe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004bc2:	6004      	str	r4, [r0, #0]
 8004bc4:	60c4      	str	r4, [r0, #12]
 8004bc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004bc8:	6819      	ldr	r1, [r3, #0]
 8004bca:	b151      	cbz	r1, 8004be2 <_dtoa_r+0x52>
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	604a      	str	r2, [r1, #4]
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	4093      	lsls	r3, r2
 8004bd4:	608b      	str	r3, [r1, #8]
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	f001 f99a 	bl	8005f10 <_Bfree>
 8004bdc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004bde:	2200      	movs	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	1e3b      	subs	r3, r7, #0
 8004be4:	bfb9      	ittee	lt
 8004be6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004bea:	9305      	strlt	r3, [sp, #20]
 8004bec:	2300      	movge	r3, #0
 8004bee:	f8c8 3000 	strge.w	r3, [r8]
 8004bf2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004bf6:	4b9a      	ldr	r3, [pc, #616]	; (8004e60 <_dtoa_r+0x2d0>)
 8004bf8:	bfbc      	itt	lt
 8004bfa:	2201      	movlt	r2, #1
 8004bfc:	f8c8 2000 	strlt.w	r2, [r8]
 8004c00:	ea33 0309 	bics.w	r3, r3, r9
 8004c04:	d119      	bne.n	8004c3a <_dtoa_r+0xaa>
 8004c06:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004c08:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004c12:	4333      	orrs	r3, r6
 8004c14:	f000 8580 	beq.w	8005718 <_dtoa_r+0xb88>
 8004c18:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004c1a:	b953      	cbnz	r3, 8004c32 <_dtoa_r+0xa2>
 8004c1c:	4b91      	ldr	r3, [pc, #580]	; (8004e64 <_dtoa_r+0x2d4>)
 8004c1e:	e022      	b.n	8004c66 <_dtoa_r+0xd6>
 8004c20:	4b91      	ldr	r3, [pc, #580]	; (8004e68 <_dtoa_r+0x2d8>)
 8004c22:	9303      	str	r3, [sp, #12]
 8004c24:	3308      	adds	r3, #8
 8004c26:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	9803      	ldr	r0, [sp, #12]
 8004c2c:	b019      	add	sp, #100	; 0x64
 8004c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c32:	4b8c      	ldr	r3, [pc, #560]	; (8004e64 <_dtoa_r+0x2d4>)
 8004c34:	9303      	str	r3, [sp, #12]
 8004c36:	3303      	adds	r3, #3
 8004c38:	e7f5      	b.n	8004c26 <_dtoa_r+0x96>
 8004c3a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004c3e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004c42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c46:	2200      	movs	r2, #0
 8004c48:	2300      	movs	r3, #0
 8004c4a:	f7fb ff45 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c4e:	4680      	mov	r8, r0
 8004c50:	b158      	cbz	r0, 8004c6a <_dtoa_r+0xda>
 8004c52:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004c54:	2301      	movs	r3, #1
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 8559 	beq.w	8005712 <_dtoa_r+0xb82>
 8004c60:	4882      	ldr	r0, [pc, #520]	; (8004e6c <_dtoa_r+0x2dc>)
 8004c62:	6018      	str	r0, [r3, #0]
 8004c64:	1e43      	subs	r3, r0, #1
 8004c66:	9303      	str	r3, [sp, #12]
 8004c68:	e7df      	b.n	8004c2a <_dtoa_r+0x9a>
 8004c6a:	ab16      	add	r3, sp, #88	; 0x58
 8004c6c:	9301      	str	r3, [sp, #4]
 8004c6e:	ab17      	add	r3, sp, #92	; 0x5c
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	4628      	mov	r0, r5
 8004c74:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004c78:	f001 fcf0 	bl	800665c <__d2b>
 8004c7c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004c80:	4683      	mov	fp, r0
 8004c82:	2c00      	cmp	r4, #0
 8004c84:	d07e      	beq.n	8004d84 <_dtoa_r+0x1f4>
 8004c86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c88:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004c8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c94:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004c98:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004c9c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004ca0:	4b73      	ldr	r3, [pc, #460]	; (8004e70 <_dtoa_r+0x2e0>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f7fb faf8 	bl	8000298 <__aeabi_dsub>
 8004ca8:	a365      	add	r3, pc, #404	; (adr r3, 8004e40 <_dtoa_r+0x2b0>)
 8004caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cae:	f7fb fcab 	bl	8000608 <__aeabi_dmul>
 8004cb2:	a365      	add	r3, pc, #404	; (adr r3, 8004e48 <_dtoa_r+0x2b8>)
 8004cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb8:	f7fb faf0 	bl	800029c <__adddf3>
 8004cbc:	4606      	mov	r6, r0
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	460f      	mov	r7, r1
 8004cc2:	f7fb fc37 	bl	8000534 <__aeabi_i2d>
 8004cc6:	a362      	add	r3, pc, #392	; (adr r3, 8004e50 <_dtoa_r+0x2c0>)
 8004cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ccc:	f7fb fc9c 	bl	8000608 <__aeabi_dmul>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4630      	mov	r0, r6
 8004cd6:	4639      	mov	r1, r7
 8004cd8:	f7fb fae0 	bl	800029c <__adddf3>
 8004cdc:	4606      	mov	r6, r0
 8004cde:	460f      	mov	r7, r1
 8004ce0:	f7fb ff42 	bl	8000b68 <__aeabi_d2iz>
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	4682      	mov	sl, r0
 8004ce8:	2300      	movs	r3, #0
 8004cea:	4630      	mov	r0, r6
 8004cec:	4639      	mov	r1, r7
 8004cee:	f7fb fefd 	bl	8000aec <__aeabi_dcmplt>
 8004cf2:	b148      	cbz	r0, 8004d08 <_dtoa_r+0x178>
 8004cf4:	4650      	mov	r0, sl
 8004cf6:	f7fb fc1d 	bl	8000534 <__aeabi_i2d>
 8004cfa:	4632      	mov	r2, r6
 8004cfc:	463b      	mov	r3, r7
 8004cfe:	f7fb feeb 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d02:	b908      	cbnz	r0, 8004d08 <_dtoa_r+0x178>
 8004d04:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004d08:	f1ba 0f16 	cmp.w	sl, #22
 8004d0c:	d857      	bhi.n	8004dbe <_dtoa_r+0x22e>
 8004d0e:	4b59      	ldr	r3, [pc, #356]	; (8004e74 <_dtoa_r+0x2e4>)
 8004d10:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d1c:	f7fb fee6 	bl	8000aec <__aeabi_dcmplt>
 8004d20:	2800      	cmp	r0, #0
 8004d22:	d04e      	beq.n	8004dc2 <_dtoa_r+0x232>
 8004d24:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004d28:	2300      	movs	r3, #0
 8004d2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004d2e:	1b1c      	subs	r4, r3, r4
 8004d30:	1e63      	subs	r3, r4, #1
 8004d32:	9309      	str	r3, [sp, #36]	; 0x24
 8004d34:	bf45      	ittet	mi
 8004d36:	f1c4 0301 	rsbmi	r3, r4, #1
 8004d3a:	9306      	strmi	r3, [sp, #24]
 8004d3c:	2300      	movpl	r3, #0
 8004d3e:	2300      	movmi	r3, #0
 8004d40:	bf4c      	ite	mi
 8004d42:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004d44:	9306      	strpl	r3, [sp, #24]
 8004d46:	f1ba 0f00 	cmp.w	sl, #0
 8004d4a:	db3c      	blt.n	8004dc6 <_dtoa_r+0x236>
 8004d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d4e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004d52:	4453      	add	r3, sl
 8004d54:	9309      	str	r3, [sp, #36]	; 0x24
 8004d56:	2300      	movs	r3, #0
 8004d58:	930a      	str	r3, [sp, #40]	; 0x28
 8004d5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d5c:	2b09      	cmp	r3, #9
 8004d5e:	f200 808d 	bhi.w	8004e7c <_dtoa_r+0x2ec>
 8004d62:	2b05      	cmp	r3, #5
 8004d64:	bfc4      	itt	gt
 8004d66:	3b04      	subgt	r3, #4
 8004d68:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004d6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d6c:	f1a3 0302 	sub.w	r3, r3, #2
 8004d70:	bfcc      	ite	gt
 8004d72:	2400      	movgt	r4, #0
 8004d74:	2401      	movle	r4, #1
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	f200 808c 	bhi.w	8004e94 <_dtoa_r+0x304>
 8004d7c:	e8df f003 	tbb	[pc, r3]
 8004d80:	5b4d4f2d 	.word	0x5b4d4f2d
 8004d84:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004d88:	441c      	add	r4, r3
 8004d8a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004d8e:	2b20      	cmp	r3, #32
 8004d90:	bfc3      	ittte	gt
 8004d92:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004d96:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004d9a:	fa09 f303 	lslgt.w	r3, r9, r3
 8004d9e:	f1c3 0320 	rsble	r3, r3, #32
 8004da2:	bfc6      	itte	gt
 8004da4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004da8:	4318      	orrgt	r0, r3
 8004daa:	fa06 f003 	lslle.w	r0, r6, r3
 8004dae:	f7fb fbb1 	bl	8000514 <__aeabi_ui2d>
 8004db2:	2301      	movs	r3, #1
 8004db4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004db8:	3c01      	subs	r4, #1
 8004dba:	9313      	str	r3, [sp, #76]	; 0x4c
 8004dbc:	e770      	b.n	8004ca0 <_dtoa_r+0x110>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e7b3      	b.n	8004d2a <_dtoa_r+0x19a>
 8004dc2:	900f      	str	r0, [sp, #60]	; 0x3c
 8004dc4:	e7b2      	b.n	8004d2c <_dtoa_r+0x19c>
 8004dc6:	9b06      	ldr	r3, [sp, #24]
 8004dc8:	eba3 030a 	sub.w	r3, r3, sl
 8004dcc:	9306      	str	r3, [sp, #24]
 8004dce:	f1ca 0300 	rsb	r3, sl, #0
 8004dd2:	930a      	str	r3, [sp, #40]	; 0x28
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	930e      	str	r3, [sp, #56]	; 0x38
 8004dd8:	e7bf      	b.n	8004d5a <_dtoa_r+0x1ca>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dde:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	dc5a      	bgt.n	8004e9a <_dtoa_r+0x30a>
 8004de4:	f04f 0901 	mov.w	r9, #1
 8004de8:	f8cd 9020 	str.w	r9, [sp, #32]
 8004dec:	464b      	mov	r3, r9
 8004dee:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004df2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004df4:	2200      	movs	r2, #0
 8004df6:	6042      	str	r2, [r0, #4]
 8004df8:	2204      	movs	r2, #4
 8004dfa:	f102 0614 	add.w	r6, r2, #20
 8004dfe:	429e      	cmp	r6, r3
 8004e00:	6841      	ldr	r1, [r0, #4]
 8004e02:	d950      	bls.n	8004ea6 <_dtoa_r+0x316>
 8004e04:	4628      	mov	r0, r5
 8004e06:	f001 f843 	bl	8005e90 <_Balloc>
 8004e0a:	9003      	str	r0, [sp, #12]
 8004e0c:	2800      	cmp	r0, #0
 8004e0e:	d14e      	bne.n	8004eae <_dtoa_r+0x31e>
 8004e10:	4b19      	ldr	r3, [pc, #100]	; (8004e78 <_dtoa_r+0x2e8>)
 8004e12:	4602      	mov	r2, r0
 8004e14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004e18:	e6ce      	b.n	8004bb8 <_dtoa_r+0x28>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e7de      	b.n	8004ddc <_dtoa_r+0x24c>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e24:	eb0a 0903 	add.w	r9, sl, r3
 8004e28:	f109 0301 	add.w	r3, r9, #1
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	9308      	str	r3, [sp, #32]
 8004e30:	bfb8      	it	lt
 8004e32:	2301      	movlt	r3, #1
 8004e34:	e7dd      	b.n	8004df2 <_dtoa_r+0x262>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e7f2      	b.n	8004e20 <_dtoa_r+0x290>
 8004e3a:	bf00      	nop
 8004e3c:	f3af 8000 	nop.w
 8004e40:	636f4361 	.word	0x636f4361
 8004e44:	3fd287a7 	.word	0x3fd287a7
 8004e48:	8b60c8b3 	.word	0x8b60c8b3
 8004e4c:	3fc68a28 	.word	0x3fc68a28
 8004e50:	509f79fb 	.word	0x509f79fb
 8004e54:	3fd34413 	.word	0x3fd34413
 8004e58:	08007a2e 	.word	0x08007a2e
 8004e5c:	08007a45 	.word	0x08007a45
 8004e60:	7ff00000 	.word	0x7ff00000
 8004e64:	08007a2a 	.word	0x08007a2a
 8004e68:	08007a21 	.word	0x08007a21
 8004e6c:	080078a5 	.word	0x080078a5
 8004e70:	3ff80000 	.word	0x3ff80000
 8004e74:	08007bb0 	.word	0x08007bb0
 8004e78:	08007aa0 	.word	0x08007aa0
 8004e7c:	2401      	movs	r4, #1
 8004e7e:	2300      	movs	r3, #0
 8004e80:	9322      	str	r3, [sp, #136]	; 0x88
 8004e82:	940b      	str	r4, [sp, #44]	; 0x2c
 8004e84:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f8cd 9020 	str.w	r9, [sp, #32]
 8004e8e:	2312      	movs	r3, #18
 8004e90:	9223      	str	r2, [sp, #140]	; 0x8c
 8004e92:	e7ae      	b.n	8004df2 <_dtoa_r+0x262>
 8004e94:	2301      	movs	r3, #1
 8004e96:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e98:	e7f4      	b.n	8004e84 <_dtoa_r+0x2f4>
 8004e9a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004e9e:	f8cd 9020 	str.w	r9, [sp, #32]
 8004ea2:	464b      	mov	r3, r9
 8004ea4:	e7a5      	b.n	8004df2 <_dtoa_r+0x262>
 8004ea6:	3101      	adds	r1, #1
 8004ea8:	6041      	str	r1, [r0, #4]
 8004eaa:	0052      	lsls	r2, r2, #1
 8004eac:	e7a5      	b.n	8004dfa <_dtoa_r+0x26a>
 8004eae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004eb0:	9a03      	ldr	r2, [sp, #12]
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	9b08      	ldr	r3, [sp, #32]
 8004eb6:	2b0e      	cmp	r3, #14
 8004eb8:	f200 80a8 	bhi.w	800500c <_dtoa_r+0x47c>
 8004ebc:	2c00      	cmp	r4, #0
 8004ebe:	f000 80a5 	beq.w	800500c <_dtoa_r+0x47c>
 8004ec2:	f1ba 0f00 	cmp.w	sl, #0
 8004ec6:	dd34      	ble.n	8004f32 <_dtoa_r+0x3a2>
 8004ec8:	4a9a      	ldr	r2, [pc, #616]	; (8005134 <_dtoa_r+0x5a4>)
 8004eca:	f00a 030f 	and.w	r3, sl, #15
 8004ece:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004ed2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ed6:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004eda:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004ede:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004ee2:	d016      	beq.n	8004f12 <_dtoa_r+0x382>
 8004ee4:	4b94      	ldr	r3, [pc, #592]	; (8005138 <_dtoa_r+0x5a8>)
 8004ee6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004eea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004eee:	f7fb fcb5 	bl	800085c <__aeabi_ddiv>
 8004ef2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ef6:	f004 040f 	and.w	r4, r4, #15
 8004efa:	2703      	movs	r7, #3
 8004efc:	4e8e      	ldr	r6, [pc, #568]	; (8005138 <_dtoa_r+0x5a8>)
 8004efe:	b954      	cbnz	r4, 8004f16 <_dtoa_r+0x386>
 8004f00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f08:	f7fb fca8 	bl	800085c <__aeabi_ddiv>
 8004f0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f10:	e029      	b.n	8004f66 <_dtoa_r+0x3d6>
 8004f12:	2702      	movs	r7, #2
 8004f14:	e7f2      	b.n	8004efc <_dtoa_r+0x36c>
 8004f16:	07e1      	lsls	r1, r4, #31
 8004f18:	d508      	bpl.n	8004f2c <_dtoa_r+0x39c>
 8004f1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f1e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f22:	f7fb fb71 	bl	8000608 <__aeabi_dmul>
 8004f26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f2a:	3701      	adds	r7, #1
 8004f2c:	1064      	asrs	r4, r4, #1
 8004f2e:	3608      	adds	r6, #8
 8004f30:	e7e5      	b.n	8004efe <_dtoa_r+0x36e>
 8004f32:	f000 80a5 	beq.w	8005080 <_dtoa_r+0x4f0>
 8004f36:	f1ca 0400 	rsb	r4, sl, #0
 8004f3a:	4b7e      	ldr	r3, [pc, #504]	; (8005134 <_dtoa_r+0x5a4>)
 8004f3c:	4e7e      	ldr	r6, [pc, #504]	; (8005138 <_dtoa_r+0x5a8>)
 8004f3e:	f004 020f 	and.w	r2, r4, #15
 8004f42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f4e:	f7fb fb5b 	bl	8000608 <__aeabi_dmul>
 8004f52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f56:	1124      	asrs	r4, r4, #4
 8004f58:	2300      	movs	r3, #0
 8004f5a:	2702      	movs	r7, #2
 8004f5c:	2c00      	cmp	r4, #0
 8004f5e:	f040 8084 	bne.w	800506a <_dtoa_r+0x4da>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1d2      	bne.n	8004f0c <_dtoa_r+0x37c>
 8004f66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 808b 	beq.w	8005084 <_dtoa_r+0x4f4>
 8004f6e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004f72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004f76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f7a:	4b70      	ldr	r3, [pc, #448]	; (800513c <_dtoa_r+0x5ac>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f7fb fdb5 	bl	8000aec <__aeabi_dcmplt>
 8004f82:	2800      	cmp	r0, #0
 8004f84:	d07e      	beq.n	8005084 <_dtoa_r+0x4f4>
 8004f86:	9b08      	ldr	r3, [sp, #32]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d07b      	beq.n	8005084 <_dtoa_r+0x4f4>
 8004f8c:	f1b9 0f00 	cmp.w	r9, #0
 8004f90:	dd38      	ble.n	8005004 <_dtoa_r+0x474>
 8004f92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f96:	4b6a      	ldr	r3, [pc, #424]	; (8005140 <_dtoa_r+0x5b0>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f7fb fb35 	bl	8000608 <__aeabi_dmul>
 8004f9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fa2:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8004fa6:	3701      	adds	r7, #1
 8004fa8:	464c      	mov	r4, r9
 8004faa:	4638      	mov	r0, r7
 8004fac:	f7fb fac2 	bl	8000534 <__aeabi_i2d>
 8004fb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fb4:	f7fb fb28 	bl	8000608 <__aeabi_dmul>
 8004fb8:	4b62      	ldr	r3, [pc, #392]	; (8005144 <_dtoa_r+0x5b4>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f7fb f96e 	bl	800029c <__adddf3>
 8004fc0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004fc4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004fc8:	9611      	str	r6, [sp, #68]	; 0x44
 8004fca:	2c00      	cmp	r4, #0
 8004fcc:	d15d      	bne.n	800508a <_dtoa_r+0x4fa>
 8004fce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fd2:	4b5d      	ldr	r3, [pc, #372]	; (8005148 <_dtoa_r+0x5b8>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f7fb f95f 	bl	8000298 <__aeabi_dsub>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004fe2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004fe4:	4633      	mov	r3, r6
 8004fe6:	f7fb fd9f 	bl	8000b28 <__aeabi_dcmpgt>
 8004fea:	2800      	cmp	r0, #0
 8004fec:	f040 829c 	bne.w	8005528 <_dtoa_r+0x998>
 8004ff0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ff4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ff6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004ffa:	f7fb fd77 	bl	8000aec <__aeabi_dcmplt>
 8004ffe:	2800      	cmp	r0, #0
 8005000:	f040 8290 	bne.w	8005524 <_dtoa_r+0x994>
 8005004:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005008:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800500c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800500e:	2b00      	cmp	r3, #0
 8005010:	f2c0 8152 	blt.w	80052b8 <_dtoa_r+0x728>
 8005014:	f1ba 0f0e 	cmp.w	sl, #14
 8005018:	f300 814e 	bgt.w	80052b8 <_dtoa_r+0x728>
 800501c:	4b45      	ldr	r3, [pc, #276]	; (8005134 <_dtoa_r+0x5a4>)
 800501e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005022:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005026:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800502a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800502c:	2b00      	cmp	r3, #0
 800502e:	f280 80db 	bge.w	80051e8 <_dtoa_r+0x658>
 8005032:	9b08      	ldr	r3, [sp, #32]
 8005034:	2b00      	cmp	r3, #0
 8005036:	f300 80d7 	bgt.w	80051e8 <_dtoa_r+0x658>
 800503a:	f040 8272 	bne.w	8005522 <_dtoa_r+0x992>
 800503e:	4b42      	ldr	r3, [pc, #264]	; (8005148 <_dtoa_r+0x5b8>)
 8005040:	2200      	movs	r2, #0
 8005042:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005046:	f7fb fadf 	bl	8000608 <__aeabi_dmul>
 800504a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800504e:	f7fb fd61 	bl	8000b14 <__aeabi_dcmpge>
 8005052:	9c08      	ldr	r4, [sp, #32]
 8005054:	4626      	mov	r6, r4
 8005056:	2800      	cmp	r0, #0
 8005058:	f040 8248 	bne.w	80054ec <_dtoa_r+0x95c>
 800505c:	9f03      	ldr	r7, [sp, #12]
 800505e:	2331      	movs	r3, #49	; 0x31
 8005060:	f807 3b01 	strb.w	r3, [r7], #1
 8005064:	f10a 0a01 	add.w	sl, sl, #1
 8005068:	e244      	b.n	80054f4 <_dtoa_r+0x964>
 800506a:	07e2      	lsls	r2, r4, #31
 800506c:	d505      	bpl.n	800507a <_dtoa_r+0x4ea>
 800506e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005072:	f7fb fac9 	bl	8000608 <__aeabi_dmul>
 8005076:	3701      	adds	r7, #1
 8005078:	2301      	movs	r3, #1
 800507a:	1064      	asrs	r4, r4, #1
 800507c:	3608      	adds	r6, #8
 800507e:	e76d      	b.n	8004f5c <_dtoa_r+0x3cc>
 8005080:	2702      	movs	r7, #2
 8005082:	e770      	b.n	8004f66 <_dtoa_r+0x3d6>
 8005084:	9c08      	ldr	r4, [sp, #32]
 8005086:	46d0      	mov	r8, sl
 8005088:	e78f      	b.n	8004faa <_dtoa_r+0x41a>
 800508a:	9903      	ldr	r1, [sp, #12]
 800508c:	4b29      	ldr	r3, [pc, #164]	; (8005134 <_dtoa_r+0x5a4>)
 800508e:	4421      	add	r1, r4
 8005090:	9112      	str	r1, [sp, #72]	; 0x48
 8005092:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005094:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005098:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800509c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80050a0:	2900      	cmp	r1, #0
 80050a2:	d055      	beq.n	8005150 <_dtoa_r+0x5c0>
 80050a4:	4929      	ldr	r1, [pc, #164]	; (800514c <_dtoa_r+0x5bc>)
 80050a6:	2000      	movs	r0, #0
 80050a8:	f7fb fbd8 	bl	800085c <__aeabi_ddiv>
 80050ac:	463b      	mov	r3, r7
 80050ae:	4632      	mov	r2, r6
 80050b0:	f7fb f8f2 	bl	8000298 <__aeabi_dsub>
 80050b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050b8:	9f03      	ldr	r7, [sp, #12]
 80050ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050be:	f7fb fd53 	bl	8000b68 <__aeabi_d2iz>
 80050c2:	4604      	mov	r4, r0
 80050c4:	f7fb fa36 	bl	8000534 <__aeabi_i2d>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050d0:	f7fb f8e2 	bl	8000298 <__aeabi_dsub>
 80050d4:	3430      	adds	r4, #48	; 0x30
 80050d6:	4602      	mov	r2, r0
 80050d8:	460b      	mov	r3, r1
 80050da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050de:	f807 4b01 	strb.w	r4, [r7], #1
 80050e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80050e6:	f7fb fd01 	bl	8000aec <__aeabi_dcmplt>
 80050ea:	2800      	cmp	r0, #0
 80050ec:	d174      	bne.n	80051d8 <_dtoa_r+0x648>
 80050ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050f2:	4912      	ldr	r1, [pc, #72]	; (800513c <_dtoa_r+0x5ac>)
 80050f4:	2000      	movs	r0, #0
 80050f6:	f7fb f8cf 	bl	8000298 <__aeabi_dsub>
 80050fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80050fe:	f7fb fcf5 	bl	8000aec <__aeabi_dcmplt>
 8005102:	2800      	cmp	r0, #0
 8005104:	f040 80b7 	bne.w	8005276 <_dtoa_r+0x6e6>
 8005108:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800510a:	429f      	cmp	r7, r3
 800510c:	f43f af7a 	beq.w	8005004 <_dtoa_r+0x474>
 8005110:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005114:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <_dtoa_r+0x5b0>)
 8005116:	2200      	movs	r2, #0
 8005118:	f7fb fa76 	bl	8000608 <__aeabi_dmul>
 800511c:	4b08      	ldr	r3, [pc, #32]	; (8005140 <_dtoa_r+0x5b0>)
 800511e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005122:	2200      	movs	r2, #0
 8005124:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005128:	f7fb fa6e 	bl	8000608 <__aeabi_dmul>
 800512c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005130:	e7c3      	b.n	80050ba <_dtoa_r+0x52a>
 8005132:	bf00      	nop
 8005134:	08007bb0 	.word	0x08007bb0
 8005138:	08007b88 	.word	0x08007b88
 800513c:	3ff00000 	.word	0x3ff00000
 8005140:	40240000 	.word	0x40240000
 8005144:	401c0000 	.word	0x401c0000
 8005148:	40140000 	.word	0x40140000
 800514c:	3fe00000 	.word	0x3fe00000
 8005150:	4630      	mov	r0, r6
 8005152:	4639      	mov	r1, r7
 8005154:	f7fb fa58 	bl	8000608 <__aeabi_dmul>
 8005158:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800515c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800515e:	9c03      	ldr	r4, [sp, #12]
 8005160:	9314      	str	r3, [sp, #80]	; 0x50
 8005162:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005166:	f7fb fcff 	bl	8000b68 <__aeabi_d2iz>
 800516a:	9015      	str	r0, [sp, #84]	; 0x54
 800516c:	f7fb f9e2 	bl	8000534 <__aeabi_i2d>
 8005170:	4602      	mov	r2, r0
 8005172:	460b      	mov	r3, r1
 8005174:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005178:	f7fb f88e 	bl	8000298 <__aeabi_dsub>
 800517c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800517e:	3330      	adds	r3, #48	; 0x30
 8005180:	f804 3b01 	strb.w	r3, [r4], #1
 8005184:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005186:	429c      	cmp	r4, r3
 8005188:	4606      	mov	r6, r0
 800518a:	460f      	mov	r7, r1
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	d124      	bne.n	80051dc <_dtoa_r+0x64c>
 8005192:	4ba4      	ldr	r3, [pc, #656]	; (8005424 <_dtoa_r+0x894>)
 8005194:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005198:	f7fb f880 	bl	800029c <__adddf3>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4630      	mov	r0, r6
 80051a2:	4639      	mov	r1, r7
 80051a4:	f7fb fcc0 	bl	8000b28 <__aeabi_dcmpgt>
 80051a8:	2800      	cmp	r0, #0
 80051aa:	d163      	bne.n	8005274 <_dtoa_r+0x6e4>
 80051ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051b0:	499c      	ldr	r1, [pc, #624]	; (8005424 <_dtoa_r+0x894>)
 80051b2:	2000      	movs	r0, #0
 80051b4:	f7fb f870 	bl	8000298 <__aeabi_dsub>
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	4630      	mov	r0, r6
 80051be:	4639      	mov	r1, r7
 80051c0:	f7fb fc94 	bl	8000aec <__aeabi_dcmplt>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	f43f af1d 	beq.w	8005004 <_dtoa_r+0x474>
 80051ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80051cc:	1e7b      	subs	r3, r7, #1
 80051ce:	9314      	str	r3, [sp, #80]	; 0x50
 80051d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80051d4:	2b30      	cmp	r3, #48	; 0x30
 80051d6:	d0f8      	beq.n	80051ca <_dtoa_r+0x63a>
 80051d8:	46c2      	mov	sl, r8
 80051da:	e03b      	b.n	8005254 <_dtoa_r+0x6c4>
 80051dc:	4b92      	ldr	r3, [pc, #584]	; (8005428 <_dtoa_r+0x898>)
 80051de:	f7fb fa13 	bl	8000608 <__aeabi_dmul>
 80051e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051e6:	e7bc      	b.n	8005162 <_dtoa_r+0x5d2>
 80051e8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80051ec:	9f03      	ldr	r7, [sp, #12]
 80051ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80051f2:	4640      	mov	r0, r8
 80051f4:	4649      	mov	r1, r9
 80051f6:	f7fb fb31 	bl	800085c <__aeabi_ddiv>
 80051fa:	f7fb fcb5 	bl	8000b68 <__aeabi_d2iz>
 80051fe:	4604      	mov	r4, r0
 8005200:	f7fb f998 	bl	8000534 <__aeabi_i2d>
 8005204:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005208:	f7fb f9fe 	bl	8000608 <__aeabi_dmul>
 800520c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	4640      	mov	r0, r8
 8005216:	4649      	mov	r1, r9
 8005218:	f7fb f83e 	bl	8000298 <__aeabi_dsub>
 800521c:	f807 6b01 	strb.w	r6, [r7], #1
 8005220:	9e03      	ldr	r6, [sp, #12]
 8005222:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005226:	1bbe      	subs	r6, r7, r6
 8005228:	45b4      	cmp	ip, r6
 800522a:	4602      	mov	r2, r0
 800522c:	460b      	mov	r3, r1
 800522e:	d136      	bne.n	800529e <_dtoa_r+0x70e>
 8005230:	f7fb f834 	bl	800029c <__adddf3>
 8005234:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005238:	4680      	mov	r8, r0
 800523a:	4689      	mov	r9, r1
 800523c:	f7fb fc74 	bl	8000b28 <__aeabi_dcmpgt>
 8005240:	bb58      	cbnz	r0, 800529a <_dtoa_r+0x70a>
 8005242:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005246:	4640      	mov	r0, r8
 8005248:	4649      	mov	r1, r9
 800524a:	f7fb fc45 	bl	8000ad8 <__aeabi_dcmpeq>
 800524e:	b108      	cbz	r0, 8005254 <_dtoa_r+0x6c4>
 8005250:	07e1      	lsls	r1, r4, #31
 8005252:	d422      	bmi.n	800529a <_dtoa_r+0x70a>
 8005254:	4628      	mov	r0, r5
 8005256:	4659      	mov	r1, fp
 8005258:	f000 fe5a 	bl	8005f10 <_Bfree>
 800525c:	2300      	movs	r3, #0
 800525e:	703b      	strb	r3, [r7, #0]
 8005260:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005262:	f10a 0001 	add.w	r0, sl, #1
 8005266:	6018      	str	r0, [r3, #0]
 8005268:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800526a:	2b00      	cmp	r3, #0
 800526c:	f43f acdd 	beq.w	8004c2a <_dtoa_r+0x9a>
 8005270:	601f      	str	r7, [r3, #0]
 8005272:	e4da      	b.n	8004c2a <_dtoa_r+0x9a>
 8005274:	4627      	mov	r7, r4
 8005276:	463b      	mov	r3, r7
 8005278:	461f      	mov	r7, r3
 800527a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800527e:	2a39      	cmp	r2, #57	; 0x39
 8005280:	d107      	bne.n	8005292 <_dtoa_r+0x702>
 8005282:	9a03      	ldr	r2, [sp, #12]
 8005284:	429a      	cmp	r2, r3
 8005286:	d1f7      	bne.n	8005278 <_dtoa_r+0x6e8>
 8005288:	9903      	ldr	r1, [sp, #12]
 800528a:	2230      	movs	r2, #48	; 0x30
 800528c:	f108 0801 	add.w	r8, r8, #1
 8005290:	700a      	strb	r2, [r1, #0]
 8005292:	781a      	ldrb	r2, [r3, #0]
 8005294:	3201      	adds	r2, #1
 8005296:	701a      	strb	r2, [r3, #0]
 8005298:	e79e      	b.n	80051d8 <_dtoa_r+0x648>
 800529a:	46d0      	mov	r8, sl
 800529c:	e7eb      	b.n	8005276 <_dtoa_r+0x6e6>
 800529e:	4b62      	ldr	r3, [pc, #392]	; (8005428 <_dtoa_r+0x898>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	f7fb f9b1 	bl	8000608 <__aeabi_dmul>
 80052a6:	2200      	movs	r2, #0
 80052a8:	2300      	movs	r3, #0
 80052aa:	4680      	mov	r8, r0
 80052ac:	4689      	mov	r9, r1
 80052ae:	f7fb fc13 	bl	8000ad8 <__aeabi_dcmpeq>
 80052b2:	2800      	cmp	r0, #0
 80052b4:	d09b      	beq.n	80051ee <_dtoa_r+0x65e>
 80052b6:	e7cd      	b.n	8005254 <_dtoa_r+0x6c4>
 80052b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80052ba:	2a00      	cmp	r2, #0
 80052bc:	f000 80d0 	beq.w	8005460 <_dtoa_r+0x8d0>
 80052c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80052c2:	2a01      	cmp	r2, #1
 80052c4:	f300 80b2 	bgt.w	800542c <_dtoa_r+0x89c>
 80052c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80052ca:	2a00      	cmp	r2, #0
 80052cc:	f000 80a6 	beq.w	800541c <_dtoa_r+0x88c>
 80052d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80052d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80052d6:	9f06      	ldr	r7, [sp, #24]
 80052d8:	9a06      	ldr	r2, [sp, #24]
 80052da:	441a      	add	r2, r3
 80052dc:	9206      	str	r2, [sp, #24]
 80052de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052e0:	2101      	movs	r1, #1
 80052e2:	441a      	add	r2, r3
 80052e4:	4628      	mov	r0, r5
 80052e6:	9209      	str	r2, [sp, #36]	; 0x24
 80052e8:	f000 ff12 	bl	8006110 <__i2b>
 80052ec:	4606      	mov	r6, r0
 80052ee:	2f00      	cmp	r7, #0
 80052f0:	dd0c      	ble.n	800530c <_dtoa_r+0x77c>
 80052f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	dd09      	ble.n	800530c <_dtoa_r+0x77c>
 80052f8:	42bb      	cmp	r3, r7
 80052fa:	9a06      	ldr	r2, [sp, #24]
 80052fc:	bfa8      	it	ge
 80052fe:	463b      	movge	r3, r7
 8005300:	1ad2      	subs	r2, r2, r3
 8005302:	9206      	str	r2, [sp, #24]
 8005304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005306:	1aff      	subs	r7, r7, r3
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	9309      	str	r3, [sp, #36]	; 0x24
 800530c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800530e:	b1f3      	cbz	r3, 800534e <_dtoa_r+0x7be>
 8005310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005312:	2b00      	cmp	r3, #0
 8005314:	f000 80a8 	beq.w	8005468 <_dtoa_r+0x8d8>
 8005318:	2c00      	cmp	r4, #0
 800531a:	dd10      	ble.n	800533e <_dtoa_r+0x7ae>
 800531c:	4631      	mov	r1, r6
 800531e:	4622      	mov	r2, r4
 8005320:	4628      	mov	r0, r5
 8005322:	f000 ffb3 	bl	800628c <__pow5mult>
 8005326:	465a      	mov	r2, fp
 8005328:	4601      	mov	r1, r0
 800532a:	4606      	mov	r6, r0
 800532c:	4628      	mov	r0, r5
 800532e:	f000 ff05 	bl	800613c <__multiply>
 8005332:	4659      	mov	r1, fp
 8005334:	4680      	mov	r8, r0
 8005336:	4628      	mov	r0, r5
 8005338:	f000 fdea 	bl	8005f10 <_Bfree>
 800533c:	46c3      	mov	fp, r8
 800533e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005340:	1b1a      	subs	r2, r3, r4
 8005342:	d004      	beq.n	800534e <_dtoa_r+0x7be>
 8005344:	4659      	mov	r1, fp
 8005346:	4628      	mov	r0, r5
 8005348:	f000 ffa0 	bl	800628c <__pow5mult>
 800534c:	4683      	mov	fp, r0
 800534e:	2101      	movs	r1, #1
 8005350:	4628      	mov	r0, r5
 8005352:	f000 fedd 	bl	8006110 <__i2b>
 8005356:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005358:	2b00      	cmp	r3, #0
 800535a:	4604      	mov	r4, r0
 800535c:	f340 8086 	ble.w	800546c <_dtoa_r+0x8dc>
 8005360:	461a      	mov	r2, r3
 8005362:	4601      	mov	r1, r0
 8005364:	4628      	mov	r0, r5
 8005366:	f000 ff91 	bl	800628c <__pow5mult>
 800536a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800536c:	2b01      	cmp	r3, #1
 800536e:	4604      	mov	r4, r0
 8005370:	dd7f      	ble.n	8005472 <_dtoa_r+0x8e2>
 8005372:	f04f 0800 	mov.w	r8, #0
 8005376:	6923      	ldr	r3, [r4, #16]
 8005378:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800537c:	6918      	ldr	r0, [r3, #16]
 800537e:	f000 fe79 	bl	8006074 <__hi0bits>
 8005382:	f1c0 0020 	rsb	r0, r0, #32
 8005386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005388:	4418      	add	r0, r3
 800538a:	f010 001f 	ands.w	r0, r0, #31
 800538e:	f000 8092 	beq.w	80054b6 <_dtoa_r+0x926>
 8005392:	f1c0 0320 	rsb	r3, r0, #32
 8005396:	2b04      	cmp	r3, #4
 8005398:	f340 808a 	ble.w	80054b0 <_dtoa_r+0x920>
 800539c:	f1c0 001c 	rsb	r0, r0, #28
 80053a0:	9b06      	ldr	r3, [sp, #24]
 80053a2:	4403      	add	r3, r0
 80053a4:	9306      	str	r3, [sp, #24]
 80053a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053a8:	4403      	add	r3, r0
 80053aa:	4407      	add	r7, r0
 80053ac:	9309      	str	r3, [sp, #36]	; 0x24
 80053ae:	9b06      	ldr	r3, [sp, #24]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	dd05      	ble.n	80053c0 <_dtoa_r+0x830>
 80053b4:	4659      	mov	r1, fp
 80053b6:	461a      	mov	r2, r3
 80053b8:	4628      	mov	r0, r5
 80053ba:	f000 ffc1 	bl	8006340 <__lshift>
 80053be:	4683      	mov	fp, r0
 80053c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	dd05      	ble.n	80053d2 <_dtoa_r+0x842>
 80053c6:	4621      	mov	r1, r4
 80053c8:	461a      	mov	r2, r3
 80053ca:	4628      	mov	r0, r5
 80053cc:	f000 ffb8 	bl	8006340 <__lshift>
 80053d0:	4604      	mov	r4, r0
 80053d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d070      	beq.n	80054ba <_dtoa_r+0x92a>
 80053d8:	4621      	mov	r1, r4
 80053da:	4658      	mov	r0, fp
 80053dc:	f001 f820 	bl	8006420 <__mcmp>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	da6a      	bge.n	80054ba <_dtoa_r+0x92a>
 80053e4:	2300      	movs	r3, #0
 80053e6:	4659      	mov	r1, fp
 80053e8:	220a      	movs	r2, #10
 80053ea:	4628      	mov	r0, r5
 80053ec:	f000 fdb2 	bl	8005f54 <__multadd>
 80053f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80053f6:	4683      	mov	fp, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 8194 	beq.w	8005726 <_dtoa_r+0xb96>
 80053fe:	4631      	mov	r1, r6
 8005400:	2300      	movs	r3, #0
 8005402:	220a      	movs	r2, #10
 8005404:	4628      	mov	r0, r5
 8005406:	f000 fda5 	bl	8005f54 <__multadd>
 800540a:	f1b9 0f00 	cmp.w	r9, #0
 800540e:	4606      	mov	r6, r0
 8005410:	f300 8093 	bgt.w	800553a <_dtoa_r+0x9aa>
 8005414:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005416:	2b02      	cmp	r3, #2
 8005418:	dc57      	bgt.n	80054ca <_dtoa_r+0x93a>
 800541a:	e08e      	b.n	800553a <_dtoa_r+0x9aa>
 800541c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800541e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005422:	e757      	b.n	80052d4 <_dtoa_r+0x744>
 8005424:	3fe00000 	.word	0x3fe00000
 8005428:	40240000 	.word	0x40240000
 800542c:	9b08      	ldr	r3, [sp, #32]
 800542e:	1e5c      	subs	r4, r3, #1
 8005430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005432:	42a3      	cmp	r3, r4
 8005434:	bfbf      	itttt	lt
 8005436:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005438:	940a      	strlt	r4, [sp, #40]	; 0x28
 800543a:	1ae2      	sublt	r2, r4, r3
 800543c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800543e:	bfb6      	itet	lt
 8005440:	189b      	addlt	r3, r3, r2
 8005442:	1b1c      	subge	r4, r3, r4
 8005444:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005446:	9b08      	ldr	r3, [sp, #32]
 8005448:	bfb8      	it	lt
 800544a:	2400      	movlt	r4, #0
 800544c:	2b00      	cmp	r3, #0
 800544e:	bfb9      	ittee	lt
 8005450:	9b06      	ldrlt	r3, [sp, #24]
 8005452:	9a08      	ldrlt	r2, [sp, #32]
 8005454:	9f06      	ldrge	r7, [sp, #24]
 8005456:	9b08      	ldrge	r3, [sp, #32]
 8005458:	bfbc      	itt	lt
 800545a:	1a9f      	sublt	r7, r3, r2
 800545c:	2300      	movlt	r3, #0
 800545e:	e73b      	b.n	80052d8 <_dtoa_r+0x748>
 8005460:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005462:	9f06      	ldr	r7, [sp, #24]
 8005464:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005466:	e742      	b.n	80052ee <_dtoa_r+0x75e>
 8005468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800546a:	e76b      	b.n	8005344 <_dtoa_r+0x7b4>
 800546c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800546e:	2b01      	cmp	r3, #1
 8005470:	dc19      	bgt.n	80054a6 <_dtoa_r+0x916>
 8005472:	9b04      	ldr	r3, [sp, #16]
 8005474:	b9bb      	cbnz	r3, 80054a6 <_dtoa_r+0x916>
 8005476:	9b05      	ldr	r3, [sp, #20]
 8005478:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800547c:	b99b      	cbnz	r3, 80054a6 <_dtoa_r+0x916>
 800547e:	9b05      	ldr	r3, [sp, #20]
 8005480:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005484:	0d1b      	lsrs	r3, r3, #20
 8005486:	051b      	lsls	r3, r3, #20
 8005488:	b183      	cbz	r3, 80054ac <_dtoa_r+0x91c>
 800548a:	9b06      	ldr	r3, [sp, #24]
 800548c:	3301      	adds	r3, #1
 800548e:	9306      	str	r3, [sp, #24]
 8005490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005492:	3301      	adds	r3, #1
 8005494:	9309      	str	r3, [sp, #36]	; 0x24
 8005496:	f04f 0801 	mov.w	r8, #1
 800549a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800549c:	2b00      	cmp	r3, #0
 800549e:	f47f af6a 	bne.w	8005376 <_dtoa_r+0x7e6>
 80054a2:	2001      	movs	r0, #1
 80054a4:	e76f      	b.n	8005386 <_dtoa_r+0x7f6>
 80054a6:	f04f 0800 	mov.w	r8, #0
 80054aa:	e7f6      	b.n	800549a <_dtoa_r+0x90a>
 80054ac:	4698      	mov	r8, r3
 80054ae:	e7f4      	b.n	800549a <_dtoa_r+0x90a>
 80054b0:	f43f af7d 	beq.w	80053ae <_dtoa_r+0x81e>
 80054b4:	4618      	mov	r0, r3
 80054b6:	301c      	adds	r0, #28
 80054b8:	e772      	b.n	80053a0 <_dtoa_r+0x810>
 80054ba:	9b08      	ldr	r3, [sp, #32]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	dc36      	bgt.n	800552e <_dtoa_r+0x99e>
 80054c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	dd33      	ble.n	800552e <_dtoa_r+0x99e>
 80054c6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054ca:	f1b9 0f00 	cmp.w	r9, #0
 80054ce:	d10d      	bne.n	80054ec <_dtoa_r+0x95c>
 80054d0:	4621      	mov	r1, r4
 80054d2:	464b      	mov	r3, r9
 80054d4:	2205      	movs	r2, #5
 80054d6:	4628      	mov	r0, r5
 80054d8:	f000 fd3c 	bl	8005f54 <__multadd>
 80054dc:	4601      	mov	r1, r0
 80054de:	4604      	mov	r4, r0
 80054e0:	4658      	mov	r0, fp
 80054e2:	f000 ff9d 	bl	8006420 <__mcmp>
 80054e6:	2800      	cmp	r0, #0
 80054e8:	f73f adb8 	bgt.w	800505c <_dtoa_r+0x4cc>
 80054ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80054ee:	9f03      	ldr	r7, [sp, #12]
 80054f0:	ea6f 0a03 	mvn.w	sl, r3
 80054f4:	f04f 0800 	mov.w	r8, #0
 80054f8:	4621      	mov	r1, r4
 80054fa:	4628      	mov	r0, r5
 80054fc:	f000 fd08 	bl	8005f10 <_Bfree>
 8005500:	2e00      	cmp	r6, #0
 8005502:	f43f aea7 	beq.w	8005254 <_dtoa_r+0x6c4>
 8005506:	f1b8 0f00 	cmp.w	r8, #0
 800550a:	d005      	beq.n	8005518 <_dtoa_r+0x988>
 800550c:	45b0      	cmp	r8, r6
 800550e:	d003      	beq.n	8005518 <_dtoa_r+0x988>
 8005510:	4641      	mov	r1, r8
 8005512:	4628      	mov	r0, r5
 8005514:	f000 fcfc 	bl	8005f10 <_Bfree>
 8005518:	4631      	mov	r1, r6
 800551a:	4628      	mov	r0, r5
 800551c:	f000 fcf8 	bl	8005f10 <_Bfree>
 8005520:	e698      	b.n	8005254 <_dtoa_r+0x6c4>
 8005522:	2400      	movs	r4, #0
 8005524:	4626      	mov	r6, r4
 8005526:	e7e1      	b.n	80054ec <_dtoa_r+0x95c>
 8005528:	46c2      	mov	sl, r8
 800552a:	4626      	mov	r6, r4
 800552c:	e596      	b.n	800505c <_dtoa_r+0x4cc>
 800552e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005530:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 80fd 	beq.w	8005734 <_dtoa_r+0xba4>
 800553a:	2f00      	cmp	r7, #0
 800553c:	dd05      	ble.n	800554a <_dtoa_r+0x9ba>
 800553e:	4631      	mov	r1, r6
 8005540:	463a      	mov	r2, r7
 8005542:	4628      	mov	r0, r5
 8005544:	f000 fefc 	bl	8006340 <__lshift>
 8005548:	4606      	mov	r6, r0
 800554a:	f1b8 0f00 	cmp.w	r8, #0
 800554e:	d05c      	beq.n	800560a <_dtoa_r+0xa7a>
 8005550:	6871      	ldr	r1, [r6, #4]
 8005552:	4628      	mov	r0, r5
 8005554:	f000 fc9c 	bl	8005e90 <_Balloc>
 8005558:	4607      	mov	r7, r0
 800555a:	b928      	cbnz	r0, 8005568 <_dtoa_r+0x9d8>
 800555c:	4b80      	ldr	r3, [pc, #512]	; (8005760 <_dtoa_r+0xbd0>)
 800555e:	4602      	mov	r2, r0
 8005560:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005564:	f7ff bb28 	b.w	8004bb8 <_dtoa_r+0x28>
 8005568:	6932      	ldr	r2, [r6, #16]
 800556a:	3202      	adds	r2, #2
 800556c:	0092      	lsls	r2, r2, #2
 800556e:	f106 010c 	add.w	r1, r6, #12
 8005572:	300c      	adds	r0, #12
 8005574:	f000 fc7e 	bl	8005e74 <memcpy>
 8005578:	2201      	movs	r2, #1
 800557a:	4639      	mov	r1, r7
 800557c:	4628      	mov	r0, r5
 800557e:	f000 fedf 	bl	8006340 <__lshift>
 8005582:	9b03      	ldr	r3, [sp, #12]
 8005584:	3301      	adds	r3, #1
 8005586:	9308      	str	r3, [sp, #32]
 8005588:	9b03      	ldr	r3, [sp, #12]
 800558a:	444b      	add	r3, r9
 800558c:	930a      	str	r3, [sp, #40]	; 0x28
 800558e:	9b04      	ldr	r3, [sp, #16]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	46b0      	mov	r8, r6
 8005596:	9309      	str	r3, [sp, #36]	; 0x24
 8005598:	4606      	mov	r6, r0
 800559a:	9b08      	ldr	r3, [sp, #32]
 800559c:	4621      	mov	r1, r4
 800559e:	3b01      	subs	r3, #1
 80055a0:	4658      	mov	r0, fp
 80055a2:	9304      	str	r3, [sp, #16]
 80055a4:	f7ff fa6c 	bl	8004a80 <quorem>
 80055a8:	4603      	mov	r3, r0
 80055aa:	3330      	adds	r3, #48	; 0x30
 80055ac:	9006      	str	r0, [sp, #24]
 80055ae:	4641      	mov	r1, r8
 80055b0:	4658      	mov	r0, fp
 80055b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80055b4:	f000 ff34 	bl	8006420 <__mcmp>
 80055b8:	4632      	mov	r2, r6
 80055ba:	4681      	mov	r9, r0
 80055bc:	4621      	mov	r1, r4
 80055be:	4628      	mov	r0, r5
 80055c0:	f000 ff4a 	bl	8006458 <__mdiff>
 80055c4:	68c2      	ldr	r2, [r0, #12]
 80055c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055c8:	4607      	mov	r7, r0
 80055ca:	bb02      	cbnz	r2, 800560e <_dtoa_r+0xa7e>
 80055cc:	4601      	mov	r1, r0
 80055ce:	4658      	mov	r0, fp
 80055d0:	f000 ff26 	bl	8006420 <__mcmp>
 80055d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055d6:	4602      	mov	r2, r0
 80055d8:	4639      	mov	r1, r7
 80055da:	4628      	mov	r0, r5
 80055dc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80055e0:	f000 fc96 	bl	8005f10 <_Bfree>
 80055e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055e8:	9f08      	ldr	r7, [sp, #32]
 80055ea:	ea43 0102 	orr.w	r1, r3, r2
 80055ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055f0:	430b      	orrs	r3, r1
 80055f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055f4:	d10d      	bne.n	8005612 <_dtoa_r+0xa82>
 80055f6:	2b39      	cmp	r3, #57	; 0x39
 80055f8:	d029      	beq.n	800564e <_dtoa_r+0xabe>
 80055fa:	f1b9 0f00 	cmp.w	r9, #0
 80055fe:	dd01      	ble.n	8005604 <_dtoa_r+0xa74>
 8005600:	9b06      	ldr	r3, [sp, #24]
 8005602:	3331      	adds	r3, #49	; 0x31
 8005604:	9a04      	ldr	r2, [sp, #16]
 8005606:	7013      	strb	r3, [r2, #0]
 8005608:	e776      	b.n	80054f8 <_dtoa_r+0x968>
 800560a:	4630      	mov	r0, r6
 800560c:	e7b9      	b.n	8005582 <_dtoa_r+0x9f2>
 800560e:	2201      	movs	r2, #1
 8005610:	e7e2      	b.n	80055d8 <_dtoa_r+0xa48>
 8005612:	f1b9 0f00 	cmp.w	r9, #0
 8005616:	db06      	blt.n	8005626 <_dtoa_r+0xa96>
 8005618:	9922      	ldr	r1, [sp, #136]	; 0x88
 800561a:	ea41 0909 	orr.w	r9, r1, r9
 800561e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005620:	ea59 0101 	orrs.w	r1, r9, r1
 8005624:	d120      	bne.n	8005668 <_dtoa_r+0xad8>
 8005626:	2a00      	cmp	r2, #0
 8005628:	ddec      	ble.n	8005604 <_dtoa_r+0xa74>
 800562a:	4659      	mov	r1, fp
 800562c:	2201      	movs	r2, #1
 800562e:	4628      	mov	r0, r5
 8005630:	9308      	str	r3, [sp, #32]
 8005632:	f000 fe85 	bl	8006340 <__lshift>
 8005636:	4621      	mov	r1, r4
 8005638:	4683      	mov	fp, r0
 800563a:	f000 fef1 	bl	8006420 <__mcmp>
 800563e:	2800      	cmp	r0, #0
 8005640:	9b08      	ldr	r3, [sp, #32]
 8005642:	dc02      	bgt.n	800564a <_dtoa_r+0xaba>
 8005644:	d1de      	bne.n	8005604 <_dtoa_r+0xa74>
 8005646:	07da      	lsls	r2, r3, #31
 8005648:	d5dc      	bpl.n	8005604 <_dtoa_r+0xa74>
 800564a:	2b39      	cmp	r3, #57	; 0x39
 800564c:	d1d8      	bne.n	8005600 <_dtoa_r+0xa70>
 800564e:	9a04      	ldr	r2, [sp, #16]
 8005650:	2339      	movs	r3, #57	; 0x39
 8005652:	7013      	strb	r3, [r2, #0]
 8005654:	463b      	mov	r3, r7
 8005656:	461f      	mov	r7, r3
 8005658:	3b01      	subs	r3, #1
 800565a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800565e:	2a39      	cmp	r2, #57	; 0x39
 8005660:	d050      	beq.n	8005704 <_dtoa_r+0xb74>
 8005662:	3201      	adds	r2, #1
 8005664:	701a      	strb	r2, [r3, #0]
 8005666:	e747      	b.n	80054f8 <_dtoa_r+0x968>
 8005668:	2a00      	cmp	r2, #0
 800566a:	dd03      	ble.n	8005674 <_dtoa_r+0xae4>
 800566c:	2b39      	cmp	r3, #57	; 0x39
 800566e:	d0ee      	beq.n	800564e <_dtoa_r+0xabe>
 8005670:	3301      	adds	r3, #1
 8005672:	e7c7      	b.n	8005604 <_dtoa_r+0xa74>
 8005674:	9a08      	ldr	r2, [sp, #32]
 8005676:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005678:	f802 3c01 	strb.w	r3, [r2, #-1]
 800567c:	428a      	cmp	r2, r1
 800567e:	d02a      	beq.n	80056d6 <_dtoa_r+0xb46>
 8005680:	4659      	mov	r1, fp
 8005682:	2300      	movs	r3, #0
 8005684:	220a      	movs	r2, #10
 8005686:	4628      	mov	r0, r5
 8005688:	f000 fc64 	bl	8005f54 <__multadd>
 800568c:	45b0      	cmp	r8, r6
 800568e:	4683      	mov	fp, r0
 8005690:	f04f 0300 	mov.w	r3, #0
 8005694:	f04f 020a 	mov.w	r2, #10
 8005698:	4641      	mov	r1, r8
 800569a:	4628      	mov	r0, r5
 800569c:	d107      	bne.n	80056ae <_dtoa_r+0xb1e>
 800569e:	f000 fc59 	bl	8005f54 <__multadd>
 80056a2:	4680      	mov	r8, r0
 80056a4:	4606      	mov	r6, r0
 80056a6:	9b08      	ldr	r3, [sp, #32]
 80056a8:	3301      	adds	r3, #1
 80056aa:	9308      	str	r3, [sp, #32]
 80056ac:	e775      	b.n	800559a <_dtoa_r+0xa0a>
 80056ae:	f000 fc51 	bl	8005f54 <__multadd>
 80056b2:	4631      	mov	r1, r6
 80056b4:	4680      	mov	r8, r0
 80056b6:	2300      	movs	r3, #0
 80056b8:	220a      	movs	r2, #10
 80056ba:	4628      	mov	r0, r5
 80056bc:	f000 fc4a 	bl	8005f54 <__multadd>
 80056c0:	4606      	mov	r6, r0
 80056c2:	e7f0      	b.n	80056a6 <_dtoa_r+0xb16>
 80056c4:	f1b9 0f00 	cmp.w	r9, #0
 80056c8:	9a03      	ldr	r2, [sp, #12]
 80056ca:	bfcc      	ite	gt
 80056cc:	464f      	movgt	r7, r9
 80056ce:	2701      	movle	r7, #1
 80056d0:	4417      	add	r7, r2
 80056d2:	f04f 0800 	mov.w	r8, #0
 80056d6:	4659      	mov	r1, fp
 80056d8:	2201      	movs	r2, #1
 80056da:	4628      	mov	r0, r5
 80056dc:	9308      	str	r3, [sp, #32]
 80056de:	f000 fe2f 	bl	8006340 <__lshift>
 80056e2:	4621      	mov	r1, r4
 80056e4:	4683      	mov	fp, r0
 80056e6:	f000 fe9b 	bl	8006420 <__mcmp>
 80056ea:	2800      	cmp	r0, #0
 80056ec:	dcb2      	bgt.n	8005654 <_dtoa_r+0xac4>
 80056ee:	d102      	bne.n	80056f6 <_dtoa_r+0xb66>
 80056f0:	9b08      	ldr	r3, [sp, #32]
 80056f2:	07db      	lsls	r3, r3, #31
 80056f4:	d4ae      	bmi.n	8005654 <_dtoa_r+0xac4>
 80056f6:	463b      	mov	r3, r7
 80056f8:	461f      	mov	r7, r3
 80056fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056fe:	2a30      	cmp	r2, #48	; 0x30
 8005700:	d0fa      	beq.n	80056f8 <_dtoa_r+0xb68>
 8005702:	e6f9      	b.n	80054f8 <_dtoa_r+0x968>
 8005704:	9a03      	ldr	r2, [sp, #12]
 8005706:	429a      	cmp	r2, r3
 8005708:	d1a5      	bne.n	8005656 <_dtoa_r+0xac6>
 800570a:	f10a 0a01 	add.w	sl, sl, #1
 800570e:	2331      	movs	r3, #49	; 0x31
 8005710:	e779      	b.n	8005606 <_dtoa_r+0xa76>
 8005712:	4b14      	ldr	r3, [pc, #80]	; (8005764 <_dtoa_r+0xbd4>)
 8005714:	f7ff baa7 	b.w	8004c66 <_dtoa_r+0xd6>
 8005718:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800571a:	2b00      	cmp	r3, #0
 800571c:	f47f aa80 	bne.w	8004c20 <_dtoa_r+0x90>
 8005720:	4b11      	ldr	r3, [pc, #68]	; (8005768 <_dtoa_r+0xbd8>)
 8005722:	f7ff baa0 	b.w	8004c66 <_dtoa_r+0xd6>
 8005726:	f1b9 0f00 	cmp.w	r9, #0
 800572a:	dc03      	bgt.n	8005734 <_dtoa_r+0xba4>
 800572c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800572e:	2b02      	cmp	r3, #2
 8005730:	f73f aecb 	bgt.w	80054ca <_dtoa_r+0x93a>
 8005734:	9f03      	ldr	r7, [sp, #12]
 8005736:	4621      	mov	r1, r4
 8005738:	4658      	mov	r0, fp
 800573a:	f7ff f9a1 	bl	8004a80 <quorem>
 800573e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005742:	f807 3b01 	strb.w	r3, [r7], #1
 8005746:	9a03      	ldr	r2, [sp, #12]
 8005748:	1aba      	subs	r2, r7, r2
 800574a:	4591      	cmp	r9, r2
 800574c:	ddba      	ble.n	80056c4 <_dtoa_r+0xb34>
 800574e:	4659      	mov	r1, fp
 8005750:	2300      	movs	r3, #0
 8005752:	220a      	movs	r2, #10
 8005754:	4628      	mov	r0, r5
 8005756:	f000 fbfd 	bl	8005f54 <__multadd>
 800575a:	4683      	mov	fp, r0
 800575c:	e7eb      	b.n	8005736 <_dtoa_r+0xba6>
 800575e:	bf00      	nop
 8005760:	08007aa0 	.word	0x08007aa0
 8005764:	080078a4 	.word	0x080078a4
 8005768:	08007a21 	.word	0x08007a21

0800576c <rshift>:
 800576c:	6903      	ldr	r3, [r0, #16]
 800576e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005772:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005776:	ea4f 1261 	mov.w	r2, r1, asr #5
 800577a:	f100 0414 	add.w	r4, r0, #20
 800577e:	dd45      	ble.n	800580c <rshift+0xa0>
 8005780:	f011 011f 	ands.w	r1, r1, #31
 8005784:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005788:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800578c:	d10c      	bne.n	80057a8 <rshift+0x3c>
 800578e:	f100 0710 	add.w	r7, r0, #16
 8005792:	4629      	mov	r1, r5
 8005794:	42b1      	cmp	r1, r6
 8005796:	d334      	bcc.n	8005802 <rshift+0x96>
 8005798:	1a9b      	subs	r3, r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	1eea      	subs	r2, r5, #3
 800579e:	4296      	cmp	r6, r2
 80057a0:	bf38      	it	cc
 80057a2:	2300      	movcc	r3, #0
 80057a4:	4423      	add	r3, r4
 80057a6:	e015      	b.n	80057d4 <rshift+0x68>
 80057a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80057ac:	f1c1 0820 	rsb	r8, r1, #32
 80057b0:	40cf      	lsrs	r7, r1
 80057b2:	f105 0e04 	add.w	lr, r5, #4
 80057b6:	46a1      	mov	r9, r4
 80057b8:	4576      	cmp	r6, lr
 80057ba:	46f4      	mov	ip, lr
 80057bc:	d815      	bhi.n	80057ea <rshift+0x7e>
 80057be:	1a9a      	subs	r2, r3, r2
 80057c0:	0092      	lsls	r2, r2, #2
 80057c2:	3a04      	subs	r2, #4
 80057c4:	3501      	adds	r5, #1
 80057c6:	42ae      	cmp	r6, r5
 80057c8:	bf38      	it	cc
 80057ca:	2200      	movcc	r2, #0
 80057cc:	18a3      	adds	r3, r4, r2
 80057ce:	50a7      	str	r7, [r4, r2]
 80057d0:	b107      	cbz	r7, 80057d4 <rshift+0x68>
 80057d2:	3304      	adds	r3, #4
 80057d4:	1b1a      	subs	r2, r3, r4
 80057d6:	42a3      	cmp	r3, r4
 80057d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80057dc:	bf08      	it	eq
 80057de:	2300      	moveq	r3, #0
 80057e0:	6102      	str	r2, [r0, #16]
 80057e2:	bf08      	it	eq
 80057e4:	6143      	streq	r3, [r0, #20]
 80057e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057ea:	f8dc c000 	ldr.w	ip, [ip]
 80057ee:	fa0c fc08 	lsl.w	ip, ip, r8
 80057f2:	ea4c 0707 	orr.w	r7, ip, r7
 80057f6:	f849 7b04 	str.w	r7, [r9], #4
 80057fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80057fe:	40cf      	lsrs	r7, r1
 8005800:	e7da      	b.n	80057b8 <rshift+0x4c>
 8005802:	f851 cb04 	ldr.w	ip, [r1], #4
 8005806:	f847 cf04 	str.w	ip, [r7, #4]!
 800580a:	e7c3      	b.n	8005794 <rshift+0x28>
 800580c:	4623      	mov	r3, r4
 800580e:	e7e1      	b.n	80057d4 <rshift+0x68>

08005810 <__hexdig_fun>:
 8005810:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005814:	2b09      	cmp	r3, #9
 8005816:	d802      	bhi.n	800581e <__hexdig_fun+0xe>
 8005818:	3820      	subs	r0, #32
 800581a:	b2c0      	uxtb	r0, r0
 800581c:	4770      	bx	lr
 800581e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005822:	2b05      	cmp	r3, #5
 8005824:	d801      	bhi.n	800582a <__hexdig_fun+0x1a>
 8005826:	3847      	subs	r0, #71	; 0x47
 8005828:	e7f7      	b.n	800581a <__hexdig_fun+0xa>
 800582a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800582e:	2b05      	cmp	r3, #5
 8005830:	d801      	bhi.n	8005836 <__hexdig_fun+0x26>
 8005832:	3827      	subs	r0, #39	; 0x27
 8005834:	e7f1      	b.n	800581a <__hexdig_fun+0xa>
 8005836:	2000      	movs	r0, #0
 8005838:	4770      	bx	lr
	...

0800583c <__gethex>:
 800583c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005840:	b08b      	sub	sp, #44	; 0x2c
 8005842:	468b      	mov	fp, r1
 8005844:	9305      	str	r3, [sp, #20]
 8005846:	4bb2      	ldr	r3, [pc, #712]	; (8005b10 <__gethex+0x2d4>)
 8005848:	9002      	str	r0, [sp, #8]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	9303      	str	r3, [sp, #12]
 800584e:	4618      	mov	r0, r3
 8005850:	4690      	mov	r8, r2
 8005852:	f7fa fcc5 	bl	80001e0 <strlen>
 8005856:	9b03      	ldr	r3, [sp, #12]
 8005858:	f8db 2000 	ldr.w	r2, [fp]
 800585c:	4403      	add	r3, r0
 800585e:	4682      	mov	sl, r0
 8005860:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005864:	9306      	str	r3, [sp, #24]
 8005866:	1c93      	adds	r3, r2, #2
 8005868:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800586c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005870:	32fe      	adds	r2, #254	; 0xfe
 8005872:	18d1      	adds	r1, r2, r3
 8005874:	461f      	mov	r7, r3
 8005876:	f813 0b01 	ldrb.w	r0, [r3], #1
 800587a:	9101      	str	r1, [sp, #4]
 800587c:	2830      	cmp	r0, #48	; 0x30
 800587e:	d0f8      	beq.n	8005872 <__gethex+0x36>
 8005880:	f7ff ffc6 	bl	8005810 <__hexdig_fun>
 8005884:	4604      	mov	r4, r0
 8005886:	2800      	cmp	r0, #0
 8005888:	d13a      	bne.n	8005900 <__gethex+0xc4>
 800588a:	9903      	ldr	r1, [sp, #12]
 800588c:	4652      	mov	r2, sl
 800588e:	4638      	mov	r0, r7
 8005890:	f001 fa16 	bl	8006cc0 <strncmp>
 8005894:	4605      	mov	r5, r0
 8005896:	2800      	cmp	r0, #0
 8005898:	d166      	bne.n	8005968 <__gethex+0x12c>
 800589a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800589e:	eb07 060a 	add.w	r6, r7, sl
 80058a2:	f7ff ffb5 	bl	8005810 <__hexdig_fun>
 80058a6:	2800      	cmp	r0, #0
 80058a8:	d060      	beq.n	800596c <__gethex+0x130>
 80058aa:	4633      	mov	r3, r6
 80058ac:	7818      	ldrb	r0, [r3, #0]
 80058ae:	2830      	cmp	r0, #48	; 0x30
 80058b0:	461f      	mov	r7, r3
 80058b2:	f103 0301 	add.w	r3, r3, #1
 80058b6:	d0f9      	beq.n	80058ac <__gethex+0x70>
 80058b8:	f7ff ffaa 	bl	8005810 <__hexdig_fun>
 80058bc:	2301      	movs	r3, #1
 80058be:	fab0 f480 	clz	r4, r0
 80058c2:	0964      	lsrs	r4, r4, #5
 80058c4:	4635      	mov	r5, r6
 80058c6:	9301      	str	r3, [sp, #4]
 80058c8:	463a      	mov	r2, r7
 80058ca:	4616      	mov	r6, r2
 80058cc:	3201      	adds	r2, #1
 80058ce:	7830      	ldrb	r0, [r6, #0]
 80058d0:	f7ff ff9e 	bl	8005810 <__hexdig_fun>
 80058d4:	2800      	cmp	r0, #0
 80058d6:	d1f8      	bne.n	80058ca <__gethex+0x8e>
 80058d8:	9903      	ldr	r1, [sp, #12]
 80058da:	4652      	mov	r2, sl
 80058dc:	4630      	mov	r0, r6
 80058de:	f001 f9ef 	bl	8006cc0 <strncmp>
 80058e2:	b980      	cbnz	r0, 8005906 <__gethex+0xca>
 80058e4:	b94d      	cbnz	r5, 80058fa <__gethex+0xbe>
 80058e6:	eb06 050a 	add.w	r5, r6, sl
 80058ea:	462a      	mov	r2, r5
 80058ec:	4616      	mov	r6, r2
 80058ee:	3201      	adds	r2, #1
 80058f0:	7830      	ldrb	r0, [r6, #0]
 80058f2:	f7ff ff8d 	bl	8005810 <__hexdig_fun>
 80058f6:	2800      	cmp	r0, #0
 80058f8:	d1f8      	bne.n	80058ec <__gethex+0xb0>
 80058fa:	1bad      	subs	r5, r5, r6
 80058fc:	00ad      	lsls	r5, r5, #2
 80058fe:	e004      	b.n	800590a <__gethex+0xce>
 8005900:	2400      	movs	r4, #0
 8005902:	4625      	mov	r5, r4
 8005904:	e7e0      	b.n	80058c8 <__gethex+0x8c>
 8005906:	2d00      	cmp	r5, #0
 8005908:	d1f7      	bne.n	80058fa <__gethex+0xbe>
 800590a:	7833      	ldrb	r3, [r6, #0]
 800590c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005910:	2b50      	cmp	r3, #80	; 0x50
 8005912:	d139      	bne.n	8005988 <__gethex+0x14c>
 8005914:	7873      	ldrb	r3, [r6, #1]
 8005916:	2b2b      	cmp	r3, #43	; 0x2b
 8005918:	d02a      	beq.n	8005970 <__gethex+0x134>
 800591a:	2b2d      	cmp	r3, #45	; 0x2d
 800591c:	d02c      	beq.n	8005978 <__gethex+0x13c>
 800591e:	1c71      	adds	r1, r6, #1
 8005920:	f04f 0900 	mov.w	r9, #0
 8005924:	7808      	ldrb	r0, [r1, #0]
 8005926:	f7ff ff73 	bl	8005810 <__hexdig_fun>
 800592a:	1e43      	subs	r3, r0, #1
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b18      	cmp	r3, #24
 8005930:	d82a      	bhi.n	8005988 <__gethex+0x14c>
 8005932:	f1a0 0210 	sub.w	r2, r0, #16
 8005936:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800593a:	f7ff ff69 	bl	8005810 <__hexdig_fun>
 800593e:	1e43      	subs	r3, r0, #1
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b18      	cmp	r3, #24
 8005944:	d91b      	bls.n	800597e <__gethex+0x142>
 8005946:	f1b9 0f00 	cmp.w	r9, #0
 800594a:	d000      	beq.n	800594e <__gethex+0x112>
 800594c:	4252      	negs	r2, r2
 800594e:	4415      	add	r5, r2
 8005950:	f8cb 1000 	str.w	r1, [fp]
 8005954:	b1d4      	cbz	r4, 800598c <__gethex+0x150>
 8005956:	9b01      	ldr	r3, [sp, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	bf14      	ite	ne
 800595c:	2700      	movne	r7, #0
 800595e:	2706      	moveq	r7, #6
 8005960:	4638      	mov	r0, r7
 8005962:	b00b      	add	sp, #44	; 0x2c
 8005964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005968:	463e      	mov	r6, r7
 800596a:	4625      	mov	r5, r4
 800596c:	2401      	movs	r4, #1
 800596e:	e7cc      	b.n	800590a <__gethex+0xce>
 8005970:	f04f 0900 	mov.w	r9, #0
 8005974:	1cb1      	adds	r1, r6, #2
 8005976:	e7d5      	b.n	8005924 <__gethex+0xe8>
 8005978:	f04f 0901 	mov.w	r9, #1
 800597c:	e7fa      	b.n	8005974 <__gethex+0x138>
 800597e:	230a      	movs	r3, #10
 8005980:	fb03 0202 	mla	r2, r3, r2, r0
 8005984:	3a10      	subs	r2, #16
 8005986:	e7d6      	b.n	8005936 <__gethex+0xfa>
 8005988:	4631      	mov	r1, r6
 800598a:	e7e1      	b.n	8005950 <__gethex+0x114>
 800598c:	1bf3      	subs	r3, r6, r7
 800598e:	3b01      	subs	r3, #1
 8005990:	4621      	mov	r1, r4
 8005992:	2b07      	cmp	r3, #7
 8005994:	dc0a      	bgt.n	80059ac <__gethex+0x170>
 8005996:	9802      	ldr	r0, [sp, #8]
 8005998:	f000 fa7a 	bl	8005e90 <_Balloc>
 800599c:	4604      	mov	r4, r0
 800599e:	b940      	cbnz	r0, 80059b2 <__gethex+0x176>
 80059a0:	4b5c      	ldr	r3, [pc, #368]	; (8005b14 <__gethex+0x2d8>)
 80059a2:	4602      	mov	r2, r0
 80059a4:	21de      	movs	r1, #222	; 0xde
 80059a6:	485c      	ldr	r0, [pc, #368]	; (8005b18 <__gethex+0x2dc>)
 80059a8:	f001 f9ac 	bl	8006d04 <__assert_func>
 80059ac:	3101      	adds	r1, #1
 80059ae:	105b      	asrs	r3, r3, #1
 80059b0:	e7ef      	b.n	8005992 <__gethex+0x156>
 80059b2:	f100 0914 	add.w	r9, r0, #20
 80059b6:	f04f 0b00 	mov.w	fp, #0
 80059ba:	f1ca 0301 	rsb	r3, sl, #1
 80059be:	f8cd 9010 	str.w	r9, [sp, #16]
 80059c2:	f8cd b004 	str.w	fp, [sp, #4]
 80059c6:	9308      	str	r3, [sp, #32]
 80059c8:	42b7      	cmp	r7, r6
 80059ca:	d33f      	bcc.n	8005a4c <__gethex+0x210>
 80059cc:	9f04      	ldr	r7, [sp, #16]
 80059ce:	9b01      	ldr	r3, [sp, #4]
 80059d0:	f847 3b04 	str.w	r3, [r7], #4
 80059d4:	eba7 0709 	sub.w	r7, r7, r9
 80059d8:	10bf      	asrs	r7, r7, #2
 80059da:	6127      	str	r7, [r4, #16]
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 fb49 	bl	8006074 <__hi0bits>
 80059e2:	017f      	lsls	r7, r7, #5
 80059e4:	f8d8 6000 	ldr.w	r6, [r8]
 80059e8:	1a3f      	subs	r7, r7, r0
 80059ea:	42b7      	cmp	r7, r6
 80059ec:	dd62      	ble.n	8005ab4 <__gethex+0x278>
 80059ee:	1bbf      	subs	r7, r7, r6
 80059f0:	4639      	mov	r1, r7
 80059f2:	4620      	mov	r0, r4
 80059f4:	f000 fedf 	bl	80067b6 <__any_on>
 80059f8:	4682      	mov	sl, r0
 80059fa:	b1a8      	cbz	r0, 8005a28 <__gethex+0x1ec>
 80059fc:	1e7b      	subs	r3, r7, #1
 80059fe:	1159      	asrs	r1, r3, #5
 8005a00:	f003 021f 	and.w	r2, r3, #31
 8005a04:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005a08:	f04f 0a01 	mov.w	sl, #1
 8005a0c:	fa0a f202 	lsl.w	r2, sl, r2
 8005a10:	420a      	tst	r2, r1
 8005a12:	d009      	beq.n	8005a28 <__gethex+0x1ec>
 8005a14:	4553      	cmp	r3, sl
 8005a16:	dd05      	ble.n	8005a24 <__gethex+0x1e8>
 8005a18:	1eb9      	subs	r1, r7, #2
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	f000 fecb 	bl	80067b6 <__any_on>
 8005a20:	2800      	cmp	r0, #0
 8005a22:	d144      	bne.n	8005aae <__gethex+0x272>
 8005a24:	f04f 0a02 	mov.w	sl, #2
 8005a28:	4639      	mov	r1, r7
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f7ff fe9e 	bl	800576c <rshift>
 8005a30:	443d      	add	r5, r7
 8005a32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005a36:	42ab      	cmp	r3, r5
 8005a38:	da4a      	bge.n	8005ad0 <__gethex+0x294>
 8005a3a:	9802      	ldr	r0, [sp, #8]
 8005a3c:	4621      	mov	r1, r4
 8005a3e:	f000 fa67 	bl	8005f10 <_Bfree>
 8005a42:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005a44:	2300      	movs	r3, #0
 8005a46:	6013      	str	r3, [r2, #0]
 8005a48:	27a3      	movs	r7, #163	; 0xa3
 8005a4a:	e789      	b.n	8005960 <__gethex+0x124>
 8005a4c:	1e73      	subs	r3, r6, #1
 8005a4e:	9a06      	ldr	r2, [sp, #24]
 8005a50:	9307      	str	r3, [sp, #28]
 8005a52:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d019      	beq.n	8005a8e <__gethex+0x252>
 8005a5a:	f1bb 0f20 	cmp.w	fp, #32
 8005a5e:	d107      	bne.n	8005a70 <__gethex+0x234>
 8005a60:	9b04      	ldr	r3, [sp, #16]
 8005a62:	9a01      	ldr	r2, [sp, #4]
 8005a64:	f843 2b04 	str.w	r2, [r3], #4
 8005a68:	9304      	str	r3, [sp, #16]
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	9301      	str	r3, [sp, #4]
 8005a6e:	469b      	mov	fp, r3
 8005a70:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005a74:	f7ff fecc 	bl	8005810 <__hexdig_fun>
 8005a78:	9b01      	ldr	r3, [sp, #4]
 8005a7a:	f000 000f 	and.w	r0, r0, #15
 8005a7e:	fa00 f00b 	lsl.w	r0, r0, fp
 8005a82:	4303      	orrs	r3, r0
 8005a84:	9301      	str	r3, [sp, #4]
 8005a86:	f10b 0b04 	add.w	fp, fp, #4
 8005a8a:	9b07      	ldr	r3, [sp, #28]
 8005a8c:	e00d      	b.n	8005aaa <__gethex+0x26e>
 8005a8e:	9a08      	ldr	r2, [sp, #32]
 8005a90:	1e73      	subs	r3, r6, #1
 8005a92:	4413      	add	r3, r2
 8005a94:	42bb      	cmp	r3, r7
 8005a96:	d3e0      	bcc.n	8005a5a <__gethex+0x21e>
 8005a98:	4618      	mov	r0, r3
 8005a9a:	9903      	ldr	r1, [sp, #12]
 8005a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a9e:	4652      	mov	r2, sl
 8005aa0:	f001 f90e 	bl	8006cc0 <strncmp>
 8005aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	d1d7      	bne.n	8005a5a <__gethex+0x21e>
 8005aaa:	461e      	mov	r6, r3
 8005aac:	e78c      	b.n	80059c8 <__gethex+0x18c>
 8005aae:	f04f 0a03 	mov.w	sl, #3
 8005ab2:	e7b9      	b.n	8005a28 <__gethex+0x1ec>
 8005ab4:	da09      	bge.n	8005aca <__gethex+0x28e>
 8005ab6:	1bf7      	subs	r7, r6, r7
 8005ab8:	4621      	mov	r1, r4
 8005aba:	9802      	ldr	r0, [sp, #8]
 8005abc:	463a      	mov	r2, r7
 8005abe:	f000 fc3f 	bl	8006340 <__lshift>
 8005ac2:	1bed      	subs	r5, r5, r7
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	f100 0914 	add.w	r9, r0, #20
 8005aca:	f04f 0a00 	mov.w	sl, #0
 8005ace:	e7b0      	b.n	8005a32 <__gethex+0x1f6>
 8005ad0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005ad4:	42a8      	cmp	r0, r5
 8005ad6:	dd71      	ble.n	8005bbc <__gethex+0x380>
 8005ad8:	1b45      	subs	r5, r0, r5
 8005ada:	42ae      	cmp	r6, r5
 8005adc:	dc35      	bgt.n	8005b4a <__gethex+0x30e>
 8005ade:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d029      	beq.n	8005b3a <__gethex+0x2fe>
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d02b      	beq.n	8005b42 <__gethex+0x306>
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d11c      	bne.n	8005b28 <__gethex+0x2ec>
 8005aee:	42ae      	cmp	r6, r5
 8005af0:	d11a      	bne.n	8005b28 <__gethex+0x2ec>
 8005af2:	2e01      	cmp	r6, #1
 8005af4:	d112      	bne.n	8005b1c <__gethex+0x2e0>
 8005af6:	9a05      	ldr	r2, [sp, #20]
 8005af8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	2301      	movs	r3, #1
 8005b00:	6123      	str	r3, [r4, #16]
 8005b02:	f8c9 3000 	str.w	r3, [r9]
 8005b06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b08:	2762      	movs	r7, #98	; 0x62
 8005b0a:	601c      	str	r4, [r3, #0]
 8005b0c:	e728      	b.n	8005960 <__gethex+0x124>
 8005b0e:	bf00      	nop
 8005b10:	08007b18 	.word	0x08007b18
 8005b14:	08007aa0 	.word	0x08007aa0
 8005b18:	08007ab1 	.word	0x08007ab1
 8005b1c:	1e71      	subs	r1, r6, #1
 8005b1e:	4620      	mov	r0, r4
 8005b20:	f000 fe49 	bl	80067b6 <__any_on>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	d1e6      	bne.n	8005af6 <__gethex+0x2ba>
 8005b28:	9802      	ldr	r0, [sp, #8]
 8005b2a:	4621      	mov	r1, r4
 8005b2c:	f000 f9f0 	bl	8005f10 <_Bfree>
 8005b30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005b32:	2300      	movs	r3, #0
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	2750      	movs	r7, #80	; 0x50
 8005b38:	e712      	b.n	8005960 <__gethex+0x124>
 8005b3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1f3      	bne.n	8005b28 <__gethex+0x2ec>
 8005b40:	e7d9      	b.n	8005af6 <__gethex+0x2ba>
 8005b42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1d6      	bne.n	8005af6 <__gethex+0x2ba>
 8005b48:	e7ee      	b.n	8005b28 <__gethex+0x2ec>
 8005b4a:	1e6f      	subs	r7, r5, #1
 8005b4c:	f1ba 0f00 	cmp.w	sl, #0
 8005b50:	d131      	bne.n	8005bb6 <__gethex+0x37a>
 8005b52:	b127      	cbz	r7, 8005b5e <__gethex+0x322>
 8005b54:	4639      	mov	r1, r7
 8005b56:	4620      	mov	r0, r4
 8005b58:	f000 fe2d 	bl	80067b6 <__any_on>
 8005b5c:	4682      	mov	sl, r0
 8005b5e:	117b      	asrs	r3, r7, #5
 8005b60:	2101      	movs	r1, #1
 8005b62:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005b66:	f007 071f 	and.w	r7, r7, #31
 8005b6a:	fa01 f707 	lsl.w	r7, r1, r7
 8005b6e:	421f      	tst	r7, r3
 8005b70:	4629      	mov	r1, r5
 8005b72:	4620      	mov	r0, r4
 8005b74:	bf18      	it	ne
 8005b76:	f04a 0a02 	orrne.w	sl, sl, #2
 8005b7a:	1b76      	subs	r6, r6, r5
 8005b7c:	f7ff fdf6 	bl	800576c <rshift>
 8005b80:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005b84:	2702      	movs	r7, #2
 8005b86:	f1ba 0f00 	cmp.w	sl, #0
 8005b8a:	d048      	beq.n	8005c1e <__gethex+0x3e2>
 8005b8c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d015      	beq.n	8005bc0 <__gethex+0x384>
 8005b94:	2b03      	cmp	r3, #3
 8005b96:	d017      	beq.n	8005bc8 <__gethex+0x38c>
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d109      	bne.n	8005bb0 <__gethex+0x374>
 8005b9c:	f01a 0f02 	tst.w	sl, #2
 8005ba0:	d006      	beq.n	8005bb0 <__gethex+0x374>
 8005ba2:	f8d9 0000 	ldr.w	r0, [r9]
 8005ba6:	ea4a 0a00 	orr.w	sl, sl, r0
 8005baa:	f01a 0f01 	tst.w	sl, #1
 8005bae:	d10e      	bne.n	8005bce <__gethex+0x392>
 8005bb0:	f047 0710 	orr.w	r7, r7, #16
 8005bb4:	e033      	b.n	8005c1e <__gethex+0x3e2>
 8005bb6:	f04f 0a01 	mov.w	sl, #1
 8005bba:	e7d0      	b.n	8005b5e <__gethex+0x322>
 8005bbc:	2701      	movs	r7, #1
 8005bbe:	e7e2      	b.n	8005b86 <__gethex+0x34a>
 8005bc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005bc2:	f1c3 0301 	rsb	r3, r3, #1
 8005bc6:	9315      	str	r3, [sp, #84]	; 0x54
 8005bc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d0f0      	beq.n	8005bb0 <__gethex+0x374>
 8005bce:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005bd2:	f104 0314 	add.w	r3, r4, #20
 8005bd6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005bda:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005bde:	f04f 0c00 	mov.w	ip, #0
 8005be2:	4618      	mov	r0, r3
 8005be4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005be8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8005bec:	d01c      	beq.n	8005c28 <__gethex+0x3ec>
 8005bee:	3201      	adds	r2, #1
 8005bf0:	6002      	str	r2, [r0, #0]
 8005bf2:	2f02      	cmp	r7, #2
 8005bf4:	f104 0314 	add.w	r3, r4, #20
 8005bf8:	d13d      	bne.n	8005c76 <__gethex+0x43a>
 8005bfa:	f8d8 2000 	ldr.w	r2, [r8]
 8005bfe:	3a01      	subs	r2, #1
 8005c00:	42b2      	cmp	r2, r6
 8005c02:	d10a      	bne.n	8005c1a <__gethex+0x3de>
 8005c04:	1171      	asrs	r1, r6, #5
 8005c06:	2201      	movs	r2, #1
 8005c08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005c0c:	f006 061f 	and.w	r6, r6, #31
 8005c10:	fa02 f606 	lsl.w	r6, r2, r6
 8005c14:	421e      	tst	r6, r3
 8005c16:	bf18      	it	ne
 8005c18:	4617      	movne	r7, r2
 8005c1a:	f047 0720 	orr.w	r7, r7, #32
 8005c1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c20:	601c      	str	r4, [r3, #0]
 8005c22:	9b05      	ldr	r3, [sp, #20]
 8005c24:	601d      	str	r5, [r3, #0]
 8005c26:	e69b      	b.n	8005960 <__gethex+0x124>
 8005c28:	4299      	cmp	r1, r3
 8005c2a:	f843 cc04 	str.w	ip, [r3, #-4]
 8005c2e:	d8d8      	bhi.n	8005be2 <__gethex+0x3a6>
 8005c30:	68a3      	ldr	r3, [r4, #8]
 8005c32:	459b      	cmp	fp, r3
 8005c34:	db17      	blt.n	8005c66 <__gethex+0x42a>
 8005c36:	6861      	ldr	r1, [r4, #4]
 8005c38:	9802      	ldr	r0, [sp, #8]
 8005c3a:	3101      	adds	r1, #1
 8005c3c:	f000 f928 	bl	8005e90 <_Balloc>
 8005c40:	4681      	mov	r9, r0
 8005c42:	b918      	cbnz	r0, 8005c4c <__gethex+0x410>
 8005c44:	4b1a      	ldr	r3, [pc, #104]	; (8005cb0 <__gethex+0x474>)
 8005c46:	4602      	mov	r2, r0
 8005c48:	2184      	movs	r1, #132	; 0x84
 8005c4a:	e6ac      	b.n	80059a6 <__gethex+0x16a>
 8005c4c:	6922      	ldr	r2, [r4, #16]
 8005c4e:	3202      	adds	r2, #2
 8005c50:	f104 010c 	add.w	r1, r4, #12
 8005c54:	0092      	lsls	r2, r2, #2
 8005c56:	300c      	adds	r0, #12
 8005c58:	f000 f90c 	bl	8005e74 <memcpy>
 8005c5c:	4621      	mov	r1, r4
 8005c5e:	9802      	ldr	r0, [sp, #8]
 8005c60:	f000 f956 	bl	8005f10 <_Bfree>
 8005c64:	464c      	mov	r4, r9
 8005c66:	6923      	ldr	r3, [r4, #16]
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005c6e:	6122      	str	r2, [r4, #16]
 8005c70:	2201      	movs	r2, #1
 8005c72:	615a      	str	r2, [r3, #20]
 8005c74:	e7bd      	b.n	8005bf2 <__gethex+0x3b6>
 8005c76:	6922      	ldr	r2, [r4, #16]
 8005c78:	455a      	cmp	r2, fp
 8005c7a:	dd0b      	ble.n	8005c94 <__gethex+0x458>
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	4620      	mov	r0, r4
 8005c80:	f7ff fd74 	bl	800576c <rshift>
 8005c84:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005c88:	3501      	adds	r5, #1
 8005c8a:	42ab      	cmp	r3, r5
 8005c8c:	f6ff aed5 	blt.w	8005a3a <__gethex+0x1fe>
 8005c90:	2701      	movs	r7, #1
 8005c92:	e7c2      	b.n	8005c1a <__gethex+0x3de>
 8005c94:	f016 061f 	ands.w	r6, r6, #31
 8005c98:	d0fa      	beq.n	8005c90 <__gethex+0x454>
 8005c9a:	4453      	add	r3, sl
 8005c9c:	f1c6 0620 	rsb	r6, r6, #32
 8005ca0:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005ca4:	f000 f9e6 	bl	8006074 <__hi0bits>
 8005ca8:	42b0      	cmp	r0, r6
 8005caa:	dbe7      	blt.n	8005c7c <__gethex+0x440>
 8005cac:	e7f0      	b.n	8005c90 <__gethex+0x454>
 8005cae:	bf00      	nop
 8005cb0:	08007aa0 	.word	0x08007aa0

08005cb4 <L_shift>:
 8005cb4:	f1c2 0208 	rsb	r2, r2, #8
 8005cb8:	0092      	lsls	r2, r2, #2
 8005cba:	b570      	push	{r4, r5, r6, lr}
 8005cbc:	f1c2 0620 	rsb	r6, r2, #32
 8005cc0:	6843      	ldr	r3, [r0, #4]
 8005cc2:	6804      	ldr	r4, [r0, #0]
 8005cc4:	fa03 f506 	lsl.w	r5, r3, r6
 8005cc8:	432c      	orrs	r4, r5
 8005cca:	40d3      	lsrs	r3, r2
 8005ccc:	6004      	str	r4, [r0, #0]
 8005cce:	f840 3f04 	str.w	r3, [r0, #4]!
 8005cd2:	4288      	cmp	r0, r1
 8005cd4:	d3f4      	bcc.n	8005cc0 <L_shift+0xc>
 8005cd6:	bd70      	pop	{r4, r5, r6, pc}

08005cd8 <__match>:
 8005cd8:	b530      	push	{r4, r5, lr}
 8005cda:	6803      	ldr	r3, [r0, #0]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ce2:	b914      	cbnz	r4, 8005cea <__match+0x12>
 8005ce4:	6003      	str	r3, [r0, #0]
 8005ce6:	2001      	movs	r0, #1
 8005ce8:	bd30      	pop	{r4, r5, pc}
 8005cea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005cf2:	2d19      	cmp	r5, #25
 8005cf4:	bf98      	it	ls
 8005cf6:	3220      	addls	r2, #32
 8005cf8:	42a2      	cmp	r2, r4
 8005cfa:	d0f0      	beq.n	8005cde <__match+0x6>
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	e7f3      	b.n	8005ce8 <__match+0x10>

08005d00 <__hexnan>:
 8005d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d04:	680b      	ldr	r3, [r1, #0]
 8005d06:	115e      	asrs	r6, r3, #5
 8005d08:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005d0c:	f013 031f 	ands.w	r3, r3, #31
 8005d10:	b087      	sub	sp, #28
 8005d12:	bf18      	it	ne
 8005d14:	3604      	addne	r6, #4
 8005d16:	2500      	movs	r5, #0
 8005d18:	1f37      	subs	r7, r6, #4
 8005d1a:	4690      	mov	r8, r2
 8005d1c:	6802      	ldr	r2, [r0, #0]
 8005d1e:	9301      	str	r3, [sp, #4]
 8005d20:	4682      	mov	sl, r0
 8005d22:	f846 5c04 	str.w	r5, [r6, #-4]
 8005d26:	46b9      	mov	r9, r7
 8005d28:	463c      	mov	r4, r7
 8005d2a:	9502      	str	r5, [sp, #8]
 8005d2c:	46ab      	mov	fp, r5
 8005d2e:	7851      	ldrb	r1, [r2, #1]
 8005d30:	1c53      	adds	r3, r2, #1
 8005d32:	9303      	str	r3, [sp, #12]
 8005d34:	b341      	cbz	r1, 8005d88 <__hexnan+0x88>
 8005d36:	4608      	mov	r0, r1
 8005d38:	9205      	str	r2, [sp, #20]
 8005d3a:	9104      	str	r1, [sp, #16]
 8005d3c:	f7ff fd68 	bl	8005810 <__hexdig_fun>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d14f      	bne.n	8005de4 <__hexnan+0xe4>
 8005d44:	9904      	ldr	r1, [sp, #16]
 8005d46:	9a05      	ldr	r2, [sp, #20]
 8005d48:	2920      	cmp	r1, #32
 8005d4a:	d818      	bhi.n	8005d7e <__hexnan+0x7e>
 8005d4c:	9b02      	ldr	r3, [sp, #8]
 8005d4e:	459b      	cmp	fp, r3
 8005d50:	dd13      	ble.n	8005d7a <__hexnan+0x7a>
 8005d52:	454c      	cmp	r4, r9
 8005d54:	d206      	bcs.n	8005d64 <__hexnan+0x64>
 8005d56:	2d07      	cmp	r5, #7
 8005d58:	dc04      	bgt.n	8005d64 <__hexnan+0x64>
 8005d5a:	462a      	mov	r2, r5
 8005d5c:	4649      	mov	r1, r9
 8005d5e:	4620      	mov	r0, r4
 8005d60:	f7ff ffa8 	bl	8005cb4 <L_shift>
 8005d64:	4544      	cmp	r4, r8
 8005d66:	d950      	bls.n	8005e0a <__hexnan+0x10a>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f1a4 0904 	sub.w	r9, r4, #4
 8005d6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8005d72:	f8cd b008 	str.w	fp, [sp, #8]
 8005d76:	464c      	mov	r4, r9
 8005d78:	461d      	mov	r5, r3
 8005d7a:	9a03      	ldr	r2, [sp, #12]
 8005d7c:	e7d7      	b.n	8005d2e <__hexnan+0x2e>
 8005d7e:	2929      	cmp	r1, #41	; 0x29
 8005d80:	d156      	bne.n	8005e30 <__hexnan+0x130>
 8005d82:	3202      	adds	r2, #2
 8005d84:	f8ca 2000 	str.w	r2, [sl]
 8005d88:	f1bb 0f00 	cmp.w	fp, #0
 8005d8c:	d050      	beq.n	8005e30 <__hexnan+0x130>
 8005d8e:	454c      	cmp	r4, r9
 8005d90:	d206      	bcs.n	8005da0 <__hexnan+0xa0>
 8005d92:	2d07      	cmp	r5, #7
 8005d94:	dc04      	bgt.n	8005da0 <__hexnan+0xa0>
 8005d96:	462a      	mov	r2, r5
 8005d98:	4649      	mov	r1, r9
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	f7ff ff8a 	bl	8005cb4 <L_shift>
 8005da0:	4544      	cmp	r4, r8
 8005da2:	d934      	bls.n	8005e0e <__hexnan+0x10e>
 8005da4:	f1a8 0204 	sub.w	r2, r8, #4
 8005da8:	4623      	mov	r3, r4
 8005daa:	f853 1b04 	ldr.w	r1, [r3], #4
 8005dae:	f842 1f04 	str.w	r1, [r2, #4]!
 8005db2:	429f      	cmp	r7, r3
 8005db4:	d2f9      	bcs.n	8005daa <__hexnan+0xaa>
 8005db6:	1b3b      	subs	r3, r7, r4
 8005db8:	f023 0303 	bic.w	r3, r3, #3
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	3401      	adds	r4, #1
 8005dc0:	3e03      	subs	r6, #3
 8005dc2:	42b4      	cmp	r4, r6
 8005dc4:	bf88      	it	hi
 8005dc6:	2304      	movhi	r3, #4
 8005dc8:	4443      	add	r3, r8
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f843 2b04 	str.w	r2, [r3], #4
 8005dd0:	429f      	cmp	r7, r3
 8005dd2:	d2fb      	bcs.n	8005dcc <__hexnan+0xcc>
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	b91b      	cbnz	r3, 8005de0 <__hexnan+0xe0>
 8005dd8:	4547      	cmp	r7, r8
 8005dda:	d127      	bne.n	8005e2c <__hexnan+0x12c>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	603b      	str	r3, [r7, #0]
 8005de0:	2005      	movs	r0, #5
 8005de2:	e026      	b.n	8005e32 <__hexnan+0x132>
 8005de4:	3501      	adds	r5, #1
 8005de6:	2d08      	cmp	r5, #8
 8005de8:	f10b 0b01 	add.w	fp, fp, #1
 8005dec:	dd06      	ble.n	8005dfc <__hexnan+0xfc>
 8005dee:	4544      	cmp	r4, r8
 8005df0:	d9c3      	bls.n	8005d7a <__hexnan+0x7a>
 8005df2:	2300      	movs	r3, #0
 8005df4:	f844 3c04 	str.w	r3, [r4, #-4]
 8005df8:	2501      	movs	r5, #1
 8005dfa:	3c04      	subs	r4, #4
 8005dfc:	6822      	ldr	r2, [r4, #0]
 8005dfe:	f000 000f 	and.w	r0, r0, #15
 8005e02:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005e06:	6022      	str	r2, [r4, #0]
 8005e08:	e7b7      	b.n	8005d7a <__hexnan+0x7a>
 8005e0a:	2508      	movs	r5, #8
 8005e0c:	e7b5      	b.n	8005d7a <__hexnan+0x7a>
 8005e0e:	9b01      	ldr	r3, [sp, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0df      	beq.n	8005dd4 <__hexnan+0xd4>
 8005e14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e18:	f1c3 0320 	rsb	r3, r3, #32
 8005e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005e24:	401a      	ands	r2, r3
 8005e26:	f846 2c04 	str.w	r2, [r6, #-4]
 8005e2a:	e7d3      	b.n	8005dd4 <__hexnan+0xd4>
 8005e2c:	3f04      	subs	r7, #4
 8005e2e:	e7d1      	b.n	8005dd4 <__hexnan+0xd4>
 8005e30:	2004      	movs	r0, #4
 8005e32:	b007      	add	sp, #28
 8005e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005e38 <_localeconv_r>:
 8005e38:	4800      	ldr	r0, [pc, #0]	; (8005e3c <_localeconv_r+0x4>)
 8005e3a:	4770      	bx	lr
 8005e3c:	20000158 	.word	0x20000158

08005e40 <malloc>:
 8005e40:	4b02      	ldr	r3, [pc, #8]	; (8005e4c <malloc+0xc>)
 8005e42:	4601      	mov	r1, r0
 8005e44:	6818      	ldr	r0, [r3, #0]
 8005e46:	f000 bd55 	b.w	80068f4 <_malloc_r>
 8005e4a:	bf00      	nop
 8005e4c:	20000000 	.word	0x20000000

08005e50 <__ascii_mbtowc>:
 8005e50:	b082      	sub	sp, #8
 8005e52:	b901      	cbnz	r1, 8005e56 <__ascii_mbtowc+0x6>
 8005e54:	a901      	add	r1, sp, #4
 8005e56:	b142      	cbz	r2, 8005e6a <__ascii_mbtowc+0x1a>
 8005e58:	b14b      	cbz	r3, 8005e6e <__ascii_mbtowc+0x1e>
 8005e5a:	7813      	ldrb	r3, [r2, #0]
 8005e5c:	600b      	str	r3, [r1, #0]
 8005e5e:	7812      	ldrb	r2, [r2, #0]
 8005e60:	1e10      	subs	r0, r2, #0
 8005e62:	bf18      	it	ne
 8005e64:	2001      	movne	r0, #1
 8005e66:	b002      	add	sp, #8
 8005e68:	4770      	bx	lr
 8005e6a:	4610      	mov	r0, r2
 8005e6c:	e7fb      	b.n	8005e66 <__ascii_mbtowc+0x16>
 8005e6e:	f06f 0001 	mvn.w	r0, #1
 8005e72:	e7f8      	b.n	8005e66 <__ascii_mbtowc+0x16>

08005e74 <memcpy>:
 8005e74:	440a      	add	r2, r1
 8005e76:	4291      	cmp	r1, r2
 8005e78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005e7c:	d100      	bne.n	8005e80 <memcpy+0xc>
 8005e7e:	4770      	bx	lr
 8005e80:	b510      	push	{r4, lr}
 8005e82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e8a:	4291      	cmp	r1, r2
 8005e8c:	d1f9      	bne.n	8005e82 <memcpy+0xe>
 8005e8e:	bd10      	pop	{r4, pc}

08005e90 <_Balloc>:
 8005e90:	b570      	push	{r4, r5, r6, lr}
 8005e92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005e94:	4604      	mov	r4, r0
 8005e96:	460d      	mov	r5, r1
 8005e98:	b976      	cbnz	r6, 8005eb8 <_Balloc+0x28>
 8005e9a:	2010      	movs	r0, #16
 8005e9c:	f7ff ffd0 	bl	8005e40 <malloc>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	6260      	str	r0, [r4, #36]	; 0x24
 8005ea4:	b920      	cbnz	r0, 8005eb0 <_Balloc+0x20>
 8005ea6:	4b18      	ldr	r3, [pc, #96]	; (8005f08 <_Balloc+0x78>)
 8005ea8:	4818      	ldr	r0, [pc, #96]	; (8005f0c <_Balloc+0x7c>)
 8005eaa:	2166      	movs	r1, #102	; 0x66
 8005eac:	f000 ff2a 	bl	8006d04 <__assert_func>
 8005eb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005eb4:	6006      	str	r6, [r0, #0]
 8005eb6:	60c6      	str	r6, [r0, #12]
 8005eb8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005eba:	68f3      	ldr	r3, [r6, #12]
 8005ebc:	b183      	cbz	r3, 8005ee0 <_Balloc+0x50>
 8005ebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ec6:	b9b8      	cbnz	r0, 8005ef8 <_Balloc+0x68>
 8005ec8:	2101      	movs	r1, #1
 8005eca:	fa01 f605 	lsl.w	r6, r1, r5
 8005ece:	1d72      	adds	r2, r6, #5
 8005ed0:	0092      	lsls	r2, r2, #2
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f000 fc90 	bl	80067f8 <_calloc_r>
 8005ed8:	b160      	cbz	r0, 8005ef4 <_Balloc+0x64>
 8005eda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ede:	e00e      	b.n	8005efe <_Balloc+0x6e>
 8005ee0:	2221      	movs	r2, #33	; 0x21
 8005ee2:	2104      	movs	r1, #4
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	f000 fc87 	bl	80067f8 <_calloc_r>
 8005eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eec:	60f0      	str	r0, [r6, #12]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e4      	bne.n	8005ebe <_Balloc+0x2e>
 8005ef4:	2000      	movs	r0, #0
 8005ef6:	bd70      	pop	{r4, r5, r6, pc}
 8005ef8:	6802      	ldr	r2, [r0, #0]
 8005efa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005efe:	2300      	movs	r3, #0
 8005f00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f04:	e7f7      	b.n	8005ef6 <_Balloc+0x66>
 8005f06:	bf00      	nop
 8005f08:	08007a2e 	.word	0x08007a2e
 8005f0c:	08007b2c 	.word	0x08007b2c

08005f10 <_Bfree>:
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f14:	4605      	mov	r5, r0
 8005f16:	460c      	mov	r4, r1
 8005f18:	b976      	cbnz	r6, 8005f38 <_Bfree+0x28>
 8005f1a:	2010      	movs	r0, #16
 8005f1c:	f7ff ff90 	bl	8005e40 <malloc>
 8005f20:	4602      	mov	r2, r0
 8005f22:	6268      	str	r0, [r5, #36]	; 0x24
 8005f24:	b920      	cbnz	r0, 8005f30 <_Bfree+0x20>
 8005f26:	4b09      	ldr	r3, [pc, #36]	; (8005f4c <_Bfree+0x3c>)
 8005f28:	4809      	ldr	r0, [pc, #36]	; (8005f50 <_Bfree+0x40>)
 8005f2a:	218a      	movs	r1, #138	; 0x8a
 8005f2c:	f000 feea 	bl	8006d04 <__assert_func>
 8005f30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f34:	6006      	str	r6, [r0, #0]
 8005f36:	60c6      	str	r6, [r0, #12]
 8005f38:	b13c      	cbz	r4, 8005f4a <_Bfree+0x3a>
 8005f3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f3c:	6862      	ldr	r2, [r4, #4]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f44:	6021      	str	r1, [r4, #0]
 8005f46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f4a:	bd70      	pop	{r4, r5, r6, pc}
 8005f4c:	08007a2e 	.word	0x08007a2e
 8005f50:	08007b2c 	.word	0x08007b2c

08005f54 <__multadd>:
 8005f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f58:	690d      	ldr	r5, [r1, #16]
 8005f5a:	4607      	mov	r7, r0
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	461e      	mov	r6, r3
 8005f60:	f101 0c14 	add.w	ip, r1, #20
 8005f64:	2000      	movs	r0, #0
 8005f66:	f8dc 3000 	ldr.w	r3, [ip]
 8005f6a:	b299      	uxth	r1, r3
 8005f6c:	fb02 6101 	mla	r1, r2, r1, r6
 8005f70:	0c1e      	lsrs	r6, r3, #16
 8005f72:	0c0b      	lsrs	r3, r1, #16
 8005f74:	fb02 3306 	mla	r3, r2, r6, r3
 8005f78:	b289      	uxth	r1, r1
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005f80:	4285      	cmp	r5, r0
 8005f82:	f84c 1b04 	str.w	r1, [ip], #4
 8005f86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005f8a:	dcec      	bgt.n	8005f66 <__multadd+0x12>
 8005f8c:	b30e      	cbz	r6, 8005fd2 <__multadd+0x7e>
 8005f8e:	68a3      	ldr	r3, [r4, #8]
 8005f90:	42ab      	cmp	r3, r5
 8005f92:	dc19      	bgt.n	8005fc8 <__multadd+0x74>
 8005f94:	6861      	ldr	r1, [r4, #4]
 8005f96:	4638      	mov	r0, r7
 8005f98:	3101      	adds	r1, #1
 8005f9a:	f7ff ff79 	bl	8005e90 <_Balloc>
 8005f9e:	4680      	mov	r8, r0
 8005fa0:	b928      	cbnz	r0, 8005fae <__multadd+0x5a>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	4b0c      	ldr	r3, [pc, #48]	; (8005fd8 <__multadd+0x84>)
 8005fa6:	480d      	ldr	r0, [pc, #52]	; (8005fdc <__multadd+0x88>)
 8005fa8:	21b5      	movs	r1, #181	; 0xb5
 8005faa:	f000 feab 	bl	8006d04 <__assert_func>
 8005fae:	6922      	ldr	r2, [r4, #16]
 8005fb0:	3202      	adds	r2, #2
 8005fb2:	f104 010c 	add.w	r1, r4, #12
 8005fb6:	0092      	lsls	r2, r2, #2
 8005fb8:	300c      	adds	r0, #12
 8005fba:	f7ff ff5b 	bl	8005e74 <memcpy>
 8005fbe:	4621      	mov	r1, r4
 8005fc0:	4638      	mov	r0, r7
 8005fc2:	f7ff ffa5 	bl	8005f10 <_Bfree>
 8005fc6:	4644      	mov	r4, r8
 8005fc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005fcc:	3501      	adds	r5, #1
 8005fce:	615e      	str	r6, [r3, #20]
 8005fd0:	6125      	str	r5, [r4, #16]
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fd8:	08007aa0 	.word	0x08007aa0
 8005fdc:	08007b2c 	.word	0x08007b2c

08005fe0 <__s2b>:
 8005fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fe4:	460c      	mov	r4, r1
 8005fe6:	4615      	mov	r5, r2
 8005fe8:	461f      	mov	r7, r3
 8005fea:	2209      	movs	r2, #9
 8005fec:	3308      	adds	r3, #8
 8005fee:	4606      	mov	r6, r0
 8005ff0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	db09      	blt.n	8006010 <__s2b+0x30>
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	f7ff ff47 	bl	8005e90 <_Balloc>
 8006002:	b940      	cbnz	r0, 8006016 <__s2b+0x36>
 8006004:	4602      	mov	r2, r0
 8006006:	4b19      	ldr	r3, [pc, #100]	; (800606c <__s2b+0x8c>)
 8006008:	4819      	ldr	r0, [pc, #100]	; (8006070 <__s2b+0x90>)
 800600a:	21ce      	movs	r1, #206	; 0xce
 800600c:	f000 fe7a 	bl	8006d04 <__assert_func>
 8006010:	0052      	lsls	r2, r2, #1
 8006012:	3101      	adds	r1, #1
 8006014:	e7f0      	b.n	8005ff8 <__s2b+0x18>
 8006016:	9b08      	ldr	r3, [sp, #32]
 8006018:	6143      	str	r3, [r0, #20]
 800601a:	2d09      	cmp	r5, #9
 800601c:	f04f 0301 	mov.w	r3, #1
 8006020:	6103      	str	r3, [r0, #16]
 8006022:	dd16      	ble.n	8006052 <__s2b+0x72>
 8006024:	f104 0909 	add.w	r9, r4, #9
 8006028:	46c8      	mov	r8, r9
 800602a:	442c      	add	r4, r5
 800602c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006030:	4601      	mov	r1, r0
 8006032:	3b30      	subs	r3, #48	; 0x30
 8006034:	220a      	movs	r2, #10
 8006036:	4630      	mov	r0, r6
 8006038:	f7ff ff8c 	bl	8005f54 <__multadd>
 800603c:	45a0      	cmp	r8, r4
 800603e:	d1f5      	bne.n	800602c <__s2b+0x4c>
 8006040:	f1a5 0408 	sub.w	r4, r5, #8
 8006044:	444c      	add	r4, r9
 8006046:	1b2d      	subs	r5, r5, r4
 8006048:	1963      	adds	r3, r4, r5
 800604a:	42bb      	cmp	r3, r7
 800604c:	db04      	blt.n	8006058 <__s2b+0x78>
 800604e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006052:	340a      	adds	r4, #10
 8006054:	2509      	movs	r5, #9
 8006056:	e7f6      	b.n	8006046 <__s2b+0x66>
 8006058:	f814 3b01 	ldrb.w	r3, [r4], #1
 800605c:	4601      	mov	r1, r0
 800605e:	3b30      	subs	r3, #48	; 0x30
 8006060:	220a      	movs	r2, #10
 8006062:	4630      	mov	r0, r6
 8006064:	f7ff ff76 	bl	8005f54 <__multadd>
 8006068:	e7ee      	b.n	8006048 <__s2b+0x68>
 800606a:	bf00      	nop
 800606c:	08007aa0 	.word	0x08007aa0
 8006070:	08007b2c 	.word	0x08007b2c

08006074 <__hi0bits>:
 8006074:	0c02      	lsrs	r2, r0, #16
 8006076:	0412      	lsls	r2, r2, #16
 8006078:	4603      	mov	r3, r0
 800607a:	b9ca      	cbnz	r2, 80060b0 <__hi0bits+0x3c>
 800607c:	0403      	lsls	r3, r0, #16
 800607e:	2010      	movs	r0, #16
 8006080:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006084:	bf04      	itt	eq
 8006086:	021b      	lsleq	r3, r3, #8
 8006088:	3008      	addeq	r0, #8
 800608a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800608e:	bf04      	itt	eq
 8006090:	011b      	lsleq	r3, r3, #4
 8006092:	3004      	addeq	r0, #4
 8006094:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006098:	bf04      	itt	eq
 800609a:	009b      	lsleq	r3, r3, #2
 800609c:	3002      	addeq	r0, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	db05      	blt.n	80060ae <__hi0bits+0x3a>
 80060a2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80060a6:	f100 0001 	add.w	r0, r0, #1
 80060aa:	bf08      	it	eq
 80060ac:	2020      	moveq	r0, #32
 80060ae:	4770      	bx	lr
 80060b0:	2000      	movs	r0, #0
 80060b2:	e7e5      	b.n	8006080 <__hi0bits+0xc>

080060b4 <__lo0bits>:
 80060b4:	6803      	ldr	r3, [r0, #0]
 80060b6:	4602      	mov	r2, r0
 80060b8:	f013 0007 	ands.w	r0, r3, #7
 80060bc:	d00b      	beq.n	80060d6 <__lo0bits+0x22>
 80060be:	07d9      	lsls	r1, r3, #31
 80060c0:	d421      	bmi.n	8006106 <__lo0bits+0x52>
 80060c2:	0798      	lsls	r0, r3, #30
 80060c4:	bf49      	itett	mi
 80060c6:	085b      	lsrmi	r3, r3, #1
 80060c8:	089b      	lsrpl	r3, r3, #2
 80060ca:	2001      	movmi	r0, #1
 80060cc:	6013      	strmi	r3, [r2, #0]
 80060ce:	bf5c      	itt	pl
 80060d0:	6013      	strpl	r3, [r2, #0]
 80060d2:	2002      	movpl	r0, #2
 80060d4:	4770      	bx	lr
 80060d6:	b299      	uxth	r1, r3
 80060d8:	b909      	cbnz	r1, 80060de <__lo0bits+0x2a>
 80060da:	0c1b      	lsrs	r3, r3, #16
 80060dc:	2010      	movs	r0, #16
 80060de:	b2d9      	uxtb	r1, r3
 80060e0:	b909      	cbnz	r1, 80060e6 <__lo0bits+0x32>
 80060e2:	3008      	adds	r0, #8
 80060e4:	0a1b      	lsrs	r3, r3, #8
 80060e6:	0719      	lsls	r1, r3, #28
 80060e8:	bf04      	itt	eq
 80060ea:	091b      	lsreq	r3, r3, #4
 80060ec:	3004      	addeq	r0, #4
 80060ee:	0799      	lsls	r1, r3, #30
 80060f0:	bf04      	itt	eq
 80060f2:	089b      	lsreq	r3, r3, #2
 80060f4:	3002      	addeq	r0, #2
 80060f6:	07d9      	lsls	r1, r3, #31
 80060f8:	d403      	bmi.n	8006102 <__lo0bits+0x4e>
 80060fa:	085b      	lsrs	r3, r3, #1
 80060fc:	f100 0001 	add.w	r0, r0, #1
 8006100:	d003      	beq.n	800610a <__lo0bits+0x56>
 8006102:	6013      	str	r3, [r2, #0]
 8006104:	4770      	bx	lr
 8006106:	2000      	movs	r0, #0
 8006108:	4770      	bx	lr
 800610a:	2020      	movs	r0, #32
 800610c:	4770      	bx	lr
	...

08006110 <__i2b>:
 8006110:	b510      	push	{r4, lr}
 8006112:	460c      	mov	r4, r1
 8006114:	2101      	movs	r1, #1
 8006116:	f7ff febb 	bl	8005e90 <_Balloc>
 800611a:	4602      	mov	r2, r0
 800611c:	b928      	cbnz	r0, 800612a <__i2b+0x1a>
 800611e:	4b05      	ldr	r3, [pc, #20]	; (8006134 <__i2b+0x24>)
 8006120:	4805      	ldr	r0, [pc, #20]	; (8006138 <__i2b+0x28>)
 8006122:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006126:	f000 fded 	bl	8006d04 <__assert_func>
 800612a:	2301      	movs	r3, #1
 800612c:	6144      	str	r4, [r0, #20]
 800612e:	6103      	str	r3, [r0, #16]
 8006130:	bd10      	pop	{r4, pc}
 8006132:	bf00      	nop
 8006134:	08007aa0 	.word	0x08007aa0
 8006138:	08007b2c 	.word	0x08007b2c

0800613c <__multiply>:
 800613c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006140:	4691      	mov	r9, r2
 8006142:	690a      	ldr	r2, [r1, #16]
 8006144:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006148:	429a      	cmp	r2, r3
 800614a:	bfb8      	it	lt
 800614c:	460b      	movlt	r3, r1
 800614e:	460c      	mov	r4, r1
 8006150:	bfbc      	itt	lt
 8006152:	464c      	movlt	r4, r9
 8006154:	4699      	movlt	r9, r3
 8006156:	6927      	ldr	r7, [r4, #16]
 8006158:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800615c:	68a3      	ldr	r3, [r4, #8]
 800615e:	6861      	ldr	r1, [r4, #4]
 8006160:	eb07 060a 	add.w	r6, r7, sl
 8006164:	42b3      	cmp	r3, r6
 8006166:	b085      	sub	sp, #20
 8006168:	bfb8      	it	lt
 800616a:	3101      	addlt	r1, #1
 800616c:	f7ff fe90 	bl	8005e90 <_Balloc>
 8006170:	b930      	cbnz	r0, 8006180 <__multiply+0x44>
 8006172:	4602      	mov	r2, r0
 8006174:	4b43      	ldr	r3, [pc, #268]	; (8006284 <__multiply+0x148>)
 8006176:	4844      	ldr	r0, [pc, #272]	; (8006288 <__multiply+0x14c>)
 8006178:	f240 115d 	movw	r1, #349	; 0x15d
 800617c:	f000 fdc2 	bl	8006d04 <__assert_func>
 8006180:	f100 0514 	add.w	r5, r0, #20
 8006184:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006188:	462b      	mov	r3, r5
 800618a:	2200      	movs	r2, #0
 800618c:	4543      	cmp	r3, r8
 800618e:	d321      	bcc.n	80061d4 <__multiply+0x98>
 8006190:	f104 0314 	add.w	r3, r4, #20
 8006194:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006198:	f109 0314 	add.w	r3, r9, #20
 800619c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80061a0:	9202      	str	r2, [sp, #8]
 80061a2:	1b3a      	subs	r2, r7, r4
 80061a4:	3a15      	subs	r2, #21
 80061a6:	f022 0203 	bic.w	r2, r2, #3
 80061aa:	3204      	adds	r2, #4
 80061ac:	f104 0115 	add.w	r1, r4, #21
 80061b0:	428f      	cmp	r7, r1
 80061b2:	bf38      	it	cc
 80061b4:	2204      	movcc	r2, #4
 80061b6:	9201      	str	r2, [sp, #4]
 80061b8:	9a02      	ldr	r2, [sp, #8]
 80061ba:	9303      	str	r3, [sp, #12]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d80c      	bhi.n	80061da <__multiply+0x9e>
 80061c0:	2e00      	cmp	r6, #0
 80061c2:	dd03      	ble.n	80061cc <__multiply+0x90>
 80061c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d059      	beq.n	8006280 <__multiply+0x144>
 80061cc:	6106      	str	r6, [r0, #16]
 80061ce:	b005      	add	sp, #20
 80061d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d4:	f843 2b04 	str.w	r2, [r3], #4
 80061d8:	e7d8      	b.n	800618c <__multiply+0x50>
 80061da:	f8b3 a000 	ldrh.w	sl, [r3]
 80061de:	f1ba 0f00 	cmp.w	sl, #0
 80061e2:	d023      	beq.n	800622c <__multiply+0xf0>
 80061e4:	f104 0e14 	add.w	lr, r4, #20
 80061e8:	46a9      	mov	r9, r5
 80061ea:	f04f 0c00 	mov.w	ip, #0
 80061ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80061f2:	f8d9 1000 	ldr.w	r1, [r9]
 80061f6:	fa1f fb82 	uxth.w	fp, r2
 80061fa:	b289      	uxth	r1, r1
 80061fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8006200:	4461      	add	r1, ip
 8006202:	f8d9 c000 	ldr.w	ip, [r9]
 8006206:	0c12      	lsrs	r2, r2, #16
 8006208:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800620c:	fb0a c202 	mla	r2, sl, r2, ip
 8006210:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006214:	b289      	uxth	r1, r1
 8006216:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800621a:	4577      	cmp	r7, lr
 800621c:	f849 1b04 	str.w	r1, [r9], #4
 8006220:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006224:	d8e3      	bhi.n	80061ee <__multiply+0xb2>
 8006226:	9a01      	ldr	r2, [sp, #4]
 8006228:	f845 c002 	str.w	ip, [r5, r2]
 800622c:	9a03      	ldr	r2, [sp, #12]
 800622e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006232:	3304      	adds	r3, #4
 8006234:	f1b9 0f00 	cmp.w	r9, #0
 8006238:	d020      	beq.n	800627c <__multiply+0x140>
 800623a:	6829      	ldr	r1, [r5, #0]
 800623c:	f104 0c14 	add.w	ip, r4, #20
 8006240:	46ae      	mov	lr, r5
 8006242:	f04f 0a00 	mov.w	sl, #0
 8006246:	f8bc b000 	ldrh.w	fp, [ip]
 800624a:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800624e:	fb09 220b 	mla	r2, r9, fp, r2
 8006252:	4492      	add	sl, r2
 8006254:	b289      	uxth	r1, r1
 8006256:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800625a:	f84e 1b04 	str.w	r1, [lr], #4
 800625e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006262:	f8be 1000 	ldrh.w	r1, [lr]
 8006266:	0c12      	lsrs	r2, r2, #16
 8006268:	fb09 1102 	mla	r1, r9, r2, r1
 800626c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006270:	4567      	cmp	r7, ip
 8006272:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006276:	d8e6      	bhi.n	8006246 <__multiply+0x10a>
 8006278:	9a01      	ldr	r2, [sp, #4]
 800627a:	50a9      	str	r1, [r5, r2]
 800627c:	3504      	adds	r5, #4
 800627e:	e79b      	b.n	80061b8 <__multiply+0x7c>
 8006280:	3e01      	subs	r6, #1
 8006282:	e79d      	b.n	80061c0 <__multiply+0x84>
 8006284:	08007aa0 	.word	0x08007aa0
 8006288:	08007b2c 	.word	0x08007b2c

0800628c <__pow5mult>:
 800628c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006290:	4615      	mov	r5, r2
 8006292:	f012 0203 	ands.w	r2, r2, #3
 8006296:	4606      	mov	r6, r0
 8006298:	460f      	mov	r7, r1
 800629a:	d007      	beq.n	80062ac <__pow5mult+0x20>
 800629c:	4c25      	ldr	r4, [pc, #148]	; (8006334 <__pow5mult+0xa8>)
 800629e:	3a01      	subs	r2, #1
 80062a0:	2300      	movs	r3, #0
 80062a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80062a6:	f7ff fe55 	bl	8005f54 <__multadd>
 80062aa:	4607      	mov	r7, r0
 80062ac:	10ad      	asrs	r5, r5, #2
 80062ae:	d03d      	beq.n	800632c <__pow5mult+0xa0>
 80062b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80062b2:	b97c      	cbnz	r4, 80062d4 <__pow5mult+0x48>
 80062b4:	2010      	movs	r0, #16
 80062b6:	f7ff fdc3 	bl	8005e40 <malloc>
 80062ba:	4602      	mov	r2, r0
 80062bc:	6270      	str	r0, [r6, #36]	; 0x24
 80062be:	b928      	cbnz	r0, 80062cc <__pow5mult+0x40>
 80062c0:	4b1d      	ldr	r3, [pc, #116]	; (8006338 <__pow5mult+0xac>)
 80062c2:	481e      	ldr	r0, [pc, #120]	; (800633c <__pow5mult+0xb0>)
 80062c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80062c8:	f000 fd1c 	bl	8006d04 <__assert_func>
 80062cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062d0:	6004      	str	r4, [r0, #0]
 80062d2:	60c4      	str	r4, [r0, #12]
 80062d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80062d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80062dc:	b94c      	cbnz	r4, 80062f2 <__pow5mult+0x66>
 80062de:	f240 2171 	movw	r1, #625	; 0x271
 80062e2:	4630      	mov	r0, r6
 80062e4:	f7ff ff14 	bl	8006110 <__i2b>
 80062e8:	2300      	movs	r3, #0
 80062ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80062ee:	4604      	mov	r4, r0
 80062f0:	6003      	str	r3, [r0, #0]
 80062f2:	f04f 0900 	mov.w	r9, #0
 80062f6:	07eb      	lsls	r3, r5, #31
 80062f8:	d50a      	bpl.n	8006310 <__pow5mult+0x84>
 80062fa:	4639      	mov	r1, r7
 80062fc:	4622      	mov	r2, r4
 80062fe:	4630      	mov	r0, r6
 8006300:	f7ff ff1c 	bl	800613c <__multiply>
 8006304:	4639      	mov	r1, r7
 8006306:	4680      	mov	r8, r0
 8006308:	4630      	mov	r0, r6
 800630a:	f7ff fe01 	bl	8005f10 <_Bfree>
 800630e:	4647      	mov	r7, r8
 8006310:	106d      	asrs	r5, r5, #1
 8006312:	d00b      	beq.n	800632c <__pow5mult+0xa0>
 8006314:	6820      	ldr	r0, [r4, #0]
 8006316:	b938      	cbnz	r0, 8006328 <__pow5mult+0x9c>
 8006318:	4622      	mov	r2, r4
 800631a:	4621      	mov	r1, r4
 800631c:	4630      	mov	r0, r6
 800631e:	f7ff ff0d 	bl	800613c <__multiply>
 8006322:	6020      	str	r0, [r4, #0]
 8006324:	f8c0 9000 	str.w	r9, [r0]
 8006328:	4604      	mov	r4, r0
 800632a:	e7e4      	b.n	80062f6 <__pow5mult+0x6a>
 800632c:	4638      	mov	r0, r7
 800632e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006332:	bf00      	nop
 8006334:	08007c78 	.word	0x08007c78
 8006338:	08007a2e 	.word	0x08007a2e
 800633c:	08007b2c 	.word	0x08007b2c

08006340 <__lshift>:
 8006340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006344:	460c      	mov	r4, r1
 8006346:	6849      	ldr	r1, [r1, #4]
 8006348:	6923      	ldr	r3, [r4, #16]
 800634a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800634e:	68a3      	ldr	r3, [r4, #8]
 8006350:	4607      	mov	r7, r0
 8006352:	4691      	mov	r9, r2
 8006354:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006358:	f108 0601 	add.w	r6, r8, #1
 800635c:	42b3      	cmp	r3, r6
 800635e:	db0b      	blt.n	8006378 <__lshift+0x38>
 8006360:	4638      	mov	r0, r7
 8006362:	f7ff fd95 	bl	8005e90 <_Balloc>
 8006366:	4605      	mov	r5, r0
 8006368:	b948      	cbnz	r0, 800637e <__lshift+0x3e>
 800636a:	4602      	mov	r2, r0
 800636c:	4b2a      	ldr	r3, [pc, #168]	; (8006418 <__lshift+0xd8>)
 800636e:	482b      	ldr	r0, [pc, #172]	; (800641c <__lshift+0xdc>)
 8006370:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006374:	f000 fcc6 	bl	8006d04 <__assert_func>
 8006378:	3101      	adds	r1, #1
 800637a:	005b      	lsls	r3, r3, #1
 800637c:	e7ee      	b.n	800635c <__lshift+0x1c>
 800637e:	2300      	movs	r3, #0
 8006380:	f100 0114 	add.w	r1, r0, #20
 8006384:	f100 0210 	add.w	r2, r0, #16
 8006388:	4618      	mov	r0, r3
 800638a:	4553      	cmp	r3, sl
 800638c:	db37      	blt.n	80063fe <__lshift+0xbe>
 800638e:	6920      	ldr	r0, [r4, #16]
 8006390:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006394:	f104 0314 	add.w	r3, r4, #20
 8006398:	f019 091f 	ands.w	r9, r9, #31
 800639c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80063a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80063a4:	d02f      	beq.n	8006406 <__lshift+0xc6>
 80063a6:	f1c9 0e20 	rsb	lr, r9, #32
 80063aa:	468a      	mov	sl, r1
 80063ac:	f04f 0c00 	mov.w	ip, #0
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	fa02 f209 	lsl.w	r2, r2, r9
 80063b6:	ea42 020c 	orr.w	r2, r2, ip
 80063ba:	f84a 2b04 	str.w	r2, [sl], #4
 80063be:	f853 2b04 	ldr.w	r2, [r3], #4
 80063c2:	4298      	cmp	r0, r3
 80063c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80063c8:	d8f2      	bhi.n	80063b0 <__lshift+0x70>
 80063ca:	1b03      	subs	r3, r0, r4
 80063cc:	3b15      	subs	r3, #21
 80063ce:	f023 0303 	bic.w	r3, r3, #3
 80063d2:	3304      	adds	r3, #4
 80063d4:	f104 0215 	add.w	r2, r4, #21
 80063d8:	4290      	cmp	r0, r2
 80063da:	bf38      	it	cc
 80063dc:	2304      	movcc	r3, #4
 80063de:	f841 c003 	str.w	ip, [r1, r3]
 80063e2:	f1bc 0f00 	cmp.w	ip, #0
 80063e6:	d001      	beq.n	80063ec <__lshift+0xac>
 80063e8:	f108 0602 	add.w	r6, r8, #2
 80063ec:	3e01      	subs	r6, #1
 80063ee:	4638      	mov	r0, r7
 80063f0:	612e      	str	r6, [r5, #16]
 80063f2:	4621      	mov	r1, r4
 80063f4:	f7ff fd8c 	bl	8005f10 <_Bfree>
 80063f8:	4628      	mov	r0, r5
 80063fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8006402:	3301      	adds	r3, #1
 8006404:	e7c1      	b.n	800638a <__lshift+0x4a>
 8006406:	3904      	subs	r1, #4
 8006408:	f853 2b04 	ldr.w	r2, [r3], #4
 800640c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006410:	4298      	cmp	r0, r3
 8006412:	d8f9      	bhi.n	8006408 <__lshift+0xc8>
 8006414:	e7ea      	b.n	80063ec <__lshift+0xac>
 8006416:	bf00      	nop
 8006418:	08007aa0 	.word	0x08007aa0
 800641c:	08007b2c 	.word	0x08007b2c

08006420 <__mcmp>:
 8006420:	690a      	ldr	r2, [r1, #16]
 8006422:	4603      	mov	r3, r0
 8006424:	6900      	ldr	r0, [r0, #16]
 8006426:	1a80      	subs	r0, r0, r2
 8006428:	b530      	push	{r4, r5, lr}
 800642a:	d10d      	bne.n	8006448 <__mcmp+0x28>
 800642c:	3314      	adds	r3, #20
 800642e:	3114      	adds	r1, #20
 8006430:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006434:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006438:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800643c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006440:	4295      	cmp	r5, r2
 8006442:	d002      	beq.n	800644a <__mcmp+0x2a>
 8006444:	d304      	bcc.n	8006450 <__mcmp+0x30>
 8006446:	2001      	movs	r0, #1
 8006448:	bd30      	pop	{r4, r5, pc}
 800644a:	42a3      	cmp	r3, r4
 800644c:	d3f4      	bcc.n	8006438 <__mcmp+0x18>
 800644e:	e7fb      	b.n	8006448 <__mcmp+0x28>
 8006450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006454:	e7f8      	b.n	8006448 <__mcmp+0x28>
	...

08006458 <__mdiff>:
 8006458:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645c:	460d      	mov	r5, r1
 800645e:	4607      	mov	r7, r0
 8006460:	4611      	mov	r1, r2
 8006462:	4628      	mov	r0, r5
 8006464:	4614      	mov	r4, r2
 8006466:	f7ff ffdb 	bl	8006420 <__mcmp>
 800646a:	1e06      	subs	r6, r0, #0
 800646c:	d111      	bne.n	8006492 <__mdiff+0x3a>
 800646e:	4631      	mov	r1, r6
 8006470:	4638      	mov	r0, r7
 8006472:	f7ff fd0d 	bl	8005e90 <_Balloc>
 8006476:	4602      	mov	r2, r0
 8006478:	b928      	cbnz	r0, 8006486 <__mdiff+0x2e>
 800647a:	4b39      	ldr	r3, [pc, #228]	; (8006560 <__mdiff+0x108>)
 800647c:	f240 2132 	movw	r1, #562	; 0x232
 8006480:	4838      	ldr	r0, [pc, #224]	; (8006564 <__mdiff+0x10c>)
 8006482:	f000 fc3f 	bl	8006d04 <__assert_func>
 8006486:	2301      	movs	r3, #1
 8006488:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800648c:	4610      	mov	r0, r2
 800648e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006492:	bfa4      	itt	ge
 8006494:	4623      	movge	r3, r4
 8006496:	462c      	movge	r4, r5
 8006498:	4638      	mov	r0, r7
 800649a:	6861      	ldr	r1, [r4, #4]
 800649c:	bfa6      	itte	ge
 800649e:	461d      	movge	r5, r3
 80064a0:	2600      	movge	r6, #0
 80064a2:	2601      	movlt	r6, #1
 80064a4:	f7ff fcf4 	bl	8005e90 <_Balloc>
 80064a8:	4602      	mov	r2, r0
 80064aa:	b918      	cbnz	r0, 80064b4 <__mdiff+0x5c>
 80064ac:	4b2c      	ldr	r3, [pc, #176]	; (8006560 <__mdiff+0x108>)
 80064ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 80064b2:	e7e5      	b.n	8006480 <__mdiff+0x28>
 80064b4:	6927      	ldr	r7, [r4, #16]
 80064b6:	60c6      	str	r6, [r0, #12]
 80064b8:	692e      	ldr	r6, [r5, #16]
 80064ba:	f104 0014 	add.w	r0, r4, #20
 80064be:	f105 0914 	add.w	r9, r5, #20
 80064c2:	f102 0e14 	add.w	lr, r2, #20
 80064c6:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 80064ca:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80064ce:	3410      	adds	r4, #16
 80064d0:	46f2      	mov	sl, lr
 80064d2:	2100      	movs	r1, #0
 80064d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80064d8:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80064dc:	fa1f f883 	uxth.w	r8, r3
 80064e0:	fa11 f18b 	uxtah	r1, r1, fp
 80064e4:	0c1b      	lsrs	r3, r3, #16
 80064e6:	eba1 0808 	sub.w	r8, r1, r8
 80064ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80064ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80064f2:	fa1f f888 	uxth.w	r8, r8
 80064f6:	1419      	asrs	r1, r3, #16
 80064f8:	454e      	cmp	r6, r9
 80064fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80064fe:	f84a 3b04 	str.w	r3, [sl], #4
 8006502:	d8e7      	bhi.n	80064d4 <__mdiff+0x7c>
 8006504:	1b73      	subs	r3, r6, r5
 8006506:	3b15      	subs	r3, #21
 8006508:	f023 0303 	bic.w	r3, r3, #3
 800650c:	3304      	adds	r3, #4
 800650e:	3515      	adds	r5, #21
 8006510:	42ae      	cmp	r6, r5
 8006512:	bf38      	it	cc
 8006514:	2304      	movcc	r3, #4
 8006516:	4418      	add	r0, r3
 8006518:	4473      	add	r3, lr
 800651a:	469e      	mov	lr, r3
 800651c:	4606      	mov	r6, r0
 800651e:	4566      	cmp	r6, ip
 8006520:	d30e      	bcc.n	8006540 <__mdiff+0xe8>
 8006522:	f10c 0103 	add.w	r1, ip, #3
 8006526:	1a09      	subs	r1, r1, r0
 8006528:	f021 0103 	bic.w	r1, r1, #3
 800652c:	3803      	subs	r0, #3
 800652e:	4584      	cmp	ip, r0
 8006530:	bf38      	it	cc
 8006532:	2100      	movcc	r1, #0
 8006534:	4419      	add	r1, r3
 8006536:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800653a:	b17b      	cbz	r3, 800655c <__mdiff+0x104>
 800653c:	6117      	str	r7, [r2, #16]
 800653e:	e7a5      	b.n	800648c <__mdiff+0x34>
 8006540:	f856 8b04 	ldr.w	r8, [r6], #4
 8006544:	fa11 f488 	uxtah	r4, r1, r8
 8006548:	1425      	asrs	r5, r4, #16
 800654a:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800654e:	b2a4      	uxth	r4, r4
 8006550:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8006554:	f84e 4b04 	str.w	r4, [lr], #4
 8006558:	1429      	asrs	r1, r5, #16
 800655a:	e7e0      	b.n	800651e <__mdiff+0xc6>
 800655c:	3f01      	subs	r7, #1
 800655e:	e7ea      	b.n	8006536 <__mdiff+0xde>
 8006560:	08007aa0 	.word	0x08007aa0
 8006564:	08007b2c 	.word	0x08007b2c

08006568 <__ulp>:
 8006568:	4b11      	ldr	r3, [pc, #68]	; (80065b0 <__ulp+0x48>)
 800656a:	400b      	ands	r3, r1
 800656c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006570:	2b00      	cmp	r3, #0
 8006572:	dd02      	ble.n	800657a <__ulp+0x12>
 8006574:	2000      	movs	r0, #0
 8006576:	4619      	mov	r1, r3
 8006578:	4770      	bx	lr
 800657a:	425b      	negs	r3, r3
 800657c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006580:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006584:	f04f 0000 	mov.w	r0, #0
 8006588:	f04f 0100 	mov.w	r1, #0
 800658c:	da04      	bge.n	8006598 <__ulp+0x30>
 800658e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006592:	fa43 f102 	asr.w	r1, r3, r2
 8006596:	4770      	bx	lr
 8006598:	f1a2 0314 	sub.w	r3, r2, #20
 800659c:	2b1e      	cmp	r3, #30
 800659e:	bfda      	itte	le
 80065a0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80065a4:	fa22 f303 	lsrle.w	r3, r2, r3
 80065a8:	2301      	movgt	r3, #1
 80065aa:	4618      	mov	r0, r3
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	7ff00000 	.word	0x7ff00000

080065b4 <__b2d>:
 80065b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065b8:	6907      	ldr	r7, [r0, #16]
 80065ba:	f100 0914 	add.w	r9, r0, #20
 80065be:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80065c2:	f1a7 0804 	sub.w	r8, r7, #4
 80065c6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80065ca:	4630      	mov	r0, r6
 80065cc:	f7ff fd52 	bl	8006074 <__hi0bits>
 80065d0:	f1c0 0320 	rsb	r3, r0, #32
 80065d4:	280a      	cmp	r0, #10
 80065d6:	600b      	str	r3, [r1, #0]
 80065d8:	491f      	ldr	r1, [pc, #124]	; (8006658 <__b2d+0xa4>)
 80065da:	dc17      	bgt.n	800660c <__b2d+0x58>
 80065dc:	f1c0 0c0b 	rsb	ip, r0, #11
 80065e0:	45c1      	cmp	r9, r8
 80065e2:	fa26 f30c 	lsr.w	r3, r6, ip
 80065e6:	bf38      	it	cc
 80065e8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80065ec:	ea43 0501 	orr.w	r5, r3, r1
 80065f0:	bf28      	it	cs
 80065f2:	2200      	movcs	r2, #0
 80065f4:	f100 0315 	add.w	r3, r0, #21
 80065f8:	fa06 f303 	lsl.w	r3, r6, r3
 80065fc:	fa22 f20c 	lsr.w	r2, r2, ip
 8006600:	ea43 0402 	orr.w	r4, r3, r2
 8006604:	4620      	mov	r0, r4
 8006606:	4629      	mov	r1, r5
 8006608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800660c:	45c1      	cmp	r9, r8
 800660e:	bf3a      	itte	cc
 8006610:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006614:	f1a7 0808 	subcc.w	r8, r7, #8
 8006618:	2200      	movcs	r2, #0
 800661a:	f1b0 030b 	subs.w	r3, r0, #11
 800661e:	d016      	beq.n	800664e <__b2d+0x9a>
 8006620:	f1c3 0720 	rsb	r7, r3, #32
 8006624:	fa22 f107 	lsr.w	r1, r2, r7
 8006628:	45c8      	cmp	r8, r9
 800662a:	fa06 f603 	lsl.w	r6, r6, r3
 800662e:	ea46 0601 	orr.w	r6, r6, r1
 8006632:	bf8c      	ite	hi
 8006634:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006638:	2100      	movls	r1, #0
 800663a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800663e:	fa02 f003 	lsl.w	r0, r2, r3
 8006642:	40f9      	lsrs	r1, r7
 8006644:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006648:	ea40 0401 	orr.w	r4, r0, r1
 800664c:	e7da      	b.n	8006604 <__b2d+0x50>
 800664e:	ea46 0501 	orr.w	r5, r6, r1
 8006652:	4614      	mov	r4, r2
 8006654:	e7d6      	b.n	8006604 <__b2d+0x50>
 8006656:	bf00      	nop
 8006658:	3ff00000 	.word	0x3ff00000

0800665c <__d2b>:
 800665c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006660:	2101      	movs	r1, #1
 8006662:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006666:	4690      	mov	r8, r2
 8006668:	461d      	mov	r5, r3
 800666a:	f7ff fc11 	bl	8005e90 <_Balloc>
 800666e:	4604      	mov	r4, r0
 8006670:	b930      	cbnz	r0, 8006680 <__d2b+0x24>
 8006672:	4602      	mov	r2, r0
 8006674:	4b25      	ldr	r3, [pc, #148]	; (800670c <__d2b+0xb0>)
 8006676:	4826      	ldr	r0, [pc, #152]	; (8006710 <__d2b+0xb4>)
 8006678:	f240 310a 	movw	r1, #778	; 0x30a
 800667c:	f000 fb42 	bl	8006d04 <__assert_func>
 8006680:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006684:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006688:	bb2d      	cbnz	r5, 80066d6 <__d2b+0x7a>
 800668a:	9301      	str	r3, [sp, #4]
 800668c:	f1b8 0300 	subs.w	r3, r8, #0
 8006690:	d026      	beq.n	80066e0 <__d2b+0x84>
 8006692:	4668      	mov	r0, sp
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	f7ff fd0d 	bl	80060b4 <__lo0bits>
 800669a:	9900      	ldr	r1, [sp, #0]
 800669c:	b1f0      	cbz	r0, 80066dc <__d2b+0x80>
 800669e:	9a01      	ldr	r2, [sp, #4]
 80066a0:	f1c0 0320 	rsb	r3, r0, #32
 80066a4:	fa02 f303 	lsl.w	r3, r2, r3
 80066a8:	430b      	orrs	r3, r1
 80066aa:	40c2      	lsrs	r2, r0
 80066ac:	6163      	str	r3, [r4, #20]
 80066ae:	9201      	str	r2, [sp, #4]
 80066b0:	9b01      	ldr	r3, [sp, #4]
 80066b2:	61a3      	str	r3, [r4, #24]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	bf14      	ite	ne
 80066b8:	2102      	movne	r1, #2
 80066ba:	2101      	moveq	r1, #1
 80066bc:	6121      	str	r1, [r4, #16]
 80066be:	b1c5      	cbz	r5, 80066f2 <__d2b+0x96>
 80066c0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80066c4:	4405      	add	r5, r0
 80066c6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80066ca:	603d      	str	r5, [r7, #0]
 80066cc:	6030      	str	r0, [r6, #0]
 80066ce:	4620      	mov	r0, r4
 80066d0:	b002      	add	sp, #8
 80066d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066da:	e7d6      	b.n	800668a <__d2b+0x2e>
 80066dc:	6161      	str	r1, [r4, #20]
 80066de:	e7e7      	b.n	80066b0 <__d2b+0x54>
 80066e0:	a801      	add	r0, sp, #4
 80066e2:	f7ff fce7 	bl	80060b4 <__lo0bits>
 80066e6:	9b01      	ldr	r3, [sp, #4]
 80066e8:	6163      	str	r3, [r4, #20]
 80066ea:	2101      	movs	r1, #1
 80066ec:	6121      	str	r1, [r4, #16]
 80066ee:	3020      	adds	r0, #32
 80066f0:	e7e5      	b.n	80066be <__d2b+0x62>
 80066f2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80066f6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80066fa:	6038      	str	r0, [r7, #0]
 80066fc:	6918      	ldr	r0, [r3, #16]
 80066fe:	f7ff fcb9 	bl	8006074 <__hi0bits>
 8006702:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006706:	6031      	str	r1, [r6, #0]
 8006708:	e7e1      	b.n	80066ce <__d2b+0x72>
 800670a:	bf00      	nop
 800670c:	08007aa0 	.word	0x08007aa0
 8006710:	08007b2c 	.word	0x08007b2c

08006714 <__ratio>:
 8006714:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006718:	4688      	mov	r8, r1
 800671a:	4669      	mov	r1, sp
 800671c:	4681      	mov	r9, r0
 800671e:	f7ff ff49 	bl	80065b4 <__b2d>
 8006722:	460f      	mov	r7, r1
 8006724:	4604      	mov	r4, r0
 8006726:	460d      	mov	r5, r1
 8006728:	4640      	mov	r0, r8
 800672a:	a901      	add	r1, sp, #4
 800672c:	f7ff ff42 	bl	80065b4 <__b2d>
 8006730:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006734:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006738:	eba3 0c02 	sub.w	ip, r3, r2
 800673c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006740:	1a9b      	subs	r3, r3, r2
 8006742:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006746:	2b00      	cmp	r3, #0
 8006748:	bfd5      	itete	le
 800674a:	460a      	movle	r2, r1
 800674c:	462a      	movgt	r2, r5
 800674e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006752:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006756:	468b      	mov	fp, r1
 8006758:	bfd8      	it	le
 800675a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800675e:	465b      	mov	r3, fp
 8006760:	4602      	mov	r2, r0
 8006762:	4639      	mov	r1, r7
 8006764:	4620      	mov	r0, r4
 8006766:	f7fa f879 	bl	800085c <__aeabi_ddiv>
 800676a:	b003      	add	sp, #12
 800676c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006770 <__copybits>:
 8006770:	3901      	subs	r1, #1
 8006772:	b570      	push	{r4, r5, r6, lr}
 8006774:	1149      	asrs	r1, r1, #5
 8006776:	6914      	ldr	r4, [r2, #16]
 8006778:	3101      	adds	r1, #1
 800677a:	f102 0314 	add.w	r3, r2, #20
 800677e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006782:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006786:	1f05      	subs	r5, r0, #4
 8006788:	42a3      	cmp	r3, r4
 800678a:	d30c      	bcc.n	80067a6 <__copybits+0x36>
 800678c:	1aa3      	subs	r3, r4, r2
 800678e:	3b11      	subs	r3, #17
 8006790:	f023 0303 	bic.w	r3, r3, #3
 8006794:	3211      	adds	r2, #17
 8006796:	42a2      	cmp	r2, r4
 8006798:	bf88      	it	hi
 800679a:	2300      	movhi	r3, #0
 800679c:	4418      	add	r0, r3
 800679e:	2300      	movs	r3, #0
 80067a0:	4288      	cmp	r0, r1
 80067a2:	d305      	bcc.n	80067b0 <__copybits+0x40>
 80067a4:	bd70      	pop	{r4, r5, r6, pc}
 80067a6:	f853 6b04 	ldr.w	r6, [r3], #4
 80067aa:	f845 6f04 	str.w	r6, [r5, #4]!
 80067ae:	e7eb      	b.n	8006788 <__copybits+0x18>
 80067b0:	f840 3b04 	str.w	r3, [r0], #4
 80067b4:	e7f4      	b.n	80067a0 <__copybits+0x30>

080067b6 <__any_on>:
 80067b6:	f100 0214 	add.w	r2, r0, #20
 80067ba:	6900      	ldr	r0, [r0, #16]
 80067bc:	114b      	asrs	r3, r1, #5
 80067be:	4298      	cmp	r0, r3
 80067c0:	b510      	push	{r4, lr}
 80067c2:	db11      	blt.n	80067e8 <__any_on+0x32>
 80067c4:	dd0a      	ble.n	80067dc <__any_on+0x26>
 80067c6:	f011 011f 	ands.w	r1, r1, #31
 80067ca:	d007      	beq.n	80067dc <__any_on+0x26>
 80067cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80067d0:	fa24 f001 	lsr.w	r0, r4, r1
 80067d4:	fa00 f101 	lsl.w	r1, r0, r1
 80067d8:	428c      	cmp	r4, r1
 80067da:	d10b      	bne.n	80067f4 <__any_on+0x3e>
 80067dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d803      	bhi.n	80067ec <__any_on+0x36>
 80067e4:	2000      	movs	r0, #0
 80067e6:	bd10      	pop	{r4, pc}
 80067e8:	4603      	mov	r3, r0
 80067ea:	e7f7      	b.n	80067dc <__any_on+0x26>
 80067ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80067f0:	2900      	cmp	r1, #0
 80067f2:	d0f5      	beq.n	80067e0 <__any_on+0x2a>
 80067f4:	2001      	movs	r0, #1
 80067f6:	e7f6      	b.n	80067e6 <__any_on+0x30>

080067f8 <_calloc_r>:
 80067f8:	b570      	push	{r4, r5, r6, lr}
 80067fa:	fba1 5402 	umull	r5, r4, r1, r2
 80067fe:	b934      	cbnz	r4, 800680e <_calloc_r+0x16>
 8006800:	4629      	mov	r1, r5
 8006802:	f000 f877 	bl	80068f4 <_malloc_r>
 8006806:	4606      	mov	r6, r0
 8006808:	b928      	cbnz	r0, 8006816 <_calloc_r+0x1e>
 800680a:	4630      	mov	r0, r6
 800680c:	bd70      	pop	{r4, r5, r6, pc}
 800680e:	220c      	movs	r2, #12
 8006810:	6002      	str	r2, [r0, #0]
 8006812:	2600      	movs	r6, #0
 8006814:	e7f9      	b.n	800680a <_calloc_r+0x12>
 8006816:	462a      	mov	r2, r5
 8006818:	4621      	mov	r1, r4
 800681a:	f7fc fc0f 	bl	800303c <memset>
 800681e:	e7f4      	b.n	800680a <_calloc_r+0x12>

08006820 <_free_r>:
 8006820:	b538      	push	{r3, r4, r5, lr}
 8006822:	4605      	mov	r5, r0
 8006824:	2900      	cmp	r1, #0
 8006826:	d041      	beq.n	80068ac <_free_r+0x8c>
 8006828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800682c:	1f0c      	subs	r4, r1, #4
 800682e:	2b00      	cmp	r3, #0
 8006830:	bfb8      	it	lt
 8006832:	18e4      	addlt	r4, r4, r3
 8006834:	f000 fab0 	bl	8006d98 <__malloc_lock>
 8006838:	4a1d      	ldr	r2, [pc, #116]	; (80068b0 <_free_r+0x90>)
 800683a:	6813      	ldr	r3, [r2, #0]
 800683c:	b933      	cbnz	r3, 800684c <_free_r+0x2c>
 800683e:	6063      	str	r3, [r4, #4]
 8006840:	6014      	str	r4, [r2, #0]
 8006842:	4628      	mov	r0, r5
 8006844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006848:	f000 baac 	b.w	8006da4 <__malloc_unlock>
 800684c:	42a3      	cmp	r3, r4
 800684e:	d908      	bls.n	8006862 <_free_r+0x42>
 8006850:	6820      	ldr	r0, [r4, #0]
 8006852:	1821      	adds	r1, r4, r0
 8006854:	428b      	cmp	r3, r1
 8006856:	bf01      	itttt	eq
 8006858:	6819      	ldreq	r1, [r3, #0]
 800685a:	685b      	ldreq	r3, [r3, #4]
 800685c:	1809      	addeq	r1, r1, r0
 800685e:	6021      	streq	r1, [r4, #0]
 8006860:	e7ed      	b.n	800683e <_free_r+0x1e>
 8006862:	461a      	mov	r2, r3
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	b10b      	cbz	r3, 800686c <_free_r+0x4c>
 8006868:	42a3      	cmp	r3, r4
 800686a:	d9fa      	bls.n	8006862 <_free_r+0x42>
 800686c:	6811      	ldr	r1, [r2, #0]
 800686e:	1850      	adds	r0, r2, r1
 8006870:	42a0      	cmp	r0, r4
 8006872:	d10b      	bne.n	800688c <_free_r+0x6c>
 8006874:	6820      	ldr	r0, [r4, #0]
 8006876:	4401      	add	r1, r0
 8006878:	1850      	adds	r0, r2, r1
 800687a:	4283      	cmp	r3, r0
 800687c:	6011      	str	r1, [r2, #0]
 800687e:	d1e0      	bne.n	8006842 <_free_r+0x22>
 8006880:	6818      	ldr	r0, [r3, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	6053      	str	r3, [r2, #4]
 8006886:	4401      	add	r1, r0
 8006888:	6011      	str	r1, [r2, #0]
 800688a:	e7da      	b.n	8006842 <_free_r+0x22>
 800688c:	d902      	bls.n	8006894 <_free_r+0x74>
 800688e:	230c      	movs	r3, #12
 8006890:	602b      	str	r3, [r5, #0]
 8006892:	e7d6      	b.n	8006842 <_free_r+0x22>
 8006894:	6820      	ldr	r0, [r4, #0]
 8006896:	1821      	adds	r1, r4, r0
 8006898:	428b      	cmp	r3, r1
 800689a:	bf04      	itt	eq
 800689c:	6819      	ldreq	r1, [r3, #0]
 800689e:	685b      	ldreq	r3, [r3, #4]
 80068a0:	6063      	str	r3, [r4, #4]
 80068a2:	bf04      	itt	eq
 80068a4:	1809      	addeq	r1, r1, r0
 80068a6:	6021      	streq	r1, [r4, #0]
 80068a8:	6054      	str	r4, [r2, #4]
 80068aa:	e7ca      	b.n	8006842 <_free_r+0x22>
 80068ac:	bd38      	pop	{r3, r4, r5, pc}
 80068ae:	bf00      	nop
 80068b0:	200002dc 	.word	0x200002dc

080068b4 <sbrk_aligned>:
 80068b4:	b570      	push	{r4, r5, r6, lr}
 80068b6:	4e0e      	ldr	r6, [pc, #56]	; (80068f0 <sbrk_aligned+0x3c>)
 80068b8:	460c      	mov	r4, r1
 80068ba:	6831      	ldr	r1, [r6, #0]
 80068bc:	4605      	mov	r5, r0
 80068be:	b911      	cbnz	r1, 80068c6 <sbrk_aligned+0x12>
 80068c0:	f000 f9ee 	bl	8006ca0 <_sbrk_r>
 80068c4:	6030      	str	r0, [r6, #0]
 80068c6:	4621      	mov	r1, r4
 80068c8:	4628      	mov	r0, r5
 80068ca:	f000 f9e9 	bl	8006ca0 <_sbrk_r>
 80068ce:	1c43      	adds	r3, r0, #1
 80068d0:	d00a      	beq.n	80068e8 <sbrk_aligned+0x34>
 80068d2:	1cc4      	adds	r4, r0, #3
 80068d4:	f024 0403 	bic.w	r4, r4, #3
 80068d8:	42a0      	cmp	r0, r4
 80068da:	d007      	beq.n	80068ec <sbrk_aligned+0x38>
 80068dc:	1a21      	subs	r1, r4, r0
 80068de:	4628      	mov	r0, r5
 80068e0:	f000 f9de 	bl	8006ca0 <_sbrk_r>
 80068e4:	3001      	adds	r0, #1
 80068e6:	d101      	bne.n	80068ec <sbrk_aligned+0x38>
 80068e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80068ec:	4620      	mov	r0, r4
 80068ee:	bd70      	pop	{r4, r5, r6, pc}
 80068f0:	200002e0 	.word	0x200002e0

080068f4 <_malloc_r>:
 80068f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068f8:	1ccd      	adds	r5, r1, #3
 80068fa:	f025 0503 	bic.w	r5, r5, #3
 80068fe:	3508      	adds	r5, #8
 8006900:	2d0c      	cmp	r5, #12
 8006902:	bf38      	it	cc
 8006904:	250c      	movcc	r5, #12
 8006906:	2d00      	cmp	r5, #0
 8006908:	4607      	mov	r7, r0
 800690a:	db01      	blt.n	8006910 <_malloc_r+0x1c>
 800690c:	42a9      	cmp	r1, r5
 800690e:	d905      	bls.n	800691c <_malloc_r+0x28>
 8006910:	230c      	movs	r3, #12
 8006912:	603b      	str	r3, [r7, #0]
 8006914:	2600      	movs	r6, #0
 8006916:	4630      	mov	r0, r6
 8006918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800691c:	4e2e      	ldr	r6, [pc, #184]	; (80069d8 <_malloc_r+0xe4>)
 800691e:	f000 fa3b 	bl	8006d98 <__malloc_lock>
 8006922:	6833      	ldr	r3, [r6, #0]
 8006924:	461c      	mov	r4, r3
 8006926:	bb34      	cbnz	r4, 8006976 <_malloc_r+0x82>
 8006928:	4629      	mov	r1, r5
 800692a:	4638      	mov	r0, r7
 800692c:	f7ff ffc2 	bl	80068b4 <sbrk_aligned>
 8006930:	1c43      	adds	r3, r0, #1
 8006932:	4604      	mov	r4, r0
 8006934:	d14d      	bne.n	80069d2 <_malloc_r+0xde>
 8006936:	6834      	ldr	r4, [r6, #0]
 8006938:	4626      	mov	r6, r4
 800693a:	2e00      	cmp	r6, #0
 800693c:	d140      	bne.n	80069c0 <_malloc_r+0xcc>
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	4631      	mov	r1, r6
 8006942:	4638      	mov	r0, r7
 8006944:	eb04 0803 	add.w	r8, r4, r3
 8006948:	f000 f9aa 	bl	8006ca0 <_sbrk_r>
 800694c:	4580      	cmp	r8, r0
 800694e:	d13a      	bne.n	80069c6 <_malloc_r+0xd2>
 8006950:	6821      	ldr	r1, [r4, #0]
 8006952:	3503      	adds	r5, #3
 8006954:	1a6d      	subs	r5, r5, r1
 8006956:	f025 0503 	bic.w	r5, r5, #3
 800695a:	3508      	adds	r5, #8
 800695c:	2d0c      	cmp	r5, #12
 800695e:	bf38      	it	cc
 8006960:	250c      	movcc	r5, #12
 8006962:	4629      	mov	r1, r5
 8006964:	4638      	mov	r0, r7
 8006966:	f7ff ffa5 	bl	80068b4 <sbrk_aligned>
 800696a:	3001      	adds	r0, #1
 800696c:	d02b      	beq.n	80069c6 <_malloc_r+0xd2>
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	442b      	add	r3, r5
 8006972:	6023      	str	r3, [r4, #0]
 8006974:	e00e      	b.n	8006994 <_malloc_r+0xa0>
 8006976:	6822      	ldr	r2, [r4, #0]
 8006978:	1b52      	subs	r2, r2, r5
 800697a:	d41e      	bmi.n	80069ba <_malloc_r+0xc6>
 800697c:	2a0b      	cmp	r2, #11
 800697e:	d916      	bls.n	80069ae <_malloc_r+0xba>
 8006980:	1961      	adds	r1, r4, r5
 8006982:	42a3      	cmp	r3, r4
 8006984:	6025      	str	r5, [r4, #0]
 8006986:	bf18      	it	ne
 8006988:	6059      	strne	r1, [r3, #4]
 800698a:	6863      	ldr	r3, [r4, #4]
 800698c:	bf08      	it	eq
 800698e:	6031      	streq	r1, [r6, #0]
 8006990:	5162      	str	r2, [r4, r5]
 8006992:	604b      	str	r3, [r1, #4]
 8006994:	4638      	mov	r0, r7
 8006996:	f104 060b 	add.w	r6, r4, #11
 800699a:	f000 fa03 	bl	8006da4 <__malloc_unlock>
 800699e:	f026 0607 	bic.w	r6, r6, #7
 80069a2:	1d23      	adds	r3, r4, #4
 80069a4:	1af2      	subs	r2, r6, r3
 80069a6:	d0b6      	beq.n	8006916 <_malloc_r+0x22>
 80069a8:	1b9b      	subs	r3, r3, r6
 80069aa:	50a3      	str	r3, [r4, r2]
 80069ac:	e7b3      	b.n	8006916 <_malloc_r+0x22>
 80069ae:	6862      	ldr	r2, [r4, #4]
 80069b0:	42a3      	cmp	r3, r4
 80069b2:	bf0c      	ite	eq
 80069b4:	6032      	streq	r2, [r6, #0]
 80069b6:	605a      	strne	r2, [r3, #4]
 80069b8:	e7ec      	b.n	8006994 <_malloc_r+0xa0>
 80069ba:	4623      	mov	r3, r4
 80069bc:	6864      	ldr	r4, [r4, #4]
 80069be:	e7b2      	b.n	8006926 <_malloc_r+0x32>
 80069c0:	4634      	mov	r4, r6
 80069c2:	6876      	ldr	r6, [r6, #4]
 80069c4:	e7b9      	b.n	800693a <_malloc_r+0x46>
 80069c6:	230c      	movs	r3, #12
 80069c8:	603b      	str	r3, [r7, #0]
 80069ca:	4638      	mov	r0, r7
 80069cc:	f000 f9ea 	bl	8006da4 <__malloc_unlock>
 80069d0:	e7a1      	b.n	8006916 <_malloc_r+0x22>
 80069d2:	6025      	str	r5, [r4, #0]
 80069d4:	e7de      	b.n	8006994 <_malloc_r+0xa0>
 80069d6:	bf00      	nop
 80069d8:	200002dc 	.word	0x200002dc

080069dc <__ssputs_r>:
 80069dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e0:	688e      	ldr	r6, [r1, #8]
 80069e2:	429e      	cmp	r6, r3
 80069e4:	4682      	mov	sl, r0
 80069e6:	460c      	mov	r4, r1
 80069e8:	4690      	mov	r8, r2
 80069ea:	461f      	mov	r7, r3
 80069ec:	d838      	bhi.n	8006a60 <__ssputs_r+0x84>
 80069ee:	898a      	ldrh	r2, [r1, #12]
 80069f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80069f4:	d032      	beq.n	8006a5c <__ssputs_r+0x80>
 80069f6:	6825      	ldr	r5, [r4, #0]
 80069f8:	6909      	ldr	r1, [r1, #16]
 80069fa:	eba5 0901 	sub.w	r9, r5, r1
 80069fe:	6965      	ldr	r5, [r4, #20]
 8006a00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a08:	3301      	adds	r3, #1
 8006a0a:	444b      	add	r3, r9
 8006a0c:	106d      	asrs	r5, r5, #1
 8006a0e:	429d      	cmp	r5, r3
 8006a10:	bf38      	it	cc
 8006a12:	461d      	movcc	r5, r3
 8006a14:	0553      	lsls	r3, r2, #21
 8006a16:	d531      	bpl.n	8006a7c <__ssputs_r+0xa0>
 8006a18:	4629      	mov	r1, r5
 8006a1a:	f7ff ff6b 	bl	80068f4 <_malloc_r>
 8006a1e:	4606      	mov	r6, r0
 8006a20:	b950      	cbnz	r0, 8006a38 <__ssputs_r+0x5c>
 8006a22:	230c      	movs	r3, #12
 8006a24:	f8ca 3000 	str.w	r3, [sl]
 8006a28:	89a3      	ldrh	r3, [r4, #12]
 8006a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a2e:	81a3      	strh	r3, [r4, #12]
 8006a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a38:	6921      	ldr	r1, [r4, #16]
 8006a3a:	464a      	mov	r2, r9
 8006a3c:	f7ff fa1a 	bl	8005e74 <memcpy>
 8006a40:	89a3      	ldrh	r3, [r4, #12]
 8006a42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a4a:	81a3      	strh	r3, [r4, #12]
 8006a4c:	6126      	str	r6, [r4, #16]
 8006a4e:	6165      	str	r5, [r4, #20]
 8006a50:	444e      	add	r6, r9
 8006a52:	eba5 0509 	sub.w	r5, r5, r9
 8006a56:	6026      	str	r6, [r4, #0]
 8006a58:	60a5      	str	r5, [r4, #8]
 8006a5a:	463e      	mov	r6, r7
 8006a5c:	42be      	cmp	r6, r7
 8006a5e:	d900      	bls.n	8006a62 <__ssputs_r+0x86>
 8006a60:	463e      	mov	r6, r7
 8006a62:	6820      	ldr	r0, [r4, #0]
 8006a64:	4632      	mov	r2, r6
 8006a66:	4641      	mov	r1, r8
 8006a68:	f000 f97c 	bl	8006d64 <memmove>
 8006a6c:	68a3      	ldr	r3, [r4, #8]
 8006a6e:	1b9b      	subs	r3, r3, r6
 8006a70:	60a3      	str	r3, [r4, #8]
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	4433      	add	r3, r6
 8006a76:	6023      	str	r3, [r4, #0]
 8006a78:	2000      	movs	r0, #0
 8006a7a:	e7db      	b.n	8006a34 <__ssputs_r+0x58>
 8006a7c:	462a      	mov	r2, r5
 8006a7e:	f000 f997 	bl	8006db0 <_realloc_r>
 8006a82:	4606      	mov	r6, r0
 8006a84:	2800      	cmp	r0, #0
 8006a86:	d1e1      	bne.n	8006a4c <__ssputs_r+0x70>
 8006a88:	6921      	ldr	r1, [r4, #16]
 8006a8a:	4650      	mov	r0, sl
 8006a8c:	f7ff fec8 	bl	8006820 <_free_r>
 8006a90:	e7c7      	b.n	8006a22 <__ssputs_r+0x46>
	...

08006a94 <_svfiprintf_r>:
 8006a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a98:	4698      	mov	r8, r3
 8006a9a:	898b      	ldrh	r3, [r1, #12]
 8006a9c:	061b      	lsls	r3, r3, #24
 8006a9e:	b09d      	sub	sp, #116	; 0x74
 8006aa0:	4607      	mov	r7, r0
 8006aa2:	460d      	mov	r5, r1
 8006aa4:	4614      	mov	r4, r2
 8006aa6:	d50e      	bpl.n	8006ac6 <_svfiprintf_r+0x32>
 8006aa8:	690b      	ldr	r3, [r1, #16]
 8006aaa:	b963      	cbnz	r3, 8006ac6 <_svfiprintf_r+0x32>
 8006aac:	2140      	movs	r1, #64	; 0x40
 8006aae:	f7ff ff21 	bl	80068f4 <_malloc_r>
 8006ab2:	6028      	str	r0, [r5, #0]
 8006ab4:	6128      	str	r0, [r5, #16]
 8006ab6:	b920      	cbnz	r0, 8006ac2 <_svfiprintf_r+0x2e>
 8006ab8:	230c      	movs	r3, #12
 8006aba:	603b      	str	r3, [r7, #0]
 8006abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ac0:	e0d1      	b.n	8006c66 <_svfiprintf_r+0x1d2>
 8006ac2:	2340      	movs	r3, #64	; 0x40
 8006ac4:	616b      	str	r3, [r5, #20]
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8006aca:	2320      	movs	r3, #32
 8006acc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ad0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ad4:	2330      	movs	r3, #48	; 0x30
 8006ad6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006c80 <_svfiprintf_r+0x1ec>
 8006ada:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ade:	f04f 0901 	mov.w	r9, #1
 8006ae2:	4623      	mov	r3, r4
 8006ae4:	469a      	mov	sl, r3
 8006ae6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006aea:	b10a      	cbz	r2, 8006af0 <_svfiprintf_r+0x5c>
 8006aec:	2a25      	cmp	r2, #37	; 0x25
 8006aee:	d1f9      	bne.n	8006ae4 <_svfiprintf_r+0x50>
 8006af0:	ebba 0b04 	subs.w	fp, sl, r4
 8006af4:	d00b      	beq.n	8006b0e <_svfiprintf_r+0x7a>
 8006af6:	465b      	mov	r3, fp
 8006af8:	4622      	mov	r2, r4
 8006afa:	4629      	mov	r1, r5
 8006afc:	4638      	mov	r0, r7
 8006afe:	f7ff ff6d 	bl	80069dc <__ssputs_r>
 8006b02:	3001      	adds	r0, #1
 8006b04:	f000 80aa 	beq.w	8006c5c <_svfiprintf_r+0x1c8>
 8006b08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b0a:	445a      	add	r2, fp
 8006b0c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b0e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 80a2 	beq.w	8006c5c <_svfiprintf_r+0x1c8>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b22:	f10a 0a01 	add.w	sl, sl, #1
 8006b26:	9304      	str	r3, [sp, #16]
 8006b28:	9307      	str	r3, [sp, #28]
 8006b2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b2e:	931a      	str	r3, [sp, #104]	; 0x68
 8006b30:	4654      	mov	r4, sl
 8006b32:	2205      	movs	r2, #5
 8006b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b38:	4851      	ldr	r0, [pc, #324]	; (8006c80 <_svfiprintf_r+0x1ec>)
 8006b3a:	f7f9 fb59 	bl	80001f0 <memchr>
 8006b3e:	9a04      	ldr	r2, [sp, #16]
 8006b40:	b9d8      	cbnz	r0, 8006b7a <_svfiprintf_r+0xe6>
 8006b42:	06d0      	lsls	r0, r2, #27
 8006b44:	bf44      	itt	mi
 8006b46:	2320      	movmi	r3, #32
 8006b48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b4c:	0711      	lsls	r1, r2, #28
 8006b4e:	bf44      	itt	mi
 8006b50:	232b      	movmi	r3, #43	; 0x2b
 8006b52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b56:	f89a 3000 	ldrb.w	r3, [sl]
 8006b5a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b5c:	d015      	beq.n	8006b8a <_svfiprintf_r+0xf6>
 8006b5e:	9a07      	ldr	r2, [sp, #28]
 8006b60:	4654      	mov	r4, sl
 8006b62:	2000      	movs	r0, #0
 8006b64:	f04f 0c0a 	mov.w	ip, #10
 8006b68:	4621      	mov	r1, r4
 8006b6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b6e:	3b30      	subs	r3, #48	; 0x30
 8006b70:	2b09      	cmp	r3, #9
 8006b72:	d94e      	bls.n	8006c12 <_svfiprintf_r+0x17e>
 8006b74:	b1b0      	cbz	r0, 8006ba4 <_svfiprintf_r+0x110>
 8006b76:	9207      	str	r2, [sp, #28]
 8006b78:	e014      	b.n	8006ba4 <_svfiprintf_r+0x110>
 8006b7a:	eba0 0308 	sub.w	r3, r0, r8
 8006b7e:	fa09 f303 	lsl.w	r3, r9, r3
 8006b82:	4313      	orrs	r3, r2
 8006b84:	9304      	str	r3, [sp, #16]
 8006b86:	46a2      	mov	sl, r4
 8006b88:	e7d2      	b.n	8006b30 <_svfiprintf_r+0x9c>
 8006b8a:	9b03      	ldr	r3, [sp, #12]
 8006b8c:	1d19      	adds	r1, r3, #4
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	9103      	str	r1, [sp, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	bfbb      	ittet	lt
 8006b96:	425b      	neglt	r3, r3
 8006b98:	f042 0202 	orrlt.w	r2, r2, #2
 8006b9c:	9307      	strge	r3, [sp, #28]
 8006b9e:	9307      	strlt	r3, [sp, #28]
 8006ba0:	bfb8      	it	lt
 8006ba2:	9204      	strlt	r2, [sp, #16]
 8006ba4:	7823      	ldrb	r3, [r4, #0]
 8006ba6:	2b2e      	cmp	r3, #46	; 0x2e
 8006ba8:	d10c      	bne.n	8006bc4 <_svfiprintf_r+0x130>
 8006baa:	7863      	ldrb	r3, [r4, #1]
 8006bac:	2b2a      	cmp	r3, #42	; 0x2a
 8006bae:	d135      	bne.n	8006c1c <_svfiprintf_r+0x188>
 8006bb0:	9b03      	ldr	r3, [sp, #12]
 8006bb2:	1d1a      	adds	r2, r3, #4
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	9203      	str	r2, [sp, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	bfb8      	it	lt
 8006bbc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006bc0:	3402      	adds	r4, #2
 8006bc2:	9305      	str	r3, [sp, #20]
 8006bc4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006c84 <_svfiprintf_r+0x1f0>
 8006bc8:	7821      	ldrb	r1, [r4, #0]
 8006bca:	2203      	movs	r2, #3
 8006bcc:	4650      	mov	r0, sl
 8006bce:	f7f9 fb0f 	bl	80001f0 <memchr>
 8006bd2:	b140      	cbz	r0, 8006be6 <_svfiprintf_r+0x152>
 8006bd4:	2340      	movs	r3, #64	; 0x40
 8006bd6:	eba0 000a 	sub.w	r0, r0, sl
 8006bda:	fa03 f000 	lsl.w	r0, r3, r0
 8006bde:	9b04      	ldr	r3, [sp, #16]
 8006be0:	4303      	orrs	r3, r0
 8006be2:	3401      	adds	r4, #1
 8006be4:	9304      	str	r3, [sp, #16]
 8006be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bea:	4827      	ldr	r0, [pc, #156]	; (8006c88 <_svfiprintf_r+0x1f4>)
 8006bec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bf0:	2206      	movs	r2, #6
 8006bf2:	f7f9 fafd 	bl	80001f0 <memchr>
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	d038      	beq.n	8006c6c <_svfiprintf_r+0x1d8>
 8006bfa:	4b24      	ldr	r3, [pc, #144]	; (8006c8c <_svfiprintf_r+0x1f8>)
 8006bfc:	bb1b      	cbnz	r3, 8006c46 <_svfiprintf_r+0x1b2>
 8006bfe:	9b03      	ldr	r3, [sp, #12]
 8006c00:	3307      	adds	r3, #7
 8006c02:	f023 0307 	bic.w	r3, r3, #7
 8006c06:	3308      	adds	r3, #8
 8006c08:	9303      	str	r3, [sp, #12]
 8006c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c0c:	4433      	add	r3, r6
 8006c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c10:	e767      	b.n	8006ae2 <_svfiprintf_r+0x4e>
 8006c12:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c16:	460c      	mov	r4, r1
 8006c18:	2001      	movs	r0, #1
 8006c1a:	e7a5      	b.n	8006b68 <_svfiprintf_r+0xd4>
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	3401      	adds	r4, #1
 8006c20:	9305      	str	r3, [sp, #20]
 8006c22:	4619      	mov	r1, r3
 8006c24:	f04f 0c0a 	mov.w	ip, #10
 8006c28:	4620      	mov	r0, r4
 8006c2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c2e:	3a30      	subs	r2, #48	; 0x30
 8006c30:	2a09      	cmp	r2, #9
 8006c32:	d903      	bls.n	8006c3c <_svfiprintf_r+0x1a8>
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0c5      	beq.n	8006bc4 <_svfiprintf_r+0x130>
 8006c38:	9105      	str	r1, [sp, #20]
 8006c3a:	e7c3      	b.n	8006bc4 <_svfiprintf_r+0x130>
 8006c3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c40:	4604      	mov	r4, r0
 8006c42:	2301      	movs	r3, #1
 8006c44:	e7f0      	b.n	8006c28 <_svfiprintf_r+0x194>
 8006c46:	ab03      	add	r3, sp, #12
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	462a      	mov	r2, r5
 8006c4c:	4b10      	ldr	r3, [pc, #64]	; (8006c90 <_svfiprintf_r+0x1fc>)
 8006c4e:	a904      	add	r1, sp, #16
 8006c50:	4638      	mov	r0, r7
 8006c52:	f7fc fa99 	bl	8003188 <_printf_float>
 8006c56:	1c42      	adds	r2, r0, #1
 8006c58:	4606      	mov	r6, r0
 8006c5a:	d1d6      	bne.n	8006c0a <_svfiprintf_r+0x176>
 8006c5c:	89ab      	ldrh	r3, [r5, #12]
 8006c5e:	065b      	lsls	r3, r3, #25
 8006c60:	f53f af2c 	bmi.w	8006abc <_svfiprintf_r+0x28>
 8006c64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c66:	b01d      	add	sp, #116	; 0x74
 8006c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c6c:	ab03      	add	r3, sp, #12
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	462a      	mov	r2, r5
 8006c72:	4b07      	ldr	r3, [pc, #28]	; (8006c90 <_svfiprintf_r+0x1fc>)
 8006c74:	a904      	add	r1, sp, #16
 8006c76:	4638      	mov	r0, r7
 8006c78:	f7fc fd1e 	bl	80036b8 <_printf_i>
 8006c7c:	e7eb      	b.n	8006c56 <_svfiprintf_r+0x1c2>
 8006c7e:	bf00      	nop
 8006c80:	08007c84 	.word	0x08007c84
 8006c84:	08007c8a 	.word	0x08007c8a
 8006c88:	08007c8e 	.word	0x08007c8e
 8006c8c:	08003189 	.word	0x08003189
 8006c90:	080069dd 	.word	0x080069dd

08006c94 <nan>:
 8006c94:	4901      	ldr	r1, [pc, #4]	; (8006c9c <nan+0x8>)
 8006c96:	2000      	movs	r0, #0
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	7ff80000 	.word	0x7ff80000

08006ca0 <_sbrk_r>:
 8006ca0:	b538      	push	{r3, r4, r5, lr}
 8006ca2:	4d06      	ldr	r5, [pc, #24]	; (8006cbc <_sbrk_r+0x1c>)
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	4608      	mov	r0, r1
 8006caa:	602b      	str	r3, [r5, #0]
 8006cac:	f7fc f93c 	bl	8002f28 <_sbrk>
 8006cb0:	1c43      	adds	r3, r0, #1
 8006cb2:	d102      	bne.n	8006cba <_sbrk_r+0x1a>
 8006cb4:	682b      	ldr	r3, [r5, #0]
 8006cb6:	b103      	cbz	r3, 8006cba <_sbrk_r+0x1a>
 8006cb8:	6023      	str	r3, [r4, #0]
 8006cba:	bd38      	pop	{r3, r4, r5, pc}
 8006cbc:	200002e4 	.word	0x200002e4

08006cc0 <strncmp>:
 8006cc0:	b510      	push	{r4, lr}
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	b172      	cbz	r2, 8006ce4 <strncmp+0x24>
 8006cc6:	3901      	subs	r1, #1
 8006cc8:	1884      	adds	r4, r0, r2
 8006cca:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006cce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006cd2:	4290      	cmp	r0, r2
 8006cd4:	d101      	bne.n	8006cda <strncmp+0x1a>
 8006cd6:	42a3      	cmp	r3, r4
 8006cd8:	d101      	bne.n	8006cde <strncmp+0x1e>
 8006cda:	1a80      	subs	r0, r0, r2
 8006cdc:	bd10      	pop	{r4, pc}
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	d1f3      	bne.n	8006cca <strncmp+0xa>
 8006ce2:	e7fa      	b.n	8006cda <strncmp+0x1a>
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	e7f9      	b.n	8006cdc <strncmp+0x1c>

08006ce8 <__ascii_wctomb>:
 8006ce8:	4603      	mov	r3, r0
 8006cea:	4608      	mov	r0, r1
 8006cec:	b141      	cbz	r1, 8006d00 <__ascii_wctomb+0x18>
 8006cee:	2aff      	cmp	r2, #255	; 0xff
 8006cf0:	d904      	bls.n	8006cfc <__ascii_wctomb+0x14>
 8006cf2:	228a      	movs	r2, #138	; 0x8a
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cfa:	4770      	bx	lr
 8006cfc:	700a      	strb	r2, [r1, #0]
 8006cfe:	2001      	movs	r0, #1
 8006d00:	4770      	bx	lr
	...

08006d04 <__assert_func>:
 8006d04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d06:	4614      	mov	r4, r2
 8006d08:	461a      	mov	r2, r3
 8006d0a:	4b09      	ldr	r3, [pc, #36]	; (8006d30 <__assert_func+0x2c>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4605      	mov	r5, r0
 8006d10:	68d8      	ldr	r0, [r3, #12]
 8006d12:	b14c      	cbz	r4, 8006d28 <__assert_func+0x24>
 8006d14:	4b07      	ldr	r3, [pc, #28]	; (8006d34 <__assert_func+0x30>)
 8006d16:	9100      	str	r1, [sp, #0]
 8006d18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d1c:	4906      	ldr	r1, [pc, #24]	; (8006d38 <__assert_func+0x34>)
 8006d1e:	462b      	mov	r3, r5
 8006d20:	f000 f80e 	bl	8006d40 <fiprintf>
 8006d24:	f000 fa8a 	bl	800723c <abort>
 8006d28:	4b04      	ldr	r3, [pc, #16]	; (8006d3c <__assert_func+0x38>)
 8006d2a:	461c      	mov	r4, r3
 8006d2c:	e7f3      	b.n	8006d16 <__assert_func+0x12>
 8006d2e:	bf00      	nop
 8006d30:	20000000 	.word	0x20000000
 8006d34:	08007c95 	.word	0x08007c95
 8006d38:	08007ca2 	.word	0x08007ca2
 8006d3c:	08007cd0 	.word	0x08007cd0

08006d40 <fiprintf>:
 8006d40:	b40e      	push	{r1, r2, r3}
 8006d42:	b503      	push	{r0, r1, lr}
 8006d44:	4601      	mov	r1, r0
 8006d46:	ab03      	add	r3, sp, #12
 8006d48:	4805      	ldr	r0, [pc, #20]	; (8006d60 <fiprintf+0x20>)
 8006d4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d4e:	6800      	ldr	r0, [r0, #0]
 8006d50:	9301      	str	r3, [sp, #4]
 8006d52:	f000 f883 	bl	8006e5c <_vfiprintf_r>
 8006d56:	b002      	add	sp, #8
 8006d58:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d5c:	b003      	add	sp, #12
 8006d5e:	4770      	bx	lr
 8006d60:	20000000 	.word	0x20000000

08006d64 <memmove>:
 8006d64:	4288      	cmp	r0, r1
 8006d66:	b510      	push	{r4, lr}
 8006d68:	eb01 0402 	add.w	r4, r1, r2
 8006d6c:	d902      	bls.n	8006d74 <memmove+0x10>
 8006d6e:	4284      	cmp	r4, r0
 8006d70:	4623      	mov	r3, r4
 8006d72:	d807      	bhi.n	8006d84 <memmove+0x20>
 8006d74:	1e43      	subs	r3, r0, #1
 8006d76:	42a1      	cmp	r1, r4
 8006d78:	d008      	beq.n	8006d8c <memmove+0x28>
 8006d7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d82:	e7f8      	b.n	8006d76 <memmove+0x12>
 8006d84:	4402      	add	r2, r0
 8006d86:	4601      	mov	r1, r0
 8006d88:	428a      	cmp	r2, r1
 8006d8a:	d100      	bne.n	8006d8e <memmove+0x2a>
 8006d8c:	bd10      	pop	{r4, pc}
 8006d8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d96:	e7f7      	b.n	8006d88 <memmove+0x24>

08006d98 <__malloc_lock>:
 8006d98:	4801      	ldr	r0, [pc, #4]	; (8006da0 <__malloc_lock+0x8>)
 8006d9a:	f000 bc0b 	b.w	80075b4 <__retarget_lock_acquire_recursive>
 8006d9e:	bf00      	nop
 8006da0:	200002e8 	.word	0x200002e8

08006da4 <__malloc_unlock>:
 8006da4:	4801      	ldr	r0, [pc, #4]	; (8006dac <__malloc_unlock+0x8>)
 8006da6:	f000 bc06 	b.w	80075b6 <__retarget_lock_release_recursive>
 8006daa:	bf00      	nop
 8006dac:	200002e8 	.word	0x200002e8

08006db0 <_realloc_r>:
 8006db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006db4:	4680      	mov	r8, r0
 8006db6:	4614      	mov	r4, r2
 8006db8:	460e      	mov	r6, r1
 8006dba:	b921      	cbnz	r1, 8006dc6 <_realloc_r+0x16>
 8006dbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	f7ff bd97 	b.w	80068f4 <_malloc_r>
 8006dc6:	b92a      	cbnz	r2, 8006dd4 <_realloc_r+0x24>
 8006dc8:	f7ff fd2a 	bl	8006820 <_free_r>
 8006dcc:	4625      	mov	r5, r4
 8006dce:	4628      	mov	r0, r5
 8006dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dd4:	f000 fc56 	bl	8007684 <_malloc_usable_size_r>
 8006dd8:	4284      	cmp	r4, r0
 8006dda:	4607      	mov	r7, r0
 8006ddc:	d802      	bhi.n	8006de4 <_realloc_r+0x34>
 8006dde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006de2:	d812      	bhi.n	8006e0a <_realloc_r+0x5a>
 8006de4:	4621      	mov	r1, r4
 8006de6:	4640      	mov	r0, r8
 8006de8:	f7ff fd84 	bl	80068f4 <_malloc_r>
 8006dec:	4605      	mov	r5, r0
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d0ed      	beq.n	8006dce <_realloc_r+0x1e>
 8006df2:	42bc      	cmp	r4, r7
 8006df4:	4622      	mov	r2, r4
 8006df6:	4631      	mov	r1, r6
 8006df8:	bf28      	it	cs
 8006dfa:	463a      	movcs	r2, r7
 8006dfc:	f7ff f83a 	bl	8005e74 <memcpy>
 8006e00:	4631      	mov	r1, r6
 8006e02:	4640      	mov	r0, r8
 8006e04:	f7ff fd0c 	bl	8006820 <_free_r>
 8006e08:	e7e1      	b.n	8006dce <_realloc_r+0x1e>
 8006e0a:	4635      	mov	r5, r6
 8006e0c:	e7df      	b.n	8006dce <_realloc_r+0x1e>

08006e0e <__sfputc_r>:
 8006e0e:	6893      	ldr	r3, [r2, #8]
 8006e10:	3b01      	subs	r3, #1
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	b410      	push	{r4}
 8006e16:	6093      	str	r3, [r2, #8]
 8006e18:	da07      	bge.n	8006e2a <__sfputc_r+0x1c>
 8006e1a:	6994      	ldr	r4, [r2, #24]
 8006e1c:	42a3      	cmp	r3, r4
 8006e1e:	db01      	blt.n	8006e24 <__sfputc_r+0x16>
 8006e20:	290a      	cmp	r1, #10
 8006e22:	d102      	bne.n	8006e2a <__sfputc_r+0x1c>
 8006e24:	bc10      	pop	{r4}
 8006e26:	f000 b949 	b.w	80070bc <__swbuf_r>
 8006e2a:	6813      	ldr	r3, [r2, #0]
 8006e2c:	1c58      	adds	r0, r3, #1
 8006e2e:	6010      	str	r0, [r2, #0]
 8006e30:	7019      	strb	r1, [r3, #0]
 8006e32:	4608      	mov	r0, r1
 8006e34:	bc10      	pop	{r4}
 8006e36:	4770      	bx	lr

08006e38 <__sfputs_r>:
 8006e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e3a:	4606      	mov	r6, r0
 8006e3c:	460f      	mov	r7, r1
 8006e3e:	4614      	mov	r4, r2
 8006e40:	18d5      	adds	r5, r2, r3
 8006e42:	42ac      	cmp	r4, r5
 8006e44:	d101      	bne.n	8006e4a <__sfputs_r+0x12>
 8006e46:	2000      	movs	r0, #0
 8006e48:	e007      	b.n	8006e5a <__sfputs_r+0x22>
 8006e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e4e:	463a      	mov	r2, r7
 8006e50:	4630      	mov	r0, r6
 8006e52:	f7ff ffdc 	bl	8006e0e <__sfputc_r>
 8006e56:	1c43      	adds	r3, r0, #1
 8006e58:	d1f3      	bne.n	8006e42 <__sfputs_r+0xa>
 8006e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006e5c <_vfiprintf_r>:
 8006e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e60:	460d      	mov	r5, r1
 8006e62:	b09d      	sub	sp, #116	; 0x74
 8006e64:	4614      	mov	r4, r2
 8006e66:	4698      	mov	r8, r3
 8006e68:	4606      	mov	r6, r0
 8006e6a:	b118      	cbz	r0, 8006e74 <_vfiprintf_r+0x18>
 8006e6c:	6983      	ldr	r3, [r0, #24]
 8006e6e:	b90b      	cbnz	r3, 8006e74 <_vfiprintf_r+0x18>
 8006e70:	f000 fb02 	bl	8007478 <__sinit>
 8006e74:	4b89      	ldr	r3, [pc, #548]	; (800709c <_vfiprintf_r+0x240>)
 8006e76:	429d      	cmp	r5, r3
 8006e78:	d11b      	bne.n	8006eb2 <_vfiprintf_r+0x56>
 8006e7a:	6875      	ldr	r5, [r6, #4]
 8006e7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e7e:	07d9      	lsls	r1, r3, #31
 8006e80:	d405      	bmi.n	8006e8e <_vfiprintf_r+0x32>
 8006e82:	89ab      	ldrh	r3, [r5, #12]
 8006e84:	059a      	lsls	r2, r3, #22
 8006e86:	d402      	bmi.n	8006e8e <_vfiprintf_r+0x32>
 8006e88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e8a:	f000 fb93 	bl	80075b4 <__retarget_lock_acquire_recursive>
 8006e8e:	89ab      	ldrh	r3, [r5, #12]
 8006e90:	071b      	lsls	r3, r3, #28
 8006e92:	d501      	bpl.n	8006e98 <_vfiprintf_r+0x3c>
 8006e94:	692b      	ldr	r3, [r5, #16]
 8006e96:	b9eb      	cbnz	r3, 8006ed4 <_vfiprintf_r+0x78>
 8006e98:	4629      	mov	r1, r5
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	f000 f960 	bl	8007160 <__swsetup_r>
 8006ea0:	b1c0      	cbz	r0, 8006ed4 <_vfiprintf_r+0x78>
 8006ea2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ea4:	07dc      	lsls	r4, r3, #31
 8006ea6:	d50e      	bpl.n	8006ec6 <_vfiprintf_r+0x6a>
 8006ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006eac:	b01d      	add	sp, #116	; 0x74
 8006eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb2:	4b7b      	ldr	r3, [pc, #492]	; (80070a0 <_vfiprintf_r+0x244>)
 8006eb4:	429d      	cmp	r5, r3
 8006eb6:	d101      	bne.n	8006ebc <_vfiprintf_r+0x60>
 8006eb8:	68b5      	ldr	r5, [r6, #8]
 8006eba:	e7df      	b.n	8006e7c <_vfiprintf_r+0x20>
 8006ebc:	4b79      	ldr	r3, [pc, #484]	; (80070a4 <_vfiprintf_r+0x248>)
 8006ebe:	429d      	cmp	r5, r3
 8006ec0:	bf08      	it	eq
 8006ec2:	68f5      	ldreq	r5, [r6, #12]
 8006ec4:	e7da      	b.n	8006e7c <_vfiprintf_r+0x20>
 8006ec6:	89ab      	ldrh	r3, [r5, #12]
 8006ec8:	0598      	lsls	r0, r3, #22
 8006eca:	d4ed      	bmi.n	8006ea8 <_vfiprintf_r+0x4c>
 8006ecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ece:	f000 fb72 	bl	80075b6 <__retarget_lock_release_recursive>
 8006ed2:	e7e9      	b.n	8006ea8 <_vfiprintf_r+0x4c>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ed8:	2320      	movs	r3, #32
 8006eda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ede:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ee2:	2330      	movs	r3, #48	; 0x30
 8006ee4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80070a8 <_vfiprintf_r+0x24c>
 8006ee8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006eec:	f04f 0901 	mov.w	r9, #1
 8006ef0:	4623      	mov	r3, r4
 8006ef2:	469a      	mov	sl, r3
 8006ef4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ef8:	b10a      	cbz	r2, 8006efe <_vfiprintf_r+0xa2>
 8006efa:	2a25      	cmp	r2, #37	; 0x25
 8006efc:	d1f9      	bne.n	8006ef2 <_vfiprintf_r+0x96>
 8006efe:	ebba 0b04 	subs.w	fp, sl, r4
 8006f02:	d00b      	beq.n	8006f1c <_vfiprintf_r+0xc0>
 8006f04:	465b      	mov	r3, fp
 8006f06:	4622      	mov	r2, r4
 8006f08:	4629      	mov	r1, r5
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	f7ff ff94 	bl	8006e38 <__sfputs_r>
 8006f10:	3001      	adds	r0, #1
 8006f12:	f000 80aa 	beq.w	800706a <_vfiprintf_r+0x20e>
 8006f16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f18:	445a      	add	r2, fp
 8006f1a:	9209      	str	r2, [sp, #36]	; 0x24
 8006f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 80a2 	beq.w	800706a <_vfiprintf_r+0x20e>
 8006f26:	2300      	movs	r3, #0
 8006f28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f30:	f10a 0a01 	add.w	sl, sl, #1
 8006f34:	9304      	str	r3, [sp, #16]
 8006f36:	9307      	str	r3, [sp, #28]
 8006f38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f3c:	931a      	str	r3, [sp, #104]	; 0x68
 8006f3e:	4654      	mov	r4, sl
 8006f40:	2205      	movs	r2, #5
 8006f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f46:	4858      	ldr	r0, [pc, #352]	; (80070a8 <_vfiprintf_r+0x24c>)
 8006f48:	f7f9 f952 	bl	80001f0 <memchr>
 8006f4c:	9a04      	ldr	r2, [sp, #16]
 8006f4e:	b9d8      	cbnz	r0, 8006f88 <_vfiprintf_r+0x12c>
 8006f50:	06d1      	lsls	r1, r2, #27
 8006f52:	bf44      	itt	mi
 8006f54:	2320      	movmi	r3, #32
 8006f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f5a:	0713      	lsls	r3, r2, #28
 8006f5c:	bf44      	itt	mi
 8006f5e:	232b      	movmi	r3, #43	; 0x2b
 8006f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f64:	f89a 3000 	ldrb.w	r3, [sl]
 8006f68:	2b2a      	cmp	r3, #42	; 0x2a
 8006f6a:	d015      	beq.n	8006f98 <_vfiprintf_r+0x13c>
 8006f6c:	9a07      	ldr	r2, [sp, #28]
 8006f6e:	4654      	mov	r4, sl
 8006f70:	2000      	movs	r0, #0
 8006f72:	f04f 0c0a 	mov.w	ip, #10
 8006f76:	4621      	mov	r1, r4
 8006f78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f7c:	3b30      	subs	r3, #48	; 0x30
 8006f7e:	2b09      	cmp	r3, #9
 8006f80:	d94e      	bls.n	8007020 <_vfiprintf_r+0x1c4>
 8006f82:	b1b0      	cbz	r0, 8006fb2 <_vfiprintf_r+0x156>
 8006f84:	9207      	str	r2, [sp, #28]
 8006f86:	e014      	b.n	8006fb2 <_vfiprintf_r+0x156>
 8006f88:	eba0 0308 	sub.w	r3, r0, r8
 8006f8c:	fa09 f303 	lsl.w	r3, r9, r3
 8006f90:	4313      	orrs	r3, r2
 8006f92:	9304      	str	r3, [sp, #16]
 8006f94:	46a2      	mov	sl, r4
 8006f96:	e7d2      	b.n	8006f3e <_vfiprintf_r+0xe2>
 8006f98:	9b03      	ldr	r3, [sp, #12]
 8006f9a:	1d19      	adds	r1, r3, #4
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	9103      	str	r1, [sp, #12]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	bfbb      	ittet	lt
 8006fa4:	425b      	neglt	r3, r3
 8006fa6:	f042 0202 	orrlt.w	r2, r2, #2
 8006faa:	9307      	strge	r3, [sp, #28]
 8006fac:	9307      	strlt	r3, [sp, #28]
 8006fae:	bfb8      	it	lt
 8006fb0:	9204      	strlt	r2, [sp, #16]
 8006fb2:	7823      	ldrb	r3, [r4, #0]
 8006fb4:	2b2e      	cmp	r3, #46	; 0x2e
 8006fb6:	d10c      	bne.n	8006fd2 <_vfiprintf_r+0x176>
 8006fb8:	7863      	ldrb	r3, [r4, #1]
 8006fba:	2b2a      	cmp	r3, #42	; 0x2a
 8006fbc:	d135      	bne.n	800702a <_vfiprintf_r+0x1ce>
 8006fbe:	9b03      	ldr	r3, [sp, #12]
 8006fc0:	1d1a      	adds	r2, r3, #4
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	9203      	str	r2, [sp, #12]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	bfb8      	it	lt
 8006fca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006fce:	3402      	adds	r4, #2
 8006fd0:	9305      	str	r3, [sp, #20]
 8006fd2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80070ac <_vfiprintf_r+0x250>
 8006fd6:	7821      	ldrb	r1, [r4, #0]
 8006fd8:	2203      	movs	r2, #3
 8006fda:	4650      	mov	r0, sl
 8006fdc:	f7f9 f908 	bl	80001f0 <memchr>
 8006fe0:	b140      	cbz	r0, 8006ff4 <_vfiprintf_r+0x198>
 8006fe2:	2340      	movs	r3, #64	; 0x40
 8006fe4:	eba0 000a 	sub.w	r0, r0, sl
 8006fe8:	fa03 f000 	lsl.w	r0, r3, r0
 8006fec:	9b04      	ldr	r3, [sp, #16]
 8006fee:	4303      	orrs	r3, r0
 8006ff0:	3401      	adds	r4, #1
 8006ff2:	9304      	str	r3, [sp, #16]
 8006ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ff8:	482d      	ldr	r0, [pc, #180]	; (80070b0 <_vfiprintf_r+0x254>)
 8006ffa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ffe:	2206      	movs	r2, #6
 8007000:	f7f9 f8f6 	bl	80001f0 <memchr>
 8007004:	2800      	cmp	r0, #0
 8007006:	d03f      	beq.n	8007088 <_vfiprintf_r+0x22c>
 8007008:	4b2a      	ldr	r3, [pc, #168]	; (80070b4 <_vfiprintf_r+0x258>)
 800700a:	bb1b      	cbnz	r3, 8007054 <_vfiprintf_r+0x1f8>
 800700c:	9b03      	ldr	r3, [sp, #12]
 800700e:	3307      	adds	r3, #7
 8007010:	f023 0307 	bic.w	r3, r3, #7
 8007014:	3308      	adds	r3, #8
 8007016:	9303      	str	r3, [sp, #12]
 8007018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800701a:	443b      	add	r3, r7
 800701c:	9309      	str	r3, [sp, #36]	; 0x24
 800701e:	e767      	b.n	8006ef0 <_vfiprintf_r+0x94>
 8007020:	fb0c 3202 	mla	r2, ip, r2, r3
 8007024:	460c      	mov	r4, r1
 8007026:	2001      	movs	r0, #1
 8007028:	e7a5      	b.n	8006f76 <_vfiprintf_r+0x11a>
 800702a:	2300      	movs	r3, #0
 800702c:	3401      	adds	r4, #1
 800702e:	9305      	str	r3, [sp, #20]
 8007030:	4619      	mov	r1, r3
 8007032:	f04f 0c0a 	mov.w	ip, #10
 8007036:	4620      	mov	r0, r4
 8007038:	f810 2b01 	ldrb.w	r2, [r0], #1
 800703c:	3a30      	subs	r2, #48	; 0x30
 800703e:	2a09      	cmp	r2, #9
 8007040:	d903      	bls.n	800704a <_vfiprintf_r+0x1ee>
 8007042:	2b00      	cmp	r3, #0
 8007044:	d0c5      	beq.n	8006fd2 <_vfiprintf_r+0x176>
 8007046:	9105      	str	r1, [sp, #20]
 8007048:	e7c3      	b.n	8006fd2 <_vfiprintf_r+0x176>
 800704a:	fb0c 2101 	mla	r1, ip, r1, r2
 800704e:	4604      	mov	r4, r0
 8007050:	2301      	movs	r3, #1
 8007052:	e7f0      	b.n	8007036 <_vfiprintf_r+0x1da>
 8007054:	ab03      	add	r3, sp, #12
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	462a      	mov	r2, r5
 800705a:	4b17      	ldr	r3, [pc, #92]	; (80070b8 <_vfiprintf_r+0x25c>)
 800705c:	a904      	add	r1, sp, #16
 800705e:	4630      	mov	r0, r6
 8007060:	f7fc f892 	bl	8003188 <_printf_float>
 8007064:	4607      	mov	r7, r0
 8007066:	1c78      	adds	r0, r7, #1
 8007068:	d1d6      	bne.n	8007018 <_vfiprintf_r+0x1bc>
 800706a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800706c:	07d9      	lsls	r1, r3, #31
 800706e:	d405      	bmi.n	800707c <_vfiprintf_r+0x220>
 8007070:	89ab      	ldrh	r3, [r5, #12]
 8007072:	059a      	lsls	r2, r3, #22
 8007074:	d402      	bmi.n	800707c <_vfiprintf_r+0x220>
 8007076:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007078:	f000 fa9d 	bl	80075b6 <__retarget_lock_release_recursive>
 800707c:	89ab      	ldrh	r3, [r5, #12]
 800707e:	065b      	lsls	r3, r3, #25
 8007080:	f53f af12 	bmi.w	8006ea8 <_vfiprintf_r+0x4c>
 8007084:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007086:	e711      	b.n	8006eac <_vfiprintf_r+0x50>
 8007088:	ab03      	add	r3, sp, #12
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	462a      	mov	r2, r5
 800708e:	4b0a      	ldr	r3, [pc, #40]	; (80070b8 <_vfiprintf_r+0x25c>)
 8007090:	a904      	add	r1, sp, #16
 8007092:	4630      	mov	r0, r6
 8007094:	f7fc fb10 	bl	80036b8 <_printf_i>
 8007098:	e7e4      	b.n	8007064 <_vfiprintf_r+0x208>
 800709a:	bf00      	nop
 800709c:	08007cf4 	.word	0x08007cf4
 80070a0:	08007d14 	.word	0x08007d14
 80070a4:	08007cd4 	.word	0x08007cd4
 80070a8:	08007c84 	.word	0x08007c84
 80070ac:	08007c8a 	.word	0x08007c8a
 80070b0:	08007c8e 	.word	0x08007c8e
 80070b4:	08003189 	.word	0x08003189
 80070b8:	08006e39 	.word	0x08006e39

080070bc <__swbuf_r>:
 80070bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070be:	460e      	mov	r6, r1
 80070c0:	4614      	mov	r4, r2
 80070c2:	4605      	mov	r5, r0
 80070c4:	b118      	cbz	r0, 80070ce <__swbuf_r+0x12>
 80070c6:	6983      	ldr	r3, [r0, #24]
 80070c8:	b90b      	cbnz	r3, 80070ce <__swbuf_r+0x12>
 80070ca:	f000 f9d5 	bl	8007478 <__sinit>
 80070ce:	4b21      	ldr	r3, [pc, #132]	; (8007154 <__swbuf_r+0x98>)
 80070d0:	429c      	cmp	r4, r3
 80070d2:	d12b      	bne.n	800712c <__swbuf_r+0x70>
 80070d4:	686c      	ldr	r4, [r5, #4]
 80070d6:	69a3      	ldr	r3, [r4, #24]
 80070d8:	60a3      	str	r3, [r4, #8]
 80070da:	89a3      	ldrh	r3, [r4, #12]
 80070dc:	071a      	lsls	r2, r3, #28
 80070de:	d52f      	bpl.n	8007140 <__swbuf_r+0x84>
 80070e0:	6923      	ldr	r3, [r4, #16]
 80070e2:	b36b      	cbz	r3, 8007140 <__swbuf_r+0x84>
 80070e4:	6923      	ldr	r3, [r4, #16]
 80070e6:	6820      	ldr	r0, [r4, #0]
 80070e8:	1ac0      	subs	r0, r0, r3
 80070ea:	6963      	ldr	r3, [r4, #20]
 80070ec:	b2f6      	uxtb	r6, r6
 80070ee:	4283      	cmp	r3, r0
 80070f0:	4637      	mov	r7, r6
 80070f2:	dc04      	bgt.n	80070fe <__swbuf_r+0x42>
 80070f4:	4621      	mov	r1, r4
 80070f6:	4628      	mov	r0, r5
 80070f8:	f000 f92a 	bl	8007350 <_fflush_r>
 80070fc:	bb30      	cbnz	r0, 800714c <__swbuf_r+0x90>
 80070fe:	68a3      	ldr	r3, [r4, #8]
 8007100:	3b01      	subs	r3, #1
 8007102:	60a3      	str	r3, [r4, #8]
 8007104:	6823      	ldr	r3, [r4, #0]
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	6022      	str	r2, [r4, #0]
 800710a:	701e      	strb	r6, [r3, #0]
 800710c:	6963      	ldr	r3, [r4, #20]
 800710e:	3001      	adds	r0, #1
 8007110:	4283      	cmp	r3, r0
 8007112:	d004      	beq.n	800711e <__swbuf_r+0x62>
 8007114:	89a3      	ldrh	r3, [r4, #12]
 8007116:	07db      	lsls	r3, r3, #31
 8007118:	d506      	bpl.n	8007128 <__swbuf_r+0x6c>
 800711a:	2e0a      	cmp	r6, #10
 800711c:	d104      	bne.n	8007128 <__swbuf_r+0x6c>
 800711e:	4621      	mov	r1, r4
 8007120:	4628      	mov	r0, r5
 8007122:	f000 f915 	bl	8007350 <_fflush_r>
 8007126:	b988      	cbnz	r0, 800714c <__swbuf_r+0x90>
 8007128:	4638      	mov	r0, r7
 800712a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800712c:	4b0a      	ldr	r3, [pc, #40]	; (8007158 <__swbuf_r+0x9c>)
 800712e:	429c      	cmp	r4, r3
 8007130:	d101      	bne.n	8007136 <__swbuf_r+0x7a>
 8007132:	68ac      	ldr	r4, [r5, #8]
 8007134:	e7cf      	b.n	80070d6 <__swbuf_r+0x1a>
 8007136:	4b09      	ldr	r3, [pc, #36]	; (800715c <__swbuf_r+0xa0>)
 8007138:	429c      	cmp	r4, r3
 800713a:	bf08      	it	eq
 800713c:	68ec      	ldreq	r4, [r5, #12]
 800713e:	e7ca      	b.n	80070d6 <__swbuf_r+0x1a>
 8007140:	4621      	mov	r1, r4
 8007142:	4628      	mov	r0, r5
 8007144:	f000 f80c 	bl	8007160 <__swsetup_r>
 8007148:	2800      	cmp	r0, #0
 800714a:	d0cb      	beq.n	80070e4 <__swbuf_r+0x28>
 800714c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007150:	e7ea      	b.n	8007128 <__swbuf_r+0x6c>
 8007152:	bf00      	nop
 8007154:	08007cf4 	.word	0x08007cf4
 8007158:	08007d14 	.word	0x08007d14
 800715c:	08007cd4 	.word	0x08007cd4

08007160 <__swsetup_r>:
 8007160:	4b32      	ldr	r3, [pc, #200]	; (800722c <__swsetup_r+0xcc>)
 8007162:	b570      	push	{r4, r5, r6, lr}
 8007164:	681d      	ldr	r5, [r3, #0]
 8007166:	4606      	mov	r6, r0
 8007168:	460c      	mov	r4, r1
 800716a:	b125      	cbz	r5, 8007176 <__swsetup_r+0x16>
 800716c:	69ab      	ldr	r3, [r5, #24]
 800716e:	b913      	cbnz	r3, 8007176 <__swsetup_r+0x16>
 8007170:	4628      	mov	r0, r5
 8007172:	f000 f981 	bl	8007478 <__sinit>
 8007176:	4b2e      	ldr	r3, [pc, #184]	; (8007230 <__swsetup_r+0xd0>)
 8007178:	429c      	cmp	r4, r3
 800717a:	d10f      	bne.n	800719c <__swsetup_r+0x3c>
 800717c:	686c      	ldr	r4, [r5, #4]
 800717e:	89a3      	ldrh	r3, [r4, #12]
 8007180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007184:	0719      	lsls	r1, r3, #28
 8007186:	d42c      	bmi.n	80071e2 <__swsetup_r+0x82>
 8007188:	06dd      	lsls	r5, r3, #27
 800718a:	d411      	bmi.n	80071b0 <__swsetup_r+0x50>
 800718c:	2309      	movs	r3, #9
 800718e:	6033      	str	r3, [r6, #0]
 8007190:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007194:	81a3      	strh	r3, [r4, #12]
 8007196:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800719a:	e03e      	b.n	800721a <__swsetup_r+0xba>
 800719c:	4b25      	ldr	r3, [pc, #148]	; (8007234 <__swsetup_r+0xd4>)
 800719e:	429c      	cmp	r4, r3
 80071a0:	d101      	bne.n	80071a6 <__swsetup_r+0x46>
 80071a2:	68ac      	ldr	r4, [r5, #8]
 80071a4:	e7eb      	b.n	800717e <__swsetup_r+0x1e>
 80071a6:	4b24      	ldr	r3, [pc, #144]	; (8007238 <__swsetup_r+0xd8>)
 80071a8:	429c      	cmp	r4, r3
 80071aa:	bf08      	it	eq
 80071ac:	68ec      	ldreq	r4, [r5, #12]
 80071ae:	e7e6      	b.n	800717e <__swsetup_r+0x1e>
 80071b0:	0758      	lsls	r0, r3, #29
 80071b2:	d512      	bpl.n	80071da <__swsetup_r+0x7a>
 80071b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071b6:	b141      	cbz	r1, 80071ca <__swsetup_r+0x6a>
 80071b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071bc:	4299      	cmp	r1, r3
 80071be:	d002      	beq.n	80071c6 <__swsetup_r+0x66>
 80071c0:	4630      	mov	r0, r6
 80071c2:	f7ff fb2d 	bl	8006820 <_free_r>
 80071c6:	2300      	movs	r3, #0
 80071c8:	6363      	str	r3, [r4, #52]	; 0x34
 80071ca:	89a3      	ldrh	r3, [r4, #12]
 80071cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80071d0:	81a3      	strh	r3, [r4, #12]
 80071d2:	2300      	movs	r3, #0
 80071d4:	6063      	str	r3, [r4, #4]
 80071d6:	6923      	ldr	r3, [r4, #16]
 80071d8:	6023      	str	r3, [r4, #0]
 80071da:	89a3      	ldrh	r3, [r4, #12]
 80071dc:	f043 0308 	orr.w	r3, r3, #8
 80071e0:	81a3      	strh	r3, [r4, #12]
 80071e2:	6923      	ldr	r3, [r4, #16]
 80071e4:	b94b      	cbnz	r3, 80071fa <__swsetup_r+0x9a>
 80071e6:	89a3      	ldrh	r3, [r4, #12]
 80071e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80071ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071f0:	d003      	beq.n	80071fa <__swsetup_r+0x9a>
 80071f2:	4621      	mov	r1, r4
 80071f4:	4630      	mov	r0, r6
 80071f6:	f000 fa05 	bl	8007604 <__smakebuf_r>
 80071fa:	89a0      	ldrh	r0, [r4, #12]
 80071fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007200:	f010 0301 	ands.w	r3, r0, #1
 8007204:	d00a      	beq.n	800721c <__swsetup_r+0xbc>
 8007206:	2300      	movs	r3, #0
 8007208:	60a3      	str	r3, [r4, #8]
 800720a:	6963      	ldr	r3, [r4, #20]
 800720c:	425b      	negs	r3, r3
 800720e:	61a3      	str	r3, [r4, #24]
 8007210:	6923      	ldr	r3, [r4, #16]
 8007212:	b943      	cbnz	r3, 8007226 <__swsetup_r+0xc6>
 8007214:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007218:	d1ba      	bne.n	8007190 <__swsetup_r+0x30>
 800721a:	bd70      	pop	{r4, r5, r6, pc}
 800721c:	0781      	lsls	r1, r0, #30
 800721e:	bf58      	it	pl
 8007220:	6963      	ldrpl	r3, [r4, #20]
 8007222:	60a3      	str	r3, [r4, #8]
 8007224:	e7f4      	b.n	8007210 <__swsetup_r+0xb0>
 8007226:	2000      	movs	r0, #0
 8007228:	e7f7      	b.n	800721a <__swsetup_r+0xba>
 800722a:	bf00      	nop
 800722c:	20000000 	.word	0x20000000
 8007230:	08007cf4 	.word	0x08007cf4
 8007234:	08007d14 	.word	0x08007d14
 8007238:	08007cd4 	.word	0x08007cd4

0800723c <abort>:
 800723c:	b508      	push	{r3, lr}
 800723e:	2006      	movs	r0, #6
 8007240:	f000 fa50 	bl	80076e4 <raise>
 8007244:	2001      	movs	r0, #1
 8007246:	f7fb fdfc 	bl	8002e42 <_exit>
	...

0800724c <__sflush_r>:
 800724c:	898a      	ldrh	r2, [r1, #12]
 800724e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007250:	4605      	mov	r5, r0
 8007252:	0710      	lsls	r0, r2, #28
 8007254:	460c      	mov	r4, r1
 8007256:	d457      	bmi.n	8007308 <__sflush_r+0xbc>
 8007258:	684b      	ldr	r3, [r1, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	dc04      	bgt.n	8007268 <__sflush_r+0x1c>
 800725e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007260:	2b00      	cmp	r3, #0
 8007262:	dc01      	bgt.n	8007268 <__sflush_r+0x1c>
 8007264:	2000      	movs	r0, #0
 8007266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007268:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800726a:	2e00      	cmp	r6, #0
 800726c:	d0fa      	beq.n	8007264 <__sflush_r+0x18>
 800726e:	2300      	movs	r3, #0
 8007270:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007274:	682f      	ldr	r7, [r5, #0]
 8007276:	602b      	str	r3, [r5, #0]
 8007278:	d032      	beq.n	80072e0 <__sflush_r+0x94>
 800727a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800727c:	89a3      	ldrh	r3, [r4, #12]
 800727e:	075a      	lsls	r2, r3, #29
 8007280:	d505      	bpl.n	800728e <__sflush_r+0x42>
 8007282:	6863      	ldr	r3, [r4, #4]
 8007284:	1ac0      	subs	r0, r0, r3
 8007286:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007288:	b10b      	cbz	r3, 800728e <__sflush_r+0x42>
 800728a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800728c:	1ac0      	subs	r0, r0, r3
 800728e:	2300      	movs	r3, #0
 8007290:	4602      	mov	r2, r0
 8007292:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007294:	6a21      	ldr	r1, [r4, #32]
 8007296:	4628      	mov	r0, r5
 8007298:	47b0      	blx	r6
 800729a:	1c43      	adds	r3, r0, #1
 800729c:	89a3      	ldrh	r3, [r4, #12]
 800729e:	d106      	bne.n	80072ae <__sflush_r+0x62>
 80072a0:	6829      	ldr	r1, [r5, #0]
 80072a2:	291d      	cmp	r1, #29
 80072a4:	d82c      	bhi.n	8007300 <__sflush_r+0xb4>
 80072a6:	4a29      	ldr	r2, [pc, #164]	; (800734c <__sflush_r+0x100>)
 80072a8:	40ca      	lsrs	r2, r1
 80072aa:	07d6      	lsls	r6, r2, #31
 80072ac:	d528      	bpl.n	8007300 <__sflush_r+0xb4>
 80072ae:	2200      	movs	r2, #0
 80072b0:	6062      	str	r2, [r4, #4]
 80072b2:	04d9      	lsls	r1, r3, #19
 80072b4:	6922      	ldr	r2, [r4, #16]
 80072b6:	6022      	str	r2, [r4, #0]
 80072b8:	d504      	bpl.n	80072c4 <__sflush_r+0x78>
 80072ba:	1c42      	adds	r2, r0, #1
 80072bc:	d101      	bne.n	80072c2 <__sflush_r+0x76>
 80072be:	682b      	ldr	r3, [r5, #0]
 80072c0:	b903      	cbnz	r3, 80072c4 <__sflush_r+0x78>
 80072c2:	6560      	str	r0, [r4, #84]	; 0x54
 80072c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072c6:	602f      	str	r7, [r5, #0]
 80072c8:	2900      	cmp	r1, #0
 80072ca:	d0cb      	beq.n	8007264 <__sflush_r+0x18>
 80072cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072d0:	4299      	cmp	r1, r3
 80072d2:	d002      	beq.n	80072da <__sflush_r+0x8e>
 80072d4:	4628      	mov	r0, r5
 80072d6:	f7ff faa3 	bl	8006820 <_free_r>
 80072da:	2000      	movs	r0, #0
 80072dc:	6360      	str	r0, [r4, #52]	; 0x34
 80072de:	e7c2      	b.n	8007266 <__sflush_r+0x1a>
 80072e0:	6a21      	ldr	r1, [r4, #32]
 80072e2:	2301      	movs	r3, #1
 80072e4:	4628      	mov	r0, r5
 80072e6:	47b0      	blx	r6
 80072e8:	1c41      	adds	r1, r0, #1
 80072ea:	d1c7      	bne.n	800727c <__sflush_r+0x30>
 80072ec:	682b      	ldr	r3, [r5, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d0c4      	beq.n	800727c <__sflush_r+0x30>
 80072f2:	2b1d      	cmp	r3, #29
 80072f4:	d001      	beq.n	80072fa <__sflush_r+0xae>
 80072f6:	2b16      	cmp	r3, #22
 80072f8:	d101      	bne.n	80072fe <__sflush_r+0xb2>
 80072fa:	602f      	str	r7, [r5, #0]
 80072fc:	e7b2      	b.n	8007264 <__sflush_r+0x18>
 80072fe:	89a3      	ldrh	r3, [r4, #12]
 8007300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007304:	81a3      	strh	r3, [r4, #12]
 8007306:	e7ae      	b.n	8007266 <__sflush_r+0x1a>
 8007308:	690f      	ldr	r7, [r1, #16]
 800730a:	2f00      	cmp	r7, #0
 800730c:	d0aa      	beq.n	8007264 <__sflush_r+0x18>
 800730e:	0793      	lsls	r3, r2, #30
 8007310:	680e      	ldr	r6, [r1, #0]
 8007312:	bf08      	it	eq
 8007314:	694b      	ldreq	r3, [r1, #20]
 8007316:	600f      	str	r7, [r1, #0]
 8007318:	bf18      	it	ne
 800731a:	2300      	movne	r3, #0
 800731c:	1bf6      	subs	r6, r6, r7
 800731e:	608b      	str	r3, [r1, #8]
 8007320:	2e00      	cmp	r6, #0
 8007322:	dd9f      	ble.n	8007264 <__sflush_r+0x18>
 8007324:	6a21      	ldr	r1, [r4, #32]
 8007326:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800732a:	4633      	mov	r3, r6
 800732c:	463a      	mov	r2, r7
 800732e:	4628      	mov	r0, r5
 8007330:	47e0      	blx	ip
 8007332:	2800      	cmp	r0, #0
 8007334:	dc06      	bgt.n	8007344 <__sflush_r+0xf8>
 8007336:	89a3      	ldrh	r3, [r4, #12]
 8007338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800733c:	81a3      	strh	r3, [r4, #12]
 800733e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007342:	e790      	b.n	8007266 <__sflush_r+0x1a>
 8007344:	4407      	add	r7, r0
 8007346:	1a36      	subs	r6, r6, r0
 8007348:	e7ea      	b.n	8007320 <__sflush_r+0xd4>
 800734a:	bf00      	nop
 800734c:	20400001 	.word	0x20400001

08007350 <_fflush_r>:
 8007350:	b538      	push	{r3, r4, r5, lr}
 8007352:	690b      	ldr	r3, [r1, #16]
 8007354:	4605      	mov	r5, r0
 8007356:	460c      	mov	r4, r1
 8007358:	b913      	cbnz	r3, 8007360 <_fflush_r+0x10>
 800735a:	2500      	movs	r5, #0
 800735c:	4628      	mov	r0, r5
 800735e:	bd38      	pop	{r3, r4, r5, pc}
 8007360:	b118      	cbz	r0, 800736a <_fflush_r+0x1a>
 8007362:	6983      	ldr	r3, [r0, #24]
 8007364:	b90b      	cbnz	r3, 800736a <_fflush_r+0x1a>
 8007366:	f000 f887 	bl	8007478 <__sinit>
 800736a:	4b14      	ldr	r3, [pc, #80]	; (80073bc <_fflush_r+0x6c>)
 800736c:	429c      	cmp	r4, r3
 800736e:	d11b      	bne.n	80073a8 <_fflush_r+0x58>
 8007370:	686c      	ldr	r4, [r5, #4]
 8007372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d0ef      	beq.n	800735a <_fflush_r+0xa>
 800737a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800737c:	07d0      	lsls	r0, r2, #31
 800737e:	d404      	bmi.n	800738a <_fflush_r+0x3a>
 8007380:	0599      	lsls	r1, r3, #22
 8007382:	d402      	bmi.n	800738a <_fflush_r+0x3a>
 8007384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007386:	f000 f915 	bl	80075b4 <__retarget_lock_acquire_recursive>
 800738a:	4628      	mov	r0, r5
 800738c:	4621      	mov	r1, r4
 800738e:	f7ff ff5d 	bl	800724c <__sflush_r>
 8007392:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007394:	07da      	lsls	r2, r3, #31
 8007396:	4605      	mov	r5, r0
 8007398:	d4e0      	bmi.n	800735c <_fflush_r+0xc>
 800739a:	89a3      	ldrh	r3, [r4, #12]
 800739c:	059b      	lsls	r3, r3, #22
 800739e:	d4dd      	bmi.n	800735c <_fflush_r+0xc>
 80073a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073a2:	f000 f908 	bl	80075b6 <__retarget_lock_release_recursive>
 80073a6:	e7d9      	b.n	800735c <_fflush_r+0xc>
 80073a8:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <_fflush_r+0x70>)
 80073aa:	429c      	cmp	r4, r3
 80073ac:	d101      	bne.n	80073b2 <_fflush_r+0x62>
 80073ae:	68ac      	ldr	r4, [r5, #8]
 80073b0:	e7df      	b.n	8007372 <_fflush_r+0x22>
 80073b2:	4b04      	ldr	r3, [pc, #16]	; (80073c4 <_fflush_r+0x74>)
 80073b4:	429c      	cmp	r4, r3
 80073b6:	bf08      	it	eq
 80073b8:	68ec      	ldreq	r4, [r5, #12]
 80073ba:	e7da      	b.n	8007372 <_fflush_r+0x22>
 80073bc:	08007cf4 	.word	0x08007cf4
 80073c0:	08007d14 	.word	0x08007d14
 80073c4:	08007cd4 	.word	0x08007cd4

080073c8 <std>:
 80073c8:	2300      	movs	r3, #0
 80073ca:	b510      	push	{r4, lr}
 80073cc:	4604      	mov	r4, r0
 80073ce:	e9c0 3300 	strd	r3, r3, [r0]
 80073d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073d6:	6083      	str	r3, [r0, #8]
 80073d8:	8181      	strh	r1, [r0, #12]
 80073da:	6643      	str	r3, [r0, #100]	; 0x64
 80073dc:	81c2      	strh	r2, [r0, #14]
 80073de:	6183      	str	r3, [r0, #24]
 80073e0:	4619      	mov	r1, r3
 80073e2:	2208      	movs	r2, #8
 80073e4:	305c      	adds	r0, #92	; 0x5c
 80073e6:	f7fb fe29 	bl	800303c <memset>
 80073ea:	4b05      	ldr	r3, [pc, #20]	; (8007400 <std+0x38>)
 80073ec:	6263      	str	r3, [r4, #36]	; 0x24
 80073ee:	4b05      	ldr	r3, [pc, #20]	; (8007404 <std+0x3c>)
 80073f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80073f2:	4b05      	ldr	r3, [pc, #20]	; (8007408 <std+0x40>)
 80073f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073f6:	4b05      	ldr	r3, [pc, #20]	; (800740c <std+0x44>)
 80073f8:	6224      	str	r4, [r4, #32]
 80073fa:	6323      	str	r3, [r4, #48]	; 0x30
 80073fc:	bd10      	pop	{r4, pc}
 80073fe:	bf00      	nop
 8007400:	0800771d 	.word	0x0800771d
 8007404:	0800773f 	.word	0x0800773f
 8007408:	08007777 	.word	0x08007777
 800740c:	0800779b 	.word	0x0800779b

08007410 <_cleanup_r>:
 8007410:	4901      	ldr	r1, [pc, #4]	; (8007418 <_cleanup_r+0x8>)
 8007412:	f000 b8af 	b.w	8007574 <_fwalk_reent>
 8007416:	bf00      	nop
 8007418:	08007351 	.word	0x08007351

0800741c <__sfmoreglue>:
 800741c:	b570      	push	{r4, r5, r6, lr}
 800741e:	2268      	movs	r2, #104	; 0x68
 8007420:	1e4d      	subs	r5, r1, #1
 8007422:	4355      	muls	r5, r2
 8007424:	460e      	mov	r6, r1
 8007426:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800742a:	f7ff fa63 	bl	80068f4 <_malloc_r>
 800742e:	4604      	mov	r4, r0
 8007430:	b140      	cbz	r0, 8007444 <__sfmoreglue+0x28>
 8007432:	2100      	movs	r1, #0
 8007434:	e9c0 1600 	strd	r1, r6, [r0]
 8007438:	300c      	adds	r0, #12
 800743a:	60a0      	str	r0, [r4, #8]
 800743c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007440:	f7fb fdfc 	bl	800303c <memset>
 8007444:	4620      	mov	r0, r4
 8007446:	bd70      	pop	{r4, r5, r6, pc}

08007448 <__sfp_lock_acquire>:
 8007448:	4801      	ldr	r0, [pc, #4]	; (8007450 <__sfp_lock_acquire+0x8>)
 800744a:	f000 b8b3 	b.w	80075b4 <__retarget_lock_acquire_recursive>
 800744e:	bf00      	nop
 8007450:	200002e9 	.word	0x200002e9

08007454 <__sfp_lock_release>:
 8007454:	4801      	ldr	r0, [pc, #4]	; (800745c <__sfp_lock_release+0x8>)
 8007456:	f000 b8ae 	b.w	80075b6 <__retarget_lock_release_recursive>
 800745a:	bf00      	nop
 800745c:	200002e9 	.word	0x200002e9

08007460 <__sinit_lock_acquire>:
 8007460:	4801      	ldr	r0, [pc, #4]	; (8007468 <__sinit_lock_acquire+0x8>)
 8007462:	f000 b8a7 	b.w	80075b4 <__retarget_lock_acquire_recursive>
 8007466:	bf00      	nop
 8007468:	200002ea 	.word	0x200002ea

0800746c <__sinit_lock_release>:
 800746c:	4801      	ldr	r0, [pc, #4]	; (8007474 <__sinit_lock_release+0x8>)
 800746e:	f000 b8a2 	b.w	80075b6 <__retarget_lock_release_recursive>
 8007472:	bf00      	nop
 8007474:	200002ea 	.word	0x200002ea

08007478 <__sinit>:
 8007478:	b510      	push	{r4, lr}
 800747a:	4604      	mov	r4, r0
 800747c:	f7ff fff0 	bl	8007460 <__sinit_lock_acquire>
 8007480:	69a3      	ldr	r3, [r4, #24]
 8007482:	b11b      	cbz	r3, 800748c <__sinit+0x14>
 8007484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007488:	f7ff bff0 	b.w	800746c <__sinit_lock_release>
 800748c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007490:	6523      	str	r3, [r4, #80]	; 0x50
 8007492:	4b13      	ldr	r3, [pc, #76]	; (80074e0 <__sinit+0x68>)
 8007494:	4a13      	ldr	r2, [pc, #76]	; (80074e4 <__sinit+0x6c>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	62a2      	str	r2, [r4, #40]	; 0x28
 800749a:	42a3      	cmp	r3, r4
 800749c:	bf04      	itt	eq
 800749e:	2301      	moveq	r3, #1
 80074a0:	61a3      	streq	r3, [r4, #24]
 80074a2:	4620      	mov	r0, r4
 80074a4:	f000 f820 	bl	80074e8 <__sfp>
 80074a8:	6060      	str	r0, [r4, #4]
 80074aa:	4620      	mov	r0, r4
 80074ac:	f000 f81c 	bl	80074e8 <__sfp>
 80074b0:	60a0      	str	r0, [r4, #8]
 80074b2:	4620      	mov	r0, r4
 80074b4:	f000 f818 	bl	80074e8 <__sfp>
 80074b8:	2200      	movs	r2, #0
 80074ba:	60e0      	str	r0, [r4, #12]
 80074bc:	2104      	movs	r1, #4
 80074be:	6860      	ldr	r0, [r4, #4]
 80074c0:	f7ff ff82 	bl	80073c8 <std>
 80074c4:	68a0      	ldr	r0, [r4, #8]
 80074c6:	2201      	movs	r2, #1
 80074c8:	2109      	movs	r1, #9
 80074ca:	f7ff ff7d 	bl	80073c8 <std>
 80074ce:	68e0      	ldr	r0, [r4, #12]
 80074d0:	2202      	movs	r2, #2
 80074d2:	2112      	movs	r1, #18
 80074d4:	f7ff ff78 	bl	80073c8 <std>
 80074d8:	2301      	movs	r3, #1
 80074da:	61a3      	str	r3, [r4, #24]
 80074dc:	e7d2      	b.n	8007484 <__sinit+0xc>
 80074de:	bf00      	nop
 80074e0:	08007890 	.word	0x08007890
 80074e4:	08007411 	.word	0x08007411

080074e8 <__sfp>:
 80074e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ea:	4607      	mov	r7, r0
 80074ec:	f7ff ffac 	bl	8007448 <__sfp_lock_acquire>
 80074f0:	4b1e      	ldr	r3, [pc, #120]	; (800756c <__sfp+0x84>)
 80074f2:	681e      	ldr	r6, [r3, #0]
 80074f4:	69b3      	ldr	r3, [r6, #24]
 80074f6:	b913      	cbnz	r3, 80074fe <__sfp+0x16>
 80074f8:	4630      	mov	r0, r6
 80074fa:	f7ff ffbd 	bl	8007478 <__sinit>
 80074fe:	3648      	adds	r6, #72	; 0x48
 8007500:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007504:	3b01      	subs	r3, #1
 8007506:	d503      	bpl.n	8007510 <__sfp+0x28>
 8007508:	6833      	ldr	r3, [r6, #0]
 800750a:	b30b      	cbz	r3, 8007550 <__sfp+0x68>
 800750c:	6836      	ldr	r6, [r6, #0]
 800750e:	e7f7      	b.n	8007500 <__sfp+0x18>
 8007510:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007514:	b9d5      	cbnz	r5, 800754c <__sfp+0x64>
 8007516:	4b16      	ldr	r3, [pc, #88]	; (8007570 <__sfp+0x88>)
 8007518:	60e3      	str	r3, [r4, #12]
 800751a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800751e:	6665      	str	r5, [r4, #100]	; 0x64
 8007520:	f000 f847 	bl	80075b2 <__retarget_lock_init_recursive>
 8007524:	f7ff ff96 	bl	8007454 <__sfp_lock_release>
 8007528:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800752c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007530:	6025      	str	r5, [r4, #0]
 8007532:	61a5      	str	r5, [r4, #24]
 8007534:	2208      	movs	r2, #8
 8007536:	4629      	mov	r1, r5
 8007538:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800753c:	f7fb fd7e 	bl	800303c <memset>
 8007540:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007544:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007548:	4620      	mov	r0, r4
 800754a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800754c:	3468      	adds	r4, #104	; 0x68
 800754e:	e7d9      	b.n	8007504 <__sfp+0x1c>
 8007550:	2104      	movs	r1, #4
 8007552:	4638      	mov	r0, r7
 8007554:	f7ff ff62 	bl	800741c <__sfmoreglue>
 8007558:	4604      	mov	r4, r0
 800755a:	6030      	str	r0, [r6, #0]
 800755c:	2800      	cmp	r0, #0
 800755e:	d1d5      	bne.n	800750c <__sfp+0x24>
 8007560:	f7ff ff78 	bl	8007454 <__sfp_lock_release>
 8007564:	230c      	movs	r3, #12
 8007566:	603b      	str	r3, [r7, #0]
 8007568:	e7ee      	b.n	8007548 <__sfp+0x60>
 800756a:	bf00      	nop
 800756c:	08007890 	.word	0x08007890
 8007570:	ffff0001 	.word	0xffff0001

08007574 <_fwalk_reent>:
 8007574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007578:	4606      	mov	r6, r0
 800757a:	4688      	mov	r8, r1
 800757c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007580:	2700      	movs	r7, #0
 8007582:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007586:	f1b9 0901 	subs.w	r9, r9, #1
 800758a:	d505      	bpl.n	8007598 <_fwalk_reent+0x24>
 800758c:	6824      	ldr	r4, [r4, #0]
 800758e:	2c00      	cmp	r4, #0
 8007590:	d1f7      	bne.n	8007582 <_fwalk_reent+0xe>
 8007592:	4638      	mov	r0, r7
 8007594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007598:	89ab      	ldrh	r3, [r5, #12]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d907      	bls.n	80075ae <_fwalk_reent+0x3a>
 800759e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075a2:	3301      	adds	r3, #1
 80075a4:	d003      	beq.n	80075ae <_fwalk_reent+0x3a>
 80075a6:	4629      	mov	r1, r5
 80075a8:	4630      	mov	r0, r6
 80075aa:	47c0      	blx	r8
 80075ac:	4307      	orrs	r7, r0
 80075ae:	3568      	adds	r5, #104	; 0x68
 80075b0:	e7e9      	b.n	8007586 <_fwalk_reent+0x12>

080075b2 <__retarget_lock_init_recursive>:
 80075b2:	4770      	bx	lr

080075b4 <__retarget_lock_acquire_recursive>:
 80075b4:	4770      	bx	lr

080075b6 <__retarget_lock_release_recursive>:
 80075b6:	4770      	bx	lr

080075b8 <__swhatbuf_r>:
 80075b8:	b570      	push	{r4, r5, r6, lr}
 80075ba:	460e      	mov	r6, r1
 80075bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075c0:	2900      	cmp	r1, #0
 80075c2:	b096      	sub	sp, #88	; 0x58
 80075c4:	4614      	mov	r4, r2
 80075c6:	461d      	mov	r5, r3
 80075c8:	da08      	bge.n	80075dc <__swhatbuf_r+0x24>
 80075ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	602a      	str	r2, [r5, #0]
 80075d2:	061a      	lsls	r2, r3, #24
 80075d4:	d410      	bmi.n	80075f8 <__swhatbuf_r+0x40>
 80075d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075da:	e00e      	b.n	80075fa <__swhatbuf_r+0x42>
 80075dc:	466a      	mov	r2, sp
 80075de:	f000 f903 	bl	80077e8 <_fstat_r>
 80075e2:	2800      	cmp	r0, #0
 80075e4:	dbf1      	blt.n	80075ca <__swhatbuf_r+0x12>
 80075e6:	9a01      	ldr	r2, [sp, #4]
 80075e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80075ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80075f0:	425a      	negs	r2, r3
 80075f2:	415a      	adcs	r2, r3
 80075f4:	602a      	str	r2, [r5, #0]
 80075f6:	e7ee      	b.n	80075d6 <__swhatbuf_r+0x1e>
 80075f8:	2340      	movs	r3, #64	; 0x40
 80075fa:	2000      	movs	r0, #0
 80075fc:	6023      	str	r3, [r4, #0]
 80075fe:	b016      	add	sp, #88	; 0x58
 8007600:	bd70      	pop	{r4, r5, r6, pc}
	...

08007604 <__smakebuf_r>:
 8007604:	898b      	ldrh	r3, [r1, #12]
 8007606:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007608:	079d      	lsls	r5, r3, #30
 800760a:	4606      	mov	r6, r0
 800760c:	460c      	mov	r4, r1
 800760e:	d507      	bpl.n	8007620 <__smakebuf_r+0x1c>
 8007610:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007614:	6023      	str	r3, [r4, #0]
 8007616:	6123      	str	r3, [r4, #16]
 8007618:	2301      	movs	r3, #1
 800761a:	6163      	str	r3, [r4, #20]
 800761c:	b002      	add	sp, #8
 800761e:	bd70      	pop	{r4, r5, r6, pc}
 8007620:	ab01      	add	r3, sp, #4
 8007622:	466a      	mov	r2, sp
 8007624:	f7ff ffc8 	bl	80075b8 <__swhatbuf_r>
 8007628:	9900      	ldr	r1, [sp, #0]
 800762a:	4605      	mov	r5, r0
 800762c:	4630      	mov	r0, r6
 800762e:	f7ff f961 	bl	80068f4 <_malloc_r>
 8007632:	b948      	cbnz	r0, 8007648 <__smakebuf_r+0x44>
 8007634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007638:	059a      	lsls	r2, r3, #22
 800763a:	d4ef      	bmi.n	800761c <__smakebuf_r+0x18>
 800763c:	f023 0303 	bic.w	r3, r3, #3
 8007640:	f043 0302 	orr.w	r3, r3, #2
 8007644:	81a3      	strh	r3, [r4, #12]
 8007646:	e7e3      	b.n	8007610 <__smakebuf_r+0xc>
 8007648:	4b0d      	ldr	r3, [pc, #52]	; (8007680 <__smakebuf_r+0x7c>)
 800764a:	62b3      	str	r3, [r6, #40]	; 0x28
 800764c:	89a3      	ldrh	r3, [r4, #12]
 800764e:	6020      	str	r0, [r4, #0]
 8007650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007654:	81a3      	strh	r3, [r4, #12]
 8007656:	9b00      	ldr	r3, [sp, #0]
 8007658:	6163      	str	r3, [r4, #20]
 800765a:	9b01      	ldr	r3, [sp, #4]
 800765c:	6120      	str	r0, [r4, #16]
 800765e:	b15b      	cbz	r3, 8007678 <__smakebuf_r+0x74>
 8007660:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007664:	4630      	mov	r0, r6
 8007666:	f000 f8d1 	bl	800780c <_isatty_r>
 800766a:	b128      	cbz	r0, 8007678 <__smakebuf_r+0x74>
 800766c:	89a3      	ldrh	r3, [r4, #12]
 800766e:	f023 0303 	bic.w	r3, r3, #3
 8007672:	f043 0301 	orr.w	r3, r3, #1
 8007676:	81a3      	strh	r3, [r4, #12]
 8007678:	89a0      	ldrh	r0, [r4, #12]
 800767a:	4305      	orrs	r5, r0
 800767c:	81a5      	strh	r5, [r4, #12]
 800767e:	e7cd      	b.n	800761c <__smakebuf_r+0x18>
 8007680:	08007411 	.word	0x08007411

08007684 <_malloc_usable_size_r>:
 8007684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007688:	1f18      	subs	r0, r3, #4
 800768a:	2b00      	cmp	r3, #0
 800768c:	bfbc      	itt	lt
 800768e:	580b      	ldrlt	r3, [r1, r0]
 8007690:	18c0      	addlt	r0, r0, r3
 8007692:	4770      	bx	lr

08007694 <_raise_r>:
 8007694:	291f      	cmp	r1, #31
 8007696:	b538      	push	{r3, r4, r5, lr}
 8007698:	4604      	mov	r4, r0
 800769a:	460d      	mov	r5, r1
 800769c:	d904      	bls.n	80076a8 <_raise_r+0x14>
 800769e:	2316      	movs	r3, #22
 80076a0:	6003      	str	r3, [r0, #0]
 80076a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076a6:	bd38      	pop	{r3, r4, r5, pc}
 80076a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80076aa:	b112      	cbz	r2, 80076b2 <_raise_r+0x1e>
 80076ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80076b0:	b94b      	cbnz	r3, 80076c6 <_raise_r+0x32>
 80076b2:	4620      	mov	r0, r4
 80076b4:	f000 f830 	bl	8007718 <_getpid_r>
 80076b8:	462a      	mov	r2, r5
 80076ba:	4601      	mov	r1, r0
 80076bc:	4620      	mov	r0, r4
 80076be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076c2:	f000 b817 	b.w	80076f4 <_kill_r>
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d00a      	beq.n	80076e0 <_raise_r+0x4c>
 80076ca:	1c59      	adds	r1, r3, #1
 80076cc:	d103      	bne.n	80076d6 <_raise_r+0x42>
 80076ce:	2316      	movs	r3, #22
 80076d0:	6003      	str	r3, [r0, #0]
 80076d2:	2001      	movs	r0, #1
 80076d4:	e7e7      	b.n	80076a6 <_raise_r+0x12>
 80076d6:	2400      	movs	r4, #0
 80076d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80076dc:	4628      	mov	r0, r5
 80076de:	4798      	blx	r3
 80076e0:	2000      	movs	r0, #0
 80076e2:	e7e0      	b.n	80076a6 <_raise_r+0x12>

080076e4 <raise>:
 80076e4:	4b02      	ldr	r3, [pc, #8]	; (80076f0 <raise+0xc>)
 80076e6:	4601      	mov	r1, r0
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	f7ff bfd3 	b.w	8007694 <_raise_r>
 80076ee:	bf00      	nop
 80076f0:	20000000 	.word	0x20000000

080076f4 <_kill_r>:
 80076f4:	b538      	push	{r3, r4, r5, lr}
 80076f6:	4d07      	ldr	r5, [pc, #28]	; (8007714 <_kill_r+0x20>)
 80076f8:	2300      	movs	r3, #0
 80076fa:	4604      	mov	r4, r0
 80076fc:	4608      	mov	r0, r1
 80076fe:	4611      	mov	r1, r2
 8007700:	602b      	str	r3, [r5, #0]
 8007702:	f7fb fb8e 	bl	8002e22 <_kill>
 8007706:	1c43      	adds	r3, r0, #1
 8007708:	d102      	bne.n	8007710 <_kill_r+0x1c>
 800770a:	682b      	ldr	r3, [r5, #0]
 800770c:	b103      	cbz	r3, 8007710 <_kill_r+0x1c>
 800770e:	6023      	str	r3, [r4, #0]
 8007710:	bd38      	pop	{r3, r4, r5, pc}
 8007712:	bf00      	nop
 8007714:	200002e4 	.word	0x200002e4

08007718 <_getpid_r>:
 8007718:	f7fb bb7c 	b.w	8002e14 <_getpid>

0800771c <__sread>:
 800771c:	b510      	push	{r4, lr}
 800771e:	460c      	mov	r4, r1
 8007720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007724:	f000 f894 	bl	8007850 <_read_r>
 8007728:	2800      	cmp	r0, #0
 800772a:	bfab      	itete	ge
 800772c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800772e:	89a3      	ldrhlt	r3, [r4, #12]
 8007730:	181b      	addge	r3, r3, r0
 8007732:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007736:	bfac      	ite	ge
 8007738:	6563      	strge	r3, [r4, #84]	; 0x54
 800773a:	81a3      	strhlt	r3, [r4, #12]
 800773c:	bd10      	pop	{r4, pc}

0800773e <__swrite>:
 800773e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007742:	461f      	mov	r7, r3
 8007744:	898b      	ldrh	r3, [r1, #12]
 8007746:	05db      	lsls	r3, r3, #23
 8007748:	4605      	mov	r5, r0
 800774a:	460c      	mov	r4, r1
 800774c:	4616      	mov	r6, r2
 800774e:	d505      	bpl.n	800775c <__swrite+0x1e>
 8007750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007754:	2302      	movs	r3, #2
 8007756:	2200      	movs	r2, #0
 8007758:	f000 f868 	bl	800782c <_lseek_r>
 800775c:	89a3      	ldrh	r3, [r4, #12]
 800775e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007762:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007766:	81a3      	strh	r3, [r4, #12]
 8007768:	4632      	mov	r2, r6
 800776a:	463b      	mov	r3, r7
 800776c:	4628      	mov	r0, r5
 800776e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007772:	f000 b817 	b.w	80077a4 <_write_r>

08007776 <__sseek>:
 8007776:	b510      	push	{r4, lr}
 8007778:	460c      	mov	r4, r1
 800777a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800777e:	f000 f855 	bl	800782c <_lseek_r>
 8007782:	1c43      	adds	r3, r0, #1
 8007784:	89a3      	ldrh	r3, [r4, #12]
 8007786:	bf15      	itete	ne
 8007788:	6560      	strne	r0, [r4, #84]	; 0x54
 800778a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800778e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007792:	81a3      	strheq	r3, [r4, #12]
 8007794:	bf18      	it	ne
 8007796:	81a3      	strhne	r3, [r4, #12]
 8007798:	bd10      	pop	{r4, pc}

0800779a <__sclose>:
 800779a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800779e:	f000 b813 	b.w	80077c8 <_close_r>
	...

080077a4 <_write_r>:
 80077a4:	b538      	push	{r3, r4, r5, lr}
 80077a6:	4d07      	ldr	r5, [pc, #28]	; (80077c4 <_write_r+0x20>)
 80077a8:	4604      	mov	r4, r0
 80077aa:	4608      	mov	r0, r1
 80077ac:	4611      	mov	r1, r2
 80077ae:	2200      	movs	r2, #0
 80077b0:	602a      	str	r2, [r5, #0]
 80077b2:	461a      	mov	r2, r3
 80077b4:	f7fb fb6c 	bl	8002e90 <_write>
 80077b8:	1c43      	adds	r3, r0, #1
 80077ba:	d102      	bne.n	80077c2 <_write_r+0x1e>
 80077bc:	682b      	ldr	r3, [r5, #0]
 80077be:	b103      	cbz	r3, 80077c2 <_write_r+0x1e>
 80077c0:	6023      	str	r3, [r4, #0]
 80077c2:	bd38      	pop	{r3, r4, r5, pc}
 80077c4:	200002e4 	.word	0x200002e4

080077c8 <_close_r>:
 80077c8:	b538      	push	{r3, r4, r5, lr}
 80077ca:	4d06      	ldr	r5, [pc, #24]	; (80077e4 <_close_r+0x1c>)
 80077cc:	2300      	movs	r3, #0
 80077ce:	4604      	mov	r4, r0
 80077d0:	4608      	mov	r0, r1
 80077d2:	602b      	str	r3, [r5, #0]
 80077d4:	f7fb fb78 	bl	8002ec8 <_close>
 80077d8:	1c43      	adds	r3, r0, #1
 80077da:	d102      	bne.n	80077e2 <_close_r+0x1a>
 80077dc:	682b      	ldr	r3, [r5, #0]
 80077de:	b103      	cbz	r3, 80077e2 <_close_r+0x1a>
 80077e0:	6023      	str	r3, [r4, #0]
 80077e2:	bd38      	pop	{r3, r4, r5, pc}
 80077e4:	200002e4 	.word	0x200002e4

080077e8 <_fstat_r>:
 80077e8:	b538      	push	{r3, r4, r5, lr}
 80077ea:	4d07      	ldr	r5, [pc, #28]	; (8007808 <_fstat_r+0x20>)
 80077ec:	2300      	movs	r3, #0
 80077ee:	4604      	mov	r4, r0
 80077f0:	4608      	mov	r0, r1
 80077f2:	4611      	mov	r1, r2
 80077f4:	602b      	str	r3, [r5, #0]
 80077f6:	f7fb fb72 	bl	8002ede <_fstat>
 80077fa:	1c43      	adds	r3, r0, #1
 80077fc:	d102      	bne.n	8007804 <_fstat_r+0x1c>
 80077fe:	682b      	ldr	r3, [r5, #0]
 8007800:	b103      	cbz	r3, 8007804 <_fstat_r+0x1c>
 8007802:	6023      	str	r3, [r4, #0]
 8007804:	bd38      	pop	{r3, r4, r5, pc}
 8007806:	bf00      	nop
 8007808:	200002e4 	.word	0x200002e4

0800780c <_isatty_r>:
 800780c:	b538      	push	{r3, r4, r5, lr}
 800780e:	4d06      	ldr	r5, [pc, #24]	; (8007828 <_isatty_r+0x1c>)
 8007810:	2300      	movs	r3, #0
 8007812:	4604      	mov	r4, r0
 8007814:	4608      	mov	r0, r1
 8007816:	602b      	str	r3, [r5, #0]
 8007818:	f7fb fb70 	bl	8002efc <_isatty>
 800781c:	1c43      	adds	r3, r0, #1
 800781e:	d102      	bne.n	8007826 <_isatty_r+0x1a>
 8007820:	682b      	ldr	r3, [r5, #0]
 8007822:	b103      	cbz	r3, 8007826 <_isatty_r+0x1a>
 8007824:	6023      	str	r3, [r4, #0]
 8007826:	bd38      	pop	{r3, r4, r5, pc}
 8007828:	200002e4 	.word	0x200002e4

0800782c <_lseek_r>:
 800782c:	b538      	push	{r3, r4, r5, lr}
 800782e:	4d07      	ldr	r5, [pc, #28]	; (800784c <_lseek_r+0x20>)
 8007830:	4604      	mov	r4, r0
 8007832:	4608      	mov	r0, r1
 8007834:	4611      	mov	r1, r2
 8007836:	2200      	movs	r2, #0
 8007838:	602a      	str	r2, [r5, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	f7fb fb68 	bl	8002f10 <_lseek>
 8007840:	1c43      	adds	r3, r0, #1
 8007842:	d102      	bne.n	800784a <_lseek_r+0x1e>
 8007844:	682b      	ldr	r3, [r5, #0]
 8007846:	b103      	cbz	r3, 800784a <_lseek_r+0x1e>
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	bd38      	pop	{r3, r4, r5, pc}
 800784c:	200002e4 	.word	0x200002e4

08007850 <_read_r>:
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	4d07      	ldr	r5, [pc, #28]	; (8007870 <_read_r+0x20>)
 8007854:	4604      	mov	r4, r0
 8007856:	4608      	mov	r0, r1
 8007858:	4611      	mov	r1, r2
 800785a:	2200      	movs	r2, #0
 800785c:	602a      	str	r2, [r5, #0]
 800785e:	461a      	mov	r2, r3
 8007860:	f7fb faf9 	bl	8002e56 <_read>
 8007864:	1c43      	adds	r3, r0, #1
 8007866:	d102      	bne.n	800786e <_read_r+0x1e>
 8007868:	682b      	ldr	r3, [r5, #0]
 800786a:	b103      	cbz	r3, 800786e <_read_r+0x1e>
 800786c:	6023      	str	r3, [r4, #0]
 800786e:	bd38      	pop	{r3, r4, r5, pc}
 8007870:	200002e4 	.word	0x200002e4

08007874 <_init>:
 8007874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007876:	bf00      	nop
 8007878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800787a:	bc08      	pop	{r3}
 800787c:	469e      	mov	lr, r3
 800787e:	4770      	bx	lr

08007880 <_fini>:
 8007880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007882:	bf00      	nop
 8007884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007886:	bc08      	pop	{r3}
 8007888:	469e      	mov	lr, r3
 800788a:	4770      	bx	lr
